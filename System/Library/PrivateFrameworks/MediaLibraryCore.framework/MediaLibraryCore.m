uint64_t mlcore::EntityQueryResult::sections(mlcore::EntityQueryResult *this)
{
  return *((_QWORD *)this + 25);
}

uint64_t mlcore::EntityQueryResult::propertyCaches(mlcore::EntityQueryResult *this)
{
  return *((_QWORD *)this + 23);
}

uint64_t mlcore::Section::range(mlcore::Section *this)
{
  return (uint64_t)this + 24;
}

unint64_t mlcore::EntityQueryResult::entityCount(mlcore::EntityQueryResult *this)
{
  return 0x84BDA12F684BDA13 * ((uint64_t)(*(_QWORD *)(*((_QWORD *)this + 23) + 8) - **((_QWORD **)this + 23)) >> 3);
}

uint64_t std::__split_buffer<std::pair<mlcore::EntityClass *,mlcore::PropertyCache>>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 224;
    mlcore::PropertyCacheBase<long long,int,double,std::string,mediaplatform::Data>::~PropertyCacheBase((_QWORD *)(i - 216));
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void mlcore::PropertiesQueryResult::~PropertiesQueryResult(std::exception *this)
{
  std::exception *v2;

  this->__vftable = (std::exception_vtbl *)&off_24C33A2B0;
  v2 = this + 20;
  std::vector<mlcore::PropertyCache>::__destroy_vector::operator()[abi:ne180100]((void ***)&v2);
  mlcore::QueryResult::~QueryResult(this);
}

{
  std::exception *v2;

  this->__vftable = (std::exception_vtbl *)&off_24C33A2B0;
  v2 = this + 20;
  std::vector<mlcore::PropertyCache>::__destroy_vector::operator()[abi:ne180100]((void ***)&v2);
  mlcore::QueryResult::~QueryResult(this);
  JUMPOUT(0x20BD27AFCLL);
}

void mlcore::PredicateProperty::_SQLJoinClauses(mlcore::PredicateProperty *this@<X0>, mlcore::EntityClass *a2@<X1>, _QWORD *a3@<X8>)
{
  void *__p[3];
  uint64_t v6;

  (*(void (**)(void **__return_ptr))(**((_QWORD **)this + 8) + 56))(__p);
  mlcore::SQLJoinClausesForEntityClassAndProperties((uint64_t)a2, (uint64_t)__p, a3);
  std::__hash_table<mlcore::ModelPropertyBase *,std::hash<mlcore::ModelPropertyBase *>,std::equal_to<mlcore::ModelPropertyBase *>,std::allocator<mlcore::ModelPropertyBase *>>::~__hash_table((uint64_t)&v6);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

void sub_20A64ADD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  mlcore::OrderedSet<mlcore::ModelPropertyBase *,std::hash<mlcore::ModelPropertyBase *>,std::equal_to<mlcore::ModelPropertyBase *>>::~OrderedSet((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t mlcore::InPredicateBase::_allProperties@<X0>(mlcore::InPredicateBase *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3[2];

  v3[1] = *MEMORY[0x24BDAC8D0];
  v3[0] = *((_QWORD *)this + 1);
  return mlcore::OrderedSet<mlcore::ModelPropertyBase *,std::hash<mlcore::ModelPropertyBase *>,std::equal_to<mlcore::ModelPropertyBase *>>::OrderedSet(a2, v3, 1);
}

__n128 mlcore::Query::_SQLFromStatement@<Q0>(_QWORD *a1@<X0>, uint64_t *a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  __int128 v14;
  __n128 result;
  uint64_t v16;
  std::__shared_weak_count *v17;
  void *__p[3];
  uint64_t v19;
  _QWORD *v20[3];

  v5 = a1[1];
  v6 = (std::__shared_weak_count *)a2[1];
  v16 = *a2;
  v17 = v6;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  (*(void (**)(void **__return_ptr, _QWORD *, uint64_t *))(*a1 + 88))(__p, a1, &v16);
  mlcore::SQLJoinClausesForEntityClassAndProperties(v5, (uint64_t)__p, v20);
  std::__hash_table<mlcore::ModelPropertyBase *,std::hash<mlcore::ModelPropertyBase *>,std::equal_to<mlcore::ModelPropertyBase *>,std::allocator<mlcore::ModelPropertyBase *>>::~__hash_table((uint64_t)&v19);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  v9 = v17;
  if (v17)
  {
    v10 = (unint64_t *)&v17->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  v12 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)a1[1] + 88))(a1[1]);
  v13 = operator new(0x50uLL);
  v13[1] = 0;
  v13[2] = 0;
  *v13 = &off_24C33BBF0;
  *(_QWORD *)&v14 = mediaplatform::SQLFromStatement::SQLFromStatement((uint64_t)(v13 + 3), (__int128 *)(v12 + 8), v20);
  *((_QWORD *)&v14 + 1) = v13;
  *a3 = v14;
  __p[0] = v20;
  std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  return result;
}

void sub_20A64AF70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12)
{
  std::__shared_weak_count *v12;
  uint64_t v13;
  void *v15;

  std::__shared_weak_count::~__shared_weak_count(v12);
  operator delete(v15);
  a12 = v13 - 56;
  std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  _Unwind_Resume(a1);
}

void mlcore::CompoundPredicate::_allProperties(mlcore::CompoundPredicate *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v3;
  uint64_t *i;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  unint64_t *v11;
  unint64_t v12;
  void *__p;
  uint64_t *v14;
  _QWORD v15[7];
  uint64_t v16;

  *(_QWORD *)(a2 + 48) = 0;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)a2 = 0u;
  *(_DWORD *)(a2 + 56) = 1065353216;
  v3 = (uint64_t *)*((_QWORD *)this + 1);
  for (i = (uint64_t *)*((_QWORD *)this + 2); v3 != i; v3 += 2)
  {
    v5 = *v3;
    v6 = (std::__shared_weak_count *)v3[1];
    v15[5] = *v3;
    v15[6] = v6;
    if (v6)
    {
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v8 = __ldxr(p_shared_owners);
      while (__stxr(v8 + 1, p_shared_owners));
    }
    (*(void (**)(void **__return_ptr))(*(_QWORD *)v5 + 56))(&__p);
    v9 = (uint64_t *)__p;
    v10 = v14;
    while (v9 != v10)
    {
      v16 = *v9;
      mlcore::OrderedSet<mlcore::ModelPropertyBase *,std::hash<mlcore::ModelPropertyBase *>,std::equal_to<mlcore::ModelPropertyBase *>>::insert((float *)a2, &v16);
      ++v9;
    }
    std::__hash_table<mlcore::ModelPropertyBase *,std::hash<mlcore::ModelPropertyBase *>,std::equal_to<mlcore::ModelPropertyBase *>,std::allocator<mlcore::ModelPropertyBase *>>::~__hash_table((uint64_t)v15);
    if (__p)
    {
      v14 = (uint64_t *)__p;
      operator delete(__p);
    }
    if (v6)
    {
      v11 = (unint64_t *)&v6->__shared_owners_;
      do
        v12 = __ldaxr(v11);
      while (__stlxr(v12 - 1, v11));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
}

void sub_20A64B0D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  uint64_t v10;
  va_list va;

  va_start(va, a10);
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)va);
  mlcore::OrderedSet<mlcore::ModelPropertyBase *,std::hash<mlcore::ModelPropertyBase *>,std::equal_to<mlcore::ModelPropertyBase *>>::~OrderedSet(v10);
  _Unwind_Resume(a1);
}

uint64_t std::__hash_table<mlcore::ModelPropertyBase *,std::hash<mlcore::ModelPropertyBase *>,std::equal_to<mlcore::ModelPropertyBase *>,std::allocator<mlcore::ModelPropertyBase *>>::~__hash_table(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  v2 = *(_QWORD **)(a1 + 16);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v4)
    operator delete(v4);
  return a1;
}

uint64_t mlcore::UnaryPredicateBase::_allProperties@<X0>(mlcore::UnaryPredicateBase *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3[2];

  v3[1] = *MEMORY[0x24BDAC8D0];
  v3[0] = *((_QWORD *)this + 1);
  return mlcore::OrderedSet<mlcore::ModelPropertyBase *,std::hash<mlcore::ModelPropertyBase *>,std::equal_to<mlcore::ModelPropertyBase *>>::OrderedSet(a2, v3, 1);
}

uint64_t mlcore::OrderedSet<mlcore::ModelPropertyBase *,std::hash<mlcore::ModelPropertyBase *>,std::equal_to<mlcore::ModelPropertyBase *>>::OrderedSet(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v7;

  *(_QWORD *)(a1 + 48) = 0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_DWORD *)(a1 + 56) = 1065353216;
  if (a3)
  {
    v5 = 8 * a3;
    do
    {
      v7 = *a2;
      mlcore::OrderedSet<mlcore::ModelPropertyBase *,std::hash<mlcore::ModelPropertyBase *>,std::equal_to<mlcore::ModelPropertyBase *>>::insert((float *)a1, &v7);
      ++a2;
      v5 -= 8;
    }
    while (v5);
  }
  return a1;
}

void sub_20A64B220(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v4;

  std::__hash_table<mlcore::ModelPropertyBase *,std::hash<mlcore::ModelPropertyBase *>,std::equal_to<mlcore::ModelPropertyBase *>,std::allocator<mlcore::ModelPropertyBase *>>::~__hash_table(v2);
  v4 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(a1);
}

uint64_t mlcore::ComparisonPredicateBase::_allProperties@<X0>(mlcore::ComparisonPredicateBase *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3[2];

  v3[1] = *MEMORY[0x24BDAC8D0];
  v3[0] = *((_QWORD *)this + 1);
  return mlcore::OrderedSet<mlcore::ModelPropertyBase *,std::hash<mlcore::ModelPropertyBase *>,std::equal_to<mlcore::ModelPropertyBase *>>::OrderedSet(a2, v3, 1);
}

void mlcore::PropertiesQuery::_resultPropertiesToFetch(mlcore::PropertiesQuery *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v5;

  *(_QWORD *)(a2 + 48) = 0;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)a2 = 0u;
  *(_DWORD *)(a2 + 56) = 1065353216;
  v3 = (uint64_t *)*((_QWORD *)this + 10);
  v4 = (uint64_t *)*((_QWORD *)this + 11);
  while (v3 != v4)
  {
    v5 = *v3;
    mlcore::OrderedSet<mlcore::ModelPropertyBase *,std::hash<mlcore::ModelPropertyBase *>,std::equal_to<mlcore::ModelPropertyBase *>>::insert((float *)a2, &v5);
    ++v3;
  }
}

void sub_20A64B30C(_Unwind_Exception *a1)
{
  uint64_t v1;

  mlcore::OrderedSet<mlcore::ModelPropertyBase *,std::hash<mlcore::ModelPropertyBase *>,std::equal_to<mlcore::ModelPropertyBase *>>::~OrderedSet(v1);
  _Unwind_Resume(a1);
}

void mlcore::OrderedSet<mlcore::ModelPropertyBase *,std::hash<mlcore::ModelPropertyBase *>,std::equal_to<mlcore::ModelPropertyBase *>>::insert(float *a1, uint64_t *a2)
{
  unint64_t v2;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  _QWORD *v11;
  _QWORD *i;
  unint64_t v13;
  char *v14;
  float v15;
  float v16;
  _BOOL8 v17;
  unint64_t v18;
  unint64_t v19;
  int8x8_t prime;
  char *v21;
  char *v22;
  uint64_t v23;
  char *v24;
  unint64_t v25;
  uint8x8_t v26;
  unint64_t v27;
  uint8x8_t v28;
  uint64_t v29;
  char *v30;
  unint64_t v31;
  char *v32;
  char *v33;
  char *v34;
  unint64_t v35;
  unint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  unint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  char *v49;

  v5 = *a2;
  v6 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ HIDWORD(*a2));
  v7 = 0x9DDFEA08EB382D69 * (HIDWORD(*a2) ^ (v6 >> 47) ^ v6);
  v8 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
  v9 = *((_QWORD *)a1 + 4);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      v2 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
      if (v8 >= v9)
        v2 = v8 % v9;
    }
    else
    {
      v2 = v8 & (v9 - 1);
    }
    v11 = *(_QWORD **)(*((_QWORD *)a1 + 3) + 8 * v2);
    if (v11)
    {
      for (i = (_QWORD *)*v11; i; i = (_QWORD *)*i)
      {
        v13 = i[1];
        if (v13 == v8)
        {
          if (i[2] == v5)
            return;
        }
        else
        {
          if (v10.u32[0] > 1uLL)
          {
            if (v13 >= v9)
              v13 %= v9;
          }
          else
          {
            v13 &= v9 - 1;
          }
          if (v13 != v2)
            break;
        }
      }
    }
  }
  v14 = (char *)operator new(0x18uLL);
  *(_QWORD *)v14 = 0;
  *((_QWORD *)v14 + 1) = v8;
  *((_QWORD *)v14 + 2) = v5;
  v15 = (float)(unint64_t)(*((_QWORD *)a1 + 6) + 1);
  v16 = a1[14];
  if (!v9 || (float)(v16 * (float)v9) < v15)
  {
    v17 = 1;
    if (v9 >= 3)
      v17 = (v9 & (v9 - 1)) != 0;
    v18 = v17 | (2 * v9);
    v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19)
      prime = (int8x8_t)v19;
    else
      prime = (int8x8_t)v18;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
      v9 = *((_QWORD *)a1 + 4);
    }
    if (*(_QWORD *)&prime > v9)
      goto LABEL_30;
    if (*(_QWORD *)&prime < v9)
    {
      v27 = vcvtps_u32_f32((float)*((unint64_t *)a1 + 6) / a1[14]);
      if (v9 < 3 || (v28 = (uint8x8_t)vcnt_s8((int8x8_t)v9), v28.i16[0] = vaddlv_u8(v28), v28.u32[0] > 1uLL))
      {
        v27 = std::__next_prime(v27);
      }
      else
      {
        v29 = 1 << -(char)__clz(v27 - 1);
        if (v27 >= 2)
          v27 = v29;
      }
      if (*(_QWORD *)&prime <= v27)
        prime = (int8x8_t)v27;
      if (*(_QWORD *)&prime >= v9)
      {
        v9 = *((_QWORD *)a1 + 4);
      }
      else
      {
        if (prime)
        {
LABEL_30:
          if (*(_QWORD *)&prime >> 61)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v21 = (char *)operator new(8 * *(_QWORD *)&prime);
          v22 = (char *)*((_QWORD *)a1 + 3);
          *((_QWORD *)a1 + 3) = v21;
          if (v22)
            operator delete(v22);
          v23 = 0;
          *((int8x8_t *)a1 + 4) = prime;
          do
            *(_QWORD *)(*((_QWORD *)a1 + 3) + 8 * v23++) = 0;
          while (*(_QWORD *)&prime != v23);
          v24 = (char *)*((_QWORD *)a1 + 5);
          if (v24)
          {
            v25 = *((_QWORD *)v24 + 1);
            v26 = (uint8x8_t)vcnt_s8(prime);
            v26.i16[0] = vaddlv_u8(v26);
            if (v26.u32[0] > 1uLL)
            {
              if (v25 >= *(_QWORD *)&prime)
                v25 %= *(_QWORD *)&prime;
            }
            else
            {
              v25 &= *(_QWORD *)&prime - 1;
            }
            *(_QWORD *)(*((_QWORD *)a1 + 3) + 8 * v25) = a1 + 10;
            v30 = *(char **)v24;
            if (*(_QWORD *)v24)
            {
              do
              {
                v31 = *((_QWORD *)v30 + 1);
                if (v26.u32[0] > 1uLL)
                {
                  if (v31 >= *(_QWORD *)&prime)
                    v31 %= *(_QWORD *)&prime;
                }
                else
                {
                  v31 &= *(_QWORD *)&prime - 1;
                }
                if (v31 != v25)
                {
                  v32 = (char *)*((_QWORD *)a1 + 3);
                  if (!*(_QWORD *)&v32[8 * v31])
                  {
                    *(_QWORD *)&v32[8 * v31] = v24;
                    goto LABEL_55;
                  }
                  *(_QWORD *)v24 = *(_QWORD *)v30;
                  *(_QWORD *)v30 = **(_QWORD **)(*((_QWORD *)a1 + 3) + 8 * v31);
                  **(_QWORD **)(*((_QWORD *)a1 + 3) + 8 * v31) = v30;
                  v30 = v24;
                }
                v31 = v25;
LABEL_55:
                v24 = v30;
                v30 = *(char **)v30;
                v25 = v31;
              }
              while (v30);
            }
          }
          v9 = (unint64_t)prime;
          goto LABEL_59;
        }
        v49 = (char *)*((_QWORD *)a1 + 3);
        *((_QWORD *)a1 + 3) = 0;
        if (v49)
          operator delete(v49);
        v9 = 0;
        *((_QWORD *)a1 + 4) = 0;
      }
    }
LABEL_59:
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9)
        v2 = v8 % v9;
      else
        v2 = v8;
    }
    else
    {
      v2 = (v9 - 1) & v8;
    }
  }
  v33 = (char *)*((_QWORD *)a1 + 3);
  v34 = *(char **)&v33[8 * v2];
  if (v34)
  {
    *(_QWORD *)v14 = *(_QWORD *)v34;
LABEL_72:
    *(_QWORD *)v34 = v14;
    goto LABEL_73;
  }
  *(_QWORD *)v14 = *((_QWORD *)a1 + 5);
  *((_QWORD *)a1 + 5) = v14;
  *(_QWORD *)&v33[8 * v2] = a1 + 10;
  if (*(_QWORD *)v14)
  {
    v35 = *(_QWORD *)(*(_QWORD *)v14 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v35 >= v9)
        v35 %= v9;
    }
    else
    {
      v35 &= v9 - 1;
    }
    v34 = (char *)(*((_QWORD *)a1 + 3) + 8 * v35);
    goto LABEL_72;
  }
LABEL_73:
  ++*((_QWORD *)a1 + 6);
  v37 = (char *)*((_QWORD *)a1 + 1);
  v36 = *((_QWORD *)a1 + 2);
  if ((unint64_t)v37 >= v36)
  {
    v39 = (uint64_t)&v37[-*(_QWORD *)a1] >> 3;
    if ((unint64_t)(v39 + 1) >> 61)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v40 = v36 - *(_QWORD *)a1;
    v41 = v40 >> 2;
    if (v40 >> 2 <= (unint64_t)(v39 + 1))
      v41 = v39 + 1;
    if ((unint64_t)v40 >= 0x7FFFFFFFFFFFFFF8)
      v42 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v42 = v41;
    if (v42)
      v42 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<mlcore::ModelPropertyBase *>>(v42);
    else
      v43 = 0;
    v44 = (uint64_t *)(v42 + 8 * v39);
    v45 = v42 + 8 * v43;
    *v44 = *a2;
    v38 = (char *)(v44 + 1);
    v47 = *(char **)a1;
    v46 = (char *)*((_QWORD *)a1 + 1);
    if (v46 != *(char **)a1)
    {
      do
      {
        v48 = *((_QWORD *)v46 - 1);
        v46 -= 8;
        *--v44 = v48;
      }
      while (v46 != v47);
      v46 = *(char **)a1;
    }
    *(_QWORD *)a1 = v44;
    *((_QWORD *)a1 + 1) = v38;
    *((_QWORD *)a1 + 2) = v45;
    if (v46)
      operator delete(v46);
  }
  else
  {
    *(_QWORD *)v37 = *a2;
    v38 = v37 + 8;
  }
  *((_QWORD *)a1 + 1) = v38;
}

void sub_20A64B7D8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__split_buffer<mlcore::PropertyCache>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;
  void (**v4)(void);

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    v4 = *(void (***)(void))(i - 216);
    *(_QWORD *)(a1 + 16) = i - 216;
    (*v4)();
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

_QWORD *mlcore::PropertyCacheBase<long long,int,double,std::string,mediaplatform::Data>::~PropertyCacheBase(_QWORD *a1)
{
  *a1 = &off_24C3399C0;
  std::__hash_table<mlcore::ModelPropertyBase *,std::hash<mlcore::ModelPropertyBase *>,std::equal_to<mlcore::ModelPropertyBase *>,std::allocator<mlcore::ModelPropertyBase *>>::~__hash_table((uint64_t)(a1 + 21));
  *a1 = &off_24C3399A0;
  std::__hash_table<mlcore::ModelPropertyBase *,std::hash<mlcore::ModelPropertyBase *>,std::equal_to<mlcore::ModelPropertyBase *>,std::allocator<mlcore::ModelPropertyBase *>>::~__hash_table((uint64_t)(a1 + 16));
  return mlcore::PropertyCacheBase<double,std::string,mediaplatform::Data>::~PropertyCacheBase(a1);
}

void std::__function::__func<mlcore::EntityQuery::_perform(std::shared_ptr<mlcore::Transaction>,std::function<void ()(std::shared_ptr<mlcore::QueryResult>)>)::$_0,std::allocator<mlcore::EntityQuery::_perform(std::shared_ptr<mlcore::Transaction>,std::function<void ()(std::shared_ptr<mlcore::QueryResult>)>)::$_0>,void ()(mediaplatform::DatabaseResultList,BOOL &)>::operator()(uint64_t a1, int *a2)
{
  std::__shared_weak_count *v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  int v8;
  int v9;
  int *v10;
  int v11;
  _BYTE *v13;
  std::vector<std::string> **v14;
  std::vector<std::string> *v15;
  const std::string *end;
  std::vector<std::string>::const_iterator v17;
  std::vector<std::string> **v18;
  std::vector<std::string> *v19;
  const std::string *v20;
  std::vector<std::string>::const_iterator v21;
  uint64_t **v22;
  uint64_t v23;
  uint64_t *v24;
  __int128 *v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  _DWORD *v31;
  _QWORD *v32;
  uint64_t *v33;
  unint64_t v34;
  unint64_t v35;
  _QWORD *v36;
  _QWORD *v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  std::__shared_weak_count *v44;
  unint64_t *p_shared_owners;
  unint64_t v46;
  int v47;
  uint64_t v48;
  std::__shared_weak_count *v49;
  std::vector<std::string>::value_type __x;
  __int128 v51;
  int v52;
  std::string v53;
  _QWORD v54[27];

  v47 = *a2;
  v3 = (std::__shared_weak_count *)*((_QWORD *)a2 + 2);
  v48 = *((_QWORD *)a2 + 1);
  v49 = v3;
  *((_QWORD *)a2 + 1) = 0;
  *((_QWORD *)a2 + 2) = 0;
  mlcore::PropertyCacheBase<long long,int,double,std::string,mediaplatform::Data>::PropertyCacheBase((uint64_t)v54, *(_QWORD *)(a1 + 8));
  v54[0] = &off_24C3371C0;
  v54[26] = &unk_24C3371E8;
  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD **)v4;
  v6 = *(_QWORD **)(v4 + 8);
  if (*(_QWORD **)v4 != v6)
  {
    v7 = 0;
    do
    {
      (*(void (**)(_QWORD, _QWORD *, int *, uint64_t))(*(_QWORD *)*v5 + 56))(*v5, v54, &v47, v7);
      v7 = (v7 + 1);
      ++v5;
    }
    while (v5 != v6);
  }
  if (**(_BYTE **)(a1 + 16))
  {
    v8 = mlcore::PropertyCacheBase<int,double,std::string,mediaplatform::Data>::valueForProperty((uint64_t)v54, **(_QWORD **)(a1 + 24));
    v9 = v8;
    v10 = *(int **)(a1 + 32);
    v11 = *v10;
    if (*v10 == -1 || v8 == v11)
    {
LABEL_31:
      ++*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8);
      *v10 = v9;
      goto LABEL_32;
    }
    if (v8 == **(_DWORD **)(a1 + 40))
    {
      v13 = *(_BYTE **)(a1 + 48);
      if (!*v13)
      {
        *v13 = 1;
        v14 = *(std::vector<std::string> ***)(a1 + 56);
        v15 = *v14;
        end = (*v14)->__end_;
        mlcore::_LocalizedString((mlcore *)&__x, CFSTR("UNKNOWN_SECTION_HEADER_TITLE"));
        v17.__i_ = end;
        std::vector<std::string>::insert(v15, v17, &__x);
        if (SHIBYTE(__x.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__x.__r_.__value_.__l.__data_);
        v18 = *(std::vector<std::string> ***)(a1 + 64);
        v19 = *v18;
        v20 = (*v18)->__end_;
        mlcore::_LocalizedString((mlcore *)&__x, CFSTR("UNKNOWN_SECTION_INDEX_TITLE"));
        v21.__i_ = v20;
        std::vector<std::string>::insert(v19, v21, &__x);
        if (SHIBYTE(__x.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__x.__r_.__value_.__l.__data_);
        v10 = *(int **)(a1 + 32);
        v11 = *v10;
      }
    }
    v22 = *(uint64_t ***)(a1 + 56);
    memset(&v53, 0, sizeof(v53));
    v24 = *v22;
    v23 = **v22;
    if (0xAAAAAAAAAAAAAAABLL * ((v24[1] - v23) >> 3) <= v11)
    {
      v26 = a1 + 72;
      v25 = *(__int128 **)(a1 + 72);
      v27 = *v10;
    }
    else
    {
      std::string::operator=(&v53, (const std::string *)(v23 + 24 * v11));
      v26 = a1 + 72;
      v25 = *(__int128 **)(a1 + 72);
      v27 = **(_DWORD **)(a1 + 32);
      if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0)
      {
        std::string::__init_copy_ctor_external(&__x, v53.__r_.__value_.__l.__data_, v53.__r_.__value_.__l.__size_);
LABEL_21:
        v51 = *v25;
        v52 = v27;
        v28 = **(_QWORD **)(a1 + 80);
        v29 = *(_QWORD *)(v28 + 8);
        if (v29 >= *(_QWORD *)(v28 + 16))
        {
          v30 = std::vector<mlcore::Section>::__push_back_slow_path<mlcore::Section const&>(**(_QWORD **)(a1 + 80), (__int128 *)&__x);
        }
        else
        {
          std::vector<mlcore::Section>::__construct_one_at_end[abi:ne180100]<mlcore::Section const&>(**(_QWORD **)(a1 + 80), (__int128 *)&__x);
          v30 = v29 + 48;
        }
        *(_QWORD *)(v28 + 8) = v30;
        **(_DWORD **)(a1 + 32) = v9;
        v31 = *(_DWORD **)(a1 + 88);
        if (v9 > *v31)
          *v31 = v9;
        v32 = *(_QWORD **)v26;
        *v32 = *(_QWORD *)(*(_QWORD *)v26 + 8) + **(_QWORD **)v26;
        v32[1] = 0;
        if (SHIBYTE(__x.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__x.__r_.__value_.__l.__data_);
        if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v53.__r_.__value_.__l.__data_);
        v10 = *(int **)(a1 + 32);
        goto LABEL_31;
      }
    }
    __x = v53;
    goto LABEL_21;
  }
LABEL_32:
  v33 = **(uint64_t ***)(a1 + 96);
  v34 = v33[1];
  v35 = v33[2];
  if (v34 >= v35)
  {
    v38 = 0x84BDA12F684BDA13 * ((uint64_t)(v34 - *v33) >> 3);
    if (v38 + 1 > 0x12F684BDA12F684)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v39 = 0x84BDA12F684BDA13 * ((uint64_t)(v35 - *v33) >> 3);
    v40 = 2 * v39;
    if (2 * v39 <= v38 + 1)
      v40 = v38 + 1;
    if (v39 >= 0x97B425ED097B42)
      v41 = 0x12F684BDA12F684;
    else
      v41 = v40;
    *((_QWORD *)&v51 + 1) = v33 + 2;
    if (v41)
      v41 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<mlcore::PropertyCache>>(v41);
    else
      v42 = 0;
    v43 = (_QWORD *)(v41 + 216 * v38);
    __x.__r_.__value_.__r.__words[0] = v41;
    __x.__r_.__value_.__l.__size_ = (std::string::size_type)v43;
    __x.__r_.__value_.__r.__words[2] = (std::string::size_type)v43;
    *(_QWORD *)&v51 = v41 + 216 * v42;
    mlcore::PropertyCacheBase<long long,int,double,std::string,mediaplatform::Data>::PropertyCacheBase((uint64_t)v43, (uint64_t)v54);
    *v43 = &off_24C3371C0;
    v43[26] = &unk_24C3371E8;
    __x.__r_.__value_.__r.__words[2] += 216;
    std::vector<mlcore::PropertyCache>::__swap_out_circular_buffer(v33, &__x);
    v37 = (_QWORD *)v33[1];
    std::__split_buffer<mlcore::PropertyCache>::~__split_buffer((uint64_t)&__x);
  }
  else
  {
    v36 = (_QWORD *)mlcore::PropertyCacheBase<long long,int,double,std::string,mediaplatform::Data>::PropertyCacheBase(v34, (uint64_t)v54);
    *v36 = &off_24C3371C0;
    v36[26] = &unk_24C3371E8;
    v37 = v36 + 27;
    v33[1] = (uint64_t)(v36 + 27);
  }
  v33[1] = (uint64_t)v37;
  mlcore::PropertyCacheBase<long long,int,double,std::string,mediaplatform::Data>::~PropertyCacheBase(v54);
  v44 = v49;
  if (v49)
  {
    p_shared_owners = (unint64_t *)&v49->__shared_owners_;
    do
      v46 = __ldaxr(p_shared_owners);
    while (__stlxr(v46 - 1, p_shared_owners));
    if (!v46)
    {
      ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
      std::__shared_weak_count::__release_weak(v44);
    }
  }
}

void sub_20A64BC94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28)
{
  unint64_t *p_shared_owners;
  unint64_t v30;

  if (a18 < 0)
    operator delete(__p);
  mlcore::PropertyCacheBase<long long,int,double,std::string,mediaplatform::Data>::~PropertyCacheBase(&a28);
  if (a12)
  {
    p_shared_owners = (unint64_t *)&a12->__shared_owners_;
    do
      v30 = __ldaxr(p_shared_owners);
    while (__stlxr(v30 - 1, p_shared_owners));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))a12->__on_zero_shared)(a12);
      std::__shared_weak_count::__release_weak(a12);
    }
  }
  _Unwind_Resume(a1);
}

_QWORD *mlcore::ModelProperty<long long>::insertIntoCacheFromResultList(unint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  sqlite3_int64 v6;
  _QWORD *result;
  unint64_t v8;

  v6 = sqlite3_column_int64(*(sqlite3_stmt **)(*(_QWORD *)(a3 + 8) + 24), *(_DWORD *)a3 + a4);
  v8 = a1;
  result = std::__hash_table<std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>,std::__unordered_map_hasher<mlcore::ModelProperty<long long> *,std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>,std::hash<mlcore::ModelProperty<long long> *>,std::equal_to<mlcore::ModelProperty<long long> *>,true>,std::__unordered_map_equal<mlcore::ModelProperty<long long> *,std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>,std::equal_to<mlcore::ModelProperty<long long> *>,std::hash<mlcore::ModelProperty<long long> *>,true>,std::allocator<std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>>>::__emplace_unique_key_args<mlcore::ModelProperty<long long> *,std::piecewise_construct_t const&,std::tuple<mlcore::ModelProperty<long long> * const&>,std::tuple<>>(a2 + 168, a1, &v8);
  result[3] = v6;
  return result;
}

_QWORD *std::__hash_table<std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>,std::__unordered_map_hasher<mlcore::ModelProperty<long long> *,std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>,std::hash<mlcore::ModelProperty<long long> *>,std::equal_to<mlcore::ModelProperty<long long> *>,true>,std::__unordered_map_equal<mlcore::ModelProperty<long long> *,std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>,std::equal_to<mlcore::ModelProperty<long long> *>,std::hash<mlcore::ModelProperty<long long> *>,true>,std::allocator<std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>>>::__emplace_unique_key_args<mlcore::ModelProperty<long long> *,std::piecewise_construct_t const&,std::tuple<mlcore::ModelProperty<long long> * const&>,std::tuple<>>(uint64_t a1, unint64_t a2, _QWORD *a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  _QWORD **v11;
  _QWORD *i;
  unint64_t v13;
  float v14;
  float v15;
  _BOOL8 v16;
  unint64_t v17;
  unint64_t v18;
  size_t v19;
  uint64_t v20;
  _QWORD *v21;
  unint64_t v22;

  v6 = 0x9DDFEA08EB382D69 * (((8 * a2) + 8) ^ HIDWORD(a2));
  v7 = 0x9DDFEA08EB382D69 * (HIDWORD(a2) ^ (v6 >> 47) ^ v6);
  v8 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
  v9 = *(_QWORD *)(a1 + 8);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      v3 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
      if (v8 >= v9)
        v3 = v8 % v9;
    }
    else
    {
      v3 = v8 & (v9 - 1);
    }
    v11 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v3);
    if (v11)
    {
      for (i = *v11; i; i = (_QWORD *)*i)
      {
        v13 = i[1];
        if (v13 == v8)
        {
          if (i[2] == a2)
            return i;
        }
        else
        {
          if (v10.u32[0] > 1uLL)
          {
            if (v13 >= v9)
              v13 %= v9;
          }
          else
          {
            v13 &= v9 - 1;
          }
          if (v13 != v3)
            break;
        }
      }
    }
  }
  i = operator new(0x20uLL);
  *i = 0;
  i[1] = v8;
  i[2] = *a3;
  i[3] = 0;
  v14 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v15 = *(float *)(a1 + 32);
  if (!v9 || (float)(v15 * (float)v9) < v14)
  {
    v16 = 1;
    if (v9 >= 3)
      v16 = (v9 & (v9 - 1)) != 0;
    v17 = v16 | (2 * v9);
    v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18)
      v19 = v18;
    else
      v19 = v17;
    std::__hash_table<std::__hash_value_type<mlcore::ModelProperty<std::string> *,std::string>,std::__unordered_map_hasher<mlcore::ModelProperty<std::string> *,std::__hash_value_type<mlcore::ModelProperty<std::string> *,std::string>,std::hash<mlcore::ModelProperty<std::string> *>,std::equal_to<mlcore::ModelProperty<std::string> *>,true>,std::__unordered_map_equal<mlcore::ModelProperty<std::string> *,std::__hash_value_type<mlcore::ModelProperty<std::string> *,std::string>,std::equal_to<mlcore::ModelProperty<std::string> *>,std::hash<mlcore::ModelProperty<std::string> *>,true>,std::allocator<std::__hash_value_type<mlcore::ModelProperty<std::string> *,std::string>>>::__rehash<true>(a1, v19);
    v9 = *(_QWORD *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9)
        v3 = v8 % v9;
      else
        v3 = v8;
    }
    else
    {
      v3 = (v9 - 1) & v8;
    }
  }
  v20 = *(_QWORD *)a1;
  v21 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v21)
  {
    *i = *v21;
LABEL_38:
    *v21 = i;
    goto LABEL_39;
  }
  *i = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = i;
  *(_QWORD *)(v20 + 8 * v3) = a1 + 16;
  if (*i)
  {
    v22 = *(_QWORD *)(*i + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v22 >= v9)
        v22 %= v9;
    }
    else
    {
      v22 &= v9 - 1;
    }
    v21 = (_QWORD *)(*(_QWORD *)a1 + 8 * v22);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return i;
}

void sub_20A64BFE0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void mlcore::ModelProperty<std::string>::insertIntoCacheFromResultList(std::string::size_type a1, uint64_t a2, uint64_t a3, int a4)
{
  const unsigned __int8 *v6;
  char *v7;
  std::string __p;

  v6 = sqlite3_column_text(*(sqlite3_stmt **)(*(_QWORD *)(a3 + 8) + 24), *(_DWORD *)a3 + a4);
  if (v6)
    v7 = (char *)v6;
  else
    v7 = "";
  std::string::basic_string[abi:ne180100]<0>(&__p, v7);
  mlcore::PropertyCacheBase<std::string,mediaplatform::Data>::setValueForProperty(a2, &__p, a1);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_20A64C068(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

std::string *mlcore::PropertyCacheBase<std::string,mediaplatform::Data>::setValueForProperty(uint64_t a1, std::string *__str, std::string::size_type a3)
{
  unint64_t v3;
  uint64_t *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  std::string **v13;
  std::string *i;
  std::string::size_type size;
  float v16;
  float v17;
  _BOOL8 v18;
  unint64_t v19;
  unint64_t v20;
  size_t v21;
  uint64_t v22;
  std::string **v23;
  unint64_t v24;

  v7 = (uint64_t *)(a1 + 48);
  v8 = 0x9DDFEA08EB382D69 * (((8 * a3) + 8) ^ HIDWORD(a3));
  v9 = 0x9DDFEA08EB382D69 * (HIDWORD(a3) ^ (v8 >> 47) ^ v8);
  v10 = 0x9DDFEA08EB382D69 * (v9 ^ (v9 >> 47));
  v11 = *(_QWORD *)(a1 + 56);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      v3 = 0x9DDFEA08EB382D69 * (v9 ^ (v9 >> 47));
      if (v10 >= v11)
        v3 = v10 % v11;
    }
    else
    {
      v3 = v10 & (v11 - 1);
    }
    v13 = *(std::string ***)(*v7 + 8 * v3);
    if (v13)
    {
      for (i = *v13; i; i = (std::string *)i->__r_.__value_.__r.__words[0])
      {
        size = i->__r_.__value_.__l.__size_;
        if (size == v10)
        {
          if (i->__r_.__value_.__r.__words[2] == a3)
            return std::string::operator=(i + 1, __str);
        }
        else
        {
          if (v12.u32[0] > 1uLL)
          {
            if (size >= v11)
              size %= v11;
          }
          else
          {
            size &= v11 - 1;
          }
          if (size != v3)
            break;
        }
      }
    }
  }
  i = (std::string *)operator new(0x30uLL);
  i->__r_.__value_.__r.__words[0] = 0;
  i->__r_.__value_.__l.__size_ = v10;
  i->__r_.__value_.__r.__words[2] = a3;
  i[1].__r_.__value_.__r.__words[0] = 0;
  i[1].__r_.__value_.__l.__size_ = 0;
  i[1].__r_.__value_.__r.__words[2] = 0;
  v16 = (float)(unint64_t)(*(_QWORD *)(a1 + 72) + 1);
  v17 = *(float *)(a1 + 80);
  if (!v11 || (float)(v17 * (float)v11) < v16)
  {
    v18 = 1;
    if (v11 >= 3)
      v18 = (v11 & (v11 - 1)) != 0;
    v19 = v18 | (2 * v11);
    v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20)
      v21 = v20;
    else
      v21 = v19;
    std::__hash_table<std::__hash_value_type<mlcore::ModelProperty<std::string> *,std::string>,std::__unordered_map_hasher<mlcore::ModelProperty<std::string> *,std::__hash_value_type<mlcore::ModelProperty<std::string> *,std::string>,std::hash<mlcore::ModelProperty<std::string> *>,std::equal_to<mlcore::ModelProperty<std::string> *>,true>,std::__unordered_map_equal<mlcore::ModelProperty<std::string> *,std::__hash_value_type<mlcore::ModelProperty<std::string> *,std::string>,std::equal_to<mlcore::ModelProperty<std::string> *>,std::hash<mlcore::ModelProperty<std::string> *>,true>,std::allocator<std::__hash_value_type<mlcore::ModelProperty<std::string> *,std::string>>>::__rehash<true>((uint64_t)v7, v21);
    v11 = *(_QWORD *)(a1 + 56);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
        v3 = v10 % v11;
      else
        v3 = v10;
    }
    else
    {
      v3 = (v11 - 1) & v10;
    }
  }
  v22 = *v7;
  v23 = *(std::string ***)(*v7 + 8 * v3);
  if (v23)
  {
    i->__r_.__value_.__r.__words[0] = (std::string::size_type)*v23;
LABEL_38:
    *v23 = i;
    goto LABEL_39;
  }
  i->__r_.__value_.__r.__words[0] = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 64) = i;
  *(_QWORD *)(v22 + 8 * v3) = a1 + 64;
  if (i->__r_.__value_.__r.__words[0])
  {
    v24 = *(_QWORD *)(i->__r_.__value_.__r.__words[0] + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v24 >= v11)
        v24 %= v11;
    }
    else
    {
      v24 &= v11 - 1;
    }
    v23 = (std::string **)(*v7 + 8 * v24);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 72);
  return std::string::operator=(i + 1, __str);
}

void sub_20A64C2C4(_Unwind_Exception *a1)
{
  void **v1;

  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<mlcore::ModelProperty<std::string> *,std::string>,void *>>>::operator()[abi:ne180100](1, v1);
  _Unwind_Resume(a1);
}

_QWORD *mlcore::ModelProperty<int>::insertIntoCacheFromResultList(unint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  int v6;
  _QWORD *result;
  unint64_t v8;

  v6 = sqlite3_column_int(*(sqlite3_stmt **)(*(_QWORD *)(a3 + 8) + 24), *(_DWORD *)a3 + a4);
  v8 = a1;
  result = std::__hash_table<std::__hash_value_type<mlcore::ModelProperty<int> *,int>,std::__unordered_map_hasher<mlcore::ModelProperty<int> *,std::__hash_value_type<mlcore::ModelProperty<int> *,int>,std::hash<mlcore::ModelProperty<int> *>,std::equal_to<mlcore::ModelProperty<int> *>,true>,std::__unordered_map_equal<mlcore::ModelProperty<int> *,std::__hash_value_type<mlcore::ModelProperty<int> *,int>,std::equal_to<mlcore::ModelProperty<int> *>,std::hash<mlcore::ModelProperty<int> *>,true>,std::allocator<std::__hash_value_type<mlcore::ModelProperty<int> *,int>>>::__emplace_unique_key_args<mlcore::ModelProperty<int> *,std::piecewise_construct_t const&,std::tuple<mlcore::ModelProperty<int> * const&>,std::tuple<>>(a2 + 128, a1, &v8);
  *((_DWORD *)result + 6) = v6;
  return result;
}

_QWORD *std::__hash_table<std::__hash_value_type<mlcore::ModelProperty<int> *,int>,std::__unordered_map_hasher<mlcore::ModelProperty<int> *,std::__hash_value_type<mlcore::ModelProperty<int> *,int>,std::hash<mlcore::ModelProperty<int> *>,std::equal_to<mlcore::ModelProperty<int> *>,true>,std::__unordered_map_equal<mlcore::ModelProperty<int> *,std::__hash_value_type<mlcore::ModelProperty<int> *,int>,std::equal_to<mlcore::ModelProperty<int> *>,std::hash<mlcore::ModelProperty<int> *>,true>,std::allocator<std::__hash_value_type<mlcore::ModelProperty<int> *,int>>>::__emplace_unique_key_args<mlcore::ModelProperty<int> *,std::piecewise_construct_t const&,std::tuple<mlcore::ModelProperty<int> * const&>,std::tuple<>>(uint64_t a1, unint64_t a2, _QWORD *a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  void **v11;
  _QWORD *v12;
  unint64_t v13;
  float v14;
  float v15;
  _BOOL8 v16;
  unint64_t v17;
  unint64_t v18;
  size_t v19;
  uint64_t v20;
  _QWORD *v21;
  unint64_t v22;

  v6 = 0x9DDFEA08EB382D69 * (((8 * a2) + 8) ^ HIDWORD(a2));
  v7 = 0x9DDFEA08EB382D69 * (HIDWORD(a2) ^ (v6 >> 47) ^ v6);
  v8 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
  v9 = *(_QWORD *)(a1 + 8);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      v3 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
      if (v8 >= v9)
        v3 = v8 % v9;
    }
    else
    {
      v3 = v8 & (v9 - 1);
    }
    v11 = *(void ***)(*(_QWORD *)a1 + 8 * v3);
    if (v11)
    {
      v12 = *v11;
      if (*v11)
      {
        do
        {
          v13 = v12[1];
          if (v13 == v8)
          {
            if (v12[2] == a2)
              return v12;
          }
          else
          {
            if (v10.u32[0] > 1uLL)
            {
              if (v13 >= v9)
                v13 %= v9;
            }
            else
            {
              v13 &= v9 - 1;
            }
            if (v13 != v3)
              break;
          }
          v12 = (_QWORD *)*v12;
        }
        while (v12);
      }
    }
  }
  v12 = operator new(0x20uLL);
  *v12 = 0;
  v12[1] = v8;
  v12[2] = *a3;
  *((_DWORD *)v12 + 6) = 0;
  v14 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v15 = *(float *)(a1 + 32);
  if (!v9 || (float)(v15 * (float)v9) < v14)
  {
    v16 = 1;
    if (v9 >= 3)
      v16 = (v9 & (v9 - 1)) != 0;
    v17 = v16 | (2 * v9);
    v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18)
      v19 = v18;
    else
      v19 = v17;
    std::__hash_table<std::__hash_value_type<mlcore::ModelProperty<std::string> *,std::string>,std::__unordered_map_hasher<mlcore::ModelProperty<std::string> *,std::__hash_value_type<mlcore::ModelProperty<std::string> *,std::string>,std::hash<mlcore::ModelProperty<std::string> *>,std::equal_to<mlcore::ModelProperty<std::string> *>,true>,std::__unordered_map_equal<mlcore::ModelProperty<std::string> *,std::__hash_value_type<mlcore::ModelProperty<std::string> *,std::string>,std::equal_to<mlcore::ModelProperty<std::string> *>,std::hash<mlcore::ModelProperty<std::string> *>,true>,std::allocator<std::__hash_value_type<mlcore::ModelProperty<std::string> *,std::string>>>::__rehash<true>(a1, v19);
    v9 = *(_QWORD *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9)
        v3 = v8 % v9;
      else
        v3 = v8;
    }
    else
    {
      v3 = (v9 - 1) & v8;
    }
  }
  v20 = *(_QWORD *)a1;
  v21 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v21)
  {
    *v12 = *v21;
LABEL_38:
    *v21 = v12;
    goto LABEL_39;
  }
  *v12 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v12;
  *(_QWORD *)(v20 + 8 * v3) = a1 + 16;
  if (*v12)
  {
    v22 = *(_QWORD *)(*v12 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v22 >= v9)
        v22 %= v9;
    }
    else
    {
      v22 &= v9 - 1;
    }
    v21 = (_QWORD *)(*(_QWORD *)a1 + 8 * v22);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return v12;
}

void sub_20A64C56C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *mlcore::PropertyCacheBase<double,std::string,mediaplatform::Data>::~PropertyCacheBase(_QWORD *a1)
{
  *a1 = &off_24C339980;
  std::__hash_table<mlcore::ModelPropertyBase *,std::hash<mlcore::ModelPropertyBase *>,std::equal_to<mlcore::ModelPropertyBase *>,std::allocator<mlcore::ModelPropertyBase *>>::~__hash_table((uint64_t)(a1 + 11));
  *a1 = &off_24C339960;
  std::__hash_table<std::__hash_value_type<mlcore::ModelProperty<std::string> *,std::string>,std::__unordered_map_hasher<mlcore::ModelProperty<std::string> *,std::__hash_value_type<mlcore::ModelProperty<std::string> *,std::string>,std::hash<mlcore::ModelProperty<std::string> *>,std::equal_to<mlcore::ModelProperty<std::string> *>,true>,std::__unordered_map_equal<mlcore::ModelProperty<std::string> *,std::__hash_value_type<mlcore::ModelProperty<std::string> *,std::string>,std::equal_to<mlcore::ModelProperty<std::string> *>,std::hash<mlcore::ModelProperty<std::string> *>,true>,std::allocator<std::__hash_value_type<mlcore::ModelProperty<std::string> *,std::string>>>::~__hash_table((uint64_t)(a1 + 6));
  *a1 = &off_24C339940;
  std::__hash_table<std::__hash_value_type<mlcore::ModelProperty<mediaplatform::Data> *,mediaplatform::Data>,std::__unordered_map_hasher<mlcore::ModelProperty<mediaplatform::Data> *,std::__hash_value_type<mlcore::ModelProperty<mediaplatform::Data> *,mediaplatform::Data>,std::hash<mlcore::ModelProperty<mediaplatform::Data> *>,std::equal_to<mlcore::ModelProperty<mediaplatform::Data> *>,true>,std::__unordered_map_equal<mlcore::ModelProperty<mediaplatform::Data> *,std::__hash_value_type<mlcore::ModelProperty<mediaplatform::Data> *,mediaplatform::Data>,std::equal_to<mlcore::ModelProperty<mediaplatform::Data> *>,std::hash<mlcore::ModelProperty<mediaplatform::Data> *>,true>,std::allocator<std::__hash_value_type<mlcore::ModelProperty<mediaplatform::Data> *,mediaplatform::Data>>>::~__hash_table((uint64_t)(a1 + 1));
  return a1;
}

uint64_t std::__hash_table<std::__hash_value_type<mlcore::ModelProperty<std::string> *,std::string>,std::__unordered_map_hasher<mlcore::ModelProperty<std::string> *,std::__hash_value_type<mlcore::ModelProperty<std::string> *,std::string>,std::hash<mlcore::ModelProperty<std::string> *>,std::equal_to<mlcore::ModelProperty<std::string> *>,true>,std::__unordered_map_equal<mlcore::ModelProperty<std::string> *,std::__hash_value_type<mlcore::ModelProperty<std::string> *,std::string>,std::equal_to<mlcore::ModelProperty<std::string> *>,std::hash<mlcore::ModelProperty<std::string> *>,true>,std::allocator<std::__hash_value_type<mlcore::ModelProperty<std::string> *,std::string>>>::~__hash_table(uint64_t a1)
{
  void *v2;

  std::__hash_table<std::__hash_value_type<mlcore::ModelProperty<std::string> *,std::string>,std::__unordered_map_hasher<mlcore::ModelProperty<std::string> *,std::__hash_value_type<mlcore::ModelProperty<std::string> *,std::string>,std::hash<mlcore::ModelProperty<std::string> *>,std::equal_to<mlcore::ModelProperty<std::string> *>,true>,std::__unordered_map_equal<mlcore::ModelProperty<std::string> *,std::__hash_value_type<mlcore::ModelProperty<std::string> *,std::string>,std::equal_to<mlcore::ModelProperty<std::string> *>,std::hash<mlcore::ModelProperty<std::string> *>,true>,std::allocator<std::__hash_value_type<mlcore::ModelProperty<std::string> *,std::string>>>::__deallocate_node(*(void ***)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void std::__hash_table<std::__hash_value_type<mlcore::ModelProperty<std::string> *,std::string>,std::__unordered_map_hasher<mlcore::ModelProperty<std::string> *,std::__hash_value_type<mlcore::ModelProperty<std::string> *,std::string>,std::hash<mlcore::ModelProperty<std::string> *>,std::equal_to<mlcore::ModelProperty<std::string> *>,true>,std::__unordered_map_equal<mlcore::ModelProperty<std::string> *,std::__hash_value_type<mlcore::ModelProperty<std::string> *,std::string>,std::equal_to<mlcore::ModelProperty<std::string> *>,std::hash<mlcore::ModelProperty<std::string> *>,true>,std::allocator<std::__hash_value_type<mlcore::ModelProperty<std::string> *,std::string>>>::__deallocate_node(void **__p)
{
  void **v1;
  void **v2;

  if (__p)
  {
    v1 = __p;
    do
    {
      v2 = (void **)*v1;
      if (*((char *)v1 + 47) < 0)
        operator delete(v1[3]);
      operator delete(v1);
      v1 = v2;
    }
    while (v2);
  }
}

uint64_t std::__hash_table<std::__hash_value_type<mlcore::ModelProperty<mediaplatform::Data> *,mediaplatform::Data>,std::__unordered_map_hasher<mlcore::ModelProperty<mediaplatform::Data> *,std::__hash_value_type<mlcore::ModelProperty<mediaplatform::Data> *,mediaplatform::Data>,std::hash<mlcore::ModelProperty<mediaplatform::Data> *>,std::equal_to<mlcore::ModelProperty<mediaplatform::Data> *>,true>,std::__unordered_map_equal<mlcore::ModelProperty<mediaplatform::Data> *,std::__hash_value_type<mlcore::ModelProperty<mediaplatform::Data> *,mediaplatform::Data>,std::equal_to<mlcore::ModelProperty<mediaplatform::Data> *>,std::hash<mlcore::ModelProperty<mediaplatform::Data> *>,true>,std::allocator<std::__hash_value_type<mlcore::ModelProperty<mediaplatform::Data> *,mediaplatform::Data>>>::~__hash_table(uint64_t a1)
{
  void *v2;

  std::__hash_table<std::__hash_value_type<mlcore::ModelProperty<mediaplatform::Data> *,mediaplatform::Data>,std::__unordered_map_hasher<mlcore::ModelProperty<mediaplatform::Data> *,std::__hash_value_type<mlcore::ModelProperty<mediaplatform::Data> *,mediaplatform::Data>,std::hash<mlcore::ModelProperty<mediaplatform::Data> *>,std::equal_to<mlcore::ModelProperty<mediaplatform::Data> *>,true>,std::__unordered_map_equal<mlcore::ModelProperty<mediaplatform::Data> *,std::__hash_value_type<mlcore::ModelProperty<mediaplatform::Data> *,mediaplatform::Data>,std::equal_to<mlcore::ModelProperty<mediaplatform::Data> *>,std::hash<mlcore::ModelProperty<mediaplatform::Data> *>,true>,std::allocator<std::__hash_value_type<mlcore::ModelProperty<mediaplatform::Data> *,mediaplatform::Data>>>::__deallocate_node(*(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void std::__hash_table<std::__hash_value_type<mlcore::ModelProperty<mediaplatform::Data> *,mediaplatform::Data>,std::__unordered_map_hasher<mlcore::ModelProperty<mediaplatform::Data> *,std::__hash_value_type<mlcore::ModelProperty<mediaplatform::Data> *,mediaplatform::Data>,std::hash<mlcore::ModelProperty<mediaplatform::Data> *>,std::equal_to<mlcore::ModelProperty<mediaplatform::Data> *>,true>,std::__unordered_map_equal<mlcore::ModelProperty<mediaplatform::Data> *,std::__hash_value_type<mlcore::ModelProperty<mediaplatform::Data> *,mediaplatform::Data>,std::equal_to<mlcore::ModelProperty<mediaplatform::Data> *>,std::hash<mlcore::ModelProperty<mediaplatform::Data> *>,true>,std::allocator<std::__hash_value_type<mlcore::ModelProperty<mediaplatform::Data> *,mediaplatform::Data>>>::__deallocate_node(_QWORD *__p)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  if (__p)
  {
    v1 = __p;
    do
    {
      v2 = v1;
      v1 = (_QWORD *)*v1;
      v2[3] = &off_24C331510;
      if (*((_BYTE *)v2 + 56))
      {
        v3 = v2[6];
        if (v3)
          MEMORY[0x20BD27AE4](v3, 0x1000C8077774924);
      }
      operator delete(v2);
    }
    while (v1);
  }
}

uint64_t mlcore::PropertyCacheBase<long long,int,double,std::string,mediaplatform::Data>::PropertyCacheBase(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t *v7;
  _QWORD *v8;
  _QWORD *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint8x8_t v14;
  _QWORD *v15;
  _QWORD *i;
  unint64_t v17;
  _QWORD *v18;
  float v19;
  float v20;
  _BOOL8 v21;
  unint64_t v22;
  unint64_t v23;
  size_t v24;
  uint64_t v25;
  _QWORD *v26;
  unint64_t v27;
  uint64_t *v28;
  uint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint8x8_t v34;
  _QWORD *v35;
  _QWORD *j;
  unint64_t v37;
  std::string *v38;
  std::string *v39;
  __int128 v40;
  float v41;
  float v42;
  _BOOL8 v43;
  unint64_t v44;
  unint64_t v45;
  size_t v46;
  uint64_t v47;
  std::string **v48;
  unint64_t v49;
  uint64_t *v50;
  _QWORD *v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  uint8x8_t v56;
  _QWORD *v57;
  _QWORD *k;
  unint64_t v59;
  _QWORD *v60;
  float v61;
  float v62;
  _BOOL8 v63;
  unint64_t v64;
  unint64_t v65;
  size_t v66;
  uint64_t v67;
  _QWORD *v68;
  unint64_t v69;
  uint64_t *v70;
  uint64_t v71;
  _QWORD *v72;
  _QWORD *v73;
  unint64_t v74;
  unint64_t v75;
  unint64_t v76;
  unint64_t v77;
  unint64_t v78;
  uint8x8_t v79;
  _QWORD *v80;
  _QWORD *m;
  unint64_t v82;
  _QWORD *v83;
  float v84;
  float v85;
  _BOOL8 v86;
  unint64_t v87;
  unint64_t v88;
  size_t v89;
  uint64_t v90;
  _QWORD *v91;
  unint64_t v92;
  uint64_t *v93;
  _QWORD *v94;
  unint64_t v95;
  unint64_t v96;
  unint64_t v97;
  unint64_t v98;
  unint64_t v99;
  uint8x8_t v100;
  _QWORD *v101;
  _QWORD *n;
  unint64_t v103;
  _QWORD *v104;
  float v105;
  float v106;
  _BOOL8 v107;
  unint64_t v108;
  unint64_t v109;
  size_t v110;
  uint64_t v111;
  _QWORD *v112;
  unint64_t v113;
  uint64_t v115;
  _QWORD *v116;
  uint64_t v117[2];
  char v118;

  *(_QWORD *)a1 = &off_24C339940;
  *(_OWORD *)(a1 + 8) = 0u;
  v7 = (uint64_t *)(a1 + 8);
  *(_OWORD *)(a1 + 24) = 0u;
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  std::__hash_table<std::__hash_value_type<mlcore::ModelProperty<std::string> *,std::string>,std::__unordered_map_hasher<mlcore::ModelProperty<std::string> *,std::__hash_value_type<mlcore::ModelProperty<std::string> *,std::string>,std::hash<mlcore::ModelProperty<std::string> *>,std::equal_to<mlcore::ModelProperty<std::string> *>,true>,std::__unordered_map_equal<mlcore::ModelProperty<std::string> *,std::__hash_value_type<mlcore::ModelProperty<std::string> *,std::string>,std::equal_to<mlcore::ModelProperty<std::string> *>,std::hash<mlcore::ModelProperty<std::string> *>,true>,std::allocator<std::__hash_value_type<mlcore::ModelProperty<std::string> *,std::string>>>::__rehash<true>(a1 + 8, *(_QWORD *)(a2 + 16));
  v115 = a2;
  v8 = *(_QWORD **)(a2 + 24);
  if (v8)
  {
    v9 = (_QWORD *)(a1 + 24);
    v3 = 1;
    do
    {
      v10 = v8[2];
      v11 = 0x9DDFEA08EB382D69 * (((8 * v10) + 8) ^ HIDWORD(v10));
      v12 = 0x9DDFEA08EB382D69 * (HIDWORD(v10) ^ (v11 >> 47) ^ v11);
      v13 = 0x9DDFEA08EB382D69 * (v12 ^ (v12 >> 47));
      v2 = *(_QWORD *)(a1 + 16);
      if (v2)
      {
        v14 = (uint8x8_t)vcnt_s8((int8x8_t)v2);
        v14.i16[0] = vaddlv_u8(v14);
        if (v14.u32[0] > 1uLL)
        {
          v4 = 0x9DDFEA08EB382D69 * (v12 ^ (v12 >> 47));
          if (v13 >= v2)
            v4 = v13 % v2;
        }
        else
        {
          v4 = v13 & (v2 - 1);
        }
        v15 = *(_QWORD **)(*v7 + 8 * v4);
        if (v15)
        {
          for (i = (_QWORD *)*v15; i; i = (_QWORD *)*i)
          {
            v17 = i[1];
            if (v17 == v13)
            {
              if (i[2] == v10)
                goto LABEL_41;
            }
            else
            {
              if (v14.u32[0] > 1uLL)
              {
                if (v17 >= v2)
                  v17 %= v2;
              }
              else
              {
                v17 &= v2 - 1;
              }
              if (v17 != v4)
                break;
            }
          }
        }
      }
      v18 = operator new(0x40uLL);
      v117[0] = (uint64_t)v18;
      v117[1] = a1 + 24;
      v118 = 0;
      *v18 = 0;
      v18[1] = v13;
      v18[2] = v8[2];
      mediaplatform::Data::Data((mediaplatform::Data *)(v18 + 3), (const mediaplatform::Data *)(v8 + 3));
      v118 = 1;
      v19 = (float)(unint64_t)(*(_QWORD *)(a1 + 32) + 1);
      v20 = *(float *)(a1 + 40);
      if (!v2 || (float)(v20 * (float)v2) < v19)
      {
        v21 = (v2 & (v2 - 1)) != 0;
        if (v2 < 3)
          v21 = 1;
        v22 = v21 | (2 * v2);
        v23 = vcvtps_u32_f32(v19 / v20);
        if (v22 <= v23)
          v24 = v23;
        else
          v24 = v22;
        std::__hash_table<std::__hash_value_type<mlcore::ModelProperty<std::string> *,std::string>,std::__unordered_map_hasher<mlcore::ModelProperty<std::string> *,std::__hash_value_type<mlcore::ModelProperty<std::string> *,std::string>,std::hash<mlcore::ModelProperty<std::string> *>,std::equal_to<mlcore::ModelProperty<std::string> *>,true>,std::__unordered_map_equal<mlcore::ModelProperty<std::string> *,std::__hash_value_type<mlcore::ModelProperty<std::string> *,std::string>,std::equal_to<mlcore::ModelProperty<std::string> *>,std::hash<mlcore::ModelProperty<std::string> *>,true>,std::allocator<std::__hash_value_type<mlcore::ModelProperty<std::string> *,std::string>>>::__rehash<true>((uint64_t)v7, v24);
        v2 = *(_QWORD *)(a1 + 16);
        if ((v2 & (v2 - 1)) != 0)
        {
          if (v13 >= v2)
            v4 = v13 % v2;
          else
            v4 = v13;
        }
        else
        {
          v4 = (v2 - 1) & v13;
        }
      }
      v25 = *v7;
      v26 = *(_QWORD **)(*v7 + 8 * v4);
      if (v26)
      {
        *v18 = *v26;
      }
      else
      {
        *v18 = *v9;
        *v9 = v18;
        *(_QWORD *)(v25 + 8 * v4) = v9;
        if (!*v18)
          goto LABEL_40;
        v27 = *(_QWORD *)(*v18 + 8);
        if ((v2 & (v2 - 1)) != 0)
        {
          if (v27 >= v2)
            v27 %= v2;
        }
        else
        {
          v27 &= v2 - 1;
        }
        v26 = (_QWORD *)(*v7 + 8 * v27);
      }
      *v26 = v18;
LABEL_40:
      v117[0] = 0;
      ++*(_QWORD *)(a1 + 32);
      std::unique_ptr<std::__hash_node<std::__hash_value_type<mlcore::ModelProperty<mediaplatform::Data> *,mediaplatform::Data>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<mlcore::ModelProperty<mediaplatform::Data> *,mediaplatform::Data>,void *>>>>::reset[abi:ne180100](v117);
LABEL_41:
      v8 = (_QWORD *)*v8;
    }
    while (v8);
  }
  *(_QWORD *)a1 = &off_24C339960;
  *(_OWORD *)(a1 + 48) = 0u;
  v28 = (uint64_t *)(a1 + 48);
  *(_OWORD *)(a1 + 64) = 0u;
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(v115 + 80);
  std::__hash_table<std::__hash_value_type<mlcore::ModelProperty<std::string> *,std::string>,std::__unordered_map_hasher<mlcore::ModelProperty<std::string> *,std::__hash_value_type<mlcore::ModelProperty<std::string> *,std::string>,std::hash<mlcore::ModelProperty<std::string> *>,std::equal_to<mlcore::ModelProperty<std::string> *>,true>,std::__unordered_map_equal<mlcore::ModelProperty<std::string> *,std::__hash_value_type<mlcore::ModelProperty<std::string> *,std::string>,std::equal_to<mlcore::ModelProperty<std::string> *>,std::hash<mlcore::ModelProperty<std::string> *>,true>,std::allocator<std::__hash_value_type<mlcore::ModelProperty<std::string> *,std::string>>>::__rehash<true>(a1 + 48, *(_QWORD *)(v115 + 56));
  v29 = *(uint64_t **)(v115 + 64);
  if (v29)
  {
    v3 = a1 + 64;
    do
    {
      v30 = v29[2];
      v31 = 0x9DDFEA08EB382D69 * (((8 * v30) + 8) ^ HIDWORD(v30));
      v32 = 0x9DDFEA08EB382D69 * (HIDWORD(v30) ^ (v31 >> 47) ^ v31);
      v33 = 0x9DDFEA08EB382D69 * (v32 ^ (v32 >> 47));
      v2 = *(_QWORD *)(a1 + 56);
      if (v2)
      {
        v34 = (uint8x8_t)vcnt_s8((int8x8_t)v2);
        v34.i16[0] = vaddlv_u8(v34);
        if (v34.u32[0] > 1uLL)
        {
          v4 = 0x9DDFEA08EB382D69 * (v32 ^ (v32 >> 47));
          if (v33 >= v2)
            v4 = v33 % v2;
        }
        else
        {
          v4 = v33 & (v2 - 1);
        }
        v35 = *(_QWORD **)(*v28 + 8 * v4);
        if (v35)
        {
          for (j = (_QWORD *)*v35; j; j = (_QWORD *)*j)
          {
            v37 = j[1];
            if (v37 == v33)
            {
              if (j[2] == v30)
                goto LABEL_85;
            }
            else
            {
              if (v34.u32[0] > 1uLL)
              {
                if (v37 >= v2)
                  v37 %= v2;
              }
              else
              {
                v37 &= v2 - 1;
              }
              if (v37 != v4)
                break;
            }
          }
        }
      }
      v38 = (std::string *)operator new(0x30uLL);
      v38->__r_.__value_.__r.__words[0] = 0;
      v38->__r_.__value_.__l.__size_ = v33;
      v38->__r_.__value_.__r.__words[2] = v29[2];
      v39 = v38 + 1;
      if (*((char *)v29 + 47) < 0)
      {
        std::string::__init_copy_ctor_external(v39, (const std::string::value_type *)v29[3], v29[4]);
      }
      else
      {
        v40 = *(_OWORD *)(v29 + 3);
        v38[1].__r_.__value_.__r.__words[2] = v29[5];
        *(_OWORD *)&v39->__r_.__value_.__l.__data_ = v40;
      }
      v41 = (float)(unint64_t)(*(_QWORD *)(a1 + 72) + 1);
      v42 = *(float *)(a1 + 80);
      if (!v2 || (float)(v42 * (float)v2) < v41)
      {
        v43 = (v2 & (v2 - 1)) != 0;
        if (v2 < 3)
          v43 = 1;
        v44 = v43 | (2 * v2);
        v45 = vcvtps_u32_f32(v41 / v42);
        if (v44 <= v45)
          v46 = v45;
        else
          v46 = v44;
        std::__hash_table<std::__hash_value_type<mlcore::ModelProperty<std::string> *,std::string>,std::__unordered_map_hasher<mlcore::ModelProperty<std::string> *,std::__hash_value_type<mlcore::ModelProperty<std::string> *,std::string>,std::hash<mlcore::ModelProperty<std::string> *>,std::equal_to<mlcore::ModelProperty<std::string> *>,true>,std::__unordered_map_equal<mlcore::ModelProperty<std::string> *,std::__hash_value_type<mlcore::ModelProperty<std::string> *,std::string>,std::equal_to<mlcore::ModelProperty<std::string> *>,std::hash<mlcore::ModelProperty<std::string> *>,true>,std::allocator<std::__hash_value_type<mlcore::ModelProperty<std::string> *,std::string>>>::__rehash<true>(a1 + 48, v46);
        v2 = *(_QWORD *)(a1 + 56);
        if ((v2 & (v2 - 1)) != 0)
        {
          if (v33 >= v2)
            v4 = v33 % v2;
          else
            v4 = v33;
        }
        else
        {
          v4 = (v2 - 1) & v33;
        }
      }
      v47 = *v28;
      v48 = *(std::string ***)(*v28 + 8 * v4);
      if (v48)
      {
        v38->__r_.__value_.__r.__words[0] = (std::string::size_type)*v48;
      }
      else
      {
        v38->__r_.__value_.__r.__words[0] = *(_QWORD *)v3;
        *(_QWORD *)v3 = v38;
        *(_QWORD *)(v47 + 8 * v4) = v3;
        if (!v38->__r_.__value_.__r.__words[0])
          goto LABEL_84;
        v49 = *(_QWORD *)(v38->__r_.__value_.__r.__words[0] + 8);
        if ((v2 & (v2 - 1)) != 0)
        {
          if (v49 >= v2)
            v49 %= v2;
        }
        else
        {
          v49 &= v2 - 1;
        }
        v48 = (std::string **)(*v28 + 8 * v49);
      }
      *v48 = v38;
LABEL_84:
      ++*(_QWORD *)(a1 + 72);
LABEL_85:
      v29 = (uint64_t *)*v29;
    }
    while (v29);
  }
  *(_QWORD *)a1 = &off_24C339980;
  *(_OWORD *)(a1 + 88) = 0u;
  v50 = (uint64_t *)(a1 + 88);
  *(_OWORD *)(a1 + 104) = 0u;
  *(_DWORD *)(a1 + 120) = *(_DWORD *)(v115 + 120);
  std::__hash_table<std::__hash_value_type<mlcore::ModelProperty<std::string> *,std::string>,std::__unordered_map_hasher<mlcore::ModelProperty<std::string> *,std::__hash_value_type<mlcore::ModelProperty<std::string> *,std::string>,std::hash<mlcore::ModelProperty<std::string> *>,std::equal_to<mlcore::ModelProperty<std::string> *>,true>,std::__unordered_map_equal<mlcore::ModelProperty<std::string> *,std::__hash_value_type<mlcore::ModelProperty<std::string> *,std::string>,std::equal_to<mlcore::ModelProperty<std::string> *>,std::hash<mlcore::ModelProperty<std::string> *>,true>,std::allocator<std::__hash_value_type<mlcore::ModelProperty<std::string> *,std::string>>>::__rehash<true>(a1 + 88, *(_QWORD *)(v115 + 96));
  v51 = *(_QWORD **)(v115 + 104);
  if (v51)
  {
    v2 = a1 + 104;
    v3 = *(_QWORD *)(a1 + 96);
    do
    {
      v52 = v51[2];
      v53 = 0x9DDFEA08EB382D69 * (((8 * v52) + 8) ^ HIDWORD(v52));
      v54 = 0x9DDFEA08EB382D69 * (HIDWORD(v52) ^ (v53 >> 47) ^ v53);
      v55 = 0x9DDFEA08EB382D69 * (v54 ^ (v54 >> 47));
      if (v3)
      {
        v56 = (uint8x8_t)vcnt_s8((int8x8_t)v3);
        v56.i16[0] = vaddlv_u8(v56);
        if (v56.u32[0] > 1uLL)
        {
          v4 = 0x9DDFEA08EB382D69 * (v54 ^ (v54 >> 47));
          if (v55 >= v3)
            v4 = v55 % v3;
        }
        else
        {
          v4 = v55 & (v3 - 1);
        }
        v57 = *(_QWORD **)(*v50 + 8 * v4);
        if (v57)
        {
          for (k = (_QWORD *)*v57; k; k = (_QWORD *)*k)
          {
            v59 = k[1];
            if (v59 == v55)
            {
              if (k[2] == v52)
                goto LABEL_126;
            }
            else
            {
              if (v56.u32[0] > 1uLL)
              {
                if (v59 >= v3)
                  v59 %= v3;
              }
              else
              {
                v59 &= v3 - 1;
              }
              if (v59 != v4)
                break;
            }
          }
        }
      }
      v60 = operator new(0x20uLL);
      *v60 = 0;
      v60[1] = v55;
      *((_OWORD *)v60 + 1) = *((_OWORD *)v51 + 1);
      v61 = (float)(unint64_t)(*(_QWORD *)(a1 + 112) + 1);
      v62 = *(float *)(a1 + 120);
      if (!v3 || (float)(v62 * (float)v3) < v61)
      {
        v63 = (v3 & (v3 - 1)) != 0;
        if (v3 < 3)
          v63 = 1;
        v64 = v63 | (2 * v3);
        v65 = vcvtps_u32_f32(v61 / v62);
        if (v64 <= v65)
          v66 = v65;
        else
          v66 = v64;
        std::__hash_table<std::__hash_value_type<mlcore::ModelProperty<std::string> *,std::string>,std::__unordered_map_hasher<mlcore::ModelProperty<std::string> *,std::__hash_value_type<mlcore::ModelProperty<std::string> *,std::string>,std::hash<mlcore::ModelProperty<std::string> *>,std::equal_to<mlcore::ModelProperty<std::string> *>,true>,std::__unordered_map_equal<mlcore::ModelProperty<std::string> *,std::__hash_value_type<mlcore::ModelProperty<std::string> *,std::string>,std::equal_to<mlcore::ModelProperty<std::string> *>,std::hash<mlcore::ModelProperty<std::string> *>,true>,std::allocator<std::__hash_value_type<mlcore::ModelProperty<std::string> *,std::string>>>::__rehash<true>(a1 + 88, v66);
        v3 = *(_QWORD *)(a1 + 96);
        if ((v3 & (v3 - 1)) != 0)
        {
          if (v55 >= v3)
            v4 = v55 % v3;
          else
            v4 = v55;
        }
        else
        {
          v4 = (v3 - 1) & v55;
        }
      }
      v67 = *v50;
      v68 = *(_QWORD **)(*v50 + 8 * v4);
      if (v68)
      {
        *v60 = *v68;
      }
      else
      {
        *v60 = *(_QWORD *)v2;
        *(_QWORD *)v2 = v60;
        *(_QWORD *)(v67 + 8 * v4) = v2;
        if (!*v60)
          goto LABEL_125;
        v69 = *(_QWORD *)(*v60 + 8);
        if ((v3 & (v3 - 1)) != 0)
        {
          if (v69 >= v3)
            v69 %= v3;
        }
        else
        {
          v69 &= v3 - 1;
        }
        v68 = (_QWORD *)(*v50 + 8 * v69);
      }
      *v68 = v60;
LABEL_125:
      ++*(_QWORD *)(a1 + 112);
LABEL_126:
      v51 = (_QWORD *)*v51;
    }
    while (v51);
  }
  *(_QWORD *)a1 = &off_24C3399A0;
  *(_OWORD *)(a1 + 128) = 0u;
  v70 = (uint64_t *)(a1 + 128);
  *(_OWORD *)(a1 + 144) = 0u;
  v71 = v115;
  *(_DWORD *)(a1 + 160) = *(_DWORD *)(v115 + 160);
  std::__hash_table<std::__hash_value_type<mlcore::ModelProperty<std::string> *,std::string>,std::__unordered_map_hasher<mlcore::ModelProperty<std::string> *,std::__hash_value_type<mlcore::ModelProperty<std::string> *,std::string>,std::hash<mlcore::ModelProperty<std::string> *>,std::equal_to<mlcore::ModelProperty<std::string> *>,true>,std::__unordered_map_equal<mlcore::ModelProperty<std::string> *,std::__hash_value_type<mlcore::ModelProperty<std::string> *,std::string>,std::equal_to<mlcore::ModelProperty<std::string> *>,std::hash<mlcore::ModelProperty<std::string> *>,true>,std::allocator<std::__hash_value_type<mlcore::ModelProperty<std::string> *,std::string>>>::__rehash<true>(a1 + 128, *(_QWORD *)(v115 + 136));
  v72 = *(_QWORD **)(v115 + 144);
  if (v72)
  {
    v73 = (_QWORD *)(a1 + 144);
    v74 = *(_QWORD *)(a1 + 136);
    do
    {
      v3 = (unint64_t)(v72 + 2);
      v75 = v72[2];
      v76 = 0x9DDFEA08EB382D69 * (((8 * v75) + 8) ^ HIDWORD(v75));
      v77 = 0x9DDFEA08EB382D69 * (HIDWORD(v75) ^ (v76 >> 47) ^ v76);
      v78 = 0x9DDFEA08EB382D69 * (v77 ^ (v77 >> 47));
      if (v74)
      {
        v79 = (uint8x8_t)vcnt_s8((int8x8_t)v74);
        v79.i16[0] = vaddlv_u8(v79);
        if (v79.u32[0] > 1uLL)
        {
          v2 = 0x9DDFEA08EB382D69 * (v77 ^ (v77 >> 47));
          if (v78 >= v74)
            v2 = v78 % v74;
        }
        else
        {
          v2 = v78 & (v74 - 1);
        }
        v80 = *(_QWORD **)(*v70 + 8 * v2);
        if (v80)
        {
          for (m = (_QWORD *)*v80; m; m = (_QWORD *)*m)
          {
            v82 = m[1];
            if (v82 == v78)
            {
              if (m[2] == v75)
              {
                v71 = v115;
                goto LABEL_167;
              }
            }
            else
            {
              if (v79.u32[0] > 1uLL)
              {
                if (v82 >= v74)
                  v82 %= v74;
              }
              else
              {
                v82 &= v74 - 1;
              }
              if (v82 != v2)
                break;
            }
          }
        }
      }
      v83 = operator new(0x20uLL);
      *v83 = 0;
      v83[1] = v78;
      *((_OWORD *)v83 + 1) = *(_OWORD *)v3;
      v84 = (float)(unint64_t)(*(_QWORD *)(a1 + 152) + 1);
      v85 = *(float *)(a1 + 160);
      if (!v74 || (float)(v85 * (float)v74) < v84)
      {
        v86 = (v74 & (v74 - 1)) != 0;
        if (v74 < 3)
          v86 = 1;
        v87 = v86 | (2 * v74);
        v88 = vcvtps_u32_f32(v84 / v85);
        if (v87 <= v88)
          v89 = v88;
        else
          v89 = v87;
        std::__hash_table<std::__hash_value_type<mlcore::ModelProperty<std::string> *,std::string>,std::__unordered_map_hasher<mlcore::ModelProperty<std::string> *,std::__hash_value_type<mlcore::ModelProperty<std::string> *,std::string>,std::hash<mlcore::ModelProperty<std::string> *>,std::equal_to<mlcore::ModelProperty<std::string> *>,true>,std::__unordered_map_equal<mlcore::ModelProperty<std::string> *,std::__hash_value_type<mlcore::ModelProperty<std::string> *,std::string>,std::equal_to<mlcore::ModelProperty<std::string> *>,std::hash<mlcore::ModelProperty<std::string> *>,true>,std::allocator<std::__hash_value_type<mlcore::ModelProperty<std::string> *,std::string>>>::__rehash<true>(a1 + 128, v89);
        v74 = *(_QWORD *)(a1 + 136);
        if ((v74 & (v74 - 1)) != 0)
        {
          if (v78 >= v74)
            v2 = v78 % v74;
          else
            v2 = v78;
        }
        else
        {
          v2 = (v74 - 1) & v78;
        }
      }
      v90 = *v70;
      v91 = *(_QWORD **)(*v70 + 8 * v2);
      if (v91)
      {
        *v83 = *v91;
        v71 = v115;
      }
      else
      {
        *v83 = *v73;
        *v73 = v83;
        *(_QWORD *)(v90 + 8 * v2) = v73;
        v71 = v115;
        if (!*v83)
          goto LABEL_166;
        v92 = *(_QWORD *)(*v83 + 8);
        if ((v74 & (v74 - 1)) != 0)
        {
          if (v92 >= v74)
            v92 %= v74;
        }
        else
        {
          v92 &= v74 - 1;
        }
        v91 = (_QWORD *)(*v70 + 8 * v92);
      }
      *v91 = v83;
LABEL_166:
      ++*(_QWORD *)(a1 + 152);
LABEL_167:
      v72 = (_QWORD *)*v72;
    }
    while (v72);
  }
  *(_QWORD *)a1 = &off_24C3399C0;
  *(_OWORD *)(a1 + 168) = 0u;
  v93 = (uint64_t *)(a1 + 168);
  *(_OWORD *)(a1 + 184) = 0u;
  *(_DWORD *)(a1 + 200) = *(_DWORD *)(v71 + 200);
  std::__hash_table<std::__hash_value_type<mlcore::ModelProperty<std::string> *,std::string>,std::__unordered_map_hasher<mlcore::ModelProperty<std::string> *,std::__hash_value_type<mlcore::ModelProperty<std::string> *,std::string>,std::hash<mlcore::ModelProperty<std::string> *>,std::equal_to<mlcore::ModelProperty<std::string> *>,true>,std::__unordered_map_equal<mlcore::ModelProperty<std::string> *,std::__hash_value_type<mlcore::ModelProperty<std::string> *,std::string>,std::equal_to<mlcore::ModelProperty<std::string> *>,std::hash<mlcore::ModelProperty<std::string> *>,true>,std::allocator<std::__hash_value_type<mlcore::ModelProperty<std::string> *,std::string>>>::__rehash<true>(a1 + 168, *(_QWORD *)(v71 + 176));
  v94 = *(_QWORD **)(v71 + 184);
  if (v94)
  {
    v116 = (_QWORD *)(a1 + 184);
    v95 = *(_QWORD *)(a1 + 176);
    do
    {
      v96 = v94[2];
      v97 = 0x9DDFEA08EB382D69 * (((8 * v96) + 8) ^ HIDWORD(v96));
      v98 = 0x9DDFEA08EB382D69 * (HIDWORD(v96) ^ (v97 >> 47) ^ v97);
      v99 = 0x9DDFEA08EB382D69 * (v98 ^ (v98 >> 47));
      if (v95)
      {
        v100 = (uint8x8_t)vcnt_s8((int8x8_t)v95);
        v100.i16[0] = vaddlv_u8(v100);
        if (v100.u32[0] > 1uLL)
        {
          v3 = 0x9DDFEA08EB382D69 * (v98 ^ (v98 >> 47));
          if (v99 >= v95)
            v3 = v99 % v95;
        }
        else
        {
          v3 = v99 & (v95 - 1);
        }
        v101 = *(_QWORD **)(*v93 + 8 * v3);
        if (v101)
        {
          for (n = (_QWORD *)*v101; n; n = (_QWORD *)*n)
          {
            v103 = n[1];
            if (v103 == v99)
            {
              if (n[2] == v96)
                goto LABEL_208;
            }
            else
            {
              if (v100.u32[0] > 1uLL)
              {
                if (v103 >= v95)
                  v103 %= v95;
              }
              else
              {
                v103 &= v95 - 1;
              }
              if (v103 != v3)
                break;
            }
          }
        }
      }
      v104 = operator new(0x20uLL);
      *v104 = 0;
      v104[1] = v99;
      *((_OWORD *)v104 + 1) = *((_OWORD *)v94 + 1);
      v105 = (float)(unint64_t)(*(_QWORD *)(a1 + 192) + 1);
      v106 = *(float *)(a1 + 200);
      if (!v95 || (float)(v106 * (float)v95) < v105)
      {
        v107 = (v95 & (v95 - 1)) != 0;
        if (v95 < 3)
          v107 = 1;
        v108 = v107 | (2 * v95);
        v109 = vcvtps_u32_f32(v105 / v106);
        if (v108 <= v109)
          v110 = v109;
        else
          v110 = v108;
        std::__hash_table<std::__hash_value_type<mlcore::ModelProperty<std::string> *,std::string>,std::__unordered_map_hasher<mlcore::ModelProperty<std::string> *,std::__hash_value_type<mlcore::ModelProperty<std::string> *,std::string>,std::hash<mlcore::ModelProperty<std::string> *>,std::equal_to<mlcore::ModelProperty<std::string> *>,true>,std::__unordered_map_equal<mlcore::ModelProperty<std::string> *,std::__hash_value_type<mlcore::ModelProperty<std::string> *,std::string>,std::equal_to<mlcore::ModelProperty<std::string> *>,std::hash<mlcore::ModelProperty<std::string> *>,true>,std::allocator<std::__hash_value_type<mlcore::ModelProperty<std::string> *,std::string>>>::__rehash<true>(a1 + 168, v110);
        v95 = *(_QWORD *)(a1 + 176);
        if ((v95 & (v95 - 1)) != 0)
        {
          if (v99 >= v95)
            v3 = v99 % v95;
          else
            v3 = v99;
        }
        else
        {
          v3 = (v95 - 1) & v99;
        }
      }
      v111 = *v93;
      v112 = *(_QWORD **)(*v93 + 8 * v3);
      if (v112)
      {
        *v104 = *v112;
      }
      else
      {
        *v104 = *v116;
        *v116 = v104;
        *(_QWORD *)(v111 + 8 * v3) = v116;
        if (!*v104)
          goto LABEL_207;
        v113 = *(_QWORD *)(*v104 + 8);
        if ((v95 & (v95 - 1)) != 0)
        {
          if (v113 >= v95)
            v113 %= v95;
        }
        else
        {
          v113 &= v95 - 1;
        }
        v112 = (_QWORD *)(*v93 + 8 * v113);
      }
      *v112 = v104;
LABEL_207:
      ++*(_QWORD *)(a1 + 192);
LABEL_208:
      v94 = (_QWORD *)*v94;
    }
    while (v94);
  }
  return a1;
}

{
  void **v3;
  _QWORD *v4;
  _QWORD *v5;
  size_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t i;
  void *v11;
  void *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  __int128 v18;
  __int128 v19;
  int v20;

  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_DWORD *)(a1 + 40) = 1065353216;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_DWORD *)(a1 + 80) = 1065353216;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_DWORD *)(a1 + 120) = 1065353216;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_DWORD *)(a1 + 160) = 1065353216;
  *(_OWORD *)(a1 + 168) = 0u;
  v3 = (void **)(a1 + 168);
  *(_QWORD *)a1 = &off_24C3399C0;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_DWORD *)(a1 + 200) = 1065353216;
  v4 = *(_QWORD **)a2;
  v5 = *(_QWORD **)(a2 + 8);
  if (*(_QWORD **)a2 == v5)
  {
    v6 = 0;
  }
  else
  {
    v6 = 0;
    do
    {
      if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)*v4 + 80))(*v4) == 1)
        ++v6;
      ++v4;
    }
    while (v4 != v5);
  }
  v18 = 0u;
  v19 = 0u;
  v20 = 1065353216;
  std::__hash_table<std::__hash_value_type<mlcore::ModelProperty<std::string> *,std::string>,std::__unordered_map_hasher<mlcore::ModelProperty<std::string> *,std::__hash_value_type<mlcore::ModelProperty<std::string> *,std::string>,std::hash<mlcore::ModelProperty<std::string> *>,std::equal_to<mlcore::ModelProperty<std::string> *>,true>,std::__unordered_map_equal<mlcore::ModelProperty<std::string> *,std::__hash_value_type<mlcore::ModelProperty<std::string> *,std::string>,std::equal_to<mlcore::ModelProperty<std::string> *>,std::hash<mlcore::ModelProperty<std::string> *>,true>,std::allocator<std::__hash_value_type<mlcore::ModelProperty<std::string> *,std::string>>>::__rehash<true>((uint64_t)&v18, v6);
  if (*(_QWORD *)(a1 + 192))
  {
    v7 = *(_QWORD **)(a1 + 184);
    if (v7)
    {
      do
      {
        v8 = (_QWORD *)*v7;
        operator delete(v7);
        v7 = v8;
      }
      while (v8);
    }
    *(_QWORD *)(a1 + 184) = 0;
    v9 = *(_QWORD *)(a1 + 176);
    if (v9)
    {
      for (i = 0; i != v9; ++i)
        *((_QWORD *)*v3 + i) = 0;
    }
    *(_QWORD *)(a1 + 192) = 0;
  }
  v11 = (void *)v18;
  *(_QWORD *)&v18 = 0;
  v12 = *v3;
  *v3 = v11;
  if (v12)
    operator delete(v12);
  v13 = *((_QWORD *)&v18 + 1);
  v14 = v19;
  *(_QWORD *)(a1 + 184) = v19;
  *(_QWORD *)(a1 + 176) = v13;
  *((_QWORD *)&v18 + 1) = 0;
  v15 = *((_QWORD *)&v19 + 1);
  *(_QWORD *)(a1 + 192) = *((_QWORD *)&v19 + 1);
  *(_DWORD *)(a1 + 200) = v20;
  if (v15)
  {
    v16 = *(_QWORD *)(v14 + 8);
    if ((v13 & (v13 - 1)) != 0)
    {
      if (v16 >= v13)
        v16 %= v13;
    }
    else
    {
      v16 &= v13 - 1;
    }
    *((_QWORD *)*v3 + v16) = a1 + 184;
    v19 = 0uLL;
  }
  std::__hash_table<mlcore::ModelPropertyBase *,std::hash<mlcore::ModelPropertyBase *>,std::equal_to<mlcore::ModelPropertyBase *>,std::allocator<mlcore::ModelPropertyBase *>>::~__hash_table((uint64_t)&v18);
  return a1;
}

void sub_20A64D2A4(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  std::__hash_table<mlcore::ModelPropertyBase *,std::hash<mlcore::ModelPropertyBase *>,std::equal_to<mlcore::ModelPropertyBase *>,std::allocator<mlcore::ModelPropertyBase *>>::~__hash_table(v3);
  *v1 = &off_24C3399A0;
  std::__hash_table<mlcore::ModelPropertyBase *,std::hash<mlcore::ModelPropertyBase *>,std::equal_to<mlcore::ModelPropertyBase *>,std::allocator<mlcore::ModelPropertyBase *>>::~__hash_table(v2);
  mlcore::PropertyCacheBase<double,std::string,mediaplatform::Data>::~PropertyCacheBase(v1);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<mlcore::ModelProperty<std::string> *,std::string>,std::__unordered_map_hasher<mlcore::ModelProperty<std::string> *,std::__hash_value_type<mlcore::ModelProperty<std::string> *,std::string>,std::hash<mlcore::ModelProperty<std::string> *>,std::equal_to<mlcore::ModelProperty<std::string> *>,true>,std::__unordered_map_equal<mlcore::ModelProperty<std::string> *,std::__hash_value_type<mlcore::ModelProperty<std::string> *,std::string>,std::equal_to<mlcore::ModelProperty<std::string> *>,std::hash<mlcore::ModelProperty<std::string> *>,true>,std::allocator<std::__hash_value_type<mlcore::ModelProperty<std::string> *,std::string>>>::__rehash<true>(uint64_t a1, size_t __n)
{
  size_t prime;
  int8x8_t v4;
  void *v5;
  void *v6;
  uint64_t v7;
  _QWORD *v8;
  size_t v9;
  uint8x8_t v10;
  unint64_t v11;
  uint8x8_t v12;
  uint64_t v13;
  _QWORD *v14;
  size_t v15;
  void *v16;

  if (__n == 1)
  {
    prime = 2;
  }
  else
  {
    prime = __n;
    if ((__n & (__n - 1)) != 0)
      prime = std::__next_prime(__n);
  }
  v4 = *(int8x8_t *)(a1 + 8);
  if (prime <= *(_QWORD *)&v4)
  {
    if (prime >= *(_QWORD *)&v4)
      return;
    v11 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(_QWORD *)&v4 < 3uLL || (v12 = (uint8x8_t)vcnt_s8(v4), v12.i16[0] = vaddlv_u8(v12), v12.u32[0] > 1uLL))
    {
      v11 = std::__next_prime(v11);
    }
    else
    {
      v13 = 1 << -(char)__clz(v11 - 1);
      if (v11 >= 2)
        v11 = v13;
    }
    if (prime <= v11)
      prime = v11;
    if (prime >= *(_QWORD *)&v4)
      return;
    if (!prime)
    {
      v16 = *(void **)a1;
      *(_QWORD *)a1 = 0;
      if (v16)
        operator delete(v16);
      *(_QWORD *)(a1 + 8) = 0;
      return;
    }
  }
  if (prime >> 61)
    std::__throw_bad_array_new_length[abi:ne180100]();
  v5 = operator new(8 * prime);
  v6 = *(void **)a1;
  *(_QWORD *)a1 = v5;
  if (v6)
    operator delete(v6);
  v7 = 0;
  *(_QWORD *)(a1 + 8) = prime;
  do
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v7++) = 0;
  while (prime != v7);
  v8 = *(_QWORD **)(a1 + 16);
  if (v8)
  {
    v9 = v8[1];
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)prime);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      if (v9 >= prime)
        v9 %= prime;
    }
    else
    {
      v9 &= prime - 1;
    }
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v9) = a1 + 16;
    v14 = (_QWORD *)*v8;
    if (*v8)
    {
      do
      {
        v15 = v14[1];
        if (v10.u32[0] > 1uLL)
        {
          if (v15 >= prime)
            v15 %= prime;
        }
        else
        {
          v15 &= prime - 1;
        }
        if (v15 != v9)
        {
          if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v15))
          {
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v15) = v8;
            goto LABEL_31;
          }
          *v8 = *v14;
          *v14 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v15);
          **(_QWORD **)(*(_QWORD *)a1 + 8 * v15) = v14;
          v14 = v8;
        }
        v15 = v9;
LABEL_31:
        v8 = v14;
        v14 = (_QWORD *)*v14;
        v9 = v15;
      }
      while (v14);
    }
  }
}

uint64_t mlcore::PropertyCacheBase<long long,int,double,std::string,mediaplatform::Data>::PropertyCacheBase(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;

  v2 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)result = &off_24C339940;
  *(_QWORD *)(result + 8) = v2;
  *(_QWORD *)(result + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 16) = 0;
  v3 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(result + 24) = v3;
  v4 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(result + 32) = v4;
  *(_DWORD *)(result + 40) = *(_DWORD *)(a2 + 40);
  if (v4)
  {
    v5 = *(_QWORD *)(v3 + 8);
    v6 = *(_QWORD *)(result + 16);
    if ((v6 & (v6 - 1)) != 0)
    {
      if (v5 >= v6)
        v5 %= v6;
    }
    else
    {
      v5 &= v6 - 1;
    }
    *(_QWORD *)(v2 + 8 * v5) = result + 24;
    *(_QWORD *)(a2 + 24) = 0;
    *(_QWORD *)(a2 + 32) = 0;
  }
  *(_QWORD *)result = &off_24C339960;
  v7 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(result + 48) = v7;
  *(_QWORD *)(result + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 56) = 0;
  v8 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(result + 64) = v8;
  v9 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(result + 72) = v9;
  *(_DWORD *)(result + 80) = *(_DWORD *)(a2 + 80);
  if (v9)
  {
    v10 = *(_QWORD *)(v8 + 8);
    v11 = *(_QWORD *)(result + 56);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
        v10 %= v11;
    }
    else
    {
      v10 &= v11 - 1;
    }
    *(_QWORD *)(v7 + 8 * v10) = result + 64;
    *(_QWORD *)(a2 + 64) = 0;
    *(_QWORD *)(a2 + 72) = 0;
  }
  *(_QWORD *)result = &off_24C339980;
  v12 = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a2 + 88) = 0;
  *(_QWORD *)(result + 88) = v12;
  *(_QWORD *)(result + 96) = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a2 + 96) = 0;
  v13 = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(result + 104) = v13;
  v14 = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(result + 112) = v14;
  *(_DWORD *)(result + 120) = *(_DWORD *)(a2 + 120);
  if (v14)
  {
    v15 = *(_QWORD *)(v13 + 8);
    v16 = *(_QWORD *)(result + 96);
    if ((v16 & (v16 - 1)) != 0)
    {
      if (v15 >= v16)
        v15 %= v16;
    }
    else
    {
      v15 &= v16 - 1;
    }
    *(_QWORD *)(v12 + 8 * v15) = result + 104;
    *(_QWORD *)(a2 + 104) = 0;
    *(_QWORD *)(a2 + 112) = 0;
  }
  *(_QWORD *)result = &off_24C3399A0;
  v17 = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a2 + 128) = 0;
  *(_QWORD *)(result + 128) = v17;
  *(_QWORD *)(result + 136) = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a2 + 136) = 0;
  v18 = *(_QWORD *)(a2 + 144);
  *(_QWORD *)(result + 144) = v18;
  v19 = *(_QWORD *)(a2 + 152);
  *(_QWORD *)(result + 152) = v19;
  *(_DWORD *)(result + 160) = *(_DWORD *)(a2 + 160);
  if (v19)
  {
    v20 = *(_QWORD *)(v18 + 8);
    v21 = *(_QWORD *)(result + 136);
    if ((v21 & (v21 - 1)) != 0)
    {
      if (v20 >= v21)
        v20 %= v21;
    }
    else
    {
      v20 &= v21 - 1;
    }
    *(_QWORD *)(v17 + 8 * v20) = result + 144;
    *(_QWORD *)(a2 + 144) = 0;
    *(_QWORD *)(a2 + 152) = 0;
  }
  *(_QWORD *)result = &off_24C3399C0;
  v22 = *(_QWORD *)(a2 + 168);
  *(_QWORD *)(a2 + 168) = 0;
  *(_QWORD *)(result + 168) = v22;
  *(_QWORD *)(result + 176) = *(_QWORD *)(a2 + 176);
  *(_QWORD *)(a2 + 176) = 0;
  v25 = *(_QWORD *)(a2 + 184);
  v23 = a2 + 184;
  v24 = v25;
  *(_QWORD *)(result + 184) = v25;
  v26 = *(_QWORD *)(v23 + 8);
  *(_QWORD *)(result + 192) = v26;
  *(_DWORD *)(result + 200) = *(_DWORD *)(v23 + 16);
  if (v26)
  {
    v27 = *(_QWORD *)(v24 + 8);
    v28 = *(_QWORD *)(result + 176);
    if ((v28 & (v28 - 1)) != 0)
    {
      if (v27 >= v28)
        v27 %= v28;
    }
    else
    {
      v27 &= v28 - 1;
    }
    *(_QWORD *)(v22 + 8 * v27) = result + 184;
    *(_QWORD *)v23 = 0;
    *(_QWORD *)(v23 + 8) = 0;
  }
  return result;
}

uint64_t mlcore::PropertyCacheBase<int,double,std::string,mediaplatform::Data>::valueForProperty(uint64_t a1, unint64_t a2)
{
  _QWORD *v3;
  std::logic_error *exception;
  std::string v6;

  v3 = std::__hash_table<std::__hash_value_type<mlcore::ModelProperty<double> *,double>,std::__unordered_map_hasher<mlcore::ModelProperty<double> *,std::__hash_value_type<mlcore::ModelProperty<double> *,double>,std::hash<mlcore::ModelProperty<double> *>,std::equal_to<mlcore::ModelProperty<double> *>,true>,std::__unordered_map_equal<mlcore::ModelProperty<double> *,std::__hash_value_type<mlcore::ModelProperty<double> *,double>,std::equal_to<mlcore::ModelProperty<double> *>,std::hash<mlcore::ModelProperty<double> *>,true>,std::allocator<std::__hash_value_type<mlcore::ModelProperty<double> *,double>>>::find<mlcore::ModelProperty<double> *>((_QWORD *)(a1 + 128), a2);
  if (!v3)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    (*(void (**)(std::string *__return_ptr, unint64_t))(*(_QWORD *)a2 + 40))(&v6, a2);
    std::logic_error::logic_error(exception, &v6);
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8C0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24C32FBC0, MEMORY[0x24BEDAB00]);
  }
  return *((unsigned int *)v3 + 6);
}

void sub_20A64D894(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  int v16;

  if (a15 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  goto LABEL_6;
}

void sub_20A64DA98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;

  std::__hash_table<mlcore::ModelPropertyBase *,std::hash<mlcore::ModelPropertyBase *>,std::equal_to<mlcore::ModelPropertyBase *>,std::allocator<mlcore::ModelPropertyBase *>>::~__hash_table((uint64_t)&a9);
  std::__hash_table<mlcore::ModelPropertyBase *,std::hash<mlcore::ModelPropertyBase *>,std::equal_to<mlcore::ModelPropertyBase *>,std::allocator<mlcore::ModelPropertyBase *>>::~__hash_table(v10);
  *v9 = &off_24C3399A0;
  std::__hash_table<mlcore::ModelPropertyBase *,std::hash<mlcore::ModelPropertyBase *>,std::equal_to<mlcore::ModelPropertyBase *>,std::allocator<mlcore::ModelPropertyBase *>>::~__hash_table(v11);
  mlcore::PropertyCacheBase<double,std::string,mediaplatform::Data>::~PropertyCacheBase(v9);
  _Unwind_Resume(a1);
}

uint64_t mlcore::ModelProperty<long long>::propertyType()
{
  return 1;
}

uint64_t mlcore::ModelProperty<std::string>::propertyType()
{
  return 3;
}

uint64_t mlcore::ModelProperty<int>::propertyType()
{
  return 0;
}

_QWORD *std::__hash_table<std::__hash_value_type<mlcore::ModelProperty<double> *,double>,std::__unordered_map_hasher<mlcore::ModelProperty<double> *,std::__hash_value_type<mlcore::ModelProperty<double> *,double>,std::hash<mlcore::ModelProperty<double> *>,std::equal_to<mlcore::ModelProperty<double> *>,true>,std::__unordered_map_equal<mlcore::ModelProperty<double> *,std::__hash_value_type<mlcore::ModelProperty<double> *,double>,std::equal_to<mlcore::ModelProperty<double> *>,std::hash<mlcore::ModelProperty<double> *>,true>,std::allocator<std::__hash_value_type<mlcore::ModelProperty<double> *,double>>>::find<mlcore::ModelProperty<double> *>(_QWORD *a1, unint64_t a2)
{
  int8x8_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint8x8_t v6;
  unint64_t v7;
  _QWORD *v8;
  _QWORD *result;
  unint64_t v10;

  v2 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v2)
    return 0;
  v3 = 0x9DDFEA08EB382D69 * (((8 * a2) + 8) ^ HIDWORD(a2));
  v4 = 0x9DDFEA08EB382D69 * (HIDWORD(a2) ^ (v3 >> 47) ^ v3);
  v5 = 0x9DDFEA08EB382D69 * (v4 ^ (v4 >> 47));
  v6 = (uint8x8_t)vcnt_s8(v2);
  v6.i16[0] = vaddlv_u8(v6);
  if (v6.u32[0] > 1uLL)
  {
    v7 = v5;
    if (v5 >= *(_QWORD *)&v2)
      v7 = v5 % *(_QWORD *)&v2;
  }
  else
  {
    v7 = v5 & (*(_QWORD *)&v2 - 1);
  }
  v8 = *(_QWORD **)(*a1 + 8 * v7);
  if (!v8)
    return 0;
  result = (_QWORD *)*v8;
  if (*v8)
  {
    do
    {
      v10 = result[1];
      if (v5 == v10)
      {
        if (result[2] == a2)
          return result;
      }
      else
      {
        if (v6.u32[0] > 1uLL)
        {
          if (v10 >= *(_QWORD *)&v2)
            v10 %= *(_QWORD *)&v2;
        }
        else
        {
          v10 &= *(_QWORD *)&v2 - 1;
        }
        if (v10 != v7)
          return 0;
      }
      result = (_QWORD *)*result;
    }
    while (result);
  }
  return result;
}

uint64_t mlcore::ForeignProperty<int>::propertyType(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 80) + 80))(*(_QWORD *)(a1 + 80));
}

void mlcore::PropertiesQuery::_allPropertiesToFetch(_QWORD *a1@<X0>, mlcore::LibraryView **a2@<X1>, float *a3@<X8>)
{
  mlcore::LibraryView *v5;
  unint64_t *v6;
  unint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  mlcore::LibraryView *v14[2];
  uint64_t v15;

  v5 = a2[1];
  v14[0] = *a2;
  v14[1] = v5;
  if (v5)
  {
    v6 = (unint64_t *)((char *)v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  mlcore::Query::_allPropertiesToFetch((uint64_t)a1, v14, (uint64_t)a3);
  if (v5)
  {
    v8 = (unint64_t *)((char *)v5 + 8);
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      (*(void (**)(mlcore::LibraryView *))(*(_QWORD *)v5 + 16))(v5);
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v5);
    }
  }
  v10 = (uint64_t *)a1[10];
  v11 = (uint64_t *)a1[11];
  while (v10 != v11)
  {
    v15 = *v10;
    mlcore::OrderedSet<mlcore::ModelPropertyBase *,std::hash<mlcore::ModelPropertyBase *>,std::equal_to<mlcore::ModelPropertyBase *>>::insert(a3, &v15);
    ++v10;
  }
  v13 = a1[7];
  v12 = a1[8];
  while (v13 != v12)
  {
    v15 = *(_QWORD *)(v13 + 8);
    mlcore::OrderedSet<mlcore::ModelPropertyBase *,std::hash<mlcore::ModelPropertyBase *>,std::equal_to<mlcore::ModelPropertyBase *>>::insert(a3, &v15);
    v13 += 24;
  }
}

void sub_20A64DCCC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void mlcore::QueryResult::~QueryResult(std::exception *this)
{
  std::exception *v2;

  this->__vftable = (std::exception_vtbl *)&off_24C336B70;
  this[1].__vftable = (std::exception_vtbl *)off_24C335E70;
  v2 = this + 1;
  this[4].__vftable = (std::exception_vtbl *)&unk_24C335EA0;
  if (SHIBYTE(this[19].__vftable) < 0)
    operator delete(this[17].__vftable);
  mediaplatform::PlatformErrorCondition::~PlatformErrorCondition(this + 9);
  if (SHIBYTE(this[8].__vftable) < 0)
    operator delete(this[6].__vftable);
  std::exception::~exception(v2);
}

{
  mlcore::QueryResult::~QueryResult(this);
  JUMPOUT(0x20BD27AFCLL);
}

void mlcore::EntityQuery::_allPropertiesToFetch(_QWORD *a1@<X0>, mlcore::LibraryView **a2@<X1>, float *a3@<X8>)
{
  mlcore::LibraryView *v5;
  unint64_t *v6;
  unint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  void *__p;
  uint64_t *v15;
  uint64_t v16;
  mlcore::LibraryView *v17[2];
  uint64_t v18;

  v5 = a2[1];
  v17[0] = *a2;
  v17[1] = v5;
  if (v5)
  {
    v6 = (unint64_t *)((char *)v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  mlcore::Query::_allPropertiesToFetch((uint64_t)a1, v17, (uint64_t)a3);
  if (v5)
  {
    v8 = (unint64_t *)((char *)v5 + 8);
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      (*(void (**)(mlcore::LibraryView *))(*(_QWORD *)v5 + 16))(v5);
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v5);
    }
  }
  (*(void (**)(void **__return_ptr, _QWORD *))(*a1 + 120))(&__p, a1);
  v10 = (uint64_t *)__p;
  v11 = v15;
  while (v10 != v11)
  {
    v18 = *v10;
    mlcore::OrderedSet<mlcore::ModelPropertyBase *,std::hash<mlcore::ModelPropertyBase *>,std::equal_to<mlcore::ModelPropertyBase *>>::insert(a3, &v18);
    ++v10;
  }
  std::__hash_table<mlcore::ModelPropertyBase *,std::hash<mlcore::ModelPropertyBase *>,std::equal_to<mlcore::ModelPropertyBase *>,std::allocator<mlcore::ModelPropertyBase *>>::~__hash_table((uint64_t)&v16);
  if (__p)
  {
    v15 = (uint64_t *)__p;
    operator delete(__p);
  }
  v13 = a1[7];
  v12 = a1[8];
  while (v13 != v12)
  {
    __p = *(void **)(v13 + 8);
    mlcore::OrderedSet<mlcore::ModelPropertyBase *,std::hash<mlcore::ModelPropertyBase *>,std::equal_to<mlcore::ModelPropertyBase *>>::insert(a3, (uint64_t *)&__p);
    v13 += 24;
  }
}

void sub_20A64DE7C(_Unwind_Exception *a1)
{
  uint64_t v1;

  mlcore::OrderedSet<mlcore::ModelPropertyBase *,std::hash<mlcore::ModelPropertyBase *>,std::equal_to<mlcore::ModelPropertyBase *>>::~OrderedSet(v1);
  _Unwind_Resume(a1);
}

uint64_t mlcore::ComparisonPropertyPredicate::_allProperties@<X0>(mlcore::ComparisonPropertyPredicate *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4[3];

  v4[2] = *MEMORY[0x24BDAC8D0];
  v2 = *((_QWORD *)this + 3);
  v4[0] = *((_QWORD *)this + 1);
  v4[1] = v2;
  return mlcore::OrderedSet<mlcore::ModelPropertyBase *,std::hash<mlcore::ModelPropertyBase *>,std::equal_to<mlcore::ModelPropertyBase *>>::OrderedSet(a2, v4, 2);
}

uint64_t mlcore::TypedEntityClass<mlcore::Album>::databaseTable()
{
  return *(_QWORD *)mediaplatform::Singleton<mlcore::AlbumTable>::sharedInstance();
}

uint64_t mediaplatform::Singleton<mlcore::AlbumTable>::sharedInstance()
{
  unsigned __int8 v0;
  mlcore::AlbumTable **v2;

  if ((v0 & 1) == 0
  {
    v2 = (mlcore::AlbumTable **)operator new();
    _ZNSt3__115allocate_sharedB8ne180100IN6mlcore10AlbumTableENS_9allocatorIS2_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(v2);
    mediaplatform::Singleton<mlcore::AlbumTable>::sharedInstance(void)::_sharedInstance = (uint64_t)v2;
  }
  return mediaplatform::Singleton<mlcore::AlbumTable>::sharedInstance(void)::_sharedInstance;
}

void sub_20A64DFA0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x20BD27AFC](v1, 0x20C40A4A59CD2);
  _Unwind_Resume(a1);
}

uint64_t mlcore::NotPredicate::_allProperties(mlcore::NotPredicate *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 56))(*((_QWORD *)this + 1));
}

double mlcore::ExistsPredicate::_allProperties@<D0>(uint64_t a1@<X8>)
{
  double result;

  result = 0.0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 56) = 1065353216;
  return result;
}

uint64_t mlcore::ModelProperty<double>::propertyType()
{
  return 2;
}

uint64_t mlcore::NullPredicateBase::_allProperties@<X0>(mlcore::NullPredicateBase *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3[2];

  v3[1] = *MEMORY[0x24BDAC8D0];
  v3[0] = *((_QWORD *)this + 1);
  return mlcore::OrderedSet<mlcore::ModelPropertyBase *,std::hash<mlcore::ModelPropertyBase *>,std::equal_to<mlcore::ModelPropertyBase *>>::OrderedSet(a2, v3, 1);
}

void mlcore::AggregateFunctionQuery::_allPropertiesToFetch(uint64_t a1@<X0>, mlcore::LibraryView **a2@<X1>, float *a3@<X8>)
{
  mlcore::LibraryView *v5;
  unint64_t *v6;
  unint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  mlcore::LibraryView *v11[2];

  v5 = a2[1];
  v11[0] = *a2;
  v11[1] = v5;
  if (v5)
  {
    v6 = (unint64_t *)((char *)v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  mlcore::Query::_allPropertiesToFetch(a1, v11, (uint64_t)a3);
  if (v5)
  {
    v8 = (unint64_t *)((char *)v5 + 8);
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      (*(void (**)(mlcore::LibraryView *))(*(_QWORD *)v5 + 16))(v5);
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v5);
    }
  }
  if (*(_QWORD *)(a1 + 56))
  {
    v10 = *(_QWORD *)(a1 + 56);
    mlcore::OrderedSet<mlcore::ModelPropertyBase *,std::hash<mlcore::ModelPropertyBase *>,std::equal_to<mlcore::ModelPropertyBase *>>::insert(a3, &v10);
  }
}

void sub_20A64E110(_Unwind_Exception *a1)
{
  uint64_t v1;

  mlcore::OrderedSet<mlcore::ModelPropertyBase *,std::hash<mlcore::ModelPropertyBase *>,std::equal_to<mlcore::ModelPropertyBase *>>::~OrderedSet(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<mediaplatform::SQLColumnNameExpression>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void mlcore::Transaction::unrestrictedLibraryView(mlcore::Transaction *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  char *v5;
  unint64_t *v6;
  unint64_t v7;
  __int128 v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;

  v4 = *((_QWORD *)this + 4);
  if (!v4)
  {
    mlcore::DeviceLibraryView::library(*((mlcore::DeviceLibraryView **)this + 2), &v22);
    v5 = (char *)operator new(0x80uLL);
    *(_OWORD *)(v5 + 8) = 0u;
    *(_QWORD *)v5 = &off_24C33CCC8;
    v21 = v22;
    v22 = 0u;
    v24 = v21;
    mlcore::DeviceLibraryView::DeviceLibraryView((uint64_t)(v5 + 24), (uint64_t *)&v24, 0);
    if (*((_QWORD *)&v21 + 1))
    {
      v6 = (unint64_t *)(*((_QWORD *)&v21 + 1) + 8);
      do
        v7 = __ldaxr(v6);
      while (__stlxr(v7 - 1, v6));
      if (!v7)
      {
        (*(void (**)(_QWORD))(**((_QWORD **)&v21 + 1) + 16))(*((_QWORD *)&v21 + 1));
        std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v21 + 1));
      }
    }
    *(_QWORD *)&v23 = v5 + 24;
    *((_QWORD *)&v23 + 1) = v5;
    std::shared_ptr<mlcore::DeviceLibraryView>::__enable_weak_this[abi:ne180100]<mlcore::DeviceLibraryView,mlcore::DeviceLibraryView,void>((uint64_t)&v23, (_QWORD *)v5 + 14, (uint64_t)(v5 + 24));
    v8 = v23;
    v23 = 0uLL;
    v9 = (std::__shared_weak_count *)*((_QWORD *)this + 5);
    *((_OWORD *)this + 2) = v8;
    if (v9)
    {
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
    v12 = (std::__shared_weak_count *)*((_QWORD *)&v23 + 1);
    if (*((_QWORD *)&v23 + 1))
    {
      v13 = (unint64_t *)(*((_QWORD *)&v23 + 1) + 8);
      do
        v14 = __ldaxr(v13);
      while (__stlxr(v14 - 1, v13));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
    v15 = (std::__shared_weak_count *)*((_QWORD *)&v22 + 1);
    if (*((_QWORD *)&v22 + 1))
    {
      v16 = (unint64_t *)(*((_QWORD *)&v22 + 1) + 8);
      do
        v17 = __ldaxr(v16);
      while (__stlxr(v17 - 1, v16));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
      }
    }
    v4 = *((_QWORD *)this + 4);
  }
  v18 = *((_QWORD *)this + 5);
  *a2 = v4;
  a2[1] = v18;
  if (v18)
  {
    v19 = (unint64_t *)(v18 + 8);
    do
      v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
  }
}

void sub_20A64E310(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  std::__shared_weak_count *v3;
  void *v5;
  uint64_t v6;
  va_list va;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v6 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  std::__shared_weak_count::~__shared_weak_count(v3);
  operator delete(v5);
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void mlcore::LibraryView::viewWithLibrary(_QWORD *a1@<X0>, int a2@<W1>, _OWORD *a3@<X8>)
{
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  char *v8;
  unint64_t *v9;
  unint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;

  v5 = a1[1];
  *(_QWORD *)&v11 = *a1;
  *((_QWORD *)&v11 + 1) = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  v8 = (char *)operator new(0x80uLL);
  *(_OWORD *)(v8 + 8) = 0u;
  *(_QWORD *)v8 = &off_24C33CCC8;
  v13 = v11;
  mlcore::DeviceLibraryView::DeviceLibraryView((uint64_t)(v8 + 24), (uint64_t *)&v13, a2);
  if (*((_QWORD *)&v11 + 1))
  {
    v9 = (unint64_t *)(*((_QWORD *)&v11 + 1) + 8);
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v11 + 1) + 16))(*((_QWORD *)&v11 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v11 + 1));
    }
  }
  *(_QWORD *)&v12 = v8 + 24;
  *((_QWORD *)&v12 + 1) = v8;
  std::shared_ptr<mlcore::DeviceLibraryView>::__enable_weak_this[abi:ne180100]<mlcore::DeviceLibraryView,mlcore::DeviceLibraryView,void>((uint64_t)&v12, (_QWORD *)v8 + 14, (uint64_t)(v8 + 24));
  *a3 = v12;
}

void sub_20A64E474(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  std::__shared_weak_count *v3;
  void *v5;
  uint64_t v6;
  va_list va;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v6 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  std::__shared_weak_count::~__shared_weak_count(v3);
  operator delete(v5);
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t mlcore::DeviceLibraryView::DeviceLibraryView(uint64_t a1, uint64_t *a2, int a3)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  unint64_t v10;

  v4 = *a2;
  v5 = (std::__shared_weak_count *)a2[1];
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  *(_QWORD *)a1 = &unk_24C3369F0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_DWORD *)(a1 + 40) = 1065353216;
  *(_WORD *)(a1 + 48) = 0;
  *(_BYTE *)(a1 + 50) = 0;
  *(int32x2_t *)(a1 + 52) = vdup_n_s32(0x3E8u);
  *(_QWORD *)(a1 + 64) = v4;
  *(_QWORD *)(a1 + 72) = v5;
  if (v5)
  {
    v8 = (unint64_t *)&v5->__shared_owners_;
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
    *(_DWORD *)(a1 + 80) = a3;
    do
      v10 = __ldaxr(v8);
    while (__stlxr(v10 - 1, v8));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  else
  {
    *(_DWORD *)(a1 + 80) = a3;
  }
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)a1 = &off_24C3396E8;
  return a1;
}

void mlcore::DeviceLibraryView::_performQuery(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v7;
  char *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  __int128 v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  uint64_t v31;
  std::__shared_weak_count *v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  _BYTE v36[24];
  _BYTE *v37;
  uint64_t v38;

  v38 = *MEMORY[0x24BDAC8D0];
  v7 = *a3;
  if (!*a3)
  {
    std::shared_ptr<mlcore::DeviceLibraryView>::shared_ptr[abi:ne180100]<mlcore::DeviceLibraryView,void>(&v33, *(_QWORD *)(a1 + 88), *(std::__shared_weak_count **)(a1 + 96));
    v8 = (char *)operator new(0x60uLL);
    *(_OWORD *)(v8 + 8) = 0u;
    *(_QWORD *)v8 = &off_24C33C440;
    v30 = (std::__shared_weak_count *)*((_QWORD *)&v33 + 1);
    v35 = v33;
    v33 = 0u;
    mlcore::Transaction::Transaction((uint64_t)(v8 + 24), (uint64_t)&v35, 1);
    if (v30)
    {
      p_shared_owners = (unint64_t *)&v30->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
        std::__shared_weak_count::__release_weak(v30);
      }
    }
    *(_QWORD *)&v34 = v8 + 24;
    *((_QWORD *)&v34 + 1) = v8;
    std::shared_ptr<mlcore::DeviceLibraryView>::__enable_weak_this[abi:ne180100]<mlcore::DeviceLibraryView,mlcore::DeviceLibraryView,void>((uint64_t)&v34, (_QWORD *)v8 + 3, (uint64_t)(v8 + 24));
    v11 = v34;
    v34 = 0uLL;
    v12 = (std::__shared_weak_count *)a3[1];
    *(_OWORD *)a3 = v11;
    if (v12)
    {
      v13 = (unint64_t *)&v12->__shared_owners_;
      do
        v14 = __ldaxr(v13);
      while (__stlxr(v14 - 1, v13));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
    v15 = (std::__shared_weak_count *)*((_QWORD *)&v34 + 1);
    if (*((_QWORD *)&v34 + 1))
    {
      v16 = (unint64_t *)(*((_QWORD *)&v34 + 1) + 8);
      do
        v17 = __ldaxr(v16);
      while (__stlxr(v17 - 1, v16));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
      }
    }
    v18 = (std::__shared_weak_count *)*((_QWORD *)&v33 + 1);
    if (*((_QWORD *)&v33 + 1))
    {
      v19 = (unint64_t *)(*((_QWORD *)&v33 + 1) + 8);
      do
        v20 = __ldaxr(v19);
      while (__stlxr(v20 - 1, v19));
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
      }
    }
    v7 = *a3;
  }
  v21 = *a2;
  v22 = (std::__shared_weak_count *)a3[1];
  v31 = v7;
  v32 = v22;
  if (v22)
  {
    v23 = (unint64_t *)&v22->__shared_owners_;
    do
      v24 = __ldxr(v23);
    while (__stxr(v24 + 1, v23));
  }
  std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100]((uint64_t)v36, a4);
  (*(void (**)(uint64_t, uint64_t *, _BYTE *))(*(_QWORD *)v21 + 96))(v21, &v31, v36);
  v25 = v37;
  if (v37 == v36)
  {
    v26 = 4;
    v25 = v36;
  }
  else
  {
    if (!v37)
      goto LABEL_31;
    v26 = 5;
  }
  (*(void (**)(void))(*v25 + 8 * v26))();
LABEL_31:
  v27 = v32;
  if (v32)
  {
    v28 = (unint64_t *)&v32->__shared_owners_;
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
}

void sub_20A64E7F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  std::__shared_weak_count *v5;
  void *v7;
  uint64_t v8;
  va_list va;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  va_list va1;

  va_start(va1, a5);
  va_start(va, a5);
  v8 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  std::__shared_weak_count::~__shared_weak_count(v5);
  operator delete(v7);
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t mlcore::Transaction::Transaction(uint64_t a1, uint64_t a2, int a3)
{
  mlcore::DeviceLibraryView *v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t *v11;
  __int128 v13;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  v4 = *(mlcore::DeviceLibraryView **)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 24) = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
    v4 = *(mlcore::DeviceLibraryView **)(a1 + 16);
  }
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_BYTE *)(a1 + 64) = 1;
  *(_BYTE *)(a1 + 65) = a3;
  if (!v4)
    __assert_rtn("Transaction", "Transaction.cpp", 21, "_libraryView");
  if (a3)
  {
    mlcore::DeviceLibraryView::checkoutReader(v4, &v13);
    std::shared_ptr<mlcore::Predicate>::operator=[abi:ne180100](a1 + 48, &v13);
    v8 = (std::__shared_weak_count *)*((_QWORD *)&v13 + 1);
    if (!*((_QWORD *)&v13 + 1))
      goto LABEL_16;
    v9 = (unint64_t *)(*((_QWORD *)&v13 + 1) + 8);
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
  }
  else
  {
    mlcore::DeviceLibraryView::checkoutWriter(v4, &v13);
    std::shared_ptr<mlcore::Predicate>::operator=[abi:ne180100](a1 + 48, &v13);
    v8 = (std::__shared_weak_count *)*((_QWORD *)&v13 + 1);
    if (!*((_QWORD *)&v13 + 1))
      goto LABEL_16;
    v11 = (unint64_t *)(*((_QWORD *)&v13 + 1) + 8);
    do
      v10 = __ldaxr(v11);
    while (__stlxr(v10 - 1, v11));
  }
  if (!v10)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
LABEL_16:
  mediaplatform::DatabaseConnection::pushTransaction(**(_QWORD **)(a1 + 48), 0);
  return a1;
}

void sub_20A64E9B4(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  std::__shared_weak_count *v6;

  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100](v4);
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100](v3);
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100](v2);
  v6 = *(std::__shared_weak_count **)(v1 + 8);
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
  _Unwind_Resume(a1);
}

void mlcore::DeviceLibraryView::checkoutReader(mlcore::DeviceLibraryView *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  std::__shared_weak_count *v15;

  mlcore::DeviceLibraryView::library(this, &v12);
  v3 = *(_QWORD *)(v12 + 152);
  v4 = *(std::__shared_weak_count **)(v12 + 160);
  v14 = v3;
  v15 = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  mediaplatform::DatabaseConnectionPool::_checkoutConnection((mediaplatform::DatabaseConnectionPool *)(v3 + 184), 1, a2);
  if (v4)
  {
    v7 = (unint64_t *)&v4->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  v9 = v13;
  if (v13)
  {
    v10 = (unint64_t *)&v13->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
}

void sub_20A64EAC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void mlcore::DeviceLibraryView::library(mlcore::DeviceLibraryView *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;

  v2 = *((_QWORD *)this + 8);
  v3 = (std::__shared_weak_count *)*((_QWORD *)this + 9);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
    *a2 = v2;
    a2[1] = v3;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  else
  {
    *a2 = v2;
    a2[1] = 0;
  }
}

void mlcore::PropertiesQuery::_SQLSelectStatement(_BYTE *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  uint64_t **v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  uint64_t v36;
  std::__shared_weak_count *v37;
  uint64_t v38;
  std::__shared_weak_count *v39;
  uint64_t *v40;
  uint64_t *v41;
  uint64_t v42;
  std::__shared_weak_count *v43;
  uint64_t v44;
  std::__shared_weak_count *v45;
  uint64_t v46[2];
  void **v47;

  v6 = (std::__shared_weak_count *)a2[1];
  v46[0] = *a2;
  v46[1] = (uint64_t)v6;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  mlcore::RangeQuery::_SQLSelectStatement((uint64_t)a1, v46, a3);
  if (v6)
  {
    v9 = (unint64_t *)&v6->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  v11 = *a3;
  *(_BYTE *)(*(_QWORD *)(*a3 + 8) + 8) = a1[48];
  v12 = a2[1];
  v42 = *a2;
  v43 = (std::__shared_weak_count *)v12;
  if (v12)
  {
    v13 = (unint64_t *)(v12 + 8);
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  (*(void (**)(uint64_t *__return_ptr, _BYTE *, uint64_t *))(*(_QWORD *)a1 + 64))(&v44, a1, &v42);
  mediaplatform::SQLSelectStatement::setFromStatement(v11, &v44);
  v15 = v45;
  if (v45)
  {
    v16 = (unint64_t *)&v45->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  v18 = v43;
  if (v43)
  {
    v19 = (unint64_t *)&v43->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  v21 = *a3;
  v22 = a2[1];
  v38 = *a2;
  v39 = (std::__shared_weak_count *)v22;
  if (v22)
  {
    v23 = (unint64_t *)(v22 + 8);
    do
      v24 = __ldxr(v23);
    while (__stxr(v24 + 1, v23));
  }
  (*(void (**)(uint64_t **__return_ptr, _BYTE *, uint64_t *))(*(_QWORD *)a1 + 48))(&v40, a1, &v38);
  v25 = (uint64_t **)(*(_QWORD *)(v21 + 8) + 16);
  if (v25 != &v40)
    std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__assign_with_size[abi:ne180100]<std::shared_ptr<mediaplatform::SQLExpression const>*,std::shared_ptr<mediaplatform::SQLExpression const>*>(v25, v40, v41, ((char *)v41 - (char *)v40) >> 4);
  v47 = (void **)&v40;
  std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__destroy_vector::operator()[abi:ne180100](&v47);
  v26 = v39;
  if (v39)
  {
    v27 = (unint64_t *)&v39->__shared_owners_;
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  v29 = *a3;
  v30 = a2[1];
  v36 = *a2;
  v37 = (std::__shared_weak_count *)v30;
  if (v30)
  {
    v31 = (unint64_t *)(v30 + 8);
    do
      v32 = __ldxr(v31);
    while (__stxr(v32 + 1, v31));
  }
  (*(void (**)(uint64_t **__return_ptr, _BYTE *, uint64_t *))(*(_QWORD *)a1 + 56))(&v40, a1, &v36);
  if ((uint64_t **)(v29 + 56) != &v40)
    std::vector<std::shared_ptr<mediaplatform::SQLOrderingTerm const>>::__assign_with_size[abi:ne180100]<std::shared_ptr<mediaplatform::SQLOrderingTerm const>*,std::shared_ptr<mediaplatform::SQLOrderingTerm const>*>(v29 + 56, v40, v41, ((char *)v41 - (char *)v40) >> 4);
  v47 = (void **)&v40;
  std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__destroy_vector::operator()[abi:ne180100](&v47);
  v33 = v37;
  if (v37)
  {
    v34 = (unint64_t *)&v37->__shared_owners_;
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 - 1, v34));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
    }
  }
}

void sub_20A64EE10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  uint64_t v13;
  uint64_t v14;

  *(_QWORD *)(v14 - 56) = &a13;
  std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v14 - 56));
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100](v13);
  _Unwind_Resume(a1);
}

void sub_20A64EE74()
{
  uint64_t v0;

  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100](v0 - 72);
  JUMPOUT(0x20A64EE6CLL);
}

void mlcore::Query::_SQLSelectStatement(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  __n128 v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  __int128 *v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  uint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  uint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  uint64_t v45;
  std::__shared_weak_count *v46;
  uint64_t v47;
  std::__shared_weak_count *v48;
  __int128 v49;
  uint64_t v50;
  std::__shared_weak_count *v51;
  uint64_t v52;
  std::__shared_weak_count *v53;
  uint64_t v54;
  std::__shared_weak_count *v55;
  __int128 v56;
  void **v57;

  v6.n128_f64[0] = _ZNSt3__115allocate_sharedB8ne180100IN13mediaplatform18SQLSelectStatementENS_9allocatorIS2_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(a3);
  v7 = *a3;
  v8 = (std::__shared_weak_count *)a2[1];
  v54 = *a2;
  v55 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t *, __n128))(*(_QWORD *)a1 + 48))(&v56, a1, &v54, v6);
  v11 = (__int128 *)(*(_QWORD *)(v7 + 8) + 16);
  if (v11 != &v56)
    std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__assign_with_size[abi:ne180100]<std::shared_ptr<mediaplatform::SQLExpression const>*,std::shared_ptr<mediaplatform::SQLExpression const>*>(v11, (uint64_t *)v56, *((uint64_t **)&v56 + 1), (uint64_t)(*((_QWORD *)&v56 + 1) - v56) >> 4);
  v57 = (void **)&v56;
  std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__destroy_vector::operator()[abi:ne180100](&v57);
  v12 = v55;
  if (v55)
  {
    v13 = (unint64_t *)&v55->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  v15 = *a3;
  v16 = (std::__shared_weak_count *)a2[1];
  v50 = *a2;
  v51 = v16;
  if (v16)
  {
    v17 = (unint64_t *)&v16->__shared_owners_;
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
  }
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t *))(*(_QWORD *)a1 + 64))(&v52, a1, &v50);
  mediaplatform::SQLSelectStatement::setFromStatement(v15, &v52);
  v19 = v53;
  if (v53)
  {
    v20 = (unint64_t *)&v53->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  v22 = v51;
  if (v51)
  {
    v23 = (unint64_t *)&v51->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  v25 = *a3;
  v26 = (std::__shared_weak_count *)a2[1];
  v47 = *a2;
  v48 = v26;
  if (v26)
  {
    v27 = (unint64_t *)&v26->__shared_owners_;
    do
      v28 = __ldxr(v27);
    while (__stxr(v28 + 1, v27));
  }
  (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t *))(*(_QWORD *)a1 + 80))(&v56, a1, &v47);
  v44 = (std::__shared_weak_count *)*((_QWORD *)&v56 + 1);
  v49 = v56;
  v56 = 0uLL;
  mediaplatform::SQLSelectStatement::setWhereExpression(v25, (uint64_t *)&v49);
  if (v44)
  {
    v29 = (unint64_t *)&v44->__shared_owners_;
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
      std::__shared_weak_count::__release_weak(v44);
    }
  }
  v31 = (std::__shared_weak_count *)*((_QWORD *)&v56 + 1);
  if (*((_QWORD *)&v56 + 1))
  {
    v32 = (unint64_t *)(*((_QWORD *)&v56 + 1) + 8);
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
  v34 = v48;
  if (v48)
  {
    v35 = (unint64_t *)&v48->__shared_owners_;
    do
      v36 = __ldaxr(v35);
    while (__stlxr(v36 - 1, v35));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
  }
  v37 = *a3;
  v38 = (std::__shared_weak_count *)a2[1];
  v45 = *a2;
  v46 = v38;
  if (v38)
  {
    v39 = (unint64_t *)&v38->__shared_owners_;
    do
      v40 = __ldxr(v39);
    while (__stxr(v40 + 1, v39));
  }
  (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t *))(*(_QWORD *)a1 + 56))(&v56, a1, &v45);
  if ((__int128 *)(v37 + 56) != &v56)
    std::vector<std::shared_ptr<mediaplatform::SQLOrderingTerm const>>::__assign_with_size[abi:ne180100]<std::shared_ptr<mediaplatform::SQLOrderingTerm const>*,std::shared_ptr<mediaplatform::SQLOrderingTerm const>*>(v37 + 56, (uint64_t *)v56, *((uint64_t **)&v56 + 1), (uint64_t)(*((_QWORD *)&v56 + 1) - v56) >> 4);
  v57 = (void **)&v56;
  std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__destroy_vector::operator()[abi:ne180100](&v57);
  v41 = v46;
  if (v46)
  {
    v42 = (unint64_t *)&v46->__shared_owners_;
    do
      v43 = __ldaxr(v42);
    while (__stlxr(v43 - 1, v42));
    if (!v43)
    {
      ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
      std::__shared_weak_count::__release_weak(v41);
    }
  }
}

void sub_20A64F1D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v3;
  uint64_t v4;
  va_list va;

  va_start(va, a3);
  *(_QWORD *)(v4 - 56) = v4 - 80;
  std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v4 - 56));
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100](v3);
  _Unwind_Resume(a1);
}

void mlcore::PropertiesQuery::_SQLOrderingTerms(uint64_t a1@<X0>, uint64_t *a2@<X1>, char **a3@<X8>)
{
  std::__shared_weak_count *v3;
  uint64_t *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9[2];

  v3 = (std::__shared_weak_count *)a2[1];
  v4 = (uint64_t *)(a1 + 56);
  v9[0] = *a2;
  v9[1] = (uint64_t)v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  mlcore::SQLOrderingTermsForSortDescriptors(v4, v9, a3);
  if (v3)
  {
    v7 = (unint64_t *)&v3->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_20A64F2CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void mlcore::SQLOrderingTermsForSortDescriptors(uint64_t *a1@<X0>, uint64_t *a2@<X1>, char **a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  __int128 v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t v20;
  char *v21;
  char *v22;
  char *v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char *v28;
  uint64_t v29;
  char *v30;
  char *v31;
  __int128 v32;
  int64x2_t v33;
  uint64_t v34;
  void *v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  std::runtime_error *exception;
  __int128 v40;
  unsigned int v41;
  uint64_t v42;
  std::__shared_weak_count *v43;
  __int128 v44;
  __int128 v45;

  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v3 = *a1;
  v4 = a1[1];
  if (*a1 != v4)
  {
    do
    {
      v7 = *(_QWORD *)(v3 + 8);
      v8 = (std::__shared_weak_count *)a2[1];
      v42 = *a2;
      v43 = v8;
      if (v8)
      {
        p_shared_owners = (unint64_t *)&v8->__shared_owners_;
        do
          v10 = __ldxr(p_shared_owners);
        while (__stxr(v10 + 1, p_shared_owners));
      }
      (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t *))(*(_QWORD *)v7 + 96))(&v44, v7, &v42);
      if (*(_DWORD *)(v3 + 16) >= 2u)
      {
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(exception, "unkown sort ordering type");
        __cxa_throw(exception, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
      }
      v41 = *(_DWORD *)(v3 + 16);
      std::allocate_shared[abi:ne180100]<mediaplatform::SQLOrderingTerm,std::allocator<mediaplatform::SQLOrderingTerm>,std::shared_ptr<mediaplatform::SQLExpression>,mediaplatform::SQLOrderingTerm::OrderingType,void>(&v45, &v44, &v41);
      v11 = (std::__shared_weak_count *)*((_QWORD *)&v44 + 1);
      if (*((_QWORD *)&v44 + 1))
      {
        v12 = (unint64_t *)(*((_QWORD *)&v44 + 1) + 8);
        do
          v13 = __ldaxr(v12);
        while (__stlxr(v13 - 1, v12));
        if (!v13)
        {
          ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
          std::__shared_weak_count::__release_weak(v11);
        }
      }
      v14 = v43;
      if (v43)
      {
        v15 = (unint64_t *)&v43->__shared_owners_;
        do
          v16 = __ldaxr(v15);
        while (__stlxr(v16 - 1, v15));
        if (!v16)
        {
          ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
          std::__shared_weak_count::__release_weak(v14);
        }
      }
      v17 = v45;
      v44 = v45;
      if (*((_QWORD *)&v45 + 1))
      {
        v18 = (unint64_t *)(*((_QWORD *)&v45 + 1) + 8);
        do
          v19 = __ldxr(v18);
        while (__stxr(v19 + 1, v18));
      }
      v21 = a3[1];
      v20 = (unint64_t)a3[2];
      if ((unint64_t)v21 >= v20)
      {
        v40 = v17;
        v23 = *a3;
        v24 = (v21 - *a3) >> 4;
        v25 = v24 + 1;
        if ((unint64_t)(v24 + 1) >> 60)
          std::vector<std::string>::__throw_length_error[abi:ne180100]();
        v26 = v20 - (_QWORD)v23;
        if (v26 >> 3 > v25)
          v25 = v26 >> 3;
        if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFF0)
          v27 = 0xFFFFFFFFFFFFFFFLL;
        else
          v27 = v25;
        v28 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<mediaplatform::DatabaseParameterBase>>>(v27);
        v30 = &v28[16 * v24];
        *(_OWORD *)v30 = v40;
        if (v21 == v23)
        {
          v33 = vdupq_n_s64((unint64_t)v21);
          v31 = &v28[16 * v24];
        }
        else
        {
          v31 = &v28[16 * v24];
          do
          {
            v32 = *((_OWORD *)v21 - 1);
            v21 -= 16;
            *((_OWORD *)v31 - 1) = v32;
            v31 -= 16;
            *(_QWORD *)v21 = 0;
            *((_QWORD *)v21 + 1) = 0;
          }
          while (v21 != v23);
          v33 = *(int64x2_t *)a3;
        }
        v22 = v30 + 16;
        *a3 = v31;
        a3[1] = v30 + 16;
        a3[2] = &v28[16 * v29];
        v34 = v33.i64[1];
        v35 = (void *)v33.i64[0];
        while ((void *)v34 != v35)
          v34 = std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100](v34 - 16);
        if (v35)
          operator delete(v35);
      }
      else
      {
        *(_OWORD *)v21 = v17;
        v22 = v21 + 16;
      }
      a3[1] = v22;
      v36 = (std::__shared_weak_count *)*((_QWORD *)&v45 + 1);
      if (*((_QWORD *)&v45 + 1))
      {
        v37 = (unint64_t *)(*((_QWORD *)&v45 + 1) + 8);
        do
          v38 = __ldaxr(v37);
        while (__stlxr(v38 - 1, v37));
        if (!v38)
        {
          ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
          std::__shared_weak_count::__release_weak(v36);
        }
      }
      v3 += 24;
    }
    while (v3 != v4);
  }
}

void sub_20A64F574(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v6;
  va_list va;
  uint64_t v8;
  uint64_t v9;
  va_list va1;
  uint64_t v11;
  va_list va2;

  va_start(va2, a5);
  va_start(va1, a5);
  va_start(va, a5);
  v6 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v9 = va_arg(va2, _QWORD);
  v11 = va_arg(va2, _QWORD);
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__destroy_vector::operator()[abi:ne180100]((void ***)va2);
  _Unwind_Resume(a1);
}

void mlcore::Query::_SQLWhereExpression(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  mlcore::LibraryView *v10;
  unint64_t v11;
  __int128 v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  mlcore::LibraryView *v30;
  std::__shared_weak_count *v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;

  v6 = *(_QWORD *)(a1 + 16);
  v7 = *(std::__shared_weak_count **)(a1 + 24);
  *(_QWORD *)&v34 = v6;
  *((_QWORD *)&v34 + 1) = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
    v10 = *(mlcore::LibraryView **)a2;
    if (!*(_QWORD *)a2)
      goto LABEL_26;
    *(_QWORD *)&v32 = v6;
    *((_QWORD *)&v32 + 1) = v7;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  else
  {
    v10 = *(mlcore::LibraryView **)a2;
    if (!*(_QWORD *)a2)
      goto LABEL_26;
    v32 = v6;
  }
  mlcore::LibraryView::_predicateByApplyingFilters(v10, &v32, *(mlcore::EntityClass **)(a1 + 8), &v33);
  v12 = v33;
  v33 = 0uLL;
  v34 = v12;
  if (v7)
  {
    v13 = (unint64_t *)&v7->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  v15 = (std::__shared_weak_count *)*((_QWORD *)&v33 + 1);
  if (*((_QWORD *)&v33 + 1))
  {
    v16 = (unint64_t *)(*((_QWORD *)&v33 + 1) + 8);
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  v18 = (std::__shared_weak_count *)*((_QWORD *)&v32 + 1);
  if (*((_QWORD *)&v32 + 1))
  {
    v19 = (unint64_t *)(*((_QWORD *)&v32 + 1) + 8);
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  v6 = v34;
LABEL_26:
  if (v6)
  {
    v21 = *(std::__shared_weak_count **)(a2 + 8);
    v30 = *(mlcore::LibraryView **)a2;
    v31 = v21;
    if (v21)
    {
      v22 = (unint64_t *)&v21->__shared_owners_;
      do
        v23 = __ldxr(v22);
      while (__stxr(v23 + 1, v22));
    }
    (*(void (**)(unint64_t, mlcore::LibraryView **))(*(_QWORD *)v6 + 64))(v6, &v30);
    v24 = v31;
    if (v31)
    {
      v25 = (unint64_t *)&v31->__shared_owners_;
      do
        v26 = __ldaxr(v25);
      while (__stlxr(v26 - 1, v25));
      if (!v26)
      {
        ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
        std::__shared_weak_count::__release_weak(v24);
      }
    }
  }
  else
  {
    *a3 = 0;
    a3[1] = 0;
  }
  v27 = (std::__shared_weak_count *)*((_QWORD *)&v34 + 1);
  if (*((_QWORD *)&v34 + 1))
  {
    v28 = (unint64_t *)(*((_QWORD *)&v34 + 1) + 8);
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
}

void sub_20A64F7D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void mlcore::ContentRestrictions::_predicate(mlcore::ContentRestrictions *this@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  mlcore *Foreign;
  mlcore *v6;
  mlcore *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  __int128 v13;
  char *v14;
  __int128 *v15;
  char v16;
  uint64_t v17;
  char v18;
  __int128 v19;
  unint64_t *v20;
  unint64_t v21;
  uint64_t i;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  char *v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  __int128 *v34;
  char v35;
  uint64_t v36;
  char v37;
  __int128 v38;
  unint64_t *v39;
  unint64_t v40;
  uint64_t j;
  __int128 v42;
  uint64_t v43;
  _OWORD *v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  char *v48;
  uint64_t v49;
  char *v50;
  _QWORD *v51;
  _QWORD *v52;
  char *v53;
  __int128 v54;
  int64x2_t v55;
  uint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  char *v63;
  unint64_t *v64;
  unint64_t v65;
  unint64_t *v66;
  unint64_t v67;
  __int128 *v68;
  char v69;
  uint64_t v70;
  char v71;
  __int128 v72;
  unint64_t *v73;
  unint64_t v74;
  uint64_t k;
  __int128 v76;
  uint64_t v77;
  _OWORD *v78;
  uint64_t v79;
  unint64_t v80;
  unint64_t v81;
  char *v82;
  uint64_t v83;
  char *v84;
  _QWORD *v85;
  _QWORD *v86;
  char *v87;
  __int128 v88;
  int64x2_t v89;
  uint64_t v90;
  std::__shared_weak_count *v91;
  unint64_t *v92;
  unint64_t v93;
  std::__shared_weak_count *v94;
  unint64_t *v95;
  unint64_t v96;
  std::__shared_weak_count *v97;
  unint64_t *p_shared_owners;
  __int128 v99;
  __int128 v100;
  uint64_t v101;
  _OWORD *v102;
  uint64_t v103;
  unint64_t v104;
  unint64_t v105;
  char *v106;
  uint64_t v107;
  char *v108;
  _QWORD *v109;
  _QWORD *v110;
  char *v111;
  __int128 v112;
  int64x2_t v113;
  uint64_t v114;
  unint64_t v115;
  int v116;
  char *v117;
  unint64_t *v118;
  unint64_t v119;
  char *v120;
  __int128 *v121;
  char v122;
  uint64_t v123;
  char v124;
  __int128 v125;
  unint64_t *v126;
  unint64_t v127;
  uint64_t m;
  std::__shared_weak_count *v129;
  unint64_t *v130;
  unint64_t v131;
  __int128 v132;
  uint64_t v133;
  _OWORD *v134;
  uint64_t v135;
  unint64_t v136;
  unint64_t v137;
  char *v138;
  uint64_t v139;
  char *v140;
  _QWORD *v141;
  _QWORD *v142;
  char *v143;
  __int128 v144;
  int64x2_t v145;
  uint64_t v146;
  std::__shared_weak_count *v147;
  unint64_t *v148;
  unint64_t v149;
  std::__shared_weak_count *v150;
  unint64_t *v151;
  unint64_t v152;
  int v153;
  char *v154;
  unint64_t *v155;
  unint64_t v156;
  char *v157;
  __int128 *v158;
  char v159;
  uint64_t v160;
  char v161;
  __int128 v162;
  unint64_t *v163;
  unint64_t v164;
  uint64_t n;
  std::__shared_weak_count *v166;
  unint64_t *v167;
  unint64_t v168;
  __int128 v169;
  uint64_t v170;
  _OWORD *v171;
  uint64_t v172;
  unint64_t v173;
  unint64_t v174;
  char *v175;
  uint64_t v176;
  char *v177;
  _QWORD *v178;
  _QWORD *v179;
  char *v180;
  __int128 v181;
  int64x2_t v182;
  uint64_t v183;
  std::__shared_weak_count *v184;
  unint64_t *v185;
  unint64_t v186;
  std::__shared_weak_count *v187;
  unint64_t *v188;
  unint64_t v189;
  uint64_t v190;
  unint64_t v191;
  uint64_t v192;
  unint64_t *v193;
  unint64_t v194;
  std::__shared_weak_count *v195;
  unint64_t *v196;
  unint64_t v197;
  __int128 v198;
  __int128 v199;
  __int128 v200;
  __int128 v201;
  __int128 v202;
  __int128 *v204[3];
  __int128 *v205;
  __int128 v206;
  __int128 *v207;
  __int128 v208;
  __int128 *v209;
  __int128 *v210;
  __int128 *v211;
  __int128 v212;
  __int128 *v213;
  __int128 *v214;
  __int128 *v215;
  __int128 v216;
  int64x2_t v217;
  _QWORD v218[2];
  __int128 v219;
  __int128 *v220;
  __int128 v221;
  __int128 v222;
  uint64_t v223[2];
  uint64_t v224[2];
  uint64_t v225[2];
  __int128 v226;
  _BYTE v227[32];
  _QWORD *v228;
  uint64_t v229;

  v229 = *MEMORY[0x24BDAC8D0];
  Foreign = (mlcore *)mlcore::ItemPropertyMediaType(this);
  v6 = (mlcore *)mlcore::ItemPropertyContentRating(Foreign);
  v7 = (mlcore *)mlcore::ItemPropertyContentRatingLevel(v6);
  v8 = (uint64_t)v7;
  if (a2)
  {
    v9 = mlcore::PlaylistItemPropertyItemPersistentID(v7);
    v225[0] = 0;
    v225[1] = 0;
    Foreign = (mlcore *)mlcore::GetForeignProperty<int>(v9, (uint64_t)Foreign, v225);
    v10 = mlcore::PlaylistItemPropertyItemPersistentID(Foreign);
    v224[0] = 0;
    v224[1] = 0;
    v6 = (mlcore *)mlcore::GetForeignProperty<int>(v10, (uint64_t)v6, v224);
    v11 = mlcore::PlaylistItemPropertyItemPersistentID(v6);
    v223[0] = 0;
    v223[1] = 0;
    v8 = mlcore::GetForeignProperty<int>(v11, v8, v223);
  }
  v12 = (char *)operator new(0x48uLL);
  *(_OWORD *)(v12 + 8) = 0u;
  *(_QWORD *)v12 = &off_24C33CE50;
  *((_QWORD *)v12 + 4) = v6;
  *((_QWORD *)v12 + 5) = 0x100000000;
  *((_QWORD *)v12 + 3) = &unk_24C339C50;
  *((_DWORD *)v12 + 12) = 0;
  *(_OWORD *)(v12 + 56) = 0u;
  *(_QWORD *)&v226 = v12 + 24;
  *((_QWORD *)&v226 + 1) = v12;
  v13 = v226;
  v226 = 0u;
  *(_OWORD *)v227 = v13;
  v14 = (char *)operator new(0x48uLL);
  *(_OWORD *)(v14 + 8) = 0u;
  *(_QWORD *)v14 = &off_24C33CE50;
  *((_QWORD *)v14 + 4) = v6;
  *((_QWORD *)v14 + 5) = 0x100000000;
  *((_QWORD *)v14 + 3) = &unk_24C339C50;
  *((_DWORD *)v14 + 12) = 2;
  *(_OWORD *)(v14 + 56) = 0u;
  *(_QWORD *)&v219 = v14 + 24;
  *((_QWORD *)&v219 + 1) = v14;
  *(_OWORD *)&v227[16] = v219;
  v219 = 0u;
  v220 = 0;
  v221 = 0u;
  v217.i64[0] = (uint64_t)&v220;
  v217.i8[8] = 0;
  v15 = (__int128 *)operator new(0x20uLL);
  v16 = 0;
  v17 = 0;
  v220 = v15;
  *(_QWORD *)&v221 = v15;
  *((_QWORD *)&v221 + 1) = v15 + 2;
  do
  {
    v18 = v16;
    v19 = *(_OWORD *)&v227[16 * v17];
    *v15 = v19;
    if (*((_QWORD *)&v19 + 1))
    {
      v20 = (unint64_t *)(*((_QWORD *)&v19 + 1) + 8);
      do
        v21 = __ldxr(v20);
      while (__stxr(v21 + 1, v20));
    }
    ++v15;
    v16 = 1;
    v17 = 1;
  }
  while ((v18 & 1) == 0);
  *(_QWORD *)&v221 = v15;
  mlcore::CreateAndPredicate(&v220, &v222);
  v217.i64[0] = (uint64_t)&v220;
  std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v217);
  for (i = 16; i != -16; i -= 16)
    std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)&v227[i]);
  v23 = (std::__shared_weak_count *)*((_QWORD *)&v219 + 1);
  if (*((_QWORD *)&v219 + 1))
  {
    v24 = (unint64_t *)(*((_QWORD *)&v219 + 1) + 8);
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  v26 = (std::__shared_weak_count *)*((_QWORD *)&v226 + 1);
  if (*((_QWORD *)&v226 + 1))
  {
    v27 = (unint64_t *)(*((_QWORD *)&v226 + 1) + 8);
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  v217 = 0uLL;
  v218[0] = 0;
  if (*(_BYTE *)this)
  {
    v29 = (char *)operator new(0x48uLL);
    *(_OWORD *)(v29 + 8) = 0u;
    v30 = (unint64_t *)(v29 + 8);
    *(_QWORD *)v29 = &off_24C33CE50;
    *((_QWORD *)v29 + 4) = Foreign;
    *((_QWORD *)v29 + 5) = 0x700000000;
    *((_QWORD *)v29 + 3) = &unk_24C339C50;
    *((_DWORD *)v29 + 12) = 12;
    *(_OWORD *)(v29 + 56) = 0u;
    *(_QWORD *)&v219 = v29 + 24;
    *((_QWORD *)&v219 + 1) = v29;
    *(_QWORD *)v227 = v29 + 24;
    *(_QWORD *)&v227[8] = v29;
    do
      v31 = __ldxr(v30);
    while (__stxr(v31 + 1, v30));
    *(_OWORD *)&v227[16] = v222;
    if (*((_QWORD *)&v222 + 1))
    {
      v32 = (unint64_t *)(*((_QWORD *)&v222 + 1) + 8);
      do
        v33 = __ldxr(v32);
      while (__stxr(v33 + 1, v32));
    }
    v213 = 0;
    v214 = 0;
    v215 = 0;
    *(_QWORD *)&v226 = &v213;
    BYTE8(v226) = 0;
    v34 = (__int128 *)operator new(0x20uLL);
    v35 = 0;
    v36 = 0;
    v213 = v34;
    v214 = v34;
    v215 = v34 + 2;
    do
    {
      v37 = v35;
      v38 = *(_OWORD *)&v227[16 * v36];
      *v34 = v38;
      if (*((_QWORD *)&v38 + 1))
      {
        v39 = (unint64_t *)(*((_QWORD *)&v38 + 1) + 8);
        do
          v40 = __ldxr(v39);
        while (__stxr(v40 + 1, v39));
      }
      ++v34;
      v35 = 1;
      v36 = 1;
    }
    while ((v37 & 1) == 0);
    v214 = v34;
    mlcore::CreateAndPredicate(&v213, &v216);
    *(_QWORD *)&v226 = &v213;
    std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v226);
    for (j = 16; j != -16; j -= 16)
      std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)&v227[j]);
    mlcore::CreateNotPredicate(&v216, &v212);
    v42 = v212;
    v226 = v212;
    v212 = 0uLL;
    v43 = v217.i64[1];
    if (v217.i64[1] >= v218[0])
    {
      v198 = v42;
      v45 = (v217.i64[1] - v217.i64[0]) >> 4;
      if ((unint64_t)(v45 + 1) >> 60)
        std::vector<std::string>::__throw_length_error[abi:ne180100]();
      v46 = (v218[0] - v217.i64[0]) >> 3;
      if (v46 <= v45 + 1)
        v46 = v45 + 1;
      if (v218[0] - v217.i64[0] >= 0x7FFFFFFFFFFFFFF0uLL)
        v47 = 0xFFFFFFFFFFFFFFFLL;
      else
        v47 = v46;
      v228 = v218;
      v48 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<mediaplatform::DatabaseParameterBase>>>(v47);
      v50 = &v48[16 * v45];
      *(_OWORD *)v50 = v198;
      v226 = 0uLL;
      v51 = (_QWORD *)v217.i64[1];
      v52 = (_QWORD *)v217.i64[0];
      if (v217.i64[1] == v217.i64[0])
      {
        v55 = vdupq_n_s64(v217.u64[1]);
        v53 = &v48[16 * v45];
      }
      else
      {
        v53 = &v48[16 * v45];
        do
        {
          v54 = *((_OWORD *)v51 - 1);
          v51 -= 2;
          *((_OWORD *)v53 - 1) = v54;
          v53 -= 16;
          *v51 = 0;
          v51[1] = 0;
        }
        while (v51 != v52);
        v55 = v217;
      }
      v44 = v50 + 16;
      v217.i64[0] = (uint64_t)v53;
      v217.i64[1] = (uint64_t)(v50 + 16);
      *(int64x2_t *)&v227[8] = v55;
      v56 = v218[0];
      v218[0] = &v48[16 * v49];
      *(_QWORD *)&v227[24] = v56;
      *(_QWORD *)v227 = v55.i64[0];
      std::__split_buffer<std::shared_ptr<mediaplatform::SQLExpression const>>::~__split_buffer((uint64_t)v227);
    }
    else
    {
      *(_OWORD *)v217.i64[1] = v42;
      v44 = (_OWORD *)(v43 + 16);
      v226 = 0uLL;
    }
    v217.i64[1] = (uint64_t)v44;
    v57 = (std::__shared_weak_count *)*((_QWORD *)&v216 + 1);
    if (*((_QWORD *)&v216 + 1))
    {
      v58 = (unint64_t *)(*((_QWORD *)&v216 + 1) + 8);
      do
        v59 = __ldaxr(v58);
      while (__stlxr(v59 - 1, v58));
      if (!v59)
      {
        ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
        std::__shared_weak_count::__release_weak(v57);
      }
    }
    v60 = (std::__shared_weak_count *)*((_QWORD *)&v219 + 1);
    if (*((_QWORD *)&v219 + 1))
    {
      v61 = (unint64_t *)(*((_QWORD *)&v219 + 1) + 8);
      do
        v62 = __ldaxr(v61);
      while (__stlxr(v62 - 1, v61));
      if (!v62)
      {
        ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
        std::__shared_weak_count::__release_weak(v60);
      }
    }
  }
  if (*((_BYTE *)this + 1))
  {
    v63 = (char *)operator new(0x48uLL);
    *(_OWORD *)(v63 + 8) = 0u;
    v64 = (unint64_t *)(v63 + 8);
    *(_QWORD *)v63 = &off_24C33CE50;
    *((_QWORD *)v63 + 4) = Foreign;
    *((_QWORD *)v63 + 5) = 0x700000000;
    *((_QWORD *)v63 + 3) = &unk_24C339C50;
    *((_DWORD *)v63 + 12) = 65538;
    *(_OWORD *)(v63 + 56) = 0u;
    *(_QWORD *)&v219 = v63 + 24;
    *((_QWORD *)&v219 + 1) = v63;
    *(_QWORD *)v227 = v63 + 24;
    *(_QWORD *)&v227[8] = v63;
    do
      v65 = __ldxr(v64);
    while (__stxr(v65 + 1, v64));
    *(_OWORD *)&v227[16] = v222;
    if (*((_QWORD *)&v222 + 1))
    {
      v66 = (unint64_t *)(*((_QWORD *)&v222 + 1) + 8);
      do
        v67 = __ldxr(v66);
      while (__stxr(v67 + 1, v66));
    }
    v209 = 0;
    v210 = 0;
    v211 = 0;
    *(_QWORD *)&v226 = &v209;
    BYTE8(v226) = 0;
    v68 = (__int128 *)operator new(0x20uLL);
    v69 = 0;
    v70 = 0;
    v209 = v68;
    v210 = v68;
    v211 = v68 + 2;
    do
    {
      v71 = v69;
      v72 = *(_OWORD *)&v227[16 * v70];
      *v68 = v72;
      if (*((_QWORD *)&v72 + 1))
      {
        v73 = (unint64_t *)(*((_QWORD *)&v72 + 1) + 8);
        do
          v74 = __ldxr(v73);
        while (__stxr(v74 + 1, v73));
      }
      ++v68;
      v69 = 1;
      v70 = 1;
    }
    while ((v71 & 1) == 0);
    v210 = v68;
    mlcore::CreateAndPredicate(&v209, &v216);
    *(_QWORD *)&v226 = &v209;
    std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v226);
    for (k = 16; k != -16; k -= 16)
      std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)&v227[k]);
    mlcore::CreateNotPredicate(&v216, &v212);
    v76 = v212;
    v226 = v212;
    v212 = 0uLL;
    v77 = v217.i64[1];
    if (v217.i64[1] >= v218[0])
    {
      v199 = v76;
      v79 = (v217.i64[1] - v217.i64[0]) >> 4;
      if ((unint64_t)(v79 + 1) >> 60)
        std::vector<std::string>::__throw_length_error[abi:ne180100]();
      v80 = (v218[0] - v217.i64[0]) >> 3;
      if (v80 <= v79 + 1)
        v80 = v79 + 1;
      if (v218[0] - v217.i64[0] >= 0x7FFFFFFFFFFFFFF0uLL)
        v81 = 0xFFFFFFFFFFFFFFFLL;
      else
        v81 = v80;
      v228 = v218;
      v82 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<mediaplatform::DatabaseParameterBase>>>(v81);
      v84 = &v82[16 * v79];
      *(_OWORD *)v84 = v199;
      v226 = 0uLL;
      v85 = (_QWORD *)v217.i64[1];
      v86 = (_QWORD *)v217.i64[0];
      if (v217.i64[1] == v217.i64[0])
      {
        v89 = vdupq_n_s64(v217.u64[1]);
        v87 = &v82[16 * v79];
      }
      else
      {
        v87 = &v82[16 * v79];
        do
        {
          v88 = *((_OWORD *)v85 - 1);
          v85 -= 2;
          *((_OWORD *)v87 - 1) = v88;
          v87 -= 16;
          *v85 = 0;
          v85[1] = 0;
        }
        while (v85 != v86);
        v89 = v217;
      }
      v78 = v84 + 16;
      v217.i64[0] = (uint64_t)v87;
      v217.i64[1] = (uint64_t)(v84 + 16);
      *(int64x2_t *)&v227[8] = v89;
      v90 = v218[0];
      v218[0] = &v82[16 * v83];
      *(_QWORD *)&v227[24] = v90;
      *(_QWORD *)v227 = v89.i64[0];
      std::__split_buffer<std::shared_ptr<mediaplatform::SQLExpression const>>::~__split_buffer((uint64_t)v227);
    }
    else
    {
      *(_OWORD *)v217.i64[1] = v76;
      v78 = (_OWORD *)(v77 + 16);
      v226 = 0uLL;
    }
    v217.i64[1] = (uint64_t)v78;
    v91 = (std::__shared_weak_count *)*((_QWORD *)&v216 + 1);
    if (*((_QWORD *)&v216 + 1))
    {
      v92 = (unint64_t *)(*((_QWORD *)&v216 + 1) + 8);
      do
        v93 = __ldaxr(v92);
      while (__stlxr(v93 - 1, v92));
      if (!v93)
      {
        ((void (*)(std::__shared_weak_count *))v91->__on_zero_shared)(v91);
        std::__shared_weak_count::__release_weak(v91);
      }
    }
    v94 = (std::__shared_weak_count *)*((_QWORD *)&v219 + 1);
    if (*((_QWORD *)&v219 + 1))
    {
      v95 = (unint64_t *)(*((_QWORD *)&v219 + 1) + 8);
      do
        v96 = __ldaxr(v95);
      while (__stlxr(v96 - 1, v95));
      if (!v96)
      {
        ((void (*)(std::__shared_weak_count *))v94->__on_zero_shared)(v94);
        std::__shared_weak_count::__release_weak(v94);
      }
    }
  }
  if (*((_BYTE *)this + 2))
  {
    v97 = (std::__shared_weak_count *)operator new(0x48uLL);
    *(_OWORD *)&v97->__shared_owners_ = 0u;
    p_shared_owners = (unint64_t *)&v97->__shared_owners_;
    v97->__vftable = (std::__shared_weak_count_vtbl *)&off_24C33CE50;
    v97[1].__shared_owners_ = (uint64_t)Foreign;
    v97[1].__shared_weak_owners_ = 0x700000000;
    v97[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_24C339C50;
    LODWORD(v97[2].__vftable) = 1024;
    *(_OWORD *)&v97[2].__shared_owners_ = 0u;
    *(_QWORD *)&v99 = v97 + 1;
    *((_QWORD *)&v99 + 1) = v97;
    v226 = v99;
    mlcore::CreateNotPredicate(&v226, &v216);
    v100 = v216;
    v219 = v216;
    v216 = 0uLL;
    v101 = v217.i64[1];
    if (v217.i64[1] >= v218[0])
    {
      v200 = v100;
      v103 = (v217.i64[1] - v217.i64[0]) >> 4;
      if ((unint64_t)(v103 + 1) >> 60)
        std::vector<std::string>::__throw_length_error[abi:ne180100]();
      v104 = (v218[0] - v217.i64[0]) >> 3;
      if (v104 <= v103 + 1)
        v104 = v103 + 1;
      if (v218[0] - v217.i64[0] >= 0x7FFFFFFFFFFFFFF0uLL)
        v105 = 0xFFFFFFFFFFFFFFFLL;
      else
        v105 = v104;
      v228 = v218;
      v106 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<mediaplatform::DatabaseParameterBase>>>(v105);
      v108 = &v106[16 * v103];
      *(_OWORD *)v108 = v200;
      v219 = 0uLL;
      v109 = (_QWORD *)v217.i64[1];
      v110 = (_QWORD *)v217.i64[0];
      if (v217.i64[1] == v217.i64[0])
      {
        v113 = vdupq_n_s64(v217.u64[1]);
        v111 = &v106[16 * v103];
      }
      else
      {
        v111 = &v106[16 * v103];
        do
        {
          v112 = *((_OWORD *)v109 - 1);
          v109 -= 2;
          *((_OWORD *)v111 - 1) = v112;
          v111 -= 16;
          *v109 = 0;
          v109[1] = 0;
        }
        while (v109 != v110);
        v113 = v217;
      }
      v102 = v108 + 16;
      v217.i64[0] = (uint64_t)v111;
      v217.i64[1] = (uint64_t)(v108 + 16);
      *(int64x2_t *)&v227[8] = v113;
      v114 = v218[0];
      v218[0] = &v106[16 * v107];
      *(_QWORD *)&v227[24] = v114;
      *(_QWORD *)v227 = v113.i64[0];
      std::__split_buffer<std::shared_ptr<mediaplatform::SQLExpression const>>::~__split_buffer((uint64_t)v227);
    }
    else
    {
      *(_OWORD *)v217.i64[1] = v100;
      v102 = (_OWORD *)(v101 + 16);
      v219 = 0uLL;
    }
    v217.i64[1] = (uint64_t)v102;
    do
      v115 = __ldaxr(p_shared_owners);
    while (__stlxr(v115 - 1, p_shared_owners));
    if (!v115)
    {
      ((void (*)(std::__shared_weak_count *))v97->__on_zero_shared)(v97);
      std::__shared_weak_count::__release_weak(v97);
    }
  }
  v116 = *((_DWORD *)this + 1);
  if (v116 <= 999)
  {
    v117 = (char *)operator new(0x48uLL);
    *(_OWORD *)(v117 + 8) = 0u;
    v118 = (unint64_t *)(v117 + 8);
    *(_QWORD *)v117 = &off_24C33CE50;
    *((_QWORD *)v117 + 4) = Foreign;
    *((_QWORD *)v117 + 5) = 0x700000000;
    *((_QWORD *)v117 + 3) = &unk_24C339C50;
    *((_DWORD *)v117 + 12) = 2048;
    *(_OWORD *)(v117 + 56) = 0u;
    *(_QWORD *)&v219 = v117 + 24;
    *((_QWORD *)&v219 + 1) = v117;
    *(_QWORD *)v227 = v117 + 24;
    *(_QWORD *)&v227[8] = v117;
    do
      v119 = __ldxr(v118);
    while (__stxr(v119 + 1, v118));
    v120 = (char *)operator new(0x48uLL);
    *(_OWORD *)(v120 + 8) = 0u;
    *(_QWORD *)v120 = &off_24C33CE50;
    *((_QWORD *)v120 + 4) = v8;
    *((_QWORD *)v120 + 5) = 0x200000000;
    *((_QWORD *)v120 + 3) = &unk_24C339C50;
    *((_DWORD *)v120 + 12) = v116;
    *(_OWORD *)(v120 + 56) = 0u;
    *(_QWORD *)&v212 = v120 + 24;
    *((_QWORD *)&v212 + 1) = v120;
    *(_OWORD *)&v227[16] = v212;
    v212 = 0u;
    v207 = 0;
    v208 = 0u;
    *(_QWORD *)&v226 = &v207;
    BYTE8(v226) = 0;
    v121 = (__int128 *)operator new(0x20uLL);
    v122 = 0;
    v123 = 0;
    v207 = v121;
    *(_QWORD *)&v208 = v121;
    *((_QWORD *)&v208 + 1) = v121 + 2;
    do
    {
      v124 = v122;
      v125 = *(_OWORD *)&v227[16 * v123];
      *v121 = v125;
      if (*((_QWORD *)&v125 + 1))
      {
        v126 = (unint64_t *)(*((_QWORD *)&v125 + 1) + 8);
        do
          v127 = __ldxr(v126);
        while (__stxr(v127 + 1, v126));
      }
      ++v121;
      v122 = 1;
      v123 = 1;
    }
    while ((v124 & 1) == 0);
    *(_QWORD *)&v208 = v121;
    mlcore::CreateAndPredicate(&v207, &v216);
    *(_QWORD *)&v226 = &v207;
    std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v226);
    for (m = 16; m != -16; m -= 16)
      std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)&v227[m]);
    v129 = (std::__shared_weak_count *)*((_QWORD *)&v212 + 1);
    if (*((_QWORD *)&v212 + 1))
    {
      v130 = (unint64_t *)(*((_QWORD *)&v212 + 1) + 8);
      do
        v131 = __ldaxr(v130);
      while (__stlxr(v131 - 1, v130));
      if (!v131)
      {
        ((void (*)(std::__shared_weak_count *))v129->__on_zero_shared)(v129);
        std::__shared_weak_count::__release_weak(v129);
      }
    }
    mlcore::CreateNotPredicate(&v216, &v212);
    v132 = v212;
    v226 = v212;
    v212 = 0uLL;
    v133 = v217.i64[1];
    if (v217.i64[1] >= v218[0])
    {
      v201 = v132;
      v135 = (v217.i64[1] - v217.i64[0]) >> 4;
      if ((unint64_t)(v135 + 1) >> 60)
        std::vector<std::string>::__throw_length_error[abi:ne180100]();
      v136 = (v218[0] - v217.i64[0]) >> 3;
      if (v136 <= v135 + 1)
        v136 = v135 + 1;
      if (v218[0] - v217.i64[0] >= 0x7FFFFFFFFFFFFFF0uLL)
        v137 = 0xFFFFFFFFFFFFFFFLL;
      else
        v137 = v136;
      v228 = v218;
      v138 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<mediaplatform::DatabaseParameterBase>>>(v137);
      v140 = &v138[16 * v135];
      *(_OWORD *)v140 = v201;
      v226 = 0uLL;
      v141 = (_QWORD *)v217.i64[1];
      v142 = (_QWORD *)v217.i64[0];
      if (v217.i64[1] == v217.i64[0])
      {
        v145 = vdupq_n_s64(v217.u64[1]);
        v143 = &v138[16 * v135];
      }
      else
      {
        v143 = &v138[16 * v135];
        do
        {
          v144 = *((_OWORD *)v141 - 1);
          v141 -= 2;
          *((_OWORD *)v143 - 1) = v144;
          v143 -= 16;
          *v141 = 0;
          v141[1] = 0;
        }
        while (v141 != v142);
        v145 = v217;
      }
      v134 = v140 + 16;
      v217.i64[0] = (uint64_t)v143;
      v217.i64[1] = (uint64_t)(v140 + 16);
      *(int64x2_t *)&v227[8] = v145;
      v146 = v218[0];
      v218[0] = &v138[16 * v139];
      *(_QWORD *)&v227[24] = v146;
      *(_QWORD *)v227 = v145.i64[0];
      std::__split_buffer<std::shared_ptr<mediaplatform::SQLExpression const>>::~__split_buffer((uint64_t)v227);
    }
    else
    {
      *(_OWORD *)v217.i64[1] = v132;
      v134 = (_OWORD *)(v133 + 16);
      v226 = 0uLL;
    }
    v217.i64[1] = (uint64_t)v134;
    v147 = (std::__shared_weak_count *)*((_QWORD *)&v216 + 1);
    if (*((_QWORD *)&v216 + 1))
    {
      v148 = (unint64_t *)(*((_QWORD *)&v216 + 1) + 8);
      do
        v149 = __ldaxr(v148);
      while (__stlxr(v149 - 1, v148));
      if (!v149)
      {
        ((void (*)(std::__shared_weak_count *))v147->__on_zero_shared)(v147);
        std::__shared_weak_count::__release_weak(v147);
      }
    }
    v150 = (std::__shared_weak_count *)*((_QWORD *)&v219 + 1);
    if (*((_QWORD *)&v219 + 1))
    {
      v151 = (unint64_t *)(*((_QWORD *)&v219 + 1) + 8);
      do
        v152 = __ldaxr(v151);
      while (__stlxr(v152 - 1, v151));
      if (!v152)
      {
        ((void (*)(std::__shared_weak_count *))v150->__on_zero_shared)(v150);
        std::__shared_weak_count::__release_weak(v150);
      }
    }
  }
  v153 = *((_DWORD *)this + 2);
  if (v153 <= 999)
  {
    v154 = (char *)operator new(0x48uLL);
    *(_OWORD *)(v154 + 8) = 0u;
    v155 = (unint64_t *)(v154 + 8);
    *(_QWORD *)v154 = &off_24C33CE50;
    *((_QWORD *)v154 + 4) = Foreign;
    *((_QWORD *)v154 + 5) = 0x700000000;
    *((_QWORD *)v154 + 3) = &unk_24C339C50;
    *((_DWORD *)v154 + 12) = 512;
    *(_OWORD *)(v154 + 56) = 0u;
    *(_QWORD *)&v219 = v154 + 24;
    *((_QWORD *)&v219 + 1) = v154;
    *(_QWORD *)v227 = v154 + 24;
    *(_QWORD *)&v227[8] = v154;
    do
      v156 = __ldxr(v155);
    while (__stxr(v156 + 1, v155));
    v157 = (char *)operator new(0x48uLL);
    *(_OWORD *)(v157 + 8) = 0u;
    *(_QWORD *)v157 = &off_24C33CE50;
    *((_QWORD *)v157 + 4) = v8;
    *((_QWORD *)v157 + 5) = 0x200000000;
    *((_QWORD *)v157 + 3) = &unk_24C339C50;
    *((_DWORD *)v157 + 12) = v153;
    *(_OWORD *)(v157 + 56) = 0u;
    *(_QWORD *)&v212 = v157 + 24;
    *((_QWORD *)&v212 + 1) = v157;
    *(_OWORD *)&v227[16] = v212;
    v212 = 0u;
    v205 = 0;
    v206 = 0u;
    *(_QWORD *)&v226 = &v205;
    BYTE8(v226) = 0;
    v158 = (__int128 *)operator new(0x20uLL);
    v159 = 0;
    v160 = 0;
    v205 = v158;
    *(_QWORD *)&v206 = v158;
    *((_QWORD *)&v206 + 1) = v158 + 2;
    do
    {
      v161 = v159;
      v162 = *(_OWORD *)&v227[16 * v160];
      *v158 = v162;
      if (*((_QWORD *)&v162 + 1))
      {
        v163 = (unint64_t *)(*((_QWORD *)&v162 + 1) + 8);
        do
          v164 = __ldxr(v163);
        while (__stxr(v164 + 1, v163));
      }
      ++v158;
      v159 = 1;
      v160 = 1;
    }
    while ((v161 & 1) == 0);
    *(_QWORD *)&v206 = v158;
    mlcore::CreateAndPredicate(&v205, &v216);
    *(_QWORD *)&v226 = &v205;
    std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v226);
    for (n = 16; n != -16; n -= 16)
      std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)&v227[n]);
    v166 = (std::__shared_weak_count *)*((_QWORD *)&v212 + 1);
    if (*((_QWORD *)&v212 + 1))
    {
      v167 = (unint64_t *)(*((_QWORD *)&v212 + 1) + 8);
      do
        v168 = __ldaxr(v167);
      while (__stlxr(v168 - 1, v167));
      if (!v168)
      {
        ((void (*)(std::__shared_weak_count *))v166->__on_zero_shared)(v166);
        std::__shared_weak_count::__release_weak(v166);
      }
    }
    mlcore::CreateNotPredicate(&v216, &v212);
    v169 = v212;
    v226 = v212;
    v212 = 0uLL;
    v170 = v217.i64[1];
    if (v217.i64[1] >= v218[0])
    {
      v202 = v169;
      v172 = (v217.i64[1] - v217.i64[0]) >> 4;
      if ((unint64_t)(v172 + 1) >> 60)
        std::vector<std::string>::__throw_length_error[abi:ne180100]();
      v173 = (v218[0] - v217.i64[0]) >> 3;
      if (v173 <= v172 + 1)
        v173 = v172 + 1;
      if (v218[0] - v217.i64[0] >= 0x7FFFFFFFFFFFFFF0uLL)
        v174 = 0xFFFFFFFFFFFFFFFLL;
      else
        v174 = v173;
      v228 = v218;
      v175 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<mediaplatform::DatabaseParameterBase>>>(v174);
      v177 = &v175[16 * v172];
      *(_OWORD *)v177 = v202;
      v226 = 0uLL;
      v178 = (_QWORD *)v217.i64[1];
      v179 = (_QWORD *)v217.i64[0];
      if (v217.i64[1] == v217.i64[0])
      {
        v182 = vdupq_n_s64(v217.u64[1]);
        v180 = &v175[16 * v172];
      }
      else
      {
        v180 = &v175[16 * v172];
        do
        {
          v181 = *((_OWORD *)v178 - 1);
          v178 -= 2;
          *((_OWORD *)v180 - 1) = v181;
          v180 -= 16;
          *v178 = 0;
          v178[1] = 0;
        }
        while (v178 != v179);
        v182 = v217;
      }
      v171 = v177 + 16;
      v217.i64[0] = (uint64_t)v180;
      v217.i64[1] = (uint64_t)(v177 + 16);
      *(int64x2_t *)&v227[8] = v182;
      v183 = v218[0];
      v218[0] = &v175[16 * v176];
      *(_QWORD *)&v227[24] = v183;
      *(_QWORD *)v227 = v182.i64[0];
      std::__split_buffer<std::shared_ptr<mediaplatform::SQLExpression const>>::~__split_buffer((uint64_t)v227);
    }
    else
    {
      *(_OWORD *)v217.i64[1] = v169;
      v171 = (_OWORD *)(v170 + 16);
      v226 = 0uLL;
    }
    v217.i64[1] = (uint64_t)v171;
    v184 = (std::__shared_weak_count *)*((_QWORD *)&v216 + 1);
    if (*((_QWORD *)&v216 + 1))
    {
      v185 = (unint64_t *)(*((_QWORD *)&v216 + 1) + 8);
      do
        v186 = __ldaxr(v185);
      while (__stlxr(v186 - 1, v185));
      if (!v186)
      {
        ((void (*)(std::__shared_weak_count *))v184->__on_zero_shared)(v184);
        std::__shared_weak_count::__release_weak(v184);
      }
    }
    v187 = (std::__shared_weak_count *)*((_QWORD *)&v219 + 1);
    if (*((_QWORD *)&v219 + 1))
    {
      v188 = (unint64_t *)(*((_QWORD *)&v219 + 1) + 8);
      do
        v189 = __ldaxr(v188);
      while (__stlxr(v189 - 1, v188));
      if (!v189)
      {
        ((void (*)(std::__shared_weak_count *))v187->__on_zero_shared)(v187);
        std::__shared_weak_count::__release_weak(v187);
      }
    }
  }
  v190 = v217.i64[0];
  v191 = (v217.i64[1] - v217.i64[0]) >> 4;
  if (v191 == 1)
  {
    *a3 = *(_QWORD *)v217.i64[0];
    v192 = *(_QWORD *)(v190 + 8);
    a3[1] = v192;
    if (v192)
    {
      v193 = (unint64_t *)(v192 + 8);
      do
        v194 = __ldxr(v193);
      while (__stxr(v194 + 1, v193));
    }
  }
  else if (v191)
  {
    memset(v204, 0, sizeof(v204));
    std::vector<std::shared_ptr<mlcore::Predicate>>::__init_with_size[abi:ne180100]<std::shared_ptr<mlcore::Predicate>*,std::shared_ptr<mlcore::Predicate>*>((char *)v204, v217.i64[0], (_QWORD *)v217.i64[1], v191);
    mlcore::CreateAndPredicate(v204, a3);
    *(_QWORD *)v227 = v204;
    std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__destroy_vector::operator()[abi:ne180100]((void ***)v227);
  }
  else
  {
    *a3 = 0;
    a3[1] = 0;
  }
  *(_QWORD *)v227 = &v217;
  std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__destroy_vector::operator()[abi:ne180100]((void ***)v227);
  v195 = (std::__shared_weak_count *)*((_QWORD *)&v222 + 1);
  if (*((_QWORD *)&v222 + 1))
  {
    v196 = (unint64_t *)(*((_QWORD *)&v222 + 1) + 8);
    do
      v197 = __ldaxr(v196);
    while (__stlxr(v197 - 1, v196));
    if (!v197)
    {
      ((void (*)(std::__shared_weak_count *))v195->__on_zero_shared)(v195);
      std::__shared_weak_count::__release_weak(v195);
    }
  }
}

void sub_20A6507CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  uint64_t v33;
  uint64_t v34;

  *(_QWORD *)(v34 - 160) = v33;
  std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v34 - 160));
  *(_QWORD *)(v34 - 176) = &a33;
  std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v34 - 176));
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100](v34 - 240);
  _Unwind_Resume(a1);
}

void sub_20A6509A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void **a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
  uint64_t v37;
  uint64_t i;

  std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__destroy_vector::operator()[abi:ne180100](&a33);
  for (i = 16; i != -16; i -= 16)
    std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100](v37 - 160 + i);
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)&a37);
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100](v37 - 176);
  JUMPOUT(0x20A650998);
}

void sub_20A6509E8()
{
  uint64_t v0;

  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100](v0 - 176);
  JUMPOUT(0x20A650994);
}

void sub_20A6509FC()
{
  JUMPOUT(0x20A650998);
}

uint64_t mlcore::ItemPropertyMediaType(mlcore *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&mlcore::ItemPropertyMediaType(void)::once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&mlcore::ItemPropertyMediaType(void)::once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyMediaType(void)::$_0 &&>>);
  }
  return mlcore::ItemPropertyMediaType(void)::property;
}

uint64_t mlcore::ItemPropertyContentRatingLevel(mlcore *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&mlcore::ItemPropertyContentRatingLevel(void)::once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&mlcore::ItemPropertyContentRatingLevel(void)::once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyContentRatingLevel(void)::$_0 &&>>);
  }
  return mlcore::ItemPropertyContentRatingLevel(void)::property;
}

uint64_t mlcore::ItemPropertyContentRating(mlcore *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&mlcore::ItemPropertyContentRating(void)::once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&mlcore::ItemPropertyContentRating(void)::once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyContentRating(void)::$_0 &&>>);
  }
  return mlcore::ItemPropertyContentRating(void)::property;
}

uint64_t mlcore::PlaylistItemPropertyItemPersistentID(mlcore *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&mlcore::PlaylistItemPropertyItemPersistentID(void)::once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&mlcore::PlaylistItemPropertyItemPersistentID(void)::once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::PlaylistItemPropertyItemPersistentID(void)::$_0 &&>>);
  }
  return mlcore::PlaylistItemPropertyItemPersistentID(void)::property;
}

void mlcore::RangeQuery::_SQLSelectStatement(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  uint64_t v22[2];

  v5 = (std::__shared_weak_count *)a2[1];
  v22[0] = *a2;
  v22[1] = (uint64_t)v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  mlcore::Query::_SQLSelectStatement(a1, v22, a3);
  if (v5)
  {
    v8 = (unint64_t *)&v5->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  v10 = *a3;
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)a1 + 104))(&v20, a1);
  std::shared_ptr<mlcore::Predicate>::operator=[abi:ne180100]((_QWORD *)(v10 + 40), v20, (uint64_t)v21);
  v11 = v21;
  if (v21)
  {
    v12 = (unint64_t *)&v21->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  v14 = *a3;
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)a1 + 112))(&v18, a1);
  std::shared_ptr<mlcore::Predicate>::operator=[abi:ne180100]((_QWORD *)(v14 + 24), v18, (uint64_t)v19);
  v15 = v19;
  if (v19)
  {
    v16 = (unint64_t *)&v19->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
}

void sub_20A650CC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void mlcore::RangeQuery::_SQLOffsetExpression(mlcore::RangeQuery *this@<X0>, uint64_t a2@<X8>)
{
  __int128 v3;

  if (*((_QWORD *)this + 4))
  {
    std::allocate_shared[abi:ne180100]<mediaplatform::SQLLiteralValue<unsigned long>,std::allocator<mediaplatform::SQLLiteralValue<unsigned long>>,unsigned long &,void>(&v3, (uint64_t *)this + 4);
    *(_OWORD *)a2 = v3;
  }
  else
  {
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
  }
}

void mlcore::RangeQuery::_SQLLimitExpression(mlcore::RangeQuery *this@<X0>, uint64_t a2@<X8>)
{
  __int128 v3;

  if (*((_QWORD *)this + 5))
  {
    std::allocate_shared[abi:ne180100]<mediaplatform::SQLLiteralValue<unsigned long>,std::allocator<mediaplatform::SQLLiteralValue<unsigned long>>,unsigned long &,void>(&v3, (uint64_t *)this + 5);
    *(_OWORD *)a2 = v3;
  }
  else
  {
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
  }
}

void mlcore::PredicateProperty::_SQLExpression(uint64_t a1@<X0>, uint64_t *a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  char *v9;
  unint64_t *v10;
  unint64_t v11;
  __int128 v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  __int128 v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  __int128 v22;
  __int128 v23;

  v5 = *(_QWORD *)(a1 + 64);
  v6 = (std::__shared_weak_count *)a2[1];
  v20 = *a2;
  v21 = v6;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t *))(*(_QWORD *)v5 + 64))(&v22, v5, &v20);
  v9 = (char *)operator new(0x48uLL);
  *(_OWORD *)(v9 + 8) = 0u;
  *(_QWORD *)v9 = &off_24C33BE20;
  v19 = v22;
  v22 = 0u;
  v23 = v19;
  mediaplatform::SQLAliasExpression::SQLAliasExpression((std::string *)v9 + 1, (std::string::size_type *)&v23, (__int128 *)(a1 + 40));
  if (*((_QWORD *)&v19 + 1))
  {
    v10 = (unint64_t *)(*((_QWORD *)&v19 + 1) + 8);
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v19 + 1) + 16))(*((_QWORD *)&v19 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v19 + 1));
    }
  }
  *(_QWORD *)&v12 = v9 + 24;
  *((_QWORD *)&v12 + 1) = v9;
  *a3 = v12;
  v13 = (std::__shared_weak_count *)*((_QWORD *)&v22 + 1);
  if (*((_QWORD *)&v22 + 1))
  {
    v14 = (unint64_t *)(*((_QWORD *)&v22 + 1) + 8);
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  v16 = v21;
  if (v21)
  {
    v17 = (unint64_t *)&v21->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
}

void sub_20A650ED8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  std::__shared_weak_count *v3;
  void *v5;
  uint64_t v6;
  va_list va;
  uint64_t v8;
  uint64_t v9;
  va_list va1;
  uint64_t v11;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v6 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v9 = va_arg(va2, _QWORD);
  v11 = va_arg(va2, _QWORD);
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)va2);
  std::__shared_weak_count::~__shared_weak_count(v3);
  operator delete(v5);
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t mediaplatform::DatabaseResult<mediaplatform::DatabaseResultList>::enumerateRows(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  int v7;
  __int128 v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  unint64_t *p_shared_owners;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  int v33;
  uint64_t result;
  std::__shared_weak_count *v35;
  int v36;
  __int128 v37;
  char v38;
  int v39;
  __int128 v40;
  char *v41;
  int v42;
  __int128 v43;
  _QWORD v44[3];
  _QWORD *v45;
  _BYTE v46[24];
  _BYTE *v47;
  uint64_t v48;

  v48 = *MEMORY[0x24BDAC8D0];
  v38 = 0;
  while (1)
  {
    v4 = *a1;
    v5 = sqlite3_step(*(sqlite3_stmt **)(*a1 + 24));
    mediaplatform::DatabaseStatement::_checkSQLiteResult(v4, v5);
    *(_DWORD *)(v4 + 56) = v5;
    v6 = *a1;
    v7 = *(_DWORD *)(*a1 + 56);
    if (v7 != 100)
      break;
    mediaplatform::DatabaseStatement::columnValue<mediaplatform::DatabaseResultList>(v6, 0, (uint64_t)&v39);
    v36 = v39;
    v8 = v40;
    v40 = 0uLL;
    v37 = v8;
    if (*((_QWORD *)&v8 + 1))
    {
      v9 = (unint64_t *)(*((_QWORD *)&v8 + 1) + 8);
      do
        v10 = __ldxr(v9);
      while (__stxr(v10 + 1, v9));
      v35 = (std::__shared_weak_count *)*((_QWORD *)&v8 + 1);
      do
        v11 = __ldxr(v9);
      while (__stxr(v11 + 1, v9));
    }
    else
    {
      v35 = 0;
    }
    std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100]((uint64_t)v44, a2);
    v39 = v36;
    v40 = v37;
    if (*((_QWORD *)&v37 + 1))
    {
      v12 = (unint64_t *)(*((_QWORD *)&v37 + 1) + 8);
      do
        v13 = __ldxr(v12);
      while (__stxr(v13 + 1, v12));
    }
    v41 = &v38;
    v14 = (uint64_t)v45;
    if (!v45)
      goto LABEL_16;
    if (v45 != v44)
    {
      v14 = (*(uint64_t (**)(_QWORD *))(*v45 + 16))(v45);
LABEL_16:
      v47 = (_BYTE *)v14;
      goto LABEL_18;
    }
    v47 = v46;
    (*(void (**)(_QWORD *, _BYTE *))(v44[0] + 24))(v44, v46);
LABEL_18:
    v42 = v36;
    v43 = v37;
    if (*((_QWORD *)&v37 + 1))
    {
      v15 = (unint64_t *)(*((_QWORD *)&v37 + 1) + 8);
      do
        v16 = __ldxr(v15);
      while (__stxr(v16 + 1, v15));
    }
    if (!v47)
      std::__throw_bad_function_call[abi:ne180100]();
    (*(void (**)(_BYTE *, int *, char *))(*(_QWORD *)v47 + 48))(v47, &v42, &v38);
    v17 = (std::__shared_weak_count *)*((_QWORD *)&v43 + 1);
    if (*((_QWORD *)&v43 + 1))
    {
      v18 = (unint64_t *)(*((_QWORD *)&v43 + 1) + 8);
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v19 - 1, v18));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
    }
    v20 = v47;
    if (v47 == v46)
    {
      v20 = v46;
      v21 = 4;
      goto LABEL_31;
    }
    if (v47)
    {
      v21 = 5;
LABEL_31:
      (*(void (**)(void))(*v20 + 8 * v21))();
    }
    v22 = (std::__shared_weak_count *)*((_QWORD *)&v40 + 1);
    if (*((_QWORD *)&v40 + 1))
    {
      v23 = (unint64_t *)(*((_QWORD *)&v40 + 1) + 8);
      do
        v24 = __ldaxr(v23);
      while (__stlxr(v24 - 1, v23));
      if (!v24)
      {
        ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
        std::__shared_weak_count::__release_weak(v22);
      }
    }
    v25 = v45;
    if (v45 == v44)
    {
      v25 = v44;
      v26 = 4;
    }
    else
    {
      if (!v45)
        goto LABEL_42;
      v26 = 5;
    }
    (*(void (**)(void))(*v25 + 8 * v26))();
LABEL_42:
    if (v35)
    {
      p_shared_owners = (unint64_t *)&v35->__shared_owners_;
      do
        v28 = __ldaxr(p_shared_owners);
      while (__stlxr(v28 - 1, p_shared_owners));
      if (!v28)
      {
        ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
        std::__shared_weak_count::__release_weak(v35);
      }
    }
    if (*((_QWORD *)&v37 + 1))
    {
      v29 = (unint64_t *)(*((_QWORD *)&v37 + 1) + 8);
      do
        v30 = __ldaxr(v29);
      while (__stlxr(v30 - 1, v29));
      if (!v30)
      {
        (*(void (**)(_QWORD))(**((_QWORD **)&v37 + 1) + 16))(*((_QWORD *)&v37 + 1));
        std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v37 + 1));
      }
    }
    if (*((_QWORD *)&v37 + 1))
    {
      v31 = (unint64_t *)(*((_QWORD *)&v37 + 1) + 8);
      do
        v32 = __ldaxr(v31);
      while (__stlxr(v32 - 1, v31));
      if (!v32)
      {
        (*(void (**)(_QWORD))(**((_QWORD **)&v37 + 1) + 16))(*((_QWORD *)&v37 + 1));
        std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v37 + 1));
      }
    }
    if (v38)
    {
      v6 = *a1;
      goto LABEL_61;
    }
  }
  if (v7 == -1)
    __assert_rtn("hasColumnValueData", "DatabaseStatement.cpp", 102, "_lastStepResult != -1");
  v38 = 1;
LABEL_61:
  v33 = sqlite3_reset(*(sqlite3_stmt **)(v6 + 24));
  result = mediaplatform::DatabaseStatement::_checkSQLiteResult(v6, v33);
  *(_DWORD *)(v6 + 56) = -1;
  return result;
}

void sub_20A651400(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  void *v10;
  _Unwind_Exception *v11;

  __cxa_free_exception(v10);
  __cxa_end_catch();
  _Unwind_Resume(v11);
}

void sub_20A651420(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

void sub_20A651428(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;

  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100](v13);
  v15 = *(_QWORD **)(v14 - 136);
  if (v15 == (_QWORD *)(v14 - 160))
  {
    v16 = 4;
    v15 = (_QWORD *)(v14 - 160);
  }
  else
  {
    if (!v15)
    {
LABEL_6:
      std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100](v12);
      std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100](v11);
      std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100](a11);
      JUMPOUT(0x20A6514D0);
    }
    v16 = 5;
  }
  (*(void (**)(void))(*v15 + 8 * v16))();
  goto LABEL_6;
}

__n128 std::__function::__func<mlcore::EntityQuery::_perform(std::shared_ptr<mlcore::Transaction>,std::function<void ()(std::shared_ptr<mlcore::QueryResult>)>)::$_0,std::allocator<mlcore::EntityQuery::_perform(std::shared_ptr<mlcore::Transaction>,std::function<void ()(std::shared_ptr<mlcore::QueryResult>)>)::$_0>,void ()(mediaplatform::DatabaseResultList,BOOL &)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x68uLL);
  *(_QWORD *)v2 = &off_24C33AD78;
  *(_OWORD *)(v2 + 40) = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(v2 + 56) = *(_OWORD *)(a1 + 56);
  *(_OWORD *)(v2 + 72) = *(_OWORD *)(a1 + 72);
  *(_OWORD *)(v2 + 88) = *(_OWORD *)(a1 + 88);
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

uint64_t std::__shared_ptr_emplace<mediaplatform::SQLJoinClause>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

__n128 std::__function::__func<mlcore::PropertiesQuery::_perform(std::shared_ptr<mlcore::Transaction>,std::function<void ()(std::shared_ptr<mlcore::QueryResult>)>)::$_0,std::allocator<mlcore::PropertiesQuery::_perform(std::shared_ptr<mlcore::Transaction>,std::function<void ()(std::shared_ptr<mlcore::QueryResult>)>)::$_0>,void ()(mediaplatform::DatabaseResultList,BOOL &)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24C33B2A0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__shared_ptr_emplace<mlcore::AndPredicate>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void mlcore::AndPredicate::~AndPredicate(mlcore::AndPredicate *this)
{
  void **v1;

  *(_QWORD *)this = off_24C339690;
  v1 = (void **)((char *)this + 8);
  std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__destroy_vector::operator()[abi:ne180100](&v1);
}

{
  void **v1;

  *(_QWORD *)this = off_24C339690;
  v1 = (void **)((char *)this + 8);
  std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__destroy_vector::operator()[abi:ne180100](&v1);
  JUMPOUT(0x20BD27AFCLL);
}

_QWORD *mlcore::ComparisonPredicate<int>::~ComparisonPredicate(_QWORD *a1)
{
  *a1 = &unk_24C339C50;
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 4));
  return a1;
}

uint64_t std::__shared_ptr_emplace<mlcore::ComparisonPredicate<int>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__function::__func<mlcore::PropertiesQuery::_perform(std::shared_ptr<mlcore::Transaction>,std::function<void ()(std::shared_ptr<mlcore::QueryResult>)>)::$_0,std::allocator<mlcore::PropertiesQuery::_perform(std::shared_ptr<mlcore::Transaction>,std::function<void ()(std::shared_ptr<mlcore::QueryResult>)>)::$_0>,void ()(mediaplatform::DatabaseResultList,BOOL &)>::operator()(uint64_t a1, int *a2)
{
  std::__shared_weak_count *v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t *v8;
  _QWORD *v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  int v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  _QWORD v17[27];

  v14 = *a2;
  v3 = (std::__shared_weak_count *)*((_QWORD *)a2 + 2);
  v15 = *((_QWORD *)a2 + 1);
  v16 = v3;
  *((_QWORD *)a2 + 1) = 0;
  *((_QWORD *)a2 + 2) = 0;
  mlcore::PropertyCacheBase<long long,int,double,std::string,mediaplatform::Data>::PropertyCacheBase((uint64_t)v17, *(_QWORD *)(a1 + 8));
  v17[0] = &off_24C3371C0;
  v17[26] = &unk_24C3371E8;
  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD **)v4;
  v6 = *(_QWORD **)(v4 + 8);
  if (*(_QWORD **)v4 != v6)
  {
    v7 = 0;
    do
    {
      (*(void (**)(_QWORD, _QWORD *, int *, uint64_t))(*(_QWORD *)*v5 + 56))(*v5, v17, &v14, v7);
      v7 = (v7 + 1);
      ++v5;
    }
    while (v5 != v6);
  }
  v8 = *(uint64_t **)(a1 + 16);
  v9 = (_QWORD *)v8[1];
  if ((unint64_t)v9 >= v8[2])
  {
    v10 = std::vector<mlcore::PropertyCache>::__push_back_slow_path<mlcore::PropertyCache const&>(v8, (uint64_t)v17);
  }
  else
  {
    mlcore::PropertyCacheBase<long long,int,double,std::string,mediaplatform::Data>::PropertyCacheBase(v8[1], (uint64_t)v17);
    *v9 = &off_24C3371C0;
    v9[26] = &unk_24C3371E8;
    v10 = (uint64_t)(v9 + 27);
    v8[1] = (uint64_t)(v9 + 27);
  }
  v8[1] = v10;
  mlcore::PropertyCacheBase<long long,int,double,std::string,mediaplatform::Data>::~PropertyCacheBase(v17);
  v11 = v16;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
}

void sub_20A65172C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, std::__shared_weak_count *a4, ...)
{
  unint64_t *p_shared_owners;
  unint64_t v6;
  va_list va;

  va_start(va, a4);
  mlcore::PropertyCacheBase<long long,int,double,std::string,mediaplatform::Data>::~PropertyCacheBase((uint64_t *)va);
  if (a4)
  {
    p_shared_owners = (unint64_t *)&a4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))a4->__on_zero_shared)(a4);
      std::__shared_weak_count::__release_weak(a4);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<mlcore::UnaryPredicate<int>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t std::__shared_ptr_emplace<mediaplatform::SQLRenderingContext>::__on_zero_shared(uint64_t a1)
{
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(a1 + 72);
  return std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(a1 + 32);
}

uint64_t std::__shared_ptr_emplace<mediaplatform::DatabaseParameter<int>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void mlcore::SQLRenderer::pushRenderingContext(int64x2_t *this@<X0>, _QWORD *a2@<X8>)
{
  char *v4;
  char *v5;
  char *v6;
  void *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  BOOL v11;
  void *v12;
  void *v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char *v28;
  uint64_t v29;
  char *v30;
  __int128 v31;
  unint64_t *v32;
  unint64_t v33;
  _QWORD *v34;
  _QWORD *v35;
  char *v36;
  __int128 v37;
  int64x2_t v38;
  uint64_t v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  void *v42[2];
  void *v43;
  uint64_t v44;
  int v45;
  void *__p;
  void *v47[2];
  uint64_t v48;
  int64x2_t *v49;

  (*(void (**)(uint64_t *__return_ptr))(this->i64[0] + 8))(&v40);
  std::unordered_set<std::string>::unordered_set((uint64_t)v42, v40 + 48);
  v4 = (char *)operator new(0x70uLL);
  v5 = v4;
  *(_OWORD *)(v4 + 8) = 0u;
  *(_QWORD *)v4 = &off_24C33BF70;
  v6 = v4 + 24;
  v7 = v42[0];
  v8 = (unint64_t)v42[1];
  *(_OWORD *)v42 = 0u;
  __p = v7;
  v47[0] = (void *)v8;
  v47[1] = v43;
  v48 = v44;
  LODWORD(v49) = v45;
  if (v44)
  {
    v9 = *((_QWORD *)v43 + 1);
    if ((v8 & (v8 - 1)) != 0)
    {
      v11 = v9 >= v8;
      v10 = v9 % v8;
      if (!v11)
        v10 = *((_QWORD *)v43 + 1);
    }
    else
    {
      v10 = (v8 - 1) & v9;
    }
    *((_QWORD *)v7 + v10) = &v47[1];
    v43 = 0;
    v44 = 0;
  }
  mediaplatform::SQLRenderingContext::SQLRenderingContext((uint64_t)(v4 + 24), (uint64_t)&__p);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__deallocate_node((void **)v47[1]);
  v12 = __p;
  __p = 0;
  if (v12)
    operator delete(v12);
  *a2 = v6;
  a2[1] = v5;
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__deallocate_node((void **)v43);
  v13 = v42[0];
  v42[0] = 0;
  if (v13)
    operator delete(v13);
  v14 = v41;
  if (v41)
  {
    p_shared_owners = (unint64_t *)&v41->__shared_owners_;
    do
      v16 = __ldaxr(p_shared_owners);
    while (__stlxr(v16 - 1, p_shared_owners));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v17 = this[5].u64[0];
  v18 = (_QWORD *)this[4].i64[1];
  if ((unint64_t)v18 >= v17)
  {
    v23 = this[4].i64[0];
    v24 = ((uint64_t)v18 - v23) >> 4;
    v25 = v24 + 1;
    if ((unint64_t)(v24 + 1) >> 60)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v26 = v17 - v23;
    if (v26 >> 3 > v25)
      v25 = v26 >> 3;
    if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFF0)
      v27 = 0xFFFFFFFFFFFFFFFLL;
    else
      v27 = v25;
    v49 = this + 5;
    v28 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<mediaplatform::DatabaseParameterBase>>>(v27);
    v30 = &v28[16 * v24];
    v31 = *(_OWORD *)a2;
    *(_OWORD *)v30 = *(_OWORD *)a2;
    if (*((_QWORD *)&v31 + 1))
    {
      v32 = (unint64_t *)(*((_QWORD *)&v31 + 1) + 8);
      do
        v33 = __ldxr(v32);
      while (__stxr(v33 + 1, v32));
    }
    v35 = (_QWORD *)this[4].i64[0];
    v34 = (_QWORD *)this[4].i64[1];
    if (v34 == v35)
    {
      v38 = vdupq_n_s64((unint64_t)v34);
      v36 = &v28[16 * v24];
    }
    else
    {
      v36 = &v28[16 * v24];
      do
      {
        v37 = *((_OWORD *)v34 - 1);
        v34 -= 2;
        *((_OWORD *)v36 - 1) = v37;
        v36 -= 16;
        *v34 = 0;
        v34[1] = 0;
      }
      while (v34 != v35);
      v38 = this[4];
    }
    v22 = v30 + 16;
    this[4].i64[0] = (uint64_t)v36;
    this[4].i64[1] = (uint64_t)(v30 + 16);
    *(int64x2_t *)v47 = v38;
    v39 = this[5].i64[0];
    this[5].i64[0] = (uint64_t)&v28[16 * v29];
    v48 = v39;
    __p = (void *)v38.i64[0];
    std::__split_buffer<std::shared_ptr<mediaplatform::SQLExpression const>>::~__split_buffer((uint64_t)&__p);
  }
  else
  {
    *v18 = *a2;
    v19 = a2[1];
    v18[1] = v19;
    if (v19)
    {
      v20 = (unint64_t *)(v19 + 8);
      do
        v21 = __ldxr(v20);
      while (__stxr(v21 + 1, v20));
    }
    v22 = v18 + 2;
  }
  this[4].i64[1] = (uint64_t)v22;
}

void sub_20A651A3C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(uint64_t a1)
{
  void *v2;

  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__deallocate_node(*(void ***)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__deallocate_node(void **__p)
{
  void **v1;
  void **v2;

  if (__p)
  {
    v1 = __p;
    do
    {
      v2 = (void **)*v1;
      if (*((char *)v1 + 39) < 0)
        operator delete(v1[2]);
      operator delete(v1);
      v1 = v2;
    }
    while (v2);
  }
}

uint64_t mlcore::SQLRenderer::currentSQLRenderingContext@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  v2 = *(_QWORD *)(this + 72);
  v4 = *(_QWORD *)(v2 - 16);
  v3 = *(_QWORD *)(v2 - 8);
  *a2 = v4;
  a2[1] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return this;
}

uint64_t std::__split_buffer<std::shared_ptr<mediaplatform::SQLExpression const>>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 16;
    std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100](i - 16);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

_QWORD *mlcore::PredicateProperty::insertIntoCacheFromResultList(unint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  int v6;
  _QWORD *result;
  unint64_t v8;

  v6 = sqlite3_column_int(*(sqlite3_stmt **)(*(_QWORD *)(a3 + 8) + 24), *(_DWORD *)a3 + a4);
  v8 = a1;
  result = std::__hash_table<std::__hash_value_type<mlcore::ModelProperty<int> *,int>,std::__unordered_map_hasher<mlcore::ModelProperty<int> *,std::__hash_value_type<mlcore::ModelProperty<int> *,int>,std::hash<mlcore::ModelProperty<int> *>,std::equal_to<mlcore::ModelProperty<int> *>,true>,std::__unordered_map_equal<mlcore::ModelProperty<int> *,std::__hash_value_type<mlcore::ModelProperty<int> *,int>,std::equal_to<mlcore::ModelProperty<int> *>,std::hash<mlcore::ModelProperty<int> *>,true>,std::allocator<std::__hash_value_type<mlcore::ModelProperty<int> *,int>>>::__emplace_unique_key_args<mlcore::ModelProperty<int> *,std::piecewise_construct_t const&,std::tuple<mlcore::ModelProperty<int> * const&>,std::tuple<>>(a2 + 128, a1, &v8);
  *((_DWORD *)result + 6) = v6;
  return result;
}

uint64_t *std::vector<mlcore::PropertyCache>::__swap_out_circular_buffer(uint64_t *result, _QWORD *a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v3 = result;
  v4 = 0;
  v6 = *result;
  v5 = result[1];
  v7 = a2[1];
  while (1)
  {
    v8 = v7 + v4;
    if (v5 + v4 == v6)
      break;
    result = (uint64_t *)mlcore::PropertyCacheBase<long long,int,double,std::string,mediaplatform::Data>::PropertyCacheBase(v8 - 216, v5 + v4 - 216);
    *result = (uint64_t)&off_24C3371C0;
    *(_QWORD *)(v7 + v4 - 8) = &unk_24C3371E8;
    v4 -= 216;
  }
  a2[1] = v8;
  v9 = *v3;
  *v3 = v8;
  a2[1] = v9;
  v10 = v3[1];
  v3[1] = a2[2];
  a2[2] = v10;
  v11 = v3[2];
  v3[2] = a2[3];
  a2[3] = v11;
  *a2 = a2[1];
  return result;
}

uint64_t std::__shared_ptr_emplace<mediaplatform::SQLSelectStatement>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void mlcore::PropertiesQuery::~PropertiesQuery(mlcore::PropertiesQuery *this)
{
  void *v2;
  void **v3;

  *(_QWORD *)this = &off_24C3380B8;
  v2 = (void *)*((_QWORD *)this + 10);
  if (v2)
  {
    *((_QWORD *)this + 11) = v2;
    operator delete(v2);
  }
  v3 = (void **)((char *)this + 56);
  std::vector<mlcore::SortDescriptor>::__destroy_vector::operator()[abi:ne180100](&v3);
  *(_QWORD *)this = &off_24C33A798;
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)this + 16);
}

{
  mlcore::PropertiesQuery::~PropertiesQuery(this);
  JUMPOUT(0x20BD27AFCLL);
}

void mlcore::ForeignProperty<std::string>::insertIntoCacheFromResultList(std::string::size_type a1, uint64_t a2, uint64_t a3, int a4)
{
  const unsigned __int8 *v6;
  char *v7;
  std::string __p;

  v6 = sqlite3_column_text(*(sqlite3_stmt **)(*(_QWORD *)(a3 + 8) + 24), *(_DWORD *)a3 + a4);
  if (v6)
    v7 = (char *)v6;
  else
    v7 = "";
  std::string::basic_string[abi:ne180100]<0>(&__p, v7);
  mlcore::PropertyCacheBase<std::string,mediaplatform::Data>::setValueForProperty(a2, &__p, a1);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_20A651DA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t std::__shared_ptr_emplace<mediaplatform::DatabaseParameter<long long>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__shared_ptr_emplace<mlcore::Transaction>::__on_zero_shared(uint64_t a1)
{
  mlcore::Transaction::~Transaction((mediaplatform::DatabaseConnection ***)(a1 + 24));
}

void mlcore::Transaction::~Transaction(mediaplatform::DatabaseConnection ***this)
{
  char *v2;
  std::__shared_weak_count *v3;

  v2 = (char *)(this + 6);
  mediaplatform::DatabaseConnection::popTransaction(*this[6], *((unsigned __int8 *)this + 64));
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)v2);
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)(this + 4));
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)(this + 2));
  v3 = (std::__shared_weak_count *)this[1];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
}

_QWORD *mlcore::ComparisonPredicate<long long>::~ComparisonPredicate(_QWORD *a1)
{
  *a1 = &unk_24C339CA8;
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 4));
  return a1;
}

_QWORD *mlcore::InPredicate<int>::~InPredicate(_QWORD *a1)
{
  *a1 = &unk_24C336940;
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 8));
  std::__hash_table<mlcore::ModelPropertyBase *,std::hash<mlcore::ModelPropertyBase *>,std::equal_to<mlcore::ModelPropertyBase *>,std::allocator<mlcore::ModelPropertyBase *>>::~__hash_table((uint64_t)(a1 + 2));
  return a1;
}

uint64_t std::__hash_table<std::__hash_value_type<mlcore::LocalizedSearchScope *,std::shared_ptr<mlcore::EntityQueryResult>>,std::__unordered_map_hasher<mlcore::LocalizedSearchScope *,std::__hash_value_type<mlcore::LocalizedSearchScope *,std::shared_ptr<mlcore::EntityQueryResult>>,std::hash<mlcore::LocalizedSearchScope *>,std::equal_to<mlcore::LocalizedSearchScope *>,true>,std::__unordered_map_equal<mlcore::LocalizedSearchScope *,std::__hash_value_type<mlcore::LocalizedSearchScope *,std::shared_ptr<mlcore::EntityQueryResult>>,std::equal_to<mlcore::LocalizedSearchScope *>,std::hash<mlcore::LocalizedSearchScope *>,true>,std::allocator<std::__hash_value_type<mlcore::LocalizedSearchScope *,std::shared_ptr<mlcore::EntityQueryResult>>>>::~__hash_table(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  v2 = *(_QWORD **)(a1 + 16);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)(v2 + 3));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v4)
    operator delete(v4);
  return a1;
}

uint64_t std::__shared_ptr_emplace<mlcore::DeviceLibraryView>::__on_zero_shared(uint64_t a1)
{
  std::__shared_weak_count *v2;

  v2 = *(std::__shared_weak_count **)(a1 + 120);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  *(_QWORD *)(a1 + 24) = &unk_24C3369F0;
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100](a1 + 88);
  return std::__hash_table<std::__hash_value_type<mlcore::LocalizedSearchScope *,std::shared_ptr<mlcore::EntityQueryResult>>,std::__unordered_map_hasher<mlcore::LocalizedSearchScope *,std::__hash_value_type<mlcore::LocalizedSearchScope *,std::shared_ptr<mlcore::EntityQueryResult>>,std::hash<mlcore::LocalizedSearchScope *>,std::equal_to<mlcore::LocalizedSearchScope *>,true>,std::__unordered_map_equal<mlcore::LocalizedSearchScope *,std::__hash_value_type<mlcore::LocalizedSearchScope *,std::shared_ptr<mlcore::EntityQueryResult>>,std::equal_to<mlcore::LocalizedSearchScope *>,std::hash<mlcore::LocalizedSearchScope *>,true>,std::allocator<std::__hash_value_type<mlcore::LocalizedSearchScope *,std::shared_ptr<mlcore::EntityQueryResult>>>>::~__hash_table(a1 + 32);
}

_QWORD *mlcore::ForeignProperty<long long>::insertIntoCacheFromResultList(unint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  sqlite3_int64 v6;
  _QWORD *result;
  unint64_t v8;

  v6 = sqlite3_column_int64(*(sqlite3_stmt **)(*(_QWORD *)(a3 + 8) + 24), *(_DWORD *)a3 + a4);
  v8 = a1;
  result = std::__hash_table<std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>,std::__unordered_map_hasher<mlcore::ModelProperty<long long> *,std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>,std::hash<mlcore::ModelProperty<long long> *>,std::equal_to<mlcore::ModelProperty<long long> *>,true>,std::__unordered_map_equal<mlcore::ModelProperty<long long> *,std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>,std::equal_to<mlcore::ModelProperty<long long> *>,std::hash<mlcore::ModelProperty<long long> *>,true>,std::allocator<std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>>>::__emplace_unique_key_args<mlcore::ModelProperty<long long> *,std::piecewise_construct_t const&,std::tuple<mlcore::ModelProperty<long long> * const&>,std::tuple<>>(a2 + 168, a1, &v8);
  result[3] = v6;
  return result;
}

uint64_t std::__shared_ptr_emplace<mlcore::Query>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void mlcore::Query::~Query(mlcore::Query *this)
{
  *(_QWORD *)this = &off_24C33A798;
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)this + 16);
}

{
  *(_QWORD *)this = &off_24C33A798;
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)this + 16);
  JUMPOUT(0x20BD27AFCLL);
}

uint64_t std::__shared_ptr_emplace<mlcore::ExistsPredicate>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void mlcore::ExistsPredicate::~ExistsPredicate(mlcore::ExistsPredicate *this)
{
  *(_QWORD *)this = &off_24C337B10;
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
}

{
  *(_QWORD *)this = &off_24C337B10;
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
  JUMPOUT(0x20BD27AFCLL);
}

uint64_t std::__shared_ptr_emplace<mlcore::SQLRenderer>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 32))(a1 + 24);
}

uint64_t std::__shared_ptr_emplace<mlcore::ComparisonPropertyPredicate>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t std::__shared_ptr_emplace<mlcore::ComparisonPredicate<long long>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t std::__shared_ptr_emplace<mlcore::PropertiesQueryResult>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__shared_ptr_emplace<std::vector<std::string>>::__on_zero_shared(uint64_t a1)
{
  void **v1;

  v1 = (void **)(a1 + 24);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v1);
}

void mlcore::Query::_SQLOrderingTerms(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

void **std::__shared_ptr_pointer<std::vector<mlcore::Section> *,std::shared_ptr<std::vector<mlcore::Section>>::__shared_ptr_default_delete<std::vector<mlcore::Section>,std::vector<mlcore::Section>>,std::allocator<std::vector<mlcore::Section>>>::__on_zero_shared(uint64_t a1)
{
  return std::default_delete<std::vector<mlcore::Section>>::operator()[abi:ne180100](*(void ***)(a1 + 24));
}

uint64_t std::__shared_ptr_pointer<std::vector<mlcore::PropertyCache> *,std::shared_ptr<std::vector<mlcore::PropertyCache>>::__shared_ptr_default_delete<std::vector<mlcore::PropertyCache>,std::vector<mlcore::PropertyCache>>,std::allocator<std::vector<mlcore::PropertyCache>>>::__on_zero_shared(uint64_t result)
{
  void **v1;

  if (*(_QWORD *)(result + 24))
  {
    v1 = *(void ***)(result + 24);
    std::vector<mlcore::PropertyCache>::__destroy_vector::operator()[abi:ne180100](&v1);
    JUMPOUT(0x20BD27AFCLL);
  }
  return result;
}

uint64_t std::__shared_ptr_emplace<mlcore::EntityPropertiesQuery>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t std::__shared_ptr_emplace<mlcore::EntityCache>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void mlcore::NotPredicate::~NotPredicate(mlcore::NotPredicate *this)
{
  *(_QWORD *)this = &off_24C336E90;
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
}

{
  *(_QWORD *)this = &off_24C336E90;
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
  JUMPOUT(0x20BD27AFCLL);
}

uint64_t std::__shared_ptr_emplace<mlcore::NotPredicate>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t std::__shared_ptr_emplace<mlcore::EntityQueryResult>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t std::__shared_ptr_emplace<mlcore::OrPredicate>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void mlcore::OrPredicate::~OrPredicate(mlcore::OrPredicate *this)
{
  void **v1;

  *(_QWORD *)this = off_24C339690;
  v1 = (void **)((char *)this + 8);
  std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__destroy_vector::operator()[abi:ne180100](&v1);
}

{
  void **v1;

  *(_QWORD *)this = off_24C339690;
  v1 = (void **)((char *)this + 8);
  std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__destroy_vector::operator()[abi:ne180100](&v1);
  JUMPOUT(0x20BD27AFCLL);
}

void std::__function::__func<void mlcore::LibraryView::performQuery<mlcore::PropertiesQuery>(std::shared_ptr<mlcore::PropertiesQuery>,std::shared_ptr<mlcore::Transaction>,std::function<void ()(std::shared_ptr<mlcore::PropertiesQuery::Result>)>)::{lambda(std::shared_ptr<mlcore::QueryResult>)#1},std::allocator<void mlcore::LibraryView::performQuery<mlcore::PropertiesQuery>(std::shared_ptr<mlcore::PropertiesQuery>,std::shared_ptr<mlcore::Transaction>,std::function<void ()(std::shared_ptr<mlcore::PropertiesQuery::Result>)>)::{lambda(std::shared_ptr<mlcore::QueryResult>)#1}>,void ()(std::shared_ptr<mlcore::QueryResult>)>::destroy_deallocate(char *__p)
{
  char *v2;
  char *v3;
  uint64_t v4;

  v2 = __p + 8;
  v3 = (char *)*((_QWORD *)__p + 4);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
  }
  operator delete(__p);
}

uint64_t std::__shared_ptr_emplace<mlcore::InPredicate<int>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

double *mlcore::ModelProperty<double>::insertIntoCacheFromResultList(unint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  double v6;
  double *result;
  unint64_t v8;

  v6 = sqlite3_column_double(*(sqlite3_stmt **)(*(_QWORD *)(a3 + 8) + 24), *(_DWORD *)a3 + a4);
  v8 = a1;
  result = (double *)std::__hash_table<std::__hash_value_type<mlcore::ModelProperty<double> *,double>,std::__unordered_map_hasher<mlcore::ModelProperty<double> *,std::__hash_value_type<mlcore::ModelProperty<double> *,double>,std::hash<mlcore::ModelProperty<double> *>,std::equal_to<mlcore::ModelProperty<double> *>,true>,std::__unordered_map_equal<mlcore::ModelProperty<double> *,std::__hash_value_type<mlcore::ModelProperty<double> *,double>,std::equal_to<mlcore::ModelProperty<double> *>,std::hash<mlcore::ModelProperty<double> *>,true>,std::allocator<std::__hash_value_type<mlcore::ModelProperty<double> *,double>>>::__emplace_unique_key_args<mlcore::ModelProperty<double> *,std::piecewise_construct_t const&,std::tuple<mlcore::ModelProperty<double> * const&>,std::tuple<>>(a2 + 88, a1, &v8);
  result[3] = v6;
  return result;
}

uint64_t std::__shared_ptr_emplace<mlcore::PropertiesQuery>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

_QWORD *std::__function::__func<void mlcore::LibraryView::performQuery<mlcore::PropertiesQuery>(std::shared_ptr<mlcore::PropertiesQuery>,std::shared_ptr<mlcore::Transaction>,std::function<void ()(std::shared_ptr<mlcore::PropertiesQuery::Result>)>)::{lambda(std::shared_ptr<mlcore::QueryResult>)#1},std::allocator<void mlcore::LibraryView::performQuery<mlcore::PropertiesQuery>(std::shared_ptr<mlcore::PropertiesQuery>,std::shared_ptr<mlcore::Transaction>,std::function<void ()(std::shared_ptr<mlcore::PropertiesQuery::Result>)>)::{lambda(std::shared_ptr<mlcore::QueryResult>)#1}>,void ()(std::shared_ptr<mlcore::QueryResult>)>::__clone(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = a1 + 8;
  v2 = operator new(0x28uLL);
  *v2 = &off_24C33ADD0;
  std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100]((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_20A6522BC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void mlcore::EntityPropertiesQuery::_SQLWhereExpression(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;

  v2 = *(_QWORD *)(a1 + 120);
  v3 = (std::__shared_weak_count *)a2[1];
  v9 = *a2;
  v10 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v2 + 64))(v2, &v9);
  v6 = v10;
  if (v10)
  {
    v7 = (unint64_t *)&v10->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_20A65235C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

double *mlcore::ForeignProperty<double>::insertIntoCacheFromResultList(unint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  double v6;
  double *result;
  unint64_t v8;

  v6 = sqlite3_column_double(*(sqlite3_stmt **)(*(_QWORD *)(a3 + 8) + 24), *(_DWORD *)a3 + a4);
  v8 = a1;
  result = (double *)std::__hash_table<std::__hash_value_type<mlcore::ModelProperty<double> *,double>,std::__unordered_map_hasher<mlcore::ModelProperty<double> *,std::__hash_value_type<mlcore::ModelProperty<double> *,double>,std::hash<mlcore::ModelProperty<double> *>,std::equal_to<mlcore::ModelProperty<double> *>,true>,std::__unordered_map_equal<mlcore::ModelProperty<double> *,std::__hash_value_type<mlcore::ModelProperty<double> *,double>,std::equal_to<mlcore::ModelProperty<double> *>,std::hash<mlcore::ModelProperty<double> *>,true>,std::allocator<std::__hash_value_type<mlcore::ModelProperty<double> *,double>>>::__emplace_unique_key_args<mlcore::ModelProperty<double> *,std::piecewise_construct_t const&,std::tuple<mlcore::ModelProperty<double> * const&>,std::tuple<>>(a2 + 88, a1, &v8);
  result[3] = v6;
  return result;
}

uint64_t mediaplatform::DatabaseParameter<int>::bind(uint64_t a1, uint64_t a2, int a3)
{
  int v4;

  v4 = sqlite3_bind_int(*(sqlite3_stmt **)(a2 + 24), a3 + 1, *(_DWORD *)(a1 + 8));
  return mediaplatform::DatabaseStatement::_checkSQLiteResult(a2, v4);
}

uint64_t std::__shared_ptr_emplace<mediaplatform::SQLUsingJoinConstraint>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t std::__shared_ptr_emplace<mediaplatform::SQLBinaryExpression>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t std::__shared_ptr_emplace<mediaplatform::DatabaseBindParameter>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t mlcore::LibraryView::filters(mlcore::LibraryView *this)
{
  return *((unsigned int *)this + 20);
}

uint64_t mlcore::LibraryView::setFilters(uint64_t this, int a2)
{
  *(_DWORD *)(this + 80) = a2;
  return this;
}

_BYTE *mlcore::ContentRestrictions::setRestrictExplicitLyrics(_BYTE *this, char a2)
{
  *this = a2;
  return this;
}

uint64_t mlcore::ContentRestrictions::setRestrictedTVShowsRank(uint64_t this, int a2)
{
  *(_DWORD *)(this + 8) = a2;
  return this;
}

uint64_t mlcore::ContentRestrictions::setRestrictedMoviesRank(uint64_t this, int a2)
{
  *(_DWORD *)(this + 4) = a2;
  return this;
}

uint64_t mlcore::ContentRestrictions::setRestrictMusicVideos(uint64_t this, char a2)
{
  *(_BYTE *)(this + 2) = a2;
  return this;
}

uint64_t std::__shared_ptr_emplace<mediaplatform::SQLOrderingTerm>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t mediaplatform::DatabaseParameter<long long>::bind(uint64_t a1, uint64_t a2, int a3)
{
  int v4;

  v4 = sqlite3_bind_int64(*(sqlite3_stmt **)(a2 + 24), a3 + 1, *(_QWORD *)(a1 + 8));
  return mediaplatform::DatabaseStatement::_checkSQLiteResult(a2, v4);
}

uint64_t mlcore::LocalizedSectionHeader::LocalizedSectionHeader(uint64_t a1, int a2, int a3, __int128 **a4, _QWORD *a5)
{
  *(_DWORD *)a1 = a2;
  *(_DWORD *)(a1 + 4) = a3;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)(a1 + 8), *a4, a4[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a4[1] - (char *)*a4) >> 3));
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  mlcore::LocalizedSectionHeader::_initializeLocalizedHeaderTitles(a1, a5);
  return a1;
}

void sub_20A652528(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t mlcore::LocalizedSectionsInfo::LocalizedSectionsInfo(uint64_t a1, uint64_t *a2, uint64_t *a3, _QWORD *a4, __int128 *a5)
{
  __int128 v9;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  std::vector<mlcore::LocalizedSectionHeader>::__init_with_size[abi:ne180100]<mlcore::LocalizedSectionHeader*,mlcore::LocalizedSectionHeader*>(a1, *a2, a2[1], 0x6DB6DB6DB6DB6DB7 * ((a2[1] - *a2) >> 3));
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  if (*((char *)a5 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 48), *(const std::string::value_type **)a5, *((_QWORD *)a5 + 1));
  }
  else
  {
    v9 = *a5;
    *(_QWORD *)(a1 + 64) = *((_QWORD *)a5 + 2);
    *(_OWORD *)(a1 + 48) = v9;
  }
  mlcore::LocalizedSectionsInfo::_initializeLocalizedIndices((std::vector<std::string> *)a1, a3, a4);
  return a1;
}

void sub_20A652608(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  std::vector<mlcore::LocalizedSectionHeader>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void mlcore::ForeignProperty<double>::_SQLJoinClauses(_QWORD *a1@<X0>, uint64_t a2@<X1>, char **a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  __int128 v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  __int128 v35;
  unint64_t *v36;
  unint64_t v37;
  unint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  char *v45;
  uint64_t v46;
  char *v47;
  char *v48;
  char *v49;
  char *v50;
  __int128 v51;
  int64x2_t v52;
  char *v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  __int128 v63;
  __int128 v64;
  uint64_t v65;
  std::__shared_weak_count *v66;
  __int128 v67;
  uint64_t v68;
  std::__shared_weak_count *v69;
  __int128 v70;
  void *__p[3];
  _QWORD *v72;
  _QWORD *v73;
  _BYTE v74[24];
  char *v75;
  _QWORD *v76;

  v6 = (*(uint64_t (**)(_QWORD *))(*a1 + 120))(a1);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 104))(v6, a2);
  v7 = (*(uint64_t (**)(_QWORD *))(*a1 + 120))(a1);
  (*(void (**)(_QWORD **__return_ptr, _QWORD *))(*a1 + 64))(&v72, a1);
  v8 = v72;
  v9 = v73;
  if (v72 != v73)
  {
    do
    {
      v10 = *v8;
      if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 88))(a2) != v10)
      {
        (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)v7 + 64))(__p, v7);
        v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 72))(v7);
        v68 = 0;
        v69 = 0;
        (*(void (**)(_BYTE *__return_ptr, uint64_t, uint64_t *))(*(_QWORD *)v7 + 96))(v74, v7, &v68);
        LODWORD(v64) = 13;
        (*(void (**)(__int128 *__return_ptr, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v10 + 32))(&v67, v10, *(_QWORD *)__p[0], v11);
        std::allocate_shared[abi:ne180100]<mediaplatform::SQLBinaryExpression,std::allocator<mediaplatform::SQLBinaryExpression>,std::shared_ptr<mediaplatform::SQLExpression>,mediaplatform::SQLBinaryExpression::BinaryOperator,std::shared_ptr<mediaplatform::SQLColumnNameExpression>,void>(&v70, (__int128 *)v74, (int *)&v64, &v67);
        v12 = (std::__shared_weak_count *)*((_QWORD *)&v67 + 1);
        if (*((_QWORD *)&v67 + 1))
        {
          v13 = (unint64_t *)(*((_QWORD *)&v67 + 1) + 8);
          do
            v14 = __ldaxr(v13);
          while (__stlxr(v14 - 1, v13));
          if (!v14)
          {
            ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
            std::__shared_weak_count::__release_weak(v12);
          }
        }
        v15 = *(std::__shared_weak_count **)&v74[8];
        if (*(_QWORD *)&v74[8])
        {
          v16 = (unint64_t *)(*(_QWORD *)&v74[8] + 8);
          do
            v17 = __ldaxr(v16);
          while (__stlxr(v17 - 1, v16));
          if (!v17)
          {
            ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
            std::__shared_weak_count::__release_weak(v15);
          }
        }
        v18 = v69;
        if (v69)
        {
          p_shared_owners = (unint64_t *)&v69->__shared_owners_;
          do
            v20 = __ldaxr(p_shared_owners);
          while (__stlxr(v20 - 1, p_shared_owners));
          if (!v20)
          {
            ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
            std::__shared_weak_count::__release_weak(v18);
          }
        }
        v21 = a1[11];
        if (v21)
        {
          LODWORD(v64) = 1;
          v65 = 0;
          v66 = 0;
          (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t *))(*(_QWORD *)v21 + 64))(&v67, v21, &v65);
          v22 = (std::__shared_weak_count *)*((_QWORD *)&v70 + 1);
          std::allocate_shared[abi:ne180100]<mediaplatform::SQLBinaryExpression,std::allocator<mediaplatform::SQLBinaryExpression>,std::shared_ptr<mediaplatform::SQLBinaryExpression> &,mediaplatform::SQLBinaryExpression::BinaryOperator,std::shared_ptr<mediaplatform::SQLExpression>,void>(v74, v70, *((std::__shared_weak_count **)&v70 + 1), (int *)&v64, &v67);
          v23 = *(_OWORD *)v74;
          *(_OWORD *)v74 = 0uLL;
          v70 = v23;
          if (v22)
          {
            v24 = (unint64_t *)&v22->__shared_owners_;
            do
              v25 = __ldaxr(v24);
            while (__stlxr(v25 - 1, v24));
            if (!v25)
            {
              ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
              std::__shared_weak_count::__release_weak(v22);
            }
          }
          v26 = *(std::__shared_weak_count **)&v74[8];
          if (*(_QWORD *)&v74[8])
          {
            v27 = (unint64_t *)(*(_QWORD *)&v74[8] + 8);
            do
              v28 = __ldaxr(v27);
            while (__stlxr(v28 - 1, v27));
            if (!v28)
            {
              ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
              std::__shared_weak_count::__release_weak(v26);
            }
          }
          v29 = (std::__shared_weak_count *)*((_QWORD *)&v67 + 1);
          if (*((_QWORD *)&v67 + 1))
          {
            v30 = (unint64_t *)(*((_QWORD *)&v67 + 1) + 8);
            do
              v31 = __ldaxr(v30);
            while (__stlxr(v31 - 1, v30));
            if (!v31)
            {
              ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
              std::__shared_weak_count::__release_weak(v29);
            }
          }
          v32 = v66;
          if (v66)
          {
            v33 = (unint64_t *)&v66->__shared_owners_;
            do
              v34 = __ldaxr(v33);
            while (__stlxr(v34 - 1, v33));
            if (!v34)
            {
              ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
              std::__shared_weak_count::__release_weak(v32);
            }
          }
        }
        std::allocate_shared[abi:ne180100]<mediaplatform::SQLOnJoinConstraint,std::allocator<mediaplatform::SQLOnJoinConstraint>,std::shared_ptr<mediaplatform::SQLBinaryExpression> &,void>(&v67, v70, *((std::__shared_weak_count **)&v70 + 1));
        std::allocate_shared[abi:ne180100]<mediaplatform::SQLJoinClause,std::allocator<mediaplatform::SQLJoinClause>,mediaplatform::SQLJoinClause::JoinOperator,std::string const&,std::shared_ptr<mediaplatform::SQLOnJoinConstraint> &,void>(&v64, 1, v10 + 8, (uint64_t *)&v67);
        v35 = v64;
        if (*((_QWORD *)&v64 + 1))
        {
          v36 = (unint64_t *)(*((_QWORD *)&v64 + 1) + 8);
          do
            v37 = __ldxr(v36);
          while (__stxr(v37 + 1, v36));
        }
        v39 = a3[1];
        v38 = (unint64_t)a3[2];
        if ((unint64_t)v39 >= v38)
        {
          v63 = v35;
          v41 = (v39 - *a3) >> 4;
          if ((unint64_t)(v41 + 1) >> 60)
            std::vector<std::string>::__throw_length_error[abi:ne180100]();
          v42 = v38 - (_QWORD)*a3;
          v43 = v42 >> 3;
          if (v42 >> 3 <= (unint64_t)(v41 + 1))
            v43 = v41 + 1;
          if ((unint64_t)v42 >= 0x7FFFFFFFFFFFFFF0)
            v44 = 0xFFFFFFFFFFFFFFFLL;
          else
            v44 = v43;
          v76 = a3 + 2;
          v45 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<mediaplatform::DatabaseParameterBase>>>(v44);
          v47 = &v45[16 * v41];
          *(_OWORD *)v47 = v63;
          v49 = *a3;
          v48 = a3[1];
          if (v48 == *a3)
          {
            v52 = vdupq_n_s64((unint64_t)v48);
            v50 = &v45[16 * v41];
          }
          else
          {
            v50 = &v45[16 * v41];
            do
            {
              v51 = *((_OWORD *)v48 - 1);
              v48 -= 16;
              *((_OWORD *)v50 - 1) = v51;
              v50 -= 16;
              *(_QWORD *)v48 = 0;
              *((_QWORD *)v48 + 1) = 0;
            }
            while (v48 != v49);
            v52 = *(int64x2_t *)a3;
          }
          v40 = v47 + 16;
          *a3 = v50;
          a3[1] = v47 + 16;
          *(int64x2_t *)&v74[8] = v52;
          v53 = a3[2];
          a3[2] = &v45[16 * v46];
          v75 = v53;
          *(_QWORD *)v74 = v52.i64[0];
          std::__split_buffer<std::shared_ptr<mediaplatform::SQLExpression const>>::~__split_buffer((uint64_t)v74);
        }
        else
        {
          *(_OWORD *)v39 = v35;
          v40 = v39 + 16;
        }
        a3[1] = v40;
        v54 = (std::__shared_weak_count *)*((_QWORD *)&v64 + 1);
        if (*((_QWORD *)&v64 + 1))
        {
          v55 = (unint64_t *)(*((_QWORD *)&v64 + 1) + 8);
          do
            v56 = __ldaxr(v55);
          while (__stlxr(v56 - 1, v55));
          if (!v56)
          {
            ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
            std::__shared_weak_count::__release_weak(v54);
          }
        }
        v57 = (std::__shared_weak_count *)*((_QWORD *)&v67 + 1);
        if (*((_QWORD *)&v67 + 1))
        {
          v58 = (unint64_t *)(*((_QWORD *)&v67 + 1) + 8);
          do
            v59 = __ldaxr(v58);
          while (__stlxr(v59 - 1, v58));
          if (!v59)
          {
            ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
            std::__shared_weak_count::__release_weak(v57);
          }
        }
        v60 = (std::__shared_weak_count *)*((_QWORD *)&v70 + 1);
        if (*((_QWORD *)&v70 + 1))
        {
          v61 = (unint64_t *)(*((_QWORD *)&v70 + 1) + 8);
          do
            v62 = __ldaxr(v61);
          while (__stlxr(v62 - 1, v61));
          if (!v62)
          {
            ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
            std::__shared_weak_count::__release_weak(v60);
          }
        }
        if (__p[0])
        {
          __p[1] = __p[0];
          operator delete(__p[0]);
        }
      }
      ++v8;
    }
    while (v8 != v9);
    v8 = v72;
  }
  if (v8)
  {
    v73 = v8;
    operator delete(v8);
  }
}

void sub_20A652B3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, char a17, uint64_t a18, char a19, uint64_t a20,char a21,uint64_t a22,void *__p,uint64_t a24,uint64_t a25,void *a26,uint64_t a27)
{
  std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a26);
  _Unwind_Resume(a1);
}

void mediaplatform::DatabaseTable<std::string,long long,long long,double,long long,long long>::targetColumnExpression(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  __int128 *v3;
  __int128 *v4[3];
  __int128 **v5;

  v3 = (__int128 *)(a1 + 8);
  (*(void (**)(__int128 **__return_ptr))(*(_QWORD *)a1 + 24))(v4);
  std::allocate_shared[abi:ne180100]<mediaplatform::SQLColumnNameExpression,std::allocator<mediaplatform::SQLColumnNameExpression>,std::string &,std::string const&,void>(a2, v4[0], v3);
  v5 = v4;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v5);
}

void sub_20A652C78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void mediaplatform::DatabaseTable<std::string,long long,long long,double,long long,long long>::columnNames(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  mediaplatform::ColumnNamesApplier::operator()<std::string>((uint64_t)a2, a1 + 320);
  mediaplatform::ColumnNamesApplier::operator()<long long>((uint64_t)a2, a1 + 272);
  mediaplatform::ColumnNamesApplier::operator()<long long>((uint64_t)a2, a1 + 224);
  mediaplatform::ColumnNamesApplier::operator()<double>((uint64_t)a2, a1 + 176);
  mediaplatform::ColumnNamesApplier::operator()<long long>((uint64_t)a2, a1 + 128);
  mediaplatform::ColumnNamesApplier::operator()<long long>((uint64_t)a2, a1 + 80);
}

void sub_20A652D08(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void mediaplatform::ColumnNamesApplier::operator()<double>(uint64_t a1, uint64_t a2)
{
  unint64_t v3;
  std::string *v4;
  std::string *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  std::string *v11;
  std::string v12;
  std::__split_buffer<std::string> __v;

  if (*(char *)(a2 + 31) < 0)
    std::string::__init_copy_ctor_external(&v12, *(const std::string::value_type **)(a2 + 8), *(_QWORD *)(a2 + 16));
  else
    v12 = *(std::string *)(a2 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  v4 = *(std::string **)(a1 + 8);
  if ((unint64_t)v4 >= v3)
  {
    v6 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v4 - *(_QWORD *)a1) >> 3);
    v7 = v6 + 1;
    if (v6 + 1 > 0xAAAAAAAAAAAAAAALL)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v8 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v3 - *(_QWORD *)a1) >> 3);
    if (2 * v8 > v7)
      v7 = 2 * v8;
    if (v8 >= 0x555555555555555)
      v9 = 0xAAAAAAAAAAAAAAALL;
    else
      v9 = v7;
    __v.__end_cap_.__value_ = (std::allocator<std::string> *)(a1 + 16);
    if (v9)
      v9 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v9);
    else
      v10 = 0;
    v11 = (std::string *)(v9 + 24 * v6);
    __v.__first_ = (std::__split_buffer<std::string>::pointer)v9;
    __v.__begin_ = v11;
    __v.__end_cap_.__value_ = (std::string *)(v9 + 24 * v10);
    *v11 = v12;
    memset(&v12, 0, sizeof(v12));
    __v.__end_ = v11 + 1;
    std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)a1, &__v);
    v5 = *(std::string **)(a1 + 8);
    std::__split_buffer<std::string>::~__split_buffer(&__v);
  }
  else
  {
    *v4 = v12;
    v5 = v4 + 1;
  }
  *(_QWORD *)(a1 + 8) = v5;
}

void sub_20A652E60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void mlcore::LocalizedSectionsInfo::_initializeLocalizedIndices(std::vector<std::string> *a1, uint64_t *a2, _QWORD *a3)
{
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 *v7;
  __int128 *p_p;
  std::vector<std::string>::pointer end;
  __int128 v10;
  std::string *v11;
  std::string __p;
  std::vector<std::string> v13;

  memset(&v13, 0, sizeof(v13));
  v4 = *a2;
  v5 = a2[1];
  if (*a2 != v5)
  {
    do
    {
      if (*(char *)(v4 + 23) < 0)
        std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)v4, *(_QWORD *)(v4 + 8));
      else
        __p = *(std::string *)v4;
      v7 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>(a3, (unsigned __int8 *)&__p);
      if (v7)
      {
        p_p = (__int128 *)(v7 + 40);
        end = v13.__end_;
        if (v13.__end_ < v13.__end_cap_.__value_)
        {
          if ((char)v7[63] < 0)
          {
            std::string::__init_copy_ctor_external(v13.__end_, *((const std::string::value_type **)v7 + 5), *((_QWORD *)v7 + 6));
          }
          else
          {
            v10 = *p_p;
            v13.__end_->__r_.__value_.__r.__words[2] = *((_QWORD *)v7 + 7);
            *(_OWORD *)&end->__r_.__value_.__l.__data_ = v10;
          }
LABEL_16:
          v11 = end + 1;
          goto LABEL_17;
        }
      }
      else
      {
        end = v13.__end_;
        if (v13.__end_ < v13.__end_cap_.__value_)
        {
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          {
            std::string::__init_copy_ctor_external(v13.__end_, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
          }
          else
          {
            *(_OWORD *)v13.__end_ = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
            end->__r_.__value_.__r.__words[2] = __p.__r_.__value_.__r.__words[2];
          }
          goto LABEL_16;
        }
        p_p = (__int128 *)&__p;
      }
      v11 = std::vector<std::string>::__push_back_slow_path<std::string const&>(&v13, p_p);
LABEL_17:
      v13.__end_ = v11;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      v4 += 24;
    }
    while (v4 != v5);
  }
  if (&a1[1] != &v13)
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>(a1 + 1, v13.__begin_, (__int128 *)v13.__end_, 0xAAAAAAAAAAAAAAABLL * (((char *)v13.__end_ - (char *)v13.__begin_) >> 3));
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
}

void sub_20A652FDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, char *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16)
{
  __p = &a15;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

void mlcore::LocalizedSectionHeader::_initializeLocalizedHeaderTitles(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t i;
  unsigned __int8 *v6;
  __int128 *p_p;
  std::vector<std::string>::pointer end;
  __int128 v9;
  std::string *v10;
  std::string __p;
  std::vector<std::string> v12;

  memset(&v12, 0, sizeof(v12));
  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); v3 != i; v3 += 24)
  {
    if (*(char *)(v3 + 23) < 0)
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)v3, *(_QWORD *)(v3 + 8));
    else
      __p = *(std::string *)v3;
    v6 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>(a2, (unsigned __int8 *)&__p);
    if (v6)
    {
      p_p = (__int128 *)(v6 + 40);
      end = v12.__end_;
      if (v12.__end_ < v12.__end_cap_.__value_)
      {
        if ((char)v6[63] < 0)
        {
          std::string::__init_copy_ctor_external(v12.__end_, *((const std::string::value_type **)v6 + 5), *((_QWORD *)v6 + 6));
        }
        else
        {
          v9 = *p_p;
          v12.__end_->__r_.__value_.__r.__words[2] = *((_QWORD *)v6 + 7);
          *(_OWORD *)&end->__r_.__value_.__l.__data_ = v9;
        }
LABEL_16:
        v10 = end + 1;
        goto LABEL_17;
      }
    }
    else
    {
      end = v12.__end_;
      if (v12.__end_ < v12.__end_cap_.__value_)
      {
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        {
          std::string::__init_copy_ctor_external(v12.__end_, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
        }
        else
        {
          *(_OWORD *)v12.__end_ = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
          end->__r_.__value_.__r.__words[2] = __p.__r_.__value_.__r.__words[2];
        }
        goto LABEL_16;
      }
      p_p = (__int128 *)&__p;
    }
    v10 = std::vector<std::string>::__push_back_slow_path<std::string const&>(&v12, p_p);
LABEL_17:
    v12.__end_ = v10;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  if ((std::vector<std::string> *)(a1 + 32) != &v12)
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((std::vector<std::string> *)(a1 + 32), v12.__begin_, (__int128 *)v12.__end_, 0xAAAAAAAAAAAAAAABLL * (((char *)v12.__end_ - (char *)v12.__begin_) >> 3));
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v12;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
}

void sub_20A653184(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, char *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16)
{
  __p = &a15;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>(_QWORD *a1, unsigned __int8 *a2)
{
  unint64_t v4;
  int8x8_t v5;
  unint64_t v6;
  uint8x8_t v7;
  unint64_t v8;
  unint64_t v9;
  unsigned __int8 **v10;
  unsigned __int8 *i;
  unint64_t v12;

  v4 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)a2);
  v5 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v5)
    return 0;
  v6 = v4;
  v7 = (uint8x8_t)vcnt_s8(v5);
  v7.i16[0] = vaddlv_u8(v7);
  v8 = v7.u32[0];
  if (v7.u32[0] > 1uLL)
  {
    v9 = v4;
    if (v4 >= *(_QWORD *)&v5)
      v9 = v4 % *(_QWORD *)&v5;
  }
  else
  {
    v9 = (*(_QWORD *)&v5 - 1) & v4;
  }
  v10 = *(unsigned __int8 ***)(*a1 + 8 * v9);
  if (!v10)
    return 0;
  for (i = *v10; i; i = *(unsigned __int8 **)i)
  {
    v12 = *((_QWORD *)i + 1);
    if (v6 == v12)
    {
      if (std::equal_to<std::string>::operator()[abi:ne180100](i + 16, a2))
        return i;
    }
    else
    {
      if (v8 > 1)
      {
        if (v12 >= *(_QWORD *)&v5)
          v12 %= *(_QWORD *)&v5;
      }
      else
      {
        v12 &= *(_QWORD *)&v5 - 1;
      }
      if (v12 != v9)
        return 0;
    }
  }
  return i;
}

void mediaplatform::DatabaseTable<long long,std::string,mediaplatform::Data,int,long long,int,int,int,int,long long>::columnNames(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  mediaplatform::ColumnNamesApplier::operator()<long long>((uint64_t)a2, a1 + 560);
  mediaplatform::ColumnNamesApplier::operator()<std::string>((uint64_t)a2, a1 + 496);
  mediaplatform::ColumnNamesApplier::operator()<mediaplatform::Data>((uint64_t)a2, a1 + 416);
  mediaplatform::ColumnNamesApplier::operator()<int>((uint64_t)a2, a1 + 368);
  mediaplatform::ColumnNamesApplier::operator()<long long>((uint64_t)a2, a1 + 320);
  mediaplatform::ColumnNamesApplier::operator()<int>((uint64_t)a2, a1 + 272);
  mediaplatform::ColumnNamesApplier::operator()<int>((uint64_t)a2, a1 + 224);
  mediaplatform::ColumnNamesApplier::operator()<int>((uint64_t)a2, a1 + 176);
  mediaplatform::ColumnNamesApplier::operator()<int>((uint64_t)a2, a1 + 128);
  mediaplatform::ColumnNamesApplier::operator()<long long>((uint64_t)a2, a1 + 80);
}

void sub_20A65336C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void mediaplatform::DatabaseTable<long long,std::string,std::string,mediaplatform::Data,int,long long,int,int,int,int,long long>::columnNames(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  mediaplatform::ColumnNamesApplier::operator()<long long>((uint64_t)a2, a1 + 624);
  mediaplatform::ColumnNamesApplier::operator()<std::string>((uint64_t)a2, a1 + 560);
  mediaplatform::ColumnNamesApplier::operator()<std::string>((uint64_t)a2, a1 + 496);
  mediaplatform::ColumnNamesApplier::operator()<mediaplatform::Data>((uint64_t)a2, a1 + 416);
  mediaplatform::ColumnNamesApplier::operator()<int>((uint64_t)a2, a1 + 368);
  mediaplatform::ColumnNamesApplier::operator()<long long>((uint64_t)a2, a1 + 320);
  mediaplatform::ColumnNamesApplier::operator()<int>((uint64_t)a2, a1 + 272);
  mediaplatform::ColumnNamesApplier::operator()<int>((uint64_t)a2, a1 + 224);
  mediaplatform::ColumnNamesApplier::operator()<int>((uint64_t)a2, a1 + 176);
  mediaplatform::ColumnNamesApplier::operator()<int>((uint64_t)a2, a1 + 128);
  mediaplatform::ColumnNamesApplier::operator()<long long>((uint64_t)a2, a1 + 80);
}

void sub_20A653438(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void mediaplatform::DatabaseTable<long long,std::string,std::string,std::string,std::string,mediaplatform::Data,int,long long,long long,int,int,int,int,mediaplatform::Data,long long,int>::targetColumnExpression(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  __int128 *v3;
  __int128 *v4[3];
  __int128 **v5;

  v3 = (__int128 *)(a1 + 8);
  (*(void (**)(__int128 **__return_ptr))(*(_QWORD *)a1 + 24))(v4);
  std::allocate_shared[abi:ne180100]<mediaplatform::SQLColumnNameExpression,std::allocator<mediaplatform::SQLColumnNameExpression>,std::string &,std::string const&,void>(a2, v4[0], v3);
  v5 = v4;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v5);
}

void sub_20A6534B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void mediaplatform::DatabaseTable<long long,std::string,std::string,std::string,std::string,mediaplatform::Data,int,long long,long long,int,int,int,int,mediaplatform::Data,long long,int>::columnNames(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  mediaplatform::ColumnNamesApplier::operator()<long long>((uint64_t)a2, a1 + 928);
  mediaplatform::ColumnNamesApplier::operator()<std::string>((uint64_t)a2, a1 + 864);
  mediaplatform::ColumnNamesApplier::operator()<std::string>((uint64_t)a2, a1 + 800);
  mediaplatform::ColumnNamesApplier::operator()<std::string>((uint64_t)a2, a1 + 736);
  mediaplatform::ColumnNamesApplier::operator()<std::string>((uint64_t)a2, a1 + 672);
  mediaplatform::ColumnNamesApplier::operator()<mediaplatform::Data>((uint64_t)a2, a1 + 592);
  mediaplatform::ColumnNamesApplier::operator()<int>((uint64_t)a2, a1 + 544);
  mediaplatform::ColumnNamesApplier::operator()<long long>((uint64_t)a2, a1 + 496);
  mediaplatform::ColumnNamesApplier::operator()<long long>((uint64_t)a2, a1 + 448);
  mediaplatform::ColumnNamesApplier::operator()<int>((uint64_t)a2, a1 + 400);
  mediaplatform::ColumnNamesApplier::operator()<int>((uint64_t)a2, a1 + 352);
  mediaplatform::ColumnNamesApplier::operator()<int>((uint64_t)a2, a1 + 304);
  mediaplatform::ColumnNamesApplier::operator()<int>((uint64_t)a2, a1 + 256);
  mediaplatform::ColumnNamesApplier::operator()<mediaplatform::Data>((uint64_t)a2, a1 + 176);
  mediaplatform::ColumnNamesApplier::operator()<long long>((uint64_t)a2, a1 + 128);
  mediaplatform::ColumnNamesApplier::operator()<int>((uint64_t)a2, a1 + 80);
}

void sub_20A6535B8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void mediaplatform::DatabaseTable<long long,std::string,std::string,mediaplatform::Data,int,long long,long long,int,int,int,int,mediaplatform::Data,long long,std::string,int,int,long long,long long,int>::targetColumnExpression(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  __int128 *v3;
  __int128 *v4[3];
  __int128 **v5;

  v3 = (__int128 *)(a1 + 8);
  (*(void (**)(__int128 **__return_ptr))(*(_QWORD *)a1 + 24))(v4);
  std::allocate_shared[abi:ne180100]<mediaplatform::SQLColumnNameExpression,std::allocator<mediaplatform::SQLColumnNameExpression>,std::string &,std::string const&,void>(a2, v4[0], v3);
  v5 = v4;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v5);
}

void sub_20A653630(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void mediaplatform::DatabaseTable<long long,std::string,std::string,mediaplatform::Data,int,long long,long long,int,int,int,int,mediaplatform::Data,long long,std::string,int,int,long long,long long,int>::columnNames(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  mediaplatform::ColumnNamesApplier::operator()<long long>((uint64_t)a2, a1 + 1056);
  mediaplatform::ColumnNamesApplier::operator()<std::string>((uint64_t)a2, a1 + 992);
  mediaplatform::ColumnNamesApplier::operator()<std::string>((uint64_t)a2, a1 + 928);
  mediaplatform::ColumnNamesApplier::operator()<mediaplatform::Data>((uint64_t)a2, a1 + 848);
  mediaplatform::ColumnNamesApplier::operator()<int>((uint64_t)a2, a1 + 800);
  mediaplatform::ColumnNamesApplier::operator()<long long>((uint64_t)a2, a1 + 752);
  mediaplatform::ColumnNamesApplier::operator()<long long>((uint64_t)a2, a1 + 704);
  mediaplatform::ColumnNamesApplier::operator()<int>((uint64_t)a2, a1 + 656);
  mediaplatform::ColumnNamesApplier::operator()<int>((uint64_t)a2, a1 + 608);
  mediaplatform::ColumnNamesApplier::operator()<int>((uint64_t)a2, a1 + 560);
  mediaplatform::ColumnNamesApplier::operator()<int>((uint64_t)a2, a1 + 512);
  mediaplatform::ColumnNamesApplier::operator()<mediaplatform::Data>((uint64_t)a2, a1 + 432);
  mediaplatform::ColumnNamesApplier::operator()<long long>((uint64_t)a2, a1 + 384);
  mediaplatform::ColumnNamesApplier::operator()<std::string>((uint64_t)a2, a1 + 320);
  mediaplatform::ColumnNamesApplier::operator()<int>((uint64_t)a2, a1 + 272);
  mediaplatform::ColumnNamesApplier::operator()<int>((uint64_t)a2, a1 + 224);
  mediaplatform::ColumnNamesApplier::operator()<long long>((uint64_t)a2, a1 + 176);
  mediaplatform::ColumnNamesApplier::operator()<long long>((uint64_t)a2, a1 + 128);
  mediaplatform::ColumnNamesApplier::operator()<int>((uint64_t)a2, a1 + 80);
}

void sub_20A65375C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void mediaplatform::DatabaseTable<long long,int,long long,long long,long long,std::string,long long,int,int,long long,int,int,int,int,std::string,int,int,int,int,int,int,int,int,int,int,int,int,long long,int,mediaplatform::Data,int,int,int,int,int,int,std::string,int,int,int,int,int,long long,long long,int,std::string,std::string,int,int,int,int,long long,std::string,std::string,long long,long long,int,int,int,int,int,int,int,std::string,std::string,std::string,int,long long,int,std::string,long long,std::string,std::string,int,long long,int,std::string,int,long long,int,int,int,std::string,std::string,long long,int,int>::columnNames(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  mediaplatform::ColumnNamesApplier::operator()<long long>((uint64_t)a2, a1 + 4496);
  mediaplatform::ColumnNamesApplier::operator()<int>((uint64_t)a2, a1 + 4448);
  mediaplatform::ColumnNamesApplier::operator()<long long>((uint64_t)a2, a1 + 4400);
  mediaplatform::ColumnNamesApplier::operator()<long long>((uint64_t)a2, a1 + 4352);
  mediaplatform::ColumnNamesApplier::operator()<long long>((uint64_t)a2, a1 + 4304);
  mediaplatform::ColumnNamesApplier::operator()<std::string>((uint64_t)a2, a1 + 4240);
  mediaplatform::ColumnNamesApplier::operator()<long long>((uint64_t)a2, a1 + 4192);
  mediaplatform::ColumnNamesApplier::operator()<int>((uint64_t)a2, a1 + 4144);
  mediaplatform::ColumnNamesApplier::operator()<int>((uint64_t)a2, a1 + 4096);
  mediaplatform::ColumnNamesApplier::operator()<long long>((uint64_t)a2, a1 + 4048);
  mediaplatform::ColumnNamesApplier::operator()<int>((uint64_t)a2, a1 + 4000);
  mediaplatform::ColumnNamesApplier::operator()<int>((uint64_t)a2, a1 + 3952);
  mediaplatform::ColumnNamesApplier::operator()<int>((uint64_t)a2, a1 + 3904);
  mediaplatform::ColumnNamesApplier::operator()<int>((uint64_t)a2, a1 + 3856);
  mediaplatform::ColumnNamesApplier::operator()<std::string>((uint64_t)a2, a1 + 3792);
  mediaplatform::ColumnNamesApplier::operator()<int>((uint64_t)a2, a1 + 3744);
  mediaplatform::ColumnNamesApplier::operator()<int>((uint64_t)a2, a1 + 3696);
  mediaplatform::ColumnNamesApplier::operator()<int>((uint64_t)a2, a1 + 3648);
  mediaplatform::ColumnNamesApplier::operator()<int>((uint64_t)a2, a1 + 3600);
  mediaplatform::ColumnNamesApplier::operator()<int>((uint64_t)a2, a1 + 3552);
  mediaplatform::ColumnNamesApplier::operator()<int>((uint64_t)a2, a1 + 3504);
  mediaplatform::ColumnNamesApplier::operator()<int>((uint64_t)a2, a1 + 3456);
  mediaplatform::ColumnNamesApplier::operator()<int>((uint64_t)a2, a1 + 3408);
  mediaplatform::ColumnNamesApplier::operator()<int>((uint64_t)a2, a1 + 3360);
  mediaplatform::ColumnNamesApplier::operator()<int>((uint64_t)a2, a1 + 3312);
  mediaplatform::ColumnNamesApplier::operator()<int>((uint64_t)a2, a1 + 3264);
  mediaplatform::ColumnNamesApplier::operator()<int>((uint64_t)a2, a1 + 3216);
  mediaplatform::ColumnNamesApplier::operator()<long long>((uint64_t)a2, a1 + 3168);
  mediaplatform::ColumnNamesApplier::operator()<int>((uint64_t)a2, a1 + 3120);
  mediaplatform::ColumnNamesApplier::operator()<mediaplatform::Data>((uint64_t)a2, a1 + 3040);
  mediaplatform::ColumnNamesApplier::operator()<int>((uint64_t)a2, a1 + 2992);
  mediaplatform::ColumnNamesApplier::operator()<int>((uint64_t)a2, a1 + 2944);
  mediaplatform::ColumnNamesApplier::operator()<int>((uint64_t)a2, a1 + 2896);
  mediaplatform::ColumnNamesApplier::operator()<int>((uint64_t)a2, a1 + 2848);
  mediaplatform::ColumnNamesApplier::operator()<int>((uint64_t)a2, a1 + 2800);
  mediaplatform::ColumnNamesApplier::operator()<int>((uint64_t)a2, a1 + 2752);
  mediaplatform::ColumnNamesApplier::operator()<std::string>((uint64_t)a2, a1 + 2688);
  mediaplatform::ColumnNamesApplier::operator()<int>((uint64_t)a2, a1 + 2640);
  mediaplatform::ColumnNamesApplier::operator()<int>((uint64_t)a2, a1 + 2592);
  mediaplatform::ColumnNamesApplier::operator()<int>((uint64_t)a2, a1 + 2544);
  mediaplatform::ColumnNamesApplier::operator()<int>((uint64_t)a2, a1 + 2496);
  mediaplatform::ColumnNamesApplier::operator()<int>((uint64_t)a2, a1 + 2448);
  mediaplatform::ColumnNamesApplier::operator()<long long>((uint64_t)a2, a1 + 2400);
  mediaplatform::ColumnNamesApplier::operator()<long long>((uint64_t)a2, a1 + 2352);
  mediaplatform::ColumnNamesApplier::operator()<int>((uint64_t)a2, a1 + 2304);
  mediaplatform::ColumnNamesApplier::operator()<std::string>((uint64_t)a2, a1 + 2240);
  mediaplatform::ColumnNamesApplier::operator()<std::string>((uint64_t)a2, a1 + 2176);
  mediaplatform::ColumnNamesApplier::operator()<int>((uint64_t)a2, a1 + 2128);
  mediaplatform::ColumnNamesApplier::operator()<int>((uint64_t)a2, a1 + 2080);
  mediaplatform::ColumnNamesApplier::operator()<int>((uint64_t)a2, a1 + 2032);
  mediaplatform::ColumnNamesApplier::operator()<int>((uint64_t)a2, a1 + 1984);
  mediaplatform::ColumnNamesApplier::operator()<long long>((uint64_t)a2, a1 + 1936);
  mediaplatform::ColumnNamesApplier::operator()<std::string>((uint64_t)a2, a1 + 1872);
  mediaplatform::ColumnNamesApplier::operator()<std::string>((uint64_t)a2, a1 + 1808);
  mediaplatform::ColumnNamesApplier::operator()<long long>((uint64_t)a2, a1 + 1760);
  mediaplatform::ColumnNamesApplier::operator()<long long>((uint64_t)a2, a1 + 1712);
  mediaplatform::ColumnNamesApplier::operator()<int>((uint64_t)a2, a1 + 1664);
  mediaplatform::ColumnNamesApplier::operator()<int>((uint64_t)a2, a1 + 1616);
  mediaplatform::ColumnNamesApplier::operator()<int>((uint64_t)a2, a1 + 1568);
  mediaplatform::ColumnNamesApplier::operator()<int>((uint64_t)a2, a1 + 1520);
  mediaplatform::ColumnNamesApplier::operator()<int>((uint64_t)a2, a1 + 1472);
  mediaplatform::ColumnNamesApplier::operator()<int>((uint64_t)a2, a1 + 1424);
  mediaplatform::ColumnNamesApplier::operator()<int>((uint64_t)a2, a1 + 1376);
  mediaplatform::ColumnNamesApplier::operator()<std::string>((uint64_t)a2, a1 + 1312);
  mediaplatform::ColumnNamesApplier::operator()<std::string>((uint64_t)a2, a1 + 1248);
  mediaplatform::ColumnNamesApplier::operator()<std::string>((uint64_t)a2, a1 + 1184);
  mediaplatform::ColumnNamesApplier::operator()<int>((uint64_t)a2, a1 + 1136);
  mediaplatform::ColumnNamesApplier::operator()<long long>((uint64_t)a2, a1 + 1088);
  mediaplatform::ColumnNamesApplier::operator()<int>((uint64_t)a2, a1 + 1040);
  mediaplatform::ColumnNamesApplier::operator()<std::string>((uint64_t)a2, a1 + 976);
  mediaplatform::ColumnNamesApplier::operator()<long long>((uint64_t)a2, a1 + 928);
  mediaplatform::ColumnNamesApplier::operator()<std::string>((uint64_t)a2, a1 + 864);
  mediaplatform::ColumnNamesApplier::operator()<std::string>((uint64_t)a2, a1 + 800);
  mediaplatform::ColumnNamesApplier::operator()<int>((uint64_t)a2, a1 + 752);
  mediaplatform::ColumnNamesApplier::operator()<long long>((uint64_t)a2, a1 + 704);
  mediaplatform::ColumnNamesApplier::operator()<int>((uint64_t)a2, a1 + 656);
  mediaplatform::ColumnNamesApplier::operator()<std::string>((uint64_t)a2, a1 + 592);
  mediaplatform::ColumnNamesApplier::operator()<int>((uint64_t)a2, a1 + 544);
  mediaplatform::ColumnNamesApplier::operator()<long long>((uint64_t)a2, a1 + 496);
  mediaplatform::ColumnNamesApplier::operator()<int>((uint64_t)a2, a1 + 448);
  mediaplatform::ColumnNamesApplier::operator()<int>((uint64_t)a2, a1 + 400);
  mediaplatform::ColumnNamesApplier::operator()<int>((uint64_t)a2, a1 + 352);
  mediaplatform::ColumnNamesApplier::operator()<std::string>((uint64_t)a2, a1 + 288);
  mediaplatform::ColumnNamesApplier::operator()<std::string>((uint64_t)a2, a1 + 224);
  mediaplatform::ColumnNamesApplier::operator()<long long>((uint64_t)a2, a1 + 176);
  mediaplatform::ColumnNamesApplier::operator()<int>((uint64_t)a2, a1 + 128);
  mediaplatform::ColumnNamesApplier::operator()<int>((uint64_t)a2, a1 + 80);
}

void sub_20A653BD8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void mediaplatform::DatabaseTable<long long,std::string,std::string,long long,long long,mediaplatform::Data,int,int,int,int,std::string,int,int,int,int,int,int,mediaplatform::Data,int,long long,long long,long long,int,long long,std::string,long long>::columnNames(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  mediaplatform::ColumnNamesApplier::operator()<long long>((uint64_t)a2, a1 + 1408);
  mediaplatform::ColumnNamesApplier::operator()<std::string>((uint64_t)a2, a1 + 1344);
  mediaplatform::ColumnNamesApplier::operator()<std::string>((uint64_t)a2, a1 + 1280);
  mediaplatform::ColumnNamesApplier::operator()<long long>((uint64_t)a2, a1 + 1232);
  mediaplatform::ColumnNamesApplier::operator()<long long>((uint64_t)a2, a1 + 1184);
  mediaplatform::ColumnNamesApplier::operator()<mediaplatform::Data>((uint64_t)a2, a1 + 1104);
  mediaplatform::ColumnNamesApplier::operator()<int>((uint64_t)a2, a1 + 1056);
  mediaplatform::ColumnNamesApplier::operator()<int>((uint64_t)a2, a1 + 1008);
  mediaplatform::ColumnNamesApplier::operator()<int>((uint64_t)a2, a1 + 960);
  mediaplatform::ColumnNamesApplier::operator()<int>((uint64_t)a2, a1 + 912);
  mediaplatform::ColumnNamesApplier::operator()<std::string>((uint64_t)a2, a1 + 848);
  mediaplatform::ColumnNamesApplier::operator()<int>((uint64_t)a2, a1 + 800);
  mediaplatform::ColumnNamesApplier::operator()<int>((uint64_t)a2, a1 + 752);
  mediaplatform::ColumnNamesApplier::operator()<int>((uint64_t)a2, a1 + 704);
  mediaplatform::ColumnNamesApplier::operator()<int>((uint64_t)a2, a1 + 656);
  mediaplatform::ColumnNamesApplier::operator()<int>((uint64_t)a2, a1 + 608);
  mediaplatform::ColumnNamesApplier::operator()<int>((uint64_t)a2, a1 + 560);
  mediaplatform::ColumnNamesApplier::operator()<mediaplatform::Data>((uint64_t)a2, a1 + 480);
  mediaplatform::ColumnNamesApplier::operator()<int>((uint64_t)a2, a1 + 432);
  mediaplatform::ColumnNamesApplier::operator()<long long>((uint64_t)a2, a1 + 384);
  mediaplatform::ColumnNamesApplier::operator()<long long>((uint64_t)a2, a1 + 336);
  mediaplatform::ColumnNamesApplier::operator()<long long>((uint64_t)a2, a1 + 288);
  mediaplatform::ColumnNamesApplier::operator()<int>((uint64_t)a2, a1 + 240);
  mediaplatform::ColumnNamesApplier::operator()<long long>((uint64_t)a2, a1 + 192);
  mediaplatform::ColumnNamesApplier::operator()<std::string>((uint64_t)a2, a1 + 128);
  mediaplatform::ColumnNamesApplier::operator()<long long>((uint64_t)a2, a1 + 80);
}

void sub_20A653D58(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void mediaplatform::DatabaseTable<long long,int,long long,int,long long,long long,int,long long,int,long long,long long,int,long long,long long,int,long long,long long,int,long long,long long,int,int,int,int,long long,long long,int,int,int,int,int,int,int,long long,int,long long,long long,long long>::columnNames(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  mediaplatform::ColumnNamesApplier::operator()<long long>((uint64_t)a2, a1 + 1856);
  mediaplatform::ColumnNamesApplier::operator()<int>((uint64_t)a2, a1 + 1808);
  mediaplatform::ColumnNamesApplier::operator()<long long>((uint64_t)a2, a1 + 1760);
  mediaplatform::ColumnNamesApplier::operator()<int>((uint64_t)a2, a1 + 1712);
  mediaplatform::ColumnNamesApplier::operator()<long long>((uint64_t)a2, a1 + 1664);
  mediaplatform::ColumnNamesApplier::operator()<long long>((uint64_t)a2, a1 + 1616);
  mediaplatform::ColumnNamesApplier::operator()<int>((uint64_t)a2, a1 + 1568);
  mediaplatform::ColumnNamesApplier::operator()<long long>((uint64_t)a2, a1 + 1520);
  mediaplatform::ColumnNamesApplier::operator()<int>((uint64_t)a2, a1 + 1472);
  mediaplatform::ColumnNamesApplier::operator()<long long>((uint64_t)a2, a1 + 1424);
  mediaplatform::ColumnNamesApplier::operator()<long long>((uint64_t)a2, a1 + 1376);
  mediaplatform::ColumnNamesApplier::operator()<int>((uint64_t)a2, a1 + 1328);
  mediaplatform::ColumnNamesApplier::operator()<long long>((uint64_t)a2, a1 + 1280);
  mediaplatform::ColumnNamesApplier::operator()<long long>((uint64_t)a2, a1 + 1232);
  mediaplatform::ColumnNamesApplier::operator()<int>((uint64_t)a2, a1 + 1184);
  mediaplatform::ColumnNamesApplier::operator()<long long>((uint64_t)a2, a1 + 1136);
  mediaplatform::ColumnNamesApplier::operator()<long long>((uint64_t)a2, a1 + 1088);
  mediaplatform::ColumnNamesApplier::operator()<int>((uint64_t)a2, a1 + 1040);
  mediaplatform::ColumnNamesApplier::operator()<long long>((uint64_t)a2, a1 + 992);
  mediaplatform::ColumnNamesApplier::operator()<long long>((uint64_t)a2, a1 + 944);
  mediaplatform::ColumnNamesApplier::operator()<int>((uint64_t)a2, a1 + 896);
  mediaplatform::ColumnNamesApplier::operator()<int>((uint64_t)a2, a1 + 848);
  mediaplatform::ColumnNamesApplier::operator()<int>((uint64_t)a2, a1 + 800);
  mediaplatform::ColumnNamesApplier::operator()<int>((uint64_t)a2, a1 + 752);
  mediaplatform::ColumnNamesApplier::operator()<long long>((uint64_t)a2, a1 + 704);
  mediaplatform::ColumnNamesApplier::operator()<long long>((uint64_t)a2, a1 + 656);
  mediaplatform::ColumnNamesApplier::operator()<int>((uint64_t)a2, a1 + 608);
  mediaplatform::ColumnNamesApplier::operator()<int>((uint64_t)a2, a1 + 560);
  mediaplatform::ColumnNamesApplier::operator()<int>((uint64_t)a2, a1 + 512);
  mediaplatform::ColumnNamesApplier::operator()<int>((uint64_t)a2, a1 + 464);
  mediaplatform::ColumnNamesApplier::operator()<int>((uint64_t)a2, a1 + 416);
  mediaplatform::ColumnNamesApplier::operator()<int>((uint64_t)a2, a1 + 368);
  mediaplatform::ColumnNamesApplier::operator()<int>((uint64_t)a2, a1 + 320);
  mediaplatform::ColumnNamesApplier::operator()<long long>((uint64_t)a2, a1 + 272);
  mediaplatform::ColumnNamesApplier::operator()<int>((uint64_t)a2, a1 + 224);
  mediaplatform::ColumnNamesApplier::operator()<long long>((uint64_t)a2, a1 + 176);
  mediaplatform::ColumnNamesApplier::operator()<long long>((uint64_t)a2, a1 + 128);
  mediaplatform::ColumnNamesApplier::operator()<long long>((uint64_t)a2, a1 + 80);
}

void sub_20A653F68(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void mediaplatform::ColumnNamesApplier::operator()<int>(uint64_t a1, uint64_t a2)
{
  unint64_t v3;
  std::string *v4;
  std::string *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  std::string *v11;
  std::string v12;
  std::__split_buffer<std::string> __v;

  if (*(char *)(a2 + 31) < 0)
    std::string::__init_copy_ctor_external(&v12, *(const std::string::value_type **)(a2 + 8), *(_QWORD *)(a2 + 16));
  else
    v12 = *(std::string *)(a2 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  v4 = *(std::string **)(a1 + 8);
  if ((unint64_t)v4 >= v3)
  {
    v6 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v4 - *(_QWORD *)a1) >> 3);
    v7 = v6 + 1;
    if (v6 + 1 > 0xAAAAAAAAAAAAAAALL)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v8 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v3 - *(_QWORD *)a1) >> 3);
    if (2 * v8 > v7)
      v7 = 2 * v8;
    if (v8 >= 0x555555555555555)
      v9 = 0xAAAAAAAAAAAAAAALL;
    else
      v9 = v7;
    __v.__end_cap_.__value_ = (std::allocator<std::string> *)(a1 + 16);
    if (v9)
      v9 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v9);
    else
      v10 = 0;
    v11 = (std::string *)(v9 + 24 * v6);
    __v.__first_ = (std::__split_buffer<std::string>::pointer)v9;
    __v.__begin_ = v11;
    __v.__end_cap_.__value_ = (std::string *)(v9 + 24 * v10);
    *v11 = v12;
    memset(&v12, 0, sizeof(v12));
    __v.__end_ = v11 + 1;
    std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)a1, &__v);
    v5 = *(std::string **)(a1 + 8);
    std::__split_buffer<std::string>::~__split_buffer(&__v);
  }
  else
  {
    *v4 = v12;
    v5 = v4 + 1;
  }
  *(_QWORD *)(a1 + 8) = v5;
}

void sub_20A6540C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void mediaplatform::ColumnNamesApplier::operator()<long long>(uint64_t a1, uint64_t a2)
{
  unint64_t v3;
  std::string *v4;
  std::string *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  std::string *v11;
  std::string v12;
  std::__split_buffer<std::string> __v;

  if (*(char *)(a2 + 31) < 0)
    std::string::__init_copy_ctor_external(&v12, *(const std::string::value_type **)(a2 + 8), *(_QWORD *)(a2 + 16));
  else
    v12 = *(std::string *)(a2 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  v4 = *(std::string **)(a1 + 8);
  if ((unint64_t)v4 >= v3)
  {
    v6 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v4 - *(_QWORD *)a1) >> 3);
    v7 = v6 + 1;
    if (v6 + 1 > 0xAAAAAAAAAAAAAAALL)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v8 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v3 - *(_QWORD *)a1) >> 3);
    if (2 * v8 > v7)
      v7 = 2 * v8;
    if (v8 >= 0x555555555555555)
      v9 = 0xAAAAAAAAAAAAAAALL;
    else
      v9 = v7;
    __v.__end_cap_.__value_ = (std::allocator<std::string> *)(a1 + 16);
    if (v9)
      v9 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v9);
    else
      v10 = 0;
    v11 = (std::string *)(v9 + 24 * v6);
    __v.__first_ = (std::__split_buffer<std::string>::pointer)v9;
    __v.__begin_ = v11;
    __v.__end_cap_.__value_ = (std::string *)(v9 + 24 * v10);
    *v11 = v12;
    memset(&v12, 0, sizeof(v12));
    __v.__end_ = v11 + 1;
    std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)a1, &__v);
    v5 = *(std::string **)(a1 + 8);
    std::__split_buffer<std::string>::~__split_buffer(&__v);
  }
  else
  {
    *v4 = v12;
    v5 = v4 + 1;
  }
  *(_QWORD *)(a1 + 8) = v5;
}

void sub_20A65421C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::__split_buffer<std::string>::~__split_buffer(std::__split_buffer<std::string> *this)
{
  std::__split_buffer<std::string>::pointer end;
  std::__split_buffer<std::string>::pointer begin;
  std::__split_buffer<std::string>::pointer v4;

  begin = this->__begin_;
  end = this->__end_;
  if (end != begin)
  {
    do
    {
      v4 = end - 1;
      this->__end_ = end - 1;
      if (SHIBYTE(end[-1].__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v4->__r_.__value_.__l.__data_);
        v4 = this->__end_;
      }
      end = v4;
    }
    while (v4 != begin);
  }
  if (this->__first_)
    operator delete(this->__first_);
}

void std::vector<std::string>::__swap_out_circular_buffer(std::vector<std::string> *this, std::__split_buffer<std::string> *__v)
{
  std::string *v4;
  std::string *begin;
  std::string *end;
  std::string *value;

  v4 = (std::string *)std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::string>,std::reverse_iterator<std::string*>,std::reverse_iterator<std::string*>,std::reverse_iterator<std::string*>>((uint64_t)&this->__end_cap_, (uint64_t)this->__end_, (uint64_t)this->__end_, (uint64_t)this->__begin_, (uint64_t)this->__begin_, (uint64_t)__v->__begin_, (uint64_t)__v->__begin_);
  __v->__begin_ = v4;
  begin = this->__begin_;
  this->__begin_ = v4;
  __v->__begin_ = begin;
  end = this->__end_;
  this->__end_ = __v->__end_;
  __v->__end_ = end;
  value = this->__end_cap_.__value_;
  this->__end_cap_.__value_ = __v->__end_cap_.__value_;
  __v->__end_cap_.__value_ = value;
  __v->__first_ = __v->__begin_;
}

void mediaplatform::ColumnNamesApplier::operator()<std::string>(uint64_t a1, uint64_t a2)
{
  unint64_t v3;
  std::string *v4;
  std::string *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  std::string *v11;
  std::string v12;
  std::__split_buffer<std::string> __v;

  if (*(char *)(a2 + 31) < 0)
    std::string::__init_copy_ctor_external(&v12, *(const std::string::value_type **)(a2 + 8), *(_QWORD *)(a2 + 16));
  else
    v12 = *(std::string *)(a2 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  v4 = *(std::string **)(a1 + 8);
  if ((unint64_t)v4 >= v3)
  {
    v6 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v4 - *(_QWORD *)a1) >> 3);
    v7 = v6 + 1;
    if (v6 + 1 > 0xAAAAAAAAAAAAAAALL)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v8 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v3 - *(_QWORD *)a1) >> 3);
    if (2 * v8 > v7)
      v7 = 2 * v8;
    if (v8 >= 0x555555555555555)
      v9 = 0xAAAAAAAAAAAAAAALL;
    else
      v9 = v7;
    __v.__end_cap_.__value_ = (std::allocator<std::string> *)(a1 + 16);
    if (v9)
      v9 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v9);
    else
      v10 = 0;
    v11 = (std::string *)(v9 + 24 * v6);
    __v.__first_ = (std::__split_buffer<std::string>::pointer)v9;
    __v.__begin_ = v11;
    __v.__end_cap_.__value_ = (std::string *)(v9 + 24 * v10);
    *v11 = v12;
    memset(&v12, 0, sizeof(v12));
    __v.__end_ = v11 + 1;
    std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)a1, &__v);
    v5 = *(std::string **)(a1 + 8);
    std::__split_buffer<std::string>::~__split_buffer(&__v);
  }
  else
  {
    *v4 = v12;
    v5 = v4 + 1;
  }
  *(_QWORD *)(a1 + 8) = v5;
}

void sub_20A65444C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void mediaplatform::ColumnNamesApplier::operator()<mediaplatform::Data>(uint64_t a1, uint64_t a2)
{
  unint64_t v3;
  std::string *v4;
  std::string *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  std::string *v11;
  std::string v12;
  std::__split_buffer<std::string> __v;

  if (*(char *)(a2 + 31) < 0)
    std::string::__init_copy_ctor_external(&v12, *(const std::string::value_type **)(a2 + 8), *(_QWORD *)(a2 + 16));
  else
    v12 = *(std::string *)(a2 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  v4 = *(std::string **)(a1 + 8);
  if ((unint64_t)v4 >= v3)
  {
    v6 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v4 - *(_QWORD *)a1) >> 3);
    v7 = v6 + 1;
    if (v6 + 1 > 0xAAAAAAAAAAAAAAALL)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v8 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v3 - *(_QWORD *)a1) >> 3);
    if (2 * v8 > v7)
      v7 = 2 * v8;
    if (v8 >= 0x555555555555555)
      v9 = 0xAAAAAAAAAAAAAAALL;
    else
      v9 = v7;
    __v.__end_cap_.__value_ = (std::allocator<std::string> *)(a1 + 16);
    if (v9)
      v9 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v9);
    else
      v10 = 0;
    v11 = (std::string *)(v9 + 24 * v6);
    __v.__first_ = (std::__split_buffer<std::string>::pointer)v9;
    __v.__begin_ = v11;
    __v.__end_cap_.__value_ = (std::string *)(v9 + 24 * v10);
    *v11 = v12;
    memset(&v12, 0, sizeof(v12));
    __v.__end_ = v11 + 1;
    std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)a1, &__v);
    v5 = *(std::string **)(a1 + 8);
    std::__split_buffer<std::string>::~__split_buffer(&__v);
  }
  else
  {
    *v4 = v12;
    v5 = v4 + 1;
  }
  *(_QWORD *)(a1 + 8) = v5;
}

void sub_20A6545A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::vector<std::string>::__vdeallocate(std::vector<std::string> *this)
{
  if (this->__begin_)
  {
    std::vector<std::string>::__clear[abi:ne180100]((uint64_t *)this);
    operator delete(this->__begin_);
    this->__begin_ = 0;
    this->__end_ = 0;
    this->__end_cap_.__value_ = 0;
  }
}

uint64_t std::__shared_ptr_emplace<mediaplatform::SQLBinaryExpressionList>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t std::__shared_ptr_emplace<mediaplatform::SQLOnJoinConstraint>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t std::__shared_ptr_emplace<mediaplatform::SQLFromStatement>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t mlcore::QueryResult::error(mlcore::QueryResult *this)
{
  return (uint64_t)this + 8;
}

uint64_t mlcore::ContentRestrictions::ContentRestrictions(uint64_t this, char a2, char a3, char a4, int a5, int a6)
{
  *(_BYTE *)this = a2;
  *(_BYTE *)(this + 1) = a3;
  *(_BYTE *)(this + 2) = a4;
  *(_DWORD *)(this + 4) = a5;
  *(_DWORD *)(this + 8) = a6;
  return this;
}

{
  *(_BYTE *)this = a2;
  *(_BYTE *)(this + 1) = a3;
  *(_BYTE *)(this + 2) = a4;
  *(_DWORD *)(this + 4) = a5;
  *(_DWORD *)(this + 8) = a6;
  return this;
}

uint64_t mlcore::LibraryView::setContentRestrictions(uint64_t this, const mlcore::ContentRestrictions *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)a2;
  *(_DWORD *)(this + 56) = *((_DWORD *)a2 + 2);
  *(_QWORD *)(this + 48) = v2;
  return this;
}

_QWORD *mlcore::SQLRenderer::stringForDatabaseBindParameter@<X0>(mlcore::SQLRenderer *this@<X0>, const mediaplatform::DatabaseBindParameter *a2@<X1>, _QWORD *a3@<X8>)
{
  mediaplatform::DatabaseParameterList::add((_QWORD *)this + 4, (__int128 *)((char *)a2 + 8));
  return std::string::basic_string[abi:ne180100]<0>(a3, "?");
}

uint64_t std::__shared_ptr_emplace<mediaplatform::SQLNotExpression>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void mlcore::EntityQuery::_SQLResultColumnExpressions(uint64_t a1@<X0>, const mlcore::EntityClass *a2@<X1>, char **a3@<X8>)
{
  __int128 v6;
  unint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  __int128 v20;
  int64x2_t v21;
  char *v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *p_shared_owners;
  unint64_t v30;
  __int128 v31;
  char *v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  char *v38;
  uint64_t v39;
  char *v40;
  char *v41;
  char *v42;
  char *v43;
  __int128 v44;
  int64x2_t v45;
  char *v46;
  char *v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  uint64_t v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  __int128 v58;
  char *v59;
  unint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  unint64_t v64;
  char *v65;
  uint64_t v66;
  char *v67;
  char *v68;
  char *v69;
  char *v70;
  __int128 v71;
  int64x2_t v72;
  char *v73;
  char *v74;
  std::__shared_weak_count *v75;
  unint64_t *v76;
  unint64_t v77;
  std::__shared_weak_count *v78;
  unint64_t *v79;
  unint64_t v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  uint64_t v84;
  std::__shared_weak_count *v85;
  uint64_t v86;
  std::__shared_weak_count *v87;
  __int128 v88;
  __int128 v89;
  uint64_t v90;
  int64x2_t v91;
  char *v92;
  _QWORD *v93;

  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  mlcore::SQLColumnNameFromEntityPrimaryKey(*(mlcore **)(a1 + 8), a2, &v88);
  v6 = v88;
  v89 = v88;
  v88 = 0uLL;
  v7 = (unint64_t)a3[2];
  v8 = a3[1];
  if ((unint64_t)v8 >= v7)
  {
    v81 = v6;
    v10 = (v8 - *a3) >> 4;
    if ((unint64_t)(v10 + 1) >> 60)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v11 = v7 - (_QWORD)*a3;
    v12 = v11 >> 3;
    if (v11 >> 3 <= (unint64_t)(v10 + 1))
      v12 = v10 + 1;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF0)
      v13 = 0xFFFFFFFFFFFFFFFLL;
    else
      v13 = v12;
    v93 = a3 + 2;
    v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<mediaplatform::DatabaseParameterBase>>>(v13);
    v16 = &v14[16 * v10];
    *(_OWORD *)v16 = v81;
    v89 = 0uLL;
    v18 = *a3;
    v17 = a3[1];
    if (v17 == *a3)
    {
      v21 = vdupq_n_s64((unint64_t)v17);
      v19 = &v14[16 * v10];
    }
    else
    {
      v19 = &v14[16 * v10];
      do
      {
        v20 = *((_OWORD *)v17 - 1);
        v17 -= 16;
        *((_OWORD *)v19 - 1) = v20;
        v19 -= 16;
        *(_QWORD *)v17 = 0;
        *((_QWORD *)v17 + 1) = 0;
      }
      while (v17 != v18);
      v21 = *(int64x2_t *)a3;
    }
    v9 = v16 + 16;
    *a3 = v19;
    a3[1] = v16 + 16;
    v91 = v21;
    v22 = a3[2];
    a3[2] = &v14[16 * v15];
    v92 = v22;
    v90 = v21.i64[0];
    std::__split_buffer<std::shared_ptr<mediaplatform::SQLExpression const>>::~__split_buffer((uint64_t)&v90);
  }
  else
  {
    *(_OWORD *)v8 = v6;
    v9 = v8 + 16;
    v89 = 0uLL;
  }
  a3[1] = v9;
  v23 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 112))(*(_QWORD *)(a1 + 8));
  v24 = *(uint64_t **)(a1 + 104);
  v25 = *(uint64_t **)(a1 + 112);
  if (v24 != v25)
  {
    v26 = v23;
    do
    {
      v27 = *v24;
      if (*v24 != v26)
      {
        v28 = (std::__shared_weak_count *)*((_QWORD *)a2 + 1);
        v86 = *(_QWORD *)a2;
        v87 = v28;
        if (v28)
        {
          p_shared_owners = (unint64_t *)&v28->__shared_owners_;
          do
            v30 = __ldxr(p_shared_owners);
          while (__stxr(v30 + 1, p_shared_owners));
        }
        (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t *))(*(_QWORD *)v27 + 96))(&v88, v27, &v86);
        v31 = v88;
        v89 = v88;
        v88 = 0uLL;
        v32 = a3[1];
        v33 = (unint64_t)a3[2];
        if ((unint64_t)v32 >= v33)
        {
          v82 = v31;
          v34 = (v32 - *a3) >> 4;
          v35 = v34 + 1;
          if ((unint64_t)(v34 + 1) >> 60)
            std::vector<std::string>::__throw_length_error[abi:ne180100]();
          v36 = v33 - (_QWORD)*a3;
          if (v36 >> 3 > v35)
            v35 = v36 >> 3;
          if ((unint64_t)v36 >= 0x7FFFFFFFFFFFFFF0)
            v37 = 0xFFFFFFFFFFFFFFFLL;
          else
            v37 = v35;
          v93 = a3 + 2;
          v38 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<mediaplatform::DatabaseParameterBase>>>(v37);
          v40 = &v38[16 * v34];
          *(_OWORD *)v40 = v82;
          v89 = 0uLL;
          v42 = *a3;
          v41 = a3[1];
          if (v41 == *a3)
          {
            v45 = vdupq_n_s64((unint64_t)v41);
            v43 = &v38[16 * v34];
          }
          else
          {
            v43 = &v38[16 * v34];
            do
            {
              v44 = *((_OWORD *)v41 - 1);
              v41 -= 16;
              *((_OWORD *)v43 - 1) = v44;
              v43 -= 16;
              *(_QWORD *)v41 = 0;
              *((_QWORD *)v41 + 1) = 0;
            }
            while (v41 != v42);
            v45 = *(int64x2_t *)a3;
          }
          v46 = v40 + 16;
          *a3 = v43;
          a3[1] = v40 + 16;
          v91 = v45;
          v47 = a3[2];
          a3[2] = &v38[16 * v39];
          v92 = v47;
          v90 = v45.i64[0];
          std::__split_buffer<std::shared_ptr<mediaplatform::SQLExpression const>>::~__split_buffer((uint64_t)&v90);
          v48 = (std::__shared_weak_count *)*((_QWORD *)&v88 + 1);
          a3[1] = v46;
          if (v48)
          {
            v49 = (unint64_t *)&v48->__shared_owners_;
            do
              v50 = __ldaxr(v49);
            while (__stlxr(v50 - 1, v49));
            if (!v50)
            {
              ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
              std::__shared_weak_count::__release_weak(v48);
            }
          }
        }
        else
        {
          *(_OWORD *)v32 = v31;
          v89 = 0uLL;
          a3[1] = v32 + 16;
        }
        v51 = v87;
        if (v87)
        {
          v52 = (unint64_t *)&v87->__shared_owners_;
          do
            v53 = __ldaxr(v52);
          while (__stlxr(v53 - 1, v52));
          if (!v53)
          {
            ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
            std::__shared_weak_count::__release_weak(v51);
          }
        }
      }
      ++v24;
    }
    while (v24 != v25);
  }
  v54 = mlcore::EntityQuery::_sectionProperty((mlcore::EntityQuery *)a1);
  if (v54)
  {
    v55 = (std::__shared_weak_count *)*((_QWORD *)a2 + 1);
    v84 = *(_QWORD *)a2;
    v85 = v55;
    if (v55)
    {
      v56 = (unint64_t *)&v55->__shared_owners_;
      do
        v57 = __ldxr(v56);
      while (__stxr(v57 + 1, v56));
    }
    (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t *))(*(_QWORD *)v54 + 96))(&v88, v54, &v84);
    v58 = v88;
    v89 = v88;
    v88 = 0uLL;
    v59 = a3[1];
    v60 = (unint64_t)a3[2];
    if ((unint64_t)v59 >= v60)
    {
      v83 = v58;
      v61 = (v59 - *a3) >> 4;
      v62 = v61 + 1;
      if ((unint64_t)(v61 + 1) >> 60)
        std::vector<std::string>::__throw_length_error[abi:ne180100]();
      v63 = v60 - (_QWORD)*a3;
      if (v63 >> 3 > v62)
        v62 = v63 >> 3;
      if ((unint64_t)v63 >= 0x7FFFFFFFFFFFFFF0)
        v64 = 0xFFFFFFFFFFFFFFFLL;
      else
        v64 = v62;
      v93 = a3 + 2;
      v65 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<mediaplatform::DatabaseParameterBase>>>(v64);
      v67 = &v65[16 * v61];
      *(_OWORD *)v67 = v83;
      v89 = 0uLL;
      v69 = *a3;
      v68 = a3[1];
      if (v68 == *a3)
      {
        v72 = vdupq_n_s64((unint64_t)v68);
        v70 = &v65[16 * v61];
      }
      else
      {
        v70 = &v65[16 * v61];
        do
        {
          v71 = *((_OWORD *)v68 - 1);
          v68 -= 16;
          *((_OWORD *)v70 - 1) = v71;
          v70 -= 16;
          *(_QWORD *)v68 = 0;
          *((_QWORD *)v68 + 1) = 0;
        }
        while (v68 != v69);
        v72 = *(int64x2_t *)a3;
      }
      v73 = v67 + 16;
      *a3 = v70;
      a3[1] = v67 + 16;
      v91 = v72;
      v74 = a3[2];
      a3[2] = &v65[16 * v66];
      v92 = v74;
      v90 = v72.i64[0];
      std::__split_buffer<std::shared_ptr<mediaplatform::SQLExpression const>>::~__split_buffer((uint64_t)&v90);
      v75 = (std::__shared_weak_count *)*((_QWORD *)&v88 + 1);
      a3[1] = v73;
      if (v75)
      {
        v76 = (unint64_t *)&v75->__shared_owners_;
        do
          v77 = __ldaxr(v76);
        while (__stlxr(v77 - 1, v76));
        if (!v77)
        {
          ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
          std::__shared_weak_count::__release_weak(v75);
        }
      }
    }
    else
    {
      *(_OWORD *)v59 = v58;
      v89 = 0uLL;
      a3[1] = v59 + 16;
    }
    v78 = v85;
    if (v85)
    {
      v79 = (unint64_t *)&v85->__shared_owners_;
      do
        v80 = __ldaxr(v79);
      while (__stlxr(v80 - 1, v79));
      if (!v80)
      {
        ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
        std::__shared_weak_count::__release_weak(v78);
      }
    }
  }
}

void sub_20A654B3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  va_list va1;
  uint64_t v11;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v9 = va_arg(va2, _QWORD);
  v11 = va_arg(va2, _QWORD);
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)va2);
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__destroy_vector::operator()[abi:ne180100]((void ***)va2);
  _Unwind_Resume(a1);
}

void mlcore::PropertiesQuery::_SQLResultColumnExpressions(uint64_t a1@<X0>, uint64_t *a2@<X1>, char **a3@<X8>)
{
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  __int128 v11;
  char *v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  char *v22;
  char *v23;
  __int128 v24;
  int64x2_t v25;
  char *v26;
  char *v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  __int128 v34;
  unint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  char *v42;
  uint64_t v43;
  char *v44;
  char *v45;
  char *v46;
  char *v47;
  __int128 v48;
  int64x2_t v49;
  char *v50;
  __int128 v51;
  __int128 v52;
  uint64_t v53;
  std::__shared_weak_count *v54;
  __int128 v55;
  __int128 v56;
  void *__p;
  int64x2_t v58;
  _QWORD v59[5];
  _BYTE v60[24];
  char *v61;
  _QWORD *v62;

  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  (*(void (**)(void **__return_ptr))(*(_QWORD *)a1 + 120))(&__p);
  v5 = (uint64_t *)__p;
  v6 = (uint64_t *)v58.i64[0];
  if (__p != (void *)v58.i64[0])
  {
    do
    {
      v7 = *v5;
      v8 = (std::__shared_weak_count *)a2[1];
      v53 = *a2;
      v54 = v8;
      if (v8)
      {
        p_shared_owners = (unint64_t *)&v8->__shared_owners_;
        do
          v10 = __ldxr(p_shared_owners);
        while (__stxr(v10 + 1, p_shared_owners));
      }
      (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t *))(*(_QWORD *)v7 + 96))(&v55, v7, &v53);
      v11 = v55;
      v56 = v55;
      v55 = 0uLL;
      v12 = a3[1];
      v13 = (unint64_t)a3[2];
      if ((unint64_t)v12 >= v13)
      {
        v51 = v11;
        v14 = (v12 - *a3) >> 4;
        v15 = v14 + 1;
        if ((unint64_t)(v14 + 1) >> 60)
          std::vector<std::string>::__throw_length_error[abi:ne180100]();
        v16 = v13 - (_QWORD)*a3;
        if (v16 >> 3 > v15)
          v15 = v16 >> 3;
        if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF0)
          v17 = 0xFFFFFFFFFFFFFFFLL;
        else
          v17 = v15;
        v62 = a3 + 2;
        v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<mediaplatform::DatabaseParameterBase>>>(v17);
        v20 = &v18[16 * v14];
        *(_OWORD *)v20 = v51;
        v56 = 0uLL;
        v22 = *a3;
        v21 = a3[1];
        if (v21 == *a3)
        {
          v25 = vdupq_n_s64((unint64_t)v21);
          v23 = &v18[16 * v14];
        }
        else
        {
          v23 = &v18[16 * v14];
          do
          {
            v24 = *((_OWORD *)v21 - 1);
            v21 -= 16;
            *((_OWORD *)v23 - 1) = v24;
            v23 -= 16;
            *(_QWORD *)v21 = 0;
            *((_QWORD *)v21 + 1) = 0;
          }
          while (v21 != v22);
          v25 = *(int64x2_t *)a3;
        }
        v26 = v20 + 16;
        *a3 = v23;
        a3[1] = v20 + 16;
        *(int64x2_t *)&v60[8] = v25;
        v27 = a3[2];
        a3[2] = &v18[16 * v19];
        v61 = v27;
        *(_QWORD *)v60 = v25.i64[0];
        std::__split_buffer<std::shared_ptr<mediaplatform::SQLExpression const>>::~__split_buffer((uint64_t)v60);
        v28 = (std::__shared_weak_count *)*((_QWORD *)&v55 + 1);
        a3[1] = v26;
        if (v28)
        {
          v29 = (unint64_t *)&v28->__shared_owners_;
          do
            v30 = __ldaxr(v29);
          while (__stlxr(v30 - 1, v29));
          if (!v30)
          {
            ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
            std::__shared_weak_count::__release_weak(v28);
          }
        }
      }
      else
      {
        *(_OWORD *)v12 = v11;
        v56 = 0uLL;
        a3[1] = v12 + 16;
      }
      v31 = v54;
      if (v54)
      {
        v32 = (unint64_t *)&v54->__shared_owners_;
        do
          v33 = __ldaxr(v32);
        while (__stlxr(v33 - 1, v32));
        if (!v33)
        {
          ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
          std::__shared_weak_count::__release_weak(v31);
        }
      }
      ++v5;
    }
    while (v5 != v6);
  }
  std::__hash_table<mlcore::ModelPropertyBase *,std::hash<mlcore::ModelPropertyBase *>,std::equal_to<mlcore::ModelPropertyBase *>,std::allocator<mlcore::ModelPropertyBase *>>::~__hash_table((uint64_t)v59);
  if (__p)
  {
    v58.i64[0] = (uint64_t)__p;
    operator delete(__p);
  }
  if (a3[1] == *a3)
  {
    LODWORD(v55) = 1;
    std::allocate_shared[abi:ne180100]<mediaplatform::SQLLiteralValue<int>,std::allocator<mediaplatform::SQLLiteralValue<int>>,int,void>(&v56, &v55);
    v34 = v56;
    *(_OWORD *)v60 = v56;
    v56 = 0uLL;
    v35 = (unint64_t)a3[2];
    v36 = a3[1];
    if ((unint64_t)v36 >= v35)
    {
      v52 = v34;
      v38 = (v36 - *a3) >> 4;
      if ((unint64_t)(v38 + 1) >> 60)
        std::vector<std::string>::__throw_length_error[abi:ne180100]();
      v39 = v35 - (_QWORD)*a3;
      v40 = v39 >> 3;
      if (v39 >> 3 <= (unint64_t)(v38 + 1))
        v40 = v38 + 1;
      if ((unint64_t)v39 >= 0x7FFFFFFFFFFFFFF0)
        v41 = 0xFFFFFFFFFFFFFFFLL;
      else
        v41 = v40;
      v59[1] = a3 + 2;
      v42 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<mediaplatform::DatabaseParameterBase>>>(v41);
      v44 = &v42[16 * v38];
      *(_OWORD *)v44 = v52;
      *(_OWORD *)v60 = 0uLL;
      v46 = *a3;
      v45 = a3[1];
      if (v45 == *a3)
      {
        v49 = vdupq_n_s64((unint64_t)v45);
        v47 = &v42[16 * v38];
      }
      else
      {
        v47 = &v42[16 * v38];
        do
        {
          v48 = *((_OWORD *)v45 - 1);
          v45 -= 16;
          *((_OWORD *)v47 - 1) = v48;
          v47 -= 16;
          *(_QWORD *)v45 = 0;
          *((_QWORD *)v45 + 1) = 0;
        }
        while (v45 != v46);
        v49 = *(int64x2_t *)a3;
      }
      v37 = v44 + 16;
      *a3 = v47;
      a3[1] = v44 + 16;
      v58 = v49;
      v50 = a3[2];
      a3[2] = &v42[16 * v43];
      v59[0] = v50;
      __p = (void *)v49.i64[0];
      std::__split_buffer<std::shared_ptr<mediaplatform::SQLExpression const>>::~__split_buffer((uint64_t)&__p);
    }
    else
    {
      *(_OWORD *)v36 = v34;
      v37 = v36 + 16;
      *(_OWORD *)v60 = 0uLL;
    }
    a3[1] = v37;
  }
}

void sub_20A654EF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  void **v8;
  va_list va;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  va_list va1;

  va_start(va1, a7);
  va_start(va, a7);
  v8 = va_arg(va1, void **);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);
  v18 = va_arg(va1, _QWORD);
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void mlcore::SQLShortColumnNameFromEntityPrimaryKey(mlcore *this@<X0>, const mlcore::EntityClass *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v4;
  __int128 *v5[3];
  __int128 **v6;

  v4 = (*(uint64_t (**)(mlcore *, const mlcore::EntityClass *))(*(_QWORD *)this + 88))(this, a2);
  (*(void (**)(__int128 **__return_ptr))(*(_QWORD *)v4 + 24))(v5);
  std::allocate_shared[abi:ne180100]<mediaplatform::SQLColumnNameExpression,std::allocator<mediaplatform::SQLColumnNameExpression>,std::string &,void>(a3, v5[0]);
  v6 = v5;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v6);
}

void sub_20A654FB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

double mlcore::DatabaseModelProperty<long long>::_SQLExpression@<D0>(mlcore *a1@<X0>, const mlcore::ModelPropertyBase *a2@<X1>, _OWORD *a3@<X8>)
{
  double result;
  __int128 v5;

  mlcore::SQLColumnNameFromProperty(a1, a2, &v5);
  result = *(double *)&v5;
  *a3 = v5;
  return result;
}

void mlcore::SQLColumnNameFromProperty(mlcore *this@<X0>, const mlcore::ModelPropertyBase *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  void *v8;
  void *v9;
  std::string v10;
  void *__p[2];
  char v12;

  v5 = (*(uint64_t (**)(mlcore *, const mlcore::ModelPropertyBase *))(*(_QWORD *)this + 72))(this, a2);
  if (*(char *)(v5 + 31) < 0)
    std::string::__init_copy_ctor_external(&v10, *(const std::string::value_type **)(v5 + 8), *(_QWORD *)(v5 + 16));
  else
    v10 = *(std::string *)(v5 + 8);
  (*(void (**)(void **__return_ptr, mlcore *))(*(_QWORD *)this + 64))(&v8, this);
  if (v9 == v8)
    std::vector<mlcore::PropertyCache>::__throw_out_of_range[abi:ne180100]();
  v6 = *(_QWORD *)v8;
  v7 = operator new(0x88uLL);
  v7[1] = 0;
  v7[2] = 0;
  *v7 = &off_24C33C130;
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  mediaplatform::SQLColumnNameExpression::SQLColumnNameExpression((uint64_t)(v7 + 3), (__int128 *)&v10, (__int128 *)(v6 + 8), (__int128 *)__p, (__int128 *)((char *)this + 40));
  if (v12 < 0)
    operator delete(__p[0]);
  *a3 = v7 + 3;
  a3[1] = v7;
  if (v8)
  {
    v9 = v8;
    operator delete(v8);
  }
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v10.__r_.__value_.__l.__data_);
}

void sub_20A655110(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  std::__shared_weak_count *v24;
  void *v26;

  if (a24 < 0)
    operator delete(__p);
  std::__shared_weak_count::~__shared_weak_count(v24);
  operator delete(v26);
  if (a10)
    operator delete(a10);
  if (a18 < 0)
    operator delete(a13);
  _Unwind_Resume(a1);
}

_QWORD *mlcore::DatabaseModelProperty<long long>::databaseTables@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  _QWORD *v4;
  _QWORD *result;

  v3 = *(_QWORD *)(a1 + 64);
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  v4 = operator new(8uLL);
  *a2 = v4;
  *v4 = v3;
  result = v4 + 1;
  a2[1] = result;
  a2[2] = result;
  return result;
}

uint64_t mlcore::DatabaseModelProperty<long long>::databaseColumn(uint64_t a1)
{
  return a1 + 72;
}

void mlcore::DatabaseModelProperty<std::string>::_SQLJoinClauses(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v6;
  int v7;
  const mlcore::EntityClass *v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  int v13;
  std::__shared_weak_count *v14;
  uint64_t v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  uint64_t v29;
  std::__shared_weak_count *v30;
  uint64_t v31;
  std::__shared_weak_count *v32;
  __int128 v33;
  uint64_t v34;
  std::__shared_weak_count *v35;
  uint64_t v36;

  v36 = *MEMORY[0x24BDAC8D0];
  if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 88))(a2) != *(_QWORD *)(a1 + 64)
    && (v6 = *(_QWORD *)(a1 + 8)) != 0
    && (v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 64))(v6),
        v7 == (*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 64))(a2)))
  {
    mlcore::SQLShortColumnNameFromEntityPrimaryKey(*(mlcore **)(a1 + 8), v8, &v33);
    std::allocate_shared[abi:ne180100]<mediaplatform::SQLUsingJoinConstraint,std::allocator<mediaplatform::SQLUsingJoinConstraint>,std::shared_ptr<mediaplatform::SQLColumnNameExpression>,void>(&v31, &v33);
    v9 = (std::__shared_weak_count *)*((_QWORD *)&v33 + 1);
    if (*((_QWORD *)&v33 + 1))
    {
      v10 = (unint64_t *)(*((_QWORD *)&v33 + 1) + 8);
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 - 1, v10));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
    v12 = *(_QWORD *)(a1 + 64);
    if (v12 == *(_QWORD *)mediaplatform::Singleton<mlcore::ItemKVSTable>::sharedInstance())
      v13 = 1;
    else
      v13 = 2;
    std::allocate_shared[abi:ne180100]<mediaplatform::SQLJoinClause,std::allocator<mediaplatform::SQLJoinClause>,mediaplatform::SQLJoinClause::JoinOperator &,std::string const&,std::shared_ptr<mediaplatform::SQLUsingJoinConstraint> &,void>(&v29, v13, *(_QWORD *)(a1 + 64) + 8, &v31);
    v15 = v29;
    v14 = v30;
    v34 = v29;
    v35 = v30;
    if (v30)
    {
      p_shared_owners = (unint64_t *)&v30->__shared_owners_;
      do
        v17 = __ldxr(p_shared_owners);
      while (__stxr(v17 + 1, p_shared_owners));
    }
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    *(_QWORD *)&v33 = a3;
    BYTE8(v33) = 0;
    v18 = operator new(0x10uLL);
    *a3 = v18;
    a3[1] = v18;
    v19 = v18 + 2;
    a3[2] = v18 + 2;
    *v18 = v15;
    v18[1] = v14;
    if (v14)
    {
      v20 = (unint64_t *)&v14->__shared_owners_;
      do
        v21 = __ldxr(v20);
      while (__stxr(v21 + 1, v20));
      a3[1] = v19;
      do
        v22 = __ldaxr(v20);
      while (__stlxr(v22 - 1, v20));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
    else
    {
      a3[1] = v19;
    }
    v23 = v30;
    if (v30)
    {
      v24 = (unint64_t *)&v30->__shared_owners_;
      do
        v25 = __ldaxr(v24);
      while (__stlxr(v25 - 1, v24));
      if (!v25)
      {
        ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
        std::__shared_weak_count::__release_weak(v23);
      }
    }
    v26 = v32;
    if (v32)
    {
      v27 = (unint64_t *)&v32->__shared_owners_;
      do
        v28 = __ldaxr(v27);
      while (__stlxr(v28 - 1, v27));
      if (!v28)
      {
        ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
        std::__shared_weak_count::__release_weak(v26);
      }
    }
  }
  else
  {
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
  }
}

void sub_20A655414(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  va_list va1;
  uint64_t v8;
  void **v9;
  va_list va2;
  uint64_t v11;
  va_list va3;

  va_start(va3, a2);
  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v6 = va_arg(va2, _QWORD);
  v8 = va_arg(va2, _QWORD);
  va_copy(va3, va2);
  v9 = va_arg(va3, void **);
  v11 = va_arg(va3, _QWORD);
  std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__destroy_vector::operator()[abi:ne180100]((void ***)va2);
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)va3);
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  _Unwind_Resume(a1);
}

void mlcore::SQLJoinClausesForEntityClassAndProperties(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  unint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint8x8_t v16;
  unint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  unint64_t v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  __int128 v25;
  unint64_t *v26;
  unint64_t v27;
  uint64_t v28;
  size_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  const void **v33;
  unsigned __int8 *v34;
  uint64_t v35;
  int v36;
  int v37;
  int v38;
  int v39;
  BOOL v41;
  BOOL v42;
  unint64_t *v43;
  unint64_t v44;
  unint64_t *v45;
  unint64_t v46;
  void **v47;
  unint64_t *v48;
  unint64_t *v49;
  unint64_t v50;
  float v51;
  _BOOL8 v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t prime;
  void *v56;
  void *v57;
  uint64_t v58;
  _QWORD **v59;
  unint64_t v60;
  uint8x8_t v61;
  unint64_t v62;
  uint8x8_t v63;
  uint64_t v64;
  _QWORD *i;
  unint64_t v66;
  void **v67;
  void **v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t *v72;
  unint64_t v73;
  _OWORD *v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  unint64_t v78;
  char *v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  unint64_t *v83;
  unint64_t v84;
  _QWORD *v85;
  _QWORD *v86;
  char *v87;
  __int128 v88;
  int64x2_t v89;
  void *v90;
  unint64_t *v91;
  unint64_t v92;
  void *v93;
  char *v94;
  char *v95;
  _QWORD *v97;
  _QWORD *v99;
  uint64_t *v100;
  uint64_t *v101;
  uint64_t *v102;
  __int128 v103;
  void **v104;
  int64x2_t v105;
  void *v106;
  void **v107;
  int64x2_t v108;
  void *__p[2];
  __int128 v110;
  unint64_t v111;
  uint64_t v112;
  float v113;
  uint64_t v114;
  uint64_t v115;

  v4 = a3;
  v115 = *MEMORY[0x24BDAC8D0];
  v108 = 0u;
  *(_OWORD *)__p = 0u;
  v110 = 0u;
  v112 = 0;
  v111 = 0;
  v113 = 1.0;
  v114 = 0;
  v5 = *(_QWORD **)a2;
  v97 = *(_QWORD **)(a2 + 8);
  if (*(_QWORD **)a2 == v97)
  {
    v95 = 0;
    v94 = 0;
    goto LABEL_166;
  }
  do
  {
    v99 = v5;
    (*(void (**)(uint64_t **__return_ptr, _QWORD, uint64_t))(*(_QWORD *)*v5 + 104))(&v101, *v5, a1);
    v7 = v101;
    v6 = v102;
    v100 = v102;
    while (v7 != v6)
    {
      v8 = *v7;
      v9 = (std::__shared_weak_count *)v7[1];
      *(_QWORD *)&v103 = *v7;
      *((_QWORD *)&v103 + 1) = v9;
      if (v9)
      {
        p_shared_owners = (unint64_t *)&v9->__shared_owners_;
        do
          v11 = __ldxr(p_shared_owners);
        while (__stxr(v11 + 1, p_shared_owners));
        do
          v12 = __ldxr(p_shared_owners);
        while (__stxr(v12 + 1, p_shared_owners));
        v13 = std::__string_hash<char>::operator()[abi:ne180100](v8 + 16);
        do
          v14 = __ldaxr(p_shared_owners);
        while (__stlxr(v14 - 1, p_shared_owners));
        if (!v14)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
      }
      else
      {
        v13 = std::__string_hash<char>::operator()[abi:ne180100](v8 + 16);
      }
      v15 = v110;
      if ((_QWORD)v110)
      {
        v16 = (uint8x8_t)vcnt_s8(*(int8x8_t *)&v110);
        v16.i16[0] = vaddlv_u8(v16);
        v17 = v16.u32[0];
        if (v16.u32[0] > 1uLL)
        {
          v3 = v13;
          if (v13 >= (unint64_t)v110)
            v3 = v13 % (unint64_t)v110;
        }
        else
        {
          v3 = (v110 - 1) & v13;
        }
        v18 = (_QWORD *)*((_QWORD *)__p[1] + v3);
        if (v18)
        {
          v19 = (_QWORD *)*v18;
          if (*v18)
          {
            while (1)
            {
              v20 = v19[1];
              if (v20 == v13)
                break;
              if (v17 > 1)
              {
                if (v20 >= v15)
                  v20 %= v15;
              }
              else
              {
                v20 &= v15 - 1;
              }
              if (v20 != v3)
                goto LABEL_69;
LABEL_65:
              v19 = (_QWORD *)*v19;
              if (!v19)
                goto LABEL_69;
            }
            v21 = v19[2];
            v22 = (std::__shared_weak_count *)v19[3];
            if (v22)
            {
              v23 = (unint64_t *)&v22->__shared_owners_;
              do
                v24 = __ldxr(v23);
              while (__stxr(v24 + 1, v23));
            }
            v25 = v103;
            if (*((_QWORD *)&v103 + 1))
            {
              v26 = (unint64_t *)(*((_QWORD *)&v103 + 1) + 8);
              do
                v27 = __ldxr(v26);
              while (__stxr(v27 + 1, v26));
            }
            v28 = *(unsigned __int8 *)(v21 + 39);
            v29 = *(_QWORD *)(v21 + 24);
            if ((v28 & 0x80u) == 0)
              v30 = *(unsigned __int8 *)(v21 + 39);
            else
              v30 = *(_QWORD *)(v21 + 24);
            v31 = *(unsigned __int8 *)(v25 + 39);
            v32 = (char)v31;
            if ((v31 & 0x80u) != 0)
              v31 = *(_QWORD *)(v25 + 24);
            if (v30 == v31)
            {
              v33 = (const void **)(v21 + 16);
              if (v32 >= 0)
                v34 = (unsigned __int8 *)(v25 + 16);
              else
                v34 = *(unsigned __int8 **)(v25 + 16);
              if ((v28 & 0x80) != 0)
              {
                v42 = memcmp(*v33, v34, v29) == 0;
                goto LABEL_54;
              }
              if ((_DWORD)v28)
              {
                v35 = v28 - 1;
                do
                {
                  v37 = *(unsigned __int8 *)v33;
                  v33 = (const void **)((char *)v33 + 1);
                  v36 = v37;
                  v39 = *v34++;
                  v38 = v39;
                  v41 = v35-- != 0;
                  v42 = v36 == v38;
                }
                while (v36 == v38 && v41);
LABEL_54:
                if (!*((_QWORD *)&v25 + 1))
                  goto LABEL_59;
                goto LABEL_55;
              }
              v42 = 1;
              if (!*((_QWORD *)&v25 + 1))
                goto LABEL_59;
            }
            else
            {
              v42 = 0;
              if (!*((_QWORD *)&v25 + 1))
                goto LABEL_59;
            }
LABEL_55:
            v43 = (unint64_t *)(*((_QWORD *)&v25 + 1) + 8);
            do
              v44 = __ldaxr(v43);
            while (__stlxr(v44 - 1, v43));
            if (!v44)
            {
              (*(void (**)(_QWORD))(**((_QWORD **)&v25 + 1) + 16))(*((_QWORD *)&v25 + 1));
              std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v25 + 1));
            }
LABEL_59:
            if (v22)
            {
              v45 = (unint64_t *)&v22->__shared_owners_;
              do
                v46 = __ldaxr(v45);
              while (__stlxr(v46 - 1, v45));
              if (!v46)
              {
                ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
                std::__shared_weak_count::__release_weak(v22);
              }
            }
            if (v42)
              goto LABEL_148;
            goto LABEL_65;
          }
        }
      }
LABEL_69:
      v47 = (void **)operator new(0x20uLL);
      v104 = v47;
      v105.i64[0] = (uint64_t)&v110 + 8;
      *v47 = 0;
      v47[1] = (void *)v13;
      v48 = (unint64_t *)*((_QWORD *)&v103 + 1);
      v47[2] = (void *)v103;
      v47[3] = v48;
      if (v48)
      {
        v49 = v48 + 1;
        do
          v50 = __ldxr(v49);
        while (__stxr(v50 + 1, v49));
      }
      v105.i8[8] = 1;
      v51 = (float)(v111 + 1);
      if (!v15 || (float)(v113 * (float)v15) < v51)
      {
        v52 = (v15 & (v15 - 1)) != 0;
        if (v15 < 3)
          v52 = 1;
        v53 = v52 | (2 * v15);
        v54 = vcvtps_u32_f32(v51 / v113);
        if (v53 <= v54)
          prime = v54;
        else
          prime = v53;
        if (prime == 1)
        {
          prime = 2;
        }
        else if ((prime & (prime - 1)) != 0)
        {
          prime = std::__next_prime(prime);
        }
        v15 = v110;
        if (prime <= (unint64_t)v110)
        {
          if (prime < (unint64_t)v110)
          {
            v62 = vcvtps_u32_f32((float)v111 / v113);
            if ((unint64_t)v110 < 3
              || (v63 = (uint8x8_t)vcnt_s8(*(int8x8_t *)&v110), v63.i16[0] = vaddlv_u8(v63), v63.u32[0] > 1uLL))
            {
              v62 = std::__next_prime(v62);
            }
            else
            {
              v64 = 1 << -(char)__clz(v62 - 1);
              if (v62 >= 2)
                v62 = v64;
            }
            if (prime <= v62)
              prime = v62;
            if (prime >= v15)
            {
              v15 = v110;
            }
            else
            {
              if (prime)
                goto LABEL_84;
              v93 = __p[1];
              __p[1] = 0;
              if (v93)
                operator delete(v93);
              v15 = 0;
              *(_QWORD *)&v110 = 0;
            }
          }
        }
        else
        {
LABEL_84:
          if (prime >> 61)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v56 = operator new(8 * prime);
          v57 = __p[1];
          __p[1] = v56;
          if (v57)
            operator delete(v57);
          v58 = 0;
          *(_QWORD *)&v110 = prime;
          do
            *((_QWORD *)__p[1] + v58++) = 0;
          while (prime != v58);
          v59 = (_QWORD **)*((_QWORD *)&v110 + 1);
          if (*((_QWORD *)&v110 + 1))
          {
            v60 = *(_QWORD *)(*((_QWORD *)&v110 + 1) + 8);
            v61 = (uint8x8_t)vcnt_s8((int8x8_t)prime);
            v61.i16[0] = vaddlv_u8(v61);
            if (v61.u32[0] > 1uLL)
            {
              if (v60 >= prime)
                v60 %= prime;
            }
            else
            {
              v60 &= prime - 1;
            }
            *((_QWORD *)__p[1] + v60) = (char *)&v110 + 8;
            for (i = *v59; i; v60 = v66)
            {
              v66 = i[1];
              if (v61.u32[0] > 1uLL)
              {
                if (v66 >= prime)
                  v66 %= prime;
              }
              else
              {
                v66 &= prime - 1;
              }
              if (v66 != v60)
              {
                if (!*((_QWORD *)__p[1] + v66))
                {
                  *((_QWORD *)__p[1] + v66) = v59;
                  goto LABEL_109;
                }
                *v59 = (_QWORD *)*i;
                *i = **((_QWORD **)__p[1] + v66);
                **((_QWORD **)__p[1] + v66) = i;
                i = v59;
              }
              v66 = v60;
LABEL_109:
              v59 = (_QWORD **)i;
              i = (_QWORD *)*i;
            }
          }
          v15 = prime;
        }
        if ((v15 & (v15 - 1)) != 0)
        {
          if (v13 >= v15)
            v3 = v13 % v15;
          else
            v3 = v13;
        }
        else
        {
          v3 = (v15 - 1) & v13;
        }
      }
      v67 = (void **)*((_QWORD *)__p[1] + v3);
      v68 = v104;
      if (v67)
      {
        *v104 = *v67;
LABEL_126:
        *v67 = v68;
        goto LABEL_127;
      }
      *v104 = (void *)*((_QWORD *)&v110 + 1);
      *((_QWORD *)&v110 + 1) = v68;
      *((_QWORD *)__p[1] + v3) = (char *)&v110 + 8;
      if (*v68)
      {
        v69 = *((_QWORD *)*v68 + 1);
        if ((v15 & (v15 - 1)) != 0)
        {
          if (v69 >= v15)
            v69 %= v15;
        }
        else
        {
          v69 &= v15 - 1;
        }
        v67 = (void **)((char *)__p[1] + 8 * v69);
        goto LABEL_126;
      }
LABEL_127:
      v104 = 0;
      ++v111;
      std::unique_ptr<std::__hash_node<std::__hash_value_type<std::shared_ptr<mlcore::LocalizedSearchScope>,long long>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::shared_ptr<mlcore::LocalizedSearchScope>,long long>,void *>>>>::reset[abi:ne180100]((uint64_t)&v104);
      v70 = v108.i64[1];
      if ((void *)v108.i64[1] >= __p[0])
      {
        v75 = (v108.i64[1] - v108.i64[0]) >> 4;
        v76 = v75 + 1;
        if ((unint64_t)(v75 + 1) >> 60)
          std::vector<std::string>::__throw_length_error[abi:ne180100]();
        v77 = (uint64_t)__p[0] - v108.i64[0];
        if (((uint64_t)__p[0] - v108.i64[0]) >> 3 > v76)
          v76 = v77 >> 3;
        if ((unint64_t)v77 >= 0x7FFFFFFFFFFFFFF0)
          v78 = 0xFFFFFFFFFFFFFFFLL;
        else
          v78 = v76;
        v107 = __p;
        v79 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<mediaplatform::DatabaseParameterBase>>>(v78);
        v81 = &v79[16 * v75];
        v82 = *((_QWORD *)&v103 + 1);
        *(_OWORD *)v81 = v103;
        if (v82)
        {
          v83 = (unint64_t *)(v82 + 8);
          do
            v84 = __ldxr(v83);
          while (__stxr(v84 + 1, v83));
        }
        v85 = (_QWORD *)v108.i64[1];
        v86 = (_QWORD *)v108.i64[0];
        if (v108.i64[1] == v108.i64[0])
        {
          v89 = vdupq_n_s64(v108.u64[1]);
          v87 = &v79[16 * v75];
        }
        else
        {
          v87 = &v79[16 * v75];
          do
          {
            v88 = *((_OWORD *)v85 - 1);
            v85 -= 2;
            *((_OWORD *)v87 - 1) = v88;
            v87 -= 16;
            *v85 = 0;
            v85[1] = 0;
          }
          while (v85 != v86);
          v89 = v108;
        }
        v74 = v81 + 16;
        v108.i64[0] = (uint64_t)v87;
        v108.i64[1] = (uint64_t)(v81 + 16);
        v105 = v89;
        v90 = __p[0];
        __p[0] = &v79[16 * v80];
        v106 = v90;
        v104 = (void **)v89.i64[0];
        std::__split_buffer<std::shared_ptr<mediaplatform::SQLExpression const>>::~__split_buffer((uint64_t)&v104);
      }
      else
      {
        *(_QWORD *)v108.i64[1] = v103;
        v71 = *((_QWORD *)&v103 + 1);
        *(_QWORD *)(v70 + 8) = *((_QWORD *)&v103 + 1);
        if (v71)
        {
          v72 = (unint64_t *)(v71 + 8);
          do
            v73 = __ldxr(v72);
          while (__stxr(v73 + 1, v72));
        }
        v74 = (_OWORD *)(v70 + 16);
      }
      v108.i64[1] = (uint64_t)v74;
LABEL_148:
      v3 = *((_QWORD *)&v103 + 1);
      if (*((_QWORD *)&v103 + 1))
      {
        v91 = (unint64_t *)(*((_QWORD *)&v103 + 1) + 8);
        do
          v92 = __ldaxr(v91);
        while (__stlxr(v92 - 1, v91));
        if (!v92)
        {
          (*(void (**)(unint64_t))(*(_QWORD *)v3 + 16))(v3);
          std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v3);
        }
      }
      v7 += 2;
      v6 = v100;
    }
    v104 = (void **)&v101;
    std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__destroy_vector::operator()[abi:ne180100](&v104);
    v5 = v99 + 1;
  }
  while (v99 + 1 != v97);
  v95 = (char *)v108.i64[1];
  v94 = (char *)v108.i64[0];
  v4 = a3;
LABEL_166:
  *v4 = 0;
  v4[1] = 0;
  v4[2] = 0;
  std::vector<std::shared_ptr<mediaplatform::SQLJoinClause const>>::__init_with_size[abi:ne180100]<std::shared_ptr<mediaplatform::SQLJoinClause const>*,std::shared_ptr<mediaplatform::SQLJoinClause const>*>(v4, v94, v95, (v95 - v94) >> 4);
  std::__hash_table<std::shared_ptr<mediaplatform::SQLJoinClause const>,mlcore::hash,mlcore::equal,std::allocator<std::shared_ptr<mediaplatform::SQLJoinClause const>>>::~__hash_table((uint64_t)&__p[1]);
  v104 = (void **)&v108;
  std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__destroy_vector::operator()[abi:ne180100](&v104);
}

void sub_20A655C80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27)
{
  mlcore::OrderedSet<std::shared_ptr<mediaplatform::SQLJoinClause const>,mlcore::hash,mlcore::equal>::~OrderedSet(&a27);
  _Unwind_Resume(a1);
}

void mlcore::DatabaseModelProperty<long long>::_SQLJoinClauses(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v6;
  int v7;
  const mlcore::EntityClass *v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  int v13;
  std::__shared_weak_count *v14;
  uint64_t v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  uint64_t v29;
  std::__shared_weak_count *v30;
  uint64_t v31;
  std::__shared_weak_count *v32;
  __int128 v33;
  uint64_t v34;
  std::__shared_weak_count *v35;
  uint64_t v36;

  v36 = *MEMORY[0x24BDAC8D0];
  if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 88))(a2) != *(_QWORD *)(a1 + 64)
    && (v6 = *(_QWORD *)(a1 + 8)) != 0
    && (v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 64))(v6),
        v7 == (*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 64))(a2)))
  {
    mlcore::SQLShortColumnNameFromEntityPrimaryKey(*(mlcore **)(a1 + 8), v8, &v33);
    std::allocate_shared[abi:ne180100]<mediaplatform::SQLUsingJoinConstraint,std::allocator<mediaplatform::SQLUsingJoinConstraint>,std::shared_ptr<mediaplatform::SQLColumnNameExpression>,void>(&v31, &v33);
    v9 = (std::__shared_weak_count *)*((_QWORD *)&v33 + 1);
    if (*((_QWORD *)&v33 + 1))
    {
      v10 = (unint64_t *)(*((_QWORD *)&v33 + 1) + 8);
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 - 1, v10));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
    v12 = *(_QWORD *)(a1 + 64);
    if (v12 == *(_QWORD *)mediaplatform::Singleton<mlcore::ItemKVSTable>::sharedInstance())
      v13 = 1;
    else
      v13 = 2;
    std::allocate_shared[abi:ne180100]<mediaplatform::SQLJoinClause,std::allocator<mediaplatform::SQLJoinClause>,mediaplatform::SQLJoinClause::JoinOperator &,std::string const&,std::shared_ptr<mediaplatform::SQLUsingJoinConstraint> &,void>(&v29, v13, *(_QWORD *)(a1 + 64) + 8, &v31);
    v15 = v29;
    v14 = v30;
    v34 = v29;
    v35 = v30;
    if (v30)
    {
      p_shared_owners = (unint64_t *)&v30->__shared_owners_;
      do
        v17 = __ldxr(p_shared_owners);
      while (__stxr(v17 + 1, p_shared_owners));
    }
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    *(_QWORD *)&v33 = a3;
    BYTE8(v33) = 0;
    v18 = operator new(0x10uLL);
    *a3 = v18;
    a3[1] = v18;
    v19 = v18 + 2;
    a3[2] = v18 + 2;
    *v18 = v15;
    v18[1] = v14;
    if (v14)
    {
      v20 = (unint64_t *)&v14->__shared_owners_;
      do
        v21 = __ldxr(v20);
      while (__stxr(v21 + 1, v20));
      a3[1] = v19;
      do
        v22 = __ldaxr(v20);
      while (__stlxr(v22 - 1, v20));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
    else
    {
      a3[1] = v19;
    }
    v23 = v30;
    if (v30)
    {
      v24 = (unint64_t *)&v30->__shared_owners_;
      do
        v25 = __ldaxr(v24);
      while (__stlxr(v25 - 1, v24));
      if (!v25)
      {
        ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
        std::__shared_weak_count::__release_weak(v23);
      }
    }
    v26 = v32;
    if (v32)
    {
      v27 = (unint64_t *)&v32->__shared_owners_;
      do
        v28 = __ldaxr(v27);
      while (__stlxr(v28 - 1, v27));
      if (!v28)
      {
        ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
        std::__shared_weak_count::__release_weak(v26);
      }
    }
  }
  else
  {
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
  }
}

void sub_20A655F30(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  va_list va1;
  uint64_t v8;
  void **v9;
  va_list va2;
  uint64_t v11;
  va_list va3;

  va_start(va3, a2);
  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v6 = va_arg(va2, _QWORD);
  v8 = va_arg(va2, _QWORD);
  va_copy(va3, va2);
  v9 = va_arg(va3, void **);
  v11 = va_arg(va3, _QWORD);
  std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__destroy_vector::operator()[abi:ne180100]((void ***)va2);
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)va3);
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t mlcore::TypedEntityClass<mlcore::Item>::databaseTable()
{
  return *(_QWORD *)mediaplatform::Singleton<mlcore::ItemTable>::sharedInstance();
}

uint64_t mediaplatform::Singleton<mlcore::ItemTable>::sharedInstance()
{
  unsigned __int8 v0;
  uint64_t *v2;

  if ((v0 & 1) == 0
  {
    v2 = (uint64_t *)operator new();
    _ZNSt3__115allocate_sharedB8ne180100IN6mlcore9ItemTableENS_9allocatorIS2_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(v2);
    mediaplatform::Singleton<mlcore::ItemTable>::sharedInstance(void)::_sharedInstance = (uint64_t)v2;
  }
  return mediaplatform::Singleton<mlcore::ItemTable>::sharedInstance(void)::_sharedInstance;
}

void sub_20A65600C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x20BD27AFC](v1, 0x20C40A4A59CD2);
  _Unwind_Resume(a1);
}

uint64_t mlcore::TypedEntityClass<mlcore::Item>::entityType()
{
  return 0;
}

uint64_t mediaplatform::Singleton<mlcore::ItemKVSTable>::sharedInstance()
{
  unsigned __int8 v0;
  mlcore::ItemKVSTable **v2;

  if ((v0 & 1) == 0
  {
    v2 = (mlcore::ItemKVSTable **)operator new();
    _ZNSt3__115allocate_sharedB8ne180100IN6mlcore12ItemKVSTableENS_9allocatorIS2_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(v2);
    mediaplatform::Singleton<mlcore::ItemKVSTable>::sharedInstance(void)::_sharedInstance = (uint64_t)v2;
  }
  return mediaplatform::Singleton<mlcore::ItemKVSTable>::sharedInstance(void)::_sharedInstance;
}

void sub_20A6560C4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x20BD27AFC](v1, 0x20C40A4A59CD2);
  _Unwind_Resume(a1);
}

void mlcore::DatabaseModelProperty<int>::_SQLJoinClauses(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v6;
  int v7;
  const mlcore::EntityClass *v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  int v13;
  std::__shared_weak_count *v14;
  uint64_t v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  uint64_t v29;
  std::__shared_weak_count *v30;
  uint64_t v31;
  std::__shared_weak_count *v32;
  __int128 v33;
  uint64_t v34;
  std::__shared_weak_count *v35;
  uint64_t v36;

  v36 = *MEMORY[0x24BDAC8D0];
  if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 88))(a2) != *(_QWORD *)(a1 + 64)
    && (v6 = *(_QWORD *)(a1 + 8)) != 0
    && (v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 64))(v6),
        v7 == (*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 64))(a2)))
  {
    mlcore::SQLShortColumnNameFromEntityPrimaryKey(*(mlcore **)(a1 + 8), v8, &v33);
    std::allocate_shared[abi:ne180100]<mediaplatform::SQLUsingJoinConstraint,std::allocator<mediaplatform::SQLUsingJoinConstraint>,std::shared_ptr<mediaplatform::SQLColumnNameExpression>,void>(&v31, &v33);
    v9 = (std::__shared_weak_count *)*((_QWORD *)&v33 + 1);
    if (*((_QWORD *)&v33 + 1))
    {
      v10 = (unint64_t *)(*((_QWORD *)&v33 + 1) + 8);
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 - 1, v10));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
    v12 = *(_QWORD *)(a1 + 64);
    if (v12 == *(_QWORD *)mediaplatform::Singleton<mlcore::ItemKVSTable>::sharedInstance())
      v13 = 1;
    else
      v13 = 2;
    std::allocate_shared[abi:ne180100]<mediaplatform::SQLJoinClause,std::allocator<mediaplatform::SQLJoinClause>,mediaplatform::SQLJoinClause::JoinOperator &,std::string const&,std::shared_ptr<mediaplatform::SQLUsingJoinConstraint> &,void>(&v29, v13, *(_QWORD *)(a1 + 64) + 8, &v31);
    v15 = v29;
    v14 = v30;
    v34 = v29;
    v35 = v30;
    if (v30)
    {
      p_shared_owners = (unint64_t *)&v30->__shared_owners_;
      do
        v17 = __ldxr(p_shared_owners);
      while (__stxr(v17 + 1, p_shared_owners));
    }
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    *(_QWORD *)&v33 = a3;
    BYTE8(v33) = 0;
    v18 = operator new(0x10uLL);
    *a3 = v18;
    a3[1] = v18;
    v19 = v18 + 2;
    a3[2] = v18 + 2;
    *v18 = v15;
    v18[1] = v14;
    if (v14)
    {
      v20 = (unint64_t *)&v14->__shared_owners_;
      do
        v21 = __ldxr(v20);
      while (__stxr(v21 + 1, v20));
      a3[1] = v19;
      do
        v22 = __ldaxr(v20);
      while (__stlxr(v22 - 1, v20));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
    else
    {
      a3[1] = v19;
    }
    v23 = v30;
    if (v30)
    {
      v24 = (unint64_t *)&v30->__shared_owners_;
      do
        v25 = __ldaxr(v24);
      while (__stlxr(v25 - 1, v24));
      if (!v25)
      {
        ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
        std::__shared_weak_count::__release_weak(v23);
      }
    }
    v26 = v32;
    if (v32)
    {
      v27 = (unint64_t *)&v32->__shared_owners_;
      do
        v28 = __ldaxr(v27);
      while (__stlxr(v28 - 1, v27));
      if (!v28)
      {
        ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
        std::__shared_weak_count::__release_weak(v26);
      }
    }
  }
  else
  {
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
  }
}

void sub_20A65635C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  va_list va1;
  uint64_t v8;
  void **v9;
  va_list va2;
  uint64_t v11;
  va_list va3;

  va_start(va3, a2);
  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v6 = va_arg(va2, _QWORD);
  v8 = va_arg(va2, _QWORD);
  va_copy(va3, va2);
  v9 = va_arg(va3, void **);
  v11 = va_arg(va3, _QWORD);
  std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__destroy_vector::operator()[abi:ne180100]((void ***)va2);
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)va3);
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  _Unwind_Resume(a1);
}

void mlcore::EntityClass::setPropertyForName(uint64_t a1, uint64_t a2, std::string *a3)
{
  std::mutex *v6;
  std::string *v7;

  v6 = (std::mutex *)(a1 + 8);
  std::mutex::lock((std::mutex *)(a1 + 8));
  std::string::operator=((std::string *)(a2 + 16), a3);
  *(_QWORD *)(a2 + 8) = a1;
  v7 = a3;
  *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t *)(a1 + 72), (unsigned __int8 *)a3, (__int128 **)&v7)+ 5) = a2;
  std::mutex::unlock(v6);
}

void sub_20A656418(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

char *std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t *a1, unsigned __int8 *a2, __int128 **a3)
{
  unint64_t v3;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  unint64_t v11;
  void **v12;
  char *v13;
  unint64_t v14;
  std::string *v15;
  __int128 *v16;
  __int128 v17;
  _QWORD *v18;
  float v19;
  float v20;
  _BOOL8 v21;
  unint64_t v22;
  unint64_t v23;
  int8x8_t prime;
  void *v25;
  void *v26;
  uint64_t v27;
  _QWORD *v28;
  unint64_t v29;
  uint8x8_t v30;
  unint64_t v31;
  uint8x8_t v32;
  uint64_t v33;
  _QWORD *v34;
  unint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  unint64_t v38;
  void *v40;

  v7 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)a2);
  v8 = v7;
  v9 = a1[1];
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    v11 = v10.u32[0];
    if (v10.u32[0] > 1uLL)
    {
      v3 = v7;
      if (v7 >= v9)
        v3 = v7 % v9;
    }
    else
    {
      v3 = (v9 - 1) & v7;
    }
    v12 = *(void ***)(*a1 + 8 * v3);
    if (v12)
    {
      v13 = (char *)*v12;
      if (*v12)
      {
        do
        {
          v14 = *((_QWORD *)v13 + 1);
          if (v14 == v8)
          {
            if (std::equal_to<std::string>::operator()[abi:ne180100]((unsigned __int8 *)v13 + 16, a2))
              return v13;
          }
          else
          {
            if (v11 > 1)
            {
              if (v14 >= v9)
                v14 %= v9;
            }
            else
            {
              v14 &= v9 - 1;
            }
            if (v14 != v3)
              break;
          }
          v13 = *(char **)v13;
        }
        while (v13);
      }
    }
  }
  v13 = (char *)operator new(0x30uLL);
  *(_QWORD *)v13 = 0;
  *((_QWORD *)v13 + 1) = v8;
  v15 = (std::string *)(v13 + 16);
  v16 = *a3;
  if (*((char *)*a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v15, *(const std::string::value_type **)v16, *((_QWORD *)v16 + 1));
  }
  else
  {
    v17 = *v16;
    *((_QWORD *)v13 + 4) = *((_QWORD *)v16 + 2);
    *(_OWORD *)&v15->__r_.__value_.__l.__data_ = v17;
  }
  v18 = a1 + 2;
  *((_QWORD *)v13 + 5) = 0;
  v19 = (float)(unint64_t)(a1[3] + 1);
  v20 = *((float *)a1 + 8);
  if (!v9 || (float)(v20 * (float)v9) < v19)
  {
    v21 = 1;
    if (v9 >= 3)
      v21 = (v9 & (v9 - 1)) != 0;
    v22 = v21 | (2 * v9);
    v23 = vcvtps_u32_f32(v19 / v20);
    if (v22 <= v23)
      prime = (int8x8_t)v23;
    else
      prime = (int8x8_t)v22;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
    }
    v9 = a1[1];
    if (*(_QWORD *)&prime > v9)
      goto LABEL_33;
    if (*(_QWORD *)&prime < v9)
    {
      v31 = vcvtps_u32_f32((float)(unint64_t)a1[3] / *((float *)a1 + 8));
      if (v9 < 3 || (v32 = (uint8x8_t)vcnt_s8((int8x8_t)v9), v32.i16[0] = vaddlv_u8(v32), v32.u32[0] > 1uLL))
      {
        v31 = std::__next_prime(v31);
      }
      else
      {
        v33 = 1 << -(char)__clz(v31 - 1);
        if (v31 >= 2)
          v31 = v33;
      }
      if (*(_QWORD *)&prime <= v31)
        prime = (int8x8_t)v31;
      if (*(_QWORD *)&prime >= v9)
      {
        v9 = a1[1];
      }
      else
      {
        if (prime)
        {
LABEL_33:
          if (*(_QWORD *)&prime >> 61)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v25 = operator new(8 * *(_QWORD *)&prime);
          v26 = (void *)*a1;
          *a1 = (uint64_t)v25;
          if (v26)
            operator delete(v26);
          v27 = 0;
          a1[1] = (uint64_t)prime;
          do
            *(_QWORD *)(*a1 + 8 * v27++) = 0;
          while (*(_QWORD *)&prime != v27);
          v28 = (_QWORD *)*v18;
          if (*v18)
          {
            v29 = v28[1];
            v30 = (uint8x8_t)vcnt_s8(prime);
            v30.i16[0] = vaddlv_u8(v30);
            if (v30.u32[0] > 1uLL)
            {
              if (v29 >= *(_QWORD *)&prime)
                v29 %= *(_QWORD *)&prime;
            }
            else
            {
              v29 &= *(_QWORD *)&prime - 1;
            }
            *(_QWORD *)(*a1 + 8 * v29) = v18;
            v34 = (_QWORD *)*v28;
            if (*v28)
            {
              do
              {
                v35 = v34[1];
                if (v30.u32[0] > 1uLL)
                {
                  if (v35 >= *(_QWORD *)&prime)
                    v35 %= *(_QWORD *)&prime;
                }
                else
                {
                  v35 &= *(_QWORD *)&prime - 1;
                }
                if (v35 != v29)
                {
                  if (!*(_QWORD *)(*a1 + 8 * v35))
                  {
                    *(_QWORD *)(*a1 + 8 * v35) = v28;
                    goto LABEL_58;
                  }
                  *v28 = *v34;
                  *v34 = **(_QWORD **)(*a1 + 8 * v35);
                  **(_QWORD **)(*a1 + 8 * v35) = v34;
                  v34 = v28;
                }
                v35 = v29;
LABEL_58:
                v28 = v34;
                v34 = (_QWORD *)*v34;
                v29 = v35;
              }
              while (v34);
            }
          }
          v9 = (unint64_t)prime;
          goto LABEL_62;
        }
        v40 = (void *)*a1;
        *a1 = 0;
        if (v40)
          operator delete(v40);
        v9 = 0;
        a1[1] = 0;
      }
    }
LABEL_62:
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9)
        v3 = v8 % v9;
      else
        v3 = v8;
    }
    else
    {
      v3 = (v9 - 1) & v8;
    }
  }
  v36 = *a1;
  v37 = *(_QWORD **)(*a1 + 8 * v3);
  if (v37)
  {
    *(_QWORD *)v13 = *v37;
LABEL_75:
    *v37 = v13;
    goto LABEL_76;
  }
  *(_QWORD *)v13 = *v18;
  *v18 = v13;
  *(_QWORD *)(v36 + 8 * v3) = v18;
  if (*(_QWORD *)v13)
  {
    v38 = *(_QWORD *)(*(_QWORD *)v13 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v38 >= v9)
        v38 %= v9;
    }
    else
    {
      v38 &= v9 - 1;
    }
    v37 = (_QWORD *)(*a1 + 8 * v38);
    goto LABEL_75;
  }
LABEL_76:
  ++a1[3];
  return v13;
}

void sub_20A656840(_Unwind_Exception *a1)
{
  void **v1;

  std::__hash_node_destructor<std::allocator<std::__hash_node<std::string,void *>>>::operator()[abi:ne180100](0, v1);
  _Unwind_Resume(a1);
}

void std::string::__init_copy_ctor_external(std::string *this, const std::string::value_type *__s, std::string::size_type __sz)
{
  std::string *v5;
  std::string::size_type v6;
  std::string::size_type v7;
  std::string *v8;

  v5 = this;
  if (__sz > 0x16)
  {
    if (__sz >= 0x7FFFFFFFFFFFFFF8)
      std::string::__throw_length_error[abi:ne180100]();
    v6 = (__sz & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__sz | 7) != 0x17)
      v6 = __sz | 7;
    v7 = v6 + 1;
    v8 = (std::string *)operator new(v6 + 1);
    v5->__r_.__value_.__l.__size_ = __sz;
    v5->__r_.__value_.__r.__words[2] = v7 | 0x8000000000000000;
    v5->__r_.__value_.__r.__words[0] = (std::string::size_type)v8;
    v5 = v8;
  }
  else
  {
    *((_BYTE *)&this->__r_.__value_.__s + 23) = __sz;
  }
  memmove(v5, __s, __sz + 1);
}

uint64_t mlcore::TypedEntityClass<mlcore::Playlist>::databaseTable()
{
  return *(_QWORD *)mediaplatform::Singleton<mlcore::ContainerTable>::sharedInstance();
}

uint64_t mediaplatform::Singleton<mlcore::ContainerTable>::sharedInstance()
{
  unsigned __int8 v0;
  _QWORD *v2;

  if ((v0 & 1) == 0
  {
    v2 = (_QWORD *)operator new();
    _ZNSt3__115allocate_sharedB8ne180100IN6mlcore14ContainerTableENS_9allocatorIS2_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(v2);
    mediaplatform::Singleton<mlcore::ContainerTable>::sharedInstance(void)::_sharedInstance = (uint64_t)v2;
  }
  return mediaplatform::Singleton<mlcore::ContainerTable>::sharedInstance(void)::_sharedInstance;
}

void sub_20A656978(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x20BD27AFC](v1, 0x20C40A4A59CD2);
  _Unwind_Resume(a1);
}

uint64_t std::__hash_table<std::shared_ptr<mediaplatform::SQLJoinClause const>,mlcore::hash,mlcore::equal,std::allocator<std::shared_ptr<mediaplatform::SQLJoinClause const>>>::~__hash_table(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  void *v8;

  v2 = *(_QWORD **)(a1 + 16);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)(v2 + 2));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *(_QWORD **)(a1 + 96);
  if (v4 == (_QWORD *)(a1 + 72))
  {
    v5 = 4;
    v4 = (_QWORD *)(a1 + 72);
  }
  else
  {
    if (!v4)
      goto LABEL_8;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_8:
  v6 = *(_QWORD **)(a1 + 56);
  if (v6 == (_QWORD *)(a1 + 32))
  {
    v7 = 4;
    v6 = (_QWORD *)(a1 + 32);
  }
  else
  {
    if (!v6)
      goto LABEL_13;
    v7 = 5;
  }
  (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_13:
  v8 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v8)
    operator delete(v8);
  return a1;
}

void mlcore::AndPredicate::_SQLExpression(uint64_t a1@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  _QWORD *v23;
  _QWORD *v24;
  char *v25;
  __int128 v26;
  int64x2_t v27;
  _OWORD *v28;
  char *v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  __int128 v42;
  uint64_t v43;
  std::__shared_weak_count *v44;
  __int128 v45;
  __int128 v46;
  uint64_t v47;
  std::__shared_weak_count *v48;
  int64x2_t v49;
  char *v50;
  int64x2_t *v51;
  int64x2_t v52;
  char *v53;
  char **v54;

  *a3 = 0;
  a3[1] = 0;
  v49 = 0uLL;
  v50 = 0;
  v3 = *(uint64_t **)(a1 + 8);
  v4 = *(uint64_t **)(a1 + 16);
  if (v3 != v4)
  {
    do
    {
      v7 = *v3;
      v8 = (std::__shared_weak_count *)v3[1];
      v47 = *v3;
      v48 = v8;
      if (v8)
      {
        p_shared_owners = (unint64_t *)&v8->__shared_owners_;
        do
          v10 = __ldxr(p_shared_owners);
        while (__stxr(v10 + 1, p_shared_owners));
      }
      v11 = (std::__shared_weak_count *)a2[1];
      v43 = *a2;
      v44 = v11;
      if (v11)
      {
        v12 = (unint64_t *)&v11->__shared_owners_;
        do
          v13 = __ldxr(v12);
        while (__stxr(v13 + 1, v12));
      }
      (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t *))(*(_QWORD *)v7 + 64))(&v45, v7, &v43);
      v14 = v45;
      v46 = v45;
      v45 = 0uLL;
      v15 = v49.i64[1];
      if (v49.i64[1] >= (unint64_t)v50)
      {
        v42 = v14;
        v16 = (v49.i64[1] - v49.i64[0]) >> 4;
        v17 = v16 + 1;
        if ((unint64_t)(v16 + 1) >> 60)
          std::vector<std::string>::__throw_length_error[abi:ne180100]();
        v18 = (uint64_t)&v50[-v49.i64[0]];
        if ((uint64_t)&v50[-v49.i64[0]] >> 3 > v17)
          v17 = v18 >> 3;
        if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF0)
          v19 = 0xFFFFFFFFFFFFFFFLL;
        else
          v19 = v17;
        v54 = &v50;
        v20 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<mediaplatform::DatabaseParameterBase>>>(v19);
        v22 = &v20[16 * v16];
        *(_OWORD *)v22 = v42;
        v46 = 0uLL;
        v23 = (_QWORD *)v49.i64[1];
        v24 = (_QWORD *)v49.i64[0];
        if (v49.i64[1] == v49.i64[0])
        {
          v27 = vdupq_n_s64(v49.u64[1]);
          v25 = &v20[16 * v16];
        }
        else
        {
          v25 = &v20[16 * v16];
          do
          {
            v26 = *((_OWORD *)v23 - 1);
            v23 -= 2;
            *((_OWORD *)v25 - 1) = v26;
            v25 -= 16;
            *v23 = 0;
            v23[1] = 0;
          }
          while (v23 != v24);
          v27 = v49;
        }
        v28 = v22 + 16;
        v49.i64[0] = (uint64_t)v25;
        v49.i64[1] = (uint64_t)(v22 + 16);
        v52 = v27;
        v29 = v50;
        v50 = &v20[16 * v21];
        v53 = v29;
        v51 = (int64x2_t *)v27.i64[0];
        std::__split_buffer<std::shared_ptr<mediaplatform::SQLExpression const>>::~__split_buffer((uint64_t)&v51);
        v30 = (std::__shared_weak_count *)*((_QWORD *)&v45 + 1);
        v49.i64[1] = (uint64_t)v28;
        if (*((_QWORD *)&v45 + 1))
        {
          v31 = (unint64_t *)(*((_QWORD *)&v45 + 1) + 8);
          do
            v32 = __ldaxr(v31);
          while (__stlxr(v32 - 1, v31));
          if (!v32)
          {
            ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
            std::__shared_weak_count::__release_weak(v30);
          }
        }
      }
      else
      {
        *(_OWORD *)v49.i64[1] = v14;
        v46 = 0uLL;
        v49.i64[1] = v15 + 16;
      }
      v33 = v44;
      if (v44)
      {
        v34 = (unint64_t *)&v44->__shared_owners_;
        do
          v35 = __ldaxr(v34);
        while (__stlxr(v35 - 1, v34));
        if (!v35)
        {
          ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
          std::__shared_weak_count::__release_weak(v33);
        }
      }
      v36 = v48;
      if (v48)
      {
        v37 = (unint64_t *)&v48->__shared_owners_;
        do
          v38 = __ldaxr(v37);
        while (__stlxr(v38 - 1, v37));
        if (!v38)
        {
          ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
          std::__shared_weak_count::__release_weak(v36);
        }
      }
      v3 += 2;
    }
    while (v3 != v4);
    if (v49.i64[0] != v49.i64[1])
    {
      std::allocate_shared[abi:ne180100]<mediaplatform::SQLBinaryExpressionList,std::allocator<mediaplatform::SQLBinaryExpressionList>,std::vector<std::shared_ptr<mediaplatform::SQLExpression const>> &,mediaplatform::SQLBinaryExpression::BinaryOperator,void>((uint64_t *)&v51, &v49, 1);
      std::shared_ptr<mlcore::Predicate>::operator=[abi:ne180100]((uint64_t)a3, (__int128 *)&v51);
      v39 = (std::__shared_weak_count *)v52.i64[0];
      if (v52.i64[0])
      {
        v40 = (unint64_t *)(v52.i64[0] + 8);
        do
          v41 = __ldaxr(v40);
        while (__stlxr(v41 - 1, v40));
        if (!v41)
        {
          ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
          std::__shared_weak_count::__release_weak(v39);
        }
      }
    }
  }
  v51 = &v49;
  std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v51);
}

void sub_20A656D30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void **a17, uint64_t a18, char a19)
{
  uint64_t v19;

  a17 = (void **)&a19;
  std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__destroy_vector::operator()[abi:ne180100](&a17);
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100](v19);
  _Unwind_Resume(a1);
}

void mlcore::UnaryPredicateBase::_SQLExpression(uint64_t a1)
{
  __asm { BR              X10 }
}

void sub_20A656DBC(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v3 = *(_QWORD *)(a1 + 8);
  v4 = a2[1];
  *(_QWORD *)(v2 - 48) = *a2;
  *(_QWORD *)(v2 - 40) = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v3 + 96))(v3, v2 - 48);
  v7 = *(std::__shared_weak_count **)(v2 - 40);
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
}

void sub_20A657104(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v8;
  va_list va;
  uint64_t v10;
  va_list va1;

  va_start(va1, a7);
  va_start(va, a7);
  v8 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t mlcore::TypedEntityClass<mlcore::Movie>::databaseTable()
{
  return *(_QWORD *)mediaplatform::Singleton<mlcore::ItemTable>::sharedInstance();
}

void mlcore::ForeignProperty<long long>::_SQLExpression(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;

  v2 = *(_QWORD *)(a1 + 80);
  v3 = (std::__shared_weak_count *)a2[1];
  v9 = *a2;
  v10 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v2 + 96))(v2, &v9);
  v6 = v10;
  if (v10)
  {
    v7 = (unint64_t *)&v10->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_20A657220(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void mlcore::EntityQuery::_resultPropertiesToFetch(mlcore::EntityQuery *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  *(_QWORD *)(a2 + 48) = 0;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)a2 = 0u;
  *(_DWORD *)(a2 + 56) = 1065353216;
  v8 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 112))(*((_QWORD *)this + 1));
  if (v8)
    mlcore::OrderedSet<mlcore::ModelPropertyBase *,std::hash<mlcore::ModelPropertyBase *>,std::equal_to<mlcore::ModelPropertyBase *>>::insert((float *)a2, &v8);
  v4 = (uint64_t *)*((_QWORD *)this + 13);
  v5 = (uint64_t *)*((_QWORD *)this + 14);
  while (v4 != v5)
  {
    v7 = *v4;
    mlcore::OrderedSet<mlcore::ModelPropertyBase *,std::hash<mlcore::ModelPropertyBase *>,std::equal_to<mlcore::ModelPropertyBase *>>::insert((float *)a2, &v7);
    ++v4;
  }
  v6 = mlcore::EntityQuery::_sectionProperty(this);
  if (v6)
  {
    v7 = v6;
    mlcore::OrderedSet<mlcore::ModelPropertyBase *,std::hash<mlcore::ModelPropertyBase *>,std::equal_to<mlcore::ModelPropertyBase *>>::insert((float *)a2, &v7);
  }
}

void sub_20A6572E4(_Unwind_Exception *a1)
{
  uint64_t v1;

  mlcore::OrderedSet<mlcore::ModelPropertyBase *,std::hash<mlcore::ModelPropertyBase *>,std::equal_to<mlcore::ModelPropertyBase *>>::~OrderedSet(v1);
  _Unwind_Resume(a1);
}

uint64_t mlcore::ItemPropertyPersistentID(mlcore *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&mlcore::ItemPropertyPersistentID(void)::once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&mlcore::ItemPropertyPersistentID(void)::once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyPersistentID(void)::$_0 &&>>);
  }
  return mlcore::ItemPropertyPersistentID(void)::property;
}

uint64_t mlcore::EntityQuery::_sectionProperty(mlcore::EntityQuery *this)
{
  uint64_t v1;
  const void *v3;
  void *v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9[2];

  v1 = *((_QWORD *)this + 7);
  if (*((_QWORD *)this + 8) == v1)
    return 0;
  v3 = *(const void **)(v1 + 8);
  if (!(*(unsigned int (**)(const void *))(*(_QWORD *)v3 + 88))(v3))
    return (*(uint64_t (**)(_QWORD, const void *))(**((_QWORD **)this + 1) + 144))(*((_QWORD *)this + 1), v3);
  v5 = (*(uint64_t (**)(void *))(*(_QWORD *)v4 + 24))(v4);
  result = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v5 + 8) + 144))(*(_QWORD *)(v5 + 8), v5);
  if (result)
  {
    v7 = result;
    v8 = (*(uint64_t (**)(void *))(*(_QWORD *)v4 + 16))(v4);
    v9[0] = 0;
    v9[1] = 0;
    return mlcore::GetForeignProperty<int>(v8, v7, v9);
  }
  return result;
}

void sub_20A657438(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t mlcore::TypedEntityClass<mlcore::Item>::sectionPropertyForOrderingProperty(mlcore *a1, mlcore *a2)
{
  mlcore *v3;
  mlcore *v4;
  mlcore *v5;
  mlcore *v6;
  mlcore *v7;

  v3 = (mlcore *)mlcore::ItemPropertyTitleOrder(a1);
  if (v3 == a2)
    return mlcore::ItemPropertyTitleOrderSection(v3);
  v4 = (mlcore *)mlcore::ItemPropertyAlbumOrder(v3);
  if (v4 == a2)
    return mlcore::ItemPropertyAlbumOrderSection(v4);
  v5 = (mlcore *)mlcore::ItemPropertyArtistOrder(v4);
  if (v5 == a2)
    return mlcore::ItemPropertyArtistOrderSection(v5);
  v6 = (mlcore *)mlcore::ItemPropertyComposerOrder(v5);
  if (v6 == a2)
    return mlcore::ItemPropertyComposerOrderSection(v6);
  v7 = (mlcore *)mlcore::ItemPropertyGenreOrder(v6);
  if (v7 == a2)
    return mlcore::ItemPropertyGenreOrderSection(v7);
  else
    return 0;
}

uint64_t mlcore::ItemPropertyTitleOrder(mlcore *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&mlcore::ItemPropertyTitleOrder(void)::once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&mlcore::ItemPropertyTitleOrder(void)::once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyTitleOrder(void)::$_0 &&>>);
  }
  return mlcore::ItemPropertyTitleOrder(void)::property;
}

uint64_t `non-virtual thunk to'mlcore::ForeignProperty<int>::foreignProperty(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16);
}

uint64_t mlcore::ItemPropertyTitleOrderSection(mlcore *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&mlcore::ItemPropertyTitleOrderSection(void)::once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&mlcore::ItemPropertyTitleOrderSection(void)::once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyTitleOrderSection(void)::$_0 &&>>);
  }
  return mlcore::ItemPropertyTitleOrderSection(void)::property;
}

uint64_t mlcore::TypedEntityClass<mlcore::TVEpisode>::databaseTable()
{
  return *(_QWORD *)mediaplatform::Singleton<mlcore::ItemTable>::sharedInstance();
}

void mlcore::ForeignProperty<std::string>::_SQLExpression(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;

  v2 = *(_QWORD *)(a1 + 80);
  v3 = (std::__shared_weak_count *)a2[1];
  v9 = *a2;
  v10 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v2 + 96))(v2, &v9);
  v6 = v10;
  if (v10)
  {
    v7 = (unint64_t *)&v10->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_20A65764C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void mlcore::SQLColumnNameFromEntityPrimaryKey(mlcore *this@<X0>, const mlcore::EntityClass *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  __int128 *v6;
  uint64_t v7;
  _QWORD v8[3];
  void **v9;

  v5 = (*(uint64_t (**)(mlcore *, const mlcore::EntityClass *))(*(_QWORD *)this + 88))(this, a2);
  (*(void (**)(_QWORD *__return_ptr))(*(_QWORD *)v5 + 24))(v8);
  v6 = (__int128 *)v8[0];
  v7 = (*(uint64_t (**)(mlcore *))(*(_QWORD *)this + 88))(this);
  std::allocate_shared[abi:ne180100]<mediaplatform::SQLColumnNameExpression,std::allocator<mediaplatform::SQLColumnNameExpression>,std::string &,std::string const&,void>(a3, v6, (__int128 *)(v7 + 8));
  v9 = (void **)v8;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v9);
}

void sub_20A6576E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void mlcore::ComparisonPropertyPredicate::_SQLExpression(uint64_t a1@<X0>, uint64_t *a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  _OWORD *v22;
  char v23;
  uint64_t v24;
  char v25;
  __int128 v26;
  unint64_t *v27;
  unint64_t v28;
  __int128 v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  uint64_t i;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  unint64_t *v40;
  unint64_t v41;
  _OWORD *v42;
  char v43;
  uint64_t v44;
  char v45;
  __int128 v46;
  unint64_t *v47;
  unint64_t v48;
  __int128 v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  uint64_t ii;
  unint64_t *v57;
  unint64_t *v58;
  unint64_t v59;
  _OWORD *v60;
  char v61;
  uint64_t v62;
  char v63;
  __int128 v64;
  unint64_t *v65;
  unint64_t v66;
  __int128 v67;
  std::__shared_weak_count *v68;
  unint64_t *v69;
  unint64_t v70;
  std::__shared_weak_count *v71;
  unint64_t *v72;
  unint64_t v73;
  uint64_t j;
  unint64_t *v75;
  unint64_t *v76;
  unint64_t v77;
  _OWORD *v78;
  char v79;
  uint64_t v80;
  char v81;
  __int128 v82;
  unint64_t *v83;
  unint64_t v84;
  __int128 v85;
  std::__shared_weak_count *v86;
  unint64_t *v87;
  unint64_t v88;
  std::__shared_weak_count *v89;
  unint64_t *v90;
  unint64_t v91;
  uint64_t k;
  unint64_t *v93;
  unint64_t *v94;
  unint64_t v95;
  _OWORD *v96;
  char v97;
  uint64_t v98;
  char v99;
  __int128 v100;
  unint64_t *v101;
  unint64_t v102;
  __int128 v103;
  std::__shared_weak_count *v104;
  unint64_t *v105;
  unint64_t v106;
  std::__shared_weak_count *v107;
  unint64_t *v108;
  unint64_t v109;
  uint64_t m;
  unint64_t *v111;
  unint64_t *v112;
  unint64_t v113;
  _QWORD *v114;
  char v115;
  uint64_t v116;
  char v117;
  __int128 v118;
  unint64_t *v119;
  unint64_t v120;
  __int128 v121;
  std::__shared_weak_count *v122;
  unint64_t *v123;
  unint64_t v124;
  std::__shared_weak_count *v125;
  unint64_t *v126;
  unint64_t v127;
  uint64_t n;
  std::__shared_weak_count *v129;
  unint64_t *v130;
  unint64_t v131;
  unint64_t *v132;
  unint64_t v133;
  _OWORD *v134;
  char v135;
  uint64_t v136;
  char v137;
  __int128 v138;
  unint64_t *v139;
  unint64_t v140;
  __int128 v141;
  std::__shared_weak_count *v142;
  unint64_t *v143;
  unint64_t v144;
  std::__shared_weak_count *v145;
  unint64_t *v146;
  unint64_t v147;
  uint64_t jj;
  std::__shared_weak_count *v149;
  unint64_t *v150;
  unint64_t v151;
  unint64_t *v152;
  unint64_t v153;
  _OWORD *v154;
  char v155;
  uint64_t v156;
  char v157;
  __int128 v158;
  unint64_t *v159;
  unint64_t v160;
  __int128 v161;
  std::__shared_weak_count *v162;
  unint64_t *v163;
  unint64_t v164;
  std::__shared_weak_count *v165;
  unint64_t *v166;
  unint64_t v167;
  uint64_t i2;
  unint64_t *v169;
  unint64_t *v170;
  unint64_t v171;
  _OWORD *v172;
  char v173;
  uint64_t v174;
  char v175;
  __int128 v176;
  unint64_t *v177;
  unint64_t v178;
  __int128 v179;
  std::__shared_weak_count *v180;
  unint64_t *v181;
  unint64_t v182;
  std::__shared_weak_count *v183;
  unint64_t *v184;
  unint64_t v185;
  uint64_t kk;
  unint64_t *v187;
  unint64_t *v188;
  unint64_t v189;
  _OWORD *v190;
  char v191;
  uint64_t v192;
  char v193;
  __int128 v194;
  unint64_t *v195;
  unint64_t v196;
  __int128 v197;
  std::__shared_weak_count *v198;
  unint64_t *v199;
  unint64_t v200;
  std::__shared_weak_count *v201;
  unint64_t *v202;
  unint64_t v203;
  uint64_t mm;
  unint64_t *v205;
  unint64_t *v206;
  unint64_t v207;
  _OWORD *v208;
  char v209;
  uint64_t v210;
  char v211;
  __int128 v212;
  unint64_t *v213;
  unint64_t v214;
  __int128 v215;
  std::__shared_weak_count *v216;
  unint64_t *v217;
  unint64_t v218;
  std::__shared_weak_count *v219;
  unint64_t *v220;
  unint64_t v221;
  uint64_t nn;
  unint64_t *v223;
  unint64_t *v224;
  unint64_t v225;
  _QWORD *v226;
  char v227;
  uint64_t v228;
  char v229;
  __int128 v230;
  unint64_t *v231;
  unint64_t v232;
  __int128 v233;
  std::__shared_weak_count *v234;
  unint64_t *v235;
  unint64_t v236;
  std::__shared_weak_count *v237;
  unint64_t *v238;
  unint64_t v239;
  uint64_t i1;
  std::__shared_weak_count *v241;
  unint64_t *v242;
  unint64_t v243;
  int v244;
  char *v245;
  char *v246;
  __int128 v247;
  unint64_t *v248;
  unint64_t v249;
  __int128 v250;
  unint64_t *v251;
  unint64_t v252;
  unint64_t *v253;
  unint64_t v254;
  unint64_t *v255;
  unint64_t v256;
  unint64_t v257;
  unint64_t *v258;
  unint64_t v259;
  __int128 v260;
  std::__shared_weak_count *v261;
  unint64_t *v262;
  unint64_t v263;
  std::__shared_weak_count *v264;
  unint64_t *v265;
  unint64_t v266;
  __int128 v267;
  __int128 *v268;
  _QWORD *v269;
  _QWORD *v270;
  __int128 v271;
  uint64_t v272;
  std::__shared_weak_count *v273;
  __int128 v274;
  uint64_t v275;
  std::__shared_weak_count *v276;
  __int128 v277;
  __int128 v278;
  __int128 v279;
  __int128 v280;
  char v281;
  __int128 v282;
  __int128 v283;
  uint64_t v284;

  v284 = *MEMORY[0x24BDAC8D0];
  v6 = *(_QWORD *)(a1 + 8);
  v7 = (std::__shared_weak_count *)a2[1];
  v275 = *a2;
  v276 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t *))(*(_QWORD *)v6 + 96))(&v277, v6, &v275);
  v10 = v276;
  if (v276)
  {
    v11 = (unint64_t *)&v276->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  v13 = *(_QWORD *)(a1 + 24);
  v14 = (std::__shared_weak_count *)a2[1];
  v272 = *a2;
  v273 = v14;
  if (v14)
  {
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t *))(*(_QWORD *)v13 + 96))(&v274, v13, &v272);
  v17 = v273;
  if (v273)
  {
    v18 = (unint64_t *)&v273->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  if ((*(_BYTE *)(a1 + 16) & 4) != 0)
  {
    switch((*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 80))(*(_QWORD *)(a1 + 8)))
    {
      case 0u:
        v279 = v277;
        if (*((_QWORD *)&v277 + 1))
        {
          v20 = (unint64_t *)(*((_QWORD *)&v277 + 1) + 8);
          do
            v21 = __ldxr(v20);
          while (__stxr(v21 + 1, v20));
        }
        LODWORD(v267) = 0;
        std::allocate_shared[abi:ne180100]<mediaplatform::SQLLiteralValue<int>,std::allocator<mediaplatform::SQLLiteralValue<int>>,int,void>(&v271, &v267);
        v280 = v271;
        v271 = 0uLL;
        *(_QWORD *)&v283 = 0;
        v282 = 0uLL;
        v268 = &v282;
        LOBYTE(v269) = 0;
        v22 = operator new(0x20uLL);
        v23 = 0;
        v24 = 0;
        *(_QWORD *)&v282 = v22;
        *((_QWORD *)&v282 + 1) = v22;
        *(_QWORD *)&v283 = v22 + 2;
        do
        {
          v25 = v23;
          v26 = *(&v279 + v24);
          *v22 = v26;
          if (*((_QWORD *)&v26 + 1))
          {
            v27 = (unint64_t *)(*((_QWORD *)&v26 + 1) + 8);
            do
              v28 = __ldxr(v27);
            while (__stxr(v28 + 1, v27));
          }
          ++v22;
          v23 = 1;
          v24 = 1;
        }
        while ((v25 & 1) == 0);
        *((_QWORD *)&v282 + 1) = v22;
        std::allocate_shared[abi:ne180100]<mediaplatform::SQLFunctionExpression,std::allocator<mediaplatform::SQLFunctionExpression>,char const(&)[7],std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>,void>(&v278, (_QWORD **)&v282);
        v29 = v278;
        v278 = 0uLL;
        v30 = (std::__shared_weak_count *)*((_QWORD *)&v277 + 1);
        v277 = v29;
        if (v30)
        {
          v31 = (unint64_t *)&v30->__shared_owners_;
          do
            v32 = __ldaxr(v31);
          while (__stlxr(v32 - 1, v31));
          if (!v32)
          {
            ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
            std::__shared_weak_count::__release_weak(v30);
          }
        }
        v33 = (std::__shared_weak_count *)*((_QWORD *)&v278 + 1);
        if (*((_QWORD *)&v278 + 1))
        {
          v34 = (unint64_t *)(*((_QWORD *)&v278 + 1) + 8);
          do
            v35 = __ldaxr(v34);
          while (__stlxr(v35 - 1, v34));
          if (!v35)
          {
            ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
            std::__shared_weak_count::__release_weak(v33);
          }
        }
        v268 = &v282;
        std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v268);
        for (i = 16; i != -16; i -= 16)
          std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)&v279 + i);
        v37 = (std::__shared_weak_count *)*((_QWORD *)&v271 + 1);
        if (*((_QWORD *)&v271 + 1))
        {
          v38 = (unint64_t *)(*((_QWORD *)&v271 + 1) + 8);
          do
            v39 = __ldaxr(v38);
          while (__stlxr(v39 - 1, v38));
          goto LABEL_138;
        }
        break;
      case 1u:
        v279 = v277;
        if (*((_QWORD *)&v277 + 1))
        {
          v58 = (unint64_t *)(*((_QWORD *)&v277 + 1) + 8);
          do
            v59 = __ldxr(v58);
          while (__stxr(v59 + 1, v58));
        }
        std::allocate_shared[abi:ne180100]<mediaplatform::SQLLiteralValue<long long>,std::allocator<mediaplatform::SQLLiteralValue<long long>>,int,void>(&v271, 0);
        v280 = v271;
        v271 = 0uLL;
        *(_QWORD *)&v283 = 0;
        v282 = 0uLL;
        v268 = &v282;
        LOBYTE(v269) = 0;
        v60 = operator new(0x20uLL);
        v61 = 0;
        v62 = 0;
        *(_QWORD *)&v282 = v60;
        *((_QWORD *)&v282 + 1) = v60;
        *(_QWORD *)&v283 = v60 + 2;
        do
        {
          v63 = v61;
          v64 = *(&v279 + v62);
          *v60 = v64;
          if (*((_QWORD *)&v64 + 1))
          {
            v65 = (unint64_t *)(*((_QWORD *)&v64 + 1) + 8);
            do
              v66 = __ldxr(v65);
            while (__stxr(v66 + 1, v65));
          }
          ++v60;
          v61 = 1;
          v62 = 1;
        }
        while ((v63 & 1) == 0);
        *((_QWORD *)&v282 + 1) = v60;
        std::allocate_shared[abi:ne180100]<mediaplatform::SQLFunctionExpression,std::allocator<mediaplatform::SQLFunctionExpression>,char const(&)[7],std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>,void>(&v278, (_QWORD **)&v282);
        v67 = v278;
        v278 = 0uLL;
        v68 = (std::__shared_weak_count *)*((_QWORD *)&v277 + 1);
        v277 = v67;
        if (v68)
        {
          v69 = (unint64_t *)&v68->__shared_owners_;
          do
            v70 = __ldaxr(v69);
          while (__stlxr(v70 - 1, v69));
          if (!v70)
          {
            ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
            std::__shared_weak_count::__release_weak(v68);
          }
        }
        v71 = (std::__shared_weak_count *)*((_QWORD *)&v278 + 1);
        if (*((_QWORD *)&v278 + 1))
        {
          v72 = (unint64_t *)(*((_QWORD *)&v278 + 1) + 8);
          do
            v73 = __ldaxr(v72);
          while (__stlxr(v73 - 1, v72));
          if (!v73)
          {
            ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
            std::__shared_weak_count::__release_weak(v71);
          }
        }
        v268 = &v282;
        std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v268);
        for (j = 16; j != -16; j -= 16)
          std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)&v279 + j);
        v37 = (std::__shared_weak_count *)*((_QWORD *)&v271 + 1);
        if (*((_QWORD *)&v271 + 1))
        {
          v75 = (unint64_t *)(*((_QWORD *)&v271 + 1) + 8);
          do
            v39 = __ldaxr(v75);
          while (__stlxr(v39 - 1, v75));
          goto LABEL_138;
        }
        break;
      case 2u:
        v279 = v277;
        if (*((_QWORD *)&v277 + 1))
        {
          v76 = (unint64_t *)(*((_QWORD *)&v277 + 1) + 8);
          do
            v77 = __ldxr(v76);
          while (__stxr(v77 + 1, v76));
        }
        std::allocate_shared[abi:ne180100]<mediaplatform::SQLLiteralValue<double>,std::allocator<mediaplatform::SQLLiteralValue<double>>,int,void>(&v271, 0);
        v280 = v271;
        v271 = 0uLL;
        *(_QWORD *)&v283 = 0;
        v282 = 0uLL;
        v268 = &v282;
        LOBYTE(v269) = 0;
        v78 = operator new(0x20uLL);
        v79 = 0;
        v80 = 0;
        *(_QWORD *)&v282 = v78;
        *((_QWORD *)&v282 + 1) = v78;
        *(_QWORD *)&v283 = v78 + 2;
        do
        {
          v81 = v79;
          v82 = *(&v279 + v80);
          *v78 = v82;
          if (*((_QWORD *)&v82 + 1))
          {
            v83 = (unint64_t *)(*((_QWORD *)&v82 + 1) + 8);
            do
              v84 = __ldxr(v83);
            while (__stxr(v84 + 1, v83));
          }
          ++v78;
          v79 = 1;
          v80 = 1;
        }
        while ((v81 & 1) == 0);
        *((_QWORD *)&v282 + 1) = v78;
        std::allocate_shared[abi:ne180100]<mediaplatform::SQLFunctionExpression,std::allocator<mediaplatform::SQLFunctionExpression>,char const(&)[7],std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>,void>(&v278, (_QWORD **)&v282);
        v85 = v278;
        v278 = 0uLL;
        v86 = (std::__shared_weak_count *)*((_QWORD *)&v277 + 1);
        v277 = v85;
        if (v86)
        {
          v87 = (unint64_t *)&v86->__shared_owners_;
          do
            v88 = __ldaxr(v87);
          while (__stlxr(v88 - 1, v87));
          if (!v88)
          {
            ((void (*)(std::__shared_weak_count *))v86->__on_zero_shared)(v86);
            std::__shared_weak_count::__release_weak(v86);
          }
        }
        v89 = (std::__shared_weak_count *)*((_QWORD *)&v278 + 1);
        if (*((_QWORD *)&v278 + 1))
        {
          v90 = (unint64_t *)(*((_QWORD *)&v278 + 1) + 8);
          do
            v91 = __ldaxr(v90);
          while (__stlxr(v91 - 1, v90));
          if (!v91)
          {
            ((void (*)(std::__shared_weak_count *))v89->__on_zero_shared)(v89);
            std::__shared_weak_count::__release_weak(v89);
          }
        }
        v268 = &v282;
        std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v268);
        for (k = 16; k != -16; k -= 16)
          std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)&v279 + k);
        v37 = (std::__shared_weak_count *)*((_QWORD *)&v271 + 1);
        if (*((_QWORD *)&v271 + 1))
        {
          v93 = (unint64_t *)(*((_QWORD *)&v271 + 1) + 8);
          do
            v39 = __ldaxr(v93);
          while (__stlxr(v39 - 1, v93));
          goto LABEL_138;
        }
        break;
      case 3u:
        v279 = v277;
        if (*((_QWORD *)&v277 + 1))
        {
          v94 = (unint64_t *)(*((_QWORD *)&v277 + 1) + 8);
          do
            v95 = __ldxr(v94);
          while (__stxr(v95 + 1, v94));
        }
        std::allocate_shared[abi:ne180100]<mediaplatform::SQLLiteralValue<std::string>,std::allocator<mediaplatform::SQLLiteralValue<std::string>>,char const(&)[1],void>(&v271);
        v280 = v271;
        v271 = 0uLL;
        *(_QWORD *)&v283 = 0;
        v282 = 0uLL;
        v268 = &v282;
        LOBYTE(v269) = 0;
        v96 = operator new(0x20uLL);
        v97 = 0;
        v98 = 0;
        *(_QWORD *)&v282 = v96;
        *((_QWORD *)&v282 + 1) = v96;
        *(_QWORD *)&v283 = v96 + 2;
        do
        {
          v99 = v97;
          v100 = *(&v279 + v98);
          *v96 = v100;
          if (*((_QWORD *)&v100 + 1))
          {
            v101 = (unint64_t *)(*((_QWORD *)&v100 + 1) + 8);
            do
              v102 = __ldxr(v101);
            while (__stxr(v102 + 1, v101));
          }
          ++v96;
          v97 = 1;
          v98 = 1;
        }
        while ((v99 & 1) == 0);
        *((_QWORD *)&v282 + 1) = v96;
        std::allocate_shared[abi:ne180100]<mediaplatform::SQLFunctionExpression,std::allocator<mediaplatform::SQLFunctionExpression>,char const(&)[7],std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>,void>(&v278, (_QWORD **)&v282);
        v103 = v278;
        v278 = 0uLL;
        v104 = (std::__shared_weak_count *)*((_QWORD *)&v277 + 1);
        v277 = v103;
        if (v104)
        {
          v105 = (unint64_t *)&v104->__shared_owners_;
          do
            v106 = __ldaxr(v105);
          while (__stlxr(v106 - 1, v105));
          if (!v106)
          {
            ((void (*)(std::__shared_weak_count *))v104->__on_zero_shared)(v104);
            std::__shared_weak_count::__release_weak(v104);
          }
        }
        v107 = (std::__shared_weak_count *)*((_QWORD *)&v278 + 1);
        if (*((_QWORD *)&v278 + 1))
        {
          v108 = (unint64_t *)(*((_QWORD *)&v278 + 1) + 8);
          do
            v109 = __ldaxr(v108);
          while (__stlxr(v109 - 1, v108));
          if (!v109)
          {
            ((void (*)(std::__shared_weak_count *))v107->__on_zero_shared)(v107);
            std::__shared_weak_count::__release_weak(v107);
          }
        }
        v268 = &v282;
        std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v268);
        for (m = 16; m != -16; m -= 16)
          std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)&v279 + m);
        v37 = (std::__shared_weak_count *)*((_QWORD *)&v271 + 1);
        if (*((_QWORD *)&v271 + 1))
        {
          v111 = (unint64_t *)(*((_QWORD *)&v271 + 1) + 8);
          do
            v39 = __ldaxr(v111);
          while (__stlxr(v39 - 1, v111));
          goto LABEL_138;
        }
        break;
      case 4u:
        v282 = v277;
        if (*((_QWORD *)&v277 + 1))
        {
          v112 = (unint64_t *)(*((_QWORD *)&v277 + 1) + 8);
          do
            v113 = __ldxr(v112);
          while (__stxr(v113 + 1, v112));
        }
        *(_QWORD *)&v279 = &off_24C331510;
        *((_QWORD *)&v279 + 1) = 0;
        v280 = 0uLL;
        v281 = 0;
        std::allocate_shared[abi:ne180100]<mediaplatform::SQLLiteralValue<mediaplatform::Data>,std::allocator<mediaplatform::SQLLiteralValue<mediaplatform::Data>>,mediaplatform::Data,void>(&v267, (const mediaplatform::Data *)&v279);
        v283 = v267;
        v267 = 0uLL;
        v269 = 0;
        v270 = 0;
        v268 = 0;
        *(_QWORD *)&v278 = &v268;
        BYTE8(v278) = 0;
        v114 = operator new(0x20uLL);
        v115 = 0;
        v116 = 0;
        v268 = (__int128 *)v114;
        v269 = v114;
        v270 = v114 + 4;
        do
        {
          v117 = v115;
          v118 = *(&v282 + v116);
          *(_OWORD *)v114 = v118;
          if (*((_QWORD *)&v118 + 1))
          {
            v119 = (unint64_t *)(*((_QWORD *)&v118 + 1) + 8);
            do
              v120 = __ldxr(v119);
            while (__stxr(v120 + 1, v119));
          }
          v114 += 2;
          v115 = 1;
          v116 = 1;
        }
        while ((v117 & 1) == 0);
        v269 = v114;
        std::allocate_shared[abi:ne180100]<mediaplatform::SQLFunctionExpression,std::allocator<mediaplatform::SQLFunctionExpression>,char const(&)[7],std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>,void>(&v271, (_QWORD **)&v268);
        v121 = v271;
        v271 = 0uLL;
        v122 = (std::__shared_weak_count *)*((_QWORD *)&v277 + 1);
        v277 = v121;
        if (v122)
        {
          v123 = (unint64_t *)&v122->__shared_owners_;
          do
            v124 = __ldaxr(v123);
          while (__stlxr(v124 - 1, v123));
          if (!v124)
          {
            ((void (*)(std::__shared_weak_count *))v122->__on_zero_shared)(v122);
            std::__shared_weak_count::__release_weak(v122);
          }
        }
        v125 = (std::__shared_weak_count *)*((_QWORD *)&v271 + 1);
        if (*((_QWORD *)&v271 + 1))
        {
          v126 = (unint64_t *)(*((_QWORD *)&v271 + 1) + 8);
          do
            v127 = __ldaxr(v126);
          while (__stlxr(v127 - 1, v126));
          if (!v127)
          {
            ((void (*)(std::__shared_weak_count *))v125->__on_zero_shared)(v125);
            std::__shared_weak_count::__release_weak(v125);
          }
        }
        *(_QWORD *)&v278 = &v268;
        std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v278);
        for (n = 16; n != -16; n -= 16)
          std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)&v282 + n);
        v129 = (std::__shared_weak_count *)*((_QWORD *)&v267 + 1);
        if (*((_QWORD *)&v267 + 1))
        {
          v130 = (unint64_t *)(*((_QWORD *)&v267 + 1) + 8);
          do
            v131 = __ldaxr(v130);
          while (__stlxr(v131 - 1, v130));
          if (!v131)
          {
            ((void (*)(std::__shared_weak_count *))v129->__on_zero_shared)(v129);
            std::__shared_weak_count::__release_weak(v129);
          }
        }
        if (v281 && *((_QWORD *)&v280 + 1))
          MEMORY[0x20BD27AE4](*((_QWORD *)&v280 + 1), 0x1000C8077774924);
        break;
      default:
        v279 = v277;
        if (*((_QWORD *)&v277 + 1))
        {
          v40 = (unint64_t *)(*((_QWORD *)&v277 + 1) + 8);
          do
            v41 = __ldxr(v40);
          while (__stxr(v41 + 1, v40));
        }
        std::allocate_shared[abi:ne180100]<mediaplatform::SQLLiteralValue<long long>,std::allocator<mediaplatform::SQLLiteralValue<long long>>,int,void>(&v271, 0);
        v280 = v271;
        v271 = 0uLL;
        *(_QWORD *)&v283 = 0;
        v282 = 0uLL;
        v268 = &v282;
        LOBYTE(v269) = 0;
        v42 = operator new(0x20uLL);
        v43 = 0;
        v44 = 0;
        *(_QWORD *)&v282 = v42;
        *((_QWORD *)&v282 + 1) = v42;
        *(_QWORD *)&v283 = v42 + 2;
        do
        {
          v45 = v43;
          v46 = *(&v279 + v44);
          *v42 = v46;
          if (*((_QWORD *)&v46 + 1))
          {
            v47 = (unint64_t *)(*((_QWORD *)&v46 + 1) + 8);
            do
              v48 = __ldxr(v47);
            while (__stxr(v48 + 1, v47));
          }
          ++v42;
          v43 = 1;
          v44 = 1;
        }
        while ((v45 & 1) == 0);
        *((_QWORD *)&v282 + 1) = v42;
        std::allocate_shared[abi:ne180100]<mediaplatform::SQLFunctionExpression,std::allocator<mediaplatform::SQLFunctionExpression>,char const(&)[7],std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>,void>(&v278, (_QWORD **)&v282);
        v49 = v278;
        v278 = 0uLL;
        v50 = (std::__shared_weak_count *)*((_QWORD *)&v277 + 1);
        v277 = v49;
        if (v50)
        {
          v51 = (unint64_t *)&v50->__shared_owners_;
          do
            v52 = __ldaxr(v51);
          while (__stlxr(v52 - 1, v51));
          if (!v52)
          {
            ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
            std::__shared_weak_count::__release_weak(v50);
          }
        }
        v53 = (std::__shared_weak_count *)*((_QWORD *)&v278 + 1);
        if (*((_QWORD *)&v278 + 1))
        {
          v54 = (unint64_t *)(*((_QWORD *)&v278 + 1) + 8);
          do
            v55 = __ldaxr(v54);
          while (__stlxr(v55 - 1, v54));
          if (!v55)
          {
            ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
            std::__shared_weak_count::__release_weak(v53);
          }
        }
        v268 = &v282;
        std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v268);
        for (ii = 16; ii != -16; ii -= 16)
          std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)&v279 + ii);
        v37 = (std::__shared_weak_count *)*((_QWORD *)&v271 + 1);
        if (*((_QWORD *)&v271 + 1))
        {
          v57 = (unint64_t *)(*((_QWORD *)&v271 + 1) + 8);
          do
            v39 = __ldaxr(v57);
          while (__stlxr(v39 - 1, v57));
LABEL_138:
          if (!v39)
          {
            ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
            std::__shared_weak_count::__release_weak(v37);
          }
        }
        break;
    }
    switch((*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 80))(*(_QWORD *)(a1 + 24)))
    {
      case 0u:
        v279 = v274;
        if (*((_QWORD *)&v274 + 1))
        {
          v132 = (unint64_t *)(*((_QWORD *)&v274 + 1) + 8);
          do
            v133 = __ldxr(v132);
          while (__stxr(v133 + 1, v132));
        }
        LODWORD(v267) = 0;
        std::allocate_shared[abi:ne180100]<mediaplatform::SQLLiteralValue<int>,std::allocator<mediaplatform::SQLLiteralValue<int>>,int,void>(&v271, &v267);
        v280 = v271;
        v271 = 0uLL;
        *(_QWORD *)&v283 = 0;
        v282 = 0uLL;
        v268 = &v282;
        LOBYTE(v269) = 0;
        v134 = operator new(0x20uLL);
        v135 = 0;
        v136 = 0;
        *(_QWORD *)&v282 = v134;
        *((_QWORD *)&v282 + 1) = v134;
        *(_QWORD *)&v283 = v134 + 2;
        do
        {
          v137 = v135;
          v138 = *(&v279 + v136);
          *v134 = v138;
          if (*((_QWORD *)&v138 + 1))
          {
            v139 = (unint64_t *)(*((_QWORD *)&v138 + 1) + 8);
            do
              v140 = __ldxr(v139);
            while (__stxr(v140 + 1, v139));
          }
          ++v134;
          v135 = 1;
          v136 = 1;
        }
        while ((v137 & 1) == 0);
        *((_QWORD *)&v282 + 1) = v134;
        std::allocate_shared[abi:ne180100]<mediaplatform::SQLFunctionExpression,std::allocator<mediaplatform::SQLFunctionExpression>,char const(&)[7],std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>,void>(&v278, (_QWORD **)&v282);
        v141 = v278;
        v278 = 0uLL;
        v142 = (std::__shared_weak_count *)*((_QWORD *)&v274 + 1);
        v274 = v141;
        if (v142)
        {
          v143 = (unint64_t *)&v142->__shared_owners_;
          do
            v144 = __ldaxr(v143);
          while (__stlxr(v144 - 1, v143));
          if (!v144)
          {
            ((void (*)(std::__shared_weak_count *))v142->__on_zero_shared)(v142);
            std::__shared_weak_count::__release_weak(v142);
          }
        }
        v145 = (std::__shared_weak_count *)*((_QWORD *)&v278 + 1);
        if (*((_QWORD *)&v278 + 1))
        {
          v146 = (unint64_t *)(*((_QWORD *)&v278 + 1) + 8);
          do
            v147 = __ldaxr(v146);
          while (__stlxr(v147 - 1, v146));
          if (!v147)
          {
            ((void (*)(std::__shared_weak_count *))v145->__on_zero_shared)(v145);
            std::__shared_weak_count::__release_weak(v145);
          }
        }
        v268 = &v282;
        std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v268);
        for (jj = 16; jj != -16; jj -= 16)
          std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)&v279 + jj);
        v149 = (std::__shared_weak_count *)*((_QWORD *)&v271 + 1);
        if (*((_QWORD *)&v271 + 1))
        {
          v150 = (unint64_t *)(*((_QWORD *)&v271 + 1) + 8);
          do
            v151 = __ldaxr(v150);
          while (__stlxr(v151 - 1, v150));
          goto LABEL_288;
        }
        break;
      case 1u:
        v279 = v274;
        if (*((_QWORD *)&v274 + 1))
        {
          v170 = (unint64_t *)(*((_QWORD *)&v274 + 1) + 8);
          do
            v171 = __ldxr(v170);
          while (__stxr(v171 + 1, v170));
        }
        std::allocate_shared[abi:ne180100]<mediaplatform::SQLLiteralValue<long long>,std::allocator<mediaplatform::SQLLiteralValue<long long>>,int,void>(&v271, 0);
        v280 = v271;
        v271 = 0uLL;
        *(_QWORD *)&v283 = 0;
        v282 = 0uLL;
        v268 = &v282;
        LOBYTE(v269) = 0;
        v172 = operator new(0x20uLL);
        v173 = 0;
        v174 = 0;
        *(_QWORD *)&v282 = v172;
        *((_QWORD *)&v282 + 1) = v172;
        *(_QWORD *)&v283 = v172 + 2;
        do
        {
          v175 = v173;
          v176 = *(&v279 + v174);
          *v172 = v176;
          if (*((_QWORD *)&v176 + 1))
          {
            v177 = (unint64_t *)(*((_QWORD *)&v176 + 1) + 8);
            do
              v178 = __ldxr(v177);
            while (__stxr(v178 + 1, v177));
          }
          ++v172;
          v173 = 1;
          v174 = 1;
        }
        while ((v175 & 1) == 0);
        *((_QWORD *)&v282 + 1) = v172;
        std::allocate_shared[abi:ne180100]<mediaplatform::SQLFunctionExpression,std::allocator<mediaplatform::SQLFunctionExpression>,char const(&)[7],std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>,void>(&v278, (_QWORD **)&v282);
        v179 = v278;
        v278 = 0uLL;
        v180 = (std::__shared_weak_count *)*((_QWORD *)&v274 + 1);
        v274 = v179;
        if (v180)
        {
          v181 = (unint64_t *)&v180->__shared_owners_;
          do
            v182 = __ldaxr(v181);
          while (__stlxr(v182 - 1, v181));
          if (!v182)
          {
            ((void (*)(std::__shared_weak_count *))v180->__on_zero_shared)(v180);
            std::__shared_weak_count::__release_weak(v180);
          }
        }
        v183 = (std::__shared_weak_count *)*((_QWORD *)&v278 + 1);
        if (*((_QWORD *)&v278 + 1))
        {
          v184 = (unint64_t *)(*((_QWORD *)&v278 + 1) + 8);
          do
            v185 = __ldaxr(v184);
          while (__stlxr(v185 - 1, v184));
          if (!v185)
          {
            ((void (*)(std::__shared_weak_count *))v183->__on_zero_shared)(v183);
            std::__shared_weak_count::__release_weak(v183);
          }
        }
        v268 = &v282;
        std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v268);
        for (kk = 16; kk != -16; kk -= 16)
          std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)&v279 + kk);
        v149 = (std::__shared_weak_count *)*((_QWORD *)&v271 + 1);
        if (*((_QWORD *)&v271 + 1))
        {
          v187 = (unint64_t *)(*((_QWORD *)&v271 + 1) + 8);
          do
            v151 = __ldaxr(v187);
          while (__stlxr(v151 - 1, v187));
          goto LABEL_288;
        }
        break;
      case 2u:
        v279 = v274;
        if (*((_QWORD *)&v274 + 1))
        {
          v188 = (unint64_t *)(*((_QWORD *)&v274 + 1) + 8);
          do
            v189 = __ldxr(v188);
          while (__stxr(v189 + 1, v188));
        }
        std::allocate_shared[abi:ne180100]<mediaplatform::SQLLiteralValue<double>,std::allocator<mediaplatform::SQLLiteralValue<double>>,int,void>(&v271, 0);
        v280 = v271;
        v271 = 0uLL;
        *(_QWORD *)&v283 = 0;
        v282 = 0uLL;
        v268 = &v282;
        LOBYTE(v269) = 0;
        v190 = operator new(0x20uLL);
        v191 = 0;
        v192 = 0;
        *(_QWORD *)&v282 = v190;
        *((_QWORD *)&v282 + 1) = v190;
        *(_QWORD *)&v283 = v190 + 2;
        do
        {
          v193 = v191;
          v194 = *(&v279 + v192);
          *v190 = v194;
          if (*((_QWORD *)&v194 + 1))
          {
            v195 = (unint64_t *)(*((_QWORD *)&v194 + 1) + 8);
            do
              v196 = __ldxr(v195);
            while (__stxr(v196 + 1, v195));
          }
          ++v190;
          v191 = 1;
          v192 = 1;
        }
        while ((v193 & 1) == 0);
        *((_QWORD *)&v282 + 1) = v190;
        std::allocate_shared[abi:ne180100]<mediaplatform::SQLFunctionExpression,std::allocator<mediaplatform::SQLFunctionExpression>,char const(&)[7],std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>,void>(&v278, (_QWORD **)&v282);
        v197 = v278;
        v278 = 0uLL;
        v198 = (std::__shared_weak_count *)*((_QWORD *)&v274 + 1);
        v274 = v197;
        if (v198)
        {
          v199 = (unint64_t *)&v198->__shared_owners_;
          do
            v200 = __ldaxr(v199);
          while (__stlxr(v200 - 1, v199));
          if (!v200)
          {
            ((void (*)(std::__shared_weak_count *))v198->__on_zero_shared)(v198);
            std::__shared_weak_count::__release_weak(v198);
          }
        }
        v201 = (std::__shared_weak_count *)*((_QWORD *)&v278 + 1);
        if (*((_QWORD *)&v278 + 1))
        {
          v202 = (unint64_t *)(*((_QWORD *)&v278 + 1) + 8);
          do
            v203 = __ldaxr(v202);
          while (__stlxr(v203 - 1, v202));
          if (!v203)
          {
            ((void (*)(std::__shared_weak_count *))v201->__on_zero_shared)(v201);
            std::__shared_weak_count::__release_weak(v201);
          }
        }
        v268 = &v282;
        std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v268);
        for (mm = 16; mm != -16; mm -= 16)
          std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)&v279 + mm);
        v149 = (std::__shared_weak_count *)*((_QWORD *)&v271 + 1);
        if (*((_QWORD *)&v271 + 1))
        {
          v205 = (unint64_t *)(*((_QWORD *)&v271 + 1) + 8);
          do
            v151 = __ldaxr(v205);
          while (__stlxr(v151 - 1, v205));
          goto LABEL_288;
        }
        break;
      case 3u:
        v279 = v274;
        if (*((_QWORD *)&v274 + 1))
        {
          v206 = (unint64_t *)(*((_QWORD *)&v274 + 1) + 8);
          do
            v207 = __ldxr(v206);
          while (__stxr(v207 + 1, v206));
        }
        std::allocate_shared[abi:ne180100]<mediaplatform::SQLLiteralValue<std::string>,std::allocator<mediaplatform::SQLLiteralValue<std::string>>,char const(&)[1],void>(&v271);
        v280 = v271;
        v271 = 0uLL;
        *(_QWORD *)&v283 = 0;
        v282 = 0uLL;
        v268 = &v282;
        LOBYTE(v269) = 0;
        v208 = operator new(0x20uLL);
        v209 = 0;
        v210 = 0;
        *(_QWORD *)&v282 = v208;
        *((_QWORD *)&v282 + 1) = v208;
        *(_QWORD *)&v283 = v208 + 2;
        do
        {
          v211 = v209;
          v212 = *(&v279 + v210);
          *v208 = v212;
          if (*((_QWORD *)&v212 + 1))
          {
            v213 = (unint64_t *)(*((_QWORD *)&v212 + 1) + 8);
            do
              v214 = __ldxr(v213);
            while (__stxr(v214 + 1, v213));
          }
          ++v208;
          v209 = 1;
          v210 = 1;
        }
        while ((v211 & 1) == 0);
        *((_QWORD *)&v282 + 1) = v208;
        std::allocate_shared[abi:ne180100]<mediaplatform::SQLFunctionExpression,std::allocator<mediaplatform::SQLFunctionExpression>,char const(&)[7],std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>,void>(&v278, (_QWORD **)&v282);
        v215 = v278;
        v278 = 0uLL;
        v216 = (std::__shared_weak_count *)*((_QWORD *)&v274 + 1);
        v274 = v215;
        if (v216)
        {
          v217 = (unint64_t *)&v216->__shared_owners_;
          do
            v218 = __ldaxr(v217);
          while (__stlxr(v218 - 1, v217));
          if (!v218)
          {
            ((void (*)(std::__shared_weak_count *))v216->__on_zero_shared)(v216);
            std::__shared_weak_count::__release_weak(v216);
          }
        }
        v219 = (std::__shared_weak_count *)*((_QWORD *)&v278 + 1);
        if (*((_QWORD *)&v278 + 1))
        {
          v220 = (unint64_t *)(*((_QWORD *)&v278 + 1) + 8);
          do
            v221 = __ldaxr(v220);
          while (__stlxr(v221 - 1, v220));
          if (!v221)
          {
            ((void (*)(std::__shared_weak_count *))v219->__on_zero_shared)(v219);
            std::__shared_weak_count::__release_weak(v219);
          }
        }
        v268 = &v282;
        std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v268);
        for (nn = 16; nn != -16; nn -= 16)
          std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)&v279 + nn);
        v149 = (std::__shared_weak_count *)*((_QWORD *)&v271 + 1);
        if (*((_QWORD *)&v271 + 1))
        {
          v223 = (unint64_t *)(*((_QWORD *)&v271 + 1) + 8);
          do
            v151 = __ldaxr(v223);
          while (__stlxr(v151 - 1, v223));
          goto LABEL_288;
        }
        break;
      case 4u:
        v282 = v274;
        if (*((_QWORD *)&v274 + 1))
        {
          v224 = (unint64_t *)(*((_QWORD *)&v274 + 1) + 8);
          do
            v225 = __ldxr(v224);
          while (__stxr(v225 + 1, v224));
        }
        *(_QWORD *)&v279 = &off_24C331510;
        *((_QWORD *)&v279 + 1) = 0;
        v280 = 0uLL;
        v281 = 0;
        std::allocate_shared[abi:ne180100]<mediaplatform::SQLLiteralValue<mediaplatform::Data>,std::allocator<mediaplatform::SQLLiteralValue<mediaplatform::Data>>,mediaplatform::Data,void>(&v267, (const mediaplatform::Data *)&v279);
        v283 = v267;
        v267 = 0uLL;
        v269 = 0;
        v270 = 0;
        v268 = 0;
        *(_QWORD *)&v278 = &v268;
        BYTE8(v278) = 0;
        v226 = operator new(0x20uLL);
        v227 = 0;
        v228 = 0;
        v268 = (__int128 *)v226;
        v269 = v226;
        v270 = v226 + 4;
        do
        {
          v229 = v227;
          v230 = *(&v282 + v228);
          *(_OWORD *)v226 = v230;
          if (*((_QWORD *)&v230 + 1))
          {
            v231 = (unint64_t *)(*((_QWORD *)&v230 + 1) + 8);
            do
              v232 = __ldxr(v231);
            while (__stxr(v232 + 1, v231));
          }
          v226 += 2;
          v227 = 1;
          v228 = 1;
        }
        while ((v229 & 1) == 0);
        v269 = v226;
        std::allocate_shared[abi:ne180100]<mediaplatform::SQLFunctionExpression,std::allocator<mediaplatform::SQLFunctionExpression>,char const(&)[7],std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>,void>(&v271, (_QWORD **)&v268);
        v233 = v271;
        v271 = 0uLL;
        v234 = (std::__shared_weak_count *)*((_QWORD *)&v274 + 1);
        v274 = v233;
        if (v234)
        {
          v235 = (unint64_t *)&v234->__shared_owners_;
          do
            v236 = __ldaxr(v235);
          while (__stlxr(v236 - 1, v235));
          if (!v236)
          {
            ((void (*)(std::__shared_weak_count *))v234->__on_zero_shared)(v234);
            std::__shared_weak_count::__release_weak(v234);
          }
        }
        v237 = (std::__shared_weak_count *)*((_QWORD *)&v271 + 1);
        if (*((_QWORD *)&v271 + 1))
        {
          v238 = (unint64_t *)(*((_QWORD *)&v271 + 1) + 8);
          do
            v239 = __ldaxr(v238);
          while (__stlxr(v239 - 1, v238));
          if (!v239)
          {
            ((void (*)(std::__shared_weak_count *))v237->__on_zero_shared)(v237);
            std::__shared_weak_count::__release_weak(v237);
          }
        }
        *(_QWORD *)&v278 = &v268;
        std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v278);
        for (i1 = 16; i1 != -16; i1 -= 16)
          std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)&v282 + i1);
        v241 = (std::__shared_weak_count *)*((_QWORD *)&v267 + 1);
        if (*((_QWORD *)&v267 + 1))
        {
          v242 = (unint64_t *)(*((_QWORD *)&v267 + 1) + 8);
          do
            v243 = __ldaxr(v242);
          while (__stlxr(v243 - 1, v242));
          if (!v243)
          {
            ((void (*)(std::__shared_weak_count *))v241->__on_zero_shared)(v241);
            std::__shared_weak_count::__release_weak(v241);
          }
        }
        if (v281 && *((_QWORD *)&v280 + 1))
          MEMORY[0x20BD27AE4](*((_QWORD *)&v280 + 1), 0x1000C8077774924);
        break;
      default:
        v279 = v274;
        if (*((_QWORD *)&v274 + 1))
        {
          v152 = (unint64_t *)(*((_QWORD *)&v274 + 1) + 8);
          do
            v153 = __ldxr(v152);
          while (__stxr(v153 + 1, v152));
        }
        std::allocate_shared[abi:ne180100]<mediaplatform::SQLLiteralValue<long long>,std::allocator<mediaplatform::SQLLiteralValue<long long>>,int,void>(&v271, 0);
        v280 = v271;
        v271 = 0uLL;
        *(_QWORD *)&v283 = 0;
        v282 = 0uLL;
        v268 = &v282;
        LOBYTE(v269) = 0;
        v154 = operator new(0x20uLL);
        v155 = 0;
        v156 = 0;
        *(_QWORD *)&v282 = v154;
        *((_QWORD *)&v282 + 1) = v154;
        *(_QWORD *)&v283 = v154 + 2;
        do
        {
          v157 = v155;
          v158 = *(&v279 + v156);
          *v154 = v158;
          if (*((_QWORD *)&v158 + 1))
          {
            v159 = (unint64_t *)(*((_QWORD *)&v158 + 1) + 8);
            do
              v160 = __ldxr(v159);
            while (__stxr(v160 + 1, v159));
          }
          ++v154;
          v155 = 1;
          v156 = 1;
        }
        while ((v157 & 1) == 0);
        *((_QWORD *)&v282 + 1) = v154;
        std::allocate_shared[abi:ne180100]<mediaplatform::SQLFunctionExpression,std::allocator<mediaplatform::SQLFunctionExpression>,char const(&)[7],std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>,void>(&v278, (_QWORD **)&v282);
        v161 = v278;
        v278 = 0uLL;
        v162 = (std::__shared_weak_count *)*((_QWORD *)&v274 + 1);
        v274 = v161;
        if (v162)
        {
          v163 = (unint64_t *)&v162->__shared_owners_;
          do
            v164 = __ldaxr(v163);
          while (__stlxr(v164 - 1, v163));
          if (!v164)
          {
            ((void (*)(std::__shared_weak_count *))v162->__on_zero_shared)(v162);
            std::__shared_weak_count::__release_weak(v162);
          }
        }
        v165 = (std::__shared_weak_count *)*((_QWORD *)&v278 + 1);
        if (*((_QWORD *)&v278 + 1))
        {
          v166 = (unint64_t *)(*((_QWORD *)&v278 + 1) + 8);
          do
            v167 = __ldaxr(v166);
          while (__stlxr(v167 - 1, v166));
          if (!v167)
          {
            ((void (*)(std::__shared_weak_count *))v165->__on_zero_shared)(v165);
            std::__shared_weak_count::__release_weak(v165);
          }
        }
        v268 = &v282;
        std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v268);
        for (i2 = 16; i2 != -16; i2 -= 16)
          std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)&v279 + i2);
        v149 = (std::__shared_weak_count *)*((_QWORD *)&v271 + 1);
        if (*((_QWORD *)&v271 + 1))
        {
          v169 = (unint64_t *)(*((_QWORD *)&v271 + 1) + 8);
          do
            v151 = __ldaxr(v169);
          while (__stlxr(v151 - 1, v169));
LABEL_288:
          if (!v151)
          {
            ((void (*)(std::__shared_weak_count *))v149->__on_zero_shared)(v149);
            std::__shared_weak_count::__release_weak(v149);
          }
        }
        break;
    }
  }
  v244 = mlcore::ComparisonPredicateBase::_SQLOperator((mlcore::ComparisonPredicateBase *)a1);
  v245 = (char *)operator new(0x48uLL);
  v246 = v245;
  *((_QWORD *)v245 + 1) = 0;
  *((_QWORD *)v245 + 2) = 0;
  *(_QWORD *)v245 = &off_24C33BEC8;
  v247 = v277;
  if (*((_QWORD *)&v277 + 1))
  {
    v248 = (unint64_t *)(*((_QWORD *)&v277 + 1) + 8);
    do
      v249 = __ldxr(v248);
    while (__stxr(v249 + 1, v248));
  }
  v250 = v274;
  if (*((_QWORD *)&v274 + 1))
  {
    v251 = (unint64_t *)(*((_QWORD *)&v274 + 1) + 8);
    do
      v252 = __ldxr(v251);
    while (__stxr(v252 + 1, v251));
  }
  *((_QWORD *)v245 + 3) = &off_24C331138;
  *((_DWORD *)v245 + 8) = v244;
  *(_OWORD *)(v245 + 40) = v247;
  if (*((_QWORD *)&v247 + 1))
  {
    v253 = (unint64_t *)(*((_QWORD *)&v247 + 1) + 8);
    do
      v254 = __ldxr(v253);
    while (__stxr(v254 + 1, v253));
  }
  *(_OWORD *)(v245 + 56) = v250;
  if (*((_QWORD *)&v250 + 1))
  {
    v255 = (unint64_t *)(*((_QWORD *)&v250 + 1) + 8);
    do
      v256 = __ldxr(v255);
    while (__stxr(v256 + 1, v255));
    do
      v257 = __ldaxr(v255);
    while (__stlxr(v257 - 1, v255));
    if (!v257)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v250 + 1) + 16))(*((_QWORD *)&v250 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v250 + 1));
    }
  }
  if (*((_QWORD *)&v247 + 1))
  {
    v258 = (unint64_t *)(*((_QWORD *)&v247 + 1) + 8);
    do
      v259 = __ldaxr(v258);
    while (__stlxr(v259 - 1, v258));
    if (!v259)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v247 + 1) + 16))(*((_QWORD *)&v247 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v247 + 1));
    }
  }
  *(_QWORD *)&v260 = v246 + 24;
  *((_QWORD *)&v260 + 1) = v246;
  *a3 = v260;
  v261 = (std::__shared_weak_count *)*((_QWORD *)&v274 + 1);
  if (*((_QWORD *)&v274 + 1))
  {
    v262 = (unint64_t *)(*((_QWORD *)&v274 + 1) + 8);
    do
      v263 = __ldaxr(v262);
    while (__stlxr(v263 - 1, v262));
    if (!v263)
    {
      ((void (*)(std::__shared_weak_count *))v261->__on_zero_shared)(v261);
      std::__shared_weak_count::__release_weak(v261);
    }
  }
  v264 = (std::__shared_weak_count *)*((_QWORD *)&v277 + 1);
  if (*((_QWORD *)&v277 + 1))
  {
    v265 = (unint64_t *)(*((_QWORD *)&v277 + 1) + 8);
    do
      v266 = __ldaxr(v265);
    while (__stlxr(v266 - 1, v265));
    if (!v266)
    {
      ((void (*)(std::__shared_weak_count *))v264->__on_zero_shared)(v264);
      std::__shared_weak_count::__release_weak(v264);
    }
  }
}

void sub_20A658D18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,void **a25)
{
  uint64_t v25;
  uint64_t i;
  uint64_t v28;

  std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__destroy_vector::operator()[abi:ne180100](&a25);
  for (i = 16; i != -16; i -= 16)
    std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100](v25 - 88 + i);
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  if (*(_BYTE *)(v25 - 96))
  {
    v28 = *(_QWORD *)(v25 - 104);
    if (v28)
      MEMORY[0x20BD27AE4](v28, 0x1000C8077774924);
  }
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)&a19);
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)&a23);
  _Unwind_Resume(a1);
}

void mlcore::NotPredicate::_SQLExpression(uint64_t a1@<X0>, uint64_t *a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  __int128 v16;
  __int128 v17;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = (std::__shared_weak_count *)a2[1];
  v14 = *a2;
  v15 = v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t *))(*(_QWORD *)v4 + 64))(&v16, v4, &v14);
  std::allocate_shared[abi:ne180100]<mediaplatform::SQLNotExpression,std::allocator<mediaplatform::SQLNotExpression>,std::shared_ptr<mediaplatform::SQLExpression>,void>(&v17, &v16);
  *a3 = v17;
  v17 = 0uLL;
  v8 = (std::__shared_weak_count *)*((_QWORD *)&v16 + 1);
  if (*((_QWORD *)&v16 + 1))
  {
    v9 = (unint64_t *)(*((_QWORD *)&v16 + 1) + 8);
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  v11 = v15;
  if (v15)
  {
    v12 = (unint64_t *)&v15->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
}

void sub_20A65916C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t mlcore::ItemPropertyAlbumOrderSection(mlcore *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&mlcore::ItemPropertyAlbumOrderSection(void)::once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&mlcore::ItemPropertyAlbumOrderSection(void)::once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyAlbumOrderSection(void)::$_0 &&>>);
  }
  return mlcore::ItemPropertyAlbumOrderSection(void)::property;
}

void mlcore::DatabaseModelProperty<mediaplatform::Data>::_SQLJoinClauses(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v6;
  int v7;
  const mlcore::EntityClass *v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  int v13;
  std::__shared_weak_count *v14;
  uint64_t v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  uint64_t v29;
  std::__shared_weak_count *v30;
  uint64_t v31;
  std::__shared_weak_count *v32;
  __int128 v33;
  uint64_t v34;
  std::__shared_weak_count *v35;
  uint64_t v36;

  v36 = *MEMORY[0x24BDAC8D0];
  if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 88))(a2) != *(_QWORD *)(a1 + 64)
    && (v6 = *(_QWORD *)(a1 + 8)) != 0
    && (v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 64))(v6),
        v7 == (*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 64))(a2)))
  {
    mlcore::SQLShortColumnNameFromEntityPrimaryKey(*(mlcore **)(a1 + 8), v8, &v33);
    std::allocate_shared[abi:ne180100]<mediaplatform::SQLUsingJoinConstraint,std::allocator<mediaplatform::SQLUsingJoinConstraint>,std::shared_ptr<mediaplatform::SQLColumnNameExpression>,void>(&v31, &v33);
    v9 = (std::__shared_weak_count *)*((_QWORD *)&v33 + 1);
    if (*((_QWORD *)&v33 + 1))
    {
      v10 = (unint64_t *)(*((_QWORD *)&v33 + 1) + 8);
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 - 1, v10));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
    v12 = *(_QWORD *)(a1 + 64);
    if (v12 == *(_QWORD *)mediaplatform::Singleton<mlcore::ItemKVSTable>::sharedInstance())
      v13 = 1;
    else
      v13 = 2;
    std::allocate_shared[abi:ne180100]<mediaplatform::SQLJoinClause,std::allocator<mediaplatform::SQLJoinClause>,mediaplatform::SQLJoinClause::JoinOperator &,std::string const&,std::shared_ptr<mediaplatform::SQLUsingJoinConstraint> &,void>(&v29, v13, *(_QWORD *)(a1 + 64) + 8, &v31);
    v15 = v29;
    v14 = v30;
    v34 = v29;
    v35 = v30;
    if (v30)
    {
      p_shared_owners = (unint64_t *)&v30->__shared_owners_;
      do
        v17 = __ldxr(p_shared_owners);
      while (__stxr(v17 + 1, p_shared_owners));
    }
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    *(_QWORD *)&v33 = a3;
    BYTE8(v33) = 0;
    v18 = operator new(0x10uLL);
    *a3 = v18;
    a3[1] = v18;
    v19 = v18 + 2;
    a3[2] = v18 + 2;
    *v18 = v15;
    v18[1] = v14;
    if (v14)
    {
      v20 = (unint64_t *)&v14->__shared_owners_;
      do
        v21 = __ldxr(v20);
      while (__stxr(v21 + 1, v20));
      a3[1] = v19;
      do
        v22 = __ldaxr(v20);
      while (__stlxr(v22 - 1, v20));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
    else
    {
      a3[1] = v19;
    }
    v23 = v30;
    if (v30)
    {
      v24 = (unint64_t *)&v30->__shared_owners_;
      do
        v25 = __ldaxr(v24);
      while (__stlxr(v25 - 1, v24));
      if (!v25)
      {
        ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
        std::__shared_weak_count::__release_weak(v23);
      }
    }
    v26 = v32;
    if (v32)
    {
      v27 = (unint64_t *)&v32->__shared_owners_;
      do
        v28 = __ldaxr(v27);
      while (__stlxr(v28 - 1, v27));
      if (!v28)
      {
        ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
        std::__shared_weak_count::__release_weak(v26);
      }
    }
  }
  else
  {
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
  }
}

void sub_20A65944C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  va_list va1;
  uint64_t v8;
  void **v9;
  va_list va2;
  uint64_t v11;
  va_list va3;

  va_start(va3, a2);
  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v6 = va_arg(va2, _QWORD);
  v8 = va_arg(va2, _QWORD);
  va_copy(va3, va2);
  v9 = va_arg(va3, void **);
  v11 = va_arg(va3, _QWORD);
  std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__destroy_vector::operator()[abi:ne180100]((void ***)va2);
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)va3);
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t mlcore::ItemPropertyComposerOrderSection(mlcore *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&mlcore::ItemPropertyComposerOrderSection(void)::once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&mlcore::ItemPropertyComposerOrderSection(void)::once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyComposerOrderSection(void)::$_0 &&>>);
  }
  return mlcore::ItemPropertyComposerOrderSection(void)::property;
}

uint64_t mlcore::ItemPropertyGenreOrderSection(mlcore *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&mlcore::ItemPropertyGenreOrderSection(void)::once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&mlcore::ItemPropertyGenreOrderSection(void)::once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyGenreOrderSection(void)::$_0 &&>>);
  }
  return mlcore::ItemPropertyGenreOrderSection(void)::property;
}

void mlcore::DatabaseModelProperty<double>::_SQLJoinClauses(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v6;
  int v7;
  const mlcore::EntityClass *v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  int v13;
  std::__shared_weak_count *v14;
  uint64_t v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  uint64_t v29;
  std::__shared_weak_count *v30;
  uint64_t v31;
  std::__shared_weak_count *v32;
  __int128 v33;
  uint64_t v34;
  std::__shared_weak_count *v35;
  uint64_t v36;

  v36 = *MEMORY[0x24BDAC8D0];
  if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 88))(a2) != *(_QWORD *)(a1 + 64)
    && (v6 = *(_QWORD *)(a1 + 8)) != 0
    && (v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 64))(v6),
        v7 == (*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 64))(a2)))
  {
    mlcore::SQLShortColumnNameFromEntityPrimaryKey(*(mlcore **)(a1 + 8), v8, &v33);
    std::allocate_shared[abi:ne180100]<mediaplatform::SQLUsingJoinConstraint,std::allocator<mediaplatform::SQLUsingJoinConstraint>,std::shared_ptr<mediaplatform::SQLColumnNameExpression>,void>(&v31, &v33);
    v9 = (std::__shared_weak_count *)*((_QWORD *)&v33 + 1);
    if (*((_QWORD *)&v33 + 1))
    {
      v10 = (unint64_t *)(*((_QWORD *)&v33 + 1) + 8);
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 - 1, v10));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
    v12 = *(_QWORD *)(a1 + 64);
    if (v12 == *(_QWORD *)mediaplatform::Singleton<mlcore::ItemKVSTable>::sharedInstance())
      v13 = 1;
    else
      v13 = 2;
    std::allocate_shared[abi:ne180100]<mediaplatform::SQLJoinClause,std::allocator<mediaplatform::SQLJoinClause>,mediaplatform::SQLJoinClause::JoinOperator &,std::string const&,std::shared_ptr<mediaplatform::SQLUsingJoinConstraint> &,void>(&v29, v13, *(_QWORD *)(a1 + 64) + 8, &v31);
    v15 = v29;
    v14 = v30;
    v34 = v29;
    v35 = v30;
    if (v30)
    {
      p_shared_owners = (unint64_t *)&v30->__shared_owners_;
      do
        v17 = __ldxr(p_shared_owners);
      while (__stxr(v17 + 1, p_shared_owners));
    }
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    *(_QWORD *)&v33 = a3;
    BYTE8(v33) = 0;
    v18 = operator new(0x10uLL);
    *a3 = v18;
    a3[1] = v18;
    v19 = v18 + 2;
    a3[2] = v18 + 2;
    *v18 = v15;
    v18[1] = v14;
    if (v14)
    {
      v20 = (unint64_t *)&v14->__shared_owners_;
      do
        v21 = __ldxr(v20);
      while (__stxr(v21 + 1, v20));
      a3[1] = v19;
      do
        v22 = __ldaxr(v20);
      while (__stlxr(v22 - 1, v20));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
    else
    {
      a3[1] = v19;
    }
    v23 = v30;
    if (v30)
    {
      v24 = (unint64_t *)&v30->__shared_owners_;
      do
        v25 = __ldaxr(v24);
      while (__stlxr(v25 - 1, v24));
      if (!v25)
      {
        ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
        std::__shared_weak_count::__release_weak(v23);
      }
    }
    v26 = v32;
    if (v32)
    {
      v27 = (unint64_t *)&v32->__shared_owners_;
      do
        v28 = __ldaxr(v27);
      while (__stlxr(v28 - 1, v27));
      if (!v28)
      {
        ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
        std::__shared_weak_count::__release_weak(v26);
      }
    }
  }
  else
  {
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
  }
}

void sub_20A6597B4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  va_list va1;
  uint64_t v8;
  void **v9;
  va_list va2;
  uint64_t v11;
  va_list va3;

  va_start(va3, a2);
  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v6 = va_arg(va2, _QWORD);
  v8 = va_arg(va2, _QWORD);
  va_copy(va3, va2);
  v9 = va_arg(va3, void **);
  v11 = va_arg(va3, _QWORD);
  std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__destroy_vector::operator()[abi:ne180100]((void ***)va2);
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)va3);
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t mlcore::TypedEntityClass<mlcore::ItemArtist>::entityType()
{
  return 2;
}

void mlcore::ForeignProperty<double>::_SQLExpression(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;

  v2 = *(_QWORD *)(a1 + 80);
  v3 = (std::__shared_weak_count *)a2[1];
  v9 = *a2;
  v10 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v2 + 96))(v2, &v9);
  v6 = v10;
  if (v10)
  {
    v7 = (unint64_t *)&v10->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_20A659898(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_QWORD *mlcore::MultiEntityQuery::setMultiSortDescriptors(_QWORD *result, uint64_t *a2)
{
  void **v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void (***v11)(_QWORD);
  void (***v12)(_QWORD);
  void (**v13)(_QWORD);
  BOOL v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t (***v23)(_QWORD);
  uint64_t (***v24)(_QWORD);
  uint64_t (**v25)(_QWORD);

  v2 = (void **)(result + 36);
  if (result + 36 != a2)
  {
    v3 = result;
    v5 = *a2;
    v4 = a2[1];
    v6 = 0x6DB6DB6DB6DB6DB7 * ((v4 - *a2) >> 3);
    v7 = result[38];
    v8 = result[36];
    if (0x6DB6DB6DB6DB6DB7 * ((v7 - v8) >> 3) < v6)
    {
      if (v8)
      {
        v9 = result[37];
        v10 = (void *)result[36];
        if (v9 != v8)
        {
          v11 = (void (***)(_QWORD))(v9 - 56);
          v12 = (void (***)(_QWORD))(v9 - 56);
          do
          {
            v13 = *v12;
            v12 -= 7;
            (*v13)(v11);
            v14 = v11 == (void (***)(_QWORD))v8;
            v11 = v12;
          }
          while (!v14);
          v10 = *v2;
        }
        v3[37] = v8;
        operator delete(v10);
        v7 = 0;
        *v2 = 0;
        v2[1] = 0;
        v2[2] = 0;
      }
      if (v6 > 0x492492492492492)
        goto LABEL_27;
      v15 = 0x6DB6DB6DB6DB6DB7 * (v7 >> 3);
      v16 = 2 * v15;
      if (2 * v15 <= v6)
        v16 = v6;
      v17 = v15 >= 0x249249249249249 ? 0x492492492492492 : v16;
      if (v17 > 0x492492492492492)
LABEL_27:
        std::vector<std::string>::__throw_length_error[abi:ne180100]();
      v18 = 56 * v17;
      v19 = (char *)operator new(56 * v17);
      v3[36] = v19;
      v3[37] = v19;
      v3[38] = &v19[v18];
      result = (_QWORD *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<mlcore::MultiSortDescriptor>,mlcore::MultiSortDescriptor*,mlcore::MultiSortDescriptor*,mlcore::MultiSortDescriptor*>(v5, v4, (uint64_t)v19);
      goto LABEL_20;
    }
    if (0x6DB6DB6DB6DB6DB7 * ((result[37] - v8) >> 3) < v6)
    {
      v20 = v5 + 8 * ((result[37] - v8) >> 3);
      std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<mlcore::MultiSortDescriptor *,mlcore::MultiSortDescriptor *,mlcore::MultiSortDescriptor *>(*a2, v20, v8);
      result = (_QWORD *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<mlcore::MultiSortDescriptor>,mlcore::MultiSortDescriptor*,mlcore::MultiSortDescriptor*,mlcore::MultiSortDescriptor*>(v20, v4, v3[37]);
LABEL_20:
      v3[37] = result;
      return result;
    }
    result = (_QWORD *)std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<mlcore::MultiSortDescriptor *,mlcore::MultiSortDescriptor *,mlcore::MultiSortDescriptor *>(*a2, a2[1], v8);
    v21 = result;
    v22 = (_QWORD *)v3[37];
    if (v22 != result)
    {
      v23 = (uint64_t (***)(_QWORD))(v22 - 7);
      v24 = (uint64_t (***)(_QWORD))(v22 - 7);
      do
      {
        v25 = *v24;
        v24 -= 7;
        result = (_QWORD *)(*v25)(v23);
        v14 = v23 == v21;
        v23 = v24;
      }
      while (!v14);
    }
    v3[37] = v21;
  }
  return result;
}

void sub_20A659AA0(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 296) = v2;
  _Unwind_Resume(a1);
}

void sub_20A659AA8(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 296) = v2;
  _Unwind_Resume(a1);
}

void mlcore::MultiEntityQuery::~MultiEntityQuery(mlcore::MultiEntityQuery *this)
{
  char *v2;
  void **v3;

  *(_QWORD *)this = &off_24C338280;
  v2 = (char *)this + 128;
  v3 = (void **)((char *)this + 288);
  std::vector<mlcore::MultiSortDescriptor>::__destroy_vector::operator()[abi:ne180100](&v3);
  std::__hash_table<std::__hash_value_type<mlcore::LocalizedSearchScope *,std::shared_ptr<mlcore::EntityQueryResult>>,std::__unordered_map_hasher<mlcore::LocalizedSearchScope *,std::__hash_value_type<mlcore::LocalizedSearchScope *,std::shared_ptr<mlcore::EntityQueryResult>>,std::hash<mlcore::LocalizedSearchScope *>,std::equal_to<mlcore::LocalizedSearchScope *>,true>,std::__unordered_map_equal<mlcore::LocalizedSearchScope *,std::__hash_value_type<mlcore::LocalizedSearchScope *,std::shared_ptr<mlcore::EntityQueryResult>>,std::equal_to<mlcore::LocalizedSearchScope *>,std::hash<mlcore::LocalizedSearchScope *>,true>,std::allocator<std::__hash_value_type<mlcore::LocalizedSearchScope *,std::shared_ptr<mlcore::EntityQueryResult>>>>::~__hash_table((uint64_t)this + 248);
  std::__hash_table<std::__hash_value_type<mlcore::EntityClass *,std::vector<mlcore::ModelPropertyBase *>>,std::__unordered_map_hasher<mlcore::EntityClass *,std::__hash_value_type<mlcore::EntityClass *,std::vector<mlcore::ModelPropertyBase *>>,std::hash<mlcore::EntityClass *>,std::equal_to<mlcore::EntityClass *>,true>,std::__unordered_map_equal<mlcore::EntityClass *,std::__hash_value_type<mlcore::EntityClass *,std::vector<mlcore::ModelPropertyBase *>>,std::equal_to<mlcore::EntityClass *>,std::hash<mlcore::EntityClass *>,true>,std::allocator<std::__hash_value_type<mlcore::EntityClass *,std::vector<mlcore::ModelPropertyBase *>>>>::~__hash_table((uint64_t)this + 208);
  std::__hash_table<std::__hash_value_type<mlcore::LocalizedSearchScope *,std::shared_ptr<mlcore::EntityQueryResult>>,std::__unordered_map_hasher<mlcore::LocalizedSearchScope *,std::__hash_value_type<mlcore::LocalizedSearchScope *,std::shared_ptr<mlcore::EntityQueryResult>>,std::hash<mlcore::LocalizedSearchScope *>,std::equal_to<mlcore::LocalizedSearchScope *>,true>,std::__unordered_map_equal<mlcore::LocalizedSearchScope *,std::__hash_value_type<mlcore::LocalizedSearchScope *,std::shared_ptr<mlcore::EntityQueryResult>>,std::equal_to<mlcore::LocalizedSearchScope *>,std::hash<mlcore::LocalizedSearchScope *>,true>,std::allocator<std::__hash_value_type<mlcore::LocalizedSearchScope *,std::shared_ptr<mlcore::EntityQueryResult>>>>::~__hash_table((uint64_t)this + 168);
  std::__hash_table<mlcore::ModelPropertyBase *,std::hash<mlcore::ModelPropertyBase *>,std::equal_to<mlcore::ModelPropertyBase *>,std::allocator<mlcore::ModelPropertyBase *>>::~__hash_table((uint64_t)v2);
  mlcore::EntityQuery::~EntityQuery(this);
}

{
  char *v2;
  void **v3;

  *(_QWORD *)this = &off_24C338280;
  v2 = (char *)this + 128;
  v3 = (void **)((char *)this + 288);
  std::vector<mlcore::MultiSortDescriptor>::__destroy_vector::operator()[abi:ne180100](&v3);
  std::__hash_table<std::__hash_value_type<mlcore::LocalizedSearchScope *,std::shared_ptr<mlcore::EntityQueryResult>>,std::__unordered_map_hasher<mlcore::LocalizedSearchScope *,std::__hash_value_type<mlcore::LocalizedSearchScope *,std::shared_ptr<mlcore::EntityQueryResult>>,std::hash<mlcore::LocalizedSearchScope *>,std::equal_to<mlcore::LocalizedSearchScope *>,true>,std::__unordered_map_equal<mlcore::LocalizedSearchScope *,std::__hash_value_type<mlcore::LocalizedSearchScope *,std::shared_ptr<mlcore::EntityQueryResult>>,std::equal_to<mlcore::LocalizedSearchScope *>,std::hash<mlcore::LocalizedSearchScope *>,true>,std::allocator<std::__hash_value_type<mlcore::LocalizedSearchScope *,std::shared_ptr<mlcore::EntityQueryResult>>>>::~__hash_table((uint64_t)this + 248);
  std::__hash_table<std::__hash_value_type<mlcore::EntityClass *,std::vector<mlcore::ModelPropertyBase *>>,std::__unordered_map_hasher<mlcore::EntityClass *,std::__hash_value_type<mlcore::EntityClass *,std::vector<mlcore::ModelPropertyBase *>>,std::hash<mlcore::EntityClass *>,std::equal_to<mlcore::EntityClass *>,true>,std::__unordered_map_equal<mlcore::EntityClass *,std::__hash_value_type<mlcore::EntityClass *,std::vector<mlcore::ModelPropertyBase *>>,std::equal_to<mlcore::EntityClass *>,std::hash<mlcore::EntityClass *>,true>,std::allocator<std::__hash_value_type<mlcore::EntityClass *,std::vector<mlcore::ModelPropertyBase *>>>>::~__hash_table((uint64_t)this + 208);
  std::__hash_table<std::__hash_value_type<mlcore::LocalizedSearchScope *,std::shared_ptr<mlcore::EntityQueryResult>>,std::__unordered_map_hasher<mlcore::LocalizedSearchScope *,std::__hash_value_type<mlcore::LocalizedSearchScope *,std::shared_ptr<mlcore::EntityQueryResult>>,std::hash<mlcore::LocalizedSearchScope *>,std::equal_to<mlcore::LocalizedSearchScope *>,true>,std::__unordered_map_equal<mlcore::LocalizedSearchScope *,std::__hash_value_type<mlcore::LocalizedSearchScope *,std::shared_ptr<mlcore::EntityQueryResult>>,std::equal_to<mlcore::LocalizedSearchScope *>,std::hash<mlcore::LocalizedSearchScope *>,true>,std::allocator<std::__hash_value_type<mlcore::LocalizedSearchScope *,std::shared_ptr<mlcore::EntityQueryResult>>>>::~__hash_table((uint64_t)this + 168);
  std::__hash_table<mlcore::ModelPropertyBase *,std::hash<mlcore::ModelPropertyBase *>,std::equal_to<mlcore::ModelPropertyBase *>,std::allocator<mlcore::ModelPropertyBase *>>::~__hash_table((uint64_t)v2);
  mlcore::EntityQuery::~EntityQuery(this);
  JUMPOUT(0x20BD27AFCLL);
}

void mlcore::EntityCache::~EntityCache(mlcore::EntityCache *this)
{
  void *v2;
  _QWORD *v3;
  _QWORD *v4;
  void *v5;

  *(_QWORD *)this = &off_24C3366C0;
  std::__list_imp<mediaplatform::Cache<std::string,std::shared_ptr<mediaplatform::DatabaseStatement>,std::hash<std::string>,std::equal_to<std::string>>::Cost,std::allocator<mediaplatform::Cache<std::string,std::shared_ptr<mediaplatform::DatabaseStatement>,std::hash<std::string>,std::equal_to<std::string>>::Cost>>::clear((_QWORD *)this + 24);
  std::__hash_table<std::__hash_value_type<std::pair<mlcore::EntityClass *,long long>,mediaplatform::Cache<std::pair<mlcore::EntityClass *,long long>,std::shared_ptr<mlcore::Entity>,mlcore::EntityCache::hash,std::equal_to<std::pair<mlcore::EntityClass *,long long>>>::Entry>,std::__unordered_map_hasher<std::pair<mlcore::EntityClass *,long long>,std::__hash_value_type<std::pair<mlcore::EntityClass *,long long>,mediaplatform::Cache<std::pair<mlcore::EntityClass *,long long>,std::shared_ptr<mlcore::Entity>,mlcore::EntityCache::hash,std::equal_to<std::pair<mlcore::EntityClass *,long long>>>::Entry>,mlcore::EntityCache::hash,std::equal_to<std::pair<mlcore::EntityClass *,long long>>,true>,std::__unordered_map_equal<std::pair<mlcore::EntityClass *,long long>,std::__hash_value_type<std::pair<mlcore::EntityClass *,long long>,mediaplatform::Cache<std::pair<mlcore::EntityClass *,long long>,std::shared_ptr<mlcore::Entity>,mlcore::EntityCache::hash,std::equal_to<std::pair<mlcore::EntityClass *,long long>>>::Entry>,std::equal_to<std::pair<mlcore::EntityClass *,long long>>,mlcore::EntityCache::hash,true>,std::allocator<std::__hash_value_type<std::pair<mlcore::EntityClass *,long long>,mediaplatform::Cache<std::pair<mlcore::EntityClass *,long long>,std::shared_ptr<mlcore::Entity>,mlcore::EntityCache::hash,std::equal_to<std::pair<mlcore::EntityClass *,long long>>>::Entry>>>::__deallocate_node(*((_QWORD **)this + 21));
  v2 = (void *)*((_QWORD *)this + 19);
  *((_QWORD *)this + 19) = 0;
  if (v2)
    operator delete(v2);
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)this + 104);
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)this + 88);
  v3 = (_QWORD *)*((_QWORD *)this + 8);
  if (v3)
  {
    do
    {
      v4 = (_QWORD *)*v3;
      std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)(v3 + 3));
      operator delete(v3);
      v3 = v4;
    }
    while (v4);
  }
  v5 = (void *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v5)
    operator delete(v5);
  std::__hash_table<std::__hash_value_type<mlcore::EntityClass *,std::vector<mlcore::ModelPropertyBase *>>,std::__unordered_map_hasher<mlcore::EntityClass *,std::__hash_value_type<mlcore::EntityClass *,std::vector<mlcore::ModelPropertyBase *>>,std::hash<mlcore::EntityClass *>,std::equal_to<mlcore::EntityClass *>,true>,std::__unordered_map_equal<mlcore::EntityClass *,std::__hash_value_type<mlcore::EntityClass *,std::vector<mlcore::ModelPropertyBase *>>,std::equal_to<mlcore::EntityClass *>,std::hash<mlcore::EntityClass *>,true>,std::allocator<std::__hash_value_type<mlcore::EntityClass *,std::vector<mlcore::ModelPropertyBase *>>>>::~__hash_table((uint64_t)this + 8);
}

{
  mlcore::EntityCache::~EntityCache(this);
  JUMPOUT(0x20BD27AFCLL);
}

_QWORD *mlcore::EntityCache::setCacheDisabled(_QWORD *this, int a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t i;

  *((_BYTE *)this + 120) = a2;
  if (a2)
  {
    v2 = this;
    if (this[22])
    {
      std::__hash_table<std::__hash_value_type<std::pair<mlcore::EntityClass *,long long>,mediaplatform::Cache<std::pair<mlcore::EntityClass *,long long>,std::shared_ptr<mlcore::Entity>,mlcore::EntityCache::hash,std::equal_to<std::pair<mlcore::EntityClass *,long long>>>::Entry>,std::__unordered_map_hasher<std::pair<mlcore::EntityClass *,long long>,std::__hash_value_type<std::pair<mlcore::EntityClass *,long long>,mediaplatform::Cache<std::pair<mlcore::EntityClass *,long long>,std::shared_ptr<mlcore::Entity>,mlcore::EntityCache::hash,std::equal_to<std::pair<mlcore::EntityClass *,long long>>>::Entry>,mlcore::EntityCache::hash,std::equal_to<std::pair<mlcore::EntityClass *,long long>>,true>,std::__unordered_map_equal<std::pair<mlcore::EntityClass *,long long>,std::__hash_value_type<std::pair<mlcore::EntityClass *,long long>,mediaplatform::Cache<std::pair<mlcore::EntityClass *,long long>,std::shared_ptr<mlcore::Entity>,mlcore::EntityCache::hash,std::equal_to<std::pair<mlcore::EntityClass *,long long>>>::Entry>,std::equal_to<std::pair<mlcore::EntityClass *,long long>>,mlcore::EntityCache::hash,true>,std::allocator<std::__hash_value_type<std::pair<mlcore::EntityClass *,long long>,mediaplatform::Cache<std::pair<mlcore::EntityClass *,long long>,std::shared_ptr<mlcore::Entity>,mlcore::EntityCache::hash,std::equal_to<std::pair<mlcore::EntityClass *,long long>>>::Entry>>>::__deallocate_node((_QWORD *)this[21]);
      v2[21] = 0;
      v3 = v2[20];
      if (v3)
      {
        for (i = 0; i != v3; ++i)
          *(_QWORD *)(v2[19] + 8 * i) = 0;
      }
      v2[22] = 0;
    }
    this = std::__list_imp<mediaplatform::Cache<std::string,std::shared_ptr<mediaplatform::DatabaseStatement>,std::hash<std::string>,std::equal_to<std::string>>::Cost,std::allocator<mediaplatform::Cache<std::string,std::shared_ptr<mediaplatform::DatabaseStatement>,std::hash<std::string>,std::equal_to<std::string>>::Cost>>::clear(v2 + 24);
    v2[18] = 0;
  }
  return this;
}

_QWORD *std::__list_imp<mediaplatform::Cache<std::string,std::shared_ptr<mediaplatform::DatabaseStatement>,std::hash<std::string>,std::equal_to<std::string>>::Cost,std::allocator<mediaplatform::Cache<std::string,std::shared_ptr<mediaplatform::DatabaseStatement>,std::hash<std::string>,std::equal_to<std::string>>::Cost>>::clear(_QWORD *result)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  if (result[2])
  {
    v1 = result;
    result = (_QWORD *)result[1];
    v2 = *v1;
    v3 = *result;
    *(_QWORD *)(v3 + 8) = *(_QWORD *)(*v1 + 8);
    **(_QWORD **)(v2 + 8) = v3;
    v1[2] = 0;
    if (result != v1)
    {
      do
      {
        v4 = (_QWORD *)result[1];
        operator delete(result);
        result = v4;
      }
      while (v4 != v1);
    }
  }
  return result;
}

uint64_t std::__hash_table<std::__hash_value_type<mlcore::EntityClass *,std::vector<mlcore::ModelPropertyBase *>>,std::__unordered_map_hasher<mlcore::EntityClass *,std::__hash_value_type<mlcore::EntityClass *,std::vector<mlcore::ModelPropertyBase *>>,std::hash<mlcore::EntityClass *>,std::equal_to<mlcore::EntityClass *>,true>,std::__unordered_map_equal<mlcore::EntityClass *,std::__hash_value_type<mlcore::EntityClass *,std::vector<mlcore::ModelPropertyBase *>>,std::equal_to<mlcore::EntityClass *>,std::hash<mlcore::EntityClass *>,true>,std::allocator<std::__hash_value_type<mlcore::EntityClass *,std::vector<mlcore::ModelPropertyBase *>>>>::~__hash_table(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  void *v5;

  v2 = *(_QWORD **)(a1 + 16);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      v4 = (void *)v2[3];
      if (v4)
      {
        v2[4] = v4;
        operator delete(v4);
      }
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v5 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v5)
    operator delete(v5);
  return a1;
}

void std::__hash_table<std::__hash_value_type<std::pair<mlcore::EntityClass *,long long>,mediaplatform::Cache<std::pair<mlcore::EntityClass *,long long>,std::shared_ptr<mlcore::Entity>,mlcore::EntityCache::hash,std::equal_to<std::pair<mlcore::EntityClass *,long long>>>::Entry>,std::__unordered_map_hasher<std::pair<mlcore::EntityClass *,long long>,std::__hash_value_type<std::pair<mlcore::EntityClass *,long long>,mediaplatform::Cache<std::pair<mlcore::EntityClass *,long long>,std::shared_ptr<mlcore::Entity>,mlcore::EntityCache::hash,std::equal_to<std::pair<mlcore::EntityClass *,long long>>>::Entry>,mlcore::EntityCache::hash,std::equal_to<std::pair<mlcore::EntityClass *,long long>>,true>,std::__unordered_map_equal<std::pair<mlcore::EntityClass *,long long>,std::__hash_value_type<std::pair<mlcore::EntityClass *,long long>,mediaplatform::Cache<std::pair<mlcore::EntityClass *,long long>,std::shared_ptr<mlcore::Entity>,mlcore::EntityCache::hash,std::equal_to<std::pair<mlcore::EntityClass *,long long>>>::Entry>,std::equal_to<std::pair<mlcore::EntityClass *,long long>>,mlcore::EntityCache::hash,true>,std::allocator<std::__hash_value_type<std::pair<mlcore::EntityClass *,long long>,mediaplatform::Cache<std::pair<mlcore::EntityClass *,long long>,std::shared_ptr<mlcore::Entity>,mlcore::EntityCache::hash,std::equal_to<std::pair<mlcore::EntityClass *,long long>>>::Entry>>>::__deallocate_node(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;

  if (a1)
  {
    v1 = a1;
    do
    {
      v2 = (_QWORD *)*v1;
      std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)(v1 + 4));
      operator delete(v1);
      v1 = v2;
    }
    while (v2);
  }
}

void mlcore::MultiSortDescriptor::setPropertyForEntityClass(mlcore::MultiSortDescriptor *this, mlcore::ModelPropertyBase *a2, unint64_t a3)
{
  unint64_t v3;
  int v7;
  uint64_t *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint8x8_t v13;
  void **v14;
  _QWORD *v15;
  unint64_t v16;
  float v17;
  float v18;
  _BOOL8 v19;
  unint64_t v20;
  unint64_t v21;
  size_t v22;
  uint64_t v23;
  _QWORD *v24;
  unint64_t v25;

  if (*((_QWORD *)this + 4))
  {
    v7 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*((_QWORD *)this + 3) + 24) + 80))(*(_QWORD *)(*((_QWORD *)this + 3) + 24));
    if (v7 != (*(unsigned int (**)(mlcore::ModelPropertyBase *))(*(_QWORD *)a2 + 80))(a2))
      __assert_rtn("setPropertyForEntityClass", "SortDescriptor.cpp", 83, "_propertyForEntityClass.begin()->second->propertyType() == property->propertyType()");
  }
  v8 = (uint64_t *)((char *)this + 8);
  v9 = 0x9DDFEA08EB382D69 * (((8 * a3) + 8) ^ HIDWORD(a3));
  v10 = 0x9DDFEA08EB382D69 * (HIDWORD(a3) ^ (v9 >> 47) ^ v9);
  v11 = 0x9DDFEA08EB382D69 * (v10 ^ (v10 >> 47));
  v12 = *((_QWORD *)this + 2);
  if (v12)
  {
    v13 = (uint8x8_t)vcnt_s8((int8x8_t)v12);
    v13.i16[0] = vaddlv_u8(v13);
    if (v13.u32[0] > 1uLL)
    {
      v3 = 0x9DDFEA08EB382D69 * (v10 ^ (v10 >> 47));
      if (v11 >= v12)
        v3 = v11 % v12;
    }
    else
    {
      v3 = v11 & (v12 - 1);
    }
    v14 = *(void ***)(*v8 + 8 * v3);
    if (v14)
    {
      v15 = *v14;
      if (*v14)
      {
        do
        {
          v16 = v15[1];
          if (v16 == v11)
          {
            if (v15[2] == a3)
              goto LABEL_42;
          }
          else
          {
            if (v13.u32[0] > 1uLL)
            {
              if (v16 >= v12)
                v16 %= v12;
            }
            else
            {
              v16 &= v12 - 1;
            }
            if (v16 != v3)
              break;
          }
          v15 = (_QWORD *)*v15;
        }
        while (v15);
      }
    }
  }
  v15 = operator new(0x20uLL);
  *v15 = 0;
  v15[1] = v11;
  v15[2] = a3;
  v15[3] = 0;
  v17 = (float)(unint64_t)(*((_QWORD *)this + 4) + 1);
  v18 = *((float *)this + 10);
  if (!v12 || (float)(v18 * (float)v12) < v17)
  {
    v19 = 1;
    if (v12 >= 3)
      v19 = (v12 & (v12 - 1)) != 0;
    v20 = v19 | (2 * v12);
    v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21)
      v22 = v21;
    else
      v22 = v20;
    std::__hash_table<std::__hash_value_type<mlcore::ModelProperty<std::string> *,std::string>,std::__unordered_map_hasher<mlcore::ModelProperty<std::string> *,std::__hash_value_type<mlcore::ModelProperty<std::string> *,std::string>,std::hash<mlcore::ModelProperty<std::string> *>,std::equal_to<mlcore::ModelProperty<std::string> *>,true>,std::__unordered_map_equal<mlcore::ModelProperty<std::string> *,std::__hash_value_type<mlcore::ModelProperty<std::string> *,std::string>,std::equal_to<mlcore::ModelProperty<std::string> *>,std::hash<mlcore::ModelProperty<std::string> *>,true>,std::allocator<std::__hash_value_type<mlcore::ModelProperty<std::string> *,std::string>>>::__rehash<true>((uint64_t)this + 8, v22);
    v12 = *((_QWORD *)this + 2);
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v11 >= v12)
        v3 = v11 % v12;
      else
        v3 = v11;
    }
    else
    {
      v3 = (v12 - 1) & v11;
    }
  }
  v23 = *v8;
  v24 = *(_QWORD **)(*v8 + 8 * v3);
  if (v24)
  {
    *v15 = *v24;
LABEL_40:
    *v24 = v15;
    goto LABEL_41;
  }
  *v15 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = v15;
  *(_QWORD *)(v23 + 8 * v3) = (char *)this + 24;
  if (*v15)
  {
    v25 = *(_QWORD *)(*v15 + 8);
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v25 >= v12)
        v25 %= v12;
    }
    else
    {
      v25 &= v12 - 1;
    }
    v24 = (_QWORD *)(*v8 + 8 * v25);
    goto LABEL_40;
  }
LABEL_41:
  ++*((_QWORD *)this + 4);
LABEL_42:
  v15[3] = a2;
}

void sub_20A659FB4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void mlcore::MultiSortDescriptor::~MultiSortDescriptor(mlcore::MultiSortDescriptor *this)
{
  *(_QWORD *)this = &off_24C339DC0;
  std::__hash_table<mlcore::ModelPropertyBase *,std::hash<mlcore::ModelPropertyBase *>,std::equal_to<mlcore::ModelPropertyBase *>,std::allocator<mlcore::ModelPropertyBase *>>::~__hash_table((uint64_t)this + 8);
}

{
  *(_QWORD *)this = &off_24C339DC0;
  std::__hash_table<mlcore::ModelPropertyBase *,std::hash<mlcore::ModelPropertyBase *>,std::equal_to<mlcore::ModelPropertyBase *>,std::allocator<mlcore::ModelPropertyBase *>>::~__hash_table((uint64_t)this + 8);
  JUMPOUT(0x20BD27AFCLL);
}

uint64_t *std::__introsort<std::_ClassicAlgPolicy,mlcore::MultiEntityQuery::_perform(std::shared_ptr<mlcore::Transaction>,std::function<void ()(std::shared_ptr<mlcore::QueryResult>)>)::$_1 &,std::pair<mlcore::EntityClass *,mlcore::PropertyCache> *,false>(uint64_t *result, uint64_t *a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t *v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  char v22;
  uint64_t *v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  int v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  uint64_t *v32;
  uint64_t v33;
  int v34;
  uint64_t *v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  char v53;
  uint64_t *v54;
  uint64_t v55;
  _QWORD *v56;
  int64_t v57;
  int64_t v58;
  uint64_t v59;
  uint64_t *v60;
  uint64_t v61;
  unsigned int v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t *v66;
  _QWORD *v67;
  uint64_t *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unsigned int v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t *v75;
  uint64_t *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t *v79;
  uint64_t v80;
  uint64_t v81;
  unsigned int v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t *v87;
  uint64_t v88;
  BOOL v89;
  uint64_t *v90;
  uint64_t *i;
  uint64_t *v92;
  uint64_t v93;
  uint64_t *v94;
  uint64_t *v95;
  uint64_t v96;
  char v97;
  uint64_t *v98;
  int64_t v99;
  int64_t v100;
  uint64_t *v102;
  uint64_t *v103;
  uint64_t v104;
  _QWORD v105[27];
  uint64_t v106;
  _QWORD v107[26];
  void *v108;

  v8 = result;
LABEL_2:
  v102 = a2 - 28;
  v98 = a2 - 27;
  v9 = v8;
  while (2)
  {
    v10 = v9;
    v11 = (char *)a2 - (char *)v9;
    v12 = 0x6DB6DB6DB6DB6DB7 * (((char *)a2 - (char *)v9) >> 5);
    switch(v12)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        v42 = *(_QWORD *)(*(_QWORD *)a3 + 24);
        if (!v42)
          goto LABEL_146;
        result = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v42 + 48))(v42, v98, v9 + 1);
        if ((_DWORD)result)
          return std::pair<mlcore::EntityClass *,mlcore::PropertyCache>::swap[abi:ne180100](v9, v102);
        return result;
      case 3uLL:
        return std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,mlcore::MultiEntityQuery::_perform(std::shared_ptr<mlcore::Transaction>,std::function<void ()(std::shared_ptr<mlcore::QueryResult>)>)::$_1 &,std::pair<mlcore::EntityClass *,mlcore::PropertyCache> *>(v9, v9 + 28, v102, a3);
      case 4uLL:
        return std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,mlcore::MultiEntityQuery::_perform(std::shared_ptr<mlcore::Transaction>,std::function<void ()(std::shared_ptr<mlcore::QueryResult>)>)::$_1 &,std::pair<mlcore::EntityClass *,mlcore::PropertyCache> *>(v9, v9 + 28, v9 + 56, v102, a3);
      case 5uLL:
        return std::__sort5_maybe_branchless[abi:ne180100]<std::_ClassicAlgPolicy,mlcore::MultiEntityQuery::_perform(std::shared_ptr<mlcore::Transaction>,std::function<void ()(std::shared_ptr<mlcore::QueryResult>)>)::$_1 &,std::pair<mlcore::EntityClass *,mlcore::PropertyCache> *,0>(v9, v9 + 28, v9 + 56, v9 + 84, v102, a3);
      default:
        if (v11 <= 5375)
        {
          if ((a5 & 1) != 0)
          {
            if (v9 == a2)
              return result;
            v43 = v9 + 28;
            if (v9 + 28 == a2)
              return result;
            v44 = 0;
            v45 = v9;
            while (1)
            {
              v46 = v43;
              v47 = *(_QWORD *)(*(_QWORD *)a3 + 24);
              if (!v47)
                break;
              v48 = (uint64_t)(v45 + 29);
              result = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v47 + 48))(v47, v45 + 29, v45 + 1);
              if ((_DWORD)result)
              {
                v106 = *v46;
                mlcore::PropertyCacheBase<long long,int,double,std::string,mediaplatform::Data>::PropertyCacheBase((uint64_t)v107, v48);
                v107[0] = &off_24C3371C0;
                v108 = &unk_24C3371E8;
                v49 = v44;
                while (1)
                {
                  v50 = v49;
                  v51 = (uint64_t *)((char *)v9 + v49);
                  v51[28] = *v51;
                  mlcore::PropertyCache::operator=((uint64_t)(v51 + 29), (uint64_t)(v51 + 1));
                  if (!v50)
                    break;
                  v52 = *(_QWORD *)(*(_QWORD *)a3 + 24);
                  if (!v52)
                    std::__throw_bad_function_call[abi:ne180100]();
                  v53 = (*(uint64_t (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v52 + 48))(v52, v107, (uint64_t)v9 + v50 - 216);
                  v49 = v50 - 224;
                  if ((v53 & 1) == 0)
                  {
                    v54 = (uint64_t *)((char *)v9 + v50);
                    v55 = (uint64_t)v9 + v50 + 8;
                    goto LABEL_81;
                  }
                }
                v55 = (uint64_t)(v9 + 1);
                v54 = v9;
LABEL_81:
                *v54 = v106;
                mlcore::PropertyCache::operator=(v55, (uint64_t)v107);
                result = mlcore::PropertyCacheBase<long long,int,double,std::string,mediaplatform::Data>::~PropertyCacheBase(v107);
              }
              v43 = v46 + 28;
              v44 += 224;
              v45 = v46;
              if (v46 + 28 == a2)
                return result;
            }
          }
          else
          {
            if (v9 == a2)
              return result;
            v90 = v9 + 28;
            if (v9 + 28 == a2)
              return result;
            for (i = v9 - 27; ; i += 28)
            {
              v92 = v90;
              v93 = *(_QWORD *)(*(_QWORD *)a3 + 24);
              if (!v93)
                break;
              result = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v93 + 48))(v93, v10 + 29, v10 + 1);
              if ((_DWORD)result)
              {
                v106 = *v92;
                mlcore::PropertyCacheBase<long long,int,double,std::string,mediaplatform::Data>::PropertyCacheBase((uint64_t)v107, (uint64_t)(v10 + 29));
                v107[0] = &off_24C3371C0;
                v108 = &unk_24C3371E8;
                v94 = i;
                do
                {
                  v95 = v94;
                  v94[55] = v94[27];
                  mlcore::PropertyCache::operator=((uint64_t)(v94 + 56), (uint64_t)(v94 + 28));
                  v96 = *(_QWORD *)(*(_QWORD *)a3 + 24);
                  if (!v96)
                    std::__throw_bad_function_call[abi:ne180100]();
                  v97 = (*(uint64_t (**)(uint64_t, _QWORD *, uint64_t *))(*(_QWORD *)v96 + 48))(v96, v107, v95);
                  v94 = v95 - 28;
                }
                while ((v97 & 1) != 0);
                v95[27] = v106;
                mlcore::PropertyCache::operator=((uint64_t)(v95 + 28), (uint64_t)v107);
                result = mlcore::PropertyCacheBase<long long,int,double,std::string,mediaplatform::Data>::~PropertyCacheBase(v107);
              }
              v90 = v92 + 28;
              v10 = v92;
              if (v92 + 28 == a2)
                return result;
            }
          }
LABEL_146:
          std::__throw_bad_function_call[abi:ne180100]();
        }
        if (a4)
        {
          if ((unint64_t)v11 <= 0x7000)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,mlcore::MultiEntityQuery::_perform(std::shared_ptr<mlcore::Transaction>,std::function<void ()(std::shared_ptr<mlcore::QueryResult>)>)::$_1 &,std::pair<mlcore::EntityClass *,mlcore::PropertyCache> *>(&v9[28 * (v12 >> 1)], v9, v102, a3);
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,mlcore::MultiEntityQuery::_perform(std::shared_ptr<mlcore::Transaction>,std::function<void ()(std::shared_ptr<mlcore::QueryResult>)>)::$_1 &,std::pair<mlcore::EntityClass *,mlcore::PropertyCache> *>(v9, &v9[28 * (v12 >> 1)], v102, a3);
            v13 = 28 * (v12 >> 1);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,mlcore::MultiEntityQuery::_perform(std::shared_ptr<mlcore::Transaction>,std::function<void ()(std::shared_ptr<mlcore::QueryResult>)>)::$_1 &,std::pair<mlcore::EntityClass *,mlcore::PropertyCache> *>(v9 + 28, &v9[v13 - 28], a2 - 56, a3);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,mlcore::MultiEntityQuery::_perform(std::shared_ptr<mlcore::Transaction>,std::function<void ()(std::shared_ptr<mlcore::QueryResult>)>)::$_1 &,std::pair<mlcore::EntityClass *,mlcore::PropertyCache> *>(v9 + 56, &v9[v13 + 28], a2 - 84, a3);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,mlcore::MultiEntityQuery::_perform(std::shared_ptr<mlcore::Transaction>,std::function<void ()(std::shared_ptr<mlcore::QueryResult>)>)::$_1 &,std::pair<mlcore::EntityClass *,mlcore::PropertyCache> *>(&v9[v13 - 28], &v9[v13], &v9[v13 + 28], a3);
            std::pair<mlcore::EntityClass *,mlcore::PropertyCache>::swap[abi:ne180100](v9, &v9[v13]);
          }
          --a4;
          if ((a5 & 1) == 0)
          {
            v14 = *(_QWORD *)(*(_QWORD *)a3 + 24);
            if (!v14)
              goto LABEL_146;
            if (((*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v14 + 48))(v14, v9 - 27, v9 + 1) & 1) == 0)
            {
              v106 = *v9;
              mlcore::PropertyCacheBase<long long,int,double,std::string,mediaplatform::Data>::PropertyCacheBase((uint64_t)v107, (uint64_t)(v9 + 1));
              v107[0] = &off_24C3371C0;
              v108 = &unk_24C3371E8;
              v29 = *(_QWORD *)(*(_QWORD *)a3 + 24);
              if (!v29)
                goto LABEL_140;
              if (((*(uint64_t (**)(uint64_t, _QWORD *, uint64_t *))(*(_QWORD *)v29 + 48))(v29, v107, v98) & 1) != 0)
              {
                while (1)
                {
                  v30 = *(_QWORD *)(*(_QWORD *)a3 + 24);
                  if (!v30)
                    break;
                  v31 = (*(uint64_t (**)(uint64_t, _QWORD *, uint64_t *))(*(_QWORD *)v30 + 48))(v30, v107, v9 + 29);
                  v9 += 28;
                  if ((v31 & 1) != 0)
                    goto LABEL_46;
                }
LABEL_140:
                std::__throw_bad_function_call[abi:ne180100]();
              }
              v32 = v9 + 29;
              do
              {
                v9 = v32 - 1;
                if (v32 - 1 >= a2)
                  break;
                v33 = *(_QWORD *)(*(_QWORD *)a3 + 24);
                if (!v33)
                  goto LABEL_140;
                v34 = (*(uint64_t (**)(uint64_t, _QWORD *, uint64_t *))(*(_QWORD *)v33 + 48))(v33, v107, v32);
                v32 += 28;
              }
              while (!v34);
LABEL_46:
              v35 = a2;
              if (v9 < a2)
              {
                v35 = a2;
                do
                {
                  v36 = *(_QWORD *)(*(_QWORD *)a3 + 24);
                  if (!v36)
                    goto LABEL_140;
                  v37 = (*(uint64_t (**)(uint64_t, _QWORD *, uint64_t *))(*(_QWORD *)v36 + 48))(v36, v107, v35 - 27);
                  v35 -= 28;
                }
                while ((v37 & 1) != 0);
              }
LABEL_56:
              if (v9 < v35)
              {
                std::pair<mlcore::EntityClass *,mlcore::PropertyCache>::swap[abi:ne180100](v9, v35);
                do
                {
                  v38 = *(_QWORD *)(*(_QWORD *)a3 + 24);
                  if (!v38)
                    goto LABEL_140;
                  v39 = (*(uint64_t (**)(uint64_t, _QWORD *, uint64_t *))(*(_QWORD *)v38 + 48))(v38, v107, v9 + 29);
                  v9 += 28;
                }
                while (!v39);
                while (1)
                {
                  v40 = *(_QWORD *)(*(_QWORD *)a3 + 24);
                  if (!v40)
                    goto LABEL_140;
                  v41 = (*(uint64_t (**)(uint64_t, _QWORD *, uint64_t *))(*(_QWORD *)v40 + 48))(v40, v107, v35 - 27);
                  v35 -= 28;
                  if ((v41 & 1) == 0)
                    goto LABEL_56;
                }
              }
              if (v9 - 28 != v10)
              {
                *v10 = *(v9 - 28);
                mlcore::PropertyCache::operator=((uint64_t)(v10 + 1), (uint64_t)(v9 - 27));
              }
              *(v9 - 28) = v106;
              mlcore::PropertyCache::operator=((uint64_t)(v9 - 27), (uint64_t)v107);
              result = mlcore::PropertyCacheBase<long long,int,double,std::string,mediaplatform::Data>::~PropertyCacheBase(v107);
              a5 = 0;
              continue;
            }
          }
          v15 = (uint64_t)(v9 + 1);
          v106 = *v9;
          mlcore::PropertyCacheBase<long long,int,double,std::string,mediaplatform::Data>::PropertyCacheBase((uint64_t)v107, (uint64_t)(v9 + 1));
          v107[0] = &off_24C3371C0;
          v108 = &unk_24C3371E8;
          v8 = v9;
          do
          {
            v16 = *(_QWORD *)(*(_QWORD *)a3 + 24);
            if (!v16)
              goto LABEL_139;
            v17 = (*(uint64_t (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v16 + 48))(v16, v10 + 29, v107);
            v10 += 28;
          }
          while ((v17 & 1) != 0);
          v18 = a2;
          if (v10 - 28 != v9)
          {
            while (1)
            {
              v19 = *(_QWORD *)(*(_QWORD *)a3 + 24);
              if (!v19)
                break;
              v20 = (*(uint64_t (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v19 + 48))(v19, v18 - 27, v107);
              v18 -= 28;
              if (v20)
                goto LABEL_23;
            }
LABEL_139:
            std::__throw_bad_function_call[abi:ne180100]();
          }
          v18 = a2;
          do
          {
            if (v10 >= v18)
              break;
            v21 = *(_QWORD *)(*(_QWORD *)a3 + 24);
            if (!v21)
              goto LABEL_139;
            v22 = (*(uint64_t (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v21 + 48))(v21, v18 - 27, v107);
            v18 -= 28;
          }
          while ((v22 & 1) == 0);
LABEL_23:
          v9 = v10;
          if (v10 < v18)
          {
            v23 = v18;
            do
            {
              std::pair<mlcore::EntityClass *,mlcore::PropertyCache>::swap[abi:ne180100](v9, v23);
              do
              {
                v24 = *(_QWORD *)(*(_QWORD *)a3 + 24);
                if (!v24)
LABEL_138:
                  std::__throw_bad_function_call[abi:ne180100]();
                v25 = (*(uint64_t (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v24 + 48))(v24, v9 + 29, v107);
                v9 += 28;
              }
              while ((v25 & 1) != 0);
              do
              {
                v26 = *(_QWORD *)(*(_QWORD *)a3 + 24);
                if (!v26)
                  goto LABEL_138;
                v27 = (*(uint64_t (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v26 + 48))(v26, v23 - 27, v107);
                v23 -= 28;
              }
              while (!v27);
            }
            while (v9 < v23);
          }
          if (v9 - 28 != v8)
          {
            *v8 = *(v9 - 28);
            mlcore::PropertyCache::operator=(v15, (uint64_t)(v9 - 27));
          }
          *(v9 - 28) = v106;
          mlcore::PropertyCache::operator=((uint64_t)(v9 - 27), (uint64_t)v107);
          mlcore::PropertyCacheBase<long long,int,double,std::string,mediaplatform::Data>::~PropertyCacheBase(v107);
          if (v10 < v18)
          {
LABEL_36:
            result = (uint64_t *)std::__introsort<std::_ClassicAlgPolicy,mlcore::MultiEntityQuery::_perform(std::shared_ptr<mlcore::Transaction>,std::function<void ()(std::shared_ptr<mlcore::QueryResult>)>)::$_1 &,std::pair<mlcore::EntityClass *,mlcore::PropertyCache> *,false>(v8, v9 - 28, a3, a4, a5 & 1);
            a5 = 0;
            continue;
          }
          v28 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,mlcore::MultiEntityQuery::_perform(std::shared_ptr<mlcore::Transaction>,std::function<void ()(std::shared_ptr<mlcore::QueryResult>)>)::$_1 &,std::pair<mlcore::EntityClass *,mlcore::PropertyCache> *>(v8, v9 - 28, a3);
          result = (uint64_t *)std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,mlcore::MultiEntityQuery::_perform(std::shared_ptr<mlcore::Transaction>,std::function<void ()(std::shared_ptr<mlcore::QueryResult>)>)::$_1 &,std::pair<mlcore::EntityClass *,mlcore::PropertyCache> *>(v9, a2, a3);
          if (!(_DWORD)result)
          {
            if ((v28 & 1) == 0)
              goto LABEL_36;
            continue;
          }
          a2 = v9 - 28;
          if ((v28 & 1) != 0)
            return result;
          goto LABEL_2;
        }
        if (v9 != a2)
        {
          v103 = v9;
          v56 = v107;
          v100 = (v12 - 2) >> 1;
          v57 = v100;
          do
          {
            v58 = v57;
            if (v100 >= v57)
            {
              v59 = (2 * v57) | 1;
              v60 = &v103[28 * v59];
              if (2 * v57 + 2 < (uint64_t)v12)
              {
                v61 = *(_QWORD *)(*(_QWORD *)a3 + 24);
                if (!v61)
                  goto LABEL_146;
                v62 = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v61 + 48))(v61, &v103[28 * v59 + 1], v60 + 29);
                v60 += 28 * v62;
                if (v62)
                  v59 = 2 * v58 + 2;
              }
              v63 = *(_QWORD *)(*(_QWORD *)a3 + 24);
              if (!v63)
                goto LABEL_146;
              v64 = (uint64_t)&v103[28 * v58 + 1];
              if (((*(uint64_t (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)v63 + 48))(v63, v60 + 1, v64) & 1) == 0)
              {
                v65 = (uint64_t)v56;
                v99 = v58;
                v66 = &v103[28 * v58];
                v106 = *v66;
                v67 = (_QWORD *)v65;
                mlcore::PropertyCacheBase<long long,int,double,std::string,mediaplatform::Data>::PropertyCacheBase(v65, v64);
                v107[0] = &off_24C3371C0;
                v108 = &unk_24C3371E8;
                do
                {
                  v68 = v60;
                  v69 = (uint64_t)(v60 + 1);
                  *v66 = *v60;
                  mlcore::PropertyCache::operator=((uint64_t)(v66 + 1), (uint64_t)(v60 + 1));
                  if (v100 < v59)
                    break;
                  v70 = (2 * v59) | 1;
                  v60 = &v103[28 * v70];
                  v59 = 2 * v59 + 2;
                  if (v59 >= (uint64_t)v12)
                  {
                    v59 = v70;
                  }
                  else
                  {
                    v71 = *(_QWORD *)(*(_QWORD *)a3 + 24);
                    if (!v71)
                      goto LABEL_142;
                    v72 = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v71 + 48))(v71, &v103[28 * v70 + 1], v60 + 29);
                    v60 += 28 * v72;
                    if (!v72)
                      v59 = v70;
                  }
                  v73 = *(_QWORD *)(*(_QWORD *)a3 + 24);
                  if (!v73)
LABEL_142:
                    std::__throw_bad_function_call[abi:ne180100]();
                  v66 = v68;
                }
                while (!(*(unsigned int (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v73 + 48))(v73, v60 + 1, v67));
                *v68 = v106;
                v56 = v67;
                mlcore::PropertyCache::operator=(v69, (uint64_t)v67);
                mlcore::PropertyCacheBase<long long,int,double,std::string,mediaplatform::Data>::~PropertyCacheBase(v67);
                v58 = v99;
              }
            }
            v57 = v58 - 1;
          }
          while (v58);
          v74 = (((unint64_t)v11 >> 5) * (unsigned __int128)0x2492492492492493uLL) >> 64;
          v75 = v103;
          do
          {
            v76 = a2;
            v104 = *v75;
            mlcore::PropertyCacheBase<long long,int,double,std::string,mediaplatform::Data>::PropertyCacheBase((uint64_t)v105, (uint64_t)(v103 + 1));
            v77 = 0;
            v105[0] = &off_24C3371C0;
            v105[26] = &unk_24C3371E8;
            do
            {
              v78 = v77 + 1;
              v79 = &v75[28 * v77 + 28];
              v80 = (2 * v77) | 1;
              v77 = 2 * v77 + 2;
              if (v77 >= v74)
              {
                v77 = v80;
              }
              else
              {
                v81 = *(_QWORD *)(*(_QWORD *)a3 + 24);
                if (!v81)
                  goto LABEL_141;
                v82 = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v81 + 48))(v81, &v75[28 * v78 + 1], v79 + 29);
                v79 += 28 * v82;
                if (!v82)
                  v77 = v80;
              }
              *v75 = *v79;
              mlcore::PropertyCache::operator=((uint64_t)(v75 + 1), (uint64_t)(v79 + 1));
              v75 = v79;
            }
            while (v77 <= (uint64_t)((unint64_t)(v74 - 2) >> 1));
            a2 -= 28;
            if (v79 == v76 - 28)
            {
              *v79 = v104;
              mlcore::PropertyCache::operator=((uint64_t)(v79 + 1), (uint64_t)v105);
            }
            else
            {
              *v79 = *(v76 - 28);
              v83 = (uint64_t)(v76 - 27);
              mlcore::PropertyCache::operator=((uint64_t)(v79 + 1), v83);
              *a2 = v104;
              mlcore::PropertyCache::operator=(v83, (uint64_t)v105);
              v84 = (char *)v79 - (char *)v103 + 224;
              if (v84 >= 225)
              {
                v85 = *(_QWORD *)(*(_QWORD *)a3 + 24);
                if (!v85)
LABEL_141:
                  std::__throw_bad_function_call[abi:ne180100]();
                v86 = (unint64_t)(((((unint64_t)v84 >> 5) * (unsigned __int128)0x2492492492492493uLL) >> 64)
                                       - 2) >> 1;
                if ((*(unsigned int (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v85 + 48))(v85, &v103[28 * v86 + 1], v79 + 1))
                {
                  v106 = *v79;
                  mlcore::PropertyCacheBase<long long,int,double,std::string,mediaplatform::Data>::PropertyCacheBase((uint64_t)v107, (uint64_t)(v79 + 1));
                  v107[0] = &off_24C3371C0;
                  v108 = &unk_24C3371E8;
                  do
                  {
                    v87 = v79;
                    v79 = &v103[28 * v86];
                    *v87 = *v79;
                    mlcore::PropertyCache::operator=((uint64_t)(v87 + 1), (uint64_t)(v79 + 1));
                    if (!v86)
                      break;
                    v88 = *(_QWORD *)(*(_QWORD *)a3 + 24);
                    if (!v88)
                      std::__throw_bad_function_call[abi:ne180100]();
                    v86 = (v86 - 1) >> 1;
                  }
                  while (((*(uint64_t (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v88 + 48))(v88, &v103[28 * v86 + 1], v107) & 1) != 0);
                  *v79 = v106;
                  mlcore::PropertyCache::operator=((uint64_t)(v79 + 1), (uint64_t)v107);
                  mlcore::PropertyCacheBase<long long,int,double,std::string,mediaplatform::Data>::~PropertyCacheBase(v107);
                }
              }
            }
            result = mlcore::PropertyCacheBase<long long,int,double,std::string,mediaplatform::Data>::~PropertyCacheBase(v105);
            v89 = v74-- <= 2;
            v75 = v103;
          }
          while (!v89);
        }
        return result;
    }
  }
}

void sub_20A65AC40(_Unwind_Exception *a1)
{
  _QWORD *v1;

  mlcore::PropertyCacheBase<long long,int,double,std::string,mediaplatform::Data>::~PropertyCacheBase(v1);
  _Unwind_Resume(a1);
}

BOOL mlcore::PropertyCache::hasValueForProperty(_QWORD *a1, unint64_t a2)
{
  _QWORD *v4;
  _BOOL8 result;

  switch((*(unsigned int (**)(unint64_t))(*(_QWORD *)a2 + 80))(a2))
  {
    case 0u:
      v4 = std::__hash_table<std::__hash_value_type<mlcore::ModelProperty<double> *,double>,std::__unordered_map_hasher<mlcore::ModelProperty<double> *,std::__hash_value_type<mlcore::ModelProperty<double> *,double>,std::hash<mlcore::ModelProperty<double> *>,std::equal_to<mlcore::ModelProperty<double> *>,true>,std::__unordered_map_equal<mlcore::ModelProperty<double> *,std::__hash_value_type<mlcore::ModelProperty<double> *,double>,std::equal_to<mlcore::ModelProperty<double> *>,std::hash<mlcore::ModelProperty<double> *>,true>,std::allocator<std::__hash_value_type<mlcore::ModelProperty<double> *,double>>>::find<mlcore::ModelProperty<double> *>(a1 + 16, a2);
      goto LABEL_8;
    case 1u:
      v4 = std::__hash_table<std::__hash_value_type<mlcore::ModelProperty<double> *,double>,std::__unordered_map_hasher<mlcore::ModelProperty<double> *,std::__hash_value_type<mlcore::ModelProperty<double> *,double>,std::hash<mlcore::ModelProperty<double> *>,std::equal_to<mlcore::ModelProperty<double> *>,true>,std::__unordered_map_equal<mlcore::ModelProperty<double> *,std::__hash_value_type<mlcore::ModelProperty<double> *,double>,std::equal_to<mlcore::ModelProperty<double> *>,std::hash<mlcore::ModelProperty<double> *>,true>,std::allocator<std::__hash_value_type<mlcore::ModelProperty<double> *,double>>>::find<mlcore::ModelProperty<double> *>(a1 + 21, a2);
      goto LABEL_8;
    case 2u:
      v4 = std::__hash_table<std::__hash_value_type<mlcore::ModelProperty<double> *,double>,std::__unordered_map_hasher<mlcore::ModelProperty<double> *,std::__hash_value_type<mlcore::ModelProperty<double> *,double>,std::hash<mlcore::ModelProperty<double> *>,std::equal_to<mlcore::ModelProperty<double> *>,true>,std::__unordered_map_equal<mlcore::ModelProperty<double> *,std::__hash_value_type<mlcore::ModelProperty<double> *,double>,std::equal_to<mlcore::ModelProperty<double> *>,std::hash<mlcore::ModelProperty<double> *>,true>,std::allocator<std::__hash_value_type<mlcore::ModelProperty<double> *,double>>>::find<mlcore::ModelProperty<double> *>(a1 + 11, a2);
      goto LABEL_8;
    case 3u:
      v4 = std::__hash_table<std::__hash_value_type<mlcore::ModelProperty<double> *,double>,std::__unordered_map_hasher<mlcore::ModelProperty<double> *,std::__hash_value_type<mlcore::ModelProperty<double> *,double>,std::hash<mlcore::ModelProperty<double> *>,std::equal_to<mlcore::ModelProperty<double> *>,true>,std::__unordered_map_equal<mlcore::ModelProperty<double> *,std::__hash_value_type<mlcore::ModelProperty<double> *,double>,std::equal_to<mlcore::ModelProperty<double> *>,std::hash<mlcore::ModelProperty<double> *>,true>,std::allocator<std::__hash_value_type<mlcore::ModelProperty<double> *,double>>>::find<mlcore::ModelProperty<double> *>(a1 + 6, a2);
      goto LABEL_8;
    case 4u:
      v4 = std::__hash_table<std::__hash_value_type<mlcore::ModelProperty<double> *,double>,std::__unordered_map_hasher<mlcore::ModelProperty<double> *,std::__hash_value_type<mlcore::ModelProperty<double> *,double>,std::hash<mlcore::ModelProperty<double> *>,std::equal_to<mlcore::ModelProperty<double> *>,true>,std::__unordered_map_equal<mlcore::ModelProperty<double> *,std::__hash_value_type<mlcore::ModelProperty<double> *,double>,std::equal_to<mlcore::ModelProperty<double> *>,std::hash<mlcore::ModelProperty<double> *>,true>,std::allocator<std::__hash_value_type<mlcore::ModelProperty<double> *,double>>>::find<mlcore::ModelProperty<double> *>(a1 + 1, a2);
LABEL_8:
      result = v4 != 0;
      break;
    default:
      result = 0;
      break;
  }
  return result;
}

uint64_t std::unordered_map<mlcore::EntityClass *,mlcore::ModelPropertyBase *>::unordered_map(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  _QWORD *v5;
  _QWORD *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  _QWORD *v13;
  _QWORD *i;
  unint64_t v15;
  _QWORD *v16;
  float v17;
  float v18;
  _BOOL8 v19;
  unint64_t v20;
  unint64_t v21;
  size_t v22;
  uint64_t v23;
  _QWORD *v24;
  unint64_t v25;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  std::__hash_table<std::__hash_value_type<mlcore::ModelProperty<std::string> *,std::string>,std::__unordered_map_hasher<mlcore::ModelProperty<std::string> *,std::__hash_value_type<mlcore::ModelProperty<std::string> *,std::string>,std::hash<mlcore::ModelProperty<std::string> *>,std::equal_to<mlcore::ModelProperty<std::string> *>,true>,std::__unordered_map_equal<mlcore::ModelProperty<std::string> *,std::__hash_value_type<mlcore::ModelProperty<std::string> *,std::string>,std::equal_to<mlcore::ModelProperty<std::string> *>,std::hash<mlcore::ModelProperty<std::string> *>,true>,std::allocator<std::__hash_value_type<mlcore::ModelProperty<std::string> *,std::string>>>::__rehash<true>(a1, *(_QWORD *)(a2 + 8));
  v5 = *(_QWORD **)(a2 + 16);
  if (v5)
  {
    v6 = (_QWORD *)(a1 + 16);
    v7 = *(_QWORD *)(a1 + 8);
    do
    {
      v8 = v5[2];
      v9 = 0x9DDFEA08EB382D69 * (((8 * v8) + 8) ^ HIDWORD(v8));
      v10 = 0x9DDFEA08EB382D69 * (HIDWORD(v8) ^ (v9 >> 47) ^ v9);
      v11 = 0x9DDFEA08EB382D69 * (v10 ^ (v10 >> 47));
      if (v7)
      {
        v12 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
        v12.i16[0] = vaddlv_u8(v12);
        if (v12.u32[0] > 1uLL)
        {
          v2 = 0x9DDFEA08EB382D69 * (v10 ^ (v10 >> 47));
          if (v11 >= v7)
            v2 = v11 % v7;
        }
        else
        {
          v2 = v11 & (v7 - 1);
        }
        v13 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v2);
        if (v13)
        {
          for (i = (_QWORD *)*v13; i; i = (_QWORD *)*i)
          {
            v15 = i[1];
            if (v15 == v11)
            {
              if (i[2] == v8)
                goto LABEL_41;
            }
            else
            {
              if (v12.u32[0] > 1uLL)
              {
                if (v15 >= v7)
                  v15 %= v7;
              }
              else
              {
                v15 &= v7 - 1;
              }
              if (v15 != v2)
                break;
            }
          }
        }
      }
      v16 = operator new(0x20uLL);
      *v16 = 0;
      v16[1] = v11;
      *((_OWORD *)v16 + 1) = *((_OWORD *)v5 + 1);
      v17 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
      v18 = *(float *)(a1 + 32);
      if (!v7 || (float)(v18 * (float)v7) < v17)
      {
        v19 = (v7 & (v7 - 1)) != 0;
        if (v7 < 3)
          v19 = 1;
        v20 = v19 | (2 * v7);
        v21 = vcvtps_u32_f32(v17 / v18);
        if (v20 <= v21)
          v22 = v21;
        else
          v22 = v20;
        std::__hash_table<std::__hash_value_type<mlcore::ModelProperty<std::string> *,std::string>,std::__unordered_map_hasher<mlcore::ModelProperty<std::string> *,std::__hash_value_type<mlcore::ModelProperty<std::string> *,std::string>,std::hash<mlcore::ModelProperty<std::string> *>,std::equal_to<mlcore::ModelProperty<std::string> *>,true>,std::__unordered_map_equal<mlcore::ModelProperty<std::string> *,std::__hash_value_type<mlcore::ModelProperty<std::string> *,std::string>,std::equal_to<mlcore::ModelProperty<std::string> *>,std::hash<mlcore::ModelProperty<std::string> *>,true>,std::allocator<std::__hash_value_type<mlcore::ModelProperty<std::string> *,std::string>>>::__rehash<true>(a1, v22);
        v7 = *(_QWORD *)(a1 + 8);
        if ((v7 & (v7 - 1)) != 0)
        {
          if (v11 >= v7)
            v2 = v11 % v7;
          else
            v2 = v11;
        }
        else
        {
          v2 = (v7 - 1) & v11;
        }
      }
      v23 = *(_QWORD *)a1;
      v24 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v2);
      if (v24)
      {
        *v16 = *v24;
      }
      else
      {
        *v16 = *v6;
        *v6 = v16;
        *(_QWORD *)(v23 + 8 * v2) = v6;
        if (!*v16)
          goto LABEL_40;
        v25 = *(_QWORD *)(*v16 + 8);
        if ((v7 & (v7 - 1)) != 0)
        {
          if (v25 >= v7)
            v25 %= v7;
        }
        else
        {
          v25 &= v7 - 1;
        }
        v24 = (_QWORD *)(*(_QWORD *)a1 + 8 * v25);
      }
      *v24 = v16;
LABEL_40:
      ++*(_QWORD *)(a1 + 24);
LABEL_41:
      v5 = (_QWORD *)*v5;
    }
    while (v5);
  }
  return a1;
}

void sub_20A65B010(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<mlcore::ModelPropertyBase *,std::hash<mlcore::ModelPropertyBase *>,std::equal_to<mlcore::ModelPropertyBase *>,std::allocator<mlcore::ModelPropertyBase *>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

uint64_t mlcore::ModelPropertyBase::compareCongruentPropertyValuesFromCaches(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v8;

  v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 80))(a1);
  if (v8 != (*(unsigned int (**)(uint64_t))(*(_QWORD *)a3 + 80))(a3))
    __assert_rtn("compareCongruentPropertyValuesFromCaches", "ModelProperty.cpp", 41, "this->propertyType() == otherProperty->propertyType()");
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 80))(a1) > 4)
    return 0;
  else
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 112))(a1, a2, a3, a4);
}

uint64_t mlcore::ModelProperty<long long>::compareCongruentPropertyValuesFromCaches(unint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;

  v6 = mlcore::PropertyCacheBase<long long,int,double,std::string,mediaplatform::Data>::valueForProperty(a2, a1);
  v7 = mlcore::PropertyCacheBase<long long,int,double,std::string,mediaplatform::Data>::valueForProperty(a4, a3);
  if (v6 < v7)
    return 0xFFFFFFFFLL;
  else
    return v7 < v6;
}

uint64_t mlcore::PropertyCacheBase<long long,int,double,std::string,mediaplatform::Data>::valueForProperty(uint64_t a1, unint64_t a2)
{
  _QWORD *v3;
  std::logic_error *exception;
  std::string v6;

  v3 = std::__hash_table<std::__hash_value_type<mlcore::ModelProperty<double> *,double>,std::__unordered_map_hasher<mlcore::ModelProperty<double> *,std::__hash_value_type<mlcore::ModelProperty<double> *,double>,std::hash<mlcore::ModelProperty<double> *>,std::equal_to<mlcore::ModelProperty<double> *>,true>,std::__unordered_map_equal<mlcore::ModelProperty<double> *,std::__hash_value_type<mlcore::ModelProperty<double> *,double>,std::equal_to<mlcore::ModelProperty<double> *>,std::hash<mlcore::ModelProperty<double> *>,true>,std::allocator<std::__hash_value_type<mlcore::ModelProperty<double> *,double>>>::find<mlcore::ModelProperty<double> *>((_QWORD *)(a1 + 168), a2);
  if (!v3)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    (*(void (**)(std::string *__return_ptr, unint64_t))(*(_QWORD *)a2 + 40))(&v6, a2);
    std::logic_error::logic_error(exception, &v6);
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8C0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24C32FBC0, MEMORY[0x24BEDAB00]);
  }
  return v3[3];
}

void sub_20A65B1F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  int v16;

  if (a15 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  goto LABEL_6;
}

uint64_t mlcore::PropertyCache::operator=(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t i;
  _QWORD *v7;
  BOOL v8;
  _QWORD *v9;
  BOOL v10;
  _QWORD *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  const std::string *v15;
  uint64_t v16;
  uint64_t j;
  std::string *v18;
  BOOL v19;
  void **p_data;
  BOOL v21;
  std::string *v22;
  std::string::size_type v23;
  std::string *v24;
  __int128 v25;
  std::string::size_type v26;
  unint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t k;
  _QWORD *v31;
  _QWORD *v32;
  _OWORD *v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t m;
  uint64_t *v40;
  uint64_t *v41;
  _OWORD *v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t n;
  _QWORD *v49;
  _QWORD *v50;
  _OWORD *v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  _QWORD *v56;
  uint64_t *v57;
  _QWORD *v58;
  uint64_t v59[2];
  char v60;

  if (a1 != a2)
  {
    *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
    v4 = *(_QWORD **)(a2 + 24);
    v5 = *(_QWORD *)(a1 + 16);
    if (v5)
    {
      for (i = 0; i != v5; ++i)
        *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * i) = 0;
      v7 = *(_QWORD **)(a1 + 24);
      *(_QWORD *)(a1 + 24) = 0;
      *(_QWORD *)(a1 + 32) = 0;
      if (v7)
        v8 = v4 == 0;
      else
        v8 = 1;
      if (v8)
      {
        v9 = v7;
      }
      else
      {
        do
        {
          v7[2] = v4[2];
          mediaplatform::Data::operator=((uint64_t)(v7 + 3), (uint64_t)(v4 + 3));
          v9 = (_QWORD *)*v7;
          std::__hash_table<std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>,std::__unordered_map_hasher<mlcore::ModelProperty<long long> *,std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>,std::hash<mlcore::ModelProperty<long long> *>,std::equal_to<mlcore::ModelProperty<long long> *>,true>,std::__unordered_map_equal<mlcore::ModelProperty<long long> *,std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>,std::equal_to<mlcore::ModelProperty<long long> *>,std::hash<mlcore::ModelProperty<long long> *>,true>,std::allocator<std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>>>::__node_insert_multi(a1 + 8, v7);
          v4 = (_QWORD *)*v4;
          if (v9)
            v10 = v4 == 0;
          else
            v10 = 1;
          v7 = v9;
        }
        while (!v10);
      }
      std::__hash_table<std::__hash_value_type<mlcore::ModelProperty<mediaplatform::Data> *,mediaplatform::Data>,std::__unordered_map_hasher<mlcore::ModelProperty<mediaplatform::Data> *,std::__hash_value_type<mlcore::ModelProperty<mediaplatform::Data> *,mediaplatform::Data>,std::hash<mlcore::ModelProperty<mediaplatform::Data> *>,std::equal_to<mlcore::ModelProperty<mediaplatform::Data> *>,true>,std::__unordered_map_equal<mlcore::ModelProperty<mediaplatform::Data> *,std::__hash_value_type<mlcore::ModelProperty<mediaplatform::Data> *,mediaplatform::Data>,std::equal_to<mlcore::ModelProperty<mediaplatform::Data> *>,std::hash<mlcore::ModelProperty<mediaplatform::Data> *>,true>,std::allocator<std::__hash_value_type<mlcore::ModelProperty<mediaplatform::Data> *,mediaplatform::Data>>>::__deallocate_node(v9);
    }
    for (; v4; v4 = (_QWORD *)*v4)
    {
      v11 = operator new(0x40uLL);
      v59[0] = (uint64_t)v11;
      v59[1] = a1 + 24;
      v60 = 0;
      *v11 = 0;
      v11[1] = 0;
      v11[2] = v4[2];
      mediaplatform::Data::Data((mediaplatform::Data *)(v11 + 3), (const mediaplatform::Data *)(v4 + 3));
      v60 = 1;
      v12 = v11[2];
      v13 = HIDWORD(v12);
      v14 = 0x9DDFEA08EB382D69 * (((8 * v12) + 8) ^ HIDWORD(v12));
      v11[1] = 0x9DDFEA08EB382D69
             * ((0x9DDFEA08EB382D69 * (v13 ^ (v14 >> 47) ^ v14)) ^ ((0x9DDFEA08EB382D69 * (v13 ^ (v14 >> 47) ^ v14)) >> 47));
      std::__hash_table<std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>,std::__unordered_map_hasher<mlcore::ModelProperty<long long> *,std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>,std::hash<mlcore::ModelProperty<long long> *>,std::equal_to<mlcore::ModelProperty<long long> *>,true>,std::__unordered_map_equal<mlcore::ModelProperty<long long> *,std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>,std::equal_to<mlcore::ModelProperty<long long> *>,std::hash<mlcore::ModelProperty<long long> *>,true>,std::allocator<std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>>>::__node_insert_multi(a1 + 8, v11);
      v59[0] = 0;
      std::unique_ptr<std::__hash_node<std::__hash_value_type<mlcore::ModelProperty<mediaplatform::Data> *,mediaplatform::Data>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<mlcore::ModelProperty<mediaplatform::Data> *,mediaplatform::Data>,void *>>>>::reset[abi:ne180100](v59);
    }
    *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
    v15 = *(const std::string **)(a2 + 64);
    v16 = *(_QWORD *)(a1 + 56);
    if (v16)
    {
      for (j = 0; j != v16; ++j)
        *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8 * j) = 0;
      v18 = *(std::string **)(a1 + 64);
      *(_QWORD *)(a1 + 64) = 0;
      *(_QWORD *)(a1 + 72) = 0;
      if (v18)
        v19 = v15 == 0;
      else
        v19 = 1;
      if (v19)
      {
        p_data = (void **)&v18->__r_.__value_.__l.__data_;
      }
      else
      {
        do
        {
          v18->__r_.__value_.__r.__words[2] = v15->__r_.__value_.__r.__words[2];
          std::string::operator=(v18 + 1, v15 + 1);
          p_data = (void **)v18->__r_.__value_.__r.__words[0];
          std::__hash_table<std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>,std::__unordered_map_hasher<mlcore::ModelProperty<long long> *,std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>,std::hash<mlcore::ModelProperty<long long> *>,std::equal_to<mlcore::ModelProperty<long long> *>,true>,std::__unordered_map_equal<mlcore::ModelProperty<long long> *,std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>,std::equal_to<mlcore::ModelProperty<long long> *>,std::hash<mlcore::ModelProperty<long long> *>,true>,std::allocator<std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>>>::__node_insert_multi(a1 + 48, v18);
          v15 = (const std::string *)v15->__r_.__value_.__r.__words[0];
          if (p_data)
            v21 = v15 == 0;
          else
            v21 = 1;
          v18 = (std::string *)p_data;
        }
        while (!v21);
      }
      std::__hash_table<std::__hash_value_type<mlcore::ModelProperty<std::string> *,std::string>,std::__unordered_map_hasher<mlcore::ModelProperty<std::string> *,std::__hash_value_type<mlcore::ModelProperty<std::string> *,std::string>,std::hash<mlcore::ModelProperty<std::string> *>,std::equal_to<mlcore::ModelProperty<std::string> *>,true>,std::__unordered_map_equal<mlcore::ModelProperty<std::string> *,std::__hash_value_type<mlcore::ModelProperty<std::string> *,std::string>,std::equal_to<mlcore::ModelProperty<std::string> *>,std::hash<mlcore::ModelProperty<std::string> *>,true>,std::allocator<std::__hash_value_type<mlcore::ModelProperty<std::string> *,std::string>>>::__deallocate_node(p_data);
    }
    for (; v15; v15 = (const std::string *)v15->__r_.__value_.__r.__words[0])
    {
      v22 = (std::string *)operator new(0x30uLL);
      v22->__r_.__value_.__r.__words[0] = 0;
      v22->__r_.__value_.__l.__size_ = 0;
      v23 = v15->__r_.__value_.__r.__words[2];
      v22->__r_.__value_.__r.__words[2] = v23;
      v24 = v22 + 1;
      if (SHIBYTE(v15[1].__r_.__value_.__r.__words[2]) < 0)
      {
        std::string::__init_copy_ctor_external(v24, v15[1].__r_.__value_.__l.__data_, v15[1].__r_.__value_.__l.__size_);
        v23 = v22->__r_.__value_.__r.__words[2];
      }
      else
      {
        v25 = *(_OWORD *)&v15[1].__r_.__value_.__l.__data_;
        v22[1].__r_.__value_.__r.__words[2] = v15[1].__r_.__value_.__r.__words[2];
        *(_OWORD *)&v24->__r_.__value_.__l.__data_ = v25;
      }
      v26 = HIDWORD(v23);
      v27 = 0x9DDFEA08EB382D69 * (((8 * v23) + 8) ^ HIDWORD(v23));
      v22->__r_.__value_.__l.__size_ = 0x9DDFEA08EB382D69
                                     * ((0x9DDFEA08EB382D69 * (v26 ^ (v27 >> 47) ^ v27)) ^ ((0x9DDFEA08EB382D69
                                                                                             * (v26 ^ (v27 >> 47) ^ v27)) >> 47));
      std::__hash_table<std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>,std::__unordered_map_hasher<mlcore::ModelProperty<long long> *,std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>,std::hash<mlcore::ModelProperty<long long> *>,std::equal_to<mlcore::ModelProperty<long long> *>,true>,std::__unordered_map_equal<mlcore::ModelProperty<long long> *,std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>,std::equal_to<mlcore::ModelProperty<long long> *>,std::hash<mlcore::ModelProperty<long long> *>,true>,std::allocator<std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>>>::__node_insert_multi(a1 + 48, v22);
    }
    *(_DWORD *)(a1 + 120) = *(_DWORD *)(a2 + 120);
    v28 = *(_QWORD **)(a2 + 104);
    v29 = *(_QWORD *)(a1 + 96);
    if (!v29)
      goto LABEL_47;
    for (k = 0; k != v29; *(_QWORD *)(*(_QWORD *)(a1 + 88) + 8 * k++) = 0)
      ;
    v31 = *(_QWORD **)(a1 + 104);
    *(_QWORD *)(a1 + 104) = 0;
    *(_QWORD *)(a1 + 112) = 0;
    if (v31)
    {
      while (v28)
      {
        v31[2] = v28[2];
        v31[3] = v28[3];
        v32 = (_QWORD *)*v31;
        std::__hash_table<std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>,std::__unordered_map_hasher<mlcore::ModelProperty<long long> *,std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>,std::hash<mlcore::ModelProperty<long long> *>,std::equal_to<mlcore::ModelProperty<long long> *>,true>,std::__unordered_map_equal<mlcore::ModelProperty<long long> *,std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>,std::equal_to<mlcore::ModelProperty<long long> *>,std::hash<mlcore::ModelProperty<long long> *>,true>,std::allocator<std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>>>::__node_insert_multi(a1 + 88, v31);
        v28 = (_QWORD *)*v28;
        v31 = v32;
        if (!v32)
          goto LABEL_47;
      }
      do
      {
        v56 = (_QWORD *)*v31;
        operator delete(v31);
        v31 = v56;
      }
      while (v56);
    }
    else
    {
LABEL_47:
      while (v28)
      {
        v33 = operator new(0x20uLL);
        *(_QWORD *)v33 = 0;
        v33[1] = *((_OWORD *)v28 + 1);
        v34 = *((_QWORD *)v33 + 2);
        v35 = HIDWORD(v34);
        v36 = 0x9DDFEA08EB382D69 * (((8 * v34) + 8) ^ HIDWORD(v34));
        *((_QWORD *)v33 + 1) = 0x9DDFEA08EB382D69
                             * ((0x9DDFEA08EB382D69 * (v35 ^ (v36 >> 47) ^ v36)) ^ ((0x9DDFEA08EB382D69
                                                                                     * (v35 ^ (v36 >> 47) ^ v36)) >> 47));
        std::__hash_table<std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>,std::__unordered_map_hasher<mlcore::ModelProperty<long long> *,std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>,std::hash<mlcore::ModelProperty<long long> *>,std::equal_to<mlcore::ModelProperty<long long> *>,true>,std::__unordered_map_equal<mlcore::ModelProperty<long long> *,std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>,std::equal_to<mlcore::ModelProperty<long long> *>,std::hash<mlcore::ModelProperty<long long> *>,true>,std::allocator<std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>>>::__node_insert_multi(a1 + 88, v33);
        v28 = (_QWORD *)*v28;
      }
    }
    *(_DWORD *)(a1 + 160) = *(_DWORD *)(a2 + 160);
    v37 = *(uint64_t **)(a2 + 144);
    v38 = *(_QWORD *)(a1 + 136);
    if (!v38)
      goto LABEL_56;
    for (m = 0; m != v38; *(_QWORD *)(*(_QWORD *)(a1 + 128) + 8 * m++) = 0)
      ;
    v40 = *(uint64_t **)(a1 + 144);
    *(_QWORD *)(a1 + 144) = 0;
    *(_QWORD *)(a1 + 152) = 0;
    if (v40)
    {
      while (v37)
      {
        v40[2] = v37[2];
        *((_DWORD *)v40 + 6) = *((_DWORD *)v37 + 6);
        v41 = (uint64_t *)*v40;
        std::__hash_table<std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>,std::__unordered_map_hasher<mlcore::ModelProperty<long long> *,std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>,std::hash<mlcore::ModelProperty<long long> *>,std::equal_to<mlcore::ModelProperty<long long> *>,true>,std::__unordered_map_equal<mlcore::ModelProperty<long long> *,std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>,std::equal_to<mlcore::ModelProperty<long long> *>,std::hash<mlcore::ModelProperty<long long> *>,true>,std::allocator<std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>>>::__node_insert_multi(a1 + 128, v40);
        v37 = (uint64_t *)*v37;
        v40 = v41;
        if (!v41)
          goto LABEL_56;
      }
      do
      {
        v57 = (uint64_t *)*v40;
        operator delete(v40);
        v40 = v57;
      }
      while (v57);
    }
    else
    {
LABEL_56:
      while (v37)
      {
        v42 = operator new(0x20uLL);
        *(_QWORD *)v42 = 0;
        v42[1] = *((_OWORD *)v37 + 1);
        v43 = *((_QWORD *)v42 + 2);
        v44 = HIDWORD(v43);
        v45 = 0x9DDFEA08EB382D69 * (((8 * v43) + 8) ^ HIDWORD(v43));
        *((_QWORD *)v42 + 1) = 0x9DDFEA08EB382D69
                             * ((0x9DDFEA08EB382D69 * (v44 ^ (v45 >> 47) ^ v45)) ^ ((0x9DDFEA08EB382D69
                                                                                     * (v44 ^ (v45 >> 47) ^ v45)) >> 47));
        std::__hash_table<std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>,std::__unordered_map_hasher<mlcore::ModelProperty<long long> *,std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>,std::hash<mlcore::ModelProperty<long long> *>,std::equal_to<mlcore::ModelProperty<long long> *>,true>,std::__unordered_map_equal<mlcore::ModelProperty<long long> *,std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>,std::equal_to<mlcore::ModelProperty<long long> *>,std::hash<mlcore::ModelProperty<long long> *>,true>,std::allocator<std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>>>::__node_insert_multi(a1 + 128, v42);
        v37 = (uint64_t *)*v37;
      }
    }
    *(_DWORD *)(a1 + 200) = *(_DWORD *)(a2 + 200);
    v46 = *(_QWORD **)(a2 + 184);
    v47 = *(_QWORD *)(a1 + 176);
    if (!v47)
      goto LABEL_65;
    for (n = 0; n != v47; *(_QWORD *)(*(_QWORD *)(a1 + 168) + 8 * n++) = 0)
      ;
    v49 = *(_QWORD **)(a1 + 184);
    *(_QWORD *)(a1 + 184) = 0;
    *(_QWORD *)(a1 + 192) = 0;
    if (v49)
    {
      while (v46)
      {
        v49[2] = v46[2];
        v49[3] = v46[3];
        v50 = (_QWORD *)*v49;
        std::__hash_table<std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>,std::__unordered_map_hasher<mlcore::ModelProperty<long long> *,std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>,std::hash<mlcore::ModelProperty<long long> *>,std::equal_to<mlcore::ModelProperty<long long> *>,true>,std::__unordered_map_equal<mlcore::ModelProperty<long long> *,std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>,std::equal_to<mlcore::ModelProperty<long long> *>,std::hash<mlcore::ModelProperty<long long> *>,true>,std::allocator<std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>>>::__node_insert_multi(a1 + 168, v49);
        v46 = (_QWORD *)*v46;
        v49 = v50;
        if (!v50)
          goto LABEL_65;
      }
      do
      {
        v58 = (_QWORD *)*v49;
        operator delete(v49);
        v49 = v58;
      }
      while (v58);
    }
    else
    {
LABEL_65:
      while (v46)
      {
        v51 = operator new(0x20uLL);
        *(_QWORD *)v51 = 0;
        v51[1] = *((_OWORD *)v46 + 1);
        v52 = *((_QWORD *)v51 + 2);
        v53 = HIDWORD(v52);
        v54 = 0x9DDFEA08EB382D69 * (((8 * v52) + 8) ^ HIDWORD(v52));
        *((_QWORD *)v51 + 1) = 0x9DDFEA08EB382D69
                             * ((0x9DDFEA08EB382D69 * (v53 ^ (v54 >> 47) ^ v54)) ^ ((0x9DDFEA08EB382D69
                                                                                     * (v53 ^ (v54 >> 47) ^ v54)) >> 47));
        std::__hash_table<std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>,std::__unordered_map_hasher<mlcore::ModelProperty<long long> *,std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>,std::hash<mlcore::ModelProperty<long long> *>,std::equal_to<mlcore::ModelProperty<long long> *>,true>,std::__unordered_map_equal<mlcore::ModelProperty<long long> *,std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>,std::equal_to<mlcore::ModelProperty<long long> *>,std::hash<mlcore::ModelProperty<long long> *>,true>,std::allocator<std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>>>::__node_insert_multi(a1 + 168, v51);
        v46 = (_QWORD *)*v46;
      }
    }
  }
  return a1;
}

void sub_20A65B764(void *a1)
{
  _QWORD *v1;
  _QWORD *v2;

  __cxa_begin_catch(a1);
  do
  {
    v2 = (_QWORD *)*v1;
    operator delete(v1);
    v1 = v2;
  }
  while (v2);
  __cxa_rethrow();
}

void sub_20A65B780()
{
  __break(1u);
}

void sub_20A65B830(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_20A65B850(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_20A65B860()
{
  JUMPOUT(0x20A65B868);
}

void sub_20A65B874(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<mlcore::ModelProperty<mediaplatform::Data> *,mediaplatform::Data>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<mlcore::ModelProperty<mediaplatform::Data> *,mediaplatform::Data>,void *>>>>::reset[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20A65B888()
{
  __cxa_end_catch();
  JUMPOUT(0x20A65B890);
}

void std::__hash_table<std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>,std::__unordered_map_hasher<mlcore::ModelProperty<long long> *,std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>,std::hash<mlcore::ModelProperty<long long> *>,std::equal_to<mlcore::ModelProperty<long long> *>,true>,std::__unordered_map_equal<mlcore::ModelProperty<long long> *,std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>,std::equal_to<mlcore::ModelProperty<long long> *>,std::hash<mlcore::ModelProperty<long long> *>,true>,std::allocator<std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>>>::__node_insert_multi(uint64_t a1, _QWORD *a2)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  float v9;
  float v10;
  _BOOL8 v11;
  unint64_t v12;
  unint64_t v13;
  int8x8_t prime;
  void *v15;
  void *v16;
  uint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  uint8x8_t v20;
  unint64_t v21;
  uint8x8_t v22;
  uint64_t v23;
  _QWORD *i;
  unint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  uint8x8_t v28;
  unint64_t v29;
  _QWORD *v30;
  int v31;
  _QWORD *v32;
  unint64_t v33;
  unint64_t v34;
  _BOOL4 v35;
  int v36;
  unint64_t v37;
  unint64_t v38;
  void *v39;

  v4 = a2[2];
  v5 = HIDWORD(v4);
  v6 = 0x9DDFEA08EB382D69 * (((8 * v4) + 8) ^ HIDWORD(v4));
  v7 = 0x9DDFEA08EB382D69
     * ((0x9DDFEA08EB382D69 * (v5 ^ (v6 >> 47) ^ v6)) ^ ((0x9DDFEA08EB382D69 * (v5 ^ (v6 >> 47) ^ v6)) >> 47));
  a2[1] = v7;
  v8 = *(_QWORD *)(a1 + 8);
  v9 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v10 = *(float *)(a1 + 32);
  if (!v8 || (float)(v10 * (float)v8) < v9)
  {
    v11 = 1;
    if (v8 >= 3)
      v11 = (v8 & (v8 - 1)) != 0;
    v12 = v11 | (2 * v8);
    v13 = vcvtps_u32_f32(v9 / v10);
    if (v12 <= v13)
      prime = (int8x8_t)v13;
    else
      prime = (int8x8_t)v12;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
      v8 = *(_QWORD *)(a1 + 8);
    }
    if (*(_QWORD *)&prime > v8)
      goto LABEL_92;
    if (*(_QWORD *)&prime >= v8)
      goto LABEL_43;
    v21 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (v8 < 3 || (v22 = (uint8x8_t)vcnt_s8((int8x8_t)v8), v22.i16[0] = vaddlv_u8(v22), v22.u32[0] > 1uLL))
    {
      v21 = std::__next_prime(v21);
    }
    else
    {
      v23 = 1 << -(char)__clz(v21 - 1);
      if (v21 >= 2)
        v21 = v23;
    }
    if (*(_QWORD *)&prime <= v21)
      prime = (int8x8_t)v21;
    if (*(_QWORD *)&prime >= v8)
    {
      v8 = *(_QWORD *)(a1 + 8);
      goto LABEL_43;
    }
    if (prime)
    {
LABEL_92:
      if (*(_QWORD *)&prime >> 61)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v15 = operator new(8 * *(_QWORD *)&prime);
      v16 = *(void **)a1;
      *(_QWORD *)a1 = v15;
      if (v16)
        operator delete(v16);
      v17 = 0;
      *(int8x8_t *)(a1 + 8) = prime;
      do
        *(_QWORD *)(*(_QWORD *)a1 + 8 * v17++) = 0;
      while (*(_QWORD *)&prime != v17);
      v18 = *(_QWORD **)(a1 + 16);
      if (v18)
      {
        v19 = v18[1];
        v20 = (uint8x8_t)vcnt_s8(prime);
        v20.i16[0] = vaddlv_u8(v20);
        if (v20.u32[0] > 1uLL)
        {
          if (v19 >= *(_QWORD *)&prime)
            v19 %= *(_QWORD *)&prime;
        }
        else
        {
          v19 &= *(_QWORD *)&prime - 1;
        }
        *(_QWORD *)(*(_QWORD *)a1 + 8 * v19) = a1 + 16;
        for (i = (_QWORD *)*v18; *v18; i = (_QWORD *)*v18)
        {
          v25 = i[1];
          if (v20.u32[0] > 1uLL)
          {
            if (v25 >= *(_QWORD *)&prime)
              v25 %= *(_QWORD *)&prime;
          }
          else
          {
            v25 &= *(_QWORD *)&prime - 1;
          }
          if (v25 == v19)
          {
            v18 = i;
          }
          else
          {
            v26 = i;
            if (*(_QWORD *)(*(_QWORD *)a1 + 8 * v25))
            {
              do
              {
                v27 = v26;
                v26 = (_QWORD *)*v26;
              }
              while (v26 && i[2] == v26[2]);
              *v18 = v26;
              *v27 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v25);
              **(_QWORD **)(*(_QWORD *)a1 + 8 * v25) = i;
            }
            else
            {
              *(_QWORD *)(*(_QWORD *)a1 + 8 * v25) = v18;
              v18 = i;
              v19 = v25;
            }
          }
        }
      }
      v8 = (unint64_t)prime;
    }
    else
    {
      v39 = *(void **)a1;
      *(_QWORD *)a1 = 0;
      if (v39)
        operator delete(v39);
      v8 = 0;
      *(_QWORD *)(a1 + 8) = 0;
    }
  }
LABEL_43:
  v28 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
  v28.i16[0] = vaddlv_u8(v28);
  if (v28.u32[0] > 1uLL)
  {
    v29 = v7;
    if (v8 <= v7)
      v29 = v7 % v8;
  }
  else
  {
    v29 = (v8 - 1) & v7;
  }
  v30 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v29);
  if (v30)
  {
    v31 = 0;
    do
    {
      v32 = v30;
      v30 = (_QWORD *)*v30;
      if (!v30)
        break;
      v33 = v30[1];
      if (v28.u32[0] > 1uLL)
      {
        v34 = v30[1];
        if (v33 >= v8)
          v34 = v33 % v8;
      }
      else
      {
        v34 = v33 & (v8 - 1);
      }
      if (v34 != v29)
        break;
      v35 = v33 == v7 && v30[2] == a2[2];
      v36 = v31 & !v35;
      v31 |= v35;
    }
    while (v36 != 1);
  }
  else
  {
    v32 = 0;
  }
  v37 = a2[1];
  if (v28.u32[0] > 1uLL)
  {
    if (v37 >= v8)
      v37 %= v8;
  }
  else
  {
    v37 &= v8 - 1;
  }
  if (!v32)
  {
    *a2 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = a2;
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v37) = a1 + 16;
    if (!*a2)
      goto LABEL_79;
    v38 = *(_QWORD *)(*a2 + 8);
    if (v28.u32[0] > 1uLL)
    {
      if (v38 >= v8)
        v38 %= v8;
    }
    else
    {
      v38 &= v8 - 1;
    }
LABEL_78:
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v38) = a2;
    goto LABEL_79;
  }
  *a2 = *v32;
  *v32 = a2;
  if (*a2)
  {
    v38 = *(_QWORD *)(*a2 + 8);
    if (v28.u32[0] > 1uLL)
    {
      if (v38 >= v8)
        v38 %= v8;
    }
    else
    {
      v38 &= v8 - 1;
    }
    if (v38 != v37)
      goto LABEL_78;
  }
LABEL_79:
  ++*(_QWORD *)(a1 + 24);
}

void mlcore::Playlist::~Playlist(mlcore::Playlist *this)
{
  *(_QWORD *)this = &off_24C33AB48;
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)this + 232);
  *(_QWORD *)this = off_24C33A860;
  mlcore::PropertyCacheBase<long long,int,double,std::string,mediaplatform::Data>::~PropertyCacheBase((_QWORD *)this + 1);
}

{
  *(_QWORD *)this = &off_24C33AB48;
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)this + 232);
  *(_QWORD *)this = off_24C33A860;
  mlcore::PropertyCacheBase<long long,int,double,std::string,mediaplatform::Data>::~PropertyCacheBase((_QWORD *)this + 1);
}

{
  *(_QWORD *)this = &off_24C33AB48;
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)this + 232);
  *(_QWORD *)this = off_24C33A860;
  mlcore::PropertyCacheBase<long long,int,double,std::string,mediaplatform::Data>::~PropertyCacheBase((_QWORD *)this + 1);
  JUMPOUT(0x20BD27AFCLL);
}

uint64_t std::__shared_ptr_emplace<mediaplatform::SQLExpressionList>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

BOOL mlcore::MediaError::operator BOOL(uint64_t a1)
{
  return *(_DWORD *)(a1 + 32) != 0;
}

uint64_t std::__shared_ptr_emplace<mediaplatform::SQLAliasExpression>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t mlcore::UnaryPredicate<int>::UnaryPredicate(uint64_t result, uint64_t a2, int a3)
{
  *(_DWORD *)(result + 16) = a3;
  *(_QWORD *)result = &unk_24C3377B8;
  *(_QWORD *)(result + 8) = a2;
  return result;
}

{
  *(_DWORD *)(result + 16) = a3;
  *(_QWORD *)result = &unk_24C3377B8;
  *(_QWORD *)(result + 8) = a2;
  return result;
}

uint64_t mlcore::Entity::propertyCache(mlcore::Entity *this)
{
  return (uint64_t)this + 8;
}

uint64_t mlcore::TypedEntityClass<mlcore::Playlist>::sectionPropertyForOrderingProperty()
{
  return 0;
}

uint64_t mlcore::SQLRenderer::popRenderingContext(mlcore::SQLRenderer *this)
{
  uint64_t v1;
  uint64_t result;

  v1 = *((_QWORD *)this + 9);
  if ((unint64_t)(v1 - *((_QWORD *)this + 8)) <= 0x1F)
    __assert_rtn("popRenderingContext", "SQLRenderer.cpp", 47, "_renderingContexts.size() > 1");
  result = std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100](v1 - 16);
  *((_QWORD *)this + 9) = result;
  return result;
}

uint64_t mlcore::LibraryView::library@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(this + 72);
  *a2 = *(_QWORD *)(this + 64);
  a2[1] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return this;
}

__n128 mlcore::RangeQuery::setRange(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[2] = *a2;
  return result;
}

void mlcore::Query::_allPropertiesToFetch(uint64_t a1@<X0>, mlcore::LibraryView **a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  mlcore::LibraryView *v9;
  unint64_t v10;
  __int128 v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;

  v5 = *(_QWORD *)(a1 + 16);
  v6 = *(std::__shared_weak_count **)(a1 + 24);
  *(_QWORD *)&v25 = v5;
  *((_QWORD *)&v25 + 1) = v6;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    v9 = *a2;
    if (!*a2)
      goto LABEL_26;
    *(_QWORD *)&v23 = v5;
    *((_QWORD *)&v23 + 1) = v6;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  else
  {
    v9 = *a2;
    if (!*a2)
      goto LABEL_26;
    v23 = v5;
  }
  mlcore::LibraryView::_predicateByApplyingFilters(v9, &v23, *(mlcore::EntityClass **)(a1 + 8), &v24);
  v11 = v24;
  v24 = 0uLL;
  v25 = v11;
  if (v6)
  {
    v12 = (unint64_t *)&v6->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  v14 = (std::__shared_weak_count *)*((_QWORD *)&v24 + 1);
  if (*((_QWORD *)&v24 + 1))
  {
    v15 = (unint64_t *)(*((_QWORD *)&v24 + 1) + 8);
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v17 = (std::__shared_weak_count *)*((_QWORD *)&v23 + 1);
  if (*((_QWORD *)&v23 + 1))
  {
    v18 = (unint64_t *)(*((_QWORD *)&v23 + 1) + 8);
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  v5 = v25;
LABEL_26:
  if (v5)
  {
    (*(void (**)(unint64_t))(*(_QWORD *)v5 + 56))(v5);
  }
  else
  {
    *(_OWORD *)(a3 + 32) = 0u;
    *(_OWORD *)(a3 + 48) = 0u;
    *(_OWORD *)a3 = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
    *(_DWORD *)(a3 + 56) = 1065353216;
  }
  v20 = (std::__shared_weak_count *)*((_QWORD *)&v25 + 1);
  if (*((_QWORD *)&v25 + 1))
  {
    v21 = (unint64_t *)(*((_QWORD *)&v25 + 1) + 8);
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
}

void sub_20A65BFD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void mlcore::LibraryView::_predicateByApplyingFilters(mlcore::LibraryView *a1@<X0>, __int128 *a2@<X1>, mlcore::EntityClass *a3@<X2>, _QWORD *a4@<X8>)
{
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  _OWORD *v13;
  uint64_t v14;
  __int128 v15;
  unint64_t *v16;
  unint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  _OWORD *v20;
  __int128 v21;
  int64x2_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  char *v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  _QWORD *v37;
  _QWORD *v38;
  char *v39;
  __int128 v40;
  int64x2_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t *v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  char *v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  unint64_t *v53;
  unint64_t v54;
  _QWORD *v55;
  _QWORD *v56;
  char *v57;
  __int128 v58;
  int64x2_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  unint64_t *v64;
  unint64_t v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  __int128 *v72[3];
  int64x2_t v73;
  _QWORD v74[2];
  __int128 v75;
  __int128 v76;
  __int128 **v77;
  int64x2_t v78;
  uint64_t v79;
  _QWORD *v80;

  mlcore::LibraryView::_filterPredicateForEntityClass(a1, a3, &v76);
  v8 = std::__hash_table<std::__hash_value_type<mlcore::ModelProperty<double> *,double>,std::__unordered_map_hasher<mlcore::ModelProperty<double> *,std::__hash_value_type<mlcore::ModelProperty<double> *,double>,std::hash<mlcore::ModelProperty<double> *>,std::equal_to<mlcore::ModelProperty<double> *>,true>,std::__unordered_map_equal<mlcore::ModelProperty<double> *,std::__hash_value_type<mlcore::ModelProperty<double> *,double>,std::equal_to<mlcore::ModelProperty<double> *>,std::hash<mlcore::ModelProperty<double> *>,true>,std::allocator<std::__hash_value_type<mlcore::ModelProperty<double> *,double>>>::find<mlcore::ModelProperty<double> *>((_QWORD *)a1 + 1, (unint64_t)a3);
  if (v8)
  {
    v10 = v8[3];
    v9 = v8[4];
    *(_QWORD *)&v75 = v10;
    *((_QWORD *)&v75 + 1) = v9;
    if (v9)
    {
      v11 = (unint64_t *)(v9 + 8);
      do
        v12 = __ldxr(v11);
      while (__stxr(v12 + 1, v11));
    }
  }
  else
  {
    v10 = 0;
    v75 = 0uLL;
  }
  v73 = 0uLL;
  v74[0] = 0;
  if (*(_QWORD *)a2)
  {
    v80 = v74;
    v13 = std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<mediaplatform::DatabaseParameterBase>>>(1uLL);
    v15 = *a2;
    *v13 = *a2;
    if (*((_QWORD *)&v15 + 1))
    {
      v16 = (unint64_t *)(*((_QWORD *)&v15 + 1) + 8);
      do
        v17 = __ldxr(v16);
      while (__stxr(v17 + 1, v16));
    }
    v18 = (_QWORD *)v73.i64[1];
    v19 = (_QWORD *)v73.i64[0];
    if (v73.i64[1] == v73.i64[0])
    {
      v22 = vdupq_n_s64(v73.u64[1]);
      v20 = v13;
    }
    else
    {
      v20 = v13;
      do
      {
        v21 = *((_OWORD *)v18 - 1);
        v18 -= 2;
        *--v20 = v21;
        *v18 = 0;
        v18[1] = 0;
      }
      while (v18 != v19);
      v22 = v73;
    }
    v23 = v13 + 1;
    v73.i64[0] = (uint64_t)v20;
    v78 = v22;
    v24 = v74[0];
    v74[0] = &v13[v14];
    v79 = v24;
    v77 = (__int128 **)v22.i64[0];
    std::__split_buffer<std::shared_ptr<mediaplatform::SQLExpression const>>::~__split_buffer((uint64_t)&v77);
    v73.i64[1] = (uint64_t)v23;
    if (v10)
      goto LABEL_19;
  }
  else
  {
    v23 = 0;
    if (v10)
    {
LABEL_19:
      if ((unint64_t)v23 >= v74[0])
      {
        v28 = ((uint64_t)v23 - v73.i64[0]) >> 4;
        if ((unint64_t)(v28 + 1) >> 60)
          goto LABEL_81;
        v29 = (v74[0] - v73.i64[0]) >> 3;
        if (v29 <= v28 + 1)
          v29 = v28 + 1;
        if (v74[0] - v73.i64[0] >= 0x7FFFFFFFFFFFFFF0uLL)
          v30 = 0xFFFFFFFFFFFFFFFLL;
        else
          v30 = v29;
        v80 = v74;
        v31 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<mediaplatform::DatabaseParameterBase>>>(v30);
        v33 = &v31[16 * v28];
        v34 = *((_QWORD *)&v75 + 1);
        *(_OWORD *)v33 = v75;
        if (v34)
        {
          v35 = (unint64_t *)(v34 + 8);
          do
            v36 = __ldxr(v35);
          while (__stxr(v36 + 1, v35));
        }
        v37 = (_QWORD *)v73.i64[1];
        v38 = (_QWORD *)v73.i64[0];
        if (v73.i64[1] == v73.i64[0])
        {
          v41 = vdupq_n_s64(v73.u64[1]);
          v39 = &v31[16 * v28];
        }
        else
        {
          v39 = &v31[16 * v28];
          do
          {
            v40 = *((_OWORD *)v37 - 1);
            v37 -= 2;
            *((_OWORD *)v39 - 1) = v40;
            v39 -= 16;
            *v37 = 0;
            v37[1] = 0;
          }
          while (v37 != v38);
          v41 = v73;
        }
        v23 = v33 + 16;
        v73.i64[0] = (uint64_t)v39;
        v73.i64[1] = (uint64_t)(v33 + 16);
        v78 = v41;
        v42 = v74[0];
        v74[0] = &v31[16 * v32];
        v79 = v42;
        v77 = (__int128 **)v41.i64[0];
        std::__split_buffer<std::shared_ptr<mediaplatform::SQLExpression const>>::~__split_buffer((uint64_t)&v77);
      }
      else
      {
        v25 = *((_QWORD *)&v75 + 1);
        *v23 = v75;
        v23[1] = v25;
        if (v25)
        {
          v26 = (unint64_t *)(v25 + 8);
          do
            v27 = __ldxr(v26);
          while (__stxr(v27 + 1, v26));
        }
        v23 += 2;
      }
      v73.i64[1] = (uint64_t)v23;
    }
  }
  if (!(_QWORD)v76)
    goto LABEL_62;
  if ((unint64_t)v23 >= v74[0])
  {
    v46 = ((uint64_t)v23 - v73.i64[0]) >> 4;
    if (!((unint64_t)(v46 + 1) >> 60))
    {
      v47 = (v74[0] - v73.i64[0]) >> 3;
      if (v47 <= v46 + 1)
        v47 = v46 + 1;
      if (v74[0] - v73.i64[0] >= 0x7FFFFFFFFFFFFFF0uLL)
        v48 = 0xFFFFFFFFFFFFFFFLL;
      else
        v48 = v47;
      v80 = v74;
      v49 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<mediaplatform::DatabaseParameterBase>>>(v48);
      v51 = &v49[16 * v46];
      v52 = *((_QWORD *)&v76 + 1);
      *(_OWORD *)v51 = v76;
      if (v52)
      {
        v53 = (unint64_t *)(v52 + 8);
        do
          v54 = __ldxr(v53);
        while (__stxr(v54 + 1, v53));
      }
      v55 = (_QWORD *)v73.i64[1];
      v56 = (_QWORD *)v73.i64[0];
      if (v73.i64[1] == v73.i64[0])
      {
        v59 = vdupq_n_s64(v73.u64[1]);
        v57 = &v49[16 * v46];
      }
      else
      {
        v57 = &v49[16 * v46];
        do
        {
          v58 = *((_OWORD *)v55 - 1);
          v55 -= 2;
          *((_OWORD *)v57 - 1) = v58;
          v57 -= 16;
          *v55 = 0;
          v55[1] = 0;
        }
        while (v55 != v56);
        v59 = v73;
      }
      v23 = v51 + 16;
      v73.i64[0] = (uint64_t)v57;
      v73.i64[1] = (uint64_t)(v51 + 16);
      v78 = v59;
      v60 = v74[0];
      v74[0] = &v49[16 * v50];
      v79 = v60;
      v77 = (__int128 **)v59.i64[0];
      std::__split_buffer<std::shared_ptr<mediaplatform::SQLExpression const>>::~__split_buffer((uint64_t)&v77);
      goto LABEL_61;
    }
LABEL_81:
    std::vector<std::string>::__throw_length_error[abi:ne180100]();
  }
  *v23 = v76;
  v43 = *((_QWORD *)&v76 + 1);
  v23[1] = *((_QWORD *)&v76 + 1);
  if (v43)
  {
    v44 = (unint64_t *)(v43 + 8);
    do
      v45 = __ldxr(v44);
    while (__stxr(v45 + 1, v44));
  }
  v23 += 2;
LABEL_61:
  v73.i64[1] = (uint64_t)v23;
LABEL_62:
  v61 = v73.i64[0];
  v62 = ((uint64_t)v23 - v73.i64[0]) >> 4;
  if (v62 == 1)
  {
    *a4 = *(_QWORD *)v73.i64[0];
    v63 = *(_QWORD *)(v61 + 8);
    a4[1] = v63;
    if (v63)
    {
      v64 = (unint64_t *)(v63 + 8);
      do
        v65 = __ldxr(v64);
      while (__stxr(v65 + 1, v64));
    }
  }
  else if (v62)
  {
    memset(v72, 0, sizeof(v72));
    std::vector<std::shared_ptr<mlcore::Predicate>>::__init_with_size[abi:ne180100]<std::shared_ptr<mlcore::Predicate>*,std::shared_ptr<mlcore::Predicate>*>((char *)v72, v73.i64[0], v23, v62);
    mlcore::CreateAndPredicate(v72, a4);
    v77 = v72;
    std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v77);
  }
  else
  {
    *a4 = 0;
    a4[1] = 0;
  }
  v77 = (__int128 **)&v73;
  std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v77);
  v66 = (std::__shared_weak_count *)*((_QWORD *)&v75 + 1);
  if (*((_QWORD *)&v75 + 1))
  {
    v67 = (unint64_t *)(*((_QWORD *)&v75 + 1) + 8);
    do
      v68 = __ldaxr(v67);
    while (__stlxr(v68 - 1, v67));
    if (!v68)
    {
      ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
      std::__shared_weak_count::__release_weak(v66);
    }
  }
  v69 = (std::__shared_weak_count *)*((_QWORD *)&v76 + 1);
  if (*((_QWORD *)&v76 + 1))
  {
    v70 = (unint64_t *)(*((_QWORD *)&v76 + 1) + 8);
    do
      v71 = __ldaxr(v70);
    while (__stlxr(v71 - 1, v70));
    if (!v71)
    {
      ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
      std::__shared_weak_count::__release_weak(v69);
    }
  }
}

void sub_20A65C444(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  va_list va;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  va_list va1;
  uint64_t v15;
  va_list va2;

  va_start(va2, a5);
  va_start(va1, a5);
  va_start(va, a5);
  v8 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v13 = va_arg(va2, _QWORD);
  v15 = va_arg(va2, _QWORD);
  *(_QWORD *)(v6 - 72) = v5;
  std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v6 - 72));
  *(_QWORD *)(v6 - 80) = va;
  std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v6 - 80));
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)va2);
  _Unwind_Resume(a1);
}

void mlcore::CreateAndPredicate(__int128 **a1@<X0>, _QWORD *a2@<X8>)
{
  __int128 *v4;
  __int128 *v5;
  char *v6;
  uint64_t v7;
  char *v8;
  __int128 v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;

  *a2 = 0;
  a2[1] = 0;
  v4 = std::remove[abi:ne180100]<std::__wrap_iter<std::shared_ptr<mlcore::Predicate> *>,decltype(nullptr)>(*a1, a1[1]);
  std::vector<std::shared_ptr<mlcore::Predicate>>::erase((uint64_t)a1, (uint64_t)v4, (uint64_t)a1[1]);
  v5 = *a1;
  v6 = (char *)a1[1];
  v7 = v6 - (char *)*a1;
  if (v7 == 16)
  {
    std::shared_ptr<mlcore::Predicate>::operator=[abi:ne180100](a2, *(_QWORD *)v5, *((_QWORD *)v5 + 1));
  }
  else if ((unint64_t)v7 >= 0x11)
  {
    v8 = (char *)operator new(0x38uLL);
    *(_OWORD *)(v8 + 8) = 0u;
    *((_QWORD *)v8 + 3) = off_24C339690;
    *(_QWORD *)v8 = &off_24C33C4B0;
    *(_OWORD *)(v8 + 40) = 0u;
    *((_QWORD *)v8 + 4) = 0;
    std::vector<std::shared_ptr<mlcore::Predicate>>::__init_with_size[abi:ne180100]<std::shared_ptr<mlcore::Predicate>*,std::shared_ptr<mlcore::Predicate>*>(v8 + 32, v5, v6, v7 >> 4);
    *((_QWORD *)v8 + 3) = &off_24C336C40;
    *(_QWORD *)&v9 = v8 + 24;
    *((_QWORD *)&v9 + 1) = v8;
    v10 = (std::__shared_weak_count *)a2[1];
    *(_OWORD *)a2 = v9;
    if (v10)
    {
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v12 = __ldaxr(p_shared_owners);
      while (__stlxr(v12 - 1, p_shared_owners));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
  }
}

void sub_20A65C5B0(_Unwind_Exception *a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  void *v4;

  std::__shared_weak_count::~__shared_weak_count(v2);
  operator delete(v4);
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::shared_ptr<mlcore::Predicate>>::erase(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (a2 != a3)
  {
    v3 = a2;
    v4 = result;
    result = a3;
    v5 = *(_QWORD *)(v4 + 8);
    if (a3 != v5)
    {
      v6 = 16 * ((a3 - a2) >> 4);
      do
      {
        std::shared_ptr<mlcore::Predicate>::operator=[abi:ne180100](v3, (__int128 *)(v3 + v6));
        v3 += 16;
      }
      while (v3 + v6 != v5);
      result = *(_QWORD *)(v4 + 8);
    }
    while (result != v3)
      result = std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100](result - 16);
    *(_QWORD *)(v4 + 8) = v3;
  }
  return result;
}

void mlcore::LibraryView::_filterPredicateForEntityClass(mlcore::LibraryView *this@<X0>, mlcore::EntityClass *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v6;
  int v7;
  uint64_t v8;
  int v9;
  int v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  _OWORD *v14;
  uint64_t v15;
  uint64_t v16;
  mlcore *v17;
  mlcore *v18;
  mlcore *v19;
  mlcore::EntityClass *v20;
  mlcore *v21;
  mlcore::EntityClass *v22;
  mlcore::EntityClass *v23;
  int v24;
  mlcore *v25;
  uint64_t v26;
  uint64_t Foreign;
  __int128 v28;
  uint64_t v29;
  _OWORD *v30;
  int v31;
  mlcore *v32;
  uint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *p_shared_owners;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  std::__shared_weak_count *v45;
  __int128 v46;
  uint64_t v47;
  _OWORD *v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  char *v52;
  uint64_t v53;
  char *v54;
  _QWORD *v55;
  _QWORD *v56;
  char *v57;
  __int128 v58;
  int64x2_t v59;
  int v60;
  mlcore *v61;
  uint64_t v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  std::__shared_weak_count *v68;
  unint64_t *v69;
  unint64_t v70;
  std::__shared_weak_count *v71;
  unint64_t *v72;
  unint64_t v73;
  uint64_t v74;
  char *v75;
  char *v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  uint64_t v80;
  unint64_t v81;
  unint64_t v82;
  char *v83;
  uint64_t v84;
  __int128 *v85;
  _QWORD *v86;
  _QWORD *v87;
  char *v88;
  __int128 v89;
  int64x2_t v90;
  mlcore *v91;
  uint64_t v92;
  std::__shared_weak_count *v93;
  unint64_t *v94;
  uint64_t v95;
  unint64_t v96;
  uint64_t v97;
  std::__shared_weak_count *v98;
  unint64_t *v99;
  unint64_t v100;
  std::__shared_weak_count *v101;
  unint64_t *v102;
  unint64_t v103;
  std::__shared_weak_count *v104;
  unint64_t *v105;
  unint64_t v106;
  std::__shared_weak_count *v107;
  unint64_t *v108;
  unint64_t v109;
  mlcore *v110;
  uint64_t v111;
  std::__shared_weak_count *v112;
  unint64_t *v113;
  uint64_t v114;
  unint64_t v115;
  uint64_t v116;
  std::__shared_weak_count *v117;
  unint64_t *v118;
  unint64_t v119;
  std::__shared_weak_count *v120;
  unint64_t *v121;
  unint64_t v122;
  std::__shared_weak_count *v123;
  unint64_t *v124;
  unint64_t v125;
  unint64_t *v126;
  uint64_t v127;
  unint64_t v128;
  unint64_t v129;
  char *v130;
  uint64_t v131;
  char *v132;
  _QWORD *v133;
  _QWORD *v134;
  char *v135;
  __int128 v136;
  int64x2_t v137;
  char *v138;
  uint64_t IsLocal;
  __int128 v140;
  uint64_t v141;
  _OWORD *v142;
  uint64_t v143;
  unint64_t v144;
  unint64_t v145;
  char *v146;
  uint64_t v147;
  char *v148;
  _QWORD *v149;
  _QWORD *v150;
  char *v151;
  __int128 v152;
  int64x2_t v153;
  char *v154;
  uint64_t HasNonPurgeableAsset;
  __int128 v156;
  uint64_t v157;
  _OWORD *v158;
  uint64_t v159;
  unint64_t v160;
  unint64_t v161;
  char *v162;
  uint64_t v163;
  char *v164;
  _QWORD *v165;
  _QWORD *v166;
  char *v167;
  __int128 v168;
  int64x2_t v169;
  char *v170;
  int v171;
  uint64_t v172;
  char *v173;
  uint64_t v174;
  char *v175;
  __int128 *v176;
  char v177;
  uint64_t v178;
  char v179;
  __int128 v180;
  unint64_t *v181;
  unint64_t v182;
  uint64_t v183;
  uint64_t v184;
  unint64_t v185;
  uint64_t v186;
  unint64_t v187;
  char *v188;
  uint64_t v189;
  __int128 *v190;
  _QWORD *v191;
  _QWORD *v192;
  char *v193;
  __int128 v194;
  int64x2_t v195;
  _OWORD *v196;
  char *v197;
  std::__shared_weak_count *v198;
  unint64_t *v199;
  unint64_t v200;
  uint64_t i;
  unint64_t *v202;
  unint64_t v203;
  unint64_t *v204;
  unint64_t v205;
  uint64_t v206;
  __int128 v207;
  uint64_t v208;
  _OWORD *v209;
  uint64_t v210;
  unint64_t v211;
  unint64_t v212;
  char *v213;
  uint64_t v214;
  char *v215;
  _QWORD *v216;
  _QWORD *v217;
  char *v218;
  __int128 v219;
  int64x2_t v220;
  char *v221;
  uint64_t v222;
  __int128 v223;
  uint64_t v224;
  _OWORD *v225;
  uint64_t v226;
  unint64_t v227;
  unint64_t v228;
  char *v229;
  uint64_t v230;
  char *v231;
  _QWORD *v232;
  _QWORD *v233;
  char *v234;
  __int128 v235;
  int64x2_t v236;
  char *v237;
  uint64_t IsProtected;
  __int128 v239;
  uint64_t v240;
  _OWORD *v241;
  uint64_t v242;
  unint64_t v243;
  unint64_t v244;
  char *v245;
  uint64_t v246;
  char *v247;
  _QWORD *v248;
  _QWORD *v249;
  char *v250;
  __int128 v251;
  int64x2_t v252;
  char *v253;
  uint64_t v254;
  __int128 v255;
  uint64_t v256;
  _OWORD *v257;
  uint64_t v258;
  unint64_t v259;
  unint64_t v260;
  char *v261;
  uint64_t v262;
  char *v263;
  _QWORD *v264;
  _QWORD *v265;
  char *v266;
  __int128 v267;
  int64x2_t v268;
  char *v269;
  uint64_t v270;
  __int128 v271;
  uint64_t v272;
  _OWORD *v273;
  uint64_t v274;
  unint64_t v275;
  unint64_t v276;
  char *v277;
  uint64_t v278;
  char *v279;
  _QWORD *v280;
  _QWORD *v281;
  char *v282;
  __int128 v283;
  int64x2_t v284;
  char *v285;
  uint64_t v286;
  char *v287;
  __int128 v288;
  uint64_t v289;
  _OWORD *v290;
  uint64_t v291;
  unint64_t v292;
  unint64_t v293;
  char *v294;
  uint64_t v295;
  char *v296;
  _QWORD *v297;
  _QWORD *v298;
  char *v299;
  __int128 v300;
  int64x2_t v301;
  char *v302;
  _QWORD *v303;
  uint64_t v304;
  unint64_t *v305;
  unint64_t v306;
  uint64_t v307;
  unint64_t v308;
  unint64_t v309;
  char *v310;
  uint64_t v311;
  char *v312;
  uint64_t v313;
  unint64_t *v314;
  unint64_t v315;
  _QWORD *v316;
  _QWORD *v317;
  char *v318;
  __int128 v319;
  int64x2_t v320;
  char *v321;
  std::__shared_weak_count *v322;
  unint64_t *v323;
  unint64_t v324;
  __int128 *v325;
  __int128 v326;
  unint64_t *v327;
  unint64_t v328;
  uint64_t v329;
  _OWORD *v330;
  uint64_t v331;
  mlcore *v332;
  uint64_t v333;
  uint64_t v334;
  __int128 v335;
  uint64_t v336;
  _OWORD *v337;
  uint64_t v338;
  unint64_t v339;
  unint64_t v340;
  char *v341;
  uint64_t v342;
  __int128 *v343;
  _QWORD *v344;
  _QWORD *v345;
  char *v346;
  __int128 v347;
  int64x2_t v348;
  uint64_t v349;
  mlcore *v350;
  uint64_t v351;
  uint64_t v352;
  __int128 v353;
  uint64_t v354;
  _OWORD *v355;
  uint64_t v356;
  unint64_t v357;
  unint64_t v358;
  char *v359;
  uint64_t v360;
  __int128 *v361;
  _QWORD *v362;
  _QWORD *v363;
  char *v364;
  __int128 v365;
  int64x2_t v366;
  uint64_t v367;
  mlcore *v368;
  uint64_t v369;
  uint64_t v370;
  __int128 v371;
  uint64_t v372;
  _OWORD *v373;
  uint64_t v374;
  unint64_t v375;
  unint64_t v376;
  char *v377;
  uint64_t v378;
  __int128 *v379;
  _QWORD *v380;
  _QWORD *v381;
  char *v382;
  __int128 v383;
  int64x2_t v384;
  uint64_t v385;
  mlcore *v386;
  uint64_t v387;
  uint64_t v388;
  __int128 v389;
  uint64_t v390;
  _OWORD *v391;
  uint64_t v392;
  unint64_t v393;
  unint64_t v394;
  char *v395;
  uint64_t v396;
  __int128 *v397;
  _QWORD *v398;
  _QWORD *v399;
  char *v400;
  __int128 v401;
  int64x2_t v402;
  uint64_t v403;
  mlcore *v404;
  uint64_t HasCloudLibraryID;
  uint64_t v406;
  char *v407;
  __int128 v408;
  uint64_t v409;
  _OWORD *v410;
  uint64_t v411;
  unint64_t v412;
  unint64_t v413;
  char *v414;
  uint64_t v415;
  __int128 *v416;
  _QWORD *v417;
  _QWORD *v418;
  char *v419;
  __int128 v420;
  int64x2_t v421;
  uint64_t v422;
  _QWORD *v423;
  uint64_t v424;
  unint64_t *v425;
  unint64_t v426;
  uint64_t v427;
  unint64_t v428;
  unint64_t v429;
  char *v430;
  uint64_t v431;
  char *v432;
  uint64_t v433;
  unint64_t *v434;
  unint64_t v435;
  _QWORD *v436;
  _QWORD *v437;
  char *v438;
  __int128 v439;
  int64x2_t v440;
  uint64_t v441;
  std::__shared_weak_count *v442;
  unint64_t *v443;
  unint64_t v444;
  int v445;
  uint64_t IsHidden;
  char *v447;
  mlcore *v448;
  uint64_t v449;
  _QWORD *v450;
  uint64_t v451;
  unint64_t *v452;
  unint64_t v453;
  uint64_t v454;
  mlcore *v455;
  uint64_t IsFolder;
  _QWORD *v457;
  uint64_t IsSmart;
  _QWORD *v459;
  unint64_t *v460;
  unint64_t v461;
  unint64_t *v462;
  unint64_t v463;
  unint64_t *v464;
  unint64_t v465;
  uint64_t k;
  uint64_t v467;
  char *v468;
  uint64_t v469;
  char *v470;
  uint64_t IsFavoritedSongs;
  char *v472;
  uint64_t v473;
  char *v474;
  uint64_t v475;
  _QWORD *v476;
  unint64_t *v477;
  unint64_t *v478;
  unint64_t v479;
  unint64_t v480;
  uint64_t m;
  __int128 **v482;
  mlcore *v483;
  uint64_t v484;
  std::__shared_weak_count *v485;
  unint64_t *v486;
  uint64_t v487;
  unint64_t v488;
  uint64_t v489;
  std::__shared_weak_count *v490;
  unint64_t *v491;
  unint64_t v492;
  std::__shared_weak_count *v493;
  unint64_t *v494;
  unint64_t v495;
  std::__shared_weak_count *v496;
  unint64_t *v497;
  unint64_t v498;
  unint64_t *v499;
  mlcore *v500;
  uint64_t v501;
  _QWORD *v502;
  uint64_t v503;
  unint64_t *v504;
  unint64_t v505;
  uint64_t v506;
  uint64_t v507;
  unint64_t *v508;
  unint64_t v509;
  std::__shared_weak_count *v510;
  unint64_t *v511;
  unint64_t v512;
  uint64_t IsKeepLocalEnabled;
  __int128 v514;
  uint64_t v515;
  _OWORD *v516;
  uint64_t v517;
  unint64_t v518;
  unint64_t v519;
  char *v520;
  uint64_t v521;
  __int128 *v522;
  _QWORD *v523;
  _QWORD *v524;
  char *v525;
  __int128 v526;
  int64x2_t v527;
  uint64_t v528;
  _QWORD *v529;
  uint64_t v530;
  char *v531;
  __int128 v532;
  uint64_t v533;
  uint64_t v534;
  unint64_t v535;
  unint64_t v536;
  char *v537;
  uint64_t v538;
  __int128 *v539;
  _QWORD *v540;
  _QWORD *v541;
  char *v542;
  __int128 v543;
  int64x2_t v544;
  uint64_t v545;
  mlcore *v546;
  uint64_t v547;
  _QWORD *v548;
  uint64_t v549;
  unint64_t *v550;
  unint64_t v551;
  uint64_t v552;
  uint64_t v553;
  unint64_t v554;
  unint64_t v555;
  char *v556;
  uint64_t v557;
  char *v558;
  _QWORD *v559;
  _QWORD *v560;
  char *v561;
  __int128 v562;
  int64x2_t v563;
  uint64_t v564;
  unint64_t *v565;
  unint64_t v566;
  uint64_t j;
  unint64_t *v568;
  unint64_t v569;
  std::__shared_weak_count *v570;
  unint64_t *v571;
  unint64_t v572;
  std::__shared_weak_count *v573;
  unint64_t *v574;
  unint64_t v575;
  _QWORD *v576;
  uint64_t v577;
  char *v578;
  __int128 v579;
  uint64_t v580;
  uint64_t v581;
  unint64_t v582;
  unint64_t v583;
  char *v584;
  uint64_t v585;
  __int128 *v586;
  _QWORD *v587;
  _QWORD *v588;
  char *v589;
  __int128 v590;
  int64x2_t v591;
  uint64_t v592;
  __int128 v593;
  __int128 v594;
  __int128 v595;
  __int128 v596;
  __int128 v597;
  __int128 v598;
  __int128 v599;
  __int128 v600;
  __int128 v601;
  __int128 v602;
  __int128 v603;
  __int128 v604;
  __int128 v605;
  __int128 v606;
  __int128 v607;
  __int128 v608;
  __int128 v609;
  __int128 v610;
  __int128 v611;
  __int128 v612;
  __int128 *v613[3];
  __int128 *v614[3];
  __int128 *v615[3];
  void **v616[2];
  __int128 v617;
  __int128 v618;
  __int128 v619;
  _QWORD *v620;
  std::__shared_weak_count *v621;
  __int128 *v622[3];
  __int128 *v623[3];
  char *v624;
  _QWORD *v625;
  _QWORD *v626;
  std::__shared_weak_count *v627;
  _QWORD *v628;
  std::__shared_weak_count *v629;
  _QWORD *v630;
  std::__shared_weak_count *v631;
  __int128 *v632[3];
  _QWORD *v633;
  std::__shared_weak_count *v634;
  __int128 *v635[3];
  uint64_t v636[2];
  uint64_t v637[2];
  uint64_t v638[2];
  uint64_t v639[2];
  uint64_t v640[2];
  uint64_t v641[2];
  __int128 *v642[3];
  __int128 v643;
  __int128 v644;
  __int128 *v645;
  __int128 v646;
  __int128 v647;
  __int128 v648;
  char *v649;
  __int128 **v650;
  _BYTE v651[32];
  char **v652;
  _QWORD *v653;
  __int128 v654;
  __int128 v655;
  uint64_t v656;

  v656 = *MEMORY[0x24BDAC8D0];
  if (a2)
  {
    v6 = mlcore::TypedEntityClass<mlcore::Item>::sharedPointer();
    v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 64))(v6);
    v8 = (*(uint64_t (**)(mlcore::EntityClass *))(*(_QWORD *)a2 + 64))(a2);
    if (v7 == (_DWORD)v8)
    {
      v648 = 0uLL;
      v649 = 0;
      v9 = *((_DWORD *)this + 20);
      LOBYTE(v10) = v9;
      if ((v9 & 1) != 0)
      {
        v11 = mlcore::ItemPropertyInMyLibrary((mlcore *)v8);
        v8 = (uint64_t)operator new(0x30uLL);
        *(_OWORD *)(v8 + 8) = 0u;
        *(_QWORD *)v8 = &off_24C33C9F0;
        *(_QWORD *)(v8 + 32) = v11;
        *(_DWORD *)(v8 + 40) = 0;
        *(_QWORD *)(v8 + 24) = &unk_24C3377B8;
        *(_QWORD *)&v647 = v8 + 24;
        *((_QWORD *)&v647 + 1) = v8;
        v12 = v647;
        v654 = v647;
        v647 = 0u;
        v13 = *((_QWORD *)&v648 + 1);
        if (*((_QWORD *)&v648 + 1) >= (unint64_t)v649)
        {
          v593 = v12;
          v49 = (uint64_t)(*((_QWORD *)&v648 + 1) - v648) >> 4;
          if ((unint64_t)(v49 + 1) >> 60)
            std::vector<std::string>::__throw_length_error[abi:ne180100]();
          v50 = (uint64_t)&v649[-v648] >> 3;
          if (v50 <= v49 + 1)
            v50 = v49 + 1;
          if ((unint64_t)&v649[-v648] >= 0x7FFFFFFFFFFFFFF0)
            v51 = 0xFFFFFFFFFFFFFFFLL;
          else
            v51 = v50;
          v652 = &v649;
          v52 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<mediaplatform::DatabaseParameterBase>>>(v51);
          v54 = &v52[16 * v49];
          *(_OWORD *)v54 = v593;
          v654 = 0uLL;
          v55 = (_QWORD *)*((_QWORD *)&v648 + 1);
          v56 = (_QWORD *)v648;
          if (*((_QWORD *)&v648 + 1) == (_QWORD)v648)
          {
            v59 = vdupq_n_s64(*((unint64_t *)&v648 + 1));
            v57 = &v52[16 * v49];
          }
          else
          {
            v57 = &v52[16 * v49];
            do
            {
              v58 = *((_OWORD *)v55 - 1);
              v55 -= 2;
              *((_OWORD *)v57 - 1) = v58;
              v57 -= 16;
              *v55 = 0;
              v55[1] = 0;
            }
            while (v55 != v56);
            v59 = (int64x2_t)v648;
          }
          v14 = v54 + 16;
          *(_QWORD *)&v648 = v57;
          *((_QWORD *)&v648 + 1) = v54 + 16;
          *(int64x2_t *)&v651[8] = v59;
          v138 = v649;
          v649 = &v52[16 * v53];
          *(_QWORD *)&v651[24] = v138;
          *(_QWORD *)v651 = v59.i64[0];
          v8 = std::__split_buffer<std::shared_ptr<mediaplatform::SQLExpression const>>::~__split_buffer((uint64_t)v651);
        }
        else
        {
          **((_OWORD **)&v648 + 1) = v12;
          v14 = (_OWORD *)(v13 + 16);
          v654 = 0uLL;
        }
        *((_QWORD *)&v648 + 1) = v14;
        v10 = *((_DWORD *)this + 20);
      }
      if ((v10 & 2) != 0)
      {
        IsLocal = mlcore::ItemPropertyIsLocal((mlcore *)v8);
        v8 = (uint64_t)operator new(0x30uLL);
        *(_OWORD *)(v8 + 8) = 0u;
        *(_QWORD *)v8 = &off_24C33C9F0;
        *(_QWORD *)(v8 + 32) = IsLocal;
        *(_DWORD *)(v8 + 40) = 0;
        *(_QWORD *)(v8 + 24) = &unk_24C3377B8;
        *(_QWORD *)&v647 = v8 + 24;
        *((_QWORD *)&v647 + 1) = v8;
        v140 = v647;
        v654 = v647;
        v647 = 0u;
        v141 = *((_QWORD *)&v648 + 1);
        if (*((_QWORD *)&v648 + 1) >= (unint64_t)v649)
        {
          v596 = v140;
          v143 = (uint64_t)(*((_QWORD *)&v648 + 1) - v648) >> 4;
          if ((unint64_t)(v143 + 1) >> 60)
            std::vector<std::string>::__throw_length_error[abi:ne180100]();
          v144 = (uint64_t)&v649[-v648] >> 3;
          if (v144 <= v143 + 1)
            v144 = v143 + 1;
          if ((unint64_t)&v649[-v648] >= 0x7FFFFFFFFFFFFFF0)
            v145 = 0xFFFFFFFFFFFFFFFLL;
          else
            v145 = v144;
          v652 = &v649;
          v146 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<mediaplatform::DatabaseParameterBase>>>(v145);
          v148 = &v146[16 * v143];
          *(_OWORD *)v148 = v596;
          v654 = 0uLL;
          v149 = (_QWORD *)*((_QWORD *)&v648 + 1);
          v150 = (_QWORD *)v648;
          if (*((_QWORD *)&v648 + 1) == (_QWORD)v648)
          {
            v153 = vdupq_n_s64(*((unint64_t *)&v648 + 1));
            v151 = &v146[16 * v143];
          }
          else
          {
            v151 = &v146[16 * v143];
            do
            {
              v152 = *((_OWORD *)v149 - 1);
              v149 -= 2;
              *((_OWORD *)v151 - 1) = v152;
              v151 -= 16;
              *v149 = 0;
              v149[1] = 0;
            }
            while (v149 != v150);
            v153 = (int64x2_t)v648;
          }
          v142 = v148 + 16;
          *(_QWORD *)&v648 = v151;
          *((_QWORD *)&v648 + 1) = v148 + 16;
          *(int64x2_t *)&v651[8] = v153;
          v154 = v649;
          v649 = &v146[16 * v147];
          *(_QWORD *)&v651[24] = v154;
          *(_QWORD *)v651 = v153.i64[0];
          v8 = std::__split_buffer<std::shared_ptr<mediaplatform::SQLExpression const>>::~__split_buffer((uint64_t)v651);
        }
        else
        {
          **((_OWORD **)&v648 + 1) = v140;
          v142 = (_OWORD *)(v141 + 16);
          v654 = 0uLL;
        }
        *((_QWORD *)&v648 + 1) = v142;
      }
      if ((v9 & 8) != 0)
      {
        HasNonPurgeableAsset = mlcore::ItemPropertyHasNonPurgeableAsset((mlcore *)v8);
        v8 = (uint64_t)operator new(0x30uLL);
        *(_OWORD *)(v8 + 8) = 0u;
        *(_QWORD *)v8 = &off_24C33C9F0;
        *(_QWORD *)(v8 + 32) = HasNonPurgeableAsset;
        *(_DWORD *)(v8 + 40) = 0;
        *(_QWORD *)(v8 + 24) = &unk_24C3377B8;
        *(_QWORD *)&v647 = v8 + 24;
        *((_QWORD *)&v647 + 1) = v8;
        v156 = v647;
        v654 = v647;
        v647 = 0u;
        v157 = *((_QWORD *)&v648 + 1);
        if (*((_QWORD *)&v648 + 1) >= (unint64_t)v649)
        {
          v597 = v156;
          v159 = (uint64_t)(*((_QWORD *)&v648 + 1) - v648) >> 4;
          if ((unint64_t)(v159 + 1) >> 60)
            std::vector<std::string>::__throw_length_error[abi:ne180100]();
          v160 = (uint64_t)&v649[-v648] >> 3;
          if (v160 <= v159 + 1)
            v160 = v159 + 1;
          if ((unint64_t)&v649[-v648] >= 0x7FFFFFFFFFFFFFF0)
            v161 = 0xFFFFFFFFFFFFFFFLL;
          else
            v161 = v160;
          v652 = &v649;
          v162 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<mediaplatform::DatabaseParameterBase>>>(v161);
          v164 = &v162[16 * v159];
          *(_OWORD *)v164 = v597;
          v654 = 0uLL;
          v165 = (_QWORD *)*((_QWORD *)&v648 + 1);
          v166 = (_QWORD *)v648;
          if (*((_QWORD *)&v648 + 1) == (_QWORD)v648)
          {
            v169 = vdupq_n_s64(*((unint64_t *)&v648 + 1));
            v167 = &v162[16 * v159];
          }
          else
          {
            v167 = &v162[16 * v159];
            do
            {
              v168 = *((_OWORD *)v165 - 1);
              v165 -= 2;
              *((_OWORD *)v167 - 1) = v168;
              v167 -= 16;
              *v165 = 0;
              v165[1] = 0;
            }
            while (v165 != v166);
            v169 = (int64x2_t)v648;
          }
          v158 = v164 + 16;
          *(_QWORD *)&v648 = v167;
          *((_QWORD *)&v648 + 1) = v164 + 16;
          *(int64x2_t *)&v651[8] = v169;
          v170 = v649;
          v649 = &v162[16 * v163];
          *(_QWORD *)&v651[24] = v170;
          *(_QWORD *)v651 = v169.i64[0];
          v8 = std::__split_buffer<std::shared_ptr<mediaplatform::SQLExpression const>>::~__split_buffer((uint64_t)v651);
        }
        else
        {
          **((_OWORD **)&v648 + 1) = v156;
          v158 = (_OWORD *)(v157 + 16);
          v654 = 0uLL;
        }
        *((_QWORD *)&v648 + 1) = v158;
      }
      v171 = *((_DWORD *)this + 20);
      if ((v171 & 0x10) != 0)
      {
        v172 = mlcore::ItemPropertyLikedState((mlcore *)v8);
        v173 = (char *)operator new(0x48uLL);
        *(_OWORD *)(v173 + 8) = 0u;
        *(_QWORD *)v173 = &off_24C33CE50;
        *((_QWORD *)v173 + 4) = v172;
        *((_QWORD *)v173 + 5) = 0;
        *((_QWORD *)v173 + 3) = &unk_24C339C50;
        *((_DWORD *)v173 + 12) = 2;
        *(_OWORD *)(v173 + 56) = 0u;
        *(_QWORD *)&v644 = v173 + 24;
        *((_QWORD *)&v644 + 1) = v173;
        v654 = v644;
        v644 = 0u;
        v174 = mlcore::ItemPropertyAlbumLikeState((mlcore *)v173);
        v175 = (char *)operator new(0x48uLL);
        *(_OWORD *)(v175 + 8) = 0u;
        *(_QWORD *)v175 = &off_24C33CE50;
        *((_QWORD *)v175 + 4) = v174;
        *((_QWORD *)v175 + 5) = 0;
        *((_QWORD *)v175 + 3) = &unk_24C339C50;
        *((_DWORD *)v175 + 12) = 2;
        *(_OWORD *)(v175 + 56) = 0u;
        *(_QWORD *)&v643 = v175 + 24;
        *((_QWORD *)&v643 + 1) = v175;
        v655 = v643;
        v643 = 0u;
        v645 = 0;
        v646 = 0u;
        *(_QWORD *)v651 = &v645;
        v651[8] = 0;
        v176 = (__int128 *)operator new(0x20uLL);
        v177 = 0;
        v178 = 0;
        v645 = v176;
        *(_QWORD *)&v646 = v176;
        *((_QWORD *)&v646 + 1) = v176 + 2;
        do
        {
          v179 = v177;
          v180 = *(&v654 + v178);
          *v176 = v180;
          if (*((_QWORD *)&v180 + 1))
          {
            v181 = (unint64_t *)(*((_QWORD *)&v180 + 1) + 8);
            do
              v182 = __ldxr(v181);
            while (__stxr(v182 + 1, v181));
          }
          ++v176;
          v177 = 1;
          v178 = 1;
        }
        while ((v179 & 1) == 0);
        *(_QWORD *)&v646 = v176;
        mlcore::CreateOrPredicate(&v645, &v647);
        v183 = *((_QWORD *)&v648 + 1);
        if (*((_QWORD *)&v648 + 1) >= (unint64_t)v649)
        {
          v184 = (uint64_t)(*((_QWORD *)&v648 + 1) - v648) >> 4;
          v185 = v184 + 1;
          if ((unint64_t)(v184 + 1) >> 60)
            std::vector<std::string>::__throw_length_error[abi:ne180100]();
          v186 = (uint64_t)&v649[-v648];
          if ((uint64_t)&v649[-v648] >> 3 > v185)
            v185 = v186 >> 3;
          if ((unint64_t)v186 >= 0x7FFFFFFFFFFFFFF0)
            v187 = 0xFFFFFFFFFFFFFFFLL;
          else
            v187 = v185;
          v652 = &v649;
          v188 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<mediaplatform::DatabaseParameterBase>>>(v187);
          v190 = (__int128 *)&v188[16 * v184];
          *v190 = v647;
          v647 = 0uLL;
          v191 = (_QWORD *)*((_QWORD *)&v648 + 1);
          v192 = (_QWORD *)v648;
          if (*((_QWORD *)&v648 + 1) == (_QWORD)v648)
          {
            v195 = vdupq_n_s64(*((unint64_t *)&v648 + 1));
            v193 = &v188[16 * v184];
          }
          else
          {
            v193 = &v188[16 * v184];
            do
            {
              v194 = *((_OWORD *)v191 - 1);
              v191 -= 2;
              *((_OWORD *)v193 - 1) = v194;
              v193 -= 16;
              *v191 = 0;
              v191[1] = 0;
            }
            while (v191 != v192);
            v195 = (int64x2_t)v648;
          }
          v196 = v190 + 1;
          *(_QWORD *)&v648 = v193;
          *((_QWORD *)&v648 + 1) = v190 + 1;
          *(int64x2_t *)&v651[8] = v195;
          v197 = v649;
          v649 = &v188[16 * v189];
          *(_QWORD *)&v651[24] = v197;
          *(_QWORD *)v651 = v195.i64[0];
          std::__split_buffer<std::shared_ptr<mediaplatform::SQLExpression const>>::~__split_buffer((uint64_t)v651);
          v198 = (std::__shared_weak_count *)*((_QWORD *)&v647 + 1);
          *((_QWORD *)&v648 + 1) = v196;
          if (*((_QWORD *)&v647 + 1))
          {
            v199 = (unint64_t *)(*((_QWORD *)&v647 + 1) + 8);
            do
              v200 = __ldaxr(v199);
            while (__stlxr(v200 - 1, v199));
            if (!v200)
            {
              ((void (*)(std::__shared_weak_count *))v198->__on_zero_shared)(v198);
              std::__shared_weak_count::__release_weak(v198);
            }
          }
        }
        else
        {
          **((_OWORD **)&v648 + 1) = v647;
          v647 = 0uLL;
          *((_QWORD *)&v648 + 1) = v183 + 16;
        }
        *(_QWORD *)v651 = &v645;
        std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__destroy_vector::operator()[abi:ne180100]((void ***)v651);
        for (i = 16; i != -16; i -= 16)
          v8 = std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)&v654 + i);
        if (*((_QWORD *)&v643 + 1))
        {
          v202 = (unint64_t *)(*((_QWORD *)&v643 + 1) + 8);
          do
            v203 = __ldaxr(v202);
          while (__stlxr(v203 - 1, v202));
          if (!v203)
          {
            (*(void (**)(_QWORD))(**((_QWORD **)&v643 + 1) + 16))(*((_QWORD *)&v643 + 1));
            std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v643 + 1));
          }
        }
        if (*((_QWORD *)&v644 + 1))
        {
          v204 = (unint64_t *)(*((_QWORD *)&v644 + 1) + 8);
          do
            v205 = __ldaxr(v204);
          while (__stlxr(v205 - 1, v204));
          if (!v205)
          {
            (*(void (**)(_QWORD))(**((_QWORD **)&v644 + 1) + 16))(*((_QWORD *)&v644 + 1));
            std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v644 + 1));
          }
        }
        v171 = *((_DWORD *)this + 20);
      }
      if ((v171 & 0x80) != 0)
      {
        v206 = mlcore::ItemPropertyPurchaseHistoryID((mlcore *)v8);
        v8 = (uint64_t)operator new(0x48uLL);
        *(_OWORD *)(v8 + 8) = 0u;
        *(_QWORD *)v8 = &off_24C33CE88;
        *(_QWORD *)(v8 + 32) = v206;
        *(_QWORD *)(v8 + 40) = 0x100000000;
        *(_QWORD *)(v8 + 24) = &unk_24C339CA8;
        *(_QWORD *)(v8 + 48) = 0;
        *(_OWORD *)(v8 + 56) = 0u;
        *(_QWORD *)&v647 = v8 + 24;
        *((_QWORD *)&v647 + 1) = v8;
        v207 = v647;
        v654 = v647;
        v647 = 0u;
        v208 = *((_QWORD *)&v648 + 1);
        if (*((_QWORD *)&v648 + 1) >= (unint64_t)v649)
        {
          v598 = v207;
          v210 = (uint64_t)(*((_QWORD *)&v648 + 1) - v648) >> 4;
          if ((unint64_t)(v210 + 1) >> 60)
            std::vector<std::string>::__throw_length_error[abi:ne180100]();
          v211 = (uint64_t)&v649[-v648] >> 3;
          if (v211 <= v210 + 1)
            v211 = v210 + 1;
          if ((unint64_t)&v649[-v648] >= 0x7FFFFFFFFFFFFFF0)
            v212 = 0xFFFFFFFFFFFFFFFLL;
          else
            v212 = v211;
          v652 = &v649;
          v213 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<mediaplatform::DatabaseParameterBase>>>(v212);
          v215 = &v213[16 * v210];
          *(_OWORD *)v215 = v598;
          v654 = 0uLL;
          v216 = (_QWORD *)*((_QWORD *)&v648 + 1);
          v217 = (_QWORD *)v648;
          if (*((_QWORD *)&v648 + 1) == (_QWORD)v648)
          {
            v220 = vdupq_n_s64(*((unint64_t *)&v648 + 1));
            v218 = &v213[16 * v210];
          }
          else
          {
            v218 = &v213[16 * v210];
            do
            {
              v219 = *((_OWORD *)v216 - 1);
              v216 -= 2;
              *((_OWORD *)v218 - 1) = v219;
              v218 -= 16;
              *v216 = 0;
              v216[1] = 0;
            }
            while (v216 != v217);
            v220 = (int64x2_t)v648;
          }
          v209 = v215 + 16;
          *(_QWORD *)&v648 = v218;
          *((_QWORD *)&v648 + 1) = v215 + 16;
          *(int64x2_t *)&v651[8] = v220;
          v221 = v649;
          v649 = &v213[16 * v214];
          *(_QWORD *)&v651[24] = v221;
          *(_QWORD *)v651 = v220.i64[0];
          v8 = std::__split_buffer<std::shared_ptr<mediaplatform::SQLExpression const>>::~__split_buffer((uint64_t)v651);
        }
        else
        {
          **((_OWORD **)&v648 + 1) = v207;
          v209 = (_OWORD *)(v208 + 16);
          v654 = 0uLL;
        }
        *((_QWORD *)&v648 + 1) = v209;
        v171 = *((_DWORD *)this + 20);
      }
      if ((v171 & 0x100) != 0)
      {
        v222 = mlcore::ItemPropertySubscriptionStoreItemID((mlcore *)v8);
        v8 = (uint64_t)operator new(0x48uLL);
        *(_OWORD *)(v8 + 8) = 0u;
        *(_QWORD *)v8 = &off_24C33CE88;
        *(_QWORD *)(v8 + 32) = v222;
        *(_QWORD *)(v8 + 40) = 0x100000000;
        *(_QWORD *)(v8 + 24) = &unk_24C339CA8;
        *(_QWORD *)(v8 + 48) = 0;
        *(_OWORD *)(v8 + 56) = 0u;
        *(_QWORD *)&v647 = v8 + 24;
        *((_QWORD *)&v647 + 1) = v8;
        v223 = v647;
        v654 = v647;
        v647 = 0u;
        v224 = *((_QWORD *)&v648 + 1);
        if (*((_QWORD *)&v648 + 1) >= (unint64_t)v649)
        {
          v599 = v223;
          v226 = (uint64_t)(*((_QWORD *)&v648 + 1) - v648) >> 4;
          if ((unint64_t)(v226 + 1) >> 60)
            std::vector<std::string>::__throw_length_error[abi:ne180100]();
          v227 = (uint64_t)&v649[-v648] >> 3;
          if (v227 <= v226 + 1)
            v227 = v226 + 1;
          if ((unint64_t)&v649[-v648] >= 0x7FFFFFFFFFFFFFF0)
            v228 = 0xFFFFFFFFFFFFFFFLL;
          else
            v228 = v227;
          v652 = &v649;
          v229 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<mediaplatform::DatabaseParameterBase>>>(v228);
          v231 = &v229[16 * v226];
          *(_OWORD *)v231 = v599;
          v654 = 0uLL;
          v232 = (_QWORD *)*((_QWORD *)&v648 + 1);
          v233 = (_QWORD *)v648;
          if (*((_QWORD *)&v648 + 1) == (_QWORD)v648)
          {
            v236 = vdupq_n_s64(*((unint64_t *)&v648 + 1));
            v234 = &v229[16 * v226];
          }
          else
          {
            v234 = &v229[16 * v226];
            do
            {
              v235 = *((_OWORD *)v232 - 1);
              v232 -= 2;
              *((_OWORD *)v234 - 1) = v235;
              v234 -= 16;
              *v232 = 0;
              v232[1] = 0;
            }
            while (v232 != v233);
            v236 = (int64x2_t)v648;
          }
          v225 = v231 + 16;
          *(_QWORD *)&v648 = v234;
          *((_QWORD *)&v648 + 1) = v231 + 16;
          *(int64x2_t *)&v651[8] = v236;
          v237 = v649;
          v649 = &v229[16 * v230];
          *(_QWORD *)&v651[24] = v237;
          *(_QWORD *)v651 = v236.i64[0];
          v8 = std::__split_buffer<std::shared_ptr<mediaplatform::SQLExpression const>>::~__split_buffer((uint64_t)v651);
        }
        else
        {
          **((_OWORD **)&v648 + 1) = v223;
          v225 = (_OWORD *)(v224 + 16);
          v654 = 0uLL;
        }
        *((_QWORD *)&v648 + 1) = v225;
        v171 = *((_DWORD *)this + 20);
      }
      if ((v171 & 0x200) != 0)
      {
        IsProtected = mlcore::ItemPropertyIsProtected((mlcore *)v8);
        v8 = (uint64_t)operator new(0x48uLL);
        *(_OWORD *)(v8 + 8) = 0u;
        *(_QWORD *)v8 = &off_24C33CE88;
        *(_QWORD *)(v8 + 32) = IsProtected;
        *(_QWORD *)(v8 + 40) = 0;
        *(_QWORD *)(v8 + 24) = &unk_24C339CA8;
        *(_QWORD *)(v8 + 48) = 0;
        *(_OWORD *)(v8 + 56) = 0u;
        *(_QWORD *)&v647 = v8 + 24;
        *((_QWORD *)&v647 + 1) = v8;
        v239 = v647;
        v654 = v647;
        v647 = 0u;
        v240 = *((_QWORD *)&v648 + 1);
        if (*((_QWORD *)&v648 + 1) >= (unint64_t)v649)
        {
          v600 = v239;
          v242 = (uint64_t)(*((_QWORD *)&v648 + 1) - v648) >> 4;
          if ((unint64_t)(v242 + 1) >> 60)
            std::vector<std::string>::__throw_length_error[abi:ne180100]();
          v243 = (uint64_t)&v649[-v648] >> 3;
          if (v243 <= v242 + 1)
            v243 = v242 + 1;
          if ((unint64_t)&v649[-v648] >= 0x7FFFFFFFFFFFFFF0)
            v244 = 0xFFFFFFFFFFFFFFFLL;
          else
            v244 = v243;
          v652 = &v649;
          v245 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<mediaplatform::DatabaseParameterBase>>>(v244);
          v247 = &v245[16 * v242];
          *(_OWORD *)v247 = v600;
          v654 = 0uLL;
          v248 = (_QWORD *)*((_QWORD *)&v648 + 1);
          v249 = (_QWORD *)v648;
          if (*((_QWORD *)&v648 + 1) == (_QWORD)v648)
          {
            v252 = vdupq_n_s64(*((unint64_t *)&v648 + 1));
            v250 = &v245[16 * v242];
          }
          else
          {
            v250 = &v245[16 * v242];
            do
            {
              v251 = *((_OWORD *)v248 - 1);
              v248 -= 2;
              *((_OWORD *)v250 - 1) = v251;
              v250 -= 16;
              *v248 = 0;
              v248[1] = 0;
            }
            while (v248 != v249);
            v252 = (int64x2_t)v648;
          }
          v241 = v247 + 16;
          *(_QWORD *)&v648 = v250;
          *((_QWORD *)&v648 + 1) = v247 + 16;
          *(int64x2_t *)&v651[8] = v252;
          v253 = v649;
          v649 = &v245[16 * v246];
          *(_QWORD *)&v651[24] = v253;
          *(_QWORD *)v651 = v252.i64[0];
          v8 = std::__split_buffer<std::shared_ptr<mediaplatform::SQLExpression const>>::~__split_buffer((uint64_t)v651);
        }
        else
        {
          **((_OWORD **)&v648 + 1) = v239;
          v241 = (_OWORD *)(v240 + 16);
          v654 = 0uLL;
        }
        *((_QWORD *)&v648 + 1) = v241;
        v171 = *((_DWORD *)this + 20);
      }
      if ((v171 & 0x40) != 0)
      {
        v254 = mlcore::ItemPropertyDownloadSourceContainerID((mlcore *)v8);
        v8 = (uint64_t)operator new(0x48uLL);
        *(_OWORD *)(v8 + 8) = 0u;
        *(_QWORD *)v8 = &off_24C33CE88;
        *(_QWORD *)(v8 + 32) = v254;
        *(_QWORD *)(v8 + 40) = 0;
        *(_QWORD *)(v8 + 24) = &unk_24C339CA8;
        *(_QWORD *)(v8 + 48) = 0;
        *(_OWORD *)(v8 + 56) = 0u;
        *(_QWORD *)&v647 = v8 + 24;
        *((_QWORD *)&v647 + 1) = v8;
        v255 = v647;
        v654 = v647;
        v647 = 0u;
        v256 = *((_QWORD *)&v648 + 1);
        if (*((_QWORD *)&v648 + 1) >= (unint64_t)v649)
        {
          v601 = v255;
          v258 = (uint64_t)(*((_QWORD *)&v648 + 1) - v648) >> 4;
          if ((unint64_t)(v258 + 1) >> 60)
            std::vector<std::string>::__throw_length_error[abi:ne180100]();
          v259 = (uint64_t)&v649[-v648] >> 3;
          if (v259 <= v258 + 1)
            v259 = v258 + 1;
          if ((unint64_t)&v649[-v648] >= 0x7FFFFFFFFFFFFFF0)
            v260 = 0xFFFFFFFFFFFFFFFLL;
          else
            v260 = v259;
          v652 = &v649;
          v261 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<mediaplatform::DatabaseParameterBase>>>(v260);
          v263 = &v261[16 * v258];
          *(_OWORD *)v263 = v601;
          v654 = 0uLL;
          v264 = (_QWORD *)*((_QWORD *)&v648 + 1);
          v265 = (_QWORD *)v648;
          if (*((_QWORD *)&v648 + 1) == (_QWORD)v648)
          {
            v268 = vdupq_n_s64(*((unint64_t *)&v648 + 1));
            v266 = &v261[16 * v258];
          }
          else
          {
            v266 = &v261[16 * v258];
            do
            {
              v267 = *((_OWORD *)v264 - 1);
              v264 -= 2;
              *((_OWORD *)v266 - 1) = v267;
              v266 -= 16;
              *v264 = 0;
              v264[1] = 0;
            }
            while (v264 != v265);
            v268 = (int64x2_t)v648;
          }
          v257 = v263 + 16;
          *(_QWORD *)&v648 = v266;
          *((_QWORD *)&v648 + 1) = v263 + 16;
          *(int64x2_t *)&v651[8] = v268;
          v269 = v649;
          v649 = &v261[16 * v262];
          *(_QWORD *)&v651[24] = v269;
          *(_QWORD *)v651 = v268.i64[0];
          v8 = std::__split_buffer<std::shared_ptr<mediaplatform::SQLExpression const>>::~__split_buffer((uint64_t)v651);
        }
        else
        {
          **((_OWORD **)&v648 + 1) = v255;
          v257 = (_OWORD *)(v256 + 16);
          v654 = 0uLL;
        }
        *((_QWORD *)&v648 + 1) = v257;
        v171 = *((_DWORD *)this + 20);
      }
      if ((v171 & 0x1000) != 0)
      {
        v270 = mlcore::ItemPropertyLikedState((mlcore *)v8);
        v8 = (uint64_t)operator new(0x48uLL);
        *(_OWORD *)(v8 + 8) = 0u;
        *(_QWORD *)v8 = &off_24C33CE50;
        *(_QWORD *)(v8 + 32) = v270;
        *(_QWORD *)(v8 + 40) = 0;
        *(_QWORD *)(v8 + 24) = &unk_24C339C50;
        *(_DWORD *)(v8 + 48) = 2;
        *(_OWORD *)(v8 + 56) = 0u;
        *(_QWORD *)&v647 = v8 + 24;
        *((_QWORD *)&v647 + 1) = v8;
        v271 = v647;
        v654 = v647;
        v647 = 0u;
        v272 = *((_QWORD *)&v648 + 1);
        if (*((_QWORD *)&v648 + 1) >= (unint64_t)v649)
        {
          v602 = v271;
          v274 = (uint64_t)(*((_QWORD *)&v648 + 1) - v648) >> 4;
          if ((unint64_t)(v274 + 1) >> 60)
            std::vector<std::string>::__throw_length_error[abi:ne180100]();
          v275 = (uint64_t)&v649[-v648] >> 3;
          if (v275 <= v274 + 1)
            v275 = v274 + 1;
          if ((unint64_t)&v649[-v648] >= 0x7FFFFFFFFFFFFFF0)
            v276 = 0xFFFFFFFFFFFFFFFLL;
          else
            v276 = v275;
          v652 = &v649;
          v277 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<mediaplatform::DatabaseParameterBase>>>(v276);
          v279 = &v277[16 * v274];
          *(_OWORD *)v279 = v602;
          v654 = 0uLL;
          v280 = (_QWORD *)*((_QWORD *)&v648 + 1);
          v281 = (_QWORD *)v648;
          if (*((_QWORD *)&v648 + 1) == (_QWORD)v648)
          {
            v284 = vdupq_n_s64(*((unint64_t *)&v648 + 1));
            v282 = &v277[16 * v274];
          }
          else
          {
            v282 = &v277[16 * v274];
            do
            {
              v283 = *((_OWORD *)v280 - 1);
              v280 -= 2;
              *((_OWORD *)v282 - 1) = v283;
              v282 -= 16;
              *v280 = 0;
              v280[1] = 0;
            }
            while (v280 != v281);
            v284 = (int64x2_t)v648;
          }
          v273 = v279 + 16;
          *(_QWORD *)&v648 = v282;
          *((_QWORD *)&v648 + 1) = v279 + 16;
          *(int64x2_t *)&v651[8] = v284;
          v285 = v649;
          v649 = &v277[16 * v278];
          *(_QWORD *)&v651[24] = v285;
          *(_QWORD *)v651 = v284.i64[0];
          v8 = std::__split_buffer<std::shared_ptr<mediaplatform::SQLExpression const>>::~__split_buffer((uint64_t)v651);
        }
        else
        {
          **((_OWORD **)&v648 + 1) = v271;
          v273 = (_OWORD *)(v272 + 16);
          v654 = 0uLL;
        }
        *((_QWORD *)&v648 + 1) = v273;
        v171 = *((_DWORD *)this + 20);
      }
      if ((v171 & 0x4000) != 0)
      {
        v286 = mlcore::ItemPropertyStoreCloudID((mlcore *)v8);
        v287 = (char *)operator new(0x48uLL);
        *(_OWORD *)(v287 + 8) = 0u;
        *(_QWORD *)v287 = &off_24C33CE88;
        *((_QWORD *)v287 + 4) = v286;
        *((_QWORD *)v287 + 5) = 0x100000000;
        *((_QWORD *)v287 + 3) = &unk_24C339CA8;
        *((_QWORD *)v287 + 6) = 0;
        *(_OWORD *)(v287 + 56) = 0u;
        *(_QWORD *)&v647 = v287 + 24;
        *((_QWORD *)&v647 + 1) = v287;
        v288 = v647;
        v654 = v647;
        v647 = 0u;
        v289 = *((_QWORD *)&v648 + 1);
        if (*((_QWORD *)&v648 + 1) >= (unint64_t)v649)
        {
          v603 = v288;
          v291 = (uint64_t)(*((_QWORD *)&v648 + 1) - v648) >> 4;
          if ((unint64_t)(v291 + 1) >> 60)
            std::vector<std::string>::__throw_length_error[abi:ne180100]();
          v292 = (uint64_t)&v649[-v648] >> 3;
          if (v292 <= v291 + 1)
            v292 = v291 + 1;
          if ((unint64_t)&v649[-v648] >= 0x7FFFFFFFFFFFFFF0)
            v293 = 0xFFFFFFFFFFFFFFFLL;
          else
            v293 = v292;
          v652 = &v649;
          v294 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<mediaplatform::DatabaseParameterBase>>>(v293);
          v296 = &v294[16 * v291];
          *(_OWORD *)v296 = v603;
          v654 = 0uLL;
          v297 = (_QWORD *)*((_QWORD *)&v648 + 1);
          v298 = (_QWORD *)v648;
          if (*((_QWORD *)&v648 + 1) == (_QWORD)v648)
          {
            v301 = vdupq_n_s64(*((unint64_t *)&v648 + 1));
            v299 = &v294[16 * v291];
          }
          else
          {
            v299 = &v294[16 * v291];
            do
            {
              v300 = *((_OWORD *)v297 - 1);
              v297 -= 2;
              *((_OWORD *)v299 - 1) = v300;
              v299 -= 16;
              *v297 = 0;
              v297[1] = 0;
            }
            while (v297 != v298);
            v301 = (int64x2_t)v648;
          }
          v290 = v296 + 16;
          *(_QWORD *)&v648 = v299;
          *((_QWORD *)&v648 + 1) = v296 + 16;
          *(int64x2_t *)&v651[8] = v301;
          v302 = v649;
          v649 = &v294[16 * v295];
          *(_QWORD *)&v651[24] = v302;
          *(_QWORD *)v651 = v301.i64[0];
          std::__split_buffer<std::shared_ptr<mediaplatform::SQLExpression const>>::~__split_buffer((uint64_t)v651);
        }
        else
        {
          **((_OWORD **)&v648 + 1) = v288;
          v290 = (_OWORD *)(v289 + 16);
          v654 = 0uLL;
        }
        *((_QWORD *)&v648 + 1) = v290;
      }
      mlcore::ContentRestrictions::_predicate((mlcore::LibraryView *)((char *)this + 48), 0, &v654);
      v303 = (_QWORD *)*((_QWORD *)&v648 + 1);
      if ((_QWORD)v654)
      {
        if (*((_QWORD *)&v648 + 1) >= (unint64_t)v649)
        {
          v307 = (uint64_t)(*((_QWORD *)&v648 + 1) - v648) >> 4;
          if ((unint64_t)(v307 + 1) >> 60)
            std::vector<std::string>::__throw_length_error[abi:ne180100]();
          v308 = (uint64_t)&v649[-v648] >> 3;
          if (v308 <= v307 + 1)
            v308 = v307 + 1;
          if ((unint64_t)&v649[-v648] >= 0x7FFFFFFFFFFFFFF0)
            v309 = 0xFFFFFFFFFFFFFFFLL;
          else
            v309 = v308;
          v652 = &v649;
          v310 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<mediaplatform::DatabaseParameterBase>>>(v309);
          v312 = &v310[16 * v307];
          v313 = *((_QWORD *)&v654 + 1);
          *(_OWORD *)v312 = v654;
          if (v313)
          {
            v314 = (unint64_t *)(v313 + 8);
            do
              v315 = __ldxr(v314);
            while (__stxr(v315 + 1, v314));
          }
          v316 = (_QWORD *)*((_QWORD *)&v648 + 1);
          v317 = (_QWORD *)v648;
          if (*((_QWORD *)&v648 + 1) == (_QWORD)v648)
          {
            v320 = vdupq_n_s64(*((unint64_t *)&v648 + 1));
            v318 = &v310[16 * v307];
          }
          else
          {
            v318 = &v310[16 * v307];
            do
            {
              v319 = *((_OWORD *)v316 - 1);
              v316 -= 2;
              *((_OWORD *)v318 - 1) = v319;
              v318 -= 16;
              *v316 = 0;
              v316[1] = 0;
            }
            while (v316 != v317);
            v320 = (int64x2_t)v648;
          }
          v303 = v312 + 16;
          *(_QWORD *)&v648 = v318;
          *((_QWORD *)&v648 + 1) = v312 + 16;
          *(int64x2_t *)&v651[8] = v320;
          v321 = v649;
          v649 = &v310[16 * v311];
          *(_QWORD *)&v651[24] = v321;
          *(_QWORD *)v651 = v320.i64[0];
          std::__split_buffer<std::shared_ptr<mediaplatform::SQLExpression const>>::~__split_buffer((uint64_t)v651);
        }
        else
        {
          **((_QWORD **)&v648 + 1) = v654;
          v304 = *((_QWORD *)&v654 + 1);
          v303[1] = *((_QWORD *)&v654 + 1);
          if (v304)
          {
            v305 = (unint64_t *)(v304 + 8);
            do
              v306 = __ldxr(v305);
            while (__stxr(v306 + 1, v305));
          }
          v303 += 2;
        }
        *((_QWORD *)&v648 + 1) = v303;
      }
      if (v303 == (_QWORD *)v648)
      {
        *a3 = 0;
        a3[1] = 0;
      }
      else
      {
        memset(v642, 0, sizeof(v642));
        std::vector<std::shared_ptr<mlcore::Predicate>>::__init_with_size[abi:ne180100]<std::shared_ptr<mlcore::Predicate>*,std::shared_ptr<mlcore::Predicate>*>((char *)v642, (_QWORD *)v648, v303, (uint64_t)((uint64_t)v303 - v648) >> 4);
        mlcore::CreateAndPredicate(v642, a3);
        *(_QWORD *)v651 = v642;
        std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__destroy_vector::operator()[abi:ne180100]((void ***)v651);
      }
      v322 = (std::__shared_weak_count *)*((_QWORD *)&v654 + 1);
      if (*((_QWORD *)&v654 + 1))
      {
        v323 = (unint64_t *)(*((_QWORD *)&v654 + 1) + 8);
        do
          v324 = __ldaxr(v323);
        while (__stlxr(v324 - 1, v323));
        if (!v324)
        {
          ((void (*)(std::__shared_weak_count *))v322->__on_zero_shared)(v322);
          std::__shared_weak_count::__release_weak(v322);
        }
      }
      v325 = &v648;
      goto LABEL_619;
    }
  }
  v15 = mlcore::TypedEntityClass<mlcore::PlaylistItem>::sharedPointer();
  if ((mlcore::EntityClass *)v15 == a2)
  {
    v654 = 0uLL;
    *(_QWORD *)&v655 = 0;
    v24 = *((_DWORD *)this + 20);
    if ((v24 & 2) != 0)
    {
      v25 = (mlcore *)mlcore::PlaylistItemPropertyItemPersistentID((mlcore *)v15);
      v26 = mlcore::ItemPropertyIsLocal(v25);
      v641[0] = 0;
      v641[1] = 0;
      Foreign = mlcore::GetForeignProperty<int>((uint64_t)v25, v26, v641);
      v15 = (uint64_t)operator new(0x30uLL);
      *(_OWORD *)(v15 + 8) = 0u;
      *(_QWORD *)v15 = &off_24C33C9F0;
      *(_QWORD *)(v15 + 32) = Foreign;
      *(_DWORD *)(v15 + 40) = 0;
      *(_QWORD *)(v15 + 24) = &unk_24C3377B8;
      *(_QWORD *)&v647 = v15 + 24;
      *((_QWORD *)&v647 + 1) = v15;
      v28 = v647;
      v647 = 0u;
      v648 = v28;
      v29 = *((_QWORD *)&v654 + 1);
      if (*((_QWORD *)&v654 + 1) >= (unint64_t)v655)
      {
        v594 = v28;
        v80 = (uint64_t)(*((_QWORD *)&v654 + 1) - v654) >> 4;
        if ((unint64_t)(v80 + 1) >> 60)
          std::vector<std::string>::__throw_length_error[abi:ne180100]();
        v81 = (uint64_t)(v655 - v654) >> 3;
        if (v81 <= v80 + 1)
          v81 = v80 + 1;
        if ((_QWORD)v655 - (_QWORD)v654 >= 0x7FFFFFFFFFFFFFF0uLL)
          v82 = 0xFFFFFFFFFFFFFFFLL;
        else
          v82 = v81;
        v652 = (char **)&v655;
        v83 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<mediaplatform::DatabaseParameterBase>>>(v82);
        v85 = (__int128 *)&v83[16 * v80];
        *v85 = v594;
        v648 = 0uLL;
        v86 = (_QWORD *)*((_QWORD *)&v654 + 1);
        v87 = (_QWORD *)v654;
        if (*((_QWORD *)&v654 + 1) == (_QWORD)v654)
        {
          v90 = vdupq_n_s64(*((unint64_t *)&v654 + 1));
          v88 = &v83[16 * v80];
        }
        else
        {
          v88 = &v83[16 * v80];
          do
          {
            v89 = *((_OWORD *)v86 - 1);
            v86 -= 2;
            *((_OWORD *)v88 - 1) = v89;
            v88 -= 16;
            *v86 = 0;
            v86[1] = 0;
          }
          while (v86 != v87);
          v90 = (int64x2_t)v654;
        }
        v30 = v85 + 1;
        *(_QWORD *)&v654 = v88;
        *((_QWORD *)&v654 + 1) = v85 + 1;
        *(int64x2_t *)&v651[8] = v90;
        v331 = v655;
        *(_QWORD *)&v655 = &v83[16 * v84];
        *(_QWORD *)&v651[24] = v331;
        *(_QWORD *)v651 = v90.i64[0];
        v15 = std::__split_buffer<std::shared_ptr<mediaplatform::SQLExpression const>>::~__split_buffer((uint64_t)v651);
      }
      else
      {
        **((_OWORD **)&v654 + 1) = v28;
        v30 = (_OWORD *)(v29 + 16);
        v648 = 0uLL;
      }
      *((_QWORD *)&v654 + 1) = v30;
      v24 = *((_DWORD *)this + 20);
    }
    if ((v24 & 8) != 0)
    {
      v332 = (mlcore *)mlcore::PlaylistItemPropertyItemPersistentID((mlcore *)v15);
      v333 = mlcore::ItemPropertyHasNonPurgeableAsset(v332);
      v640[0] = 0;
      v640[1] = 0;
      v334 = mlcore::GetForeignProperty<int>((uint64_t)v332, v333, v640);
      v15 = (uint64_t)operator new(0x30uLL);
      *(_OWORD *)(v15 + 8) = 0u;
      *(_QWORD *)v15 = &off_24C33C9F0;
      *(_QWORD *)(v15 + 32) = v334;
      *(_DWORD *)(v15 + 40) = 0;
      *(_QWORD *)(v15 + 24) = &unk_24C3377B8;
      *(_QWORD *)&v647 = v15 + 24;
      *((_QWORD *)&v647 + 1) = v15;
      v335 = v647;
      v647 = 0u;
      v648 = v335;
      v336 = *((_QWORD *)&v654 + 1);
      if (*((_QWORD *)&v654 + 1) >= (unint64_t)v655)
      {
        v604 = v335;
        v338 = (uint64_t)(*((_QWORD *)&v654 + 1) - v654) >> 4;
        if ((unint64_t)(v338 + 1) >> 60)
          std::vector<std::string>::__throw_length_error[abi:ne180100]();
        v339 = (uint64_t)(v655 - v654) >> 3;
        if (v339 <= v338 + 1)
          v339 = v338 + 1;
        if ((_QWORD)v655 - (_QWORD)v654 >= 0x7FFFFFFFFFFFFFF0uLL)
          v340 = 0xFFFFFFFFFFFFFFFLL;
        else
          v340 = v339;
        v652 = (char **)&v655;
        v341 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<mediaplatform::DatabaseParameterBase>>>(v340);
        v343 = (__int128 *)&v341[16 * v338];
        *v343 = v604;
        v648 = 0uLL;
        v344 = (_QWORD *)*((_QWORD *)&v654 + 1);
        v345 = (_QWORD *)v654;
        if (*((_QWORD *)&v654 + 1) == (_QWORD)v654)
        {
          v348 = vdupq_n_s64(*((unint64_t *)&v654 + 1));
          v346 = &v341[16 * v338];
        }
        else
        {
          v346 = &v341[16 * v338];
          do
          {
            v347 = *((_OWORD *)v344 - 1);
            v344 -= 2;
            *((_OWORD *)v346 - 1) = v347;
            v346 -= 16;
            *v344 = 0;
            v344[1] = 0;
          }
          while (v344 != v345);
          v348 = (int64x2_t)v654;
        }
        v337 = v343 + 1;
        *(_QWORD *)&v654 = v346;
        *((_QWORD *)&v654 + 1) = v343 + 1;
        *(int64x2_t *)&v651[8] = v348;
        v349 = v655;
        *(_QWORD *)&v655 = &v341[16 * v342];
        *(_QWORD *)&v651[24] = v349;
        *(_QWORD *)v651 = v348.i64[0];
        v15 = std::__split_buffer<std::shared_ptr<mediaplatform::SQLExpression const>>::~__split_buffer((uint64_t)v651);
      }
      else
      {
        **((_OWORD **)&v654 + 1) = v335;
        v337 = (_OWORD *)(v336 + 16);
        v648 = 0uLL;
      }
      *((_QWORD *)&v654 + 1) = v337;
      v24 = *((_DWORD *)this + 20);
    }
    if ((v24 & 0x10) != 0)
    {
      v350 = (mlcore *)mlcore::PlaylistItemPropertyItemPersistentID((mlcore *)v15);
      v351 = mlcore::ItemPropertyLikedState(v350);
      v639[0] = 0;
      v639[1] = 0;
      v352 = mlcore::GetForeignProperty<int>((uint64_t)v350, v351, v639);
      v15 = (uint64_t)operator new(0x48uLL);
      *(_OWORD *)(v15 + 8) = 0u;
      *(_QWORD *)v15 = &off_24C33CE50;
      *(_QWORD *)(v15 + 32) = v352;
      *(_QWORD *)(v15 + 40) = 0;
      *(_QWORD *)(v15 + 24) = &unk_24C339C50;
      *(_DWORD *)(v15 + 48) = 2;
      *(_OWORD *)(v15 + 56) = 0u;
      *(_QWORD *)&v647 = v15 + 24;
      *((_QWORD *)&v647 + 1) = v15;
      v353 = v647;
      v647 = 0u;
      v648 = v353;
      v354 = *((_QWORD *)&v654 + 1);
      if (*((_QWORD *)&v654 + 1) >= (unint64_t)v655)
      {
        v605 = v353;
        v356 = (uint64_t)(*((_QWORD *)&v654 + 1) - v654) >> 4;
        if ((unint64_t)(v356 + 1) >> 60)
          std::vector<std::string>::__throw_length_error[abi:ne180100]();
        v357 = (uint64_t)(v655 - v654) >> 3;
        if (v357 <= v356 + 1)
          v357 = v356 + 1;
        if ((_QWORD)v655 - (_QWORD)v654 >= 0x7FFFFFFFFFFFFFF0uLL)
          v358 = 0xFFFFFFFFFFFFFFFLL;
        else
          v358 = v357;
        v652 = (char **)&v655;
        v359 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<mediaplatform::DatabaseParameterBase>>>(v358);
        v361 = (__int128 *)&v359[16 * v356];
        *v361 = v605;
        v648 = 0uLL;
        v362 = (_QWORD *)*((_QWORD *)&v654 + 1);
        v363 = (_QWORD *)v654;
        if (*((_QWORD *)&v654 + 1) == (_QWORD)v654)
        {
          v366 = vdupq_n_s64(*((unint64_t *)&v654 + 1));
          v364 = &v359[16 * v356];
        }
        else
        {
          v364 = &v359[16 * v356];
          do
          {
            v365 = *((_OWORD *)v362 - 1);
            v362 -= 2;
            *((_OWORD *)v364 - 1) = v365;
            v364 -= 16;
            *v362 = 0;
            v362[1] = 0;
          }
          while (v362 != v363);
          v366 = (int64x2_t)v654;
        }
        v355 = v361 + 1;
        *(_QWORD *)&v654 = v364;
        *((_QWORD *)&v654 + 1) = v361 + 1;
        *(int64x2_t *)&v651[8] = v366;
        v367 = v655;
        *(_QWORD *)&v655 = &v359[16 * v360];
        *(_QWORD *)&v651[24] = v367;
        *(_QWORD *)v651 = v366.i64[0];
        v15 = std::__split_buffer<std::shared_ptr<mediaplatform::SQLExpression const>>::~__split_buffer((uint64_t)v651);
      }
      else
      {
        **((_OWORD **)&v654 + 1) = v353;
        v355 = (_OWORD *)(v354 + 16);
        v648 = 0uLL;
      }
      *((_QWORD *)&v654 + 1) = v355;
      v24 = *((_DWORD *)this + 20);
    }
    if ((v24 & 0x200) != 0)
    {
      v368 = (mlcore *)mlcore::PlaylistItemPropertyItemPersistentID((mlcore *)v15);
      v369 = mlcore::ItemPropertyIsProtected(v368);
      v638[0] = 0;
      v638[1] = 0;
      v370 = mlcore::GetForeignProperty<long long>((uint64_t)v368, v369, v638);
      v15 = (uint64_t)operator new(0x48uLL);
      *(_OWORD *)(v15 + 8) = 0u;
      *(_QWORD *)v15 = &off_24C33CE88;
      *(_QWORD *)(v15 + 32) = v370;
      *(_QWORD *)(v15 + 40) = 0;
      *(_QWORD *)(v15 + 24) = &unk_24C339CA8;
      *(_QWORD *)(v15 + 48) = 0;
      *(_OWORD *)(v15 + 56) = 0u;
      *(_QWORD *)&v647 = v15 + 24;
      *((_QWORD *)&v647 + 1) = v15;
      v371 = v647;
      v647 = 0u;
      v648 = v371;
      v372 = *((_QWORD *)&v654 + 1);
      if (*((_QWORD *)&v654 + 1) >= (unint64_t)v655)
      {
        v606 = v371;
        v374 = (uint64_t)(*((_QWORD *)&v654 + 1) - v654) >> 4;
        if ((unint64_t)(v374 + 1) >> 60)
          std::vector<std::string>::__throw_length_error[abi:ne180100]();
        v375 = (uint64_t)(v655 - v654) >> 3;
        if (v375 <= v374 + 1)
          v375 = v374 + 1;
        if ((_QWORD)v655 - (_QWORD)v654 >= 0x7FFFFFFFFFFFFFF0uLL)
          v376 = 0xFFFFFFFFFFFFFFFLL;
        else
          v376 = v375;
        v652 = (char **)&v655;
        v377 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<mediaplatform::DatabaseParameterBase>>>(v376);
        v379 = (__int128 *)&v377[16 * v374];
        *v379 = v606;
        v648 = 0uLL;
        v380 = (_QWORD *)*((_QWORD *)&v654 + 1);
        v381 = (_QWORD *)v654;
        if (*((_QWORD *)&v654 + 1) == (_QWORD)v654)
        {
          v384 = vdupq_n_s64(*((unint64_t *)&v654 + 1));
          v382 = &v377[16 * v374];
        }
        else
        {
          v382 = &v377[16 * v374];
          do
          {
            v383 = *((_OWORD *)v380 - 1);
            v380 -= 2;
            *((_OWORD *)v382 - 1) = v383;
            v382 -= 16;
            *v380 = 0;
            v380[1] = 0;
          }
          while (v380 != v381);
          v384 = (int64x2_t)v654;
        }
        v373 = v379 + 1;
        *(_QWORD *)&v654 = v382;
        *((_QWORD *)&v654 + 1) = v379 + 1;
        *(int64x2_t *)&v651[8] = v384;
        v385 = v655;
        *(_QWORD *)&v655 = &v377[16 * v378];
        *(_QWORD *)&v651[24] = v385;
        *(_QWORD *)v651 = v384.i64[0];
        v15 = std::__split_buffer<std::shared_ptr<mediaplatform::SQLExpression const>>::~__split_buffer((uint64_t)v651);
      }
      else
      {
        **((_OWORD **)&v654 + 1) = v371;
        v373 = (_OWORD *)(v372 + 16);
        v648 = 0uLL;
      }
      *((_QWORD *)&v654 + 1) = v373;
      v24 = *((_DWORD *)this + 20);
    }
    if ((v24 & 0x1000) != 0)
    {
      v386 = (mlcore *)mlcore::PlaylistItemPropertyItemPersistentID((mlcore *)v15);
      v387 = mlcore::ItemPropertyLikedState(v386);
      v637[0] = 0;
      v637[1] = 0;
      v388 = mlcore::GetForeignProperty<int>((uint64_t)v386, v387, v637);
      v15 = (uint64_t)operator new(0x48uLL);
      *(_OWORD *)(v15 + 8) = 0u;
      *(_QWORD *)v15 = &off_24C33CE50;
      *(_QWORD *)(v15 + 32) = v388;
      *(_QWORD *)(v15 + 40) = 0;
      *(_QWORD *)(v15 + 24) = &unk_24C339C50;
      *(_DWORD *)(v15 + 48) = 2;
      *(_OWORD *)(v15 + 56) = 0u;
      *(_QWORD *)&v647 = v15 + 24;
      *((_QWORD *)&v647 + 1) = v15;
      v389 = v647;
      v647 = 0u;
      v648 = v389;
      v390 = *((_QWORD *)&v654 + 1);
      if (*((_QWORD *)&v654 + 1) >= (unint64_t)v655)
      {
        v607 = v389;
        v392 = (uint64_t)(*((_QWORD *)&v654 + 1) - v654) >> 4;
        if ((unint64_t)(v392 + 1) >> 60)
          std::vector<std::string>::__throw_length_error[abi:ne180100]();
        v393 = (uint64_t)(v655 - v654) >> 3;
        if (v393 <= v392 + 1)
          v393 = v392 + 1;
        if ((_QWORD)v655 - (_QWORD)v654 >= 0x7FFFFFFFFFFFFFF0uLL)
          v394 = 0xFFFFFFFFFFFFFFFLL;
        else
          v394 = v393;
        v652 = (char **)&v655;
        v395 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<mediaplatform::DatabaseParameterBase>>>(v394);
        v397 = (__int128 *)&v395[16 * v392];
        *v397 = v607;
        v648 = 0uLL;
        v398 = (_QWORD *)*((_QWORD *)&v654 + 1);
        v399 = (_QWORD *)v654;
        if (*((_QWORD *)&v654 + 1) == (_QWORD)v654)
        {
          v402 = vdupq_n_s64(*((unint64_t *)&v654 + 1));
          v400 = &v395[16 * v392];
        }
        else
        {
          v400 = &v395[16 * v392];
          do
          {
            v401 = *((_OWORD *)v398 - 1);
            v398 -= 2;
            *((_OWORD *)v400 - 1) = v401;
            v400 -= 16;
            *v398 = 0;
            v398[1] = 0;
          }
          while (v398 != v399);
          v402 = (int64x2_t)v654;
        }
        v391 = v397 + 1;
        *(_QWORD *)&v654 = v400;
        *((_QWORD *)&v654 + 1) = v397 + 1;
        *(int64x2_t *)&v651[8] = v402;
        v403 = v655;
        *(_QWORD *)&v655 = &v395[16 * v396];
        *(_QWORD *)&v651[24] = v403;
        *(_QWORD *)v651 = v402.i64[0];
        v15 = std::__split_buffer<std::shared_ptr<mediaplatform::SQLExpression const>>::~__split_buffer((uint64_t)v651);
      }
      else
      {
        **((_OWORD **)&v654 + 1) = v389;
        v391 = (_OWORD *)(v390 + 16);
        v648 = 0uLL;
      }
      *((_QWORD *)&v654 + 1) = v391;
      v24 = *((_DWORD *)this + 20);
    }
    if ((v24 & 0x4000) != 0)
    {
      v404 = (mlcore *)mlcore::PlaylistItemPropertyItemPersistentID((mlcore *)v15);
      HasCloudLibraryID = mlcore::ItemPropertyHasCloudLibraryID(v404);
      v636[0] = 0;
      v636[1] = 0;
      v406 = mlcore::GetForeignProperty<int>((uint64_t)v404, HasCloudLibraryID, v636);
      v407 = (char *)operator new(0x30uLL);
      *(_OWORD *)(v407 + 8) = 0u;
      *(_QWORD *)v407 = &off_24C33C9F0;
      *((_QWORD *)v407 + 4) = v406;
      *((_DWORD *)v407 + 10) = 0;
      *((_QWORD *)v407 + 3) = &unk_24C3377B8;
      *(_QWORD *)&v647 = v407 + 24;
      *((_QWORD *)&v647 + 1) = v407;
      v408 = v647;
      v647 = 0u;
      v648 = v408;
      v409 = *((_QWORD *)&v654 + 1);
      if (*((_QWORD *)&v654 + 1) >= (unint64_t)v655)
      {
        v608 = v408;
        v411 = (uint64_t)(*((_QWORD *)&v654 + 1) - v654) >> 4;
        if ((unint64_t)(v411 + 1) >> 60)
          std::vector<std::string>::__throw_length_error[abi:ne180100]();
        v412 = (uint64_t)(v655 - v654) >> 3;
        if (v412 <= v411 + 1)
          v412 = v411 + 1;
        if ((_QWORD)v655 - (_QWORD)v654 >= 0x7FFFFFFFFFFFFFF0uLL)
          v413 = 0xFFFFFFFFFFFFFFFLL;
        else
          v413 = v412;
        v652 = (char **)&v655;
        v414 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<mediaplatform::DatabaseParameterBase>>>(v413);
        v416 = (__int128 *)&v414[16 * v411];
        *v416 = v608;
        v648 = 0uLL;
        v417 = (_QWORD *)*((_QWORD *)&v654 + 1);
        v418 = (_QWORD *)v654;
        if (*((_QWORD *)&v654 + 1) == (_QWORD)v654)
        {
          v421 = vdupq_n_s64(*((unint64_t *)&v654 + 1));
          v419 = &v414[16 * v411];
        }
        else
        {
          v419 = &v414[16 * v411];
          do
          {
            v420 = *((_OWORD *)v417 - 1);
            v417 -= 2;
            *((_OWORD *)v419 - 1) = v420;
            v419 -= 16;
            *v417 = 0;
            v417[1] = 0;
          }
          while (v417 != v418);
          v421 = (int64x2_t)v654;
        }
        v410 = v416 + 1;
        *(_QWORD *)&v654 = v419;
        *((_QWORD *)&v654 + 1) = v416 + 1;
        *(int64x2_t *)&v651[8] = v421;
        v422 = v655;
        *(_QWORD *)&v655 = &v414[16 * v415];
        *(_QWORD *)&v651[24] = v422;
        *(_QWORD *)v651 = v421.i64[0];
        std::__split_buffer<std::shared_ptr<mediaplatform::SQLExpression const>>::~__split_buffer((uint64_t)v651);
      }
      else
      {
        **((_OWORD **)&v654 + 1) = v408;
        v410 = (_OWORD *)(v409 + 16);
        v648 = 0uLL;
      }
      *((_QWORD *)&v654 + 1) = v410;
    }
    mlcore::ContentRestrictions::_predicate((mlcore::LibraryView *)((char *)this + 48), 1, &v648);
    v423 = (_QWORD *)*((_QWORD *)&v654 + 1);
    if ((_QWORD)v648)
    {
      if (*((_QWORD *)&v654 + 1) >= (unint64_t)v655)
      {
        v427 = (uint64_t)(*((_QWORD *)&v654 + 1) - v654) >> 4;
        if ((unint64_t)(v427 + 1) >> 60)
          std::vector<std::string>::__throw_length_error[abi:ne180100]();
        v428 = (uint64_t)(v655 - v654) >> 3;
        if (v428 <= v427 + 1)
          v428 = v427 + 1;
        if ((_QWORD)v655 - (_QWORD)v654 >= 0x7FFFFFFFFFFFFFF0uLL)
          v429 = 0xFFFFFFFFFFFFFFFLL;
        else
          v429 = v428;
        v652 = (char **)&v655;
        v430 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<mediaplatform::DatabaseParameterBase>>>(v429);
        v432 = &v430[16 * v427];
        v433 = *((_QWORD *)&v648 + 1);
        *(_OWORD *)v432 = v648;
        if (v433)
        {
          v434 = (unint64_t *)(v433 + 8);
          do
            v435 = __ldxr(v434);
          while (__stxr(v435 + 1, v434));
        }
        v436 = (_QWORD *)*((_QWORD *)&v654 + 1);
        v437 = (_QWORD *)v654;
        if (*((_QWORD *)&v654 + 1) == (_QWORD)v654)
        {
          v440 = vdupq_n_s64(*((unint64_t *)&v654 + 1));
          v438 = &v430[16 * v427];
        }
        else
        {
          v438 = &v430[16 * v427];
          do
          {
            v439 = *((_OWORD *)v436 - 1);
            v436 -= 2;
            *((_OWORD *)v438 - 1) = v439;
            v438 -= 16;
            *v436 = 0;
            v436[1] = 0;
          }
          while (v436 != v437);
          v440 = (int64x2_t)v654;
        }
        v423 = v432 + 16;
        *(_QWORD *)&v654 = v438;
        *((_QWORD *)&v654 + 1) = v432 + 16;
        *(int64x2_t *)&v651[8] = v440;
        v441 = v655;
        *(_QWORD *)&v655 = &v430[16 * v431];
        *(_QWORD *)&v651[24] = v441;
        *(_QWORD *)v651 = v440.i64[0];
        std::__split_buffer<std::shared_ptr<mediaplatform::SQLExpression const>>::~__split_buffer((uint64_t)v651);
      }
      else
      {
        **((_QWORD **)&v654 + 1) = v648;
        v424 = *((_QWORD *)&v648 + 1);
        v423[1] = *((_QWORD *)&v648 + 1);
        if (v424)
        {
          v425 = (unint64_t *)(v424 + 8);
          do
            v426 = __ldxr(v425);
          while (__stxr(v426 + 1, v425));
        }
        v423 += 2;
      }
      *((_QWORD *)&v654 + 1) = v423;
    }
    if (v423 == (_QWORD *)v654)
    {
      *a3 = 0;
      a3[1] = 0;
    }
    else
    {
      memset(v635, 0, sizeof(v635));
      std::vector<std::shared_ptr<mlcore::Predicate>>::__init_with_size[abi:ne180100]<std::shared_ptr<mlcore::Predicate>*,std::shared_ptr<mlcore::Predicate>*>((char *)v635, (_QWORD *)v654, v423, (uint64_t)((uint64_t)v423 - v654) >> 4);
      mlcore::CreateAndPredicate(v635, a3);
      *(_QWORD *)v651 = v635;
      std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__destroy_vector::operator()[abi:ne180100]((void ***)v651);
    }
    v442 = (std::__shared_weak_count *)*((_QWORD *)&v648 + 1);
    if (*((_QWORD *)&v648 + 1))
    {
      v443 = (unint64_t *)(*((_QWORD *)&v648 + 1) + 8);
      do
        v444 = __ldaxr(v443);
      while (__stlxr(v444 - 1, v443));
      if (!v444)
      {
        ((void (*)(std::__shared_weak_count *))v442->__on_zero_shared)(v442);
        std::__shared_weak_count::__release_weak(v442);
      }
    }
    goto LABEL_618;
  }
  v16 = mlcore::TypedEntityClass<mlcore::Album>::sharedPointer();
  if ((mlcore::EntityClass *)v16 == a2)
  {
    v654 = 0uLL;
    *(_QWORD *)&v655 = 0;
    v31 = *((_DWORD *)this + 20);
    if ((v31 & 4) != 0)
    {
      v32 = (mlcore *)mlcore::AlbumPropertyPersistentID((mlcore *)v16);
      v33 = mlcore::ItemPropertyAlbumPersistentID(v32);
      v34 = (std::__shared_weak_count *)operator new(0x38uLL);
      v34->__shared_owners_ = 0;
      p_shared_owners = (unint64_t *)&v34->__shared_owners_;
      v34->__shared_weak_owners_ = 0;
      v34->__vftable = (std::__shared_weak_count_vtbl *)&off_24C33D240;
      v34[1].__vftable = (std::__shared_weak_count_vtbl *)&off_24C33A5A8;
      v34[1].__shared_owners_ = (uint64_t)v32;
      v34[1].__shared_weak_owners_ = 0;
      v34[2].__vftable = (std::__shared_weak_count_vtbl *)v33;
      *(_QWORD *)&v648 = v34 + 1;
      *((_QWORD *)&v648 + 1) = v34;
      v36 = mlcore::TypedEntityClass<mlcore::Item>::sharedPointer();
      v633 = &v34[1].__vftable;
      v634 = v34;
      do
        v37 = __ldxr(p_shared_owners);
      while (__stxr(v37 + 1, p_shared_owners));
      v38 = mlcore::TypedEntityClass<mlcore::Item>::sharedPointer();
      mlcore::LibraryView::_predicateByApplyingFilters(v651, this, &v633, v38);
      std::allocate_shared[abi:ne180100]<mlcore::Query,std::allocator<mlcore::Query>,mlcore::EntityClass *,std::shared_ptr<mlcore::Predicate>,void>(&v647, v36, (__int128 *)v651);
      v39 = *(std::__shared_weak_count **)&v651[8];
      if (*(_QWORD *)&v651[8])
      {
        v40 = (unint64_t *)(*(_QWORD *)&v651[8] + 8);
        do
          v41 = __ldaxr(v40);
        while (__stlxr(v41 - 1, v40));
        if (!v41)
        {
          ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
          std::__shared_weak_count::__release_weak(v39);
        }
      }
      v42 = v634;
      if (v634)
      {
        v43 = (unint64_t *)&v634->__shared_owners_;
        do
          v44 = __ldaxr(v43);
        while (__stlxr(v44 - 1, v43));
        if (!v44)
        {
          ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
          std::__shared_weak_count::__release_weak(v42);
        }
      }
      v45 = (std::__shared_weak_count *)*((_QWORD *)&v647 + 1);
      std::allocate_shared[abi:ne180100]<mlcore::ExistsPredicate,std::allocator<mlcore::ExistsPredicate>,std::shared_ptr<mlcore::Query> &,void>(&v643, v647, *((std::__shared_weak_count **)&v647 + 1));
      v46 = v643;
      v644 = v643;
      v643 = 0uLL;
      v47 = *((_QWORD *)&v654 + 1);
      if (*((_QWORD *)&v654 + 1) >= (unint64_t)v655)
      {
        v595 = v46;
        v127 = (uint64_t)(*((_QWORD *)&v654 + 1) - v654) >> 4;
        if ((unint64_t)(v127 + 1) >> 60)
          std::vector<std::string>::__throw_length_error[abi:ne180100]();
        v128 = (uint64_t)(v655 - v654) >> 3;
        if (v128 <= v127 + 1)
          v128 = v127 + 1;
        if ((_QWORD)v655 - (_QWORD)v654 >= 0x7FFFFFFFFFFFFFF0uLL)
          v129 = 0xFFFFFFFFFFFFFFFLL;
        else
          v129 = v128;
        v652 = (char **)&v655;
        v130 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<mediaplatform::DatabaseParameterBase>>>(v129);
        v132 = &v130[16 * v127];
        *(_OWORD *)v132 = v595;
        v644 = 0uLL;
        v133 = (_QWORD *)*((_QWORD *)&v654 + 1);
        v134 = (_QWORD *)v654;
        if (*((_QWORD *)&v654 + 1) == (_QWORD)v654)
        {
          v137 = vdupq_n_s64(*((unint64_t *)&v654 + 1));
          v135 = &v130[16 * v127];
        }
        else
        {
          v135 = &v130[16 * v127];
          do
          {
            v136 = *((_OWORD *)v133 - 1);
            v133 -= 2;
            *((_OWORD *)v135 - 1) = v136;
            v135 -= 16;
            *v133 = 0;
            v133[1] = 0;
          }
          while (v133 != v134);
          v137 = (int64x2_t)v654;
        }
        v48 = v132 + 16;
        *(_QWORD *)&v654 = v135;
        *((_QWORD *)&v654 + 1) = v132 + 16;
        *(int64x2_t *)&v651[8] = v137;
        v507 = v655;
        *(_QWORD *)&v655 = &v130[16 * v131];
        *(_QWORD *)&v651[24] = v507;
        *(_QWORD *)v651 = v137.i64[0];
        v16 = std::__split_buffer<std::shared_ptr<mediaplatform::SQLExpression const>>::~__split_buffer((uint64_t)v651);
      }
      else
      {
        **((_OWORD **)&v654 + 1) = v46;
        v48 = (_OWORD *)(v47 + 16);
        v644 = 0uLL;
      }
      *((_QWORD *)&v654 + 1) = v48;
      if (v45)
      {
        v508 = (unint64_t *)&v45->__shared_owners_;
        do
          v509 = __ldaxr(v508);
        while (__stlxr(v509 - 1, v508));
        if (!v509)
        {
          ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
          std::__shared_weak_count::__release_weak(v45);
        }
      }
      v510 = (std::__shared_weak_count *)*((_QWORD *)&v648 + 1);
      if (*((_QWORD *)&v648 + 1))
      {
        v511 = (unint64_t *)(*((_QWORD *)&v648 + 1) + 8);
        do
          v512 = __ldaxr(v511);
        while (__stlxr(v512 - 1, v511));
        if (!v512)
        {
          ((void (*)(std::__shared_weak_count *))v510->__on_zero_shared)(v510);
          std::__shared_weak_count::__release_weak(v510);
        }
      }
      v31 = *((_DWORD *)this + 20);
    }
    if ((v31 & 0x800) != 0)
    {
      IsKeepLocalEnabled = mlcore::AlbumPropertyIsKeepLocalEnabled((mlcore *)v16);
      v16 = (uint64_t)operator new(0x30uLL);
      *(_OWORD *)(v16 + 8) = 0u;
      *(_QWORD *)v16 = &off_24C33C9F0;
      *(_QWORD *)(v16 + 32) = IsKeepLocalEnabled;
      *(_DWORD *)(v16 + 40) = 0;
      *(_QWORD *)(v16 + 24) = &unk_24C3377B8;
      *(_QWORD *)&v647 = v16 + 24;
      *((_QWORD *)&v647 + 1) = v16;
      v514 = v647;
      v647 = 0u;
      v648 = v514;
      v515 = *((_QWORD *)&v654 + 1);
      if (*((_QWORD *)&v654 + 1) >= (unint64_t)v655)
      {
        v609 = v514;
        v517 = (uint64_t)(*((_QWORD *)&v654 + 1) - v654) >> 4;
        if ((unint64_t)(v517 + 1) >> 60)
          std::vector<std::string>::__throw_length_error[abi:ne180100]();
        v518 = (uint64_t)(v655 - v654) >> 3;
        if (v518 <= v517 + 1)
          v518 = v517 + 1;
        if ((_QWORD)v655 - (_QWORD)v654 >= 0x7FFFFFFFFFFFFFF0uLL)
          v519 = 0xFFFFFFFFFFFFFFFLL;
        else
          v519 = v518;
        v652 = (char **)&v655;
        v520 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<mediaplatform::DatabaseParameterBase>>>(v519);
        v522 = (__int128 *)&v520[16 * v517];
        *v522 = v609;
        v648 = 0uLL;
        v523 = (_QWORD *)*((_QWORD *)&v654 + 1);
        v524 = (_QWORD *)v654;
        if (*((_QWORD *)&v654 + 1) == (_QWORD)v654)
        {
          v527 = vdupq_n_s64(*((unint64_t *)&v654 + 1));
          v525 = &v520[16 * v517];
        }
        else
        {
          v525 = &v520[16 * v517];
          do
          {
            v526 = *((_OWORD *)v523 - 1);
            v523 -= 2;
            *((_OWORD *)v525 - 1) = v526;
            v525 -= 16;
            *v523 = 0;
            v523[1] = 0;
          }
          while (v523 != v524);
          v527 = (int64x2_t)v654;
        }
        v516 = v522 + 1;
        *(_QWORD *)&v654 = v525;
        *((_QWORD *)&v654 + 1) = v522 + 1;
        *(int64x2_t *)&v651[8] = v527;
        v528 = v655;
        *(_QWORD *)&v655 = &v520[16 * v521];
        *(_QWORD *)&v651[24] = v528;
        *(_QWORD *)v651 = v527.i64[0];
        v16 = std::__split_buffer<std::shared_ptr<mediaplatform::SQLExpression const>>::~__split_buffer((uint64_t)v651);
      }
      else
      {
        **((_OWORD **)&v654 + 1) = v514;
        v516 = (_OWORD *)(v515 + 16);
        v648 = 0uLL;
      }
      *((_QWORD *)&v654 + 1) = v516;
      v31 = *((_DWORD *)this + 20);
    }
    if ((v31 & 0x2000) != 0)
    {
      v530 = mlcore::AlbumPropertyLikedState((mlcore *)v16);
      v531 = (char *)operator new(0x48uLL);
      *(_OWORD *)(v531 + 8) = 0u;
      *(_QWORD *)v531 = &off_24C33CE50;
      *((_QWORD *)v531 + 4) = v530;
      *((_QWORD *)v531 + 5) = 0;
      *((_QWORD *)v531 + 3) = &unk_24C339C50;
      *((_DWORD *)v531 + 12) = 2;
      *(_OWORD *)(v531 + 56) = 0u;
      *(_QWORD *)&v647 = v531 + 24;
      *((_QWORD *)&v647 + 1) = v531;
      v532 = v647;
      v647 = 0u;
      v648 = v532;
      v533 = *((_QWORD *)&v654 + 1);
      if (*((_QWORD *)&v654 + 1) >= (unint64_t)v655)
      {
        v610 = v532;
        v534 = (uint64_t)(*((_QWORD *)&v654 + 1) - v654) >> 4;
        if ((unint64_t)(v534 + 1) >> 60)
          std::vector<std::string>::__throw_length_error[abi:ne180100]();
        v535 = (uint64_t)(v655 - v654) >> 3;
        if (v535 <= v534 + 1)
          v535 = v534 + 1;
        if ((_QWORD)v655 - (_QWORD)v654 >= 0x7FFFFFFFFFFFFFF0uLL)
          v536 = 0xFFFFFFFFFFFFFFFLL;
        else
          v536 = v535;
        v652 = (char **)&v655;
        v537 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<mediaplatform::DatabaseParameterBase>>>(v536);
        v539 = (__int128 *)&v537[16 * v534];
        *v539 = v610;
        v648 = 0uLL;
        v540 = (_QWORD *)*((_QWORD *)&v654 + 1);
        v541 = (_QWORD *)v654;
        if (*((_QWORD *)&v654 + 1) == (_QWORD)v654)
        {
          v544 = vdupq_n_s64(*((unint64_t *)&v654 + 1));
          v542 = &v537[16 * v534];
        }
        else
        {
          v542 = &v537[16 * v534];
          do
          {
            v543 = *((_OWORD *)v540 - 1);
            v540 -= 2;
            *((_OWORD *)v542 - 1) = v543;
            v542 -= 16;
            *v540 = 0;
            v540[1] = 0;
          }
          while (v540 != v541);
          v544 = (int64x2_t)v654;
        }
        v529 = v539 + 1;
        *(_QWORD *)&v654 = v542;
        *((_QWORD *)&v654 + 1) = v539 + 1;
        *(int64x2_t *)&v651[8] = v544;
        v545 = v655;
        *(_QWORD *)&v655 = &v537[16 * v538];
        *(_QWORD *)&v651[24] = v545;
        *(_QWORD *)v651 = v544.i64[0];
        std::__split_buffer<std::shared_ptr<mediaplatform::SQLExpression const>>::~__split_buffer((uint64_t)v651);
      }
      else
      {
        **((_OWORD **)&v654 + 1) = v532;
        v529 = (_QWORD *)(v533 + 16);
        v648 = 0uLL;
      }
      *((_QWORD *)&v654 + 1) = v529;
    }
    else
    {
      v529 = (_QWORD *)*((_QWORD *)&v654 + 1);
    }
    if (v529 != (_QWORD *)v654)
    {
      memset(v632, 0, sizeof(v632));
      std::vector<std::shared_ptr<mlcore::Predicate>>::__init_with_size[abi:ne180100]<std::shared_ptr<mlcore::Predicate>*,std::shared_ptr<mlcore::Predicate>*>((char *)v632, (_QWORD *)v654, v529, (uint64_t)((uint64_t)v529 - v654) >> 4);
      v482 = v632;
      mlcore::CreateAndPredicate(v632, a3);
      goto LABEL_616;
    }
LABEL_617:
    *a3 = 0;
    a3[1] = 0;
    goto LABEL_618;
  }
  v17 = (mlcore *)mlcore::TypedEntityClass<mlcore::Podcast>::sharedPointer();
  if (v17 == a2 && (*((_BYTE *)this + 80) & 4) != 0)
  {
    v91 = (mlcore *)mlcore::AlbumPropertyPersistentID(v17);
    v92 = mlcore::ItemPropertyAlbumPersistentID(v91);
    v93 = (std::__shared_weak_count *)operator new(0x38uLL);
    v93->__shared_owners_ = 0;
    v94 = (unint64_t *)&v93->__shared_owners_;
    v93->__shared_weak_owners_ = 0;
    v93->__vftable = (std::__shared_weak_count_vtbl *)&off_24C33D240;
    v93[1].__vftable = (std::__shared_weak_count_vtbl *)&off_24C33A5A8;
    v93[1].__shared_owners_ = (uint64_t)v91;
    v93[1].__shared_weak_owners_ = 0;
    v93[2].__vftable = (std::__shared_weak_count_vtbl *)v92;
    *(_QWORD *)v651 = v93 + 1;
    *(_QWORD *)&v651[8] = v93;
    v95 = mlcore::TypedEntityClass<mlcore::PodcastEpisode>::sharedPointer();
    v630 = &v93[1].__vftable;
    v631 = v93;
    do
      v96 = __ldxr(v94);
    while (__stxr(v96 + 1, v94));
    v97 = mlcore::TypedEntityClass<mlcore::PodcastEpisode>::sharedPointer();
    mlcore::LibraryView::_predicateByApplyingFilters(&v648, this, &v630, v97);
    std::allocate_shared[abi:ne180100]<mlcore::Query,std::allocator<mlcore::Query>,mlcore::EntityClass *,std::shared_ptr<mlcore::Predicate>,void>(&v654, v95, &v648);
    v98 = (std::__shared_weak_count *)*((_QWORD *)&v648 + 1);
    if (*((_QWORD *)&v648 + 1))
    {
      v99 = (unint64_t *)(*((_QWORD *)&v648 + 1) + 8);
      do
        v100 = __ldaxr(v99);
      while (__stlxr(v100 - 1, v99));
      if (!v100)
      {
        ((void (*)(std::__shared_weak_count *))v98->__on_zero_shared)(v98);
        std::__shared_weak_count::__release_weak(v98);
      }
    }
    v101 = v631;
    if (v631)
    {
      v102 = (unint64_t *)&v631->__shared_owners_;
      do
        v103 = __ldaxr(v102);
      while (__stlxr(v103 - 1, v102));
      if (!v103)
      {
        ((void (*)(std::__shared_weak_count *))v101->__on_zero_shared)(v101);
        std::__shared_weak_count::__release_weak(v101);
      }
    }
    v104 = (std::__shared_weak_count *)*((_QWORD *)&v654 + 1);
    std::allocate_shared[abi:ne180100]<mlcore::ExistsPredicate,std::allocator<mlcore::ExistsPredicate>,std::shared_ptr<mlcore::Query> &,void>(&v648, v654, *((std::__shared_weak_count **)&v654 + 1));
    *(_OWORD *)a3 = v648;
    if (v104)
    {
      v105 = (unint64_t *)&v104->__shared_owners_;
      do
        v106 = __ldaxr(v105);
      while (__stlxr(v106 - 1, v105));
      if (!v106)
      {
        ((void (*)(std::__shared_weak_count *))v104->__on_zero_shared)(v104);
        std::__shared_weak_count::__release_weak(v104);
      }
    }
    v107 = *(std::__shared_weak_count **)&v651[8];
    if (!*(_QWORD *)&v651[8])
      return;
    v108 = (unint64_t *)(*(_QWORD *)&v651[8] + 8);
    do
      v109 = __ldaxr(v108);
    while (__stlxr(v109 - 1, v108));
LABEL_503:
    if (!v109)
    {
      ((void (*)(std::__shared_weak_count *))v107->__on_zero_shared)(v107);
      std::__shared_weak_count::__release_weak(v107);
    }
    return;
  }
  v18 = (mlcore *)mlcore::TypedEntityClass<mlcore::TVSeason>::sharedPointer();
  if (v18 == a2 && (*((_BYTE *)this + 80) & 4) != 0)
  {
    v110 = (mlcore *)mlcore::AlbumPropertyPersistentID(v18);
    v111 = mlcore::ItemPropertyAlbumPersistentID(v110);
    v112 = (std::__shared_weak_count *)operator new(0x38uLL);
    v112->__shared_owners_ = 0;
    v113 = (unint64_t *)&v112->__shared_owners_;
    v112->__shared_weak_owners_ = 0;
    v112->__vftable = (std::__shared_weak_count_vtbl *)&off_24C33D240;
    v112[1].__vftable = (std::__shared_weak_count_vtbl *)&off_24C33A5A8;
    v112[1].__shared_owners_ = (uint64_t)v110;
    v112[1].__shared_weak_owners_ = 0;
    v112[2].__vftable = (std::__shared_weak_count_vtbl *)v111;
    *(_QWORD *)v651 = v112 + 1;
    *(_QWORD *)&v651[8] = v112;
    v114 = mlcore::TypedEntityClass<mlcore::TVEpisode>::sharedPointer();
    v628 = &v112[1].__vftable;
    v629 = v112;
    do
      v115 = __ldxr(v113);
    while (__stxr(v115 + 1, v113));
    v116 = mlcore::TypedEntityClass<mlcore::TVEpisode>::sharedPointer();
    mlcore::LibraryView::_predicateByApplyingFilters(&v648, this, &v628, v116);
    std::allocate_shared[abi:ne180100]<mlcore::Query,std::allocator<mlcore::Query>,mlcore::EntityClass *,std::shared_ptr<mlcore::Predicate>,void>(&v654, v114, &v648);
    v117 = (std::__shared_weak_count *)*((_QWORD *)&v648 + 1);
    if (*((_QWORD *)&v648 + 1))
    {
      v118 = (unint64_t *)(*((_QWORD *)&v648 + 1) + 8);
      do
        v119 = __ldaxr(v118);
      while (__stlxr(v119 - 1, v118));
      if (!v119)
      {
        ((void (*)(std::__shared_weak_count *))v117->__on_zero_shared)(v117);
        std::__shared_weak_count::__release_weak(v117);
      }
    }
    v120 = v629;
    if (v629)
    {
      v121 = (unint64_t *)&v629->__shared_owners_;
      do
        v122 = __ldaxr(v121);
      while (__stlxr(v122 - 1, v121));
      if (!v122)
      {
        ((void (*)(std::__shared_weak_count *))v120->__on_zero_shared)(v120);
        std::__shared_weak_count::__release_weak(v120);
      }
    }
    v123 = (std::__shared_weak_count *)*((_QWORD *)&v654 + 1);
    std::allocate_shared[abi:ne180100]<mlcore::ExistsPredicate,std::allocator<mlcore::ExistsPredicate>,std::shared_ptr<mlcore::Query> &,void>(&v648, v654, *((std::__shared_weak_count **)&v654 + 1));
    *(_OWORD *)a3 = v648;
    if (v123)
    {
      v124 = (unint64_t *)&v123->__shared_owners_;
      do
        v125 = __ldaxr(v124);
      while (__stlxr(v125 - 1, v124));
      if (!v125)
      {
        ((void (*)(std::__shared_weak_count *))v123->__on_zero_shared)(v123);
        std::__shared_weak_count::__release_weak(v123);
      }
    }
    v107 = *(std::__shared_weak_count **)&v651[8];
    if (!*(_QWORD *)&v651[8])
      return;
    v126 = (unint64_t *)(*(_QWORD *)&v651[8] + 8);
    do
      v109 = __ldaxr(v126);
    while (__stlxr(v109 - 1, v126));
    goto LABEL_503;
  }
  v19 = (mlcore *)mlcore::TypedEntityClass<mlcore::Artist>::sharedPointer();
  if (v19 == a2)
  {
    v654 = 0uLL;
    *(_QWORD *)&v655 = 0;
    v60 = *((_DWORD *)this + 20);
    if ((v60 & 4) == 0)
      goto LABEL_597;
    v61 = (mlcore *)mlcore::ArtistPropertyPersistentID(v19);
    v62 = mlcore::ItemPropertyAlbumArtistPersistentID(v61);
    v63 = (std::__shared_weak_count *)operator new(0x38uLL);
    v63->__shared_owners_ = 0;
    v64 = (unint64_t *)&v63->__shared_owners_;
    v63->__shared_weak_owners_ = 0;
    v63->__vftable = (std::__shared_weak_count_vtbl *)&off_24C33D240;
    v63[1].__vftable = (std::__shared_weak_count_vtbl *)&off_24C33A5A8;
    v63[1].__shared_owners_ = (uint64_t)v61;
    v63[1].__shared_weak_owners_ = 0;
    v63[2].__vftable = (std::__shared_weak_count_vtbl *)v62;
    *(_QWORD *)&v648 = v63 + 1;
    *((_QWORD *)&v648 + 1) = v63;
    v65 = mlcore::TypedEntityClass<mlcore::Item>::sharedPointer();
    v626 = &v63[1].__vftable;
    v627 = v63;
    do
      v66 = __ldxr(v64);
    while (__stxr(v66 + 1, v64));
    v67 = mlcore::TypedEntityClass<mlcore::Item>::sharedPointer();
    mlcore::LibraryView::_predicateByApplyingFilters(v651, this, &v626, v67);
    std::allocate_shared[abi:ne180100]<mlcore::Query,std::allocator<mlcore::Query>,mlcore::EntityClass *,std::shared_ptr<mlcore::Predicate>,void>(&v647, v65, (__int128 *)v651);
    v68 = *(std::__shared_weak_count **)&v651[8];
    if (*(_QWORD *)&v651[8])
    {
      v69 = (unint64_t *)(*(_QWORD *)&v651[8] + 8);
      do
        v70 = __ldaxr(v69);
      while (__stlxr(v70 - 1, v69));
      if (!v70)
      {
        ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
        std::__shared_weak_count::__release_weak(v68);
      }
    }
    v71 = v627;
    if (v627)
    {
      v72 = (unint64_t *)&v627->__shared_owners_;
      do
        v73 = __ldaxr(v72);
      while (__stlxr(v73 - 1, v72));
      if (!v73)
      {
        ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
        std::__shared_weak_count::__release_weak(v71);
      }
    }
    std::allocate_shared[abi:ne180100]<mlcore::ExistsPredicate,std::allocator<mlcore::ExistsPredicate>,std::shared_ptr<mlcore::Query> &,void>(&v644, v647, *((std::__shared_weak_count **)&v647 + 1));
    v19 = (mlcore *)_os_feature_enabled_impl();
    if (!(_DWORD)v19 || (*((_BYTE *)this + 80) & 8) != 0)
    {
      v326 = v644;
      v643 = v644;
      if (*((_QWORD *)&v644 + 1))
      {
        v327 = (unint64_t *)(*((_QWORD *)&v644 + 1) + 8);
        do
          v328 = __ldxr(v327);
        while (__stxr(v328 + 1, v327));
      }
      v329 = *((_QWORD *)&v654 + 1);
      if (*((_QWORD *)&v654 + 1) >= (unint64_t)v655)
      {
        v611 = v326;
        v553 = (uint64_t)(*((_QWORD *)&v654 + 1) - v654) >> 4;
        if ((unint64_t)(v553 + 1) >> 60)
          std::vector<std::string>::__throw_length_error[abi:ne180100]();
        v554 = (uint64_t)(v655 - v654) >> 3;
        if (v554 <= v553 + 1)
          v554 = v553 + 1;
        if ((_QWORD)v655 - (_QWORD)v654 >= 0x7FFFFFFFFFFFFFF0uLL)
          v555 = 0xFFFFFFFFFFFFFFFLL;
        else
          v555 = v554;
        v652 = (char **)&v655;
        v556 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<mediaplatform::DatabaseParameterBase>>>(v555);
        v558 = &v556[16 * v553];
        *(_OWORD *)v558 = v611;
        v559 = (_QWORD *)*((_QWORD *)&v654 + 1);
        v560 = (_QWORD *)v654;
        if (*((_QWORD *)&v654 + 1) == (_QWORD)v654)
        {
          v563 = vdupq_n_s64(*((unint64_t *)&v654 + 1));
          v561 = &v556[16 * v553];
        }
        else
        {
          v561 = &v556[16 * v553];
          do
          {
            v562 = *((_OWORD *)v559 - 1);
            v559 -= 2;
            *((_OWORD *)v561 - 1) = v562;
            v561 -= 16;
            *v559 = 0;
            v559[1] = 0;
          }
          while (v559 != v560);
          v563 = (int64x2_t)v654;
        }
        v330 = v558 + 16;
        *(_QWORD *)&v654 = v561;
        *((_QWORD *)&v654 + 1) = v558 + 16;
        *(int64x2_t *)&v651[8] = v563;
        v564 = v655;
        *(_QWORD *)&v655 = &v556[16 * v557];
        *(_QWORD *)&v651[24] = v564;
        *(_QWORD *)v651 = v563.i64[0];
        v19 = (mlcore *)std::__split_buffer<std::shared_ptr<mediaplatform::SQLExpression const>>::~__split_buffer((uint64_t)v651);
      }
      else
      {
        **((_OWORD **)&v654 + 1) = v326;
        v330 = (_OWORD *)(v329 + 16);
      }
      *((_QWORD *)&v654 + 1) = v330;
      v77 = (std::__shared_weak_count *)*((_QWORD *)&v644 + 1);
      goto LABEL_581;
    }
    v74 = mlcore::ArtistPropertyLikedState(v19);
    v75 = (char *)operator new(0x48uLL);
    *(_OWORD *)(v75 + 8) = 0u;
    *(_QWORD *)v75 = &off_24C33CE50;
    *((_QWORD *)v75 + 3) = &unk_24C339C50;
    v76 = v75 + 24;
    *((_QWORD *)v75 + 4) = v74;
    *((_QWORD *)v75 + 5) = 0;
    *((_DWORD *)v75 + 12) = 2;
    *(_OWORD *)(v75 + 56) = 0u;
    *(_QWORD *)&v643 = v75 + 24;
    *((_QWORD *)&v643 + 1) = v75;
    v77 = (std::__shared_weak_count *)*((_QWORD *)&v644 + 1);
    *(_OWORD *)v651 = v644;
    if (*((_QWORD *)&v644 + 1))
    {
      v78 = (unint64_t *)(*((_QWORD *)&v644 + 1) + 8);
      do
        v79 = __ldxr(v78);
      while (__stxr(v79 + 1, v78));
      v75 = (char *)*((_QWORD *)&v643 + 1);
      *(_QWORD *)&v651[16] = v76;
      *(_QWORD *)&v651[24] = *((_QWORD *)&v643 + 1);
      if (!*((_QWORD *)&v643 + 1))
        goto LABEL_578;
    }
    else
    {
      *(_QWORD *)&v651[16] = v75 + 24;
      *(_QWORD *)&v651[24] = v75;
    }
    v565 = (unint64_t *)(v75 + 8);
    do
      v566 = __ldxr(v565);
    while (__stxr(v566 + 1, v565));
LABEL_578:
    std::vector<std::shared_ptr<mlcore::Predicate>>::vector[abi:ne180100](v623, v651, 2uLL);
    mlcore::CreateOrPredicate(v623, &v624);
    std::vector<std::shared_ptr<mlcore::Predicate>>::push_back[abi:ne180100](&v654, (uint64_t)&v624);
    std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)&v624);
    v616[0] = (void **)v623;
    std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__destroy_vector::operator()[abi:ne180100](v616);
    for (j = 16; j != -16; j -= 16)
      std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)&v651[j]);
    v19 = (mlcore *)std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)&v643);
LABEL_581:
    if (v77)
    {
      v568 = (unint64_t *)&v77->__shared_owners_;
      do
        v569 = __ldaxr(v568);
      while (__stlxr(v569 - 1, v568));
      if (!v569)
      {
        ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
        std::__shared_weak_count::__release_weak(v77);
      }
    }
    v570 = (std::__shared_weak_count *)*((_QWORD *)&v647 + 1);
    if (*((_QWORD *)&v647 + 1))
    {
      v571 = (unint64_t *)(*((_QWORD *)&v647 + 1) + 8);
      do
        v572 = __ldaxr(v571);
      while (__stlxr(v572 - 1, v571));
      if (!v572)
      {
        ((void (*)(std::__shared_weak_count *))v570->__on_zero_shared)(v570);
        std::__shared_weak_count::__release_weak(v570);
      }
    }
    v573 = (std::__shared_weak_count *)*((_QWORD *)&v648 + 1);
    if (*((_QWORD *)&v648 + 1))
    {
      v574 = (unint64_t *)(*((_QWORD *)&v648 + 1) + 8);
      do
        v575 = __ldaxr(v574);
      while (__stlxr(v575 - 1, v574));
      if (!v575)
      {
        ((void (*)(std::__shared_weak_count *))v573->__on_zero_shared)(v573);
        std::__shared_weak_count::__release_weak(v573);
      }
    }
    v60 = *((_DWORD *)this + 20);
LABEL_597:
    if ((v60 & 0x2000) != 0)
    {
      v577 = mlcore::ArtistPropertyLikedState(v19);
      v578 = (char *)operator new(0x48uLL);
      *(_OWORD *)(v578 + 8) = 0u;
      *(_QWORD *)v578 = &off_24C33CE50;
      *((_QWORD *)v578 + 4) = v577;
      *((_QWORD *)v578 + 5) = 0;
      *((_QWORD *)v578 + 3) = &unk_24C339C50;
      *((_DWORD *)v578 + 12) = 2;
      *(_OWORD *)(v578 + 56) = 0u;
      *(_QWORD *)&v647 = v578 + 24;
      *((_QWORD *)&v647 + 1) = v578;
      v579 = v647;
      v647 = 0u;
      v648 = v579;
      v580 = *((_QWORD *)&v654 + 1);
      if (*((_QWORD *)&v654 + 1) >= (unint64_t)v655)
      {
        v612 = v579;
        v581 = (uint64_t)(*((_QWORD *)&v654 + 1) - v654) >> 4;
        if ((unint64_t)(v581 + 1) >> 60)
          std::vector<std::string>::__throw_length_error[abi:ne180100]();
        v582 = (uint64_t)(v655 - v654) >> 3;
        if (v582 <= v581 + 1)
          v582 = v581 + 1;
        if ((_QWORD)v655 - (_QWORD)v654 >= 0x7FFFFFFFFFFFFFF0uLL)
          v583 = 0xFFFFFFFFFFFFFFFLL;
        else
          v583 = v582;
        v652 = (char **)&v655;
        v584 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<mediaplatform::DatabaseParameterBase>>>(v583);
        v586 = (__int128 *)&v584[16 * v581];
        *v586 = v612;
        v648 = 0uLL;
        v587 = (_QWORD *)*((_QWORD *)&v654 + 1);
        v588 = (_QWORD *)v654;
        if (*((_QWORD *)&v654 + 1) == (_QWORD)v654)
        {
          v591 = vdupq_n_s64(*((unint64_t *)&v654 + 1));
          v589 = &v584[16 * v581];
        }
        else
        {
          v589 = &v584[16 * v581];
          do
          {
            v590 = *((_OWORD *)v587 - 1);
            v587 -= 2;
            *((_OWORD *)v589 - 1) = v590;
            v589 -= 16;
            *v587 = 0;
            v587[1] = 0;
          }
          while (v587 != v588);
          v591 = (int64x2_t)v654;
        }
        v576 = v586 + 1;
        *(_QWORD *)&v654 = v589;
        *((_QWORD *)&v654 + 1) = v586 + 1;
        *(int64x2_t *)&v651[8] = v591;
        v592 = v655;
        *(_QWORD *)&v655 = &v584[16 * v585];
        *(_QWORD *)&v651[24] = v592;
        *(_QWORD *)v651 = v591.i64[0];
        std::__split_buffer<std::shared_ptr<mediaplatform::SQLExpression const>>::~__split_buffer((uint64_t)v651);
      }
      else
      {
        **((_OWORD **)&v654 + 1) = v579;
        v576 = (_QWORD *)(v580 + 16);
        v648 = 0uLL;
      }
      *((_QWORD *)&v654 + 1) = v576;
    }
    else
    {
      v576 = (_QWORD *)*((_QWORD *)&v654 + 1);
    }
    if (v576 != (_QWORD *)v654)
    {
      memset(v622, 0, sizeof(v622));
      std::vector<std::shared_ptr<mlcore::Predicate>>::__init_with_size[abi:ne180100]<std::shared_ptr<mlcore::Predicate>*,std::shared_ptr<mlcore::Predicate>*>((char *)v622, (_QWORD *)v654, v576, (uint64_t)((uint64_t)v576 - v654) >> 4);
      v482 = v622;
      mlcore::CreateAndPredicate(v622, a3);
      goto LABEL_616;
    }
    goto LABEL_617;
  }
  v20 = (mlcore::EntityClass *)mlcore::TypedEntityClass<mlcore::TVShow>::sharedPointer();
  if (v20 != a2 || (*((_BYTE *)this + 80) & 4) == 0)
  {
    v21 = (mlcore *)mlcore::TypedEntityClass<mlcore::Genre>::sharedPointer();
    if (v21 == a2 && (*((_BYTE *)this + 80) & 4) != 0)
    {
      v500 = (mlcore *)mlcore::GenrePropertyPersistentID(v21);
      v501 = mlcore::ItemPropertyGenrePersistentID(v500);
      v502 = operator new(0x38uLL);
      v502[1] = 0;
      v502[2] = 0;
      *v502 = &off_24C33D240;
      v502[4] = v500;
      v502[5] = 0;
      v502[6] = v501;
      *(_QWORD *)&v651[8] = v502;
      v502[3] = &off_24C33A5A8;
      *(_QWORD *)v651 = v502 + 3;
      v503 = mlcore::TypedEntityClass<mlcore::Item>::sharedPointer();
      v619 = *(_OWORD *)v651;
      if (*(_QWORD *)&v651[8])
      {
        v504 = (unint64_t *)(*(_QWORD *)&v651[8] + 8);
        do
          v505 = __ldxr(v504);
        while (__stxr(v505 + 1, v504));
      }
      v506 = mlcore::TypedEntityClass<mlcore::Item>::sharedPointer();
      mlcore::LibraryView::_predicateByApplyingFilters(&v648, this, &v619, v506);
      std::allocate_shared[abi:ne180100]<mlcore::Query,std::allocator<mlcore::Query>,mlcore::EntityClass *,std::shared_ptr<mlcore::Predicate>,void>(&v654, v503, &v648);
      std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)&v648);
      std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)&v619);
      std::allocate_shared[abi:ne180100]<mlcore::ExistsPredicate,std::allocator<mlcore::ExistsPredicate>,std::shared_ptr<mlcore::Query> &,void>(&v648, v654, *((std::__shared_weak_count **)&v654 + 1));
    }
    else
    {
      v22 = (mlcore::EntityClass *)mlcore::TypedEntityClass<mlcore::Composer>::sharedPointer();
      if (v22 != a2 || (*((_BYTE *)this + 80) & 4) == 0)
      {
        v23 = (mlcore::EntityClass *)mlcore::TypedEntityClass<mlcore::Playlist>::sharedPointer();
        if (v23 != a2)
        {
          *a3 = 0;
          a3[1] = 0;
          return;
        }
        v654 = 0uLL;
        *(_QWORD *)&v655 = 0;
        v445 = *((_DWORD *)this + 20);
        if ((v445 & 1) != 0)
        {
          IsHidden = mlcore::PlaylistPropertyIsHidden(v23);
          v447 = (char *)operator new(0x30uLL);
          *(_OWORD *)(v447 + 8) = 0u;
          *(_QWORD *)v447 = &off_24C33C9F0;
          *((_QWORD *)v447 + 4) = IsHidden;
          *((_QWORD *)v447 + 3) = &unk_24C3377B8;
          *((_DWORD *)v447 + 10) = 1;
          *(_QWORD *)&v648 = v447 + 24;
          *((_QWORD *)&v648 + 1) = v447;
          *(_OWORD *)v651 = v648;
          v648 = 0u;
          std::vector<std::shared_ptr<mlcore::Predicate>>::push_back[abi:ne180100](&v654, (uint64_t)v651);
          std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)v651);
          v23 = (mlcore::EntityClass *)std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)&v648);
          v445 = *((_DWORD *)this + 20);
        }
        if ((v445 & 0x20) != 0)
        {
          v448 = (mlcore *)mlcore::PlaylistItemPropertyContainerPersistentID(v23);
          v449 = mlcore::PlaylistPropertyPersistentID(v448);
          v450 = operator new(0x38uLL);
          v450[1] = 0;
          v450[2] = 0;
          *v450 = &off_24C33D240;
          v450[4] = v448;
          v450[5] = 0;
          v450[3] = &off_24C33A5A8;
          v450[6] = v449;
          *(_QWORD *)&v648 = v450 + 3;
          *((_QWORD *)&v648 + 1) = v450;
          v451 = mlcore::TypedEntityClass<mlcore::PlaylistItem>::sharedPointer();
          v617 = v648;
          if (*((_QWORD *)&v648 + 1))
          {
            v452 = (unint64_t *)(*((_QWORD *)&v648 + 1) + 8);
            do
              v453 = __ldxr(v452);
            while (__stxr(v453 + 1, v452));
          }
          v454 = mlcore::TypedEntityClass<mlcore::PlaylistItem>::sharedPointer();
          mlcore::LibraryView::_predicateByApplyingFilters(v651, this, &v617, v454);
          std::allocate_shared[abi:ne180100]<mlcore::Query,std::allocator<mlcore::Query>,mlcore::EntityClass *,std::shared_ptr<mlcore::Predicate>,void>(&v647, v451, (__int128 *)v651);
          std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)v651);
          std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)&v617);
          std::allocate_shared[abi:ne180100]<mlcore::ExistsPredicate,std::allocator<mlcore::ExistsPredicate>,std::shared_ptr<mlcore::Query> &,void>(&v644, v647, *((std::__shared_weak_count **)&v647 + 1));
          IsFolder = mlcore::PlaylistPropertySmartIsFolder(v455);
          v457 = operator new(0x30uLL);
          v457[1] = 0;
          v457[2] = 0;
          *v457 = &off_24C33C9F0;
          v457[4] = IsFolder;
          *((_DWORD *)v457 + 10) = 0;
          v457[3] = &unk_24C3377B8;
          *(_QWORD *)&v643 = v457 + 3;
          *((_QWORD *)&v643 + 1) = v457;
          IsSmart = mlcore::PlaylistPropertyIsSmart((mlcore *)v457);
          v459 = operator new(0x30uLL);
          v459[1] = 0;
          v459[2] = 0;
          *v459 = &off_24C33C9F0;
          v459[3] = &unk_24C3377B8;
          v459[4] = IsSmart;
          *((_DWORD *)v459 + 10) = 0;
          v624 = (char *)(v459 + 3);
          v625 = v459;
          *(_OWORD *)v651 = v643;
          if (*((_QWORD *)&v643 + 1))
          {
            v460 = (unint64_t *)(*((_QWORD *)&v643 + 1) + 8);
            do
              v461 = __ldxr(v460);
            while (__stxr(v461 + 1, v460));
          }
          *(_OWORD *)&v651[16] = v644;
          if (*((_QWORD *)&v644 + 1))
          {
            v462 = (unint64_t *)(*((_QWORD *)&v644 + 1) + 8);
            do
              v463 = __ldxr(v462);
            while (__stxr(v463 + 1, v462));
          }
          v652 = (char **)(v459 + 3);
          v653 = v625;
          if (v625)
          {
            v464 = v625 + 1;
            do
              v465 = __ldxr(v464);
            while (__stxr(v465 + 1, v464));
          }
          std::vector<std::shared_ptr<mlcore::Predicate>>::vector[abi:ne180100](v615, v651, 3uLL);
          mlcore::CreateOrPredicate(v615, v616);
          std::vector<std::shared_ptr<mlcore::Predicate>>::push_back[abi:ne180100](&v654, (uint64_t)v616);
          std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)v616);
          v650 = v615;
          std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v650);
          for (k = 32; k != -16; k -= 16)
            std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)&v651[k]);
          std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)&v624);
          std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)&v643);
          std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)&v644);
          std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)&v647);
          v23 = (mlcore::EntityClass *)std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)&v648);
          v445 = *((_DWORD *)this + 20);
        }
        if ((v445 & 0x10) != 0)
        {
          v467 = mlcore::PlaylistPropertyLikedState(v23);
          v468 = (char *)operator new(0x48uLL);
          *(_OWORD *)(v468 + 8) = 0u;
          *(_QWORD *)v468 = &off_24C33CE50;
          *((_QWORD *)v468 + 4) = v467;
          *((_QWORD *)v468 + 5) = 0;
          *((_QWORD *)v468 + 3) = &unk_24C339C50;
          *((_DWORD *)v468 + 12) = 2;
          *(_OWORD *)(v468 + 56) = 0u;
          *(_QWORD *)&v648 = v468 + 24;
          *((_QWORD *)&v648 + 1) = v468;
          *(_OWORD *)v651 = v648;
          v648 = 0u;
          std::vector<std::shared_ptr<mlcore::Predicate>>::push_back[abi:ne180100](&v654, (uint64_t)v651);
          std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)v651);
          v23 = (mlcore::EntityClass *)std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)&v648);
          v445 = *((_DWORD *)this + 20);
        }
        if ((v445 & 0x40) != 0)
        {
          v469 = mlcore::PlaylistPropertyIsKeepLocalEnabled(v23);
          v470 = (char *)operator new(0x30uLL);
          *(_OWORD *)(v470 + 8) = 0u;
          *(_QWORD *)v470 = &off_24C33C9F0;
          *((_QWORD *)v470 + 4) = v469;
          *((_QWORD *)v470 + 3) = &unk_24C3377B8;
          *((_DWORD *)v470 + 10) = 0;
          *(_QWORD *)&v648 = v470 + 24;
          *((_QWORD *)&v648 + 1) = v470;
          *(_OWORD *)v651 = v648;
          v648 = 0u;
          std::vector<std::shared_ptr<mlcore::Predicate>>::push_back[abi:ne180100](&v654, (uint64_t)v651);
          std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)v651);
          v23 = (mlcore::EntityClass *)std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)&v648);
          v445 = *((_DWORD *)this + 20);
        }
        if ((v445 & 0x400) != 0)
        {
          IsFavoritedSongs = mlcore::PlaylistPropertyIsFavoritedSongs(v23);
          v472 = (char *)operator new(0x30uLL);
          *(_OWORD *)(v472 + 8) = 0u;
          *(_QWORD *)v472 = &off_24C33C9F0;
          *((_QWORD *)v472 + 4) = IsFavoritedSongs;
          *((_QWORD *)v472 + 3) = &unk_24C3377B8;
          *((_DWORD *)v472 + 10) = 1;
          *(_QWORD *)&v648 = v472 + 24;
          *((_QWORD *)&v648 + 1) = v472;
          *(_OWORD *)v651 = v648;
          v648 = 0u;
          std::vector<std::shared_ptr<mlcore::Predicate>>::push_back[abi:ne180100](&v654, (uint64_t)v651);
          std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)v651);
          v23 = (mlcore::EntityClass *)std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)&v648);
          v445 = *((_DWORD *)this + 20);
        }
        if ((v445 & 0x2000) != 0)
        {
          v473 = mlcore::PlaylistPropertyLikedState(v23);
          v474 = (char *)operator new(0x48uLL);
          *(_OWORD *)(v474 + 8) = 0u;
          *(_QWORD *)v474 = &off_24C33CE50;
          *((_QWORD *)v474 + 4) = v473;
          *((_QWORD *)v474 + 5) = 0;
          *((_QWORD *)v474 + 3) = &unk_24C339C50;
          *((_DWORD *)v474 + 12) = 2;
          *(_OWORD *)(v474 + 56) = 0u;
          *(_QWORD *)&v648 = v474 + 24;
          *((_QWORD *)&v648 + 1) = v474;
          v475 = mlcore::PlaylistPropertySmartIsFolder((mlcore *)v474);
          v476 = operator new(0x30uLL);
          v476[1] = 0;
          v477 = v476 + 1;
          v476[2] = 0;
          *v476 = &off_24C33C9F0;
          v476[3] = &unk_24C3377B8;
          v476[4] = v475;
          *((_DWORD *)v476 + 10) = 0;
          *(_QWORD *)&v647 = v476 + 3;
          *((_QWORD *)&v647 + 1) = v476;
          *(_OWORD *)v651 = v648;
          if (*((_QWORD *)&v648 + 1))
          {
            v478 = (unint64_t *)(*((_QWORD *)&v648 + 1) + 8);
            do
              v479 = __ldxr(v478);
            while (__stxr(v479 + 1, v478));
          }
          *(_QWORD *)&v651[16] = v476 + 3;
          *(_QWORD *)&v651[24] = v476;
          do
            v480 = __ldxr(v477);
          while (__stxr(v480 + 1, v477));
          std::vector<std::shared_ptr<mlcore::Predicate>>::vector[abi:ne180100](v614, v651, 2uLL);
          mlcore::CreateOrPredicate(v614, &v644);
          std::vector<std::shared_ptr<mlcore::Predicate>>::push_back[abi:ne180100](&v654, (uint64_t)&v644);
          std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)&v644);
          *(_QWORD *)&v643 = v614;
          std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v643);
          for (m = 16; m != -16; m -= 16)
            std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)&v651[m]);
          std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)&v647);
          std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)&v648);
        }
        if (*((_QWORD *)&v654 + 1) != (_QWORD)v654)
        {
          memset(v613, 0, sizeof(v613));
          std::vector<std::shared_ptr<mlcore::Predicate>>::__init_with_size[abi:ne180100]<std::shared_ptr<mlcore::Predicate>*,std::shared_ptr<mlcore::Predicate>*>((char *)v613, (_QWORD *)v654, *((_QWORD **)&v654 + 1), (uint64_t)(*((_QWORD *)&v654 + 1) - v654) >> 4);
          v482 = v613;
          mlcore::CreateAndPredicate(v613, a3);
LABEL_616:
          *(_QWORD *)v651 = v482;
          std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__destroy_vector::operator()[abi:ne180100]((void ***)v651);
LABEL_618:
          v325 = &v654;
LABEL_619:
          *(_QWORD *)v651 = v325;
          std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__destroy_vector::operator()[abi:ne180100]((void ***)v651);
          return;
        }
        goto LABEL_617;
      }
      v546 = (mlcore *)mlcore::ComposerPropertyPersistentID(v22);
      v547 = mlcore::ItemPropertyComposerPersistentID(v546);
      v548 = operator new(0x38uLL);
      v548[1] = 0;
      v548[2] = 0;
      *v548 = &off_24C33D240;
      v548[4] = v546;
      v548[5] = 0;
      v548[6] = v547;
      *(_QWORD *)&v651[8] = v548;
      v548[3] = &off_24C33A5A8;
      *(_QWORD *)v651 = v548 + 3;
      v549 = mlcore::TypedEntityClass<mlcore::Item>::sharedPointer();
      v618 = *(_OWORD *)v651;
      if (*(_QWORD *)&v651[8])
      {
        v550 = (unint64_t *)(*(_QWORD *)&v651[8] + 8);
        do
          v551 = __ldxr(v550);
        while (__stxr(v551 + 1, v550));
      }
      v552 = mlcore::TypedEntityClass<mlcore::Item>::sharedPointer();
      mlcore::LibraryView::_predicateByApplyingFilters(&v648, this, &v618, v552);
      std::allocate_shared[abi:ne180100]<mlcore::Query,std::allocator<mlcore::Query>,mlcore::EntityClass *,std::shared_ptr<mlcore::Predicate>,void>(&v654, v549, &v648);
      std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)&v648);
      std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)&v618);
      std::allocate_shared[abi:ne180100]<mlcore::ExistsPredicate,std::allocator<mlcore::ExistsPredicate>,std::shared_ptr<mlcore::Query> &,void>(&v648, v654, *((std::__shared_weak_count **)&v654 + 1));
    }
    *(_OWORD *)a3 = v648;
    v648 = 0uLL;
    std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)&v648);
    std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)&v654);
    std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)v651);
    return;
  }
  v483 = (mlcore *)mlcore::ItemArtistPropertyPersistentID(v20);
  v484 = mlcore::ItemPropertyItemArtistPersistentID(v483);
  v485 = (std::__shared_weak_count *)operator new(0x38uLL);
  v485->__shared_owners_ = 0;
  v486 = (unint64_t *)&v485->__shared_owners_;
  v485->__shared_weak_owners_ = 0;
  v485->__vftable = (std::__shared_weak_count_vtbl *)&off_24C33D240;
  v485[1].__vftable = (std::__shared_weak_count_vtbl *)&off_24C33A5A8;
  v485[1].__shared_owners_ = (uint64_t)v483;
  v485[1].__shared_weak_owners_ = 0;
  v485[2].__vftable = (std::__shared_weak_count_vtbl *)v484;
  *(_QWORD *)v651 = v485 + 1;
  *(_QWORD *)&v651[8] = v485;
  v487 = mlcore::TypedEntityClass<mlcore::TVEpisode>::sharedPointer();
  v620 = &v485[1].__vftable;
  v621 = v485;
  do
    v488 = __ldxr(v486);
  while (__stxr(v488 + 1, v486));
  v489 = mlcore::TypedEntityClass<mlcore::TVEpisode>::sharedPointer();
  mlcore::LibraryView::_predicateByApplyingFilters(&v648, this, &v620, v489);
  std::allocate_shared[abi:ne180100]<mlcore::Query,std::allocator<mlcore::Query>,mlcore::EntityClass *,std::shared_ptr<mlcore::Predicate>,void>(&v654, v487, &v648);
  v490 = (std::__shared_weak_count *)*((_QWORD *)&v648 + 1);
  if (*((_QWORD *)&v648 + 1))
  {
    v491 = (unint64_t *)(*((_QWORD *)&v648 + 1) + 8);
    do
      v492 = __ldaxr(v491);
    while (__stlxr(v492 - 1, v491));
    if (!v492)
    {
      ((void (*)(std::__shared_weak_count *))v490->__on_zero_shared)(v490);
      std::__shared_weak_count::__release_weak(v490);
    }
  }
  v493 = v621;
  if (v621)
  {
    v494 = (unint64_t *)&v621->__shared_owners_;
    do
      v495 = __ldaxr(v494);
    while (__stlxr(v495 - 1, v494));
    if (!v495)
    {
      ((void (*)(std::__shared_weak_count *))v493->__on_zero_shared)(v493);
      std::__shared_weak_count::__release_weak(v493);
    }
  }
  v496 = (std::__shared_weak_count *)*((_QWORD *)&v654 + 1);
  std::allocate_shared[abi:ne180100]<mlcore::ExistsPredicate,std::allocator<mlcore::ExistsPredicate>,std::shared_ptr<mlcore::Query> &,void>(&v648, v654, *((std::__shared_weak_count **)&v654 + 1));
  *(_OWORD *)a3 = v648;
  if (v496)
  {
    v497 = (unint64_t *)&v496->__shared_owners_;
    do
      v498 = __ldaxr(v497);
    while (__stlxr(v498 - 1, v497));
    if (!v498)
    {
      ((void (*)(std::__shared_weak_count *))v496->__on_zero_shared)(v496);
      std::__shared_weak_count::__release_weak(v496);
    }
  }
  v107 = *(std::__shared_weak_count **)&v651[8];
  if (*(_QWORD *)&v651[8])
  {
    v499 = (unint64_t *)(*(_QWORD *)&v651[8] + 8);
    do
      v109 = __ldaxr(v499);
    while (__stlxr(v109 - 1, v499));
    goto LABEL_503;
  }
}

void sub_20A65F6D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void **a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t a67;
  char a69;
  uint64_t v69;
  uint64_t i;

  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)&a36);
  a20 = (void **)&a33;
  std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__destroy_vector::operator()[abi:ne180100](&a20);
  for (i = 16; i != -16; i -= 16)
    std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100](v69 - 176 + i);
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)&a67);
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)&a69);
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100](v69 - 224);
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100](v69 - 208);
  *(_QWORD *)(v69 - 208) = v69 - 128;
  std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v69 - 208));
  _Unwind_Resume(a1);
}

uint64_t mlcore::TypedEntityClass<mlcore::Item>::sharedPointer()
{
  unint64_t v0;
  char v2;
  char **v3;
  char *v4;

  v0 = atomic_load(&mlcore::TypedEntityClass<mlcore::Item>::sharedPointer(void)::__once);
  if (v0 != -1)
  {
    v4 = &v2;
    v3 = &v4;
    std::__call_once(&mlcore::TypedEntityClass<mlcore::Item>::sharedPointer(void)::__once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::TypedEntityClass<mlcore::Item>::sharedPointer(void)::{lambda(void)#1} &&>>);
  }
  return mlcore::TypedEntityClass<mlcore::Item>::sharedPointer(void)::__sharedPointer;
}

uint64_t mlcore::ItemPropertyInMyLibrary(mlcore *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&mlcore::ItemPropertyInMyLibrary(void)::once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&mlcore::ItemPropertyInMyLibrary(void)::once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyInMyLibrary(void)::$_0 &&>>);
  }
  return mlcore::ItemPropertyInMyLibrary(void)::property;
}

uint64_t mlcore::TypedEntityClass<mlcore::PlaylistItem>::sharedPointer()
{
  unint64_t v0;
  char v2;
  char **v3;
  char *v4;

  v0 = atomic_load(&mlcore::TypedEntityClass<mlcore::PlaylistItem>::sharedPointer(void)::__once);
  if (v0 != -1)
  {
    v4 = &v2;
    v3 = &v4;
    std::__call_once(&mlcore::TypedEntityClass<mlcore::PlaylistItem>::sharedPointer(void)::__once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::TypedEntityClass<mlcore::PlaylistItem>::sharedPointer(void)::{lambda(void)#1} &&>>);
  }
  return mlcore::TypedEntityClass<mlcore::PlaylistItem>::sharedPointer(void)::__sharedPointer;
}

uint64_t mlcore::TypedEntityClass<mlcore::Album>::sharedPointer()
{
  unint64_t v0;
  char v2;
  char **v3;
  char *v4;

  v0 = atomic_load(&mlcore::TypedEntityClass<mlcore::Album>::sharedPointer(void)::__once);
  if (v0 != -1)
  {
    v4 = &v2;
    v3 = &v4;
    std::__call_once(&mlcore::TypedEntityClass<mlcore::Album>::sharedPointer(void)::__once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::TypedEntityClass<mlcore::Album>::sharedPointer(void)::{lambda(void)#1} &&>>);
  }
  return mlcore::TypedEntityClass<mlcore::Album>::sharedPointer(void)::__sharedPointer;
}

uint64_t mlcore::TypedEntityClass<mlcore::Playlist>::sharedPointer()
{
  unint64_t v0;
  char v2;
  char **v3;
  char *v4;

  v0 = atomic_load(&mlcore::TypedEntityClass<mlcore::Playlist>::sharedPointer(void)::__once);
  if (v0 != -1)
  {
    v4 = &v2;
    v3 = &v4;
    std::__call_once(&mlcore::TypedEntityClass<mlcore::Playlist>::sharedPointer(void)::__once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::TypedEntityClass<mlcore::Playlist>::sharedPointer(void)::{lambda(void)#1} &&>>);
  }
  return mlcore::TypedEntityClass<mlcore::Playlist>::sharedPointer(void)::__sharedPointer;
}

uint64_t mlcore::TypedEntityClass<mlcore::Artist>::sharedPointer()
{
  unint64_t v0;
  char v2;
  char **v3;
  char *v4;

  v0 = atomic_load(&mlcore::TypedEntityClass<mlcore::Artist>::sharedPointer(void)::__once);
  if (v0 != -1)
  {
    v4 = &v2;
    v3 = &v4;
    std::__call_once(&mlcore::TypedEntityClass<mlcore::Artist>::sharedPointer(void)::__once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::TypedEntityClass<mlcore::Artist>::sharedPointer(void)::{lambda(void)#1} &&>>);
  }
  return mlcore::TypedEntityClass<mlcore::Artist>::sharedPointer(void)::__sharedPointer;
}

uint64_t mlcore::TypedEntityClass<mlcore::TVSeason>::sharedPointer()
{
  unint64_t v0;
  char v2;
  char **v3;
  char *v4;

  v0 = atomic_load(&mlcore::TypedEntityClass<mlcore::TVSeason>::sharedPointer(void)::__once);
  if (v0 != -1)
  {
    v4 = &v2;
    v3 = &v4;
    std::__call_once(&mlcore::TypedEntityClass<mlcore::TVSeason>::sharedPointer(void)::__once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::TypedEntityClass<mlcore::TVSeason>::sharedPointer(void)::{lambda(void)#1} &&>>);
  }
  return mlcore::TypedEntityClass<mlcore::TVSeason>::sharedPointer(void)::__sharedPointer;
}

uint64_t mlcore::TypedEntityClass<mlcore::Podcast>::sharedPointer()
{
  unint64_t v0;
  char v2;
  char **v3;
  char *v4;

  v0 = atomic_load(&mlcore::TypedEntityClass<mlcore::Podcast>::sharedPointer(void)::__once);
  if (v0 != -1)
  {
    v4 = &v2;
    v3 = &v4;
    std::__call_once(&mlcore::TypedEntityClass<mlcore::Podcast>::sharedPointer(void)::__once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::TypedEntityClass<mlcore::Podcast>::sharedPointer(void)::{lambda(void)#1} &&>>);
  }
  return mlcore::TypedEntityClass<mlcore::Podcast>::sharedPointer(void)::__sharedPointer;
}

uint64_t mlcore::AlbumPropertyPersistentID(mlcore *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&mlcore::AlbumPropertyPersistentID(void)::once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&mlcore::AlbumPropertyPersistentID(void)::once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::AlbumPropertyPersistentID(void)::$_0 &&>>);
  }
  return mlcore::AlbumPropertyPersistentID(void)::property;
}

uint64_t mlcore::TypedEntityClass<mlcore::Movie>::entityType()
{
  return 0;
}

uint64_t mlcore::TypedEntityClass<mlcore::Album>::entityType()
{
  return 4;
}

uint64_t mlcore::TypedEntityClass<mlcore::TVEpisode>::entityType()
{
  return 0;
}

uint64_t mlcore::TypedEntityClass<mlcore::Playlist>::entityType()
{
  return 1;
}

uint64_t mlcore::ItemPropertyHasNonPurgeableAsset(mlcore *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&mlcore::ItemPropertyHasNonPurgeableAsset(void)::once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&mlcore::ItemPropertyHasNonPurgeableAsset(void)::once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyHasNonPurgeableAsset(void)::$_0 &&>>);
  }
  return mlcore::ItemPropertyHasNonPurgeableAsset(void)::property;
}

uint64_t mlcore::TypedEntityClass<mlcore::TVShow>::entityType()
{
  return 2;
}

uint64_t mlcore::ArtistPropertyLikedState(mlcore *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&mlcore::ArtistPropertyLikedState(void)::once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&mlcore::ArtistPropertyLikedState(void)::once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ArtistPropertyLikedState(void)::$_0 &&>>);
  }
  return mlcore::ArtistPropertyLikedState(void)::property;
}

uint64_t mlcore::TypedEntityClass<mlcore::TVSeason>::entityType()
{
  return 4;
}

uint64_t mlcore::PlaylistItemPropertyContainerPersistentID(mlcore *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&mlcore::PlaylistItemPropertyContainerPersistentID(void)::once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&mlcore::PlaylistItemPropertyContainerPersistentID(void)::once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::PlaylistItemPropertyContainerPersistentID(void)::$_0 &&>>);
  }
  return mlcore::PlaylistItemPropertyContainerPersistentID(void)::property;
}

void mlcore::SQLRenderer::~SQLRenderer(mlcore::SQLRenderer *this)
{
  void **v2;

  *(_QWORD *)this = &off_24C336B90;
  v2 = (void **)((char *)this + 64);
  std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__destroy_vector::operator()[abi:ne180100](&v2);
  *((_QWORD *)this + 4) = &off_24C331228;
  v2 = (void **)((char *)this + 40);
  std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*((char *)this + 31) < 0)
    operator delete(*((void **)this + 1));
}

{
  mlcore::SQLRenderer::~SQLRenderer(this);
  JUMPOUT(0x20BD27AFCLL);
}

void mlcore::QueryProperty<long long>::databaseTables(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

uint64_t mlcore::EntityQueryResult::entityCache@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(this + 264);
  *a2 = *(_QWORD *)(this + 256);
  a2[1] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return this;
}

uint64_t std::__shared_ptr_emplace<mlcore::EntityQuery>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t std::__shared_ptr_emplace<mediaplatform::SQLLiteralValue<int>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

char *mlcore::EntityQuery::setIdentityPropertiesToFetch(uint64_t a1, uint64_t a2)
{
  char *result;

  result = (char *)(a1 + 104);
  if (result != (char *)a2)
    return std::vector<mlcore::ModelPropertyBase *>::__assign_with_size[abi:ne180100]<mlcore::ModelPropertyBase **,mlcore::ModelPropertyBase **>(result, *(char **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3);
  return result;
}

uint64_t std::__shared_ptr_emplace<mediaplatform::SQLLiteralValue<unsigned long>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

char *mlcore::PropertiesQuery::setPropertiesToFetch(uint64_t a1, uint64_t a2)
{
  char *result;

  result = (char *)(a1 + 80);
  if (result != (char *)a2)
    return std::vector<mlcore::ModelPropertyBase *>::__assign_with_size[abi:ne180100]<mlcore::ModelPropertyBase **,mlcore::ModelPropertyBase **>(result, *(char **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3);
  return result;
}

uint64_t std::__shared_ptr_emplace<mediaplatform::SQLSelectExpression>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t mlcore::TypedEntityClass<mlcore::PlaylistItem>::entityType()
{
  return 9;
}

void mediaplatform::DatabaseTable<long long,int,int,std::string,std::string,int>::targetColumnExpression(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  __int128 *v3;
  __int128 *v4[3];
  __int128 **v5;

  v3 = (__int128 *)(a1 + 8);
  (*(void (**)(__int128 **__return_ptr))(*(_QWORD *)a1 + 24))(v4);
  std::allocate_shared[abi:ne180100]<mediaplatform::SQLColumnNameExpression,std::allocator<mediaplatform::SQLColumnNameExpression>,std::string &,std::string const&,void>(a2, v4[0], v3);
  v5 = v4;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v5);
}

void sub_20A660334(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t mlcore::GetForeignProperty<std::string>(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  char *v12;
  uint64_t ForeignProperty;
  _QWORD *v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  __int128 v19;
  _QWORD v20[2];
  _BYTE v21[24];
  _BYTE *v22;
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  v6 = *a3;
  v5 = (std::__shared_weak_count *)a3[1];
  v20[0] = *a3;
  v20[1] = v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    v6 = *a3;
    v9 = a3[1];
    *(_QWORD *)&v19 = a2;
    *((_QWORD *)&v19 + 1) = a1;
    if (v9)
    {
      v10 = (unint64_t *)(v9 + 8);
      do
        v11 = __ldxr(v10);
      while (__stxr(v11 + 1, v10));
    }
  }
  else
  {
    v9 = 0;
    *(_QWORD *)&v19 = a2;
    *((_QWORD *)&v19 + 1) = a1;
  }
  v12 = (char *)operator new(0x28uLL);
  *(_QWORD *)v12 = &off_24C33B400;
  *(_OWORD *)(v12 + 8) = v19;
  *((_QWORD *)v12 + 3) = v6;
  *((_QWORD *)v12 + 4) = v9;
  v22 = v12;
  ForeignProperty = mlcore::_GetForeignProperty(a1, a2, v20, (uint64_t)v21);
  v14 = v22;
  if (v22 == v21)
  {
    v15 = 4;
    v14 = v21;
    goto LABEL_13;
  }
  if (v22)
  {
    v15 = 5;
LABEL_13:
    (*(void (**)(void))(*v14 + 8 * v15))();
  }
  if (v5)
  {
    v16 = (unint64_t *)&v5->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  return ForeignProperty;
}

void sub_20A6604C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, char *a19)
{
  uint64_t v19;
  char *v20;
  char *v22;
  uint64_t v23;

  v22 = a19;
  if (a19 == v20)
  {
    v23 = 4;
    v22 = &a16;
  }
  else
  {
    if (!a19)
      goto LABEL_6;
    v23 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v22 + 8 * v23))();
LABEL_6:
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100](v19);
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)&a14);
  _Unwind_Resume(a1);
}

uint64_t mlcore::GetForeignProperty<int>(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  char *v12;
  uint64_t ForeignProperty;
  _QWORD *v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  __int128 v19;
  _QWORD v20[2];
  _BYTE v21[24];
  _BYTE *v22;
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  v6 = *a3;
  v5 = (std::__shared_weak_count *)a3[1];
  v20[0] = *a3;
  v20[1] = v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    v6 = *a3;
    v9 = a3[1];
    *(_QWORD *)&v19 = a2;
    *((_QWORD *)&v19 + 1) = a1;
    if (v9)
    {
      v10 = (unint64_t *)(v9 + 8);
      do
        v11 = __ldxr(v10);
      while (__stxr(v11 + 1, v10));
    }
  }
  else
  {
    v9 = 0;
    *(_QWORD *)&v19 = a2;
    *((_QWORD *)&v19 + 1) = a1;
  }
  v12 = (char *)operator new(0x28uLL);
  *(_QWORD *)v12 = &off_24C33B4B0;
  *(_OWORD *)(v12 + 8) = v19;
  *((_QWORD *)v12 + 3) = v6;
  *((_QWORD *)v12 + 4) = v9;
  v22 = v12;
  ForeignProperty = mlcore::_GetForeignProperty(a1, a2, v20, (uint64_t)v21);
  v14 = v22;
  if (v22 == v21)
  {
    v15 = 4;
    v14 = v21;
    goto LABEL_13;
  }
  if (v22)
  {
    v15 = 5;
LABEL_13:
    (*(void (**)(void))(*v14 + 8 * v15))();
  }
  if (v5)
  {
    v16 = (unint64_t *)&v5->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  return ForeignProperty;
}

void sub_20A660684(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, char *a19)
{
  uint64_t v19;
  char *v20;
  char *v22;
  uint64_t v23;

  v22 = a19;
  if (a19 == v20)
  {
    v23 = 4;
    v22 = &a16;
  }
  else
  {
    if (!a19)
      goto LABEL_6;
    v23 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v22 + 8 * v23))();
LABEL_6:
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100](v19);
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)&a14);
  _Unwind_Resume(a1);
}

uint64_t mlcore::GetForeignPropertyBase(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  char *v12;
  uint64_t ForeignProperty;
  _QWORD *v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  __int128 v19;
  _QWORD v20[2];
  _BYTE v21[24];
  _BYTE *v22;
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  v6 = *a3;
  v5 = (std::__shared_weak_count *)a3[1];
  v20[0] = *a3;
  v20[1] = v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    v6 = *a3;
    v9 = a3[1];
    *(_QWORD *)&v19 = a2;
    *((_QWORD *)&v19 + 1) = a1;
    if (v9)
    {
      v10 = (unint64_t *)(v9 + 8);
      do
        v11 = __ldxr(v10);
      while (__stxr(v11 + 1, v10));
    }
  }
  else
  {
    v9 = 0;
    *(_QWORD *)&v19 = a2;
    *((_QWORD *)&v19 + 1) = a1;
  }
  v12 = (char *)operator new(0x28uLL);
  *(_QWORD *)v12 = &off_24C33B610;
  *(_OWORD *)(v12 + 8) = v19;
  *((_QWORD *)v12 + 3) = v6;
  *((_QWORD *)v12 + 4) = v9;
  v22 = v12;
  ForeignProperty = mlcore::_GetForeignProperty(a1, a2, v20, (uint64_t)v21);
  v14 = v22;
  if (v22 == v21)
  {
    v15 = 4;
    v14 = v21;
    goto LABEL_13;
  }
  if (v22)
  {
    v15 = 5;
LABEL_13:
    (*(void (**)(void))(*v14 + 8 * v15))();
  }
  if (v5)
  {
    v16 = (unint64_t *)&v5->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  return ForeignProperty;
}

void sub_20A660848(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, char *a19)
{
  uint64_t v19;
  char *v20;
  char *v22;
  uint64_t v23;

  v22 = a19;
  if (a19 == v20)
  {
    v23 = 4;
    v22 = &a16;
  }
  else
  {
    if (!a19)
      goto LABEL_6;
    v23 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v22 + 8 * v23))();
LABEL_6:
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100](v19);
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)&a14);
  _Unwind_Resume(a1);
}

uint64_t mlcore::_GetForeignProperty(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4)
{
  unint64_t v4;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unsigned __int8 v9;
  std::recursive_mutex *v10;
  unsigned __int8 v11;
  int8x8_t v12;
  unint64_t v13;
  uint8x8_t v14;
  unint64_t v15;
  uint64_t **v16;
  uint64_t *i;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint8x8_t v25;
  uint64_t **v26;
  uint64_t *j;
  unint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  unint64_t *v31;
  unint64_t v32;
  float v33;
  float v34;
  _BOOL8 v35;
  unint64_t v36;
  unint64_t v37;
  int8x8_t prime;
  void *v39;
  void *v40;
  uint64_t v41;
  _QWORD *v42;
  unint64_t v43;
  uint8x8_t v44;
  unint64_t v45;
  uint8x8_t v46;
  uint64_t v47;
  _QWORD *v48;
  unint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t *v53;
  unint64_t v54;
  unint64_t *v55;
  unint64_t v56;
  void *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _BYTE v62[24];
  std::__shared_weak_count *v63;
  _QWORD v64[2];
  char v65;

  *(_QWORD *)v62 = a1;
  *(_QWORD *)&v62[8] = a2;
  v6 = (std::__shared_weak_count *)a3[1];
  *(_QWORD *)&v62[16] = *a3;
  v63 = v6;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  if ((v9 & 1) == 0
  {
    v60 = operator new();
    MEMORY[0x20BD279AC]();
    mlcore::_GetForeignProperty(mlcore::ModelPropertyBase *,mlcore::ModelPropertyBase *,std::shared_ptr<mlcore::Predicate>,std::function<mlcore::ModelPropertyBase * ()(void)>)::__mutex = v60;
  }
  v10 = (std::recursive_mutex *)mlcore::_GetForeignProperty(mlcore::ModelPropertyBase *,mlcore::ModelPropertyBase *,std::shared_ptr<mlcore::Predicate>,std::function<mlcore::ModelPropertyBase * ()(void)>)::__mutex;
  std::recursive_mutex::lock((std::recursive_mutex *)mlcore::_GetForeignProperty(mlcore::ModelPropertyBase *,mlcore::ModelPropertyBase *,std::shared_ptr<mlcore::Predicate>,std::function<mlcore::ModelPropertyBase * ()(void)>)::__mutex);
  if ((v11 & 1) == 0
  {
    v61 = operator new();
    *(_OWORD *)(v61 + 32) = 0u;
    *(_OWORD *)(v61 + 48) = 0u;
    *(_OWORD *)v61 = 0u;
    *(_OWORD *)(v61 + 16) = 0u;
    *(_DWORD *)(v61 + 64) = 1065353216;
    *(_OWORD *)(v61 + 72) = 0u;
    *(_OWORD *)(v61 + 88) = 0u;
    mlcore::_GetForeignProperty(mlcore::ModelPropertyBase *,mlcore::ModelPropertyBase *,std::shared_ptr<mlcore::Predicate>,std::function<mlcore::ModelPropertyBase * ()(void)>)::__foreignPropertiesCache = v61;
  }
  v12 = *(int8x8_t *)(mlcore::_GetForeignProperty(mlcore::ModelPropertyBase *,mlcore::ModelPropertyBase *,std::shared_ptr<mlcore::Predicate>,std::function<mlcore::ModelPropertyBase * ()(void)>)::__foreignPropertiesCache
                    + 8);
  if (v12)
  {
    v13 = *(_QWORD *)&v62[8] ^ *(_QWORD *)v62 ^ *(_QWORD *)&v62[16];
    v14 = (uint8x8_t)vcnt_s8(v12);
    v14.i16[0] = vaddlv_u8(v14);
    if (v14.u32[0] > 1uLL)
    {
      v15 = *(_QWORD *)&v62[8] ^ *(_QWORD *)v62 ^ *(_QWORD *)&v62[16];
      if (v13 >= *(_QWORD *)&v12)
        v15 = v13 % *(_QWORD *)&v12;
    }
    else
    {
      v15 = (*(_QWORD *)&v12 - 1) & v13;
    }
    v16 = *(uint64_t ***)(*(_QWORD *)mlcore::_GetForeignProperty(mlcore::ModelPropertyBase *,mlcore::ModelPropertyBase *,std::shared_ptr<mlcore::Predicate>,std::function<mlcore::ModelPropertyBase * ()(void)>)::__foreignPropertiesCache
                       + 8 * v15);
    if (v16)
    {
      for (i = *v16; i; i = (uint64_t *)*i)
      {
        v18 = i[1];
        if (v18 == v13)
        {
          if (i[2] == *(_QWORD *)v62 && *(_OWORD *)(i + 3) == *(_OWORD *)&v62[8])
          {
            v59 = i[6];
            goto LABEL_109;
          }
        }
        else
        {
          if (v14.u32[0] > 1uLL)
          {
            if (v18 >= *(_QWORD *)&v12)
              v18 %= *(_QWORD *)&v12;
          }
          else
          {
            v18 &= *(_QWORD *)&v12 - 1;
          }
          if (v18 != v15)
            break;
        }
      }
    }
  }
  v19 = *(_QWORD *)(a4 + 24);
  if (!v19)
    std::__throw_bad_function_call[abi:ne180100]();
  v59 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v19 + 48))(v19);
  v20 = mlcore::_GetForeignProperty(mlcore::ModelPropertyBase *,mlcore::ModelPropertyBase *,std::shared_ptr<mlcore::Predicate>,std::function<mlcore::ModelPropertyBase * ()(void)>)::__foreignPropertiesCache;
  if (v63)
  {
    v21 = (unint64_t *)&v63->__shared_owners_;
    do
      v22 = __ldxr(v21);
    while (__stxr(v22 + 1, v21));
  }
  v23 = *(_QWORD *)&v62[8] ^ *(_QWORD *)v62 ^ *(_QWORD *)&v62[16];
  v24 = *(_QWORD *)(v20 + 8);
  if (v24)
  {
    v25 = (uint8x8_t)vcnt_s8((int8x8_t)v24);
    v25.i16[0] = vaddlv_u8(v25);
    if (v25.u32[0] > 1uLL)
    {
      v4 = *(_QWORD *)&v62[8] ^ *(_QWORD *)v62 ^ *(_QWORD *)&v62[16];
      if (v23 >= v24)
        v4 = v23 % v24;
    }
    else
    {
      v4 = (v24 - 1) & v23;
    }
    v26 = *(uint64_t ***)(*(_QWORD *)v20 + 8 * v4);
    if (v26)
    {
      for (j = *v26; j; j = (uint64_t *)*j)
      {
        v28 = j[1];
        if (v28 == v23)
        {
          if (j[2] == *(_QWORD *)v62 && *(_OWORD *)(j + 3) == *(_OWORD *)&v62[8])
            goto LABEL_104;
        }
        else
        {
          if (v25.u32[0] > 1uLL)
          {
            if (v28 >= v24)
              v28 %= v24;
          }
          else
          {
            v28 &= v24 - 1;
          }
          if (v28 != v4)
            break;
        }
      }
    }
  }
  v29 = operator new(0x38uLL);
  v30 = (_QWORD *)(v20 + 16);
  v64[0] = v29;
  v64[1] = v20 + 16;
  *v29 = 0;
  v29[1] = v23;
  *((_OWORD *)v29 + 1) = *(_OWORD *)v62;
  v29[4] = *(_QWORD *)&v62[16];
  v29[5] = v63;
  if (v63)
  {
    v31 = (unint64_t *)&v63->__shared_owners_;
    do
      v32 = __ldxr(v31);
    while (__stxr(v32 + 1, v31));
  }
  v29[6] = v59;
  v65 = 1;
  v33 = (float)(unint64_t)(*(_QWORD *)(v20 + 24) + 1);
  v34 = *(float *)(v20 + 64);
  if (!v24 || (float)(v34 * (float)v24) < v33)
  {
    v35 = 1;
    if (v24 >= 3)
      v35 = (v24 & (v24 - 1)) != 0;
    v36 = v35 | (2 * v24);
    v37 = vcvtps_u32_f32(v33 / v34);
    if (v36 <= v37)
      prime = (int8x8_t)v37;
    else
      prime = (int8x8_t)v36;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
    }
    v24 = *(_QWORD *)(v20 + 8);
    if (*(_QWORD *)&prime > v24)
      goto LABEL_60;
    if (*(_QWORD *)&prime < v24)
    {
      v45 = vcvtps_u32_f32((float)*(unint64_t *)(v20 + 24) / *(float *)(v20 + 64));
      if (v24 < 3 || (v46 = (uint8x8_t)vcnt_s8((int8x8_t)v24), v46.i16[0] = vaddlv_u8(v46), v46.u32[0] > 1uLL))
      {
        v45 = std::__next_prime(v45);
      }
      else
      {
        v47 = 1 << -(char)__clz(v45 - 1);
        if (v45 >= 2)
          v45 = v47;
      }
      if (*(_QWORD *)&prime <= v45)
        prime = (int8x8_t)v45;
      if (*(_QWORD *)&prime >= v24)
      {
        v24 = *(_QWORD *)(v20 + 8);
      }
      else
      {
        if (prime)
        {
LABEL_60:
          if (*(_QWORD *)&prime >> 61)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v39 = operator new(8 * *(_QWORD *)&prime);
          v40 = *(void **)v20;
          *(_QWORD *)v20 = v39;
          if (v40)
            operator delete(v40);
          v41 = 0;
          *(int8x8_t *)(v20 + 8) = prime;
          do
            *(_QWORD *)(*(_QWORD *)v20 + 8 * v41++) = 0;
          while (*(_QWORD *)&prime != v41);
          v42 = (_QWORD *)*v30;
          if (*v30)
          {
            v43 = v42[1];
            v44 = (uint8x8_t)vcnt_s8(prime);
            v44.i16[0] = vaddlv_u8(v44);
            if (v44.u32[0] > 1uLL)
            {
              if (v43 >= *(_QWORD *)&prime)
                v43 %= *(_QWORD *)&prime;
            }
            else
            {
              v43 &= *(_QWORD *)&prime - 1;
            }
            *(_QWORD *)(*(_QWORD *)v20 + 8 * v43) = v30;
            v48 = (_QWORD *)*v42;
            if (*v42)
            {
              do
              {
                v49 = v48[1];
                if (v44.u32[0] > 1uLL)
                {
                  if (v49 >= *(_QWORD *)&prime)
                    v49 %= *(_QWORD *)&prime;
                }
                else
                {
                  v49 &= *(_QWORD *)&prime - 1;
                }
                if (v49 != v43)
                {
                  if (!*(_QWORD *)(*(_QWORD *)v20 + 8 * v49))
                  {
                    *(_QWORD *)(*(_QWORD *)v20 + 8 * v49) = v42;
                    goto LABEL_85;
                  }
                  *v42 = *v48;
                  *v48 = **(_QWORD **)(*(_QWORD *)v20 + 8 * v49);
                  **(_QWORD **)(*(_QWORD *)v20 + 8 * v49) = v48;
                  v48 = v42;
                }
                v49 = v43;
LABEL_85:
                v42 = v48;
                v48 = (_QWORD *)*v48;
                v43 = v49;
              }
              while (v48);
            }
          }
          v24 = (unint64_t)prime;
          goto LABEL_89;
        }
        v58 = *(void **)v20;
        *(_QWORD *)v20 = 0;
        if (v58)
          operator delete(v58);
        v24 = 0;
        *(_QWORD *)(v20 + 8) = 0;
      }
    }
LABEL_89:
    if ((v24 & (v24 - 1)) != 0)
    {
      if (v23 >= v24)
        v4 = v23 % v24;
      else
        v4 = *(_QWORD *)&v62[8] ^ *(_QWORD *)v62 ^ *(_QWORD *)&v62[16];
    }
    else
    {
      v4 = (v24 - 1) & v23;
    }
  }
  v50 = *(_QWORD **)(*(_QWORD *)v20 + 8 * v4);
  v51 = v64[0];
  if (v50)
  {
    *(_QWORD *)v64[0] = *v50;
  }
  else
  {
    *(_QWORD *)v64[0] = *(_QWORD *)(v20 + 16);
    *(_QWORD *)(v20 + 16) = v51;
    *(_QWORD *)(*(_QWORD *)v20 + 8 * v4) = v30;
    if (!*(_QWORD *)v51)
      goto LABEL_103;
    v52 = *(_QWORD *)(*(_QWORD *)v51 + 8);
    if ((v24 & (v24 - 1)) != 0)
    {
      if (v52 >= v24)
        v52 %= v24;
    }
    else
    {
      v52 &= v24 - 1;
    }
    v50 = (_QWORD *)(*(_QWORD *)v20 + 8 * v52);
  }
  *v50 = v51;
LABEL_103:
  v64[0] = 0;
  ++*(_QWORD *)(v20 + 24);
  std::unique_ptr<std::__tree_node<std::shared_ptr<mediaplatform::DatabaseConnection>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::shared_ptr<mediaplatform::DatabaseConnection>,void *>>>>::reset[abi:ne180100]((uint64_t)v64);
LABEL_104:
  if (v63)
  {
    v53 = (unint64_t *)&v63->__shared_owners_;
    do
      v54 = __ldaxr(v53);
    while (__stlxr(v54 - 1, v53));
    if (!v54)
    {
      ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
      std::__shared_weak_count::__release_weak(v63);
    }
  }
LABEL_109:
  std::recursive_mutex::unlock(v10);
  if (v63)
  {
    v55 = (unint64_t *)&v63->__shared_owners_;
    do
      v56 = __ldaxr(v55);
    while (__stlxr(v56 - 1, v55));
    if (!v56)
    {
      ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
      std::__shared_weak_count::__release_weak(v63);
    }
  }
  return v59;
}

void sub_20A660F6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  std::recursive_mutex *v11;
  va_list va;

  va_start(va, a11);
  std::recursive_mutex::unlock(v11);
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::__function::__func<mlcore::GetForeignPropertyBase(mlcore::ModelPropertyBase *,mlcore::ModelPropertyBase *,std::shared_ptr<mlcore::Predicate>)::$_0,std::allocator<mlcore::GetForeignPropertyBase(mlcore::ModelPropertyBase *,mlcore::ModelPropertyBase *,std::shared_ptr<mlcore::Predicate>)::$_0>,mlcore::ModelPropertyBase * ()(void)>::destroy_deallocate(void *a1)
{
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 24);
  operator delete(a1);
}

uint64_t std::__function::__func<mlcore::GetForeignPropertyBase(mlcore::ModelPropertyBase *,mlcore::ModelPropertyBase *,std::shared_ptr<mlcore::Predicate>)::$_0,std::allocator<mlcore::GetForeignPropertyBase(mlcore::ModelPropertyBase *,mlcore::ModelPropertyBase *,std::shared_ptr<mlcore::Predicate>)::$_0>,mlcore::ModelPropertyBase * ()(void)>::operator()(uint64_t a1)
{
  int v2;
  _QWORD *v3;
  void *v4;
  _QWORD *v5;
  uint64_t v6;
  void *v7;
  __int128 v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t ForeignPropertyBase;
  uint64_t v27;
  std::__shared_weak_count *size;
  unint64_t *v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t *v43;
  unint64_t v44;
  unint64_t *v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t *v51;
  unint64_t v52;
  unint64_t *v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t *v59;
  unint64_t v60;
  unint64_t *v61;
  unint64_t v62;
  uint64_t v63;
  size_t v64;
  std::string *v65;
  char *v66;
  char *v67;
  char *v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  const std::string::value_type *v72;
  const std::string::value_type *v73;
  int v74;
  const std::string::value_type *v75;
  std::string::size_type v76;
  std::string *v77;
  __int128 v78;
  uint64_t v79;
  std::string v81;
  std::string __p;

  v2 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 88))(*(_QWORD *)(a1 + 8));
  v3 = *(_QWORD **)(a1 + 8);
  if (v2)
  {
    if (v3)
    else
      v4 = 0;
    v24 = *(_QWORD *)(a1 + 16);
    v25 = (*(uint64_t (**)(void *))(*(_QWORD *)v4 + 16))(v4);
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = 0uLL;
    ForeignPropertyBase = mlcore::GetForeignPropertyBase(v24, v25, (uint64_t *)&__p);
    v27 = (*(uint64_t (**)(void *))(*(_QWORD *)v4 + 24))(v4);
    (*(void (**)(std::string *__return_ptr, void *))(*(_QWORD *)v4 + 32))(&v81, v4);
    v15 = mlcore::GetForeignPropertyBase(ForeignPropertyBase, v27, (uint64_t *)&v81);
    size = (std::__shared_weak_count *)v81.__r_.__value_.__l.__size_;
    if (v81.__r_.__value_.__l.__size_)
    {
      v29 = (unint64_t *)(v81.__r_.__value_.__l.__size_ + 8);
      do
        v30 = __ldaxr(v29);
      while (__stlxr(v30 - 1, v29));
      if (!v30)
      {
        ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
        std::__shared_weak_count::__release_weak(size);
      }
    }
  }
  else
  {
    v5 = *(_QWORD **)(a1 + 16);
    if (v5)
    {
      v6 = v3[1];
      if ((*(unsigned int (**)(_QWORD))(*v5 + 88))(*(_QWORD *)(a1 + 16)))
      {
        while (1)
        {
          (*(void (**)(std::string *__return_ptr))(*(_QWORD *)v7 + 32))(&__p);
          v8 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
          if (__p.__r_.__value_.__l.__size_)
          {
            v9 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
            do
              v10 = __ldaxr(v9);
            while (__stlxr(v10 - 1, v9));
            if (!v10)
            {
              (*(void (**)(_QWORD))(**((_QWORD **)&v8 + 1) + 16))(*((_QWORD *)&v8 + 1));
              std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v8 + 1));
            }
          }
          if ((_QWORD)v8)
            goto LABEL_17;
          v11 = v5[1];
          v12 = (*(uint64_t (**)(void *))(*(_QWORD *)v7 + 16))(v7);
          v5 = (_QWORD *)v12;
          if (v11 == v6)
            break;
          if (!v12)
            goto LABEL_17;
          if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 88))(v12) & 1) == 0 && v5[1] == v6)
          {
            v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 112))(v6);
            v79 = *(_QWORD *)(a1 + 8);
            *(_OWORD *)&__p.__r_.__value_.__l.__data_ = 0uLL;
            return mlcore::GetForeignPropertyBase(v12, v79, (uint64_t *)&__p);
          }
          if (((*(uint64_t (**)(_QWORD *))(*v5 + 88))(v5) & 1) == 0)
            goto LABEL_17;
        }
        v79 = *(_QWORD *)(a1 + 8);
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = 0uLL;
        return mlcore::GetForeignPropertyBase(v12, v79, (uint64_t *)&__p);
      }
LABEL_17:
      v3 = *(_QWORD **)(a1 + 8);
    }
    switch((*(unsigned int (**)(_QWORD *))(*v3 + 80))(v3))
    {
      case 0u:
        v13 = *(_QWORD *)(a1 + 8);
        v14 = operator new();
        v15 = v14;
        v17 = *(_QWORD *)(a1 + 16);
        v16 = *(_QWORD *)(a1 + 24);
        v18 = *(std::__shared_weak_count **)(a1 + 32);
        if (v18)
        {
          p_shared_owners = (unint64_t *)&v18->__shared_owners_;
          do
            v20 = __ldxr(p_shared_owners);
          while (__stxr(v20 + 1, p_shared_owners));
        }
        *(_OWORD *)(v14 + 32) = 0u;
        *(_OWORD *)(v14 + 48) = 0u;
        *(_OWORD *)(v14 + 16) = 0u;
        *(_QWORD *)v14 = &off_24C337DF0;
        *(_QWORD *)(v14 + 64) = &unk_24C337E90;
        *(_QWORD *)(v14 + 72) = v17;
        *(_QWORD *)(v14 + 80) = v13;
        *(_QWORD *)(v14 + 88) = v16;
        *(_QWORD *)(v14 + 96) = v18;
        if (v18)
        {
          v21 = (unint64_t *)&v18->__shared_owners_;
          do
            v22 = __ldxr(v21);
          while (__stxr(v22 + 1, v21));
          do
            v23 = __ldaxr(v21);
          while (__stlxr(v23 - 1, v21));
          goto LABEL_65;
        }
        break;
      case 1u:
        v31 = *(_QWORD *)(a1 + 8);
        v32 = operator new();
        v15 = v32;
        v34 = *(_QWORD *)(a1 + 16);
        v33 = *(_QWORD *)(a1 + 24);
        v18 = *(std::__shared_weak_count **)(a1 + 32);
        if (v18)
        {
          v35 = (unint64_t *)&v18->__shared_owners_;
          do
            v36 = __ldxr(v35);
          while (__stxr(v36 + 1, v35));
        }
        *(_OWORD *)(v32 + 32) = 0u;
        *(_OWORD *)(v32 + 48) = 0u;
        *(_OWORD *)(v32 + 16) = 0u;
        *(_QWORD *)v32 = &off_24C337EC8;
        *(_QWORD *)(v32 + 64) = &unk_24C337F68;
        *(_QWORD *)(v32 + 72) = v34;
        *(_QWORD *)(v32 + 80) = v31;
        *(_QWORD *)(v32 + 88) = v33;
        *(_QWORD *)(v32 + 96) = v18;
        if (v18)
        {
          v37 = (unint64_t *)&v18->__shared_owners_;
          do
            v38 = __ldxr(v37);
          while (__stxr(v38 + 1, v37));
          do
            v23 = __ldaxr(v37);
          while (__stlxr(v23 - 1, v37));
          goto LABEL_65;
        }
        break;
      case 2u:
        v39 = *(_QWORD *)(a1 + 8);
        v40 = operator new();
        v15 = v40;
        v42 = *(_QWORD *)(a1 + 16);
        v41 = *(_QWORD *)(a1 + 24);
        v18 = *(std::__shared_weak_count **)(a1 + 32);
        if (v18)
        {
          v43 = (unint64_t *)&v18->__shared_owners_;
          do
            v44 = __ldxr(v43);
          while (__stxr(v44 + 1, v43));
        }
        *(_OWORD *)(v40 + 32) = 0u;
        *(_OWORD *)(v40 + 48) = 0u;
        *(_OWORD *)(v40 + 16) = 0u;
        *(_QWORD *)v40 = &off_24C337D18;
        *(_QWORD *)(v40 + 64) = &unk_24C337DB8;
        *(_QWORD *)(v40 + 72) = v42;
        *(_QWORD *)(v40 + 80) = v39;
        *(_QWORD *)(v40 + 88) = v41;
        *(_QWORD *)(v40 + 96) = v18;
        if (v18)
        {
          v45 = (unint64_t *)&v18->__shared_owners_;
          do
            v46 = __ldxr(v45);
          while (__stxr(v46 + 1, v45));
          do
            v23 = __ldaxr(v45);
          while (__stlxr(v23 - 1, v45));
          goto LABEL_65;
        }
        break;
      case 3u:
        v47 = *(_QWORD *)(a1 + 8);
        v48 = operator new();
        v15 = v48;
        v50 = *(_QWORD *)(a1 + 16);
        v49 = *(_QWORD *)(a1 + 24);
        v18 = *(std::__shared_weak_count **)(a1 + 32);
        if (v18)
        {
          v51 = (unint64_t *)&v18->__shared_owners_;
          do
            v52 = __ldxr(v51);
          while (__stxr(v52 + 1, v51));
        }
        *(_OWORD *)(v48 + 32) = 0u;
        *(_OWORD *)(v48 + 48) = 0u;
        *(_OWORD *)(v48 + 16) = 0u;
        *(_QWORD *)v48 = &off_24C337C40;
        *(_QWORD *)(v48 + 64) = &unk_24C337CE0;
        *(_QWORD *)(v48 + 72) = v50;
        *(_QWORD *)(v48 + 80) = v47;
        *(_QWORD *)(v48 + 88) = v49;
        *(_QWORD *)(v48 + 96) = v18;
        if (v18)
        {
          v53 = (unint64_t *)&v18->__shared_owners_;
          do
            v54 = __ldxr(v53);
          while (__stxr(v54 + 1, v53));
          do
            v23 = __ldaxr(v53);
          while (__stlxr(v23 - 1, v53));
          goto LABEL_65;
        }
        break;
      case 4u:
        v55 = *(_QWORD *)(a1 + 8);
        v56 = operator new();
        v15 = v56;
        v58 = *(_QWORD *)(a1 + 16);
        v57 = *(_QWORD *)(a1 + 24);
        v18 = *(std::__shared_weak_count **)(a1 + 32);
        if (v18)
        {
          v59 = (unint64_t *)&v18->__shared_owners_;
          do
            v60 = __ldxr(v59);
          while (__stxr(v60 + 1, v59));
        }
        *(_OWORD *)(v56 + 32) = 0u;
        *(_OWORD *)(v56 + 48) = 0u;
        *(_OWORD *)(v56 + 16) = 0u;
        *(_QWORD *)v56 = &off_24C337B68;
        *(_QWORD *)(v56 + 64) = &unk_24C337C08;
        *(_QWORD *)(v56 + 72) = v58;
        *(_QWORD *)(v56 + 80) = v55;
        *(_QWORD *)(v56 + 88) = v57;
        *(_QWORD *)(v56 + 96) = v18;
        if (v18)
        {
          v61 = (unint64_t *)&v18->__shared_owners_;
          do
            v62 = __ldxr(v61);
          while (__stxr(v62 + 1, v61));
          do
            v23 = __ldaxr(v61);
          while (__stlxr(v23 - 1, v61));
LABEL_65:
          if (!v23)
          {
            ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
            std::__shared_weak_count::__release_weak(v18);
          }
        }
        break;
      default:
        v15 = 0;
        break;
    }
    v63 = *(_QWORD *)(a1 + 16);
    if (*(char *)(v63 + 39) >= 0)
      v64 = *(unsigned __int8 *)(v63 + 39);
    else
      v64 = *(_QWORD *)(v63 + 24);
    v65 = &v81;
    std::string::basic_string[abi:ne180100]((uint64_t)&v81, v64 + 2);
    if ((v81.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v65 = (std::string *)v81.__r_.__value_.__r.__words[0];
    if (v64)
    {
      v68 = *(char **)(v63 + 16);
      v67 = (char *)(v63 + 16);
      v66 = v68;
      if (v67[23] >= 0)
        v69 = v67;
      else
        v69 = v66;
      memmove(v65, v69, v64);
    }
    strcpy((char *)v65 + v64, "->");
    v70 = *(_QWORD *)(a1 + 8);
    v73 = *(const std::string::value_type **)(v70 + 16);
    v71 = v70 + 16;
    v72 = v73;
    v74 = *(char *)(v71 + 23);
    if (v74 >= 0)
      v75 = (const std::string::value_type *)v71;
    else
      v75 = v72;
    if (v74 >= 0)
      v76 = *(unsigned __int8 *)(v71 + 23);
    else
      v76 = *(_QWORD *)(v71 + 8);
    v77 = std::string::append(&v81, v75, v76);
    v78 = *(_OWORD *)&v77->__r_.__value_.__l.__data_;
    __p.__r_.__value_.__r.__words[2] = v77->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v78;
    v77->__r_.__value_.__l.__size_ = 0;
    v77->__r_.__value_.__r.__words[2] = 0;
    v77->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v81.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v81.__r_.__value_.__l.__data_);
    mlcore::EntityClass::setPropertyForName(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 8), v15, &__p);
    *(_QWORD *)(v15 + 8) = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  return v15;
}

void sub_20A661698(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t mlcore::ModelPropertyBase::isForeignProperty(mlcore::ModelPropertyBase *this)
{
  return 0;
}

uint64_t mlcore::ForeignProperty<int>::isForeignProperty()
{
  return 1;
}

uint64_t `non-virtual thunk to'mlcore::ForeignProperty<int>::baseProperty(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8);
}

uint64_t `non-virtual thunk to'mlcore::ForeignProperty<int>::predicate@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(result + 32);
  *a2 = *(_QWORD *)(result + 24);
  a2[1] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void std::__function::__func<mlcore::ForeignProperty<int> * mlcore::GetForeignProperty<int>(mlcore::ModelPropertyBase *,mlcore::ModelProperty<int> *,std::shared_ptr<mlcore::Predicate>)::{lambda(void)#1},std::allocator<mlcore::ForeignProperty<int> * mlcore::GetForeignProperty<int>(mlcore::ModelPropertyBase *,mlcore::ModelProperty<int> *,std::shared_ptr<mlcore::Predicate>)::{lambda(void)#1}>,mlcore::ModelPropertyBase * ()(void)>::destroy_deallocate(void *a1)
{
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 24);
  operator delete(a1);
}

void std::__function::__func<mlcore::ForeignProperty<std::string> * mlcore::GetForeignProperty<std::string>(mlcore::ModelPropertyBase *,mlcore::ModelProperty<std::string> *,std::shared_ptr<mlcore::Predicate>)::{lambda(void)#1},std::allocator<mlcore::ForeignProperty<std::string> * mlcore::GetForeignProperty<std::string>(mlcore::ModelPropertyBase *,mlcore::ModelProperty<std::string> *,std::shared_ptr<mlcore::Predicate>)::{lambda(void)#1}>,mlcore::ModelPropertyBase * ()(void)>::destroy_deallocate(void *a1)
{
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 24);
  operator delete(a1);
}

uint64_t std::__function::__func<mlcore::ForeignProperty<std::string> * mlcore::GetForeignProperty<std::string>(mlcore::ModelPropertyBase *,mlcore::ModelProperty<std::string> *,std::shared_ptr<mlcore::Predicate>)::{lambda(void)#1},std::allocator<mlcore::ForeignProperty<std::string> * mlcore::GetForeignProperty<std::string>(mlcore::ModelPropertyBase *,mlcore::ModelProperty<std::string> *,std::shared_ptr<mlcore::Predicate>)::{lambda(void)#1}>,mlcore::ModelPropertyBase * ()(void)>::operator()(uint64_t a1)
{
  int v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t Foreign;
  _QWORD *v7;
  uint64_t v8;
  void *v9;
  __int128 v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int8x16_t v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  size_t v26;
  std::string *v27;
  char *v28;
  char *v29;
  char *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  const std::string::value_type *v34;
  const std::string::value_type *v35;
  int v36;
  const std::string::value_type *v37;
  std::string::size_type v38;
  std::string *v39;
  __int128 v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  std::string::size_type size;
  unint64_t *v48;
  unint64_t v49;
  std::__shared_weak_count *v50;
  uint64_t v52;
  std::string::size_type v53;
  unint64_t *v54;
  unint64_t v55;
  unint64_t *v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t *v60;
  unint64_t v61;
  unint64_t *v62;
  std::string v63;
  std::string __p;

  v2 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 88))(*(_QWORD *)(a1 + 8));
  v3 = *(_QWORD **)(a1 + 8);
  if (v2)
  {
    v4 = (*(uint64_t (**)(_QWORD))(*v3 + 120))(*(_QWORD *)(a1 + 8));
    switch((*(unsigned int (**)(uint64_t))(*(_QWORD *)v4 + 80))(v4))
    {
      case 0u:
        v5 = *(_QWORD *)(a1 + 16);
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = 0uLL;
        Foreign = mlcore::GetForeignProperty<int>(v5, v4, (uint64_t *)&__p);
        goto LABEL_51;
      case 1u:
        v42 = *(_QWORD *)(a1 + 16);
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = 0uLL;
        Foreign = mlcore::GetForeignProperty<long long>(v42, v4, (uint64_t *)&__p);
        goto LABEL_51;
      case 2u:
        v43 = *(_QWORD *)(a1 + 16);
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = 0uLL;
        Foreign = mlcore::GetForeignProperty<double>(v43, v4, (uint64_t *)&__p);
        goto LABEL_51;
      case 3u:
        v44 = *(_QWORD *)(a1 + 16);
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = 0uLL;
        Foreign = mlcore::GetForeignProperty<std::string>(v44, v4, (uint64_t *)&__p);
        goto LABEL_51;
      case 4u:
        v45 = *(_QWORD *)(a1 + 16);
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = 0uLL;
        Foreign = mlcore::GetForeignProperty<mediaplatform::Data>(v45, v4, (uint64_t *)&__p);
LABEL_51:
        v41 = Foreign;
        break;
      default:
        v41 = 0;
        break;
    }
    v46 = (*(uint64_t (**)(_QWORD *))(*v3 + 128))(v3);
    (*(void (**)(std::string *__return_ptr, _QWORD *))(*v3 + 136))(&v63, v3);
    v16 = mlcore::GetForeignProperty<std::string>(v41, v46, (uint64_t *)&v63);
    size = v63.__r_.__value_.__l.__size_;
    if (v63.__r_.__value_.__l.__size_)
    {
      v48 = (unint64_t *)(v63.__r_.__value_.__l.__size_ + 8);
      do
        v49 = __ldaxr(v48);
      while (__stlxr(v49 - 1, v48));
      if (!v49)
      {
        (*(void (**)(std::string::size_type))(*(_QWORD *)size + 16))(size);
        v50 = (std::__shared_weak_count *)size;
LABEL_57:
        std::__shared_weak_count::__release_weak(v50);
      }
    }
  }
  else
  {
    v7 = *(_QWORD **)(a1 + 16);
    if (v7)
    {
      v8 = v3[1];
      if ((*(unsigned int (**)(_QWORD))(*v7 + 88))(*(_QWORD *)(a1 + 16)))
      {
        while (1)
        {
          (*(void (**)(std::string *__return_ptr))(*(_QWORD *)v9 + 32))(&__p);
          v10 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
          if (__p.__r_.__value_.__l.__size_)
          {
            v11 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
            do
              v12 = __ldaxr(v11);
            while (__stlxr(v12 - 1, v11));
            if (!v12)
            {
              (*(void (**)(_QWORD))(**((_QWORD **)&v10 + 1) + 16))(*((_QWORD *)&v10 + 1));
              std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v10 + 1));
            }
          }
          if ((_QWORD)v10)
            goto LABEL_17;
          v13 = v7[1];
          v14 = (*(uint64_t (**)(void *))(*(_QWORD *)v9 + 16))(v9);
          v7 = (_QWORD *)v14;
          if (v13 == v8)
            break;
          if (!v14)
            goto LABEL_17;
          if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 88))(v14) & 1) == 0 && v7[1] == v8)
          {
            v58 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 112))(v8);
            v59 = *(_QWORD *)(a1 + 8);
            v53 = *(_QWORD *)(a1 + 32);
            __p.__r_.__value_.__r.__words[0] = *(_QWORD *)(a1 + 24);
            __p.__r_.__value_.__l.__size_ = v53;
            if (v53)
            {
              v60 = (unint64_t *)(v53 + 8);
              do
                v61 = __ldxr(v60);
              while (__stxr(v61 + 1, v60));
            }
            v16 = mlcore::GetForeignProperty<std::string>(v58, v59, (uint64_t *)&__p);
            if (!v53)
              return v16;
            v62 = (unint64_t *)(v53 + 8);
            do
              v57 = __ldaxr(v62);
            while (__stlxr(v57 - 1, v62));
LABEL_72:
            if (v57)
              return v16;
            (*(void (**)(std::string::size_type))(*(_QWORD *)v53 + 16))(v53);
            v50 = (std::__shared_weak_count *)v53;
            goto LABEL_57;
          }
          if (((*(uint64_t (**)(_QWORD *))(*v7 + 88))(v7) & 1) == 0)
            goto LABEL_17;
        }
        v52 = *(_QWORD *)(a1 + 8);
        v53 = *(_QWORD *)(a1 + 32);
        __p.__r_.__value_.__r.__words[0] = *(_QWORD *)(a1 + 24);
        __p.__r_.__value_.__l.__size_ = v53;
        if (v53)
        {
          v54 = (unint64_t *)(v53 + 8);
          do
            v55 = __ldxr(v54);
          while (__stxr(v55 + 1, v54));
        }
        v16 = mlcore::GetForeignProperty<std::string>(v14, v52, (uint64_t *)&__p);
        if (!v53)
          return v16;
        v56 = (unint64_t *)(v53 + 8);
        do
          v57 = __ldaxr(v56);
        while (__stlxr(v57 - 1, v56));
        goto LABEL_72;
      }
    }
LABEL_17:
    v15 = operator new();
    v16 = v15;
    v17 = *(int8x16_t *)(a1 + 8);
    v18 = *(_QWORD *)(a1 + 24);
    v19 = *(std::__shared_weak_count **)(a1 + 32);
    if (v19)
    {
      p_shared_owners = (unint64_t *)&v19->__shared_owners_;
      do
        v21 = __ldxr(p_shared_owners);
      while (__stxr(v21 + 1, p_shared_owners));
    }
    *(_OWORD *)(v15 + 32) = 0u;
    *(_OWORD *)(v15 + 48) = 0u;
    *(_OWORD *)(v15 + 16) = 0u;
    *(_QWORD *)v15 = &off_24C337C40;
    *(_QWORD *)(v15 + 64) = &unk_24C337CE0;
    *(int8x16_t *)(v15 + 72) = vextq_s8(v17, v17, 8uLL);
    *(_QWORD *)(v15 + 88) = v18;
    *(_QWORD *)(v15 + 96) = v19;
    if (v19)
    {
      v22 = (unint64_t *)&v19->__shared_owners_;
      do
        v23 = __ldxr(v22);
      while (__stxr(v23 + 1, v22));
      do
        v24 = __ldaxr(v22);
      while (__stlxr(v24 - 1, v22));
      if (!v24)
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
    }
    v25 = *(_QWORD *)(a1 + 16);
    if (*(char *)(v25 + 39) >= 0)
      v26 = *(unsigned __int8 *)(v25 + 39);
    else
      v26 = *(_QWORD *)(v25 + 24);
    v27 = &v63;
    std::string::basic_string[abi:ne180100]((uint64_t)&v63, v26 + 2);
    if ((v63.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v27 = (std::string *)v63.__r_.__value_.__r.__words[0];
    if (v26)
    {
      v30 = *(char **)(v25 + 16);
      v29 = (char *)(v25 + 16);
      v28 = v30;
      if (v29[23] >= 0)
        v31 = v29;
      else
        v31 = v28;
      memmove(v27, v31, v26);
    }
    strcpy((char *)v27 + v26, "->");
    v32 = *(_QWORD *)(a1 + 8);
    v35 = *(const std::string::value_type **)(v32 + 16);
    v33 = v32 + 16;
    v34 = v35;
    v36 = *(char *)(v33 + 23);
    if (v36 >= 0)
      v37 = (const std::string::value_type *)v33;
    else
      v37 = v34;
    if (v36 >= 0)
      v38 = *(unsigned __int8 *)(v33 + 23);
    else
      v38 = *(_QWORD *)(v33 + 8);
    v39 = std::string::append(&v63, v37, v38);
    v40 = *(_OWORD *)&v39->__r_.__value_.__l.__data_;
    __p.__r_.__value_.__r.__words[2] = v39->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v40;
    v39->__r_.__value_.__l.__size_ = 0;
    v39->__r_.__value_.__r.__words[2] = 0;
    v39->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v63.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v63.__r_.__value_.__l.__data_);
    mlcore::EntityClass::setPropertyForName(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 8), v16, &__p);
    *(_QWORD *)(v16 + 8) = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  return v16;
}

void sub_20A661C6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  std::__shared_weak_count *v21;
  unint64_t *p_shared_owners;
  unint64_t v24;

  if (v21)
  {
    p_shared_owners = (unint64_t *)&v21->__shared_owners_;
    do
      v24 = __ldaxr(p_shared_owners);
    while (__stlxr(v24 - 1, p_shared_owners));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  _Unwind_Resume(exception_object);
}

void std::__function::__func<mlcore::ForeignProperty<long long> * mlcore::GetForeignProperty<long long>(mlcore::ModelPropertyBase *,mlcore::ModelProperty<long long> *,std::shared_ptr<mlcore::Predicate>)::{lambda(void)#1},std::allocator<mlcore::ForeignProperty<long long> * mlcore::GetForeignProperty<long long>(mlcore::ModelPropertyBase *,mlcore::ModelProperty<long long> *,std::shared_ptr<mlcore::Predicate>)::{lambda(void)#1}>,mlcore::ModelPropertyBase * ()(void)>::destroy_deallocate(void *a1)
{
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 24);
  operator delete(a1);
}

uint64_t std::__function::__func<mlcore::ForeignProperty<int> * mlcore::GetForeignProperty<int>(mlcore::ModelPropertyBase *,mlcore::ModelProperty<int> *,std::shared_ptr<mlcore::Predicate>)::{lambda(void)#1},std::allocator<mlcore::ForeignProperty<int> * mlcore::GetForeignProperty<int>(mlcore::ModelPropertyBase *,mlcore::ModelProperty<int> *,std::shared_ptr<mlcore::Predicate>)::{lambda(void)#1}>,mlcore::ModelPropertyBase * ()(void)>::operator()(uint64_t a1)
{
  int v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t Foreign;
  _QWORD *v7;
  uint64_t v8;
  void *v9;
  __int128 v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int8x16_t v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  size_t v26;
  std::string *v27;
  char *v28;
  char *v29;
  char *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  const std::string::value_type *v34;
  const std::string::value_type *v35;
  int v36;
  const std::string::value_type *v37;
  std::string::size_type v38;
  std::string *v39;
  __int128 v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  std::string::size_type size;
  unint64_t *v48;
  unint64_t v49;
  std::__shared_weak_count *v50;
  uint64_t v52;
  std::string::size_type v53;
  unint64_t *v54;
  unint64_t v55;
  unint64_t *v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t *v60;
  unint64_t v61;
  unint64_t *v62;
  std::string v63;
  std::string __p;

  v2 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 88))(*(_QWORD *)(a1 + 8));
  v3 = *(_QWORD **)(a1 + 8);
  if (v2)
  {
    v4 = (*(uint64_t (**)(_QWORD))(*v3 + 120))(*(_QWORD *)(a1 + 8));
    switch((*(unsigned int (**)(uint64_t))(*(_QWORD *)v4 + 80))(v4))
    {
      case 0u:
        v5 = *(_QWORD *)(a1 + 16);
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = 0uLL;
        Foreign = mlcore::GetForeignProperty<int>(v5, v4, (uint64_t *)&__p);
        goto LABEL_51;
      case 1u:
        v42 = *(_QWORD *)(a1 + 16);
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = 0uLL;
        Foreign = mlcore::GetForeignProperty<long long>(v42, v4, (uint64_t *)&__p);
        goto LABEL_51;
      case 2u:
        v43 = *(_QWORD *)(a1 + 16);
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = 0uLL;
        Foreign = mlcore::GetForeignProperty<double>(v43, v4, (uint64_t *)&__p);
        goto LABEL_51;
      case 3u:
        v44 = *(_QWORD *)(a1 + 16);
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = 0uLL;
        Foreign = mlcore::GetForeignProperty<std::string>(v44, v4, (uint64_t *)&__p);
        goto LABEL_51;
      case 4u:
        v45 = *(_QWORD *)(a1 + 16);
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = 0uLL;
        Foreign = mlcore::GetForeignProperty<mediaplatform::Data>(v45, v4, (uint64_t *)&__p);
LABEL_51:
        v41 = Foreign;
        break;
      default:
        v41 = 0;
        break;
    }
    v46 = (*(uint64_t (**)(_QWORD *))(*v3 + 128))(v3);
    (*(void (**)(std::string *__return_ptr, _QWORD *))(*v3 + 136))(&v63, v3);
    v16 = mlcore::GetForeignProperty<int>(v41, v46, (uint64_t *)&v63);
    size = v63.__r_.__value_.__l.__size_;
    if (v63.__r_.__value_.__l.__size_)
    {
      v48 = (unint64_t *)(v63.__r_.__value_.__l.__size_ + 8);
      do
        v49 = __ldaxr(v48);
      while (__stlxr(v49 - 1, v48));
      if (!v49)
      {
        (*(void (**)(std::string::size_type))(*(_QWORD *)size + 16))(size);
        v50 = (std::__shared_weak_count *)size;
LABEL_57:
        std::__shared_weak_count::__release_weak(v50);
      }
    }
  }
  else
  {
    v7 = *(_QWORD **)(a1 + 16);
    if (v7)
    {
      v8 = v3[1];
      if ((*(unsigned int (**)(_QWORD))(*v7 + 88))(*(_QWORD *)(a1 + 16)))
      {
        while (1)
        {
          (*(void (**)(std::string *__return_ptr))(*(_QWORD *)v9 + 32))(&__p);
          v10 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
          if (__p.__r_.__value_.__l.__size_)
          {
            v11 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
            do
              v12 = __ldaxr(v11);
            while (__stlxr(v12 - 1, v11));
            if (!v12)
            {
              (*(void (**)(_QWORD))(**((_QWORD **)&v10 + 1) + 16))(*((_QWORD *)&v10 + 1));
              std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v10 + 1));
            }
          }
          if ((_QWORD)v10)
            goto LABEL_17;
          v13 = v7[1];
          v14 = (*(uint64_t (**)(void *))(*(_QWORD *)v9 + 16))(v9);
          v7 = (_QWORD *)v14;
          if (v13 == v8)
            break;
          if (!v14)
            goto LABEL_17;
          if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 88))(v14) & 1) == 0 && v7[1] == v8)
          {
            v58 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 112))(v8);
            v59 = *(_QWORD *)(a1 + 8);
            v53 = *(_QWORD *)(a1 + 32);
            __p.__r_.__value_.__r.__words[0] = *(_QWORD *)(a1 + 24);
            __p.__r_.__value_.__l.__size_ = v53;
            if (v53)
            {
              v60 = (unint64_t *)(v53 + 8);
              do
                v61 = __ldxr(v60);
              while (__stxr(v61 + 1, v60));
            }
            v16 = mlcore::GetForeignProperty<int>(v58, v59, (uint64_t *)&__p);
            if (!v53)
              return v16;
            v62 = (unint64_t *)(v53 + 8);
            do
              v57 = __ldaxr(v62);
            while (__stlxr(v57 - 1, v62));
LABEL_72:
            if (v57)
              return v16;
            (*(void (**)(std::string::size_type))(*(_QWORD *)v53 + 16))(v53);
            v50 = (std::__shared_weak_count *)v53;
            goto LABEL_57;
          }
          if (((*(uint64_t (**)(_QWORD *))(*v7 + 88))(v7) & 1) == 0)
            goto LABEL_17;
        }
        v52 = *(_QWORD *)(a1 + 8);
        v53 = *(_QWORD *)(a1 + 32);
        __p.__r_.__value_.__r.__words[0] = *(_QWORD *)(a1 + 24);
        __p.__r_.__value_.__l.__size_ = v53;
        if (v53)
        {
          v54 = (unint64_t *)(v53 + 8);
          do
            v55 = __ldxr(v54);
          while (__stxr(v55 + 1, v54));
        }
        v16 = mlcore::GetForeignProperty<int>(v14, v52, (uint64_t *)&__p);
        if (!v53)
          return v16;
        v56 = (unint64_t *)(v53 + 8);
        do
          v57 = __ldaxr(v56);
        while (__stlxr(v57 - 1, v56));
        goto LABEL_72;
      }
    }
LABEL_17:
    v15 = operator new();
    v16 = v15;
    v17 = *(int8x16_t *)(a1 + 8);
    v18 = *(_QWORD *)(a1 + 24);
    v19 = *(std::__shared_weak_count **)(a1 + 32);
    if (v19)
    {
      p_shared_owners = (unint64_t *)&v19->__shared_owners_;
      do
        v21 = __ldxr(p_shared_owners);
      while (__stxr(v21 + 1, p_shared_owners));
    }
    *(_OWORD *)(v15 + 32) = 0u;
    *(_OWORD *)(v15 + 48) = 0u;
    *(_OWORD *)(v15 + 16) = 0u;
    *(_QWORD *)v15 = &off_24C337DF0;
    *(_QWORD *)(v15 + 64) = &unk_24C337E90;
    *(int8x16_t *)(v15 + 72) = vextq_s8(v17, v17, 8uLL);
    *(_QWORD *)(v15 + 88) = v18;
    *(_QWORD *)(v15 + 96) = v19;
    if (v19)
    {
      v22 = (unint64_t *)&v19->__shared_owners_;
      do
        v23 = __ldxr(v22);
      while (__stxr(v23 + 1, v22));
      do
        v24 = __ldaxr(v22);
      while (__stlxr(v24 - 1, v22));
      if (!v24)
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
    }
    v25 = *(_QWORD *)(a1 + 16);
    if (*(char *)(v25 + 39) >= 0)
      v26 = *(unsigned __int8 *)(v25 + 39);
    else
      v26 = *(_QWORD *)(v25 + 24);
    v27 = &v63;
    std::string::basic_string[abi:ne180100]((uint64_t)&v63, v26 + 2);
    if ((v63.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v27 = (std::string *)v63.__r_.__value_.__r.__words[0];
    if (v26)
    {
      v30 = *(char **)(v25 + 16);
      v29 = (char *)(v25 + 16);
      v28 = v30;
      if (v29[23] >= 0)
        v31 = v29;
      else
        v31 = v28;
      memmove(v27, v31, v26);
    }
    strcpy((char *)v27 + v26, "->");
    v32 = *(_QWORD *)(a1 + 8);
    v35 = *(const std::string::value_type **)(v32 + 16);
    v33 = v32 + 16;
    v34 = v35;
    v36 = *(char *)(v33 + 23);
    if (v36 >= 0)
      v37 = (const std::string::value_type *)v33;
    else
      v37 = v34;
    if (v36 >= 0)
      v38 = *(unsigned __int8 *)(v33 + 23);
    else
      v38 = *(_QWORD *)(v33 + 8);
    v39 = std::string::append(&v63, v37, v38);
    v40 = *(_OWORD *)&v39->__r_.__value_.__l.__data_;
    __p.__r_.__value_.__r.__words[2] = v39->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v40;
    v39->__r_.__value_.__l.__size_ = 0;
    v39->__r_.__value_.__r.__words[2] = 0;
    v39->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v63.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v63.__r_.__value_.__l.__data_);
    mlcore::EntityClass::setPropertyForName(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 8), v16, &__p);
    *(_QWORD *)(v16 + 8) = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  return v16;
}

void sub_20A662234(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  std::__shared_weak_count *v21;
  unint64_t *p_shared_owners;
  unint64_t v24;

  if (v21)
  {
    p_shared_owners = (unint64_t *)&v21->__shared_owners_;
    do
      v24 = __ldaxr(p_shared_owners);
    while (__stlxr(v24 - 1, p_shared_owners));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  _Unwind_Resume(exception_object);
}

void mlcore::ForeignProperty<int>::_SQLJoinClauses(_QWORD *a1@<X0>, uint64_t a2@<X1>, char **a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  __int128 v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  __int128 v35;
  unint64_t *v36;
  unint64_t v37;
  unint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  char *v45;
  uint64_t v46;
  char *v47;
  char *v48;
  char *v49;
  char *v50;
  __int128 v51;
  int64x2_t v52;
  char *v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  __int128 v63;
  __int128 v64;
  uint64_t v65;
  std::__shared_weak_count *v66;
  __int128 v67;
  uint64_t v68;
  std::__shared_weak_count *v69;
  __int128 v70;
  void *__p[3];
  _QWORD *v72;
  _QWORD *v73;
  _BYTE v74[24];
  char *v75;
  _QWORD *v76;

  v6 = (*(uint64_t (**)(_QWORD *))(*a1 + 120))(a1);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 104))(v6, a2);
  v7 = (*(uint64_t (**)(_QWORD *))(*a1 + 120))(a1);
  (*(void (**)(_QWORD **__return_ptr, _QWORD *))(*a1 + 64))(&v72, a1);
  v8 = v72;
  v9 = v73;
  if (v72 != v73)
  {
    do
    {
      v10 = *v8;
      if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 88))(a2) != v10)
      {
        (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)v7 + 64))(__p, v7);
        v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 72))(v7);
        v68 = 0;
        v69 = 0;
        (*(void (**)(_BYTE *__return_ptr, uint64_t, uint64_t *))(*(_QWORD *)v7 + 96))(v74, v7, &v68);
        LODWORD(v64) = 13;
        (*(void (**)(__int128 *__return_ptr, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v10 + 32))(&v67, v10, *(_QWORD *)__p[0], v11);
        std::allocate_shared[abi:ne180100]<mediaplatform::SQLBinaryExpression,std::allocator<mediaplatform::SQLBinaryExpression>,std::shared_ptr<mediaplatform::SQLExpression>,mediaplatform::SQLBinaryExpression::BinaryOperator,std::shared_ptr<mediaplatform::SQLColumnNameExpression>,void>(&v70, (__int128 *)v74, (int *)&v64, &v67);
        v12 = (std::__shared_weak_count *)*((_QWORD *)&v67 + 1);
        if (*((_QWORD *)&v67 + 1))
        {
          v13 = (unint64_t *)(*((_QWORD *)&v67 + 1) + 8);
          do
            v14 = __ldaxr(v13);
          while (__stlxr(v14 - 1, v13));
          if (!v14)
          {
            ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
            std::__shared_weak_count::__release_weak(v12);
          }
        }
        v15 = *(std::__shared_weak_count **)&v74[8];
        if (*(_QWORD *)&v74[8])
        {
          v16 = (unint64_t *)(*(_QWORD *)&v74[8] + 8);
          do
            v17 = __ldaxr(v16);
          while (__stlxr(v17 - 1, v16));
          if (!v17)
          {
            ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
            std::__shared_weak_count::__release_weak(v15);
          }
        }
        v18 = v69;
        if (v69)
        {
          p_shared_owners = (unint64_t *)&v69->__shared_owners_;
          do
            v20 = __ldaxr(p_shared_owners);
          while (__stlxr(v20 - 1, p_shared_owners));
          if (!v20)
          {
            ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
            std::__shared_weak_count::__release_weak(v18);
          }
        }
        v21 = a1[11];
        if (v21)
        {
          LODWORD(v64) = 1;
          v65 = 0;
          v66 = 0;
          (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t *))(*(_QWORD *)v21 + 64))(&v67, v21, &v65);
          v22 = (std::__shared_weak_count *)*((_QWORD *)&v70 + 1);
          std::allocate_shared[abi:ne180100]<mediaplatform::SQLBinaryExpression,std::allocator<mediaplatform::SQLBinaryExpression>,std::shared_ptr<mediaplatform::SQLBinaryExpression> &,mediaplatform::SQLBinaryExpression::BinaryOperator,std::shared_ptr<mediaplatform::SQLExpression>,void>(v74, v70, *((std::__shared_weak_count **)&v70 + 1), (int *)&v64, &v67);
          v23 = *(_OWORD *)v74;
          *(_OWORD *)v74 = 0uLL;
          v70 = v23;
          if (v22)
          {
            v24 = (unint64_t *)&v22->__shared_owners_;
            do
              v25 = __ldaxr(v24);
            while (__stlxr(v25 - 1, v24));
            if (!v25)
            {
              ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
              std::__shared_weak_count::__release_weak(v22);
            }
          }
          v26 = *(std::__shared_weak_count **)&v74[8];
          if (*(_QWORD *)&v74[8])
          {
            v27 = (unint64_t *)(*(_QWORD *)&v74[8] + 8);
            do
              v28 = __ldaxr(v27);
            while (__stlxr(v28 - 1, v27));
            if (!v28)
            {
              ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
              std::__shared_weak_count::__release_weak(v26);
            }
          }
          v29 = (std::__shared_weak_count *)*((_QWORD *)&v67 + 1);
          if (*((_QWORD *)&v67 + 1))
          {
            v30 = (unint64_t *)(*((_QWORD *)&v67 + 1) + 8);
            do
              v31 = __ldaxr(v30);
            while (__stlxr(v31 - 1, v30));
            if (!v31)
            {
              ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
              std::__shared_weak_count::__release_weak(v29);
            }
          }
          v32 = v66;
          if (v66)
          {
            v33 = (unint64_t *)&v66->__shared_owners_;
            do
              v34 = __ldaxr(v33);
            while (__stlxr(v34 - 1, v33));
            if (!v34)
            {
              ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
              std::__shared_weak_count::__release_weak(v32);
            }
          }
        }
        std::allocate_shared[abi:ne180100]<mediaplatform::SQLOnJoinConstraint,std::allocator<mediaplatform::SQLOnJoinConstraint>,std::shared_ptr<mediaplatform::SQLBinaryExpression> &,void>(&v67, v70, *((std::__shared_weak_count **)&v70 + 1));
        std::allocate_shared[abi:ne180100]<mediaplatform::SQLJoinClause,std::allocator<mediaplatform::SQLJoinClause>,mediaplatform::SQLJoinClause::JoinOperator,std::string const&,std::shared_ptr<mediaplatform::SQLOnJoinConstraint> &,void>(&v64, 1, v10 + 8, (uint64_t *)&v67);
        v35 = v64;
        if (*((_QWORD *)&v64 + 1))
        {
          v36 = (unint64_t *)(*((_QWORD *)&v64 + 1) + 8);
          do
            v37 = __ldxr(v36);
          while (__stxr(v37 + 1, v36));
        }
        v39 = a3[1];
        v38 = (unint64_t)a3[2];
        if ((unint64_t)v39 >= v38)
        {
          v63 = v35;
          v41 = (v39 - *a3) >> 4;
          if ((unint64_t)(v41 + 1) >> 60)
            std::vector<std::string>::__throw_length_error[abi:ne180100]();
          v42 = v38 - (_QWORD)*a3;
          v43 = v42 >> 3;
          if (v42 >> 3 <= (unint64_t)(v41 + 1))
            v43 = v41 + 1;
          if ((unint64_t)v42 >= 0x7FFFFFFFFFFFFFF0)
            v44 = 0xFFFFFFFFFFFFFFFLL;
          else
            v44 = v43;
          v76 = a3 + 2;
          v45 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<mediaplatform::DatabaseParameterBase>>>(v44);
          v47 = &v45[16 * v41];
          *(_OWORD *)v47 = v63;
          v49 = *a3;
          v48 = a3[1];
          if (v48 == *a3)
          {
            v52 = vdupq_n_s64((unint64_t)v48);
            v50 = &v45[16 * v41];
          }
          else
          {
            v50 = &v45[16 * v41];
            do
            {
              v51 = *((_OWORD *)v48 - 1);
              v48 -= 16;
              *((_OWORD *)v50 - 1) = v51;
              v50 -= 16;
              *(_QWORD *)v48 = 0;
              *((_QWORD *)v48 + 1) = 0;
            }
            while (v48 != v49);
            v52 = *(int64x2_t *)a3;
          }
          v40 = v47 + 16;
          *a3 = v50;
          a3[1] = v47 + 16;
          *(int64x2_t *)&v74[8] = v52;
          v53 = a3[2];
          a3[2] = &v45[16 * v46];
          v75 = v53;
          *(_QWORD *)v74 = v52.i64[0];
          std::__split_buffer<std::shared_ptr<mediaplatform::SQLExpression const>>::~__split_buffer((uint64_t)v74);
        }
        else
        {
          *(_OWORD *)v39 = v35;
          v40 = v39 + 16;
        }
        a3[1] = v40;
        v54 = (std::__shared_weak_count *)*((_QWORD *)&v64 + 1);
        if (*((_QWORD *)&v64 + 1))
        {
          v55 = (unint64_t *)(*((_QWORD *)&v64 + 1) + 8);
          do
            v56 = __ldaxr(v55);
          while (__stlxr(v56 - 1, v55));
          if (!v56)
          {
            ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
            std::__shared_weak_count::__release_weak(v54);
          }
        }
        v57 = (std::__shared_weak_count *)*((_QWORD *)&v67 + 1);
        if (*((_QWORD *)&v67 + 1))
        {
          v58 = (unint64_t *)(*((_QWORD *)&v67 + 1) + 8);
          do
            v59 = __ldaxr(v58);
          while (__stlxr(v59 - 1, v58));
          if (!v59)
          {
            ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
            std::__shared_weak_count::__release_weak(v57);
          }
        }
        v60 = (std::__shared_weak_count *)*((_QWORD *)&v70 + 1);
        if (*((_QWORD *)&v70 + 1))
        {
          v61 = (unint64_t *)(*((_QWORD *)&v70 + 1) + 8);
          do
            v62 = __ldaxr(v61);
          while (__stlxr(v62 - 1, v61));
          if (!v62)
          {
            ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
            std::__shared_weak_count::__release_weak(v60);
          }
        }
        if (__p[0])
        {
          __p[1] = __p[0];
          operator delete(__p[0]);
        }
      }
      ++v8;
    }
    while (v8 != v9);
    v8 = v72;
  }
  if (v8)
  {
    v73 = v8;
    operator delete(v8);
  }
}

void sub_20A6627F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, char a17, uint64_t a18, char a19, uint64_t a20,char a21,uint64_t a22,void *__p,uint64_t a24,uint64_t a25,void *a26,uint64_t a27)
{
  std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a26);
  _Unwind_Resume(a1);
}

void mlcore::ForeignProperty<std::string>::_SQLJoinClauses(_QWORD *a1@<X0>, uint64_t a2@<X1>, char **a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  __int128 v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  __int128 v35;
  unint64_t *v36;
  unint64_t v37;
  unint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  char *v45;
  uint64_t v46;
  char *v47;
  char *v48;
  char *v49;
  char *v50;
  __int128 v51;
  int64x2_t v52;
  char *v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  __int128 v63;
  __int128 v64;
  uint64_t v65;
  std::__shared_weak_count *v66;
  __int128 v67;
  uint64_t v68;
  std::__shared_weak_count *v69;
  __int128 v70;
  void *__p[3];
  _QWORD *v72;
  _QWORD *v73;
  _BYTE v74[24];
  char *v75;
  _QWORD *v76;

  v6 = (*(uint64_t (**)(_QWORD *))(*a1 + 120))(a1);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 104))(v6, a2);
  v7 = (*(uint64_t (**)(_QWORD *))(*a1 + 120))(a1);
  (*(void (**)(_QWORD **__return_ptr, _QWORD *))(*a1 + 64))(&v72, a1);
  v8 = v72;
  v9 = v73;
  if (v72 != v73)
  {
    do
    {
      v10 = *v8;
      if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 88))(a2) != v10)
      {
        (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)v7 + 64))(__p, v7);
        v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 72))(v7);
        v68 = 0;
        v69 = 0;
        (*(void (**)(_BYTE *__return_ptr, uint64_t, uint64_t *))(*(_QWORD *)v7 + 96))(v74, v7, &v68);
        LODWORD(v64) = 13;
        (*(void (**)(__int128 *__return_ptr, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v10 + 32))(&v67, v10, *(_QWORD *)__p[0], v11);
        std::allocate_shared[abi:ne180100]<mediaplatform::SQLBinaryExpression,std::allocator<mediaplatform::SQLBinaryExpression>,std::shared_ptr<mediaplatform::SQLExpression>,mediaplatform::SQLBinaryExpression::BinaryOperator,std::shared_ptr<mediaplatform::SQLColumnNameExpression>,void>(&v70, (__int128 *)v74, (int *)&v64, &v67);
        v12 = (std::__shared_weak_count *)*((_QWORD *)&v67 + 1);
        if (*((_QWORD *)&v67 + 1))
        {
          v13 = (unint64_t *)(*((_QWORD *)&v67 + 1) + 8);
          do
            v14 = __ldaxr(v13);
          while (__stlxr(v14 - 1, v13));
          if (!v14)
          {
            ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
            std::__shared_weak_count::__release_weak(v12);
          }
        }
        v15 = *(std::__shared_weak_count **)&v74[8];
        if (*(_QWORD *)&v74[8])
        {
          v16 = (unint64_t *)(*(_QWORD *)&v74[8] + 8);
          do
            v17 = __ldaxr(v16);
          while (__stlxr(v17 - 1, v16));
          if (!v17)
          {
            ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
            std::__shared_weak_count::__release_weak(v15);
          }
        }
        v18 = v69;
        if (v69)
        {
          p_shared_owners = (unint64_t *)&v69->__shared_owners_;
          do
            v20 = __ldaxr(p_shared_owners);
          while (__stlxr(v20 - 1, p_shared_owners));
          if (!v20)
          {
            ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
            std::__shared_weak_count::__release_weak(v18);
          }
        }
        v21 = a1[11];
        if (v21)
        {
          LODWORD(v64) = 1;
          v65 = 0;
          v66 = 0;
          (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t *))(*(_QWORD *)v21 + 64))(&v67, v21, &v65);
          v22 = (std::__shared_weak_count *)*((_QWORD *)&v70 + 1);
          std::allocate_shared[abi:ne180100]<mediaplatform::SQLBinaryExpression,std::allocator<mediaplatform::SQLBinaryExpression>,std::shared_ptr<mediaplatform::SQLBinaryExpression> &,mediaplatform::SQLBinaryExpression::BinaryOperator,std::shared_ptr<mediaplatform::SQLExpression>,void>(v74, v70, *((std::__shared_weak_count **)&v70 + 1), (int *)&v64, &v67);
          v23 = *(_OWORD *)v74;
          *(_OWORD *)v74 = 0uLL;
          v70 = v23;
          if (v22)
          {
            v24 = (unint64_t *)&v22->__shared_owners_;
            do
              v25 = __ldaxr(v24);
            while (__stlxr(v25 - 1, v24));
            if (!v25)
            {
              ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
              std::__shared_weak_count::__release_weak(v22);
            }
          }
          v26 = *(std::__shared_weak_count **)&v74[8];
          if (*(_QWORD *)&v74[8])
          {
            v27 = (unint64_t *)(*(_QWORD *)&v74[8] + 8);
            do
              v28 = __ldaxr(v27);
            while (__stlxr(v28 - 1, v27));
            if (!v28)
            {
              ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
              std::__shared_weak_count::__release_weak(v26);
            }
          }
          v29 = (std::__shared_weak_count *)*((_QWORD *)&v67 + 1);
          if (*((_QWORD *)&v67 + 1))
          {
            v30 = (unint64_t *)(*((_QWORD *)&v67 + 1) + 8);
            do
              v31 = __ldaxr(v30);
            while (__stlxr(v31 - 1, v30));
            if (!v31)
            {
              ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
              std::__shared_weak_count::__release_weak(v29);
            }
          }
          v32 = v66;
          if (v66)
          {
            v33 = (unint64_t *)&v66->__shared_owners_;
            do
              v34 = __ldaxr(v33);
            while (__stlxr(v34 - 1, v33));
            if (!v34)
            {
              ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
              std::__shared_weak_count::__release_weak(v32);
            }
          }
        }
        std::allocate_shared[abi:ne180100]<mediaplatform::SQLOnJoinConstraint,std::allocator<mediaplatform::SQLOnJoinConstraint>,std::shared_ptr<mediaplatform::SQLBinaryExpression> &,void>(&v67, v70, *((std::__shared_weak_count **)&v70 + 1));
        std::allocate_shared[abi:ne180100]<mediaplatform::SQLJoinClause,std::allocator<mediaplatform::SQLJoinClause>,mediaplatform::SQLJoinClause::JoinOperator,std::string const&,std::shared_ptr<mediaplatform::SQLOnJoinConstraint> &,void>(&v64, 1, v10 + 8, (uint64_t *)&v67);
        v35 = v64;
        if (*((_QWORD *)&v64 + 1))
        {
          v36 = (unint64_t *)(*((_QWORD *)&v64 + 1) + 8);
          do
            v37 = __ldxr(v36);
          while (__stxr(v37 + 1, v36));
        }
        v39 = a3[1];
        v38 = (unint64_t)a3[2];
        if ((unint64_t)v39 >= v38)
        {
          v63 = v35;
          v41 = (v39 - *a3) >> 4;
          if ((unint64_t)(v41 + 1) >> 60)
            std::vector<std::string>::__throw_length_error[abi:ne180100]();
          v42 = v38 - (_QWORD)*a3;
          v43 = v42 >> 3;
          if (v42 >> 3 <= (unint64_t)(v41 + 1))
            v43 = v41 + 1;
          if ((unint64_t)v42 >= 0x7FFFFFFFFFFFFFF0)
            v44 = 0xFFFFFFFFFFFFFFFLL;
          else
            v44 = v43;
          v76 = a3 + 2;
          v45 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<mediaplatform::DatabaseParameterBase>>>(v44);
          v47 = &v45[16 * v41];
          *(_OWORD *)v47 = v63;
          v49 = *a3;
          v48 = a3[1];
          if (v48 == *a3)
          {
            v52 = vdupq_n_s64((unint64_t)v48);
            v50 = &v45[16 * v41];
          }
          else
          {
            v50 = &v45[16 * v41];
            do
            {
              v51 = *((_OWORD *)v48 - 1);
              v48 -= 16;
              *((_OWORD *)v50 - 1) = v51;
              v50 -= 16;
              *(_QWORD *)v48 = 0;
              *((_QWORD *)v48 + 1) = 0;
            }
            while (v48 != v49);
            v52 = *(int64x2_t *)a3;
          }
          v40 = v47 + 16;
          *a3 = v50;
          a3[1] = v47 + 16;
          *(int64x2_t *)&v74[8] = v52;
          v53 = a3[2];
          a3[2] = &v45[16 * v46];
          v75 = v53;
          *(_QWORD *)v74 = v52.i64[0];
          std::__split_buffer<std::shared_ptr<mediaplatform::SQLExpression const>>::~__split_buffer((uint64_t)v74);
        }
        else
        {
          *(_OWORD *)v39 = v35;
          v40 = v39 + 16;
        }
        a3[1] = v40;
        v54 = (std::__shared_weak_count *)*((_QWORD *)&v64 + 1);
        if (*((_QWORD *)&v64 + 1))
        {
          v55 = (unint64_t *)(*((_QWORD *)&v64 + 1) + 8);
          do
            v56 = __ldaxr(v55);
          while (__stlxr(v56 - 1, v55));
          if (!v56)
          {
            ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
            std::__shared_weak_count::__release_weak(v54);
          }
        }
        v57 = (std::__shared_weak_count *)*((_QWORD *)&v67 + 1);
        if (*((_QWORD *)&v67 + 1))
        {
          v58 = (unint64_t *)(*((_QWORD *)&v67 + 1) + 8);
          do
            v59 = __ldaxr(v58);
          while (__stlxr(v59 - 1, v58));
          if (!v59)
          {
            ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
            std::__shared_weak_count::__release_weak(v57);
          }
        }
        v60 = (std::__shared_weak_count *)*((_QWORD *)&v70 + 1);
        if (*((_QWORD *)&v70 + 1))
        {
          v61 = (unint64_t *)(*((_QWORD *)&v70 + 1) + 8);
          do
            v62 = __ldaxr(v61);
          while (__stlxr(v62 - 1, v61));
          if (!v62)
          {
            ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
            std::__shared_weak_count::__release_weak(v60);
          }
        }
        if (__p[0])
        {
          __p[1] = __p[0];
          operator delete(__p[0]);
        }
      }
      ++v8;
    }
    while (v8 != v9);
    v8 = v72;
  }
  if (v8)
  {
    v73 = v8;
    operator delete(v8);
  }
}

void sub_20A662DC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, char a17, uint64_t a18, char a19, uint64_t a20,char a21,uint64_t a22,void *__p,uint64_t a24,uint64_t a25,void *a26,uint64_t a27)
{
  std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a26);
  _Unwind_Resume(a1);
}

void mlcore::ForeignProperty<long long>::_SQLJoinClauses(_QWORD *a1@<X0>, uint64_t a2@<X1>, char **a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  __int128 v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  __int128 v35;
  unint64_t *v36;
  unint64_t v37;
  unint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  char *v45;
  uint64_t v46;
  char *v47;
  char *v48;
  char *v49;
  char *v50;
  __int128 v51;
  int64x2_t v52;
  char *v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  __int128 v63;
  __int128 v64;
  uint64_t v65;
  std::__shared_weak_count *v66;
  __int128 v67;
  uint64_t v68;
  std::__shared_weak_count *v69;
  __int128 v70;
  void *__p[3];
  _QWORD *v72;
  _QWORD *v73;
  _BYTE v74[24];
  char *v75;
  _QWORD *v76;

  v6 = (*(uint64_t (**)(_QWORD *))(*a1 + 120))(a1);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 104))(v6, a2);
  v7 = (*(uint64_t (**)(_QWORD *))(*a1 + 120))(a1);
  (*(void (**)(_QWORD **__return_ptr, _QWORD *))(*a1 + 64))(&v72, a1);
  v8 = v72;
  v9 = v73;
  if (v72 != v73)
  {
    do
    {
      v10 = *v8;
      if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 88))(a2) != v10)
      {
        (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)v7 + 64))(__p, v7);
        v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 72))(v7);
        v68 = 0;
        v69 = 0;
        (*(void (**)(_BYTE *__return_ptr, uint64_t, uint64_t *))(*(_QWORD *)v7 + 96))(v74, v7, &v68);
        LODWORD(v64) = 13;
        (*(void (**)(__int128 *__return_ptr, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v10 + 32))(&v67, v10, *(_QWORD *)__p[0], v11);
        std::allocate_shared[abi:ne180100]<mediaplatform::SQLBinaryExpression,std::allocator<mediaplatform::SQLBinaryExpression>,std::shared_ptr<mediaplatform::SQLExpression>,mediaplatform::SQLBinaryExpression::BinaryOperator,std::shared_ptr<mediaplatform::SQLColumnNameExpression>,void>(&v70, (__int128 *)v74, (int *)&v64, &v67);
        v12 = (std::__shared_weak_count *)*((_QWORD *)&v67 + 1);
        if (*((_QWORD *)&v67 + 1))
        {
          v13 = (unint64_t *)(*((_QWORD *)&v67 + 1) + 8);
          do
            v14 = __ldaxr(v13);
          while (__stlxr(v14 - 1, v13));
          if (!v14)
          {
            ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
            std::__shared_weak_count::__release_weak(v12);
          }
        }
        v15 = *(std::__shared_weak_count **)&v74[8];
        if (*(_QWORD *)&v74[8])
        {
          v16 = (unint64_t *)(*(_QWORD *)&v74[8] + 8);
          do
            v17 = __ldaxr(v16);
          while (__stlxr(v17 - 1, v16));
          if (!v17)
          {
            ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
            std::__shared_weak_count::__release_weak(v15);
          }
        }
        v18 = v69;
        if (v69)
        {
          p_shared_owners = (unint64_t *)&v69->__shared_owners_;
          do
            v20 = __ldaxr(p_shared_owners);
          while (__stlxr(v20 - 1, p_shared_owners));
          if (!v20)
          {
            ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
            std::__shared_weak_count::__release_weak(v18);
          }
        }
        v21 = a1[11];
        if (v21)
        {
          LODWORD(v64) = 1;
          v65 = 0;
          v66 = 0;
          (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t *))(*(_QWORD *)v21 + 64))(&v67, v21, &v65);
          v22 = (std::__shared_weak_count *)*((_QWORD *)&v70 + 1);
          std::allocate_shared[abi:ne180100]<mediaplatform::SQLBinaryExpression,std::allocator<mediaplatform::SQLBinaryExpression>,std::shared_ptr<mediaplatform::SQLBinaryExpression> &,mediaplatform::SQLBinaryExpression::BinaryOperator,std::shared_ptr<mediaplatform::SQLExpression>,void>(v74, v70, *((std::__shared_weak_count **)&v70 + 1), (int *)&v64, &v67);
          v23 = *(_OWORD *)v74;
          *(_OWORD *)v74 = 0uLL;
          v70 = v23;
          if (v22)
          {
            v24 = (unint64_t *)&v22->__shared_owners_;
            do
              v25 = __ldaxr(v24);
            while (__stlxr(v25 - 1, v24));
            if (!v25)
            {
              ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
              std::__shared_weak_count::__release_weak(v22);
            }
          }
          v26 = *(std::__shared_weak_count **)&v74[8];
          if (*(_QWORD *)&v74[8])
          {
            v27 = (unint64_t *)(*(_QWORD *)&v74[8] + 8);
            do
              v28 = __ldaxr(v27);
            while (__stlxr(v28 - 1, v27));
            if (!v28)
            {
              ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
              std::__shared_weak_count::__release_weak(v26);
            }
          }
          v29 = (std::__shared_weak_count *)*((_QWORD *)&v67 + 1);
          if (*((_QWORD *)&v67 + 1))
          {
            v30 = (unint64_t *)(*((_QWORD *)&v67 + 1) + 8);
            do
              v31 = __ldaxr(v30);
            while (__stlxr(v31 - 1, v30));
            if (!v31)
            {
              ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
              std::__shared_weak_count::__release_weak(v29);
            }
          }
          v32 = v66;
          if (v66)
          {
            v33 = (unint64_t *)&v66->__shared_owners_;
            do
              v34 = __ldaxr(v33);
            while (__stlxr(v34 - 1, v33));
            if (!v34)
            {
              ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
              std::__shared_weak_count::__release_weak(v32);
            }
          }
        }
        std::allocate_shared[abi:ne180100]<mediaplatform::SQLOnJoinConstraint,std::allocator<mediaplatform::SQLOnJoinConstraint>,std::shared_ptr<mediaplatform::SQLBinaryExpression> &,void>(&v67, v70, *((std::__shared_weak_count **)&v70 + 1));
        std::allocate_shared[abi:ne180100]<mediaplatform::SQLJoinClause,std::allocator<mediaplatform::SQLJoinClause>,mediaplatform::SQLJoinClause::JoinOperator,std::string const&,std::shared_ptr<mediaplatform::SQLOnJoinConstraint> &,void>(&v64, 1, v10 + 8, (uint64_t *)&v67);
        v35 = v64;
        if (*((_QWORD *)&v64 + 1))
        {
          v36 = (unint64_t *)(*((_QWORD *)&v64 + 1) + 8);
          do
            v37 = __ldxr(v36);
          while (__stxr(v37 + 1, v36));
        }
        v39 = a3[1];
        v38 = (unint64_t)a3[2];
        if ((unint64_t)v39 >= v38)
        {
          v63 = v35;
          v41 = (v39 - *a3) >> 4;
          if ((unint64_t)(v41 + 1) >> 60)
            std::vector<std::string>::__throw_length_error[abi:ne180100]();
          v42 = v38 - (_QWORD)*a3;
          v43 = v42 >> 3;
          if (v42 >> 3 <= (unint64_t)(v41 + 1))
            v43 = v41 + 1;
          if ((unint64_t)v42 >= 0x7FFFFFFFFFFFFFF0)
            v44 = 0xFFFFFFFFFFFFFFFLL;
          else
            v44 = v43;
          v76 = a3 + 2;
          v45 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<mediaplatform::DatabaseParameterBase>>>(v44);
          v47 = &v45[16 * v41];
          *(_OWORD *)v47 = v63;
          v49 = *a3;
          v48 = a3[1];
          if (v48 == *a3)
          {
            v52 = vdupq_n_s64((unint64_t)v48);
            v50 = &v45[16 * v41];
          }
          else
          {
            v50 = &v45[16 * v41];
            do
            {
              v51 = *((_OWORD *)v48 - 1);
              v48 -= 16;
              *((_OWORD *)v50 - 1) = v51;
              v50 -= 16;
              *(_QWORD *)v48 = 0;
              *((_QWORD *)v48 + 1) = 0;
            }
            while (v48 != v49);
            v52 = *(int64x2_t *)a3;
          }
          v40 = v47 + 16;
          *a3 = v50;
          a3[1] = v47 + 16;
          *(int64x2_t *)&v74[8] = v52;
          v53 = a3[2];
          a3[2] = &v45[16 * v46];
          v75 = v53;
          *(_QWORD *)v74 = v52.i64[0];
          std::__split_buffer<std::shared_ptr<mediaplatform::SQLExpression const>>::~__split_buffer((uint64_t)v74);
        }
        else
        {
          *(_OWORD *)v39 = v35;
          v40 = v39 + 16;
        }
        a3[1] = v40;
        v54 = (std::__shared_weak_count *)*((_QWORD *)&v64 + 1);
        if (*((_QWORD *)&v64 + 1))
        {
          v55 = (unint64_t *)(*((_QWORD *)&v64 + 1) + 8);
          do
            v56 = __ldaxr(v55);
          while (__stlxr(v56 - 1, v55));
          if (!v56)
          {
            ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
            std::__shared_weak_count::__release_weak(v54);
          }
        }
        v57 = (std::__shared_weak_count *)*((_QWORD *)&v67 + 1);
        if (*((_QWORD *)&v67 + 1))
        {
          v58 = (unint64_t *)(*((_QWORD *)&v67 + 1) + 8);
          do
            v59 = __ldaxr(v58);
          while (__stlxr(v59 - 1, v58));
          if (!v59)
          {
            ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
            std::__shared_weak_count::__release_weak(v57);
          }
        }
        v60 = (std::__shared_weak_count *)*((_QWORD *)&v70 + 1);
        if (*((_QWORD *)&v70 + 1))
        {
          v61 = (unint64_t *)(*((_QWORD *)&v70 + 1) + 8);
          do
            v62 = __ldaxr(v61);
          while (__stlxr(v62 - 1, v61));
          if (!v62)
          {
            ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
            std::__shared_weak_count::__release_weak(v60);
          }
        }
        if (__p[0])
        {
          __p[1] = __p[0];
          operator delete(__p[0]);
        }
      }
      ++v8;
    }
    while (v8 != v9);
    v8 = v72;
  }
  if (v8)
  {
    v73 = v8;
    operator delete(v8);
  }
}

void sub_20A66339C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, char a17, uint64_t a18, char a19, uint64_t a20,char a21,uint64_t a22,void *__p,uint64_t a24,uint64_t a25,void *a26,uint64_t a27)
{
  std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a26);
  _Unwind_Resume(a1);
}

uint64_t mlcore::ForeignProperty<int>::baseProperty(uint64_t a1)
{
  return *(_QWORD *)(a1 + 72);
}

uint64_t mlcore::ForeignProperty<int>::databaseTables(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 80) + 64))(*(_QWORD *)(a1 + 80));
}

void mediaplatform::DatabaseTable<long long,std::string,std::string,long long,long long,mediaplatform::Data,int,int,int,int,std::string,int,int,int,int,int,int,mediaplatform::Data,int,long long,long long,long long,int,long long,std::string,long long>::targetColumnExpression(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  __int128 *v3;
  __int128 *v4[3];
  __int128 **v5;

  v3 = (__int128 *)(a1 + 8);
  (*(void (**)(__int128 **__return_ptr))(*(_QWORD *)a1 + 24))(v4);
  std::allocate_shared[abi:ne180100]<mediaplatform::SQLColumnNameExpression,std::allocator<mediaplatform::SQLColumnNameExpression>,std::string &,std::string const&,void>(a2, v4[0], v3);
  v5 = v4;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v5);
}

void sub_20A6634F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t mlcore::GetForeignProperty<long long>(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  char *v12;
  uint64_t ForeignProperty;
  _QWORD *v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  __int128 v19;
  _QWORD v20[2];
  _BYTE v21[24];
  _BYTE *v22;
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  v6 = *a3;
  v5 = (std::__shared_weak_count *)a3[1];
  v20[0] = *a3;
  v20[1] = v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    v6 = *a3;
    v9 = a3[1];
    *(_QWORD *)&v19 = a2;
    *((_QWORD *)&v19 + 1) = a1;
    if (v9)
    {
      v10 = (unint64_t *)(v9 + 8);
      do
        v11 = __ldxr(v10);
      while (__stxr(v11 + 1, v10));
    }
  }
  else
  {
    v9 = 0;
    *(_QWORD *)&v19 = a2;
    *((_QWORD *)&v19 + 1) = a1;
  }
  v12 = (char *)operator new(0x28uLL);
  *(_QWORD *)v12 = &off_24C33B508;
  *(_OWORD *)(v12 + 8) = v19;
  *((_QWORD *)v12 + 3) = v6;
  *((_QWORD *)v12 + 4) = v9;
  v22 = v12;
  ForeignProperty = mlcore::_GetForeignProperty(a1, a2, v20, (uint64_t)v21);
  v14 = v22;
  if (v22 == v21)
  {
    v15 = 4;
    v14 = v21;
    goto LABEL_13;
  }
  if (v22)
  {
    v15 = 5;
LABEL_13:
    (*(void (**)(void))(*v14 + 8 * v15))();
  }
  if (v5)
  {
    v16 = (unint64_t *)&v5->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  return ForeignProperty;
}

void sub_20A66367C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, char *a19)
{
  uint64_t v19;
  char *v20;
  char *v22;
  uint64_t v23;

  v22 = a19;
  if (a19 == v20)
  {
    v23 = 4;
    v22 = &a16;
  }
  else
  {
    if (!a19)
      goto LABEL_6;
    v23 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v22 + 8 * v23))();
LABEL_6:
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100](v19);
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)&a14);
  _Unwind_Resume(a1);
}

uint64_t mlcore::TypedEntityClass<mlcore::TVShow>::databaseTable()
{
  return *(_QWORD *)mediaplatform::Singleton<mlcore::ItemArtistTable>::sharedInstance();
}

uint64_t mediaplatform::Singleton<mlcore::ItemArtistTable>::sharedInstance()
{
  unsigned __int8 v0;
  mlcore::ItemArtistTable **v2;

  if ((v0 & 1) == 0
  {
    v2 = (mlcore::ItemArtistTable **)operator new();
    _ZNSt3__115allocate_sharedB8ne180100IN6mlcore15ItemArtistTableENS_9allocatorIS2_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(v2);
    mediaplatform::Singleton<mlcore::ItemArtistTable>::sharedInstance(void)::_sharedInstance = (uint64_t)v2;
  }
  return mediaplatform::Singleton<mlcore::ItemArtistTable>::sharedInstance(void)::_sharedInstance;
}

void sub_20A663758(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x20BD27AFC](v1, 0x20C40A4A59CD2);
  _Unwind_Resume(a1);
}

void mediaplatform::DatabaseTable<long long,int,long long,int,long long,long long,int,long long,int,long long,long long,int,long long,long long,int,long long,long long,int,long long,long long,int,int,int,int,long long,long long,int,int,int,int,int,int,int,long long,int,long long,long long,long long>::targetColumnExpression(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  __int128 *v3;
  __int128 *v4[3];
  __int128 **v5;

  v3 = (__int128 *)(a1 + 8);
  (*(void (**)(__int128 **__return_ptr))(*(_QWORD *)a1 + 24))(v4);
  std::allocate_shared[abi:ne180100]<mediaplatform::SQLColumnNameExpression,std::allocator<mediaplatform::SQLColumnNameExpression>,std::string &,std::string const&,void>(a2, v4[0], v3);
  v5 = v4;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v5);
}

void sub_20A6637F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<mlcore::ForeignProperty<long long> * mlcore::GetForeignProperty<long long>(mlcore::ModelPropertyBase *,mlcore::ModelProperty<long long> *,std::shared_ptr<mlcore::Predicate>)::{lambda(void)#1},std::allocator<mlcore::ForeignProperty<long long> * mlcore::GetForeignProperty<long long>(mlcore::ModelPropertyBase *,mlcore::ModelProperty<long long> *,std::shared_ptr<mlcore::Predicate>)::{lambda(void)#1}>,mlcore::ModelPropertyBase * ()(void)>::operator()(uint64_t a1)
{
  int v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t Foreign;
  _QWORD *v7;
  uint64_t v8;
  void *v9;
  __int128 v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int8x16_t v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  size_t v26;
  std::string *v27;
  char *v28;
  char *v29;
  char *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  const std::string::value_type *v34;
  const std::string::value_type *v35;
  int v36;
  const std::string::value_type *v37;
  std::string::size_type v38;
  std::string *v39;
  __int128 v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  std::string::size_type size;
  unint64_t *v48;
  unint64_t v49;
  std::__shared_weak_count *v50;
  uint64_t v52;
  std::string::size_type v53;
  unint64_t *v54;
  unint64_t v55;
  unint64_t *v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t *v60;
  unint64_t v61;
  unint64_t *v62;
  std::string v63;
  std::string __p;

  v2 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 88))(*(_QWORD *)(a1 + 8));
  v3 = *(_QWORD **)(a1 + 8);
  if (v2)
  {
    v4 = (*(uint64_t (**)(_QWORD))(*v3 + 120))(*(_QWORD *)(a1 + 8));
    switch((*(unsigned int (**)(uint64_t))(*(_QWORD *)v4 + 80))(v4))
    {
      case 0u:
        v5 = *(_QWORD *)(a1 + 16);
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = 0uLL;
        Foreign = mlcore::GetForeignProperty<int>(v5, v4, (uint64_t *)&__p);
        goto LABEL_51;
      case 1u:
        v42 = *(_QWORD *)(a1 + 16);
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = 0uLL;
        Foreign = mlcore::GetForeignProperty<long long>(v42, v4, (uint64_t *)&__p);
        goto LABEL_51;
      case 2u:
        v43 = *(_QWORD *)(a1 + 16);
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = 0uLL;
        Foreign = mlcore::GetForeignProperty<double>(v43, v4, (uint64_t *)&__p);
        goto LABEL_51;
      case 3u:
        v44 = *(_QWORD *)(a1 + 16);
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = 0uLL;
        Foreign = mlcore::GetForeignProperty<std::string>(v44, v4, (uint64_t *)&__p);
        goto LABEL_51;
      case 4u:
        v45 = *(_QWORD *)(a1 + 16);
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = 0uLL;
        Foreign = mlcore::GetForeignProperty<mediaplatform::Data>(v45, v4, (uint64_t *)&__p);
LABEL_51:
        v41 = Foreign;
        break;
      default:
        v41 = 0;
        break;
    }
    v46 = (*(uint64_t (**)(_QWORD *))(*v3 + 128))(v3);
    (*(void (**)(std::string *__return_ptr, _QWORD *))(*v3 + 136))(&v63, v3);
    v16 = mlcore::GetForeignProperty<long long>(v41, v46, (uint64_t *)&v63);
    size = v63.__r_.__value_.__l.__size_;
    if (v63.__r_.__value_.__l.__size_)
    {
      v48 = (unint64_t *)(v63.__r_.__value_.__l.__size_ + 8);
      do
        v49 = __ldaxr(v48);
      while (__stlxr(v49 - 1, v48));
      if (!v49)
      {
        (*(void (**)(std::string::size_type))(*(_QWORD *)size + 16))(size);
        v50 = (std::__shared_weak_count *)size;
LABEL_57:
        std::__shared_weak_count::__release_weak(v50);
      }
    }
  }
  else
  {
    v7 = *(_QWORD **)(a1 + 16);
    if (v7)
    {
      v8 = v3[1];
      if ((*(unsigned int (**)(_QWORD))(*v7 + 88))(*(_QWORD *)(a1 + 16)))
      {
        while (1)
        {
          (*(void (**)(std::string *__return_ptr))(*(_QWORD *)v9 + 32))(&__p);
          v10 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
          if (__p.__r_.__value_.__l.__size_)
          {
            v11 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
            do
              v12 = __ldaxr(v11);
            while (__stlxr(v12 - 1, v11));
            if (!v12)
            {
              (*(void (**)(_QWORD))(**((_QWORD **)&v10 + 1) + 16))(*((_QWORD *)&v10 + 1));
              std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v10 + 1));
            }
          }
          if ((_QWORD)v10)
            goto LABEL_17;
          v13 = v7[1];
          v14 = (*(uint64_t (**)(void *))(*(_QWORD *)v9 + 16))(v9);
          v7 = (_QWORD *)v14;
          if (v13 == v8)
            break;
          if (!v14)
            goto LABEL_17;
          if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 88))(v14) & 1) == 0 && v7[1] == v8)
          {
            v58 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 112))(v8);
            v59 = *(_QWORD *)(a1 + 8);
            v53 = *(_QWORD *)(a1 + 32);
            __p.__r_.__value_.__r.__words[0] = *(_QWORD *)(a1 + 24);
            __p.__r_.__value_.__l.__size_ = v53;
            if (v53)
            {
              v60 = (unint64_t *)(v53 + 8);
              do
                v61 = __ldxr(v60);
              while (__stxr(v61 + 1, v60));
            }
            v16 = mlcore::GetForeignProperty<long long>(v58, v59, (uint64_t *)&__p);
            if (!v53)
              return v16;
            v62 = (unint64_t *)(v53 + 8);
            do
              v57 = __ldaxr(v62);
            while (__stlxr(v57 - 1, v62));
LABEL_72:
            if (v57)
              return v16;
            (*(void (**)(std::string::size_type))(*(_QWORD *)v53 + 16))(v53);
            v50 = (std::__shared_weak_count *)v53;
            goto LABEL_57;
          }
          if (((*(uint64_t (**)(_QWORD *))(*v7 + 88))(v7) & 1) == 0)
            goto LABEL_17;
        }
        v52 = *(_QWORD *)(a1 + 8);
        v53 = *(_QWORD *)(a1 + 32);
        __p.__r_.__value_.__r.__words[0] = *(_QWORD *)(a1 + 24);
        __p.__r_.__value_.__l.__size_ = v53;
        if (v53)
        {
          v54 = (unint64_t *)(v53 + 8);
          do
            v55 = __ldxr(v54);
          while (__stxr(v55 + 1, v54));
        }
        v16 = mlcore::GetForeignProperty<long long>(v14, v52, (uint64_t *)&__p);
        if (!v53)
          return v16;
        v56 = (unint64_t *)(v53 + 8);
        do
          v57 = __ldaxr(v56);
        while (__stlxr(v57 - 1, v56));
        goto LABEL_72;
      }
    }
LABEL_17:
    v15 = operator new();
    v16 = v15;
    v17 = *(int8x16_t *)(a1 + 8);
    v18 = *(_QWORD *)(a1 + 24);
    v19 = *(std::__shared_weak_count **)(a1 + 32);
    if (v19)
    {
      p_shared_owners = (unint64_t *)&v19->__shared_owners_;
      do
        v21 = __ldxr(p_shared_owners);
      while (__stxr(v21 + 1, p_shared_owners));
    }
    *(_OWORD *)(v15 + 32) = 0u;
    *(_OWORD *)(v15 + 48) = 0u;
    *(_OWORD *)(v15 + 16) = 0u;
    *(_QWORD *)v15 = &off_24C337EC8;
    *(_QWORD *)(v15 + 64) = &unk_24C337F68;
    *(int8x16_t *)(v15 + 72) = vextq_s8(v17, v17, 8uLL);
    *(_QWORD *)(v15 + 88) = v18;
    *(_QWORD *)(v15 + 96) = v19;
    if (v19)
    {
      v22 = (unint64_t *)&v19->__shared_owners_;
      do
        v23 = __ldxr(v22);
      while (__stxr(v23 + 1, v22));
      do
        v24 = __ldaxr(v22);
      while (__stlxr(v24 - 1, v22));
      if (!v24)
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
    }
    v25 = *(_QWORD *)(a1 + 16);
    if (*(char *)(v25 + 39) >= 0)
      v26 = *(unsigned __int8 *)(v25 + 39);
    else
      v26 = *(_QWORD *)(v25 + 24);
    v27 = &v63;
    std::string::basic_string[abi:ne180100]((uint64_t)&v63, v26 + 2);
    if ((v63.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v27 = (std::string *)v63.__r_.__value_.__r.__words[0];
    if (v26)
    {
      v30 = *(char **)(v25 + 16);
      v29 = (char *)(v25 + 16);
      v28 = v30;
      if (v29[23] >= 0)
        v31 = v29;
      else
        v31 = v28;
      memmove(v27, v31, v26);
    }
    strcpy((char *)v27 + v26, "->");
    v32 = *(_QWORD *)(a1 + 8);
    v35 = *(const std::string::value_type **)(v32 + 16);
    v33 = v32 + 16;
    v34 = v35;
    v36 = *(char *)(v33 + 23);
    if (v36 >= 0)
      v37 = (const std::string::value_type *)v33;
    else
      v37 = v34;
    if (v36 >= 0)
      v38 = *(unsigned __int8 *)(v33 + 23);
    else
      v38 = *(_QWORD *)(v33 + 8);
    v39 = std::string::append(&v63, v37, v38);
    v40 = *(_OWORD *)&v39->__r_.__value_.__l.__data_;
    __p.__r_.__value_.__r.__words[2] = v39->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v40;
    v39->__r_.__value_.__l.__size_ = 0;
    v39->__r_.__value_.__r.__words[2] = 0;
    v39->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v63.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v63.__r_.__value_.__l.__data_);
    mlcore::EntityClass::setPropertyForName(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 8), v16, &__p);
    *(_QWORD *)(v16 + 8) = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  return v16;
}

void sub_20A663CE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  std::__shared_weak_count *v21;
  unint64_t *p_shared_owners;
  unint64_t v24;

  if (v21)
  {
    p_shared_owners = (unint64_t *)&v21->__shared_owners_;
    do
      v24 = __ldaxr(p_shared_owners);
    while (__stlxr(v24 - 1, p_shared_owners));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  _Unwind_Resume(exception_object);
}

void mediaplatform::DatabaseTable<long long,int,int,std::string,std::string,int>::columnNames(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  mediaplatform::ColumnNamesApplier::operator()<long long>((uint64_t)a2, a1 + 352);
  mediaplatform::ColumnNamesApplier::operator()<int>((uint64_t)a2, a1 + 304);
  mediaplatform::ColumnNamesApplier::operator()<int>((uint64_t)a2, a1 + 256);
  mediaplatform::ColumnNamesApplier::operator()<std::string>((uint64_t)a2, a1 + 192);
  mediaplatform::ColumnNamesApplier::operator()<std::string>((uint64_t)a2, a1 + 128);
  mediaplatform::ColumnNamesApplier::operator()<int>((uint64_t)a2, a1 + 80);
}

void sub_20A663E24(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t mlcore::ForeignProperty<int>::predicate@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(result + 96);
  *a2 = *(_QWORD *)(result + 88);
  a2[1] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

uint64_t mlcore::ForeignProperty<int>::foreignProperty(uint64_t a1)
{
  return *(_QWORD *)(a1 + 80);
}

uint64_t mlcore::ForeignProperty<int>::databaseColumn(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 80) + 72))(*(_QWORD *)(a1 + 80));
}

void mediaplatform::DatabaseTable<long long,std::string,std::string,mediaplatform::Data,int,long long,int,int,int,int,long long>::targetColumnExpression(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  __int128 *v3;
  __int128 *v4[3];
  __int128 **v5;

  v3 = (__int128 *)(a1 + 8);
  (*(void (**)(__int128 **__return_ptr))(*(_QWORD *)a1 + 24))(v4);
  std::allocate_shared[abi:ne180100]<mediaplatform::SQLColumnNameExpression,std::allocator<mediaplatform::SQLColumnNameExpression>,std::string &,std::string const&,void>(a2, v4[0], v3);
  v5 = v4;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v5);
}

void sub_20A663ED8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void mediaplatform::DatabaseTable<long long,std::string,mediaplatform::Data,int,long long,int,int,int,int,long long>::targetColumnExpression(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  __int128 *v3;
  __int128 *v4[3];
  __int128 **v5;

  v3 = (__int128 *)(a1 + 8);
  (*(void (**)(__int128 **__return_ptr))(*(_QWORD *)a1 + 24))(v4);
  std::allocate_shared[abi:ne180100]<mediaplatform::SQLColumnNameExpression,std::allocator<mediaplatform::SQLColumnNameExpression>,std::string &,std::string const&,void>(a2, v4[0], v3);
  v5 = v4;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v5);
}

void sub_20A663F50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void mediaplatform::DatabaseTable<long long,std::string>::targetColumnExpression(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  __int128 *v3;
  __int128 *v4[3];
  __int128 **v5;

  v3 = (__int128 *)(a1 + 8);
  (*(void (**)(__int128 **__return_ptr))(*(_QWORD *)a1 + 24))(v4);
  std::allocate_shared[abi:ne180100]<mediaplatform::SQLColumnNameExpression,std::allocator<mediaplatform::SQLColumnNameExpression>,std::string &,std::string const&,void>(a2, v4[0], v3);
  v5 = v4;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v5);
}

void sub_20A663FC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void mediaplatform::DatabaseTable<long long,std::string>::columnNames(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  mediaplatform::ColumnNamesApplier::operator()<long long>((uint64_t)a2, a1 + 144);
  mediaplatform::ColumnNamesApplier::operator()<std::string>((uint64_t)a2, a1 + 80);
}

void sub_20A664028(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void mediaplatform::DatabaseTable<long long,int,int,int,int,std::string,std::string,std::string,std::string,int,int,int,int,long long,int,int,int,int,int,int,int,int,std::string,long long,long long,std::string,long long,mediaplatform::Data,int,int,int,int,std::string,int,long long,long long,std::string,std::string,std::string>::targetColumnExpression(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  __int128 *v3;
  __int128 *v4[3];
  __int128 **v5;

  v3 = (__int128 *)(a1 + 8);
  (*(void (**)(__int128 **__return_ptr))(*(_QWORD *)a1 + 24))(v4);
  std::allocate_shared[abi:ne180100]<mediaplatform::SQLColumnNameExpression,std::allocator<mediaplatform::SQLColumnNameExpression>,std::string &,std::string const&,void>(a2, v4[0], v3);
  v5 = v4;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v5);
}

void sub_20A6640A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void mediaplatform::DatabaseTable<long long,int,int,int,int,std::string,std::string,std::string,std::string,int,int,int,int,long long,int,int,int,int,int,int,int,int,std::string,long long,long long,std::string,long long,mediaplatform::Data,int,int,int,int,std::string,int,long long,long long,std::string,std::string,std::string>::columnNames(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  mediaplatform::ColumnNamesApplier::operator()<long long>((uint64_t)a2, a1 + 2096);
  mediaplatform::ColumnNamesApplier::operator()<int>((uint64_t)a2, a1 + 2048);
  mediaplatform::ColumnNamesApplier::operator()<int>((uint64_t)a2, a1 + 2000);
  mediaplatform::ColumnNamesApplier::operator()<int>((uint64_t)a2, a1 + 1952);
  mediaplatform::ColumnNamesApplier::operator()<int>((uint64_t)a2, a1 + 1904);
  mediaplatform::ColumnNamesApplier::operator()<std::string>((uint64_t)a2, a1 + 1840);
  mediaplatform::ColumnNamesApplier::operator()<std::string>((uint64_t)a2, a1 + 1776);
  mediaplatform::ColumnNamesApplier::operator()<std::string>((uint64_t)a2, a1 + 1712);
  mediaplatform::ColumnNamesApplier::operator()<std::string>((uint64_t)a2, a1 + 1648);
  mediaplatform::ColumnNamesApplier::operator()<int>((uint64_t)a2, a1 + 1600);
  mediaplatform::ColumnNamesApplier::operator()<int>((uint64_t)a2, a1 + 1552);
  mediaplatform::ColumnNamesApplier::operator()<int>((uint64_t)a2, a1 + 1504);
  mediaplatform::ColumnNamesApplier::operator()<int>((uint64_t)a2, a1 + 1456);
  mediaplatform::ColumnNamesApplier::operator()<long long>((uint64_t)a2, a1 + 1408);
  mediaplatform::ColumnNamesApplier::operator()<int>((uint64_t)a2, a1 + 1360);
  mediaplatform::ColumnNamesApplier::operator()<int>((uint64_t)a2, a1 + 1312);
  mediaplatform::ColumnNamesApplier::operator()<int>((uint64_t)a2, a1 + 1264);
  mediaplatform::ColumnNamesApplier::operator()<int>((uint64_t)a2, a1 + 1216);
  mediaplatform::ColumnNamesApplier::operator()<int>((uint64_t)a2, a1 + 1168);
  mediaplatform::ColumnNamesApplier::operator()<int>((uint64_t)a2, a1 + 1120);
  mediaplatform::ColumnNamesApplier::operator()<int>((uint64_t)a2, a1 + 1072);
  mediaplatform::ColumnNamesApplier::operator()<int>((uint64_t)a2, a1 + 1024);
  mediaplatform::ColumnNamesApplier::operator()<std::string>((uint64_t)a2, a1 + 960);
  mediaplatform::ColumnNamesApplier::operator()<long long>((uint64_t)a2, a1 + 912);
  mediaplatform::ColumnNamesApplier::operator()<long long>((uint64_t)a2, a1 + 864);
  mediaplatform::ColumnNamesApplier::operator()<std::string>((uint64_t)a2, a1 + 800);
  mediaplatform::ColumnNamesApplier::operator()<long long>((uint64_t)a2, a1 + 752);
  mediaplatform::ColumnNamesApplier::operator()<mediaplatform::Data>((uint64_t)a2, a1 + 672);
  mediaplatform::ColumnNamesApplier::operator()<int>((uint64_t)a2, a1 + 624);
  mediaplatform::ColumnNamesApplier::operator()<int>((uint64_t)a2, a1 + 576);
  mediaplatform::ColumnNamesApplier::operator()<int>((uint64_t)a2, a1 + 528);
  mediaplatform::ColumnNamesApplier::operator()<int>((uint64_t)a2, a1 + 480);
  mediaplatform::ColumnNamesApplier::operator()<std::string>((uint64_t)a2, a1 + 416);
  mediaplatform::ColumnNamesApplier::operator()<int>((uint64_t)a2, a1 + 368);
  mediaplatform::ColumnNamesApplier::operator()<long long>((uint64_t)a2, a1 + 320);
  mediaplatform::ColumnNamesApplier::operator()<long long>((uint64_t)a2, a1 + 272);
  mediaplatform::ColumnNamesApplier::operator()<std::string>((uint64_t)a2, a1 + 208);
  mediaplatform::ColumnNamesApplier::operator()<std::string>((uint64_t)a2, a1 + 144);
  mediaplatform::ColumnNamesApplier::operator()<std::string>((uint64_t)a2, a1 + 80);
}

void sub_20A6642BC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void mlcore::EntityPropertiesQuery::~EntityPropertiesQuery(mlcore::EntityPropertiesQuery *this)
{
  char *v2;

  *(_QWORD *)this = &off_24C33A218;
  v2 = (char *)this + 104;
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)this + 120);
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)v2);
  mlcore::PropertiesQuery::~PropertiesQuery(this);
}

{
  char *v2;

  *(_QWORD *)this = &off_24C33A218;
  v2 = (char *)this + 104;
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)this + 120);
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)v2);
  mlcore::PropertiesQuery::~PropertiesQuery(this);
  JUMPOUT(0x20BD27AFCLL);
}

void mlcore::EntityQueryResult::~EntityQueryResult(std::exception *this)
{
  std::exception *v2;

  this->__vftable = (std::exception_vtbl *)&off_24C339748;
  v2 = this + 20;
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)&this[32]);
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)&this[27]);
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)&this[25]);
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)&this[23]);
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)v2);
  mlcore::QueryResult::~QueryResult(this);
}

{
  std::exception *v2;

  this->__vftable = (std::exception_vtbl *)&off_24C339748;
  v2 = this + 20;
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)&this[32]);
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)&this[27]);
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)&this[25]);
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)&this[23]);
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)v2);
  mlcore::QueryResult::~QueryResult(this);
  JUMPOUT(0x20BD27AFCLL);
}

{
  std::exception *v2;

  this->__vftable = (std::exception_vtbl *)&off_24C339748;
  v2 = this + 20;
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)&this[32]);
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)&this[27]);
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)&this[25]);
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)&this[23]);
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)v2);
  mlcore::QueryResult::~QueryResult(this);
}

_QWORD *std::__function::__func<mlcore::LocalLibrary::LocalLibrary(mediaplatform::ContentBundle const&,mediaplatform::FilePath const&,mlcore::LanguageResources const&)::$_0,std::allocator<mlcore::LocalLibrary::LocalLibrary(mediaplatform::ContentBundle const&,mediaplatform::FilePath const&,mlcore::LanguageResources const&)::$_0>,void ()(mediaplatform::DatabaseConnection &)>::operator()(uint64_t a1, mediaplatform::DatabaseConnection *a2)
{
  return mlcore::LocalLibrary::_libraryDatabaseDidOpenCallback(*(mlcore::LocalLibrary **)(a1 + 8), a2);
}

uint64_t mlcore::UnaryPredicate<long long>::UnaryPredicate(uint64_t result, uint64_t a2, int a3)
{
  *(_DWORD *)(result + 16) = a3;
  *(_QWORD *)result = &unk_24C337810;
  *(_QWORD *)(result + 8) = a2;
  return result;
}

{
  *(_DWORD *)(result + 16) = a3;
  *(_QWORD *)result = &unk_24C337810;
  *(_QWORD *)(result + 8) = a2;
  return result;
}

_QWORD *mlcore::LibraryView::filterPredicateForEntityClass@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  _QWORD *result;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;

  result = std::__hash_table<std::__hash_value_type<mlcore::ModelProperty<double> *,double>,std::__unordered_map_hasher<mlcore::ModelProperty<double> *,std::__hash_value_type<mlcore::ModelProperty<double> *,double>,std::hash<mlcore::ModelProperty<double> *>,std::equal_to<mlcore::ModelProperty<double> *>,true>,std::__unordered_map_equal<mlcore::ModelProperty<double> *,std::__hash_value_type<mlcore::ModelProperty<double> *,double>,std::equal_to<mlcore::ModelProperty<double> *>,std::hash<mlcore::ModelProperty<double> *>,true>,std::allocator<std::__hash_value_type<mlcore::ModelProperty<double> *,double>>>::find<mlcore::ModelProperty<double> *>((_QWORD *)(a1 + 8), a2);
  if (result)
  {
    v5 = result[4];
    *a3 = result[3];
    a3[1] = v5;
    if (v5)
    {
      v6 = (unint64_t *)(v5 + 8);
      do
        v7 = __ldxr(v6);
      while (__stxr(v7 + 1, v6));
    }
  }
  else
  {
    *a3 = 0;
    a3[1] = 0;
  }
  return result;
}

uint64_t std::__shared_ptr_emplace<mlcore::Playlist>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t std::__shared_ptr_emplace<mediaplatform::SQLNullExpression>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t mediaplatform::SQLLiteralValue<int>::~SQLLiteralValue(uint64_t a1)
{
  *(_QWORD *)a1 = off_24C335BB0;
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
  return a1;
}

void mlcore::EntityQuery::_perform(mlcore::EntityQuery *a1, uint64_t *a2, uint64_t a3)
{
  _QWORD *v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  mediaplatform::DatabaseConnection **v10;
  std::__shared_weak_count *v11;
  mediaplatform::DatabaseConnection *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  sqlite3_int64 v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  mediaplatform::DatabaseConnection *v37;
  uint64_t v38;
  std::__shared_weak_count *v39;
  uint64_t v40;
  unint64_t *v41;
  unint64_t v42;
  char *v43;
  __int128 v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  char *v48;
  __int128 v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  unint64_t v53;
  BOOL v54;
  BOOL v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  std::vector<std::string> *v59;
  const std::string *v60;
  std::vector<std::string>::const_iterator v61;
  std::vector<std::string> *v62;
  const std::string *v63;
  std::vector<std::string>::const_iterator v64;
  _QWORD *v65;
  void *v66;
  unint64_t *v67;
  unint64_t *v68;
  unint64_t v69;
  _QWORD *v70;
  unint64_t v71;
  std::__shared_weak_count *size;
  unint64_t *v73;
  unint64_t v74;
  std::__shared_weak_count *v75;
  unint64_t *v76;
  unint64_t v77;
  uint64_t *v78;
  unint64_t v79;
  unint64_t v80;
  uint64_t v81;
  const std::string::value_type ***v82;
  std::__shared_weak_count *v83;
  const std::string::value_type ***v84;
  unint64_t v85;
  const std::string::value_type **v86;
  const std::string::value_type **v87;
  uint64_t v88;
  _QWORD *v89;
  std::vector<std::string>::value_type *p_x;
  uint64_t v91;
  uint64_t *v92;
  unint64_t v93;
  int64x2_t v94;
  int64x2_t v95;
  unint64_t v96;
  unint64_t v97;
  char *v98;
  uint64_t v99;
  int v100;
  std::vector<std::string> *v101;
  const std::string *v102;
  std::vector<std::string>::const_iterator v103;
  std::vector<std::string> *v104;
  const std::string *v105;
  std::vector<std::string>::const_iterator v106;
  const std::string::value_type ***v107;
  const std::string::value_type **v108;
  uint64_t v109;
  _QWORD *v110;
  _QWORD *v111;
  uint64_t *v112;
  uint64_t *v113;
  _QWORD *v114;
  uint64_t v115;
  _QWORD *v116;
  std::string::size_type v117;
  std::string::size_type v118;
  uint64_t v119;
  unint64_t v120;
  int64_t v121;
  unint64_t v122;
  uint64_t v123;
  _QWORD *v124;
  uint64_t v125;
  uint64_t v126;
  std::__shared_weak_count *v127;
  uint64_t v128;
  std::__shared_weak_count *v129;
  unint64_t *v130;
  _QWORD *v131;
  unint64_t *v132;
  unint64_t v133;
  unint64_t *v134;
  unint64_t v135;
  unint64_t *v136;
  unint64_t v137;
  std::__shared_weak_count *v138;
  unint64_t *v139;
  unint64_t v140;
  unint64_t v141;
  uint64_t v142;
  std::__shared_weak_count *v143;
  unint64_t *v144;
  unint64_t v145;
  std::__shared_weak_count *v146;
  unint64_t *v147;
  unint64_t v148;
  std::__shared_weak_count *v149;
  unint64_t *v150;
  unint64_t v151;
  std::__shared_weak_count *v152;
  unint64_t *v153;
  unint64_t v154;
  std::__shared_weak_count *v155;
  unint64_t *v156;
  unint64_t v157;
  std::__shared_weak_count *v158;
  unint64_t *v159;
  unint64_t v160;
  std::__shared_weak_count *v161;
  unint64_t *v162;
  unint64_t v163;
  std::__shared_weak_count *v164;
  unint64_t *v165;
  unint64_t v166;
  std::__shared_weak_count *v167;
  unint64_t *v168;
  unint64_t v169;
  std::__shared_weak_count *v170;
  unint64_t *v171;
  unint64_t v172;
  std::__shared_weak_count *v173;
  unint64_t *v174;
  unint64_t v175;
  std::__shared_weak_count *v176;
  unint64_t *v177;
  unint64_t v178;
  std::__shared_weak_count *v179;
  unint64_t *v180;
  unint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  _QWORD *v185;
  std::__shared_weak_count *v186;
  _QWORD *v187;
  std::__shared_weak_count *v188;
  __int128 v189;
  std::string v190;
  void *__p;
  std::__shared_weak_count *v192;
  uint64_t v193;
  char v194;
  const std::string::value_type ***v195;
  std::__shared_weak_count *v196;
  unint64_t *v197;
  std::__shared_weak_count *v198;
  __int128 v199;
  __int128 v200;
  int v201;
  BOOL v202;
  uint64_t v203;
  uint64_t *v204;
  std::__shared_weak_count *v205;
  _QWORD *v206;
  std::string v207;
  std::string v208;
  uint64_t v209;
  std::__shared_weak_count *v210;
  uint64_t v211;
  std::__shared_weak_count *v212;
  __int128 v213;
  int v214;
  int v215;
  void (**v216)(mediaplatform::DatabaseParameterList *__hidden);
  _QWORD v217[3];
  uint64_t v218;
  std::__shared_weak_count *v219;
  __int128 v220;
  uint64_t v221;
  std::__shared_weak_count *v222;
  _QWORD *v223;
  std::__shared_weak_count *v224;
  mediaplatform::DatabaseConnection *v225;
  std::__shared_weak_count *v226;
  __int128 v227;
  __int128 v228;
  std::vector<std::string>::value_type __x;
  __int128 v230;
  int v231;
  uint64_t v232;

  v232 = *MEMORY[0x24BDAC8D0];
  v6 = (_QWORD *)*a2;
  v7 = *(_QWORD *)(*a2 + 24);
  *(_QWORD *)&v227 = *(_QWORD *)(*a2 + 16);
  *((_QWORD *)&v227 + 1) = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
    v6 = (_QWORD *)*a2;
  }
  v10 = (mediaplatform::DatabaseConnection **)v6[6];
  v12 = *v10;
  v11 = (std::__shared_weak_count *)v10[1];
  v225 = v12;
  v226 = v11;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldxr(p_shared_owners);
    while (__stxr(v14 + 1, p_shared_owners));
    v6 = (_QWORD *)*a2;
  }
  v15 = (std::__shared_weak_count *)a2[1];
  v223 = v6;
  v224 = v15;
  if (v15)
  {
    v16 = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
  }
  v18 = (std::__shared_weak_count *)v6[3];
  v204 = (uint64_t *)v6[2];
  v205 = v18;
  if (v18)
  {
    v19 = (unint64_t *)&v18->__shared_owners_;
    do
      v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
  }
  v206 = v6;
  v207.__r_.__value_.__r.__words[0] = (std::string::size_type)v15;
  if (v15)
  {
    v21 = (unint64_t *)&v15->__shared_owners_;
    do
      v22 = __ldxr(v21);
    while (__stxr(v22 + 1, v21));
  }
  v23 = mlcore::EntityRevisionController::latestRevisionNumber((mlcore::EntityRevisionController *)&v204);
  if (v15)
  {
    v24 = (unint64_t *)&v15->__shared_owners_;
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  v26 = v205;
  if (v205)
  {
    v27 = (unint64_t *)&v205->__shared_owners_;
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  v29 = v224;
  if (v224)
  {
    v30 = (unint64_t *)&v224->__shared_owners_;
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  v220 = v227;
  if (*((_QWORD *)&v227 + 1))
  {
    v32 = (unint64_t *)(*((_QWORD *)&v227 + 1) + 8);
    do
      v33 = __ldxr(v32);
    while (__stxr(v33 + 1, v32));
  }
  (*(void (**)(uint64_t *__return_ptr, mlcore::EntityQuery *, __int128 *))(*(_QWORD *)a1 + 128))(&v221, a1, &v220);
  v34 = (std::__shared_weak_count *)*((_QWORD *)&v220 + 1);
  if (*((_QWORD *)&v220 + 1))
  {
    v35 = (unint64_t *)(*((_QWORD *)&v220 + 1) + 8);
    do
      v36 = __ldaxr(v35);
    while (__stlxr(v36 - 1, v35));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
  }
  v37 = v225;
  v38 = v221;
  v216 = &off_24C331228;
  memset(v217, 0, sizeof(v217));
  std::vector<std::shared_ptr<mediaplatform::DatabaseParameterBase>>::__init_with_size[abi:ne180100]<std::shared_ptr<mediaplatform::DatabaseParameterBase>*,std::shared_ptr<mediaplatform::DatabaseParameterBase>*>(v217, *(_QWORD **)(v221 + 40), *(_QWORD **)(v221 + 48), (uint64_t)(*(_QWORD *)(v221 + 48) - *(_QWORD *)(v221 + 40)) >> 4);
  mediaplatform::DatabaseConnection::executeQuery<mediaplatform::DatabaseResultList,mediaplatform::DatabaseParameterList>(&v218, v37, (unsigned __int8 *)(v38 + 8), (uint64_t)&v216);
  v216 = &off_24C331228;
  v204 = v217;
  std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v204);
  v215 = -1;
  v214 = -1;
  v213 = 0uLL;
  mlcore::DeviceLibraryView::library((mlcore::DeviceLibraryView *)v227, &v211);
  v40 = *(_QWORD *)(v211 + 152);
  v39 = *(std::__shared_weak_count **)(v211 + 160);
  v209 = v40;
  v210 = v39;
  if (v39)
  {
    v41 = (unint64_t *)&v39->__shared_owners_;
    do
      v42 = __ldxr(v41);
    while (__stxr(v42 + 1, v41));
  }
  v204 = 0;
  v205 = 0;
  v206 = 0;
  std::vector<mlcore::LocalizedSectionHeader>::__init_with_size[abi:ne180100]<mlcore::LocalizedSectionHeader*,mlcore::LocalizedSectionHeader*>((uint64_t)&v204, *(_QWORD *)(v40 + 280), *(_QWORD *)(v40 + 288), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(v40 + 288) - *(_QWORD *)(v40 + 280)) >> 3));
  memset(&v207, 0, sizeof(v207));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v207, *(__int128 **)(v40 + 304), *(__int128 **)(v40 + 312), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v40 + 312) - *(_QWORD *)(v40 + 304)) >> 3));
  if (*(char *)(v40 + 351) < 0)
    std::string::__init_copy_ctor_external(&v208, *(const std::string::value_type **)(v40 + 328), *(_QWORD *)(v40 + 336));
  else
    v208 = *(std::string *)(v40 + 328);
  v203 = mlcore::EntityQuery::_sectionProperty(a1);
  v202 = v203 != 0;
  v201 = -1;
  v200 = 0uLL;
  v199 = 0uLL;
  if (v203)
  {
    mlcore::LocalizedSectionsInfo::allLocalizedHeaderTitles(&v204, (std::vector<std::string> *)&__x);
    v43 = (char *)operator new(0x30uLL);
    *(_OWORD *)(v43 + 8) = 0u;
    *(_QWORD *)v43 = &off_24C33D710;
    *((_QWORD *)v43 + 3) = 0;
    *((_OWORD *)v43 + 2) = 0u;
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)v43 + 1, (__int128 *)__x.__r_.__value_.__l.__data_, (__int128 *)__x.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(__x.__r_.__value_.__l.__size_ - __x.__r_.__value_.__r.__words[0]) >> 3));
    *(_QWORD *)&v44 = v43 + 24;
    *((_QWORD *)&v44 + 1) = v43;
    v45 = (std::__shared_weak_count *)*((_QWORD *)&v200 + 1);
    v200 = v44;
    if (v45)
    {
      v46 = (unint64_t *)&v45->__shared_owners_;
      do
        v47 = __ldaxr(v46);
      while (__stlxr(v47 - 1, v46));
      if (!v47)
      {
        ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
        std::__shared_weak_count::__release_weak(v45);
      }
    }
    __p = &__x;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
    v48 = (char *)operator new(0x30uLL);
    *(_OWORD *)(v48 + 8) = 0u;
    *(_QWORD *)v48 = &off_24C33D710;
    *((_QWORD *)v48 + 3) = 0;
    *((_OWORD *)v48 + 2) = 0u;
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)v48 + 1, (__int128 *)v207.__r_.__value_.__l.__data_, (__int128 *)v207.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v207.__r_.__value_.__l.__size_ - v207.__r_.__value_.__r.__words[0]) >> 3));
    *(_QWORD *)&v49 = v48 + 24;
    *((_QWORD *)&v49 + 1) = v48;
    v50 = (std::__shared_weak_count *)*((_QWORD *)&v199 + 1);
    v199 = v49;
    if (v50)
    {
      v51 = (unint64_t *)&v50->__shared_owners_;
      do
        v52 = __ldaxr(v51);
      while (__stlxr(v52 - 1, v51));
      if (!v52)
      {
        ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
        std::__shared_weak_count::__release_weak(v50);
      }
    }
    v53 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v199 + 8) - *(_QWORD *)v199) >> 3);
    v54 = v53 >= 2;
    v55 = v53 > 2;
    v56 = v53 - 2;
    v57 = v55;
    if (v54)
      v58 = v56;
    else
      v58 = 0;
    v59 = (std::vector<std::string> *)v200;
    v60 = *(const std::string **)(v200 + 8);
    v201 = -1431655765 * (((unint64_t)v60 - *(_QWORD *)v200) >> 3) + 1;
    mlcore::_LocalizedString((mlcore *)&__x, CFSTR("NUMERIC_SECTION_HEADER_TITLE"));
    v61.__i_ = v60;
    std::vector<std::string>::insert(v59, v61, &__x);
    if (SHIBYTE(__x.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__x.__r_.__value_.__l.__data_);
    v62 = (std::vector<std::string> *)v199;
    v63 = *(const std::string **)(v199 + 8);
    mlcore::_LocalizedString((mlcore *)&__x, CFSTR("NUMERIC_SECTION_INDEX_TITLE"));
    v64.__i_ = v63;
    std::vector<std::string>::insert(v62, v64, &__x);
    if (SHIBYTE(__x.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__x.__r_.__value_.__l.__data_);
  }
  else
  {
    v57 = 0;
    v58 = 0;
  }
  v65 = (_QWORD *)operator new();
  *v65 = 0;
  v65[1] = 0;
  v65[2] = 0;
  std::shared_ptr<std::vector<mlcore::PropertyCache>>::shared_ptr[abi:ne180100]<std::vector<mlcore::PropertyCache>,void>(&v197, (uint64_t)v65);
  v66 = *(void **)(*a2 + 16);
  v67 = *(unint64_t **)(*a2 + 24);
  __p = v66;
  v192 = (std::__shared_weak_count *)v67;
  if (v67)
  {
    v68 = v67 + 1;
    do
      v69 = __ldxr(v68);
    while (__stxr(v69 + 1, v68));
  }
  v184 = v58;
  mlcore::DeviceLibraryView::library((mlcore::DeviceLibraryView *)v66, &__x);
  v70 = (_QWORD *)(__x.__r_.__value_.__r.__words[0] + 184);
  while (1)
  {
    v70 = (_QWORD *)*v70;
    if (!v70)
      break;
    if (v70[2] == *((_QWORD *)a1 + 1))
    {
      v71 = v70[3];
      goto LABEL_77;
    }
  }
  v71 = 0;
LABEL_77:
  size = (std::__shared_weak_count *)__x.__r_.__value_.__l.__size_;
  if (__x.__r_.__value_.__l.__size_)
  {
    v73 = (unint64_t *)(__x.__r_.__value_.__l.__size_ + 8);
    do
      v74 = __ldaxr(v73);
    while (__stlxr(v74 - 1, v73));
    if (!v74)
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
  }
  v75 = v192;
  if (v192)
  {
    v76 = (unint64_t *)&v192->__shared_owners_;
    do
      v77 = __ldaxr(v76);
    while (__stlxr(v77 - 1, v76));
    if (!v77)
    {
      ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
      std::__shared_weak_count::__release_weak(v75);
    }
  }
  v183 = v57;
  if (v71)
  {
    v78 = (uint64_t *)v197;
    v79 = *v197;
    if (0x84BDA12F684BDA13 * ((uint64_t)(v197[2] - *v197) >> 3) < v71)
    {
      if (v71 >= 0x12F684BDA12F685)
        std::vector<std::string>::__throw_length_error[abi:ne180100]();
      v80 = v197[1];
      *((_QWORD *)&v230 + 1) = v197 + 2;
      __x.__r_.__value_.__r.__words[0] = (std::string::size_type)std::__allocate_at_least[abi:ne180100]<std::allocator<mlcore::PropertyCache>>(v71);
      __x.__r_.__value_.__l.__size_ = __x.__r_.__value_.__r.__words[0] + v80 - v79;
      __x.__r_.__value_.__r.__words[2] = __x.__r_.__value_.__l.__size_;
      *(_QWORD *)&v230 = __x.__r_.__value_.__r.__words[0] + 216 * v81;
      std::vector<mlcore::PropertyCache>::__swap_out_circular_buffer(v78, &__x);
      std::__split_buffer<mlcore::PropertyCache>::~__split_buffer((uint64_t)&__x);
    }
  }
  v82 = (const std::string::value_type ***)operator new();
  *v82 = 0;
  v82[1] = 0;
  v82[2] = 0;
  v195 = v82;
  __x.__r_.__value_.__r.__words[0] = (std::string::size_type)v82;
  v83 = (std::__shared_weak_count *)operator new();
  v83->__vftable = (std::__shared_weak_count_vtbl *)&off_24C33D940;
  v83->__shared_owners_ = 0;
  v83->__shared_weak_owners_ = 0;
  v83[1].__vftable = (std::__shared_weak_count_vtbl *)v82;
  v196 = v83;
  __x.__r_.__value_.__r.__words[0] = 0;
  std::unique_ptr<std::vector<mlcore::Section>>::reset[abi:ne180100]((void ***)&__x);
  if ((_QWORD)v200)
  {
    v84 = v195;
    v85 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v200 + 8) - *(_QWORD *)v200) >> 3);
    v86 = *v195;
    if (0xAAAAAAAAAAAAAAABLL * (((char *)v195[2] - (char *)*v195) >> 4) < v85)
    {
      if (v85 >= 0x555555555555556)
        std::vector<std::string>::__throw_length_error[abi:ne180100]();
      v87 = v195[1];
      *((_QWORD *)&v230 + 1) = v195 + 2;
      __x.__r_.__value_.__r.__words[0] = (std::string::size_type)std::__allocate_at_least[abi:ne180100]<std::allocator<mlcore::Section>>(v85);
      __x.__r_.__value_.__l.__size_ = __x.__r_.__value_.__r.__words[0] + (char *)v87 - (char *)v86;
      __x.__r_.__value_.__r.__words[2] = __x.__r_.__value_.__l.__size_;
      *(_QWORD *)&v230 = __x.__r_.__value_.__r.__words[0] + 48 * v88;
      std::vector<mlcore::Section>::__swap_out_circular_buffer(v84, &__x);
      std::__split_buffer<mlcore::Section>::~__split_buffer((uint64_t)&__x);
    }
  }
  v194 = 0;
  (*(void (**)(std::vector<std::string>::value_type *__return_ptr, mlcore::EntityQuery *))(*(_QWORD *)a1 + 120))(&__x, a1);
  __p = 0;
  v192 = 0;
  v193 = 0;
  std::vector<mlcore::ModelPropertyBase *>::__init_with_size[abi:ne180100]<mlcore::ModelPropertyBase **,mlcore::ModelPropertyBase **>(&__p, __x.__r_.__value_.__l.__data_, __x.__r_.__value_.__l.__size_, (uint64_t)(__x.__r_.__value_.__l.__size_ - __x.__r_.__value_.__r.__words[0]) >> 3);
  std::__hash_table<mlcore::ModelPropertyBase *,std::hash<mlcore::ModelPropertyBase *>,std::equal_to<mlcore::ModelPropertyBase *>,std::allocator<mlcore::ModelPropertyBase *>>::~__hash_table((uint64_t)&v230);
  if (__x.__r_.__value_.__r.__words[0])
  {
    __x.__r_.__value_.__l.__size_ = __x.__r_.__value_.__r.__words[0];
    operator delete(__x.__r_.__value_.__l.__data_);
  }
  v89 = operator new(0x68uLL);
  *v89 = &off_24C33AD78;
  v89[1] = &__p;
  v89[2] = &v202;
  v89[3] = &v203;
  v89[4] = &v215;
  v89[5] = &v201;
  v89[6] = &v194;
  v89[7] = &v200;
  v89[8] = &v199;
  v89[9] = &v213;
  v89[10] = &v195;
  v89[11] = &v214;
  v89[12] = &v197;
  *(_QWORD *)&v230 = v89;
  mediaplatform::DatabaseResult<mediaplatform::DatabaseResultList>::enumerateRows(&v218, (uint64_t)&__x);
  p_x = (std::vector<std::string>::value_type *)v230;
  if ((std::vector<std::string>::value_type *)v230 == &__x)
  {
    v91 = 4;
    p_x = &__x;
  }
  else
  {
    if (!(_QWORD)v230)
      goto LABEL_102;
    v91 = 5;
  }
  (*(void (**)(void))(p_x->__r_.__value_.__r.__words[0] + 8 * v91))();
LABEL_102:
  v92 = (uint64_t *)v197;
  v93 = *v197;
  v94 = *(int64x2_t *)(v197 + 1);
  v95 = vshrq_n_s64(vsubq_s64(v94, vdupq_n_s64(*v197)), 3uLL);
  v96 = 0x84BDA12F684BDA13 * v95.i64[0];
  v97 = v96;
  if (0x84BDA12F684BDA13 * v95.i64[1] > v96)
  {
    *((_QWORD *)&v230 + 1) = v197 + 2;
    if (v94.i64[0] == v93)
    {
      v98 = 0;
      v99 = 0;
    }
    else
    {
      v98 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<mlcore::PropertyCache>>(v96);
    }
    __x.__r_.__value_.__r.__words[0] = (std::string::size_type)v98;
    __x.__r_.__value_.__l.__size_ = (std::string::size_type)&v98[216 * v97];
    __x.__r_.__value_.__r.__words[2] = __x.__r_.__value_.__l.__size_;
    *(_QWORD *)&v230 = &v98[216 * v99];
    std::vector<mlcore::PropertyCache>::__swap_out_circular_buffer(v92, &__x);
    std::__split_buffer<mlcore::PropertyCache>::~__split_buffer((uint64_t)&__x);
  }
  if (v202)
  {
    v100 = v215;
    if (!v215 && v214 >= 1)
    {
      v215 = v201;
      v100 = v201;
    }
    if (v100 == v201 && !v194)
    {
      v194 = 1;
      v101 = (std::vector<std::string> *)v200;
      v102 = *(const std::string **)(v200 + 8);
      mlcore::_LocalizedString((mlcore *)&__x, CFSTR("UNKNOWN_SECTION_HEADER_TITLE"));
      v103.__i_ = v102;
      std::vector<std::string>::insert(v101, v103, &__x);
      if (SHIBYTE(__x.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__x.__r_.__value_.__l.__data_);
      v104 = (std::vector<std::string> *)v199;
      v105 = *(const std::string **)(v199 + 8);
      mlcore::_LocalizedString((mlcore *)&__x, CFSTR("UNKNOWN_SECTION_INDEX_TITLE"));
      v106.__i_ = v105;
      std::vector<std::string>::insert(v104, v106, &__x);
      if (SHIBYTE(__x.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__x.__r_.__value_.__l.__data_);
      v100 = v215;
    }
    memset(&v190, 0, sizeof(v190));
    if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v200 + 8) - *(_QWORD *)v200) >> 3) > v100
      && (std::string::operator=(&v190, (const std::string *)(*(_QWORD *)v200 + 24 * v100)),
          v100 = v215,
          SHIBYTE(v190.__r_.__value_.__r.__words[2]) < 0))
    {
      std::string::__init_copy_ctor_external(&__x, v190.__r_.__value_.__l.__data_, v190.__r_.__value_.__l.__size_);
    }
    else
    {
      __x = v190;
    }
    v230 = v213;
    v231 = v100;
    v107 = v195;
    v108 = v195[1];
    if (v108 >= v195[2])
    {
      v109 = std::vector<mlcore::Section>::__push_back_slow_path<mlcore::Section const&>((uint64_t)v195, (__int128 *)&__x);
    }
    else
    {
      std::vector<mlcore::Section>::__construct_one_at_end[abi:ne180100]<mlcore::Section const&>((uint64_t)v195, (__int128 *)&__x);
      v109 = (uint64_t)(v108 + 6);
    }
    v107[1] = (const std::string::value_type **)v109;
    if (SHIBYTE(__x.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__x.__r_.__value_.__l.__data_);
    if (SHIBYTE(v190.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v190.__r_.__value_.__l.__data_);
  }
  v189 = 0uLL;
  if (!*(_BYTE *)(*a2 + 65))
  {
    std::allocate_shared[abi:ne180100]<mlcore::EntityCache,std::allocator<mlcore::EntityCache>,std::shared_ptr<mlcore::Transaction> &,void>(&__x, *a2, (std::__shared_weak_count *)a2[1]);
    v189 = *(_OWORD *)&__x.__r_.__value_.__l.__data_;
  }
  v182 = a3;
  v110 = (_QWORD *)*((_QWORD *)a1 + 13);
  v111 = (_QWORD *)*((_QWORD *)a1 + 14);
  memset(&__x, 0, sizeof(__x));
  v112 = (uint64_t *)*((_QWORD *)a1 + 10);
  v113 = (uint64_t *)*((_QWORD *)a1 + 11);
  if (v112 != v113)
  {
    v114 = 0;
    do
    {
      v115 = *v112;
      v116 = v110;
      if (v110 != v111)
      {
        while (*v116 != v115)
        {
          if (++v116 == v111)
          {
            v116 = v111;
            break;
          }
        }
      }
      if (v116 == v111)
      {
        if ((unint64_t)v114 >= __x.__r_.__value_.__r.__words[2])
        {
          v118 = __x.__r_.__value_.__r.__words[0];
          v119 = (uint64_t)((uint64_t)v114 - __x.__r_.__value_.__r.__words[0]) >> 3;
          v120 = v119 + 1;
          if ((unint64_t)(v119 + 1) >> 61)
            std::vector<std::string>::__throw_length_error[abi:ne180100]();
          v121 = __x.__r_.__value_.__r.__words[2] - __x.__r_.__value_.__r.__words[0];
          if ((uint64_t)(__x.__r_.__value_.__r.__words[2] - __x.__r_.__value_.__r.__words[0]) >> 2 > v120)
            v120 = v121 >> 2;
          if ((unint64_t)v121 >= 0x7FFFFFFFFFFFFFF8)
            v122 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v122 = v120;
          if (v122)
            v122 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<mlcore::ModelPropertyBase *>>(v122);
          else
            v123 = 0;
          v124 = (_QWORD *)(v122 + 8 * v119);
          *v124 = v115;
          v117 = (std::string::size_type)(v124 + 1);
          if (v114 != (_QWORD *)v118)
          {
            do
            {
              v125 = *--v114;
              *--v124 = v125;
            }
            while (v114 != (_QWORD *)v118);
            v114 = (_QWORD *)__x.__r_.__value_.__r.__words[0];
          }
          __x.__r_.__value_.__r.__words[0] = (std::string::size_type)v124;
          __x.__r_.__value_.__l.__size_ = v117;
          __x.__r_.__value_.__r.__words[2] = v122 + 8 * v123;
          if (v114)
            operator delete(v114);
        }
        else
        {
          *v114 = v115;
          v117 = (std::string::size_type)(v114 + 1);
        }
        __x.__r_.__value_.__l.__size_ = v117;
        v114 = (_QWORD *)v117;
      }
      ++v112;
    }
    while (v112 != v113);
  }
  v126 = *((_QWORD *)a1 + 1);
  v127 = (std::__shared_weak_count *)operator new(0x128uLL);
  v129 = v127;
  v127->__shared_owners_ = 0;
  v130 = (unint64_t *)&v127->__shared_owners_;
  v127->__shared_weak_owners_ = 0;
  v127->__vftable = (std::__shared_weak_count_vtbl *)&off_24C33CD38;
  v131 = &v127[1].__vftable;
  *(_OWORD *)&v190.__r_.__value_.__l.__data_ = v227;
  if (*((_QWORD *)&v227 + 1))
  {
    v132 = (unint64_t *)(*((_QWORD *)&v227 + 1) + 8);
    do
      v133 = __ldxr(v132);
    while (__stxr(v133 + 1, v132));
  }
  v228 = v189;
  if (*((_QWORD *)&v189 + 1))
  {
    v134 = (unint64_t *)(*((_QWORD *)&v189 + 1) + 8);
    do
      v135 = __ldxr(v134);
    while (__stxr(v135 + 1, v134));
  }
  mlcore::EntityQueryResult::EntityQueryResult(&v127[1].__vftable, &v190, v126, (uint64_t)&__x, &v197, &v195, &v199, v128, v183, v184, v23, (uint64_t *)&v228);
  if (*((_QWORD *)&v189 + 1))
  {
    v136 = (unint64_t *)(*((_QWORD *)&v189 + 1) + 8);
    do
      v137 = __ldaxr(v136);
    while (__stlxr(v137 - 1, v136));
    if (!v137)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v189 + 1) + 16))(*((_QWORD *)&v189 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v189 + 1));
    }
  }
  v138 = (std::__shared_weak_count *)v190.__r_.__value_.__l.__size_;
  if (v190.__r_.__value_.__l.__size_)
  {
    v139 = (unint64_t *)(v190.__r_.__value_.__l.__size_ + 8);
    do
      v140 = __ldaxr(v139);
    while (__stlxr(v140 - 1, v139));
    if (!v140)
    {
      ((void (*)(std::__shared_weak_count *))v138->__on_zero_shared)(v138);
      std::__shared_weak_count::__release_weak(v138);
    }
  }
  v187 = v131;
  v188 = v129;
  v185 = v131;
  v186 = v129;
  do
    v141 = __ldxr(v130);
  while (__stxr(v141 + 1, v130));
  v142 = *(_QWORD *)(v182 + 24);
  if (!v142)
    std::__throw_bad_function_call[abi:ne180100]();
  (*(void (**)(uint64_t, _QWORD **))(*(_QWORD *)v142 + 48))(v142, &v185);
  v143 = v186;
  if (v186)
  {
    v144 = (unint64_t *)&v186->__shared_owners_;
    do
      v145 = __ldaxr(v144);
    while (__stlxr(v145 - 1, v144));
    if (!v145)
    {
      ((void (*)(std::__shared_weak_count *))v143->__on_zero_shared)(v143);
      std::__shared_weak_count::__release_weak(v143);
    }
  }
  v146 = v188;
  if (v188)
  {
    v147 = (unint64_t *)&v188->__shared_owners_;
    do
      v148 = __ldaxr(v147);
    while (__stlxr(v148 - 1, v147));
    if (!v148)
    {
      ((void (*)(std::__shared_weak_count *))v146->__on_zero_shared)(v146);
      std::__shared_weak_count::__release_weak(v146);
    }
  }
  if (__x.__r_.__value_.__r.__words[0])
    operator delete(__x.__r_.__value_.__l.__data_);
  v149 = (std::__shared_weak_count *)*((_QWORD *)&v189 + 1);
  if (*((_QWORD *)&v189 + 1))
  {
    v150 = (unint64_t *)(*((_QWORD *)&v189 + 1) + 8);
    do
      v151 = __ldaxr(v150);
    while (__stlxr(v151 - 1, v150));
    if (!v151)
    {
      ((void (*)(std::__shared_weak_count *))v149->__on_zero_shared)(v149);
      std::__shared_weak_count::__release_weak(v149);
    }
  }
  if (__p)
  {
    v192 = (std::__shared_weak_count *)__p;
    operator delete(__p);
  }
  v152 = v196;
  if (v196)
  {
    v153 = (unint64_t *)&v196->__shared_owners_;
    do
      v154 = __ldaxr(v153);
    while (__stlxr(v154 - 1, v153));
    if (!v154)
    {
      ((void (*)(std::__shared_weak_count *))v152->__on_zero_shared)(v152);
      std::__shared_weak_count::__release_weak(v152);
    }
  }
  v155 = v198;
  if (v198)
  {
    v156 = (unint64_t *)&v198->__shared_owners_;
    do
      v157 = __ldaxr(v156);
    while (__stlxr(v157 - 1, v156));
    if (!v157)
    {
      ((void (*)(std::__shared_weak_count *))v155->__on_zero_shared)(v155);
      std::__shared_weak_count::__release_weak(v155);
    }
  }
  v158 = (std::__shared_weak_count *)*((_QWORD *)&v199 + 1);
  if (*((_QWORD *)&v199 + 1))
  {
    v159 = (unint64_t *)(*((_QWORD *)&v199 + 1) + 8);
    do
      v160 = __ldaxr(v159);
    while (__stlxr(v160 - 1, v159));
    if (!v160)
    {
      ((void (*)(std::__shared_weak_count *))v158->__on_zero_shared)(v158);
      std::__shared_weak_count::__release_weak(v158);
    }
  }
  v161 = (std::__shared_weak_count *)*((_QWORD *)&v200 + 1);
  if (*((_QWORD *)&v200 + 1))
  {
    v162 = (unint64_t *)(*((_QWORD *)&v200 + 1) + 8);
    do
      v163 = __ldaxr(v162);
    while (__stlxr(v163 - 1, v162));
    if (!v163)
    {
      ((void (*)(std::__shared_weak_count *))v161->__on_zero_shared)(v161);
      std::__shared_weak_count::__release_weak(v161);
    }
  }
  if (SHIBYTE(v208.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v208.__r_.__value_.__l.__data_);
  __x.__r_.__value_.__r.__words[0] = (std::string::size_type)&v207;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__x);
  __x.__r_.__value_.__r.__words[0] = (std::string::size_type)&v204;
  std::vector<mlcore::LocalizedSectionHeader>::__destroy_vector::operator()[abi:ne180100]((void ***)&__x);
  v164 = v210;
  if (v210)
  {
    v165 = (unint64_t *)&v210->__shared_owners_;
    do
      v166 = __ldaxr(v165);
    while (__stlxr(v166 - 1, v165));
    if (!v166)
    {
      ((void (*)(std::__shared_weak_count *))v164->__on_zero_shared)(v164);
      std::__shared_weak_count::__release_weak(v164);
    }
  }
  v167 = v212;
  if (v212)
  {
    v168 = (unint64_t *)&v212->__shared_owners_;
    do
      v169 = __ldaxr(v168);
    while (__stlxr(v169 - 1, v168));
    if (!v169)
    {
      ((void (*)(std::__shared_weak_count *))v167->__on_zero_shared)(v167);
      std::__shared_weak_count::__release_weak(v167);
    }
  }
  v170 = v219;
  if (v219)
  {
    v171 = (unint64_t *)&v219->__shared_owners_;
    do
      v172 = __ldaxr(v171);
    while (__stlxr(v172 - 1, v171));
    if (!v172)
    {
      ((void (*)(std::__shared_weak_count *))v170->__on_zero_shared)(v170);
      std::__shared_weak_count::__release_weak(v170);
    }
  }
  v173 = v222;
  if (v222)
  {
    v174 = (unint64_t *)&v222->__shared_owners_;
    do
      v175 = __ldaxr(v174);
    while (__stlxr(v175 - 1, v174));
    if (!v175)
    {
      ((void (*)(std::__shared_weak_count *))v173->__on_zero_shared)(v173);
      std::__shared_weak_count::__release_weak(v173);
    }
  }
  v176 = v226;
  if (v226)
  {
    v177 = (unint64_t *)&v226->__shared_owners_;
    do
      v178 = __ldaxr(v177);
    while (__stlxr(v178 - 1, v177));
    if (!v178)
    {
      ((void (*)(std::__shared_weak_count *))v176->__on_zero_shared)(v176);
      std::__shared_weak_count::__release_weak(v176);
    }
  }
  v179 = (std::__shared_weak_count *)*((_QWORD *)&v227 + 1);
  if (*((_QWORD *)&v227 + 1))
  {
    v180 = (unint64_t *)(*((_QWORD *)&v227 + 1) + 8);
    do
      v181 = __ldaxr(v180);
    while (__stlxr(v181 - 1, v180));
    if (!v181)
    {
      ((void (*)(std::__shared_weak_count *))v179->__on_zero_shared)(v179);
      std::__shared_weak_count::__release_weak(v179);
    }
  }
}

void sub_20A665520(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31,void *a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36,uint64_t a37,char a38,uint64_t a39,char a40,uint64_t a41,char a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,char a55,uint64_t a56,char a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a66;
  uint64_t v66;

  if (a31 < 0)
    operator delete(__p);
  if (a32)
    operator delete(a32);
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)&a36);
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)&a38);
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)&a40);
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)&a42);
  mlcore::LocalizedSectionsInfo::~LocalizedSectionsInfo((void **)&a46);
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)&a55);
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)&a57);
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)&a66);
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100](v66 - 256);
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100](v66 - 224);
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100](v66 - 208);
  _Unwind_Resume(a1);
}

void mlcore::PropertiesQuery::_perform(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  mediaplatform::DatabaseConnection **v10;
  std::__shared_weak_count *v11;
  mediaplatform::DatabaseConnection *v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  mediaplatform::DatabaseConnection *v20;
  uint64_t v21;
  void **p_p;
  uint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  uint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  _QWORD *v46;
  std::__shared_weak_count *v47;
  _QWORD *v48;
  std::__shared_weak_count *v49;
  void *v50;
  void *v51;
  uint64_t v52;
  uint64_t v53[3];
  void (**v54)(mediaplatform::DatabaseParameterList *__hidden);
  _QWORD v55[3];
  uint64_t v56;
  std::__shared_weak_count *v57;
  uint64_t v58;
  std::__shared_weak_count *v59;
  uint64_t v60;
  std::__shared_weak_count *v61;
  mediaplatform::DatabaseConnection *v62;
  std::__shared_weak_count *v63;
  uint64_t v64;
  std::__shared_weak_count *v65;
  void *v66[2];
  char v67;
  void *__p;
  _BYTE *v69;
  uint64_t *v70;
  _QWORD v71[4];
  char v72;
  std::exception v73[10];
  char v74;
  uint64_t v75;

  v75 = *MEMORY[0x24BDAC8D0];
  v5 = *a2;
  v7 = *(_QWORD *)(*a2 + 16);
  v6 = *(std::__shared_weak_count **)(*a2 + 24);
  v64 = v7;
  v65 = v6;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
    v5 = *a2;
  }
  v10 = *(mediaplatform::DatabaseConnection ***)(v5 + 48);
  v12 = *v10;
  v11 = (std::__shared_weak_count *)v10[1];
  v62 = v12;
  v63 = v11;
  if (v11)
  {
    v13 = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  v58 = v7;
  v59 = v6;
  if (v6)
  {
    v15 = (unint64_t *)&v6->__shared_owners_;
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t *))(*(_QWORD *)a1 + 128))(&v60, a1, &v58);
  v17 = v59;
  if (v59)
  {
    v18 = (unint64_t *)&v59->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  v20 = v62;
  v21 = v60;
  v54 = &off_24C331228;
  memset(v55, 0, sizeof(v55));
  std::vector<std::shared_ptr<mediaplatform::DatabaseParameterBase>>::__init_with_size[abi:ne180100]<std::shared_ptr<mediaplatform::DatabaseParameterBase>*,std::shared_ptr<mediaplatform::DatabaseParameterBase>*>(v55, *(_QWORD **)(v60 + 40), *(_QWORD **)(v60 + 48), (uint64_t)(*(_QWORD *)(v60 + 48) - *(_QWORD *)(v60 + 40)) >> 4);
  mediaplatform::DatabaseConnection::executeQuery<mediaplatform::DatabaseResultList,mediaplatform::DatabaseParameterList>(&v56, v20, (unsigned __int8 *)(v21 + 8), (uint64_t)&v54);
  v54 = &off_24C331228;
  __p = v55;
  std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  memset(v53, 0, sizeof(v53));
  (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)a1 + 120))(&__p, a1);
  v50 = 0;
  v51 = 0;
  v52 = 0;
  std::vector<mlcore::ModelPropertyBase *>::__init_with_size[abi:ne180100]<mlcore::ModelPropertyBase **,mlcore::ModelPropertyBase **>(&v50, __p, (uint64_t)v69, (v69 - (_BYTE *)__p) >> 3);
  std::__hash_table<mlcore::ModelPropertyBase *,std::hash<mlcore::ModelPropertyBase *>,std::equal_to<mlcore::ModelPropertyBase *>,std::allocator<mlcore::ModelPropertyBase *>>::~__hash_table((uint64_t)v71);
  if (__p)
  {
    v69 = __p;
    operator delete(__p);
  }
  __p = &off_24C33B2A0;
  v69 = &v50;
  v70 = v53;
  v71[0] = &__p;
  mediaplatform::DatabaseResult<mediaplatform::DatabaseResultList>::enumerateRows(&v56, (uint64_t)&__p);
  p_p = (void **)v71[0];
  if ((void **)v71[0] == &__p)
  {
    v23 = 4;
    p_p = &__p;
  }
  else
  {
    if (!v71[0])
      goto LABEL_23;
    v23 = 5;
  }
  (*((void (**)(void))*p_p + v23))();
LABEL_23:
  v24 = (std::__shared_weak_count *)operator new(0xD0uLL);
  v24->__shared_owners_ = 0;
  v25 = (unint64_t *)&v24->__shared_owners_;
  v24->__shared_weak_owners_ = 0;
  v24->__vftable = (std::__shared_weak_count_vtbl *)&off_24C33D048;
  std::string::basic_string[abi:ne180100]<0>(v66, "");
  mlcore::MediaError::MediaError((uint64_t)&__p, 0, (uint64_t)v66);
  mlcore::PropertiesQueryResult::PropertiesQueryResult(&v24[1].__vftable, v53, (uint64_t)&__p);
  __p = off_24C335E70;
  v71[0] = &unk_24C335EA0;
  if (v74 < 0)
    operator delete(v73[8].__vftable);
  mediaplatform::PlatformErrorCondition::~PlatformErrorCondition(v73);
  if (v72 < 0)
    operator delete((void *)v71[2]);
  std::exception::~exception((std::exception *)&__p);
  if (v67 < 0)
    operator delete(v66[0]);
  v48 = &v24[1].__vftable;
  v49 = v24;
  v46 = &v24[1].__vftable;
  v47 = v24;
  do
    v26 = __ldxr(v25);
  while (__stxr(v26 + 1, v25));
  v27 = *(_QWORD *)(a3 + 24);
  if (!v27)
    std::__throw_bad_function_call[abi:ne180100]();
  (*(void (**)(uint64_t, _QWORD **))(*(_QWORD *)v27 + 48))(v27, &v46);
  v28 = v47;
  if (v47)
  {
    v29 = (unint64_t *)&v47->__shared_owners_;
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  v31 = v49;
  if (v49)
  {
    v32 = (unint64_t *)&v49->__shared_owners_;
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
  if (v50)
  {
    v51 = v50;
    operator delete(v50);
  }
  __p = v53;
  std::vector<mlcore::PropertyCache>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  v34 = v57;
  if (v57)
  {
    v35 = (unint64_t *)&v57->__shared_owners_;
    do
      v36 = __ldaxr(v35);
    while (__stlxr(v36 - 1, v35));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
  }
  v37 = v61;
  if (v61)
  {
    v38 = (unint64_t *)&v61->__shared_owners_;
    do
      v39 = __ldaxr(v38);
    while (__stlxr(v39 - 1, v38));
    if (!v39)
    {
      ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
      std::__shared_weak_count::__release_weak(v37);
    }
  }
  v40 = v63;
  if (v63)
  {
    v41 = (unint64_t *)&v63->__shared_owners_;
    do
      v42 = __ldaxr(v41);
    while (__stlxr(v42 - 1, v41));
    if (!v42)
    {
      ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
      std::__shared_weak_count::__release_weak(v40);
    }
  }
  v43 = v65;
  if (v65)
  {
    v44 = (unint64_t *)&v65->__shared_owners_;
    do
      v45 = __ldaxr(v44);
    while (__stlxr(v45 - 1, v44));
    if (!v45)
    {
      ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
      std::__shared_weak_count::__release_weak(v43);
    }
  }
}

void sub_20A665CB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, char *a14, char *a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,char a26,uint64_t a27,char a28,uint64_t a29,char a30,uint64_t a31,char a32,uint64_t a33,void *__p,uint64_t a35,int a36,__int16 a37,char a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43)
{
  std::__shared_weak_count *v43;
  void *v45;

  mlcore::MediaError::~MediaError((std::exception *)&a40);
  if (a39 < 0)
    operator delete(__p);
  std::__shared_weak_count::~__shared_weak_count(v43);
  operator delete(v45);
  if (a14)
  {
    a15 = a14;
    operator delete(a14);
  }
  a14 = &a17;
  std::vector<mlcore::PropertyCache>::__destroy_vector::operator()[abi:ne180100]((void ***)&a14);
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)&a24);
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)&a28);
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)&a30);
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)&a32);
  _Unwind_Resume(a1);
}

uint64_t mlcore::MediaError::MediaError(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  __int128 v7;
  mlcore *v8;
  uint64_t v9;
  void *__p[2];
  char v12;
  int v13;

  v6 = mlcore::__category((mlcore *)a1);
  *(_DWORD *)(a1 + 8) = a2;
  *(_QWORD *)a1 = off_24C335E70;
  *(_QWORD *)(a1 + 16) = v6;
  *(_QWORD *)(a1 + 24) = &unk_24C335EA0;
  *(_DWORD *)(a1 + 32) = a2;
  if (*(char *)(a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 40), *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
  }
  else
  {
    v7 = *(_OWORD *)a3;
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(a3 + 16);
    *(_OWORD *)(a1 + 40) = v7;
  }
  v13 = 0;
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  v8 = (mlcore *)mediaplatform::PlatformErrorCondition::PlatformErrorCondition(a1 + 64, &v13, (__int128 *)__p);
  if (v12 < 0)
    operator delete(__p[0]);
  v9 = mlcore::__category(v8);
  (*(void (**)(void **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v9 + 48))(__p, v9, a2);
  mediaplatform::FormatString<std::string,std::string>((std::string *)(a1 + 128), (std::string *)"{0} {1}", (uint64_t)__p, a3);
  if (v12 < 0)
    operator delete(__p[0]);
  return a1;
}

void sub_20A665ED4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  std::exception *v14;

  std::exception::~exception(v14);
  _Unwind_Resume(a1);
}

uint64_t mlcore::__category(mlcore *this)
{
  unsigned __int8 v1;
  _QWORD *v3;

  {
    v3 = (_QWORD *)operator new();
    *v3 = &off_24C339AA8;
    mlcore::__category(void)::category = (uint64_t)v3;
  }
  return mlcore::__category(void)::category;
}

void sub_20A665FB8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t mlcore::MediaErrorCategory::message@<X0>(int a1@<W1>, _QWORD *a2@<X8>)
{
  const char *v4;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  if (a1 > 199)
  {
    switch(a1)
    {
      case 300:
        v4 = "Client error while connecting to cloud server.";
        break;
      case 301:
        v4 = "Cloud server error.";
        break;
      case 302:
        v4 = "Unexpected redirect from HTTP server.";
        break;
      case 303:
        v4 = "Error, the provided cloud DSID is invalid.";
        break;
      case 304:
        v4 = "Error, the provided cloud service item ID is invalid.";
        break;
      case 305:
        v4 = "Error, the cloud service session is not been initialized with Begin().";
        break;
      case 306:
        goto LABEL_11;
      case 307:
        v4 = "Error, too many databases returned by server.  Cloud service can only handle one.";
        break;
      default:
        if (a1 == 200)
          v4 = "Invalid entity revision provided.";
        else
LABEL_11:
          v4 = "Unknown error.";
        break;
    }
  }
  else
  {
    v4 = "Unimplemented functionality.";
    switch(a1)
    {
      case 0:
        v4 = "No error.";
        break;
      case 1:
        goto LABEL_11;
      case 2:
        return MEMORY[0x20BD277A8](a2, v4);
      case 3:
        v4 = "Platform error.";
        break;
      case 4:
        v4 = "Parse error.";
        break;
      default:
        switch(a1)
        {
          case 'd':
            v4 = "The import operation was cancelled.";
            break;
          case 'e':
            v4 = "Error parsing import data.";
            break;
          case 'f':
            v4 = "Error reading import data.";
            break;
          case 'g':
            v4 = "Attempted to update/delete a non-existent track.";
            break;
          default:
            goto LABEL_11;
        }
        break;
    }
  }
  return MEMORY[0x20BD277A8](a2, v4);
}

void sub_20A666140(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void mediaplatform::FormatString<std::string,std::string>(std::string *a1, std::string *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4[2];

  v4[0] = a4;
  v4[1] = a3;
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  a1->__r_.__value_.__r.__words[0] = 0;
  mediaplatform::FormatImplementation<std::string,std::string>(a2, a1, 0, v4);
}

void sub_20A6661A0(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void mediaplatform::FormatImplementation<std::string,std::string>(std::string *a1, std::string *a2, std::string::size_type a3, uint64_t *a4)
{
  char v8;
  char *v9;
  std::string::size_type i;
  int v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  int v16;
  uint64_t v17;
  char *v18;
  char *v19;
  unsigned __int8 *v20;
  int v21;
  std::runtime_error *exception;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;

  v8 = 0;
  v9 = (char *)a1;
  for (i = a3; ; ++i)
  {
    v27 = v9;
    if (*v9 == 123)
      break;
    if (!*v9)
    {
      std::string::resize(a2, i, 0);
      if (i != a3)
        mediaplatform::CopyFormatSectionToResult(a1, a2, a3, i - a3, v8 & 1);
      return;
    }
LABEL_7:
    ++v9;
  }
  v11 = v9[1];
  if (v11 == 123)
  {
    v27 = v9 + 1;
    v8 = 1;
    ++v9;
    goto LABEL_7;
  }
  if (v11 == 42)
  {
    v27 = v9 + 2;
    v16 = v9[2];
    if ((v16 - 48) > 9)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Invalid format string- missing numeric value.");
    }
    else
    {
      v17 = 0;
      v18 = v9 + 3;
      do
      {
        v19 = v18;
        v27 = v18;
        v17 = (v16 - 48) + 10 * v17;
        ++v18;
        v21 = *v19;
        v20 = (unsigned __int8 *)(v19 - 1);
        v16 = v21;
      }
      while ((v21 - 58) >= 0xFFFFFFF6);
      v27 = (char *)(v20 + 2);
      if (*(v18 - 1) == 125)
        mediaplatform::FormatterParameters<0ul,std::string,std::string>::formatOptionsAtIndex<std::string,std::string>(v17);
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Invalid format options reference: Must be of form {*<index>} but no trailing '}' found.");
    }
    __cxa_throw(exception, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
  }
  mediaplatform::FormatOptions::FormatOptions((uint64_t)&v23, (const char **)&v27);
  if (*((_QWORD *)&v23 + 1))
  {
    if (*((_QWORD *)&v23 + 1) != 1)
      mediaplatform::FormatterParameters<2ul>::formatParameterAtIndex<mediaplatform::FormatterParameters<0ul,std::string,std::string>>();
    v12 = *a4;
  }
  else
  {
    v12 = a4[1];
  }
  v28 = v12;
  v29 = v23;
  v30 = v24;
  v31 = v25;
  v32 = v26;
  if (*(char *)(v12 + 23) < 0)
    v13 = *(_QWORD *)(v12 + 8);
  else
    v13 = *(unsigned __int8 *)(v12 + 23);
  v14 = *((_QWORD *)&v24 + 1);
  if (*((_QWORD *)&v24 + 1) <= v13)
    v14 = v13;
  if ((_BYTE)v24)
    v13 = v14;
  mediaplatform::FormatImplementation<std::string,std::string>(v27, a2, v13 + i, a4);
  if ((a2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v15 = (char *)a2;
  else
    v15 = (char *)a2->__r_.__value_.__r.__words[0];
  mediaplatform::FormatOptions::justifyNativeValueOfLength<std::__wrap_iter<char *>,std::string>(&v23, &v15[i], (uint64_t)&v28);
  if (i != a3)
    mediaplatform::CopyFormatSectionToResult(a1, a2, a3, i - a3, v8 & 1);
}

void sub_20A666404(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

_DWORD *mediaplatform::FormatOptions::justifyNativeValueOfLength<std::__wrap_iter<char *>,std::string>(_DWORD *result, char *__dst, uint64_t a3)
{
  _BYTE *v4;
  _QWORD *v5;
  int v6;
  size_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  int v11;
  size_t v12;
  void *v13;
  char *v14;
  unint64_t v15;
  uint64_t v16;
  size_t v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  _QWORD *v22;
  _QWORD *v23;

  v4 = result;
  v5 = *(_QWORD **)a3;
  v6 = *(char *)(*(_QWORD *)a3 + 23);
  v7 = *(unsigned __int8 *)(*(_QWORD *)a3 + 23);
  if (v6 < 0)
    v8 = v5[1];
  else
    v8 = *(unsigned __int8 *)(*(_QWORD *)a3 + 23);
  if (!*((_BYTE *)result + 16) || (v9 = *((_QWORD *)result + 3), v10 = v9 - v8, v9 <= v8))
  {
    if (v6 < 0)
    {
      v5 = (_QWORD *)*v5;
      v7 = *(_QWORD *)(*(_QWORD *)a3 + 8);
      if (!v7)
        return result;
    }
    else if (!*(_BYTE *)(*(_QWORD *)a3 + 23))
    {
      return result;
    }
    v13 = __dst;
    v12 = v7;
    return memmove(v13, v5, v12);
  }
  v11 = *result;
  if (!*result)
  {
    if (v6 < 0)
    {
      v5 = (_QWORD *)*v5;
      v7 = *(_QWORD *)(*(_QWORD *)a3 + 8);
    }
    if (v7)
      result = memmove(__dst, v5, v7);
    if (v9 != v8)
    {
      v14 = &__dst[v8];
      do
      {
        *v14++ = v4[52];
        --v10;
      }
      while (v10);
    }
    return result;
  }
  if (v11 == 1)
  {
    v15 = v10 >> 1;
    if (v10 >= 2)
    {
      if (v15 <= 1)
        v16 = 1;
      else
        v16 = v10 >> 1;
      do
      {
        *__dst++ = *((_BYTE *)result + 52);
        --v16;
      }
      while (v16);
      v5 = *(_QWORD **)a3;
      LOBYTE(v6) = *(_BYTE *)(*(_QWORD *)a3 + 23);
    }
    if ((v6 & 0x80) != 0)
    {
      v22 = v5;
      v5 = (_QWORD *)*v5;
      v17 = v22[1];
      if (!v17)
      {
LABEL_38:
        if (v10 != v15)
        {
          v18 = v10 - (v10 >> 1);
          v19 = &__dst[v8];
          if (v18 <= 1)
            v18 = 1;
          v20 = -(uint64_t)v18;
          do
            *v19++ = v4[52];
          while (!__CFADD__(v20++, 1));
        }
        return result;
      }
    }
    else
    {
      v17 = v6;
      if (!(_BYTE)v6)
        goto LABEL_38;
    }
    result = memmove(__dst, v5, v17);
    goto LABEL_38;
  }
  if (v11 == 2)
  {
    if (v9 != v8)
    {
      do
      {
        *__dst++ = *((_BYTE *)result + 52);
        --v10;
      }
      while (v10);
      v5 = *(_QWORD **)a3;
      LOBYTE(v6) = *(_BYTE *)(*(_QWORD *)a3 + 23);
    }
    if ((v6 & 0x80) == 0)
    {
      v12 = v6;
      if (!(_BYTE)v6)
        return result;
      goto LABEL_48;
    }
    v23 = v5;
    v5 = (_QWORD *)*v5;
    v12 = v23[1];
    if (v12)
    {
LABEL_48:
      v13 = __dst;
      return memmove(v13, v5, v12);
    }
  }
  return result;
}

void mediaplatform::DatabaseConnection::executeQuery<mediaplatform::DatabaseResultList,mediaplatform::DatabaseParameterList>(uint64_t *a1, mediaplatform::DatabaseConnection *this, unsigned __int8 *a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  char **v23;

  mediaplatform::DatabaseConnection::_ensureConnectionIsOpen((uint64_t *)this);
  mediaplatform::DatabaseConnection::_prepareStatement((uint64_t)this, a3, &v21);
  v8 = v21;
  v18 = 0;
  v19 = 0;
  v20 = 0;
  std::vector<std::shared_ptr<mediaplatform::DatabaseParameterBase>>::__init_with_size[abi:ne180100]<std::shared_ptr<mediaplatform::DatabaseParameterBase>*,std::shared_ptr<mediaplatform::DatabaseParameterBase>*>(&v18, *(_QWORD **)(a4 + 8), *(_QWORD **)(a4 + 16), (uint64_t)(*(_QWORD *)(a4 + 16) - *(_QWORD *)(a4 + 8)) >> 4);
  mediaplatform::DatabaseStatement::bindParameters<mediaplatform::DatabaseParameterList>(v8, v18, v19);
  v23 = &v18;
  std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v23);
  v9 = v21;
  v10 = v22;
  if (v22)
  {
    p_shared_owners = (unint64_t *)&v22->__shared_owners_;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
    *a1 = v9;
    a1[1] = (uint64_t)v10;
    do
      v13 = __ldxr(p_shared_owners);
    while (__stxr(v13 + 1, p_shared_owners));
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  else
  {
    *a1 = v21;
    a1[1] = 0;
  }
  v15 = v22;
  if (v22)
  {
    v16 = (unint64_t *)&v22->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
}

void sub_20A6666F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  uint64_t v7;
  va_list va;
  uint64_t v9;
  va_list va1;

  va_start(va1, a6);
  va_start(va, a6);
  v7 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__destroy_vector::operator()[abi:ne180100]((void ***)va1);
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void mediaplatform::DatabaseStatement::bindParameters<mediaplatform::DatabaseParameterList>(uint64_t a1, char *a2, char *a3)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  char **v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  void **v14;

  v7 = 0;
  v8 = 0;
  v9 = 0;
  std::vector<std::shared_ptr<mediaplatform::DatabaseParameterBase>>::__init_with_size[abi:ne180100]<std::shared_ptr<mediaplatform::DatabaseParameterBase>*,std::shared_ptr<mediaplatform::DatabaseParameterBase>*>(&v7, a2, a3, (a3 - a2) >> 4);
  v10 = (char **)&off_24C331228;
  v11 = 0;
  v12 = 0;
  v13 = 0;
  std::vector<std::shared_ptr<mediaplatform::DatabaseParameterBase>>::__init_with_size[abi:ne180100]<std::shared_ptr<mediaplatform::DatabaseParameterBase>*,std::shared_ptr<mediaplatform::DatabaseParameterBase>*>(&v11, v7, v8, (v8 - v7) >> 4);
  v4 = v11;
  v5 = v12;
  if (v11 != v12)
  {
    v6 = 0;
    do
    {
      (*(void (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*v4 + 48))(*v4, a1, v6);
      v6 = (v6 + 1);
      v4 += 2;
    }
    while (v4 != v5);
  }
  v10 = (char **)&off_24C331228;
  v14 = (void **)&v11;
  std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__destroy_vector::operator()[abi:ne180100](&v14);
  v10 = &v7;
  std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v10);
}

void sub_20A666800(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

_QWORD *mlcore::PropertiesQueryResult::PropertiesQueryResult(_QWORD *a1, uint64_t *a2, uint64_t a3)
{
  std::exception v7;
  __int128 v8;
  void *v9;
  int v10;
  std::string v11;
  std::exception v12[8];
  std::string __p;

  v8 = *(_OWORD *)(a3 + 8);
  v7.__vftable = (std::exception_vtbl *)off_24C335E70;
  v9 = &unk_24C335EA0;
  v10 = *(_DWORD *)(a3 + 32);
  if (*(char *)(a3 + 63) < 0)
    std::string::__init_copy_ctor_external(&v11, *(const std::string::value_type **)(a3 + 40), *(_QWORD *)(a3 + 48));
  else
    v11 = *(std::string *)(a3 + 40);
  mediaplatform::PlatformErrorCondition::PlatformErrorCondition((mediaplatform::PlatformErrorCondition *)v12, (const mediaplatform::PlatformErrorCondition *)(a3 + 64));
  if (*(char *)(a3 + 151) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(a3 + 128), *(_QWORD *)(a3 + 136));
  else
    __p = *(std::string *)(a3 + 128);
  mlcore::QueryResult::QueryResult((uint64_t)a1, (uint64_t)&v7);
  v7.__vftable = (std::exception_vtbl *)off_24C335E70;
  v9 = &unk_24C335EA0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  mediaplatform::PlatformErrorCondition::~PlatformErrorCondition(v12);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
  std::exception::~exception(&v7);
  *a1 = &off_24C33A2B0;
  a1[21] = 0;
  a1[22] = 0;
  a1[20] = 0;
  std::vector<mlcore::PropertyCache>::__init_with_size[abi:ne180100]<mlcore::PropertyCache*,mlcore::PropertyCache*>((uint64_t)(a1 + 20), *a2, a2[1], 0x84BDA12F684BDA13 * ((a2[1] - *a2) >> 3));
  return a1;
}

void sub_20A666994(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  std::exception *v20;

  mediaplatform::PlatformErrorCondition::~PlatformErrorCondition(v20);
  if (a20 < 0)
    operator delete(__p);
  std::exception::~exception(&a10);
  _Unwind_Resume(a1);
}

void mlcore::PropertiesQuery::_SQLRenderer(uint64_t a1@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X8>)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  char *v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  __int128 v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  __int128 v19;
  __int128 v20;

  v4 = (std::__shared_weak_count *)a2[1];
  v17 = *a2;
  v18 = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t *))(*(_QWORD *)a1 + 72))(&v19, a1, &v17);
  v7 = (char *)operator new(0x70uLL);
  *(_OWORD *)(v7 + 8) = 0u;
  *(_QWORD *)v7 = &off_24C33C3D0;
  v16 = v19;
  v19 = 0u;
  v20 = v16;
  mlcore::SQLRenderer::SQLRenderer((uint64_t)(v7 + 24), &v20);
  if (*((_QWORD *)&v16 + 1))
  {
    v8 = (unint64_t *)(*((_QWORD *)&v16 + 1) + 8);
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v16 + 1) + 16))(*((_QWORD *)&v16 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v16 + 1));
    }
  }
  *a3 = v7 + 24;
  a3[1] = v7;
  v10 = (std::__shared_weak_count *)*((_QWORD *)&v19 + 1);
  if (*((_QWORD *)&v19 + 1))
  {
    v11 = (unint64_t *)(*((_QWORD *)&v19 + 1) + 8);
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  v13 = v18;
  if (v18)
  {
    v14 = (unint64_t *)&v18->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
}

void sub_20A666B3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  std::__shared_weak_count *v3;
  void *v5;
  uint64_t v6;
  va_list va;
  uint64_t v8;
  uint64_t v9;
  va_list va1;
  uint64_t v11;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v6 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v9 = va_arg(va2, _QWORD);
  v11 = va_arg(va2, _QWORD);
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)va2);
  std::__shared_weak_count::~__shared_weak_count(v3);
  operator delete(v5);
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t mlcore::SQLRenderer::SQLRenderer(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  int64x2_t *v5;
  char *v6;
  _OWORD *v7;
  uint64_t v8;
  __int128 v9;
  _QWORD *v10;
  _QWORD *v11;
  _OWORD *v12;
  __int128 v13;
  int64x2_t v14;
  _OWORD *v15;
  uint64_t v16;
  _BYTE v18[24];
  uint64_t v19;
  uint64_t v20;

  *(_QWORD *)a1 = &off_24C336B90;
  *(_QWORD *)(a1 + 8) = 0;
  v4 = a1 + 8;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = &off_24C331228;
  *(_OWORD *)(a1 + 40) = 0u;
  v5 = (int64x2_t *)(a1 + 64);
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  v6 = (char *)operator new(0x70uLL);
  *((_QWORD *)v6 + 1) = 0;
  *((_QWORD *)v6 + 2) = 0;
  *(_QWORD *)v6 = &off_24C33BF70;
  *((_OWORD *)v6 + 2) = 0u;
  *((_OWORD *)v6 + 3) = 0u;
  *((_DWORD *)v6 + 16) = 1065353216;
  *(_OWORD *)(v6 + 72) = 0u;
  *(_OWORD *)(v6 + 88) = 0u;
  *((_DWORD *)v6 + 26) = 1065353216;
  v20 = a1 + 80;
  v7 = std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<mediaplatform::DatabaseParameterBase>>>(1uLL);
  *(_QWORD *)&v9 = v6 + 24;
  *((_QWORD *)&v9 + 1) = v6;
  *v7 = v9;
  v11 = *(_QWORD **)(a1 + 64);
  v10 = *(_QWORD **)(a1 + 72);
  if (v10 == v11)
  {
    v14 = vdupq_n_s64((unint64_t)v10);
    v12 = v7;
  }
  else
  {
    v12 = v7;
    do
    {
      v13 = *((_OWORD *)v10 - 1);
      v10 -= 2;
      *--v12 = v13;
      *v10 = 0;
      v10[1] = 0;
    }
    while (v10 != v11);
    v14 = *v5;
  }
  v15 = v7 + 1;
  *(_QWORD *)(a1 + 64) = v12;
  *(_QWORD *)(a1 + 72) = v7 + 1;
  *(int64x2_t *)&v18[8] = v14;
  v16 = *(_QWORD *)(a1 + 80);
  *(_QWORD *)(a1 + 80) = &v7[v8];
  v19 = v16;
  *(_QWORD *)v18 = v14.i64[0];
  std::__split_buffer<std::shared_ptr<mediaplatform::SQLExpression const>>::~__split_buffer((uint64_t)v18);
  *(_QWORD *)(a1 + 72) = v15;
  (*(void (**)(_BYTE *__return_ptr, _QWORD, uint64_t))(*(_QWORD *)*a2 + 16))(v18, *a2, a1);
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)v4);
  *(_OWORD *)v4 = *(_OWORD *)v18;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)&v18[16];
  return a1;
}

void sub_20A666CF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  uint64_t v6;
  void **v7;
  uint64_t v8;
  va_list va;

  va_start(va, a6);
  std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  *(_QWORD *)(v6 + 32) = v8;
  std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  if (*(char *)(v6 + 31) < 0)
    operator delete(*v7);
  _Unwind_Resume(a1);
}

std::vector<std::string>::iterator std::vector<std::string>::insert(std::vector<std::string> *this, std::vector<std::string>::const_iterator __position, std::vector<std::string>::value_type *__x)
{
  std::vector<std::string>::pointer end;
  std::string *value;
  std::allocator<std::string> *p_end_cap;
  __int128 v9;
  const std::string *begin;
  unint64_t v11;
  uint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  __int128 v17;
  std::__split_buffer<std::string>::pointer v18;
  uint64_t v19;
  unint64_t v20;
  std::string *v21;
  uint64_t v22;
  std::__split_buffer<std::string>::pointer v23;
  int64_t v24;
  std::string *v25;
  uint64_t v26;
  std::string *v27;
  __int128 v28;
  int64x2_t v29;
  std::string *v30;
  __int128 v31;
  std::__split_buffer<std::string> v32;
  std::__split_buffer<std::string> v33;

  end = this->__end_;
  p_end_cap = (std::allocator<std::string> *)&this->__end_cap_;
  value = this->__end_cap_.__value_;
  if (end >= value)
  {
    begin = this->__begin_;
    v11 = 0xAAAAAAAAAAAAAAABLL * (((char *)end - (char *)this->__begin_) >> 3) + 1;
    if (v11 > 0xAAAAAAAAAAAAAAALL)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v12 = (char *)__position.__i_ - (char *)begin;
    v13 = 0xAAAAAAAAAAAAAAABLL * (((char *)__position.__i_ - (char *)begin) >> 3);
    v14 = 0xAAAAAAAAAAAAAAABLL * (((char *)value - (char *)begin) >> 3);
    if (2 * v14 > v11)
      v11 = 2 * v14;
    if (v14 >= 0x555555555555555)
      v15 = 0xAAAAAAAAAAAAAAALL;
    else
      v15 = v11;
    v32.__end_cap_.__value_ = p_end_cap;
    if (v15)
      v15 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v15);
    else
      v16 = 0;
    v18 = (std::__split_buffer<std::string>::pointer)(v15 + 24 * v13);
    v32.__first_ = (std::__split_buffer<std::string>::pointer)v15;
    v32.__begin_ = v18;
    v32.__end_ = v18;
    v32.__end_cap_.__value_ = (std::string *)(v15 + 24 * v16);
    if (v13 == v16)
    {
      if (v12 < 1)
      {
        if (begin == __position.__i_)
          v20 = 1;
        else
          v20 = 2 * v13;
        v33.__end_cap_.__value_ = p_end_cap;
        v21 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v20);
        v23 = v32.__begin_;
        if (v32.__end_ == v32.__begin_)
        {
          v29 = vdupq_n_s64((unint64_t)v32.__begin_);
          v25 = &v21[v20 >> 2];
        }
        else
        {
          v24 = v32.__end_ - v32.__begin_;
          v25 = &v21[(v20 >> 2) + v24];
          v26 = 24 * v24;
          v27 = &v21[v20 >> 2];
          do
          {
            v28 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
            v27->__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v27->__r_.__value_.__l.__data_ = v28;
            ++v27;
            v23->__r_.__value_.__l.__size_ = 0;
            v23->__r_.__value_.__r.__words[2] = 0;
            v23->__r_.__value_.__r.__words[0] = 0;
            ++v23;
            v26 -= 24;
          }
          while (v26);
          v29 = *(int64x2_t *)&v32.__begin_;
        }
        v30 = v32.__end_cap_.__value_;
        v33.__first_ = v32.__first_;
        v32.__first_ = v21;
        v32.__begin_ = &v21[v20 >> 2];
        *(int64x2_t *)&v33.__begin_ = v29;
        v32.__end_ = v25;
        v32.__end_cap_.__value_ = &v21[v22];
        v33.__end_cap_.__value_ = v30;
        std::__split_buffer<std::string>::~__split_buffer(&v33);
        v18 = v32.__end_;
      }
      else
      {
        v19 = v13 + 2;
        if (v13 >= -1)
          v19 = v13 + 1;
        v18 -= v19 >> 1;
        v32.__begin_ = v18;
        v32.__end_ = v18;
      }
    }
    v31 = *(_OWORD *)&__x->__r_.__value_.__l.__data_;
    v18->__r_.__value_.__r.__words[2] = __x->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v18->__r_.__value_.__l.__data_ = v31;
    __x->__r_.__value_.__l.__size_ = 0;
    __x->__r_.__value_.__r.__words[2] = 0;
    __x->__r_.__value_.__r.__words[0] = 0;
    ++v32.__end_;
    std::vector<std::string>::__swap_out_circular_buffer(this, &v32, (std::vector<std::string>::pointer)__position.__i_);
    std::__split_buffer<std::string>::~__split_buffer(&v32);
  }
  else if (__position.__i_ == end)
  {
    v17 = *(_OWORD *)&__x->__r_.__value_.__l.__data_;
    __position.__i_->__r_.__value_.__r.__words[2] = __x->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__position.__i_->__r_.__value_.__l.__data_ = v17;
    __x->__r_.__value_.__l.__size_ = 0;
    __x->__r_.__value_.__r.__words[2] = 0;
    __x->__r_.__value_.__r.__words[0] = 0;
    this->__end_ = (std::vector<std::string>::pointer)&__position.__i_[1];
  }
  else
  {
    std::vector<std::string>::__move_range(this, (std::vector<std::string>::pointer)__position.__i_, end, (std::vector<std::string>::pointer)&__position.__i_[1]);
    if (SHIBYTE(__position.__i_->__r_.__value_.__r.__words[2]) < 0)
      operator delete(__position.__i_->__r_.__value_.__l.__data_);
    v9 = *(_OWORD *)&__x->__r_.__value_.__l.__data_;
    __position.__i_->__r_.__value_.__r.__words[2] = __x->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__position.__i_->__r_.__value_.__l.__data_ = v9;
    *((_BYTE *)&__x->__r_.__value_.__s + 23) = 0;
    __x->__r_.__value_.__s.__data_[0] = 0;
  }
  return (std::vector<std::string>::iterator)this;
}

void sub_20A666FDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::string> *)&a9);
  _Unwind_Resume(a1);
}

std::vector<std::string>::pointer std::vector<std::string>::__swap_out_circular_buffer(std::vector<std::string> *this, std::__split_buffer<std::string> *__v, std::vector<std::string>::pointer __p)
{
  std::vector<std::string>::pointer v3;
  std::string *begin;
  std::__compressed_pair<std::string *> *p_end_cap;
  std::vector<std::string>::pointer end;
  std::__split_buffer<std::string>::pointer v9;
  __int128 v10;
  std::string *v11;
  std::string *v12;
  std::string *value;
  _QWORD v15[3];
  char v16;
  std::__split_buffer<std::string>::pointer v17;
  std::__split_buffer<std::string>::pointer v18;

  v3 = __p;
  begin = __v->__begin_;
  p_end_cap = &this->__end_cap_;
  __v->__begin_ = (std::__split_buffer<std::string>::pointer)std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::string>,std::reverse_iterator<std::string*>,std::reverse_iterator<std::string*>,std::reverse_iterator<std::string*>>((uint64_t)&this->__end_cap_, (uint64_t)__p, (uint64_t)__p, (uint64_t)this->__begin_, (uint64_t)this->__begin_, (uint64_t)begin, (uint64_t)begin);
  end = this->__end_;
  v9 = __v->__end_;
  v17 = v9;
  v18 = v9;
  v15[0] = p_end_cap;
  v15[1] = &v17;
  v15[2] = &v18;
  if (end != v3)
  {
    do
    {
      v10 = *(_OWORD *)&v3->__r_.__value_.__l.__data_;
      v9->__r_.__value_.__r.__words[2] = v3->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v10;
      ++v9;
      v3->__r_.__value_.__l.__size_ = 0;
      v3->__r_.__value_.__r.__words[2] = 0;
      v3->__r_.__value_.__r.__words[0] = 0;
      ++v3;
    }
    while (v3 != end);
    v18 = v9;
  }
  v16 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v15);
  __v->__end_ = v9;
  v11 = this->__begin_;
  this->__begin_ = __v->__begin_;
  __v->__begin_ = v11;
  v12 = this->__end_;
  this->__end_ = __v->__end_;
  __v->__end_ = v12;
  value = this->__end_cap_.__value_;
  this->__end_cap_.__value_ = __v->__end_cap_.__value_;
  __v->__end_cap_.__value_ = value;
  __v->__first_ = __v->__begin_;
  return begin;
}

void mlcore::_LocalizedString(mlcore *this, const __CFString *a2)
{
  __CFBundle *BundleWithIdentifier;
  const __CFString *v5;
  const __CFString *v6;
  CFIndex Length;
  CFIndex MaximumSizeForEncoding;
  CFIndex v9;
  char *v10;

  BundleWithIdentifier = CFBundleGetBundleWithIdentifier(CFSTR("com.apple.MediaLibraryCore"));
  v5 = CFBundleCopyLocalizedString(BundleWithIdentifier, a2, a2, CFSTR("MediaLibraryCore"));
  v6 = v5;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *(_QWORD *)this = 0;
  if (v5)
  {
    Length = CFStringGetLength(v5);
    MaximumSizeForEncoding = CFStringGetMaximumSizeForEncoding(Length, 0x8000100u);
    if ((MaximumSizeForEncoding & 0x8000000000000000) == 0)
    {
      v9 = MaximumSizeForEncoding + 1;
      v10 = (char *)malloc_type_malloc(MaximumSizeForEncoding + 1, 0x1DE48D06uLL);
      if (CFStringGetCString(v6, v10, v9, 0x8000100u))
        MEMORY[0x20BD277A8](this, v10);
      free(v10);
    }
  }
  CFRelease(v6);
}

void sub_20A6671AC(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *mlcore::EntityQueryResult::EntityQueryResult(_QWORD *a1, _QWORD *a2, uint64_t a3, uint64_t a4, _QWORD *a5, _QWORD *a6, _QWORD *a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t *a12)
{
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  const void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  _QWORD *v41;
  _QWORD *v42;
  _QWORD *v43;
  void *v44;
  std::__shared_weak_count *v45;
  unint64_t *p_shared_owners;
  unint64_t v47;
  unint64_t *v48;
  unint64_t v49;
  __int128 v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  _QWORD *v54;
  __int128 v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  void *v64;
  void *v65;
  _QWORD *v66;
  void *v67;
  void *v68;
  uint64_t v69;
  void *v70[2];
  char v71;
  std::exception v72;
  void *v73;
  void *v74;
  char v75;
  std::exception v76[10];
  char v77;

  std::string::basic_string[abi:ne180100]<0>(v70, "");
  mlcore::MediaError::MediaError((uint64_t)&v72, 0, (uint64_t)v70);
  mlcore::QueryResult::QueryResult((uint64_t)a1, (uint64_t)&v72);
  v72.__vftable = (std::exception_vtbl *)off_24C335E70;
  v73 = &unk_24C335EA0;
  if (v77 < 0)
    operator delete(v76[8].__vftable);
  mediaplatform::PlatformErrorCondition::~PlatformErrorCondition(v76);
  if (v75 < 0)
    operator delete(v74);
  std::exception::~exception(&v72);
  if (v71 < 0)
    operator delete(v70[0]);
  *a1 = &off_24C339748;
  a1[20] = *a2;
  v19 = a2[1];
  a1[21] = v19;
  if (v19)
  {
    v20 = (unint64_t *)(v19 + 8);
    do
      v21 = __ldxr(v20);
    while (__stxr(v21 + 1, v20));
  }
  a1[23] = *a5;
  a1[22] = a3;
  v22 = a5[1];
  a1[24] = v22;
  if (v22)
  {
    v23 = (unint64_t *)(v22 + 8);
    do
      v24 = __ldxr(v23);
    while (__stxr(v24 + 1, v23));
  }
  a1[25] = *a6;
  v25 = a6[1];
  a1[26] = v25;
  if (v25)
  {
    v26 = (unint64_t *)(v25 + 8);
    do
      v27 = __ldxr(v26);
    while (__stxr(v27 + 1, v26));
  }
  a1[27] = *a7;
  v28 = a7[1];
  a1[28] = v28;
  if (v28)
  {
    v29 = (unint64_t *)(v28 + 8);
    do
      v30 = __ldxr(v29);
    while (__stxr(v30 + 1, v29));
  }
  a1[29] = a9;
  a1[30] = a10;
  a1[31] = a11;
  v31 = a1 + 32;
  v32 = *a12;
  a1[32] = *a12;
  v33 = a12[1];
  a1[33] = v33;
  if (v33)
  {
    v34 = (unint64_t *)(v33 + 8);
    do
      v35 = __ldxr(v34);
    while (__stxr(v35 + 1, v34));
    v32 = *v31;
  }
  if (!v32)
  {
    v41 = operator new(0xF0uLL);
    v42 = v41;
    v41[1] = 0;
    v41[2] = 0;
    *v41 = &off_24C33C280;
    v43 = v41 + 3;
    v44 = (void *)*a2;
    v45 = (std::__shared_weak_count *)a2[1];
    v70[0] = v44;
    v70[1] = v45;
    if (v45)
    {
      p_shared_owners = (unint64_t *)&v45->__shared_owners_;
      do
        v47 = __ldxr(p_shared_owners);
      while (__stxr(v47 + 1, p_shared_owners));
    }
    mlcore::EntityCache::EntityCache((uint64_t)(v41 + 3), v70);
    if (v45)
    {
      v48 = (unint64_t *)&v45->__shared_owners_;
      do
        v49 = __ldaxr(v48);
      while (__stlxr(v49 - 1, v48));
      if (!v49)
      {
        ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
        std::__shared_weak_count::__release_weak(v45);
      }
    }
    *(_QWORD *)&v50 = v43;
    *((_QWORD *)&v50 + 1) = v42;
    v51 = (std::__shared_weak_count *)a1[33];
    *((_OWORD *)a1 + 16) = v50;
    if (v51)
    {
      v52 = (unint64_t *)&v51->__shared_owners_;
      do
        v53 = __ldaxr(v52);
      while (__stlxr(v53 - 1, v52));
      if (!v53)
      {
        ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
        std::__shared_weak_count::__release_weak(v51);
      }
    }
  }
  if (!a1[25])
  {
    v54 = operator new(0x30uLL);
    v54[1] = 0;
    v54[2] = 0;
    *v54 = &off_24C33D6D8;
    v54[3] = 0;
    v54[4] = 0;
    v54[5] = 0;
    *(_QWORD *)&v55 = v54 + 3;
    *((_QWORD *)&v55 + 1) = v54;
    v56 = (std::__shared_weak_count *)a1[26];
    *(_OWORD *)(a1 + 25) = v55;
    if (v56)
    {
      v57 = (unint64_t *)&v56->__shared_owners_;
      do
        v58 = __ldaxr(v57);
      while (__stlxr(v58 - 1, v57));
      if (!v58)
      {
        ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
        std::__shared_weak_count::__release_weak(v56);
      }
    }
  }
  v36 = *(const void **)a4;
  v37 = *(_QWORD *)(a4 + 8);
  v38 = v37 - *(_QWORD *)a4;
  if (v37 == *(_QWORD *)a4)
  {
    v59 = a1[22];
    if (v59)
    {
      v60 = *v31;
      v61 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v59 + 112))(v59);
      v62 = operator new(8uLL);
      v64 = v62;
      *v62 = v61;
      v65 = v62 + 1;
      v66 = v62 + 1;
      (*(void (**)(uint64_t, void **, _QWORD))(*(_QWORD *)v60 + 16))(v60, &v64, a1[22]);
      v40 = v64;
      if (v64)
      {
        v65 = v64;
        goto LABEL_49;
      }
    }
  }
  else
  {
    v39 = *v31;
    v68 = 0;
    v69 = 0;
    v67 = 0;
    std::vector<mlcore::ModelPropertyBase *>::__init_with_size[abi:ne180100]<mlcore::ModelPropertyBase **,mlcore::ModelPropertyBase **>(&v67, v36, v37, v38 >> 3);
    (*(void (**)(uint64_t, void **, _QWORD))(*(_QWORD *)v39 + 16))(v39, &v67, a1[22]);
    v40 = v67;
    if (v67)
    {
      v68 = v67;
LABEL_49:
      operator delete(v40);
    }
  }
  return a1;
}

{
  return mlcore::EntityQueryResult::EntityQueryResult(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
}

void sub_20A6675A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22)
{
  std::exception *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  if (__p)
    operator delete(__p);
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100](v27);
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100](v26);
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100](v25);
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100](v24);
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100](v23);
  mlcore::QueryResult::~QueryResult(v22);
  _Unwind_Resume(a1);
}

uint64_t mlcore::EntityCache::EntityCache(uint64_t a1, _QWORD *a2)
{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  __n128 v6;
  unint64_t v7;
  uint64_t v9;
  uint64_t v10;
  _QWORD v11[2];

  v3 = (std::__shared_weak_count *)a2[1];
  v11[0] = *a2;
  v11[1] = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
    v9 = 0;
    v10 = 0;
    v6.n128_f64[0] = mlcore::EntityCache::EntityCache(a1, v11, &v9);
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v3->__on_zero_shared)(v3, v6);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  else
  {
    v9 = 0;
    v10 = 0;
    mlcore::EntityCache::EntityCache(a1, v11, &v9);
  }
  return a1;
}

{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  __n128 v6;
  unint64_t v7;
  uint64_t v9;
  uint64_t v10;
  _QWORD v11[2];

  v3 = (std::__shared_weak_count *)a2[1];
  v11[0] = *a2;
  v11[1] = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
    v9 = 0;
    v10 = 0;
    v6.n128_f64[0] = mlcore::EntityCache::EntityCache(a1, v11, &v9);
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v3->__on_zero_shared)(v3, v6);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  else
  {
    v9 = 0;
    v10 = 0;
    mlcore::EntityCache::EntityCache(a1, v11, &v9);
  }
  return a1;
}

{
  uint64_t v3;
  __int128 v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  __n128 v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  _QWORD v17[2];
  __int128 v18;

  v3 = *a2;
  v4 = *(_OWORD *)(*a2 + 16);
  v5 = *(_QWORD *)(*a2 + 24);
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
    v3 = *a2;
  }
  v18 = v4;
  v8 = (std::__shared_weak_count *)a2[1];
  v17[0] = v3;
  v17[1] = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
    v11.n128_f64[0] = mlcore::EntityCache::EntityCache(a1, &v18, v17);
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v8->__on_zero_shared)(v8, v11);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  else
  {
    v11.n128_f64[0] = mlcore::EntityCache::EntityCache(a1, &v18, v17);
  }
  v13 = (std::__shared_weak_count *)*((_QWORD *)&v18 + 1);
  if (*((_QWORD *)&v18 + 1))
  {
    v14 = (unint64_t *)(*((_QWORD *)&v18 + 1) + 8);
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v13->__on_zero_shared)(v13, v11);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  return a1;
}

{
  uint64_t v3;
  __int128 v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  __n128 v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  _QWORD v17[2];
  __int128 v18;

  v3 = *a2;
  v4 = *(_OWORD *)(*a2 + 16);
  v5 = *(_QWORD *)(*a2 + 24);
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
    v3 = *a2;
  }
  v18 = v4;
  v8 = (std::__shared_weak_count *)a2[1];
  v17[0] = v3;
  v17[1] = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
    v11.n128_f64[0] = mlcore::EntityCache::EntityCache(a1, &v18, v17);
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v8->__on_zero_shared)(v8, v11);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  else
  {
    v11.n128_f64[0] = mlcore::EntityCache::EntityCache(a1, &v18, v17);
  }
  v13 = (std::__shared_weak_count *)*((_QWORD *)&v18 + 1);
  if (*((_QWORD *)&v18 + 1))
  {
    v14 = (unint64_t *)(*((_QWORD *)&v18 + 1) + 8);
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v13->__on_zero_shared)(v13, v11);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  return a1;
}

double mlcore::EntityCache::EntityCache(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  double result;

  *(_QWORD *)a1 = &off_24C3366C0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_DWORD *)(a1 + 40) = 1065353216;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_DWORD *)(a1 + 80) = 1065353216;
  v3 = a2[1];
  *(_QWORD *)(a1 + 88) = *a2;
  *(_QWORD *)(a1 + 96) = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = a3[1];
  *(_QWORD *)(a1 + 104) = *a3;
  *(_QWORD *)(a1 + 112) = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  *(_BYTE *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 128) = 1000;
  result = 0.0;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_DWORD *)(a1 + 184) = 1065353216;
  *(_QWORD *)(a1 + 192) = a1 + 192;
  *(_QWORD *)(a1 + 200) = a1 + 192;
  *(_QWORD *)(a1 + 208) = 0;
  return result;
}

sqlite3_int64 mlcore::EntityRevisionController::latestRevisionNumber(mlcore::EntityRevisionController *this)
{
  uint64_t v1;
  __int128 v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  sqlite3_int64 v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  void *__p[2];
  char v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  __int128 v28;
  uint64_t v29;
  std::__shared_weak_count *v30;

  v28 = 0uLL;
  v1 = *((_QWORD *)this + 2);
  if (v1)
  {
    v2 = *(_OWORD *)(v1 + 48);
    v3 = *(_QWORD *)(v1 + 56);
    if (v3)
    {
      v4 = (unint64_t *)(v3 + 8);
      do
        v5 = __ldxr(v4);
      while (__stxr(v5 + 1, v4));
    }
  }
  else
  {
    mlcore::DeviceLibraryView::checkoutReader(*(mlcore::DeviceLibraryView **)this, __p);
    v2 = *(_OWORD *)__p;
  }
  v28 = v2;
  v6 = *(uint64_t **)v2;
  std::string::basic_string[abi:ne180100]<0>(__p, "SELECT MAX(revision) FROM entity_revision");
  mediaplatform::DatabaseConnection::_ensureConnectionIsOpen(v6);
  mediaplatform::DatabaseConnection::_prepareStatement((uint64_t)v6, (unsigned __int8 *)__p, &v29);
  v7 = v29;
  v8 = v30;
  if (v30)
  {
    p_shared_owners = (unint64_t *)&v30->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
    v26 = v7;
    v27 = v8;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  else
  {
    v26 = v29;
    v27 = 0;
  }
  v13 = v30;
  if (v30)
  {
    v14 = (unint64_t *)&v30->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  if (v25 < 0)
    operator delete(__p[0]);
  v16 = mediaplatform::DatabaseResult<long long>::valueForFirstRowAndColumn(&v26);
  v17 = v27;
  if (v27)
  {
    v18 = (unint64_t *)&v27->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  v20 = (std::__shared_weak_count *)*((_QWORD *)&v28 + 1);
  if (*((_QWORD *)&v28 + 1))
  {
    v21 = (unint64_t *)(*((_QWORD *)&v28 + 1) + 8);
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  return v16;
}

void sub_20A667960(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16, uint64_t a17, char a18)
{
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)&a18);
  _Unwind_Resume(a1);
}

sqlite3_int64 mediaplatform::DatabaseResult<long long>::valueForFirstRowAndColumn(uint64_t *a1)
{
  uint64_t v2;
  int v3;
  int v4;
  std::runtime_error *exception;
  sqlite3_int64 v6;
  uint64_t v7;
  int v8;

  v2 = *a1;
  v3 = sqlite3_step(*(sqlite3_stmt **)(*a1 + 24));
  mediaplatform::DatabaseStatement::_checkSQLiteResult(v2, v3);
  *(_DWORD *)(v2 + 56) = v3;
  v4 = *(_DWORD *)(*a1 + 56);
  if (v4 != 100)
  {
    if (v4 != -1)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "no column data exists for statement");
      __cxa_throw(exception, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
    }
    __assert_rtn("hasColumnValueData", "DatabaseStatement.cpp", 102, "_lastStepResult != -1");
  }
  v6 = sqlite3_column_int64(*(sqlite3_stmt **)(*a1 + 24), 0);
  v7 = *a1;
  v8 = sqlite3_reset(*(sqlite3_stmt **)(v7 + 24));
  mediaplatform::DatabaseStatement::_checkSQLiteResult(v7, v8);
  *(_DWORD *)(v7 + 56) = -1;
  return v6;
}

void sub_20A667B08(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_20A667B2C()
{
  void *v0;

  __cxa_free_exception(v0);
  JUMPOUT(0x20A667B38);
}

void std::__function::__func<void mlcore::LibraryView::performQuery<mlcore::EntityPropertiesQuery>(std::shared_ptr<mlcore::EntityPropertiesQuery>,std::shared_ptr<mlcore::Transaction>,std::function<void ()(std::shared_ptr<mlcore::EntityPropertiesQuery::Result>)>)::{lambda(std::shared_ptr<mlcore::QueryResult>)#1},std::allocator<void mlcore::LibraryView::performQuery<mlcore::EntityPropertiesQuery>(std::shared_ptr<mlcore::EntityPropertiesQuery>,std::shared_ptr<mlcore::Transaction>,std::function<void ()(std::shared_ptr<mlcore::EntityPropertiesQuery::Result>)>)::{lambda(std::shared_ptr<mlcore::QueryResult>)#1}>,void ()(std::shared_ptr<mlcore::QueryResult>)>::operator()(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  std::__shared_weak_count *v13;

  v2 = *a2;
  v3 = (std::__shared_weak_count *)a2[1];
  *a2 = 0;
  a2[1] = 0;
  v12 = v2;
  v13 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  v6 = *(_QWORD *)(a1 + 32);
  if (!v6)
    std::__throw_bad_function_call[abi:ne180100]();
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v6 + 48))(v6, &v12);
  v7 = v13;
  if (v13)
  {
    v8 = (unint64_t *)&v13->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if (v3)
  {
    v10 = (unint64_t *)&v3->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_20A667C1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;

  if (a10)
  {
    p_shared_owners = (unint64_t *)&a10->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))a10->__on_zero_shared)(a10);
      std::__shared_weak_count::__release_weak(a10);
    }
  }
  if (v10)
  {
    v14 = (unint64_t *)&v10->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  _Unwind_Resume(exception_object);
}

void mlcore::EntityPropertiesQuery::_SQLRenderer(uint64_t a1@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  __int128 v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  __int128 v24;

  v5 = *(_QWORD *)(a1 + 104);
  if (!v5)
  {
    v6 = a2[1];
    v22 = *a2;
    v23 = (std::__shared_weak_count *)v6;
    if (v6)
    {
      v7 = (unint64_t *)(v6 + 8);
      do
        v8 = __ldxr(v7);
      while (__stxr(v8 + 1, v7));
    }
    mlcore::PropertiesQuery::_SQLRenderer(a1, &v22, &v24);
    v9 = v24;
    v24 = 0uLL;
    v10 = *(std::__shared_weak_count **)(a1 + 112);
    *(_OWORD *)(a1 + 104) = v9;
    if (v10)
    {
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v12 = __ldaxr(p_shared_owners);
      while (__stlxr(v12 - 1, p_shared_owners));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
    v13 = (std::__shared_weak_count *)*((_QWORD *)&v24 + 1);
    if (*((_QWORD *)&v24 + 1))
    {
      v14 = (unint64_t *)(*((_QWORD *)&v24 + 1) + 8);
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 - 1, v14));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
    v16 = v23;
    if (v23)
    {
      v17 = (unint64_t *)&v23->__shared_owners_;
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
    v5 = *(_QWORD *)(a1 + 104);
  }
  v19 = *(_QWORD *)(a1 + 112);
  *a3 = v5;
  a3[1] = v19;
  if (v19)
  {
    v20 = (unint64_t *)(v19 + 8);
    do
      v21 = __ldxr(v20);
    while (__stxr(v21 + 1, v20));
  }
}

void sub_20A667DD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::vector<mlcore::Section>::__swap_out_circular_buffer(const std::string::value_type ***a1, _QWORD *a2)
{
  const std::string::value_type **v4;
  const std::string::value_type **v5;
  const std::string::value_type **v6;
  std::string *v7;
  const std::string::value_type **v8;
  __int128 v9;
  const std::string::value_type **v10;
  int v11;
  uint64_t result;
  const std::string::value_type **v13;
  const std::string::value_type **v14;
  const std::string::value_type **v15;
  _QWORD v16[3];
  char v17;
  __int128 v18;
  __int128 v19;

  v4 = *a1;
  v5 = a1[1];
  v6 = (const std::string::value_type **)a2[1];
  *(_QWORD *)&v19 = v6;
  *((_QWORD *)&v19 + 1) = v6;
  v18 = v19;
  v16[0] = a1 + 2;
  v16[1] = &v18;
  v16[2] = &v19;
  v17 = 0;
  if (v5 != v4)
  {
    do
    {
      v7 = (std::string *)(v6 - 6);
      v8 = v5 - 6;
      if (*((char *)v5 - 25) < 0)
      {
        std::string::__init_copy_ctor_external(v7, *(v5 - 6), (std::string::size_type)*(v5 - 5));
        v10 = (const std::string::value_type **)*((_QWORD *)&v19 + 1);
      }
      else
      {
        v9 = *(_OWORD *)v8;
        *(v6 - 4) = *(v5 - 4);
        *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v9;
        v10 = v6;
      }
      v11 = *((_DWORD *)v5 - 2);
      *(_OWORD *)(v6 - 3) = *(_OWORD *)(v5 - 3);
      *((_DWORD *)v6 - 2) = v11;
      v6 = v10 - 6;
      *((_QWORD *)&v19 + 1) = v10 - 6;
      v5 -= 6;
    }
    while (v8 != v4);
  }
  v17 = 1;
  result = std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<mlcore::Section>,std::reverse_iterator<mlcore::Section*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v16);
  a2[1] = v6;
  v13 = *a1;
  *a1 = v6;
  a2[1] = v13;
  v14 = a1[1];
  a1[1] = (const std::string::value_type **)a2[2];
  a2[2] = v14;
  v15 = a1[2];
  a1[2] = (const std::string::value_type **)a2[3];
  a2[3] = v15;
  *a2 = a2[1];
  return result;
}

void sub_20A667EF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<mlcore::Section>,std::reverse_iterator<mlcore::Section*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__split_buffer<mlcore::Section>::~__split_buffer(uint64_t a1)
{
  void **v2;
  void **v3;
  void **v4;

  v3 = *(void ***)(a1 + 8);
  v2 = *(void ***)(a1 + 16);
  if (v2 != v3)
  {
    do
    {
      v4 = v2 - 6;
      *(_QWORD *)(a1 + 16) = v2 - 6;
      if (*((char *)v2 - 25) < 0)
      {
        operator delete(*v4);
        v4 = *(void ***)(a1 + 16);
      }
      v2 = v4;
    }
    while (v4 != v3);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void mlcore::LocalizedSectionsInfo::allLocalizedHeaderTitles(uint64_t **this@<X0>, std::vector<std::string> *a2@<X8>)
{
  uint64_t *v3;
  std::string::size_type v4;
  std::string *end;
  int64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  std::string::size_type v11;
  std::string *v12;
  uint64_t v13;
  std::string *v14;
  uint64_t v15;
  __int128 v16;
  uint64_t *v17;
  std::allocator<std::string> *p_end_cap;
  std::string v19;
  uint64_t v20;
  std::string v21;
  std::string v22;
  std::__split_buffer<std::string> __v;

  a2->__begin_ = 0;
  a2->__end_ = 0;
  a2->__end_cap_.__value_ = 0;
  v3 = *this;
  v17 = this[1];
  if (*this != v17)
  {
    p_end_cap = (std::allocator<std::string> *)&a2->__end_cap_;
    do
    {
      v20 = *v3;
      memset(&v21, 0, sizeof(v21));
      std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v21, (__int128 *)v3[1], (__int128 *)v3[2], 0xAAAAAAAAAAAAAAABLL * ((v3[2] - v3[1]) >> 3));
      memset(&v22, 0, sizeof(v22));
      std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v22, (__int128 *)v3[4], (__int128 *)v3[5], 0xAAAAAAAAAAAAAAABLL * ((v3[5] - v3[4]) >> 3));
      memset(&v19, 0, sizeof(v19));
      std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v19, (__int128 *)v22.__r_.__value_.__l.__data_, (__int128 *)v22.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v22.__r_.__value_.__l.__size_ - v22.__r_.__value_.__r.__words[0]) >> 3));
      v4 = v19.__r_.__value_.__r.__words[0];
      if ((uint64_t)(v19.__r_.__value_.__l.__size_ - v19.__r_.__value_.__r.__words[0]) >= 1)
      {
        end = a2->__end_;
        v6 = (int64_t)(v19.__r_.__value_.__l.__size_ - v19.__r_.__value_.__r.__words[0]) / 24;
        if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)p_end_cap - (_QWORD)end) >> 3)) >= v6)
        {
          if (v6 <= 0)
          {
            v11 = v19.__r_.__value_.__r.__words[0] + 24 * v6;
            std::vector<std::string>::__move_range(a2, a2->__end_, a2->__end_, &end[v6]);
            while (v4 != v11)
            {
              std::string::operator=(end, (const std::string *)v4);
              v4 += 24;
              ++end;
            }
          }
          else
          {
            a2->__end_ = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string*,std::string*,std::string*>((uint64_t)p_end_cap, (__int128 *)v19.__r_.__value_.__l.__data_, (__int128 *)v19.__r_.__value_.__l.__size_, a2->__end_);
          }
        }
        else
        {
          v7 = 0xAAAAAAAAAAAAAAABLL * (((char *)end - (char *)a2->__begin_) >> 3);
          v8 = v7 + v6;
          if (v7 + v6 > 0xAAAAAAAAAAAAAAALL)
            std::vector<std::string>::__throw_length_error[abi:ne180100]();
          if (0x5555555555555556 * ((uint64_t)(*(_QWORD *)p_end_cap - (unint64_t)a2->__begin_) >> 3) > v8)
            v8 = 0x5555555555555556 * ((uint64_t)(*(_QWORD *)p_end_cap - (unint64_t)a2->__begin_) >> 3);
          if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)p_end_cap - (unint64_t)a2->__begin_) >> 3) >= 0x555555555555555)
            v9 = 0xAAAAAAAAAAAAAAALL;
          else
            v9 = v8;
          __v.__end_cap_.__value_ = p_end_cap;
          if (v9)
            v9 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v9);
          else
            v10 = 0;
          v12 = (std::string *)(v9 + 24 * v7);
          __v.__first_ = (std::__split_buffer<std::string>::pointer)v9;
          __v.__begin_ = v12;
          __v.__end_ = v12;
          __v.__end_cap_.__value_ = (std::string *)(v9 + 24 * v10);
          v13 = 3 * v6;
          v14 = &v12[v6];
          v15 = 8 * v13;
          do
          {
            if (*(char *)(v4 + 23) < 0)
            {
              std::string::__init_copy_ctor_external(v12, *(const std::string::value_type **)v4, *(_QWORD *)(v4 + 8));
            }
            else
            {
              v16 = *(_OWORD *)v4;
              v12->__r_.__value_.__r.__words[2] = *(_QWORD *)(v4 + 16);
              *(_OWORD *)&v12->__r_.__value_.__l.__data_ = v16;
            }
            ++v12;
            v4 += 24;
            v15 -= 24;
          }
          while (v15);
          __v.__end_ = v14;
          std::vector<std::string>::__swap_out_circular_buffer(a2, &__v, end);
          std::__split_buffer<std::string>::~__split_buffer(&__v);
        }
      }
      __v.__first_ = &v19;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__v);
      __v.__first_ = &v22;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__v);
      __v.__first_ = &v21;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__v);
      v3 += 7;
    }
    while (v3 != v17);
  }
}

void sub_20A66822C(_Unwind_Exception *a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__split_buffer<std::string> *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void **a21)
{
  std::__split_buffer<std::string> *v21;
  std::string *v22;

  v21->__begin_ = v22;
  a21 = (void **)&a11;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a21);
  mlcore::LocalizedSectionHeader::~LocalizedSectionHeader((mlcore::LocalizedSectionHeader *)&a14);
  a14 = v21;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a14);
  _Unwind_Resume(a1);
}

void std::__function::__func<void mlcore::LibraryView::performQuery<mlcore::PropertiesQuery>(std::shared_ptr<mlcore::PropertiesQuery>,std::shared_ptr<mlcore::Transaction>,std::function<void ()(std::shared_ptr<mlcore::PropertiesQuery::Result>)>)::{lambda(std::shared_ptr<mlcore::QueryResult>)#1},std::allocator<void mlcore::LibraryView::performQuery<mlcore::PropertiesQuery>(std::shared_ptr<mlcore::PropertiesQuery>,std::shared_ptr<mlcore::Transaction>,std::function<void ()(std::shared_ptr<mlcore::PropertiesQuery::Result>)>)::{lambda(std::shared_ptr<mlcore::QueryResult>)#1}>,void ()(std::shared_ptr<mlcore::QueryResult>)>::operator()(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  std::__shared_weak_count *v13;

  v2 = *a2;
  v3 = (std::__shared_weak_count *)a2[1];
  *a2 = 0;
  a2[1] = 0;
  v12 = v2;
  v13 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  v6 = *(_QWORD *)(a1 + 32);
  if (!v6)
    std::__throw_bad_function_call[abi:ne180100]();
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v6 + 48))(v6, &v12);
  v7 = v13;
  if (v13)
  {
    v8 = (unint64_t *)&v13->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if (v3)
  {
    v10 = (unint64_t *)&v3->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_20A668380(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;

  if (a10)
  {
    p_shared_owners = (unint64_t *)&a10->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))a10->__on_zero_shared)(a10);
      std::__shared_weak_count::__release_weak(a10);
    }
  }
  if (v10)
  {
    v14 = (unint64_t *)&v10->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t mlcore::MultiEntityQueryResult::MultiEntityQueryResult(uint64_t a1, uint64_t *a2, unint64_t a3, _QWORD *a4, _QWORD *a5, uint64_t a6, uint64_t *a7, uint64_t a8)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  uint64_t *v28;
  uint64_t **v29;
  _QWORD *v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint8x8_t v36;
  _QWORD *v37;
  _QWORD *i;
  unint64_t v39;
  _QWORD *v40;
  float v41;
  float v42;
  _BOOL8 v43;
  unint64_t v44;
  unint64_t v45;
  size_t v46;
  uint64_t v47;
  _QWORD *v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t *v51;
  unint64_t v52;
  uint64_t **j;
  uint64_t *v54;
  std::__shared_weak_count *v55;
  uint64_t v56;
  unint64_t *v57;
  unint64_t v58;
  unint64_t *v59;
  unint64_t v60;
  unint64_t v62;
  _QWORD *v63;
  void *v64;
  void *v65;
  uint64_t v66;
  void *__p;
  void *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71[2];
  uint64_t v72;
  std::__shared_weak_count *v73;
  uint64_t v74;
  std::__shared_weak_count *v75;
  uint64_t v76;
  std::__shared_weak_count *v77;

  v11 = (std::__shared_weak_count *)a2[1];
  v76 = *a2;
  v77 = v11;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldxr(p_shared_owners);
    while (__stxr(v13 + 1, p_shared_owners));
  }
  __p = 0;
  v68 = 0;
  v69 = 0;
  v74 = 0;
  v75 = 0;
  v72 = 0;
  v73 = 0;
  v14 = (std::__shared_weak_count *)a7[1];
  v71[0] = *a7;
  v71[1] = (uint64_t)v14;
  if (v14)
  {
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  mlcore::EntityQueryResult::EntityQueryResult((_QWORD *)a1, &v76, 0, (uint64_t)&__p, a4, &v74, &v72, a8, 0, 0, a6, v71);
  if (v14)
  {
    v17 = (unint64_t *)&v14->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v19 = v73;
  if (v73)
  {
    v20 = (unint64_t *)&v73->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  v22 = v75;
  if (v75)
  {
    v23 = (unint64_t *)&v75->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  if (__p)
    operator delete(__p);
  v25 = v77;
  if (v77)
  {
    v26 = (unint64_t *)&v77->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  v63 = a5;
  *(_QWORD *)a1 = &off_24C33A358;
  v28 = (uint64_t *)(a1 + 272);
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_DWORD *)(a1 + 304) = *(_DWORD *)(a3 + 32);
  std::__hash_table<std::__hash_value_type<mlcore::ModelProperty<std::string> *,std::string>,std::__unordered_map_hasher<mlcore::ModelProperty<std::string> *,std::__hash_value_type<mlcore::ModelProperty<std::string> *,std::string>,std::hash<mlcore::ModelProperty<std::string> *>,std::equal_to<mlcore::ModelProperty<std::string> *>,true>,std::__unordered_map_equal<mlcore::ModelProperty<std::string> *,std::__hash_value_type<mlcore::ModelProperty<std::string> *,std::string>,std::equal_to<mlcore::ModelProperty<std::string> *>,std::hash<mlcore::ModelProperty<std::string> *>,true>,std::allocator<std::__hash_value_type<mlcore::ModelProperty<std::string> *,std::string>>>::__rehash<true>(a1 + 272, *(_QWORD *)(a3 + 8));
  v62 = a3;
  v29 = *(uint64_t ***)(a3 + 16);
  if (v29)
  {
    v30 = (_QWORD *)(a1 + 288);
    do
    {
      v31 = (unint64_t)v29[2];
      v32 = 0x9DDFEA08EB382D69 * (((8 * v31) + 8) ^ HIDWORD(v31));
      v33 = 0x9DDFEA08EB382D69 * (HIDWORD(v31) ^ (v32 >> 47) ^ v32);
      v34 = 0x9DDFEA08EB382D69 * (v33 ^ (v33 >> 47));
      v35 = *(_QWORD *)(a1 + 280);
      if (v35)
      {
        v36 = (uint8x8_t)vcnt_s8((int8x8_t)v35);
        v36.i16[0] = vaddlv_u8(v36);
        if (v36.u32[0] > 1uLL)
        {
          a3 = 0x9DDFEA08EB382D69 * (v33 ^ (v33 >> 47));
          if (v34 >= v35)
            a3 = v34 % v35;
        }
        else
        {
          a3 = v34 & (v35 - 1);
        }
        v37 = *(_QWORD **)(*v28 + 8 * a3);
        if (v37)
        {
          for (i = (_QWORD *)*v37; i; i = (_QWORD *)*i)
          {
            v39 = i[1];
            if (v39 == v34)
            {
              if (i[2] == v31)
                goto LABEL_69;
            }
            else
            {
              if (v36.u32[0] > 1uLL)
              {
                if (v39 >= v35)
                  v39 %= v35;
              }
              else
              {
                v39 &= v35 - 1;
              }
              if (v39 != a3)
                break;
            }
          }
        }
      }
      v40 = operator new(0x30uLL);
      *v40 = 0;
      v40[1] = v34;
      v40[2] = v29[2];
      v40[4] = 0;
      v40[5] = 0;
      v40[3] = 0;
      std::vector<mlcore::ModelPropertyBase *>::__init_with_size[abi:ne180100]<mlcore::ModelPropertyBase **,mlcore::ModelPropertyBase **>(v40 + 3, v29[3], (uint64_t)v29[4], v29[4] - v29[3]);
      v41 = (float)(unint64_t)(*(_QWORD *)(a1 + 296) + 1);
      v42 = *(float *)(a1 + 304);
      if (!v35 || (float)(v42 * (float)v35) < v41)
      {
        v43 = (v35 & (v35 - 1)) != 0;
        if (v35 < 3)
          v43 = 1;
        v44 = v43 | (2 * v35);
        v45 = vcvtps_u32_f32(v41 / v42);
        if (v44 <= v45)
          v46 = v45;
        else
          v46 = v44;
        std::__hash_table<std::__hash_value_type<mlcore::ModelProperty<std::string> *,std::string>,std::__unordered_map_hasher<mlcore::ModelProperty<std::string> *,std::__hash_value_type<mlcore::ModelProperty<std::string> *,std::string>,std::hash<mlcore::ModelProperty<std::string> *>,std::equal_to<mlcore::ModelProperty<std::string> *>,true>,std::__unordered_map_equal<mlcore::ModelProperty<std::string> *,std::__hash_value_type<mlcore::ModelProperty<std::string> *,std::string>,std::equal_to<mlcore::ModelProperty<std::string> *>,std::hash<mlcore::ModelProperty<std::string> *>,true>,std::allocator<std::__hash_value_type<mlcore::ModelProperty<std::string> *,std::string>>>::__rehash<true>(a1 + 272, v46);
        v35 = *(_QWORD *)(a1 + 280);
        if ((v35 & (v35 - 1)) != 0)
        {
          if (v34 >= v35)
            a3 = v34 % v35;
          else
            a3 = v34;
        }
        else
        {
          a3 = (v35 - 1) & v34;
        }
      }
      v47 = *v28;
      v48 = *(_QWORD **)(*v28 + 8 * a3);
      if (v48)
      {
        *v40 = *v48;
      }
      else
      {
        *v40 = *v30;
        *v30 = v40;
        *(_QWORD *)(v47 + 8 * a3) = v30;
        if (!*v40)
          goto LABEL_68;
        v49 = *(_QWORD *)(*v40 + 8);
        if ((v35 & (v35 - 1)) != 0)
        {
          if (v49 >= v35)
            v49 %= v35;
        }
        else
        {
          v49 &= v35 - 1;
        }
        v48 = (_QWORD *)(*v28 + 8 * v49);
      }
      *v48 = v40;
LABEL_68:
      ++*(_QWORD *)(a1 + 296);
LABEL_69:
      v29 = (uint64_t **)*v29;
    }
    while (v29);
  }
  *(_QWORD *)(a1 + 312) = *v63;
  v50 = v63[1];
  *(_QWORD *)(a1 + 320) = v50;
  if (v50)
  {
    v51 = (unint64_t *)(v50 + 8);
    do
      v52 = __ldxr(v51);
    while (__stxr(v52 + 1, v51));
  }
  for (j = *(uint64_t ***)(v62 + 16); j; j = (uint64_t **)*j)
  {
    v54 = j[3];
    __p = j[2];
    v69 = 0;
    v70 = 0;
    v68 = 0;
    std::vector<mlcore::ModelPropertyBase *>::__init_with_size[abi:ne180100]<mlcore::ModelPropertyBase **,mlcore::ModelPropertyBase **>(&v68, v54, (uint64_t)j[4], j[4] - v54);
    v56 = *(_QWORD *)(a1 + 256);
    v55 = *(std::__shared_weak_count **)(a1 + 264);
    v74 = v56;
    v75 = v55;
    if (v55)
    {
      v57 = (unint64_t *)&v55->__shared_owners_;
      do
        v58 = __ldxr(v57);
      while (__stxr(v58 + 1, v57));
    }
    v64 = 0;
    v65 = 0;
    v66 = 0;
    std::vector<mlcore::ModelPropertyBase *>::__init_with_size[abi:ne180100]<mlcore::ModelPropertyBase **,mlcore::ModelPropertyBase **>(&v64, v68, v69, (v69 - (uint64_t)v68) >> 3);
    (*(void (**)(uint64_t, void **, void *))(*(_QWORD *)v56 + 16))(v56, &v64, __p);
    if (v64)
    {
      v65 = v64;
      operator delete(v64);
    }
    if (v55)
    {
      v59 = (unint64_t *)&v55->__shared_owners_;
      do
        v60 = __ldaxr(v59);
      while (__stlxr(v60 - 1, v59));
      if (!v60)
      {
        ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
        std::__shared_weak_count::__release_weak(v55);
      }
    }
    if (v68)
      operator delete(v68);
  }
  return a1;
}

void sub_20A668918(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,char a24)
{
  std::exception *v24;
  uint64_t v25;

  std::__hash_table<std::__hash_value_type<mlcore::EntityClass *,std::vector<mlcore::ModelPropertyBase *>>,std::__unordered_map_hasher<mlcore::EntityClass *,std::__hash_value_type<mlcore::EntityClass *,std::vector<mlcore::ModelPropertyBase *>>,std::hash<mlcore::EntityClass *>,std::equal_to<mlcore::EntityClass *>,true>,std::__unordered_map_equal<mlcore::EntityClass *,std::__hash_value_type<mlcore::EntityClass *,std::vector<mlcore::ModelPropertyBase *>>,std::equal_to<mlcore::EntityClass *>,std::hash<mlcore::EntityClass *>,true>,std::allocator<std::__hash_value_type<mlcore::EntityClass *,std::vector<mlcore::ModelPropertyBase *>>>>::~__hash_table(v25);
  mlcore::EntityQueryResult::~EntityQueryResult(v24);
  _Unwind_Resume(a1);
}

void mlcore::LibraryView::performQuery<mlcore::PropertiesQuery>(void (***a1)(_QWORD, uint64_t *, uint64_t *, _BYTE *), uint64_t a2, std::__shared_weak_count *a3, uint64_t *a4, uint64_t a5)
{
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  uint64_t v24;
  std::__shared_weak_count *v25;
  _BYTE v26[24];
  _BYTE *v27;
  _BYTE v28[24];
  _BYTE *v29;
  uint64_t v30;

  v30 = *MEMORY[0x24BDAC8D0];
  v24 = a2;
  v25 = a3;
  if (a3)
  {
    p_shared_owners = (unint64_t *)&a3->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  v8 = (std::__shared_weak_count *)a4[1];
  v22 = *a4;
  v23 = v8;
  if (v8)
  {
    v9 = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100]((uint64_t)v26, a5);
  v29 = 0;
  v11 = operator new(0x28uLL);
  *v11 = &off_24C33ADD0;
  std::__function::__value_func<void ()(std::shared_ptr<mlcore::PropertiesQueryResult>)>::__value_func[abi:ne180100]((uint64_t)(v11 + 1), (uint64_t)v26);
  v29 = v11;
  (**a1)(a1, &v24, &v22, v28);
  v12 = v29;
  if (v29 == v28)
  {
    v13 = 4;
    v12 = v28;
  }
  else
  {
    if (!v29)
      goto LABEL_12;
    v13 = 5;
  }
  (*(void (**)(void))(*v12 + 8 * v13))();
LABEL_12:
  v14 = v27;
  if (v27 == v26)
  {
    v15 = 4;
    v14 = v26;
    goto LABEL_16;
  }
  if (v27)
  {
    v15 = 5;
LABEL_16:
    (*(void (**)(void))(*v14 + 8 * v15))();
  }
  v16 = v23;
  if (v23)
  {
    v17 = (unint64_t *)&v23->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  v19 = v25;
  if (v25)
  {
    v20 = (unint64_t *)&v25->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
}

void sub_20A668B70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, char *a17)
{
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;

  v20 = *(_QWORD **)(v18 - 32);
  if (v20 == v17)
  {
    v21 = 4;
    v20 = (_QWORD *)(v18 - 56);
  }
  else
  {
    if (!v20)
      goto LABEL_6;
    v21 = 5;
  }
  (*(void (**)(void))(*v20 + 8 * v21))();
LABEL_6:
  v22 = a17;
  if (a17 == &a14)
  {
    v23 = 4;
    v22 = &a14;
  }
  else
  {
    if (!a17)
      goto LABEL_11;
    v23 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v22 + 8 * v23))();
LABEL_11:
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)&a12);
  _Unwind_Resume(a1);
}

double mlcore::TypedEntityClass<mlcore::Playlist>::create@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, _OWORD *a4@<X8>)
{
  double v8;
  unint64_t *v9;
  uint64_t v10;
  double result;
  double v12[3];
  unint64_t v13[3];
  unint64_t *v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  std::allocate_shared[abi:ne180100]<mlcore::Playlist,std::allocator<mlcore::Playlist>,long long &,void>(v12, a2);
  v8 = v12[0];
  v13[0] = (unint64_t)&off_24C33B140;
  v14 = v13;
  mlcore::PropertyCache::mergePropertiesFromCache(*(_QWORD *)&v12[0] + 8, a3, (uint64_t)v13);
  v9 = v14;
  if (v14 == v13)
  {
    v10 = 4;
    v9 = v13;
    goto LABEL_5;
  }
  if (v14)
  {
    v10 = 5;
LABEL_5:
    (*(void (**)(void))(*v9 + 8 * v10))();
  }
  v13[0] = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 112))(a1);
  std::__hash_table<std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>,std::__unordered_map_hasher<mlcore::ModelProperty<long long> *,std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>,std::hash<mlcore::ModelProperty<long long> *>,std::equal_to<mlcore::ModelProperty<long long> *>,true>,std::__unordered_map_equal<mlcore::ModelProperty<long long> *,std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>,std::equal_to<mlcore::ModelProperty<long long> *>,std::hash<mlcore::ModelProperty<long long> *>,true>,std::allocator<std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>>>::__emplace_unique_key_args<mlcore::ModelProperty<long long> *,std::piecewise_construct_t const&,std::tuple<mlcore::ModelProperty<long long> * const&>,std::tuple<>>(*(_QWORD *)&v8 + 176, v13[0], v13)[3] = a2;
  result = v12[0];
  *a4 = *(_OWORD *)v12;
  return result;
}

void sub_20A668CF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15)
{
  char *v15;
  char *v17;
  uint64_t v18;

  v17 = a15;
  if (a15 == v15)
  {
    v18 = 4;
    v17 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v18 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v17 + 8 * v18))();
LABEL_6:
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t mlcore::EntityQueryResult::persistentIDAtIndex(mlcore::EntityQueryResult *this, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;

  v2 = **((_QWORD **)this + 23);
  if (0x84BDA12F684BDA13 * ((*(_QWORD *)(*((_QWORD *)this + 23) + 8) - v2) >> 3) <= a2)
    std::vector<mlcore::PropertyCache>::__throw_out_of_range[abi:ne180100]();
  v3 = v2 + 216 * a2;
  v4 = (*(uint64_t (**)(mlcore::EntityQueryResult *))(*(_QWORD *)this + 16))(this);
  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  return mlcore::PropertyCacheBase<long long,int,double,std::string,mediaplatform::Data>::valueForProperty(v3, v5);
}

uint64_t mlcore::PlaylistPropertyPersistentID(mlcore *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&mlcore::PlaylistPropertyPersistentID(void)::once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&mlcore::PlaylistPropertyPersistentID(void)::once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::PlaylistPropertyPersistentID(void)::$_0 &&>>);
  }
  return mlcore::PlaylistPropertyPersistentID(void)::property;
}

void std::__function::__func<mlcore::EntityCache::entityForClassAndPersistentID(mlcore::EntityClass *,long long,mlcore::PropertyCache)::$_0,std::allocator<mlcore::EntityCache::entityForClassAndPersistentID(mlcore::EntityClass *,long long,mlcore::PropertyCache)::$_0>,void ()(std::shared_ptr<mlcore::PropertiesQueryResult>)>::operator()(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  _QWORD *v5;
  __int128 *v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  void **v13[27];
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  __int128 *v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  v3 = *a2;
  v4 = (std::__shared_weak_count *)a2[1];
  *a2 = 0;
  a2[1] = 0;
  if (!*(_DWORD *)(v3 + 40))
  {
    v14 = 0;
    v15 = 0;
    v16 = 0;
    std::vector<mlcore::PropertyCache>::__init_with_size[abi:ne180100]<mlcore::PropertyCache*,mlcore::PropertyCache*>((uint64_t)&v14, *(_QWORD *)(v3 + 160), *(_QWORD *)(v3 + 168), 0x84BDA12F684BDA13 * ((uint64_t)(*(_QWORD *)(v3 + 168) - *(_QWORD *)(v3 + 160)) >> 3));
    if (v15 == v14)
    {
LABEL_14:
      v13[0] = (void **)&v14;
      std::vector<mlcore::PropertyCache>::__destroy_vector::operator()[abi:ne180100](v13);
      goto LABEL_15;
    }
    mlcore::PropertyCacheBase<long long,int,double,std::string,mediaplatform::Data>::PropertyCacheBase((uint64_t)v13, v14);
    v13[0] = (void **)&off_24C3371C0;
    v13[26] = (void **)&unk_24C3371E8;
    v5 = *(_QWORD **)(a1 + 8);
    *(_QWORD *)&v17 = &off_24C33B140;
    v18 = &v17;
    mlcore::PropertyCache::mergePropertiesFromCache((uint64_t)v13, v5, (uint64_t)&v17);
    v6 = v18;
    if (v18 == &v17)
    {
      v7 = 4;
      v6 = &v17;
    }
    else
    {
      if (!v18)
        goto LABEL_8;
      v7 = 5;
    }
    (*(void (**)(void))(*(_QWORD *)v6 + 8 * v7))();
LABEL_8:
    (*(void (**)(__int128 *__return_ptr, _QWORD, _QWORD, void ***))(***(_QWORD ***)(a1 + 24) + 48))(&v17, **(_QWORD **)(a1 + 24), **(_QWORD **)(a1 + 32), v13);
    std::shared_ptr<mlcore::Predicate>::operator=[abi:ne180100](*(_QWORD *)(a1 + 16), &v17);
    v8 = (std::__shared_weak_count *)*((_QWORD *)&v17 + 1);
    if (*((_QWORD *)&v17 + 1))
    {
      v9 = (unint64_t *)(*((_QWORD *)&v17 + 1) + 8);
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 - 1, v9));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
    mlcore::PropertyCacheBase<long long,int,double,std::string,mediaplatform::Data>::~PropertyCacheBase(v13);
    goto LABEL_14;
  }
LABEL_15:
  dispatch_semaphore_signal(**(dispatch_semaphore_t **)(a1 + 40));
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

void sub_20A668FDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  std::__shared_weak_count *v10;
  uint64_t v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  mlcore::PropertyCacheBase<long long,int,double,std::string,mediaplatform::Data>::~PropertyCacheBase(&a10);
  a10 = (void **)(v11 - 96);
  std::vector<mlcore::PropertyCache>::__destroy_vector::operator()[abi:ne180100](&a10);
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  _Unwind_Resume(a1);
}

void mlcore::PropertyCache::mergePropertiesFromCache(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *i;
  unint64_t v11;
  uint64_t v12;
  int v13;
  _QWORD *j;
  unint64_t v15;
  uint64_t v16;
  double v17;
  uint64_t *k;
  unint64_t v19;
  uint64_t v20;
  _QWORD *m;
  unint64_t v22;
  const void *v23;
  size_t v24;
  void *v25;
  uint64_t v26;
  std::string __p;
  void (**v28)(mediaplatform::Data *__hidden);
  std::string v29;
  char v30;
  unint64_t v31;

  v6 = (_QWORD *)a2[23];
  if (v6)
  {
    while (1)
    {
      v7 = v6[2];
      v28 = (void (**)(mediaplatform::Data *__hidden))v7;
      v8 = *(_QWORD *)(a3 + 24);
      if (!v8)
        break;
      if ((*(unsigned int (**)(uint64_t, void (***)(mediaplatform::Data *__hidden)))(*(_QWORD *)v8 + 48))(v8, &v28))
      {
        v9 = mlcore::PropertyCacheBase<long long,int,double,std::string,mediaplatform::Data>::valueForProperty((uint64_t)a2, v7);
        v28 = (void (**)(mediaplatform::Data *__hidden))v7;
        std::__hash_table<std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>,std::__unordered_map_hasher<mlcore::ModelProperty<long long> *,std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>,std::hash<mlcore::ModelProperty<long long> *>,std::equal_to<mlcore::ModelProperty<long long> *>,true>,std::__unordered_map_equal<mlcore::ModelProperty<long long> *,std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>,std::equal_to<mlcore::ModelProperty<long long> *>,std::hash<mlcore::ModelProperty<long long> *>,true>,std::allocator<std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>>>::__emplace_unique_key_args<mlcore::ModelProperty<long long> *,std::piecewise_construct_t const&,std::tuple<mlcore::ModelProperty<long long> * const&>,std::tuple<>>(a1 + 168, v7, &v28)[3] = v9;
      }
      v6 = (_QWORD *)*v6;
      if (!v6)
        goto LABEL_6;
    }
LABEL_43:
    std::__throw_bad_function_call[abi:ne180100]();
  }
LABEL_6:
  for (i = (_QWORD *)a2[18]; i; i = (_QWORD *)*i)
  {
    v11 = i[2];
    v28 = (void (**)(mediaplatform::Data *__hidden))v11;
    v12 = *(_QWORD *)(a3 + 24);
    if (!v12)
      goto LABEL_43;
    if ((*(unsigned int (**)(uint64_t, void (***)(mediaplatform::Data *__hidden)))(*(_QWORD *)v12 + 48))(v12, &v28))
    {
      v13 = mlcore::PropertyCacheBase<int,double,std::string,mediaplatform::Data>::valueForProperty((uint64_t)a2, v11);
      v28 = (void (**)(mediaplatform::Data *__hidden))v11;
      *((_DWORD *)std::__hash_table<std::__hash_value_type<mlcore::ModelProperty<int> *,int>,std::__unordered_map_hasher<mlcore::ModelProperty<int> *,std::__hash_value_type<mlcore::ModelProperty<int> *,int>,std::hash<mlcore::ModelProperty<int> *>,std::equal_to<mlcore::ModelProperty<int> *>,true>,std::__unordered_map_equal<mlcore::ModelProperty<int> *,std::__hash_value_type<mlcore::ModelProperty<int> *,int>,std::equal_to<mlcore::ModelProperty<int> *>,std::hash<mlcore::ModelProperty<int> *>,true>,std::allocator<std::__hash_value_type<mlcore::ModelProperty<int> *,int>>>::__emplace_unique_key_args<mlcore::ModelProperty<int> *,std::piecewise_construct_t const&,std::tuple<mlcore::ModelProperty<int> * const&>,std::tuple<>>(a1 + 128, v11, &v28)+ 6) = v13;
    }
  }
  for (j = (_QWORD *)a2[13]; j; j = (_QWORD *)*j)
  {
    v15 = j[2];
    v28 = (void (**)(mediaplatform::Data *__hidden))v15;
    v16 = *(_QWORD *)(a3 + 24);
    if (!v16)
      goto LABEL_43;
    if ((*(unsigned int (**)(uint64_t, void (***)(mediaplatform::Data *__hidden)))(*(_QWORD *)v16 + 48))(v16, &v28))
    {
      v17 = mlcore::PropertyCacheBase<double,std::string,mediaplatform::Data>::valueForProperty((uint64_t)a2, v15);
      v28 = (void (**)(mediaplatform::Data *__hidden))v15;
      *((double *)std::__hash_table<std::__hash_value_type<mlcore::ModelProperty<double> *,double>,std::__unordered_map_hasher<mlcore::ModelProperty<double> *,std::__hash_value_type<mlcore::ModelProperty<double> *,double>,std::hash<mlcore::ModelProperty<double> *>,std::equal_to<mlcore::ModelProperty<double> *>,true>,std::__unordered_map_equal<mlcore::ModelProperty<double> *,std::__hash_value_type<mlcore::ModelProperty<double> *,double>,std::equal_to<mlcore::ModelProperty<double> *>,std::hash<mlcore::ModelProperty<double> *>,true>,std::allocator<std::__hash_value_type<mlcore::ModelProperty<double> *,double>>>::__emplace_unique_key_args<mlcore::ModelProperty<double> *,std::piecewise_construct_t const&,std::tuple<mlcore::ModelProperty<double> * const&>,std::tuple<>>(a1 + 88, v15, &v28)+ 3) = v17;
    }
  }
  for (k = (uint64_t *)a2[8]; k; k = (uint64_t *)*k)
  {
    v19 = k[2];
    v28 = (void (**)(mediaplatform::Data *__hidden))v19;
    if (*((char *)k + 47) < 0)
    {
      std::string::__init_copy_ctor_external(&v29, (const std::string::value_type *)k[3], k[4]);
      v19 = (unint64_t)v28;
    }
    else
    {
      v29 = *(std::string *)((_BYTE *)k + 1);
    }
    v31 = v19;
    v20 = *(_QWORD *)(a3 + 24);
    if (!v20)
      std::__throw_bad_function_call[abi:ne180100]();
    if ((*(unsigned int (**)(uint64_t, unint64_t *))(*(_QWORD *)v20 + 48))(v20, &v31))
    {
      mlcore::PropertyCacheBase<std::string,mediaplatform::Data>::valueForProperty(&__p, (uint64_t)a2, v19);
      mlcore::PropertyCacheBase<std::string,mediaplatform::Data>::setValueForProperty(a1, &__p, v19);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v29.__r_.__value_.__l.__data_);
  }
  for (m = (_QWORD *)a2[3]; m; m = (_QWORD *)*m)
  {
    v22 = m[2];
    v23 = (const void *)m[6];
    v24 = m[4];
    if (v24)
      v25 = (void *)operator new[]();
    else
      v25 = 0;
    if (v23)
      memcpy(v25, v23, v24);
    else
      bzero(v25, v24);
    v31 = v22;
    v26 = *(_QWORD *)(a3 + 24);
    if (!v26)
      std::__throw_bad_function_call[abi:ne180100]();
    if ((*(unsigned int (**)(uint64_t, unint64_t *))(*(_QWORD *)v26 + 48))(v26, &v31))
    {
      mlcore::PropertyCacheBase<mediaplatform::Data>::valueForProperty((mediaplatform::Data *)&v28, (uint64_t)a2, v22);
      mlcore::PropertyCacheBase<mediaplatform::Data>::setValueForProperty(a1, (uint64_t)&v28, v22);
      v28 = &off_24C331510;
      if (v30)
      {
        if (v29.__r_.__value_.__r.__words[2])
          MEMORY[0x20BD27AE4](v29.__r_.__value_.__r.__words[2], 0x1000C8077774924);
      }
    }
    if (v25)
      MEMORY[0x20BD27AE4](v25, 0x1000C8077774924);
  }
}

void sub_20A6693A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, char a20)
{
  uint64_t v20;

  if (a20 && a19)
    MEMORY[0x20BD27AE4](a19, 0x1000C8077774924);
  if (v20)
    MEMORY[0x20BD27AE4](v20, 0x1000C8077774924);
  _Unwind_Resume(exception_object);
}

uint64_t _ZNSt3__110__function6__funcIZN6mlcore13PropertyCache24mergePropertiesFromCacheERKS3_RKNS_8functionIFbPNS2_17ModelPropertyBaseEEEEEd_UlS8_E_NS_9allocatorISD_EES9_EclEOS8_()
{
  return 1;
}

void mlcore::PropertyCacheBase<std::string,mediaplatform::Data>::valueForProperty(std::string *a1, uint64_t a2, unint64_t a3)
{
  _QWORD *v5;
  std::logic_error *exception;
  std::string v7;

  v5 = std::__hash_table<std::__hash_value_type<mlcore::ModelProperty<double> *,double>,std::__unordered_map_hasher<mlcore::ModelProperty<double> *,std::__hash_value_type<mlcore::ModelProperty<double> *,double>,std::hash<mlcore::ModelProperty<double> *>,std::equal_to<mlcore::ModelProperty<double> *>,true>,std::__unordered_map_equal<mlcore::ModelProperty<double> *,std::__hash_value_type<mlcore::ModelProperty<double> *,double>,std::equal_to<mlcore::ModelProperty<double> *>,std::hash<mlcore::ModelProperty<double> *>,true>,std::allocator<std::__hash_value_type<mlcore::ModelProperty<double> *,double>>>::find<mlcore::ModelProperty<double> *>((_QWORD *)(a2 + 48), a3);
  if (!v5)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    (*(void (**)(std::string *__return_ptr, unint64_t))(*(_QWORD *)a3 + 40))(&v7, a3);
    std::logic_error::logic_error(exception, &v7);
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8C0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24C32FBC0, MEMORY[0x24BEDAB00]);
  }
  if (*((char *)v5 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(a1, (const std::string::value_type *)v5[3], v5[4]);
  }
  else
  {
    *(_OWORD *)&a1->__r_.__value_.__l.__data_ = *(_OWORD *)(v5 + 3);
    a1->__r_.__value_.__r.__words[2] = v5[5];
  }
}

void sub_20A669514(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  int v16;

  if (a15 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  goto LABEL_6;
}

_QWORD *mlcore::EntityQueryResult::entityAtIndex(mlcore::EntityQueryResult *this, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[27];

  v4 = *((_QWORD *)this + 32);
  v5 = (*(uint64_t (**)(mlcore::EntityQueryResult *))(*(_QWORD *)this + 16))(this);
  v6 = mlcore::EntityQueryResult::persistentIDAtIndex(this, a2);
  v7 = **((_QWORD **)this + 23);
  if (0x84BDA12F684BDA13 * ((*(_QWORD *)(*((_QWORD *)this + 23) + 8) - v7) >> 3) <= a2)
    std::vector<mlcore::PropertyCache>::__throw_out_of_range[abi:ne180100]();
  v8 = v6;
  mlcore::PropertyCacheBase<long long,int,double,std::string,mediaplatform::Data>::PropertyCacheBase((uint64_t)v10, v7 + 216 * a2);
  v10[0] = &off_24C3371C0;
  v10[26] = &unk_24C3371E8;
  (*(void (**)(uint64_t, uint64_t, uint64_t, _QWORD *))(*(_QWORD *)v4 + 24))(v4, v5, v8, v10);
  return mlcore::PropertyCacheBase<long long,int,double,std::string,mediaplatform::Data>::~PropertyCacheBase(v10);
}

void sub_20A669630(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  mlcore::PropertyCacheBase<long long,int,double,std::string,mediaplatform::Data>::~PropertyCacheBase((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t mlcore::MultiEntityQueryResult::entityClassAtIndex(mlcore::MultiEntityQueryResult *this, unint64_t a2)
{
  uint64_t v2;

  v2 = **((_QWORD **)this + 39);
  if (a2 >= (*(_QWORD *)(*((_QWORD *)this + 39) + 8) - v2) >> 3)
    std::vector<mlcore::PropertyCache>::__throw_out_of_range[abi:ne180100]();
  return *(_QWORD *)(v2 + 8 * a2);
}

void mlcore::EntityCache::entityForClassAndPersistentID(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X3>, unint64_t *a5@<X8>)
{
  unint64_t v7;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  std::__shared_weak_count *v15;
  NSObject *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  Class isa;
  uint64_t v20;
  void (***v21)(_QWORD, NSObject **, uint64_t *, void (***)(mlcore::PropertyCache *__hidden));
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  uint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  _QWORD *v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  _QWORD *v40;
  void (***v41)(mlcore::PropertyCache *__hidden);
  uint64_t v42;
  __int128 *v43;
  uint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  unint64_t *v53;
  unint64_t v54;
  unint64_t *v55;
  unint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  __int128 *v60;
  uint64_t v61;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  unint64_t v64;
  dispatch_semaphore_t dsema[2];
  std::__shared_weak_count *v66;
  __int128 v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  std::__shared_weak_count *v71;
  NSObject *v72;
  std::__shared_weak_count *v73;
  _QWORD v74[3];
  _QWORD *v75;
  void (**v76)(mlcore::PropertyCache *__hidden);
  __int128 v77;
  __int128 v78;
  uint64_t v79;
  __int128 v80;
  _BYTE v81[24];
  __int128 v82;
  __int128 v83;
  uint64_t v84;
  __int128 v85;
  _BYTE v86[24];
  _BYTE v87[32];
  uint64_t v88;
  void *v89;
  __int128 v90;
  __int128 *v91;
  uint64_t v92;

  v7 = a2;
  v92 = *MEMORY[0x24BDAC8D0];
  v68 = a3;
  v69 = a2;
  *(_QWORD *)&v67 = a2;
  *((_QWORD *)&v67 + 1) = a3;
  if (*(_BYTE *)(a1 + 120))
  {
LABEL_2:
    *a5 = 0;
    a5[1] = 0;
    v76 = (void (**)(mlcore::PropertyCache *__hidden))v7;
    v10 = std::__hash_table<std::__hash_value_type<mlcore::EntityClass *,std::vector<mlcore::ModelPropertyBase *>>,std::__unordered_map_hasher<mlcore::EntityClass *,std::__hash_value_type<mlcore::EntityClass *,std::vector<mlcore::ModelPropertyBase *>>,std::hash<mlcore::EntityClass *>,std::equal_to<mlcore::EntityClass *>,true>,std::__unordered_map_equal<mlcore::EntityClass *,std::__hash_value_type<mlcore::EntityClass *,std::vector<mlcore::ModelPropertyBase *>>,std::equal_to<mlcore::EntityClass *>,std::hash<mlcore::EntityClass *>,true>,std::allocator<std::__hash_value_type<mlcore::EntityClass *,std::vector<mlcore::ModelPropertyBase *>>>>::__emplace_unique_key_args<mlcore::EntityClass *,std::piecewise_construct_t const&,std::tuple<mlcore::EntityClass * const&>,std::tuple<>>(a1 + 8, v7, &v76);
    v11 = (uint64_t *)v10[3];
    v12 = (uint64_t)(v10[4] - (_QWORD)v11) >> 3;
    if (v12 != 1)
    {
      if (!v12)
        __assert_rtn("entityForClassAndPersistentID", "EntityCache.cpp", 63, "propertiesToFetch.size() > 0");
LABEL_6:
      v14 = std::__hash_table<std::__hash_value_type<mlcore::EntityClass *,std::shared_ptr<mlcore::EntityPropertiesQuery>>,std::__unordered_map_hasher<mlcore::EntityClass *,std::__hash_value_type<mlcore::EntityClass *,std::shared_ptr<mlcore::EntityPropertiesQuery>>,std::hash<mlcore::EntityClass *>,std::equal_to<mlcore::EntityClass *>,true>,std::__unordered_map_equal<mlcore::EntityClass *,std::__hash_value_type<mlcore::EntityClass *,std::shared_ptr<mlcore::EntityPropertiesQuery>>,std::equal_to<mlcore::EntityClass *>,std::hash<mlcore::EntityClass *>,true>,std::allocator<std::__hash_value_type<mlcore::EntityClass *,std::shared_ptr<mlcore::EntityPropertiesQuery>>>>::__emplace_unique_key_args<mlcore::EntityClass *,std::piecewise_construct_t const&,std::tuple<mlcore::EntityClass * const&>,std::tuple<>>(a1 + 48, v69, (uint64_t *)&v69);
      v16 = v14[3];
      v15 = (std::__shared_weak_count *)v14[4];
      dsema[1] = v16;
      v66 = v15;
      if (v15)
      {
        p_shared_owners = (unint64_t *)&v15->__shared_owners_;
        do
          v18 = __ldxr(p_shared_owners);
        while (__stxr(v18 + 1, p_shared_owners));
      }
      isa = v16[15].isa;
      *((_QWORD *)isa + 3) = a3;
      v20 = *((_QWORD *)isa + 4);
      if (v20)
        *(_QWORD *)(v20 + 8) = a3;
      dsema[0] = dispatch_semaphore_create(0);
      v21 = *(void (****)(_QWORD, NSObject **, uint64_t *, void (***)(mlcore::PropertyCache *__hidden)))(a1 + 88);
      if (v15)
      {
        v22 = (unint64_t *)&v15->__shared_owners_;
        do
          v23 = __ldxr(v22);
        while (__stxr(v23 + 1, v22));
      }
      v25 = *(_QWORD *)(a1 + 104);
      v24 = *(std::__shared_weak_count **)(a1 + 112);
      if (v24)
      {
        v26 = (unint64_t *)&v24->__shared_owners_;
        do
          v27 = __ldxr(v26);
        while (__stxr(v27 + 1, v26));
      }
      v75 = 0;
      v28 = operator new(0x30uLL);
      *v28 = &off_24C33AD20;
      v28[1] = a4;
      v28[2] = a5;
      v28[3] = &v69;
      v28[4] = &v68;
      v28[5] = dsema;
      v75 = v28;
      v72 = v16;
      v73 = v15;
      if (v15)
      {
        v29 = (unint64_t *)&v15->__shared_owners_;
        do
          v30 = __ldxr(v29);
        while (__stxr(v30 + 1, v29));
      }
      v70 = v25;
      v71 = v24;
      if (v24)
      {
        v31 = (unint64_t *)&v24->__shared_owners_;
        do
          v32 = __ldxr(v31);
        while (__stxr(v32 + 1, v31));
      }
      v33 = (uint64_t)v75;
      if (v75)
      {
        if (v75 == v74)
        {
          v91 = &v90;
          (*(void (**)(_QWORD *, __int128 *))(v74[0] + 24))(v74, &v90);
LABEL_38:
          *(_QWORD *)&v78 = 0;
          v40 = operator new(0x28uLL);
          *v40 = &off_24C33AE28;
          std::__function::__value_func<void ()(std::shared_ptr<mlcore::PropertiesQueryResult>)>::__value_func[abi:ne180100]((uint64_t)(v40 + 1), (uint64_t)&v90);
          *(_QWORD *)&v78 = v40;
          (**v21)(v21, &v72, &v70, &v76);
          v41 = (void (***)(mlcore::PropertyCache *__hidden))v78;
          if ((void (***)(mlcore::PropertyCache *__hidden))v78 == &v76)
          {
            v42 = 4;
            v41 = &v76;
          }
          else
          {
            if (!(_QWORD)v78)
              goto LABEL_43;
            v42 = 5;
          }
          ((void (*)(void))(*v41)[v42])();
LABEL_43:
          v43 = v91;
          if (v91 == &v90)
          {
            v44 = 4;
            v43 = &v90;
          }
          else
          {
            if (!v91)
            {
LABEL_48:
              v45 = v71;
              if (v71)
              {
                v46 = (unint64_t *)&v71->__shared_owners_;
                do
                  v47 = __ldaxr(v46);
                while (__stlxr(v47 - 1, v46));
                if (!v47)
                {
                  ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
                  std::__shared_weak_count::__release_weak(v45);
                }
              }
              v48 = v73;
              if (v73)
              {
                v49 = (unint64_t *)&v73->__shared_owners_;
                do
                  v50 = __ldaxr(v49);
                while (__stlxr(v50 - 1, v49));
                if (!v50)
                {
                  ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
                  std::__shared_weak_count::__release_weak(v48);
                }
              }
              v51 = v75;
              if (v75 == v74)
              {
                v52 = 4;
                v51 = v74;
              }
              else
              {
                if (!v75)
                  goto LABEL_63;
                v52 = 5;
              }
              (*(void (**)(void))(*v51 + 8 * v52))();
LABEL_63:
              if (v24)
              {
                v53 = (unint64_t *)&v24->__shared_owners_;
                do
                  v54 = __ldaxr(v53);
                while (__stlxr(v54 - 1, v53));
                if (!v54)
                {
                  ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
                  std::__shared_weak_count::__release_weak(v24);
                }
              }
              if (v15)
              {
                v55 = (unint64_t *)&v15->__shared_owners_;
                do
                  v56 = __ldaxr(v55);
                while (__stlxr(v56 - 1, v55));
                if (!v56)
                {
                  ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
                  std::__shared_weak_count::__release_weak(v15);
                }
              }
              dispatch_semaphore_wait(dsema[0], 0xFFFFFFFFFFFFFFFFLL);
              dispatch_release(dsema[0]);
              v57 = v66;
              if (v66)
              {
                v58 = (unint64_t *)&v66->__shared_owners_;
                do
                  v59 = __ldaxr(v58);
                while (__stlxr(v59 - 1, v58));
                if (!v59)
                {
                  ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
                  std::__shared_weak_count::__release_weak(v57);
                }
              }
LABEL_90:
              if (!*(_BYTE *)(a1 + 120))
              {
                if (*a5)
                  mediaplatform::Cache<std::pair<mlcore::EntityClass *,long long>,std::shared_ptr<mlcore::Entity>,mlcore::EntityCache::hash,std::equal_to<std::pair<mlcore::EntityClass *,long long>>>::setValueForKey(a1 + 128, a5, &v67);
              }
              return;
            }
            v44 = 5;
          }
          (*(void (**)(void))(*(_QWORD *)v43 + 8 * v44))();
          goto LABEL_48;
        }
        v33 = (*(uint64_t (**)(void))(*v75 + 16))();
      }
      v91 = (__int128 *)v33;
      goto LABEL_38;
    }
    v13 = *v11;
    if (v13 != (*(uint64_t (**)(unint64_t))(*(_QWORD *)v69 + 112))(v69))
      goto LABEL_6;
    v79 = 1065353216;
    *(_OWORD *)&v81[8] = 0u;
    v84 = 1065353216;
    *(_OWORD *)&v86[8] = 0u;
    v89 = &unk_24C3371E8;
    v78 = 0u;
    v77 = 0u;
    v80 = 0u;
    *(_OWORD *)v81 = 0u;
    v82 = 0u;
    v83 = 0u;
    v85 = 0u;
    *(_OWORD *)v86 = 0u;
    memset(v87, 0, sizeof(v87));
    *(_DWORD *)&v81[16] = 1065353216;
    *(_DWORD *)&v86[16] = 1065353216;
    v88 = 1065353216;
    v76 = &off_24C3371C0;
    *(_QWORD *)&v90 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)v69 + 112))(v69);
    std::__hash_table<std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>,std::__unordered_map_hasher<mlcore::ModelProperty<long long> *,std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>,std::hash<mlcore::ModelProperty<long long> *>,std::equal_to<mlcore::ModelProperty<long long> *>,true>,std::__unordered_map_equal<mlcore::ModelProperty<long long> *,std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>,std::equal_to<mlcore::ModelProperty<long long> *>,std::hash<mlcore::ModelProperty<long long> *>,true>,std::allocator<std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>>>::__emplace_unique_key_args<mlcore::ModelProperty<long long> *,std::piecewise_construct_t const&,std::tuple<mlcore::ModelProperty<long long> * const&>,std::tuple<>>((uint64_t)v87, v90, &v90)[3] = a3;
    *(_QWORD *)&v90 = &off_24C33B140;
    v91 = &v90;
    mlcore::PropertyCache::mergePropertiesFromCache((uint64_t)&v76, a4, (uint64_t)&v90);
    v60 = v91;
    if (v91 == &v90)
    {
      v61 = 4;
      v60 = &v90;
    }
    else
    {
      if (!v91)
        goto LABEL_84;
      v61 = 5;
    }
    (*(void (**)(void))(*(_QWORD *)v60 + 8 * v61))();
LABEL_84:
    (*(void (**)(__int128 *__return_ptr, unint64_t, uint64_t, void (***)(mlcore::PropertyCache *__hidden)))(*(_QWORD *)v69 + 48))(&v90, v69, a3, &v76);
    std::shared_ptr<mlcore::Predicate>::operator=[abi:ne180100]((uint64_t)a5, &v90);
    v62 = (std::__shared_weak_count *)*((_QWORD *)&v90 + 1);
    if (*((_QWORD *)&v90 + 1))
    {
      v63 = (unint64_t *)(*((_QWORD *)&v90 + 1) + 8);
      do
        v64 = __ldaxr(v63);
      while (__stlxr(v64 - 1, v63));
      if (!v64)
      {
        ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
        std::__shared_weak_count::__release_weak(v62);
      }
    }
    mlcore::PropertyCacheBase<long long,int,double,std::string,mediaplatform::Data>::~PropertyCacheBase(&v76);
    goto LABEL_90;
  }
  mediaplatform::Cache<std::pair<mlcore::EntityClass *,long long>,std::shared_ptr<mlcore::Entity>,mlcore::EntityCache::hash,std::equal_to<std::pair<mlcore::EntityClass *,long long>>>::valueForKey((uint64_t)&v76, a1 + 128, a2, a3);
  if (!BYTE8(v77))
  {
    v7 = v69;
    goto LABEL_2;
  }
  mediaplatform::Optional<std::shared_ptr<mlcore::Entity>>::value((uint64_t)&v76);
  v34 = v77;
  *a5 = (unint64_t)v76;
  a5[1] = v34;
  if (v34)
  {
    v35 = (unint64_t *)(v34 + 8);
    do
      v36 = __ldxr(v35);
    while (__stxr(v36 + 1, v35));
  }
  if (BYTE8(v77))
  {
    v37 = (std::__shared_weak_count *)v77;
    if ((_QWORD)v77)
    {
      v38 = (unint64_t *)(v77 + 8);
      do
        v39 = __ldaxr(v38);
      while (__stlxr(v39 - 1, v38));
      if (!v39)
      {
        ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
        std::__shared_weak_count::__release_weak(v37);
      }
    }
  }
}

void sub_20A669CBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, dispatch_object_t object, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,char a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32)
{
  uint64_t v32;

  mlcore::PropertyCacheBase<long long,int,double,std::string,mediaplatform::Data>::~PropertyCacheBase(&a29);
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100](v32);
  _Unwind_Resume(a1);
}

void std::__function::__func<void mlcore::LibraryView::performQuery<mlcore::EntityPropertiesQuery>(std::shared_ptr<mlcore::EntityPropertiesQuery>,std::shared_ptr<mlcore::Transaction>,std::function<void ()(std::shared_ptr<mlcore::EntityPropertiesQuery::Result>)>)::{lambda(std::shared_ptr<mlcore::QueryResult>)#1},std::allocator<void mlcore::LibraryView::performQuery<mlcore::EntityPropertiesQuery>(std::shared_ptr<mlcore::EntityPropertiesQuery>,std::shared_ptr<mlcore::Transaction>,std::function<void ()(std::shared_ptr<mlcore::EntityPropertiesQuery::Result>)>)::{lambda(std::shared_ptr<mlcore::QueryResult>)#1}>,void ()(std::shared_ptr<mlcore::QueryResult>)>::destroy_deallocate(char *__p)
{
  char *v2;
  char *v3;
  uint64_t v4;

  v2 = __p + 8;
  v3 = (char *)*((_QWORD *)__p + 4);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
  }
  operator delete(__p);
}

_QWORD *std::__function::__func<void mlcore::LibraryView::performQuery<mlcore::EntityPropertiesQuery>(std::shared_ptr<mlcore::EntityPropertiesQuery>,std::shared_ptr<mlcore::Transaction>,std::function<void ()(std::shared_ptr<mlcore::EntityPropertiesQuery::Result>)>)::{lambda(std::shared_ptr<mlcore::QueryResult>)#1},std::allocator<void mlcore::LibraryView::performQuery<mlcore::EntityPropertiesQuery>(std::shared_ptr<mlcore::EntityPropertiesQuery>,std::shared_ptr<mlcore::Transaction>,std::function<void ()(std::shared_ptr<mlcore::EntityPropertiesQuery::Result>)>)::{lambda(std::shared_ptr<mlcore::QueryResult>)#1}>,void ()(std::shared_ptr<mlcore::QueryResult>)>::__clone(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = a1 + 8;
  v2 = operator new(0x28uLL);
  *v2 = &off_24C33AE28;
  std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100]((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_20A669EB4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

__n128 std::__function::__func<mlcore::EntityCache::entityForClassAndPersistentID(mlcore::EntityClass *,long long,mlcore::PropertyCache)::$_0,std::allocator<mlcore::EntityCache::entityForClassAndPersistentID(mlcore::EntityClass *,long long,mlcore::PropertyCache)::$_0>,void ()(std::shared_ptr<mlcore::PropertiesQueryResult>)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x30uLL);
  *(_QWORD *)v2 = &off_24C33AD20;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  *((_QWORD *)v2 + 5) = *(_QWORD *)(a1 + 40);
  return result;
}

__n128 std::__function::__func<std::shared_ptr<mlcore::PropertiesQuery::Result> mlcore::GetQueryResult<mlcore::PropertiesQuery>(std::shared_ptr<mlcore::Transaction>,std::shared_ptr<mlcore::PropertiesQuery::Result>)::{lambda(std::shared_ptr<mlcore::PropertiesQueryResult>)#1},std::allocator<std::allocator>,void ()(std::shared_ptr<mlcore::PropertiesQuery::Result> mlcore::GetQueryResult<mlcore::PropertiesQuery>(std::shared_ptr<mlcore::Transaction>,std::shared_ptr<mlcore::PropertiesQuery::Result>)::{lambda(std::shared_ptr<mlcore::PropertiesQueryResult>)#1})>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24C33B198;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

_QWORD *std::__hash_table<std::__hash_value_type<mlcore::ModelProperty<double> *,double>,std::__unordered_map_hasher<mlcore::ModelProperty<double> *,std::__hash_value_type<mlcore::ModelProperty<double> *,double>,std::hash<mlcore::ModelProperty<double> *>,std::equal_to<mlcore::ModelProperty<double> *>,true>,std::__unordered_map_equal<mlcore::ModelProperty<double> *,std::__hash_value_type<mlcore::ModelProperty<double> *,double>,std::equal_to<mlcore::ModelProperty<double> *>,std::hash<mlcore::ModelProperty<double> *>,true>,std::allocator<std::__hash_value_type<mlcore::ModelProperty<double> *,double>>>::__emplace_unique_key_args<mlcore::ModelProperty<double> *,std::piecewise_construct_t const&,std::tuple<mlcore::ModelProperty<double> * const&>,std::tuple<>>(uint64_t a1, unint64_t a2, _QWORD *a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  _QWORD **v11;
  _QWORD *i;
  unint64_t v13;
  float v14;
  float v15;
  _BOOL8 v16;
  unint64_t v17;
  unint64_t v18;
  size_t v19;
  uint64_t v20;
  _QWORD *v21;
  unint64_t v22;

  v6 = 0x9DDFEA08EB382D69 * (((8 * a2) + 8) ^ HIDWORD(a2));
  v7 = 0x9DDFEA08EB382D69 * (HIDWORD(a2) ^ (v6 >> 47) ^ v6);
  v8 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
  v9 = *(_QWORD *)(a1 + 8);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      v3 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
      if (v8 >= v9)
        v3 = v8 % v9;
    }
    else
    {
      v3 = v8 & (v9 - 1);
    }
    v11 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v3);
    if (v11)
    {
      for (i = *v11; i; i = (_QWORD *)*i)
      {
        v13 = i[1];
        if (v13 == v8)
        {
          if (i[2] == a2)
            return i;
        }
        else
        {
          if (v10.u32[0] > 1uLL)
          {
            if (v13 >= v9)
              v13 %= v9;
          }
          else
          {
            v13 &= v9 - 1;
          }
          if (v13 != v3)
            break;
        }
      }
    }
  }
  i = operator new(0x20uLL);
  *i = 0;
  i[1] = v8;
  i[2] = *a3;
  i[3] = 0;
  v14 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v15 = *(float *)(a1 + 32);
  if (!v9 || (float)(v15 * (float)v9) < v14)
  {
    v16 = 1;
    if (v9 >= 3)
      v16 = (v9 & (v9 - 1)) != 0;
    v17 = v16 | (2 * v9);
    v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18)
      v19 = v18;
    else
      v19 = v17;
    std::__hash_table<std::__hash_value_type<mlcore::ModelProperty<std::string> *,std::string>,std::__unordered_map_hasher<mlcore::ModelProperty<std::string> *,std::__hash_value_type<mlcore::ModelProperty<std::string> *,std::string>,std::hash<mlcore::ModelProperty<std::string> *>,std::equal_to<mlcore::ModelProperty<std::string> *>,true>,std::__unordered_map_equal<mlcore::ModelProperty<std::string> *,std::__hash_value_type<mlcore::ModelProperty<std::string> *,std::string>,std::equal_to<mlcore::ModelProperty<std::string> *>,std::hash<mlcore::ModelProperty<std::string> *>,true>,std::allocator<std::__hash_value_type<mlcore::ModelProperty<std::string> *,std::string>>>::__rehash<true>(a1, v19);
    v9 = *(_QWORD *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9)
        v3 = v8 % v9;
      else
        v3 = v8;
    }
    else
    {
      v3 = (v9 - 1) & v8;
    }
  }
  v20 = *(_QWORD *)a1;
  v21 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v21)
  {
    *i = *v21;
LABEL_38:
    *v21 = i;
    goto LABEL_39;
  }
  *i = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = i;
  *(_QWORD *)(v20 + 8 * v3) = a1 + 16;
  if (*i)
  {
    v22 = *(_QWORD *)(*i + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v22 >= v9)
        v22 %= v9;
    }
    else
    {
      v22 &= v9 - 1;
    }
    v21 = (_QWORD *)(*(_QWORD *)a1 + 8 * v22);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return i;
}

void sub_20A66A154(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t mlcore::AggregateFunctionQuery::AggregateFunctionQuery(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t *a5, char a6)
{
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  __int128 v16;
  uint64_t v17[2];

  v10 = (std::__shared_weak_count *)a5[1];
  v17[0] = *a5;
  v17[1] = (uint64_t)v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
  }
  v16 = 0uLL;
  mlcore::RangeQuery::RangeQuery(a1, a2, v17, &v16);
  if (v10)
  {
    v13 = (unint64_t *)&v10->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  *(_QWORD *)a1 = &off_24C33A2D0;
  *(_DWORD *)(a1 + 48) = a3;
  *(_QWORD *)(a1 + 56) = a4;
  *(_BYTE *)(a1 + 64) = a6;
  return a1;
}

void mlcore::EntityCache::setPropertiesToFetchForEntityClass(uint64_t a1, uint64_t a2, mlcore::EntityClass *a3)
{
  char *v6;
  unint64_t *v7;
  char *v8;
  char *v9;
  _QWORD *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  std::__shared_weak_count *v22;
  mlcore::EntityClass *v23;

  v23 = a3;
  v6 = (char *)operator new(0xA0uLL);
  *((_QWORD *)v6 + 1) = 0;
  v7 = (unint64_t *)(v6 + 8);
  *((_QWORD *)v6 + 2) = 0;
  *(_QWORD *)v6 = &off_24C33D010;
  mlcore::EntityPropertiesQuery::EntityPropertiesQuery((mlcore::EntityPropertiesQuery *)(v6 + 24), a3);
  v21 = v6 + 24;
  v22 = (std::__shared_weak_count *)v6;
  v19 = 0;
  v20 = 0;
  v18 = 0;
  std::vector<mlcore::ModelPropertyBase *>::__init_with_size[abi:ne180100]<mlcore::ModelPropertyBase **,mlcore::ModelPropertyBase **>(&v18, *(const void **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3);
  v8 = v18;
  std::vector<mlcore::ModelPropertyBase *>::__assign_with_size[abi:ne180100]<mlcore::ModelPropertyBase **,mlcore::ModelPropertyBase **>(v6 + 104, v18, (uint64_t)v19, (v19 - v18) >> 3);
  if (v8)
  {
    v19 = v8;
    operator delete(v8);
  }
  v9 = (char *)(std::__hash_table<std::__hash_value_type<mlcore::EntityClass *,std::vector<mlcore::ModelPropertyBase *>>,std::__unordered_map_hasher<mlcore::EntityClass *,std::__hash_value_type<mlcore::EntityClass *,std::vector<mlcore::ModelPropertyBase *>>,std::hash<mlcore::EntityClass *>,std::equal_to<mlcore::EntityClass *>,true>,std::__unordered_map_equal<mlcore::EntityClass *,std::__hash_value_type<mlcore::EntityClass *,std::vector<mlcore::ModelPropertyBase *>>,std::equal_to<mlcore::EntityClass *>,std::hash<mlcore::EntityClass *>,true>,std::allocator<std::__hash_value_type<mlcore::EntityClass *,std::vector<mlcore::ModelPropertyBase *>>>>::__emplace_unique_key_args<mlcore::EntityClass *,std::piecewise_construct_t const&,std::tuple<mlcore::EntityClass * const&>,std::tuple<>>(a1 + 8, (unint64_t)a3, &v23)+ 3);
  if (v9 != (char *)a2)
    std::vector<mlcore::ModelPropertyBase *>::__assign_with_size[abi:ne180100]<mlcore::ModelPropertyBase **,mlcore::ModelPropertyBase **>(v9, *(char **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3);
  v10 = std::__hash_table<std::__hash_value_type<mlcore::EntityClass *,std::shared_ptr<mlcore::EntityPropertiesQuery>>,std::__unordered_map_hasher<mlcore::EntityClass *,std::__hash_value_type<mlcore::EntityClass *,std::shared_ptr<mlcore::EntityPropertiesQuery>>,std::hash<mlcore::EntityClass *>,std::equal_to<mlcore::EntityClass *>,true>,std::__unordered_map_equal<mlcore::EntityClass *,std::__hash_value_type<mlcore::EntityClass *,std::shared_ptr<mlcore::EntityPropertiesQuery>>,std::equal_to<mlcore::EntityClass *>,std::hash<mlcore::EntityClass *>,true>,std::allocator<std::__hash_value_type<mlcore::EntityClass *,std::shared_ptr<mlcore::EntityPropertiesQuery>>>>::__emplace_unique_key_args<mlcore::EntityClass *,std::piecewise_construct_t const&,std::tuple<mlcore::EntityClass * const&>,std::tuple<>>(a1 + 48, (unint64_t)a3, (uint64_t *)&v23);
  do
    v11 = __ldxr(v7);
  while (__stxr(v11 + 1, v7));
  v12 = (std::__shared_weak_count *)v10[4];
  v10[3] = v6 + 24;
  v10[4] = v6;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  v15 = v22;
  if (v22)
  {
    v16 = (unint64_t *)&v22->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
}

void sub_20A66A3B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
  void *v12;

  if (v12)
    operator delete(v12);
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)&a12);
  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<std::__hash_value_type<mlcore::EntityClass *,std::vector<mlcore::ModelPropertyBase *>>,std::__unordered_map_hasher<mlcore::EntityClass *,std::__hash_value_type<mlcore::EntityClass *,std::vector<mlcore::ModelPropertyBase *>>,std::hash<mlcore::EntityClass *>,std::equal_to<mlcore::EntityClass *>,true>,std::__unordered_map_equal<mlcore::EntityClass *,std::__hash_value_type<mlcore::EntityClass *,std::vector<mlcore::ModelPropertyBase *>>,std::equal_to<mlcore::EntityClass *>,std::hash<mlcore::EntityClass *>,true>,std::allocator<std::__hash_value_type<mlcore::EntityClass *,std::vector<mlcore::ModelPropertyBase *>>>>::__emplace_unique_key_args<mlcore::EntityClass *,std::piecewise_construct_t const&,std::tuple<mlcore::EntityClass * const&>,std::tuple<>>(uint64_t a1, unint64_t a2, _QWORD *a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  _QWORD **v11;
  _QWORD *i;
  unint64_t v13;
  float v14;
  float v15;
  _BOOL8 v16;
  unint64_t v17;
  unint64_t v18;
  size_t v19;
  uint64_t v20;
  _QWORD *v21;
  unint64_t v22;

  v6 = 0x9DDFEA08EB382D69 * (((8 * a2) + 8) ^ HIDWORD(a2));
  v7 = 0x9DDFEA08EB382D69 * (HIDWORD(a2) ^ (v6 >> 47) ^ v6);
  v8 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
  v9 = *(_QWORD *)(a1 + 8);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      v3 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
      if (v8 >= v9)
        v3 = v8 % v9;
    }
    else
    {
      v3 = v8 & (v9 - 1);
    }
    v11 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v3);
    if (v11)
    {
      for (i = *v11; i; i = (_QWORD *)*i)
      {
        v13 = i[1];
        if (v13 == v8)
        {
          if (i[2] == a2)
            return i;
        }
        else
        {
          if (v10.u32[0] > 1uLL)
          {
            if (v13 >= v9)
              v13 %= v9;
          }
          else
          {
            v13 &= v9 - 1;
          }
          if (v13 != v3)
            break;
        }
      }
    }
  }
  i = operator new(0x30uLL);
  *i = 0;
  i[1] = v8;
  i[2] = *a3;
  i[3] = 0;
  i[4] = 0;
  i[5] = 0;
  v14 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v15 = *(float *)(a1 + 32);
  if (!v9 || (float)(v15 * (float)v9) < v14)
  {
    v16 = 1;
    if (v9 >= 3)
      v16 = (v9 & (v9 - 1)) != 0;
    v17 = v16 | (2 * v9);
    v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18)
      v19 = v18;
    else
      v19 = v17;
    std::__hash_table<std::__hash_value_type<mlcore::ModelProperty<std::string> *,std::string>,std::__unordered_map_hasher<mlcore::ModelProperty<std::string> *,std::__hash_value_type<mlcore::ModelProperty<std::string> *,std::string>,std::hash<mlcore::ModelProperty<std::string> *>,std::equal_to<mlcore::ModelProperty<std::string> *>,true>,std::__unordered_map_equal<mlcore::ModelProperty<std::string> *,std::__hash_value_type<mlcore::ModelProperty<std::string> *,std::string>,std::equal_to<mlcore::ModelProperty<std::string> *>,std::hash<mlcore::ModelProperty<std::string> *>,true>,std::allocator<std::__hash_value_type<mlcore::ModelProperty<std::string> *,std::string>>>::__rehash<true>(a1, v19);
    v9 = *(_QWORD *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9)
        v3 = v8 % v9;
      else
        v3 = v8;
    }
    else
    {
      v3 = (v9 - 1) & v8;
    }
  }
  v20 = *(_QWORD *)a1;
  v21 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v21)
  {
    *i = *v21;
LABEL_38:
    *v21 = i;
    goto LABEL_39;
  }
  *i = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = i;
  *(_QWORD *)(v20 + 8 * v3) = a1 + 16;
  if (*i)
  {
    v22 = *(_QWORD *)(*i + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v22 >= v9)
        v22 %= v9;
    }
    else
    {
      v22 &= v9 - 1;
    }
    v21 = (_QWORD *)(*(_QWORD *)a1 + 8 * v22);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return i;
}

void sub_20A66A61C(_Unwind_Exception *a1)
{
  _QWORD *v1;

  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<mlcore::EntityClass *,std::vector<mlcore::ModelPropertyBase *>>,void *>>>::operator()[abi:ne180100](1, v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<std::__hash_value_type<mlcore::EntityClass *,std::shared_ptr<mlcore::EntityPropertiesQuery>>,std::__unordered_map_hasher<mlcore::EntityClass *,std::__hash_value_type<mlcore::EntityClass *,std::shared_ptr<mlcore::EntityPropertiesQuery>>,std::hash<mlcore::EntityClass *>,std::equal_to<mlcore::EntityClass *>,true>,std::__unordered_map_equal<mlcore::EntityClass *,std::__hash_value_type<mlcore::EntityClass *,std::shared_ptr<mlcore::EntityPropertiesQuery>>,std::equal_to<mlcore::EntityClass *>,std::hash<mlcore::EntityClass *>,true>,std::allocator<std::__hash_value_type<mlcore::EntityClass *,std::shared_ptr<mlcore::EntityPropertiesQuery>>>>::__emplace_unique_key_args<mlcore::EntityClass *,std::piecewise_construct_t const&,std::tuple<mlcore::EntityClass * const&>,std::tuple<>>(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  _QWORD **v11;
  _QWORD *i;
  unint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  float v17;
  float v18;
  _BOOL8 v19;
  unint64_t v20;
  unint64_t v21;
  int8x8_t prime;
  void *v23;
  void *v24;
  uint64_t v25;
  _QWORD *v26;
  unint64_t v27;
  uint8x8_t v28;
  unint64_t v29;
  uint8x8_t v30;
  uint64_t v31;
  _QWORD *v32;
  unint64_t v33;
  _QWORD *v34;
  unint64_t v35;
  void *v37;
  _QWORD v38[2];
  char v39;

  v6 = 0x9DDFEA08EB382D69 * (((8 * a2) + 8) ^ HIDWORD(a2));
  v7 = 0x9DDFEA08EB382D69 * (HIDWORD(a2) ^ (v6 >> 47) ^ v6);
  v8 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
  v9 = *(_QWORD *)(a1 + 8);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      v3 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
      if (v8 >= v9)
        v3 = v8 % v9;
    }
    else
    {
      v3 = v8 & (v9 - 1);
    }
    v11 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v3);
    if (v11)
    {
      for (i = *v11; i; i = (_QWORD *)*i)
      {
        v13 = i[1];
        if (v13 == v8)
        {
          if (i[2] == a2)
            return i;
        }
        else
        {
          if (v10.u32[0] > 1uLL)
          {
            if (v13 >= v9)
              v13 %= v9;
          }
          else
          {
            v13 &= v9 - 1;
          }
          if (v13 != v3)
            break;
        }
      }
    }
  }
  v14 = (_QWORD *)(a1 + 16);
  v15 = operator new(0x28uLL);
  v38[0] = v15;
  v38[1] = a1 + 16;
  *v15 = 0;
  v15[1] = v8;
  v16 = *a3;
  v15[3] = 0;
  v15[4] = 0;
  v15[2] = v16;
  v39 = 1;
  v17 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v18 = *(float *)(a1 + 32);
  if (!v9 || (float)(v18 * (float)v9) < v17)
  {
    v19 = 1;
    if (v9 >= 3)
      v19 = (v9 & (v9 - 1)) != 0;
    v20 = v19 | (2 * v9);
    v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21)
      prime = (int8x8_t)v21;
    else
      prime = (int8x8_t)v20;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
      v9 = *(_QWORD *)(a1 + 8);
    }
    if (*(_QWORD *)&prime > v9)
      goto LABEL_30;
    if (*(_QWORD *)&prime < v9)
    {
      v29 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v9 < 3 || (v30 = (uint8x8_t)vcnt_s8((int8x8_t)v9), v30.i16[0] = vaddlv_u8(v30), v30.u32[0] > 1uLL))
      {
        v29 = std::__next_prime(v29);
      }
      else
      {
        v31 = 1 << -(char)__clz(v29 - 1);
        if (v29 >= 2)
          v29 = v31;
      }
      if (*(_QWORD *)&prime <= v29)
        prime = (int8x8_t)v29;
      if (*(_QWORD *)&prime >= v9)
      {
        v9 = *(_QWORD *)(a1 + 8);
      }
      else
      {
        if (prime)
        {
LABEL_30:
          if (*(_QWORD *)&prime >> 61)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v23 = operator new(8 * *(_QWORD *)&prime);
          v24 = *(void **)a1;
          *(_QWORD *)a1 = v23;
          if (v24)
            operator delete(v24);
          v25 = 0;
          *(int8x8_t *)(a1 + 8) = prime;
          do
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v25++) = 0;
          while (*(_QWORD *)&prime != v25);
          v26 = (_QWORD *)*v14;
          if (*v14)
          {
            v27 = v26[1];
            v28 = (uint8x8_t)vcnt_s8(prime);
            v28.i16[0] = vaddlv_u8(v28);
            if (v28.u32[0] > 1uLL)
            {
              if (v27 >= *(_QWORD *)&prime)
                v27 %= *(_QWORD *)&prime;
            }
            else
            {
              v27 &= *(_QWORD *)&prime - 1;
            }
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v27) = v14;
            v32 = (_QWORD *)*v26;
            if (*v26)
            {
              do
              {
                v33 = v32[1];
                if (v28.u32[0] > 1uLL)
                {
                  if (v33 >= *(_QWORD *)&prime)
                    v33 %= *(_QWORD *)&prime;
                }
                else
                {
                  v33 &= *(_QWORD *)&prime - 1;
                }
                if (v33 != v27)
                {
                  if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v33))
                  {
                    *(_QWORD *)(*(_QWORD *)a1 + 8 * v33) = v26;
                    goto LABEL_55;
                  }
                  *v26 = *v32;
                  *v32 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v33);
                  **(_QWORD **)(*(_QWORD *)a1 + 8 * v33) = v32;
                  v32 = v26;
                }
                v33 = v27;
LABEL_55:
                v26 = v32;
                v32 = (_QWORD *)*v32;
                v27 = v33;
              }
              while (v32);
            }
          }
          v9 = (unint64_t)prime;
          goto LABEL_59;
        }
        v37 = *(void **)a1;
        *(_QWORD *)a1 = 0;
        if (v37)
          operator delete(v37);
        v9 = 0;
        *(_QWORD *)(a1 + 8) = 0;
      }
    }
LABEL_59:
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9)
        v3 = v8 % v9;
      else
        v3 = v8;
    }
    else
    {
      v3 = (v9 - 1) & v8;
    }
  }
  v34 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  i = (_QWORD *)v38[0];
  if (v34)
  {
    *(_QWORD *)v38[0] = *v34;
LABEL_72:
    *v34 = i;
    goto LABEL_73;
  }
  *(_QWORD *)v38[0] = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = i;
  *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = v14;
  if (*i)
  {
    v35 = *(_QWORD *)(*i + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v35 >= v9)
        v35 %= v9;
    }
    else
    {
      v35 &= v9 - 1;
    }
    v34 = (_QWORD *)(*(_QWORD *)a1 + 8 * v35);
    goto LABEL_72;
  }
LABEL_73:
  v38[0] = 0;
  ++*(_QWORD *)(a1 + 24);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<mlcore::LocalizedSearchScope *,std::shared_ptr<mlcore::EntityQueryResult>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<mlcore::LocalizedSearchScope *,std::shared_ptr<mlcore::EntityQueryResult>>,void *>>>>::reset[abi:ne180100]((uint64_t)v38);
  return i;
}

void sub_20A66AA68(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<mlcore::LocalizedSearchScope *,std::shared_ptr<mlcore::EntityQueryResult>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<mlcore::LocalizedSearchScope *,std::shared_ptr<mlcore::EntityQueryResult>>,void *>>>>::reset[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

mlcore::EntityPropertiesQuery *mlcore::EntityPropertiesQuery::EntityPropertiesQuery(mlcore::EntityPropertiesQuery *this, mlcore::EntityClass *a2)
{
  uint64_t v4;
  char *v5;
  uint64_t v7[2];

  v7[0] = 0;
  v7[1] = 0;
  mlcore::PropertiesQuery::PropertiesQuery((uint64_t)this, (uint64_t)a2, v7);
  *(_QWORD *)this = &off_24C33A218;
  *((_QWORD *)this + 13) = 0;
  *((_QWORD *)this + 14) = 0;
  v4 = (*(uint64_t (**)(mlcore::EntityClass *))(*(_QWORD *)a2 + 112))(a2);
  v5 = (char *)operator new(0x48uLL);
  *(_OWORD *)(v5 + 8) = 0u;
  *(_QWORD *)v5 = &off_24C33CE88;
  *((_QWORD *)v5 + 4) = v4;
  *((_QWORD *)v5 + 5) = 0;
  *((_QWORD *)v5 + 3) = &unk_24C339CA8;
  *((_QWORD *)v5 + 6) = 0;
  *(_OWORD *)(v5 + 56) = 0u;
  *((_QWORD *)this + 15) = v5 + 24;
  *((_QWORD *)this + 16) = v5;
  return this;
}

void sub_20A66AB28(_Unwind_Exception *a1)
{
  mlcore::PropertiesQuery *v1;
  uint64_t v2;

  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100](v2);
  mlcore::PropertiesQuery::~PropertiesQuery(v1);
  _Unwind_Resume(a1);
}

uint64_t mlcore::PropertiesQuery::PropertiesQuery(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  __int128 v10;
  uint64_t v11[2];

  v4 = (std::__shared_weak_count *)a3[1];
  v11[0] = *a3;
  v11[1] = (uint64_t)v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  v10 = 0uLL;
  mlcore::RangeQuery::RangeQuery(a1, a2, v11, &v10);
  if (v4)
  {
    v7 = (unint64_t *)&v4->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  *(_QWORD *)a1 = &off_24C3380B8;
  *(_BYTE *)(a1 + 48) = 0;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  return a1;
}

uint64_t mlcore::RangeQuery::RangeQuery(uint64_t a1, uint64_t a2, uint64_t *a3, _OWORD *a4)
{
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;

  v6 = *a3;
  v7 = (std::__shared_weak_count *)a3[1];
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
    *(_QWORD *)a1 = &off_24C33A798;
    *(_QWORD *)(a1 + 8) = a2;
    *(_QWORD *)(a1 + 16) = v6;
    *(_QWORD *)(a1 + 24) = v7;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  else
  {
    *(_QWORD *)(a1 + 8) = a2;
    *(_QWORD *)(a1 + 16) = v6;
    *(_QWORD *)(a1 + 24) = 0;
  }
  *(_QWORD *)a1 = &off_24C336600;
  *(_OWORD *)(a1 + 32) = *a4;
  return a1;
}

double mlcore::PropertyCacheBase<double,std::string,mediaplatform::Data>::valueForProperty(uint64_t a1, unint64_t a2)
{
  double *v3;
  std::logic_error *exception;
  std::string v6;

  v3 = (double *)std::__hash_table<std::__hash_value_type<mlcore::ModelProperty<double> *,double>,std::__unordered_map_hasher<mlcore::ModelProperty<double> *,std::__hash_value_type<mlcore::ModelProperty<double> *,double>,std::hash<mlcore::ModelProperty<double> *>,std::equal_to<mlcore::ModelProperty<double> *>,true>,std::__unordered_map_equal<mlcore::ModelProperty<double> *,std::__hash_value_type<mlcore::ModelProperty<double> *,double>,std::equal_to<mlcore::ModelProperty<double> *>,std::hash<mlcore::ModelProperty<double> *>,true>,std::allocator<std::__hash_value_type<mlcore::ModelProperty<double> *,double>>>::find<mlcore::ModelProperty<double> *>((_QWORD *)(a1 + 88), a2);
  if (!v3)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    (*(void (**)(std::string *__return_ptr, unint64_t))(*(_QWORD *)a2 + 40))(&v6, a2);
    std::logic_error::logic_error(exception, &v6);
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8C0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24C32FBC0, MEMORY[0x24BEDAB00]);
  }
  return v3[3];
}

void sub_20A66AD60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  int v16;

  if (a15 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  goto LABEL_6;
}

uint64_t mlcore::EntityQueryResult::entityClassAtIndex(mlcore::EntityQueryResult *this)
{
  return *((_QWORD *)this + 22);
}

double mlcore::TypedEntityClass<mlcore::Item>::create@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, _OWORD *a4@<X8>)
{
  double v8;
  unint64_t *v9;
  uint64_t v10;
  double result;
  double v12[3];
  unint64_t v13[3];
  unint64_t *v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  std::allocate_shared[abi:ne180100]<mlcore::Item,std::allocator<mlcore::Item>,long long &,void>(v12, a2);
  v8 = v12[0];
  v13[0] = (unint64_t)&off_24C33B140;
  v14 = v13;
  mlcore::PropertyCache::mergePropertiesFromCache(*(_QWORD *)&v12[0] + 8, a3, (uint64_t)v13);
  v9 = v14;
  if (v14 == v13)
  {
    v10 = 4;
    v9 = v13;
    goto LABEL_5;
  }
  if (v14)
  {
    v10 = 5;
LABEL_5:
    (*(void (**)(void))(*v9 + 8 * v10))();
  }
  v13[0] = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 112))(a1);
  std::__hash_table<std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>,std::__unordered_map_hasher<mlcore::ModelProperty<long long> *,std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>,std::hash<mlcore::ModelProperty<long long> *>,std::equal_to<mlcore::ModelProperty<long long> *>,true>,std::__unordered_map_equal<mlcore::ModelProperty<long long> *,std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>,std::equal_to<mlcore::ModelProperty<long long> *>,std::hash<mlcore::ModelProperty<long long> *>,true>,std::allocator<std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>>>::__emplace_unique_key_args<mlcore::ModelProperty<long long> *,std::piecewise_construct_t const&,std::tuple<mlcore::ModelProperty<long long> * const&>,std::tuple<>>(*(_QWORD *)&v8 + 176, v13[0], v13)[3] = a2;
  result = v12[0];
  *a4 = *(_OWORD *)v12;
  return result;
}

void sub_20A66AEA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15)
{
  char *v15;
  char *v17;
  uint64_t v18;

  v17 = a15;
  if (a15 == v15)
  {
    v18 = 4;
    v17 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v18 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v17 + 8 * v18))();
LABEL_6:
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

double mlcore::Item::Item(mlcore::Item *this, uint64_t a2)
{
  double result;

  result = 0.0;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_DWORD *)this + 12) = 1065353216;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *((_DWORD *)this + 22) = 1065353216;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_DWORD *)this + 32) = 1065353216;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 152) = 0u;
  *((_DWORD *)this + 42) = 1065353216;
  *((_OWORD *)this + 11) = 0u;
  *((_OWORD *)this + 12) = 0u;
  *((_DWORD *)this + 52) = 1065353216;
  *((_QWORD *)this + 27) = &unk_24C3371E8;
  *((_QWORD *)this + 28) = a2;
  *(_QWORD *)this = &off_24C33A658;
  *((_QWORD *)this + 1) = &off_24C3371C0;
  return result;
}

{
  double result;

  result = 0.0;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_DWORD *)this + 12) = 1065353216;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *((_DWORD *)this + 22) = 1065353216;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_DWORD *)this + 32) = 1065353216;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 152) = 0u;
  *((_DWORD *)this + 42) = 1065353216;
  *((_OWORD *)this + 11) = 0u;
  *((_OWORD *)this + 12) = 0u;
  *((_DWORD *)this + 52) = 1065353216;
  *((_QWORD *)this + 27) = &unk_24C3371E8;
  *((_QWORD *)this + 28) = a2;
  *(_QWORD *)this = &off_24C33A658;
  *((_QWORD *)this + 1) = &off_24C3371C0;
  return result;
}

void mediaplatform::Cache<std::pair<mlcore::EntityClass *,long long>,std::shared_ptr<mlcore::Entity>,mlcore::EntityCache::hash,std::equal_to<std::pair<mlcore::EntityClass *,long long>>>::setValueForKey(uint64_t a1, unint64_t *a2, __int128 *a3)
{
  unint64_t v3;
  void **v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint8x8_t v26;
  _QWORD **v27;
  _QWORD *v28;
  unint64_t v29;
  _QWORD *v31;
  _QWORD *v32;
  float v33;
  float v34;
  _BOOL8 v35;
  unint64_t v36;
  unint64_t v37;
  int8x8_t prime;
  void *v39;
  void *v40;
  uint64_t v41;
  _QWORD *v42;
  unint64_t v43;
  uint8x8_t v44;
  unint64_t v45;
  uint8x8_t v46;
  uint64_t v47;
  _QWORD *v48;
  unint64_t v49;
  _QWORD *v50;
  unint64_t v51;
  unint64_t *v52;
  unint64_t v53;
  unint64_t *v54;
  unint64_t v55;
  void *v56;
  std::runtime_error *exception;
  std::__shared_weak_count *v58;
  __int128 v59;
  __int128 v60;
  _QWORD v61[2];
  char v62;

  v7 = (void **)(a1 + 24);
  v8 = std::__hash_table<std::__hash_value_type<std::pair<mlcore::EntityClass *,long long>,mediaplatform::Cache<std::pair<mlcore::EntityClass *,long long>,std::shared_ptr<mlcore::Entity>,mlcore::EntityCache::hash,std::equal_to<std::pair<mlcore::EntityClass *,long long>>>::Entry>,std::__unordered_map_hasher<std::pair<mlcore::EntityClass *,long long>,std::__hash_value_type<std::pair<mlcore::EntityClass *,long long>,mediaplatform::Cache<std::pair<mlcore::EntityClass *,long long>,std::shared_ptr<mlcore::Entity>,mlcore::EntityCache::hash,std::equal_to<std::pair<mlcore::EntityClass *,long long>>>::Entry>,mlcore::EntityCache::hash,std::equal_to<std::pair<mlcore::EntityClass *,long long>>,true>,std::__unordered_map_equal<std::pair<mlcore::EntityClass *,long long>,std::__hash_value_type<std::pair<mlcore::EntityClass *,long long>,mediaplatform::Cache<std::pair<mlcore::EntityClass *,long long>,std::shared_ptr<mlcore::Entity>,mlcore::EntityCache::hash,std::equal_to<std::pair<mlcore::EntityClass *,long long>>>::Entry>,std::equal_to<std::pair<mlcore::EntityClass *,long long>>,mlcore::EntityCache::hash,true>,std::allocator<std::__hash_value_type<std::pair<mlcore::EntityClass *,long long>,mediaplatform::Cache<std::pair<mlcore::EntityClass *,long long>,std::shared_ptr<mlcore::Entity>,mlcore::EntityCache::hash,std::equal_to<std::pair<mlcore::EntityClass *,long long>>>::Entry>>>::find<std::pair<mlcore::EntityClass *,long long>>((_QWORD *)(a1 + 24), *(_QWORD *)a3, *((_QWORD *)a3 + 1));
  if (v8)
    mediaplatform::Cache<std::pair<mlcore::EntityClass *,long long>,std::shared_ptr<mlcore::Entity>,mlcore::EntityCache::hash,std::equal_to<std::pair<mlcore::EntityClass *,long long>>>::_removeEntry((_QWORD *)a1, v8);
  if (*(_QWORD *)(a1 + 16) > *(_QWORD *)(a1 + 8))
  {
    v9 = a1 + 64;
    v10 = a1 + 72;
    do
    {
      do
      {
        v11 = *(_QWORD *)v10;
        v12 = *(_QWORD *)(*(_QWORD *)v10 + 24);
        v10 = *(_QWORD *)v10 + 8;
      }
      while (v11 != v9 && v12 == 0);
      if (v11 == v9)
      {
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(exception, "no room in cache");
        __cxa_throw(exception, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
      }
      mediaplatform::Cache<std::pair<mlcore::EntityClass *,long long>,std::shared_ptr<mlcore::Entity>,mlcore::EntityCache::hash,std::equal_to<std::pair<mlcore::EntityClass *,long long>>>::_removeEntry((_QWORD *)a1, *(_QWORD **)(v11 + 16));
      v10 = a1 + 72;
    }
    while (*(_QWORD *)(a1 + 16) > *(_QWORD *)(a1 + 8));
  }
  if ((unint64_t)(*(_QWORD *)(a1 + 48) + 1) > *(_QWORD *)a1)
    mediaplatform::Cache<std::pair<mlcore::EntityClass *,long long>,std::shared_ptr<mlcore::Entity>,mlcore::EntityCache::hash,std::equal_to<std::pair<mlcore::EntityClass *,long long>>>::_removeEntry((_QWORD *)a1, *(_QWORD **)(*(_QWORD *)(a1 + 72) + 16));
  v14 = operator new(0x20uLL);
  v14[2] = 0;
  v15 = v14 + 2;
  v16 = *(_QWORD *)(a1 + 64);
  v14[3] = 0;
  *(_QWORD *)(v16 + 8) = v14;
  *(_QWORD *)(a1 + 64) = v14;
  *v14 = v16;
  v14[1] = a1 + 64;
  ++*(_QWORD *)(a1 + 80);
  v17 = *a2;
  v18 = (std::__shared_weak_count *)a2[1];
  v58 = v18;
  if (v18)
  {
    p_shared_owners = (unint64_t *)&v18->__shared_owners_;
    do
      v20 = __ldxr(p_shared_owners);
    while (__stxr(v20 + 1, p_shared_owners));
    v59 = *a3;
    *(_QWORD *)&v60 = v17;
    *((_QWORD *)&v60 + 1) = v18;
    do
      v21 = __ldxr(p_shared_owners);
    while (__stxr(v21 + 1, p_shared_owners));
  }
  else
  {
    v59 = *a3;
    v60 = v17;
  }
  v22 = 0x9DDFEA08EB382D69 * (((8 * v59) + 8) ^ DWORD1(v59));
  v23 = 0x9DDFEA08EB382D69 * (DWORD1(v59) ^ (v22 >> 47) ^ v22);
  v24 = (0x9DDFEA08EB382D69 * (v23 ^ (v23 >> 47))) ^ *((_QWORD *)&v59 + 1);
  v25 = *(_QWORD *)(a1 + 32);
  if (!v25)
    goto LABEL_41;
  v26 = (uint8x8_t)vcnt_s8((int8x8_t)v25);
  v26.i16[0] = vaddlv_u8(v26);
  if (v26.u32[0] > 1uLL)
  {
    v3 = (0x9DDFEA08EB382D69 * (v23 ^ (v23 >> 47))) ^ *((_QWORD *)&v59 + 1);
    if (v24 >= v25)
      v3 = v24 % v25;
  }
  else
  {
    v3 = v24 & (v25 - 1);
  }
  v27 = (_QWORD **)*((_QWORD *)*v7 + v3);
  if (!v27 || (v28 = *v27) == 0)
  {
LABEL_41:
    v31 = operator new(0x38uLL);
    v32 = (_QWORD *)(a1 + 40);
    v61[0] = v31;
    v61[1] = a1 + 40;
    *v31 = 0;
    v31[1] = v24;
    *((_OWORD *)v31 + 1) = v59;
    *((_OWORD *)v31 + 2) = v60;
    v31[6] = v14;
    v62 = 1;
    v33 = (float)(unint64_t)(*(_QWORD *)(a1 + 48) + 1);
    v34 = *(float *)(a1 + 56);
    if (v25 && (float)(v34 * (float)v25) >= v33)
    {
LABEL_87:
      v50 = (_QWORD *)*((_QWORD *)*v7 + v3);
      v28 = (_QWORD *)v61[0];
      if (v50)
      {
        *(_QWORD *)v61[0] = *v50;
      }
      else
      {
        *(_QWORD *)v61[0] = *v32;
        *v32 = v28;
        *((_QWORD *)*v7 + v3) = v32;
        if (!*v28)
        {
LABEL_96:
          v61[0] = 0;
          ++*(_QWORD *)(a1 + 48);
          std::unique_ptr<std::__tree_node<std::shared_ptr<mediaplatform::DatabaseConnection>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::shared_ptr<mediaplatform::DatabaseConnection>,void *>>>>::reset[abi:ne180100]((uint64_t)v61);
          goto LABEL_97;
        }
        v51 = *(_QWORD *)(*v28 + 8);
        if ((v25 & (v25 - 1)) != 0)
        {
          if (v51 >= v25)
            v51 %= v25;
        }
        else
        {
          v51 &= v25 - 1;
        }
        v50 = (char *)*v7 + 8 * v51;
      }
      *v50 = v28;
      goto LABEL_96;
    }
    v35 = 1;
    if (v25 >= 3)
      v35 = (v25 & (v25 - 1)) != 0;
    v36 = v35 | (2 * v25);
    v37 = vcvtps_u32_f32(v33 / v34);
    if (v36 <= v37)
      prime = (int8x8_t)v37;
    else
      prime = (int8x8_t)v36;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
      v25 = *(_QWORD *)(a1 + 32);
    }
    if (*(_QWORD *)&prime > v25)
      goto LABEL_53;
    if (*(_QWORD *)&prime < v25)
    {
      v45 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 48) / *(float *)(a1 + 56));
      if (v25 < 3 || (v46 = (uint8x8_t)vcnt_s8((int8x8_t)v25), v46.i16[0] = vaddlv_u8(v46), v46.u32[0] > 1uLL))
      {
        v45 = std::__next_prime(v45);
      }
      else
      {
        v47 = 1 << -(char)__clz(v45 - 1);
        if (v45 >= 2)
          v45 = v47;
      }
      if (*(_QWORD *)&prime <= v45)
        prime = (int8x8_t)v45;
      if (*(_QWORD *)&prime >= v25)
      {
        v25 = *(_QWORD *)(a1 + 32);
      }
      else
      {
        if (prime)
        {
LABEL_53:
          if (*(_QWORD *)&prime >> 61)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v39 = operator new(8 * *(_QWORD *)&prime);
          v40 = *v7;
          *v7 = v39;
          if (v40)
            operator delete(v40);
          v41 = 0;
          *(int8x8_t *)(a1 + 32) = prime;
          do
            *((_QWORD *)*v7 + v41++) = 0;
          while (*(_QWORD *)&prime != v41);
          v42 = (_QWORD *)*v32;
          if (*v32)
          {
            v43 = v42[1];
            v44 = (uint8x8_t)vcnt_s8(prime);
            v44.i16[0] = vaddlv_u8(v44);
            if (v44.u32[0] > 1uLL)
            {
              if (v43 >= *(_QWORD *)&prime)
                v43 %= *(_QWORD *)&prime;
            }
            else
            {
              v43 &= *(_QWORD *)&prime - 1;
            }
            *((_QWORD *)*v7 + v43) = v32;
            v48 = (_QWORD *)*v42;
            if (*v42)
            {
              do
              {
                v49 = v48[1];
                if (v44.u32[0] > 1uLL)
                {
                  if (v49 >= *(_QWORD *)&prime)
                    v49 %= *(_QWORD *)&prime;
                }
                else
                {
                  v49 &= *(_QWORD *)&prime - 1;
                }
                if (v49 != v43)
                {
                  if (!*((_QWORD *)*v7 + v49))
                  {
                    *((_QWORD *)*v7 + v49) = v42;
                    goto LABEL_78;
                  }
                  *v42 = *v48;
                  *v48 = **((_QWORD **)*v7 + v49);
                  **((_QWORD **)*v7 + v49) = v48;
                  v48 = v42;
                }
                v49 = v43;
LABEL_78:
                v42 = v48;
                v48 = (_QWORD *)*v48;
                v43 = v49;
              }
              while (v48);
            }
          }
          v25 = (unint64_t)prime;
          goto LABEL_82;
        }
        v56 = *v7;
        *v7 = 0;
        if (v56)
          operator delete(v56);
        v25 = 0;
        *(_QWORD *)(a1 + 32) = 0;
      }
    }
LABEL_82:
    if ((v25 & (v25 - 1)) != 0)
    {
      if (v24 >= v25)
        v3 = v24 % v25;
      else
        v3 = v24;
    }
    else
    {
      v3 = (v25 - 1) & v24;
    }
    goto LABEL_87;
  }
  while (1)
  {
    v29 = v28[1];
    if (v29 == v24)
      break;
    if (v26.u32[0] > 1uLL)
    {
      if (v29 >= v25)
        v29 %= v25;
    }
    else
    {
      v29 &= v25 - 1;
    }
    if (v29 != v3)
      goto LABEL_41;
LABEL_40:
    v28 = (_QWORD *)*v28;
    if (!v28)
      goto LABEL_41;
  }
  if (v28[2] != (_QWORD)v59 || v28[3] != *((_QWORD *)&v59 + 1))
    goto LABEL_40;
  if (v18)
  {
    v54 = (unint64_t *)&v18->__shared_owners_;
    do
      v55 = __ldaxr(v54);
    while (__stlxr(v55 - 1, v54));
    if (!v55)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
LABEL_97:
  if (v58)
  {
    v52 = (unint64_t *)&v58->__shared_owners_;
    do
      v53 = __ldaxr(v52);
    while (__stlxr(v53 - 1, v52));
    if (!v53)
    {
      ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
      std::__shared_weak_count::__release_weak(v58);
    }
  }
  *v15 = v28;
}

void sub_20A66B574(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  std::unique_ptr<std::__tree_node<std::shared_ptr<mediaplatform::DatabaseConnection>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::shared_ptr<mediaplatform::DatabaseConnection>,void *>>>>::reset[abi:ne180100]((uint64_t)va1);
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100](v2);
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void mediaplatform::Cache<std::pair<mlcore::EntityClass *,long long>,std::shared_ptr<mlcore::Entity>,mlcore::EntityCache::hash,std::equal_to<std::pair<mlcore::EntityClass *,long long>>>::valueForKey(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  _QWORD *v6;
  _QWORD *v7;
  _OWORD *v8;
  _OWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  char v16;

  v6 = std::__hash_table<std::__hash_value_type<std::pair<mlcore::EntityClass *,long long>,mediaplatform::Cache<std::pair<mlcore::EntityClass *,long long>,std::shared_ptr<mlcore::Entity>,mlcore::EntityCache::hash,std::equal_to<std::pair<mlcore::EntityClass *,long long>>>::Entry>,std::__unordered_map_hasher<std::pair<mlcore::EntityClass *,long long>,std::__hash_value_type<std::pair<mlcore::EntityClass *,long long>,mediaplatform::Cache<std::pair<mlcore::EntityClass *,long long>,std::shared_ptr<mlcore::Entity>,mlcore::EntityCache::hash,std::equal_to<std::pair<mlcore::EntityClass *,long long>>>::Entry>,mlcore::EntityCache::hash,std::equal_to<std::pair<mlcore::EntityClass *,long long>>,true>,std::__unordered_map_equal<std::pair<mlcore::EntityClass *,long long>,std::__hash_value_type<std::pair<mlcore::EntityClass *,long long>,mediaplatform::Cache<std::pair<mlcore::EntityClass *,long long>,std::shared_ptr<mlcore::Entity>,mlcore::EntityCache::hash,std::equal_to<std::pair<mlcore::EntityClass *,long long>>>::Entry>,std::equal_to<std::pair<mlcore::EntityClass *,long long>>,mlcore::EntityCache::hash,true>,std::allocator<std::__hash_value_type<std::pair<mlcore::EntityClass *,long long>,mediaplatform::Cache<std::pair<mlcore::EntityClass *,long long>,std::shared_ptr<mlcore::Entity>,mlcore::EntityCache::hash,std::equal_to<std::pair<mlcore::EntityClass *,long long>>>::Entry>>>::find<std::pair<mlcore::EntityClass *,long long>>((_QWORD *)(a2 + 24), a3, a4);
  if (v6)
  {
    v7 = v6;
    v8 = (_OWORD *)v6[6];
    v9 = operator new(0x20uLL);
    v9[1] = v8[1];
    v11 = *(_QWORD *)(a2 + 64);
    v10 = (_QWORD *)(a2 + 64);
    *(_QWORD *)(v11 + 8) = v9;
    *v10 = v9;
    *(_QWORD *)v9 = v11;
    *((_QWORD *)v9 + 1) = v10;
    v12 = *(_QWORD *)v8;
    *(_QWORD *)(v12 + 8) = *((_QWORD *)v8 + 1);
    **((_QWORD **)v8 + 1) = v12;
    operator delete(v8);
    v7[6] = v9;
    v13 = v7[5];
    *(_QWORD *)a1 = v7[4];
    *(_QWORD *)(a1 + 8) = v13;
    if (v13)
    {
      v14 = (unint64_t *)(v13 + 8);
      do
        v15 = __ldxr(v14);
      while (__stxr(v15 + 1, v14));
    }
    v16 = 1;
  }
  else
  {
    v16 = 0;
    *(_BYTE *)a1 = 0;
  }
  *(_BYTE *)(a1 + 16) = v16;
}

_QWORD *std::__hash_table<std::__hash_value_type<std::pair<mlcore::EntityClass *,long long>,mediaplatform::Cache<std::pair<mlcore::EntityClass *,long long>,std::shared_ptr<mlcore::Entity>,mlcore::EntityCache::hash,std::equal_to<std::pair<mlcore::EntityClass *,long long>>>::Entry>,std::__unordered_map_hasher<std::pair<mlcore::EntityClass *,long long>,std::__hash_value_type<std::pair<mlcore::EntityClass *,long long>,mediaplatform::Cache<std::pair<mlcore::EntityClass *,long long>,std::shared_ptr<mlcore::Entity>,mlcore::EntityCache::hash,std::equal_to<std::pair<mlcore::EntityClass *,long long>>>::Entry>,mlcore::EntityCache::hash,std::equal_to<std::pair<mlcore::EntityClass *,long long>>,true>,std::__unordered_map_equal<std::pair<mlcore::EntityClass *,long long>,std::__hash_value_type<std::pair<mlcore::EntityClass *,long long>,mediaplatform::Cache<std::pair<mlcore::EntityClass *,long long>,std::shared_ptr<mlcore::Entity>,mlcore::EntityCache::hash,std::equal_to<std::pair<mlcore::EntityClass *,long long>>>::Entry>,std::equal_to<std::pair<mlcore::EntityClass *,long long>>,mlcore::EntityCache::hash,true>,std::allocator<std::__hash_value_type<std::pair<mlcore::EntityClass *,long long>,mediaplatform::Cache<std::pair<mlcore::EntityClass *,long long>,std::shared_ptr<mlcore::Entity>,mlcore::EntityCache::hash,std::equal_to<std::pair<mlcore::EntityClass *,long long>>>::Entry>>>::find<std::pair<mlcore::EntityClass *,long long>>(_QWORD *a1, unint64_t a2, uint64_t a3)
{
  int8x8_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint8x8_t v7;
  unint64_t v8;
  _QWORD *v9;
  _QWORD *result;
  unint64_t v11;

  v3 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v3)
    return 0;
  v4 = 0x9DDFEA08EB382D69 * (((8 * a2) + 8) ^ HIDWORD(a2));
  v5 = 0x9DDFEA08EB382D69 * (HIDWORD(a2) ^ (v4 >> 47) ^ v4);
  v6 = (0x9DDFEA08EB382D69 * (v5 ^ (v5 >> 47))) ^ a3;
  v7 = (uint8x8_t)vcnt_s8(v3);
  v7.i16[0] = vaddlv_u8(v7);
  if (v7.u32[0] > 1uLL)
  {
    v8 = v6;
    if (v6 >= *(_QWORD *)&v3)
      v8 = v6 % *(_QWORD *)&v3;
  }
  else
  {
    v8 = v6 & (*(_QWORD *)&v3 - 1);
  }
  v9 = *(_QWORD **)(*a1 + 8 * v8);
  if (!v9)
    return 0;
  result = (_QWORD *)*v9;
  if (*v9)
  {
    do
    {
      v11 = result[1];
      if (v11 == v6)
      {
        if (result[2] == a2 && result[3] == a3)
          return result;
      }
      else
      {
        if (v7.u32[0] > 1uLL)
        {
          if (v11 >= *(_QWORD *)&v3)
            v11 %= *(_QWORD *)&v3;
        }
        else
        {
          v11 &= *(_QWORD *)&v3 - 1;
        }
        if (v11 != v8)
          return 0;
      }
      result = (_QWORD *)*result;
    }
    while (result);
  }
  return result;
}

void mlcore::EntityQuery::~EntityQuery(mlcore::EntityQuery *this)
{
  void *v2;

  *(_QWORD *)this = &off_24C3367A0;
  v2 = (void *)*((_QWORD *)this + 13);
  if (v2)
  {
    *((_QWORD *)this + 14) = v2;
    operator delete(v2);
  }
  mlcore::PropertiesQuery::~PropertiesQuery(this);
}

{
  mlcore::EntityQuery::~EntityQuery(this);
  JUMPOUT(0x20BD27AFCLL);
}

uint64_t std::__shared_ptr_emplace<mediaplatform::SQLFunctionExpression>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t std::__shared_ptr_emplace<mediaplatform::SQLExistsExpression>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(uint64_t a1)
{
  *(_QWORD *)a1 = &off_24C335AB8;
  if (*(char *)(a1 + 63) < 0)
    operator delete(*(void **)(a1 + 40));
  *(_QWORD *)a1 = off_24C335D90;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

uint64_t std::__function::__func<mlcore::LocalLibrary::LocalLibrary(mediaplatform::ContentBundle const&,mediaplatform::FilePath const&,mlcore::LanguageResources const&)::$_0,std::allocator<mlcore::LocalLibrary::LocalLibrary(mediaplatform::ContentBundle const&,mediaplatform::FilePath const&,mlcore::LanguageResources const&)::$_0>,void ()(mediaplatform::DatabaseConnection &)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24C33B0E8;
  a2[1] = v2;
  return result;
}

uint64_t mediaplatform::SQLLiteralValue<unsigned long>::~SQLLiteralValue(uint64_t a1)
{
  *(_QWORD *)a1 = off_24C335BD8;
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
  return a1;
}

uint64_t mlcore::Query::predicate@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(this + 24);
  *a2 = *(_QWORD *)(this + 16);
  a2[1] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return this;
}

uint64_t mlcore::TypedEntityClass<mlcore::Composer>::entityType()
{
  return 5;
}

uint64_t mlcore::TypedEntityClass<mlcore::Artist>::entityType()
{
  return 7;
}

uint64_t mlcore::TypedEntityClass<mlcore::Genre>::entityType()
{
  return 3;
}

uint64_t mlcore::SortDescriptor::property(mlcore::SortDescriptor *this)
{
  return *((_QWORD *)this + 1);
}

uint64_t std::__function::__func<std::shared_ptr<mediaplatform::DatabaseConnection> (*)(mediaplatform::FilePath const&,BOOL),std::allocator<std::shared_ptr<mediaplatform::DatabaseConnection> (*)(mediaplatform::FilePath const&,BOOL)>,std::shared_ptr<mediaplatform::DatabaseConnection> ()(mediaplatform::FilePath const&,BOOL)>::operator()(uint64_t a1, uint64_t a2, unsigned __int8 *a3)
{
  return (*(uint64_t (**)(uint64_t, _QWORD))(a1 + 8))(a2, *a3);
}

_QWORD *mlcore::ForeignProperty<int>::insertIntoCacheFromResultList(unint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  int v6;
  _QWORD *result;
  unint64_t v8;

  v6 = sqlite3_column_int(*(sqlite3_stmt **)(*(_QWORD *)(a3 + 8) + 24), *(_DWORD *)a3 + a4);
  v8 = a1;
  result = std::__hash_table<std::__hash_value_type<mlcore::ModelProperty<int> *,int>,std::__unordered_map_hasher<mlcore::ModelProperty<int> *,std::__hash_value_type<mlcore::ModelProperty<int> *,int>,std::hash<mlcore::ModelProperty<int> *>,std::equal_to<mlcore::ModelProperty<int> *>,true>,std::__unordered_map_equal<mlcore::ModelProperty<int> *,std::__hash_value_type<mlcore::ModelProperty<int> *,int>,std::equal_to<mlcore::ModelProperty<int> *>,std::hash<mlcore::ModelProperty<int> *>,true>,std::allocator<std::__hash_value_type<mlcore::ModelProperty<int> *,int>>>::__emplace_unique_key_args<mlcore::ModelProperty<int> *,std::piecewise_construct_t const&,std::tuple<mlcore::ModelProperty<int> * const&>,std::tuple<>>(a2 + 128, a1, &v8);
  *((_DWORD *)result + 6) = v6;
  return result;
}

_QWORD *mlcore::LocalLibrary::_libraryDatabaseDidOpenCallback(mlcore::LocalLibrary *this, mediaplatform::DatabaseConnection *a2)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::string *v22;
  unint64_t *p_size;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  unint64_t v27;
  std::string *v28;
  unint64_t *v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  unint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  __int128 *v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  __int128 *v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  _QWORD *result;
  uint64_t v51;
  int v52;
  const char **v53;
  std::__shared_weak_count *v54;
  int v55;
  const char **v56;
  std::__shared_weak_count *v57;
  const char **v58[2];
  const char **v59[2];
  const char **v60;
  std::__shared_weak_count *v61;
  const char **v62;
  std::__shared_weak_count *v63;
  const char **v64;
  std::__shared_weak_count *v65;
  const char **v66;
  std::__shared_weak_count *v67;
  const char **v68;
  std::__shared_weak_count *v69;
  const char **v70;
  std::__shared_weak_count *v71;
  __int128 v72;
  char v73;
  __int128 *v74;
  __int128 v75;
  char v76;
  __int128 *v77;
  _QWORD v78[3];
  _QWORD *v79;
  _QWORD v80[3];
  _QWORD *v81;
  _QWORD v82[3];
  _QWORD *v83;
  _QWORD v84[3];
  _QWORD *v85;
  uint64_t v86;

  v86 = *MEMORY[0x24BDAC8D0];
  v82[0] = &off_24C33AED8;
  v83 = v82;
  LODWORD(v84[0]) = 3;
  LODWORD(v80[0]) = 2048;
  std::allocate_shared[abi:ne180100]<mediaplatform::DatabaseFunction,std::allocator<mediaplatform::DatabaseFunction>,char const(&)[17],int,std::function<void ()(mediaplatform::DatabaseContext,std::vector<mediaplatform::DatabaseValue> &)> &,int,void>(&v70, (int *)v84, (uint64_t)v82, (int *)v80);
  mediaplatform::DatabaseConnection::registerDatabaseFunction((uint64_t *)a2, &v70);
  v4 = v71;
  if (v71)
  {
    p_shared_owners = (unint64_t *)&v71->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  LODWORD(v84[0]) = 5;
  LODWORD(v80[0]) = 2048;
  std::allocate_shared[abi:ne180100]<mediaplatform::DatabaseFunction,std::allocator<mediaplatform::DatabaseFunction>,char const(&)[17],int,std::function<void ()(mediaplatform::DatabaseContext,std::vector<mediaplatform::DatabaseValue> &)> &,int,void>(&v68, (int *)v84, (uint64_t)v82, (int *)v80);
  mediaplatform::DatabaseConnection::registerDatabaseFunction((uint64_t *)a2, &v68);
  v7 = v69;
  if (v69)
  {
    v8 = (unint64_t *)&v69->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  LODWORD(v84[0]) = 7;
  LODWORD(v80[0]) = 2048;
  std::allocate_shared[abi:ne180100]<mediaplatform::DatabaseFunction,std::allocator<mediaplatform::DatabaseFunction>,char const(&)[17],int,std::function<void ()(mediaplatform::DatabaseContext,std::vector<mediaplatform::DatabaseValue> &)> &,int,void>(&v66, (int *)v84, (uint64_t)v82, (int *)v80);
  mediaplatform::DatabaseConnection::registerDatabaseFunction((uint64_t *)a2, &v66);
  v10 = v67;
  if (v67)
  {
    v11 = (unint64_t *)&v67->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  LODWORD(v84[0]) = 9;
  LODWORD(v80[0]) = 2048;
  std::allocate_shared[abi:ne180100]<mediaplatform::DatabaseFunction,std::allocator<mediaplatform::DatabaseFunction>,char const(&)[17],int,std::function<void ()(mediaplatform::DatabaseContext,std::vector<mediaplatform::DatabaseValue> &)> &,int,void>(&v64, (int *)v84, (uint64_t)v82, (int *)v80);
  mediaplatform::DatabaseConnection::registerDatabaseFunction((uint64_t *)a2, &v64);
  v13 = v65;
  if (v65)
  {
    v14 = (unint64_t *)&v65->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  LODWORD(v84[0]) = 11;
  LODWORD(v80[0]) = 2048;
  std::allocate_shared[abi:ne180100]<mediaplatform::DatabaseFunction,std::allocator<mediaplatform::DatabaseFunction>,char const(&)[17],int,std::function<void ()(mediaplatform::DatabaseContext,std::vector<mediaplatform::DatabaseValue> &)> &,int,void>(&v62, (int *)v84, (uint64_t)v82, (int *)v80);
  mediaplatform::DatabaseConnection::registerDatabaseFunction((uint64_t *)a2, &v62);
  v16 = v63;
  if (v63)
  {
    v17 = (unint64_t *)&v63->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  v80[0] = &off_24C33AF30;
  v80[1] = this;
  v81 = v80;
  LODWORD(v84[0]) = -1;
  LODWORD(v78[0]) = 2048;
  std::allocate_shared[abi:ne180100]<mediaplatform::DatabaseFunction,std::allocator<mediaplatform::DatabaseFunction>,char const(&)[22],int,std::function<void ()(mediaplatform::DatabaseContext,std::vector<mediaplatform::DatabaseValue> &)> &,int,void>(&v60, "LocalizedStringSearch", (int *)v84, (uint64_t)v80, (int *)v78);
  mediaplatform::DatabaseConnection::registerDatabaseFunction((uint64_t *)a2, &v60);
  v19 = v61;
  if (v61)
  {
    v20 = (unint64_t *)&v61->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  v78[0] = &off_24C33AF88;
  v79 = v78;
  v22 = (std::string *)operator new(0x60uLL);
  v22->__r_.__value_.__l.__size_ = 0;
  p_size = &v22->__r_.__value_.__l.__size_;
  v22->__r_.__value_.__r.__words[2] = 0;
  v22->__r_.__value_.__r.__words[0] = (std::string::size_type)&off_24C33BBB8;
  std::string::basic_string[abi:ne180100]<0>(&v75, "HashtableLookupInt");
  v24 = (uint64_t)v79;
  if (!v79)
    goto LABEL_34;
  if (v79 != v78)
  {
    v24 = (*(uint64_t (**)(_QWORD *))(*v79 + 16))(v79);
LABEL_34:
    v85 = (_QWORD *)v24;
    goto LABEL_36;
  }
  v85 = v84;
  (*(void (**)(_QWORD *, _QWORD *))(v78[0] + 24))(v78, v84);
LABEL_36:
  mediaplatform::DatabaseFunction::DatabaseFunction(v22 + 1, &v75, 0xFFFFFFFFFFFFFFFFLL, (uint64_t)v84, 0);
  v25 = v85;
  if (v85 == v84)
  {
    v26 = 4;
    v25 = v84;
  }
  else
  {
    if (!v85)
      goto LABEL_41;
    v26 = 5;
  }
  (*(void (**)(void))(*v25 + 8 * v26))();
LABEL_41:
  if (v76 < 0)
    operator delete((void *)v75);
  v59[0] = (const char **)&v22[1].__r_.__value_.__l.__data_;
  v59[1] = (const char **)&v22->__r_.__value_.__l.__data_;
  mediaplatform::DatabaseConnection::registerDatabaseFunction((uint64_t *)a2, v59);
  do
    v27 = __ldaxr(p_size);
  while (__stlxr(v27 - 1, p_size));
  if (!v27)
  {
    (*(void (**)(std::string *))(v22->__r_.__value_.__r.__words[0] + 16))(v22);
    std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v22);
  }
  *(_QWORD *)&v75 = &off_24C33AFE0;
  v77 = &v75;
  v28 = (std::string *)operator new(0x60uLL);
  v28->__r_.__value_.__l.__size_ = 0;
  v29 = &v28->__r_.__value_.__l.__size_;
  v28->__r_.__value_.__r.__words[2] = 0;
  v28->__r_.__value_.__r.__words[0] = (std::string::size_type)&off_24C33BBB8;
  std::string::basic_string[abi:ne180100]<0>(&v72, "HashtableLookupInt64");
  v30 = (uint64_t)v77;
  if (!v77)
    goto LABEL_50;
  if (v77 != &v75)
  {
    v30 = (*(uint64_t (**)(void))(*(_QWORD *)v77 + 16))();
LABEL_50:
    v85 = (_QWORD *)v30;
    goto LABEL_52;
  }
  v85 = v84;
  (*(void (**)(__int128 *, _QWORD *))(v75 + 24))(&v75, v84);
LABEL_52:
  mediaplatform::DatabaseFunction::DatabaseFunction(v28 + 1, &v72, 0xFFFFFFFFFFFFFFFFLL, (uint64_t)v84, 2048);
  v31 = v85;
  if (v85 == v84)
  {
    v32 = 4;
    v31 = v84;
  }
  else
  {
    if (!v85)
      goto LABEL_57;
    v32 = 5;
  }
  (*(void (**)(void))(*v31 + 8 * v32))();
LABEL_57:
  if (v73 < 0)
    operator delete((void *)v72);
  v58[0] = (const char **)&v28[1].__r_.__value_.__l.__data_;
  v58[1] = (const char **)&v28->__r_.__value_.__l.__data_;
  mediaplatform::DatabaseConnection::registerDatabaseFunction((uint64_t *)a2, v58);
  do
    v33 = __ldaxr(v29);
  while (__stlxr(v33 - 1, v29));
  if (!v33)
  {
    (*(void (**)(std::string *))(v28->__r_.__value_.__r.__words[0] + 16))(v28);
    std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v28);
  }
  v84[0] = &off_24C33B038;
  v85 = v84;
  LODWORD(v72) = -1;
  v55 = 2048;
  std::allocate_shared[abi:ne180100]<mediaplatform::DatabaseFunction,std::allocator<mediaplatform::DatabaseFunction>,char const(&)[22],int,std::function<void ()(mediaplatform::DatabaseContext,std::vector<mediaplatform::DatabaseValue> &)> &,int,void>(&v56, "HashtableLookupString", (int *)&v72, (uint64_t)v84, &v55);
  mediaplatform::DatabaseConnection::registerDatabaseFunction((uint64_t *)a2, &v56);
  v34 = v57;
  if (v57)
  {
    v35 = (unint64_t *)&v57->__shared_owners_;
    do
      v36 = __ldaxr(v35);
    while (__stlxr(v36 - 1, v35));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
  }
  *(_QWORD *)&v72 = &off_24C33B090;
  v74 = &v72;
  v55 = -1;
  v52 = 2048;
  std::allocate_shared[abi:ne180100]<mediaplatform::DatabaseFunction,std::allocator<mediaplatform::DatabaseFunction>,char const(&)[22],int,std::function<void ()(mediaplatform::DatabaseContext,std::vector<mediaplatform::DatabaseValue> &)> &,int,void>(&v53, "HashtableLookupDouble", &v55, (uint64_t)&v72, &v52);
  mediaplatform::DatabaseConnection::registerDatabaseFunction((uint64_t *)a2, &v53);
  v37 = v54;
  if (v54)
  {
    v38 = (unint64_t *)&v54->__shared_owners_;
    do
      v39 = __ldaxr(v38);
    while (__stlxr(v39 - 1, v38));
    if (!v39)
    {
      ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
      std::__shared_weak_count::__release_weak(v37);
    }
  }
  v40 = v74;
  if (v74 == &v72)
  {
    v41 = 4;
    v40 = &v72;
  }
  else
  {
    if (!v74)
      goto LABEL_78;
    v41 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v40 + 8 * v41))();
LABEL_78:
  v42 = v85;
  if (v85 == v84)
  {
    v43 = 4;
    v42 = v84;
  }
  else
  {
    if (!v85)
      goto LABEL_83;
    v43 = 5;
  }
  (*(void (**)(void))(*v42 + 8 * v43))();
LABEL_83:
  v44 = v77;
  if (v77 == &v75)
  {
    v45 = 4;
    v44 = &v75;
  }
  else
  {
    if (!v77)
      goto LABEL_88;
    v45 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v44 + 8 * v45))();
LABEL_88:
  v46 = v79;
  if (v79 == v78)
  {
    v47 = 4;
    v46 = v78;
  }
  else
  {
    if (!v79)
      goto LABEL_93;
    v47 = 5;
  }
  (*(void (**)(void))(*v46 + 8 * v47))();
LABEL_93:
  v48 = v81;
  if (v81 == v80)
  {
    v49 = 4;
    v48 = v80;
  }
  else
  {
    if (!v81)
      goto LABEL_98;
    v49 = 5;
  }
  (*(void (**)(void))(*v48 + 8 * v49))();
LABEL_98:
  result = v83;
  if (v83 == v82)
  {
    v51 = 4;
    result = v82;
  }
  else
  {
    if (!v83)
      return result;
    v51 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v51))();
}

void sub_20A66C09C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, char a16, uint64_t a17, char a18, uint64_t a19, char a20,uint64_t a21,char a22,uint64_t a23,char a24,uint64_t a25,char a26,uint64_t a27,char a28,uint64_t a29,char a30,uint64_t a31,char a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,uint64_t a38,char a39,uint64_t a40,int a41,__int16 a42,char a43,char a44)
{
  std::__shared_weak_count *v44;
  uint64_t v45;
  uint64_t v46;
  void *v48;
  char *v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t v56;

  if (a37 < 0)
    operator delete(*(void **)(v45 + 48));
  std::__shared_weak_count::~__shared_weak_count(v44);
  operator delete(v48);
  v49 = *(char **)(v45 + 104);
  if (v49 == &a39)
  {
    v50 = 4;
    v49 = &a39;
  }
  else
  {
    if (!v49)
      goto LABEL_8;
    v50 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v49 + 8 * v50))();
LABEL_8:
  v51 = *(_QWORD **)(v45 + 136);
  if (v51 == (_QWORD *)(v46 - 200))
  {
    v52 = 4;
    v51 = (_QWORD *)(v46 - 200);
  }
  else
  {
    if (!v51)
      goto LABEL_13;
    v52 = 5;
  }
  (*(void (**)(void))(*v51 + 8 * v52))();
LABEL_13:
  v53 = *(_QWORD **)(v45 + 168);
  if (v53 == (_QWORD *)(v46 - 168))
  {
    v54 = 4;
    v53 = (_QWORD *)(v46 - 168);
  }
  else
  {
    if (!v53)
      goto LABEL_18;
    v54 = 5;
  }
  (*(void (**)(void))(*v53 + 8 * v54))();
LABEL_18:
  v55 = *(_QWORD **)(v45 + 200);
  if (v55 == (_QWORD *)(v46 - 136))
  {
    v56 = 4;
    v55 = (_QWORD *)(v46 - 136);
  }
  else
  {
    if (!v55)
      goto LABEL_23;
    v56 = 5;
  }
  (*(void (**)(void))(*v55 + 8 * v56))();
LABEL_23:
  _Unwind_Resume(a1);
}

void std::__function::__func<mlcore::LocalLibrary::_libraryDatabaseDidOpenCallback(mediaplatform::DatabaseConnection &)::$_5,std::allocator<mlcore::LocalLibrary::_libraryDatabaseDidOpenCallback(mediaplatform::DatabaseConnection &)::$_5>,void ()(mediaplatform::DatabaseContext,std::vector<mediaplatform::DatabaseValue> &)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24C33B090;
}

void std::__function::__func<mlcore::LocalLibrary::_libraryDatabaseDidOpenCallback(mediaplatform::DatabaseConnection &)::$_4,std::allocator<mlcore::LocalLibrary::_libraryDatabaseDidOpenCallback(mediaplatform::DatabaseConnection &)::$_4>,void ()(mediaplatform::DatabaseContext,std::vector<mediaplatform::DatabaseValue> &)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24C33B038;
}

void std::__function::__func<mlcore::LocalLibrary::_libraryDatabaseDidOpenCallback(mediaplatform::DatabaseConnection &)::$_2,std::allocator<mlcore::LocalLibrary::_libraryDatabaseDidOpenCallback(mediaplatform::DatabaseConnection &)::$_2>,void ()(mediaplatform::DatabaseContext,std::vector<mediaplatform::DatabaseValue> &)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24C33AF88;
}

uint64_t std::__function::__func<mlcore::LocalLibrary::_libraryDatabaseDidOpenCallback(mediaplatform::DatabaseConnection &)::$_1,std::allocator<mlcore::LocalLibrary::_libraryDatabaseDidOpenCallback(mediaplatform::DatabaseConnection &)::$_1>,void ()(mediaplatform::DatabaseContext,std::vector<mediaplatform::DatabaseValue> &)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24C33AF30;
  a2[1] = v2;
  return result;
}

void std::__function::__func<mlcore::LocalLibrary::_libraryDatabaseDidOpenCallback(mediaplatform::DatabaseConnection &)::$_3,std::allocator<mlcore::LocalLibrary::_libraryDatabaseDidOpenCallback(mediaplatform::DatabaseConnection &)::$_3>,void ()(mediaplatform::DatabaseContext,std::vector<mediaplatform::DatabaseValue> &)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24C33AFE0;
}

void mlcore::OrPredicate::_SQLExpression(uint64_t a1@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  _QWORD *v23;
  _QWORD *v24;
  char *v25;
  __int128 v26;
  int64x2_t v27;
  _OWORD *v28;
  char *v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  __int128 v42;
  uint64_t v43;
  std::__shared_weak_count *v44;
  __int128 v45;
  __int128 v46;
  uint64_t v47;
  std::__shared_weak_count *v48;
  int64x2_t v49;
  char *v50;
  int64x2_t *v51;
  int64x2_t v52;
  char *v53;
  char **v54;

  *a3 = 0;
  a3[1] = 0;
  v49 = 0uLL;
  v50 = 0;
  v3 = *(uint64_t **)(a1 + 8);
  v4 = *(uint64_t **)(a1 + 16);
  if (v3 != v4)
  {
    do
    {
      v7 = *v3;
      v8 = (std::__shared_weak_count *)v3[1];
      v47 = *v3;
      v48 = v8;
      if (v8)
      {
        p_shared_owners = (unint64_t *)&v8->__shared_owners_;
        do
          v10 = __ldxr(p_shared_owners);
        while (__stxr(v10 + 1, p_shared_owners));
      }
      v11 = (std::__shared_weak_count *)a2[1];
      v43 = *a2;
      v44 = v11;
      if (v11)
      {
        v12 = (unint64_t *)&v11->__shared_owners_;
        do
          v13 = __ldxr(v12);
        while (__stxr(v13 + 1, v12));
      }
      (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t *))(*(_QWORD *)v7 + 64))(&v45, v7, &v43);
      v14 = v45;
      v46 = v45;
      v45 = 0uLL;
      v15 = v49.i64[1];
      if (v49.i64[1] >= (unint64_t)v50)
      {
        v42 = v14;
        v16 = (v49.i64[1] - v49.i64[0]) >> 4;
        v17 = v16 + 1;
        if ((unint64_t)(v16 + 1) >> 60)
          std::vector<std::string>::__throw_length_error[abi:ne180100]();
        v18 = (uint64_t)&v50[-v49.i64[0]];
        if ((uint64_t)&v50[-v49.i64[0]] >> 3 > v17)
          v17 = v18 >> 3;
        if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF0)
          v19 = 0xFFFFFFFFFFFFFFFLL;
        else
          v19 = v17;
        v54 = &v50;
        v20 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<mediaplatform::DatabaseParameterBase>>>(v19);
        v22 = &v20[16 * v16];
        *(_OWORD *)v22 = v42;
        v46 = 0uLL;
        v23 = (_QWORD *)v49.i64[1];
        v24 = (_QWORD *)v49.i64[0];
        if (v49.i64[1] == v49.i64[0])
        {
          v27 = vdupq_n_s64(v49.u64[1]);
          v25 = &v20[16 * v16];
        }
        else
        {
          v25 = &v20[16 * v16];
          do
          {
            v26 = *((_OWORD *)v23 - 1);
            v23 -= 2;
            *((_OWORD *)v25 - 1) = v26;
            v25 -= 16;
            *v23 = 0;
            v23[1] = 0;
          }
          while (v23 != v24);
          v27 = v49;
        }
        v28 = v22 + 16;
        v49.i64[0] = (uint64_t)v25;
        v49.i64[1] = (uint64_t)(v22 + 16);
        v52 = v27;
        v29 = v50;
        v50 = &v20[16 * v21];
        v53 = v29;
        v51 = (int64x2_t *)v27.i64[0];
        std::__split_buffer<std::shared_ptr<mediaplatform::SQLExpression const>>::~__split_buffer((uint64_t)&v51);
        v30 = (std::__shared_weak_count *)*((_QWORD *)&v45 + 1);
        v49.i64[1] = (uint64_t)v28;
        if (*((_QWORD *)&v45 + 1))
        {
          v31 = (unint64_t *)(*((_QWORD *)&v45 + 1) + 8);
          do
            v32 = __ldaxr(v31);
          while (__stlxr(v32 - 1, v31));
          if (!v32)
          {
            ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
            std::__shared_weak_count::__release_weak(v30);
          }
        }
      }
      else
      {
        *(_OWORD *)v49.i64[1] = v14;
        v46 = 0uLL;
        v49.i64[1] = v15 + 16;
      }
      v33 = v44;
      if (v44)
      {
        v34 = (unint64_t *)&v44->__shared_owners_;
        do
          v35 = __ldaxr(v34);
        while (__stlxr(v35 - 1, v34));
        if (!v35)
        {
          ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
          std::__shared_weak_count::__release_weak(v33);
        }
      }
      v36 = v48;
      if (v48)
      {
        v37 = (unint64_t *)&v48->__shared_owners_;
        do
          v38 = __ldaxr(v37);
        while (__stlxr(v38 - 1, v37));
        if (!v38)
        {
          ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
          std::__shared_weak_count::__release_weak(v36);
        }
      }
      v3 += 2;
    }
    while (v3 != v4);
    if (v49.i64[0] != v49.i64[1])
    {
      std::allocate_shared[abi:ne180100]<mediaplatform::SQLBinaryExpressionList,std::allocator<mediaplatform::SQLBinaryExpressionList>,std::vector<std::shared_ptr<mediaplatform::SQLExpression const>> &,mediaplatform::SQLBinaryExpression::BinaryOperator,void>((uint64_t *)&v51, &v49, 2);
      std::shared_ptr<mlcore::Predicate>::operator=[abi:ne180100]((uint64_t)a3, (__int128 *)&v51);
      v39 = (std::__shared_weak_count *)v52.i64[0];
      if (v52.i64[0])
      {
        v40 = (unint64_t *)(v52.i64[0] + 8);
        do
          v41 = __ldaxr(v40);
        while (__stlxr(v41 - 1, v40));
        if (!v41)
        {
          ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
          std::__shared_weak_count::__release_weak(v39);
        }
      }
    }
  }
  v51 = &v49;
  std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v51);
}

void sub_20A66C68C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void **a17, uint64_t a18, char a19)
{
  uint64_t v19;

  a17 = (void **)&a19;
  std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__destroy_vector::operator()[abi:ne180100](&a17);
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100](v19);
  _Unwind_Resume(a1);
}

void mlcore::NullPredicateBase::_SQLExpression(uint64_t a1@<X0>, uint64_t *a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  int v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  __int128 v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  uint64_t v34;
  std::__shared_weak_count *v35;
  uint64_t v36;
  std::__shared_weak_count *v37;

  v5 = *(_QWORD *)(a1 + 8);
  v6 = (std::__shared_weak_count *)a2[1];
  v34 = *a2;
  v35 = v6;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t *))(*(_QWORD *)v5 + 96))(&v36, v5, &v34);
  v9 = v35;
  if (v35)
  {
    v10 = (unint64_t *)&v35->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  v12 = (std::__shared_weak_count *)operator new(0x20uLL);
  v12->__shared_owners_ = 0;
  v13 = (unint64_t *)&v12->__shared_owners_;
  v12->__shared_weak_owners_ = 0;
  v12->__vftable = (std::__shared_weak_count_vtbl *)&off_24C33BDE8;
  v12[1].__vftable = (std::__shared_weak_count_vtbl *)&off_24C330FD8;
  if (*(_BYTE *)(a1 + 16))
    v14 = 19;
  else
    v14 = 20;
  v15 = operator new(0x48uLL);
  v16 = v15;
  v15[1] = 0;
  v15[2] = 0;
  *v15 = &off_24C33BEC8;
  v17 = v36;
  v18 = v37;
  if (v37)
  {
    v19 = (unint64_t *)&v37->__shared_owners_;
    do
      v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
    do
      v21 = __ldxr(v13);
    while (__stxr(v21 + 1, v13));
    v15[3] = &off_24C331138;
    *((_DWORD *)v15 + 8) = v14;
    v15[5] = v17;
    v15[6] = v18;
    do
      v22 = __ldxr(v19);
    while (__stxr(v22 + 1, v19));
  }
  else
  {
    do
      v23 = __ldxr(v13);
    while (__stxr(v23 + 1, v13));
    v15[3] = &off_24C331138;
    *((_DWORD *)v15 + 8) = v14;
    v15[5] = v17;
    v15[6] = v18;
  }
  v15[7] = v12 + 1;
  v15[8] = v12;
  do
    v24 = __ldxr(v13);
  while (__stxr(v24 + 1, v13));
  do
    v25 = __ldaxr(v13);
  while (__stlxr(v25 - 1, v13));
  if (!v25)
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  if (v18)
  {
    v26 = (unint64_t *)&v18->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  *(_QWORD *)&v28 = v16 + 3;
  *((_QWORD *)&v28 + 1) = v16;
  *a3 = v28;
  if (v12)
  {
    v29 = (unint64_t *)&v12->__shared_owners_;
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  v31 = v37;
  if (v37)
  {
    v32 = (unint64_t *)&v37->__shared_owners_;
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
}

void sub_20A66C964(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  _Unwind_Resume(a1);
}

void mlcore::ExistsPredicate::_SQLExpression(uint64_t a1@<X0>, uint64_t *a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  char *v8;
  _QWORD *v9;
  __int128 v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  __int128 v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  __int128 v24;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = (std::__shared_weak_count *)a2[1];
  v22 = *a2;
  v23 = v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t *))(*(_QWORD *)v4 + 72))(&v24, v4, &v22);
  v8 = (char *)operator new(0x30uLL);
  *(_OWORD *)(v8 + 8) = 0u;
  *((_QWORD *)v8 + 3) = &off_24C3311B0;
  v9 = v8 + 24;
  *(_QWORD *)v8 = &off_24C33BF00;
  v10 = v24;
  v24 = 0u;
  *((_OWORD *)v8 + 2) = v10;
  v11 = (std::__shared_weak_count *)*((_QWORD *)&v10 + 1);
  if (*((_QWORD *)&v10 + 1))
  {
    v12 = (unint64_t *)(*((_QWORD *)&v10 + 1) + 8);
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
    *v9 = &off_24C331160;
    do
      v14 = __ldaxr(v12);
    while (__stlxr(v14 - 1, v12));
    if (!v14)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v10 + 1) + 16))(*((_QWORD *)&v10 + 1));
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  else
  {
    *v9 = &off_24C331160;
  }
  *(_QWORD *)&v15 = v8 + 24;
  *((_QWORD *)&v15 + 1) = v8;
  *a3 = v15;
  v16 = (std::__shared_weak_count *)*((_QWORD *)&v24 + 1);
  if (*((_QWORD *)&v24 + 1))
  {
    v17 = (unint64_t *)(*((_QWORD *)&v24 + 1) + 8);
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  v19 = v23;
  if (v23)
  {
    v20 = (unint64_t *)&v23->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
}

void sub_20A66CB18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void mlcore::InPredicate<long long>::_SQLExpression(uint64_t a1@<X0>, uint64_t *a2@<X1>, _OWORD *a3@<X8>)
{
  std::__shared_weak_count *v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  _OWORD *v11;
  char v12;
  uint64_t v13;
  char v14;
  __int128 v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t i;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  _QWORD *j;
  uint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  __int128 v35;
  uint64_t v36;
  _OWORD *v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  _QWORD *v44;
  _QWORD *v45;
  char *v46;
  __int128 v47;
  int64x2_t v48;
  char *v49;
  unint64_t v50;
  uint64_t v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  __int128 v65;
  uint64_t v66;
  std::__shared_weak_count *v67;
  uint64_t v68;
  std::__shared_weak_count *v69;
  __int128 v70;
  __int128 v71;
  int64x2_t v72;
  char *v73;
  __int128 v74;
  __int128 v75;
  _BYTE v76[32];
  char **v77;
  uint64_t v78;

  v78 = *MEMORY[0x24BDAC8D0];
  if (*(_QWORD *)(a1 + 64))
  {
    v6 = (std::__shared_weak_count *)operator new(0x28uLL);
    v6->__shared_owners_ = 0;
    v6->__shared_weak_owners_ = 0;
    v6->__vftable = (std::__shared_weak_count_vtbl *)&off_24C33BD08;
    v6[1].__vftable = (std::__shared_weak_count_vtbl *)&off_24C335D00;
    LODWORD(v6[1].__shared_owners_) = *(_DWORD *)(a1 + 56);
    *(_QWORD *)&v74 = v6 + 1;
    *((_QWORD *)&v74 + 1) = v6;
    std::allocate_shared[abi:ne180100]<mediaplatform::DatabaseBindParameter,std::allocator<mediaplatform::DatabaseBindParameter>,std::shared_ptr<mediaplatform::DatabaseParameter<int>> &,void>(&v71, (uint64_t)&v6[1], v6);
    *(_OWORD *)v76 = v71;
    v71 = 0uLL;
    v7 = *(_QWORD *)(a1 + 8);
    v8 = (std::__shared_weak_count *)a2[1];
    v68 = *a2;
    v69 = v8;
    if (v8)
    {
      p_shared_owners = (unint64_t *)&v8->__shared_owners_;
      do
        v10 = __ldxr(p_shared_owners);
      while (__stxr(v10 + 1, p_shared_owners));
    }
    (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t *))(*(_QWORD *)v7 + 96))(&v70, v7, &v68);
    *(_OWORD *)&v76[16] = v70;
    v70 = 0uLL;
    v73 = 0;
    v72 = 0uLL;
    *(_QWORD *)&v75 = &v72;
    BYTE8(v75) = 0;
    v11 = operator new(0x20uLL);
    v12 = 0;
    v13 = 0;
    v72.i64[0] = (uint64_t)v11;
    v72.i64[1] = (uint64_t)v11;
    v73 = (char *)(v11 + 2);
    do
    {
      v14 = v12;
      v15 = *(_OWORD *)&v76[16 * v13];
      *v11 = v15;
      if (*((_QWORD *)&v15 + 1))
      {
        v16 = (unint64_t *)(*((_QWORD *)&v15 + 1) + 8);
        do
          v17 = __ldxr(v16);
        while (__stxr(v17 + 1, v16));
      }
      ++v11;
      v12 = 1;
      v13 = 1;
    }
    while ((v14 & 1) == 0);
    v72.i64[1] = (uint64_t)v11;
    for (i = 16; i != -16; i -= 16)
      std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)&v76[i]);
    v19 = (std::__shared_weak_count *)*((_QWORD *)&v70 + 1);
    if (*((_QWORD *)&v70 + 1))
    {
      v20 = (unint64_t *)(*((_QWORD *)&v70 + 1) + 8);
      do
        v21 = __ldaxr(v20);
      while (__stlxr(v21 - 1, v20));
      if (!v21)
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
    }
    v22 = v69;
    if (v69)
    {
      v23 = (unint64_t *)&v69->__shared_owners_;
      do
        v24 = __ldaxr(v23);
      while (__stlxr(v24 - 1, v23));
      if (!v24)
      {
        ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
        std::__shared_weak_count::__release_weak(v22);
      }
    }
    v25 = (std::__shared_weak_count *)*((_QWORD *)&v71 + 1);
    if (*((_QWORD *)&v71 + 1))
    {
      v26 = (unint64_t *)(*((_QWORD *)&v71 + 1) + 8);
      do
        v27 = __ldaxr(v26);
      while (__stlxr(v27 - 1, v26));
      if (!v27)
      {
        ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
        std::__shared_weak_count::__release_weak(v25);
      }
    }
    std::string::basic_string[abi:ne180100]<0>(v76, "HashtableLookupInt64");
    std::allocate_shared[abi:ne180100]<mediaplatform::SQLFunctionExpression,std::allocator<mediaplatform::SQLFunctionExpression>,std::string,std::vector<std::shared_ptr<mediaplatform::SQLExpression const>> &,void>(&v75, (__int128 *)v76, &v72);
    *a3 = v75;
    if ((v76[23] & 0x80000000) != 0)
      operator delete(*(void **)v76);
    *(_QWORD *)v76 = &v72;
    std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__destroy_vector::operator()[abi:ne180100]((void ***)v76);
    v28 = (std::__shared_weak_count *)*((_QWORD *)&v74 + 1);
    if (*((_QWORD *)&v74 + 1))
    {
      v29 = (unint64_t *)(*((_QWORD *)&v74 + 1) + 8);
      do
        v30 = __ldaxr(v29);
      while (__stlxr(v30 - 1, v29));
      if (!v30)
      {
        ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
        std::__shared_weak_count::__release_weak(v28);
      }
    }
  }
  else
  {
    v72 = 0uLL;
    v73 = 0;
    for (j = *(_QWORD **)(a1 + 32); j; j = (_QWORD *)*j)
    {
      v32 = j[2];
      v33 = (std::__shared_weak_count *)operator new(0x28uLL);
      v33->__shared_owners_ = 0;
      v34 = (unint64_t *)&v33->__shared_owners_;
      v33->__shared_weak_owners_ = 0;
      v33->__vftable = (std::__shared_weak_count_vtbl *)&off_24C33BD40;
      v33[1].__vftable = (std::__shared_weak_count_vtbl *)&off_24C335D48;
      v33[1].__shared_owners_ = v32;
      *(_QWORD *)&v75 = v33 + 1;
      *((_QWORD *)&v75 + 1) = v33;
      std::allocate_shared[abi:ne180100]<mediaplatform::DatabaseBindParameter,std::allocator<mediaplatform::DatabaseBindParameter>,std::shared_ptr<mediaplatform::DatabaseParameter<int>> &,void>(&v71, (uint64_t)&v33[1], v33);
      v35 = v71;
      v74 = v71;
      v71 = 0uLL;
      v36 = v72.i64[1];
      if (v72.i64[1] >= (unint64_t)v73)
      {
        v65 = v35;
        v38 = (v72.i64[1] - v72.i64[0]) >> 4;
        if ((unint64_t)(v38 + 1) >> 60)
          std::vector<std::string>::__throw_length_error[abi:ne180100]();
        v39 = (uint64_t)&v73[-v72.i64[0]] >> 3;
        if (v39 <= v38 + 1)
          v39 = v38 + 1;
        if ((unint64_t)&v73[-v72.i64[0]] >= 0x7FFFFFFFFFFFFFF0)
          v40 = 0xFFFFFFFFFFFFFFFLL;
        else
          v40 = v39;
        v77 = &v73;
        v41 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<mediaplatform::DatabaseParameterBase>>>(v40);
        v43 = &v41[16 * v38];
        *(_OWORD *)v43 = v65;
        v74 = 0uLL;
        v44 = (_QWORD *)v72.i64[1];
        v45 = (_QWORD *)v72.i64[0];
        if (v72.i64[1] == v72.i64[0])
        {
          v48 = vdupq_n_s64(v72.u64[1]);
          v46 = &v41[16 * v38];
        }
        else
        {
          v46 = &v41[16 * v38];
          do
          {
            v47 = *((_OWORD *)v44 - 1);
            v44 -= 2;
            *((_OWORD *)v46 - 1) = v47;
            v46 -= 16;
            *v44 = 0;
            v44[1] = 0;
          }
          while (v44 != v45);
          v48 = v72;
        }
        v37 = v43 + 16;
        v72.i64[0] = (uint64_t)v46;
        v72.i64[1] = (uint64_t)(v43 + 16);
        *(int64x2_t *)&v76[8] = v48;
        v49 = v73;
        v73 = &v41[16 * v42];
        *(_QWORD *)&v76[24] = v49;
        *(_QWORD *)v76 = v48.i64[0];
        std::__split_buffer<std::shared_ptr<mediaplatform::SQLExpression const>>::~__split_buffer((uint64_t)v76);
      }
      else
      {
        *(_OWORD *)v72.i64[1] = v35;
        v37 = (_OWORD *)(v36 + 16);
        v74 = 0uLL;
      }
      v72.i64[1] = (uint64_t)v37;
      do
        v50 = __ldaxr(v34);
      while (__stlxr(v50 - 1, v34));
      if (!v50)
      {
        ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
        std::__shared_weak_count::__release_weak(v33);
      }
    }
    v51 = *(_QWORD *)(a1 + 8);
    v52 = (std::__shared_weak_count *)a2[1];
    v66 = *a2;
    v67 = v52;
    if (v52)
    {
      v53 = (unint64_t *)&v52->__shared_owners_;
      do
        v54 = __ldxr(v53);
      while (__stxr(v54 + 1, v53));
    }
    (*(void (**)(_BYTE *__return_ptr, uint64_t, uint64_t *))(*(_QWORD *)v51 + 96))(v76, v51, &v66);
    v55 = v67;
    if (v67)
    {
      v56 = (unint64_t *)&v67->__shared_owners_;
      do
        v57 = __ldaxr(v56);
      while (__stlxr(v57 - 1, v56));
      if (!v57)
      {
        ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
        std::__shared_weak_count::__release_weak(v55);
      }
    }
    std::allocate_shared[abi:ne180100]<mediaplatform::SQLExpressionList,std::allocator<mediaplatform::SQLExpressionList>,std::vector<std::shared_ptr<mediaplatform::SQLExpression const>> &,void>(&v75, (char *)v72.i64[0], (char *)v72.i64[1]);
    LODWORD(v71) = 21;
    std::allocate_shared[abi:ne180100]<mediaplatform::SQLBinaryExpression,std::allocator<mediaplatform::SQLBinaryExpression>,std::shared_ptr<mediaplatform::SQLExpression> &,mediaplatform::SQLBinaryExpression::BinaryOperator,std::shared_ptr<mediaplatform::DatabaseBindParameter> &,void>(&v74, *(uint64_t *)v76, *(std::__shared_weak_count **)&v76[8], (int *)&v71, (uint64_t *)&v75);
    *a3 = v74;
    v58 = (std::__shared_weak_count *)*((_QWORD *)&v75 + 1);
    if (*((_QWORD *)&v75 + 1))
    {
      v59 = (unint64_t *)(*((_QWORD *)&v75 + 1) + 8);
      do
        v60 = __ldaxr(v59);
      while (__stlxr(v60 - 1, v59));
      if (!v60)
      {
        ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
        std::__shared_weak_count::__release_weak(v58);
      }
    }
    v61 = *(std::__shared_weak_count **)&v76[8];
    if (*(_QWORD *)&v76[8])
    {
      v62 = (unint64_t *)(*(_QWORD *)&v76[8] + 8);
      do
        v63 = __ldaxr(v62);
      while (__stlxr(v63 - 1, v62));
      if (!v63)
      {
        ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
        std::__shared_weak_count::__release_weak(v61);
      }
    }
    *(_QWORD *)v76 = &v72;
    std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__destroy_vector::operator()[abi:ne180100]((void ***)v76);
  }
}

void sub_20A66D0A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void **a27)
{
  uint64_t v27;

  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)&a27);
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100](v27 - 144);
  a27 = (void **)&a21;
  std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__destroy_vector::operator()[abi:ne180100](&a27);
  _Unwind_Resume(a1);
}

void mlcore::ComparisonPredicate<long long>::_SQLExpression(uint64_t a1@<X0>, uint64_t *a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  _OWORD *v15;
  char v16;
  uint64_t v17;
  char v18;
  __int128 v19;
  unint64_t *v20;
  unint64_t v21;
  __int128 v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  uint64_t i;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  _QWORD *v33;
  __int128 v34;
  std::__shared_weak_count *v35;
  unint64_t *p_shared_owners;
  unint64_t v37;
  unint64_t *v38;
  unint64_t v39;
  _QWORD *v40;
  char v41;
  uint64_t v42;
  char v43;
  __int128 v44;
  unint64_t *v45;
  unint64_t v46;
  __int128 v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  uint64_t n;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  unint64_t *v58;
  unint64_t v59;
  _OWORD *v60;
  char v61;
  uint64_t v62;
  char v63;
  __int128 v64;
  unint64_t *v65;
  unint64_t v66;
  __int128 v67;
  std::__shared_weak_count *v68;
  unint64_t *v69;
  unint64_t v70;
  std::__shared_weak_count *v71;
  unint64_t *v72;
  unint64_t v73;
  uint64_t ii;
  unint64_t *v75;
  unint64_t *v76;
  unint64_t v77;
  _OWORD *v78;
  char v79;
  uint64_t v80;
  char v81;
  __int128 v82;
  unint64_t *v83;
  unint64_t v84;
  __int128 v85;
  std::__shared_weak_count *v86;
  unint64_t *v87;
  unint64_t v88;
  std::__shared_weak_count *v89;
  unint64_t *v90;
  unint64_t v91;
  uint64_t j;
  unint64_t *v93;
  unint64_t *v94;
  unint64_t v95;
  _OWORD *v96;
  char v97;
  uint64_t v98;
  char v99;
  __int128 v100;
  unint64_t *v101;
  unint64_t v102;
  __int128 v103;
  std::__shared_weak_count *v104;
  unint64_t *v105;
  unint64_t v106;
  std::__shared_weak_count *v107;
  unint64_t *v108;
  unint64_t v109;
  uint64_t k;
  unint64_t *v111;
  unint64_t *v112;
  unint64_t v113;
  _OWORD *v114;
  char v115;
  uint64_t v116;
  char v117;
  __int128 v118;
  unint64_t *v119;
  unint64_t v120;
  __int128 v121;
  std::__shared_weak_count *v122;
  unint64_t *v123;
  unint64_t v124;
  std::__shared_weak_count *v125;
  unint64_t *v126;
  unint64_t v127;
  uint64_t m;
  unint64_t *v129;
  std::__shared_weak_count *v130;
  unint64_t *v131;
  unint64_t v132;
  std::__shared_weak_count *v133;
  unint64_t *v134;
  unint64_t v135;
  __int128 v136;
  __int128 *v137;
  _QWORD *v138;
  _QWORD *v139;
  __int128 v140;
  uint64_t v141;
  std::__shared_weak_count *v142;
  uint64_t v143;
  std::__shared_weak_count *v144;
  __int128 v145;
  __int128 v146;
  __int128 v147;
  __int128 v148;
  char v149;
  __int128 v150;
  __int128 v151;
  uint64_t v152;

  v152 = *MEMORY[0x24BDAC8D0];
  if (!*(_QWORD *)(a1 + 32))
  {
    v33 = operator new(0x28uLL);
    v33[1] = 0;
    v33[2] = 0;
    *v33 = &off_24C33BD40;
    v33[3] = &off_24C335D48;
    v33[4] = *(_QWORD *)(a1 + 24);
    *(_QWORD *)&v34 = v33 + 3;
    *((_QWORD *)&v34 + 1) = v33;
    v35 = *(std::__shared_weak_count **)(a1 + 40);
    *(_OWORD *)(a1 + 32) = v34;
    if (v35)
    {
      p_shared_owners = (unint64_t *)&v35->__shared_owners_;
      do
        v37 = __ldaxr(p_shared_owners);
      while (__stlxr(v37 - 1, p_shared_owners));
      if (!v37)
      {
        ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
        std::__shared_weak_count::__release_weak(v35);
      }
    }
  }
  v6 = *(_QWORD *)(a1 + 8);
  v7 = (std::__shared_weak_count *)a2[1];
  v143 = *a2;
  v144 = v7;
  if (v7)
  {
    v8 = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t *))(*(_QWORD *)v6 + 96))(&v145, v6, &v143);
  v10 = v144;
  if (v144)
  {
    v11 = (unint64_t *)&v144->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  std::allocate_shared[abi:ne180100]<mediaplatform::DatabaseBindParameter,std::allocator<mediaplatform::DatabaseBindParameter>,std::shared_ptr<mediaplatform::DatabaseParameter<int>> &,void>(&v141, *(_QWORD *)(a1 + 32), *(std::__shared_weak_count **)(a1 + 40));
  if ((*(_BYTE *)(a1 + 16) & 4) != 0)
  {
    switch((*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 80))(*(_QWORD *)(a1 + 8)))
    {
      case 0u:
        v147 = v145;
        if (*((_QWORD *)&v145 + 1))
        {
          v13 = (unint64_t *)(*((_QWORD *)&v145 + 1) + 8);
          do
            v14 = __ldxr(v13);
          while (__stxr(v14 + 1, v13));
        }
        LODWORD(v136) = 0;
        std::allocate_shared[abi:ne180100]<mediaplatform::SQLLiteralValue<int>,std::allocator<mediaplatform::SQLLiteralValue<int>>,int,void>(&v140, &v136);
        v148 = v140;
        v140 = 0uLL;
        *(_QWORD *)&v151 = 0;
        v150 = 0uLL;
        v137 = &v150;
        LOBYTE(v138) = 0;
        v15 = operator new(0x20uLL);
        v16 = 0;
        v17 = 0;
        *(_QWORD *)&v150 = v15;
        *((_QWORD *)&v150 + 1) = v15;
        *(_QWORD *)&v151 = v15 + 2;
        do
        {
          v18 = v16;
          v19 = *(&v147 + v17);
          *v15 = v19;
          if (*((_QWORD *)&v19 + 1))
          {
            v20 = (unint64_t *)(*((_QWORD *)&v19 + 1) + 8);
            do
              v21 = __ldxr(v20);
            while (__stxr(v21 + 1, v20));
          }
          ++v15;
          v16 = 1;
          v17 = 1;
        }
        while ((v18 & 1) == 0);
        *((_QWORD *)&v150 + 1) = v15;
        std::allocate_shared[abi:ne180100]<mediaplatform::SQLFunctionExpression,std::allocator<mediaplatform::SQLFunctionExpression>,char const(&)[7],std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>,void>(&v146, (_QWORD **)&v150);
        v22 = v146;
        v146 = 0uLL;
        v23 = (std::__shared_weak_count *)*((_QWORD *)&v145 + 1);
        v145 = v22;
        if (v23)
        {
          v24 = (unint64_t *)&v23->__shared_owners_;
          do
            v25 = __ldaxr(v24);
          while (__stlxr(v25 - 1, v24));
          if (!v25)
          {
            ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
            std::__shared_weak_count::__release_weak(v23);
          }
        }
        v26 = (std::__shared_weak_count *)*((_QWORD *)&v146 + 1);
        if (*((_QWORD *)&v146 + 1))
        {
          v27 = (unint64_t *)(*((_QWORD *)&v146 + 1) + 8);
          do
            v28 = __ldaxr(v27);
          while (__stlxr(v28 - 1, v27));
          if (!v28)
          {
            ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
            std::__shared_weak_count::__release_weak(v26);
          }
        }
        v137 = &v150;
        std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v137);
        for (i = 16; i != -16; i -= 16)
          std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)&v147 + i);
        v30 = (std::__shared_weak_count *)*((_QWORD *)&v140 + 1);
        if (*((_QWORD *)&v140 + 1))
        {
          v31 = (unint64_t *)(*((_QWORD *)&v140 + 1) + 8);
          do
            v32 = __ldaxr(v31);
          while (__stlxr(v32 - 1, v31));
          goto LABEL_164;
        }
        break;
      case 1u:
        v147 = v145;
        if (*((_QWORD *)&v145 + 1))
        {
          v76 = (unint64_t *)(*((_QWORD *)&v145 + 1) + 8);
          do
            v77 = __ldxr(v76);
          while (__stxr(v77 + 1, v76));
        }
        std::allocate_shared[abi:ne180100]<mediaplatform::SQLLiteralValue<long long>,std::allocator<mediaplatform::SQLLiteralValue<long long>>,int,void>(&v140, 0);
        v148 = v140;
        v140 = 0uLL;
        *(_QWORD *)&v151 = 0;
        v150 = 0uLL;
        v137 = &v150;
        LOBYTE(v138) = 0;
        v78 = operator new(0x20uLL);
        v79 = 0;
        v80 = 0;
        *(_QWORD *)&v150 = v78;
        *((_QWORD *)&v150 + 1) = v78;
        *(_QWORD *)&v151 = v78 + 2;
        do
        {
          v81 = v79;
          v82 = *(&v147 + v80);
          *v78 = v82;
          if (*((_QWORD *)&v82 + 1))
          {
            v83 = (unint64_t *)(*((_QWORD *)&v82 + 1) + 8);
            do
              v84 = __ldxr(v83);
            while (__stxr(v84 + 1, v83));
          }
          ++v78;
          v79 = 1;
          v80 = 1;
        }
        while ((v81 & 1) == 0);
        *((_QWORD *)&v150 + 1) = v78;
        std::allocate_shared[abi:ne180100]<mediaplatform::SQLFunctionExpression,std::allocator<mediaplatform::SQLFunctionExpression>,char const(&)[7],std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>,void>(&v146, (_QWORD **)&v150);
        v85 = v146;
        v146 = 0uLL;
        v86 = (std::__shared_weak_count *)*((_QWORD *)&v145 + 1);
        v145 = v85;
        if (v86)
        {
          v87 = (unint64_t *)&v86->__shared_owners_;
          do
            v88 = __ldaxr(v87);
          while (__stlxr(v88 - 1, v87));
          if (!v88)
          {
            ((void (*)(std::__shared_weak_count *))v86->__on_zero_shared)(v86);
            std::__shared_weak_count::__release_weak(v86);
          }
        }
        v89 = (std::__shared_weak_count *)*((_QWORD *)&v146 + 1);
        if (*((_QWORD *)&v146 + 1))
        {
          v90 = (unint64_t *)(*((_QWORD *)&v146 + 1) + 8);
          do
            v91 = __ldaxr(v90);
          while (__stlxr(v91 - 1, v90));
          if (!v91)
          {
            ((void (*)(std::__shared_weak_count *))v89->__on_zero_shared)(v89);
            std::__shared_weak_count::__release_weak(v89);
          }
        }
        v137 = &v150;
        std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v137);
        for (j = 16; j != -16; j -= 16)
          std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)&v147 + j);
        v30 = (std::__shared_weak_count *)*((_QWORD *)&v140 + 1);
        if (*((_QWORD *)&v140 + 1))
        {
          v93 = (unint64_t *)(*((_QWORD *)&v140 + 1) + 8);
          do
            v32 = __ldaxr(v93);
          while (__stlxr(v32 - 1, v93));
          goto LABEL_164;
        }
        break;
      case 2u:
        v147 = v145;
        if (*((_QWORD *)&v145 + 1))
        {
          v94 = (unint64_t *)(*((_QWORD *)&v145 + 1) + 8);
          do
            v95 = __ldxr(v94);
          while (__stxr(v95 + 1, v94));
        }
        std::allocate_shared[abi:ne180100]<mediaplatform::SQLLiteralValue<double>,std::allocator<mediaplatform::SQLLiteralValue<double>>,int,void>(&v140, 0);
        v148 = v140;
        v140 = 0uLL;
        *(_QWORD *)&v151 = 0;
        v150 = 0uLL;
        v137 = &v150;
        LOBYTE(v138) = 0;
        v96 = operator new(0x20uLL);
        v97 = 0;
        v98 = 0;
        *(_QWORD *)&v150 = v96;
        *((_QWORD *)&v150 + 1) = v96;
        *(_QWORD *)&v151 = v96 + 2;
        do
        {
          v99 = v97;
          v100 = *(&v147 + v98);
          *v96 = v100;
          if (*((_QWORD *)&v100 + 1))
          {
            v101 = (unint64_t *)(*((_QWORD *)&v100 + 1) + 8);
            do
              v102 = __ldxr(v101);
            while (__stxr(v102 + 1, v101));
          }
          ++v96;
          v97 = 1;
          v98 = 1;
        }
        while ((v99 & 1) == 0);
        *((_QWORD *)&v150 + 1) = v96;
        std::allocate_shared[abi:ne180100]<mediaplatform::SQLFunctionExpression,std::allocator<mediaplatform::SQLFunctionExpression>,char const(&)[7],std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>,void>(&v146, (_QWORD **)&v150);
        v103 = v146;
        v146 = 0uLL;
        v104 = (std::__shared_weak_count *)*((_QWORD *)&v145 + 1);
        v145 = v103;
        if (v104)
        {
          v105 = (unint64_t *)&v104->__shared_owners_;
          do
            v106 = __ldaxr(v105);
          while (__stlxr(v106 - 1, v105));
          if (!v106)
          {
            ((void (*)(std::__shared_weak_count *))v104->__on_zero_shared)(v104);
            std::__shared_weak_count::__release_weak(v104);
          }
        }
        v107 = (std::__shared_weak_count *)*((_QWORD *)&v146 + 1);
        if (*((_QWORD *)&v146 + 1))
        {
          v108 = (unint64_t *)(*((_QWORD *)&v146 + 1) + 8);
          do
            v109 = __ldaxr(v108);
          while (__stlxr(v109 - 1, v108));
          if (!v109)
          {
            ((void (*)(std::__shared_weak_count *))v107->__on_zero_shared)(v107);
            std::__shared_weak_count::__release_weak(v107);
          }
        }
        v137 = &v150;
        std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v137);
        for (k = 16; k != -16; k -= 16)
          std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)&v147 + k);
        v30 = (std::__shared_weak_count *)*((_QWORD *)&v140 + 1);
        if (*((_QWORD *)&v140 + 1))
        {
          v111 = (unint64_t *)(*((_QWORD *)&v140 + 1) + 8);
          do
            v32 = __ldaxr(v111);
          while (__stlxr(v32 - 1, v111));
          goto LABEL_164;
        }
        break;
      case 3u:
        v147 = v145;
        if (*((_QWORD *)&v145 + 1))
        {
          v112 = (unint64_t *)(*((_QWORD *)&v145 + 1) + 8);
          do
            v113 = __ldxr(v112);
          while (__stxr(v113 + 1, v112));
        }
        std::allocate_shared[abi:ne180100]<mediaplatform::SQLLiteralValue<std::string>,std::allocator<mediaplatform::SQLLiteralValue<std::string>>,char const(&)[1],void>(&v140);
        v148 = v140;
        v140 = 0uLL;
        *(_QWORD *)&v151 = 0;
        v150 = 0uLL;
        v137 = &v150;
        LOBYTE(v138) = 0;
        v114 = operator new(0x20uLL);
        v115 = 0;
        v116 = 0;
        *(_QWORD *)&v150 = v114;
        *((_QWORD *)&v150 + 1) = v114;
        *(_QWORD *)&v151 = v114 + 2;
        do
        {
          v117 = v115;
          v118 = *(&v147 + v116);
          *v114 = v118;
          if (*((_QWORD *)&v118 + 1))
          {
            v119 = (unint64_t *)(*((_QWORD *)&v118 + 1) + 8);
            do
              v120 = __ldxr(v119);
            while (__stxr(v120 + 1, v119));
          }
          ++v114;
          v115 = 1;
          v116 = 1;
        }
        while ((v117 & 1) == 0);
        *((_QWORD *)&v150 + 1) = v114;
        std::allocate_shared[abi:ne180100]<mediaplatform::SQLFunctionExpression,std::allocator<mediaplatform::SQLFunctionExpression>,char const(&)[7],std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>,void>(&v146, (_QWORD **)&v150);
        v121 = v146;
        v146 = 0uLL;
        v122 = (std::__shared_weak_count *)*((_QWORD *)&v145 + 1);
        v145 = v121;
        if (v122)
        {
          v123 = (unint64_t *)&v122->__shared_owners_;
          do
            v124 = __ldaxr(v123);
          while (__stlxr(v124 - 1, v123));
          if (!v124)
          {
            ((void (*)(std::__shared_weak_count *))v122->__on_zero_shared)(v122);
            std::__shared_weak_count::__release_weak(v122);
          }
        }
        v125 = (std::__shared_weak_count *)*((_QWORD *)&v146 + 1);
        if (*((_QWORD *)&v146 + 1))
        {
          v126 = (unint64_t *)(*((_QWORD *)&v146 + 1) + 8);
          do
            v127 = __ldaxr(v126);
          while (__stlxr(v127 - 1, v126));
          if (!v127)
          {
            ((void (*)(std::__shared_weak_count *))v125->__on_zero_shared)(v125);
            std::__shared_weak_count::__release_weak(v125);
          }
        }
        v137 = &v150;
        std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v137);
        for (m = 16; m != -16; m -= 16)
          std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)&v147 + m);
        v30 = (std::__shared_weak_count *)*((_QWORD *)&v140 + 1);
        if (*((_QWORD *)&v140 + 1))
        {
          v129 = (unint64_t *)(*((_QWORD *)&v140 + 1) + 8);
          do
            v32 = __ldaxr(v129);
          while (__stlxr(v32 - 1, v129));
          goto LABEL_164;
        }
        break;
      case 4u:
        v150 = v145;
        if (*((_QWORD *)&v145 + 1))
        {
          v38 = (unint64_t *)(*((_QWORD *)&v145 + 1) + 8);
          do
            v39 = __ldxr(v38);
          while (__stxr(v39 + 1, v38));
        }
        *(_QWORD *)&v147 = &off_24C331510;
        *((_QWORD *)&v147 + 1) = 0;
        v148 = 0uLL;
        v149 = 0;
        std::allocate_shared[abi:ne180100]<mediaplatform::SQLLiteralValue<mediaplatform::Data>,std::allocator<mediaplatform::SQLLiteralValue<mediaplatform::Data>>,mediaplatform::Data,void>(&v136, (const mediaplatform::Data *)&v147);
        v151 = v136;
        v136 = 0uLL;
        v138 = 0;
        v139 = 0;
        v137 = 0;
        *(_QWORD *)&v146 = &v137;
        BYTE8(v146) = 0;
        v40 = operator new(0x20uLL);
        v41 = 0;
        v42 = 0;
        v137 = (__int128 *)v40;
        v138 = v40;
        v139 = v40 + 4;
        do
        {
          v43 = v41;
          v44 = *(&v150 + v42);
          *(_OWORD *)v40 = v44;
          if (*((_QWORD *)&v44 + 1))
          {
            v45 = (unint64_t *)(*((_QWORD *)&v44 + 1) + 8);
            do
              v46 = __ldxr(v45);
            while (__stxr(v46 + 1, v45));
          }
          v40 += 2;
          v41 = 1;
          v42 = 1;
        }
        while ((v43 & 1) == 0);
        v138 = v40;
        std::allocate_shared[abi:ne180100]<mediaplatform::SQLFunctionExpression,std::allocator<mediaplatform::SQLFunctionExpression>,char const(&)[7],std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>,void>(&v140, (_QWORD **)&v137);
        v47 = v140;
        v140 = 0uLL;
        v48 = (std::__shared_weak_count *)*((_QWORD *)&v145 + 1);
        v145 = v47;
        if (v48)
        {
          v49 = (unint64_t *)&v48->__shared_owners_;
          do
            v50 = __ldaxr(v49);
          while (__stlxr(v50 - 1, v49));
          if (!v50)
          {
            ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
            std::__shared_weak_count::__release_weak(v48);
          }
        }
        v51 = (std::__shared_weak_count *)*((_QWORD *)&v140 + 1);
        if (*((_QWORD *)&v140 + 1))
        {
          v52 = (unint64_t *)(*((_QWORD *)&v140 + 1) + 8);
          do
            v53 = __ldaxr(v52);
          while (__stlxr(v53 - 1, v52));
          if (!v53)
          {
            ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
            std::__shared_weak_count::__release_weak(v51);
          }
        }
        *(_QWORD *)&v146 = &v137;
        std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v146);
        for (n = 16; n != -16; n -= 16)
          std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)&v150 + n);
        v55 = (std::__shared_weak_count *)*((_QWORD *)&v136 + 1);
        if (*((_QWORD *)&v136 + 1))
        {
          v56 = (unint64_t *)(*((_QWORD *)&v136 + 1) + 8);
          do
            v57 = __ldaxr(v56);
          while (__stlxr(v57 - 1, v56));
          if (!v57)
          {
            ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
            std::__shared_weak_count::__release_weak(v55);
          }
        }
        if (v149 && *((_QWORD *)&v148 + 1))
          MEMORY[0x20BD27AE4](*((_QWORD *)&v148 + 1), 0x1000C8077774924);
        break;
      default:
        v147 = v145;
        if (*((_QWORD *)&v145 + 1))
        {
          v58 = (unint64_t *)(*((_QWORD *)&v145 + 1) + 8);
          do
            v59 = __ldxr(v58);
          while (__stxr(v59 + 1, v58));
        }
        std::allocate_shared[abi:ne180100]<mediaplatform::SQLLiteralValue<long long>,std::allocator<mediaplatform::SQLLiteralValue<long long>>,int,void>(&v140, 0);
        v148 = v140;
        v140 = 0uLL;
        *(_QWORD *)&v151 = 0;
        v150 = 0uLL;
        v137 = &v150;
        LOBYTE(v138) = 0;
        v60 = operator new(0x20uLL);
        v61 = 0;
        v62 = 0;
        *(_QWORD *)&v150 = v60;
        *((_QWORD *)&v150 + 1) = v60;
        *(_QWORD *)&v151 = v60 + 2;
        do
        {
          v63 = v61;
          v64 = *(&v147 + v62);
          *v60 = v64;
          if (*((_QWORD *)&v64 + 1))
          {
            v65 = (unint64_t *)(*((_QWORD *)&v64 + 1) + 8);
            do
              v66 = __ldxr(v65);
            while (__stxr(v66 + 1, v65));
          }
          ++v60;
          v61 = 1;
          v62 = 1;
        }
        while ((v63 & 1) == 0);
        *((_QWORD *)&v150 + 1) = v60;
        std::allocate_shared[abi:ne180100]<mediaplatform::SQLFunctionExpression,std::allocator<mediaplatform::SQLFunctionExpression>,char const(&)[7],std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>,void>(&v146, (_QWORD **)&v150);
        v67 = v146;
        v146 = 0uLL;
        v68 = (std::__shared_weak_count *)*((_QWORD *)&v145 + 1);
        v145 = v67;
        if (v68)
        {
          v69 = (unint64_t *)&v68->__shared_owners_;
          do
            v70 = __ldaxr(v69);
          while (__stlxr(v70 - 1, v69));
          if (!v70)
          {
            ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
            std::__shared_weak_count::__release_weak(v68);
          }
        }
        v71 = (std::__shared_weak_count *)*((_QWORD *)&v146 + 1);
        if (*((_QWORD *)&v146 + 1))
        {
          v72 = (unint64_t *)(*((_QWORD *)&v146 + 1) + 8);
          do
            v73 = __ldaxr(v72);
          while (__stlxr(v73 - 1, v72));
          if (!v73)
          {
            ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
            std::__shared_weak_count::__release_weak(v71);
          }
        }
        v137 = &v150;
        std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v137);
        for (ii = 16; ii != -16; ii -= 16)
          std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)&v147 + ii);
        v30 = (std::__shared_weak_count *)*((_QWORD *)&v140 + 1);
        if (*((_QWORD *)&v140 + 1))
        {
          v75 = (unint64_t *)(*((_QWORD *)&v140 + 1) + 8);
          do
            v32 = __ldaxr(v75);
          while (__stlxr(v32 - 1, v75));
LABEL_164:
          if (!v32)
          {
            ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
            std::__shared_weak_count::__release_weak(v30);
          }
        }
        break;
    }
  }
  LODWORD(v150) = mlcore::ComparisonPredicateBase::_SQLOperator((mlcore::ComparisonPredicateBase *)a1);
  std::allocate_shared[abi:ne180100]<mediaplatform::SQLBinaryExpression,std::allocator<mediaplatform::SQLBinaryExpression>,std::shared_ptr<mediaplatform::SQLExpression> &,mediaplatform::SQLBinaryExpression::BinaryOperator,std::shared_ptr<mediaplatform::DatabaseBindParameter> &,void>(&v147, v145, *((std::__shared_weak_count **)&v145 + 1), (int *)&v150, &v141);
  *a3 = v147;
  v130 = v142;
  if (v142)
  {
    v131 = (unint64_t *)&v142->__shared_owners_;
    do
      v132 = __ldaxr(v131);
    while (__stlxr(v132 - 1, v131));
    if (!v132)
    {
      ((void (*)(std::__shared_weak_count *))v130->__on_zero_shared)(v130);
      std::__shared_weak_count::__release_weak(v130);
    }
  }
  v133 = (std::__shared_weak_count *)*((_QWORD *)&v145 + 1);
  if (*((_QWORD *)&v145 + 1))
  {
    v134 = (unint64_t *)(*((_QWORD *)&v145 + 1) + 8);
    do
      v135 = __ldaxr(v134);
    while (__stlxr(v135 - 1, v134));
    if (!v135)
    {
      ((void (*)(std::__shared_weak_count *))v133->__on_zero_shared)(v133);
      std::__shared_weak_count::__release_weak(v133);
    }
  }
}

void sub_20A66DD60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25)
{
  uint64_t i;

  std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__destroy_vector::operator()[abi:ne180100](&a12);
  for (i = 16; i != -16; i -= 16)
    std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)(&a25 + i));
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)&a21);
  _Unwind_Resume(a1);
}

void mlcore::ComparisonPredicate<int>::_SQLExpression(uint64_t a1@<X0>, uint64_t *a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  _OWORD *v15;
  char v16;
  uint64_t v17;
  char v18;
  __int128 v19;
  unint64_t *v20;
  unint64_t v21;
  __int128 v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  uint64_t i;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  _QWORD *v33;
  __int128 v34;
  std::__shared_weak_count *v35;
  unint64_t *p_shared_owners;
  unint64_t v37;
  unint64_t *v38;
  unint64_t v39;
  _QWORD *v40;
  char v41;
  uint64_t v42;
  char v43;
  __int128 v44;
  unint64_t *v45;
  unint64_t v46;
  __int128 v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  uint64_t n;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  unint64_t *v58;
  unint64_t v59;
  _OWORD *v60;
  char v61;
  uint64_t v62;
  char v63;
  __int128 v64;
  unint64_t *v65;
  unint64_t v66;
  __int128 v67;
  std::__shared_weak_count *v68;
  unint64_t *v69;
  unint64_t v70;
  std::__shared_weak_count *v71;
  unint64_t *v72;
  unint64_t v73;
  uint64_t ii;
  unint64_t *v75;
  unint64_t *v76;
  unint64_t v77;
  _OWORD *v78;
  char v79;
  uint64_t v80;
  char v81;
  __int128 v82;
  unint64_t *v83;
  unint64_t v84;
  __int128 v85;
  std::__shared_weak_count *v86;
  unint64_t *v87;
  unint64_t v88;
  std::__shared_weak_count *v89;
  unint64_t *v90;
  unint64_t v91;
  uint64_t j;
  unint64_t *v93;
  unint64_t *v94;
  unint64_t v95;
  _OWORD *v96;
  char v97;
  uint64_t v98;
  char v99;
  __int128 v100;
  unint64_t *v101;
  unint64_t v102;
  __int128 v103;
  std::__shared_weak_count *v104;
  unint64_t *v105;
  unint64_t v106;
  std::__shared_weak_count *v107;
  unint64_t *v108;
  unint64_t v109;
  uint64_t k;
  unint64_t *v111;
  unint64_t *v112;
  unint64_t v113;
  _OWORD *v114;
  char v115;
  uint64_t v116;
  char v117;
  __int128 v118;
  unint64_t *v119;
  unint64_t v120;
  __int128 v121;
  std::__shared_weak_count *v122;
  unint64_t *v123;
  unint64_t v124;
  std::__shared_weak_count *v125;
  unint64_t *v126;
  unint64_t v127;
  uint64_t m;
  unint64_t *v129;
  std::__shared_weak_count *v130;
  unint64_t *v131;
  unint64_t v132;
  std::__shared_weak_count *v133;
  unint64_t *v134;
  unint64_t v135;
  __int128 v136;
  __int128 *v137;
  _QWORD *v138;
  _QWORD *v139;
  __int128 v140;
  uint64_t v141;
  std::__shared_weak_count *v142;
  uint64_t v143;
  std::__shared_weak_count *v144;
  __int128 v145;
  __int128 v146;
  __int128 v147;
  __int128 v148;
  char v149;
  __int128 v150;
  __int128 v151;
  uint64_t v152;

  v152 = *MEMORY[0x24BDAC8D0];
  if (!*(_QWORD *)(a1 + 32))
  {
    v33 = operator new(0x28uLL);
    v33[1] = 0;
    v33[2] = 0;
    *v33 = &off_24C33BD08;
    v33[3] = &off_24C335D00;
    *((_DWORD *)v33 + 8) = *(_DWORD *)(a1 + 24);
    *(_QWORD *)&v34 = v33 + 3;
    *((_QWORD *)&v34 + 1) = v33;
    v35 = *(std::__shared_weak_count **)(a1 + 40);
    *(_OWORD *)(a1 + 32) = v34;
    if (v35)
    {
      p_shared_owners = (unint64_t *)&v35->__shared_owners_;
      do
        v37 = __ldaxr(p_shared_owners);
      while (__stlxr(v37 - 1, p_shared_owners));
      if (!v37)
      {
        ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
        std::__shared_weak_count::__release_weak(v35);
      }
    }
  }
  v6 = *(_QWORD *)(a1 + 8);
  v7 = (std::__shared_weak_count *)a2[1];
  v143 = *a2;
  v144 = v7;
  if (v7)
  {
    v8 = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t *))(*(_QWORD *)v6 + 96))(&v145, v6, &v143);
  v10 = v144;
  if (v144)
  {
    v11 = (unint64_t *)&v144->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  std::allocate_shared[abi:ne180100]<mediaplatform::DatabaseBindParameter,std::allocator<mediaplatform::DatabaseBindParameter>,std::shared_ptr<mediaplatform::DatabaseParameter<int>> &,void>(&v141, *(_QWORD *)(a1 + 32), *(std::__shared_weak_count **)(a1 + 40));
  if ((*(_BYTE *)(a1 + 16) & 4) != 0)
  {
    switch((*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 80))(*(_QWORD *)(a1 + 8)))
    {
      case 0u:
        v147 = v145;
        if (*((_QWORD *)&v145 + 1))
        {
          v13 = (unint64_t *)(*((_QWORD *)&v145 + 1) + 8);
          do
            v14 = __ldxr(v13);
          while (__stxr(v14 + 1, v13));
        }
        LODWORD(v136) = 0;
        std::allocate_shared[abi:ne180100]<mediaplatform::SQLLiteralValue<int>,std::allocator<mediaplatform::SQLLiteralValue<int>>,int,void>(&v140, &v136);
        v148 = v140;
        v140 = 0uLL;
        *(_QWORD *)&v151 = 0;
        v150 = 0uLL;
        v137 = &v150;
        LOBYTE(v138) = 0;
        v15 = operator new(0x20uLL);
        v16 = 0;
        v17 = 0;
        *(_QWORD *)&v150 = v15;
        *((_QWORD *)&v150 + 1) = v15;
        *(_QWORD *)&v151 = v15 + 2;
        do
        {
          v18 = v16;
          v19 = *(&v147 + v17);
          *v15 = v19;
          if (*((_QWORD *)&v19 + 1))
          {
            v20 = (unint64_t *)(*((_QWORD *)&v19 + 1) + 8);
            do
              v21 = __ldxr(v20);
            while (__stxr(v21 + 1, v20));
          }
          ++v15;
          v16 = 1;
          v17 = 1;
        }
        while ((v18 & 1) == 0);
        *((_QWORD *)&v150 + 1) = v15;
        std::allocate_shared[abi:ne180100]<mediaplatform::SQLFunctionExpression,std::allocator<mediaplatform::SQLFunctionExpression>,char const(&)[7],std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>,void>(&v146, (_QWORD **)&v150);
        v22 = v146;
        v146 = 0uLL;
        v23 = (std::__shared_weak_count *)*((_QWORD *)&v145 + 1);
        v145 = v22;
        if (v23)
        {
          v24 = (unint64_t *)&v23->__shared_owners_;
          do
            v25 = __ldaxr(v24);
          while (__stlxr(v25 - 1, v24));
          if (!v25)
          {
            ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
            std::__shared_weak_count::__release_weak(v23);
          }
        }
        v26 = (std::__shared_weak_count *)*((_QWORD *)&v146 + 1);
        if (*((_QWORD *)&v146 + 1))
        {
          v27 = (unint64_t *)(*((_QWORD *)&v146 + 1) + 8);
          do
            v28 = __ldaxr(v27);
          while (__stlxr(v28 - 1, v27));
          if (!v28)
          {
            ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
            std::__shared_weak_count::__release_weak(v26);
          }
        }
        v137 = &v150;
        std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v137);
        for (i = 16; i != -16; i -= 16)
          std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)&v147 + i);
        v30 = (std::__shared_weak_count *)*((_QWORD *)&v140 + 1);
        if (*((_QWORD *)&v140 + 1))
        {
          v31 = (unint64_t *)(*((_QWORD *)&v140 + 1) + 8);
          do
            v32 = __ldaxr(v31);
          while (__stlxr(v32 - 1, v31));
          goto LABEL_164;
        }
        break;
      case 1u:
        v147 = v145;
        if (*((_QWORD *)&v145 + 1))
        {
          v76 = (unint64_t *)(*((_QWORD *)&v145 + 1) + 8);
          do
            v77 = __ldxr(v76);
          while (__stxr(v77 + 1, v76));
        }
        std::allocate_shared[abi:ne180100]<mediaplatform::SQLLiteralValue<long long>,std::allocator<mediaplatform::SQLLiteralValue<long long>>,int,void>(&v140, 0);
        v148 = v140;
        v140 = 0uLL;
        *(_QWORD *)&v151 = 0;
        v150 = 0uLL;
        v137 = &v150;
        LOBYTE(v138) = 0;
        v78 = operator new(0x20uLL);
        v79 = 0;
        v80 = 0;
        *(_QWORD *)&v150 = v78;
        *((_QWORD *)&v150 + 1) = v78;
        *(_QWORD *)&v151 = v78 + 2;
        do
        {
          v81 = v79;
          v82 = *(&v147 + v80);
          *v78 = v82;
          if (*((_QWORD *)&v82 + 1))
          {
            v83 = (unint64_t *)(*((_QWORD *)&v82 + 1) + 8);
            do
              v84 = __ldxr(v83);
            while (__stxr(v84 + 1, v83));
          }
          ++v78;
          v79 = 1;
          v80 = 1;
        }
        while ((v81 & 1) == 0);
        *((_QWORD *)&v150 + 1) = v78;
        std::allocate_shared[abi:ne180100]<mediaplatform::SQLFunctionExpression,std::allocator<mediaplatform::SQLFunctionExpression>,char const(&)[7],std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>,void>(&v146, (_QWORD **)&v150);
        v85 = v146;
        v146 = 0uLL;
        v86 = (std::__shared_weak_count *)*((_QWORD *)&v145 + 1);
        v145 = v85;
        if (v86)
        {
          v87 = (unint64_t *)&v86->__shared_owners_;
          do
            v88 = __ldaxr(v87);
          while (__stlxr(v88 - 1, v87));
          if (!v88)
          {
            ((void (*)(std::__shared_weak_count *))v86->__on_zero_shared)(v86);
            std::__shared_weak_count::__release_weak(v86);
          }
        }
        v89 = (std::__shared_weak_count *)*((_QWORD *)&v146 + 1);
        if (*((_QWORD *)&v146 + 1))
        {
          v90 = (unint64_t *)(*((_QWORD *)&v146 + 1) + 8);
          do
            v91 = __ldaxr(v90);
          while (__stlxr(v91 - 1, v90));
          if (!v91)
          {
            ((void (*)(std::__shared_weak_count *))v89->__on_zero_shared)(v89);
            std::__shared_weak_count::__release_weak(v89);
          }
        }
        v137 = &v150;
        std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v137);
        for (j = 16; j != -16; j -= 16)
          std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)&v147 + j);
        v30 = (std::__shared_weak_count *)*((_QWORD *)&v140 + 1);
        if (*((_QWORD *)&v140 + 1))
        {
          v93 = (unint64_t *)(*((_QWORD *)&v140 + 1) + 8);
          do
            v32 = __ldaxr(v93);
          while (__stlxr(v32 - 1, v93));
          goto LABEL_164;
        }
        break;
      case 2u:
        v147 = v145;
        if (*((_QWORD *)&v145 + 1))
        {
          v94 = (unint64_t *)(*((_QWORD *)&v145 + 1) + 8);
          do
            v95 = __ldxr(v94);
          while (__stxr(v95 + 1, v94));
        }
        std::allocate_shared[abi:ne180100]<mediaplatform::SQLLiteralValue<double>,std::allocator<mediaplatform::SQLLiteralValue<double>>,int,void>(&v140, 0);
        v148 = v140;
        v140 = 0uLL;
        *(_QWORD *)&v151 = 0;
        v150 = 0uLL;
        v137 = &v150;
        LOBYTE(v138) = 0;
        v96 = operator new(0x20uLL);
        v97 = 0;
        v98 = 0;
        *(_QWORD *)&v150 = v96;
        *((_QWORD *)&v150 + 1) = v96;
        *(_QWORD *)&v151 = v96 + 2;
        do
        {
          v99 = v97;
          v100 = *(&v147 + v98);
          *v96 = v100;
          if (*((_QWORD *)&v100 + 1))
          {
            v101 = (unint64_t *)(*((_QWORD *)&v100 + 1) + 8);
            do
              v102 = __ldxr(v101);
            while (__stxr(v102 + 1, v101));
          }
          ++v96;
          v97 = 1;
          v98 = 1;
        }
        while ((v99 & 1) == 0);
        *((_QWORD *)&v150 + 1) = v96;
        std::allocate_shared[abi:ne180100]<mediaplatform::SQLFunctionExpression,std::allocator<mediaplatform::SQLFunctionExpression>,char const(&)[7],std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>,void>(&v146, (_QWORD **)&v150);
        v103 = v146;
        v146 = 0uLL;
        v104 = (std::__shared_weak_count *)*((_QWORD *)&v145 + 1);
        v145 = v103;
        if (v104)
        {
          v105 = (unint64_t *)&v104->__shared_owners_;
          do
            v106 = __ldaxr(v105);
          while (__stlxr(v106 - 1, v105));
          if (!v106)
          {
            ((void (*)(std::__shared_weak_count *))v104->__on_zero_shared)(v104);
            std::__shared_weak_count::__release_weak(v104);
          }
        }
        v107 = (std::__shared_weak_count *)*((_QWORD *)&v146 + 1);
        if (*((_QWORD *)&v146 + 1))
        {
          v108 = (unint64_t *)(*((_QWORD *)&v146 + 1) + 8);
          do
            v109 = __ldaxr(v108);
          while (__stlxr(v109 - 1, v108));
          if (!v109)
          {
            ((void (*)(std::__shared_weak_count *))v107->__on_zero_shared)(v107);
            std::__shared_weak_count::__release_weak(v107);
          }
        }
        v137 = &v150;
        std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v137);
        for (k = 16; k != -16; k -= 16)
          std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)&v147 + k);
        v30 = (std::__shared_weak_count *)*((_QWORD *)&v140 + 1);
        if (*((_QWORD *)&v140 + 1))
        {
          v111 = (unint64_t *)(*((_QWORD *)&v140 + 1) + 8);
          do
            v32 = __ldaxr(v111);
          while (__stlxr(v32 - 1, v111));
          goto LABEL_164;
        }
        break;
      case 3u:
        v147 = v145;
        if (*((_QWORD *)&v145 + 1))
        {
          v112 = (unint64_t *)(*((_QWORD *)&v145 + 1) + 8);
          do
            v113 = __ldxr(v112);
          while (__stxr(v113 + 1, v112));
        }
        std::allocate_shared[abi:ne180100]<mediaplatform::SQLLiteralValue<std::string>,std::allocator<mediaplatform::SQLLiteralValue<std::string>>,char const(&)[1],void>(&v140);
        v148 = v140;
        v140 = 0uLL;
        *(_QWORD *)&v151 = 0;
        v150 = 0uLL;
        v137 = &v150;
        LOBYTE(v138) = 0;
        v114 = operator new(0x20uLL);
        v115 = 0;
        v116 = 0;
        *(_QWORD *)&v150 = v114;
        *((_QWORD *)&v150 + 1) = v114;
        *(_QWORD *)&v151 = v114 + 2;
        do
        {
          v117 = v115;
          v118 = *(&v147 + v116);
          *v114 = v118;
          if (*((_QWORD *)&v118 + 1))
          {
            v119 = (unint64_t *)(*((_QWORD *)&v118 + 1) + 8);
            do
              v120 = __ldxr(v119);
            while (__stxr(v120 + 1, v119));
          }
          ++v114;
          v115 = 1;
          v116 = 1;
        }
        while ((v117 & 1) == 0);
        *((_QWORD *)&v150 + 1) = v114;
        std::allocate_shared[abi:ne180100]<mediaplatform::SQLFunctionExpression,std::allocator<mediaplatform::SQLFunctionExpression>,char const(&)[7],std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>,void>(&v146, (_QWORD **)&v150);
        v121 = v146;
        v146 = 0uLL;
        v122 = (std::__shared_weak_count *)*((_QWORD *)&v145 + 1);
        v145 = v121;
        if (v122)
        {
          v123 = (unint64_t *)&v122->__shared_owners_;
          do
            v124 = __ldaxr(v123);
          while (__stlxr(v124 - 1, v123));
          if (!v124)
          {
            ((void (*)(std::__shared_weak_count *))v122->__on_zero_shared)(v122);
            std::__shared_weak_count::__release_weak(v122);
          }
        }
        v125 = (std::__shared_weak_count *)*((_QWORD *)&v146 + 1);
        if (*((_QWORD *)&v146 + 1))
        {
          v126 = (unint64_t *)(*((_QWORD *)&v146 + 1) + 8);
          do
            v127 = __ldaxr(v126);
          while (__stlxr(v127 - 1, v126));
          if (!v127)
          {
            ((void (*)(std::__shared_weak_count *))v125->__on_zero_shared)(v125);
            std::__shared_weak_count::__release_weak(v125);
          }
        }
        v137 = &v150;
        std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v137);
        for (m = 16; m != -16; m -= 16)
          std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)&v147 + m);
        v30 = (std::__shared_weak_count *)*((_QWORD *)&v140 + 1);
        if (*((_QWORD *)&v140 + 1))
        {
          v129 = (unint64_t *)(*((_QWORD *)&v140 + 1) + 8);
          do
            v32 = __ldaxr(v129);
          while (__stlxr(v32 - 1, v129));
          goto LABEL_164;
        }
        break;
      case 4u:
        v150 = v145;
        if (*((_QWORD *)&v145 + 1))
        {
          v38 = (unint64_t *)(*((_QWORD *)&v145 + 1) + 8);
          do
            v39 = __ldxr(v38);
          while (__stxr(v39 + 1, v38));
        }
        *(_QWORD *)&v147 = &off_24C331510;
        *((_QWORD *)&v147 + 1) = 0;
        v148 = 0uLL;
        v149 = 0;
        std::allocate_shared[abi:ne180100]<mediaplatform::SQLLiteralValue<mediaplatform::Data>,std::allocator<mediaplatform::SQLLiteralValue<mediaplatform::Data>>,mediaplatform::Data,void>(&v136, (const mediaplatform::Data *)&v147);
        v151 = v136;
        v136 = 0uLL;
        v138 = 0;
        v139 = 0;
        v137 = 0;
        *(_QWORD *)&v146 = &v137;
        BYTE8(v146) = 0;
        v40 = operator new(0x20uLL);
        v41 = 0;
        v42 = 0;
        v137 = (__int128 *)v40;
        v138 = v40;
        v139 = v40 + 4;
        do
        {
          v43 = v41;
          v44 = *(&v150 + v42);
          *(_OWORD *)v40 = v44;
          if (*((_QWORD *)&v44 + 1))
          {
            v45 = (unint64_t *)(*((_QWORD *)&v44 + 1) + 8);
            do
              v46 = __ldxr(v45);
            while (__stxr(v46 + 1, v45));
          }
          v40 += 2;
          v41 = 1;
          v42 = 1;
        }
        while ((v43 & 1) == 0);
        v138 = v40;
        std::allocate_shared[abi:ne180100]<mediaplatform::SQLFunctionExpression,std::allocator<mediaplatform::SQLFunctionExpression>,char const(&)[7],std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>,void>(&v140, (_QWORD **)&v137);
        v47 = v140;
        v140 = 0uLL;
        v48 = (std::__shared_weak_count *)*((_QWORD *)&v145 + 1);
        v145 = v47;
        if (v48)
        {
          v49 = (unint64_t *)&v48->__shared_owners_;
          do
            v50 = __ldaxr(v49);
          while (__stlxr(v50 - 1, v49));
          if (!v50)
          {
            ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
            std::__shared_weak_count::__release_weak(v48);
          }
        }
        v51 = (std::__shared_weak_count *)*((_QWORD *)&v140 + 1);
        if (*((_QWORD *)&v140 + 1))
        {
          v52 = (unint64_t *)(*((_QWORD *)&v140 + 1) + 8);
          do
            v53 = __ldaxr(v52);
          while (__stlxr(v53 - 1, v52));
          if (!v53)
          {
            ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
            std::__shared_weak_count::__release_weak(v51);
          }
        }
        *(_QWORD *)&v146 = &v137;
        std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v146);
        for (n = 16; n != -16; n -= 16)
          std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)&v150 + n);
        v55 = (std::__shared_weak_count *)*((_QWORD *)&v136 + 1);
        if (*((_QWORD *)&v136 + 1))
        {
          v56 = (unint64_t *)(*((_QWORD *)&v136 + 1) + 8);
          do
            v57 = __ldaxr(v56);
          while (__stlxr(v57 - 1, v56));
          if (!v57)
          {
            ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
            std::__shared_weak_count::__release_weak(v55);
          }
        }
        if (v149 && *((_QWORD *)&v148 + 1))
          MEMORY[0x20BD27AE4](*((_QWORD *)&v148 + 1), 0x1000C8077774924);
        break;
      default:
        v147 = v145;
        if (*((_QWORD *)&v145 + 1))
        {
          v58 = (unint64_t *)(*((_QWORD *)&v145 + 1) + 8);
          do
            v59 = __ldxr(v58);
          while (__stxr(v59 + 1, v58));
        }
        std::allocate_shared[abi:ne180100]<mediaplatform::SQLLiteralValue<long long>,std::allocator<mediaplatform::SQLLiteralValue<long long>>,int,void>(&v140, 0);
        v148 = v140;
        v140 = 0uLL;
        *(_QWORD *)&v151 = 0;
        v150 = 0uLL;
        v137 = &v150;
        LOBYTE(v138) = 0;
        v60 = operator new(0x20uLL);
        v61 = 0;
        v62 = 0;
        *(_QWORD *)&v150 = v60;
        *((_QWORD *)&v150 + 1) = v60;
        *(_QWORD *)&v151 = v60 + 2;
        do
        {
          v63 = v61;
          v64 = *(&v147 + v62);
          *v60 = v64;
          if (*((_QWORD *)&v64 + 1))
          {
            v65 = (unint64_t *)(*((_QWORD *)&v64 + 1) + 8);
            do
              v66 = __ldxr(v65);
            while (__stxr(v66 + 1, v65));
          }
          ++v60;
          v61 = 1;
          v62 = 1;
        }
        while ((v63 & 1) == 0);
        *((_QWORD *)&v150 + 1) = v60;
        std::allocate_shared[abi:ne180100]<mediaplatform::SQLFunctionExpression,std::allocator<mediaplatform::SQLFunctionExpression>,char const(&)[7],std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>,void>(&v146, (_QWORD **)&v150);
        v67 = v146;
        v146 = 0uLL;
        v68 = (std::__shared_weak_count *)*((_QWORD *)&v145 + 1);
        v145 = v67;
        if (v68)
        {
          v69 = (unint64_t *)&v68->__shared_owners_;
          do
            v70 = __ldaxr(v69);
          while (__stlxr(v70 - 1, v69));
          if (!v70)
          {
            ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
            std::__shared_weak_count::__release_weak(v68);
          }
        }
        v71 = (std::__shared_weak_count *)*((_QWORD *)&v146 + 1);
        if (*((_QWORD *)&v146 + 1))
        {
          v72 = (unint64_t *)(*((_QWORD *)&v146 + 1) + 8);
          do
            v73 = __ldaxr(v72);
          while (__stlxr(v73 - 1, v72));
          if (!v73)
          {
            ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
            std::__shared_weak_count::__release_weak(v71);
          }
        }
        v137 = &v150;
        std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v137);
        for (ii = 16; ii != -16; ii -= 16)
          std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)&v147 + ii);
        v30 = (std::__shared_weak_count *)*((_QWORD *)&v140 + 1);
        if (*((_QWORD *)&v140 + 1))
        {
          v75 = (unint64_t *)(*((_QWORD *)&v140 + 1) + 8);
          do
            v32 = __ldaxr(v75);
          while (__stlxr(v32 - 1, v75));
LABEL_164:
          if (!v32)
          {
            ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
            std::__shared_weak_count::__release_weak(v30);
          }
        }
        break;
    }
  }
  LODWORD(v150) = mlcore::ComparisonPredicateBase::_SQLOperator((mlcore::ComparisonPredicateBase *)a1);
  std::allocate_shared[abi:ne180100]<mediaplatform::SQLBinaryExpression,std::allocator<mediaplatform::SQLBinaryExpression>,std::shared_ptr<mediaplatform::SQLExpression> &,mediaplatform::SQLBinaryExpression::BinaryOperator,std::shared_ptr<mediaplatform::DatabaseBindParameter> &,void>(&v147, v145, *((std::__shared_weak_count **)&v145 + 1), (int *)&v150, &v141);
  *a3 = v147;
  v130 = v142;
  if (v142)
  {
    v131 = (unint64_t *)&v142->__shared_owners_;
    do
      v132 = __ldaxr(v131);
    while (__stlxr(v132 - 1, v131));
    if (!v132)
    {
      ((void (*)(std::__shared_weak_count *))v130->__on_zero_shared)(v130);
      std::__shared_weak_count::__release_weak(v130);
    }
  }
  v133 = (std::__shared_weak_count *)*((_QWORD *)&v145 + 1);
  if (*((_QWORD *)&v145 + 1))
  {
    v134 = (unint64_t *)(*((_QWORD *)&v145 + 1) + 8);
    do
      v135 = __ldaxr(v134);
    while (__stlxr(v135 - 1, v134));
    if (!v135)
    {
      ((void (*)(std::__shared_weak_count *))v133->__on_zero_shared)(v133);
      std::__shared_weak_count::__release_weak(v133);
    }
  }
}

void sub_20A66EB04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25)
{
  uint64_t i;

  std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__destroy_vector::operator()[abi:ne180100](&a12);
  for (i = 16; i != -16; i -= 16)
    std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)(&a25 + i));
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)&a21);
  _Unwind_Resume(a1);
}

uint64_t mlcore::ComparisonPredicateBase::_SQLOperator(mlcore::ComparisonPredicateBase *this)
{
  int v1;
  uint64_t result;
  std::runtime_error *exception;

  v1 = *((_DWORD *)this + 5);
  result = 14;
  switch(v1)
  {
    case 0:
      if ((*(unsigned int (**)(_QWORD))(**((_QWORD **)this + 1) + 80))(*((_QWORD *)this + 1)) == 3
        && (*((_BYTE *)this + 16) & 1) != 0)
      {
        goto LABEL_2;
      }
      result = 13;
      break;
    case 1:
      return result;
    case 2:
      return 17;
    case 3:
      return 15;
    case 4:
      return 18;
    case 5:
      return 16;
    case 7:
      return 10;
    case 8:
      return 11;
    case 9:
    case 10:
    case 11:
    case 12:
LABEL_2:
      result = 22;
      break;
    default:
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "unknown comparison operator");
      __cxa_throw(exception, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
  }
  return result;
}

void sub_20A66EDD4(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void mlcore::InPredicate<int>::_SQLExpression(uint64_t a1@<X0>, uint64_t *a2@<X1>, _OWORD *a3@<X8>)
{
  std::__shared_weak_count *v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  _OWORD *v11;
  char v12;
  uint64_t v13;
  char v14;
  __int128 v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t i;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  uint64_t *j;
  int v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  __int128 v35;
  uint64_t v36;
  _OWORD *v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  _QWORD *v44;
  _QWORD *v45;
  char *v46;
  __int128 v47;
  int64x2_t v48;
  char *v49;
  unint64_t v50;
  uint64_t v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  __int128 v65;
  uint64_t v66;
  std::__shared_weak_count *v67;
  uint64_t v68;
  std::__shared_weak_count *v69;
  __int128 v70;
  __int128 v71;
  int64x2_t v72;
  char *v73;
  __int128 v74;
  __int128 v75;
  _BYTE v76[32];
  char **v77;
  uint64_t v78;

  v78 = *MEMORY[0x24BDAC8D0];
  if (*(_QWORD *)(a1 + 64))
  {
    v6 = (std::__shared_weak_count *)operator new(0x28uLL);
    v6->__shared_owners_ = 0;
    v6->__shared_weak_owners_ = 0;
    v6->__vftable = (std::__shared_weak_count_vtbl *)&off_24C33BD08;
    v6[1].__vftable = (std::__shared_weak_count_vtbl *)&off_24C335D00;
    LODWORD(v6[1].__shared_owners_) = *(_DWORD *)(a1 + 56);
    *(_QWORD *)&v74 = v6 + 1;
    *((_QWORD *)&v74 + 1) = v6;
    std::allocate_shared[abi:ne180100]<mediaplatform::DatabaseBindParameter,std::allocator<mediaplatform::DatabaseBindParameter>,std::shared_ptr<mediaplatform::DatabaseParameter<int>> &,void>(&v71, (uint64_t)&v6[1], v6);
    *(_OWORD *)v76 = v71;
    v71 = 0uLL;
    v7 = *(_QWORD *)(a1 + 8);
    v8 = (std::__shared_weak_count *)a2[1];
    v68 = *a2;
    v69 = v8;
    if (v8)
    {
      p_shared_owners = (unint64_t *)&v8->__shared_owners_;
      do
        v10 = __ldxr(p_shared_owners);
      while (__stxr(v10 + 1, p_shared_owners));
    }
    (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t *))(*(_QWORD *)v7 + 96))(&v70, v7, &v68);
    *(_OWORD *)&v76[16] = v70;
    v70 = 0uLL;
    v73 = 0;
    v72 = 0uLL;
    *(_QWORD *)&v75 = &v72;
    BYTE8(v75) = 0;
    v11 = operator new(0x20uLL);
    v12 = 0;
    v13 = 0;
    v72.i64[0] = (uint64_t)v11;
    v72.i64[1] = (uint64_t)v11;
    v73 = (char *)(v11 + 2);
    do
    {
      v14 = v12;
      v15 = *(_OWORD *)&v76[16 * v13];
      *v11 = v15;
      if (*((_QWORD *)&v15 + 1))
      {
        v16 = (unint64_t *)(*((_QWORD *)&v15 + 1) + 8);
        do
          v17 = __ldxr(v16);
        while (__stxr(v17 + 1, v16));
      }
      ++v11;
      v12 = 1;
      v13 = 1;
    }
    while ((v14 & 1) == 0);
    v72.i64[1] = (uint64_t)v11;
    for (i = 16; i != -16; i -= 16)
      std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)&v76[i]);
    v19 = (std::__shared_weak_count *)*((_QWORD *)&v70 + 1);
    if (*((_QWORD *)&v70 + 1))
    {
      v20 = (unint64_t *)(*((_QWORD *)&v70 + 1) + 8);
      do
        v21 = __ldaxr(v20);
      while (__stlxr(v21 - 1, v20));
      if (!v21)
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
    }
    v22 = v69;
    if (v69)
    {
      v23 = (unint64_t *)&v69->__shared_owners_;
      do
        v24 = __ldaxr(v23);
      while (__stlxr(v24 - 1, v23));
      if (!v24)
      {
        ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
        std::__shared_weak_count::__release_weak(v22);
      }
    }
    v25 = (std::__shared_weak_count *)*((_QWORD *)&v71 + 1);
    if (*((_QWORD *)&v71 + 1))
    {
      v26 = (unint64_t *)(*((_QWORD *)&v71 + 1) + 8);
      do
        v27 = __ldaxr(v26);
      while (__stlxr(v27 - 1, v26));
      if (!v27)
      {
        ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
        std::__shared_weak_count::__release_weak(v25);
      }
    }
    std::string::basic_string[abi:ne180100]<0>(v76, "HashtableLookupInt");
    std::allocate_shared[abi:ne180100]<mediaplatform::SQLFunctionExpression,std::allocator<mediaplatform::SQLFunctionExpression>,std::string,std::vector<std::shared_ptr<mediaplatform::SQLExpression const>> &,void>(&v75, (__int128 *)v76, &v72);
    *a3 = v75;
    if ((v76[23] & 0x80000000) != 0)
      operator delete(*(void **)v76);
    *(_QWORD *)v76 = &v72;
    std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__destroy_vector::operator()[abi:ne180100]((void ***)v76);
    v28 = (std::__shared_weak_count *)*((_QWORD *)&v74 + 1);
    if (*((_QWORD *)&v74 + 1))
    {
      v29 = (unint64_t *)(*((_QWORD *)&v74 + 1) + 8);
      do
        v30 = __ldaxr(v29);
      while (__stlxr(v30 - 1, v29));
      if (!v30)
      {
        ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
        std::__shared_weak_count::__release_weak(v28);
      }
    }
  }
  else
  {
    v72 = 0uLL;
    v73 = 0;
    for (j = *(uint64_t **)(a1 + 32); j; j = (uint64_t *)*j)
    {
      v32 = *((_DWORD *)j + 4);
      v33 = (std::__shared_weak_count *)operator new(0x28uLL);
      v33->__shared_owners_ = 0;
      v34 = (unint64_t *)&v33->__shared_owners_;
      v33->__shared_weak_owners_ = 0;
      v33->__vftable = (std::__shared_weak_count_vtbl *)&off_24C33BD08;
      v33[1].__vftable = (std::__shared_weak_count_vtbl *)&off_24C335D00;
      LODWORD(v33[1].__shared_owners_) = v32;
      *(_QWORD *)&v75 = v33 + 1;
      *((_QWORD *)&v75 + 1) = v33;
      std::allocate_shared[abi:ne180100]<mediaplatform::DatabaseBindParameter,std::allocator<mediaplatform::DatabaseBindParameter>,std::shared_ptr<mediaplatform::DatabaseParameter<int>> &,void>(&v71, (uint64_t)&v33[1], v33);
      v35 = v71;
      v74 = v71;
      v71 = 0uLL;
      v36 = v72.i64[1];
      if (v72.i64[1] >= (unint64_t)v73)
      {
        v65 = v35;
        v38 = (v72.i64[1] - v72.i64[0]) >> 4;
        if ((unint64_t)(v38 + 1) >> 60)
          std::vector<std::string>::__throw_length_error[abi:ne180100]();
        v39 = (uint64_t)&v73[-v72.i64[0]] >> 3;
        if (v39 <= v38 + 1)
          v39 = v38 + 1;
        if ((unint64_t)&v73[-v72.i64[0]] >= 0x7FFFFFFFFFFFFFF0)
          v40 = 0xFFFFFFFFFFFFFFFLL;
        else
          v40 = v39;
        v77 = &v73;
        v41 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<mediaplatform::DatabaseParameterBase>>>(v40);
        v43 = &v41[16 * v38];
        *(_OWORD *)v43 = v65;
        v74 = 0uLL;
        v44 = (_QWORD *)v72.i64[1];
        v45 = (_QWORD *)v72.i64[0];
        if (v72.i64[1] == v72.i64[0])
        {
          v48 = vdupq_n_s64(v72.u64[1]);
          v46 = &v41[16 * v38];
        }
        else
        {
          v46 = &v41[16 * v38];
          do
          {
            v47 = *((_OWORD *)v44 - 1);
            v44 -= 2;
            *((_OWORD *)v46 - 1) = v47;
            v46 -= 16;
            *v44 = 0;
            v44[1] = 0;
          }
          while (v44 != v45);
          v48 = v72;
        }
        v37 = v43 + 16;
        v72.i64[0] = (uint64_t)v46;
        v72.i64[1] = (uint64_t)(v43 + 16);
        *(int64x2_t *)&v76[8] = v48;
        v49 = v73;
        v73 = &v41[16 * v42];
        *(_QWORD *)&v76[24] = v49;
        *(_QWORD *)v76 = v48.i64[0];
        std::__split_buffer<std::shared_ptr<mediaplatform::SQLExpression const>>::~__split_buffer((uint64_t)v76);
      }
      else
      {
        *(_OWORD *)v72.i64[1] = v35;
        v37 = (_OWORD *)(v36 + 16);
        v74 = 0uLL;
      }
      v72.i64[1] = (uint64_t)v37;
      do
        v50 = __ldaxr(v34);
      while (__stlxr(v50 - 1, v34));
      if (!v50)
      {
        ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
        std::__shared_weak_count::__release_weak(v33);
      }
    }
    v51 = *(_QWORD *)(a1 + 8);
    v52 = (std::__shared_weak_count *)a2[1];
    v66 = *a2;
    v67 = v52;
    if (v52)
    {
      v53 = (unint64_t *)&v52->__shared_owners_;
      do
        v54 = __ldxr(v53);
      while (__stxr(v54 + 1, v53));
    }
    (*(void (**)(_BYTE *__return_ptr, uint64_t, uint64_t *))(*(_QWORD *)v51 + 96))(v76, v51, &v66);
    v55 = v67;
    if (v67)
    {
      v56 = (unint64_t *)&v67->__shared_owners_;
      do
        v57 = __ldaxr(v56);
      while (__stlxr(v57 - 1, v56));
      if (!v57)
      {
        ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
        std::__shared_weak_count::__release_weak(v55);
      }
    }
    std::allocate_shared[abi:ne180100]<mediaplatform::SQLExpressionList,std::allocator<mediaplatform::SQLExpressionList>,std::vector<std::shared_ptr<mediaplatform::SQLExpression const>> &,void>(&v75, (char *)v72.i64[0], (char *)v72.i64[1]);
    LODWORD(v71) = 21;
    std::allocate_shared[abi:ne180100]<mediaplatform::SQLBinaryExpression,std::allocator<mediaplatform::SQLBinaryExpression>,std::shared_ptr<mediaplatform::SQLExpression> &,mediaplatform::SQLBinaryExpression::BinaryOperator,std::shared_ptr<mediaplatform::DatabaseBindParameter> &,void>(&v74, *(uint64_t *)v76, *(std::__shared_weak_count **)&v76[8], (int *)&v71, (uint64_t *)&v75);
    *a3 = v74;
    v58 = (std::__shared_weak_count *)*((_QWORD *)&v75 + 1);
    if (*((_QWORD *)&v75 + 1))
    {
      v59 = (unint64_t *)(*((_QWORD *)&v75 + 1) + 8);
      do
        v60 = __ldaxr(v59);
      while (__stlxr(v60 - 1, v59));
      if (!v60)
      {
        ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
        std::__shared_weak_count::__release_weak(v58);
      }
    }
    v61 = *(std::__shared_weak_count **)&v76[8];
    if (*(_QWORD *)&v76[8])
    {
      v62 = (unint64_t *)(*(_QWORD *)&v76[8] + 8);
      do
        v63 = __ldaxr(v62);
      while (__stlxr(v63 - 1, v62));
      if (!v63)
      {
        ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
        std::__shared_weak_count::__release_weak(v61);
      }
    }
    *(_QWORD *)v76 = &v72;
    std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__destroy_vector::operator()[abi:ne180100]((void ***)v76);
  }
}

void sub_20A66F350(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void **a27)
{
  uint64_t v27;

  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)&a27);
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100](v27 - 144);
  a27 = (void **)&a21;
  std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__destroy_vector::operator()[abi:ne180100](&a27);
  _Unwind_Resume(a1);
}

void mlcore::ForeignProperty<int>::_SQLExpression(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;

  v2 = *(_QWORD *)(a1 + 80);
  v3 = (std::__shared_weak_count *)a2[1];
  v9 = *a2;
  v10 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v2 + 96))(v2, &v9);
  v6 = v10;
  if (v10)
  {
    v7 = (unint64_t *)&v10->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_20A66F4F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_QWORD *mlcore::CreateNotPredicate@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;

  v3 = *result;
  if (*result)
  {
    v4 = result;
    result = operator new(0x30uLL);
    result[1] = 0;
    result[2] = 0;
    *result = &off_24C33C638;
    result[3] = &off_24C336E90;
    v5 = v4[1];
    result[4] = v3;
    result[5] = v5;
    if (v5)
    {
      v6 = (unint64_t *)(v5 + 8);
      do
        v7 = __ldxr(v6);
      while (__stxr(v7 + 1, v6));
    }
    *a2 = result + 3;
    a2[1] = result;
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
  }
  return result;
}

uint64_t mlcore::ItemPropertyStoreCloudID(mlcore *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&mlcore::ItemPropertyStoreCloudID(void)::once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&mlcore::ItemPropertyStoreCloudID(void)::once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyStoreCloudID(void)::$_0 &&>>);
  }
  return mlcore::ItemPropertyStoreCloudID(void)::property;
}

uint64_t mlcore::ItemPropertyIsMusicShow(mlcore *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&mlcore::ItemPropertyIsMusicShow(void)::once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&mlcore::ItemPropertyIsMusicShow(void)::once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyIsMusicShow(void)::$_0 &&>>);
  }
  return mlcore::ItemPropertyIsMusicShow(void)::property;
}

uint64_t mlcore::ItemPropertyStoreID(mlcore *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&mlcore::ItemPropertyStoreID(void)::once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&mlcore::ItemPropertyStoreID(void)::once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyStoreID(void)::$_0 &&>>);
  }
  return mlcore::ItemPropertyStoreID(void)::property;
}

uint64_t mlcore::TypedEntityClass<mlcore::TVSeason>::databaseTable()
{
  return *(_QWORD *)mediaplatform::Singleton<mlcore::AlbumTable>::sharedInstance();
}

uint64_t mlcore::ItemPropertyStoreCloudUniversalLibraryID(mlcore *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&mlcore::ItemPropertyStoreCloudUniversalLibraryID(void)::once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&mlcore::ItemPropertyStoreCloudUniversalLibraryID(void)::once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyStoreCloudUniversalLibraryID(void)::$_0 &&>>);
  }
  return mlcore::ItemPropertyStoreCloudUniversalLibraryID(void)::property;
}

uint64_t mlcore::ItemPropertySubscriptionStoreItemID(mlcore *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&mlcore::ItemPropertySubscriptionStoreItemID(void)::once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&mlcore::ItemPropertySubscriptionStoreItemID(void)::once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertySubscriptionStoreItemID(void)::$_0 &&>>);
  }
  return mlcore::ItemPropertySubscriptionStoreItemID(void)::property;
}

uint64_t mlcore::ItemPropertyStoreCloudAlbumID(mlcore *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&mlcore::ItemPropertyStoreCloudAlbumID(void)::once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&mlcore::ItemPropertyStoreCloudAlbumID(void)::once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyStoreCloudAlbumID(void)::$_0 &&>>);
  }
  return mlcore::ItemPropertyStoreCloudAlbumID(void)::property;
}

_QWORD *mlcore::MultiEntityQuery::setPredicateForEntityClass(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  _QWORD *v6;
  uint64_t v8;

  v8 = a3;
  std::__hash_table<mlcore::EntityClass *,std::hash<mlcore::EntityClass *>,std::equal_to<mlcore::EntityClass *>,std::allocator<mlcore::EntityClass *>>::__emplace_unique_key_args<mlcore::EntityClass *,mlcore::EntityClass * const&>((float *)(a1 + 128), a3, a3);
  v6 = std::__hash_table<std::__hash_value_type<mlcore::EntityClass *,std::shared_ptr<mlcore::Predicate>>,std::__unordered_map_hasher<mlcore::EntityClass *,std::__hash_value_type<mlcore::EntityClass *,std::shared_ptr<mlcore::Predicate>>,std::hash<mlcore::EntityClass *>,std::equal_to<mlcore::EntityClass *>,true>,std::__unordered_map_equal<mlcore::EntityClass *,std::__hash_value_type<mlcore::EntityClass *,std::shared_ptr<mlcore::Predicate>>,std::equal_to<mlcore::EntityClass *>,std::hash<mlcore::EntityClass *>,true>,std::allocator<std::__hash_value_type<mlcore::EntityClass *,std::shared_ptr<mlcore::Predicate>>>>::__emplace_unique_key_args<mlcore::EntityClass *,std::piecewise_construct_t const&,std::tuple<mlcore::EntityClass * const&>,std::tuple<>>(a1 + 168, a3, &v8);
  return std::shared_ptr<mlcore::Predicate>::operator=[abi:ne180100](v6 + 3, *a2, a2[1]);
}

_QWORD *mlcore::LibraryView::setFilterPredicateForEntityClass(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  _QWORD *v4;
  unint64_t v6;

  v6 = a2;
  v4 = std::__hash_table<std::__hash_value_type<mlcore::EntityClass *,std::shared_ptr<mlcore::Predicate>>,std::__unordered_map_hasher<mlcore::EntityClass *,std::__hash_value_type<mlcore::EntityClass *,std::shared_ptr<mlcore::Predicate>>,std::hash<mlcore::EntityClass *>,std::equal_to<mlcore::EntityClass *>,true>,std::__unordered_map_equal<mlcore::EntityClass *,std::__hash_value_type<mlcore::EntityClass *,std::shared_ptr<mlcore::Predicate>>,std::equal_to<mlcore::EntityClass *>,std::hash<mlcore::EntityClass *>,true>,std::allocator<std::__hash_value_type<mlcore::EntityClass *,std::shared_ptr<mlcore::Predicate>>>>::__emplace_unique_key_args<mlcore::EntityClass *,std::piecewise_construct_t const&,std::tuple<mlcore::EntityClass * const&>,std::tuple<>>(a1 + 8, a2, (uint64_t *)&v6);
  return std::shared_ptr<mlcore::Predicate>::operator=[abi:ne180100](v4 + 3, *a3, a3[1]);
}

_QWORD *std::__hash_table<std::__hash_value_type<mlcore::EntityClass *,std::shared_ptr<mlcore::Predicate>>,std::__unordered_map_hasher<mlcore::EntityClass *,std::__hash_value_type<mlcore::EntityClass *,std::shared_ptr<mlcore::Predicate>>,std::hash<mlcore::EntityClass *>,std::equal_to<mlcore::EntityClass *>,true>,std::__unordered_map_equal<mlcore::EntityClass *,std::__hash_value_type<mlcore::EntityClass *,std::shared_ptr<mlcore::Predicate>>,std::equal_to<mlcore::EntityClass *>,std::hash<mlcore::EntityClass *>,true>,std::allocator<std::__hash_value_type<mlcore::EntityClass *,std::shared_ptr<mlcore::Predicate>>>>::__emplace_unique_key_args<mlcore::EntityClass *,std::piecewise_construct_t const&,std::tuple<mlcore::EntityClass * const&>,std::tuple<>>(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  _QWORD **v11;
  _QWORD *i;
  unint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  float v17;
  float v18;
  _BOOL8 v19;
  unint64_t v20;
  unint64_t v21;
  int8x8_t prime;
  void *v23;
  void *v24;
  uint64_t v25;
  _QWORD *v26;
  unint64_t v27;
  uint8x8_t v28;
  unint64_t v29;
  uint8x8_t v30;
  uint64_t v31;
  _QWORD *v32;
  unint64_t v33;
  _QWORD *v34;
  unint64_t v35;
  void *v37;
  _QWORD v38[2];
  char v39;

  v6 = 0x9DDFEA08EB382D69 * (((8 * a2) + 8) ^ HIDWORD(a2));
  v7 = 0x9DDFEA08EB382D69 * (HIDWORD(a2) ^ (v6 >> 47) ^ v6);
  v8 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
  v9 = *(_QWORD *)(a1 + 8);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      v3 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
      if (v8 >= v9)
        v3 = v8 % v9;
    }
    else
    {
      v3 = v8 & (v9 - 1);
    }
    v11 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v3);
    if (v11)
    {
      for (i = *v11; i; i = (_QWORD *)*i)
      {
        v13 = i[1];
        if (v13 == v8)
        {
          if (i[2] == a2)
            return i;
        }
        else
        {
          if (v10.u32[0] > 1uLL)
          {
            if (v13 >= v9)
              v13 %= v9;
          }
          else
          {
            v13 &= v9 - 1;
          }
          if (v13 != v3)
            break;
        }
      }
    }
  }
  v14 = (_QWORD *)(a1 + 16);
  v15 = operator new(0x28uLL);
  v38[0] = v15;
  v38[1] = a1 + 16;
  *v15 = 0;
  v15[1] = v8;
  v16 = *a3;
  v15[3] = 0;
  v15[4] = 0;
  v15[2] = v16;
  v39 = 1;
  v17 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v18 = *(float *)(a1 + 32);
  if (!v9 || (float)(v18 * (float)v9) < v17)
  {
    v19 = 1;
    if (v9 >= 3)
      v19 = (v9 & (v9 - 1)) != 0;
    v20 = v19 | (2 * v9);
    v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21)
      prime = (int8x8_t)v21;
    else
      prime = (int8x8_t)v20;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
      v9 = *(_QWORD *)(a1 + 8);
    }
    if (*(_QWORD *)&prime > v9)
      goto LABEL_30;
    if (*(_QWORD *)&prime < v9)
    {
      v29 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v9 < 3 || (v30 = (uint8x8_t)vcnt_s8((int8x8_t)v9), v30.i16[0] = vaddlv_u8(v30), v30.u32[0] > 1uLL))
      {
        v29 = std::__next_prime(v29);
      }
      else
      {
        v31 = 1 << -(char)__clz(v29 - 1);
        if (v29 >= 2)
          v29 = v31;
      }
      if (*(_QWORD *)&prime <= v29)
        prime = (int8x8_t)v29;
      if (*(_QWORD *)&prime >= v9)
      {
        v9 = *(_QWORD *)(a1 + 8);
      }
      else
      {
        if (prime)
        {
LABEL_30:
          if (*(_QWORD *)&prime >> 61)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v23 = operator new(8 * *(_QWORD *)&prime);
          v24 = *(void **)a1;
          *(_QWORD *)a1 = v23;
          if (v24)
            operator delete(v24);
          v25 = 0;
          *(int8x8_t *)(a1 + 8) = prime;
          do
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v25++) = 0;
          while (*(_QWORD *)&prime != v25);
          v26 = (_QWORD *)*v14;
          if (*v14)
          {
            v27 = v26[1];
            v28 = (uint8x8_t)vcnt_s8(prime);
            v28.i16[0] = vaddlv_u8(v28);
            if (v28.u32[0] > 1uLL)
            {
              if (v27 >= *(_QWORD *)&prime)
                v27 %= *(_QWORD *)&prime;
            }
            else
            {
              v27 &= *(_QWORD *)&prime - 1;
            }
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v27) = v14;
            v32 = (_QWORD *)*v26;
            if (*v26)
            {
              do
              {
                v33 = v32[1];
                if (v28.u32[0] > 1uLL)
                {
                  if (v33 >= *(_QWORD *)&prime)
                    v33 %= *(_QWORD *)&prime;
                }
                else
                {
                  v33 &= *(_QWORD *)&prime - 1;
                }
                if (v33 != v27)
                {
                  if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v33))
                  {
                    *(_QWORD *)(*(_QWORD *)a1 + 8 * v33) = v26;
                    goto LABEL_55;
                  }
                  *v26 = *v32;
                  *v32 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v33);
                  **(_QWORD **)(*(_QWORD *)a1 + 8 * v33) = v32;
                  v32 = v26;
                }
                v33 = v27;
LABEL_55:
                v26 = v32;
                v32 = (_QWORD *)*v32;
                v27 = v33;
              }
              while (v32);
            }
          }
          v9 = (unint64_t)prime;
          goto LABEL_59;
        }
        v37 = *(void **)a1;
        *(_QWORD *)a1 = 0;
        if (v37)
          operator delete(v37);
        v9 = 0;
        *(_QWORD *)(a1 + 8) = 0;
      }
    }
LABEL_59:
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9)
        v3 = v8 % v9;
      else
        v3 = v8;
    }
    else
    {
      v3 = (v9 - 1) & v8;
    }
  }
  v34 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  i = (_QWORD *)v38[0];
  if (v34)
  {
    *(_QWORD *)v38[0] = *v34;
LABEL_72:
    *v34 = i;
    goto LABEL_73;
  }
  *(_QWORD *)v38[0] = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = i;
  *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = v14;
  if (*i)
  {
    v35 = *(_QWORD *)(*i + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v35 >= v9)
        v35 %= v9;
    }
    else
    {
      v35 &= v9 - 1;
    }
    v34 = (_QWORD *)(*(_QWORD *)a1 + 8 * v35);
    goto LABEL_72;
  }
LABEL_73:
  v38[0] = 0;
  ++*(_QWORD *)(a1 + 24);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<mlcore::LocalizedSearchScope *,std::shared_ptr<mlcore::EntityQueryResult>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<mlcore::LocalizedSearchScope *,std::shared_ptr<mlcore::EntityQueryResult>>,void *>>>>::reset[abi:ne180100]((uint64_t)v38);
  return i;
}

void sub_20A66FD20(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<mlcore::LocalizedSearchScope *,std::shared_ptr<mlcore::EntityQueryResult>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<mlcore::LocalizedSearchScope *,std::shared_ptr<mlcore::EntityQueryResult>>,void *>>>>::reset[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

char *mlcore::MultiEntityQuery::setPropertiesToFetchForEntityClass(uint64_t a1, uint64_t a2, unint64_t a3)
{
  char *result;
  unint64_t v7;

  v7 = a3;
  std::__hash_table<mlcore::EntityClass *,std::hash<mlcore::EntityClass *>,std::equal_to<mlcore::EntityClass *>,std::allocator<mlcore::EntityClass *>>::__emplace_unique_key_args<mlcore::EntityClass *,mlcore::EntityClass * const&>((float *)(a1 + 128), a3, a3);
  result = (char *)(std::__hash_table<std::__hash_value_type<mlcore::EntityClass *,std::vector<mlcore::ModelPropertyBase *>>,std::__unordered_map_hasher<mlcore::EntityClass *,std::__hash_value_type<mlcore::EntityClass *,std::vector<mlcore::ModelPropertyBase *>>,std::hash<mlcore::EntityClass *>,std::equal_to<mlcore::EntityClass *>,true>,std::__unordered_map_equal<mlcore::EntityClass *,std::__hash_value_type<mlcore::EntityClass *,std::vector<mlcore::ModelPropertyBase *>>,std::equal_to<mlcore::EntityClass *>,std::hash<mlcore::EntityClass *>,true>,std::allocator<std::__hash_value_type<mlcore::EntityClass *,std::vector<mlcore::ModelPropertyBase *>>>>::__emplace_unique_key_args<mlcore::EntityClass *,std::piecewise_construct_t const&,std::tuple<mlcore::EntityClass * const&>,std::tuple<>>(a1 + 208, a3, &v7)+ 3);
  if (result != (char *)a2)
    return std::vector<mlcore::ModelPropertyBase *>::__assign_with_size[abi:ne180100]<mlcore::ModelPropertyBase **,mlcore::ModelPropertyBase **>(result, *(char **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3);
  return result;
}

void std::__hash_table<mlcore::EntityClass *,std::hash<mlcore::EntityClass *>,std::equal_to<mlcore::EntityClass *>,std::allocator<mlcore::EntityClass *>>::__emplace_unique_key_args<mlcore::EntityClass *,mlcore::EntityClass * const&>(float *a1, unint64_t a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  _QWORD *v11;
  _QWORD *i;
  unint64_t v13;
  _QWORD *v14;
  float v15;
  float v16;
  _BOOL8 v17;
  unint64_t v18;
  unint64_t v19;
  int8x8_t prime;
  void *v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  unint64_t v25;
  uint8x8_t v26;
  unint64_t v27;
  uint8x8_t v28;
  uint64_t v29;
  _QWORD *v30;
  unint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  unint64_t v34;
  _QWORD *v35;

  v6 = 0x9DDFEA08EB382D69 * (((8 * a2) + 8) ^ HIDWORD(a2));
  v7 = 0x9DDFEA08EB382D69 * (HIDWORD(a2) ^ (v6 >> 47) ^ v6);
  v8 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
  v9 = *((_QWORD *)a1 + 1);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      v3 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
      if (v8 >= v9)
        v3 = v8 % v9;
    }
    else
    {
      v3 = v8 & (v9 - 1);
    }
    v11 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
    if (v11)
    {
      for (i = (_QWORD *)*v11; i; i = (_QWORD *)*i)
      {
        v13 = i[1];
        if (v13 == v8)
        {
          if (i[2] == a2)
            return;
        }
        else
        {
          if (v10.u32[0] > 1uLL)
          {
            if (v13 >= v9)
              v13 %= v9;
          }
          else
          {
            v13 &= v9 - 1;
          }
          if (v13 != v3)
            break;
        }
      }
    }
  }
  v14 = operator new(0x18uLL);
  *v14 = 0;
  v14[1] = v8;
  v14[2] = a3;
  v15 = (float)(unint64_t)(*((_QWORD *)a1 + 3) + 1);
  v16 = a1[8];
  if (!v9 || (float)(v16 * (float)v9) < v15)
  {
    v17 = 1;
    if (v9 >= 3)
      v17 = (v9 & (v9 - 1)) != 0;
    v18 = v17 | (2 * v9);
    v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19)
      prime = (int8x8_t)v19;
    else
      prime = (int8x8_t)v18;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
      v9 = *((_QWORD *)a1 + 1);
    }
    if (*(_QWORD *)&prime > v9)
      goto LABEL_30;
    if (*(_QWORD *)&prime < v9)
    {
      v27 = vcvtps_u32_f32((float)*((unint64_t *)a1 + 3) / a1[8]);
      if (v9 < 3 || (v28 = (uint8x8_t)vcnt_s8((int8x8_t)v9), v28.i16[0] = vaddlv_u8(v28), v28.u32[0] > 1uLL))
      {
        v27 = std::__next_prime(v27);
      }
      else
      {
        v29 = 1 << -(char)__clz(v27 - 1);
        if (v27 >= 2)
          v27 = v29;
      }
      if (*(_QWORD *)&prime <= v27)
        prime = (int8x8_t)v27;
      if (*(_QWORD *)&prime >= v9)
      {
        v9 = *((_QWORD *)a1 + 1);
      }
      else
      {
        if (prime)
        {
LABEL_30:
          if (*(_QWORD *)&prime >> 61)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v21 = operator new(8 * *(_QWORD *)&prime);
          v22 = *(_QWORD **)a1;
          *(_QWORD *)a1 = v21;
          if (v22)
            operator delete(v22);
          v23 = 0;
          *((int8x8_t *)a1 + 1) = prime;
          do
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v23++) = 0;
          while (*(_QWORD *)&prime != v23);
          v24 = (_QWORD *)*((_QWORD *)a1 + 2);
          if (v24)
          {
            v25 = v24[1];
            v26 = (uint8x8_t)vcnt_s8(prime);
            v26.i16[0] = vaddlv_u8(v26);
            if (v26.u32[0] > 1uLL)
            {
              if (v25 >= *(_QWORD *)&prime)
                v25 %= *(_QWORD *)&prime;
            }
            else
            {
              v25 &= *(_QWORD *)&prime - 1;
            }
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v25) = a1 + 4;
            v30 = (_QWORD *)*v24;
            if (*v24)
            {
              do
              {
                v31 = v30[1];
                if (v26.u32[0] > 1uLL)
                {
                  if (v31 >= *(_QWORD *)&prime)
                    v31 %= *(_QWORD *)&prime;
                }
                else
                {
                  v31 &= *(_QWORD *)&prime - 1;
                }
                if (v31 != v25)
                {
                  if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v31))
                  {
                    *(_QWORD *)(*(_QWORD *)a1 + 8 * v31) = v24;
                    goto LABEL_55;
                  }
                  *v24 = *v30;
                  *v30 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v31);
                  **(_QWORD **)(*(_QWORD *)a1 + 8 * v31) = v30;
                  v30 = v24;
                }
                v31 = v25;
LABEL_55:
                v24 = v30;
                v30 = (_QWORD *)*v30;
                v25 = v31;
              }
              while (v30);
            }
          }
          v9 = (unint64_t)prime;
          goto LABEL_59;
        }
        v35 = *(_QWORD **)a1;
        *(_QWORD *)a1 = 0;
        if (v35)
          operator delete(v35);
        v9 = 0;
        *((_QWORD *)a1 + 1) = 0;
      }
    }
LABEL_59:
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9)
        v3 = v8 % v9;
      else
        v3 = v8;
    }
    else
    {
      v3 = (v9 - 1) & v8;
    }
  }
  v32 = *(_QWORD **)a1;
  v33 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v33)
  {
    *v14 = *v33;
LABEL_72:
    *v33 = v14;
    goto LABEL_73;
  }
  *v14 = *((_QWORD *)a1 + 2);
  *((_QWORD *)a1 + 2) = v14;
  v32[v3] = a1 + 4;
  if (*v14)
  {
    v34 = *(_QWORD *)(*v14 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v34 >= v9)
        v34 %= v9;
    }
    else
    {
      v34 &= v9 - 1;
    }
    v33 = (_QWORD *)(*(_QWORD *)a1 + 8 * v34);
    goto LABEL_72;
  }
LABEL_73:
  ++*((_QWORD *)a1 + 3);
}

void sub_20A6701A4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t mlcore::ItemTable::ItemTable(mlcore::ItemTable *this)
{
  uint64_t v1;
  std::string *v2;
  std::string *v3;
  std::string *v4;
  std::string *v5;
  std::string *v6;
  std::string *v7;
  std::string *v8;
  std::string *v9;
  std::string *v10;
  std::string *v11;
  std::string *v12;
  std::string *v13;
  char v14;
  void *v16[2];
  char v17;
  void (**v18)(mediaplatform::DatabaseColumnBase *__hidden);
  std::string v19;
  int v20;
  uint64_t v21;
  int v22;
  void *v23[2];
  char v24;
  void (**v25)(mediaplatform::DatabaseColumnBase *__hidden);
  std::string v26;
  int v27;
  uint64_t v28;
  int v29;
  void *v30[2];
  char v31;
  void (**v32)(mediaplatform::DatabaseColumnBase *__hidden);
  std::string v33;
  int v34;
  uint64_t v35;
  int v36;
  void *v37[2];
  char v38;
  void (**v39)(mediaplatform::DatabaseColumnBase *__hidden);
  std::string v40;
  int v41;
  uint64_t v42;
  void *v43[2];
  char v44;
  void (**v45)(mediaplatform::DatabaseColumnBase *__hidden);
  std::string v46;
  int v47;
  uint64_t v48;
  int v49;
  void *v50[2];
  char v51;
  void (**v52)(mediaplatform::DatabaseColumnBase *__hidden);
  std::string v53;
  int v54;
  uint64_t v55;
  void *v56[2];
  char v57;
  void (**v58)(mediaplatform::DatabaseColumnBase *__hidden);
  std::string v59;
  int v60;
  uint64_t v61;
  void *v62[2];
  char v63;
  void (**v64)(mediaplatform::DatabaseColumnBase *__hidden);
  std::string v65;
  int v66;
  uint64_t v67;
  void *v68[2];
  char v69;
  void (**v70)(mediaplatform::DatabaseColumnBase *__hidden);
  std::string v71;
  int v72;
  uint64_t v73;
  void *v74[2];
  char v75;
  void (**v76)(mediaplatform::DatabaseColumnBase *__hidden);
  std::string v77;
  int v78;
  uint64_t v79;
  void *v80[2];
  char v81;
  void (**v82)(mediaplatform::DatabaseColumnBase *__hidden);
  std::string v83;
  int v84;
  uint64_t v85;
  void *v86[2];
  char v87;
  void (**v88)(mediaplatform::DatabaseColumnBase *__hidden);
  std::string v89;
  int v90;
  uint64_t v91;
  void *v92[2];
  char v93;
  void (**v94)(mediaplatform::DatabaseColumnBase *__hidden);
  std::string v95;
  int v96;
  uint64_t v97;
  int v98;
  void *v99[2];
  char v100;
  void (**v101)(mediaplatform::DatabaseColumnBase *__hidden);
  std::string v102;
  int v103;
  uint64_t v104;
  int v105;
  void *v106[2];
  char v107;
  void (**v108)(mediaplatform::DatabaseColumnBase *__hidden);
  std::string v109;
  int v110;
  uint64_t v111;
  void *v112[2];
  char v113;
  void (**v114)(mediaplatform::DatabaseColumnBase *__hidden);
  std::string v115;
  int v116;
  uint64_t v117;
  void *v118[2];
  char v119;
  void (**v120)(mediaplatform::DatabaseColumnBase *__hidden);
  std::string v121;
  int v122;
  uint64_t v123;
  void *v124[2];
  char v125;
  void (**v126)(mediaplatform::DatabaseColumnBase *__hidden);
  std::string v127;
  int v128;
  uint64_t v129;
  void *v130[2];
  char v131;
  void (**v132)(mediaplatform::DatabaseColumnBase *__hidden);
  std::string v133;
  int v134;
  uint64_t v135;
  int v136;
  void *v137[2];
  char v138;
  void (**v139)(mediaplatform::DatabaseColumnBase *__hidden);
  std::string v140;
  int v141;
  uint64_t v142;
  int v143;
  void *v144[2];
  char v145;
  void (**v146)(mediaplatform::DatabaseColumnBase *__hidden);
  std::string v147;
  int v148;
  uint64_t v149;
  void *v150[2];
  char v151;
  void (**v152)(mediaplatform::DatabaseColumnBase *__hidden);
  std::string v153;
  int v154;
  uint64_t v155;
  int v156;
  void *v157[2];
  char v158;
  void (**v159)(mediaplatform::DatabaseColumnBase *__hidden);
  std::string v160;
  int v161;
  uint64_t v162;
  int v163;
  void *v164[2];
  char v165;
  void (**v166)(mediaplatform::DatabaseColumnBase *__hidden);
  std::string v167;
  int v168;
  uint64_t v169;
  void *v170[2];
  char v171;
  void (**v172)(mediaplatform::DatabaseColumnBase *__hidden);
  std::string v173;
  int v174;
  uint64_t v175;
  int v176;
  void *v177[2];
  char v178;
  void (**v179)(mediaplatform::DatabaseColumnBase *__hidden);
  std::string v180;
  int v181;
  uint64_t v182;
  int v183;
  void *v184[2];
  char v185;
  void (**v186)(mediaplatform::DatabaseColumnBase *__hidden);
  std::string v187;
  int v188;
  uint64_t v189;
  void *v190[2];
  char v191;
  void (**v192)(mediaplatform::DatabaseColumnBase *__hidden);
  std::string v193;
  int v194;
  uint64_t v195;
  int v196;
  void *v197[2];
  char v198;
  void (**v199)(mediaplatform::DatabaseColumnBase *__hidden);
  std::string v200;
  int v201;
  uint64_t v202;
  int v203;
  void *v204[2];
  char v205;
  void (**v206)(mediaplatform::DatabaseColumnBase *__hidden);
  std::string v207;
  int v208;
  uint64_t v209;
  void *v210[2];
  char v211;
  void (**v212)(mediaplatform::DatabaseColumnBase *__hidden);
  std::string v213;
  int v214;
  uint64_t v215;
  int v216;
  void *v217[2];
  char v218;
  void (**v219)(mediaplatform::DatabaseColumnBase *__hidden);
  std::string v220;
  int v221;
  uint64_t v222;
  void *v223[2];
  char v224;
  void (**v225)(mediaplatform::DatabaseColumnBase *__hidden);
  std::string v226;
  int v227;
  uint64_t v228;
  int v229;
  void *v230[2];
  char v231;
  void (**v232)(mediaplatform::DatabaseColumnBase *__hidden);
  std::string v233;
  int v234;
  uint64_t v235;
  int v236;
  void *v237[2];
  char v238;
  void (**v239)(mediaplatform::DatabaseColumnBase *__hidden);
  std::string v240;
  int v241;
  uint64_t v242;
  void *v243[2];
  char v244;
  void (**v245)(mediaplatform::DatabaseColumnBase *__hidden);
  std::string v246;
  int v247;
  uint64_t v248;
  int v249;
  void *v250[2];
  char v251;
  void (**v252)(mediaplatform::DatabaseColumnBase *__hidden);
  std::string v253;
  int v254;
  uint64_t v255;
  void *v256[2];
  char v257;
  void (**v258)(mediaplatform::DatabaseColumnBase *__hidden);
  std::string v259;
  int v260;
  uint64_t v261;
  int v262;
  std::string __s;
  uint64_t (**v264)();
  std::string __p;
  int v266;
  uint64_t v267;
  int v268;
  uint64_t (**v269)();
  std::string v270;
  int v271;
  uint64_t v272;
  int v273;
  uint64_t (**v274)();
  std::string v275;
  int v276;
  uint64_t v277;
  int v278;
  uint64_t (**v279)();
  std::string v280;
  int v281;
  uint64_t v282;
  uint64_t (**v283)();
  std::string v284;
  int v285;
  uint64_t v286;
  int v287;
  uint64_t (**v288)();
  std::string v289;
  int v290;
  uint64_t v291;
  uint64_t (**v292)();
  std::string v293;
  int v294;
  uint64_t v295;
  uint64_t (**v296)();
  std::string v297;
  int v298;
  uint64_t v299;
  uint64_t (**v300)();
  std::string v301;
  int v302;
  uint64_t v303;
  uint64_t (**v304)();
  std::string v305;
  int v306;
  uint64_t v307;
  uint64_t (**v308)();
  std::string v309;
  int v310;
  uint64_t v311;
  uint64_t (**v312)();
  std::string v313;
  int v314;
  uint64_t v315;
  uint64_t (**v316)();
  std::string v317;
  int v318;
  uint64_t v319;
  int v320;
  uint64_t (**v321)();
  std::string v322;
  int v323;
  uint64_t v324;
  int v325;
  uint64_t (**v326)();
  std::string v327;
  int v328;
  uint64_t v329;
  uint64_t (**v330)();
  std::string v331;
  int v332;
  uint64_t v333;
  uint64_t (**v334)();
  std::string v335;
  int v336;
  uint64_t v337;
  uint64_t (**v338)();
  std::string v339;
  int v340;
  uint64_t v341;
  uint64_t (**v342)();
  std::string v343;
  int v344;
  uint64_t v345;
  int v346;
  uint64_t (**v347)();
  std::string v348;
  int v349;
  uint64_t v350;
  int v351;
  uint64_t (**v352)();
  std::string v353;
  int v354;
  uint64_t v355;
  uint64_t (**v356)();
  std::string v357;
  int v358;
  uint64_t v359;
  int v360;
  uint64_t (**v361)();
  std::string v362;
  int v363;
  uint64_t v364;
  int v365;
  uint64_t (**v366)();
  std::string v367;
  int v368;
  uint64_t v369;
  uint64_t (**v370)();
  std::string v371;
  int v372;
  uint64_t v373;
  int v374;
  uint64_t (**v375)();
  std::string v376;
  int v377;
  uint64_t v378;
  int v379;
  uint64_t (**v380)();
  std::string v381;
  int v382;
  uint64_t v383;
  uint64_t (**v384)();
  std::string v385;
  int v386;
  uint64_t v387;
  int v388;
  uint64_t (**v389)();
  std::string v390;
  int v391;
  uint64_t v392;
  int v393;
  uint64_t (**v394)();
  std::string v395;
  int v396;
  uint64_t v397;
  uint64_t (**v398)();
  std::string v399;
  int v400;
  uint64_t v401;
  int v402;
  uint64_t (**v403)();
  std::string v404;
  int v405;
  uint64_t v406;
  uint64_t (**v407)();
  std::string v408;
  int v409;
  uint64_t v410;
  int v411;
  uint64_t (**v412)();
  std::string v413;
  int v414;
  uint64_t v415;
  int v416;
  uint64_t (**v417)();
  std::string v418;
  int v419;
  uint64_t v420;
  uint64_t (**v421)();
  std::string v422;
  int v423;
  uint64_t v424;
  int v425;
  uint64_t (**v426)();
  std::string v427;
  int v428;
  uint64_t v429;
  uint64_t (**v430)();
  std::string v431;
  int v432;
  uint64_t v433;
  int v434;
  std::string v435;

  v1 = MEMORY[0x24BDAC7A8](this);
  std::string::basic_string[abi:ne180100]<0>(&__s, "item");
  std::string::basic_string[abi:ne180100]<0>(v256, "item_pid");
  mlcore::MediaColumn<long long>::MediaColumn((uint64_t)&v258, (uint64_t)v256, 1);
  std::string::basic_string[abi:ne180100]<0>(v250, "media_type");
  mlcore::MediaColumn<int>::MediaColumn((uint64_t)&v252, (uint64_t)v250, 0);
  std::string::basic_string[abi:ne180100]<0>(v243, "title_order");
  mlcore::MediaColumn<long long>::MediaColumn((uint64_t)&v245, (uint64_t)v243);
  std::string::basic_string[abi:ne180100]<0>(v237, "title_order_section");
  mlcore::MediaColumn<int>::MediaColumn((uint64_t)&v239, (uint64_t)v237, 0);
  std::string::basic_string[abi:ne180100]<0>(v230, "item_artist_pid");
  mlcore::MediaColumn<long long>::MediaColumn((uint64_t)&v232, (uint64_t)v230);
  std::string::basic_string[abi:ne180100]<0>(v223, "item_artist_order");
  mlcore::MediaColumn<long long>::MediaColumn((uint64_t)&v225, (uint64_t)v223);
  std::string::basic_string[abi:ne180100]<0>(v217, "item_artist_order_section");
  mlcore::MediaColumn<int>::MediaColumn((uint64_t)&v219, (uint64_t)v217, 0);
  std::string::basic_string[abi:ne180100]<0>(v210, "series_name_order");
  mlcore::MediaColumn<long long>::MediaColumn((uint64_t)&v212, (uint64_t)v210);
  std::string::basic_string[abi:ne180100]<0>(v204, "series_name_order_section");
  mlcore::MediaColumn<int>::MediaColumn((uint64_t)&v206, (uint64_t)v204, 0);
  std::string::basic_string[abi:ne180100]<0>(v197, "album_pid");
  mlcore::MediaColumn<long long>::MediaColumn((uint64_t)&v199, (uint64_t)v197);
  std::string::basic_string[abi:ne180100]<0>(v190, "album_order");
  mlcore::MediaColumn<long long>::MediaColumn((uint64_t)&v192, (uint64_t)v190);
  std::string::basic_string[abi:ne180100]<0>(v184, "album_order_section");
  mlcore::MediaColumn<int>::MediaColumn((uint64_t)&v186, (uint64_t)v184, 0);
  std::string::basic_string[abi:ne180100]<0>(v177, "album_artist_pid");
  mlcore::MediaColumn<long long>::MediaColumn((uint64_t)&v179, (uint64_t)v177);
  std::string::basic_string[abi:ne180100]<0>(v170, "album_artist_order");
  mlcore::MediaColumn<long long>::MediaColumn((uint64_t)&v172, (uint64_t)v170);
  std::string::basic_string[abi:ne180100]<0>(v164, "album_artist_order_section");
  mlcore::MediaColumn<int>::MediaColumn((uint64_t)&v166, (uint64_t)v164, 0);
  std::string::basic_string[abi:ne180100]<0>(v157, "composer_pid");
  mlcore::MediaColumn<long long>::MediaColumn((uint64_t)&v159, (uint64_t)v157);
  std::string::basic_string[abi:ne180100]<0>(v150, "composer_order");
  mlcore::MediaColumn<long long>::MediaColumn((uint64_t)&v152, (uint64_t)v150);
  std::string::basic_string[abi:ne180100]<0>(v144, "composer_order_section");
  mlcore::MediaColumn<int>::MediaColumn((uint64_t)&v146, (uint64_t)v144, 0);
  std::string::basic_string[abi:ne180100]<0>(v137, "genre_id");
  mlcore::MediaColumn<long long>::MediaColumn((uint64_t)&v139, (uint64_t)v137);
  std::string::basic_string[abi:ne180100]<0>(v130, "genre_order");
  mlcore::MediaColumn<long long>::MediaColumn((uint64_t)&v132, (uint64_t)v130);
  std::string::basic_string[abi:ne180100]<0>(v124, "genre_order_section");
  mlcore::MediaColumn<int>::MediaColumn((uint64_t)&v126, (uint64_t)v124, 0);
  std::string::basic_string[abi:ne180100]<0>(v118, "disc_number");
  mlcore::MediaColumn<int>::MediaColumn((uint64_t)&v120, (uint64_t)v118, 0);
  std::string::basic_string[abi:ne180100]<0>(v112, "track_number");
  mlcore::MediaColumn<int>::MediaColumn((uint64_t)&v114, (uint64_t)v112, 0);
  std::string::basic_string[abi:ne180100]<0>(v106, "episode_sort_id");
  mlcore::MediaColumn<int>::MediaColumn((uint64_t)&v108, (uint64_t)v106, 0);
  std::string::basic_string[abi:ne180100]<0>(v99, "base_location_id");
  mlcore::MediaColumn<long long>::MediaColumn((uint64_t)&v101, (uint64_t)v99);
  std::string::basic_string[abi:ne180100]<0>(v92, "remote_location_id");
  mlcore::MediaColumn<long long>::MediaColumn((uint64_t)&v94, (uint64_t)v92);
  std::string::basic_string[abi:ne180100]<0>(v86, "exclude_from_shuffle");
  mlcore::MediaColumn<int>::MediaColumn((uint64_t)&v88, (uint64_t)v86, 0);
  std::string::basic_string[abi:ne180100]<0>(v80, "keep_local");
  mlcore::MediaColumn<int>::MediaColumn((uint64_t)&v82, (uint64_t)v80, 0);
  std::string::basic_string[abi:ne180100]<0>(v74, "keep_local_status");
  mlcore::MediaColumn<int>::MediaColumn((uint64_t)&v76, (uint64_t)v74, 0);
  std::string::basic_string[abi:ne180100]<0>(v68, "keep_local_status_reason");
  mlcore::MediaColumn<int>::MediaColumn((uint64_t)&v70, (uint64_t)v68, 0);
  std::string::basic_string[abi:ne180100]<0>(v62, "keep_local_constraints");
  mlcore::MediaColumn<int>::MediaColumn((uint64_t)&v64, (uint64_t)v62, 0);
  std::string::basic_string[abi:ne180100]<0>(v56, "in_my_library");
  mlcore::MediaColumn<int>::MediaColumn((uint64_t)&v58, (uint64_t)v56, 0);
  std::string::basic_string[abi:ne180100]<0>(v50, "is_compilation");
  mlcore::MediaColumn<int>::MediaColumn((uint64_t)&v52, (uint64_t)v50, 0);
  std::string::basic_string[abi:ne180100]<0>(v43, "date_added");
  mlcore::MediaColumn<long long>::MediaColumn((uint64_t)&v45, (uint64_t)v43);
  std::string::basic_string[abi:ne180100]<0>(v37, "show_composer");
  mlcore::MediaColumn<int>::MediaColumn((uint64_t)&v39, (uint64_t)v37, 0);
  std::string::basic_string[abi:ne180100]<0>(v30, "is_music_show");
  mlcore::MediaColumn<long long>::MediaColumn((uint64_t)&v32, (uint64_t)v30);
  std::string::basic_string[abi:ne180100]<0>(v23, "date_downloaded");
  mlcore::MediaColumn<long long>::MediaColumn((uint64_t)&v25, (uint64_t)v23);
  std::string::basic_string[abi:ne180100]<0>(v16, "download_source_container_pid");
  mlcore::MediaColumn<long long>::MediaColumn((uint64_t)&v18, (uint64_t)v16);
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v435, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
  else
    v435 = __s;
  v430 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v259.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v431, v259.__r_.__value_.__l.__data_, v259.__r_.__value_.__l.__size_);
  else
    v431 = v259;
  v430 = off_24C335B18;
  v433 = v261;
  v432 = v260;
  v434 = v262;
  v426 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v253.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v427, v253.__r_.__value_.__l.__data_, v253.__r_.__value_.__l.__size_);
  else
    v427 = v253;
  v428 = v254;
  v426 = off_24C335AF8;
  v429 = v255;
  v421 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v246.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v422, v246.__r_.__value_.__l.__data_, v246.__r_.__value_.__l.__size_);
  else
    v422 = v246;
  v421 = off_24C335B18;
  v424 = v248;
  v423 = v247;
  v425 = v249;
  v417 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v240.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v418, v240.__r_.__value_.__l.__data_, v240.__r_.__value_.__l.__size_);
  else
    v418 = v240;
  v419 = v241;
  v417 = off_24C335AF8;
  v420 = v242;
  v412 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v233.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v413, v233.__r_.__value_.__l.__data_, v233.__r_.__value_.__l.__size_);
  else
    v413 = v233;
  v412 = off_24C335B18;
  v415 = v235;
  v414 = v234;
  v416 = v236;
  v407 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v226.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v408, v226.__r_.__value_.__l.__data_, v226.__r_.__value_.__l.__size_);
  else
    v408 = v226;
  v407 = off_24C335B18;
  v410 = v228;
  v409 = v227;
  v411 = v229;
  v403 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v220.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v404, v220.__r_.__value_.__l.__data_, v220.__r_.__value_.__l.__size_);
  else
    v404 = v220;
  v405 = v221;
  v403 = off_24C335AF8;
  v406 = v222;
  v398 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v213.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v399, v213.__r_.__value_.__l.__data_, v213.__r_.__value_.__l.__size_);
  else
    v399 = v213;
  v398 = off_24C335B18;
  v401 = v215;
  v400 = v214;
  v402 = v216;
  v394 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v207.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v395, v207.__r_.__value_.__l.__data_, v207.__r_.__value_.__l.__size_);
  else
    v395 = v207;
  v396 = v208;
  v394 = off_24C335AF8;
  v397 = v209;
  v389 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v200.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v390, v200.__r_.__value_.__l.__data_, v200.__r_.__value_.__l.__size_);
  else
    v390 = v200;
  v389 = off_24C335B18;
  v392 = v202;
  v391 = v201;
  v393 = v203;
  v384 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v193.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v385, v193.__r_.__value_.__l.__data_, v193.__r_.__value_.__l.__size_);
  else
    v385 = v193;
  v384 = off_24C335B18;
  v387 = v195;
  v386 = v194;
  v388 = v196;
  v380 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v187.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v381, v187.__r_.__value_.__l.__data_, v187.__r_.__value_.__l.__size_);
  else
    v381 = v187;
  v382 = v188;
  v380 = off_24C335AF8;
  v383 = v189;
  v375 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v180.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v376, v180.__r_.__value_.__l.__data_, v180.__r_.__value_.__l.__size_);
  else
    v376 = v180;
  v375 = off_24C335B18;
  v378 = v182;
  v377 = v181;
  v379 = v183;
  v370 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v173.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v371, v173.__r_.__value_.__l.__data_, v173.__r_.__value_.__l.__size_);
  else
    v371 = v173;
  v370 = off_24C335B18;
  v373 = v175;
  v372 = v174;
  v374 = v176;
  v366 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v167.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v367, v167.__r_.__value_.__l.__data_, v167.__r_.__value_.__l.__size_);
  else
    v367 = v167;
  v368 = v168;
  v366 = off_24C335AF8;
  v369 = v169;
  v361 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v160.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v362, v160.__r_.__value_.__l.__data_, v160.__r_.__value_.__l.__size_);
  else
    v362 = v160;
  v361 = off_24C335B18;
  v364 = v162;
  v363 = v161;
  v365 = v163;
  v356 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v153.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v357, v153.__r_.__value_.__l.__data_, v153.__r_.__value_.__l.__size_);
  else
    v357 = v153;
  v356 = off_24C335B18;
  v359 = v155;
  v358 = v154;
  v360 = v156;
  v352 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v147.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v353, v147.__r_.__value_.__l.__data_, v147.__r_.__value_.__l.__size_);
  else
    v353 = v147;
  v354 = v148;
  v352 = off_24C335AF8;
  v355 = v149;
  v347 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v140.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v348, v140.__r_.__value_.__l.__data_, v140.__r_.__value_.__l.__size_);
  else
    v348 = v140;
  v347 = off_24C335B18;
  v350 = v142;
  v349 = v141;
  v351 = v143;
  v342 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v133.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v343, v133.__r_.__value_.__l.__data_, v133.__r_.__value_.__l.__size_);
  else
    v343 = v133;
  v342 = off_24C335B18;
  v345 = v135;
  v344 = v134;
  v346 = v136;
  v338 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v127.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v339, v127.__r_.__value_.__l.__data_, v127.__r_.__value_.__l.__size_);
  else
    v339 = v127;
  v340 = v128;
  v338 = off_24C335AF8;
  v341 = v129;
  v334 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v121.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v335, v121.__r_.__value_.__l.__data_, v121.__r_.__value_.__l.__size_);
  else
    v335 = v121;
  v336 = v122;
  v334 = off_24C335AF8;
  v337 = v123;
  v330 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v115.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v331, v115.__r_.__value_.__l.__data_, v115.__r_.__value_.__l.__size_);
  else
    v331 = v115;
  v332 = v116;
  v330 = off_24C335AF8;
  v333 = v117;
  v326 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v109.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v327, v109.__r_.__value_.__l.__data_, v109.__r_.__value_.__l.__size_);
  else
    v327 = v109;
  v328 = v110;
  v326 = off_24C335AF8;
  v329 = v111;
  v321 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v102.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v322, v102.__r_.__value_.__l.__data_, v102.__r_.__value_.__l.__size_);
  else
    v322 = v102;
  v321 = off_24C335B18;
  v324 = v104;
  v323 = v103;
  v325 = v105;
  v316 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v95.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v317, v95.__r_.__value_.__l.__data_, v95.__r_.__value_.__l.__size_);
  else
    v317 = v95;
  v316 = off_24C335B18;
  v319 = v97;
  v318 = v96;
  v320 = v98;
  v312 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v89.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v313, v89.__r_.__value_.__l.__data_, v89.__r_.__value_.__l.__size_);
  else
    v313 = v89;
  v314 = v90;
  v312 = off_24C335AF8;
  v315 = v91;
  v308 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v83.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v309, v83.__r_.__value_.__l.__data_, v83.__r_.__value_.__l.__size_);
  else
    v309 = v83;
  v310 = v84;
  v308 = off_24C335AF8;
  v311 = v85;
  v304 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v77.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v305, v77.__r_.__value_.__l.__data_, v77.__r_.__value_.__l.__size_);
  else
    v305 = v77;
  v306 = v78;
  v304 = off_24C335AF8;
  v307 = v79;
  v300 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v71.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v301, v71.__r_.__value_.__l.__data_, v71.__r_.__value_.__l.__size_);
  else
    v301 = v71;
  v302 = v72;
  v300 = off_24C335AF8;
  v303 = v73;
  v296 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v65.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v297, v65.__r_.__value_.__l.__data_, v65.__r_.__value_.__l.__size_);
  else
    v297 = v65;
  v298 = v66;
  v296 = off_24C335AF8;
  v299 = v67;
  v292 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v293, v59.__r_.__value_.__l.__data_, v59.__r_.__value_.__l.__size_);
  else
    v293 = v59;
  v294 = v60;
  v292 = off_24C335AF8;
  v295 = v61;
  v288 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v289, v53.__r_.__value_.__l.__data_, v53.__r_.__value_.__l.__size_);
  else
    v289 = v53;
  v290 = v54;
  v288 = off_24C335AF8;
  v291 = v55;
  v283 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v284, v46.__r_.__value_.__l.__data_, v46.__r_.__value_.__l.__size_);
  else
    v284 = v46;
  v283 = off_24C335B18;
  v286 = v48;
  v285 = v47;
  v287 = v49;
  v279 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v280, v40.__r_.__value_.__l.__data_, v40.__r_.__value_.__l.__size_);
  else
    v280 = v40;
  v281 = v41;
  v279 = off_24C335AF8;
  v282 = v42;
  v274 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v275, v33.__r_.__value_.__l.__data_, v33.__r_.__value_.__l.__size_);
  else
    v275 = v33;
  v274 = off_24C335B18;
  v277 = v35;
  v276 = v34;
  v278 = v36;
  v269 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v270, v26.__r_.__value_.__l.__data_, v26.__r_.__value_.__l.__size_);
  else
    v270 = v26;
  v269 = off_24C335B18;
  v272 = v28;
  v271 = v27;
  v273 = v29;
  v264 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&__p, v19.__r_.__value_.__l.__data_, v19.__r_.__value_.__l.__size_);
  else
    __p = v19;
  v264 = off_24C335B18;
  v267 = v21;
  v266 = v20;
  v268 = v22;
  mediaplatform::DatabaseTable<long long,int,long long,int,long long,long long,int,long long,int,long long,long long,int,long long,long long,int,long long,long long,int,long long,long long,int,int,int,int,long long,long long,int,int,int,int,int,int,int,long long,int,long long,long long,long long>::DatabaseTable(v1, (uint64_t)&v435, (uint64_t)&v430, (uint64_t)&v426, (uint64_t)&v421, (uint64_t)&v417, (uint64_t)&v412, (uint64_t)&v407, (uint64_t)&v403, (uint64_t)&v398, (uint64_t)&v394, (uint64_t)&v389, (uint64_t)&v384, (uint64_t)&v380, (uint64_t)&v375, (uint64_t)&v370, (uint64_t)&v366, (uint64_t)&v361, (uint64_t)&v356,
    (uint64_t)&v352,
    (uint64_t)&v347,
    (uint64_t)&v342,
    (uint64_t)&v338,
    (uint64_t)&v334,
    (uint64_t)&v330,
    (uint64_t)&v326,
    (uint64_t)&v321,
    (uint64_t)&v316,
    (uint64_t)&v312,
    (uint64_t)&v308,
    (uint64_t)&v304,
    (uint64_t)&v300,
    (uint64_t)&v296,
    (uint64_t)&v292,
    (uint64_t)&v288,
    (uint64_t)&v283,
    (uint64_t)&v279,
    (uint64_t)&v274,
    (uint64_t)&v269,
    (uint64_t)&v264);
  v264 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v269 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v270.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v270.__r_.__value_.__l.__data_);
  v274 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v275.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v275.__r_.__value_.__l.__data_);
  v279 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v280.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v280.__r_.__value_.__l.__data_);
  v283 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v284.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v284.__r_.__value_.__l.__data_);
  v288 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v289.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v289.__r_.__value_.__l.__data_);
  v292 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v293.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v293.__r_.__value_.__l.__data_);
  v296 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v297.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v297.__r_.__value_.__l.__data_);
  v300 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v301.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v301.__r_.__value_.__l.__data_);
  v304 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v305.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v305.__r_.__value_.__l.__data_);
  v308 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v309.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v309.__r_.__value_.__l.__data_);
  v312 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v313.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v313.__r_.__value_.__l.__data_);
  v316 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v317.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v317.__r_.__value_.__l.__data_);
  v321 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v322.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v322.__r_.__value_.__l.__data_);
  v326 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v327.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v327.__r_.__value_.__l.__data_);
  v330 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v331.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v331.__r_.__value_.__l.__data_);
  v334 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v335.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v335.__r_.__value_.__l.__data_);
  v338 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v339.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v339.__r_.__value_.__l.__data_);
  v342 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v343.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v343.__r_.__value_.__l.__data_);
  v347 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v348.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v348.__r_.__value_.__l.__data_);
  v352 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v353.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v353.__r_.__value_.__l.__data_);
  v356 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v357.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v357.__r_.__value_.__l.__data_);
  v361 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v362.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v362.__r_.__value_.__l.__data_);
  v366 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v367.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v367.__r_.__value_.__l.__data_);
  v370 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v371.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v371.__r_.__value_.__l.__data_);
  v375 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v376.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v376.__r_.__value_.__l.__data_);
  v380 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v381.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v381.__r_.__value_.__l.__data_);
  v384 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v385.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v385.__r_.__value_.__l.__data_);
  v389 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v390.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v390.__r_.__value_.__l.__data_);
  v394 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v395.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v395.__r_.__value_.__l.__data_);
  v398 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v399.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v399.__r_.__value_.__l.__data_);
  v403 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v404.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v404.__r_.__value_.__l.__data_);
  v407 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v408.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v408.__r_.__value_.__l.__data_);
  v412 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v413.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v413.__r_.__value_.__l.__data_);
  v417 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v418.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v418.__r_.__value_.__l.__data_);
  v421 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v422.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v422.__r_.__value_.__l.__data_);
  v426 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v427.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v427.__r_.__value_.__l.__data_);
  v430 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v431.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v431.__r_.__value_.__l.__data_);
  if (SHIBYTE(v435.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v435.__r_.__value_.__l.__data_);
  *(_QWORD *)v1 = off_24C336408;
  *(_QWORD *)(v1 + 1904) = off_24C335D90;
  if (SHIBYTE(v259.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external((std::string *)(v1 + 1912), v259.__r_.__value_.__l.__data_, v259.__r_.__value_.__l.__size_);
  else
    *(std::string *)(v1 + 1912) = v259;
  *(_DWORD *)(v1 + 1936) = v260;
  *(_QWORD *)(v1 + 1940) = v261;
  *(_DWORD *)(v1 + 1948) = v262;
  *(_QWORD *)(v1 + 1904) = off_24C336AC0;
  *(_QWORD *)(v1 + 1952) = off_24C335D90;
  if (SHIBYTE(v253.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external((std::string *)(v1 + 1960), v253.__r_.__value_.__l.__data_, v253.__r_.__value_.__l.__size_);
  else
    *(std::string *)(v1 + 1960) = v253;
  *(_DWORD *)(v1 + 1984) = v254;
  *(_QWORD *)(v1 + 1988) = v255;
  *(_QWORD *)(v1 + 1952) = off_24C336AA0;
  *(_QWORD *)(v1 + 2000) = off_24C335D90;
  if (SHIBYTE(v246.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external((std::string *)(v1 + 2008), v246.__r_.__value_.__l.__data_, v246.__r_.__value_.__l.__size_);
  else
    *(std::string *)(v1 + 2008) = v246;
  *(_DWORD *)(v1 + 2032) = v247;
  *(_QWORD *)(v1 + 2036) = v248;
  *(_DWORD *)(v1 + 2044) = v249;
  *(_QWORD *)(v1 + 2000) = off_24C336AC0;
  *(_QWORD *)(v1 + 2048) = off_24C335D90;
  if (SHIBYTE(v240.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external((std::string *)(v1 + 2056), v240.__r_.__value_.__l.__data_, v240.__r_.__value_.__l.__size_);
  else
    *(std::string *)(v1 + 2056) = v240;
  *(_DWORD *)(v1 + 2080) = v241;
  *(_QWORD *)(v1 + 2084) = v242;
  *(_QWORD *)(v1 + 2048) = off_24C336AA0;
  *(_QWORD *)(v1 + 2096) = off_24C335D90;
  if (SHIBYTE(v233.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external((std::string *)(v1 + 2104), v233.__r_.__value_.__l.__data_, v233.__r_.__value_.__l.__size_);
  else
    *(std::string *)(v1 + 2104) = v233;
  *(_DWORD *)(v1 + 2128) = v234;
  *(_QWORD *)(v1 + 2132) = v235;
  *(_DWORD *)(v1 + 2140) = v236;
  *(_QWORD *)(v1 + 2096) = off_24C336AC0;
  *(_QWORD *)(v1 + 2144) = off_24C335D90;
  if (SHIBYTE(v226.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external((std::string *)(v1 + 2152), v226.__r_.__value_.__l.__data_, v226.__r_.__value_.__l.__size_);
  else
    *(std::string *)(v1 + 2152) = v226;
  *(_DWORD *)(v1 + 2176) = v227;
  *(_QWORD *)(v1 + 2180) = v228;
  *(_DWORD *)(v1 + 2188) = v229;
  *(_QWORD *)(v1 + 2144) = off_24C336AC0;
  *(_QWORD *)(v1 + 2192) = off_24C335D90;
  if (SHIBYTE(v220.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external((std::string *)(v1 + 2200), v220.__r_.__value_.__l.__data_, v220.__r_.__value_.__l.__size_);
  else
    *(std::string *)(v1 + 2200) = v220;
  *(_DWORD *)(v1 + 2224) = v221;
  *(_QWORD *)(v1 + 2228) = v222;
  *(_QWORD *)(v1 + 2192) = off_24C336AA0;
  *(_QWORD *)(v1 + 2240) = off_24C335D90;
  if (SHIBYTE(v213.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external((std::string *)(v1 + 2248), v213.__r_.__value_.__l.__data_, v213.__r_.__value_.__l.__size_);
  else
    *(std::string *)(v1 + 2248) = v213;
  *(_DWORD *)(v1 + 2272) = v214;
  *(_QWORD *)(v1 + 2276) = v215;
  *(_DWORD *)(v1 + 2284) = v216;
  *(_QWORD *)(v1 + 2240) = off_24C336AC0;
  *(_QWORD *)(v1 + 2288) = off_24C335D90;
  if (SHIBYTE(v207.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external((std::string *)(v1 + 2296), v207.__r_.__value_.__l.__data_, v207.__r_.__value_.__l.__size_);
  else
    *(std::string *)(v1 + 2296) = v207;
  *(_DWORD *)(v1 + 2320) = v208;
  *(_QWORD *)(v1 + 2324) = v209;
  *(_QWORD *)(v1 + 2288) = off_24C336AA0;
  *(_QWORD *)(v1 + 2336) = off_24C335D90;
  v2 = (std::string *)(v1 + 2344);
  if (SHIBYTE(v200.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v2, v200.__r_.__value_.__l.__data_, v200.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = *(_OWORD *)&v200.__r_.__value_.__l.__data_;
    *(_QWORD *)(v1 + 2360) = *((_QWORD *)&v200.__r_.__value_.__l + 2);
  }
  *(_DWORD *)(v1 + 2368) = v201;
  *(_QWORD *)(v1 + 2372) = v202;
  *(_DWORD *)(v1 + 2380) = v203;
  *(_QWORD *)(v1 + 2336) = off_24C336AC0;
  *(_QWORD *)(v1 + 2384) = off_24C335D90;
  v3 = (std::string *)(v1 + 2392);
  if (SHIBYTE(v193.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v3, v193.__r_.__value_.__l.__data_, v193.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = *(_OWORD *)&v193.__r_.__value_.__l.__data_;
    *(_QWORD *)(v1 + 2408) = *((_QWORD *)&v193.__r_.__value_.__l + 2);
  }
  *(_DWORD *)(v1 + 2416) = v194;
  *(_QWORD *)(v1 + 2420) = v195;
  *(_DWORD *)(v1 + 2428) = v196;
  *(_QWORD *)(v1 + 2384) = off_24C336AC0;
  *(_QWORD *)(v1 + 2432) = off_24C335D90;
  if (SHIBYTE(v187.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external((std::string *)(v1 + 2440), v187.__r_.__value_.__l.__data_, v187.__r_.__value_.__l.__size_);
  else
    *(std::string *)(v1 + 2440) = v187;
  *(_DWORD *)(v1 + 2464) = v188;
  *(_QWORD *)(v1 + 2468) = v189;
  *(_QWORD *)(v1 + 2432) = off_24C336AA0;
  *(_QWORD *)(v1 + 2480) = off_24C335D90;
  if (SHIBYTE(v180.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external((std::string *)(v1 + 2488), v180.__r_.__value_.__l.__data_, v180.__r_.__value_.__l.__size_);
  else
    *(std::string *)(v1 + 2488) = v180;
  *(_DWORD *)(v1 + 2512) = v181;
  *(_QWORD *)(v1 + 2516) = v182;
  *(_DWORD *)(v1 + 2524) = v183;
  *(_QWORD *)(v1 + 2480) = off_24C336AC0;
  *(_QWORD *)(v1 + 2528) = off_24C335D90;
  v4 = (std::string *)(v1 + 2536);
  if (SHIBYTE(v173.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v4, v173.__r_.__value_.__l.__data_, v173.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)&v173.__r_.__value_.__l.__data_;
    *(_QWORD *)(v1 + 2552) = *((_QWORD *)&v173.__r_.__value_.__l + 2);
  }
  *(_DWORD *)(v1 + 2560) = v174;
  *(_QWORD *)(v1 + 2564) = v175;
  *(_DWORD *)(v1 + 2572) = v176;
  *(_QWORD *)(v1 + 2528) = off_24C336AC0;
  *(_QWORD *)(v1 + 2576) = off_24C335D90;
  v5 = (std::string *)(v1 + 2584);
  if (SHIBYTE(v167.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v5, v167.__r_.__value_.__l.__data_, v167.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = *(_OWORD *)&v167.__r_.__value_.__l.__data_;
    *(_QWORD *)(v1 + 2600) = *((_QWORD *)&v167.__r_.__value_.__l + 2);
  }
  *(_DWORD *)(v1 + 2608) = v168;
  *(_QWORD *)(v1 + 2612) = v169;
  *(_QWORD *)(v1 + 2576) = off_24C336AA0;
  *(_QWORD *)(v1 + 2624) = off_24C335D90;
  v6 = (std::string *)(v1 + 2632);
  if (SHIBYTE(v160.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v6, v160.__r_.__value_.__l.__data_, v160.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = *(_OWORD *)&v160.__r_.__value_.__l.__data_;
    *(_QWORD *)(v1 + 2648) = *((_QWORD *)&v160.__r_.__value_.__l + 2);
  }
  *(_DWORD *)(v1 + 2656) = v161;
  *(_QWORD *)(v1 + 2660) = v162;
  *(_DWORD *)(v1 + 2668) = v163;
  *(_QWORD *)(v1 + 2624) = off_24C336AC0;
  *(_QWORD *)(v1 + 2672) = off_24C335D90;
  v7 = (std::string *)(v1 + 2680);
  if (SHIBYTE(v153.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v7, v153.__r_.__value_.__l.__data_, v153.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = *(_OWORD *)&v153.__r_.__value_.__l.__data_;
    *(_QWORD *)(v1 + 2696) = *((_QWORD *)&v153.__r_.__value_.__l + 2);
  }
  *(_DWORD *)(v1 + 2704) = v154;
  *(_QWORD *)(v1 + 2708) = v155;
  *(_DWORD *)(v1 + 2716) = v156;
  *(_QWORD *)(v1 + 2672) = off_24C336AC0;
  *(_QWORD *)(v1 + 2720) = off_24C335D90;
  v8 = (std::string *)(v1 + 2728);
  if (SHIBYTE(v147.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v8, v147.__r_.__value_.__l.__data_, v147.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v8->__r_.__value_.__l.__data_ = *(_OWORD *)&v147.__r_.__value_.__l.__data_;
    *(_QWORD *)(v1 + 2744) = *((_QWORD *)&v147.__r_.__value_.__l + 2);
  }
  *(_DWORD *)(v1 + 2752) = v148;
  *(_QWORD *)(v1 + 2756) = v149;
  *(_QWORD *)(v1 + 2720) = off_24C336AA0;
  *(_QWORD *)(v1 + 2768) = off_24C335D90;
  v9 = (std::string *)(v1 + 2776);
  if (SHIBYTE(v140.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v9, v140.__r_.__value_.__l.__data_, v140.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = *(_OWORD *)&v140.__r_.__value_.__l.__data_;
    *(_QWORD *)(v1 + 2792) = *((_QWORD *)&v140.__r_.__value_.__l + 2);
  }
  *(_DWORD *)(v1 + 2800) = v141;
  *(_QWORD *)(v1 + 2804) = v142;
  *(_DWORD *)(v1 + 2812) = v143;
  *(_QWORD *)(v1 + 2768) = off_24C336AC0;
  *(_QWORD *)(v1 + 2816) = off_24C335D90;
  v10 = (std::string *)(v1 + 2824);
  if (SHIBYTE(v133.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v10, v133.__r_.__value_.__l.__data_, v133.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v10->__r_.__value_.__l.__data_ = *(_OWORD *)&v133.__r_.__value_.__l.__data_;
    *(_QWORD *)(v1 + 2840) = *((_QWORD *)&v133.__r_.__value_.__l + 2);
  }
  *(_DWORD *)(v1 + 2848) = v134;
  *(_QWORD *)(v1 + 2852) = v135;
  *(_DWORD *)(v1 + 2860) = v136;
  *(_QWORD *)(v1 + 2816) = off_24C336AC0;
  *(_QWORD *)(v1 + 2864) = off_24C335D90;
  if (SHIBYTE(v127.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external((std::string *)(v1 + 2872), v127.__r_.__value_.__l.__data_, v127.__r_.__value_.__l.__size_);
  else
    *(std::string *)(v1 + 2872) = v127;
  *(_DWORD *)(v1 + 2896) = v128;
  *(_QWORD *)(v1 + 2900) = v129;
  *(_QWORD *)(v1 + 2864) = off_24C336AA0;
  *(_QWORD *)(v1 + 2912) = off_24C335D90;
  if (SHIBYTE(v121.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external((std::string *)(v1 + 2920), v121.__r_.__value_.__l.__data_, v121.__r_.__value_.__l.__size_);
  else
    *(std::string *)(v1 + 2920) = v121;
  *(_DWORD *)(v1 + 2944) = v122;
  *(_QWORD *)(v1 + 2948) = v123;
  *(_QWORD *)(v1 + 2912) = off_24C336AA0;
  *(_QWORD *)(v1 + 2960) = off_24C335D90;
  if (SHIBYTE(v115.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external((std::string *)(v1 + 2968), v115.__r_.__value_.__l.__data_, v115.__r_.__value_.__l.__size_);
  else
    *(std::string *)(v1 + 2968) = v115;
  *(_DWORD *)(v1 + 2992) = v116;
  *(_QWORD *)(v1 + 2996) = v117;
  *(_QWORD *)(v1 + 2960) = off_24C336AA0;
  *(_QWORD *)(v1 + 3008) = off_24C335D90;
  if (SHIBYTE(v109.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external((std::string *)(v1 + 3016), v109.__r_.__value_.__l.__data_, v109.__r_.__value_.__l.__size_);
  else
    *(std::string *)(v1 + 3016) = v109;
  *(_DWORD *)(v1 + 3040) = v110;
  *(_QWORD *)(v1 + 3044) = v111;
  *(_QWORD *)(v1 + 3008) = off_24C336AA0;
  *(_QWORD *)(v1 + 3056) = off_24C335D90;
  if (SHIBYTE(v102.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external((std::string *)(v1 + 3064), v102.__r_.__value_.__l.__data_, v102.__r_.__value_.__l.__size_);
  else
    *(std::string *)(v1 + 3064) = v102;
  *(_DWORD *)(v1 + 3088) = v103;
  *(_QWORD *)(v1 + 3092) = v104;
  *(_DWORD *)(v1 + 3100) = v105;
  *(_QWORD *)(v1 + 3056) = off_24C336AC0;
  *(_QWORD *)(v1 + 3104) = off_24C335D90;
  v11 = (std::string *)(v1 + 3112);
  if (SHIBYTE(v95.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v11, v95.__r_.__value_.__l.__data_, v95.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v11->__r_.__value_.__l.__data_ = *(_OWORD *)&v95.__r_.__value_.__l.__data_;
    *(_QWORD *)(v1 + 3128) = *((_QWORD *)&v95.__r_.__value_.__l + 2);
  }
  *(_DWORD *)(v1 + 3136) = v96;
  *(_QWORD *)(v1 + 3140) = v97;
  *(_DWORD *)(v1 + 3148) = v98;
  *(_QWORD *)(v1 + 3104) = off_24C336AC0;
  *(_QWORD *)(v1 + 3152) = off_24C335D90;
  v12 = (std::string *)(v1 + 3160);
  if (SHIBYTE(v89.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v12, v89.__r_.__value_.__l.__data_, v89.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v12->__r_.__value_.__l.__data_ = *(_OWORD *)&v89.__r_.__value_.__l.__data_;
    *(_QWORD *)(v1 + 3176) = *((_QWORD *)&v89.__r_.__value_.__l + 2);
  }
  *(_DWORD *)(v1 + 3184) = v90;
  *(_QWORD *)(v1 + 3188) = v91;
  *(_QWORD *)(v1 + 3152) = off_24C336AA0;
  *(_QWORD *)(v1 + 3200) = off_24C335D90;
  if (SHIBYTE(v83.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external((std::string *)(v1 + 3208), v83.__r_.__value_.__l.__data_, v83.__r_.__value_.__l.__size_);
  else
    *(std::string *)(v1 + 3208) = v83;
  *(_DWORD *)(v1 + 3232) = v84;
  *(_QWORD *)(v1 + 3236) = v85;
  *(_QWORD *)(v1 + 3200) = off_24C336AA0;
  *(_QWORD *)(v1 + 3248) = off_24C335D90;
  if (SHIBYTE(v77.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external((std::string *)(v1 + 3256), v77.__r_.__value_.__l.__data_, v77.__r_.__value_.__l.__size_);
  else
    *(std::string *)(v1 + 3256) = v77;
  *(_DWORD *)(v1 + 3280) = v78;
  *(_QWORD *)(v1 + 3284) = v79;
  *(_QWORD *)(v1 + 3248) = off_24C336AA0;
  *(_QWORD *)(v1 + 3296) = off_24C335D90;
  if (SHIBYTE(v71.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external((std::string *)(v1 + 3304), v71.__r_.__value_.__l.__data_, v71.__r_.__value_.__l.__size_);
  else
    *(std::string *)(v1 + 3304) = v71;
  *(_DWORD *)(v1 + 3328) = v72;
  *(_QWORD *)(v1 + 3332) = v73;
  *(_QWORD *)(v1 + 3296) = off_24C336AA0;
  *(_QWORD *)(v1 + 3344) = off_24C335D90;
  if (SHIBYTE(v65.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external((std::string *)(v1 + 3352), v65.__r_.__value_.__l.__data_, v65.__r_.__value_.__l.__size_);
  else
    *(std::string *)(v1 + 3352) = v65;
  *(_DWORD *)(v1 + 3376) = v66;
  *(_QWORD *)(v1 + 3380) = v67;
  *(_QWORD *)(v1 + 3344) = off_24C336AA0;
  *(_QWORD *)(v1 + 3392) = off_24C335D90;
  if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external((std::string *)(v1 + 3400), v59.__r_.__value_.__l.__data_, v59.__r_.__value_.__l.__size_);
  else
    *(std::string *)(v1 + 3400) = v59;
  *(_DWORD *)(v1 + 3424) = v60;
  *(_QWORD *)(v1 + 3428) = v61;
  *(_QWORD *)(v1 + 3392) = off_24C336AA0;
  *(_QWORD *)(v1 + 3440) = off_24C335D90;
  if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external((std::string *)(v1 + 3448), v53.__r_.__value_.__l.__data_, v53.__r_.__value_.__l.__size_);
  else
    *(std::string *)(v1 + 3448) = v53;
  *(_DWORD *)(v1 + 3472) = v54;
  *(_QWORD *)(v1 + 3476) = v55;
  *(_QWORD *)(v1 + 3440) = off_24C336AA0;
  *(_QWORD *)(v1 + 3488) = off_24C335D90;
  if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external((std::string *)(v1 + 3496), v46.__r_.__value_.__l.__data_, v46.__r_.__value_.__l.__size_);
  else
    *(std::string *)(v1 + 3496) = v46;
  *(_DWORD *)(v1 + 3520) = v47;
  *(_QWORD *)(v1 + 3524) = v48;
  *(_DWORD *)(v1 + 3532) = v49;
  *(_QWORD *)(v1 + 3488) = off_24C336AC0;
  *(_QWORD *)(v1 + 3536) = off_24C335D90;
  if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external((std::string *)(v1 + 3544), v40.__r_.__value_.__l.__data_, v40.__r_.__value_.__l.__size_);
  else
    *(std::string *)(v1 + 3544) = v40;
  *(_DWORD *)(v1 + 3568) = v41;
  *(_QWORD *)(v1 + 3572) = v42;
  *(_QWORD *)(v1 + 3536) = off_24C336AA0;
  *(_QWORD *)(v1 + 3584) = off_24C335D90;
  if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external((std::string *)(v1 + 3592), v33.__r_.__value_.__l.__data_, v33.__r_.__value_.__l.__size_);
  else
    *(std::string *)(v1 + 3592) = v33;
  *(_DWORD *)(v1 + 3616) = v34;
  *(_QWORD *)(v1 + 3620) = v35;
  *(_DWORD *)(v1 + 3628) = v36;
  *(_QWORD *)(v1 + 3584) = off_24C336AC0;
  *(_QWORD *)(v1 + 3632) = off_24C335D90;
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external((std::string *)(v1 + 3640), v26.__r_.__value_.__l.__data_, v26.__r_.__value_.__l.__size_);
  else
    *(std::string *)(v1 + 3640) = v26;
  *(_DWORD *)(v1 + 3664) = v27;
  *(_QWORD *)(v1 + 3668) = v28;
  *(_DWORD *)(v1 + 3676) = v29;
  *(_QWORD *)(v1 + 3632) = off_24C336AC0;
  *(_QWORD *)(v1 + 3680) = off_24C335D90;
  v13 = (std::string *)(v1 + 3688);
  v14 = HIBYTE(v19.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v13, v19.__r_.__value_.__l.__data_, v19.__r_.__value_.__l.__size_);
    v14 = HIBYTE(v19.__r_.__value_.__r.__words[2]);
  }
  else
  {
    *(_OWORD *)&v13->__r_.__value_.__l.__data_ = *(_OWORD *)&v19.__r_.__value_.__l.__data_;
    *(_QWORD *)(v1 + 3704) = *((_QWORD *)&v19.__r_.__value_.__l + 2);
  }
  *(_DWORD *)(v1 + 3712) = v20;
  *(_QWORD *)(v1 + 3716) = v21;
  *(_DWORD *)(v1 + 3724) = v22;
  *(_QWORD *)(v1 + 3680) = off_24C336AC0;
  v18 = off_24C335D90;
  if (v14 < 0)
    operator delete(v19.__r_.__value_.__l.__data_);
  if (v17 < 0)
    operator delete(v16[0]);
  v25 = off_24C335D90;
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v26.__r_.__value_.__l.__data_);
  if (v24 < 0)
    operator delete(v23[0]);
  v32 = off_24C335D90;
  if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v33.__r_.__value_.__l.__data_);
  if (v31 < 0)
    operator delete(v30[0]);
  v39 = off_24C335D90;
  if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v40.__r_.__value_.__l.__data_);
  if (v38 < 0)
    operator delete(v37[0]);
  v45 = off_24C335D90;
  if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v46.__r_.__value_.__l.__data_);
  if (v44 < 0)
    operator delete(v43[0]);
  v52 = off_24C335D90;
  if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v53.__r_.__value_.__l.__data_);
  if (v51 < 0)
    operator delete(v50[0]);
  v58 = off_24C335D90;
  if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v59.__r_.__value_.__l.__data_);
  if (v57 < 0)
    operator delete(v56[0]);
  v64 = off_24C335D90;
  if (SHIBYTE(v65.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v65.__r_.__value_.__l.__data_);
  if (v63 < 0)
    operator delete(v62[0]);
  v70 = off_24C335D90;
  if (SHIBYTE(v71.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v71.__r_.__value_.__l.__data_);
  if (v69 < 0)
    operator delete(v68[0]);
  v76 = off_24C335D90;
  if (SHIBYTE(v77.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v77.__r_.__value_.__l.__data_);
  if (v75 < 0)
    operator delete(v74[0]);
  v82 = off_24C335D90;
  if (SHIBYTE(v83.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v83.__r_.__value_.__l.__data_);
  if (v81 < 0)
    operator delete(v80[0]);
  v88 = off_24C335D90;
  if (SHIBYTE(v89.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v89.__r_.__value_.__l.__data_);
  if (v87 < 0)
    operator delete(v86[0]);
  v94 = off_24C335D90;
  if (SHIBYTE(v95.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v95.__r_.__value_.__l.__data_);
  if (v93 < 0)
    operator delete(v92[0]);
  v101 = off_24C335D90;
  if (SHIBYTE(v102.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v102.__r_.__value_.__l.__data_);
  if (v100 < 0)
    operator delete(v99[0]);
  v108 = off_24C335D90;
  if (SHIBYTE(v109.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v109.__r_.__value_.__l.__data_);
  if (v107 < 0)
    operator delete(v106[0]);
  v114 = off_24C335D90;
  if (SHIBYTE(v115.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v115.__r_.__value_.__l.__data_);
  if (v113 < 0)
    operator delete(v112[0]);
  v120 = off_24C335D90;
  if (SHIBYTE(v121.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v121.__r_.__value_.__l.__data_);
  if (v119 < 0)
    operator delete(v118[0]);
  v126 = off_24C335D90;
  if (SHIBYTE(v127.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v127.__r_.__value_.__l.__data_);
  if (v125 < 0)
    operator delete(v124[0]);
  v132 = off_24C335D90;
  if (SHIBYTE(v133.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v133.__r_.__value_.__l.__data_);
  if (v131 < 0)
    operator delete(v130[0]);
  v139 = off_24C335D90;
  if (SHIBYTE(v140.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v140.__r_.__value_.__l.__data_);
  if (v138 < 0)
    operator delete(v137[0]);
  v146 = off_24C335D90;
  if (SHIBYTE(v147.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v147.__r_.__value_.__l.__data_);
  if (v145 < 0)
    operator delete(v144[0]);
  v152 = off_24C335D90;
  if (SHIBYTE(v153.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v153.__r_.__value_.__l.__data_);
  if (v151 < 0)
    operator delete(v150[0]);
  v159 = off_24C335D90;
  if (SHIBYTE(v160.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v160.__r_.__value_.__l.__data_);
  if (v158 < 0)
    operator delete(v157[0]);
  v166 = off_24C335D90;
  if (SHIBYTE(v167.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v167.__r_.__value_.__l.__data_);
  if (v165 < 0)
    operator delete(v164[0]);
  v172 = off_24C335D90;
  if (SHIBYTE(v173.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v173.__r_.__value_.__l.__data_);
  if (v171 < 0)
    operator delete(v170[0]);
  v179 = off_24C335D90;
  if (SHIBYTE(v180.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v180.__r_.__value_.__l.__data_);
  if (v178 < 0)
    operator delete(v177[0]);
  v186 = off_24C335D90;
  if (SHIBYTE(v187.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v187.__r_.__value_.__l.__data_);
  if (v185 < 0)
    operator delete(v184[0]);
  v192 = off_24C335D90;
  if (SHIBYTE(v193.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v193.__r_.__value_.__l.__data_);
  if (v191 < 0)
    operator delete(v190[0]);
  v199 = off_24C335D90;
  if (SHIBYTE(v200.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v200.__r_.__value_.__l.__data_);
  if (v198 < 0)
    operator delete(v197[0]);
  v206 = off_24C335D90;
  if (SHIBYTE(v207.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v207.__r_.__value_.__l.__data_);
  if (v205 < 0)
    operator delete(v204[0]);
  v212 = off_24C335D90;
  if (SHIBYTE(v213.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v213.__r_.__value_.__l.__data_);
  if (v211 < 0)
    operator delete(v210[0]);
  v219 = off_24C335D90;
  if (SHIBYTE(v220.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v220.__r_.__value_.__l.__data_);
  if (v218 < 0)
    operator delete(v217[0]);
  v225 = off_24C335D90;
  if (SHIBYTE(v226.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v226.__r_.__value_.__l.__data_);
  if (v224 < 0)
    operator delete(v223[0]);
  v232 = off_24C335D90;
  if (SHIBYTE(v233.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v233.__r_.__value_.__l.__data_);
  if (v231 < 0)
    operator delete(v230[0]);
  v239 = off_24C335D90;
  if (SHIBYTE(v240.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v240.__r_.__value_.__l.__data_);
  if (v238 < 0)
    operator delete(v237[0]);
  v245 = off_24C335D90;
  if (SHIBYTE(v246.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v246.__r_.__value_.__l.__data_);
  if (v244 < 0)
    operator delete(v243[0]);
  v252 = off_24C335D90;
  if (SHIBYTE(v253.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v253.__r_.__value_.__l.__data_);
  if (v251 < 0)
    operator delete(v250[0]);
  v258 = off_24C335D90;
  if (SHIBYTE(v259.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v259.__r_.__value_.__l.__data_);
  if (v257 < 0)
    operator delete(v256[0]);
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__s.__r_.__value_.__l.__data_);
  *(_QWORD *)v1 = off_24C33ABE8;
  return v1;
}

void sub_20A672BD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void **a41,void **a42,uint64_t a43,uint64_t a44,uint64_t a45,void **a46,void **a47,uint64_t a48,void **a49,void **a50,void **a51,void **a52,void **a53,void **a54,void **a55,uint64_t a56,void **a57,void **a58,void **a59,void **a60,void **a61,void **a62,void **a63)
{
  void **a64;
  void **a68;
  void **a70;
  void **a71;
  void **a72;
  uint64_t v72;
  void **v73;
  void **v74;
  uint64_t v75;
  void **v76;
  void **v77;
  void **v78;
  void **v79;
  void **v80;

  *(_QWORD *)(v72 + 3632) = v75;
  if (*(char *)(v72 + 3663) < 0)
    operator delete(*v74);
  *(_QWORD *)(v72 + 3584) = v75;
  if (*(char *)(v72 + 3615) < 0)
    operator delete(*v73);
  *(_QWORD *)(v72 + 3536) = v75;
  if (*(char *)(v72 + 3567) < 0)
    operator delete(*v80);
  *(_QWORD *)(v72 + 3488) = v75;
  if (*(char *)(v72 + 3519) < 0)
    operator delete(*v79);
  *(_QWORD *)(v72 + 3440) = v75;
  if (*(char *)(v72 + 3471) < 0)
    operator delete(*v78);
  *(_QWORD *)(v72 + 3392) = v75;
  if (*(char *)(v72 + 3423) < 0)
    operator delete(*v77);
  *(_QWORD *)(v72 + 3344) = v75;
  if (*(char *)(v72 + 3375) < 0)
    operator delete(*v76);
  *(_QWORD *)(v72 + 3296) = v75;
  if (*(char *)(v72 + 3327) < 0)
    operator delete(*a68);
  *(_QWORD *)(v72 + 3248) = v75;
  if (*(char *)(v72 + 3279) < 0)
    operator delete(*a70);
  *(_QWORD *)(v72 + 3200) = v75;
  if (*(char *)(v72 + 3231) < 0)
    operator delete(*a71);
  *(_QWORD *)(v72 + 3152) = v75;
  if (*(char *)(v72 + 3183) < 0)
    operator delete(*a49);
  *(_QWORD *)(v72 + 3104) = v75;
  if (*(char *)(v72 + 3135) < 0)
    operator delete(*a46);
  *(_QWORD *)(v72 + 3056) = v75;
  if (*(char *)(v72 + 3087) < 0)
    operator delete(*a72);
  *(_QWORD *)(v72 + 3008) = v75;
  if (*(char *)(v72 + 3039) < 0)
    operator delete(*(void **)STACK[0x200]);
  *(_QWORD *)(v72 + 2960) = v75;
  if (*(char *)(v72 + 2991) < 0)
    operator delete(*a50);
  *(_QWORD *)(v72 + 2912) = v75;
  if (*(char *)(v72 + 2943) < 0)
    operator delete(*(void **)STACK[0x208]);
  *(_QWORD *)(v72 + 2864) = v75;
  if (*(char *)(v72 + 2895) < 0)
    operator delete(*a47);
  *(_QWORD *)(v72 + 2816) = v75;
  if (*(char *)(v72 + 2847) < 0)
    operator delete(*(void **)STACK[0x210]);
  *(_QWORD *)(v72 + 2768) = v75;
  if (*(char *)(v72 + 2799) < 0)
    operator delete(*(void **)STACK[0x220]);
  *(_QWORD *)(v72 + 2720) = v75;
  if (*(char *)(v72 + 2751) < 0)
    operator delete(*a52);
  *(_QWORD *)(v72 + 2672) = v75;
  if (*(char *)(v72 + 2703) < 0)
    operator delete(*(void **)STACK[0x218]);
  *(_QWORD *)(v72 + 2624) = v75;
  if (*(char *)(v72 + 2655) < 0)
    operator delete(*a53);
  *(_QWORD *)(v72 + 2576) = v75;
  if (*(char *)(v72 + 2607) < 0)
    operator delete(*a54);
  *(_QWORD *)(v72 + 2528) = v75;
  if (*(char *)(v72 + 2559) < 0)
    operator delete(*a51);
  *(_QWORD *)(v72 + 2480) = v75;
  if (*(char *)(v72 + 2511) < 0)
    operator delete(*a55);
  *(_QWORD *)(v72 + 2432) = v75;
  if (*(char *)(v72 + 2463) < 0)
    operator delete(*a57);
  *(_QWORD *)(v72 + 2384) = v75;
  if (*(char *)(v72 + 2415) < 0)
    operator delete(*a58);
  *(_QWORD *)(v72 + 2336) = v75;
  if (*(char *)(v72 + 2367) < 0)
    operator delete(*a59);
  *(_QWORD *)(v72 + 2288) = v75;
  if (*(char *)(v72 + 2319) < 0)
    operator delete(*(void **)STACK[0x228]);
  *(_QWORD *)(v72 + 2240) = v75;
  if (*(char *)(v72 + 2271) < 0)
    operator delete(*a61);
  *(_QWORD *)(v72 + 2192) = v75;
  if (*(char *)(v72 + 2223) < 0)
    operator delete(*a63);
  *(_QWORD *)(v72 + 2144) = v75;
  if (*(char *)(v72 + 2175) < 0)
    operator delete(*(void **)STACK[0x230]);
  *(_QWORD *)(v72 + 2096) = v75;
  if (*(char *)(v72 + 2127) < 0)
    operator delete(*a64);
  *(_QWORD *)(v72 + 2048) = v75;
  if (*(char *)(v72 + 2079) < 0)
    operator delete(*a62);
  *(_QWORD *)(v72 + 2000) = v75;
  if (*(char *)(v72 + 2031) < 0)
    operator delete(*a60);
  *(_QWORD *)(v72 + 1952) = v75;
  if (*(char *)(v72 + 1983) < 0)
    operator delete(*a41);
  *(_QWORD *)(v72 + 1904) = v75;
  if (*(char *)(v72 + 1935) < 0)
    operator delete(*a42);
  mediaplatform::DatabaseTable<long long,int,long long,int,long long,long long,int,long long,int,long long,long long,int,long long,long long,int,long long,long long,int,long long,long long,int,int,int,int,long long,long long,int,int,int,int,int,int,int,long long,int,long long,long long,long long>::~DatabaseTable(v72);
  STACK[0x250] = (unint64_t)off_24C335D90;
  if (SLOBYTE(STACK[0x26F]) < 0)
    operator delete((void *)STACK[0x258]);
  if (SLOBYTE(STACK[0x24F]) < 0)
    operator delete((void *)STACK[0x238]);
  STACK[0x298] = (unint64_t)off_24C335D90;
  if (SLOBYTE(STACK[0x2B7]) < 0)
    operator delete((void *)STACK[0x2A0]);
  if (SLOBYTE(STACK[0x297]) < 0)
    operator delete((void *)STACK[0x280]);
  STACK[0x2E0] = (unint64_t)off_24C335D90;
  if (SLOBYTE(STACK[0x2FF]) < 0)
    operator delete((void *)STACK[0x2E8]);
  if (SLOBYTE(STACK[0x2DF]) < 0)
    operator delete((void *)STACK[0x2C8]);
  STACK[0x328] = (unint64_t)off_24C335D90;
  if (SLOBYTE(STACK[0x347]) < 0)
    operator delete((void *)STACK[0x330]);
  if (SLOBYTE(STACK[0x327]) < 0)
    operator delete((void *)STACK[0x310]);
  STACK[0x370] = (unint64_t)off_24C335D90;
  if (SLOBYTE(STACK[0x38F]) < 0)
    operator delete((void *)STACK[0x378]);
  if (SLOBYTE(STACK[0x36F]) < 0)
    operator delete((void *)STACK[0x358]);
  STACK[0x3B8] = (unint64_t)off_24C335D90;
  if (SLOBYTE(STACK[0x3D7]) < 0)
    operator delete((void *)STACK[0x3C0]);
  if (SLOBYTE(STACK[0x3B7]) < 0)
    operator delete((void *)STACK[0x3A0]);
  STACK[0x400] = (unint64_t)off_24C335D90;
  if (SLOBYTE(STACK[0x41F]) < 0)
    operator delete((void *)STACK[0x408]);
  if (SLOBYTE(STACK[0x3FF]) < 0)
    operator delete((void *)STACK[0x3E8]);
  STACK[0x448] = (unint64_t)off_24C335D90;
  if (SLOBYTE(STACK[0x467]) < 0)
    operator delete((void *)STACK[0x450]);
  if (SLOBYTE(STACK[0x447]) < 0)
    operator delete((void *)STACK[0x430]);
  STACK[0x490] = (unint64_t)off_24C335D90;
  if (SLOBYTE(STACK[0x4AF]) < 0)
    operator delete((void *)STACK[0x498]);
  if (SLOBYTE(STACK[0x48F]) < 0)
    operator delete((void *)STACK[0x478]);
  STACK[0x4D8] = (unint64_t)off_24C335D90;
  if (SLOBYTE(STACK[0x4F7]) < 0)
    operator delete((void *)STACK[0x4E0]);
  if (SLOBYTE(STACK[0x4D7]) < 0)
    operator delete((void *)STACK[0x4C0]);
  STACK[0x520] = (unint64_t)off_24C335D90;
  if (SLOBYTE(STACK[0x53F]) < 0)
    operator delete((void *)STACK[0x528]);
  if (SLOBYTE(STACK[0x51F]) < 0)
    operator delete((void *)STACK[0x508]);
  STACK[0x568] = (unint64_t)off_24C335D90;
  if (SLOBYTE(STACK[0x587]) < 0)
    operator delete((void *)STACK[0x570]);
  if (SLOBYTE(STACK[0x567]) < 0)
    operator delete((void *)STACK[0x550]);
  STACK[0x5B0] = (unint64_t)off_24C335D90;
  if (SLOBYTE(STACK[0x5CF]) < 0)
    operator delete((void *)STACK[0x5B8]);
  if (SLOBYTE(STACK[0x5AF]) < 0)
    operator delete((void *)STACK[0x598]);
  STACK[0x5F8] = (unint64_t)off_24C335D90;
  if (SLOBYTE(STACK[0x617]) < 0)
    operator delete((void *)STACK[0x600]);
  if (SLOBYTE(STACK[0x5F7]) < 0)
    operator delete((void *)STACK[0x5E0]);
  STACK[0x640] = (unint64_t)off_24C335D90;
  if (SLOBYTE(STACK[0x65F]) < 0)
    operator delete((void *)STACK[0x648]);
  if (SLOBYTE(STACK[0x63F]) < 0)
    operator delete((void *)STACK[0x628]);
  STACK[0x688] = (unint64_t)off_24C335D90;
  if (SLOBYTE(STACK[0x6A7]) < 0)
    operator delete((void *)STACK[0x690]);
  if (SLOBYTE(STACK[0x687]) < 0)
    operator delete((void *)STACK[0x670]);
  STACK[0x6D0] = (unint64_t)off_24C335D90;
  if (SLOBYTE(STACK[0x6EF]) < 0)
    operator delete((void *)STACK[0x6D8]);
  if (SLOBYTE(STACK[0x6CF]) < 0)
    operator delete((void *)STACK[0x6B8]);
  STACK[0x718] = (unint64_t)off_24C335D90;
  if (SLOBYTE(STACK[0x737]) < 0)
    operator delete((void *)STACK[0x720]);
  if (SLOBYTE(STACK[0x717]) < 0)
    operator delete((void *)STACK[0x700]);
  STACK[0x760] = (unint64_t)off_24C335D90;
  if (SLOBYTE(STACK[0x77F]) < 0)
    operator delete((void *)STACK[0x768]);
  if (SLOBYTE(STACK[0x75F]) < 0)
    operator delete((void *)STACK[0x748]);
  STACK[0x7A8] = (unint64_t)off_24C335D90;
  if (SLOBYTE(STACK[0x7C7]) < 0)
    operator delete((void *)STACK[0x7B0]);
  if (SLOBYTE(STACK[0x7A7]) < 0)
    operator delete((void *)STACK[0x790]);
  STACK[0x7F0] = (unint64_t)off_24C335D90;
  if (SLOBYTE(STACK[0x80F]) < 0)
    operator delete((void *)STACK[0x7F8]);
  if (SLOBYTE(STACK[0x7EF]) < 0)
    operator delete((void *)STACK[0x7D8]);
  STACK[0x838] = (unint64_t)off_24C335D90;
  if (SLOBYTE(STACK[0x857]) < 0)
    operator delete((void *)STACK[0x840]);
  if (SLOBYTE(STACK[0x837]) < 0)
    operator delete((void *)STACK[0x820]);
  STACK[0x880] = (unint64_t)off_24C335D90;
  if (SLOBYTE(STACK[0x89F]) < 0)
    operator delete((void *)STACK[0x888]);
  if (SLOBYTE(STACK[0x87F]) < 0)
    operator delete((void *)STACK[0x868]);
  STACK[0x8C8] = (unint64_t)off_24C335D90;
  if (SLOBYTE(STACK[0x8E7]) < 0)
    operator delete((void *)STACK[0x8D0]);
  if (SLOBYTE(STACK[0x8C7]) < 0)
    operator delete((void *)STACK[0x8B0]);
  STACK[0x910] = (unint64_t)off_24C335D90;
  if (SLOBYTE(STACK[0x92F]) < 0)
    operator delete((void *)STACK[0x918]);
  if (SLOBYTE(STACK[0x90F]) < 0)
    operator delete((void *)STACK[0x8F8]);
  STACK[0x958] = (unint64_t)off_24C335D90;
  if (SLOBYTE(STACK[0x977]) < 0)
    operator delete((void *)STACK[0x960]);
  if (SLOBYTE(STACK[0x957]) < 0)
    operator delete((void *)STACK[0x940]);
  STACK[0x9A0] = (unint64_t)off_24C335D90;
  if (SLOBYTE(STACK[0x9BF]) < 0)
    operator delete((void *)STACK[0x9A8]);
  if (SLOBYTE(STACK[0x99F]) < 0)
    operator delete((void *)STACK[0x988]);
  STACK[0x9E8] = (unint64_t)off_24C335D90;
  if (SLOBYTE(STACK[0xA07]) < 0)
    operator delete((void *)STACK[0x9F0]);
  if (SLOBYTE(STACK[0x9E7]) < 0)
    operator delete((void *)STACK[0x9D0]);
  STACK[0xA30] = (unint64_t)off_24C335D90;
  if (SLOBYTE(STACK[0xA4F]) < 0)
    operator delete((void *)STACK[0xA38]);
  if (SLOBYTE(STACK[0xA2F]) < 0)
    operator delete((void *)STACK[0xA18]);
  STACK[0xA78] = (unint64_t)off_24C335D90;
  if (SLOBYTE(STACK[0xA97]) < 0)
    operator delete((void *)STACK[0xA80]);
  if (SLOBYTE(STACK[0xA77]) < 0)
    operator delete((void *)STACK[0xA60]);
  STACK[0xAC0] = (unint64_t)off_24C335D90;
  if (SLOBYTE(STACK[0xADF]) < 0)
    operator delete((void *)STACK[0xAC8]);
  if (SLOBYTE(STACK[0xABF]) < 0)
    operator delete((void *)STACK[0xAA8]);
  STACK[0xB08] = (unint64_t)off_24C335D90;
  if (SLOBYTE(STACK[0xB27]) < 0)
    operator delete((void *)STACK[0xB10]);
  if (SLOBYTE(STACK[0xB07]) < 0)
    operator delete((void *)STACK[0xAF0]);
  STACK[0xB50] = (unint64_t)off_24C335D90;
  if (SLOBYTE(STACK[0xB6F]) < 0)
    operator delete((void *)STACK[0xB58]);
  if (SLOBYTE(STACK[0xB4F]) < 0)
    operator delete((void *)STACK[0xB38]);
  STACK[0xB98] = (unint64_t)off_24C335D90;
  if (SLOBYTE(STACK[0xBB7]) < 0)
    operator delete((void *)STACK[0xBA0]);
  if (SLOBYTE(STACK[0xB97]) < 0)
    operator delete((void *)STACK[0xB80]);
  STACK[0xBE0] = (unint64_t)off_24C335D90;
  if (SLOBYTE(STACK[0xBFF]) < 0)
    operator delete((void *)STACK[0xBE8]);
  if (SLOBYTE(STACK[0xBDF]) < 0)
    operator delete((void *)STACK[0xBC8]);
  STACK[0xC28] = (unint64_t)off_24C335D90;
  if (SLOBYTE(STACK[0xC47]) < 0)
    operator delete((void *)STACK[0xC30]);
  if (SLOBYTE(STACK[0xC27]) < 0)
    operator delete((void *)STACK[0xC10]);
  STACK[0xC70] = (unint64_t)off_24C335D90;
  if (SLOBYTE(STACK[0xC8F]) < 0)
    operator delete((void *)STACK[0xC78]);
  if (SLOBYTE(STACK[0xC6F]) < 0)
    operator delete((void *)STACK[0xC58]);
  STACK[0xCB8] = (unint64_t)off_24C335D90;
  if (SLOBYTE(STACK[0xCD7]) < 0)
    operator delete((void *)STACK[0xCC0]);
  if (SLOBYTE(STACK[0xCB7]) < 0)
    operator delete((void *)STACK[0xCA0]);
  if (SLOBYTE(STACK[0xCFF]) < 0)
    operator delete((void *)STACK[0xCE8]);
  _Unwind_Resume(a1);
}

void sub_20A673B9C()
{
  JUMPOUT(0x20A673518);
}

void sub_20A673BA4()
{
  JUMPOUT(0x20A673528);
}

void sub_20A673BAC()
{
  JUMPOUT(0x20A673544);
}

void sub_20A673BB4()
{
  JUMPOUT(0x20A673554);
}

void sub_20A673BBC()
{
  JUMPOUT(0x20A673570);
}

void sub_20A673BC4()
{
  JUMPOUT(0x20A673580);
}

void sub_20A673BCC()
{
  JUMPOUT(0x20A67359CLL);
}

void sub_20A673BD4()
{
  JUMPOUT(0x20A6735ACLL);
}

void sub_20A673BDC()
{
  JUMPOUT(0x20A6735C8);
}

void sub_20A673BE4()
{
  JUMPOUT(0x20A6735D8);
}

void sub_20A673BEC()
{
  JUMPOUT(0x20A6735F4);
}

void sub_20A673BF4()
{
  JUMPOUT(0x20A673604);
}

void sub_20A673BFC()
{
  JUMPOUT(0x20A673620);
}

void sub_20A673C04()
{
  JUMPOUT(0x20A673630);
}

void sub_20A673C0C()
{
  JUMPOUT(0x20A67364CLL);
}

void sub_20A673C14()
{
  JUMPOUT(0x20A67365CLL);
}

void sub_20A673C1C()
{
  JUMPOUT(0x20A673678);
}

void sub_20A673C24()
{
  JUMPOUT(0x20A673688);
}

void sub_20A673C2C()
{
  JUMPOUT(0x20A6736A4);
}

void sub_20A673C34()
{
  JUMPOUT(0x20A6736B4);
}

void sub_20A673C3C()
{
  JUMPOUT(0x20A6736D0);
}

void sub_20A673C44()
{
  JUMPOUT(0x20A6736E0);
}

void sub_20A673C4C()
{
  JUMPOUT(0x20A6736FCLL);
}

void sub_20A673C54()
{
  JUMPOUT(0x20A67370CLL);
}

void sub_20A673C5C()
{
  JUMPOUT(0x20A673728);
}

void sub_20A673C64()
{
  JUMPOUT(0x20A673738);
}

void sub_20A673C6C()
{
  JUMPOUT(0x20A673754);
}

void sub_20A673C74()
{
  JUMPOUT(0x20A673764);
}

void sub_20A673C7C()
{
  JUMPOUT(0x20A673780);
}

void sub_20A673C84()
{
  JUMPOUT(0x20A673790);
}

void sub_20A673C8C()
{
  JUMPOUT(0x20A6737ACLL);
}

void sub_20A673C94()
{
  JUMPOUT(0x20A6737BCLL);
}

void sub_20A673C9C()
{
  JUMPOUT(0x20A6737D8);
}

void sub_20A673CA4()
{
  JUMPOUT(0x20A6737E8);
}

void sub_20A673CAC()
{
  JUMPOUT(0x20A673804);
}

void sub_20A673CB4()
{
  JUMPOUT(0x20A673814);
}

void sub_20A673CBC()
{
  JUMPOUT(0x20A673830);
}

void sub_20A673CC4()
{
  JUMPOUT(0x20A673840);
}

void sub_20A673CCC()
{
  JUMPOUT(0x20A67385CLL);
}

void sub_20A673CD4()
{
  JUMPOUT(0x20A67386CLL);
}

void sub_20A673CDC()
{
  JUMPOUT(0x20A673888);
}

void sub_20A673CE4()
{
  JUMPOUT(0x20A673898);
}

void sub_20A673CEC()
{
  JUMPOUT(0x20A6738B4);
}

void sub_20A673CF4()
{
  JUMPOUT(0x20A6738C4);
}

void sub_20A673CFC()
{
  JUMPOUT(0x20A6738E0);
}

void sub_20A673D04()
{
  JUMPOUT(0x20A6738F0);
}

void sub_20A673D0C()
{
  JUMPOUT(0x20A67390CLL);
}

void sub_20A673D14()
{
  JUMPOUT(0x20A67391CLL);
}

void sub_20A673D1C()
{
  JUMPOUT(0x20A673938);
}

void sub_20A673D24()
{
  JUMPOUT(0x20A673948);
}

void sub_20A673D2C()
{
  JUMPOUT(0x20A673964);
}

void sub_20A673D34()
{
  JUMPOUT(0x20A673974);
}

void sub_20A673D3C()
{
  JUMPOUT(0x20A673990);
}

void sub_20A673D44()
{
  JUMPOUT(0x20A6739A0);
}

void sub_20A673D4C()
{
  JUMPOUT(0x20A6739BCLL);
}

void sub_20A673D54()
{
  JUMPOUT(0x20A6739CCLL);
}

void sub_20A673D5C()
{
  JUMPOUT(0x20A6739E8);
}

void sub_20A673D64()
{
  JUMPOUT(0x20A6739F8);
}

void sub_20A673D6C()
{
  JUMPOUT(0x20A673A14);
}

void sub_20A673D74()
{
  JUMPOUT(0x20A673A24);
}

void sub_20A673D7C()
{
  JUMPOUT(0x20A673A40);
}

void sub_20A673D84()
{
  JUMPOUT(0x20A673A50);
}

void sub_20A673D8C()
{
  JUMPOUT(0x20A673A6CLL);
}

void sub_20A673D94()
{
  JUMPOUT(0x20A673A7CLL);
}

void sub_20A673D9C()
{
  JUMPOUT(0x20A673A98);
}

void sub_20A673DA4()
{
  JUMPOUT(0x20A673AA8);
}

void sub_20A673DAC()
{
  JUMPOUT(0x20A673AC4);
}

void sub_20A673DB4()
{
  JUMPOUT(0x20A673AD4);
}

void sub_20A673DBC()
{
  JUMPOUT(0x20A673AF0);
}

void sub_20A673DC4()
{
  JUMPOUT(0x20A673B00);
}

void sub_20A673DCC()
{
  JUMPOUT(0x20A673B1CLL);
}

void sub_20A673DD4()
{
  JUMPOUT(0x20A673B2CLL);
}

void sub_20A673DDC()
{
  JUMPOUT(0x20A673B48);
}

void sub_20A673DE4()
{
  JUMPOUT(0x20A673B58);
}

void sub_20A673DEC()
{
  JUMPOUT(0x20A673B74);
}

void sub_20A673DF4()
{
  JUMPOUT(0x20A673B84);
}

uint64_t mlcore::ItemVideoTable::ItemVideoTable(mlcore::ItemVideoTable *this)
{
  uint64_t v1;
  const void *v2;
  size_t v3;
  void *v4;
  std::string *v5;
  std::string *v6;
  std::string *v7;
  std::string *v8;
  std::string *v9;
  std::string *v10;
  std::string *v11;
  std::string *v12;
  std::string *v13;
  std::string *v14;
  std::string *v15;
  std::string *v16;
  std::string *v17;
  std::string *v18;
  void *v20[2];
  char v21;
  void *v22[2];
  char v23;
  char v24[8];
  std::string v25;
  int v26;
  char v27;
  std::string v28;
  void *v29[2];
  char v30;
  void *v31[2];
  char v32;
  char v33[8];
  std::string v34;
  int v35;
  char v36;
  std::string v37;
  void *v38[2];
  char v39;
  void *v40[2];
  char v41;
  char v42[8];
  std::string v43;
  int v44;
  char v45;
  std::string v46;
  void *v47[2];
  char v48;
  void (**v49)(mediaplatform::DatabaseColumnBase *__hidden);
  std::string v50;
  int v51;
  uint64_t v52;
  int v53;
  void *v54[2];
  char v55;
  void (**v56)(mediaplatform::DatabaseColumnBase *__hidden);
  std::string v57;
  int v58;
  uint64_t v59;
  int v60;
  void *v61[2];
  char v62;
  void (**v63)(mediaplatform::DatabaseColumnBase *__hidden);
  std::string v64;
  int v65;
  uint64_t v66;
  void *v67[2];
  char v68;
  void *v69[2];
  char v70;
  char v71[8];
  std::string v72;
  int v73;
  char v74;
  std::string v75;
  void *v76[2];
  char v77;
  void (**v78)(mediaplatform::DatabaseColumnBase *__hidden);
  std::string v79;
  int v80;
  uint64_t v81;
  void *v82[2];
  char v83;
  void (**v84)(mediaplatform::DatabaseColumnBase *__hidden);
  std::string v85;
  int v86;
  uint64_t v87;
  void *v88[2];
  char v89;
  void (**v90)(mediaplatform::DatabaseColumnBase *__hidden);
  std::string v91;
  int v92;
  uint64_t v93;
  void *v94[2];
  char v95;
  void (**v96)(mediaplatform::DatabaseColumnBase *__hidden);
  std::string v97;
  int v98;
  uint64_t v99;
  void *v100[2];
  char v101;
  char v102[8];
  std::string v103;
  int v104;
  char v105;
  uint64_t v106;
  size_t v107;
  const void *v108;
  void *v109[2];
  char v110;
  void (**v111)(mediaplatform::DatabaseColumnBase *__hidden);
  std::string v112;
  int v113;
  uint64_t v114;
  int v115;
  void *v116[2];
  char v117;
  void *v118[2];
  char v119;
  char v120[8];
  std::string v121;
  int v122;
  char v123;
  std::string v124;
  void *v125[2];
  char v126;
  void (**v127)(mediaplatform::DatabaseColumnBase *__hidden);
  std::string v128;
  int v129;
  uint64_t v130;
  int v131;
  void *v132[2];
  char v133;
  void (**v134)(mediaplatform::DatabaseColumnBase *__hidden);
  std::string v135;
  int v136;
  uint64_t v137;
  int v138;
  void *v139[2];
  char v140;
  void *v141[2];
  char v142;
  char v143[8];
  std::string v144;
  int v145;
  char v146;
  std::string v147;
  void *v148[2];
  char v149;
  void (**v150)(mediaplatform::DatabaseColumnBase *__hidden);
  std::string v151;
  int v152;
  uint64_t v153;
  void *v154[2];
  char v155;
  void (**v156)(mediaplatform::DatabaseColumnBase *__hidden);
  std::string v157;
  int v158;
  uint64_t v159;
  void *v160[2];
  char v161;
  void (**v162)(mediaplatform::DatabaseColumnBase *__hidden);
  std::string v163;
  int v164;
  uint64_t v165;
  void *v166[2];
  char v167;
  void (**v168)(mediaplatform::DatabaseColumnBase *__hidden);
  std::string v169;
  int v170;
  uint64_t v171;
  void *v172[2];
  char v173;
  void (**v174)(mediaplatform::DatabaseColumnBase *__hidden);
  std::string v175;
  int v176;
  uint64_t v177;
  void *v178[2];
  char v179;
  void (**v180)(mediaplatform::DatabaseColumnBase *__hidden);
  std::string v181;
  int v182;
  uint64_t v183;
  void *v184[2];
  char v185;
  void (**v186)(mediaplatform::DatabaseColumnBase *__hidden);
  std::string v187;
  int v188;
  uint64_t v189;
  void *v190[2];
  char v191;
  void (**v192)(mediaplatform::DatabaseColumnBase *__hidden);
  std::string v193;
  int v194;
  uint64_t v195;
  void *v196[2];
  char v197;
  void (**v198)(mediaplatform::DatabaseColumnBase *__hidden);
  std::string v199;
  int v200;
  uint64_t v201;
  int v202;
  void *v203[2];
  char v204;
  void (**v205)(mediaplatform::DatabaseColumnBase *__hidden);
  std::string v206;
  int v207;
  uint64_t v208;
  void *v209[2];
  char v210;
  void (**v211)(mediaplatform::DatabaseColumnBase *__hidden);
  std::string v212;
  int v213;
  uint64_t v214;
  void *v215[2];
  char v216;
  void (**v217)(mediaplatform::DatabaseColumnBase *__hidden);
  std::string v218;
  int v219;
  uint64_t v220;
  void *v221[2];
  char v222;
  void (**v223)(mediaplatform::DatabaseColumnBase *__hidden);
  std::string v224;
  int v225;
  uint64_t v226;
  void *v227[2];
  char v228;
  void *v229[2];
  char v230;
  char v231[8];
  std::string v232;
  int v233;
  char v234;
  std::string v235;
  void *v236[2];
  char v237;
  void *v238[2];
  char v239;
  char v240[8];
  std::string v241;
  int v242;
  char v243;
  std::string v244;
  void *v245[2];
  char v246;
  void *v247[2];
  char v248;
  char v249[8];
  std::string v250;
  int v251;
  char v252;
  std::string v253;
  void *v254[2];
  char v255;
  void *v256[2];
  char v257;
  char v258[8];
  std::string v259;
  int v260;
  char v261;
  std::string v262;
  void *v263[2];
  char v264;
  void (**v265)(mediaplatform::DatabaseColumnBase *__hidden);
  std::string v266;
  int v267;
  uint64_t v268;
  void *v269[2];
  char v270;
  void (**v271)(mediaplatform::DatabaseColumnBase *__hidden);
  std::string v272;
  int v273;
  uint64_t v274;
  void *v275[2];
  char v276;
  void (**v277)(mediaplatform::DatabaseColumnBase *__hidden);
  std::string v278;
  int v279;
  uint64_t v280;
  void *v281[2];
  char v282;
  void (**v283)(mediaplatform::DatabaseColumnBase *__hidden);
  std::string v284;
  int v285;
  uint64_t v286;
  void *v287[2];
  char v288;
  void (**v289)(mediaplatform::DatabaseColumnBase *__hidden);
  std::string v290;
  int v291;
  uint64_t v292;
  int v293;
  std::string __s;
  uint64_t (**v295)();
  std::string v296;
  int v297;
  char v298;
  std::string v299;
  uint64_t (**v300)();
  std::string v301;
  int v302;
  char v303;
  std::string v304;
  uint64_t (**v305)();
  std::string v306;
  int v307;
  char v308;
  std::string v309;
  uint64_t (**v310)();
  std::string __p;
  int v312;
  uint64_t v313;
  int v314;
  uint64_t (**v315)();
  std::string v316;
  int v317;
  uint64_t v318;
  int v319;
  uint64_t (**v320)();
  std::string v321;
  int v322;
  uint64_t v323;
  uint64_t (**v324)();
  std::string v325;
  int v326;
  char v327;
  std::string v328;
  uint64_t (**v329)();
  std::string v330;
  int v331;
  uint64_t v332;
  uint64_t (**v333)();
  std::string v334;
  int v335;
  uint64_t v336;
  uint64_t (**v337)();
  std::string v338;
  int v339;
  uint64_t v340;
  uint64_t (**v341)();
  std::string v342;
  int v343;
  uint64_t v344;
  uint64_t (**v345)();
  std::string v346;
  int v347;
  char v348;
  void (**v349)(mediaplatform::Data *__hidden);
  size_t v350;
  size_t v351;
  void *v352;
  char v353;
  uint64_t (**v354)();
  std::string v355;
  int v356;
  uint64_t v357;
  int v358;
  uint64_t (**v359)();
  std::string v360;
  int v361;
  char v362;
  std::string v363;
  uint64_t (**v364)();
  std::string v365;
  int v366;
  uint64_t v367;
  int v368;
  uint64_t (**v369)();
  std::string v370;
  int v371;
  uint64_t v372;
  int v373;
  uint64_t (**v374)();
  std::string v375;
  int v376;
  char v377;
  std::string v378;
  uint64_t (**v379)();
  std::string v380;
  int v381;
  uint64_t v382;
  uint64_t (**v383)();
  std::string v384;
  int v385;
  uint64_t v386;
  uint64_t (**v387)();
  std::string v388;
  int v389;
  uint64_t v390;
  uint64_t (**v391)();
  std::string v392;
  int v393;
  uint64_t v394;
  uint64_t (**v395)();
  std::string v396;
  int v397;
  uint64_t v398;
  uint64_t (**v399)();
  std::string v400;
  int v401;
  uint64_t v402;
  uint64_t (**v403)();
  std::string v404;
  int v405;
  uint64_t v406;
  uint64_t (**v407)();
  std::string v408;
  int v409;
  uint64_t v410;
  uint64_t (**v411)();
  std::string v412;
  int v413;
  uint64_t v414;
  int v415;
  uint64_t (**v416)();
  std::string v417;
  int v418;
  uint64_t v419;
  uint64_t (**v420)();
  std::string v421;
  int v422;
  uint64_t v423;
  uint64_t (**v424)();
  std::string v425;
  int v426;
  uint64_t v427;
  uint64_t (**v428)();
  std::string v429;
  int v430;
  uint64_t v431;
  uint64_t (**v432)();
  std::string v433;
  int v434;
  char v435;
  std::string v436;
  uint64_t (**v437)();
  std::string v438;
  int v439;
  char v440;
  std::string v441;
  uint64_t (**v442)();
  std::string v443;
  int v444;
  char v445;
  std::string v446;
  uint64_t (**v447)();
  std::string v448;
  int v449;
  char v450;
  std::string v451;
  uint64_t (**v452)();
  std::string v453;
  int v454;
  uint64_t v455;
  uint64_t (**v456)();
  std::string v457;
  int v458;
  uint64_t v459;
  uint64_t (**v460)();
  std::string v461;
  int v462;
  uint64_t v463;
  uint64_t (**v464)();
  std::string v465;
  int v466;
  uint64_t v467;
  uint64_t (**v468)();
  std::string v469;
  int v470;
  uint64_t v471;
  int v472;
  std::string v473;

  v1 = MEMORY[0x24BDAC7A8](this);
  std::string::basic_string[abi:ne180100]<0>(&__s, "item_video");
  std::string::basic_string[abi:ne180100]<0>(v287, "item_pid");
  mlcore::MediaColumn<long long>::MediaColumn((uint64_t)&v289, (uint64_t)v287, 1);
  std::string::basic_string[abi:ne180100]<0>(v281, "video_quality");
  mlcore::MediaColumn<int>::MediaColumn((uint64_t)&v283, (uint64_t)v281, 0);
  std::string::basic_string[abi:ne180100]<0>(v275, "is_rental");
  mlcore::MediaColumn<int>::MediaColumn((uint64_t)&v277, (uint64_t)v275, 0);
  std::string::basic_string[abi:ne180100]<0>(v269, "has_chapter_data");
  mlcore::MediaColumn<int>::MediaColumn((uint64_t)&v271, (uint64_t)v269, 0);
  std::string::basic_string[abi:ne180100]<0>(v263, "season_number");
  mlcore::MediaColumn<int>::MediaColumn((uint64_t)&v265, (uint64_t)v263, 0);
  std::string::basic_string[abi:ne180100]<0>(v256, "episode_id");
  std::string::basic_string[abi:ne180100]<0>(v254, "");
  mlcore::MediaColumn<std::string>::MediaColumn((uint64_t)v258, (uint64_t)v256, (uint64_t)v254);
  std::string::basic_string[abi:ne180100]<0>(v247, "network_name");
  std::string::basic_string[abi:ne180100]<0>(v245, "");
  mlcore::MediaColumn<std::string>::MediaColumn((uint64_t)v249, (uint64_t)v247, (uint64_t)v245);
  std::string::basic_string[abi:ne180100]<0>(v238, "extended_content_rating");
  std::string::basic_string[abi:ne180100]<0>(v236, "");
  mlcore::MediaColumn<std::string>::MediaColumn((uint64_t)v240, (uint64_t)v238, (uint64_t)v236);
  std::string::basic_string[abi:ne180100]<0>(v229, "movie_info");
  std::string::basic_string[abi:ne180100]<0>(v227, "");
  mlcore::MediaColumn<std::string>::MediaColumn((uint64_t)v231, (uint64_t)v229, (uint64_t)v227);
  std::string::basic_string[abi:ne180100]<0>(v221, "has_alternate_audio");
  mlcore::MediaColumn<int>::MediaColumn((uint64_t)&v223, (uint64_t)v221, 0);
  std::string::basic_string[abi:ne180100]<0>(v215, "has_subtitles");
  mlcore::MediaColumn<int>::MediaColumn((uint64_t)&v217, (uint64_t)v215, 0);
  std::string::basic_string[abi:ne180100]<0>(v209, "audio_language");
  mlcore::MediaColumn<int>::MediaColumn((uint64_t)&v211, (uint64_t)v209, 0);
  std::string::basic_string[abi:ne180100]<0>(v203, "audio_track_index");
  mlcore::MediaColumn<int>::MediaColumn((uint64_t)&v205, (uint64_t)v203, 0);
  std::string::basic_string[abi:ne180100]<0>(v196, "audio_track_id");
  mlcore::MediaColumn<long long>::MediaColumn((uint64_t)&v198, (uint64_t)v196);
  std::string::basic_string[abi:ne180100]<0>(v190, "subtitle_language");
  mlcore::MediaColumn<int>::MediaColumn((uint64_t)&v192, (uint64_t)v190, 0);
  std::string::basic_string[abi:ne180100]<0>(v184, "subtitle_track_index");
  mlcore::MediaColumn<int>::MediaColumn((uint64_t)&v186, (uint64_t)v184, 0);
  std::string::basic_string[abi:ne180100]<0>(v178, "rental_duration");
  mlcore::MediaColumn<int>::MediaColumn((uint64_t)&v180, (uint64_t)v178, 0);
  std::string::basic_string[abi:ne180100]<0>(v172, "rental_playback_duration");
  mlcore::MediaColumn<int>::MediaColumn((uint64_t)&v174, (uint64_t)v172, 0);
  std::string::basic_string[abi:ne180100]<0>(v166, "rental_playback_date_started");
  mlcore::MediaColumn<int>::MediaColumn((uint64_t)&v168, (uint64_t)v166, 0);
  std::string::basic_string[abi:ne180100]<0>(v160, "rental_date_started");
  mlcore::MediaColumn<int>::MediaColumn((uint64_t)&v162, (uint64_t)v160, 0);
  std::string::basic_string[abi:ne180100]<0>(v154, "is_demo");
  mlcore::MediaColumn<int>::MediaColumn((uint64_t)&v156, (uint64_t)v154, 0);
  std::string::basic_string[abi:ne180100]<0>(v148, "has_hls");
  mlcore::MediaColumn<int>::MediaColumn((uint64_t)&v150, (uint64_t)v148, 0);
  std::string::basic_string[abi:ne180100]<0>(v141, "audio_track_locale");
  std::string::basic_string[abi:ne180100]<0>(v139, "");
  mlcore::MediaColumn<std::string>::MediaColumn((uint64_t)v143, (uint64_t)v141, (uint64_t)v139);
  std::string::basic_string[abi:ne180100]<0>(v132, "show_sort_type");
  mlcore::MediaColumn<long long>::MediaColumn((uint64_t)&v134, (uint64_t)v132);
  std::string::basic_string[abi:ne180100]<0>(v125, "episode_type");
  mlcore::MediaColumn<long long>::MediaColumn((uint64_t)&v127, (uint64_t)v125);
  std::string::basic_string[abi:ne180100]<0>(v118, "episode_type_display_name");
  std::string::basic_string[abi:ne180100]<0>(v116, "");
  mlcore::MediaColumn<std::string>::MediaColumn((uint64_t)v120, (uint64_t)v118, (uint64_t)v116);
  std::string::basic_string[abi:ne180100]<0>(v109, "episode_sub_sort_order");
  mlcore::MediaColumn<long long>::MediaColumn((uint64_t)&v111, (uint64_t)v109);
  std::string::basic_string[abi:ne180100]<0>(v100, "hls_offline_playback_keys");
  mlcore::MediaColumn<mediaplatform::Data>::MediaColumn((uint64_t)v102, (uint64_t)v100);
  std::string::basic_string[abi:ne180100]<0>(v94, "is_premium");
  mlcore::MediaColumn<int>::MediaColumn((uint64_t)&v96, (uint64_t)v94, 0);
  std::string::basic_string[abi:ne180100]<0>(v88, "color_capability");
  mlcore::MediaColumn<int>::MediaColumn((uint64_t)&v90, (uint64_t)v88, 0);
  std::string::basic_string[abi:ne180100]<0>(v82, "hls_color_capability");
  mlcore::MediaColumn<int>::MediaColumn((uint64_t)&v84, (uint64_t)v82, 0);
  std::string::basic_string[abi:ne180100]<0>(v76, "hls_video_quality");
  mlcore::MediaColumn<int>::MediaColumn((uint64_t)&v78, (uint64_t)v76, 0);
  std::string::basic_string[abi:ne180100]<0>(v69, "hls_playlist_url");
  std::string::basic_string[abi:ne180100]<0>(v67, "");
  mlcore::MediaColumn<std::string>::MediaColumn((uint64_t)v71, (uint64_t)v69, (uint64_t)v67);
  std::string::basic_string[abi:ne180100]<0>(v61, "audio_capability");
  mlcore::MediaColumn<int>::MediaColumn((uint64_t)&v63, (uint64_t)v61, 0);
  std::string::basic_string[abi:ne180100]<0>(v54, "hls_audio_capability");
  mlcore::MediaColumn<long long>::MediaColumn((uint64_t)&v56, (uint64_t)v54);
  std::string::basic_string[abi:ne180100]<0>(v47, "hls_asset_traits");
  mlcore::MediaColumn<long long>::MediaColumn((uint64_t)&v49, (uint64_t)v47);
  std::string::basic_string[abi:ne180100]<0>(v40, "hls_key_server_url");
  std::string::basic_string[abi:ne180100]<0>(v38, "");
  mlcore::MediaColumn<std::string>::MediaColumn((uint64_t)v42, (uint64_t)v40, (uint64_t)v38);
  std::string::basic_string[abi:ne180100]<0>(v31, "hls_key_cert_url");
  std::string::basic_string[abi:ne180100]<0>(v29, "");
  mlcore::MediaColumn<std::string>::MediaColumn((uint64_t)v33, (uint64_t)v31, (uint64_t)v29);
  std::string::basic_string[abi:ne180100]<0>(v22, "hls_key_server_protocol");
  std::string::basic_string[abi:ne180100]<0>(v20, "");
  mlcore::MediaColumn<std::string>::MediaColumn((uint64_t)v24, (uint64_t)v22, (uint64_t)v20);
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v473, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
  else
    v473 = __s;
  v468 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v290.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v469, v290.__r_.__value_.__l.__data_, v290.__r_.__value_.__l.__size_);
  else
    v469 = v290;
  v468 = off_24C335B18;
  v471 = v292;
  v470 = v291;
  v472 = v293;
  v464 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v284.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v465, v284.__r_.__value_.__l.__data_, v284.__r_.__value_.__l.__size_);
  else
    v465 = v284;
  v466 = v285;
  v464 = off_24C335AF8;
  v467 = v286;
  v460 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v278.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v461, v278.__r_.__value_.__l.__data_, v278.__r_.__value_.__l.__size_);
  else
    v461 = v278;
  v462 = v279;
  v460 = off_24C335AF8;
  v463 = v280;
  v456 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v272.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v457, v272.__r_.__value_.__l.__data_, v272.__r_.__value_.__l.__size_);
  else
    v457 = v272;
  v458 = v273;
  v456 = off_24C335AF8;
  v459 = v274;
  v452 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v266.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v453, v266.__r_.__value_.__l.__data_, v266.__r_.__value_.__l.__size_);
  else
    v453 = v266;
  v454 = v267;
  v452 = off_24C335AF8;
  v455 = v268;
  v447 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v259.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v448, v259.__r_.__value_.__l.__data_, v259.__r_.__value_.__l.__size_);
  else
    v448 = v259;
  v449 = v260;
  v447 = &off_24C335AB8;
  v450 = v261;
  if (SHIBYTE(v262.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v451, v262.__r_.__value_.__l.__data_, v262.__r_.__value_.__l.__size_);
  else
    v451 = v262;
  v442 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v250.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v443, v250.__r_.__value_.__l.__data_, v250.__r_.__value_.__l.__size_);
  else
    v443 = v250;
  v444 = v251;
  v442 = &off_24C335AB8;
  v445 = v252;
  if (SHIBYTE(v253.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v446, v253.__r_.__value_.__l.__data_, v253.__r_.__value_.__l.__size_);
  else
    v446 = v253;
  v437 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v241.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v438, v241.__r_.__value_.__l.__data_, v241.__r_.__value_.__l.__size_);
  else
    v438 = v241;
  v439 = v242;
  v437 = &off_24C335AB8;
  v440 = v243;
  if (SHIBYTE(v244.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v441, v244.__r_.__value_.__l.__data_, v244.__r_.__value_.__l.__size_);
  else
    v441 = v244;
  v432 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v232.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v433, v232.__r_.__value_.__l.__data_, v232.__r_.__value_.__l.__size_);
  else
    v433 = v232;
  v434 = v233;
  v432 = &off_24C335AB8;
  v435 = v234;
  if (SHIBYTE(v235.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v436, v235.__r_.__value_.__l.__data_, v235.__r_.__value_.__l.__size_);
  else
    v436 = v235;
  v428 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v224.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v429, v224.__r_.__value_.__l.__data_, v224.__r_.__value_.__l.__size_);
  else
    v429 = v224;
  v430 = v225;
  v428 = off_24C335AF8;
  v431 = v226;
  v424 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v218.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v425, v218.__r_.__value_.__l.__data_, v218.__r_.__value_.__l.__size_);
  else
    v425 = v218;
  v426 = v219;
  v424 = off_24C335AF8;
  v427 = v220;
  v420 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v212.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v421, v212.__r_.__value_.__l.__data_, v212.__r_.__value_.__l.__size_);
  else
    v421 = v212;
  v422 = v213;
  v420 = off_24C335AF8;
  v423 = v214;
  v416 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v206.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v417, v206.__r_.__value_.__l.__data_, v206.__r_.__value_.__l.__size_);
  else
    v417 = v206;
  v418 = v207;
  v416 = off_24C335AF8;
  v419 = v208;
  v411 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v199.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v412, v199.__r_.__value_.__l.__data_, v199.__r_.__value_.__l.__size_);
  else
    v412 = v199;
  v411 = off_24C335B18;
  v414 = v201;
  v413 = v200;
  v415 = v202;
  v407 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v193.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v408, v193.__r_.__value_.__l.__data_, v193.__r_.__value_.__l.__size_);
  else
    v408 = v193;
  v409 = v194;
  v407 = off_24C335AF8;
  v410 = v195;
  v403 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v187.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v404, v187.__r_.__value_.__l.__data_, v187.__r_.__value_.__l.__size_);
  else
    v404 = v187;
  v405 = v188;
  v403 = off_24C335AF8;
  v406 = v189;
  v399 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v181.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v400, v181.__r_.__value_.__l.__data_, v181.__r_.__value_.__l.__size_);
  else
    v400 = v181;
  v401 = v182;
  v399 = off_24C335AF8;
  v402 = v183;
  v395 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v175.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v396, v175.__r_.__value_.__l.__data_, v175.__r_.__value_.__l.__size_);
  else
    v396 = v175;
  v397 = v176;
  v395 = off_24C335AF8;
  v398 = v177;
  v391 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v169.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v392, v169.__r_.__value_.__l.__data_, v169.__r_.__value_.__l.__size_);
  else
    v392 = v169;
  v393 = v170;
  v391 = off_24C335AF8;
  v394 = v171;
  v387 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v163.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v388, v163.__r_.__value_.__l.__data_, v163.__r_.__value_.__l.__size_);
  else
    v388 = v163;
  v389 = v164;
  v387 = off_24C335AF8;
  v390 = v165;
  v383 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v157.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v384, v157.__r_.__value_.__l.__data_, v157.__r_.__value_.__l.__size_);
  else
    v384 = v157;
  v385 = v158;
  v383 = off_24C335AF8;
  v386 = v159;
  v379 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v151.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v380, v151.__r_.__value_.__l.__data_, v151.__r_.__value_.__l.__size_);
  else
    v380 = v151;
  v381 = v152;
  v379 = off_24C335AF8;
  v382 = v153;
  v374 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v144.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v375, v144.__r_.__value_.__l.__data_, v144.__r_.__value_.__l.__size_);
  else
    v375 = v144;
  v376 = v145;
  v374 = &off_24C335AB8;
  v377 = v146;
  if (SHIBYTE(v147.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v378, v147.__r_.__value_.__l.__data_, v147.__r_.__value_.__l.__size_);
  else
    v378 = v147;
  v369 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v135.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v370, v135.__r_.__value_.__l.__data_, v135.__r_.__value_.__l.__size_);
  else
    v370 = v135;
  v369 = off_24C335B18;
  v372 = v137;
  v371 = v136;
  v373 = v138;
  v364 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v128.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v365, v128.__r_.__value_.__l.__data_, v128.__r_.__value_.__l.__size_);
  else
    v365 = v128;
  v364 = off_24C335B18;
  v367 = v130;
  v366 = v129;
  v368 = v131;
  v359 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v121.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v360, v121.__r_.__value_.__l.__data_, v121.__r_.__value_.__l.__size_);
  else
    v360 = v121;
  v361 = v122;
  v359 = &off_24C335AB8;
  v362 = v123;
  if (SHIBYTE(v124.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v363, v124.__r_.__value_.__l.__data_, v124.__r_.__value_.__l.__size_);
  else
    v363 = v124;
  v354 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v112.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v355, v112.__r_.__value_.__l.__data_, v112.__r_.__value_.__l.__size_);
  else
    v355 = v112;
  v354 = off_24C335B18;
  v357 = v114;
  v356 = v113;
  v358 = v115;
  v345 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v103.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v346, v103.__r_.__value_.__l.__data_, v103.__r_.__value_.__l.__size_);
  else
    v346 = v103;
  v347 = v104;
  v345 = &off_24C335A98;
  v348 = v105;
  v2 = v108;
  v3 = v107;
  v349 = &off_24C331510;
  v350 = v107;
  v351 = v107;
  if (v107)
    v4 = (void *)operator new[]();
  else
    v4 = 0;
  v352 = v4;
  v353 = 1;
  if (v2)
    memcpy(v4, v2, v3);
  else
    bzero(v4, v3);
  v341 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v342, v97.__r_.__value_.__l.__data_, v97.__r_.__value_.__l.__size_);
  else
    v342 = v97;
  v343 = v98;
  v341 = off_24C335AF8;
  v344 = v99;
  v337 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v91.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v338, v91.__r_.__value_.__l.__data_, v91.__r_.__value_.__l.__size_);
  else
    v338 = v91;
  v339 = v92;
  v337 = off_24C335AF8;
  v340 = v93;
  v333 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v85.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v334, v85.__r_.__value_.__l.__data_, v85.__r_.__value_.__l.__size_);
  else
    v334 = v85;
  v335 = v86;
  v333 = off_24C335AF8;
  v336 = v87;
  v329 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v79.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v330, v79.__r_.__value_.__l.__data_, v79.__r_.__value_.__l.__size_);
  else
    v330 = v79;
  v331 = v80;
  v329 = off_24C335AF8;
  v332 = v81;
  v324 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v72.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v325, v72.__r_.__value_.__l.__data_, v72.__r_.__value_.__l.__size_);
  else
    v325 = v72;
  v326 = v73;
  v324 = &off_24C335AB8;
  v327 = v74;
  if (SHIBYTE(v75.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v328, v75.__r_.__value_.__l.__data_, v75.__r_.__value_.__l.__size_);
  else
    v328 = v75;
  v320 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v321, v64.__r_.__value_.__l.__data_, v64.__r_.__value_.__l.__size_);
  else
    v321 = v64;
  v322 = v65;
  v320 = off_24C335AF8;
  v323 = v66;
  v315 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v316, v57.__r_.__value_.__l.__data_, v57.__r_.__value_.__l.__size_);
  else
    v316 = v57;
  v315 = off_24C335B18;
  v318 = v59;
  v317 = v58;
  v319 = v60;
  v310 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&__p, v50.__r_.__value_.__l.__data_, v50.__r_.__value_.__l.__size_);
  else
    __p = v50;
  v310 = off_24C335B18;
  v313 = v52;
  v312 = v51;
  v314 = v53;
  v305 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v306, v43.__r_.__value_.__l.__data_, v43.__r_.__value_.__l.__size_);
  else
    v306 = v43;
  v307 = v44;
  v305 = &off_24C335AB8;
  v308 = v45;
  if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v309, v46.__r_.__value_.__l.__data_, v46.__r_.__value_.__l.__size_);
  else
    v309 = v46;
  v300 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v301, v34.__r_.__value_.__l.__data_, v34.__r_.__value_.__l.__size_);
  else
    v301 = v34;
  v302 = v35;
  v300 = &off_24C335AB8;
  v303 = v36;
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v304, v37.__r_.__value_.__l.__data_, v37.__r_.__value_.__l.__size_);
  else
    v304 = v37;
  v295 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v296, v25.__r_.__value_.__l.__data_, v25.__r_.__value_.__l.__size_);
  else
    v296 = v25;
  v297 = v26;
  v295 = &off_24C335AB8;
  v298 = v27;
  if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v299, v28.__r_.__value_.__l.__data_, v28.__r_.__value_.__l.__size_);
  else
    v299 = v28;
  mediaplatform::DatabaseTable<long long,int,int,int,int,std::string,std::string,std::string,std::string,int,int,int,int,long long,int,int,int,int,int,int,int,int,std::string,long long,long long,std::string,long long,mediaplatform::Data,int,int,int,int,std::string,int,long long,long long,std::string,std::string,std::string>::DatabaseTable(v1, (uint64_t)&v473, (uint64_t)&v468, (uint64_t)&v464, (uint64_t)&v460, (uint64_t)&v456, (uint64_t)&v452, (uint64_t)&v447, (uint64_t)&v442, (uint64_t)&v437, (uint64_t)&v432, (uint64_t)&v428, (uint64_t)&v424, (uint64_t)&v420, (uint64_t)&v416, (uint64_t)&v411, (uint64_t)&v407, (uint64_t)&v403, (uint64_t)&v399,
    (uint64_t)&v395,
    (uint64_t)&v391,
    (uint64_t)&v387,
    (uint64_t)&v383,
    (uint64_t)&v379,
    (uint64_t)&v374,
    (uint64_t)&v369,
    (uint64_t)&v364,
    (uint64_t)&v359,
    (uint64_t)&v354,
    (uint64_t)&v345,
    (uint64_t)&v341,
    (uint64_t)&v337,
    (uint64_t)&v333,
    (uint64_t)&v329,
    (uint64_t)&v324,
    (uint64_t)&v320,
    (uint64_t)&v315,
    (uint64_t)&v310,
    (uint64_t)&v305,
    (uint64_t)&v300,
    (uint64_t)&v295);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v295);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v300);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v305);
  v310 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v315 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v316.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v316.__r_.__value_.__l.__data_);
  v320 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v321.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v321.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v324);
  v329 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v330.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v330.__r_.__value_.__l.__data_);
  v333 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v334.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v334.__r_.__value_.__l.__data_);
  v337 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v338.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v338.__r_.__value_.__l.__data_);
  v341 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v342.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v342.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<mediaplatform::Data>::~DatabaseColumn((uint64_t)&v345);
  v354 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v355.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v355.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v359);
  v364 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v365.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v365.__r_.__value_.__l.__data_);
  v369 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v370.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v370.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v374);
  v379 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v380.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v380.__r_.__value_.__l.__data_);
  v383 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v384.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v384.__r_.__value_.__l.__data_);
  v387 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v388.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v388.__r_.__value_.__l.__data_);
  v391 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v392.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v392.__r_.__value_.__l.__data_);
  v395 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v396.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v396.__r_.__value_.__l.__data_);
  v399 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v400.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v400.__r_.__value_.__l.__data_);
  v403 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v404.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v404.__r_.__value_.__l.__data_);
  v407 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v408.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v408.__r_.__value_.__l.__data_);
  v411 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v412.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v412.__r_.__value_.__l.__data_);
  v416 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v417.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v417.__r_.__value_.__l.__data_);
  v420 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v421.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v421.__r_.__value_.__l.__data_);
  v424 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v425.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v425.__r_.__value_.__l.__data_);
  v428 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v429.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v429.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v432);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v437);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v442);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v447);
  v452 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v453.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v453.__r_.__value_.__l.__data_);
  v456 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v457.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v457.__r_.__value_.__l.__data_);
  v460 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v461.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v461.__r_.__value_.__l.__data_);
  v464 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v465.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v465.__r_.__value_.__l.__data_);
  v468 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v469.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v469.__r_.__value_.__l.__data_);
  if (SHIBYTE(v473.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v473.__r_.__value_.__l.__data_);
  *(_QWORD *)v1 = &off_24C336398;
  *(_QWORD *)(v1 + 2144) = off_24C335D90;
  if (SHIBYTE(v290.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external((std::string *)(v1 + 2152), v290.__r_.__value_.__l.__data_, v290.__r_.__value_.__l.__size_);
  else
    *(std::string *)(v1 + 2152) = v290;
  *(_DWORD *)(v1 + 2176) = v291;
  *(_QWORD *)(v1 + 2180) = v292;
  *(_DWORD *)(v1 + 2188) = v293;
  *(_QWORD *)(v1 + 2144) = off_24C336AC0;
  *(_QWORD *)(v1 + 2192) = off_24C335D90;
  v5 = (std::string *)(v1 + 2200);
  if (SHIBYTE(v284.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v5, v284.__r_.__value_.__l.__data_, v284.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = *(_OWORD *)&v284.__r_.__value_.__l.__data_;
    *(_QWORD *)(v1 + 2216) = *((_QWORD *)&v284.__r_.__value_.__l + 2);
  }
  *(_DWORD *)(v1 + 2224) = v285;
  *(_QWORD *)(v1 + 2228) = v286;
  *(_QWORD *)(v1 + 2192) = off_24C336AA0;
  *(_QWORD *)(v1 + 2240) = off_24C335D90;
  if (SHIBYTE(v278.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external((std::string *)(v1 + 2248), v278.__r_.__value_.__l.__data_, v278.__r_.__value_.__l.__size_);
  else
    *(std::string *)(v1 + 2248) = v278;
  *(_DWORD *)(v1 + 2272) = v279;
  *(_QWORD *)(v1 + 2276) = v280;
  *(_QWORD *)(v1 + 2240) = off_24C336AA0;
  *(_QWORD *)(v1 + 2288) = off_24C335D90;
  v6 = (std::string *)(v1 + 2296);
  if (SHIBYTE(v272.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v6, v272.__r_.__value_.__l.__data_, v272.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = *(_OWORD *)&v272.__r_.__value_.__l.__data_;
    *(_QWORD *)(v1 + 2312) = *((_QWORD *)&v272.__r_.__value_.__l + 2);
  }
  *(_DWORD *)(v1 + 2320) = v273;
  *(_QWORD *)(v1 + 2324) = v274;
  *(_QWORD *)(v1 + 2288) = off_24C336AA0;
  *(_QWORD *)(v1 + 2336) = off_24C335D90;
  v7 = (std::string *)(v1 + 2344);
  if (SHIBYTE(v266.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v7, v266.__r_.__value_.__l.__data_, v266.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = *(_OWORD *)&v266.__r_.__value_.__l.__data_;
    *(_QWORD *)(v1 + 2360) = *((_QWORD *)&v266.__r_.__value_.__l + 2);
  }
  *(_DWORD *)(v1 + 2368) = v267;
  *(_QWORD *)(v1 + 2372) = v268;
  *(_QWORD *)(v1 + 2336) = off_24C336AA0;
  std::__tuple_leaf<5ul,mlcore::MediaColumn<std::string>,false>::__tuple_leaf[abi:ne180100]<mlcore::MediaColumn<std::string>&,void>(v1 + 2384, (uint64_t)v258);
  std::__tuple_leaf<6ul,mlcore::MediaColumn<std::string>,false>::__tuple_leaf[abi:ne180100]<mlcore::MediaColumn<std::string>&,void>(v1 + 2448, (uint64_t)v249);
  std::__tuple_leaf<7ul,mlcore::MediaColumn<std::string>,false>::__tuple_leaf[abi:ne180100]<mlcore::MediaColumn<std::string>&,void>(v1 + 2512, (uint64_t)v240);
  std::__tuple_leaf<8ul,mlcore::MediaColumn<std::string>,false>::__tuple_leaf[abi:ne180100]<mlcore::MediaColumn<std::string>&,void>(v1 + 2576, (uint64_t)v231);
  *(_QWORD *)(v1 + 2640) = off_24C335D90;
  if (SHIBYTE(v224.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external((std::string *)(v1 + 2648), v224.__r_.__value_.__l.__data_, v224.__r_.__value_.__l.__size_);
  else
    *(std::string *)(v1 + 2648) = v224;
  *(_DWORD *)(v1 + 2672) = v225;
  *(_QWORD *)(v1 + 2676) = v226;
  *(_QWORD *)(v1 + 2640) = off_24C336AA0;
  *(_QWORD *)(v1 + 2688) = off_24C335D90;
  if (SHIBYTE(v218.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external((std::string *)(v1 + 2696), v218.__r_.__value_.__l.__data_, v218.__r_.__value_.__l.__size_);
  else
    *(std::string *)(v1 + 2696) = v218;
  *(_DWORD *)(v1 + 2720) = v219;
  *(_QWORD *)(v1 + 2724) = v220;
  *(_QWORD *)(v1 + 2688) = off_24C336AA0;
  *(_QWORD *)(v1 + 2736) = off_24C335D90;
  if (SHIBYTE(v212.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external((std::string *)(v1 + 2744), v212.__r_.__value_.__l.__data_, v212.__r_.__value_.__l.__size_);
  else
    *(std::string *)(v1 + 2744) = v212;
  *(_DWORD *)(v1 + 2768) = v213;
  *(_QWORD *)(v1 + 2772) = v214;
  *(_QWORD *)(v1 + 2736) = off_24C336AA0;
  *(_QWORD *)(v1 + 2784) = off_24C335D90;
  if (SHIBYTE(v206.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external((std::string *)(v1 + 2792), v206.__r_.__value_.__l.__data_, v206.__r_.__value_.__l.__size_);
  else
    *(std::string *)(v1 + 2792) = v206;
  *(_DWORD *)(v1 + 2816) = v207;
  *(_QWORD *)(v1 + 2820) = v208;
  *(_QWORD *)(v1 + 2784) = off_24C336AA0;
  *(_QWORD *)(v1 + 2832) = off_24C335D90;
  v8 = (std::string *)(v1 + 2840);
  if (SHIBYTE(v199.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v8, v199.__r_.__value_.__l.__data_, v199.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v8->__r_.__value_.__l.__data_ = *(_OWORD *)&v199.__r_.__value_.__l.__data_;
    *(_QWORD *)(v1 + 2856) = *((_QWORD *)&v199.__r_.__value_.__l + 2);
  }
  *(_DWORD *)(v1 + 2864) = v200;
  *(_QWORD *)(v1 + 2868) = v201;
  *(_DWORD *)(v1 + 2876) = v202;
  *(_QWORD *)(v1 + 2832) = off_24C336AC0;
  *(_QWORD *)(v1 + 2880) = off_24C335D90;
  v9 = (std::string *)(v1 + 2888);
  if (SHIBYTE(v193.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v9, v193.__r_.__value_.__l.__data_, v193.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = *(_OWORD *)&v193.__r_.__value_.__l.__data_;
    *(_QWORD *)(v1 + 2904) = *((_QWORD *)&v193.__r_.__value_.__l + 2);
  }
  *(_DWORD *)(v1 + 2912) = v194;
  *(_QWORD *)(v1 + 2916) = v195;
  *(_QWORD *)(v1 + 2880) = off_24C336AA0;
  *(_QWORD *)(v1 + 2928) = off_24C335D90;
  if (SHIBYTE(v187.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external((std::string *)(v1 + 2936), v187.__r_.__value_.__l.__data_, v187.__r_.__value_.__l.__size_);
  else
    *(std::string *)(v1 + 2936) = v187;
  *(_DWORD *)(v1 + 2960) = v188;
  *(_QWORD *)(v1 + 2964) = v189;
  *(_QWORD *)(v1 + 2928) = off_24C336AA0;
  *(_QWORD *)(v1 + 2976) = off_24C335D90;
  if (SHIBYTE(v181.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external((std::string *)(v1 + 2984), v181.__r_.__value_.__l.__data_, v181.__r_.__value_.__l.__size_);
  else
    *(std::string *)(v1 + 2984) = v181;
  *(_DWORD *)(v1 + 3008) = v182;
  *(_QWORD *)(v1 + 3012) = v183;
  *(_QWORD *)(v1 + 2976) = off_24C336AA0;
  *(_QWORD *)(v1 + 3024) = off_24C335D90;
  v10 = (std::string *)(v1 + 3032);
  if (SHIBYTE(v175.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v10, v175.__r_.__value_.__l.__data_, v175.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v10->__r_.__value_.__l.__data_ = *(_OWORD *)&v175.__r_.__value_.__l.__data_;
    *(_QWORD *)(v1 + 3048) = *((_QWORD *)&v175.__r_.__value_.__l + 2);
  }
  *(_DWORD *)(v1 + 3056) = v176;
  *(_QWORD *)(v1 + 3060) = v177;
  *(_QWORD *)(v1 + 3024) = off_24C336AA0;
  *(_QWORD *)(v1 + 3072) = off_24C335D90;
  if (SHIBYTE(v169.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external((std::string *)(v1 + 3080), v169.__r_.__value_.__l.__data_, v169.__r_.__value_.__l.__size_);
  else
    *(std::string *)(v1 + 3080) = v169;
  *(_DWORD *)(v1 + 3104) = v170;
  *(_QWORD *)(v1 + 3108) = v171;
  *(_QWORD *)(v1 + 3072) = off_24C336AA0;
  *(_QWORD *)(v1 + 3120) = off_24C335D90;
  if (SHIBYTE(v163.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external((std::string *)(v1 + 3128), v163.__r_.__value_.__l.__data_, v163.__r_.__value_.__l.__size_);
  else
    *(std::string *)(v1 + 3128) = v163;
  *(_DWORD *)(v1 + 3152) = v164;
  *(_QWORD *)(v1 + 3156) = v165;
  *(_QWORD *)(v1 + 3120) = off_24C336AA0;
  *(_QWORD *)(v1 + 3168) = off_24C335D90;
  if (SHIBYTE(v157.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external((std::string *)(v1 + 3176), v157.__r_.__value_.__l.__data_, v157.__r_.__value_.__l.__size_);
  else
    *(std::string *)(v1 + 3176) = v157;
  *(_DWORD *)(v1 + 3200) = v158;
  *(_QWORD *)(v1 + 3204) = v159;
  *(_QWORD *)(v1 + 3168) = off_24C336AA0;
  *(_QWORD *)(v1 + 3216) = off_24C335D90;
  if (SHIBYTE(v151.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external((std::string *)(v1 + 3224), v151.__r_.__value_.__l.__data_, v151.__r_.__value_.__l.__size_);
  else
    *(std::string *)(v1 + 3224) = v151;
  *(_DWORD *)(v1 + 3248) = v152;
  *(_QWORD *)(v1 + 3252) = v153;
  *(_QWORD *)(v1 + 3216) = off_24C336AA0;
  std::__tuple_leaf<22ul,mlcore::MediaColumn<std::string>,false>::__tuple_leaf[abi:ne180100]<mlcore::MediaColumn<std::string>&,void>(v1 + 3264, (uint64_t)v143);
  *(_QWORD *)(v1 + 3328) = off_24C335D90;
  v11 = (std::string *)(v1 + 3336);
  if (SHIBYTE(v135.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v11, v135.__r_.__value_.__l.__data_, v135.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v11->__r_.__value_.__l.__data_ = *(_OWORD *)&v135.__r_.__value_.__l.__data_;
    *(_QWORD *)(v1 + 3352) = *((_QWORD *)&v135.__r_.__value_.__l + 2);
  }
  *(_DWORD *)(v1 + 3360) = v136;
  *(_QWORD *)(v1 + 3364) = v137;
  *(_DWORD *)(v1 + 3372) = v138;
  *(_QWORD *)(v1 + 3328) = off_24C336AC0;
  *(_QWORD *)(v1 + 3376) = off_24C335D90;
  v12 = (std::string *)(v1 + 3384);
  if (SHIBYTE(v128.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v12, v128.__r_.__value_.__l.__data_, v128.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v12->__r_.__value_.__l.__data_ = *(_OWORD *)&v128.__r_.__value_.__l.__data_;
    *(_QWORD *)(v1 + 3400) = *((_QWORD *)&v128.__r_.__value_.__l + 2);
  }
  *(_DWORD *)(v1 + 3408) = v129;
  *(_QWORD *)(v1 + 3412) = v130;
  *(_DWORD *)(v1 + 3420) = v131;
  *(_QWORD *)(v1 + 3376) = off_24C336AC0;
  *(_QWORD *)(v1 + 3424) = off_24C335D90;
  if (SHIBYTE(v121.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external((std::string *)(v1 + 3432), v121.__r_.__value_.__l.__data_, v121.__r_.__value_.__l.__size_);
  else
    *(std::string *)(v1 + 3432) = v121;
  *(_DWORD *)(v1 + 3456) = v122;
  *(_QWORD *)(v1 + 3424) = &off_24C335AB8;
  *(_BYTE *)(v1 + 3460) = v123;
  v13 = (std::string *)(v1 + 3464);
  if (SHIBYTE(v124.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v13, v124.__r_.__value_.__l.__data_, v124.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v13->__r_.__value_.__l.__data_ = *(_OWORD *)&v124.__r_.__value_.__l.__data_;
    *(_QWORD *)(v1 + 3480) = *((_QWORD *)&v124.__r_.__value_.__l + 2);
  }
  *(_QWORD *)(v1 + 3424) = &off_24C336A60;
  *(_QWORD *)(v1 + 3488) = off_24C335D90;
  v14 = (std::string *)(v1 + 3496);
  if (SHIBYTE(v112.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v14, v112.__r_.__value_.__l.__data_, v112.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v14->__r_.__value_.__l.__data_ = *(_OWORD *)&v112.__r_.__value_.__l.__data_;
    *(_QWORD *)(v1 + 3512) = *((_QWORD *)&v112.__r_.__value_.__l + 2);
  }
  *(_DWORD *)(v1 + 3520) = v113;
  *(_QWORD *)(v1 + 3524) = v114;
  *(_DWORD *)(v1 + 3532) = v115;
  *(_QWORD *)(v1 + 3488) = off_24C336AC0;
  *(_QWORD *)(v1 + 3536) = off_24C335D90;
  if (SHIBYTE(v103.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external((std::string *)(v1 + 3544), v103.__r_.__value_.__l.__data_, v103.__r_.__value_.__l.__size_);
  else
    *(std::string *)(v1 + 3544) = v103;
  *(_DWORD *)(v1 + 3568) = v104;
  *(_QWORD *)(v1 + 3536) = &off_24C335A98;
  *(_BYTE *)(v1 + 3572) = v105;
  mediaplatform::Data::Data((mediaplatform::Data *)(v1 + 3576), (const mediaplatform::Data *)&v106);
  *(_QWORD *)(v1 + 3536) = &off_24C336A40;
  *(_QWORD *)(v1 + 3616) = off_24C335D90;
  v15 = (std::string *)(v1 + 3624);
  if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v15, v97.__r_.__value_.__l.__data_, v97.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v15->__r_.__value_.__l.__data_ = *(_OWORD *)&v97.__r_.__value_.__l.__data_;
    *(_QWORD *)(v1 + 3640) = *((_QWORD *)&v97.__r_.__value_.__l + 2);
  }
  *(_DWORD *)(v1 + 3648) = v98;
  *(_QWORD *)(v1 + 3652) = v99;
  *(_QWORD *)(v1 + 3616) = off_24C336AA0;
  *(_QWORD *)(v1 + 3664) = off_24C335D90;
  if (SHIBYTE(v91.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external((std::string *)(v1 + 3672), v91.__r_.__value_.__l.__data_, v91.__r_.__value_.__l.__size_);
  else
    *(std::string *)(v1 + 3672) = v91;
  *(_DWORD *)(v1 + 3696) = v92;
  *(_QWORD *)(v1 + 3700) = v93;
  *(_QWORD *)(v1 + 3664) = off_24C336AA0;
  *(_QWORD *)(v1 + 3712) = off_24C335D90;
  v16 = (std::string *)(v1 + 3720);
  if (SHIBYTE(v85.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v16, v85.__r_.__value_.__l.__data_, v85.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v16->__r_.__value_.__l.__data_ = *(_OWORD *)&v85.__r_.__value_.__l.__data_;
    *(_QWORD *)(v1 + 3736) = *((_QWORD *)&v85.__r_.__value_.__l + 2);
  }
  *(_DWORD *)(v1 + 3744) = v86;
  *(_QWORD *)(v1 + 3748) = v87;
  *(_QWORD *)(v1 + 3712) = off_24C336AA0;
  *(_QWORD *)(v1 + 3760) = off_24C335D90;
  if (SHIBYTE(v79.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external((std::string *)(v1 + 3768), v79.__r_.__value_.__l.__data_, v79.__r_.__value_.__l.__size_);
  else
    *(std::string *)(v1 + 3768) = v79;
  *(_DWORD *)(v1 + 3792) = v80;
  *(_QWORD *)(v1 + 3796) = v81;
  *(_QWORD *)(v1 + 3760) = off_24C336AA0;
  *(_QWORD *)(v1 + 3808) = off_24C335D90;
  if (SHIBYTE(v72.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external((std::string *)(v1 + 3816), v72.__r_.__value_.__l.__data_, v72.__r_.__value_.__l.__size_);
  else
    *(std::string *)(v1 + 3816) = v72;
  *(_DWORD *)(v1 + 3840) = v73;
  *(_QWORD *)(v1 + 3808) = &off_24C335AB8;
  *(_BYTE *)(v1 + 3844) = v74;
  v17 = (std::string *)(v1 + 3848);
  if (SHIBYTE(v75.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v17, v75.__r_.__value_.__l.__data_, v75.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v17->__r_.__value_.__l.__data_ = *(_OWORD *)&v75.__r_.__value_.__l.__data_;
    *(_QWORD *)(v1 + 3864) = *((_QWORD *)&v75.__r_.__value_.__l + 2);
  }
  *(_QWORD *)(v1 + 3808) = &off_24C336A60;
  *(_QWORD *)(v1 + 3872) = off_24C335D90;
  if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external((std::string *)(v1 + 3880), v64.__r_.__value_.__l.__data_, v64.__r_.__value_.__l.__size_);
  else
    *(std::string *)(v1 + 3880) = v64;
  *(_DWORD *)(v1 + 3904) = v65;
  *(_QWORD *)(v1 + 3908) = v66;
  *(_QWORD *)(v1 + 3872) = off_24C336AA0;
  *(_QWORD *)(v1 + 3920) = off_24C335D90;
  if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external((std::string *)(v1 + 3928), v57.__r_.__value_.__l.__data_, v57.__r_.__value_.__l.__size_);
  else
    *(std::string *)(v1 + 3928) = v57;
  *(_DWORD *)(v1 + 3952) = v58;
  *(_QWORD *)(v1 + 3956) = v59;
  *(_DWORD *)(v1 + 3964) = v60;
  *(_QWORD *)(v1 + 3920) = off_24C336AC0;
  *(_QWORD *)(v1 + 3968) = off_24C335D90;
  if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external((std::string *)(v1 + 3976), v50.__r_.__value_.__l.__data_, v50.__r_.__value_.__l.__size_);
  else
    *(std::string *)(v1 + 3976) = v50;
  *(_DWORD *)(v1 + 4000) = v51;
  *(_QWORD *)(v1 + 4004) = v52;
  *(_DWORD *)(v1 + 4012) = v53;
  *(_QWORD *)(v1 + 3968) = off_24C336AC0;
  std::__tuple_leaf<36ul,mlcore::MediaColumn<std::string>,false>::__tuple_leaf[abi:ne180100]<mlcore::MediaColumn<std::string>&,void>(v1 + 4016, (uint64_t)v42);
  std::__tuple_leaf<37ul,mlcore::MediaColumn<std::string>,false>::__tuple_leaf[abi:ne180100]<mlcore::MediaColumn<std::string>&,void>(v1 + 4080, (uint64_t)v33);
  *(_QWORD *)(v1 + 4144) = off_24C335D90;
  if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external((std::string *)(v1 + 4152), v25.__r_.__value_.__l.__data_, v25.__r_.__value_.__l.__size_);
  else
    *(std::string *)(v1 + 4152) = v25;
  *(_DWORD *)(v1 + 4176) = v26;
  *(_QWORD *)(v1 + 4144) = &off_24C335AB8;
  *(_BYTE *)(v1 + 4180) = v27;
  v18 = (std::string *)(v1 + 4184);
  if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v18, v28.__r_.__value_.__l.__data_, v28.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v18->__r_.__value_.__l.__data_ = *(_OWORD *)&v28.__r_.__value_.__l.__data_;
    *(_QWORD *)(v1 + 4200) = *((_QWORD *)&v28.__r_.__value_.__l + 2);
  }
  *(_QWORD *)(v1 + 4144) = &off_24C336A60;
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)v24);
  if (v21 < 0)
    operator delete(v20[0]);
  if (v23 < 0)
    operator delete(v22[0]);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)v33);
  if (v30 < 0)
    operator delete(v29[0]);
  if (v32 < 0)
    operator delete(v31[0]);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)v42);
  if (v39 < 0)
    operator delete(v38[0]);
  if (v41 < 0)
    operator delete(v40[0]);
  v49 = off_24C335D90;
  if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v50.__r_.__value_.__l.__data_);
  if (v48 < 0)
    operator delete(v47[0]);
  v56 = off_24C335D90;
  if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v57.__r_.__value_.__l.__data_);
  if (v55 < 0)
    operator delete(v54[0]);
  v63 = off_24C335D90;
  if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v64.__r_.__value_.__l.__data_);
  if (v62 < 0)
    operator delete(v61[0]);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)v71);
  if (v68 < 0)
    operator delete(v67[0]);
  if (v70 < 0)
    operator delete(v69[0]);
  v78 = off_24C335D90;
  if (SHIBYTE(v79.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v79.__r_.__value_.__l.__data_);
  if (v77 < 0)
    operator delete(v76[0]);
  v84 = off_24C335D90;
  if (SHIBYTE(v85.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v85.__r_.__value_.__l.__data_);
  if (v83 < 0)
    operator delete(v82[0]);
  v90 = off_24C335D90;
  if (SHIBYTE(v91.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v91.__r_.__value_.__l.__data_);
  if (v89 < 0)
    operator delete(v88[0]);
  v96 = off_24C335D90;
  if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v97.__r_.__value_.__l.__data_);
  if (v95 < 0)
    operator delete(v94[0]);
  mediaplatform::DatabaseColumn<mediaplatform::Data>::~DatabaseColumn((uint64_t)v102);
  if (v101 < 0)
    operator delete(v100[0]);
  v111 = off_24C335D90;
  if (SHIBYTE(v112.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v112.__r_.__value_.__l.__data_);
  if (v110 < 0)
    operator delete(v109[0]);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)v120);
  if (v117 < 0)
    operator delete(v116[0]);
  if (v119 < 0)
    operator delete(v118[0]);
  v127 = off_24C335D90;
  if (SHIBYTE(v128.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v128.__r_.__value_.__l.__data_);
  if (v126 < 0)
    operator delete(v125[0]);
  v134 = off_24C335D90;
  if (SHIBYTE(v135.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v135.__r_.__value_.__l.__data_);
  if (v133 < 0)
    operator delete(v132[0]);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)v143);
  if (v140 < 0)
    operator delete(v139[0]);
  if (v142 < 0)
    operator delete(v141[0]);
  v150 = off_24C335D90;
  if (SHIBYTE(v151.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v151.__r_.__value_.__l.__data_);
  if (v149 < 0)
    operator delete(v148[0]);
  v156 = off_24C335D90;
  if (SHIBYTE(v157.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v157.__r_.__value_.__l.__data_);
  if (v155 < 0)
    operator delete(v154[0]);
  v162 = off_24C335D90;
  if (SHIBYTE(v163.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v163.__r_.__value_.__l.__data_);
  if (v161 < 0)
    operator delete(v160[0]);
  v168 = off_24C335D90;
  if (SHIBYTE(v169.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v169.__r_.__value_.__l.__data_);
  if (v167 < 0)
    operator delete(v166[0]);
  v174 = off_24C335D90;
  if (SHIBYTE(v175.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v175.__r_.__value_.__l.__data_);
  if (v173 < 0)
    operator delete(v172[0]);
  v180 = off_24C335D90;
  if (SHIBYTE(v181.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v181.__r_.__value_.__l.__data_);
  if (v179 < 0)
    operator delete(v178[0]);
  v186 = off_24C335D90;
  if (SHIBYTE(v187.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v187.__r_.__value_.__l.__data_);
  if (v185 < 0)
    operator delete(v184[0]);
  v192 = off_24C335D90;
  if (SHIBYTE(v193.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v193.__r_.__value_.__l.__data_);
  if (v191 < 0)
    operator delete(v190[0]);
  v198 = off_24C335D90;
  if (SHIBYTE(v199.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v199.__r_.__value_.__l.__data_);
  if (v197 < 0)
    operator delete(v196[0]);
  v205 = off_24C335D90;
  if (SHIBYTE(v206.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v206.__r_.__value_.__l.__data_);
  if (v204 < 0)
    operator delete(v203[0]);
  v211 = off_24C335D90;
  if (SHIBYTE(v212.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v212.__r_.__value_.__l.__data_);
  if (v210 < 0)
    operator delete(v209[0]);
  v217 = off_24C335D90;
  if (SHIBYTE(v218.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v218.__r_.__value_.__l.__data_);
  if (v216 < 0)
    operator delete(v215[0]);
  v223 = off_24C335D90;
  if (SHIBYTE(v224.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v224.__r_.__value_.__l.__data_);
  if (v222 < 0)
    operator delete(v221[0]);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)v231);
  if (v228 < 0)
    operator delete(v227[0]);
  if (v230 < 0)
    operator delete(v229[0]);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)v240);
  if (v237 < 0)
    operator delete(v236[0]);
  if (v239 < 0)
    operator delete(v238[0]);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)v249);
  if (v246 < 0)
    operator delete(v245[0]);
  if (v248 < 0)
    operator delete(v247[0]);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)v258);
  if (v255 < 0)
    operator delete(v254[0]);
  if (v257 < 0)
    operator delete(v256[0]);
  v265 = off_24C335D90;
  if (SHIBYTE(v266.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v266.__r_.__value_.__l.__data_);
  if (v264 < 0)
    operator delete(v263[0]);
  v271 = off_24C335D90;
  if (SHIBYTE(v272.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v272.__r_.__value_.__l.__data_);
  if (v270 < 0)
    operator delete(v269[0]);
  v277 = off_24C335D90;
  if (SHIBYTE(v278.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v278.__r_.__value_.__l.__data_);
  if (v276 < 0)
    operator delete(v275[0]);
  v283 = off_24C335D90;
  if (SHIBYTE(v284.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v284.__r_.__value_.__l.__data_);
  if (v282 < 0)
    operator delete(v281[0]);
  v289 = off_24C335D90;
  if (SHIBYTE(v290.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v290.__r_.__value_.__l.__data_);
  if (v288 < 0)
    operator delete(v287[0]);
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__s.__r_.__value_.__l.__data_);
  *(_QWORD *)v1 = &off_24C337598;
  return v1;
}

void sub_20A676AE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,void **a42,void **a43,void **a44,void **a45,void **a46,void **a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,void **a56,void **a57,void **a58,void **a59,void **a60,void **a61,void **a62,void **a63)
{
  uint64_t a64;
  uint64_t a65;
  uint64_t a66;
  void **a71;
  void **a72;
  uint64_t v72;
  void **v73;
  void **v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  void **v79;
  void **v80;
  void **v81;

  *(_QWORD *)(v72 + 4144) = v77;
  if (*(char *)(v78 + 1947) < 0)
    operator delete(*v73);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(v76);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(v75);
  *(_QWORD *)(v72 + 3968) = v77;
  if (*(char *)(v72 + 3999) < 0)
    operator delete(*v74);
  *(_QWORD *)(v72 + 3920) = v77;
  if (*(char *)(v72 + 3951) < 0)
    operator delete(*v81);
  *(_QWORD *)(v72 + 3872) = v77;
  if (*(char *)(v72 + 3903) < 0)
    operator delete(*v80);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(v72 + 3808);
  *(_QWORD *)(v72 + 3760) = v77;
  if (*(char *)(v72 + 3791) < 0)
    operator delete(*v79);
  *(_QWORD *)(v72 + 3712) = v77;
  if (*(char *)(v72 + 3743) < 0)
    operator delete(*a71);
  *(_QWORD *)(v72 + 3664) = v77;
  if (*(char *)(v72 + 3695) < 0)
    operator delete(*a56);
  *(_QWORD *)(v72 + 3616) = v77;
  if (*(char *)(v72 + 3647) < 0)
    operator delete(*a58);
  mediaplatform::DatabaseColumn<mediaplatform::Data>::~DatabaseColumn(v72 + 3536);
  *(_QWORD *)(v72 + 3488) = v77;
  if (*(char *)(v72 + 3519) < 0)
    operator delete(*a72);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(v72 + 3424);
  *(_QWORD *)(v72 + 3376) = v77;
  if (*(char *)(v72 + 3407) < 0)
    operator delete(*(void **)STACK[0x200]);
  *(_QWORD *)(v72 + 3328) = v77;
  if (*(char *)(v72 + 3359) < 0)
    operator delete(*a57);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(STACK[0x228]);
  *(_QWORD *)(v72 + 3216) = v77;
  if (*(char *)(v72 + 3247) < 0)
    operator delete(*(void **)STACK[0x210]);
  *(_QWORD *)(v72 + 3168) = v77;
  if (*(char *)(v72 + 3199) < 0)
    operator delete(*(void **)STACK[0x218]);
  *(_QWORD *)(v72 + 3120) = v77;
  if (*(char *)(v72 + 3151) < 0)
    operator delete(*a59);
  *(_QWORD *)(v72 + 3072) = v77;
  if (*(char *)(v72 + 3103) < 0)
    operator delete(*(void **)STACK[0x208]);
  *(_QWORD *)(v72 + 3024) = v77;
  if (*(char *)(v72 + 3055) < 0)
    operator delete(*(void **)STACK[0x220]);
  *(_QWORD *)(v72 + 2976) = v77;
  if (*(char *)(v72 + 3007) < 0)
    operator delete(*a42);
  *(_QWORD *)(v72 + 2928) = v77;
  if (*(char *)(v72 + 2959) < 0)
    operator delete(*(void **)STACK[0x230]);
  *(_QWORD *)(v72 + 2880) = v77;
  if (*(char *)(v72 + 2911) < 0)
    operator delete(*a60);
  *(_QWORD *)(v72 + 2832) = v77;
  if (*(char *)(v72 + 2863) < 0)
    operator delete(*a61);
  *(_QWORD *)(v72 + 2784) = v77;
  if (*(char *)(v72 + 2815) < 0)
    operator delete(*(void **)STACK[0x238]);
  *(_QWORD *)(v72 + 2736) = v77;
  if (*(char *)(v72 + 2767) < 0)
    operator delete(*(void **)STACK[0x240]);
  *(_QWORD *)(v72 + 2688) = v77;
  if (*(char *)(v72 + 2719) < 0)
    operator delete(*a63);
  *(_QWORD *)(v72 + 2640) = v77;
  if (*(char *)(v72 + 2671) < 0)
    operator delete(*a43);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a64);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a65);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a66);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(STACK[0x248]);
  *(_QWORD *)(v72 + 2336) = v77;
  if (*(char *)(v72 + 2367) < 0)
    operator delete(*a44);
  *(_QWORD *)(v72 + 2288) = v77;
  if (*(char *)(v72 + 2319) < 0)
    operator delete(*a45);
  *(_QWORD *)(v72 + 2240) = v77;
  if (*(char *)(v72 + 2271) < 0)
    operator delete(*a62);
  *(_QWORD *)(v72 + 2192) = v77;
  if (*(char *)(v72 + 2223) < 0)
    operator delete(*a46);
  *(_QWORD *)(v72 + 2144) = v77;
  if (*(char *)(v72 + 2175) < 0)
    operator delete(*a47);
  mediaplatform::DatabaseTable<long long,int,int,int,int,std::string,std::string,std::string,std::string,int,int,int,int,long long,int,int,int,int,int,int,int,int,std::string,long long,long long,std::string,long long,mediaplatform::Data,int,int,int,int,std::string,int,long long,long long,std::string,std::string,std::string>::~DatabaseTable(v72);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&STACK[0x280]);
  if (SLOBYTE(STACK[0x267]) < 0)
    operator delete((void *)STACK[0x250]);
  if (SLOBYTE(STACK[0x27F]) < 0)
    operator delete((void *)STACK[0x268]);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&STACK[0x2F0]);
  if (SLOBYTE(STACK[0x2D7]) < 0)
    operator delete((void *)STACK[0x2C0]);
  if (SLOBYTE(STACK[0x2EF]) < 0)
    operator delete((void *)STACK[0x2D8]);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&STACK[0x360]);
  if (SLOBYTE(STACK[0x347]) < 0)
    operator delete((void *)STACK[0x330]);
  if (SLOBYTE(STACK[0x35F]) < 0)
    operator delete((void *)STACK[0x348]);
  STACK[0x3B8] = (unint64_t)off_24C335D90;
  if (SLOBYTE(STACK[0x3D7]) < 0)
    operator delete((void *)STACK[0x3C0]);
  if (SLOBYTE(STACK[0x3B7]) < 0)
    operator delete((void *)STACK[0x3A0]);
  STACK[0x400] = (unint64_t)off_24C335D90;
  if (SLOBYTE(STACK[0x41F]) < 0)
    operator delete((void *)STACK[0x408]);
  if (SLOBYTE(STACK[0x3FF]) < 0)
    operator delete((void *)STACK[0x3E8]);
  STACK[0x448] = (unint64_t)off_24C335D90;
  if (SLOBYTE(STACK[0x467]) < 0)
    operator delete((void *)STACK[0x450]);
  if (SLOBYTE(STACK[0x447]) < 0)
    operator delete((void *)STACK[0x430]);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&STACK[0x4A8]);
  if (SLOBYTE(STACK[0x48F]) < 0)
    operator delete((void *)STACK[0x478]);
  if (SLOBYTE(STACK[0x4A7]) < 0)
    operator delete((void *)STACK[0x490]);
  STACK[0x500] = (unint64_t)off_24C335D90;
  if (SLOBYTE(STACK[0x51F]) < 0)
    operator delete((void *)STACK[0x508]);
  if (SLOBYTE(STACK[0x4FF]) < 0)
    operator delete((void *)STACK[0x4E8]);
  STACK[0x548] = (unint64_t)off_24C335D90;
  if (SLOBYTE(STACK[0x567]) < 0)
    operator delete((void *)STACK[0x550]);
  if (SLOBYTE(STACK[0x547]) < 0)
    operator delete((void *)STACK[0x530]);
  STACK[0x590] = (unint64_t)off_24C335D90;
  if (SLOBYTE(STACK[0x5AF]) < 0)
    operator delete((void *)STACK[0x598]);
  if (SLOBYTE(STACK[0x58F]) < 0)
    operator delete((void *)STACK[0x578]);
  STACK[0x5D8] = (unint64_t)off_24C335D90;
  if (SLOBYTE(STACK[0x5F7]) < 0)
    operator delete((void *)STACK[0x5E0]);
  if (SLOBYTE(STACK[0x5D7]) < 0)
    operator delete((void *)STACK[0x5C0]);
  mediaplatform::DatabaseColumn<mediaplatform::Data>::~DatabaseColumn((uint64_t)&STACK[0x620]);
  if (SLOBYTE(STACK[0x61F]) < 0)
    operator delete((void *)STACK[0x608]);
  STACK[0x688] = (unint64_t)off_24C335D90;
  if (SLOBYTE(STACK[0x6A7]) < 0)
    operator delete((void *)STACK[0x690]);
  if (SLOBYTE(STACK[0x687]) < 0)
    operator delete((void *)STACK[0x670]);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&STACK[0x6E8]);
  if (SLOBYTE(STACK[0x6CF]) < 0)
    operator delete((void *)STACK[0x6B8]);
  if (SLOBYTE(STACK[0x6E7]) < 0)
    operator delete((void *)STACK[0x6D0]);
  STACK[0x740] = (unint64_t)off_24C335D90;
  if (SLOBYTE(STACK[0x75F]) < 0)
    operator delete((void *)STACK[0x748]);
  if (SLOBYTE(STACK[0x73F]) < 0)
    operator delete((void *)STACK[0x728]);
  STACK[0x788] = (unint64_t)off_24C335D90;
  if (SLOBYTE(STACK[0x7A7]) < 0)
    operator delete((void *)STACK[0x790]);
  if (SLOBYTE(STACK[0x787]) < 0)
    operator delete((void *)STACK[0x770]);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&STACK[0x7E8]);
  if (SLOBYTE(STACK[0x7CF]) < 0)
    operator delete((void *)STACK[0x7B8]);
  if (SLOBYTE(STACK[0x7E7]) < 0)
    operator delete((void *)STACK[0x7D0]);
  STACK[0x840] = (unint64_t)off_24C335D90;
  if (SLOBYTE(STACK[0x85F]) < 0)
    operator delete((void *)STACK[0x848]);
  if (SLOBYTE(STACK[0x83F]) < 0)
    operator delete((void *)STACK[0x828]);
  STACK[0x888] = (unint64_t)off_24C335D90;
  if (SLOBYTE(STACK[0x8A7]) < 0)
    operator delete((void *)STACK[0x890]);
  if (SLOBYTE(STACK[0x887]) < 0)
    operator delete((void *)STACK[0x870]);
  STACK[0x8D0] = (unint64_t)off_24C335D90;
  if (SLOBYTE(STACK[0x8EF]) < 0)
    operator delete((void *)STACK[0x8D8]);
  if (SLOBYTE(STACK[0x8CF]) < 0)
    operator delete((void *)STACK[0x8B8]);
  STACK[0x918] = (unint64_t)off_24C335D90;
  if (SLOBYTE(STACK[0x937]) < 0)
    operator delete((void *)STACK[0x920]);
  if (SLOBYTE(STACK[0x917]) < 0)
    operator delete((void *)STACK[0x900]);
  STACK[0x960] = (unint64_t)off_24C335D90;
  if (SLOBYTE(STACK[0x97F]) < 0)
    operator delete((void *)STACK[0x968]);
  if (SLOBYTE(STACK[0x95F]) < 0)
    operator delete((void *)STACK[0x948]);
  STACK[0x9A8] = (unint64_t)off_24C335D90;
  if (SLOBYTE(STACK[0x9C7]) < 0)
    operator delete((void *)STACK[0x9B0]);
  if (SLOBYTE(STACK[0x9A7]) < 0)
    operator delete((void *)STACK[0x990]);
  STACK[0x9F0] = (unint64_t)off_24C335D90;
  if (SLOBYTE(STACK[0xA0F]) < 0)
    operator delete((void *)STACK[0x9F8]);
  if (SLOBYTE(STACK[0x9EF]) < 0)
    operator delete((void *)STACK[0x9D8]);
  STACK[0xA38] = (unint64_t)off_24C335D90;
  if (SLOBYTE(STACK[0xA57]) < 0)
    operator delete((void *)STACK[0xA40]);
  if (SLOBYTE(STACK[0xA37]) < 0)
    operator delete((void *)STACK[0xA20]);
  STACK[0xA80] = (unint64_t)off_24C335D90;
  if (SLOBYTE(STACK[0xA9F]) < 0)
    operator delete((void *)STACK[0xA88]);
  if (SLOBYTE(STACK[0xA7F]) < 0)
    operator delete((void *)STACK[0xA68]);
  STACK[0xAC8] = (unint64_t)off_24C335D90;
  if (SLOBYTE(STACK[0xAE7]) < 0)
    operator delete((void *)STACK[0xAD0]);
  if (SLOBYTE(STACK[0xAC7]) < 0)
    operator delete((void *)STACK[0xAB0]);
  STACK[0xB10] = (unint64_t)off_24C335D90;
  if (SLOBYTE(STACK[0xB2F]) < 0)
    operator delete((void *)STACK[0xB18]);
  if (SLOBYTE(STACK[0xB0F]) < 0)
    operator delete((void *)STACK[0xAF8]);
  STACK[0xB58] = (unint64_t)off_24C335D90;
  if (SLOBYTE(STACK[0xB77]) < 0)
    operator delete((void *)STACK[0xB60]);
  if (SLOBYTE(STACK[0xB57]) < 0)
    operator delete((void *)STACK[0xB40]);
  STACK[0xBA0] = (unint64_t)off_24C335D90;
  if (SLOBYTE(STACK[0xBBF]) < 0)
    operator delete((void *)STACK[0xBA8]);
  if (SLOBYTE(STACK[0xB9F]) < 0)
    operator delete((void *)STACK[0xB88]);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&STACK[0xC00]);
  if (SLOBYTE(STACK[0xBE7]) < 0)
    operator delete((void *)STACK[0xBD0]);
  if (SLOBYTE(STACK[0xBFF]) < 0)
    operator delete((void *)STACK[0xBE8]);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&STACK[0xC70]);
  if (SLOBYTE(STACK[0xC57]) < 0)
    operator delete((void *)STACK[0xC40]);
  if (SLOBYTE(STACK[0xC6F]) < 0)
    operator delete((void *)STACK[0xC58]);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&STACK[0xCE0]);
  if (SLOBYTE(STACK[0xCC7]) < 0)
    operator delete((void *)STACK[0xCB0]);
  if (SLOBYTE(STACK[0xCDF]) < 0)
    operator delete((void *)STACK[0xCC8]);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&STACK[0xD50]);
  if (SLOBYTE(STACK[0xD37]) < 0)
    operator delete((void *)STACK[0xD20]);
  if (SLOBYTE(STACK[0xD4F]) < 0)
    operator delete((void *)STACK[0xD38]);
  STACK[0xDA8] = (unint64_t)off_24C335D90;
  if (SLOBYTE(STACK[0xDC7]) < 0)
    operator delete((void *)STACK[0xDB0]);
  if (SLOBYTE(STACK[0xDA7]) < 0)
    operator delete((void *)STACK[0xD90]);
  STACK[0xDF0] = (unint64_t)off_24C335D90;
  if (SLOBYTE(STACK[0xE0F]) < 0)
    operator delete((void *)STACK[0xDF8]);
  if (SLOBYTE(STACK[0xDEF]) < 0)
    operator delete((void *)STACK[0xDD8]);
  STACK[0xE38] = (unint64_t)off_24C335D90;
  if (SLOBYTE(STACK[0xE57]) < 0)
    operator delete((void *)STACK[0xE40]);
  if (SLOBYTE(STACK[0xE37]) < 0)
    operator delete((void *)STACK[0xE20]);
  STACK[0xE80] = (unint64_t)off_24C335D90;
  if (SLOBYTE(STACK[0xE9F]) < 0)
    operator delete((void *)STACK[0xE88]);
  if (SLOBYTE(STACK[0xE7F]) < 0)
    operator delete((void *)STACK[0xE68]);
  STACK[0xEC8] = (unint64_t)off_24C335D90;
  if (SLOBYTE(STACK[0xEE7]) < 0)
    operator delete((void *)STACK[0xED0]);
  if (SLOBYTE(STACK[0xEC7]) < 0)
    operator delete((void *)STACK[0xEB0]);
  if (SLOBYTE(STACK[0xF0F]) < 0)
    operator delete((void *)STACK[0xEF8]);
  _Unwind_Resume(a1);
}

void sub_20A677BD0()
{
  JUMPOUT(0x20A677544);
}

void sub_20A677BD8()
{
  JUMPOUT(0x20A677554);
}

void sub_20A677BE0()
{
  JUMPOUT(0x20A677564);
}

void sub_20A677BE8()
{
  JUMPOUT(0x20A67756CLL);
}

void sub_20A677BF0()
{
  JUMPOUT(0x20A67757CLL);
}

void sub_20A677BF8()
{
  JUMPOUT(0x20A67758CLL);
}

void sub_20A677C00()
{
  JUMPOUT(0x20A677594);
}

void sub_20A677C08()
{
  JUMPOUT(0x20A6775A4);
}

void sub_20A677C10()
{
  JUMPOUT(0x20A6775B4);
}

void sub_20A677C18()
{
  JUMPOUT(0x20A6775D0);
}

void sub_20A677C20()
{
  JUMPOUT(0x20A6775E0);
}

void sub_20A677C28()
{
  JUMPOUT(0x20A6775FCLL);
}

void sub_20A677C30()
{
  JUMPOUT(0x20A67760CLL);
}

void sub_20A677C38()
{
  JUMPOUT(0x20A677628);
}

void sub_20A677C40()
{
  JUMPOUT(0x20A677638);
}

void sub_20A677C48()
{
  JUMPOUT(0x20A677640);
}

void sub_20A677C50()
{
  JUMPOUT(0x20A677650);
}

void sub_20A677C58()
{
  JUMPOUT(0x20A677660);
}

void sub_20A677C60()
{
  JUMPOUT(0x20A67767CLL);
}

void sub_20A677C68()
{
  JUMPOUT(0x20A67768CLL);
}

void sub_20A677C70()
{
  JUMPOUT(0x20A6776A8);
}

void sub_20A677C78()
{
  JUMPOUT(0x20A6776B8);
}

void sub_20A677C80()
{
  JUMPOUT(0x20A6776D4);
}

void sub_20A677C88()
{
  JUMPOUT(0x20A6776E4);
}

void sub_20A677C90()
{
  JUMPOUT(0x20A677700);
}

void sub_20A677C98()
{
  JUMPOUT(0x20A677710);
}

void sub_20A677CA0()
{
  JUMPOUT(0x20A677718);
}

void sub_20A677CA8()
{
  JUMPOUT(0x20A677728);
}

void sub_20A677CB0()
{
  JUMPOUT(0x20A677744);
}

void sub_20A677CB8()
{
  JUMPOUT(0x20A677754);
}

void sub_20A677CC0()
{
  JUMPOUT(0x20A67775CLL);
}

void sub_20A677CC8()
{
  JUMPOUT(0x20A67776CLL);
}

void sub_20A677CD0()
{
  JUMPOUT(0x20A67777CLL);
}

void sub_20A677CD8()
{
  JUMPOUT(0x20A677798);
}

void sub_20A677CE0()
{
  JUMPOUT(0x20A6777A8);
}

void sub_20A677CE8()
{
  JUMPOUT(0x20A6777C4);
}

void sub_20A677CF0()
{
  JUMPOUT(0x20A6777D4);
}

void sub_20A677CF8()
{
  JUMPOUT(0x20A6777DCLL);
}

void sub_20A677D00()
{
  JUMPOUT(0x20A6777ECLL);
}

void sub_20A677D08()
{
  JUMPOUT(0x20A6777FCLL);
}

void sub_20A677D10()
{
  JUMPOUT(0x20A677818);
}

void sub_20A677D18()
{
  JUMPOUT(0x20A677828);
}

void sub_20A677D20()
{
  JUMPOUT(0x20A677844);
}

void sub_20A677D28()
{
  JUMPOUT(0x20A677854);
}

void sub_20A677D30()
{
  JUMPOUT(0x20A677870);
}

void sub_20A677D38()
{
  JUMPOUT(0x20A677880);
}

void sub_20A677D40()
{
  JUMPOUT(0x20A67789CLL);
}

void sub_20A677D48()
{
  JUMPOUT(0x20A6778ACLL);
}

void sub_20A677D50()
{
  JUMPOUT(0x20A6778C8);
}

void sub_20A677D58()
{
  JUMPOUT(0x20A6778D8);
}

void sub_20A677D60()
{
  JUMPOUT(0x20A6778F4);
}

void sub_20A677D68()
{
  JUMPOUT(0x20A677904);
}

void sub_20A677D70()
{
  JUMPOUT(0x20A677920);
}

void sub_20A677D78()
{
  JUMPOUT(0x20A677930);
}

void sub_20A677D80()
{
  JUMPOUT(0x20A67794CLL);
}

void sub_20A677D88()
{
  JUMPOUT(0x20A67795CLL);
}

void sub_20A677D90()
{
  JUMPOUT(0x20A677978);
}

void sub_20A677D98()
{
  JUMPOUT(0x20A677988);
}

void sub_20A677DA0()
{
  JUMPOUT(0x20A6779A4);
}

void sub_20A677DA8()
{
  JUMPOUT(0x20A6779B4);
}

void sub_20A677DB0()
{
  JUMPOUT(0x20A6779D0);
}

void sub_20A677DB8()
{
  JUMPOUT(0x20A6779E0);
}

void sub_20A677DC0()
{
  JUMPOUT(0x20A6779FCLL);
}

void sub_20A677DC8()
{
  JUMPOUT(0x20A677A0CLL);
}

void sub_20A677DD0()
{
  JUMPOUT(0x20A677A28);
}

void sub_20A677DD8()
{
  JUMPOUT(0x20A677A38);
}

void sub_20A677DE0()
{
  JUMPOUT(0x20A677A40);
}

void sub_20A677DE8()
{
  JUMPOUT(0x20A677A50);
}

void sub_20A677DF0()
{
  JUMPOUT(0x20A677A60);
}

void sub_20A677DF8()
{
  JUMPOUT(0x20A677A68);
}

void sub_20A677E00()
{
  JUMPOUT(0x20A677A78);
}

void sub_20A677E08()
{
  JUMPOUT(0x20A677A88);
}

void sub_20A677E10()
{
  JUMPOUT(0x20A677A90);
}

void sub_20A677E18()
{
  JUMPOUT(0x20A677AA0);
}

void sub_20A677E20()
{
  JUMPOUT(0x20A677AB0);
}

void sub_20A677E28()
{
  JUMPOUT(0x20A677AB8);
}

void sub_20A677E30()
{
  JUMPOUT(0x20A677AC8);
}

void sub_20A677E38()
{
  JUMPOUT(0x20A677AD8);
}

void sub_20A677E40()
{
  JUMPOUT(0x20A677AF4);
}

void sub_20A677E48()
{
  JUMPOUT(0x20A677B04);
}

void sub_20A677E50()
{
  JUMPOUT(0x20A677B20);
}

void sub_20A677E58()
{
  JUMPOUT(0x20A677B30);
}

void sub_20A677E60()
{
  JUMPOUT(0x20A677B4CLL);
}

void sub_20A677E68()
{
  JUMPOUT(0x20A677B5CLL);
}

void sub_20A677E70()
{
  JUMPOUT(0x20A677B78);
}

void sub_20A677E78()
{
  JUMPOUT(0x20A677B88);
}

void sub_20A677E80()
{
  JUMPOUT(0x20A677BA8);
}

void sub_20A677E88()
{
  JUMPOUT(0x20A677BB8);
}

uint64_t mlcore::ItemPropertySyncID(mlcore *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&mlcore::ItemPropertySyncID(void)::once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&mlcore::ItemPropertySyncID(void)::once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertySyncID(void)::$_0 &&>>);
  }
  return mlcore::ItemPropertySyncID(void)::property;
}

void mlcore::Query::_SQLResultColumnExpressions(_QWORD *a1@<X8>)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  int v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  _QWORD *v15;
  char v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  v12 = 1;
  std::allocate_shared[abi:ne180100]<mediaplatform::SQLLiteralValue<int>,std::allocator<mediaplatform::SQLLiteralValue<int>>,int,void>(&v13, &v12);
  v3 = v13;
  v2 = v14;
  v17 = v13;
  v18 = v14;
  v13 = 0;
  v14 = 0;
  a1[1] = 0;
  a1[2] = 0;
  *a1 = 0;
  v15 = a1;
  v16 = 0;
  v4 = operator new(0x10uLL);
  *a1 = v4;
  a1[1] = v4;
  v5 = v4 + 2;
  a1[2] = v4 + 2;
  *v4 = v3;
  v4[1] = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    a1[1] = v5;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  else
  {
    a1[1] = v5;
  }
  v9 = v14;
  if (v14)
  {
    v10 = (unint64_t *)&v14->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
}

void sub_20A67803C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  void **v6;
  va_list va1;
  uint64_t v8;
  va_list va2;

  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v6 = va_arg(va2, void **);
  v8 = va_arg(va2, _QWORD);
  std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__destroy_vector::operator()[abi:ne180100]((void ***)va1);
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)va2);
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t mlcore::ComplexProperty<int>::ComplexProperty(uint64_t a1, _QWORD *a2, _QWORD **a3)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  *(_QWORD *)(a1 + 56) = 0;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_QWORD *)a1 = &unk_24C337A00;
  v4 = a2[1];
  *(_QWORD *)(a1 + 64) = *a2;
  *(_QWORD *)(a1 + 72) = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  std::vector<std::shared_ptr<mediaplatform::SQLJoinClause const>>::__init_with_size[abi:ne180100]<std::shared_ptr<mediaplatform::SQLJoinClause const>*,std::shared_ptr<mediaplatform::SQLJoinClause const>*>((_QWORD *)(a1 + 80), *a3, a3[1], ((char *)a3[1] - (char *)*a3) >> 4);
  return a1;
}

{
  return __ZN6mlcore15ComplexPropertyIiEC2ENSt3__110shared_ptrIN13mediaplatform13SQLExpressionEEENS2_6vectorINS3_IKNS4_13SQLJoinClauseEEENS2_9allocatorISA_EEEE(a1, a2, a3);
}

void sub_20A6780F8(_Unwind_Exception *a1)
{
  void **v1;
  uint64_t v2;

  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100](v2);
  mlcore::ModelPropertyBase::~ModelPropertyBase(v1);
  _Unwind_Resume(a1);
}

uint64_t mlcore::ItemPropertyVolumeNormalization(mlcore *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&mlcore::ItemPropertyVolumeNormalization(void)::once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&mlcore::ItemPropertyVolumeNormalization(void)::once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyVolumeNormalization(void)::$_0 &&>>);
  }
  return mlcore::ItemPropertyVolumeNormalization(void)::property;
}

double mlcore::MultiEntityQuery::MultiEntityQuery(mlcore::MultiEntityQuery *this)
{
  _QWORD *v1;
  double result;
  uint64_t v3[2];

  v3[0] = 0;
  v3[1] = 0;
  v1 = mlcore::EntityQuery::EntityQuery(this, 0, v3);
  *v1 = &off_24C338280;
  result = 0.0;
  *((_OWORD *)v1 + 8) = 0u;
  *((_OWORD *)v1 + 9) = 0u;
  *((_DWORD *)v1 + 40) = 1065353216;
  *(_OWORD *)(v1 + 21) = 0u;
  *(_OWORD *)(v1 + 23) = 0u;
  *((_DWORD *)v1 + 50) = 1065353216;
  *((_OWORD *)v1 + 13) = 0u;
  *((_OWORD *)v1 + 14) = 0u;
  *((_DWORD *)v1 + 60) = 1065353216;
  *(_OWORD *)(v1 + 31) = 0u;
  *(_OWORD *)(v1 + 33) = 0u;
  *((_DWORD *)v1 + 70) = 1065353216;
  v1[37] = 0;
  v1[38] = 0;
  v1[36] = 0;
  return result;
}

void sub_20A6781E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void mlcore::EntityQuery::tvSeasonsQuery(uint64_t a1@<X0>, char **a2@<X8>)
{
  uint64_t v4;
  char *v5;
  mlcore *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  char **v14;
  char v15;
  _BYTE v16[8];
  mlcore *HasTitle;
  _DWORD v18[4];
  mlcore *v19;
  int v20;
  uint64_t v21;
  int v22;
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  v4 = mlcore::TypedEntityClass<mlcore::TVSeason>::sharedPointer();
  std::allocate_shared[abi:ne180100]<mlcore::EntityQuery,std::allocator<mlcore::EntityQuery>,mlcore::EntityClass *,std::shared_ptr<mlcore::Predicate> &,void>(a2, v4, *(_QWORD *)a1, *(std::__shared_weak_count **)(a1 + 8));
  v5 = *a2;
  HasTitle = (mlcore *)mlcore::AlbumPropertyHasTitle(v6);
  v18[0] = 1;
  v19 = (mlcore *)mlcore::AlbumPropertyOrder(HasTitle);
  v20 = 0;
  v21 = mlcore::AlbumPropertyPersistentID(v19);
  v22 = 0;
  v12 = 0;
  v13 = 0;
  v11 = 0;
  v14 = &v11;
  v15 = 0;
  v7 = (char *)operator new(0x48uLL);
  v8 = 0;
  v11 = v7;
  v13 = v7 + 72;
  do
  {
    v9 = &v7[v8 * 4];
    v10 = *(_QWORD *)&v16[v8 * 4 + 8];
    *(_QWORD *)v9 = &off_24C337670;
    *((_QWORD *)v9 + 1) = v10;
    *((_DWORD *)v9 + 4) = v18[v8];
    v8 += 6;
  }
  while (v8 != 18);
  v12 = v7 + 72;
  mlcore::PropertiesQuery::setSortDescriptors(v5, (char *)&v11);
  v14 = &v11;
  std::vector<mlcore::SortDescriptor>::__destroy_vector::operator()[abi:ne180100]((void ***)&v14);
}

void sub_20A678318(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v5;
  va_list va;

  va_start(va, a5);
  std::vector<mlcore::SortDescriptor>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100](v5);
  _Unwind_Resume(a1);
}

uint64_t mlcore::AlbumPropertyHasTitle(mlcore *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&mlcore::AlbumPropertyHasTitle(void)::once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&mlcore::AlbumPropertyHasTitle(void)::once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::AlbumPropertyHasTitle(void)::$_0 &&>>);
  }
  return mlcore::AlbumPropertyHasTitle(void)::property;
}

uint64_t mlcore::PlaylistCategoryTypeIsPersonalMix(mlcore *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&mlcore::PlaylistCategoryTypeIsPersonalMix(void)::once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&mlcore::PlaylistCategoryTypeIsPersonalMix(void)::once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::PlaylistCategoryTypeIsPersonalMix(void)::$_0 &&>>);
  }
  return mlcore::PlaylistCategoryTypeIsPersonalMix(void)::property;
}

void mlcore::EntityQuery::moviesQuery(mlcore *a1@<X0>, char **a2@<X8>)
{
  uint64_t v4;
  char *v5;
  unint64_t *v6;
  uint64_t v7;
  char *v8;
  unint64_t *v9;
  unint64_t *v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  __int128 *v15;
  uint64_t v16;
  __int128 v17;
  unint64_t *v18;
  unint64_t v19;
  __int128 v20;
  std::__shared_weak_count *v21;
  unint64_t *p_shared_owners;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  uint64_t i;
  unint64_t v28;
  unint64_t v29;
  __int128 *v30;
  char v31;
  uint64_t v32;
  char v33;
  __int128 v34;
  unint64_t *v35;
  unint64_t v36;
  __int128 v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  uint64_t j;
  uint64_t v45;
  char *v46;
  unsigned __int8 v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  mlcore *v57;
  mlcore *v58;
  mlcore *v59;
  mlcore *v60;
  mlcore *v61;
  mlcore *v62;
  uint64_t v63;
  __int128 *v64;
  __int128 *v65;
  __int128 *v66;
  __int128 *v67;
  __int128 *v68;
  __int128 *v69;
  __int128 v70;
  __int128 v71;
  char *v72;
  std::__shared_weak_count *v73;
  char *v74;
  std::__shared_weak_count *v75;
  __int128 **v76;
  char v77;
  void (**v78)(mlcore::SortDescriptor *__hidden);
  mlcore *v79;
  char *v80;
  void (**v81)(mlcore::SortDescriptor *__hidden);
  mlcore *v82;
  char *v83;
  void (**v84)(mlcore::SortDescriptor *__hidden);
  mlcore *v85;
  int v86;
  void (**v87)(mlcore::SortDescriptor *__hidden);
  mlcore *v88;
  int v89;
  void (**v90)(mlcore::SortDescriptor *__hidden);
  mlcore *v91;
  int v92;
  void (**v93)(mlcore::SortDescriptor *__hidden);
  uint64_t v94;
  int v95;
  uint64_t v96;

  v96 = *MEMORY[0x24BDAC8D0];
  v4 = mlcore::ItemPropertyMediaType(a1);
  v5 = (char *)operator new(0x48uLL);
  *(_OWORD *)(v5 + 8) = 0u;
  v6 = (unint64_t *)(v5 + 8);
  *(_QWORD *)v5 = &off_24C33CE50;
  *((_QWORD *)v5 + 3) = &unk_24C339C50;
  *((_QWORD *)v5 + 4) = v4;
  *((_QWORD *)v5 + 5) = 0;
  *((_DWORD *)v5 + 12) = 2048;
  *(_OWORD *)(v5 + 56) = 0u;
  v74 = v5 + 24;
  v75 = (std::__shared_weak_count *)v5;
  v7 = mlcore::ItemPropertyTitleOrder((mlcore *)v5);
  v8 = (char *)operator new(0x48uLL);
  *(_OWORD *)(v8 + 8) = 0u;
  v9 = (unint64_t *)(v8 + 8);
  *(_QWORD *)v8 = &off_24C33CE88;
  *((_QWORD *)v8 + 3) = &unk_24C339CA8;
  *((_QWORD *)v8 + 4) = v7;
  *((_QWORD *)v8 + 5) = 0x100000000;
  *((_QWORD *)v8 + 6) = 0;
  *(_OWORD *)(v8 + 56) = 0u;
  v72 = v8 + 24;
  v73 = (std::__shared_weak_count *)v8;
  v71 = 0u;
  if (*(_QWORD *)a1)
  {
    v10 = (unint64_t *)*((_QWORD *)a1 + 1);
    v78 = *(void (***)(mlcore::SortDescriptor *__hidden))a1;
    v79 = (mlcore *)v10;
    if (v10)
    {
      v11 = v10 + 1;
      do
        v12 = __ldxr(v11);
      while (__stxr(v12 + 1, v11));
    }
    v80 = v5 + 24;
    v81 = (void (**)(mlcore::SortDescriptor *__hidden))v5;
    do
      v13 = __ldxr(v6);
    while (__stxr(v13 + 1, v6));
    v82 = (mlcore *)(v8 + 24);
    v83 = v8;
    do
      v14 = __ldxr(v9);
    while (__stxr(v14 + 1, v9));
    v67 = 0;
    v68 = 0;
    v69 = 0;
    v76 = &v67;
    v77 = 0;
    v15 = (__int128 *)operator new(0x30uLL);
    v16 = 0;
    v67 = v15;
    v68 = v15;
    v69 = v15 + 3;
    do
    {
      v17 = *(_OWORD *)&(&v78)[2 * v16];
      *v15 = v17;
      if (*((_QWORD *)&v17 + 1))
      {
        v18 = (unint64_t *)(*((_QWORD *)&v17 + 1) + 8);
        do
          v19 = __ldxr(v18);
        while (__stxr(v19 + 1, v18));
      }
      ++v16;
      ++v15;
    }
    while (v16 != 3);
    v68 = v15;
    mlcore::CreateAndPredicate(&v67, &v70);
    v20 = v70;
    v70 = 0uLL;
    v21 = (std::__shared_weak_count *)*((_QWORD *)&v71 + 1);
    v71 = v20;
    if (v21)
    {
      p_shared_owners = (unint64_t *)&v21->__shared_owners_;
      do
        v23 = __ldaxr(p_shared_owners);
      while (__stlxr(v23 - 1, p_shared_owners));
      if (!v23)
      {
        ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
        std::__shared_weak_count::__release_weak(v21);
      }
    }
    v24 = (std::__shared_weak_count *)*((_QWORD *)&v70 + 1);
    if (*((_QWORD *)&v70 + 1))
    {
      v25 = (unint64_t *)(*((_QWORD *)&v70 + 1) + 8);
      do
        v26 = __ldaxr(v25);
      while (__stlxr(v26 - 1, v25));
      if (!v26)
      {
        ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
        std::__shared_weak_count::__release_weak(v24);
      }
    }
    v76 = &v67;
    std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v76);
    for (i = 4; i != -2; i -= 2)
      std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)&(&v78)[i]);
  }
  else
  {
    v78 = (void (**)(mlcore::SortDescriptor *__hidden))(v5 + 24);
    v79 = (mlcore *)v5;
    do
      v28 = __ldxr(v6);
    while (__stxr(v28 + 1, v6));
    v80 = v8 + 24;
    v81 = (void (**)(mlcore::SortDescriptor *__hidden))v8;
    do
      v29 = __ldxr(v9);
    while (__stxr(v29 + 1, v9));
    v64 = 0;
    v65 = 0;
    v66 = 0;
    v76 = &v64;
    v77 = 0;
    v30 = (__int128 *)operator new(0x20uLL);
    v31 = 0;
    v32 = 0;
    v64 = v30;
    v65 = v30;
    v66 = v30 + 2;
    do
    {
      v33 = v31;
      v34 = *(_OWORD *)&(&v78)[2 * v32];
      *v30 = v34;
      if (*((_QWORD *)&v34 + 1))
      {
        v35 = (unint64_t *)(*((_QWORD *)&v34 + 1) + 8);
        do
          v36 = __ldxr(v35);
        while (__stxr(v36 + 1, v35));
      }
      ++v30;
      v31 = 1;
      v32 = 1;
    }
    while ((v33 & 1) == 0);
    v65 = v30;
    mlcore::CreateAndPredicate(&v64, &v70);
    v37 = v70;
    v70 = 0uLL;
    v38 = (std::__shared_weak_count *)*((_QWORD *)&v71 + 1);
    v71 = v37;
    if (v38)
    {
      v39 = (unint64_t *)&v38->__shared_owners_;
      do
        v40 = __ldaxr(v39);
      while (__stlxr(v40 - 1, v39));
      if (!v40)
      {
        ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
        std::__shared_weak_count::__release_weak(v38);
      }
    }
    v41 = (std::__shared_weak_count *)*((_QWORD *)&v70 + 1);
    if (*((_QWORD *)&v70 + 1))
    {
      v42 = (unint64_t *)(*((_QWORD *)&v70 + 1) + 8);
      do
        v43 = __ldaxr(v42);
      while (__stlxr(v43 - 1, v42));
      if (!v43)
      {
        ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
        std::__shared_weak_count::__release_weak(v41);
      }
    }
    v76 = &v64;
    std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v76);
    for (j = 2; j != -2; j -= 2)
      std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)&(&v78)[j]);
  }
  v45 = mlcore::TypedEntityClass<mlcore::Movie>::sharedPointer();
  std::allocate_shared[abi:ne180100]<mlcore::EntityQuery,std::allocator<mlcore::EntityQuery>,mlcore::EntityClass *,std::shared_ptr<mlcore::Predicate> &,void>(a2, v45, v71, *((std::__shared_weak_count **)&v71 + 1));
  v46 = *a2;
  if ((v47 & 1) == 0
  {
    v57 = (mlcore *)operator new();
    v58 = (mlcore *)mlcore::ItemPropertyTitleOrder(v57);
    v78 = &off_24C337670;
    v79 = v58;
    LODWORD(v80) = 0;
    v59 = (mlcore *)mlcore::ItemPropertyItemArtistOrder(v58);
    v81 = &off_24C337670;
    v82 = v59;
    LODWORD(v83) = 0;
    v60 = (mlcore *)mlcore::ItemPropertyAlbumOrder(v59);
    v84 = &off_24C337670;
    v85 = v60;
    v86 = 0;
    v61 = (mlcore *)mlcore::ItemPropertyAlbumPersistentID(v60);
    v87 = &off_24C337670;
    v88 = v61;
    v89 = 0;
    v62 = (mlcore *)mlcore::ItemPropertyDiscNumber(v61);
    v90 = &off_24C337670;
    v91 = v62;
    v92 = 0;
    v63 = mlcore::ItemPropertyTrackNumber(v62);
    v93 = &off_24C337670;
    v94 = v63;
    v95 = 0;
    std::vector<mlcore::SortDescriptor>::vector[abi:ne180100](v57, (uint64_t)&v78, 6uLL);
    mlcore::StandardMovieSortDescriptors(void)::sortDescriptors = (uint64_t)v57;
  }
  mlcore::PropertiesQuery::setSortDescriptors(v46, (char *)mlcore::StandardMovieSortDescriptors(void)::sortDescriptors);
  v48 = (std::__shared_weak_count *)*((_QWORD *)&v71 + 1);
  if (*((_QWORD *)&v71 + 1))
  {
    v49 = (unint64_t *)(*((_QWORD *)&v71 + 1) + 8);
    do
      v50 = __ldaxr(v49);
    while (__stlxr(v50 - 1, v49));
    if (!v50)
    {
      ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
      std::__shared_weak_count::__release_weak(v48);
    }
  }
  v51 = v73;
  if (v73)
  {
    v52 = (unint64_t *)&v73->__shared_owners_;
    do
      v53 = __ldaxr(v52);
    while (__stlxr(v53 - 1, v52));
    if (!v53)
    {
      ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
      std::__shared_weak_count::__release_weak(v51);
    }
  }
  v54 = v75;
  if (v75)
  {
    v55 = (unint64_t *)&v75->__shared_owners_;
    do
      v56 = __ldaxr(v55);
    while (__stlxr(v56 - 1, v55));
    if (!v56)
    {
      ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
      std::__shared_weak_count::__release_weak(v54);
    }
  }
}

void sub_20A678964(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  va_list va;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  va_list va1;
  uint64_t v18;
  va_list va2;

  va_start(va2, a9);
  va_start(va1, a9);
  va_start(va, a9);
  v12 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v16 = va_arg(va2, _QWORD);
  v18 = va_arg(va2, _QWORD);
  MEMORY[0x20BD27AFC](v10, 0x20C40960023A9);
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100](v9);
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)va2);
  _Unwind_Resume(a1);
}

uint64_t mlcore::TypedEntityClass<mlcore::Movie>::sharedPointer()
{
  unint64_t v0;
  char v2;
  char **v3;
  char *v4;

  v0 = atomic_load(&mlcore::TypedEntityClass<mlcore::Movie>::sharedPointer(void)::__once);
  if (v0 != -1)
  {
    v4 = &v2;
    v3 = &v4;
    std::__call_once(&mlcore::TypedEntityClass<mlcore::Movie>::sharedPointer(void)::__once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::TypedEntityClass<mlcore::Movie>::sharedPointer(void)::{lambda(void)#1} &&>>);
  }
  return mlcore::TypedEntityClass<mlcore::Movie>::sharedPointer(void)::__sharedPointer;
}

uint64_t mlcore::ItemPropertyDiscNumber(mlcore *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&mlcore::ItemPropertyDiscNumber(void)::once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&mlcore::ItemPropertyDiscNumber(void)::once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyDiscNumber(void)::$_0 &&>>);
  }
  return mlcore::ItemPropertyDiscNumber(void)::property;
}

uint64_t mlcore::ItemPropertyItemArtistOrder(mlcore *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&mlcore::ItemPropertyItemArtistOrder(void)::once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&mlcore::ItemPropertyItemArtistOrder(void)::once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyItemArtistOrder(void)::$_0 &&>>);
  }
  return mlcore::ItemPropertyItemArtistOrder(void)::property;
}

void mlcore::CreateOrPredicate(__int128 **a1@<X0>, _QWORD *a2@<X8>)
{
  __int128 *v4;
  __int128 *v5;
  char *v6;
  uint64_t v7;
  char *v8;
  __int128 v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;

  *a2 = 0;
  a2[1] = 0;
  v4 = std::remove[abi:ne180100]<std::__wrap_iter<std::shared_ptr<mlcore::Predicate> *>,decltype(nullptr)>(*a1, a1[1]);
  std::vector<std::shared_ptr<mlcore::Predicate>>::erase((uint64_t)a1, (uint64_t)v4, (uint64_t)a1[1]);
  v5 = *a1;
  v6 = (char *)a1[1];
  v7 = v6 - (char *)*a1;
  if (v7 == 16)
  {
    std::shared_ptr<mlcore::Predicate>::operator=[abi:ne180100](a2, *(_QWORD *)v5, *((_QWORD *)v5 + 1));
  }
  else if ((unint64_t)v7 >= 0x11)
  {
    v8 = (char *)operator new(0x38uLL);
    *(_OWORD *)(v8 + 8) = 0u;
    *((_QWORD *)v8 + 3) = off_24C339690;
    *(_QWORD *)v8 = &off_24C33C360;
    *(_OWORD *)(v8 + 40) = 0u;
    *((_QWORD *)v8 + 4) = 0;
    std::vector<std::shared_ptr<mlcore::Predicate>>::__init_with_size[abi:ne180100]<std::shared_ptr<mlcore::Predicate>*,std::shared_ptr<mlcore::Predicate>*>(v8 + 32, v5, v6, v7 >> 4);
    *((_QWORD *)v8 + 3) = &off_24C336AE0;
    *(_QWORD *)&v9 = v8 + 24;
    *((_QWORD *)&v9 + 1) = v8;
    v10 = (std::__shared_weak_count *)a2[1];
    *(_OWORD *)a2 = v9;
    if (v10)
    {
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v12 = __ldaxr(p_shared_owners);
      while (__stlxr(v12 - 1, p_shared_owners));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
  }
}

void sub_20A678C90(_Unwind_Exception *a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  void *v4;

  std::__shared_weak_count::~__shared_weak_count(v2);
  operator delete(v4);
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void mlcore::EntityQuery::playlistsQuery(mlcore *a1@<X0>, char **a2@<X8>)
{
  uint64_t IsHidden;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  _OWORD *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char *v22;
  uint64_t v23;
  char *v24;
  __int128 v25;
  unint64_t *v26;
  unint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  char *v30;
  __int128 v31;
  int64x2_t v32;
  uint64_t v33;
  uint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  char *v38;
  mlcore *v39;
  void **v40;
  unint64_t v41;
  void **v42;
  void **v43;
  __int128 *v44[3];
  _BYTE v45[24];
  __int128 v46;
  void **v47;
  int64x2_t v48;
  uint64_t v49;
  mlcore *IsFolder;
  int v51;
  mlcore *IsSmart;
  int v53;
  mlcore *IsGenius;
  int v55;
  mlcore *IsOwner;
  int v57;
  mlcore *IsPersonalMix;
  int v59;
  mlcore *IsSubscribed;
  int v61;
  mlcore *v62;
  int v63;
  uint64_t v64;
  int v65;
  __int128 **v66;
  std::__shared_weak_count *v67;
  void **v68;
  uint64_t v69;

  v69 = *MEMORY[0x24BDAC8D0];
  IsHidden = mlcore::PlaylistPropertyIsHidden(a1);
  v5 = (std::__shared_weak_count *)operator new(0x30uLL);
  *(_OWORD *)&v5->__shared_owners_ = 0u;
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  v5[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_24C3377B8;
  v5->__vftable = (std::__shared_weak_count_vtbl *)&off_24C33C9F0;
  v5[1].__shared_owners_ = IsHidden;
  LODWORD(v5[1].__shared_weak_owners_) = 1;
  v66 = (__int128 **)&v5[1];
  v67 = v5;
  v46 = 0u;
  memset(v45, 0, sizeof(v45));
  v47 = (void **)v45;
  v48.i8[0] = 0;
  v7 = operator new(0x10uLL);
  *(_QWORD *)v45 = v7;
  *(_QWORD *)&v45[16] = v7 + 2;
  *v7 = v5 + 1;
  v7[1] = v5;
  do
    v8 = __ldxr(p_shared_owners);
  while (__stxr(v8 + 1, p_shared_owners));
  *(_QWORD *)&v45[8] = v7 + 2;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (!v9)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
  v10 = (std::__shared_weak_count *)*((_QWORD *)&v46 + 1);
  if (*((_QWORD *)&v46 + 1))
  {
    v11 = (unint64_t *)(*((_QWORD *)&v46 + 1) + 8);
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if (*(_QWORD *)a1)
  {
    v13 = *(_QWORD *)&v45[8];
    if (*(_QWORD *)&v45[8] >= *(_QWORD *)&v45[16])
    {
      v18 = (uint64_t)(*(_QWORD *)&v45[8] - *(_QWORD *)v45) >> 4;
      v19 = v18 + 1;
      if ((unint64_t)(v18 + 1) >> 60)
        std::vector<std::string>::__throw_length_error[abi:ne180100]();
      v20 = *(_QWORD *)&v45[16] - *(_QWORD *)v45;
      if ((uint64_t)(*(_QWORD *)&v45[16] - *(_QWORD *)v45) >> 3 > v19)
        v19 = v20 >> 3;
      if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF0)
        v21 = 0xFFFFFFFFFFFFFFFLL;
      else
        v21 = v19;
      IsFolder = (mlcore *)&v45[16];
      v22 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<mediaplatform::DatabaseParameterBase>>>(v21);
      v24 = &v22[16 * v18];
      v25 = *(_OWORD *)a1;
      *(_OWORD *)v24 = *(_OWORD *)a1;
      if (*((_QWORD *)&v25 + 1))
      {
        v26 = (unint64_t *)(*((_QWORD *)&v25 + 1) + 8);
        do
          v27 = __ldxr(v26);
        while (__stxr(v27 + 1, v26));
      }
      v28 = *(_QWORD **)&v45[8];
      v29 = *(_QWORD **)v45;
      if (*(_QWORD *)&v45[8] == *(_QWORD *)v45)
      {
        v32 = vdupq_n_s64(*(unint64_t *)&v45[8]);
        v30 = &v22[16 * v18];
      }
      else
      {
        v30 = &v22[16 * v18];
        do
        {
          v31 = *((_OWORD *)v28 - 1);
          v28 -= 2;
          *((_OWORD *)v30 - 1) = v31;
          v30 -= 16;
          *v28 = 0;
          v28[1] = 0;
        }
        while (v28 != v29);
        v32 = *(int64x2_t *)v45;
      }
      v17 = v24 + 16;
      *(_QWORD *)v45 = v30;
      *(_QWORD *)&v45[8] = v24 + 16;
      v48 = v32;
      v33 = *(_QWORD *)&v45[16];
      *(_QWORD *)&v45[16] = &v22[16 * v23];
      v49 = v33;
      v47 = (void **)v32.i64[0];
      std::__split_buffer<std::shared_ptr<mediaplatform::SQLExpression const>>::~__split_buffer((uint64_t)&v47);
    }
    else
    {
      **(_QWORD **)&v45[8] = *(_QWORD *)a1;
      v14 = *((_QWORD *)a1 + 1);
      *(_QWORD *)(v13 + 8) = v14;
      if (v14)
      {
        v15 = (unint64_t *)(v14 + 8);
        do
          v16 = __ldxr(v15);
        while (__stxr(v16 + 1, v15));
      }
      v17 = (_OWORD *)(v13 + 16);
    }
    *(_QWORD *)&v45[8] = v17;
  }
  v34 = mlcore::TypedEntityClass<mlcore::Playlist>::sharedPointer();
  memset(v44, 0, sizeof(v44));
  std::vector<std::shared_ptr<mlcore::Predicate>>::__init_with_size[abi:ne180100]<std::shared_ptr<mlcore::Predicate>*,std::shared_ptr<mlcore::Predicate>*>((char *)v44, *(_QWORD **)v45, *(_QWORD **)&v45[8], (uint64_t)(*(_QWORD *)&v45[8] - *(_QWORD *)v45) >> 4);
  mlcore::CreateAndPredicate(v44, &v47);
  std::allocate_shared[abi:ne180100]<mlcore::EntityQuery,std::allocator<mlcore::EntityQuery>,mlcore::EntityClass *,std::shared_ptr<mlcore::Predicate>,void>(a2, v34, (uint64_t *)&v47);
  v35 = (std::__shared_weak_count *)v48.i64[0];
  if (v48.i64[0])
  {
    v36 = (unint64_t *)(v48.i64[0] + 8);
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
    }
  }
  v66 = v44;
  std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v66);
  v38 = *a2;
  v48.i64[0] = mlcore::PlaylistPropertyIsFavoritedSongs(v39);
  v48.i32[2] = 1;
  IsFolder = (mlcore *)mlcore::PlaylistPropertySmartIsFolder((mlcore *)v48.i64[0]);
  v51 = 1;
  IsSmart = (mlcore *)mlcore::PlaylistPropertyIsSmart(IsFolder);
  v53 = 1;
  IsGenius = (mlcore *)mlcore::PlaylistPropertySmartIsGenius(IsSmart);
  v55 = 1;
  IsOwner = (mlcore *)mlcore::PlaylistPropertyIsOwner(IsGenius);
  v57 = 1;
  IsPersonalMix = (mlcore *)mlcore::PlaylistCategoryTypeIsPersonalMix(IsOwner);
  v59 = 1;
  IsSubscribed = (mlcore *)mlcore::PlaylistPropertyIsSubscribed(IsPersonalMix);
  v61 = 1;
  v62 = (mlcore *)mlcore::PlaylistPropertyGroupingSortKey(IsSubscribed);
  v63 = 0;
  v64 = mlcore::PlaylistPropertyNameOrder(v62);
  v65 = 0;
  v67 = 0;
  v68 = 0;
  v66 = 0;
  *(_QWORD *)&v46 = &v66;
  BYTE8(v46) = 0;
  v40 = (void **)operator new(0xD8uLL);
  v41 = 0;
  v66 = (__int128 **)v40;
  v68 = v40 + 27;
  do
  {
    v42 = &v40[v41 / 2];
    v43 = (&v47)[v41 / 2 + 1];
    *v42 = &off_24C337670;
    v42[1] = v43;
    *((_DWORD *)v42 + 4) = v48.i32[v41 + 2];
    v41 += 6;
  }
  while (v41 != 54);
  v67 = (std::__shared_weak_count *)(v40 + 27);
  mlcore::PropertiesQuery::setSortDescriptors(v38, (char *)&v66);
  *(_QWORD *)&v46 = &v66;
  std::vector<mlcore::SortDescriptor>::__destroy_vector::operator()[abi:ne180100]((void ***)&v46);
  v47 = (void **)v45;
  std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__destroy_vector::operator()[abi:ne180100](&v47);
}

void sub_20A6790C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  uint64_t v13;

  *(_QWORD *)(v13 - 96) = &a13;
  std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v13 - 96));
  _Unwind_Resume(a1);
}

uint64_t mlcore::PlaylistPropertyIsHidden(mlcore *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&mlcore::PlaylistPropertyIsHidden(void)::once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&mlcore::PlaylistPropertyIsHidden(void)::once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::PlaylistPropertyIsHidden(void)::$_0 &&>>);
  }
  return mlcore::PlaylistPropertyIsHidden(void)::property;
}

uint64_t mlcore::PlaylistPropertySmartIsFolder(mlcore *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&mlcore::PlaylistPropertySmartIsFolder(void)::once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&mlcore::PlaylistPropertySmartIsFolder(void)::once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::PlaylistPropertySmartIsFolder(void)::$_0 &&>>);
  }
  return mlcore::PlaylistPropertySmartIsFolder(void)::property;
}

uint64_t mlcore::PlaylistPropertyIsSmart(mlcore *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&mlcore::PlaylistPropertyIsSmart(void)::once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&mlcore::PlaylistPropertyIsSmart(void)::once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::PlaylistPropertyIsSmart(void)::$_0 &&>>);
  }
  return mlcore::PlaylistPropertyIsSmart(void)::property;
}

uint64_t mlcore::PlaylistPropertySmartIsGenius(mlcore *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&mlcore::PlaylistPropertySmartIsGenius(void)::once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&mlcore::PlaylistPropertySmartIsGenius(void)::once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::PlaylistPropertySmartIsGenius(void)::$_0 &&>>);
  }
  return mlcore::PlaylistPropertySmartIsGenius(void)::property;
}

uint64_t mlcore::PlaylistPropertyIsSubscribed(mlcore *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&mlcore::PlaylistPropertyIsSubscribed(void)::once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&mlcore::PlaylistPropertyIsSubscribed(void)::once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::PlaylistPropertyIsSubscribed(void)::$_0 &&>>);
  }
  return mlcore::PlaylistPropertyIsSubscribed(void)::property;
}

uint64_t mlcore::PlaylistPropertyIsFavoritedSongs(mlcore *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&mlcore::PlaylistPropertyIsFavoritedSongs(void)::once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&mlcore::PlaylistPropertyIsFavoritedSongs(void)::once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::PlaylistPropertyIsFavoritedSongs(void)::$_0 &&>>);
  }
  return mlcore::PlaylistPropertyIsFavoritedSongs(void)::property;
}

uint64_t mlcore::PlaylistPropertyNameOrder(mlcore *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&mlcore::PlaylistPropertyNameOrder(void)::once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&mlcore::PlaylistPropertyNameOrder(void)::once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::PlaylistPropertyNameOrder(void)::$_0 &&>>);
  }
  return mlcore::PlaylistPropertyNameOrder(void)::property;
}

uint64_t mlcore::PlaylistPropertyGroupingSortKey(mlcore *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&mlcore::PlaylistPropertyGroupingSortKey(void)::once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&mlcore::PlaylistPropertyGroupingSortKey(void)::once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::PlaylistPropertyGroupingSortKey(void)::$_0 &&>>);
  }
  return mlcore::PlaylistPropertyGroupingSortKey(void)::property;
}

uint64_t mlcore::PlaylistPropertyDistinguishedKind(mlcore *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&mlcore::PlaylistPropertyDistinguishedKind(void)::once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&mlcore::PlaylistPropertyDistinguishedKind(void)::once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::PlaylistPropertyDistinguishedKind(void)::$_0 &&>>);
  }
  return mlcore::PlaylistPropertyDistinguishedKind(void)::property;
}

uint64_t mlcore::PlaylistPropertySmartCriteria(mlcore *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&mlcore::PlaylistPropertySmartCriteria(void)::once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&mlcore::PlaylistPropertySmartCriteria(void)::once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::PlaylistPropertySmartCriteria(void)::$_0 &&>>);
  }
  return mlcore::PlaylistPropertySmartCriteria(void)::property;
}

void mlcore::EntityQuery::songsQuery(mlcore *a1@<X0>, char **a2@<X8>)
{
  uint64_t v4;
  mlcore *v5;
  uint64_t v6;
  char *v7;
  unint64_t *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  __int128 *v15;
  uint64_t v16;
  __int128 v17;
  unint64_t *v18;
  unint64_t v19;
  __int128 v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  uint64_t i;
  unint64_t *v28;
  unint64_t v29;
  unint64_t v30;
  __int128 *v31;
  char v32;
  uint64_t v33;
  char v34;
  __int128 v35;
  unint64_t *v36;
  unint64_t v37;
  __int128 v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  uint64_t j;
  uint64_t v46;
  std::__shared_weak_count *v47;
  char *v48;
  mlcore *v49;
  char *v50;
  unint64_t *v51;
  unint64_t v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  __int128 *v59;
  __int128 *v60;
  __int128 *v61;
  __int128 *v62;
  __int128 *v63;
  __int128 *v64;
  __int128 v65;
  __int128 v66;
  char *v67;
  std::__shared_weak_count *v68;
  uint64_t v69;
  std::__shared_weak_count *v70;
  __int128 **v71;
  char v72;
  uint64_t v73;
  std::__shared_weak_count *v74;
  uint64_t v75;
  std::__shared_weak_count *v76;
  char *v77;
  char *v78;
  uint64_t v79;

  v79 = *MEMORY[0x24BDAC8D0];
  v4 = mlcore::ItemPropertyMediaType(a1);
  v73 = 0x40800000008;
  v5 = (mlcore *)mlcore::CreateInPredicate<int>(&v69, v4, (int *)&v73, 2);
  v6 = mlcore::ItemPropertyTitleOrder(v5);
  v7 = (char *)operator new(0x48uLL);
  *(_OWORD *)(v7 + 8) = 0u;
  v8 = (unint64_t *)(v7 + 8);
  *(_QWORD *)v7 = &off_24C33CE88;
  *((_QWORD *)v7 + 3) = &unk_24C339CA8;
  *((_QWORD *)v7 + 4) = v6;
  *((_QWORD *)v7 + 5) = 0x100000000;
  *((_QWORD *)v7 + 6) = 0;
  *(_OWORD *)(v7 + 56) = 0u;
  v67 = v7 + 24;
  v68 = (std::__shared_weak_count *)v7;
  v66 = 0u;
  if (*(_QWORD *)a1)
  {
    v9 = (std::__shared_weak_count *)*((_QWORD *)a1 + 1);
    v73 = *(_QWORD *)a1;
    v74 = v9;
    if (v9)
    {
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v11 = __ldxr(p_shared_owners);
      while (__stxr(v11 + 1, p_shared_owners));
    }
    v75 = v69;
    v76 = v70;
    if (v70)
    {
      v12 = (unint64_t *)&v70->__shared_owners_;
      do
        v13 = __ldxr(v12);
      while (__stxr(v13 + 1, v12));
    }
    v77 = v7 + 24;
    v78 = v7;
    do
      v14 = __ldxr(v8);
    while (__stxr(v14 + 1, v8));
    v62 = 0;
    v63 = 0;
    v64 = 0;
    v71 = &v62;
    v72 = 0;
    v15 = (__int128 *)operator new(0x30uLL);
    v16 = 0;
    v62 = v15;
    v63 = v15;
    v64 = v15 + 3;
    do
    {
      v17 = *((_OWORD *)&v73 + v16);
      *v15 = v17;
      if (*((_QWORD *)&v17 + 1))
      {
        v18 = (unint64_t *)(*((_QWORD *)&v17 + 1) + 8);
        do
          v19 = __ldxr(v18);
        while (__stxr(v19 + 1, v18));
      }
      ++v16;
      ++v15;
    }
    while (v16 != 3);
    v63 = v15;
    mlcore::CreateAndPredicate(&v62, &v65);
    v20 = v65;
    v65 = 0uLL;
    v21 = (std::__shared_weak_count *)*((_QWORD *)&v66 + 1);
    v66 = v20;
    if (v21)
    {
      v22 = (unint64_t *)&v21->__shared_owners_;
      do
        v23 = __ldaxr(v22);
      while (__stlxr(v23 - 1, v22));
      if (!v23)
      {
        ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
        std::__shared_weak_count::__release_weak(v21);
      }
    }
    v24 = (std::__shared_weak_count *)*((_QWORD *)&v65 + 1);
    if (*((_QWORD *)&v65 + 1))
    {
      v25 = (unint64_t *)(*((_QWORD *)&v65 + 1) + 8);
      do
        v26 = __ldaxr(v25);
      while (__stlxr(v26 - 1, v25));
      if (!v26)
      {
        ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
        std::__shared_weak_count::__release_weak(v24);
      }
    }
    v71 = &v62;
    std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v71);
    for (i = 32; i != -16; i -= 16)
      std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)&v73 + i);
  }
  else
  {
    v73 = v69;
    v74 = v70;
    if (v70)
    {
      v28 = (unint64_t *)&v70->__shared_owners_;
      do
        v29 = __ldxr(v28);
      while (__stxr(v29 + 1, v28));
    }
    v75 = (uint64_t)(v7 + 24);
    v76 = (std::__shared_weak_count *)v7;
    do
      v30 = __ldxr(v8);
    while (__stxr(v30 + 1, v8));
    v59 = 0;
    v60 = 0;
    v61 = 0;
    v71 = &v59;
    v72 = 0;
    v31 = (__int128 *)operator new(0x20uLL);
    v32 = 0;
    v33 = 0;
    v59 = v31;
    v60 = v31;
    v61 = v31 + 2;
    do
    {
      v34 = v32;
      v35 = *((_OWORD *)&v73 + v33);
      *v31 = v35;
      if (*((_QWORD *)&v35 + 1))
      {
        v36 = (unint64_t *)(*((_QWORD *)&v35 + 1) + 8);
        do
          v37 = __ldxr(v36);
        while (__stxr(v37 + 1, v36));
      }
      ++v31;
      v32 = 1;
      v33 = 1;
    }
    while ((v34 & 1) == 0);
    v60 = v31;
    mlcore::CreateAndPredicate(&v59, &v65);
    v38 = v65;
    v65 = 0uLL;
    v39 = (std::__shared_weak_count *)*((_QWORD *)&v66 + 1);
    v66 = v38;
    if (v39)
    {
      v40 = (unint64_t *)&v39->__shared_owners_;
      do
        v41 = __ldaxr(v40);
      while (__stlxr(v41 - 1, v40));
      if (!v41)
      {
        ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
        std::__shared_weak_count::__release_weak(v39);
      }
    }
    v42 = (std::__shared_weak_count *)*((_QWORD *)&v65 + 1);
    if (*((_QWORD *)&v65 + 1))
    {
      v43 = (unint64_t *)(*((_QWORD *)&v65 + 1) + 8);
      do
        v44 = __ldaxr(v43);
      while (__stlxr(v44 - 1, v43));
      if (!v44)
      {
        ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
        std::__shared_weak_count::__release_weak(v42);
      }
    }
    v71 = &v59;
    std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v71);
    for (j = 16; j != -16; j -= 16)
      std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)&v73 + j);
  }
  v46 = mlcore::TypedEntityClass<mlcore::Item>::sharedPointer();
  v47 = (std::__shared_weak_count *)*((_QWORD *)&v66 + 1);
  std::allocate_shared[abi:ne180100]<mlcore::EntityQuery,std::allocator<mlcore::EntityQuery>,mlcore::EntityClass *,std::shared_ptr<mlcore::Predicate> &,void>(a2, v46, v66, *((std::__shared_weak_count **)&v66 + 1));
  v48 = *a2;
  v50 = (char *)mlcore::StandardSongSortDescriptors(v49);
  mlcore::PropertiesQuery::setSortDescriptors(v48, v50);
  if (v47)
  {
    v51 = (unint64_t *)&v47->__shared_owners_;
    do
      v52 = __ldaxr(v51);
    while (__stlxr(v52 - 1, v51));
    if (!v52)
    {
      ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
      std::__shared_weak_count::__release_weak(v47);
    }
  }
  v53 = v68;
  if (v68)
  {
    v54 = (unint64_t *)&v68->__shared_owners_;
    do
      v55 = __ldaxr(v54);
    while (__stlxr(v55 - 1, v54));
    if (!v55)
    {
      ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
      std::__shared_weak_count::__release_weak(v53);
    }
  }
  v56 = v70;
  if (v70)
  {
    v57 = (unint64_t *)&v70->__shared_owners_;
    do
      v58 = __ldaxr(v57);
    while (__stlxr(v58 - 1, v57));
    if (!v58)
    {
      ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
      std::__shared_weak_count::__release_weak(v56);
    }
  }
}

void sub_20A679984(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t i;
  uint64_t v13;
  va_list va;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  va_list va1;
  uint64_t v19;
  va_list va2;

  va_start(va2, a9);
  va_start(va1, a9);
  va_start(va, a9);
  v13 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v17 = va_arg(va2, _QWORD);
  v19 = va_arg(va2, _QWORD);
  *(_QWORD *)(v10 - 104) = v9;
  std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v10 - 104));
  for (i = 16; i != -16; i -= 16)
    std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100](v10 - 88 + i);
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)va2);
  _Unwind_Resume(a1);
}

uint64_t mlcore::StandardSongSortDescriptors(mlcore *this)
{
  unsigned __int8 v1;
  mlcore *v3;
  void (**v4)(mlcore::SortDescriptor *__hidden);
  mlcore *v5;
  int v6;
  void (**v7)(mlcore::SortDescriptor *__hidden);
  mlcore *v8;
  int v9;
  void (**v10)(mlcore::SortDescriptor *__hidden);
  mlcore *v11;
  int v12;
  void (**v13)(mlcore::SortDescriptor *__hidden);
  mlcore *v14;
  int v15;
  void (**v16)(mlcore::SortDescriptor *__hidden);
  mlcore *v17;
  int v18;
  void (**v19)(mlcore::SortDescriptor *__hidden);
  uint64_t v20;
  int v21;
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  if ((v1 & 1) == 0
  {
    v3 = (mlcore *)operator new();
    v4 = &off_24C337670;
    v5 = (mlcore *)mlcore::ItemPropertyTitleOrder(v3);
    v6 = 0;
    v7 = &off_24C337670;
    v8 = (mlcore *)mlcore::ItemPropertyItemArtistOrder(v5);
    v9 = 0;
    v10 = &off_24C337670;
    v11 = (mlcore *)mlcore::ItemPropertyAlbumOrder(v8);
    v12 = 0;
    v13 = &off_24C337670;
    v14 = (mlcore *)mlcore::ItemPropertyAlbumPersistentID(v11);
    v15 = 0;
    v16 = &off_24C337670;
    v17 = (mlcore *)mlcore::ItemPropertyDiscNumber(v14);
    v18 = 0;
    v19 = &off_24C337670;
    v20 = mlcore::ItemPropertyTrackNumber(v17);
    v21 = 0;
    std::vector<mlcore::SortDescriptor>::vector[abi:ne180100](v3, (uint64_t)&v4, 6uLL);
    mlcore::StandardSongSortDescriptors(void)::sortDescriptors = (uint64_t)v3;
  }
  return mlcore::StandardSongSortDescriptors(void)::sortDescriptors;
}

void sub_20A679B48(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x20BD27AFC](v1, 0x20C40960023A9);
  _Unwind_Resume(a1);
}

uint64_t mlcore::CreateInPredicate<int>(uint64_t *a1, uint64_t a2, int *a3, uint64_t a4)
{
  uint64_t v7;
  _QWORD *v8;
  _OWORD v10[2];
  int v11;

  memset(v10, 0, sizeof(v10));
  v11 = 1065353216;
  if (a4)
  {
    v7 = 4 * a4;
    do
    {
      std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::__emplace_unique_key_args<int,int const&>((uint64_t)v10, *a3, *a3);
      ++a3;
      v7 -= 4;
    }
    while (v7);
  }
  v8 = operator new(0x68uLL);
  v8[1] = 0;
  v8[2] = 0;
  *v8 = &off_24C33C2F0;
  *a1 = mlcore::InPredicate<int>::InPredicate((uint64_t)(v8 + 3), a2, (uint64_t)v10);
  a1[1] = (uint64_t)v8;
  return std::__hash_table<mlcore::ModelPropertyBase *,std::hash<mlcore::ModelPropertyBase *>,std::equal_to<mlcore::ModelPropertyBase *>,std::allocator<mlcore::ModelPropertyBase *>>::~__hash_table((uint64_t)v10);
}

void sub_20A679C24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__shared_weak_count *v9;
  void *v11;

  std::__shared_weak_count::~__shared_weak_count(v9);
  operator delete(v11);
  std::__hash_table<mlcore::ModelPropertyBase *,std::hash<mlcore::ModelPropertyBase *>,std::equal_to<mlcore::ModelPropertyBase *>,std::allocator<mlcore::ModelPropertyBase *>>::~__hash_table((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t mlcore::InPredicate<int>::InPredicate(uint64_t a1, uint64_t a2, int **a3)
{
  _BYTE v6[40];

  std::unordered_set<int>::unordered_set<std::__wrap_iter<int const*>>((uint64_t)v6, *a3, a3[1]);
  mlcore::InPredicate<int>::InPredicate(a1, a2, (uint64_t)v6);
  std::__hash_table<mlcore::ModelPropertyBase *,std::hash<mlcore::ModelPropertyBase *>,std::equal_to<mlcore::ModelPropertyBase *>,std::allocator<mlcore::ModelPropertyBase *>>::~__hash_table((uint64_t)v6);
  return a1;
}

{
  _BYTE v6[40];

  std::unordered_set<int>::unordered_set<std::__wrap_iter<int const*>>((uint64_t)v6, *a3, a3[1]);
  mlcore::InPredicate<int>::InPredicate(a1, a2, (uint64_t)v6);
  std::__hash_table<mlcore::ModelPropertyBase *,std::hash<mlcore::ModelPropertyBase *>,std::equal_to<mlcore::ModelPropertyBase *>,std::allocator<mlcore::ModelPropertyBase *>>::~__hash_table((uint64_t)v6);
  return a1;
}

{
  return __ZN6mlcore11InPredicateIiEC1EPNS_13ModelPropertyIiEERKNSt3__16vectorIiNS5_9allocatorIiEEEE(a1, a2, a3);
}

void sub_20A679CA0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__hash_table<mlcore::ModelPropertyBase *,std::hash<mlcore::ModelPropertyBase *>,std::equal_to<mlcore::ModelPropertyBase *>,std::allocator<mlcore::ModelPropertyBase *>>::~__hash_table((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t mlcore::InPredicate<int>::InPredicate(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v4;
  __int128 v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t **i;
  _DWORD *v13;
  unint64_t v14;
  uint64_t *inserted;
  int v17;
  __int128 v18;

  *(_QWORD *)a1 = &unk_24C336940;
  *(_QWORD *)(a1 + 8) = a2;
  *(_OWORD *)(a1 + 16) = 0u;
  v4 = (_QWORD *)(a1 + 16);
  *(_OWORD *)(a1 + 32) = 0u;
  *(_DWORD *)(a1 + 48) = 1065353216;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  if (*(_QWORD *)(a3 + 24) < 0x1F5uLL)
  {
    if (v4 != (_QWORD *)a3)
    {
      *(_DWORD *)(a1 + 48) = *(_DWORD *)(a3 + 32);
      for (i = *(uint64_t ***)(a3 + 16); i; i = (uint64_t **)*i)
      {
        v13 = operator new(0x18uLL);
        *(_QWORD *)v13 = 0;
        v14 = *((int *)i + 4);
        v13[4] = v14;
        *((_QWORD *)v13 + 1) = v14;
        inserted = std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::__node_insert_multi_prepare((uint64_t)v4, v14, v13 + 4);
        std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__node_insert_multi_perform(v4, v13, inserted);
      }
    }
  }
  else
  {
    mlcore::SharedObject<std::unordered_set<int>,int>::create<std::unordered_set<int> const&>((uint64_t)&v17, a3);
    *(_DWORD *)(a1 + 56) = v17;
    v5 = v18;
    v18 = 0uLL;
    v6 = *(std::__shared_weak_count **)(a1 + 72);
    *(_OWORD *)(a1 + 64) = v5;
    if (v6)
    {
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
    v9 = (std::__shared_weak_count *)*((_QWORD *)&v18 + 1);
    if (*((_QWORD *)&v18 + 1))
    {
      v10 = (unint64_t *)(*((_QWORD *)&v18 + 1) + 8);
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 - 1, v10));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
  }
  return a1;
}

{
  return __ZN6mlcore11InPredicateIiEC2EPNS_13ModelPropertyIiEERKNSt3__113unordered_setIiNS5_4hashIiEENS5_8equal_toIiEENS5_9allocatorIiEEEE(a1, a2, a3);
}

void sub_20A679E18(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100](v2);
  std::__hash_table<mlcore::ModelPropertyBase *,std::hash<mlcore::ModelPropertyBase *>,std::equal_to<mlcore::ModelPropertyBase *>,std::allocator<mlcore::ModelPropertyBase *>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

uint64_t *std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::__node_insert_multi_prepare(uint64_t a1, unint64_t a2, _DWORD *a3)
{
  unint64_t v6;
  float v7;
  float v8;
  _BOOL8 v9;
  unint64_t v10;
  unint64_t v11;
  int8x8_t prime;
  void *v13;
  void *v14;
  uint64_t v15;
  uint64_t **v16;
  unint64_t v17;
  uint8x8_t v18;
  unint64_t v19;
  uint8x8_t v20;
  uint64_t v21;
  uint64_t *i;
  unint64_t v23;
  uint64_t *v24;
  _QWORD *v25;
  uint8x8_t v26;
  unint64_t v27;
  uint64_t *v28;
  int v29;
  uint64_t *result;
  unint64_t v31;
  unint64_t v32;
  _BOOL4 v33;
  int v34;
  void *v35;

  v6 = *(_QWORD *)(a1 + 8);
  v7 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v8 = *(float *)(a1 + 32);
  if (!v6 || (float)(v8 * (float)v6) < v7)
  {
    v9 = 1;
    if (v6 >= 3)
      v9 = (v6 & (v6 - 1)) != 0;
    v10 = v9 | (2 * v6);
    v11 = vcvtps_u32_f32(v7 / v8);
    if (v10 <= v11)
      prime = (int8x8_t)v11;
    else
      prime = (int8x8_t)v10;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
      v6 = *(_QWORD *)(a1 + 8);
    }
    if (*(_QWORD *)&prime > v6)
      goto LABEL_74;
    if (*(_QWORD *)&prime >= v6)
      goto LABEL_43;
    v19 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (v6 < 3 || (v20 = (uint8x8_t)vcnt_s8((int8x8_t)v6), v20.i16[0] = vaddlv_u8(v20), v20.u32[0] > 1uLL))
    {
      v19 = std::__next_prime(v19);
    }
    else
    {
      v21 = 1 << -(char)__clz(v19 - 1);
      if (v19 >= 2)
        v19 = v21;
    }
    if (*(_QWORD *)&prime <= v19)
      prime = (int8x8_t)v19;
    if (*(_QWORD *)&prime >= v6)
    {
      v6 = *(_QWORD *)(a1 + 8);
      goto LABEL_43;
    }
    if (prime)
    {
LABEL_74:
      if (*(_QWORD *)&prime >> 61)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v13 = operator new(8 * *(_QWORD *)&prime);
      v14 = *(void **)a1;
      *(_QWORD *)a1 = v13;
      if (v14)
        operator delete(v14);
      v15 = 0;
      *(int8x8_t *)(a1 + 8) = prime;
      do
        *(_QWORD *)(*(_QWORD *)a1 + 8 * v15++) = 0;
      while (*(_QWORD *)&prime != v15);
      v16 = *(uint64_t ***)(a1 + 16);
      if (v16)
      {
        v17 = (unint64_t)v16[1];
        v18 = (uint8x8_t)vcnt_s8(prime);
        v18.i16[0] = vaddlv_u8(v18);
        if (v18.u32[0] > 1uLL)
        {
          if (v17 >= *(_QWORD *)&prime)
            v17 %= *(_QWORD *)&prime;
        }
        else
        {
          v17 &= *(_QWORD *)&prime - 1;
        }
        *(_QWORD *)(*(_QWORD *)a1 + 8 * v17) = a1 + 16;
        for (i = *v16; *v16; i = *v16)
        {
          v23 = i[1];
          if (v18.u32[0] > 1uLL)
          {
            if (v23 >= *(_QWORD *)&prime)
              v23 %= *(_QWORD *)&prime;
          }
          else
          {
            v23 &= *(_QWORD *)&prime - 1;
          }
          if (v23 == v17)
          {
            v16 = (uint64_t **)i;
          }
          else
          {
            v24 = i;
            if (*(_QWORD *)(*(_QWORD *)a1 + 8 * v23))
            {
              do
              {
                v25 = v24;
                v24 = (uint64_t *)*v24;
              }
              while (v24 && *((_DWORD *)i + 4) == *((_DWORD *)v24 + 4));
              *v16 = v24;
              *v25 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v23);
              **(_QWORD **)(*(_QWORD *)a1 + 8 * v23) = i;
            }
            else
            {
              *(_QWORD *)(*(_QWORD *)a1 + 8 * v23) = v16;
              v16 = (uint64_t **)i;
              v17 = v23;
            }
          }
        }
      }
      v6 = (unint64_t)prime;
    }
    else
    {
      v35 = *(void **)a1;
      *(_QWORD *)a1 = 0;
      if (v35)
        operator delete(v35);
      v6 = 0;
      *(_QWORD *)(a1 + 8) = 0;
    }
  }
LABEL_43:
  v26 = (uint8x8_t)vcnt_s8((int8x8_t)v6);
  v26.i16[0] = vaddlv_u8(v26);
  if (v26.u32[0] > 1uLL)
  {
    v27 = a2;
    if (v6 <= a2)
      v27 = a2 % v6;
  }
  else
  {
    v27 = (v6 - 1) & a2;
  }
  v28 = *(uint64_t **)(*(_QWORD *)a1 + 8 * v27);
  if (!v28)
    return 0;
  v29 = 0;
  do
  {
    result = v28;
    v28 = (uint64_t *)*v28;
    if (!v28)
      break;
    v31 = v28[1];
    if (v26.u32[0] > 1uLL)
    {
      v32 = v28[1];
      if (v31 >= v6)
        v32 = v31 % v6;
    }
    else
    {
      v32 = v31 & (v6 - 1);
    }
    if (v32 != v27)
      break;
    v33 = v31 == a2 && *((_DWORD *)v28 + 4) == *a3;
    v34 = v29 & !v33;
    v29 |= v33;
  }
  while (v34 != 1);
  return result;
}

_QWORD *std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__node_insert_multi_perform(_QWORD *result, _QWORD *a2, _QWORD *a3)
{
  int8x8_t v3;
  unint64_t v4;
  uint8x8_t v5;
  unint64_t v6;

  v3 = (int8x8_t)result[1];
  v4 = a2[1];
  v5 = (uint8x8_t)vcnt_s8(v3);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    if (v4 >= *(_QWORD *)&v3)
      v4 %= *(_QWORD *)&v3;
  }
  else
  {
    v4 &= *(_QWORD *)&v3 - 1;
  }
  if (!a3)
  {
    *a2 = result[2];
    result[2] = a2;
    *(_QWORD *)(*result + 8 * v4) = result + 2;
    if (!*a2)
      goto LABEL_19;
    v6 = *(_QWORD *)(*a2 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v6 >= *(_QWORD *)&v3)
        v6 %= *(_QWORD *)&v3;
    }
    else
    {
      v6 &= *(_QWORD *)&v3 - 1;
    }
LABEL_18:
    *(_QWORD *)(*result + 8 * v6) = a2;
    goto LABEL_19;
  }
  *a2 = *a3;
  *a3 = a2;
  if (*a2)
  {
    v6 = *(_QWORD *)(*a2 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v6 >= *(_QWORD *)&v3)
        v6 %= *(_QWORD *)&v3;
    }
    else
    {
      v6 &= *(_QWORD *)&v3 - 1;
    }
    if (v6 != v4)
      goto LABEL_18;
  }
LABEL_19:
  ++result[3];
  return result;
}

uint64_t std::unordered_set<int>::unordered_set<std::__wrap_iter<int const*>>(uint64_t a1, int *a2, int *a3)
{
  int *v5;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a2 != a3)
  {
    v5 = a2;
    do
    {
      std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::__emplace_unique_key_args<int,int const&>(a1, *v5, *v5);
      ++v5;
    }
    while (v5 != a3);
  }
  return a1;
}

void sub_20A67A2E0(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<mlcore::ModelPropertyBase *,std::hash<mlcore::ModelPropertyBase *>,std::equal_to<mlcore::ModelPropertyBase *>,std::allocator<mlcore::ModelPropertyBase *>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

void std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::__emplace_unique_key_args<int,int const&>(uint64_t a1, int a2, int a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  uint64_t **v9;
  uint64_t *i;
  unint64_t v11;
  _QWORD *v12;
  float v13;
  float v14;
  _BOOL8 v15;
  unint64_t v16;
  unint64_t v17;
  size_t v18;
  uint64_t v19;
  _QWORD *v20;
  unint64_t v21;

  v6 = a2;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = a2;
      if (v7 <= a2)
        v3 = a2 % v7;
    }
    else
    {
      v3 = (v7 - 1) & a2;
    }
    v9 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      for (i = *v9; i; i = (uint64_t *)*i)
      {
        v11 = i[1];
        if (v11 == a2)
        {
          if (*((_DWORD *)i + 4) == a2)
            return;
        }
        else
        {
          if (v8.u32[0] > 1uLL)
          {
            if (v11 >= v7)
              v11 %= v7;
          }
          else
          {
            v11 &= v7 - 1;
          }
          if (v11 != v3)
            break;
        }
      }
    }
  }
  v12 = operator new(0x18uLL);
  *v12 = 0;
  v12[1] = v6;
  *((_DWORD *)v12 + 4) = a3;
  v13 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v14 = *(float *)(a1 + 32);
  if (!v7 || (float)(v14 * (float)v7) < v13)
  {
    v15 = 1;
    if (v7 >= 3)
      v15 = (v7 & (v7 - 1)) != 0;
    v16 = v15 | (2 * v7);
    v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17)
      v18 = v17;
    else
      v18 = v16;
    std::__hash_table<std::__hash_value_type<mlcore::ModelProperty<std::string> *,std::string>,std::__unordered_map_hasher<mlcore::ModelProperty<std::string> *,std::__hash_value_type<mlcore::ModelProperty<std::string> *,std::string>,std::hash<mlcore::ModelProperty<std::string> *>,std::equal_to<mlcore::ModelProperty<std::string> *>,true>,std::__unordered_map_equal<mlcore::ModelProperty<std::string> *,std::__hash_value_type<mlcore::ModelProperty<std::string> *,std::string>,std::equal_to<mlcore::ModelProperty<std::string> *>,std::hash<mlcore::ModelProperty<std::string> *>,true>,std::allocator<std::__hash_value_type<mlcore::ModelProperty<std::string> *,std::string>>>::__rehash<true>(a1, v18);
    v7 = *(_QWORD *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6)
        v3 = v6 % v7;
      else
        v3 = v6;
    }
    else
    {
      v3 = (v7 - 1) & v6;
    }
  }
  v19 = *(_QWORD *)a1;
  v20 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v20)
  {
    *v12 = *v20;
LABEL_38:
    *v20 = v12;
    goto LABEL_39;
  }
  *v12 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v12;
  *(_QWORD *)(v19 + 8 * v3) = a1 + 16;
  if (*v12)
  {
    v21 = *(_QWORD *)(*v12 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v21 >= v7)
        v21 %= v7;
    }
    else
    {
      v21 &= v7 - 1;
    }
    v20 = (_QWORD *)(*(_QWORD *)a1 + 8 * v21);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
}

void sub_20A67A4E4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *mlcore::EntityQuery::EntityQuery(_QWORD *a1, uint64_t a2, uint64_t *a3)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v10[2];

  v4 = (std::__shared_weak_count *)a3[1];
  v10[0] = *a3;
  v10[1] = (uint64_t)v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  mlcore::PropertiesQuery::PropertiesQuery((uint64_t)a1, a2, v10);
  if (v4)
  {
    v7 = (unint64_t *)&v4->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  *a1 = &off_24C3367A0;
  a1[14] = 0;
  a1[15] = 0;
  a1[13] = 0;
  return a1;
}

void sub_20A67A594(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t mlcore::ItemPropertyTrackNumber(mlcore *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&mlcore::ItemPropertyTrackNumber(void)::once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&mlcore::ItemPropertyTrackNumber(void)::once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyTrackNumber(void)::$_0 &&>>);
  }
  return mlcore::ItemPropertyTrackNumber(void)::property;
}

uint64_t mlcore::PlaylistPropertyIsEditable(mlcore *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&mlcore::PlaylistPropertyIsEditable(void)::once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&mlcore::PlaylistPropertyIsEditable(void)::once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::PlaylistPropertyIsEditable(void)::$_0 &&>>);
  }
  return mlcore::PlaylistPropertyIsEditable(void)::property;
}

_QWORD *mlcore::InPredicate<long long>::~InPredicate(_QWORD *a1)
{
  *a1 = &unk_24C336998;
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 8));
  std::__hash_table<mlcore::ModelPropertyBase *,std::hash<mlcore::ModelPropertyBase *>,std::equal_to<mlcore::ModelPropertyBase *>,std::allocator<mlcore::ModelPropertyBase *>>::~__hash_table((uint64_t)(a1 + 2));
  return a1;
}

uint64_t mlcore::InPredicate<long long>::InPredicate(uint64_t a1, uint64_t a2, unint64_t **a3)
{
  _BYTE v6[40];

  std::unordered_set<long long>::unordered_set<std::__wrap_iter<long long const*>>((uint64_t)v6, *a3, a3[1]);
  mlcore::InPredicate<long long>::InPredicate(a1, a2, (uint64_t)v6);
  std::__hash_table<mlcore::ModelPropertyBase *,std::hash<mlcore::ModelPropertyBase *>,std::equal_to<mlcore::ModelPropertyBase *>,std::allocator<mlcore::ModelPropertyBase *>>::~__hash_table((uint64_t)v6);
  return a1;
}

{
  _BYTE v6[40];

  std::unordered_set<long long>::unordered_set<std::__wrap_iter<long long const*>>((uint64_t)v6, *a3, a3[1]);
  mlcore::InPredicate<long long>::InPredicate(a1, a2, (uint64_t)v6);
  std::__hash_table<mlcore::ModelPropertyBase *,std::hash<mlcore::ModelPropertyBase *>,std::equal_to<mlcore::ModelPropertyBase *>,std::allocator<mlcore::ModelPropertyBase *>>::~__hash_table((uint64_t)v6);
  return a1;
}

void sub_20A67A6EC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__hash_table<mlcore::ModelPropertyBase *,std::hash<mlcore::ModelPropertyBase *>,std::equal_to<mlcore::ModelPropertyBase *>,std::allocator<mlcore::ModelPropertyBase *>>::~__hash_table((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::unordered_set<long long>::unordered_set<std::__wrap_iter<long long const*>>(uint64_t a1, unint64_t *a2, unint64_t *a3)
{
  unint64_t *v5;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a2 != a3)
  {
    v5 = a2;
    do
    {
      std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::__emplace_unique_key_args<long long,long long const&>(a1, *v5, *v5);
      ++v5;
    }
    while (v5 != a3);
  }
  return a1;
}

void sub_20A67A764(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<mlcore::ModelPropertyBase *,std::hash<mlcore::ModelPropertyBase *>,std::equal_to<mlcore::ModelPropertyBase *>,std::allocator<mlcore::ModelPropertyBase *>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

void std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::__emplace_unique_key_args<long long,long long const&>(uint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v7;
  uint8x8_t v8;
  _QWORD *v9;
  _QWORD *i;
  unint64_t v11;
  _QWORD *v12;
  float v13;
  float v14;
  _BOOL8 v15;
  unint64_t v16;
  unint64_t v17;
  size_t v18;
  uint64_t v19;
  _QWORD *v20;
  unint64_t v21;

  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = a2;
      if (v7 <= a2)
        v3 = a2 % v7;
    }
    else
    {
      v3 = (v7 - 1) & a2;
    }
    v9 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      for (i = (_QWORD *)*v9; i; i = (_QWORD *)*i)
      {
        v11 = i[1];
        if (v11 == a2)
        {
          if (i[2] == a2)
            return;
        }
        else
        {
          if (v8.u32[0] > 1uLL)
          {
            if (v11 >= v7)
              v11 %= v7;
          }
          else
          {
            v11 &= v7 - 1;
          }
          if (v11 != v3)
            break;
        }
      }
    }
  }
  v12 = operator new(0x18uLL);
  *v12 = 0;
  v12[1] = a2;
  v12[2] = a3;
  v13 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v14 = *(float *)(a1 + 32);
  if (!v7 || (float)(v14 * (float)v7) < v13)
  {
    v15 = 1;
    if (v7 >= 3)
      v15 = (v7 & (v7 - 1)) != 0;
    v16 = v15 | (2 * v7);
    v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17)
      v18 = v17;
    else
      v18 = v16;
    std::__hash_table<std::__hash_value_type<mlcore::ModelProperty<std::string> *,std::string>,std::__unordered_map_hasher<mlcore::ModelProperty<std::string> *,std::__hash_value_type<mlcore::ModelProperty<std::string> *,std::string>,std::hash<mlcore::ModelProperty<std::string> *>,std::equal_to<mlcore::ModelProperty<std::string> *>,true>,std::__unordered_map_equal<mlcore::ModelProperty<std::string> *,std::__hash_value_type<mlcore::ModelProperty<std::string> *,std::string>,std::equal_to<mlcore::ModelProperty<std::string> *>,std::hash<mlcore::ModelProperty<std::string> *>,true>,std::allocator<std::__hash_value_type<mlcore::ModelProperty<std::string> *,std::string>>>::__rehash<true>(a1, v18);
    v7 = *(_QWORD *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= a2)
        v3 = a2 % v7;
      else
        v3 = a2;
    }
    else
    {
      v3 = (v7 - 1) & a2;
    }
  }
  v19 = *(_QWORD *)a1;
  v20 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v20)
  {
    *v12 = *v20;
LABEL_38:
    *v20 = v12;
    goto LABEL_39;
  }
  *v12 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v12;
  *(_QWORD *)(v19 + 8 * v3) = a1 + 16;
  if (*v12)
  {
    v21 = *(_QWORD *)(*v12 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v21 >= v7)
        v21 %= v7;
    }
    else
    {
      v21 &= v7 - 1;
    }
    v20 = (_QWORD *)(*(_QWORD *)a1 + 8 * v21);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
}

void sub_20A67A968(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t mlcore::InPredicate<long long>::InPredicate(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v4;
  __int128 v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  _QWORD *i;
  _QWORD *v13;
  unint64_t v14;
  _QWORD *inserted;
  int v17;
  __int128 v18;

  *(_QWORD *)a1 = &unk_24C336998;
  *(_QWORD *)(a1 + 8) = a2;
  *(_OWORD *)(a1 + 16) = 0u;
  v4 = (_QWORD *)(a1 + 16);
  *(_OWORD *)(a1 + 32) = 0u;
  *(_DWORD *)(a1 + 48) = 1065353216;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  if (*(_QWORD *)(a3 + 24) < 0x1F5uLL)
  {
    if (v4 != (_QWORD *)a3)
    {
      *(_DWORD *)(a1 + 48) = *(_DWORD *)(a3 + 32);
      for (i = *(_QWORD **)(a3 + 16); i; i = (_QWORD *)*i)
      {
        v13 = operator new(0x18uLL);
        *v13 = 0;
        v14 = i[2];
        v13[2] = v14;
        v13[1] = v14;
        inserted = std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__node_insert_multi_prepare((uint64_t)v4, v14, v13 + 2);
        std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__node_insert_multi_perform(v4, v13, inserted);
      }
    }
  }
  else
  {
    mlcore::SharedObject<std::unordered_set<long long>,int>::create<std::unordered_set<long long> const&>((uint64_t)&v17, a3);
    *(_DWORD *)(a1 + 56) = v17;
    v5 = v18;
    v18 = 0uLL;
    v6 = *(std::__shared_weak_count **)(a1 + 72);
    *(_OWORD *)(a1 + 64) = v5;
    if (v6)
    {
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
    v9 = (std::__shared_weak_count *)*((_QWORD *)&v18 + 1);
    if (*((_QWORD *)&v18 + 1))
    {
      v10 = (unint64_t *)(*((_QWORD *)&v18 + 1) + 8);
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 - 1, v10));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
  }
  return a1;
}

{
  return __ZN6mlcore11InPredicateIxEC2EPNS_13ModelPropertyIxEERKNSt3__113unordered_setIxNS5_4hashIxEENS5_8equal_toIxEENS5_9allocatorIxEEEE(a1, a2, a3);
}

void sub_20A67AAE0(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100](v2);
  std::__hash_table<mlcore::ModelPropertyBase *,std::hash<mlcore::ModelPropertyBase *>,std::equal_to<mlcore::ModelPropertyBase *>,std::allocator<mlcore::ModelPropertyBase *>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__node_insert_multi_prepare(uint64_t a1, unint64_t a2, _QWORD *a3)
{
  unint64_t v6;
  float v7;
  float v8;
  _BOOL8 v9;
  unint64_t v10;
  unint64_t v11;
  int8x8_t prime;
  void *v13;
  void *v14;
  uint64_t v15;
  _QWORD *v16;
  unint64_t v17;
  uint8x8_t v18;
  unint64_t v19;
  uint8x8_t v20;
  uint64_t v21;
  _QWORD *i;
  unint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  uint8x8_t v26;
  unint64_t v27;
  _QWORD *v28;
  int v29;
  _QWORD *result;
  unint64_t v31;
  unint64_t v32;
  _BOOL4 v33;
  int v34;
  void *v35;

  v6 = *(_QWORD *)(a1 + 8);
  v7 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v8 = *(float *)(a1 + 32);
  if (!v6 || (float)(v8 * (float)v6) < v7)
  {
    v9 = 1;
    if (v6 >= 3)
      v9 = (v6 & (v6 - 1)) != 0;
    v10 = v9 | (2 * v6);
    v11 = vcvtps_u32_f32(v7 / v8);
    if (v10 <= v11)
      prime = (int8x8_t)v11;
    else
      prime = (int8x8_t)v10;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
      v6 = *(_QWORD *)(a1 + 8);
    }
    if (*(_QWORD *)&prime > v6)
      goto LABEL_74;
    if (*(_QWORD *)&prime >= v6)
      goto LABEL_43;
    v19 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (v6 < 3 || (v20 = (uint8x8_t)vcnt_s8((int8x8_t)v6), v20.i16[0] = vaddlv_u8(v20), v20.u32[0] > 1uLL))
    {
      v19 = std::__next_prime(v19);
    }
    else
    {
      v21 = 1 << -(char)__clz(v19 - 1);
      if (v19 >= 2)
        v19 = v21;
    }
    if (*(_QWORD *)&prime <= v19)
      prime = (int8x8_t)v19;
    if (*(_QWORD *)&prime >= v6)
    {
      v6 = *(_QWORD *)(a1 + 8);
      goto LABEL_43;
    }
    if (prime)
    {
LABEL_74:
      if (*(_QWORD *)&prime >> 61)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v13 = operator new(8 * *(_QWORD *)&prime);
      v14 = *(void **)a1;
      *(_QWORD *)a1 = v13;
      if (v14)
        operator delete(v14);
      v15 = 0;
      *(int8x8_t *)(a1 + 8) = prime;
      do
        *(_QWORD *)(*(_QWORD *)a1 + 8 * v15++) = 0;
      while (*(_QWORD *)&prime != v15);
      v16 = *(_QWORD **)(a1 + 16);
      if (v16)
      {
        v17 = v16[1];
        v18 = (uint8x8_t)vcnt_s8(prime);
        v18.i16[0] = vaddlv_u8(v18);
        if (v18.u32[0] > 1uLL)
        {
          if (v17 >= *(_QWORD *)&prime)
            v17 %= *(_QWORD *)&prime;
        }
        else
        {
          v17 &= *(_QWORD *)&prime - 1;
        }
        *(_QWORD *)(*(_QWORD *)a1 + 8 * v17) = a1 + 16;
        for (i = (_QWORD *)*v16; *v16; i = (_QWORD *)*v16)
        {
          v23 = i[1];
          if (v18.u32[0] > 1uLL)
          {
            if (v23 >= *(_QWORD *)&prime)
              v23 %= *(_QWORD *)&prime;
          }
          else
          {
            v23 &= *(_QWORD *)&prime - 1;
          }
          if (v23 == v17)
          {
            v16 = i;
          }
          else
          {
            v24 = i;
            if (*(_QWORD *)(*(_QWORD *)a1 + 8 * v23))
            {
              do
              {
                v25 = v24;
                v24 = (_QWORD *)*v24;
              }
              while (v24 && i[2] == v24[2]);
              *v16 = v24;
              *v25 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v23);
              **(_QWORD **)(*(_QWORD *)a1 + 8 * v23) = i;
            }
            else
            {
              *(_QWORD *)(*(_QWORD *)a1 + 8 * v23) = v16;
              v16 = i;
              v17 = v23;
            }
          }
        }
      }
      v6 = (unint64_t)prime;
    }
    else
    {
      v35 = *(void **)a1;
      *(_QWORD *)a1 = 0;
      if (v35)
        operator delete(v35);
      v6 = 0;
      *(_QWORD *)(a1 + 8) = 0;
    }
  }
LABEL_43:
  v26 = (uint8x8_t)vcnt_s8((int8x8_t)v6);
  v26.i16[0] = vaddlv_u8(v26);
  if (v26.u32[0] > 1uLL)
  {
    v27 = a2;
    if (v6 <= a2)
      v27 = a2 % v6;
  }
  else
  {
    v27 = (v6 - 1) & a2;
  }
  v28 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v27);
  if (!v28)
    return 0;
  v29 = 0;
  do
  {
    result = v28;
    v28 = (_QWORD *)*v28;
    if (!v28)
      break;
    v31 = v28[1];
    if (v26.u32[0] > 1uLL)
    {
      v32 = v28[1];
      if (v31 >= v6)
        v32 = v31 % v6;
    }
    else
    {
      v32 = v31 & (v6 - 1);
    }
    if (v32 != v27)
      break;
    v33 = v31 == a2 && v28[2] == *a3;
    v34 = v29 & !v33;
    v29 |= v33;
  }
  while (v34 != 1);
  return result;
}

uint64_t mlcore::ItemArtistPropertyFetchableArtworkToken(mlcore *this)
{
  mlcore *v1;
  mlcore *v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  char *v6;
  __int128 *v7;
  char v8;
  uint64_t v9;
  char v10;
  __int128 v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  uint64_t i;
  __int128 v20;
  __int128 v21;
  __int128 *v22;
  __int128 v23;
  uint64_t v24;
  std::__shared_weak_count *v25;
  __int128 **v26;
  char v27;
  _OWORD v28[2];
  uint64_t v29;

  v29 = *MEMORY[0x24BDAC8D0];
  v1 = (mlcore *)mlcore::ItemArtistPropertyPersistentID(this);
  v2 = (mlcore *)mlcore::BestArtworkTokenPropertyFetchableArtworkToken(v1);
  v3 = mlcore::BestArtworkTokenPropertyEntityType(v2);
  v4 = (char *)operator new(0x48uLL);
  *(_OWORD *)(v4 + 8) = 0u;
  *(_QWORD *)v4 = &off_24C33CE50;
  *((_QWORD *)v4 + 4) = v3;
  *((_QWORD *)v4 + 5) = 0;
  *((_DWORD *)v4 + 12) = 2;
  *(_OWORD *)(v4 + 56) = 0u;
  *((_QWORD *)&v21 + 1) = v4;
  *((_QWORD *)v4 + 3) = &unk_24C339C50;
  *(_QWORD *)&v21 = v4 + 24;
  v28[0] = v21;
  v5 = mlcore::BestArtworkTokenPropertyArtworkType((mlcore *)(v4 + 24));
  v6 = (char *)operator new(0x48uLL);
  *(_OWORD *)(v6 + 8) = 0u;
  *(_QWORD *)v6 = &off_24C33CE50;
  *((_QWORD *)v6 + 4) = v5;
  *((_QWORD *)v6 + 5) = 0;
  *((_QWORD *)v6 + 3) = &unk_24C339C50;
  *((_DWORD *)v6 + 12) = 4;
  *(_OWORD *)(v6 + 56) = 0u;
  *(_QWORD *)&v20 = v6 + 24;
  *((_QWORD *)&v20 + 1) = v6;
  v28[1] = v20;
  v22 = 0;
  v23 = 0u;
  v26 = &v22;
  v27 = 0;
  v7 = (__int128 *)operator new(0x20uLL);
  v8 = 0;
  v9 = 0;
  v22 = v7;
  *(_QWORD *)&v23 = v7;
  *((_QWORD *)&v23 + 1) = v7 + 2;
  do
  {
    v10 = v8;
    v11 = v28[v9];
    *v7 = v11;
    if (*((_QWORD *)&v11 + 1))
    {
      v12 = (unint64_t *)(*((_QWORD *)&v11 + 1) + 8);
      do
        v13 = __ldxr(v12);
      while (__stxr(v13 + 1, v12));
    }
    ++v7;
    v8 = 1;
    v9 = 1;
  }
  while ((v10 & 1) == 0);
  *(_QWORD *)&v23 = v7;
  mlcore::CreateAndPredicate(&v22, &v24);
  v14 = mlcore::GetForeignProperty<std::string>((uint64_t)v1, (uint64_t)v2, &v24);
  v15 = v25;
  if (v25)
  {
    p_shared_owners = (unint64_t *)&v25->__shared_owners_;
    do
      v17 = __ldaxr(p_shared_owners);
    while (__stlxr(v17 - 1, p_shared_owners));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  v26 = &v22;
  std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v26);
  for (i = 1; i != -1; --i)
    std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)&v28[i]);
  return v14;
}

void sub_20A67B0D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, void **a19, uint64_t a20,char a21)
{
  uint64_t i;

  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  a19 = (void **)&a14;
  std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__destroy_vector::operator()[abi:ne180100](&a19);
  for (i = 16; i != -16; i -= 16)
    std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)(&a21 + i));
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

uint64_t mlcore::ItemArtistPropertyAvailableArtworkToken(mlcore *this)
{
  mlcore *v1;
  mlcore *v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  char *v6;
  __int128 *v7;
  char v8;
  uint64_t v9;
  char v10;
  __int128 v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  uint64_t i;
  __int128 v20;
  __int128 v21;
  __int128 *v22;
  __int128 v23;
  uint64_t v24;
  std::__shared_weak_count *v25;
  __int128 **v26;
  char v27;
  _OWORD v28[2];
  uint64_t v29;

  v29 = *MEMORY[0x24BDAC8D0];
  v1 = (mlcore *)mlcore::ItemArtistPropertyPersistentID(this);
  v2 = (mlcore *)mlcore::BestArtworkTokenPropertyAvailableArtworkToken(v1);
  v3 = mlcore::BestArtworkTokenPropertyEntityType(v2);
  v4 = (char *)operator new(0x48uLL);
  *(_OWORD *)(v4 + 8) = 0u;
  *(_QWORD *)v4 = &off_24C33CE50;
  *((_QWORD *)v4 + 4) = v3;
  *((_QWORD *)v4 + 5) = 0;
  *((_DWORD *)v4 + 12) = 2;
  *(_OWORD *)(v4 + 56) = 0u;
  *((_QWORD *)&v21 + 1) = v4;
  *((_QWORD *)v4 + 3) = &unk_24C339C50;
  *(_QWORD *)&v21 = v4 + 24;
  v28[0] = v21;
  v5 = mlcore::BestArtworkTokenPropertyArtworkType((mlcore *)(v4 + 24));
  v6 = (char *)operator new(0x48uLL);
  *(_OWORD *)(v6 + 8) = 0u;
  *(_QWORD *)v6 = &off_24C33CE50;
  *((_QWORD *)v6 + 4) = v5;
  *((_QWORD *)v6 + 5) = 0;
  *((_QWORD *)v6 + 3) = &unk_24C339C50;
  *((_DWORD *)v6 + 12) = 4;
  *(_OWORD *)(v6 + 56) = 0u;
  *(_QWORD *)&v20 = v6 + 24;
  *((_QWORD *)&v20 + 1) = v6;
  v28[1] = v20;
  v22 = 0;
  v23 = 0u;
  v26 = &v22;
  v27 = 0;
  v7 = (__int128 *)operator new(0x20uLL);
  v8 = 0;
  v9 = 0;
  v22 = v7;
  *(_QWORD *)&v23 = v7;
  *((_QWORD *)&v23 + 1) = v7 + 2;
  do
  {
    v10 = v8;
    v11 = v28[v9];
    *v7 = v11;
    if (*((_QWORD *)&v11 + 1))
    {
      v12 = (unint64_t *)(*((_QWORD *)&v11 + 1) + 8);
      do
        v13 = __ldxr(v12);
      while (__stxr(v13 + 1, v12));
    }
    ++v7;
    v8 = 1;
    v9 = 1;
  }
  while ((v10 & 1) == 0);
  *(_QWORD *)&v23 = v7;
  mlcore::CreateAndPredicate(&v22, &v24);
  v14 = mlcore::GetForeignProperty<std::string>((uint64_t)v1, (uint64_t)v2, &v24);
  v15 = v25;
  if (v25)
  {
    p_shared_owners = (unint64_t *)&v25->__shared_owners_;
    do
      v17 = __ldaxr(p_shared_owners);
    while (__stlxr(v17 - 1, p_shared_owners));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  v26 = &v22;
  std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v26);
  for (i = 1; i != -1; --i)
    std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)&v28[i]);
  return v14;
}

void sub_20A67B3C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, void **a19, uint64_t a20,char a21)
{
  uint64_t i;

  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  a19 = (void **)&a14;
  std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__destroy_vector::operator()[abi:ne180100](&a19);
  for (i = 16; i != -16; i -= 16)
    std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)(&a21 + i));
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

uint64_t mlcore::ItemArtistPropertyOrder(mlcore *this)
{
  mlcore *v1;
  uint64_t v2;
  uint64_t v4[2];

  v1 = (mlcore *)mlcore::ItemArtistPropertyRepresentativeItemPersistentID(this);
  v2 = mlcore::ItemPropertyArtistOrder(v1);
  v4[0] = 0;
  v4[1] = 0;
  return mlcore::GetForeignProperty<long long>((uint64_t)v1, v2, v4);
}

void sub_20A67B47C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t mlcore::ItemPropertyArtistOrder(mlcore *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&mlcore::ItemPropertyArtistOrder(void)::once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&mlcore::ItemPropertyArtistOrder(void)::once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyArtistOrder(void)::$_0 &&>>);
  }
  return mlcore::ItemPropertyArtistOrder(void)::property;
}

void mlcore::EntityQuery::tvShowsQuery(mlcore *a1@<X0>, char **a2@<X8>)
{
  uint64_t v4;
  char *v5;
  unint64_t *v6;
  unint64_t *v7;
  unint64_t *v8;
  unint64_t v9;
  unint64_t v10;
  __int128 *v11;
  char v12;
  uint64_t v13;
  char v14;
  __int128 v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t i;
  unint64_t v19;
  uint64_t v20;
  char *v21;
  mlcore *v22;
  mlcore *v23;
  uint64_t v24;
  void **v25;
  uint64_t v26;
  void **v27;
  void (**v28)(mlcore::SortDescriptor *__hidden);
  std::__shared_weak_count *v29;
  uint64_t *p_shared_owners;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  __int128 **v35;
  void **v36;
  void **v37;
  __int128 *v38;
  __int128 *v39;
  __int128 *v40;
  char *v41;
  std::__shared_weak_count *v42;
  char *v43;
  std::__shared_weak_count *v44;
  void ***v45;
  char v46;
  void (**v47)(mlcore::SortDescriptor *__hidden);
  mlcore *v48;
  char *v49;
  void (**v50)(mlcore::SortDescriptor *__hidden);
  uint64_t v51;
  int v52;
  uint64_t v53;

  v53 = *MEMORY[0x24BDAC8D0];
  v4 = mlcore::TVShowPropertySeriesOrder(a1);
  v5 = (char *)operator new(0x48uLL);
  *(_OWORD *)(v5 + 8) = 0u;
  v6 = (unint64_t *)(v5 + 8);
  *(_QWORD *)v5 = &off_24C33CE88;
  *((_QWORD *)v5 + 3) = &unk_24C339CA8;
  *((_QWORD *)v5 + 4) = v4;
  *((_QWORD *)v5 + 5) = 0x100000000;
  *((_QWORD *)v5 + 6) = 0;
  *(_OWORD *)(v5 + 56) = 0u;
  v43 = v5 + 24;
  v44 = (std::__shared_weak_count *)v5;
  if (*(_QWORD *)a1)
  {
    v7 = (unint64_t *)*((_QWORD *)a1 + 1);
    v47 = *(void (***)(mlcore::SortDescriptor *__hidden))a1;
    v48 = (mlcore *)v7;
    if (v7)
    {
      v8 = v7 + 1;
      do
        v9 = __ldxr(v8);
      while (__stxr(v9 + 1, v8));
    }
    v49 = v5 + 24;
    v50 = (void (**)(mlcore::SortDescriptor *__hidden))v5;
    do
      v10 = __ldxr(v6);
    while (__stxr(v10 + 1, v6));
    v38 = 0;
    v39 = 0;
    v40 = 0;
    v35 = &v38;
    LOBYTE(v36) = 0;
    v11 = (__int128 *)operator new(0x20uLL);
    v12 = 0;
    v13 = 0;
    v38 = v11;
    v39 = v11;
    v40 = v11 + 2;
    do
    {
      v14 = v12;
      v15 = *(_OWORD *)&(&v47)[2 * v13];
      *v11 = v15;
      if (*((_QWORD *)&v15 + 1))
      {
        v16 = (unint64_t *)(*((_QWORD *)&v15 + 1) + 8);
        do
          v17 = __ldxr(v16);
        while (__stxr(v17 + 1, v16));
      }
      ++v11;
      v12 = 1;
      v13 = 1;
    }
    while ((v14 & 1) == 0);
    v39 = v11;
    mlcore::CreateAndPredicate(&v38, &v41);
    v35 = &v38;
    std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v35);
    for (i = 2; i != -2; i -= 2)
      std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)&(&v47)[i]);
  }
  else
  {
    v41 = v5 + 24;
    v42 = (std::__shared_weak_count *)v5;
    do
      v19 = __ldxr(v6);
    while (__stxr(v19 + 1, v6));
  }
  v20 = mlcore::TypedEntityClass<mlcore::TVShow>::sharedPointer();
  std::allocate_shared[abi:ne180100]<mlcore::EntityQuery,std::allocator<mlcore::EntityQuery>,mlcore::EntityClass *,std::shared_ptr<mlcore::Predicate> &,void>(a2, v20, (uint64_t)v41, v42);
  v21 = *a2;
  v23 = (mlcore *)mlcore::TVShowPropertySeriesOrder(v22);
  v47 = &off_24C337670;
  v48 = v23;
  LODWORD(v49) = 0;
  v24 = mlcore::ItemArtistPropertyPersistentID(v23);
  v50 = &off_24C337670;
  v51 = v24;
  v52 = 0;
  v36 = 0;
  v37 = 0;
  v35 = 0;
  v45 = (void ***)&v35;
  v46 = 0;
  v25 = (void **)operator new(0x30uLL);
  v26 = 0;
  v35 = (__int128 **)v25;
  v37 = v25 + 6;
  do
  {
    v27 = &v25[v26];
    v28 = (&v47)[v26 + 1];
    *v27 = &off_24C337670;
    v27[1] = v28;
    *((_DWORD *)v27 + 4) = (&v49)[v26];
    v26 += 3;
  }
  while (v26 != 6);
  v36 = v25 + 6;
  mlcore::PropertiesQuery::setSortDescriptors(v21, (char *)&v35);
  v45 = (void ***)&v35;
  std::vector<mlcore::SortDescriptor>::__destroy_vector::operator()[abi:ne180100]((void ***)&v45);
  v29 = v42;
  if (v42)
  {
    p_shared_owners = &v42->__shared_owners_;
    do
      v31 = __ldaxr((unint64_t *)p_shared_owners);
    while (__stlxr(v31 - 1, (unint64_t *)p_shared_owners));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  v32 = v44;
  if (v44)
  {
    v33 = (unint64_t *)&v44->__shared_owners_;
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }
}

void sub_20A67B7BC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t i;
  void **v5;
  va_list va;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v5 = va_arg(va1, void **);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  for (i = 16; i != -16; i -= 16)
    std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100](v2 - 88 + i);
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t mlcore::TypedEntityClass<mlcore::TVShow>::sharedPointer()
{
  unint64_t v0;
  char v2;
  char **v3;
  char *v4;

  v0 = atomic_load(&mlcore::TypedEntityClass<mlcore::TVShow>::sharedPointer(void)::__once);
  if (v0 != -1)
  {
    v4 = &v2;
    v3 = &v4;
    std::__call_once(&mlcore::TypedEntityClass<mlcore::TVShow>::sharedPointer(void)::__once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::TypedEntityClass<mlcore::TVShow>::sharedPointer(void)::{lambda(void)#1} &&>>);
  }
  return mlcore::TypedEntityClass<mlcore::TVShow>::sharedPointer(void)::__sharedPointer;
}

uint64_t mlcore::ItemArtistPropertyPersistentID(mlcore *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&mlcore::ItemArtistPropertyPersistentID(void)::once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&mlcore::ItemArtistPropertyPersistentID(void)::once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemArtistPropertyPersistentID(void)::$_0 &&>>);
  }
  return mlcore::ItemArtistPropertyPersistentID(void)::property;
}

uint64_t mlcore::TVShowPropertySeriesOrder(mlcore *this)
{
  mlcore *v1;
  uint64_t v2;
  uint64_t v4[2];

  v1 = (mlcore *)mlcore::ItemArtistPropertyRepresentativeItemPersistentID(this);
  v2 = mlcore::ItemPropertySeriesNameOrder(v1);
  v4[0] = 0;
  v4[1] = 0;
  return mlcore::GetForeignProperty<long long>((uint64_t)v1, v2, v4);
}

void sub_20A67B938(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t mlcore::ItemArtistPropertyRepresentativeItemPersistentID(mlcore *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&mlcore::ItemArtistPropertyRepresentativeItemPersistentID(void)::once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&mlcore::ItemArtistPropertyRepresentativeItemPersistentID(void)::once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemArtistPropertyRepresentativeItemPersistentID(void)::$_0 &&>>);
  }
  return mlcore::ItemArtistPropertyRepresentativeItemPersistentID(void)::property;
}

uint64_t mlcore::ItemPropertySeriesNameOrder(mlcore *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&mlcore::ItemPropertySeriesNameOrder(void)::once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&mlcore::ItemPropertySeriesNameOrder(void)::once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertySeriesNameOrder(void)::$_0 &&>>);
  }
  return mlcore::ItemPropertySeriesNameOrder(void)::property;
}

void mlcore::MultiEntityQuery::_perform(uint64_t a1, std::__shared_weak_count **a2, uint64_t a3)
{
  mlcore::EntityClass **v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  mlcore::EntityClass *v9;
  std::__shared_weak_count *v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  mlcore::EntityClass *v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  sqlite3_int64 v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  uint64_t *v28;
  unint64_t v29;
  uint64_t v30;
  char *v31;
  unint64_t *v32;
  unint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t *v50;
  uint64_t v51;
  int v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  int64x2_t v64;
  _BYTE *v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  std::__shared_weak_count *v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  uint64_t v73;
  _QWORD *v74;
  _QWORD *v75;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  unint64_t v78;
  _QWORD *v79;
  unint64_t *v80;
  unint64_t v81;
  __int128 v82;
  unint64_t *v83;
  unint64_t v84;
  std::__shared_weak_count *v85;
  unint64_t *v86;
  unint64_t v87;
  unint64_t *v88;
  unint64_t v89;
  __int128 v90;
  unint64_t *v91;
  unint64_t v92;
  unint64_t v93;
  void (***v94)(_QWORD, uint64_t *, uint64_t *, _BYTE *);
  unint64_t *v95;
  unint64_t v96;
  std::__shared_weak_count *shared_owners;
  std::__shared_weak_count *v98;
  std::__shared_weak_count *v99;
  uint64_t v100;
  __int128 *v101;
  uint64_t v102;
  unint64_t *v103;
  unint64_t v104;
  std::__shared_weak_count *v105;
  unint64_t *v106;
  unint64_t v107;
  _QWORD *v108;
  uint64_t v109;
  std::__shared_weak_count *v110;
  unint64_t *v111;
  unint64_t v112;
  unint64_t *v113;
  unint64_t v114;
  uint64_t *v115;
  unint64_t v116;
  __int128 *v117;
  uint64_t v118;
  std::__shared_weak_count *v119;
  unint64_t *v120;
  unint64_t v121;
  std::__shared_weak_count *v122;
  unint64_t *v123;
  unint64_t v124;
  std::__shared_weak_count *v125;
  unint64_t *v126;
  unint64_t v127;
  std::__shared_weak_count *v128;
  unint64_t *v129;
  unint64_t v130;
  unint64_t v131;
  uint64_t v132;
  __int128 *v133;
  uint64_t v134;
  _QWORD *v135;
  _QWORD *v136;
  _QWORD *v137;
  uint64_t *v138;
  uint64_t *v139;
  uint64_t v140;
  void **v141;
  unint64_t v142;
  _QWORD *v143;
  _QWORD *v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  unint64_t v148;
  uint64_t v149;
  _QWORD *v150;
  char *v151;
  char *v152;
  uint64_t v153;
  uint64_t v154;
  _QWORD *v155;
  uint64_t v156;
  unint64_t v157;
  uint64_t v158;
  mlcore::Transaction *v160;
  char *v161;
  uint64_t v162;
  char *v163;
  char *v164;
  unint64_t *v165;
  unint64_t v166;
  unint64_t *v167;
  unint64_t v168;
  std::__shared_weak_count *v169;
  unint64_t *v170;
  unint64_t v171;
  std::__shared_weak_count *v172;
  unint64_t *v173;
  unint64_t v174;
  unint64_t *v175;
  unint64_t v176;
  uint64_t v177;
  std::__shared_weak_count *v178;
  unint64_t *v179;
  unint64_t v180;
  std::__shared_weak_count *v181;
  unint64_t *v182;
  unint64_t v183;
  std::__shared_weak_count *v184;
  unint64_t *v185;
  unint64_t v186;
  std::__shared_weak_count *v187;
  unint64_t *v188;
  unint64_t v189;
  std::__shared_weak_count *v190;
  unint64_t *v191;
  unint64_t v192;
  std::__shared_weak_count *v193;
  unint64_t *v194;
  unint64_t v195;
  std::__shared_weak_count *v196;
  unint64_t *v197;
  unint64_t v198;
  uint64_t v199;
  uint64_t v200;
  std::__shared_weak_count **v201;
  uint64_t *v202;
  std::__shared_weak_count *v203;
  __int128 v205;
  __int128 v206;
  __int128 v207;
  std::__shared_weak_count *v208;
  std::__shared_weak_count *v209;
  uint64_t v210;
  std::__shared_weak_count *v211;
  uint64_t v212;
  std::__shared_weak_count *v213;
  __int128 v214;
  char *v215;
  char *v216;
  uint64_t v217;
  int64x2_t v218;
  unint64_t v219;
  __int128 v220;
  mlcore::EntityClass *v221;
  uint64_t *v222;
  uint64_t *v223;
  uint64_t v224;
  mlcore::EntityClass **v225;
  std::__shared_weak_count *v226;
  uint64_t v227;
  std::__shared_weak_count *v228;
  uint64_t shared_weak_owners;
  std::__shared_weak_count *v230;
  __int128 v231;
  dispatch_semaphore_t dsema;
  __int128 v233;
  __int128 v234;
  __int128 v235;
  mlcore::EntityClass **v236;
  __int128 *v237;
  int v238;
  void *v239;
  _BYTE v240[24];
  _BYTE *v241;
  unint64_t *v242;
  uint64_t v243;

  v243 = *MEMORY[0x24BDAC8D0];
  v5 = (mlcore::EntityClass **)*a2;
  v6 = (std::__shared_weak_count *)(*a2)[1].__vftable;
  shared_weak_owners = (*a2)->__shared_weak_owners_;
  v230 = v6;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    v5 = (mlcore::EntityClass **)*a2;
  }
  v9 = v5[6];
  v11 = *(_QWORD *)v9;
  v10 = (std::__shared_weak_count *)*((_QWORD *)v9 + 1);
  v227 = v11;
  v228 = v10;
  if (v10)
  {
    v12 = (unint64_t *)&v10->__shared_owners_;
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
    v5 = (mlcore::EntityClass **)*a2;
  }
  v14 = a2[1];
  v225 = v5;
  v226 = v14;
  if (v14)
  {
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  v17 = v5[3];
  *(_QWORD *)&v235 = v5[2];
  *((_QWORD *)&v235 + 1) = v17;
  if (v17)
  {
    v18 = (unint64_t *)((char *)v17 + 8);
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
  }
  v236 = v5;
  v237 = (__int128 *)v14;
  if (v14)
  {
    v20 = (unint64_t *)&v14->__shared_owners_;
    do
      v21 = __ldxr(v20);
    while (__stxr(v21 + 1, v20));
  }
  v22 = mlcore::EntityRevisionController::latestRevisionNumber((mlcore::EntityRevisionController *)&v235);
  if (v14)
  {
    v23 = (unint64_t *)&v14->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v25 = (std::__shared_weak_count *)*((_QWORD *)&v235 + 1);
  if (*((_QWORD *)&v235 + 1))
  {
    v26 = (unint64_t *)(*((_QWORD *)&v235 + 1) + 8);
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  if (v226)
  {
    v28 = &v226->__shared_owners_;
    do
      v29 = __ldaxr((unint64_t *)v28);
    while (__stlxr(v29 - 1, (unint64_t *)v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v226->__on_zero_shared)(v226);
      std::__shared_weak_count::__release_weak(v226);
    }
  }
  v199 = a3;
  v200 = v22;
  v201 = a2;
  v222 = 0;
  v223 = 0;
  v224 = 0;
  v30 = *(_QWORD *)(a1 + 144);
  if (v30)
  {
    while (1)
    {
      v221 = *(mlcore::EntityClass **)(v30 + 16);
      mlcore::MultiEntityQuery::predicateForEntityClass((mlcore::MultiEntityQuery *)a1, v221, v240);
      v31 = (char *)operator new(0x80uLL);
      *(_OWORD *)(v31 + 8) = 0u;
      *(_QWORD *)v31 = &off_24C33CB40;
      v203 = *(std::__shared_weak_count **)&v240[8];
      v235 = *(_OWORD *)v240;
      *(_OWORD *)v240 = 0u;
      mlcore::PropertiesQuery::PropertiesQuery((uint64_t)(v31 + 24), (uint64_t)v221, (uint64_t *)&v235);
      if (v203)
      {
        v32 = (unint64_t *)&v203->__shared_owners_;
        do
          v33 = __ldaxr(v32);
        while (__stlxr(v33 - 1, v32));
        if (!v33)
        {
          ((void (*)(std::__shared_weak_count *))v203->__on_zero_shared)(v203);
          std::__shared_weak_count::__release_weak(v203);
        }
      }
      *(_QWORD *)&v220 = v31 + 24;
      *((_QWORD *)&v220 + 1) = v31;
      v34 = *(std::__shared_weak_count **)&v240[8];
      if (*(_QWORD *)&v240[8])
      {
        v35 = (unint64_t *)(*(_QWORD *)&v240[8] + 8);
        do
          v36 = __ldaxr(v35);
        while (__stlxr(v36 - 1, v35));
        if (!v36)
        {
          ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
          std::__shared_weak_count::__release_weak(v34);
        }
      }
      v37 = (*(uint64_t (**)(mlcore::EntityClass *))(*(_QWORD *)v221 + 112))(v221);
      v202 = (uint64_t *)v30;
      v38 = operator new(8uLL);
      *v38 = v37;
      v39 = v38 + 1;
      v218 = 0uLL;
      v219 = 0;
      v40 = *(_QWORD *)(a1 + 288);
      v41 = *(_QWORD *)(a1 + 296);
      v42 = v38 + 1;
      while (v40 != v41)
      {
        *(_QWORD *)&v235 = &off_24C339DC0;
        std::unordered_map<mlcore::EntityClass *,mlcore::ModelPropertyBase *>::unordered_map((uint64_t)&v235 + 8, v40 + 8);
        v238 = *(_DWORD *)(v40 + 48);
        v43 = mlcore::MultiSortDescriptor::propertyForEntityClass((int8x8_t *)&v235, (unint64_t)v221);
        v44 = v43;
        if (v43)
        {
          if (v39 >= v42)
          {
            v46 = v39 - v38;
            v47 = v46 + 1;
            if ((unint64_t)(v46 + 1) >> 61)
              std::vector<std::string>::__throw_length_error[abi:ne180100]();
            if (((char *)v42 - (char *)v38) >> 2 > v47)
              v47 = ((char *)v42 - (char *)v38) >> 2;
            if ((unint64_t)((char *)v42 - (char *)v38) >= 0x7FFFFFFFFFFFFFF8)
              v48 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v48 = v47;
            if (v48)
              v48 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<mlcore::ModelPropertyBase *>>(v48);
            else
              v49 = 0;
            v50 = (uint64_t *)(v48 + 8 * v46);
            *v50 = v44;
            v45 = v50 + 1;
            while (v39 != v38)
            {
              v51 = *--v39;
              *--v50 = v51;
            }
            v42 = (uint64_t *)(v48 + 8 * v49);
            if (v38)
              operator delete(v38);
            v38 = v50;
          }
          else
          {
            *v39 = v43;
            v45 = v39 + 1;
          }
          v52 = v238;
          v53 = v218.i64[1];
          if (v218.i64[1] >= v219)
          {
            v55 = 0xAAAAAAAAAAAAAAABLL * ((v218.i64[1] - v218.i64[0]) >> 3);
            v56 = v55 + 1;
            if (v55 + 1 > 0xAAAAAAAAAAAAAAALL)
              std::vector<std::string>::__throw_length_error[abi:ne180100]();
            if (0x5555555555555556 * ((uint64_t)(v219 - v218.i64[0]) >> 3) > v56)
              v56 = 0x5555555555555556 * ((uint64_t)(v219 - v218.i64[0]) >> 3);
            if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v219 - v218.i64[0]) >> 3) >= 0x555555555555555)
              v57 = 0xAAAAAAAAAAAAAAALL;
            else
              v57 = v56;
            v242 = &v219;
            if (v57)
              v57 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v57);
            else
              v58 = 0;
            v59 = v57 + 24 * v55;
            *(_QWORD *)v59 = &off_24C337670;
            *(_QWORD *)(v59 + 8) = v44;
            *(_DWORD *)(v59 + 16) = v52;
            v61 = v218.i64[1];
            v60 = v218.i64[0];
            if (v218.i64[1] == v218.i64[0])
            {
              v64 = vdupq_n_s64(v218.u64[1]);
              v62 = v57 + 24 * v55;
            }
            else
            {
              v62 = v57 + 24 * v55;
              do
              {
                *(_QWORD *)(v62 - 24) = &off_24C337670;
                v62 -= 24;
                v63 = *(_QWORD *)(v61 - 16);
                *(_DWORD *)(v62 + 16) = *(_DWORD *)(v61 - 8);
                *(_QWORD *)(v62 + 8) = v63;
                v61 -= 24;
              }
              while (v61 != v60);
              v64 = v218;
            }
            v54 = v59 + 24;
            v218.i64[0] = v62;
            v218.i64[1] = v59 + 24;
            *(int64x2_t *)&v240[8] = v64;
            v65 = (_BYTE *)v219;
            v219 = v57 + 24 * v58;
            v241 = v65;
            *(_QWORD *)v240 = v64.i64[0];
            std::__split_buffer<mlcore::SortDescriptor>::~__split_buffer((uint64_t)v240);
          }
          else
          {
            *(_QWORD *)v218.i64[1] = &off_24C337670;
            *(_QWORD *)(v53 + 8) = v44;
            v54 = v53 + 24;
            *(_DWORD *)(v53 + 16) = v52;
          }
          v218.i64[1] = v54;
          v39 = v45;
        }
        *(_QWORD *)&v235 = &off_24C339DC0;
        std::__hash_table<mlcore::ModelPropertyBase *,std::hash<mlcore::ModelPropertyBase *>,std::equal_to<mlcore::ModelPropertyBase *>,std::allocator<mlcore::ModelPropertyBase *>>::~__hash_table((uint64_t)&v235 + 8);
        v40 += 56;
      }
      v66 = v220;
      v216 = 0;
      v217 = 0;
      v215 = 0;
      std::vector<mlcore::ModelPropertyBase *>::__init_with_size[abi:ne180100]<mlcore::ModelPropertyBase **,mlcore::ModelPropertyBase **>(&v215, v38, (uint64_t)v39, v39 - v38);
      v67 = v215;
      std::vector<mlcore::ModelPropertyBase *>::__assign_with_size[abi:ne180100]<mlcore::ModelPropertyBase **,mlcore::ModelPropertyBase **>((char *)(v66 + 80), v215, (uint64_t)v216, (v216 - v215) >> 3);
      if (v67)
      {
        v216 = v67;
        operator delete(v67);
      }
      v68 = v220;
      mlcore::PropertiesQuery::setSortDescriptors((char *)v220, v218.i8);
      *(_OWORD *)(v68 + 32) = *(_OWORD *)(a1 + 32);
      v69 = *v201;
      v70 = v201[1];
      *(_QWORD *)&v214 = *v201;
      *((_QWORD *)&v214 + 1) = v70;
      if (v70)
      {
        v71 = (unint64_t *)&v70->__shared_owners_;
        do
          v72 = __ldxr(v71);
        while (__stxr(v72 + 1, v71));
      }
      mlcore::MultiEntityQuery::viewForEntityClass((mlcore::MultiEntityQuery *)a1, v221, &v212);
      v73 = v212;
      if (v212)
      {
        v74 = operator new(0x60uLL);
        v75 = v74;
        v74[1] = 0;
        v74[2] = 0;
        *v74 = &off_24C33C440;
        v76 = v213;
        *(_QWORD *)&v235 = v73;
        *((_QWORD *)&v235 + 1) = v213;
        if (v213)
        {
          v77 = (unint64_t *)&v213->__shared_owners_;
          do
            v78 = __ldxr(v77);
          while (__stxr(v78 + 1, v77));
        }
        v79 = v74 + 3;
        mlcore::Transaction::Transaction((uint64_t)(v74 + 3), (uint64_t)&v235, 1);
        if (v76)
        {
          v80 = (unint64_t *)&v76->__shared_owners_;
          do
            v81 = __ldaxr(v80);
          while (__stlxr(v81 - 1, v80));
          if (!v81)
          {
            ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
            std::__shared_weak_count::__release_weak(v76);
          }
        }
        *(_QWORD *)v240 = v79;
        *(_QWORD *)&v240[8] = v75;
        std::shared_ptr<mlcore::DeviceLibraryView>::__enable_weak_this[abi:ne180100]<mlcore::DeviceLibraryView,mlcore::DeviceLibraryView,void>((uint64_t)v240, v75 + 3, (uint64_t)(v75 + 3));
        v82 = *(_OWORD *)v240;
        *(_OWORD *)v240 = 0uLL;
        v214 = v82;
        if (v70)
        {
          v83 = (unint64_t *)&v70->__shared_owners_;
          do
            v84 = __ldaxr(v83);
          while (__stlxr(v84 - 1, v83));
          if (!v84)
          {
            ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
            std::__shared_weak_count::__release_weak(v70);
          }
        }
        v85 = *(std::__shared_weak_count **)&v240[8];
        if (*(_QWORD *)&v240[8])
        {
          v86 = (unint64_t *)(*(_QWORD *)&v240[8] + 8);
          do
            v87 = __ldaxr(v86);
          while (__stlxr(v87 - 1, v86));
          if (!v87)
          {
            ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
            std::__shared_weak_count::__release_weak(v85);
          }
        }
        v70 = (std::__shared_weak_count *)*((_QWORD *)&v214 + 1);
        v69 = (std::__shared_weak_count *)v214;
      }
      v208 = v69;
      v209 = v70;
      if (v70)
      {
        v88 = (unint64_t *)&v70->__shared_owners_;
        do
          v89 = __ldxr(v88);
        while (__stxr(v89 + 1, v88));
      }
      v90 = v220;
      v207 = v220;
      if (*((_QWORD *)&v220 + 1))
      {
        v91 = (unint64_t *)(*((_QWORD *)&v220 + 1) + 8);
        do
          v92 = __ldxr(v91);
        while (__stxr(v92 + 1, v91));
        v210 = 0;
        v211 = 0;
        dsema = dispatch_semaphore_create(0);
        v231 = v90;
        do
          v93 = __ldxr(v91);
        while (__stxr(v93 + 1, v91));
      }
      else
      {
        v210 = 0;
        v211 = 0;
        dsema = dispatch_semaphore_create(0);
        v231 = v90;
      }
      *(_QWORD *)v240 = &off_24C33B198;
      *(_QWORD *)&v240[8] = &v210;
      *(_QWORD *)&v240[16] = &dsema;
      v241 = v240;
      v94 = (void (***)(_QWORD, uint64_t *, uint64_t *, _BYTE *))v69->__shared_weak_owners_;
      v234 = v90;
      if (*((_QWORD *)&v90 + 1))
      {
        v95 = (unint64_t *)(*((_QWORD *)&v90 + 1) + 8);
        do
          v96 = __ldxr(v95);
        while (__stxr(v96 + 1, v95));
      }
      shared_owners = (std::__shared_weak_count *)v69->__shared_owners_;
      *(_QWORD *)&v233 = v69->__vftable;
      if (!shared_owners)
      {
        *((_QWORD *)&v233 + 1) = 0;
LABEL_289:
        std::__throw_bad_weak_ptr[abi:ne180100]();
      }
      v98 = std::__shared_weak_count::lock(shared_owners);
      *((_QWORD *)&v233 + 1) = v98;
      if (!v98)
        goto LABEL_289;
      v99 = v98;
      v100 = (uint64_t)v241;
      if (!v241)
        goto LABEL_126;
      if (v241 != v240)
        break;
      v237 = &v235;
      (*(void (**)(_BYTE *, __int128 *))(*(_QWORD *)v240 + 24))(v240, &v235);
LABEL_128:
      mlcore::LibraryView::performQuery<mlcore::PropertiesQuery>(v94, v90, *((std::__shared_weak_count **)&v90 + 1), (uint64_t *)&v233, (uint64_t)&v235);
      v101 = v237;
      if (v237 == &v235)
      {
        v101 = &v235;
        v102 = 4;
        goto LABEL_132;
      }
      if (v237)
      {
        v102 = 5;
LABEL_132:
        (*(void (**)(void))(*(_QWORD *)v101 + 8 * v102))();
      }
      v103 = (unint64_t *)&v99->__shared_owners_;
      do
        v104 = __ldaxr(v103);
      while (__stlxr(v104 - 1, v103));
      if (!v104)
      {
        ((void (*)(std::__shared_weak_count *))v99->__on_zero_shared)(v99);
        std::__shared_weak_count::__release_weak(v99);
      }
      v105 = (std::__shared_weak_count *)*((_QWORD *)&v234 + 1);
      if (*((_QWORD *)&v234 + 1))
      {
        v106 = (unint64_t *)(*((_QWORD *)&v234 + 1) + 8);
        do
          v107 = __ldaxr(v106);
        while (__stlxr(v107 - 1, v106));
        if (!v107)
        {
          ((void (*)(std::__shared_weak_count *))v105->__on_zero_shared)(v105);
          std::__shared_weak_count::__release_weak(v105);
        }
      }
      v108 = v241;
      if (v241 == v240)
      {
        v108 = v240;
        v109 = 4;
        goto LABEL_146;
      }
      if (v241)
      {
        v109 = 5;
LABEL_146:
        (*(void (**)(void))(*v108 + 8 * v109))();
      }
      v110 = (std::__shared_weak_count *)*((_QWORD *)&v231 + 1);
      if (*((_QWORD *)&v231 + 1))
      {
        v111 = (unint64_t *)(*((_QWORD *)&v231 + 1) + 8);
        do
          v112 = __ldaxr(v111);
        while (__stlxr(v112 - 1, v111));
        if (!v112)
        {
          ((void (*)(std::__shared_weak_count *))v110->__on_zero_shared)(v110);
          std::__shared_weak_count::__release_weak(v110);
        }
      }
      dispatch_semaphore_wait(dsema, 0xFFFFFFFFFFFFFFFFLL);
      dispatch_release(dsema);
      if (*((_QWORD *)&v207 + 1))
      {
        v113 = (unint64_t *)(*((_QWORD *)&v207 + 1) + 8);
        do
          v114 = __ldaxr(v113);
        while (__stlxr(v114 - 1, v113));
        if (!v114)
        {
          (*(void (**)(_QWORD))(**((_QWORD **)&v207 + 1) + 16))(*((_QWORD *)&v207 + 1));
          std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v207 + 1));
        }
      }
      if (v209)
      {
        v115 = &v209->__shared_owners_;
        do
          v116 = __ldaxr((unint64_t *)v115);
        while (__stlxr(v116 - 1, (unint64_t *)v115));
        if (!v116)
        {
          ((void (*)(std::__shared_weak_count *))v209->__on_zero_shared)(v209);
          std::__shared_weak_count::__release_weak(v209);
        }
      }
      *(_QWORD *)&v235 = &off_24C33B2F8;
      *((_QWORD *)&v235 + 1) = &v222;
      v236 = &v221;
      v237 = &v235;
      mlcore::PropertiesQueryResult::enumerateResults(v210, (uint64_t)&v235);
      v117 = v237;
      if (v237 == &v235)
      {
        v117 = &v235;
        v118 = 4;
      }
      else
      {
        if (!v237)
          goto LABEL_167;
        v118 = 5;
      }
      (*(void (**)(void))(*(_QWORD *)v117 + 8 * v118))();
LABEL_167:
      v119 = v211;
      if (v211)
      {
        v120 = (unint64_t *)&v211->__shared_owners_;
        do
          v121 = __ldaxr(v120);
        while (__stlxr(v121 - 1, v120));
        if (!v121)
        {
          ((void (*)(std::__shared_weak_count *))v119->__on_zero_shared)(v119);
          std::__shared_weak_count::__release_weak(v119);
        }
      }
      v122 = v213;
      if (v213)
      {
        v123 = (unint64_t *)&v213->__shared_owners_;
        do
          v124 = __ldaxr(v123);
        while (__stlxr(v124 - 1, v123));
        if (!v124)
        {
          ((void (*)(std::__shared_weak_count *))v122->__on_zero_shared)(v122);
          std::__shared_weak_count::__release_weak(v122);
        }
      }
      v125 = (std::__shared_weak_count *)*((_QWORD *)&v214 + 1);
      if (*((_QWORD *)&v214 + 1))
      {
        v126 = (unint64_t *)(*((_QWORD *)&v214 + 1) + 8);
        do
          v127 = __ldaxr(v126);
        while (__stlxr(v127 - 1, v126));
        if (!v127)
        {
          ((void (*)(std::__shared_weak_count *))v125->__on_zero_shared)(v125);
          std::__shared_weak_count::__release_weak(v125);
        }
      }
      *(_QWORD *)&v235 = &v218;
      std::vector<mlcore::SortDescriptor>::__destroy_vector::operator()[abi:ne180100]((void ***)&v235);
      if (v38)
        operator delete(v38);
      v128 = (std::__shared_weak_count *)*((_QWORD *)&v220 + 1);
      if (*((_QWORD *)&v220 + 1))
      {
        v129 = (unint64_t *)(*((_QWORD *)&v220 + 1) + 8);
        do
          v130 = __ldaxr(v129);
        while (__stlxr(v130 - 1, v129));
        if (!v130)
        {
          ((void (*)(std::__shared_weak_count *))v128->__on_zero_shared)(v128);
          std::__shared_weak_count::__release_weak(v128);
        }
      }
      v30 = *v202;
      if (!*v202)
        goto LABEL_190;
    }
    v100 = (*(uint64_t (**)(_BYTE *))(*(_QWORD *)v241 + 16))(v241);
LABEL_126:
    v237 = (__int128 *)v100;
    goto LABEL_128;
  }
LABEL_190:
  if (*(_QWORD *)(a1 + 296) != *(_QWORD *)(a1 + 288))
  {
    v131 = 126 - 2 * __clz(0x6DB6DB6DB6DB6DB7 * (((char *)v223 - (char *)v222) >> 5));
    *(_QWORD *)&v235 = &off_24C33B7C8;
    *((_QWORD *)&v235 + 1) = a1 + 288;
    v237 = &v235;
    *(_QWORD *)v240 = &v235;
    if (v223 == v222)
      v132 = 0;
    else
      v132 = v131;
    std::__introsort<std::_ClassicAlgPolicy,mlcore::MultiEntityQuery::_perform(std::shared_ptr<mlcore::Transaction>,std::function<void ()(std::shared_ptr<mlcore::QueryResult>)>)::$_1 &,std::pair<mlcore::EntityClass *,mlcore::PropertyCache> *,false>(v222, v223, (uint64_t)v240, v132, 1);
    v133 = v237;
    if (v237 == &v235)
    {
      v134 = 4;
      v133 = &v235;
    }
    else
    {
      if (!v237)
        goto LABEL_199;
      v134 = 5;
    }
    (*(void (**)(void))(*(_QWORD *)v133 + 8 * v134))();
  }
LABEL_199:
  v135 = (_QWORD *)operator new();
  *v135 = 0;
  v135[1] = 0;
  v135[2] = 0;
  std::shared_ptr<std::vector<mlcore::PropertyCache>>::shared_ptr[abi:ne180100]<std::vector<mlcore::PropertyCache>,void>(&v218, (uint64_t)v135);
  v136 = (_QWORD *)operator new();
  *v136 = 0;
  v136[1] = 0;
  v136[2] = 0;
  *(_QWORD *)&v234 = v136;
  v137 = (_QWORD *)operator new();
  *v137 = &off_24C33D9B0;
  v137[1] = 0;
  v137[2] = 0;
  v137[3] = v136;
  *((_QWORD *)&v234 + 1) = v137;
  v138 = v222;
  v139 = v223;
  if (v222 != v223)
  {
    do
    {
      *(_QWORD *)&v235 = *v138;
      mlcore::PropertyCacheBase<long long,int,double,std::string,mediaplatform::Data>::PropertyCacheBase((uint64_t)&v235 + 8, (uint64_t)(v138 + 1));
      *((_QWORD *)&v235 + 1) = &off_24C3371C0;
      v239 = &unk_24C3371E8;
      v140 = v235;
      v141 = (void **)v234;
      v143 = *(_QWORD **)(v234 + 8);
      v142 = *(_QWORD *)(v234 + 16);
      if ((unint64_t)v143 >= v142)
      {
        v145 = ((uint64_t)v143 - *(_QWORD *)v234) >> 3;
        if ((unint64_t)(v145 + 1) >> 61)
          std::vector<std::string>::__throw_length_error[abi:ne180100]();
        v146 = v142 - *(_QWORD *)v234;
        v147 = v146 >> 2;
        if (v146 >> 2 <= (unint64_t)(v145 + 1))
          v147 = v145 + 1;
        if ((unint64_t)v146 >= 0x7FFFFFFFFFFFFFF8)
          v148 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v148 = v147;
        if (v148)
          v148 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<mlcore::ModelPropertyBase *>>(v148);
        else
          v149 = 0;
        v150 = (_QWORD *)(v148 + 8 * v145);
        *v150 = v140;
        v144 = v150 + 1;
        v152 = (char *)*v141;
        v151 = (char *)v141[1];
        if (v151 != *v141)
        {
          do
          {
            v153 = *((_QWORD *)v151 - 1);
            v151 -= 8;
            *--v150 = v153;
          }
          while (v151 != v152);
          v151 = (char *)*v141;
        }
        *v141 = v150;
        v141[1] = v144;
        v141[2] = (void *)(v148 + 8 * v149);
        if (v151)
          operator delete(v151);
      }
      else
      {
        *v143 = v235;
        v144 = v143 + 1;
      }
      v141[1] = v144;
      v154 = v218.i64[0];
      v155 = *(_QWORD **)(v218.i64[0] + 8);
      if ((unint64_t)v155 >= *(_QWORD *)(v218.i64[0] + 16))
      {
        v156 = std::vector<mlcore::PropertyCache>::__push_back_slow_path<mlcore::PropertyCache const&>((uint64_t *)v218.i64[0], (uint64_t)&v235 + 8);
      }
      else
      {
        mlcore::PropertyCacheBase<long long,int,double,std::string,mediaplatform::Data>::PropertyCacheBase(*(_QWORD *)(v218.i64[0] + 8), (uint64_t)&v235 + 8);
        *v155 = &off_24C3371C0;
        v155[26] = &unk_24C3371E8;
        v156 = (uint64_t)(v155 + 27);
        *(_QWORD *)(v154 + 8) = v155 + 27;
      }
      *(_QWORD *)(v154 + 8) = v156;
      v157 = 0x84BDA12F684BDA13 * ((uint64_t)(*(_QWORD *)(v218.i64[0] + 8) - *(_QWORD *)v218.i64[0]) >> 3);
      v158 = *(_QWORD *)(a1 + 40);
      mlcore::PropertyCacheBase<long long,int,double,std::string,mediaplatform::Data>::~PropertyCacheBase((_QWORD *)&v235 + 1);
      v138 += 28;
    }
    while (v157 != v158 && v138 != v139);
  }
  v205 = 0u;
  v233 = 0u;
  v160 = (mlcore::Transaction *)*v201;
  if (!BYTE1((*v201)[2].__shared_weak_owners_))
  {
    std::allocate_shared[abi:ne180100]<mlcore::EntityCache,std::allocator<mlcore::EntityCache>,std::shared_ptr<mlcore::Transaction> &,void>(&v235, (uint64_t)v160, v201[1]);
    v205 = v235;
    v233 = v235;
    v160 = (mlcore::Transaction *)*v201;
  }
  mlcore::Transaction::unrestrictedLibraryView(v160, &v220);
  v161 = (char *)operator new(0x160uLL);
  v163 = v161;
  *(_OWORD *)(v161 + 8) = 0u;
  *(_QWORD *)v161 = &off_24C33D0B8;
  v164 = v161 + 24;
  v235 = v220;
  v220 = 0u;
  *(_OWORD *)v240 = v205;
  if (*((_QWORD *)&v205 + 1))
  {
    v165 = (unint64_t *)(*((_QWORD *)&v205 + 1) + 8);
    do
      v166 = __ldxr(v165);
    while (__stxr(v166 + 1, v165));
  }
  mlcore::MultiEntityQueryResult::MultiEntityQueryResult((uint64_t)(v161 + 24), (uint64_t *)&v235, a1 + 208, &v218, &v234, v200, (uint64_t *)v240, v162);
  if (*((_QWORD *)&v205 + 1))
  {
    v167 = (unint64_t *)(*((_QWORD *)&v205 + 1) + 8);
    do
      v168 = __ldaxr(v167);
    while (__stlxr(v168 - 1, v167));
    if (!v168)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v205 + 1) + 16))(*((_QWORD *)&v205 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v205 + 1));
    }
  }
  v169 = (std::__shared_weak_count *)*((_QWORD *)&v235 + 1);
  if (*((_QWORD *)&v235 + 1))
  {
    v170 = (unint64_t *)(*((_QWORD *)&v235 + 1) + 8);
    do
      v171 = __ldaxr(v170);
    while (__stlxr(v171 - 1, v170));
    if (!v171)
    {
      ((void (*)(std::__shared_weak_count *))v169->__on_zero_shared)(v169);
      std::__shared_weak_count::__release_weak(v169);
    }
  }
  *(_QWORD *)&v231 = v164;
  *((_QWORD *)&v231 + 1) = v163;
  v172 = (std::__shared_weak_count *)*((_QWORD *)&v220 + 1);
  if (!*((_QWORD *)&v220 + 1))
  {
    *(_QWORD *)&v206 = v231;
    *((_QWORD *)&v206 + 1) = v163;
LABEL_247:
    v175 = (unint64_t *)(v163 + 8);
    do
      v176 = __ldxr(v175);
    while (__stxr(v176 + 1, v175));
    goto LABEL_249;
  }
  v173 = (unint64_t *)(*((_QWORD *)&v220 + 1) + 8);
  do
    v174 = __ldaxr(v173);
  while (__stlxr(v174 - 1, v173));
  if (!v174)
  {
    ((void (*)(std::__shared_weak_count *))v172->__on_zero_shared)(v172);
    std::__shared_weak_count::__release_weak(v172);
  }
  v163 = (char *)*((_QWORD *)&v231 + 1);
  v206 = v231;
  if (*((_QWORD *)&v231 + 1))
    goto LABEL_247;
LABEL_249:
  v177 = *(_QWORD *)(v199 + 24);
  if (!v177)
    std::__throw_bad_function_call[abi:ne180100]();
  (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v177 + 48))(v177, &v206);
  v178 = (std::__shared_weak_count *)*((_QWORD *)&v206 + 1);
  if (*((_QWORD *)&v206 + 1))
  {
    v179 = (unint64_t *)(*((_QWORD *)&v206 + 1) + 8);
    do
      v180 = __ldaxr(v179);
    while (__stlxr(v180 - 1, v179));
    if (!v180)
    {
      ((void (*)(std::__shared_weak_count *))v178->__on_zero_shared)(v178);
      std::__shared_weak_count::__release_weak(v178);
    }
  }
  v181 = (std::__shared_weak_count *)*((_QWORD *)&v231 + 1);
  if (*((_QWORD *)&v231 + 1))
  {
    v182 = (unint64_t *)(*((_QWORD *)&v231 + 1) + 8);
    do
      v183 = __ldaxr(v182);
    while (__stlxr(v183 - 1, v182));
    if (!v183)
    {
      ((void (*)(std::__shared_weak_count *))v181->__on_zero_shared)(v181);
      std::__shared_weak_count::__release_weak(v181);
    }
  }
  v184 = (std::__shared_weak_count *)*((_QWORD *)&v233 + 1);
  if (*((_QWORD *)&v233 + 1))
  {
    v185 = (unint64_t *)(*((_QWORD *)&v233 + 1) + 8);
    do
      v186 = __ldaxr(v185);
    while (__stlxr(v186 - 1, v185));
    if (!v186)
    {
      ((void (*)(std::__shared_weak_count *))v184->__on_zero_shared)(v184);
      std::__shared_weak_count::__release_weak(v184);
    }
  }
  v187 = (std::__shared_weak_count *)*((_QWORD *)&v234 + 1);
  if (*((_QWORD *)&v234 + 1))
  {
    v188 = (unint64_t *)(*((_QWORD *)&v234 + 1) + 8);
    do
      v189 = __ldaxr(v188);
    while (__stlxr(v189 - 1, v188));
    if (!v189)
    {
      ((void (*)(std::__shared_weak_count *))v187->__on_zero_shared)(v187);
      std::__shared_weak_count::__release_weak(v187);
    }
  }
  v190 = (std::__shared_weak_count *)v218.i64[1];
  if (v218.i64[1])
  {
    v191 = (unint64_t *)(v218.i64[1] + 8);
    do
      v192 = __ldaxr(v191);
    while (__stlxr(v192 - 1, v191));
    if (!v192)
    {
      ((void (*)(std::__shared_weak_count *))v190->__on_zero_shared)(v190);
      std::__shared_weak_count::__release_weak(v190);
    }
  }
  *(_QWORD *)&v235 = &v222;
  std::vector<std::pair<mlcore::EntityClass *,mlcore::PropertyCache>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v235);
  v193 = v228;
  if (v228)
  {
    v194 = (unint64_t *)&v228->__shared_owners_;
    do
      v195 = __ldaxr(v194);
    while (__stlxr(v195 - 1, v194));
    if (!v195)
    {
      ((void (*)(std::__shared_weak_count *))v193->__on_zero_shared)(v193);
      std::__shared_weak_count::__release_weak(v193);
    }
  }
  v196 = v230;
  if (v230)
  {
    v197 = (unint64_t *)&v230->__shared_owners_;
    do
      v198 = __ldaxr(v197);
    while (__stlxr(v198 - 1, v197));
    if (!v198)
    {
      ((void (*)(std::__shared_weak_count *))v196->__on_zero_shared)(v196);
      std::__shared_weak_count::__release_weak(v196);
    }
  }
}

void sub_20A67CAFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,char a21,uint64_t a22,char a23,uint64_t a24,char a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char *a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43,uint64_t a44,uint64_t a45,char a46,uint64_t a47,char a48,uint64_t a49,char a50,uint64_t a51,char a52,uint64_t a53,dispatch_object_t object,char a55,uint64_t a56,char a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62)
{
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)&a55);
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)&a57);
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)&a35);
  a35 = &a43;
  std::vector<std::pair<mlcore::EntityClass *,mlcore::PropertyCache>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a35);
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)&a48);
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)&a50);
  _Unwind_Resume(a1);
}

char *mlcore::PropertiesQuery::setSortDescriptors(char *result, char *a2)
{
  _QWORD *v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t i;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t (***v22)(_QWORD);
  uint64_t (***v23)(_QWORD);
  uint64_t (**v24)(_QWORD);
  BOOL v25;

  v2 = result + 56;
  if (result + 56 != a2)
  {
    v3 = result;
    v5 = *(_QWORD *)a2;
    v4 = *((_QWORD *)a2 + 1);
    v6 = 0xAAAAAAAAAAAAAAABLL * ((v4 - *(_QWORD *)a2) >> 3);
    v7 = *((_QWORD *)result + 7);
    if (0xAAAAAAAAAAAAAAABLL * ((*((_QWORD *)result + 9) - v7) >> 3) < v6)
    {
      std::vector<mlcore::SortDescriptor>::__vdeallocate((void **)result + 7);
      if (v6 > 0xAAAAAAAAAAAAAAALL)
        std::vector<std::string>::__throw_length_error[abi:ne180100]();
      v8 = 0x5555555555555556 * ((uint64_t)(*((_QWORD *)v3 + 9) - *((_QWORD *)v3 + 7)) >> 3);
      if (v8 <= v6)
        v8 = v6;
      if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)v3 + 9) - *((_QWORD *)v3 + 7)) >> 3) >= 0x555555555555555)
        v9 = 0xAAAAAAAAAAAAAAALL;
      else
        v9 = v8;
      result = std::vector<mlcore::SortDescriptor>::__vallocate[abi:ne180100](v2, v9);
      for (i = *((_QWORD *)v3 + 8); v5 != v4; i += 24)
      {
        *(_QWORD *)i = &off_24C337670;
        v11 = *(_QWORD *)(v5 + 8);
        *(_DWORD *)(i + 16) = *(_DWORD *)(v5 + 16);
        *(_QWORD *)(i + 8) = v11;
        v5 += 24;
      }
LABEL_21:
      *((_QWORD *)v3 + 8) = i;
      return result;
    }
    v12 = *((_QWORD *)result + 8);
    v13 = 0xAAAAAAAAAAAAAAABLL * ((v12 - v7) >> 3);
    if (v13 < v6)
    {
      v14 = v5 + 8 * ((v12 - v7) >> 3);
      if (v12 != v7)
      {
        v15 = v7 + 8;
        v16 = 24 * v13;
        v17 = (uint64_t *)(v5 + 8);
        do
        {
          v18 = *v17;
          *(_DWORD *)(v15 + 8) = *((_DWORD *)v17 + 2);
          *(_QWORD *)v15 = v18;
          v15 += 24;
          v17 += 3;
          v16 -= 24;
        }
        while (v16);
        v7 = *((_QWORD *)result + 8);
      }
      v19 = v7;
      if (v14 != v4)
      {
        v19 = v7;
        do
        {
          *(_QWORD *)v19 = &off_24C337670;
          v20 = *(_QWORD *)(v14 + 8);
          *(_DWORD *)(v19 + 16) = *(_DWORD *)(v14 + 16);
          *(_QWORD *)(v19 + 8) = v20;
          v14 += 24;
          v19 += 24;
        }
        while (v14 != v4);
      }
      i = v19;
      goto LABEL_21;
    }
    if (v5 != v4)
    {
      do
      {
        v21 = *(_QWORD *)(v5 + 8);
        *(_DWORD *)(v7 + 16) = *(_DWORD *)(v5 + 16);
        *(_QWORD *)(v7 + 8) = v21;
        v5 += 24;
        v7 += 24;
      }
      while (v5 != v4);
      v12 = *((_QWORD *)result + 8);
    }
    if (v12 != v7)
    {
      v22 = (uint64_t (***)(_QWORD))(v12 - 24);
      v23 = (uint64_t (***)(_QWORD))(v12 - 24);
      do
      {
        v24 = *v23;
        v23 -= 3;
        result = (char *)(*v24)(v22);
        v25 = v22 == (uint64_t (***)(_QWORD))v7;
        v22 = v23;
      }
      while (!v25);
    }
    *((_QWORD *)v3 + 8) = v7;
  }
  return result;
}

void std::vector<mlcore::SortDescriptor>::__vdeallocate(void **a1)
{
  char *v1;
  char *v3;
  void *v4;
  char *v5;
  char *v6;
  void (**v7)(char *);
  BOOL v8;

  v1 = (char *)*a1;
  if (*a1)
  {
    v3 = (char *)a1[1];
    v4 = *a1;
    if (v3 != v1)
    {
      v5 = v3 - 24;
      v6 = v3 - 24;
      do
      {
        v7 = *(void (***)(char *))v6;
        v6 -= 24;
        (*v7)(v5);
        v8 = v5 == v1;
        v5 = v6;
      }
      while (!v8);
      v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

uint64_t std::__split_buffer<mlcore::SortDescriptor>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;
  void (**v4)(void);

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    v4 = *(void (***)(void))(i - 24);
    *(_QWORD *)(a1 + 16) = i - 24;
    (*v4)();
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t mlcore::MultiSortDescriptor::propertyForEntityClass(int8x8_t *this, unint64_t a2)
{
  int8x8_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint8x8_t v6;
  unint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  unint64_t v10;

  v2 = this[2];
  if (!*(_QWORD *)&v2)
    goto LABEL_17;
  v3 = 0x9DDFEA08EB382D69 * (((8 * a2) + 8) ^ HIDWORD(a2));
  v4 = 0x9DDFEA08EB382D69 * (HIDWORD(a2) ^ (v3 >> 47) ^ v3);
  v5 = 0x9DDFEA08EB382D69 * (v4 ^ (v4 >> 47));
  v6 = (uint8x8_t)vcnt_s8(v2);
  v6.i16[0] = vaddlv_u8(v6);
  if (v6.u32[0] > 1uLL)
  {
    v7 = v5;
    if (v5 >= *(_QWORD *)&v2)
      v7 = v5 % *(_QWORD *)&v2;
  }
  else
  {
    v7 = v5 & (*(_QWORD *)&v2 - 1);
  }
  v8 = *(_QWORD **)(*(_QWORD *)&this[1] + 8 * v7);
  if (!v8 || (v9 = (_QWORD *)*v8) == 0)
LABEL_17:
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  while (1)
  {
    v10 = v9[1];
    if (v5 == v10)
      break;
    if (v6.u32[0] > 1uLL)
    {
      if (v10 >= *(_QWORD *)&v2)
        v10 %= *(_QWORD *)&v2;
    }
    else
    {
      v10 &= *(_QWORD *)&v2 - 1;
    }
    if (v10 != v7)
      goto LABEL_17;
LABEL_16:
    v9 = (_QWORD *)*v9;
    if (!v9)
      goto LABEL_17;
  }
  if (v9[2] != a2)
    goto LABEL_16;
  return v9[3];
}

_QWORD *mlcore::MultiEntityQuery::predicateForEntityClass@<X0>(mlcore::MultiEntityQuery *this@<X0>, mlcore::EntityClass *a2@<X1>, _QWORD *a3@<X8>)
{
  _QWORD *result;

  *a3 = 0;
  a3[1] = 0;
  result = std::__hash_table<std::__hash_value_type<mlcore::ModelProperty<double> *,double>,std::__unordered_map_hasher<mlcore::ModelProperty<double> *,std::__hash_value_type<mlcore::ModelProperty<double> *,double>,std::hash<mlcore::ModelProperty<double> *>,std::equal_to<mlcore::ModelProperty<double> *>,true>,std::__unordered_map_equal<mlcore::ModelProperty<double> *,std::__hash_value_type<mlcore::ModelProperty<double> *,double>,std::equal_to<mlcore::ModelProperty<double> *>,std::hash<mlcore::ModelProperty<double> *>,true>,std::allocator<std::__hash_value_type<mlcore::ModelProperty<double> *,double>>>::find<mlcore::ModelProperty<double> *>((_QWORD *)this + 21, (unint64_t)a2);
  if (result)
    return std::shared_ptr<mlcore::Predicate>::operator=[abi:ne180100](a3, result[3], result[4]);
  return result;
}

_QWORD *mlcore::MultiEntityQuery::viewForEntityClass@<X0>(mlcore::MultiEntityQuery *this@<X0>, mlcore::EntityClass *a2@<X1>, _QWORD *a3@<X8>)
{
  _QWORD *result;

  *a3 = 0;
  a3[1] = 0;
  result = std::__hash_table<std::__hash_value_type<mlcore::ModelProperty<double> *,double>,std::__unordered_map_hasher<mlcore::ModelProperty<double> *,std::__hash_value_type<mlcore::ModelProperty<double> *,double>,std::hash<mlcore::ModelProperty<double> *>,std::equal_to<mlcore::ModelProperty<double> *>,true>,std::__unordered_map_equal<mlcore::ModelProperty<double> *,std::__hash_value_type<mlcore::ModelProperty<double> *,double>,std::equal_to<mlcore::ModelProperty<double> *>,std::hash<mlcore::ModelProperty<double> *>,true>,std::allocator<std::__hash_value_type<mlcore::ModelProperty<double> *,double>>>::find<mlcore::ModelProperty<double> *>((_QWORD *)this + 31, (unint64_t)a2);
  if (result)
    return std::shared_ptr<mlcore::Predicate>::operator=[abi:ne180100](a3, result[3], result[4]);
  return result;
}

uint64_t mlcore::PropertiesQueryResult::enumerateResults(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char v6;

  v2 = *(_QWORD *)(result + 160);
  if (v2 != *(_QWORD *)(result + 168))
  {
    v4 = result;
    do
    {
      v6 = 0;
      v5 = *(_QWORD *)(a2 + 24);
      if (!v5)
        std::__throw_bad_function_call[abi:ne180100]();
      result = (*(uint64_t (**)(uint64_t, uint64_t, char *))(*(_QWORD *)v5 + 48))(v5, v2, &v6);
      if (v6)
        break;
      v2 += 216;
    }
    while (v2 != *(_QWORD *)(v4 + 168));
  }
  return result;
}

_QWORD *std::__function::__func<mlcore::MultiEntityQuery::_perform(std::shared_ptr<mlcore::Transaction>,std::function<void ()(std::shared_ptr<mlcore::QueryResult>)>)::$_0,std::allocator<mlcore::MultiEntityQuery::_perform(std::shared_ptr<mlcore::Transaction>,std::function<void ()(std::shared_ptr<mlcore::QueryResult>)>)::$_0>,void ()(mlcore::PropertyCache const&,BOOL &)>::operator()(uint64_t a1, uint64_t a2)
{
  char **v2;
  char *v3;
  unint64_t v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  uint64_t v22;
  _QWORD v23[27];
  char *v24;
  char *v25;
  char *v26;
  char *v27;
  _QWORD *v28;

  v2 = *(char ***)(a1 + 8);
  v22 = **(_QWORD **)(a1 + 16);
  mlcore::PropertyCacheBase<long long,int,double,std::string,mediaplatform::Data>::PropertyCacheBase((uint64_t)v23, a2);
  v23[0] = &off_24C3371C0;
  v23[26] = &unk_24C3371E8;
  v3 = v2[1];
  v4 = (unint64_t)v2[2];
  if ((unint64_t)v3 >= v4)
  {
    v6 = 0x6DB6DB6DB6DB6DB7 * ((v3 - *v2) >> 5);
    if ((unint64_t)(v6 + 1) > 0x124924924924924)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v7 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v4 - (_QWORD)*v2) >> 5);
    v8 = 2 * v7;
    if (2 * v7 <= v6 + 1)
      v8 = v6 + 1;
    if (v7 >= 0x92492492492492)
      v9 = 0x124924924924924;
    else
      v9 = v8;
    v28 = v2 + 2;
    if (v9 > 0x124924924924924)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v10 = (char *)operator new(224 * v9);
    v11 = &v10[224 * v6];
    v24 = v10;
    v25 = v11;
    v26 = v11;
    v27 = &v10[224 * v9];
    *(_QWORD *)v11 = v22;
    mlcore::PropertyCacheBase<long long,int,double,std::string,mediaplatform::Data>::PropertyCacheBase((uint64_t)(v11 + 8), (uint64_t)v23);
    v12 = 0;
    *((_QWORD *)v11 + 1) = &off_24C3371C0;
    *((_QWORD *)v11 + 27) = &unk_24C3371E8;
    v13 = v25;
    v26 += 224;
    v15 = *v2;
    v14 = v2[1];
    while (1)
    {
      v16 = &v13[v12];
      v17 = &v14[v12];
      if (&v14[v12] == v15)
        break;
      *((_QWORD *)v16 - 28) = *((_QWORD *)v17 - 28);
      *(_QWORD *)mlcore::PropertyCacheBase<long long,int,double,std::string,mediaplatform::Data>::PropertyCacheBase((uint64_t)(v16 - 216), (uint64_t)(v17 - 216)) = &off_24C3371C0;
      *(_QWORD *)&v13[v12 - 8] = &unk_24C3371E8;
      v12 -= 224;
    }
    v18 = *v2;
    *v2 = v16;
    v24 = v18;
    v25 = v18;
    v19 = v2[1];
    v5 = v26;
    v2[1] = v26;
    v26 = v19;
    v20 = v2[2];
    v2[2] = v27;
    v27 = v20;
    std::__split_buffer<std::pair<mlcore::EntityClass *,mlcore::PropertyCache>>::~__split_buffer((uint64_t)&v24);
  }
  else
  {
    *(_QWORD *)v3 = v22;
    mlcore::PropertyCacheBase<long long,int,double,std::string,mediaplatform::Data>::PropertyCacheBase((uint64_t)(v3 + 8), (uint64_t)v23);
    *((_QWORD *)v3 + 1) = &off_24C3371C0;
    *((_QWORD *)v3 + 27) = &unk_24C3371E8;
    v5 = v3 + 224;
    v2[1] = v3 + 224;
  }
  v2[1] = v5;
  return mlcore::PropertyCacheBase<long long,int,double,std::string,mediaplatform::Data>::~PropertyCacheBase(v23);
}

void sub_20A67D4D0(_Unwind_Exception *a1)
{
  _QWORD *v1;

  mlcore::PropertyCacheBase<long long,int,double,std::string,mediaplatform::Data>::~PropertyCacheBase(v1);
  _Unwind_Resume(a1);
}

uint64_t mediaplatform::SQLLiteralValue<int>::sql(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  void *v11[2];
  unsigned __int8 v12;
  _QWORD v13[11];
  char v14;
  uint64_t v15;
  _QWORD v16[11];
  char v17;
  uint64_t v18;

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v13);
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  std::ostream::operator<<();
  std::stringbuf::str();
  v2 = *MEMORY[0x24BEDB800];
  v16[0] = v2;
  v3 = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  *(_QWORD *)((char *)v16 + *(_QWORD *)(v2 - 24)) = v3;
  v4 = MEMORY[0x24BEDB848];
  v16[1] = MEMORY[0x24BEDB848] + 16;
  if (v17 < 0)
    operator delete((void *)v16[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x20BD27A84](&v18);
  if ((v12 & 0x80u) == 0)
    v5 = v11;
  else
    v5 = (void **)v11[0];
  if ((v12 & 0x80u) == 0)
    v6 = v12;
  else
    v6 = (uint64_t)v11[1];
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)v5, v6);
  if ((char)v12 < 0)
    operator delete(v11[0]);
  if (*(char *)(a1 + 39) < 0)
  {
    if (!*(_QWORD *)(a1 + 24))
      goto LABEL_22;
LABEL_15:
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)" /* ", 4);
    v7 = *(char *)(a1 + 39);
    if (v7 >= 0)
      v8 = a1 + 16;
    else
      v8 = *(_QWORD *)(a1 + 16);
    if (v7 >= 0)
      v9 = *(unsigned __int8 *)(a1 + 39);
    else
      v9 = *(_QWORD *)(a1 + 24);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, v8, v9);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)" */", 3);
    goto LABEL_22;
  }
  if (*(_BYTE *)(a1 + 39))
    goto LABEL_15;
LABEL_22:
  std::stringbuf::str();
  v13[0] = v2;
  *(_QWORD *)((char *)v13 + *(_QWORD *)(v2 - 24)) = v3;
  v13[1] = v4 + 16;
  if (v14 < 0)
    operator delete((void *)v13[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x20BD27A84](&v15);
}

void sub_20A67D6E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49)
{
  if (a15 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

uint64_t mediaplatform::SQLLiteralValue<unsigned long>::sql(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  void *v11[2];
  unsigned __int8 v12;
  _QWORD v13[11];
  char v14;
  uint64_t v15;
  _QWORD v16[11];
  char v17;
  uint64_t v18;

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v13);
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  std::ostream::operator<<();
  std::stringbuf::str();
  v2 = *MEMORY[0x24BEDB800];
  v16[0] = v2;
  v3 = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  *(_QWORD *)((char *)v16 + *(_QWORD *)(v2 - 24)) = v3;
  v4 = MEMORY[0x24BEDB848];
  v16[1] = MEMORY[0x24BEDB848] + 16;
  if (v17 < 0)
    operator delete((void *)v16[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x20BD27A84](&v18);
  if ((v12 & 0x80u) == 0)
    v5 = v11;
  else
    v5 = (void **)v11[0];
  if ((v12 & 0x80u) == 0)
    v6 = v12;
  else
    v6 = (uint64_t)v11[1];
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)v5, v6);
  if ((char)v12 < 0)
    operator delete(v11[0]);
  if (*(char *)(a1 + 39) < 0)
  {
    if (!*(_QWORD *)(a1 + 24))
      goto LABEL_22;
LABEL_15:
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)" /* ", 4);
    v7 = *(char *)(a1 + 39);
    if (v7 >= 0)
      v8 = a1 + 16;
    else
      v8 = *(_QWORD *)(a1 + 16);
    if (v7 >= 0)
      v9 = *(unsigned __int8 *)(a1 + 39);
    else
      v9 = *(_QWORD *)(a1 + 24);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, v8, v9);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)" */", 3);
    goto LABEL_22;
  }
  if (*(_BYTE *)(a1 + 39))
    goto LABEL_15;
LABEL_22:
  std::stringbuf::str();
  v13[0] = v2;
  *(_QWORD *)((char *)v13 + *(_QWORD *)(v2 - 24)) = v3;
  v13[1] = v4 + 16;
  if (v14 < 0)
    operator delete((void *)v13[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x20BD27A84](&v15);
}

void sub_20A67D8EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49)
{
  if (a15 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

uint64_t mlcore::AlbumPropertyAllCompilations(mlcore *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&mlcore::AlbumPropertyAllCompilations(void)::once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&mlcore::AlbumPropertyAllCompilations(void)::once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::AlbumPropertyAllCompilations(void)::$_0 &&>>);
  }
  return mlcore::AlbumPropertyAllCompilations(void)::property;
}

uint64_t mlcore::MoviePropertyIsRental(mlcore *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&mlcore::MoviePropertyIsRental(void)::once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&mlcore::MoviePropertyIsRental(void)::once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::MoviePropertyIsRental(void)::$_0 &&>>);
  }
  return mlcore::MoviePropertyIsRental(void)::property;
}

uint64_t mlcore::SortDescriptor::ordering(mlcore::SortDescriptor *this)
{
  return *((unsigned int *)this + 4);
}

uint64_t mlcore::SortDescriptor::SortDescriptor(uint64_t result, uint64_t a2, int a3)
{
  *(_QWORD *)result = &off_24C337670;
  *(_QWORD *)(result + 8) = a2;
  *(_DWORD *)(result + 16) = a3;
  return result;
}

{
  *(_QWORD *)result = &off_24C337670;
  *(_QWORD *)(result + 8) = a2;
  *(_DWORD *)(result + 16) = a3;
  return result;
}

uint64_t mlcore::ItemPropertyKeepLocalStatus(mlcore *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&mlcore::ItemPropertyKeepLocalStatus(void)::once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&mlcore::ItemPropertyKeepLocalStatus(void)::once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyKeepLocalStatus(void)::$_0 &&>>);
  }
  return mlcore::ItemPropertyKeepLocalStatus(void)::property;
}

uint64_t mlcore::ComparisonPredicate<long long>::ComparisonPredicate(uint64_t result, uint64_t a2, int a3, _QWORD *a4, int a5)
{
  *(_DWORD *)(result + 16) = a5;
  *(_DWORD *)(result + 20) = a3;
  *(_QWORD *)result = &unk_24C339CA8;
  *(_QWORD *)(result + 8) = a2;
  *(_QWORD *)(result + 24) = *a4;
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)(result + 40) = 0;
  return result;
}

{
  *(_DWORD *)(result + 16) = a5;
  *(_DWORD *)(result + 20) = a3;
  *(_QWORD *)result = &unk_24C339CA8;
  *(_QWORD *)(result + 8) = a2;
  *(_QWORD *)(result + 24) = *a4;
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)(result + 40) = 0;
  return result;
}

uint64_t mlcore::TypedEntityClass<mlcore::Movie>::sectionPropertyForOrderingProperty(mlcore *a1, mlcore *a2)
{
  mlcore *v3;
  mlcore *v4;
  mlcore *v5;
  mlcore *v6;
  mlcore *v7;

  v3 = (mlcore *)mlcore::ItemPropertyTitleOrder(a1);
  if (v3 == a2)
    return mlcore::ItemPropertyTitleOrderSection(v3);
  v4 = (mlcore *)mlcore::ItemPropertyAlbumOrder(v3);
  if (v4 == a2)
    return mlcore::ItemPropertyAlbumOrderSection(v4);
  v5 = (mlcore *)mlcore::ItemPropertyArtistOrder(v4);
  if (v5 == a2)
    return mlcore::ItemPropertyArtistOrderSection(v5);
  v6 = (mlcore *)mlcore::ItemPropertyComposerOrder(v5);
  if (v6 == a2)
    return mlcore::ItemPropertyComposerOrderSection(v6);
  v7 = (mlcore *)mlcore::ItemPropertyGenreOrder(v6);
  if (v7 == a2)
    return mlcore::ItemPropertyGenreOrderSection(v7);
  else
    return 0;
}

uint64_t mlcore::TypedEntityClass<mlcore::ItemArtist>::databaseTable()
{
  return *(_QWORD *)mediaplatform::Singleton<mlcore::ItemArtistTable>::sharedInstance();
}

void mlcore::QueryProperty<long long>::_SQLExpression(uint64_t a1@<X0>, uint64_t *a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  char *v8;
  __int128 v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  __int128 v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  __int128 v23;

  v4 = *(_QWORD *)(a1 + 64);
  v5 = (std::__shared_weak_count *)a2[1];
  v21 = *a2;
  v22 = v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t *))(*(_QWORD *)v4 + 72))(&v23, v4, &v21);
  v8 = (char *)operator new(0x30uLL);
  *(_OWORD *)(v8 + 8) = 0u;
  *((_QWORD *)v8 + 3) = &off_24C3311B0;
  *(_QWORD *)v8 = &off_24C33BFA8;
  v9 = v23;
  v23 = 0u;
  *((_OWORD *)v8 + 2) = v9;
  v10 = (std::__shared_weak_count *)*((_QWORD *)&v9 + 1);
  if (*((_QWORD *)&v9 + 1))
  {
    v11 = (unint64_t *)(*((_QWORD *)&v9 + 1) + 8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
    do
      v13 = __ldaxr(v11);
    while (__stlxr(v13 - 1, v11));
    if (!v13)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v9 + 1) + 16))(*((_QWORD *)&v9 + 1));
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  *(_QWORD *)&v14 = v8 + 24;
  *((_QWORD *)&v14 + 1) = v8;
  *a3 = v14;
  v15 = (std::__shared_weak_count *)*((_QWORD *)&v23 + 1);
  if (*((_QWORD *)&v23 + 1))
  {
    v16 = (unint64_t *)(*((_QWORD *)&v23 + 1) + 8);
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  v18 = v22;
  if (v22)
  {
    v19 = (unint64_t *)&v22->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
}

void sub_20A67DC94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void mlcore::AggregateFunctionQuery::_SQLSelectStatement(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  _QWORD *v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  __int128 v28;
  uint64_t v29;
  _OWORD *v30;
  _QWORD *v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  __int128 v35;
  uint64_t v36;
  _OWORD *v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  _QWORD *v44;
  _QWORD *v45;
  char *v46;
  __int128 v47;
  int64x2_t v48;
  __int128 v49;
  uint64_t v50;
  _OWORD *v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  char *v55;
  uint64_t v56;
  char *v57;
  _QWORD *v58;
  _QWORD *v59;
  char *v60;
  __int128 v61;
  int64x2_t v62;
  uint64_t v63;
  unint64_t v64;
  unint64_t v65;
  char *v66;
  uint64_t v67;
  char *v68;
  _QWORD *v69;
  _QWORD *v70;
  char *v71;
  __int128 v72;
  int64x2_t v73;
  uint64_t v74;
  unint64_t *v75;
  unint64_t v76;
  unint64_t *v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t *v81;
  std::__shared_weak_count *v82;
  unint64_t *v83;
  unint64_t v84;
  int64x2_t *v85;
  std::runtime_error *exception;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  std::string __p;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  uint64_t v95;
  std::__shared_weak_count *v96;
  int64x2_t v97;
  _QWORD v98[2];
  std::string v99;
  uint64_t v100[3];
  std::string::size_type *p_size;
  int64x2_t v102;
  uint64_t v103;
  _QWORD *v104;
  __int128 v105;
  uint64_t v106;

  v6 = (std::__shared_weak_count *)a2[1];
  v100[0] = *a2;
  v100[1] = (uint64_t)v6;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  mlcore::RangeQuery::_SQLSelectStatement(a1, v100, a3);
  if (v6)
  {
    v9 = (unint64_t *)&v6->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  v11 = *(unsigned int *)(a1 + 48);
  if (v11 >= 4)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "unknown aggregate function");
    __cxa_throw(exception, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
  }
  std::string::basic_string[abi:ne180100]<0>(&v99, (&off_24C33DA10)[v11]);
  v97 = 0uLL;
  v98[0] = 0;
  v12 = *(_QWORD *)(a1 + 56);
  if (v12)
  {
    v13 = a2[1];
    v95 = *a2;
    v96 = (std::__shared_weak_count *)v13;
    if (v13)
    {
      v14 = (unint64_t *)(v13 + 8);
      do
        v15 = __ldxr(v14);
      while (__stxr(v15 + 1, v14));
    }
    (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t *))(*(_QWORD *)v12 + 96))(&v105, v12, &v95);
    v16 = v96;
    if (v96)
    {
      v17 = (unint64_t *)&v96->__shared_owners_;
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
    if (*(_BYTE *)(a1 + 64))
    {
      v19 = (std::__shared_weak_count *)*((_QWORD *)&v105 + 1);
      v93 = v105;
      if (*((_QWORD *)&v105 + 1))
      {
        v20 = (unint64_t *)(*((_QWORD *)&v105 + 1) + 8);
        do
          v21 = __ldxr(v20);
        while (__stxr(v21 + 1, v20));
      }
      mediaplatform::SQLExpressionList::SQLExpressionList(&p_size, (uint64_t *)&v93);
      v22 = operator new(0x58uLL);
      v22[1] = 0;
      v22[2] = 0;
      *v22 = &off_24C33C050;
      std::string::basic_string[abi:ne180100]<0>(&__p, "DISTINCT");
      mediaplatform::SQLFunctionExpression::SQLFunctionExpression((uint64_t)(v22 + 3), (__int128 *)&__p, (uint64_t)&p_size);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      *(_QWORD *)&v94 = v22 + 3;
      *((_QWORD *)&v94 + 1) = v22;
      p_size = (std::string::size_type *)&off_24C330FB0;
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v102;
      std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
      if (v19)
      {
        v23 = (unint64_t *)&v19->__shared_owners_;
        do
          v24 = __ldaxr(v23);
        while (__stlxr(v24 - 1, v23));
        if (!v24)
        {
          ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
          std::__shared_weak_count::__release_weak(v19);
        }
      }
      v25 = (std::__shared_weak_count *)*((_QWORD *)&v94 + 1);
      v90 = v94;
      if (*((_QWORD *)&v94 + 1))
      {
        v26 = (unint64_t *)(*((_QWORD *)&v94 + 1) + 8);
        do
          v27 = __ldxr(v26);
        while (__stxr(v27 + 1, v26));
      }
      mediaplatform::SQLExpressionList::SQLExpressionList(&__p, (uint64_t *)&v90);
      std::allocate_shared[abi:ne180100]<mediaplatform::SQLFunctionExpression,std::allocator<mediaplatform::SQLFunctionExpression>,std::string &,mediaplatform::SQLExpressionList,void>(&v92, (uint64_t)&v99, (uint64_t)&__p);
      v28 = v92;
      v93 = v92;
      v92 = 0uLL;
      v29 = v97.i64[1];
      if (v97.i64[1] >= v98[0])
      {
        v87 = v28;
        v38 = (v97.i64[1] - v97.i64[0]) >> 4;
        if ((unint64_t)(v38 + 1) >> 60)
          std::vector<std::string>::__throw_length_error[abi:ne180100]();
        v39 = (v98[0] - v97.i64[0]) >> 3;
        if (v39 <= v38 + 1)
          v39 = v38 + 1;
        if (v98[0] - v97.i64[0] >= 0x7FFFFFFFFFFFFFF0uLL)
          v40 = 0xFFFFFFFFFFFFFFFLL;
        else
          v40 = v39;
        v104 = v98;
        v41 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<mediaplatform::DatabaseParameterBase>>>(v40);
        v43 = &v41[16 * v38];
        *(_OWORD *)v43 = v87;
        v93 = 0uLL;
        v44 = (_QWORD *)v97.i64[1];
        v45 = (_QWORD *)v97.i64[0];
        if (v97.i64[1] == v97.i64[0])
        {
          v48 = vdupq_n_s64(v97.u64[1]);
          v46 = &v41[16 * v38];
        }
        else
        {
          v46 = &v41[16 * v38];
          do
          {
            v47 = *((_OWORD *)v44 - 1);
            v44 -= 2;
            *((_OWORD *)v46 - 1) = v47;
            v46 -= 16;
            *v44 = 0;
            v44[1] = 0;
          }
          while (v44 != v45);
          v48 = v97;
        }
        v30 = v43 + 16;
        v97.i64[0] = (uint64_t)v46;
        v97.i64[1] = (uint64_t)(v43 + 16);
        v102 = v48;
        v74 = v98[0];
        v98[0] = &v41[16 * v42];
        v103 = v74;
        p_size = (std::string::size_type *)v48.i64[0];
        std::__split_buffer<std::shared_ptr<mediaplatform::SQLExpression const>>::~__split_buffer((uint64_t)&p_size);
      }
      else
      {
        *(_OWORD *)v97.i64[1] = v28;
        v30 = (_OWORD *)(v29 + 16);
        v93 = 0uLL;
      }
      v97.i64[1] = (uint64_t)v30;
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_24C330FB0;
      p_size = &__p.__r_.__value_.__l.__size_;
      std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&p_size);
      if (v25)
      {
        v75 = (unint64_t *)&v25->__shared_owners_;
        do
          v76 = __ldaxr(v75);
        while (__stlxr(v76 - 1, v75));
        if (!v76)
        {
          ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
          std::__shared_weak_count::__release_weak(v25);
        }
      }
      v32 = (std::__shared_weak_count *)*((_QWORD *)&v94 + 1);
      if (!*((_QWORD *)&v94 + 1))
        goto LABEL_98;
      v77 = (unint64_t *)(*((_QWORD *)&v94 + 1) + 8);
      do
        v78 = __ldaxr(v77);
      while (__stlxr(v78 - 1, v77));
    }
    else
    {
      v32 = (std::__shared_weak_count *)*((_QWORD *)&v105 + 1);
      v92 = v105;
      if (*((_QWORD *)&v105 + 1))
      {
        v33 = (unint64_t *)(*((_QWORD *)&v105 + 1) + 8);
        do
          v34 = __ldxr(v33);
        while (__stxr(v34 + 1, v33));
      }
      mediaplatform::SQLExpressionList::SQLExpressionList(&__p, (uint64_t *)&v92);
      std::allocate_shared[abi:ne180100]<mediaplatform::SQLFunctionExpression,std::allocator<mediaplatform::SQLFunctionExpression>,std::string &,mediaplatform::SQLExpressionList,void>(&v93, (uint64_t)&v99, (uint64_t)&__p);
      v35 = v93;
      v94 = v93;
      v93 = 0uLL;
      v36 = v97.i64[1];
      if (v97.i64[1] >= v98[0])
      {
        v89 = v35;
        v63 = (v97.i64[1] - v97.i64[0]) >> 4;
        if ((unint64_t)(v63 + 1) >> 60)
          std::vector<std::string>::__throw_length_error[abi:ne180100]();
        v64 = (v98[0] - v97.i64[0]) >> 3;
        if (v64 <= v63 + 1)
          v64 = v63 + 1;
        if (v98[0] - v97.i64[0] >= 0x7FFFFFFFFFFFFFF0uLL)
          v65 = 0xFFFFFFFFFFFFFFFLL;
        else
          v65 = v64;
        v104 = v98;
        v66 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<mediaplatform::DatabaseParameterBase>>>(v65);
        v68 = &v66[16 * v63];
        *(_OWORD *)v68 = v89;
        v94 = 0uLL;
        v69 = (_QWORD *)v97.i64[1];
        v70 = (_QWORD *)v97.i64[0];
        if (v97.i64[1] == v97.i64[0])
        {
          v73 = vdupq_n_s64(v97.u64[1]);
          v71 = &v66[16 * v63];
        }
        else
        {
          v71 = &v66[16 * v63];
          do
          {
            v72 = *((_OWORD *)v69 - 1);
            v69 -= 2;
            *((_OWORD *)v71 - 1) = v72;
            v71 -= 16;
            *v69 = 0;
            v69[1] = 0;
          }
          while (v69 != v70);
          v73 = v97;
        }
        v37 = v68 + 16;
        v97.i64[0] = (uint64_t)v71;
        v97.i64[1] = (uint64_t)(v68 + 16);
        v102 = v73;
        v80 = v98[0];
        v98[0] = &v66[16 * v67];
        v103 = v80;
        p_size = (std::string::size_type *)v73.i64[0];
        std::__split_buffer<std::shared_ptr<mediaplatform::SQLExpression const>>::~__split_buffer((uint64_t)&p_size);
      }
      else
      {
        *(_OWORD *)v97.i64[1] = v35;
        v37 = (_OWORD *)(v36 + 16);
        v94 = 0uLL;
      }
      v97.i64[1] = (uint64_t)v37;
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_24C330FB0;
      p_size = &__p.__r_.__value_.__l.__size_;
      std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&p_size);
      if (!v32)
        goto LABEL_98;
      v81 = (unint64_t *)&v32->__shared_owners_;
      do
        v78 = __ldaxr(v81);
      while (__stlxr(v78 - 1, v81));
    }
    if (!v78)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
LABEL_98:
    v82 = (std::__shared_weak_count *)*((_QWORD *)&v105 + 1);
    if (*((_QWORD *)&v105 + 1))
    {
      v83 = (unint64_t *)(*((_QWORD *)&v105 + 1) + 8);
      do
        v84 = __ldaxr(v83);
      while (__stlxr(v84 - 1, v83));
      if (!v84)
      {
        ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
        std::__shared_weak_count::__release_weak(v82);
      }
    }
    goto LABEL_103;
  }
  v31 = operator new(0x58uLL);
  v31[1] = 0;
  v31[2] = 0;
  *v31 = &off_24C33C050;
  if (SHIBYTE(v99.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&__p, v99.__r_.__value_.__l.__data_, v99.__r_.__value_.__l.__size_);
  else
    __p = v99;
  v105 = 0uLL;
  v106 = 0;
  p_size = (std::string::size_type *)&off_24C330FB0;
  v102 = 0uLL;
  v103 = 0;
  std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__init_with_size[abi:ne180100]<std::shared_ptr<mediaplatform::SQLExpression const>*,std::shared_ptr<mediaplatform::SQLExpression const>*>(v102.i8, 0, 0, 0);
  mediaplatform::SQLFunctionExpression::SQLFunctionExpression((uint64_t)(v31 + 3), (__int128 *)&__p, (uint64_t)&p_size);
  p_size = (std::string::size_type *)&off_24C330FB0;
  *(_QWORD *)&v92 = &v102;
  std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v92);
  *(_QWORD *)&v92 = &v105;
  std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v92);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  *(_QWORD *)&v93 = v31 + 3;
  *((_QWORD *)&v93 + 1) = v31;
  v49 = v93;
  v94 = v93;
  v93 = 0uLL;
  v50 = v97.i64[1];
  if (v97.i64[1] >= v98[0])
  {
    v88 = v49;
    v52 = (v97.i64[1] - v97.i64[0]) >> 4;
    if ((unint64_t)(v52 + 1) >> 60)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v53 = (v98[0] - v97.i64[0]) >> 3;
    if (v53 <= v52 + 1)
      v53 = v52 + 1;
    if (v98[0] - v97.i64[0] >= 0x7FFFFFFFFFFFFFF0uLL)
      v54 = 0xFFFFFFFFFFFFFFFLL;
    else
      v54 = v53;
    v104 = v98;
    v55 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<mediaplatform::DatabaseParameterBase>>>(v54);
    v57 = &v55[16 * v52];
    *(_OWORD *)v57 = v88;
    v94 = 0uLL;
    v58 = (_QWORD *)v97.i64[1];
    v59 = (_QWORD *)v97.i64[0];
    if (v97.i64[1] == v97.i64[0])
    {
      v62 = vdupq_n_s64(v97.u64[1]);
      v60 = &v55[16 * v52];
    }
    else
    {
      v60 = &v55[16 * v52];
      do
      {
        v61 = *((_OWORD *)v58 - 1);
        v58 -= 2;
        *((_OWORD *)v60 - 1) = v61;
        v60 -= 16;
        *v58 = 0;
        v58[1] = 0;
      }
      while (v58 != v59);
      v62 = v97;
    }
    v51 = v57 + 16;
    v97.i64[0] = (uint64_t)v60;
    v97.i64[1] = (uint64_t)(v57 + 16);
    v102 = v62;
    v79 = v98[0];
    v98[0] = &v55[16 * v56];
    v103 = v79;
    p_size = (std::string::size_type *)v62.i64[0];
    std::__split_buffer<std::shared_ptr<mediaplatform::SQLExpression const>>::~__split_buffer((uint64_t)&p_size);
  }
  else
  {
    *(_OWORD *)v97.i64[1] = v49;
    v51 = (_OWORD *)(v50 + 16);
    v94 = 0uLL;
  }
  v97.i64[1] = (uint64_t)v51;
LABEL_103:
  v85 = (int64x2_t *)(*(_QWORD *)(*a3 + 8) + 16);
  if (v85 != &v97)
    std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__assign_with_size[abi:ne180100]<std::shared_ptr<mediaplatform::SQLExpression const>*,std::shared_ptr<mediaplatform::SQLExpression const>*>(v85, (uint64_t *)v97.i64[0], (uint64_t *)v97.i64[1], (v97.i64[1] - v97.i64[0]) >> 4);
  p_size = (std::string::size_type *)&v97;
  std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&p_size);
  if (SHIBYTE(v99.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v99.__r_.__value_.__l.__data_);
}

void sub_20A67E440(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,char a24,uint64_t a25,char a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,void *__p,uint64_t a33,int a34,__int16 a35,char a36,char a37)
{
  uint64_t v37;
  std::__shared_weak_count *v38;
  uint64_t v39;
  void *v41;

  std::__shared_weak_count::~__shared_weak_count(v38);
  operator delete(v41);
  *(_QWORD *)(v39 - 88) = &a28;
  std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v39 - 88));
  if (a37 < 0)
    operator delete(__p);
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100](v37);
  _Unwind_Resume(a1);
}

_QWORD *mlcore::PropertyCache::PropertyCache(uint64_t a1, uint64_t a2)
{
  _QWORD *result;

  result = (_QWORD *)mlcore::PropertyCacheBase<long long,int,double,std::string,mediaplatform::Data>::PropertyCacheBase(a1, a2);
  *result = &off_24C3371C0;
  result[26] = &unk_24C3371E8;
  return result;
}

{
  _QWORD *result;

  result = (_QWORD *)mlcore::PropertyCacheBase<long long,int,double,std::string,mediaplatform::Data>::PropertyCacheBase(a1, a2);
  *result = &off_24C3371C0;
  result[26] = &unk_24C3371E8;
  return result;
}

{
  _QWORD *result;

  result = (_QWORD *)mlcore::PropertyCacheBase<long long,int,double,std::string,mediaplatform::Data>::PropertyCacheBase(a1, a2);
  *result = &off_24C3371C0;
  result[26] = &unk_24C3371E8;
  return result;
}

{
  _QWORD *result;

  result = (_QWORD *)mlcore::PropertyCacheBase<long long,int,double,std::string,mediaplatform::Data>::PropertyCacheBase(a1, a2);
  *result = &off_24C3371C0;
  result[26] = &unk_24C3371E8;
  return result;
}

{
  _QWORD *result;

  result = (_QWORD *)mlcore::PropertyCacheBase<long long,int,double,std::string,mediaplatform::Data>::PropertyCacheBase(a1, a2);
  *result = &off_24C3371C0;
  result[26] = &unk_24C3371E8;
  return result;
}

__n128 mlcore::Library::createLibrary@<Q0>(__int128 **a1@<X0>, uint64_t a2@<X1>, const mlcore::LanguageResources *a3@<X2>, __n128 *a4@<X8>)
{
  _QWORD *v8;
  __n128 result;
  std::string __p;

  v8 = operator new(0xE8uLL);
  v8[1] = 0;
  v8[2] = 0;
  *v8 = &off_24C33C750;
  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    __p = *(std::string *)a2;
  mlcore::DeviceLibrary::DeviceLibrary((uint64_t)(v8 + 3), a1, (__int128 *)&__p, a3);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  result.n128_u64[0] = (unint64_t)(v8 + 3);
  result.n128_u64[1] = (unint64_t)v8;
  *a4 = result;
  return result;
}

void sub_20A67E704(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  std::__shared_weak_count *v14;
  void *v16;

  std::__shared_weak_count::~__shared_weak_count(v14);
  operator delete(v16);
  _Unwind_Resume(a1);
}

uint64_t mlcore::DeviceLibrary::DeviceLibrary(uint64_t a1, __int128 **a2, __int128 *a3, const mlcore::LanguageResources *a4)
{
  _QWORD *v8;
  void (**v10)(mediaplatform::FilePath *__hidden);
  uint64_t v11;
  void **v12;

  *(_QWORD *)mlcore::Library::Library(a1, a3, a2) = &off_24C336FE0;
  v8 = operator new(0x1A8uLL);
  v8[1] = 0;
  v8[2] = 0;
  *v8 = &off_24C33C600;
  mediaplatform::FilePath::FilePath(&v10, (std::string *)a3);
  mlcore::LocalLibrary::LocalLibrary((mlcore::LocalLibrary *)(v8 + 3), a2, (const mediaplatform::FilePath *)&v10, a4);
  v10 = &off_24C331570;
  v12 = (void **)&v11;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v12);
  *(_QWORD *)(a1 + 152) = v8 + 3;
  *(_QWORD *)(a1 + 160) = v8;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_DWORD *)(a1 + 200) = 1065353216;
  return a1;
}

void sub_20A67E808(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void **a14)
{
  mlcore::Library *v14;
  std::__shared_weak_count *v15;
  uint64_t v16;
  void *v18;

  a14 = (void **)(v16 + 8);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a14);
  std::__shared_weak_count::~__shared_weak_count(v15);
  operator delete(v18);
  mlcore::Library::~Library(v14);
  _Unwind_Resume(a1);
}

uint64_t mlcore::Library::Library(uint64_t a1, __int128 *a2, __int128 **a3)
{
  __int128 v5;

  *(_QWORD *)a1 = &off_24C33AA40;
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 8), *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v5 = *a2;
    *(_QWORD *)(a1 + 24) = *((_QWORD *)a2 + 2);
    *(_OWORD *)(a1 + 8) = v5;
  }
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 32) = &off_24C331570;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)(a1 + 40), a3[1], a3[2], 0xAAAAAAAAAAAAAAABLL * (((char *)a3[2] - (char *)a3[1]) >> 3));
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 64) = &off_24C331570;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)(a1 + 72), a3[5], a3[6], 0xAAAAAAAAAAAAAAABLL * (((char *)a3[6] - (char *)a3[5]) >> 3));
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 96) = &off_24C331570;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)(a1 + 104), a3[9], a3[10], 0xAAAAAAAAAAAAAAABLL * (((char *)a3[10] - (char *)a3[9]) >> 3));
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 144) = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)(a1 + 128), a3[12], a3[13], 0xAAAAAAAAAAAAAAABLL * (((char *)a3[13] - (char *)a3[12]) >> 3));
  return a1;
}

void sub_20A67E984(_Unwind_Exception *a1, uint64_t a2, ...)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  va_list va;

  va_start(va, a2);
  *(_QWORD *)(v3 + 96) = v4;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  *(_QWORD *)(v3 + 64) = v4;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  *(_QWORD *)(v3 + 32) = v4;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  if (*(char *)(v3 + 31) < 0)
    operator delete(*v2);
  _Unwind_Resume(a1);
}

std::string *mlcore::LanguageResources::LanguageResources(std::string *a1, uint64_t a2, __int128 **a3, __int128 *a4)
{
  std::string *v8;
  __int128 v9;
  std::string *v10;
  __int128 v11;

  a1->__r_.__value_.__r.__words[0] = 0;
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  std::vector<mlcore::LocalizedSectionHeader>::__init_with_size[abi:ne180100]<mlcore::LocalizedSectionHeader*,mlcore::LocalizedSectionHeader*>((uint64_t)a1, *(_QWORD *)a2, *(_QWORD *)(a2 + 8), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3));
  a1[1].__r_.__value_.__r.__words[0] = 0;
  a1[1].__r_.__value_.__l.__size_ = 0;
  a1[1].__r_.__value_.__r.__words[2] = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(a1 + 1, *(__int128 **)(a2 + 24), *(__int128 **)(a2 + 32), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 32) - *(_QWORD *)(a2 + 24)) >> 3));
  v8 = a1 + 2;
  if (*(char *)(a2 + 71) < 0)
  {
    std::string::__init_copy_ctor_external(v8, *(const std::string::value_type **)(a2 + 48), *(_QWORD *)(a2 + 56));
  }
  else
  {
    v9 = *(_OWORD *)(a2 + 48);
    a1[2].__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 64);
    *(_OWORD *)&v8->__r_.__value_.__l.__data_ = v9;
  }
  a1[3].__r_.__value_.__r.__words[0] = 0;
  a1[3].__r_.__value_.__l.__size_ = 0;
  a1[3].__r_.__value_.__r.__words[2] = 0;
  std::vector<std::wstring>::__init_with_size[abi:ne180100]<std::wstring*,std::wstring*>((uint64_t)&a1[3], *a3, a3[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a3[1] - (char *)*a3) >> 3));
  v10 = a1 + 4;
  if (*((char *)a4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v10, *(const std::string::value_type **)a4, *((_QWORD *)a4 + 1));
  }
  else
  {
    v11 = *a4;
    a1[4].__r_.__value_.__r.__words[2] = *((_QWORD *)a4 + 2);
    *(_OWORD *)&v10->__r_.__value_.__l.__data_ = v11;
  }
  return a1;
}

void sub_20A67EB08(_Unwind_Exception *a1, uint64_t a2, ...)
{
  void **v2;
  va_list va;

  va_start(va, a2);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  mlcore::LocalizedSectionsInfo::~LocalizedSectionsInfo(v2);
  _Unwind_Resume(a1);
}

void mlcore::LocalLibrary::_libraryIdentifierFromContentBundleAndRelativePath(__int128 **this@<X0>, const mediaplatform::ContentBundle *a2@<X1>, std::string *a3@<X8>)
{
  std::string *v5;
  std::string v6;

  mlcore::LocalLibrary::_databasePathFromContentBundleAndRelativePath(this, a2, (uint64_t)&v6);
  v5 = std::string::insert(&v6, 0, "local:");
  *a3 = *v5;
  v5->__r_.__value_.__l.__size_ = 0;
  v5->__r_.__value_.__r.__words[2] = 0;
  v5->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v6.__r_.__value_.__l.__data_);
}

void sub_20A67EBC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

mlcore::LocalLibrary *mlcore::LocalLibrary::LocalLibrary(mlcore::LocalLibrary *this, __int128 **a2, const mediaplatform::FilePath *a3, const mlcore::LanguageResources *a4)
{
  __int128 *v8;
  __int128 *v9;
  _QWORD *v10;
  uint64_t v11;
  std::string *v12;
  __int128 v13;
  std::string *v14;
  __int128 v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  std::string *p_p;
  uint64_t v21;
  void (**v23)(mediaplatform::FilePath *__hidden);
  std::string v24;
  std::string __p;
  std::string *v26;
  _QWORD v27[3];
  _QWORD *v28;
  _BYTE v29[24];
  _BYTE *v30;
  _QWORD v31[3];
  _QWORD *v32;
  uint64_t v33;

  v33 = *MEMORY[0x24BDAC8D0];
  mlcore::LocalLibrary::_libraryIdentifierFromContentBundleAndRelativePath(a2, a3, &__p);
  mlcore::Library::Library((uint64_t)this, (__int128 *)&__p, a2);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  *(_QWORD *)this = &off_24C336E68;
  mlcore::LocalLibrary::_databasePathFromContentBundleAndRelativePath(a2, a3, (uint64_t)&__p);
  mediaplatform::FilePath::FilePath((_QWORD *)this + 19, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v8 = (__int128 *)*((_QWORD *)this + 20);
  v9 = (__int128 *)*((_QWORD *)this + 21);
  v23 = &off_24C331570;
  memset(&v24, 0, sizeof(v24));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v24, v8, v9, 0xAAAAAAAAAAAAAAABLL * (((char *)v9 - (char *)v8) >> 3));
  v31[0] = &off_24C33AC70;
  v31[1] = mediaplatform::DefaultConnectionAllocator;
  v32 = v31;
  mediaplatform::DatabaseConnectionPool::DatabaseConnectionPool((uint64_t)this + 184, (uint64_t)&v23, (std::__shared_weak_count_vtbl *)0xA, (std::__shared_weak_count_vtbl *)1, (uint64_t)v31);
  v10 = v32;
  if (v32 == v31)
  {
    v11 = 4;
    v10 = v31;
  }
  else
  {
    if (!v32)
      goto LABEL_10;
    v11 = 5;
  }
  (*(void (**)(void))(*v10 + 8 * v11))();
LABEL_10:
  v23 = &off_24C331570;
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v24;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  *((_QWORD *)this + 35) = 0;
  *((_QWORD *)this + 36) = 0;
  *((_QWORD *)this + 37) = 0;
  std::vector<mlcore::LocalizedSectionHeader>::__init_with_size[abi:ne180100]<mlcore::LocalizedSectionHeader*,mlcore::LocalizedSectionHeader*>((uint64_t)this + 280, *(_QWORD *)a4, *((_QWORD *)a4 + 1), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*((_QWORD *)a4 + 1) - *(_QWORD *)a4) >> 3));
  *((_QWORD *)this + 38) = 0;
  *((_QWORD *)this + 39) = 0;
  *((_QWORD *)this + 40) = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)((char *)this + 304), *((__int128 **)a4 + 3), *((__int128 **)a4 + 4), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a4 + 4) - *((_QWORD *)a4 + 3)) >> 3));
  v12 = (std::string *)((char *)this + 328);
  if (*((char *)a4 + 71) < 0)
  {
    std::string::__init_copy_ctor_external(v12, *((const std::string::value_type **)a4 + 6), *((_QWORD *)a4 + 7));
  }
  else
  {
    v13 = *((_OWORD *)a4 + 3);
    *((_QWORD *)this + 43) = *((_QWORD *)a4 + 8);
    *(_OWORD *)&v12->__r_.__value_.__l.__data_ = v13;
  }
  *((_QWORD *)this + 44) = 0;
  *((_QWORD *)this + 45) = 0;
  *((_QWORD *)this + 46) = 0;
  std::vector<std::wstring>::__init_with_size[abi:ne180100]<std::wstring*,std::wstring*>((uint64_t)this + 352, *((__int128 **)a4 + 9), *((__int128 **)a4 + 10), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a4 + 10) - *((_QWORD *)a4 + 9)) >> 3));
  v14 = (std::string *)((char *)this + 376);
  if (*((char *)a4 + 119) < 0)
  {
    std::string::__init_copy_ctor_external(v14, *((const std::string::value_type **)a4 + 12), *((_QWORD *)a4 + 13));
  }
  else
  {
    v15 = *((_OWORD *)a4 + 6);
    *((_QWORD *)this + 49) = *((_QWORD *)a4 + 14);
    *(_OWORD *)&v14->__r_.__value_.__l.__data_ = v15;
  }
  v26 = 0;
  v27[0] = &off_24C33B0E8;
  v27[1] = this;
  v28 = v27;
  v30 = 0;
  mediaplatform::DBCPSubpool::setDelegateCallbacks(*((mediaplatform::DBCPSubpool **)this + 33), (const mediaplatform::DatabaseConnectionCallbacks *)&__p);
  mediaplatform::DBCPSubpool::setDelegateCallbacks(*((mediaplatform::DBCPSubpool **)this + 31), (const mediaplatform::DatabaseConnectionCallbacks *)&__p);
  v16 = v30;
  if (v30 == v29)
  {
    v17 = 4;
    v16 = v29;
  }
  else
  {
    if (!v30)
      goto LABEL_21;
    v17 = 5;
  }
  (*(void (**)(void))(*v16 + 8 * v17))();
LABEL_21:
  v18 = v28;
  if (v28 == v27)
  {
    v19 = 4;
    v18 = v27;
  }
  else
  {
    if (!v28)
      goto LABEL_26;
    v19 = 5;
  }
  (*(void (**)(void))(*v18 + 8 * v19))();
LABEL_26:
  p_p = v26;
  if (v26 == &__p)
  {
    v21 = 4;
    p_p = &__p;
    goto LABEL_30;
  }
  if (v26)
  {
    v21 = 5;
LABEL_30:
    (*(void (**)(void))(p_p->__r_.__value_.__r.__words[0] + 8 * v21))();
  }
  return this;
}

void sub_20A67EF24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  mlcore::Library *v19;
  _QWORD *v20;
  mediaplatform::DatabaseConnectionPool *v21;
  void **v22;
  uint64_t v23;

  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  mlcore::LocalizedSectionsInfo::~LocalizedSectionsInfo(v22);
  mediaplatform::DatabaseConnectionPool::~DatabaseConnectionPool(v21);
  *v20 = v23;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  mlcore::Library::~Library(v19);
  _Unwind_Resume(a1);
}

void mlcore::LocalLibrary::_databasePathFromContentBundleAndRelativePath(__int128 **this@<X0>, const mediaplatform::ContentBundle *a2@<X1>, uint64_t a3@<X8>)
{
  void (**v6)(mediaplatform::FilePath *__hidden);
  uint64_t v7;
  void (**v8)(mediaplatform::FilePath *__hidden);
  std::string v9;
  void **v10;

  v8 = &off_24C331570;
  memset(&v9, 0, sizeof(v9));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v9, this[1], this[2], 0xAAAAAAAAAAAAAAABLL * (((char *)this[2] - (char *)this[1]) >> 3));
  mediaplatform::FilePath::operator+((uint64_t)&v8, (uint64_t)a2, (uint64_t)&v6);
  mediaplatform::FilePath::str((mediaplatform::FilePath *)&v6, a3);
  v6 = &off_24C331570;
  v10 = (void **)&v7;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v10);
  v8 = &off_24C331570;
  v6 = (void (**)(mediaplatform::FilePath *__hidden))&v9;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v6);
}

void sub_20A67F0F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  *(_QWORD *)(v16 - 40) = v14 + 8;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v16 - 40));
  a14 = v15;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a10);
  _Unwind_Resume(a1);
}

_QWORD *mlcore::LocalizedSortingDetails::LocalizedSortingDetails(_QWORD *a1, __int128 **a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  std::vector<std::wstring>::__init_with_size[abi:ne180100]<std::wstring*,std::wstring*>((uint64_t)a1, *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a2[1] - (char *)*a2) >> 3));
  return a1;
}

{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  std::vector<std::wstring>::__init_with_size[abi:ne180100]<std::wstring*,std::wstring*>((uint64_t)a1, *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a2[1] - (char *)*a2) >> 3));
  return a1;
}

uint64_t mlcore::ArtistPropertyOrderSection(mlcore *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&mlcore::ArtistPropertyOrderSection(void)::once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&mlcore::ArtistPropertyOrderSection(void)::once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ArtistPropertyOrderSection(void)::$_0 &&>>);
  }
  return mlcore::ArtistPropertyOrderSection(void)::property;
}

uint64_t mlcore::AlbumPropertyStoreID(mlcore *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&mlcore::AlbumPropertyStoreID(void)::once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&mlcore::AlbumPropertyStoreID(void)::once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::AlbumPropertyStoreID(void)::$_0 &&>>);
  }
  return mlcore::AlbumPropertyStoreID(void)::property;
}

uint64_t std::__function::__func<std::shared_ptr<mediaplatform::DatabaseConnection> (*)(mediaplatform::FilePath const&,BOOL),std::allocator<std::shared_ptr<mediaplatform::DatabaseConnection> (*)(mediaplatform::FilePath const&,BOOL)>,std::shared_ptr<mediaplatform::DatabaseConnection> ()(mediaplatform::FilePath const&,BOOL)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24C33AC70;
  a2[1] = v2;
  return result;
}

uint64_t mlcore::ItemArtistPropertyStoreID(mlcore *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&mlcore::ItemArtistPropertyStoreID(void)::once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&mlcore::ItemArtistPropertyStoreID(void)::once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemArtistPropertyStoreID(void)::$_0 &&>>);
  }
  return mlcore::ItemArtistPropertyStoreID(void)::property;
}

uint64_t mlcore::PlaylistPropertyCloudUniversalLibraryID(mlcore *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&mlcore::PlaylistPropertyCloudUniversalLibraryID(void)::once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&mlcore::PlaylistPropertyCloudUniversalLibraryID(void)::once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::PlaylistPropertyCloudUniversalLibraryID(void)::$_0 &&>>);
  }
  return mlcore::PlaylistPropertyCloudUniversalLibraryID(void)::property;
}

uint64_t mlcore::PlaylistPropertyIsCuratorOwned(mlcore *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&mlcore::PlaylistPropertyIsCuratorOwned(void)::once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&mlcore::PlaylistPropertyIsCuratorOwned(void)::once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::PlaylistPropertyIsCuratorOwned(void)::$_0 &&>>);
  }
  return mlcore::PlaylistPropertyIsCuratorOwned(void)::property;
}

uint64_t mlcore::PlaylistPropertyCloudGlobalID(mlcore *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&mlcore::PlaylistPropertyCloudGlobalID(void)::once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&mlcore::PlaylistPropertyCloudGlobalID(void)::once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::PlaylistPropertyCloudGlobalID(void)::$_0 &&>>);
  }
  return mlcore::PlaylistPropertyCloudGlobalID(void)::property;
}

uint64_t mlcore::PlaylistPropertyStoreCloudID(mlcore *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&mlcore::PlaylistPropertyStoreCloudID(void)::once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&mlcore::PlaylistPropertyStoreCloudID(void)::once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::PlaylistPropertyStoreCloudID(void)::$_0 &&>>);
  }
  return mlcore::PlaylistPropertyStoreCloudID(void)::property;
}

uint64_t mlcore::PlaylistPropertySyncID(mlcore *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&mlcore::PlaylistPropertySyncID(void)::once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&mlcore::PlaylistPropertySyncID(void)::once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::PlaylistPropertySyncID(void)::$_0 &&>>);
  }
  return mlcore::PlaylistPropertySyncID(void)::property;
}

uint64_t mlcore::AlbumPropertySyncID(mlcore *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&mlcore::AlbumPropertySyncID(void)::once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&mlcore::AlbumPropertySyncID(void)::once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::AlbumPropertySyncID(void)::$_0 &&>>);
  }
  return mlcore::AlbumPropertySyncID(void)::property;
}

_QWORD *mlcore::Query::setPredicate(uint64_t a1, uint64_t *a2)
{
  return std::shared_ptr<mlcore::Predicate>::operator=[abi:ne180100]((_QWORD *)(a1 + 16), *a2, a2[1]);
}

uint64_t mlcore::PlaylistPropertyIsSubscribedAndNotPersonalMix(mlcore *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&mlcore::PlaylistPropertyIsSubscribedAndNotPersonalMix(void)::once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&mlcore::PlaylistPropertyIsSubscribedAndNotPersonalMix(void)::once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::PlaylistPropertyIsSubscribedAndNotPersonalMix(void)::$_0 &&>>);
  }
  return mlcore::PlaylistPropertyIsSubscribedAndNotPersonalMix(void)::property;
}

uint64_t mlcore::ItemPropertyIsStoreRedownloadable(mlcore *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&mlcore::ItemPropertyIsStoreRedownloadable(void)::once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&mlcore::ItemPropertyIsStoreRedownloadable(void)::once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyIsStoreRedownloadable(void)::$_0 &&>>);
  }
  return mlcore::ItemPropertyIsStoreRedownloadable(void)::property;
}

uint64_t mlcore::PlaylistItemPropertyPersistentID(mlcore *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&mlcore::PlaylistItemPropertyPersistentID(void)::once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&mlcore::PlaylistItemPropertyPersistentID(void)::once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::PlaylistItemPropertyPersistentID(void)::$_0 &&>>);
  }
  return mlcore::PlaylistItemPropertyPersistentID(void)::property;
}

uint64_t mlcore::ItemPropertyReportingStoreItemID(mlcore *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&mlcore::ItemPropertyReportingStoreItemID(void)::once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&mlcore::ItemPropertyReportingStoreItemID(void)::once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyReportingStoreItemID(void)::$_0 &&>>);
  }
  return mlcore::ItemPropertyReportingStoreItemID(void)::property;
}

uint64_t mlcore::ItemPropertyAssetStoreItemID(mlcore *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&mlcore::ItemPropertyAssetStoreItemID(void)::once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&mlcore::ItemPropertyAssetStoreItemID(void)::once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyAssetStoreItemID(void)::$_0 &&>>);
  }
  return mlcore::ItemPropertyAssetStoreItemID(void)::property;
}

uint64_t mlcore::ItemPropertyCloudKVSKey(mlcore *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&mlcore::ItemPropertyCloudKVSKey(void)::once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&mlcore::ItemPropertyCloudKVSKey(void)::once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyCloudKVSKey(void)::$_0 &&>>);
  }
  return mlcore::ItemPropertyCloudKVSKey(void)::property;
}

uint64_t mlcore::ItemPropertyIsExplicit(mlcore *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&mlcore::ItemPropertyIsExplicit(void)::once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&mlcore::ItemPropertyIsExplicit(void)::once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyIsExplicit(void)::$_0 &&>>);
  }
  return mlcore::ItemPropertyIsExplicit(void)::property;
}

uint64_t mlcore::ItemPropertyDatePlayed(mlcore *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&mlcore::ItemPropertyDatePlayed(void)::once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&mlcore::ItemPropertyDatePlayed(void)::once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyDatePlayed(void)::$_0 &&>>);
  }
  return mlcore::ItemPropertyDatePlayed(void)::property;
}

uint64_t mlcore::ItemPropertyTotalTime(mlcore *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&mlcore::ItemPropertyTotalTime(void)::once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&mlcore::ItemPropertyTotalTime(void)::once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyTotalTime(void)::$_0 &&>>);
  }
  return mlcore::ItemPropertyTotalTime(void)::property;
}

uint64_t mlcore::ArtistPropertyStoreID(mlcore *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&mlcore::ArtistPropertyStoreID(void)::once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&mlcore::ArtistPropertyStoreID(void)::once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ArtistPropertyStoreID(void)::$_0 &&>>);
  }
  return mlcore::ArtistPropertyStoreID(void)::property;
}

uint64_t mlcore::ItemPropertyTitle(mlcore *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&mlcore::ItemPropertyTitle(void)::once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&mlcore::ItemPropertyTitle(void)::once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyTitle(void)::$_0 &&>>);
  }
  return mlcore::ItemPropertyTitle(void)::property;
}

void std::__function::__func<std::shared_ptr<mlcore::PropertiesQuery::Result> mlcore::GetQueryResult<mlcore::PropertiesQuery>(std::shared_ptr<mlcore::Transaction>,std::shared_ptr<mlcore::PropertiesQuery::Result>)::{lambda(std::shared_ptr<mlcore::PropertiesQueryResult>)#1},std::allocator<std::allocator>,void ()(std::shared_ptr<mlcore::PropertiesQuery::Result> mlcore::GetQueryResult<mlcore::PropertiesQuery>(std::shared_ptr<mlcore::Transaction>,std::shared_ptr<mlcore::PropertiesQuery::Result>)::{lambda(std::shared_ptr<mlcore::PropertiesQueryResult>)#1})>::operator()(uint64_t a1, __int128 *a2)
{
  __int128 v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  v3 = *a2;
  *(_QWORD *)a2 = 0;
  *((_QWORD *)a2 + 1) = 0;
  v4 = (std::__shared_weak_count *)*((_QWORD *)&v3 + 1);
  std::shared_ptr<mlcore::Predicate>::operator=[abi:ne180100](*(_QWORD **)(a1 + 8), v3, *((uint64_t *)&v3 + 1));
  dispatch_semaphore_signal(**(dispatch_semaphore_t **)(a1 + 16));
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

void mlcore::EntityQuery::genresQuery(std::__shared_weak_count **a1@<X0>, char **a2@<X8>)
{
  uint64_t v4;
  char *v5;
  mlcore *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  __int128 v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  char *v17;
  char *v18;
  char *v19;
  char **v20;
  char v21;
  _BYTE v22[8];
  mlcore *v23;
  _DWORD v24[4];
  uint64_t v25;
  int v26;
  uint64_t v27;

  v27 = *MEMORY[0x24BDAC8D0];
  if (!*a1)
  {
    v11 = mlcore::GenrePropertyOrder((mlcore *)a1);
    v12 = (char *)operator new(0x48uLL);
    *(_OWORD *)(v12 + 8) = 0u;
    *(_QWORD *)v12 = &off_24C33CE88;
    *((_QWORD *)v12 + 4) = v11;
    *((_QWORD *)v12 + 5) = 0x100000000;
    *((_QWORD *)v12 + 3) = &unk_24C339CA8;
    *(_QWORD *)&v13 = v12 + 24;
    *((_QWORD *)&v13 + 1) = v12;
    *((_QWORD *)v12 + 6) = 0;
    *(_OWORD *)(v12 + 56) = 0u;
    v14 = a1[1];
    *(_OWORD *)a1 = v13;
    if (v14)
    {
      p_shared_owners = (unint64_t *)&v14->__shared_owners_;
      do
        v16 = __ldaxr(p_shared_owners);
      while (__stlxr(v16 - 1, p_shared_owners));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
  }
  v4 = mlcore::TypedEntityClass<mlcore::Genre>::sharedPointer();
  std::allocate_shared[abi:ne180100]<mlcore::EntityQuery,std::allocator<mlcore::EntityQuery>,mlcore::EntityClass *,std::shared_ptr<mlcore::Predicate> &,void>(a2, v4, (uint64_t)*a1, a1[1]);
  v5 = *a2;
  v23 = (mlcore *)mlcore::GenrePropertyOrder(v6);
  v24[0] = 0;
  v25 = mlcore::GenrePropertyPersistentID(v23);
  v26 = 0;
  v18 = 0;
  v19 = 0;
  v17 = 0;
  v20 = &v17;
  v21 = 0;
  v7 = (char *)operator new(0x30uLL);
  v8 = 0;
  v17 = v7;
  v19 = v7 + 48;
  do
  {
    v9 = &v7[v8 * 4];
    v10 = *(_QWORD *)&v22[v8 * 4 + 8];
    *(_QWORD *)v9 = &off_24C337670;
    *((_QWORD *)v9 + 1) = v10;
    *((_DWORD *)v9 + 4) = v24[v8];
    v8 += 6;
  }
  while (v8 != 12);
  v18 = v7 + 48;
  mlcore::PropertiesQuery::setSortDescriptors(v5, (char *)&v17);
  v20 = &v17;
  std::vector<mlcore::SortDescriptor>::__destroy_vector::operator()[abi:ne180100]((void ***)&v20);
}

void sub_20A67FB08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v4;
  va_list va;

  va_start(va, a4);
  std::vector<mlcore::SortDescriptor>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100](v4);
  _Unwind_Resume(a1);
}

uint64_t mlcore::GenrePropertyOrder(mlcore *this)
{
  mlcore *v1;
  uint64_t v2;
  uint64_t v4[2];

  v1 = (mlcore *)mlcore::GenrePropertyRepresentativeItemPersistentID(this);
  v2 = mlcore::ItemPropertyGenreOrder(v1);
  v4[0] = 0;
  v4[1] = 0;
  return mlcore::GetForeignProperty<long long>((uint64_t)v1, v2, v4);
}

void sub_20A67FB7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t mlcore::ItemPropertyGenreOrder(mlcore *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&mlcore::ItemPropertyGenreOrder(void)::once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&mlcore::ItemPropertyGenreOrder(void)::once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyGenreOrder(void)::$_0 &&>>);
  }
  return mlcore::ItemPropertyGenreOrder(void)::property;
}

uint64_t mlcore::GenrePropertyRepresentativeItemPersistentID(mlcore *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&mlcore::GenrePropertyRepresentativeItemPersistentID(void)::once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&mlcore::GenrePropertyRepresentativeItemPersistentID(void)::once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::GenrePropertyRepresentativeItemPersistentID(void)::$_0 &&>>);
  }
  return mlcore::GenrePropertyRepresentativeItemPersistentID(void)::property;
}

uint64_t mlcore::GenrePropertyPersistentID(mlcore *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&mlcore::GenrePropertyPersistentID(void)::once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&mlcore::GenrePropertyPersistentID(void)::once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::GenrePropertyPersistentID(void)::$_0 &&>>);
  }
  return mlcore::GenrePropertyPersistentID(void)::property;
}

uint64_t mlcore::TypedEntityClass<mlcore::Genre>::sharedPointer()
{
  unint64_t v0;
  char v2;
  char **v3;
  char *v4;

  v0 = atomic_load(&mlcore::TypedEntityClass<mlcore::Genre>::sharedPointer(void)::__once);
  if (v0 != -1)
  {
    v4 = &v2;
    v3 = &v4;
    std::__call_once(&mlcore::TypedEntityClass<mlcore::Genre>::sharedPointer(void)::__once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::TypedEntityClass<mlcore::Genre>::sharedPointer(void)::{lambda(void)#1} &&>>);
  }
  return mlcore::TypedEntityClass<mlcore::Genre>::sharedPointer(void)::__sharedPointer;
}

uint64_t mlcore::TypedEntityClass<mlcore::Genre>::databaseTable()
{
  return *(_QWORD *)mediaplatform::Singleton<mlcore::GenreTable>::sharedInstance();
}

uint64_t mediaplatform::Singleton<mlcore::GenreTable>::sharedInstance()
{
  unsigned __int8 v0;
  mlcore::GenreTable **v2;

  if ((v0 & 1) == 0
  {
    v2 = (mlcore::GenreTable **)operator new();
    _ZNSt3__115allocate_sharedB8ne180100IN6mlcore10GenreTableENS_9allocatorIS2_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(v2);
    mediaplatform::Singleton<mlcore::GenreTable>::sharedInstance(void)::_sharedInstance = (uint64_t)v2;
  }
  return mediaplatform::Singleton<mlcore::GenreTable>::sharedInstance(void)::_sharedInstance;
}

void sub_20A67FD8C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x20BD27AFC](v1, 0x20C40A4A59CD2);
  _Unwind_Resume(a1);
}

uint64_t mlcore::AlbumPropertyGenrePersistentID(mlcore *this)
{
  mlcore *v1;
  uint64_t v2;
  uint64_t v4[2];

  v1 = (mlcore *)mlcore::AlbumPropertyRepresentativeItemPersistentID(this);
  v2 = mlcore::ItemPropertyGenrePersistentID(v1);
  v4[0] = 0;
  v4[1] = 0;
  return mlcore::GetForeignProperty<long long>((uint64_t)v1, v2, v4);
}

void sub_20A67FE04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t mlcore::ItemPropertyGenrePersistentID(mlcore *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&mlcore::ItemPropertyGenrePersistentID(void)::once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&mlcore::ItemPropertyGenrePersistentID(void)::once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyGenrePersistentID(void)::$_0 &&>>);
  }
  return mlcore::ItemPropertyGenrePersistentID(void)::property;
}

mlcore::GenreTable *mlcore::GenreTable::GenreTable(mlcore::GenreTable *this)
{
  void *v3[2];
  char v4;
  _QWORD v5[3];
  char v6;
  void *v7[2];
  char v8;
  _QWORD v9[3];
  char v10;
  void *v11[2];
  char v12;
  _QWORD v13[3];
  char v14;
  void *v15[2];
  char v16;
  _QWORD v17[3];
  char v18;
  void *v19[2];
  char v20;
  _QWORD v21[3];
  char v22;
  void *v23[2];
  char v24;
  _QWORD v25[3];
  char v26;
  void *v27[2];
  char v28;
  _QWORD v29[3];
  char v30;
  void *v31[2];
  char v32;
  _BYTE v33[80];
  void *v34[2];
  char v35;
  void *v36[2];
  char v37;
  _BYTE v38[64];
  void *v39[2];
  char v40;
  _QWORD v41[3];
  char v42;
  void *v43[2];
  char v44;

  std::string::basic_string[abi:ne180100]<0>(v43, "genre");
  std::string::basic_string[abi:ne180100]<0>(v39, "genre_id");
  mlcore::MediaColumn<long long>::MediaColumn((uint64_t)v41, (uint64_t)v39, 1);
  std::string::basic_string[abi:ne180100]<0>(v36, "genre");
  std::string::basic_string[abi:ne180100]<0>(v34, "");
  mlcore::MediaColumn<std::string>::MediaColumn((uint64_t)v38, (uint64_t)v36, (uint64_t)v34);
  std::string::basic_string[abi:ne180100]<0>(v31, "grouping_key");
  mlcore::MediaColumn<mediaplatform::Data>::MediaColumn((uint64_t)v33, (uint64_t)v31);
  std::string::basic_string[abi:ne180100]<0>(v27, "cloud_status");
  mlcore::MediaColumn<int>::MediaColumn((uint64_t)v29, (uint64_t)v27, 0);
  std::string::basic_string[abi:ne180100]<0>(v23, "representative_item_pid");
  mlcore::MediaColumn<long long>::MediaColumn((uint64_t)v25, (uint64_t)v23);
  std::string::basic_string[abi:ne180100]<0>(v19, "keep_local");
  mlcore::MediaColumn<int>::MediaColumn((uint64_t)v21, (uint64_t)v19, 0);
  std::string::basic_string[abi:ne180100]<0>(v15, "keep_local_status");
  mlcore::MediaColumn<int>::MediaColumn((uint64_t)v17, (uint64_t)v15, 0);
  std::string::basic_string[abi:ne180100]<0>(v11, "keep_local_status_reason");
  mlcore::MediaColumn<int>::MediaColumn((uint64_t)v13, (uint64_t)v11, 0);
  std::string::basic_string[abi:ne180100]<0>(v7, "keep_local_constraints");
  mlcore::MediaColumn<int>::MediaColumn((uint64_t)v9, (uint64_t)v7, 0);
  std::string::basic_string[abi:ne180100]<0>(v3, "sync_id");
  mlcore::MediaColumn<long long>::MediaColumn((uint64_t)v5, (uint64_t)v3);
  mlcore::MediaTable<long long,std::string,mediaplatform::Data,int,long long,int,int,int,int,long long>::MediaTable(this, (uint64_t)v43, (uint64_t)v41, (uint64_t)v38, (uint64_t)v33, (uint64_t)v29, (uint64_t)v25, (uint64_t)v21, (uint64_t)v17, (uint64_t)v13, (uint64_t)v9, (uint64_t)v5);
  v5[0] = off_24C335D90;
  if (v6 < 0)
    operator delete((void *)v5[1]);
  if (v4 < 0)
    operator delete(v3[0]);
  v9[0] = off_24C335D90;
  if (v10 < 0)
    operator delete((void *)v9[1]);
  if (v8 < 0)
    operator delete(v7[0]);
  v13[0] = off_24C335D90;
  if (v14 < 0)
    operator delete((void *)v13[1]);
  if (v12 < 0)
    operator delete(v11[0]);
  v17[0] = off_24C335D90;
  if (v18 < 0)
    operator delete((void *)v17[1]);
  if (v16 < 0)
    operator delete(v15[0]);
  v21[0] = off_24C335D90;
  if (v22 < 0)
    operator delete((void *)v21[1]);
  if (v20 < 0)
    operator delete(v19[0]);
  v25[0] = off_24C335D90;
  if (v26 < 0)
    operator delete((void *)v25[1]);
  if (v24 < 0)
    operator delete(v23[0]);
  v29[0] = off_24C335D90;
  if (v30 < 0)
    operator delete((void *)v29[1]);
  if (v28 < 0)
    operator delete(v27[0]);
  mediaplatform::DatabaseColumn<mediaplatform::Data>::~DatabaseColumn((uint64_t)v33);
  if (v32 < 0)
    operator delete(v31[0]);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)v38);
  if (v35 < 0)
    operator delete(v34[0]);
  if (v37 < 0)
    operator delete(v36[0]);
  v41[0] = off_24C335D90;
  if (v42 < 0)
    operator delete((void *)v41[1]);
  if (v40 < 0)
    operator delete(v39[0]);
  if (v44 < 0)
    operator delete(v43[0]);
  *(_QWORD *)this = &off_24C335DE8;
  return this;
}

void sub_20A6801B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,int a45,__int16 a46,char a47,char a48,uint64_t a49,void *a50,uint64_t a51,int a52,__int16 a53,char a54,char a55,uint64_t a56,uint64_t a57,void *a58,uint64_t a59,int a60,__int16 a61,char a62,char a63)
{
  void *a65;
  char a70;
  void *a72;
  char a73;
  void *a74;
  char a75;
  void *a76;
  char a77;
  void *a78;
  char a79;
  void *a80;
  char a81;
  void *a82;
  uint64_t v82;

  if (a25 < 0)
    operator delete(__p);
  if (a18 < 0)
    operator delete(a13);
  if (a40 < 0)
    operator delete(a35);
  if (a33 < 0)
    operator delete(a28);
  if (a55 < 0)
    operator delete(a50);
  if (a48 < 0)
    operator delete(a43);
  if (a70 < 0)
    operator delete(a65);
  if (a63 < 0)
    operator delete(a58);
  if (a75 < 0)
    operator delete(a74);
  if (a73 < 0)
    operator delete(a72);
  if (a79 < 0)
    operator delete(a78);
  if (a77 < 0)
    operator delete(a76);
  if (SLOBYTE(STACK[0x207]) < 0)
    operator delete(a82);
  if (a81 < 0)
    operator delete(a80);
  mediaplatform::DatabaseColumn<mediaplatform::Data>::~DatabaseColumn((uint64_t)&STACK[0x230]);
  if (SLOBYTE(STACK[0x22F]) < 0)
    operator delete((void *)STACK[0x218]);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(v82 - 192);
  if (*(char *)(v82 - 217) < 0)
    operator delete(*(void **)(v82 - 240));
  if (*(char *)(v82 - 193) < 0)
    operator delete(*(void **)(v82 - 216));
  *(_QWORD *)(v82 - 104) = off_24C335D90;
  if (*(char *)(v82 - 73) < 0)
    operator delete(*(void **)(v82 - 96));
  if (*(char *)(v82 - 105) < 0)
    operator delete(*(void **)(v82 - 128));
  if (*(char *)(v82 - 33) < 0)
    operator delete(*(void **)(v82 - 56));
  _Unwind_Resume(a1);
}

void sub_20A6803B4()
{
  JUMPOUT(0x20A6802C8);
}

void sub_20A6803BC()
{
  JUMPOUT(0x20A6802D8);
}

void sub_20A6803C4()
{
  JUMPOUT(0x20A6802F4);
}

void sub_20A6803CC()
{
  JUMPOUT(0x20A680304);
}

void sub_20A6803D4()
{
  JUMPOUT(0x20A680320);
}

void sub_20A6803DC()
{
  JUMPOUT(0x20A680330);
}

void sub_20A6803E4()
{
  JUMPOUT(0x20A680338);
}

void sub_20A6803EC()
{
  JUMPOUT(0x20A680348);
}

void sub_20A6803F4()
{
  JUMPOUT(0x20A680350);
}

void sub_20A6803FC()
{
  JUMPOUT(0x20A680360);
}

void sub_20A680404()
{
  JUMPOUT(0x20A680370);
}

void sub_20A68040C()
{
  JUMPOUT(0x20A68038CLL);
}

void sub_20A680414()
{
  JUMPOUT(0x20A68039CLL);
}

double mlcore::MultiSortDescriptor::MultiSortDescriptor(uint64_t a1, int a2)
{
  double result;

  *(_QWORD *)a1 = &off_24C339DC0;
  result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_DWORD *)(a1 + 40) = 1065353216;
  *(_DWORD *)(a1 + 48) = a2;
  return result;
}

{
  double result;

  *(_QWORD *)a1 = &off_24C339DC0;
  result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_DWORD *)(a1 + 40) = 1065353216;
  *(_DWORD *)(a1 + 48) = a2;
  return result;
}

uint64_t mediaplatform::Singleton<mlcore::ContainerItemReactionTable>::sharedInstance()
{
  unsigned __int8 v0;
  mlcore::ContainerItemReactionTable **v2;

  if ((v0 & 1) == 0
  {
    v2 = (mlcore::ContainerItemReactionTable **)operator new();
    _ZNSt3__115allocate_sharedB8ne180100IN6mlcore26ContainerItemReactionTableENS_9allocatorIS2_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(v2);
    mediaplatform::Singleton<mlcore::ContainerItemReactionTable>::sharedInstance(void)::_sharedInstance = (uint64_t)v2;
  }
  return mediaplatform::Singleton<mlcore::ContainerItemReactionTable>::sharedInstance(void)::_sharedInstance;
}

void sub_20A6804B8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x20BD27AFC](v1, 0x20C40A4A59CD2);
  _Unwind_Resume(a1);
}

uint64_t mlcore::TypedEntityClass<mlcore::PlaylistItemReaction>::sharedPointer()
{
  unint64_t v0;
  char v2;
  char **v3;
  char *v4;

  v0 = atomic_load(&mlcore::TypedEntityClass<mlcore::PlaylistItemReaction>::sharedPointer(void)::__once);
  if (v0 != -1)
  {
    v4 = &v2;
    v3 = &v4;
    std::__call_once(&mlcore::TypedEntityClass<mlcore::PlaylistItemReaction>::sharedPointer(void)::__once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::TypedEntityClass<mlcore::PlaylistItemReaction>::sharedPointer(void)::{lambda(void)#1} &&>>);
  }
  return mlcore::TypedEntityClass<mlcore::PlaylistItemReaction>::sharedPointer(void)::__sharedPointer;
}

mlcore::ContainerItemReactionTable *mlcore::ContainerItemReactionTable::ContainerItemReactionTable(mlcore::ContainerItemReactionTable *this)
{
  std::string *v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  void *v8;
  std::string *v9;
  std::string *v10;
  int v11;
  std::string *v12;
  int v13;
  std::string *v14;
  int v15;
  std::string *v16;
  int v17;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  void *v33[2];
  char v34;
  void (**v35)(mediaplatform::DatabaseColumnBase *__hidden);
  std::string __p;
  int v37;
  uint64_t v38;
  int v39;
  void *v40[2];
  char v41;
  void *v42[2];
  char v43;
  _BYTE v44[8];
  std::string v45;
  int v46;
  char v47;
  std::string v48;
  void *v49[2];
  char v50;
  void (**v51)(mediaplatform::DatabaseColumnBase *__hidden);
  std::string v52;
  int v53;
  uint64_t v54;
  int v55;
  void *v56[2];
  char v57;
  void (**v58)(mediaplatform::DatabaseColumnBase *__hidden);
  std::string v59;
  int v60;
  uint64_t v61;
  int v62;
  void *v63[2];
  char v64;
  void (**v65)(mediaplatform::DatabaseColumnBase *__hidden);
  std::string v66;
  int v67;
  uint64_t v68;
  int v69;
  std::string __s;
  uint64_t (**v71)();
  std::string v72;
  int v73;
  uint64_t v74;
  int v75;
  uint64_t (**v76)();
  std::string v77;
  int v78;
  char v79;
  std::string v80;
  uint64_t (**v81)();
  std::string v82;
  int v83;
  uint64_t v84;
  int v85;
  uint64_t (**v86)();
  std::string v87;
  int v88;
  uint64_t v89;
  int v90;
  uint64_t (**v91)();
  std::string v92;
  int v93;
  uint64_t v94;
  int v95;
  std::string v96;
  uint64_t (**v97)();
  std::string v98;
  int v99;
  uint64_t v100;
  int v101;
  uint64_t (**v102)();
  std::string v103;
  int v104;
  char v105;
  std::string v106;
  uint64_t (**v107)();
  std::string v108;
  int v109;
  uint64_t v110;
  int v111;
  uint64_t (**v112)();
  std::string v113;
  int v114;
  uint64_t v115;
  int v116;
  uint64_t (**v117)();
  std::string v118;
  int v119;
  uint64_t v120;
  int v121;
  uint64_t (**v122)();
  std::string v123;
  int v124;
  uint64_t v125;
  int v126;
  uint64_t (**v127)();
  std::string v128;
  int v129;
  char v130;
  std::string v131;
  uint64_t (**v132)();
  std::string v133;
  int v134;
  uint64_t v135;
  int v136;
  uint64_t (**v137)();
  std::string v138;
  int v139;
  uint64_t v140;
  int v141;
  uint64_t (**v142)();
  std::string v143;
  int v144;
  uint64_t v145;
  int v146;
  uint64_t (**v147)();
  std::string v148;
  int v149;
  char v150;
  std::string v151;
  uint64_t (**v152)();
  std::string v153;
  int v154;
  uint64_t v155;
  int v156;
  void (**v157)(mediaplatform::DatabaseColumnBase *__hidden);
  std::string v158;
  int v159;
  uint64_t v160;
  int v161;
  uint64_t (**v162)();
  std::string v163;
  int v164;
  char v165;
  std::string v166;
  void (**v167)(mediaplatform::DatabaseColumnBase *__hidden);
  std::string v168;
  int v169;
  uint64_t v170;
  int v171;

  std::string::basic_string[abi:ne180100]<0>(&__s, "container_item_reaction");
  std::string::basic_string[abi:ne180100]<0>(v63, "container_item_reaction_pid");
  mlcore::MediaColumn<long long>::MediaColumn((uint64_t)&v65, (uint64_t)v63, 1);
  std::string::basic_string[abi:ne180100]<0>(v56, "container_item_pid");
  mlcore::MediaColumn<long long>::MediaColumn((uint64_t)&v58, (uint64_t)v56);
  std::string::basic_string[abi:ne180100]<0>(v49, "person_pid");
  mlcore::MediaColumn<long long>::MediaColumn((uint64_t)&v51, (uint64_t)v49);
  std::string::basic_string[abi:ne180100]<0>(v42, "reaction");
  std::string::basic_string[abi:ne180100]<0>(v40, "");
  mlcore::MediaColumn<std::string>::MediaColumn((uint64_t)v44, (uint64_t)v42, (uint64_t)v40);
  std::string::basic_string[abi:ne180100]<0>(v33, "date");
  mlcore::MediaColumn<long long>::MediaColumn((uint64_t)&v35, (uint64_t)v33);
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v96, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
  else
    v96 = __s;
  if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v92, v66.__r_.__value_.__l.__data_, v66.__r_.__value_.__l.__size_);
  else
    v92 = v66;
  v91 = off_24C335B18;
  v94 = v68;
  v29 = v67;
  v93 = v67;
  v95 = v69;
  if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v87, v59.__r_.__value_.__l.__data_, v59.__r_.__value_.__l.__size_);
  else
    v87 = v59;
  v86 = off_24C335B18;
  v89 = v61;
  v30 = v60;
  v88 = v60;
  v90 = v62;
  if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v82, v52.__r_.__value_.__l.__data_, v52.__r_.__value_.__l.__size_);
  else
    v82 = v52;
  v81 = off_24C335B18;
  v84 = v54;
  v32 = v53;
  v83 = v53;
  v85 = v55;
  v76 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v77, v45.__r_.__value_.__l.__data_, v45.__r_.__value_.__l.__size_);
  else
    v77 = v45;
  v78 = v46;
  v76 = &off_24C335AB8;
  v79 = v47;
  if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v80, v48.__r_.__value_.__l.__data_, v48.__r_.__value_.__l.__size_);
  else
    v80 = v48;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v72, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  else
    v72 = __p;
  v71 = off_24C335B18;
  v74 = v38;
  v31 = v37;
  v73 = v37;
  v75 = v39;
  *(_QWORD *)this = &off_24C330F50;
  v2 = (std::string *)((char *)this + 8);
  v3 = SHIBYTE(v96.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v96.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v2, v96.__r_.__value_.__l.__data_, v96.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = *(_OWORD *)&v96.__r_.__value_.__l.__data_;
    *((_QWORD *)this + 3) = *((_QWORD *)&v96.__r_.__value_.__l + 2);
  }
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 6) = 0;
  *((_QWORD *)this + 7) = 0;
  *(_QWORD *)this = &off_24C335A28;
  *((_QWORD *)this + 8) = 0;
  *((_QWORD *)this + 9) = 0;
  v28 = SHIBYTE(v92.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v92.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v118, v92.__r_.__value_.__l.__data_, v92.__r_.__value_.__l.__size_);
  else
    v118 = v92;
  v117 = off_24C335B18;
  v120 = v94;
  v119 = v29;
  v121 = v95;
  v4 = SHIBYTE(v87.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v87.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v113, v87.__r_.__value_.__l.__data_, v87.__r_.__value_.__l.__size_);
  else
    v113 = v87;
  v112 = off_24C335B18;
  v115 = v89;
  v114 = v30;
  v116 = v90;
  v26 = SHIBYTE(v82.__r_.__value_.__r.__words[2]);
  v27 = v3;
  if (SHIBYTE(v82.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v108, v82.__r_.__value_.__l.__data_, v82.__r_.__value_.__l.__size_);
  else
    v108 = v82;
  v107 = off_24C335B18;
  v110 = v84;
  v109 = v32;
  v111 = v85;
  v102 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v77.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v103, v77.__r_.__value_.__l.__data_, v77.__r_.__value_.__l.__size_);
  else
    v103 = v77;
  v104 = v78;
  v102 = &off_24C335AB8;
  v105 = v79;
  if (SHIBYTE(v80.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v106, v80.__r_.__value_.__l.__data_, v80.__r_.__value_.__l.__size_);
  else
    v106 = v80;
  v24 = SHIBYTE(v72.__r_.__value_.__r.__words[2]);
  v25 = v4;
  if (SHIBYTE(v72.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v98, v72.__r_.__value_.__l.__data_, v72.__r_.__value_.__l.__size_);
  else
    v98 = v72;
  v97 = off_24C335B18;
  v100 = v74;
  v99 = v31;
  v101 = v75;
  v23 = SHIBYTE(v113.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v113.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v138, v113.__r_.__value_.__l.__data_, v113.__r_.__value_.__l.__size_);
  else
    v138 = v113;
  v137 = off_24C335B18;
  v140 = v89;
  v139 = v30;
  v141 = v90;
  v22 = SHIBYTE(v108.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v108.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v133, v108.__r_.__value_.__l.__data_, v108.__r_.__value_.__l.__size_);
  else
    v133 = v108;
  v132 = off_24C335B18;
  v135 = v84;
  v134 = v32;
  v136 = v85;
  v127 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v103.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v128, v103.__r_.__value_.__l.__data_, v103.__r_.__value_.__l.__size_);
  else
    v128 = v103;
  v129 = v104;
  v127 = &off_24C335AB8;
  v130 = v105;
  if (SHIBYTE(v106.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v131, v106.__r_.__value_.__l.__data_, v106.__r_.__value_.__l.__size_);
  else
    v131 = v106;
  v21 = SHIBYTE(v98.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v98.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v123, v98.__r_.__value_.__l.__data_, v98.__r_.__value_.__l.__size_);
  else
    v123 = v98;
  v122 = off_24C335B18;
  v125 = v74;
  v124 = v31;
  v126 = v75;
  v20 = SHIBYTE(v133.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v133.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v153, v133.__r_.__value_.__l.__data_, v133.__r_.__value_.__l.__size_);
  else
    v153 = v133;
  v152 = off_24C335B18;
  v155 = v84;
  v154 = v32;
  v156 = v85;
  v147 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v128.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v148, v128.__r_.__value_.__l.__data_, v128.__r_.__value_.__l.__size_);
  else
    v148 = v128;
  v149 = v129;
  v147 = &off_24C335AB8;
  v150 = v130;
  if (SHIBYTE(v131.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v151, v131.__r_.__value_.__l.__data_, v131.__r_.__value_.__l.__size_);
  else
    v151 = v131;
  v5 = SHIBYTE(v123.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v123.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v143, v123.__r_.__value_.__l.__data_, v123.__r_.__value_.__l.__size_);
  else
    v143 = v123;
  v142 = off_24C335B18;
  v145 = v74;
  v144 = v31;
  v146 = v75;
  v162 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v148.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v163, v148.__r_.__value_.__l.__data_, v148.__r_.__value_.__l.__size_);
  else
    v163 = v148;
  v164 = v149;
  v162 = &off_24C335AB8;
  v165 = v150;
  v19 = v5;
  if (SHIBYTE(v151.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v166, v151.__r_.__value_.__l.__data_, v151.__r_.__value_.__l.__size_);
  else
    v166 = v151;
  v157 = off_24C335D90;
  v6 = SHIBYTE(v143.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v143.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v158, v143.__r_.__value_.__l.__data_, v143.__r_.__value_.__l.__size_);
  else
    v158 = v143;
  v160 = v74;
  v159 = v31;
  v161 = v75;
  v167 = off_24C335D90;
  v7 = SHIBYTE(v158.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v158.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v168, v158.__r_.__value_.__l.__data_, v158.__r_.__value_.__l.__size_);
  else
    v168 = v158;
  v170 = v74;
  v169 = v31;
  v171 = v75;
  *((_QWORD *)this + 10) = off_24C335D90;
  if (SHIBYTE(v168.__r_.__value_.__r.__words[2]) < 0)
  {
    v8 = (void *)v168.__r_.__value_.__r.__words[0];
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 88), v168.__r_.__value_.__l.__data_, v168.__r_.__value_.__l.__size_);
    *((_DWORD *)this + 28) = v31;
    *((_QWORD *)this + 10) = off_24C335B18;
    *(_QWORD *)((char *)this + 116) = v74;
    *((_DWORD *)this + 31) = v75;
    v167 = off_24C335D90;
    operator delete(v8);
  }
  else
  {
    *(std::string *)((char *)this + 88) = v168;
    *((_DWORD *)this + 28) = v31;
    *((_QWORD *)this + 10) = off_24C335B18;
    *(_QWORD *)((char *)this + 116) = v74;
    *((_DWORD *)this + 31) = v75;
    v167 = off_24C335D90;
  }
  *((_QWORD *)this + 16) = off_24C335D90;
  if (SHIBYTE(v163.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 136), v163.__r_.__value_.__l.__data_, v163.__r_.__value_.__l.__size_);
  else
    *(std::string *)((char *)this + 136) = v163;
  *((_DWORD *)this + 40) = v164;
  *((_QWORD *)this + 16) = &off_24C335AB8;
  *((_BYTE *)this + 164) = v165;
  v9 = (std::string *)((char *)this + 168);
  if (SHIBYTE(v166.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v9, v166.__r_.__value_.__l.__data_, v166.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = *(_OWORD *)&v166.__r_.__value_.__l.__data_;
    *((_QWORD *)this + 23) = *((_QWORD *)&v166.__r_.__value_.__l + 2);
  }
  v157 = off_24C335D90;
  if (v7 < 0)
    operator delete(v158.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v162);
  *((_QWORD *)this + 24) = off_24C335D90;
  v10 = (std::string *)((char *)this + 200);
  v11 = SHIBYTE(v153.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v153.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v10, v153.__r_.__value_.__l.__data_, v153.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v10->__r_.__value_.__l.__data_ = *(_OWORD *)&v153.__r_.__value_.__l.__data_;
    *((_QWORD *)this + 27) = *((_QWORD *)&v153.__r_.__value_.__l + 2);
  }
  *((_DWORD *)this + 56) = v32;
  *((_QWORD *)this + 24) = off_24C335B18;
  *(_QWORD *)((char *)this + 228) = v155;
  *((_DWORD *)this + 59) = v156;
  if (v6 < 0)
    operator delete(v143.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v147);
  if (v11 < 0)
    operator delete(v153.__r_.__value_.__l.__data_);
  *((_QWORD *)this + 30) = off_24C335D90;
  v12 = (std::string *)((char *)this + 248);
  v13 = SHIBYTE(v138.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v138.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v12, v138.__r_.__value_.__l.__data_, v138.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v12->__r_.__value_.__l.__data_ = *(_OWORD *)&v138.__r_.__value_.__l.__data_;
    *((_QWORD *)this + 33) = *((_QWORD *)&v138.__r_.__value_.__l + 2);
  }
  *((_DWORD *)this + 68) = v30;
  *((_QWORD *)this + 30) = off_24C335B18;
  *(_QWORD *)((char *)this + 276) = v140;
  *((_DWORD *)this + 71) = v141;
  if (v19 < 0)
    operator delete(v123.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v127);
  if (v20 < 0)
  {
    operator delete(v133.__r_.__value_.__l.__data_);
    if ((v13 & 0x80000000) == 0)
      goto LABEL_107;
  }
  else if ((v13 & 0x80000000) == 0)
  {
    goto LABEL_107;
  }
  operator delete(v138.__r_.__value_.__l.__data_);
LABEL_107:
  *((_QWORD *)this + 36) = off_24C335D90;
  v14 = (std::string *)((char *)this + 296);
  v15 = SHIBYTE(v118.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v118.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v14, v118.__r_.__value_.__l.__data_, v118.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v14->__r_.__value_.__l.__data_ = *(_OWORD *)&v118.__r_.__value_.__l.__data_;
    *((_QWORD *)this + 39) = *((_QWORD *)&v118.__r_.__value_.__l + 2);
  }
  *((_DWORD *)this + 80) = v29;
  *((_QWORD *)this + 36) = off_24C335B18;
  *(_QWORD *)((char *)this + 324) = v120;
  *((_DWORD *)this + 83) = v121;
  if (v21 < 0)
    operator delete(v98.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v102);
  if (v22 < 0)
    operator delete(v108.__r_.__value_.__l.__data_);
  if (v23 < 0)
  {
    operator delete(v113.__r_.__value_.__l.__data_);
    if ((v15 & 0x80000000) == 0)
      goto LABEL_118;
  }
  else if ((v15 & 0x80000000) == 0)
  {
    goto LABEL_118;
  }
  operator delete(v118.__r_.__value_.__l.__data_);
LABEL_118:
  v71 = (uint64_t (**)())off_24C335D90;
  if (v24 < 0)
    operator delete(v72.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v76);
  v81 = (uint64_t (**)())off_24C335D90;
  if (v26 < 0)
    operator delete(v82.__r_.__value_.__l.__data_);
  v86 = (uint64_t (**)())off_24C335D90;
  if (v25 < 0)
    operator delete(v87.__r_.__value_.__l.__data_);
  v91 = (uint64_t (**)())off_24C335D90;
  if (v28 < 0)
  {
    operator delete(v92.__r_.__value_.__l.__data_);
    if ((v27 & 0x80000000) == 0)
      goto LABEL_126;
  }
  else if ((v27 & 0x80000000) == 0)
  {
    goto LABEL_126;
  }
  operator delete(v96.__r_.__value_.__l.__data_);
LABEL_126:
  *(_QWORD *)this = off_24C336590;
  *((_QWORD *)this + 42) = off_24C335D90;
  if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 344), v66.__r_.__value_.__l.__data_, v66.__r_.__value_.__l.__size_);
  else
    *(std::string *)((char *)this + 344) = v66;
  *((_DWORD *)this + 92) = v67;
  *(_QWORD *)((char *)this + 372) = v68;
  *((_DWORD *)this + 95) = v69;
  *((_QWORD *)this + 42) = off_24C336AC0;
  *((_QWORD *)this + 48) = off_24C335D90;
  if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 392), v59.__r_.__value_.__l.__data_, v59.__r_.__value_.__l.__size_);
  else
    *(std::string *)((char *)this + 392) = v59;
  *((_DWORD *)this + 104) = v60;
  *(_QWORD *)((char *)this + 420) = v61;
  *((_DWORD *)this + 107) = v62;
  *((_QWORD *)this + 48) = off_24C336AC0;
  *((_QWORD *)this + 54) = off_24C335D90;
  if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 440), v52.__r_.__value_.__l.__data_, v52.__r_.__value_.__l.__size_);
  else
    *(std::string *)((char *)this + 440) = v52;
  *((_DWORD *)this + 116) = v53;
  *(_QWORD *)((char *)this + 468) = v54;
  *((_DWORD *)this + 119) = v55;
  *((_QWORD *)this + 54) = off_24C336AC0;
  std::__tuple_leaf<3ul,mlcore::MediaColumn<std::string>,false>::__tuple_leaf[abi:ne180100]<mlcore::MediaColumn<std::string>&,void>((uint64_t)this + 480, (uint64_t)v44);
  *((_QWORD *)this + 68) = off_24C335D90;
  v16 = (std::string *)((char *)this + 552);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v16, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    v17 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
    *((_DWORD *)this + 144) = v37;
    *(_QWORD *)((char *)this + 580) = v38;
    *((_DWORD *)this + 147) = v39;
    *((_QWORD *)this + 68) = off_24C336AC0;
    v35 = off_24C335D90;
    if (v17 < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  else
  {
    *(_OWORD *)&v16->__r_.__value_.__l.__data_ = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    *((_QWORD *)this + 71) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
    *((_DWORD *)this + 144) = v37;
    *(_QWORD *)((char *)this + 580) = v38;
    *((_DWORD *)this + 147) = v39;
    *((_QWORD *)this + 68) = off_24C336AC0;
    v35 = off_24C335D90;
  }
  if (v34 < 0)
    operator delete(v33[0]);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)v44);
  if (v41 < 0)
    operator delete(v40[0]);
  if (v43 < 0)
    operator delete(v42[0]);
  v51 = off_24C335D90;
  if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v52.__r_.__value_.__l.__data_);
  if (v50 < 0)
    operator delete(v49[0]);
  v58 = off_24C335D90;
  if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v59.__r_.__value_.__l.__data_);
  if (v57 < 0)
    operator delete(v56[0]);
  v65 = off_24C335D90;
  if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v66.__r_.__value_.__l.__data_);
  if (v64 < 0)
    operator delete(v63[0]);
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__s.__r_.__value_.__l.__data_);
  *(_QWORD *)this = off_24C33A550;
  return this;
}

void sub_20A6814D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50,char a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,void *a59,uint64_t a60,int a61,__int16 a62,char a63)
{
  char a64;
  void (**a65)(mediaplatform::DatabaseColumnBase *__hidden);
  void *a66;
  char a71;
  void *a72;
  char a73;
  void (**a74)(mediaplatform::DatabaseColumnBase *__hidden);
  void *a75;
  char a76;
  void *a77;
  char a78;
  void (**a79)(mediaplatform::DatabaseColumnBase *__hidden);
  void *a80;
  char a81;
  uint64_t v81;
  void **v82;
  void **v83;
  void **v84;
  uint64_t v85;

  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(v85);
  *(_QWORD *)(v81 + 432) = off_24C335D90;
  if (*(char *)(v81 + 463) < 0)
    operator delete(*v84);
  *(_QWORD *)(v81 + 384) = off_24C335D90;
  if (*(char *)(v81 + 415) < 0)
    operator delete(*v83);
  *(_QWORD *)(v81 + 336) = off_24C335D90;
  if (*(char *)(v81 + 367) < 0)
    operator delete(*v82);
  mediaplatform::DatabaseTable<long long,long long,long long,std::string,long long>::~DatabaseTable(v81);
  if (a36 < 0)
    operator delete(__p);
  if (a29 < 0)
    operator delete(a24);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&a51);
  if (a44 < 0)
    operator delete(a39);
  if (a50 < 0)
    operator delete(a45);
  a65 = off_24C335D90;
  if (a71 < 0)
    operator delete(a66);
  if (a64 < 0)
    operator delete(a59);
  a74 = off_24C335D90;
  if (a76 < 0)
    operator delete(a75);
  if (a73 < 0)
    operator delete(a72);
  a79 = off_24C335D90;
  if (a81 < 0)
    operator delete(a80);
  if (a78 < 0)
    operator delete(a77);
  if (SLOBYTE(STACK[0x21F]) < 0)
    operator delete((void *)STACK[0x208]);
  _Unwind_Resume(a1);
}

void sub_20A681964()
{
  JUMPOUT(0x20A681890);
}

void sub_20A68196C()
{
  JUMPOUT(0x20A6818A0);
}

void sub_20A681974()
{
  JUMPOUT(0x20A6818A8);
}

void sub_20A68197C()
{
  JUMPOUT(0x20A6818B8);
}

void sub_20A681984()
{
  JUMPOUT(0x20A6818C8);
}

void sub_20A68198C()
{
  JUMPOUT(0x20A6818E4);
}

void sub_20A681994()
{
  JUMPOUT(0x20A6818F4);
}

void sub_20A68199C()
{
  JUMPOUT(0x20A681910);
}

void sub_20A6819A4()
{
  JUMPOUT(0x20A681920);
}

void sub_20A6819AC()
{
  JUMPOUT(0x20A68193CLL);
}

void sub_20A6819B4()
{
  JUMPOUT(0x20A68194CLL);
}

mlcore::CloudKVSTable *mlcore::CloudKVSTable::CloudKVSTable(mlcore::CloudKVSTable *this)
{
  std::string *v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  std::string *v8;
  int v9;
  std::string *v10;
  int v11;
  std::string *v12;
  int v13;
  std::string *v14;
  std::string *v15;
  int v16;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  int v39;
  void *v40[2];
  char v41;
  void (**v42)(mediaplatform::DatabaseColumnBase *__hidden);
  std::string __p;
  int v44;
  uint64_t v45;
  int v46;
  void *v47[2];
  char v48;
  void (**v49)(mediaplatform::DatabaseColumnBase *__hidden);
  std::string v50;
  int v51;
  uint64_t v52;
  int v53;
  void *v54[2];
  char v55;
  void (**v56)(mediaplatform::DatabaseColumnBase *__hidden);
  std::string v57;
  int v58;
  uint64_t v59;
  int v60;
  void *v61[2];
  char v62;
  void (**v63)(mediaplatform::DatabaseColumnBase *__hidden);
  std::string v64;
  int v65;
  uint64_t v66;
  int v67;
  void *v68[2];
  char v69;
  void (**v70)(mediaplatform::DatabaseColumnBase *__hidden);
  std::string v71;
  int v72;
  uint64_t v73;
  int v74;
  void *v75[2];
  char v76;
  _BYTE v77[8];
  std::string v78;
  int v79;
  char v80;
  std::string v81;
  std::string __s;
  uint64_t (**v83)();
  std::string v84;
  int v85;
  uint64_t v86;
  int v87;
  uint64_t (**v88)();
  std::string v89;
  int v90;
  uint64_t v91;
  int v92;
  uint64_t (**v93)();
  std::string v94;
  int v95;
  uint64_t v96;
  int v97;
  uint64_t (**v98)();
  std::string v99;
  int v100;
  uint64_t v101;
  int v102;
  uint64_t (**v103)();
  std::string v104;
  int v105;
  uint64_t v106;
  int v107;
  uint64_t (**v108)();
  std::string v109;
  int v110;
  char v111;
  std::string v112;
  std::string v113;
  uint64_t (**v114)();
  std::string v115;
  int v116;
  uint64_t v117;
  int v118;
  uint64_t (**v119)();
  std::string v120;
  int v121;
  uint64_t v122;
  int v123;
  uint64_t (**v124)();
  std::string v125;
  int v126;
  uint64_t v127;
  int v128;
  uint64_t (**v129)();
  std::string v130;
  int v131;
  uint64_t v132;
  int v133;
  uint64_t (**v134)();
  std::string v135;
  int v136;
  uint64_t v137;
  int v138;
  uint64_t (**v139)();
  std::string v140;
  int v141;
  char v142;
  std::string v143;
  uint64_t (**v144)();
  std::string v145;
  int v146;
  uint64_t v147;
  int v148;
  uint64_t (**v149)();
  std::string v150;
  int v151;
  uint64_t v152;
  int v153;
  uint64_t (**v154)();
  std::string v155;
  int v156;
  uint64_t v157;
  int v158;
  uint64_t (**v159)();
  std::string v160;
  int v161;
  uint64_t v162;
  int v163;
  uint64_t (**v164)();
  std::string v165;
  int v166;
  uint64_t v167;
  int v168;
  void (**v169)(mediaplatform::DatabaseColumnBase *__hidden);
  std::string v170;
  int v171;
  uint64_t v172;
  int v173;
  uint64_t (**v174)();
  std::string v175;
  int v176;
  uint64_t v177;
  int v178;
  uint64_t (**v179)();
  std::string v180;
  int v181;
  uint64_t v182;
  int v183;
  uint64_t (**v184)();
  std::string v185;
  int v186;
  uint64_t v187;
  int v188;
  void (**v189)(mediaplatform::DatabaseColumnBase *__hidden);
  std::string v190;
  int v191;
  uint64_t v192;
  int v193;
  void (**v194)(mediaplatform::DatabaseColumnBase *__hidden);
  std::string v195;
  int v196;
  uint64_t v197;
  int v198;
  void (**v199)(mediaplatform::DatabaseColumnBase *__hidden);
  std::string v200;
  int v201;
  uint64_t v202;
  int v203;
  uint64_t (**v204)();
  std::string v205;
  int v206;
  uint64_t v207;
  int v208;
  uint64_t (**v209)();
  std::string v210;
  int v211;
  uint64_t v212;
  int v213;

  std::string::basic_string[abi:ne180100]<0>(&__s, "cloud_kvs");
  std::string::basic_string[abi:ne180100]<0>(v75, "key");
  mlcore::MediaColumn<std::string>::MediaColumn((uint64_t)v77, (uint64_t)v75, 1);
  std::string::basic_string[abi:ne180100]<0>(v68, "play_count_user");
  mlcore::MediaColumn<long long>::MediaColumn((uint64_t)&v70, (uint64_t)v68);
  std::string::basic_string[abi:ne180100]<0>(v61, "has_been_played");
  mlcore::MediaColumn<long long>::MediaColumn((uint64_t)&v63, (uint64_t)v61);
  std::string::basic_string[abi:ne180100]<0>(v54, "bookmark_time_ms");
  mlcore::MediaColumn<double>::MediaColumn((uint64_t)&v56, (uint64_t)v54);
  std::string::basic_string[abi:ne180100]<0>(v47, "bookmark_sync_timestamp");
  mlcore::MediaColumn<long long>::MediaColumn((uint64_t)&v49, (uint64_t)v47);
  std::string::basic_string[abi:ne180100]<0>(v40, "bookmark_sync_revision");
  mlcore::MediaColumn<long long>::MediaColumn((uint64_t)&v42, (uint64_t)v40);
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v113, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
  else
    v113 = __s;
  v108 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v78.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v109, v78.__r_.__value_.__l.__data_, v78.__r_.__value_.__l.__size_);
  else
    v109 = v78;
  v110 = v79;
  v108 = &off_24C335AB8;
  v111 = v80;
  if (SHIBYTE(v81.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v112, v81.__r_.__value_.__l.__data_, v81.__r_.__value_.__l.__size_);
  else
    v112 = v81;
  if (SHIBYTE(v71.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v104, v71.__r_.__value_.__l.__data_, v71.__r_.__value_.__l.__size_);
  else
    v104 = v71;
  v103 = off_24C335B18;
  v106 = v73;
  v35 = v72;
  v105 = v72;
  v107 = v74;
  if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v99, v64.__r_.__value_.__l.__data_, v64.__r_.__value_.__l.__size_);
  else
    v99 = v64;
  v98 = off_24C335B18;
  v101 = v66;
  v36 = v65;
  v100 = v65;
  v102 = v67;
  if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v94, v57.__r_.__value_.__l.__data_, v57.__r_.__value_.__l.__size_);
  else
    v94 = v57;
  v93 = off_24C335AD8;
  v96 = v59;
  v39 = v58;
  v95 = v58;
  v97 = v60;
  if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v89, v50.__r_.__value_.__l.__data_, v50.__r_.__value_.__l.__size_);
  else
    v89 = v50;
  v88 = off_24C335B18;
  v91 = v52;
  v38 = v51;
  v90 = v51;
  v92 = v53;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v84, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  else
    v84 = __p;
  v83 = off_24C335B18;
  v86 = v45;
  v37 = v44;
  v85 = v44;
  v87 = v46;
  *(_QWORD *)this = &off_24C330F50;
  v2 = (std::string *)((char *)this + 8);
  v34 = SHIBYTE(v113.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v113.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v2, v113.__r_.__value_.__l.__data_, v113.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = *(_OWORD *)&v113.__r_.__value_.__l.__data_;
    *((_QWORD *)this + 3) = *((_QWORD *)&v113.__r_.__value_.__l + 2);
  }
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 6) = 0;
  *((_QWORD *)this + 7) = 0;
  *(_QWORD *)this = &off_24C335408;
  *((_QWORD *)this + 8) = 0;
  *((_QWORD *)this + 9) = 0;
  v139 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v109.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v140, v109.__r_.__value_.__l.__data_, v109.__r_.__value_.__l.__size_);
  else
    v140 = v109;
  v141 = v110;
  v139 = &off_24C335AB8;
  v142 = v111;
  if (SHIBYTE(v112.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v143, v112.__r_.__value_.__l.__data_, v112.__r_.__value_.__l.__size_);
  else
    v143 = v112;
  v3 = SHIBYTE(v104.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v104.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v135, v104.__r_.__value_.__l.__data_, v104.__r_.__value_.__l.__size_);
  else
    v135 = v104;
  v134 = off_24C335B18;
  v137 = v106;
  v136 = v35;
  v138 = v107;
  v33 = SHIBYTE(v99.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v99.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v130, v99.__r_.__value_.__l.__data_, v99.__r_.__value_.__l.__size_);
  else
    v130 = v99;
  v129 = off_24C335B18;
  v132 = v101;
  v131 = v36;
  v133 = v102;
  v31 = SHIBYTE(v94.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v94.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v125, v94.__r_.__value_.__l.__data_, v94.__r_.__value_.__l.__size_);
  else
    v125 = v94;
  v124 = off_24C335AD8;
  v127 = v96;
  v126 = v39;
  v128 = v97;
  v30 = SHIBYTE(v89.__r_.__value_.__r.__words[2]);
  v32 = v3;
  if (SHIBYTE(v89.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v120, v89.__r_.__value_.__l.__data_, v89.__r_.__value_.__l.__size_);
  else
    v120 = v89;
  v119 = off_24C335B18;
  v122 = v91;
  v121 = v38;
  v123 = v92;
  v29 = SHIBYTE(v84.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v84.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v115, v84.__r_.__value_.__l.__data_, v84.__r_.__value_.__l.__size_);
  else
    v115 = v84;
  v114 = off_24C335B18;
  v117 = v86;
  v116 = v37;
  v118 = v87;
  v28 = SHIBYTE(v135.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v135.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v165, v135.__r_.__value_.__l.__data_, v135.__r_.__value_.__l.__size_);
  else
    v165 = v135;
  v164 = off_24C335B18;
  v167 = v106;
  v166 = v35;
  v168 = v107;
  v27 = SHIBYTE(v130.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v130.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v160, v130.__r_.__value_.__l.__data_, v130.__r_.__value_.__l.__size_);
  else
    v160 = v130;
  v159 = off_24C335B18;
  v162 = v101;
  v161 = v36;
  v163 = v102;
  v26 = SHIBYTE(v125.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v125.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v155, v125.__r_.__value_.__l.__data_, v125.__r_.__value_.__l.__size_);
  else
    v155 = v125;
  v154 = off_24C335AD8;
  v157 = v96;
  v156 = v39;
  v158 = v97;
  v25 = SHIBYTE(v120.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v120.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v150, v120.__r_.__value_.__l.__data_, v120.__r_.__value_.__l.__size_);
  else
    v150 = v120;
  v149 = off_24C335B18;
  v152 = v91;
  v151 = v38;
  v153 = v92;
  v23 = SHIBYTE(v115.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v115.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v145, v115.__r_.__value_.__l.__data_, v115.__r_.__value_.__l.__size_);
  else
    v145 = v115;
  v144 = off_24C335B18;
  v147 = v86;
  v146 = v37;
  v148 = v87;
  v184 = (uint64_t (**)())off_24C335D90;
  v24 = SHIBYTE(v160.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v160.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v185, v160.__r_.__value_.__l.__data_, v160.__r_.__value_.__l.__size_);
  else
    v185 = v160;
  v184 = off_24C335B18;
  v187 = v101;
  v186 = v36;
  v188 = v102;
  v179 = (uint64_t (**)())off_24C335D90;
  v22 = SHIBYTE(v155.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v155.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v180, v155.__r_.__value_.__l.__data_, v155.__r_.__value_.__l.__size_);
  else
    v180 = v155;
  v179 = off_24C335AD8;
  v182 = v96;
  v181 = v39;
  v183 = v97;
  v174 = (uint64_t (**)())off_24C335D90;
  v4 = SHIBYTE(v150.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v150.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v175, v150.__r_.__value_.__l.__data_, v150.__r_.__value_.__l.__size_);
  else
    v175 = v150;
  v174 = off_24C335B18;
  v177 = v91;
  v176 = v38;
  v178 = v92;
  v169 = off_24C335D90;
  v21 = SHIBYTE(v145.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v145.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v170, v145.__r_.__value_.__l.__data_, v145.__r_.__value_.__l.__size_);
  else
    v170 = v145;
  v172 = v86;
  v171 = v37;
  v173 = v87;
  v199 = off_24C335D90;
  v20 = SHIBYTE(v180.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v180.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v200, v180.__r_.__value_.__l.__data_, v180.__r_.__value_.__l.__size_);
  else
    v200 = v180;
  v202 = v96;
  v201 = v39;
  v203 = v97;
  v194 = off_24C335D90;
  v18 = SHIBYTE(v175.__r_.__value_.__r.__words[2]);
  v19 = v4;
  if (SHIBYTE(v175.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v195, v175.__r_.__value_.__l.__data_, v175.__r_.__value_.__l.__size_);
  else
    v195 = v175;
  v197 = v91;
  v196 = v38;
  v198 = v92;
  v189 = off_24C335D90;
  v5 = SHIBYTE(v170.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v170.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v190, v170.__r_.__value_.__l.__data_, v170.__r_.__value_.__l.__size_);
  else
    v190 = v170;
  v192 = v86;
  v191 = v37;
  v193 = v87;
  v209 = (uint64_t (**)())off_24C335D90;
  v6 = SHIBYTE(v195.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v195.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v210, v195.__r_.__value_.__l.__data_, v195.__r_.__value_.__l.__size_);
  else
    v210 = v195;
  v209 = off_24C335B18;
  v212 = v91;
  v211 = v38;
  v213 = v92;
  v204 = (uint64_t (**)())off_24C335D90;
  v7 = SHIBYTE(v190.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v190.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v205, v190.__r_.__value_.__l.__data_, v190.__r_.__value_.__l.__size_);
  else
    v205 = v190;
  v204 = off_24C335B18;
  v207 = v86;
  v206 = v37;
  v208 = v87;
  mediaplatform::DatabaseColumnTuple<4ul,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>>::DatabaseColumnTuple((uint64_t)this + 80, (uint64_t)&v209, (uint64_t)&v204);
  v204 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v205.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v205.__r_.__value_.__l.__data_);
  v209 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v210.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v210.__r_.__value_.__l.__data_);
  *((_QWORD *)this + 22) = off_24C335D90;
  v8 = (std::string *)((char *)this + 184);
  v9 = SHIBYTE(v200.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v200.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v8, v200.__r_.__value_.__l.__data_, v200.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v8->__r_.__value_.__l.__data_ = *(_OWORD *)&v200.__r_.__value_.__l.__data_;
    *((_QWORD *)this + 25) = *((_QWORD *)&v200.__r_.__value_.__l + 2);
  }
  *((_DWORD *)this + 52) = v39;
  *((_QWORD *)this + 22) = off_24C335AD8;
  *(_QWORD *)((char *)this + 212) = v96;
  *((_DWORD *)this + 55) = v97;
  v189 = off_24C335D90;
  if (v7 < 0)
    operator delete(v190.__r_.__value_.__l.__data_);
  v194 = off_24C335D90;
  if (v6 < 0)
    operator delete(v195.__r_.__value_.__l.__data_);
  v199 = off_24C335D90;
  if (v9 < 0)
    operator delete(v200.__r_.__value_.__l.__data_);
  *((_QWORD *)this + 28) = off_24C335D90;
  v10 = (std::string *)((char *)this + 232);
  v11 = SHIBYTE(v185.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v185.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v10, v185.__r_.__value_.__l.__data_, v185.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v10->__r_.__value_.__l.__data_ = *(_OWORD *)&v185.__r_.__value_.__l.__data_;
    *((_QWORD *)this + 31) = *((_QWORD *)&v185.__r_.__value_.__l + 2);
  }
  *((_DWORD *)this + 64) = v36;
  *((_QWORD *)this + 28) = off_24C335B18;
  *(_QWORD *)((char *)this + 260) = v187;
  *((_DWORD *)this + 67) = v188;
  v169 = off_24C335D90;
  if (v5 < 0)
    operator delete(v170.__r_.__value_.__l.__data_);
  v174 = (uint64_t (**)())off_24C335D90;
  if (v18 < 0)
    operator delete(v175.__r_.__value_.__l.__data_);
  v179 = (uint64_t (**)())off_24C335D90;
  if (v20 < 0)
    operator delete(v180.__r_.__value_.__l.__data_);
  v184 = (uint64_t (**)())off_24C335D90;
  if (v11 < 0)
    operator delete(v185.__r_.__value_.__l.__data_);
  *((_QWORD *)this + 34) = off_24C335D90;
  v12 = (std::string *)((char *)this + 280);
  v13 = SHIBYTE(v165.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v165.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v12, v165.__r_.__value_.__l.__data_, v165.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v12->__r_.__value_.__l.__data_ = *(_OWORD *)&v165.__r_.__value_.__l.__data_;
    *((_QWORD *)this + 37) = *((_QWORD *)&v165.__r_.__value_.__l + 2);
  }
  *((_DWORD *)this + 76) = v35;
  *((_QWORD *)this + 34) = off_24C335B18;
  *(_QWORD *)((char *)this + 308) = v167;
  *((_DWORD *)this + 79) = v168;
  v144 = (uint64_t (**)())off_24C335D90;
  if (v21 < 0)
    operator delete(v145.__r_.__value_.__l.__data_);
  v149 = (uint64_t (**)())off_24C335D90;
  if (v19 < 0)
    operator delete(v150.__r_.__value_.__l.__data_);
  v154 = (uint64_t (**)())off_24C335D90;
  if (v22 < 0)
    operator delete(v155.__r_.__value_.__l.__data_);
  v159 = (uint64_t (**)())off_24C335D90;
  if (v24 < 0)
  {
    operator delete(v160.__r_.__value_.__l.__data_);
    if ((v13 & 0x80000000) == 0)
      goto LABEL_126;
  }
  else if ((v13 & 0x80000000) == 0)
  {
    goto LABEL_126;
  }
  operator delete(v165.__r_.__value_.__l.__data_);
LABEL_126:
  *((_QWORD *)this + 40) = off_24C335D90;
  if (SHIBYTE(v140.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 328), v140.__r_.__value_.__l.__data_, v140.__r_.__value_.__l.__size_);
  else
    *(std::string *)((char *)this + 328) = v140;
  *((_DWORD *)this + 88) = v141;
  *((_QWORD *)this + 40) = &off_24C335AB8;
  *((_BYTE *)this + 356) = v142;
  v14 = (std::string *)((char *)this + 360);
  if (SHIBYTE(v143.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v14, v143.__r_.__value_.__l.__data_, v143.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v14->__r_.__value_.__l.__data_ = *(_OWORD *)&v143.__r_.__value_.__l.__data_;
    *((_QWORD *)this + 47) = *((_QWORD *)&v143.__r_.__value_.__l + 2);
  }
  if (v23 < 0)
    operator delete(v115.__r_.__value_.__l.__data_);
  if (v25 < 0)
    operator delete(v120.__r_.__value_.__l.__data_);
  if (v26 < 0)
    operator delete(v125.__r_.__value_.__l.__data_);
  if (v27 < 0)
    operator delete(v130.__r_.__value_.__l.__data_);
  if (v28 < 0)
    operator delete(v135.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v139);
  v83 = (uint64_t (**)())off_24C335D90;
  if (v29 < 0)
    operator delete(v84.__r_.__value_.__l.__data_);
  v88 = (uint64_t (**)())off_24C335D90;
  if (v30 < 0)
    operator delete(v89.__r_.__value_.__l.__data_);
  v93 = (uint64_t (**)())off_24C335D90;
  if (v31 < 0)
    operator delete(v94.__r_.__value_.__l.__data_);
  v98 = (uint64_t (**)())off_24C335D90;
  if (v33 < 0)
    operator delete(v99.__r_.__value_.__l.__data_);
  v103 = (uint64_t (**)())off_24C335D90;
  if (v32 < 0)
    operator delete(v104.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v108);
  if (v34 < 0)
    operator delete(v113.__r_.__value_.__l.__data_);
  *(_QWORD *)this = &off_24C335F70;
  std::__tuple_leaf<0ul,mlcore::MediaColumn<std::string>,false>::__tuple_leaf[abi:ne180100]<mlcore::MediaColumn<std::string>&,void>((uint64_t)this + 384, (uint64_t)v77);
  *((_QWORD *)this + 56) = off_24C335D90;
  if (SHIBYTE(v71.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external((std::string *)this + 19, v71.__r_.__value_.__l.__data_, v71.__r_.__value_.__l.__size_);
  else
    *((std::string *)this + 19) = v71;
  *((_DWORD *)this + 120) = v72;
  *(_QWORD *)((char *)this + 484) = v73;
  *((_DWORD *)this + 123) = v74;
  *((_QWORD *)this + 56) = off_24C336AC0;
  *((_QWORD *)this + 62) = off_24C335D90;
  if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external((std::string *)this + 21, v64.__r_.__value_.__l.__data_, v64.__r_.__value_.__l.__size_);
  else
    *((std::string *)this + 21) = v64;
  *((_DWORD *)this + 132) = v65;
  *(_QWORD *)((char *)this + 532) = v66;
  *((_DWORD *)this + 135) = v67;
  *((_QWORD *)this + 62) = off_24C336AC0;
  *((_QWORD *)this + 68) = off_24C335D90;
  if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external((std::string *)this + 23, v57.__r_.__value_.__l.__data_, v57.__r_.__value_.__l.__size_);
  else
    *((std::string *)this + 23) = v57;
  *((_DWORD *)this + 144) = v58;
  *(_QWORD *)((char *)this + 580) = v59;
  *((_DWORD *)this + 147) = v60;
  *((_QWORD *)this + 68) = off_24C336A80;
  *((_QWORD *)this + 74) = off_24C335D90;
  if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external((std::string *)this + 25, v50.__r_.__value_.__l.__data_, v50.__r_.__value_.__l.__size_);
  else
    *((std::string *)this + 25) = v50;
  *((_DWORD *)this + 156) = v51;
  *(_QWORD *)((char *)this + 628) = v52;
  *((_DWORD *)this + 159) = v53;
  *((_QWORD *)this + 74) = off_24C336AC0;
  *((_QWORD *)this + 80) = off_24C335D90;
  v15 = (std::string *)((char *)this + 648);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v15, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    v16 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
    *((_DWORD *)this + 168) = v44;
    *(_QWORD *)((char *)this + 676) = v45;
    *((_DWORD *)this + 171) = v46;
    *((_QWORD *)this + 80) = off_24C336AC0;
    v42 = off_24C335D90;
    if (v16 < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  else
  {
    *(_OWORD *)&v15->__r_.__value_.__l.__data_ = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    *((_QWORD *)this + 83) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
    *((_DWORD *)this + 168) = v44;
    *(_QWORD *)((char *)this + 676) = v45;
    *((_DWORD *)this + 171) = v46;
    *((_QWORD *)this + 80) = off_24C336AC0;
    v42 = off_24C335D90;
  }
  if (v41 < 0)
    operator delete(v40[0]);
  v49 = off_24C335D90;
  if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v50.__r_.__value_.__l.__data_);
  if (v48 < 0)
    operator delete(v47[0]);
  v56 = off_24C335D90;
  if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v57.__r_.__value_.__l.__data_);
  if (v55 < 0)
    operator delete(v54[0]);
  v63 = off_24C335D90;
  if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v64.__r_.__value_.__l.__data_);
  if (v62 < 0)
    operator delete(v61[0]);
  v70 = off_24C335D90;
  if (SHIBYTE(v71.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v71.__r_.__value_.__l.__data_);
  if (v69 < 0)
    operator delete(v68[0]);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)v77);
  if (v76 < 0)
    operator delete(v75[0]);
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__s.__r_.__value_.__l.__data_);
  *(_QWORD *)this = &off_24C336F70;
  return this;
}

void sub_20A682C3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,uint64_t a38,void *__p,uint64_t a40,int a41,__int16 a42,char a43,char a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52,uint64_t a53,void *a54,uint64_t a55,int a56,__int16 a57,char a58,char a59,uint64_t a60,uint64_t a61,void *a62,uint64_t a63)
{
  char a67;
  void *a69;
  char a72;
  void *a73;
  char a74;
  void *a75;
  char a76;
  void *a77;
  char a78;
  void *a79;
  uint64_t v79;
  uint64_t v80;
  void **v81;
  void **v82;
  void **v83;
  void **v84;
  uint64_t v85;

  *(_QWORD *)(v79 + 592) = v85;
  if (*(char *)(v79 + 623) < 0)
    operator delete(*v84);
  *(_QWORD *)(v79 + 544) = off_24C335D90;
  if (*(char *)(v79 + 575) < 0)
    operator delete(*v83);
  *(_QWORD *)(v79 + 496) = off_24C335D90;
  if (*(char *)(v79 + 527) < 0)
    operator delete(*v82);
  *(_QWORD *)(v79 + 448) = off_24C335D90;
  if (*(char *)(v79 + 479) < 0)
    operator delete(*v81);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(v80);
  mediaplatform::DatabaseTable<std::string,long long,long long,double,long long,long long>::~DatabaseTable(v79);
  if (a44 < 0)
    operator delete(__p);
  if (a37 < 0)
    operator delete(a32);
  if (a59 < 0)
    operator delete(a54);
  if (a52 < 0)
    operator delete(a47);
  if (a72 < 0)
    operator delete(a69);
  if (a67 < 0)
    operator delete(a62);
  if (a76 < 0)
    operator delete(a75);
  if (a74 < 0)
    operator delete(a73);
  if (SLOBYTE(STACK[0x20F]) < 0)
    operator delete(a79);
  if (a78 < 0)
    operator delete(a77);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&STACK[0x238]);
  if (SLOBYTE(STACK[0x237]) < 0)
    operator delete((void *)STACK[0x220]);
  if (SLOBYTE(STACK[0x28F]) < 0)
    operator delete((void *)STACK[0x278]);
  _Unwind_Resume(a1);
}

void sub_20A6831C0()
{
  JUMPOUT(0x20A6830D0);
}

void sub_20A6831C8()
{
  JUMPOUT(0x20A6830E0);
}

void sub_20A6831D0()
{
  JUMPOUT(0x20A6830FCLL);
}

void sub_20A6831D8()
{
  JUMPOUT(0x20A68310CLL);
}

void sub_20A6831E0()
{
  JUMPOUT(0x20A683128);
}

void sub_20A6831E8()
{
  JUMPOUT(0x20A683138);
}

void sub_20A6831F0()
{
  JUMPOUT(0x20A683154);
}

void sub_20A6831F8()
{
  JUMPOUT(0x20A683164);
}

void sub_20A683200()
{
  JUMPOUT(0x20A683180);
}

void sub_20A683208()
{
  JUMPOUT(0x20A683190);
}

void sub_20A683210()
{
  JUMPOUT(0x20A683198);
}

void sub_20A683218()
{
  JUMPOUT(0x20A6831A8);
}

_QWORD *mlcore::ItemStoreTable::ItemStoreTable(mlcore::ItemStoreTable *this)
{
  _QWORD *v1;
  void *__p[2];
  char v4;
  void *v5[2];
  char v6;
  _BYTE v7[64];
  void *v8[2];
  char v9;
  _QWORD v10[3];
  char v11;
  void *v12[2];
  char v13;
  _QWORD v14[3];
  char v15;
  void *v16[2];
  char v17;
  _QWORD v18[3];
  char v19;
  void *v20[2];
  char v21;
  _QWORD v22[3];
  char v23;
  void *v24[2];
  char v25;
  void *v26[2];
  char v27;
  _BYTE v28[64];
  void *v29[2];
  char v30;
  _QWORD v31[3];
  char v32;
  void *v33[2];
  char v34;
  void *v35[2];
  char v36;
  _BYTE v37[64];
  void *v38[2];
  char v39;
  _QWORD v40[3];
  char v41;
  void *v42[2];
  char v43;
  _QWORD v44[3];
  char v45;
  void *v46[2];
  char v47;
  _QWORD v48[3];
  char v49;
  void *v50[2];
  char v51;
  _QWORD v52[3];
  char v53;
  void *v54[2];
  char v55;
  _QWORD v56[3];
  char v57;
  void *v58[2];
  char v59;
  _QWORD v60[3];
  char v61;
  void *v62[2];
  char v63;
  void *v64[2];
  char v65;
  _BYTE v66[64];
  void *v67[2];
  char v68;
  void *v69[2];
  char v70;
  _BYTE v71[64];
  void *v72[2];
  char v73;
  _QWORD v74[3];
  char v75;
  void *v76[2];
  char v77;
  _QWORD v78[3];
  char v79;
  void *v80[2];
  char v81;
  _QWORD v82[3];
  char v83;
  void *v84[2];
  char v85;
  _QWORD v86[3];
  char v87;
  void *v88[2];
  char v89;
  void *v90[2];
  char v91;
  _BYTE v92[64];
  void *v93[2];
  char v94;
  void *v95[2];
  char v96;
  _BYTE v97[64];
  void *v98[2];
  char v99;
  _QWORD v100[3];
  char v101;
  void *v102[2];
  char v103;
  _QWORD v104[3];
  char v105;
  void *v106[2];
  char v107;
  void *v108[2];
  char v109;
  _BYTE v110[64];
  void *v111[2];
  char v112;
  _QWORD v113[3];
  char v114;
  void *v115[2];
  char v116;
  _QWORD v117[3];
  char v118;
  void *v119[2];
  char v120;
  _BYTE v121[64];
  void *v122[2];
  char v123;
  _BYTE v124[64];
  void *v125[2];
  char v126;
  _BYTE v127[64];
  void *v128[2];
  char v129;
  _BYTE v130[64];
  void *v131[2];
  char v132;
  _BYTE v133[64];
  void *v134[2];
  char v135;
  _QWORD v136[3];
  char v137;
  void *v138[2];
  char v139;
  _QWORD v140[3];
  char v141;
  void *v142[2];
  char v143;
  _QWORD v144[3];
  char v145;
  void *v146[2];
  char v147;
  _QWORD v148[3];
  char v149;
  void *v150[2];
  char v151;
  _QWORD v152[3];
  char v153;
  void *v154[2];
  char v155;
  _QWORD v156[3];
  char v157;
  void *v158[2];
  char v159;
  _QWORD v160[3];
  char v161;
  void *v162[2];
  char v163;
  _QWORD v164[3];
  char v165;
  void *v166[2];
  char v167;
  _QWORD v168[3];
  char v169;
  void *v170[2];
  char v171;
  _QWORD v172[3];
  char v173;
  void *v174[2];
  char v175;
  _QWORD v176[3];
  char v177;
  void *v178[2];
  char v179;
  _QWORD v180[3];
  char v181;
  void *v182[2];
  char v183;
  _QWORD v184[3];
  char v185;
  void *v186[2];
  char v187;
  _QWORD v188[3];
  char v189;
  void *v190[2];
  char v191;
  _QWORD v192[3];
  char v193;
  void *v194[2];
  char v195;
  _BYTE v196[64];
  void *v197[2];
  char v198;
  _QWORD v199[3];
  char v200;
  void *v201[2];
  char v202;
  _BYTE v203[64];
  void *v204[2];
  char v205;
  _QWORD v206[3];
  char v207;
  void *v208[2];
  char v209;
  _QWORD v210[3];
  char v211;
  void *v212[2];
  char v213;
  _QWORD v214[3];
  char v215;
  void *v216[2];
  char v217;
  _QWORD v218[3];
  char v219;
  void *v220[2];
  char v221;
  _QWORD v222[3];
  char v223;
  void *v224[2];
  char v225;
  _QWORD v226[3];
  char v227;
  void *v228[2];
  char v229;
  _QWORD v230[3];
  char v231;
  void *v232[2];
  char v233;
  _QWORD v234[3];
  char v235;
  void *v236[2];
  char v237;

  v1 = (_QWORD *)MEMORY[0x24BDAC7A8](this);
  std::string::basic_string[abi:ne180100]<0>(v236, "item_store");
  std::string::basic_string[abi:ne180100]<0>(v232, "item_pid");
  mlcore::MediaColumn<long long>::MediaColumn((uint64_t)v234, (uint64_t)v232, 1);
  std::string::basic_string[abi:ne180100]<0>(v228, "store_item_id");
  mlcore::MediaColumn<long long>::MediaColumn((uint64_t)v230, (uint64_t)v228);
  std::string::basic_string[abi:ne180100]<0>(v224, "store_composer_id");
  mlcore::MediaColumn<long long>::MediaColumn((uint64_t)v226, (uint64_t)v224);
  std::string::basic_string[abi:ne180100]<0>(v220, "store_genre_id");
  mlcore::MediaColumn<long long>::MediaColumn((uint64_t)v222, (uint64_t)v220);
  std::string::basic_string[abi:ne180100]<0>(v216, "store_playlist_id");
  mlcore::MediaColumn<long long>::MediaColumn((uint64_t)v218, (uint64_t)v216);
  std::string::basic_string[abi:ne180100]<0>(v212, "storefront_id");
  mlcore::MediaColumn<long long>::MediaColumn((uint64_t)v214, (uint64_t)v212);
  std::string::basic_string[abi:ne180100]<0>(v208, "purchase_history_id");
  mlcore::MediaColumn<long long>::MediaColumn((uint64_t)v210, (uint64_t)v208);
  std::string::basic_string[abi:ne180100]<0>(v204, "purchase_history_token");
  mlcore::MediaColumn<long long>::MediaColumn((uint64_t)v206, (uint64_t)v204);
  std::string::basic_string[abi:ne180100]<0>(v201, "purchase_history_redownload_params");
  mlcore::MediaColumn<std::string>::MediaColumn((uint64_t)v203, (uint64_t)v201, 0);
  std::string::basic_string[abi:ne180100]<0>(v197, "store_saga_id");
  mlcore::MediaColumn<long long>::MediaColumn((uint64_t)v199, (uint64_t)v197);
  std::string::basic_string[abi:ne180100]<0>(v194, "match_redownload_params");
  mlcore::MediaColumn<std::string>::MediaColumn((uint64_t)v196, (uint64_t)v194, 0);
  std::string::basic_string[abi:ne180100]<0>(v190, "cloud_status");
  mlcore::MediaColumn<long long>::MediaColumn((uint64_t)v192, (uint64_t)v190);
  std::string::basic_string[abi:ne180100]<0>(v186, "sync_id");
  mlcore::MediaColumn<long long>::MediaColumn((uint64_t)v188, (uint64_t)v186);
  std::string::basic_string[abi:ne180100]<0>(v182, "home_sharing_id");
  mlcore::MediaColumn<long long>::MediaColumn((uint64_t)v184, (uint64_t)v182);
  std::string::basic_string[abi:ne180100]<0>(v178, "is_ota_purchased");
  mlcore::MediaColumn<long long>::MediaColumn((uint64_t)v180, (uint64_t)v178);
  std::string::basic_string[abi:ne180100]<0>(v174, "store_kind");
  mlcore::MediaColumn<long long>::MediaColumn((uint64_t)v176, (uint64_t)v174);
  std::string::basic_string[abi:ne180100]<0>(v170, "account_id");
  mlcore::MediaColumn<long long>::MediaColumn((uint64_t)v172, (uint64_t)v170);
  std::string::basic_string[abi:ne180100]<0>(v166, "downloader_account_id");
  mlcore::MediaColumn<long long>::MediaColumn((uint64_t)v168, (uint64_t)v166);
  std::string::basic_string[abi:ne180100]<0>(v162, "family_account_id");
  mlcore::MediaColumn<long long>::MediaColumn((uint64_t)v164, (uint64_t)v162);
  std::string::basic_string[abi:ne180100]<0>(v158, "is_protected");
  mlcore::MediaColumn<long long>::MediaColumn((uint64_t)v160, (uint64_t)v158);
  std::string::basic_string[abi:ne180100]<0>(v154, "key_versions");
  mlcore::MediaColumn<long long>::MediaColumn((uint64_t)v156, (uint64_t)v154);
  std::string::basic_string[abi:ne180100]<0>(v150, "key_platform_id");
  mlcore::MediaColumn<long long>::MediaColumn((uint64_t)v152, (uint64_t)v150);
  std::string::basic_string[abi:ne180100]<0>(v146, "key_id");
  mlcore::MediaColumn<long long>::MediaColumn((uint64_t)v148, (uint64_t)v146);
  std::string::basic_string[abi:ne180100]<0>(v142, "key_id_2");
  mlcore::MediaColumn<long long>::MediaColumn((uint64_t)v144, (uint64_t)v142);
  std::string::basic_string[abi:ne180100]<0>(v138, "date_purchased");
  mlcore::MediaColumn<long long>::MediaColumn((uint64_t)v140, (uint64_t)v138);
  std::string::basic_string[abi:ne180100]<0>(v134, "date_released");
  mlcore::MediaColumn<long long>::MediaColumn((uint64_t)v136, (uint64_t)v134);
  std::string::basic_string[abi:ne180100]<0>(v131, "external_guid");
  mlcore::MediaColumn<std::string>::MediaColumn((uint64_t)v133, (uint64_t)v131, 0);
  std::string::basic_string[abi:ne180100]<0>(v128, "feed_url");
  mlcore::MediaColumn<std::string>::MediaColumn((uint64_t)v130, (uint64_t)v128, 0);
  std::string::basic_string[abi:ne180100]<0>(v125, "artwork_url");
  mlcore::MediaColumn<std::string>::MediaColumn((uint64_t)v127, (uint64_t)v125, 0);
  std::string::basic_string[abi:ne180100]<0>(v122, "store_xid");
  mlcore::MediaColumn<std::string>::MediaColumn((uint64_t)v124, (uint64_t)v122, 0);
  std::string::basic_string[abi:ne180100]<0>(v119, "store_flavor");
  mlcore::MediaColumn<std::string>::MediaColumn((uint64_t)v121, (uint64_t)v119, 0);
  std::string::basic_string[abi:ne180100]<0>(v115, "store_matched_status");
  mlcore::MediaColumn<long long>::MediaColumn((uint64_t)v117, (uint64_t)v115);
  std::string::basic_string[abi:ne180100]<0>(v111, "store_redownloaded_status");
  mlcore::MediaColumn<long long>::MediaColumn((uint64_t)v113, (uint64_t)v111);
  std::string::basic_string[abi:ne180100]<0>(v108, "extras_url");
  std::string::basic_string[abi:ne180100]<0>(v106, "");
  mlcore::MediaColumn<std::string>::MediaColumn((uint64_t)v110, (uint64_t)v108, (uint64_t)v106);
  std::string::basic_string[abi:ne180100]<0>(v102, "vpp_is_licensed");
  mlcore::MediaColumn<long long>::MediaColumn((uint64_t)v104, (uint64_t)v102);
  std::string::basic_string[abi:ne180100]<0>(v98, "vpp_org_id");
  mlcore::MediaColumn<long long>::MediaColumn((uint64_t)v100, (uint64_t)v98);
  std::string::basic_string[abi:ne180100]<0>(v95, "vpp_org_name");
  std::string::basic_string[abi:ne180100]<0>(v93, "");
  mlcore::MediaColumn<std::string>::MediaColumn((uint64_t)v97, (uint64_t)v95, (uint64_t)v93);
  std::string::basic_string[abi:ne180100]<0>(v90, "sync_redownload_params");
  std::string::basic_string[abi:ne180100]<0>(v88, "");
  mlcore::MediaColumn<std::string>::MediaColumn((uint64_t)v92, (uint64_t)v90, (uint64_t)v88);
  std::string::basic_string[abi:ne180100]<0>(v84, "needs_reporting");
  mlcore::MediaColumn<long long>::MediaColumn((uint64_t)v86, (uint64_t)v84);
  std::string::basic_string[abi:ne180100]<0>(v80, "subscription_store_item_id");
  mlcore::MediaColumn<long long>::MediaColumn((uint64_t)v82, (uint64_t)v80);
  std::string::basic_string[abi:ne180100]<0>(v76, "playback_endpoint_type");
  mlcore::MediaColumn<long long>::MediaColumn((uint64_t)v78, (uint64_t)v76);
  std::string::basic_string[abi:ne180100]<0>(v72, "is_mastered_for_itunes");
  mlcore::MediaColumn<int>::MediaColumn((uint64_t)v74, (uint64_t)v72, 0);
  std::string::basic_string[abi:ne180100]<0>(v69, "radio_station_id");
  std::string::basic_string[abi:ne180100]<0>(v67, "");
  mlcore::MediaColumn<std::string>::MediaColumn((uint64_t)v71, (uint64_t)v69, (uint64_t)v67);
  std::string::basic_string[abi:ne180100]<0>(v64, "advertisement_unique_id");
  std::string::basic_string[abi:ne180100]<0>(v62, "");
  mlcore::MediaColumn<std::string>::MediaColumn((uint64_t)v66, (uint64_t)v64, (uint64_t)v62);
  std::string::basic_string[abi:ne180100]<0>(v58, "advertisement_type");
  mlcore::MediaColumn<long long>::MediaColumn((uint64_t)v60, (uint64_t)v58);
  std::string::basic_string[abi:ne180100]<0>(v54, "is_artist_uploaded_content");
  mlcore::MediaColumn<long long>::MediaColumn((uint64_t)v56, (uint64_t)v54);
  std::string::basic_string[abi:ne180100]<0>(v50, "cloud_asset_available");
  mlcore::MediaColumn<long long>::MediaColumn((uint64_t)v52, (uint64_t)v50);
  std::string::basic_string[abi:ne180100]<0>(v46, "is_subscription");
  mlcore::MediaColumn<long long>::MediaColumn((uint64_t)v48, (uint64_t)v46);
  std::string::basic_string[abi:ne180100]<0>(v42, "sync_in_my_library");
  mlcore::MediaColumn<int>::MediaColumn((uint64_t)v44, (uint64_t)v42, 0);
  std::string::basic_string[abi:ne180100]<0>(v38, "cloud_in_my_library");
  mlcore::MediaColumn<int>::MediaColumn((uint64_t)v40, (uint64_t)v38, 0);
  std::string::basic_string[abi:ne180100]<0>(v35, "cloud_album_id");
  std::string::basic_string[abi:ne180100]<0>(v33, "");
  mlcore::MediaColumn<std::string>::MediaColumn((uint64_t)v37, (uint64_t)v35, (uint64_t)v33);
  std::string::basic_string[abi:ne180100]<0>(v29, "cloud_playback_endpoint_type");
  mlcore::MediaColumn<long long>::MediaColumn((uint64_t)v31, (uint64_t)v29);
  std::string::basic_string[abi:ne180100]<0>(v26, "cloud_universal_library_id");
  std::string::basic_string[abi:ne180100]<0>(v24, "");
  mlcore::MediaColumn<std::string>::MediaColumn((uint64_t)v28, (uint64_t)v26, (uint64_t)v24);
  std::string::basic_string[abi:ne180100]<0>(v20, "reporting_store_item_id");
  mlcore::MediaColumn<long long>::MediaColumn((uint64_t)v22, (uint64_t)v20);
  std::string::basic_string[abi:ne180100]<0>(v16, "asset_store_item_id");
  mlcore::MediaColumn<long long>::MediaColumn((uint64_t)v18, (uint64_t)v16);
  std::string::basic_string[abi:ne180100]<0>(v12, "extended_playback_attribute");
  mlcore::MediaColumn<long long>::MediaColumn((uint64_t)v14, (uint64_t)v12);
  std::string::basic_string[abi:ne180100]<0>(v8, "extended_lyrics_attribute");
  mlcore::MediaColumn<long long>::MediaColumn((uint64_t)v10, (uint64_t)v8);
  std::string::basic_string[abi:ne180100]<0>(v5, "store_canonical_id");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  mlcore::MediaColumn<std::string>::MediaColumn((uint64_t)v7, (uint64_t)v5, (uint64_t)__p);
  mlcore::MediaTable<long long,long long,long long,long long,long long,long long,long long,long long,std::string,long long,std::string,long long,long long,long long,long long,long long,long long,long long,long long,long long,long long,long long,long long,long long,long long,long long,std::string,std::string,std::string,std::string,std::string,long long,long long,std::string,long long,long long,std::string,std::string,long long,long long,long long,int,std::string,std::string,long long,long long,long long,long long,int,int,std::string,long long,std::string,long long,long long,long long,long long,std::string>::MediaTable((uint64_t)v1, (uint64_t)v236, (uint64_t)v234, (uint64_t)v230, (uint64_t)v226, (uint64_t)v222, (uint64_t)v218, (uint64_t)v214, (uint64_t)v210, (uint64_t)v206, (uint64_t)v203, (uint64_t)v199, (uint64_t)v196, (uint64_t)v192, (uint64_t)v188, (uint64_t)v184, (uint64_t)v180, (uint64_t)v176, (uint64_t)v172,
    (uint64_t)v168,
    (uint64_t)v164,
    (uint64_t)v160,
    (uint64_t)v156,
    (uint64_t)v152,
    (uint64_t)v148,
    (uint64_t)v144,
    (uint64_t)v140,
    (uint64_t)v136,
    (uint64_t)v133,
    (uint64_t)v130,
    (uint64_t)v127,
    (uint64_t)v124,
    (uint64_t)v121,
    (uint64_t)v117,
    (uint64_t)v113,
    (uint64_t)v110,
    (uint64_t)v104,
    (uint64_t)v100,
    (uint64_t)v97,
    (uint64_t)v92,
    (uint64_t)v86,
    (uint64_t)v82,
    (uint64_t)v78,
    (uint64_t)v74,
    (uint64_t)v71,
    (uint64_t)v66,
    (uint64_t)v60,
    (uint64_t)v56,
    (uint64_t)v52,
    (uint64_t)v48,
    (uint64_t)v44,
    (uint64_t)v40,
    (uint64_t)v37,
    (uint64_t)v31,
    (uint64_t)v28,
    (uint64_t)v22,
    (uint64_t)v18,
    (uint64_t)v14,
    (uint64_t)v10,
    (uint64_t)v7);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)v7);
  if (v4 < 0)
    operator delete(__p[0]);
  if (v6 < 0)
    operator delete(v5[0]);
  v10[0] = off_24C335D90;
  if (v11 < 0)
    operator delete((void *)v10[1]);
  if (v9 < 0)
    operator delete(v8[0]);
  v14[0] = off_24C335D90;
  if (v15 < 0)
    operator delete((void *)v14[1]);
  if (v13 < 0)
    operator delete(v12[0]);
  v18[0] = off_24C335D90;
  if (v19 < 0)
    operator delete((void *)v18[1]);
  if (v17 < 0)
    operator delete(v16[0]);
  v22[0] = off_24C335D90;
  if (v23 < 0)
    operator delete((void *)v22[1]);
  if (v21 < 0)
    operator delete(v20[0]);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)v28);
  if (v25 < 0)
    operator delete(v24[0]);
  if (v27 < 0)
    operator delete(v26[0]);
  v31[0] = off_24C335D90;
  if (v32 < 0)
    operator delete((void *)v31[1]);
  if (v30 < 0)
    operator delete(v29[0]);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)v37);
  if (v34 < 0)
    operator delete(v33[0]);
  if (v36 < 0)
    operator delete(v35[0]);
  v40[0] = off_24C335D90;
  if (v41 < 0)
    operator delete((void *)v40[1]);
  if (v39 < 0)
    operator delete(v38[0]);
  v44[0] = off_24C335D90;
  if (v45 < 0)
    operator delete((void *)v44[1]);
  if (v43 < 0)
    operator delete(v42[0]);
  v48[0] = off_24C335D90;
  if (v49 < 0)
    operator delete((void *)v48[1]);
  if (v47 < 0)
    operator delete(v46[0]);
  v52[0] = off_24C335D90;
  if (v53 < 0)
    operator delete((void *)v52[1]);
  if (v51 < 0)
    operator delete(v50[0]);
  v56[0] = off_24C335D90;
  if (v57 < 0)
    operator delete((void *)v56[1]);
  if (v55 < 0)
    operator delete(v54[0]);
  v60[0] = off_24C335D90;
  if (v61 < 0)
    operator delete((void *)v60[1]);
  if (v59 < 0)
    operator delete(v58[0]);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)v66);
  if (v63 < 0)
    operator delete(v62[0]);
  if (v65 < 0)
    operator delete(v64[0]);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)v71);
  if (v68 < 0)
    operator delete(v67[0]);
  if (v70 < 0)
    operator delete(v69[0]);
  v74[0] = off_24C335D90;
  if (v75 < 0)
    operator delete((void *)v74[1]);
  if (v73 < 0)
    operator delete(v72[0]);
  v78[0] = off_24C335D90;
  if (v79 < 0)
    operator delete((void *)v78[1]);
  if (v77 < 0)
    operator delete(v76[0]);
  v82[0] = off_24C335D90;
  if (v83 < 0)
    operator delete((void *)v82[1]);
  if (v81 < 0)
    operator delete(v80[0]);
  v86[0] = off_24C335D90;
  if (v87 < 0)
    operator delete((void *)v86[1]);
  if (v85 < 0)
    operator delete(v84[0]);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)v92);
  if (v89 < 0)
    operator delete(v88[0]);
  if (v91 < 0)
    operator delete(v90[0]);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)v97);
  if (v94 < 0)
    operator delete(v93[0]);
  if (v96 < 0)
    operator delete(v95[0]);
  v100[0] = off_24C335D90;
  if (v101 < 0)
    operator delete((void *)v100[1]);
  if (v99 < 0)
    operator delete(v98[0]);
  v104[0] = off_24C335D90;
  if (v105 < 0)
    operator delete((void *)v104[1]);
  if (v103 < 0)
    operator delete(v102[0]);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)v110);
  if (v107 < 0)
    operator delete(v106[0]);
  if (v109 < 0)
    operator delete(v108[0]);
  v113[0] = off_24C335D90;
  if (v114 < 0)
    operator delete((void *)v113[1]);
  if (v112 < 0)
    operator delete(v111[0]);
  v117[0] = off_24C335D90;
  if (v118 < 0)
    operator delete((void *)v117[1]);
  if (v116 < 0)
    operator delete(v115[0]);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)v121);
  if (v120 < 0)
    operator delete(v119[0]);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)v124);
  if (v123 < 0)
    operator delete(v122[0]);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)v127);
  if (v126 < 0)
    operator delete(v125[0]);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)v130);
  if (v129 < 0)
    operator delete(v128[0]);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)v133);
  if (v132 < 0)
    operator delete(v131[0]);
  v136[0] = off_24C335D90;
  if (v137 < 0)
    operator delete((void *)v136[1]);
  if (v135 < 0)
    operator delete(v134[0]);
  v140[0] = off_24C335D90;
  if (v141 < 0)
    operator delete((void *)v140[1]);
  if (v139 < 0)
    operator delete(v138[0]);
  v144[0] = off_24C335D90;
  if (v145 < 0)
    operator delete((void *)v144[1]);
  if (v143 < 0)
    operator delete(v142[0]);
  v148[0] = off_24C335D90;
  if (v149 < 0)
    operator delete((void *)v148[1]);
  if (v147 < 0)
    operator delete(v146[0]);
  v152[0] = off_24C335D90;
  if (v153 < 0)
    operator delete((void *)v152[1]);
  if (v151 < 0)
    operator delete(v150[0]);
  v156[0] = off_24C335D90;
  if (v157 < 0)
    operator delete((void *)v156[1]);
  if (v155 < 0)
    operator delete(v154[0]);
  v160[0] = off_24C335D90;
  if (v161 < 0)
    operator delete((void *)v160[1]);
  if (v159 < 0)
    operator delete(v158[0]);
  v164[0] = off_24C335D90;
  if (v165 < 0)
    operator delete((void *)v164[1]);
  if (v163 < 0)
    operator delete(v162[0]);
  v168[0] = off_24C335D90;
  if (v169 < 0)
    operator delete((void *)v168[1]);
  if (v167 < 0)
    operator delete(v166[0]);
  v172[0] = off_24C335D90;
  if (v173 < 0)
    operator delete((void *)v172[1]);
  if (v171 < 0)
    operator delete(v170[0]);
  v176[0] = off_24C335D90;
  if (v177 < 0)
    operator delete((void *)v176[1]);
  if (v175 < 0)
    operator delete(v174[0]);
  v180[0] = off_24C335D90;
  if (v181 < 0)
    operator delete((void *)v180[1]);
  if (v179 < 0)
    operator delete(v178[0]);
  v184[0] = off_24C335D90;
  if (v185 < 0)
    operator delete((void *)v184[1]);
  if (v183 < 0)
    operator delete(v182[0]);
  v188[0] = off_24C335D90;
  if (v189 < 0)
    operator delete((void *)v188[1]);
  if (v187 < 0)
    operator delete(v186[0]);
  v192[0] = off_24C335D90;
  if (v193 < 0)
    operator delete((void *)v192[1]);
  if (v191 < 0)
    operator delete(v190[0]);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)v196);
  if (v195 < 0)
    operator delete(v194[0]);
  v199[0] = off_24C335D90;
  if (v200 < 0)
    operator delete((void *)v199[1]);
  if (v198 < 0)
    operator delete(v197[0]);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)v203);
  if (v202 < 0)
    operator delete(v201[0]);
  v206[0] = off_24C335D90;
  if (v207 < 0)
    operator delete((void *)v206[1]);
  if (v205 < 0)
    operator delete(v204[0]);
  v210[0] = off_24C335D90;
  if (v211 < 0)
    operator delete((void *)v210[1]);
  if (v209 < 0)
    operator delete(v208[0]);
  v214[0] = off_24C335D90;
  if (v215 < 0)
    operator delete((void *)v214[1]);
  if (v213 < 0)
    operator delete(v212[0]);
  v218[0] = off_24C335D90;
  if (v219 < 0)
    operator delete((void *)v218[1]);
  if (v217 < 0)
    operator delete(v216[0]);
  v222[0] = off_24C335D90;
  if (v223 < 0)
    operator delete((void *)v222[1]);
  if (v221 < 0)
    operator delete(v220[0]);
  v226[0] = off_24C335D90;
  if (v227 < 0)
    operator delete((void *)v226[1]);
  if (v225 < 0)
    operator delete(v224[0]);
  v230[0] = off_24C335D90;
  if (v231 < 0)
    operator delete((void *)v230[1]);
  if (v229 < 0)
    operator delete(v228[0]);
  v234[0] = off_24C335D90;
  if (v235 < 0)
    operator delete((void *)v234[1]);
  if (v233 < 0)
    operator delete(v232[0]);
  if (v237 < 0)
    operator delete(v236[0]);
  *v1 = &off_24C337560;
  return v1;
}

void sub_20A6843D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,void *__p,uint64_t a63)
{
  char a67;
  void *a68;
  char a72;
  char a73;
  char *v73;
  uint64_t v74;

  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&a73);
  if (a67 < 0)
    operator delete(__p);
  if (a72 < 0)
    operator delete(a68);
  STACK[0x230] = (unint64_t)off_24C335D90;
  if (SLOBYTE(STACK[0x24F]) < 0)
    operator delete((void *)STACK[0x238]);
  if (SLOBYTE(STACK[0x22F]) < 0)
    operator delete((void *)STACK[0x218]);
  STACK[0x278] = (unint64_t)off_24C335D90;
  if (SLOBYTE(STACK[0x297]) < 0)
    operator delete((void *)STACK[0x280]);
  if (SLOBYTE(STACK[0x277]) < 0)
    operator delete((void *)STACK[0x260]);
  STACK[0x2C0] = (unint64_t)off_24C335D90;
  if (SLOBYTE(STACK[0x2DF]) < 0)
    operator delete((void *)STACK[0x2C8]);
  if (SLOBYTE(STACK[0x2BF]) < 0)
    operator delete((void *)STACK[0x2A8]);
  STACK[0x308] = (unint64_t)off_24C335D90;
  if (SLOBYTE(STACK[0x327]) < 0)
    operator delete((void *)STACK[0x310]);
  if (SLOBYTE(STACK[0x307]) < 0)
    operator delete((void *)STACK[0x2F0]);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&STACK[0x368]);
  if (SLOBYTE(STACK[0x34F]) < 0)
    operator delete((void *)STACK[0x338]);
  if (SLOBYTE(STACK[0x367]) < 0)
    operator delete((void *)STACK[0x350]);
  STACK[0x3C0] = (unint64_t)off_24C335D90;
  if (SLOBYTE(STACK[0x3DF]) < 0)
    operator delete((void *)STACK[0x3C8]);
  if (SLOBYTE(STACK[0x3BF]) < 0)
    operator delete((void *)STACK[0x3A8]);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&STACK[0x420]);
  if (SLOBYTE(STACK[0x407]) < 0)
    operator delete((void *)STACK[0x3F0]);
  if (SLOBYTE(STACK[0x41F]) < 0)
    operator delete((void *)STACK[0x408]);
  STACK[0x478] = (unint64_t)off_24C335D90;
  if (SLOBYTE(STACK[0x497]) < 0)
    operator delete((void *)STACK[0x480]);
  if (SLOBYTE(STACK[0x477]) < 0)
    operator delete((void *)STACK[0x460]);
  STACK[0x4C0] = (unint64_t)off_24C335D90;
  if (SLOBYTE(STACK[0x4DF]) < 0)
    operator delete((void *)STACK[0x4C8]);
  if (SLOBYTE(STACK[0x4BF]) < 0)
    operator delete((void *)STACK[0x4A8]);
  STACK[0x508] = (unint64_t)off_24C335D90;
  if (SLOBYTE(STACK[0x527]) < 0)
    operator delete((void *)STACK[0x510]);
  if (SLOBYTE(STACK[0x507]) < 0)
    operator delete((void *)STACK[0x4F0]);
  STACK[0x550] = (unint64_t)off_24C335D90;
  if (SLOBYTE(STACK[0x56F]) < 0)
    operator delete((void *)STACK[0x558]);
  if (SLOBYTE(STACK[0x54F]) < 0)
    operator delete((void *)STACK[0x538]);
  STACK[0x598] = (unint64_t)off_24C335D90;
  if (SLOBYTE(STACK[0x5B7]) < 0)
    operator delete((void *)STACK[0x5A0]);
  if (SLOBYTE(STACK[0x597]) < 0)
    operator delete((void *)STACK[0x580]);
  STACK[0x5E0] = (unint64_t)off_24C335D90;
  if (SLOBYTE(STACK[0x5FF]) < 0)
    operator delete((void *)STACK[0x5E8]);
  if (SLOBYTE(STACK[0x5DF]) < 0)
    operator delete((void *)STACK[0x5C8]);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&STACK[0x640]);
  if (SLOBYTE(STACK[0x627]) < 0)
    operator delete((void *)STACK[0x610]);
  if (SLOBYTE(STACK[0x63F]) < 0)
    operator delete((void *)STACK[0x628]);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&STACK[0x6B0]);
  if (SLOBYTE(STACK[0x697]) < 0)
    operator delete((void *)STACK[0x680]);
  if (SLOBYTE(STACK[0x6AF]) < 0)
    operator delete((void *)STACK[0x698]);
  STACK[0x708] = (unint64_t)off_24C335D90;
  if (SLOBYTE(STACK[0x727]) < 0)
    operator delete((void *)STACK[0x710]);
  if (SLOBYTE(STACK[0x707]) < 0)
    operator delete((void *)STACK[0x6F0]);
  STACK[0x750] = (unint64_t)off_24C335D90;
  if (SLOBYTE(STACK[0x76F]) < 0)
    operator delete((void *)STACK[0x758]);
  if (SLOBYTE(STACK[0x74F]) < 0)
    operator delete((void *)STACK[0x738]);
  STACK[0x798] = (unint64_t)off_24C335D90;
  if (SLOBYTE(STACK[0x7B7]) < 0)
    operator delete((void *)STACK[0x7A0]);
  if (SLOBYTE(STACK[0x797]) < 0)
    operator delete((void *)STACK[0x780]);
  STACK[0x7E0] = (unint64_t)off_24C335D90;
  if (SLOBYTE(STACK[0x7FF]) < 0)
    operator delete((void *)STACK[0x7E8]);
  if (SLOBYTE(STACK[0x7DF]) < 0)
    operator delete((void *)STACK[0x7C8]);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&STACK[0x840]);
  if (SLOBYTE(STACK[0x827]) < 0)
    operator delete((void *)STACK[0x810]);
  if (SLOBYTE(STACK[0x83F]) < 0)
    operator delete((void *)STACK[0x828]);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&STACK[0x8B0]);
  if (SLOBYTE(STACK[0x897]) < 0)
    operator delete((void *)STACK[0x880]);
  if (SLOBYTE(STACK[0x8AF]) < 0)
    operator delete((void *)STACK[0x898]);
  STACK[0x908] = (unint64_t)off_24C335D90;
  if (SLOBYTE(STACK[0x927]) < 0)
    operator delete((void *)STACK[0x910]);
  if (SLOBYTE(STACK[0x907]) < 0)
    operator delete((void *)STACK[0x8F0]);
  STACK[0x950] = (unint64_t)off_24C335D90;
  if (SLOBYTE(STACK[0x96F]) < 0)
    operator delete((void *)STACK[0x958]);
  if (SLOBYTE(STACK[0x94F]) < 0)
    operator delete((void *)STACK[0x938]);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&STACK[0x9B0]);
  if (SLOBYTE(STACK[0x997]) < 0)
    operator delete((void *)STACK[0x980]);
  if (SLOBYTE(STACK[0x9AF]) < 0)
    operator delete((void *)STACK[0x998]);
  STACK[0xA08] = (unint64_t)off_24C335D90;
  if (SLOBYTE(STACK[0xA27]) < 0)
    operator delete((void *)STACK[0xA10]);
  if (SLOBYTE(STACK[0xA07]) < 0)
    operator delete((void *)STACK[0x9F0]);
  STACK[0xA50] = (unint64_t)off_24C335D90;
  if (SLOBYTE(STACK[0xA6F]) < 0)
    operator delete((void *)STACK[0xA58]);
  if (SLOBYTE(STACK[0xA4F]) < 0)
    operator delete((void *)STACK[0xA38]);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&STACK[0xA98]);
  if (SLOBYTE(STACK[0xA97]) < 0)
    operator delete((void *)STACK[0xA80]);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&STACK[0xAF0]);
  if (SLOBYTE(STACK[0xAEF]) < 0)
    operator delete((void *)STACK[0xAD8]);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&STACK[0xB48]);
  if (SLOBYTE(STACK[0xB47]) < 0)
    operator delete((void *)STACK[0xB30]);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&STACK[0xBA0]);
  if (SLOBYTE(STACK[0xB9F]) < 0)
    operator delete((void *)STACK[0xB88]);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&STACK[0xBF8]);
  if (SLOBYTE(STACK[0xBF7]) < 0)
    operator delete((void *)STACK[0xBE0]);
  STACK[0xC50] = (unint64_t)off_24C335D90;
  if (SLOBYTE(STACK[0xC6F]) < 0)
    operator delete((void *)STACK[0xC58]);
  if (SLOBYTE(STACK[0xC4F]) < 0)
    operator delete((void *)STACK[0xC38]);
  STACK[0xC98] = (unint64_t)off_24C335D90;
  if (SLOBYTE(STACK[0xCB7]) < 0)
    operator delete((void *)STACK[0xCA0]);
  if (SLOBYTE(STACK[0xC97]) < 0)
    operator delete((void *)STACK[0xC80]);
  STACK[0xCE0] = (unint64_t)off_24C335D90;
  if (SLOBYTE(STACK[0xCFF]) < 0)
    operator delete((void *)STACK[0xCE8]);
  if (SLOBYTE(STACK[0xCDF]) < 0)
    operator delete((void *)STACK[0xCC8]);
  STACK[0xD28] = (unint64_t)off_24C335D90;
  if (SLOBYTE(STACK[0xD47]) < 0)
    operator delete((void *)STACK[0xD30]);
  if (SLOBYTE(STACK[0xD27]) < 0)
    operator delete((void *)STACK[0xD10]);
  STACK[0xD70] = (unint64_t)off_24C335D90;
  if (SLOBYTE(STACK[0xD8F]) < 0)
    operator delete((void *)STACK[0xD78]);
  if (SLOBYTE(STACK[0xD6F]) < 0)
    operator delete((void *)STACK[0xD58]);
  STACK[0xDB8] = (unint64_t)off_24C335D90;
  if (SLOBYTE(STACK[0xDD7]) < 0)
    operator delete((void *)STACK[0xDC0]);
  if (SLOBYTE(STACK[0xDB7]) < 0)
    operator delete((void *)STACK[0xDA0]);
  STACK[0xE00] = (unint64_t)off_24C335D90;
  if (SLOBYTE(STACK[0xE1F]) < 0)
    operator delete((void *)STACK[0xE08]);
  if (SLOBYTE(STACK[0xDFF]) < 0)
    operator delete((void *)STACK[0xDE8]);
  STACK[0xE48] = (unint64_t)off_24C335D90;
  if (SLOBYTE(STACK[0xE67]) < 0)
    operator delete((void *)STACK[0xE50]);
  if (SLOBYTE(STACK[0xE47]) < 0)
    operator delete((void *)STACK[0xE30]);
  STACK[0xE90] = (unint64_t)off_24C335D90;
  if (SLOBYTE(STACK[0xEAF]) < 0)
    operator delete((void *)STACK[0xE98]);
  if (SLOBYTE(STACK[0xE8F]) < 0)
    operator delete((void *)STACK[0xE78]);
  STACK[0xED8] = (unint64_t)off_24C335D90;
  if (SLOBYTE(STACK[0xEF7]) < 0)
    operator delete((void *)STACK[0xEE0]);
  if (SLOBYTE(STACK[0xED7]) < 0)
    operator delete((void *)STACK[0xEC0]);
  STACK[0xF20] = (unint64_t)off_24C335D90;
  if (SLOBYTE(STACK[0xF3F]) < 0)
    operator delete((void *)STACK[0xF28]);
  if (SLOBYTE(STACK[0xF1F]) < 0)
    operator delete((void *)STACK[0xF08]);
  STACK[0xF68] = (unint64_t)off_24C335D90;
  if (SLOBYTE(STACK[0xF87]) < 0)
    operator delete((void *)STACK[0xF70]);
  if (SLOBYTE(STACK[0xF67]) < 0)
    operator delete((void *)STACK[0xF50]);
  STACK[0xFB0] = (unint64_t)off_24C335D90;
  if (SLOBYTE(STACK[0xFCF]) < 0)
    operator delete((void *)STACK[0xFB8]);
  if (SLOBYTE(STACK[0xFAF]) < 0)
    operator delete((void *)STACK[0xF98]);
  STACK[0xFF8] = (unint64_t)off_24C335D90;
  if (SLOBYTE(STACK[0x1017]) < 0)
    operator delete((void *)STACK[0x1000]);
  if (SLOBYTE(STACK[0xFF7]) < 0)
    operator delete((void *)STACK[0xFE0]);
  STACK[0x1040] = (unint64_t)off_24C335D90;
  if (SLOBYTE(STACK[0x105F]) < 0)
    operator delete((void *)STACK[0x1048]);
  if (SLOBYTE(STACK[0x103F]) < 0)
    operator delete((void *)STACK[0x1028]);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&STACK[0x1088]);
  if (SLOBYTE(STACK[0x1087]) < 0)
    operator delete((void *)STACK[0x1070]);
  STACK[0x10E0] = (unint64_t)off_24C335D90;
  if (SLOBYTE(STACK[0x10FF]) < 0)
    operator delete((void *)STACK[0x10E8]);
  if (SLOBYTE(STACK[0x10DF]) < 0)
    operator delete((void *)STACK[0x10C8]);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&STACK[0x1128]);
  if (SLOBYTE(STACK[0x1127]) < 0)
    operator delete((void *)STACK[0x1110]);
  STACK[0x1180] = (unint64_t)off_24C335D90;
  if (v73[55] < 0)
    operator delete((void *)STACK[0x1188]);
  if (v73[23] < 0)
    operator delete((void *)STACK[0x1168]);
  STACK[0x11C8] = (unint64_t)off_24C335D90;
  if (v73[127] < 0)
    operator delete((void *)STACK[0x11D0]);
  if (v73[95] < 0)
    operator delete((void *)STACK[0x11B0]);
  STACK[0x1210] = (unint64_t)off_24C335D90;
  if (v73[199] < 0)
    operator delete((void *)STACK[0x1218]);
  if (v73[167] < 0)
    operator delete((void *)STACK[0x11F8]);
  STACK[0x1258] = (unint64_t)off_24C335D90;
  if (v73[271] < 0)
    operator delete((void *)STACK[0x1260]);
  if (v73[239] < 0)
    operator delete((void *)STACK[0x1240]);
  STACK[0x12A0] = (unint64_t)off_24C335D90;
  if (v73[343] < 0)
    operator delete((void *)STACK[0x12A8]);
  if (v73[311] < 0)
    operator delete((void *)STACK[0x1288]);
  *(_QWORD *)(v74 - 248) = off_24C335D90;
  if (v73[415] < 0)
    operator delete(*(void **)(v74 - 240));
  if (v73[383] < 0)
    operator delete((void *)STACK[0x12D0]);
  *(_QWORD *)(v74 - 176) = off_24C335D90;
  if (v73[487] < 0)
    operator delete(*(void **)(v74 - 168));
  if (v73[455] < 0)
    operator delete(*(void **)(v74 - 200));
  *(_QWORD *)(v74 - 104) = off_24C335D90;
  if (v73[559] < 0)
    operator delete(*(void **)(v74 - 96));
  if (v73[527] < 0)
    operator delete(*(void **)(v74 - 128));
  if (v73[599] < 0)
    operator delete(*(void **)(v74 - 56));
  _Unwind_Resume(a1);
}

void sub_20A684DA0()
{
  JUMPOUT(0x20A6844C4);
}

void sub_20A684DA8()
{
  JUMPOUT(0x20A6844E0);
}

void sub_20A684DB0()
{
  JUMPOUT(0x20A6844F0);
}

void sub_20A684DB8()
{
  JUMPOUT(0x20A6844F8);
}

void sub_20A684DC0()
{
  JUMPOUT(0x20A684508);
}

void sub_20A684DC8()
{
  JUMPOUT(0x20A684518);
}

void sub_20A684DD0()
{
  JUMPOUT(0x20A684534);
}

void sub_20A684DD8()
{
  JUMPOUT(0x20A684544);
}

void sub_20A684DE0()
{
  JUMPOUT(0x20A68454CLL);
}

void sub_20A684DE8()
{
  JUMPOUT(0x20A68455CLL);
}

void sub_20A684DF0()
{
  JUMPOUT(0x20A68456CLL);
}

void sub_20A684DF8()
{
  JUMPOUT(0x20A684588);
}

void sub_20A684E00()
{
  JUMPOUT(0x20A684598);
}

void sub_20A684E08()
{
  JUMPOUT(0x20A6845B4);
}

void sub_20A684E10()
{
  JUMPOUT(0x20A6845C4);
}

void sub_20A684E18()
{
  JUMPOUT(0x20A6845E0);
}

void sub_20A684E20()
{
  JUMPOUT(0x20A6845F0);
}

void sub_20A684E28()
{
  JUMPOUT(0x20A68460CLL);
}

void sub_20A684E30()
{
  JUMPOUT(0x20A68461CLL);
}

void sub_20A684E38()
{
  JUMPOUT(0x20A684638);
}

void sub_20A684E40()
{
  JUMPOUT(0x20A684648);
}

void sub_20A684E48()
{
  JUMPOUT(0x20A684664);
}

void sub_20A684E50()
{
  JUMPOUT(0x20A684674);
}

void sub_20A684E58()
{
  JUMPOUT(0x20A68467CLL);
}

void sub_20A684E60()
{
  JUMPOUT(0x20A68468CLL);
}

void sub_20A684E68()
{
  JUMPOUT(0x20A68469CLL);
}

void sub_20A684E70()
{
  JUMPOUT(0x20A6846A4);
}

void sub_20A684E78()
{
  JUMPOUT(0x20A6846B4);
}

void sub_20A684E80()
{
  JUMPOUT(0x20A6846C4);
}

void sub_20A684E88()
{
  JUMPOUT(0x20A6846E0);
}

void sub_20A684E90()
{
  JUMPOUT(0x20A6846F0);
}

void sub_20A684E98()
{
  JUMPOUT(0x20A68470CLL);
}

void sub_20A684EA0()
{
  JUMPOUT(0x20A68471CLL);
}

void sub_20A684EA8()
{
  JUMPOUT(0x20A684738);
}

void sub_20A684EB0()
{
  JUMPOUT(0x20A684748);
}

void sub_20A684EB8()
{
  JUMPOUT(0x20A684764);
}

void sub_20A684EC0()
{
  JUMPOUT(0x20A684774);
}

void sub_20A684EC8()
{
  JUMPOUT(0x20A68477CLL);
}

void sub_20A684ED0()
{
  JUMPOUT(0x20A68478CLL);
}

void sub_20A684ED8()
{
  JUMPOUT(0x20A68479CLL);
}

void sub_20A684EE0()
{
  JUMPOUT(0x20A6847A4);
}

void sub_20A684EE8()
{
  JUMPOUT(0x20A6847B4);
}

void sub_20A684EF0()
{
  JUMPOUT(0x20A6847C4);
}

void sub_20A684EF8()
{
  JUMPOUT(0x20A6847E0);
}

void sub_20A684F00()
{
  JUMPOUT(0x20A6847F0);
}

void sub_20A684F08()
{
  JUMPOUT(0x20A68480CLL);
}

void sub_20A684F10()
{
  JUMPOUT(0x20A68481CLL);
}

void sub_20A684F18()
{
  JUMPOUT(0x20A684824);
}

void sub_20A684F20()
{
  JUMPOUT(0x20A684834);
}

void sub_20A684F28()
{
  JUMPOUT(0x20A684844);
}

void sub_20A684F30()
{
  JUMPOUT(0x20A684860);
}

void sub_20A684F38()
{
  JUMPOUT(0x20A684870);
}

void sub_20A684F40()
{
  JUMPOUT(0x20A68488CLL);
}

void sub_20A684F48()
{
  JUMPOUT(0x20A68489CLL);
}

void sub_20A684F50()
{
  JUMPOUT(0x20A6848A4);
}

void sub_20A684F58()
{
  JUMPOUT(0x20A6848B4);
}

void sub_20A684F60()
{
  JUMPOUT(0x20A6848BCLL);
}

void sub_20A684F68()
{
  JUMPOUT(0x20A6848CCLL);
}

void sub_20A684F70()
{
  JUMPOUT(0x20A6848D4);
}

void sub_20A684F78()
{
  JUMPOUT(0x20A6848E4);
}

void sub_20A684F80()
{
  JUMPOUT(0x20A6848ECLL);
}

void sub_20A684F88()
{
  JUMPOUT(0x20A6848FCLL);
}

void sub_20A684F90()
{
  JUMPOUT(0x20A684904);
}

void sub_20A684F98()
{
  JUMPOUT(0x20A684914);
}

void sub_20A684FA0()
{
  JUMPOUT(0x20A684930);
}

void sub_20A684FA8()
{
  JUMPOUT(0x20A684940);
}

void sub_20A684FB0()
{
  JUMPOUT(0x20A68495CLL);
}

void sub_20A684FB8()
{
  JUMPOUT(0x20A68496CLL);
}

void sub_20A684FC0()
{
  JUMPOUT(0x20A684988);
}

void sub_20A684FC8()
{
  JUMPOUT(0x20A684998);
}

void sub_20A684FD0()
{
  JUMPOUT(0x20A6849B4);
}

void sub_20A684FD8()
{
  JUMPOUT(0x20A6849C4);
}

void sub_20A684FE0()
{
  JUMPOUT(0x20A6849E0);
}

void sub_20A684FE8()
{
  JUMPOUT(0x20A6849F0);
}

void sub_20A684FF0()
{
  JUMPOUT(0x20A684A0CLL);
}

void sub_20A684FF8()
{
  JUMPOUT(0x20A684A1CLL);
}

void sub_20A685000()
{
  JUMPOUT(0x20A684A38);
}

void sub_20A685008()
{
  JUMPOUT(0x20A684A48);
}

void sub_20A685010()
{
  JUMPOUT(0x20A684A64);
}

void sub_20A685018()
{
  JUMPOUT(0x20A684A74);
}

void sub_20A685020()
{
  JUMPOUT(0x20A684A90);
}

void sub_20A685028()
{
  JUMPOUT(0x20A684AA0);
}

void sub_20A685030()
{
  JUMPOUT(0x20A684ABCLL);
}

void sub_20A685038()
{
  JUMPOUT(0x20A684ACCLL);
}

void sub_20A685040()
{
  JUMPOUT(0x20A684AE8);
}

void sub_20A685048()
{
  JUMPOUT(0x20A684AF8);
}

void sub_20A685050()
{
  JUMPOUT(0x20A684B14);
}

void sub_20A685058()
{
  JUMPOUT(0x20A684B24);
}

void sub_20A685060()
{
  JUMPOUT(0x20A684B40);
}

void sub_20A685068()
{
  JUMPOUT(0x20A684B50);
}

void sub_20A685070()
{
  JUMPOUT(0x20A684B70);
}

void sub_20A685078()
{
  JUMPOUT(0x20A684B80);
}

void sub_20A685080()
{
  JUMPOUT(0x20A684BA0);
}

void sub_20A685088()
{
  JUMPOUT(0x20A684BB4);
}

void sub_20A685090()
{
  JUMPOUT(0x20A684BC0);
}

void sub_20A685098()
{
  JUMPOUT(0x20A684BD4);
}

void sub_20A6850A0()
{
  JUMPOUT(0x20A684BF4);
}

void sub_20A6850A8()
{
  JUMPOUT(0x20A684C08);
}

void sub_20A6850B0()
{
  JUMPOUT(0x20A684C14);
}

void sub_20A6850B8()
{
  JUMPOUT(0x20A684C28);
}

void sub_20A6850C0()
{
  JUMPOUT(0x20A684C44);
}

void sub_20A6850C8()
{
  JUMPOUT(0x20A684C54);
}

void sub_20A6850D0()
{
  JUMPOUT(0x20A684C70);
}

void sub_20A6850D8()
{
  JUMPOUT(0x20A684C80);
}

void sub_20A6850E0()
{
  JUMPOUT(0x20A684C9CLL);
}

void sub_20A6850E8()
{
  JUMPOUT(0x20A684CACLL);
}

void sub_20A6850F0()
{
  JUMPOUT(0x20A684CC8);
}

void sub_20A6850F8()
{
  JUMPOUT(0x20A684CD8);
}

void sub_20A685100()
{
  JUMPOUT(0x20A684CF4);
}

void sub_20A685108()
{
  JUMPOUT(0x20A684D04);
}

void sub_20A685110()
{
  JUMPOUT(0x20A684D20);
}

void sub_20A685118()
{
  JUMPOUT(0x20A684D30);
}

void sub_20A685120()
{
  JUMPOUT(0x20A684D4CLL);
}

void sub_20A685128()
{
  JUMPOUT(0x20A684D5CLL);
}

void sub_20A685130()
{
  JUMPOUT(0x20A684D78);
}

void sub_20A685138()
{
  JUMPOUT(0x20A684D88);
}

uint64_t mlcore::TypedEntityClass<mlcore::Podcast>::databaseTable()
{
  return *(_QWORD *)mediaplatform::Singleton<mlcore::AlbumTable>::sharedInstance();
}

uint64_t mlcore::TypedEntityClass<mlcore::PlaylistItemReaction>::databaseTable()
{
  return *(_QWORD *)mediaplatform::Singleton<mlcore::ContainerItemReactionTable>::sharedInstance();
}

uint64_t mlcore::TypedEntityClass<mlcore::PodcastEpisode>::databaseTable()
{
  return *(_QWORD *)mediaplatform::Singleton<mlcore::ItemTable>::sharedInstance();
}

uint64_t mlcore::ItemPropertyStorePlaylistID(mlcore *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&mlcore::ItemPropertyStorePlaylistID(void)::once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&mlcore::ItemPropertyStorePlaylistID(void)::once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyStorePlaylistID(void)::$_0 &&>>);
  }
  return mlcore::ItemPropertyStorePlaylistID(void)::property;
}

uint64_t mlcore::ItemPropertyItemArtistPersistentID(mlcore *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&mlcore::ItemPropertyItemArtistPersistentID(void)::once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&mlcore::ItemPropertyItemArtistPersistentID(void)::once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyItemArtistPersistentID(void)::$_0 &&>>);
  }
  return mlcore::ItemPropertyItemArtistPersistentID(void)::property;
}

uint64_t mlcore::TypedEntityClass<mlcore::TVEpisode>::sharedPointer()
{
  unint64_t v0;
  char v2;
  char **v3;
  char *v4;

  v0 = atomic_load(&mlcore::TypedEntityClass<mlcore::TVEpisode>::sharedPointer(void)::__once);
  if (v0 != -1)
  {
    v4 = &v2;
    v3 = &v4;
    std::__call_once(&mlcore::TypedEntityClass<mlcore::TVEpisode>::sharedPointer(void)::__once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::TypedEntityClass<mlcore::TVEpisode>::sharedPointer(void)::{lambda(void)#1} &&>>);
  }
  return mlcore::TypedEntityClass<mlcore::TVEpisode>::sharedPointer(void)::__sharedPointer;
}

uint64_t mlcore::ItemPropertyAlbumPersistentID(mlcore *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&mlcore::ItemPropertyAlbumPersistentID(void)::once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&mlcore::ItemPropertyAlbumPersistentID(void)::once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyAlbumPersistentID(void)::$_0 &&>>);
  }
  return mlcore::ItemPropertyAlbumPersistentID(void)::property;
}

uint64_t mlcore::ItemPropertyDateDownloaded(mlcore *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&mlcore::ItemPropertyDateDownloaded(void)::once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&mlcore::ItemPropertyDateDownloaded(void)::once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyDateDownloaded(void)::$_0 &&>>);
  }
  return mlcore::ItemPropertyDateDownloaded(void)::property;
}

uint64_t mlcore::TypedEntityClass<mlcore::Composer>::databaseTable()
{
  return *(_QWORD *)mediaplatform::Singleton<mlcore::ComposerTable>::sharedInstance();
}

uint64_t mediaplatform::Singleton<mlcore::ComposerTable>::sharedInstance()
{
  unsigned __int8 v0;
  mlcore::ComposerTable **v2;

  if ((v0 & 1) == 0
  {
    v2 = (mlcore::ComposerTable **)operator new();
    _ZNSt3__115allocate_sharedB8ne180100IN6mlcore13ComposerTableENS_9allocatorIS2_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(v2);
    mediaplatform::Singleton<mlcore::ComposerTable>::sharedInstance(void)::_sharedInstance = (uint64_t)v2;
  }
  return mediaplatform::Singleton<mlcore::ComposerTable>::sharedInstance(void)::_sharedInstance;
}

void sub_20A6853E0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x20BD27AFC](v1, 0x20C40A4A59CD2);
  _Unwind_Resume(a1);
}

mlcore::ComposerTable *mlcore::ComposerTable::ComposerTable(mlcore::ComposerTable *this)
{
  const void *v2;
  size_t v3;
  void *v4;
  std::string *v5;
  char v6;
  void *v8[2];
  char v9;
  void (**v10)(mediaplatform::DatabaseColumnBase *__hidden);
  std::string v11;
  int v12;
  uint64_t v13;
  int v14;
  void *v15[2];
  char v16;
  void (**v17)(mediaplatform::DatabaseColumnBase *__hidden);
  std::string v18;
  int v19;
  uint64_t v20;
  void *v21[2];
  char v22;
  void (**v23)(mediaplatform::DatabaseColumnBase *__hidden);
  std::string v24;
  int v25;
  uint64_t v26;
  void *v27[2];
  char v28;
  void (**v29)(mediaplatform::DatabaseColumnBase *__hidden);
  std::string v30;
  int v31;
  uint64_t v32;
  void *v33[2];
  char v34;
  void (**v35)(mediaplatform::DatabaseColumnBase *__hidden);
  std::string v36;
  int v37;
  uint64_t v38;
  void *v39[2];
  char v40;
  void (**v41)(mediaplatform::DatabaseColumnBase *__hidden);
  std::string v42;
  int v43;
  uint64_t v44;
  int v45;
  void *v46[2];
  char v47;
  void (**v48)(mediaplatform::DatabaseColumnBase *__hidden);
  std::string v49;
  int v50;
  uint64_t v51;
  void *v52[2];
  char v53;
  char v54[8];
  std::string v55;
  int v56;
  char v57;
  size_t v58;
  const void *v59;
  void *v60[2];
  char v61;
  char v62[8];
  std::string v63;
  int v64;
  char v65;
  std::string v66;
  void *v67[2];
  char v68;
  void *v69[2];
  char v70;
  char v71[8];
  std::string v72;
  int v73;
  char v74;
  std::string v75;
  void *v76[2];
  char v77;
  void (**v78)(mediaplatform::DatabaseColumnBase *__hidden);
  std::string v79;
  int v80;
  uint64_t v81;
  int v82;
  std::string __s;
  uint64_t (**v84)();
  std::string __p;
  int v86;
  uint64_t v87;
  int v88;
  uint64_t (**v89)();
  std::string v90;
  int v91;
  uint64_t v92;
  uint64_t (**v93)();
  std::string v94;
  int v95;
  uint64_t v96;
  uint64_t (**v97)();
  std::string v98;
  int v99;
  uint64_t v100;
  uint64_t (**v101)();
  std::string v102;
  int v103;
  uint64_t v104;
  uint64_t (**v105)();
  std::string v106;
  int v107;
  uint64_t v108;
  int v109;
  uint64_t (**v110)();
  std::string v111;
  int v112;
  uint64_t v113;
  uint64_t (**v114)();
  std::string v115;
  int v116;
  char v117;
  void (**v118)(mediaplatform::Data *__hidden);
  size_t v119;
  size_t v120;
  void *v121;
  char v122;
  uint64_t (**v123)();
  std::string v124;
  int v125;
  char v126;
  std::string v127;
  uint64_t (**v128)();
  std::string v129;
  int v130;
  char v131;
  std::string v132;
  uint64_t (**v133)();
  std::string v134;
  int v135;
  uint64_t v136;
  int v137;
  std::string v138;

  std::string::basic_string[abi:ne180100]<0>(&__s, "composer");
  std::string::basic_string[abi:ne180100]<0>(v76, "composer_pid");
  mlcore::MediaColumn<long long>::MediaColumn((uint64_t)&v78, (uint64_t)v76, 1);
  std::string::basic_string[abi:ne180100]<0>(v69, "composer");
  std::string::basic_string[abi:ne180100]<0>(v67, "");
  mlcore::MediaColumn<std::string>::MediaColumn((uint64_t)v71, (uint64_t)v69, (uint64_t)v67);
  std::string::basic_string[abi:ne180100]<0>(v60, "sort_composer");
  mlcore::MediaColumn<std::string>::MediaColumn((uint64_t)v62, (uint64_t)v60, 0);
  std::string::basic_string[abi:ne180100]<0>(v52, "grouping_key");
  mlcore::MediaColumn<mediaplatform::Data>::MediaColumn((uint64_t)v54, (uint64_t)v52);
  std::string::basic_string[abi:ne180100]<0>(v46, "cloud_status");
  mlcore::MediaColumn<int>::MediaColumn((uint64_t)&v48, (uint64_t)v46, 0);
  std::string::basic_string[abi:ne180100]<0>(v39, "representative_item_pid");
  mlcore::MediaColumn<long long>::MediaColumn((uint64_t)&v41, (uint64_t)v39);
  std::string::basic_string[abi:ne180100]<0>(v33, "keep_local");
  mlcore::MediaColumn<int>::MediaColumn((uint64_t)&v35, (uint64_t)v33, 0);
  std::string::basic_string[abi:ne180100]<0>(v27, "keep_local_status");
  mlcore::MediaColumn<int>::MediaColumn((uint64_t)&v29, (uint64_t)v27, 0);
  std::string::basic_string[abi:ne180100]<0>(v21, "keep_local_status_reason");
  mlcore::MediaColumn<int>::MediaColumn((uint64_t)&v23, (uint64_t)v21, 0);
  std::string::basic_string[abi:ne180100]<0>(v15, "keep_local_constraints");
  mlcore::MediaColumn<int>::MediaColumn((uint64_t)&v17, (uint64_t)v15, 0);
  std::string::basic_string[abi:ne180100]<0>(v8, "sync_id");
  mlcore::MediaColumn<long long>::MediaColumn((uint64_t)&v10, (uint64_t)v8);
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v138, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
  else
    v138 = __s;
  if (SHIBYTE(v79.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v134, v79.__r_.__value_.__l.__data_, v79.__r_.__value_.__l.__size_);
  else
    v134 = v79;
  v133 = off_24C335B18;
  v136 = v81;
  v135 = v80;
  v137 = v82;
  v128 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v72.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v129, v72.__r_.__value_.__l.__data_, v72.__r_.__value_.__l.__size_);
  else
    v129 = v72;
  v130 = v73;
  v128 = &off_24C335AB8;
  v131 = v74;
  if (SHIBYTE(v75.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v132, v75.__r_.__value_.__l.__data_, v75.__r_.__value_.__l.__size_);
  else
    v132 = v75;
  v123 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v63.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v124, v63.__r_.__value_.__l.__data_, v63.__r_.__value_.__l.__size_);
  else
    v124 = v63;
  v125 = v64;
  v123 = &off_24C335AB8;
  v126 = v65;
  if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v127, v66.__r_.__value_.__l.__data_, v66.__r_.__value_.__l.__size_);
  else
    v127 = v66;
  v114 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v115, v55.__r_.__value_.__l.__data_, v55.__r_.__value_.__l.__size_);
  else
    v115 = v55;
  v116 = v56;
  v114 = &off_24C335A98;
  v117 = v57;
  v2 = v59;
  v3 = v58;
  v118 = &off_24C331510;
  v119 = v58;
  v120 = v58;
  if (v58)
    v4 = (void *)operator new[]();
  else
    v4 = 0;
  v121 = v4;
  v122 = 1;
  if (v2)
    memcpy(v4, v2, v3);
  else
    bzero(v4, v3);
  if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v111, v49.__r_.__value_.__l.__data_, v49.__r_.__value_.__l.__size_);
  else
    v111 = v49;
  v112 = v50;
  v110 = off_24C335AF8;
  v113 = v51;
  if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v106, v42.__r_.__value_.__l.__data_, v42.__r_.__value_.__l.__size_);
  else
    v106 = v42;
  v105 = off_24C335B18;
  v108 = v44;
  v107 = v43;
  v109 = v45;
  if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v102, v36.__r_.__value_.__l.__data_, v36.__r_.__value_.__l.__size_);
  else
    v102 = v36;
  v103 = v37;
  v101 = off_24C335AF8;
  v104 = v38;
  if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v98, v30.__r_.__value_.__l.__data_, v30.__r_.__value_.__l.__size_);
  else
    v98 = v30;
  v99 = v31;
  v97 = off_24C335AF8;
  v100 = v32;
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v94, v24.__r_.__value_.__l.__data_, v24.__r_.__value_.__l.__size_);
  else
    v94 = v24;
  v95 = v25;
  v93 = off_24C335AF8;
  v96 = v26;
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v90, v18.__r_.__value_.__l.__data_, v18.__r_.__value_.__l.__size_);
  else
    v90 = v18;
  v91 = v19;
  v89 = off_24C335AF8;
  v92 = v20;
  v84 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&__p, v11.__r_.__value_.__l.__data_, v11.__r_.__value_.__l.__size_);
  else
    __p = v11;
  v84 = off_24C335B18;
  v87 = v13;
  v86 = v12;
  v88 = v14;
  mediaplatform::DatabaseTable<long long,std::string,std::string,mediaplatform::Data,int,long long,int,int,int,int,long long>::DatabaseTable((uint64_t)this, (__int128 *)&v138, (uint64_t)&v133, (uint64_t)&v128, (uint64_t)&v123, (uint64_t)&v114, (uint64_t)&v110, (uint64_t)&v105, (uint64_t)&v101, (uint64_t)&v97, (uint64_t)&v93, (uint64_t)&v89, (uint64_t)&v84);
  v84 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v89 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v90.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v90.__r_.__value_.__l.__data_);
  v93 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v94.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v94.__r_.__value_.__l.__data_);
  v97 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v98.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v98.__r_.__value_.__l.__data_);
  v101 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v102.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v102.__r_.__value_.__l.__data_);
  v105 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v106.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v106.__r_.__value_.__l.__data_);
  v110 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v111.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v111.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<mediaplatform::Data>::~DatabaseColumn((uint64_t)&v114);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v123);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v128);
  v133 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v134.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v134.__r_.__value_.__l.__data_);
  if (SHIBYTE(v138.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v138.__r_.__value_.__l.__data_);
  *(_QWORD *)this = &off_24C3360F8;
  *((_QWORD *)this + 84) = off_24C335D90;
  if (SHIBYTE(v79.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 680), v79.__r_.__value_.__l.__data_, v79.__r_.__value_.__l.__size_);
  else
    *(std::string *)((char *)this + 680) = v79;
  *((_DWORD *)this + 176) = v80;
  *(_QWORD *)((char *)this + 708) = v81;
  *((_DWORD *)this + 179) = v82;
  *((_QWORD *)this + 84) = off_24C336AC0;
  std::__tuple_leaf<1ul,mlcore::MediaColumn<std::string>,false>::__tuple_leaf[abi:ne180100]<mlcore::MediaColumn<std::string>&,void>((uint64_t)this + 720, (uint64_t)v71);
  std::__tuple_leaf<2ul,mlcore::MediaColumn<std::string>,false>::__tuple_leaf[abi:ne180100]<mlcore::MediaColumn<std::string>&,void>((uint64_t)this + 784, (uint64_t)v62);
  std::__tuple_leaf<3ul,mlcore::MediaColumn<mediaplatform::Data>,false>::__tuple_leaf[abi:ne180100]<mlcore::MediaColumn<mediaplatform::Data>&,void>((uint64_t)this + 848, (uint64_t)v54);
  *((_QWORD *)this + 116) = off_24C335D90;
  if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external((std::string *)this + 39, v49.__r_.__value_.__l.__data_, v49.__r_.__value_.__l.__size_);
  else
    *((std::string *)this + 39) = v49;
  *((_DWORD *)this + 240) = v50;
  *(_QWORD *)((char *)this + 964) = v51;
  *((_QWORD *)this + 116) = off_24C336AA0;
  *((_QWORD *)this + 122) = off_24C335D90;
  if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external((std::string *)this + 41, v42.__r_.__value_.__l.__data_, v42.__r_.__value_.__l.__size_);
  else
    *((std::string *)this + 41) = v42;
  *((_DWORD *)this + 252) = v43;
  *(_QWORD *)((char *)this + 1012) = v44;
  *((_DWORD *)this + 255) = v45;
  *((_QWORD *)this + 122) = off_24C336AC0;
  *((_QWORD *)this + 128) = off_24C335D90;
  if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external((std::string *)this + 43, v36.__r_.__value_.__l.__data_, v36.__r_.__value_.__l.__size_);
  else
    *((std::string *)this + 43) = v36;
  *((_DWORD *)this + 264) = v37;
  *(_QWORD *)((char *)this + 1060) = v38;
  *((_QWORD *)this + 128) = off_24C336AA0;
  *((_QWORD *)this + 134) = off_24C335D90;
  if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external((std::string *)this + 45, v30.__r_.__value_.__l.__data_, v30.__r_.__value_.__l.__size_);
  else
    *((std::string *)this + 45) = v30;
  *((_DWORD *)this + 276) = v31;
  *(_QWORD *)((char *)this + 1108) = v32;
  *((_QWORD *)this + 134) = off_24C336AA0;
  *((_QWORD *)this + 140) = off_24C335D90;
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external((std::string *)this + 47, v24.__r_.__value_.__l.__data_, v24.__r_.__value_.__l.__size_);
  else
    *((std::string *)this + 47) = v24;
  *((_DWORD *)this + 288) = v25;
  *(_QWORD *)((char *)this + 1156) = v26;
  *((_QWORD *)this + 140) = off_24C336AA0;
  *((_QWORD *)this + 146) = off_24C335D90;
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external((std::string *)this + 49, v18.__r_.__value_.__l.__data_, v18.__r_.__value_.__l.__size_);
  else
    *((std::string *)this + 49) = v18;
  *((_DWORD *)this + 300) = v19;
  *(_QWORD *)((char *)this + 1204) = v20;
  *((_QWORD *)this + 146) = off_24C336AA0;
  *((_QWORD *)this + 152) = off_24C335D90;
  v5 = (std::string *)((char *)this + 1224);
  v6 = HIBYTE(v11.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v5, v11.__r_.__value_.__l.__data_, v11.__r_.__value_.__l.__size_);
    v6 = HIBYTE(v11.__r_.__value_.__r.__words[2]);
  }
  else
  {
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = *(_OWORD *)&v11.__r_.__value_.__l.__data_;
    *((_QWORD *)this + 155) = *((_QWORD *)&v11.__r_.__value_.__l + 2);
  }
  *((_DWORD *)this + 312) = v12;
  *(_QWORD *)((char *)this + 1252) = v13;
  *((_DWORD *)this + 315) = v14;
  *((_QWORD *)this + 152) = off_24C336AC0;
  v10 = off_24C335D90;
  if (v6 < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
  if (v9 < 0)
    operator delete(v8[0]);
  v17 = off_24C335D90;
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v18.__r_.__value_.__l.__data_);
  if (v16 < 0)
    operator delete(v15[0]);
  v23 = off_24C335D90;
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v24.__r_.__value_.__l.__data_);
  if (v22 < 0)
    operator delete(v21[0]);
  v29 = off_24C335D90;
  if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v30.__r_.__value_.__l.__data_);
  if (v28 < 0)
    operator delete(v27[0]);
  v35 = off_24C335D90;
  if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v36.__r_.__value_.__l.__data_);
  if (v34 < 0)
    operator delete(v33[0]);
  v41 = off_24C335D90;
  if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v42.__r_.__value_.__l.__data_);
  if (v40 < 0)
    operator delete(v39[0]);
  v48 = off_24C335D90;
  if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v49.__r_.__value_.__l.__data_);
  if (v47 < 0)
    operator delete(v46[0]);
  mediaplatform::DatabaseColumn<mediaplatform::Data>::~DatabaseColumn((uint64_t)v54);
  if (v53 < 0)
    operator delete(v52[0]);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)v62);
  if (v61 < 0)
    operator delete(v60[0]);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)v71);
  if (v68 < 0)
    operator delete(v67[0]);
  if (v70 < 0)
    operator delete(v69[0]);
  v78 = off_24C335D90;
  if (SHIBYTE(v79.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v79.__r_.__value_.__l.__data_);
  if (v77 < 0)
    operator delete(v76[0]);
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__s.__r_.__value_.__l.__data_);
  *(_QWORD *)this = &off_24C336FA8;
  return this;
}

void sub_20A685FEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void **a15, uint64_t a16, uint64_t a17, void **a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42,uint64_t a43,void *a44,uint64_t a45,int a46,__int16 a47,char a48,char a49,uint64_t a50,uint64_t a51,void *a52,uint64_t a53,int a54,__int16 a55,char a56,char a57,uint64_t a58,void *a59,uint64_t a60,int a61,__int16 a62,char a63)
{
  char a64;
  void *a67;
  char a72;
  void *a73;
  char a74;
  void *a75;
  char a76;
  void *a77;
  char a78;
  void *a79;
  char a80;
  void *a81;
  uint64_t v81;
  void **v82;
  void **v83;
  uint64_t v84;
  void **v85;
  void **v86;
  void **v87;

  *(_QWORD *)(v81 + 1168) = v84;
  if (*(char *)(v81 + 1199) < 0)
    operator delete(*v83);
  *(_QWORD *)(v81 + 1120) = v84;
  if (*(char *)(v81 + 1151) < 0)
    operator delete(*v82);
  *(_QWORD *)(v81 + 1072) = v84;
  if (*(char *)(v81 + 1103) < 0)
    operator delete(*v87);
  *(_QWORD *)(v81 + 1024) = v84;
  if (*(char *)(v81 + 1055) < 0)
    operator delete(*v86);
  *(_QWORD *)(v81 + 976) = v84;
  if (*(char *)(v81 + 1007) < 0)
    operator delete(*v85);
  *(_QWORD *)(v81 + 928) = v84;
  if (*(char *)(v81 + 959) < 0)
    operator delete(*a15);
  mediaplatform::DatabaseColumn<mediaplatform::Data>::~DatabaseColumn(a16);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a17);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a20);
  *(_QWORD *)(v81 + 672) = v84;
  if (*(char *)(v81 + 703) < 0)
    operator delete(*a18);
  mediaplatform::DatabaseTable<long long,std::string,std::string,mediaplatform::Data,int,long long,int,int,int,int,long long>::~DatabaseTable(v81);
  if (a34 < 0)
    operator delete(__p);
  if (a27 < 0)
    operator delete(a22);
  if (a49 < 0)
    operator delete(a44);
  if (a42 < 0)
    operator delete(a37);
  if (a64 < 0)
    operator delete(a59);
  if (a57 < 0)
    operator delete(a52);
  if (a74 < 0)
    operator delete(a73);
  if (a72 < 0)
    operator delete(a67);
  if (a78 < 0)
    operator delete(a77);
  if (a76 < 0)
    operator delete(a75);
  if (SLOBYTE(STACK[0x207]) < 0)
    operator delete(a81);
  if (a80 < 0)
    operator delete(a79);
  STACK[0x230] = (unint64_t)off_24C335D90;
  if (SLOBYTE(STACK[0x24F]) < 0)
    operator delete((void *)STACK[0x238]);
  if (SLOBYTE(STACK[0x22F]) < 0)
    operator delete((void *)STACK[0x218]);
  mediaplatform::DatabaseColumn<mediaplatform::Data>::~DatabaseColumn((uint64_t)&STACK[0x278]);
  if (SLOBYTE(STACK[0x277]) < 0)
    operator delete((void *)STACK[0x260]);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&STACK[0x2E0]);
  if (SLOBYTE(STACK[0x2DF]) < 0)
    operator delete((void *)STACK[0x2C8]);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&STACK[0x350]);
  if (SLOBYTE(STACK[0x337]) < 0)
    operator delete((void *)STACK[0x320]);
  if (SLOBYTE(STACK[0x34F]) < 0)
    operator delete((void *)STACK[0x338]);
  STACK[0x3A8] = (unint64_t)off_24C335D90;
  if (SLOBYTE(STACK[0x3C7]) < 0)
    operator delete((void *)STACK[0x3B0]);
  if (SLOBYTE(STACK[0x3A7]) < 0)
    operator delete((void *)STACK[0x390]);
  if (SLOBYTE(STACK[0x3EF]) < 0)
    operator delete((void *)STACK[0x3D8]);
  _Unwind_Resume(a1);
}

void sub_20A68643C()
{
  JUMPOUT(0x20A686288);
}

void sub_20A686444()
{
  JUMPOUT(0x20A686298);
}

void sub_20A68644C()
{
  JUMPOUT(0x20A6862B4);
}

void sub_20A686454()
{
  JUMPOUT(0x20A6862C4);
}

void sub_20A68645C()
{
  JUMPOUT(0x20A6862E0);
}

void sub_20A686464()
{
  JUMPOUT(0x20A6862F0);
}

void sub_20A68646C()
{
  JUMPOUT(0x20A68630CLL);
}

void sub_20A686474()
{
  JUMPOUT(0x20A68631CLL);
}

void sub_20A68647C()
{
  JUMPOUT(0x20A686338);
}

void sub_20A686484()
{
  JUMPOUT(0x20A686348);
}

void sub_20A68648C()
{
  JUMPOUT(0x20A686364);
}

void sub_20A686494()
{
  JUMPOUT(0x20A686374);
}

void sub_20A68649C()
{
  JUMPOUT(0x20A686390);
}

void sub_20A6864A4()
{
  JUMPOUT(0x20A6863A0);
}

void sub_20A6864AC()
{
  JUMPOUT(0x20A6863A8);
}

void sub_20A6864B4()
{
  JUMPOUT(0x20A6863B8);
}

void sub_20A6864BC()
{
  JUMPOUT(0x20A6863C0);
}

void sub_20A6864C4()
{
  JUMPOUT(0x20A6863D0);
}

void sub_20A6864CC()
{
  JUMPOUT(0x20A6863D8);
}

void sub_20A6864D4()
{
  JUMPOUT(0x20A6863E8);
}

void sub_20A6864DC()
{
  JUMPOUT(0x20A6863F8);
}

void sub_20A6864E4()
{
  JUMPOUT(0x20A686414);
}

void sub_20A6864EC()
{
  JUMPOUT(0x20A686424);
}

void mlcore::EntityQuery::composersQuery(mlcore *a1@<X0>, char **a2@<X8>)
{
  uint64_t v4;
  char *v5;
  unint64_t *v6;
  unint64_t *v7;
  unint64_t *v8;
  unint64_t v9;
  unint64_t v10;
  __int128 *v11;
  char v12;
  uint64_t v13;
  char v14;
  __int128 v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t i;
  unint64_t v19;
  uint64_t v20;
  char *v21;
  mlcore *v22;
  mlcore *v23;
  uint64_t v24;
  void **v25;
  uint64_t v26;
  void **v27;
  void (**v28)(mlcore::SortDescriptor *__hidden);
  std::__shared_weak_count *v29;
  uint64_t *p_shared_owners;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  __int128 **v35;
  void **v36;
  void **v37;
  __int128 *v38;
  __int128 *v39;
  __int128 *v40;
  char *v41;
  std::__shared_weak_count *v42;
  char *v43;
  std::__shared_weak_count *v44;
  void ***v45;
  char v46;
  void (**v47)(mlcore::SortDescriptor *__hidden);
  mlcore *v48;
  char *v49;
  void (**v50)(mlcore::SortDescriptor *__hidden);
  uint64_t v51;
  int v52;
  uint64_t v53;

  v53 = *MEMORY[0x24BDAC8D0];
  v4 = mlcore::ComposerPropertyOrder(a1);
  v5 = (char *)operator new(0x48uLL);
  *(_OWORD *)(v5 + 8) = 0u;
  v6 = (unint64_t *)(v5 + 8);
  *(_QWORD *)v5 = &off_24C33CE88;
  *((_QWORD *)v5 + 3) = &unk_24C339CA8;
  *((_QWORD *)v5 + 4) = v4;
  *((_QWORD *)v5 + 5) = 0x100000000;
  *((_QWORD *)v5 + 6) = 0;
  *(_OWORD *)(v5 + 56) = 0u;
  v43 = v5 + 24;
  v44 = (std::__shared_weak_count *)v5;
  if (*(_QWORD *)a1)
  {
    v7 = (unint64_t *)*((_QWORD *)a1 + 1);
    v47 = *(void (***)(mlcore::SortDescriptor *__hidden))a1;
    v48 = (mlcore *)v7;
    if (v7)
    {
      v8 = v7 + 1;
      do
        v9 = __ldxr(v8);
      while (__stxr(v9 + 1, v8));
    }
    v49 = v5 + 24;
    v50 = (void (**)(mlcore::SortDescriptor *__hidden))v5;
    do
      v10 = __ldxr(v6);
    while (__stxr(v10 + 1, v6));
    v38 = 0;
    v39 = 0;
    v40 = 0;
    v35 = &v38;
    LOBYTE(v36) = 0;
    v11 = (__int128 *)operator new(0x20uLL);
    v12 = 0;
    v13 = 0;
    v38 = v11;
    v39 = v11;
    v40 = v11 + 2;
    do
    {
      v14 = v12;
      v15 = *(_OWORD *)&(&v47)[2 * v13];
      *v11 = v15;
      if (*((_QWORD *)&v15 + 1))
      {
        v16 = (unint64_t *)(*((_QWORD *)&v15 + 1) + 8);
        do
          v17 = __ldxr(v16);
        while (__stxr(v17 + 1, v16));
      }
      ++v11;
      v12 = 1;
      v13 = 1;
    }
    while ((v14 & 1) == 0);
    v39 = v11;
    mlcore::CreateAndPredicate(&v38, &v41);
    v35 = &v38;
    std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v35);
    for (i = 2; i != -2; i -= 2)
      std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)&(&v47)[i]);
  }
  else
  {
    v41 = v5 + 24;
    v42 = (std::__shared_weak_count *)v5;
    do
      v19 = __ldxr(v6);
    while (__stxr(v19 + 1, v6));
  }
  v20 = mlcore::TypedEntityClass<mlcore::Composer>::sharedPointer();
  std::allocate_shared[abi:ne180100]<mlcore::EntityQuery,std::allocator<mlcore::EntityQuery>,mlcore::EntityClass *,std::shared_ptr<mlcore::Predicate> &,void>(a2, v20, (uint64_t)v41, v42);
  v21 = *a2;
  v23 = (mlcore *)mlcore::ComposerPropertyOrder(v22);
  v47 = &off_24C337670;
  v48 = v23;
  LODWORD(v49) = 0;
  v24 = mlcore::ComposerPropertyPersistentID(v23);
  v50 = &off_24C337670;
  v51 = v24;
  v52 = 0;
  v36 = 0;
  v37 = 0;
  v35 = 0;
  v45 = (void ***)&v35;
  v46 = 0;
  v25 = (void **)operator new(0x30uLL);
  v26 = 0;
  v35 = (__int128 **)v25;
  v37 = v25 + 6;
  do
  {
    v27 = &v25[v26];
    v28 = (&v47)[v26 + 1];
    *v27 = &off_24C337670;
    v27[1] = v28;
    *((_DWORD *)v27 + 4) = (&v49)[v26];
    v26 += 3;
  }
  while (v26 != 6);
  v36 = v25 + 6;
  mlcore::PropertiesQuery::setSortDescriptors(v21, (char *)&v35);
  v45 = (void ***)&v35;
  std::vector<mlcore::SortDescriptor>::__destroy_vector::operator()[abi:ne180100]((void ***)&v45);
  v29 = v42;
  if (v42)
  {
    p_shared_owners = &v42->__shared_owners_;
    do
      v31 = __ldaxr((unint64_t *)p_shared_owners);
    while (__stlxr(v31 - 1, (unint64_t *)p_shared_owners));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  v32 = v44;
  if (v44)
  {
    v33 = (unint64_t *)&v44->__shared_owners_;
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }
}

void sub_20A6867C4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t i;
  void **v5;
  va_list va;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v5 = va_arg(va1, void **);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  for (i = 16; i != -16; i -= 16)
    std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100](v2 - 88 + i);
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t mlcore::ComposerPropertyOrder(mlcore *this)
{
  mlcore *v1;
  uint64_t v2;
  uint64_t v4[2];

  v1 = (mlcore *)mlcore::ComposerPropertyRepresentativeItemPersistentID(this);
  v2 = mlcore::ItemPropertyComposerOrder(v1);
  v4[0] = 0;
  v4[1] = 0;
  return mlcore::GetForeignProperty<long long>((uint64_t)v1, v2, v4);
}

void sub_20A686888(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t mlcore::ItemPropertyComposerOrder(mlcore *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&mlcore::ItemPropertyComposerOrder(void)::once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&mlcore::ItemPropertyComposerOrder(void)::once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyComposerOrder(void)::$_0 &&>>);
  }
  return mlcore::ItemPropertyComposerOrder(void)::property;
}

uint64_t mlcore::ComposerPropertyRepresentativeItemPersistentID(mlcore *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&mlcore::ComposerPropertyRepresentativeItemPersistentID(void)::once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&mlcore::ComposerPropertyRepresentativeItemPersistentID(void)::once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ComposerPropertyRepresentativeItemPersistentID(void)::$_0 &&>>);
  }
  return mlcore::ComposerPropertyRepresentativeItemPersistentID(void)::property;
}

uint64_t mlcore::TypedEntityClass<mlcore::Composer>::sharedPointer()
{
  unint64_t v0;
  char v2;
  char **v3;
  char *v4;

  v0 = atomic_load(&mlcore::TypedEntityClass<mlcore::Composer>::sharedPointer(void)::__once);
  if (v0 != -1)
  {
    v4 = &v2;
    v3 = &v4;
    std::__call_once(&mlcore::TypedEntityClass<mlcore::Composer>::sharedPointer(void)::__once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::TypedEntityClass<mlcore::Composer>::sharedPointer(void)::{lambda(void)#1} &&>>);
  }
  return mlcore::TypedEntityClass<mlcore::Composer>::sharedPointer(void)::__sharedPointer;
}

uint64_t mlcore::ComposerPropertyPersistentID(mlcore *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&mlcore::ComposerPropertyPersistentID(void)::once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&mlcore::ComposerPropertyPersistentID(void)::once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ComposerPropertyPersistentID(void)::$_0 &&>>);
  }
  return mlcore::ComposerPropertyPersistentID(void)::property;
}

uint64_t mlcore::ItemPropertyDateAdded(mlcore *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&mlcore::ItemPropertyDateAdded(void)::once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&mlcore::ItemPropertyDateAdded(void)::once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyDateAdded(void)::$_0 &&>>);
  }
  return mlcore::ItemPropertyDateAdded(void)::property;
}

uint64_t mlcore::ItemPropertyComposerPersistentID(mlcore *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&mlcore::ItemPropertyComposerPersistentID(void)::once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&mlcore::ItemPropertyComposerPersistentID(void)::once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyComposerPersistentID(void)::$_0 &&>>);
  }
  return mlcore::ItemPropertyComposerPersistentID(void)::property;
}

uint64_t mlcore::AlbumPropertyDateReleased(mlcore *this)
{
  mlcore *v1;
  uint64_t v2;
  uint64_t v4[2];

  v1 = (mlcore *)mlcore::AlbumPropertyRepresentativeItemPersistentID(this);
  v2 = mlcore::ItemPropertyDateReleased(v1);
  v4[0] = 0;
  v4[1] = 0;
  return mlcore::GetForeignProperty<long long>((uint64_t)v1, v2, v4);
}

void sub_20A686B04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t mlcore::ItemPropertyDateReleased(mlcore *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&mlcore::ItemPropertyDateReleased(void)::once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&mlcore::ItemPropertyDateReleased(void)::once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyDateReleased(void)::$_0 &&>>);
  }
  return mlcore::ItemPropertyDateReleased(void)::property;
}

uint64_t mlcore::AlbumPropertyCopyright(mlcore *this)
{
  mlcore *v1;
  uint64_t v2;
  uint64_t v4[2];

  v1 = (mlcore *)mlcore::AlbumPropertyRepresentativeItemPersistentID(this);
  v2 = mlcore::ItemPropertyCopyright(v1);
  v4[0] = 0;
  v4[1] = 0;
  return mlcore::GetForeignProperty<std::string>((uint64_t)v1, v2, v4);
}

void sub_20A686BB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t mlcore::ItemPropertyCopyright(mlcore *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&mlcore::ItemPropertyCopyright(void)::once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&mlcore::ItemPropertyCopyright(void)::once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyCopyright(void)::$_0 &&>>);
  }
  return mlcore::ItemPropertyCopyright(void)::property;
}

uint64_t mlcore::AlbumPropertyArtistPersistentID(mlcore *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&mlcore::AlbumPropertyArtistPersistentID(void)::once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&mlcore::AlbumPropertyArtistPersistentID(void)::once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::AlbumPropertyArtistPersistentID(void)::$_0 &&>>);
  }
  return mlcore::AlbumPropertyArtistPersistentID(void)::property;
}

uint64_t mlcore::ItemPropertyAlbumArtistPersistentID(mlcore *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&mlcore::ItemPropertyAlbumArtistPersistentID(void)::once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&mlcore::ItemPropertyAlbumArtistPersistentID(void)::once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyAlbumArtistPersistentID(void)::$_0 &&>>);
  }
  return mlcore::ItemPropertyAlbumArtistPersistentID(void)::property;
}

uint64_t mlcore::ItemPropertyIsPreorder(mlcore *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&mlcore::ItemPropertyIsPreorder(void)::once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&mlcore::ItemPropertyIsPreorder(void)::once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyIsPreorder(void)::$_0 &&>>);
  }
  return mlcore::ItemPropertyIsPreorder(void)::property;
}

uint64_t mlcore::PlaylistPropertyAvailableArtworkToken(mlcore *this)
{
  mlcore *v1;
  mlcore *v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  char *v6;
  __int128 *v7;
  char v8;
  uint64_t v9;
  char v10;
  __int128 v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  uint64_t i;
  __int128 v20;
  __int128 v21;
  __int128 *v22;
  __int128 v23;
  uint64_t v24;
  std::__shared_weak_count *v25;
  __int128 **v26;
  char v27;
  _OWORD v28[2];
  uint64_t v29;

  v29 = *MEMORY[0x24BDAC8D0];
  v1 = (mlcore *)mlcore::PlaylistPropertyPersistentID(this);
  v2 = (mlcore *)mlcore::BestArtworkTokenPropertyAvailableArtworkToken(v1);
  v3 = mlcore::BestArtworkTokenPropertyEntityType(v2);
  v4 = (char *)operator new(0x48uLL);
  *(_OWORD *)(v4 + 8) = 0u;
  *(_QWORD *)v4 = &off_24C33CE50;
  *((_QWORD *)v4 + 4) = v3;
  *((_QWORD *)v4 + 5) = 0;
  *((_DWORD *)v4 + 12) = 1;
  *(_OWORD *)(v4 + 56) = 0u;
  *((_QWORD *)&v21 + 1) = v4;
  *((_QWORD *)v4 + 3) = &unk_24C339C50;
  *(_QWORD *)&v21 = v4 + 24;
  v28[0] = v21;
  v5 = mlcore::BestArtworkTokenPropertyArtworkType((mlcore *)(v4 + 24));
  v6 = (char *)operator new(0x48uLL);
  *(_OWORD *)(v6 + 8) = 0u;
  *(_QWORD *)v6 = &off_24C33CE50;
  *((_QWORD *)v6 + 4) = v5;
  *((_QWORD *)v6 + 5) = 0;
  *((_QWORD *)v6 + 3) = &unk_24C339C50;
  *((_DWORD *)v6 + 12) = 5;
  *(_OWORD *)(v6 + 56) = 0u;
  *(_QWORD *)&v20 = v6 + 24;
  *((_QWORD *)&v20 + 1) = v6;
  v28[1] = v20;
  v22 = 0;
  v23 = 0u;
  v26 = &v22;
  v27 = 0;
  v7 = (__int128 *)operator new(0x20uLL);
  v8 = 0;
  v9 = 0;
  v22 = v7;
  *(_QWORD *)&v23 = v7;
  *((_QWORD *)&v23 + 1) = v7 + 2;
  do
  {
    v10 = v8;
    v11 = v28[v9];
    *v7 = v11;
    if (*((_QWORD *)&v11 + 1))
    {
      v12 = (unint64_t *)(*((_QWORD *)&v11 + 1) + 8);
      do
        v13 = __ldxr(v12);
      while (__stxr(v13 + 1, v12));
    }
    ++v7;
    v8 = 1;
    v9 = 1;
  }
  while ((v10 & 1) == 0);
  *(_QWORD *)&v23 = v7;
  mlcore::CreateAndPredicate(&v22, &v24);
  v14 = mlcore::GetForeignProperty<std::string>((uint64_t)v1, (uint64_t)v2, &v24);
  v15 = v25;
  if (v25)
  {
    p_shared_owners = (unint64_t *)&v25->__shared_owners_;
    do
      v17 = __ldaxr(p_shared_owners);
    while (__stlxr(v17 - 1, p_shared_owners));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  v26 = &v22;
  std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v26);
  for (i = 1; i != -1; --i)
    std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)&v28[i]);
  return v14;
}

void sub_20A686FAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, void **a19, uint64_t a20,char a21)
{
  uint64_t i;

  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  a19 = (void **)&a14;
  std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__destroy_vector::operator()[abi:ne180100](&a19);
  for (i = 16; i != -16; i -= 16)
    std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)(&a21 + i));
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

uint64_t mlcore::TVEpisodePropertyFetchableScreenshotSourceType(mlcore *this)
{
  mlcore *v1;
  mlcore *v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  char *v6;
  __int128 *v7;
  char v8;
  uint64_t v9;
  char v10;
  __int128 v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t Foreign;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  uint64_t i;
  __int128 v20;
  __int128 v21;
  __int128 *v22;
  __int128 v23;
  uint64_t v24;
  std::__shared_weak_count *v25;
  __int128 **v26;
  char v27;
  _OWORD v28[2];
  uint64_t v29;

  v29 = *MEMORY[0x24BDAC8D0];
  v1 = (mlcore *)mlcore::ItemPropertyPersistentID(this);
  v2 = (mlcore *)mlcore::BestArtworkTokenPropertyFetchableArtworkSourceType(v1);
  v3 = mlcore::BestArtworkTokenPropertyEntityType(v2);
  v4 = (char *)operator new(0x48uLL);
  *(_OWORD *)(v4 + 8) = 0u;
  *(_QWORD *)v4 = &off_24C33CE50;
  *((_QWORD *)v4 + 4) = v3;
  *((_QWORD *)v4 + 5) = 0;
  *((_DWORD *)v4 + 12) = 0;
  *(_OWORD *)(v4 + 56) = 0u;
  *((_QWORD *)&v21 + 1) = v4;
  *((_QWORD *)v4 + 3) = &unk_24C339C50;
  *(_QWORD *)&v21 = v4 + 24;
  v28[0] = v21;
  v5 = mlcore::BestArtworkTokenPropertyArtworkType((mlcore *)(v4 + 24));
  v6 = (char *)operator new(0x48uLL);
  *(_OWORD *)(v6 + 8) = 0u;
  *(_QWORD *)v6 = &off_24C33CE50;
  *((_QWORD *)v6 + 4) = v5;
  *((_QWORD *)v6 + 5) = 0;
  *((_QWORD *)v6 + 3) = &unk_24C339C50;
  *((_DWORD *)v6 + 12) = 2;
  *(_OWORD *)(v6 + 56) = 0u;
  *(_QWORD *)&v20 = v6 + 24;
  *((_QWORD *)&v20 + 1) = v6;
  v28[1] = v20;
  v22 = 0;
  v23 = 0u;
  v26 = &v22;
  v27 = 0;
  v7 = (__int128 *)operator new(0x20uLL);
  v8 = 0;
  v9 = 0;
  v22 = v7;
  *(_QWORD *)&v23 = v7;
  *((_QWORD *)&v23 + 1) = v7 + 2;
  do
  {
    v10 = v8;
    v11 = v28[v9];
    *v7 = v11;
    if (*((_QWORD *)&v11 + 1))
    {
      v12 = (unint64_t *)(*((_QWORD *)&v11 + 1) + 8);
      do
        v13 = __ldxr(v12);
      while (__stxr(v13 + 1, v12));
    }
    ++v7;
    v8 = 1;
    v9 = 1;
  }
  while ((v10 & 1) == 0);
  *(_QWORD *)&v23 = v7;
  mlcore::CreateAndPredicate(&v22, &v24);
  Foreign = mlcore::GetForeignProperty<int>((uint64_t)v1, (uint64_t)v2, &v24);
  v15 = v25;
  if (v25)
  {
    p_shared_owners = (unint64_t *)&v25->__shared_owners_;
    do
      v17 = __ldaxr(p_shared_owners);
    while (__stlxr(v17 - 1, p_shared_owners));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  v26 = &v22;
  std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v26);
  for (i = 1; i != -1; --i)
    std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)&v28[i]);
  return Foreign;
}

void sub_20A68729C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, void **a19, uint64_t a20,char a21)
{
  uint64_t i;

  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  a19 = (void **)&a14;
  std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__destroy_vector::operator()[abi:ne180100](&a19);
  for (i = 16; i != -16; i -= 16)
    std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)(&a21 + i));
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

uint64_t mlcore::ItemArtistPropertyFetchableArtworkSourceType(mlcore *this)
{
  mlcore *v1;
  mlcore *v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  char *v6;
  __int128 *v7;
  char v8;
  uint64_t v9;
  char v10;
  __int128 v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t Foreign;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  uint64_t i;
  __int128 v20;
  __int128 v21;
  __int128 *v22;
  __int128 v23;
  uint64_t v24;
  std::__shared_weak_count *v25;
  __int128 **v26;
  char v27;
  _OWORD v28[2];
  uint64_t v29;

  v29 = *MEMORY[0x24BDAC8D0];
  v1 = (mlcore *)mlcore::ItemArtistPropertyPersistentID(this);
  v2 = (mlcore *)mlcore::BestArtworkTokenPropertyFetchableArtworkSourceType(v1);
  v3 = mlcore::BestArtworkTokenPropertyEntityType(v2);
  v4 = (char *)operator new(0x48uLL);
  *(_OWORD *)(v4 + 8) = 0u;
  *(_QWORD *)v4 = &off_24C33CE50;
  *((_QWORD *)v4 + 4) = v3;
  *((_QWORD *)v4 + 5) = 0;
  *((_DWORD *)v4 + 12) = 2;
  *(_OWORD *)(v4 + 56) = 0u;
  *((_QWORD *)&v21 + 1) = v4;
  *((_QWORD *)v4 + 3) = &unk_24C339C50;
  *(_QWORD *)&v21 = v4 + 24;
  v28[0] = v21;
  v5 = mlcore::BestArtworkTokenPropertyArtworkType((mlcore *)(v4 + 24));
  v6 = (char *)operator new(0x48uLL);
  *(_OWORD *)(v6 + 8) = 0u;
  *(_QWORD *)v6 = &off_24C33CE50;
  *((_QWORD *)v6 + 4) = v5;
  *((_QWORD *)v6 + 5) = 0;
  *((_QWORD *)v6 + 3) = &unk_24C339C50;
  *((_DWORD *)v6 + 12) = 4;
  *(_OWORD *)(v6 + 56) = 0u;
  *(_QWORD *)&v20 = v6 + 24;
  *((_QWORD *)&v20 + 1) = v6;
  v28[1] = v20;
  v22 = 0;
  v23 = 0u;
  v26 = &v22;
  v27 = 0;
  v7 = (__int128 *)operator new(0x20uLL);
  v8 = 0;
  v9 = 0;
  v22 = v7;
  *(_QWORD *)&v23 = v7;
  *((_QWORD *)&v23 + 1) = v7 + 2;
  do
  {
    v10 = v8;
    v11 = v28[v9];
    *v7 = v11;
    if (*((_QWORD *)&v11 + 1))
    {
      v12 = (unint64_t *)(*((_QWORD *)&v11 + 1) + 8);
      do
        v13 = __ldxr(v12);
      while (__stxr(v13 + 1, v12));
    }
    ++v7;
    v8 = 1;
    v9 = 1;
  }
  while ((v10 & 1) == 0);
  *(_QWORD *)&v23 = v7;
  mlcore::CreateAndPredicate(&v22, &v24);
  Foreign = mlcore::GetForeignProperty<int>((uint64_t)v1, (uint64_t)v2, &v24);
  v15 = v25;
  if (v25)
  {
    p_shared_owners = (unint64_t *)&v25->__shared_owners_;
    do
      v17 = __ldaxr(p_shared_owners);
    while (__stlxr(v17 - 1, p_shared_owners));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  v26 = &v22;
  std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v26);
  for (i = 1; i != -1; --i)
    std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)&v28[i]);
  return Foreign;
}

void sub_20A68758C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, void **a19, uint64_t a20,char a21)
{
  uint64_t i;

  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  a19 = (void **)&a14;
  std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__destroy_vector::operator()[abi:ne180100](&a19);
  for (i = 16; i != -16; i -= 16)
    std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)(&a21 + i));
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

uint64_t mlcore::PlaylistPropertyFetchableArtworkSourceType(mlcore *this)
{
  mlcore *v1;
  mlcore *v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  char *v6;
  __int128 *v7;
  char v8;
  uint64_t v9;
  char v10;
  __int128 v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t Foreign;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  uint64_t i;
  __int128 v20;
  __int128 v21;
  __int128 *v22;
  __int128 v23;
  uint64_t v24;
  std::__shared_weak_count *v25;
  __int128 **v26;
  char v27;
  _OWORD v28[2];
  uint64_t v29;

  v29 = *MEMORY[0x24BDAC8D0];
  v1 = (mlcore *)mlcore::PlaylistPropertyPersistentID(this);
  v2 = (mlcore *)mlcore::BestArtworkTokenPropertyFetchableArtworkSourceType(v1);
  v3 = mlcore::BestArtworkTokenPropertyEntityType(v2);
  v4 = (char *)operator new(0x48uLL);
  *(_OWORD *)(v4 + 8) = 0u;
  *(_QWORD *)v4 = &off_24C33CE50;
  *((_QWORD *)v4 + 4) = v3;
  *((_QWORD *)v4 + 5) = 0;
  *((_DWORD *)v4 + 12) = 1;
  *(_OWORD *)(v4 + 56) = 0u;
  *((_QWORD *)&v21 + 1) = v4;
  *((_QWORD *)v4 + 3) = &unk_24C339C50;
  *(_QWORD *)&v21 = v4 + 24;
  v28[0] = v21;
  v5 = mlcore::BestArtworkTokenPropertyArtworkType((mlcore *)(v4 + 24));
  v6 = (char *)operator new(0x48uLL);
  *(_OWORD *)(v6 + 8) = 0u;
  *(_QWORD *)v6 = &off_24C33CE50;
  *((_QWORD *)v6 + 4) = v5;
  *((_QWORD *)v6 + 5) = 0;
  *((_QWORD *)v6 + 3) = &unk_24C339C50;
  *((_DWORD *)v6 + 12) = 5;
  *(_OWORD *)(v6 + 56) = 0u;
  *(_QWORD *)&v20 = v6 + 24;
  *((_QWORD *)&v20 + 1) = v6;
  v28[1] = v20;
  v22 = 0;
  v23 = 0u;
  v26 = &v22;
  v27 = 0;
  v7 = (__int128 *)operator new(0x20uLL);
  v8 = 0;
  v9 = 0;
  v22 = v7;
  *(_QWORD *)&v23 = v7;
  *((_QWORD *)&v23 + 1) = v7 + 2;
  do
  {
    v10 = v8;
    v11 = v28[v9];
    *v7 = v11;
    if (*((_QWORD *)&v11 + 1))
    {
      v12 = (unint64_t *)(*((_QWORD *)&v11 + 1) + 8);
      do
        v13 = __ldxr(v12);
      while (__stxr(v13 + 1, v12));
    }
    ++v7;
    v8 = 1;
    v9 = 1;
  }
  while ((v10 & 1) == 0);
  *(_QWORD *)&v23 = v7;
  mlcore::CreateAndPredicate(&v22, &v24);
  Foreign = mlcore::GetForeignProperty<int>((uint64_t)v1, (uint64_t)v2, &v24);
  v15 = v25;
  if (v25)
  {
    p_shared_owners = (unint64_t *)&v25->__shared_owners_;
    do
      v17 = __ldaxr(p_shared_owners);
    while (__stlxr(v17 - 1, p_shared_owners));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  v26 = &v22;
  std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v26);
  for (i = 1; i != -1; --i)
    std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)&v28[i]);
  return Foreign;
}

void sub_20A68787C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, void **a19, uint64_t a20,char a21)
{
  uint64_t i;

  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  a19 = (void **)&a14;
  std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__destroy_vector::operator()[abi:ne180100](&a19);
  for (i = 16; i != -16; i -= 16)
    std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)(&a21 + i));
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

uint64_t mlcore::PlaylistPropertyFetchableArtworkToken(mlcore *this)
{
  mlcore *v1;
  mlcore *v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  char *v6;
  __int128 *v7;
  char v8;
  uint64_t v9;
  char v10;
  __int128 v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  uint64_t i;
  __int128 v20;
  __int128 v21;
  __int128 *v22;
  __int128 v23;
  uint64_t v24;
  std::__shared_weak_count *v25;
  __int128 **v26;
  char v27;
  _OWORD v28[2];
  uint64_t v29;

  v29 = *MEMORY[0x24BDAC8D0];
  v1 = (mlcore *)mlcore::PlaylistPropertyPersistentID(this);
  v2 = (mlcore *)mlcore::BestArtworkTokenPropertyFetchableArtworkToken(v1);
  v3 = mlcore::BestArtworkTokenPropertyEntityType(v2);
  v4 = (char *)operator new(0x48uLL);
  *(_OWORD *)(v4 + 8) = 0u;
  *(_QWORD *)v4 = &off_24C33CE50;
  *((_QWORD *)v4 + 4) = v3;
  *((_QWORD *)v4 + 5) = 0;
  *((_DWORD *)v4 + 12) = 1;
  *(_OWORD *)(v4 + 56) = 0u;
  *((_QWORD *)&v21 + 1) = v4;
  *((_QWORD *)v4 + 3) = &unk_24C339C50;
  *(_QWORD *)&v21 = v4 + 24;
  v28[0] = v21;
  v5 = mlcore::BestArtworkTokenPropertyArtworkType((mlcore *)(v4 + 24));
  v6 = (char *)operator new(0x48uLL);
  *(_OWORD *)(v6 + 8) = 0u;
  *(_QWORD *)v6 = &off_24C33CE50;
  *((_QWORD *)v6 + 4) = v5;
  *((_QWORD *)v6 + 5) = 0;
  *((_QWORD *)v6 + 3) = &unk_24C339C50;
  *((_DWORD *)v6 + 12) = 5;
  *(_OWORD *)(v6 + 56) = 0u;
  *(_QWORD *)&v20 = v6 + 24;
  *((_QWORD *)&v20 + 1) = v6;
  v28[1] = v20;
  v22 = 0;
  v23 = 0u;
  v26 = &v22;
  v27 = 0;
  v7 = (__int128 *)operator new(0x20uLL);
  v8 = 0;
  v9 = 0;
  v22 = v7;
  *(_QWORD *)&v23 = v7;
  *((_QWORD *)&v23 + 1) = v7 + 2;
  do
  {
    v10 = v8;
    v11 = v28[v9];
    *v7 = v11;
    if (*((_QWORD *)&v11 + 1))
    {
      v12 = (unint64_t *)(*((_QWORD *)&v11 + 1) + 8);
      do
        v13 = __ldxr(v12);
      while (__stxr(v13 + 1, v12));
    }
    ++v7;
    v8 = 1;
    v9 = 1;
  }
  while ((v10 & 1) == 0);
  *(_QWORD *)&v23 = v7;
  mlcore::CreateAndPredicate(&v22, &v24);
  v14 = mlcore::GetForeignProperty<std::string>((uint64_t)v1, (uint64_t)v2, &v24);
  v15 = v25;
  if (v25)
  {
    p_shared_owners = (unint64_t *)&v25->__shared_owners_;
    do
      v17 = __ldaxr(p_shared_owners);
    while (__stlxr(v17 - 1, p_shared_owners));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  v26 = &v22;
  std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v26);
  for (i = 1; i != -1; --i)
    std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)&v28[i]);
  return v14;
}

void sub_20A687B6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, void **a19, uint64_t a20,char a21)
{
  uint64_t i;

  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  a19 = (void **)&a14;
  std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__destroy_vector::operator()[abi:ne180100](&a19);
  for (i = 16; i != -16; i -= 16)
    std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)(&a21 + i));
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

uint64_t mlcore::AlbumPropertyRepresentativeItemMediaType(mlcore *this)
{
  mlcore *v1;
  uint64_t v2;
  uint64_t v4[2];

  v1 = (mlcore *)mlcore::AlbumPropertyRepresentativeItemPersistentID(this);
  v2 = mlcore::ItemPropertyMediaType(v1);
  v4[0] = 0;
  v4[1] = 0;
  return mlcore::GetForeignProperty<int>((uint64_t)v1, v2, v4);
}

void sub_20A687C28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t mlcore::PlaylistItemPropertyAvailableArtworkToken(mlcore *this)
{
  mlcore *v1;
  mlcore *v2;
  mlcore *v3;
  uint64_t v4;
  char *v5;
  mlcore *v6;
  uint64_t v7;
  char *v8;
  __int128 *v9;
  char v10;
  uint64_t v11;
  char v12;
  __int128 v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  uint64_t i;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  uint64_t v29[2];
  __int128 v30;
  __int128 v31;
  __int128 *v32;
  __int128 v33;
  uint64_t v34;
  std::__shared_weak_count *v35;
  __int128 **v36;
  char v37;
  _OWORD v38[2];
  uint64_t v39;

  v39 = *MEMORY[0x24BDAC8D0];
  v1 = (mlcore *)mlcore::PlaylistItemPropertyItemPersistentID(this);
  v2 = (mlcore *)mlcore::ItemPropertyPersistentID(v1);
  v3 = (mlcore *)mlcore::BestArtworkTokenPropertyAvailableArtworkToken(v2);
  v4 = mlcore::BestArtworkTokenPropertyEntityType(v3);
  v5 = (char *)operator new(0x48uLL);
  *(_OWORD *)(v5 + 8) = 0u;
  *(_QWORD *)v5 = &off_24C33CE50;
  *((_QWORD *)v5 + 4) = v4;
  *((_QWORD *)v5 + 5) = 0;
  *((_DWORD *)v5 + 12) = 0;
  *(_OWORD *)(v5 + 56) = 0u;
  *((_QWORD *)&v31 + 1) = v5;
  *((_QWORD *)v5 + 3) = &unk_24C339C50;
  v5 += 24;
  *(_QWORD *)&v31 = v5;
  v38[0] = v31;
  v31 = 0u;
  v6 = (mlcore *)mlcore::BestArtworkTokenPropertyArtworkType((mlcore *)v5);
  v7 = mlcore::ItemPropertyEffectiveArtworkType(v6);
  v8 = (char *)operator new(0x38uLL);
  *(_OWORD *)(v8 + 8) = 0u;
  *(_QWORD *)v8 = &off_24C33D240;
  *((_QWORD *)v8 + 4) = v6;
  *((_QWORD *)v8 + 5) = 0;
  *((_QWORD *)v8 + 3) = &off_24C33A5A8;
  *((_QWORD *)v8 + 6) = v7;
  *(_QWORD *)&v30 = v8 + 24;
  *((_QWORD *)&v30 + 1) = v8;
  v38[1] = v30;
  v30 = 0u;
  v32 = 0;
  v33 = 0u;
  v36 = &v32;
  v37 = 0;
  v9 = (__int128 *)operator new(0x20uLL);
  v10 = 0;
  v11 = 0;
  v32 = v9;
  *(_QWORD *)&v33 = v9;
  *((_QWORD *)&v33 + 1) = v9 + 2;
  do
  {
    v12 = v10;
    v13 = v38[v11];
    *v9 = v13;
    if (*((_QWORD *)&v13 + 1))
    {
      v14 = (unint64_t *)(*((_QWORD *)&v13 + 1) + 8);
      do
        v15 = __ldxr(v14);
      while (__stxr(v15 + 1, v14));
    }
    ++v9;
    v10 = 1;
    v11 = 1;
  }
  while ((v12 & 1) == 0);
  *(_QWORD *)&v33 = v9;
  mlcore::CreateAndPredicate(&v32, &v34);
  v16 = mlcore::GetForeignProperty<std::string>((uint64_t)v2, (uint64_t)v3, &v34);
  v29[0] = 0;
  v29[1] = 0;
  v17 = mlcore::GetForeignProperty<std::string>((uint64_t)v1, v16, v29);
  v18 = v35;
  if (v35)
  {
    p_shared_owners = (unint64_t *)&v35->__shared_owners_;
    do
      v20 = __ldaxr(p_shared_owners);
    while (__stlxr(v20 - 1, p_shared_owners));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  v36 = &v32;
  std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v36);
  for (i = 1; i != -1; --i)
    std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)&v38[i]);
  v22 = (std::__shared_weak_count *)*((_QWORD *)&v30 + 1);
  if (*((_QWORD *)&v30 + 1))
  {
    v23 = (unint64_t *)(*((_QWORD *)&v30 + 1) + 8);
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  v25 = (std::__shared_weak_count *)*((_QWORD *)&v31 + 1);
  if (*((_QWORD *)&v31 + 1))
  {
    v26 = (unint64_t *)(*((_QWORD *)&v31 + 1) + 8);
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  return v17;
}

void sub_20A687ED8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,void **a21)
{
  uint64_t v21;
  uint64_t i;

  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)&a19);
  a21 = (void **)&a16;
  std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__destroy_vector::operator()[abi:ne180100](&a21);
  for (i = 16; i != -16; i -= 16)
    std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100](v21 - 96 + i);
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  _Unwind_Resume(a1);
}

uint64_t mlcore::TVEpisodePropertyAvailableScreenshotToken(mlcore *this)
{
  mlcore *v1;
  mlcore *v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  char *v6;
  __int128 *v7;
  char v8;
  uint64_t v9;
  char v10;
  __int128 v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  uint64_t i;
  __int128 v20;
  __int128 v21;
  __int128 *v22;
  __int128 v23;
  uint64_t v24;
  std::__shared_weak_count *v25;
  __int128 **v26;
  char v27;
  _OWORD v28[2];
  uint64_t v29;

  v29 = *MEMORY[0x24BDAC8D0];
  v1 = (mlcore *)mlcore::TVEpisodePropertyPersistentID(this);
  v2 = (mlcore *)mlcore::BestArtworkTokenPropertyAvailableArtworkToken(v1);
  v3 = mlcore::BestArtworkTokenPropertyEntityType(v2);
  v4 = (char *)operator new(0x48uLL);
  *(_OWORD *)(v4 + 8) = 0u;
  *(_QWORD *)v4 = &off_24C33CE50;
  *((_QWORD *)v4 + 4) = v3;
  *((_QWORD *)v4 + 5) = 0;
  *((_DWORD *)v4 + 12) = 0;
  *(_OWORD *)(v4 + 56) = 0u;
  *((_QWORD *)&v21 + 1) = v4;
  *((_QWORD *)v4 + 3) = &unk_24C339C50;
  *(_QWORD *)&v21 = v4 + 24;
  v28[0] = v21;
  v5 = mlcore::BestArtworkTokenPropertyArtworkType((mlcore *)(v4 + 24));
  v6 = (char *)operator new(0x48uLL);
  *(_OWORD *)(v6 + 8) = 0u;
  *(_QWORD *)v6 = &off_24C33CE50;
  *((_QWORD *)v6 + 4) = v5;
  *((_QWORD *)v6 + 5) = 0;
  *((_QWORD *)v6 + 3) = &unk_24C339C50;
  *((_DWORD *)v6 + 12) = 2;
  *(_OWORD *)(v6 + 56) = 0u;
  *(_QWORD *)&v20 = v6 + 24;
  *((_QWORD *)&v20 + 1) = v6;
  v28[1] = v20;
  v22 = 0;
  v23 = 0u;
  v26 = &v22;
  v27 = 0;
  v7 = (__int128 *)operator new(0x20uLL);
  v8 = 0;
  v9 = 0;
  v22 = v7;
  *(_QWORD *)&v23 = v7;
  *((_QWORD *)&v23 + 1) = v7 + 2;
  do
  {
    v10 = v8;
    v11 = v28[v9];
    *v7 = v11;
    if (*((_QWORD *)&v11 + 1))
    {
      v12 = (unint64_t *)(*((_QWORD *)&v11 + 1) + 8);
      do
        v13 = __ldxr(v12);
      while (__stxr(v13 + 1, v12));
    }
    ++v7;
    v8 = 1;
    v9 = 1;
  }
  while ((v10 & 1) == 0);
  *(_QWORD *)&v23 = v7;
  mlcore::CreateAndPredicate(&v22, &v24);
  v14 = mlcore::GetForeignProperty<std::string>((uint64_t)v1, (uint64_t)v2, &v24);
  v15 = v25;
  if (v25)
  {
    p_shared_owners = (unint64_t *)&v25->__shared_owners_;
    do
      v17 = __ldaxr(p_shared_owners);
    while (__stlxr(v17 - 1, p_shared_owners));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  v26 = &v22;
  std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v26);
  for (i = 1; i != -1; --i)
    std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)&v28[i]);
  return v14;
}

void sub_20A6881D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, void **a19, uint64_t a20,char a21)
{
  uint64_t i;

  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  a19 = (void **)&a14;
  std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__destroy_vector::operator()[abi:ne180100](&a19);
  for (i = 16; i != -16; i -= 16)
    std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)(&a21 + i));
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

uint64_t mlcore::TVEpisodePropertyFetchableScreenshotToken(mlcore *this)
{
  mlcore *v1;
  mlcore *v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  char *v6;
  __int128 *v7;
  char v8;
  uint64_t v9;
  char v10;
  __int128 v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  uint64_t i;
  __int128 v20;
  __int128 v21;
  __int128 *v22;
  __int128 v23;
  uint64_t v24;
  std::__shared_weak_count *v25;
  __int128 **v26;
  char v27;
  _OWORD v28[2];
  uint64_t v29;

  v29 = *MEMORY[0x24BDAC8D0];
  v1 = (mlcore *)mlcore::TVEpisodePropertyPersistentID(this);
  v2 = (mlcore *)mlcore::BestArtworkTokenPropertyFetchableArtworkToken(v1);
  v3 = mlcore::BestArtworkTokenPropertyEntityType(v2);
  v4 = (char *)operator new(0x48uLL);
  *(_OWORD *)(v4 + 8) = 0u;
  *(_QWORD *)v4 = &off_24C33CE50;
  *((_QWORD *)v4 + 4) = v3;
  *((_QWORD *)v4 + 5) = 0;
  *((_DWORD *)v4 + 12) = 0;
  *(_OWORD *)(v4 + 56) = 0u;
  *((_QWORD *)&v21 + 1) = v4;
  *((_QWORD *)v4 + 3) = &unk_24C339C50;
  *(_QWORD *)&v21 = v4 + 24;
  v28[0] = v21;
  v5 = mlcore::BestArtworkTokenPropertyArtworkType((mlcore *)(v4 + 24));
  v6 = (char *)operator new(0x48uLL);
  *(_OWORD *)(v6 + 8) = 0u;
  *(_QWORD *)v6 = &off_24C33CE50;
  *((_QWORD *)v6 + 4) = v5;
  *((_QWORD *)v6 + 5) = 0;
  *((_QWORD *)v6 + 3) = &unk_24C339C50;
  *((_DWORD *)v6 + 12) = 2;
  *(_OWORD *)(v6 + 56) = 0u;
  *(_QWORD *)&v20 = v6 + 24;
  *((_QWORD *)&v20 + 1) = v6;
  v28[1] = v20;
  v22 = 0;
  v23 = 0u;
  v26 = &v22;
  v27 = 0;
  v7 = (__int128 *)operator new(0x20uLL);
  v8 = 0;
  v9 = 0;
  v22 = v7;
  *(_QWORD *)&v23 = v7;
  *((_QWORD *)&v23 + 1) = v7 + 2;
  do
  {
    v10 = v8;
    v11 = v28[v9];
    *v7 = v11;
    if (*((_QWORD *)&v11 + 1))
    {
      v12 = (unint64_t *)(*((_QWORD *)&v11 + 1) + 8);
      do
        v13 = __ldxr(v12);
      while (__stxr(v13 + 1, v12));
    }
    ++v7;
    v8 = 1;
    v9 = 1;
  }
  while ((v10 & 1) == 0);
  *(_QWORD *)&v23 = v7;
  mlcore::CreateAndPredicate(&v22, &v24);
  v14 = mlcore::GetForeignProperty<std::string>((uint64_t)v1, (uint64_t)v2, &v24);
  v15 = v25;
  if (v25)
  {
    p_shared_owners = (unint64_t *)&v25->__shared_owners_;
    do
      v17 = __ldaxr(p_shared_owners);
    while (__stlxr(v17 - 1, p_shared_owners));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  v26 = &v22;
  std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v26);
  for (i = 1; i != -1; --i)
    std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)&v28[i]);
  return v14;
}

void sub_20A6884C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, void **a19, uint64_t a20,char a21)
{
  uint64_t i;

  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  a19 = (void **)&a14;
  std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__destroy_vector::operator()[abi:ne180100](&a19);
  for (i = 16; i != -16; i -= 16)
    std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)(&a21 + i));
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

uint64_t mlcore::TVEpisodePropertyPersistentID(mlcore *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&mlcore::TVEpisodePropertyPersistentID(void)::once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&mlcore::TVEpisodePropertyPersistentID(void)::once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::TVEpisodePropertyPersistentID(void)::$_0 &&>>);
  }
  return mlcore::TVEpisodePropertyPersistentID(void)::property;
}

uint64_t mlcore::PlaylistItemPropertyFetchableArtworkSourceType(mlcore *this)
{
  mlcore *v1;
  mlcore *v2;
  mlcore *v3;
  uint64_t v4;
  char *v5;
  mlcore *v6;
  uint64_t v7;
  char *v8;
  __int128 *v9;
  char v10;
  uint64_t v11;
  char v12;
  __int128 v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t Foreign;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  uint64_t i;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  uint64_t v29[2];
  __int128 v30;
  __int128 v31;
  __int128 *v32;
  __int128 v33;
  uint64_t v34;
  std::__shared_weak_count *v35;
  __int128 **v36;
  char v37;
  _OWORD v38[2];
  uint64_t v39;

  v39 = *MEMORY[0x24BDAC8D0];
  v1 = (mlcore *)mlcore::PlaylistItemPropertyItemPersistentID(this);
  v2 = (mlcore *)mlcore::ItemPropertyPersistentID(v1);
  v3 = (mlcore *)mlcore::BestArtworkTokenPropertyFetchableArtworkSourceType(v2);
  v4 = mlcore::BestArtworkTokenPropertyEntityType(v3);
  v5 = (char *)operator new(0x48uLL);
  *(_OWORD *)(v5 + 8) = 0u;
  *(_QWORD *)v5 = &off_24C33CE50;
  *((_QWORD *)v5 + 4) = v4;
  *((_QWORD *)v5 + 5) = 0;
  *((_DWORD *)v5 + 12) = 0;
  *(_OWORD *)(v5 + 56) = 0u;
  *((_QWORD *)&v31 + 1) = v5;
  *((_QWORD *)v5 + 3) = &unk_24C339C50;
  v5 += 24;
  *(_QWORD *)&v31 = v5;
  v38[0] = v31;
  v31 = 0u;
  v6 = (mlcore *)mlcore::BestArtworkTokenPropertyArtworkType((mlcore *)v5);
  v7 = mlcore::ItemPropertyEffectiveArtworkType(v6);
  v8 = (char *)operator new(0x38uLL);
  *(_OWORD *)(v8 + 8) = 0u;
  *(_QWORD *)v8 = &off_24C33D240;
  *((_QWORD *)v8 + 4) = v6;
  *((_QWORD *)v8 + 5) = 0;
  *((_QWORD *)v8 + 3) = &off_24C33A5A8;
  *((_QWORD *)v8 + 6) = v7;
  *(_QWORD *)&v30 = v8 + 24;
  *((_QWORD *)&v30 + 1) = v8;
  v38[1] = v30;
  v30 = 0u;
  v32 = 0;
  v33 = 0u;
  v36 = &v32;
  v37 = 0;
  v9 = (__int128 *)operator new(0x20uLL);
  v10 = 0;
  v11 = 0;
  v32 = v9;
  *(_QWORD *)&v33 = v9;
  *((_QWORD *)&v33 + 1) = v9 + 2;
  do
  {
    v12 = v10;
    v13 = v38[v11];
    *v9 = v13;
    if (*((_QWORD *)&v13 + 1))
    {
      v14 = (unint64_t *)(*((_QWORD *)&v13 + 1) + 8);
      do
        v15 = __ldxr(v14);
      while (__stxr(v15 + 1, v14));
    }
    ++v9;
    v10 = 1;
    v11 = 1;
  }
  while ((v12 & 1) == 0);
  *(_QWORD *)&v33 = v9;
  mlcore::CreateAndPredicate(&v32, &v34);
  Foreign = mlcore::GetForeignProperty<int>((uint64_t)v2, (uint64_t)v3, &v34);
  v29[0] = 0;
  v29[1] = 0;
  v17 = mlcore::GetForeignProperty<int>((uint64_t)v1, Foreign, v29);
  v18 = v35;
  if (v35)
  {
    p_shared_owners = (unint64_t *)&v35->__shared_owners_;
    do
      v20 = __ldaxr(p_shared_owners);
    while (__stlxr(v20 - 1, p_shared_owners));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  v36 = &v32;
  std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v36);
  for (i = 1; i != -1; --i)
    std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)&v38[i]);
  v22 = (std::__shared_weak_count *)*((_QWORD *)&v30 + 1);
  if (*((_QWORD *)&v30 + 1))
  {
    v23 = (unint64_t *)(*((_QWORD *)&v30 + 1) + 8);
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  v25 = (std::__shared_weak_count *)*((_QWORD *)&v31 + 1);
  if (*((_QWORD *)&v31 + 1))
  {
    v26 = (unint64_t *)(*((_QWORD *)&v31 + 1) + 8);
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  return v17;
}

void sub_20A68883C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,void **a21)
{
  uint64_t v21;
  uint64_t i;

  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)&a19);
  a21 = (void **)&a16;
  std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__destroy_vector::operator()[abi:ne180100](&a21);
  for (i = 16; i != -16; i -= 16)
    std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100](v21 - 96 + i);
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  _Unwind_Resume(a1);
}

uint64_t mlcore::PlaylistItemPropertyFetchableArtworkToken(mlcore *this)
{
  mlcore *v1;
  mlcore *v2;
  mlcore *v3;
  uint64_t v4;
  char *v5;
  mlcore *v6;
  uint64_t v7;
  char *v8;
  __int128 *v9;
  char v10;
  uint64_t v11;
  char v12;
  __int128 v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  uint64_t i;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  uint64_t v29[2];
  __int128 v30;
  __int128 v31;
  __int128 *v32;
  __int128 v33;
  uint64_t v34;
  std::__shared_weak_count *v35;
  __int128 **v36;
  char v37;
  _OWORD v38[2];
  uint64_t v39;

  v39 = *MEMORY[0x24BDAC8D0];
  v1 = (mlcore *)mlcore::PlaylistItemPropertyItemPersistentID(this);
  v2 = (mlcore *)mlcore::ItemPropertyPersistentID(v1);
  v3 = (mlcore *)mlcore::BestArtworkTokenPropertyFetchableArtworkToken(v2);
  v4 = mlcore::BestArtworkTokenPropertyEntityType(v3);
  v5 = (char *)operator new(0x48uLL);
  *(_OWORD *)(v5 + 8) = 0u;
  *(_QWORD *)v5 = &off_24C33CE50;
  *((_QWORD *)v5 + 4) = v4;
  *((_QWORD *)v5 + 5) = 0;
  *((_DWORD *)v5 + 12) = 0;
  *(_OWORD *)(v5 + 56) = 0u;
  *((_QWORD *)&v31 + 1) = v5;
  *((_QWORD *)v5 + 3) = &unk_24C339C50;
  v5 += 24;
  *(_QWORD *)&v31 = v5;
  v38[0] = v31;
  v31 = 0u;
  v6 = (mlcore *)mlcore::BestArtworkTokenPropertyArtworkType((mlcore *)v5);
  v7 = mlcore::ItemPropertyEffectiveArtworkType(v6);
  v8 = (char *)operator new(0x38uLL);
  *(_OWORD *)(v8 + 8) = 0u;
  *(_QWORD *)v8 = &off_24C33D240;
  *((_QWORD *)v8 + 4) = v6;
  *((_QWORD *)v8 + 5) = 0;
  *((_QWORD *)v8 + 3) = &off_24C33A5A8;
  *((_QWORD *)v8 + 6) = v7;
  *(_QWORD *)&v30 = v8 + 24;
  *((_QWORD *)&v30 + 1) = v8;
  v38[1] = v30;
  v30 = 0u;
  v32 = 0;
  v33 = 0u;
  v36 = &v32;
  v37 = 0;
  v9 = (__int128 *)operator new(0x20uLL);
  v10 = 0;
  v11 = 0;
  v32 = v9;
  *(_QWORD *)&v33 = v9;
  *((_QWORD *)&v33 + 1) = v9 + 2;
  do
  {
    v12 = v10;
    v13 = v38[v11];
    *v9 = v13;
    if (*((_QWORD *)&v13 + 1))
    {
      v14 = (unint64_t *)(*((_QWORD *)&v13 + 1) + 8);
      do
        v15 = __ldxr(v14);
      while (__stxr(v15 + 1, v14));
    }
    ++v9;
    v10 = 1;
    v11 = 1;
  }
  while ((v12 & 1) == 0);
  *(_QWORD *)&v33 = v9;
  mlcore::CreateAndPredicate(&v32, &v34);
  v16 = mlcore::GetForeignProperty<std::string>((uint64_t)v2, (uint64_t)v3, &v34);
  v29[0] = 0;
  v29[1] = 0;
  v17 = mlcore::GetForeignProperty<std::string>((uint64_t)v1, v16, v29);
  v18 = v35;
  if (v35)
  {
    p_shared_owners = (unint64_t *)&v35->__shared_owners_;
    do
      v20 = __ldaxr(p_shared_owners);
    while (__stlxr(v20 - 1, p_shared_owners));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  v36 = &v32;
  std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v36);
  for (i = 1; i != -1; --i)
    std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)&v38[i]);
  v22 = (std::__shared_weak_count *)*((_QWORD *)&v30 + 1);
  if (*((_QWORD *)&v30 + 1))
  {
    v23 = (unint64_t *)(*((_QWORD *)&v30 + 1) + 8);
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  v25 = (std::__shared_weak_count *)*((_QWORD *)&v31 + 1);
  if (*((_QWORD *)&v31 + 1))
  {
    v26 = (unint64_t *)(*((_QWORD *)&v31 + 1) + 8);
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  return v17;
}

void sub_20A688B64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,void **a21)
{
  uint64_t v21;
  uint64_t i;

  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)&a19);
  a21 = (void **)&a16;
  std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__destroy_vector::operator()[abi:ne180100](&a21);
  for (i = 16; i != -16; i -= 16)
    std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100](v21 - 96 + i);
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  _Unwind_Resume(a1);
}

uint64_t mlcore::ItemPropertyEffectiveArtworkType(mlcore *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&mlcore::ItemPropertyEffectiveArtworkType(void)::once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&mlcore::ItemPropertyEffectiveArtworkType(void)::once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyEffectiveArtworkType(void)::$_0 &&>>);
  }
  return mlcore::ItemPropertyEffectiveArtworkType(void)::property;
}

uint64_t mlcore::AlbumPropertyRepresentativeItemAvailableArtworkToken(mlcore *this)
{
  mlcore *v1;
  uint64_t v2;
  uint64_t v4[2];

  v1 = (mlcore *)mlcore::AlbumPropertyRepresentativeItemPersistentID(this);
  v2 = mlcore::ItemPropertyAvailableArtworkToken(v1);
  v4[0] = 0;
  v4[1] = 0;
  return mlcore::GetForeignProperty<std::string>((uint64_t)v1, v2, v4);
}

void sub_20A688C8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t mlcore::ArtistPropertyFetchableArtworkSourceType(mlcore *this)
{
  mlcore *v1;
  mlcore *v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  char *v6;
  __int128 *v7;
  char v8;
  uint64_t v9;
  char v10;
  __int128 v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t Foreign;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  uint64_t i;
  __int128 v20;
  __int128 v21;
  __int128 *v22;
  __int128 v23;
  uint64_t v24;
  std::__shared_weak_count *v25;
  __int128 **v26;
  char v27;
  _OWORD v28[2];
  uint64_t v29;

  v29 = *MEMORY[0x24BDAC8D0];
  v1 = (mlcore *)mlcore::ArtistPropertyPersistentID(this);
  v2 = (mlcore *)mlcore::BestArtworkTokenPropertyFetchableArtworkSourceType(v1);
  v3 = mlcore::BestArtworkTokenPropertyEntityType(v2);
  v4 = (char *)operator new(0x48uLL);
  *(_OWORD *)(v4 + 8) = 0u;
  *(_QWORD *)v4 = &off_24C33CE50;
  *((_QWORD *)v4 + 4) = v3;
  *((_QWORD *)v4 + 5) = 0;
  *((_DWORD *)v4 + 12) = 7;
  *(_OWORD *)(v4 + 56) = 0u;
  *((_QWORD *)&v21 + 1) = v4;
  *((_QWORD *)v4 + 3) = &unk_24C339C50;
  *(_QWORD *)&v21 = v4 + 24;
  v28[0] = v21;
  v5 = mlcore::BestArtworkTokenPropertyArtworkType((mlcore *)(v4 + 24));
  v6 = (char *)operator new(0x48uLL);
  *(_OWORD *)(v6 + 8) = 0u;
  *(_QWORD *)v6 = &off_24C33CE50;
  *((_QWORD *)v6 + 4) = v5;
  *((_QWORD *)v6 + 5) = 0;
  *((_QWORD *)v6 + 3) = &unk_24C339C50;
  *((_DWORD *)v6 + 12) = 4;
  *(_OWORD *)(v6 + 56) = 0u;
  *(_QWORD *)&v20 = v6 + 24;
  *((_QWORD *)&v20 + 1) = v6;
  v28[1] = v20;
  v22 = 0;
  v23 = 0u;
  v26 = &v22;
  v27 = 0;
  v7 = (__int128 *)operator new(0x20uLL);
  v8 = 0;
  v9 = 0;
  v22 = v7;
  *(_QWORD *)&v23 = v7;
  *((_QWORD *)&v23 + 1) = v7 + 2;
  do
  {
    v10 = v8;
    v11 = v28[v9];
    *v7 = v11;
    if (*((_QWORD *)&v11 + 1))
    {
      v12 = (unint64_t *)(*((_QWORD *)&v11 + 1) + 8);
      do
        v13 = __ldxr(v12);
      while (__stxr(v13 + 1, v12));
    }
    ++v7;
    v8 = 1;
    v9 = 1;
  }
  while ((v10 & 1) == 0);
  *(_QWORD *)&v23 = v7;
  mlcore::CreateAndPredicate(&v22, &v24);
  Foreign = mlcore::GetForeignProperty<int>((uint64_t)v1, (uint64_t)v2, &v24);
  v15 = v25;
  if (v25)
  {
    p_shared_owners = (unint64_t *)&v25->__shared_owners_;
    do
      v17 = __ldaxr(p_shared_owners);
    while (__stlxr(v17 - 1, p_shared_owners));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  v26 = &v22;
  std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v26);
  for (i = 1; i != -1; --i)
    std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)&v28[i]);
  return Foreign;
}

void sub_20A688F14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, void **a19, uint64_t a20,char a21)
{
  uint64_t i;

  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  a19 = (void **)&a14;
  std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__destroy_vector::operator()[abi:ne180100](&a19);
  for (i = 16; i != -16; i -= 16)
    std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)(&a21 + i));
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

uint64_t mlcore::ArtistPropertyAvailableArtworkToken(mlcore *this)
{
  mlcore *v1;
  mlcore *v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  char *v6;
  __int128 *v7;
  char v8;
  uint64_t v9;
  char v10;
  __int128 v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  uint64_t i;
  __int128 v20;
  __int128 v21;
  __int128 *v22;
  __int128 v23;
  uint64_t v24;
  std::__shared_weak_count *v25;
  __int128 **v26;
  char v27;
  _OWORD v28[2];
  uint64_t v29;

  v29 = *MEMORY[0x24BDAC8D0];
  v1 = (mlcore *)mlcore::ArtistPropertyPersistentID(this);
  v2 = (mlcore *)mlcore::BestArtworkTokenPropertyAvailableArtworkToken(v1);
  v3 = mlcore::BestArtworkTokenPropertyEntityType(v2);
  v4 = (char *)operator new(0x48uLL);
  *(_OWORD *)(v4 + 8) = 0u;
  *(_QWORD *)v4 = &off_24C33CE50;
  *((_QWORD *)v4 + 4) = v3;
  *((_QWORD *)v4 + 5) = 0;
  *((_DWORD *)v4 + 12) = 7;
  *(_OWORD *)(v4 + 56) = 0u;
  *((_QWORD *)&v21 + 1) = v4;
  *((_QWORD *)v4 + 3) = &unk_24C339C50;
  *(_QWORD *)&v21 = v4 + 24;
  v28[0] = v21;
  v5 = mlcore::BestArtworkTokenPropertyArtworkType((mlcore *)(v4 + 24));
  v6 = (char *)operator new(0x48uLL);
  *(_OWORD *)(v6 + 8) = 0u;
  *(_QWORD *)v6 = &off_24C33CE50;
  *((_QWORD *)v6 + 4) = v5;
  *((_QWORD *)v6 + 5) = 0;
  *((_QWORD *)v6 + 3) = &unk_24C339C50;
  *((_DWORD *)v6 + 12) = 4;
  *(_OWORD *)(v6 + 56) = 0u;
  *(_QWORD *)&v20 = v6 + 24;
  *((_QWORD *)&v20 + 1) = v6;
  v28[1] = v20;
  v22 = 0;
  v23 = 0u;
  v26 = &v22;
  v27 = 0;
  v7 = (__int128 *)operator new(0x20uLL);
  v8 = 0;
  v9 = 0;
  v22 = v7;
  *(_QWORD *)&v23 = v7;
  *((_QWORD *)&v23 + 1) = v7 + 2;
  do
  {
    v10 = v8;
    v11 = v28[v9];
    *v7 = v11;
    if (*((_QWORD *)&v11 + 1))
    {
      v12 = (unint64_t *)(*((_QWORD *)&v11 + 1) + 8);
      do
        v13 = __ldxr(v12);
      while (__stxr(v13 + 1, v12));
    }
    ++v7;
    v8 = 1;
    v9 = 1;
  }
  while ((v10 & 1) == 0);
  *(_QWORD *)&v23 = v7;
  mlcore::CreateAndPredicate(&v22, &v24);
  v14 = mlcore::GetForeignProperty<std::string>((uint64_t)v1, (uint64_t)v2, &v24);
  v15 = v25;
  if (v25)
  {
    p_shared_owners = (unint64_t *)&v25->__shared_owners_;
    do
      v17 = __ldaxr(p_shared_owners);
    while (__stlxr(v17 - 1, p_shared_owners));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  v26 = &v22;
  std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v26);
  for (i = 1; i != -1; --i)
    std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)&v28[i]);
  return v14;
}

void sub_20A689204(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, void **a19, uint64_t a20,char a21)
{
  uint64_t i;

  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  a19 = (void **)&a14;
  std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__destroy_vector::operator()[abi:ne180100](&a19);
  for (i = 16; i != -16; i -= 16)
    std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)(&a21 + i));
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

uint64_t mlcore::ArtistPropertyFetchableArtworkToken(mlcore *this)
{
  mlcore *v1;
  mlcore *v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  char *v6;
  __int128 *v7;
  char v8;
  uint64_t v9;
  char v10;
  __int128 v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  uint64_t i;
  __int128 v20;
  __int128 v21;
  __int128 *v22;
  __int128 v23;
  uint64_t v24;
  std::__shared_weak_count *v25;
  __int128 **v26;
  char v27;
  _OWORD v28[2];
  uint64_t v29;

  v29 = *MEMORY[0x24BDAC8D0];
  v1 = (mlcore *)mlcore::ArtistPropertyPersistentID(this);
  v2 = (mlcore *)mlcore::BestArtworkTokenPropertyFetchableArtworkToken(v1);
  v3 = mlcore::BestArtworkTokenPropertyEntityType(v2);
  v4 = (char *)operator new(0x48uLL);
  *(_OWORD *)(v4 + 8) = 0u;
  *(_QWORD *)v4 = &off_24C33CE50;
  *((_QWORD *)v4 + 4) = v3;
  *((_QWORD *)v4 + 5) = 0;
  *((_DWORD *)v4 + 12) = 7;
  *(_OWORD *)(v4 + 56) = 0u;
  *((_QWORD *)&v21 + 1) = v4;
  *((_QWORD *)v4 + 3) = &unk_24C339C50;
  *(_QWORD *)&v21 = v4 + 24;
  v28[0] = v21;
  v5 = mlcore::BestArtworkTokenPropertyArtworkType((mlcore *)(v4 + 24));
  v6 = (char *)operator new(0x48uLL);
  *(_OWORD *)(v6 + 8) = 0u;
  *(_QWORD *)v6 = &off_24C33CE50;
  *((_QWORD *)v6 + 4) = v5;
  *((_QWORD *)v6 + 5) = 0;
  *((_QWORD *)v6 + 3) = &unk_24C339C50;
  *((_DWORD *)v6 + 12) = 4;
  *(_OWORD *)(v6 + 56) = 0u;
  *(_QWORD *)&v20 = v6 + 24;
  *((_QWORD *)&v20 + 1) = v6;
  v28[1] = v20;
  v22 = 0;
  v23 = 0u;
  v26 = &v22;
  v27 = 0;
  v7 = (__int128 *)operator new(0x20uLL);
  v8 = 0;
  v9 = 0;
  v22 = v7;
  *(_QWORD *)&v23 = v7;
  *((_QWORD *)&v23 + 1) = v7 + 2;
  do
  {
    v10 = v8;
    v11 = v28[v9];
    *v7 = v11;
    if (*((_QWORD *)&v11 + 1))
    {
      v12 = (unint64_t *)(*((_QWORD *)&v11 + 1) + 8);
      do
        v13 = __ldxr(v12);
      while (__stxr(v13 + 1, v12));
    }
    ++v7;
    v8 = 1;
    v9 = 1;
  }
  while ((v10 & 1) == 0);
  *(_QWORD *)&v23 = v7;
  mlcore::CreateAndPredicate(&v22, &v24);
  v14 = mlcore::GetForeignProperty<std::string>((uint64_t)v1, (uint64_t)v2, &v24);
  v15 = v25;
  if (v25)
  {
    p_shared_owners = (unint64_t *)&v25->__shared_owners_;
    do
      v17 = __ldaxr(p_shared_owners);
    while (__stlxr(v17 - 1, p_shared_owners));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  v26 = &v22;
  std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v26);
  for (i = 1; i != -1; --i)
    std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)&v28[i]);
  return v14;
}

void sub_20A6894F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, void **a19, uint64_t a20,char a21)
{
  uint64_t i;

  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  a19 = (void **)&a14;
  std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__destroy_vector::operator()[abi:ne180100](&a19);
  for (i = 16; i != -16; i -= 16)
    std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)(&a21 + i));
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

uint64_t mlcore::ArtistPropertyPersistentID(mlcore *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&mlcore::ArtistPropertyPersistentID(void)::once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&mlcore::ArtistPropertyPersistentID(void)::once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ArtistPropertyPersistentID(void)::$_0 &&>>);
  }
  return mlcore::ArtistPropertyPersistentID(void)::property;
}

uint64_t mlcore::AlbumPropertyRepresentativeItemFetchableArtworkToken(mlcore *this)
{
  mlcore *v1;
  uint64_t v2;
  uint64_t v4[2];

  v1 = (mlcore *)mlcore::AlbumPropertyRepresentativeItemPersistentID(this);
  v2 = mlcore::ItemPropertyFetchableArtworkToken(v1);
  v4[0] = 0;
  v4[1] = 0;
  return mlcore::GetForeignProperty<std::string>((uint64_t)v1, v2, v4);
}

void sub_20A68960C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t mlcore::ItemPropertyFetchableArtworkToken(mlcore *this)
{
  mlcore *v1;
  mlcore *v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  char *v6;
  __int128 *v7;
  char v8;
  uint64_t v9;
  char v10;
  __int128 v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  uint64_t i;
  __int128 v20;
  __int128 v21;
  __int128 *v22;
  __int128 v23;
  uint64_t v24;
  std::__shared_weak_count *v25;
  __int128 **v26;
  char v27;
  _OWORD v28[2];
  uint64_t v29;

  v29 = *MEMORY[0x24BDAC8D0];
  v1 = (mlcore *)mlcore::ItemPropertyPersistentID(this);
  v2 = (mlcore *)mlcore::BestArtworkTokenPropertyFetchableArtworkToken(v1);
  v3 = mlcore::BestArtworkTokenPropertyEntityType(v2);
  v4 = (char *)operator new(0x48uLL);
  *(_OWORD *)(v4 + 8) = 0u;
  *(_QWORD *)v4 = &off_24C33CE50;
  *((_QWORD *)v4 + 4) = v3;
  *((_QWORD *)v4 + 5) = 0;
  *((_DWORD *)v4 + 12) = 0;
  *(_OWORD *)(v4 + 56) = 0u;
  *((_QWORD *)&v21 + 1) = v4;
  *((_QWORD *)v4 + 3) = &unk_24C339C50;
  *(_QWORD *)&v21 = v4 + 24;
  v28[0] = v21;
  v5 = mlcore::BestArtworkTokenPropertyArtworkType((mlcore *)(v4 + 24));
  v6 = (char *)operator new(0x48uLL);
  *(_OWORD *)(v6 + 8) = 0u;
  *(_QWORD *)v6 = &off_24C33CE50;
  *((_QWORD *)v6 + 4) = v5;
  *((_QWORD *)v6 + 5) = 0;
  *((_QWORD *)v6 + 3) = &unk_24C339C50;
  *((_DWORD *)v6 + 12) = 1;
  *(_OWORD *)(v6 + 56) = 0u;
  *(_QWORD *)&v20 = v6 + 24;
  *((_QWORD *)&v20 + 1) = v6;
  v28[1] = v20;
  v22 = 0;
  v23 = 0u;
  v26 = &v22;
  v27 = 0;
  v7 = (__int128 *)operator new(0x20uLL);
  v8 = 0;
  v9 = 0;
  v22 = v7;
  *(_QWORD *)&v23 = v7;
  *((_QWORD *)&v23 + 1) = v7 + 2;
  do
  {
    v10 = v8;
    v11 = v28[v9];
    *v7 = v11;
    if (*((_QWORD *)&v11 + 1))
    {
      v12 = (unint64_t *)(*((_QWORD *)&v11 + 1) + 8);
      do
        v13 = __ldxr(v12);
      while (__stxr(v13 + 1, v12));
    }
    ++v7;
    v8 = 1;
    v9 = 1;
  }
  while ((v10 & 1) == 0);
  *(_QWORD *)&v23 = v7;
  mlcore::CreateAndPredicate(&v22, &v24);
  v14 = mlcore::GetForeignProperty<std::string>((uint64_t)v1, (uint64_t)v2, &v24);
  v15 = v25;
  if (v25)
  {
    p_shared_owners = (unint64_t *)&v25->__shared_owners_;
    do
      v17 = __ldaxr(p_shared_owners);
    while (__stlxr(v17 - 1, p_shared_owners));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  v26 = &v22;
  std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v26);
  for (i = 1; i != -1; --i)
    std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)&v28[i]);
  return v14;
}

void sub_20A689894(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, void **a19, uint64_t a20,char a21)
{
  uint64_t i;

  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  a19 = (void **)&a14;
  std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__destroy_vector::operator()[abi:ne180100](&a19);
  for (i = 16; i != -16; i -= 16)
    std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)(&a21 + i));
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

uint64_t mlcore::BestArtworkTokenPropertyFetchableArtworkToken(mlcore *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&mlcore::BestArtworkTokenPropertyFetchableArtworkToken(void)::once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&mlcore::BestArtworkTokenPropertyFetchableArtworkToken(void)::once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::BestArtworkTokenPropertyFetchableArtworkToken(void)::$_0 &&>>);
  }
  return mlcore::BestArtworkTokenPropertyFetchableArtworkToken(void)::property;
}

uint64_t mlcore::AlbumPropertyRepresentativeItemFetchableArtworkSourceType(mlcore *this)
{
  mlcore *v1;
  uint64_t v2;
  uint64_t v4[2];

  v1 = (mlcore *)mlcore::AlbumPropertyRepresentativeItemPersistentID(this);
  v2 = mlcore::ItemPropertyFetchableArtworkSourceType(v1);
  v4[0] = 0;
  v4[1] = 0;
  return mlcore::GetForeignProperty<int>((uint64_t)v1, v2, v4);
}

void sub_20A6899AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t mlcore::ItemPropertyFetchableArtworkSourceType(mlcore *this)
{
  mlcore *v1;
  mlcore *v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  char *v6;
  __int128 *v7;
  char v8;
  uint64_t v9;
  char v10;
  __int128 v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t Foreign;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  uint64_t i;
  __int128 v20;
  __int128 v21;
  __int128 *v22;
  __int128 v23;
  uint64_t v24;
  std::__shared_weak_count *v25;
  __int128 **v26;
  char v27;
  _OWORD v28[2];
  uint64_t v29;

  v29 = *MEMORY[0x24BDAC8D0];
  v1 = (mlcore *)mlcore::ItemPropertyPersistentID(this);
  v2 = (mlcore *)mlcore::BestArtworkTokenPropertyFetchableArtworkSourceType(v1);
  v3 = mlcore::BestArtworkTokenPropertyEntityType(v2);
  v4 = (char *)operator new(0x48uLL);
  *(_OWORD *)(v4 + 8) = 0u;
  *(_QWORD *)v4 = &off_24C33CE50;
  *((_QWORD *)v4 + 4) = v3;
  *((_QWORD *)v4 + 5) = 0;
  *((_DWORD *)v4 + 12) = 0;
  *(_OWORD *)(v4 + 56) = 0u;
  *((_QWORD *)&v21 + 1) = v4;
  *((_QWORD *)v4 + 3) = &unk_24C339C50;
  *(_QWORD *)&v21 = v4 + 24;
  v28[0] = v21;
  v5 = mlcore::BestArtworkTokenPropertyArtworkType((mlcore *)(v4 + 24));
  v6 = (char *)operator new(0x48uLL);
  *(_OWORD *)(v6 + 8) = 0u;
  *(_QWORD *)v6 = &off_24C33CE50;
  *((_QWORD *)v6 + 4) = v5;
  *((_QWORD *)v6 + 5) = 0;
  *((_QWORD *)v6 + 3) = &unk_24C339C50;
  *((_DWORD *)v6 + 12) = 1;
  *(_OWORD *)(v6 + 56) = 0u;
  *(_QWORD *)&v20 = v6 + 24;
  *((_QWORD *)&v20 + 1) = v6;
  v28[1] = v20;
  v22 = 0;
  v23 = 0u;
  v26 = &v22;
  v27 = 0;
  v7 = (__int128 *)operator new(0x20uLL);
  v8 = 0;
  v9 = 0;
  v22 = v7;
  *(_QWORD *)&v23 = v7;
  *((_QWORD *)&v23 + 1) = v7 + 2;
  do
  {
    v10 = v8;
    v11 = v28[v9];
    *v7 = v11;
    if (*((_QWORD *)&v11 + 1))
    {
      v12 = (unint64_t *)(*((_QWORD *)&v11 + 1) + 8);
      do
        v13 = __ldxr(v12);
      while (__stxr(v13 + 1, v12));
    }
    ++v7;
    v8 = 1;
    v9 = 1;
  }
  while ((v10 & 1) == 0);
  *(_QWORD *)&v23 = v7;
  mlcore::CreateAndPredicate(&v22, &v24);
  Foreign = mlcore::GetForeignProperty<int>((uint64_t)v1, (uint64_t)v2, &v24);
  v15 = v25;
  if (v25)
  {
    p_shared_owners = (unint64_t *)&v25->__shared_owners_;
    do
      v17 = __ldaxr(p_shared_owners);
    while (__stlxr(v17 - 1, p_shared_owners));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  v26 = &v22;
  std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v26);
  for (i = 1; i != -1; --i)
    std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)&v28[i]);
  return Foreign;
}

void sub_20A689C34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, void **a19, uint64_t a20,char a21)
{
  uint64_t i;

  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  a19 = (void **)&a14;
  std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__destroy_vector::operator()[abi:ne180100](&a19);
  for (i = 16; i != -16; i -= 16)
    std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)(&a21 + i));
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

uint64_t mlcore::BestArtworkTokenPropertyFetchableArtworkSourceType(mlcore *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&mlcore::BestArtworkTokenPropertyFetchableArtworkSourceType(void)::once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&mlcore::BestArtworkTokenPropertyFetchableArtworkSourceType(void)::once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::BestArtworkTokenPropertyFetchableArtworkSourceType(void)::$_0 &&>>);
  }
  return mlcore::BestArtworkTokenPropertyFetchableArtworkSourceType(void)::property;
}

uint64_t mlcore::ItemPropertyAvailableArtworkToken(mlcore *this)
{
  mlcore *v1;
  mlcore *v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  char *v6;
  __int128 *v7;
  char v8;
  uint64_t v9;
  char v10;
  __int128 v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  uint64_t i;
  __int128 v20;
  __int128 v21;
  __int128 *v22;
  __int128 v23;
  uint64_t v24;
  std::__shared_weak_count *v25;
  __int128 **v26;
  char v27;
  _OWORD v28[2];
  uint64_t v29;

  v29 = *MEMORY[0x24BDAC8D0];
  v1 = (mlcore *)mlcore::ItemPropertyPersistentID(this);
  v2 = (mlcore *)mlcore::BestArtworkTokenPropertyAvailableArtworkToken(v1);
  v3 = mlcore::BestArtworkTokenPropertyEntityType(v2);
  v4 = (char *)operator new(0x48uLL);
  *(_OWORD *)(v4 + 8) = 0u;
  *(_QWORD *)v4 = &off_24C33CE50;
  *((_QWORD *)v4 + 4) = v3;
  *((_QWORD *)v4 + 5) = 0;
  *((_DWORD *)v4 + 12) = 0;
  *(_OWORD *)(v4 + 56) = 0u;
  *((_QWORD *)&v21 + 1) = v4;
  *((_QWORD *)v4 + 3) = &unk_24C339C50;
  *(_QWORD *)&v21 = v4 + 24;
  v28[0] = v21;
  v5 = mlcore::BestArtworkTokenPropertyArtworkType((mlcore *)(v4 + 24));
  v6 = (char *)operator new(0x48uLL);
  *(_OWORD *)(v6 + 8) = 0u;
  *(_QWORD *)v6 = &off_24C33CE50;
  *((_QWORD *)v6 + 4) = v5;
  *((_QWORD *)v6 + 5) = 0;
  *((_QWORD *)v6 + 3) = &unk_24C339C50;
  *((_DWORD *)v6 + 12) = 1;
  *(_OWORD *)(v6 + 56) = 0u;
  *(_QWORD *)&v20 = v6 + 24;
  *((_QWORD *)&v20 + 1) = v6;
  v28[1] = v20;
  v22 = 0;
  v23 = 0u;
  v26 = &v22;
  v27 = 0;
  v7 = (__int128 *)operator new(0x20uLL);
  v8 = 0;
  v9 = 0;
  v22 = v7;
  *(_QWORD *)&v23 = v7;
  *((_QWORD *)&v23 + 1) = v7 + 2;
  do
  {
    v10 = v8;
    v11 = v28[v9];
    *v7 = v11;
    if (*((_QWORD *)&v11 + 1))
    {
      v12 = (unint64_t *)(*((_QWORD *)&v11 + 1) + 8);
      do
        v13 = __ldxr(v12);
      while (__stxr(v13 + 1, v12));
    }
    ++v7;
    v8 = 1;
    v9 = 1;
  }
  while ((v10 & 1) == 0);
  *(_QWORD *)&v23 = v7;
  mlcore::CreateAndPredicate(&v22, &v24);
  v14 = mlcore::GetForeignProperty<std::string>((uint64_t)v1, (uint64_t)v2, &v24);
  v15 = v25;
  if (v25)
  {
    p_shared_owners = (unint64_t *)&v25->__shared_owners_;
    do
      v17 = __ldaxr(p_shared_owners);
    while (__stlxr(v17 - 1, p_shared_owners));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  v26 = &v22;
  std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v26);
  for (i = 1; i != -1; --i)
    std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)&v28[i]);
  return v14;
}

void sub_20A689F80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, void **a19, uint64_t a20,char a21)
{
  uint64_t i;

  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  a19 = (void **)&a14;
  std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__destroy_vector::operator()[abi:ne180100](&a19);
  for (i = 16; i != -16; i -= 16)
    std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)(&a21 + i));
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

uint64_t mlcore::BestArtworkTokenPropertyArtworkType(mlcore *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&mlcore::BestArtworkTokenPropertyArtworkType(void)::once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&mlcore::BestArtworkTokenPropertyArtworkType(void)::once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::BestArtworkTokenPropertyArtworkType(void)::$_0 &&>>);
  }
  return mlcore::BestArtworkTokenPropertyArtworkType(void)::property;
}

uint64_t mlcore::BestArtworkTokenPropertyEntityType(mlcore *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&mlcore::BestArtworkTokenPropertyEntityType(void)::once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&mlcore::BestArtworkTokenPropertyEntityType(void)::once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::BestArtworkTokenPropertyEntityType(void)::$_0 &&>>);
  }
  return mlcore::BestArtworkTokenPropertyEntityType(void)::property;
}

uint64_t mlcore::BestArtworkTokenPropertyAvailableArtworkToken(mlcore *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&mlcore::BestArtworkTokenPropertyAvailableArtworkToken(void)::once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&mlcore::BestArtworkTokenPropertyAvailableArtworkToken(void)::once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::BestArtworkTokenPropertyAvailableArtworkToken(void)::$_0 &&>>);
  }
  return mlcore::BestArtworkTokenPropertyAvailableArtworkToken(void)::property;
}

void mlcore::EntityQuery::albumsQuery(mlcore *a1@<X0>, int a2@<W1>, char **a3@<X8>)
{
  _QWORD *v5;
  uint64_t v6;
  char *v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  _QWORD *v16;
  _QWORD *v17;
  char *v18;
  __int128 v19;
  int64x2_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char *v29;
  uint64_t v30;
  char *v31;
  __int128 v32;
  unint64_t *v33;
  unint64_t v34;
  _QWORD *v35;
  _QWORD *v36;
  char *v37;
  __int128 v38;
  int64x2_t v39;
  uint64_t v40;
  uint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  char *v45;
  mlcore *v46;
  char *v47;
  uint64_t v48;
  char *v49;
  void **v50;
  __int128 v51;
  __int128 v52;
  char *v53;
  __int128 *v54[3];
  int64x2_t v55;
  _QWORD v56[2];
  __int128 v57;
  int64x2_t *v58;
  int64x2_t v59;
  uint64_t v60;
  _QWORD *v61;
  int v62;
  uint64_t v63;

  v5 = 0;
  v63 = *MEMORY[0x24BDAC8D0];
  v55 = 0uLL;
  v56[0] = 0;
  if (a2)
  {
    v6 = mlcore::AlbumPropertyOrder(a1);
    v7 = (char *)operator new(0x48uLL);
    *(_OWORD *)(v7 + 8) = 0u;
    *(_QWORD *)v7 = &off_24C33CE88;
    *((_QWORD *)v7 + 4) = v6;
    *((_QWORD *)v7 + 5) = 0x100000000;
    *((_QWORD *)v7 + 3) = &unk_24C339CA8;
    *((_QWORD *)v7 + 6) = 0;
    *(_OWORD *)(v7 + 56) = 0u;
    *(_QWORD *)&v57 = v7 + 24;
    *((_QWORD *)&v57 + 1) = v7;
    v8 = v57;
    v52 = v57;
    v57 = 0u;
    v9 = v55.i64[1];
    if (v55.i64[1] >= v56[0])
    {
      v51 = v8;
      v10 = (v55.i64[1] - v55.i64[0]) >> 4;
      if ((unint64_t)(v10 + 1) >> 60)
        std::vector<std::string>::__throw_length_error[abi:ne180100]();
      v11 = (v56[0] - v55.i64[0]) >> 3;
      if (v11 <= v10 + 1)
        v11 = v10 + 1;
      if (v56[0] - v55.i64[0] >= 0x7FFFFFFFFFFFFFF0uLL)
        v12 = 0xFFFFFFFFFFFFFFFLL;
      else
        v12 = v11;
      v61 = v56;
      v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<mediaplatform::DatabaseParameterBase>>>(v12);
      v15 = &v13[16 * v10];
      *(_OWORD *)v15 = v51;
      v52 = 0uLL;
      v16 = (_QWORD *)v55.i64[1];
      v17 = (_QWORD *)v55.i64[0];
      if (v55.i64[1] == v55.i64[0])
      {
        v20 = vdupq_n_s64(v55.u64[1]);
        v18 = &v13[16 * v10];
      }
      else
      {
        v18 = &v13[16 * v10];
        do
        {
          v19 = *((_OWORD *)v16 - 1);
          v16 -= 2;
          *((_OWORD *)v18 - 1) = v19;
          v18 -= 16;
          *v16 = 0;
          v16[1] = 0;
        }
        while (v16 != v17);
        v20 = v55;
      }
      v5 = v15 + 16;
      v55.i64[0] = (uint64_t)v18;
      v55.i64[1] = (uint64_t)(v15 + 16);
      v59 = v20;
      v21 = v56[0];
      v56[0] = &v13[16 * v14];
      v60 = v21;
      v58 = (int64x2_t *)v20.i64[0];
      std::__split_buffer<std::shared_ptr<mediaplatform::SQLExpression const>>::~__split_buffer((uint64_t)&v58);
    }
    else
    {
      *(_OWORD *)v55.i64[1] = v8;
      v5 = (_QWORD *)(v9 + 16);
      v52 = 0uLL;
    }
    v55.i64[1] = (uint64_t)v5;
  }
  if (*(_QWORD *)a1)
  {
    if ((unint64_t)v5 >= v56[0])
    {
      v26 = ((uint64_t)v5 - v55.i64[0]) >> 4;
      if ((unint64_t)(v26 + 1) >> 60)
        std::vector<std::string>::__throw_length_error[abi:ne180100]();
      v27 = (v56[0] - v55.i64[0]) >> 3;
      if (v27 <= v26 + 1)
        v27 = v26 + 1;
      if (v56[0] - v55.i64[0] >= 0x7FFFFFFFFFFFFFF0uLL)
        v28 = 0xFFFFFFFFFFFFFFFLL;
      else
        v28 = v27;
      v61 = v56;
      v29 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<mediaplatform::DatabaseParameterBase>>>(v28);
      v31 = &v29[16 * v26];
      v32 = *(_OWORD *)a1;
      *(_OWORD *)v31 = *(_OWORD *)a1;
      if (*((_QWORD *)&v32 + 1))
      {
        v33 = (unint64_t *)(*((_QWORD *)&v32 + 1) + 8);
        do
          v34 = __ldxr(v33);
        while (__stxr(v34 + 1, v33));
      }
      v35 = (_QWORD *)v55.i64[1];
      v36 = (_QWORD *)v55.i64[0];
      if (v55.i64[1] == v55.i64[0])
      {
        v39 = vdupq_n_s64(v55.u64[1]);
        v37 = &v29[16 * v26];
      }
      else
      {
        v37 = &v29[16 * v26];
        do
        {
          v38 = *((_OWORD *)v35 - 1);
          v35 -= 2;
          *((_OWORD *)v37 - 1) = v38;
          v37 -= 16;
          *v35 = 0;
          v35[1] = 0;
        }
        while (v35 != v36);
        v39 = v55;
      }
      v25 = v31 + 16;
      v55.i64[0] = (uint64_t)v37;
      v55.i64[1] = (uint64_t)(v31 + 16);
      v59 = v39;
      v40 = v56[0];
      v56[0] = &v29[16 * v30];
      v60 = v40;
      v58 = (int64x2_t *)v39.i64[0];
      std::__split_buffer<std::shared_ptr<mediaplatform::SQLExpression const>>::~__split_buffer((uint64_t)&v58);
    }
    else
    {
      *v5 = *(_QWORD *)a1;
      v22 = *((_QWORD *)a1 + 1);
      v5[1] = v22;
      if (v22)
      {
        v23 = (unint64_t *)(v22 + 8);
        do
          v24 = __ldxr(v23);
        while (__stxr(v24 + 1, v23));
      }
      v25 = v5 + 2;
    }
    v55.i64[1] = (uint64_t)v25;
  }
  v41 = mlcore::TypedEntityClass<mlcore::Album>::sharedPointer();
  memset(v54, 0, sizeof(v54));
  std::vector<std::shared_ptr<mlcore::Predicate>>::__init_with_size[abi:ne180100]<std::shared_ptr<mlcore::Predicate>*,std::shared_ptr<mlcore::Predicate>*>((char *)v54, v55.i64[0], (_QWORD *)v55.i64[1], (v55.i64[1] - v55.i64[0]) >> 4);
  mlcore::CreateAndPredicate(v54, &v58);
  std::allocate_shared[abi:ne180100]<mlcore::EntityQuery,std::allocator<mlcore::EntityQuery>,mlcore::EntityClass *,std::shared_ptr<mlcore::Predicate>,void>(a3, v41, (uint64_t *)&v58);
  v42 = (std::__shared_weak_count *)v59.i64[0];
  if (v59.i64[0])
  {
    v43 = (unint64_t *)(v59.i64[0] + 8);
    do
      v44 = __ldaxr(v43);
    while (__stlxr(v44 - 1, v43));
    if (!v44)
    {
      ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
      std::__shared_weak_count::__release_weak(v42);
    }
  }
  *(_QWORD *)&v52 = v54;
  std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v52);
  v45 = *a3;
  v59.i64[0] = mlcore::AlbumPropertyOrder(v46);
  v59.i32[2] = 0;
  v61 = (_QWORD *)mlcore::AlbumPropertyPersistentID((mlcore *)v59.i64[0]);
  v62 = 0;
  v53 = 0;
  v52 = 0uLL;
  *(_QWORD *)&v57 = &v52;
  BYTE8(v57) = 0;
  v47 = (char *)operator new(0x30uLL);
  v48 = 0;
  *(_QWORD *)&v52 = v47;
  v53 = v47 + 48;
  do
  {
    v49 = &v47[v48 * 4];
    v50 = *(void ***)((char *)&v58 + v48 * 4 + 8);
    *(_QWORD *)v49 = &off_24C337670;
    *((_QWORD *)v49 + 1) = v50;
    *((_DWORD *)v49 + 4) = v59.i32[v48 + 2];
    v48 += 6;
  }
  while (v48 != 12);
  *((_QWORD *)&v52 + 1) = v47 + 48;
  mlcore::PropertiesQuery::setSortDescriptors(v45, (char *)&v52);
  *(_QWORD *)&v57 = &v52;
  std::vector<mlcore::SortDescriptor>::__destroy_vector::operator()[abi:ne180100]((void ***)&v57);
  v58 = &v55;
  std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v58);
}

void sub_20A68A504(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  void **v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  va_list va1;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, void **);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v11 = va_arg(va2, _QWORD);
  v13 = va_arg(va2, _QWORD);
  v14 = va_arg(va2, _QWORD);
  v15 = va_arg(va2, _QWORD);
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)va2);
  va_copy((va_list)v4, va1);
  std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t mlcore::AlbumPropertyOrder(mlcore *this)
{
  mlcore *v1;
  uint64_t v2;
  uint64_t v4[2];

  v1 = (mlcore *)mlcore::AlbumPropertyRepresentativeItemPersistentID(this);
  v2 = mlcore::ItemPropertyAlbumOrder(v1);
  v4[0] = 0;
  v4[1] = 0;
  return mlcore::GetForeignProperty<long long>((uint64_t)v1, v2, v4);
}

void sub_20A68A5E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t mlcore::ItemPropertyAlbumOrder(mlcore *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&mlcore::ItemPropertyAlbumOrder(void)::once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&mlcore::ItemPropertyAlbumOrder(void)::once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyAlbumOrder(void)::$_0 &&>>);
  }
  return mlcore::ItemPropertyAlbumOrder(void)::property;
}

uint64_t mlcore::AlbumPropertyRepresentativeItemPersistentID(mlcore *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&mlcore::AlbumPropertyRepresentativeItemPersistentID(void)::once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&mlcore::AlbumPropertyRepresentativeItemPersistentID(void)::once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::AlbumPropertyRepresentativeItemPersistentID(void)::$_0 &&>>);
  }
  return mlcore::AlbumPropertyRepresentativeItemPersistentID(void)::property;
}

uint64_t mlcore::PlaylistItemReactionPropertyPersistentID(mlcore *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&mlcore::PlaylistItemReactionPropertyPersistentID(void)::once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&mlcore::PlaylistItemReactionPropertyPersistentID(void)::once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::PlaylistItemReactionPropertyPersistentID(void)::$_0 &&>>);
  }
  return mlcore::PlaylistItemReactionPropertyPersistentID(void)::property;
}

uint64_t mlcore::PlaylistAuthorPropertyPersistentID(mlcore *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&mlcore::PlaylistAuthorPropertyPersistentID(void)::once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&mlcore::PlaylistAuthorPropertyPersistentID(void)::once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::PlaylistAuthorPropertyPersistentID(void)::$_0 &&>>);
  }
  return mlcore::PlaylistAuthorPropertyPersistentID(void)::property;
}

uint64_t mlcore::ItemPropertyKeepLocalConstraints(mlcore *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&mlcore::ItemPropertyKeepLocalConstraints(void)::once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&mlcore::ItemPropertyKeepLocalConstraints(void)::once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyKeepLocalConstraints(void)::$_0 &&>>);
  }
  return mlcore::ItemPropertyKeepLocalConstraints(void)::property;
}

uint64_t mlcore::ItemPropertyIsMasteredForiTunes(mlcore *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&mlcore::ItemPropertyIsMasteredForiTunes(void)::once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&mlcore::ItemPropertyIsMasteredForiTunes(void)::once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyIsMasteredForiTunes(void)::$_0 &&>>);
  }
  return mlcore::ItemPropertyIsMasteredForiTunes(void)::property;
}

uint64_t mlcore::ItemPropertyHasCloudSyncSource(mlcore *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&mlcore::ItemPropertyHasCloudSyncSource(void)::once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&mlcore::ItemPropertyHasCloudSyncSource(void)::once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyHasCloudSyncSource(void)::$_0 &&>>);
  }
  return mlcore::ItemPropertyHasCloudSyncSource(void)::property;
}

uint64_t mlcore::ItemPropertyLongDescription(mlcore *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&mlcore::ItemPropertyLongDescription(void)::once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&mlcore::ItemPropertyLongDescription(void)::once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyLongDescription(void)::$_0 &&>>);
  }
  return mlcore::ItemPropertyLongDescription(void)::property;
}

uint64_t mlcore::PlaylistPropertyIsOwner(mlcore *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&mlcore::PlaylistPropertyIsOwner(void)::once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&mlcore::PlaylistPropertyIsOwner(void)::once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::PlaylistPropertyIsOwner(void)::$_0 &&>>);
  }
  return mlcore::PlaylistPropertyIsOwner(void)::property;
}

uint64_t mlcore::ItemPropertyKeepLocal(mlcore *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&mlcore::ItemPropertyKeepLocal(void)::once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&mlcore::ItemPropertyKeepLocal(void)::once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyKeepLocal(void)::$_0 &&>>);
  }
  return mlcore::ItemPropertyKeepLocal(void)::property;
}

uint64_t mlcore::ArtistPropertyHasName(mlcore *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&mlcore::ArtistPropertyHasName(void)::once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&mlcore::ArtistPropertyHasName(void)::once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ArtistPropertyHasName(void)::$_0 &&>>);
  }
  return mlcore::ArtistPropertyHasName(void)::property;
}

uint64_t mlcore::ItemPropertyLocation(mlcore *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&mlcore::ItemPropertyLocation(void)::once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&mlcore::ItemPropertyLocation(void)::once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyLocation(void)::$_0 &&>>);
  }
  return mlcore::ItemPropertyLocation(void)::property;
}

uint64_t mlcore::ArtistPropertyName(mlcore *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&mlcore::ArtistPropertyName(void)::once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&mlcore::ArtistPropertyName(void)::once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ArtistPropertyName(void)::$_0 &&>>);
  }
  return mlcore::ArtistPropertyName(void)::property;
}

uint64_t mlcore::PlaylistPropertyParentPersistentID(mlcore *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&mlcore::PlaylistPropertyParentPersistentID(void)::once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&mlcore::PlaylistPropertyParentPersistentID(void)::once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::PlaylistPropertyParentPersistentID(void)::$_0 &&>>);
  }
  return mlcore::PlaylistPropertyParentPersistentID(void)::property;
}

uint64_t mlcore::TypedEntityClass<mlcore::Playlist>::name(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
}

uint64_t mlcore::TypedEntityClass<mlcore::Artist>::name(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
}

uint64_t mlcore::TypedEntityClass<mlcore::Album>::name(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
}

uint64_t mlcore::TypedEntityClass<mlcore::Item>::name(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
}

uint64_t mlcore::ItemPropertyPurchaseHistoryRedownloadParameters(mlcore *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&mlcore::ItemPropertyPurchaseHistoryRedownloadParameters(void)::once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&mlcore::ItemPropertyPurchaseHistoryRedownloadParameters(void)::once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyPurchaseHistoryRedownloadParameters(void)::$_0 &&>>);
  }
  return mlcore::ItemPropertyPurchaseHistoryRedownloadParameters(void)::property;
}

uint64_t mlcore::PlaylistPropertyCollaborationInvitationURL(mlcore *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&mlcore::PlaylistPropertyCollaborationInvitationURL(void)::once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&mlcore::PlaylistPropertyCollaborationInvitationURL(void)::once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::PlaylistPropertyCollaborationInvitationURL(void)::$_0 &&>>);
  }
  return mlcore::PlaylistPropertyCollaborationInvitationURL(void)::property;
}

uint64_t mlcore::ItemPropertyStorePlaybackEndpointType(mlcore *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&mlcore::ItemPropertyStorePlaybackEndpointType(void)::once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&mlcore::ItemPropertyStorePlaybackEndpointType(void)::once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyStorePlaybackEndpointType(void)::$_0 &&>>);
  }
  return mlcore::ItemPropertyStorePlaybackEndpointType(void)::property;
}

uint64_t mlcore::ItemPropertyMatchRedownloadParameters(mlcore *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&mlcore::ItemPropertyMatchRedownloadParameters(void)::once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&mlcore::ItemPropertyMatchRedownloadParameters(void)::once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyMatchRedownloadParameters(void)::$_0 &&>>);
  }
  return mlcore::ItemPropertyMatchRedownloadParameters(void)::property;
}

uint64_t mlcore::ItemPropertyIsArtistUploadedContent(mlcore *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&mlcore::ItemPropertyIsArtistUploadedContent(void)::once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&mlcore::ItemPropertyIsArtistUploadedContent(void)::once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyIsArtistUploadedContent(void)::$_0 &&>>);
  }
  return mlcore::ItemPropertyIsArtistUploadedContent(void)::property;
}

uint64_t mlcore::ItemPropertyClassicalMovementNumber(mlcore *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&mlcore::ItemPropertyClassicalMovementNumber(void)::once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&mlcore::ItemPropertyClassicalMovementNumber(void)::once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyClassicalMovementNumber(void)::$_0 &&>>);
  }
  return mlcore::ItemPropertyClassicalMovementNumber(void)::property;
}

uint64_t mlcore::PlaylistPropertyCollaborationMode(mlcore *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&mlcore::PlaylistPropertyCollaborationMode(void)::once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&mlcore::PlaylistPropertyCollaborationMode(void)::once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::PlaylistPropertyCollaborationMode(void)::$_0 &&>>);
  }
  return mlcore::PlaylistPropertyCollaborationMode(void)::property;
}

uint64_t mlcore::PlaylistPropertyCloudVersionHash(mlcore *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&mlcore::PlaylistPropertyCloudVersionHash(void)::once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&mlcore::PlaylistPropertyCloudVersionHash(void)::once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::PlaylistPropertyCloudVersionHash(void)::$_0 &&>>);
  }
  return mlcore::PlaylistPropertyCloudVersionHash(void)::property;
}

uint64_t mlcore::PlaylistPropertyIsCollaborative(mlcore *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&mlcore::PlaylistPropertyIsCollaborative(void)::once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&mlcore::PlaylistPropertyIsCollaborative(void)::once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::PlaylistPropertyIsCollaborative(void)::$_0 &&>>);
  }
  return mlcore::PlaylistPropertyIsCollaborative(void)::property;
}

uint64_t mlcore::ItemPropertyCloudAssetAvailable(mlcore *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&mlcore::ItemPropertyCloudAssetAvailable(void)::once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&mlcore::ItemPropertyCloudAssetAvailable(void)::once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyCloudAssetAvailable(void)::$_0 &&>>);
  }
  return mlcore::ItemPropertyCloudAssetAvailable(void)::property;
}

uint64_t mlcore::ItemPropertyHLSAudioCapability(mlcore *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&mlcore::ItemPropertyHLSAudioCapability(void)::once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&mlcore::ItemPropertyHLSAudioCapability(void)::once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyHLSAudioCapability(void)::$_0 &&>>);
  }
  return mlcore::ItemPropertyHLSAudioCapability(void)::property;
}

uint64_t mlcore::ItemPropertyExcludeFromShuffle(mlcore *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&mlcore::ItemPropertyExcludeFromShuffle(void)::once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&mlcore::ItemPropertyExcludeFromShuffle(void)::once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyExcludeFromShuffle(void)::$_0 &&>>);
  }
  return mlcore::ItemPropertyExcludeFromShuffle(void)::property;
}

uint64_t mlcore::PlaylistPropertyCloudIsPublic(mlcore *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&mlcore::PlaylistPropertyCloudIsPublic(void)::once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&mlcore::PlaylistPropertyCloudIsPublic(void)::once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::PlaylistPropertyCloudIsPublic(void)::$_0 &&>>);
  }
  return mlcore::PlaylistPropertyCloudIsPublic(void)::property;
}

uint64_t mlcore::PlaylistItemPropertyPosition(mlcore *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&mlcore::PlaylistItemPropertyPosition(void)::once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&mlcore::PlaylistItemPropertyPosition(void)::once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::PlaylistItemPropertyPosition(void)::$_0 &&>>);
  }
  return mlcore::PlaylistItemPropertyPosition(void)::property;
}

uint64_t mlcore::ItemPropertyStoreCloudStatus(mlcore *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&mlcore::ItemPropertyStoreCloudStatus(void)::once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&mlcore::ItemPropertyStoreCloudStatus(void)::once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyStoreCloudStatus(void)::$_0 &&>>);
  }
  return mlcore::ItemPropertyStoreCloudStatus(void)::property;
}

uint64_t mlcore::PlaylistPropertyLikedState(mlcore *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&mlcore::PlaylistPropertyLikedState(void)::once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&mlcore::PlaylistPropertyLikedState(void)::once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::PlaylistPropertyLikedState(void)::$_0 &&>>);
  }
  return mlcore::PlaylistPropertyLikedState(void)::property;
}

uint64_t mlcore::ItemArtistPropertyHasName(mlcore *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&mlcore::ItemArtistPropertyHasName(void)::once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&mlcore::ItemArtistPropertyHasName(void)::once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemArtistPropertyHasName(void)::$_0 &&>>);
  }
  return mlcore::ItemArtistPropertyHasName(void)::property;
}

uint64_t mlcore::ItemPropertyEpisodeType(mlcore *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&mlcore::ItemPropertyEpisodeType(void)::once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&mlcore::ItemPropertyEpisodeType(void)::once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyEpisodeType(void)::$_0 &&>>);
  }
  return mlcore::ItemPropertyEpisodeType(void)::property;
}

uint64_t mlcore::AlbumPropertyLikedState(mlcore *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&mlcore::AlbumPropertyLikedState(void)::once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&mlcore::AlbumPropertyLikedState(void)::once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::AlbumPropertyLikedState(void)::$_0 &&>>);
  }
  return mlcore::AlbumPropertyLikedState(void)::property;
}

uint64_t mlcore::ItemPropertyUserRating(mlcore *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&mlcore::ItemPropertyUserRating(void)::once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&mlcore::ItemPropertyUserRating(void)::once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyUserRating(void)::$_0 &&>>);
  }
  return mlcore::ItemPropertyUserRating(void)::property;
}

uint64_t mlcore::ItemPropertyLikedState(mlcore *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&mlcore::ItemPropertyLikedState(void)::once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&mlcore::ItemPropertyLikedState(void)::once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyLikedState(void)::$_0 &&>>);
  }
  return mlcore::ItemPropertyLikedState(void)::property;
}

uint64_t mlcore::ItemArtistPropertyName(mlcore *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&mlcore::ItemArtistPropertyName(void)::once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&mlcore::ItemArtistPropertyName(void)::once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemArtistPropertyName(void)::$_0 &&>>);
  }
  return mlcore::ItemArtistPropertyName(void)::property;
}

uint64_t mlcore::ItemPropertyIsVideo(mlcore *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&mlcore::ItemPropertyIsVideo(void)::once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&mlcore::ItemPropertyIsVideo(void)::once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyIsVideo(void)::$_0 &&>>);
  }
  return mlcore::ItemPropertyIsVideo(void)::property;
}

uint64_t mlcore::PersonPropertyName(mlcore *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&mlcore::PersonPropertyName(void)::once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&mlcore::PersonPropertyName(void)::once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::PersonPropertyName(void)::$_0 &&>>);
  }
  return mlcore::PersonPropertyName(void)::property;
}

uint64_t mlcore::AlbumPropertyTitle(mlcore *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&mlcore::AlbumPropertyTitle(void)::once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&mlcore::AlbumPropertyTitle(void)::once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::AlbumPropertyTitle(void)::$_0 &&>>);
  }
  return mlcore::AlbumPropertyTitle(void)::property;
}

uint64_t mlcore::AlbumPropertyYear(mlcore *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&mlcore::AlbumPropertyYear(void)::once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&mlcore::AlbumPropertyYear(void)::once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::AlbumPropertyYear(void)::$_0 &&>>);
  }
  return mlcore::AlbumPropertyYear(void)::property;
}

uint64_t mediaplatform::Singleton<mlcore::ItemExtraTable>::sharedInstance()
{
  unsigned __int8 v0;
  uint64_t *v2;

  if ((v0 & 1) == 0
  {
    v2 = (uint64_t *)operator new();
    _ZNSt3__115allocate_sharedB8ne180100IN6mlcore14ItemExtraTableENS_9allocatorIS2_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(v2);
    mediaplatform::Singleton<mlcore::ItemExtraTable>::sharedInstance(void)::_sharedInstance = (uint64_t)v2;
  }
  return mediaplatform::Singleton<mlcore::ItemExtraTable>::sharedInstance(void)::_sharedInstance;
}

void sub_20A68B4F8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x20BD27AFC](v1, 0x20C40A4A59CD2);
  _Unwind_Resume(a1);
}

mlcore::AlbumTable *mlcore::AlbumTable::AlbumTable(mlcore::AlbumTable *this)
{
  void *v3[2];
  char v4;
  _QWORD v5[3];
  char v6;
  void *v7[2];
  char v8;
  void *v9[2];
  char v10;
  _BYTE v11[64];
  void *v12[2];
  char v13;
  _QWORD v14[3];
  char v15;
  void *v16[2];
  char v17;
  _QWORD v18[3];
  char v19;
  void *v20[2];
  char v21;
  _QWORD v22[3];
  char v23;
  void *v24[2];
  char v25;
  _QWORD v26[3];
  char v27;
  void *v28[2];
  char v29;
  _QWORD v30[3];
  char v31;
  void *v32[2];
  char v33;
  _QWORD v34[3];
  char v35;
  void *v36[2];
  char v37;
  _BYTE v38[80];
  void *v39[2];
  char v40;
  _QWORD v41[3];
  char v42;
  void *v43[2];
  char v44;
  _QWORD v45[3];
  char v46;
  void *v47[2];
  char v48;
  _QWORD v49[3];
  char v50;
  void *v51[2];
  char v52;
  _QWORD v53[3];
  char v54;
  void *v55[2];
  char v56;
  _QWORD v57[3];
  char v58;
  void *v59[2];
  char v60;
  _QWORD v61[3];
  char v62;
  void *v63[2];
  char v64;
  _BYTE v65[64];
  void *v66[2];
  char v67;
  _QWORD v68[3];
  char v69;
  void *v70[2];
  char v71;
  _QWORD v72[3];
  char v73;
  void *v74[2];
  char v75;
  _QWORD v76[3];
  char v77;
  void *v78[2];
  char v79;
  _QWORD v80[3];
  char v81;
  void *v82[2];
  char v83;
  _BYTE v84[80];
  void *v85[2];
  char v86;
  _QWORD v87[3];
  char v88;
  void *v89[2];
  char v90;
  _QWORD v91[3];
  char v92;
  void *v93[2];
  char v94;
  _BYTE v95[64];
  void *v96[2];
  char v97;
  void *v98[2];
  char v99;
  _BYTE v100[64];
  void *v101[2];
  char v102;
  _QWORD v103[3];
  char v104;
  void *v105[2];
  char v106;

  std::string::basic_string[abi:ne180100]<0>(v105, "album");
  std::string::basic_string[abi:ne180100]<0>(v101, "album_pid");
  mlcore::MediaColumn<long long>::MediaColumn((uint64_t)v103, (uint64_t)v101, 1);
  std::string::basic_string[abi:ne180100]<0>(v98, "album");
  std::string::basic_string[abi:ne180100]<0>(v96, "");
  mlcore::MediaColumn<std::string>::MediaColumn((uint64_t)v100, (uint64_t)v98, (uint64_t)v96);
  std::string::basic_string[abi:ne180100]<0>(v93, "sort_album");
  mlcore::MediaColumn<std::string>::MediaColumn((uint64_t)v95, (uint64_t)v93, 0);
  std::string::basic_string[abi:ne180100]<0>(v89, "album_artist_pid");
  mlcore::MediaColumn<long long>::MediaColumn((uint64_t)v91, (uint64_t)v89);
  std::string::basic_string[abi:ne180100]<0>(v85, "representative_item_pid");
  mlcore::MediaColumn<long long>::MediaColumn((uint64_t)v87, (uint64_t)v85);
  std::string::basic_string[abi:ne180100]<0>(v82, "grouping_key");
  mlcore::MediaColumn<mediaplatform::Data>::MediaColumn((uint64_t)v84, (uint64_t)v82);
  std::string::basic_string[abi:ne180100]<0>(v78, "cloud_status");
  mlcore::MediaColumn<int>::MediaColumn((uint64_t)v80, (uint64_t)v78, 0);
  std::string::basic_string[abi:ne180100]<0>(v74, "user_rating");
  mlcore::MediaColumn<int>::MediaColumn((uint64_t)v76, (uint64_t)v74, 0);
  std::string::basic_string[abi:ne180100]<0>(v70, "liked_state");
  mlcore::MediaColumn<int>::MediaColumn((uint64_t)v72, (uint64_t)v70, 0);
  std::string::basic_string[abi:ne180100]<0>(v66, "all_compilations");
  mlcore::MediaColumn<int>::MediaColumn((uint64_t)v68, (uint64_t)v66, 0);
  std::string::basic_string[abi:ne180100]<0>(v63, "feed_url");
  mlcore::MediaColumn<std::string>::MediaColumn((uint64_t)v65, (uint64_t)v63, 0);
  std::string::basic_string[abi:ne180100]<0>(v59, "season_number");
  mlcore::MediaColumn<int>::MediaColumn((uint64_t)v61, (uint64_t)v59, 0);
  std::string::basic_string[abi:ne180100]<0>(v55, "album_year");
  mlcore::MediaColumn<int>::MediaColumn((uint64_t)v57, (uint64_t)v55, 0);
  std::string::basic_string[abi:ne180100]<0>(v51, "keep_local");
  mlcore::MediaColumn<int>::MediaColumn((uint64_t)v53, (uint64_t)v51, 0);
  std::string::basic_string[abi:ne180100]<0>(v47, "keep_local_status");
  mlcore::MediaColumn<int>::MediaColumn((uint64_t)v49, (uint64_t)v47, 0);
  std::string::basic_string[abi:ne180100]<0>(v43, "keep_local_status_reason");
  mlcore::MediaColumn<int>::MediaColumn((uint64_t)v45, (uint64_t)v43, 0);
  std::string::basic_string[abi:ne180100]<0>(v39, "keep_local_constraints");
  mlcore::MediaColumn<int>::MediaColumn((uint64_t)v41, (uint64_t)v39, 0);
  std::string::basic_string[abi:ne180100]<0>(v36, "app_data");
  mlcore::MediaColumn<mediaplatform::Data>::MediaColumn((uint64_t)v38, (uint64_t)v36);
  std::string::basic_string[abi:ne180100]<0>(v32, "contains_classical_work");
  mlcore::MediaColumn<int>::MediaColumn((uint64_t)v34, (uint64_t)v32, 0);
  std::string::basic_string[abi:ne180100]<0>(v28, "date_played_local");
  mlcore::MediaColumn<long long>::MediaColumn((uint64_t)v30, (uint64_t)v28);
  std::string::basic_string[abi:ne180100]<0>(v24, "user_rating_is_derived");
  mlcore::MediaColumn<long long>::MediaColumn((uint64_t)v26, (uint64_t)v24);
  std::string::basic_string[abi:ne180100]<0>(v20, "sync_id");
  mlcore::MediaColumn<long long>::MediaColumn((uint64_t)v22, (uint64_t)v20);
  std::string::basic_string[abi:ne180100]<0>(v16, "classical_experience_available");
  mlcore::MediaColumn<int>::MediaColumn((uint64_t)v18, (uint64_t)v16, 0);
  std::string::basic_string[abi:ne180100]<0>(v12, "store_id");
  mlcore::MediaColumn<long long>::MediaColumn((uint64_t)v14, (uint64_t)v12);
  std::string::basic_string[abi:ne180100]<0>(v9, "cloud_library_id");
  std::string::basic_string[abi:ne180100]<0>(v7, "");
  mlcore::MediaColumn<std::string>::MediaColumn((uint64_t)v11, (uint64_t)v9, (uint64_t)v7);
  std::string::basic_string[abi:ne180100]<0>(v3, "liked_state_changed_date");
  mlcore::MediaColumn<long long>::MediaColumn((uint64_t)v5, (uint64_t)v3);
  mlcore::MediaTable<long long,std::string,std::string,long long,long long,mediaplatform::Data,int,int,int,int,std::string,int,int,int,int,int,int,mediaplatform::Data,int,long long,long long,long long,int,long long,std::string,long long>::MediaTable((uint64_t)this, (uint64_t)v105, (uint64_t)v103, (uint64_t)v100, (uint64_t)v95, (uint64_t)v91, (uint64_t)v87, (uint64_t)v84, (uint64_t)v80, (uint64_t)v76, (uint64_t)v72, (uint64_t)v68, (uint64_t)v65, (uint64_t)v61, (uint64_t)v57, (uint64_t)v53, (uint64_t)v49, (uint64_t)v45, (uint64_t)v41,
    (uint64_t)v38,
    (uint64_t)v34,
    (uint64_t)v30,
    (uint64_t)v26,
    (uint64_t)v22,
    (uint64_t)v18,
    (uint64_t)v14,
    (uint64_t)v11,
    (uint64_t)v5);
  v5[0] = off_24C335D90;
  if (v6 < 0)
    operator delete((void *)v5[1]);
  if (v4 < 0)
    operator delete(v3[0]);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)v11);
  if (v8 < 0)
    operator delete(v7[0]);
  if (v10 < 0)
    operator delete(v9[0]);
  v14[0] = off_24C335D90;
  if (v15 < 0)
    operator delete((void *)v14[1]);
  if (v13 < 0)
    operator delete(v12[0]);
  v18[0] = off_24C335D90;
  if (v19 < 0)
    operator delete((void *)v18[1]);
  if (v17 < 0)
    operator delete(v16[0]);
  v22[0] = off_24C335D90;
  if (v23 < 0)
    operator delete((void *)v22[1]);
  if (v21 < 0)
    operator delete(v20[0]);
  v26[0] = off_24C335D90;
  if (v27 < 0)
    operator delete((void *)v26[1]);
  if (v25 < 0)
    operator delete(v24[0]);
  v30[0] = off_24C335D90;
  if (v31 < 0)
    operator delete((void *)v30[1]);
  if (v29 < 0)
    operator delete(v28[0]);
  v34[0] = off_24C335D90;
  if (v35 < 0)
    operator delete((void *)v34[1]);
  if (v33 < 0)
    operator delete(v32[0]);
  mediaplatform::DatabaseColumn<mediaplatform::Data>::~DatabaseColumn((uint64_t)v38);
  if (v37 < 0)
    operator delete(v36[0]);
  v41[0] = off_24C335D90;
  if (v42 < 0)
    operator delete((void *)v41[1]);
  if (v40 < 0)
    operator delete(v39[0]);
  v45[0] = off_24C335D90;
  if (v46 < 0)
    operator delete((void *)v45[1]);
  if (v44 < 0)
    operator delete(v43[0]);
  v49[0] = off_24C335D90;
  if (v50 < 0)
    operator delete((void *)v49[1]);
  if (v48 < 0)
    operator delete(v47[0]);
  v53[0] = off_24C335D90;
  if (v54 < 0)
    operator delete((void *)v53[1]);
  if (v52 < 0)
    operator delete(v51[0]);
  v57[0] = off_24C335D90;
  if (v58 < 0)
    operator delete((void *)v57[1]);
  if (v56 < 0)
    operator delete(v55[0]);
  v61[0] = off_24C335D90;
  if (v62 < 0)
    operator delete((void *)v61[1]);
  if (v60 < 0)
    operator delete(v59[0]);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)v65);
  if (v64 < 0)
    operator delete(v63[0]);
  v68[0] = off_24C335D90;
  if (v69 < 0)
    operator delete((void *)v68[1]);
  if (v67 < 0)
    operator delete(v66[0]);
  v72[0] = off_24C335D90;
  if (v73 < 0)
    operator delete((void *)v72[1]);
  if (v71 < 0)
    operator delete(v70[0]);
  v76[0] = off_24C335D90;
  if (v77 < 0)
    operator delete((void *)v76[1]);
  if (v75 < 0)
    operator delete(v74[0]);
  v80[0] = off_24C335D90;
  if (v81 < 0)
    operator delete((void *)v80[1]);
  if (v79 < 0)
    operator delete(v78[0]);
  mediaplatform::DatabaseColumn<mediaplatform::Data>::~DatabaseColumn((uint64_t)v84);
  if (v83 < 0)
    operator delete(v82[0]);
  v87[0] = off_24C335D90;
  if (v88 < 0)
    operator delete((void *)v87[1]);
  if (v86 < 0)
    operator delete(v85[0]);
  v91[0] = off_24C335D90;
  if (v92 < 0)
    operator delete((void *)v91[1]);
  if (v90 < 0)
    operator delete(v89[0]);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)v95);
  if (v94 < 0)
    operator delete(v93[0]);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)v100);
  if (v97 < 0)
    operator delete(v96[0]);
  if (v99 < 0)
    operator delete(v98[0]);
  v103[0] = off_24C335D90;
  if (v104 < 0)
    operator delete((void *)v103[1]);
  if (v102 < 0)
    operator delete(v101[0]);
  if (v106 < 0)
    operator delete(v105[0]);
  *(_QWORD *)this = off_24C335DB0;
  return this;
}

void sub_20A68BCEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,void *__p,uint64_t a38,int a39,__int16 a40,char a41,char a42,uint64_t a43,uint64_t a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50,void *a51,uint64_t a52,int a53,__int16 a54,char a55,char a56,char a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  void *a65;
  char a70;
  void (**a71)(mediaplatform::DatabaseColumnBase *__hidden);
  void *a72;
  char a73;
  void *a74;
  char a75;
  void (**a76)(mediaplatform::DatabaseColumnBase *__hidden);
  void *a77;
  char a78;
  void *a79;
  uint64_t v79;

  if (a42 < 0)
    operator delete(__p);
  if (a35 < 0)
    operator delete(a30);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&a57);
  if (a50 < 0)
    operator delete(a45);
  if (a56 < 0)
    operator delete(a51);
  a71 = off_24C335D90;
  if (a73 < 0)
    operator delete(a72);
  if (a70 < 0)
    operator delete(a65);
  a76 = off_24C335D90;
  if (a78 < 0)
    operator delete(a77);
  if (a75 < 0)
    operator delete(a74);
  STACK[0x208] = (unint64_t)off_24C335D90;
  if (SLOBYTE(STACK[0x227]) < 0)
    operator delete((void *)STACK[0x210]);
  if (SLOBYTE(STACK[0x207]) < 0)
    operator delete(a79);
  STACK[0x250] = (unint64_t)off_24C335D90;
  if (SLOBYTE(STACK[0x26F]) < 0)
    operator delete((void *)STACK[0x258]);
  if (SLOBYTE(STACK[0x24F]) < 0)
    operator delete((void *)STACK[0x238]);
  STACK[0x298] = (unint64_t)off_24C335D90;
  if (SLOBYTE(STACK[0x2B7]) < 0)
    operator delete((void *)STACK[0x2A0]);
  if (SLOBYTE(STACK[0x297]) < 0)
    operator delete((void *)STACK[0x280]);
  STACK[0x2E0] = (unint64_t)off_24C335D90;
  if (SLOBYTE(STACK[0x2FF]) < 0)
    operator delete((void *)STACK[0x2E8]);
  if (SLOBYTE(STACK[0x2DF]) < 0)
    operator delete((void *)STACK[0x2C8]);
  mediaplatform::DatabaseColumn<mediaplatform::Data>::~DatabaseColumn((uint64_t)&STACK[0x328]);
  if (SLOBYTE(STACK[0x327]) < 0)
    operator delete((void *)STACK[0x310]);
  STACK[0x390] = (unint64_t)off_24C335D90;
  if (SLOBYTE(STACK[0x3AF]) < 0)
    operator delete((void *)STACK[0x398]);
  if (SLOBYTE(STACK[0x38F]) < 0)
    operator delete((void *)STACK[0x378]);
  STACK[0x3D8] = (unint64_t)off_24C335D90;
  if (SLOBYTE(STACK[0x3F7]) < 0)
    operator delete((void *)STACK[0x3E0]);
  if (SLOBYTE(STACK[0x3D7]) < 0)
    operator delete((void *)STACK[0x3C0]);
  STACK[0x420] = (unint64_t)off_24C335D90;
  if (SLOBYTE(STACK[0x43F]) < 0)
    operator delete((void *)STACK[0x428]);
  if (SLOBYTE(STACK[0x41F]) < 0)
    operator delete((void *)STACK[0x408]);
  STACK[0x468] = (unint64_t)off_24C335D90;
  if (SLOBYTE(STACK[0x487]) < 0)
    operator delete((void *)STACK[0x470]);
  if (SLOBYTE(STACK[0x467]) < 0)
    operator delete((void *)STACK[0x450]);
  STACK[0x4B0] = (unint64_t)off_24C335D90;
  if (SLOBYTE(STACK[0x4CF]) < 0)
    operator delete((void *)STACK[0x4B8]);
  if (SLOBYTE(STACK[0x4AF]) < 0)
    operator delete((void *)STACK[0x498]);
  STACK[0x4F8] = (unint64_t)off_24C335D90;
  if (SLOBYTE(STACK[0x517]) < 0)
    operator delete((void *)STACK[0x500]);
  if (SLOBYTE(STACK[0x4F7]) < 0)
    operator delete((void *)STACK[0x4E0]);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&STACK[0x540]);
  if (SLOBYTE(STACK[0x53F]) < 0)
    operator delete((void *)STACK[0x528]);
  STACK[0x598] = (unint64_t)off_24C335D90;
  if (SLOBYTE(STACK[0x5B7]) < 0)
    operator delete((void *)STACK[0x5A0]);
  if (SLOBYTE(STACK[0x597]) < 0)
    operator delete((void *)STACK[0x580]);
  STACK[0x5E0] = (unint64_t)off_24C335D90;
  if (SLOBYTE(STACK[0x5FF]) < 0)
    operator delete((void *)STACK[0x5E8]);
  if (SLOBYTE(STACK[0x5DF]) < 0)
    operator delete((void *)STACK[0x5C8]);
  STACK[0x628] = (unint64_t)off_24C335D90;
  if (SLOBYTE(STACK[0x647]) < 0)
    operator delete((void *)STACK[0x630]);
  if (SLOBYTE(STACK[0x627]) < 0)
    operator delete((void *)STACK[0x610]);
  STACK[0x670] = (unint64_t)off_24C335D90;
  if (SLOBYTE(STACK[0x68F]) < 0)
    operator delete((void *)STACK[0x678]);
  if (SLOBYTE(STACK[0x66F]) < 0)
    operator delete((void *)STACK[0x658]);
  mediaplatform::DatabaseColumn<mediaplatform::Data>::~DatabaseColumn((uint64_t)&STACK[0x6B8]);
  if (SLOBYTE(STACK[0x6B7]) < 0)
    operator delete((void *)STACK[0x6A0]);
  STACK[0x720] = (unint64_t)off_24C335D90;
  if (SLOBYTE(STACK[0x73F]) < 0)
    operator delete((void *)STACK[0x728]);
  if (SLOBYTE(STACK[0x71F]) < 0)
    operator delete((void *)STACK[0x708]);
  STACK[0x768] = (unint64_t)off_24C335D90;
  if (SLOBYTE(STACK[0x787]) < 0)
    operator delete((void *)STACK[0x770]);
  if (SLOBYTE(STACK[0x767]) < 0)
    operator delete((void *)STACK[0x750]);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&STACK[0x7B0]);
  if (SLOBYTE(STACK[0x7AF]) < 0)
    operator delete((void *)STACK[0x798]);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(v79 - 192);
  if (*(char *)(v79 - 217) < 0)
    operator delete(*(void **)(v79 - 240));
  if (*(char *)(v79 - 193) < 0)
    operator delete(*(void **)(v79 - 216));
  *(_QWORD *)(v79 - 104) = off_24C335D90;
  if (*(char *)(v79 - 73) < 0)
    operator delete(*(void **)(v79 - 96));
  if (*(char *)(v79 - 105) < 0)
    operator delete(*(void **)(v79 - 128));
  if (*(char *)(v79 - 33) < 0)
    operator delete(*(void **)(v79 - 56));
  _Unwind_Resume(a1);
}

void sub_20A68C168()
{
  JUMPOUT(0x20A68BDDCLL);
}

void sub_20A68C170()
{
  JUMPOUT(0x20A68BDF8);
}

void sub_20A68C178()
{
  JUMPOUT(0x20A68BE08);
}

void sub_20A68C180()
{
  JUMPOUT(0x20A68BE24);
}

void sub_20A68C188()
{
  JUMPOUT(0x20A68BE34);
}

void sub_20A68C190()
{
  JUMPOUT(0x20A68BE50);
}

void sub_20A68C198()
{
  JUMPOUT(0x20A68BE60);
}

void sub_20A68C1A0()
{
  JUMPOUT(0x20A68BE7CLL);
}

void sub_20A68C1A8()
{
  JUMPOUT(0x20A68BE8CLL);
}

void sub_20A68C1B0()
{
  JUMPOUT(0x20A68BE94);
}

void sub_20A68C1B8()
{
  JUMPOUT(0x20A68BEA4);
}

void sub_20A68C1C0()
{
  JUMPOUT(0x20A68BEC0);
}

void sub_20A68C1C8()
{
  JUMPOUT(0x20A68BED0);
}

void sub_20A68C1D0()
{
  JUMPOUT(0x20A68BEECLL);
}

void sub_20A68C1D8()
{
  JUMPOUT(0x20A68BEFCLL);
}

void sub_20A68C1E0()
{
  JUMPOUT(0x20A68BF18);
}

void sub_20A68C1E8()
{
  JUMPOUT(0x20A68BF28);
}

void sub_20A68C1F0()
{
  JUMPOUT(0x20A68BF44);
}

void sub_20A68C1F8()
{
  JUMPOUT(0x20A68BF54);
}

void sub_20A68C200()
{
  JUMPOUT(0x20A68BF70);
}

void sub_20A68C208()
{
  JUMPOUT(0x20A68BF80);
}

void sub_20A68C210()
{
  JUMPOUT(0x20A68BF9CLL);
}

void sub_20A68C218()
{
  JUMPOUT(0x20A68BFACLL);
}

void sub_20A68C220()
{
  JUMPOUT(0x20A68BFB4);
}

void sub_20A68C228()
{
  JUMPOUT(0x20A68BFC4);
}

void sub_20A68C230()
{
  JUMPOUT(0x20A68BFE0);
}

void sub_20A68C238()
{
  JUMPOUT(0x20A68BFF0);
}

void sub_20A68C240()
{
  JUMPOUT(0x20A68C00CLL);
}

void sub_20A68C248()
{
  JUMPOUT(0x20A68C01CLL);
}

void sub_20A68C250()
{
  JUMPOUT(0x20A68C038);
}

void sub_20A68C258()
{
  JUMPOUT(0x20A68C048);
}

void sub_20A68C260()
{
  JUMPOUT(0x20A68C064);
}

void sub_20A68C268()
{
  JUMPOUT(0x20A68C074);
}

void sub_20A68C270()
{
  JUMPOUT(0x20A68C07CLL);
}

void sub_20A68C278()
{
  JUMPOUT(0x20A68C08CLL);
}

void sub_20A68C280()
{
  JUMPOUT(0x20A68C0A8);
}

void sub_20A68C288()
{
  JUMPOUT(0x20A68C0B8);
}

void sub_20A68C290()
{
  JUMPOUT(0x20A68C0D4);
}

void sub_20A68C298()
{
  JUMPOUT(0x20A68C0E4);
}

void sub_20A68C2A0()
{
  JUMPOUT(0x20A68C0ECLL);
}

void sub_20A68C2A8()
{
  JUMPOUT(0x20A68C0FCLL);
}

void sub_20A68C2B0()
{
  JUMPOUT(0x20A68C104);
}

void sub_20A68C2B8()
{
  JUMPOUT(0x20A68C114);
}

void sub_20A68C2C0()
{
  JUMPOUT(0x20A68C124);
}

void sub_20A68C2C8()
{
  JUMPOUT(0x20A68C140);
}

void sub_20A68C2D0()
{
  JUMPOUT(0x20A68C150);
}

mlcore::ItemArtistTable *mlcore::ItemArtistTable::ItemArtistTable(mlcore::ItemArtistTable *this)
{
  int v2;
  const void *v3;
  size_t v4;
  void *v5;
  const void *v6;
  size_t v7;
  void *v8;
  std::string *v9;
  const void *v10;
  size_t v11;
  void *v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  const void *v20;
  size_t v21;
  void *v22;
  int v23;
  int v24;
  std::string *v25;
  std::string *v26;
  std::string *v27;
  std::string *v28;
  char v29;
  int v31;
  int v32;
  uint64_t v33;
  int v34;
  int v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  int v43;
  int v44;
  int v45;
  uint64_t v46;
  int v47;
  int v48;
  int v49;
  void *v50[2];
  char v51;
  void (**v52)(mediaplatform::DatabaseColumnBase *__hidden);
  std::string v53;
  int v54;
  uint64_t v55;
  void *v56[2];
  char v57;
  void (**v58)(mediaplatform::DatabaseColumnBase *__hidden);
  std::string v59;
  int v60;
  uint64_t v61;
  int v62;
  void *v63[2];
  char v64;
  char v65[8];
  std::string v66;
  int v67;
  char v68;
  uint64_t v69;
  size_t v70;
  const void *v71;
  void *v72[2];
  char v73;
  void (**v74)(mediaplatform::DatabaseColumnBase *__hidden);
  std::string v75;
  int v76;
  uint64_t v77;
  void *v78[2];
  char v79;
  void (**v80)(mediaplatform::DatabaseColumnBase *__hidden);
  std::string v81;
  int v82;
  uint64_t v83;
  void *v84[2];
  char v85;
  void (**v86)(mediaplatform::DatabaseColumnBase *__hidden);
  std::string v87;
  int v88;
  uint64_t v89;
  void *v90[2];
  char v91;
  void (**v92)(mediaplatform::DatabaseColumnBase *__hidden);
  std::string v93;
  int v94;
  uint64_t v95;
  void *v96[2];
  char v97;
  void (**v98)(mediaplatform::DatabaseColumnBase *__hidden);
  std::string v99;
  int v100;
  uint64_t v101;
  int v102;
  void *v103[2];
  char v104;
  void (**v105)(mediaplatform::DatabaseColumnBase *__hidden);
  std::string v106;
  int v107;
  uint64_t v108;
  int v109;
  void *v110[2];
  char v111;
  void (**v112)(mediaplatform::DatabaseColumnBase *__hidden);
  std::string v113;
  int v114;
  uint64_t v115;
  void *v116[2];
  char v117;
  char v118[8];
  std::string v119;
  int v120;
  char v121;
  size_t v122;
  const void *v123;
  void *v124[2];
  char v125;
  char v126[8];
  std::string v127;
  int v128;
  char v129;
  std::string v130;
  void *v131[2];
  char v132;
  void *v133[2];
  char v134;
  char v135[8];
  std::string v136;
  int v137;
  char v138;
  std::string v139;
  void *v140[2];
  char v141;
  char v142[8];
  std::string v143;
  int v144;
  char v145;
  std::string v146;
  void *v147[2];
  char v148;
  void *v149[2];
  char v150;
  char v151[8];
  std::string v152;
  int v153;
  char v154;
  std::string v155;
  void *v156[2];
  char v157;
  void (**v158)(mediaplatform::DatabaseColumnBase *__hidden);
  std::string v159;
  int v160;
  uint64_t v161;
  int v162;
  std::string __s;
  uint64_t (**v164)();
  std::string v165;
  int v166;
  uint64_t v167;
  uint64_t (**v168)();
  std::string v169;
  int v170;
  uint64_t v171;
  int v172;
  uint64_t (**v173)();
  std::string v174;
  int v175;
  char v176;
  void (**v177)(mediaplatform::Data *__hidden);
  size_t v178;
  size_t v179;
  const void *v180;
  char v181;
  uint64_t (**v182)();
  std::string v183;
  int v184;
  uint64_t v185;
  uint64_t (**v186)();
  std::string v187;
  int v188;
  uint64_t v189;
  uint64_t (**v190)();
  std::string v191;
  int v192;
  uint64_t v193;
  uint64_t (**v194)();
  std::string v195;
  int v196;
  uint64_t v197;
  uint64_t (**v198)();
  std::string v199;
  int v200;
  uint64_t v201;
  int v202;
  uint64_t (**v203)();
  std::string v204;
  int v205;
  uint64_t v206;
  int v207;
  uint64_t (**v208)();
  std::string v209;
  int v210;
  uint64_t v211;
  uint64_t (**v212)();
  std::string v213;
  int v214;
  char v215;
  void (**v216)(mediaplatform::Data *__hidden);
  size_t v217;
  size_t v218;
  const void *v219;
  char v220;
  uint64_t (**v221)();
  std::string v222;
  int v223;
  char v224;
  std::string v225;
  uint64_t (**v226)();
  std::string v227;
  int v228;
  char v229;
  std::string v230;
  uint64_t (**v231)();
  std::string v232;
  int v233;
  char v234;
  std::string v235;
  uint64_t (**v236)();
  std::string v237;
  int v238;
  char v239;
  std::string v240;
  uint64_t (**v241)();
  std::string v242;
  int v243;
  uint64_t v244;
  int v245;
  std::string v246;
  uint64_t (**v247)();
  std::string __p;
  int v249;
  uint64_t v250;
  uint64_t (**v251)();
  std::string v252;
  int v253;
  uint64_t v254;
  int v255;
  uint64_t (**v256)();
  std::string v257;
  int v258;
  char v259;
  void (**v260)(mediaplatform::Data *__hidden);
  size_t v261;
  size_t v262;
  void *v263;
  char v264;
  uint64_t (**v265)();
  std::string v266;
  int v267;
  uint64_t v268;
  uint64_t (**v269)();
  std::string v270;
  int v271;
  uint64_t v272;
  uint64_t (**v273)();
  std::string v274;
  int v275;
  uint64_t v276;
  uint64_t (**v277)();
  std::string v278;
  int v279;
  uint64_t v280;
  uint64_t (**v281)();
  std::string v282;
  int v283;
  uint64_t v284;
  int v285;
  uint64_t (**v286)();
  std::string v287;
  int v288;
  uint64_t v289;
  int v290;
  uint64_t (**v291)();
  std::string v292;
  int v293;
  uint64_t v294;
  uint64_t (**v295)();
  std::string v296;
  int v297;
  char v298;
  void (**v299)(mediaplatform::Data *__hidden);
  size_t v300;
  size_t v301;
  void *v302;
  char v303;
  uint64_t (**v304)();
  std::string v305;
  int v306;
  char v307;
  std::string v308;
  uint64_t (**v309)();
  std::string v310;
  int v311;
  char v312;
  std::string v313;
  uint64_t (**v314)();
  std::string v315;
  int v316;
  char v317;
  std::string v318;
  uint64_t (**v319)();
  std::string v320;
  int v321;
  char v322;
  std::string v323;
  uint64_t (**v324)();
  std::string v325;
  int v326;
  uint64_t v327;
  int v328;

  std::string::basic_string[abi:ne180100]<0>(&__s, "item_artist");
  std::string::basic_string[abi:ne180100]<0>(v156, "item_artist_pid");
  mlcore::MediaColumn<long long>::MediaColumn((uint64_t)&v158, (uint64_t)v156, 1);
  std::string::basic_string[abi:ne180100]<0>(v149, "item_artist");
  std::string::basic_string[abi:ne180100]<0>(v147, "");
  mlcore::MediaColumn<std::string>::MediaColumn((uint64_t)v151, (uint64_t)v149, (uint64_t)v147);
  std::string::basic_string[abi:ne180100]<0>(v140, "sort_item_artist");
  mlcore::MediaColumn<std::string>::MediaColumn((uint64_t)v142, (uint64_t)v140, 0);
  std::string::basic_string[abi:ne180100]<0>(v133, "series_name");
  std::string::basic_string[abi:ne180100]<0>(v131, "");
  mlcore::MediaColumn<std::string>::MediaColumn((uint64_t)v135, (uint64_t)v133, (uint64_t)v131);
  std::string::basic_string[abi:ne180100]<0>(v124, "sort_series_name");
  mlcore::MediaColumn<std::string>::MediaColumn((uint64_t)v126, (uint64_t)v124, 0);
  std::string::basic_string[abi:ne180100]<0>(v116, "grouping_key");
  mlcore::MediaColumn<mediaplatform::Data>::MediaColumn((uint64_t)v118, (uint64_t)v116);
  std::string::basic_string[abi:ne180100]<0>(v110, "cloud_status");
  mlcore::MediaColumn<int>::MediaColumn((uint64_t)&v112, (uint64_t)v110, 0);
  std::string::basic_string[abi:ne180100]<0>(v103, "store_id");
  mlcore::MediaColumn<long long>::MediaColumn((uint64_t)&v105, (uint64_t)v103);
  std::string::basic_string[abi:ne180100]<0>(v96, "representative_item_pid");
  mlcore::MediaColumn<long long>::MediaColumn((uint64_t)&v98, (uint64_t)v96);
  std::string::basic_string[abi:ne180100]<0>(v90, "keep_local");
  mlcore::MediaColumn<int>::MediaColumn((uint64_t)&v92, (uint64_t)v90, 0);
  std::string::basic_string[abi:ne180100]<0>(v84, "keep_local_status");
  mlcore::MediaColumn<int>::MediaColumn((uint64_t)&v86, (uint64_t)v84, 0);
  std::string::basic_string[abi:ne180100]<0>(v78, "keep_local_status_reason");
  mlcore::MediaColumn<int>::MediaColumn((uint64_t)&v80, (uint64_t)v78, 0);
  std::string::basic_string[abi:ne180100]<0>(v72, "keep_local_constraints");
  mlcore::MediaColumn<int>::MediaColumn((uint64_t)&v74, (uint64_t)v72, 0);
  std::string::basic_string[abi:ne180100]<0>(v63, "app_data");
  mlcore::MediaColumn<mediaplatform::Data>::MediaColumn((uint64_t)v65, (uint64_t)v63);
  std::string::basic_string[abi:ne180100]<0>(v56, "sync_id");
  mlcore::MediaColumn<long long>::MediaColumn((uint64_t)&v58, (uint64_t)v56);
  std::string::basic_string[abi:ne180100]<0>(v50, "classical_experience_available");
  mlcore::MediaColumn<int>::MediaColumn((uint64_t)&v52, (uint64_t)v50, 0);
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v246, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
  else
    v246 = __s;
  v241 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v159.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v242, v159.__r_.__value_.__l.__data_, v159.__r_.__value_.__l.__size_);
  else
    v242 = v159;
  v241 = off_24C335B18;
  v244 = v161;
  v2 = v160;
  v243 = v160;
  v245 = v162;
  v236 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v152.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v237, v152.__r_.__value_.__l.__data_, v152.__r_.__value_.__l.__size_);
  else
    v237 = v152;
  v238 = v153;
  v236 = &off_24C335AB8;
  v239 = v154;
  if (SHIBYTE(v155.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v240, v155.__r_.__value_.__l.__data_, v155.__r_.__value_.__l.__size_);
  else
    v240 = v155;
  v231 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v143.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v232, v143.__r_.__value_.__l.__data_, v143.__r_.__value_.__l.__size_);
  else
    v232 = v143;
  v233 = v144;
  v231 = &off_24C335AB8;
  v234 = v145;
  if (SHIBYTE(v146.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v235, v146.__r_.__value_.__l.__data_, v146.__r_.__value_.__l.__size_);
  else
    v235 = v146;
  v226 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v136.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v227, v136.__r_.__value_.__l.__data_, v136.__r_.__value_.__l.__size_);
  else
    v227 = v136;
  v228 = v137;
  v226 = &off_24C335AB8;
  v229 = v138;
  if (SHIBYTE(v139.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v230, v139.__r_.__value_.__l.__data_, v139.__r_.__value_.__l.__size_);
  else
    v230 = v139;
  v221 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v127.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v222, v127.__r_.__value_.__l.__data_, v127.__r_.__value_.__l.__size_);
  else
    v222 = v127;
  v223 = v128;
  v221 = &off_24C335AB8;
  v224 = v129;
  if (SHIBYTE(v130.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v225, v130.__r_.__value_.__l.__data_, v130.__r_.__value_.__l.__size_);
  else
    v225 = v130;
  v212 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v119.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v213, v119.__r_.__value_.__l.__data_, v119.__r_.__value_.__l.__size_);
  else
    v213 = v119;
  v214 = v120;
  v212 = &off_24C335A98;
  v215 = v121;
  v3 = v123;
  v4 = v122;
  v216 = &off_24C331510;
  v217 = v122;
  v218 = v122;
  if (v122)
    v5 = (void *)operator new[]();
  else
    v5 = 0;
  v219 = v5;
  v220 = 1;
  if (v3)
    memcpy(v5, v3, v4);
  else
    bzero(v5, v4);
  v208 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v113.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v209, v113.__r_.__value_.__l.__data_, v113.__r_.__value_.__l.__size_);
  else
    v209 = v113;
  v47 = v114;
  v210 = v114;
  v208 = off_24C335AF8;
  v46 = v115;
  v211 = v115;
  v203 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v106.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v204, v106.__r_.__value_.__l.__data_, v106.__r_.__value_.__l.__size_);
  else
    v204 = v106;
  v203 = off_24C335B18;
  v206 = v108;
  v45 = v107;
  v205 = v107;
  v207 = v109;
  v198 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v99.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v199, v99.__r_.__value_.__l.__data_, v99.__r_.__value_.__l.__size_);
  else
    v199 = v99;
  v198 = off_24C335B18;
  v201 = v101;
  v44 = v100;
  v200 = v100;
  v202 = v102;
  v194 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v93.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v195, v93.__r_.__value_.__l.__data_, v93.__r_.__value_.__l.__size_);
  else
    v195 = v93;
  v43 = v94;
  v196 = v94;
  v194 = off_24C335AF8;
  v42 = v95;
  v197 = v95;
  v190 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v87.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v191, v87.__r_.__value_.__l.__data_, v87.__r_.__value_.__l.__size_);
  else
    v191 = v87;
  v41 = v88;
  v192 = v88;
  v190 = off_24C335AF8;
  v40 = v89;
  v193 = v89;
  v186 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v81.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v187, v81.__r_.__value_.__l.__data_, v81.__r_.__value_.__l.__size_);
  else
    v187 = v81;
  v39 = v82;
  v188 = v82;
  v186 = off_24C335AF8;
  v38 = v83;
  v189 = v83;
  v182 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v75.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v183, v75.__r_.__value_.__l.__data_, v75.__r_.__value_.__l.__size_);
  else
    v183 = v75;
  v37 = v76;
  v184 = v76;
  v182 = off_24C335AF8;
  v36 = v77;
  v185 = v77;
  v173 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v174, v66.__r_.__value_.__l.__data_, v66.__r_.__value_.__l.__size_);
  else
    v174 = v66;
  v175 = v67;
  v173 = &off_24C335A98;
  v176 = v68;
  v6 = v71;
  v7 = v70;
  v177 = &off_24C331510;
  v178 = v70;
  v179 = v70;
  if (v70)
    v8 = (void *)operator new[]();
  else
    v8 = 0;
  v180 = v8;
  v181 = 1;
  if (v6)
    memcpy(v8, v6, v7);
  else
    bzero(v8, v7);
  v168 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v169, v59.__r_.__value_.__l.__data_, v59.__r_.__value_.__l.__size_);
  else
    v169 = v59;
  v168 = off_24C335B18;
  v171 = v61;
  v35 = v60;
  v170 = v60;
  v172 = v62;
  v164 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v165, v53.__r_.__value_.__l.__data_, v53.__r_.__value_.__l.__size_);
  else
    v165 = v53;
  v34 = v54;
  v166 = v54;
  v164 = off_24C335AF8;
  v33 = v55;
  v167 = v55;
  *(_QWORD *)this = &off_24C330F50;
  v9 = (std::string *)((char *)this + 8);
  v32 = SHIBYTE(v246.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v246.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v9, v246.__r_.__value_.__l.__data_, v246.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = *(_OWORD *)&v246.__r_.__value_.__l.__data_;
    *((_QWORD *)this + 3) = *((_QWORD *)&v246.__r_.__value_.__l + 2);
  }
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 6) = 0;
  *((_QWORD *)this + 7) = 0;
  *(_QWORD *)this = off_24C335600;
  *((_QWORD *)this + 8) = 0;
  *((_QWORD *)this + 9) = 0;
  v324 = (uint64_t (**)())off_24C335D90;
  v31 = SHIBYTE(v242.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v242.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v325, v242.__r_.__value_.__l.__data_, v242.__r_.__value_.__l.__size_);
  else
    v325 = v242;
  v326 = v2;
  v324 = off_24C335B18;
  v327 = v244;
  v328 = v245;
  v319 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v237.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v320, v237.__r_.__value_.__l.__data_, v237.__r_.__value_.__l.__size_);
  else
    v320 = v237;
  v321 = v238;
  v319 = &off_24C335AB8;
  v322 = v239;
  if (SHIBYTE(v240.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v323, v240.__r_.__value_.__l.__data_, v240.__r_.__value_.__l.__size_);
  else
    v323 = v240;
  v314 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v232.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v315, v232.__r_.__value_.__l.__data_, v232.__r_.__value_.__l.__size_);
  else
    v315 = v232;
  v316 = v233;
  v314 = &off_24C335AB8;
  v317 = v234;
  if (SHIBYTE(v235.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v318, v235.__r_.__value_.__l.__data_, v235.__r_.__value_.__l.__size_);
  else
    v318 = v235;
  v309 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v227.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v310, v227.__r_.__value_.__l.__data_, v227.__r_.__value_.__l.__size_);
  else
    v310 = v227;
  v311 = v228;
  v309 = &off_24C335AB8;
  v312 = v229;
  if (SHIBYTE(v230.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v313, v230.__r_.__value_.__l.__data_, v230.__r_.__value_.__l.__size_);
  else
    v313 = v230;
  v304 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v222.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v305, v222.__r_.__value_.__l.__data_, v222.__r_.__value_.__l.__size_);
  else
    v305 = v222;
  v306 = v223;
  v304 = &off_24C335AB8;
  v307 = v224;
  if (SHIBYTE(v225.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v308, v225.__r_.__value_.__l.__data_, v225.__r_.__value_.__l.__size_);
  else
    v308 = v225;
  v295 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v213.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v296, v213.__r_.__value_.__l.__data_, v213.__r_.__value_.__l.__size_);
  else
    v296 = v213;
  v297 = v214;
  v295 = &off_24C335A98;
  v298 = v215;
  v10 = v219;
  v11 = v217;
  v299 = &off_24C331510;
  v300 = v217;
  v301 = v217;
  if (v217)
    v12 = (void *)operator new[]();
  else
    v12 = 0;
  v302 = v12;
  v303 = 1;
  if (v10)
    memcpy(v12, v10, v11);
  else
    bzero(v12, v11);
  v291 = (uint64_t (**)())off_24C335D90;
  v13 = SHIBYTE(v209.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v209.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v292, v209.__r_.__value_.__l.__data_, v209.__r_.__value_.__l.__size_);
  else
    v292 = v209;
  v293 = v47;
  v291 = off_24C335AF8;
  v294 = v46;
  v286 = (uint64_t (**)())off_24C335D90;
  v14 = SHIBYTE(v204.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v204.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v287, v204.__r_.__value_.__l.__data_, v204.__r_.__value_.__l.__size_);
  else
    v287 = v204;
  v286 = off_24C335B18;
  v289 = v206;
  v288 = v45;
  v290 = v207;
  v281 = (uint64_t (**)())off_24C335D90;
  v15 = SHIBYTE(v199.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v199.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v282, v199.__r_.__value_.__l.__data_, v199.__r_.__value_.__l.__size_);
  else
    v282 = v199;
  v281 = off_24C335B18;
  v284 = v201;
  v283 = v44;
  v285 = v202;
  v277 = (uint64_t (**)())off_24C335D90;
  v16 = SHIBYTE(v195.__r_.__value_.__r.__words[2]);
  v49 = v14;
  if (SHIBYTE(v195.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v278, v195.__r_.__value_.__l.__data_, v195.__r_.__value_.__l.__size_);
  else
    v278 = v195;
  v279 = v43;
  v277 = off_24C335AF8;
  v280 = v42;
  v273 = (uint64_t (**)())off_24C335D90;
  v17 = SHIBYTE(v191.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v191.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v274, v191.__r_.__value_.__l.__data_, v191.__r_.__value_.__l.__size_);
  else
    v274 = v191;
  v275 = v41;
  v273 = off_24C335AF8;
  v276 = v40;
  v269 = (uint64_t (**)())off_24C335D90;
  v18 = SHIBYTE(v187.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v187.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v270, v187.__r_.__value_.__l.__data_, v187.__r_.__value_.__l.__size_);
  else
    v270 = v187;
  v271 = v39;
  v269 = off_24C335AF8;
  v272 = v38;
  v265 = (uint64_t (**)())off_24C335D90;
  v19 = SHIBYTE(v183.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v183.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v266, v183.__r_.__value_.__l.__data_, v183.__r_.__value_.__l.__size_);
  else
    v266 = v183;
  v267 = v37;
  v265 = off_24C335AF8;
  v268 = v36;
  v256 = (uint64_t (**)())off_24C335D90;
  v48 = v13;
  if (SHIBYTE(v174.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v257, v174.__r_.__value_.__l.__data_, v174.__r_.__value_.__l.__size_);
  else
    v257 = v174;
  v258 = v175;
  v256 = &off_24C335A98;
  v259 = v176;
  v20 = v180;
  v21 = v178;
  v260 = &off_24C331510;
  v261 = v178;
  v262 = v178;
  if (v178)
    v22 = (void *)operator new[]();
  else
    v22 = 0;
  v263 = v22;
  v264 = 1;
  if (v20)
    memcpy(v22, v20, v21);
  else
    bzero(v22, v21);
  v251 = (uint64_t (**)())off_24C335D90;
  v23 = SHIBYTE(v169.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v169.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v252, v169.__r_.__value_.__l.__data_, v169.__r_.__value_.__l.__size_);
  else
    v252 = v169;
  v251 = off_24C335B18;
  v254 = v171;
  v253 = v35;
  v255 = v172;
  v247 = (uint64_t (**)())off_24C335D90;
  v24 = SHIBYTE(v165.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v165.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&__p, v165.__r_.__value_.__l.__data_, v165.__r_.__value_.__l.__size_);
  else
    __p = v165;
  v249 = v34;
  v247 = off_24C335AF8;
  v250 = v33;
  mediaplatform::DatabaseColumnTuple<0ul,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>>::DatabaseColumnTuple((uint64_t)this + 80, (uint64_t)&v324, (uint64_t)&v319, (uint64_t)&v314, (uint64_t)&v309, (uint64_t)&v304, (uint64_t)&v295, (uint64_t)&v291, (uint64_t)&v286, (uint64_t)&v281, (uint64_t)&v277, (uint64_t)&v273, (uint64_t)&v269, (uint64_t)&v265, (uint64_t)&v256, (uint64_t)&v251, (uint64_t)&v247);
  v247 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v251 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v252.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v252.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<mediaplatform::Data>::~DatabaseColumn((uint64_t)&v256);
  v265 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v266.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v266.__r_.__value_.__l.__data_);
  v269 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v270.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v270.__r_.__value_.__l.__data_);
  v273 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v274.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v274.__r_.__value_.__l.__data_);
  v277 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v278.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v278.__r_.__value_.__l.__data_);
  v281 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v282.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v282.__r_.__value_.__l.__data_);
  v286 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v287.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v287.__r_.__value_.__l.__data_);
  if (SHIBYTE(v292.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v292.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<mediaplatform::Data>::~DatabaseColumn((uint64_t)&v295);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v304);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v309);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v314);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v319);
  if (SHIBYTE(v325.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v325.__r_.__value_.__l.__data_);
  v164 = (uint64_t (**)())off_24C335D90;
  if (v24 < 0)
    operator delete(v165.__r_.__value_.__l.__data_);
  v168 = (uint64_t (**)())off_24C335D90;
  if (v23 < 0)
    operator delete(v169.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<mediaplatform::Data>::~DatabaseColumn((uint64_t)&v173);
  v182 = (uint64_t (**)())off_24C335D90;
  if (v19 < 0)
    operator delete(v183.__r_.__value_.__l.__data_);
  v186 = (uint64_t (**)())off_24C335D90;
  if (v18 < 0)
    operator delete(v187.__r_.__value_.__l.__data_);
  v190 = (uint64_t (**)())off_24C335D90;
  if (v17 < 0)
    operator delete(v191.__r_.__value_.__l.__data_);
  v194 = (uint64_t (**)())off_24C335D90;
  if (v16 < 0)
    operator delete(v195.__r_.__value_.__l.__data_);
  v198 = (uint64_t (**)())off_24C335D90;
  if (v15 < 0)
    operator delete(v199.__r_.__value_.__l.__data_);
  v203 = (uint64_t (**)())off_24C335D90;
  if (v49 < 0)
    operator delete(v204.__r_.__value_.__l.__data_);
  v208 = (uint64_t (**)())off_24C335D90;
  if (v48 < 0)
    operator delete(v209.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<mediaplatform::Data>::~DatabaseColumn((uint64_t)&v212);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v221);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v226);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v231);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v236);
  v241 = (uint64_t (**)())off_24C335D90;
  if (v31 < 0)
    operator delete(v242.__r_.__value_.__l.__data_);
  if (v32 < 0)
    operator delete(v246.__r_.__value_.__l.__data_);
  *(_QWORD *)this = off_24C336168;
  *((_QWORD *)this + 122) = off_24C335D90;
  if (SHIBYTE(v159.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external((std::string *)this + 41, v159.__r_.__value_.__l.__data_, v159.__r_.__value_.__l.__size_);
  else
    *((std::string *)this + 41) = v159;
  *((_DWORD *)this + 252) = v160;
  *(_QWORD *)((char *)this + 1012) = v161;
  *((_DWORD *)this + 255) = v162;
  *((_QWORD *)this + 122) = off_24C336AC0;
  std::__tuple_leaf<1ul,mlcore::MediaColumn<std::string>,false>::__tuple_leaf[abi:ne180100]<mlcore::MediaColumn<std::string>&,void>((uint64_t)this + 1024, (uint64_t)v151);
  std::__tuple_leaf<2ul,mlcore::MediaColumn<std::string>,false>::__tuple_leaf[abi:ne180100]<mlcore::MediaColumn<std::string>&,void>((uint64_t)this + 1088, (uint64_t)v142);
  std::__tuple_leaf<3ul,mlcore::MediaColumn<std::string>,false>::__tuple_leaf[abi:ne180100]<mlcore::MediaColumn<std::string>&,void>((uint64_t)this + 1152, (uint64_t)v135);
  std::__tuple_leaf<4ul,mlcore::MediaColumn<std::string>,false>::__tuple_leaf[abi:ne180100]<mlcore::MediaColumn<std::string>&,void>((uint64_t)this + 1216, (uint64_t)v126);
  std::__tuple_leaf<5ul,mlcore::MediaColumn<mediaplatform::Data>,false>::__tuple_leaf[abi:ne180100]<mlcore::MediaColumn<mediaplatform::Data>&,void>((uint64_t)this + 1280, (uint64_t)v118);
  *((_QWORD *)this + 170) = off_24C335D90;
  v25 = (std::string *)((char *)this + 1368);
  if (SHIBYTE(v113.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v25, v113.__r_.__value_.__l.__data_, v113.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v25->__r_.__value_.__l.__data_ = *(_OWORD *)&v113.__r_.__value_.__l.__data_;
    *((_QWORD *)this + 173) = *((_QWORD *)&v113.__r_.__value_.__l + 2);
  }
  *((_DWORD *)this + 348) = v114;
  *(_QWORD *)((char *)this + 1396) = v115;
  *((_QWORD *)this + 170) = off_24C336AA0;
  *((_QWORD *)this + 176) = off_24C335D90;
  v26 = (std::string *)((char *)this + 1416);
  if (SHIBYTE(v106.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v26, v106.__r_.__value_.__l.__data_, v106.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v26->__r_.__value_.__l.__data_ = *(_OWORD *)&v106.__r_.__value_.__l.__data_;
    *((_QWORD *)this + 179) = *((_QWORD *)&v106.__r_.__value_.__l + 2);
  }
  *((_DWORD *)this + 360) = v107;
  *(_QWORD *)((char *)this + 1444) = v108;
  *((_DWORD *)this + 363) = v109;
  *((_QWORD *)this + 176) = off_24C336AC0;
  *((_QWORD *)this + 182) = off_24C335D90;
  v27 = (std::string *)((char *)this + 1464);
  if (SHIBYTE(v99.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v27, v99.__r_.__value_.__l.__data_, v99.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v27->__r_.__value_.__l.__data_ = *(_OWORD *)&v99.__r_.__value_.__l.__data_;
    *((_QWORD *)this + 185) = *((_QWORD *)&v99.__r_.__value_.__l + 2);
  }
  *((_DWORD *)this + 372) = v100;
  *(_QWORD *)((char *)this + 1492) = v101;
  *((_DWORD *)this + 375) = v102;
  *((_QWORD *)this + 182) = off_24C336AC0;
  *((_QWORD *)this + 188) = off_24C335D90;
  if (SHIBYTE(v93.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external((std::string *)this + 63, v93.__r_.__value_.__l.__data_, v93.__r_.__value_.__l.__size_);
  else
    *((std::string *)this + 63) = v93;
  *((_DWORD *)this + 384) = v94;
  *(_QWORD *)((char *)this + 1540) = v95;
  *((_QWORD *)this + 188) = off_24C336AA0;
  *((_QWORD *)this + 194) = off_24C335D90;
  if (SHIBYTE(v87.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external((std::string *)this + 65, v87.__r_.__value_.__l.__data_, v87.__r_.__value_.__l.__size_);
  else
    *((std::string *)this + 65) = v87;
  *((_DWORD *)this + 396) = v88;
  *(_QWORD *)((char *)this + 1588) = v89;
  *((_QWORD *)this + 194) = off_24C336AA0;
  *((_QWORD *)this + 200) = off_24C335D90;
  if (SHIBYTE(v81.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external((std::string *)this + 67, v81.__r_.__value_.__l.__data_, v81.__r_.__value_.__l.__size_);
  else
    *((std::string *)this + 67) = v81;
  *((_DWORD *)this + 408) = v82;
  *(_QWORD *)((char *)this + 1636) = v83;
  *((_QWORD *)this + 200) = off_24C336AA0;
  *((_QWORD *)this + 206) = off_24C335D90;
  if (SHIBYTE(v75.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external((std::string *)this + 69, v75.__r_.__value_.__l.__data_, v75.__r_.__value_.__l.__size_);
  else
    *((std::string *)this + 69) = v75;
  *((_DWORD *)this + 420) = v76;
  *(_QWORD *)((char *)this + 1684) = v77;
  *((_QWORD *)this + 206) = off_24C336AA0;
  *((_QWORD *)this + 212) = off_24C335D90;
  if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external((std::string *)this + 71, v66.__r_.__value_.__l.__data_, v66.__r_.__value_.__l.__size_);
  else
    *((std::string *)this + 71) = v66;
  *((_DWORD *)this + 432) = v67;
  *((_QWORD *)this + 212) = &off_24C335A98;
  *((_BYTE *)this + 1732) = v68;
  mediaplatform::Data::Data((mlcore::ItemArtistTable *)((char *)this + 1736), (const mediaplatform::Data *)&v69);
  *((_QWORD *)this + 212) = &off_24C336A40;
  *((_QWORD *)this + 222) = off_24C335D90;
  if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 1784), v59.__r_.__value_.__l.__data_, v59.__r_.__value_.__l.__size_);
  else
    *(std::string *)((char *)this + 1784) = v59;
  *((_DWORD *)this + 452) = v60;
  *(_QWORD *)((char *)this + 1812) = v61;
  *((_DWORD *)this + 455) = v62;
  *((_QWORD *)this + 222) = off_24C336AC0;
  *((_QWORD *)this + 228) = off_24C335D90;
  v28 = (std::string *)((char *)this + 1832);
  v29 = HIBYTE(v53.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v28, v53.__r_.__value_.__l.__data_, v53.__r_.__value_.__l.__size_);
    v29 = HIBYTE(v53.__r_.__value_.__r.__words[2]);
  }
  else
  {
    *(_OWORD *)&v28->__r_.__value_.__l.__data_ = *(_OWORD *)&v53.__r_.__value_.__l.__data_;
    *((_QWORD *)this + 231) = *((_QWORD *)&v53.__r_.__value_.__l + 2);
  }
  *((_DWORD *)this + 464) = v54;
  *(_QWORD *)((char *)this + 1860) = v55;
  *((_QWORD *)this + 228) = off_24C336AA0;
  v52 = off_24C335D90;
  if (v29 < 0)
    operator delete(v53.__r_.__value_.__l.__data_);
  if (v51 < 0)
    operator delete(v50[0]);
  v58 = off_24C335D90;
  if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v59.__r_.__value_.__l.__data_);
  if (v57 < 0)
    operator delete(v56[0]);
  mediaplatform::DatabaseColumn<mediaplatform::Data>::~DatabaseColumn((uint64_t)v65);
  if (v64 < 0)
    operator delete(v63[0]);
  v74 = off_24C335D90;
  if (SHIBYTE(v75.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v75.__r_.__value_.__l.__data_);
  if (v73 < 0)
    operator delete(v72[0]);
  v80 = off_24C335D90;
  if (SHIBYTE(v81.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v81.__r_.__value_.__l.__data_);
  if (v79 < 0)
    operator delete(v78[0]);
  v86 = off_24C335D90;
  if (SHIBYTE(v87.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v87.__r_.__value_.__l.__data_);
  if (v85 < 0)
    operator delete(v84[0]);
  v92 = off_24C335D90;
  if (SHIBYTE(v93.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v93.__r_.__value_.__l.__data_);
  if (v91 < 0)
    operator delete(v90[0]);
  v98 = off_24C335D90;
  if (SHIBYTE(v99.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v99.__r_.__value_.__l.__data_);
  if (v97 < 0)
    operator delete(v96[0]);
  v105 = off_24C335D90;
  if (SHIBYTE(v106.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v106.__r_.__value_.__l.__data_);
  if (v104 < 0)
    operator delete(v103[0]);
  v112 = off_24C335D90;
  if (SHIBYTE(v113.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v113.__r_.__value_.__l.__data_);
  if (v111 < 0)
    operator delete(v110[0]);
  mediaplatform::DatabaseColumn<mediaplatform::Data>::~DatabaseColumn((uint64_t)v118);
  if (v117 < 0)
    operator delete(v116[0]);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)v126);
  if (v125 < 0)
    operator delete(v124[0]);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)v135);
  if (v132 < 0)
    operator delete(v131[0]);
  if (v134 < 0)
    operator delete(v133[0]);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)v142);
  if (v141 < 0)
    operator delete(v140[0]);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)v151);
  if (v148 < 0)
    operator delete(v147[0]);
  if (v150 < 0)
    operator delete(v149[0]);
  v158 = off_24C335D90;
  if (SHIBYTE(v159.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v159.__r_.__value_.__l.__data_);
  if (v157 < 0)
    operator delete(v156[0]);
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__s.__r_.__value_.__l.__data_);
  *(_QWORD *)this = off_24C337FF8;
  return this;
}

void sub_20A68DD38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,void **a53,void **a54,void **a55,uint64_t a56,uint64_t a57,uint64_t a58,void **a59,uint64_t a60,uint64_t a61,void *a62,uint64_t a63)
{
  char a67;
  void *__p;
  char a72;
  void *a73;
  uint64_t v73;
  void **v74;
  void **v75;
  void **v76;
  void **v77;
  void **v78;
  uint64_t v79;

  *(_QWORD *)(v73 + 1776) = v79;
  if (*(char *)(v73 + 1807) < 0)
    operator delete(*v78);
  mediaplatform::DatabaseColumn<mediaplatform::Data>::~DatabaseColumn(v73 + 1696);
  *(_QWORD *)(v73 + 1648) = v79;
  if (*(char *)(v73 + 1679) < 0)
    operator delete(*v77);
  *(_QWORD *)(v73 + 1600) = v79;
  if (*(char *)(v73 + 1631) < 0)
    operator delete(*v76);
  *(_QWORD *)(v73 + 1552) = v79;
  if (*(char *)(v73 + 1583) < 0)
    operator delete(*v75);
  *(_QWORD *)(v73 + 1504) = v79;
  if (*(char *)(v73 + 1535) < 0)
    operator delete(*v74);
  *(_QWORD *)(v73 + 1456) = v79;
  if (*(char *)(v73 + 1487) < 0)
    operator delete(*a53);
  *(_QWORD *)(v73 + 1408) = v79;
  if (*(char *)(v73 + 1439) < 0)
    operator delete(*a54);
  *(_QWORD *)(v73 + 1360) = v79;
  if (*(char *)(v73 + 1391) < 0)
    operator delete(*a55);
  mediaplatform::DatabaseColumn<mediaplatform::Data>::~DatabaseColumn(a56);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a57);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a58);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a60);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a61);
  *(_QWORD *)(v73 + 976) = v79;
  if (*(char *)(v73 + 1007) < 0)
    operator delete(*a59);
  mediaplatform::DatabaseTable<long long,std::string,std::string,std::string,std::string,mediaplatform::Data,int,long long,long long,int,int,int,int,mediaplatform::Data,long long,int>::~DatabaseTable(v73);
  if (a72 < 0)
    operator delete(__p);
  if (a67 < 0)
    operator delete(a62);
  STACK[0x208] = (unint64_t)off_24C335D90;
  if (SLOBYTE(STACK[0x227]) < 0)
    operator delete((void *)STACK[0x210]);
  if (SLOBYTE(STACK[0x207]) < 0)
    operator delete(a73);
  mediaplatform::DatabaseColumn<mediaplatform::Data>::~DatabaseColumn((uint64_t)&STACK[0x250]);
  if (SLOBYTE(STACK[0x24F]) < 0)
    operator delete((void *)STACK[0x238]);
  STACK[0x2B8] = (unint64_t)off_24C335D90;
  if (SLOBYTE(STACK[0x2D7]) < 0)
    operator delete((void *)STACK[0x2C0]);
  if (SLOBYTE(STACK[0x2B7]) < 0)
    operator delete((void *)STACK[0x2A0]);
  STACK[0x300] = (unint64_t)off_24C335D90;
  if (SLOBYTE(STACK[0x31F]) < 0)
    operator delete((void *)STACK[0x308]);
  if (SLOBYTE(STACK[0x2FF]) < 0)
    operator delete((void *)STACK[0x2E8]);
  STACK[0x348] = (unint64_t)off_24C335D90;
  if (SLOBYTE(STACK[0x367]) < 0)
    operator delete((void *)STACK[0x350]);
  if (SLOBYTE(STACK[0x347]) < 0)
    operator delete((void *)STACK[0x330]);
  STACK[0x390] = (unint64_t)off_24C335D90;
  if (SLOBYTE(STACK[0x3AF]) < 0)
    operator delete((void *)STACK[0x398]);
  if (SLOBYTE(STACK[0x38F]) < 0)
    operator delete((void *)STACK[0x378]);
  STACK[0x3D8] = (unint64_t)off_24C335D90;
  if (SLOBYTE(STACK[0x3F7]) < 0)
    operator delete((void *)STACK[0x3E0]);
  if (SLOBYTE(STACK[0x3D7]) < 0)
    operator delete((void *)STACK[0x3C0]);
  STACK[0x420] = (unint64_t)off_24C335D90;
  if (SLOBYTE(STACK[0x43F]) < 0)
    operator delete((void *)STACK[0x428]);
  if (SLOBYTE(STACK[0x41F]) < 0)
    operator delete((void *)STACK[0x408]);
  STACK[0x468] = (unint64_t)off_24C335D90;
  if (SLOBYTE(STACK[0x487]) < 0)
    operator delete((void *)STACK[0x470]);
  if (SLOBYTE(STACK[0x467]) < 0)
    operator delete((void *)STACK[0x450]);
  mediaplatform::DatabaseColumn<mediaplatform::Data>::~DatabaseColumn((uint64_t)&STACK[0x4B0]);
  if (SLOBYTE(STACK[0x4AF]) < 0)
    operator delete((void *)STACK[0x498]);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&STACK[0x518]);
  if (SLOBYTE(STACK[0x517]) < 0)
    operator delete((void *)STACK[0x500]);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&STACK[0x588]);
  if (SLOBYTE(STACK[0x56F]) < 0)
    operator delete((void *)STACK[0x558]);
  if (SLOBYTE(STACK[0x587]) < 0)
    operator delete((void *)STACK[0x570]);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&STACK[0x5E0]);
  if (SLOBYTE(STACK[0x5DF]) < 0)
    operator delete((void *)STACK[0x5C8]);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&STACK[0x650]);
  if (SLOBYTE(STACK[0x637]) < 0)
    operator delete((void *)STACK[0x620]);
  if (SLOBYTE(STACK[0x64F]) < 0)
    operator delete((void *)STACK[0x638]);
  STACK[0x6A8] = (unint64_t)off_24C335D90;
  if (SLOBYTE(STACK[0x6C7]) < 0)
    operator delete((void *)STACK[0x6B0]);
  if (SLOBYTE(STACK[0x6A7]) < 0)
    operator delete((void *)STACK[0x690]);
  if (SLOBYTE(STACK[0x6EF]) < 0)
    operator delete((void *)STACK[0x6D8]);
  _Unwind_Resume(a1);
}

void sub_20A68E5D0()
{
  JUMPOUT(0x20A68E36CLL);
}

void sub_20A68E5D8()
{
  JUMPOUT(0x20A68E37CLL);
}

void sub_20A68E5E0()
{
  JUMPOUT(0x20A68E398);
}

void sub_20A68E5E8()
{
  JUMPOUT(0x20A68E3A8);
}

void sub_20A68E5F0()
{
  JUMPOUT(0x20A68E3B0);
}

void sub_20A68E5F8()
{
  JUMPOUT(0x20A68E3C0);
}

void sub_20A68E600()
{
  JUMPOUT(0x20A68E3DCLL);
}

void sub_20A68E608()
{
  JUMPOUT(0x20A68E3ECLL);
}

void sub_20A68E610()
{
  JUMPOUT(0x20A68E408);
}

void sub_20A68E618()
{
  JUMPOUT(0x20A68E418);
}

void sub_20A68E620()
{
  JUMPOUT(0x20A68E434);
}

void sub_20A68E628()
{
  JUMPOUT(0x20A68E444);
}

void sub_20A68E630()
{
  JUMPOUT(0x20A68E460);
}

void sub_20A68E638()
{
  JUMPOUT(0x20A68E470);
}

void sub_20A68E640()
{
  JUMPOUT(0x20A68E48CLL);
}

void sub_20A68E648()
{
  JUMPOUT(0x20A68E49CLL);
}

void sub_20A68E650()
{
  JUMPOUT(0x20A68E4B8);
}

void sub_20A68E658()
{
  JUMPOUT(0x20A68E4C8);
}

void sub_20A68E660()
{
  JUMPOUT(0x20A68E4E4);
}

void sub_20A68E668()
{
  JUMPOUT(0x20A68E4F4);
}

void sub_20A68E670()
{
  JUMPOUT(0x20A68E4FCLL);
}

void sub_20A68E678()
{
  JUMPOUT(0x20A68E50CLL);
}

void sub_20A68E680()
{
  JUMPOUT(0x20A68E514);
}

void sub_20A68E688()
{
  JUMPOUT(0x20A68E524);
}

void sub_20A68E690()
{
  JUMPOUT(0x20A68E52CLL);
}

void sub_20A68E698()
{
  JUMPOUT(0x20A68E53CLL);
}

void sub_20A68E6A0()
{
  JUMPOUT(0x20A68E54CLL);
}

void sub_20A68E6A8()
{
  JUMPOUT(0x20A68E554);
}

void sub_20A68E6B0()
{
  JUMPOUT(0x20A68E564);
}

void sub_20A68E6B8()
{
  JUMPOUT(0x20A68E56CLL);
}

void sub_20A68E6C0()
{
  JUMPOUT(0x20A68E57CLL);
}

void sub_20A68E6C8()
{
  JUMPOUT(0x20A68E58CLL);
}

void sub_20A68E6D0()
{
  JUMPOUT(0x20A68E5A8);
}

void sub_20A68E6D8()
{
  JUMPOUT(0x20A68E5B8);
}

uint64_t mlcore::ItemExtraTable::ItemExtraTable(mlcore::ItemExtraTable *this)
{
  uint64_t v1;
  const void *v2;
  size_t v3;
  void *v4;
  std::string *v5;
  std::string *v6;
  std::string *v7;
  std::string *v8;
  std::string *v9;
  std::string *v10;
  std::string *v11;
  std::string *v12;
  std::string *v13;
  std::string *v14;
  std::string *v15;
  std::string *v16;
  char v17;
  void *v19[2];
  char v20;
  void (**v21)(mediaplatform::DatabaseColumnBase *__hidden);
  std::string v22;
  int v23;
  uint64_t v24;
  void *v25[2];
  char v26;
  void (**v27)(mediaplatform::DatabaseColumnBase *__hidden);
  std::string v28;
  int v29;
  uint64_t v30;
  void *v31[2];
  char v32;
  void (**v33)(mediaplatform::DatabaseColumnBase *__hidden);
  std::string v34;
  int v35;
  uint64_t v36;
  void *v37[2];
  char v38;
  void *v39[2];
  char v40;
  char v41[8];
  std::string v42;
  int v43;
  char v44;
  std::string v45;
  void *v46[2];
  char v47;
  void *v48[2];
  char v49;
  char v50[8];
  std::string v51;
  int v52;
  char v53;
  std::string v54;
  void *v55[2];
  char v56;
  void *v57[2];
  char v58;
  char v59[8];
  std::string v60;
  int v61;
  char v62;
  std::string v63;
  void *v64[2];
  char v65;
  void *v66[2];
  char v67;
  char v68[8];
  std::string v69;
  int v70;
  char v71;
  std::string v72;
  void *v73[2];
  char v74;
  void (**v75)(mediaplatform::DatabaseColumnBase *__hidden);
  std::string v76;
  int v77;
  uint64_t v78;
  void *v79[2];
  char v80;
  void (**v81)(mediaplatform::DatabaseColumnBase *__hidden);
  std::string v82;
  int v83;
  uint64_t v84;
  int v85;
  void *v86[2];
  char v87;
  void (**v88)(mediaplatform::DatabaseColumnBase *__hidden);
  std::string v89;
  int v90;
  uint64_t v91;
  int v92;
  void *v93[2];
  char v94;
  char v95[8];
  std::string v96;
  int v97;
  char v98;
  std::string v99;
  void *v100[2];
  char v101;
  char v102[8];
  std::string v103;
  int v104;
  char v105;
  std::string v106;
  void *v107[2];
  char v108;
  char v109[8];
  std::string v110;
  int v111;
  char v112;
  std::string v113;
  void *v114[2];
  char v115;
  char v116[8];
  std::string v117;
  int v118;
  char v119;
  std::string v120;
  void *v121[2];
  char v122;
  char v123[8];
  std::string v124;
  int v125;
  char v126;
  std::string v127;
  void *v128[2];
  char v129;
  char v130[8];
  std::string v131;
  int v132;
  char v133;
  std::string v134;
  void *v135[2];
  char v136;
  void (**v137)(mediaplatform::DatabaseColumnBase *__hidden);
  std::string v138;
  int v139;
  uint64_t v140;
  int v141;
  void *v142[2];
  char v143;
  void (**v144)(mediaplatform::DatabaseColumnBase *__hidden);
  std::string v145;
  int v146;
  uint64_t v147;
  void *v148[2];
  char v149;
  void (**v150)(mediaplatform::DatabaseColumnBase *__hidden);
  std::string v151;
  int v152;
  uint64_t v153;
  void *v154[2];
  char v155;
  void (**v156)(mediaplatform::DatabaseColumnBase *__hidden);
  std::string v157;
  int v158;
  uint64_t v159;
  void *v160[2];
  char v161;
  void (**v162)(mediaplatform::DatabaseColumnBase *__hidden);
  std::string v163;
  int v164;
  uint64_t v165;
  void *v166[2];
  char v167;
  void (**v168)(mediaplatform::DatabaseColumnBase *__hidden);
  std::string v169;
  int v170;
  uint64_t v171;
  void *v172[2];
  char v173;
  void (**v174)(mediaplatform::DatabaseColumnBase *__hidden);
  std::string v175;
  int v176;
  uint64_t v177;
  int v178;
  void *v179[2];
  char v180;
  void (**v181)(mediaplatform::DatabaseColumnBase *__hidden);
  std::string v182;
  int v183;
  uint64_t v184;
  void *v185[2];
  char v186;
  char v187[8];
  std::string v188;
  int v189;
  char v190;
  uint64_t v191;
  size_t v192;
  const void *v193;
  void *v194[2];
  char v195;
  void (**v196)(mediaplatform::DatabaseColumnBase *__hidden);
  std::string v197;
  int v198;
  uint64_t v199;
  int v200;
  void *v201[2];
  char v202;
  void *v203[2];
  char v204;
  char v205[8];
  std::string v206;
  int v207;
  char v208;
  std::string v209;
  void *v210[2];
  char v211;
  void (**v212)(mediaplatform::DatabaseColumnBase *__hidden);
  std::string v213;
  int v214;
  uint64_t v215;
  void *v216[2];
  char v217;
  void (**v218)(mediaplatform::DatabaseColumnBase *__hidden);
  std::string v219;
  int v220;
  uint64_t v221;
  int v222;
  void *v223[2];
  char v224;
  void (**v225)(mediaplatform::DatabaseColumnBase *__hidden);
  std::string v226;
  int v227;
  uint64_t v228;
  void *v229[2];
  char v230;
  void (**v231)(mediaplatform::DatabaseColumnBase *__hidden);
  std::string v232;
  int v233;
  uint64_t v234;
  void *v235[2];
  char v236;
  char v237[8];
  std::string v238;
  int v239;
  char v240;
  std::string v241;
  void *v242[2];
  char v243;
  void *v244[2];
  char v245;
  char v246[8];
  std::string v247;
  int v248;
  char v249;
  std::string v250;
  void *v251[2];
  char v252;
  void (**v253)(mediaplatform::DatabaseColumnBase *__hidden);
  std::string v254;
  int v255;
  uint64_t v256;
  int v257;
  std::string __s;
  uint64_t (**v259)();
  std::string __p;
  int v261;
  uint64_t v262;
  uint64_t (**v263)();
  std::string v264;
  int v265;
  uint64_t v266;
  uint64_t (**v267)();
  std::string v268;
  int v269;
  uint64_t v270;
  uint64_t (**v271)();
  std::string v272;
  int v273;
  char v274;
  std::string v275;
  uint64_t (**v276)();
  std::string v277;
  int v278;
  char v279;
  std::string v280;
  uint64_t (**v281)();
  std::string v282;
  int v283;
  char v284;
  std::string v285;
  uint64_t (**v286)();
  std::string v287;
  int v288;
  char v289;
  std::string v290;
  uint64_t (**v291)();
  std::string v292;
  int v293;
  uint64_t v294;
  uint64_t (**v295)();
  std::string v296;
  int v297;
  uint64_t v298;
  int v299;
  uint64_t (**v300)();
  std::string v301;
  int v302;
  uint64_t v303;
  int v304;
  uint64_t (**v305)();
  std::string v306;
  int v307;
  char v308;
  std::string v309;
  uint64_t (**v310)();
  std::string v311;
  int v312;
  char v313;
  std::string v314;
  uint64_t (**v315)();
  std::string v316;
  int v317;
  char v318;
  std::string v319;
  uint64_t (**v320)();
  std::string v321;
  int v322;
  char v323;
  std::string v324;
  uint64_t (**v325)();
  std::string v326;
  int v327;
  char v328;
  std::string v329;
  uint64_t (**v330)();
  std::string v331;
  int v332;
  char v333;
  std::string v334;
  uint64_t (**v335)();
  std::string v336;
  int v337;
  uint64_t v338;
  int v339;
  uint64_t (**v340)();
  std::string v341;
  int v342;
  uint64_t v343;
  uint64_t (**v344)();
  std::string v345;
  int v346;
  uint64_t v347;
  uint64_t (**v348)();
  std::string v349;
  int v350;
  uint64_t v351;
  uint64_t (**v352)();
  std::string v353;
  int v354;
  uint64_t v355;
  uint64_t (**v356)();
  std::string v357;
  int v358;
  uint64_t v359;
  uint64_t (**v360)();
  std::string v361;
  int v362;
  uint64_t v363;
  int v364;
  uint64_t (**v365)();
  std::string v366;
  int v367;
  uint64_t v368;
  uint64_t (**v369)();
  std::string v370;
  int v371;
  char v372;
  void (**v373)(mediaplatform::Data *__hidden);
  size_t v374;
  size_t v375;
  void *v376;
  char v377;
  uint64_t (**v378)();
  std::string v379;
  int v380;
  uint64_t v381;
  int v382;
  uint64_t (**v383)();
  std::string v384;
  int v385;
  char v386;
  std::string v387;
  uint64_t (**v388)();
  std::string v389;
  int v390;
  uint64_t v391;
  uint64_t (**v392)();
  std::string v393;
  int v394;
  uint64_t v395;
  int v396;
  uint64_t (**v397)();
  std::string v398;
  int v399;
  uint64_t v400;
  uint64_t (**v401)();
  std::string v402;
  int v403;
  uint64_t v404;
  uint64_t (**v405)();
  std::string v406;
  int v407;
  char v408;
  std::string v409;
  uint64_t (**v410)();
  std::string v411;
  int v412;
  char v413;
  std::string v414;
  uint64_t (**v415)();
  std::string v416;
  int v417;
  uint64_t v418;
  int v419;
  std::string v420;

  v1 = MEMORY[0x24BDAC7A8](this);
  std::string::basic_string[abi:ne180100]<0>(&__s, "item_extra");
  std::string::basic_string[abi:ne180100]<0>(v251, "item_pid");
  mlcore::MediaColumn<long long>::MediaColumn((uint64_t)&v253, (uint64_t)v251, 1);
  std::string::basic_string[abi:ne180100]<0>(v244, "title");
  std::string::basic_string[abi:ne180100]<0>(v242, "");
  mlcore::MediaColumn<std::string>::MediaColumn((uint64_t)v246, (uint64_t)v244, (uint64_t)v242);
  std::string::basic_string[abi:ne180100]<0>(v235, "sort_title");
  mlcore::MediaColumn<std::string>::MediaColumn((uint64_t)v237, (uint64_t)v235, 0);
  std::string::basic_string[abi:ne180100]<0>(v229, "disc_count");
  mlcore::MediaColumn<int>::MediaColumn((uint64_t)&v231, (uint64_t)v229, 0);
  std::string::basic_string[abi:ne180100]<0>(v223, "track_count");
  mlcore::MediaColumn<int>::MediaColumn((uint64_t)&v225, (uint64_t)v223, 0);
  std::string::basic_string[abi:ne180100]<0>(v216, "total_time_ms");
  mlcore::MediaColumn<double>::MediaColumn((uint64_t)&v218, (uint64_t)v216);
  std::string::basic_string[abi:ne180100]<0>(v210, "year");
  mlcore::MediaColumn<int>::MediaColumn((uint64_t)&v212, (uint64_t)v210, 0);
  std::string::basic_string[abi:ne180100]<0>(v203, "location");
  std::string::basic_string[abi:ne180100]<0>(v201, "");
  mlcore::MediaColumn<std::string>::MediaColumn((uint64_t)v205, (uint64_t)v203, (uint64_t)v201);
  std::string::basic_string[abi:ne180100]<0>(v194, "file_size");
  mlcore::MediaColumn<long long>::MediaColumn((uint64_t)&v196, (uint64_t)v194);
  std::string::basic_string[abi:ne180100]<0>(v185, "integrity");
  mlcore::MediaColumn<mediaplatform::Data>::MediaColumn((uint64_t)v187, (uint64_t)v185);
  std::string::basic_string[abi:ne180100]<0>(v179, "is_audible_audio_book");
  mlcore::MediaColumn<int>::MediaColumn((uint64_t)&v181, (uint64_t)v179, 0);
  std::string::basic_string[abi:ne180100]<0>(v172, "date_modified");
  mlcore::MediaColumn<long long>::MediaColumn((uint64_t)&v174, (uint64_t)v172);
  std::string::basic_string[abi:ne180100]<0>(v166, "media_kind");
  mlcore::MediaColumn<int>::MediaColumn((uint64_t)&v168, (uint64_t)v166, 0);
  std::string::basic_string[abi:ne180100]<0>(v160, "content_rating");
  mlcore::MediaColumn<int>::MediaColumn((uint64_t)&v162, (uint64_t)v160, 0);
  std::string::basic_string[abi:ne180100]<0>(v154, "content_rating_level");
  mlcore::MediaColumn<int>::MediaColumn((uint64_t)&v156, (uint64_t)v154, 0);
  std::string::basic_string[abi:ne180100]<0>(v148, "is_user_disabled");
  mlcore::MediaColumn<int>::MediaColumn((uint64_t)&v150, (uint64_t)v148, 0);
  std::string::basic_string[abi:ne180100]<0>(v142, "bpm");
  mlcore::MediaColumn<int>::MediaColumn((uint64_t)&v144, (uint64_t)v142, 0);
  std::string::basic_string[abi:ne180100]<0>(v135, "genius_id");
  mlcore::MediaColumn<long long>::MediaColumn((uint64_t)&v137, (uint64_t)v135);
  std::string::basic_string[abi:ne180100]<0>(v128, "comment");
  mlcore::MediaColumn<std::string>::MediaColumn((uint64_t)v130, (uint64_t)v128, 0);
  std::string::basic_string[abi:ne180100]<0>(v121, "grouping");
  mlcore::MediaColumn<std::string>::MediaColumn((uint64_t)v123, (uint64_t)v121, 0);
  std::string::basic_string[abi:ne180100]<0>(v114, "description");
  mlcore::MediaColumn<std::string>::MediaColumn((uint64_t)v116, (uint64_t)v114, 0);
  std::string::basic_string[abi:ne180100]<0>(v107, "description_long");
  mlcore::MediaColumn<std::string>::MediaColumn((uint64_t)v109, (uint64_t)v107, 0);
  std::string::basic_string[abi:ne180100]<0>(v100, "collection_description");
  mlcore::MediaColumn<std::string>::MediaColumn((uint64_t)v102, (uint64_t)v100, 0);
  std::string::basic_string[abi:ne180100]<0>(v93, "copyright");
  mlcore::MediaColumn<std::string>::MediaColumn((uint64_t)v95, (uint64_t)v93, 0);
  std::string::basic_string[abi:ne180100]<0>(v86, "pending_genius_checksum");
  mlcore::MediaColumn<long long>::MediaColumn((uint64_t)&v88, (uint64_t)v86);
  std::string::basic_string[abi:ne180100]<0>(v79, "category_id");
  mlcore::MediaColumn<long long>::MediaColumn((uint64_t)&v81, (uint64_t)v79);
  std::string::basic_string[abi:ne180100]<0>(v73, "location_kind_id");
  mlcore::MediaColumn<int>::MediaColumn((uint64_t)&v75, (uint64_t)v73, 0);
  std::string::basic_string[abi:ne180100]<0>(v66, "version");
  std::string::basic_string[abi:ne180100]<0>(v64, "");
  mlcore::MediaColumn<std::string>::MediaColumn((uint64_t)v68, (uint64_t)v66, (uint64_t)v64);
  std::string::basic_string[abi:ne180100]<0>(v57, "display_version");
  std::string::basic_string[abi:ne180100]<0>(v55, "");
  mlcore::MediaColumn<std::string>::MediaColumn((uint64_t)v59, (uint64_t)v57, (uint64_t)v55);
  std::string::basic_string[abi:ne180100]<0>(v48, "classical_work");
  std::string::basic_string[abi:ne180100]<0>(v46, "");
  mlcore::MediaColumn<std::string>::MediaColumn((uint64_t)v50, (uint64_t)v48, (uint64_t)v46);
  std::string::basic_string[abi:ne180100]<0>(v39, "classical_movement");
  std::string::basic_string[abi:ne180100]<0>(v37, "");
  mlcore::MediaColumn<std::string>::MediaColumn((uint64_t)v41, (uint64_t)v39, (uint64_t)v37);
  std::string::basic_string[abi:ne180100]<0>(v31, "classical_movement_count");
  mlcore::MediaColumn<int>::MediaColumn((uint64_t)&v33, (uint64_t)v31, 0);
  std::string::basic_string[abi:ne180100]<0>(v25, "classical_movement_number");
  mlcore::MediaColumn<int>::MediaColumn((uint64_t)&v27, (uint64_t)v25, 0);
  std::string::basic_string[abi:ne180100]<0>(v19, "is_preorder");
  mlcore::MediaColumn<int>::MediaColumn((uint64_t)&v21, (uint64_t)v19, 0);
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v420, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
  else
    v420 = __s;
  v415 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v254.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v416, v254.__r_.__value_.__l.__data_, v254.__r_.__value_.__l.__size_);
  else
    v416 = v254;
  v415 = off_24C335B18;
  v418 = v256;
  v417 = v255;
  v419 = v257;
  v410 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v247.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v411, v247.__r_.__value_.__l.__data_, v247.__r_.__value_.__l.__size_);
  else
    v411 = v247;
  v412 = v248;
  v410 = &off_24C335AB8;
  v413 = v249;
  if (SHIBYTE(v250.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v414, v250.__r_.__value_.__l.__data_, v250.__r_.__value_.__l.__size_);
  else
    v414 = v250;
  v405 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v238.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v406, v238.__r_.__value_.__l.__data_, v238.__r_.__value_.__l.__size_);
  else
    v406 = v238;
  v407 = v239;
  v405 = &off_24C335AB8;
  v408 = v240;
  if (SHIBYTE(v241.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v409, v241.__r_.__value_.__l.__data_, v241.__r_.__value_.__l.__size_);
  else
    v409 = v241;
  v401 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v232.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v402, v232.__r_.__value_.__l.__data_, v232.__r_.__value_.__l.__size_);
  else
    v402 = v232;
  v403 = v233;
  v401 = off_24C335AF8;
  v404 = v234;
  v397 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v226.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v398, v226.__r_.__value_.__l.__data_, v226.__r_.__value_.__l.__size_);
  else
    v398 = v226;
  v399 = v227;
  v397 = off_24C335AF8;
  v400 = v228;
  v392 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v219.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v393, v219.__r_.__value_.__l.__data_, v219.__r_.__value_.__l.__size_);
  else
    v393 = v219;
  v392 = off_24C335AD8;
  v395 = v221;
  v394 = v220;
  v396 = v222;
  v388 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v213.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v389, v213.__r_.__value_.__l.__data_, v213.__r_.__value_.__l.__size_);
  else
    v389 = v213;
  v390 = v214;
  v388 = off_24C335AF8;
  v391 = v215;
  v383 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v206.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v384, v206.__r_.__value_.__l.__data_, v206.__r_.__value_.__l.__size_);
  else
    v384 = v206;
  v385 = v207;
  v383 = &off_24C335AB8;
  v386 = v208;
  if (SHIBYTE(v209.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v387, v209.__r_.__value_.__l.__data_, v209.__r_.__value_.__l.__size_);
  else
    v387 = v209;
  v378 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v197.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v379, v197.__r_.__value_.__l.__data_, v197.__r_.__value_.__l.__size_);
  else
    v379 = v197;
  v378 = off_24C335B18;
  v381 = v199;
  v380 = v198;
  v382 = v200;
  v369 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v188.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v370, v188.__r_.__value_.__l.__data_, v188.__r_.__value_.__l.__size_);
  else
    v370 = v188;
  v371 = v189;
  v369 = &off_24C335A98;
  v372 = v190;
  v2 = v193;
  v3 = v192;
  v373 = &off_24C331510;
  v374 = v192;
  v375 = v192;
  if (v192)
    v4 = (void *)operator new[]();
  else
    v4 = 0;
  v376 = v4;
  v377 = 1;
  if (v2)
    memcpy(v4, v2, v3);
  else
    bzero(v4, v3);
  v365 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v182.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v366, v182.__r_.__value_.__l.__data_, v182.__r_.__value_.__l.__size_);
  else
    v366 = v182;
  v367 = v183;
  v365 = off_24C335AF8;
  v368 = v184;
  v360 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v175.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v361, v175.__r_.__value_.__l.__data_, v175.__r_.__value_.__l.__size_);
  else
    v361 = v175;
  v360 = off_24C335B18;
  v363 = v177;
  v362 = v176;
  v364 = v178;
  v356 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v169.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v357, v169.__r_.__value_.__l.__data_, v169.__r_.__value_.__l.__size_);
  else
    v357 = v169;
  v358 = v170;
  v356 = off_24C335AF8;
  v359 = v171;
  v352 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v163.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v353, v163.__r_.__value_.__l.__data_, v163.__r_.__value_.__l.__size_);
  else
    v353 = v163;
  v354 = v164;
  v352 = off_24C335AF8;
  v355 = v165;
  v348 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v157.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v349, v157.__r_.__value_.__l.__data_, v157.__r_.__value_.__l.__size_);
  else
    v349 = v157;
  v350 = v158;
  v348 = off_24C335AF8;
  v351 = v159;
  v344 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v151.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v345, v151.__r_.__value_.__l.__data_, v151.__r_.__value_.__l.__size_);
  else
    v345 = v151;
  v346 = v152;
  v344 = off_24C335AF8;
  v347 = v153;
  v340 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v145.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v341, v145.__r_.__value_.__l.__data_, v145.__r_.__value_.__l.__size_);
  else
    v341 = v145;
  v342 = v146;
  v340 = off_24C335AF8;
  v343 = v147;
  v335 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v138.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v336, v138.__r_.__value_.__l.__data_, v138.__r_.__value_.__l.__size_);
  else
    v336 = v138;
  v335 = off_24C335B18;
  v338 = v140;
  v337 = v139;
  v339 = v141;
  v330 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v131.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v331, v131.__r_.__value_.__l.__data_, v131.__r_.__value_.__l.__size_);
  else
    v331 = v131;
  v332 = v132;
  v330 = &off_24C335AB8;
  v333 = v133;
  if (SHIBYTE(v134.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v334, v134.__r_.__value_.__l.__data_, v134.__r_.__value_.__l.__size_);
  else
    v334 = v134;
  v325 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v124.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v326, v124.__r_.__value_.__l.__data_, v124.__r_.__value_.__l.__size_);
  else
    v326 = v124;
  v327 = v125;
  v325 = &off_24C335AB8;
  v328 = v126;
  if (SHIBYTE(v127.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v329, v127.__r_.__value_.__l.__data_, v127.__r_.__value_.__l.__size_);
  else
    v329 = v127;
  v320 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v117.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v321, v117.__r_.__value_.__l.__data_, v117.__r_.__value_.__l.__size_);
  else
    v321 = v117;
  v322 = v118;
  v320 = &off_24C335AB8;
  v323 = v119;
  if (SHIBYTE(v120.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v324, v120.__r_.__value_.__l.__data_, v120.__r_.__value_.__l.__size_);
  else
    v324 = v120;
  v315 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v110.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v316, v110.__r_.__value_.__l.__data_, v110.__r_.__value_.__l.__size_);
  else
    v316 = v110;
  v317 = v111;
  v315 = &off_24C335AB8;
  v318 = v112;
  if (SHIBYTE(v113.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v319, v113.__r_.__value_.__l.__data_, v113.__r_.__value_.__l.__size_);
  else
    v319 = v113;
  v310 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v103.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v311, v103.__r_.__value_.__l.__data_, v103.__r_.__value_.__l.__size_);
  else
    v311 = v103;
  v312 = v104;
  v310 = &off_24C335AB8;
  v313 = v105;
  if (SHIBYTE(v106.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v314, v106.__r_.__value_.__l.__data_, v106.__r_.__value_.__l.__size_);
  else
    v314 = v106;
  v305 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v96.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v306, v96.__r_.__value_.__l.__data_, v96.__r_.__value_.__l.__size_);
  else
    v306 = v96;
  v307 = v97;
  v305 = &off_24C335AB8;
  v308 = v98;
  if (SHIBYTE(v99.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v309, v99.__r_.__value_.__l.__data_, v99.__r_.__value_.__l.__size_);
  else
    v309 = v99;
  v300 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v89.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v301, v89.__r_.__value_.__l.__data_, v89.__r_.__value_.__l.__size_);
  else
    v301 = v89;
  v300 = off_24C335B18;
  v303 = v91;
  v302 = v90;
  v304 = v92;
  v295 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v82.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v296, v82.__r_.__value_.__l.__data_, v82.__r_.__value_.__l.__size_);
  else
    v296 = v82;
  v295 = off_24C335B18;
  v298 = v84;
  v297 = v83;
  v299 = v85;
  v291 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v76.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v292, v76.__r_.__value_.__l.__data_, v76.__r_.__value_.__l.__size_);
  else
    v292 = v76;
  v293 = v77;
  v291 = off_24C335AF8;
  v294 = v78;
  v286 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v69.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v287, v69.__r_.__value_.__l.__data_, v69.__r_.__value_.__l.__size_);
  else
    v287 = v69;
  v288 = v70;
  v286 = &off_24C335AB8;
  v289 = v71;
  if (SHIBYTE(v72.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v290, v72.__r_.__value_.__l.__data_, v72.__r_.__value_.__l.__size_);
  else
    v290 = v72;
  v281 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v282, v60.__r_.__value_.__l.__data_, v60.__r_.__value_.__l.__size_);
  else
    v282 = v60;
  v283 = v61;
  v281 = &off_24C335AB8;
  v284 = v62;
  if (SHIBYTE(v63.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v285, v63.__r_.__value_.__l.__data_, v63.__r_.__value_.__l.__size_);
  else
    v285 = v63;
  v276 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v277, v51.__r_.__value_.__l.__data_, v51.__r_.__value_.__l.__size_);
  else
    v277 = v51;
  v278 = v52;
  v276 = &off_24C335AB8;
  v279 = v53;
  if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v280, v54.__r_.__value_.__l.__data_, v54.__r_.__value_.__l.__size_);
  else
    v280 = v54;
  v271 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v272, v42.__r_.__value_.__l.__data_, v42.__r_.__value_.__l.__size_);
  else
    v272 = v42;
  v273 = v43;
  v271 = &off_24C335AB8;
  v274 = v44;
  if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v275, v45.__r_.__value_.__l.__data_, v45.__r_.__value_.__l.__size_);
  else
    v275 = v45;
  v267 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v268, v34.__r_.__value_.__l.__data_, v34.__r_.__value_.__l.__size_);
  else
    v268 = v34;
  v269 = v35;
  v267 = off_24C335AF8;
  v270 = v36;
  v263 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v264, v28.__r_.__value_.__l.__data_, v28.__r_.__value_.__l.__size_);
  else
    v264 = v28;
  v265 = v29;
  v263 = off_24C335AF8;
  v266 = v30;
  v259 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&__p, v22.__r_.__value_.__l.__data_, v22.__r_.__value_.__l.__size_);
  else
    __p = v22;
  v261 = v23;
  v259 = off_24C335AF8;
  v262 = v24;
  mediaplatform::DatabaseTable<long long,std::string,std::string,int,int,double,int,std::string,long long,mediaplatform::Data,int,long long,int,int,int,int,int,long long,std::string,std::string,std::string,std::string,std::string,std::string,long long,long long,int,std::string,std::string,std::string,std::string,int,int,int>::DatabaseTable(v1, (uint64_t)&v420, (uint64_t)&v415, (uint64_t)&v410, (uint64_t)&v405, (uint64_t)&v401, (uint64_t)&v397, (uint64_t)&v392, (uint64_t)&v388, (uint64_t)&v383, (uint64_t)&v378, (uint64_t)&v369, (uint64_t)&v365, (uint64_t)&v360, (uint64_t)&v356, (uint64_t)&v352, (uint64_t)&v348, (uint64_t)&v344, (uint64_t)&v340,
    (uint64_t)&v335,
    (uint64_t)&v330,
    (uint64_t)&v325,
    (uint64_t)&v320,
    (uint64_t)&v315,
    (uint64_t)&v310,
    (uint64_t)&v305,
    (uint64_t)&v300,
    (uint64_t)&v295,
    (uint64_t)&v291,
    (uint64_t)&v286,
    (uint64_t)&v281,
    (uint64_t)&v276,
    (uint64_t)&v271,
    (uint64_t)&v267,
    (uint64_t)&v263,
    (uint64_t)&v259);
  v259 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v263 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v264.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v264.__r_.__value_.__l.__data_);
  v267 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v268.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v268.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v271);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v276);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v281);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v286);
  v291 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v292.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v292.__r_.__value_.__l.__data_);
  v295 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v296.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v296.__r_.__value_.__l.__data_);
  v300 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v301.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v301.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v305);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v310);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v315);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v320);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v325);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v330);
  v335 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v336.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v336.__r_.__value_.__l.__data_);
  v340 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v341.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v341.__r_.__value_.__l.__data_);
  v344 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v345.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v345.__r_.__value_.__l.__data_);
  v348 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v349.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v349.__r_.__value_.__l.__data_);
  v352 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v353.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v353.__r_.__value_.__l.__data_);
  v356 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v357.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v357.__r_.__value_.__l.__data_);
  v360 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v361.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v361.__r_.__value_.__l.__data_);
  v365 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v366.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v366.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<mediaplatform::Data>::~DatabaseColumn((uint64_t)&v369);
  v378 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v379.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v379.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v383);
  v388 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v389.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v389.__r_.__value_.__l.__data_);
  v392 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v393.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v393.__r_.__value_.__l.__data_);
  v397 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v398.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v398.__r_.__value_.__l.__data_);
  v401 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v402.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v402.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v405);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v410);
  v415 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v416.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v416.__r_.__value_.__l.__data_);
  if (SHIBYTE(v420.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v420.__r_.__value_.__l.__data_);
  *(_QWORD *)v1 = &off_24C3361D8;
  *(_QWORD *)(v1 + 1952) = off_24C335D90;
  v5 = (std::string *)(v1 + 1960);
  if (SHIBYTE(v254.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v5, v254.__r_.__value_.__l.__data_, v254.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = *(_OWORD *)&v254.__r_.__value_.__l.__data_;
    *(_QWORD *)(v1 + 1976) = *((_QWORD *)&v254.__r_.__value_.__l + 2);
  }
  *(_DWORD *)(v1 + 1984) = v255;
  *(_QWORD *)(v1 + 1988) = v256;
  *(_DWORD *)(v1 + 1996) = v257;
  *(_QWORD *)(v1 + 1952) = off_24C336AC0;
  std::__tuple_leaf<1ul,mlcore::MediaColumn<std::string>,false>::__tuple_leaf[abi:ne180100]<mlcore::MediaColumn<std::string>&,void>(v1 + 2000, (uint64_t)v246);
  std::__tuple_leaf<2ul,mlcore::MediaColumn<std::string>,false>::__tuple_leaf[abi:ne180100]<mlcore::MediaColumn<std::string>&,void>(v1 + 2064, (uint64_t)v237);
  *(_QWORD *)(v1 + 2128) = off_24C335D90;
  v6 = (std::string *)(v1 + 2136);
  if (SHIBYTE(v232.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v6, v232.__r_.__value_.__l.__data_, v232.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = *(_OWORD *)&v232.__r_.__value_.__l.__data_;
    *(_QWORD *)(v1 + 2152) = *((_QWORD *)&v232.__r_.__value_.__l + 2);
  }
  *(_DWORD *)(v1 + 2160) = v233;
  *(_QWORD *)(v1 + 2164) = v234;
  *(_QWORD *)(v1 + 2128) = off_24C336AA0;
  *(_QWORD *)(v1 + 2176) = off_24C335D90;
  if (SHIBYTE(v226.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external((std::string *)(v1 + 2184), v226.__r_.__value_.__l.__data_, v226.__r_.__value_.__l.__size_);
  else
    *(std::string *)(v1 + 2184) = v226;
  *(_DWORD *)(v1 + 2208) = v227;
  *(_QWORD *)(v1 + 2212) = v228;
  *(_QWORD *)(v1 + 2176) = off_24C336AA0;
  *(_QWORD *)(v1 + 2224) = off_24C335D90;
  v7 = (std::string *)(v1 + 2232);
  if (SHIBYTE(v219.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v7, v219.__r_.__value_.__l.__data_, v219.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = *(_OWORD *)&v219.__r_.__value_.__l.__data_;
    *(_QWORD *)(v1 + 2248) = *((_QWORD *)&v219.__r_.__value_.__l + 2);
  }
  *(_DWORD *)(v1 + 2256) = v220;
  *(_QWORD *)(v1 + 2260) = v221;
  *(_DWORD *)(v1 + 2268) = v222;
  *(_QWORD *)(v1 + 2224) = off_24C336A80;
  *(_QWORD *)(v1 + 2272) = off_24C335D90;
  if (SHIBYTE(v213.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external((std::string *)(v1 + 2280), v213.__r_.__value_.__l.__data_, v213.__r_.__value_.__l.__size_);
  else
    *(std::string *)(v1 + 2280) = v213;
  *(_DWORD *)(v1 + 2304) = v214;
  *(_QWORD *)(v1 + 2308) = v215;
  *(_QWORD *)(v1 + 2272) = off_24C336AA0;
  std::__tuple_leaf<7ul,mlcore::MediaColumn<std::string>,false>::__tuple_leaf[abi:ne180100]<mlcore::MediaColumn<std::string>&,void>(v1 + 2320, (uint64_t)v205);
  *(_QWORD *)(v1 + 2384) = off_24C335D90;
  if (SHIBYTE(v197.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external((std::string *)(v1 + 2392), v197.__r_.__value_.__l.__data_, v197.__r_.__value_.__l.__size_);
  else
    *(std::string *)(v1 + 2392) = v197;
  *(_DWORD *)(v1 + 2416) = v198;
  *(_QWORD *)(v1 + 2420) = v199;
  *(_DWORD *)(v1 + 2428) = v200;
  *(_QWORD *)(v1 + 2384) = off_24C336AC0;
  *(_QWORD *)(v1 + 2432) = off_24C335D90;
  if (SHIBYTE(v188.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external((std::string *)(v1 + 2440), v188.__r_.__value_.__l.__data_, v188.__r_.__value_.__l.__size_);
  else
    *(std::string *)(v1 + 2440) = v188;
  *(_DWORD *)(v1 + 2464) = v189;
  *(_QWORD *)(v1 + 2432) = &off_24C335A98;
  *(_BYTE *)(v1 + 2468) = v190;
  mediaplatform::Data::Data((mediaplatform::Data *)(v1 + 2472), (const mediaplatform::Data *)&v191);
  *(_QWORD *)(v1 + 2432) = &off_24C336A40;
  *(_QWORD *)(v1 + 2512) = off_24C335D90;
  v8 = (std::string *)(v1 + 2520);
  if (SHIBYTE(v182.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v8, v182.__r_.__value_.__l.__data_, v182.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v8->__r_.__value_.__l.__data_ = *(_OWORD *)&v182.__r_.__value_.__l.__data_;
    *(_QWORD *)(v1 + 2536) = *((_QWORD *)&v182.__r_.__value_.__l + 2);
  }
  *(_DWORD *)(v1 + 2544) = v183;
  *(_QWORD *)(v1 + 2548) = v184;
  *(_QWORD *)(v1 + 2512) = off_24C336AA0;
  *(_QWORD *)(v1 + 2560) = off_24C335D90;
  v9 = (std::string *)(v1 + 2568);
  if (SHIBYTE(v175.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v9, v175.__r_.__value_.__l.__data_, v175.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = *(_OWORD *)&v175.__r_.__value_.__l.__data_;
    *(_QWORD *)(v1 + 2584) = *((_QWORD *)&v175.__r_.__value_.__l + 2);
  }
  *(_DWORD *)(v1 + 2592) = v176;
  *(_QWORD *)(v1 + 2596) = v177;
  *(_DWORD *)(v1 + 2604) = v178;
  *(_QWORD *)(v1 + 2560) = off_24C336AC0;
  *(_QWORD *)(v1 + 2608) = off_24C335D90;
  v10 = (std::string *)(v1 + 2616);
  if (SHIBYTE(v169.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v10, v169.__r_.__value_.__l.__data_, v169.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v10->__r_.__value_.__l.__data_ = *(_OWORD *)&v169.__r_.__value_.__l.__data_;
    *(_QWORD *)(v1 + 2632) = *((_QWORD *)&v169.__r_.__value_.__l + 2);
  }
  *(_DWORD *)(v1 + 2640) = v170;
  *(_QWORD *)(v1 + 2644) = v171;
  *(_QWORD *)(v1 + 2608) = off_24C336AA0;
  *(_QWORD *)(v1 + 2656) = off_24C335D90;
  if (SHIBYTE(v163.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external((std::string *)(v1 + 2664), v163.__r_.__value_.__l.__data_, v163.__r_.__value_.__l.__size_);
  else
    *(std::string *)(v1 + 2664) = v163;
  *(_DWORD *)(v1 + 2688) = v164;
  *(_QWORD *)(v1 + 2692) = v165;
  *(_QWORD *)(v1 + 2656) = off_24C336AA0;
  *(_QWORD *)(v1 + 2704) = off_24C335D90;
  if (SHIBYTE(v157.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external((std::string *)(v1 + 2712), v157.__r_.__value_.__l.__data_, v157.__r_.__value_.__l.__size_);
  else
    *(std::string *)(v1 + 2712) = v157;
  *(_DWORD *)(v1 + 2736) = v158;
  *(_QWORD *)(v1 + 2740) = v159;
  *(_QWORD *)(v1 + 2704) = off_24C336AA0;
  *(_QWORD *)(v1 + 2752) = off_24C335D90;
  if (SHIBYTE(v151.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external((std::string *)(v1 + 2760), v151.__r_.__value_.__l.__data_, v151.__r_.__value_.__l.__size_);
  else
    *(std::string *)(v1 + 2760) = v151;
  *(_DWORD *)(v1 + 2784) = v152;
  *(_QWORD *)(v1 + 2788) = v153;
  *(_QWORD *)(v1 + 2752) = off_24C336AA0;
  *(_QWORD *)(v1 + 2800) = off_24C335D90;
  if (SHIBYTE(v145.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external((std::string *)(v1 + 2808), v145.__r_.__value_.__l.__data_, v145.__r_.__value_.__l.__size_);
  else
    *(std::string *)(v1 + 2808) = v145;
  *(_DWORD *)(v1 + 2832) = v146;
  *(_QWORD *)(v1 + 2836) = v147;
  *(_QWORD *)(v1 + 2800) = off_24C336AA0;
  *(_QWORD *)(v1 + 2848) = off_24C335D90;
  if (SHIBYTE(v138.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external((std::string *)(v1 + 2856), v138.__r_.__value_.__l.__data_, v138.__r_.__value_.__l.__size_);
  else
    *(std::string *)(v1 + 2856) = v138;
  *(_DWORD *)(v1 + 2880) = v139;
  *(_QWORD *)(v1 + 2884) = v140;
  *(_DWORD *)(v1 + 2892) = v141;
  *(_QWORD *)(v1 + 2848) = off_24C336AC0;
  *(_QWORD *)(v1 + 2896) = off_24C335D90;
  if (SHIBYTE(v131.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external((std::string *)(v1 + 2904), v131.__r_.__value_.__l.__data_, v131.__r_.__value_.__l.__size_);
  else
    *(std::string *)(v1 + 2904) = v131;
  *(_DWORD *)(v1 + 2928) = v132;
  *(_QWORD *)(v1 + 2896) = &off_24C335AB8;
  *(_BYTE *)(v1 + 2932) = v133;
  v11 = (std::string *)(v1 + 2936);
  if (SHIBYTE(v134.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v11, v134.__r_.__value_.__l.__data_, v134.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v11->__r_.__value_.__l.__data_ = *(_OWORD *)&v134.__r_.__value_.__l.__data_;
    *(_QWORD *)(v1 + 2952) = *((_QWORD *)&v134.__r_.__value_.__l + 2);
  }
  *(_QWORD *)(v1 + 2896) = &off_24C336A60;
  *(_QWORD *)(v1 + 2960) = off_24C335D90;
  if (SHIBYTE(v124.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external((std::string *)(v1 + 2968), v124.__r_.__value_.__l.__data_, v124.__r_.__value_.__l.__size_);
  else
    *(std::string *)(v1 + 2968) = v124;
  *(_DWORD *)(v1 + 2992) = v125;
  *(_QWORD *)(v1 + 2960) = &off_24C335AB8;
  *(_BYTE *)(v1 + 2996) = v126;
  v12 = (std::string *)(v1 + 3000);
  if (SHIBYTE(v127.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v12, v127.__r_.__value_.__l.__data_, v127.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v12->__r_.__value_.__l.__data_ = *(_OWORD *)&v127.__r_.__value_.__l.__data_;
    *(_QWORD *)(v1 + 3016) = *((_QWORD *)&v127.__r_.__value_.__l + 2);
  }
  *(_QWORD *)(v1 + 2960) = &off_24C336A60;
  *(_QWORD *)(v1 + 3024) = off_24C335D90;
  if (SHIBYTE(v117.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external((std::string *)(v1 + 3032), v117.__r_.__value_.__l.__data_, v117.__r_.__value_.__l.__size_);
  else
    *(std::string *)(v1 + 3032) = v117;
  *(_DWORD *)(v1 + 3056) = v118;
  *(_QWORD *)(v1 + 3024) = &off_24C335AB8;
  *(_BYTE *)(v1 + 3060) = v119;
  v13 = (std::string *)(v1 + 3064);
  if (SHIBYTE(v120.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v13, v120.__r_.__value_.__l.__data_, v120.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v13->__r_.__value_.__l.__data_ = *(_OWORD *)&v120.__r_.__value_.__l.__data_;
    *(_QWORD *)(v1 + 3080) = *((_QWORD *)&v120.__r_.__value_.__l + 2);
  }
  *(_QWORD *)(v1 + 3024) = &off_24C336A60;
  *(_QWORD *)(v1 + 3088) = off_24C335D90;
  if (SHIBYTE(v110.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external((std::string *)(v1 + 3096), v110.__r_.__value_.__l.__data_, v110.__r_.__value_.__l.__size_);
  else
    *(std::string *)(v1 + 3096) = v110;
  *(_DWORD *)(v1 + 3120) = v111;
  *(_QWORD *)(v1 + 3088) = &off_24C335AB8;
  *(_BYTE *)(v1 + 3124) = v112;
  v14 = (std::string *)(v1 + 3128);
  if (SHIBYTE(v113.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v14, v113.__r_.__value_.__l.__data_, v113.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v14->__r_.__value_.__l.__data_ = *(_OWORD *)&v113.__r_.__value_.__l.__data_;
    *(_QWORD *)(v1 + 3144) = *((_QWORD *)&v113.__r_.__value_.__l + 2);
  }
  *(_QWORD *)(v1 + 3088) = &off_24C336A60;
  std::__tuple_leaf<22ul,mlcore::MediaColumn<std::string>,false>::__tuple_leaf[abi:ne180100]<mlcore::MediaColumn<std::string>&,void>(v1 + 3152, (uint64_t)v102);
  *(_QWORD *)(v1 + 3216) = off_24C335D90;
  if (SHIBYTE(v96.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external((std::string *)(v1 + 3224), v96.__r_.__value_.__l.__data_, v96.__r_.__value_.__l.__size_);
  else
    *(std::string *)(v1 + 3224) = v96;
  *(_DWORD *)(v1 + 3248) = v97;
  *(_QWORD *)(v1 + 3216) = &off_24C335AB8;
  *(_BYTE *)(v1 + 3252) = v98;
  v15 = (std::string *)(v1 + 3256);
  if (SHIBYTE(v99.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v15, v99.__r_.__value_.__l.__data_, v99.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v15->__r_.__value_.__l.__data_ = *(_OWORD *)&v99.__r_.__value_.__l.__data_;
    *(_QWORD *)(v1 + 3272) = *((_QWORD *)&v99.__r_.__value_.__l + 2);
  }
  *(_QWORD *)(v1 + 3216) = &off_24C336A60;
  *(_QWORD *)(v1 + 3280) = off_24C335D90;
  if (SHIBYTE(v89.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external((std::string *)(v1 + 3288), v89.__r_.__value_.__l.__data_, v89.__r_.__value_.__l.__size_);
  else
    *(std::string *)(v1 + 3288) = v89;
  *(_DWORD *)(v1 + 3312) = v90;
  *(_QWORD *)(v1 + 3316) = v91;
  *(_DWORD *)(v1 + 3324) = v92;
  *(_QWORD *)(v1 + 3280) = off_24C336AC0;
  *(_QWORD *)(v1 + 3328) = off_24C335D90;
  if (SHIBYTE(v82.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external((std::string *)(v1 + 3336), v82.__r_.__value_.__l.__data_, v82.__r_.__value_.__l.__size_);
  else
    *(std::string *)(v1 + 3336) = v82;
  *(_DWORD *)(v1 + 3360) = v83;
  *(_QWORD *)(v1 + 3364) = v84;
  *(_DWORD *)(v1 + 3372) = v85;
  *(_QWORD *)(v1 + 3328) = off_24C336AC0;
  *(_QWORD *)(v1 + 3376) = off_24C335D90;
  if (SHIBYTE(v76.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external((std::string *)(v1 + 3384), v76.__r_.__value_.__l.__data_, v76.__r_.__value_.__l.__size_);
  else
    *(std::string *)(v1 + 3384) = v76;
  *(_DWORD *)(v1 + 3408) = v77;
  *(_QWORD *)(v1 + 3412) = v78;
  *(_QWORD *)(v1 + 3376) = off_24C336AA0;
  std::__tuple_leaf<27ul,mlcore::MediaColumn<std::string>,false>::__tuple_leaf[abi:ne180100]<mlcore::MediaColumn<std::string>&,void>(v1 + 3424, (uint64_t)v68);
  std::__tuple_leaf<28ul,mlcore::MediaColumn<std::string>,false>::__tuple_leaf[abi:ne180100]<mlcore::MediaColumn<std::string>&,void>(v1 + 3488, (uint64_t)v59);
  std::__tuple_leaf<29ul,mlcore::MediaColumn<std::string>,false>::__tuple_leaf[abi:ne180100]<mlcore::MediaColumn<std::string>&,void>(v1 + 3552, (uint64_t)v50);
  std::__tuple_leaf<30ul,mlcore::MediaColumn<std::string>,false>::__tuple_leaf[abi:ne180100]<mlcore::MediaColumn<std::string>&,void>(v1 + 3616, (uint64_t)v41);
  *(_QWORD *)(v1 + 3680) = off_24C335D90;
  if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external((std::string *)(v1 + 3688), v34.__r_.__value_.__l.__data_, v34.__r_.__value_.__l.__size_);
  else
    *(std::string *)(v1 + 3688) = v34;
  *(_DWORD *)(v1 + 3712) = v35;
  *(_QWORD *)(v1 + 3716) = v36;
  *(_QWORD *)(v1 + 3680) = off_24C336AA0;
  *(_QWORD *)(v1 + 3728) = off_24C335D90;
  if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external((std::string *)(v1 + 3736), v28.__r_.__value_.__l.__data_, v28.__r_.__value_.__l.__size_);
  else
    *(std::string *)(v1 + 3736) = v28;
  *(_DWORD *)(v1 + 3760) = v29;
  *(_QWORD *)(v1 + 3764) = v30;
  *(_QWORD *)(v1 + 3728) = off_24C336AA0;
  *(_QWORD *)(v1 + 3776) = off_24C335D90;
  v16 = (std::string *)(v1 + 3784);
  v17 = HIBYTE(v22.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v16, v22.__r_.__value_.__l.__data_, v22.__r_.__value_.__l.__size_);
    v17 = HIBYTE(v22.__r_.__value_.__r.__words[2]);
  }
  else
  {
    *(_OWORD *)&v16->__r_.__value_.__l.__data_ = *(_OWORD *)&v22.__r_.__value_.__l.__data_;
    *(_QWORD *)(v1 + 3800) = *((_QWORD *)&v22.__r_.__value_.__l + 2);
  }
  *(_DWORD *)(v1 + 3808) = v23;
  *(_QWORD *)(v1 + 3812) = v24;
  *(_QWORD *)(v1 + 3776) = off_24C336AA0;
  v21 = off_24C335D90;
  if (v17 < 0)
    operator delete(v22.__r_.__value_.__l.__data_);
  if (v20 < 0)
    operator delete(v19[0]);
  v27 = off_24C335D90;
  if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v28.__r_.__value_.__l.__data_);
  if (v26 < 0)
    operator delete(v25[0]);
  v33 = off_24C335D90;
  if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v34.__r_.__value_.__l.__data_);
  if (v32 < 0)
    operator delete(v31[0]);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)v41);
  if (v38 < 0)
    operator delete(v37[0]);
  if (v40 < 0)
    operator delete(v39[0]);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)v50);
  if (v47 < 0)
    operator delete(v46[0]);
  if (v49 < 0)
    operator delete(v48[0]);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)v59);
  if (v56 < 0)
    operator delete(v55[0]);
  if (v58 < 0)
    operator delete(v57[0]);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)v68);
  if (v65 < 0)
    operator delete(v64[0]);
  if (v67 < 0)
    operator delete(v66[0]);
  v75 = off_24C335D90;
  if (SHIBYTE(v76.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v76.__r_.__value_.__l.__data_);
  if (v74 < 0)
    operator delete(v73[0]);
  v81 = off_24C335D90;
  if (SHIBYTE(v82.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v82.__r_.__value_.__l.__data_);
  if (v80 < 0)
    operator delete(v79[0]);
  v88 = off_24C335D90;
  if (SHIBYTE(v89.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v89.__r_.__value_.__l.__data_);
  if (v87 < 0)
    operator delete(v86[0]);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)v95);
  if (v94 < 0)
    operator delete(v93[0]);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)v102);
  if (v101 < 0)
    operator delete(v100[0]);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)v109);
  if (v108 < 0)
    operator delete(v107[0]);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)v116);
  if (v115 < 0)
    operator delete(v114[0]);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)v123);
  if (v122 < 0)
    operator delete(v121[0]);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)v130);
  if (v129 < 0)
    operator delete(v128[0]);
  v137 = off_24C335D90;
  if (SHIBYTE(v138.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v138.__r_.__value_.__l.__data_);
  if (v136 < 0)
    operator delete(v135[0]);
  v144 = off_24C335D90;
  if (SHIBYTE(v145.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v145.__r_.__value_.__l.__data_);
  if (v143 < 0)
    operator delete(v142[0]);
  v150 = off_24C335D90;
  if (SHIBYTE(v151.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v151.__r_.__value_.__l.__data_);
  if (v149 < 0)
    operator delete(v148[0]);
  v156 = off_24C335D90;
  if (SHIBYTE(v157.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v157.__r_.__value_.__l.__data_);
  if (v155 < 0)
    operator delete(v154[0]);
  v162 = off_24C335D90;
  if (SHIBYTE(v163.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v163.__r_.__value_.__l.__data_);
  if (v161 < 0)
    operator delete(v160[0]);
  v168 = off_24C335D90;
  if (SHIBYTE(v169.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v169.__r_.__value_.__l.__data_);
  if (v167 < 0)
    operator delete(v166[0]);
  v174 = off_24C335D90;
  if (SHIBYTE(v175.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v175.__r_.__value_.__l.__data_);
  if (v173 < 0)
    operator delete(v172[0]);
  v181 = off_24C335D90;
  if (SHIBYTE(v182.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v182.__r_.__value_.__l.__data_);
  if (v180 < 0)
    operator delete(v179[0]);
  mediaplatform::DatabaseColumn<mediaplatform::Data>::~DatabaseColumn((uint64_t)v187);
  if (v186 < 0)
    operator delete(v185[0]);
  v196 = off_24C335D90;
  if (SHIBYTE(v197.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v197.__r_.__value_.__l.__data_);
  if (v195 < 0)
    operator delete(v194[0]);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)v205);
  if (v202 < 0)
    operator delete(v201[0]);
  if (v204 < 0)
    operator delete(v203[0]);
  v212 = off_24C335D90;
  if (SHIBYTE(v213.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v213.__r_.__value_.__l.__data_);
  if (v211 < 0)
    operator delete(v210[0]);
  v218 = off_24C335D90;
  if (SHIBYTE(v219.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v219.__r_.__value_.__l.__data_);
  if (v217 < 0)
    operator delete(v216[0]);
  v225 = off_24C335D90;
  if (SHIBYTE(v226.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v226.__r_.__value_.__l.__data_);
  if (v224 < 0)
    operator delete(v223[0]);
  v231 = off_24C335D90;
  if (SHIBYTE(v232.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v232.__r_.__value_.__l.__data_);
  if (v230 < 0)
    operator delete(v229[0]);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)v237);
  if (v236 < 0)
    operator delete(v235[0]);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)v246);
  if (v243 < 0)
    operator delete(v242[0]);
  if (v245 < 0)
    operator delete(v244[0]);
  v253 = off_24C335D90;
  if (SHIBYTE(v254.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v254.__r_.__value_.__l.__data_);
  if (v252 < 0)
    operator delete(v251[0]);
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__s.__r_.__value_.__l.__data_);
  *(_QWORD *)v1 = &off_24C3374F0;
  return v1;
}

void sub_20A690E30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void **a37,void **a38,void **a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void **a47,void **a48,void **a49,void **a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,void **a60,void **a61,uint64_t a62,void **a63)
{
  void **a64;
  void **a65;
  void **a66;
  void **a67;
  void **a68;
  void **a69;
  uint64_t a70;
  void *a72;
  uint64_t v72;
  void **v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  void **v79;
  void **v80;

  *(_QWORD *)(v72 + 3728) = v75;
  if (*(char *)(v72 + 3759) < 0)
    operator delete(*v73);
  *(_QWORD *)(v72 + 3680) = v75;
  if (*(char *)(v72 + 3711) < 0)
    operator delete(*v79);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(v78);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(v77);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(v76);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(v74);
  *(_QWORD *)(v72 + 3376) = v75;
  if (*(char *)(v72 + 3407) < 0)
    operator delete(*v80);
  *(_QWORD *)(v72 + 3328) = v75;
  if (*(char *)(v72 + 3359) < 0)
    operator delete(*a60);
  *(_QWORD *)(v72 + 3280) = v75;
  if (*(char *)(v72 + 3311) < 0)
    operator delete(*a61);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(v72 + 3216);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a62);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(v72 + 3088);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(v72 + 3024);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(v72 + 2960);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(v72 + 2896);
  *(_QWORD *)(v72 + 2848) = v75;
  if (*(char *)(v72 + 2879) < 0)
    operator delete(*a63);
  *(_QWORD *)(v72 + 2800) = v75;
  if (*(char *)(v72 + 2831) < 0)
    operator delete(*a64);
  *(_QWORD *)(v72 + 2752) = v75;
  if (*(char *)(v72 + 2783) < 0)
    operator delete(*a65);
  *(_QWORD *)(v72 + 2704) = v75;
  if (*(char *)(v72 + 2735) < 0)
    operator delete(*a66);
  *(_QWORD *)(v72 + 2656) = v75;
  if (*(char *)(v72 + 2687) < 0)
    operator delete(*a67);
  *(_QWORD *)(v72 + 2608) = v75;
  if (*(char *)(v72 + 2639) < 0)
    operator delete(*a68);
  *(_QWORD *)(v72 + 2560) = v75;
  if (*(char *)(v72 + 2591) < 0)
    operator delete(*a48);
  *(_QWORD *)(v72 + 2512) = v75;
  if (*(char *)(v72 + 2543) < 0)
    operator delete(*a69);
  mediaplatform::DatabaseColumn<mediaplatform::Data>::~DatabaseColumn(v72 + 2432);
  *(_QWORD *)(v72 + 2384) = v75;
  if (*(char *)(v72 + 2415) < 0)
    operator delete(*a49);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a70);
  *(_QWORD *)(v72 + 2272) = v75;
  if (*(char *)(v72 + 2303) < 0)
    operator delete(*a37);
  *(_QWORD *)(v72 + 2224) = v75;
  if (*(char *)(v72 + 2255) < 0)
    operator delete(*a50);
  *(_QWORD *)(v72 + 2176) = v75;
  if (*(char *)(v72 + 2207) < 0)
    operator delete(*a47);
  *(_QWORD *)(v72 + 2128) = v75;
  if (*(char *)(v72 + 2159) < 0)
    operator delete(*a38);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a40);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a41);
  *(_QWORD *)(v72 + 1952) = v75;
  if (*(char *)(v72 + 1983) < 0)
    operator delete(*a39);
  mediaplatform::DatabaseTable<long long,std::string,std::string,int,int,double,int,std::string,long long,mediaplatform::Data,int,long long,int,int,int,int,int,long long,std::string,std::string,std::string,std::string,std::string,std::string,long long,long long,int,std::string,std::string,std::string,std::string,int,int,int>::~DatabaseTable(v72);
  STACK[0x210] = (unint64_t)off_24C335D90;
  if (SLOBYTE(STACK[0x22F]) < 0)
    operator delete((void *)STACK[0x218]);
  if (SLOBYTE(STACK[0x20F]) < 0)
    operator delete(a72);
  STACK[0x258] = (unint64_t)off_24C335D90;
  if (SLOBYTE(STACK[0x277]) < 0)
    operator delete((void *)STACK[0x260]);
  if (SLOBYTE(STACK[0x257]) < 0)
    operator delete((void *)STACK[0x240]);
  STACK[0x2A0] = (unint64_t)off_24C335D90;
  if (SLOBYTE(STACK[0x2BF]) < 0)
    operator delete((void *)STACK[0x2A8]);
  if (SLOBYTE(STACK[0x29F]) < 0)
    operator delete((void *)STACK[0x288]);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&STACK[0x300]);
  if (SLOBYTE(STACK[0x2E7]) < 0)
    operator delete((void *)STACK[0x2D0]);
  if (SLOBYTE(STACK[0x2FF]) < 0)
    operator delete((void *)STACK[0x2E8]);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&STACK[0x370]);
  if (SLOBYTE(STACK[0x357]) < 0)
    operator delete((void *)STACK[0x340]);
  if (SLOBYTE(STACK[0x36F]) < 0)
    operator delete((void *)STACK[0x358]);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&STACK[0x3E0]);
  if (SLOBYTE(STACK[0x3C7]) < 0)
    operator delete((void *)STACK[0x3B0]);
  if (SLOBYTE(STACK[0x3DF]) < 0)
    operator delete((void *)STACK[0x3C8]);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&STACK[0x450]);
  if (SLOBYTE(STACK[0x437]) < 0)
    operator delete((void *)STACK[0x420]);
  if (SLOBYTE(STACK[0x44F]) < 0)
    operator delete((void *)STACK[0x438]);
  STACK[0x4A8] = (unint64_t)off_24C335D90;
  if (SLOBYTE(STACK[0x4C7]) < 0)
    operator delete((void *)STACK[0x4B0]);
  if (SLOBYTE(STACK[0x4A7]) < 0)
    operator delete((void *)STACK[0x490]);
  STACK[0x4F0] = (unint64_t)off_24C335D90;
  if (SLOBYTE(STACK[0x50F]) < 0)
    operator delete((void *)STACK[0x4F8]);
  if (SLOBYTE(STACK[0x4EF]) < 0)
    operator delete((void *)STACK[0x4D8]);
  STACK[0x538] = (unint64_t)off_24C335D90;
  if (SLOBYTE(STACK[0x557]) < 0)
    operator delete((void *)STACK[0x540]);
  if (SLOBYTE(STACK[0x537]) < 0)
    operator delete((void *)STACK[0x520]);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&STACK[0x580]);
  if (SLOBYTE(STACK[0x57F]) < 0)
    operator delete((void *)STACK[0x568]);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&STACK[0x5D8]);
  if (SLOBYTE(STACK[0x5D7]) < 0)
    operator delete((void *)STACK[0x5C0]);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&STACK[0x630]);
  if (SLOBYTE(STACK[0x62F]) < 0)
    operator delete((void *)STACK[0x618]);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&STACK[0x688]);
  if (SLOBYTE(STACK[0x687]) < 0)
    operator delete((void *)STACK[0x670]);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&STACK[0x6E0]);
  if (SLOBYTE(STACK[0x6DF]) < 0)
    operator delete((void *)STACK[0x6C8]);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&STACK[0x738]);
  if (SLOBYTE(STACK[0x737]) < 0)
    operator delete((void *)STACK[0x720]);
  STACK[0x790] = (unint64_t)off_24C335D90;
  if (SLOBYTE(STACK[0x7AF]) < 0)
    operator delete((void *)STACK[0x798]);
  if (SLOBYTE(STACK[0x78F]) < 0)
    operator delete((void *)STACK[0x778]);
  STACK[0x7D8] = (unint64_t)off_24C335D90;
  if (SLOBYTE(STACK[0x7F7]) < 0)
    operator delete((void *)STACK[0x7E0]);
  if (SLOBYTE(STACK[0x7D7]) < 0)
    operator delete((void *)STACK[0x7C0]);
  STACK[0x820] = (unint64_t)off_24C335D90;
  if (SLOBYTE(STACK[0x83F]) < 0)
    operator delete((void *)STACK[0x828]);
  if (SLOBYTE(STACK[0x81F]) < 0)
    operator delete((void *)STACK[0x808]);
  STACK[0x868] = (unint64_t)off_24C335D90;
  if (SLOBYTE(STACK[0x887]) < 0)
    operator delete((void *)STACK[0x870]);
  if (SLOBYTE(STACK[0x867]) < 0)
    operator delete((void *)STACK[0x850]);
  STACK[0x8B0] = (unint64_t)off_24C335D90;
  if (SLOBYTE(STACK[0x8CF]) < 0)
    operator delete((void *)STACK[0x8B8]);
  if (SLOBYTE(STACK[0x8AF]) < 0)
    operator delete((void *)STACK[0x898]);
  STACK[0x8F8] = (unint64_t)off_24C335D90;
  if (SLOBYTE(STACK[0x917]) < 0)
    operator delete((void *)STACK[0x900]);
  if (SLOBYTE(STACK[0x8F7]) < 0)
    operator delete((void *)STACK[0x8E0]);
  STACK[0x940] = (unint64_t)off_24C335D90;
  if (SLOBYTE(STACK[0x95F]) < 0)
    operator delete((void *)STACK[0x948]);
  if (SLOBYTE(STACK[0x93F]) < 0)
    operator delete((void *)STACK[0x928]);
  STACK[0x988] = (unint64_t)off_24C335D90;
  if (SLOBYTE(STACK[0x9A7]) < 0)
    operator delete((void *)STACK[0x990]);
  if (SLOBYTE(STACK[0x987]) < 0)
    operator delete((void *)STACK[0x970]);
  mediaplatform::DatabaseColumn<mediaplatform::Data>::~DatabaseColumn((uint64_t)&STACK[0x9D0]);
  if (SLOBYTE(STACK[0x9CF]) < 0)
    operator delete((void *)STACK[0x9B8]);
  STACK[0xA38] = (unint64_t)off_24C335D90;
  if (SLOBYTE(STACK[0xA57]) < 0)
    operator delete((void *)STACK[0xA40]);
  if (SLOBYTE(STACK[0xA37]) < 0)
    operator delete((void *)STACK[0xA20]);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&STACK[0xA98]);
  if (SLOBYTE(STACK[0xA7F]) < 0)
    operator delete((void *)STACK[0xA68]);
  if (SLOBYTE(STACK[0xA97]) < 0)
    operator delete((void *)STACK[0xA80]);
  STACK[0xAF0] = (unint64_t)off_24C335D90;
  if (SLOBYTE(STACK[0xB0F]) < 0)
    operator delete((void *)STACK[0xAF8]);
  if (SLOBYTE(STACK[0xAEF]) < 0)
    operator delete((void *)STACK[0xAD8]);
  STACK[0xB38] = (unint64_t)off_24C335D90;
  if (SLOBYTE(STACK[0xB57]) < 0)
    operator delete((void *)STACK[0xB40]);
  if (SLOBYTE(STACK[0xB37]) < 0)
    operator delete((void *)STACK[0xB20]);
  STACK[0xB80] = (unint64_t)off_24C335D90;
  if (SLOBYTE(STACK[0xB9F]) < 0)
    operator delete((void *)STACK[0xB88]);
  if (SLOBYTE(STACK[0xB7F]) < 0)
    operator delete((void *)STACK[0xB68]);
  STACK[0xBC8] = (unint64_t)off_24C335D90;
  if (SLOBYTE(STACK[0xBE7]) < 0)
    operator delete((void *)STACK[0xBD0]);
  if (SLOBYTE(STACK[0xBC7]) < 0)
    operator delete((void *)STACK[0xBB0]);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&STACK[0xC10]);
  if (SLOBYTE(STACK[0xC0F]) < 0)
    operator delete((void *)STACK[0xBF8]);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&STACK[0xC80]);
  if (SLOBYTE(STACK[0xC67]) < 0)
    operator delete((void *)STACK[0xC50]);
  if (SLOBYTE(STACK[0xC7F]) < 0)
    operator delete((void *)STACK[0xC68]);
  STACK[0xCD8] = (unint64_t)off_24C335D90;
  if (SLOBYTE(STACK[0xCF7]) < 0)
    operator delete((void *)STACK[0xCE0]);
  if (SLOBYTE(STACK[0xCD7]) < 0)
    operator delete((void *)STACK[0xCC0]);
  if (SLOBYTE(STACK[0xD1F]) < 0)
    operator delete((void *)STACK[0xD08]);
  _Unwind_Resume(a1);
}

void sub_20A691C78()
{
  JUMPOUT(0x20A69175CLL);
}

void sub_20A691C80()
{
  JUMPOUT(0x20A69176CLL);
}

void sub_20A691C88()
{
  JUMPOUT(0x20A691788);
}

void sub_20A691C90()
{
  JUMPOUT(0x20A691798);
}

void sub_20A691C98()
{
  JUMPOUT(0x20A6917B4);
}

void sub_20A691CA0()
{
  JUMPOUT(0x20A6917C4);
}

void sub_20A691CA8()
{
  JUMPOUT(0x20A6917CCLL);
}

void sub_20A691CB0()
{
  JUMPOUT(0x20A6917DCLL);
}

void sub_20A691CB8()
{
  JUMPOUT(0x20A6917ECLL);
}

void sub_20A691CC0()
{
  JUMPOUT(0x20A6917F4);
}

void sub_20A691CC8()
{
  JUMPOUT(0x20A691804);
}

void sub_20A691CD0()
{
  JUMPOUT(0x20A691814);
}

void sub_20A691CD8()
{
  JUMPOUT(0x20A69181CLL);
}

void sub_20A691CE0()
{
  JUMPOUT(0x20A69182CLL);
}

void sub_20A691CE8()
{
  JUMPOUT(0x20A69183CLL);
}

void sub_20A691CF0()
{
  JUMPOUT(0x20A691844);
}

void sub_20A691CF8()
{
  JUMPOUT(0x20A691854);
}

void sub_20A691D00()
{
  JUMPOUT(0x20A691864);
}

void sub_20A691D08()
{
  JUMPOUT(0x20A691880);
}

void sub_20A691D10()
{
  JUMPOUT(0x20A691890);
}

void sub_20A691D18()
{
  JUMPOUT(0x20A6918ACLL);
}

void sub_20A691D20()
{
  JUMPOUT(0x20A6918BCLL);
}

void sub_20A691D28()
{
  JUMPOUT(0x20A6918D8);
}

void sub_20A691D30()
{
  JUMPOUT(0x20A6918E8);
}

void sub_20A691D38()
{
  JUMPOUT(0x20A6918F0);
}

void sub_20A691D40()
{
  JUMPOUT(0x20A691900);
}

void sub_20A691D48()
{
  JUMPOUT(0x20A691908);
}

void sub_20A691D50()
{
  JUMPOUT(0x20A691918);
}

void sub_20A691D58()
{
  JUMPOUT(0x20A691920);
}

void sub_20A691D60()
{
  JUMPOUT(0x20A691930);
}

void sub_20A691D68()
{
  JUMPOUT(0x20A691938);
}

void sub_20A691D70()
{
  JUMPOUT(0x20A691948);
}

void sub_20A691D78()
{
  JUMPOUT(0x20A691950);
}

void sub_20A691D80()
{
  JUMPOUT(0x20A691960);
}

void sub_20A691D88()
{
  JUMPOUT(0x20A691968);
}

void sub_20A691D90()
{
  JUMPOUT(0x20A691978);
}

void sub_20A691D98()
{
  JUMPOUT(0x20A691994);
}

void sub_20A691DA0()
{
  JUMPOUT(0x20A6919A4);
}

void sub_20A691DA8()
{
  JUMPOUT(0x20A6919C0);
}

void sub_20A691DB0()
{
  JUMPOUT(0x20A6919D0);
}

void sub_20A691DB8()
{
  JUMPOUT(0x20A6919ECLL);
}

void sub_20A691DC0()
{
  JUMPOUT(0x20A6919FCLL);
}

void sub_20A691DC8()
{
  JUMPOUT(0x20A691A18);
}

void sub_20A691DD0()
{
  JUMPOUT(0x20A691A28);
}

void sub_20A691DD8()
{
  JUMPOUT(0x20A691A44);
}

void sub_20A691DE0()
{
  JUMPOUT(0x20A691A54);
}

void sub_20A691DE8()
{
  JUMPOUT(0x20A691A70);
}

void sub_20A691DF0()
{
  JUMPOUT(0x20A691A80);
}

void sub_20A691DF8()
{
  JUMPOUT(0x20A691A9CLL);
}

void sub_20A691E00()
{
  JUMPOUT(0x20A691AACLL);
}

void sub_20A691E08()
{
  JUMPOUT(0x20A691AC8);
}

void sub_20A691E10()
{
  JUMPOUT(0x20A691AD8);
}

void sub_20A691E18()
{
  JUMPOUT(0x20A691AE0);
}

void sub_20A691E20()
{
  JUMPOUT(0x20A691AF0);
}

void sub_20A691E28()
{
  JUMPOUT(0x20A691B0CLL);
}

void sub_20A691E30()
{
  JUMPOUT(0x20A691B1CLL);
}

void sub_20A691E38()
{
  JUMPOUT(0x20A691B24);
}

void sub_20A691E40()
{
  JUMPOUT(0x20A691B34);
}

void sub_20A691E48()
{
  JUMPOUT(0x20A691B44);
}

void sub_20A691E50()
{
  JUMPOUT(0x20A691B60);
}

void sub_20A691E58()
{
  JUMPOUT(0x20A691B70);
}

void sub_20A691E60()
{
  JUMPOUT(0x20A691B8CLL);
}

void sub_20A691E68()
{
  JUMPOUT(0x20A691B9CLL);
}

void sub_20A691E70()
{
  JUMPOUT(0x20A691BB8);
}

void sub_20A691E78()
{
  JUMPOUT(0x20A691BC8);
}

void sub_20A691E80()
{
  JUMPOUT(0x20A691BE4);
}

void sub_20A691E88()
{
  JUMPOUT(0x20A691BF4);
}

void sub_20A691E90()
{
  JUMPOUT(0x20A691BFCLL);
}

void sub_20A691E98()
{
  JUMPOUT(0x20A691C0CLL);
}

void sub_20A691EA0()
{
  JUMPOUT(0x20A691C14);
}

void sub_20A691EA8()
{
  JUMPOUT(0x20A691C24);
}

void sub_20A691EB0()
{
  JUMPOUT(0x20A691C34);
}

void sub_20A691EB8()
{
  JUMPOUT(0x20A691C50);
}

void sub_20A691EC0()
{
  JUMPOUT(0x20A691C60);
}

void mlcore::EntityQuery::artistsQuery(mlcore *a1@<X0>, char **a2@<X8>)
{
  uint64_t v4;
  char *v5;
  unint64_t *v6;
  unint64_t *v7;
  unint64_t *v8;
  unint64_t v9;
  unint64_t v10;
  __int128 *v11;
  char v12;
  uint64_t v13;
  char v14;
  __int128 v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t i;
  unint64_t v19;
  uint64_t v20;
  char *v21;
  mlcore *v22;
  mlcore *v23;
  uint64_t v24;
  void **v25;
  uint64_t v26;
  void **v27;
  void (**v28)(mlcore::SortDescriptor *__hidden);
  std::__shared_weak_count *v29;
  uint64_t *p_shared_owners;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  __int128 **v35;
  void **v36;
  void **v37;
  __int128 *v38;
  __int128 *v39;
  __int128 *v40;
  char *v41;
  std::__shared_weak_count *v42;
  char *v43;
  std::__shared_weak_count *v44;
  void ***v45;
  char v46;
  void (**v47)(mlcore::SortDescriptor *__hidden);
  mlcore *v48;
  char *v49;
  void (**v50)(mlcore::SortDescriptor *__hidden);
  uint64_t v51;
  int v52;
  uint64_t v53;

  v53 = *MEMORY[0x24BDAC8D0];
  v4 = mlcore::ArtistPropertyOrder(a1);
  v5 = (char *)operator new(0x48uLL);
  *(_OWORD *)(v5 + 8) = 0u;
  v6 = (unint64_t *)(v5 + 8);
  *(_QWORD *)v5 = &off_24C33CE88;
  *((_QWORD *)v5 + 3) = &unk_24C339CA8;
  *((_QWORD *)v5 + 4) = v4;
  *((_QWORD *)v5 + 5) = 0x100000000;
  *((_QWORD *)v5 + 6) = 0;
  *(_OWORD *)(v5 + 56) = 0u;
  v43 = v5 + 24;
  v44 = (std::__shared_weak_count *)v5;
  if (*(_QWORD *)a1)
  {
    v7 = (unint64_t *)*((_QWORD *)a1 + 1);
    v47 = *(void (***)(mlcore::SortDescriptor *__hidden))a1;
    v48 = (mlcore *)v7;
    if (v7)
    {
      v8 = v7 + 1;
      do
        v9 = __ldxr(v8);
      while (__stxr(v9 + 1, v8));
    }
    v49 = v5 + 24;
    v50 = (void (**)(mlcore::SortDescriptor *__hidden))v5;
    do
      v10 = __ldxr(v6);
    while (__stxr(v10 + 1, v6));
    v38 = 0;
    v39 = 0;
    v40 = 0;
    v35 = &v38;
    LOBYTE(v36) = 0;
    v11 = (__int128 *)operator new(0x20uLL);
    v12 = 0;
    v13 = 0;
    v38 = v11;
    v39 = v11;
    v40 = v11 + 2;
    do
    {
      v14 = v12;
      v15 = *(_OWORD *)&(&v47)[2 * v13];
      *v11 = v15;
      if (*((_QWORD *)&v15 + 1))
      {
        v16 = (unint64_t *)(*((_QWORD *)&v15 + 1) + 8);
        do
          v17 = __ldxr(v16);
        while (__stxr(v17 + 1, v16));
      }
      ++v11;
      v12 = 1;
      v13 = 1;
    }
    while ((v14 & 1) == 0);
    v39 = v11;
    mlcore::CreateAndPredicate(&v38, &v41);
    v35 = &v38;
    std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v35);
    for (i = 2; i != -2; i -= 2)
      std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)&(&v47)[i]);
  }
  else
  {
    v41 = v5 + 24;
    v42 = (std::__shared_weak_count *)v5;
    do
      v19 = __ldxr(v6);
    while (__stxr(v19 + 1, v6));
  }
  v20 = mlcore::TypedEntityClass<mlcore::Artist>::sharedPointer();
  std::allocate_shared[abi:ne180100]<mlcore::EntityQuery,std::allocator<mlcore::EntityQuery>,mlcore::EntityClass *,std::shared_ptr<mlcore::Predicate> &,void>(a2, v20, (uint64_t)v41, v42);
  v21 = *a2;
  v23 = (mlcore *)mlcore::ArtistPropertyOrder(v22);
  v47 = &off_24C337670;
  v48 = v23;
  LODWORD(v49) = 0;
  v24 = mlcore::ArtistPropertyPersistentID(v23);
  v50 = &off_24C337670;
  v51 = v24;
  v52 = 0;
  v36 = 0;
  v37 = 0;
  v35 = 0;
  v45 = (void ***)&v35;
  v46 = 0;
  v25 = (void **)operator new(0x30uLL);
  v26 = 0;
  v35 = (__int128 **)v25;
  v37 = v25 + 6;
  do
  {
    v27 = &v25[v26];
    v28 = (&v47)[v26 + 1];
    *v27 = &off_24C337670;
    v27[1] = v28;
    *((_DWORD *)v27 + 4) = (&v49)[v26];
    v26 += 3;
  }
  while (v26 != 6);
  v36 = v25 + 6;
  mlcore::PropertiesQuery::setSortDescriptors(v21, (char *)&v35);
  v45 = (void ***)&v35;
  std::vector<mlcore::SortDescriptor>::__destroy_vector::operator()[abi:ne180100]((void ***)&v45);
  v29 = v42;
  if (v42)
  {
    p_shared_owners = &v42->__shared_owners_;
    do
      v31 = __ldaxr((unint64_t *)p_shared_owners);
    while (__stlxr(v31 - 1, (unint64_t *)p_shared_owners));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  v32 = v44;
  if (v44)
  {
    v33 = (unint64_t *)&v44->__shared_owners_;
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }
}

void sub_20A692198(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t i;
  void **v5;
  va_list va;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v5 = va_arg(va1, void **);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  for (i = 16; i != -16; i -= 16)
    std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100](v2 - 88 + i);
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t mlcore::TypedEntityClass<mlcore::Artist>::sectionPropertyForOrderingProperty(mlcore *a1, mlcore *a2)
{
  mlcore *HasName;

  HasName = (mlcore *)mlcore::ArtistPropertyOrder(a1);
  if (HasName == a2)
    return mlcore::ArtistPropertyOrderSection(HasName);
  HasName = (mlcore *)mlcore::ArtistPropertyHasName(HasName);
  if (HasName == a2)
    return mlcore::ArtistPropertyOrderSection(HasName);
  else
    return 0;
}

uint64_t mlcore::ArtistPropertyOrder(mlcore *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&mlcore::ArtistPropertyOrder(void)::once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&mlcore::ArtistPropertyOrder(void)::once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ArtistPropertyOrder(void)::$_0 &&>>);
  }
  return mlcore::ArtistPropertyOrder(void)::property;
}

uint64_t mlcore::TypedEntityClass<mlcore::Artist>::databaseTable()
{
  return *(_QWORD *)mediaplatform::Singleton<mlcore::AlbumArtistTable>::sharedInstance();
}

uint64_t mediaplatform::Singleton<mlcore::AlbumArtistTable>::sharedInstance()
{
  unsigned __int8 v0;
  mlcore::AlbumArtistTable **v2;

  if ((v0 & 1) == 0
  {
    v2 = (mlcore::AlbumArtistTable **)operator new();
    _ZNSt3__115allocate_sharedB8ne180100IN6mlcore16AlbumArtistTableENS_9allocatorIS2_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(v2);
    mediaplatform::Singleton<mlcore::AlbumArtistTable>::sharedInstance(void)::_sharedInstance = (uint64_t)v2;
  }
  return mediaplatform::Singleton<mlcore::AlbumArtistTable>::sharedInstance(void)::_sharedInstance;
}

void sub_20A692348(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x20BD27AFC](v1, 0x20C40A4A59CD2);
  _Unwind_Resume(a1);
}

uint64_t mediaplatform::Singleton<mlcore::LyricsTable>::sharedInstance()
{
  unsigned __int8 v0;
  mlcore::LyricsTable **v2;

  if ((v0 & 1) == 0
  {
    v2 = (mlcore::LyricsTable **)operator new();
    _ZNSt3__115allocate_sharedB8ne180100IN6mlcore11LyricsTableENS_9allocatorIS2_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(v2);
    mediaplatform::Singleton<mlcore::LyricsTable>::sharedInstance(void)::_sharedInstance = (uint64_t)v2;
  }
  return mediaplatform::Singleton<mlcore::LyricsTable>::sharedInstance(void)::_sharedInstance;
}

void sub_20A6923F4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x20BD27AFC](v1, 0x20C40A4A59CD2);
  _Unwind_Resume(a1);
}

uint64_t mlcore::DatabaseModelProperty<int>::DatabaseModelProperty(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  std::string *v5;
  __int128 v6;

  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_QWORD *)a1 = off_24C33A108;
  *(_QWORD *)(a1 + 64) = *a2;
  *(_QWORD *)(a1 + 72) = off_24C335D90;
  v5 = (std::string *)(a1 + 80);
  if (*(char *)(a3 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *(const std::string::value_type **)(a3 + 8), *(_QWORD *)(a3 + 16));
  }
  else
  {
    v6 = *(_OWORD *)(a3 + 8);
    v5->__r_.__value_.__r.__words[2] = *(_QWORD *)(a3 + 24);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
  *(_DWORD *)(a1 + 104) = *(_DWORD *)(a3 + 32);
  *(_QWORD *)(a1 + 72) = off_24C335AF8;
  *(_QWORD *)(a1 + 108) = *(_QWORD *)(a3 + 36);
  *(_QWORD *)(a1 + 72) = off_24C336AA0;
  return a1;
}

void sub_20A6924CC(_Unwind_Exception *a1)
{
  void **v1;

  mlcore::ModelPropertyBase::~ModelPropertyBase(v1);
  _Unwind_Resume(a1);
}

mlcore::LyricsTable *mlcore::LyricsTable::LyricsTable(mlcore::LyricsTable *this)
{
  std::string *v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  std::string *v11;
  std::string *v12;
  int v13;
  std::string *v14;
  int v15;
  std::string *v16;
  int v17;
  std::string *v18;
  _BOOL4 v19;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  int v41;
  void *v42[2];
  char v43;
  void (**v44)(mediaplatform::DatabaseColumnBase *__hidden);
  std::string __p;
  int v46;
  uint64_t v47;
  void *v48[2];
  char v49;
  void (**v50)(mediaplatform::DatabaseColumnBase *__hidden);
  std::string v51;
  int v52;
  uint64_t v53;
  void *v54[2];
  char v55;
  void *v56[2];
  char v57;
  _BYTE v58[8];
  std::string v59;
  int v60;
  char v61;
  std::string v62;
  void *v63[2];
  char v64;
  void (**v65)(mediaplatform::DatabaseColumnBase *__hidden);
  std::string v66;
  int v67;
  uint64_t v68;
  void *v69[2];
  char v70;
  void (**v71)(mediaplatform::DatabaseColumnBase *__hidden);
  std::string v72;
  int v73;
  uint64_t v74;
  void *v75[2];
  char v76;
  void (**v77)(mediaplatform::DatabaseColumnBase *__hidden);
  std::string v78;
  int v79;
  uint64_t v80;
  int v81;
  std::string __s;
  uint64_t (**v83)();
  std::string v84;
  int v85;
  uint64_t v86;
  uint64_t (**v87)();
  std::string v88;
  int v89;
  uint64_t v90;
  uint64_t (**v91)();
  std::string v92;
  int v93;
  char v94;
  std::string v95;
  uint64_t (**v96)();
  std::string v97;
  int v98;
  uint64_t v99;
  uint64_t (**v100)();
  std::string v101;
  int v102;
  uint64_t v103;
  uint64_t (**v104)();
  std::string v105;
  int v106;
  uint64_t v107;
  int v108;
  std::string v109;
  uint64_t (**v110)();
  std::string v111;
  int v112;
  uint64_t v113;
  uint64_t (**v114)();
  std::string v115;
  int v116;
  uint64_t v117;
  uint64_t (**v118)();
  std::string v119;
  int v120;
  char v121;
  std::string v122;
  uint64_t (**v123)();
  std::string v124;
  int v125;
  uint64_t v126;
  uint64_t (**v127)();
  std::string v128;
  int v129;
  uint64_t v130;
  uint64_t (**v131)();
  std::string v132;
  int v133;
  uint64_t v134;
  int v135;
  uint64_t (**v136)();
  std::string v137;
  int v138;
  uint64_t v139;
  uint64_t (**v140)();
  std::string v141;
  int v142;
  uint64_t v143;
  uint64_t (**v144)();
  std::string v145;
  int v146;
  char v147;
  std::string v148;
  uint64_t (**v149)();
  std::string v150;
  int v151;
  uint64_t v152;
  uint64_t (**v153)();
  std::string v154;
  int v155;
  uint64_t v156;
  uint64_t (**v157)();
  std::string v158;
  int v159;
  uint64_t v160;
  uint64_t (**v161)();
  std::string v162;
  int v163;
  uint64_t v164;
  uint64_t (**v165)();
  std::string v166;
  int v167;
  char v168;
  std::string v169;
  uint64_t (**v170)();
  std::string v171;
  int v172;
  uint64_t v173;
  void (**v174)(mediaplatform::DatabaseColumnBase *__hidden);
  std::string v175;
  int v176;
  uint64_t v177;
  void (**v178)(mediaplatform::DatabaseColumnBase *__hidden);
  std::string v179;
  int v180;
  uint64_t v181;
  uint64_t (**v182)();
  std::string v183;
  int v184;
  char v185;
  std::string v186;
  uint64_t (**v187)();
  std::string v188;
  int v189;
  uint64_t v190;
  uint64_t (**v191)();
  std::string v192;
  int v193;
  uint64_t v194;

  std::string::basic_string[abi:ne180100]<0>(&__s, "lyrics");
  std::string::basic_string[abi:ne180100]<0>(v75, "item_pid");
  mlcore::MediaColumn<long long>::MediaColumn((uint64_t)&v77, (uint64_t)v75, 1);
  std::string::basic_string[abi:ne180100]<0>(v69, "checksum");
  mlcore::MediaColumn<int>::MediaColumn((uint64_t)&v71, (uint64_t)v69, 0);
  std::string::basic_string[abi:ne180100]<0>(v63, "pending_checksum");
  mlcore::MediaColumn<int>::MediaColumn((uint64_t)&v65, (uint64_t)v63, 0);
  std::string::basic_string[abi:ne180100]<0>(v56, "lyrics");
  std::string::basic_string[abi:ne180100]<0>(v54, "");
  mlcore::MediaColumn<std::string>::MediaColumn((uint64_t)v58, (uint64_t)v56, (uint64_t)v54);
  std::string::basic_string[abi:ne180100]<0>(v48, "store_lyrics_available");
  mlcore::MediaColumn<int>::MediaColumn((uint64_t)&v50, (uint64_t)v48, 0);
  std::string::basic_string[abi:ne180100]<0>(v42, "time_synced_lyrics_available");
  mlcore::MediaColumn<int>::MediaColumn((uint64_t)&v44, (uint64_t)v42, 0);
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v109, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
  else
    v109 = __s;
  if (SHIBYTE(v78.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v105, v78.__r_.__value_.__l.__data_, v78.__r_.__value_.__l.__size_);
  else
    v105 = v78;
  v104 = off_24C335B18;
  v107 = v80;
  v33 = v79;
  v106 = v79;
  v108 = v81;
  if (SHIBYTE(v72.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v101, v72.__r_.__value_.__l.__data_, v72.__r_.__value_.__l.__size_);
  else
    v101 = v72;
  v35 = v73;
  v102 = v73;
  v100 = off_24C335AF8;
  v34 = v74;
  v103 = v74;
  if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v97, v66.__r_.__value_.__l.__data_, v66.__r_.__value_.__l.__size_);
  else
    v97 = v66;
  v37 = v67;
  v98 = v67;
  v96 = off_24C335AF8;
  v36 = v68;
  v99 = v68;
  v91 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v92, v59.__r_.__value_.__l.__data_, v59.__r_.__value_.__l.__size_);
  else
    v92 = v59;
  v93 = v60;
  v91 = &off_24C335AB8;
  v94 = v61;
  if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v95, v62.__r_.__value_.__l.__data_, v62.__r_.__value_.__l.__size_);
  else
    v95 = v62;
  if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v88, v51.__r_.__value_.__l.__data_, v51.__r_.__value_.__l.__size_);
  else
    v88 = v51;
  v41 = v52;
  v89 = v52;
  v87 = off_24C335AF8;
  v40 = v53;
  v90 = v53;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v84, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  else
    v84 = __p;
  v39 = v46;
  v85 = v46;
  v83 = off_24C335AF8;
  v38 = v47;
  v86 = v47;
  *(_QWORD *)this = &off_24C330F50;
  v2 = (std::string *)((char *)this + 8);
  v32 = SHIBYTE(v109.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v109.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v2, v109.__r_.__value_.__l.__data_, v109.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = *(_OWORD *)&v109.__r_.__value_.__l.__data_;
    *((_QWORD *)this + 3) = *((_QWORD *)&v109.__r_.__value_.__l + 2);
  }
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 6) = 0;
  *((_QWORD *)this + 7) = 0;
  *(_QWORD *)this = &off_24C335788;
  *((_QWORD *)this + 8) = 0;
  *((_QWORD *)this + 9) = 0;
  v31 = SHIBYTE(v105.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v105.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v132, v105.__r_.__value_.__l.__data_, v105.__r_.__value_.__l.__size_);
  else
    v132 = v105;
  v131 = off_24C335B18;
  v134 = v107;
  v133 = v33;
  v135 = v108;
  v30 = SHIBYTE(v101.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v101.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v128, v101.__r_.__value_.__l.__data_, v101.__r_.__value_.__l.__size_);
  else
    v128 = v101;
  v129 = v35;
  v127 = off_24C335AF8;
  v130 = v34;
  v29 = SHIBYTE(v97.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v124, v97.__r_.__value_.__l.__data_, v97.__r_.__value_.__l.__size_);
  else
    v124 = v97;
  v125 = v37;
  v123 = off_24C335AF8;
  v126 = v36;
  v118 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v92.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v119, v92.__r_.__value_.__l.__data_, v92.__r_.__value_.__l.__size_);
  else
    v119 = v92;
  v120 = v93;
  v118 = &off_24C335AB8;
  v121 = v94;
  if (SHIBYTE(v95.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v122, v95.__r_.__value_.__l.__data_, v95.__r_.__value_.__l.__size_);
  else
    v122 = v95;
  v28 = SHIBYTE(v88.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v88.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v115, v88.__r_.__value_.__l.__data_, v88.__r_.__value_.__l.__size_);
  else
    v115 = v88;
  v116 = v41;
  v114 = off_24C335AF8;
  v117 = v40;
  v3 = SHIBYTE(v84.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v84.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v111, v84.__r_.__value_.__l.__data_, v84.__r_.__value_.__l.__size_);
  else
    v111 = v84;
  v112 = v39;
  v110 = off_24C335AF8;
  v113 = v38;
  v4 = SHIBYTE(v128.__r_.__value_.__r.__words[2]);
  v27 = v3;
  if (SHIBYTE(v128.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v154, v128.__r_.__value_.__l.__data_, v128.__r_.__value_.__l.__size_);
  else
    v154 = v128;
  v155 = v35;
  v153 = off_24C335AF8;
  v156 = v34;
  v25 = SHIBYTE(v124.__r_.__value_.__r.__words[2]);
  v26 = v4;
  if (SHIBYTE(v124.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v150, v124.__r_.__value_.__l.__data_, v124.__r_.__value_.__l.__size_);
  else
    v150 = v124;
  v151 = v37;
  v149 = off_24C335AF8;
  v152 = v36;
  v144 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v119.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v145, v119.__r_.__value_.__l.__data_, v119.__r_.__value_.__l.__size_);
  else
    v145 = v119;
  v146 = v120;
  v144 = &off_24C335AB8;
  v147 = v121;
  if (SHIBYTE(v122.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v148, v122.__r_.__value_.__l.__data_, v122.__r_.__value_.__l.__size_);
  else
    v148 = v122;
  v24 = SHIBYTE(v115.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v115.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v141, v115.__r_.__value_.__l.__data_, v115.__r_.__value_.__l.__size_);
  else
    v141 = v115;
  v142 = v41;
  v140 = off_24C335AF8;
  v143 = v40;
  v5 = SHIBYTE(v111.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v111.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v137, v111.__r_.__value_.__l.__data_, v111.__r_.__value_.__l.__size_);
  else
    v137 = v111;
  v138 = v39;
  v136 = off_24C335AF8;
  v139 = v38;
  v170 = (uint64_t (**)())off_24C335D90;
  v6 = SHIBYTE(v150.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v150.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v171, v150.__r_.__value_.__l.__data_, v150.__r_.__value_.__l.__size_);
  else
    v171 = v150;
  v172 = v37;
  v170 = off_24C335AF8;
  v173 = v36;
  v165 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v145.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v166, v145.__r_.__value_.__l.__data_, v145.__r_.__value_.__l.__size_);
  else
    v166 = v145;
  v167 = v146;
  v165 = &off_24C335AB8;
  v168 = v147;
  if (SHIBYTE(v148.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v169, v148.__r_.__value_.__l.__data_, v148.__r_.__value_.__l.__size_);
  else
    v169 = v148;
  v161 = (uint64_t (**)())off_24C335D90;
  v23 = SHIBYTE(v141.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v141.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v162, v141.__r_.__value_.__l.__data_, v141.__r_.__value_.__l.__size_);
  else
    v162 = v141;
  v163 = v41;
  v161 = off_24C335AF8;
  v164 = v40;
  v157 = (uint64_t (**)())off_24C335D90;
  v22 = SHIBYTE(v137.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v137.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v158, v137.__r_.__value_.__l.__data_, v137.__r_.__value_.__l.__size_);
  else
    v158 = v137;
  v159 = v39;
  v157 = off_24C335AF8;
  v160 = v38;
  v182 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v166.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v183, v166.__r_.__value_.__l.__data_, v166.__r_.__value_.__l.__size_);
  else
    v183 = v166;
  v184 = v167;
  v182 = &off_24C335AB8;
  v185 = v168;
  v21 = v6;
  if (SHIBYTE(v169.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v186, v169.__r_.__value_.__l.__data_, v169.__r_.__value_.__l.__size_);
  else
    v186 = v169;
  v178 = off_24C335D90;
  v7 = SHIBYTE(v162.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v162.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v179, v162.__r_.__value_.__l.__data_, v162.__r_.__value_.__l.__size_);
  else
    v179 = v162;
  v180 = v41;
  v181 = v40;
  v174 = off_24C335D90;
  v8 = SHIBYTE(v158.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v158.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v175, v158.__r_.__value_.__l.__data_, v158.__r_.__value_.__l.__size_);
  else
    v175 = v158;
  v176 = v39;
  v177 = v38;
  v191 = (uint64_t (**)())off_24C335D90;
  v9 = SHIBYTE(v179.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v179.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v192, v179.__r_.__value_.__l.__data_, v179.__r_.__value_.__l.__size_);
  else
    v192 = v179;
  v193 = v41;
  v191 = off_24C335AF8;
  v194 = v40;
  v187 = (uint64_t (**)())off_24C335D90;
  v10 = SHIBYTE(v175.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v175.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v188, v175.__r_.__value_.__l.__data_, v175.__r_.__value_.__l.__size_);
  else
    v188 = v175;
  v189 = v39;
  v187 = off_24C335AF8;
  v190 = v38;
  mediaplatform::DatabaseColumnTuple<4ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::DatabaseColumnTuple((uint64_t)this + 80, (uint64_t)&v191, (uint64_t)&v187);
  v187 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v188.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v188.__r_.__value_.__l.__data_);
  v191 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v192.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v192.__r_.__value_.__l.__data_);
  *((_QWORD *)this + 22) = off_24C335D90;
  if (SHIBYTE(v183.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 184), v183.__r_.__value_.__l.__data_, v183.__r_.__value_.__l.__size_);
  else
    *(std::string *)((char *)this + 184) = v183;
  *((_DWORD *)this + 52) = v184;
  *((_QWORD *)this + 22) = &off_24C335AB8;
  *((_BYTE *)this + 212) = v185;
  v11 = (std::string *)((char *)this + 216);
  if (SHIBYTE(v186.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v11, v186.__r_.__value_.__l.__data_, v186.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v11->__r_.__value_.__l.__data_ = *(_OWORD *)&v186.__r_.__value_.__l.__data_;
    *((_QWORD *)this + 29) = *((_QWORD *)&v186.__r_.__value_.__l + 2);
  }
  v174 = off_24C335D90;
  if (v10 < 0)
    operator delete(v175.__r_.__value_.__l.__data_);
  v178 = off_24C335D90;
  if (v9 < 0)
    operator delete(v179.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v182);
  *((_QWORD *)this + 30) = off_24C335D90;
  v12 = (std::string *)((char *)this + 248);
  v13 = SHIBYTE(v171.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v171.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v12, v171.__r_.__value_.__l.__data_, v171.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v12->__r_.__value_.__l.__data_ = *(_OWORD *)&v171.__r_.__value_.__l.__data_;
    *((_QWORD *)this + 33) = *((_QWORD *)&v171.__r_.__value_.__l + 2);
  }
  *((_DWORD *)this + 68) = v37;
  *((_QWORD *)this + 30) = off_24C335AF8;
  *(_QWORD *)((char *)this + 276) = v36;
  v157 = (uint64_t (**)())off_24C335D90;
  if (v8 < 0)
    operator delete(v158.__r_.__value_.__l.__data_);
  v161 = (uint64_t (**)())off_24C335D90;
  if (v7 < 0)
    operator delete(v162.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v165);
  v170 = (uint64_t (**)())off_24C335D90;
  if (v13 < 0)
    operator delete(v171.__r_.__value_.__l.__data_);
  *((_QWORD *)this + 36) = off_24C335D90;
  v14 = (std::string *)((char *)this + 296);
  v15 = SHIBYTE(v154.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v154.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v14, v154.__r_.__value_.__l.__data_, v154.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v14->__r_.__value_.__l.__data_ = *(_OWORD *)&v154.__r_.__value_.__l.__data_;
    *((_QWORD *)this + 39) = *((_QWORD *)&v154.__r_.__value_.__l + 2);
  }
  *((_DWORD *)this + 80) = v35;
  *((_QWORD *)this + 36) = off_24C335AF8;
  *(_QWORD *)((char *)this + 324) = v34;
  v136 = (uint64_t (**)())off_24C335D90;
  if (v22 < 0)
    operator delete(v137.__r_.__value_.__l.__data_);
  if (v23 < 0)
    operator delete(v141.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v144);
  if (v21 < 0)
  {
    operator delete(v150.__r_.__value_.__l.__data_);
    if ((v15 & 0x80000000) == 0)
      goto LABEL_132;
  }
  else if ((v15 & 0x80000000) == 0)
  {
    goto LABEL_132;
  }
  operator delete(v154.__r_.__value_.__l.__data_);
LABEL_132:
  *((_QWORD *)this + 42) = off_24C335D90;
  v16 = (std::string *)((char *)this + 344);
  v17 = SHIBYTE(v132.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v132.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v16, v132.__r_.__value_.__l.__data_, v132.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v16->__r_.__value_.__l.__data_ = *(_OWORD *)&v132.__r_.__value_.__l.__data_;
    *((_QWORD *)this + 45) = *((_QWORD *)&v132.__r_.__value_.__l + 2);
  }
  *((_DWORD *)this + 92) = v33;
  *((_QWORD *)this + 42) = off_24C335B18;
  *(_QWORD *)((char *)this + 372) = v134;
  *((_DWORD *)this + 95) = v135;
  if (v5 < 0)
    operator delete(v111.__r_.__value_.__l.__data_);
  if (v24 < 0)
    operator delete(v115.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v118);
  if (v25 < 0)
    operator delete(v124.__r_.__value_.__l.__data_);
  if (v26 < 0)
  {
    operator delete(v128.__r_.__value_.__l.__data_);
    if ((v17 & 0x80000000) == 0)
      goto LABEL_145;
  }
  else if ((v17 & 0x80000000) == 0)
  {
    goto LABEL_145;
  }
  operator delete(v132.__r_.__value_.__l.__data_);
LABEL_145:
  v83 = (uint64_t (**)())off_24C335D90;
  if (v27 < 0)
    operator delete(v84.__r_.__value_.__l.__data_);
  v87 = (uint64_t (**)())off_24C335D90;
  if (v28 < 0)
    operator delete(v88.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v91);
  v96 = (uint64_t (**)())off_24C335D90;
  if (v29 < 0)
    operator delete(v97.__r_.__value_.__l.__data_);
  v100 = (uint64_t (**)())off_24C335D90;
  if (v30 < 0)
    operator delete(v101.__r_.__value_.__l.__data_);
  v104 = (uint64_t (**)())off_24C335D90;
  if (v31 < 0)
    operator delete(v105.__r_.__value_.__l.__data_);
  if (v32 < 0)
    operator delete(v109.__r_.__value_.__l.__data_);
  *(_QWORD *)this = &off_24C3362F0;
  *((_QWORD *)this + 48) = off_24C335D90;
  if (SHIBYTE(v78.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 392), v78.__r_.__value_.__l.__data_, v78.__r_.__value_.__l.__size_);
  else
    *(std::string *)((char *)this + 392) = v78;
  *((_DWORD *)this + 104) = v79;
  *(_QWORD *)((char *)this + 420) = v80;
  *((_DWORD *)this + 107) = v81;
  *((_QWORD *)this + 48) = off_24C336AC0;
  *((_QWORD *)this + 54) = off_24C335D90;
  if (SHIBYTE(v72.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 440), v72.__r_.__value_.__l.__data_, v72.__r_.__value_.__l.__size_);
  else
    *(std::string *)((char *)this + 440) = v72;
  *((_DWORD *)this + 116) = v73;
  *(_QWORD *)((char *)this + 468) = v74;
  *((_QWORD *)this + 54) = off_24C336AA0;
  *((_QWORD *)this + 60) = off_24C335D90;
  if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 488), v66.__r_.__value_.__l.__data_, v66.__r_.__value_.__l.__size_);
  else
    *(std::string *)((char *)this + 488) = v66;
  *((_DWORD *)this + 128) = v67;
  *(_QWORD *)((char *)this + 516) = v68;
  *((_QWORD *)this + 60) = off_24C336AA0;
  std::__tuple_leaf<3ul,mlcore::MediaColumn<std::string>,false>::__tuple_leaf[abi:ne180100]<mlcore::MediaColumn<std::string>&,void>((uint64_t)this + 528, (uint64_t)v58);
  *((_QWORD *)this + 74) = off_24C335D90;
  if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external((std::string *)this + 25, v51.__r_.__value_.__l.__data_, v51.__r_.__value_.__l.__size_);
  else
    *((std::string *)this + 25) = v51;
  *((_DWORD *)this + 156) = v52;
  *(_QWORD *)((char *)this + 628) = v53;
  *((_QWORD *)this + 74) = off_24C336AA0;
  *((_QWORD *)this + 80) = off_24C335D90;
  v18 = (std::string *)((char *)this + 648);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v18, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    v19 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0;
  }
  else
  {
    v19 = 0;
    *(_OWORD *)&v18->__r_.__value_.__l.__data_ = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    *((_QWORD *)this + 83) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
  }
  *((_DWORD *)this + 168) = v46;
  *(_QWORD *)((char *)this + 676) = v47;
  *((_QWORD *)this + 80) = off_24C336AA0;
  v44 = off_24C335D90;
  if (v19)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (v43 < 0)
    operator delete(v42[0]);
  v50 = off_24C335D90;
  if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v51.__r_.__value_.__l.__data_);
  if (v49 < 0)
    operator delete(v48[0]);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)v58);
  if (v55 < 0)
    operator delete(v54[0]);
  if (v57 < 0)
    operator delete(v56[0]);
  v65 = off_24C335D90;
  if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v66.__r_.__value_.__l.__data_);
  if (v64 < 0)
    operator delete(v63[0]);
  v71 = off_24C335D90;
  if (SHIBYTE(v72.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v72.__r_.__value_.__l.__data_);
  if (v70 < 0)
    operator delete(v69[0]);
  v77 = off_24C335D90;
  if (SHIBYTE(v78.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v78.__r_.__value_.__l.__data_);
  if (v76 < 0)
    operator delete(v75[0]);
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__s.__r_.__value_.__l.__data_);
  *(_QWORD *)this = &off_24C336A08;
  return this;
}

void sub_20A6936EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,void *__p,uint64_t a43,int a44,__int16 a45,char a46,char a47,uint64_t a48,uint64_t a49,void *a50,uint64_t a51,int a52,__int16 a53,char a54,char a55,uint64_t a56,void *a57,uint64_t a58,int a59,__int16 a60,char a61,char a62,uint64_t a63)
{
  void *a65;
  char a70;
  void *a71;
  char a72;
  char a73;
  void *a74;
  char a75;
  void (**a76)(mediaplatform::DatabaseColumnBase *__hidden);
  void *a77;
  uint64_t v77;
  void **v78;
  void **v79;
  void **v80;
  uint64_t v81;
  void **v82;

  *(_QWORD *)(v77 + 592) = off_24C335D90;
  if (*(char *)(v77 + 623) < 0)
    operator delete(*v82);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(v81);
  *(_QWORD *)(v77 + 480) = off_24C335D90;
  if (*(char *)(v77 + 511) < 0)
    operator delete(*v80);
  *(_QWORD *)(v77 + 432) = off_24C335D90;
  if (*(char *)(v77 + 463) < 0)
    operator delete(*v79);
  *(_QWORD *)(v77 + 384) = off_24C335D90;
  if (*(char *)(v77 + 415) < 0)
    operator delete(*v78);
  mediaplatform::DatabaseTable<long long,int,int,std::string,int,int>::~DatabaseTable(v77);
  if (a47 < 0)
    operator delete(__p);
  if (a40 < 0)
    operator delete(a35);
  if (a62 < 0)
    operator delete(a57);
  if (a55 < 0)
    operator delete(a50);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&a73);
  if (a70 < 0)
    operator delete(a65);
  if (a72 < 0)
    operator delete(a71);
  a76 = off_24C335D90;
  if (SLOBYTE(STACK[0x207]) < 0)
    operator delete(a77);
  if (a75 < 0)
    operator delete(a74);
  STACK[0x230] = (unint64_t)off_24C335D90;
  if (SLOBYTE(STACK[0x24F]) < 0)
    operator delete((void *)STACK[0x238]);
  if (SLOBYTE(STACK[0x22F]) < 0)
    operator delete((void *)STACK[0x218]);
  STACK[0x278] = (unint64_t)off_24C335D90;
  if (SLOBYTE(STACK[0x297]) < 0)
    operator delete((void *)STACK[0x280]);
  if (SLOBYTE(STACK[0x277]) < 0)
    operator delete((void *)STACK[0x260]);
  if (SLOBYTE(STACK[0x2BF]) < 0)
    operator delete((void *)STACK[0x2A8]);
  _Unwind_Resume(a1);
}

void sub_20A693CD4()
{
  JUMPOUT(0x20A693BD4);
}

void sub_20A693CDC()
{
  JUMPOUT(0x20A693BE4);
}

void sub_20A693CE4()
{
  JUMPOUT(0x20A693C00);
}

void sub_20A693CEC()
{
  JUMPOUT(0x20A693C10);
}

void sub_20A693CF4()
{
  JUMPOUT(0x20A693C18);
}

void sub_20A693CFC()
{
  JUMPOUT(0x20A693C28);
}

void sub_20A693D04()
{
  JUMPOUT(0x20A693C38);
}

void sub_20A693D0C()
{
  JUMPOUT(0x20A693C54);
}

void sub_20A693D14()
{
  JUMPOUT(0x20A693C64);
}

void sub_20A693D1C()
{
  JUMPOUT(0x20A693C80);
}

void sub_20A693D24()
{
  JUMPOUT(0x20A693C90);
}

void sub_20A693D2C()
{
  JUMPOUT(0x20A693CACLL);
}

void sub_20A693D34()
{
  JUMPOUT(0x20A693CBCLL);
}

uint64_t mlcore::PlaylistAuthorSocialProfileID(mlcore *this)
{
  mlcore *v1;
  uint64_t v2;
  uint64_t v4[2];

  v1 = (mlcore *)mlcore::PlaylistAuthorPropertyPersonPersistentID(this);
  v2 = mlcore::PersonPropertyCloudIdentifier(v1);
  v4[0] = 0;
  v4[1] = 0;
  return mlcore::GetForeignProperty<std::string>((uint64_t)v1, v2, v4);
}

void sub_20A693D7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t mlcore::PlaylistAuthorPropertyPersonPersistentID(mlcore *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&mlcore::PlaylistAuthorPropertyPersonPersistentID(void)::once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&mlcore::PlaylistAuthorPropertyPersonPersistentID(void)::once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::PlaylistAuthorPropertyPersonPersistentID(void)::$_0 &&>>);
  }
  return mlcore::PlaylistAuthorPropertyPersonPersistentID(void)::property;
}

uint64_t mlcore::PersonPropertyCloudIdentifier(mlcore *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&mlcore::PersonPropertyCloudIdentifier(void)::once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&mlcore::PersonPropertyCloudIdentifier(void)::once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::PersonPropertyCloudIdentifier(void)::$_0 &&>>);
  }
  return mlcore::PersonPropertyCloudIdentifier(void)::property;
}

uint64_t mediaplatform::Singleton<mlcore::CloudKVSTable>::sharedInstance()
{
  unsigned __int8 v0;
  mlcore::CloudKVSTable **v2;

  if ((v0 & 1) == 0
  {
    v2 = (mlcore::CloudKVSTable **)operator new();
    _ZNSt3__115allocate_sharedB8ne180100IN6mlcore13CloudKVSTableENS_9allocatorIS2_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(v2);
    mediaplatform::Singleton<mlcore::CloudKVSTable>::sharedInstance(void)::_sharedInstance = (uint64_t)v2;
  }
  return mediaplatform::Singleton<mlcore::CloudKVSTable>::sharedInstance(void)::_sharedInstance;
}

void sub_20A693EBC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x20BD27AFC](v1, 0x20C40A4A59CD2);
  _Unwind_Resume(a1);
}

uint64_t mlcore::TypedEntityClass<mlcore::CloudKVSEntity>::sharedPointer()
{
  unint64_t v0;
  char v2;
  char **v3;
  char *v4;

  v0 = atomic_load(&mlcore::TypedEntityClass<mlcore::CloudKVSEntity>::sharedPointer(void)::__once);
  if (v0 != -1)
  {
    v4 = &v2;
    v3 = &v4;
    std::__call_once(&mlcore::TypedEntityClass<mlcore::CloudKVSEntity>::sharedPointer(void)::__once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::TypedEntityClass<mlcore::CloudKVSEntity>::sharedPointer(void)::{lambda(void)#1} &&>>);
  }
  return mlcore::TypedEntityClass<mlcore::CloudKVSEntity>::sharedPointer(void)::__sharedPointer;
}

uint64_t mlcore::TypedEntityClass<mlcore::PlaylistItem>::databaseTable()
{
  return *(_QWORD *)mediaplatform::Singleton<mlcore::ContainerItemTable>::sharedInstance();
}

uint64_t mediaplatform::Singleton<mlcore::ContainerItemTable>::sharedInstance()
{
  unsigned __int8 v0;
  mlcore::ContainerItemTable **v2;

  if ((v0 & 1) == 0
  {
    v2 = (mlcore::ContainerItemTable **)operator new();
    _ZNSt3__115allocate_sharedB8ne180100IN6mlcore18ContainerItemTableENS_9allocatorIS2_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(v2);
    mediaplatform::Singleton<mlcore::ContainerItemTable>::sharedInstance(void)::_sharedInstance = (uint64_t)v2;
  }
  return mediaplatform::Singleton<mlcore::ContainerItemTable>::sharedInstance(void)::_sharedInstance;
}

void sub_20A693FDC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x20BD27AFC](v1, 0x20C40A4A59CD2);
  _Unwind_Resume(a1);
}

uint64_t mlcore::DatabaseModelProperty<long long>::DatabaseModelProperty(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  std::string *v5;
  __int128 v6;
  uint64_t v7;

  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_QWORD *)a1 = off_24C33A190;
  *(_QWORD *)(a1 + 64) = *a2;
  *(_QWORD *)(a1 + 72) = off_24C335D90;
  v5 = (std::string *)(a1 + 80);
  if (*(char *)(a3 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *(const std::string::value_type **)(a3 + 8), *(_QWORD *)(a3 + 16));
  }
  else
  {
    v6 = *(_OWORD *)(a3 + 8);
    v5->__r_.__value_.__r.__words[2] = *(_QWORD *)(a3 + 24);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
  *(_DWORD *)(a1 + 104) = *(_DWORD *)(a3 + 32);
  *(_QWORD *)(a1 + 72) = off_24C335B18;
  v7 = *(_QWORD *)(a3 + 36);
  *(_DWORD *)(a1 + 116) = *(_DWORD *)(a3 + 44);
  *(_QWORD *)(a1 + 108) = v7;
  *(_QWORD *)(a1 + 72) = off_24C336AC0;
  return a1;
}

void sub_20A6940BC(_Unwind_Exception *a1)
{
  void **v1;

  mlcore::ModelPropertyBase::~ModelPropertyBase(v1);
  _Unwind_Resume(a1);
}

mlcore::ContainerItemTable *mlcore::ContainerItemTable::ContainerItemTable(mlcore::ContainerItemTable *this)
{
  std::string *v2;
  int v3;
  int v4;
  int v5;
  std::string *v6;
  std::string *v7;
  std::string *v8;
  std::string *v9;
  int v10;
  std::string *v11;
  int v12;
  std::string *v13;
  int v14;
  std::string *v15;
  int v16;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  void *__p[2];
  char v33;
  void *v34[2];
  char v35;
  _BYTE v36[8];
  std::string v37;
  int v38;
  char v39;
  std::string v40;
  void *v41[2];
  char v42;
  void *v43[2];
  char v44;
  _BYTE v45[8];
  std::string v46;
  int v47;
  char v48;
  std::string v49;
  void *v50[2];
  char v51;
  void *v52[2];
  char v53;
  _BYTE v54[8];
  std::string v55;
  int v56;
  char v57;
  std::string v58;
  void *v59[2];
  char v60;
  void (**v61)(mediaplatform::DatabaseColumnBase *__hidden);
  std::string v62;
  int v63;
  uint64_t v64;
  int v65;
  void *v66[2];
  char v67;
  void (**v68)(mediaplatform::DatabaseColumnBase *__hidden);
  std::string v69;
  int v70;
  uint64_t v71;
  int v72;
  void *v73[2];
  char v74;
  void (**v75)(mediaplatform::DatabaseColumnBase *__hidden);
  std::string v76;
  int v77;
  uint64_t v78;
  int v79;
  void *v80[2];
  char v81;
  void (**v82)(mediaplatform::DatabaseColumnBase *__hidden);
  std::string v83;
  int v84;
  uint64_t v85;
  int v86;
  std::string __s;
  uint64_t (**v88)();
  std::string v89;
  int v90;
  char v91;
  std::string v92;
  uint64_t (**v93)();
  std::string v94;
  int v95;
  char v96;
  std::string v97;
  uint64_t (**v98)();
  std::string v99;
  int v100;
  char v101;
  std::string v102;
  uint64_t (**v103)();
  std::string v104;
  int v105;
  uint64_t v106;
  int v107;
  uint64_t (**v108)();
  std::string v109;
  int v110;
  uint64_t v111;
  int v112;
  uint64_t (**v113)();
  std::string v114;
  int v115;
  uint64_t v116;
  int v117;
  uint64_t (**v118)();
  std::string v119;
  int v120;
  uint64_t v121;
  int v122;
  std::string v123;
  uint64_t (**v124)();
  std::string v125;
  int v126;
  char v127;
  std::string v128;
  uint64_t (**v129)();
  std::string v130;
  int v131;
  char v132;
  std::string v133;
  uint64_t (**v134)();
  std::string v135;
  int v136;
  char v137;
  std::string v138;
  uint64_t (**v139)();
  std::string v140;
  int v141;
  uint64_t v142;
  int v143;
  uint64_t (**v144)();
  std::string v145;
  int v146;
  uint64_t v147;
  int v148;
  uint64_t (**v149)();
  std::string v150;
  int v151;
  uint64_t v152;
  int v153;
  uint64_t (**v154)();
  std::string v155;
  int v156;
  uint64_t v157;
  int v158;
  uint64_t (**v159)();
  std::string v160;
  int v161;
  char v162;
  std::string v163;
  uint64_t (**v164)();
  std::string v165;
  int v166;
  char v167;
  std::string v168;
  uint64_t (**v169)();
  std::string v170;
  int v171;
  char v172;
  std::string v173;
  uint64_t (**v174)();
  std::string v175;
  int v176;
  uint64_t v177;
  int v178;
  uint64_t (**v179)();
  std::string v180;
  int v181;
  uint64_t v182;
  int v183;
  uint64_t (**v184)();
  std::string v185;
  int v186;
  uint64_t v187;
  int v188;
  uint64_t (**v189)();
  std::string v190;
  int v191;
  char v192;
  std::string v193;
  uint64_t (**v194)();
  std::string v195;
  int v196;
  char v197;
  std::string v198;
  uint64_t (**v199)();
  std::string v200;
  int v201;
  char v202;
  std::string v203;
  uint64_t (**v204)();
  std::string v205;
  int v206;
  uint64_t v207;
  int v208;
  uint64_t (**v209)();
  std::string v210;
  int v211;
  uint64_t v212;
  int v213;
  uint64_t (**v214)();
  std::string v215;
  int v216;
  char v217;
  std::string v218;
  uint64_t (**v219)();
  std::string v220;
  int v221;
  char v222;
  std::string v223;
  uint64_t (**v224)();
  std::string v225;
  int v226;
  char v227;
  std::string v228;
  uint64_t (**v229)();
  std::string v230;
  int v231;
  uint64_t v232;
  int v233;
  uint64_t (**v234)();
  std::string v235;
  int v236;
  char v237;
  std::string v238;
  uint64_t (**v239)();
  std::string v240;
  int v241;
  char v242;
  std::string v243;
  uint64_t (**v244)();
  std::string v245;
  int v246;
  char v247;
  std::string v248;
  uint64_t (**v249)();
  std::string v250;
  int v251;
  char v252;
  std::string v253;
  uint64_t (**v254)();
  std::string v255;
  int v256;
  char v257;
  std::string v258;
  uint64_t (**v259)();
  std::string v260;
  int v261;
  char v262;
  std::string v263;

  std::string::basic_string[abi:ne180100]<0>(&__s, "container_item");
  std::string::basic_string[abi:ne180100]<0>(v80, "container_item_pid");
  mlcore::MediaColumn<long long>::MediaColumn((uint64_t)&v82, (uint64_t)v80, 1);
  std::string::basic_string[abi:ne180100]<0>(v73, "container_pid");
  mlcore::MediaColumn<long long>::MediaColumn((uint64_t)&v75, (uint64_t)v73);
  std::string::basic_string[abi:ne180100]<0>(v66, "item_pid");
  mlcore::MediaColumn<long long>::MediaColumn((uint64_t)&v68, (uint64_t)v66);
  std::string::basic_string[abi:ne180100]<0>(v59, "position");
  mlcore::MediaColumn<long long>::MediaColumn((uint64_t)&v61, (uint64_t)v59);
  std::string::basic_string[abi:ne180100]<0>(v52, "uuid");
  std::string::basic_string[abi:ne180100]<0>(v50, "");
  mlcore::MediaColumn<std::string>::MediaColumn((uint64_t)v54, (uint64_t)v52, (uint64_t)v50);
  std::string::basic_string[abi:ne180100]<0>(v43, "position_uuid");
  std::string::basic_string[abi:ne180100]<0>(v41, "");
  mlcore::MediaColumn<std::string>::MediaColumn((uint64_t)v45, (uint64_t)v43, (uint64_t)v41);
  std::string::basic_string[abi:ne180100]<0>(v34, "occurrence_id");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  mlcore::MediaColumn<std::string>::MediaColumn((uint64_t)v36, (uint64_t)v34, (uint64_t)__p);
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v123, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
  else
    v123 = __s;
  if (SHIBYTE(v83.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v119, v83.__r_.__value_.__l.__data_, v83.__r_.__value_.__l.__size_);
  else
    v119 = v83;
  v118 = off_24C335B18;
  v121 = v85;
  v27 = v84;
  v120 = v84;
  v122 = v86;
  if (SHIBYTE(v76.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v114, v76.__r_.__value_.__l.__data_, v76.__r_.__value_.__l.__size_);
  else
    v114 = v76;
  v113 = off_24C335B18;
  v116 = v78;
  v29 = v77;
  v115 = v77;
  v117 = v79;
  if (SHIBYTE(v69.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v109, v69.__r_.__value_.__l.__data_, v69.__r_.__value_.__l.__size_);
  else
    v109 = v69;
  v108 = off_24C335B18;
  v111 = v71;
  v30 = v70;
  v110 = v70;
  v112 = v72;
  if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v104, v62.__r_.__value_.__l.__data_, v62.__r_.__value_.__l.__size_);
  else
    v104 = v62;
  v103 = off_24C335B18;
  v106 = v64;
  v31 = v63;
  v105 = v63;
  v107 = v65;
  v98 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v99, v55.__r_.__value_.__l.__data_, v55.__r_.__value_.__l.__size_);
  else
    v99 = v55;
  v100 = v56;
  v98 = &off_24C335AB8;
  v101 = v57;
  if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v102, v58.__r_.__value_.__l.__data_, v58.__r_.__value_.__l.__size_);
  else
    v102 = v58;
  v93 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v94, v46.__r_.__value_.__l.__data_, v46.__r_.__value_.__l.__size_);
  else
    v94 = v46;
  v95 = v47;
  v93 = &off_24C335AB8;
  v96 = v48;
  if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v97, v49.__r_.__value_.__l.__data_, v49.__r_.__value_.__l.__size_);
  else
    v97 = v49;
  v88 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v89, v37.__r_.__value_.__l.__data_, v37.__r_.__value_.__l.__size_);
  else
    v89 = v37;
  v90 = v38;
  v88 = &off_24C335AB8;
  v91 = v39;
  if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v92, v40.__r_.__value_.__l.__data_, v40.__r_.__value_.__l.__size_);
  else
    v92 = v40;
  *(_QWORD *)this = &off_24C330F50;
  v2 = (std::string *)((char *)this + 8);
  v22 = SHIBYTE(v123.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v123.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v2, v123.__r_.__value_.__l.__data_, v123.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = *(_OWORD *)&v123.__r_.__value_.__l.__data_;
    *((_QWORD *)this + 3) = *((_QWORD *)&v123.__r_.__value_.__l + 2);
  }
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 6) = 0;
  *((_QWORD *)this + 7) = 0;
  *(_QWORD *)this = &off_24C330D28;
  *((_QWORD *)this + 8) = 0;
  *((_QWORD *)this + 9) = 0;
  v21 = SHIBYTE(v119.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v119.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v155, v119.__r_.__value_.__l.__data_, v119.__r_.__value_.__l.__size_);
  else
    v155 = v119;
  v154 = off_24C335B18;
  v157 = v121;
  v156 = v27;
  v158 = v122;
  v20 = SHIBYTE(v114.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v114.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v150, v114.__r_.__value_.__l.__data_, v114.__r_.__value_.__l.__size_);
  else
    v150 = v114;
  v149 = off_24C335B18;
  v152 = v116;
  v151 = v29;
  v153 = v117;
  v3 = SHIBYTE(v109.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v109.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v145, v109.__r_.__value_.__l.__data_, v109.__r_.__value_.__l.__size_);
  else
    v145 = v109;
  v144 = off_24C335B18;
  v147 = v111;
  v146 = v30;
  v148 = v112;
  v4 = SHIBYTE(v104.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v104.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v140, v104.__r_.__value_.__l.__data_, v104.__r_.__value_.__l.__size_);
  else
    v140 = v104;
  v139 = off_24C335B18;
  v142 = v106;
  v141 = v31;
  v143 = v107;
  v134 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v99.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v135, v99.__r_.__value_.__l.__data_, v99.__r_.__value_.__l.__size_);
  else
    v135 = v99;
  v136 = v100;
  v134 = &off_24C335AB8;
  v137 = v101;
  if (SHIBYTE(v102.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v138, v102.__r_.__value_.__l.__data_, v102.__r_.__value_.__l.__size_);
  else
    v138 = v102;
  v129 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v94.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v130, v94.__r_.__value_.__l.__data_, v94.__r_.__value_.__l.__size_);
  else
    v130 = v94;
  v131 = v95;
  v129 = &off_24C335AB8;
  v132 = v96;
  v18 = v3;
  if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v133, v97.__r_.__value_.__l.__data_, v97.__r_.__value_.__l.__size_);
  else
    v133 = v97;
  v124 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v89.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v125, v89.__r_.__value_.__l.__data_, v89.__r_.__value_.__l.__size_);
  else
    v125 = v89;
  v126 = v90;
  v124 = &off_24C335AB8;
  v127 = v91;
  if (SHIBYTE(v92.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v128, v92.__r_.__value_.__l.__data_, v92.__r_.__value_.__l.__size_);
  else
    v128 = v92;
  v25 = SHIBYTE(v150.__r_.__value_.__r.__words[2]);
  v19 = v4;
  if (SHIBYTE(v150.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v185, v150.__r_.__value_.__l.__data_, v150.__r_.__value_.__l.__size_);
  else
    v185 = v150;
  v184 = off_24C335B18;
  v187 = v116;
  v186 = v29;
  v188 = v117;
  v24 = SHIBYTE(v145.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v145.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v180, v145.__r_.__value_.__l.__data_, v145.__r_.__value_.__l.__size_);
  else
    v180 = v145;
  v179 = off_24C335B18;
  v182 = v111;
  v181 = v30;
  v183 = v112;
  v174 = (uint64_t (**)())off_24C335D90;
  v23 = SHIBYTE(v140.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v140.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v175, v140.__r_.__value_.__l.__data_, v140.__r_.__value_.__l.__size_);
  else
    v175 = v140;
  v174 = off_24C335B18;
  v177 = v106;
  v176 = v31;
  v178 = v107;
  v169 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v135.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v170, v135.__r_.__value_.__l.__data_, v135.__r_.__value_.__l.__size_);
  else
    v170 = v135;
  v171 = v136;
  v169 = &off_24C335AB8;
  v172 = v137;
  if (SHIBYTE(v138.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v173, v138.__r_.__value_.__l.__data_, v138.__r_.__value_.__l.__size_);
  else
    v173 = v138;
  v164 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v130.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v165, v130.__r_.__value_.__l.__data_, v130.__r_.__value_.__l.__size_);
  else
    v165 = v130;
  v166 = v131;
  v164 = &off_24C335AB8;
  v167 = v132;
  if (SHIBYTE(v133.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v168, v133.__r_.__value_.__l.__data_, v133.__r_.__value_.__l.__size_);
  else
    v168 = v133;
  v159 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v125.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v160, v125.__r_.__value_.__l.__data_, v125.__r_.__value_.__l.__size_);
  else
    v160 = v125;
  v161 = v126;
  v159 = &off_24C335AB8;
  v162 = v127;
  if (SHIBYTE(v128.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v163, v128.__r_.__value_.__l.__data_, v128.__r_.__value_.__l.__size_);
  else
    v163 = v128;
  v209 = (uint64_t (**)())off_24C335D90;
  v26 = SHIBYTE(v180.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v180.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v210, v180.__r_.__value_.__l.__data_, v180.__r_.__value_.__l.__size_);
  else
    v210 = v180;
  v209 = off_24C335B18;
  v212 = v111;
  v211 = v30;
  v213 = v112;
  v204 = (uint64_t (**)())off_24C335D90;
  v28 = SHIBYTE(v175.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v175.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v205, v175.__r_.__value_.__l.__data_, v175.__r_.__value_.__l.__size_);
  else
    v205 = v175;
  v204 = off_24C335B18;
  v207 = v106;
  v206 = v31;
  v208 = v107;
  v199 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v170.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v200, v170.__r_.__value_.__l.__data_, v170.__r_.__value_.__l.__size_);
  else
    v200 = v170;
  v201 = v171;
  v199 = &off_24C335AB8;
  v202 = v172;
  if (SHIBYTE(v173.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v203, v173.__r_.__value_.__l.__data_, v173.__r_.__value_.__l.__size_);
  else
    v203 = v173;
  v194 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v165.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v195, v165.__r_.__value_.__l.__data_, v165.__r_.__value_.__l.__size_);
  else
    v195 = v165;
  v196 = v166;
  v194 = &off_24C335AB8;
  v197 = v167;
  if (SHIBYTE(v168.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v198, v168.__r_.__value_.__l.__data_, v168.__r_.__value_.__l.__size_);
  else
    v198 = v168;
  v189 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v160.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v190, v160.__r_.__value_.__l.__data_, v160.__r_.__value_.__l.__size_);
  else
    v190 = v160;
  v191 = v161;
  v189 = &off_24C335AB8;
  v192 = v162;
  if (SHIBYTE(v163.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v193, v163.__r_.__value_.__l.__data_, v163.__r_.__value_.__l.__size_);
  else
    v193 = v163;
  v229 = (uint64_t (**)())off_24C335D90;
  v5 = SHIBYTE(v205.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v205.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v230, v205.__r_.__value_.__l.__data_, v205.__r_.__value_.__l.__size_);
  else
    v230 = v205;
  v231 = v31;
  v229 = off_24C335B18;
  v232 = v106;
  v233 = v107;
  v224 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v200.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v225, v200.__r_.__value_.__l.__data_, v200.__r_.__value_.__l.__size_);
  else
    v225 = v200;
  v226 = v201;
  v224 = &off_24C335AB8;
  v227 = v202;
  if (SHIBYTE(v203.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v228, v203.__r_.__value_.__l.__data_, v203.__r_.__value_.__l.__size_);
  else
    v228 = v203;
  v219 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v195.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v220, v195.__r_.__value_.__l.__data_, v195.__r_.__value_.__l.__size_);
  else
    v220 = v195;
  v221 = v196;
  v219 = &off_24C335AB8;
  v222 = v197;
  if (SHIBYTE(v198.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v223, v198.__r_.__value_.__l.__data_, v198.__r_.__value_.__l.__size_);
  else
    v223 = v198;
  v214 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v190.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v215, v190.__r_.__value_.__l.__data_, v190.__r_.__value_.__l.__size_);
  else
    v215 = v190;
  v216 = v191;
  v214 = &off_24C335AB8;
  v217 = v192;
  if (SHIBYTE(v193.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v218, v193.__r_.__value_.__l.__data_, v193.__r_.__value_.__l.__size_);
  else
    v218 = v193;
  v244 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v225.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v245, v225.__r_.__value_.__l.__data_, v225.__r_.__value_.__l.__size_);
  else
    v245 = v225;
  v246 = v226;
  v244 = &off_24C335AB8;
  v247 = v227;
  if (SHIBYTE(v228.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v248, v228.__r_.__value_.__l.__data_, v228.__r_.__value_.__l.__size_);
  else
    v248 = v228;
  v239 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v220.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v240, v220.__r_.__value_.__l.__data_, v220.__r_.__value_.__l.__size_);
  else
    v240 = v220;
  v241 = v221;
  v239 = &off_24C335AB8;
  v242 = v222;
  if (SHIBYTE(v223.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v243, v223.__r_.__value_.__l.__data_, v223.__r_.__value_.__l.__size_);
  else
    v243 = v223;
  v234 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v215.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v235, v215.__r_.__value_.__l.__data_, v215.__r_.__value_.__l.__size_);
  else
    v235 = v215;
  v236 = v216;
  v234 = &off_24C335AB8;
  v237 = v217;
  if (SHIBYTE(v218.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v238, v218.__r_.__value_.__l.__data_, v218.__r_.__value_.__l.__size_);
  else
    v238 = v218;
  v254 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v240.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v255, v240.__r_.__value_.__l.__data_, v240.__r_.__value_.__l.__size_);
  else
    v255 = v240;
  v256 = v241;
  v254 = &off_24C335AB8;
  v257 = v242;
  if (SHIBYTE(v243.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v258, v243.__r_.__value_.__l.__data_, v243.__r_.__value_.__l.__size_);
  else
    v258 = v243;
  v249 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v235.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v250, v235.__r_.__value_.__l.__data_, v235.__r_.__value_.__l.__size_);
  else
    v250 = v235;
  v251 = v236;
  v249 = &off_24C335AB8;
  v252 = v237;
  if (SHIBYTE(v238.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v253, v238.__r_.__value_.__l.__data_, v238.__r_.__value_.__l.__size_);
  else
    v253 = v238;
  v259 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v250.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v260, v250.__r_.__value_.__l.__data_, v250.__r_.__value_.__l.__size_);
  else
    v260 = v250;
  v261 = v251;
  v259 = &off_24C335AB8;
  v262 = v252;
  if (SHIBYTE(v253.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v263, v253.__r_.__value_.__l.__data_, v253.__r_.__value_.__l.__size_);
  else
    v263 = v253;
  *((_QWORD *)this + 10) = off_24C335D90;
  if (SHIBYTE(v260.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 88), v260.__r_.__value_.__l.__data_, v260.__r_.__value_.__l.__size_);
  else
    *(std::string *)((char *)this + 88) = v260;
  *((_DWORD *)this + 28) = v261;
  *((_QWORD *)this + 10) = &off_24C335AB8;
  *((_BYTE *)this + 116) = v262;
  v6 = (std::string *)((char *)this + 120);
  if (SHIBYTE(v263.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v6, v263.__r_.__value_.__l.__data_, v263.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = *(_OWORD *)&v263.__r_.__value_.__l.__data_;
    *((_QWORD *)this + 17) = *((_QWORD *)&v263.__r_.__value_.__l + 2);
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v259);
  *((_QWORD *)this + 18) = off_24C335D90;
  if (SHIBYTE(v255.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 152), v255.__r_.__value_.__l.__data_, v255.__r_.__value_.__l.__size_);
  else
    *(std::string *)((char *)this + 152) = v255;
  *((_DWORD *)this + 44) = v256;
  *((_QWORD *)this + 18) = &off_24C335AB8;
  *((_BYTE *)this + 180) = v257;
  v7 = (std::string *)((char *)this + 184);
  if (SHIBYTE(v258.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v7, v258.__r_.__value_.__l.__data_, v258.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = *(_OWORD *)&v258.__r_.__value_.__l.__data_;
    *((_QWORD *)this + 25) = *((_QWORD *)&v258.__r_.__value_.__l + 2);
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v249);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v254);
  *((_QWORD *)this + 26) = off_24C335D90;
  if (SHIBYTE(v245.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external((std::string *)this + 9, v245.__r_.__value_.__l.__data_, v245.__r_.__value_.__l.__size_);
  else
    *((std::string *)this + 9) = v245;
  *((_DWORD *)this + 60) = v246;
  *((_QWORD *)this + 26) = &off_24C335AB8;
  *((_BYTE *)this + 244) = v247;
  v8 = (std::string *)((char *)this + 248);
  if (SHIBYTE(v248.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v8, v248.__r_.__value_.__l.__data_, v248.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v8->__r_.__value_.__l.__data_ = *(_OWORD *)&v248.__r_.__value_.__l.__data_;
    *((_QWORD *)this + 33) = *((_QWORD *)&v248.__r_.__value_.__l + 2);
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v234);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v239);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v244);
  *((_QWORD *)this + 34) = off_24C335D90;
  v9 = (std::string *)((char *)this + 280);
  v10 = SHIBYTE(v230.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v230.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v9, v230.__r_.__value_.__l.__data_, v230.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = *(_OWORD *)&v230.__r_.__value_.__l.__data_;
    *((_QWORD *)this + 37) = *((_QWORD *)&v230.__r_.__value_.__l + 2);
  }
  *((_DWORD *)this + 76) = v31;
  *((_QWORD *)this + 34) = off_24C335B18;
  *(_QWORD *)((char *)this + 308) = v232;
  *((_DWORD *)this + 79) = v233;
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v214);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v219);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v224);
  v229 = (uint64_t (**)())off_24C335D90;
  if (v10 < 0)
    operator delete(v230.__r_.__value_.__l.__data_);
  *((_QWORD *)this + 40) = off_24C335D90;
  v11 = (std::string *)((char *)this + 328);
  v12 = SHIBYTE(v210.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v210.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v11, v210.__r_.__value_.__l.__data_, v210.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v11->__r_.__value_.__l.__data_ = *(_OWORD *)&v210.__r_.__value_.__l.__data_;
    *((_QWORD *)this + 43) = *((_QWORD *)&v210.__r_.__value_.__l + 2);
  }
  *((_DWORD *)this + 88) = v30;
  *((_QWORD *)this + 40) = off_24C335B18;
  *(_QWORD *)((char *)this + 356) = v212;
  *((_DWORD *)this + 91) = v213;
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v189);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v194);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v199);
  v204 = (uint64_t (**)())off_24C335D90;
  if (v5 < 0)
    operator delete(v205.__r_.__value_.__l.__data_);
  v209 = (uint64_t (**)())off_24C335D90;
  if (v12 < 0)
    operator delete(v210.__r_.__value_.__l.__data_);
  *((_QWORD *)this + 46) = off_24C335D90;
  v13 = (std::string *)((char *)this + 376);
  v14 = SHIBYTE(v185.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v185.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v13, v185.__r_.__value_.__l.__data_, v185.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v13->__r_.__value_.__l.__data_ = *(_OWORD *)&v185.__r_.__value_.__l.__data_;
    *((_QWORD *)this + 49) = *((_QWORD *)&v185.__r_.__value_.__l + 2);
  }
  *((_DWORD *)this + 100) = v29;
  *((_QWORD *)this + 46) = off_24C335B18;
  *(_QWORD *)((char *)this + 404) = v187;
  *((_DWORD *)this + 103) = v188;
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v159);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v164);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v169);
  v174 = (uint64_t (**)())off_24C335D90;
  if (v28 < 0)
    operator delete(v175.__r_.__value_.__l.__data_);
  v179 = (uint64_t (**)())off_24C335D90;
  if (v26 < 0)
  {
    operator delete(v180.__r_.__value_.__l.__data_);
    if ((v14 & 0x80000000) == 0)
      goto LABEL_212;
  }
  else if ((v14 & 0x80000000) == 0)
  {
    goto LABEL_212;
  }
  operator delete(v185.__r_.__value_.__l.__data_);
LABEL_212:
  *((_QWORD *)this + 52) = off_24C335D90;
  v15 = (std::string *)((char *)this + 424);
  v16 = SHIBYTE(v155.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v155.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v15, v155.__r_.__value_.__l.__data_, v155.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v15->__r_.__value_.__l.__data_ = *(_OWORD *)&v155.__r_.__value_.__l.__data_;
    *((_QWORD *)this + 55) = *((_QWORD *)&v155.__r_.__value_.__l + 2);
  }
  *((_DWORD *)this + 112) = v27;
  *((_QWORD *)this + 52) = off_24C335B18;
  *(_QWORD *)((char *)this + 452) = v157;
  *((_DWORD *)this + 115) = v158;
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v124);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v129);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v134);
  if (v23 < 0)
    operator delete(v140.__r_.__value_.__l.__data_);
  if (v24 < 0)
    operator delete(v145.__r_.__value_.__l.__data_);
  if (v25 < 0)
  {
    operator delete(v150.__r_.__value_.__l.__data_);
    if ((v16 & 0x80000000) == 0)
      goto LABEL_223;
  }
  else if ((v16 & 0x80000000) == 0)
  {
    goto LABEL_223;
  }
  operator delete(v155.__r_.__value_.__l.__data_);
LABEL_223:
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v88);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v93);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v98);
  v103 = (uint64_t (**)())off_24C335D90;
  if (v19 < 0)
    operator delete(v104.__r_.__value_.__l.__data_);
  v108 = (uint64_t (**)())off_24C335D90;
  if (v18 < 0)
    operator delete(v109.__r_.__value_.__l.__data_);
  v113 = (uint64_t (**)())off_24C335D90;
  if (v20 < 0)
    operator delete(v114.__r_.__value_.__l.__data_);
  v118 = (uint64_t (**)())off_24C335D90;
  if (v21 < 0)
    operator delete(v119.__r_.__value_.__l.__data_);
  if (v22 < 0)
    operator delete(v123.__r_.__value_.__l.__data_);
  *(_QWORD *)this = &off_24C3315D0;
  *((_QWORD *)this + 58) = off_24C335D90;
  if (SHIBYTE(v83.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 472), v83.__r_.__value_.__l.__data_, v83.__r_.__value_.__l.__size_);
  else
    *(std::string *)((char *)this + 472) = v83;
  *((_DWORD *)this + 124) = v84;
  *(_QWORD *)((char *)this + 500) = v85;
  *((_DWORD *)this + 127) = v86;
  *((_QWORD *)this + 58) = off_24C336AC0;
  *((_QWORD *)this + 64) = off_24C335D90;
  if (SHIBYTE(v76.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 520), v76.__r_.__value_.__l.__data_, v76.__r_.__value_.__l.__size_);
  else
    *(std::string *)((char *)this + 520) = v76;
  *((_DWORD *)this + 136) = v77;
  *(_QWORD *)((char *)this + 548) = v78;
  *((_DWORD *)this + 139) = v79;
  *((_QWORD *)this + 64) = off_24C336AC0;
  *((_QWORD *)this + 70) = off_24C335D90;
  if (SHIBYTE(v69.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 568), v69.__r_.__value_.__l.__data_, v69.__r_.__value_.__l.__size_);
  else
    *(std::string *)((char *)this + 568) = v69;
  *((_DWORD *)this + 148) = v70;
  *(_QWORD *)((char *)this + 596) = v71;
  *((_DWORD *)this + 151) = v72;
  *((_QWORD *)this + 70) = off_24C336AC0;
  *((_QWORD *)this + 76) = off_24C335D90;
  if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 616), v62.__r_.__value_.__l.__data_, v62.__r_.__value_.__l.__size_);
  else
    *(std::string *)((char *)this + 616) = v62;
  *((_DWORD *)this + 160) = v63;
  *(_QWORD *)((char *)this + 644) = v64;
  *((_DWORD *)this + 163) = v65;
  *((_QWORD *)this + 76) = off_24C336AC0;
  std::__tuple_leaf<4ul,mlcore::MediaColumn<std::string>,false>::__tuple_leaf[abi:ne180100]<mlcore::MediaColumn<std::string>&,void>((uint64_t)this + 656, (uint64_t)v54);
  std::__tuple_leaf<5ul,mlcore::MediaColumn<std::string>,false>::__tuple_leaf[abi:ne180100]<mlcore::MediaColumn<std::string>&,void>((uint64_t)this + 720, (uint64_t)v45);
  std::__tuple_leaf<6ul,mlcore::MediaColumn<std::string>,false>::__tuple_leaf[abi:ne180100]<mlcore::MediaColumn<std::string>&,void>((uint64_t)this + 784, (uint64_t)v36);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)v36);
  if (v33 < 0)
    operator delete(__p[0]);
  if (v35 < 0)
    operator delete(v34[0]);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)v45);
  if (v42 < 0)
    operator delete(v41[0]);
  if (v44 < 0)
    operator delete(v43[0]);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)v54);
  if (v51 < 0)
    operator delete(v50[0]);
  if (v53 < 0)
    operator delete(v52[0]);
  v61 = off_24C335D90;
  if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v62.__r_.__value_.__l.__data_);
  if (v60 < 0)
    operator delete(v59[0]);
  v68 = off_24C335D90;
  if (SHIBYTE(v69.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v69.__r_.__value_.__l.__data_);
  if (v67 < 0)
    operator delete(v66[0]);
  v75 = off_24C335D90;
  if (SHIBYTE(v76.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v76.__r_.__value_.__l.__data_);
  if (v74 < 0)
    operator delete(v73[0]);
  v82 = off_24C335D90;
  if (SHIBYTE(v83.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v83.__r_.__value_.__l.__data_);
  if (v81 < 0)
    operator delete(v80[0]);
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__s.__r_.__value_.__l.__data_);
  *(_QWORD *)this = &off_24C339A38;
  return this;
}

void sub_20A695B90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *__p,uint64_t a33,int a34,__int16 a35,char a36,char a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43,char a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,void *a52,uint64_t a53,int a54,__int16 a55,char a56,char a57,void *a58,uint64_t a59,int a60,__int16 a61,char a62,char a63)
{
  char a64;
  void *a72;
  char a73;
  void *a74;
  char a75;
  char a76;
  uint64_t v76;
  void **v77;
  void **v78;
  void **v79;

  *(_QWORD *)(v76 + 560) = off_24C335D90;
  if (*(char *)(v76 + 591) < 0)
    operator delete(*v79);
  *(_QWORD *)(v76 + 512) = off_24C335D90;
  if (*(char *)(v76 + 543) < 0)
    operator delete(*v78);
  *(_QWORD *)(v76 + 464) = off_24C335D90;
  if (*(char *)(v76 + 495) < 0)
    operator delete(*v77);
  mediaplatform::DatabaseTable<long long,long long,long long,long long,std::string,std::string,std::string>::~DatabaseTable(v76);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&a44);
  if (a37 < 0)
    operator delete(__p);
  if (a43 < 0)
    operator delete(a38);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&a64);
  if (a57 < 0)
    operator delete(a52);
  if (a63 < 0)
    operator delete(a58);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&a76);
  if (a73 < 0)
    operator delete(a72);
  if (a75 < 0)
    operator delete(a74);
  STACK[0x220] = (unint64_t)off_24C335D90;
  if (SLOBYTE(STACK[0x23F]) < 0)
    operator delete((void *)STACK[0x228]);
  if (SLOBYTE(STACK[0x21F]) < 0)
    operator delete((void *)STACK[0x208]);
  STACK[0x268] = (unint64_t)off_24C335D90;
  if (SLOBYTE(STACK[0x287]) < 0)
    operator delete((void *)STACK[0x270]);
  if (SLOBYTE(STACK[0x267]) < 0)
    operator delete((void *)STACK[0x250]);
  STACK[0x2B0] = (unint64_t)off_24C335D90;
  if (SLOBYTE(STACK[0x2CF]) < 0)
    operator delete((void *)STACK[0x2B8]);
  if (SLOBYTE(STACK[0x2AF]) < 0)
    operator delete((void *)STACK[0x298]);
  STACK[0x2F8] = (unint64_t)off_24C335D90;
  if (SLOBYTE(STACK[0x317]) < 0)
    operator delete((void *)STACK[0x300]);
  if (SLOBYTE(STACK[0x2F7]) < 0)
    operator delete((void *)STACK[0x2E0]);
  if (SLOBYTE(STACK[0x33F]) < 0)
    operator delete((void *)STACK[0x328]);
  _Unwind_Resume(a1);
}

void sub_20A69641C()
{
  JUMPOUT(0x20A6962E4);
}

void sub_20A696424()
{
  JUMPOUT(0x20A6962F4);
}

void sub_20A69642C()
{
  JUMPOUT(0x20A696304);
}

void sub_20A696434()
{
  JUMPOUT(0x20A69630CLL);
}

void sub_20A69643C()
{
  JUMPOUT(0x20A69631CLL);
}

void sub_20A696444()
{
  JUMPOUT(0x20A69632CLL);
}

void sub_20A69644C()
{
  JUMPOUT(0x20A696334);
}

void sub_20A696454()
{
  JUMPOUT(0x20A696344);
}

void sub_20A69645C()
{
  JUMPOUT(0x20A696354);
}

void sub_20A696464()
{
  JUMPOUT(0x20A696370);
}

void sub_20A69646C()
{
  JUMPOUT(0x20A696380);
}

void sub_20A696474()
{
  JUMPOUT(0x20A69639CLL);
}

void sub_20A69647C()
{
  JUMPOUT(0x20A6963ACLL);
}

void sub_20A696484()
{
  JUMPOUT(0x20A6963C8);
}

void sub_20A69648C()
{
  JUMPOUT(0x20A6963D8);
}

void sub_20A696494()
{
  JUMPOUT(0x20A6963F4);
}

void sub_20A69649C()
{
  JUMPOUT(0x20A696404);
}

uint64_t mlcore::DatabaseModelProperty<double>::DatabaseModelProperty(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  std::string *v5;
  __int128 v6;
  uint64_t v7;

  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_QWORD *)a1 = off_24C33A080;
  *(_QWORD *)(a1 + 64) = *a2;
  *(_QWORD *)(a1 + 72) = off_24C335D90;
  v5 = (std::string *)(a1 + 80);
  if (*(char *)(a3 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *(const std::string::value_type **)(a3 + 8), *(_QWORD *)(a3 + 16));
  }
  else
  {
    v6 = *(_OWORD *)(a3 + 8);
    v5->__r_.__value_.__r.__words[2] = *(_QWORD *)(a3 + 24);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
  *(_DWORD *)(a1 + 104) = *(_DWORD *)(a3 + 32);
  *(_QWORD *)(a1 + 72) = off_24C335AD8;
  v7 = *(_QWORD *)(a3 + 36);
  *(_DWORD *)(a1 + 116) = *(_DWORD *)(a3 + 44);
  *(_QWORD *)(a1 + 108) = v7;
  *(_QWORD *)(a1 + 72) = off_24C336A80;
  return a1;
}

void sub_20A69654C(_Unwind_Exception *a1)
{
  void **v1;

  mlcore::ModelPropertyBase::~ModelPropertyBase(v1);
  _Unwind_Resume(a1);
}

uint64_t mediaplatform::Singleton<mlcore::ItemPlaybackTable>::sharedInstance()
{
  unsigned __int8 v0;
  uint64_t *v2;

  if ((v0 & 1) == 0
  {
    v2 = (uint64_t *)operator new();
    _ZNSt3__115allocate_sharedB8ne180100IN6mlcore17ItemPlaybackTableENS_9allocatorIS2_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(v2);
    mediaplatform::Singleton<mlcore::ItemPlaybackTable>::sharedInstance(void)::_sharedInstance = (uint64_t)v2;
  }
  return mediaplatform::Singleton<mlcore::ItemPlaybackTable>::sharedInstance(void)::_sharedInstance;
}

void sub_20A6965D4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x20BD27AFC](v1, 0x20C40A4A59CD2);
  _Unwind_Resume(a1);
}

uint64_t mlcore::ItemStatsTable::ItemStatsTable(mlcore::ItemStatsTable *this)
{
  uint64_t v1;
  int v2;
  std::string *v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  std::string *v14;
  std::string *v15;
  std::string *v16;
  std::string *v17;
  std::string *v18;
  std::string *v19;
  std::string *v20;
  char v21;
  int v23;
  int v24;
  int v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  int v35;
  int v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  int v44;
  int v45;
  int v46;
  int v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  int v51;
  int v52;
  int v53;
  int v54;
  int v55;
  uint64_t v56;
  int v57;
  int v58;
  int v59;
  uint64_t v60;
  int v61;
  int v62;
  int v63;
  uint64_t v64;
  int v65;
  int v66;
  int v67;
  int v68;
  int v69;
  int v70;
  void *v71[2];
  char v72;
  void (**v73)(mediaplatform::DatabaseColumnBase *__hidden);
  std::string v74;
  int v75;
  uint64_t v76;
  int v77;
  void *v78[2];
  char v79;
  void (**v80)(mediaplatform::DatabaseColumnBase *__hidden);
  std::string v81;
  int v82;
  uint64_t v83;
  void *v84[2];
  char v85;
  void (**v86)(mediaplatform::DatabaseColumnBase *__hidden);
  std::string v87;
  int v88;
  uint64_t v89;
  void *v90[2];
  char v91;
  void (**v92)(mediaplatform::DatabaseColumnBase *__hidden);
  std::string v93;
  int v94;
  uint64_t v95;
  void *v96[2];
  char v97;
  void (**v98)(mediaplatform::DatabaseColumnBase *__hidden);
  std::string v99;
  int v100;
  uint64_t v101;
  void *v102[2];
  char v103;
  void (**v104)(mediaplatform::DatabaseColumnBase *__hidden);
  std::string v105;
  int v106;
  uint64_t v107;
  void *v108[2];
  char v109;
  void (**v110)(mediaplatform::DatabaseColumnBase *__hidden);
  std::string v111;
  int v112;
  uint64_t v113;
  int v114;
  void *v115[2];
  char v116;
  void (**v117)(mediaplatform::DatabaseColumnBase *__hidden);
  std::string v118;
  int v119;
  uint64_t v120;
  void *v121[2];
  char v122;
  void (**v123)(mediaplatform::DatabaseColumnBase *__hidden);
  std::string v124;
  int v125;
  uint64_t v126;
  void *v127[2];
  char v128;
  void (**v129)(mediaplatform::DatabaseColumnBase *__hidden);
  std::string v130;
  int v131;
  uint64_t v132;
  void *v133[2];
  char v134;
  void (**v135)(mediaplatform::DatabaseColumnBase *__hidden);
  std::string v136;
  int v137;
  uint64_t v138;
  void *v139[2];
  char v140;
  void (**v141)(mediaplatform::DatabaseColumnBase *__hidden);
  std::string v142;
  int v143;
  uint64_t v144;
  int v145;
  void *v146[2];
  char v147;
  void (**v148)(mediaplatform::DatabaseColumnBase *__hidden);
  std::string v149;
  int v150;
  uint64_t v151;
  int v152;
  void *v153[2];
  char v154;
  void (**v155)(mediaplatform::DatabaseColumnBase *__hidden);
  std::string v156;
  int v157;
  uint64_t v158;
  int v159;
  void *v160[2];
  char v161;
  void (**v162)(mediaplatform::DatabaseColumnBase *__hidden);
  std::string v163;
  int v164;
  uint64_t v165;
  void *v166[2];
  char v167;
  void (**v168)(mediaplatform::DatabaseColumnBase *__hidden);
  std::string v169;
  int v170;
  uint64_t v171;
  void *v172[2];
  char v173;
  void (**v174)(mediaplatform::DatabaseColumnBase *__hidden);
  std::string v175;
  int v176;
  uint64_t v177;
  void *v178[2];
  char v179;
  _BYTE v180[8];
  std::string v181;
  int v182;
  char v183;
  std::string v184;
  void *v185[2];
  char v186;
  void (**v187)(mediaplatform::DatabaseColumnBase *__hidden);
  std::string v188;
  int v189;
  uint64_t v190;
  void *v191[2];
  char v192;
  void (**v193)(mediaplatform::DatabaseColumnBase *__hidden);
  std::string v194;
  int v195;
  uint64_t v196;
  void *v197[2];
  char v198;
  void (**v199)(mediaplatform::DatabaseColumnBase *__hidden);
  std::string v200;
  int v201;
  uint64_t v202;
  int v203;
  std::string __s;
  uint64_t (**v205)();
  std::string v206;
  int v207;
  uint64_t v208;
  int v209;
  uint64_t (**v210)();
  std::string v211;
  int v212;
  uint64_t v213;
  uint64_t (**v214)();
  std::string v215;
  int v216;
  uint64_t v217;
  uint64_t (**v218)();
  std::string v219;
  int v220;
  uint64_t v221;
  uint64_t (**v222)();
  std::string v223;
  int v224;
  uint64_t v225;
  uint64_t (**v226)();
  std::string v227;
  int v228;
  uint64_t v229;
  uint64_t (**v230)();
  std::string v231;
  int v232;
  uint64_t v233;
  int v234;
  uint64_t (**v235)();
  std::string v236;
  int v237;
  uint64_t v238;
  uint64_t (**v239)();
  std::string v240;
  int v241;
  uint64_t v242;
  uint64_t (**v243)();
  std::string v244;
  int v245;
  uint64_t v246;
  uint64_t (**v247)();
  std::string v248;
  int v249;
  uint64_t v250;
  uint64_t (**v251)();
  std::string v252;
  int v253;
  uint64_t v254;
  int v255;
  uint64_t (**v256)();
  std::string v257;
  int v258;
  uint64_t v259;
  int v260;
  uint64_t (**v261)();
  std::string v262;
  int v263;
  uint64_t v264;
  int v265;
  uint64_t (**v266)();
  std::string v267;
  int v268;
  uint64_t v269;
  uint64_t (**v270)();
  std::string v271;
  int v272;
  uint64_t v273;
  uint64_t (**v274)();
  std::string v275;
  int v276;
  uint64_t v277;
  uint64_t (**v278)();
  std::string v279;
  int v280;
  char v281;
  std::string v282;
  uint64_t (**v283)();
  std::string v284;
  int v285;
  uint64_t v286;
  uint64_t (**v287)();
  std::string v288;
  int v289;
  uint64_t v290;
  uint64_t (**v291)();
  std::string v292;
  int v293;
  uint64_t v294;
  int v295;
  std::string v296;
  uint64_t (**v297)();
  std::string __p;
  int v299;
  uint64_t v300;
  int v301;
  uint64_t (**v302)();
  std::string v303;
  int v304;
  uint64_t v305;
  uint64_t (**v306)();
  std::string v307;
  int v308;
  uint64_t v309;
  uint64_t (**v310)();
  std::string v311;
  int v312;
  uint64_t v313;
  uint64_t (**v314)();
  std::string v315;
  int v316;
  uint64_t v317;
  uint64_t (**v318)();
  std::string v319;
  int v320;
  uint64_t v321;
  uint64_t (**v322)();
  std::string v323;
  int v324;
  uint64_t v325;
  int v326;
  uint64_t (**v327)();
  std::string v328;
  int v329;
  uint64_t v330;
  uint64_t (**v331)();
  std::string v332;
  int v333;
  uint64_t v334;
  uint64_t (**v335)();
  std::string v336;
  int v337;
  uint64_t v338;
  uint64_t (**v339)();
  std::string v340;
  int v341;
  uint64_t v342;
  uint64_t (**v343)();
  std::string v344;
  int v345;
  uint64_t v346;
  int v347;
  uint64_t (**v348)();
  std::string v349;
  int v350;
  uint64_t v351;
  int v352;
  uint64_t (**v353)();
  std::string v354;
  int v355;
  uint64_t v356;
  int v357;
  uint64_t (**v358)();
  std::string v359;
  int v360;
  uint64_t v361;
  uint64_t (**v362)();
  std::string v363;
  int v364;
  uint64_t v365;
  uint64_t (**v366)();
  std::string v367;
  int v368;
  uint64_t v369;
  uint64_t (**v370)();
  std::string v371;
  int v372;
  char v373;
  std::string v374;
  uint64_t (**v375)();
  std::string v376;
  int v377;
  uint64_t v378;
  uint64_t (**v379)();
  std::string v380;
  int v381;
  uint64_t v382;
  uint64_t (**v383)();
  std::string v384;
  int v385;
  uint64_t v386;
  int v387;

  v1 = MEMORY[0x24BDAC7A8](this);
  std::string::basic_string[abi:ne180100]<0>(&__s, "item_stats");
  std::string::basic_string[abi:ne180100]<0>(v197, "item_pid");
  mlcore::MediaColumn<long long>::MediaColumn((uint64_t)&v199, (uint64_t)v197, 1);
  std::string::basic_string[abi:ne180100]<0>(v191, "user_rating");
  mlcore::MediaColumn<int>::MediaColumn((uint64_t)&v193, (uint64_t)v191, 0);
  std::string::basic_string[abi:ne180100]<0>(v185, "needs_restore");
  mlcore::MediaColumn<int>::MediaColumn((uint64_t)&v187, (uint64_t)v185, 0);
  std::string::basic_string[abi:ne180100]<0>(v178, "download_identifier");
  mlcore::MediaColumn<std::string>::MediaColumn((uint64_t)v180, (uint64_t)v178, 0);
  std::string::basic_string[abi:ne180100]<0>(v172, "play_count_user");
  mlcore::MediaColumn<int>::MediaColumn((uint64_t)&v174, (uint64_t)v172, 0);
  std::string::basic_string[abi:ne180100]<0>(v166, "play_count_recent");
  mlcore::MediaColumn<int>::MediaColumn((uint64_t)&v168, (uint64_t)v166, 0);
  std::string::basic_string[abi:ne180100]<0>(v160, "has_been_played");
  mlcore::MediaColumn<int>::MediaColumn((uint64_t)&v162, (uint64_t)v160, 0);
  std::string::basic_string[abi:ne180100]<0>(v153, "date_played");
  mlcore::MediaColumn<long long>::MediaColumn((uint64_t)&v155, (uint64_t)v153);
  std::string::basic_string[abi:ne180100]<0>(v146, "date_skipped");
  mlcore::MediaColumn<long long>::MediaColumn((uint64_t)&v148, (uint64_t)v146);
  std::string::basic_string[abi:ne180100]<0>(v139, "date_accessed");
  mlcore::MediaColumn<long long>::MediaColumn((uint64_t)&v141, (uint64_t)v139);
  std::string::basic_string[abi:ne180100]<0>(v133, "is_alarm");
  mlcore::MediaColumn<int>::MediaColumn((uint64_t)&v135, (uint64_t)v133, 0);
  std::string::basic_string[abi:ne180100]<0>(v127, "skip_count_user");
  mlcore::MediaColumn<int>::MediaColumn((uint64_t)&v129, (uint64_t)v127, 0);
  std::string::basic_string[abi:ne180100]<0>(v121, "skip_count_recent");
  mlcore::MediaColumn<int>::MediaColumn((uint64_t)&v123, (uint64_t)v121, 0);
  std::string::basic_string[abi:ne180100]<0>(v115, "remember_bookmark");
  mlcore::MediaColumn<int>::MediaColumn((uint64_t)&v117, (uint64_t)v115, 0);
  std::string::basic_string[abi:ne180100]<0>(v108, "bookmark_time_ms");
  mlcore::MediaColumn<double>::MediaColumn((uint64_t)&v110, (uint64_t)v108);
  std::string::basic_string[abi:ne180100]<0>(v102, "hidden");
  mlcore::MediaColumn<int>::MediaColumn((uint64_t)&v104, (uint64_t)v102, 0);
  std::string::basic_string[abi:ne180100]<0>(v96, "chosen_by_auto_fill");
  mlcore::MediaColumn<int>::MediaColumn((uint64_t)&v98, (uint64_t)v96, 0);
  std::string::basic_string[abi:ne180100]<0>(v90, "liked_state");
  mlcore::MediaColumn<int>::MediaColumn((uint64_t)&v92, (uint64_t)v90, 0);
  std::string::basic_string[abi:ne180100]<0>(v84, "liked_state_changed");
  mlcore::MediaColumn<int>::MediaColumn((uint64_t)&v86, (uint64_t)v84, 0);
  std::string::basic_string[abi:ne180100]<0>(v78, "user_rating_is_derived");
  mlcore::MediaColumn<int>::MediaColumn((uint64_t)&v80, (uint64_t)v78, 0);
  std::string::basic_string[abi:ne180100]<0>(v71, "liked_state_changed_date");
  mlcore::MediaColumn<long long>::MediaColumn((uint64_t)&v73, (uint64_t)v71);
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v296, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
  else
    v296 = __s;
  v291 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v200.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v292, v200.__r_.__value_.__l.__data_, v200.__r_.__value_.__l.__size_);
  else
    v292 = v200;
  v291 = off_24C335B18;
  v294 = v202;
  v68 = v201;
  v293 = v201;
  v295 = v203;
  v287 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v194.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v288, v194.__r_.__value_.__l.__data_, v194.__r_.__value_.__l.__size_);
  else
    v288 = v194;
  v66 = v195;
  v289 = v195;
  v287 = off_24C335AF8;
  v64 = v196;
  v290 = v196;
  v283 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v188.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v284, v188.__r_.__value_.__l.__data_, v188.__r_.__value_.__l.__size_);
  else
    v284 = v188;
  v62 = v189;
  v285 = v189;
  v283 = off_24C335AF8;
  v60 = v190;
  v286 = v190;
  v278 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v181.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v279, v181.__r_.__value_.__l.__data_, v181.__r_.__value_.__l.__size_);
  else
    v279 = v181;
  v280 = v182;
  v278 = &off_24C335AB8;
  v281 = v183;
  if (SHIBYTE(v184.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v282, v184.__r_.__value_.__l.__data_, v184.__r_.__value_.__l.__size_);
  else
    v282 = v184;
  v274 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v175.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v275, v175.__r_.__value_.__l.__data_, v175.__r_.__value_.__l.__size_);
  else
    v275 = v175;
  v2 = v176;
  v276 = v176;
  v274 = off_24C335AF8;
  v56 = v177;
  v277 = v177;
  v270 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v169.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v271, v169.__r_.__value_.__l.__data_, v169.__r_.__value_.__l.__size_);
  else
    v271 = v169;
  v52 = v170;
  v272 = v170;
  v270 = off_24C335AF8;
  v50 = v171;
  v273 = v171;
  v266 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v163.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v267, v163.__r_.__value_.__l.__data_, v163.__r_.__value_.__l.__size_);
  else
    v267 = v163;
  v49 = v164;
  v268 = v164;
  v266 = off_24C335AF8;
  v48 = v165;
  v269 = v165;
  v261 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v156.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v262, v156.__r_.__value_.__l.__data_, v156.__r_.__value_.__l.__size_);
  else
    v262 = v156;
  v261 = off_24C335B18;
  v264 = v158;
  v47 = v157;
  v263 = v157;
  v265 = v159;
  v256 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v149.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v257, v149.__r_.__value_.__l.__data_, v149.__r_.__value_.__l.__size_);
  else
    v257 = v149;
  v256 = off_24C335B18;
  v259 = v151;
  v46 = v150;
  v258 = v150;
  v260 = v152;
  v251 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v142.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v252, v142.__r_.__value_.__l.__data_, v142.__r_.__value_.__l.__size_);
  else
    v252 = v142;
  v251 = off_24C335B18;
  v254 = v144;
  v45 = v143;
  v253 = v143;
  v255 = v145;
  v247 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v136.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v248, v136.__r_.__value_.__l.__data_, v136.__r_.__value_.__l.__size_);
  else
    v248 = v136;
  v44 = v137;
  v249 = v137;
  v247 = off_24C335AF8;
  v43 = v138;
  v250 = v138;
  v243 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v130.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v244, v130.__r_.__value_.__l.__data_, v130.__r_.__value_.__l.__size_);
  else
    v244 = v130;
  v42 = v131;
  v245 = v131;
  v243 = off_24C335AF8;
  v41 = v132;
  v246 = v132;
  v239 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v124.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v240, v124.__r_.__value_.__l.__data_, v124.__r_.__value_.__l.__size_);
  else
    v240 = v124;
  v40 = v125;
  v241 = v125;
  v239 = off_24C335AF8;
  v39 = v126;
  v242 = v126;
  v235 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v118.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v236, v118.__r_.__value_.__l.__data_, v118.__r_.__value_.__l.__size_);
  else
    v236 = v118;
  v38 = v119;
  v237 = v119;
  v235 = off_24C335AF8;
  v37 = v120;
  v238 = v120;
  v230 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v111.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v231, v111.__r_.__value_.__l.__data_, v111.__r_.__value_.__l.__size_);
  else
    v231 = v111;
  v230 = off_24C335AD8;
  v233 = v113;
  v36 = v112;
  v232 = v112;
  v234 = v114;
  v226 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v105.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v227, v105.__r_.__value_.__l.__data_, v105.__r_.__value_.__l.__size_);
  else
    v227 = v105;
  v35 = v106;
  v228 = v106;
  v226 = off_24C335AF8;
  v34 = v107;
  v229 = v107;
  v222 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v99.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v223, v99.__r_.__value_.__l.__data_, v99.__r_.__value_.__l.__size_);
  else
    v223 = v99;
  v33 = v100;
  v224 = v100;
  v222 = off_24C335AF8;
  v32 = v101;
  v225 = v101;
  v218 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v93.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v219, v93.__r_.__value_.__l.__data_, v93.__r_.__value_.__l.__size_);
  else
    v219 = v93;
  v31 = v94;
  v220 = v94;
  v218 = off_24C335AF8;
  v30 = v95;
  v221 = v95;
  v214 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v87.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v215, v87.__r_.__value_.__l.__data_, v87.__r_.__value_.__l.__size_);
  else
    v215 = v87;
  v29 = v88;
  v216 = v88;
  v214 = off_24C335AF8;
  v28 = v89;
  v217 = v89;
  v210 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v81.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v211, v81.__r_.__value_.__l.__data_, v81.__r_.__value_.__l.__size_);
  else
    v211 = v81;
  v27 = v82;
  v212 = v82;
  v210 = off_24C335AF8;
  v26 = v83;
  v213 = v83;
  v205 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v74.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v206, v74.__r_.__value_.__l.__data_, v74.__r_.__value_.__l.__size_);
  else
    v206 = v74;
  v205 = off_24C335B18;
  v208 = v76;
  v25 = v75;
  v207 = v75;
  v209 = v77;
  *(_QWORD *)v1 = &off_24C330F50;
  v3 = (std::string *)(v1 + 8);
  v4 = SHIBYTE(v296.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v296.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v3, v296.__r_.__value_.__l.__data_, v296.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = *(_OWORD *)&v296.__r_.__value_.__l.__data_;
    *(_QWORD *)(v1 + 24) = *((_QWORD *)&v296.__r_.__value_.__l + 2);
  }
  *(_QWORD *)(v1 + 32) = 0;
  *(_QWORD *)(v1 + 40) = 0;
  *(_QWORD *)(v1 + 48) = 0;
  *(_QWORD *)(v1 + 56) = 0;
  *(_QWORD *)v1 = off_24C3357C0;
  *(_QWORD *)(v1 + 64) = 0;
  *(_QWORD *)(v1 + 72) = 0;
  v383 = (uint64_t (**)())off_24C335D90;
  v24 = SHIBYTE(v292.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v292.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v384, v292.__r_.__value_.__l.__data_, v292.__r_.__value_.__l.__size_);
  else
    v384 = v292;
  v385 = v68;
  v383 = off_24C335B18;
  v386 = v294;
  v387 = v295;
  v379 = (uint64_t (**)())off_24C335D90;
  v69 = SHIBYTE(v288.__r_.__value_.__r.__words[2]);
  v23 = v4;
  if (SHIBYTE(v288.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v380, v288.__r_.__value_.__l.__data_, v288.__r_.__value_.__l.__size_);
  else
    v380 = v288;
  v381 = v66;
  v379 = off_24C335AF8;
  v382 = v64;
  v375 = (uint64_t (**)())off_24C335D90;
  v67 = SHIBYTE(v284.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v284.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v376, v284.__r_.__value_.__l.__data_, v284.__r_.__value_.__l.__size_);
  else
    v376 = v284;
  v377 = v62;
  v375 = off_24C335AF8;
  v378 = v60;
  v370 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v279.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v371, v279.__r_.__value_.__l.__data_, v279.__r_.__value_.__l.__size_);
  else
    v371 = v279;
  v372 = v280;
  v370 = &off_24C335AB8;
  v373 = v281;
  if (SHIBYTE(v282.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v374, v282.__r_.__value_.__l.__data_, v282.__r_.__value_.__l.__size_);
  else
    v374 = v282;
  v366 = (uint64_t (**)())off_24C335D90;
  v70 = SHIBYTE(v275.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v275.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v367, v275.__r_.__value_.__l.__data_, v275.__r_.__value_.__l.__size_);
  else
    v367 = v275;
  v368 = v2;
  v366 = off_24C335AF8;
  v369 = v56;
  v362 = (uint64_t (**)())off_24C335D90;
  v65 = SHIBYTE(v271.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v271.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v363, v271.__r_.__value_.__l.__data_, v271.__r_.__value_.__l.__size_);
  else
    v363 = v271;
  v364 = v52;
  v362 = off_24C335AF8;
  v365 = v50;
  v358 = (uint64_t (**)())off_24C335D90;
  v63 = SHIBYTE(v267.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v267.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v359, v267.__r_.__value_.__l.__data_, v267.__r_.__value_.__l.__size_);
  else
    v359 = v267;
  v360 = v49;
  v358 = off_24C335AF8;
  v361 = v48;
  v353 = (uint64_t (**)())off_24C335D90;
  v61 = SHIBYTE(v262.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v262.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v354, v262.__r_.__value_.__l.__data_, v262.__r_.__value_.__l.__size_);
  else
    v354 = v262;
  v353 = off_24C335B18;
  v356 = v264;
  v355 = v47;
  v357 = v265;
  v348 = (uint64_t (**)())off_24C335D90;
  v59 = SHIBYTE(v257.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v257.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v349, v257.__r_.__value_.__l.__data_, v257.__r_.__value_.__l.__size_);
  else
    v349 = v257;
  v348 = off_24C335B18;
  v351 = v259;
  v350 = v46;
  v352 = v260;
  v343 = (uint64_t (**)())off_24C335D90;
  v58 = SHIBYTE(v252.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v252.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v344, v252.__r_.__value_.__l.__data_, v252.__r_.__value_.__l.__size_);
  else
    v344 = v252;
  v343 = off_24C335B18;
  v346 = v254;
  v345 = v45;
  v347 = v255;
  v339 = (uint64_t (**)())off_24C335D90;
  v5 = SHIBYTE(v248.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v248.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v340, v248.__r_.__value_.__l.__data_, v248.__r_.__value_.__l.__size_);
  else
    v340 = v248;
  v341 = v44;
  v339 = off_24C335AF8;
  v342 = v43;
  v335 = (uint64_t (**)())off_24C335D90;
  v6 = SHIBYTE(v244.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v244.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v336, v244.__r_.__value_.__l.__data_, v244.__r_.__value_.__l.__size_);
  else
    v336 = v244;
  v337 = v42;
  v335 = off_24C335AF8;
  v338 = v41;
  v331 = (uint64_t (**)())off_24C335D90;
  v57 = SHIBYTE(v240.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v240.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v332, v240.__r_.__value_.__l.__data_, v240.__r_.__value_.__l.__size_);
  else
    v332 = v240;
  v333 = v40;
  v331 = off_24C335AF8;
  v334 = v39;
  v327 = (uint64_t (**)())off_24C335D90;
  v55 = SHIBYTE(v236.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v236.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v328, v236.__r_.__value_.__l.__data_, v236.__r_.__value_.__l.__size_);
  else
    v328 = v236;
  v329 = v38;
  v327 = off_24C335AF8;
  v330 = v37;
  v322 = (uint64_t (**)())off_24C335D90;
  v7 = SHIBYTE(v231.__r_.__value_.__r.__words[2]);
  v54 = v6;
  if (SHIBYTE(v231.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v323, v231.__r_.__value_.__l.__data_, v231.__r_.__value_.__l.__size_);
  else
    v323 = v231;
  v322 = off_24C335AD8;
  v325 = v233;
  v324 = v36;
  v326 = v234;
  v318 = (uint64_t (**)())off_24C335D90;
  v8 = SHIBYTE(v227.__r_.__value_.__r.__words[2]);
  v53 = v5;
  if (SHIBYTE(v227.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v319, v227.__r_.__value_.__l.__data_, v227.__r_.__value_.__l.__size_);
  else
    v319 = v227;
  v320 = v35;
  v318 = off_24C335AF8;
  v321 = v34;
  v314 = (uint64_t (**)())off_24C335D90;
  v9 = SHIBYTE(v223.__r_.__value_.__r.__words[2]);
  v51 = v7;
  if (SHIBYTE(v223.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v315, v223.__r_.__value_.__l.__data_, v223.__r_.__value_.__l.__size_);
  else
    v315 = v223;
  v316 = v33;
  v314 = off_24C335AF8;
  v317 = v32;
  v310 = (uint64_t (**)())off_24C335D90;
  v10 = SHIBYTE(v219.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v219.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v311, v219.__r_.__value_.__l.__data_, v219.__r_.__value_.__l.__size_);
  else
    v311 = v219;
  v312 = v31;
  v310 = off_24C335AF8;
  v313 = v30;
  v306 = (uint64_t (**)())off_24C335D90;
  v11 = SHIBYTE(v215.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v215.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v307, v215.__r_.__value_.__l.__data_, v215.__r_.__value_.__l.__size_);
  else
    v307 = v215;
  v308 = v29;
  v306 = off_24C335AF8;
  v309 = v28;
  v302 = (uint64_t (**)())off_24C335D90;
  v12 = SHIBYTE(v211.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v211.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v303, v211.__r_.__value_.__l.__data_, v211.__r_.__value_.__l.__size_);
  else
    v303 = v211;
  v304 = v27;
  v302 = off_24C335AF8;
  v305 = v26;
  v297 = (uint64_t (**)())off_24C335D90;
  v13 = SHIBYTE(v206.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v206.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&__p, v206.__r_.__value_.__l.__data_, v206.__r_.__value_.__l.__size_);
  else
    __p = v206;
  v297 = off_24C335B18;
  v300 = v208;
  v299 = v25;
  v301 = v209;
  mediaplatform::DatabaseColumnTuple<0ul,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<double>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>>::DatabaseColumnTuple(v1 + 80, (uint64_t)&v383, (uint64_t)&v379, (uint64_t)&v375, (uint64_t)&v370, (uint64_t)&v366, (uint64_t)&v362, (uint64_t)&v358, (uint64_t)&v353, (uint64_t)&v348, (uint64_t)&v343, (uint64_t)&v339, (uint64_t)&v335, (uint64_t)&v331, (uint64_t)&v327, (uint64_t)&v322, (uint64_t)&v318, (uint64_t)&v314, (uint64_t)&v310,
    (uint64_t)&v306,
    (uint64_t)&v302,
    (uint64_t)&v297);
  v297 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v302 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v303.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v303.__r_.__value_.__l.__data_);
  v306 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v307.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v307.__r_.__value_.__l.__data_);
  v310 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v311.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v311.__r_.__value_.__l.__data_);
  v314 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v315.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v315.__r_.__value_.__l.__data_);
  v318 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v319.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v319.__r_.__value_.__l.__data_);
  v322 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v323.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v323.__r_.__value_.__l.__data_);
  v327 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v328.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v328.__r_.__value_.__l.__data_);
  v331 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v332.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v332.__r_.__value_.__l.__data_);
  v335 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v336.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v336.__r_.__value_.__l.__data_);
  v339 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v340.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v340.__r_.__value_.__l.__data_);
  v343 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v344.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v344.__r_.__value_.__l.__data_);
  v348 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v349.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v349.__r_.__value_.__l.__data_);
  v353 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v354.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v354.__r_.__value_.__l.__data_);
  v358 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v359.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v359.__r_.__value_.__l.__data_);
  if (SHIBYTE(v363.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v363.__r_.__value_.__l.__data_);
  if (SHIBYTE(v367.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v367.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v370);
  if (SHIBYTE(v376.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v376.__r_.__value_.__l.__data_);
  if (SHIBYTE(v380.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v380.__r_.__value_.__l.__data_);
  if (SHIBYTE(v384.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v384.__r_.__value_.__l.__data_);
  v205 = (uint64_t (**)())off_24C335D90;
  if (v13 < 0)
    operator delete(v206.__r_.__value_.__l.__data_);
  v210 = (uint64_t (**)())off_24C335D90;
  if (v12 < 0)
    operator delete(v211.__r_.__value_.__l.__data_);
  v214 = (uint64_t (**)())off_24C335D90;
  if (v11 < 0)
    operator delete(v215.__r_.__value_.__l.__data_);
  v218 = (uint64_t (**)())off_24C335D90;
  if (v10 < 0)
    operator delete(v219.__r_.__value_.__l.__data_);
  v222 = (uint64_t (**)())off_24C335D90;
  if (v9 < 0)
    operator delete(v223.__r_.__value_.__l.__data_);
  v226 = (uint64_t (**)())off_24C335D90;
  if (v8 < 0)
    operator delete(v227.__r_.__value_.__l.__data_);
  v230 = (uint64_t (**)())off_24C335D90;
  if (v51 < 0)
    operator delete(v231.__r_.__value_.__l.__data_);
  v235 = (uint64_t (**)())off_24C335D90;
  if (v55 < 0)
    operator delete(v236.__r_.__value_.__l.__data_);
  v239 = (uint64_t (**)())off_24C335D90;
  if (v57 < 0)
    operator delete(v240.__r_.__value_.__l.__data_);
  v243 = (uint64_t (**)())off_24C335D90;
  if (v54 < 0)
    operator delete(v244.__r_.__value_.__l.__data_);
  v247 = (uint64_t (**)())off_24C335D90;
  if (v53 < 0)
    operator delete(v248.__r_.__value_.__l.__data_);
  v251 = (uint64_t (**)())off_24C335D90;
  if (v58 < 0)
    operator delete(v252.__r_.__value_.__l.__data_);
  v256 = (uint64_t (**)())off_24C335D90;
  if (v59 < 0)
    operator delete(v257.__r_.__value_.__l.__data_);
  v261 = (uint64_t (**)())off_24C335D90;
  if (v61 < 0)
    operator delete(v262.__r_.__value_.__l.__data_);
  v266 = (uint64_t (**)())off_24C335D90;
  if (v63 < 0)
    operator delete(v267.__r_.__value_.__l.__data_);
  v270 = (uint64_t (**)())off_24C335D90;
  if (v65 < 0)
    operator delete(v271.__r_.__value_.__l.__data_);
  v274 = (uint64_t (**)())off_24C335D90;
  if (v70 < 0)
    operator delete(v275.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v278);
  v283 = (uint64_t (**)())off_24C335D90;
  if (v67 < 0)
    operator delete(v284.__r_.__value_.__l.__data_);
  v287 = (uint64_t (**)())off_24C335D90;
  if (v69 < 0)
    operator delete(v288.__r_.__value_.__l.__data_);
  v291 = (uint64_t (**)())off_24C335D90;
  if (v24 < 0)
    operator delete(v292.__r_.__value_.__l.__data_);
  if (v23 < 0)
    operator delete(v296.__r_.__value_.__l.__data_);
  *(_QWORD *)v1 = off_24C336328;
  *(_QWORD *)(v1 + 1104) = off_24C335D90;
  if (SHIBYTE(v200.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external((std::string *)(v1 + 1112), v200.__r_.__value_.__l.__data_, v200.__r_.__value_.__l.__size_);
  else
    *(std::string *)(v1 + 1112) = v200;
  *(_DWORD *)(v1 + 1136) = v201;
  *(_QWORD *)(v1 + 1140) = v202;
  *(_DWORD *)(v1 + 1148) = v203;
  *(_QWORD *)(v1 + 1104) = off_24C336AC0;
  *(_QWORD *)(v1 + 1152) = off_24C335D90;
  if (SHIBYTE(v194.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external((std::string *)(v1 + 1160), v194.__r_.__value_.__l.__data_, v194.__r_.__value_.__l.__size_);
  else
    *(std::string *)(v1 + 1160) = v194;
  *(_DWORD *)(v1 + 1184) = v195;
  *(_QWORD *)(v1 + 1188) = v196;
  *(_QWORD *)(v1 + 1152) = off_24C336AA0;
  *(_QWORD *)(v1 + 1200) = off_24C335D90;
  v14 = (std::string *)(v1 + 1208);
  if (SHIBYTE(v188.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v14, v188.__r_.__value_.__l.__data_, v188.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v14->__r_.__value_.__l.__data_ = *(_OWORD *)&v188.__r_.__value_.__l.__data_;
    *(_QWORD *)(v1 + 1224) = *((_QWORD *)&v188.__r_.__value_.__l + 2);
  }
  *(_DWORD *)(v1 + 1232) = v189;
  *(_QWORD *)(v1 + 1236) = v190;
  *(_QWORD *)(v1 + 1200) = off_24C336AA0;
  std::__tuple_leaf<3ul,mlcore::MediaColumn<std::string>,false>::__tuple_leaf[abi:ne180100]<mlcore::MediaColumn<std::string>&,void>(v1 + 1248, (uint64_t)v180);
  *(_QWORD *)(v1 + 1312) = off_24C335D90;
  if (SHIBYTE(v175.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external((std::string *)(v1 + 1320), v175.__r_.__value_.__l.__data_, v175.__r_.__value_.__l.__size_);
  else
    *(std::string *)(v1 + 1320) = v175;
  *(_DWORD *)(v1 + 1344) = v176;
  *(_QWORD *)(v1 + 1348) = v177;
  *(_QWORD *)(v1 + 1312) = off_24C336AA0;
  *(_QWORD *)(v1 + 1360) = off_24C335D90;
  if (SHIBYTE(v169.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external((std::string *)(v1 + 1368), v169.__r_.__value_.__l.__data_, v169.__r_.__value_.__l.__size_);
  else
    *(std::string *)(v1 + 1368) = v169;
  *(_DWORD *)(v1 + 1392) = v170;
  *(_QWORD *)(v1 + 1396) = v171;
  *(_QWORD *)(v1 + 1360) = off_24C336AA0;
  *(_QWORD *)(v1 + 1408) = off_24C335D90;
  if (SHIBYTE(v163.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external((std::string *)(v1 + 1416), v163.__r_.__value_.__l.__data_, v163.__r_.__value_.__l.__size_);
  else
    *(std::string *)(v1 + 1416) = v163;
  *(_DWORD *)(v1 + 1440) = v164;
  *(_QWORD *)(v1 + 1444) = v165;
  *(_QWORD *)(v1 + 1408) = off_24C336AA0;
  *(_QWORD *)(v1 + 1456) = off_24C335D90;
  if (SHIBYTE(v156.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external((std::string *)(v1 + 1464), v156.__r_.__value_.__l.__data_, v156.__r_.__value_.__l.__size_);
  else
    *(std::string *)(v1 + 1464) = v156;
  *(_DWORD *)(v1 + 1488) = v157;
  *(_QWORD *)(v1 + 1492) = v158;
  *(_DWORD *)(v1 + 1500) = v159;
  *(_QWORD *)(v1 + 1456) = off_24C336AC0;
  *(_QWORD *)(v1 + 1504) = off_24C335D90;
  v15 = (std::string *)(v1 + 1512);
  if (SHIBYTE(v149.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v15, v149.__r_.__value_.__l.__data_, v149.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v15->__r_.__value_.__l.__data_ = *(_OWORD *)&v149.__r_.__value_.__l.__data_;
    *(_QWORD *)(v1 + 1528) = *((_QWORD *)&v149.__r_.__value_.__l + 2);
  }
  *(_DWORD *)(v1 + 1536) = v150;
  *(_QWORD *)(v1 + 1540) = v151;
  *(_DWORD *)(v1 + 1548) = v152;
  *(_QWORD *)(v1 + 1504) = off_24C336AC0;
  *(_QWORD *)(v1 + 1552) = off_24C335D90;
  v16 = (std::string *)(v1 + 1560);
  if (SHIBYTE(v142.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v16, v142.__r_.__value_.__l.__data_, v142.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v16->__r_.__value_.__l.__data_ = *(_OWORD *)&v142.__r_.__value_.__l.__data_;
    *(_QWORD *)(v1 + 1576) = *((_QWORD *)&v142.__r_.__value_.__l + 2);
  }
  *(_DWORD *)(v1 + 1584) = v143;
  *(_QWORD *)(v1 + 1588) = v144;
  *(_DWORD *)(v1 + 1596) = v145;
  *(_QWORD *)(v1 + 1552) = off_24C336AC0;
  *(_QWORD *)(v1 + 1600) = off_24C335D90;
  if (SHIBYTE(v136.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external((std::string *)(v1 + 1608), v136.__r_.__value_.__l.__data_, v136.__r_.__value_.__l.__size_);
  else
    *(std::string *)(v1 + 1608) = v136;
  *(_DWORD *)(v1 + 1632) = v137;
  *(_QWORD *)(v1 + 1636) = v138;
  *(_QWORD *)(v1 + 1600) = off_24C336AA0;
  *(_QWORD *)(v1 + 1648) = off_24C335D90;
  if (SHIBYTE(v130.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external((std::string *)(v1 + 1656), v130.__r_.__value_.__l.__data_, v130.__r_.__value_.__l.__size_);
  else
    *(std::string *)(v1 + 1656) = v130;
  *(_DWORD *)(v1 + 1680) = v131;
  *(_QWORD *)(v1 + 1684) = v132;
  *(_QWORD *)(v1 + 1648) = off_24C336AA0;
  *(_QWORD *)(v1 + 1696) = off_24C335D90;
  v17 = (std::string *)(v1 + 1704);
  if (SHIBYTE(v124.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v17, v124.__r_.__value_.__l.__data_, v124.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v17->__r_.__value_.__l.__data_ = *(_OWORD *)&v124.__r_.__value_.__l.__data_;
    *(_QWORD *)(v1 + 1720) = *((_QWORD *)&v124.__r_.__value_.__l + 2);
  }
  *(_DWORD *)(v1 + 1728) = v125;
  *(_QWORD *)(v1 + 1732) = v126;
  *(_QWORD *)(v1 + 1696) = off_24C336AA0;
  *(_QWORD *)(v1 + 1744) = off_24C335D90;
  v18 = (std::string *)(v1 + 1752);
  if (SHIBYTE(v118.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v18, v118.__r_.__value_.__l.__data_, v118.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v18->__r_.__value_.__l.__data_ = *(_OWORD *)&v118.__r_.__value_.__l.__data_;
    *(_QWORD *)(v1 + 1768) = *((_QWORD *)&v118.__r_.__value_.__l + 2);
  }
  *(_DWORD *)(v1 + 1776) = v119;
  *(_QWORD *)(v1 + 1780) = v120;
  *(_QWORD *)(v1 + 1744) = off_24C336AA0;
  *(_QWORD *)(v1 + 1792) = off_24C335D90;
  v19 = (std::string *)(v1 + 1800);
  if (SHIBYTE(v111.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v19, v111.__r_.__value_.__l.__data_, v111.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v19->__r_.__value_.__l.__data_ = *(_OWORD *)&v111.__r_.__value_.__l.__data_;
    *(_QWORD *)(v1 + 1816) = *((_QWORD *)&v111.__r_.__value_.__l + 2);
  }
  *(_DWORD *)(v1 + 1824) = v112;
  *(_QWORD *)(v1 + 1828) = v113;
  *(_DWORD *)(v1 + 1836) = v114;
  *(_QWORD *)(v1 + 1792) = off_24C336A80;
  *(_QWORD *)(v1 + 1840) = off_24C335D90;
  if (SHIBYTE(v105.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external((std::string *)(v1 + 1848), v105.__r_.__value_.__l.__data_, v105.__r_.__value_.__l.__size_);
  else
    *(std::string *)(v1 + 1848) = v105;
  *(_DWORD *)(v1 + 1872) = v106;
  *(_QWORD *)(v1 + 1876) = v107;
  *(_QWORD *)(v1 + 1840) = off_24C336AA0;
  *(_QWORD *)(v1 + 1888) = off_24C335D90;
  if (SHIBYTE(v99.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external((std::string *)(v1 + 1896), v99.__r_.__value_.__l.__data_, v99.__r_.__value_.__l.__size_);
  else
    *(std::string *)(v1 + 1896) = v99;
  *(_DWORD *)(v1 + 1920) = v100;
  *(_QWORD *)(v1 + 1924) = v101;
  *(_QWORD *)(v1 + 1888) = off_24C336AA0;
  *(_QWORD *)(v1 + 1936) = off_24C335D90;
  if (SHIBYTE(v93.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external((std::string *)(v1 + 1944), v93.__r_.__value_.__l.__data_, v93.__r_.__value_.__l.__size_);
  else
    *(std::string *)(v1 + 1944) = v93;
  *(_DWORD *)(v1 + 1968) = v94;
  *(_QWORD *)(v1 + 1972) = v95;
  *(_QWORD *)(v1 + 1936) = off_24C336AA0;
  *(_QWORD *)(v1 + 1984) = off_24C335D90;
  if (SHIBYTE(v87.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external((std::string *)(v1 + 1992), v87.__r_.__value_.__l.__data_, v87.__r_.__value_.__l.__size_);
  else
    *(std::string *)(v1 + 1992) = v87;
  *(_DWORD *)(v1 + 2016) = v88;
  *(_QWORD *)(v1 + 2020) = v89;
  *(_QWORD *)(v1 + 1984) = off_24C336AA0;
  *(_QWORD *)(v1 + 2032) = off_24C335D90;
  if (SHIBYTE(v81.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external((std::string *)(v1 + 2040), v81.__r_.__value_.__l.__data_, v81.__r_.__value_.__l.__size_);
  else
    *(std::string *)(v1 + 2040) = v81;
  *(_DWORD *)(v1 + 2064) = v82;
  *(_QWORD *)(v1 + 2068) = v83;
  *(_QWORD *)(v1 + 2032) = off_24C336AA0;
  *(_QWORD *)(v1 + 2080) = off_24C335D90;
  v20 = (std::string *)(v1 + 2088);
  v21 = HIBYTE(v74.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v74.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v20, v74.__r_.__value_.__l.__data_, v74.__r_.__value_.__l.__size_);
    v21 = HIBYTE(v74.__r_.__value_.__r.__words[2]);
  }
  else
  {
    *(_OWORD *)&v20->__r_.__value_.__l.__data_ = *(_OWORD *)&v74.__r_.__value_.__l.__data_;
    *(_QWORD *)(v1 + 2104) = *((_QWORD *)&v74.__r_.__value_.__l + 2);
  }
  *(_DWORD *)(v1 + 2112) = v75;
  *(_QWORD *)(v1 + 2116) = v76;
  *(_DWORD *)(v1 + 2124) = v77;
  *(_QWORD *)(v1 + 2080) = off_24C336AC0;
  v73 = off_24C335D90;
  if (v21 < 0)
    operator delete(v74.__r_.__value_.__l.__data_);
  if (v72 < 0)
    operator delete(v71[0]);
  v80 = off_24C335D90;
  if (SHIBYTE(v81.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v81.__r_.__value_.__l.__data_);
  if (v79 < 0)
    operator delete(v78[0]);
  v86 = off_24C335D90;
  if (SHIBYTE(v87.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v87.__r_.__value_.__l.__data_);
  if (v85 < 0)
    operator delete(v84[0]);
  v92 = off_24C335D90;
  if (SHIBYTE(v93.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v93.__r_.__value_.__l.__data_);
  if (v91 < 0)
    operator delete(v90[0]);
  v98 = off_24C335D90;
  if (SHIBYTE(v99.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v99.__r_.__value_.__l.__data_);
  if (v97 < 0)
    operator delete(v96[0]);
  v104 = off_24C335D90;
  if (SHIBYTE(v105.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v105.__r_.__value_.__l.__data_);
  if (v103 < 0)
    operator delete(v102[0]);
  v110 = off_24C335D90;
  if (SHIBYTE(v111.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v111.__r_.__value_.__l.__data_);
  if (v109 < 0)
    operator delete(v108[0]);
  v117 = off_24C335D90;
  if (SHIBYTE(v118.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v118.__r_.__value_.__l.__data_);
  if (v116 < 0)
    operator delete(v115[0]);
  v123 = off_24C335D90;
  if (SHIBYTE(v124.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v124.__r_.__value_.__l.__data_);
  if (v122 < 0)
    operator delete(v121[0]);
  v129 = off_24C335D90;
  if (SHIBYTE(v130.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v130.__r_.__value_.__l.__data_);
  if (v128 < 0)
    operator delete(v127[0]);
  v135 = off_24C335D90;
  if (SHIBYTE(v136.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v136.__r_.__value_.__l.__data_);
  if (v134 < 0)
    operator delete(v133[0]);
  v141 = off_24C335D90;
  if (SHIBYTE(v142.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v142.__r_.__value_.__l.__data_);
  if (v140 < 0)
    operator delete(v139[0]);
  v148 = off_24C335D90;
  if (SHIBYTE(v149.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v149.__r_.__value_.__l.__data_);
  if (v147 < 0)
    operator delete(v146[0]);
  v155 = off_24C335D90;
  if (SHIBYTE(v156.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v156.__r_.__value_.__l.__data_);
  if (v154 < 0)
    operator delete(v153[0]);
  v162 = off_24C335D90;
  if (SHIBYTE(v163.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v163.__r_.__value_.__l.__data_);
  if (v161 < 0)
    operator delete(v160[0]);
  v168 = off_24C335D90;
  if (SHIBYTE(v169.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v169.__r_.__value_.__l.__data_);
  if (v167 < 0)
    operator delete(v166[0]);
  v174 = off_24C335D90;
  if (SHIBYTE(v175.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v175.__r_.__value_.__l.__data_);
  if (v173 < 0)
    operator delete(v172[0]);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)v180);
  if (v179 < 0)
    operator delete(v178[0]);
  v187 = off_24C335D90;
  if (SHIBYTE(v188.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v188.__r_.__value_.__l.__data_);
  if (v186 < 0)
    operator delete(v185[0]);
  v193 = off_24C335D90;
  if (SHIBYTE(v194.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v194.__r_.__value_.__l.__data_);
  if (v192 < 0)
    operator delete(v191[0]);
  v199 = off_24C335D90;
  if (SHIBYTE(v200.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v200.__r_.__value_.__l.__data_);
  if (v198 < 0)
    operator delete(v197[0]);
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__s.__r_.__value_.__l.__data_);
  *(_QWORD *)v1 = off_24C337528;
  return v1;
}

void sub_20A69879C(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;
  void **v3;
  uint64_t v4;
  void **v5;
  void **v6;
  void **v7;

  *(_QWORD *)(v1 + 2032) = v4;
  if (*(char *)(v1 + 2063) < 0)
    operator delete(*v3);
  *(_QWORD *)(v1 + 1984) = v4;
  if (*(char *)(v1 + 2015) < 0)
    operator delete(*v5);
  *(_QWORD *)(v1 + 1936) = v4;
  if (*(char *)(v1 + 1967) < 0)
    operator delete(*v2);
  *(_QWORD *)(v1 + 1888) = v4;
  if (*(char *)(v1 + 1919) < 0)
    operator delete(*v7);
  *(_QWORD *)(v1 + 1840) = v4;
  if (*(char *)(v1 + 1871) < 0)
    operator delete(*v6);
  *(_QWORD *)(v1 + 1792) = v4;
  if (*(char *)(v1 + 1823) < 0)
    operator delete(*(void **)STACK[0x230]);
  *(_QWORD *)(v1 + 1744) = v4;
  if (*(char *)(v1 + 1775) < 0)
    operator delete(*(void **)STACK[0x238]);
  *(_QWORD *)(v1 + 1696) = v4;
  if (*(char *)(v1 + 1727) < 0)
    operator delete(*(void **)STACK[0x240]);
  *(_QWORD *)(v1 + 1648) = v4;
  if (*(char *)(v1 + 1679) < 0)
    operator delete(*(void **)STACK[0x248]);
  *(_QWORD *)(v1 + 1600) = v4;
  if (*(char *)(v1 + 1631) < 0)
    operator delete(*(void **)STACK[0x250]);
  *(_QWORD *)(v1 + 1552) = v4;
  if (*(char *)(v1 + 1583) < 0)
    operator delete(*(void **)STACK[0x258]);
  *(_QWORD *)(v1 + 1504) = v4;
  if (*(char *)(v1 + 1535) < 0)
    operator delete(*(void **)STACK[0x260]);
  *(_QWORD *)(v1 + 1456) = v4;
  if (*(char *)(v1 + 1487) < 0)
    operator delete(*(void **)STACK[0x268]);
  *(_QWORD *)(v1 + 1408) = v4;
  if (*(char *)(v1 + 1439) < 0)
    operator delete(*(void **)STACK[0x270]);
  *(_QWORD *)(v1 + 1360) = v4;
  if (*(char *)(v1 + 1391) < 0)
    operator delete(*(void **)STACK[0x278]);
  *(_QWORD *)(v1 + 1312) = v4;
  if (*(char *)(v1 + 1343) < 0)
    operator delete(*(void **)STACK[0x280]);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(STACK[0x2A0]);
  *(_QWORD *)(v1 + 1200) = v4;
  if (*(char *)(v1 + 1231) < 0)
    operator delete(*(void **)STACK[0x288]);
  *(_QWORD *)(v1 + 1152) = v4;
  if (*(char *)(v1 + 1183) < 0)
    operator delete(*(void **)STACK[0x290]);
  *(_QWORD *)(v1 + 1104) = v4;
  if (*(char *)(v1 + 1135) < 0)
    operator delete(*(void **)STACK[0x298]);
  mediaplatform::DatabaseTable<long long,int,int,std::string,int,int,int,long long,long long,long long,int,int,int,int,double,int,int,int,int,int,long long>::~DatabaseTable(v1);
  STACK[0x2C8] = (unint64_t)off_24C335D90;
  if (SLOBYTE(STACK[0x2E7]) < 0)
    operator delete((void *)STACK[0x2D0]);
  if (SLOBYTE(STACK[0x2C7]) < 0)
    operator delete((void *)STACK[0x2B0]);
  STACK[0x310] = (unint64_t)off_24C335D90;
  if (SLOBYTE(STACK[0x32F]) < 0)
    operator delete((void *)STACK[0x318]);
  if (SLOBYTE(STACK[0x30F]) < 0)
    operator delete((void *)STACK[0x2F8]);
  STACK[0x358] = (unint64_t)off_24C335D90;
  if (SLOBYTE(STACK[0x377]) < 0)
    operator delete((void *)STACK[0x360]);
  if (SLOBYTE(STACK[0x357]) < 0)
    operator delete((void *)STACK[0x340]);
  STACK[0x3A0] = (unint64_t)off_24C335D90;
  if (SLOBYTE(STACK[0x3BF]) < 0)
    operator delete((void *)STACK[0x3A8]);
  if (SLOBYTE(STACK[0x39F]) < 0)
    operator delete((void *)STACK[0x388]);
  STACK[0x3E8] = (unint64_t)off_24C335D90;
  if (SLOBYTE(STACK[0x407]) < 0)
    operator delete((void *)STACK[0x3F0]);
  if (SLOBYTE(STACK[0x3E7]) < 0)
    operator delete((void *)STACK[0x3D0]);
  STACK[0x430] = (unint64_t)off_24C335D90;
  if (SLOBYTE(STACK[0x44F]) < 0)
    operator delete((void *)STACK[0x438]);
  if (SLOBYTE(STACK[0x42F]) < 0)
    operator delete((void *)STACK[0x418]);
  STACK[0x478] = (unint64_t)off_24C335D90;
  if (SLOBYTE(STACK[0x497]) < 0)
    operator delete((void *)STACK[0x480]);
  if (SLOBYTE(STACK[0x477]) < 0)
    operator delete((void *)STACK[0x460]);
  STACK[0x4C0] = (unint64_t)off_24C335D90;
  if (SLOBYTE(STACK[0x4DF]) < 0)
    operator delete((void *)STACK[0x4C8]);
  if (SLOBYTE(STACK[0x4BF]) < 0)
    operator delete((void *)STACK[0x4A8]);
  STACK[0x508] = (unint64_t)off_24C335D90;
  if (SLOBYTE(STACK[0x527]) < 0)
    operator delete((void *)STACK[0x510]);
  if (SLOBYTE(STACK[0x507]) < 0)
    operator delete((void *)STACK[0x4F0]);
  STACK[0x550] = (unint64_t)off_24C335D90;
  if (SLOBYTE(STACK[0x56F]) < 0)
    operator delete((void *)STACK[0x558]);
  if (SLOBYTE(STACK[0x54F]) < 0)
    operator delete((void *)STACK[0x538]);
  STACK[0x598] = (unint64_t)off_24C335D90;
  if (SLOBYTE(STACK[0x5B7]) < 0)
    operator delete((void *)STACK[0x5A0]);
  if (SLOBYTE(STACK[0x597]) < 0)
    operator delete((void *)STACK[0x580]);
  STACK[0x5E0] = (unint64_t)off_24C335D90;
  if (SLOBYTE(STACK[0x5FF]) < 0)
    operator delete((void *)STACK[0x5E8]);
  if (SLOBYTE(STACK[0x5DF]) < 0)
    operator delete((void *)STACK[0x5C8]);
  STACK[0x628] = (unint64_t)off_24C335D90;
  if (SLOBYTE(STACK[0x647]) < 0)
    operator delete((void *)STACK[0x630]);
  if (SLOBYTE(STACK[0x627]) < 0)
    operator delete((void *)STACK[0x610]);
  STACK[0x670] = (unint64_t)off_24C335D90;
  if (SLOBYTE(STACK[0x68F]) < 0)
    operator delete((void *)STACK[0x678]);
  if (SLOBYTE(STACK[0x66F]) < 0)
    operator delete((void *)STACK[0x658]);
  STACK[0x6B8] = (unint64_t)off_24C335D90;
  if (SLOBYTE(STACK[0x6D7]) < 0)
    operator delete((void *)STACK[0x6C0]);
  if (SLOBYTE(STACK[0x6B7]) < 0)
    operator delete((void *)STACK[0x6A0]);
  STACK[0x700] = (unint64_t)off_24C335D90;
  if (SLOBYTE(STACK[0x71F]) < 0)
    operator delete((void *)STACK[0x708]);
  if (SLOBYTE(STACK[0x6FF]) < 0)
    operator delete((void *)STACK[0x6E8]);
  STACK[0x748] = (unint64_t)off_24C335D90;
  if (SLOBYTE(STACK[0x767]) < 0)
    operator delete((void *)STACK[0x750]);
  if (SLOBYTE(STACK[0x747]) < 0)
    operator delete((void *)STACK[0x730]);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&STACK[0x790]);
  if (SLOBYTE(STACK[0x78F]) < 0)
    operator delete((void *)STACK[0x778]);
  STACK[0x7E8] = (unint64_t)off_24C335D90;
  if (SLOBYTE(STACK[0x807]) < 0)
    operator delete((void *)STACK[0x7F0]);
  if (SLOBYTE(STACK[0x7E7]) < 0)
    operator delete((void *)STACK[0x7D0]);
  STACK[0x830] = (unint64_t)off_24C335D90;
  if (SLOBYTE(STACK[0x84F]) < 0)
    operator delete((void *)STACK[0x838]);
  if (SLOBYTE(STACK[0x82F]) < 0)
    operator delete((void *)STACK[0x818]);
  STACK[0x878] = (unint64_t)off_24C335D90;
  if (SLOBYTE(STACK[0x897]) < 0)
    operator delete((void *)STACK[0x880]);
  if (SLOBYTE(STACK[0x877]) < 0)
    operator delete((void *)STACK[0x860]);
  if (SLOBYTE(STACK[0x8BF]) < 0)
    operator delete((void *)STACK[0x8A8]);
  _Unwind_Resume(a1);
}

void sub_20A6992A8()
{
  JUMPOUT(0x20A698F24);
}

void sub_20A6992B0()
{
  JUMPOUT(0x20A698F34);
}

void sub_20A6992B8()
{
  JUMPOUT(0x20A698F50);
}

void sub_20A6992C0()
{
  JUMPOUT(0x20A698F60);
}

void sub_20A6992C8()
{
  JUMPOUT(0x20A698F7CLL);
}

void sub_20A6992D0()
{
  JUMPOUT(0x20A698F8CLL);
}

void sub_20A6992D8()
{
  JUMPOUT(0x20A698FA8);
}

void sub_20A6992E0()
{
  JUMPOUT(0x20A698FB8);
}

void sub_20A6992E8()
{
  JUMPOUT(0x20A698FD4);
}

void sub_20A6992F0()
{
  JUMPOUT(0x20A698FE4);
}

void sub_20A6992F8()
{
  JUMPOUT(0x20A699000);
}

void sub_20A699300()
{
  JUMPOUT(0x20A699010);
}

void sub_20A699308()
{
  JUMPOUT(0x20A69902CLL);
}

void sub_20A699310()
{
  JUMPOUT(0x20A69903CLL);
}

void sub_20A699318()
{
  JUMPOUT(0x20A699058);
}

void sub_20A699320()
{
  JUMPOUT(0x20A699068);
}

void sub_20A699328()
{
  JUMPOUT(0x20A699084);
}

void sub_20A699330()
{
  JUMPOUT(0x20A699094);
}

void sub_20A699338()
{
  JUMPOUT(0x20A6990B0);
}

void sub_20A699340()
{
  JUMPOUT(0x20A6990C0);
}

void sub_20A699348()
{
  JUMPOUT(0x20A6990DCLL);
}

void sub_20A699350()
{
  JUMPOUT(0x20A6990ECLL);
}

void sub_20A699358()
{
  JUMPOUT(0x20A699108);
}

void sub_20A699360()
{
  JUMPOUT(0x20A699118);
}

void sub_20A699368()
{
  JUMPOUT(0x20A699134);
}

void sub_20A699370()
{
  JUMPOUT(0x20A699144);
}

void sub_20A699378()
{
  JUMPOUT(0x20A699160);
}

void sub_20A699380()
{
  JUMPOUT(0x20A699170);
}

void sub_20A699388()
{
  JUMPOUT(0x20A69918CLL);
}

void sub_20A699390()
{
  JUMPOUT(0x20A69919CLL);
}

void sub_20A699398()
{
  JUMPOUT(0x20A6991B8);
}

void sub_20A6993A0()
{
  JUMPOUT(0x20A6991C8);
}

void sub_20A6993A8()
{
  JUMPOUT(0x20A6991E4);
}

void sub_20A6993B0()
{
  JUMPOUT(0x20A6991F4);
}

void sub_20A6993B8()
{
  JUMPOUT(0x20A6991FCLL);
}

void sub_20A6993C0()
{
  JUMPOUT(0x20A69920CLL);
}

void sub_20A6993C8()
{
  JUMPOUT(0x20A699228);
}

void sub_20A6993D0()
{
  JUMPOUT(0x20A699238);
}

void sub_20A6993D8()
{
  JUMPOUT(0x20A699254);
}

void sub_20A6993E0()
{
  JUMPOUT(0x20A699264);
}

void sub_20A6993E8()
{
  JUMPOUT(0x20A699280);
}

void sub_20A6993F0()
{
  JUMPOUT(0x20A699290);
}

uint64_t mlcore::ItemPlaybackTable::ItemPlaybackTable(mlcore::ItemPlaybackTable *this)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  int v4;
  std::string *v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  std::string *v13;
  std::string *v14;
  std::string *v15;
  std::string *v16;
  std::string *v17;
  std::string *v18;
  std::string *v19;
  char v20;
  int v22;
  int v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  int v27;
  int v28;
  int v29;
  int v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  int v34;
  int v35;
  int v36;
  int v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  int v41;
  int v42;
  uint64_t v43;
  int v44;
  int v45;
  int v46;
  uint64_t v47;
  int v48;
  int v49;
  int v50;
  uint64_t v51;
  int v52;
  int v53;
  int v54;
  int v55;
  int v56;
  int v57;
  int v58;
  void *v59[2];
  char v60;
  void (**v61)(mediaplatform::DatabaseColumnBase *__hidden);
  std::string v62;
  int v63;
  uint64_t v64;
  void *v65[2];
  char v66;
  void (**v67)(mediaplatform::DatabaseColumnBase *__hidden);
  std::string v68;
  int v69;
  uint64_t v70;
  void *v71[2];
  char v72;
  void (**v73)(mediaplatform::DatabaseColumnBase *__hidden);
  std::string v74;
  int v75;
  uint64_t v76;
  int v77;
  void *v78[2];
  char v79;
  void (**v80)(mediaplatform::DatabaseColumnBase *__hidden);
  std::string v81;
  int v82;
  uint64_t v83;
  int v84;
  void *v85[2];
  char v86;
  void (**v87)(mediaplatform::DatabaseColumnBase *__hidden);
  std::string v88;
  int v89;
  uint64_t v90;
  int v91;
  void *v92[2];
  char v93;
  void (**v94)(mediaplatform::DatabaseColumnBase *__hidden);
  std::string v95;
  int v96;
  uint64_t v97;
  void *v98[2];
  char v99;
  void (**v100)(mediaplatform::DatabaseColumnBase *__hidden);
  std::string v101;
  int v102;
  uint64_t v103;
  void *v104[2];
  char v105;
  void (**v106)(mediaplatform::DatabaseColumnBase *__hidden);
  std::string v107;
  int v108;
  uint64_t v109;
  int v110;
  void *v111[2];
  char v112;
  void (**v113)(mediaplatform::DatabaseColumnBase *__hidden);
  std::string v114;
  int v115;
  uint64_t v116;
  int v117;
  void *v118[2];
  char v119;
  void (**v120)(mediaplatform::DatabaseColumnBase *__hidden);
  std::string v121;
  int v122;
  uint64_t v123;
  int v124;
  void *v125[2];
  char v126;
  void (**v127)(mediaplatform::DatabaseColumnBase *__hidden);
  std::string v128;
  int v129;
  uint64_t v130;
  int v131;
  void *v132[2];
  char v133;
  _BYTE v134[8];
  std::string v135;
  int v136;
  char v137;
  std::string v138;
  void *v139[2];
  char v140;
  _BYTE v141[8];
  std::string v142;
  int v143;
  char v144;
  std::string v145;
  void *v146[2];
  char v147;
  void (**v148)(mediaplatform::DatabaseColumnBase *__hidden);
  std::string v149;
  int v150;
  uint64_t v151;
  int v152;
  void *v153[2];
  char v154;
  _BYTE v155[8];
  std::string v156;
  int v157;
  char v158;
  std::string v159;
  void *v160[2];
  char v161;
  void (**v162)(mediaplatform::DatabaseColumnBase *__hidden);
  std::string v163;
  int v164;
  uint64_t v165;
  void *v166[2];
  char v167;
  void (**v168)(mediaplatform::DatabaseColumnBase *__hidden);
  std::string v169;
  int v170;
  uint64_t v171;
  void *v172[2];
  char v173;
  void (**v174)(mediaplatform::DatabaseColumnBase *__hidden);
  std::string v175;
  int v176;
  uint64_t v177;
  void *v178[2];
  char v179;
  void (**v180)(mediaplatform::DatabaseColumnBase *__hidden);
  std::string v181;
  int v182;
  uint64_t v183;
  void *v184[2];
  char v185;
  void (**v186)(mediaplatform::DatabaseColumnBase *__hidden);
  std::string v187;
  int v188;
  uint64_t v189;
  void *v190[2];
  char v191;
  void (**v192)(mediaplatform::DatabaseColumnBase *__hidden);
  std::string v193;
  int v194;
  uint64_t v195;
  int v196;
  std::string __s;
  uint64_t (**v198)();
  std::string v199;
  int v200;
  uint64_t v201;
  uint64_t (**v202)();
  std::string v203;
  int v204;
  uint64_t v205;
  uint64_t (**v206)();
  std::string v207;
  int v208;
  uint64_t v209;
  int v210;
  uint64_t (**v211)();
  std::string v212;
  int v213;
  uint64_t v214;
  int v215;
  uint64_t (**v216)();
  std::string v217;
  int v218;
  uint64_t v219;
  int v220;
  uint64_t (**v221)();
  std::string v222;
  int v223;
  uint64_t v224;
  uint64_t (**v225)();
  std::string v226;
  int v227;
  uint64_t v228;
  uint64_t (**v229)();
  std::string v230;
  int v231;
  uint64_t v232;
  int v233;
  uint64_t (**v234)();
  std::string v235;
  int v236;
  uint64_t v237;
  int v238;
  uint64_t (**v239)();
  std::string v240;
  int v241;
  uint64_t v242;
  int v243;
  uint64_t (**v244)();
  std::string v245;
  int v246;
  uint64_t v247;
  int v248;
  uint64_t (**v249)();
  std::string v250;
  int v251;
  char v252;
  std::string v253;
  uint64_t (**v254)();
  std::string v255;
  int v256;
  char v257;
  std::string v258;
  uint64_t (**v259)();
  std::string v260;
  int v261;
  uint64_t v262;
  int v263;
  uint64_t (**v264)();
  std::string v265;
  int v266;
  char v267;
  std::string v268;
  uint64_t (**v269)();
  std::string v270;
  int v271;
  uint64_t v272;
  uint64_t (**v273)();
  std::string v274;
  int v275;
  uint64_t v276;
  uint64_t (**v277)();
  std::string v278;
  int v279;
  uint64_t v280;
  uint64_t (**v281)();
  std::string v282;
  int v283;
  uint64_t v284;
  uint64_t (**v285)();
  std::string v286;
  int v287;
  uint64_t v288;
  uint64_t (**v289)();
  std::string v290;
  int v291;
  uint64_t v292;
  int v293;
  std::string v294;
  uint64_t (**v295)();
  std::string __p;
  int v297;
  uint64_t v298;
  uint64_t (**v299)();
  std::string v300;
  int v301;
  uint64_t v302;
  uint64_t (**v303)();
  std::string v304;
  int v305;
  uint64_t v306;
  int v307;
  uint64_t (**v308)();
  std::string v309;
  int v310;
  uint64_t v311;
  int v312;
  uint64_t (**v313)();
  std::string v314;
  int v315;
  uint64_t v316;
  int v317;
  uint64_t (**v318)();
  std::string v319;
  int v320;
  uint64_t v321;
  uint64_t (**v322)();
  std::string v323;
  int v324;
  uint64_t v325;
  uint64_t (**v326)();
  std::string v327;
  int v328;
  uint64_t v329;
  int v330;
  uint64_t (**v331)();
  std::string v332;
  int v333;
  uint64_t v334;
  int v335;
  uint64_t (**v336)();
  std::string v337;
  int v338;
  uint64_t v339;
  int v340;
  uint64_t (**v341)();
  std::string v342;
  int v343;
  uint64_t v344;
  int v345;
  uint64_t (**v346)();
  std::string v347;
  int v348;
  char v349;
  std::string v350;
  uint64_t (**v351)();
  std::string v352;
  int v353;
  char v354;
  std::string v355;
  uint64_t (**v356)();
  std::string v357;
  int v358;
  uint64_t v359;
  int v360;
  uint64_t (**v361)();
  std::string v362;
  int v363;
  char v364;
  std::string v365;
  uint64_t (**v366)();
  std::string v367;
  int v368;
  uint64_t v369;
  uint64_t (**v370)();
  std::string v371;
  int v372;
  uint64_t v373;
  uint64_t (**v374)();
  std::string v375;
  int v376;
  uint64_t v377;
  uint64_t (**v378)();
  std::string v379;
  int v380;
  uint64_t v381;
  uint64_t (**v382)();
  std::string v383;
  int v384;
  uint64_t v385;
  uint64_t (**v386)();
  std::string v387;
  int v388;
  uint64_t v389;
  int v390;

  v1 = MEMORY[0x24BDAC7A8](this);
  std::string::basic_string[abi:ne180100]<0>(&__s, "item_playback");
  std::string::basic_string[abi:ne180100]<0>(v190, "item_pid");
  mlcore::MediaColumn<long long>::MediaColumn((uint64_t)&v192, (uint64_t)v190, 1);
  std::string::basic_string[abi:ne180100]<0>(v184, "audio_format");
  mlcore::MediaColumn<int>::MediaColumn((uint64_t)&v186, (uint64_t)v184, 0);
  std::string::basic_string[abi:ne180100]<0>(v178, "bit_rate");
  mlcore::MediaColumn<int>::MediaColumn((uint64_t)&v180, (uint64_t)v178, 0);
  std::string::basic_string[abi:ne180100]<0>(v172, "codec_type");
  mlcore::MediaColumn<int>::MediaColumn((uint64_t)&v174, (uint64_t)v172, 0);
  std::string::basic_string[abi:ne180100]<0>(v166, "codec_subtype");
  mlcore::MediaColumn<int>::MediaColumn((uint64_t)&v168, (uint64_t)v166, 0);
  std::string::basic_string[abi:ne180100]<0>(v160, "data_kind");
  mlcore::MediaColumn<int>::MediaColumn((uint64_t)&v162, (uint64_t)v160, 0);
  std::string::basic_string[abi:ne180100]<0>(v153, "data_url");
  mlcore::MediaColumn<std::string>::MediaColumn((uint64_t)v155, (uint64_t)v153, 0);
  std::string::basic_string[abi:ne180100]<0>(v146, "duration");
  mlcore::MediaColumn<long long>::MediaColumn((uint64_t)&v148, (uint64_t)v146);
  std::string::basic_string[abi:ne180100]<0>(v139, "eq_preset");
  mlcore::MediaColumn<std::string>::MediaColumn((uint64_t)v141, (uint64_t)v139, 0);
  std::string::basic_string[abi:ne180100]<0>(v132, "format");
  mlcore::MediaColumn<std::string>::MediaColumn((uint64_t)v134, (uint64_t)v132, 0);
  std::string::basic_string[abi:ne180100]<0>(v125, "gapless_heuristic_info");
  mlcore::MediaColumn<long long>::MediaColumn((uint64_t)&v127, (uint64_t)v125);
  std::string::basic_string[abi:ne180100]<0>(v118, "gapless_encoding_delay");
  mlcore::MediaColumn<long long>::MediaColumn((uint64_t)&v120, (uint64_t)v118);
  std::string::basic_string[abi:ne180100]<0>(v111, "gapless_encoding_drain");
  mlcore::MediaColumn<long long>::MediaColumn((uint64_t)&v113, (uint64_t)v111);
  std::string::basic_string[abi:ne180100]<0>(v104, "gapless_last_frame_resynch");
  mlcore::MediaColumn<long long>::MediaColumn((uint64_t)&v106, (uint64_t)v104);
  std::string::basic_string[abi:ne180100]<0>(v98, "has_video");
  mlcore::MediaColumn<int>::MediaColumn((uint64_t)&v100, (uint64_t)v98, 0);
  std::string::basic_string[abi:ne180100]<0>(v92, "relative_volume");
  mlcore::MediaColumn<int>::MediaColumn((uint64_t)&v94, (uint64_t)v92, 0);
  std::string::basic_string[abi:ne180100]<0>(v85, "sample_rate");
  mlcore::MediaColumn<double>::MediaColumn((uint64_t)&v87, (uint64_t)v85);
  std::string::basic_string[abi:ne180100]<0>(v78, "start_time_ms");
  mlcore::MediaColumn<double>::MediaColumn((uint64_t)&v80, (uint64_t)v78);
  std::string::basic_string[abi:ne180100]<0>(v71, "stop_time_ms");
  mlcore::MediaColumn<double>::MediaColumn((uint64_t)&v73, (uint64_t)v71);
  std::string::basic_string[abi:ne180100]<0>(v65, "volume_normalization_energy");
  mlcore::MediaColumn<int>::MediaColumn((uint64_t)&v67, (uint64_t)v65, 0);
  std::string::basic_string[abi:ne180100]<0>(v59, "progression_direction");
  mlcore::MediaColumn<int>::MediaColumn((uint64_t)&v61, (uint64_t)v59, 0);
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v294, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
  else
    v294 = __s;
  v289 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v193.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v290, v193.__r_.__value_.__l.__data_, v193.__r_.__value_.__l.__size_);
  else
    v290 = v193;
  v289 = off_24C335B18;
  v292 = v195;
  v56 = v194;
  v291 = v194;
  v293 = v196;
  v285 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v187.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v286, v187.__r_.__value_.__l.__data_, v187.__r_.__value_.__l.__size_);
  else
    v286 = v187;
  v53 = v188;
  v287 = v188;
  v285 = off_24C335AF8;
  v51 = v189;
  v288 = v189;
  v281 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v181.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v282, v181.__r_.__value_.__l.__data_, v181.__r_.__value_.__l.__size_);
  else
    v282 = v181;
  v49 = v182;
  v283 = v182;
  v281 = off_24C335AF8;
  v47 = v183;
  v284 = v183;
  v277 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v175.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v278, v175.__r_.__value_.__l.__data_, v175.__r_.__value_.__l.__size_);
  else
    v278 = v175;
  v45 = v176;
  v279 = v176;
  v277 = off_24C335AF8;
  v43 = v177;
  v280 = v177;
  v273 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v169.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v274, v169.__r_.__value_.__l.__data_, v169.__r_.__value_.__l.__size_);
  else
    v274 = v169;
  v41 = v170;
  v275 = v170;
  v273 = off_24C335AF8;
  v40 = v171;
  v276 = v171;
  v269 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v163.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v270, v163.__r_.__value_.__l.__data_, v163.__r_.__value_.__l.__size_);
  else
    v270 = v163;
  v39 = v164;
  v271 = v164;
  v269 = off_24C335AF8;
  v2 = v165;
  v272 = v165;
  v264 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v156.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v265, v156.__r_.__value_.__l.__data_, v156.__r_.__value_.__l.__size_);
  else
    v265 = v156;
  v266 = v157;
  v264 = &off_24C335AB8;
  v267 = v158;
  if (SHIBYTE(v159.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v268, v159.__r_.__value_.__l.__data_, v159.__r_.__value_.__l.__size_);
  else
    v268 = v159;
  v38 = v2;
  v259 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v149.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v260, v149.__r_.__value_.__l.__data_, v149.__r_.__value_.__l.__size_);
  else
    v260 = v149;
  v259 = off_24C335B18;
  v262 = v151;
  v37 = v150;
  v261 = v150;
  v263 = v152;
  v254 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v142.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v255, v142.__r_.__value_.__l.__data_, v142.__r_.__value_.__l.__size_);
  else
    v255 = v142;
  v256 = v143;
  v254 = &off_24C335AB8;
  v257 = v144;
  if (SHIBYTE(v145.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v258, v145.__r_.__value_.__l.__data_, v145.__r_.__value_.__l.__size_);
  else
    v258 = v145;
  v249 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v135.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v250, v135.__r_.__value_.__l.__data_, v135.__r_.__value_.__l.__size_);
  else
    v250 = v135;
  v251 = v136;
  v249 = &off_24C335AB8;
  v252 = v137;
  if (SHIBYTE(v138.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v253, v138.__r_.__value_.__l.__data_, v138.__r_.__value_.__l.__size_);
  else
    v253 = v138;
  v244 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v128.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v245, v128.__r_.__value_.__l.__data_, v128.__r_.__value_.__l.__size_);
  else
    v245 = v128;
  v244 = off_24C335B18;
  v247 = v130;
  v3 = v129;
  v246 = v129;
  v248 = v131;
  v239 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v121.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v240, v121.__r_.__value_.__l.__data_, v121.__r_.__value_.__l.__size_);
  else
    v240 = v121;
  v239 = off_24C335B18;
  v242 = v123;
  v36 = v122;
  v241 = v122;
  v243 = v124;
  v234 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v114.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v235, v114.__r_.__value_.__l.__data_, v114.__r_.__value_.__l.__size_);
  else
    v235 = v114;
  v234 = off_24C335B18;
  v237 = v116;
  v4 = v115;
  v236 = v115;
  v238 = v117;
  v229 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v107.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v230, v107.__r_.__value_.__l.__data_, v107.__r_.__value_.__l.__size_);
  else
    v230 = v107;
  v229 = off_24C335B18;
  v232 = v109;
  v35 = v108;
  v231 = v108;
  v233 = v110;
  v225 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v101.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v226, v101.__r_.__value_.__l.__data_, v101.__r_.__value_.__l.__size_);
  else
    v226 = v101;
  v34 = v102;
  v227 = v102;
  v225 = off_24C335AF8;
  v33 = v103;
  v228 = v103;
  v221 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v95.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v222, v95.__r_.__value_.__l.__data_, v95.__r_.__value_.__l.__size_);
  else
    v222 = v95;
  v32 = v96;
  v223 = v96;
  v221 = off_24C335AF8;
  v31 = v97;
  v224 = v97;
  v216 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v88.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v217, v88.__r_.__value_.__l.__data_, v88.__r_.__value_.__l.__size_);
  else
    v217 = v88;
  v216 = off_24C335AD8;
  v219 = v90;
  v30 = v89;
  v218 = v89;
  v220 = v91;
  v211 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v81.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v212, v81.__r_.__value_.__l.__data_, v81.__r_.__value_.__l.__size_);
  else
    v212 = v81;
  v211 = off_24C335AD8;
  v214 = v83;
  v29 = v82;
  v213 = v82;
  v215 = v84;
  v206 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v74.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v207, v74.__r_.__value_.__l.__data_, v74.__r_.__value_.__l.__size_);
  else
    v207 = v74;
  v206 = off_24C335AD8;
  v209 = v76;
  v28 = v75;
  v208 = v75;
  v210 = v77;
  v202 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v68.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v203, v68.__r_.__value_.__l.__data_, v68.__r_.__value_.__l.__size_);
  else
    v203 = v68;
  v27 = v69;
  v204 = v69;
  v202 = off_24C335AF8;
  v26 = v70;
  v205 = v70;
  v198 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v199, v62.__r_.__value_.__l.__data_, v62.__r_.__value_.__l.__size_);
  else
    v199 = v62;
  v25 = v63;
  v200 = v63;
  v198 = off_24C335AF8;
  v24 = v64;
  v201 = v64;
  *(_QWORD *)v1 = &off_24C330F50;
  v5 = (std::string *)(v1 + 8);
  v23 = SHIBYTE(v294.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v294.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v5, v294.__r_.__value_.__l.__data_, v294.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = *(_OWORD *)&v294.__r_.__value_.__l.__data_;
    *(_QWORD *)(v1 + 24) = *((_QWORD *)&v294.__r_.__value_.__l + 2);
  }
  *(_QWORD *)(v1 + 32) = 0;
  *(_QWORD *)(v1 + 40) = 0;
  *(_QWORD *)(v1 + 48) = 0;
  *(_QWORD *)(v1 + 56) = 0;
  *(_QWORD *)v1 = off_24C335868;
  *(_QWORD *)(v1 + 64) = 0;
  *(_QWORD *)(v1 + 72) = 0;
  v386 = (uint64_t (**)())off_24C335D90;
  v22 = SHIBYTE(v290.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v290.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v387, v290.__r_.__value_.__l.__data_, v290.__r_.__value_.__l.__size_);
  else
    v387 = v290;
  v386 = off_24C335B18;
  v389 = v292;
  v388 = v56;
  v390 = v293;
  v382 = (uint64_t (**)())off_24C335D90;
  v57 = SHIBYTE(v286.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v286.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v383, v286.__r_.__value_.__l.__data_, v286.__r_.__value_.__l.__size_);
  else
    v383 = v286;
  v384 = v53;
  v382 = off_24C335AF8;
  v385 = v51;
  v378 = (uint64_t (**)())off_24C335D90;
  v54 = SHIBYTE(v282.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v282.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v379, v282.__r_.__value_.__l.__data_, v282.__r_.__value_.__l.__size_);
  else
    v379 = v282;
  v380 = v49;
  v378 = off_24C335AF8;
  v381 = v47;
  v374 = (uint64_t (**)())off_24C335D90;
  v55 = SHIBYTE(v278.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v278.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v375, v278.__r_.__value_.__l.__data_, v278.__r_.__value_.__l.__size_);
  else
    v375 = v278;
  v376 = v45;
  v374 = off_24C335AF8;
  v377 = v43;
  v370 = (uint64_t (**)())off_24C335D90;
  v58 = SHIBYTE(v274.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v274.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v371, v274.__r_.__value_.__l.__data_, v274.__r_.__value_.__l.__size_);
  else
    v371 = v274;
  v372 = v41;
  v370 = off_24C335AF8;
  v373 = v40;
  v366 = (uint64_t (**)())off_24C335D90;
  v52 = SHIBYTE(v270.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v270.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v367, v270.__r_.__value_.__l.__data_, v270.__r_.__value_.__l.__size_);
  else
    v367 = v270;
  v368 = v39;
  v366 = off_24C335AF8;
  v369 = v38;
  v361 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v265.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v362, v265.__r_.__value_.__l.__data_, v265.__r_.__value_.__l.__size_);
  else
    v362 = v265;
  v363 = v266;
  v361 = &off_24C335AB8;
  v364 = v267;
  if (SHIBYTE(v268.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v365, v268.__r_.__value_.__l.__data_, v268.__r_.__value_.__l.__size_);
  else
    v365 = v268;
  v356 = (uint64_t (**)())off_24C335D90;
  v50 = SHIBYTE(v260.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v260.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v357, v260.__r_.__value_.__l.__data_, v260.__r_.__value_.__l.__size_);
  else
    v357 = v260;
  v356 = off_24C335B18;
  v359 = v262;
  v358 = v37;
  v360 = v263;
  v351 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v255.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v352, v255.__r_.__value_.__l.__data_, v255.__r_.__value_.__l.__size_);
  else
    v352 = v255;
  v353 = v256;
  v351 = &off_24C335AB8;
  v354 = v257;
  if (SHIBYTE(v258.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v355, v258.__r_.__value_.__l.__data_, v258.__r_.__value_.__l.__size_);
  else
    v355 = v258;
  v346 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v250.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v347, v250.__r_.__value_.__l.__data_, v250.__r_.__value_.__l.__size_);
  else
    v347 = v250;
  v348 = v251;
  v346 = &off_24C335AB8;
  v349 = v252;
  if (SHIBYTE(v253.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v350, v253.__r_.__value_.__l.__data_, v253.__r_.__value_.__l.__size_);
  else
    v350 = v253;
  v341 = (uint64_t (**)())off_24C335D90;
  v48 = SHIBYTE(v245.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v245.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v342, v245.__r_.__value_.__l.__data_, v245.__r_.__value_.__l.__size_);
  else
    v342 = v245;
  v341 = off_24C335B18;
  v344 = v247;
  v343 = v3;
  v345 = v248;
  v336 = (uint64_t (**)())off_24C335D90;
  v46 = SHIBYTE(v240.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v240.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v337, v240.__r_.__value_.__l.__data_, v240.__r_.__value_.__l.__size_);
  else
    v337 = v240;
  v336 = off_24C335B18;
  v339 = v242;
  v338 = v36;
  v340 = v243;
  v331 = (uint64_t (**)())off_24C335D90;
  v44 = SHIBYTE(v235.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v235.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v332, v235.__r_.__value_.__l.__data_, v235.__r_.__value_.__l.__size_);
  else
    v332 = v235;
  v331 = off_24C335B18;
  v334 = v237;
  v333 = v4;
  v335 = v238;
  v326 = (uint64_t (**)())off_24C335D90;
  v42 = SHIBYTE(v230.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v230.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v327, v230.__r_.__value_.__l.__data_, v230.__r_.__value_.__l.__size_);
  else
    v327 = v230;
  v326 = off_24C335B18;
  v329 = v232;
  v328 = v35;
  v330 = v233;
  v322 = (uint64_t (**)())off_24C335D90;
  v6 = SHIBYTE(v226.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v226.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v323, v226.__r_.__value_.__l.__data_, v226.__r_.__value_.__l.__size_);
  else
    v323 = v226;
  v324 = v34;
  v322 = off_24C335AF8;
  v325 = v33;
  v318 = (uint64_t (**)())off_24C335D90;
  v7 = SHIBYTE(v222.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v222.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v319, v222.__r_.__value_.__l.__data_, v222.__r_.__value_.__l.__size_);
  else
    v319 = v222;
  v320 = v32;
  v318 = off_24C335AF8;
  v321 = v31;
  v313 = (uint64_t (**)())off_24C335D90;
  v8 = SHIBYTE(v217.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v217.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v314, v217.__r_.__value_.__l.__data_, v217.__r_.__value_.__l.__size_);
  else
    v314 = v217;
  v313 = off_24C335AD8;
  v316 = v219;
  v315 = v30;
  v317 = v220;
  v308 = (uint64_t (**)())off_24C335D90;
  v9 = SHIBYTE(v212.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v212.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v309, v212.__r_.__value_.__l.__data_, v212.__r_.__value_.__l.__size_);
  else
    v309 = v212;
  v308 = off_24C335AD8;
  v311 = v214;
  v310 = v29;
  v312 = v215;
  v303 = (uint64_t (**)())off_24C335D90;
  v10 = SHIBYTE(v207.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v207.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v304, v207.__r_.__value_.__l.__data_, v207.__r_.__value_.__l.__size_);
  else
    v304 = v207;
  v303 = off_24C335AD8;
  v306 = v209;
  v305 = v28;
  v307 = v210;
  v299 = (uint64_t (**)())off_24C335D90;
  v11 = SHIBYTE(v203.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v203.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v300, v203.__r_.__value_.__l.__data_, v203.__r_.__value_.__l.__size_);
  else
    v300 = v203;
  v301 = v27;
  v299 = off_24C335AF8;
  v302 = v26;
  v295 = (uint64_t (**)())off_24C335D90;
  v12 = SHIBYTE(v199.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v199.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&__p, v199.__r_.__value_.__l.__data_, v199.__r_.__value_.__l.__size_);
  else
    __p = v199;
  v297 = v25;
  v295 = off_24C335AF8;
  v298 = v24;
  mediaplatform::DatabaseColumnTuple<0ul,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<double>,mediaplatform::DatabaseColumn<double>,mediaplatform::DatabaseColumn<double>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::DatabaseColumnTuple(v1 + 80, (uint64_t)&v386, (uint64_t)&v382, (uint64_t)&v378, (uint64_t)&v374, (uint64_t)&v370, (uint64_t)&v366, (uint64_t)&v361, (uint64_t)&v356, (uint64_t)&v351, (uint64_t)&v346, (uint64_t)&v341, (uint64_t)&v336, (uint64_t)&v331, (uint64_t)&v326, (uint64_t)&v322, (uint64_t)&v318, (uint64_t)&v313, (uint64_t)&v308,
    (uint64_t)&v303,
    (uint64_t)&v299,
    (uint64_t)&v295);
  v295 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v299 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v300.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v300.__r_.__value_.__l.__data_);
  v303 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v304.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v304.__r_.__value_.__l.__data_);
  v308 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v309.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v309.__r_.__value_.__l.__data_);
  v313 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v314.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v314.__r_.__value_.__l.__data_);
  v318 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v319.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v319.__r_.__value_.__l.__data_);
  v322 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v323.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v323.__r_.__value_.__l.__data_);
  v326 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v327.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v327.__r_.__value_.__l.__data_);
  v331 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v332.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v332.__r_.__value_.__l.__data_);
  v336 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v337.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v337.__r_.__value_.__l.__data_);
  v341 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v342.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v342.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v346);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v351);
  v356 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v357.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v357.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v361);
  if (SHIBYTE(v367.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v367.__r_.__value_.__l.__data_);
  if (SHIBYTE(v371.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v371.__r_.__value_.__l.__data_);
  if (SHIBYTE(v375.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v375.__r_.__value_.__l.__data_);
  if (SHIBYTE(v379.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v379.__r_.__value_.__l.__data_);
  if (SHIBYTE(v383.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v383.__r_.__value_.__l.__data_);
  if (SHIBYTE(v387.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v387.__r_.__value_.__l.__data_);
  v198 = (uint64_t (**)())off_24C335D90;
  if (v12 < 0)
    operator delete(v199.__r_.__value_.__l.__data_);
  v202 = (uint64_t (**)())off_24C335D90;
  if (v11 < 0)
    operator delete(v203.__r_.__value_.__l.__data_);
  v206 = (uint64_t (**)())off_24C335D90;
  if (v10 < 0)
    operator delete(v207.__r_.__value_.__l.__data_);
  v211 = (uint64_t (**)())off_24C335D90;
  if (v9 < 0)
    operator delete(v212.__r_.__value_.__l.__data_);
  v216 = (uint64_t (**)())off_24C335D90;
  if (v8 < 0)
    operator delete(v217.__r_.__value_.__l.__data_);
  v221 = (uint64_t (**)())off_24C335D90;
  if (v7 < 0)
    operator delete(v222.__r_.__value_.__l.__data_);
  v225 = (uint64_t (**)())off_24C335D90;
  if (v6 < 0)
    operator delete(v226.__r_.__value_.__l.__data_);
  v229 = (uint64_t (**)())off_24C335D90;
  if (v42 < 0)
    operator delete(v230.__r_.__value_.__l.__data_);
  v234 = (uint64_t (**)())off_24C335D90;
  if (v44 < 0)
    operator delete(v235.__r_.__value_.__l.__data_);
  v239 = (uint64_t (**)())off_24C335D90;
  if (v46 < 0)
    operator delete(v240.__r_.__value_.__l.__data_);
  v244 = (uint64_t (**)())off_24C335D90;
  if (v48 < 0)
    operator delete(v245.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v249);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v254);
  v259 = (uint64_t (**)())off_24C335D90;
  if (v50 < 0)
    operator delete(v260.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v264);
  v269 = (uint64_t (**)())off_24C335D90;
  if (v52 < 0)
    operator delete(v270.__r_.__value_.__l.__data_);
  v273 = (uint64_t (**)())off_24C335D90;
  if (v58 < 0)
    operator delete(v274.__r_.__value_.__l.__data_);
  v277 = (uint64_t (**)())off_24C335D90;
  if (v55 < 0)
    operator delete(v278.__r_.__value_.__l.__data_);
  v281 = (uint64_t (**)())off_24C335D90;
  if (v54 < 0)
    operator delete(v282.__r_.__value_.__l.__data_);
  v285 = (uint64_t (**)())off_24C335D90;
  if (v57 < 0)
    operator delete(v286.__r_.__value_.__l.__data_);
  v289 = (uint64_t (**)())off_24C335D90;
  if (v22 < 0)
    operator delete(v290.__r_.__value_.__l.__data_);
  if (v23 < 0)
    operator delete(v294.__r_.__value_.__l.__data_);
  *(_QWORD *)v1 = off_24C3363D0;
  *(_QWORD *)(v1 + 1136) = off_24C335D90;
  if (SHIBYTE(v193.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external((std::string *)(v1 + 1144), v193.__r_.__value_.__l.__data_, v193.__r_.__value_.__l.__size_);
  else
    *(std::string *)(v1 + 1144) = v193;
  *(_DWORD *)(v1 + 1168) = v194;
  *(_QWORD *)(v1 + 1172) = v195;
  *(_DWORD *)(v1 + 1180) = v196;
  *(_QWORD *)(v1 + 1136) = off_24C336AC0;
  *(_QWORD *)(v1 + 1184) = off_24C335D90;
  v13 = (std::string *)(v1 + 1192);
  if (SHIBYTE(v187.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v13, v187.__r_.__value_.__l.__data_, v187.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v13->__r_.__value_.__l.__data_ = *(_OWORD *)&v187.__r_.__value_.__l.__data_;
    *(_QWORD *)(v1 + 1208) = *((_QWORD *)&v187.__r_.__value_.__l + 2);
  }
  *(_DWORD *)(v1 + 1216) = v188;
  *(_QWORD *)(v1 + 1220) = v189;
  *(_QWORD *)(v1 + 1184) = off_24C336AA0;
  *(_QWORD *)(v1 + 1232) = off_24C335D90;
  if (SHIBYTE(v181.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external((std::string *)(v1 + 1240), v181.__r_.__value_.__l.__data_, v181.__r_.__value_.__l.__size_);
  else
    *(std::string *)(v1 + 1240) = v181;
  *(_DWORD *)(v1 + 1264) = v182;
  *(_QWORD *)(v1 + 1268) = v183;
  *(_QWORD *)(v1 + 1232) = off_24C336AA0;
  *(_QWORD *)(v1 + 1280) = off_24C335D90;
  if (SHIBYTE(v175.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external((std::string *)(v1 + 1288), v175.__r_.__value_.__l.__data_, v175.__r_.__value_.__l.__size_);
  else
    *(std::string *)(v1 + 1288) = v175;
  *(_DWORD *)(v1 + 1312) = v176;
  *(_QWORD *)(v1 + 1316) = v177;
  *(_QWORD *)(v1 + 1280) = off_24C336AA0;
  *(_QWORD *)(v1 + 1328) = off_24C335D90;
  if (SHIBYTE(v169.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external((std::string *)(v1 + 1336), v169.__r_.__value_.__l.__data_, v169.__r_.__value_.__l.__size_);
  else
    *(std::string *)(v1 + 1336) = v169;
  *(_DWORD *)(v1 + 1360) = v170;
  *(_QWORD *)(v1 + 1364) = v171;
  *(_QWORD *)(v1 + 1328) = off_24C336AA0;
  *(_QWORD *)(v1 + 1376) = off_24C335D90;
  v14 = (std::string *)(v1 + 1384);
  if (SHIBYTE(v163.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v14, v163.__r_.__value_.__l.__data_, v163.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v14->__r_.__value_.__l.__data_ = *(_OWORD *)&v163.__r_.__value_.__l.__data_;
    *(_QWORD *)(v1 + 1400) = *((_QWORD *)&v163.__r_.__value_.__l + 2);
  }
  *(_DWORD *)(v1 + 1408) = v164;
  *(_QWORD *)(v1 + 1412) = v165;
  *(_QWORD *)(v1 + 1376) = off_24C336AA0;
  std::__tuple_leaf<6ul,mlcore::MediaColumn<std::string>,false>::__tuple_leaf[abi:ne180100]<mlcore::MediaColumn<std::string>&,void>(v1 + 1424, (uint64_t)v155);
  *(_QWORD *)(v1 + 1488) = off_24C335D90;
  v15 = (std::string *)(v1 + 1496);
  if (SHIBYTE(v149.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v15, v149.__r_.__value_.__l.__data_, v149.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v15->__r_.__value_.__l.__data_ = *(_OWORD *)&v149.__r_.__value_.__l.__data_;
    *(_QWORD *)(v1 + 1512) = *((_QWORD *)&v149.__r_.__value_.__l + 2);
  }
  *(_DWORD *)(v1 + 1520) = v150;
  *(_QWORD *)(v1 + 1524) = v151;
  *(_DWORD *)(v1 + 1532) = v152;
  *(_QWORD *)(v1 + 1488) = off_24C336AC0;
  std::__tuple_leaf<8ul,mlcore::MediaColumn<std::string>,false>::__tuple_leaf[abi:ne180100]<mlcore::MediaColumn<std::string>&,void>(v1 + 1536, (uint64_t)v141);
  *(_QWORD *)(v1 + 1600) = off_24C335D90;
  if (SHIBYTE(v135.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external((std::string *)(v1 + 1608), v135.__r_.__value_.__l.__data_, v135.__r_.__value_.__l.__size_);
  else
    *(std::string *)(v1 + 1608) = v135;
  *(_DWORD *)(v1 + 1632) = v136;
  *(_QWORD *)(v1 + 1600) = &off_24C335AB8;
  *(_BYTE *)(v1 + 1636) = v137;
  v16 = (std::string *)(v1 + 1640);
  if (SHIBYTE(v138.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v16, v138.__r_.__value_.__l.__data_, v138.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v16->__r_.__value_.__l.__data_ = *(_OWORD *)&v138.__r_.__value_.__l.__data_;
    *(_QWORD *)(v1 + 1656) = *((_QWORD *)&v138.__r_.__value_.__l + 2);
  }
  *(_QWORD *)(v1 + 1600) = &off_24C336A60;
  *(_QWORD *)(v1 + 1664) = off_24C335D90;
  if (SHIBYTE(v128.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external((std::string *)(v1 + 1672), v128.__r_.__value_.__l.__data_, v128.__r_.__value_.__l.__size_);
  else
    *(std::string *)(v1 + 1672) = v128;
  *(_DWORD *)(v1 + 1696) = v129;
  *(_QWORD *)(v1 + 1700) = v130;
  *(_DWORD *)(v1 + 1708) = v131;
  *(_QWORD *)(v1 + 1664) = off_24C336AC0;
  *(_QWORD *)(v1 + 1712) = off_24C335D90;
  if (SHIBYTE(v121.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external((std::string *)(v1 + 1720), v121.__r_.__value_.__l.__data_, v121.__r_.__value_.__l.__size_);
  else
    *(std::string *)(v1 + 1720) = v121;
  *(_DWORD *)(v1 + 1744) = v122;
  *(_QWORD *)(v1 + 1748) = v123;
  *(_DWORD *)(v1 + 1756) = v124;
  *(_QWORD *)(v1 + 1712) = off_24C336AC0;
  *(_QWORD *)(v1 + 1760) = off_24C335D90;
  v17 = (std::string *)(v1 + 1768);
  if (SHIBYTE(v114.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v17, v114.__r_.__value_.__l.__data_, v114.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v17->__r_.__value_.__l.__data_ = *(_OWORD *)&v114.__r_.__value_.__l.__data_;
    *(_QWORD *)(v1 + 1784) = *((_QWORD *)&v114.__r_.__value_.__l + 2);
  }
  *(_DWORD *)(v1 + 1792) = v115;
  *(_QWORD *)(v1 + 1796) = v116;
  *(_DWORD *)(v1 + 1804) = v117;
  *(_QWORD *)(v1 + 1760) = off_24C336AC0;
  *(_QWORD *)(v1 + 1808) = off_24C335D90;
  v18 = (std::string *)(v1 + 1816);
  if (SHIBYTE(v107.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v18, v107.__r_.__value_.__l.__data_, v107.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v18->__r_.__value_.__l.__data_ = *(_OWORD *)&v107.__r_.__value_.__l.__data_;
    *(_QWORD *)(v1 + 1832) = *((_QWORD *)&v107.__r_.__value_.__l + 2);
  }
  *(_DWORD *)(v1 + 1840) = v108;
  *(_QWORD *)(v1 + 1844) = v109;
  *(_DWORD *)(v1 + 1852) = v110;
  *(_QWORD *)(v1 + 1808) = off_24C336AC0;
  *(_QWORD *)(v1 + 1856) = off_24C335D90;
  if (SHIBYTE(v101.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external((std::string *)(v1 + 1864), v101.__r_.__value_.__l.__data_, v101.__r_.__value_.__l.__size_);
  else
    *(std::string *)(v1 + 1864) = v101;
  *(_DWORD *)(v1 + 1888) = v102;
  *(_QWORD *)(v1 + 1892) = v103;
  *(_QWORD *)(v1 + 1856) = off_24C336AA0;
  *(_QWORD *)(v1 + 1904) = off_24C335D90;
  if (SHIBYTE(v95.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external((std::string *)(v1 + 1912), v95.__r_.__value_.__l.__data_, v95.__r_.__value_.__l.__size_);
  else
    *(std::string *)(v1 + 1912) = v95;
  *(_DWORD *)(v1 + 1936) = v96;
  *(_QWORD *)(v1 + 1940) = v97;
  *(_QWORD *)(v1 + 1904) = off_24C336AA0;
  *(_QWORD *)(v1 + 1952) = off_24C335D90;
  if (SHIBYTE(v88.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external((std::string *)(v1 + 1960), v88.__r_.__value_.__l.__data_, v88.__r_.__value_.__l.__size_);
  else
    *(std::string *)(v1 + 1960) = v88;
  *(_DWORD *)(v1 + 1984) = v89;
  *(_QWORD *)(v1 + 1988) = v90;
  *(_DWORD *)(v1 + 1996) = v91;
  *(_QWORD *)(v1 + 1952) = off_24C336A80;
  *(_QWORD *)(v1 + 2000) = off_24C335D90;
  if (SHIBYTE(v81.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external((std::string *)(v1 + 2008), v81.__r_.__value_.__l.__data_, v81.__r_.__value_.__l.__size_);
  else
    *(std::string *)(v1 + 2008) = v81;
  *(_DWORD *)(v1 + 2032) = v82;
  *(_QWORD *)(v1 + 2036) = v83;
  *(_DWORD *)(v1 + 2044) = v84;
  *(_QWORD *)(v1 + 2000) = off_24C336A80;
  *(_QWORD *)(v1 + 2048) = off_24C335D90;
  if (SHIBYTE(v74.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external((std::string *)(v1 + 2056), v74.__r_.__value_.__l.__data_, v74.__r_.__value_.__l.__size_);
  else
    *(std::string *)(v1 + 2056) = v74;
  *(_DWORD *)(v1 + 2080) = v75;
  *(_QWORD *)(v1 + 2084) = v76;
  *(_DWORD *)(v1 + 2092) = v77;
  *(_QWORD *)(v1 + 2048) = off_24C336A80;
  *(_QWORD *)(v1 + 2096) = off_24C335D90;
  if (SHIBYTE(v68.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external((std::string *)(v1 + 2104), v68.__r_.__value_.__l.__data_, v68.__r_.__value_.__l.__size_);
  else
    *(std::string *)(v1 + 2104) = v68;
  *(_DWORD *)(v1 + 2128) = v69;
  *(_QWORD *)(v1 + 2132) = v70;
  *(_QWORD *)(v1 + 2096) = off_24C336AA0;
  *(_QWORD *)(v1 + 2144) = off_24C335D90;
  v19 = (std::string *)(v1 + 2152);
  v20 = HIBYTE(v62.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v19, v62.__r_.__value_.__l.__data_, v62.__r_.__value_.__l.__size_);
    v20 = HIBYTE(v62.__r_.__value_.__r.__words[2]);
  }
  else
  {
    *(_OWORD *)&v19->__r_.__value_.__l.__data_ = *(_OWORD *)&v62.__r_.__value_.__l.__data_;
    *(_QWORD *)(v1 + 2168) = *((_QWORD *)&v62.__r_.__value_.__l + 2);
  }
  *(_DWORD *)(v1 + 2176) = v63;
  *(_QWORD *)(v1 + 2180) = v64;
  *(_QWORD *)(v1 + 2144) = off_24C336AA0;
  v61 = off_24C335D90;
  if (v20 < 0)
    operator delete(v62.__r_.__value_.__l.__data_);
  if (v60 < 0)
    operator delete(v59[0]);
  v67 = off_24C335D90;
  if (SHIBYTE(v68.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v68.__r_.__value_.__l.__data_);
  if (v66 < 0)
    operator delete(v65[0]);
  v73 = off_24C335D90;
  if (SHIBYTE(v74.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v74.__r_.__value_.__l.__data_);
  if (v72 < 0)
    operator delete(v71[0]);
  v80 = off_24C335D90;
  if (SHIBYTE(v81.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v81.__r_.__value_.__l.__data_);
  if (v79 < 0)
    operator delete(v78[0]);
  v87 = off_24C335D90;
  if (SHIBYTE(v88.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v88.__r_.__value_.__l.__data_);
  if (v86 < 0)
    operator delete(v85[0]);
  v94 = off_24C335D90;
  if (SHIBYTE(v95.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v95.__r_.__value_.__l.__data_);
  if (v93 < 0)
    operator delete(v92[0]);
  v100 = off_24C335D90;
  if (SHIBYTE(v101.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v101.__r_.__value_.__l.__data_);
  if (v99 < 0)
    operator delete(v98[0]);
  v106 = off_24C335D90;
  if (SHIBYTE(v107.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v107.__r_.__value_.__l.__data_);
  if (v105 < 0)
    operator delete(v104[0]);
  v113 = off_24C335D90;
  if (SHIBYTE(v114.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v114.__r_.__value_.__l.__data_);
  if (v112 < 0)
    operator delete(v111[0]);
  v120 = off_24C335D90;
  if (SHIBYTE(v121.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v121.__r_.__value_.__l.__data_);
  if (v119 < 0)
    operator delete(v118[0]);
  v127 = off_24C335D90;
  if (SHIBYTE(v128.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v128.__r_.__value_.__l.__data_);
  if (v126 < 0)
    operator delete(v125[0]);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)v134);
  if (v133 < 0)
    operator delete(v132[0]);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)v141);
  if (v140 < 0)
    operator delete(v139[0]);
  v148 = off_24C335D90;
  if (SHIBYTE(v149.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v149.__r_.__value_.__l.__data_);
  if (v147 < 0)
    operator delete(v146[0]);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)v155);
  if (v154 < 0)
    operator delete(v153[0]);
  v162 = off_24C335D90;
  if (SHIBYTE(v163.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v163.__r_.__value_.__l.__data_);
  if (v161 < 0)
    operator delete(v160[0]);
  v168 = off_24C335D90;
  if (SHIBYTE(v169.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v169.__r_.__value_.__l.__data_);
  if (v167 < 0)
    operator delete(v166[0]);
  v174 = off_24C335D90;
  if (SHIBYTE(v175.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v175.__r_.__value_.__l.__data_);
  if (v173 < 0)
    operator delete(v172[0]);
  v180 = off_24C335D90;
  if (SHIBYTE(v181.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v181.__r_.__value_.__l.__data_);
  if (v179 < 0)
    operator delete(v178[0]);
  v186 = off_24C335D90;
  if (SHIBYTE(v187.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v187.__r_.__value_.__l.__data_);
  if (v185 < 0)
    operator delete(v184[0]);
  v192 = off_24C335D90;
  if (SHIBYTE(v193.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v193.__r_.__value_.__l.__data_);
  if (v191 < 0)
    operator delete(v190[0]);
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__s.__r_.__value_.__l.__data_);
  *(_QWORD *)v1 = off_24C3397A8;
  return v1;
}

void sub_20A69B5F4(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;
  void **v3;
  uint64_t v4;
  void **v5;
  void **v6;
  void **v7;
  void **v8;

  *(_QWORD *)(v1 + 2096) = v4;
  if (*(char *)(v1 + 2127) < 0)
    operator delete(*v3);
  *(_QWORD *)(v1 + 2048) = v4;
  if (*(char *)(v1 + 2079) < 0)
    operator delete(*v8);
  *(_QWORD *)(v1 + 2000) = v4;
  if (*(char *)(v1 + 2031) < 0)
    operator delete(*v7);
  *(_QWORD *)(v1 + 1952) = v4;
  if (*(char *)(v1 + 1983) < 0)
    operator delete(*v6);
  *(_QWORD *)(v1 + 1904) = v4;
  if (*(char *)(v1 + 1935) < 0)
    operator delete(*v2);
  *(_QWORD *)(v1 + 1856) = v4;
  if (*(char *)(v1 + 1887) < 0)
    operator delete(*v5);
  *(_QWORD *)(v1 + 1808) = v4;
  if (*(char *)(v1 + 1839) < 0)
    operator delete(*(void **)STACK[0x228]);
  *(_QWORD *)(v1 + 1760) = v4;
  if (*(char *)(v1 + 1791) < 0)
    operator delete(*(void **)STACK[0x230]);
  *(_QWORD *)(v1 + 1712) = v4;
  if (*(char *)(v1 + 1743) < 0)
    operator delete(*(void **)STACK[0x238]);
  *(_QWORD *)(v1 + 1664) = v4;
  if (*(char *)(v1 + 1695) < 0)
    operator delete(*(void **)STACK[0x240]);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(v1 + 1600);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(STACK[0x250]);
  *(_QWORD *)(v1 + 1488) = v4;
  if (*(char *)(v1 + 1519) < 0)
    operator delete(*(void **)STACK[0x248]);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(STACK[0x278]);
  *(_QWORD *)(v1 + 1376) = v4;
  if (*(char *)(v1 + 1407) < 0)
    operator delete(*(void **)STACK[0x258]);
  *(_QWORD *)(v1 + 1328) = v4;
  if (*(char *)(v1 + 1359) < 0)
    operator delete(*(void **)STACK[0x260]);
  *(_QWORD *)(v1 + 1280) = v4;
  if (*(char *)(v1 + 1311) < 0)
    operator delete(*(void **)STACK[0x268]);
  *(_QWORD *)(v1 + 1232) = v4;
  if (*(char *)(v1 + 1263) < 0)
    operator delete(*(void **)STACK[0x270]);
  *(_QWORD *)(v1 + 1184) = v4;
  if (*(char *)(v1 + 1215) < 0)
    operator delete(*(void **)STACK[0x280]);
  *(_QWORD *)(v1 + 1136) = v4;
  if (*(char *)(v1 + 1167) < 0)
    operator delete(*(void **)STACK[0x288]);
  mediaplatform::DatabaseTable<long long,int,int,int,int,int,std::string,long long,std::string,std::string,long long,long long,long long,long long,int,int,double,double,double,int,int>::~DatabaseTable(v1);
  STACK[0x2A8] = (unint64_t)off_24C335D90;
  if (SLOBYTE(STACK[0x2C7]) < 0)
    operator delete((void *)STACK[0x2B0]);
  if (SLOBYTE(STACK[0x2A7]) < 0)
    operator delete((void *)STACK[0x290]);
  STACK[0x2F0] = (unint64_t)off_24C335D90;
  if (SLOBYTE(STACK[0x30F]) < 0)
    operator delete((void *)STACK[0x2F8]);
  if (SLOBYTE(STACK[0x2EF]) < 0)
    operator delete((void *)STACK[0x2D8]);
  STACK[0x338] = (unint64_t)off_24C335D90;
  if (SLOBYTE(STACK[0x357]) < 0)
    operator delete((void *)STACK[0x340]);
  if (SLOBYTE(STACK[0x337]) < 0)
    operator delete((void *)STACK[0x320]);
  STACK[0x380] = (unint64_t)off_24C335D90;
  if (SLOBYTE(STACK[0x39F]) < 0)
    operator delete((void *)STACK[0x388]);
  if (SLOBYTE(STACK[0x37F]) < 0)
    operator delete((void *)STACK[0x368]);
  STACK[0x3C8] = (unint64_t)off_24C335D90;
  if (SLOBYTE(STACK[0x3E7]) < 0)
    operator delete((void *)STACK[0x3D0]);
  if (SLOBYTE(STACK[0x3C7]) < 0)
    operator delete((void *)STACK[0x3B0]);
  STACK[0x410] = (unint64_t)off_24C335D90;
  if (SLOBYTE(STACK[0x42F]) < 0)
    operator delete((void *)STACK[0x418]);
  if (SLOBYTE(STACK[0x40F]) < 0)
    operator delete((void *)STACK[0x3F8]);
  STACK[0x458] = (unint64_t)off_24C335D90;
  if (SLOBYTE(STACK[0x477]) < 0)
    operator delete((void *)STACK[0x460]);
  if (SLOBYTE(STACK[0x457]) < 0)
    operator delete((void *)STACK[0x440]);
  STACK[0x4A0] = (unint64_t)off_24C335D90;
  if (SLOBYTE(STACK[0x4BF]) < 0)
    operator delete((void *)STACK[0x4A8]);
  if (SLOBYTE(STACK[0x49F]) < 0)
    operator delete((void *)STACK[0x488]);
  STACK[0x4E8] = (unint64_t)off_24C335D90;
  if (SLOBYTE(STACK[0x507]) < 0)
    operator delete((void *)STACK[0x4F0]);
  if (SLOBYTE(STACK[0x4E7]) < 0)
    operator delete((void *)STACK[0x4D0]);
  STACK[0x530] = (unint64_t)off_24C335D90;
  if (SLOBYTE(STACK[0x54F]) < 0)
    operator delete((void *)STACK[0x538]);
  if (SLOBYTE(STACK[0x52F]) < 0)
    operator delete((void *)STACK[0x518]);
  STACK[0x578] = (unint64_t)off_24C335D90;
  if (SLOBYTE(STACK[0x597]) < 0)
    operator delete((void *)STACK[0x580]);
  if (SLOBYTE(STACK[0x577]) < 0)
    operator delete((void *)STACK[0x560]);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&STACK[0x5C0]);
  if (SLOBYTE(STACK[0x5BF]) < 0)
    operator delete((void *)STACK[0x5A8]);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&STACK[0x618]);
  if (SLOBYTE(STACK[0x617]) < 0)
    operator delete((void *)STACK[0x600]);
  STACK[0x670] = (unint64_t)off_24C335D90;
  if (SLOBYTE(STACK[0x68F]) < 0)
    operator delete((void *)STACK[0x678]);
  if (SLOBYTE(STACK[0x66F]) < 0)
    operator delete((void *)STACK[0x658]);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&STACK[0x6B8]);
  if (SLOBYTE(STACK[0x6B7]) < 0)
    operator delete((void *)STACK[0x6A0]);
  STACK[0x710] = (unint64_t)off_24C335D90;
  if (SLOBYTE(STACK[0x72F]) < 0)
    operator delete((void *)STACK[0x718]);
  if (SLOBYTE(STACK[0x70F]) < 0)
    operator delete((void *)STACK[0x6F8]);
  STACK[0x758] = (unint64_t)off_24C335D90;
  if (SLOBYTE(STACK[0x777]) < 0)
    operator delete((void *)STACK[0x760]);
  if (SLOBYTE(STACK[0x757]) < 0)
    operator delete((void *)STACK[0x740]);
  STACK[0x7A0] = (unint64_t)off_24C335D90;
  if (SLOBYTE(STACK[0x7BF]) < 0)
    operator delete((void *)STACK[0x7A8]);
  if (SLOBYTE(STACK[0x79F]) < 0)
    operator delete((void *)STACK[0x788]);
  STACK[0x7E8] = (unint64_t)off_24C335D90;
  if (SLOBYTE(STACK[0x807]) < 0)
    operator delete((void *)STACK[0x7F0]);
  if (SLOBYTE(STACK[0x7E7]) < 0)
    operator delete((void *)STACK[0x7D0]);
  STACK[0x830] = (unint64_t)off_24C335D90;
  if (SLOBYTE(STACK[0x84F]) < 0)
    operator delete((void *)STACK[0x838]);
  if (SLOBYTE(STACK[0x82F]) < 0)
    operator delete((void *)STACK[0x818]);
  STACK[0x878] = (unint64_t)off_24C335D90;
  if (SLOBYTE(STACK[0x897]) < 0)
    operator delete((void *)STACK[0x880]);
  if (SLOBYTE(STACK[0x877]) < 0)
    operator delete((void *)STACK[0x860]);
  if (SLOBYTE(STACK[0x8BF]) < 0)
    operator delete((void *)STACK[0x8A8]);
  _Unwind_Resume(a1);
}

void sub_20A69C114()
{
  JUMPOUT(0x20A69BDB8);
}

void sub_20A69C11C()
{
  JUMPOUT(0x20A69BDC8);
}

void sub_20A69C124()
{
  JUMPOUT(0x20A69BDE4);
}

void sub_20A69C12C()
{
  JUMPOUT(0x20A69BDF4);
}

void sub_20A69C134()
{
  JUMPOUT(0x20A69BE10);
}

void sub_20A69C13C()
{
  JUMPOUT(0x20A69BE20);
}

void sub_20A69C144()
{
  JUMPOUT(0x20A69BE3CLL);
}

void sub_20A69C14C()
{
  JUMPOUT(0x20A69BE4CLL);
}

void sub_20A69C154()
{
  JUMPOUT(0x20A69BE68);
}

void sub_20A69C15C()
{
  JUMPOUT(0x20A69BE78);
}

void sub_20A69C164()
{
  JUMPOUT(0x20A69BE94);
}

void sub_20A69C16C()
{
  JUMPOUT(0x20A69BEA4);
}

void sub_20A69C174()
{
  JUMPOUT(0x20A69BEC0);
}

void sub_20A69C17C()
{
  JUMPOUT(0x20A69BED0);
}

void sub_20A69C184()
{
  JUMPOUT(0x20A69BEECLL);
}

void sub_20A69C18C()
{
  JUMPOUT(0x20A69BEFCLL);
}

void sub_20A69C194()
{
  JUMPOUT(0x20A69BF18);
}

void sub_20A69C19C()
{
  JUMPOUT(0x20A69BF28);
}

void sub_20A69C1A4()
{
  JUMPOUT(0x20A69BF44);
}

void sub_20A69C1AC()
{
  JUMPOUT(0x20A69BF54);
}

void sub_20A69C1B4()
{
  JUMPOUT(0x20A69BF70);
}

void sub_20A69C1BC()
{
  JUMPOUT(0x20A69BF80);
}

void sub_20A69C1C4()
{
  JUMPOUT(0x20A69BF88);
}

void sub_20A69C1CC()
{
  JUMPOUT(0x20A69BF98);
}

void sub_20A69C1D4()
{
  JUMPOUT(0x20A69BFA0);
}

void sub_20A69C1DC()
{
  JUMPOUT(0x20A69BFB0);
}

void sub_20A69C1E4()
{
  JUMPOUT(0x20A69BFCCLL);
}

void sub_20A69C1EC()
{
  JUMPOUT(0x20A69BFDCLL);
}

void sub_20A69C1F4()
{
  JUMPOUT(0x20A69BFE4);
}

void sub_20A69C1FC()
{
  JUMPOUT(0x20A69BFF4);
}

void sub_20A69C204()
{
  JUMPOUT(0x20A69C010);
}

void sub_20A69C20C()
{
  JUMPOUT(0x20A69C020);
}

void sub_20A69C214()
{
  JUMPOUT(0x20A69C03CLL);
}

void sub_20A69C21C()
{
  JUMPOUT(0x20A69C04CLL);
}

void sub_20A69C224()
{
  JUMPOUT(0x20A69C068);
}

void sub_20A69C22C()
{
  JUMPOUT(0x20A69C078);
}

void sub_20A69C234()
{
  JUMPOUT(0x20A69C094);
}

void sub_20A69C23C()
{
  JUMPOUT(0x20A69C0A4);
}

void sub_20A69C244()
{
  JUMPOUT(0x20A69C0C0);
}

void sub_20A69C24C()
{
  JUMPOUT(0x20A69C0D0);
}

void sub_20A69C254()
{
  JUMPOUT(0x20A69C0ECLL);
}

void sub_20A69C25C()
{
  JUMPOUT(0x20A69C0FCLL);
}

mlcore::AlbumArtistTable *mlcore::AlbumArtistTable::AlbumArtistTable(mlcore::AlbumArtistTable *this)
{
  const void *v2;
  size_t v3;
  void *v4;
  const void *v5;
  size_t v6;
  void *v7;
  std::string *v8;
  std::string *v9;
  std::string *v10;
  std::string *v11;
  std::string *v12;
  std::string *v13;
  char v14;
  void *v16[2];
  char v17;
  void (**v18)(mediaplatform::DatabaseColumnBase *__hidden);
  std::string v19;
  int v20;
  uint64_t v21;
  void *v22[2];
  char v23;
  void (**v24)(mediaplatform::DatabaseColumnBase *__hidden);
  std::string v25;
  int v26;
  uint64_t v27;
  int v28;
  void *v29[2];
  char v30;
  void (**v31)(mediaplatform::DatabaseColumnBase *__hidden);
  std::string v32;
  int v33;
  uint64_t v34;
  int v35;
  void *v36[2];
  char v37;
  void (**v38)(mediaplatform::DatabaseColumnBase *__hidden);
  std::string v39;
  int v40;
  uint64_t v41;
  void *v42[2];
  char v43;
  void (**v44)(mediaplatform::DatabaseColumnBase *__hidden);
  std::string v45;
  int v46;
  uint64_t v47;
  void *v48[2];
  char v49;
  void *v50[2];
  char v51;
  char v52[8];
  std::string v53;
  int v54;
  char v55;
  std::string v56;
  void *v57[2];
  char v58;
  void (**v59)(mediaplatform::DatabaseColumnBase *__hidden);
  std::string v60;
  int v61;
  uint64_t v62;
  int v63;
  void *v64[2];
  char v65;
  char v66[8];
  std::string v67;
  int v68;
  char v69;
  uint64_t v70;
  size_t v71;
  const void *v72;
  void *v73[2];
  char v74;
  void (**v75)(mediaplatform::DatabaseColumnBase *__hidden);
  std::string v76;
  int v77;
  uint64_t v78;
  void *v79[2];
  char v80;
  void (**v81)(mediaplatform::DatabaseColumnBase *__hidden);
  std::string v82;
  int v83;
  uint64_t v84;
  void *v85[2];
  char v86;
  void (**v87)(mediaplatform::DatabaseColumnBase *__hidden);
  std::string v88;
  int v89;
  uint64_t v90;
  void *v91[2];
  char v92;
  void (**v93)(mediaplatform::DatabaseColumnBase *__hidden);
  std::string v94;
  int v95;
  uint64_t v96;
  void *v97[2];
  char v98;
  void (**v99)(mediaplatform::DatabaseColumnBase *__hidden);
  std::string v100;
  int v101;
  uint64_t v102;
  int v103;
  void *v104[2];
  char v105;
  void (**v106)(mediaplatform::DatabaseColumnBase *__hidden);
  std::string v107;
  int v108;
  uint64_t v109;
  int v110;
  void *v111[2];
  char v112;
  void (**v113)(mediaplatform::DatabaseColumnBase *__hidden);
  std::string v114;
  int v115;
  uint64_t v116;
  void *v117[2];
  char v118;
  char v119[8];
  std::string v120;
  int v121;
  char v122;
  size_t v123;
  const void *v124;
  void *v125[2];
  char v126;
  char v127[8];
  std::string v128;
  int v129;
  char v130;
  std::string v131;
  void *v132[2];
  char v133;
  void *v134[2];
  char v135;
  char v136[8];
  std::string v137;
  int v138;
  char v139;
  std::string v140;
  void *v141[2];
  char v142;
  void (**v143)(mediaplatform::DatabaseColumnBase *__hidden);
  std::string v144;
  int v145;
  uint64_t v146;
  int v147;
  std::string __s;
  uint64_t (**v149)();
  std::string __p;
  int v151;
  uint64_t v152;
  uint64_t (**v153)();
  std::string v154;
  int v155;
  uint64_t v156;
  int v157;
  uint64_t (**v158)();
  std::string v159;
  int v160;
  uint64_t v161;
  int v162;
  uint64_t (**v163)();
  std::string v164;
  int v165;
  uint64_t v166;
  uint64_t (**v167)();
  std::string v168;
  int v169;
  uint64_t v170;
  uint64_t (**v171)();
  std::string v172;
  int v173;
  char v174;
  std::string v175;
  uint64_t (**v176)();
  std::string v177;
  int v178;
  uint64_t v179;
  int v180;
  uint64_t (**v181)();
  std::string v182;
  int v183;
  char v184;
  void (**v185)(mediaplatform::Data *__hidden);
  size_t v186;
  size_t v187;
  void *v188;
  char v189;
  uint64_t (**v190)();
  std::string v191;
  int v192;
  uint64_t v193;
  uint64_t (**v194)();
  std::string v195;
  int v196;
  uint64_t v197;
  uint64_t (**v198)();
  std::string v199;
  int v200;
  uint64_t v201;
  uint64_t (**v202)();
  std::string v203;
  int v204;
  uint64_t v205;
  uint64_t (**v206)();
  std::string v207;
  int v208;
  uint64_t v209;
  int v210;
  uint64_t (**v211)();
  std::string v212;
  int v213;
  uint64_t v214;
  int v215;
  uint64_t (**v216)();
  std::string v217;
  int v218;
  uint64_t v219;
  uint64_t (**v220)();
  std::string v221;
  int v222;
  char v223;
  void (**v224)(mediaplatform::Data *__hidden);
  size_t v225;
  size_t v226;
  void *v227;
  char v228;
  uint64_t (**v229)();
  std::string v230;
  int v231;
  char v232;
  std::string v233;
  uint64_t (**v234)();
  std::string v235;
  int v236;
  char v237;
  std::string v238;
  uint64_t (**v239)();
  std::string v240;
  int v241;
  uint64_t v242;
  int v243;
  std::string v244;

  std::string::basic_string[abi:ne180100]<0>(&__s, "album_artist");
  std::string::basic_string[abi:ne180100]<0>(v141, "album_artist_pid");
  mlcore::MediaColumn<long long>::MediaColumn((uint64_t)&v143, (uint64_t)v141, 1);
  std::string::basic_string[abi:ne180100]<0>(v134, "album_artist");
  std::string::basic_string[abi:ne180100]<0>(v132, "");
  mlcore::MediaColumn<std::string>::MediaColumn((uint64_t)v136, (uint64_t)v134, (uint64_t)v132);
  std::string::basic_string[abi:ne180100]<0>(v125, "sort_album_artist");
  mlcore::MediaColumn<std::string>::MediaColumn((uint64_t)v127, (uint64_t)v125, 0);
  std::string::basic_string[abi:ne180100]<0>(v117, "grouping_key");
  mlcore::MediaColumn<mediaplatform::Data>::MediaColumn((uint64_t)v119, (uint64_t)v117);
  std::string::basic_string[abi:ne180100]<0>(v111, "cloud_status");
  mlcore::MediaColumn<int>::MediaColumn((uint64_t)&v113, (uint64_t)v111, 0);
  std::string::basic_string[abi:ne180100]<0>(v104, "store_id");
  mlcore::MediaColumn<long long>::MediaColumn((uint64_t)&v106, (uint64_t)v104);
  std::string::basic_string[abi:ne180100]<0>(v97, "representative_item_pid");
  mlcore::MediaColumn<long long>::MediaColumn((uint64_t)&v99, (uint64_t)v97);
  std::string::basic_string[abi:ne180100]<0>(v91, "keep_local");
  mlcore::MediaColumn<int>::MediaColumn((uint64_t)&v93, (uint64_t)v91, 0);
  std::string::basic_string[abi:ne180100]<0>(v85, "keep_local_status");
  mlcore::MediaColumn<int>::MediaColumn((uint64_t)&v87, (uint64_t)v85, 0);
  std::string::basic_string[abi:ne180100]<0>(v79, "keep_local_status_reason");
  mlcore::MediaColumn<int>::MediaColumn((uint64_t)&v81, (uint64_t)v79, 0);
  std::string::basic_string[abi:ne180100]<0>(v73, "keep_local_constraints");
  mlcore::MediaColumn<int>::MediaColumn((uint64_t)&v75, (uint64_t)v73, 0);
  std::string::basic_string[abi:ne180100]<0>(v64, "app_data");
  mlcore::MediaColumn<mediaplatform::Data>::MediaColumn((uint64_t)v66, (uint64_t)v64);
  std::string::basic_string[abi:ne180100]<0>(v57, "sync_id");
  mlcore::MediaColumn<long long>::MediaColumn((uint64_t)&v59, (uint64_t)v57);
  std::string::basic_string[abi:ne180100]<0>(v50, "cloud_universal_library_id");
  std::string::basic_string[abi:ne180100]<0>(v48, "");
  mlcore::MediaColumn<std::string>::MediaColumn((uint64_t)v52, (uint64_t)v50, (uint64_t)v48);
  std::string::basic_string[abi:ne180100]<0>(v42, "classical_experience_available");
  mlcore::MediaColumn<int>::MediaColumn((uint64_t)&v44, (uint64_t)v42, 0);
  std::string::basic_string[abi:ne180100]<0>(v36, "liked_state");
  mlcore::MediaColumn<int>::MediaColumn((uint64_t)&v38, (uint64_t)v36, 0);
  std::string::basic_string[abi:ne180100]<0>(v29, "liked_state_changed_date");
  mlcore::MediaColumn<long long>::MediaColumn((uint64_t)&v31, (uint64_t)v29);
  std::string::basic_string[abi:ne180100]<0>(v22, "sort_order");
  mlcore::MediaColumn<long long>::MediaColumn((uint64_t)&v24, (uint64_t)v22);
  std::string::basic_string[abi:ne180100]<0>(v16, "sort_order_section");
  mlcore::MediaColumn<int>::MediaColumn((uint64_t)&v18, (uint64_t)v16, 0);
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v244, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
  else
    v244 = __s;
  v239 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v144.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v240, v144.__r_.__value_.__l.__data_, v144.__r_.__value_.__l.__size_);
  else
    v240 = v144;
  v241 = v145;
  v239 = off_24C335B18;
  v242 = v146;
  v243 = v147;
  v234 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v137.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v235, v137.__r_.__value_.__l.__data_, v137.__r_.__value_.__l.__size_);
  else
    v235 = v137;
  v236 = v138;
  v234 = &off_24C335AB8;
  v237 = v139;
  if (SHIBYTE(v140.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v238, v140.__r_.__value_.__l.__data_, v140.__r_.__value_.__l.__size_);
  else
    v238 = v140;
  v229 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v128.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v230, v128.__r_.__value_.__l.__data_, v128.__r_.__value_.__l.__size_);
  else
    v230 = v128;
  v231 = v129;
  v229 = &off_24C335AB8;
  v232 = v130;
  if (SHIBYTE(v131.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v233, v131.__r_.__value_.__l.__data_, v131.__r_.__value_.__l.__size_);
  else
    v233 = v131;
  v220 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v120.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v221, v120.__r_.__value_.__l.__data_, v120.__r_.__value_.__l.__size_);
  else
    v221 = v120;
  v222 = v121;
  v220 = &off_24C335A98;
  v223 = v122;
  v2 = v124;
  v3 = v123;
  v224 = &off_24C331510;
  v225 = v123;
  v226 = v123;
  if (v123)
    v4 = (void *)operator new[]();
  else
    v4 = 0;
  v227 = v4;
  v228 = 1;
  if (v2)
    memcpy(v4, v2, v3);
  else
    bzero(v4, v3);
  v216 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v114.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v217, v114.__r_.__value_.__l.__data_, v114.__r_.__value_.__l.__size_);
  else
    v217 = v114;
  v218 = v115;
  v216 = off_24C335AF8;
  v219 = v116;
  v211 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v107.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v212, v107.__r_.__value_.__l.__data_, v107.__r_.__value_.__l.__size_);
  else
    v212 = v107;
  v211 = off_24C335B18;
  v214 = v109;
  v213 = v108;
  v215 = v110;
  v206 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v100.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v207, v100.__r_.__value_.__l.__data_, v100.__r_.__value_.__l.__size_);
  else
    v207 = v100;
  v206 = off_24C335B18;
  v209 = v102;
  v208 = v101;
  v210 = v103;
  v202 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v94.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v203, v94.__r_.__value_.__l.__data_, v94.__r_.__value_.__l.__size_);
  else
    v203 = v94;
  v204 = v95;
  v202 = off_24C335AF8;
  v205 = v96;
  v198 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v88.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v199, v88.__r_.__value_.__l.__data_, v88.__r_.__value_.__l.__size_);
  else
    v199 = v88;
  v200 = v89;
  v198 = off_24C335AF8;
  v201 = v90;
  v194 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v82.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v195, v82.__r_.__value_.__l.__data_, v82.__r_.__value_.__l.__size_);
  else
    v195 = v82;
  v196 = v83;
  v194 = off_24C335AF8;
  v197 = v84;
  v190 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v76.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v191, v76.__r_.__value_.__l.__data_, v76.__r_.__value_.__l.__size_);
  else
    v191 = v76;
  v192 = v77;
  v190 = off_24C335AF8;
  v193 = v78;
  v181 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v182, v67.__r_.__value_.__l.__data_, v67.__r_.__value_.__l.__size_);
  else
    v182 = v67;
  v183 = v68;
  v181 = &off_24C335A98;
  v184 = v69;
  v5 = v72;
  v6 = v71;
  v185 = &off_24C331510;
  v186 = v71;
  v187 = v71;
  if (v71)
    v7 = (void *)operator new[]();
  else
    v7 = 0;
  v188 = v7;
  v189 = 1;
  if (v5)
    memcpy(v7, v5, v6);
  else
    bzero(v7, v6);
  v176 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v177, v60.__r_.__value_.__l.__data_, v60.__r_.__value_.__l.__size_);
  else
    v177 = v60;
  v176 = off_24C335B18;
  v179 = v62;
  v178 = v61;
  v180 = v63;
  v171 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v172, v53.__r_.__value_.__l.__data_, v53.__r_.__value_.__l.__size_);
  else
    v172 = v53;
  v173 = v54;
  v171 = &off_24C335AB8;
  v174 = v55;
  if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v175, v56.__r_.__value_.__l.__data_, v56.__r_.__value_.__l.__size_);
  else
    v175 = v56;
  v167 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v168, v45.__r_.__value_.__l.__data_, v45.__r_.__value_.__l.__size_);
  else
    v168 = v45;
  v169 = v46;
  v167 = off_24C335AF8;
  v170 = v47;
  v163 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v164, v39.__r_.__value_.__l.__data_, v39.__r_.__value_.__l.__size_);
  else
    v164 = v39;
  v165 = v40;
  v163 = off_24C335AF8;
  v166 = v41;
  v158 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v159, v32.__r_.__value_.__l.__data_, v32.__r_.__value_.__l.__size_);
  else
    v159 = v32;
  v158 = off_24C335B18;
  v161 = v34;
  v160 = v33;
  v162 = v35;
  v153 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v154, v25.__r_.__value_.__l.__data_, v25.__r_.__value_.__l.__size_);
  else
    v154 = v25;
  v153 = off_24C335B18;
  v156 = v27;
  v155 = v26;
  v157 = v28;
  v149 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&__p, v19.__r_.__value_.__l.__data_, v19.__r_.__value_.__l.__size_);
  else
    __p = v19;
  v151 = v20;
  v149 = off_24C335AF8;
  v152 = v21;
  mediaplatform::DatabaseTable<long long,std::string,std::string,mediaplatform::Data,int,long long,long long,int,int,int,int,mediaplatform::Data,long long,std::string,int,int,long long,long long,int>::DatabaseTable((uint64_t)this, (uint64_t)&v244, (uint64_t)&v239, (uint64_t)&v234, (uint64_t)&v229, (uint64_t)&v220, (uint64_t)&v216, (uint64_t)&v211, (uint64_t)&v206, (uint64_t)&v202, (uint64_t)&v198, (uint64_t)&v194, (uint64_t)&v190, (uint64_t)&v181, (uint64_t)&v176, (uint64_t)&v171, (uint64_t)&v167, (uint64_t)&v163, (uint64_t)&v158,
    (uint64_t)&v153,
    (uint64_t)&v149);
  v149 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v153 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v154.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v154.__r_.__value_.__l.__data_);
  v158 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v159.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v159.__r_.__value_.__l.__data_);
  v163 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v164.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v164.__r_.__value_.__l.__data_);
  v167 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v168.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v168.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v171);
  v176 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v177.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v177.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<mediaplatform::Data>::~DatabaseColumn((uint64_t)&v181);
  v190 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v191.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v191.__r_.__value_.__l.__data_);
  v194 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v195.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v195.__r_.__value_.__l.__data_);
  v198 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v199.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v199.__r_.__value_.__l.__data_);
  v202 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v203.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v203.__r_.__value_.__l.__data_);
  v206 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v207.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v207.__r_.__value_.__l.__data_);
  v211 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v212.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v212.__r_.__value_.__l.__data_);
  v216 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v217.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v217.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<mediaplatform::Data>::~DatabaseColumn((uint64_t)&v220);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v229);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v234);
  v239 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v240.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v240.__r_.__value_.__l.__data_);
  if (SHIBYTE(v244.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v244.__r_.__value_.__l.__data_);
  *(_QWORD *)this = &off_24C336130;
  *((_QWORD *)this + 138) = off_24C335D90;
  if (SHIBYTE(v144.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 1112), v144.__r_.__value_.__l.__data_, v144.__r_.__value_.__l.__size_);
  else
    *(std::string *)((char *)this + 1112) = v144;
  *((_DWORD *)this + 284) = v145;
  *(_QWORD *)((char *)this + 1140) = v146;
  *((_DWORD *)this + 287) = v147;
  *((_QWORD *)this + 138) = off_24C336AC0;
  std::__tuple_leaf<1ul,mlcore::MediaColumn<std::string>,false>::__tuple_leaf[abi:ne180100]<mlcore::MediaColumn<std::string>&,void>((uint64_t)this + 1152, (uint64_t)v136);
  std::__tuple_leaf<2ul,mlcore::MediaColumn<std::string>,false>::__tuple_leaf[abi:ne180100]<mlcore::MediaColumn<std::string>&,void>((uint64_t)this + 1216, (uint64_t)v127);
  std::__tuple_leaf<3ul,mlcore::MediaColumn<mediaplatform::Data>,false>::__tuple_leaf[abi:ne180100]<mlcore::MediaColumn<mediaplatform::Data>&,void>((uint64_t)this + 1280, (uint64_t)v119);
  *((_QWORD *)this + 170) = off_24C335D90;
  if (SHIBYTE(v114.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external((std::string *)this + 57, v114.__r_.__value_.__l.__data_, v114.__r_.__value_.__l.__size_);
  else
    *((std::string *)this + 57) = v114;
  *((_DWORD *)this + 348) = v115;
  *(_QWORD *)((char *)this + 1396) = v116;
  *((_QWORD *)this + 170) = off_24C336AA0;
  *((_QWORD *)this + 176) = off_24C335D90;
  v8 = (std::string *)((char *)this + 1416);
  if (SHIBYTE(v107.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v8, v107.__r_.__value_.__l.__data_, v107.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v8->__r_.__value_.__l.__data_ = *(_OWORD *)&v107.__r_.__value_.__l.__data_;
    *((_QWORD *)this + 179) = *((_QWORD *)&v107.__r_.__value_.__l + 2);
  }
  *((_DWORD *)this + 360) = v108;
  *(_QWORD *)((char *)this + 1444) = v109;
  *((_DWORD *)this + 363) = v110;
  *((_QWORD *)this + 176) = off_24C336AC0;
  *((_QWORD *)this + 182) = off_24C335D90;
  v9 = (std::string *)((char *)this + 1464);
  if (SHIBYTE(v100.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v9, v100.__r_.__value_.__l.__data_, v100.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = *(_OWORD *)&v100.__r_.__value_.__l.__data_;
    *((_QWORD *)this + 185) = *((_QWORD *)&v100.__r_.__value_.__l + 2);
  }
  *((_DWORD *)this + 372) = v101;
  *(_QWORD *)((char *)this + 1492) = v102;
  *((_DWORD *)this + 375) = v103;
  *((_QWORD *)this + 182) = off_24C336AC0;
  *((_QWORD *)this + 188) = off_24C335D90;
  v10 = (std::string *)((char *)this + 1512);
  if (SHIBYTE(v94.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v10, v94.__r_.__value_.__l.__data_, v94.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v10->__r_.__value_.__l.__data_ = *(_OWORD *)&v94.__r_.__value_.__l.__data_;
    *((_QWORD *)this + 191) = *((_QWORD *)&v94.__r_.__value_.__l + 2);
  }
  *((_DWORD *)this + 384) = v95;
  *(_QWORD *)((char *)this + 1540) = v96;
  *((_QWORD *)this + 188) = off_24C336AA0;
  *((_QWORD *)this + 194) = off_24C335D90;
  if (SHIBYTE(v88.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external((std::string *)this + 65, v88.__r_.__value_.__l.__data_, v88.__r_.__value_.__l.__size_);
  else
    *((std::string *)this + 65) = v88;
  *((_DWORD *)this + 396) = v89;
  *(_QWORD *)((char *)this + 1588) = v90;
  *((_QWORD *)this + 194) = off_24C336AA0;
  *((_QWORD *)this + 200) = off_24C335D90;
  v11 = (std::string *)((char *)this + 1608);
  if (SHIBYTE(v82.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v11, v82.__r_.__value_.__l.__data_, v82.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v11->__r_.__value_.__l.__data_ = *(_OWORD *)&v82.__r_.__value_.__l.__data_;
    *((_QWORD *)this + 203) = *((_QWORD *)&v82.__r_.__value_.__l + 2);
  }
  *((_DWORD *)this + 408) = v83;
  *(_QWORD *)((char *)this + 1636) = v84;
  *((_QWORD *)this + 200) = off_24C336AA0;
  *((_QWORD *)this + 206) = off_24C335D90;
  if (SHIBYTE(v76.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external((std::string *)this + 69, v76.__r_.__value_.__l.__data_, v76.__r_.__value_.__l.__size_);
  else
    *((std::string *)this + 69) = v76;
  *((_DWORD *)this + 420) = v77;
  *(_QWORD *)((char *)this + 1684) = v78;
  *((_QWORD *)this + 206) = off_24C336AA0;
  *((_QWORD *)this + 212) = off_24C335D90;
  if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external((std::string *)this + 71, v67.__r_.__value_.__l.__data_, v67.__r_.__value_.__l.__size_);
  else
    *((std::string *)this + 71) = v67;
  *((_DWORD *)this + 432) = v68;
  *((_QWORD *)this + 212) = &off_24C335A98;
  *((_BYTE *)this + 1732) = v69;
  mediaplatform::Data::Data((mlcore::AlbumArtistTable *)((char *)this + 1736), (const mediaplatform::Data *)&v70);
  *((_QWORD *)this + 212) = &off_24C336A40;
  *((_QWORD *)this + 222) = off_24C335D90;
  if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 1784), v60.__r_.__value_.__l.__data_, v60.__r_.__value_.__l.__size_);
  else
    *(std::string *)((char *)this + 1784) = v60;
  *((_DWORD *)this + 452) = v61;
  *(_QWORD *)((char *)this + 1812) = v62;
  *((_DWORD *)this + 455) = v63;
  *((_QWORD *)this + 222) = off_24C336AC0;
  *((_QWORD *)this + 228) = off_24C335D90;
  if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 1832), v53.__r_.__value_.__l.__data_, v53.__r_.__value_.__l.__size_);
  else
    *(std::string *)((char *)this + 1832) = v53;
  *((_DWORD *)this + 464) = v54;
  *((_QWORD *)this + 228) = &off_24C335AB8;
  *((_BYTE *)this + 1860) = v55;
  v12 = (std::string *)((char *)this + 1864);
  if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v12, v56.__r_.__value_.__l.__data_, v56.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v12->__r_.__value_.__l.__data_ = *(_OWORD *)&v56.__r_.__value_.__l.__data_;
    *((_QWORD *)this + 235) = *((_QWORD *)&v56.__r_.__value_.__l + 2);
  }
  *((_QWORD *)this + 228) = &off_24C336A60;
  *((_QWORD *)this + 236) = off_24C335D90;
  if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external((std::string *)this + 79, v45.__r_.__value_.__l.__data_, v45.__r_.__value_.__l.__size_);
  else
    *((std::string *)this + 79) = v45;
  *((_DWORD *)this + 480) = v46;
  *(_QWORD *)((char *)this + 1924) = v47;
  *((_QWORD *)this + 236) = off_24C336AA0;
  *((_QWORD *)this + 242) = off_24C335D90;
  if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external((std::string *)this + 81, v39.__r_.__value_.__l.__data_, v39.__r_.__value_.__l.__size_);
  else
    *((std::string *)this + 81) = v39;
  *((_DWORD *)this + 492) = v40;
  *(_QWORD *)((char *)this + 1972) = v41;
  *((_QWORD *)this + 242) = off_24C336AA0;
  *((_QWORD *)this + 248) = off_24C335D90;
  if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external((std::string *)this + 83, v32.__r_.__value_.__l.__data_, v32.__r_.__value_.__l.__size_);
  else
    *((std::string *)this + 83) = v32;
  *((_DWORD *)this + 504) = v33;
  *(_QWORD *)((char *)this + 2020) = v34;
  *((_DWORD *)this + 507) = v35;
  *((_QWORD *)this + 248) = off_24C336AC0;
  *((_QWORD *)this + 254) = off_24C335D90;
  if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external((std::string *)this + 85, v25.__r_.__value_.__l.__data_, v25.__r_.__value_.__l.__size_);
  else
    *((std::string *)this + 85) = v25;
  *((_DWORD *)this + 516) = v26;
  *(_QWORD *)((char *)this + 2068) = v27;
  *((_DWORD *)this + 519) = v28;
  *((_QWORD *)this + 254) = off_24C336AC0;
  *((_QWORD *)this + 260) = off_24C335D90;
  v13 = (std::string *)((char *)this + 2088);
  v14 = HIBYTE(v19.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v13, v19.__r_.__value_.__l.__data_, v19.__r_.__value_.__l.__size_);
    v14 = HIBYTE(v19.__r_.__value_.__r.__words[2]);
  }
  else
  {
    *(_OWORD *)&v13->__r_.__value_.__l.__data_ = *(_OWORD *)&v19.__r_.__value_.__l.__data_;
    *((_QWORD *)this + 263) = *((_QWORD *)&v19.__r_.__value_.__l + 2);
  }
  *((_DWORD *)this + 528) = v20;
  *(_QWORD *)((char *)this + 2116) = v21;
  *((_QWORD *)this + 260) = off_24C336AA0;
  v18 = off_24C335D90;
  if (v14 < 0)
    operator delete(v19.__r_.__value_.__l.__data_);
  if (v17 < 0)
    operator delete(v16[0]);
  v24 = off_24C335D90;
  if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v25.__r_.__value_.__l.__data_);
  if (v23 < 0)
    operator delete(v22[0]);
  v31 = off_24C335D90;
  if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v32.__r_.__value_.__l.__data_);
  if (v30 < 0)
    operator delete(v29[0]);
  v38 = off_24C335D90;
  if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v39.__r_.__value_.__l.__data_);
  if (v37 < 0)
    operator delete(v36[0]);
  v44 = off_24C335D90;
  if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v45.__r_.__value_.__l.__data_);
  if (v43 < 0)
    operator delete(v42[0]);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)v52);
  if (v49 < 0)
    operator delete(v48[0]);
  if (v51 < 0)
    operator delete(v50[0]);
  v59 = off_24C335D90;
  if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v60.__r_.__value_.__l.__data_);
  if (v58 < 0)
    operator delete(v57[0]);
  mediaplatform::DatabaseColumn<mediaplatform::Data>::~DatabaseColumn((uint64_t)v66);
  if (v65 < 0)
    operator delete(v64[0]);
  v75 = off_24C335D90;
  if (SHIBYTE(v76.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v76.__r_.__value_.__l.__data_);
  if (v74 < 0)
    operator delete(v73[0]);
  v81 = off_24C335D90;
  if (SHIBYTE(v82.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v82.__r_.__value_.__l.__data_);
  if (v80 < 0)
    operator delete(v79[0]);
  v87 = off_24C335D90;
  if (SHIBYTE(v88.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v88.__r_.__value_.__l.__data_);
  if (v86 < 0)
    operator delete(v85[0]);
  v93 = off_24C335D90;
  if (SHIBYTE(v94.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v94.__r_.__value_.__l.__data_);
  if (v92 < 0)
    operator delete(v91[0]);
  v99 = off_24C335D90;
  if (SHIBYTE(v100.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v100.__r_.__value_.__l.__data_);
  if (v98 < 0)
    operator delete(v97[0]);
  v106 = off_24C335D90;
  if (SHIBYTE(v107.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v107.__r_.__value_.__l.__data_);
  if (v105 < 0)
    operator delete(v104[0]);
  v113 = off_24C335D90;
  if (SHIBYTE(v114.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v114.__r_.__value_.__l.__data_);
  if (v112 < 0)
    operator delete(v111[0]);
  mediaplatform::DatabaseColumn<mediaplatform::Data>::~DatabaseColumn((uint64_t)v119);
  if (v118 < 0)
    operator delete(v117[0]);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)v127);
  if (v126 < 0)
    operator delete(v125[0]);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)v136);
  if (v133 < 0)
    operator delete(v132[0]);
  if (v135 < 0)
    operator delete(v134[0]);
  v143 = off_24C335D90;
  if (SHIBYTE(v144.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v144.__r_.__value_.__l.__data_);
  if (v142 < 0)
    operator delete(v141[0]);
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__s.__r_.__value_.__l.__data_);
  *(_QWORD *)this = &off_24C3381A8;
  return this;
}

void sub_20A69D7D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void **a23,void **a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void **a34,void **a35,uint64_t a36,uint64_t a37,uint64_t a38,void **a39,void **a40,void **a41,void **a42,void *a43,uint64_t a44,int a45,__int16 a46,char a47,char a48,uint64_t a49,void *__p,uint64_t a51,int a52,__int16 a53,char a54,char a55,uint64_t a56,uint64_t a57,void *a58,uint64_t a59,int a60,__int16 a61,char a62,char a63)
{
  void *a65;
  char a70;
  void *a72;
  char a73;
  void *a74;
  char a75;
  void *a76;
  char a77;
  uint64_t v77;
  void **v78;
  void **v79;
  void **v80;
  void **v81;
  void **v82;
  uint64_t v83;

  *(_QWORD *)(v77 + 2032) = v83;
  if (*(char *)(v77 + 2063) < 0)
    operator delete(*v82);
  *(_QWORD *)(v77 + 1984) = v83;
  if (*(char *)(v77 + 2015) < 0)
    operator delete(*v81);
  *(_QWORD *)(v77 + 1936) = v83;
  if (*(char *)(v77 + 1967) < 0)
    operator delete(*v80);
  *(_QWORD *)(v77 + 1888) = v83;
  if (*(char *)(v77 + 1919) < 0)
    operator delete(*v78);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(v77 + 1824);
  *(_QWORD *)(v77 + 1776) = v83;
  if (*(char *)(v77 + 1807) < 0)
    operator delete(*v79);
  mediaplatform::DatabaseColumn<mediaplatform::Data>::~DatabaseColumn(v77 + 1696);
  *(_QWORD *)(v77 + 1648) = v83;
  if (*(char *)(v77 + 1679) < 0)
    operator delete(*a39);
  *(_QWORD *)(v77 + 1600) = v83;
  if (*(char *)(v77 + 1631) < 0)
    operator delete(*a40);
  *(_QWORD *)(v77 + 1552) = v83;
  if (*(char *)(v77 + 1583) < 0)
    operator delete(*a42);
  *(_QWORD *)(v77 + 1504) = v83;
  if (*(char *)(v77 + 1535) < 0)
    operator delete(*a34);
  *(_QWORD *)(v77 + 1456) = v83;
  if (*(char *)(v77 + 1487) < 0)
    operator delete(*a41);
  *(_QWORD *)(v77 + 1408) = v83;
  if (*(char *)(v77 + 1439) < 0)
    operator delete(*a35);
  *(_QWORD *)(v77 + 1360) = v83;
  if (*(char *)(v77 + 1391) < 0)
    operator delete(*a23);
  mediaplatform::DatabaseColumn<mediaplatform::Data>::~DatabaseColumn(a25);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a26);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a27);
  *(_QWORD *)(v77 + 1104) = v83;
  if (*(char *)(v77 + 1135) < 0)
    operator delete(*a24);
  mediaplatform::DatabaseTable<long long,std::string,std::string,mediaplatform::Data,int,long long,long long,int,int,int,int,mediaplatform::Data,long long,std::string,int,int,long long,long long,int>::~DatabaseTable(v77);
  if (a55 < 0)
    operator delete(__p);
  if (a48 < 0)
    operator delete(a43);
  if (a70 < 0)
    operator delete(a65);
  if (a63 < 0)
    operator delete(a58);
  if (a75 < 0)
    operator delete(a74);
  if (a73 < 0)
    operator delete(a72);
  STACK[0x200] = (unint64_t)off_24C335D90;
  if (SLOBYTE(STACK[0x21F]) < 0)
    operator delete((void *)STACK[0x208]);
  if (a77 < 0)
    operator delete(a76);
  STACK[0x248] = (unint64_t)off_24C335D90;
  if (SLOBYTE(STACK[0x267]) < 0)
    operator delete((void *)STACK[0x250]);
  if (SLOBYTE(STACK[0x247]) < 0)
    operator delete((void *)STACK[0x230]);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&STACK[0x2A8]);
  if (SLOBYTE(STACK[0x28F]) < 0)
    operator delete((void *)STACK[0x278]);
  if (SLOBYTE(STACK[0x2A7]) < 0)
    operator delete((void *)STACK[0x290]);
  STACK[0x300] = (unint64_t)off_24C335D90;
  if (SLOBYTE(STACK[0x31F]) < 0)
    operator delete((void *)STACK[0x308]);
  if (SLOBYTE(STACK[0x2FF]) < 0)
    operator delete((void *)STACK[0x2E8]);
  mediaplatform::DatabaseColumn<mediaplatform::Data>::~DatabaseColumn((uint64_t)&STACK[0x348]);
  if (SLOBYTE(STACK[0x347]) < 0)
    operator delete((void *)STACK[0x330]);
  STACK[0x3B0] = (unint64_t)off_24C335D90;
  if (SLOBYTE(STACK[0x3CF]) < 0)
    operator delete((void *)STACK[0x3B8]);
  if (SLOBYTE(STACK[0x3AF]) < 0)
    operator delete((void *)STACK[0x398]);
  STACK[0x3F8] = (unint64_t)off_24C335D90;
  if (SLOBYTE(STACK[0x417]) < 0)
    operator delete((void *)STACK[0x400]);
  if (SLOBYTE(STACK[0x3F7]) < 0)
    operator delete((void *)STACK[0x3E0]);
  STACK[0x440] = (unint64_t)off_24C335D90;
  if (SLOBYTE(STACK[0x45F]) < 0)
    operator delete((void *)STACK[0x448]);
  if (SLOBYTE(STACK[0x43F]) < 0)
    operator delete((void *)STACK[0x428]);
  STACK[0x488] = (unint64_t)off_24C335D90;
  if (SLOBYTE(STACK[0x4A7]) < 0)
    operator delete((void *)STACK[0x490]);
  if (SLOBYTE(STACK[0x487]) < 0)
    operator delete((void *)STACK[0x470]);
  STACK[0x4D0] = (unint64_t)off_24C335D90;
  if (SLOBYTE(STACK[0x4EF]) < 0)
    operator delete((void *)STACK[0x4D8]);
  if (SLOBYTE(STACK[0x4CF]) < 0)
    operator delete((void *)STACK[0x4B8]);
  STACK[0x518] = (unint64_t)off_24C335D90;
  if (SLOBYTE(STACK[0x537]) < 0)
    operator delete((void *)STACK[0x520]);
  if (SLOBYTE(STACK[0x517]) < 0)
    operator delete((void *)STACK[0x500]);
  STACK[0x560] = (unint64_t)off_24C335D90;
  if (SLOBYTE(STACK[0x57F]) < 0)
    operator delete((void *)STACK[0x568]);
  if (SLOBYTE(STACK[0x55F]) < 0)
    operator delete((void *)STACK[0x548]);
  mediaplatform::DatabaseColumn<mediaplatform::Data>::~DatabaseColumn((uint64_t)&STACK[0x5A8]);
  if (SLOBYTE(STACK[0x5A7]) < 0)
    operator delete((void *)STACK[0x590]);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&STACK[0x610]);
  if (SLOBYTE(STACK[0x60F]) < 0)
    operator delete((void *)STACK[0x5F8]);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&STACK[0x680]);
  if (SLOBYTE(STACK[0x667]) < 0)
    operator delete((void *)STACK[0x650]);
  if (SLOBYTE(STACK[0x67F]) < 0)
    operator delete((void *)STACK[0x668]);
  STACK[0x6D8] = (unint64_t)off_24C335D90;
  if (SLOBYTE(STACK[0x6F7]) < 0)
    operator delete((void *)STACK[0x6E0]);
  if (SLOBYTE(STACK[0x6D7]) < 0)
    operator delete((void *)STACK[0x6C0]);
  if (SLOBYTE(STACK[0x71F]) < 0)
    operator delete((void *)STACK[0x708]);
  _Unwind_Resume(a1);
}

void sub_20A69DF90()
{
  JUMPOUT(0x20A69DC94);
}

void sub_20A69DF98()
{
  JUMPOUT(0x20A69DCA4);
}

void sub_20A69DFA0()
{
  JUMPOUT(0x20A69DCC0);
}

void sub_20A69DFA8()
{
  JUMPOUT(0x20A69DCD0);
}

void sub_20A69DFB0()
{
  JUMPOUT(0x20A69DCECLL);
}

void sub_20A69DFB8()
{
  JUMPOUT(0x20A69DCFCLL);
}

void sub_20A69DFC0()
{
  JUMPOUT(0x20A69DD18);
}

void sub_20A69DFC8()
{
  JUMPOUT(0x20A69DD28);
}

void sub_20A69DFD0()
{
  JUMPOUT(0x20A69DD44);
}

void sub_20A69DFD8()
{
  JUMPOUT(0x20A69DD54);
}

void sub_20A69DFE0()
{
  JUMPOUT(0x20A69DD5CLL);
}

void sub_20A69DFE8()
{
  JUMPOUT(0x20A69DD6CLL);
}

void sub_20A69DFF0()
{
  JUMPOUT(0x20A69DD7CLL);
}

void sub_20A69DFF8()
{
  JUMPOUT(0x20A69DD98);
}

void sub_20A69E000()
{
  JUMPOUT(0x20A69DDA8);
}

void sub_20A69E008()
{
  JUMPOUT(0x20A69DDB0);
}

void sub_20A69E010()
{
  JUMPOUT(0x20A69DDC0);
}

void sub_20A69E018()
{
  JUMPOUT(0x20A69DDDCLL);
}

void sub_20A69E020()
{
  JUMPOUT(0x20A69DDECLL);
}

void sub_20A69E028()
{
  JUMPOUT(0x20A69DE08);
}

void sub_20A69E030()
{
  JUMPOUT(0x20A69DE18);
}

void sub_20A69E038()
{
  JUMPOUT(0x20A69DE34);
}

void sub_20A69E040()
{
  JUMPOUT(0x20A69DE44);
}

void sub_20A69E048()
{
  JUMPOUT(0x20A69DE60);
}

void sub_20A69E050()
{
  JUMPOUT(0x20A69DE70);
}

void sub_20A69E058()
{
  JUMPOUT(0x20A69DE8CLL);
}

void sub_20A69E060()
{
  JUMPOUT(0x20A69DE9CLL);
}

void sub_20A69E068()
{
  JUMPOUT(0x20A69DEB8);
}

void sub_20A69E070()
{
  JUMPOUT(0x20A69DEC8);
}

void sub_20A69E078()
{
  JUMPOUT(0x20A69DEE4);
}

void sub_20A69E080()
{
  JUMPOUT(0x20A69DEF4);
}

void sub_20A69E088()
{
  JUMPOUT(0x20A69DEFCLL);
}

void sub_20A69E090()
{
  JUMPOUT(0x20A69DF0CLL);
}

void sub_20A69E098()
{
  JUMPOUT(0x20A69DF14);
}

void sub_20A69E0A0()
{
  JUMPOUT(0x20A69DF24);
}

void sub_20A69E0A8()
{
  JUMPOUT(0x20A69DF2CLL);
}

void sub_20A69E0B0()
{
  JUMPOUT(0x20A69DF3CLL);
}

void sub_20A69E0B8()
{
  JUMPOUT(0x20A69DF4CLL);
}

void sub_20A69E0C0()
{
  JUMPOUT(0x20A69DF68);
}

void sub_20A69E0C8()
{
  JUMPOUT(0x20A69DF78);
}

uint64_t mlcore::PlaylistPropertyCollaborationInvitationURLExpirationDate(mlcore *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&mlcore::PlaylistPropertyCollaborationInvitationURLExpirationDate(void)::once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&mlcore::PlaylistPropertyCollaborationInvitationURLExpirationDate(void)::once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::PlaylistPropertyCollaborationInvitationURLExpirationDate(void)::$_0 &&>>);
  }
  return mlcore::PlaylistPropertyCollaborationInvitationURLExpirationDate(void)::property;
}

uint64_t mlcore::PlaylistItemReactionPropertyContainerItemPersistentID(mlcore *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&mlcore::PlaylistItemReactionPropertyContainerItemPersistentID(void)::once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&mlcore::PlaylistItemReactionPropertyContainerItemPersistentID(void)::once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::PlaylistItemReactionPropertyContainerItemPersistentID(void)::$_0 &&>>);
  }
  return mlcore::PlaylistItemReactionPropertyContainerItemPersistentID(void)::property;
}

uint64_t mlcore::PlaylistPropertyCollaborationJoinRequestPending(mlcore *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&mlcore::PlaylistPropertyCollaborationJoinRequestPending(void)::once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&mlcore::PlaylistPropertyCollaborationJoinRequestPending(void)::once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::PlaylistPropertyCollaborationJoinRequestPending(void)::$_0 &&>>);
  }
  return mlcore::PlaylistPropertyCollaborationJoinRequestPending(void)::property;
}

uint64_t mlcore::PlaylistItemReactionPropertyPersonPersistentID(mlcore *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&mlcore::PlaylistItemReactionPropertyPersonPersistentID(void)::once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&mlcore::PlaylistItemReactionPropertyPersonPersistentID(void)::once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::PlaylistItemReactionPropertyPersonPersistentID(void)::$_0 &&>>);
  }
  return mlcore::PlaylistItemReactionPropertyPersonPersistentID(void)::property;
}

uint64_t mlcore::ItemArtistPropertyClassicalExperienceAvailable(mlcore *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&mlcore::ItemArtistPropertyClassicalExperienceAvailable(void)::once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&mlcore::ItemArtistPropertyClassicalExperienceAvailable(void)::once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemArtistPropertyClassicalExperienceAvailable(void)::$_0 &&>>);
  }
  return mlcore::ItemArtistPropertyClassicalExperienceAvailable(void)::property;
}

uint64_t mlcore::ContainerItemPersonPropertyPersonPersistentID(mlcore *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&mlcore::ContainerItemPersonPropertyPersonPersistentID(void)::once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&mlcore::ContainerItemPersonPropertyPersonPersistentID(void)::once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ContainerItemPersonPropertyPersonPersistentID(void)::$_0 &&>>);
  }
  return mlcore::ContainerItemPersonPropertyPersonPersistentID(void)::property;
}

uint64_t mlcore::ArtistPropertyRepresentativeItemPersistentID(mlcore *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&mlcore::ArtistPropertyRepresentativeItemPersistentID(void)::once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&mlcore::ArtistPropertyRepresentativeItemPersistentID(void)::once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ArtistPropertyRepresentativeItemPersistentID(void)::$_0 &&>>);
  }
  return mlcore::ArtistPropertyRepresentativeItemPersistentID(void)::property;
}

uint64_t mlcore::PlaylistAuthorPropertyContainerPersistentID(mlcore *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&mlcore::PlaylistAuthorPropertyContainerPersistentID(void)::once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&mlcore::PlaylistAuthorPropertyContainerPersistentID(void)::once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::PlaylistAuthorPropertyContainerPersistentID(void)::$_0 &&>>);
  }
  return mlcore::PlaylistAuthorPropertyContainerPersistentID(void)::property;
}

uint64_t mlcore::ArtistPropertyClassicalExperienceAvailable(mlcore *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&mlcore::ArtistPropertyClassicalExperienceAvailable(void)::once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&mlcore::ArtistPropertyClassicalExperienceAvailable(void)::once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ArtistPropertyClassicalExperienceAvailable(void)::$_0 &&>>);
  }
  return mlcore::ArtistPropertyClassicalExperienceAvailable(void)::property;
}

uint64_t mlcore::PlaylistPropertyExternalVendorDisplayName(mlcore *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&mlcore::PlaylistPropertyExternalVendorDisplayName(void)::once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&mlcore::PlaylistPropertyExternalVendorDisplayName(void)::once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::PlaylistPropertyExternalVendorDisplayName(void)::$_0 &&>>);
  }
  return mlcore::PlaylistPropertyExternalVendorDisplayName(void)::property;
}

uint64_t mlcore::AlbumPropertyClassicalExperienceAvailable(mlcore *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&mlcore::AlbumPropertyClassicalExperienceAvailable(void)::once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&mlcore::AlbumPropertyClassicalExperienceAvailable(void)::once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::AlbumPropertyClassicalExperienceAvailable(void)::$_0 &&>>);
  }
  return mlcore::AlbumPropertyClassicalExperienceAvailable(void)::property;
}

uint64_t mlcore::TVSeasonPropertyLatestItemDateDownloaded(mlcore *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&mlcore::TVSeasonPropertyLatestItemDateDownloaded(void)::once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&mlcore::TVSeasonPropertyLatestItemDateDownloaded(void)::once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::TVSeasonPropertyLatestItemDateDownloaded(void)::$_0 &&>>);
  }
  return mlcore::TVSeasonPropertyLatestItemDateDownloaded(void)::property;
}

uint64_t mlcore::PlaylistPropertyIsExternalVendorPlaylist(mlcore *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&mlcore::PlaylistPropertyIsExternalVendorPlaylist(void)::once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&mlcore::PlaylistPropertyIsExternalVendorPlaylist(void)::once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::PlaylistPropertyIsExternalVendorPlaylist(void)::$_0 &&>>);
  }
  return mlcore::PlaylistPropertyIsExternalVendorPlaylist(void)::property;
}

uint64_t mlcore::PlaylistItemReactionPropertyReactionText(mlcore *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&mlcore::PlaylistItemReactionPropertyReactionText(void)::once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&mlcore::PlaylistItemReactionPropertyReactionText(void)::once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::PlaylistItemReactionPropertyReactionText(void)::$_0 &&>>);
  }
  return mlcore::PlaylistItemReactionPropertyReactionText(void)::property;
}

uint64_t mlcore::ItemPropertyStoreExtendedLyricsAttribute(mlcore *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&mlcore::ItemPropertyStoreExtendedLyricsAttribute(void)::once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&mlcore::ItemPropertyStoreExtendedLyricsAttribute(void)::once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyStoreExtendedLyricsAttribute(void)::$_0 &&>>);
  }
  return mlcore::ItemPropertyStoreExtendedLyricsAttribute(void)::property;
}

uint64_t mlcore::PlaylistPropertyIsTracklistUserEditable(mlcore *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&mlcore::PlaylistPropertyIsTracklistUserEditable(void)::once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&mlcore::PlaylistPropertyIsTracklistUserEditable(void)::once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::PlaylistPropertyIsTracklistUserEditable(void)::$_0 &&>>);
  }
  return mlcore::PlaylistPropertyIsTracklistUserEditable(void)::property;
}

uint64_t mlcore::PlaylistPropertyCollaboratorPermissions(mlcore *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&mlcore::PlaylistPropertyCollaboratorPermissions(void)::once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&mlcore::PlaylistPropertyCollaboratorPermissions(void)::once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::PlaylistPropertyCollaboratorPermissions(void)::$_0 &&>>);
  }
  return mlcore::PlaylistPropertyCollaboratorPermissions(void)::property;
}

uint64_t mlcore::PlaylistPropertyLikedStateChangedDate(mlcore *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&mlcore::PlaylistPropertyLikedStateChangedDate(void)::once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&mlcore::PlaylistPropertyLikedStateChangedDate(void)::once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::PlaylistPropertyLikedStateChangedDate(void)::$_0 &&>>);
  }
  return mlcore::PlaylistPropertyLikedStateChangedDate(void)::property;
}

uint64_t mlcore::PlaylistPropertyKeepLocalStatusReason(mlcore *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&mlcore::PlaylistPropertyKeepLocalStatusReason(void)::once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&mlcore::PlaylistPropertyKeepLocalStatusReason(void)::once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::PlaylistPropertyKeepLocalStatusReason(void)::$_0 &&>>);
  }
  return mlcore::PlaylistPropertyKeepLocalStatusReason(void)::property;
}

uint64_t mlcore::ItemPropertyTimeSyncedLyricsAvailable(mlcore *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&mlcore::ItemPropertyTimeSyncedLyricsAvailable(void)::once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&mlcore::ItemPropertyTimeSyncedLyricsAvailable(void)::once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyTimeSyncedLyricsAvailable(void)::$_0 &&>>);
  }
  return mlcore::ItemPropertyTimeSyncedLyricsAvailable(void)::property;
}

uint64_t mlcore::ItemPropertyHomeSharingAssetAvailable(mlcore *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&mlcore::ItemPropertyHomeSharingAssetAvailable(void)::once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&mlcore::ItemPropertyHomeSharingAssetAvailable(void)::once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyHomeSharingAssetAvailable(void)::$_0 &&>>);
  }
  return mlcore::ItemPropertyHomeSharingAssetAvailable(void)::property;
}

uint64_t mlcore::ArtistPropertyCloudUniversalLibraryID(mlcore *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&mlcore::ArtistPropertyCloudUniversalLibraryID(void)::once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&mlcore::ArtistPropertyCloudUniversalLibraryID(void)::once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ArtistPropertyCloudUniversalLibraryID(void)::$_0 &&>>);
  }
  return mlcore::ArtistPropertyCloudUniversalLibraryID(void)::property;
}

uint64_t mlcore::PlaylistPropertyKeepLocalConstraints(mlcore *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&mlcore::PlaylistPropertyKeepLocalConstraints(void)::once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&mlcore::PlaylistPropertyKeepLocalConstraints(void)::once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::PlaylistPropertyKeepLocalConstraints(void)::$_0 &&>>);
  }
  return mlcore::PlaylistPropertyKeepLocalConstraints(void)::property;
}

uint64_t mlcore::TVSeasonPropertyLatestItemDateAdded(mlcore *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&mlcore::TVSeasonPropertyLatestItemDateAdded(void)::once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&mlcore::TVSeasonPropertyLatestItemDateAdded(void)::once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::TVSeasonPropertyLatestItemDateAdded(void)::$_0 &&>>);
  }
  return mlcore::TVSeasonPropertyLatestItemDateAdded(void)::property;
}

uint64_t mlcore::PersonPropertyHasLightweightProfile(mlcore *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&mlcore::PersonPropertyHasLightweightProfile(void)::once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&mlcore::PersonPropertyHasLightweightProfile(void)::once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::PersonPropertyHasLightweightProfile(void)::$_0 &&>>);
  }
  return mlcore::PersonPropertyHasLightweightProfile(void)::property;
}

uint64_t mlcore::ComposerPropertyLatestItemDateAdded(mlcore *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&mlcore::ComposerPropertyLatestItemDateAdded(void)::once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&mlcore::ComposerPropertyLatestItemDateAdded(void)::once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ComposerPropertyLatestItemDateAdded(void)::$_0 &&>>);
  }
  return mlcore::ComposerPropertyLatestItemDateAdded(void)::property;
}

uint64_t mlcore::CloudKVSEntityPropertyHasBeenPlayed(mlcore *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&mlcore::CloudKVSEntityPropertyHasBeenPlayed(void)::once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&mlcore::CloudKVSEntityPropertyHasBeenPlayed(void)::once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::CloudKVSEntityPropertyHasBeenPlayed(void)::$_0 &&>>);
  }
  return mlcore::CloudKVSEntityPropertyHasBeenPlayed(void)::property;
}

uint64_t mlcore::ArtistPropertyLikedStateChangedDate(mlcore *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&mlcore::ArtistPropertyLikedStateChangedDate(void)::once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&mlcore::ArtistPropertyLikedStateChangedDate(void)::once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ArtistPropertyLikedStateChangedDate(void)::$_0 &&>>);
  }
  return mlcore::ArtistPropertyLikedStateChangedDate(void)::property;
}

uint64_t mlcore::AlbumPropertyMaximumItemTrackNumber(mlcore *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&mlcore::AlbumPropertyMaximumItemTrackNumber(void)::once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&mlcore::AlbumPropertyMaximumItemTrackNumber(void)::once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::AlbumPropertyMaximumItemTrackNumber(void)::$_0 &&>>);
  }
  return mlcore::AlbumPropertyMaximumItemTrackNumber(void)::property;
}

uint64_t mlcore::PlaylistPropertyShouldDisplayIndex(mlcore *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&mlcore::PlaylistPropertyShouldDisplayIndex(void)::once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&mlcore::PlaylistPropertyShouldDisplayIndex(void)::once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::PlaylistPropertyShouldDisplayIndex(void)::$_0 &&>>);
  }
  return mlcore::PlaylistPropertyShouldDisplayIndex(void)::property;
}

uint64_t mlcore::PlaylistPropertyCoverArtworkRecipe(mlcore *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&mlcore::PlaylistPropertyCoverArtworkRecipe(void)::once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&mlcore::PlaylistPropertyCoverArtworkRecipe(void)::once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::PlaylistPropertyCoverArtworkRecipe(void)::$_0 &&>>);
  }
  return mlcore::PlaylistPropertyCoverArtworkRecipe(void)::property;
}

uint64_t mlcore::PlaylistPropertyCollaboratorStatus(mlcore *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&mlcore::PlaylistPropertyCollaboratorStatus(void)::once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&mlcore::PlaylistPropertyCollaboratorStatus(void)::once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::PlaylistPropertyCollaboratorStatus(void)::$_0 &&>>);
  }
  return mlcore::PlaylistPropertyCollaboratorStatus(void)::property;
}

uint64_t mlcore::PlaylistPropertyCloudAuthorStoreID(mlcore *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&mlcore::PlaylistPropertyCloudAuthorStoreID(void)::once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&mlcore::PlaylistPropertyCloudAuthorStoreID(void)::once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::PlaylistPropertyCloudAuthorStoreID(void)::$_0 &&>>);
  }
  return mlcore::PlaylistPropertyCloudAuthorStoreID(void)::property;
}

uint64_t mlcore::ItemPropertyLibraryLyricsAvailable(mlcore *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&mlcore::ItemPropertyLibraryLyricsAvailable(void)::once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&mlcore::ItemPropertyLibraryLyricsAvailable(void)::once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyLibraryLyricsAvailable(void)::$_0 &&>>);
  }
  return mlcore::ItemPropertyLibraryLyricsAvailable(void)::property;
}

uint64_t mlcore::ItemPropertyGaplessLastFrameResync(mlcore *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&mlcore::ItemPropertyGaplessLastFrameResync(void)::once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&mlcore::ItemPropertyGaplessLastFrameResync(void)::once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyGaplessLastFrameResync(void)::$_0 &&>>);
  }
  return mlcore::ItemPropertyGaplessLastFrameResync(void)::property;
}

uint64_t mlcore::ItemPropertyEpisodeTypeDisplayName(mlcore *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&mlcore::ItemPropertyEpisodeTypeDisplayName(void)::once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&mlcore::ItemPropertyEpisodeTypeDisplayName(void)::once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyEpisodeTypeDisplayName(void)::$_0 &&>>);
  }
  return mlcore::ItemPropertyEpisodeTypeDisplayName(void)::property;
}

uint64_t mlcore::ItemPropertyClassicalMovementCount(mlcore *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&mlcore::ItemPropertyClassicalMovementCount(void)::once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&mlcore::ItemPropertyClassicalMovementCount(void)::once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyClassicalMovementCount(void)::$_0 &&>>);
  }
  return mlcore::ItemPropertyClassicalMovementCount(void)::property;
}

uint64_t mlcore::CloudKVSEntityPropertyBookmarkTime(mlcore *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&mlcore::CloudKVSEntityPropertyBookmarkTime(void)::once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&mlcore::CloudKVSEntityPropertyBookmarkTime(void)::once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::CloudKVSEntityPropertyBookmarkTime(void)::$_0 &&>>);
  }
  return mlcore::CloudKVSEntityPropertyBookmarkTime(void)::property;
}

uint64_t mlcore::AlbumPropertyLikedStateChangedDate(mlcore *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&mlcore::AlbumPropertyLikedStateChangedDate(void)::once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&mlcore::AlbumPropertyLikedStateChangedDate(void)::once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::AlbumPropertyLikedStateChangedDate(void)::$_0 &&>>);
  }
  return mlcore::AlbumPropertyLikedStateChangedDate(void)::property;
}

uint64_t mlcore::AlbumPropertyKeepLocalStatusReason(mlcore *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&mlcore::AlbumPropertyKeepLocalStatusReason(void)::once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&mlcore::AlbumPropertyKeepLocalStatusReason(void)::once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::AlbumPropertyKeepLocalStatusReason(void)::$_0 &&>>);
  }
  return mlcore::AlbumPropertyKeepLocalStatusReason(void)::property;
}

uint64_t mlcore::AlbumPropertyContainsClassicalWork(mlcore *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&mlcore::AlbumPropertyContainsClassicalWork(void)::once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&mlcore::AlbumPropertyContainsClassicalWork(void)::once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::AlbumPropertyContainsClassicalWork(void)::$_0 &&>>);
  }
  return mlcore::AlbumPropertyContainsClassicalWork(void)::property;
}

uint64_t mlcore::PlaylistPropertyCloudAuthorHandle(mlcore *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&mlcore::PlaylistPropertyCloudAuthorHandle(void)::once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&mlcore::PlaylistPropertyCloudAuthorHandle(void)::once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::PlaylistPropertyCloudAuthorHandle(void)::$_0 &&>>);
  }
  return mlcore::PlaylistPropertyCloudAuthorHandle(void)::property;
}

uint64_t mlcore::ItemPropertyLikedStateChangedDate(mlcore *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&mlcore::ItemPropertyLikedStateChangedDate(void)::once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&mlcore::ItemPropertyLikedStateChangedDate(void)::once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyLikedStateChangedDate(void)::$_0 &&>>);
  }
  return mlcore::ItemPropertyLikedStateChangedDate(void)::property;
}

uint64_t mlcore::ItemPropertyKeepLocalStatusReason(mlcore *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&mlcore::ItemPropertyKeepLocalStatusReason(void)::once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&mlcore::ItemPropertyKeepLocalStatusReason(void)::once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyKeepLocalStatusReason(void)::$_0 &&>>);
  }
  return mlcore::ItemPropertyKeepLocalStatusReason(void)::property;
}

uint64_t mlcore::ItemPropertyHasLoFiStreamingAsset(mlcore *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&mlcore::ItemPropertyHasLoFiStreamingAsset(void)::once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&mlcore::ItemPropertyHasLoFiStreamingAsset(void)::once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyHasLoFiStreamingAsset(void)::$_0 &&>>);
  }
  return mlcore::ItemPropertyHasLoFiStreamingAsset(void)::property;
}

uint64_t mlcore::ArtistPropertyLatestItemDateAdded(mlcore *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&mlcore::ArtistPropertyLatestItemDateAdded(void)::once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&mlcore::ArtistPropertyLatestItemDateAdded(void)::once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ArtistPropertyLatestItemDateAdded(void)::$_0 &&>>);
  }
  return mlcore::ArtistPropertyLatestItemDateAdded(void)::property;
}

uint64_t mlcore::AlbumPropertyKeepLocalConstraints(mlcore *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&mlcore::AlbumPropertyKeepLocalConstraints(void)::once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&mlcore::AlbumPropertyKeepLocalConstraints(void)::once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::AlbumPropertyKeepLocalConstraints(void)::$_0 &&>>);
  }
  return mlcore::AlbumPropertyKeepLocalConstraints(void)::property;
}

uint64_t mlcore::PlaylistItemReactionPropertyDate(mlcore *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&mlcore::PlaylistItemReactionPropertyDate(void)::once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&mlcore::PlaylistItemReactionPropertyDate(void)::once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::PlaylistItemReactionPropertyDate(void)::$_0 &&>>);
  }
  return mlcore::PlaylistItemReactionPropertyDate(void)::property;
}

uint64_t mlcore::PlaylistItemPropertyPositionUUID(mlcore *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&mlcore::PlaylistItemPropertyPositionUUID(void)::once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&mlcore::PlaylistItemPropertyPositionUUID(void)::once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::PlaylistItemPropertyPositionUUID(void)::$_0 &&>>);
  }
  return mlcore::PlaylistItemPropertyPositionUUID(void)::property;
}

uint64_t mlcore::PlaylistCategoryTypeIsUserShared(mlcore *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&mlcore::PlaylistCategoryTypeIsUserShared(void)::once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&mlcore::PlaylistCategoryTypeIsUserShared(void)::once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::PlaylistCategoryTypeIsUserShared(void)::$_0 &&>>);
  }
  return mlcore::PlaylistCategoryTypeIsUserShared(void)::property;
}

uint64_t mlcore::ItemPropertyStoreLyricsAvailable(mlcore *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&mlcore::ItemPropertyStoreLyricsAvailable(void)::once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&mlcore::ItemPropertyStoreLyricsAvailable(void)::once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyStoreLyricsAvailable(void)::$_0 &&>>);
  }
  return mlcore::ItemPropertyStoreLyricsAvailable(void)::property;
}

uint64_t mlcore::ItemPropertyShowComposerAsArtist(mlcore *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&mlcore::ItemPropertyShowComposerAsArtist(void)::once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&mlcore::ItemPropertyShowComposerAsArtist(void)::once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyShowComposerAsArtist(void)::$_0 &&>>);
  }
  return mlcore::ItemPropertyShowComposerAsArtist(void)::property;
}

uint64_t mlcore::ItemPropertyRememberBookmarkTime(mlcore *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&mlcore::ItemPropertyRememberBookmarkTime(void)::once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&mlcore::ItemPropertyRememberBookmarkTime(void)::once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyRememberBookmarkTime(void)::$_0 &&>>);
  }
  return mlcore::ItemPropertyRememberBookmarkTime(void)::property;
}

uint64_t mlcore::ItemPropertyHLSKeyServerProtocol(mlcore *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&mlcore::ItemPropertyHLSKeyServerProtocol(void)::once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&mlcore::ItemPropertyHLSKeyServerProtocol(void)::once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyHLSKeyServerProtocol(void)::$_0 &&>>);
  }
  return mlcore::ItemPropertyHLSKeyServerProtocol(void)::property;
}

uint64_t mlcore::ItemPropertyHLSKeyCertificateURL(mlcore *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&mlcore::ItemPropertyHLSKeyCertificateURL(void)::once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&mlcore::ItemPropertyHLSKeyCertificateURL(void)::once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyHLSKeyCertificateURL(void)::$_0 &&>>);
  }
  return mlcore::ItemPropertyHLSKeyCertificateURL(void)::property;
}

uint64_t mlcore::ItemPropertyGaplessHeuristicInfo(mlcore *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&mlcore::ItemPropertyGaplessHeuristicInfo(void)::once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&mlcore::ItemPropertyGaplessHeuristicInfo(void)::once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyGaplessHeuristicInfo(void)::$_0 &&>>);
  }
  return mlcore::ItemPropertyGaplessHeuristicInfo(void)::property;
}

uint64_t mlcore::ItemPropertyGaplessEncodingDrain(mlcore *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&mlcore::ItemPropertyGaplessEncodingDrain(void)::once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&mlcore::ItemPropertyGaplessEncodingDrain(void)::once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyGaplessEncodingDrain(void)::$_0 &&>>);
  }
  return mlcore::ItemPropertyGaplessEncodingDrain(void)::property;
}

uint64_t mlcore::ItemPropertyGaplessEncodingDelay(mlcore *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&mlcore::ItemPropertyGaplessEncodingDelay(void)::once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&mlcore::ItemPropertyGaplessEncodingDelay(void)::once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyGaplessEncodingDelay(void)::$_0 &&>>);
  }
  return mlcore::ItemPropertyGaplessEncodingDelay(void)::property;
}

uint64_t mlcore::GenrePropertyLatestItemDateAdded(mlcore *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&mlcore::GenrePropertyLatestItemDateAdded(void)::once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&mlcore::GenrePropertyLatestItemDateAdded(void)::once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::GenrePropertyLatestItemDateAdded(void)::$_0 &&>>);
  }
  return mlcore::GenrePropertyLatestItemDateAdded(void)::property;
}

uint64_t mlcore::AlbumPropertyVolumeNormalization(mlcore *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&mlcore::AlbumPropertyVolumeNormalization(void)::once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&mlcore::AlbumPropertyVolumeNormalization(void)::once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::AlbumPropertyVolumeNormalization(void)::$_0 &&>>);
  }
  return mlcore::AlbumPropertyVolumeNormalization(void)::property;
}

uint64_t mlcore::AlbumPropertyLatestItemDateAdded(mlcore *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&mlcore::AlbumPropertyLatestItemDateAdded(void)::once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&mlcore::AlbumPropertyLatestItemDateAdded(void)::once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::AlbumPropertyLatestItemDateAdded(void)::$_0 &&>>);
  }
  return mlcore::AlbumPropertyLatestItemDateAdded(void)::property;
}

uint64_t mlcore::PlaylistPropertyKeepLocalStatus(mlcore *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&mlcore::PlaylistPropertyKeepLocalStatus(void)::once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&mlcore::PlaylistPropertyKeepLocalStatus(void)::once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::PlaylistPropertyKeepLocalStatus(void)::$_0 &&>>);
  }
  return mlcore::PlaylistPropertyKeepLocalStatus(void)::property;
}

uint64_t mlcore::PlaylistPropertyDatePlayedLocal(mlcore *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&mlcore::PlaylistPropertyDatePlayedLocal(void)::once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&mlcore::PlaylistPropertyDatePlayedLocal(void)::once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::PlaylistPropertyDatePlayedLocal(void)::$_0 &&>>);
  }
  return mlcore::PlaylistPropertyDatePlayedLocal(void)::property;
}

uint64_t mlcore::PlaylistPropertyCloudAuthorName(mlcore *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&mlcore::PlaylistPropertyCloudAuthorName(void)::once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&mlcore::PlaylistPropertyCloudAuthorName(void)::once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::PlaylistPropertyCloudAuthorName(void)::$_0 &&>>);
  }
  return mlcore::PlaylistPropertyCloudAuthorName(void)::property;
}

uint64_t mlcore::PlaylistCategoryTypeIsEditorial(mlcore *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&mlcore::PlaylistCategoryTypeIsEditorial(void)::once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&mlcore::PlaylistCategoryTypeIsEditorial(void)::once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::PlaylistCategoryTypeIsEditorial(void)::$_0 &&>>);
  }
  return mlcore::PlaylistCategoryTypeIsEditorial(void)::property;
}

uint64_t mlcore::PlaylistAuthorPropertyIsPending(mlcore *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&mlcore::PlaylistAuthorPropertyIsPending(void)::once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&mlcore::PlaylistAuthorPropertyIsPending(void)::once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::PlaylistAuthorPropertyIsPending(void)::$_0 &&>>);
  }
  return mlcore::PlaylistAuthorPropertyIsPending(void)::property;
}

uint64_t mlcore::ItemPropertyStoreNeedsReporting(mlcore *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&mlcore::ItemPropertyStoreNeedsReporting(void)::once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&mlcore::ItemPropertyStoreNeedsReporting(void)::once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyStoreNeedsReporting(void)::$_0 &&>>);
  }
  return mlcore::ItemPropertyStoreNeedsReporting(void)::property;
}

uint64_t mlcore::ItemPropertyPodcastExternalGUID(mlcore *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&mlcore::ItemPropertyPodcastExternalGUID(void)::once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&mlcore::ItemPropertyPodcastExternalGUID(void)::once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyPodcastExternalGUID(void)::$_0 &&>>);
  }
  return mlcore::ItemPropertyPodcastExternalGUID(void)::property;
}

uint64_t mlcore::ItemPropertyEpisodeSubSortOrder(mlcore *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&mlcore::ItemPropertyEpisodeSubSortOrder(void)::once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&mlcore::ItemPropertyEpisodeSubSortOrder(void)::once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyEpisodeSubSortOrder(void)::$_0 &&>>);
  }
  return mlcore::ItemPropertyEpisodeSubSortOrder(void)::property;
}

uint64_t mlcore::CloudKVSEntityPropertyPlayCount(mlcore *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&mlcore::CloudKVSEntityPropertyPlayCount(void)::once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&mlcore::CloudKVSEntityPropertyPlayCount(void)::once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::CloudKVSEntityPropertyPlayCount(void)::$_0 &&>>);
  }
  return mlcore::CloudKVSEntityPropertyPlayCount(void)::property;
}

uint64_t mlcore::TVEpisodePropertyEpisodeSortID(mlcore *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&mlcore::TVEpisodePropertyEpisodeSortID(void)::once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&mlcore::TVEpisodePropertyEpisodeSortID(void)::once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::TVEpisodePropertyEpisodeSortID(void)::$_0 &&>>);
  }
  return mlcore::TVEpisodePropertyEpisodeSortID(void)::property;
}

uint64_t mlcore::PlaylistPropertyDateDownloaded(mlcore *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&mlcore::PlaylistPropertyDateDownloaded(void)::once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&mlcore::PlaylistPropertyDateDownloaded(void)::once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::PlaylistPropertyDateDownloaded(void)::$_0 &&>>);
  }
  return mlcore::PlaylistPropertyDateDownloaded(void)::property;
}

uint64_t mlcore::PlaylistPropertyCloudIsVisible(mlcore *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&mlcore::PlaylistPropertyCloudIsVisible(void)::once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&mlcore::PlaylistPropertyCloudIsVisible(void)::once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::PlaylistPropertyCloudIsVisible(void)::$_0 &&>>);
  }
  return mlcore::PlaylistPropertyCloudIsVisible(void)::property;
}

uint64_t mlcore::PlaylistAuthorPropertyPosition(mlcore *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&mlcore::PlaylistAuthorPropertyPosition(void)::once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&mlcore::PlaylistAuthorPropertyPosition(void)::once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::PlaylistAuthorPropertyPosition(void)::$_0 &&>>);
  }
  return mlcore::PlaylistAuthorPropertyPosition(void)::property;
}

uint64_t mlcore::ArtistPropertyLibraryItemCount(mlcore *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&mlcore::ArtistPropertyLibraryItemCount(void)::once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&mlcore::ArtistPropertyLibraryItemCount(void)::once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ArtistPropertyLibraryItemCount(void)::$_0 &&>>);
  }
  return mlcore::ArtistPropertyLibraryItemCount(void)::property;
}

uint64_t mlcore::PlaylistPropertyCloudShareURL(mlcore *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&mlcore::PlaylistPropertyCloudShareURL(void)::once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&mlcore::PlaylistPropertyCloudShareURL(void)::once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::PlaylistPropertyCloudShareURL(void)::$_0 &&>>);
  }
  return mlcore::PlaylistPropertyCloudShareURL(void)::property;
}

uint64_t mlcore::ItemPropertyPurchaseHistoryID(mlcore *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&mlcore::ItemPropertyPurchaseHistoryID(void)::once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&mlcore::ItemPropertyPurchaseHistoryID(void)::once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyPurchaseHistoryID(void)::$_0 &&>>);
  }
  return mlcore::ItemPropertyPurchaseHistoryID(void)::property;
}

uint64_t mlcore::ItemPropertyHasStreamingAsset(mlcore *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&mlcore::ItemPropertyHasStreamingAsset(void)::once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&mlcore::ItemPropertyHasStreamingAsset(void)::once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyHasStreamingAsset(void)::$_0 &&>>);
  }
  return mlcore::ItemPropertyHasStreamingAsset(void)::property;
}

uint64_t mlcore::ItemPropertyDurationInSamples(mlcore *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&mlcore::ItemPropertyDurationInSamples(void)::once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&mlcore::ItemPropertyDurationInSamples(void)::once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyDurationInSamples(void)::$_0 &&>>);
  }
  return mlcore::ItemPropertyDurationInSamples(void)::property;
}

uint64_t mlcore::ItemPropertyClassicalMovement(mlcore *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&mlcore::ItemPropertyClassicalMovement(void)::once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&mlcore::ItemPropertyClassicalMovement(void)::once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyClassicalMovement(void)::$_0 &&>>);
  }
  return mlcore::ItemPropertyClassicalMovement(void)::property;
}

uint64_t mlcore::TVSeasonPropertyEpisodeCount(mlcore *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&mlcore::TVSeasonPropertyEpisodeCount(void)::once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&mlcore::TVSeasonPropertyEpisodeCount(void)::once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::TVSeasonPropertyEpisodeCount(void)::$_0 &&>>);
  }
  return mlcore::TVSeasonPropertyEpisodeCount(void)::property;
}

uint64_t mlcore::PlaylistPropertyDateModified(mlcore *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&mlcore::PlaylistPropertyDateModified(void)::once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&mlcore::PlaylistPropertyDateModified(void)::once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::PlaylistPropertyDateModified(void)::$_0 &&>>);
  }
  return mlcore::PlaylistPropertyDateModified(void)::property;
}

uint64_t mlcore::ItemArtistPropertySeriesName(mlcore *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&mlcore::ItemArtistPropertySeriesName(void)::once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&mlcore::ItemArtistPropertySeriesName(void)::once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemArtistPropertySeriesName(void)::$_0 &&>>);
  }
  return mlcore::ItemArtistPropertySeriesName(void)::property;
}

uint64_t mlcore::AlbumPropertyKeepLocalStatus(mlcore *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&mlcore::AlbumPropertyKeepLocalStatus(void)::once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&mlcore::AlbumPropertyKeepLocalStatus(void)::once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::AlbumPropertyKeepLocalStatus(void)::$_0 &&>>);
  }
  return mlcore::AlbumPropertyKeepLocalStatus(void)::property;
}

uint64_t mlcore::AlbumPropertyDatePlayedLocal(mlcore *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&mlcore::AlbumPropertyDatePlayedLocal(void)::once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&mlcore::AlbumPropertyDatePlayedLocal(void)::once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::AlbumPropertyDatePlayedLocal(void)::$_0 &&>>);
  }
  return mlcore::AlbumPropertyDatePlayedLocal(void)::property;
}

uint64_t mlcore::TVShowPropertyHasSeriesName(mlcore *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&mlcore::TVShowPropertyHasSeriesName(void)::once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&mlcore::TVShowPropertyHasSeriesName(void)::once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::TVShowPropertyHasSeriesName(void)::$_0 &&>>);
  }
  return mlcore::TVShowPropertyHasSeriesName(void)::property;
}

uint64_t mlcore::PlaylistPropertyDescription(mlcore *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&mlcore::PlaylistPropertyDescription(void)::once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&mlcore::PlaylistPropertyDescription(void)::once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::PlaylistPropertyDescription(void)::$_0 &&>>);
  }
  return mlcore::PlaylistPropertyDescription(void)::property;
}

uint64_t mlcore::PlaylistPropertyDateCreated(mlcore *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&mlcore::PlaylistPropertyDateCreated(void)::once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&mlcore::PlaylistPropertyDateCreated(void)::once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::PlaylistPropertyDateCreated(void)::$_0 &&>>);
  }
  return mlcore::PlaylistPropertyDateCreated(void)::property;
}

uint64_t mlcore::ItemPropertyHLSKeyServerURL(mlcore *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&mlcore::ItemPropertyHLSKeyServerURL(void)::once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&mlcore::ItemPropertyHLSKeyServerURL(void)::once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyHLSKeyServerURL(void)::$_0 &&>>);
  }
  return mlcore::ItemPropertyHLSKeyServerURL(void)::property;
}

uint64_t mlcore::ItemPropertyAlbumTrackCount(mlcore *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&mlcore::ItemPropertyAlbumTrackCount(void)::once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&mlcore::ItemPropertyAlbumTrackCount(void)::once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyAlbumTrackCount(void)::$_0 &&>>);
  }
  return mlcore::ItemPropertyAlbumTrackCount(void)::property;
}

uint64_t mlcore::AlbumPropertyDateDownloaded(mlcore *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&mlcore::AlbumPropertyDateDownloaded(void)::once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&mlcore::AlbumPropertyDateDownloaded(void)::once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::AlbumPropertyDateDownloaded(void)::$_0 &&>>);
  }
  return mlcore::AlbumPropertyDateDownloaded(void)::property;
}

uint64_t mlcore::AlbumPropertyCloudLibraryID(mlcore *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&mlcore::AlbumPropertyCloudLibraryID(void)::once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&mlcore::AlbumPropertyCloudLibraryID(void)::once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::AlbumPropertyCloudLibraryID(void)::$_0 &&>>);
  }
  return mlcore::AlbumPropertyCloudLibraryID(void)::property;
}

uint64_t mlcore::TVShowPropertyEpisodeCount(mlcore *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&mlcore::TVShowPropertyEpisodeCount(void)::once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&mlcore::TVShowPropertyEpisodeCount(void)::once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::TVShowPropertyEpisodeCount(void)::$_0 &&>>);
  }
  return mlcore::TVShowPropertyEpisodeCount(void)::property;
}

uint64_t mlcore::PlaylistAuthorPropertyRole(mlcore *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&mlcore::PlaylistAuthorPropertyRole(void)::once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&mlcore::PlaylistAuthorPropertyRole(void)::once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::PlaylistAuthorPropertyRole(void)::$_0 &&>>);
  }
  return mlcore::PlaylistAuthorPropertyRole(void)::property;
}

uint64_t mlcore::PersonPropertyPersistentID(mlcore *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&mlcore::PersonPropertyPersistentID(void)::once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&mlcore::PersonPropertyPersistentID(void)::once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::PersonPropertyPersistentID(void)::$_0 &&>>);
  }
  return mlcore::PersonPropertyPersistentID(void)::property;
}

uint64_t mlcore::ItemPropertyStoreAccountID(mlcore *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&mlcore::ItemPropertyStoreAccountID(void)::once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&mlcore::ItemPropertyStoreAccountID(void)::once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyStoreAccountID(void)::$_0 &&>>);
  }
  return mlcore::ItemPropertyStoreAccountID(void)::property;
}

uint64_t mlcore::ItemPropertyRelativeVolume(mlcore *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&mlcore::ItemPropertyRelativeVolume(void)::once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&mlcore::ItemPropertyRelativeVolume(void)::once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyRelativeVolume(void)::$_0 &&>>);
  }
  return mlcore::ItemPropertyRelativeVolume(void)::property;
}

uint64_t mlcore::ItemPropertyHasTrackNumber(mlcore *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&mlcore::ItemPropertyHasTrackNumber(void)::once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&mlcore::ItemPropertyHasTrackNumber(void)::once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyHasTrackNumber(void)::$_0 &&>>);
  }
  return mlcore::ItemPropertyHasTrackNumber(void)::property;
}

uint64_t mlcore::ItemPropertyHLSAssetTraits(mlcore *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&mlcore::ItemPropertyHLSAssetTraits(void)::once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&mlcore::ItemPropertyHLSAssetTraits(void)::once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyHLSAssetTraits(void)::$_0 &&>>);
  }
  return mlcore::ItemPropertyHLSAssetTraits(void)::property;
}

uint64_t mlcore::PlaylistPropertyKeepLocal(mlcore *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&mlcore::PlaylistPropertyKeepLocal(void)::once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&mlcore::PlaylistPropertyKeepLocal(void)::once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::PlaylistPropertyKeepLocal(void)::$_0 &&>>);
  }
  return mlcore::PlaylistPropertyKeepLocal(void)::property;
}

uint64_t mlcore::ItemPropertySkipCountUser(mlcore *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&mlcore::ItemPropertySkipCountUser(void)::once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&mlcore::ItemPropertySkipCountUser(void)::once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertySkipCountUser(void)::$_0 &&>>);
  }
  return mlcore::ItemPropertySkipCountUser(void)::property;
}

uint64_t mlcore::ItemPropertyPlayCountUser(mlcore *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&mlcore::ItemPropertyPlayCountUser(void)::once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&mlcore::ItemPropertyPlayCountUser(void)::once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyPlayCountUser(void)::$_0 &&>>);
  }
  return mlcore::ItemPropertyPlayCountUser(void)::property;
}

uint64_t mlcore::ItemPropertyHomeSharingID(mlcore *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&mlcore::ItemPropertyHomeSharingID(void)::once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&mlcore::ItemPropertyHomeSharingID(void)::once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyHomeSharingID(void)::$_0 &&>>);
  }
  return mlcore::ItemPropertyHomeSharingID(void)::property;
}

uint64_t mlcore::ItemPropertyEpisodeSortID(mlcore *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&mlcore::ItemPropertyEpisodeSortID(void)::once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&mlcore::ItemPropertyEpisodeSortID(void)::once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyEpisodeSortID(void)::$_0 &&>>);
  }
  return mlcore::ItemPropertyEpisodeSortID(void)::property;
}

uint64_t mlcore::ItemPropertyClassicalWork(mlcore *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&mlcore::ItemPropertyClassicalWork(void)::once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&mlcore::ItemPropertyClassicalWork(void)::once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyClassicalWork(void)::$_0 &&>>);
  }
  return mlcore::ItemPropertyClassicalWork(void)::property;
}

uint64_t mlcore::AlbumPropertySeasonNumber(mlcore *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&mlcore::AlbumPropertySeasonNumber(void)::once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&mlcore::AlbumPropertySeasonNumber(void)::once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::AlbumPropertySeasonNumber(void)::$_0 &&>>);
  }
  return mlcore::AlbumPropertySeasonNumber(void)::property;
}

uint64_t mlcore::PlaylistItemPropertyUUID(mlcore *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&mlcore::PlaylistItemPropertyUUID(void)::once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&mlcore::PlaylistItemPropertyUUID(void)::once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::PlaylistItemPropertyUUID(void)::$_0 &&>>);
  }
  return mlcore::PlaylistItemPropertyUUID(void)::property;
}

uint64_t mlcore::ArtistPropertyAlbumCount(mlcore *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&mlcore::ArtistPropertyAlbumCount(void)::once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&mlcore::ArtistPropertyAlbumCount(void)::once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ArtistPropertyAlbumCount(void)::$_0 &&>>);
  }
  return mlcore::ArtistPropertyAlbumCount(void)::property;
}

uint64_t mlcore::ItemPropertyIsProtected(mlcore *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&mlcore::ItemPropertyIsProtected(void)::once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&mlcore::ItemPropertyIsProtected(void)::once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyIsProtected(void)::$_0 &&>>);
  }
  return mlcore::ItemPropertyIsProtected(void)::property;
}

uint64_t mlcore::ComposerPropertyHasName(mlcore *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&mlcore::ComposerPropertyHasName(void)::once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&mlcore::ComposerPropertyHasName(void)::once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ComposerPropertyHasName(void)::$_0 &&>>);
  }
  return mlcore::ComposerPropertyHasName(void)::property;
}

uint64_t mlcore::ArtistPropertyItemCount(mlcore *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&mlcore::ArtistPropertyItemCount(void)::once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&mlcore::ArtistPropertyItemCount(void)::once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ArtistPropertyItemCount(void)::$_0 &&>>);
  }
  return mlcore::ArtistPropertyItemCount(void)::property;
}

uint64_t mlcore::AlbumPropertyIsPreOrder(mlcore *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&mlcore::AlbumPropertyIsPreOrder(void)::once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&mlcore::AlbumPropertyIsPreOrder(void)::once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::AlbumPropertyIsPreOrder(void)::$_0 &&>>);
  }
  return mlcore::AlbumPropertyIsPreOrder(void)::property;
}

uint64_t mlcore::PlaylistPropertyTraits(mlcore *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&mlcore::PlaylistPropertyTraits(void)::once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&mlcore::PlaylistPropertyTraits(void)::once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::PlaylistPropertyTraits(void)::$_0 &&>>);
  }
  return mlcore::PlaylistPropertyTraits(void)::property;
}

uint64_t mlcore::PersonPropertyImageURL(mlcore *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&mlcore::PersonPropertyImageURL(void)::once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&mlcore::PersonPropertyImageURL(void)::once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::PersonPropertyImageURL(void)::$_0 &&>>);
  }
  return mlcore::PersonPropertyImageURL(void)::property;
}

uint64_t mlcore::AlbumPropertyKeepLocal(mlcore *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&mlcore::AlbumPropertyKeepLocal(void)::once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&mlcore::AlbumPropertyKeepLocal(void)::once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::AlbumPropertyKeepLocal(void)::$_0 &&>>);
  }
  return mlcore::AlbumPropertyKeepLocal(void)::property;
}

uint64_t mlcore::AlbumPropertyItemCount(mlcore *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&mlcore::AlbumPropertyItemCount(void)::once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&mlcore::AlbumPropertyItemCount(void)::once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::AlbumPropertyItemCount(void)::$_0 &&>>);
  }
  return mlcore::AlbumPropertyItemCount(void)::property;
}

uint64_t mlcore::ItemPropertyStartTime(mlcore *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&mlcore::ItemPropertyStartTime(void)::once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&mlcore::ItemPropertyStartTime(void)::once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyStartTime(void)::$_0 &&>>);
  }
  return mlcore::ItemPropertyStartTime(void)::property;
}

uint64_t mlcore::PlaylistPropertyName(mlcore *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&mlcore::PlaylistPropertyName(void)::once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&mlcore::PlaylistPropertyName(void)::once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::PlaylistPropertyName(void)::$_0 &&>>);
  }
  return mlcore::PlaylistPropertyName(void)::property;
}

uint64_t mlcore::PersonPropertyHandle(mlcore *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&mlcore::PersonPropertyHandle(void)::once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&mlcore::PersonPropertyHandle(void)::once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::PersonPropertyHandle(void)::$_0 &&>>);
  }
  return mlcore::PersonPropertyHandle(void)::property;
}

uint64_t mlcore::ItemPropertyStopTime(mlcore *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&mlcore::ItemPropertyStopTime(void)::once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&mlcore::ItemPropertyStopTime(void)::once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyStopTime(void)::$_0 &&>>);
  }
  return mlcore::ItemPropertyStopTime(void)::property;
}

uint64_t mlcore::ItemPropertyGrouping(mlcore *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&mlcore::ItemPropertyGrouping(void)::once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&mlcore::ItemPropertyGrouping(void)::once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyGrouping(void)::$_0 &&>>);
  }
  return mlcore::ItemPropertyGrouping(void)::property;
}

uint64_t mlcore::ItemPropertyFileSize(mlcore *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&mlcore::ItemPropertyFileSize(void)::once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&mlcore::ItemPropertyFileSize(void)::once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyFileSize(void)::$_0 &&>>);
  }
  return mlcore::ItemPropertyFileSize(void)::property;
}

uint64_t mlcore::GenrePropertyHasName(mlcore *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&mlcore::GenrePropertyHasName(void)::once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&mlcore::GenrePropertyHasName(void)::once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::GenrePropertyHasName(void)::$_0 &&>>);
  }
  return mlcore::GenrePropertyHasName(void)::property;
}

uint64_t mlcore::ComposerPropertyName(mlcore *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&mlcore::ComposerPropertyName(void)::once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&mlcore::ComposerPropertyName(void)::once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ComposerPropertyName(void)::$_0 &&>>);
  }
  return mlcore::ComposerPropertyName(void)::property;
}

uint64_t mlcore::AlbumPropertyFeedURL(mlcore *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&mlcore::AlbumPropertyFeedURL(void)::once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&mlcore::AlbumPropertyFeedURL(void)::once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::AlbumPropertyFeedURL(void)::$_0 &&>>);
  }
  return mlcore::AlbumPropertyFeedURL(void)::property;
}

uint64_t mlcore::AlbumPropertyAppData(mlcore *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&mlcore::AlbumPropertyAppData(void)::once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&mlcore::AlbumPropertyAppData(void)::once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::AlbumPropertyAppData(void)::$_0 &&>>);
  }
  return mlcore::AlbumPropertyAppData(void)::property;
}

uint64_t mlcore::MoviePropertyInfo(mlcore *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&mlcore::MoviePropertyInfo(void)::once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&mlcore::MoviePropertyInfo(void)::once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::MoviePropertyInfo(void)::$_0 &&>>);
  }
  return mlcore::MoviePropertyInfo(void)::property;
}

uint64_t mlcore::GenrePropertyName(mlcore *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&mlcore::GenrePropertyName(void)::once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&mlcore::GenrePropertyName(void)::once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::GenrePropertyName(void)::$_0 &&>>);
  }
  return mlcore::GenrePropertyName(void)::property;
}

uint64_t mlcore::TypedEntityClass<mlcore::PodcastEpisode>::sharedPointer()
{
  unint64_t v0;
  char v2;
  char **v3;
  char *v4;

  v0 = atomic_load(&mlcore::TypedEntityClass<mlcore::PodcastEpisode>::sharedPointer(void)::__once);
  if (v0 != -1)
  {
    v4 = &v2;
    v3 = &v4;
    std::__call_once(&mlcore::TypedEntityClass<mlcore::PodcastEpisode>::sharedPointer(void)::__once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::TypedEntityClass<mlcore::PodcastEpisode>::sharedPointer(void)::{lambda(void)#1} &&>>);
  }
  return mlcore::TypedEntityClass<mlcore::PodcastEpisode>::sharedPointer(void)::__sharedPointer;
}

uint64_t mlcore::ItemPropertyYear(mlcore *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&mlcore::ItemPropertyYear(void)::once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&mlcore::ItemPropertyYear(void)::once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyYear(void)::$_0 &&>>);
  }
  return mlcore::ItemPropertyYear(void)::property;
}

uint64_t mlcore::ItemPropertyBPM(mlcore *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&mlcore::ItemPropertyBPM(void)::once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&mlcore::ItemPropertyBPM(void)::once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyBPM(void)::$_0 &&>>);
  }
  return mlcore::ItemPropertyBPM(void)::property;
}

uint64_t mlcore::AlbumPropertyRepresentativeItemCollectionDescription(mlcore *this)
{
  mlcore *v1;
  uint64_t v2;
  uint64_t v4[2];

  v1 = (mlcore *)mlcore::AlbumPropertyRepresentativeItemPersistentID(this);
  v2 = mlcore::ItemPropertyCollectionDescription(v1);
  v4[0] = 0;
  v4[1] = 0;
  return mlcore::GetForeignProperty<std::string>((uint64_t)v1, v2, v4);
}

void sub_20A6A1024(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t mlcore::ItemPropertyCollectionDescription(mlcore *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&mlcore::ItemPropertyCollectionDescription(void)::once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&mlcore::ItemPropertyCollectionDescription(void)::once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyCollectionDescription(void)::$_0 &&>>);
  }
  return mlcore::ItemPropertyCollectionDescription(void)::property;
}

uint64_t mlcore::AlbumPropertyRepresentativeItemShowSortType(mlcore *this)
{
  mlcore *v1;
  uint64_t v2;
  uint64_t v4[2];

  v1 = (mlcore *)mlcore::AlbumPropertyRepresentativeItemPersistentID(this);
  v2 = mlcore::ItemPropertyShowSortType(v1);
  v4[0] = 0;
  v4[1] = 0;
  return mlcore::GetForeignProperty<long long>((uint64_t)v1, v2, v4);
}

void sub_20A6A10D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t mlcore::ItemPropertyShowSortType(mlcore *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&mlcore::ItemPropertyShowSortType(void)::once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&mlcore::ItemPropertyShowSortType(void)::once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyShowSortType(void)::$_0 &&>>);
  }
  return mlcore::ItemPropertyShowSortType(void)::property;
}

std::string *mlcore::Section::Section(std::string *this, __int128 *a2, _OWORD *a3, int a4)
{
  __int128 v7;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v7 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v7;
  }
  *(_OWORD *)&this[1].__r_.__value_.__l.__data_ = *a3;
  LODWORD(this[1].__r_.__value_.__r.__words[2]) = a4;
  return this;
}

{
  __int128 v7;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v7 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v7;
  }
  *(_OWORD *)&this[1].__r_.__value_.__l.__data_ = *a3;
  LODWORD(this[1].__r_.__value_.__r.__words[2]) = a4;
  return this;
}

uint64_t mlcore::TypedEntityClass<mlcore::Person>::databaseTable()
{
  return *(_QWORD *)mediaplatform::Singleton<mlcore::PersonTable>::sharedInstance();
}

uint64_t mediaplatform::Singleton<mlcore::PersonTable>::sharedInstance()
{
  unsigned __int8 v0;
  mlcore::PersonTable **v2;

  if ((v0 & 1) == 0
  {
    v2 = (mlcore::PersonTable **)operator new();
    _ZNSt3__115allocate_sharedB8ne180100IN6mlcore11PersonTableENS_9allocatorIS2_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(v2);
    mediaplatform::Singleton<mlcore::PersonTable>::sharedInstance(void)::_sharedInstance = (uint64_t)v2;
  }
  return mediaplatform::Singleton<mlcore::PersonTable>::sharedInstance(void)::_sharedInstance;
}

void sub_20A6A1238(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x20BD27AFC](v1, 0x20C40A4A59CD2);
  _Unwind_Resume(a1);
}

uint64_t mlcore::TypedEntityClass<mlcore::Person>::sharedPointer()
{
  unint64_t v0;
  char v2;
  char **v3;
  char *v4;

  v0 = atomic_load(&mlcore::TypedEntityClass<mlcore::Person>::sharedPointer(void)::__once);
  if (v0 != -1)
  {
    v4 = &v2;
    v3 = &v4;
    std::__call_once(&mlcore::TypedEntityClass<mlcore::Person>::sharedPointer(void)::__once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::TypedEntityClass<mlcore::Person>::sharedPointer(void)::{lambda(void)#1} &&>>);
  }
  return mlcore::TypedEntityClass<mlcore::Person>::sharedPointer(void)::__sharedPointer;
}

mlcore::PersonTable *mlcore::PersonTable::PersonTable(mlcore::PersonTable *this)
{
  std::string *v2;
  int v3;
  int v4;
  int v5;
  void *v6;
  std::string *v7;
  std::string *v8;
  std::string *v9;
  std::string *v10;
  std::string *v11;
  std::string *v12;
  int v13;
  std::string *v14;
  _BOOL4 v15;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  uint64_t v25;
  void *v26[2];
  char v27;
  void (**v28)(mediaplatform::DatabaseColumnBase *__hidden);
  std::string __p;
  int v30;
  uint64_t v31;
  void *v32[2];
  char v33;
  void *v34[2];
  char v35;
  _BYTE v36[8];
  std::string v37;
  int v38;
  char v39;
  std::string v40;
  void *v41[2];
  char v42;
  void *v43[2];
  char v44;
  _BYTE v45[8];
  std::string v46;
  int v47;
  char v48;
  std::string v49;
  void *v50[2];
  char v51;
  void *v52[2];
  char v53;
  _BYTE v54[8];
  std::string v55;
  int v56;
  char v57;
  std::string v58;
  void *v59[2];
  char v60;
  void *v61[2];
  char v62;
  _BYTE v63[8];
  std::string v64;
  int v65;
  char v66;
  std::string v67;
  void *v68[2];
  char v69;
  void *v70[2];
  char v71;
  _BYTE v72[8];
  std::string v73;
  int v74;
  char v75;
  std::string v76;
  void *v77[2];
  char v78;
  void (**v79)(mediaplatform::DatabaseColumnBase *__hidden);
  std::string v80;
  int v81;
  uint64_t v82;
  int v83;
  std::string __s;
  uint64_t (**v85)();
  std::string v86;
  int v87;
  uint64_t v88;
  uint64_t (**v89)();
  std::string v90;
  int v91;
  char v92;
  std::string v93;
  uint64_t (**v94)();
  std::string v95;
  int v96;
  char v97;
  std::string v98;
  uint64_t (**v99)();
  std::string v100;
  int v101;
  char v102;
  std::string v103;
  uint64_t (**v104)();
  std::string v105;
  int v106;
  char v107;
  std::string v108;
  uint64_t (**v109)();
  std::string v110;
  int v111;
  char v112;
  std::string v113;
  uint64_t (**v114)();
  std::string v115;
  int v116;
  uint64_t v117;
  int v118;
  std::string v119;
  uint64_t (**v120)();
  std::string v121;
  int v122;
  uint64_t v123;
  uint64_t (**v124)();
  std::string v125;
  int v126;
  char v127;
  std::string v128;
  uint64_t (**v129)();
  std::string v130;
  int v131;
  char v132;
  std::string v133;
  uint64_t (**v134)();
  std::string v135;
  int v136;
  char v137;
  std::string v138;
  uint64_t (**v139)();
  std::string v140;
  int v141;
  char v142;
  std::string v143;
  uint64_t (**v144)();
  std::string v145;
  int v146;
  char v147;
  std::string v148;
  uint64_t (**v149)();
  std::string v150;
  int v151;
  uint64_t v152;
  int v153;
  uint64_t (**v154)();
  std::string v155;
  int v156;
  uint64_t v157;
  uint64_t (**v158)();
  std::string v159;
  int v160;
  char v161;
  std::string v162;
  uint64_t (**v163)();
  std::string v164;
  int v165;
  char v166;
  std::string v167;
  uint64_t (**v168)();
  std::string v169;
  int v170;
  char v171;
  std::string v172;
  uint64_t (**v173)();
  std::string v174;
  int v175;
  char v176;
  std::string v177;
  uint64_t (**v178)();
  std::string v179;
  int v180;
  char v181;
  std::string v182;
  uint64_t (**v183)();
  std::string v184;
  int v185;
  uint64_t v186;
  uint64_t (**v187)();
  std::string v188;
  int v189;
  char v190;
  std::string v191;
  uint64_t (**v192)();
  std::string v193;
  int v194;
  char v195;
  std::string v196;
  uint64_t (**v197)();
  std::string v198;
  int v199;
  char v200;
  std::string v201;
  uint64_t (**v202)();
  std::string v203;
  int v204;
  char v205;
  std::string v206;
  uint64_t (**v207)();
  std::string v208;
  int v209;
  uint64_t v210;
  uint64_t (**v211)();
  std::string v212;
  int v213;
  char v214;
  std::string v215;
  uint64_t (**v216)();
  std::string v217;
  int v218;
  char v219;
  std::string v220;
  uint64_t (**v221)();
  std::string v222;
  int v223;
  char v224;
  std::string v225;
  void (**v226)(mediaplatform::DatabaseColumnBase *__hidden);
  std::string v227;
  int v228;
  uint64_t v229;
  uint64_t (**v230)();
  std::string v231;
  int v232;
  char v233;
  std::string v234;
  uint64_t (**v235)();
  std::string v236;
  int v237;
  char v238;
  std::string v239;
  void (**v240)(mediaplatform::DatabaseColumnBase *__hidden);
  std::string v241;
  int v242;
  uint64_t v243;
  uint64_t (**v244)();
  std::string v245;
  int v246;
  char v247;
  std::string v248;
  void (**v249)(mediaplatform::DatabaseColumnBase *__hidden);
  std::string v250;
  int v251;
  uint64_t v252;

  std::string::basic_string[abi:ne180100]<0>(&__s, "person");
  std::string::basic_string[abi:ne180100]<0>(v77, "person_pid");
  mlcore::MediaColumn<long long>::MediaColumn((uint64_t)&v79, (uint64_t)v77, 1);
  std::string::basic_string[abi:ne180100]<0>(v70, "cloud_id");
  std::string::basic_string[abi:ne180100]<0>(v68, "");
  mlcore::MediaColumn<std::string>::MediaColumn((uint64_t)v72, (uint64_t)v70, (uint64_t)v68);
  std::string::basic_string[abi:ne180100]<0>(v61, "handle");
  std::string::basic_string[abi:ne180100]<0>(v59, "");
  mlcore::MediaColumn<std::string>::MediaColumn((uint64_t)v63, (uint64_t)v61, (uint64_t)v59);
  std::string::basic_string[abi:ne180100]<0>(v52, "name");
  std::string::basic_string[abi:ne180100]<0>(v50, "");
  mlcore::MediaColumn<std::string>::MediaColumn((uint64_t)v54, (uint64_t)v52, (uint64_t)v50);
  std::string::basic_string[abi:ne180100]<0>(v43, "image_url");
  std::string::basic_string[abi:ne180100]<0>(v41, "");
  mlcore::MediaColumn<std::string>::MediaColumn((uint64_t)v45, (uint64_t)v43, (uint64_t)v41);
  std::string::basic_string[abi:ne180100]<0>(v34, "image_token");
  std::string::basic_string[abi:ne180100]<0>(v32, "");
  mlcore::MediaColumn<std::string>::MediaColumn((uint64_t)v36, (uint64_t)v34, (uint64_t)v32);
  std::string::basic_string[abi:ne180100]<0>(v26, "lightweight_profile");
  mlcore::MediaColumn<int>::MediaColumn((uint64_t)&v28, (uint64_t)v26, 0);
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v119, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
  else
    v119 = __s;
  if (SHIBYTE(v80.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v115, v80.__r_.__value_.__l.__data_, v80.__r_.__value_.__l.__size_);
  else
    v115 = v80;
  v114 = off_24C335B18;
  v117 = v82;
  v23 = v81;
  v116 = v81;
  v118 = v83;
  v109 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v73.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v110, v73.__r_.__value_.__l.__data_, v73.__r_.__value_.__l.__size_);
  else
    v110 = v73;
  v111 = v74;
  v109 = &off_24C335AB8;
  v112 = v75;
  if (SHIBYTE(v76.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v113, v76.__r_.__value_.__l.__data_, v76.__r_.__value_.__l.__size_);
  else
    v113 = v76;
  v104 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v105, v64.__r_.__value_.__l.__data_, v64.__r_.__value_.__l.__size_);
  else
    v105 = v64;
  v106 = v65;
  v104 = &off_24C335AB8;
  v107 = v66;
  if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v108, v67.__r_.__value_.__l.__data_, v67.__r_.__value_.__l.__size_);
  else
    v108 = v67;
  v99 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v100, v55.__r_.__value_.__l.__data_, v55.__r_.__value_.__l.__size_);
  else
    v100 = v55;
  v101 = v56;
  v99 = &off_24C335AB8;
  v102 = v57;
  if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v103, v58.__r_.__value_.__l.__data_, v58.__r_.__value_.__l.__size_);
  else
    v103 = v58;
  v94 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v95, v46.__r_.__value_.__l.__data_, v46.__r_.__value_.__l.__size_);
  else
    v95 = v46;
  v96 = v47;
  v94 = &off_24C335AB8;
  v97 = v48;
  if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v98, v49.__r_.__value_.__l.__data_, v49.__r_.__value_.__l.__size_);
  else
    v98 = v49;
  v89 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v90, v37.__r_.__value_.__l.__data_, v37.__r_.__value_.__l.__size_);
  else
    v90 = v37;
  v91 = v38;
  v89 = &off_24C335AB8;
  v92 = v39;
  if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v93, v40.__r_.__value_.__l.__data_, v40.__r_.__value_.__l.__size_);
  else
    v93 = v40;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v86, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  else
    v86 = __p;
  v24 = v30;
  v87 = v30;
  v85 = off_24C335AF8;
  v25 = v31;
  v88 = v31;
  *(_QWORD *)this = &off_24C330F50;
  v2 = (std::string *)((char *)this + 8);
  if (SHIBYTE(v119.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v2, v119.__r_.__value_.__l.__data_, v119.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = *(_OWORD *)&v119.__r_.__value_.__l.__data_;
    *((_QWORD *)this + 3) = *((_QWORD *)&v119.__r_.__value_.__l + 2);
  }
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 6) = 0;
  *((_QWORD *)this + 7) = 0;
  *(_QWORD *)this = &off_24C335638;
  *((_QWORD *)this + 8) = 0;
  *((_QWORD *)this + 9) = 0;
  v3 = SHIBYTE(v115.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v115.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v150, v115.__r_.__value_.__l.__data_, v115.__r_.__value_.__l.__size_);
  else
    v150 = v115;
  v149 = off_24C335B18;
  v152 = v117;
  v151 = v23;
  v153 = v118;
  v144 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v110.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v145, v110.__r_.__value_.__l.__data_, v110.__r_.__value_.__l.__size_);
  else
    v145 = v110;
  v146 = v111;
  v144 = &off_24C335AB8;
  v147 = v112;
  if (SHIBYTE(v113.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v148, v113.__r_.__value_.__l.__data_, v113.__r_.__value_.__l.__size_);
  else
    v148 = v113;
  v139 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v105.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v140, v105.__r_.__value_.__l.__data_, v105.__r_.__value_.__l.__size_);
  else
    v140 = v105;
  v141 = v106;
  v139 = &off_24C335AB8;
  v142 = v107;
  if (SHIBYTE(v108.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v143, v108.__r_.__value_.__l.__data_, v108.__r_.__value_.__l.__size_);
  else
    v143 = v108;
  v134 = (uint64_t (**)())off_24C335D90;
  v19 = v3;
  if (SHIBYTE(v100.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v135, v100.__r_.__value_.__l.__data_, v100.__r_.__value_.__l.__size_);
  else
    v135 = v100;
  v136 = v101;
  v134 = &off_24C335AB8;
  v137 = v102;
  if (SHIBYTE(v103.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v138, v103.__r_.__value_.__l.__data_, v103.__r_.__value_.__l.__size_);
  else
    v138 = v103;
  v129 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v95.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v130, v95.__r_.__value_.__l.__data_, v95.__r_.__value_.__l.__size_);
  else
    v130 = v95;
  v131 = v96;
  v129 = &off_24C335AB8;
  v132 = v97;
  if (SHIBYTE(v98.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v133, v98.__r_.__value_.__l.__data_, v98.__r_.__value_.__l.__size_);
  else
    v133 = v98;
  v124 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v90.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v125, v90.__r_.__value_.__l.__data_, v90.__r_.__value_.__l.__size_);
  else
    v125 = v90;
  v126 = v91;
  v124 = &off_24C335AB8;
  v127 = v92;
  if (SHIBYTE(v93.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v128, v93.__r_.__value_.__l.__data_, v93.__r_.__value_.__l.__size_);
  else
    v128 = v93;
  v22 = SHIBYTE(v86.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v86.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v121, v86.__r_.__value_.__l.__data_, v86.__r_.__value_.__l.__size_);
  else
    v121 = v86;
  v122 = v24;
  v120 = off_24C335AF8;
  v123 = v25;
  v178 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v145.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v179, v145.__r_.__value_.__l.__data_, v145.__r_.__value_.__l.__size_);
  else
    v179 = v145;
  v180 = v146;
  v178 = &off_24C335AB8;
  v181 = v147;
  if (SHIBYTE(v148.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v182, v148.__r_.__value_.__l.__data_, v148.__r_.__value_.__l.__size_);
  else
    v182 = v148;
  v173 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v140.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v174, v140.__r_.__value_.__l.__data_, v140.__r_.__value_.__l.__size_);
  else
    v174 = v140;
  v175 = v141;
  v173 = &off_24C335AB8;
  v176 = v142;
  if (SHIBYTE(v143.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v177, v143.__r_.__value_.__l.__data_, v143.__r_.__value_.__l.__size_);
  else
    v177 = v143;
  v168 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v135.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v169, v135.__r_.__value_.__l.__data_, v135.__r_.__value_.__l.__size_);
  else
    v169 = v135;
  v170 = v136;
  v168 = &off_24C335AB8;
  v171 = v137;
  if (SHIBYTE(v138.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v172, v138.__r_.__value_.__l.__data_, v138.__r_.__value_.__l.__size_);
  else
    v172 = v138;
  v163 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v130.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v164, v130.__r_.__value_.__l.__data_, v130.__r_.__value_.__l.__size_);
  else
    v164 = v130;
  v165 = v131;
  v163 = &off_24C335AB8;
  v166 = v132;
  if (SHIBYTE(v133.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v167, v133.__r_.__value_.__l.__data_, v133.__r_.__value_.__l.__size_);
  else
    v167 = v133;
  v158 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v125.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v159, v125.__r_.__value_.__l.__data_, v125.__r_.__value_.__l.__size_);
  else
    v159 = v125;
  v160 = v126;
  v158 = &off_24C335AB8;
  v161 = v127;
  if (SHIBYTE(v128.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v162, v128.__r_.__value_.__l.__data_, v128.__r_.__value_.__l.__size_);
  else
    v162 = v128;
  v21 = SHIBYTE(v121.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v121.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v155, v121.__r_.__value_.__l.__data_, v121.__r_.__value_.__l.__size_);
  else
    v155 = v121;
  v156 = v24;
  v154 = off_24C335AF8;
  v157 = v25;
  v202 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v174.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v203, v174.__r_.__value_.__l.__data_, v174.__r_.__value_.__l.__size_);
  else
    v203 = v174;
  v204 = v175;
  v202 = &off_24C335AB8;
  v205 = v176;
  if (SHIBYTE(v177.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v206, v177.__r_.__value_.__l.__data_, v177.__r_.__value_.__l.__size_);
  else
    v206 = v177;
  v197 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v169.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v198, v169.__r_.__value_.__l.__data_, v169.__r_.__value_.__l.__size_);
  else
    v198 = v169;
  v199 = v170;
  v197 = &off_24C335AB8;
  v200 = v171;
  if (SHIBYTE(v172.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v201, v172.__r_.__value_.__l.__data_, v172.__r_.__value_.__l.__size_);
  else
    v201 = v172;
  v192 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v164.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v193, v164.__r_.__value_.__l.__data_, v164.__r_.__value_.__l.__size_);
  else
    v193 = v164;
  v194 = v165;
  v192 = &off_24C335AB8;
  v195 = v166;
  if (SHIBYTE(v167.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v196, v167.__r_.__value_.__l.__data_, v167.__r_.__value_.__l.__size_);
  else
    v196 = v167;
  v187 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v159.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v188, v159.__r_.__value_.__l.__data_, v159.__r_.__value_.__l.__size_);
  else
    v188 = v159;
  v189 = v160;
  v187 = &off_24C335AB8;
  v190 = v161;
  if (SHIBYTE(v162.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v191, v162.__r_.__value_.__l.__data_, v162.__r_.__value_.__l.__size_);
  else
    v191 = v162;
  v183 = (uint64_t (**)())off_24C335D90;
  v20 = SHIBYTE(v155.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v155.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v184, v155.__r_.__value_.__l.__data_, v155.__r_.__value_.__l.__size_);
  else
    v184 = v155;
  v185 = v24;
  v183 = off_24C335AF8;
  v186 = v25;
  v221 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v198.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v222, v198.__r_.__value_.__l.__data_, v198.__r_.__value_.__l.__size_);
  else
    v222 = v198;
  v223 = v199;
  v221 = &off_24C335AB8;
  v224 = v200;
  if (SHIBYTE(v201.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v225, v201.__r_.__value_.__l.__data_, v201.__r_.__value_.__l.__size_);
  else
    v225 = v201;
  v216 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v193.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v217, v193.__r_.__value_.__l.__data_, v193.__r_.__value_.__l.__size_);
  else
    v217 = v193;
  v218 = v194;
  v216 = &off_24C335AB8;
  v219 = v195;
  if (SHIBYTE(v196.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v220, v196.__r_.__value_.__l.__data_, v196.__r_.__value_.__l.__size_);
  else
    v220 = v196;
  v211 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v188.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v212, v188.__r_.__value_.__l.__data_, v188.__r_.__value_.__l.__size_);
  else
    v212 = v188;
  v213 = v189;
  v211 = &off_24C335AB8;
  v214 = v190;
  if (SHIBYTE(v191.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v215, v191.__r_.__value_.__l.__data_, v191.__r_.__value_.__l.__size_);
  else
    v215 = v191;
  v207 = (uint64_t (**)())off_24C335D90;
  v18 = SHIBYTE(v184.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v184.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v208, v184.__r_.__value_.__l.__data_, v184.__r_.__value_.__l.__size_);
  else
    v208 = v184;
  v209 = v24;
  v207 = off_24C335AF8;
  v210 = v25;
  v235 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v217.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v236, v217.__r_.__value_.__l.__data_, v217.__r_.__value_.__l.__size_);
  else
    v236 = v217;
  v237 = v218;
  v235 = &off_24C335AB8;
  v238 = v219;
  if (SHIBYTE(v220.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v239, v220.__r_.__value_.__l.__data_, v220.__r_.__value_.__l.__size_);
  else
    v239 = v220;
  v230 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v212.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v231, v212.__r_.__value_.__l.__data_, v212.__r_.__value_.__l.__size_);
  else
    v231 = v212;
  v232 = v213;
  v230 = &off_24C335AB8;
  v233 = v214;
  if (SHIBYTE(v215.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v234, v215.__r_.__value_.__l.__data_, v215.__r_.__value_.__l.__size_);
  else
    v234 = v215;
  v226 = off_24C335D90;
  v17 = SHIBYTE(v208.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v208.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v227, v208.__r_.__value_.__l.__data_, v208.__r_.__value_.__l.__size_);
  else
    v227 = v208;
  v228 = v24;
  v229 = v25;
  v244 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v231.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v245, v231.__r_.__value_.__l.__data_, v231.__r_.__value_.__l.__size_);
  else
    v245 = v231;
  v246 = v232;
  v244 = &off_24C335AB8;
  v247 = v233;
  if (SHIBYTE(v234.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v248, v234.__r_.__value_.__l.__data_, v234.__r_.__value_.__l.__size_);
  else
    v248 = v234;
  v240 = off_24C335D90;
  v4 = SHIBYTE(v227.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v227.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v241, v227.__r_.__value_.__l.__data_, v227.__r_.__value_.__l.__size_);
  else
    v241 = v227;
  v242 = v24;
  v243 = v25;
  v249 = off_24C335D90;
  v5 = SHIBYTE(v241.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v241.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v250, v241.__r_.__value_.__l.__data_, v241.__r_.__value_.__l.__size_);
  else
    v250 = v241;
  v251 = v24;
  v252 = v25;
  *((_QWORD *)this + 10) = off_24C335D90;
  if (SHIBYTE(v250.__r_.__value_.__r.__words[2]) < 0)
  {
    v6 = (void *)v250.__r_.__value_.__r.__words[0];
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 88), v250.__r_.__value_.__l.__data_, v250.__r_.__value_.__l.__size_);
    *((_DWORD *)this + 28) = v24;
    *((_QWORD *)this + 10) = off_24C335AF8;
    *(_QWORD *)((char *)this + 116) = v25;
    v249 = off_24C335D90;
    operator delete(v6);
  }
  else
  {
    *(std::string *)((char *)this + 88) = v250;
    *((_DWORD *)this + 28) = v24;
    *((_QWORD *)this + 10) = off_24C335AF8;
    *(_QWORD *)((char *)this + 116) = v25;
    v249 = off_24C335D90;
  }
  *((_QWORD *)this + 16) = off_24C335D90;
  if (SHIBYTE(v245.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 136), v245.__r_.__value_.__l.__data_, v245.__r_.__value_.__l.__size_);
  else
    *(std::string *)((char *)this + 136) = v245;
  *((_DWORD *)this + 40) = v246;
  *((_QWORD *)this + 16) = &off_24C335AB8;
  *((_BYTE *)this + 164) = v247;
  v7 = (std::string *)((char *)this + 168);
  if (SHIBYTE(v248.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v7, v248.__r_.__value_.__l.__data_, v248.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = *(_OWORD *)&v248.__r_.__value_.__l.__data_;
    *((_QWORD *)this + 23) = *((_QWORD *)&v248.__r_.__value_.__l + 2);
  }
  v240 = off_24C335D90;
  if (v5 < 0)
    operator delete(v241.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v244);
  *((_QWORD *)this + 24) = off_24C335D90;
  if (SHIBYTE(v236.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 200), v236.__r_.__value_.__l.__data_, v236.__r_.__value_.__l.__size_);
  else
    *(std::string *)((char *)this + 200) = v236;
  *((_DWORD *)this + 56) = v237;
  *((_QWORD *)this + 24) = &off_24C335AB8;
  *((_BYTE *)this + 228) = v238;
  v8 = (std::string *)((char *)this + 232);
  if (SHIBYTE(v239.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v8, v239.__r_.__value_.__l.__data_, v239.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v8->__r_.__value_.__l.__data_ = *(_OWORD *)&v239.__r_.__value_.__l.__data_;
    *((_QWORD *)this + 31) = *((_QWORD *)&v239.__r_.__value_.__l + 2);
  }
  v226 = off_24C335D90;
  if (v4 < 0)
    operator delete(v227.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v230);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v235);
  *((_QWORD *)this + 32) = off_24C335D90;
  if (SHIBYTE(v222.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external((std::string *)this + 11, v222.__r_.__value_.__l.__data_, v222.__r_.__value_.__l.__size_);
  else
    *((std::string *)this + 11) = v222;
  *((_DWORD *)this + 72) = v223;
  *((_QWORD *)this + 32) = &off_24C335AB8;
  *((_BYTE *)this + 292) = v224;
  v9 = (std::string *)((char *)this + 296);
  if (SHIBYTE(v225.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v9, v225.__r_.__value_.__l.__data_, v225.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = *(_OWORD *)&v225.__r_.__value_.__l.__data_;
    *((_QWORD *)this + 39) = *((_QWORD *)&v225.__r_.__value_.__l + 2);
  }
  v207 = (uint64_t (**)())off_24C335D90;
  if (v17 < 0)
    operator delete(v208.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v211);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v216);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v221);
  *((_QWORD *)this + 40) = off_24C335D90;
  if (SHIBYTE(v203.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 328), v203.__r_.__value_.__l.__data_, v203.__r_.__value_.__l.__size_);
  else
    *(std::string *)((char *)this + 328) = v203;
  *((_DWORD *)this + 88) = v204;
  *((_QWORD *)this + 40) = &off_24C335AB8;
  *((_BYTE *)this + 356) = v205;
  v10 = (std::string *)((char *)this + 360);
  if (SHIBYTE(v206.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v10, v206.__r_.__value_.__l.__data_, v206.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v10->__r_.__value_.__l.__data_ = *(_OWORD *)&v206.__r_.__value_.__l.__data_;
    *((_QWORD *)this + 47) = *((_QWORD *)&v206.__r_.__value_.__l + 2);
  }
  v183 = (uint64_t (**)())off_24C335D90;
  if (v18 < 0)
    operator delete(v184.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v187);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v192);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v197);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v202);
  *((_QWORD *)this + 48) = off_24C335D90;
  if (SHIBYTE(v179.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 392), v179.__r_.__value_.__l.__data_, v179.__r_.__value_.__l.__size_);
  else
    *(std::string *)((char *)this + 392) = v179;
  *((_DWORD *)this + 104) = v180;
  *((_QWORD *)this + 48) = &off_24C335AB8;
  *((_BYTE *)this + 420) = v181;
  v11 = (std::string *)((char *)this + 424);
  if (SHIBYTE(v182.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v11, v182.__r_.__value_.__l.__data_, v182.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v11->__r_.__value_.__l.__data_ = *(_OWORD *)&v182.__r_.__value_.__l.__data_;
    *((_QWORD *)this + 55) = *((_QWORD *)&v182.__r_.__value_.__l + 2);
  }
  v154 = (uint64_t (**)())off_24C335D90;
  if (v20 < 0)
    operator delete(v155.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v158);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v163);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v168);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v173);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v178);
  *((_QWORD *)this + 56) = off_24C335D90;
  v12 = (std::string *)((char *)this + 456);
  v13 = SHIBYTE(v150.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v150.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v12, v150.__r_.__value_.__l.__data_, v150.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v12->__r_.__value_.__l.__data_ = *(_OWORD *)&v150.__r_.__value_.__l.__data_;
    *((_QWORD *)this + 59) = *((_QWORD *)&v150.__r_.__value_.__l + 2);
  }
  *((_DWORD *)this + 120) = v23;
  *((_QWORD *)this + 56) = off_24C335B18;
  *(_QWORD *)((char *)this + 484) = v152;
  *((_DWORD *)this + 123) = v153;
  if (v21 < 0)
    operator delete(v121.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v124);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v129);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v134);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v139);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v144);
  if (v13 < 0)
    operator delete(v150.__r_.__value_.__l.__data_);
  v85 = (uint64_t (**)())off_24C335D90;
  if (v22 < 0)
    operator delete(v86.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v89);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v94);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v99);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v104);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v109);
  v114 = (uint64_t (**)())off_24C335D90;
  if (v19 < 0)
    operator delete(v115.__r_.__value_.__l.__data_);
  if (SHIBYTE(v119.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v119.__r_.__value_.__l.__data_);
  *(_QWORD *)this = off_24C3361A0;
  *((_QWORD *)this + 62) = off_24C335D90;
  if (SHIBYTE(v80.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external((std::string *)this + 21, v80.__r_.__value_.__l.__data_, v80.__r_.__value_.__l.__size_);
  else
    *((std::string *)this + 21) = v80;
  *((_DWORD *)this + 132) = v81;
  *(_QWORD *)((char *)this + 532) = v82;
  *((_DWORD *)this + 135) = v83;
  *((_QWORD *)this + 62) = off_24C336AC0;
  std::__tuple_leaf<1ul,mlcore::MediaColumn<std::string>,false>::__tuple_leaf[abi:ne180100]<mlcore::MediaColumn<std::string>&,void>((uint64_t)this + 544, (uint64_t)v72);
  std::__tuple_leaf<2ul,mlcore::MediaColumn<std::string>,false>::__tuple_leaf[abi:ne180100]<mlcore::MediaColumn<std::string>&,void>((uint64_t)this + 608, (uint64_t)v63);
  std::__tuple_leaf<3ul,mlcore::MediaColumn<std::string>,false>::__tuple_leaf[abi:ne180100]<mlcore::MediaColumn<std::string>&,void>((uint64_t)this + 672, (uint64_t)v54);
  std::__tuple_leaf<4ul,mlcore::MediaColumn<std::string>,false>::__tuple_leaf[abi:ne180100]<mlcore::MediaColumn<std::string>&,void>((uint64_t)this + 736, (uint64_t)v45);
  std::__tuple_leaf<5ul,mlcore::MediaColumn<std::string>,false>::__tuple_leaf[abi:ne180100]<mlcore::MediaColumn<std::string>&,void>((uint64_t)this + 800, (uint64_t)v36);
  *((_QWORD *)this + 108) = off_24C335D90;
  v14 = (std::string *)((char *)this + 872);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v14, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    v15 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0;
  }
  else
  {
    v15 = 0;
    *(_OWORD *)&v14->__r_.__value_.__l.__data_ = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    *((_QWORD *)this + 111) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
  }
  *((_DWORD *)this + 224) = v30;
  *(_QWORD *)((char *)this + 900) = v31;
  *((_QWORD *)this + 108) = off_24C336AA0;
  v28 = off_24C335D90;
  if (v15)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (v27 < 0)
    operator delete(v26[0]);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)v36);
  if (v33 < 0)
    operator delete(v32[0]);
  if (v35 < 0)
    operator delete(v34[0]);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)v45);
  if (v42 < 0)
    operator delete(v41[0]);
  if (v44 < 0)
    operator delete(v43[0]);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)v54);
  if (v51 < 0)
    operator delete(v50[0]);
  if (v53 < 0)
    operator delete(v52[0]);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)v63);
  if (v60 < 0)
    operator delete(v59[0]);
  if (v62 < 0)
    operator delete(v61[0]);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)v72);
  if (v69 < 0)
    operator delete(v68[0]);
  if (v71 < 0)
    operator delete(v70[0]);
  v79 = off_24C335D90;
  if (SHIBYTE(v80.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v80.__r_.__value_.__l.__data_);
  if (v78 < 0)
    operator delete(v77[0]);
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__s.__r_.__value_.__l.__data_);
  *(_QWORD *)this = off_24C336B38;
  return this;
}

void sub_20A6A2E3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,void *__p,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,int a45,__int16 a46,char a47,char a48,void *a49,uint64_t a50,int a51,__int16 a52,char a53,char a54,char a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,void *a63)
{
  char a68;
  void *a69;
  char a72;
  char a73;
  void *a74;
  char a75;
  void *a76;
  char a77;
  char a78;
  uint64_t v78;
  void **v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;

  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(v84);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(v83);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(v82);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(v81);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(v80);
  *(_QWORD *)(v78 + 496) = off_24C335D90;
  if (*(char *)(v78 + 527) < 0)
    operator delete(*v79);
  mediaplatform::DatabaseTable<long long,std::string,std::string,std::string,std::string,std::string,int>::~DatabaseTable(v78);
  if (a40 < 0)
    operator delete(__p);
  if (a33 < 0)
    operator delete(a28);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&a55);
  if (a48 < 0)
    operator delete(a43);
  if (a54 < 0)
    operator delete(a49);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&a73);
  if (a68 < 0)
    operator delete(a63);
  if (a72 < 0)
    operator delete(a69);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&a78);
  if (a75 < 0)
    operator delete(a74);
  if (a77 < 0)
    operator delete(a76);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&STACK[0x260]);
  if (SLOBYTE(STACK[0x247]) < 0)
    operator delete((void *)STACK[0x230]);
  if (SLOBYTE(STACK[0x25F]) < 0)
    operator delete((void *)STACK[0x248]);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&STACK[0x2D0]);
  if (SLOBYTE(STACK[0x2B7]) < 0)
    operator delete((void *)STACK[0x2A0]);
  if (SLOBYTE(STACK[0x2CF]) < 0)
    operator delete((void *)STACK[0x2B8]);
  STACK[0x328] = (unint64_t)off_24C335D90;
  if (SLOBYTE(STACK[0x347]) < 0)
    operator delete((void *)STACK[0x330]);
  if (SLOBYTE(STACK[0x327]) < 0)
    operator delete((void *)STACK[0x310]);
  if (SLOBYTE(STACK[0x36F]) < 0)
    operator delete((void *)STACK[0x358]);
  _Unwind_Resume(a1);
}

void sub_20A6A3728()
{
  JUMPOUT(0x20A6A35CCLL);
}

void sub_20A6A3730()
{
  JUMPOUT(0x20A6A360CLL);
}

void sub_20A6A3738()
{
  JUMPOUT(0x20A6A361CLL);
}

void sub_20A6A3740()
{
  JUMPOUT(0x20A6A3624);
}

void sub_20A6A3748()
{
  JUMPOUT(0x20A6A3634);
}

void sub_20A6A3750()
{
  JUMPOUT(0x20A6A3644);
}

void sub_20A6A3758()
{
  JUMPOUT(0x20A6A364CLL);
}

void sub_20A6A3760()
{
  JUMPOUT(0x20A6A365CLL);
}

void sub_20A6A3768()
{
  JUMPOUT(0x20A6A366CLL);
}

void sub_20A6A3770()
{
  JUMPOUT(0x20A6A3674);
}

void sub_20A6A3778()
{
  JUMPOUT(0x20A6A3684);
}

void sub_20A6A3780()
{
  JUMPOUT(0x20A6A3694);
}

void sub_20A6A3788()
{
  JUMPOUT(0x20A6A369CLL);
}

void sub_20A6A3790()
{
  JUMPOUT(0x20A6A36ACLL);
}

void sub_20A6A3798()
{
  JUMPOUT(0x20A6A36BCLL);
}

void sub_20A6A37A0()
{
  JUMPOUT(0x20A6A36C4);
}

void sub_20A6A37A8()
{
  JUMPOUT(0x20A6A36D4);
}

void sub_20A6A37B0()
{
  JUMPOUT(0x20A6A36E4);
}

void sub_20A6A37B8()
{
  JUMPOUT(0x20A6A3700);
}

void sub_20A6A37C0()
{
  JUMPOUT(0x20A6A3710);
}

uint64_t mlcore::DatabaseModelProperty<std::string>::DatabaseModelProperty(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  __int128 v5;
  std::string *v6;
  __int128 v7;

  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_QWORD *)a1 = &off_24C339FF8;
  *(_QWORD *)(a1 + 64) = *a2;
  *(_QWORD *)(a1 + 72) = off_24C335D90;
  if (*(char *)(a3 + 31) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 80), *(const std::string::value_type **)(a3 + 8), *(_QWORD *)(a3 + 16));
  }
  else
  {
    v5 = *(_OWORD *)(a3 + 8);
    *(_QWORD *)(a1 + 96) = *(_QWORD *)(a3 + 24);
    *(_OWORD *)(a1 + 80) = v5;
  }
  *(_DWORD *)(a1 + 104) = *(_DWORD *)(a3 + 32);
  *(_QWORD *)(a1 + 72) = &off_24C335AB8;
  *(_BYTE *)(a1 + 108) = *(_BYTE *)(a3 + 36);
  v6 = (std::string *)(a1 + 112);
  if (*(char *)(a3 + 63) < 0)
  {
    std::string::__init_copy_ctor_external(v6, *(const std::string::value_type **)(a3 + 40), *(_QWORD *)(a3 + 48));
  }
  else
  {
    v7 = *(_OWORD *)(a3 + 40);
    *(_QWORD *)(a1 + 128) = *(_QWORD *)(a3 + 56);
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = v7;
  }
  *(_QWORD *)(a1 + 72) = &off_24C336A60;
  return a1;
}

void sub_20A6A38A0(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;
  uint64_t v3;

  *(_QWORD *)(v1 + 72) = v3;
  if (*(char *)(v1 + 103) < 0)
    operator delete(*v2);
  mlcore::ModelPropertyBase::~ModelPropertyBase((void **)v1);
  _Unwind_Resume(a1);
}

uint64_t mediaplatform::Singleton<mlcore::ItemVideoTable>::sharedInstance()
{
  unsigned __int8 v0;
  uint64_t *v2;

  if ((v0 & 1) == 0
  {
    v2 = (uint64_t *)operator new();
    _ZNSt3__115allocate_sharedB8ne180100IN6mlcore14ItemVideoTableENS_9allocatorIS2_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(v2);
    mediaplatform::Singleton<mlcore::ItemVideoTable>::sharedInstance(void)::_sharedInstance = (uint64_t)v2;
  }
  return mediaplatform::Singleton<mlcore::ItemVideoTable>::sharedInstance(void)::_sharedInstance;
}

void sub_20A6A3944(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x20BD27AFC](v1, 0x20C40A4A59CD2);
  _Unwind_Resume(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<0ul,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>>::DatabaseColumnTuple(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  const void *v24;
  size_t v25;
  void *v26;
  int v27;
  int v28;
  int v29;
  int v30;
  const void *v31;
  size_t v32;
  void *v33;
  const void *v34;
  size_t v35;
  void *v36;
  const void *v37;
  size_t v38;
  void *v39;
  const void *v40;
  size_t v41;
  void *v42;
  int v43;
  int v44;
  const void *v45;
  size_t v46;
  void *v47;
  int v48;
  int v49;
  const void *v50;
  size_t v51;
  void *v52;
  int v53;
  int v54;
  int v55;
  const void *v56;
  size_t v57;
  void *v58;
  const void *v59;
  size_t v60;
  void *v61;
  int v62;
  int v63;
  int v64;
  int v65;
  int v66;
  const void *v67;
  size_t v68;
  void *v69;
  int v70;
  int v71;
  std::string *v72;
  std::string *v73;
  std::string *v74;
  std::string *v75;
  std::string *v76;
  __int128 v77;
  uint64_t v78;
  int v80;
  int v81;
  int v82;
  int v83;
  int v84;
  int v85;
  int v86;
  int v87;
  int v88;
  int v89;
  int v90;
  int v91;
  int v92;
  int v94;
  int v95;
  uint64_t v96;
  int v97;
  int v98;
  uint64_t v99;
  int v100;
  uint64_t v101;
  int v102;
  uint64_t v103;
  int v104;
  uint64_t v105;
  int v106;
  int v107;
  int v108;
  uint64_t v109;
  int v110;
  int v111;
  int v112;
  std::string v113;
  int v114;
  uint64_t v115;
  uint64_t (**v116)();
  std::string v117;
  int v118;
  uint64_t v119;
  int v120;
  uint64_t (**v121)();
  std::string v122;
  int v123;
  char v124;
  void (**v125)(mediaplatform::Data *__hidden);
  size_t v126;
  size_t v127;
  const void *v128;
  char v129;
  uint64_t (**v130)();
  std::string v131;
  int v132;
  uint64_t v133;
  uint64_t (**v134)();
  std::string v135;
  int v136;
  uint64_t v137;
  uint64_t (**v138)();
  std::string v139;
  int v140;
  uint64_t v141;
  uint64_t (**v142)();
  std::string v143;
  int v144;
  uint64_t v145;
  uint64_t (**v146)();
  std::string v147;
  int v148;
  uint64_t v149;
  int v150;
  uint64_t (**v151)();
  std::string v152;
  int v153;
  uint64_t v154;
  int v155;
  uint64_t (**v156)();
  std::string v157;
  int v158;
  uint64_t v159;
  uint64_t (**v160)();
  std::string v161;
  int v162;
  char v163;
  void (**v164)(mediaplatform::Data *__hidden);
  size_t v165;
  size_t v166;
  const void *v167;
  char v168;
  uint64_t (**v169)();
  std::string v170;
  int v171;
  char v172;
  std::string v173;
  uint64_t (**v174)();
  std::string v175;
  int v176;
  char v177;
  std::string v178;
  uint64_t (**v179)();
  std::string __s;
  int v181;
  char v182;
  std::string v183;
  uint64_t (**v184)();
  std::string v185;
  int v186;
  char v187;
  std::string v188;
  uint64_t (**v189)();
  std::string v190;
  int v191;
  uint64_t v192;
  uint64_t (**v193)();
  std::string v194;
  int v195;
  uint64_t v196;
  int v197;
  uint64_t (**v198)();
  std::string v199;
  int v200;
  char v201;
  void (**v202)(mediaplatform::Data *__hidden);
  size_t v203;
  size_t v204;
  const void *v205;
  char v206;
  uint64_t (**v207)();
  std::string v208;
  int v209;
  uint64_t v210;
  uint64_t (**v211)();
  std::string v212;
  int v213;
  uint64_t v214;
  uint64_t (**v215)();
  std::string v216;
  int v217;
  uint64_t v218;
  uint64_t (**v219)();
  std::string v220;
  int v221;
  uint64_t v222;
  uint64_t (**v223)();
  std::string v224;
  int v225;
  uint64_t v226;
  int v227;
  uint64_t (**v228)();
  std::string v229;
  int v230;
  uint64_t v231;
  int v232;
  uint64_t (**v233)();
  std::string v234;
  int v235;
  uint64_t v236;
  uint64_t (**v237)();
  std::string v238;
  int v239;
  char v240;
  void (**v241)(mediaplatform::Data *__hidden);
  size_t v242;
  size_t v243;
  const void *v244;
  char v245;
  uint64_t (**v246)();
  std::string v247;
  int v248;
  char v249;
  std::string v250;
  uint64_t (**v251)();
  std::string v252;
  int v253;
  char v254;
  std::string v255;
  uint64_t (**v256)();
  std::string v257;
  int v258;
  char v259;
  std::string v260;
  uint64_t (**v261)();
  std::string v262;
  int v263;
  uint64_t v264;
  uint64_t (**v265)();
  std::string v266;
  int v267;
  uint64_t v268;
  int v269;
  uint64_t (**v270)();
  std::string v271;
  int v272;
  char v273;
  void (**v274)(mediaplatform::Data *__hidden);
  size_t v275;
  size_t v276;
  const void *v277;
  char v278;
  uint64_t (**v279)();
  std::string v280;
  int v281;
  uint64_t v282;
  uint64_t (**v283)();
  std::string v284;
  int v285;
  uint64_t v286;
  uint64_t (**v287)();
  std::string v288;
  int v289;
  uint64_t v290;
  uint64_t (**v291)();
  std::string v292;
  int v293;
  uint64_t v294;
  uint64_t (**v295)();
  std::string v296;
  int v297;
  uint64_t v298;
  int v299;
  uint64_t (**v300)();
  std::string v301;
  int v302;
  uint64_t v303;
  int v304;
  uint64_t (**v305)();
  std::string v306;
  int v307;
  uint64_t v308;
  uint64_t (**v309)();
  std::string v310;
  int v311;
  char v312;
  void (**v313)(mediaplatform::Data *__hidden);
  size_t v314;
  size_t v315;
  const void *v316;
  char v317;
  uint64_t (**v318)();
  std::string v319;
  int v320;
  char v321;
  std::string v322;
  uint64_t (**v323)();
  std::string v324;
  int v325;
  char v326;
  std::string v327;
  uint64_t (**v328)();
  std::string v329;
  int v330;
  uint64_t v331;
  uint64_t (**v332)();
  std::string v333;
  int v334;
  uint64_t v335;
  int v336;
  uint64_t (**v337)();
  std::string v338;
  int v339;
  char v340;
  void (**v341)(mediaplatform::Data *__hidden);
  size_t v342;
  size_t v343;
  const void *v344;
  char v345;
  uint64_t (**v346)();
  std::string v347;
  int v348;
  uint64_t v349;
  uint64_t (**v350)();
  std::string v351;
  int v352;
  uint64_t v353;
  uint64_t (**v354)();
  std::string v355;
  int v356;
  uint64_t v357;
  uint64_t (**v358)();
  std::string v359;
  int v360;
  uint64_t v361;
  uint64_t (**v362)();
  std::string v363;
  int v364;
  uint64_t v365;
  int v366;
  uint64_t (**v367)();
  std::string v368;
  int v369;
  uint64_t v370;
  int v371;
  uint64_t (**v372)();
  std::string v373;
  int v374;
  uint64_t v375;
  uint64_t (**v376)();
  std::string v377;
  int v378;
  char v379;
  void (**v380)(mediaplatform::Data *__hidden);
  size_t v381;
  size_t v382;
  const void *v383;
  char v384;
  uint64_t (**v385)();
  std::string v386;
  int v387;
  char v388;
  std::string v389;
  uint64_t (**v390)();
  std::string __p;
  int v392;
  uint64_t v393;
  uint64_t (**v394)();
  std::string v395;
  int v396;
  uint64_t v397;
  int v398;
  uint64_t (**v399)();
  std::string v400;
  int v401;
  char v402;
  void (**v403)(mediaplatform::Data *__hidden);
  size_t v404;
  size_t v405;
  void *v406;
  char v407;
  uint64_t (**v408)();
  std::string v409;
  int v410;
  uint64_t v411;
  uint64_t (**v412)();
  std::string v413;
  int v414;
  uint64_t v415;
  uint64_t (**v416)();
  std::string v417;
  int v418;
  uint64_t v419;
  uint64_t (**v420)();
  std::string v421;
  int v422;
  uint64_t v423;
  uint64_t (**v424)();
  std::string v425;
  int v426;
  uint64_t v427;
  int v428;
  uint64_t (**v429)();
  std::string v430;
  int v431;
  uint64_t v432;
  int v433;
  uint64_t (**v434)();
  std::string v435;
  int v436;
  uint64_t v437;
  uint64_t (**v438)();
  std::string v439;
  int v440;
  char v441;
  void (**v442)(mediaplatform::Data *__hidden);
  size_t v443;
  size_t v444;
  void *v445;
  char v446;

  v184 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a3 + 31) < 0)
    std::string::__init_copy_ctor_external(&v185, *(const std::string::value_type **)(a3 + 8), *(_QWORD *)(a3 + 16));
  else
    v185 = *(std::string *)(a3 + 8);
  v186 = *(_DWORD *)(a3 + 32);
  v184 = &off_24C335AB8;
  v187 = *(_BYTE *)(a3 + 36);
  if (*(char *)(a3 + 63) < 0)
    std::string::__init_copy_ctor_external(&v188, *(const std::string::value_type **)(a3 + 40), *(_QWORD *)(a3 + 48));
  else
    v188 = *(std::string *)(a3 + 40);
  v179 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a4 + 31) < 0)
    std::string::__init_copy_ctor_external(&__s, *(const std::string::value_type **)(a4 + 8), *(_QWORD *)(a4 + 16));
  else
    __s = *(std::string *)(a4 + 8);
  v181 = *(_DWORD *)(a4 + 32);
  v179 = &off_24C335AB8;
  v182 = *(_BYTE *)(a4 + 36);
  if (*(char *)(a4 + 63) < 0)
    std::string::__init_copy_ctor_external(&v183, *(const std::string::value_type **)(a4 + 40), *(_QWORD *)(a4 + 48));
  else
    v183 = *(std::string *)(a4 + 40);
  v174 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a5 + 31) < 0)
    std::string::__init_copy_ctor_external(&v175, *(const std::string::value_type **)(a5 + 8), *(_QWORD *)(a5 + 16));
  else
    v175 = *(std::string *)(a5 + 8);
  v176 = *(_DWORD *)(a5 + 32);
  v174 = &off_24C335AB8;
  v177 = *(_BYTE *)(a5 + 36);
  if (*(char *)(a5 + 63) < 0)
    std::string::__init_copy_ctor_external(&v178, *(const std::string::value_type **)(a5 + 40), *(_QWORD *)(a5 + 48));
  else
    v178 = *(std::string *)(a5 + 40);
  v169 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a6 + 31) < 0)
    std::string::__init_copy_ctor_external(&v170, *(const std::string::value_type **)(a6 + 8), *(_QWORD *)(a6 + 16));
  else
    v170 = *(std::string *)(a6 + 8);
  v171 = *(_DWORD *)(a6 + 32);
  v169 = &off_24C335AB8;
  v172 = *(_BYTE *)(a6 + 36);
  if (*(char *)(a6 + 63) < 0)
    std::string::__init_copy_ctor_external(&v173, *(const std::string::value_type **)(a6 + 40), *(_QWORD *)(a6 + 48));
  else
    v173 = *(std::string *)(a6 + 40);
  v160 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a7 + 31) < 0)
    std::string::__init_copy_ctor_external(&v161, *(const std::string::value_type **)(a7 + 8), *(_QWORD *)(a7 + 16));
  else
    v161 = *(std::string *)(a7 + 8);
  v162 = *(_DWORD *)(a7 + 32);
  v160 = &off_24C335A98;
  v163 = *(_BYTE *)(a7 + 36);
  v24 = *(const void **)(a7 + 64);
  v25 = *(_QWORD *)(a7 + 48);
  v164 = &off_24C331510;
  v165 = v25;
  v166 = v25;
  if (v25)
    v26 = (void *)operator new[]();
  else
    v26 = 0;
  v167 = v26;
  v168 = 1;
  if (v24)
    memcpy(v26, v24, v25);
  else
    bzero(v26, v25);
  if (*(char *)(a8 + 31) < 0)
    std::string::__init_copy_ctor_external(&v157, *(const std::string::value_type **)(a8 + 8), *(_QWORD *)(a8 + 16));
  else
    v157 = *(std::string *)(a8 + 8);
  v111 = *(_DWORD *)(a8 + 32);
  v158 = v111;
  v156 = off_24C335AF8;
  v109 = *(_QWORD *)(a8 + 36);
  v159 = v109;
  if (*(char *)(a9 + 31) < 0)
    std::string::__init_copy_ctor_external(&v152, *(const std::string::value_type **)(a9 + 8), *(_QWORD *)(a9 + 16));
  else
    v152 = *(std::string *)(a9 + 8);
  v27 = *(_DWORD *)(a9 + 32);
  v151 = off_24C335B18;
  v154 = *(_QWORD *)(a9 + 36);
  v28 = *(_DWORD *)(a9 + 44);
  v108 = v27;
  v153 = v27;
  v155 = v28;
  if (*(char *)(a10 + 31) < 0)
    std::string::__init_copy_ctor_external(&v147, *(const std::string::value_type **)(a10 + 8), *(_QWORD *)(a10 + 16));
  else
    v147 = *(std::string *)(a10 + 8);
  v29 = *(_DWORD *)(a10 + 32);
  v146 = off_24C335B18;
  v149 = *(_QWORD *)(a10 + 36);
  v30 = *(_DWORD *)(a10 + 44);
  v107 = v29;
  v148 = v29;
  v150 = v30;
  if (*(char *)(a11 + 31) < 0)
    std::string::__init_copy_ctor_external(&v143, *(const std::string::value_type **)(a11 + 8), *(_QWORD *)(a11 + 16));
  else
    v143 = *(std::string *)(a11 + 8);
  v106 = *(_DWORD *)(a11 + 32);
  v144 = v106;
  v142 = off_24C335AF8;
  v105 = *(_QWORD *)(a11 + 36);
  v145 = v105;
  if (*(char *)(a12 + 31) < 0)
    std::string::__init_copy_ctor_external(&v139, *(const std::string::value_type **)(a12 + 8), *(_QWORD *)(a12 + 16));
  else
    v139 = *(std::string *)(a12 + 8);
  v104 = *(_DWORD *)(a12 + 32);
  v140 = v104;
  v138 = off_24C335AF8;
  v103 = *(_QWORD *)(a12 + 36);
  v141 = v103;
  if (*(char *)(a13 + 31) < 0)
    std::string::__init_copy_ctor_external(&v135, *(const std::string::value_type **)(a13 + 8), *(_QWORD *)(a13 + 16));
  else
    v135 = *(std::string *)(a13 + 8);
  v102 = *(_DWORD *)(a13 + 32);
  v136 = v102;
  v134 = off_24C335AF8;
  v101 = *(_QWORD *)(a13 + 36);
  v137 = v101;
  if (*(char *)(a14 + 31) < 0)
    std::string::__init_copy_ctor_external(&v131, *(const std::string::value_type **)(a14 + 8), *(_QWORD *)(a14 + 16));
  else
    v131 = *(std::string *)(a14 + 8);
  v100 = *(_DWORD *)(a14 + 32);
  v132 = v100;
  v130 = off_24C335AF8;
  v99 = *(_QWORD *)(a14 + 36);
  v133 = v99;
  v121 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a15 + 31) < 0)
    std::string::__init_copy_ctor_external(&v122, *(const std::string::value_type **)(a15 + 8), *(_QWORD *)(a15 + 16));
  else
    v122 = *(std::string *)(a15 + 8);
  v123 = *(_DWORD *)(a15 + 32);
  v121 = &off_24C335A98;
  v124 = *(_BYTE *)(a15 + 36);
  v31 = *(const void **)(a15 + 64);
  v32 = *(_QWORD *)(a15 + 48);
  v125 = &off_24C331510;
  v126 = v32;
  v127 = v32;
  if (v32)
    v33 = (void *)operator new[]();
  else
    v33 = 0;
  v128 = v33;
  v129 = 1;
  if (v31)
    memcpy(v33, v31, v32);
  else
    bzero(v33, v32);
  if (*(char *)(a16 + 31) < 0)
    std::string::__init_copy_ctor_external(&v117, *(const std::string::value_type **)(a16 + 8), *(_QWORD *)(a16 + 16));
  else
    v117 = *(std::string *)(a16 + 8);
  v98 = *(_DWORD *)(a16 + 32);
  v118 = v98;
  v116 = off_24C335B18;
  v119 = *(_QWORD *)(a16 + 36);
  v120 = *(_DWORD *)(a16 + 44);
  if (*(char *)(a17 + 31) < 0)
    std::string::__init_copy_ctor_external(&v113, *(const std::string::value_type **)(a17 + 8), *(_QWORD *)(a17 + 16));
  else
    v113 = *(std::string *)(a17 + 8);
  v97 = *(_DWORD *)(a17 + 32);
  v114 = v97;
  v96 = *(_QWORD *)(a17 + 36);
  v115 = v96;
  v256 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v257, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
  else
    v257 = __s;
  v258 = v181;
  v256 = &off_24C335AB8;
  v259 = v182;
  if (SHIBYTE(v183.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v260, v183.__r_.__value_.__l.__data_, v183.__r_.__value_.__l.__size_);
  else
    v260 = v183;
  v251 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v175.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v252, v175.__r_.__value_.__l.__data_, v175.__r_.__value_.__l.__size_);
  else
    v252 = v175;
  v253 = v176;
  v251 = &off_24C335AB8;
  v254 = v177;
  if (SHIBYTE(v178.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v255, v178.__r_.__value_.__l.__data_, v178.__r_.__value_.__l.__size_);
  else
    v255 = v178;
  v246 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v170.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v247, v170.__r_.__value_.__l.__data_, v170.__r_.__value_.__l.__size_);
  else
    v247 = v170;
  v248 = v171;
  v246 = &off_24C335AB8;
  v249 = v172;
  if (SHIBYTE(v173.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v250, v173.__r_.__value_.__l.__data_, v173.__r_.__value_.__l.__size_);
  else
    v250 = v173;
  v237 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v161.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v238, v161.__r_.__value_.__l.__data_, v161.__r_.__value_.__l.__size_);
  else
    v238 = v161;
  v239 = v162;
  v237 = &off_24C335A98;
  v240 = v163;
  v34 = v167;
  v35 = v165;
  v241 = &off_24C331510;
  v242 = v165;
  v243 = v165;
  if (v165)
    v36 = (void *)operator new[]();
  else
    v36 = 0;
  v244 = v36;
  v245 = 1;
  if (v34)
    memcpy(v36, v34, v35);
  else
    bzero(v36, v35);
  if (SHIBYTE(v157.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v234, v157.__r_.__value_.__l.__data_, v157.__r_.__value_.__l.__size_);
  else
    v234 = v157;
  v235 = v111;
  v233 = off_24C335AF8;
  v236 = v109;
  if (SHIBYTE(v152.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v229, v152.__r_.__value_.__l.__data_, v152.__r_.__value_.__l.__size_);
  else
    v229 = v152;
  v228 = off_24C335B18;
  v231 = v154;
  v230 = v108;
  v232 = v155;
  if (SHIBYTE(v147.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v224, v147.__r_.__value_.__l.__data_, v147.__r_.__value_.__l.__size_);
  else
    v224 = v147;
  v223 = off_24C335B18;
  v226 = v149;
  v225 = v107;
  v227 = v150;
  if (SHIBYTE(v143.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v220, v143.__r_.__value_.__l.__data_, v143.__r_.__value_.__l.__size_);
  else
    v220 = v143;
  v221 = v106;
  v219 = off_24C335AF8;
  v222 = v105;
  if (SHIBYTE(v139.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v216, v139.__r_.__value_.__l.__data_, v139.__r_.__value_.__l.__size_);
  else
    v216 = v139;
  v217 = v104;
  v215 = off_24C335AF8;
  v218 = v103;
  if (SHIBYTE(v135.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v212, v135.__r_.__value_.__l.__data_, v135.__r_.__value_.__l.__size_);
  else
    v212 = v135;
  v213 = v102;
  v211 = off_24C335AF8;
  v214 = v101;
  if (SHIBYTE(v131.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v208, v131.__r_.__value_.__l.__data_, v131.__r_.__value_.__l.__size_);
  else
    v208 = v131;
  v209 = v100;
  v207 = off_24C335AF8;
  v210 = v99;
  v198 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v122.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v199, v122.__r_.__value_.__l.__data_, v122.__r_.__value_.__l.__size_);
  else
    v199 = v122;
  v200 = v123;
  v198 = &off_24C335A98;
  v201 = v124;
  v37 = v128;
  v38 = v126;
  v202 = &off_24C331510;
  v203 = v126;
  v204 = v126;
  if (v126)
    v39 = (void *)operator new[]();
  else
    v39 = 0;
  v205 = v39;
  v206 = 1;
  if (v37)
    memcpy(v39, v37, v38);
  else
    bzero(v39, v38);
  if (SHIBYTE(v117.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v194, v117.__r_.__value_.__l.__data_, v117.__r_.__value_.__l.__size_);
  else
    v194 = v117;
  v193 = off_24C335B18;
  v196 = v119;
  v195 = v98;
  v197 = v120;
  if (SHIBYTE(v113.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v190, v113.__r_.__value_.__l.__data_, v113.__r_.__value_.__l.__size_);
  else
    v190 = v113;
  v191 = v97;
  v189 = off_24C335AF8;
  v192 = v96;
  v323 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v252.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v324, v252.__r_.__value_.__l.__data_, v252.__r_.__value_.__l.__size_);
  else
    v324 = v252;
  v325 = v253;
  v323 = &off_24C335AB8;
  v326 = v254;
  if (SHIBYTE(v255.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v327, v255.__r_.__value_.__l.__data_, v255.__r_.__value_.__l.__size_);
  else
    v327 = v255;
  v318 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v247.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v319, v247.__r_.__value_.__l.__data_, v247.__r_.__value_.__l.__size_);
  else
    v319 = v247;
  v320 = v248;
  v318 = &off_24C335AB8;
  v321 = v249;
  if (SHIBYTE(v250.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v322, v250.__r_.__value_.__l.__data_, v250.__r_.__value_.__l.__size_);
  else
    v322 = v250;
  v309 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v238.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v310, v238.__r_.__value_.__l.__data_, v238.__r_.__value_.__l.__size_);
  else
    v310 = v238;
  v311 = v239;
  v309 = &off_24C335A98;
  v312 = v240;
  v40 = v244;
  v41 = v242;
  v313 = &off_24C331510;
  v314 = v242;
  v315 = v242;
  if (v242)
    v42 = (void *)operator new[]();
  else
    v42 = 0;
  v316 = v42;
  v317 = 1;
  if (v40)
    memcpy(v42, v40, v41);
  else
    bzero(v42, v41);
  if (SHIBYTE(v234.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v306, v234.__r_.__value_.__l.__data_, v234.__r_.__value_.__l.__size_);
  else
    v306 = v234;
  v307 = v111;
  v305 = off_24C335AF8;
  v308 = v109;
  if (SHIBYTE(v229.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v301, v229.__r_.__value_.__l.__data_, v229.__r_.__value_.__l.__size_);
  else
    v301 = v229;
  v300 = off_24C335B18;
  v303 = v231;
  v302 = v108;
  v304 = v232;
  if (SHIBYTE(v224.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v296, v224.__r_.__value_.__l.__data_, v224.__r_.__value_.__l.__size_);
  else
    v296 = v224;
  v295 = off_24C335B18;
  v298 = v226;
  v297 = v107;
  v299 = v227;
  if (SHIBYTE(v220.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v292, v220.__r_.__value_.__l.__data_, v220.__r_.__value_.__l.__size_);
  else
    v292 = v220;
  v293 = v106;
  v291 = off_24C335AF8;
  v294 = v105;
  v43 = SHIBYTE(v216.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v216.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v288, v216.__r_.__value_.__l.__data_, v216.__r_.__value_.__l.__size_);
  else
    v288 = v216;
  v289 = v104;
  v287 = off_24C335AF8;
  v290 = v103;
  v283 = (uint64_t (**)())off_24C335D90;
  v44 = SHIBYTE(v212.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v212.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v284, v212.__r_.__value_.__l.__data_, v212.__r_.__value_.__l.__size_);
  else
    v284 = v212;
  v285 = v102;
  v283 = off_24C335AF8;
  v286 = v101;
  v279 = (uint64_t (**)())off_24C335D90;
  v92 = SHIBYTE(v208.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v208.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v280, v208.__r_.__value_.__l.__data_, v208.__r_.__value_.__l.__size_);
  else
    v280 = v208;
  v281 = v100;
  v279 = off_24C335AF8;
  v282 = v99;
  v270 = (uint64_t (**)())off_24C335D90;
  v91 = v43;
  v90 = v44;
  if (SHIBYTE(v199.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v271, v199.__r_.__value_.__l.__data_, v199.__r_.__value_.__l.__size_);
  else
    v271 = v199;
  v272 = v200;
  v270 = &off_24C335A98;
  v273 = v201;
  v45 = v205;
  v46 = v203;
  v274 = &off_24C331510;
  v275 = v203;
  v276 = v203;
  if (v203)
    v47 = (void *)operator new[]();
  else
    v47 = 0;
  v277 = v47;
  v278 = 1;
  if (v45)
    memcpy(v47, v45, v46);
  else
    bzero(v47, v46);
  v265 = (uint64_t (**)())off_24C335D90;
  v48 = SHIBYTE(v194.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v194.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v266, v194.__r_.__value_.__l.__data_, v194.__r_.__value_.__l.__size_);
  else
    v266 = v194;
  v265 = off_24C335B18;
  v268 = v196;
  v267 = v98;
  v269 = v197;
  v261 = (uint64_t (**)())off_24C335D90;
  v49 = SHIBYTE(v190.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v190.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v262, v190.__r_.__value_.__l.__data_, v190.__r_.__value_.__l.__size_);
  else
    v262 = v190;
  v263 = v97;
  v261 = off_24C335AF8;
  v264 = v96;
  v385 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v319.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v386, v319.__r_.__value_.__l.__data_, v319.__r_.__value_.__l.__size_);
  else
    v386 = v319;
  v387 = v320;
  v385 = &off_24C335AB8;
  v388 = v321;
  if (SHIBYTE(v322.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v389, v322.__r_.__value_.__l.__data_, v322.__r_.__value_.__l.__size_);
  else
    v389 = v322;
  v376 = (uint64_t (**)())off_24C335D90;
  v89 = v48;
  v88 = v49;
  if (SHIBYTE(v310.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v377, v310.__r_.__value_.__l.__data_, v310.__r_.__value_.__l.__size_);
  else
    v377 = v310;
  v378 = v311;
  v376 = &off_24C335A98;
  v379 = v312;
  v50 = v316;
  v51 = v314;
  v380 = &off_24C331510;
  v381 = v314;
  v382 = v314;
  if (v314)
    v52 = (void *)operator new[]();
  else
    v52 = 0;
  v383 = v52;
  v384 = 1;
  if (v50)
    memcpy(v52, v50, v51);
  else
    bzero(v52, v51);
  v372 = (uint64_t (**)())off_24C335D90;
  v53 = SHIBYTE(v306.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v306.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v373, v306.__r_.__value_.__l.__data_, v306.__r_.__value_.__l.__size_);
  else
    v373 = v306;
  v374 = v111;
  v372 = off_24C335AF8;
  v375 = v109;
  v367 = (uint64_t (**)())off_24C335D90;
  v54 = SHIBYTE(v301.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v301.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v368, v301.__r_.__value_.__l.__data_, v301.__r_.__value_.__l.__size_);
  else
    v368 = v301;
  v367 = off_24C335B18;
  v370 = v303;
  v369 = v108;
  v371 = v304;
  v362 = (uint64_t (**)())off_24C335D90;
  v87 = SHIBYTE(v296.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v296.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v363, v296.__r_.__value_.__l.__data_, v296.__r_.__value_.__l.__size_);
  else
    v363 = v296;
  v362 = off_24C335B18;
  v365 = v298;
  v364 = v107;
  v366 = v299;
  v358 = (uint64_t (**)())off_24C335D90;
  v86 = SHIBYTE(v292.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v292.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v359, v292.__r_.__value_.__l.__data_, v292.__r_.__value_.__l.__size_);
  else
    v359 = v292;
  v360 = v106;
  v358 = off_24C335AF8;
  v361 = v105;
  v354 = (uint64_t (**)())off_24C335D90;
  v84 = SHIBYTE(v288.__r_.__value_.__r.__words[2]);
  v85 = v54;
  if (SHIBYTE(v288.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v355, v288.__r_.__value_.__l.__data_, v288.__r_.__value_.__l.__size_);
  else
    v355 = v288;
  v356 = v104;
  v354 = off_24C335AF8;
  v357 = v103;
  v350 = (uint64_t (**)())off_24C335D90;
  v83 = SHIBYTE(v284.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v284.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v351, v284.__r_.__value_.__l.__data_, v284.__r_.__value_.__l.__size_);
  else
    v351 = v284;
  v352 = v102;
  v350 = off_24C335AF8;
  v353 = v101;
  v346 = (uint64_t (**)())off_24C335D90;
  v55 = SHIBYTE(v280.__r_.__value_.__r.__words[2]);
  v82 = v53;
  if (SHIBYTE(v280.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v347, v280.__r_.__value_.__l.__data_, v280.__r_.__value_.__l.__size_);
  else
    v347 = v280;
  v348 = v100;
  v346 = off_24C335AF8;
  v349 = v99;
  v337 = (uint64_t (**)())off_24C335D90;
  v81 = v55;
  if (SHIBYTE(v271.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v338, v271.__r_.__value_.__l.__data_, v271.__r_.__value_.__l.__size_);
  else
    v338 = v271;
  v339 = v272;
  v337 = &off_24C335A98;
  v340 = v273;
  v56 = v277;
  v57 = v275;
  v341 = &off_24C331510;
  v342 = v275;
  v343 = v275;
  if (v275)
    v58 = (void *)operator new[]();
  else
    v58 = 0;
  v344 = v58;
  v345 = 1;
  if (v56)
    memcpy(v58, v56, v57);
  else
    bzero(v58, v57);
  v332 = (uint64_t (**)())off_24C335D90;
  v94 = SHIBYTE(v266.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v266.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v333, v266.__r_.__value_.__l.__data_, v266.__r_.__value_.__l.__size_);
  else
    v333 = v266;
  v332 = off_24C335B18;
  v335 = v268;
  v334 = v98;
  v336 = v269;
  v328 = (uint64_t (**)())off_24C335D90;
  v95 = SHIBYTE(v262.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v262.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v329, v262.__r_.__value_.__l.__data_, v262.__r_.__value_.__l.__size_);
  else
    v329 = v262;
  v330 = v97;
  v328 = off_24C335AF8;
  v331 = v96;
  v438 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v377.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v439, v377.__r_.__value_.__l.__data_, v377.__r_.__value_.__l.__size_);
  else
    v439 = v377;
  v440 = v378;
  v438 = &off_24C335A98;
  v441 = v379;
  v59 = v383;
  v60 = v381;
  v442 = &off_24C331510;
  v443 = v381;
  v444 = v381;
  if (v381)
    v61 = (void *)operator new[]();
  else
    v61 = 0;
  v445 = v61;
  v446 = 1;
  if (v59)
    memcpy(v61, v59, v60);
  else
    bzero(v61, v60);
  v434 = (uint64_t (**)())off_24C335D90;
  v62 = SHIBYTE(v373.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v373.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v435, v373.__r_.__value_.__l.__data_, v373.__r_.__value_.__l.__size_);
  else
    v435 = v373;
  v436 = v111;
  v434 = off_24C335AF8;
  v437 = v109;
  v429 = (uint64_t (**)())off_24C335D90;
  v112 = SHIBYTE(v368.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v368.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v430, v368.__r_.__value_.__l.__data_, v368.__r_.__value_.__l.__size_);
  else
    v430 = v368;
  v429 = off_24C335B18;
  v432 = v370;
  v431 = v108;
  v433 = v371;
  v424 = (uint64_t (**)())off_24C335D90;
  v110 = SHIBYTE(v363.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v363.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v425, v363.__r_.__value_.__l.__data_, v363.__r_.__value_.__l.__size_);
  else
    v425 = v363;
  v424 = off_24C335B18;
  v427 = v365;
  v426 = v107;
  v428 = v366;
  v420 = (uint64_t (**)())off_24C335D90;
  v63 = SHIBYTE(v359.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v359.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v421, v359.__r_.__value_.__l.__data_, v359.__r_.__value_.__l.__size_);
  else
    v421 = v359;
  v422 = v106;
  v420 = off_24C335AF8;
  v423 = v105;
  v416 = (uint64_t (**)())off_24C335D90;
  v64 = SHIBYTE(v355.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v355.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v417, v355.__r_.__value_.__l.__data_, v355.__r_.__value_.__l.__size_);
  else
    v417 = v355;
  v418 = v104;
  v416 = off_24C335AF8;
  v419 = v103;
  v412 = (uint64_t (**)())off_24C335D90;
  v65 = SHIBYTE(v351.__r_.__value_.__r.__words[2]);
  v80 = v62;
  if (SHIBYTE(v351.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v413, v351.__r_.__value_.__l.__data_, v351.__r_.__value_.__l.__size_);
  else
    v413 = v351;
  v414 = v102;
  v412 = off_24C335AF8;
  v415 = v101;
  v408 = (uint64_t (**)())off_24C335D90;
  v66 = SHIBYTE(v347.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v347.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v409, v347.__r_.__value_.__l.__data_, v347.__r_.__value_.__l.__size_);
  else
    v409 = v347;
  v410 = v100;
  v408 = off_24C335AF8;
  v411 = v99;
  v399 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v338.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v400, v338.__r_.__value_.__l.__data_, v338.__r_.__value_.__l.__size_);
  else
    v400 = v338;
  v401 = v339;
  v399 = &off_24C335A98;
  v402 = v340;
  v67 = v344;
  v68 = v342;
  v403 = &off_24C331510;
  v404 = v342;
  v405 = v342;
  if (v342)
    v69 = (void *)operator new[]();
  else
    v69 = 0;
  v406 = v69;
  v407 = 1;
  if (v67)
    memcpy(v69, v67, v68);
  else
    bzero(v69, v68);
  v394 = (uint64_t (**)())off_24C335D90;
  v70 = SHIBYTE(v333.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v333.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v395, v333.__r_.__value_.__l.__data_, v333.__r_.__value_.__l.__size_);
  else
    v395 = v333;
  v394 = off_24C335B18;
  v397 = v335;
  v396 = v98;
  v398 = v336;
  v390 = (uint64_t (**)())off_24C335D90;
  v71 = SHIBYTE(v329.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v329.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&__p, v329.__r_.__value_.__l.__data_, v329.__r_.__value_.__l.__size_);
  else
    __p = v329;
  v392 = v97;
  v390 = off_24C335AF8;
  v393 = v96;
  mediaplatform::DatabaseColumnTuple<5ul,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>>::DatabaseColumnTuple(a1, (uint64_t)&v438, (uint64_t)&v434, (uint64_t)&v429, (uint64_t)&v424, (uint64_t)&v420, (uint64_t)&v416, (uint64_t)&v412, (uint64_t)&v408, (uint64_t)&v399, (uint64_t)&v394, (uint64_t)&v390);
  v390 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v394 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v395.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v395.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<mediaplatform::Data>::~DatabaseColumn((uint64_t)&v399);
  v408 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v409.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v409.__r_.__value_.__l.__data_);
  v412 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v413.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v413.__r_.__value_.__l.__data_);
  v416 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v417.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v417.__r_.__value_.__l.__data_);
  v420 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v421.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v421.__r_.__value_.__l.__data_);
  v424 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v425.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v425.__r_.__value_.__l.__data_);
  v429 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v430.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v430.__r_.__value_.__l.__data_);
  v434 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v435.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v435.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<mediaplatform::Data>::~DatabaseColumn((uint64_t)&v438);
  *(_QWORD *)(a1 + 592) = off_24C335D90;
  if (SHIBYTE(v386.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external((std::string *)(a1 + 600), v386.__r_.__value_.__l.__data_, v386.__r_.__value_.__l.__size_);
  else
    *(std::string *)(a1 + 600) = v386;
  *(_DWORD *)(a1 + 624) = v387;
  *(_QWORD *)(a1 + 592) = &off_24C335AB8;
  *(_BYTE *)(a1 + 628) = v388;
  v72 = (std::string *)(a1 + 632);
  if (SHIBYTE(v389.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v72, v389.__r_.__value_.__l.__data_, v389.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v72->__r_.__value_.__l.__data_ = *(_OWORD *)&v389.__r_.__value_.__l.__data_;
    *(_QWORD *)(a1 + 648) = *((_QWORD *)&v389.__r_.__value_.__l + 2);
  }
  v328 = (uint64_t (**)())off_24C335D90;
  if (v71 < 0)
    operator delete(v329.__r_.__value_.__l.__data_);
  v332 = (uint64_t (**)())off_24C335D90;
  if (v70 < 0)
    operator delete(v333.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<mediaplatform::Data>::~DatabaseColumn((uint64_t)&v337);
  v346 = (uint64_t (**)())off_24C335D90;
  if (v66 < 0)
    operator delete(v347.__r_.__value_.__l.__data_);
  v350 = (uint64_t (**)())off_24C335D90;
  if (v65 < 0)
    operator delete(v351.__r_.__value_.__l.__data_);
  v354 = (uint64_t (**)())off_24C335D90;
  if (v64 < 0)
    operator delete(v355.__r_.__value_.__l.__data_);
  v358 = (uint64_t (**)())off_24C335D90;
  if (v63 < 0)
    operator delete(v359.__r_.__value_.__l.__data_);
  v362 = (uint64_t (**)())off_24C335D90;
  if (v110 < 0)
    operator delete(v363.__r_.__value_.__l.__data_);
  v367 = (uint64_t (**)())off_24C335D90;
  if (v112 < 0)
    operator delete(v368.__r_.__value_.__l.__data_);
  v372 = (uint64_t (**)())off_24C335D90;
  if (v80 < 0)
    operator delete(v373.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<mediaplatform::Data>::~DatabaseColumn((uint64_t)&v376);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v385);
  *(_QWORD *)(a1 + 656) = off_24C335D90;
  if (SHIBYTE(v324.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external((std::string *)(a1 + 664), v324.__r_.__value_.__l.__data_, v324.__r_.__value_.__l.__size_);
  else
    *(std::string *)(a1 + 664) = v324;
  *(_DWORD *)(a1 + 688) = v325;
  *(_QWORD *)(a1 + 656) = &off_24C335AB8;
  *(_BYTE *)(a1 + 692) = v326;
  v73 = (std::string *)(a1 + 696);
  if (SHIBYTE(v327.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v73, v327.__r_.__value_.__l.__data_, v327.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v73->__r_.__value_.__l.__data_ = *(_OWORD *)&v327.__r_.__value_.__l.__data_;
    *(_QWORD *)(a1 + 712) = *((_QWORD *)&v327.__r_.__value_.__l + 2);
  }
  v261 = (uint64_t (**)())off_24C335D90;
  if (v95 < 0)
    operator delete(v262.__r_.__value_.__l.__data_);
  v265 = (uint64_t (**)())off_24C335D90;
  if (v94 < 0)
    operator delete(v266.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<mediaplatform::Data>::~DatabaseColumn((uint64_t)&v270);
  v279 = (uint64_t (**)())off_24C335D90;
  if (v81 < 0)
    operator delete(v280.__r_.__value_.__l.__data_);
  v283 = (uint64_t (**)())off_24C335D90;
  if (v83 < 0)
    operator delete(v284.__r_.__value_.__l.__data_);
  v287 = (uint64_t (**)())off_24C335D90;
  if (v84 < 0)
    operator delete(v288.__r_.__value_.__l.__data_);
  v291 = (uint64_t (**)())off_24C335D90;
  if (v86 < 0)
    operator delete(v292.__r_.__value_.__l.__data_);
  v295 = (uint64_t (**)())off_24C335D90;
  if (v87 < 0)
    operator delete(v296.__r_.__value_.__l.__data_);
  v300 = (uint64_t (**)())off_24C335D90;
  if (v85 < 0)
    operator delete(v301.__r_.__value_.__l.__data_);
  v305 = (uint64_t (**)())off_24C335D90;
  if (v82 < 0)
    operator delete(v306.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<mediaplatform::Data>::~DatabaseColumn((uint64_t)&v309);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v318);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v323);
  *(_QWORD *)(a1 + 720) = off_24C335D90;
  if (SHIBYTE(v257.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external((std::string *)(a1 + 728), v257.__r_.__value_.__l.__data_, v257.__r_.__value_.__l.__size_);
  else
    *(std::string *)(a1 + 728) = v257;
  *(_DWORD *)(a1 + 752) = v258;
  *(_QWORD *)(a1 + 720) = &off_24C335AB8;
  *(_BYTE *)(a1 + 756) = v259;
  v74 = (std::string *)(a1 + 760);
  if (SHIBYTE(v260.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v74, v260.__r_.__value_.__l.__data_, v260.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v74->__r_.__value_.__l.__data_ = *(_OWORD *)&v260.__r_.__value_.__l.__data_;
    *(_QWORD *)(a1 + 776) = *((_QWORD *)&v260.__r_.__value_.__l + 2);
  }
  v189 = (uint64_t (**)())off_24C335D90;
  if (v88 < 0)
    operator delete(v190.__r_.__value_.__l.__data_);
  v193 = (uint64_t (**)())off_24C335D90;
  if (v89 < 0)
    operator delete(v194.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<mediaplatform::Data>::~DatabaseColumn((uint64_t)&v198);
  v207 = (uint64_t (**)())off_24C335D90;
  if (v92 < 0)
    operator delete(v208.__r_.__value_.__l.__data_);
  v211 = (uint64_t (**)())off_24C335D90;
  if (v90 < 0)
    operator delete(v212.__r_.__value_.__l.__data_);
  v215 = (uint64_t (**)())off_24C335D90;
  if (v91 < 0)
    operator delete(v216.__r_.__value_.__l.__data_);
  v219 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v220.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v220.__r_.__value_.__l.__data_);
  v223 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v224.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v224.__r_.__value_.__l.__data_);
  v228 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v229.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v229.__r_.__value_.__l.__data_);
  v233 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v234.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v234.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<mediaplatform::Data>::~DatabaseColumn((uint64_t)&v237);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v246);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v251);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v256);
  *(_QWORD *)(a1 + 784) = off_24C335D90;
  if (SHIBYTE(v185.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external((std::string *)(a1 + 792), v185.__r_.__value_.__l.__data_, v185.__r_.__value_.__l.__size_);
  else
    *(std::string *)(a1 + 792) = v185;
  *(_DWORD *)(a1 + 816) = v186;
  *(_QWORD *)(a1 + 784) = &off_24C335AB8;
  *(_BYTE *)(a1 + 820) = v187;
  v75 = (std::string *)(a1 + 824);
  if (SHIBYTE(v188.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v75, v188.__r_.__value_.__l.__data_, v188.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v75->__r_.__value_.__l.__data_ = *(_OWORD *)&v188.__r_.__value_.__l.__data_;
    *(_QWORD *)(a1 + 840) = *((_QWORD *)&v188.__r_.__value_.__l + 2);
  }
  if (SHIBYTE(v113.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v113.__r_.__value_.__l.__data_);
  if (SHIBYTE(v117.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v117.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<mediaplatform::Data>::~DatabaseColumn((uint64_t)&v121);
  if (SHIBYTE(v131.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v131.__r_.__value_.__l.__data_);
  if (SHIBYTE(v135.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v135.__r_.__value_.__l.__data_);
  if (SHIBYTE(v139.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v139.__r_.__value_.__l.__data_);
  if (SHIBYTE(v143.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v143.__r_.__value_.__l.__data_);
  if (SHIBYTE(v147.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v147.__r_.__value_.__l.__data_);
  if (SHIBYTE(v152.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v152.__r_.__value_.__l.__data_);
  if (SHIBYTE(v157.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v157.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<mediaplatform::Data>::~DatabaseColumn((uint64_t)&v160);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v169);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v174);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v179);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v184);
  *(_QWORD *)(a1 + 848) = off_24C335D90;
  v76 = (std::string *)(a1 + 856);
  if (*(char *)(a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v76, *(const std::string::value_type **)(a2 + 8), *(_QWORD *)(a2 + 16));
  }
  else
  {
    v77 = *(_OWORD *)(a2 + 8);
    *(_QWORD *)(a1 + 872) = *(_QWORD *)(a2 + 24);
    *(_OWORD *)&v76->__r_.__value_.__l.__data_ = v77;
  }
  *(_DWORD *)(a1 + 880) = *(_DWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 848) = off_24C335B18;
  v78 = *(_QWORD *)(a2 + 36);
  *(_DWORD *)(a1 + 892) = *(_DWORD *)(a2 + 44);
  *(_QWORD *)(a1 + 884) = v78;
  return a1;
}

void sub_20A6A5DE4(_Unwind_Exception *a1)
{
  uint64_t v1;

  mediaplatform::DatabaseColumnTuple<1ul,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(v1);
  _Unwind_Resume(a1);
}

uint64_t mediaplatform::DatabaseColumn<mediaplatform::Data>::~DatabaseColumn(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = &off_24C335A98;
  *(_QWORD *)(a1 + 40) = &off_24C331510;
  if (*(_BYTE *)(a1 + 72))
  {
    v2 = *(_QWORD *)(a1 + 64);
    if (v2)
      MEMORY[0x20BD27AE4](v2, 0x1000C8077774924);
  }
  *(_QWORD *)a1 = off_24C335D90;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

uint64_t mediaplatform::DatabaseColumnTuple<5ul,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>>::DatabaseColumnTuple(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  int v19;
  int v20;
  int v21;
  int v22;
  const void *v23;
  size_t v24;
  void *v25;
  int v26;
  const void *v27;
  size_t v28;
  void *v29;
  const void *v30;
  size_t v31;
  void *v32;
  const void *v33;
  size_t v34;
  void *v35;
  int v36;
  const void *v37;
  size_t v38;
  void *v39;
  int v40;
  const void *v41;
  size_t v42;
  void *v43;
  const void *v44;
  size_t v45;
  void *v46;
  int v47;
  const void *v48;
  size_t v49;
  void *v50;
  int v51;
  int v52;
  void *v53;
  std::string *v54;
  int v55;
  std::string *v56;
  int v57;
  std::string *v58;
  int v59;
  std::string *v60;
  int v61;
  std::string *v62;
  int v63;
  std::string *v64;
  int v65;
  std::string *v66;
  int v67;
  std::string *v68;
  int v69;
  __int128 v70;
  int v72;
  int v73;
  int v74;
  int v75;
  int v76;
  int v77;
  int v78;
  int v79;
  int v80;
  int v81;
  int v82;
  int v83;
  int v84;
  int v85;
  int v86;
  int v87;
  int v88;
  int v89;
  int v90;
  int v91;
  int v93;
  int v94;
  uint64_t v95;
  int v96;
  uint64_t v97;
  int v98;
  uint64_t v99;
  int v100;
  uint64_t v101;
  int v102;
  uint64_t v103;
  int v104;
  int v105;
  std::string __p;
  int v107;
  uint64_t v108;
  uint64_t (**v109)();
  std::string v110;
  int v111;
  uint64_t v112;
  int v113;
  uint64_t (**v114)();
  std::string v115;
  int v116;
  char v117;
  void (**v118)(mediaplatform::Data *__hidden);
  size_t v119;
  size_t v120;
  const void *v121;
  char v122;
  uint64_t (**v123)();
  std::string v124;
  int v125;
  uint64_t v126;
  uint64_t (**v127)();
  std::string v128;
  int v129;
  uint64_t v130;
  uint64_t (**v131)();
  std::string v132;
  int v133;
  uint64_t v134;
  uint64_t (**v135)();
  std::string v136;
  int v137;
  uint64_t v138;
  uint64_t (**v139)();
  std::string v140;
  int v141;
  uint64_t v142;
  int v143;
  uint64_t (**v144)();
  std::string __s;
  int v146;
  uint64_t v147;
  int v148;
  uint64_t (**v149)();
  std::string v150;
  int v151;
  uint64_t v152;
  uint64_t (**v153)();
  std::string v154;
  int v155;
  uint64_t v156;
  uint64_t (**v157)();
  std::string v158;
  int v159;
  uint64_t v160;
  int v161;
  uint64_t (**v162)();
  std::string v163;
  int v164;
  char v165;
  void (**v166)(mediaplatform::Data *__hidden);
  size_t v167;
  size_t v168;
  const void *v169;
  char v170;
  uint64_t (**v171)();
  std::string v172;
  int v173;
  uint64_t v174;
  uint64_t (**v175)();
  std::string v176;
  int v177;
  uint64_t v178;
  uint64_t (**v179)();
  std::string v180;
  int v181;
  uint64_t v182;
  uint64_t (**v183)();
  std::string v184;
  int v185;
  uint64_t v186;
  uint64_t (**v187)();
  std::string v188;
  int v189;
  uint64_t v190;
  int v191;
  uint64_t (**v192)();
  std::string v193;
  int v194;
  uint64_t v195;
  int v196;
  uint64_t (**v197)();
  std::string v198;
  int v199;
  uint64_t v200;
  uint64_t (**v201)();
  std::string v202;
  int v203;
  uint64_t v204;
  int v205;
  uint64_t (**v206)();
  std::string v207;
  int v208;
  char v209;
  void (**v210)(mediaplatform::Data *__hidden);
  size_t v211;
  size_t v212;
  const void *v213;
  char v214;
  uint64_t (**v215)();
  std::string v216;
  int v217;
  uint64_t v218;
  uint64_t (**v219)();
  std::string v220;
  int v221;
  uint64_t v222;
  uint64_t (**v223)();
  std::string v224;
  int v225;
  uint64_t v226;
  uint64_t (**v227)();
  std::string v228;
  int v229;
  uint64_t v230;
  uint64_t (**v231)();
  std::string v232;
  int v233;
  uint64_t v234;
  int v235;
  uint64_t (**v236)();
  std::string v237;
  int v238;
  uint64_t v239;
  uint64_t (**v240)();
  std::string v241;
  int v242;
  uint64_t v243;
  int v244;
  uint64_t (**v245)();
  std::string v246;
  int v247;
  char v248;
  void (**v249)(mediaplatform::Data *__hidden);
  size_t v250;
  size_t v251;
  const void *v252;
  char v253;
  uint64_t (**v254)();
  std::string v255;
  int v256;
  uint64_t v257;
  uint64_t (**v258)();
  std::string v259;
  int v260;
  uint64_t v261;
  uint64_t (**v262)();
  std::string v263;
  int v264;
  uint64_t v265;
  uint64_t (**v266)();
  std::string v267;
  int v268;
  uint64_t v269;
  uint64_t (**v270)();
  std::string v271;
  int v272;
  uint64_t v273;
  uint64_t (**v274)();
  std::string v275;
  int v276;
  uint64_t v277;
  int v278;
  uint64_t (**v279)();
  std::string v280;
  int v281;
  char v282;
  void (**v283)(mediaplatform::Data *__hidden);
  size_t v284;
  size_t v285;
  const void *v286;
  char v287;
  uint64_t (**v288)();
  std::string v289;
  int v290;
  uint64_t v291;
  uint64_t (**v292)();
  std::string v293;
  int v294;
  uint64_t v295;
  uint64_t (**v296)();
  std::string v297;
  int v298;
  uint64_t v299;
  uint64_t (**v300)();
  std::string v301;
  int v302;
  uint64_t v303;
  uint64_t (**v304)();
  std::string v305;
  int v306;
  uint64_t v307;
  int v308;
  uint64_t (**v309)();
  std::string v310;
  int v311;
  char v312;
  void (**v313)(mediaplatform::Data *__hidden);
  size_t v314;
  size_t v315;
  const void *v316;
  char v317;
  uint64_t (**v318)();
  std::string v319;
  int v320;
  uint64_t v321;
  uint64_t (**v322)();
  std::string v323;
  int v324;
  uint64_t v325;
  uint64_t (**v326)();
  std::string v327;
  int v328;
  uint64_t v329;
  uint64_t (**v330)();
  std::string v331;
  int v332;
  uint64_t v333;
  int v334;
  uint64_t (**v335)();
  std::string v336;
  int v337;
  char v338;
  void (**v339)(mediaplatform::Data *__hidden);
  size_t v340;
  size_t v341;
  const void *v342;
  char v343;
  uint64_t (**v344)();
  std::string v345;
  int v346;
  uint64_t v347;
  void (**v348)(mediaplatform::DatabaseColumnBase *__hidden);
  std::string v349;
  int v350;
  uint64_t v351;
  void (**v352)(mediaplatform::DatabaseColumnBase *__hidden);
  std::string v353;
  int v354;
  uint64_t v355;
  int v356;
  uint64_t (**v357)();
  std::string v358;
  int v359;
  char v360;
  _QWORD v361[4];
  char v362;
  void (**v363)(mediaplatform::DatabaseColumnBase *__hidden);
  std::string v364;
  int v365;
  uint64_t v366;
  void (**v367)(mediaplatform::DatabaseColumnBase *__hidden);
  std::string v368;
  int v369;
  uint64_t v370;
  int v371;
  void (**v372)(mediaplatform::DatabaseColumnBase *__hidden);
  std::string v373;
  int v374;
  uint64_t v375;

  if (*(char *)(a3 + 31) < 0)
    std::string::__init_copy_ctor_external(&v150, *(const std::string::value_type **)(a3 + 8), *(_QWORD *)(a3 + 16));
  else
    v150 = *(std::string *)(a3 + 8);
  v151 = *(_DWORD *)(a3 + 32);
  v149 = off_24C335AF8;
  v152 = *(_QWORD *)(a3 + 36);
  if (*(char *)(a4 + 31) < 0)
    std::string::__init_copy_ctor_external(&__s, *(const std::string::value_type **)(a4 + 8), *(_QWORD *)(a4 + 16));
  else
    __s = *(std::string *)(a4 + 8);
  v19 = *(_DWORD *)(a4 + 32);
  v144 = off_24C335B18;
  v147 = *(_QWORD *)(a4 + 36);
  v20 = *(_DWORD *)(a4 + 44);
  v146 = v19;
  v148 = v20;
  if (*(char *)(a5 + 31) < 0)
    std::string::__init_copy_ctor_external(&v140, *(const std::string::value_type **)(a5 + 8), *(_QWORD *)(a5 + 16));
  else
    v140 = *(std::string *)(a5 + 8);
  v21 = *(_DWORD *)(a5 + 32);
  v139 = off_24C335B18;
  v142 = *(_QWORD *)(a5 + 36);
  v22 = *(_DWORD *)(a5 + 44);
  v93 = v21;
  v141 = v21;
  v143 = v22;
  if (*(char *)(a6 + 31) < 0)
    std::string::__init_copy_ctor_external(&v136, *(const std::string::value_type **)(a6 + 8), *(_QWORD *)(a6 + 16));
  else
    v136 = *(std::string *)(a6 + 8);
  v96 = *(_DWORD *)(a6 + 32);
  v137 = v96;
  v135 = off_24C335AF8;
  v95 = *(_QWORD *)(a6 + 36);
  v138 = v95;
  if (*(char *)(a7 + 31) < 0)
    std::string::__init_copy_ctor_external(&v132, *(const std::string::value_type **)(a7 + 8), *(_QWORD *)(a7 + 16));
  else
    v132 = *(std::string *)(a7 + 8);
  v98 = *(_DWORD *)(a7 + 32);
  v133 = v98;
  v131 = off_24C335AF8;
  v97 = *(_QWORD *)(a7 + 36);
  v134 = v97;
  if (*(char *)(a8 + 31) < 0)
    std::string::__init_copy_ctor_external(&v128, *(const std::string::value_type **)(a8 + 8), *(_QWORD *)(a8 + 16));
  else
    v128 = *(std::string *)(a8 + 8);
  v100 = *(_DWORD *)(a8 + 32);
  v129 = v100;
  v127 = off_24C335AF8;
  v99 = *(_QWORD *)(a8 + 36);
  v130 = v99;
  if (*(char *)(a9 + 31) < 0)
    std::string::__init_copy_ctor_external(&v124, *(const std::string::value_type **)(a9 + 8), *(_QWORD *)(a9 + 16));
  else
    v124 = *(std::string *)(a9 + 8);
  v102 = *(_DWORD *)(a9 + 32);
  v125 = v102;
  v123 = off_24C335AF8;
  v101 = *(_QWORD *)(a9 + 36);
  v126 = v101;
  v114 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a10 + 31) < 0)
    std::string::__init_copy_ctor_external(&v115, *(const std::string::value_type **)(a10 + 8), *(_QWORD *)(a10 + 16));
  else
    v115 = *(std::string *)(a10 + 8);
  v116 = *(_DWORD *)(a10 + 32);
  v114 = &off_24C335A98;
  v117 = *(_BYTE *)(a10 + 36);
  v23 = *(const void **)(a10 + 64);
  v24 = *(_QWORD *)(a10 + 48);
  v118 = &off_24C331510;
  v119 = v24;
  v120 = v24;
  if (v24)
    v25 = (void *)operator new[]();
  else
    v25 = 0;
  v121 = v25;
  v122 = 1;
  if (v23)
    memcpy(v25, v23, v24);
  else
    bzero(v25, v24);
  if (*(char *)(a11 + 31) < 0)
    std::string::__init_copy_ctor_external(&v110, *(const std::string::value_type **)(a11 + 8), *(_QWORD *)(a11 + 16));
  else
    v110 = *(std::string *)(a11 + 8);
  v105 = *(_DWORD *)(a11 + 32);
  v111 = v105;
  v109 = off_24C335B18;
  v112 = *(_QWORD *)(a11 + 36);
  v113 = *(_DWORD *)(a11 + 44);
  if (*(char *)(a12 + 31) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(a12 + 8), *(_QWORD *)(a12 + 16));
  else
    __p = *(std::string *)(a12 + 8);
  v26 = *(_DWORD *)(a12 + 32);
  v107 = v26;
  v103 = *(_QWORD *)(a12 + 36);
  v108 = v103;
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v193, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
  else
    v193 = __s;
  v192 = off_24C335B18;
  v195 = v147;
  v194 = v19;
  v196 = v148;
  if (SHIBYTE(v140.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v188, v140.__r_.__value_.__l.__data_, v140.__r_.__value_.__l.__size_);
  else
    v188 = v140;
  v187 = off_24C335B18;
  v190 = v142;
  v189 = v93;
  v191 = v143;
  v104 = v26;
  if (SHIBYTE(v136.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v184, v136.__r_.__value_.__l.__data_, v136.__r_.__value_.__l.__size_);
  else
    v184 = v136;
  v185 = v96;
  v183 = off_24C335AF8;
  v186 = v95;
  if (SHIBYTE(v132.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v180, v132.__r_.__value_.__l.__data_, v132.__r_.__value_.__l.__size_);
  else
    v180 = v132;
  v181 = v98;
  v179 = off_24C335AF8;
  v182 = v97;
  if (SHIBYTE(v128.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v176, v128.__r_.__value_.__l.__data_, v128.__r_.__value_.__l.__size_);
  else
    v176 = v128;
  v177 = v100;
  v175 = off_24C335AF8;
  v178 = v99;
  if (SHIBYTE(v124.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v172, v124.__r_.__value_.__l.__data_, v124.__r_.__value_.__l.__size_);
  else
    v172 = v124;
  v173 = v102;
  v171 = off_24C335AF8;
  v174 = v101;
  v162 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v115.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v163, v115.__r_.__value_.__l.__data_, v115.__r_.__value_.__l.__size_);
  else
    v163 = v115;
  v164 = v116;
  v162 = &off_24C335A98;
  v165 = v117;
  v27 = v121;
  v28 = v119;
  v166 = &off_24C331510;
  v167 = v119;
  v168 = v119;
  if (v119)
    v29 = (void *)operator new[]();
  else
    v29 = 0;
  v169 = v29;
  v170 = 1;
  if (v27)
    memcpy(v29, v27, v28);
  else
    bzero(v29, v28);
  if (SHIBYTE(v110.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v158, v110.__r_.__value_.__l.__data_, v110.__r_.__value_.__l.__size_);
  else
    v158 = v110;
  v157 = off_24C335B18;
  v160 = v112;
  v159 = v105;
  v161 = v113;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v154, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  else
    v154 = __p;
  v155 = v26;
  v153 = off_24C335AF8;
  v156 = v103;
  if (SHIBYTE(v188.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v232, v188.__r_.__value_.__l.__data_, v188.__r_.__value_.__l.__size_);
  else
    v232 = v188;
  v231 = off_24C335B18;
  v234 = v190;
  v233 = v93;
  v235 = v191;
  if (SHIBYTE(v184.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v228, v184.__r_.__value_.__l.__data_, v184.__r_.__value_.__l.__size_);
  else
    v228 = v184;
  v229 = v96;
  v227 = off_24C335AF8;
  v230 = v95;
  if (SHIBYTE(v180.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v224, v180.__r_.__value_.__l.__data_, v180.__r_.__value_.__l.__size_);
  else
    v224 = v180;
  v225 = v98;
  v223 = off_24C335AF8;
  v226 = v97;
  if (SHIBYTE(v176.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v220, v176.__r_.__value_.__l.__data_, v176.__r_.__value_.__l.__size_);
  else
    v220 = v176;
  v221 = v100;
  v219 = off_24C335AF8;
  v222 = v99;
  if (SHIBYTE(v172.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v216, v172.__r_.__value_.__l.__data_, v172.__r_.__value_.__l.__size_);
  else
    v216 = v172;
  v217 = v102;
  v215 = off_24C335AF8;
  v218 = v101;
  v206 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v163.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v207, v163.__r_.__value_.__l.__data_, v163.__r_.__value_.__l.__size_);
  else
    v207 = v163;
  v208 = v164;
  v206 = &off_24C335A98;
  v209 = v165;
  v30 = v169;
  v31 = v167;
  v210 = &off_24C331510;
  v211 = v167;
  v212 = v167;
  if (v167)
    v32 = (void *)operator new[]();
  else
    v32 = 0;
  v213 = v32;
  v214 = 1;
  if (v30)
    memcpy(v32, v30, v31);
  else
    bzero(v32, v31);
  if (SHIBYTE(v158.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v202, v158.__r_.__value_.__l.__data_, v158.__r_.__value_.__l.__size_);
  else
    v202 = v158;
  v201 = off_24C335B18;
  v204 = v160;
  v203 = v105;
  v205 = v161;
  if (SHIBYTE(v154.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v198, v154.__r_.__value_.__l.__data_, v154.__r_.__value_.__l.__size_);
  else
    v198 = v154;
  v199 = v26;
  v197 = off_24C335AF8;
  v200 = v103;
  v94 = SHIBYTE(v228.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v228.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v267, v228.__r_.__value_.__l.__data_, v228.__r_.__value_.__l.__size_);
  else
    v267 = v228;
  v268 = v96;
  v266 = off_24C335AF8;
  v269 = v95;
  v91 = SHIBYTE(v224.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v224.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v263, v224.__r_.__value_.__l.__data_, v224.__r_.__value_.__l.__size_);
  else
    v263 = v224;
  v264 = v98;
  v262 = off_24C335AF8;
  v265 = v97;
  v90 = SHIBYTE(v220.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v220.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v259, v220.__r_.__value_.__l.__data_, v220.__r_.__value_.__l.__size_);
  else
    v259 = v220;
  v260 = v100;
  v258 = off_24C335AF8;
  v261 = v99;
  v89 = SHIBYTE(v216.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v216.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v255, v216.__r_.__value_.__l.__data_, v216.__r_.__value_.__l.__size_);
  else
    v255 = v216;
  v256 = v102;
  v254 = off_24C335AF8;
  v257 = v101;
  v245 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v207.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v246, v207.__r_.__value_.__l.__data_, v207.__r_.__value_.__l.__size_);
  else
    v246 = v207;
  v247 = v208;
  v245 = &off_24C335A98;
  v248 = v209;
  v33 = v213;
  v34 = v211;
  v249 = &off_24C331510;
  v250 = v211;
  v251 = v211;
  if (v211)
    v35 = (void *)operator new[]();
  else
    v35 = 0;
  v252 = v35;
  v253 = 1;
  if (v33)
    memcpy(v35, v33, v34);
  else
    bzero(v35, v34);
  v240 = (uint64_t (**)())off_24C335D90;
  v88 = SHIBYTE(v202.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v202.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v241, v202.__r_.__value_.__l.__data_, v202.__r_.__value_.__l.__size_);
  else
    v241 = v202;
  v240 = off_24C335B18;
  v243 = v160;
  v242 = v105;
  v244 = v161;
  v236 = (uint64_t (**)())off_24C335D90;
  v87 = SHIBYTE(v198.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v198.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v237, v198.__r_.__value_.__l.__data_, v198.__r_.__value_.__l.__size_);
  else
    v237 = v198;
  v238 = v104;
  v236 = off_24C335AF8;
  v239 = v103;
  v296 = (uint64_t (**)())off_24C335D90;
  v36 = SHIBYTE(v263.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v263.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v297, v263.__r_.__value_.__l.__data_, v263.__r_.__value_.__l.__size_);
  else
    v297 = v263;
  v298 = v98;
  v296 = off_24C335AF8;
  v299 = v97;
  v292 = (uint64_t (**)())off_24C335D90;
  v85 = SHIBYTE(v259.__r_.__value_.__r.__words[2]);
  v86 = v36;
  if (SHIBYTE(v259.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v293, v259.__r_.__value_.__l.__data_, v259.__r_.__value_.__l.__size_);
  else
    v293 = v259;
  v294 = v100;
  v292 = off_24C335AF8;
  v295 = v99;
  v288 = (uint64_t (**)())off_24C335D90;
  v84 = SHIBYTE(v255.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v255.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v289, v255.__r_.__value_.__l.__data_, v255.__r_.__value_.__l.__size_);
  else
    v289 = v255;
  v290 = v102;
  v288 = off_24C335AF8;
  v291 = v101;
  v279 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v246.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v280, v246.__r_.__value_.__l.__data_, v246.__r_.__value_.__l.__size_);
  else
    v280 = v246;
  v281 = v247;
  v279 = &off_24C335A98;
  v282 = v248;
  v37 = v252;
  v38 = v250;
  v283 = &off_24C331510;
  v284 = v250;
  v285 = v250;
  if (v250)
    v39 = (void *)operator new[]();
  else
    v39 = 0;
  v286 = v39;
  v287 = 1;
  if (v37)
    memcpy(v39, v37, v38);
  else
    bzero(v39, v38);
  v274 = (uint64_t (**)())off_24C335D90;
  v83 = SHIBYTE(v241.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v241.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v275, v241.__r_.__value_.__l.__data_, v241.__r_.__value_.__l.__size_);
  else
    v275 = v241;
  v274 = off_24C335B18;
  v277 = v160;
  v276 = v105;
  v278 = v161;
  v270 = (uint64_t (**)())off_24C335D90;
  v82 = SHIBYTE(v237.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v237.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v271, v237.__r_.__value_.__l.__data_, v237.__r_.__value_.__l.__size_);
  else
    v271 = v237;
  v272 = v104;
  v270 = off_24C335AF8;
  v273 = v103;
  v322 = (uint64_t (**)())off_24C335D90;
  v40 = SHIBYTE(v293.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v293.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v323, v293.__r_.__value_.__l.__data_, v293.__r_.__value_.__l.__size_);
  else
    v323 = v293;
  v324 = v100;
  v322 = off_24C335AF8;
  v325 = v99;
  v318 = (uint64_t (**)())off_24C335D90;
  v80 = SHIBYTE(v289.__r_.__value_.__r.__words[2]);
  v81 = v40;
  if (SHIBYTE(v289.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v319, v289.__r_.__value_.__l.__data_, v289.__r_.__value_.__l.__size_);
  else
    v319 = v289;
  v320 = v102;
  v318 = off_24C335AF8;
  v321 = v101;
  v309 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v280.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v310, v280.__r_.__value_.__l.__data_, v280.__r_.__value_.__l.__size_);
  else
    v310 = v280;
  v311 = v281;
  v309 = &off_24C335A98;
  v312 = v282;
  v41 = v286;
  v42 = v284;
  v313 = &off_24C331510;
  v314 = v284;
  v315 = v284;
  if (v284)
    v43 = (void *)operator new[]();
  else
    v43 = 0;
  v316 = v43;
  v317 = 1;
  if (v41)
    memcpy(v43, v41, v42);
  else
    bzero(v43, v42);
  v304 = (uint64_t (**)())off_24C335D90;
  v78 = SHIBYTE(v275.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v275.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v305, v275.__r_.__value_.__l.__data_, v275.__r_.__value_.__l.__size_);
  else
    v305 = v275;
  v304 = off_24C335B18;
  v307 = v160;
  v306 = v105;
  v308 = v161;
  v300 = (uint64_t (**)())off_24C335D90;
  v76 = SHIBYTE(v271.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v271.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v301, v271.__r_.__value_.__l.__data_, v271.__r_.__value_.__l.__size_);
  else
    v301 = v271;
  v302 = v104;
  v300 = off_24C335AF8;
  v303 = v103;
  v344 = (uint64_t (**)())off_24C335D90;
  v75 = SHIBYTE(v319.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v319.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v345, v319.__r_.__value_.__l.__data_, v319.__r_.__value_.__l.__size_);
  else
    v345 = v319;
  v346 = v102;
  v344 = off_24C335AF8;
  v347 = v101;
  v335 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v310.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v336, v310.__r_.__value_.__l.__data_, v310.__r_.__value_.__l.__size_);
  else
    v336 = v310;
  v337 = v311;
  v335 = &off_24C335A98;
  v338 = v312;
  v44 = v316;
  v45 = v314;
  v339 = &off_24C331510;
  v340 = v314;
  v341 = v314;
  if (v314)
    v46 = (void *)operator new[]();
  else
    v46 = 0;
  v342 = v46;
  v343 = 1;
  if (v44)
    memcpy(v46, v44, v45);
  else
    bzero(v46, v45);
  v330 = (uint64_t (**)())off_24C335D90;
  v47 = SHIBYTE(v305.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v305.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v331, v305.__r_.__value_.__l.__data_, v305.__r_.__value_.__l.__size_);
  else
    v331 = v305;
  v330 = off_24C335B18;
  v333 = v160;
  v332 = v105;
  v334 = v161;
  v326 = (uint64_t (**)())off_24C335D90;
  v73 = SHIBYTE(v301.__r_.__value_.__r.__words[2]);
  v74 = v47;
  if (SHIBYTE(v301.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v327, v301.__r_.__value_.__l.__data_, v301.__r_.__value_.__l.__size_);
  else
    v327 = v301;
  v328 = v104;
  v326 = off_24C335AF8;
  v329 = v103;
  v357 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v336.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v358, v336.__r_.__value_.__l.__data_, v336.__r_.__value_.__l.__size_);
  else
    v358 = v336;
  v359 = v337;
  v357 = &off_24C335A98;
  v360 = v338;
  v48 = v342;
  v49 = v340;
  v361[0] = &off_24C331510;
  v361[1] = v340;
  v361[2] = v340;
  if (v340)
    v50 = (void *)operator new[]();
  else
    v50 = 0;
  v361[3] = v50;
  v362 = 1;
  if (v48)
    memcpy(v50, v48, v49);
  else
    bzero(v50, v49);
  v352 = off_24C335D90;
  v72 = SHIBYTE(v331.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v331.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v353, v331.__r_.__value_.__l.__data_, v331.__r_.__value_.__l.__size_);
  else
    v353 = v331;
  v355 = v160;
  v354 = v105;
  v356 = v161;
  v348 = off_24C335D90;
  v51 = SHIBYTE(v327.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v327.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v349, v327.__r_.__value_.__l.__data_, v327.__r_.__value_.__l.__size_);
  else
    v349 = v327;
  v350 = v104;
  v351 = v103;
  v367 = off_24C335D90;
  v79 = SHIBYTE(v353.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v353.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v368, v353.__r_.__value_.__l.__data_, v353.__r_.__value_.__l.__size_);
  else
    v368 = v353;
  v370 = v160;
  v369 = v105;
  v371 = v161;
  v363 = off_24C335D90;
  v77 = SHIBYTE(v349.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v349.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v364, v349.__r_.__value_.__l.__data_, v349.__r_.__value_.__l.__size_);
  else
    v364 = v349;
  v365 = v104;
  v366 = v103;
  v372 = off_24C335D90;
  v52 = SHIBYTE(v364.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v364.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v373, v364.__r_.__value_.__l.__data_, v364.__r_.__value_.__l.__size_);
  else
    v373 = v364;
  v374 = v104;
  v375 = v103;
  *(_QWORD *)a1 = off_24C335D90;
  if (SHIBYTE(v373.__r_.__value_.__r.__words[2]) < 0)
  {
    v53 = (void *)v373.__r_.__value_.__r.__words[0];
    std::string::__init_copy_ctor_external((std::string *)(a1 + 8), v373.__r_.__value_.__l.__data_, v373.__r_.__value_.__l.__size_);
    *(_DWORD *)(a1 + 32) = v104;
    *(_QWORD *)a1 = off_24C335AF8;
    *(_QWORD *)(a1 + 36) = v103;
    v372 = off_24C335D90;
    operator delete(v53);
  }
  else
  {
    *(std::string *)(a1 + 8) = v373;
    *(_DWORD *)(a1 + 32) = v104;
    *(_QWORD *)a1 = off_24C335AF8;
    *(_QWORD *)(a1 + 36) = v103;
    v372 = off_24C335D90;
  }
  *(_QWORD *)(a1 + 48) = off_24C335D90;
  v54 = (std::string *)(a1 + 56);
  v55 = SHIBYTE(v368.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v368.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v54, v368.__r_.__value_.__l.__data_, v368.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v54->__r_.__value_.__l.__data_ = *(_OWORD *)&v368.__r_.__value_.__l.__data_;
    *(_QWORD *)(a1 + 72) = *((_QWORD *)&v368.__r_.__value_.__l + 2);
  }
  *(_DWORD *)(a1 + 80) = v105;
  *(_QWORD *)(a1 + 48) = off_24C335B18;
  *(_QWORD *)(a1 + 84) = v160;
  *(_DWORD *)(a1 + 92) = v161;
  v363 = off_24C335D90;
  if (v52 < 0)
    operator delete(v364.__r_.__value_.__l.__data_);
  v367 = off_24C335D90;
  if (v55 < 0)
    operator delete(v368.__r_.__value_.__l.__data_);
  *(_QWORD *)(a1 + 96) = off_24C335D90;
  if (SHIBYTE(v358.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external((std::string *)(a1 + 104), v358.__r_.__value_.__l.__data_, v358.__r_.__value_.__l.__size_);
  else
    *(std::string *)(a1 + 104) = v358;
  *(_DWORD *)(a1 + 128) = v359;
  *(_QWORD *)(a1 + 96) = &off_24C335A98;
  *(_BYTE *)(a1 + 132) = v360;
  mediaplatform::Data::Data((mediaplatform::Data *)(a1 + 136), (const mediaplatform::Data *)v361);
  v348 = off_24C335D90;
  if (v77 < 0)
    operator delete(v349.__r_.__value_.__l.__data_);
  v352 = off_24C335D90;
  if (v79 < 0)
    operator delete(v353.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<mediaplatform::Data>::~DatabaseColumn((uint64_t)&v357);
  *(_QWORD *)(a1 + 176) = off_24C335D90;
  v56 = (std::string *)(a1 + 184);
  v57 = SHIBYTE(v345.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v345.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v56, v345.__r_.__value_.__l.__data_, v345.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v56->__r_.__value_.__l.__data_ = *(_OWORD *)&v345.__r_.__value_.__l.__data_;
    *(_QWORD *)(a1 + 200) = *((_QWORD *)&v345.__r_.__value_.__l + 2);
  }
  *(_DWORD *)(a1 + 208) = v102;
  *(_QWORD *)(a1 + 176) = off_24C335AF8;
  *(_QWORD *)(a1 + 212) = v101;
  v326 = (uint64_t (**)())off_24C335D90;
  if (v51 < 0)
    operator delete(v327.__r_.__value_.__l.__data_);
  v330 = (uint64_t (**)())off_24C335D90;
  if (v72 < 0)
    operator delete(v331.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<mediaplatform::Data>::~DatabaseColumn((uint64_t)&v335);
  v344 = (uint64_t (**)())off_24C335D90;
  if (v57 < 0)
    operator delete(v345.__r_.__value_.__l.__data_);
  *(_QWORD *)(a1 + 224) = off_24C335D90;
  v58 = (std::string *)(a1 + 232);
  v59 = SHIBYTE(v323.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v323.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v58, v323.__r_.__value_.__l.__data_, v323.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v58->__r_.__value_.__l.__data_ = *(_OWORD *)&v323.__r_.__value_.__l.__data_;
    *(_QWORD *)(a1 + 248) = *((_QWORD *)&v323.__r_.__value_.__l + 2);
  }
  *(_DWORD *)(a1 + 256) = v100;
  *(_QWORD *)(a1 + 224) = off_24C335AF8;
  *(_QWORD *)(a1 + 260) = v99;
  v300 = (uint64_t (**)())off_24C335D90;
  if (v73 < 0)
    operator delete(v301.__r_.__value_.__l.__data_);
  v304 = (uint64_t (**)())off_24C335D90;
  if (v74 < 0)
    operator delete(v305.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<mediaplatform::Data>::~DatabaseColumn((uint64_t)&v309);
  v318 = (uint64_t (**)())off_24C335D90;
  if (v75 < 0)
    operator delete(v319.__r_.__value_.__l.__data_);
  v322 = (uint64_t (**)())off_24C335D90;
  if (v59 < 0)
    operator delete(v323.__r_.__value_.__l.__data_);
  *(_QWORD *)(a1 + 272) = off_24C335D90;
  v60 = (std::string *)(a1 + 280);
  v61 = SHIBYTE(v297.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v297.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v60, v297.__r_.__value_.__l.__data_, v297.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v60->__r_.__value_.__l.__data_ = *(_OWORD *)&v297.__r_.__value_.__l.__data_;
    *(_QWORD *)(a1 + 296) = *((_QWORD *)&v297.__r_.__value_.__l + 2);
  }
  *(_DWORD *)(a1 + 304) = v98;
  *(_QWORD *)(a1 + 272) = off_24C335AF8;
  *(_QWORD *)(a1 + 308) = v97;
  v270 = (uint64_t (**)())off_24C335D90;
  if (v76 < 0)
    operator delete(v271.__r_.__value_.__l.__data_);
  v274 = (uint64_t (**)())off_24C335D90;
  if (v78 < 0)
    operator delete(v275.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<mediaplatform::Data>::~DatabaseColumn((uint64_t)&v279);
  v288 = (uint64_t (**)())off_24C335D90;
  if (v80 < 0)
    operator delete(v289.__r_.__value_.__l.__data_);
  v292 = (uint64_t (**)())off_24C335D90;
  if (v81 < 0)
    operator delete(v293.__r_.__value_.__l.__data_);
  v296 = (uint64_t (**)())off_24C335D90;
  if (v61 < 0)
    operator delete(v297.__r_.__value_.__l.__data_);
  *(_QWORD *)(a1 + 320) = off_24C335D90;
  v62 = (std::string *)(a1 + 328);
  v63 = SHIBYTE(v267.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v267.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v62, v267.__r_.__value_.__l.__data_, v267.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v62->__r_.__value_.__l.__data_ = *(_OWORD *)&v267.__r_.__value_.__l.__data_;
    *(_QWORD *)(a1 + 344) = *((_QWORD *)&v267.__r_.__value_.__l + 2);
  }
  *(_DWORD *)(a1 + 352) = v96;
  *(_QWORD *)(a1 + 320) = off_24C335AF8;
  *(_QWORD *)(a1 + 356) = v95;
  v236 = (uint64_t (**)())off_24C335D90;
  if (v82 < 0)
    operator delete(v237.__r_.__value_.__l.__data_);
  v240 = (uint64_t (**)())off_24C335D90;
  if (v83 < 0)
    operator delete(v241.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<mediaplatform::Data>::~DatabaseColumn((uint64_t)&v245);
  v254 = (uint64_t (**)())off_24C335D90;
  if (v84 < 0)
    operator delete(v255.__r_.__value_.__l.__data_);
  v258 = (uint64_t (**)())off_24C335D90;
  if (v85 < 0)
    operator delete(v259.__r_.__value_.__l.__data_);
  if (v86 < 0)
  {
    operator delete(v263.__r_.__value_.__l.__data_);
    if ((v63 & 0x80000000) == 0)
      goto LABEL_277;
  }
  else if ((v63 & 0x80000000) == 0)
  {
    goto LABEL_277;
  }
  operator delete(v267.__r_.__value_.__l.__data_);
LABEL_277:
  *(_QWORD *)(a1 + 368) = off_24C335D90;
  v64 = (std::string *)(a1 + 376);
  v65 = SHIBYTE(v232.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v232.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v64, v232.__r_.__value_.__l.__data_, v232.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v64->__r_.__value_.__l.__data_ = *(_OWORD *)&v232.__r_.__value_.__l.__data_;
    *(_QWORD *)(a1 + 392) = *((_QWORD *)&v232.__r_.__value_.__l + 2);
  }
  *(_DWORD *)(a1 + 400) = v233;
  *(_QWORD *)(a1 + 368) = off_24C335B18;
  *(_QWORD *)(a1 + 404) = v234;
  *(_DWORD *)(a1 + 412) = v235;
  v197 = (uint64_t (**)())off_24C335D90;
  if (v87 < 0)
    operator delete(v198.__r_.__value_.__l.__data_);
  v201 = (uint64_t (**)())off_24C335D90;
  if (v88 < 0)
    operator delete(v202.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<mediaplatform::Data>::~DatabaseColumn((uint64_t)&v206);
  v215 = (uint64_t (**)())off_24C335D90;
  if (v89 < 0)
    operator delete(v216.__r_.__value_.__l.__data_);
  if (v90 < 0)
    operator delete(v220.__r_.__value_.__l.__data_);
  if (v91 < 0)
    operator delete(v224.__r_.__value_.__l.__data_);
  if (v94 < 0)
  {
    operator delete(v228.__r_.__value_.__l.__data_);
    if ((v65 & 0x80000000) == 0)
      goto LABEL_294;
  }
  else if ((v65 & 0x80000000) == 0)
  {
    goto LABEL_294;
  }
  operator delete(v232.__r_.__value_.__l.__data_);
LABEL_294:
  *(_QWORD *)(a1 + 416) = off_24C335D90;
  v66 = (std::string *)(a1 + 424);
  v67 = SHIBYTE(v193.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v193.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v66, v193.__r_.__value_.__l.__data_, v193.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v66->__r_.__value_.__l.__data_ = *(_OWORD *)&v193.__r_.__value_.__l.__data_;
    *(_QWORD *)(a1 + 440) = *((_QWORD *)&v193.__r_.__value_.__l + 2);
  }
  *(_DWORD *)(a1 + 448) = v194;
  *(_QWORD *)(a1 + 416) = off_24C335B18;
  *(_QWORD *)(a1 + 452) = v195;
  *(_DWORD *)(a1 + 460) = v196;
  v153 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v154.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v154.__r_.__value_.__l.__data_);
  v157 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v158.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v158.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<mediaplatform::Data>::~DatabaseColumn((uint64_t)&v162);
  v171 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v172.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v172.__r_.__value_.__l.__data_);
  v175 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v176.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v176.__r_.__value_.__l.__data_);
  if (SHIBYTE(v180.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v180.__r_.__value_.__l.__data_);
  if (SHIBYTE(v184.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v184.__r_.__value_.__l.__data_);
  if (SHIBYTE(v188.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v188.__r_.__value_.__l.__data_);
    if ((v67 & 0x80000000) == 0)
      goto LABEL_313;
  }
  else if ((v67 & 0x80000000) == 0)
  {
    goto LABEL_313;
  }
  operator delete(v193.__r_.__value_.__l.__data_);
LABEL_313:
  *(_QWORD *)(a1 + 464) = off_24C335D90;
  v68 = (std::string *)(a1 + 472);
  v69 = SHIBYTE(v150.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v150.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v68, v150.__r_.__value_.__l.__data_, v150.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v68->__r_.__value_.__l.__data_ = *(_OWORD *)&v150.__r_.__value_.__l.__data_;
    *(_QWORD *)(a1 + 488) = *((_QWORD *)&v150.__r_.__value_.__l + 2);
  }
  *(_DWORD *)(a1 + 496) = v151;
  *(_QWORD *)(a1 + 464) = off_24C335AF8;
  *(_QWORD *)(a1 + 500) = v152;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v110.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v110.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<mediaplatform::Data>::~DatabaseColumn((uint64_t)&v114);
  if (SHIBYTE(v124.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v124.__r_.__value_.__l.__data_);
  if (SHIBYTE(v128.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v128.__r_.__value_.__l.__data_);
  if (SHIBYTE(v132.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v132.__r_.__value_.__l.__data_);
  if (SHIBYTE(v136.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v136.__r_.__value_.__l.__data_);
  if (SHIBYTE(v140.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v140.__r_.__value_.__l.__data_);
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__s.__r_.__value_.__l.__data_);
    if ((v69 & 0x80000000) == 0)
      goto LABEL_334;
  }
  else if ((v69 & 0x80000000) == 0)
  {
    goto LABEL_334;
  }
  operator delete(v150.__r_.__value_.__l.__data_);
LABEL_334:
  *(_QWORD *)(a1 + 512) = off_24C335D90;
  if (*(char *)(a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 520), *(const std::string::value_type **)(a2 + 8), *(_QWORD *)(a2 + 16));
  }
  else
  {
    v70 = *(_OWORD *)(a2 + 8);
    *(_QWORD *)(a1 + 536) = *(_QWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 520) = v70;
  }
  *(_DWORD *)(a1 + 544) = *(_DWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 512) = &off_24C335A98;
  *(_BYTE *)(a1 + 548) = *(_BYTE *)(a2 + 36);
  mediaplatform::Data::Data((mediaplatform::Data *)(a1 + 552), (const mediaplatform::Data *)(a2 + 40));
  return a1;
}

void sub_20A6A8598(_Unwind_Exception *a1)
{
  uint64_t v1;

  mediaplatform::DatabaseColumnTuple<6ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(v1);
  _Unwind_Resume(a1);
}

uint64_t mediaplatform::Singleton<mlcore::ItemStoreTable>::sharedInstance()
{
  unsigned __int8 v0;
  _QWORD *v2;

  if ((v0 & 1) == 0
  {
    v2 = (_QWORD *)operator new();
    _ZNSt3__115allocate_sharedB8ne180100IN6mlcore14ItemStoreTableENS_9allocatorIS2_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(v2);
    mediaplatform::Singleton<mlcore::ItemStoreTable>::sharedInstance(void)::_sharedInstance = (uint64_t)v2;
  }
  return mediaplatform::Singleton<mlcore::ItemStoreTable>::sharedInstance(void)::_sharedInstance;
}

void sub_20A6A8E1C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x20BD27AFC](v1, 0x20C40A4A59CD2);
  _Unwind_Resume(a1);
}

uint64_t mlcore::ItemPropertyBaseLocationPath(mlcore *this)
{
  mlcore *v1;
  uint64_t v2;
  uint64_t v4[2];

  v1 = (mlcore *)mlcore::ItemPropertyBaseLocationID(this);
  v2 = mlcore::BaseLocationPropertyFilePath(v1);
  v4[0] = 0;
  v4[1] = 0;
  return mlcore::GetForeignProperty<std::string>((uint64_t)v1, v2, v4);
}

void sub_20A6A8E94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t mlcore::ItemPropertyBaseLocationID(mlcore *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&mlcore::ItemPropertyBaseLocationID(void)::once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&mlcore::ItemPropertyBaseLocationID(void)::once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyBaseLocationID(void)::$_0 &&>>);
  }
  return mlcore::ItemPropertyBaseLocationID(void)::property;
}

uint64_t mlcore::BaseLocationPropertyFilePath(mlcore *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&mlcore::BaseLocationPropertyFilePath(void)::once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&mlcore::BaseLocationPropertyFilePath(void)::once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::BaseLocationPropertyFilePath(void)::$_0 &&>>);
  }
  return mlcore::BaseLocationPropertyFilePath(void)::property;
}

uint64_t mediaplatform::Singleton<mlcore::ItemStatsTable>::sharedInstance()
{
  unsigned __int8 v0;
  uint64_t *v2;

  if ((v0 & 1) == 0
  {
    v2 = (uint64_t *)operator new();
    _ZNSt3__115allocate_sharedB8ne180100IN6mlcore14ItemStatsTableENS_9allocatorIS2_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(v2);
    mediaplatform::Singleton<mlcore::ItemStatsTable>::sharedInstance(void)::_sharedInstance = (uint64_t)v2;
  }
  return mediaplatform::Singleton<mlcore::ItemStatsTable>::sharedInstance(void)::_sharedInstance;
}

void sub_20A6A8FD4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x20BD27AFC](v1, 0x20C40A4A59CD2);
  _Unwind_Resume(a1);
}

uint64_t mlcore::ItemPropertyLyrics(mlcore *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&mlcore::ItemPropertyLyrics(void)::once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&mlcore::ItemPropertyLyrics(void)::once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyLyrics(void)::$_0 &&>>);
  }
  return mlcore::ItemPropertyLyrics(void)::property;
}

void mlcore::CreateComparisonPredicate(char *__s@<X2>, std::string::size_type a2@<X0>, int a3@<W1>, int a4@<W3>, std::string **a5@<X8>)
{
  std::string *v9;
  std::string *v10;
  std::string *v11;
  int v12;
  void *__p[2];
  std::string::size_type v14;

  std::string::basic_string[abi:ne180100]<0>(__p, __s);
  v9 = (std::string *)operator new(0x58uLL);
  v9->__r_.__value_.__l.__size_ = 0;
  v9->__r_.__value_.__r.__words[2] = 0;
  v9[1].__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_24C339BA0;
  v10 = v9 + 1;
  v9->__r_.__value_.__r.__words[0] = (std::string::size_type)&off_24C33CDE0;
  v9[1].__r_.__value_.__l.__size_ = a2;
  LODWORD(v9[1].__r_.__value_.__r.__words[2]) = a4;
  HIDWORD(v9[1].__r_.__value_.__r.__words[2]) = a3;
  v11 = v9 + 2;
  if (SHIBYTE(v14) < 0)
  {
    std::string::__init_copy_ctor_external(v11, (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
    v12 = SHIBYTE(v14);
    v9[3].__r_.__value_.__r.__words[0] = 0;
    v9[3].__r_.__value_.__l.__size_ = 0;
    *a5 = v10;
    a5[1] = v9;
    if (v12 < 0)
      operator delete(__p[0]);
  }
  else
  {
    *(_OWORD *)&v11->__r_.__value_.__l.__data_ = *(_OWORD *)__p;
    v9[2].__r_.__value_.__r.__words[2] = v14;
    v9[3].__r_.__value_.__r.__words[0] = 0;
    v9[3].__r_.__value_.__l.__size_ = 0;
    *a5 = v10;
    a5[1] = v9;
  }
}

void sub_20A6A9134(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  std::__shared_weak_count *v15;
  void *v17;

  std::__shared_weak_count::~__shared_weak_count(v15);
  operator delete(v17);
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t mediaplatform::Singleton<mlcore::BestArtworkTokenTable>::sharedInstance()
{
  unsigned __int8 v0;
  mlcore::BestArtworkTokenTable **v2;

  if ((v0 & 1) == 0
  {
    v2 = (mlcore::BestArtworkTokenTable **)operator new();
    _ZNSt3__115allocate_sharedB8ne180100IN6mlcore21BestArtworkTokenTableENS_9allocatorIS2_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(v2);
    mediaplatform::Singleton<mlcore::BestArtworkTokenTable>::sharedInstance(void)::_sharedInstance = (uint64_t)v2;
  }
  return mediaplatform::Singleton<mlcore::BestArtworkTokenTable>::sharedInstance(void)::_sharedInstance;
}

void sub_20A6A91D8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x20BD27AFC](v1, 0x20C40A4A59CD2);
  _Unwind_Resume(a1);
}

uint64_t mlcore::TypedEntityClass<mlcore::BestArtworkToken>::sharedPointer()
{
  unint64_t v0;
  char v2;
  char **v3;
  char *v4;

  v0 = atomic_load(&mlcore::TypedEntityClass<mlcore::BestArtworkToken>::sharedPointer(void)::__once);
  if (v0 != -1)
  {
    v4 = &v2;
    v3 = &v4;
    std::__call_once(&mlcore::TypedEntityClass<mlcore::BestArtworkToken>::sharedPointer(void)::__once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::TypedEntityClass<mlcore::BestArtworkToken>::sharedPointer(void)::{lambda(void)#1} &&>>);
  }
  return mlcore::TypedEntityClass<mlcore::BestArtworkToken>::sharedPointer(void)::__sharedPointer;
}

mlcore::BestArtworkTokenTable *mlcore::BestArtworkTokenTable::BestArtworkTokenTable(mlcore::BestArtworkTokenTable *this)
{
  std::string *v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  void *v11;
  std::string *v12;
  std::string *v13;
  std::string *v14;
  int v15;
  std::string *v16;
  int v17;
  std::string *v18;
  int v19;
  std::string *v20;
  char v21;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  int v37;
  std::string __str;
  void *v39[2];
  char v40;
  void (**v41)(mediaplatform::DatabaseColumnBase *__hidden);
  std::string __p;
  int v43;
  uint64_t v44;
  void *v45[2];
  char v46;
  void *v47[2];
  char v48;
  _BYTE v49[8];
  std::string v50;
  int v51;
  char v52;
  std::string v53;
  void *v54[2];
  char v55;
  void *v56[2];
  char v57;
  _BYTE v58[8];
  std::string v59;
  int v60;
  char v61;
  std::string v62;
  void *v63[2];
  char v64;
  void (**v65)(mediaplatform::DatabaseColumnBase *__hidden);
  std::string v66;
  int v67;
  uint64_t v68;
  void *v69[2];
  char v70;
  void (**v71)(mediaplatform::DatabaseColumnBase *__hidden);
  std::string v72;
  int v73;
  uint64_t v74;
  void *v75[2];
  char v76;
  void (**v77)(mediaplatform::DatabaseColumnBase *__hidden);
  std::string v78;
  int v79;
  uint64_t v80;
  int v81;
  std::string __s;
  uint64_t (**v83)();
  std::string v84;
  int v85;
  uint64_t v86;
  uint64_t (**v87)();
  std::string v88;
  int v89;
  char v90;
  std::string v91;
  uint64_t (**v92)();
  std::string v93;
  int v94;
  char v95;
  std::string v96;
  uint64_t (**v97)();
  std::string v98;
  int v99;
  uint64_t v100;
  uint64_t (**v101)();
  std::string v102;
  int v103;
  uint64_t v104;
  uint64_t (**v105)();
  std::string v106;
  int v107;
  uint64_t v108;
  int v109;
  std::string v110;
  uint64_t (**v111)();
  std::string v112;
  int v113;
  uint64_t v114;
  uint64_t (**v115)();
  std::string v116;
  int v117;
  char v118;
  std::string v119;
  uint64_t (**v120)();
  std::string v121;
  int v122;
  char v123;
  std::string v124;
  uint64_t (**v125)();
  std::string v126;
  int v127;
  uint64_t v128;
  uint64_t (**v129)();
  std::string v130;
  int v131;
  uint64_t v132;
  uint64_t (**v133)();
  std::string v134;
  int v135;
  uint64_t v136;
  int v137;
  uint64_t (**v138)();
  std::string v139;
  int v140;
  uint64_t v141;
  uint64_t (**v142)();
  std::string v143;
  int v144;
  char v145;
  std::string v146;
  uint64_t (**v147)();
  std::string v148;
  int v149;
  char v150;
  std::string v151;
  uint64_t (**v152)();
  std::string v153;
  int v154;
  uint64_t v155;
  uint64_t (**v156)();
  std::string v157;
  int v158;
  uint64_t v159;
  uint64_t (**v160)();
  std::string v161;
  int v162;
  uint64_t v163;
  uint64_t (**v164)();
  std::string v165;
  int v166;
  char v167;
  std::string v168;
  uint64_t (**v169)();
  std::string v170;
  int v171;
  char v172;
  std::string v173;
  uint64_t (**v174)();
  std::string v175;
  int v176;
  uint64_t v177;
  void (**v178)(mediaplatform::DatabaseColumnBase *__hidden);
  std::string v179;
  int v180;
  uint64_t v181;
  uint64_t (**v182)();
  std::string v183;
  int v184;
  char v185;
  std::string v186;
  uint64_t (**v187)();
  std::string v188;
  int v189;
  char v190;
  std::string v191;
  void (**v192)(mediaplatform::DatabaseColumnBase *__hidden);
  std::string v193;
  int v194;
  uint64_t v195;
  uint64_t (**v196)();
  std::string v197;
  int v198;
  char v199;
  std::string v200;
  void (**v201)(mediaplatform::DatabaseColumnBase *__hidden);
  std::string v202;
  int v203;
  uint64_t v204;

  std::string::basic_string[abi:ne180100]<0>(&__s, "best_artwork_token");
  std::string::basic_string[abi:ne180100]<0>(v75, "entity_pid");
  mlcore::MediaColumn<long long>::MediaColumn((uint64_t)&v77, (uint64_t)v75);
  std::string::basic_string[abi:ne180100]<0>(v69, "entity_type");
  mlcore::MediaColumn<int>::MediaColumn((uint64_t)&v71, (uint64_t)v69, 0);
  std::string::basic_string[abi:ne180100]<0>(v63, "artwork_type");
  mlcore::MediaColumn<int>::MediaColumn((uint64_t)&v65, (uint64_t)v63, 0);
  std::string::basic_string[abi:ne180100]<0>(v56, "available_artwork_token");
  std::string::basic_string[abi:ne180100]<0>(v54, "");
  mlcore::MediaColumn<std::string>::MediaColumn((uint64_t)v58, (uint64_t)v56, (uint64_t)v54);
  std::string::basic_string[abi:ne180100]<0>(v47, "fetchable_artwork_token");
  std::string::basic_string[abi:ne180100]<0>(v45, "");
  mlcore::MediaColumn<std::string>::MediaColumn((uint64_t)v49, (uint64_t)v47, (uint64_t)v45);
  std::string::basic_string[abi:ne180100]<0>(v39, "fetchable_artwork_source_type");
  mlcore::MediaColumn<int>::MediaColumn((uint64_t)&v41, (uint64_t)v39, 0);
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v110, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
  else
    v110 = __s;
  if (SHIBYTE(v78.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v106, v78.__r_.__value_.__l.__data_, v78.__r_.__value_.__l.__size_);
  else
    v106 = v78;
  v105 = off_24C335B18;
  v108 = v80;
  v31 = v79;
  v107 = v79;
  v109 = v81;
  if (SHIBYTE(v72.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v102, v72.__r_.__value_.__l.__data_, v72.__r_.__value_.__l.__size_);
  else
    v102 = v72;
  v33 = v73;
  v103 = v73;
  v101 = off_24C335AF8;
  v32 = v74;
  v104 = v74;
  if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v98, v66.__r_.__value_.__l.__data_, v66.__r_.__value_.__l.__size_);
  else
    v98 = v66;
  v35 = v67;
  v99 = v67;
  v97 = off_24C335AF8;
  v34 = v68;
  v100 = v68;
  v92 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v93, v59.__r_.__value_.__l.__data_, v59.__r_.__value_.__l.__size_);
  else
    v93 = v59;
  v94 = v60;
  v92 = &off_24C335AB8;
  v95 = v61;
  if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v96, v62.__r_.__value_.__l.__data_, v62.__r_.__value_.__l.__size_);
  else
    v96 = v62;
  v87 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v88, v50.__r_.__value_.__l.__data_, v50.__r_.__value_.__l.__size_);
  else
    v88 = v50;
  v89 = v51;
  v87 = &off_24C335AB8;
  v90 = v52;
  if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v91, v53.__r_.__value_.__l.__data_, v53.__r_.__value_.__l.__size_);
  else
    v91 = v53;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v84, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  else
    v84 = __p;
  v37 = v43;
  v85 = v43;
  v83 = off_24C335AF8;
  v36 = v44;
  v86 = v44;
  *(_QWORD *)this = &off_24C330F50;
  v2 = (std::string *)((char *)this + 8);
  v3 = SHIBYTE(v110.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v110.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v2, v110.__r_.__value_.__l.__data_, v110.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = *(_OWORD *)&v110.__r_.__value_.__l.__data_;
    *((_QWORD *)this + 3) = *((_QWORD *)&v110.__r_.__value_.__l + 2);
  }
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 6) = 0;
  *((_QWORD *)this + 7) = 0;
  *(_QWORD *)this = &off_24C335750;
  *((_QWORD *)this + 8) = 0;
  *((_QWORD *)this + 9) = 0;
  v30 = SHIBYTE(v106.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v106.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v134, v106.__r_.__value_.__l.__data_, v106.__r_.__value_.__l.__size_);
  else
    v134 = v106;
  v133 = off_24C335B18;
  v136 = v108;
  v135 = v31;
  v137 = v109;
  v4 = SHIBYTE(v102.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v102.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v130, v102.__r_.__value_.__l.__data_, v102.__r_.__value_.__l.__size_);
  else
    v130 = v102;
  v131 = v33;
  v129 = off_24C335AF8;
  v132 = v32;
  v29 = SHIBYTE(v98.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v98.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v126, v98.__r_.__value_.__l.__data_, v98.__r_.__value_.__l.__size_);
  else
    v126 = v98;
  v127 = v35;
  v125 = off_24C335AF8;
  v128 = v34;
  v120 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v93.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v121, v93.__r_.__value_.__l.__data_, v93.__r_.__value_.__l.__size_);
  else
    v121 = v93;
  v122 = v94;
  v120 = &off_24C335AB8;
  v123 = v95;
  if (SHIBYTE(v96.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v124, v96.__r_.__value_.__l.__data_, v96.__r_.__value_.__l.__size_);
  else
    v124 = v96;
  v115 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v88.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v116, v88.__r_.__value_.__l.__data_, v88.__r_.__value_.__l.__size_);
  else
    v116 = v88;
  v117 = v89;
  v115 = &off_24C335AB8;
  v118 = v90;
  if (SHIBYTE(v91.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v119, v91.__r_.__value_.__l.__data_, v91.__r_.__value_.__l.__size_);
  else
    v119 = v91;
  v28 = SHIBYTE(v84.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v84.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v112, v84.__r_.__value_.__l.__data_, v84.__r_.__value_.__l.__size_);
  else
    v112 = v84;
  v113 = v37;
  v111 = off_24C335AF8;
  v114 = v36;
  v5 = SHIBYTE(v130.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v130.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v157, v130.__r_.__value_.__l.__data_, v130.__r_.__value_.__l.__size_);
  else
    v157 = v130;
  v158 = v33;
  v156 = off_24C335AF8;
  v159 = v32;
  v27 = SHIBYTE(v126.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v126.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v153, v126.__r_.__value_.__l.__data_, v126.__r_.__value_.__l.__size_);
  else
    v153 = v126;
  v154 = v35;
  v152 = off_24C335AF8;
  v155 = v34;
  v147 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v121.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v148, v121.__r_.__value_.__l.__data_, v121.__r_.__value_.__l.__size_);
  else
    v148 = v121;
  v149 = v122;
  v147 = &off_24C335AB8;
  v150 = v123;
  if (SHIBYTE(v124.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v151, v124.__r_.__value_.__l.__data_, v124.__r_.__value_.__l.__size_);
  else
    v151 = v124;
  v142 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v116.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v143, v116.__r_.__value_.__l.__data_, v116.__r_.__value_.__l.__size_);
  else
    v143 = v116;
  v144 = v117;
  v142 = &off_24C335AB8;
  v145 = v118;
  v26 = v5;
  if (SHIBYTE(v119.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v146, v119.__r_.__value_.__l.__data_, v119.__r_.__value_.__l.__size_);
  else
    v146 = v119;
  v25 = SHIBYTE(v112.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v112.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v139, v112.__r_.__value_.__l.__data_, v112.__r_.__value_.__l.__size_);
  else
    v139 = v112;
  v140 = v37;
  v138 = off_24C335AF8;
  v141 = v36;
  v6 = SHIBYTE(v153.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v153.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v175, v153.__r_.__value_.__l.__data_, v153.__r_.__value_.__l.__size_);
  else
    v175 = v153;
  v176 = v35;
  v174 = off_24C335AF8;
  v177 = v34;
  v169 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v148.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v170, v148.__r_.__value_.__l.__data_, v148.__r_.__value_.__l.__size_);
  else
    v170 = v148;
  v171 = v149;
  v169 = &off_24C335AB8;
  v172 = v150;
  if (SHIBYTE(v151.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v173, v151.__r_.__value_.__l.__data_, v151.__r_.__value_.__l.__size_);
  else
    v173 = v151;
  v164 = (uint64_t (**)())off_24C335D90;
  v24 = v6;
  if (SHIBYTE(v143.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v165, v143.__r_.__value_.__l.__data_, v143.__r_.__value_.__l.__size_);
  else
    v165 = v143;
  v166 = v144;
  v164 = &off_24C335AB8;
  v167 = v145;
  if (SHIBYTE(v146.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v168, v146.__r_.__value_.__l.__data_, v146.__r_.__value_.__l.__size_);
  else
    v168 = v146;
  v160 = (uint64_t (**)())off_24C335D90;
  v7 = SHIBYTE(v139.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v139.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v161, v139.__r_.__value_.__l.__data_, v139.__r_.__value_.__l.__size_);
  else
    v161 = v139;
  v162 = v37;
  v160 = off_24C335AF8;
  v163 = v36;
  v187 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v170.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v188, v170.__r_.__value_.__l.__data_, v170.__r_.__value_.__l.__size_);
  else
    v188 = v170;
  v189 = v171;
  v187 = &off_24C335AB8;
  v190 = v172;
  if (SHIBYTE(v173.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v191, v173.__r_.__value_.__l.__data_, v173.__r_.__value_.__l.__size_);
  else
    v191 = v173;
  v182 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v165.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v183, v165.__r_.__value_.__l.__data_, v165.__r_.__value_.__l.__size_);
  else
    v183 = v165;
  v184 = v166;
  v182 = &off_24C335AB8;
  v185 = v167;
  v23 = v7;
  if (SHIBYTE(v168.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v186, v168.__r_.__value_.__l.__data_, v168.__r_.__value_.__l.__size_);
  else
    v186 = v168;
  v178 = off_24C335D90;
  v8 = SHIBYTE(v161.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v161.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v179, v161.__r_.__value_.__l.__data_, v161.__r_.__value_.__l.__size_);
  else
    v179 = v161;
  v180 = v37;
  v181 = v36;
  v196 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v183.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v197, v183.__r_.__value_.__l.__data_, v183.__r_.__value_.__l.__size_);
  else
    v197 = v183;
  v198 = v184;
  v196 = &off_24C335AB8;
  v199 = v185;
  if (SHIBYTE(v186.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v200, v186.__r_.__value_.__l.__data_, v186.__r_.__value_.__l.__size_);
  else
    v200 = v186;
  v192 = off_24C335D90;
  v9 = SHIBYTE(v179.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v179.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v193, v179.__r_.__value_.__l.__data_, v179.__r_.__value_.__l.__size_);
  else
    v193 = v179;
  v194 = v37;
  v195 = v36;
  v201 = off_24C335D90;
  v10 = SHIBYTE(v193.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v193.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v202, v193.__r_.__value_.__l.__data_, v193.__r_.__value_.__l.__size_);
  else
    v202 = v193;
  v203 = v37;
  v204 = v36;
  *((_QWORD *)this + 10) = off_24C335D90;
  if (SHIBYTE(v202.__r_.__value_.__r.__words[2]) < 0)
  {
    v11 = (void *)v202.__r_.__value_.__r.__words[0];
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 88), v202.__r_.__value_.__l.__data_, v202.__r_.__value_.__l.__size_);
    *((_DWORD *)this + 28) = v37;
    *((_QWORD *)this + 10) = off_24C335AF8;
    *(_QWORD *)((char *)this + 116) = v36;
    v201 = off_24C335D90;
    operator delete(v11);
  }
  else
  {
    *(std::string *)((char *)this + 88) = v202;
    *((_DWORD *)this + 28) = v37;
    *((_QWORD *)this + 10) = off_24C335AF8;
    *(_QWORD *)((char *)this + 116) = v36;
    v201 = off_24C335D90;
  }
  *((_QWORD *)this + 16) = off_24C335D90;
  if (SHIBYTE(v197.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 136), v197.__r_.__value_.__l.__data_, v197.__r_.__value_.__l.__size_);
  else
    *(std::string *)((char *)this + 136) = v197;
  *((_DWORD *)this + 40) = v198;
  *((_QWORD *)this + 16) = &off_24C335AB8;
  *((_BYTE *)this + 164) = v199;
  v12 = (std::string *)((char *)this + 168);
  if (SHIBYTE(v200.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v12, v200.__r_.__value_.__l.__data_, v200.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v12->__r_.__value_.__l.__data_ = *(_OWORD *)&v200.__r_.__value_.__l.__data_;
    *((_QWORD *)this + 23) = *((_QWORD *)&v200.__r_.__value_.__l + 2);
  }
  v192 = off_24C335D90;
  if (v10 < 0)
    operator delete(v193.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v196);
  *((_QWORD *)this + 24) = off_24C335D90;
  if (SHIBYTE(v188.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 200), v188.__r_.__value_.__l.__data_, v188.__r_.__value_.__l.__size_);
  else
    *(std::string *)((char *)this + 200) = v188;
  *((_DWORD *)this + 56) = v189;
  *((_QWORD *)this + 24) = &off_24C335AB8;
  *((_BYTE *)this + 228) = v190;
  v13 = (std::string *)((char *)this + 232);
  if (SHIBYTE(v191.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v13, v191.__r_.__value_.__l.__data_, v191.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v13->__r_.__value_.__l.__data_ = *(_OWORD *)&v191.__r_.__value_.__l.__data_;
    *((_QWORD *)this + 31) = *((_QWORD *)&v191.__r_.__value_.__l + 2);
  }
  v178 = off_24C335D90;
  if (v9 < 0)
    operator delete(v179.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v182);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v187);
  *((_QWORD *)this + 32) = off_24C335D90;
  v14 = (std::string *)((char *)this + 264);
  v15 = SHIBYTE(v175.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v175.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v14, v175.__r_.__value_.__l.__data_, v175.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v14->__r_.__value_.__l.__data_ = *(_OWORD *)&v175.__r_.__value_.__l.__data_;
    *((_QWORD *)this + 35) = *((_QWORD *)&v175.__r_.__value_.__l + 2);
  }
  *((_DWORD *)this + 72) = v35;
  *((_QWORD *)this + 32) = off_24C335AF8;
  *(_QWORD *)((char *)this + 292) = v34;
  v160 = (uint64_t (**)())off_24C335D90;
  if (v8 < 0)
    operator delete(v161.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v164);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v169);
  v174 = (uint64_t (**)())off_24C335D90;
  if (v15 < 0)
    operator delete(v175.__r_.__value_.__l.__data_);
  *((_QWORD *)this + 38) = off_24C335D90;
  v16 = (std::string *)((char *)this + 312);
  v17 = SHIBYTE(v157.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v157.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v16, v157.__r_.__value_.__l.__data_, v157.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v16->__r_.__value_.__l.__data_ = *(_OWORD *)&v157.__r_.__value_.__l.__data_;
    *((_QWORD *)this + 41) = *((_QWORD *)&v157.__r_.__value_.__l + 2);
  }
  *((_DWORD *)this + 84) = v33;
  *((_QWORD *)this + 38) = off_24C335AF8;
  *(_QWORD *)((char *)this + 340) = v32;
  v138 = (uint64_t (**)())off_24C335D90;
  if (v23 < 0)
    operator delete(v139.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v142);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v147);
  if (v24 < 0)
  {
    operator delete(v153.__r_.__value_.__l.__data_);
    if ((v17 & 0x80000000) == 0)
      goto LABEL_154;
  }
  else if ((v17 & 0x80000000) == 0)
  {
    goto LABEL_154;
  }
  operator delete(v157.__r_.__value_.__l.__data_);
LABEL_154:
  *((_QWORD *)this + 44) = off_24C335D90;
  v18 = (std::string *)((char *)this + 360);
  v19 = SHIBYTE(v134.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v134.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v18, v134.__r_.__value_.__l.__data_, v134.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v18->__r_.__value_.__l.__data_ = *(_OWORD *)&v134.__r_.__value_.__l.__data_;
    *((_QWORD *)this + 47) = *((_QWORD *)&v134.__r_.__value_.__l + 2);
  }
  *((_DWORD *)this + 96) = v31;
  *((_QWORD *)this + 44) = off_24C335B18;
  *(_QWORD *)((char *)this + 388) = v136;
  *((_DWORD *)this + 99) = v137;
  if (v25 < 0)
    operator delete(v112.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v115);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v120);
  if (v27 < 0)
    operator delete(v126.__r_.__value_.__l.__data_);
  if (v26 < 0)
  {
    operator delete(v130.__r_.__value_.__l.__data_);
    if ((v19 & 0x80000000) == 0)
      goto LABEL_165;
  }
  else if ((v19 & 0x80000000) == 0)
  {
    goto LABEL_165;
  }
  operator delete(v134.__r_.__value_.__l.__data_);
LABEL_165:
  v83 = (uint64_t (**)())off_24C335D90;
  if (v28 < 0)
    operator delete(v84.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v87);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v92);
  v97 = (uint64_t (**)())off_24C335D90;
  if (v29 < 0)
    operator delete(v98.__r_.__value_.__l.__data_);
  v101 = (uint64_t (**)())off_24C335D90;
  if (v4 < 0)
    operator delete(v102.__r_.__value_.__l.__data_);
  v105 = (uint64_t (**)())off_24C335D90;
  if (v30 < 0)
    operator delete(v106.__r_.__value_.__l.__data_);
  if (v3 < 0)
    operator delete(v110.__r_.__value_.__l.__data_);
  *(_QWORD *)this = off_24C3362B8;
  *((_QWORD *)this + 50) = off_24C335D90;
  if (SHIBYTE(v78.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external((std::string *)this + 17, v78.__r_.__value_.__l.__data_, v78.__r_.__value_.__l.__size_);
  else
    *((std::string *)this + 17) = v78;
  *((_DWORD *)this + 108) = v79;
  *(_QWORD *)((char *)this + 436) = v80;
  *((_DWORD *)this + 111) = v81;
  *((_QWORD *)this + 50) = off_24C336AC0;
  *((_QWORD *)this + 56) = off_24C335D90;
  if (SHIBYTE(v72.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external((std::string *)this + 19, v72.__r_.__value_.__l.__data_, v72.__r_.__value_.__l.__size_);
  else
    *((std::string *)this + 19) = v72;
  *((_DWORD *)this + 120) = v73;
  *(_QWORD *)((char *)this + 484) = v74;
  *((_QWORD *)this + 56) = off_24C336AA0;
  *((_QWORD *)this + 62) = off_24C335D90;
  if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external((std::string *)this + 21, v66.__r_.__value_.__l.__data_, v66.__r_.__value_.__l.__size_);
  else
    *((std::string *)this + 21) = v66;
  *((_DWORD *)this + 132) = v67;
  *(_QWORD *)((char *)this + 532) = v68;
  *((_QWORD *)this + 62) = off_24C336AA0;
  std::__tuple_leaf<3ul,mlcore::MediaColumn<std::string>,false>::__tuple_leaf[abi:ne180100]<mlcore::MediaColumn<std::string>&,void>((uint64_t)this + 544, (uint64_t)v58);
  std::__tuple_leaf<4ul,mlcore::MediaColumn<std::string>,false>::__tuple_leaf[abi:ne180100]<mlcore::MediaColumn<std::string>&,void>((uint64_t)this + 608, (uint64_t)v49);
  *((_QWORD *)this + 84) = off_24C335D90;
  v20 = (std::string *)((char *)this + 680);
  v21 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v20, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    v21 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else
  {
    *(_OWORD *)&v20->__r_.__value_.__l.__data_ = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    *((_QWORD *)this + 87) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
  }
  *((_DWORD *)this + 176) = v43;
  *(_QWORD *)((char *)this + 708) = v44;
  *((_QWORD *)this + 84) = off_24C336AA0;
  v41 = off_24C335D90;
  if (v21 < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (v40 < 0)
    operator delete(v39[0]);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)v49);
  if (v46 < 0)
    operator delete(v45[0]);
  if (v48 < 0)
    operator delete(v47[0]);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)v58);
  if (v55 < 0)
    operator delete(v54[0]);
  if (v57 < 0)
    operator delete(v56[0]);
  v65 = off_24C335D90;
  if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v66.__r_.__value_.__l.__data_);
  if (v64 < 0)
    operator delete(v63[0]);
  v71 = off_24C335D90;
  if (SHIBYTE(v72.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v72.__r_.__value_.__l.__data_);
  if (v70 < 0)
    operator delete(v69[0]);
  v77 = off_24C335D90;
  if (SHIBYTE(v78.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v78.__r_.__value_.__l.__data_);
  if (v76 < 0)
    operator delete(v75[0]);
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__s.__r_.__value_.__l.__data_);
  *(_QWORD *)this = off_24C339F38;
  std::string::basic_string[abi:ne180100]<0>(&__str, "UNIQUE (entity_pid, entity_type, artwork_type)");
  std::string::operator=((std::string *)((char *)this + 56), &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  return this;
}

void sub_20A6AA698(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,uint64_t a40,void *__p,uint64_t a42,int a43,__int16 a44,char a45,char a46,uint64_t a47,uint64_t a48,void *a49,uint64_t a50,int a51,__int16 a52,char a53,char a54,void *a55,uint64_t a56,int a57,__int16 a58,char a59,char a60,char a61,uint64_t a62,uint64_t a63)
{
  void *a69;
  char a72;
  void *a73;
  char a74;
  char a75;
  void *a76;
  uint64_t v76;
  void **v77;
  void **v78;
  void **v79;
  uint64_t v80;
  uint64_t v81;

  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(v81);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(v80);
  *(_QWORD *)(v76 + 496) = off_24C335D90;
  if (*(char *)(v76 + 527) < 0)
    operator delete(*v79);
  *(_QWORD *)(v76 + 448) = off_24C335D90;
  if (*(char *)(v76 + 479) < 0)
    operator delete(*v78);
  *(_QWORD *)(v76 + 400) = off_24C335D90;
  if (*(char *)(v76 + 431) < 0)
    operator delete(*v77);
  mediaplatform::DatabaseTable<long long,int,int,std::string,std::string,int>::~DatabaseTable(v76);
  if (a46 < 0)
    operator delete(__p);
  if (a39 < 0)
    operator delete(a34);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&a61);
  if (a54 < 0)
    operator delete(a49);
  if (a60 < 0)
    operator delete(a55);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&a75);
  if (a72 < 0)
    operator delete(a69);
  if (a74 < 0)
    operator delete(a73);
  STACK[0x208] = (unint64_t)off_24C335D90;
  if (SLOBYTE(STACK[0x227]) < 0)
    operator delete((void *)STACK[0x210]);
  if (SLOBYTE(STACK[0x207]) < 0)
    operator delete(a76);
  STACK[0x250] = (unint64_t)off_24C335D90;
  if (SLOBYTE(STACK[0x26F]) < 0)
    operator delete((void *)STACK[0x258]);
  if (SLOBYTE(STACK[0x24F]) < 0)
    operator delete((void *)STACK[0x238]);
  STACK[0x298] = (unint64_t)off_24C335D90;
  if (SLOBYTE(STACK[0x2B7]) < 0)
    operator delete((void *)STACK[0x2A0]);
  if (SLOBYTE(STACK[0x297]) < 0)
    operator delete((void *)STACK[0x280]);
  if (SLOBYTE(STACK[0x2DF]) < 0)
    operator delete((void *)STACK[0x2C8]);
  _Unwind_Resume(a1);
}

void sub_20A6AAD3C()
{
  JUMPOUT(0x20A6AAC40);
}

void sub_20A6AAD44()
{
  JUMPOUT(0x20A6AAC50);
}

void sub_20A6AAD4C()
{
  JUMPOUT(0x20A6AAC58);
}

void sub_20A6AAD54()
{
  JUMPOUT(0x20A6AAC68);
}

void sub_20A6AAD5C()
{
  JUMPOUT(0x20A6AAC78);
}

void sub_20A6AAD64()
{
  JUMPOUT(0x20A6AAC80);
}

void sub_20A6AAD6C()
{
  JUMPOUT(0x20A6AAC90);
}

void sub_20A6AAD74()
{
  JUMPOUT(0x20A6AACA0);
}

void sub_20A6AAD7C()
{
  JUMPOUT(0x20A6AACBCLL);
}

void sub_20A6AAD84()
{
  JUMPOUT(0x20A6AACCCLL);
}

void sub_20A6AAD8C()
{
  JUMPOUT(0x20A6AACE8);
}

void sub_20A6AAD94()
{
  JUMPOUT(0x20A6AACF8);
}

void sub_20A6AAD9C()
{
  JUMPOUT(0x20A6AAD14);
}

void sub_20A6AADA4()
{
  JUMPOUT(0x20A6AAD24);
}

uint64_t mediaplatform::Singleton<mlcore::BaseLocationTable>::sharedInstance()
{
  unsigned __int8 v0;
  mlcore::BaseLocationTable **v2;

  if ((v0 & 1) == 0
  {
    v2 = (mlcore::BaseLocationTable **)operator new();
    _ZNSt3__115allocate_sharedB8ne180100IN6mlcore17BaseLocationTableENS_9allocatorIS2_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(v2);
    mediaplatform::Singleton<mlcore::BaseLocationTable>::sharedInstance(void)::_sharedInstance = (uint64_t)v2;
  }
  return mediaplatform::Singleton<mlcore::BaseLocationTable>::sharedInstance(void)::_sharedInstance;
}

void sub_20A6AAE20(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x20BD27AFC](v1, 0x20C40A4A59CD2);
  _Unwind_Resume(a1);
}

void mlcore::MediaTable<long long,std::string>::mediaColumnAtIndex<1ul>(uint64_t a1, uint64_t a2)
{
  std::string *v4;

  *(_QWORD *)a1 = off_24C335D90;
  if (*(char *)(a2 + 271) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 8), *(const std::string::value_type **)(a2 + 248), *(_QWORD *)(a2 + 256));
  }
  else
  {
    *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 248);
    *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 264);
  }
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 272);
  *(_QWORD *)a1 = &off_24C335AB8;
  *(_BYTE *)(a1 + 36) = *(_BYTE *)(a2 + 276);
  v4 = (std::string *)(a1 + 40);
  if (*(char *)(a2 + 303) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)(a2 + 280), *(_QWORD *)(a2 + 288));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)(a2 + 280);
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 296);
  }
  *(_QWORD *)a1 = &off_24C336A60;
}

void sub_20A6AAF10(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  uint64_t v3;

  *(_QWORD *)v1 = v3;
  if (*(char *)(v1 + 31) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

mlcore::BaseLocationTable *mlcore::BaseLocationTable::BaseLocationTable(mlcore::BaseLocationTable *this)
{
  void *__p[2];
  char v4;
  _BYTE v5[64];
  void *v6[2];
  char v7;
  _QWORD v8[3];
  char v9;
  void *v10[2];
  char v11;

  std::string::basic_string[abi:ne180100]<0>(v10, "base_location");
  std::string::basic_string[abi:ne180100]<0>(v6, "base_location_id");
  mlcore::MediaColumn<long long>::MediaColumn((uint64_t)v8, (uint64_t)v6, 1);
  std::string::basic_string[abi:ne180100]<0>(__p, "path");
  mlcore::MediaColumn<std::string>::MediaColumn((uint64_t)v5, (uint64_t)__p, 16);
  mlcore::MediaTable<long long,std::string>::MediaTable((uint64_t)this, (uint64_t)v10, (uint64_t)v8, (uint64_t)v5);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)v5);
  if (v4 < 0)
    operator delete(__p[0]);
  v8[0] = off_24C335D90;
  if (v9 < 0)
    operator delete((void *)v8[1]);
  if (v7 < 0)
    operator delete(v6[0]);
  if (v11 < 0)
    operator delete(v10[0]);
  *(_QWORD *)this = off_24C339658;
  return this;
}

void sub_20A6AB01C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  uint64_t v29;

  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&a16);
  if (a15 < 0)
    operator delete(__p);
  *(_QWORD *)(v29 - 88) = off_24C335D90;
  if (*(char *)(v29 - 57) < 0)
    operator delete(*(void **)(v29 - 80));
  if (a29 < 0)
    operator delete(a24);
  if (*(char *)(v29 - 17) < 0)
    operator delete(*(void **)(v29 - 40));
  _Unwind_Resume(a1);
}

uint64_t mlcore::TypedEntityClass<mlcore::BaseLocation>::sharedPointer()
{
  unint64_t v0;
  char v2;
  char **v3;
  char *v4;

  v0 = atomic_load(&mlcore::TypedEntityClass<mlcore::BaseLocation>::sharedPointer(void)::__once);
  if (v0 != -1)
  {
    v4 = &v2;
    v3 = &v4;
    std::__call_once(&mlcore::TypedEntityClass<mlcore::BaseLocation>::sharedPointer(void)::__once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::TypedEntityClass<mlcore::BaseLocation>::sharedPointer(void)::{lambda(void)#1} &&>>);
  }
  return mlcore::TypedEntityClass<mlcore::BaseLocation>::sharedPointer(void)::__sharedPointer;
}

uint64_t mlcore::PlaylistPropertyCategoryType(mlcore *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&mlcore::PlaylistPropertyCategoryType(void)::once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&mlcore::PlaylistPropertyCategoryType(void)::once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::PlaylistPropertyCategoryType(void)::$_0 &&>>);
  }
  return mlcore::PlaylistPropertyCategoryType(void)::property;
}

uint64_t mlcore::TypedEntityClass<mlcore::ItemArtist>::sharedPointer()
{
  unint64_t v0;
  char v2;
  char **v3;
  char *v4;

  v0 = atomic_load(&mlcore::TypedEntityClass<mlcore::ItemArtist>::sharedPointer(void)::__once);
  if (v0 != -1)
  {
    v4 = &v2;
    v3 = &v4;
    std::__call_once(&mlcore::TypedEntityClass<mlcore::ItemArtist>::sharedPointer(void)::__once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::TypedEntityClass<mlcore::ItemArtist>::sharedPointer(void)::{lambda(void)#1} &&>>);
  }
  return mlcore::TypedEntityClass<mlcore::ItemArtist>::sharedPointer(void)::__sharedPointer;
}

uint64_t mlcore::TypedEntityClass<mlcore::PlaylistAuthor>::databaseTable()
{
  return *(_QWORD *)mediaplatform::Singleton<mlcore::ContainerAuthorTable>::sharedInstance();
}

uint64_t mediaplatform::Singleton<mlcore::ContainerAuthorTable>::sharedInstance()
{
  unsigned __int8 v0;
  mlcore::ContainerAuthorTable **v2;

  if ((v0 & 1) == 0
  {
    v2 = (mlcore::ContainerAuthorTable **)operator new();
    _ZNSt3__115allocate_sharedB8ne180100IN6mlcore20ContainerAuthorTableENS_9allocatorIS2_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(v2);
    mediaplatform::Singleton<mlcore::ContainerAuthorTable>::sharedInstance(void)::_sharedInstance = (uint64_t)v2;
  }
  return mediaplatform::Singleton<mlcore::ContainerAuthorTable>::sharedInstance(void)::_sharedInstance;
}

void sub_20A6AB23C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x20BD27AFC](v1, 0x20C40A4A59CD2);
  _Unwind_Resume(a1);
}

uint64_t mlcore::TypedEntityClass<mlcore::PlaylistAuthor>::sharedPointer()
{
  unint64_t v0;
  char v2;
  char **v3;
  char *v4;

  v0 = atomic_load(&mlcore::TypedEntityClass<mlcore::PlaylistAuthor>::sharedPointer(void)::__once);
  if (v0 != -1)
  {
    v4 = &v2;
    v3 = &v4;
    std::__call_once(&mlcore::TypedEntityClass<mlcore::PlaylistAuthor>::sharedPointer(void)::__once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::TypedEntityClass<mlcore::PlaylistAuthor>::sharedPointer(void)::{lambda(void)#1} &&>>);
  }
  return mlcore::TypedEntityClass<mlcore::PlaylistAuthor>::sharedPointer(void)::__sharedPointer;
}

mlcore::ContainerAuthorTable *mlcore::ContainerAuthorTable::ContainerAuthorTable(mlcore::ContainerAuthorTable *this)
{
  std::string *v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  std::string *v11;
  int v12;
  std::string *v13;
  int v14;
  std::string *v15;
  int v16;
  std::string *v17;
  int v18;
  std::string *v19;
  _BOOL4 v20;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  int v39;
  int v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  int v46;
  void *v47[2];
  char v48;
  void (**v49)(mediaplatform::DatabaseColumnBase *__hidden);
  std::string __p;
  int v51;
  uint64_t v52;
  void *v53[2];
  char v54;
  void (**v55)(mediaplatform::DatabaseColumnBase *__hidden);
  std::string v56;
  int v57;
  uint64_t v58;
  void *v59[2];
  char v60;
  void (**v61)(mediaplatform::DatabaseColumnBase *__hidden);
  std::string v62;
  int v63;
  uint64_t v64;
  void *v65[2];
  char v66;
  void (**v67)(mediaplatform::DatabaseColumnBase *__hidden);
  std::string v68;
  int v69;
  uint64_t v70;
  int v71;
  void *v72[2];
  char v73;
  void (**v74)(mediaplatform::DatabaseColumnBase *__hidden);
  std::string v75;
  int v76;
  uint64_t v77;
  int v78;
  void *v79[2];
  char v80;
  void (**v81)(mediaplatform::DatabaseColumnBase *__hidden);
  std::string v82;
  int v83;
  uint64_t v84;
  int v85;
  std::string __s;
  uint64_t (**v87)();
  std::string v88;
  int v89;
  uint64_t v90;
  uint64_t (**v91)();
  std::string v92;
  int v93;
  uint64_t v94;
  uint64_t (**v95)();
  std::string v96;
  int v97;
  uint64_t v98;
  uint64_t (**v99)();
  std::string v100;
  int v101;
  uint64_t v102;
  int v103;
  uint64_t (**v104)();
  std::string v105;
  int v106;
  uint64_t v107;
  int v108;
  uint64_t (**v109)();
  std::string v110;
  int v111;
  uint64_t v112;
  int v113;
  std::string v114;
  uint64_t (**v115)();
  std::string v116;
  int v117;
  uint64_t v118;
  uint64_t (**v119)();
  std::string v120;
  int v121;
  uint64_t v122;
  uint64_t (**v123)();
  std::string v124;
  int v125;
  uint64_t v126;
  uint64_t (**v127)();
  std::string v128;
  int v129;
  uint64_t v130;
  int v131;
  uint64_t (**v132)();
  std::string v133;
  int v134;
  uint64_t v135;
  int v136;
  uint64_t (**v137)();
  std::string v138;
  int v139;
  uint64_t v140;
  int v141;
  uint64_t (**v142)();
  std::string v143;
  int v144;
  uint64_t v145;
  uint64_t (**v146)();
  std::string v147;
  int v148;
  uint64_t v149;
  uint64_t (**v150)();
  std::string v151;
  int v152;
  uint64_t v153;
  uint64_t (**v154)();
  std::string v155;
  int v156;
  uint64_t v157;
  int v158;
  uint64_t (**v159)();
  std::string v160;
  int v161;
  uint64_t v162;
  int v163;
  void (**v164)(mediaplatform::DatabaseColumnBase *__hidden);
  std::string v165;
  int v166;
  uint64_t v167;
  uint64_t (**v168)();
  std::string v169;
  int v170;
  uint64_t v171;
  uint64_t (**v172)();
  std::string v173;
  int v174;
  uint64_t v175;
  uint64_t (**v176)();
  std::string v177;
  int v178;
  uint64_t v179;
  int v180;
  void (**v181)(mediaplatform::DatabaseColumnBase *__hidden);
  std::string v182;
  int v183;
  uint64_t v184;
  void (**v185)(mediaplatform::DatabaseColumnBase *__hidden);
  std::string v186;
  int v187;
  uint64_t v188;
  void (**v189)(mediaplatform::DatabaseColumnBase *__hidden);
  std::string v190;
  int v191;
  uint64_t v192;
  uint64_t (**v193)();
  std::string v194;
  int v195;
  uint64_t v196;
  uint64_t (**v197)();
  std::string v198;
  int v199;
  uint64_t v200;

  std::string::basic_string[abi:ne180100]<0>(&__s, "container_author");
  std::string::basic_string[abi:ne180100]<0>(v79, "container_author_pid");
  mlcore::MediaColumn<long long>::MediaColumn((uint64_t)&v81, (uint64_t)v79, 1);
  std::string::basic_string[abi:ne180100]<0>(v72, "container_pid");
  mlcore::MediaColumn<long long>::MediaColumn((uint64_t)&v74, (uint64_t)v72);
  std::string::basic_string[abi:ne180100]<0>(v65, "person_pid");
  mlcore::MediaColumn<long long>::MediaColumn((uint64_t)&v67, (uint64_t)v65);
  std::string::basic_string[abi:ne180100]<0>(v59, "role");
  mlcore::MediaColumn<int>::MediaColumn((uint64_t)&v61, (uint64_t)v59, 0);
  std::string::basic_string[abi:ne180100]<0>(v53, "is_pending");
  mlcore::MediaColumn<int>::MediaColumn((uint64_t)&v55, (uint64_t)v53, 0);
  std::string::basic_string[abi:ne180100]<0>(v47, "position");
  mlcore::MediaColumn<int>::MediaColumn((uint64_t)&v49, (uint64_t)v47, 0);
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v114, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
  else
    v114 = __s;
  if (SHIBYTE(v82.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v110, v82.__r_.__value_.__l.__data_, v82.__r_.__value_.__l.__size_);
  else
    v110 = v82;
  v109 = off_24C335B18;
  v112 = v84;
  v38 = v83;
  v111 = v83;
  v113 = v85;
  if (SHIBYTE(v75.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v105, v75.__r_.__value_.__l.__data_, v75.__r_.__value_.__l.__size_);
  else
    v105 = v75;
  v104 = off_24C335B18;
  v107 = v77;
  v39 = v76;
  v106 = v76;
  v108 = v78;
  if (SHIBYTE(v68.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v100, v68.__r_.__value_.__l.__data_, v68.__r_.__value_.__l.__size_);
  else
    v100 = v68;
  v99 = off_24C335B18;
  v102 = v70;
  v40 = v69;
  v101 = v69;
  v103 = v71;
  if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v96, v62.__r_.__value_.__l.__data_, v62.__r_.__value_.__l.__size_);
  else
    v96 = v62;
  v46 = v63;
  v97 = v63;
  v95 = off_24C335AF8;
  v45 = v64;
  v98 = v64;
  if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v92, v56.__r_.__value_.__l.__data_, v56.__r_.__value_.__l.__size_);
  else
    v92 = v56;
  v44 = v57;
  v93 = v57;
  v91 = off_24C335AF8;
  v43 = v58;
  v94 = v58;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v88, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  else
    v88 = __p;
  v42 = v51;
  v89 = v51;
  v87 = off_24C335AF8;
  v41 = v52;
  v90 = v52;
  *(_QWORD *)this = &off_24C330F50;
  v2 = (std::string *)((char *)this + 8);
  v3 = SHIBYTE(v114.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v114.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v2, v114.__r_.__value_.__l.__data_, v114.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = *(_OWORD *)&v114.__r_.__value_.__l.__data_;
    *((_QWORD *)this + 3) = *((_QWORD *)&v114.__r_.__value_.__l + 2);
  }
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 6) = 0;
  *((_QWORD *)this + 7) = 0;
  *(_QWORD *)this = off_24C330CF0;
  *((_QWORD *)this + 8) = 0;
  *((_QWORD *)this + 9) = 0;
  v37 = SHIBYTE(v110.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v110.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v138, v110.__r_.__value_.__l.__data_, v110.__r_.__value_.__l.__size_);
  else
    v138 = v110;
  v137 = off_24C335B18;
  v140 = v112;
  v139 = v38;
  v141 = v113;
  v36 = SHIBYTE(v105.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v105.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v133, v105.__r_.__value_.__l.__data_, v105.__r_.__value_.__l.__size_);
  else
    v133 = v105;
  v132 = off_24C335B18;
  v135 = v107;
  v134 = v39;
  v136 = v108;
  v35 = SHIBYTE(v100.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v100.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v128, v100.__r_.__value_.__l.__data_, v100.__r_.__value_.__l.__size_);
  else
    v128 = v100;
  v127 = off_24C335B18;
  v130 = v102;
  v129 = v40;
  v131 = v103;
  v34 = SHIBYTE(v96.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v96.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v124, v96.__r_.__value_.__l.__data_, v96.__r_.__value_.__l.__size_);
  else
    v124 = v96;
  v125 = v46;
  v123 = off_24C335AF8;
  v126 = v45;
  v33 = SHIBYTE(v92.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v92.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v120, v92.__r_.__value_.__l.__data_, v92.__r_.__value_.__l.__size_);
  else
    v120 = v92;
  v121 = v44;
  v119 = off_24C335AF8;
  v122 = v43;
  v32 = SHIBYTE(v88.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v88.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v116, v88.__r_.__value_.__l.__data_, v88.__r_.__value_.__l.__size_);
  else
    v116 = v88;
  v117 = v42;
  v115 = off_24C335AF8;
  v118 = v41;
  v30 = SHIBYTE(v133.__r_.__value_.__r.__words[2]);
  v31 = v3;
  if (SHIBYTE(v133.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v160, v133.__r_.__value_.__l.__data_, v133.__r_.__value_.__l.__size_);
  else
    v160 = v133;
  v159 = off_24C335B18;
  v162 = v107;
  v161 = v39;
  v163 = v108;
  v4 = SHIBYTE(v128.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v128.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v155, v128.__r_.__value_.__l.__data_, v128.__r_.__value_.__l.__size_);
  else
    v155 = v128;
  v154 = off_24C335B18;
  v157 = v102;
  v156 = v40;
  v158 = v103;
  v29 = SHIBYTE(v124.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v124.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v151, v124.__r_.__value_.__l.__data_, v124.__r_.__value_.__l.__size_);
  else
    v151 = v124;
  v152 = v46;
  v150 = off_24C335AF8;
  v153 = v45;
  v146 = (uint64_t (**)())off_24C335D90;
  v28 = SHIBYTE(v120.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v120.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v147, v120.__r_.__value_.__l.__data_, v120.__r_.__value_.__l.__size_);
  else
    v147 = v120;
  v148 = v44;
  v146 = off_24C335AF8;
  v149 = v43;
  v142 = (uint64_t (**)())off_24C335D90;
  v27 = SHIBYTE(v116.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v116.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v143, v116.__r_.__value_.__l.__data_, v116.__r_.__value_.__l.__size_);
  else
    v143 = v116;
  v144 = v42;
  v142 = off_24C335AF8;
  v145 = v41;
  v176 = (uint64_t (**)())off_24C335D90;
  v26 = SHIBYTE(v155.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v155.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v177, v155.__r_.__value_.__l.__data_, v155.__r_.__value_.__l.__size_);
  else
    v177 = v155;
  v176 = off_24C335B18;
  v179 = v102;
  v178 = v40;
  v180 = v103;
  v172 = (uint64_t (**)())off_24C335D90;
  v5 = SHIBYTE(v151.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v151.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v173, v151.__r_.__value_.__l.__data_, v151.__r_.__value_.__l.__size_);
  else
    v173 = v151;
  v174 = v46;
  v172 = off_24C335AF8;
  v175 = v45;
  v168 = (uint64_t (**)())off_24C335D90;
  v6 = SHIBYTE(v147.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v147.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v169, v147.__r_.__value_.__l.__data_, v147.__r_.__value_.__l.__size_);
  else
    v169 = v147;
  v170 = v44;
  v168 = off_24C335AF8;
  v171 = v43;
  v164 = off_24C335D90;
  v25 = SHIBYTE(v143.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v143.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v165, v143.__r_.__value_.__l.__data_, v143.__r_.__value_.__l.__size_);
  else
    v165 = v143;
  v166 = v42;
  v167 = v41;
  v189 = off_24C335D90;
  v7 = SHIBYTE(v173.__r_.__value_.__r.__words[2]);
  v24 = v5;
  if (SHIBYTE(v173.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v190, v173.__r_.__value_.__l.__data_, v173.__r_.__value_.__l.__size_);
  else
    v190 = v173;
  v191 = v46;
  v192 = v45;
  v185 = off_24C335D90;
  v22 = SHIBYTE(v169.__r_.__value_.__r.__words[2]);
  v23 = v7;
  if (SHIBYTE(v169.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v186, v169.__r_.__value_.__l.__data_, v169.__r_.__value_.__l.__size_);
  else
    v186 = v169;
  v187 = v44;
  v188 = v43;
  v181 = off_24C335D90;
  v8 = SHIBYTE(v165.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v165.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v182, v165.__r_.__value_.__l.__data_, v165.__r_.__value_.__l.__size_);
  else
    v182 = v165;
  v183 = v42;
  v184 = v41;
  v197 = (uint64_t (**)())off_24C335D90;
  v9 = SHIBYTE(v186.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v186.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v198, v186.__r_.__value_.__l.__data_, v186.__r_.__value_.__l.__size_);
  else
    v198 = v186;
  v199 = v44;
  v197 = off_24C335AF8;
  v200 = v43;
  v193 = (uint64_t (**)())off_24C335D90;
  v10 = SHIBYTE(v182.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v182.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v194, v182.__r_.__value_.__l.__data_, v182.__r_.__value_.__l.__size_);
  else
    v194 = v182;
  v195 = v42;
  v193 = off_24C335AF8;
  v196 = v41;
  mediaplatform::DatabaseColumnTuple<4ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::DatabaseColumnTuple((uint64_t)this + 80, (uint64_t)&v197, (uint64_t)&v193);
  v193 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v194.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v194.__r_.__value_.__l.__data_);
  v197 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v198.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v198.__r_.__value_.__l.__data_);
  *((_QWORD *)this + 22) = off_24C335D90;
  v11 = (std::string *)((char *)this + 184);
  v12 = SHIBYTE(v190.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v190.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v11, v190.__r_.__value_.__l.__data_, v190.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v11->__r_.__value_.__l.__data_ = *(_OWORD *)&v190.__r_.__value_.__l.__data_;
    *((_QWORD *)this + 25) = *((_QWORD *)&v190.__r_.__value_.__l + 2);
  }
  *((_DWORD *)this + 52) = v46;
  *((_QWORD *)this + 22) = off_24C335AF8;
  *(_QWORD *)((char *)this + 212) = v45;
  v181 = off_24C335D90;
  if (v10 < 0)
    operator delete(v182.__r_.__value_.__l.__data_);
  v185 = off_24C335D90;
  if (v9 < 0)
    operator delete(v186.__r_.__value_.__l.__data_);
  v189 = off_24C335D90;
  if (v12 < 0)
    operator delete(v190.__r_.__value_.__l.__data_);
  *((_QWORD *)this + 28) = off_24C335D90;
  v13 = (std::string *)((char *)this + 232);
  v14 = SHIBYTE(v177.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v177.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v13, v177.__r_.__value_.__l.__data_, v177.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v13->__r_.__value_.__l.__data_ = *(_OWORD *)&v177.__r_.__value_.__l.__data_;
    *((_QWORD *)this + 31) = *((_QWORD *)&v177.__r_.__value_.__l + 2);
  }
  *((_DWORD *)this + 64) = v40;
  *((_QWORD *)this + 28) = off_24C335B18;
  *(_QWORD *)((char *)this + 260) = v179;
  *((_DWORD *)this + 67) = v180;
  v164 = off_24C335D90;
  if (v8 < 0)
    operator delete(v165.__r_.__value_.__l.__data_);
  v168 = (uint64_t (**)())off_24C335D90;
  if (v22 < 0)
    operator delete(v169.__r_.__value_.__l.__data_);
  v172 = (uint64_t (**)())off_24C335D90;
  if (v23 < 0)
    operator delete(v173.__r_.__value_.__l.__data_);
  v176 = (uint64_t (**)())off_24C335D90;
  if (v14 < 0)
    operator delete(v177.__r_.__value_.__l.__data_);
  *((_QWORD *)this + 34) = off_24C335D90;
  v15 = (std::string *)((char *)this + 280);
  v16 = SHIBYTE(v160.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v160.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v15, v160.__r_.__value_.__l.__data_, v160.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v15->__r_.__value_.__l.__data_ = *(_OWORD *)&v160.__r_.__value_.__l.__data_;
    *((_QWORD *)this + 37) = *((_QWORD *)&v160.__r_.__value_.__l + 2);
  }
  *((_DWORD *)this + 76) = v39;
  *((_QWORD *)this + 34) = off_24C335B18;
  *(_QWORD *)((char *)this + 308) = v162;
  *((_DWORD *)this + 79) = v163;
  v142 = (uint64_t (**)())off_24C335D90;
  if (v25 < 0)
    operator delete(v143.__r_.__value_.__l.__data_);
  v146 = (uint64_t (**)())off_24C335D90;
  if (v6 < 0)
    operator delete(v147.__r_.__value_.__l.__data_);
  v150 = (uint64_t (**)())off_24C335D90;
  if (v24 < 0)
    operator delete(v151.__r_.__value_.__l.__data_);
  if (v26 < 0)
  {
    operator delete(v155.__r_.__value_.__l.__data_);
    if ((v16 & 0x80000000) == 0)
      goto LABEL_120;
  }
  else if ((v16 & 0x80000000) == 0)
  {
    goto LABEL_120;
  }
  operator delete(v160.__r_.__value_.__l.__data_);
LABEL_120:
  *((_QWORD *)this + 40) = off_24C335D90;
  v17 = (std::string *)((char *)this + 328);
  v18 = SHIBYTE(v138.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v138.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v17, v138.__r_.__value_.__l.__data_, v138.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v17->__r_.__value_.__l.__data_ = *(_OWORD *)&v138.__r_.__value_.__l.__data_;
    *((_QWORD *)this + 43) = *((_QWORD *)&v138.__r_.__value_.__l + 2);
  }
  *((_DWORD *)this + 88) = v38;
  *((_QWORD *)this + 40) = off_24C335B18;
  *(_QWORD *)((char *)this + 356) = v140;
  *((_DWORD *)this + 91) = v141;
  if (v27 < 0)
    operator delete(v116.__r_.__value_.__l.__data_);
  if (v28 < 0)
    operator delete(v120.__r_.__value_.__l.__data_);
  if (v29 < 0)
    operator delete(v124.__r_.__value_.__l.__data_);
  if (v4 < 0)
    operator delete(v128.__r_.__value_.__l.__data_);
  if (v30 < 0)
  {
    operator delete(v133.__r_.__value_.__l.__data_);
    if ((v18 & 0x80000000) == 0)
      goto LABEL_135;
  }
  else if ((v18 & 0x80000000) == 0)
  {
    goto LABEL_135;
  }
  operator delete(v138.__r_.__value_.__l.__data_);
LABEL_135:
  v87 = (uint64_t (**)())off_24C335D90;
  if (v32 < 0)
    operator delete(v88.__r_.__value_.__l.__data_);
  v91 = (uint64_t (**)())off_24C335D90;
  if (v33 < 0)
    operator delete(v92.__r_.__value_.__l.__data_);
  v95 = (uint64_t (**)())off_24C335D90;
  if (v34 < 0)
    operator delete(v96.__r_.__value_.__l.__data_);
  v99 = (uint64_t (**)())off_24C335D90;
  if (v35 < 0)
    operator delete(v100.__r_.__value_.__l.__data_);
  v104 = (uint64_t (**)())off_24C335D90;
  if (v36 < 0)
    operator delete(v105.__r_.__value_.__l.__data_);
  v109 = (uint64_t (**)())off_24C335D90;
  if (v37 < 0)
  {
    operator delete(v110.__r_.__value_.__l.__data_);
    if ((v31 & 0x80000000) == 0)
      goto LABEL_147;
  }
  else if ((v31 & 0x80000000) == 0)
  {
    goto LABEL_147;
  }
  operator delete(v114.__r_.__value_.__l.__data_);
LABEL_147:
  *(_QWORD *)this = off_24C331598;
  *((_QWORD *)this + 46) = off_24C335D90;
  if (SHIBYTE(v82.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 376), v82.__r_.__value_.__l.__data_, v82.__r_.__value_.__l.__size_);
  else
    *(std::string *)((char *)this + 376) = v82;
  *((_DWORD *)this + 100) = v83;
  *(_QWORD *)((char *)this + 404) = v84;
  *((_DWORD *)this + 103) = v85;
  *((_QWORD *)this + 46) = off_24C336AC0;
  *((_QWORD *)this + 52) = off_24C335D90;
  if (SHIBYTE(v75.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 424), v75.__r_.__value_.__l.__data_, v75.__r_.__value_.__l.__size_);
  else
    *(std::string *)((char *)this + 424) = v75;
  *((_DWORD *)this + 112) = v76;
  *(_QWORD *)((char *)this + 452) = v77;
  *((_DWORD *)this + 115) = v78;
  *((_QWORD *)this + 52) = off_24C336AC0;
  *((_QWORD *)this + 58) = off_24C335D90;
  if (SHIBYTE(v68.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 472), v68.__r_.__value_.__l.__data_, v68.__r_.__value_.__l.__size_);
  else
    *(std::string *)((char *)this + 472) = v68;
  *((_DWORD *)this + 124) = v69;
  *(_QWORD *)((char *)this + 500) = v70;
  *((_DWORD *)this + 127) = v71;
  *((_QWORD *)this + 58) = off_24C336AC0;
  *((_QWORD *)this + 64) = off_24C335D90;
  if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 520), v62.__r_.__value_.__l.__data_, v62.__r_.__value_.__l.__size_);
  else
    *(std::string *)((char *)this + 520) = v62;
  *((_DWORD *)this + 136) = v63;
  *(_QWORD *)((char *)this + 548) = v64;
  *((_QWORD *)this + 64) = off_24C336AA0;
  *((_QWORD *)this + 70) = off_24C335D90;
  if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 568), v56.__r_.__value_.__l.__data_, v56.__r_.__value_.__l.__size_);
  else
    *(std::string *)((char *)this + 568) = v56;
  *((_DWORD *)this + 148) = v57;
  *(_QWORD *)((char *)this + 596) = v58;
  *((_QWORD *)this + 70) = off_24C336AA0;
  *((_QWORD *)this + 76) = off_24C335D90;
  v19 = (std::string *)((char *)this + 616);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v19, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    v20 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0;
  }
  else
  {
    v20 = 0;
    *(_OWORD *)&v19->__r_.__value_.__l.__data_ = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    *((_QWORD *)this + 79) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
  }
  *((_DWORD *)this + 160) = v51;
  *(_QWORD *)((char *)this + 644) = v52;
  *((_QWORD *)this + 76) = off_24C336AA0;
  v49 = off_24C335D90;
  if (v20)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (v48 < 0)
    operator delete(v47[0]);
  v55 = off_24C335D90;
  if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v56.__r_.__value_.__l.__data_);
  if (v54 < 0)
    operator delete(v53[0]);
  v61 = off_24C335D90;
  if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v62.__r_.__value_.__l.__data_);
  if (v60 < 0)
    operator delete(v59[0]);
  v67 = off_24C335D90;
  if (SHIBYTE(v68.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v68.__r_.__value_.__l.__data_);
  if (v66 < 0)
    operator delete(v65[0]);
  v74 = off_24C335D90;
  if (SHIBYTE(v75.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v75.__r_.__value_.__l.__data_);
  if (v73 < 0)
    operator delete(v72[0]);
  v81 = off_24C335D90;
  if (SHIBYTE(v82.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v82.__r_.__value_.__l.__data_);
  if (v80 < 0)
    operator delete(v79[0]);
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__s.__r_.__value_.__l.__data_);
  *(_QWORD *)this = off_24C339E00;
  return this;
}

void sub_20A6AC42C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,uint64_t a42,void *__p,uint64_t a44,int a45,__int16 a46,char a47,char a48,uint64_t a49,uint64_t a50,void *a51,uint64_t a52,int a53,__int16 a54,char a55,char a56,uint64_t a57,void *a58,uint64_t a59,int a60,__int16 a61,char a62,char a63)
{
  void *a66;
  char a71;
  void *a72;
  char a73;
  void *a74;
  char a75;
  void *a76;
  char a77;
  void *a78;
  uint64_t v78;
  void **v79;
  void **v80;
  void **v81;
  void **v82;
  void **v83;
  uint64_t v84;

  *(_QWORD *)(v78 + 560) = v84;
  if (*(char *)(v78 + 591) < 0)
    operator delete(*v83);
  *(_QWORD *)(v78 + 512) = v84;
  if (*(char *)(v78 + 543) < 0)
    operator delete(*v82);
  *(_QWORD *)(v78 + 464) = v84;
  if (*(char *)(v78 + 495) < 0)
    operator delete(*v81);
  *(_QWORD *)(v78 + 416) = v84;
  if (*(char *)(v78 + 447) < 0)
    operator delete(*v80);
  *(_QWORD *)(v78 + 368) = v84;
  if (*(char *)(v78 + 399) < 0)
    operator delete(*v79);
  mediaplatform::DatabaseTable<long long,long long,long long,int,int,int>::~DatabaseTable(v78);
  if (a48 < 0)
    operator delete(__p);
  if (a41 < 0)
    operator delete(a36);
  if (a63 < 0)
    operator delete(a58);
  if (a56 < 0)
    operator delete(a51);
  if (a73 < 0)
    operator delete(a72);
  if (a71 < 0)
    operator delete(a66);
  if (a77 < 0)
    operator delete(a76);
  if (a75 < 0)
    operator delete(a74);
  STACK[0x210] = (unint64_t)off_24C335D90;
  if (SLOBYTE(STACK[0x22F]) < 0)
    operator delete((void *)STACK[0x218]);
  if (SLOBYTE(STACK[0x20F]) < 0)
    operator delete(a78);
  STACK[0x258] = (unint64_t)off_24C335D90;
  if (SLOBYTE(STACK[0x277]) < 0)
    operator delete((void *)STACK[0x260]);
  if (SLOBYTE(STACK[0x257]) < 0)
    operator delete((void *)STACK[0x240]);
  if (SLOBYTE(STACK[0x29F]) < 0)
    operator delete((void *)STACK[0x288]);
  _Unwind_Resume(a1);
}

void sub_20A6AC92C()
{
  JUMPOUT(0x20A6AC828);
}

void sub_20A6AC934()
{
  JUMPOUT(0x20A6AC838);
}

void sub_20A6AC93C()
{
  JUMPOUT(0x20A6AC854);
}

void sub_20A6AC944()
{
  JUMPOUT(0x20A6AC864);
}

void sub_20A6AC94C()
{
  JUMPOUT(0x20A6AC880);
}

void sub_20A6AC954()
{
  JUMPOUT(0x20A6AC890);
}

void sub_20A6AC95C()
{
  JUMPOUT(0x20A6AC8ACLL);
}

void sub_20A6AC964()
{
  JUMPOUT(0x20A6AC8BCLL);
}

void sub_20A6AC96C()
{
  JUMPOUT(0x20A6AC8D8);
}

void sub_20A6AC974()
{
  JUMPOUT(0x20A6AC8E8);
}

void sub_20A6AC97C()
{
  JUMPOUT(0x20A6AC904);
}

void sub_20A6AC984()
{
  JUMPOUT(0x20A6AC914);
}

uint64_t mlcore::AlbumPropertyPreOrderItemCount(mlcore *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&mlcore::AlbumPropertyPreOrderItemCount(void)::once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&mlcore::AlbumPropertyPreOrderItemCount(void)::once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::AlbumPropertyPreOrderItemCount(void)::$_0 &&>>);
  }
  return mlcore::AlbumPropertyPreOrderItemCount(void)::property;
}

uint64_t mlcore::ItemPropertyRemoteLocationID(mlcore *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&mlcore::ItemPropertyRemoteLocationID(void)::once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&mlcore::ItemPropertyRemoteLocationID(void)::once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyRemoteLocationID(void)::$_0 &&>>);
  }
  return mlcore::ItemPropertyRemoteLocationID(void)::property;
}

void mlcore::DeviceLibrary::setExpectedEntityQuerySize(mlcore::DeviceLibrary *this, unint64_t a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  void **v12;
  _QWORD *v13;
  unint64_t v14;
  float v15;
  float v16;
  _BOOL8 v17;
  unint64_t v18;
  unint64_t v19;
  int8x8_t prime;
  void *v21;
  void *v22;
  uint64_t v23;
  _QWORD *v24;
  unint64_t v25;
  uint8x8_t v26;
  unint64_t v27;
  uint8x8_t v28;
  uint64_t v29;
  _QWORD *v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  unint64_t v35;
  void *v36;

  v7 = 0x9DDFEA08EB382D69 * (((8 * a2) + 8) ^ HIDWORD(a2));
  v8 = 0x9DDFEA08EB382D69 * (HIDWORD(a2) ^ (v7 >> 47) ^ v7);
  v9 = 0x9DDFEA08EB382D69 * (v8 ^ (v8 >> 47));
  v10 = *((_QWORD *)this + 22);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    if (v11.u32[0] > 1uLL)
    {
      v3 = 0x9DDFEA08EB382D69 * (v8 ^ (v8 >> 47));
      if (v9 >= v10)
        v3 = v9 % v10;
    }
    else
    {
      v3 = v9 & (v10 - 1);
    }
    v12 = *(void ***)(*((_QWORD *)this + 21) + 8 * v3);
    if (v12)
    {
      v13 = *v12;
      if (*v12)
      {
        do
        {
          v14 = v13[1];
          if (v14 == v9)
          {
            if (v13[2] == a2)
              goto LABEL_74;
          }
          else
          {
            if (v11.u32[0] > 1uLL)
            {
              if (v14 >= v10)
                v14 %= v10;
            }
            else
            {
              v14 &= v10 - 1;
            }
            if (v14 != v3)
              break;
          }
          v13 = (_QWORD *)*v13;
        }
        while (v13);
      }
    }
  }
  v13 = operator new(0x20uLL);
  *v13 = 0;
  v13[1] = v9;
  v13[2] = a2;
  v13[3] = 0;
  v15 = (float)(unint64_t)(*((_QWORD *)this + 24) + 1);
  v16 = *((float *)this + 50);
  if (!v10 || (float)(v16 * (float)v10) < v15)
  {
    v17 = 1;
    if (v10 >= 3)
      v17 = (v10 & (v10 - 1)) != 0;
    v18 = v17 | (2 * v10);
    v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19)
      prime = (int8x8_t)v19;
    else
      prime = (int8x8_t)v18;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
      v10 = *((_QWORD *)this + 22);
    }
    if (*(_QWORD *)&prime > v10)
      goto LABEL_30;
    if (*(_QWORD *)&prime < v10)
    {
      v27 = vcvtps_u32_f32((float)*((unint64_t *)this + 24) / *((float *)this + 50));
      if (v10 < 3 || (v28 = (uint8x8_t)vcnt_s8((int8x8_t)v10), v28.i16[0] = vaddlv_u8(v28), v28.u32[0] > 1uLL))
      {
        v27 = std::__next_prime(v27);
      }
      else
      {
        v29 = 1 << -(char)__clz(v27 - 1);
        if (v27 >= 2)
          v27 = v29;
      }
      if (*(_QWORD *)&prime <= v27)
        prime = (int8x8_t)v27;
      if (*(_QWORD *)&prime >= v10)
      {
        v10 = *((_QWORD *)this + 22);
      }
      else
      {
        if (prime)
        {
LABEL_30:
          if (*(_QWORD *)&prime >> 61)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v21 = operator new(8 * *(_QWORD *)&prime);
          v22 = (void *)*((_QWORD *)this + 21);
          *((_QWORD *)this + 21) = v21;
          if (v22)
            operator delete(v22);
          v23 = 0;
          *((int8x8_t *)this + 22) = prime;
          do
            *(_QWORD *)(*((_QWORD *)this + 21) + 8 * v23++) = 0;
          while (*(_QWORD *)&prime != v23);
          v24 = (_QWORD *)*((_QWORD *)this + 23);
          if (v24)
          {
            v25 = v24[1];
            v26 = (uint8x8_t)vcnt_s8(prime);
            v26.i16[0] = vaddlv_u8(v26);
            if (v26.u32[0] > 1uLL)
            {
              if (v25 >= *(_QWORD *)&prime)
                v25 %= *(_QWORD *)&prime;
            }
            else
            {
              v25 &= *(_QWORD *)&prime - 1;
            }
            *(_QWORD *)(*((_QWORD *)this + 21) + 8 * v25) = (char *)this + 184;
            v30 = (_QWORD *)*v24;
            if (*v24)
            {
              do
              {
                v31 = v30[1];
                if (v26.u32[0] > 1uLL)
                {
                  if (v31 >= *(_QWORD *)&prime)
                    v31 %= *(_QWORD *)&prime;
                }
                else
                {
                  v31 &= *(_QWORD *)&prime - 1;
                }
                if (v31 != v25)
                {
                  v32 = *((_QWORD *)this + 21);
                  if (!*(_QWORD *)(v32 + 8 * v31))
                  {
                    *(_QWORD *)(v32 + 8 * v31) = v24;
                    goto LABEL_55;
                  }
                  *v24 = *v30;
                  *v30 = **(_QWORD **)(*((_QWORD *)this + 21) + 8 * v31);
                  **(_QWORD **)(*((_QWORD *)this + 21) + 8 * v31) = v30;
                  v30 = v24;
                }
                v31 = v25;
LABEL_55:
                v24 = v30;
                v30 = (_QWORD *)*v30;
                v25 = v31;
              }
              while (v30);
            }
          }
          v10 = (unint64_t)prime;
          goto LABEL_59;
        }
        v36 = (void *)*((_QWORD *)this + 21);
        *((_QWORD *)this + 21) = 0;
        if (v36)
          operator delete(v36);
        v10 = 0;
        *((_QWORD *)this + 22) = 0;
      }
    }
LABEL_59:
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
        v3 = v9 % v10;
      else
        v3 = v9;
    }
    else
    {
      v3 = (v10 - 1) & v9;
    }
  }
  v33 = *((_QWORD *)this + 21);
  v34 = *(_QWORD **)(v33 + 8 * v3);
  if (v34)
  {
    *v13 = *v34;
LABEL_72:
    *v34 = v13;
    goto LABEL_73;
  }
  *v13 = *((_QWORD *)this + 23);
  *((_QWORD *)this + 23) = v13;
  *(_QWORD *)(v33 + 8 * v3) = (char *)this + 184;
  if (*v13)
  {
    v35 = *(_QWORD *)(*v13 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v35 >= v10)
        v35 %= v10;
    }
    else
    {
      v35 &= v10 - 1;
    }
    v34 = (_QWORD *)(*((_QWORD *)this + 21) + 8 * v35);
    goto LABEL_72;
  }
LABEL_73:
  ++*((_QWORD *)this + 24);
LABEL_74:
  v13[3] = a3;
}

void sub_20A6ACE54(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *mlcore::MultiEntityQuery::setViewForEntityClass(uint64_t a1, uint64_t *a2, unint64_t a3)
{
  unint64_t v3;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  _QWORD **v12;
  _QWORD *i;
  unint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  float v17;
  float v18;
  _BOOL8 v19;
  unint64_t v20;
  unint64_t v21;
  int8x8_t prime;
  void *v23;
  void *v24;
  uint64_t v25;
  _QWORD *v26;
  unint64_t v27;
  uint8x8_t v28;
  unint64_t v29;
  uint8x8_t v30;
  uint64_t v31;
  _QWORD *v32;
  unint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  unint64_t v36;
  void *v38;
  _QWORD v39[2];
  char v40;

  v7 = 0x9DDFEA08EB382D69 * (((8 * a3) + 8) ^ HIDWORD(a3));
  v8 = 0x9DDFEA08EB382D69 * (HIDWORD(a3) ^ (v7 >> 47) ^ v7);
  v9 = 0x9DDFEA08EB382D69 * (v8 ^ (v8 >> 47));
  v10 = *(_QWORD *)(a1 + 256);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    if (v11.u32[0] > 1uLL)
    {
      v3 = 0x9DDFEA08EB382D69 * (v8 ^ (v8 >> 47));
      if (v9 >= v10)
        v3 = v9 % v10;
    }
    else
    {
      v3 = v9 & (v10 - 1);
    }
    v12 = *(_QWORD ***)(*(_QWORD *)(a1 + 248) + 8 * v3);
    if (v12)
    {
      for (i = *v12; i; i = (_QWORD *)*i)
      {
        v14 = i[1];
        if (v14 == v9)
        {
          if (i[2] == a3)
            return std::shared_ptr<mlcore::Predicate>::operator=[abi:ne180100](i + 3, *a2, a2[1]);
        }
        else
        {
          if (v11.u32[0] > 1uLL)
          {
            if (v14 >= v10)
              v14 %= v10;
          }
          else
          {
            v14 &= v10 - 1;
          }
          if (v14 != v3)
            break;
        }
      }
    }
  }
  v15 = (_QWORD *)(a1 + 264);
  v16 = operator new(0x28uLL);
  v39[0] = v16;
  v39[1] = a1 + 264;
  *v16 = 0;
  v16[1] = v9;
  v16[3] = 0;
  v16[4] = 0;
  v16[2] = a3;
  v40 = 1;
  v17 = (float)(unint64_t)(*(_QWORD *)(a1 + 272) + 1);
  v18 = *(float *)(a1 + 280);
  if (!v10 || (float)(v18 * (float)v10) < v17)
  {
    v19 = 1;
    if (v10 >= 3)
      v19 = (v10 & (v10 - 1)) != 0;
    v20 = v19 | (2 * v10);
    v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21)
      prime = (int8x8_t)v21;
    else
      prime = (int8x8_t)v20;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
      v10 = *(_QWORD *)(a1 + 256);
    }
    if (*(_QWORD *)&prime > v10)
      goto LABEL_30;
    if (*(_QWORD *)&prime < v10)
    {
      v29 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 272) / *(float *)(a1 + 280));
      if (v10 < 3 || (v30 = (uint8x8_t)vcnt_s8((int8x8_t)v10), v30.i16[0] = vaddlv_u8(v30), v30.u32[0] > 1uLL))
      {
        v29 = std::__next_prime(v29);
      }
      else
      {
        v31 = 1 << -(char)__clz(v29 - 1);
        if (v29 >= 2)
          v29 = v31;
      }
      if (*(_QWORD *)&prime <= v29)
        prime = (int8x8_t)v29;
      if (*(_QWORD *)&prime >= v10)
      {
        v10 = *(_QWORD *)(a1 + 256);
      }
      else
      {
        if (prime)
        {
LABEL_30:
          if (*(_QWORD *)&prime >> 61)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v23 = operator new(8 * *(_QWORD *)&prime);
          v24 = *(void **)(a1 + 248);
          *(_QWORD *)(a1 + 248) = v23;
          if (v24)
            operator delete(v24);
          v25 = 0;
          *(int8x8_t *)(a1 + 256) = prime;
          do
            *(_QWORD *)(*(_QWORD *)(a1 + 248) + 8 * v25++) = 0;
          while (*(_QWORD *)&prime != v25);
          v26 = (_QWORD *)*v15;
          if (*v15)
          {
            v27 = v26[1];
            v28 = (uint8x8_t)vcnt_s8(prime);
            v28.i16[0] = vaddlv_u8(v28);
            if (v28.u32[0] > 1uLL)
            {
              if (v27 >= *(_QWORD *)&prime)
                v27 %= *(_QWORD *)&prime;
            }
            else
            {
              v27 &= *(_QWORD *)&prime - 1;
            }
            *(_QWORD *)(*(_QWORD *)(a1 + 248) + 8 * v27) = v15;
            v32 = (_QWORD *)*v26;
            if (*v26)
            {
              do
              {
                v33 = v32[1];
                if (v28.u32[0] > 1uLL)
                {
                  if (v33 >= *(_QWORD *)&prime)
                    v33 %= *(_QWORD *)&prime;
                }
                else
                {
                  v33 &= *(_QWORD *)&prime - 1;
                }
                if (v33 != v27)
                {
                  v34 = *(_QWORD *)(a1 + 248);
                  if (!*(_QWORD *)(v34 + 8 * v33))
                  {
                    *(_QWORD *)(v34 + 8 * v33) = v26;
                    goto LABEL_55;
                  }
                  *v26 = *v32;
                  *v32 = **(_QWORD **)(*(_QWORD *)(a1 + 248) + 8 * v33);
                  **(_QWORD **)(*(_QWORD *)(a1 + 248) + 8 * v33) = v32;
                  v32 = v26;
                }
                v33 = v27;
LABEL_55:
                v26 = v32;
                v32 = (_QWORD *)*v32;
                v27 = v33;
              }
              while (v32);
            }
          }
          v10 = (unint64_t)prime;
          goto LABEL_59;
        }
        v38 = *(void **)(a1 + 248);
        *(_QWORD *)(a1 + 248) = 0;
        if (v38)
          operator delete(v38);
        v10 = 0;
        *(_QWORD *)(a1 + 256) = 0;
      }
    }
LABEL_59:
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
        v3 = v9 % v10;
      else
        v3 = v9;
    }
    else
    {
      v3 = (v10 - 1) & v9;
    }
  }
  v35 = *(_QWORD **)(*(_QWORD *)(a1 + 248) + 8 * v3);
  i = (_QWORD *)v39[0];
  if (v35)
  {
    *(_QWORD *)v39[0] = *v35;
LABEL_72:
    *v35 = i;
    goto LABEL_73;
  }
  *(_QWORD *)v39[0] = *(_QWORD *)(a1 + 264);
  *(_QWORD *)(a1 + 264) = i;
  *(_QWORD *)(*(_QWORD *)(a1 + 248) + 8 * v3) = v15;
  if (*i)
  {
    v36 = *(_QWORD *)(*i + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v36 >= v10)
        v36 %= v10;
    }
    else
    {
      v36 &= v10 - 1;
    }
    v35 = (_QWORD *)(*(_QWORD *)(a1 + 248) + 8 * v36);
    goto LABEL_72;
  }
LABEL_73:
  v39[0] = 0;
  ++*(_QWORD *)(a1 + 272);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<mlcore::LocalizedSearchScope *,std::shared_ptr<mlcore::EntityQueryResult>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<mlcore::LocalizedSearchScope *,std::shared_ptr<mlcore::EntityQueryResult>>,void *>>>>::reset[abi:ne180100]((uint64_t)v39);
  return std::shared_ptr<mlcore::Predicate>::operator=[abi:ne180100](i + 3, *a2, a2[1]);
}

void sub_20A6AD2A0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<mlcore::LocalizedSearchScope *,std::shared_ptr<mlcore::EntityQueryResult>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<mlcore::LocalizedSearchScope *,std::shared_ptr<mlcore::EntityQueryResult>>,void *>>>>::reset[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t mlcore::DatabaseModelProperty<mediaplatform::Data>::DatabaseModelProperty(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  __int128 v5;

  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_QWORD *)a1 = &off_24C339F70;
  *(_QWORD *)(a1 + 64) = *a2;
  *(_QWORD *)(a1 + 72) = off_24C335D90;
  if (*(char *)(a3 + 31) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 80), *(const std::string::value_type **)(a3 + 8), *(_QWORD *)(a3 + 16));
  }
  else
  {
    v5 = *(_OWORD *)(a3 + 8);
    *(_QWORD *)(a1 + 96) = *(_QWORD *)(a3 + 24);
    *(_OWORD *)(a1 + 80) = v5;
  }
  *(_DWORD *)(a1 + 104) = *(_DWORD *)(a3 + 32);
  *(_QWORD *)(a1 + 72) = &off_24C335A98;
  *(_BYTE *)(a1 + 108) = *(_BYTE *)(a3 + 36);
  mediaplatform::Data::Data((mediaplatform::Data *)(a1 + 112), (const mediaplatform::Data *)(a3 + 40));
  *(_QWORD *)(a1 + 72) = &off_24C336A40;
  return a1;
}

void sub_20A6AD36C(_Unwind_Exception *a1)
{
  void **v1;

  mlcore::ModelPropertyBase::~ModelPropertyBase(v1);
  _Unwind_Resume(a1);
}

uint64_t mediaplatform::Singleton<mlcore::ContainerItemPersonTable>::sharedInstance()
{
  unsigned __int8 v0;
  mlcore::ContainerItemPersonTable **v2;

  if ((v0 & 1) == 0
  {
    v2 = (mlcore::ContainerItemPersonTable **)operator new();
    _ZNSt3__115allocate_sharedB8ne180100IN6mlcore24ContainerItemPersonTableENS_9allocatorIS2_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(v2);
    mediaplatform::Singleton<mlcore::ContainerItemPersonTable>::sharedInstance(void)::_sharedInstance = (uint64_t)v2;
  }
  return mediaplatform::Singleton<mlcore::ContainerItemPersonTable>::sharedInstance(void)::_sharedInstance;
}

void sub_20A6AD410(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x20BD27AFC](v1, 0x20C40A4A59CD2);
  _Unwind_Resume(a1);
}

mlcore::ContainerItemPersonTable *mlcore::ContainerItemPersonTable::ContainerItemPersonTable(mlcore::ContainerItemPersonTable *this)
{
  int v2;
  int v3;
  std::string *v4;
  int v5;
  int v6;
  int v7;
  void *v8;
  std::string *v9;
  int v10;
  std::string *v11;
  int v12;
  int v13;
  std::string *v14;
  int v15;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  void *v22[2];
  char v23;
  void (**v24)(mediaplatform::DatabaseColumnBase *__hidden);
  std::string v25;
  int v26;
  uint64_t v27;
  int v28;
  void *v29[2];
  char v30;
  void (**v31)(mediaplatform::DatabaseColumnBase *__hidden);
  std::string v32;
  int v33;
  uint64_t v34;
  int v35;
  void *v36[2];
  char v37;
  void (**v38)(mediaplatform::DatabaseColumnBase *__hidden);
  std::string v39;
  int v40;
  uint64_t v41;
  int v42;
  std::string v43;
  uint64_t (**v44)();
  std::string v45;
  int v46;
  uint64_t v47;
  int v48;
  uint64_t (**v49)();
  std::string v50;
  int v51;
  uint64_t v52;
  int v53;
  uint64_t (**v54)();
  std::string v55;
  int v56;
  uint64_t v57;
  int v58;
  std::string v59;
  void (**v60)(mediaplatform::DatabaseColumnBase *__hidden);
  std::string __p;
  int v62;
  uint64_t v63;
  int v64;
  void (**v65)(mediaplatform::DatabaseColumnBase *__hidden);
  std::string __s;
  int v67;
  uint64_t v68;
  int v69;
  void (**v70)(mediaplatform::DatabaseColumnBase *__hidden);
  std::string v71;
  int v72;
  uint64_t v73;
  int v74;
  void (**v75)(mediaplatform::DatabaseColumnBase *__hidden);
  std::string v76;
  int v77;
  uint64_t v78;
  int v79;
  void (**v80)(mediaplatform::DatabaseColumnBase *__hidden);
  std::string v81;
  int v82;
  uint64_t v83;
  int v84;
  void (**v85)(mediaplatform::DatabaseColumnBase *__hidden);
  std::string v86;
  int v87;
  uint64_t v88;
  int v89;

  std::string::basic_string[abi:ne180100]<0>(&v43, "container_item_person");
  std::string::basic_string[abi:ne180100]<0>(v36, "container_item_person_pid");
  mlcore::MediaColumn<long long>::MediaColumn((uint64_t)&v38, (uint64_t)v36, 1);
  std::string::basic_string[abi:ne180100]<0>(v29, "container_item_pid");
  mlcore::MediaColumn<long long>::MediaColumn((uint64_t)&v31, (uint64_t)v29);
  std::string::basic_string[abi:ne180100]<0>(v22, "person_pid");
  mlcore::MediaColumn<long long>::MediaColumn((uint64_t)&v24, (uint64_t)v22);
  if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v59, v43.__r_.__value_.__l.__data_, v43.__r_.__value_.__l.__size_);
  else
    v59 = v43;
  if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v55, v39.__r_.__value_.__l.__data_, v39.__r_.__value_.__l.__size_);
  else
    v55 = v39;
  v54 = off_24C335B18;
  v57 = v41;
  v2 = v40;
  v56 = v40;
  v58 = v42;
  if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v50, v32.__r_.__value_.__l.__data_, v32.__r_.__value_.__l.__size_);
  else
    v50 = v32;
  v49 = off_24C335B18;
  v52 = v34;
  v21 = v33;
  v51 = v33;
  v53 = v35;
  if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v45, v25.__r_.__value_.__l.__data_, v25.__r_.__value_.__l.__size_);
  else
    v45 = v25;
  v3 = v26;
  v44 = off_24C335B18;
  v47 = v27;
  v46 = v26;
  v48 = v28;
  *(_QWORD *)this = &off_24C330F50;
  v4 = (std::string *)((char *)this + 8);
  v5 = SHIBYTE(v59.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v4, v59.__r_.__value_.__l.__data_, v59.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)&v59.__r_.__value_.__l.__data_;
    *((_QWORD *)this + 3) = *((_QWORD *)&v59.__r_.__value_.__l + 2);
  }
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 7) = 0;
  *((_QWORD *)this + 6) = 0;
  *(_QWORD *)this = off_24C3359F0;
  *((_QWORD *)this + 8) = 0;
  *((_QWORD *)this + 9) = 0;
  v70 = off_24C335D90;
  v18 = SHIBYTE(v55.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v71, v55.__r_.__value_.__l.__data_, v55.__r_.__value_.__l.__size_);
  else
    v71 = v55;
  v73 = v57;
  v72 = v2;
  v74 = v58;
  v65 = off_24C335D90;
  v6 = SHIBYTE(v50.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&__s, v50.__r_.__value_.__l.__data_, v50.__r_.__value_.__l.__size_);
  else
    __s = v50;
  v68 = v52;
  v67 = v21;
  v69 = v53;
  v60 = off_24C335D90;
  v17 = SHIBYTE(v45.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&__p, v45.__r_.__value_.__l.__data_, v45.__r_.__value_.__l.__size_);
  else
    __p = v45;
  v63 = v47;
  v62 = v3;
  v64 = v48;
  v80 = off_24C335D90;
  v20 = SHIBYTE(__s.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v81, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
  else
    v81 = __s;
  v83 = v52;
  v82 = v21;
  v84 = v53;
  v75 = off_24C335D90;
  v19 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v76, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  else
    v76 = __p;
  v78 = v47;
  v77 = v3;
  v79 = v48;
  v7 = SHIBYTE(v76.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v76.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v86, v76.__r_.__value_.__l.__data_, v76.__r_.__value_.__l.__size_);
  else
    v86 = v76;
  v88 = v47;
  v87 = v3;
  v89 = v48;
  *((_QWORD *)this + 10) = off_24C335D90;
  if (SHIBYTE(v86.__r_.__value_.__r.__words[2]) < 0)
  {
    v8 = (void *)v86.__r_.__value_.__r.__words[0];
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 88), v86.__r_.__value_.__l.__data_, v86.__r_.__value_.__l.__size_);
    *((_DWORD *)this + 28) = v3;
    *((_QWORD *)this + 10) = off_24C335B18;
    *(_QWORD *)((char *)this + 116) = v47;
    *((_DWORD *)this + 31) = v48;
    operator delete(v8);
  }
  else
  {
    *(std::string *)((char *)this + 88) = v86;
    *((_DWORD *)this + 28) = v3;
    *((_QWORD *)this + 10) = off_24C335B18;
    *(_QWORD *)((char *)this + 116) = v47;
    *((_DWORD *)this + 31) = v48;
    v85 = off_24C335D90;
  }
  *((_QWORD *)this + 16) = off_24C335D90;
  v9 = (std::string *)((char *)this + 136);
  v10 = SHIBYTE(v81.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v81.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v9, v81.__r_.__value_.__l.__data_, v81.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = *(_OWORD *)&v81.__r_.__value_.__l.__data_;
    *((_QWORD *)this + 19) = *((_QWORD *)&v81.__r_.__value_.__l + 2);
  }
  *((_DWORD *)this + 40) = v21;
  *((_QWORD *)this + 16) = off_24C335B18;
  *(_QWORD *)((char *)this + 164) = v52;
  *((_DWORD *)this + 43) = v53;
  if (v7 < 0)
    operator delete(v76.__r_.__value_.__l.__data_);
  if (v10 < 0)
    operator delete(v81.__r_.__value_.__l.__data_);
  *((_QWORD *)this + 22) = off_24C335D90;
  v11 = (std::string *)((char *)this + 184);
  v12 = SHIBYTE(v71.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v71.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v11, v71.__r_.__value_.__l.__data_, v71.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v11->__r_.__value_.__l.__data_ = *(_OWORD *)&v71.__r_.__value_.__l.__data_;
    *((_QWORD *)this + 25) = *((_QWORD *)&v71.__r_.__value_.__l + 2);
  }
  *((_DWORD *)this + 52) = v2;
  *((_QWORD *)this + 22) = off_24C335B18;
  *(_QWORD *)((char *)this + 212) = v73;
  *((_DWORD *)this + 55) = v74;
  if (v19 < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (v20 < 0)
  {
    operator delete(__s.__r_.__value_.__l.__data_);
    if ((v12 & 0x80000000) == 0)
      goto LABEL_51;
  }
  else if ((v12 & 0x80000000) == 0)
  {
    goto LABEL_51;
  }
  operator delete(v71.__r_.__value_.__l.__data_);
LABEL_51:
  v44 = (uint64_t (**)())off_24C335D90;
  if (v17 < 0)
    operator delete(v45.__r_.__value_.__l.__data_);
  v49 = (uint64_t (**)())off_24C335D90;
  if (v6 < 0)
    operator delete(v50.__r_.__value_.__l.__data_);
  if (v18 < 0)
  {
    operator delete(v55.__r_.__value_.__l.__data_);
    if ((v5 & 0x80000000) == 0)
      goto LABEL_57;
  }
  else if ((v5 & 0x80000000) == 0)
  {
    goto LABEL_57;
  }
  operator delete(v59.__r_.__value_.__l.__data_);
LABEL_57:
  *(_QWORD *)this = &off_24C336558;
  *((_QWORD *)this + 28) = off_24C335D90;
  if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 232), v39.__r_.__value_.__l.__data_, v39.__r_.__value_.__l.__size_);
  else
    *(std::string *)((char *)this + 232) = v39;
  v13 = v40;
  *((_QWORD *)this + 28) = off_24C336AC0;
  *((_DWORD *)this + 64) = v13;
  *(_QWORD *)((char *)this + 260) = v41;
  *((_DWORD *)this + 67) = v42;
  *((_QWORD *)this + 34) = off_24C335D90;
  if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 280), v32.__r_.__value_.__l.__data_, v32.__r_.__value_.__l.__size_);
  else
    *(std::string *)((char *)this + 280) = v32;
  *((_DWORD *)this + 76) = v33;
  *(_QWORD *)((char *)this + 308) = v34;
  *((_DWORD *)this + 79) = v35;
  *((_QWORD *)this + 34) = off_24C336AC0;
  *((_QWORD *)this + 40) = off_24C335D90;
  v14 = (std::string *)((char *)this + 328);
  if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v14, v25.__r_.__value_.__l.__data_, v25.__r_.__value_.__l.__size_);
    v15 = SHIBYTE(v25.__r_.__value_.__r.__words[2]);
    *((_DWORD *)this + 88) = v26;
    *(_QWORD *)((char *)this + 356) = v27;
    *((_DWORD *)this + 91) = v28;
    *((_QWORD *)this + 40) = off_24C336AC0;
    v24 = off_24C335D90;
    if (v15 < 0)
      operator delete(v25.__r_.__value_.__l.__data_);
  }
  else
  {
    *(_OWORD *)&v14->__r_.__value_.__l.__data_ = *(_OWORD *)&v25.__r_.__value_.__l.__data_;
    *((_QWORD *)this + 43) = *((_QWORD *)&v25.__r_.__value_.__l + 2);
    *((_DWORD *)this + 88) = v26;
    *(_QWORD *)((char *)this + 356) = v27;
    *((_DWORD *)this + 91) = v28;
    *((_QWORD *)this + 40) = off_24C336AC0;
    v24 = off_24C335D90;
  }
  if (v23 < 0)
    operator delete(v22[0]);
  v31 = off_24C335D90;
  if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v32.__r_.__value_.__l.__data_);
  if (v30 < 0)
    operator delete(v29[0]);
  v38 = off_24C335D90;
  if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v39.__r_.__value_.__l.__data_);
  if (v37 < 0)
    operator delete(v36[0]);
  if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v43.__r_.__value_.__l.__data_);
  *(_QWORD *)this = &off_24C33A4A8;
  return this;
}

void sub_20A6ADC20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,uint64_t a40,void *a41,uint64_t a42,int a43,__int16 a44,char a45,char a46,uint64_t a47,uint64_t a48,void *a49,uint64_t a50,int a51,__int16 a52,char a53,char a54,uint64_t a55,void *a56,uint64_t a57,int a58,__int16 a59,char a60,char a61,uint64_t a62,uint64_t a63)
{
  void *a64;
  char a69;
  uint64_t v69;
  void **v70;
  void **v71;
  uint64_t v72;

  *(_QWORD *)(v69 + 272) = v72;
  if (*(char *)(v69 + 303) < 0)
    operator delete(*v71);
  *(_QWORD *)(v69 + 224) = off_24C335D90;
  if (*(char *)(v69 + 255) < 0)
    operator delete(*v70);
  mediaplatform::DatabaseTable<long long,long long,long long>::~DatabaseTable((mediaplatform::DatabaseTableBase *)v69);
  if (a31 < 0)
    operator delete(__p);
  if (a24 < 0)
    operator delete(a19);
  if (a46 < 0)
    operator delete(a41);
  if (a39 < 0)
    operator delete(a34);
  if (a61 < 0)
    operator delete(a56);
  if (a54 < 0)
    operator delete(a49);
  if (a69 < 0)
    operator delete(a64);
  _Unwind_Resume(a1);
}

void sub_20A6ADE60()
{
  JUMPOUT(0x20A6ADE0CLL);
}

void sub_20A6ADE68()
{
  JUMPOUT(0x20A6ADE1CLL);
}

void sub_20A6ADE70()
{
  JUMPOUT(0x20A6ADE38);
}

void sub_20A6ADE78()
{
  JUMPOUT(0x20A6ADE48);
}

uint64_t mlcore::TypedEntityClass<mlcore::ContainerItemPerson>::sharedPointer()
{
  unint64_t v0;
  char v2;
  char **v3;
  char *v4;

  v0 = atomic_load(&mlcore::TypedEntityClass<mlcore::ContainerItemPerson>::sharedPointer(void)::__once);
  if (v0 != -1)
  {
    v4 = &v2;
    v3 = &v4;
    std::__call_once(&mlcore::TypedEntityClass<mlcore::ContainerItemPerson>::sharedPointer(void)::__once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::TypedEntityClass<mlcore::ContainerItemPerson>::sharedPointer(void)::{lambda(void)#1} &&>>);
  }
  return mlcore::TypedEntityClass<mlcore::ContainerItemPerson>::sharedPointer(void)::__sharedPointer;
}

mlcore::ItemKVSTable *mlcore::ItemKVSTable::ItemKVSTable(mlcore::ItemKVSTable *this)
{
  void *__p[2];
  char v4;
  void *v5[2];
  char v6;
  _BYTE v7[64];
  void *v8[2];
  char v9;
  _QWORD v10[3];
  char v11;
  void *v12[2];
  char v13;

  std::string::basic_string[abi:ne180100]<0>(v12, "item_kvs");
  std::string::basic_string[abi:ne180100]<0>(v8, "item_pid");
  mlcore::MediaColumn<long long>::MediaColumn((uint64_t)v10, (uint64_t)v8, 1);
  std::string::basic_string[abi:ne180100]<0>(v5, "key");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  mlcore::MediaColumn<std::string>::MediaColumn((uint64_t)v7, (uint64_t)v5, (uint64_t)__p);
  mlcore::MediaTable<long long,std::string>::MediaTable((uint64_t)this, (uint64_t)v12, (uint64_t)v10, (uint64_t)v7);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)v7);
  if (v4 < 0)
    operator delete(__p[0]);
  if (v6 < 0)
    operator delete(v5[0]);
  v10[0] = off_24C335D90;
  if (v11 < 0)
    operator delete((void *)v10[1]);
  if (v9 < 0)
    operator delete(v8[0]);
  if (v13 < 0)
    operator delete(v12[0]);
  *(_QWORD *)this = off_24C336E30;
  return this;
}

void sub_20A6ADFE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  uint64_t v34;

  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&a21);
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  *(_QWORD *)(v34 - 88) = off_24C335D90;
  if (*(char *)(v34 - 57) < 0)
    operator delete(*(void **)(v34 - 80));
  if (a34 < 0)
    operator delete(a29);
  if (*(char *)(v34 - 17) < 0)
    operator delete(*(void **)(v34 - 40));
  _Unwind_Resume(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<1ul,mediaplatform::DatabaseColumn<std::string>>::DatabaseColumnTuple(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  std::string *v5;
  __int128 v6;

  *(_QWORD *)a1 = off_24C335D90;
  if (*(char *)(a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 8), *(const std::string::value_type **)(a2 + 8), *(_QWORD *)(a2 + 16));
  }
  else
  {
    v4 = *(_OWORD *)(a2 + 8);
    *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 8) = v4;
  }
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_QWORD *)a1 = &off_24C335AB8;
  *(_BYTE *)(a1 + 36) = *(_BYTE *)(a2 + 36);
  v5 = (std::string *)(a1 + 40);
  if (*(char *)(a2 + 63) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *(const std::string::value_type **)(a2 + 40), *(_QWORD *)(a2 + 48));
  }
  else
  {
    v6 = *(_OWORD *)(a2 + 40);
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
  return a1;
}

void sub_20A6AE130(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  uint64_t v3;

  *(_QWORD *)v1 = v3;
  if (*(char *)(v1 + 31) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

_QWORD *mediaplatform::DatabaseTable<long long,std::string,std::string,mediaplatform::Data,int,long long,long long,int,int,int,int,mediaplatform::Data,long long,std::string,int,int,long long,long long,int>::DatabaseTable(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  _QWORD *v21;
  __int128 *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  std::string *v36;
  __int128 v37;
  int v38;
  int v39;
  const void *v40;
  size_t v41;
  void *v42;
  int v43;
  int v44;
  int v45;
  int v46;
  const void *v47;
  size_t v48;
  void *v49;
  int v50;
  int v51;
  int v52;
  int v53;
  const void *v54;
  size_t v55;
  void *v56;
  const void *v57;
  size_t v58;
  void *v59;
  const void *v60;
  size_t v61;
  void *v62;
  int v63;
  int v64;
  const void *v65;
  size_t v66;
  void *v67;
  const void *v68;
  size_t v69;
  void *v70;
  int v71;
  int v72;
  int v73;
  int v74;
  const void *v75;
  size_t v76;
  void *v77;
  int v78;
  int v79;
  int v80;
  int v81;
  int v82;
  int v83;
  std::string *v84;
  std::string *v85;
  std::string *v86;
  int v87;
  int v89;
  int v90;
  int v91;
  int v92;
  int v93;
  int v94;
  int v95;
  int v96;
  int v97;
  int v98;
  int v99;
  int v100;
  int v101;
  _QWORD *v102;
  uint64_t v103;
  int v104;
  int v105;
  int v106;
  uint64_t v107;
  int v108;
  uint64_t v109;
  int v110;
  int v111;
  uint64_t v112;
  int v113;
  uint64_t v114;
  int v115;
  uint64_t v116;
  int v117;
  uint64_t v118;
  int v119;
  int v120;
  int v121;
  int v122;
  int v123;
  int v124;
  uint64_t v125;
  int v126;
  int v127;
  int v128;
  std::string v129;
  int v130;
  uint64_t v131;
  uint64_t (**v132)();
  std::string v133;
  int v134;
  uint64_t v135;
  int v136;
  uint64_t (**v137)();
  std::string v138;
  int v139;
  uint64_t v140;
  int v141;
  uint64_t (**v142)();
  std::string v143;
  int v144;
  uint64_t v145;
  uint64_t (**v146)();
  std::string v147;
  int v148;
  uint64_t v149;
  uint64_t (**v150)();
  std::string v151;
  int v152;
  char v153;
  std::string v154;
  uint64_t (**v155)();
  std::string v156;
  int v157;
  uint64_t v158;
  int v159;
  uint64_t (**v160)();
  std::string v161;
  int v162;
  char v163;
  void (**v164)(mediaplatform::Data *__hidden);
  size_t v165;
  size_t v166;
  const void *v167;
  char v168;
  uint64_t (**v169)();
  std::string v170;
  int v171;
  uint64_t v172;
  uint64_t (**v173)();
  std::string v174;
  int v175;
  uint64_t v176;
  uint64_t (**v177)();
  std::string v178;
  int v179;
  uint64_t v180;
  uint64_t (**v181)();
  std::string v182;
  int v183;
  uint64_t v184;
  uint64_t (**v185)();
  std::string v186;
  int v187;
  uint64_t v188;
  int v189;
  uint64_t (**v190)();
  std::string v191;
  int v192;
  uint64_t v193;
  int v194;
  uint64_t (**v195)();
  std::string v196;
  int v197;
  uint64_t v198;
  uint64_t (**v199)();
  std::string v200;
  int v201;
  char v202;
  void (**v203)(mediaplatform::Data *__hidden);
  size_t v204;
  size_t v205;
  const void *v206;
  char v207;
  uint64_t (**v208)();
  std::string v209;
  int v210;
  char v211;
  std::string v212;
  uint64_t (**v213)();
  std::string __s;
  int v215;
  char v216;
  std::string v217;
  uint64_t (**v218)();
  std::string v219;
  int v220;
  uint64_t v221;
  int v222;
  uint64_t (**v223)();
  std::string v224;
  int v225;
  uint64_t v226;
  uint64_t (**v227)();
  std::string v228;
  int v229;
  uint64_t v230;
  int v231;
  uint64_t (**v232)();
  std::string v233;
  int v234;
  uint64_t v235;
  int v236;
  uint64_t (**v237)();
  std::string v238;
  int v239;
  uint64_t v240;
  uint64_t (**v241)();
  std::string v242;
  int v243;
  uint64_t v244;
  uint64_t (**v245)();
  std::string v246;
  int v247;
  char v248;
  std::string v249;
  uint64_t (**v250)();
  std::string v251;
  int v252;
  uint64_t v253;
  int v254;
  uint64_t (**v255)();
  std::string v256;
  int v257;
  char v258;
  void (**v259)(mediaplatform::Data *__hidden);
  size_t v260;
  size_t v261;
  const void *v262;
  char v263;
  uint64_t (**v264)();
  std::string v265;
  int v266;
  uint64_t v267;
  uint64_t (**v268)();
  std::string v269;
  int v270;
  uint64_t v271;
  uint64_t (**v272)();
  std::string v273;
  int v274;
  uint64_t v275;
  uint64_t (**v276)();
  std::string v277;
  int v278;
  uint64_t v279;
  uint64_t (**v280)();
  std::string v281;
  int v282;
  uint64_t v283;
  int v284;
  uint64_t (**v285)();
  std::string v286;
  int v287;
  uint64_t v288;
  int v289;
  uint64_t (**v290)();
  std::string v291;
  int v292;
  uint64_t v293;
  uint64_t (**v294)();
  std::string v295;
  int v296;
  char v297;
  void (**v298)(mediaplatform::Data *__hidden);
  size_t v299;
  size_t v300;
  const void *v301;
  char v302;
  uint64_t (**v303)();
  std::string v304;
  int v305;
  char v306;
  std::string v307;
  uint64_t (**v308)();
  std::string v309;
  int v310;
  char v311;
  std::string v312;
  uint64_t (**v313)();
  std::string v314;
  int v315;
  uint64_t v316;
  uint64_t (**v317)();
  std::string v318;
  int v319;
  uint64_t v320;
  int v321;
  uint64_t (**v322)();
  std::string v323;
  int v324;
  uint64_t v325;
  int v326;
  uint64_t (**v327)();
  std::string v328;
  int v329;
  uint64_t v330;
  uint64_t (**v331)();
  std::string v332;
  int v333;
  uint64_t v334;
  uint64_t (**v335)();
  std::string v336;
  int v337;
  char v338;
  std::string v339;
  uint64_t (**v340)();
  std::string v341;
  int v342;
  uint64_t v343;
  int v344;
  uint64_t (**v345)();
  std::string v346;
  int v347;
  char v348;
  void (**v349)(mediaplatform::Data *__hidden);
  size_t v350;
  size_t v351;
  const void *v352;
  char v353;
  uint64_t (**v354)();
  std::string v355;
  int v356;
  uint64_t v357;
  uint64_t (**v358)();
  std::string v359;
  int v360;
  uint64_t v361;
  uint64_t (**v362)();
  std::string v363;
  int v364;
  uint64_t v365;
  uint64_t (**v366)();
  std::string v367;
  int v368;
  uint64_t v369;
  uint64_t (**v370)();
  std::string v371;
  int v372;
  uint64_t v373;
  int v374;
  uint64_t (**v375)();
  std::string v376;
  int v377;
  uint64_t v378;
  int v379;
  uint64_t (**v380)();
  std::string v381;
  int v382;
  uint64_t v383;
  uint64_t (**v384)();
  std::string v385;
  int v386;
  char v387;
  void (**v388)(mediaplatform::Data *__hidden);
  size_t v389;
  size_t v390;
  const void *v391;
  char v392;
  uint64_t (**v393)();
  std::string v394;
  int v395;
  char v396;
  std::string v397;
  uint64_t (**v398)();
  std::string __p;
  int v400;
  uint64_t v401;
  uint64_t (**v402)();
  std::string v403;
  int v404;
  uint64_t v405;
  int v406;
  uint64_t (**v407)();
  std::string v408;
  int v409;
  uint64_t v410;
  int v411;
  uint64_t (**v412)();
  std::string v413;
  int v414;
  uint64_t v415;
  uint64_t (**v416)();
  std::string v417;
  int v418;
  uint64_t v419;
  uint64_t (**v420)();
  std::string v421;
  int v422;
  char v423;
  std::string v424;
  uint64_t (**v425)();
  std::string v426;
  int v427;
  uint64_t v428;
  int v429;
  uint64_t (**v430)();
  std::string v431;
  int v432;
  char v433;
  void (**v434)(mediaplatform::Data *__hidden);
  size_t v435;
  size_t v436;
  void *v437;
  char v438;
  uint64_t (**v439)();
  std::string v440;
  int v441;
  uint64_t v442;
  uint64_t (**v443)();
  std::string v444;
  int v445;
  uint64_t v446;
  uint64_t (**v447)();
  std::string v448;
  int v449;
  uint64_t v450;
  uint64_t (**v451)();
  std::string v452;
  int v453;
  uint64_t v454;
  uint64_t (**v455)();
  std::string v456;
  int v457;
  uint64_t v458;
  int v459;
  uint64_t (**v460)();
  std::string v461;
  int v462;
  uint64_t v463;
  int v464;
  uint64_t (**v465)();
  std::string v466;
  int v467;
  uint64_t v468;
  uint64_t (**v469)();
  std::string v470;
  int v471;
  char v472;
  void (**v473)(mediaplatform::Data *__hidden);
  size_t v474;
  size_t v475;
  void *v476;
  char v477;

  v21 = (_QWORD *)MEMORY[0x24BDAC7A8](a1);
  v24 = v23;
  v26 = v25;
  v28 = v27;
  v30 = v29;
  v32 = v31;
  v34 = v33;
  v35 = v21;
  *v21 = &off_24C330F50;
  v36 = (std::string *)(v21 + 1);
  if (*((char *)v22 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v36, *(const std::string::value_type **)v22, *((_QWORD *)v22 + 1));
  }
  else
  {
    v37 = *v22;
    v36->__r_.__value_.__r.__words[2] = *((_QWORD *)v22 + 2);
    *(_OWORD *)&v36->__r_.__value_.__l.__data_ = v37;
  }
  v35[4] = 0;
  v35[5] = 0;
  v35[6] = 0;
  v35[7] = 0;
  *v35 = &off_24C3355C8;
  v35[8] = 0;
  v35[9] = 0;
  v102 = v35;
  if (*(char *)(v34 + 31) < 0)
    std::string::__init_copy_ctor_external(&v219, *(const std::string::value_type **)(v34 + 8), *(_QWORD *)(v34 + 16));
  else
    v219 = *(std::string *)(v34 + 8);
  v38 = *(_DWORD *)(v34 + 32);
  v218 = off_24C335B18;
  v221 = *(_QWORD *)(v34 + 36);
  v39 = *(_DWORD *)(v34 + 44);
  v220 = v38;
  v222 = v39;
  v213 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(v32 + 31) < 0)
    std::string::__init_copy_ctor_external(&__s, *(const std::string::value_type **)(v32 + 8), *(_QWORD *)(v32 + 16));
  else
    __s = *(std::string *)(v32 + 8);
  v215 = *(_DWORD *)(v32 + 32);
  v213 = &off_24C335AB8;
  v216 = *(_BYTE *)(v32 + 36);
  if (*(char *)(v32 + 63) < 0)
    std::string::__init_copy_ctor_external(&v217, *(const std::string::value_type **)(v32 + 40), *(_QWORD *)(v32 + 48));
  else
    v217 = *(std::string *)(v32 + 40);
  v208 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(v30 + 31) < 0)
    std::string::__init_copy_ctor_external(&v209, *(const std::string::value_type **)(v30 + 8), *(_QWORD *)(v30 + 16));
  else
    v209 = *(std::string *)(v30 + 8);
  v210 = *(_DWORD *)(v30 + 32);
  v208 = &off_24C335AB8;
  v211 = *(_BYTE *)(v30 + 36);
  if (*(char *)(v30 + 63) < 0)
    std::string::__init_copy_ctor_external(&v212, *(const std::string::value_type **)(v30 + 40), *(_QWORD *)(v30 + 48));
  else
    v212 = *(std::string *)(v30 + 40);
  v199 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(v28 + 31) < 0)
    std::string::__init_copy_ctor_external(&v200, *(const std::string::value_type **)(v28 + 8), *(_QWORD *)(v28 + 16));
  else
    v200 = *(std::string *)(v28 + 8);
  v201 = *(_DWORD *)(v28 + 32);
  v199 = &off_24C335A98;
  v202 = *(_BYTE *)(v28 + 36);
  v40 = *(const void **)(v28 + 64);
  v41 = *(_QWORD *)(v28 + 48);
  v203 = &off_24C331510;
  v204 = v41;
  v205 = v41;
  if (v41)
    v42 = (void *)operator new[]();
  else
    v42 = 0;
  v206 = v42;
  v207 = 1;
  if (v40)
    memcpy(v42, v40, v41);
  else
    bzero(v42, v41);
  if (*(char *)(v26 + 31) < 0)
    std::string::__init_copy_ctor_external(&v196, *(const std::string::value_type **)(v26 + 8), *(_QWORD *)(v26 + 16));
  else
    v196 = *(std::string *)(v26 + 8);
  v127 = *(_DWORD *)(v26 + 32);
  v197 = v127;
  v195 = off_24C335AF8;
  v125 = *(_QWORD *)(v26 + 36);
  v198 = v125;
  if (*(char *)(v24 + 31) < 0)
    std::string::__init_copy_ctor_external(&v191, *(const std::string::value_type **)(v24 + 8), *(_QWORD *)(v24 + 16));
  else
    v191 = *(std::string *)(v24 + 8);
  v43 = *(_DWORD *)(v24 + 32);
  v190 = off_24C335B18;
  v193 = *(_QWORD *)(v24 + 36);
  v44 = *(_DWORD *)(v24 + 44);
  v123 = v43;
  v192 = v43;
  v194 = v44;
  if (*(char *)(a9 + 31) < 0)
    std::string::__init_copy_ctor_external(&v186, *(const std::string::value_type **)(a9 + 8), *(_QWORD *)(a9 + 16));
  else
    v186 = *(std::string *)(a9 + 8);
  v45 = *(_DWORD *)(a9 + 32);
  v185 = off_24C335B18;
  v188 = *(_QWORD *)(a9 + 36);
  v46 = *(_DWORD *)(a9 + 44);
  v121 = v45;
  v187 = v45;
  v189 = v46;
  if (*(char *)(a10 + 31) < 0)
    std::string::__init_copy_ctor_external(&v182, *(const std::string::value_type **)(a10 + 8), *(_QWORD *)(a10 + 16));
  else
    v182 = *(std::string *)(a10 + 8);
  v119 = *(_DWORD *)(a10 + 32);
  v183 = v119;
  v181 = off_24C335AF8;
  v118 = *(_QWORD *)(a10 + 36);
  v184 = v118;
  if (*(char *)(a11 + 31) < 0)
    std::string::__init_copy_ctor_external(&v178, *(const std::string::value_type **)(a11 + 8), *(_QWORD *)(a11 + 16));
  else
    v178 = *(std::string *)(a11 + 8);
  v117 = *(_DWORD *)(a11 + 32);
  v179 = v117;
  v177 = off_24C335AF8;
  v116 = *(_QWORD *)(a11 + 36);
  v180 = v116;
  if (*(char *)(a12 + 31) < 0)
    std::string::__init_copy_ctor_external(&v174, *(const std::string::value_type **)(a12 + 8), *(_QWORD *)(a12 + 16));
  else
    v174 = *(std::string *)(a12 + 8);
  v115 = *(_DWORD *)(a12 + 32);
  v175 = v115;
  v173 = off_24C335AF8;
  v114 = *(_QWORD *)(a12 + 36);
  v176 = v114;
  if (*(char *)(a13 + 31) < 0)
    std::string::__init_copy_ctor_external(&v170, *(const std::string::value_type **)(a13 + 8), *(_QWORD *)(a13 + 16));
  else
    v170 = *(std::string *)(a13 + 8);
  v113 = *(_DWORD *)(a13 + 32);
  v171 = v113;
  v169 = off_24C335AF8;
  v112 = *(_QWORD *)(a13 + 36);
  v172 = v112;
  v160 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a14 + 31) < 0)
    std::string::__init_copy_ctor_external(&v161, *(const std::string::value_type **)(a14 + 8), *(_QWORD *)(a14 + 16));
  else
    v161 = *(std::string *)(a14 + 8);
  v162 = *(_DWORD *)(a14 + 32);
  v160 = &off_24C335A98;
  v163 = *(_BYTE *)(a14 + 36);
  v47 = *(const void **)(a14 + 64);
  v48 = *(_QWORD *)(a14 + 48);
  v164 = &off_24C331510;
  v165 = v48;
  v166 = v48;
  if (v48)
    v49 = (void *)operator new[]();
  else
    v49 = 0;
  v167 = v49;
  v168 = 1;
  if (v47)
    memcpy(v49, v47, v48);
  else
    bzero(v49, v48);
  if (*(char *)(a15 + 31) < 0)
    std::string::__init_copy_ctor_external(&v156, *(const std::string::value_type **)(a15 + 8), *(_QWORD *)(a15 + 16));
  else
    v156 = *(std::string *)(a15 + 8);
  v50 = *(_DWORD *)(a15 + 32);
  v155 = off_24C335B18;
  v158 = *(_QWORD *)(a15 + 36);
  v51 = *(_DWORD *)(a15 + 44);
  v111 = v50;
  v157 = v50;
  v159 = v51;
  v150 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a16 + 31) < 0)
    std::string::__init_copy_ctor_external(&v151, *(const std::string::value_type **)(a16 + 8), *(_QWORD *)(a16 + 16));
  else
    v151 = *(std::string *)(a16 + 8);
  v152 = *(_DWORD *)(a16 + 32);
  v150 = &off_24C335AB8;
  v153 = *(_BYTE *)(a16 + 36);
  if (*(char *)(a16 + 63) < 0)
    std::string::__init_copy_ctor_external(&v154, *(const std::string::value_type **)(a16 + 40), *(_QWORD *)(a16 + 48));
  else
    v154 = *(std::string *)(a16 + 40);
  if (*(char *)(a17 + 31) < 0)
    std::string::__init_copy_ctor_external(&v147, *(const std::string::value_type **)(a17 + 8), *(_QWORD *)(a17 + 16));
  else
    v147 = *(std::string *)(a17 + 8);
  v110 = *(_DWORD *)(a17 + 32);
  v148 = v110;
  v146 = off_24C335AF8;
  v109 = *(_QWORD *)(a17 + 36);
  v149 = v109;
  if (*(char *)(a18 + 31) < 0)
    std::string::__init_copy_ctor_external(&v143, *(const std::string::value_type **)(a18 + 8), *(_QWORD *)(a18 + 16));
  else
    v143 = *(std::string *)(a18 + 8);
  v108 = *(_DWORD *)(a18 + 32);
  v144 = v108;
  v142 = off_24C335AF8;
  v107 = *(_QWORD *)(a18 + 36);
  v145 = v107;
  if (*(char *)(a19 + 31) < 0)
    std::string::__init_copy_ctor_external(&v138, *(const std::string::value_type **)(a19 + 8), *(_QWORD *)(a19 + 16));
  else
    v138 = *(std::string *)(a19 + 8);
  v52 = *(_DWORD *)(a19 + 32);
  v137 = off_24C335B18;
  v140 = *(_QWORD *)(a19 + 36);
  v53 = *(_DWORD *)(a19 + 44);
  v106 = v52;
  v139 = v52;
  v141 = v53;
  if (*(char *)(a20 + 31) < 0)
    std::string::__init_copy_ctor_external(&v133, *(const std::string::value_type **)(a20 + 8), *(_QWORD *)(a20 + 16));
  else
    v133 = *(std::string *)(a20 + 8);
  v105 = *(_DWORD *)(a20 + 32);
  v134 = v105;
  v132 = off_24C335B18;
  v135 = *(_QWORD *)(a20 + 36);
  v136 = *(_DWORD *)(a20 + 44);
  if (*(char *)(a21 + 31) < 0)
    std::string::__init_copy_ctor_external(&v129, *(const std::string::value_type **)(a21 + 8), *(_QWORD *)(a21 + 16));
  else
    v129 = *(std::string *)(a21 + 8);
  v104 = *(_DWORD *)(a21 + 32);
  v130 = v104;
  v103 = *(_QWORD *)(a21 + 36);
  v131 = v103;
  v308 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v309, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
  else
    v309 = __s;
  v310 = v215;
  v308 = &off_24C335AB8;
  v311 = v216;
  if (SHIBYTE(v217.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v312, v217.__r_.__value_.__l.__data_, v217.__r_.__value_.__l.__size_);
  else
    v312 = v217;
  v303 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v209.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v304, v209.__r_.__value_.__l.__data_, v209.__r_.__value_.__l.__size_);
  else
    v304 = v209;
  v305 = v210;
  v303 = &off_24C335AB8;
  v306 = v211;
  if (SHIBYTE(v212.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v307, v212.__r_.__value_.__l.__data_, v212.__r_.__value_.__l.__size_);
  else
    v307 = v212;
  v294 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v200.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v295, v200.__r_.__value_.__l.__data_, v200.__r_.__value_.__l.__size_);
  else
    v295 = v200;
  v296 = v201;
  v294 = &off_24C335A98;
  v297 = v202;
  v54 = v206;
  v55 = v204;
  v298 = &off_24C331510;
  v299 = v204;
  v300 = v204;
  if (v204)
    v56 = (void *)operator new[]();
  else
    v56 = 0;
  v301 = v56;
  v302 = 1;
  if (v54)
    memcpy(v56, v54, v55);
  else
    bzero(v56, v55);
  if (SHIBYTE(v196.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v291, v196.__r_.__value_.__l.__data_, v196.__r_.__value_.__l.__size_);
  else
    v291 = v196;
  v292 = v127;
  v290 = off_24C335AF8;
  v293 = v125;
  if (SHIBYTE(v191.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v286, v191.__r_.__value_.__l.__data_, v191.__r_.__value_.__l.__size_);
  else
    v286 = v191;
  v285 = off_24C335B18;
  v288 = v193;
  v287 = v123;
  v289 = v194;
  if (SHIBYTE(v186.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v281, v186.__r_.__value_.__l.__data_, v186.__r_.__value_.__l.__size_);
  else
    v281 = v186;
  v280 = off_24C335B18;
  v283 = v188;
  v282 = v121;
  v284 = v189;
  if (SHIBYTE(v182.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v277, v182.__r_.__value_.__l.__data_, v182.__r_.__value_.__l.__size_);
  else
    v277 = v182;
  v278 = v119;
  v276 = off_24C335AF8;
  v279 = v118;
  if (SHIBYTE(v178.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v273, v178.__r_.__value_.__l.__data_, v178.__r_.__value_.__l.__size_);
  else
    v273 = v178;
  v274 = v117;
  v272 = off_24C335AF8;
  v275 = v116;
  if (SHIBYTE(v174.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v269, v174.__r_.__value_.__l.__data_, v174.__r_.__value_.__l.__size_);
  else
    v269 = v174;
  v270 = v115;
  v268 = off_24C335AF8;
  v271 = v114;
  if (SHIBYTE(v170.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v265, v170.__r_.__value_.__l.__data_, v170.__r_.__value_.__l.__size_);
  else
    v265 = v170;
  v266 = v113;
  v264 = off_24C335AF8;
  v267 = v112;
  v255 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v161.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v256, v161.__r_.__value_.__l.__data_, v161.__r_.__value_.__l.__size_);
  else
    v256 = v161;
  v257 = v162;
  v255 = &off_24C335A98;
  v258 = v163;
  v57 = v167;
  v58 = v165;
  v259 = &off_24C331510;
  v260 = v165;
  v261 = v165;
  if (v165)
    v59 = (void *)operator new[]();
  else
    v59 = 0;
  v262 = v59;
  v263 = 1;
  if (v57)
    memcpy(v59, v57, v58);
  else
    bzero(v59, v58);
  if (SHIBYTE(v156.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v251, v156.__r_.__value_.__l.__data_, v156.__r_.__value_.__l.__size_);
  else
    v251 = v156;
  v250 = off_24C335B18;
  v253 = v158;
  v252 = v111;
  v254 = v159;
  v245 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v151.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v246, v151.__r_.__value_.__l.__data_, v151.__r_.__value_.__l.__size_);
  else
    v246 = v151;
  v247 = v152;
  v245 = &off_24C335AB8;
  v248 = v153;
  if (SHIBYTE(v154.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v249, v154.__r_.__value_.__l.__data_, v154.__r_.__value_.__l.__size_);
  else
    v249 = v154;
  if (SHIBYTE(v147.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v242, v147.__r_.__value_.__l.__data_, v147.__r_.__value_.__l.__size_);
  else
    v242 = v147;
  v243 = v110;
  v241 = off_24C335AF8;
  v244 = v109;
  if (SHIBYTE(v143.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v238, v143.__r_.__value_.__l.__data_, v143.__r_.__value_.__l.__size_);
  else
    v238 = v143;
  v239 = v108;
  v237 = off_24C335AF8;
  v240 = v107;
  v232 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v138.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v233, v138.__r_.__value_.__l.__data_, v138.__r_.__value_.__l.__size_);
  else
    v233 = v138;
  v232 = off_24C335B18;
  v235 = v140;
  v234 = v106;
  v236 = v141;
  v227 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v133.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v228, v133.__r_.__value_.__l.__data_, v133.__r_.__value_.__l.__size_);
  else
    v228 = v133;
  v227 = off_24C335B18;
  v230 = v135;
  v229 = v105;
  v231 = v136;
  v223 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v129.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v224, v129.__r_.__value_.__l.__data_, v129.__r_.__value_.__l.__size_);
  else
    v224 = v129;
  v225 = v104;
  v223 = off_24C335AF8;
  v226 = v103;
  v393 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v304.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v394, v304.__r_.__value_.__l.__data_, v304.__r_.__value_.__l.__size_);
  else
    v394 = v304;
  v395 = v305;
  v393 = &off_24C335AB8;
  v396 = v306;
  if (SHIBYTE(v307.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v397, v307.__r_.__value_.__l.__data_, v307.__r_.__value_.__l.__size_);
  else
    v397 = v307;
  v384 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v295.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v385, v295.__r_.__value_.__l.__data_, v295.__r_.__value_.__l.__size_);
  else
    v385 = v295;
  v386 = v296;
  v384 = &off_24C335A98;
  v387 = v297;
  v60 = v301;
  v61 = v299;
  v388 = &off_24C331510;
  v389 = v299;
  v390 = v299;
  if (v299)
    v62 = (void *)operator new[]();
  else
    v62 = 0;
  v391 = v62;
  v392 = 1;
  if (v60)
    memcpy(v62, v60, v61);
  else
    bzero(v62, v61);
  v380 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v291.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v381, v291.__r_.__value_.__l.__data_, v291.__r_.__value_.__l.__size_);
  else
    v381 = v291;
  v382 = v127;
  v380 = off_24C335AF8;
  v383 = v125;
  v375 = (uint64_t (**)())off_24C335D90;
  v63 = SHIBYTE(v286.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v286.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v376, v286.__r_.__value_.__l.__data_, v286.__r_.__value_.__l.__size_);
  else
    v376 = v286;
  v375 = off_24C335B18;
  v378 = v288;
  v377 = v123;
  v379 = v289;
  v370 = (uint64_t (**)())off_24C335D90;
  v98 = SHIBYTE(v281.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v281.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v371, v281.__r_.__value_.__l.__data_, v281.__r_.__value_.__l.__size_);
  else
    v371 = v281;
  v370 = off_24C335B18;
  v373 = v283;
  v372 = v121;
  v374 = v284;
  v366 = (uint64_t (**)())off_24C335D90;
  v97 = SHIBYTE(v277.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v277.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v367, v277.__r_.__value_.__l.__data_, v277.__r_.__value_.__l.__size_);
  else
    v367 = v277;
  v368 = v119;
  v366 = off_24C335AF8;
  v369 = v118;
  v362 = (uint64_t (**)())off_24C335D90;
  v96 = SHIBYTE(v273.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v273.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v363, v273.__r_.__value_.__l.__data_, v273.__r_.__value_.__l.__size_);
  else
    v363 = v273;
  v364 = v117;
  v362 = off_24C335AF8;
  v365 = v116;
  v358 = (uint64_t (**)())off_24C335D90;
  v64 = SHIBYTE(v269.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v269.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v359, v269.__r_.__value_.__l.__data_, v269.__r_.__value_.__l.__size_);
  else
    v359 = v269;
  v360 = v115;
  v358 = off_24C335AF8;
  v361 = v114;
  v354 = (uint64_t (**)())off_24C335D90;
  v95 = SHIBYTE(v265.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v265.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v355, v265.__r_.__value_.__l.__data_, v265.__r_.__value_.__l.__size_);
  else
    v355 = v265;
  v356 = v113;
  v354 = off_24C335AF8;
  v357 = v112;
  v345 = (uint64_t (**)())off_24C335D90;
  v94 = v63;
  v93 = v64;
  if (SHIBYTE(v256.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v346, v256.__r_.__value_.__l.__data_, v256.__r_.__value_.__l.__size_);
  else
    v346 = v256;
  v347 = v257;
  v345 = &off_24C335A98;
  v348 = v258;
  v65 = v262;
  v66 = v260;
  v349 = &off_24C331510;
  v350 = v260;
  v351 = v260;
  if (v260)
    v67 = (void *)operator new[]();
  else
    v67 = 0;
  v352 = v67;
  v353 = 1;
  if (v65)
    memcpy(v67, v65, v66);
  else
    bzero(v67, v66);
  v340 = (uint64_t (**)())off_24C335D90;
  v92 = SHIBYTE(v251.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v251.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v341, v251.__r_.__value_.__l.__data_, v251.__r_.__value_.__l.__size_);
  else
    v341 = v251;
  v340 = off_24C335B18;
  v343 = v253;
  v342 = v111;
  v344 = v254;
  v335 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v246.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v336, v246.__r_.__value_.__l.__data_, v246.__r_.__value_.__l.__size_);
  else
    v336 = v246;
  v337 = v247;
  v335 = &off_24C335AB8;
  v338 = v248;
  if (SHIBYTE(v249.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v339, v249.__r_.__value_.__l.__data_, v249.__r_.__value_.__l.__size_);
  else
    v339 = v249;
  v331 = (uint64_t (**)())off_24C335D90;
  v101 = SHIBYTE(v242.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v242.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v332, v242.__r_.__value_.__l.__data_, v242.__r_.__value_.__l.__size_);
  else
    v332 = v242;
  v333 = v110;
  v331 = off_24C335AF8;
  v334 = v109;
  v327 = (uint64_t (**)())off_24C335D90;
  v100 = SHIBYTE(v238.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v238.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v328, v238.__r_.__value_.__l.__data_, v238.__r_.__value_.__l.__size_);
  else
    v328 = v238;
  v329 = v108;
  v327 = off_24C335AF8;
  v330 = v107;
  v322 = (uint64_t (**)())off_24C335D90;
  v99 = SHIBYTE(v233.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v233.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v323, v233.__r_.__value_.__l.__data_, v233.__r_.__value_.__l.__size_);
  else
    v323 = v233;
  v322 = off_24C335B18;
  v325 = v235;
  v324 = v106;
  v326 = v236;
  v317 = (uint64_t (**)())off_24C335D90;
  v91 = SHIBYTE(v228.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v228.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v318, v228.__r_.__value_.__l.__data_, v228.__r_.__value_.__l.__size_);
  else
    v318 = v228;
  v317 = off_24C335B18;
  v320 = v230;
  v319 = v105;
  v321 = v231;
  v313 = (uint64_t (**)())off_24C335D90;
  v90 = SHIBYTE(v224.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v224.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v314, v224.__r_.__value_.__l.__data_, v224.__r_.__value_.__l.__size_);
  else
    v314 = v224;
  v315 = v104;
  v313 = off_24C335AF8;
  v316 = v103;
  v469 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v385.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v470, v385.__r_.__value_.__l.__data_, v385.__r_.__value_.__l.__size_);
  else
    v470 = v385;
  v471 = v386;
  v469 = &off_24C335A98;
  v472 = v387;
  v68 = v391;
  v69 = v389;
  v473 = &off_24C331510;
  v474 = v389;
  v475 = v389;
  if (v389)
    v70 = (void *)operator new[]();
  else
    v70 = 0;
  v476 = v70;
  v477 = 1;
  if (v68)
    memcpy(v70, v68, v69);
  else
    bzero(v70, v69);
  v465 = (uint64_t (**)())off_24C335D90;
  v71 = SHIBYTE(v381.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v381.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v466, v381.__r_.__value_.__l.__data_, v381.__r_.__value_.__l.__size_);
  else
    v466 = v381;
  v467 = v127;
  v465 = off_24C335AF8;
  v468 = v125;
  v460 = (uint64_t (**)())off_24C335D90;
  v128 = SHIBYTE(v376.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v376.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v461, v376.__r_.__value_.__l.__data_, v376.__r_.__value_.__l.__size_);
  else
    v461 = v376;
  v460 = off_24C335B18;
  v463 = v378;
  v462 = v123;
  v464 = v379;
  v455 = (uint64_t (**)())off_24C335D90;
  v72 = SHIBYTE(v371.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v371.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v456, v371.__r_.__value_.__l.__data_, v371.__r_.__value_.__l.__size_);
  else
    v456 = v371;
  v455 = off_24C335B18;
  v458 = v373;
  v457 = v121;
  v459 = v374;
  v451 = (uint64_t (**)())off_24C335D90;
  v73 = SHIBYTE(v367.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v367.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v452, v367.__r_.__value_.__l.__data_, v367.__r_.__value_.__l.__size_);
  else
    v452 = v367;
  v453 = v119;
  v451 = off_24C335AF8;
  v454 = v118;
  v447 = (uint64_t (**)())off_24C335D90;
  v74 = SHIBYTE(v363.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v363.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v448, v363.__r_.__value_.__l.__data_, v363.__r_.__value_.__l.__size_);
  else
    v448 = v363;
  v449 = v117;
  v447 = off_24C335AF8;
  v450 = v116;
  v443 = (uint64_t (**)())off_24C335D90;
  v126 = SHIBYTE(v359.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v359.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v444, v359.__r_.__value_.__l.__data_, v359.__r_.__value_.__l.__size_);
  else
    v444 = v359;
  v445 = v115;
  v443 = off_24C335AF8;
  v446 = v114;
  v439 = (uint64_t (**)())off_24C335D90;
  v124 = SHIBYTE(v355.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v355.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v440, v355.__r_.__value_.__l.__data_, v355.__r_.__value_.__l.__size_);
  else
    v440 = v355;
  v441 = v113;
  v439 = off_24C335AF8;
  v442 = v112;
  v430 = (uint64_t (**)())off_24C335D90;
  v122 = v73;
  v120 = v74;
  if (SHIBYTE(v346.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v431, v346.__r_.__value_.__l.__data_, v346.__r_.__value_.__l.__size_);
  else
    v431 = v346;
  v432 = v347;
  v430 = &off_24C335A98;
  v433 = v348;
  v75 = v352;
  v76 = v350;
  v434 = &off_24C331510;
  v435 = v350;
  v436 = v350;
  if (v350)
    v77 = (void *)operator new[]();
  else
    v77 = 0;
  v437 = v77;
  v438 = 1;
  if (v75)
    memcpy(v77, v75, v76);
  else
    bzero(v77, v76);
  v425 = (uint64_t (**)())off_24C335D90;
  v78 = SHIBYTE(v341.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v341.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v426, v341.__r_.__value_.__l.__data_, v341.__r_.__value_.__l.__size_);
  else
    v426 = v341;
  v425 = off_24C335B18;
  v428 = v343;
  v427 = v111;
  v429 = v344;
  v420 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v336.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v421, v336.__r_.__value_.__l.__data_, v336.__r_.__value_.__l.__size_);
  else
    v421 = v336;
  v422 = v337;
  v420 = &off_24C335AB8;
  v423 = v338;
  if (SHIBYTE(v339.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v424, v339.__r_.__value_.__l.__data_, v339.__r_.__value_.__l.__size_);
  else
    v424 = v339;
  v416 = (uint64_t (**)())off_24C335D90;
  v79 = SHIBYTE(v332.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v332.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v417, v332.__r_.__value_.__l.__data_, v332.__r_.__value_.__l.__size_);
  else
    v417 = v332;
  v418 = v110;
  v416 = off_24C335AF8;
  v419 = v109;
  v412 = (uint64_t (**)())off_24C335D90;
  v80 = SHIBYTE(v328.__r_.__value_.__r.__words[2]);
  v89 = v72;
  if (SHIBYTE(v328.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v413, v328.__r_.__value_.__l.__data_, v328.__r_.__value_.__l.__size_);
  else
    v413 = v328;
  v414 = v108;
  v412 = off_24C335AF8;
  v415 = v107;
  v407 = (uint64_t (**)())off_24C335D90;
  v81 = SHIBYTE(v323.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v323.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v408, v323.__r_.__value_.__l.__data_, v323.__r_.__value_.__l.__size_);
  else
    v408 = v323;
  v407 = off_24C335B18;
  v410 = v325;
  v409 = v106;
  v411 = v326;
  v402 = (uint64_t (**)())off_24C335D90;
  v82 = SHIBYTE(v318.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v318.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v403, v318.__r_.__value_.__l.__data_, v318.__r_.__value_.__l.__size_);
  else
    v403 = v318;
  v402 = off_24C335B18;
  v405 = v320;
  v404 = v105;
  v406 = v321;
  v398 = (uint64_t (**)())off_24C335D90;
  v83 = SHIBYTE(v314.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v314.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&__p, v314.__r_.__value_.__l.__data_, v314.__r_.__value_.__l.__size_);
  else
    __p = v314;
  v400 = v104;
  v398 = off_24C335AF8;
  v401 = v103;
  mediaplatform::DatabaseColumnTuple<3ul,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>>::DatabaseColumnTuple((uint64_t)(v102 + 10), (uint64_t)&v469, (uint64_t)&v465, (uint64_t)&v460, (uint64_t)&v455, (uint64_t)&v451, (uint64_t)&v447, (uint64_t)&v443, (uint64_t)&v439, (uint64_t)&v430, (uint64_t)&v425, (uint64_t)&v420, (uint64_t)&v416, (uint64_t)&v412, (uint64_t)&v407, (uint64_t)&v402, (uint64_t)&v398);
  v398 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v402 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v403.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v403.__r_.__value_.__l.__data_);
  v407 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v408.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v408.__r_.__value_.__l.__data_);
  v412 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v413.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v413.__r_.__value_.__l.__data_);
  v416 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v417.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v417.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v420);
  v425 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v426.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v426.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<mediaplatform::Data>::~DatabaseColumn((uint64_t)&v430);
  v439 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v440.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v440.__r_.__value_.__l.__data_);
  v443 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v444.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v444.__r_.__value_.__l.__data_);
  v447 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v448.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v448.__r_.__value_.__l.__data_);
  v451 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v452.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v452.__r_.__value_.__l.__data_);
  v455 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v456.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v456.__r_.__value_.__l.__data_);
  v460 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v461.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v461.__r_.__value_.__l.__data_);
  v465 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v466.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v466.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<mediaplatform::Data>::~DatabaseColumn((uint64_t)&v469);
  v102[116] = off_24C335D90;
  if (SHIBYTE(v394.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external((std::string *)v102 + 39, v394.__r_.__value_.__l.__data_, v394.__r_.__value_.__l.__size_);
  else
    *((std::string *)v102 + 39) = v394;
  *((_DWORD *)v102 + 240) = v395;
  v102[116] = &off_24C335AB8;
  *((_BYTE *)v102 + 964) = v396;
  v84 = (std::string *)(v102 + 121);
  if (SHIBYTE(v397.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v84, v397.__r_.__value_.__l.__data_, v397.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v84->__r_.__value_.__l.__data_ = *(_OWORD *)&v397.__r_.__value_.__l.__data_;
    v102[123] = *((_QWORD *)&v397.__r_.__value_.__l + 2);
  }
  v313 = (uint64_t (**)())off_24C335D90;
  if (v83 < 0)
    operator delete(v314.__r_.__value_.__l.__data_);
  v317 = (uint64_t (**)())off_24C335D90;
  if (v82 < 0)
    operator delete(v318.__r_.__value_.__l.__data_);
  v322 = (uint64_t (**)())off_24C335D90;
  if (v81 < 0)
    operator delete(v323.__r_.__value_.__l.__data_);
  v327 = (uint64_t (**)())off_24C335D90;
  if (v80 < 0)
    operator delete(v328.__r_.__value_.__l.__data_);
  v331 = (uint64_t (**)())off_24C335D90;
  if (v79 < 0)
    operator delete(v332.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v335);
  v340 = (uint64_t (**)())off_24C335D90;
  if (v78 < 0)
    operator delete(v341.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<mediaplatform::Data>::~DatabaseColumn((uint64_t)&v345);
  v354 = (uint64_t (**)())off_24C335D90;
  if (v124 < 0)
    operator delete(v355.__r_.__value_.__l.__data_);
  v358 = (uint64_t (**)())off_24C335D90;
  if (v126 < 0)
    operator delete(v359.__r_.__value_.__l.__data_);
  v362 = (uint64_t (**)())off_24C335D90;
  if (v120 < 0)
    operator delete(v363.__r_.__value_.__l.__data_);
  v366 = (uint64_t (**)())off_24C335D90;
  if (v122 < 0)
    operator delete(v367.__r_.__value_.__l.__data_);
  v370 = (uint64_t (**)())off_24C335D90;
  if (v89 < 0)
    operator delete(v371.__r_.__value_.__l.__data_);
  v375 = (uint64_t (**)())off_24C335D90;
  if (v128 < 0)
    operator delete(v376.__r_.__value_.__l.__data_);
  v380 = (uint64_t (**)())off_24C335D90;
  if (v71 < 0)
    operator delete(v381.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<mediaplatform::Data>::~DatabaseColumn((uint64_t)&v384);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v393);
  v102[124] = off_24C335D90;
  if (SHIBYTE(v309.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external((std::string *)(v102 + 125), v309.__r_.__value_.__l.__data_, v309.__r_.__value_.__l.__size_);
  else
    *(std::string *)(v102 + 125) = v309;
  *((_DWORD *)v102 + 256) = v310;
  v102[124] = &off_24C335AB8;
  *((_BYTE *)v102 + 1028) = v311;
  v85 = (std::string *)(v102 + 129);
  if (SHIBYTE(v312.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v85, v312.__r_.__value_.__l.__data_, v312.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v85->__r_.__value_.__l.__data_ = *(_OWORD *)&v312.__r_.__value_.__l.__data_;
    v102[131] = *((_QWORD *)&v312.__r_.__value_.__l + 2);
  }
  v223 = (uint64_t (**)())off_24C335D90;
  if (v90 < 0)
    operator delete(v224.__r_.__value_.__l.__data_);
  v227 = (uint64_t (**)())off_24C335D90;
  if (v91 < 0)
    operator delete(v228.__r_.__value_.__l.__data_);
  v232 = (uint64_t (**)())off_24C335D90;
  if (v99 < 0)
    operator delete(v233.__r_.__value_.__l.__data_);
  v237 = (uint64_t (**)())off_24C335D90;
  if (v100 < 0)
    operator delete(v238.__r_.__value_.__l.__data_);
  v241 = (uint64_t (**)())off_24C335D90;
  if (v101 < 0)
    operator delete(v242.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v245);
  v250 = (uint64_t (**)())off_24C335D90;
  if (v92 < 0)
    operator delete(v251.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<mediaplatform::Data>::~DatabaseColumn((uint64_t)&v255);
  v264 = (uint64_t (**)())off_24C335D90;
  if (v95 < 0)
    operator delete(v265.__r_.__value_.__l.__data_);
  v268 = (uint64_t (**)())off_24C335D90;
  if (v93 < 0)
    operator delete(v269.__r_.__value_.__l.__data_);
  v272 = (uint64_t (**)())off_24C335D90;
  if (v96 < 0)
    operator delete(v273.__r_.__value_.__l.__data_);
  v276 = (uint64_t (**)())off_24C335D90;
  if (v97 < 0)
    operator delete(v277.__r_.__value_.__l.__data_);
  v280 = (uint64_t (**)())off_24C335D90;
  if (v98 < 0)
  {
    operator delete(v281.__r_.__value_.__l.__data_);
    if ((v94 & 0x80000000) == 0)
      goto LABEL_375;
  }
  else if ((v94 & 0x80000000) == 0)
  {
    goto LABEL_375;
  }
  operator delete(v286.__r_.__value_.__l.__data_);
LABEL_375:
  if (SHIBYTE(v291.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v291.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<mediaplatform::Data>::~DatabaseColumn((uint64_t)&v294);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v303);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v308);
  v102[132] = off_24C335D90;
  v86 = (std::string *)(v102 + 133);
  v87 = SHIBYTE(v219.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v219.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v86, v219.__r_.__value_.__l.__data_, v219.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v86->__r_.__value_.__l.__data_ = *(_OWORD *)&v219.__r_.__value_.__l.__data_;
    v102[135] = *((_QWORD *)&v219.__r_.__value_.__l + 2);
  }
  *((_DWORD *)v102 + 272) = v220;
  v102[132] = off_24C335B18;
  *(_QWORD *)((char *)v102 + 1092) = v221;
  *((_DWORD *)v102 + 275) = v222;
  if (SHIBYTE(v129.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v129.__r_.__value_.__l.__data_);
  if (SHIBYTE(v133.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v133.__r_.__value_.__l.__data_);
  if (SHIBYTE(v138.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v138.__r_.__value_.__l.__data_);
  if (SHIBYTE(v143.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v143.__r_.__value_.__l.__data_);
  if (SHIBYTE(v147.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v147.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v150);
  if (SHIBYTE(v156.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v156.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<mediaplatform::Data>::~DatabaseColumn((uint64_t)&v160);
  if (SHIBYTE(v170.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v170.__r_.__value_.__l.__data_);
  if (SHIBYTE(v174.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v174.__r_.__value_.__l.__data_);
  if (SHIBYTE(v178.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v178.__r_.__value_.__l.__data_);
  if (SHIBYTE(v182.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v182.__r_.__value_.__l.__data_);
  if (SHIBYTE(v186.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v186.__r_.__value_.__l.__data_);
  if (SHIBYTE(v191.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v191.__r_.__value_.__l.__data_);
  if (SHIBYTE(v196.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v196.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<mediaplatform::Data>::~DatabaseColumn((uint64_t)&v199);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v208);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v213);
  if (v87 < 0)
    operator delete(v219.__r_.__value_.__l.__data_);
  return v102;
}

void sub_20A6B05B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void **a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,mediaplatform::DatabaseTableBase *a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  void *__p;
  char a72;

  mediaplatform::DatabaseColumnTuple<1ul,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(a62);
  if (a72 < 0)
    operator delete(__p);
  if (SLOBYTE(STACK[0x227]) < 0)
    operator delete((void *)STACK[0x210]);
  if (SLOBYTE(STACK[0x257]) < 0)
    operator delete((void *)STACK[0x240]);
  if (SLOBYTE(STACK[0x287]) < 0)
    operator delete((void *)STACK[0x270]);
  if (SLOBYTE(STACK[0x2B7]) < 0)
    operator delete((void *)STACK[0x2A0]);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&STACK[0x2C8]);
  if (SLOBYTE(STACK[0x327]) < 0)
    operator delete((void *)STACK[0x310]);
  mediaplatform::DatabaseColumn<mediaplatform::Data>::~DatabaseColumn((uint64_t)&STACK[0x338]);
  if (SLOBYTE(STACK[0x3A7]) < 0)
    operator delete((void *)STACK[0x390]);
  if (SLOBYTE(STACK[0x3D7]) < 0)
    operator delete((void *)STACK[0x3C0]);
  if (SLOBYTE(STACK[0x407]) < 0)
    operator delete((void *)STACK[0x3F0]);
  if (SLOBYTE(STACK[0x437]) < 0)
    operator delete((void *)STACK[0x420]);
  if (SLOBYTE(STACK[0x467]) < 0)
    operator delete((void *)STACK[0x450]);
  if (SLOBYTE(STACK[0x497]) < 0)
    operator delete((void *)STACK[0x480]);
  if (SLOBYTE(STACK[0x4C7]) < 0)
    operator delete((void *)STACK[0x4B0]);
  mediaplatform::DatabaseColumn<mediaplatform::Data>::~DatabaseColumn((uint64_t)&STACK[0x4D8]);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&STACK[0x528]);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&STACK[0x568]);
  if (SLOBYTE(STACK[0x5C7]) < 0)
    operator delete((void *)STACK[0x5B0]);
  if (*((char *)a49 + 79) < 0)
    operator delete(*a18);
  mediaplatform::DatabaseTableBase::~DatabaseTableBase((void **)a49);
  _Unwind_Resume(a1);
}

_QWORD *mediaplatform::DatabaseTable<long long,int,long long,int,long long,long long,int,long long,int,long long,long long,int,long long,long long,int,long long,long long,int,long long,long long,int,int,int,int,long long,long long,int,int,int,int,int,int,int,long long,int,long long,long long,long long>::DatabaseTable(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40)
{
  _QWORD *v40;
  __int128 *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  std::string *v54;
  __int128 v55;
  int v56;
  int v57;
  int v58;
  int v59;
  int v60;
  int v61;
  int v62;
  int v63;
  int v64;
  int v65;
  int v66;
  int v67;
  int v68;
  int v69;
  int v70;
  int v71;
  int v72;
  int v73;
  int v74;
  int v75;
  int v76;
  int v77;
  int v78;
  int v79;
  int v80;
  int v81;
  int v82;
  int v83;
  int v84;
  int v85;
  int v86;
  int v87;
  int v88;
  int v89;
  int v90;
  int v91;
  int v92;
  int v93;
  int v94;
  int v95;
  int v96;
  int v97;
  int v98;
  int v99;
  int v100;
  std::string *v101;
  int v102;
  int v104;
  int v105;
  int v106;
  uint64_t v107;
  int v108;
  int v109;
  uint64_t v110;
  int v111;
  uint64_t v112;
  int v113;
  uint64_t v114;
  int v115;
  uint64_t v116;
  int v117;
  uint64_t v118;
  int v119;
  uint64_t v120;
  int v121;
  uint64_t v122;
  int v123;
  int v124;
  int v125;
  uint64_t v126;
  int v127;
  uint64_t v128;
  int v129;
  uint64_t v130;
  int v131;
  uint64_t v132;
  int v133;
  int v134;
  int v135;
  uint64_t v136;
  int v137;
  int v138;
  int v139;
  uint64_t v140;
  int v141;
  int v142;
  int v143;
  int v144;
  int v145;
  uint64_t v146;
  int v147;
  int v148;
  int v149;
  int v150;
  int v151;
  int v152;
  int v153;
  uint64_t v154;
  int v155;
  int v156;
  int v157;
  int v158;
  int v159;
  int v160;
  uint64_t v161;
  int v162;
  int v163;
  int v164;
  uint64_t v165;
  int v166;
  int v167;
  int v168;
  int v169;
  int v170;
  uint64_t v171;
  int v172;
  int v173;
  int v174;
  _QWORD *v175;
  std::string v176;
  int v177;
  uint64_t v178;
  int v179;
  uint64_t (**v180)();
  std::string v181;
  int v182;
  uint64_t v183;
  int v184;
  uint64_t (**v185)();
  std::string v186;
  int v187;
  uint64_t v188;
  int v189;
  uint64_t (**v190)();
  std::string v191;
  int v192;
  uint64_t v193;
  uint64_t (**v194)();
  std::string v195;
  int v196;
  uint64_t v197;
  int v198;
  uint64_t (**v199)();
  std::string v200;
  int v201;
  uint64_t v202;
  uint64_t (**v203)();
  std::string v204;
  int v205;
  uint64_t v206;
  uint64_t (**v207)();
  std::string v208;
  int v209;
  uint64_t v210;
  uint64_t (**v211)();
  std::string v212;
  int v213;
  uint64_t v214;
  uint64_t (**v215)();
  std::string v216;
  int v217;
  uint64_t v218;
  uint64_t (**v219)();
  std::string v220;
  int v221;
  uint64_t v222;
  uint64_t (**v223)();
  std::string v224;
  int v225;
  uint64_t v226;
  uint64_t (**v227)();
  std::string v228;
  int v229;
  uint64_t v230;
  int v231;
  uint64_t (**v232)();
  std::string v233;
  int v234;
  uint64_t v235;
  int v236;
  uint64_t (**v237)();
  std::string v238;
  int v239;
  uint64_t v240;
  uint64_t (**v241)();
  std::string v242;
  int v243;
  uint64_t v244;
  uint64_t (**v245)();
  std::string v246;
  int v247;
  uint64_t v248;
  uint64_t (**v249)();
  std::string v250;
  int v251;
  uint64_t v252;
  uint64_t (**v253)();
  std::string v254;
  int v255;
  uint64_t v256;
  int v257;
  uint64_t (**v258)();
  std::string v259;
  int v260;
  uint64_t v261;
  int v262;
  uint64_t (**v263)();
  std::string v264;
  int v265;
  uint64_t v266;
  uint64_t (**v267)();
  std::string v268;
  int v269;
  uint64_t v270;
  int v271;
  uint64_t (**v272)();
  std::string v273;
  int v274;
  uint64_t v275;
  int v276;
  uint64_t (**v277)();
  std::string v278;
  int v279;
  uint64_t v280;
  uint64_t (**v281)();
  std::string v282;
  int v283;
  uint64_t v284;
  int v285;
  uint64_t (**v286)();
  std::string v287;
  int v288;
  uint64_t v289;
  int v290;
  uint64_t (**v291)();
  std::string v292;
  int v293;
  uint64_t v294;
  uint64_t (**v295)();
  std::string v296;
  int v297;
  uint64_t v298;
  int v299;
  uint64_t (**v300)();
  std::string v301;
  int v302;
  uint64_t v303;
  int v304;
  uint64_t (**v305)();
  std::string v306;
  int v307;
  uint64_t v308;
  uint64_t (**v309)();
  std::string v310;
  int v311;
  uint64_t v312;
  int v313;
  uint64_t (**v314)();
  std::string v315;
  int v316;
  uint64_t v317;
  uint64_t (**v318)();
  std::string v319;
  int v320;
  uint64_t v321;
  int v322;
  uint64_t (**v323)();
  std::string v324;
  int v325;
  uint64_t v326;
  int v327;
  uint64_t (**v328)();
  std::string v329;
  int v330;
  uint64_t v331;
  uint64_t (**v332)();
  std::string v333;
  int v334;
  uint64_t v335;
  int v336;
  uint64_t (**v337)();
  std::string __s;
  int v339;
  uint64_t v340;
  uint64_t (**v341)();
  std::string v342;
  int v343;
  uint64_t v344;
  int v345;
  uint64_t (**v346)();
  std::string __p;
  int v348;
  uint64_t v349;
  int v350;
  uint64_t (**v351)();
  std::string v352;
  int v353;
  uint64_t v354;
  int v355;
  uint64_t (**v356)();
  std::string v357;
  int v358;
  uint64_t v359;
  int v360;
  uint64_t (**v361)();
  std::string v362;
  int v363;
  uint64_t v364;
  uint64_t (**v365)();
  std::string v366;
  int v367;
  uint64_t v368;
  int v369;
  uint64_t (**v370)();
  std::string v371;
  int v372;
  uint64_t v373;
  uint64_t (**v374)();
  std::string v375;
  int v376;
  uint64_t v377;
  uint64_t (**v378)();
  std::string v379;
  int v380;
  uint64_t v381;
  uint64_t (**v382)();
  std::string v383;
  int v384;
  uint64_t v385;
  uint64_t (**v386)();
  std::string v387;
  int v388;
  uint64_t v389;
  uint64_t (**v390)();
  std::string v391;
  int v392;
  uint64_t v393;
  uint64_t (**v394)();
  std::string v395;
  int v396;
  uint64_t v397;
  uint64_t (**v398)();
  std::string v399;
  int v400;
  uint64_t v401;
  int v402;
  uint64_t (**v403)();
  std::string v404;
  int v405;
  uint64_t v406;
  int v407;
  uint64_t (**v408)();
  std::string v409;
  int v410;
  uint64_t v411;
  uint64_t (**v412)();
  std::string v413;
  int v414;
  uint64_t v415;
  uint64_t (**v416)();
  std::string v417;
  int v418;
  uint64_t v419;
  uint64_t (**v420)();
  std::string v421;
  int v422;
  uint64_t v423;
  uint64_t (**v424)();
  std::string v425;
  int v426;
  uint64_t v427;
  int v428;
  uint64_t (**v429)();
  std::string v430;
  int v431;
  uint64_t v432;
  int v433;
  uint64_t (**v434)();
  std::string v435;
  int v436;
  uint64_t v437;
  uint64_t (**v438)();
  std::string v439;
  int v440;
  uint64_t v441;
  int v442;
  uint64_t (**v443)();
  std::string v444;
  int v445;
  uint64_t v446;
  int v447;
  uint64_t (**v448)();
  std::string v449;
  int v450;
  uint64_t v451;
  uint64_t (**v452)();
  std::string v453;
  int v454;
  uint64_t v455;
  int v456;
  uint64_t (**v457)();
  std::string v458;
  int v459;
  uint64_t v460;
  int v461;
  uint64_t (**v462)();
  std::string v463;
  int v464;
  uint64_t v465;
  uint64_t (**v466)();
  std::string v467;
  int v468;
  uint64_t v469;
  int v470;
  uint64_t (**v471)();
  std::string v472;
  int v473;
  uint64_t v474;
  int v475;
  uint64_t (**v476)();
  std::string v477;
  int v478;
  uint64_t v479;
  uint64_t (**v480)();
  std::string v481;
  int v482;
  uint64_t v483;
  int v484;
  uint64_t (**v485)();
  std::string v486;
  int v487;
  uint64_t v488;
  uint64_t (**v489)();
  std::string v490;
  int v491;
  uint64_t v492;
  int v493;
  uint64_t (**v494)();
  std::string v495;
  int v496;
  uint64_t v497;
  int v498;
  uint64_t (**v499)();
  std::string v500;
  int v501;
  uint64_t v502;
  uint64_t (**v503)();
  std::string v504;
  int v505;
  uint64_t v506;
  int v507;
  uint64_t (**v508)();
  std::string v509;
  int v510;
  uint64_t v511;

  v40 = (_QWORD *)MEMORY[0x24BDAC7A8]();
  v43 = v42;
  v45 = v44;
  v47 = v46;
  v49 = v48;
  v51 = v50;
  v53 = v52;
  v175 = v40;
  *v40 = &off_24C330F50;
  v54 = (std::string *)(v40 + 1);
  if (*((char *)v41 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v54, *(const std::string::value_type **)v41, *((_QWORD *)v41 + 1));
  }
  else
  {
    v55 = *v41;
    v54->__r_.__value_.__r.__words[2] = *((_QWORD *)v41 + 2);
    *(_OWORD *)&v54->__r_.__value_.__l.__data_ = v55;
  }
  v175[4] = 0;
  v175[5] = 0;
  v175[6] = 0;
  v175[7] = 0;
  *v175 = off_24C3358A0;
  v175[8] = 0;
  v175[9] = 0;
  if (*(char *)(v53 + 31) < 0)
    std::string::__init_copy_ctor_external(&v342, *(const std::string::value_type **)(v53 + 8), *(_QWORD *)(v53 + 16));
  else
    v342 = *(std::string *)(v53 + 8);
  v56 = *(_DWORD *)(v53 + 32);
  v341 = off_24C335B18;
  v344 = *(_QWORD *)(v53 + 36);
  v57 = *(_DWORD *)(v53 + 44);
  v343 = v56;
  v345 = v57;
  if (*(char *)(v51 + 31) < 0)
    std::string::__init_copy_ctor_external(&__s, *(const std::string::value_type **)(v51 + 8), *(_QWORD *)(v51 + 16));
  else
    __s = *(std::string *)(v51 + 8);
  v173 = *(_DWORD *)(v51 + 32);
  v339 = v173;
  v337 = off_24C335AF8;
  v171 = *(_QWORD *)(v51 + 36);
  v340 = v171;
  if (*(char *)(v49 + 31) < 0)
    std::string::__init_copy_ctor_external(&v333, *(const std::string::value_type **)(v49 + 8), *(_QWORD *)(v49 + 16));
  else
    v333 = *(std::string *)(v49 + 8);
  v58 = *(_DWORD *)(v49 + 32);
  v332 = off_24C335B18;
  v335 = *(_QWORD *)(v49 + 36);
  v59 = *(_DWORD *)(v49 + 44);
  v169 = v58;
  v334 = v58;
  v336 = v59;
  if (*(char *)(v47 + 31) < 0)
    std::string::__init_copy_ctor_external(&v329, *(const std::string::value_type **)(v47 + 8), *(_QWORD *)(v47 + 16));
  else
    v329 = *(std::string *)(v47 + 8);
  v167 = *(_DWORD *)(v47 + 32);
  v330 = v167;
  v328 = off_24C335AF8;
  v165 = *(_QWORD *)(v47 + 36);
  v331 = v165;
  if (*(char *)(v45 + 31) < 0)
    std::string::__init_copy_ctor_external(&v324, *(const std::string::value_type **)(v45 + 8), *(_QWORD *)(v45 + 16));
  else
    v324 = *(std::string *)(v45 + 8);
  v60 = *(_DWORD *)(v45 + 32);
  v323 = off_24C335B18;
  v326 = *(_QWORD *)(v45 + 36);
  v61 = *(_DWORD *)(v45 + 44);
  v325 = v60;
  v327 = v61;
  if (*(char *)(v43 + 31) < 0)
    std::string::__init_copy_ctor_external(&v319, *(const std::string::value_type **)(v43 + 8), *(_QWORD *)(v43 + 16));
  else
    v319 = *(std::string *)(v43 + 8);
  v62 = *(_DWORD *)(v43 + 32);
  v318 = off_24C335B18;
  v321 = *(_QWORD *)(v43 + 36);
  v63 = *(_DWORD *)(v43 + 44);
  v320 = v62;
  v322 = v63;
  if (*(char *)(a9 + 31) < 0)
    std::string::__init_copy_ctor_external(&v315, *(const std::string::value_type **)(a9 + 8), *(_QWORD *)(a9 + 16));
  else
    v315 = *(std::string *)(a9 + 8);
  v64 = *(_DWORD *)(a9 + 32);
  v316 = v64;
  v314 = off_24C335AF8;
  v161 = *(_QWORD *)(a9 + 36);
  v317 = v161;
  if (*(char *)(a10 + 31) < 0)
    std::string::__init_copy_ctor_external(&v310, *(const std::string::value_type **)(a10 + 8), *(_QWORD *)(a10 + 16));
  else
    v310 = *(std::string *)(a10 + 8);
  v65 = *(_DWORD *)(a10 + 32);
  v309 = off_24C335B18;
  v312 = *(_QWORD *)(a10 + 36);
  v66 = *(_DWORD *)(a10 + 44);
  v158 = v65;
  v311 = v65;
  v313 = v66;
  if (*(char *)(a11 + 31) < 0)
    std::string::__init_copy_ctor_external(&v306, *(const std::string::value_type **)(a11 + 8), *(_QWORD *)(a11 + 16));
  else
    v306 = *(std::string *)(a11 + 8);
  v156 = *(_DWORD *)(a11 + 32);
  v307 = v156;
  v305 = off_24C335AF8;
  v154 = *(_QWORD *)(a11 + 36);
  v308 = v154;
  if (*(char *)(a12 + 31) < 0)
    std::string::__init_copy_ctor_external(&v301, *(const std::string::value_type **)(a12 + 8), *(_QWORD *)(a12 + 16));
  else
    v301 = *(std::string *)(a12 + 8);
  v67 = *(_DWORD *)(a12 + 32);
  v300 = off_24C335B18;
  v303 = *(_QWORD *)(a12 + 36);
  v68 = *(_DWORD *)(a12 + 44);
  v152 = v67;
  v302 = v67;
  v304 = v68;
  if (*(char *)(a13 + 31) < 0)
    std::string::__init_copy_ctor_external(&v296, *(const std::string::value_type **)(a13 + 8), *(_QWORD *)(a13 + 16));
  else
    v296 = *(std::string *)(a13 + 8);
  v69 = *(_DWORD *)(a13 + 32);
  v295 = off_24C335B18;
  v298 = *(_QWORD *)(a13 + 36);
  v70 = *(_DWORD *)(a13 + 44);
  v150 = v69;
  v297 = v69;
  v299 = v70;
  if (*(char *)(a14 + 31) < 0)
    std::string::__init_copy_ctor_external(&v292, *(const std::string::value_type **)(a14 + 8), *(_QWORD *)(a14 + 16));
  else
    v292 = *(std::string *)(a14 + 8);
  v148 = *(_DWORD *)(a14 + 32);
  v293 = v148;
  v291 = off_24C335AF8;
  v146 = *(_QWORD *)(a14 + 36);
  v294 = v146;
  if (*(char *)(a15 + 31) < 0)
    std::string::__init_copy_ctor_external(&v287, *(const std::string::value_type **)(a15 + 8), *(_QWORD *)(a15 + 16));
  else
    v287 = *(std::string *)(a15 + 8);
  v71 = *(_DWORD *)(a15 + 32);
  v286 = off_24C335B18;
  v289 = *(_QWORD *)(a15 + 36);
  v72 = *(_DWORD *)(a15 + 44);
  v144 = v71;
  v288 = v71;
  v290 = v72;
  if (*(char *)(a16 + 31) < 0)
    std::string::__init_copy_ctor_external(&v282, *(const std::string::value_type **)(a16 + 8), *(_QWORD *)(a16 + 16));
  else
    v282 = *(std::string *)(a16 + 8);
  v73 = *(_DWORD *)(a16 + 32);
  v281 = off_24C335B18;
  v284 = *(_QWORD *)(a16 + 36);
  v74 = *(_DWORD *)(a16 + 44);
  v142 = v73;
  v283 = v73;
  v285 = v74;
  if (*(char *)(a17 + 31) < 0)
    std::string::__init_copy_ctor_external(&v278, *(const std::string::value_type **)(a17 + 8), *(_QWORD *)(a17 + 16));
  else
    v278 = *(std::string *)(a17 + 8);
  v141 = *(_DWORD *)(a17 + 32);
  v279 = v141;
  v277 = off_24C335AF8;
  v140 = *(_QWORD *)(a17 + 36);
  v280 = v140;
  if (*(char *)(a18 + 31) < 0)
    std::string::__init_copy_ctor_external(&v273, *(const std::string::value_type **)(a18 + 8), *(_QWORD *)(a18 + 16));
  else
    v273 = *(std::string *)(a18 + 8);
  v75 = *(_DWORD *)(a18 + 32);
  v272 = off_24C335B18;
  v275 = *(_QWORD *)(a18 + 36);
  v76 = *(_DWORD *)(a18 + 44);
  v139 = v75;
  v274 = v75;
  v276 = v76;
  if (*(char *)(a19 + 31) < 0)
    std::string::__init_copy_ctor_external(&v268, *(const std::string::value_type **)(a19 + 8), *(_QWORD *)(a19 + 16));
  else
    v268 = *(std::string *)(a19 + 8);
  v77 = *(_DWORD *)(a19 + 32);
  v267 = off_24C335B18;
  v270 = *(_QWORD *)(a19 + 36);
  v78 = *(_DWORD *)(a19 + 44);
  v138 = v77;
  v269 = v77;
  v271 = v78;
  if (*(char *)(a20 + 31) < 0)
    std::string::__init_copy_ctor_external(&v264, *(const std::string::value_type **)(a20 + 8), *(_QWORD *)(a20 + 16));
  else
    v264 = *(std::string *)(a20 + 8);
  v137 = *(_DWORD *)(a20 + 32);
  v265 = v137;
  v263 = off_24C335AF8;
  v136 = *(_QWORD *)(a20 + 36);
  v266 = v136;
  if (*(char *)(a21 + 31) < 0)
    std::string::__init_copy_ctor_external(&v259, *(const std::string::value_type **)(a21 + 8), *(_QWORD *)(a21 + 16));
  else
    v259 = *(std::string *)(a21 + 8);
  v79 = *(_DWORD *)(a21 + 32);
  v258 = off_24C335B18;
  v261 = *(_QWORD *)(a21 + 36);
  v80 = *(_DWORD *)(a21 + 44);
  v135 = v79;
  v260 = v79;
  v262 = v80;
  if (*(char *)(a22 + 31) < 0)
    std::string::__init_copy_ctor_external(&v254, *(const std::string::value_type **)(a22 + 8), *(_QWORD *)(a22 + 16));
  else
    v254 = *(std::string *)(a22 + 8);
  v81 = *(_DWORD *)(a22 + 32);
  v253 = off_24C335B18;
  v256 = *(_QWORD *)(a22 + 36);
  v82 = *(_DWORD *)(a22 + 44);
  v134 = v81;
  v255 = v81;
  v257 = v82;
  if (*(char *)(a23 + 31) < 0)
    std::string::__init_copy_ctor_external(&v250, *(const std::string::value_type **)(a23 + 8), *(_QWORD *)(a23 + 16));
  else
    v250 = *(std::string *)(a23 + 8);
  v133 = *(_DWORD *)(a23 + 32);
  v251 = v133;
  v249 = off_24C335AF8;
  v132 = *(_QWORD *)(a23 + 36);
  v252 = v132;
  if (*(char *)(a24 + 31) < 0)
    std::string::__init_copy_ctor_external(&v246, *(const std::string::value_type **)(a24 + 8), *(_QWORD *)(a24 + 16));
  else
    v246 = *(std::string *)(a24 + 8);
  v131 = *(_DWORD *)(a24 + 32);
  v247 = v131;
  v245 = off_24C335AF8;
  v130 = *(_QWORD *)(a24 + 36);
  v248 = v130;
  if (*(char *)(a25 + 31) < 0)
    std::string::__init_copy_ctor_external(&v242, *(const std::string::value_type **)(a25 + 8), *(_QWORD *)(a25 + 16));
  else
    v242 = *(std::string *)(a25 + 8);
  v129 = *(_DWORD *)(a25 + 32);
  v243 = v129;
  v241 = off_24C335AF8;
  v128 = *(_QWORD *)(a25 + 36);
  v244 = v128;
  if (*(char *)(a26 + 31) < 0)
    std::string::__init_copy_ctor_external(&v238, *(const std::string::value_type **)(a26 + 8), *(_QWORD *)(a26 + 16));
  else
    v238 = *(std::string *)(a26 + 8);
  v127 = *(_DWORD *)(a26 + 32);
  v239 = v127;
  v237 = off_24C335AF8;
  v126 = *(_QWORD *)(a26 + 36);
  v240 = v126;
  if (*(char *)(a27 + 31) < 0)
    std::string::__init_copy_ctor_external(&v233, *(const std::string::value_type **)(a27 + 8), *(_QWORD *)(a27 + 16));
  else
    v233 = *(std::string *)(a27 + 8);
  v83 = *(_DWORD *)(a27 + 32);
  v232 = off_24C335B18;
  v235 = *(_QWORD *)(a27 + 36);
  v84 = *(_DWORD *)(a27 + 44);
  v125 = v83;
  v234 = v83;
  v236 = v84;
  if (*(char *)(a28 + 31) < 0)
    std::string::__init_copy_ctor_external(&v228, *(const std::string::value_type **)(a28 + 8), *(_QWORD *)(a28 + 16));
  else
    v228 = *(std::string *)(a28 + 8);
  v85 = *(_DWORD *)(a28 + 32);
  v227 = off_24C335B18;
  v230 = *(_QWORD *)(a28 + 36);
  v86 = *(_DWORD *)(a28 + 44);
  v124 = v85;
  v229 = v85;
  v231 = v86;
  if (*(char *)(a29 + 31) < 0)
    std::string::__init_copy_ctor_external(&v224, *(const std::string::value_type **)(a29 + 8), *(_QWORD *)(a29 + 16));
  else
    v224 = *(std::string *)(a29 + 8);
  v123 = *(_DWORD *)(a29 + 32);
  v225 = v123;
  v223 = off_24C335AF8;
  v122 = *(_QWORD *)(a29 + 36);
  v226 = v122;
  if (*(char *)(a30 + 31) < 0)
    std::string::__init_copy_ctor_external(&v220, *(const std::string::value_type **)(a30 + 8), *(_QWORD *)(a30 + 16));
  else
    v220 = *(std::string *)(a30 + 8);
  v121 = *(_DWORD *)(a30 + 32);
  v221 = v121;
  v219 = off_24C335AF8;
  v120 = *(_QWORD *)(a30 + 36);
  v222 = v120;
  v215 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a31 + 31) < 0)
    std::string::__init_copy_ctor_external(&v216, *(const std::string::value_type **)(a31 + 8), *(_QWORD *)(a31 + 16));
  else
    v216 = *(std::string *)(a31 + 8);
  v119 = *(_DWORD *)(a31 + 32);
  v217 = v119;
  v215 = off_24C335AF8;
  v118 = *(_QWORD *)(a31 + 36);
  v218 = v118;
  v211 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a32 + 31) < 0)
    std::string::__init_copy_ctor_external(&v212, *(const std::string::value_type **)(a32 + 8), *(_QWORD *)(a32 + 16));
  else
    v212 = *(std::string *)(a32 + 8);
  v117 = *(_DWORD *)(a32 + 32);
  v213 = v117;
  v211 = off_24C335AF8;
  v116 = *(_QWORD *)(a32 + 36);
  v214 = v116;
  v207 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a33 + 31) < 0)
    std::string::__init_copy_ctor_external(&v208, *(const std::string::value_type **)(a33 + 8), *(_QWORD *)(a33 + 16));
  else
    v208 = *(std::string *)(a33 + 8);
  v115 = *(_DWORD *)(a33 + 32);
  v209 = v115;
  v207 = off_24C335AF8;
  v114 = *(_QWORD *)(a33 + 36);
  v210 = v114;
  v203 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a34 + 31) < 0)
    std::string::__init_copy_ctor_external(&v204, *(const std::string::value_type **)(a34 + 8), *(_QWORD *)(a34 + 16));
  else
    v204 = *(std::string *)(a34 + 8);
  v113 = *(_DWORD *)(a34 + 32);
  v205 = v113;
  v203 = off_24C335AF8;
  v112 = *(_QWORD *)(a34 + 36);
  v206 = v112;
  v199 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a35 + 31) < 0)
    std::string::__init_copy_ctor_external(&v200, *(const std::string::value_type **)(a35 + 8), *(_QWORD *)(a35 + 16));
  else
    v200 = *(std::string *)(a35 + 8);
  v111 = *(_DWORD *)(a35 + 32);
  v201 = v111;
  v199 = off_24C335AF8;
  v110 = *(_QWORD *)(a35 + 36);
  v202 = v110;
  v194 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a36 + 31) < 0)
    std::string::__init_copy_ctor_external(&v195, *(const std::string::value_type **)(a36 + 8), *(_QWORD *)(a36 + 16));
  else
    v195 = *(std::string *)(a36 + 8);
  v87 = *(_DWORD *)(a36 + 32);
  v194 = off_24C335B18;
  v197 = *(_QWORD *)(a36 + 36);
  v88 = *(_DWORD *)(a36 + 44);
  v109 = v87;
  v196 = v87;
  v198 = v88;
  v190 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a37 + 31) < 0)
    std::string::__init_copy_ctor_external(&v191, *(const std::string::value_type **)(a37 + 8), *(_QWORD *)(a37 + 16));
  else
    v191 = *(std::string *)(a37 + 8);
  v108 = *(_DWORD *)(a37 + 32);
  v192 = v108;
  v190 = off_24C335AF8;
  v107 = *(_QWORD *)(a37 + 36);
  v193 = v107;
  v185 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a38 + 31) < 0)
    std::string::__init_copy_ctor_external(&v186, *(const std::string::value_type **)(a38 + 8), *(_QWORD *)(a38 + 16));
  else
    v186 = *(std::string *)(a38 + 8);
  v89 = *(_DWORD *)(a38 + 32);
  v185 = off_24C335B18;
  v188 = *(_QWORD *)(a38 + 36);
  v90 = *(_DWORD *)(a38 + 44);
  v106 = v89;
  v187 = v89;
  v189 = v90;
  v180 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a39 + 31) < 0)
    std::string::__init_copy_ctor_external(&v181, *(const std::string::value_type **)(a39 + 8), *(_QWORD *)(a39 + 16));
  else
    v181 = *(std::string *)(a39 + 8);
  v105 = *(_DWORD *)(a39 + 32);
  v182 = v105;
  v180 = off_24C335B18;
  v183 = *(_QWORD *)(a39 + 36);
  v184 = *(_DWORD *)(a39 + 44);
  if (*(char *)(a40 + 31) < 0)
    std::string::__init_copy_ctor_external(&v176, *(const std::string::value_type **)(a40 + 8), *(_QWORD *)(a40 + 16));
  else
    v176 = *(std::string *)(a40 + 8);
  v104 = *(_DWORD *)(a40 + 32);
  v177 = v104;
  v178 = *(_QWORD *)(a40 + 36);
  v179 = *(_DWORD *)(a40 + 44);
  v508 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v509, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
  else
    v509 = __s;
  v510 = v173;
  v508 = off_24C335AF8;
  v511 = v171;
  v503 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v333.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v504, v333.__r_.__value_.__l.__data_, v333.__r_.__value_.__l.__size_);
  else
    v504 = v333;
  v503 = off_24C335B18;
  v506 = v335;
  v505 = v169;
  v507 = v336;
  v499 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v329.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v500, v329.__r_.__value_.__l.__data_, v329.__r_.__value_.__l.__size_);
  else
    v500 = v329;
  v501 = v167;
  v499 = off_24C335AF8;
  v502 = v165;
  v494 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v324.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v495, v324.__r_.__value_.__l.__data_, v324.__r_.__value_.__l.__size_);
  else
    v495 = v324;
  v494 = off_24C335B18;
  v497 = v326;
  v496 = v60;
  v498 = v327;
  v489 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v319.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v490, v319.__r_.__value_.__l.__data_, v319.__r_.__value_.__l.__size_);
  else
    v490 = v319;
  v489 = off_24C335B18;
  v492 = v321;
  v491 = v62;
  v493 = v322;
  v485 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v315.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v486, v315.__r_.__value_.__l.__data_, v315.__r_.__value_.__l.__size_);
  else
    v486 = v315;
  v487 = v64;
  v485 = off_24C335AF8;
  v488 = v161;
  v480 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v310.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v481, v310.__r_.__value_.__l.__data_, v310.__r_.__value_.__l.__size_);
  else
    v481 = v310;
  v480 = off_24C335B18;
  v483 = v312;
  v482 = v158;
  v484 = v313;
  v476 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v306.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v477, v306.__r_.__value_.__l.__data_, v306.__r_.__value_.__l.__size_);
  else
    v477 = v306;
  v478 = v156;
  v476 = off_24C335AF8;
  v479 = v154;
  v471 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v301.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v472, v301.__r_.__value_.__l.__data_, v301.__r_.__value_.__l.__size_);
  else
    v472 = v301;
  v471 = off_24C335B18;
  v474 = v303;
  v473 = v152;
  v475 = v304;
  v466 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v296.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v467, v296.__r_.__value_.__l.__data_, v296.__r_.__value_.__l.__size_);
  else
    v467 = v296;
  v466 = off_24C335B18;
  v469 = v298;
  v468 = v150;
  v470 = v299;
  v462 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v292.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v463, v292.__r_.__value_.__l.__data_, v292.__r_.__value_.__l.__size_);
  else
    v463 = v292;
  v464 = v148;
  v462 = off_24C335AF8;
  v465 = v146;
  v457 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v287.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v458, v287.__r_.__value_.__l.__data_, v287.__r_.__value_.__l.__size_);
  else
    v458 = v287;
  v457 = off_24C335B18;
  v460 = v289;
  v459 = v144;
  v461 = v290;
  v452 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v282.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v453, v282.__r_.__value_.__l.__data_, v282.__r_.__value_.__l.__size_);
  else
    v453 = v282;
  v452 = off_24C335B18;
  v455 = v284;
  v454 = v142;
  v456 = v285;
  v448 = (uint64_t (**)())off_24C335D90;
  v91 = SHIBYTE(v278.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v278.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v449, v278.__r_.__value_.__l.__data_, v278.__r_.__value_.__l.__size_);
  else
    v449 = v278;
  v450 = v141;
  v448 = off_24C335AF8;
  v451 = v140;
  v443 = (uint64_t (**)())off_24C335D90;
  v92 = SHIBYTE(v273.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v273.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v444, v273.__r_.__value_.__l.__data_, v273.__r_.__value_.__l.__size_);
  else
    v444 = v273;
  v443 = off_24C335B18;
  v446 = v275;
  v445 = v139;
  v447 = v276;
  v438 = (uint64_t (**)())off_24C335D90;
  v93 = SHIBYTE(v268.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v268.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v439, v268.__r_.__value_.__l.__data_, v268.__r_.__value_.__l.__size_);
  else
    v439 = v268;
  v438 = off_24C335B18;
  v441 = v270;
  v440 = v138;
  v442 = v271;
  v434 = (uint64_t (**)())off_24C335D90;
  v174 = SHIBYTE(v264.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v264.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v435, v264.__r_.__value_.__l.__data_, v264.__r_.__value_.__l.__size_);
  else
    v435 = v264;
  v436 = v137;
  v434 = off_24C335AF8;
  v437 = v136;
  v429 = (uint64_t (**)())off_24C335D90;
  v172 = SHIBYTE(v259.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v259.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v430, v259.__r_.__value_.__l.__data_, v259.__r_.__value_.__l.__size_);
  else
    v430 = v259;
  v429 = off_24C335B18;
  v432 = v261;
  v431 = v135;
  v433 = v262;
  v424 = (uint64_t (**)())off_24C335D90;
  v170 = SHIBYTE(v254.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v254.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v425, v254.__r_.__value_.__l.__data_, v254.__r_.__value_.__l.__size_);
  else
    v425 = v254;
  v424 = off_24C335B18;
  v427 = v256;
  v426 = v134;
  v428 = v257;
  v420 = (uint64_t (**)())off_24C335D90;
  v168 = SHIBYTE(v250.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v250.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v421, v250.__r_.__value_.__l.__data_, v250.__r_.__value_.__l.__size_);
  else
    v421 = v250;
  v422 = v133;
  v420 = off_24C335AF8;
  v423 = v132;
  v416 = (uint64_t (**)())off_24C335D90;
  v94 = SHIBYTE(v246.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v246.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v417, v246.__r_.__value_.__l.__data_, v246.__r_.__value_.__l.__size_);
  else
    v417 = v246;
  v418 = v131;
  v416 = off_24C335AF8;
  v419 = v130;
  v412 = (uint64_t (**)())off_24C335D90;
  v166 = SHIBYTE(v242.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v242.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v413, v242.__r_.__value_.__l.__data_, v242.__r_.__value_.__l.__size_);
  else
    v413 = v242;
  v414 = v129;
  v412 = off_24C335AF8;
  v415 = v128;
  v408 = (uint64_t (**)())off_24C335D90;
  v164 = SHIBYTE(v238.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v238.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v409, v238.__r_.__value_.__l.__data_, v238.__r_.__value_.__l.__size_);
  else
    v409 = v238;
  v410 = v127;
  v408 = off_24C335AF8;
  v411 = v126;
  v403 = (uint64_t (**)())off_24C335D90;
  v163 = SHIBYTE(v233.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v233.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v404, v233.__r_.__value_.__l.__data_, v233.__r_.__value_.__l.__size_);
  else
    v404 = v233;
  v403 = off_24C335B18;
  v406 = v235;
  v405 = v125;
  v407 = v236;
  v398 = (uint64_t (**)())off_24C335D90;
  v162 = SHIBYTE(v228.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v228.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v399, v228.__r_.__value_.__l.__data_, v228.__r_.__value_.__l.__size_);
  else
    v399 = v228;
  v398 = off_24C335B18;
  v401 = v230;
  v400 = v124;
  v402 = v231;
  v394 = (uint64_t (**)())off_24C335D90;
  v160 = SHIBYTE(v224.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v224.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v395, v224.__r_.__value_.__l.__data_, v224.__r_.__value_.__l.__size_);
  else
    v395 = v224;
  v396 = v123;
  v394 = off_24C335AF8;
  v397 = v122;
  v390 = (uint64_t (**)())off_24C335D90;
  v159 = SHIBYTE(v220.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v220.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v391, v220.__r_.__value_.__l.__data_, v220.__r_.__value_.__l.__size_);
  else
    v391 = v220;
  v392 = v121;
  v390 = off_24C335AF8;
  v393 = v120;
  v386 = (uint64_t (**)())off_24C335D90;
  v157 = SHIBYTE(v216.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v216.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v387, v216.__r_.__value_.__l.__data_, v216.__r_.__value_.__l.__size_);
  else
    v387 = v216;
  v388 = v119;
  v386 = off_24C335AF8;
  v389 = v118;
  v382 = (uint64_t (**)())off_24C335D90;
  v155 = SHIBYTE(v212.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v212.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v383, v212.__r_.__value_.__l.__data_, v212.__r_.__value_.__l.__size_);
  else
    v383 = v212;
  v384 = v117;
  v382 = off_24C335AF8;
  v385 = v116;
  v378 = (uint64_t (**)())off_24C335D90;
  v153 = SHIBYTE(v208.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v208.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v379, v208.__r_.__value_.__l.__data_, v208.__r_.__value_.__l.__size_);
  else
    v379 = v208;
  v380 = v115;
  v378 = off_24C335AF8;
  v381 = v114;
  v374 = (uint64_t (**)())off_24C335D90;
  v149 = SHIBYTE(v204.__r_.__value_.__r.__words[2]);
  v151 = v93;
  if (SHIBYTE(v204.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v375, v204.__r_.__value_.__l.__data_, v204.__r_.__value_.__l.__size_);
  else
    v375 = v204;
  v376 = v113;
  v374 = off_24C335AF8;
  v377 = v112;
  v370 = (uint64_t (**)())off_24C335D90;
  v95 = SHIBYTE(v200.__r_.__value_.__r.__words[2]);
  v147 = v92;
  if (SHIBYTE(v200.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v371, v200.__r_.__value_.__l.__data_, v200.__r_.__value_.__l.__size_);
  else
    v371 = v200;
  v372 = v111;
  v370 = off_24C335AF8;
  v373 = v110;
  v365 = (uint64_t (**)())off_24C335D90;
  v96 = SHIBYTE(v195.__r_.__value_.__r.__words[2]);
  v145 = v91;
  if (SHIBYTE(v195.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v366, v195.__r_.__value_.__l.__data_, v195.__r_.__value_.__l.__size_);
  else
    v366 = v195;
  v365 = off_24C335B18;
  v368 = v197;
  v367 = v109;
  v369 = v198;
  v361 = (uint64_t (**)())off_24C335D90;
  v97 = SHIBYTE(v191.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v191.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v362, v191.__r_.__value_.__l.__data_, v191.__r_.__value_.__l.__size_);
  else
    v362 = v191;
  v363 = v108;
  v361 = off_24C335AF8;
  v364 = v107;
  v356 = (uint64_t (**)())off_24C335D90;
  v98 = SHIBYTE(v186.__r_.__value_.__r.__words[2]);
  v143 = v94;
  if (SHIBYTE(v186.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v357, v186.__r_.__value_.__l.__data_, v186.__r_.__value_.__l.__size_);
  else
    v357 = v186;
  v356 = off_24C335B18;
  v359 = v188;
  v358 = v106;
  v360 = v189;
  v351 = (uint64_t (**)())off_24C335D90;
  v99 = SHIBYTE(v181.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v181.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v352, v181.__r_.__value_.__l.__data_, v181.__r_.__value_.__l.__size_);
  else
    v352 = v181;
  v351 = off_24C335B18;
  v354 = v183;
  v353 = v105;
  v355 = v184;
  v346 = (uint64_t (**)())off_24C335D90;
  v100 = SHIBYTE(v176.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v176.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&__p, v176.__r_.__value_.__l.__data_, v176.__r_.__value_.__l.__size_);
  else
    __p = v176;
  v346 = off_24C335B18;
  v349 = v178;
  v348 = v104;
  v350 = v179;
  mediaplatform::DatabaseColumnTuple<1ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>>::DatabaseColumnTuple((uint64_t)(v175 + 10), (uint64_t)&v508, (uint64_t)&v503, (uint64_t)&v499, (uint64_t)&v494, (uint64_t)&v489, (uint64_t)&v485, (uint64_t)&v480, (uint64_t)&v476, (uint64_t)&v471, (uint64_t)&v466, (uint64_t)&v462, (uint64_t)&v457, (uint64_t)&v452, (uint64_t)&v448, (uint64_t)&v443, (uint64_t)&v438, (uint64_t)&v434, (uint64_t)&v429,
    (uint64_t)&v424,
    (uint64_t)&v420,
    (uint64_t)&v416,
    (uint64_t)&v412,
    (uint64_t)&v408,
    (uint64_t)&v403,
    (uint64_t)&v398,
    (uint64_t)&v394,
    (uint64_t)&v390,
    (uint64_t)&v386,
    (uint64_t)&v382,
    (uint64_t)&v378,
    (uint64_t)&v374,
    (uint64_t)&v370,
    (uint64_t)&v365,
    (uint64_t)&v361,
    (uint64_t)&v356,
    (uint64_t)&v351,
    (uint64_t)&v346);
  v346 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v351 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v352.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v352.__r_.__value_.__l.__data_);
  v356 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v357.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v357.__r_.__value_.__l.__data_);
  v361 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v362.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v362.__r_.__value_.__l.__data_);
  v365 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v366.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v366.__r_.__value_.__l.__data_);
  v370 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v371.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v371.__r_.__value_.__l.__data_);
  v374 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v375.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v375.__r_.__value_.__l.__data_);
  v378 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v379.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v379.__r_.__value_.__l.__data_);
  v382 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v383.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v383.__r_.__value_.__l.__data_);
  v386 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v387.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v387.__r_.__value_.__l.__data_);
  v390 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v391.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v391.__r_.__value_.__l.__data_);
  v394 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v395.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v395.__r_.__value_.__l.__data_);
  v398 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v399.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v399.__r_.__value_.__l.__data_);
  v403 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v404.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v404.__r_.__value_.__l.__data_);
  v408 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v409.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v409.__r_.__value_.__l.__data_);
  v412 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v413.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v413.__r_.__value_.__l.__data_);
  v416 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v417.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v417.__r_.__value_.__l.__data_);
  v420 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v421.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v421.__r_.__value_.__l.__data_);
  v424 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v425.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v425.__r_.__value_.__l.__data_);
  v429 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v430.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v430.__r_.__value_.__l.__data_);
  v434 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v435.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v435.__r_.__value_.__l.__data_);
  v438 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v439.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v439.__r_.__value_.__l.__data_);
  v443 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v444.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v444.__r_.__value_.__l.__data_);
  v448 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v449.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v449.__r_.__value_.__l.__data_);
  v452 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v453.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v453.__r_.__value_.__l.__data_);
  v457 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v458.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v458.__r_.__value_.__l.__data_);
  v462 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v463.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v463.__r_.__value_.__l.__data_);
  v466 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v467.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v467.__r_.__value_.__l.__data_);
  v471 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v472.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v472.__r_.__value_.__l.__data_);
  v476 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v477.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v477.__r_.__value_.__l.__data_);
  v480 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v481.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v481.__r_.__value_.__l.__data_);
  v485 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v486.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v486.__r_.__value_.__l.__data_);
  v489 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v490.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v490.__r_.__value_.__l.__data_);
  v494 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v495.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v495.__r_.__value_.__l.__data_);
  v499 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v500.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v500.__r_.__value_.__l.__data_);
  v503 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v504.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v504.__r_.__value_.__l.__data_);
  v508 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v509.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v509.__r_.__value_.__l.__data_);
  v175[232] = off_24C335D90;
  v101 = (std::string *)(v175 + 233);
  v102 = SHIBYTE(v342.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v342.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v101, v342.__r_.__value_.__l.__data_, v342.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v101->__r_.__value_.__l.__data_ = *(_OWORD *)&v342.__r_.__value_.__l.__data_;
    v175[235] = *((_QWORD *)&v342.__r_.__value_.__l + 2);
  }
  *((_DWORD *)v175 + 472) = v343;
  v175[232] = off_24C335B18;
  *(_QWORD *)((char *)v175 + 1892) = v344;
  *((_DWORD *)v175 + 475) = v345;
  if (v100 < 0)
    operator delete(v176.__r_.__value_.__l.__data_);
  v180 = (uint64_t (**)())off_24C335D90;
  if (v99 < 0)
    operator delete(v181.__r_.__value_.__l.__data_);
  v185 = (uint64_t (**)())off_24C335D90;
  if (v98 < 0)
    operator delete(v186.__r_.__value_.__l.__data_);
  v190 = (uint64_t (**)())off_24C335D90;
  if (v97 < 0)
    operator delete(v191.__r_.__value_.__l.__data_);
  v194 = (uint64_t (**)())off_24C335D90;
  if (v96 < 0)
    operator delete(v195.__r_.__value_.__l.__data_);
  v199 = (uint64_t (**)())off_24C335D90;
  if (v95 < 0)
    operator delete(v200.__r_.__value_.__l.__data_);
  v203 = (uint64_t (**)())off_24C335D90;
  if (v149 < 0)
    operator delete(v204.__r_.__value_.__l.__data_);
  v207 = (uint64_t (**)())off_24C335D90;
  if (v153 < 0)
    operator delete(v208.__r_.__value_.__l.__data_);
  v211 = (uint64_t (**)())off_24C335D90;
  if (v155 < 0)
    operator delete(v212.__r_.__value_.__l.__data_);
  v215 = (uint64_t (**)())off_24C335D90;
  if (v157 < 0)
    operator delete(v216.__r_.__value_.__l.__data_);
  v219 = (uint64_t (**)())off_24C335D90;
  if (v159 < 0)
    operator delete(v220.__r_.__value_.__l.__data_);
  if (v160 < 0)
    operator delete(v224.__r_.__value_.__l.__data_);
  if (v162 < 0)
    operator delete(v228.__r_.__value_.__l.__data_);
  if (v163 < 0)
    operator delete(v233.__r_.__value_.__l.__data_);
  if (v164 < 0)
    operator delete(v238.__r_.__value_.__l.__data_);
  if (v166 < 0)
  {
    operator delete(v242.__r_.__value_.__l.__data_);
    if ((v143 & 0x80000000) == 0)
      goto LABEL_338;
  }
  else if ((v143 & 0x80000000) == 0)
  {
    goto LABEL_338;
  }
  operator delete(v246.__r_.__value_.__l.__data_);
LABEL_338:
  if (v168 < 0)
    operator delete(v250.__r_.__value_.__l.__data_);
  if (v170 < 0)
    operator delete(v254.__r_.__value_.__l.__data_);
  if (v172 < 0)
    operator delete(v259.__r_.__value_.__l.__data_);
  if (v174 < 0)
  {
    operator delete(v264.__r_.__value_.__l.__data_);
    if ((v151 & 0x80000000) == 0)
    {
LABEL_346:
      if ((v147 & 0x80000000) == 0)
        goto LABEL_347;
LABEL_379:
      operator delete(v273.__r_.__value_.__l.__data_);
      if ((v145 & 0x80000000) == 0)
        goto LABEL_348;
      goto LABEL_380;
    }
  }
  else if ((v151 & 0x80000000) == 0)
  {
    goto LABEL_346;
  }
  operator delete(v268.__r_.__value_.__l.__data_);
  if (v147 < 0)
    goto LABEL_379;
LABEL_347:
  if ((v145 & 0x80000000) == 0)
    goto LABEL_348;
LABEL_380:
  operator delete(v278.__r_.__value_.__l.__data_);
LABEL_348:
  if (SHIBYTE(v282.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v282.__r_.__value_.__l.__data_);
  if (SHIBYTE(v287.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v287.__r_.__value_.__l.__data_);
  if (SHIBYTE(v292.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v292.__r_.__value_.__l.__data_);
  if (SHIBYTE(v296.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v296.__r_.__value_.__l.__data_);
  if (SHIBYTE(v301.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v301.__r_.__value_.__l.__data_);
  if (SHIBYTE(v306.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v306.__r_.__value_.__l.__data_);
  if (SHIBYTE(v310.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v310.__r_.__value_.__l.__data_);
  if (SHIBYTE(v315.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v315.__r_.__value_.__l.__data_);
  if (SHIBYTE(v319.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v319.__r_.__value_.__l.__data_);
  if (SHIBYTE(v324.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v324.__r_.__value_.__l.__data_);
  if (SHIBYTE(v329.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v329.__r_.__value_.__l.__data_);
  if (SHIBYTE(v333.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v333.__r_.__value_.__l.__data_);
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__s.__r_.__value_.__l.__data_);
    if ((v102 & 0x80000000) == 0)
      return v175;
LABEL_382:
    operator delete(v342.__r_.__value_.__l.__data_);
    return v175;
  }
  if (v102 < 0)
    goto LABEL_382;
  return v175;
}

void sub_20A6B2FF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void **a39)
{
  uint64_t v39;
  unint64_t v40;

  mediaplatform::DatabaseColumnTuple<1ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>>::~DatabaseColumnTuple(v39);
  STACK[0x388] = v40;
  if (SLOBYTE(STACK[0x3A7]) < 0)
    operator delete((void *)STACK[0x390]);
  STACK[0x3B8] = v40;
  if (SLOBYTE(STACK[0x3D7]) < 0)
    operator delete((void *)STACK[0x3C0]);
  STACK[0x3E8] = v40;
  if (SLOBYTE(STACK[0x407]) < 0)
    operator delete((void *)STACK[0x3F0]);
  STACK[0x418] = v40;
  if (SLOBYTE(STACK[0x437]) < 0)
    operator delete((void *)STACK[0x420]);
  STACK[0x448] = v40;
  if (SLOBYTE(STACK[0x467]) < 0)
    operator delete((void *)STACK[0x450]);
  STACK[0x478] = v40;
  if (SLOBYTE(STACK[0x497]) < 0)
    operator delete((void *)STACK[0x480]);
  STACK[0x4A8] = v40;
  if (SLOBYTE(STACK[0x4C7]) < 0)
    operator delete((void *)STACK[0x4B0]);
  STACK[0x4D8] = v40;
  if (SLOBYTE(STACK[0x4F7]) < 0)
    operator delete((void *)STACK[0x4E0]);
  STACK[0x508] = v40;
  if (SLOBYTE(STACK[0x527]) < 0)
    operator delete((void *)STACK[0x510]);
  STACK[0x538] = v40;
  if (SLOBYTE(STACK[0x557]) < 0)
    operator delete((void *)STACK[0x540]);
  STACK[0x568] = v40;
  if (SLOBYTE(STACK[0x587]) < 0)
    operator delete((void *)STACK[0x570]);
  STACK[0x598] = v40;
  if (SLOBYTE(STACK[0x5B7]) < 0)
    operator delete((void *)STACK[0x5A0]);
  STACK[0x5C8] = v40;
  if (SLOBYTE(STACK[0x5E7]) < 0)
    operator delete((void *)STACK[0x5D0]);
  STACK[0x5F8] = v40;
  if (SLOBYTE(STACK[0x617]) < 0)
    operator delete((void *)STACK[0x600]);
  if (SLOBYTE(STACK[0x647]) < 0)
    operator delete((void *)STACK[0x630]);
  if (SLOBYTE(STACK[0x677]) < 0)
    operator delete((void *)STACK[0x660]);
  if (SLOBYTE(STACK[0x6A7]) < 0)
    operator delete((void *)STACK[0x690]);
  if (SLOBYTE(STACK[0x6D7]) < 0)
    operator delete((void *)STACK[0x6C0]);
  if (SLOBYTE(STACK[0x707]) < 0)
    operator delete((void *)STACK[0x6F0]);
  if (SLOBYTE(STACK[0x737]) < 0)
    operator delete((void *)STACK[0x720]);
  if (SLOBYTE(STACK[0x767]) < 0)
    operator delete((void *)STACK[0x750]);
  if (SLOBYTE(STACK[0x797]) < 0)
    operator delete((void *)STACK[0x780]);
  if (SLOBYTE(STACK[0x7C7]) < 0)
    operator delete((void *)STACK[0x7B0]);
  if (SLOBYTE(STACK[0x7F7]) < 0)
    operator delete((void *)STACK[0x7E0]);
  if (SLOBYTE(STACK[0x827]) < 0)
    operator delete((void *)STACK[0x810]);
  if (SLOBYTE(STACK[0x857]) < 0)
    operator delete((void *)STACK[0x840]);
  if (SLOBYTE(STACK[0x887]) < 0)
    operator delete((void *)STACK[0x870]);
  if (SLOBYTE(STACK[0x8B7]) < 0)
    operator delete((void *)STACK[0x8A0]);
  if (SLOBYTE(STACK[0x8E7]) < 0)
    operator delete((void *)STACK[0x8D0]);
  if (SLOBYTE(STACK[0x917]) < 0)
    operator delete((void *)STACK[0x900]);
  if (SLOBYTE(STACK[0x947]) < 0)
    operator delete((void *)STACK[0x930]);
  if (SLOBYTE(STACK[0x977]) < 0)
    operator delete((void *)STACK[0x960]);
  if (SLOBYTE(STACK[0x9A7]) < 0)
    operator delete((void *)STACK[0x990]);
  if (SLOBYTE(STACK[0x9D7]) < 0)
    operator delete((void *)STACK[0x9C0]);
  if (SLOBYTE(STACK[0xA07]) < 0)
    operator delete((void *)STACK[0x9F0]);
  if (SLOBYTE(STACK[0xA37]) < 0)
    operator delete((void *)STACK[0xA20]);
  if (SLOBYTE(STACK[0xA67]) < 0)
    operator delete((void *)STACK[0xA50]);
  if (SLOBYTE(STACK[0xA97]) < 0)
    operator delete((void *)STACK[0xA80]);
  if (*(char *)(STACK[0x380] + 79) < 0)
    operator delete(*a39);
  mediaplatform::DatabaseTableBase::~DatabaseTableBase((void **)STACK[0x380]);
  _Unwind_Resume(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<4ul,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>>::DatabaseColumnTuple(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6;
  void *v7;
  std::string *v8;
  __int128 v9;
  uint64_t v10;
  std::string v12;
  uint64_t v13;
  int v14;

  if (*(char *)(a3 + 31) < 0)
    std::string::__init_copy_ctor_external(&v12, *(const std::string::value_type **)(a3 + 8), *(_QWORD *)(a3 + 16));
  else
    v12 = *(std::string *)(a3 + 8);
  v6 = *(_DWORD *)(a3 + 32);
  v13 = *(_QWORD *)(a3 + 36);
  v14 = *(_DWORD *)(a3 + 44);
  *(_QWORD *)a1 = off_24C335D90;
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0)
  {
    v7 = (void *)v12.__r_.__value_.__r.__words[0];
    std::string::__init_copy_ctor_external((std::string *)(a1 + 8), v12.__r_.__value_.__l.__data_, v12.__r_.__value_.__l.__size_);
    *(_DWORD *)(a1 + 32) = v6;
    *(_QWORD *)a1 = off_24C335B18;
    *(_QWORD *)(a1 + 36) = v13;
    *(_DWORD *)(a1 + 44) = v14;
    operator delete(v7);
  }
  else
  {
    *(std::string *)(a1 + 8) = v12;
    *(_DWORD *)(a1 + 32) = v6;
    *(_QWORD *)a1 = off_24C335B18;
    *(_QWORD *)(a1 + 36) = v13;
    *(_DWORD *)(a1 + 44) = v14;
  }
  *(_QWORD *)(a1 + 48) = off_24C335D90;
  v8 = (std::string *)(a1 + 56);
  if (*(char *)(a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v8, *(const std::string::value_type **)(a2 + 8), *(_QWORD *)(a2 + 16));
  }
  else
  {
    v9 = *(_OWORD *)(a2 + 8);
    *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 24);
    *(_OWORD *)&v8->__r_.__value_.__l.__data_ = v9;
  }
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 48) = off_24C335B18;
  v10 = *(_QWORD *)(a2 + 36);
  *(_DWORD *)(a1 + 92) = *(_DWORD *)(a2 + 44);
  *(_QWORD *)(a1 + 84) = v10;
  return a1;
}

void sub_20A6B3978(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  uint64_t v3;

  *(_QWORD *)v1 = v3;
  if (*(char *)(v1 + 31) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

uint64_t mediaplatform::DatabaseColumnTuple<4ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::DatabaseColumnTuple(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6;
  uint64_t v7;
  void *v8;
  std::string *v9;
  __int128 v10;
  std::string v12;

  if (*(char *)(a3 + 31) < 0)
    std::string::__init_copy_ctor_external(&v12, *(const std::string::value_type **)(a3 + 8), *(_QWORD *)(a3 + 16));
  else
    v12 = *(std::string *)(a3 + 8);
  v6 = *(_DWORD *)(a3 + 32);
  v7 = *(_QWORD *)(a3 + 36);
  *(_QWORD *)a1 = off_24C335D90;
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0)
  {
    v8 = (void *)v12.__r_.__value_.__r.__words[0];
    std::string::__init_copy_ctor_external((std::string *)(a1 + 8), v12.__r_.__value_.__l.__data_, v12.__r_.__value_.__l.__size_);
    *(_DWORD *)(a1 + 32) = v6;
    *(_QWORD *)a1 = off_24C335AF8;
    *(_QWORD *)(a1 + 36) = v7;
    operator delete(v8);
  }
  else
  {
    *(std::string *)(a1 + 8) = v12;
    *(_DWORD *)(a1 + 32) = v6;
    *(_QWORD *)a1 = off_24C335AF8;
    *(_QWORD *)(a1 + 36) = v7;
  }
  *(_QWORD *)(a1 + 48) = off_24C335D90;
  v9 = (std::string *)(a1 + 56);
  if (*(char *)(a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)(a2 + 8), *(_QWORD *)(a2 + 16));
  }
  else
  {
    v10 = *(_OWORD *)(a2 + 8);
    *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 24);
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v10;
  }
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 48) = off_24C335AF8;
  *(_QWORD *)(a1 + 84) = *(_QWORD *)(a2 + 36);
  return a1;
}

void sub_20A6B3AD0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  uint64_t v3;

  *(_QWORD *)v1 = v3;
  if (*(char *)(v1 + 31) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

uint64_t mediaplatform::DatabaseTable<long long,std::string,std::string,mediaplatform::Data,int,long long,int,int,int,int,long long>::DatabaseTable(uint64_t a1, __int128 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  std::string *v19;
  __int128 v20;
  int v21;
  int v22;
  const void *v23;
  size_t v24;
  void *v25;
  int v26;
  int v27;
  const void *v28;
  size_t v29;
  void *v30;
  const void *v31;
  size_t v32;
  void *v33;
  const void *v34;
  size_t v35;
  void *v36;
  int v37;
  int v38;
  int v39;
  int v40;
  int v41;
  int v42;
  int v43;
  int v44;
  int v45;
  int v46;
  int v47;
  uint64_t v48;
  std::string *v49;
  std::string::size_type v50;
  void *v51;
  std::string *v52;
  int v53;
  std::string *v54;
  int v55;
  std::string *v56;
  int v57;
  std::string *v58;
  int v59;
  std::string *v60;
  int v61;
  std::string *v62;
  int v63;
  std::string *v64;
  std::string *v65;
  std::string *v66;
  int v67;
  int v69;
  int v70;
  int v71;
  int v72;
  int v73;
  int v74;
  int v75;
  int v76;
  int v77;
  int v78;
  int v79;
  int v80;
  int v81;
  int v82;
  int v83;
  int v84;
  int v85;
  int v86;
  int v87;
  int v88;
  int v89;
  int v90;
  int v91;
  int v92;
  int v93;
  uint64_t v95;
  int v96;
  int v97;
  uint64_t v98;
  int v99;
  uint64_t v100;
  int v101;
  int v102;
  uint64_t v103;
  int v104;
  uint64_t v105;
  int v106;
  std::string __p;
  int v108;
  uint64_t v109;
  int v110;
  uint64_t (**v111)();
  std::string v112;
  int v113;
  uint64_t v114;
  uint64_t (**v115)();
  std::string v116;
  int v117;
  uint64_t v118;
  uint64_t (**v119)();
  std::string v120;
  int v121;
  uint64_t v122;
  uint64_t (**v123)();
  std::string v124;
  int v125;
  uint64_t v126;
  uint64_t (**v127)();
  std::string v128;
  int v129;
  uint64_t v130;
  int v131;
  uint64_t (**v132)();
  std::string v133;
  int v134;
  uint64_t v135;
  uint64_t (**v136)();
  std::string v137;
  int v138;
  char v139;
  void (**v140)(mediaplatform::Data *__hidden);
  size_t v141;
  size_t v142;
  const void *v143;
  char v144;
  uint64_t (**v145)();
  std::string v146;
  int v147;
  char v148;
  std::string v149;
  uint64_t (**v150)();
  std::string __s;
  int v152;
  char v153;
  std::string v154;
  uint64_t (**v155)();
  std::string v156;
  int v157;
  uint64_t v158;
  int v159;
  uint64_t (**v160)();
  std::string v161;
  int v162;
  uint64_t v163;
  int v164;
  uint64_t (**v165)();
  std::string v166;
  int v167;
  uint64_t v168;
  uint64_t (**v169)();
  std::string v170;
  int v171;
  uint64_t v172;
  uint64_t (**v173)();
  std::string v174;
  int v175;
  uint64_t v176;
  uint64_t (**v177)();
  std::string v178;
  int v179;
  uint64_t v180;
  uint64_t (**v181)();
  std::string v182;
  int v183;
  uint64_t v184;
  int v185;
  uint64_t (**v186)();
  std::string v187;
  int v188;
  uint64_t v189;
  uint64_t (**v190)();
  std::string v191;
  int v192;
  char v193;
  void (**v194)(mediaplatform::Data *__hidden);
  size_t v195;
  size_t v196;
  const void *v197;
  char v198;
  uint64_t (**v199)();
  std::string v200;
  int v201;
  char v202;
  std::string v203;
  uint64_t (**v204)();
  std::string v205;
  int v206;
  char v207;
  std::string v208;
  uint64_t (**v209)();
  std::string v210;
  int v211;
  uint64_t v212;
  int v213;
  uint64_t (**v214)();
  std::string v215;
  int v216;
  uint64_t v217;
  uint64_t (**v218)();
  std::string v219;
  int v220;
  uint64_t v221;
  uint64_t (**v222)();
  std::string v223;
  int v224;
  uint64_t v225;
  uint64_t (**v226)();
  std::string v227;
  int v228;
  uint64_t v229;
  uint64_t (**v230)();
  std::string v231;
  int v232;
  uint64_t v233;
  int v234;
  uint64_t (**v235)();
  std::string v236;
  int v237;
  uint64_t v238;
  uint64_t (**v239)();
  std::string v240;
  int v241;
  char v242;
  void (**v243)(mediaplatform::Data *__hidden);
  size_t v244;
  size_t v245;
  const void *v246;
  char v247;
  uint64_t (**v248)();
  std::string v249;
  int v250;
  char v251;
  std::string v252;
  uint64_t (**v253)();
  std::string v254;
  int v255;
  uint64_t v256;
  int v257;
  uint64_t (**v258)();
  std::string v259;
  int v260;
  uint64_t v261;
  uint64_t (**v262)();
  std::string v263;
  int v264;
  uint64_t v265;
  uint64_t (**v266)();
  std::string v267;
  int v268;
  uint64_t v269;
  uint64_t (**v270)();
  std::string v271;
  int v272;
  uint64_t v273;
  uint64_t (**v274)();
  std::string v275;
  int v276;
  uint64_t v277;
  int v278;
  uint64_t (**v279)();
  std::string v280;
  int v281;
  uint64_t v282;
  uint64_t (**v283)();
  std::string v284;
  int v285;
  char v286;
  _QWORD v287[4];
  char v288;
  uint64_t (**v289)();
  std::string v290;
  int v291;
  uint64_t v292;
  int v293;
  uint64_t (**v294)();
  std::string v295;
  int v296;
  uint64_t v297;
  uint64_t (**v298)();
  std::string v299;
  int v300;
  uint64_t v301;
  uint64_t (**v302)();
  std::string v303;
  int v304;
  uint64_t v305;
  uint64_t (**v306)();
  std::string v307;
  int v308;
  uint64_t v309;
  uint64_t (**v310)();
  std::string v311;
  int v312;
  uint64_t v313;
  int v314;
  uint64_t (**v315)();
  std::string v316;
  int v317;
  uint64_t v318;
  uint64_t (**v319)();
  std::string v320;
  int v321;
  uint64_t v322;
  int v323;
  uint64_t (**v324)();
  std::string v325;
  int v326;
  uint64_t v327;
  uint64_t (**v328)();
  std::string v329;
  int v330;
  uint64_t v331;
  uint64_t (**v332)();
  std::string v333;
  int v334;
  uint64_t v335;
  uint64_t (**v336)();
  std::string v337;
  int v338;
  uint64_t v339;
  uint64_t (**v340)();
  std::string v341;
  int v342;
  uint64_t v343;
  int v344;
  uint64_t (**v345)();
  std::string v346;
  int v347;
  uint64_t v348;
  int v349;
  uint64_t (**v350)();
  std::string v351;
  int v352;
  uint64_t v353;
  uint64_t (**v354)();
  std::string v355;
  int v356;
  uint64_t v357;
  uint64_t (**v358)();
  std::string v359;
  int v360;
  uint64_t v361;
  uint64_t (**v362)();
  std::string v363;
  int v364;
  uint64_t v365;
  uint64_t (**v366)();
  std::string v367;
  int v368;
  uint64_t v369;
  int v370;
  uint64_t (**v371)();
  std::string v372;
  int v373;
  uint64_t v374;
  uint64_t (**v375)();
  std::string v376;
  int v377;
  uint64_t v378;
  uint64_t (**v379)();
  std::string v380;
  int v381;
  uint64_t v382;
  void (**v383)(mediaplatform::DatabaseColumnBase *__hidden);
  std::string v384;
  int v385;
  uint64_t v386;
  int v387;
  void (**v388)(mediaplatform::DatabaseColumnBase *__hidden);
  std::string v389;
  int v390;
  uint64_t v391;
  void (**v392)(mediaplatform::DatabaseColumnBase *__hidden);
  std::string v393;
  int v394;
  uint64_t v395;
  void (**v396)(mediaplatform::DatabaseColumnBase *__hidden);
  std::string v397;
  int v398;
  uint64_t v399;
  int v400;
  void (**v401)(mediaplatform::DatabaseColumnBase *__hidden);
  std::string v402;
  int v403;
  uint64_t v404;
  void (**v405)(mediaplatform::DatabaseColumnBase *__hidden);
  std::string v406;
  int v407;
  uint64_t v408;
  int v409;

  *(_QWORD *)a1 = &off_24C330F50;
  v19 = (std::string *)(a1 + 8);
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v19, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v20 = *a2;
    v19->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&v19->__r_.__value_.__l.__data_ = v20;
  }
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)a1 = off_24C335590;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  if (*(char *)(a3 + 31) < 0)
    std::string::__init_copy_ctor_external(&v156, *(const std::string::value_type **)(a3 + 8), *(_QWORD *)(a3 + 16));
  else
    v156 = *(std::string *)(a3 + 8);
  v21 = *(_DWORD *)(a3 + 32);
  v155 = off_24C335B18;
  v158 = *(_QWORD *)(a3 + 36);
  v22 = *(_DWORD *)(a3 + 44);
  v157 = v21;
  v159 = v22;
  v150 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a4 + 31) < 0)
    std::string::__init_copy_ctor_external(&__s, *(const std::string::value_type **)(a4 + 8), *(_QWORD *)(a4 + 16));
  else
    __s = *(std::string *)(a4 + 8);
  v152 = *(_DWORD *)(a4 + 32);
  v150 = &off_24C335AB8;
  v153 = *(_BYTE *)(a4 + 36);
  if (*(char *)(a4 + 63) < 0)
    std::string::__init_copy_ctor_external(&v154, *(const std::string::value_type **)(a4 + 40), *(_QWORD *)(a4 + 48));
  else
    v154 = *(std::string *)(a4 + 40);
  v145 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a5 + 31) < 0)
    std::string::__init_copy_ctor_external(&v146, *(const std::string::value_type **)(a5 + 8), *(_QWORD *)(a5 + 16));
  else
    v146 = *(std::string *)(a5 + 8);
  v147 = *(_DWORD *)(a5 + 32);
  v145 = &off_24C335AB8;
  v148 = *(_BYTE *)(a5 + 36);
  if (*(char *)(a5 + 63) < 0)
    std::string::__init_copy_ctor_external(&v149, *(const std::string::value_type **)(a5 + 40), *(_QWORD *)(a5 + 48));
  else
    v149 = *(std::string *)(a5 + 40);
  v136 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a6 + 31) < 0)
    std::string::__init_copy_ctor_external(&v137, *(const std::string::value_type **)(a6 + 8), *(_QWORD *)(a6 + 16));
  else
    v137 = *(std::string *)(a6 + 8);
  v138 = *(_DWORD *)(a6 + 32);
  v136 = &off_24C335A98;
  v139 = *(_BYTE *)(a6 + 36);
  v23 = *(const void **)(a6 + 64);
  v24 = *(_QWORD *)(a6 + 48);
  v140 = &off_24C331510;
  v141 = v24;
  v142 = v24;
  if (v24)
    v25 = (void *)operator new[]();
  else
    v25 = 0;
  v143 = v25;
  v144 = 1;
  if (v23)
    memcpy(v25, v23, v24);
  else
    bzero(v25, v24);
  if (*(char *)(a7 + 31) < 0)
    std::string::__init_copy_ctor_external(&v133, *(const std::string::value_type **)(a7 + 8), *(_QWORD *)(a7 + 16));
  else
    v133 = *(std::string *)(a7 + 8);
  v96 = *(_DWORD *)(a7 + 32);
  v134 = v96;
  v132 = off_24C335AF8;
  v95 = *(_QWORD *)(a7 + 36);
  v135 = v95;
  if (*(char *)(a8 + 31) < 0)
    std::string::__init_copy_ctor_external(&v128, *(const std::string::value_type **)(a8 + 8), *(_QWORD *)(a8 + 16));
  else
    v128 = *(std::string *)(a8 + 8);
  v26 = *(_DWORD *)(a8 + 32);
  v127 = off_24C335B18;
  v130 = *(_QWORD *)(a8 + 36);
  v27 = *(_DWORD *)(a8 + 44);
  v97 = v26;
  v129 = v26;
  v131 = v27;
  if (*(char *)(a9 + 31) < 0)
    std::string::__init_copy_ctor_external(&v124, *(const std::string::value_type **)(a9 + 8), *(_QWORD *)(a9 + 16));
  else
    v124 = *(std::string *)(a9 + 8);
  v99 = *(_DWORD *)(a9 + 32);
  v125 = v99;
  v123 = off_24C335AF8;
  v98 = *(_QWORD *)(a9 + 36);
  v126 = v98;
  if (*(char *)(a10 + 31) < 0)
    std::string::__init_copy_ctor_external(&v120, *(const std::string::value_type **)(a10 + 8), *(_QWORD *)(a10 + 16));
  else
    v120 = *(std::string *)(a10 + 8);
  v101 = *(_DWORD *)(a10 + 32);
  v121 = v101;
  v119 = off_24C335AF8;
  v100 = *(_QWORD *)(a10 + 36);
  v122 = v100;
  if (*(char *)(a11 + 31) < 0)
    std::string::__init_copy_ctor_external(&v116, *(const std::string::value_type **)(a11 + 8), *(_QWORD *)(a11 + 16));
  else
    v116 = *(std::string *)(a11 + 8);
  v104 = *(_DWORD *)(a11 + 32);
  v117 = v104;
  v115 = off_24C335AF8;
  v103 = *(_QWORD *)(a11 + 36);
  v118 = v103;
  if (*(char *)(a12 + 31) < 0)
    std::string::__init_copy_ctor_external(&v112, *(const std::string::value_type **)(a12 + 8), *(_QWORD *)(a12 + 16));
  else
    v112 = *(std::string *)(a12 + 8);
  v106 = *(_DWORD *)(a12 + 32);
  v113 = v106;
  v111 = off_24C335AF8;
  v105 = *(_QWORD *)(a12 + 36);
  v114 = v105;
  if (*(char *)(a13 + 31) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(a13 + 8), *(_QWORD *)(a13 + 16));
  else
    __p = *(std::string *)(a13 + 8);
  v102 = *(_DWORD *)(a13 + 32);
  v108 = v102;
  v109 = *(_QWORD *)(a13 + 36);
  v110 = *(_DWORD *)(a13 + 44);
  v204 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v205, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
  else
    v205 = __s;
  v206 = v152;
  v204 = &off_24C335AB8;
  v207 = v153;
  if (SHIBYTE(v154.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v208, v154.__r_.__value_.__l.__data_, v154.__r_.__value_.__l.__size_);
  else
    v208 = v154;
  v199 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v146.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v200, v146.__r_.__value_.__l.__data_, v146.__r_.__value_.__l.__size_);
  else
    v200 = v146;
  v201 = v147;
  v199 = &off_24C335AB8;
  v202 = v148;
  if (SHIBYTE(v149.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v203, v149.__r_.__value_.__l.__data_, v149.__r_.__value_.__l.__size_);
  else
    v203 = v149;
  v190 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v137.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v191, v137.__r_.__value_.__l.__data_, v137.__r_.__value_.__l.__size_);
  else
    v191 = v137;
  v192 = v138;
  v190 = &off_24C335A98;
  v193 = v139;
  v28 = v143;
  v29 = v141;
  v194 = &off_24C331510;
  v195 = v141;
  v196 = v141;
  if (v141)
    v30 = (void *)operator new[]();
  else
    v30 = 0;
  v197 = v30;
  v198 = 1;
  if (v28)
    memcpy(v30, v28, v29);
  else
    bzero(v30, v29);
  if (SHIBYTE(v133.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v187, v133.__r_.__value_.__l.__data_, v133.__r_.__value_.__l.__size_);
  else
    v187 = v133;
  v188 = v96;
  v186 = off_24C335AF8;
  v189 = v95;
  if (SHIBYTE(v128.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v182, v128.__r_.__value_.__l.__data_, v128.__r_.__value_.__l.__size_);
  else
    v182 = v128;
  v181 = off_24C335B18;
  v184 = v130;
  v183 = v97;
  v185 = v131;
  if (SHIBYTE(v124.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v178, v124.__r_.__value_.__l.__data_, v124.__r_.__value_.__l.__size_);
  else
    v178 = v124;
  v179 = v99;
  v177 = off_24C335AF8;
  v180 = v98;
  if (SHIBYTE(v120.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v174, v120.__r_.__value_.__l.__data_, v120.__r_.__value_.__l.__size_);
  else
    v174 = v120;
  v175 = v101;
  v173 = off_24C335AF8;
  v176 = v100;
  if (SHIBYTE(v116.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v170, v116.__r_.__value_.__l.__data_, v116.__r_.__value_.__l.__size_);
  else
    v170 = v116;
  v171 = v104;
  v169 = off_24C335AF8;
  v172 = v103;
  if (SHIBYTE(v112.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v166, v112.__r_.__value_.__l.__data_, v112.__r_.__value_.__l.__size_);
  else
    v166 = v112;
  v167 = v106;
  v165 = off_24C335AF8;
  v168 = v105;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v161, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  else
    v161 = __p;
  v160 = off_24C335B18;
  v163 = v109;
  v162 = v102;
  v164 = v110;
  v248 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v200.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v249, v200.__r_.__value_.__l.__data_, v200.__r_.__value_.__l.__size_);
  else
    v249 = v200;
  v250 = v201;
  v248 = &off_24C335AB8;
  v251 = v202;
  if (SHIBYTE(v203.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v252, v203.__r_.__value_.__l.__data_, v203.__r_.__value_.__l.__size_);
  else
    v252 = v203;
  v239 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v191.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v240, v191.__r_.__value_.__l.__data_, v191.__r_.__value_.__l.__size_);
  else
    v240 = v191;
  v241 = v192;
  v239 = &off_24C335A98;
  v242 = v193;
  v31 = v197;
  v32 = v195;
  v243 = &off_24C331510;
  v244 = v195;
  v245 = v195;
  if (v195)
    v33 = (void *)operator new[]();
  else
    v33 = 0;
  v246 = v33;
  v247 = 1;
  if (v31)
    memcpy(v33, v31, v32);
  else
    bzero(v33, v32);
  if (SHIBYTE(v187.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v236, v187.__r_.__value_.__l.__data_, v187.__r_.__value_.__l.__size_);
  else
    v236 = v187;
  v237 = v96;
  v235 = off_24C335AF8;
  v238 = v95;
  if (SHIBYTE(v182.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v231, v182.__r_.__value_.__l.__data_, v182.__r_.__value_.__l.__size_);
  else
    v231 = v182;
  v230 = off_24C335B18;
  v233 = v184;
  v232 = v97;
  v234 = v185;
  if (SHIBYTE(v178.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v227, v178.__r_.__value_.__l.__data_, v178.__r_.__value_.__l.__size_);
  else
    v227 = v178;
  v228 = v99;
  v226 = off_24C335AF8;
  v229 = v98;
  if (SHIBYTE(v174.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v223, v174.__r_.__value_.__l.__data_, v174.__r_.__value_.__l.__size_);
  else
    v223 = v174;
  v224 = v101;
  v222 = off_24C335AF8;
  v225 = v100;
  if (SHIBYTE(v170.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v219, v170.__r_.__value_.__l.__data_, v170.__r_.__value_.__l.__size_);
  else
    v219 = v170;
  v220 = v104;
  v218 = off_24C335AF8;
  v221 = v103;
  if (SHIBYTE(v166.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v215, v166.__r_.__value_.__l.__data_, v166.__r_.__value_.__l.__size_);
  else
    v215 = v166;
  v216 = v106;
  v214 = off_24C335AF8;
  v217 = v105;
  if (SHIBYTE(v161.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v210, v161.__r_.__value_.__l.__data_, v161.__r_.__value_.__l.__size_);
  else
    v210 = v161;
  v209 = off_24C335B18;
  v212 = v163;
  v211 = v102;
  v213 = v164;
  v283 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v240.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v284, v240.__r_.__value_.__l.__data_, v240.__r_.__value_.__l.__size_);
  else
    v284 = v240;
  v285 = v241;
  v283 = &off_24C335A98;
  v286 = v242;
  v34 = v246;
  v35 = v244;
  v287[0] = &off_24C331510;
  v287[1] = v244;
  v287[2] = v244;
  if (v244)
    v36 = (void *)operator new[]();
  else
    v36 = 0;
  v287[3] = v36;
  v288 = 1;
  if (v34)
    memcpy(v36, v34, v35);
  else
    bzero(v36, v35);
  if (SHIBYTE(v236.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v280, v236.__r_.__value_.__l.__data_, v236.__r_.__value_.__l.__size_);
  else
    v280 = v236;
  v281 = v96;
  v279 = off_24C335AF8;
  v282 = v95;
  if (SHIBYTE(v231.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v275, v231.__r_.__value_.__l.__data_, v231.__r_.__value_.__l.__size_);
  else
    v275 = v231;
  v274 = off_24C335B18;
  v277 = v233;
  v276 = v97;
  v278 = v234;
  v270 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v227.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v271, v227.__r_.__value_.__l.__data_, v227.__r_.__value_.__l.__size_);
  else
    v271 = v227;
  v272 = v99;
  v270 = off_24C335AF8;
  v273 = v98;
  v266 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v223.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v267, v223.__r_.__value_.__l.__data_, v223.__r_.__value_.__l.__size_);
  else
    v267 = v223;
  v268 = v101;
  v266 = off_24C335AF8;
  v269 = v100;
  v262 = (uint64_t (**)())off_24C335D90;
  v93 = SHIBYTE(v219.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v219.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v263, v219.__r_.__value_.__l.__data_, v219.__r_.__value_.__l.__size_);
  else
    v263 = v219;
  v264 = v104;
  v262 = off_24C335AF8;
  v265 = v103;
  v258 = (uint64_t (**)())off_24C335D90;
  v92 = SHIBYTE(v215.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v215.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v259, v215.__r_.__value_.__l.__data_, v215.__r_.__value_.__l.__size_);
  else
    v259 = v215;
  v260 = v106;
  v258 = off_24C335AF8;
  v261 = v105;
  v253 = (uint64_t (**)())off_24C335D90;
  v37 = SHIBYTE(v210.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v210.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v254, v210.__r_.__value_.__l.__data_, v210.__r_.__value_.__l.__size_);
  else
    v254 = v210;
  v253 = off_24C335B18;
  v256 = v212;
  v255 = v102;
  v257 = v213;
  v315 = (uint64_t (**)())off_24C335D90;
  v91 = SHIBYTE(v280.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v280.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v316, v280.__r_.__value_.__l.__data_, v280.__r_.__value_.__l.__size_);
  else
    v316 = v280;
  v317 = v96;
  v315 = off_24C335AF8;
  v318 = v95;
  v310 = (uint64_t (**)())off_24C335D90;
  v90 = SHIBYTE(v275.__r_.__value_.__r.__words[2]);
  v88 = v37;
  if (SHIBYTE(v275.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v311, v275.__r_.__value_.__l.__data_, v275.__r_.__value_.__l.__size_);
  else
    v311 = v275;
  v310 = off_24C335B18;
  v313 = v233;
  v312 = v97;
  v314 = v234;
  v306 = (uint64_t (**)())off_24C335D90;
  v89 = SHIBYTE(v271.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v271.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v307, v271.__r_.__value_.__l.__data_, v271.__r_.__value_.__l.__size_);
  else
    v307 = v271;
  v308 = v99;
  v306 = off_24C335AF8;
  v309 = v98;
  v302 = (uint64_t (**)())off_24C335D90;
  v87 = SHIBYTE(v267.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v267.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v303, v267.__r_.__value_.__l.__data_, v267.__r_.__value_.__l.__size_);
  else
    v303 = v267;
  v304 = v101;
  v302 = off_24C335AF8;
  v305 = v100;
  v298 = (uint64_t (**)())off_24C335D90;
  v85 = SHIBYTE(v263.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v263.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v299, v263.__r_.__value_.__l.__data_, v263.__r_.__value_.__l.__size_);
  else
    v299 = v263;
  v300 = v104;
  v298 = off_24C335AF8;
  v301 = v103;
  v294 = (uint64_t (**)())off_24C335D90;
  v83 = SHIBYTE(v259.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v259.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v295, v259.__r_.__value_.__l.__data_, v259.__r_.__value_.__l.__size_);
  else
    v295 = v259;
  v296 = v106;
  v294 = off_24C335AF8;
  v297 = v105;
  v289 = (uint64_t (**)())off_24C335D90;
  v38 = SHIBYTE(v254.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v254.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v290, v254.__r_.__value_.__l.__data_, v254.__r_.__value_.__l.__size_);
  else
    v290 = v254;
  v289 = off_24C335B18;
  v292 = v212;
  v291 = v102;
  v293 = v213;
  v340 = (uint64_t (**)())off_24C335D90;
  v86 = SHIBYTE(v311.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v311.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v341, v311.__r_.__value_.__l.__data_, v311.__r_.__value_.__l.__size_);
  else
    v341 = v311;
  v340 = off_24C335B18;
  v343 = v233;
  v342 = v97;
  v344 = v234;
  v336 = (uint64_t (**)())off_24C335D90;
  v84 = SHIBYTE(v307.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v307.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v337, v307.__r_.__value_.__l.__data_, v307.__r_.__value_.__l.__size_);
  else
    v337 = v307;
  v338 = v99;
  v336 = off_24C335AF8;
  v339 = v98;
  v332 = (uint64_t (**)())off_24C335D90;
  v82 = SHIBYTE(v303.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v303.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v333, v303.__r_.__value_.__l.__data_, v303.__r_.__value_.__l.__size_);
  else
    v333 = v303;
  v334 = v101;
  v332 = off_24C335AF8;
  v335 = v100;
  v328 = (uint64_t (**)())off_24C335D90;
  v39 = SHIBYTE(v299.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v299.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v329, v299.__r_.__value_.__l.__data_, v299.__r_.__value_.__l.__size_);
  else
    v329 = v299;
  v330 = v104;
  v328 = off_24C335AF8;
  v331 = v103;
  v324 = (uint64_t (**)())off_24C335D90;
  v80 = SHIBYTE(v295.__r_.__value_.__r.__words[2]);
  v81 = v39;
  if (SHIBYTE(v295.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v325, v295.__r_.__value_.__l.__data_, v295.__r_.__value_.__l.__size_);
  else
    v325 = v295;
  v326 = v106;
  v324 = off_24C335AF8;
  v327 = v105;
  v319 = (uint64_t (**)())off_24C335D90;
  v79 = SHIBYTE(v290.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v290.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v320, v290.__r_.__value_.__l.__data_, v290.__r_.__value_.__l.__size_);
  else
    v320 = v290;
  v319 = off_24C335B18;
  v322 = v212;
  v321 = v102;
  v323 = v213;
  v362 = (uint64_t (**)())off_24C335D90;
  v40 = SHIBYTE(v337.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v337.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v363, v337.__r_.__value_.__l.__data_, v337.__r_.__value_.__l.__size_);
  else
    v363 = v337;
  v364 = v99;
  v362 = off_24C335AF8;
  v365 = v98;
  v358 = (uint64_t (**)())off_24C335D90;
  v78 = SHIBYTE(v333.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v333.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v359, v333.__r_.__value_.__l.__data_, v333.__r_.__value_.__l.__size_);
  else
    v359 = v333;
  v360 = v101;
  v358 = off_24C335AF8;
  v361 = v100;
  v354 = (uint64_t (**)())off_24C335D90;
  v41 = SHIBYTE(v329.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v329.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v355, v329.__r_.__value_.__l.__data_, v329.__r_.__value_.__l.__size_);
  else
    v355 = v329;
  v356 = v104;
  v354 = off_24C335AF8;
  v357 = v103;
  v350 = (uint64_t (**)())off_24C335D90;
  v76 = SHIBYTE(v325.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v325.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v351, v325.__r_.__value_.__l.__data_, v325.__r_.__value_.__l.__size_);
  else
    v351 = v325;
  v352 = v106;
  v350 = off_24C335AF8;
  v353 = v105;
  v345 = (uint64_t (**)())off_24C335D90;
  v75 = SHIBYTE(v320.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v320.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v346, v320.__r_.__value_.__l.__data_, v320.__r_.__value_.__l.__size_);
  else
    v346 = v320;
  v345 = off_24C335B18;
  v348 = v212;
  v347 = v102;
  v349 = v213;
  v379 = (uint64_t (**)())off_24C335D90;
  v73 = v41;
  v74 = SHIBYTE(v359.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v359.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v380, v359.__r_.__value_.__l.__data_, v359.__r_.__value_.__l.__size_);
  else
    v380 = v359;
  v381 = v101;
  v379 = off_24C335AF8;
  v382 = v100;
  v375 = (uint64_t (**)())off_24C335D90;
  v42 = SHIBYTE(v355.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v355.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v376, v355.__r_.__value_.__l.__data_, v355.__r_.__value_.__l.__size_);
  else
    v376 = v355;
  v377 = v104;
  v375 = off_24C335AF8;
  v378 = v103;
  v371 = (uint64_t (**)())off_24C335D90;
  v72 = SHIBYTE(v351.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v351.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v372, v351.__r_.__value_.__l.__data_, v351.__r_.__value_.__l.__size_);
  else
    v372 = v351;
  v373 = v106;
  v371 = off_24C335AF8;
  v374 = v105;
  v366 = (uint64_t (**)())off_24C335D90;
  v43 = SHIBYTE(v346.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v346.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v367, v346.__r_.__value_.__l.__data_, v346.__r_.__value_.__l.__size_);
  else
    v367 = v346;
  v366 = off_24C335B18;
  v369 = v212;
  v368 = v102;
  v370 = v213;
  v392 = off_24C335D90;
  v44 = SHIBYTE(v376.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v376.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v393, v376.__r_.__value_.__l.__data_, v376.__r_.__value_.__l.__size_);
  else
    v393 = v376;
  v394 = v104;
  v395 = v103;
  v388 = off_24C335D90;
  v71 = SHIBYTE(v372.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v372.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v389, v372.__r_.__value_.__l.__data_, v372.__r_.__value_.__l.__size_);
  else
    v389 = v372;
  v390 = v106;
  v391 = v105;
  v383 = off_24C335D90;
  v45 = SHIBYTE(v367.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v367.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v384, v367.__r_.__value_.__l.__data_, v367.__r_.__value_.__l.__size_);
  else
    v384 = v367;
  v386 = v212;
  v385 = v102;
  v387 = v213;
  v401 = off_24C335D90;
  v77 = SHIBYTE(v389.__r_.__value_.__r.__words[2]);
  v69 = v43;
  v70 = v44;
  if (SHIBYTE(v389.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v402, v389.__r_.__value_.__l.__data_, v389.__r_.__value_.__l.__size_);
  else
    v402 = v389;
  v403 = v106;
  v404 = v105;
  v396 = off_24C335D90;
  v46 = SHIBYTE(v384.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v384.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v397, v384.__r_.__value_.__l.__data_, v384.__r_.__value_.__l.__size_);
  else
    v397 = v384;
  v399 = v212;
  v398 = v102;
  v400 = v213;
  v405 = off_24C335D90;
  v47 = SHIBYTE(v397.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v397.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v406, v397.__r_.__value_.__l.__data_, v397.__r_.__value_.__l.__size_);
  else
    v406 = v397;
  v408 = v212;
  v407 = v102;
  v409 = v213;
  v48 = a1;
  *(_QWORD *)(a1 + 80) = off_24C335D90;
  v49 = (std::string *)(a1 + 88);
  if (SHIBYTE(v406.__r_.__value_.__r.__words[2]) < 0)
  {
    v50 = v406.__r_.__value_.__r.__words[0];
    std::string::__init_copy_ctor_external(v49, v406.__r_.__value_.__l.__data_, v406.__r_.__value_.__l.__size_);
    *(_DWORD *)(a1 + 112) = v102;
    *(_QWORD *)(a1 + 80) = off_24C335B18;
    *(_QWORD *)(a1 + 116) = v212;
    *(_DWORD *)(a1 + 124) = v213;
    v405 = off_24C335D90;
    v51 = (void *)v50;
    v48 = a1;
    operator delete(v51);
  }
  else
  {
    *(_OWORD *)&v49->__r_.__value_.__l.__data_ = *(_OWORD *)&v406.__r_.__value_.__l.__data_;
    *(_QWORD *)(a1 + 104) = *((_QWORD *)&v406.__r_.__value_.__l + 2);
    *(_DWORD *)(a1 + 112) = v102;
    *(_QWORD *)(a1 + 80) = off_24C335B18;
    *(_QWORD *)(a1 + 116) = v212;
    *(_DWORD *)(a1 + 124) = v213;
    v405 = off_24C335D90;
  }
  *(_QWORD *)(v48 + 128) = off_24C335D90;
  v52 = (std::string *)(v48 + 136);
  v53 = SHIBYTE(v402.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v402.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v52, v402.__r_.__value_.__l.__data_, v402.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v52->__r_.__value_.__l.__data_ = *(_OWORD *)&v402.__r_.__value_.__l.__data_;
    *(_QWORD *)(v48 + 152) = *((_QWORD *)&v402.__r_.__value_.__l + 2);
  }
  *(_DWORD *)(v48 + 160) = v106;
  *(_QWORD *)(v48 + 128) = off_24C335AF8;
  *(_QWORD *)(v48 + 164) = v105;
  v396 = off_24C335D90;
  if (v47 < 0)
    operator delete(v397.__r_.__value_.__l.__data_);
  v401 = off_24C335D90;
  if (v53 < 0)
    operator delete(v402.__r_.__value_.__l.__data_);
  *(_QWORD *)(v48 + 176) = off_24C335D90;
  v54 = (std::string *)(v48 + 184);
  v55 = SHIBYTE(v393.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v393.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v54, v393.__r_.__value_.__l.__data_, v393.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v54->__r_.__value_.__l.__data_ = *(_OWORD *)&v393.__r_.__value_.__l.__data_;
    *(_QWORD *)(v48 + 200) = *((_QWORD *)&v393.__r_.__value_.__l + 2);
  }
  *(_DWORD *)(v48 + 208) = v104;
  *(_QWORD *)(v48 + 176) = off_24C335AF8;
  *(_QWORD *)(v48 + 212) = v103;
  v383 = off_24C335D90;
  if (v46 < 0)
    operator delete(v384.__r_.__value_.__l.__data_);
  v388 = off_24C335D90;
  if (v77 < 0)
    operator delete(v389.__r_.__value_.__l.__data_);
  v392 = off_24C335D90;
  if (v55 < 0)
    operator delete(v393.__r_.__value_.__l.__data_);
  *(_QWORD *)(v48 + 224) = off_24C335D90;
  v56 = (std::string *)(v48 + 232);
  v57 = SHIBYTE(v380.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v380.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v56, v380.__r_.__value_.__l.__data_, v380.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v56->__r_.__value_.__l.__data_ = *(_OWORD *)&v380.__r_.__value_.__l.__data_;
    *(_QWORD *)(v48 + 248) = *((_QWORD *)&v380.__r_.__value_.__l + 2);
  }
  *(_DWORD *)(v48 + 256) = v101;
  *(_QWORD *)(v48 + 224) = off_24C335AF8;
  *(_QWORD *)(v48 + 260) = v100;
  v366 = (uint64_t (**)())off_24C335D90;
  if (v45 < 0)
    operator delete(v367.__r_.__value_.__l.__data_);
  v371 = (uint64_t (**)())off_24C335D90;
  if (v71 < 0)
    operator delete(v372.__r_.__value_.__l.__data_);
  v375 = (uint64_t (**)())off_24C335D90;
  if (v70 < 0)
    operator delete(v376.__r_.__value_.__l.__data_);
  v379 = (uint64_t (**)())off_24C335D90;
  if (v57 < 0)
    operator delete(v380.__r_.__value_.__l.__data_);
  *(_QWORD *)(v48 + 272) = off_24C335D90;
  v58 = (std::string *)(v48 + 280);
  v59 = SHIBYTE(v363.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v363.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v58, v363.__r_.__value_.__l.__data_, v363.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v58->__r_.__value_.__l.__data_ = *(_OWORD *)&v363.__r_.__value_.__l.__data_;
    *(_QWORD *)(v48 + 296) = *((_QWORD *)&v363.__r_.__value_.__l + 2);
  }
  *(_DWORD *)(v48 + 304) = v99;
  *(_QWORD *)(v48 + 272) = off_24C335AF8;
  *(_QWORD *)(v48 + 308) = v98;
  v345 = (uint64_t (**)())off_24C335D90;
  if (v69 < 0)
    operator delete(v346.__r_.__value_.__l.__data_);
  v350 = (uint64_t (**)())off_24C335D90;
  if (v72 < 0)
    operator delete(v351.__r_.__value_.__l.__data_);
  v354 = (uint64_t (**)())off_24C335D90;
  if (v42 < 0)
    operator delete(v355.__r_.__value_.__l.__data_);
  v358 = (uint64_t (**)())off_24C335D90;
  if (v74 < 0)
    operator delete(v359.__r_.__value_.__l.__data_);
  v362 = (uint64_t (**)())off_24C335D90;
  if (v59 < 0)
    operator delete(v363.__r_.__value_.__l.__data_);
  *(_QWORD *)(v48 + 320) = off_24C335D90;
  v60 = (std::string *)(v48 + 328);
  v61 = SHIBYTE(v341.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v341.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v60, v341.__r_.__value_.__l.__data_, v341.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v60->__r_.__value_.__l.__data_ = *(_OWORD *)&v341.__r_.__value_.__l.__data_;
    *(_QWORD *)(v48 + 344) = *((_QWORD *)&v341.__r_.__value_.__l + 2);
  }
  *(_DWORD *)(v48 + 352) = v97;
  *(_QWORD *)(v48 + 320) = off_24C335B18;
  *(_QWORD *)(v48 + 356) = v343;
  *(_DWORD *)(v48 + 364) = v344;
  v319 = (uint64_t (**)())off_24C335D90;
  if (v75 < 0)
    operator delete(v320.__r_.__value_.__l.__data_);
  v324 = (uint64_t (**)())off_24C335D90;
  if (v76 < 0)
    operator delete(v325.__r_.__value_.__l.__data_);
  v328 = (uint64_t (**)())off_24C335D90;
  if (v73 < 0)
    operator delete(v329.__r_.__value_.__l.__data_);
  v332 = (uint64_t (**)())off_24C335D90;
  if (v78 < 0)
    operator delete(v333.__r_.__value_.__l.__data_);
  v336 = (uint64_t (**)())off_24C335D90;
  if (v40 < 0)
    operator delete(v337.__r_.__value_.__l.__data_);
  v340 = (uint64_t (**)())off_24C335D90;
  if (v61 < 0)
    operator delete(v341.__r_.__value_.__l.__data_);
  *(_QWORD *)(v48 + 368) = off_24C335D90;
  v62 = (std::string *)(v48 + 376);
  v63 = SHIBYTE(v316.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v316.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v62, v316.__r_.__value_.__l.__data_, v316.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v62->__r_.__value_.__l.__data_ = *(_OWORD *)&v316.__r_.__value_.__l.__data_;
    *(_QWORD *)(v48 + 392) = *((_QWORD *)&v316.__r_.__value_.__l + 2);
  }
  *(_DWORD *)(v48 + 400) = v96;
  *(_QWORD *)(v48 + 368) = off_24C335AF8;
  *(_QWORD *)(v48 + 404) = v95;
  v289 = (uint64_t (**)())off_24C335D90;
  if (v79 < 0)
    operator delete(v290.__r_.__value_.__l.__data_);
  v294 = (uint64_t (**)())off_24C335D90;
  if (v80 < 0)
    operator delete(v295.__r_.__value_.__l.__data_);
  v298 = (uint64_t (**)())off_24C335D90;
  if (v81 < 0)
    operator delete(v299.__r_.__value_.__l.__data_);
  v302 = (uint64_t (**)())off_24C335D90;
  if (v82 < 0)
    operator delete(v303.__r_.__value_.__l.__data_);
  v306 = (uint64_t (**)())off_24C335D90;
  if (v84 < 0)
    operator delete(v307.__r_.__value_.__l.__data_);
  v310 = (uint64_t (**)())off_24C335D90;
  if (v86 < 0)
    operator delete(v311.__r_.__value_.__l.__data_);
  v315 = (uint64_t (**)())off_24C335D90;
  if (v63 < 0)
    operator delete(v316.__r_.__value_.__l.__data_);
  *(_QWORD *)(v48 + 416) = off_24C335D90;
  if (SHIBYTE(v284.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external((std::string *)(v48 + 424), v284.__r_.__value_.__l.__data_, v284.__r_.__value_.__l.__size_);
  else
    *(std::string *)(v48 + 424) = v284;
  *(_DWORD *)(v48 + 448) = v285;
  *(_QWORD *)(v48 + 416) = &off_24C335A98;
  *(_BYTE *)(v48 + 452) = v286;
  mediaplatform::Data::Data((mediaplatform::Data *)(v48 + 456), (const mediaplatform::Data *)v287);
  v253 = (uint64_t (**)())off_24C335D90;
  if (v38 < 0)
    operator delete(v254.__r_.__value_.__l.__data_);
  v258 = (uint64_t (**)())off_24C335D90;
  if (v83 < 0)
    operator delete(v259.__r_.__value_.__l.__data_);
  v262 = (uint64_t (**)())off_24C335D90;
  if (v85 < 0)
    operator delete(v263.__r_.__value_.__l.__data_);
  v266 = (uint64_t (**)())off_24C335D90;
  if (v87 < 0)
    operator delete(v267.__r_.__value_.__l.__data_);
  v270 = (uint64_t (**)())off_24C335D90;
  if (v89 < 0)
    operator delete(v271.__r_.__value_.__l.__data_);
  v274 = (uint64_t (**)())off_24C335D90;
  if (v90 < 0)
    operator delete(v275.__r_.__value_.__l.__data_);
  v279 = (uint64_t (**)())off_24C335D90;
  if (v91 < 0)
    operator delete(v280.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<mediaplatform::Data>::~DatabaseColumn((uint64_t)&v283);
  *(_QWORD *)(v48 + 496) = off_24C335D90;
  if (SHIBYTE(v249.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external((std::string *)(v48 + 504), v249.__r_.__value_.__l.__data_, v249.__r_.__value_.__l.__size_);
  else
    *(std::string *)(v48 + 504) = v249;
  *(_DWORD *)(v48 + 528) = v250;
  *(_QWORD *)(v48 + 496) = &off_24C335AB8;
  *(_BYTE *)(v48 + 532) = v251;
  v64 = (std::string *)(v48 + 536);
  if (SHIBYTE(v252.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v64, v252.__r_.__value_.__l.__data_, v252.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v64->__r_.__value_.__l.__data_ = *(_OWORD *)&v252.__r_.__value_.__l.__data_;
    *(_QWORD *)(v48 + 552) = *((_QWORD *)&v252.__r_.__value_.__l + 2);
  }
  v209 = (uint64_t (**)())off_24C335D90;
  if (v88 < 0)
    operator delete(v210.__r_.__value_.__l.__data_);
  v214 = (uint64_t (**)())off_24C335D90;
  if (v92 < 0)
    operator delete(v215.__r_.__value_.__l.__data_);
  v218 = (uint64_t (**)())off_24C335D90;
  if (v93 < 0)
    operator delete(v219.__r_.__value_.__l.__data_);
  v222 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v223.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v223.__r_.__value_.__l.__data_);
  v226 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v227.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v227.__r_.__value_.__l.__data_);
  v230 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v231.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v231.__r_.__value_.__l.__data_);
  v235 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v236.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v236.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<mediaplatform::Data>::~DatabaseColumn((uint64_t)&v239);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v248);
  *(_QWORD *)(v48 + 560) = off_24C335D90;
  if (SHIBYTE(v205.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external((std::string *)(v48 + 568), v205.__r_.__value_.__l.__data_, v205.__r_.__value_.__l.__size_);
  else
    *(std::string *)(v48 + 568) = v205;
  *(_DWORD *)(v48 + 592) = v206;
  *(_QWORD *)(v48 + 560) = &off_24C335AB8;
  *(_BYTE *)(v48 + 596) = v207;
  v65 = (std::string *)(v48 + 600);
  if (SHIBYTE(v208.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v65, v208.__r_.__value_.__l.__data_, v208.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v65->__r_.__value_.__l.__data_ = *(_OWORD *)&v208.__r_.__value_.__l.__data_;
    *(_QWORD *)(v48 + 616) = *((_QWORD *)&v208.__r_.__value_.__l + 2);
  }
  v160 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v161.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v161.__r_.__value_.__l.__data_);
  v165 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v166.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v166.__r_.__value_.__l.__data_);
  v169 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v170.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v170.__r_.__value_.__l.__data_);
  v173 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v174.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v174.__r_.__value_.__l.__data_);
  v177 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v178.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v178.__r_.__value_.__l.__data_);
  if (SHIBYTE(v182.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v182.__r_.__value_.__l.__data_);
  if (SHIBYTE(v187.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v187.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<mediaplatform::Data>::~DatabaseColumn((uint64_t)&v190);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v199);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v204);
  *(_QWORD *)(v48 + 624) = off_24C335D90;
  v66 = (std::string *)(v48 + 632);
  v67 = SHIBYTE(v156.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v156.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v66, v156.__r_.__value_.__l.__data_, v156.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v66->__r_.__value_.__l.__data_ = *(_OWORD *)&v156.__r_.__value_.__l.__data_;
    *(_QWORD *)(v48 + 648) = *((_QWORD *)&v156.__r_.__value_.__l + 2);
  }
  *(_DWORD *)(v48 + 656) = v157;
  *(_QWORD *)(v48 + 624) = off_24C335B18;
  *(_QWORD *)(v48 + 660) = v158;
  *(_DWORD *)(v48 + 668) = v159;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v112.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v112.__r_.__value_.__l.__data_);
  if (SHIBYTE(v116.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v116.__r_.__value_.__l.__data_);
  if (SHIBYTE(v120.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v120.__r_.__value_.__l.__data_);
  if (SHIBYTE(v124.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v124.__r_.__value_.__l.__data_);
  if (SHIBYTE(v128.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v128.__r_.__value_.__l.__data_);
  if (SHIBYTE(v133.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v133.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<mediaplatform::Data>::~DatabaseColumn((uint64_t)&v136);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v145);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v150);
  if (v67 < 0)
    operator delete(v156.__r_.__value_.__l.__data_);
  return v48;
}

void sub_20A6B5ECC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,mediaplatform::DatabaseTableBase *a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,void *__p,uint64_t a52,int a53,__int16 a54,char a55,char a56,uint64_t a57,uint64_t a58,uint64_t a59,void *a60,uint64_t a61,int a62,__int16 a63)
{
  char a65;
  void *a69;
  char a72;
  void *a73;
  char a74;
  uint64_t v74;

  mediaplatform::DatabaseColumnTuple<1ul,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>>::~DatabaseColumnTuple(v74);
  if (a56 < 0)
    operator delete(__p);
  if (a65 < 0)
    operator delete(a60);
  if (a72 < 0)
    operator delete(a69);
  if (a74 < 0)
    operator delete(a73);
  if (SLOBYTE(STACK[0x227]) < 0)
    operator delete((void *)STACK[0x210]);
  if (SLOBYTE(STACK[0x257]) < 0)
    operator delete((void *)STACK[0x240]);
  if (SLOBYTE(STACK[0x287]) < 0)
    operator delete((void *)STACK[0x270]);
  mediaplatform::DatabaseColumn<mediaplatform::Data>::~DatabaseColumn((uint64_t)&STACK[0x298]);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&STACK[0x2E8]);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&STACK[0x328]);
  if (SLOBYTE(STACK[0x387]) < 0)
    operator delete((void *)STACK[0x370]);
  if (*((char *)a39 + 79) < 0)
    operator delete(*a10);
  mediaplatform::DatabaseTableBase::~DatabaseTableBase((void **)a39);
  _Unwind_Resume(a1);
}

void sub_20A6B6590()
{
  JUMPOUT(0x20A6B60A4);
}

void sub_20A6B6598()
{
  JUMPOUT(0x20A6B60C0);
}

void sub_20A6B65A0()
{
  JUMPOUT(0x20A6B60DCLL);
}

void sub_20A6B65A8()
{
  JUMPOUT(0x20A6B60F8);
}

void sub_20A6B65B0()
{
  JUMPOUT(0x20A6B6114);
}

void sub_20A6B65B8()
{
  JUMPOUT(0x20A6B6130);
}

void sub_20A6B65C0()
{
  JUMPOUT(0x20A6B614CLL);
}

void sub_20A6B65C8()
{
  JUMPOUT(0x20A6B6168);
}

void sub_20A6B65D0()
{
  JUMPOUT(0x20A6B6184);
}

void sub_20A6B65D8()
{
  JUMPOUT(0x20A6B61A0);
}

void sub_20A6B65E0()
{
  JUMPOUT(0x20A6B61BCLL);
}

void sub_20A6B65E8()
{
  JUMPOUT(0x20A6B61D8);
}

void sub_20A6B65F0()
{
  JUMPOUT(0x20A6B61F4);
}

void sub_20A6B65F8()
{
  JUMPOUT(0x20A6B6210);
}

void sub_20A6B6600()
{
  JUMPOUT(0x20A6B622CLL);
}

void sub_20A6B6608()
{
  JUMPOUT(0x20A6B6248);
}

void sub_20A6B6610()
{
  JUMPOUT(0x20A6B6264);
}

void sub_20A6B6618()
{
  JUMPOUT(0x20A6B6280);
}

void sub_20A6B6620()
{
  JUMPOUT(0x20A6B629CLL);
}

void sub_20A6B6628()
{
  JUMPOUT(0x20A6B62B8);
}

void sub_20A6B6630()
{
  JUMPOUT(0x20A6B62D4);
}

void sub_20A6B6638()
{
  JUMPOUT(0x20A6B62F0);
}

void sub_20A6B6640()
{
  JUMPOUT(0x20A6B630CLL);
}

void sub_20A6B6648()
{
  JUMPOUT(0x20A6B6328);
}

void sub_20A6B6650()
{
  JUMPOUT(0x20A6B6344);
}

void sub_20A6B6658()
{
  JUMPOUT(0x20A6B6360);
}

void sub_20A6B6660()
{
  JUMPOUT(0x20A6B637CLL);
}

void sub_20A6B6668()
{
  JUMPOUT(0x20A6B6398);
}

void sub_20A6B6670()
{
  JUMPOUT(0x20A6B63B4);
}

void sub_20A6B6678()
{
  JUMPOUT(0x20A6B63BCLL);
}

void sub_20A6B6680()
{
  JUMPOUT(0x20A6B63D8);
}

void sub_20A6B6688()
{
  JUMPOUT(0x20A6B63E8);
}

void sub_20A6B6690()
{
  JUMPOUT(0x20A6B63F8);
}

void sub_20A6B6698()
{
  JUMPOUT(0x20A6B6408);
}

void sub_20A6B66A0()
{
  JUMPOUT(0x20A6B6418);
}

void sub_20A6B66A8()
{
  JUMPOUT(0x20A6B6428);
}

void sub_20A6B66B0()
{
  JUMPOUT(0x20A6B6438);
}

void sub_20A6B66B8()
{
  JUMPOUT(0x20A6B6440);
}

void sub_20A6B66C0()
{
  unint64_t v0;

  STACK[0x758] = v0;
  if (SLOBYTE(STACK[0x777]) < 0)
    operator delete((void *)STACK[0x760]);
  JUMPOUT(0x20A6B6448);
}

void sub_20A6B66DC()
{
  JUMPOUT(0x20A6B6448);
}

void sub_20A6B66E4()
{
  JUMPOUT(0x20A6B6458);
}

void sub_20A6B66EC()
{
  JUMPOUT(0x20A6B6468);
}

void sub_20A6B66F4()
{
  JUMPOUT(0x20A6B6478);
}

void sub_20A6B66FC()
{
  JUMPOUT(0x20A6B6488);
}

void sub_20A6B6704()
{
  JUMPOUT(0x20A6B6498);
}

void sub_20A6B670C()
{
  JUMPOUT(0x20A6B64A8);
}

void sub_20A6B6714()
{
  JUMPOUT(0x20A6B64B8);
}

void sub_20A6B671C()
{
  JUMPOUT(0x20A6B64C0);
}

void sub_20A6B6724()
{
  STACK[0x538] = (unint64_t)off_24C335D90;
  if (SLOBYTE(STACK[0x557]) < 0)
    operator delete((void *)STACK[0x540]);
  JUMPOUT(0x20A6B64C8);
}

void sub_20A6B6748()
{
  JUMPOUT(0x20A6B64C8);
}

void sub_20A6B6750()
{
  unint64_t v0;

  STACK[0x578] = v0;
  if (SLOBYTE(STACK[0x597]) < 0)
    operator delete((void *)STACK[0x580]);
  JUMPOUT(0x20A6B64D0);
}

void sub_20A6B676C()
{
  JUMPOUT(0x20A6B64D0);
}

void sub_20A6B6774()
{
  JUMPOUT(0x20A6B64E0);
}

void sub_20A6B677C()
{
  JUMPOUT(0x20A6B64F0);
}

void sub_20A6B6784()
{
  JUMPOUT(0x20A6B6500);
}

void sub_20A6B678C()
{
  JUMPOUT(0x20A6B6510);
}

void sub_20A6B6794()
{
  JUMPOUT(0x20A6B6520);
}

void sub_20A6B679C()
{
  JUMPOUT(0x20A6B6530);
}

void sub_20A6B67A4()
{
  JUMPOUT(0x20A6B6540);
}

void sub_20A6B67AC()
{
  JUMPOUT(0x20A6B6548);
}

void sub_20A6B67B4()
{
  unint64_t v0;

  STACK[0x2E8] = v0;
  if (SLOBYTE(STACK[0x307]) < 0)
    operator delete((void *)STACK[0x2F0]);
  JUMPOUT(0x20A6B6550);
}

void sub_20A6B67D0()
{
  JUMPOUT(0x20A6B6550);
}

void sub_20A6B67D8()
{
  unint64_t v0;

  STACK[0x328] = v0;
  if (SLOBYTE(STACK[0x347]) < 0)
    operator delete((void *)STACK[0x330]);
  JUMPOUT(0x20A6B6558);
}

void sub_20A6B67F4()
{
  JUMPOUT(0x20A6B6558);
}

void sub_20A6B67FC()
{
  JUMPOUT(0x20A6B6568);
}

void sub_20A6B6804()
{
  STACK[0x8E8] = (unint64_t)off_24C335D90;
  if (SLOBYTE(STACK[0x907]) < 0)
    operator delete((void *)STACK[0x8F0]);
  JUMPOUT(0x20A6B63BCLL);
}

void sub_20A6B6828()
{
  STACK[0x708] = (unint64_t)off_24C335D90;
  if (SLOBYTE(STACK[0x727]) < 0)
    operator delete((void *)STACK[0x710]);
  JUMPOUT(0x20A6B6440);
}

void sub_20A6B684C()
{
  STACK[0x4E8] = (unint64_t)off_24C335D90;
  if (SLOBYTE(STACK[0x507]) < 0)
    operator delete((void *)STACK[0x4F0]);
  JUMPOUT(0x20A6B64C0);
}

void sub_20A6B6870()
{
  unint64_t v0;

  STACK[0x298] = v0;
  if (SLOBYTE(STACK[0x2B7]) < 0)
    operator delete((void *)STACK[0x2A0]);
  JUMPOUT(0x20A6B6548);
}

void sub_20A6B688C()
{
  void **v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)(v2 + 416) = v3;
  if (*(char *)(v2 + 447) < 0)
    operator delete(*v0);
  mediaplatform::DatabaseColumnTuple<14ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<double>,mediaplatform::DatabaseColumn<double>,mediaplatform::DatabaseColumn<double>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(v1);
  JUMPOUT(0x20A6B62F0);
}

uint64_t mediaplatform::DatabaseColumnTuple<0ul,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<double>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>>::DatabaseColumnTuple(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  int v38;
  int v39;
  int v40;
  int v41;
  int v42;
  int v43;
  int v44;
  int v45;
  int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  int v52;
  int v53;
  int v54;
  int v55;
  int v56;
  int v57;
  int v58;
  std::string *v59;
  std::string *v60;
  std::string *v61;
  int v62;
  std::string *v63;
  int v64;
  std::string *v65;
  __int128 v66;
  uint64_t v67;
  int v69;
  int v70;
  int v71;
  int v72;
  int v73;
  int v74;
  int v75;
  int v76;
  int v77;
  int v78;
  int v79;
  int v80;
  uint64_t v81;
  int v82;
  int v83;
  int v84;
  int v85;
  int v86;
  int v87;
  int v88;
  int v89;
  uint64_t v90;
  int v91;
  uint64_t v92;
  int v93;
  uint64_t v94;
  int v95;
  uint64_t v96;
  int v97;
  uint64_t v98;
  int v99;
  int v100;
  uint64_t v101;
  int v102;
  uint64_t v103;
  int v104;
  uint64_t v105;
  int v106;
  uint64_t v107;
  int v108;
  int v109;
  int v110;
  int v111;
  int v112;
  int v113;
  int v114;
  int v115;
  uint64_t v116;
  int v117;
  int v118;
  int v119;
  uint64_t v120;
  int v121;
  uint64_t v122;
  int v123;
  uint64_t v124;
  std::string v125;
  int v126;
  uint64_t v127;
  int v128;
  uint64_t (**v129)();
  std::string v130;
  int v131;
  uint64_t v132;
  uint64_t (**v133)();
  std::string v134;
  int v135;
  uint64_t v136;
  uint64_t (**v137)();
  std::string v138;
  int v139;
  uint64_t v140;
  uint64_t (**v141)();
  std::string v142;
  int v143;
  uint64_t v144;
  uint64_t (**v145)();
  std::string v146;
  int v147;
  uint64_t v148;
  uint64_t (**v149)();
  std::string v150;
  int v151;
  uint64_t v152;
  int v153;
  uint64_t (**v154)();
  std::string v155;
  int v156;
  uint64_t v157;
  uint64_t (**v158)();
  std::string v159;
  int v160;
  uint64_t v161;
  uint64_t (**v162)();
  std::string v163;
  int v164;
  uint64_t v165;
  uint64_t (**v166)();
  std::string v167;
  int v168;
  uint64_t v169;
  uint64_t (**v170)();
  std::string v171;
  int v172;
  uint64_t v173;
  int v174;
  uint64_t (**v175)();
  std::string v176;
  int v177;
  uint64_t v178;
  int v179;
  uint64_t (**v180)();
  std::string v181;
  int v182;
  uint64_t v183;
  int v184;
  uint64_t (**v185)();
  std::string v186;
  int v187;
  uint64_t v188;
  uint64_t (**v189)();
  std::string v190;
  int v191;
  uint64_t v192;
  uint64_t (**v193)();
  std::string v194;
  int v195;
  uint64_t v196;
  uint64_t (**v197)();
  std::string v198;
  int v199;
  char v200;
  std::string v201;
  uint64_t (**v202)();
  std::string __s;
  int v204;
  uint64_t v205;
  uint64_t (**v206)();
  std::string v207;
  int v208;
  uint64_t v209;
  uint64_t (**v210)();
  std::string v211;
  int v212;
  uint64_t v213;
  int v214;
  uint64_t (**v215)();
  std::string v216;
  int v217;
  uint64_t v218;
  uint64_t (**v219)();
  std::string v220;
  int v221;
  uint64_t v222;
  uint64_t (**v223)();
  std::string v224;
  int v225;
  uint64_t v226;
  uint64_t (**v227)();
  std::string v228;
  int v229;
  uint64_t v230;
  uint64_t (**v231)();
  std::string v232;
  int v233;
  uint64_t v234;
  uint64_t (**v235)();
  std::string v236;
  int v237;
  uint64_t v238;
  int v239;
  uint64_t (**v240)();
  std::string v241;
  int v242;
  uint64_t v243;
  uint64_t (**v244)();
  std::string v245;
  int v246;
  uint64_t v247;
  uint64_t (**v248)();
  std::string v249;
  int v250;
  uint64_t v251;
  uint64_t (**v252)();
  std::string v253;
  int v254;
  uint64_t v255;
  uint64_t (**v256)();
  std::string v257;
  int v258;
  uint64_t v259;
  int v260;
  uint64_t (**v261)();
  std::string v262;
  int v263;
  uint64_t v264;
  int v265;
  uint64_t (**v266)();
  std::string v267;
  int v268;
  uint64_t v269;
  int v270;
  uint64_t (**v271)();
  std::string v272;
  int v273;
  uint64_t v274;
  uint64_t (**v275)();
  std::string v276;
  int v277;
  uint64_t v278;
  uint64_t (**v279)();
  std::string v280;
  int v281;
  uint64_t v282;
  uint64_t (**v283)();
  std::string v284;
  int v285;
  char v286;
  std::string v287;
  uint64_t (**v288)();
  std::string v289;
  int v290;
  uint64_t v291;
  uint64_t (**v292)();
  std::string v293;
  int v294;
  uint64_t v295;
  int v296;
  uint64_t (**v297)();
  std::string v298;
  int v299;
  uint64_t v300;
  uint64_t (**v301)();
  std::string v302;
  int v303;
  uint64_t v304;
  uint64_t (**v305)();
  std::string v306;
  int v307;
  uint64_t v308;
  uint64_t (**v309)();
  std::string v310;
  int v311;
  uint64_t v312;
  uint64_t (**v313)();
  std::string v314;
  int v315;
  uint64_t v316;
  uint64_t (**v317)();
  std::string v318;
  int v319;
  uint64_t v320;
  int v321;
  uint64_t (**v322)();
  std::string v323;
  int v324;
  uint64_t v325;
  uint64_t (**v326)();
  std::string v327;
  int v328;
  uint64_t v329;
  uint64_t (**v330)();
  std::string v331;
  int v332;
  uint64_t v333;
  uint64_t (**v334)();
  std::string v335;
  int v336;
  uint64_t v337;
  uint64_t (**v338)();
  std::string v339;
  int v340;
  uint64_t v341;
  int v342;
  uint64_t (**v343)();
  std::string v344;
  int v345;
  uint64_t v346;
  int v347;
  uint64_t (**v348)();
  std::string v349;
  int v350;
  uint64_t v351;
  int v352;
  uint64_t (**v353)();
  std::string v354;
  int v355;
  uint64_t v356;
  uint64_t (**v357)();
  std::string v358;
  int v359;
  uint64_t v360;
  uint64_t (**v361)();
  std::string v362;
  int v363;
  uint64_t v364;
  uint64_t (**v365)();
  std::string v366;
  int v367;
  char v368;
  std::string v369;
  uint64_t (**v370)();
  std::string __p;
  int v372;
  uint64_t v373;
  int v374;
  uint64_t (**v375)();
  std::string v376;
  int v377;
  uint64_t v378;
  uint64_t (**v379)();
  std::string v380;
  int v381;
  uint64_t v382;
  uint64_t (**v383)();
  std::string v384;
  int v385;
  uint64_t v386;
  uint64_t (**v387)();
  std::string v388;
  int v389;
  uint64_t v390;
  uint64_t (**v391)();
  std::string v392;
  int v393;
  uint64_t v394;
  uint64_t (**v395)();
  std::string v396;
  int v397;
  uint64_t v398;
  int v399;
  uint64_t (**v400)();
  std::string v401;
  int v402;
  uint64_t v403;
  uint64_t (**v404)();
  std::string v405;
  int v406;
  uint64_t v407;
  uint64_t (**v408)();
  std::string v409;
  int v410;
  uint64_t v411;
  uint64_t (**v412)();
  std::string v413;
  int v414;
  uint64_t v415;
  uint64_t (**v416)();
  std::string v417;
  int v418;
  uint64_t v419;
  int v420;
  uint64_t (**v421)();
  std::string v422;
  int v423;
  uint64_t v424;
  int v425;
  uint64_t (**v426)();
  std::string v427;
  int v428;
  uint64_t v429;
  int v430;
  uint64_t (**v431)();
  std::string v432;
  int v433;
  uint64_t v434;
  uint64_t (**v435)();
  std::string v436;
  int v437;
  uint64_t v438;
  uint64_t (**v439)();
  std::string v440;
  int v441;
  uint64_t v442;

  v22 = MEMORY[0x24BDAC7A8](a1);
  v25 = v24;
  v27 = v26;
  v29 = v28;
  v31 = v30;
  v33 = v32;
  v34 = v23;
  v81 = v35;
  v124 = v22;
  if (*(char *)(v23 + 31) < 0)
    std::string::__init_copy_ctor_external(&v207, *(const std::string::value_type **)(v23 + 8), *(_QWORD *)(v23 + 16));
  else
    v207 = *(std::string *)(v23 + 8);
  v208 = *(_DWORD *)(v34 + 32);
  v206 = off_24C335AF8;
  v209 = *(_QWORD *)(v34 + 36);
  if (*(char *)(v33 + 31) < 0)
    std::string::__init_copy_ctor_external(&__s, *(const std::string::value_type **)(v33 + 8), *(_QWORD *)(v33 + 16));
  else
    __s = *(std::string *)(v33 + 8);
  v84 = *(_DWORD *)(v33 + 32);
  v204 = v84;
  v202 = off_24C335AF8;
  v36 = *(_QWORD *)(v33 + 36);
  v205 = v36;
  v197 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(v31 + 31) < 0)
    std::string::__init_copy_ctor_external(&v198, *(const std::string::value_type **)(v31 + 8), *(_QWORD *)(v31 + 16));
  else
    v198 = *(std::string *)(v31 + 8);
  v199 = *(_DWORD *)(v31 + 32);
  v197 = &off_24C335AB8;
  v200 = *(_BYTE *)(v31 + 36);
  if (*(char *)(v31 + 63) < 0)
    std::string::__init_copy_ctor_external(&v201, *(const std::string::value_type **)(v31 + 40), *(_QWORD *)(v31 + 48));
  else
    v201 = *(std::string *)(v31 + 40);
  if (*(char *)(v29 + 31) < 0)
    std::string::__init_copy_ctor_external(&v194, *(const std::string::value_type **)(v29 + 8), *(_QWORD *)(v29 + 16));
  else
    v194 = *(std::string *)(v29 + 8);
  v87 = *(_DWORD *)(v29 + 32);
  v195 = v87;
  v193 = off_24C335AF8;
  v122 = *(_QWORD *)(v29 + 36);
  v196 = v122;
  if (*(char *)(v27 + 31) < 0)
    std::string::__init_copy_ctor_external(&v190, *(const std::string::value_type **)(v27 + 8), *(_QWORD *)(v27 + 16));
  else
    v190 = *(std::string *)(v27 + 8);
  v85 = *(_DWORD *)(v27 + 32);
  v191 = v85;
  v189 = off_24C335AF8;
  v120 = *(_QWORD *)(v27 + 36);
  v192 = v120;
  if (*(char *)(v25 + 31) < 0)
    std::string::__init_copy_ctor_external(&v186, *(const std::string::value_type **)(v25 + 8), *(_QWORD *)(v25 + 16));
  else
    v186 = *(std::string *)(v25 + 8);
  v118 = *(_DWORD *)(v25 + 32);
  v187 = v118;
  v185 = off_24C335AF8;
  v116 = *(_QWORD *)(v25 + 36);
  v188 = v116;
  if (*(char *)(a9 + 31) < 0)
    std::string::__init_copy_ctor_external(&v181, *(const std::string::value_type **)(a9 + 8), *(_QWORD *)(a9 + 16));
  else
    v181 = *(std::string *)(a9 + 8);
  v37 = *(_DWORD *)(a9 + 32);
  v180 = off_24C335B18;
  v183 = *(_QWORD *)(a9 + 36);
  v38 = *(_DWORD *)(a9 + 44);
  v114 = v37;
  v182 = v37;
  v184 = v38;
  if (*(char *)(a10 + 31) < 0)
    std::string::__init_copy_ctor_external(&v176, *(const std::string::value_type **)(a10 + 8), *(_QWORD *)(a10 + 16));
  else
    v176 = *(std::string *)(a10 + 8);
  v39 = *(_DWORD *)(a10 + 32);
  v175 = off_24C335B18;
  v178 = *(_QWORD *)(a10 + 36);
  v40 = *(_DWORD *)(a10 + 44);
  v112 = v39;
  v177 = v39;
  v179 = v40;
  if (*(char *)(a11 + 31) < 0)
    std::string::__init_copy_ctor_external(&v171, *(const std::string::value_type **)(a11 + 8), *(_QWORD *)(a11 + 16));
  else
    v171 = *(std::string *)(a11 + 8);
  v41 = *(_DWORD *)(a11 + 32);
  v170 = off_24C335B18;
  v173 = *(_QWORD *)(a11 + 36);
  v42 = *(_DWORD *)(a11 + 44);
  v110 = v41;
  v172 = v41;
  v174 = v42;
  if (*(char *)(a12 + 31) < 0)
    std::string::__init_copy_ctor_external(&v167, *(const std::string::value_type **)(a12 + 8), *(_QWORD *)(a12 + 16));
  else
    v167 = *(std::string *)(a12 + 8);
  v108 = *(_DWORD *)(a12 + 32);
  v168 = v108;
  v166 = off_24C335AF8;
  v107 = *(_QWORD *)(a12 + 36);
  v169 = v107;
  if (*(char *)(a13 + 31) < 0)
    std::string::__init_copy_ctor_external(&v163, *(const std::string::value_type **)(a13 + 8), *(_QWORD *)(a13 + 16));
  else
    v163 = *(std::string *)(a13 + 8);
  v106 = *(_DWORD *)(a13 + 32);
  v164 = v106;
  v162 = off_24C335AF8;
  v105 = *(_QWORD *)(a13 + 36);
  v165 = v105;
  if (*(char *)(a14 + 31) < 0)
    std::string::__init_copy_ctor_external(&v159, *(const std::string::value_type **)(a14 + 8), *(_QWORD *)(a14 + 16));
  else
    v159 = *(std::string *)(a14 + 8);
  v104 = *(_DWORD *)(a14 + 32);
  v160 = v104;
  v158 = off_24C335AF8;
  v103 = *(_QWORD *)(a14 + 36);
  v161 = v103;
  if (*(char *)(a15 + 31) < 0)
    std::string::__init_copy_ctor_external(&v155, *(const std::string::value_type **)(a15 + 8), *(_QWORD *)(a15 + 16));
  else
    v155 = *(std::string *)(a15 + 8);
  v102 = *(_DWORD *)(a15 + 32);
  v156 = v102;
  v154 = off_24C335AF8;
  v101 = *(_QWORD *)(a15 + 36);
  v157 = v101;
  if (*(char *)(a16 + 31) < 0)
    std::string::__init_copy_ctor_external(&v150, *(const std::string::value_type **)(a16 + 8), *(_QWORD *)(a16 + 16));
  else
    v150 = *(std::string *)(a16 + 8);
  v43 = *(_DWORD *)(a16 + 32);
  v149 = off_24C335AD8;
  v152 = *(_QWORD *)(a16 + 36);
  v44 = *(_DWORD *)(a16 + 44);
  v100 = v43;
  v151 = v43;
  v153 = v44;
  if (*(char *)(a17 + 31) < 0)
    std::string::__init_copy_ctor_external(&v146, *(const std::string::value_type **)(a17 + 8), *(_QWORD *)(a17 + 16));
  else
    v146 = *(std::string *)(a17 + 8);
  v99 = *(_DWORD *)(a17 + 32);
  v147 = v99;
  v145 = off_24C335AF8;
  v98 = *(_QWORD *)(a17 + 36);
  v148 = v98;
  if (*(char *)(a18 + 31) < 0)
    std::string::__init_copy_ctor_external(&v142, *(const std::string::value_type **)(a18 + 8), *(_QWORD *)(a18 + 16));
  else
    v142 = *(std::string *)(a18 + 8);
  v97 = *(_DWORD *)(a18 + 32);
  v143 = v97;
  v141 = off_24C335AF8;
  v96 = *(_QWORD *)(a18 + 36);
  v144 = v96;
  if (*(char *)(a19 + 31) < 0)
    std::string::__init_copy_ctor_external(&v138, *(const std::string::value_type **)(a19 + 8), *(_QWORD *)(a19 + 16));
  else
    v138 = *(std::string *)(a19 + 8);
  v95 = *(_DWORD *)(a19 + 32);
  v139 = v95;
  v137 = off_24C335AF8;
  v94 = *(_QWORD *)(a19 + 36);
  v140 = v94;
  if (*(char *)(a20 + 31) < 0)
    std::string::__init_copy_ctor_external(&v134, *(const std::string::value_type **)(a20 + 8), *(_QWORD *)(a20 + 16));
  else
    v134 = *(std::string *)(a20 + 8);
  v93 = *(_DWORD *)(a20 + 32);
  v135 = v93;
  v133 = off_24C335AF8;
  v92 = *(_QWORD *)(a20 + 36);
  v136 = v92;
  if (*(char *)(a21 + 31) < 0)
    std::string::__init_copy_ctor_external(&v130, *(const std::string::value_type **)(a21 + 8), *(_QWORD *)(a21 + 16));
  else
    v130 = *(std::string *)(a21 + 8);
  v91 = *(_DWORD *)(a21 + 32);
  v131 = v91;
  v129 = off_24C335AF8;
  v90 = *(_QWORD *)(a21 + 36);
  v132 = v90;
  if (*(char *)(a22 + 31) < 0)
    std::string::__init_copy_ctor_external(&v125, *(const std::string::value_type **)(a22 + 8), *(_QWORD *)(a22 + 16));
  else
    v125 = *(std::string *)(a22 + 8);
  v89 = *(_DWORD *)(a22 + 32);
  v126 = v89;
  v127 = *(_QWORD *)(a22 + 36);
  v128 = *(_DWORD *)(a22 + 44);
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v289, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
  else
    v289 = __s;
  v290 = v84;
  v288 = off_24C335AF8;
  v291 = v36;
  v283 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v198.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v284, v198.__r_.__value_.__l.__data_, v198.__r_.__value_.__l.__size_);
  else
    v284 = v198;
  v285 = v199;
  v283 = &off_24C335AB8;
  v286 = v200;
  if (SHIBYTE(v201.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v287, v201.__r_.__value_.__l.__data_, v201.__r_.__value_.__l.__size_);
  else
    v287 = v201;
  if (SHIBYTE(v194.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v280, v194.__r_.__value_.__l.__data_, v194.__r_.__value_.__l.__size_);
  else
    v280 = v194;
  v281 = v87;
  v279 = off_24C335AF8;
  v282 = v122;
  if (SHIBYTE(v190.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v276, v190.__r_.__value_.__l.__data_, v190.__r_.__value_.__l.__size_);
  else
    v276 = v190;
  v277 = v85;
  v275 = off_24C335AF8;
  v278 = v120;
  if (SHIBYTE(v186.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v272, v186.__r_.__value_.__l.__data_, v186.__r_.__value_.__l.__size_);
  else
    v272 = v186;
  v273 = v118;
  v271 = off_24C335AF8;
  v274 = v116;
  if (SHIBYTE(v181.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v267, v181.__r_.__value_.__l.__data_, v181.__r_.__value_.__l.__size_);
  else
    v267 = v181;
  v266 = off_24C335B18;
  v269 = v183;
  v268 = v114;
  v270 = v184;
  if (SHIBYTE(v176.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v262, v176.__r_.__value_.__l.__data_, v176.__r_.__value_.__l.__size_);
  else
    v262 = v176;
  v261 = off_24C335B18;
  v264 = v178;
  v263 = v112;
  v265 = v179;
  if (SHIBYTE(v171.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v257, v171.__r_.__value_.__l.__data_, v171.__r_.__value_.__l.__size_);
  else
    v257 = v171;
  v256 = off_24C335B18;
  v259 = v173;
  v258 = v110;
  v260 = v174;
  if (SHIBYTE(v167.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v253, v167.__r_.__value_.__l.__data_, v167.__r_.__value_.__l.__size_);
  else
    v253 = v167;
  v254 = v108;
  v252 = off_24C335AF8;
  v255 = v107;
  if (SHIBYTE(v163.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v249, v163.__r_.__value_.__l.__data_, v163.__r_.__value_.__l.__size_);
  else
    v249 = v163;
  v250 = v106;
  v248 = off_24C335AF8;
  v251 = v105;
  v244 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v159.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v245, v159.__r_.__value_.__l.__data_, v159.__r_.__value_.__l.__size_);
  else
    v245 = v159;
  v246 = v104;
  v244 = off_24C335AF8;
  v247 = v103;
  v240 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v155.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v241, v155.__r_.__value_.__l.__data_, v155.__r_.__value_.__l.__size_);
  else
    v241 = v155;
  v242 = v102;
  v240 = off_24C335AF8;
  v243 = v101;
  v235 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v150.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v236, v150.__r_.__value_.__l.__data_, v150.__r_.__value_.__l.__size_);
  else
    v236 = v150;
  v235 = off_24C335AD8;
  v238 = v152;
  v237 = v100;
  v239 = v153;
  v231 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v146.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v232, v146.__r_.__value_.__l.__data_, v146.__r_.__value_.__l.__size_);
  else
    v232 = v146;
  v233 = v99;
  v231 = off_24C335AF8;
  v234 = v98;
  v227 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v142.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v228, v142.__r_.__value_.__l.__data_, v142.__r_.__value_.__l.__size_);
  else
    v228 = v142;
  v229 = v97;
  v227 = off_24C335AF8;
  v230 = v96;
  v223 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v138.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v224, v138.__r_.__value_.__l.__data_, v138.__r_.__value_.__l.__size_);
  else
    v224 = v138;
  v225 = v95;
  v223 = off_24C335AF8;
  v226 = v94;
  v219 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v134.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v220, v134.__r_.__value_.__l.__data_, v134.__r_.__value_.__l.__size_);
  else
    v220 = v134;
  v221 = v93;
  v219 = off_24C335AF8;
  v222 = v92;
  v215 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v130.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v216, v130.__r_.__value_.__l.__data_, v130.__r_.__value_.__l.__size_);
  else
    v216 = v130;
  v217 = v91;
  v215 = off_24C335AF8;
  v218 = v90;
  v210 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v125.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v211, v125.__r_.__value_.__l.__data_, v125.__r_.__value_.__l.__size_);
  else
    v211 = v125;
  v210 = off_24C335B18;
  v213 = v127;
  v212 = v89;
  v214 = v128;
  v365 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v284.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v366, v284.__r_.__value_.__l.__data_, v284.__r_.__value_.__l.__size_);
  else
    v366 = v284;
  v367 = v285;
  v365 = &off_24C335AB8;
  v368 = v286;
  if (SHIBYTE(v287.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v369, v287.__r_.__value_.__l.__data_, v287.__r_.__value_.__l.__size_);
  else
    v369 = v287;
  v361 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v280.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v362, v280.__r_.__value_.__l.__data_, v280.__r_.__value_.__l.__size_);
  else
    v362 = v280;
  v363 = v87;
  v361 = off_24C335AF8;
  v364 = v122;
  v357 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v276.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v358, v276.__r_.__value_.__l.__data_, v276.__r_.__value_.__l.__size_);
  else
    v358 = v276;
  v359 = v85;
  v357 = off_24C335AF8;
  v360 = v120;
  v353 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v272.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v354, v272.__r_.__value_.__l.__data_, v272.__r_.__value_.__l.__size_);
  else
    v354 = v272;
  v355 = v118;
  v353 = off_24C335AF8;
  v356 = v116;
  v348 = (uint64_t (**)())off_24C335D90;
  v45 = SHIBYTE(v267.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v267.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v349, v267.__r_.__value_.__l.__data_, v267.__r_.__value_.__l.__size_);
  else
    v349 = v267;
  v348 = off_24C335B18;
  v351 = v269;
  v350 = v114;
  v352 = v270;
  v343 = (uint64_t (**)())off_24C335D90;
  v46 = SHIBYTE(v262.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v262.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v344, v262.__r_.__value_.__l.__data_, v262.__r_.__value_.__l.__size_);
  else
    v344 = v262;
  v343 = off_24C335B18;
  v346 = v264;
  v345 = v112;
  v347 = v265;
  v338 = (uint64_t (**)())off_24C335D90;
  v76 = SHIBYTE(v257.__r_.__value_.__r.__words[2]);
  v77 = v46;
  if (SHIBYTE(v257.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v339, v257.__r_.__value_.__l.__data_, v257.__r_.__value_.__l.__size_);
  else
    v339 = v257;
  v338 = off_24C335B18;
  v341 = v259;
  v340 = v110;
  v342 = v260;
  v334 = (uint64_t (**)())off_24C335D90;
  v47 = SHIBYTE(v253.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v253.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v335, v253.__r_.__value_.__l.__data_, v253.__r_.__value_.__l.__size_);
  else
    v335 = v253;
  v336 = v108;
  v334 = off_24C335AF8;
  v337 = v107;
  v330 = (uint64_t (**)())off_24C335D90;
  v74 = SHIBYTE(v249.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v249.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v331, v249.__r_.__value_.__l.__data_, v249.__r_.__value_.__l.__size_);
  else
    v331 = v249;
  v332 = v106;
  v330 = off_24C335AF8;
  v333 = v105;
  v326 = (uint64_t (**)())off_24C335D90;
  v48 = SHIBYTE(v245.__r_.__value_.__r.__words[2]);
  v75 = v45;
  if (SHIBYTE(v245.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v327, v245.__r_.__value_.__l.__data_, v245.__r_.__value_.__l.__size_);
  else
    v327 = v245;
  v328 = v104;
  v326 = off_24C335AF8;
  v329 = v103;
  v322 = (uint64_t (**)())off_24C335D90;
  v82 = SHIBYTE(v241.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v241.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v323, v241.__r_.__value_.__l.__data_, v241.__r_.__value_.__l.__size_);
  else
    v323 = v241;
  v324 = v102;
  v322 = off_24C335AF8;
  v325 = v101;
  v317 = (uint64_t (**)())off_24C335D90;
  v80 = SHIBYTE(v236.__r_.__value_.__r.__words[2]);
  v73 = v48;
  if (SHIBYTE(v236.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v318, v236.__r_.__value_.__l.__data_, v236.__r_.__value_.__l.__size_);
  else
    v318 = v236;
  v317 = off_24C335AD8;
  v320 = v238;
  v319 = v100;
  v321 = v239;
  v313 = (uint64_t (**)())off_24C335D90;
  v72 = SHIBYTE(v232.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v232.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v314, v232.__r_.__value_.__l.__data_, v232.__r_.__value_.__l.__size_);
  else
    v314 = v232;
  v315 = v99;
  v313 = off_24C335AF8;
  v316 = v98;
  v309 = (uint64_t (**)())off_24C335D90;
  v71 = SHIBYTE(v228.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v228.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v310, v228.__r_.__value_.__l.__data_, v228.__r_.__value_.__l.__size_);
  else
    v310 = v228;
  v311 = v97;
  v309 = off_24C335AF8;
  v312 = v96;
  v305 = (uint64_t (**)())off_24C335D90;
  v79 = SHIBYTE(v224.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v224.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v306, v224.__r_.__value_.__l.__data_, v224.__r_.__value_.__l.__size_);
  else
    v306 = v224;
  v307 = v95;
  v305 = off_24C335AF8;
  v308 = v94;
  v301 = (uint64_t (**)())off_24C335D90;
  v78 = SHIBYTE(v220.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v220.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v302, v220.__r_.__value_.__l.__data_, v220.__r_.__value_.__l.__size_);
  else
    v302 = v220;
  v303 = v93;
  v301 = off_24C335AF8;
  v304 = v92;
  v297 = (uint64_t (**)())off_24C335D90;
  v70 = SHIBYTE(v216.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v216.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v298, v216.__r_.__value_.__l.__data_, v216.__r_.__value_.__l.__size_);
  else
    v298 = v216;
  v299 = v91;
  v297 = off_24C335AF8;
  v300 = v90;
  v292 = (uint64_t (**)())off_24C335D90;
  v83 = SHIBYTE(v211.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v211.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v293, v211.__r_.__value_.__l.__data_, v211.__r_.__value_.__l.__size_);
  else
    v293 = v211;
  v292 = off_24C335B18;
  v295 = v213;
  v294 = v89;
  v296 = v214;
  v439 = (uint64_t (**)())off_24C335D90;
  v69 = SHIBYTE(v362.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v362.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v440, v362.__r_.__value_.__l.__data_, v362.__r_.__value_.__l.__size_);
  else
    v440 = v362;
  v441 = v87;
  v439 = off_24C335AF8;
  v442 = v122;
  v435 = (uint64_t (**)())off_24C335D90;
  v123 = SHIBYTE(v358.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v358.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v436, v358.__r_.__value_.__l.__data_, v358.__r_.__value_.__l.__size_);
  else
    v436 = v358;
  v437 = v85;
  v435 = off_24C335AF8;
  v438 = v120;
  v431 = (uint64_t (**)())off_24C335D90;
  v121 = SHIBYTE(v354.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v354.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v432, v354.__r_.__value_.__l.__data_, v354.__r_.__value_.__l.__size_);
  else
    v432 = v354;
  v433 = v118;
  v431 = off_24C335AF8;
  v434 = v116;
  v426 = (uint64_t (**)())off_24C335D90;
  v119 = SHIBYTE(v349.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v349.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v427, v349.__r_.__value_.__l.__data_, v349.__r_.__value_.__l.__size_);
  else
    v427 = v349;
  v426 = off_24C335B18;
  v429 = v351;
  v428 = v114;
  v430 = v352;
  v421 = (uint64_t (**)())off_24C335D90;
  v117 = SHIBYTE(v344.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v344.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v422, v344.__r_.__value_.__l.__data_, v344.__r_.__value_.__l.__size_);
  else
    v422 = v344;
  v421 = off_24C335B18;
  v424 = v346;
  v423 = v112;
  v425 = v347;
  v416 = (uint64_t (**)())off_24C335D90;
  v49 = SHIBYTE(v339.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v339.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v417, v339.__r_.__value_.__l.__data_, v339.__r_.__value_.__l.__size_);
  else
    v417 = v339;
  v416 = off_24C335B18;
  v419 = v341;
  v418 = v110;
  v420 = v342;
  v412 = (uint64_t (**)())off_24C335D90;
  v50 = SHIBYTE(v335.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v335.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v413, v335.__r_.__value_.__l.__data_, v335.__r_.__value_.__l.__size_);
  else
    v413 = v335;
  v414 = v108;
  v412 = off_24C335AF8;
  v415 = v107;
  v408 = (uint64_t (**)())off_24C335D90;
  v51 = SHIBYTE(v331.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v331.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v409, v331.__r_.__value_.__l.__data_, v331.__r_.__value_.__l.__size_);
  else
    v409 = v331;
  v410 = v106;
  v408 = off_24C335AF8;
  v411 = v105;
  v404 = (uint64_t (**)())off_24C335D90;
  v115 = SHIBYTE(v327.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v327.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v405, v327.__r_.__value_.__l.__data_, v327.__r_.__value_.__l.__size_);
  else
    v405 = v327;
  v406 = v104;
  v404 = off_24C335AF8;
  v407 = v103;
  v400 = (uint64_t (**)())off_24C335D90;
  v113 = SHIBYTE(v323.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v323.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v401, v323.__r_.__value_.__l.__data_, v323.__r_.__value_.__l.__size_);
  else
    v401 = v323;
  v402 = v102;
  v400 = off_24C335AF8;
  v403 = v101;
  v395 = (uint64_t (**)())off_24C335D90;
  v52 = SHIBYTE(v318.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v318.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v396, v318.__r_.__value_.__l.__data_, v318.__r_.__value_.__l.__size_);
  else
    v396 = v318;
  v395 = off_24C335AD8;
  v398 = v320;
  v397 = v100;
  v399 = v321;
  v391 = (uint64_t (**)())off_24C335D90;
  v53 = SHIBYTE(v314.__r_.__value_.__r.__words[2]);
  v111 = v52;
  if (SHIBYTE(v314.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v392, v314.__r_.__value_.__l.__data_, v314.__r_.__value_.__l.__size_);
  else
    v392 = v314;
  v393 = v99;
  v391 = off_24C335AF8;
  v394 = v98;
  v387 = (uint64_t (**)())off_24C335D90;
  v54 = SHIBYTE(v310.__r_.__value_.__r.__words[2]);
  v88 = v50;
  if (SHIBYTE(v310.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v388, v310.__r_.__value_.__l.__data_, v310.__r_.__value_.__l.__size_);
  else
    v388 = v310;
  v389 = v97;
  v387 = off_24C335AF8;
  v390 = v96;
  v383 = (uint64_t (**)())off_24C335D90;
  v55 = SHIBYTE(v306.__r_.__value_.__r.__words[2]);
  v109 = v51;
  if (SHIBYTE(v306.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v384, v306.__r_.__value_.__l.__data_, v306.__r_.__value_.__l.__size_);
  else
    v384 = v306;
  v385 = v95;
  v383 = off_24C335AF8;
  v386 = v94;
  v379 = (uint64_t (**)())off_24C335D90;
  v56 = SHIBYTE(v302.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v302.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v380, v302.__r_.__value_.__l.__data_, v302.__r_.__value_.__l.__size_);
  else
    v380 = v302;
  v381 = v93;
  v379 = off_24C335AF8;
  v382 = v92;
  v375 = (uint64_t (**)())off_24C335D90;
  v57 = SHIBYTE(v298.__r_.__value_.__r.__words[2]);
  v86 = v49;
  if (SHIBYTE(v298.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v376, v298.__r_.__value_.__l.__data_, v298.__r_.__value_.__l.__size_);
  else
    v376 = v298;
  v377 = v91;
  v375 = off_24C335AF8;
  v378 = v90;
  v370 = (uint64_t (**)())off_24C335D90;
  v58 = SHIBYTE(v293.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v293.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&__p, v293.__r_.__value_.__l.__data_, v293.__r_.__value_.__l.__size_);
  else
    __p = v293;
  v370 = off_24C335B18;
  v373 = v295;
  v372 = v89;
  v374 = v296;
  mediaplatform::DatabaseColumnTuple<4ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<double>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>>::DatabaseColumnTuple(v124, (uint64_t)&v439, (uint64_t)&v435, (uint64_t)&v431, (uint64_t)&v426, (uint64_t)&v421, (uint64_t)&v416, (uint64_t)&v412, (uint64_t)&v408, (uint64_t)&v404, (uint64_t)&v400, (uint64_t)&v395, (uint64_t)&v391, (uint64_t)&v387, (uint64_t)&v383, (uint64_t)&v379, (uint64_t)&v375, (uint64_t)&v370);
  v370 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v375 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v376.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v376.__r_.__value_.__l.__data_);
  v379 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v380.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v380.__r_.__value_.__l.__data_);
  v383 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v384.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v384.__r_.__value_.__l.__data_);
  v387 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v388.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v388.__r_.__value_.__l.__data_);
  v391 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v392.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v392.__r_.__value_.__l.__data_);
  v395 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v396.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v396.__r_.__value_.__l.__data_);
  v400 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v401.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v401.__r_.__value_.__l.__data_);
  v404 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v405.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v405.__r_.__value_.__l.__data_);
  v408 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v409.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v409.__r_.__value_.__l.__data_);
  v412 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v413.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v413.__r_.__value_.__l.__data_);
  v416 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v417.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v417.__r_.__value_.__l.__data_);
  v421 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v422.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v422.__r_.__value_.__l.__data_);
  v426 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v427.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v427.__r_.__value_.__l.__data_);
  v431 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v432.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v432.__r_.__value_.__l.__data_);
  v435 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v436.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v436.__r_.__value_.__l.__data_);
  v439 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v440.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v440.__r_.__value_.__l.__data_);
  *(_QWORD *)(v124 + 816) = off_24C335D90;
  v59 = (std::string *)(v124 + 824);
  if (SHIBYTE(v366.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v59, v366.__r_.__value_.__l.__data_, v366.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v59->__r_.__value_.__l.__data_ = *(_OWORD *)&v366.__r_.__value_.__l.__data_;
    *(_QWORD *)(v124 + 840) = *((_QWORD *)&v366.__r_.__value_.__l + 2);
  }
  *(_DWORD *)(v124 + 848) = v367;
  *(_QWORD *)(v124 + 816) = &off_24C335AB8;
  *(_BYTE *)(v124 + 852) = v368;
  v60 = (std::string *)(v124 + 856);
  if (SHIBYTE(v369.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v60, v369.__r_.__value_.__l.__data_, v369.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v60->__r_.__value_.__l.__data_ = *(_OWORD *)&v369.__r_.__value_.__l.__data_;
    *(_QWORD *)(v124 + 872) = *((_QWORD *)&v369.__r_.__value_.__l + 2);
  }
  v292 = (uint64_t (**)())off_24C335D90;
  if (v58 < 0)
    operator delete(v293.__r_.__value_.__l.__data_);
  v297 = (uint64_t (**)())off_24C335D90;
  if (v57 < 0)
    operator delete(v298.__r_.__value_.__l.__data_);
  v301 = (uint64_t (**)())off_24C335D90;
  if (v56 < 0)
    operator delete(v302.__r_.__value_.__l.__data_);
  v305 = (uint64_t (**)())off_24C335D90;
  if (v55 < 0)
    operator delete(v306.__r_.__value_.__l.__data_);
  v309 = (uint64_t (**)())off_24C335D90;
  if (v54 < 0)
    operator delete(v310.__r_.__value_.__l.__data_);
  v313 = (uint64_t (**)())off_24C335D90;
  if (v53 < 0)
    operator delete(v314.__r_.__value_.__l.__data_);
  v317 = (uint64_t (**)())off_24C335D90;
  if (v111 < 0)
    operator delete(v318.__r_.__value_.__l.__data_);
  v322 = (uint64_t (**)())off_24C335D90;
  if (v113 < 0)
    operator delete(v323.__r_.__value_.__l.__data_);
  v326 = (uint64_t (**)())off_24C335D90;
  if (v115 < 0)
    operator delete(v327.__r_.__value_.__l.__data_);
  v330 = (uint64_t (**)())off_24C335D90;
  if (v109 < 0)
    operator delete(v331.__r_.__value_.__l.__data_);
  v334 = (uint64_t (**)())off_24C335D90;
  if (v88 < 0)
    operator delete(v335.__r_.__value_.__l.__data_);
  v338 = (uint64_t (**)())off_24C335D90;
  if (v86 < 0)
    operator delete(v339.__r_.__value_.__l.__data_);
  v343 = (uint64_t (**)())off_24C335D90;
  if (v117 < 0)
    operator delete(v344.__r_.__value_.__l.__data_);
  v348 = (uint64_t (**)())off_24C335D90;
  if (v119 < 0)
    operator delete(v349.__r_.__value_.__l.__data_);
  v353 = (uint64_t (**)())off_24C335D90;
  if (v121 < 0)
    operator delete(v354.__r_.__value_.__l.__data_);
  v357 = (uint64_t (**)())off_24C335D90;
  if (v123 < 0)
    operator delete(v358.__r_.__value_.__l.__data_);
  v361 = (uint64_t (**)())off_24C335D90;
  if (v69 < 0)
    operator delete(v362.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v365);
  *(_QWORD *)(v124 + 880) = off_24C335D90;
  v61 = (std::string *)(v124 + 888);
  v62 = SHIBYTE(v289.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v289.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v61, v289.__r_.__value_.__l.__data_, v289.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v61->__r_.__value_.__l.__data_ = *(_OWORD *)&v289.__r_.__value_.__l.__data_;
    *(_QWORD *)(v124 + 904) = *((_QWORD *)&v289.__r_.__value_.__l + 2);
  }
  *(_DWORD *)(v124 + 912) = v290;
  *(_QWORD *)(v124 + 880) = off_24C335AF8;
  *(_QWORD *)(v124 + 916) = v291;
  v210 = (uint64_t (**)())off_24C335D90;
  if (v83 < 0)
    operator delete(v211.__r_.__value_.__l.__data_);
  v215 = (uint64_t (**)())off_24C335D90;
  if (v70 < 0)
    operator delete(v216.__r_.__value_.__l.__data_);
  v219 = (uint64_t (**)())off_24C335D90;
  if (v78 < 0)
    operator delete(v220.__r_.__value_.__l.__data_);
  v223 = (uint64_t (**)())off_24C335D90;
  if (v79 < 0)
    operator delete(v224.__r_.__value_.__l.__data_);
  v227 = (uint64_t (**)())off_24C335D90;
  if (v71 < 0)
    operator delete(v228.__r_.__value_.__l.__data_);
  v231 = (uint64_t (**)())off_24C335D90;
  if (v72 < 0)
    operator delete(v232.__r_.__value_.__l.__data_);
  v235 = (uint64_t (**)())off_24C335D90;
  if (v80 < 0)
    operator delete(v236.__r_.__value_.__l.__data_);
  v240 = (uint64_t (**)())off_24C335D90;
  if (v82 < 0)
    operator delete(v241.__r_.__value_.__l.__data_);
  v244 = (uint64_t (**)())off_24C335D90;
  if (v73 < 0)
    operator delete(v245.__r_.__value_.__l.__data_);
  v248 = (uint64_t (**)())off_24C335D90;
  if (v74 < 0)
    operator delete(v249.__r_.__value_.__l.__data_);
  v252 = (uint64_t (**)())off_24C335D90;
  if (v47 < 0)
    operator delete(v253.__r_.__value_.__l.__data_);
  v256 = (uint64_t (**)())off_24C335D90;
  if (v76 < 0)
    operator delete(v257.__r_.__value_.__l.__data_);
  v261 = (uint64_t (**)())off_24C335D90;
  if (v77 < 0)
    operator delete(v262.__r_.__value_.__l.__data_);
  v266 = (uint64_t (**)())off_24C335D90;
  if (v75 < 0)
    operator delete(v267.__r_.__value_.__l.__data_);
  v271 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v272.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v272.__r_.__value_.__l.__data_);
  if (SHIBYTE(v276.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v276.__r_.__value_.__l.__data_);
  if (SHIBYTE(v280.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v280.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v283);
  if (v62 < 0)
    operator delete(v289.__r_.__value_.__l.__data_);
  *(_QWORD *)(v124 + 928) = off_24C335D90;
  v63 = (std::string *)(v124 + 936);
  v64 = SHIBYTE(v207.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v207.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v63, v207.__r_.__value_.__l.__data_, v207.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v63->__r_.__value_.__l.__data_ = *(_OWORD *)&v207.__r_.__value_.__l.__data_;
    *(_QWORD *)(v124 + 952) = *((_QWORD *)&v207.__r_.__value_.__l + 2);
  }
  *(_DWORD *)(v124 + 960) = v208;
  *(_QWORD *)(v124 + 928) = off_24C335AF8;
  *(_QWORD *)(v124 + 964) = v209;
  if (SHIBYTE(v125.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v125.__r_.__value_.__l.__data_);
  if (SHIBYTE(v130.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v130.__r_.__value_.__l.__data_);
  if (SHIBYTE(v134.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v134.__r_.__value_.__l.__data_);
  if (SHIBYTE(v138.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v138.__r_.__value_.__l.__data_);
  if (SHIBYTE(v142.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v142.__r_.__value_.__l.__data_);
  if (SHIBYTE(v146.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v146.__r_.__value_.__l.__data_);
  if (SHIBYTE(v150.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v150.__r_.__value_.__l.__data_);
  if (SHIBYTE(v155.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v155.__r_.__value_.__l.__data_);
  if (SHIBYTE(v159.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v159.__r_.__value_.__l.__data_);
  if (SHIBYTE(v163.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v163.__r_.__value_.__l.__data_);
  if (SHIBYTE(v167.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v167.__r_.__value_.__l.__data_);
  if (SHIBYTE(v171.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v171.__r_.__value_.__l.__data_);
  if (SHIBYTE(v176.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v176.__r_.__value_.__l.__data_);
  if (SHIBYTE(v181.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v181.__r_.__value_.__l.__data_);
  if (SHIBYTE(v186.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v186.__r_.__value_.__l.__data_);
  if (SHIBYTE(v190.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v190.__r_.__value_.__l.__data_);
  if (SHIBYTE(v194.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v194.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v197);
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__s.__r_.__value_.__l.__data_);
    if ((v64 & 0x80000000) == 0)
      goto LABEL_384;
  }
  else if ((v64 & 0x80000000) == 0)
  {
    goto LABEL_384;
  }
  operator delete(v207.__r_.__value_.__l.__data_);
LABEL_384:
  *(_QWORD *)(v124 + 976) = off_24C335D90;
  v65 = (std::string *)(v124 + 984);
  if (*(char *)(v81 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v65, *(const std::string::value_type **)(v81 + 8), *(_QWORD *)(v81 + 16));
  }
  else
  {
    v66 = *(_OWORD *)(v81 + 8);
    *(_QWORD *)(v124 + 1000) = *(_QWORD *)(v81 + 24);
    *(_OWORD *)&v65->__r_.__value_.__l.__data_ = v66;
  }
  *(_DWORD *)(v124 + 1008) = *(_DWORD *)(v81 + 32);
  *(_QWORD *)(v124 + 976) = off_24C335B18;
  v67 = *(_QWORD *)(v81 + 36);
  *(_DWORD *)(v124 + 1020) = *(_DWORD *)(v81 + 44);
  *(_QWORD *)(v124 + 1012) = v67;
  return v124;
}

void sub_20A6B8A48(_Unwind_Exception *a1)
{
  uint64_t v1;

  mediaplatform::DatabaseColumnTuple<1ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<double>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>>::~DatabaseColumnTuple(v1);
  _Unwind_Resume(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<0ul,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<double>,mediaplatform::DatabaseColumn<double>,mediaplatform::DatabaseColumn<double>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::DatabaseColumnTuple(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  int v39;
  int v40;
  int v41;
  int v42;
  int v43;
  int v44;
  int v45;
  int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  int v52;
  int v53;
  int v54;
  int v55;
  int v56;
  int v57;
  int v58;
  int v59;
  int v60;
  int v61;
  int v62;
  int v63;
  int v64;
  int v65;
  int v66;
  int v67;
  std::string *v68;
  int v69;
  std::string *v70;
  int v71;
  std::string *v72;
  int v73;
  std::string *v74;
  __int128 v75;
  uint64_t v76;
  int v78;
  int v79;
  int v80;
  int v81;
  int v82;
  int v83;
  int v84;
  int v85;
  int v86;
  int v87;
  int v88;
  int v89;
  uint64_t v90;
  int v91;
  int v92;
  int v93;
  int v94;
  uint64_t v95;
  int v96;
  uint64_t v97;
  int v98;
  int v99;
  int v100;
  int v101;
  uint64_t v102;
  int v103;
  uint64_t v104;
  int v105;
  int v106;
  int v107;
  int v108;
  int v109;
  uint64_t v110;
  int v111;
  int v112;
  uint64_t v113;
  int v114;
  int v115;
  uint64_t v116;
  int v117;
  int v118;
  int v119;
  std::string v120;
  int v121;
  uint64_t v122;
  uint64_t (**v123)();
  std::string v124;
  int v125;
  uint64_t v126;
  uint64_t (**v127)();
  std::string v128;
  int v129;
  uint64_t v130;
  int v131;
  uint64_t (**v132)();
  std::string v133;
  int v134;
  uint64_t v135;
  int v136;
  uint64_t (**v137)();
  std::string v138;
  int v139;
  uint64_t v140;
  int v141;
  uint64_t (**v142)();
  std::string v143;
  int v144;
  uint64_t v145;
  uint64_t (**v146)();
  std::string v147;
  int v148;
  uint64_t v149;
  uint64_t (**v150)();
  std::string v151;
  int v152;
  uint64_t v153;
  int v154;
  uint64_t (**v155)();
  std::string v156;
  int v157;
  uint64_t v158;
  int v159;
  uint64_t (**v160)();
  std::string v161;
  int v162;
  uint64_t v163;
  int v164;
  uint64_t (**v165)();
  std::string v166;
  int v167;
  uint64_t v168;
  int v169;
  uint64_t (**v170)();
  std::string v171;
  int v172;
  char v173;
  std::string v174;
  uint64_t (**v175)();
  std::string v176;
  int v177;
  char v178;
  std::string v179;
  uint64_t (**v180)();
  std::string v181;
  int v182;
  uint64_t v183;
  int v184;
  uint64_t (**v185)();
  std::string v186;
  int v187;
  char v188;
  std::string v189;
  uint64_t (**v190)();
  std::string v191;
  int v192;
  uint64_t v193;
  uint64_t (**v194)();
  std::string v195;
  int v196;
  uint64_t v197;
  uint64_t (**v198)();
  std::string v199;
  int v200;
  uint64_t v201;
  uint64_t (**v202)();
  std::string __s;
  int v204;
  uint64_t v205;
  uint64_t (**v206)();
  std::string v207;
  int v208;
  uint64_t v209;
  uint64_t (**v210)();
  std::string v211;
  int v212;
  uint64_t v213;
  uint64_t (**v214)();
  std::string v215;
  int v216;
  uint64_t v217;
  uint64_t (**v218)();
  std::string v219;
  int v220;
  uint64_t v221;
  int v222;
  uint64_t (**v223)();
  std::string v224;
  int v225;
  uint64_t v226;
  int v227;
  uint64_t (**v228)();
  std::string v229;
  int v230;
  uint64_t v231;
  int v232;
  uint64_t (**v233)();
  std::string v234;
  int v235;
  uint64_t v236;
  uint64_t (**v237)();
  std::string v238;
  int v239;
  uint64_t v240;
  uint64_t (**v241)();
  std::string v242;
  int v243;
  uint64_t v244;
  int v245;
  uint64_t (**v246)();
  std::string v247;
  int v248;
  uint64_t v249;
  int v250;
  uint64_t (**v251)();
  std::string v252;
  int v253;
  uint64_t v254;
  int v255;
  uint64_t (**v256)();
  std::string v257;
  int v258;
  uint64_t v259;
  int v260;
  uint64_t (**v261)();
  std::string v262;
  int v263;
  char v264;
  std::string v265;
  uint64_t (**v266)();
  std::string v267;
  int v268;
  char v269;
  std::string v270;
  uint64_t (**v271)();
  std::string v272;
  int v273;
  uint64_t v274;
  int v275;
  uint64_t (**v276)();
  std::string v277;
  int v278;
  char v279;
  std::string v280;
  uint64_t (**v281)();
  std::string v282;
  int v283;
  uint64_t v284;
  uint64_t (**v285)();
  std::string v286;
  int v287;
  uint64_t v288;
  uint64_t (**v289)();
  std::string v290;
  int v291;
  uint64_t v292;
  uint64_t (**v293)();
  std::string v294;
  int v295;
  uint64_t v296;
  uint64_t (**v297)();
  std::string v298;
  int v299;
  uint64_t v300;
  uint64_t (**v301)();
  std::string v302;
  int v303;
  uint64_t v304;
  uint64_t (**v305)();
  std::string v306;
  int v307;
  uint64_t v308;
  int v309;
  uint64_t (**v310)();
  std::string v311;
  int v312;
  uint64_t v313;
  int v314;
  uint64_t (**v315)();
  std::string v316;
  int v317;
  uint64_t v318;
  int v319;
  uint64_t (**v320)();
  std::string v321;
  int v322;
  uint64_t v323;
  uint64_t (**v324)();
  std::string v325;
  int v326;
  uint64_t v327;
  uint64_t (**v328)();
  std::string v329;
  int v330;
  uint64_t v331;
  int v332;
  uint64_t (**v333)();
  std::string v334;
  int v335;
  uint64_t v336;
  int v337;
  uint64_t (**v338)();
  std::string v339;
  int v340;
  uint64_t v341;
  int v342;
  uint64_t (**v343)();
  std::string v344;
  int v345;
  uint64_t v346;
  int v347;
  uint64_t (**v348)();
  std::string v349;
  int v350;
  char v351;
  std::string v352;
  uint64_t (**v353)();
  std::string v354;
  int v355;
  char v356;
  std::string v357;
  uint64_t (**v358)();
  std::string v359;
  int v360;
  uint64_t v361;
  int v362;
  uint64_t (**v363)();
  std::string v364;
  int v365;
  char v366;
  std::string v367;
  uint64_t (**v368)();
  std::string v369;
  int v370;
  uint64_t v371;
  uint64_t (**v372)();
  std::string v373;
  int v374;
  uint64_t v375;
  uint64_t (**v376)();
  std::string v377;
  int v378;
  uint64_t v379;
  uint64_t (**v380)();
  std::string __p;
  int v382;
  uint64_t v383;
  uint64_t (**v384)();
  std::string v385;
  int v386;
  uint64_t v387;
  uint64_t (**v388)();
  std::string v389;
  int v390;
  uint64_t v391;
  int v392;
  uint64_t (**v393)();
  std::string v394;
  int v395;
  uint64_t v396;
  int v397;
  uint64_t (**v398)();
  std::string v399;
  int v400;
  uint64_t v401;
  int v402;
  uint64_t (**v403)();
  std::string v404;
  int v405;
  uint64_t v406;
  uint64_t (**v407)();
  std::string v408;
  int v409;
  uint64_t v410;
  uint64_t (**v411)();
  std::string v412;
  int v413;
  uint64_t v414;
  int v415;
  uint64_t (**v416)();
  std::string v417;
  int v418;
  uint64_t v419;
  int v420;
  uint64_t (**v421)();
  std::string v422;
  int v423;
  uint64_t v424;
  int v425;
  uint64_t (**v426)();
  std::string v427;
  int v428;
  uint64_t v429;
  int v430;
  uint64_t (**v431)();
  std::string v432;
  int v433;
  char v434;
  std::string v435;
  uint64_t (**v436)();
  std::string v437;
  int v438;
  char v439;
  std::string v440;
  uint64_t (**v441)();
  std::string v442;
  int v443;
  uint64_t v444;
  int v445;
  uint64_t (**v446)();
  std::string v447;
  int v448;
  char v449;
  std::string v450;
  uint64_t (**v451)();
  std::string v452;
  int v453;
  uint64_t v454;
  uint64_t (**v455)();
  std::string v456;
  int v457;
  uint64_t v458;

  v22 = MEMORY[0x24BDAC7A8](a1);
  v25 = v24;
  v27 = v26;
  v29 = v28;
  v31 = v30;
  v33 = v32;
  v34 = v23;
  v90 = v35;
  v36 = v22;
  if (*(char *)(v23 + 31) < 0)
    std::string::__init_copy_ctor_external(&v207, *(const std::string::value_type **)(v23 + 8), *(_QWORD *)(v23 + 16));
  else
    v207 = *(std::string *)(v23 + 8);
  v208 = *(_DWORD *)(v34 + 32);
  v206 = off_24C335AF8;
  v209 = *(_QWORD *)(v34 + 36);
  if (*(char *)(v33 + 31) < 0)
    std::string::__init_copy_ctor_external(&__s, *(const std::string::value_type **)(v33 + 8), *(_QWORD *)(v33 + 16));
  else
    __s = *(std::string *)(v33 + 8);
  v37 = *(_DWORD *)(v33 + 32);
  v204 = v37;
  v202 = off_24C335AF8;
  v38 = *(_QWORD *)(v33 + 36);
  v205 = v38;
  if (*(char *)(v31 + 31) < 0)
    std::string::__init_copy_ctor_external(&v199, *(const std::string::value_type **)(v31 + 8), *(_QWORD *)(v31 + 16));
  else
    v199 = *(std::string *)(v31 + 8);
  v94 = *(_DWORD *)(v31 + 32);
  v200 = v94;
  v198 = off_24C335AF8;
  v110 = *(_QWORD *)(v31 + 36);
  v201 = v110;
  if (*(char *)(v29 + 31) < 0)
    std::string::__init_copy_ctor_external(&v195, *(const std::string::value_type **)(v29 + 8), *(_QWORD *)(v29 + 16));
  else
    v195 = *(std::string *)(v29 + 8);
  v118 = *(_DWORD *)(v29 + 32);
  v196 = v118;
  v194 = off_24C335AF8;
  v116 = *(_QWORD *)(v29 + 36);
  v197 = v116;
  if (*(char *)(v27 + 31) < 0)
    std::string::__init_copy_ctor_external(&v191, *(const std::string::value_type **)(v27 + 8), *(_QWORD *)(v27 + 16));
  else
    v191 = *(std::string *)(v27 + 8);
  v114 = *(_DWORD *)(v27 + 32);
  v192 = v114;
  v190 = off_24C335AF8;
  v113 = *(_QWORD *)(v27 + 36);
  v193 = v113;
  v185 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(v25 + 31) < 0)
    std::string::__init_copy_ctor_external(&v186, *(const std::string::value_type **)(v25 + 8), *(_QWORD *)(v25 + 16));
  else
    v186 = *(std::string *)(v25 + 8);
  v187 = *(_DWORD *)(v25 + 32);
  v185 = &off_24C335AB8;
  v188 = *(_BYTE *)(v25 + 36);
  if (*(char *)(v25 + 63) < 0)
    std::string::__init_copy_ctor_external(&v189, *(const std::string::value_type **)(v25 + 40), *(_QWORD *)(v25 + 48));
  else
    v189 = *(std::string *)(v25 + 40);
  if (*(char *)(a9 + 31) < 0)
    std::string::__init_copy_ctor_external(&v181, *(const std::string::value_type **)(a9 + 8), *(_QWORD *)(a9 + 16));
  else
    v181 = *(std::string *)(a9 + 8);
  v39 = *(_DWORD *)(a9 + 32);
  v180 = off_24C335B18;
  v183 = *(_QWORD *)(a9 + 36);
  v40 = *(_DWORD *)(a9 + 44);
  v111 = v39;
  v182 = v39;
  v184 = v40;
  v175 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a10 + 31) < 0)
    std::string::__init_copy_ctor_external(&v176, *(const std::string::value_type **)(a10 + 8), *(_QWORD *)(a10 + 16));
  else
    v176 = *(std::string *)(a10 + 8);
  v177 = *(_DWORD *)(a10 + 32);
  v175 = &off_24C335AB8;
  v178 = *(_BYTE *)(a10 + 36);
  if (*(char *)(a10 + 63) < 0)
    std::string::__init_copy_ctor_external(&v179, *(const std::string::value_type **)(a10 + 40), *(_QWORD *)(a10 + 48));
  else
    v179 = *(std::string *)(a10 + 40);
  v170 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a11 + 31) < 0)
    std::string::__init_copy_ctor_external(&v171, *(const std::string::value_type **)(a11 + 8), *(_QWORD *)(a11 + 16));
  else
    v171 = *(std::string *)(a11 + 8);
  v172 = *(_DWORD *)(a11 + 32);
  v170 = &off_24C335AB8;
  v173 = *(_BYTE *)(a11 + 36);
  if (*(char *)(a11 + 63) < 0)
    std::string::__init_copy_ctor_external(&v174, *(const std::string::value_type **)(a11 + 40), *(_QWORD *)(a11 + 48));
  else
    v174 = *(std::string *)(a11 + 40);
  if (*(char *)(a12 + 31) < 0)
    std::string::__init_copy_ctor_external(&v166, *(const std::string::value_type **)(a12 + 8), *(_QWORD *)(a12 + 16));
  else
    v166 = *(std::string *)(a12 + 8);
  v41 = *(_DWORD *)(a12 + 32);
  v165 = off_24C335B18;
  v168 = *(_QWORD *)(a12 + 36);
  v42 = *(_DWORD *)(a12 + 44);
  v109 = v41;
  v167 = v41;
  v169 = v42;
  if (*(char *)(a13 + 31) < 0)
    std::string::__init_copy_ctor_external(&v161, *(const std::string::value_type **)(a13 + 8), *(_QWORD *)(a13 + 16));
  else
    v161 = *(std::string *)(a13 + 8);
  v43 = *(_DWORD *)(a13 + 32);
  v160 = off_24C335B18;
  v163 = *(_QWORD *)(a13 + 36);
  v44 = *(_DWORD *)(a13 + 44);
  v108 = v43;
  v162 = v43;
  v164 = v44;
  if (*(char *)(a14 + 31) < 0)
    std::string::__init_copy_ctor_external(&v156, *(const std::string::value_type **)(a14 + 8), *(_QWORD *)(a14 + 16));
  else
    v156 = *(std::string *)(a14 + 8);
  v45 = *(_DWORD *)(a14 + 32);
  v155 = off_24C335B18;
  v158 = *(_QWORD *)(a14 + 36);
  v46 = *(_DWORD *)(a14 + 44);
  v107 = v45;
  v157 = v45;
  v159 = v46;
  if (*(char *)(a15 + 31) < 0)
    std::string::__init_copy_ctor_external(&v151, *(const std::string::value_type **)(a15 + 8), *(_QWORD *)(a15 + 16));
  else
    v151 = *(std::string *)(a15 + 8);
  v47 = *(_DWORD *)(a15 + 32);
  v150 = off_24C335B18;
  v153 = *(_QWORD *)(a15 + 36);
  v48 = *(_DWORD *)(a15 + 44);
  v106 = v47;
  v152 = v47;
  v154 = v48;
  if (*(char *)(a16 + 31) < 0)
    std::string::__init_copy_ctor_external(&v147, *(const std::string::value_type **)(a16 + 8), *(_QWORD *)(a16 + 16));
  else
    v147 = *(std::string *)(a16 + 8);
  v105 = *(_DWORD *)(a16 + 32);
  v148 = v105;
  v146 = off_24C335AF8;
  v104 = *(_QWORD *)(a16 + 36);
  v149 = v104;
  if (*(char *)(a17 + 31) < 0)
    std::string::__init_copy_ctor_external(&v143, *(const std::string::value_type **)(a17 + 8), *(_QWORD *)(a17 + 16));
  else
    v143 = *(std::string *)(a17 + 8);
  v103 = *(_DWORD *)(a17 + 32);
  v144 = v103;
  v142 = off_24C335AF8;
  v102 = *(_QWORD *)(a17 + 36);
  v145 = v102;
  if (*(char *)(a18 + 31) < 0)
    std::string::__init_copy_ctor_external(&v138, *(const std::string::value_type **)(a18 + 8), *(_QWORD *)(a18 + 16));
  else
    v138 = *(std::string *)(a18 + 8);
  v49 = *(_DWORD *)(a18 + 32);
  v137 = off_24C335AD8;
  v140 = *(_QWORD *)(a18 + 36);
  v50 = *(_DWORD *)(a18 + 44);
  v101 = v49;
  v139 = v49;
  v141 = v50;
  if (*(char *)(a19 + 31) < 0)
    std::string::__init_copy_ctor_external(&v133, *(const std::string::value_type **)(a19 + 8), *(_QWORD *)(a19 + 16));
  else
    v133 = *(std::string *)(a19 + 8);
  v51 = *(_DWORD *)(a19 + 32);
  v132 = off_24C335AD8;
  v135 = *(_QWORD *)(a19 + 36);
  v52 = *(_DWORD *)(a19 + 44);
  v100 = v51;
  v134 = v51;
  v136 = v52;
  if (*(char *)(a20 + 31) < 0)
    std::string::__init_copy_ctor_external(&v128, *(const std::string::value_type **)(a20 + 8), *(_QWORD *)(a20 + 16));
  else
    v128 = *(std::string *)(a20 + 8);
  v53 = *(_DWORD *)(a20 + 32);
  v127 = off_24C335AD8;
  v130 = *(_QWORD *)(a20 + 36);
  v54 = *(_DWORD *)(a20 + 44);
  v99 = v53;
  v129 = v53;
  v131 = v54;
  if (*(char *)(a21 + 31) < 0)
    std::string::__init_copy_ctor_external(&v124, *(const std::string::value_type **)(a21 + 8), *(_QWORD *)(a21 + 16));
  else
    v124 = *(std::string *)(a21 + 8);
  v98 = *(_DWORD *)(a21 + 32);
  v125 = v98;
  v123 = off_24C335AF8;
  v97 = *(_QWORD *)(a21 + 36);
  v126 = v97;
  if (*(char *)(a22 + 31) < 0)
    std::string::__init_copy_ctor_external(&v120, *(const std::string::value_type **)(a22 + 8), *(_QWORD *)(a22 + 16));
  else
    v120 = *(std::string *)(a22 + 8);
  v96 = *(_DWORD *)(a22 + 32);
  v121 = v96;
  v95 = *(_QWORD *)(a22 + 36);
  v122 = v95;
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v294, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
  else
    v294 = __s;
  v295 = v37;
  v293 = off_24C335AF8;
  v296 = v38;
  if (SHIBYTE(v199.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v290, v199.__r_.__value_.__l.__data_, v199.__r_.__value_.__l.__size_);
  else
    v290 = v199;
  v291 = v94;
  v289 = off_24C335AF8;
  v292 = v110;
  if (SHIBYTE(v195.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v286, v195.__r_.__value_.__l.__data_, v195.__r_.__value_.__l.__size_);
  else
    v286 = v195;
  v287 = v118;
  v285 = off_24C335AF8;
  v288 = v116;
  if (SHIBYTE(v191.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v282, v191.__r_.__value_.__l.__data_, v191.__r_.__value_.__l.__size_);
  else
    v282 = v191;
  v283 = v114;
  v281 = off_24C335AF8;
  v284 = v113;
  v276 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v186.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v277, v186.__r_.__value_.__l.__data_, v186.__r_.__value_.__l.__size_);
  else
    v277 = v186;
  v278 = v187;
  v276 = &off_24C335AB8;
  v279 = v188;
  if (SHIBYTE(v189.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v280, v189.__r_.__value_.__l.__data_, v189.__r_.__value_.__l.__size_);
  else
    v280 = v189;
  if (SHIBYTE(v181.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v272, v181.__r_.__value_.__l.__data_, v181.__r_.__value_.__l.__size_);
  else
    v272 = v181;
  v271 = off_24C335B18;
  v274 = v183;
  v273 = v111;
  v275 = v184;
  v266 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v176.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v267, v176.__r_.__value_.__l.__data_, v176.__r_.__value_.__l.__size_);
  else
    v267 = v176;
  v268 = v177;
  v266 = &off_24C335AB8;
  v269 = v178;
  if (SHIBYTE(v179.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v270, v179.__r_.__value_.__l.__data_, v179.__r_.__value_.__l.__size_);
  else
    v270 = v179;
  v261 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v171.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v262, v171.__r_.__value_.__l.__data_, v171.__r_.__value_.__l.__size_);
  else
    v262 = v171;
  v263 = v172;
  v261 = &off_24C335AB8;
  v264 = v173;
  if (SHIBYTE(v174.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v265, v174.__r_.__value_.__l.__data_, v174.__r_.__value_.__l.__size_);
  else
    v265 = v174;
  if (SHIBYTE(v166.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v257, v166.__r_.__value_.__l.__data_, v166.__r_.__value_.__l.__size_);
  else
    v257 = v166;
  v256 = off_24C335B18;
  v259 = v168;
  v258 = v109;
  v260 = v169;
  if (SHIBYTE(v161.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v252, v161.__r_.__value_.__l.__data_, v161.__r_.__value_.__l.__size_);
  else
    v252 = v161;
  v251 = off_24C335B18;
  v254 = v163;
  v253 = v108;
  v255 = v164;
  if (SHIBYTE(v156.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v247, v156.__r_.__value_.__l.__data_, v156.__r_.__value_.__l.__size_);
  else
    v247 = v156;
  v246 = off_24C335B18;
  v249 = v158;
  v248 = v107;
  v250 = v159;
  if (SHIBYTE(v151.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v242, v151.__r_.__value_.__l.__data_, v151.__r_.__value_.__l.__size_);
  else
    v242 = v151;
  v241 = off_24C335B18;
  v244 = v153;
  v243 = v106;
  v245 = v154;
  v237 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v147.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v238, v147.__r_.__value_.__l.__data_, v147.__r_.__value_.__l.__size_);
  else
    v238 = v147;
  v239 = v105;
  v237 = off_24C335AF8;
  v240 = v104;
  v233 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v143.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v234, v143.__r_.__value_.__l.__data_, v143.__r_.__value_.__l.__size_);
  else
    v234 = v143;
  v235 = v103;
  v233 = off_24C335AF8;
  v236 = v102;
  v228 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v138.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v229, v138.__r_.__value_.__l.__data_, v138.__r_.__value_.__l.__size_);
  else
    v229 = v138;
  v228 = off_24C335AD8;
  v231 = v140;
  v230 = v101;
  v232 = v141;
  v223 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v133.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v224, v133.__r_.__value_.__l.__data_, v133.__r_.__value_.__l.__size_);
  else
    v224 = v133;
  v223 = off_24C335AD8;
  v226 = v135;
  v225 = v100;
  v227 = v136;
  v218 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v128.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v219, v128.__r_.__value_.__l.__data_, v128.__r_.__value_.__l.__size_);
  else
    v219 = v128;
  v218 = off_24C335AD8;
  v221 = v130;
  v220 = v99;
  v222 = v131;
  v214 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v124.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v215, v124.__r_.__value_.__l.__data_, v124.__r_.__value_.__l.__size_);
  else
    v215 = v124;
  v216 = v98;
  v214 = off_24C335AF8;
  v217 = v97;
  v210 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v120.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v211, v120.__r_.__value_.__l.__data_, v120.__r_.__value_.__l.__size_);
  else
    v211 = v120;
  v212 = v96;
  v210 = off_24C335AF8;
  v213 = v95;
  v376 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v290.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v377, v290.__r_.__value_.__l.__data_, v290.__r_.__value_.__l.__size_);
  else
    v377 = v290;
  v378 = v94;
  v376 = off_24C335AF8;
  v379 = v110;
  v372 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v286.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v373, v286.__r_.__value_.__l.__data_, v286.__r_.__value_.__l.__size_);
  else
    v373 = v286;
  v374 = v118;
  v372 = off_24C335AF8;
  v375 = v116;
  v368 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v282.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v369, v282.__r_.__value_.__l.__data_, v282.__r_.__value_.__l.__size_);
  else
    v369 = v282;
  v370 = v114;
  v368 = off_24C335AF8;
  v371 = v113;
  v363 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v277.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v364, v277.__r_.__value_.__l.__data_, v277.__r_.__value_.__l.__size_);
  else
    v364 = v277;
  v365 = v278;
  v363 = &off_24C335AB8;
  v366 = v279;
  if (SHIBYTE(v280.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v367, v280.__r_.__value_.__l.__data_, v280.__r_.__value_.__l.__size_);
  else
    v367 = v280;
  v358 = (uint64_t (**)())off_24C335D90;
  v55 = SHIBYTE(v272.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v272.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v359, v272.__r_.__value_.__l.__data_, v272.__r_.__value_.__l.__size_);
  else
    v359 = v272;
  v358 = off_24C335B18;
  v361 = v274;
  v360 = v111;
  v362 = v275;
  v353 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v267.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v354, v267.__r_.__value_.__l.__data_, v267.__r_.__value_.__l.__size_);
  else
    v354 = v267;
  v355 = v268;
  v353 = &off_24C335AB8;
  v356 = v269;
  if (SHIBYTE(v270.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v357, v270.__r_.__value_.__l.__data_, v270.__r_.__value_.__l.__size_);
  else
    v357 = v270;
  v348 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v262.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v349, v262.__r_.__value_.__l.__data_, v262.__r_.__value_.__l.__size_);
  else
    v349 = v262;
  v350 = v263;
  v348 = &off_24C335AB8;
  v351 = v264;
  if (SHIBYTE(v265.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v352, v265.__r_.__value_.__l.__data_, v265.__r_.__value_.__l.__size_);
  else
    v352 = v265;
  v343 = (uint64_t (**)())off_24C335D90;
  v91 = SHIBYTE(v257.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v257.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v344, v257.__r_.__value_.__l.__data_, v257.__r_.__value_.__l.__size_);
  else
    v344 = v257;
  v343 = off_24C335B18;
  v346 = v259;
  v345 = v109;
  v347 = v260;
  v338 = (uint64_t (**)())off_24C335D90;
  v87 = SHIBYTE(v252.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v252.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v339, v252.__r_.__value_.__l.__data_, v252.__r_.__value_.__l.__size_);
  else
    v339 = v252;
  v338 = off_24C335B18;
  v341 = v254;
  v340 = v108;
  v342 = v255;
  v333 = (uint64_t (**)())off_24C335D90;
  v86 = SHIBYTE(v247.__r_.__value_.__r.__words[2]);
  v88 = v55;
  if (SHIBYTE(v247.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v334, v247.__r_.__value_.__l.__data_, v247.__r_.__value_.__l.__size_);
  else
    v334 = v247;
  v333 = off_24C335B18;
  v336 = v249;
  v335 = v107;
  v337 = v250;
  v328 = (uint64_t (**)())off_24C335D90;
  v85 = SHIBYTE(v242.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v242.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v329, v242.__r_.__value_.__l.__data_, v242.__r_.__value_.__l.__size_);
  else
    v329 = v242;
  v328 = off_24C335B18;
  v331 = v244;
  v330 = v106;
  v332 = v245;
  v324 = (uint64_t (**)())off_24C335D90;
  v84 = SHIBYTE(v238.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v238.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v325, v238.__r_.__value_.__l.__data_, v238.__r_.__value_.__l.__size_);
  else
    v325 = v238;
  v326 = v105;
  v324 = off_24C335AF8;
  v327 = v104;
  v320 = (uint64_t (**)())off_24C335D90;
  v83 = SHIBYTE(v234.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v234.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v321, v234.__r_.__value_.__l.__data_, v234.__r_.__value_.__l.__size_);
  else
    v321 = v234;
  v322 = v103;
  v320 = off_24C335AF8;
  v323 = v102;
  v315 = (uint64_t (**)())off_24C335D90;
  v92 = SHIBYTE(v229.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v229.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v316, v229.__r_.__value_.__l.__data_, v229.__r_.__value_.__l.__size_);
  else
    v316 = v229;
  v315 = off_24C335AD8;
  v318 = v231;
  v317 = v101;
  v319 = v232;
  v310 = (uint64_t (**)())off_24C335D90;
  v82 = SHIBYTE(v224.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v224.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v311, v224.__r_.__value_.__l.__data_, v224.__r_.__value_.__l.__size_);
  else
    v311 = v224;
  v310 = off_24C335AD8;
  v313 = v226;
  v312 = v100;
  v314 = v227;
  v305 = (uint64_t (**)())off_24C335D90;
  v81 = SHIBYTE(v219.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v219.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v306, v219.__r_.__value_.__l.__data_, v219.__r_.__value_.__l.__size_);
  else
    v306 = v219;
  v305 = off_24C335AD8;
  v308 = v221;
  v307 = v99;
  v309 = v222;
  v301 = (uint64_t (**)())off_24C335D90;
  v80 = SHIBYTE(v215.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v215.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v302, v215.__r_.__value_.__l.__data_, v215.__r_.__value_.__l.__size_);
  else
    v302 = v215;
  v303 = v98;
  v301 = off_24C335AF8;
  v304 = v97;
  v297 = (uint64_t (**)())off_24C335D90;
  v79 = SHIBYTE(v211.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v211.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v298, v211.__r_.__value_.__l.__data_, v211.__r_.__value_.__l.__size_);
  else
    v298 = v211;
  v299 = v96;
  v297 = off_24C335AF8;
  v300 = v95;
  v455 = (uint64_t (**)())off_24C335D90;
  v56 = SHIBYTE(v373.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v373.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v456, v373.__r_.__value_.__l.__data_, v373.__r_.__value_.__l.__size_);
  else
    v456 = v373;
  v457 = v118;
  v455 = off_24C335AF8;
  v458 = v116;
  v451 = (uint64_t (**)())off_24C335D90;
  v119 = SHIBYTE(v369.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v369.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v452, v369.__r_.__value_.__l.__data_, v369.__r_.__value_.__l.__size_);
  else
    v452 = v369;
  v453 = v114;
  v451 = off_24C335AF8;
  v454 = v113;
  v446 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v364.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v447, v364.__r_.__value_.__l.__data_, v364.__r_.__value_.__l.__size_);
  else
    v447 = v364;
  v448 = v365;
  v446 = &off_24C335AB8;
  v449 = v366;
  if (SHIBYTE(v367.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v450, v367.__r_.__value_.__l.__data_, v367.__r_.__value_.__l.__size_);
  else
    v450 = v367;
  v441 = (uint64_t (**)())off_24C335D90;
  v57 = SHIBYTE(v359.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v359.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v442, v359.__r_.__value_.__l.__data_, v359.__r_.__value_.__l.__size_);
  else
    v442 = v359;
  v441 = off_24C335B18;
  v444 = v361;
  v443 = v111;
  v445 = v362;
  v436 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v354.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v437, v354.__r_.__value_.__l.__data_, v354.__r_.__value_.__l.__size_);
  else
    v437 = v354;
  v438 = v355;
  v436 = &off_24C335AB8;
  v439 = v356;
  if (SHIBYTE(v357.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v440, v357.__r_.__value_.__l.__data_, v357.__r_.__value_.__l.__size_);
  else
    v440 = v357;
  v431 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v349.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v432, v349.__r_.__value_.__l.__data_, v349.__r_.__value_.__l.__size_);
  else
    v432 = v349;
  v433 = v350;
  v431 = &off_24C335AB8;
  v434 = v351;
  if (SHIBYTE(v352.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v435, v352.__r_.__value_.__l.__data_, v352.__r_.__value_.__l.__size_);
  else
    v435 = v352;
  v426 = (uint64_t (**)())off_24C335D90;
  v58 = SHIBYTE(v344.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v344.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v427, v344.__r_.__value_.__l.__data_, v344.__r_.__value_.__l.__size_);
  else
    v427 = v344;
  v426 = off_24C335B18;
  v429 = v346;
  v428 = v109;
  v430 = v347;
  v421 = (uint64_t (**)())off_24C335D90;
  v59 = SHIBYTE(v339.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v339.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v422, v339.__r_.__value_.__l.__data_, v339.__r_.__value_.__l.__size_);
  else
    v422 = v339;
  v421 = off_24C335B18;
  v424 = v341;
  v423 = v108;
  v425 = v342;
  v416 = (uint64_t (**)())off_24C335D90;
  v60 = SHIBYTE(v334.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v334.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v417, v334.__r_.__value_.__l.__data_, v334.__r_.__value_.__l.__size_);
  else
    v417 = v334;
  v416 = off_24C335B18;
  v419 = v336;
  v418 = v107;
  v420 = v337;
  v411 = (uint64_t (**)())off_24C335D90;
  v117 = SHIBYTE(v329.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v329.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v412, v329.__r_.__value_.__l.__data_, v329.__r_.__value_.__l.__size_);
  else
    v412 = v329;
  v411 = off_24C335B18;
  v414 = v331;
  v413 = v106;
  v415 = v332;
  v407 = (uint64_t (**)())off_24C335D90;
  v61 = SHIBYTE(v325.__r_.__value_.__r.__words[2]);
  v89 = v56;
  if (SHIBYTE(v325.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v408, v325.__r_.__value_.__l.__data_, v325.__r_.__value_.__l.__size_);
  else
    v408 = v325;
  v409 = v105;
  v407 = off_24C335AF8;
  v410 = v104;
  v403 = (uint64_t (**)())off_24C335D90;
  v62 = SHIBYTE(v321.__r_.__value_.__r.__words[2]);
  v115 = v60;
  if (SHIBYTE(v321.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v404, v321.__r_.__value_.__l.__data_, v321.__r_.__value_.__l.__size_);
  else
    v404 = v321;
  v405 = v103;
  v403 = off_24C335AF8;
  v406 = v102;
  v398 = (uint64_t (**)())off_24C335D90;
  v63 = SHIBYTE(v316.__r_.__value_.__r.__words[2]);
  v112 = v61;
  if (SHIBYTE(v316.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v399, v316.__r_.__value_.__l.__data_, v316.__r_.__value_.__l.__size_);
  else
    v399 = v316;
  v398 = off_24C335AD8;
  v401 = v318;
  v400 = v101;
  v402 = v319;
  v393 = (uint64_t (**)())off_24C335D90;
  v64 = SHIBYTE(v311.__r_.__value_.__r.__words[2]);
  v93 = v58;
  if (SHIBYTE(v311.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v394, v311.__r_.__value_.__l.__data_, v311.__r_.__value_.__l.__size_);
  else
    v394 = v311;
  v393 = off_24C335AD8;
  v396 = v313;
  v395 = v100;
  v397 = v314;
  v388 = (uint64_t (**)())off_24C335D90;
  v65 = SHIBYTE(v306.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v306.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v389, v306.__r_.__value_.__l.__data_, v306.__r_.__value_.__l.__size_);
  else
    v389 = v306;
  v388 = off_24C335AD8;
  v391 = v308;
  v390 = v99;
  v392 = v309;
  v384 = (uint64_t (**)())off_24C335D90;
  v66 = SHIBYTE(v302.__r_.__value_.__r.__words[2]);
  v78 = v57;
  if (SHIBYTE(v302.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v385, v302.__r_.__value_.__l.__data_, v302.__r_.__value_.__l.__size_);
  else
    v385 = v302;
  v386 = v98;
  v384 = off_24C335AF8;
  v387 = v97;
  v380 = (uint64_t (**)())off_24C335D90;
  v67 = SHIBYTE(v298.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v298.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&__p, v298.__r_.__value_.__l.__data_, v298.__r_.__value_.__l.__size_);
  else
    __p = v298;
  v382 = v96;
  v380 = off_24C335AF8;
  v383 = v95;
  mediaplatform::DatabaseColumnTuple<4ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<double>,mediaplatform::DatabaseColumn<double>,mediaplatform::DatabaseColumn<double>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::DatabaseColumnTuple(v36, (uint64_t)&v455, (uint64_t)&v451, (uint64_t)&v446, (uint64_t)&v441, (uint64_t)&v436, (uint64_t)&v431, (uint64_t)&v426, (uint64_t)&v421, (uint64_t)&v416, (uint64_t)&v411, (uint64_t)&v407, (uint64_t)&v403, (uint64_t)&v398, (uint64_t)&v393, (uint64_t)&v388, (uint64_t)&v384, (uint64_t)&v380);
  v380 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v384 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v385.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v385.__r_.__value_.__l.__data_);
  v388 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v389.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v389.__r_.__value_.__l.__data_);
  v393 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v394.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v394.__r_.__value_.__l.__data_);
  v398 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v399.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v399.__r_.__value_.__l.__data_);
  v403 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v404.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v404.__r_.__value_.__l.__data_);
  v407 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v408.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v408.__r_.__value_.__l.__data_);
  v411 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v412.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v412.__r_.__value_.__l.__data_);
  v416 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v417.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v417.__r_.__value_.__l.__data_);
  v421 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v422.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v422.__r_.__value_.__l.__data_);
  v426 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v427.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v427.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v431);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v436);
  v441 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v442.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v442.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v446);
  v451 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v452.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v452.__r_.__value_.__l.__data_);
  v455 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v456.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v456.__r_.__value_.__l.__data_);
  *(_QWORD *)(v36 + 864) = off_24C335D90;
  v68 = (std::string *)(v36 + 872);
  v69 = SHIBYTE(v377.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v377.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v68, v377.__r_.__value_.__l.__data_, v377.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v68->__r_.__value_.__l.__data_ = *(_OWORD *)&v377.__r_.__value_.__l.__data_;
    *(_QWORD *)(v36 + 888) = *((_QWORD *)&v377.__r_.__value_.__l + 2);
  }
  *(_DWORD *)(v36 + 896) = v94;
  *(_QWORD *)(v36 + 864) = off_24C335AF8;
  *(_QWORD *)(v36 + 900) = v110;
  v297 = (uint64_t (**)())off_24C335D90;
  if (v67 < 0)
    operator delete(v298.__r_.__value_.__l.__data_);
  v301 = (uint64_t (**)())off_24C335D90;
  if (v66 < 0)
    operator delete(v302.__r_.__value_.__l.__data_);
  v305 = (uint64_t (**)())off_24C335D90;
  if (v65 < 0)
    operator delete(v306.__r_.__value_.__l.__data_);
  v310 = (uint64_t (**)())off_24C335D90;
  if (v64 < 0)
    operator delete(v311.__r_.__value_.__l.__data_);
  v315 = (uint64_t (**)())off_24C335D90;
  if (v63 < 0)
    operator delete(v316.__r_.__value_.__l.__data_);
  v320 = (uint64_t (**)())off_24C335D90;
  if (v62 < 0)
    operator delete(v321.__r_.__value_.__l.__data_);
  v324 = (uint64_t (**)())off_24C335D90;
  if (v112 < 0)
    operator delete(v325.__r_.__value_.__l.__data_);
  v328 = (uint64_t (**)())off_24C335D90;
  if (v117 < 0)
    operator delete(v329.__r_.__value_.__l.__data_);
  v333 = (uint64_t (**)())off_24C335D90;
  if (v115 < 0)
    operator delete(v334.__r_.__value_.__l.__data_);
  v338 = (uint64_t (**)())off_24C335D90;
  if (v59 < 0)
    operator delete(v339.__r_.__value_.__l.__data_);
  v343 = (uint64_t (**)())off_24C335D90;
  if (v93 < 0)
    operator delete(v344.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v348);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v353);
  v358 = (uint64_t (**)())off_24C335D90;
  if (v78 < 0)
    operator delete(v359.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v363);
  v368 = (uint64_t (**)())off_24C335D90;
  if (v119 < 0)
    operator delete(v369.__r_.__value_.__l.__data_);
  v372 = (uint64_t (**)())off_24C335D90;
  if (v89 < 0)
    operator delete(v373.__r_.__value_.__l.__data_);
  v376 = (uint64_t (**)())off_24C335D90;
  if (v69 < 0)
    operator delete(v377.__r_.__value_.__l.__data_);
  *(_QWORD *)(v36 + 912) = off_24C335D90;
  v70 = (std::string *)(v36 + 920);
  v71 = SHIBYTE(v294.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v294.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v70, v294.__r_.__value_.__l.__data_, v294.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v70->__r_.__value_.__l.__data_ = *(_OWORD *)&v294.__r_.__value_.__l.__data_;
    *(_QWORD *)(v36 + 936) = *((_QWORD *)&v294.__r_.__value_.__l + 2);
  }
  *(_DWORD *)(v36 + 944) = v295;
  *(_QWORD *)(v36 + 912) = off_24C335AF8;
  *(_QWORD *)(v36 + 948) = v296;
  v210 = (uint64_t (**)())off_24C335D90;
  if (v79 < 0)
    operator delete(v211.__r_.__value_.__l.__data_);
  v214 = (uint64_t (**)())off_24C335D90;
  if (v80 < 0)
    operator delete(v215.__r_.__value_.__l.__data_);
  v218 = (uint64_t (**)())off_24C335D90;
  if (v81 < 0)
    operator delete(v219.__r_.__value_.__l.__data_);
  v223 = (uint64_t (**)())off_24C335D90;
  if (v82 < 0)
    operator delete(v224.__r_.__value_.__l.__data_);
  v228 = (uint64_t (**)())off_24C335D90;
  if (v92 < 0)
    operator delete(v229.__r_.__value_.__l.__data_);
  v233 = (uint64_t (**)())off_24C335D90;
  if (v83 < 0)
    operator delete(v234.__r_.__value_.__l.__data_);
  v237 = (uint64_t (**)())off_24C335D90;
  if (v84 < 0)
    operator delete(v238.__r_.__value_.__l.__data_);
  v241 = (uint64_t (**)())off_24C335D90;
  if (v85 < 0)
    operator delete(v242.__r_.__value_.__l.__data_);
  v246 = (uint64_t (**)())off_24C335D90;
  if (v86 < 0)
    operator delete(v247.__r_.__value_.__l.__data_);
  v251 = (uint64_t (**)())off_24C335D90;
  if (v87 < 0)
    operator delete(v252.__r_.__value_.__l.__data_);
  v256 = (uint64_t (**)())off_24C335D90;
  if (v91 < 0)
    operator delete(v257.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v261);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v266);
  v271 = (uint64_t (**)())off_24C335D90;
  if (v88 < 0)
    operator delete(v272.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v276);
  if (SHIBYTE(v282.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v282.__r_.__value_.__l.__data_);
  if (SHIBYTE(v286.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v286.__r_.__value_.__l.__data_);
  if (SHIBYTE(v290.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v290.__r_.__value_.__l.__data_);
    if ((v71 & 0x80000000) == 0)
      goto LABEL_353;
  }
  else if ((v71 & 0x80000000) == 0)
  {
    goto LABEL_353;
  }
  operator delete(v294.__r_.__value_.__l.__data_);
LABEL_353:
  *(_QWORD *)(v36 + 960) = off_24C335D90;
  v72 = (std::string *)(v36 + 968);
  v73 = SHIBYTE(v207.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v207.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v72, v207.__r_.__value_.__l.__data_, v207.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v72->__r_.__value_.__l.__data_ = *(_OWORD *)&v207.__r_.__value_.__l.__data_;
    *(_QWORD *)(v36 + 984) = *((_QWORD *)&v207.__r_.__value_.__l + 2);
  }
  *(_DWORD *)(v36 + 992) = v208;
  *(_QWORD *)(v36 + 960) = off_24C335AF8;
  *(_QWORD *)(v36 + 996) = v209;
  if (SHIBYTE(v120.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v120.__r_.__value_.__l.__data_);
  if (SHIBYTE(v124.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v124.__r_.__value_.__l.__data_);
  if (SHIBYTE(v128.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v128.__r_.__value_.__l.__data_);
  if (SHIBYTE(v133.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v133.__r_.__value_.__l.__data_);
  if (SHIBYTE(v138.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v138.__r_.__value_.__l.__data_);
  if (SHIBYTE(v143.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v143.__r_.__value_.__l.__data_);
  if (SHIBYTE(v147.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v147.__r_.__value_.__l.__data_);
  if (SHIBYTE(v151.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v151.__r_.__value_.__l.__data_);
  if (SHIBYTE(v156.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v156.__r_.__value_.__l.__data_);
  if (SHIBYTE(v161.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v161.__r_.__value_.__l.__data_);
  if (SHIBYTE(v166.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v166.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v170);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v175);
  if (SHIBYTE(v181.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v181.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v185);
  if (SHIBYTE(v191.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v191.__r_.__value_.__l.__data_);
  if (SHIBYTE(v195.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v195.__r_.__value_.__l.__data_);
  if (SHIBYTE(v199.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v199.__r_.__value_.__l.__data_);
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__s.__r_.__value_.__l.__data_);
    if ((v73 & 0x80000000) == 0)
      goto LABEL_390;
  }
  else if ((v73 & 0x80000000) == 0)
  {
    goto LABEL_390;
  }
  operator delete(v207.__r_.__value_.__l.__data_);
LABEL_390:
  *(_QWORD *)(v36 + 1008) = off_24C335D90;
  v74 = (std::string *)(v36 + 1016);
  if (*(char *)(v90 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v74, *(const std::string::value_type **)(v90 + 8), *(_QWORD *)(v90 + 16));
  }
  else
  {
    v75 = *(_OWORD *)(v90 + 8);
    *(_QWORD *)(v36 + 1032) = *(_QWORD *)(v90 + 24);
    *(_OWORD *)&v74->__r_.__value_.__l.__data_ = v75;
  }
  *(_DWORD *)(v36 + 1040) = *(_DWORD *)(v90 + 32);
  *(_QWORD *)(v36 + 1008) = off_24C335B18;
  v76 = *(_QWORD *)(v90 + 36);
  *(_DWORD *)(v36 + 1052) = *(_DWORD *)(v90 + 44);
  *(_QWORD *)(v36 + 1044) = v76;
  return v36;
}

void sub_20A6BB758(_Unwind_Exception *a1)
{
  uint64_t v1;

  mediaplatform::DatabaseColumnTuple<1ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<double>,mediaplatform::DatabaseColumn<double>,mediaplatform::DatabaseColumn<double>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(v1);
  _Unwind_Resume(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<0ul,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>>::DatabaseColumnTuple(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  int v43;
  int v44;
  int v45;
  const void *v46;
  size_t v47;
  void *v48;
  const void *v49;
  size_t v50;
  void *v51;
  int v52;
  int v53;
  int v54;
  int v55;
  int v56;
  int v57;
  int v58;
  int v59;
  const void *v60;
  size_t v61;
  void *v62;
  const void *v63;
  size_t v64;
  void *v65;
  int v66;
  int v67;
  const void *v68;
  size_t v69;
  void *v70;
  int v71;
  int v72;
  const void *v73;
  size_t v74;
  void *v75;
  int v76;
  int v77;
  int v78;
  int v79;
  int v80;
  int v81;
  int v82;
  std::string *v83;
  std::string *v84;
  std::string *v85;
  __int128 v86;
  uint64_t v87;
  int v89;
  int v90;
  int v91;
  int v92;
  int v93;
  int v94;
  uint64_t v95;
  int v96;
  int v97;
  int v98;
  uint64_t v99;
  int v100;
  int v101;
  int v102;
  int v103;
  uint64_t v104;
  int v105;
  uint64_t v106;
  int v107;
  uint64_t v108;
  int v109;
  uint64_t v110;
  int v111;
  uint64_t v112;
  int v113;
  uint64_t v114;
  int v115;
  uint64_t v116;
  int v117;
  uint64_t v118;
  int v119;
  int v120;
  uint64_t v121;
  int v122;
  int v123;
  int v124;
  uint64_t v125;
  int v126;
  int v127;
  int v128;
  uint64_t v129;
  int v130;
  int v131;
  int v132;
  int v133;
  int v134;
  int v135;
  int v136;
  std::string v137;
  int v138;
  uint64_t v139;
  int v140;
  uint64_t (**v141)();
  std::string v142;
  int v143;
  char v144;
  std::string v145;
  uint64_t (**v146)();
  std::string v147;
  int v148;
  uint64_t v149;
  int v150;
  uint64_t (**v151)();
  std::string v152;
  int v153;
  uint64_t v154;
  uint64_t (**v155)();
  std::string v156;
  int v157;
  uint64_t v158;
  int v159;
  uint64_t (**v160)();
  std::string v161;
  int v162;
  uint64_t v163;
  int v164;
  uint64_t (**v165)();
  std::string v166;
  int v167;
  uint64_t v168;
  int v169;
  uint64_t (**v170)();
  std::string v171;
  int v172;
  uint64_t v173;
  uint64_t (**v174)();
  std::string v175;
  int v176;
  char v177;
  void (**v178)(mediaplatform::Data *__hidden);
  size_t v179;
  size_t v180;
  const void *v181;
  char v182;
  uint64_t (**v183)();
  std::string v184;
  int v185;
  uint64_t v186;
  uint64_t (**v187)();
  std::string v188;
  int v189;
  uint64_t v190;
  uint64_t (**v191)();
  std::string v192;
  int v193;
  uint64_t v194;
  uint64_t (**v195)();
  std::string v196;
  int v197;
  uint64_t v198;
  uint64_t (**v199)();
  std::string v200;
  int v201;
  uint64_t v202;
  uint64_t (**v203)();
  std::string v204;
  int v205;
  uint64_t v206;
  uint64_t (**v207)();
  std::string v208;
  int v209;
  char v210;
  std::string v211;
  uint64_t (**v212)();
  std::string v213;
  int v214;
  uint64_t v215;
  uint64_t (**v216)();
  std::string v217;
  int v218;
  uint64_t v219;
  uint64_t (**v220)();
  std::string v221;
  int v222;
  uint64_t v223;
  uint64_t (**v224)();
  std::string v225;
  int v226;
  uint64_t v227;
  uint64_t (**v228)();
  std::string v229;
  int v230;
  char v231;
  void (**v232)(mediaplatform::Data *__hidden);
  size_t v233;
  size_t v234;
  const void *v235;
  char v236;
  uint64_t (**v237)();
  std::string v238;
  int v239;
  uint64_t v240;
  int v241;
  uint64_t (**v242)();
  std::string v243;
  int v244;
  uint64_t v245;
  int v246;
  uint64_t (**v247)();
  std::string __s;
  int v249;
  char v250;
  std::string v251;
  uint64_t (**v252)();
  std::string v253;
  int v254;
  char v255;
  std::string v256;
  uint64_t (**v257)();
  std::string v258;
  int v259;
  uint64_t v260;
  int v261;
  uint64_t (**v262)();
  std::string v263;
  int v264;
  char v265;
  std::string v266;
  uint64_t (**v267)();
  std::string v268;
  int v269;
  uint64_t v270;
  int v271;
  uint64_t (**v272)();
  std::string v273;
  int v274;
  uint64_t v275;
  uint64_t (**v276)();
  std::string v277;
  int v278;
  uint64_t v279;
  int v280;
  uint64_t (**v281)();
  std::string v282;
  int v283;
  uint64_t v284;
  int v285;
  uint64_t (**v286)();
  std::string v287;
  int v288;
  uint64_t v289;
  int v290;
  uint64_t (**v291)();
  std::string v292;
  int v293;
  uint64_t v294;
  uint64_t (**v295)();
  std::string v296;
  int v297;
  char v298;
  void (**v299)(mediaplatform::Data *__hidden);
  size_t v300;
  size_t v301;
  const void *v302;
  char v303;
  uint64_t (**v304)();
  std::string v305;
  int v306;
  uint64_t v307;
  uint64_t (**v308)();
  std::string v309;
  int v310;
  uint64_t v311;
  uint64_t (**v312)();
  std::string v313;
  int v314;
  uint64_t v315;
  uint64_t (**v316)();
  std::string v317;
  int v318;
  uint64_t v319;
  uint64_t (**v320)();
  std::string v321;
  int v322;
  uint64_t v323;
  uint64_t (**v324)();
  std::string v325;
  int v326;
  uint64_t v327;
  uint64_t (**v328)();
  std::string v329;
  int v330;
  char v331;
  std::string v332;
  uint64_t (**v333)();
  std::string v334;
  int v335;
  uint64_t v336;
  uint64_t (**v337)();
  std::string v338;
  int v339;
  uint64_t v340;
  uint64_t (**v341)();
  std::string v342;
  int v343;
  uint64_t v344;
  uint64_t (**v345)();
  std::string v346;
  int v347;
  uint64_t v348;
  uint64_t (**v349)();
  std::string v350;
  int v351;
  char v352;
  void (**v353)(mediaplatform::Data *__hidden);
  size_t v354;
  size_t v355;
  const void *v356;
  char v357;
  uint64_t (**v358)();
  std::string v359;
  int v360;
  uint64_t v361;
  int v362;
  uint64_t (**v363)();
  std::string v364;
  int v365;
  uint64_t v366;
  int v367;
  uint64_t (**v368)();
  std::string v369;
  int v370;
  char v371;
  std::string v372;
  uint64_t (**v373)();
  std::string __p;
  int v375;
  uint64_t v376;
  int v377;
  uint64_t (**v378)();
  std::string v379;
  int v380;
  char v381;
  std::string v382;
  uint64_t (**v383)();
  std::string v384;
  int v385;
  uint64_t v386;
  int v387;
  uint64_t (**v388)();
  std::string v389;
  int v390;
  uint64_t v391;
  uint64_t (**v392)();
  std::string v393;
  int v394;
  uint64_t v395;
  int v396;
  uint64_t (**v397)();
  std::string v398;
  int v399;
  uint64_t v400;
  int v401;
  uint64_t (**v402)();
  std::string v403;
  int v404;
  uint64_t v405;
  int v406;
  uint64_t (**v407)();
  std::string v408;
  int v409;
  uint64_t v410;
  uint64_t (**v411)();
  std::string v412;
  int v413;
  char v414;
  void (**v415)(mediaplatform::Data *__hidden);
  size_t v416;
  size_t v417;
  void *v418;
  char v419;
  uint64_t (**v420)();
  std::string v421;
  int v422;
  uint64_t v423;
  uint64_t (**v424)();
  std::string v425;
  int v426;
  uint64_t v427;
  uint64_t (**v428)();
  std::string v429;
  int v430;
  uint64_t v431;
  uint64_t (**v432)();
  std::string v433;
  int v434;
  uint64_t v435;
  uint64_t (**v436)();
  std::string v437;
  int v438;
  uint64_t v439;
  uint64_t (**v440)();
  std::string v441;
  int v442;
  uint64_t v443;
  uint64_t (**v444)();
  std::string v445;
  int v446;
  char v447;
  std::string v448;
  uint64_t (**v449)();
  std::string v450;
  int v451;
  uint64_t v452;
  uint64_t (**v453)();
  std::string v454;
  int v455;
  uint64_t v456;
  uint64_t (**v457)();
  std::string v458;
  int v459;
  uint64_t v460;
  uint64_t (**v461)();
  std::string v462;
  int v463;
  uint64_t v464;
  uint64_t (**v465)();
  std::string v466;
  int v467;
  char v468;
  void (**v469)(mediaplatform::Data *__hidden);
  size_t v470;
  size_t v471;
  void *v472;
  char v473;
  uint64_t (**v474)();
  std::string v475;
  int v476;
  uint64_t v477;
  int v478;
  uint64_t (**v479)();
  std::string v480;
  int v481;
  uint64_t v482;
  int v483;

  v27 = MEMORY[0x24BDAC7A8](a1);
  v30 = v29;
  v32 = v31;
  v34 = v33;
  v36 = v35;
  v38 = v37;
  v39 = v28;
  v95 = v40;
  v41 = v27;
  v252 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(v28 + 31) < 0)
    std::string::__init_copy_ctor_external(&v253, *(const std::string::value_type **)(v28 + 8), *(_QWORD *)(v28 + 16));
  else
    v253 = *(std::string *)(v28 + 8);
  v254 = *(_DWORD *)(v39 + 32);
  v252 = &off_24C335AB8;
  v255 = *(_BYTE *)(v39 + 36);
  if (*(char *)(v39 + 63) < 0)
    std::string::__init_copy_ctor_external(&v256, *(const std::string::value_type **)(v39 + 40), *(_QWORD *)(v39 + 48));
  else
    v256 = *(std::string *)(v39 + 40);
  v247 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(v38 + 31) < 0)
    std::string::__init_copy_ctor_external(&__s, *(const std::string::value_type **)(v38 + 8), *(_QWORD *)(v38 + 16));
  else
    __s = *(std::string *)(v38 + 8);
  v249 = *(_DWORD *)(v38 + 32);
  v247 = &off_24C335AB8;
  v250 = *(_BYTE *)(v38 + 36);
  if (*(char *)(v38 + 63) < 0)
    std::string::__init_copy_ctor_external(&v251, *(const std::string::value_type **)(v38 + 40), *(_QWORD *)(v38 + 48));
  else
    v251 = *(std::string *)(v38 + 40);
  if (*(char *)(v36 + 31) < 0)
    std::string::__init_copy_ctor_external(&v243, *(const std::string::value_type **)(v36 + 8), *(_QWORD *)(v36 + 16));
  else
    v243 = *(std::string *)(v36 + 8);
  v42 = *(_DWORD *)(v36 + 32);
  v242 = off_24C335B18;
  v245 = *(_QWORD *)(v36 + 36);
  v43 = *(_DWORD *)(v36 + 44);
  v135 = v42;
  v244 = v42;
  v246 = v43;
  if (*(char *)(v34 + 31) < 0)
    std::string::__init_copy_ctor_external(&v238, *(const std::string::value_type **)(v34 + 8), *(_QWORD *)(v34 + 16));
  else
    v238 = *(std::string *)(v34 + 8);
  v44 = *(_DWORD *)(v34 + 32);
  v237 = off_24C335B18;
  v240 = *(_QWORD *)(v34 + 36);
  v45 = *(_DWORD *)(v34 + 44);
  v133 = v44;
  v239 = v44;
  v241 = v45;
  v228 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(v32 + 31) < 0)
    std::string::__init_copy_ctor_external(&v229, *(const std::string::value_type **)(v32 + 8), *(_QWORD *)(v32 + 16));
  else
    v229 = *(std::string *)(v32 + 8);
  v230 = *(_DWORD *)(v32 + 32);
  v228 = &off_24C335A98;
  v231 = *(_BYTE *)(v32 + 36);
  v46 = *(const void **)(v32 + 64);
  v47 = *(_QWORD *)(v32 + 48);
  v232 = &off_24C331510;
  v233 = v47;
  v234 = v47;
  if (v47)
    v48 = (void *)operator new[]();
  else
    v48 = 0;
  v235 = v48;
  v236 = 1;
  if (v46)
    memcpy(v48, v46, v47);
  else
    bzero(v48, v47);
  if (*(char *)(v30 + 31) < 0)
    std::string::__init_copy_ctor_external(&v225, *(const std::string::value_type **)(v30 + 8), *(_QWORD *)(v30 + 16));
  else
    v225 = *(std::string *)(v30 + 8);
  v131 = *(_DWORD *)(v30 + 32);
  v226 = v131;
  v224 = off_24C335AF8;
  v129 = *(_QWORD *)(v30 + 36);
  v227 = v129;
  if (*(char *)(a9 + 31) < 0)
    std::string::__init_copy_ctor_external(&v221, *(const std::string::value_type **)(a9 + 8), *(_QWORD *)(a9 + 16));
  else
    v221 = *(std::string *)(a9 + 8);
  v127 = *(_DWORD *)(a9 + 32);
  v222 = v127;
  v220 = off_24C335AF8;
  v125 = *(_QWORD *)(a9 + 36);
  v223 = v125;
  if (*(char *)(a10 + 31) < 0)
    std::string::__init_copy_ctor_external(&v217, *(const std::string::value_type **)(a10 + 8), *(_QWORD *)(a10 + 16));
  else
    v217 = *(std::string *)(a10 + 8);
  v123 = *(_DWORD *)(a10 + 32);
  v218 = v123;
  v216 = off_24C335AF8;
  v121 = *(_QWORD *)(a10 + 36);
  v219 = v121;
  if (*(char *)(a11 + 31) < 0)
    std::string::__init_copy_ctor_external(&v213, *(const std::string::value_type **)(a11 + 8), *(_QWORD *)(a11 + 16));
  else
    v213 = *(std::string *)(a11 + 8);
  v119 = *(_DWORD *)(a11 + 32);
  v214 = v119;
  v212 = off_24C335AF8;
  v118 = *(_QWORD *)(a11 + 36);
  v215 = v118;
  v207 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a12 + 31) < 0)
    std::string::__init_copy_ctor_external(&v208, *(const std::string::value_type **)(a12 + 8), *(_QWORD *)(a12 + 16));
  else
    v208 = *(std::string *)(a12 + 8);
  v209 = *(_DWORD *)(a12 + 32);
  v207 = &off_24C335AB8;
  v210 = *(_BYTE *)(a12 + 36);
  if (*(char *)(a12 + 63) < 0)
    std::string::__init_copy_ctor_external(&v211, *(const std::string::value_type **)(a12 + 40), *(_QWORD *)(a12 + 48));
  else
    v211 = *(std::string *)(a12 + 40);
  if (*(char *)(a13 + 31) < 0)
    std::string::__init_copy_ctor_external(&v204, *(const std::string::value_type **)(a13 + 8), *(_QWORD *)(a13 + 16));
  else
    v204 = *(std::string *)(a13 + 8);
  v117 = *(_DWORD *)(a13 + 32);
  v205 = v117;
  v203 = off_24C335AF8;
  v116 = *(_QWORD *)(a13 + 36);
  v206 = v116;
  if (*(char *)(a14 + 31) < 0)
    std::string::__init_copy_ctor_external(&v200, *(const std::string::value_type **)(a14 + 8), *(_QWORD *)(a14 + 16));
  else
    v200 = *(std::string *)(a14 + 8);
  v115 = *(_DWORD *)(a14 + 32);
  v201 = v115;
  v199 = off_24C335AF8;
  v114 = *(_QWORD *)(a14 + 36);
  v202 = v114;
  if (*(char *)(a15 + 31) < 0)
    std::string::__init_copy_ctor_external(&v196, *(const std::string::value_type **)(a15 + 8), *(_QWORD *)(a15 + 16));
  else
    v196 = *(std::string *)(a15 + 8);
  v113 = *(_DWORD *)(a15 + 32);
  v197 = v113;
  v195 = off_24C335AF8;
  v112 = *(_QWORD *)(a15 + 36);
  v198 = v112;
  if (*(char *)(a16 + 31) < 0)
    std::string::__init_copy_ctor_external(&v192, *(const std::string::value_type **)(a16 + 8), *(_QWORD *)(a16 + 16));
  else
    v192 = *(std::string *)(a16 + 8);
  v111 = *(_DWORD *)(a16 + 32);
  v193 = v111;
  v191 = off_24C335AF8;
  v110 = *(_QWORD *)(a16 + 36);
  v194 = v110;
  if (*(char *)(a17 + 31) < 0)
    std::string::__init_copy_ctor_external(&v188, *(const std::string::value_type **)(a17 + 8), *(_QWORD *)(a17 + 16));
  else
    v188 = *(std::string *)(a17 + 8);
  v109 = *(_DWORD *)(a17 + 32);
  v189 = v109;
  v187 = off_24C335AF8;
  v108 = *(_QWORD *)(a17 + 36);
  v190 = v108;
  if (*(char *)(a18 + 31) < 0)
    std::string::__init_copy_ctor_external(&v184, *(const std::string::value_type **)(a18 + 8), *(_QWORD *)(a18 + 16));
  else
    v184 = *(std::string *)(a18 + 8);
  v107 = *(_DWORD *)(a18 + 32);
  v185 = v107;
  v183 = off_24C335AF8;
  v106 = *(_QWORD *)(a18 + 36);
  v186 = v106;
  v174 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a19 + 31) < 0)
    std::string::__init_copy_ctor_external(&v175, *(const std::string::value_type **)(a19 + 8), *(_QWORD *)(a19 + 16));
  else
    v175 = *(std::string *)(a19 + 8);
  v176 = *(_DWORD *)(a19 + 32);
  v174 = &off_24C335A98;
  v177 = *(_BYTE *)(a19 + 36);
  v49 = *(const void **)(a19 + 64);
  v50 = *(_QWORD *)(a19 + 48);
  v178 = &off_24C331510;
  v179 = v50;
  v180 = v50;
  if (v50)
    v51 = (void *)operator new[]();
  else
    v51 = 0;
  v181 = v51;
  v182 = 1;
  if (v49)
    memcpy(v51, v49, v50);
  else
    bzero(v51, v50);
  if (*(char *)(a20 + 31) < 0)
    std::string::__init_copy_ctor_external(&v171, *(const std::string::value_type **)(a20 + 8), *(_QWORD *)(a20 + 16));
  else
    v171 = *(std::string *)(a20 + 8);
  v105 = *(_DWORD *)(a20 + 32);
  v172 = v105;
  v170 = off_24C335AF8;
  v104 = *(_QWORD *)(a20 + 36);
  v173 = v104;
  if (*(char *)(a21 + 31) < 0)
    std::string::__init_copy_ctor_external(&v166, *(const std::string::value_type **)(a21 + 8), *(_QWORD *)(a21 + 16));
  else
    v166 = *(std::string *)(a21 + 8);
  v52 = *(_DWORD *)(a21 + 32);
  v165 = off_24C335B18;
  v168 = *(_QWORD *)(a21 + 36);
  v53 = *(_DWORD *)(a21 + 44);
  v103 = v52;
  v167 = v52;
  v169 = v53;
  if (*(char *)(a22 + 31) < 0)
    std::string::__init_copy_ctor_external(&v161, *(const std::string::value_type **)(a22 + 8), *(_QWORD *)(a22 + 16));
  else
    v161 = *(std::string *)(a22 + 8);
  v54 = *(_DWORD *)(a22 + 32);
  v160 = off_24C335B18;
  v163 = *(_QWORD *)(a22 + 36);
  v55 = *(_DWORD *)(a22 + 44);
  v102 = v54;
  v162 = v54;
  v164 = v55;
  if (*(char *)(a23 + 31) < 0)
    std::string::__init_copy_ctor_external(&v156, *(const std::string::value_type **)(a23 + 8), *(_QWORD *)(a23 + 16));
  else
    v156 = *(std::string *)(a23 + 8);
  v56 = *(_DWORD *)(a23 + 32);
  v155 = off_24C335B18;
  v158 = *(_QWORD *)(a23 + 36);
  v57 = *(_DWORD *)(a23 + 44);
  v101 = v56;
  v157 = v56;
  v159 = v57;
  if (*(char *)(a24 + 31) < 0)
    std::string::__init_copy_ctor_external(&v152, *(const std::string::value_type **)(a24 + 8), *(_QWORD *)(a24 + 16));
  else
    v152 = *(std::string *)(a24 + 8);
  v100 = *(_DWORD *)(a24 + 32);
  v153 = v100;
  v151 = off_24C335AF8;
  v99 = *(_QWORD *)(a24 + 36);
  v154 = v99;
  if (*(char *)(a25 + 31) < 0)
    std::string::__init_copy_ctor_external(&v147, *(const std::string::value_type **)(a25 + 8), *(_QWORD *)(a25 + 16));
  else
    v147 = *(std::string *)(a25 + 8);
  v58 = *(_DWORD *)(a25 + 32);
  v146 = off_24C335B18;
  v149 = *(_QWORD *)(a25 + 36);
  v59 = *(_DWORD *)(a25 + 44);
  v98 = v58;
  v148 = v58;
  v150 = v59;
  v141 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a26 + 31) < 0)
    std::string::__init_copy_ctor_external(&v142, *(const std::string::value_type **)(a26 + 8), *(_QWORD *)(a26 + 16));
  else
    v142 = *(std::string *)(a26 + 8);
  v143 = *(_DWORD *)(a26 + 32);
  v141 = &off_24C335AB8;
  v144 = *(_BYTE *)(a26 + 36);
  if (*(char *)(a26 + 63) < 0)
    std::string::__init_copy_ctor_external(&v145, *(const std::string::value_type **)(a26 + 40), *(_QWORD *)(a26 + 48));
  else
    v145 = *(std::string *)(a26 + 40);
  if (*(char *)(a27 + 31) < 0)
    std::string::__init_copy_ctor_external(&v137, *(const std::string::value_type **)(a27 + 8), *(_QWORD *)(a27 + 16));
  else
    v137 = *(std::string *)(a27 + 8);
  v97 = *(_DWORD *)(a27 + 32);
  v138 = v97;
  v139 = *(_QWORD *)(a27 + 36);
  v140 = *(_DWORD *)(a27 + 44);
  v368 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v369, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
  else
    v369 = __s;
  v370 = v249;
  v368 = &off_24C335AB8;
  v371 = v250;
  if (SHIBYTE(v251.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v372, v251.__r_.__value_.__l.__data_, v251.__r_.__value_.__l.__size_);
  else
    v372 = v251;
  if (SHIBYTE(v243.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v364, v243.__r_.__value_.__l.__data_, v243.__r_.__value_.__l.__size_);
  else
    v364 = v243;
  v363 = off_24C335B18;
  v366 = v245;
  v365 = v135;
  v367 = v246;
  if (SHIBYTE(v238.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v359, v238.__r_.__value_.__l.__data_, v238.__r_.__value_.__l.__size_);
  else
    v359 = v238;
  v358 = off_24C335B18;
  v361 = v240;
  v360 = v133;
  v362 = v241;
  v349 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v229.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v350, v229.__r_.__value_.__l.__data_, v229.__r_.__value_.__l.__size_);
  else
    v350 = v229;
  v351 = v230;
  v349 = &off_24C335A98;
  v352 = v231;
  v60 = v235;
  v61 = v233;
  v353 = &off_24C331510;
  v354 = v233;
  v355 = v233;
  if (v233)
    v62 = (void *)operator new[]();
  else
    v62 = 0;
  v356 = v62;
  v357 = 1;
  if (v60)
    memcpy(v62, v60, v61);
  else
    bzero(v62, v61);
  if (SHIBYTE(v225.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v346, v225.__r_.__value_.__l.__data_, v225.__r_.__value_.__l.__size_);
  else
    v346 = v225;
  v347 = v131;
  v345 = off_24C335AF8;
  v348 = v129;
  if (SHIBYTE(v221.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v342, v221.__r_.__value_.__l.__data_, v221.__r_.__value_.__l.__size_);
  else
    v342 = v221;
  v343 = v127;
  v341 = off_24C335AF8;
  v344 = v125;
  if (SHIBYTE(v217.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v338, v217.__r_.__value_.__l.__data_, v217.__r_.__value_.__l.__size_);
  else
    v338 = v217;
  v339 = v123;
  v337 = off_24C335AF8;
  v340 = v121;
  if (SHIBYTE(v213.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v334, v213.__r_.__value_.__l.__data_, v213.__r_.__value_.__l.__size_);
  else
    v334 = v213;
  v335 = v119;
  v333 = off_24C335AF8;
  v336 = v118;
  v328 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v208.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v329, v208.__r_.__value_.__l.__data_, v208.__r_.__value_.__l.__size_);
  else
    v329 = v208;
  v330 = v209;
  v328 = &off_24C335AB8;
  v331 = v210;
  if (SHIBYTE(v211.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v332, v211.__r_.__value_.__l.__data_, v211.__r_.__value_.__l.__size_);
  else
    v332 = v211;
  v324 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v204.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v325, v204.__r_.__value_.__l.__data_, v204.__r_.__value_.__l.__size_);
  else
    v325 = v204;
  v326 = v117;
  v324 = off_24C335AF8;
  v327 = v116;
  v320 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v200.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v321, v200.__r_.__value_.__l.__data_, v200.__r_.__value_.__l.__size_);
  else
    v321 = v200;
  v322 = v115;
  v320 = off_24C335AF8;
  v323 = v114;
  v316 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v196.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v317, v196.__r_.__value_.__l.__data_, v196.__r_.__value_.__l.__size_);
  else
    v317 = v196;
  v318 = v113;
  v316 = off_24C335AF8;
  v319 = v112;
  v312 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v192.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v313, v192.__r_.__value_.__l.__data_, v192.__r_.__value_.__l.__size_);
  else
    v313 = v192;
  v314 = v111;
  v312 = off_24C335AF8;
  v315 = v110;
  v308 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v188.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v309, v188.__r_.__value_.__l.__data_, v188.__r_.__value_.__l.__size_);
  else
    v309 = v188;
  v310 = v109;
  v308 = off_24C335AF8;
  v311 = v108;
  v304 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v184.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v305, v184.__r_.__value_.__l.__data_, v184.__r_.__value_.__l.__size_);
  else
    v305 = v184;
  v306 = v107;
  v304 = off_24C335AF8;
  v307 = v106;
  v295 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v175.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v296, v175.__r_.__value_.__l.__data_, v175.__r_.__value_.__l.__size_);
  else
    v296 = v175;
  v297 = v176;
  v295 = &off_24C335A98;
  v298 = v177;
  v63 = v181;
  v64 = v179;
  v299 = &off_24C331510;
  v300 = v179;
  v301 = v179;
  if (v179)
    v65 = (void *)operator new[]();
  else
    v65 = 0;
  v302 = v65;
  v303 = 1;
  if (v63)
    memcpy(v65, v63, v64);
  else
    bzero(v65, v64);
  v291 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v171.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v292, v171.__r_.__value_.__l.__data_, v171.__r_.__value_.__l.__size_);
  else
    v292 = v171;
  v293 = v105;
  v291 = off_24C335AF8;
  v294 = v104;
  v286 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v166.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v287, v166.__r_.__value_.__l.__data_, v166.__r_.__value_.__l.__size_);
  else
    v287 = v166;
  v286 = off_24C335B18;
  v289 = v168;
  v288 = v103;
  v290 = v169;
  v281 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v161.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v282, v161.__r_.__value_.__l.__data_, v161.__r_.__value_.__l.__size_);
  else
    v282 = v161;
  v281 = off_24C335B18;
  v284 = v163;
  v283 = v102;
  v285 = v164;
  v276 = (uint64_t (**)())off_24C335D90;
  v66 = SHIBYTE(v156.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v156.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v277, v156.__r_.__value_.__l.__data_, v156.__r_.__value_.__l.__size_);
  else
    v277 = v156;
  v276 = off_24C335B18;
  v279 = v158;
  v278 = v101;
  v280 = v159;
  v272 = (uint64_t (**)())off_24C335D90;
  v67 = SHIBYTE(v152.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v152.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v273, v152.__r_.__value_.__l.__data_, v152.__r_.__value_.__l.__size_);
  else
    v273 = v152;
  v274 = v100;
  v272 = off_24C335AF8;
  v275 = v99;
  v267 = (uint64_t (**)())off_24C335D90;
  v96 = SHIBYTE(v147.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v147.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v268, v147.__r_.__value_.__l.__data_, v147.__r_.__value_.__l.__size_);
  else
    v268 = v147;
  v267 = off_24C335B18;
  v270 = v149;
  v269 = v98;
  v271 = v150;
  v262 = (uint64_t (**)())off_24C335D90;
  v94 = v67;
  if (SHIBYTE(v142.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v263, v142.__r_.__value_.__l.__data_, v142.__r_.__value_.__l.__size_);
  else
    v263 = v142;
  v264 = v143;
  v262 = &off_24C335AB8;
  v265 = v144;
  if (SHIBYTE(v145.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v266, v145.__r_.__value_.__l.__data_, v145.__r_.__value_.__l.__size_);
  else
    v266 = v145;
  v257 = (uint64_t (**)())off_24C335D90;
  v92 = SHIBYTE(v137.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v137.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v258, v137.__r_.__value_.__l.__data_, v137.__r_.__value_.__l.__size_);
  else
    v258 = v137;
  v257 = off_24C335B18;
  v260 = v139;
  v259 = v97;
  v261 = v140;
  v479 = (uint64_t (**)())off_24C335D90;
  v93 = SHIBYTE(v364.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v364.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v480, v364.__r_.__value_.__l.__data_, v364.__r_.__value_.__l.__size_);
  else
    v480 = v364;
  v479 = off_24C335B18;
  v482 = v366;
  v481 = v135;
  v483 = v367;
  v474 = (uint64_t (**)())off_24C335D90;
  v136 = SHIBYTE(v359.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v359.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v475, v359.__r_.__value_.__l.__data_, v359.__r_.__value_.__l.__size_);
  else
    v475 = v359;
  v474 = off_24C335B18;
  v477 = v361;
  v476 = v133;
  v478 = v362;
  v465 = (uint64_t (**)())off_24C335D90;
  v91 = v66;
  if (SHIBYTE(v350.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v466, v350.__r_.__value_.__l.__data_, v350.__r_.__value_.__l.__size_);
  else
    v466 = v350;
  v467 = v351;
  v465 = &off_24C335A98;
  v468 = v352;
  v68 = v356;
  v69 = v354;
  v469 = &off_24C331510;
  v470 = v354;
  v471 = v354;
  if (v354)
    v70 = (void *)operator new[]();
  else
    v70 = 0;
  v472 = v70;
  v473 = 1;
  if (v68)
    memcpy(v70, v68, v69);
  else
    bzero(v70, v69);
  v461 = (uint64_t (**)())off_24C335D90;
  v71 = SHIBYTE(v346.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v346.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v462, v346.__r_.__value_.__l.__data_, v346.__r_.__value_.__l.__size_);
  else
    v462 = v346;
  v463 = v131;
  v461 = off_24C335AF8;
  v464 = v129;
  v457 = (uint64_t (**)())off_24C335D90;
  v72 = SHIBYTE(v342.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v342.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v458, v342.__r_.__value_.__l.__data_, v342.__r_.__value_.__l.__size_);
  else
    v458 = v342;
  v459 = v127;
  v457 = off_24C335AF8;
  v460 = v125;
  v453 = (uint64_t (**)())off_24C335D90;
  v134 = SHIBYTE(v338.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v338.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v454, v338.__r_.__value_.__l.__data_, v338.__r_.__value_.__l.__size_);
  else
    v454 = v338;
  v455 = v123;
  v453 = off_24C335AF8;
  v456 = v121;
  v449 = (uint64_t (**)())off_24C335D90;
  v132 = SHIBYTE(v334.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v334.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v450, v334.__r_.__value_.__l.__data_, v334.__r_.__value_.__l.__size_);
  else
    v450 = v334;
  v451 = v119;
  v449 = off_24C335AF8;
  v452 = v118;
  v444 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v329.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v445, v329.__r_.__value_.__l.__data_, v329.__r_.__value_.__l.__size_);
  else
    v445 = v329;
  v446 = v330;
  v444 = &off_24C335AB8;
  v447 = v331;
  if (SHIBYTE(v332.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v448, v332.__r_.__value_.__l.__data_, v332.__r_.__value_.__l.__size_);
  else
    v448 = v332;
  v440 = (uint64_t (**)())off_24C335D90;
  v130 = SHIBYTE(v325.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v325.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v441, v325.__r_.__value_.__l.__data_, v325.__r_.__value_.__l.__size_);
  else
    v441 = v325;
  v442 = v117;
  v440 = off_24C335AF8;
  v443 = v116;
  v436 = (uint64_t (**)())off_24C335D90;
  v128 = SHIBYTE(v321.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v321.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v437, v321.__r_.__value_.__l.__data_, v321.__r_.__value_.__l.__size_);
  else
    v437 = v321;
  v438 = v115;
  v436 = off_24C335AF8;
  v439 = v114;
  v432 = (uint64_t (**)())off_24C335D90;
  v126 = SHIBYTE(v317.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v317.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v433, v317.__r_.__value_.__l.__data_, v317.__r_.__value_.__l.__size_);
  else
    v433 = v317;
  v434 = v113;
  v432 = off_24C335AF8;
  v435 = v112;
  v428 = (uint64_t (**)())off_24C335D90;
  v124 = SHIBYTE(v313.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v313.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v429, v313.__r_.__value_.__l.__data_, v313.__r_.__value_.__l.__size_);
  else
    v429 = v313;
  v430 = v111;
  v428 = off_24C335AF8;
  v431 = v110;
  v424 = (uint64_t (**)())off_24C335D90;
  v122 = SHIBYTE(v309.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v309.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v425, v309.__r_.__value_.__l.__data_, v309.__r_.__value_.__l.__size_);
  else
    v425 = v309;
  v426 = v109;
  v424 = off_24C335AF8;
  v427 = v108;
  v420 = (uint64_t (**)())off_24C335D90;
  v120 = SHIBYTE(v305.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v305.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v421, v305.__r_.__value_.__l.__data_, v305.__r_.__value_.__l.__size_);
  else
    v421 = v305;
  v422 = v107;
  v420 = off_24C335AF8;
  v423 = v106;
  v411 = (uint64_t (**)())off_24C335D90;
  v90 = v71;
  v89 = v72;
  if (SHIBYTE(v296.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v412, v296.__r_.__value_.__l.__data_, v296.__r_.__value_.__l.__size_);
  else
    v412 = v296;
  v413 = v297;
  v411 = &off_24C335A98;
  v414 = v298;
  v73 = v302;
  v74 = v300;
  v415 = &off_24C331510;
  v416 = v300;
  v417 = v300;
  if (v300)
    v75 = (void *)operator new[]();
  else
    v75 = 0;
  v418 = v75;
  v419 = 1;
  if (v73)
    memcpy(v75, v73, v74);
  else
    bzero(v75, v74);
  v407 = (uint64_t (**)())off_24C335D90;
  v76 = SHIBYTE(v292.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v292.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v408, v292.__r_.__value_.__l.__data_, v292.__r_.__value_.__l.__size_);
  else
    v408 = v292;
  v409 = v105;
  v407 = off_24C335AF8;
  v410 = v104;
  v402 = (uint64_t (**)())off_24C335D90;
  v77 = SHIBYTE(v287.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v287.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v403, v287.__r_.__value_.__l.__data_, v287.__r_.__value_.__l.__size_);
  else
    v403 = v287;
  v402 = off_24C335B18;
  v405 = v289;
  v404 = v103;
  v406 = v290;
  v397 = (uint64_t (**)())off_24C335D90;
  v78 = SHIBYTE(v282.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v282.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v398, v282.__r_.__value_.__l.__data_, v282.__r_.__value_.__l.__size_);
  else
    v398 = v282;
  v397 = off_24C335B18;
  v400 = v284;
  v399 = v102;
  v401 = v285;
  v392 = (uint64_t (**)())off_24C335D90;
  v79 = SHIBYTE(v277.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v277.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v393, v277.__r_.__value_.__l.__data_, v277.__r_.__value_.__l.__size_);
  else
    v393 = v277;
  v392 = off_24C335B18;
  v395 = v279;
  v394 = v101;
  v396 = v280;
  v388 = (uint64_t (**)())off_24C335D90;
  v80 = SHIBYTE(v273.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v273.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v389, v273.__r_.__value_.__l.__data_, v273.__r_.__value_.__l.__size_);
  else
    v389 = v273;
  v390 = v100;
  v388 = off_24C335AF8;
  v391 = v99;
  v383 = (uint64_t (**)())off_24C335D90;
  v81 = SHIBYTE(v268.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v268.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v384, v268.__r_.__value_.__l.__data_, v268.__r_.__value_.__l.__size_);
  else
    v384 = v268;
  v383 = off_24C335B18;
  v386 = v270;
  v385 = v98;
  v387 = v271;
  v378 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v263.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v379, v263.__r_.__value_.__l.__data_, v263.__r_.__value_.__l.__size_);
  else
    v379 = v263;
  v380 = v264;
  v378 = &off_24C335AB8;
  v381 = v265;
  if (SHIBYTE(v266.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v382, v266.__r_.__value_.__l.__data_, v266.__r_.__value_.__l.__size_);
  else
    v382 = v266;
  v373 = (uint64_t (**)())off_24C335D90;
  v82 = SHIBYTE(v258.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v258.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&__p, v258.__r_.__value_.__l.__data_, v258.__r_.__value_.__l.__size_);
  else
    __p = v258;
  v373 = off_24C335B18;
  v376 = v260;
  v375 = v97;
  v377 = v261;
  mediaplatform::DatabaseColumnTuple<3ul,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>>::DatabaseColumnTuple(v41, (uint64_t)&v479, (uint64_t)&v474, (uint64_t)&v465, (uint64_t)&v461, (uint64_t)&v457, (uint64_t)&v453, (uint64_t)&v449, (uint64_t)&v444, (uint64_t)&v440, (uint64_t)&v436, (uint64_t)&v432, (uint64_t)&v428, (uint64_t)&v424, (uint64_t)&v420, (uint64_t)&v411, (uint64_t)&v407, (uint64_t)&v402, (uint64_t)&v397,
    (uint64_t)&v392,
    (uint64_t)&v388,
    (uint64_t)&v383,
    (uint64_t)&v378,
    (uint64_t)&v373);
  v373 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v378);
  v383 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v384.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v384.__r_.__value_.__l.__data_);
  v388 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v389.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v389.__r_.__value_.__l.__data_);
  v392 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v393.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v393.__r_.__value_.__l.__data_);
  v397 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v398.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v398.__r_.__value_.__l.__data_);
  v402 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v403.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v403.__r_.__value_.__l.__data_);
  v407 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v408.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v408.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<mediaplatform::Data>::~DatabaseColumn((uint64_t)&v411);
  v420 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v421.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v421.__r_.__value_.__l.__data_);
  v424 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v425.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v425.__r_.__value_.__l.__data_);
  v428 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v429.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v429.__r_.__value_.__l.__data_);
  v432 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v433.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v433.__r_.__value_.__l.__data_);
  v436 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v437.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v437.__r_.__value_.__l.__data_);
  v440 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v441.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v441.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v444);
  v449 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v450.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v450.__r_.__value_.__l.__data_);
  v453 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v454.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v454.__r_.__value_.__l.__data_);
  v457 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v458.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v458.__r_.__value_.__l.__data_);
  v461 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v462.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v462.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<mediaplatform::Data>::~DatabaseColumn((uint64_t)&v465);
  v474 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v475.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v475.__r_.__value_.__l.__data_);
  v479 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v480.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v480.__r_.__value_.__l.__data_);
  *(_QWORD *)(v41 + 1200) = off_24C335D90;
  if (SHIBYTE(v369.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external((std::string *)(v41 + 1208), v369.__r_.__value_.__l.__data_, v369.__r_.__value_.__l.__size_);
  else
    *(std::string *)(v41 + 1208) = v369;
  *(_DWORD *)(v41 + 1232) = v370;
  *(_QWORD *)(v41 + 1200) = &off_24C335AB8;
  *(_BYTE *)(v41 + 1236) = v371;
  v83 = (std::string *)(v41 + 1240);
  if (SHIBYTE(v372.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v83, v372.__r_.__value_.__l.__data_, v372.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v83->__r_.__value_.__l.__data_ = *(_OWORD *)&v372.__r_.__value_.__l.__data_;
    *(_QWORD *)(v41 + 1256) = *((_QWORD *)&v372.__r_.__value_.__l + 2);
  }
  v257 = (uint64_t (**)())off_24C335D90;
  if (v82 < 0)
    operator delete(v258.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v262);
  v267 = (uint64_t (**)())off_24C335D90;
  if (v81 < 0)
    operator delete(v268.__r_.__value_.__l.__data_);
  v272 = (uint64_t (**)())off_24C335D90;
  if (v80 < 0)
    operator delete(v273.__r_.__value_.__l.__data_);
  v276 = (uint64_t (**)())off_24C335D90;
  if (v79 < 0)
    operator delete(v277.__r_.__value_.__l.__data_);
  v281 = (uint64_t (**)())off_24C335D90;
  if (v78 < 0)
    operator delete(v282.__r_.__value_.__l.__data_);
  v286 = (uint64_t (**)())off_24C335D90;
  if (v77 < 0)
    operator delete(v287.__r_.__value_.__l.__data_);
  v291 = (uint64_t (**)())off_24C335D90;
  if (v76 < 0)
    operator delete(v292.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<mediaplatform::Data>::~DatabaseColumn((uint64_t)&v295);
  v304 = (uint64_t (**)())off_24C335D90;
  if (v120 < 0)
    operator delete(v305.__r_.__value_.__l.__data_);
  v308 = (uint64_t (**)())off_24C335D90;
  if (v122 < 0)
    operator delete(v309.__r_.__value_.__l.__data_);
  v312 = (uint64_t (**)())off_24C335D90;
  if (v124 < 0)
    operator delete(v313.__r_.__value_.__l.__data_);
  v316 = (uint64_t (**)())off_24C335D90;
  if (v126 < 0)
    operator delete(v317.__r_.__value_.__l.__data_);
  v320 = (uint64_t (**)())off_24C335D90;
  if (v128 < 0)
    operator delete(v321.__r_.__value_.__l.__data_);
  v324 = (uint64_t (**)())off_24C335D90;
  if (v130 < 0)
    operator delete(v325.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v328);
  v333 = (uint64_t (**)())off_24C335D90;
  if (v132 < 0)
    operator delete(v334.__r_.__value_.__l.__data_);
  v337 = (uint64_t (**)())off_24C335D90;
  if (v134 < 0)
    operator delete(v338.__r_.__value_.__l.__data_);
  v341 = (uint64_t (**)())off_24C335D90;
  if (v89 < 0)
    operator delete(v342.__r_.__value_.__l.__data_);
  v345 = (uint64_t (**)())off_24C335D90;
  if (v90 < 0)
    operator delete(v346.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<mediaplatform::Data>::~DatabaseColumn((uint64_t)&v349);
  v358 = (uint64_t (**)())off_24C335D90;
  if (v136 < 0)
    operator delete(v359.__r_.__value_.__l.__data_);
  v363 = (uint64_t (**)())off_24C335D90;
  if (v93 < 0)
    operator delete(v364.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v368);
  *(_QWORD *)(v41 + 1264) = off_24C335D90;
  if (SHIBYTE(v253.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external((std::string *)(v41 + 1272), v253.__r_.__value_.__l.__data_, v253.__r_.__value_.__l.__size_);
  else
    *(std::string *)(v41 + 1272) = v253;
  *(_DWORD *)(v41 + 1296) = v254;
  *(_QWORD *)(v41 + 1264) = &off_24C335AB8;
  *(_BYTE *)(v41 + 1300) = v255;
  v84 = (std::string *)(v41 + 1304);
  if (SHIBYTE(v256.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v84, v256.__r_.__value_.__l.__data_, v256.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v84->__r_.__value_.__l.__data_ = *(_OWORD *)&v256.__r_.__value_.__l.__data_;
    *(_QWORD *)(v41 + 1320) = *((_QWORD *)&v256.__r_.__value_.__l + 2);
  }
  if (v92 < 0)
    operator delete(v137.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v141);
  if ((v96 & 0x80000000) == 0)
  {
    if ((v94 & 0x80000000) == 0)
      goto LABEL_372;
LABEL_406:
    operator delete(v152.__r_.__value_.__l.__data_);
    if ((v91 & 0x80000000) == 0)
      goto LABEL_373;
    goto LABEL_407;
  }
  operator delete(v147.__r_.__value_.__l.__data_);
  if (v94 < 0)
    goto LABEL_406;
LABEL_372:
  if ((v91 & 0x80000000) == 0)
    goto LABEL_373;
LABEL_407:
  operator delete(v156.__r_.__value_.__l.__data_);
LABEL_373:
  if (SHIBYTE(v161.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v161.__r_.__value_.__l.__data_);
  if (SHIBYTE(v166.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v166.__r_.__value_.__l.__data_);
  if (SHIBYTE(v171.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v171.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<mediaplatform::Data>::~DatabaseColumn((uint64_t)&v174);
  if (SHIBYTE(v184.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v184.__r_.__value_.__l.__data_);
  if (SHIBYTE(v188.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v188.__r_.__value_.__l.__data_);
  if (SHIBYTE(v192.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v192.__r_.__value_.__l.__data_);
  if (SHIBYTE(v196.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v196.__r_.__value_.__l.__data_);
  if (SHIBYTE(v200.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v200.__r_.__value_.__l.__data_);
  if (SHIBYTE(v204.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v204.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v207);
  if (SHIBYTE(v213.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v213.__r_.__value_.__l.__data_);
  if (SHIBYTE(v217.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v217.__r_.__value_.__l.__data_);
  if (SHIBYTE(v221.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v221.__r_.__value_.__l.__data_);
  if (SHIBYTE(v225.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v225.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<mediaplatform::Data>::~DatabaseColumn((uint64_t)&v228);
  if (SHIBYTE(v238.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v238.__r_.__value_.__l.__data_);
  if (SHIBYTE(v243.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v243.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v247);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v252);
  *(_QWORD *)(v41 + 1328) = off_24C335D90;
  v85 = (std::string *)(v41 + 1336);
  if (*(char *)(v95 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v85, *(const std::string::value_type **)(v95 + 8), *(_QWORD *)(v95 + 16));
  }
  else
  {
    v86 = *(_OWORD *)(v95 + 8);
    *(_QWORD *)(v41 + 1352) = *(_QWORD *)(v95 + 24);
    *(_OWORD *)&v85->__r_.__value_.__l.__data_ = v86;
  }
  *(_DWORD *)(v41 + 1360) = *(_DWORD *)(v95 + 32);
  *(_QWORD *)(v41 + 1328) = off_24C335B18;
  v87 = *(_QWORD *)(v95 + 36);
  *(_DWORD *)(v41 + 1372) = *(_DWORD *)(v95 + 44);
  *(_QWORD *)(v41 + 1364) = v87;
  return v41;
}

void sub_20A6BE478(_Unwind_Exception *a1)
{
  uint64_t v1;

  mediaplatform::DatabaseColumnTuple<1ul,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>>::~DatabaseColumnTuple(v1);
  _Unwind_Resume(a1);
}

_QWORD *mediaplatform::DatabaseTable<long long,std::string,std::string,int,int,double,int,std::string,long long,mediaplatform::Data,int,long long,int,int,int,int,int,long long,std::string,std::string,std::string,std::string,std::string,std::string,long long,long long,int,std::string,std::string,std::string,std::string,int,int,int>::DatabaseTable(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36)
{
  _QWORD *v36;
  __int128 *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  std::string *v51;
  __int128 v52;
  int v53;
  int v54;
  int v55;
  int v56;
  int v57;
  int v58;
  const void *v59;
  size_t v60;
  void *v61;
  int v62;
  int v63;
  int v64;
  int v65;
  int v66;
  int v67;
  int v68;
  int v69;
  uint64_t v70;
  uint64_t v71;
  int v72;
  int v73;
  int v74;
  const void *v75;
  size_t v76;
  void *v77;
  int v78;
  int v79;
  int v80;
  int v81;
  int v82;
  int v83;
  int v84;
  int v85;
  int v86;
  int v87;
  std::string *v88;
  int v89;
  int v91;
  uint64_t v92;
  int v93;
  uint64_t v94;
  int v95;
  uint64_t v96;
  int v97;
  uint64_t v98;
  int v99;
  int v100;
  int v101;
  int v102;
  uint64_t v103;
  int v104;
  uint64_t v105;
  int v106;
  uint64_t v107;
  int v108;
  uint64_t v109;
  int v110;
  uint64_t v111;
  int v112;
  int v113;
  uint64_t v114;
  int v115;
  int v116;
  int v117;
  int v118;
  uint64_t v119;
  int v120;
  int v121;
  int v122;
  int v123;
  int v124;
  uint64_t v125;
  int v126;
  int v127;
  int v128;
  uint64_t v129;
  int v130;
  int v131;
  int v132;
  _QWORD *v133;
  std::string v134;
  int v135;
  uint64_t v136;
  uint64_t (**v137)();
  std::string v138;
  int v139;
  uint64_t v140;
  uint64_t (**v141)();
  std::string v142;
  int v143;
  uint64_t v144;
  uint64_t (**v145)();
  std::string v146;
  int v147;
  char v148;
  std::string v149;
  uint64_t (**v150)();
  std::string v151;
  int v152;
  char v153;
  std::string v154;
  uint64_t (**v155)();
  std::string v156;
  int v157;
  char v158;
  std::string v159;
  uint64_t (**v160)();
  std::string v161;
  int v162;
  char v163;
  std::string v164;
  uint64_t (**v165)();
  std::string v166;
  int v167;
  uint64_t v168;
  uint64_t (**v169)();
  std::string v170;
  int v171;
  uint64_t v172;
  int v173;
  uint64_t (**v174)();
  std::string v175;
  int v176;
  uint64_t v177;
  int v178;
  uint64_t (**v179)();
  std::string v180;
  int v181;
  char v182;
  std::string v183;
  uint64_t (**v184)();
  std::string v185;
  int v186;
  char v187;
  std::string v188;
  uint64_t (**v189)();
  std::string v190;
  int v191;
  char v192;
  std::string v193;
  uint64_t (**v194)();
  std::string v195;
  int v196;
  char v197;
  std::string v198;
  uint64_t (**v199)();
  std::string v200;
  int v201;
  char v202;
  std::string v203;
  uint64_t (**v204)();
  std::string v205;
  int v206;
  char v207;
  std::string v208;
  uint64_t (**v209)();
  std::string v210;
  int v211;
  uint64_t v212;
  int v213;
  uint64_t (**v214)();
  std::string v215;
  int v216;
  uint64_t v217;
  uint64_t (**v218)();
  std::string v219;
  int v220;
  uint64_t v221;
  uint64_t (**v222)();
  std::string v223;
  int v224;
  uint64_t v225;
  uint64_t (**v226)();
  std::string v227;
  int v228;
  uint64_t v229;
  uint64_t (**v230)();
  std::string v231;
  int v232;
  uint64_t v233;
  uint64_t (**v234)();
  std::string v235;
  int v236;
  uint64_t v237;
  int v238;
  uint64_t (**v239)();
  std::string v240;
  int v241;
  uint64_t v242;
  uint64_t (**v243)();
  std::string v244;
  int v245;
  char v246;
  void (**v247)(mediaplatform::Data *__hidden);
  size_t v248;
  size_t v249;
  const void *v250;
  char v251;
  uint64_t (**v252)();
  std::string v253;
  int v254;
  uint64_t v255;
  int v256;
  uint64_t (**v257)();
  std::string v258;
  int v259;
  char v260;
  std::string v261;
  uint64_t (**v262)();
  std::string v263;
  int v264;
  uint64_t v265;
  uint64_t (**v266)();
  std::string v267;
  int v268;
  uint64_t v269;
  int v270;
  uint64_t (**v271)();
  std::string v272;
  int v273;
  uint64_t v274;
  uint64_t (**v275)();
  std::string v276;
  int v277;
  uint64_t v278;
  uint64_t (**v279)();
  std::string v280;
  int v281;
  char v282;
  std::string v283;
  uint64_t (**v284)();
  std::string __s;
  int v286;
  char v287;
  std::string v288;
  uint64_t (**v289)();
  std::string v290;
  int v291;
  uint64_t v292;
  int v293;
  uint64_t (**v294)();
  std::string __p;
  int v296;
  uint64_t v297;
  uint64_t (**v298)();
  std::string v299;
  int v300;
  uint64_t v301;
  uint64_t (**v302)();
  std::string v303;
  int v304;
  uint64_t v305;
  uint64_t (**v306)();
  std::string v307;
  int v308;
  char v309;
  std::string v310;
  uint64_t (**v311)();
  std::string v312;
  int v313;
  char v314;
  std::string v315;
  uint64_t (**v316)();
  std::string v317;
  int v318;
  char v319;
  std::string v320;
  uint64_t (**v321)();
  std::string v322;
  int v323;
  char v324;
  std::string v325;
  uint64_t (**v326)();
  std::string v327;
  int v328;
  uint64_t v329;
  uint64_t (**v330)();
  std::string v331;
  int v332;
  uint64_t v333;
  int v334;
  uint64_t (**v335)();
  std::string v336;
  int v337;
  uint64_t v338;
  int v339;
  uint64_t (**v340)();
  std::string v341;
  int v342;
  char v343;
  std::string v344;
  uint64_t (**v345)();
  std::string v346;
  int v347;
  char v348;
  std::string v349;
  uint64_t (**v350)();
  std::string v351;
  int v352;
  char v353;
  std::string v354;
  uint64_t (**v355)();
  std::string v356;
  int v357;
  char v358;
  std::string v359;
  uint64_t (**v360)();
  std::string v361;
  int v362;
  char v363;
  std::string v364;
  uint64_t (**v365)();
  std::string v366;
  int v367;
  char v368;
  std::string v369;
  uint64_t (**v370)();
  std::string v371;
  int v372;
  uint64_t v373;
  int v374;
  uint64_t (**v375)();
  std::string v376;
  int v377;
  uint64_t v378;
  uint64_t (**v379)();
  std::string v380;
  int v381;
  uint64_t v382;
  uint64_t (**v383)();
  std::string v384;
  int v385;
  uint64_t v386;
  uint64_t (**v387)();
  std::string v388;
  int v389;
  uint64_t v390;
  uint64_t (**v391)();
  std::string v392;
  int v393;
  uint64_t v394;
  uint64_t (**v395)();
  std::string v396;
  int v397;
  uint64_t v398;
  int v399;
  uint64_t (**v400)();
  std::string v401;
  int v402;
  uint64_t v403;
  uint64_t (**v404)();
  std::string v405;
  int v406;
  char v407;
  void (**v408)(mediaplatform::Data *__hidden);
  size_t v409;
  size_t v410;
  void *v411;
  char v412;
  uint64_t (**v413)();
  std::string v414;
  int v415;
  uint64_t v416;
  int v417;
  uint64_t (**v418)();
  std::string v419;
  int v420;
  char v421;
  std::string v422;
  uint64_t (**v423)();
  std::string v424;
  int v425;
  uint64_t v426;
  uint64_t (**v427)();
  std::string v428;
  int v429;
  uint64_t v430;
  int v431;
  uint64_t (**v432)();
  std::string v433;
  int v434;
  uint64_t v435;
  uint64_t (**v436)();
  std::string v437;
  int v438;
  uint64_t v439;
  uint64_t (**v440)();
  std::string v441;
  int v442;
  char v443;
  std::string v444;
  uint64_t (**v445)();
  std::string v446;
  int v447;
  char v448;
  std::string v449;

  v36 = (_QWORD *)MEMORY[0x24BDAC7A8](a1);
  v39 = v38;
  v41 = v40;
  v43 = v42;
  v45 = v44;
  v47 = v46;
  v49 = v48;
  v50 = v36;
  *v36 = &off_24C330F50;
  v51 = (std::string *)(v36 + 1);
  if (*((char *)v37 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v51, *(const std::string::value_type **)v37, *((_QWORD *)v37 + 1));
  }
  else
  {
    v52 = *v37;
    v51->__r_.__value_.__r.__words[2] = *((_QWORD *)v37 + 2);
    *(_OWORD *)&v51->__r_.__value_.__l.__data_ = v52;
  }
  v50[4] = 0;
  v50[5] = 0;
  v50[6] = 0;
  v50[7] = 0;
  *v50 = &off_24C335670;
  v50[8] = 0;
  v50[9] = 0;
  v133 = v50;
  if (*(char *)(v49 + 31) < 0)
    std::string::__init_copy_ctor_external(&v290, *(const std::string::value_type **)(v49 + 8), *(_QWORD *)(v49 + 16));
  else
    v290 = *(std::string *)(v49 + 8);
  v53 = *(_DWORD *)(v49 + 32);
  v289 = off_24C335B18;
  v292 = *(_QWORD *)(v49 + 36);
  v54 = *(_DWORD *)(v49 + 44);
  v291 = v53;
  v293 = v54;
  v284 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(v47 + 31) < 0)
    std::string::__init_copy_ctor_external(&__s, *(const std::string::value_type **)(v47 + 8), *(_QWORD *)(v47 + 16));
  else
    __s = *(std::string *)(v47 + 8);
  v286 = *(_DWORD *)(v47 + 32);
  v284 = &off_24C335AB8;
  v287 = *(_BYTE *)(v47 + 36);
  if (*(char *)(v47 + 63) < 0)
    std::string::__init_copy_ctor_external(&v288, *(const std::string::value_type **)(v47 + 40), *(_QWORD *)(v47 + 48));
  else
    v288 = *(std::string *)(v47 + 40);
  v279 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(v45 + 31) < 0)
    std::string::__init_copy_ctor_external(&v280, *(const std::string::value_type **)(v45 + 8), *(_QWORD *)(v45 + 16));
  else
    v280 = *(std::string *)(v45 + 8);
  v281 = *(_DWORD *)(v45 + 32);
  v279 = &off_24C335AB8;
  v282 = *(_BYTE *)(v45 + 36);
  if (*(char *)(v45 + 63) < 0)
    std::string::__init_copy_ctor_external(&v283, *(const std::string::value_type **)(v45 + 40), *(_QWORD *)(v45 + 48));
  else
    v283 = *(std::string *)(v45 + 40);
  if (*(char *)(v43 + 31) < 0)
    std::string::__init_copy_ctor_external(&v276, *(const std::string::value_type **)(v43 + 8), *(_QWORD *)(v43 + 16));
  else
    v276 = *(std::string *)(v43 + 8);
  v131 = *(_DWORD *)(v43 + 32);
  v277 = v131;
  v275 = off_24C335AF8;
  v129 = *(_QWORD *)(v43 + 36);
  v278 = v129;
  if (*(char *)(v41 + 31) < 0)
    std::string::__init_copy_ctor_external(&v272, *(const std::string::value_type **)(v41 + 8), *(_QWORD *)(v41 + 16));
  else
    v272 = *(std::string *)(v41 + 8);
  v127 = *(_DWORD *)(v41 + 32);
  v273 = v127;
  v271 = off_24C335AF8;
  v125 = *(_QWORD *)(v41 + 36);
  v274 = v125;
  if (*(char *)(v39 + 31) < 0)
    std::string::__init_copy_ctor_external(&v267, *(const std::string::value_type **)(v39 + 8), *(_QWORD *)(v39 + 16));
  else
    v267 = *(std::string *)(v39 + 8);
  v55 = *(_DWORD *)(v39 + 32);
  v266 = off_24C335AD8;
  v269 = *(_QWORD *)(v39 + 36);
  v56 = *(_DWORD *)(v39 + 44);
  v123 = v55;
  v268 = v55;
  v270 = v56;
  if (*(char *)(a9 + 31) < 0)
    std::string::__init_copy_ctor_external(&v263, *(const std::string::value_type **)(a9 + 8), *(_QWORD *)(a9 + 16));
  else
    v263 = *(std::string *)(a9 + 8);
  v121 = *(_DWORD *)(a9 + 32);
  v264 = v121;
  v262 = off_24C335AF8;
  v119 = *(_QWORD *)(a9 + 36);
  v265 = v119;
  v257 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a10 + 31) < 0)
    std::string::__init_copy_ctor_external(&v258, *(const std::string::value_type **)(a10 + 8), *(_QWORD *)(a10 + 16));
  else
    v258 = *(std::string *)(a10 + 8);
  v259 = *(_DWORD *)(a10 + 32);
  v257 = &off_24C335AB8;
  v260 = *(_BYTE *)(a10 + 36);
  if (*(char *)(a10 + 63) < 0)
    std::string::__init_copy_ctor_external(&v261, *(const std::string::value_type **)(a10 + 40), *(_QWORD *)(a10 + 48));
  else
    v261 = *(std::string *)(a10 + 40);
  if (*(char *)(a11 + 31) < 0)
    std::string::__init_copy_ctor_external(&v253, *(const std::string::value_type **)(a11 + 8), *(_QWORD *)(a11 + 16));
  else
    v253 = *(std::string *)(a11 + 8);
  v57 = *(_DWORD *)(a11 + 32);
  v252 = off_24C335B18;
  v255 = *(_QWORD *)(a11 + 36);
  v58 = *(_DWORD *)(a11 + 44);
  v117 = v57;
  v254 = v57;
  v256 = v58;
  v243 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a12 + 31) < 0)
    std::string::__init_copy_ctor_external(&v244, *(const std::string::value_type **)(a12 + 8), *(_QWORD *)(a12 + 16));
  else
    v244 = *(std::string *)(a12 + 8);
  v245 = *(_DWORD *)(a12 + 32);
  v243 = &off_24C335A98;
  v246 = *(_BYTE *)(a12 + 36);
  v59 = *(const void **)(a12 + 64);
  v60 = *(_QWORD *)(a12 + 48);
  v247 = &off_24C331510;
  v248 = v60;
  v249 = v60;
  if (v60)
    v61 = (void *)operator new[]();
  else
    v61 = 0;
  v250 = v61;
  v251 = 1;
  if (v59)
    memcpy(v61, v59, v60);
  else
    bzero(v61, v60);
  if (*(char *)(a13 + 31) < 0)
    std::string::__init_copy_ctor_external(&v240, *(const std::string::value_type **)(a13 + 8), *(_QWORD *)(a13 + 16));
  else
    v240 = *(std::string *)(a13 + 8);
  v115 = *(_DWORD *)(a13 + 32);
  v241 = v115;
  v239 = off_24C335AF8;
  v114 = *(_QWORD *)(a13 + 36);
  v242 = v114;
  if (*(char *)(a14 + 31) < 0)
    std::string::__init_copy_ctor_external(&v235, *(const std::string::value_type **)(a14 + 8), *(_QWORD *)(a14 + 16));
  else
    v235 = *(std::string *)(a14 + 8);
  v62 = *(_DWORD *)(a14 + 32);
  v234 = off_24C335B18;
  v237 = *(_QWORD *)(a14 + 36);
  v63 = *(_DWORD *)(a14 + 44);
  v113 = v62;
  v236 = v62;
  v238 = v63;
  if (*(char *)(a15 + 31) < 0)
    std::string::__init_copy_ctor_external(&v231, *(const std::string::value_type **)(a15 + 8), *(_QWORD *)(a15 + 16));
  else
    v231 = *(std::string *)(a15 + 8);
  v112 = *(_DWORD *)(a15 + 32);
  v232 = v112;
  v230 = off_24C335AF8;
  v111 = *(_QWORD *)(a15 + 36);
  v233 = v111;
  if (*(char *)(a16 + 31) < 0)
    std::string::__init_copy_ctor_external(&v227, *(const std::string::value_type **)(a16 + 8), *(_QWORD *)(a16 + 16));
  else
    v227 = *(std::string *)(a16 + 8);
  v110 = *(_DWORD *)(a16 + 32);
  v228 = v110;
  v226 = off_24C335AF8;
  v109 = *(_QWORD *)(a16 + 36);
  v229 = v109;
  if (*(char *)(a17 + 31) < 0)
    std::string::__init_copy_ctor_external(&v223, *(const std::string::value_type **)(a17 + 8), *(_QWORD *)(a17 + 16));
  else
    v223 = *(std::string *)(a17 + 8);
  v108 = *(_DWORD *)(a17 + 32);
  v224 = v108;
  v222 = off_24C335AF8;
  v107 = *(_QWORD *)(a17 + 36);
  v225 = v107;
  if (*(char *)(a18 + 31) < 0)
    std::string::__init_copy_ctor_external(&v219, *(const std::string::value_type **)(a18 + 8), *(_QWORD *)(a18 + 16));
  else
    v219 = *(std::string *)(a18 + 8);
  v106 = *(_DWORD *)(a18 + 32);
  v220 = v106;
  v218 = off_24C335AF8;
  v105 = *(_QWORD *)(a18 + 36);
  v221 = v105;
  if (*(char *)(a19 + 31) < 0)
    std::string::__init_copy_ctor_external(&v215, *(const std::string::value_type **)(a19 + 8), *(_QWORD *)(a19 + 16));
  else
    v215 = *(std::string *)(a19 + 8);
  v104 = *(_DWORD *)(a19 + 32);
  v216 = v104;
  v214 = off_24C335AF8;
  v103 = *(_QWORD *)(a19 + 36);
  v217 = v103;
  if (*(char *)(a20 + 31) < 0)
    std::string::__init_copy_ctor_external(&v210, *(const std::string::value_type **)(a20 + 8), *(_QWORD *)(a20 + 16));
  else
    v210 = *(std::string *)(a20 + 8);
  v64 = *(_DWORD *)(a20 + 32);
  v209 = off_24C335B18;
  v212 = *(_QWORD *)(a20 + 36);
  v65 = *(_DWORD *)(a20 + 44);
  v102 = v64;
  v211 = v64;
  v213 = v65;
  v204 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a21 + 31) < 0)
    std::string::__init_copy_ctor_external(&v205, *(const std::string::value_type **)(a21 + 8), *(_QWORD *)(a21 + 16));
  else
    v205 = *(std::string *)(a21 + 8);
  v206 = *(_DWORD *)(a21 + 32);
  v204 = &off_24C335AB8;
  v207 = *(_BYTE *)(a21 + 36);
  if (*(char *)(a21 + 63) < 0)
    std::string::__init_copy_ctor_external(&v208, *(const std::string::value_type **)(a21 + 40), *(_QWORD *)(a21 + 48));
  else
    v208 = *(std::string *)(a21 + 40);
  v199 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a22 + 31) < 0)
    std::string::__init_copy_ctor_external(&v200, *(const std::string::value_type **)(a22 + 8), *(_QWORD *)(a22 + 16));
  else
    v200 = *(std::string *)(a22 + 8);
  v201 = *(_DWORD *)(a22 + 32);
  v199 = &off_24C335AB8;
  v202 = *(_BYTE *)(a22 + 36);
  if (*(char *)(a22 + 63) < 0)
    std::string::__init_copy_ctor_external(&v203, *(const std::string::value_type **)(a22 + 40), *(_QWORD *)(a22 + 48));
  else
    v203 = *(std::string *)(a22 + 40);
  v194 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a23 + 31) < 0)
    std::string::__init_copy_ctor_external(&v195, *(const std::string::value_type **)(a23 + 8), *(_QWORD *)(a23 + 16));
  else
    v195 = *(std::string *)(a23 + 8);
  v196 = *(_DWORD *)(a23 + 32);
  v194 = &off_24C335AB8;
  v197 = *(_BYTE *)(a23 + 36);
  if (*(char *)(a23 + 63) < 0)
    std::string::__init_copy_ctor_external(&v198, *(const std::string::value_type **)(a23 + 40), *(_QWORD *)(a23 + 48));
  else
    v198 = *(std::string *)(a23 + 40);
  v189 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a24 + 31) < 0)
    std::string::__init_copy_ctor_external(&v190, *(const std::string::value_type **)(a24 + 8), *(_QWORD *)(a24 + 16));
  else
    v190 = *(std::string *)(a24 + 8);
  v191 = *(_DWORD *)(a24 + 32);
  v189 = &off_24C335AB8;
  v192 = *(_BYTE *)(a24 + 36);
  if (*(char *)(a24 + 63) < 0)
    std::string::__init_copy_ctor_external(&v193, *(const std::string::value_type **)(a24 + 40), *(_QWORD *)(a24 + 48));
  else
    v193 = *(std::string *)(a24 + 40);
  v184 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a25 + 31) < 0)
    std::string::__init_copy_ctor_external(&v185, *(const std::string::value_type **)(a25 + 8), *(_QWORD *)(a25 + 16));
  else
    v185 = *(std::string *)(a25 + 8);
  v186 = *(_DWORD *)(a25 + 32);
  v184 = &off_24C335AB8;
  v187 = *(_BYTE *)(a25 + 36);
  if (*(char *)(a25 + 63) < 0)
    std::string::__init_copy_ctor_external(&v188, *(const std::string::value_type **)(a25 + 40), *(_QWORD *)(a25 + 48));
  else
    v188 = *(std::string *)(a25 + 40);
  v179 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a26 + 31) < 0)
    std::string::__init_copy_ctor_external(&v180, *(const std::string::value_type **)(a26 + 8), *(_QWORD *)(a26 + 16));
  else
    v180 = *(std::string *)(a26 + 8);
  v181 = *(_DWORD *)(a26 + 32);
  v179 = &off_24C335AB8;
  v182 = *(_BYTE *)(a26 + 36);
  if (*(char *)(a26 + 63) < 0)
    std::string::__init_copy_ctor_external(&v183, *(const std::string::value_type **)(a26 + 40), *(_QWORD *)(a26 + 48));
  else
    v183 = *(std::string *)(a26 + 40);
  if (*(char *)(a27 + 31) < 0)
    std::string::__init_copy_ctor_external(&v175, *(const std::string::value_type **)(a27 + 8), *(_QWORD *)(a27 + 16));
  else
    v175 = *(std::string *)(a27 + 8);
  v66 = *(_DWORD *)(a27 + 32);
  v174 = off_24C335B18;
  v177 = *(_QWORD *)(a27 + 36);
  v67 = *(_DWORD *)(a27 + 44);
  v101 = v66;
  v176 = v66;
  v178 = v67;
  if (*(char *)(a28 + 31) < 0)
    std::string::__init_copy_ctor_external(&v170, *(const std::string::value_type **)(a28 + 8), *(_QWORD *)(a28 + 16));
  else
    v170 = *(std::string *)(a28 + 8);
  v68 = *(_DWORD *)(a28 + 32);
  v169 = off_24C335B18;
  v172 = *(_QWORD *)(a28 + 36);
  v69 = *(_DWORD *)(a28 + 44);
  v100 = v68;
  v171 = v68;
  v173 = v69;
  if (*(char *)(a29 + 31) < 0)
    std::string::__init_copy_ctor_external(&v166, *(const std::string::value_type **)(a29 + 8), *(_QWORD *)(a29 + 16));
  else
    v166 = *(std::string *)(a29 + 8);
  v99 = *(_DWORD *)(a29 + 32);
  v167 = v99;
  v165 = off_24C335AF8;
  v98 = *(_QWORD *)(a29 + 36);
  v168 = v98;
  v160 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a30 + 31) < 0)
    std::string::__init_copy_ctor_external(&v161, *(const std::string::value_type **)(a30 + 8), *(_QWORD *)(a30 + 16));
  else
    v161 = *(std::string *)(a30 + 8);
  v162 = *(_DWORD *)(a30 + 32);
  v160 = &off_24C335AB8;
  v163 = *(_BYTE *)(a30 + 36);
  if (*(char *)(a30 + 63) < 0)
    std::string::__init_copy_ctor_external(&v164, *(const std::string::value_type **)(a30 + 40), *(_QWORD *)(a30 + 48));
  else
    v164 = *(std::string *)(a30 + 40);
  v155 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a31 + 31) < 0)
    std::string::__init_copy_ctor_external(&v156, *(const std::string::value_type **)(a31 + 8), *(_QWORD *)(a31 + 16));
  else
    v156 = *(std::string *)(a31 + 8);
  v157 = *(_DWORD *)(a31 + 32);
  v155 = &off_24C335AB8;
  v158 = *(_BYTE *)(a31 + 36);
  if (*(char *)(a31 + 63) < 0)
    std::string::__init_copy_ctor_external(&v159, *(const std::string::value_type **)(a31 + 40), *(_QWORD *)(a31 + 48));
  else
    v159 = *(std::string *)(a31 + 40);
  v150 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a32 + 31) < 0)
    std::string::__init_copy_ctor_external(&v151, *(const std::string::value_type **)(a32 + 8), *(_QWORD *)(a32 + 16));
  else
    v151 = *(std::string *)(a32 + 8);
  v152 = *(_DWORD *)(a32 + 32);
  v150 = &off_24C335AB8;
  v153 = *(_BYTE *)(a32 + 36);
  if (*(char *)(a32 + 63) < 0)
    std::string::__init_copy_ctor_external(&v154, *(const std::string::value_type **)(a32 + 40), *(_QWORD *)(a32 + 48));
  else
    v154 = *(std::string *)(a32 + 40);
  v145 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a33 + 31) < 0)
    std::string::__init_copy_ctor_external(&v146, *(const std::string::value_type **)(a33 + 8), *(_QWORD *)(a33 + 16));
  else
    v146 = *(std::string *)(a33 + 8);
  v147 = *(_DWORD *)(a33 + 32);
  v145 = &off_24C335AB8;
  v148 = *(_BYTE *)(a33 + 36);
  if (*(char *)(a33 + 63) < 0)
    std::string::__init_copy_ctor_external(&v149, *(const std::string::value_type **)(a33 + 40), *(_QWORD *)(a33 + 48));
  else
    v149 = *(std::string *)(a33 + 40);
  if (*(char *)(a34 + 31) < 0)
    std::string::__init_copy_ctor_external(&v142, *(const std::string::value_type **)(a34 + 8), *(_QWORD *)(a34 + 16));
  else
    v142 = *(std::string *)(a34 + 8);
  v97 = *(_DWORD *)(a34 + 32);
  v143 = v97;
  v141 = off_24C335AF8;
  v96 = *(_QWORD *)(a34 + 36);
  v144 = v96;
  if (*(char *)(a35 + 31) < 0)
    std::string::__init_copy_ctor_external(&v138, *(const std::string::value_type **)(a35 + 8), *(_QWORD *)(a35 + 16));
  else
    v138 = *(std::string *)(a35 + 8);
  v95 = *(_DWORD *)(a35 + 32);
  v139 = v95;
  v137 = off_24C335AF8;
  v70 = *(_QWORD *)(a35 + 36);
  v140 = v70;
  if (*(char *)(a36 + 31) < 0)
    std::string::__init_copy_ctor_external(&v134, *(const std::string::value_type **)(a36 + 8), *(_QWORD *)(a36 + 16));
  else
    v134 = *(std::string *)(a36 + 8);
  v94 = v70;
  v93 = *(_DWORD *)(a36 + 32);
  v135 = v93;
  v71 = *(_QWORD *)(a36 + 36);
  v136 = v71;
  v445 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v446, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
  else
    v446 = __s;
  v447 = v286;
  v445 = &off_24C335AB8;
  v448 = v287;
  if (SHIBYTE(v288.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v449, v288.__r_.__value_.__l.__data_, v288.__r_.__value_.__l.__size_);
  else
    v449 = v288;
  v440 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v280.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v441, v280.__r_.__value_.__l.__data_, v280.__r_.__value_.__l.__size_);
  else
    v441 = v280;
  v442 = v281;
  v440 = &off_24C335AB8;
  v443 = v282;
  if (SHIBYTE(v283.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v444, v283.__r_.__value_.__l.__data_, v283.__r_.__value_.__l.__size_);
  else
    v444 = v283;
  if (SHIBYTE(v276.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v437, v276.__r_.__value_.__l.__data_, v276.__r_.__value_.__l.__size_);
  else
    v437 = v276;
  v438 = v131;
  v436 = off_24C335AF8;
  v439 = v129;
  v432 = (uint64_t (**)())off_24C335D90;
  v92 = v71;
  if (SHIBYTE(v272.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v433, v272.__r_.__value_.__l.__data_, v272.__r_.__value_.__l.__size_);
  else
    v433 = v272;
  v434 = v127;
  v432 = off_24C335AF8;
  v435 = v125;
  v427 = (uint64_t (**)())off_24C335D90;
  v72 = SHIBYTE(v267.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v267.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v428, v267.__r_.__value_.__l.__data_, v267.__r_.__value_.__l.__size_);
  else
    v428 = v267;
  v427 = off_24C335AD8;
  v430 = v269;
  v429 = v123;
  v431 = v270;
  v423 = (uint64_t (**)())off_24C335D90;
  v73 = SHIBYTE(v263.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v263.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v424, v263.__r_.__value_.__l.__data_, v263.__r_.__value_.__l.__size_);
  else
    v424 = v263;
  v425 = v121;
  v423 = off_24C335AF8;
  v426 = v119;
  v418 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v258.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v419, v258.__r_.__value_.__l.__data_, v258.__r_.__value_.__l.__size_);
  else
    v419 = v258;
  v420 = v259;
  v418 = &off_24C335AB8;
  v421 = v260;
  if (SHIBYTE(v261.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v422, v261.__r_.__value_.__l.__data_, v261.__r_.__value_.__l.__size_);
  else
    v422 = v261;
  v413 = (uint64_t (**)())off_24C335D90;
  v74 = SHIBYTE(v253.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v253.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v414, v253.__r_.__value_.__l.__data_, v253.__r_.__value_.__l.__size_);
  else
    v414 = v253;
  v413 = off_24C335B18;
  v416 = v255;
  v415 = v117;
  v417 = v256;
  v404 = (uint64_t (**)())off_24C335D90;
  v132 = v74;
  if (SHIBYTE(v244.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v405, v244.__r_.__value_.__l.__data_, v244.__r_.__value_.__l.__size_);
  else
    v405 = v244;
  v406 = v245;
  v404 = &off_24C335A98;
  v407 = v246;
  v75 = v250;
  v76 = v248;
  v408 = &off_24C331510;
  v409 = v248;
  v410 = v248;
  if (v248)
    v77 = (void *)operator new[]();
  else
    v77 = 0;
  v411 = v77;
  v412 = 1;
  if (v75)
    memcpy(v77, v75, v76);
  else
    bzero(v77, v76);
  v400 = (uint64_t (**)())off_24C335D90;
  v78 = SHIBYTE(v240.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v240.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v401, v240.__r_.__value_.__l.__data_, v240.__r_.__value_.__l.__size_);
  else
    v401 = v240;
  v402 = v115;
  v400 = off_24C335AF8;
  v403 = v114;
  v395 = (uint64_t (**)())off_24C335D90;
  v79 = SHIBYTE(v235.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v235.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v396, v235.__r_.__value_.__l.__data_, v235.__r_.__value_.__l.__size_);
  else
    v396 = v235;
  v395 = off_24C335B18;
  v398 = v237;
  v397 = v113;
  v399 = v238;
  v391 = (uint64_t (**)())off_24C335D90;
  v130 = SHIBYTE(v231.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v231.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v392, v231.__r_.__value_.__l.__data_, v231.__r_.__value_.__l.__size_);
  else
    v392 = v231;
  v393 = v112;
  v391 = off_24C335AF8;
  v394 = v111;
  v387 = (uint64_t (**)())off_24C335D90;
  v80 = SHIBYTE(v227.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v227.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v388, v227.__r_.__value_.__l.__data_, v227.__r_.__value_.__l.__size_);
  else
    v388 = v227;
  v389 = v110;
  v387 = off_24C335AF8;
  v390 = v109;
  v383 = (uint64_t (**)())off_24C335D90;
  v128 = SHIBYTE(v223.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v223.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v384, v223.__r_.__value_.__l.__data_, v223.__r_.__value_.__l.__size_);
  else
    v384 = v223;
  v385 = v108;
  v383 = off_24C335AF8;
  v386 = v107;
  v379 = (uint64_t (**)())off_24C335D90;
  v126 = SHIBYTE(v219.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v219.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v380, v219.__r_.__value_.__l.__data_, v219.__r_.__value_.__l.__size_);
  else
    v380 = v219;
  v381 = v106;
  v379 = off_24C335AF8;
  v382 = v105;
  v375 = (uint64_t (**)())off_24C335D90;
  v124 = SHIBYTE(v215.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v215.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v376, v215.__r_.__value_.__l.__data_, v215.__r_.__value_.__l.__size_);
  else
    v376 = v215;
  v377 = v104;
  v375 = off_24C335AF8;
  v378 = v103;
  v370 = (uint64_t (**)())off_24C335D90;
  v122 = SHIBYTE(v210.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v210.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v371, v210.__r_.__value_.__l.__data_, v210.__r_.__value_.__l.__size_);
  else
    v371 = v210;
  v370 = off_24C335B18;
  v373 = v212;
  v372 = v102;
  v374 = v213;
  v365 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v205.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v366, v205.__r_.__value_.__l.__data_, v205.__r_.__value_.__l.__size_);
  else
    v366 = v205;
  v367 = v206;
  v365 = &off_24C335AB8;
  v368 = v207;
  if (SHIBYTE(v208.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v369, v208.__r_.__value_.__l.__data_, v208.__r_.__value_.__l.__size_);
  else
    v369 = v208;
  v360 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v200.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v361, v200.__r_.__value_.__l.__data_, v200.__r_.__value_.__l.__size_);
  else
    v361 = v200;
  v362 = v201;
  v360 = &off_24C335AB8;
  v363 = v202;
  if (SHIBYTE(v203.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v364, v203.__r_.__value_.__l.__data_, v203.__r_.__value_.__l.__size_);
  else
    v364 = v203;
  v355 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v195.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v356, v195.__r_.__value_.__l.__data_, v195.__r_.__value_.__l.__size_);
  else
    v356 = v195;
  v357 = v196;
  v355 = &off_24C335AB8;
  v358 = v197;
  if (SHIBYTE(v198.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v359, v198.__r_.__value_.__l.__data_, v198.__r_.__value_.__l.__size_);
  else
    v359 = v198;
  v350 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v190.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v351, v190.__r_.__value_.__l.__data_, v190.__r_.__value_.__l.__size_);
  else
    v351 = v190;
  v352 = v191;
  v350 = &off_24C335AB8;
  v353 = v192;
  if (SHIBYTE(v193.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v354, v193.__r_.__value_.__l.__data_, v193.__r_.__value_.__l.__size_);
  else
    v354 = v193;
  v345 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v185.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v346, v185.__r_.__value_.__l.__data_, v185.__r_.__value_.__l.__size_);
  else
    v346 = v185;
  v347 = v186;
  v345 = &off_24C335AB8;
  v348 = v187;
  if (SHIBYTE(v188.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v349, v188.__r_.__value_.__l.__data_, v188.__r_.__value_.__l.__size_);
  else
    v349 = v188;
  v340 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v180.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v341, v180.__r_.__value_.__l.__data_, v180.__r_.__value_.__l.__size_);
  else
    v341 = v180;
  v342 = v181;
  v340 = &off_24C335AB8;
  v343 = v182;
  if (SHIBYTE(v183.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v344, v183.__r_.__value_.__l.__data_, v183.__r_.__value_.__l.__size_);
  else
    v344 = v183;
  v335 = (uint64_t (**)())off_24C335D90;
  v81 = SHIBYTE(v175.__r_.__value_.__r.__words[2]);
  v91 = v72;
  v120 = v79;
  if (SHIBYTE(v175.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v336, v175.__r_.__value_.__l.__data_, v175.__r_.__value_.__l.__size_);
  else
    v336 = v175;
  v335 = off_24C335B18;
  v338 = v177;
  v337 = v101;
  v339 = v178;
  v330 = (uint64_t (**)())off_24C335D90;
  v82 = SHIBYTE(v170.__r_.__value_.__r.__words[2]);
  v118 = v78;
  if (SHIBYTE(v170.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v331, v170.__r_.__value_.__l.__data_, v170.__r_.__value_.__l.__size_);
  else
    v331 = v170;
  v330 = off_24C335B18;
  v333 = v172;
  v332 = v100;
  v334 = v173;
  v326 = (uint64_t (**)())off_24C335D90;
  v83 = SHIBYTE(v166.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v166.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v327, v166.__r_.__value_.__l.__data_, v166.__r_.__value_.__l.__size_);
  else
    v327 = v166;
  v116 = v81;
  v328 = v99;
  v326 = off_24C335AF8;
  v329 = v98;
  v321 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v161.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v322, v161.__r_.__value_.__l.__data_, v161.__r_.__value_.__l.__size_);
  else
    v322 = v161;
  v323 = v162;
  v321 = &off_24C335AB8;
  v324 = v163;
  if (SHIBYTE(v164.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v325, v164.__r_.__value_.__l.__data_, v164.__r_.__value_.__l.__size_);
  else
    v325 = v164;
  v316 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v156.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v317, v156.__r_.__value_.__l.__data_, v156.__r_.__value_.__l.__size_);
  else
    v317 = v156;
  v318 = v157;
  v316 = &off_24C335AB8;
  v319 = v158;
  if (SHIBYTE(v159.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v320, v159.__r_.__value_.__l.__data_, v159.__r_.__value_.__l.__size_);
  else
    v320 = v159;
  v311 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v151.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v312, v151.__r_.__value_.__l.__data_, v151.__r_.__value_.__l.__size_);
  else
    v312 = v151;
  v313 = v152;
  v311 = &off_24C335AB8;
  v314 = v153;
  if (SHIBYTE(v154.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v315, v154.__r_.__value_.__l.__data_, v154.__r_.__value_.__l.__size_);
  else
    v315 = v154;
  v306 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v146.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v307, v146.__r_.__value_.__l.__data_, v146.__r_.__value_.__l.__size_);
  else
    v307 = v146;
  v308 = v147;
  v306 = &off_24C335AB8;
  v309 = v148;
  v84 = v80;
  if (SHIBYTE(v149.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v310, v149.__r_.__value_.__l.__data_, v149.__r_.__value_.__l.__size_);
  else
    v310 = v149;
  v302 = (uint64_t (**)())off_24C335D90;
  v85 = SHIBYTE(v142.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v142.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v303, v142.__r_.__value_.__l.__data_, v142.__r_.__value_.__l.__size_);
  else
    v303 = v142;
  v304 = v97;
  v302 = off_24C335AF8;
  v305 = v96;
  v298 = (uint64_t (**)())off_24C335D90;
  v86 = SHIBYTE(v138.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v138.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v299, v138.__r_.__value_.__l.__data_, v138.__r_.__value_.__l.__size_);
  else
    v299 = v138;
  v300 = v95;
  v298 = off_24C335AF8;
  v301 = v94;
  v294 = (uint64_t (**)())off_24C335D90;
  v87 = SHIBYTE(v134.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v134.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&__p, v134.__r_.__value_.__l.__data_, v134.__r_.__value_.__l.__size_);
  else
    __p = v134;
  v296 = v93;
  v294 = off_24C335AF8;
  v297 = v92;
  mediaplatform::DatabaseColumnTuple<1ul,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<double>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::DatabaseColumnTuple((uint64_t)(v133 + 10), (uint64_t)&v445, (uint64_t)&v440, (uint64_t)&v436, (uint64_t)&v432, (uint64_t)&v427, (uint64_t)&v423, (uint64_t)&v418, (uint64_t)&v413, (uint64_t)&v404, (uint64_t)&v400, (uint64_t)&v395, (uint64_t)&v391, (uint64_t)&v387, (uint64_t)&v383, (uint64_t)&v379, (uint64_t)&v375, (uint64_t)&v370, (uint64_t)&v365,
    (uint64_t)&v360,
    (uint64_t)&v355,
    (uint64_t)&v350,
    (uint64_t)&v345,
    (uint64_t)&v340,
    (uint64_t)&v335,
    (uint64_t)&v330,
    (uint64_t)&v326,
    (uint64_t)&v321,
    (uint64_t)&v316,
    (uint64_t)&v311,
    (uint64_t)&v306,
    (uint64_t)&v302,
    (uint64_t)&v298,
    (uint64_t)&v294);
  v294 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v298 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v299.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v299.__r_.__value_.__l.__data_);
  v302 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v303.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v303.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v306);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v311);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v316);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v321);
  v326 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v327.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v327.__r_.__value_.__l.__data_);
  v330 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v331.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v331.__r_.__value_.__l.__data_);
  v335 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v336.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v336.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v340);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v345);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v350);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v355);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v360);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v365);
  v370 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v371.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v371.__r_.__value_.__l.__data_);
  v375 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v376.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v376.__r_.__value_.__l.__data_);
  v379 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v380.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v380.__r_.__value_.__l.__data_);
  v383 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v384.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v384.__r_.__value_.__l.__data_);
  v387 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v388.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v388.__r_.__value_.__l.__data_);
  v391 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v392.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v392.__r_.__value_.__l.__data_);
  v395 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v396.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v396.__r_.__value_.__l.__data_);
  v400 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v401.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v401.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<mediaplatform::Data>::~DatabaseColumn((uint64_t)&v404);
  v413 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v414.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v414.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v418);
  v423 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v424.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v424.__r_.__value_.__l.__data_);
  v427 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v428.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v428.__r_.__value_.__l.__data_);
  v432 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v433.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v433.__r_.__value_.__l.__data_);
  v436 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v437.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v437.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v440);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v445);
  v133[238] = off_24C335D90;
  v88 = (std::string *)(v133 + 239);
  v89 = SHIBYTE(v290.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v290.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v88, v290.__r_.__value_.__l.__data_, v290.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v88->__r_.__value_.__l.__data_ = *(_OWORD *)&v290.__r_.__value_.__l.__data_;
    v133[241] = *((_QWORD *)&v290.__r_.__value_.__l + 2);
  }
  *((_DWORD *)v133 + 484) = v291;
  v133[238] = off_24C335B18;
  *(_QWORD *)((char *)v133 + 1940) = v292;
  *((_DWORD *)v133 + 487) = v293;
  if ((v87 & 0x80000000) == 0)
  {
    if ((v86 & 0x80000000) == 0)
      goto LABEL_338;
LABEL_367:
    operator delete(v138.__r_.__value_.__l.__data_);
    if ((v85 & 0x80000000) == 0)
      goto LABEL_339;
    goto LABEL_368;
  }
  operator delete(v134.__r_.__value_.__l.__data_);
  if (v86 < 0)
    goto LABEL_367;
LABEL_338:
  if ((v85 & 0x80000000) == 0)
    goto LABEL_339;
LABEL_368:
  operator delete(v142.__r_.__value_.__l.__data_);
LABEL_339:
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v145);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v150);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v155);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v160);
  if (v83 < 0)
  {
    operator delete(v166.__r_.__value_.__l.__data_);
    if ((v82 & 0x80000000) == 0)
      goto LABEL_341;
  }
  else if ((v82 & 0x80000000) == 0)
  {
    goto LABEL_341;
  }
  operator delete(v170.__r_.__value_.__l.__data_);
LABEL_341:
  if (v116 < 0)
    operator delete(v175.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v179);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v184);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v189);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v194);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v199);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v204);
  if (v122 < 0)
    operator delete(v210.__r_.__value_.__l.__data_);
  if (v124 < 0)
    operator delete(v215.__r_.__value_.__l.__data_);
  if (v126 < 0)
    operator delete(v219.__r_.__value_.__l.__data_);
  if (v128 < 0)
  {
    operator delete(v223.__r_.__value_.__l.__data_);
    if ((v84 & 0x80000000) == 0)
      goto LABEL_351;
  }
  else if ((v84 & 0x80000000) == 0)
  {
    goto LABEL_351;
  }
  operator delete(v227.__r_.__value_.__l.__data_);
LABEL_351:
  if (v130 < 0)
    operator delete(v231.__r_.__value_.__l.__data_);
  if (v120 < 0)
  {
    operator delete(v235.__r_.__value_.__l.__data_);
    if ((v118 & 0x80000000) == 0)
      goto LABEL_355;
  }
  else if ((v118 & 0x80000000) == 0)
  {
    goto LABEL_355;
  }
  operator delete(v240.__r_.__value_.__l.__data_);
LABEL_355:
  mediaplatform::DatabaseColumn<mediaplatform::Data>::~DatabaseColumn((uint64_t)&v243);
  if (v132 < 0)
    operator delete(v253.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v257);
  if (v73 < 0)
  {
    operator delete(v263.__r_.__value_.__l.__data_);
    if ((v91 & 0x80000000) == 0)
      goto LABEL_359;
  }
  else if ((v91 & 0x80000000) == 0)
  {
    goto LABEL_359;
  }
  operator delete(v267.__r_.__value_.__l.__data_);
LABEL_359:
  if (SHIBYTE(v272.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v272.__r_.__value_.__l.__data_);
  if (SHIBYTE(v276.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v276.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v279);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v284);
  if (v89 < 0)
    operator delete(v290.__r_.__value_.__l.__data_);
  return v133;
}

