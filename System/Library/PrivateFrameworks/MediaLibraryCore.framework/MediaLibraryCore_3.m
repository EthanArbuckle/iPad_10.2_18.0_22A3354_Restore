void sub_20A7E3540(_Unwind_Exception *a1)
{
  uint64_t v1;

  mediaplatform::DatabaseColumnTuple<50ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(v1);
  _Unwind_Resume(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<49ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(uint64_t a1)
{
  *(_QWORD *)(a1 + 1952) = off_24C335D90;
  if (*(char *)(a1 + 1983) < 0)
    operator delete(*(void **)(a1 + 1960));
  *(_QWORD *)(a1 + 1904) = off_24C335D90;
  if (*(char *)(a1 + 1935) < 0)
    operator delete(*(void **)(a1 + 1912));
  *(_QWORD *)(a1 + 1856) = off_24C335D90;
  if (*(char *)(a1 + 1887) < 0)
    operator delete(*(void **)(a1 + 1864));
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 1792);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 1728);
  return mediaplatform::DatabaseColumnTuple<54ul,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<50ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(uint64_t a1)
{
  *(_QWORD *)(a1 + 1904) = off_24C335D90;
  if (*(char *)(a1 + 1935) < 0)
    operator delete(*(void **)(a1 + 1912));
  *(_QWORD *)(a1 + 1856) = off_24C335D90;
  if (*(char *)(a1 + 1887) < 0)
    operator delete(*(void **)(a1 + 1864));
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 1792);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 1728);
  return mediaplatform::DatabaseColumnTuple<54ul,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<51ul,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::DatabaseColumnTuple(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37)
{
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  int v53;
  int v54;
  int v55;
  uint64_t v56;
  int v57;
  int v58;
  int v59;
  int v60;
  int v61;
  int v62;
  int v63;
  uint64_t v64;
  int v65;
  int v66;
  int v67;
  int v68;
  uint64_t v69;
  int v70;
  int v71;
  int v72;
  int v73;
  int v74;
  int v75;
  int v76;
  int v77;
  int v78;
  std::string *v79;
  std::string *v80;
  __int128 v81;
  uint64_t v82;
  uint64_t v84;
  int v85;
  uint64_t v86;
  int v87;
  int v88;
  uint64_t v89;
  int v90;
  uint64_t v91;
  int v92;
  uint64_t v93;
  int v94;
  int v95;
  uint64_t v96;
  int v97;
  uint64_t v98;
  int v99;
  int v100;
  uint64_t v101;
  int v102;
  uint64_t v103;
  int v104;
  uint64_t v105;
  int v106;
  int v107;
  int v108;
  uint64_t v109;
  uint64_t v110;
  int v111;
  uint64_t v112;
  int v113;
  uint64_t v114;
  int v115;
  uint64_t v116;
  int v117;
  uint64_t v118;
  int v119;
  int v120;
  int v121;
  int v122;
  uint64_t v123;
  int v124;
  int v125;
  int v126;
  int v127;
  int v128;
  int v129;
  int v130;
  int v131;
  int v132;
  int v133;
  int v134;
  int v135;
  std::string v136;
  int v137;
  uint64_t v138;
  uint64_t (**v139)();
  std::string v140;
  int v141;
  uint64_t v142;
  uint64_t (**v143)();
  std::string v144;
  int v145;
  uint64_t v146;
  int v147;
  uint64_t (**v148)();
  std::string v149;
  int v150;
  char v151;
  std::string v152;
  uint64_t (**v153)();
  std::string v154;
  int v155;
  char v156;
  std::string v157;
  uint64_t (**v158)();
  std::string v159;
  int v160;
  uint64_t v161;
  uint64_t (**v162)();
  std::string v163;
  int v164;
  uint64_t v165;
  uint64_t (**v166)();
  std::string v167;
  int v168;
  uint64_t v169;
  uint64_t (**v170)();
  std::string v171;
  int v172;
  uint64_t v173;
  int v174;
  uint64_t (**v175)();
  std::string v176;
  int v177;
  uint64_t v178;
  uint64_t (**v179)();
  std::string v180;
  int v181;
  char v182;
  std::string v183;
  uint64_t (**v184)();
  std::string v185;
  int v186;
  uint64_t v187;
  uint64_t (**v188)();
  std::string v189;
  int v190;
  uint64_t v191;
  int v192;
  uint64_t (**v193)();
  std::string v194;
  int v195;
  uint64_t v196;
  uint64_t (**v197)();
  std::string v198;
  int v199;
  char v200;
  std::string v201;
  uint64_t (**v202)();
  std::string v203;
  int v204;
  char v205;
  std::string v206;
  uint64_t (**v207)();
  std::string v208;
  int v209;
  uint64_t v210;
  int v211;
  uint64_t (**v212)();
  std::string v213;
  int v214;
  char v215;
  std::string v216;
  uint64_t (**v217)();
  std::string v218;
  int v219;
  uint64_t v220;
  uint64_t (**v221)();
  std::string v222;
  int v223;
  uint64_t v224;
  int v225;
  uint64_t (**v226)();
  std::string v227;
  int v228;
  uint64_t v229;
  uint64_t (**v230)();
  std::string v231;
  int v232;
  char v233;
  std::string v234;
  uint64_t (**v235)();
  std::string v236;
  int v237;
  char v238;
  std::string v239;
  uint64_t (**v240)();
  std::string v241;
  int v242;
  char v243;
  std::string v244;
  uint64_t (**v245)();
  std::string v246;
  int v247;
  uint64_t v248;
  uint64_t (**v249)();
  std::string v250;
  int v251;
  uint64_t v252;
  uint64_t (**v253)();
  std::string v254;
  int v255;
  uint64_t v256;
  uint64_t (**v257)();
  std::string v258;
  int v259;
  uint64_t v260;
  uint64_t (**v261)();
  std::string v262;
  int v263;
  uint64_t v264;
  uint64_t (**v265)();
  std::string v266;
  int v267;
  uint64_t v268;
  uint64_t (**v269)();
  std::string v270;
  int v271;
  uint64_t v272;
  uint64_t (**v273)();
  std::string v274;
  int v275;
  uint64_t v276;
  int v277;
  uint64_t (**v278)();
  std::string v279;
  int v280;
  uint64_t v281;
  int v282;
  uint64_t (**v283)();
  std::string __s;
  int v285;
  char v286;
  std::string v287;
  uint64_t (**v288)();
  std::string v289;
  int v290;
  char v291;
  std::string v292;
  uint64_t (**v293)();
  std::string __p;
  int v295;
  uint64_t v296;
  uint64_t (**v297)();
  std::string v298;
  int v299;
  uint64_t v300;
  uint64_t (**v301)();
  std::string v302;
  int v303;
  uint64_t v304;
  int v305;
  uint64_t (**v306)();
  std::string v307;
  int v308;
  char v309;
  std::string v310;
  uint64_t (**v311)();
  std::string v312;
  int v313;
  char v314;
  std::string v315;
  uint64_t (**v316)();
  std::string v317;
  int v318;
  uint64_t v319;
  uint64_t (**v320)();
  std::string v321;
  int v322;
  uint64_t v323;
  uint64_t (**v324)();
  std::string v325;
  int v326;
  uint64_t v327;
  uint64_t (**v328)();
  std::string v329;
  int v330;
  uint64_t v331;
  int v332;
  uint64_t (**v333)();
  std::string v334;
  int v335;
  uint64_t v336;
  uint64_t (**v337)();
  std::string v338;
  int v339;
  char v340;
  std::string v341;
  uint64_t (**v342)();
  std::string v343;
  int v344;
  uint64_t v345;
  uint64_t (**v346)();
  std::string v347;
  int v348;
  uint64_t v349;
  int v350;
  uint64_t (**v351)();
  std::string v352;
  int v353;
  uint64_t v354;
  uint64_t (**v355)();
  std::string v356;
  int v357;
  char v358;
  std::string v359;
  uint64_t (**v360)();
  std::string v361;
  int v362;
  char v363;
  std::string v364;
  uint64_t (**v365)();
  std::string v366;
  int v367;
  uint64_t v368;
  int v369;
  uint64_t (**v370)();
  std::string v371;
  int v372;
  char v373;
  std::string v374;
  uint64_t (**v375)();
  std::string v376;
  int v377;
  uint64_t v378;
  uint64_t (**v379)();
  std::string v380;
  int v381;
  uint64_t v382;
  int v383;
  uint64_t (**v384)();
  std::string v385;
  int v386;
  uint64_t v387;
  uint64_t (**v388)();
  std::string v389;
  int v390;
  char v391;
  std::string v392;
  uint64_t (**v393)();
  std::string v394;
  int v395;
  char v396;
  std::string v397;
  uint64_t (**v398)();
  std::string v399;
  int v400;
  char v401;
  std::string v402;
  uint64_t (**v403)();
  std::string v404;
  int v405;
  uint64_t v406;
  uint64_t (**v407)();
  std::string v408;
  int v409;
  uint64_t v410;
  uint64_t (**v411)();
  std::string v412;
  int v413;
  uint64_t v414;
  uint64_t (**v415)();
  std::string v416;
  int v417;
  uint64_t v418;
  uint64_t (**v419)();
  std::string v420;
  int v421;
  uint64_t v422;
  uint64_t (**v423)();
  std::string v424;
  int v425;
  uint64_t v426;
  uint64_t (**v427)();
  std::string v428;
  int v429;
  uint64_t v430;
  uint64_t (**v431)();
  std::string v432;
  int v433;
  uint64_t v434;
  int v435;
  uint64_t (**v436)();
  std::string v437;
  int v438;
  uint64_t v439;
  int v440;
  uint64_t (**v441)();
  std::string v442;
  int v443;
  char v444;
  std::string v445;

  v37 = MEMORY[0x24BDAC7A8](a1);
  v40 = v39;
  v42 = v41;
  v44 = v43;
  v46 = v45;
  v48 = v47;
  v49 = v38;
  v103 = v50;
  v51 = v37;
  v288 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(v38 + 31) < 0)
    std::string::__init_copy_ctor_external(&v289, *(const std::string::value_type **)(v38 + 8), *(_QWORD *)(v38 + 16));
  else
    v289 = *(std::string *)(v38 + 8);
  v290 = *(_DWORD *)(v49 + 32);
  v288 = &off_24C335AB8;
  v291 = *(_BYTE *)(v49 + 36);
  if (*(char *)(v49 + 63) < 0)
    std::string::__init_copy_ctor_external(&v292, *(const std::string::value_type **)(v49 + 40), *(_QWORD *)(v49 + 48));
  else
    v292 = *(std::string *)(v49 + 40);
  v283 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(v48 + 31) < 0)
    std::string::__init_copy_ctor_external(&__s, *(const std::string::value_type **)(v48 + 8), *(_QWORD *)(v48 + 16));
  else
    __s = *(std::string *)(v48 + 8);
  v285 = *(_DWORD *)(v48 + 32);
  v283 = &off_24C335AB8;
  v286 = *(_BYTE *)(v48 + 36);
  if (*(char *)(v48 + 63) < 0)
    std::string::__init_copy_ctor_external(&v287, *(const std::string::value_type **)(v48 + 40), *(_QWORD *)(v48 + 48));
  else
    v287 = *(std::string *)(v48 + 40);
  if (*(char *)(v46 + 31) < 0)
    std::string::__init_copy_ctor_external(&v279, *(const std::string::value_type **)(v46 + 8), *(_QWORD *)(v46 + 16));
  else
    v279 = *(std::string *)(v46 + 8);
  v52 = *(_DWORD *)(v46 + 32);
  v278 = off_24C335B18;
  v281 = *(_QWORD *)(v46 + 36);
  v53 = *(_DWORD *)(v46 + 44);
  v132 = v52;
  v280 = v52;
  v282 = v53;
  if (*(char *)(v44 + 31) < 0)
    std::string::__init_copy_ctor_external(&v274, *(const std::string::value_type **)(v44 + 8), *(_QWORD *)(v44 + 16));
  else
    v274 = *(std::string *)(v44 + 8);
  v54 = *(_DWORD *)(v44 + 32);
  v273 = off_24C335B18;
  v276 = *(_QWORD *)(v44 + 36);
  v55 = *(_DWORD *)(v44 + 44);
  v129 = v54;
  v275 = v54;
  v277 = v55;
  if (*(char *)(v42 + 31) < 0)
    std::string::__init_copy_ctor_external(&v270, *(const std::string::value_type **)(v42 + 8), *(_QWORD *)(v42 + 16));
  else
    v270 = *(std::string *)(v42 + 8);
  v127 = *(_DWORD *)(v42 + 32);
  v271 = v127;
  v269 = off_24C335AF8;
  v56 = *(_QWORD *)(v42 + 36);
  v272 = v56;
  if (*(char *)(v40 + 31) < 0)
    std::string::__init_copy_ctor_external(&v266, *(const std::string::value_type **)(v40 + 8), *(_QWORD *)(v40 + 16));
  else
    v266 = *(std::string *)(v40 + 8);
  v125 = *(_DWORD *)(v40 + 32);
  v267 = v125;
  v265 = off_24C335AF8;
  v123 = *(_QWORD *)(v40 + 36);
  v268 = v123;
  if (*(char *)(a9 + 31) < 0)
    std::string::__init_copy_ctor_external(&v262, *(const std::string::value_type **)(a9 + 8), *(_QWORD *)(a9 + 16));
  else
    v262 = *(std::string *)(a9 + 8);
  v120 = *(_DWORD *)(a9 + 32);
  v263 = v120;
  v261 = off_24C335AF8;
  v118 = *(_QWORD *)(a9 + 36);
  v264 = v118;
  if (*(char *)(a10 + 31) < 0)
    std::string::__init_copy_ctor_external(&v258, *(const std::string::value_type **)(a10 + 8), *(_QWORD *)(a10 + 16));
  else
    v258 = *(std::string *)(a10 + 8);
  v117 = *(_DWORD *)(a10 + 32);
  v259 = v117;
  v257 = off_24C335AF8;
  v116 = *(_QWORD *)(a10 + 36);
  v260 = v116;
  if (*(char *)(a11 + 31) < 0)
    std::string::__init_copy_ctor_external(&v254, *(const std::string::value_type **)(a11 + 8), *(_QWORD *)(a11 + 16));
  else
    v254 = *(std::string *)(a11 + 8);
  v115 = *(_DWORD *)(a11 + 32);
  v255 = v115;
  v253 = off_24C335AF8;
  v114 = *(_QWORD *)(a11 + 36);
  v256 = v114;
  if (*(char *)(a12 + 31) < 0)
    std::string::__init_copy_ctor_external(&v250, *(const std::string::value_type **)(a12 + 8), *(_QWORD *)(a12 + 16));
  else
    v250 = *(std::string *)(a12 + 8);
  v113 = *(_DWORD *)(a12 + 32);
  v251 = v113;
  v249 = off_24C335AF8;
  v112 = *(_QWORD *)(a12 + 36);
  v252 = v112;
  if (*(char *)(a13 + 31) < 0)
    std::string::__init_copy_ctor_external(&v246, *(const std::string::value_type **)(a13 + 8), *(_QWORD *)(a13 + 16));
  else
    v246 = *(std::string *)(a13 + 8);
  v111 = *(_DWORD *)(a13 + 32);
  v247 = v111;
  v245 = off_24C335AF8;
  v110 = *(_QWORD *)(a13 + 36);
  v248 = v110;
  v240 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a14 + 31) < 0)
    std::string::__init_copy_ctor_external(&v241, *(const std::string::value_type **)(a14 + 8), *(_QWORD *)(a14 + 16));
  else
    v241 = *(std::string *)(a14 + 8);
  v242 = *(_DWORD *)(a14 + 32);
  v240 = &off_24C335AB8;
  v243 = *(_BYTE *)(a14 + 36);
  if (*(char *)(a14 + 63) < 0)
    std::string::__init_copy_ctor_external(&v244, *(const std::string::value_type **)(a14 + 40), *(_QWORD *)(a14 + 48));
  else
    v244 = *(std::string *)(a14 + 40);
  v235 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a15 + 31) < 0)
    std::string::__init_copy_ctor_external(&v236, *(const std::string::value_type **)(a15 + 8), *(_QWORD *)(a15 + 16));
  else
    v236 = *(std::string *)(a15 + 8);
  v237 = *(_DWORD *)(a15 + 32);
  v235 = &off_24C335AB8;
  v238 = *(_BYTE *)(a15 + 36);
  if (*(char *)(a15 + 63) < 0)
    std::string::__init_copy_ctor_external(&v239, *(const std::string::value_type **)(a15 + 40), *(_QWORD *)(a15 + 48));
  else
    v239 = *(std::string *)(a15 + 40);
  v230 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a16 + 31) < 0)
    std::string::__init_copy_ctor_external(&v231, *(const std::string::value_type **)(a16 + 8), *(_QWORD *)(a16 + 16));
  else
    v231 = *(std::string *)(a16 + 8);
  v232 = *(_DWORD *)(a16 + 32);
  v230 = &off_24C335AB8;
  v233 = *(_BYTE *)(a16 + 36);
  if (*(char *)(a16 + 63) < 0)
    std::string::__init_copy_ctor_external(&v234, *(const std::string::value_type **)(a16 + 40), *(_QWORD *)(a16 + 48));
  else
    v234 = *(std::string *)(a16 + 40);
  if (*(char *)(a17 + 31) < 0)
    std::string::__init_copy_ctor_external(&v227, *(const std::string::value_type **)(a17 + 8), *(_QWORD *)(a17 + 16));
  else
    v227 = *(std::string *)(a17 + 8);
  v57 = *(_DWORD *)(a17 + 32);
  v228 = v57;
  v226 = off_24C335AF8;
  v109 = *(_QWORD *)(a17 + 36);
  v229 = v109;
  if (*(char *)(a18 + 31) < 0)
    std::string::__init_copy_ctor_external(&v222, *(const std::string::value_type **)(a18 + 8), *(_QWORD *)(a18 + 16));
  else
    v222 = *(std::string *)(a18 + 8);
  v58 = *(_DWORD *)(a18 + 32);
  v221 = off_24C335B18;
  v224 = *(_QWORD *)(a18 + 36);
  v59 = *(_DWORD *)(a18 + 44);
  v108 = v58;
  v223 = v58;
  v225 = v59;
  if (*(char *)(a19 + 31) < 0)
    std::string::__init_copy_ctor_external(&v218, *(const std::string::value_type **)(a19 + 8), *(_QWORD *)(a19 + 16));
  else
    v218 = *(std::string *)(a19 + 8);
  v106 = *(_DWORD *)(a19 + 32);
  v219 = v106;
  v217 = off_24C335AF8;
  v105 = *(_QWORD *)(a19 + 36);
  v220 = v105;
  v212 = (uint64_t (**)())off_24C335D90;
  v107 = v57;
  if (*(char *)(a20 + 31) < 0)
    std::string::__init_copy_ctor_external(&v213, *(const std::string::value_type **)(a20 + 8), *(_QWORD *)(a20 + 16));
  else
    v213 = *(std::string *)(a20 + 8);
  v214 = *(_DWORD *)(a20 + 32);
  v212 = &off_24C335AB8;
  v215 = *(_BYTE *)(a20 + 36);
  if (*(char *)(a20 + 63) < 0)
    std::string::__init_copy_ctor_external(&v216, *(const std::string::value_type **)(a20 + 40), *(_QWORD *)(a20 + 48));
  else
    v216 = *(std::string *)(a20 + 40);
  if (*(char *)(a21 + 31) < 0)
    std::string::__init_copy_ctor_external(&v208, *(const std::string::value_type **)(a21 + 8), *(_QWORD *)(a21 + 16));
  else
    v208 = *(std::string *)(a21 + 8);
  v60 = *(_DWORD *)(a21 + 32);
  v207 = off_24C335B18;
  v210 = *(_QWORD *)(a21 + 36);
  v61 = *(_DWORD *)(a21 + 44);
  v104 = v60;
  v209 = v60;
  v211 = v61;
  v202 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a22 + 31) < 0)
    std::string::__init_copy_ctor_external(&v203, *(const std::string::value_type **)(a22 + 8), *(_QWORD *)(a22 + 16));
  else
    v203 = *(std::string *)(a22 + 8);
  v204 = *(_DWORD *)(a22 + 32);
  v202 = &off_24C335AB8;
  v205 = *(_BYTE *)(a22 + 36);
  if (*(char *)(a22 + 63) < 0)
    std::string::__init_copy_ctor_external(&v206, *(const std::string::value_type **)(a22 + 40), *(_QWORD *)(a22 + 48));
  else
    v206 = *(std::string *)(a22 + 40);
  v197 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a23 + 31) < 0)
    std::string::__init_copy_ctor_external(&v198, *(const std::string::value_type **)(a23 + 8), *(_QWORD *)(a23 + 16));
  else
    v198 = *(std::string *)(a23 + 8);
  v199 = *(_DWORD *)(a23 + 32);
  v197 = &off_24C335AB8;
  v200 = *(_BYTE *)(a23 + 36);
  if (*(char *)(a23 + 63) < 0)
    std::string::__init_copy_ctor_external(&v201, *(const std::string::value_type **)(a23 + 40), *(_QWORD *)(a23 + 48));
  else
    v201 = *(std::string *)(a23 + 40);
  if (*(char *)(a24 + 31) < 0)
    std::string::__init_copy_ctor_external(&v194, *(const std::string::value_type **)(a24 + 8), *(_QWORD *)(a24 + 16));
  else
    v194 = *(std::string *)(a24 + 8);
  v102 = *(_DWORD *)(a24 + 32);
  v195 = v102;
  v193 = off_24C335AF8;
  v101 = *(_QWORD *)(a24 + 36);
  v196 = v101;
  if (*(char *)(a25 + 31) < 0)
    std::string::__init_copy_ctor_external(&v189, *(const std::string::value_type **)(a25 + 8), *(_QWORD *)(a25 + 16));
  else
    v189 = *(std::string *)(a25 + 8);
  v62 = *(_DWORD *)(a25 + 32);
  v188 = off_24C335B18;
  v191 = *(_QWORD *)(a25 + 36);
  v63 = *(_DWORD *)(a25 + 44);
  v100 = v62;
  v190 = v62;
  v192 = v63;
  if (*(char *)(a26 + 31) < 0)
    std::string::__init_copy_ctor_external(&v185, *(const std::string::value_type **)(a26 + 8), *(_QWORD *)(a26 + 16));
  else
    v185 = *(std::string *)(a26 + 8);
  v99 = *(_DWORD *)(a26 + 32);
  v186 = v99;
  v184 = off_24C335AF8;
  v64 = *(_QWORD *)(a26 + 36);
  v187 = v64;
  v179 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a27 + 31) < 0)
    std::string::__init_copy_ctor_external(&v180, *(const std::string::value_type **)(a27 + 8), *(_QWORD *)(a27 + 16));
  else
    v180 = *(std::string *)(a27 + 8);
  v181 = *(_DWORD *)(a27 + 32);
  v179 = &off_24C335AB8;
  v182 = *(_BYTE *)(a27 + 36);
  v98 = v64;
  if (*(char *)(a27 + 63) < 0)
    std::string::__init_copy_ctor_external(&v183, *(const std::string::value_type **)(a27 + 40), *(_QWORD *)(a27 + 48));
  else
    v183 = *(std::string *)(a27 + 40);
  if (*(char *)(a28 + 31) < 0)
    std::string::__init_copy_ctor_external(&v176, *(const std::string::value_type **)(a28 + 8), *(_QWORD *)(a28 + 16));
  else
    v176 = *(std::string *)(a28 + 8);
  v97 = *(_DWORD *)(a28 + 32);
  v177 = v97;
  v175 = off_24C335AF8;
  v96 = *(_QWORD *)(a28 + 36);
  v178 = v96;
  if (*(char *)(a29 + 31) < 0)
    std::string::__init_copy_ctor_external(&v171, *(const std::string::value_type **)(a29 + 8), *(_QWORD *)(a29 + 16));
  else
    v171 = *(std::string *)(a29 + 8);
  v65 = *(_DWORD *)(a29 + 32);
  v170 = off_24C335B18;
  v173 = *(_QWORD *)(a29 + 36);
  v66 = *(_DWORD *)(a29 + 44);
  v95 = v65;
  v172 = v65;
  v174 = v66;
  if (*(char *)(a30 + 31) < 0)
    std::string::__init_copy_ctor_external(&v167, *(const std::string::value_type **)(a30 + 8), *(_QWORD *)(a30 + 16));
  else
    v167 = *(std::string *)(a30 + 8);
  v94 = *(_DWORD *)(a30 + 32);
  v168 = v94;
  v166 = off_24C335AF8;
  v93 = *(_QWORD *)(a30 + 36);
  v169 = v93;
  if (*(char *)(a31 + 31) < 0)
    std::string::__init_copy_ctor_external(&v163, *(const std::string::value_type **)(a31 + 8), *(_QWORD *)(a31 + 16));
  else
    v163 = *(std::string *)(a31 + 8);
  v92 = *(_DWORD *)(a31 + 32);
  v164 = v92;
  v162 = off_24C335AF8;
  v91 = *(_QWORD *)(a31 + 36);
  v165 = v91;
  if (*(char *)(a32 + 31) < 0)
    std::string::__init_copy_ctor_external(&v159, *(const std::string::value_type **)(a32 + 8), *(_QWORD *)(a32 + 16));
  else
    v159 = *(std::string *)(a32 + 8);
  v90 = *(_DWORD *)(a32 + 32);
  v160 = v90;
  v158 = off_24C335AF8;
  v89 = *(_QWORD *)(a32 + 36);
  v161 = v89;
  v153 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a33 + 31) < 0)
    std::string::__init_copy_ctor_external(&v154, *(const std::string::value_type **)(a33 + 8), *(_QWORD *)(a33 + 16));
  else
    v154 = *(std::string *)(a33 + 8);
  v155 = *(_DWORD *)(a33 + 32);
  v153 = &off_24C335AB8;
  v156 = *(_BYTE *)(a33 + 36);
  if (*(char *)(a33 + 63) < 0)
    std::string::__init_copy_ctor_external(&v157, *(const std::string::value_type **)(a33 + 40), *(_QWORD *)(a33 + 48));
  else
    v157 = *(std::string *)(a33 + 40);
  v148 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a34 + 31) < 0)
    std::string::__init_copy_ctor_external(&v149, *(const std::string::value_type **)(a34 + 8), *(_QWORD *)(a34 + 16));
  else
    v149 = *(std::string *)(a34 + 8);
  v150 = *(_DWORD *)(a34 + 32);
  v148 = &off_24C335AB8;
  v151 = *(_BYTE *)(a34 + 36);
  if (*(char *)(a34 + 63) < 0)
    std::string::__init_copy_ctor_external(&v152, *(const std::string::value_type **)(a34 + 40), *(_QWORD *)(a34 + 48));
  else
    v152 = *(std::string *)(a34 + 40);
  if (*(char *)(a35 + 31) < 0)
    std::string::__init_copy_ctor_external(&v144, *(const std::string::value_type **)(a35 + 8), *(_QWORD *)(a35 + 16));
  else
    v144 = *(std::string *)(a35 + 8);
  v67 = *(_DWORD *)(a35 + 32);
  v143 = off_24C335B18;
  v146 = *(_QWORD *)(a35 + 36);
  v68 = *(_DWORD *)(a35 + 44);
  v88 = v67;
  v145 = v67;
  v147 = v68;
  if (*(char *)(a36 + 31) < 0)
    std::string::__init_copy_ctor_external(&v140, *(const std::string::value_type **)(a36 + 8), *(_QWORD *)(a36 + 16));
  else
    v140 = *(std::string *)(a36 + 8);
  v87 = *(_DWORD *)(a36 + 32);
  v141 = v87;
  v139 = off_24C335AF8;
  v86 = *(_QWORD *)(a36 + 36);
  v142 = v86;
  if (*(char *)(a37 + 31) < 0)
    std::string::__init_copy_ctor_external(&v136, *(const std::string::value_type **)(a37 + 8), *(_QWORD *)(a37 + 16));
  else
    v136 = *(std::string *)(a37 + 8);
  v85 = *(_DWORD *)(a37 + 32);
  v137 = v85;
  v69 = *(_QWORD *)(a37 + 36);
  v138 = v69;
  v441 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v442, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
  else
    v442 = __s;
  v443 = v285;
  v441 = &off_24C335AB8;
  v444 = v286;
  if (SHIBYTE(v287.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v445, v287.__r_.__value_.__l.__data_, v287.__r_.__value_.__l.__size_);
  else
    v445 = v287;
  v436 = (uint64_t (**)())off_24C335D90;
  v84 = v69;
  if (SHIBYTE(v279.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v437, v279.__r_.__value_.__l.__data_, v279.__r_.__value_.__l.__size_);
  else
    v437 = v279;
  v436 = off_24C335B18;
  v439 = v281;
  v438 = v132;
  v440 = v282;
  v431 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v274.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v432, v274.__r_.__value_.__l.__data_, v274.__r_.__value_.__l.__size_);
  else
    v432 = v274;
  v431 = off_24C335B18;
  v434 = v276;
  v433 = v129;
  v435 = v277;
  v427 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v270.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v428, v270.__r_.__value_.__l.__data_, v270.__r_.__value_.__l.__size_);
  else
    v428 = v270;
  v429 = v127;
  v427 = off_24C335AF8;
  v430 = v56;
  v423 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v266.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v424, v266.__r_.__value_.__l.__data_, v266.__r_.__value_.__l.__size_);
  else
    v424 = v266;
  v425 = v125;
  v423 = off_24C335AF8;
  v426 = v123;
  v419 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v262.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v420, v262.__r_.__value_.__l.__data_, v262.__r_.__value_.__l.__size_);
  else
    v420 = v262;
  v421 = v120;
  v419 = off_24C335AF8;
  v422 = v118;
  v415 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v258.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v416, v258.__r_.__value_.__l.__data_, v258.__r_.__value_.__l.__size_);
  else
    v416 = v258;
  v417 = v117;
  v415 = off_24C335AF8;
  v418 = v116;
  v411 = (uint64_t (**)())off_24C335D90;
  v135 = SHIBYTE(v254.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v254.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v412, v254.__r_.__value_.__l.__data_, v254.__r_.__value_.__l.__size_);
  else
    v412 = v254;
  v413 = v115;
  v411 = off_24C335AF8;
  v414 = v114;
  v407 = (uint64_t (**)())off_24C335D90;
  v70 = SHIBYTE(v250.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v250.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v408, v250.__r_.__value_.__l.__data_, v250.__r_.__value_.__l.__size_);
  else
    v408 = v250;
  v409 = v113;
  v407 = off_24C335AF8;
  v410 = v112;
  v403 = (uint64_t (**)())off_24C335D90;
  v71 = SHIBYTE(v246.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v246.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v404, v246.__r_.__value_.__l.__data_, v246.__r_.__value_.__l.__size_);
  else
    v404 = v246;
  v405 = v111;
  v403 = off_24C335AF8;
  v406 = v110;
  v398 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v241.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v399, v241.__r_.__value_.__l.__data_, v241.__r_.__value_.__l.__size_);
  else
    v399 = v241;
  v400 = v242;
  v398 = &off_24C335AB8;
  v401 = v243;
  if (SHIBYTE(v244.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v402, v244.__r_.__value_.__l.__data_, v244.__r_.__value_.__l.__size_);
  else
    v402 = v244;
  v393 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v236.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v394, v236.__r_.__value_.__l.__data_, v236.__r_.__value_.__l.__size_);
  else
    v394 = v236;
  v395 = v237;
  v393 = &off_24C335AB8;
  v396 = v238;
  if (SHIBYTE(v239.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v397, v239.__r_.__value_.__l.__data_, v239.__r_.__value_.__l.__size_);
  else
    v397 = v239;
  v388 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v231.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v389, v231.__r_.__value_.__l.__data_, v231.__r_.__value_.__l.__size_);
  else
    v389 = v231;
  v390 = v232;
  v388 = &off_24C335AB8;
  v391 = v233;
  if (SHIBYTE(v234.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v392, v234.__r_.__value_.__l.__data_, v234.__r_.__value_.__l.__size_);
  else
    v392 = v234;
  v384 = (uint64_t (**)())off_24C335D90;
  v134 = SHIBYTE(v227.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v227.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v385, v227.__r_.__value_.__l.__data_, v227.__r_.__value_.__l.__size_);
  else
    v385 = v227;
  v386 = v107;
  v384 = off_24C335AF8;
  v387 = v109;
  v379 = (uint64_t (**)())off_24C335D90;
  v133 = SHIBYTE(v222.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v222.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v380, v222.__r_.__value_.__l.__data_, v222.__r_.__value_.__l.__size_);
  else
    v380 = v222;
  v379 = off_24C335B18;
  v382 = v224;
  v381 = v108;
  v383 = v225;
  v375 = (uint64_t (**)())off_24C335D90;
  v131 = SHIBYTE(v218.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v218.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v376, v218.__r_.__value_.__l.__data_, v218.__r_.__value_.__l.__size_);
  else
    v376 = v218;
  v377 = v106;
  v375 = off_24C335AF8;
  v378 = v105;
  v370 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v213.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v371, v213.__r_.__value_.__l.__data_, v213.__r_.__value_.__l.__size_);
  else
    v371 = v213;
  v372 = v214;
  v370 = &off_24C335AB8;
  v373 = v215;
  if (SHIBYTE(v216.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v374, v216.__r_.__value_.__l.__data_, v216.__r_.__value_.__l.__size_);
  else
    v374 = v216;
  v365 = (uint64_t (**)())off_24C335D90;
  v130 = SHIBYTE(v208.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v208.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v366, v208.__r_.__value_.__l.__data_, v208.__r_.__value_.__l.__size_);
  else
    v366 = v208;
  v365 = off_24C335B18;
  v368 = v210;
  v367 = v104;
  v369 = v211;
  v360 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v203.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v361, v203.__r_.__value_.__l.__data_, v203.__r_.__value_.__l.__size_);
  else
    v361 = v203;
  v362 = v204;
  v360 = &off_24C335AB8;
  v363 = v205;
  if (SHIBYTE(v206.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v364, v206.__r_.__value_.__l.__data_, v206.__r_.__value_.__l.__size_);
  else
    v364 = v206;
  v355 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v198.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v356, v198.__r_.__value_.__l.__data_, v198.__r_.__value_.__l.__size_);
  else
    v356 = v198;
  v357 = v199;
  v355 = &off_24C335AB8;
  v358 = v200;
  if (SHIBYTE(v201.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v359, v201.__r_.__value_.__l.__data_, v201.__r_.__value_.__l.__size_);
  else
    v359 = v201;
  v351 = (uint64_t (**)())off_24C335D90;
  v128 = SHIBYTE(v194.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v194.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v352, v194.__r_.__value_.__l.__data_, v194.__r_.__value_.__l.__size_);
  else
    v352 = v194;
  v353 = v102;
  v351 = off_24C335AF8;
  v354 = v101;
  v346 = (uint64_t (**)())off_24C335D90;
  v126 = SHIBYTE(v189.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v189.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v347, v189.__r_.__value_.__l.__data_, v189.__r_.__value_.__l.__size_);
  else
    v347 = v189;
  v346 = off_24C335B18;
  v349 = v191;
  v348 = v100;
  v350 = v192;
  v342 = (uint64_t (**)())off_24C335D90;
  v124 = SHIBYTE(v185.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v185.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v343, v185.__r_.__value_.__l.__data_, v185.__r_.__value_.__l.__size_);
  else
    v343 = v185;
  v344 = v99;
  v342 = off_24C335AF8;
  v345 = v98;
  v337 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v180.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v338, v180.__r_.__value_.__l.__data_, v180.__r_.__value_.__l.__size_);
  else
    v338 = v180;
  v339 = v181;
  v337 = &off_24C335AB8;
  v340 = v182;
  if (SHIBYTE(v183.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v341, v183.__r_.__value_.__l.__data_, v183.__r_.__value_.__l.__size_);
  else
    v341 = v183;
  v333 = (uint64_t (**)())off_24C335D90;
  v72 = SHIBYTE(v176.__r_.__value_.__r.__words[2]);
  v122 = v71;
  if (SHIBYTE(v176.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v334, v176.__r_.__value_.__l.__data_, v176.__r_.__value_.__l.__size_);
  else
    v334 = v176;
  v335 = v97;
  v333 = off_24C335AF8;
  v336 = v96;
  v328 = (uint64_t (**)())off_24C335D90;
  v73 = SHIBYTE(v171.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v171.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v329, v171.__r_.__value_.__l.__data_, v171.__r_.__value_.__l.__size_);
  else
    v329 = v171;
  v328 = off_24C335B18;
  v331 = v173;
  v330 = v95;
  v332 = v174;
  v324 = (uint64_t (**)())off_24C335D90;
  v119 = SHIBYTE(v167.__r_.__value_.__r.__words[2]);
  v121 = v70;
  if (SHIBYTE(v167.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v325, v167.__r_.__value_.__l.__data_, v167.__r_.__value_.__l.__size_);
  else
    v325 = v167;
  v326 = v94;
  v324 = off_24C335AF8;
  v327 = v93;
  v320 = (uint64_t (**)())off_24C335D90;
  v74 = SHIBYTE(v163.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v163.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v321, v163.__r_.__value_.__l.__data_, v163.__r_.__value_.__l.__size_);
  else
    v321 = v163;
  v322 = v92;
  v320 = off_24C335AF8;
  v323 = v91;
  v316 = (uint64_t (**)())off_24C335D90;
  v75 = SHIBYTE(v159.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v159.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v317, v159.__r_.__value_.__l.__data_, v159.__r_.__value_.__l.__size_);
  else
    v317 = v159;
  v318 = v90;
  v316 = off_24C335AF8;
  v319 = v89;
  v311 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v154.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v312, v154.__r_.__value_.__l.__data_, v154.__r_.__value_.__l.__size_);
  else
    v312 = v154;
  v313 = v155;
  v311 = &off_24C335AB8;
  v314 = v156;
  if (SHIBYTE(v157.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v315, v157.__r_.__value_.__l.__data_, v157.__r_.__value_.__l.__size_);
  else
    v315 = v157;
  v306 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v149.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v307, v149.__r_.__value_.__l.__data_, v149.__r_.__value_.__l.__size_);
  else
    v307 = v149;
  v308 = v150;
  v306 = &off_24C335AB8;
  v309 = v151;
  if (SHIBYTE(v152.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v310, v152.__r_.__value_.__l.__data_, v152.__r_.__value_.__l.__size_);
  else
    v310 = v152;
  v301 = (uint64_t (**)())off_24C335D90;
  v76 = SHIBYTE(v144.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v144.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v302, v144.__r_.__value_.__l.__data_, v144.__r_.__value_.__l.__size_);
  else
    v302 = v144;
  v301 = off_24C335B18;
  v304 = v146;
  v303 = v88;
  v305 = v147;
  v297 = (uint64_t (**)())off_24C335D90;
  v77 = SHIBYTE(v140.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v140.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v298, v140.__r_.__value_.__l.__data_, v140.__r_.__value_.__l.__size_);
  else
    v298 = v140;
  v299 = v87;
  v297 = off_24C335AF8;
  v300 = v86;
  v293 = (uint64_t (**)())off_24C335D90;
  v78 = SHIBYTE(v136.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v136.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&__p, v136.__r_.__value_.__l.__data_, v136.__r_.__value_.__l.__size_);
  else
    __p = v136;
  v295 = v85;
  v293 = off_24C335AF8;
  v296 = v84;
  mediaplatform::DatabaseColumnTuple<53ul,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::DatabaseColumnTuple(v51, (uint64_t)&v441, (uint64_t)&v436, (uint64_t)&v431, (uint64_t)&v427, (uint64_t)&v423, (uint64_t)&v419, (uint64_t)&v415, (uint64_t)&v411, (uint64_t)&v407, (uint64_t)&v403, (uint64_t)&v398, (uint64_t)&v393, (uint64_t)&v388, (uint64_t)&v384, (uint64_t)&v379, (uint64_t)&v375, (uint64_t)&v370, (uint64_t)&v365,
    (uint64_t)&v360,
    (uint64_t)&v355,
    (uint64_t)&v351,
    (uint64_t)&v346,
    (uint64_t)&v342,
    (uint64_t)&v337,
    (uint64_t)&v333,
    (uint64_t)&v328,
    (uint64_t)&v324,
    (uint64_t)&v320,
    (uint64_t)&v316,
    (uint64_t)&v311,
    (uint64_t)&v306,
    (uint64_t)&v301,
    (uint64_t)&v297,
    (uint64_t)&v293);
  v293 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v297 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v298.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v298.__r_.__value_.__l.__data_);
  v301 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v302.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v302.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v306);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v311);
  v316 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v317.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v317.__r_.__value_.__l.__data_);
  v320 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v321.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v321.__r_.__value_.__l.__data_);
  v324 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v325.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v325.__r_.__value_.__l.__data_);
  v328 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v329.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v329.__r_.__value_.__l.__data_);
  v333 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v334.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v334.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v337);
  v342 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v343.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v343.__r_.__value_.__l.__data_);
  v346 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v347.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v347.__r_.__value_.__l.__data_);
  v351 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v352.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v352.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v355);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v360);
  v365 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v366.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v366.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v370);
  v375 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v376.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v376.__r_.__value_.__l.__data_);
  v379 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v380.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v380.__r_.__value_.__l.__data_);
  v384 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v385.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v385.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v388);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v393);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v398);
  v403 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v404.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v404.__r_.__value_.__l.__data_);
  v407 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v408.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v408.__r_.__value_.__l.__data_);
  v411 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v412.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v412.__r_.__value_.__l.__data_);
  v415 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v416.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v416.__r_.__value_.__l.__data_);
  v419 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v420.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v420.__r_.__value_.__l.__data_);
  v423 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v424.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v424.__r_.__value_.__l.__data_);
  v427 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v428.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v428.__r_.__value_.__l.__data_);
  v431 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v432.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v432.__r_.__value_.__l.__data_);
  v436 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v437.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v437.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v441);
  *(_QWORD *)(v51 + 1792) = off_24C335D90;
  if (SHIBYTE(v289.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external((std::string *)(v51 + 1800), v289.__r_.__value_.__l.__data_, v289.__r_.__value_.__l.__size_);
  else
    *(std::string *)(v51 + 1800) = v289;
  *(_DWORD *)(v51 + 1824) = v290;
  *(_QWORD *)(v51 + 1792) = &off_24C335AB8;
  *(_BYTE *)(v51 + 1828) = v291;
  v79 = (std::string *)(v51 + 1832);
  if (SHIBYTE(v292.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v79, v292.__r_.__value_.__l.__data_, v292.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v79->__r_.__value_.__l.__data_ = *(_OWORD *)&v292.__r_.__value_.__l.__data_;
    *(_QWORD *)(v51 + 1848) = *((_QWORD *)&v292.__r_.__value_.__l + 2);
  }
  if (v78 < 0)
    operator delete(v136.__r_.__value_.__l.__data_);
  if (v77 < 0)
  {
    operator delete(v140.__r_.__value_.__l.__data_);
    if ((v76 & 0x80000000) == 0)
      goto LABEL_329;
  }
  else if ((v76 & 0x80000000) == 0)
  {
    goto LABEL_329;
  }
  operator delete(v144.__r_.__value_.__l.__data_);
LABEL_329:
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v148);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v153);
  if (v75 < 0)
  {
    operator delete(v159.__r_.__value_.__l.__data_);
    if ((v74 & 0x80000000) == 0)
      goto LABEL_331;
  }
  else if ((v74 & 0x80000000) == 0)
  {
    goto LABEL_331;
  }
  operator delete(v163.__r_.__value_.__l.__data_);
LABEL_331:
  if (v119 < 0)
    operator delete(v167.__r_.__value_.__l.__data_);
  if (v73 < 0)
    operator delete(v171.__r_.__value_.__l.__data_);
  if (v72 < 0)
    operator delete(v176.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v179);
  if (v124 < 0)
    operator delete(v185.__r_.__value_.__l.__data_);
  if (v126 < 0)
    operator delete(v189.__r_.__value_.__l.__data_);
  if (v128 < 0)
    operator delete(v194.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v197);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v202);
  if (v130 < 0)
    operator delete(v208.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v212);
  if (v131 < 0)
    operator delete(v218.__r_.__value_.__l.__data_);
  if (v133 < 0)
    operator delete(v222.__r_.__value_.__l.__data_);
  if (v134 < 0)
    operator delete(v227.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v230);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v235);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v240);
  if ((v122 & 0x80000000) == 0)
  {
    if ((v121 & 0x80000000) == 0)
      goto LABEL_353;
LABEL_373:
    operator delete(v250.__r_.__value_.__l.__data_);
    if ((v135 & 0x80000000) == 0)
      goto LABEL_354;
    goto LABEL_374;
  }
  operator delete(v246.__r_.__value_.__l.__data_);
  if (v121 < 0)
    goto LABEL_373;
LABEL_353:
  if ((v135 & 0x80000000) == 0)
    goto LABEL_354;
LABEL_374:
  operator delete(v254.__r_.__value_.__l.__data_);
LABEL_354:
  if (SHIBYTE(v258.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v258.__r_.__value_.__l.__data_);
  if (SHIBYTE(v262.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v262.__r_.__value_.__l.__data_);
  if (SHIBYTE(v266.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v266.__r_.__value_.__l.__data_);
  if (SHIBYTE(v270.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v270.__r_.__value_.__l.__data_);
  if (SHIBYTE(v274.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v274.__r_.__value_.__l.__data_);
  if (SHIBYTE(v279.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v279.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v283);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v288);
  *(_QWORD *)(v51 + 1856) = off_24C335D90;
  v80 = (std::string *)(v51 + 1864);
  if (*(char *)(v103 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v80, *(const std::string::value_type **)(v103 + 8), *(_QWORD *)(v103 + 16));
  }
  else
  {
    v81 = *(_OWORD *)(v103 + 8);
    *(_QWORD *)(v51 + 1880) = *(_QWORD *)(v103 + 24);
    *(_OWORD *)&v80->__r_.__value_.__l.__data_ = v81;
  }
  *(_DWORD *)(v51 + 1888) = *(_DWORD *)(v103 + 32);
  *(_QWORD *)(v51 + 1856) = off_24C335B18;
  v82 = *(_QWORD *)(v103 + 36);
  *(_DWORD *)(v51 + 1900) = *(_DWORD *)(v103 + 44);
  *(_QWORD *)(v51 + 1892) = v82;
  return v51;
}

void sub_20A7E6118(_Unwind_Exception *a1)
{
  uint64_t v1;

  mediaplatform::DatabaseColumnTuple<52ul,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(v1);
  _Unwind_Resume(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<51ul,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(uint64_t a1)
{
  *(_QWORD *)(a1 + 1856) = off_24C335D90;
  if (*(char *)(a1 + 1887) < 0)
    operator delete(*(void **)(a1 + 1864));
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 1792);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 1728);
  return mediaplatform::DatabaseColumnTuple<54ul,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<52ul,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(uint64_t a1)
{
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 1792);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 1728);
  return mediaplatform::DatabaseColumnTuple<54ul,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<53ul,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::DatabaseColumnTuple(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35)
{
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  int v51;
  int v52;
  int v53;
  int v54;
  int v55;
  int v56;
  int v57;
  int v58;
  int v59;
  int v60;
  uint64_t v61;
  int v62;
  int v63;
  uint64_t v64;
  int v65;
  int v66;
  int v67;
  int v68;
  int v69;
  int v70;
  int v71;
  int v72;
  int v73;
  int v74;
  int v75;
  int v76;
  int v77;
  int v78;
  std::string *v79;
  int v80;
  __int128 v81;
  std::string *v82;
  __int128 v83;
  uint64_t v85;
  int v86;
  uint64_t v87;
  int v88;
  uint64_t v89;
  int v90;
  uint64_t v91;
  int v92;
  uint64_t v93;
  int v94;
  int v95;
  uint64_t v96;
  int v97;
  uint64_t v98;
  int v99;
  int v100;
  uint64_t v101;
  int v102;
  uint64_t v103;
  int v104;
  uint64_t v105;
  int v106;
  int v107;
  uint64_t v108;
  uint64_t v109;
  int v110;
  uint64_t v111;
  int v112;
  uint64_t v113;
  int v114;
  int v115;
  int v116;
  uint64_t v117;
  int v118;
  int v119;
  int v120;
  int v121;
  uint64_t v122;
  int v123;
  int v124;
  int v125;
  uint64_t v126;
  int v127;
  int v128;
  int v129;
  uint64_t v130;
  int v131;
  int v132;
  int v133;
  int v134;
  int v135;
  int v136;
  std::string v137;
  int v138;
  uint64_t v139;
  uint64_t (**v140)();
  std::string v141;
  int v142;
  uint64_t v143;
  uint64_t (**v144)();
  std::string v145;
  int v146;
  uint64_t v147;
  int v148;
  uint64_t (**v149)();
  std::string v150;
  int v151;
  char v152;
  std::string v153;
  uint64_t (**v154)();
  std::string v155;
  int v156;
  char v157;
  std::string v158;
  uint64_t (**v159)();
  std::string v160;
  int v161;
  uint64_t v162;
  uint64_t (**v163)();
  std::string v164;
  int v165;
  uint64_t v166;
  uint64_t (**v167)();
  std::string v168;
  int v169;
  uint64_t v170;
  uint64_t (**v171)();
  std::string v172;
  int v173;
  uint64_t v174;
  int v175;
  uint64_t (**v176)();
  std::string v177;
  int v178;
  uint64_t v179;
  uint64_t (**v180)();
  std::string v181;
  int v182;
  char v183;
  std::string v184;
  uint64_t (**v185)();
  std::string v186;
  int v187;
  uint64_t v188;
  uint64_t (**v189)();
  std::string v190;
  int v191;
  uint64_t v192;
  int v193;
  uint64_t (**v194)();
  std::string v195;
  int v196;
  uint64_t v197;
  uint64_t (**v198)();
  std::string v199;
  int v200;
  char v201;
  std::string v202;
  uint64_t (**v203)();
  std::string v204;
  int v205;
  char v206;
  std::string v207;
  uint64_t (**v208)();
  std::string v209;
  int v210;
  uint64_t v211;
  int v212;
  uint64_t (**v213)();
  std::string v214;
  int v215;
  char v216;
  std::string v217;
  uint64_t (**v218)();
  std::string v219;
  int v220;
  uint64_t v221;
  uint64_t (**v222)();
  std::string v223;
  int v224;
  uint64_t v225;
  int v226;
  uint64_t (**v227)();
  std::string v228;
  int v229;
  uint64_t v230;
  uint64_t (**v231)();
  std::string v232;
  int v233;
  char v234;
  std::string v235;
  uint64_t (**v236)();
  std::string v237;
  int v238;
  char v239;
  std::string v240;
  uint64_t (**v241)();
  std::string v242;
  int v243;
  char v244;
  std::string v245;
  uint64_t (**v246)();
  std::string v247;
  int v248;
  uint64_t v249;
  uint64_t (**v250)();
  std::string v251;
  int v252;
  uint64_t v253;
  uint64_t (**v254)();
  std::string v255;
  int v256;
  uint64_t v257;
  uint64_t (**v258)();
  std::string v259;
  int v260;
  uint64_t v261;
  uint64_t (**v262)();
  std::string v263;
  int v264;
  uint64_t v265;
  uint64_t (**v266)();
  std::string v267;
  int v268;
  uint64_t v269;
  uint64_t (**v270)();
  std::string v271;
  int v272;
  uint64_t v273;
  uint64_t (**v274)();
  std::string __s;
  int v276;
  uint64_t v277;
  int v278;
  uint64_t (**v279)();
  std::string v280;
  int v281;
  uint64_t v282;
  int v283;
  uint64_t (**v284)();
  std::string __p;
  int v286;
  uint64_t v287;
  uint64_t (**v288)();
  std::string v289;
  int v290;
  uint64_t v291;
  uint64_t (**v292)();
  std::string v293;
  int v294;
  uint64_t v295;
  int v296;
  uint64_t (**v297)();
  std::string v298;
  int v299;
  char v300;
  std::string v301;
  uint64_t (**v302)();
  std::string v303;
  int v304;
  char v305;
  std::string v306;
  uint64_t (**v307)();
  std::string v308;
  int v309;
  uint64_t v310;
  uint64_t (**v311)();
  std::string v312;
  int v313;
  uint64_t v314;
  uint64_t (**v315)();
  std::string v316;
  int v317;
  uint64_t v318;
  uint64_t (**v319)();
  std::string v320;
  int v321;
  uint64_t v322;
  int v323;
  uint64_t (**v324)();
  std::string v325;
  int v326;
  uint64_t v327;
  uint64_t (**v328)();
  std::string v329;
  int v330;
  char v331;
  std::string v332;
  uint64_t (**v333)();
  std::string v334;
  int v335;
  uint64_t v336;
  uint64_t (**v337)();
  std::string v338;
  int v339;
  uint64_t v340;
  int v341;
  uint64_t (**v342)();
  std::string v343;
  int v344;
  uint64_t v345;
  uint64_t (**v346)();
  std::string v347;
  int v348;
  char v349;
  std::string v350;
  uint64_t (**v351)();
  std::string v352;
  int v353;
  char v354;
  std::string v355;
  uint64_t (**v356)();
  std::string v357;
  int v358;
  uint64_t v359;
  int v360;
  uint64_t (**v361)();
  std::string v362;
  int v363;
  char v364;
  std::string v365;
  uint64_t (**v366)();
  std::string v367;
  int v368;
  uint64_t v369;
  uint64_t (**v370)();
  std::string v371;
  int v372;
  uint64_t v373;
  int v374;
  uint64_t (**v375)();
  std::string v376;
  int v377;
  uint64_t v378;
  uint64_t (**v379)();
  std::string v380;
  int v381;
  char v382;
  std::string v383;
  uint64_t (**v384)();
  std::string v385;
  int v386;
  char v387;
  std::string v388;
  uint64_t (**v389)();
  std::string v390;
  int v391;
  char v392;
  std::string v393;
  uint64_t (**v394)();
  std::string v395;
  int v396;
  uint64_t v397;
  uint64_t (**v398)();
  std::string v399;
  int v400;
  uint64_t v401;
  uint64_t (**v402)();
  std::string v403;
  int v404;
  uint64_t v405;
  uint64_t (**v406)();
  std::string v407;
  int v408;
  uint64_t v409;
  uint64_t (**v410)();
  std::string v411;
  int v412;
  uint64_t v413;
  uint64_t (**v414)();
  std::string v415;
  int v416;
  uint64_t v417;
  uint64_t (**v418)();
  std::string v419;
  int v420;
  uint64_t v421;
  uint64_t (**v422)();
  std::string v423;
  int v424;
  uint64_t v425;
  int v426;

  v35 = MEMORY[0x24BDAC7A8](a1);
  v38 = v37;
  v40 = v39;
  v42 = v41;
  v44 = v43;
  v46 = v45;
  v47 = v36;
  v103 = v48;
  v49 = v35;
  if (*(char *)(v36 + 31) < 0)
    std::string::__init_copy_ctor_external(&v280, *(const std::string::value_type **)(v36 + 8), *(_QWORD *)(v36 + 16));
  else
    v280 = *(std::string *)(v36 + 8);
  v50 = *(_DWORD *)(v47 + 32);
  v279 = off_24C335B18;
  v282 = *(_QWORD *)(v47 + 36);
  v51 = *(_DWORD *)(v47 + 44);
  v281 = v50;
  v283 = v51;
  if (*(char *)(v46 + 31) < 0)
    std::string::__init_copy_ctor_external(&__s, *(const std::string::value_type **)(v46 + 8), *(_QWORD *)(v46 + 16));
  else
    __s = *(std::string *)(v46 + 8);
  v52 = *(_DWORD *)(v46 + 32);
  v274 = off_24C335B18;
  v277 = *(_QWORD *)(v46 + 36);
  v53 = *(_DWORD *)(v46 + 44);
  v276 = v52;
  v278 = v53;
  if (*(char *)(v44 + 31) < 0)
    std::string::__init_copy_ctor_external(&v271, *(const std::string::value_type **)(v44 + 8), *(_QWORD *)(v44 + 16));
  else
    v271 = *(std::string *)(v44 + 8);
  v132 = *(_DWORD *)(v44 + 32);
  v272 = v132;
  v270 = off_24C335AF8;
  v130 = *(_QWORD *)(v44 + 36);
  v273 = v130;
  v134 = v52;
  if (*(char *)(v42 + 31) < 0)
    std::string::__init_copy_ctor_external(&v267, *(const std::string::value_type **)(v42 + 8), *(_QWORD *)(v42 + 16));
  else
    v267 = *(std::string *)(v42 + 8);
  v128 = *(_DWORD *)(v42 + 32);
  v268 = v128;
  v266 = off_24C335AF8;
  v126 = *(_QWORD *)(v42 + 36);
  v269 = v126;
  if (*(char *)(v40 + 31) < 0)
    std::string::__init_copy_ctor_external(&v263, *(const std::string::value_type **)(v40 + 8), *(_QWORD *)(v40 + 16));
  else
    v263 = *(std::string *)(v40 + 8);
  v124 = *(_DWORD *)(v40 + 32);
  v264 = v124;
  v262 = off_24C335AF8;
  v122 = *(_QWORD *)(v40 + 36);
  v265 = v122;
  if (*(char *)(v38 + 31) < 0)
    std::string::__init_copy_ctor_external(&v259, *(const std::string::value_type **)(v38 + 8), *(_QWORD *)(v38 + 16));
  else
    v259 = *(std::string *)(v38 + 8);
  v119 = *(_DWORD *)(v38 + 32);
  v260 = v119;
  v258 = off_24C335AF8;
  v117 = *(_QWORD *)(v38 + 36);
  v261 = v117;
  if (*(char *)(a9 + 31) < 0)
    std::string::__init_copy_ctor_external(&v255, *(const std::string::value_type **)(a9 + 8), *(_QWORD *)(a9 + 16));
  else
    v255 = *(std::string *)(a9 + 8);
  v115 = *(_DWORD *)(a9 + 32);
  v256 = v115;
  v254 = off_24C335AF8;
  v113 = *(_QWORD *)(a9 + 36);
  v257 = v113;
  if (*(char *)(a10 + 31) < 0)
    std::string::__init_copy_ctor_external(&v251, *(const std::string::value_type **)(a10 + 8), *(_QWORD *)(a10 + 16));
  else
    v251 = *(std::string *)(a10 + 8);
  v112 = *(_DWORD *)(a10 + 32);
  v252 = v112;
  v250 = off_24C335AF8;
  v111 = *(_QWORD *)(a10 + 36);
  v253 = v111;
  if (*(char *)(a11 + 31) < 0)
    std::string::__init_copy_ctor_external(&v247, *(const std::string::value_type **)(a11 + 8), *(_QWORD *)(a11 + 16));
  else
    v247 = *(std::string *)(a11 + 8);
  v110 = *(_DWORD *)(a11 + 32);
  v248 = v110;
  v246 = off_24C335AF8;
  v109 = *(_QWORD *)(a11 + 36);
  v249 = v109;
  v241 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a12 + 31) < 0)
    std::string::__init_copy_ctor_external(&v242, *(const std::string::value_type **)(a12 + 8), *(_QWORD *)(a12 + 16));
  else
    v242 = *(std::string *)(a12 + 8);
  v243 = *(_DWORD *)(a12 + 32);
  v241 = &off_24C335AB8;
  v244 = *(_BYTE *)(a12 + 36);
  if (*(char *)(a12 + 63) < 0)
    std::string::__init_copy_ctor_external(&v245, *(const std::string::value_type **)(a12 + 40), *(_QWORD *)(a12 + 48));
  else
    v245 = *(std::string *)(a12 + 40);
  v236 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a13 + 31) < 0)
    std::string::__init_copy_ctor_external(&v237, *(const std::string::value_type **)(a13 + 8), *(_QWORD *)(a13 + 16));
  else
    v237 = *(std::string *)(a13 + 8);
  v238 = *(_DWORD *)(a13 + 32);
  v236 = &off_24C335AB8;
  v239 = *(_BYTE *)(a13 + 36);
  if (*(char *)(a13 + 63) < 0)
    std::string::__init_copy_ctor_external(&v240, *(const std::string::value_type **)(a13 + 40), *(_QWORD *)(a13 + 48));
  else
    v240 = *(std::string *)(a13 + 40);
  v231 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a14 + 31) < 0)
    std::string::__init_copy_ctor_external(&v232, *(const std::string::value_type **)(a14 + 8), *(_QWORD *)(a14 + 16));
  else
    v232 = *(std::string *)(a14 + 8);
  v233 = *(_DWORD *)(a14 + 32);
  v231 = &off_24C335AB8;
  v234 = *(_BYTE *)(a14 + 36);
  if (*(char *)(a14 + 63) < 0)
    std::string::__init_copy_ctor_external(&v235, *(const std::string::value_type **)(a14 + 40), *(_QWORD *)(a14 + 48));
  else
    v235 = *(std::string *)(a14 + 40);
  if (*(char *)(a15 + 31) < 0)
    std::string::__init_copy_ctor_external(&v228, *(const std::string::value_type **)(a15 + 8), *(_QWORD *)(a15 + 16));
  else
    v228 = *(std::string *)(a15 + 8);
  v54 = *(_DWORD *)(a15 + 32);
  v229 = v54;
  v227 = off_24C335AF8;
  v108 = *(_QWORD *)(a15 + 36);
  v230 = v108;
  if (*(char *)(a16 + 31) < 0)
    std::string::__init_copy_ctor_external(&v223, *(const std::string::value_type **)(a16 + 8), *(_QWORD *)(a16 + 16));
  else
    v223 = *(std::string *)(a16 + 8);
  v55 = *(_DWORD *)(a16 + 32);
  v222 = off_24C335B18;
  v225 = *(_QWORD *)(a16 + 36);
  v56 = *(_DWORD *)(a16 + 44);
  v107 = v55;
  v224 = v55;
  v226 = v56;
  if (*(char *)(a17 + 31) < 0)
    std::string::__init_copy_ctor_external(&v219, *(const std::string::value_type **)(a17 + 8), *(_QWORD *)(a17 + 16));
  else
    v219 = *(std::string *)(a17 + 8);
  v106 = *(_DWORD *)(a17 + 32);
  v220 = v106;
  v218 = off_24C335AF8;
  v105 = *(_QWORD *)(a17 + 36);
  v221 = v105;
  v213 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a18 + 31) < 0)
    std::string::__init_copy_ctor_external(&v214, *(const std::string::value_type **)(a18 + 8), *(_QWORD *)(a18 + 16));
  else
    v214 = *(std::string *)(a18 + 8);
  v215 = *(_DWORD *)(a18 + 32);
  v213 = &off_24C335AB8;
  v216 = *(_BYTE *)(a18 + 36);
  if (*(char *)(a18 + 63) < 0)
    std::string::__init_copy_ctor_external(&v217, *(const std::string::value_type **)(a18 + 40), *(_QWORD *)(a18 + 48));
  else
    v217 = *(std::string *)(a18 + 40);
  if (*(char *)(a19 + 31) < 0)
    std::string::__init_copy_ctor_external(&v209, *(const std::string::value_type **)(a19 + 8), *(_QWORD *)(a19 + 16));
  else
    v209 = *(std::string *)(a19 + 8);
  v57 = *(_DWORD *)(a19 + 32);
  v208 = off_24C335B18;
  v211 = *(_QWORD *)(a19 + 36);
  v58 = *(_DWORD *)(a19 + 44);
  v104 = v57;
  v210 = v57;
  v212 = v58;
  v203 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a20 + 31) < 0)
    std::string::__init_copy_ctor_external(&v204, *(const std::string::value_type **)(a20 + 8), *(_QWORD *)(a20 + 16));
  else
    v204 = *(std::string *)(a20 + 8);
  v205 = *(_DWORD *)(a20 + 32);
  v203 = &off_24C335AB8;
  v206 = *(_BYTE *)(a20 + 36);
  if (*(char *)(a20 + 63) < 0)
    std::string::__init_copy_ctor_external(&v207, *(const std::string::value_type **)(a20 + 40), *(_QWORD *)(a20 + 48));
  else
    v207 = *(std::string *)(a20 + 40);
  v198 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a21 + 31) < 0)
    std::string::__init_copy_ctor_external(&v199, *(const std::string::value_type **)(a21 + 8), *(_QWORD *)(a21 + 16));
  else
    v199 = *(std::string *)(a21 + 8);
  v200 = *(_DWORD *)(a21 + 32);
  v198 = &off_24C335AB8;
  v201 = *(_BYTE *)(a21 + 36);
  if (*(char *)(a21 + 63) < 0)
    std::string::__init_copy_ctor_external(&v202, *(const std::string::value_type **)(a21 + 40), *(_QWORD *)(a21 + 48));
  else
    v202 = *(std::string *)(a21 + 40);
  if (*(char *)(a22 + 31) < 0)
    std::string::__init_copy_ctor_external(&v195, *(const std::string::value_type **)(a22 + 8), *(_QWORD *)(a22 + 16));
  else
    v195 = *(std::string *)(a22 + 8);
  v102 = *(_DWORD *)(a22 + 32);
  v196 = v102;
  v194 = off_24C335AF8;
  v101 = *(_QWORD *)(a22 + 36);
  v197 = v101;
  if (*(char *)(a23 + 31) < 0)
    std::string::__init_copy_ctor_external(&v190, *(const std::string::value_type **)(a23 + 8), *(_QWORD *)(a23 + 16));
  else
    v190 = *(std::string *)(a23 + 8);
  v59 = *(_DWORD *)(a23 + 32);
  v189 = off_24C335B18;
  v192 = *(_QWORD *)(a23 + 36);
  v60 = *(_DWORD *)(a23 + 44);
  v100 = v59;
  v191 = v59;
  v193 = v60;
  if (*(char *)(a24 + 31) < 0)
    std::string::__init_copy_ctor_external(&v186, *(const std::string::value_type **)(a24 + 8), *(_QWORD *)(a24 + 16));
  else
    v186 = *(std::string *)(a24 + 8);
  v99 = *(_DWORD *)(a24 + 32);
  v187 = v99;
  v185 = off_24C335AF8;
  v61 = *(_QWORD *)(a24 + 36);
  v188 = v61;
  v180 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a25 + 31) < 0)
    std::string::__init_copy_ctor_external(&v181, *(const std::string::value_type **)(a25 + 8), *(_QWORD *)(a25 + 16));
  else
    v181 = *(std::string *)(a25 + 8);
  v182 = *(_DWORD *)(a25 + 32);
  v180 = &off_24C335AB8;
  v183 = *(_BYTE *)(a25 + 36);
  v98 = v61;
  if (*(char *)(a25 + 63) < 0)
    std::string::__init_copy_ctor_external(&v184, *(const std::string::value_type **)(a25 + 40), *(_QWORD *)(a25 + 48));
  else
    v184 = *(std::string *)(a25 + 40);
  if (*(char *)(a26 + 31) < 0)
    std::string::__init_copy_ctor_external(&v177, *(const std::string::value_type **)(a26 + 8), *(_QWORD *)(a26 + 16));
  else
    v177 = *(std::string *)(a26 + 8);
  v97 = *(_DWORD *)(a26 + 32);
  v178 = v97;
  v176 = off_24C335AF8;
  v96 = *(_QWORD *)(a26 + 36);
  v179 = v96;
  if (*(char *)(a27 + 31) < 0)
    std::string::__init_copy_ctor_external(&v172, *(const std::string::value_type **)(a27 + 8), *(_QWORD *)(a27 + 16));
  else
    v172 = *(std::string *)(a27 + 8);
  v62 = *(_DWORD *)(a27 + 32);
  v171 = off_24C335B18;
  v174 = *(_QWORD *)(a27 + 36);
  v63 = *(_DWORD *)(a27 + 44);
  v95 = v62;
  v173 = v62;
  v175 = v63;
  if (*(char *)(a28 + 31) < 0)
    std::string::__init_copy_ctor_external(&v168, *(const std::string::value_type **)(a28 + 8), *(_QWORD *)(a28 + 16));
  else
    v168 = *(std::string *)(a28 + 8);
  v94 = *(_DWORD *)(a28 + 32);
  v169 = v94;
  v167 = off_24C335AF8;
  v93 = *(_QWORD *)(a28 + 36);
  v170 = v93;
  if (*(char *)(a29 + 31) < 0)
    std::string::__init_copy_ctor_external(&v164, *(const std::string::value_type **)(a29 + 8), *(_QWORD *)(a29 + 16));
  else
    v164 = *(std::string *)(a29 + 8);
  v92 = *(_DWORD *)(a29 + 32);
  v165 = v92;
  v163 = off_24C335AF8;
  v91 = *(_QWORD *)(a29 + 36);
  v166 = v91;
  if (*(char *)(a30 + 31) < 0)
    std::string::__init_copy_ctor_external(&v160, *(const std::string::value_type **)(a30 + 8), *(_QWORD *)(a30 + 16));
  else
    v160 = *(std::string *)(a30 + 8);
  v90 = *(_DWORD *)(a30 + 32);
  v161 = v90;
  v159 = off_24C335AF8;
  v64 = *(_QWORD *)(a30 + 36);
  v162 = v64;
  v154 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a31 + 31) < 0)
    std::string::__init_copy_ctor_external(&v155, *(const std::string::value_type **)(a31 + 8), *(_QWORD *)(a31 + 16));
  else
    v155 = *(std::string *)(a31 + 8);
  v156 = *(_DWORD *)(a31 + 32);
  v154 = &off_24C335AB8;
  v157 = *(_BYTE *)(a31 + 36);
  if (*(char *)(a31 + 63) < 0)
    std::string::__init_copy_ctor_external(&v158, *(const std::string::value_type **)(a31 + 40), *(_QWORD *)(a31 + 48));
  else
    v158 = *(std::string *)(a31 + 40);
  v149 = (uint64_t (**)())off_24C335D90;
  v89 = v64;
  if (*(char *)(a32 + 31) < 0)
    std::string::__init_copy_ctor_external(&v150, *(const std::string::value_type **)(a32 + 8), *(_QWORD *)(a32 + 16));
  else
    v150 = *(std::string *)(a32 + 8);
  v151 = *(_DWORD *)(a32 + 32);
  v149 = &off_24C335AB8;
  v152 = *(_BYTE *)(a32 + 36);
  if (*(char *)(a32 + 63) < 0)
    std::string::__init_copy_ctor_external(&v153, *(const std::string::value_type **)(a32 + 40), *(_QWORD *)(a32 + 48));
  else
    v153 = *(std::string *)(a32 + 40);
  if (*(char *)(a33 + 31) < 0)
    std::string::__init_copy_ctor_external(&v145, *(const std::string::value_type **)(a33 + 8), *(_QWORD *)(a33 + 16));
  else
    v145 = *(std::string *)(a33 + 8);
  v65 = *(_DWORD *)(a33 + 32);
  v144 = off_24C335B18;
  v147 = *(_QWORD *)(a33 + 36);
  v66 = *(_DWORD *)(a33 + 44);
  v146 = v65;
  v148 = v66;
  if (*(char *)(a34 + 31) < 0)
    std::string::__init_copy_ctor_external(&v141, *(const std::string::value_type **)(a34 + 8), *(_QWORD *)(a34 + 16));
  else
    v141 = *(std::string *)(a34 + 8);
  v88 = *(_DWORD *)(a34 + 32);
  v142 = v88;
  v140 = off_24C335AF8;
  v87 = *(_QWORD *)(a34 + 36);
  v143 = v87;
  if (*(char *)(a35 + 31) < 0)
    std::string::__init_copy_ctor_external(&v137, *(const std::string::value_type **)(a35 + 8), *(_QWORD *)(a35 + 16));
  else
    v137 = *(std::string *)(a35 + 8);
  v86 = *(_DWORD *)(a35 + 32);
  v138 = v86;
  v85 = *(_QWORD *)(a35 + 36);
  v139 = v85;
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v423, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
  else
    v423 = __s;
  v422 = off_24C335B18;
  v425 = v277;
  v424 = v134;
  v426 = v278;
  v418 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v271.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v419, v271.__r_.__value_.__l.__data_, v271.__r_.__value_.__l.__size_);
  else
    v419 = v271;
  v135 = v65;
  v420 = v132;
  v418 = off_24C335AF8;
  v421 = v130;
  v414 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v267.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v415, v267.__r_.__value_.__l.__data_, v267.__r_.__value_.__l.__size_);
  else
    v415 = v267;
  v416 = v128;
  v414 = off_24C335AF8;
  v417 = v126;
  v410 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v263.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v411, v263.__r_.__value_.__l.__data_, v263.__r_.__value_.__l.__size_);
  else
    v411 = v263;
  v412 = v124;
  v410 = off_24C335AF8;
  v413 = v122;
  v406 = (uint64_t (**)())off_24C335D90;
  v67 = SHIBYTE(v259.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v259.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v407, v259.__r_.__value_.__l.__data_, v259.__r_.__value_.__l.__size_);
  else
    v407 = v259;
  v408 = v119;
  v406 = off_24C335AF8;
  v409 = v117;
  v402 = (uint64_t (**)())off_24C335D90;
  v68 = SHIBYTE(v255.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v255.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v403, v255.__r_.__value_.__l.__data_, v255.__r_.__value_.__l.__size_);
  else
    v403 = v255;
  v404 = v115;
  v402 = off_24C335AF8;
  v405 = v113;
  v398 = (uint64_t (**)())off_24C335D90;
  v69 = SHIBYTE(v251.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v251.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v399, v251.__r_.__value_.__l.__data_, v251.__r_.__value_.__l.__size_);
  else
    v399 = v251;
  v400 = v112;
  v398 = off_24C335AF8;
  v401 = v111;
  v394 = (uint64_t (**)())off_24C335D90;
  v133 = SHIBYTE(v247.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v247.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v395, v247.__r_.__value_.__l.__data_, v247.__r_.__value_.__l.__size_);
  else
    v395 = v247;
  v396 = v110;
  v394 = off_24C335AF8;
  v397 = v109;
  v389 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v242.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v390, v242.__r_.__value_.__l.__data_, v242.__r_.__value_.__l.__size_);
  else
    v390 = v242;
  v391 = v243;
  v389 = &off_24C335AB8;
  v392 = v244;
  if (SHIBYTE(v245.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v393, v245.__r_.__value_.__l.__data_, v245.__r_.__value_.__l.__size_);
  else
    v393 = v245;
  v384 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v237.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v385, v237.__r_.__value_.__l.__data_, v237.__r_.__value_.__l.__size_);
  else
    v385 = v237;
  v386 = v238;
  v384 = &off_24C335AB8;
  v387 = v239;
  if (SHIBYTE(v240.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v388, v240.__r_.__value_.__l.__data_, v240.__r_.__value_.__l.__size_);
  else
    v388 = v240;
  v379 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v232.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v380, v232.__r_.__value_.__l.__data_, v232.__r_.__value_.__l.__size_);
  else
    v380 = v232;
  v381 = v233;
  v379 = &off_24C335AB8;
  v382 = v234;
  if (SHIBYTE(v235.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v383, v235.__r_.__value_.__l.__data_, v235.__r_.__value_.__l.__size_);
  else
    v383 = v235;
  v375 = (uint64_t (**)())off_24C335D90;
  v131 = SHIBYTE(v228.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v228.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v376, v228.__r_.__value_.__l.__data_, v228.__r_.__value_.__l.__size_);
  else
    v376 = v228;
  v377 = v54;
  v375 = off_24C335AF8;
  v378 = v108;
  v370 = (uint64_t (**)())off_24C335D90;
  v129 = SHIBYTE(v223.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v223.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v371, v223.__r_.__value_.__l.__data_, v223.__r_.__value_.__l.__size_);
  else
    v371 = v223;
  v370 = off_24C335B18;
  v373 = v225;
  v372 = v107;
  v374 = v226;
  v366 = (uint64_t (**)())off_24C335D90;
  v136 = SHIBYTE(v219.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v219.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v367, v219.__r_.__value_.__l.__data_, v219.__r_.__value_.__l.__size_);
  else
    v367 = v219;
  v368 = v106;
  v366 = off_24C335AF8;
  v369 = v105;
  v361 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v214.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v362, v214.__r_.__value_.__l.__data_, v214.__r_.__value_.__l.__size_);
  else
    v362 = v214;
  v363 = v215;
  v361 = &off_24C335AB8;
  v364 = v216;
  if (SHIBYTE(v217.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v365, v217.__r_.__value_.__l.__data_, v217.__r_.__value_.__l.__size_);
  else
    v365 = v217;
  v356 = (uint64_t (**)())off_24C335D90;
  v70 = SHIBYTE(v209.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v209.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v357, v209.__r_.__value_.__l.__data_, v209.__r_.__value_.__l.__size_);
  else
    v357 = v209;
  v356 = off_24C335B18;
  v359 = v211;
  v358 = v104;
  v360 = v212;
  v351 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v204.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v352, v204.__r_.__value_.__l.__data_, v204.__r_.__value_.__l.__size_);
  else
    v352 = v204;
  v353 = v205;
  v351 = &off_24C335AB8;
  v354 = v206;
  if (SHIBYTE(v207.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v355, v207.__r_.__value_.__l.__data_, v207.__r_.__value_.__l.__size_);
  else
    v355 = v207;
  v346 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v199.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v347, v199.__r_.__value_.__l.__data_, v199.__r_.__value_.__l.__size_);
  else
    v347 = v199;
  v348 = v200;
  v346 = &off_24C335AB8;
  v349 = v201;
  if (SHIBYTE(v202.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v350, v202.__r_.__value_.__l.__data_, v202.__r_.__value_.__l.__size_);
  else
    v350 = v202;
  v342 = (uint64_t (**)())off_24C335D90;
  v71 = SHIBYTE(v195.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v195.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v343, v195.__r_.__value_.__l.__data_, v195.__r_.__value_.__l.__size_);
  else
    v343 = v195;
  v344 = v102;
  v342 = off_24C335AF8;
  v345 = v101;
  v337 = (uint64_t (**)())off_24C335D90;
  v127 = SHIBYTE(v190.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v190.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v338, v190.__r_.__value_.__l.__data_, v190.__r_.__value_.__l.__size_);
  else
    v338 = v190;
  v337 = off_24C335B18;
  v340 = v192;
  v339 = v100;
  v341 = v193;
  v333 = (uint64_t (**)())off_24C335D90;
  v125 = SHIBYTE(v186.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v186.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v334, v186.__r_.__value_.__l.__data_, v186.__r_.__value_.__l.__size_);
  else
    v334 = v186;
  v335 = v99;
  v333 = off_24C335AF8;
  v336 = v98;
  v328 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v181.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v329, v181.__r_.__value_.__l.__data_, v181.__r_.__value_.__l.__size_);
  else
    v329 = v181;
  v330 = v182;
  v328 = &off_24C335AB8;
  v331 = v183;
  if (SHIBYTE(v184.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v332, v184.__r_.__value_.__l.__data_, v184.__r_.__value_.__l.__size_);
  else
    v332 = v184;
  v324 = (uint64_t (**)())off_24C335D90;
  v123 = SHIBYTE(v177.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v177.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v325, v177.__r_.__value_.__l.__data_, v177.__r_.__value_.__l.__size_);
  else
    v325 = v177;
  v326 = v97;
  v324 = off_24C335AF8;
  v327 = v96;
  v319 = (uint64_t (**)())off_24C335D90;
  v120 = SHIBYTE(v172.__r_.__value_.__r.__words[2]);
  v121 = v71;
  if (SHIBYTE(v172.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v320, v172.__r_.__value_.__l.__data_, v172.__r_.__value_.__l.__size_);
  else
    v320 = v172;
  v319 = off_24C335B18;
  v322 = v174;
  v321 = v95;
  v323 = v175;
  v315 = (uint64_t (**)())off_24C335D90;
  v72 = SHIBYTE(v168.__r_.__value_.__r.__words[2]);
  v118 = v69;
  if (SHIBYTE(v168.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v316, v168.__r_.__value_.__l.__data_, v168.__r_.__value_.__l.__size_);
  else
    v316 = v168;
  v317 = v94;
  v315 = off_24C335AF8;
  v318 = v93;
  v311 = (uint64_t (**)())off_24C335D90;
  v73 = SHIBYTE(v164.__r_.__value_.__r.__words[2]);
  v116 = v70;
  if (SHIBYTE(v164.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v312, v164.__r_.__value_.__l.__data_, v164.__r_.__value_.__l.__size_);
  else
    v312 = v164;
  v313 = v92;
  v311 = off_24C335AF8;
  v314 = v91;
  v307 = (uint64_t (**)())off_24C335D90;
  v74 = SHIBYTE(v160.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v160.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v308, v160.__r_.__value_.__l.__data_, v160.__r_.__value_.__l.__size_);
  else
    v308 = v160;
  v309 = v90;
  v307 = off_24C335AF8;
  v310 = v89;
  v302 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v155.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v303, v155.__r_.__value_.__l.__data_, v155.__r_.__value_.__l.__size_);
  else
    v303 = v155;
  v304 = v156;
  v302 = &off_24C335AB8;
  v305 = v157;
  if (SHIBYTE(v158.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v306, v158.__r_.__value_.__l.__data_, v158.__r_.__value_.__l.__size_);
  else
    v306 = v158;
  v297 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v150.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v298, v150.__r_.__value_.__l.__data_, v150.__r_.__value_.__l.__size_);
  else
    v298 = v150;
  v299 = v151;
  v297 = &off_24C335AB8;
  v300 = v152;
  if (SHIBYTE(v153.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v301, v153.__r_.__value_.__l.__data_, v153.__r_.__value_.__l.__size_);
  else
    v301 = v153;
  v114 = v68;
  v292 = (uint64_t (**)())off_24C335D90;
  v75 = SHIBYTE(v145.__r_.__value_.__r.__words[2]);
  v76 = v67;
  if (SHIBYTE(v145.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v293, v145.__r_.__value_.__l.__data_, v145.__r_.__value_.__l.__size_);
  else
    v293 = v145;
  v292 = off_24C335B18;
  v295 = v147;
  v294 = v135;
  v296 = v148;
  v288 = (uint64_t (**)())off_24C335D90;
  v77 = SHIBYTE(v141.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v141.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v289, v141.__r_.__value_.__l.__data_, v141.__r_.__value_.__l.__size_);
  else
    v289 = v141;
  v290 = v88;
  v288 = off_24C335AF8;
  v291 = v87;
  v284 = (uint64_t (**)())off_24C335D90;
  v78 = SHIBYTE(v137.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v137.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&__p, v137.__r_.__value_.__l.__data_, v137.__r_.__value_.__l.__size_);
  else
    __p = v137;
  v286 = v86;
  v284 = off_24C335AF8;
  v287 = v85;
  mediaplatform::DatabaseColumnTuple<55ul,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::DatabaseColumnTuple(v49, (uint64_t)&v422, (uint64_t)&v418, (uint64_t)&v414, (uint64_t)&v410, (uint64_t)&v406, (uint64_t)&v402, (uint64_t)&v398, (uint64_t)&v394, (uint64_t)&v389, (uint64_t)&v384, (uint64_t)&v379, (uint64_t)&v375, (uint64_t)&v370, (uint64_t)&v366, (uint64_t)&v361, (uint64_t)&v356, (uint64_t)&v351, (uint64_t)&v346,
    (uint64_t)&v342,
    (uint64_t)&v337,
    (uint64_t)&v333,
    (uint64_t)&v328,
    (uint64_t)&v324,
    (uint64_t)&v319,
    (uint64_t)&v315,
    (uint64_t)&v311,
    (uint64_t)&v307,
    (uint64_t)&v302,
    (uint64_t)&v297,
    (uint64_t)&v292,
    (uint64_t)&v288,
    (uint64_t)&v284);
  v284 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v288 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v289.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v289.__r_.__value_.__l.__data_);
  v292 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v293.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v293.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v297);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v302);
  v307 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v308.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v308.__r_.__value_.__l.__data_);
  v311 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v312.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v312.__r_.__value_.__l.__data_);
  v315 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v316.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v316.__r_.__value_.__l.__data_);
  v319 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v320.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v320.__r_.__value_.__l.__data_);
  v324 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v325.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v325.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v328);
  v333 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v334.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v334.__r_.__value_.__l.__data_);
  v337 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v338.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v338.__r_.__value_.__l.__data_);
  v342 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v343.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v343.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v346);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v351);
  v356 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v357.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v357.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v361);
  v366 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v367.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v367.__r_.__value_.__l.__data_);
  v370 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v371.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v371.__r_.__value_.__l.__data_);
  v375 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v376.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v376.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v379);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v384);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v389);
  v394 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v395.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v395.__r_.__value_.__l.__data_);
  v398 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v399.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v399.__r_.__value_.__l.__data_);
  v402 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v403.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v403.__r_.__value_.__l.__data_);
  v406 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v407.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v407.__r_.__value_.__l.__data_);
  v410 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v411.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v411.__r_.__value_.__l.__data_);
  v414 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v415.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v415.__r_.__value_.__l.__data_);
  v418 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v419.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v419.__r_.__value_.__l.__data_);
  v422 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v423.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v423.__r_.__value_.__l.__data_);
  *(_QWORD *)(v49 + 1680) = off_24C335D90;
  v79 = (std::string *)(v49 + 1688);
  v80 = SHIBYTE(v280.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v280.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v79, v280.__r_.__value_.__l.__data_, v280.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v79->__r_.__value_.__l.__data_ = *(_OWORD *)&v280.__r_.__value_.__l.__data_;
    *(_QWORD *)(v49 + 1704) = *((_QWORD *)&v280.__r_.__value_.__l + 2);
  }
  *(_DWORD *)(v49 + 1712) = v281;
  *(_QWORD *)(v49 + 1680) = off_24C335B18;
  *(_QWORD *)(v49 + 1716) = v282;
  *(_DWORD *)(v49 + 1724) = v283;
  if (v78 < 0)
    operator delete(v137.__r_.__value_.__l.__data_);
  v140 = (uint64_t (**)())off_24C335D90;
  if (v77 < 0)
    operator delete(v141.__r_.__value_.__l.__data_);
  v144 = (uint64_t (**)())off_24C335D90;
  if (v75 < 0)
    operator delete(v145.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v149);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v154);
  if (v74 < 0)
    operator delete(v160.__r_.__value_.__l.__data_);
  if (v73 < 0)
    operator delete(v164.__r_.__value_.__l.__data_);
  if (v72 < 0)
    operator delete(v168.__r_.__value_.__l.__data_);
  if (v120 < 0)
    operator delete(v172.__r_.__value_.__l.__data_);
  if (v123 < 0)
    operator delete(v177.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v180);
  if (v125 < 0)
    operator delete(v186.__r_.__value_.__l.__data_);
  if (v127 < 0)
  {
    operator delete(v190.__r_.__value_.__l.__data_);
    if ((v121 & 0x80000000) == 0)
      goto LABEL_319;
  }
  else if ((v121 & 0x80000000) == 0)
  {
    goto LABEL_319;
  }
  operator delete(v195.__r_.__value_.__l.__data_);
LABEL_319:
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v198);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v203);
  if (v116 < 0)
    operator delete(v209.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v213);
  if (v136 < 0)
    operator delete(v219.__r_.__value_.__l.__data_);
  if (v129 < 0)
    operator delete(v223.__r_.__value_.__l.__data_);
  if (v131 < 0)
    operator delete(v228.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v231);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v236);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v241);
  if (v133 < 0)
  {
    operator delete(v247.__r_.__value_.__l.__data_);
    if ((v118 & 0x80000000) == 0)
      goto LABEL_329;
  }
  else if ((v118 & 0x80000000) == 0)
  {
    goto LABEL_329;
  }
  operator delete(v251.__r_.__value_.__l.__data_);
LABEL_329:
  if (v114 < 0)
  {
    operator delete(v255.__r_.__value_.__l.__data_);
    if ((v76 & 0x80000000) == 0)
      goto LABEL_331;
  }
  else if ((v76 & 0x80000000) == 0)
  {
    goto LABEL_331;
  }
  operator delete(v259.__r_.__value_.__l.__data_);
LABEL_331:
  if (SHIBYTE(v263.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v263.__r_.__value_.__l.__data_);
  if (SHIBYTE(v267.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v267.__r_.__value_.__l.__data_);
  if (SHIBYTE(v271.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v271.__r_.__value_.__l.__data_);
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__s.__r_.__value_.__l.__data_);
    if ((v80 & 0x80000000) == 0)
      goto LABEL_339;
  }
  else if ((v80 & 0x80000000) == 0)
  {
    goto LABEL_339;
  }
  operator delete(v280.__r_.__value_.__l.__data_);
LABEL_339:
  *(_QWORD *)(v49 + 1728) = off_24C335D90;
  if (*(char *)(v103 + 31) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(v49 + 1736), *(const std::string::value_type **)(v103 + 8), *(_QWORD *)(v103 + 16));
  }
  else
  {
    v81 = *(_OWORD *)(v103 + 8);
    *(_QWORD *)(v49 + 1752) = *(_QWORD *)(v103 + 24);
    *(_OWORD *)(v49 + 1736) = v81;
  }
  *(_DWORD *)(v49 + 1760) = *(_DWORD *)(v103 + 32);
  *(_QWORD *)(v49 + 1728) = &off_24C335AB8;
  *(_BYTE *)(v49 + 1764) = *(_BYTE *)(v103 + 36);
  v82 = (std::string *)(v49 + 1768);
  if (*(char *)(v103 + 63) < 0)
  {
    std::string::__init_copy_ctor_external(v82, *(const std::string::value_type **)(v103 + 40), *(_QWORD *)(v103 + 48));
  }
  else
  {
    v83 = *(_OWORD *)(v103 + 40);
    *(_QWORD *)(v49 + 1784) = *(_QWORD *)(v103 + 56);
    *(_OWORD *)&v82->__r_.__value_.__l.__data_ = v83;
  }
  return v49;
}

void sub_20A7E89F0(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;
  uint64_t v3;

  *(_QWORD *)(v1 + 1728) = v3;
  if (*(char *)(v1 + 1759) < 0)
    operator delete(*v2);
  mediaplatform::DatabaseColumnTuple<54ul,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(v1);
  _Unwind_Resume(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<55ul,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::DatabaseColumnTuple(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  int v50;
  int v51;
  int v52;
  int v53;
  int v54;
  int v55;
  int v56;
  int v57;
  int v58;
  int v59;
  int v60;
  int v61;
  int v62;
  int v63;
  int v64;
  int v65;
  int v66;
  int v67;
  int v68;
  int v69;
  std::string *v70;
  int v71;
  std::string *v72;
  int v73;
  std::string *v74;
  __int128 v75;
  uint64_t v76;
  uint64_t v78;
  uint64_t v79;
  int v80;
  int v81;
  int v82;
  int v83;
  uint64_t v84;
  uint64_t v85;
  int v86;
  uint64_t v87;
  int v88;
  int v89;
  uint64_t v90;
  int v91;
  uint64_t v92;
  int v93;
  uint64_t v94;
  int v95;
  int v96;
  uint64_t v97;
  int v98;
  uint64_t v99;
  int v100;
  int v101;
  uint64_t v102;
  int v103;
  int v104;
  uint64_t v105;
  int v106;
  int v107;
  int v108;
  int v109;
  uint64_t v110;
  int v111;
  int v112;
  int v113;
  uint64_t v114;
  int v115;
  int v116;
  int v117;
  uint64_t v118;
  int v119;
  int v120;
  int v121;
  uint64_t v122;
  int v123;
  int v124;
  int v125;
  uint64_t v126;
  int v127;
  std::string v128;
  int v129;
  uint64_t v130;
  uint64_t (**v131)();
  std::string v132;
  int v133;
  uint64_t v134;
  uint64_t (**v135)();
  std::string v136;
  int v137;
  uint64_t v138;
  int v139;
  uint64_t (**v140)();
  std::string v141;
  int v142;
  char v143;
  std::string v144;
  uint64_t (**v145)();
  std::string v146;
  int v147;
  char v148;
  std::string v149;
  uint64_t (**v150)();
  std::string v151;
  int v152;
  uint64_t v153;
  uint64_t (**v154)();
  std::string v155;
  int v156;
  uint64_t v157;
  uint64_t (**v158)();
  std::string v159;
  int v160;
  uint64_t v161;
  uint64_t (**v162)();
  std::string v163;
  int v164;
  uint64_t v165;
  int v166;
  uint64_t (**v167)();
  std::string v168;
  int v169;
  uint64_t v170;
  uint64_t (**v171)();
  std::string v172;
  int v173;
  char v174;
  std::string v175;
  uint64_t (**v176)();
  std::string v177;
  int v178;
  uint64_t v179;
  uint64_t (**v180)();
  std::string v181;
  int v182;
  uint64_t v183;
  int v184;
  uint64_t (**v185)();
  std::string v186;
  int v187;
  uint64_t v188;
  uint64_t (**v189)();
  std::string v190;
  int v191;
  char v192;
  std::string v193;
  uint64_t (**v194)();
  std::string v195;
  int v196;
  char v197;
  std::string v198;
  uint64_t (**v199)();
  std::string v200;
  int v201;
  uint64_t v202;
  int v203;
  uint64_t (**v204)();
  std::string v205;
  int v206;
  char v207;
  std::string v208;
  uint64_t (**v209)();
  std::string v210;
  int v211;
  uint64_t v212;
  uint64_t (**v213)();
  std::string v214;
  int v215;
  uint64_t v216;
  int v217;
  uint64_t (**v218)();
  std::string v219;
  int v220;
  uint64_t v221;
  uint64_t (**v222)();
  std::string v223;
  int v224;
  char v225;
  std::string v226;
  uint64_t (**v227)();
  std::string v228;
  int v229;
  char v230;
  std::string v231;
  uint64_t (**v232)();
  std::string v233;
  int v234;
  char v235;
  std::string v236;
  uint64_t (**v237)();
  std::string v238;
  int v239;
  uint64_t v240;
  uint64_t (**v241)();
  std::string v242;
  int v243;
  uint64_t v244;
  uint64_t (**v245)();
  std::string v246;
  int v247;
  uint64_t v248;
  uint64_t (**v249)();
  std::string v250;
  int v251;
  uint64_t v252;
  uint64_t (**v253)();
  std::string v254;
  int v255;
  uint64_t v256;
  uint64_t (**v257)();
  std::string __s;
  int v259;
  uint64_t v260;
  uint64_t (**v261)();
  std::string v262;
  int v263;
  uint64_t v264;
  uint64_t (**v265)();
  std::string v266;
  int v267;
  uint64_t v268;
  uint64_t (**v269)();
  std::string v270;
  int v271;
  uint64_t v272;
  uint64_t (**v273)();
  std::string v274;
  int v275;
  uint64_t v276;
  int v277;
  uint64_t (**v278)();
  std::string v279;
  int v280;
  char v281;
  std::string v282;
  uint64_t (**v283)();
  std::string v284;
  int v285;
  char v286;
  std::string v287;
  uint64_t (**v288)();
  std::string v289;
  int v290;
  uint64_t v291;
  uint64_t (**v292)();
  std::string v293;
  int v294;
  uint64_t v295;
  uint64_t (**v296)();
  std::string v297;
  int v298;
  uint64_t v299;
  uint64_t (**v300)();
  std::string v301;
  int v302;
  uint64_t v303;
  int v304;
  uint64_t (**v305)();
  std::string v306;
  int v307;
  uint64_t v308;
  uint64_t (**v309)();
  std::string v310;
  int v311;
  char v312;
  std::string v313;
  uint64_t (**v314)();
  std::string v315;
  int v316;
  uint64_t v317;
  uint64_t (**v318)();
  std::string v319;
  int v320;
  uint64_t v321;
  int v322;
  uint64_t (**v323)();
  std::string v324;
  int v325;
  uint64_t v326;
  uint64_t (**v327)();
  std::string v328;
  int v329;
  char v330;
  std::string v331;
  uint64_t (**v332)();
  std::string v333;
  int v334;
  char v335;
  std::string v336;
  uint64_t (**v337)();
  std::string v338;
  int v339;
  uint64_t v340;
  int v341;
  uint64_t (**v342)();
  std::string v343;
  int v344;
  char v345;
  std::string v346;
  uint64_t (**v347)();
  std::string v348;
  int v349;
  uint64_t v350;
  uint64_t (**v351)();
  std::string v352;
  int v353;
  uint64_t v354;
  int v355;
  uint64_t (**v356)();
  std::string v357;
  int v358;
  uint64_t v359;
  uint64_t (**v360)();
  std::string v361;
  int v362;
  char v363;
  std::string v364;
  uint64_t (**v365)();
  std::string v366;
  int v367;
  char v368;
  std::string v369;
  uint64_t (**v370)();
  std::string v371;
  int v372;
  char v373;
  std::string v374;
  uint64_t (**v375)();
  std::string v376;
  int v377;
  uint64_t v378;
  uint64_t (**v379)();
  std::string v380;
  int v381;
  uint64_t v382;
  uint64_t (**v383)();
  std::string v384;
  int v385;
  uint64_t v386;
  uint64_t (**v387)();
  std::string v388;
  int v389;
  uint64_t v390;
  uint64_t (**v391)();
  std::string v392;
  int v393;
  uint64_t v394;
  uint64_t (**v395)();
  std::string v396;
  int v397;
  uint64_t v398;
  uint64_t (**v399)();
  std::string __p;
  int v401;
  uint64_t v402;
  uint64_t (**v403)();
  std::string v404;
  int v405;
  uint64_t v406;
  uint64_t (**v407)();
  std::string v408;
  int v409;
  uint64_t v410;
  int v411;
  uint64_t (**v412)();
  std::string v413;
  int v414;
  char v415;
  std::string v416;
  uint64_t (**v417)();
  std::string v418;
  int v419;
  char v420;
  std::string v421;
  uint64_t (**v422)();
  std::string v423;
  int v424;
  uint64_t v425;
  uint64_t (**v426)();
  std::string v427;
  int v428;
  uint64_t v429;
  uint64_t (**v430)();
  std::string v431;
  int v432;
  uint64_t v433;
  uint64_t (**v434)();
  std::string v435;
  int v436;
  uint64_t v437;
  int v438;
  uint64_t (**v439)();
  std::string v440;
  int v441;
  uint64_t v442;
  uint64_t (**v443)();
  std::string v444;
  int v445;
  char v446;
  std::string v447;
  uint64_t (**v448)();
  std::string v449;
  int v450;
  uint64_t v451;
  uint64_t (**v452)();
  std::string v453;
  int v454;
  uint64_t v455;
  int v456;
  uint64_t (**v457)();
  std::string v458;
  int v459;
  uint64_t v460;
  uint64_t (**v461)();
  std::string v462;
  int v463;
  char v464;
  std::string v465;
  uint64_t (**v466)();
  std::string v467;
  int v468;
  char v469;
  std::string v470;
  uint64_t (**v471)();
  std::string v472;
  int v473;
  uint64_t v474;
  int v475;
  uint64_t (**v476)();
  std::string v477;
  int v478;
  char v479;
  std::string v480;
  uint64_t (**v481)();
  std::string v482;
  int v483;
  uint64_t v484;
  uint64_t (**v485)();
  std::string v486;
  int v487;
  uint64_t v488;
  int v489;
  uint64_t (**v490)();
  std::string v491;
  int v492;
  uint64_t v493;
  uint64_t (**v494)();
  std::string v495;
  int v496;
  char v497;
  std::string v498;
  uint64_t (**v499)();
  std::string v500;
  int v501;
  char v502;
  std::string v503;
  uint64_t (**v504)();
  std::string v505;
  int v506;
  char v507;
  std::string v508;
  uint64_t (**v509)();
  std::string v510;
  int v511;
  uint64_t v512;
  uint64_t (**v513)();
  std::string v514;
  int v515;
  uint64_t v516;
  uint64_t (**v517)();
  std::string v518;
  int v519;
  uint64_t v520;
  uint64_t (**v521)();
  std::string v522;
  int v523;
  uint64_t v524;
  uint64_t (**v525)();
  std::string v526;
  int v527;
  uint64_t v528;

  v33 = MEMORY[0x24BDAC7A8](a1);
  v36 = v35;
  v38 = v37;
  v40 = v39;
  v42 = v41;
  v44 = v43;
  v45 = v34;
  v47 = v46;
  v79 = v33;
  if (*(char *)(v34 + 31) < 0)
    std::string::__init_copy_ctor_external(&v262, *(const std::string::value_type **)(v34 + 8), *(_QWORD *)(v34 + 16));
  else
    v262 = *(std::string *)(v34 + 8);
  v263 = *(_DWORD *)(v45 + 32);
  v261 = off_24C335AF8;
  v264 = *(_QWORD *)(v45 + 36);
  if (*(char *)(v44 + 31) < 0)
    std::string::__init_copy_ctor_external(&__s, *(const std::string::value_type **)(v44 + 8), *(_QWORD *)(v44 + 16));
  else
    __s = *(std::string *)(v44 + 8);
  v48 = *(_DWORD *)(v44 + 32);
  v259 = v48;
  v257 = off_24C335AF8;
  v49 = *(_QWORD *)(v44 + 36);
  v260 = v49;
  v78 = v47;
  if (*(char *)(v42 + 31) < 0)
    std::string::__init_copy_ctor_external(&v254, *(const std::string::value_type **)(v42 + 8), *(_QWORD *)(v42 + 16));
  else
    v254 = *(std::string *)(v42 + 8);
  v82 = *(_DWORD *)(v42 + 32);
  v255 = v82;
  v253 = off_24C335AF8;
  v84 = *(_QWORD *)(v42 + 36);
  v256 = v84;
  if (*(char *)(v40 + 31) < 0)
    std::string::__init_copy_ctor_external(&v250, *(const std::string::value_type **)(v40 + 8), *(_QWORD *)(v40 + 16));
  else
    v250 = *(std::string *)(v40 + 8);
  v81 = *(_DWORD *)(v40 + 32);
  v251 = v81;
  v249 = off_24C335AF8;
  v126 = *(_QWORD *)(v40 + 36);
  v252 = v126;
  if (*(char *)(v38 + 31) < 0)
    std::string::__init_copy_ctor_external(&v246, *(const std::string::value_type **)(v38 + 8), *(_QWORD *)(v38 + 16));
  else
    v246 = *(std::string *)(v38 + 8);
  v124 = *(_DWORD *)(v38 + 32);
  v247 = v124;
  v245 = off_24C335AF8;
  v122 = *(_QWORD *)(v38 + 36);
  v248 = v122;
  if (*(char *)(v36 + 31) < 0)
    std::string::__init_copy_ctor_external(&v242, *(const std::string::value_type **)(v36 + 8), *(_QWORD *)(v36 + 16));
  else
    v242 = *(std::string *)(v36 + 8);
  v120 = *(_DWORD *)(v36 + 32);
  v243 = v120;
  v241 = off_24C335AF8;
  v118 = *(_QWORD *)(v36 + 36);
  v244 = v118;
  if (*(char *)(a9 + 31) < 0)
    std::string::__init_copy_ctor_external(&v238, *(const std::string::value_type **)(a9 + 8), *(_QWORD *)(a9 + 16));
  else
    v238 = *(std::string *)(a9 + 8);
  v116 = *(_DWORD *)(a9 + 32);
  v239 = v116;
  v237 = off_24C335AF8;
  v114 = *(_QWORD *)(a9 + 36);
  v240 = v114;
  v232 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a10 + 31) < 0)
    std::string::__init_copy_ctor_external(&v233, *(const std::string::value_type **)(a10 + 8), *(_QWORD *)(a10 + 16));
  else
    v233 = *(std::string *)(a10 + 8);
  v234 = *(_DWORD *)(a10 + 32);
  v232 = &off_24C335AB8;
  v235 = *(_BYTE *)(a10 + 36);
  if (*(char *)(a10 + 63) < 0)
    std::string::__init_copy_ctor_external(&v236, *(const std::string::value_type **)(a10 + 40), *(_QWORD *)(a10 + 48));
  else
    v236 = *(std::string *)(a10 + 40);
  v227 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a11 + 31) < 0)
    std::string::__init_copy_ctor_external(&v228, *(const std::string::value_type **)(a11 + 8), *(_QWORD *)(a11 + 16));
  else
    v228 = *(std::string *)(a11 + 8);
  v229 = *(_DWORD *)(a11 + 32);
  v227 = &off_24C335AB8;
  v230 = *(_BYTE *)(a11 + 36);
  if (*(char *)(a11 + 63) < 0)
    std::string::__init_copy_ctor_external(&v231, *(const std::string::value_type **)(a11 + 40), *(_QWORD *)(a11 + 48));
  else
    v231 = *(std::string *)(a11 + 40);
  v222 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a12 + 31) < 0)
    std::string::__init_copy_ctor_external(&v223, *(const std::string::value_type **)(a12 + 8), *(_QWORD *)(a12 + 16));
  else
    v223 = *(std::string *)(a12 + 8);
  v224 = *(_DWORD *)(a12 + 32);
  v222 = &off_24C335AB8;
  v225 = *(_BYTE *)(a12 + 36);
  if (*(char *)(a12 + 63) < 0)
    std::string::__init_copy_ctor_external(&v226, *(const std::string::value_type **)(a12 + 40), *(_QWORD *)(a12 + 48));
  else
    v226 = *(std::string *)(a12 + 40);
  if (*(char *)(a13 + 31) < 0)
    std::string::__init_copy_ctor_external(&v219, *(const std::string::value_type **)(a13 + 8), *(_QWORD *)(a13 + 16));
  else
    v219 = *(std::string *)(a13 + 8);
  v112 = *(_DWORD *)(a13 + 32);
  v220 = v112;
  v218 = off_24C335AF8;
  v110 = *(_QWORD *)(a13 + 36);
  v221 = v110;
  if (*(char *)(a14 + 31) < 0)
    std::string::__init_copy_ctor_external(&v214, *(const std::string::value_type **)(a14 + 8), *(_QWORD *)(a14 + 16));
  else
    v214 = *(std::string *)(a14 + 8);
  v50 = *(_DWORD *)(a14 + 32);
  v213 = off_24C335B18;
  v216 = *(_QWORD *)(a14 + 36);
  v51 = *(_DWORD *)(a14 + 44);
  v109 = v50;
  v215 = v50;
  v217 = v51;
  if (*(char *)(a15 + 31) < 0)
    std::string::__init_copy_ctor_external(&v210, *(const std::string::value_type **)(a15 + 8), *(_QWORD *)(a15 + 16));
  else
    v210 = *(std::string *)(a15 + 8);
  v107 = *(_DWORD *)(a15 + 32);
  v211 = v107;
  v209 = off_24C335AF8;
  v105 = *(_QWORD *)(a15 + 36);
  v212 = v105;
  v204 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a16 + 31) < 0)
    std::string::__init_copy_ctor_external(&v205, *(const std::string::value_type **)(a16 + 8), *(_QWORD *)(a16 + 16));
  else
    v205 = *(std::string *)(a16 + 8);
  v206 = *(_DWORD *)(a16 + 32);
  v204 = &off_24C335AB8;
  v207 = *(_BYTE *)(a16 + 36);
  if (*(char *)(a16 + 63) < 0)
    std::string::__init_copy_ctor_external(&v208, *(const std::string::value_type **)(a16 + 40), *(_QWORD *)(a16 + 48));
  else
    v208 = *(std::string *)(a16 + 40);
  if (*(char *)(a17 + 31) < 0)
    std::string::__init_copy_ctor_external(&v200, *(const std::string::value_type **)(a17 + 8), *(_QWORD *)(a17 + 16));
  else
    v200 = *(std::string *)(a17 + 8);
  v52 = *(_DWORD *)(a17 + 32);
  v199 = off_24C335B18;
  v202 = *(_QWORD *)(a17 + 36);
  v53 = *(_DWORD *)(a17 + 44);
  v104 = v52;
  v201 = v52;
  v203 = v53;
  v194 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a18 + 31) < 0)
    std::string::__init_copy_ctor_external(&v195, *(const std::string::value_type **)(a18 + 8), *(_QWORD *)(a18 + 16));
  else
    v195 = *(std::string *)(a18 + 8);
  v196 = *(_DWORD *)(a18 + 32);
  v194 = &off_24C335AB8;
  v197 = *(_BYTE *)(a18 + 36);
  if (*(char *)(a18 + 63) < 0)
    std::string::__init_copy_ctor_external(&v198, *(const std::string::value_type **)(a18 + 40), *(_QWORD *)(a18 + 48));
  else
    v198 = *(std::string *)(a18 + 40);
  v189 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a19 + 31) < 0)
    std::string::__init_copy_ctor_external(&v190, *(const std::string::value_type **)(a19 + 8), *(_QWORD *)(a19 + 16));
  else
    v190 = *(std::string *)(a19 + 8);
  v191 = *(_DWORD *)(a19 + 32);
  v189 = &off_24C335AB8;
  v192 = *(_BYTE *)(a19 + 36);
  if (*(char *)(a19 + 63) < 0)
    std::string::__init_copy_ctor_external(&v193, *(const std::string::value_type **)(a19 + 40), *(_QWORD *)(a19 + 48));
  else
    v193 = *(std::string *)(a19 + 40);
  if (*(char *)(a20 + 31) < 0)
    std::string::__init_copy_ctor_external(&v186, *(const std::string::value_type **)(a20 + 8), *(_QWORD *)(a20 + 16));
  else
    v186 = *(std::string *)(a20 + 8);
  v103 = *(_DWORD *)(a20 + 32);
  v187 = v103;
  v185 = off_24C335AF8;
  v102 = *(_QWORD *)(a20 + 36);
  v188 = v102;
  if (*(char *)(a21 + 31) < 0)
    std::string::__init_copy_ctor_external(&v181, *(const std::string::value_type **)(a21 + 8), *(_QWORD *)(a21 + 16));
  else
    v181 = *(std::string *)(a21 + 8);
  v54 = *(_DWORD *)(a21 + 32);
  v180 = off_24C335B18;
  v183 = *(_QWORD *)(a21 + 36);
  v55 = *(_DWORD *)(a21 + 44);
  v101 = v54;
  v182 = v54;
  v184 = v55;
  if (*(char *)(a22 + 31) < 0)
    std::string::__init_copy_ctor_external(&v177, *(const std::string::value_type **)(a22 + 8), *(_QWORD *)(a22 + 16));
  else
    v177 = *(std::string *)(a22 + 8);
  v100 = *(_DWORD *)(a22 + 32);
  v178 = v100;
  v176 = off_24C335AF8;
  v99 = *(_QWORD *)(a22 + 36);
  v179 = v99;
  v171 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a23 + 31) < 0)
    std::string::__init_copy_ctor_external(&v172, *(const std::string::value_type **)(a23 + 8), *(_QWORD *)(a23 + 16));
  else
    v172 = *(std::string *)(a23 + 8);
  v173 = *(_DWORD *)(a23 + 32);
  v171 = &off_24C335AB8;
  v174 = *(_BYTE *)(a23 + 36);
  if (*(char *)(a23 + 63) < 0)
    std::string::__init_copy_ctor_external(&v175, *(const std::string::value_type **)(a23 + 40), *(_QWORD *)(a23 + 48));
  else
    v175 = *(std::string *)(a23 + 40);
  if (*(char *)(a24 + 31) < 0)
    std::string::__init_copy_ctor_external(&v168, *(const std::string::value_type **)(a24 + 8), *(_QWORD *)(a24 + 16));
  else
    v168 = *(std::string *)(a24 + 8);
  v98 = *(_DWORD *)(a24 + 32);
  v169 = v98;
  v167 = off_24C335AF8;
  v97 = *(_QWORD *)(a24 + 36);
  v170 = v97;
  if (*(char *)(a25 + 31) < 0)
    std::string::__init_copy_ctor_external(&v163, *(const std::string::value_type **)(a25 + 8), *(_QWORD *)(a25 + 16));
  else
    v163 = *(std::string *)(a25 + 8);
  v56 = *(_DWORD *)(a25 + 32);
  v162 = off_24C335B18;
  v165 = *(_QWORD *)(a25 + 36);
  v57 = *(_DWORD *)(a25 + 44);
  v96 = v56;
  v164 = v56;
  v166 = v57;
  if (*(char *)(a26 + 31) < 0)
    std::string::__init_copy_ctor_external(&v159, *(const std::string::value_type **)(a26 + 8), *(_QWORD *)(a26 + 16));
  else
    v159 = *(std::string *)(a26 + 8);
  v95 = *(_DWORD *)(a26 + 32);
  v160 = v95;
  v158 = off_24C335AF8;
  v94 = *(_QWORD *)(a26 + 36);
  v161 = v94;
  if (*(char *)(a27 + 31) < 0)
    std::string::__init_copy_ctor_external(&v155, *(const std::string::value_type **)(a27 + 8), *(_QWORD *)(a27 + 16));
  else
    v155 = *(std::string *)(a27 + 8);
  v93 = *(_DWORD *)(a27 + 32);
  v156 = v93;
  v154 = off_24C335AF8;
  v92 = *(_QWORD *)(a27 + 36);
  v157 = v92;
  if (*(char *)(a28 + 31) < 0)
    std::string::__init_copy_ctor_external(&v151, *(const std::string::value_type **)(a28 + 8), *(_QWORD *)(a28 + 16));
  else
    v151 = *(std::string *)(a28 + 8);
  v91 = *(_DWORD *)(a28 + 32);
  v152 = v91;
  v150 = off_24C335AF8;
  v90 = *(_QWORD *)(a28 + 36);
  v153 = v90;
  v145 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a29 + 31) < 0)
    std::string::__init_copy_ctor_external(&v146, *(const std::string::value_type **)(a29 + 8), *(_QWORD *)(a29 + 16));
  else
    v146 = *(std::string *)(a29 + 8);
  v147 = *(_DWORD *)(a29 + 32);
  v145 = &off_24C335AB8;
  v148 = *(_BYTE *)(a29 + 36);
  if (*(char *)(a29 + 63) < 0)
    std::string::__init_copy_ctor_external(&v149, *(const std::string::value_type **)(a29 + 40), *(_QWORD *)(a29 + 48));
  else
    v149 = *(std::string *)(a29 + 40);
  v140 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a30 + 31) < 0)
    std::string::__init_copy_ctor_external(&v141, *(const std::string::value_type **)(a30 + 8), *(_QWORD *)(a30 + 16));
  else
    v141 = *(std::string *)(a30 + 8);
  v142 = *(_DWORD *)(a30 + 32);
  v140 = &off_24C335AB8;
  v143 = *(_BYTE *)(a30 + 36);
  if (*(char *)(a30 + 63) < 0)
    std::string::__init_copy_ctor_external(&v144, *(const std::string::value_type **)(a30 + 40), *(_QWORD *)(a30 + 48));
  else
    v144 = *(std::string *)(a30 + 40);
  if (*(char *)(a31 + 31) < 0)
    std::string::__init_copy_ctor_external(&v136, *(const std::string::value_type **)(a31 + 8), *(_QWORD *)(a31 + 16));
  else
    v136 = *(std::string *)(a31 + 8);
  v58 = *(_DWORD *)(a31 + 32);
  v135 = off_24C335B18;
  v138 = *(_QWORD *)(a31 + 36);
  v59 = *(_DWORD *)(a31 + 44);
  v89 = v58;
  v137 = v58;
  v139 = v59;
  if (*(char *)(a32 + 31) < 0)
    std::string::__init_copy_ctor_external(&v132, *(const std::string::value_type **)(a32 + 8), *(_QWORD *)(a32 + 16));
  else
    v132 = *(std::string *)(a32 + 8);
  v88 = *(_DWORD *)(a32 + 32);
  v133 = v88;
  v131 = off_24C335AF8;
  v87 = *(_QWORD *)(a32 + 36);
  v134 = v87;
  if (*(char *)(a33 + 31) < 0)
    std::string::__init_copy_ctor_external(&v128, *(const std::string::value_type **)(a33 + 8), *(_QWORD *)(a33 + 16));
  else
    v128 = *(std::string *)(a33 + 8);
  v86 = *(_DWORD *)(a33 + 32);
  v129 = v86;
  v85 = *(_QWORD *)(a33 + 36);
  v130 = v85;
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v396, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
  else
    v396 = __s;
  v397 = v48;
  v395 = off_24C335AF8;
  v398 = v49;
  if (SHIBYTE(v254.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v392, v254.__r_.__value_.__l.__data_, v254.__r_.__value_.__l.__size_);
  else
    v392 = v254;
  v393 = v82;
  v391 = off_24C335AF8;
  v394 = v84;
  if (SHIBYTE(v250.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v388, v250.__r_.__value_.__l.__data_, v250.__r_.__value_.__l.__size_);
  else
    v388 = v250;
  v389 = v81;
  v387 = off_24C335AF8;
  v390 = v126;
  v383 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v246.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v384, v246.__r_.__value_.__l.__data_, v246.__r_.__value_.__l.__size_);
  else
    v384 = v246;
  v385 = v124;
  v383 = off_24C335AF8;
  v386 = v122;
  v379 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v242.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v380, v242.__r_.__value_.__l.__data_, v242.__r_.__value_.__l.__size_);
  else
    v380 = v242;
  v381 = v120;
  v379 = off_24C335AF8;
  v382 = v118;
  v375 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v238.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v376, v238.__r_.__value_.__l.__data_, v238.__r_.__value_.__l.__size_);
  else
    v376 = v238;
  v377 = v116;
  v375 = off_24C335AF8;
  v378 = v114;
  v370 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v233.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v371, v233.__r_.__value_.__l.__data_, v233.__r_.__value_.__l.__size_);
  else
    v371 = v233;
  v372 = v234;
  v370 = &off_24C335AB8;
  v373 = v235;
  if (SHIBYTE(v236.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v374, v236.__r_.__value_.__l.__data_, v236.__r_.__value_.__l.__size_);
  else
    v374 = v236;
  v365 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v228.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v366, v228.__r_.__value_.__l.__data_, v228.__r_.__value_.__l.__size_);
  else
    v366 = v228;
  v367 = v229;
  v365 = &off_24C335AB8;
  v368 = v230;
  if (SHIBYTE(v231.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v369, v231.__r_.__value_.__l.__data_, v231.__r_.__value_.__l.__size_);
  else
    v369 = v231;
  v360 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v223.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v361, v223.__r_.__value_.__l.__data_, v223.__r_.__value_.__l.__size_);
  else
    v361 = v223;
  v362 = v224;
  v360 = &off_24C335AB8;
  v363 = v225;
  if (SHIBYTE(v226.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v364, v226.__r_.__value_.__l.__data_, v226.__r_.__value_.__l.__size_);
  else
    v364 = v226;
  v356 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v219.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v357, v219.__r_.__value_.__l.__data_, v219.__r_.__value_.__l.__size_);
  else
    v357 = v219;
  v358 = v112;
  v356 = off_24C335AF8;
  v359 = v110;
  v351 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v214.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v352, v214.__r_.__value_.__l.__data_, v214.__r_.__value_.__l.__size_);
  else
    v352 = v214;
  v351 = off_24C335B18;
  v354 = v216;
  v353 = v109;
  v355 = v217;
  v347 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v210.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v348, v210.__r_.__value_.__l.__data_, v210.__r_.__value_.__l.__size_);
  else
    v348 = v210;
  v349 = v107;
  v347 = off_24C335AF8;
  v350 = v105;
  v342 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v205.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v343, v205.__r_.__value_.__l.__data_, v205.__r_.__value_.__l.__size_);
  else
    v343 = v205;
  v344 = v206;
  v342 = &off_24C335AB8;
  v345 = v207;
  if (SHIBYTE(v208.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v346, v208.__r_.__value_.__l.__data_, v208.__r_.__value_.__l.__size_);
  else
    v346 = v208;
  v337 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v200.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v338, v200.__r_.__value_.__l.__data_, v200.__r_.__value_.__l.__size_);
  else
    v338 = v200;
  v337 = off_24C335B18;
  v340 = v202;
  v339 = v104;
  v341 = v203;
  v332 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v195.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v333, v195.__r_.__value_.__l.__data_, v195.__r_.__value_.__l.__size_);
  else
    v333 = v195;
  v334 = v196;
  v332 = &off_24C335AB8;
  v335 = v197;
  if (SHIBYTE(v198.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v336, v198.__r_.__value_.__l.__data_, v198.__r_.__value_.__l.__size_);
  else
    v336 = v198;
  v327 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v190.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v328, v190.__r_.__value_.__l.__data_, v190.__r_.__value_.__l.__size_);
  else
    v328 = v190;
  v329 = v191;
  v327 = &off_24C335AB8;
  v330 = v192;
  if (SHIBYTE(v193.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v331, v193.__r_.__value_.__l.__data_, v193.__r_.__value_.__l.__size_);
  else
    v331 = v193;
  v323 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v186.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v324, v186.__r_.__value_.__l.__data_, v186.__r_.__value_.__l.__size_);
  else
    v324 = v186;
  v325 = v103;
  v323 = off_24C335AF8;
  v326 = v102;
  v318 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v181.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v319, v181.__r_.__value_.__l.__data_, v181.__r_.__value_.__l.__size_);
  else
    v319 = v181;
  v318 = off_24C335B18;
  v321 = v183;
  v320 = v101;
  v322 = v184;
  v314 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v177.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v315, v177.__r_.__value_.__l.__data_, v177.__r_.__value_.__l.__size_);
  else
    v315 = v177;
  v316 = v100;
  v314 = off_24C335AF8;
  v317 = v99;
  v309 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v172.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v310, v172.__r_.__value_.__l.__data_, v172.__r_.__value_.__l.__size_);
  else
    v310 = v172;
  v311 = v173;
  v309 = &off_24C335AB8;
  v312 = v174;
  if (SHIBYTE(v175.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v313, v175.__r_.__value_.__l.__data_, v175.__r_.__value_.__l.__size_);
  else
    v313 = v175;
  v305 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v168.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v306, v168.__r_.__value_.__l.__data_, v168.__r_.__value_.__l.__size_);
  else
    v306 = v168;
  v307 = v98;
  v305 = off_24C335AF8;
  v308 = v97;
  v300 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v163.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v301, v163.__r_.__value_.__l.__data_, v163.__r_.__value_.__l.__size_);
  else
    v301 = v163;
  v300 = off_24C335B18;
  v303 = v165;
  v302 = v96;
  v304 = v166;
  v296 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v159.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v297, v159.__r_.__value_.__l.__data_, v159.__r_.__value_.__l.__size_);
  else
    v297 = v159;
  v298 = v95;
  v296 = off_24C335AF8;
  v299 = v94;
  v292 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v155.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v293, v155.__r_.__value_.__l.__data_, v155.__r_.__value_.__l.__size_);
  else
    v293 = v155;
  v294 = v93;
  v292 = off_24C335AF8;
  v295 = v92;
  v288 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v151.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v289, v151.__r_.__value_.__l.__data_, v151.__r_.__value_.__l.__size_);
  else
    v289 = v151;
  v290 = v91;
  v288 = off_24C335AF8;
  v291 = v90;
  v283 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v146.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v284, v146.__r_.__value_.__l.__data_, v146.__r_.__value_.__l.__size_);
  else
    v284 = v146;
  v285 = v147;
  v283 = &off_24C335AB8;
  v286 = v148;
  if (SHIBYTE(v149.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v287, v149.__r_.__value_.__l.__data_, v149.__r_.__value_.__l.__size_);
  else
    v287 = v149;
  v278 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v141.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v279, v141.__r_.__value_.__l.__data_, v141.__r_.__value_.__l.__size_);
  else
    v279 = v141;
  v280 = v142;
  v278 = &off_24C335AB8;
  v281 = v143;
  if (SHIBYTE(v144.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v282, v144.__r_.__value_.__l.__data_, v144.__r_.__value_.__l.__size_);
  else
    v282 = v144;
  v273 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v136.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v274, v136.__r_.__value_.__l.__data_, v136.__r_.__value_.__l.__size_);
  else
    v274 = v136;
  v273 = off_24C335B18;
  v276 = v138;
  v275 = v89;
  v277 = v139;
  v269 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v132.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v270, v132.__r_.__value_.__l.__data_, v132.__r_.__value_.__l.__size_);
  else
    v270 = v132;
  v271 = v88;
  v269 = off_24C335AF8;
  v272 = v87;
  v265 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v128.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v266, v128.__r_.__value_.__l.__data_, v128.__r_.__value_.__l.__size_);
  else
    v266 = v128;
  v267 = v86;
  v265 = off_24C335AF8;
  v268 = v85;
  v525 = (uint64_t (**)())off_24C335D90;
  v60 = SHIBYTE(v392.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v392.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v526, v392.__r_.__value_.__l.__data_, v392.__r_.__value_.__l.__size_);
  else
    v526 = v392;
  v527 = v82;
  v525 = off_24C335AF8;
  v528 = v84;
  v521 = (uint64_t (**)())off_24C335D90;
  v61 = SHIBYTE(v388.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v388.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v522, v388.__r_.__value_.__l.__data_, v388.__r_.__value_.__l.__size_);
  else
    v522 = v388;
  v523 = v81;
  v521 = off_24C335AF8;
  v524 = v126;
  v517 = (uint64_t (**)())off_24C335D90;
  v62 = SHIBYTE(v384.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v384.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v518, v384.__r_.__value_.__l.__data_, v384.__r_.__value_.__l.__size_);
  else
    v518 = v384;
  v519 = v124;
  v517 = off_24C335AF8;
  v520 = v122;
  v513 = (uint64_t (**)())off_24C335D90;
  v63 = SHIBYTE(v380.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v380.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v514, v380.__r_.__value_.__l.__data_, v380.__r_.__value_.__l.__size_);
  else
    v514 = v380;
  v515 = v120;
  v513 = off_24C335AF8;
  v516 = v118;
  v509 = (uint64_t (**)())off_24C335D90;
  v127 = SHIBYTE(v376.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v376.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v510, v376.__r_.__value_.__l.__data_, v376.__r_.__value_.__l.__size_);
  else
    v510 = v376;
  v511 = v116;
  v509 = off_24C335AF8;
  v512 = v114;
  v504 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v371.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v505, v371.__r_.__value_.__l.__data_, v371.__r_.__value_.__l.__size_);
  else
    v505 = v371;
  v506 = v372;
  v504 = &off_24C335AB8;
  v507 = v373;
  if (SHIBYTE(v374.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v508, v374.__r_.__value_.__l.__data_, v374.__r_.__value_.__l.__size_);
  else
    v508 = v374;
  v499 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v366.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v500, v366.__r_.__value_.__l.__data_, v366.__r_.__value_.__l.__size_);
  else
    v500 = v366;
  v501 = v367;
  v499 = &off_24C335AB8;
  v502 = v368;
  if (SHIBYTE(v369.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v503, v369.__r_.__value_.__l.__data_, v369.__r_.__value_.__l.__size_);
  else
    v503 = v369;
  v494 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v361.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v495, v361.__r_.__value_.__l.__data_, v361.__r_.__value_.__l.__size_);
  else
    v495 = v361;
  v496 = v362;
  v494 = &off_24C335AB8;
  v497 = v363;
  if (SHIBYTE(v364.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v498, v364.__r_.__value_.__l.__data_, v364.__r_.__value_.__l.__size_);
  else
    v498 = v364;
  v490 = (uint64_t (**)())off_24C335D90;
  v125 = SHIBYTE(v357.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v357.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v491, v357.__r_.__value_.__l.__data_, v357.__r_.__value_.__l.__size_);
  else
    v491 = v357;
  v492 = v112;
  v490 = off_24C335AF8;
  v493 = v110;
  v485 = (uint64_t (**)())off_24C335D90;
  v123 = SHIBYTE(v352.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v352.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v486, v352.__r_.__value_.__l.__data_, v352.__r_.__value_.__l.__size_);
  else
    v486 = v352;
  v485 = off_24C335B18;
  v488 = v354;
  v487 = v109;
  v489 = v355;
  v481 = (uint64_t (**)())off_24C335D90;
  v121 = SHIBYTE(v348.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v348.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v482, v348.__r_.__value_.__l.__data_, v348.__r_.__value_.__l.__size_);
  else
    v482 = v348;
  v483 = v107;
  v481 = off_24C335AF8;
  v484 = v105;
  v476 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v343.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v477, v343.__r_.__value_.__l.__data_, v343.__r_.__value_.__l.__size_);
  else
    v477 = v343;
  v478 = v344;
  v476 = &off_24C335AB8;
  v479 = v345;
  if (SHIBYTE(v346.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v480, v346.__r_.__value_.__l.__data_, v346.__r_.__value_.__l.__size_);
  else
    v480 = v346;
  v471 = (uint64_t (**)())off_24C335D90;
  v64 = SHIBYTE(v338.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v338.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v472, v338.__r_.__value_.__l.__data_, v338.__r_.__value_.__l.__size_);
  else
    v472 = v338;
  v471 = off_24C335B18;
  v474 = v340;
  v473 = v104;
  v475 = v341;
  v466 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v333.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v467, v333.__r_.__value_.__l.__data_, v333.__r_.__value_.__l.__size_);
  else
    v467 = v333;
  v468 = v334;
  v466 = &off_24C335AB8;
  v469 = v335;
  if (SHIBYTE(v336.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v470, v336.__r_.__value_.__l.__data_, v336.__r_.__value_.__l.__size_);
  else
    v470 = v336;
  v461 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v328.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v462, v328.__r_.__value_.__l.__data_, v328.__r_.__value_.__l.__size_);
  else
    v462 = v328;
  v463 = v329;
  v461 = &off_24C335AB8;
  v464 = v330;
  if (SHIBYTE(v331.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v465, v331.__r_.__value_.__l.__data_, v331.__r_.__value_.__l.__size_);
  else
    v465 = v331;
  v457 = (uint64_t (**)())off_24C335D90;
  v119 = SHIBYTE(v324.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v324.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v458, v324.__r_.__value_.__l.__data_, v324.__r_.__value_.__l.__size_);
  else
    v458 = v324;
  v459 = v103;
  v457 = off_24C335AF8;
  v460 = v102;
  v452 = (uint64_t (**)())off_24C335D90;
  v117 = SHIBYTE(v319.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v319.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v453, v319.__r_.__value_.__l.__data_, v319.__r_.__value_.__l.__size_);
  else
    v453 = v319;
  v452 = off_24C335B18;
  v455 = v321;
  v454 = v101;
  v456 = v322;
  v448 = (uint64_t (**)())off_24C335D90;
  v115 = SHIBYTE(v315.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v315.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v449, v315.__r_.__value_.__l.__data_, v315.__r_.__value_.__l.__size_);
  else
    v449 = v315;
  v450 = v100;
  v448 = off_24C335AF8;
  v451 = v99;
  v443 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v310.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v444, v310.__r_.__value_.__l.__data_, v310.__r_.__value_.__l.__size_);
  else
    v444 = v310;
  v445 = v311;
  v443 = &off_24C335AB8;
  v446 = v312;
  if (SHIBYTE(v313.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v447, v313.__r_.__value_.__l.__data_, v313.__r_.__value_.__l.__size_);
  else
    v447 = v313;
  v439 = (uint64_t (**)())off_24C335D90;
  v113 = SHIBYTE(v306.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v306.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v440, v306.__r_.__value_.__l.__data_, v306.__r_.__value_.__l.__size_);
  else
    v440 = v306;
  v441 = v98;
  v439 = off_24C335AF8;
  v442 = v97;
  v434 = (uint64_t (**)())off_24C335D90;
  v111 = SHIBYTE(v301.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v301.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v435, v301.__r_.__value_.__l.__data_, v301.__r_.__value_.__l.__size_);
  else
    v435 = v301;
  v434 = off_24C335B18;
  v437 = v303;
  v436 = v96;
  v438 = v304;
  v430 = (uint64_t (**)())off_24C335D90;
  v65 = SHIBYTE(v297.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v297.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v431, v297.__r_.__value_.__l.__data_, v297.__r_.__value_.__l.__size_);
  else
    v431 = v297;
  v432 = v95;
  v430 = off_24C335AF8;
  v433 = v94;
  v426 = (uint64_t (**)())off_24C335D90;
  v108 = SHIBYTE(v293.__r_.__value_.__r.__words[2]);
  v83 = v63;
  if (SHIBYTE(v293.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v427, v293.__r_.__value_.__l.__data_, v293.__r_.__value_.__l.__size_);
  else
    v427 = v293;
  v428 = v93;
  v426 = off_24C335AF8;
  v429 = v92;
  v422 = (uint64_t (**)())off_24C335D90;
  v66 = SHIBYTE(v289.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v289.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v423, v289.__r_.__value_.__l.__data_, v289.__r_.__value_.__l.__size_);
  else
    v423 = v289;
  v424 = v91;
  v422 = off_24C335AF8;
  v425 = v90;
  v417 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v284.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v418, v284.__r_.__value_.__l.__data_, v284.__r_.__value_.__l.__size_);
  else
    v418 = v284;
  v419 = v285;
  v417 = &off_24C335AB8;
  v420 = v286;
  if (SHIBYTE(v287.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v421, v287.__r_.__value_.__l.__data_, v287.__r_.__value_.__l.__size_);
  else
    v421 = v287;
  v412 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v279.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v413, v279.__r_.__value_.__l.__data_, v279.__r_.__value_.__l.__size_);
  else
    v413 = v279;
  v414 = v280;
  v412 = &off_24C335AB8;
  v415 = v281;
  if (SHIBYTE(v282.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v416, v282.__r_.__value_.__l.__data_, v282.__r_.__value_.__l.__size_);
  else
    v416 = v282;
  v407 = (uint64_t (**)())off_24C335D90;
  v67 = SHIBYTE(v274.__r_.__value_.__r.__words[2]);
  v80 = v61;
  if (SHIBYTE(v274.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v408, v274.__r_.__value_.__l.__data_, v274.__r_.__value_.__l.__size_);
  else
    v408 = v274;
  v407 = off_24C335B18;
  v410 = v276;
  v409 = v89;
  v411 = v277;
  v403 = (uint64_t (**)())off_24C335D90;
  v68 = SHIBYTE(v270.__r_.__value_.__r.__words[2]);
  v106 = v66;
  if (SHIBYTE(v270.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v404, v270.__r_.__value_.__l.__data_, v270.__r_.__value_.__l.__size_);
  else
    v404 = v270;
  v405 = v88;
  v403 = off_24C335AF8;
  v406 = v87;
  v399 = (uint64_t (**)())off_24C335D90;
  v69 = SHIBYTE(v266.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v266.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&__p, v266.__r_.__value_.__l.__data_, v266.__r_.__value_.__l.__size_);
  else
    __p = v266;
  v401 = v86;
  v399 = off_24C335AF8;
  v402 = v85;
  mediaplatform::DatabaseColumnTuple<58ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::DatabaseColumnTuple(v79, (uint64_t)&v525, (uint64_t)&v521, (uint64_t)&v517, (uint64_t)&v513, (uint64_t)&v509, (uint64_t)&v504, (uint64_t)&v499, (uint64_t)&v494, (uint64_t)&v490, (uint64_t)&v485, (uint64_t)&v481, (uint64_t)&v476, (uint64_t)&v471, (uint64_t)&v466, (uint64_t)&v461, (uint64_t)&v457, (uint64_t)&v452, (uint64_t)&v448,
    (uint64_t)&v443,
    (uint64_t)&v439,
    (uint64_t)&v434,
    (uint64_t)&v430,
    (uint64_t)&v426,
    (uint64_t)&v422,
    (uint64_t)&v417,
    (uint64_t)&v412,
    (uint64_t)&v407,
    (uint64_t)&v403,
    (uint64_t)&v399);
  v399 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v403 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v404.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v404.__r_.__value_.__l.__data_);
  v407 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v408.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v408.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v412);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v417);
  v422 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v423.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v423.__r_.__value_.__l.__data_);
  v426 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v427.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v427.__r_.__value_.__l.__data_);
  v430 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v431.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v431.__r_.__value_.__l.__data_);
  v434 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v435.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v435.__r_.__value_.__l.__data_);
  v439 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v440.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v440.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v443);
  v448 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v449.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v449.__r_.__value_.__l.__data_);
  v452 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v453.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v453.__r_.__value_.__l.__data_);
  v457 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v458.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v458.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v461);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v466);
  v471 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v472.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v472.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v476);
  v481 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v482.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v482.__r_.__value_.__l.__data_);
  v485 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v486.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v486.__r_.__value_.__l.__data_);
  v490 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v491.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v491.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v494);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v499);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v504);
  v509 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v510.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v510.__r_.__value_.__l.__data_);
  v513 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v514.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v514.__r_.__value_.__l.__data_);
  v517 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v518.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v518.__r_.__value_.__l.__data_);
  v521 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v522.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v522.__r_.__value_.__l.__data_);
  v525 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v526.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v526.__r_.__value_.__l.__data_);
  *(_QWORD *)(v79 + 1536) = off_24C335D90;
  v70 = (std::string *)(v79 + 1544);
  v71 = SHIBYTE(v396.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v396.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v70, v396.__r_.__value_.__l.__data_, v396.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v70->__r_.__value_.__l.__data_ = *(_OWORD *)&v396.__r_.__value_.__l.__data_;
    *(_QWORD *)(v79 + 1560) = *((_QWORD *)&v396.__r_.__value_.__l + 2);
  }
  *(_DWORD *)(v79 + 1568) = v397;
  *(_QWORD *)(v79 + 1536) = off_24C335AF8;
  *(_QWORD *)(v79 + 1572) = v398;
  v265 = (uint64_t (**)())off_24C335D90;
  if (v69 < 0)
    operator delete(v266.__r_.__value_.__l.__data_);
  v269 = (uint64_t (**)())off_24C335D90;
  if (v68 < 0)
    operator delete(v270.__r_.__value_.__l.__data_);
  v273 = (uint64_t (**)())off_24C335D90;
  if (v67 < 0)
    operator delete(v274.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v278);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v283);
  v288 = (uint64_t (**)())off_24C335D90;
  if (v106 < 0)
    operator delete(v289.__r_.__value_.__l.__data_);
  v292 = (uint64_t (**)())off_24C335D90;
  if (v108 < 0)
    operator delete(v293.__r_.__value_.__l.__data_);
  v296 = (uint64_t (**)())off_24C335D90;
  if (v65 < 0)
    operator delete(v297.__r_.__value_.__l.__data_);
  v300 = (uint64_t (**)())off_24C335D90;
  if (v111 < 0)
    operator delete(v301.__r_.__value_.__l.__data_);
  v305 = (uint64_t (**)())off_24C335D90;
  if (v113 < 0)
    operator delete(v306.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v309);
  v314 = (uint64_t (**)())off_24C335D90;
  if (v115 < 0)
    operator delete(v315.__r_.__value_.__l.__data_);
  v318 = (uint64_t (**)())off_24C335D90;
  if (v117 < 0)
    operator delete(v319.__r_.__value_.__l.__data_);
  v323 = (uint64_t (**)())off_24C335D90;
  if (v119 < 0)
    operator delete(v324.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v327);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v332);
  v337 = (uint64_t (**)())off_24C335D90;
  if (v64 < 0)
    operator delete(v338.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v342);
  v347 = (uint64_t (**)())off_24C335D90;
  if (v121 < 0)
    operator delete(v348.__r_.__value_.__l.__data_);
  v351 = (uint64_t (**)())off_24C335D90;
  if (v123 < 0)
    operator delete(v352.__r_.__value_.__l.__data_);
  v356 = (uint64_t (**)())off_24C335D90;
  if (v125 < 0)
    operator delete(v357.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v360);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v365);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v370);
  v375 = (uint64_t (**)())off_24C335D90;
  if (v127 < 0)
    operator delete(v376.__r_.__value_.__l.__data_);
  v379 = (uint64_t (**)())off_24C335D90;
  if (v83 < 0)
    operator delete(v380.__r_.__value_.__l.__data_);
  v383 = (uint64_t (**)())off_24C335D90;
  if (v62 < 0)
    operator delete(v384.__r_.__value_.__l.__data_);
  v387 = (uint64_t (**)())off_24C335D90;
  if (v80 < 0)
    operator delete(v388.__r_.__value_.__l.__data_);
  if (v60 < 0)
  {
    operator delete(v392.__r_.__value_.__l.__data_);
    if ((v71 & 0x80000000) == 0)
      goto LABEL_435;
  }
  else if ((v71 & 0x80000000) == 0)
  {
    goto LABEL_435;
  }
  operator delete(v396.__r_.__value_.__l.__data_);
LABEL_435:
  *(_QWORD *)(v79 + 1584) = off_24C335D90;
  v72 = (std::string *)(v79 + 1592);
  v73 = SHIBYTE(v262.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v262.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v72, v262.__r_.__value_.__l.__data_, v262.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v72->__r_.__value_.__l.__data_ = *(_OWORD *)&v262.__r_.__value_.__l.__data_;
    *(_QWORD *)(v79 + 1608) = *((_QWORD *)&v262.__r_.__value_.__l + 2);
  }
  *(_DWORD *)(v79 + 1616) = v263;
  *(_QWORD *)(v79 + 1584) = off_24C335AF8;
  *(_QWORD *)(v79 + 1620) = v264;
  if (SHIBYTE(v128.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v128.__r_.__value_.__l.__data_);
  if (SHIBYTE(v132.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v132.__r_.__value_.__l.__data_);
  if (SHIBYTE(v136.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v136.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v140);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v145);
  if (SHIBYTE(v151.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v151.__r_.__value_.__l.__data_);
  if (SHIBYTE(v155.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v155.__r_.__value_.__l.__data_);
  if (SHIBYTE(v159.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v159.__r_.__value_.__l.__data_);
  if (SHIBYTE(v163.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v163.__r_.__value_.__l.__data_);
  if (SHIBYTE(v168.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v168.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v171);
  if (SHIBYTE(v177.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v177.__r_.__value_.__l.__data_);
  if (SHIBYTE(v181.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v181.__r_.__value_.__l.__data_);
  if (SHIBYTE(v186.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v186.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v189);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v194);
  if (SHIBYTE(v200.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v200.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v204);
  if (SHIBYTE(v210.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v210.__r_.__value_.__l.__data_);
  if (SHIBYTE(v214.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v214.__r_.__value_.__l.__data_);
  if (SHIBYTE(v219.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v219.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v222);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v227);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v232);
  if (SHIBYTE(v238.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v238.__r_.__value_.__l.__data_);
  if (SHIBYTE(v242.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v242.__r_.__value_.__l.__data_);
  if (SHIBYTE(v246.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v246.__r_.__value_.__l.__data_);
  if (SHIBYTE(v250.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v250.__r_.__value_.__l.__data_);
  if (SHIBYTE(v254.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v254.__r_.__value_.__l.__data_);
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__s.__r_.__value_.__l.__data_);
    if ((v73 & 0x80000000) == 0)
      goto LABEL_482;
  }
  else if ((v73 & 0x80000000) == 0)
  {
    goto LABEL_482;
  }
  operator delete(v262.__r_.__value_.__l.__data_);
LABEL_482:
  *(_QWORD *)(v79 + 1632) = off_24C335D90;
  v74 = (std::string *)(v79 + 1640);
  if (*(char *)(v78 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v74, *(const std::string::value_type **)(v78 + 8), *(_QWORD *)(v78 + 16));
  }
  else
  {
    v75 = *(_OWORD *)(v78 + 8);
    *(_QWORD *)(v79 + 1656) = *(_QWORD *)(v78 + 24);
    *(_OWORD *)&v74->__r_.__value_.__l.__data_ = v75;
  }
  *(_DWORD *)(v79 + 1664) = *(_DWORD *)(v78 + 32);
  *(_QWORD *)(v79 + 1632) = off_24C335B18;
  v76 = *(_QWORD *)(v78 + 36);
  *(_DWORD *)(v79 + 1676) = *(_DWORD *)(v78 + 44);
  *(_QWORD *)(v79 + 1668) = v76;
  return v79;
}

void sub_20A7EBED0(_Unwind_Exception *a1)
{
  uint64_t v1;

  mediaplatform::DatabaseColumnTuple<56ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(v1);
  _Unwind_Resume(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<55ul,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(uint64_t a1)
{
  *(_QWORD *)(a1 + 1632) = off_24C335D90;
  if (*(char *)(a1 + 1663) < 0)
    operator delete(*(void **)(a1 + 1640));
  *(_QWORD *)(a1 + 1584) = off_24C335D90;
  if (*(char *)(a1 + 1615) < 0)
    operator delete(*(void **)(a1 + 1592));
  *(_QWORD *)(a1 + 1536) = off_24C335D90;
  if (*(char *)(a1 + 1567) < 0)
    operator delete(*(void **)(a1 + 1544));
  *(_QWORD *)(a1 + 1488) = off_24C335D90;
  if (*(char *)(a1 + 1519) < 0)
    operator delete(*(void **)(a1 + 1496));
  *(_QWORD *)(a1 + 1440) = off_24C335D90;
  if (*(char *)(a1 + 1471) < 0)
    operator delete(*(void **)(a1 + 1448));
  return mediaplatform::DatabaseColumnTuple<60ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<56ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(uint64_t a1)
{
  *(_QWORD *)(a1 + 1584) = off_24C335D90;
  if (*(char *)(a1 + 1615) < 0)
    operator delete(*(void **)(a1 + 1592));
  *(_QWORD *)(a1 + 1536) = off_24C335D90;
  if (*(char *)(a1 + 1567) < 0)
    operator delete(*(void **)(a1 + 1544));
  *(_QWORD *)(a1 + 1488) = off_24C335D90;
  if (*(char *)(a1 + 1519) < 0)
    operator delete(*(void **)(a1 + 1496));
  *(_QWORD *)(a1 + 1440) = off_24C335D90;
  if (*(char *)(a1 + 1471) < 0)
    operator delete(*(void **)(a1 + 1448));
  return mediaplatform::DatabaseColumnTuple<60ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<57ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(uint64_t a1)
{
  *(_QWORD *)(a1 + 1536) = off_24C335D90;
  if (*(char *)(a1 + 1567) < 0)
    operator delete(*(void **)(a1 + 1544));
  *(_QWORD *)(a1 + 1488) = off_24C335D90;
  if (*(char *)(a1 + 1519) < 0)
    operator delete(*(void **)(a1 + 1496));
  *(_QWORD *)(a1 + 1440) = off_24C335D90;
  if (*(char *)(a1 + 1471) < 0)
    operator delete(*(void **)(a1 + 1448));
  return mediaplatform::DatabaseColumnTuple<60ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<58ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(uint64_t a1)
{
  *(_QWORD *)(a1 + 1488) = off_24C335D90;
  if (*(char *)(a1 + 1519) < 0)
    operator delete(*(void **)(a1 + 1496));
  *(_QWORD *)(a1 + 1440) = off_24C335D90;
  if (*(char *)(a1 + 1471) < 0)
    operator delete(*(void **)(a1 + 1448));
  return mediaplatform::DatabaseColumnTuple<60ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<59ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(uint64_t a1)
{
  *(_QWORD *)(a1 + 1440) = off_24C335D90;
  if (*(char *)(a1 + 1471) < 0)
    operator delete(*(void **)(a1 + 1448));
  return mediaplatform::DatabaseColumnTuple<60ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<61ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(uint64_t a1)
{
  *(_QWORD *)(a1 + 1344) = off_24C335D90;
  if (*(char *)(a1 + 1375) < 0)
    operator delete(*(void **)(a1 + 1352));
  *(_QWORD *)(a1 + 1296) = off_24C335D90;
  if (*(char *)(a1 + 1327) < 0)
    operator delete(*(void **)(a1 + 1304));
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 1232);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 1168);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 1104);
  *(_QWORD *)(a1 + 1056) = off_24C335D90;
  if (*(char *)(a1 + 1087) < 0)
    operator delete(*(void **)(a1 + 1064));
  return mediaplatform::DatabaseColumnTuple<67ul,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<62ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(uint64_t a1)
{
  *(_QWORD *)(a1 + 1296) = off_24C335D90;
  if (*(char *)(a1 + 1327) < 0)
    operator delete(*(void **)(a1 + 1304));
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 1232);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 1168);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 1104);
  *(_QWORD *)(a1 + 1056) = off_24C335D90;
  if (*(char *)(a1 + 1087) < 0)
    operator delete(*(void **)(a1 + 1064));
  return mediaplatform::DatabaseColumnTuple<67ul,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<63ul,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(uint64_t a1)
{
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 1232);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 1168);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 1104);
  *(_QWORD *)(a1 + 1056) = off_24C335D90;
  if (*(char *)(a1 + 1087) < 0)
    operator delete(*(void **)(a1 + 1064));
  return mediaplatform::DatabaseColumnTuple<67ul,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<64ul,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(uint64_t a1)
{
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 1168);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 1104);
  *(_QWORD *)(a1 + 1056) = off_24C335D90;
  if (*(char *)(a1 + 1087) < 0)
    operator delete(*(void **)(a1 + 1064));
  return mediaplatform::DatabaseColumnTuple<67ul,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<65ul,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(uint64_t a1)
{
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 1104);
  *(_QWORD *)(a1 + 1056) = off_24C335D90;
  if (*(char *)(a1 + 1087) < 0)
    operator delete(*(void **)(a1 + 1064));
  return mediaplatform::DatabaseColumnTuple<67ul,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<66ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(uint64_t a1)
{
  *(_QWORD *)(a1 + 1056) = off_24C335D90;
  if (*(char *)(a1 + 1087) < 0)
    operator delete(*(void **)(a1 + 1064));
  return mediaplatform::DatabaseColumnTuple<67ul,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<68ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(uint64_t a1)
{
  *(_QWORD *)(a1 + 960) = off_24C335D90;
  if (*(char *)(a1 + 991) < 0)
    operator delete(*(void **)(a1 + 968));
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 896);
  *(_QWORD *)(a1 + 848) = off_24C335D90;
  if (*(char *)(a1 + 879) < 0)
    operator delete(*(void **)(a1 + 856));
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 784);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 720);
  *(_QWORD *)(a1 + 672) = off_24C335D90;
  if (*(char *)(a1 + 703) < 0)
    operator delete(*(void **)(a1 + 680));
  return mediaplatform::DatabaseColumnTuple<74ul,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<69ul,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(uint64_t a1)
{
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 896);
  *(_QWORD *)(a1 + 848) = off_24C335D90;
  if (*(char *)(a1 + 879) < 0)
    operator delete(*(void **)(a1 + 856));
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 784);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 720);
  *(_QWORD *)(a1 + 672) = off_24C335D90;
  if (*(char *)(a1 + 703) < 0)
    operator delete(*(void **)(a1 + 680));
  return mediaplatform::DatabaseColumnTuple<74ul,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<70ul,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(uint64_t a1)
{
  *(_QWORD *)(a1 + 848) = off_24C335D90;
  if (*(char *)(a1 + 879) < 0)
    operator delete(*(void **)(a1 + 856));
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 784);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 720);
  *(_QWORD *)(a1 + 672) = off_24C335D90;
  if (*(char *)(a1 + 703) < 0)
    operator delete(*(void **)(a1 + 680));
  return mediaplatform::DatabaseColumnTuple<74ul,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<71ul,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(uint64_t a1)
{
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 784);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 720);
  *(_QWORD *)(a1 + 672) = off_24C335D90;
  if (*(char *)(a1 + 703) < 0)
    operator delete(*(void **)(a1 + 680));
  return mediaplatform::DatabaseColumnTuple<74ul,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<72ul,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(uint64_t a1)
{
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 720);
  *(_QWORD *)(a1 + 672) = off_24C335D90;
  if (*(char *)(a1 + 703) < 0)
    operator delete(*(void **)(a1 + 680));
  return mediaplatform::DatabaseColumnTuple<74ul,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<73ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(uint64_t a1)
{
  *(_QWORD *)(a1 + 672) = off_24C335D90;
  if (*(char *)(a1 + 703) < 0)
    operator delete(*(void **)(a1 + 680));
  return mediaplatform::DatabaseColumnTuple<74ul,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<75ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(uint64_t a1)
{
  *(_QWORD *)(a1 + 576) = off_24C335D90;
  if (*(char *)(a1 + 607) < 0)
    operator delete(*(void **)(a1 + 584));
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 512);
  *(_QWORD *)(a1 + 464) = off_24C335D90;
  if (*(char *)(a1 + 495) < 0)
    operator delete(*(void **)(a1 + 472));
  *(_QWORD *)(a1 + 416) = off_24C335D90;
  if (*(char *)(a1 + 447) < 0)
    operator delete(*(void **)(a1 + 424));
  *(_QWORD *)(a1 + 368) = off_24C335D90;
  if (*(char *)(a1 + 399) < 0)
    operator delete(*(void **)(a1 + 376));
  return mediaplatform::DatabaseColumnTuple<80ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<76ul,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(uint64_t a1)
{
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 512);
  *(_QWORD *)(a1 + 464) = off_24C335D90;
  if (*(char *)(a1 + 495) < 0)
    operator delete(*(void **)(a1 + 472));
  *(_QWORD *)(a1 + 416) = off_24C335D90;
  if (*(char *)(a1 + 447) < 0)
    operator delete(*(void **)(a1 + 424));
  *(_QWORD *)(a1 + 368) = off_24C335D90;
  if (*(char *)(a1 + 399) < 0)
    operator delete(*(void **)(a1 + 376));
  return mediaplatform::DatabaseColumnTuple<80ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<77ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(uint64_t a1)
{
  *(_QWORD *)(a1 + 464) = off_24C335D90;
  if (*(char *)(a1 + 495) < 0)
    operator delete(*(void **)(a1 + 472));
  *(_QWORD *)(a1 + 416) = off_24C335D90;
  if (*(char *)(a1 + 447) < 0)
    operator delete(*(void **)(a1 + 424));
  *(_QWORD *)(a1 + 368) = off_24C335D90;
  if (*(char *)(a1 + 399) < 0)
    operator delete(*(void **)(a1 + 376));
  return mediaplatform::DatabaseColumnTuple<80ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<78ul,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(uint64_t a1)
{
  *(_QWORD *)(a1 + 416) = off_24C335D90;
  if (*(char *)(a1 + 447) < 0)
    operator delete(*(void **)(a1 + 424));
  *(_QWORD *)(a1 + 368) = off_24C335D90;
  if (*(char *)(a1 + 399) < 0)
    operator delete(*(void **)(a1 + 376));
  return mediaplatform::DatabaseColumnTuple<80ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<79ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(uint64_t a1)
{
  *(_QWORD *)(a1 + 368) = off_24C335D90;
  if (*(char *)(a1 + 399) < 0)
    operator delete(*(void **)(a1 + 376));
  return mediaplatform::DatabaseColumnTuple<80ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<81ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(uint64_t a1)
{
  *(_QWORD *)(a1 + 272) = off_24C335D90;
  if (*(char *)(a1 + 303) < 0)
    operator delete(*(void **)(a1 + 280));
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 208);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 144);
  *(_QWORD *)(a1 + 96) = off_24C335D90;
  if (*(char *)(a1 + 127) < 0)
    operator delete(*(void **)(a1 + 104));
  *(_QWORD *)(a1 + 48) = off_24C335D90;
  if (*(char *)(a1 + 79) < 0)
    operator delete(*(void **)(a1 + 56));
  *(_QWORD *)a1 = off_24C335D90;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

uint64_t mediaplatform::DatabaseColumnTuple<82ul,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(uint64_t a1)
{
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 208);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 144);
  *(_QWORD *)(a1 + 96) = off_24C335D90;
  if (*(char *)(a1 + 127) < 0)
    operator delete(*(void **)(a1 + 104));
  *(_QWORD *)(a1 + 48) = off_24C335D90;
  if (*(char *)(a1 + 79) < 0)
    operator delete(*(void **)(a1 + 56));
  *(_QWORD *)a1 = off_24C335D90;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

uint64_t mediaplatform::DatabaseColumnTuple<83ul,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(uint64_t a1)
{
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 144);
  *(_QWORD *)(a1 + 96) = off_24C335D90;
  if (*(char *)(a1 + 127) < 0)
    operator delete(*(void **)(a1 + 104));
  *(_QWORD *)(a1 + 48) = off_24C335D90;
  if (*(char *)(a1 + 79) < 0)
    operator delete(*(void **)(a1 + 56));
  *(_QWORD *)a1 = off_24C335D90;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void mlcore::ContainerTable::persistentIDColumn(mlcore::ContainerTable *this@<X0>, uint64_t a2@<X8>)
{
  std::string *v4;

  *(_QWORD *)a2 = off_24C335D90;
  v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 4575) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 569), *((_QWORD *)this + 570));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 4552);
    *(_QWORD *)(a2 + 24) = *((_QWORD *)this + 571);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 1144);
  *(_DWORD *)(a2 + 44) = *((_DWORD *)this + 1147);
  *(_QWORD *)(a2 + 36) = *(_QWORD *)((char *)this + 4580);
  *(_QWORD *)a2 = off_24C336AC0;
}

void mlcore::ContainerTable::distinguishedKindColumn(mlcore::ContainerTable *this@<X0>, uint64_t a2@<X8>)
{
  char *v4;
  std::string *v5;

  v4 = (char *)this + 4623;
  *(_QWORD *)a2 = off_24C335D90;
  v5 = (std::string *)(a2 + 8);
  if (*v4 < 0)
  {
    std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)this + 575), *((_QWORD *)this + 576));
  }
  else
  {
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 4600);
    *(_QWORD *)(a2 + 24) = *((_QWORD *)this + 577);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 1156);
  *(_QWORD *)(a2 + 36) = *(_QWORD *)(v4 + 5);
  *(_QWORD *)a2 = off_24C336AA0;
}

void mlcore::ContainerTable::dateCreatedColumn(mlcore::ContainerTable *this@<X0>, uint64_t a2@<X8>)
{
  std::string *v4;

  *(_QWORD *)a2 = off_24C335D90;
  v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 4671) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 581), *((_QWORD *)this + 582));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 4648);
    *(_QWORD *)(a2 + 24) = *((_QWORD *)this + 583);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 1168);
  *(_DWORD *)(a2 + 44) = *((_DWORD *)this + 1171);
  *(_QWORD *)(a2 + 36) = *(_QWORD *)((char *)this + 4676);
  *(_QWORD *)a2 = off_24C336AC0;
}

void mlcore::ContainerTable::dateModifiedColumn(mlcore::ContainerTable *this@<X0>, uint64_t a2@<X8>)
{
  std::string *v4;

  *(_QWORD *)a2 = off_24C335D90;
  v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 4719) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 587), *((_QWORD *)this + 588));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 4696);
    *(_QWORD *)(a2 + 24) = *((_QWORD *)this + 589);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 1180);
  *(_DWORD *)(a2 + 44) = *((_DWORD *)this + 1183);
  *(_QWORD *)(a2 + 36) = *(_QWORD *)((char *)this + 4724);
  *(_QWORD *)a2 = off_24C336AC0;
}

void mlcore::ContainerTable::datePlayedColumn(mlcore::ContainerTable *this@<X0>, uint64_t a2@<X8>)
{
  std::string *v4;

  *(_QWORD *)a2 = off_24C335D90;
  v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 4767) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 593), *((_QWORD *)this + 594));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 4744);
    *(_QWORD *)(a2 + 24) = *((_QWORD *)this + 595);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 1192);
  *(_DWORD *)(a2 + 44) = *((_DWORD *)this + 1195);
  *(_QWORD *)(a2 + 36) = *(_QWORD *)((char *)this + 4772);
  *(_QWORD *)a2 = off_24C336AC0;
}

void mlcore::ContainerTable::nameColumn(mlcore::ContainerTable *this@<X0>, uint64_t a2@<X8>)
{
  char *v4;
  std::string *v5;
  std::string *v6;

  v4 = (char *)this + 4815;
  *(_QWORD *)a2 = off_24C335D90;
  v5 = (std::string *)(a2 + 8);
  if (*((char *)this + 4815) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)this + 599), *((_QWORD *)this + 600));
  }
  else
  {
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 4792);
    *(_QWORD *)(a2 + 24) = *((_QWORD *)this + 601);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 1204);
  *(_QWORD *)a2 = &off_24C335AB8;
  *(_BYTE *)(a2 + 36) = v4[5];
  v6 = (std::string *)(a2 + 40);
  if (v4[32] < 0)
  {
    std::string::__init_copy_ctor_external(v6, *((const std::string::value_type **)this + 603), *((_QWORD *)this + 604));
  }
  else
  {
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 4824);
    *(_QWORD *)(a2 + 56) = *((_QWORD *)this + 605);
  }
  *(_QWORD *)a2 = &off_24C336A60;
}

void sub_20A7ED850(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  uint64_t v3;

  *(_QWORD *)v1 = v3;
  if (*(char *)(v1 + 31) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

void mlcore::ContainerTable::nameOrderColumn(mlcore::ContainerTable *this@<X0>, uint64_t a2@<X8>)
{
  std::string *v4;

  *(_QWORD *)a2 = off_24C335D90;
  v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 4879) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 607), *((_QWORD *)this + 608));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 4856);
    *(_QWORD *)(a2 + 24) = *((_QWORD *)this + 609);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 1220);
  *(_DWORD *)(a2 + 44) = *((_DWORD *)this + 1223);
  *(_QWORD *)(a2 + 36) = *(_QWORD *)((char *)this + 4884);
  *(_QWORD *)a2 = off_24C336AC0;
}

void mlcore::ContainerTable::isOwnerColumn(mlcore::ContainerTable *this@<X0>, uint64_t a2@<X8>)
{
  char *v4;
  std::string *v5;

  v4 = (char *)this + 4927;
  *(_QWORD *)a2 = off_24C335D90;
  v5 = (std::string *)(a2 + 8);
  if (*v4 < 0)
  {
    std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)this + 613), *((_QWORD *)this + 614));
  }
  else
  {
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 4904);
    *(_QWORD *)(a2 + 24) = *((_QWORD *)this + 615);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 1232);
  *(_QWORD *)(a2 + 36) = *(_QWORD *)(v4 + 5);
  *(_QWORD *)a2 = off_24C336AA0;
}

void mlcore::ContainerTable::isEditableColumn(mlcore::ContainerTable *this@<X0>, uint64_t a2@<X8>)
{
  char *v4;
  std::string *v5;

  v4 = (char *)this + 4975;
  *(_QWORD *)a2 = off_24C335D90;
  v5 = (std::string *)(a2 + 8);
  if (*v4 < 0)
  {
    std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)this + 619), *((_QWORD *)this + 620));
  }
  else
  {
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 4952);
    *(_QWORD *)(a2 + 24) = *((_QWORD *)this + 621);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 1244);
  *(_QWORD *)(a2 + 36) = *(_QWORD *)(v4 + 5);
  *(_QWORD *)a2 = off_24C336AA0;
}

void mlcore::ContainerTable::parentPersistentIDColumn(mlcore::ContainerTable *this@<X0>, uint64_t a2@<X8>)
{
  std::string *v4;

  *(_QWORD *)a2 = off_24C335D90;
  v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 5023) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 625), *((_QWORD *)this + 626));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 5000);
    *(_QWORD *)(a2 + 24) = *((_QWORD *)this + 627);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 1256);
  *(_DWORD *)(a2 + 44) = *((_DWORD *)this + 1259);
  *(_QWORD *)(a2 + 36) = *(_QWORD *)((char *)this + 5028);
  *(_QWORD *)a2 = off_24C336AC0;
}

void mlcore::ContainerTable::containedMediaTypeColumn(mlcore::ContainerTable *this@<X0>, uint64_t a2@<X8>)
{
  char *v4;
  std::string *v5;

  v4 = (char *)this + 5071;
  *(_QWORD *)a2 = off_24C335D90;
  v5 = (std::string *)(a2 + 8);
  if (*v4 < 0)
  {
    std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)this + 631), *((_QWORD *)this + 632));
  }
  else
  {
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 5048);
    *(_QWORD *)(a2 + 24) = *((_QWORD *)this + 633);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 1268);
  *(_QWORD *)(a2 + 36) = *(_QWORD *)(v4 + 5);
  *(_QWORD *)a2 = off_24C336AA0;
}

void mlcore::ContainerTable::workoutTemplateIDColumn(mlcore::ContainerTable *this@<X0>, uint64_t a2@<X8>)
{
  char *v4;
  std::string *v5;

  v4 = (char *)this + 5119;
  *(_QWORD *)a2 = off_24C335D90;
  v5 = (std::string *)(a2 + 8);
  if (*v4 < 0)
  {
    std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)this + 637), *((_QWORD *)this + 638));
  }
  else
  {
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 5096);
    *(_QWORD *)(a2 + 24) = *((_QWORD *)this + 639);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 1280);
  *(_QWORD *)(a2 + 36) = *(_QWORD *)(v4 + 5);
  *(_QWORD *)a2 = off_24C336AA0;
}

void mlcore::ContainerTable::isHiddenColumn(mlcore::ContainerTable *this@<X0>, uint64_t a2@<X8>)
{
  char *v4;
  std::string *v5;

  v4 = (char *)this + 5167;
  *(_QWORD *)a2 = off_24C335D90;
  v5 = (std::string *)(a2 + 8);
  if (*v4 < 0)
  {
    std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)this + 643), *((_QWORD *)this + 644));
  }
  else
  {
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 5144);
    *(_QWORD *)(a2 + 24) = *((_QWORD *)this + 645);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 1292);
  *(_QWORD *)(a2 + 36) = *(_QWORD *)(v4 + 5);
  *(_QWORD *)a2 = off_24C336AA0;
}

void mlcore::ContainerTable::isIgnorableiTunesPlaylistColumn(mlcore::ContainerTable *this@<X0>, uint64_t a2@<X8>)
{
  char *v4;
  std::string *v5;

  v4 = (char *)this + 5215;
  *(_QWORD *)a2 = off_24C335D90;
  v5 = (std::string *)(a2 + 8);
  if (*v4 < 0)
  {
    std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)this + 649), *((_QWORD *)this + 650));
  }
  else
  {
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 5192);
    *(_QWORD *)(a2 + 24) = *((_QWORD *)this + 651);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 1304);
  *(_QWORD *)(a2 + 36) = *(_QWORD *)(v4 + 5);
  *(_QWORD *)a2 = off_24C336AA0;
}

void mlcore::ContainerTable::descriptionColumn(mlcore::ContainerTable *this@<X0>, uint64_t a2@<X8>)
{
  char *v4;
  std::string *v5;
  std::string *v6;

  v4 = (char *)this + 5263;
  *(_QWORD *)a2 = off_24C335D90;
  v5 = (std::string *)(a2 + 8);
  if (*((char *)this + 5263) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)this + 655), *((_QWORD *)this + 656));
  }
  else
  {
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 5240);
    *(_QWORD *)(a2 + 24) = *((_QWORD *)this + 657);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 1316);
  *(_QWORD *)a2 = &off_24C335AB8;
  *(_BYTE *)(a2 + 36) = v4[5];
  v6 = (std::string *)(a2 + 40);
  if (v4[32] < 0)
  {
    std::string::__init_copy_ctor_external(v6, *((const std::string::value_type **)this + 659), *((_QWORD *)this + 660));
  }
  else
  {
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 5272);
    *(_QWORD *)(a2 + 56) = *((_QWORD *)this + 661);
  }
  *(_QWORD *)a2 = &off_24C336A60;
}

void sub_20A7EDDA8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  uint64_t v3;

  *(_QWORD *)v1 = v3;
  if (*(char *)(v1 + 31) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

void mlcore::ContainerTable::playCountUserColumn(mlcore::ContainerTable *this@<X0>, uint64_t a2@<X8>)
{
  char *v4;
  std::string *v5;

  v4 = (char *)this + 5327;
  *(_QWORD *)a2 = off_24C335D90;
  v5 = (std::string *)(a2 + 8);
  if (*v4 < 0)
  {
    std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)this + 663), *((_QWORD *)this + 664));
  }
  else
  {
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 5304);
    *(_QWORD *)(a2 + 24) = *((_QWORD *)this + 665);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 1332);
  *(_QWORD *)(a2 + 36) = *(_QWORD *)(v4 + 5);
  *(_QWORD *)a2 = off_24C336AA0;
}

void mlcore::ContainerTable::playCountRecentColumn(mlcore::ContainerTable *this@<X0>, uint64_t a2@<X8>)
{
  char *v4;
  std::string *v5;

  v4 = (char *)this + 5375;
  *(_QWORD *)a2 = off_24C335D90;
  v5 = (std::string *)(a2 + 8);
  if (*v4 < 0)
  {
    std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)this + 669), *((_QWORD *)this + 670));
  }
  else
  {
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 5352);
    *(_QWORD *)(a2 + 24) = *((_QWORD *)this + 671);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 1344);
  *(_QWORD *)(a2 + 36) = *(_QWORD *)(v4 + 5);
  *(_QWORD *)a2 = off_24C336AA0;
}

void mlcore::ContainerTable::likedStateColumn(mlcore::ContainerTable *this@<X0>, uint64_t a2@<X8>)
{
  char *v4;
  std::string *v5;

  v4 = (char *)this + 5423;
  *(_QWORD *)a2 = off_24C335D90;
  v5 = (std::string *)(a2 + 8);
  if (*v4 < 0)
  {
    std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)this + 675), *((_QWORD *)this + 676));
  }
  else
  {
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 5400);
    *(_QWORD *)(a2 + 24) = *((_QWORD *)this + 677);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 1356);
  *(_QWORD *)(a2 + 36) = *(_QWORD *)(v4 + 5);
  *(_QWORD *)a2 = off_24C336AA0;
}

void mlcore::ContainerTable::smartPlaylistEvaluationOrderColumn(mlcore::ContainerTable *this@<X0>, uint64_t a2@<X8>)
{
  char *v4;
  std::string *v5;

  v4 = (char *)this + 5471;
  *(_QWORD *)a2 = off_24C335D90;
  v5 = (std::string *)(a2 + 8);
  if (*v4 < 0)
  {
    std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)this + 681), *((_QWORD *)this + 682));
  }
  else
  {
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 5448);
    *(_QWORD *)(a2 + 24) = *((_QWORD *)this + 683);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 1368);
  *(_QWORD *)(a2 + 36) = *(_QWORD *)(v4 + 5);
  *(_QWORD *)a2 = off_24C336AA0;
}

void mlcore::ContainerTable::smartIsFolderColumn(mlcore::ContainerTable *this@<X0>, uint64_t a2@<X8>)
{
  char *v4;
  std::string *v5;

  v4 = (char *)this + 5519;
  *(_QWORD *)a2 = off_24C335D90;
  v5 = (std::string *)(a2 + 8);
  if (*v4 < 0)
  {
    std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)this + 687), *((_QWORD *)this + 688));
  }
  else
  {
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 5496);
    *(_QWORD *)(a2 + 24) = *((_QWORD *)this + 689);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 1380);
  *(_QWORD *)(a2 + 36) = *(_QWORD *)(v4 + 5);
  *(_QWORD *)a2 = off_24C336AA0;
}

void mlcore::ContainerTable::smartIsDynamicColumn(mlcore::ContainerTable *this@<X0>, uint64_t a2@<X8>)
{
  char *v4;
  std::string *v5;

  v4 = (char *)this + 5567;
  *(_QWORD *)a2 = off_24C335D90;
  v5 = (std::string *)(a2 + 8);
  if (*v4 < 0)
  {
    std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)this + 693), *((_QWORD *)this + 694));
  }
  else
  {
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 5544);
    *(_QWORD *)(a2 + 24) = *((_QWORD *)this + 695);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 1392);
  *(_QWORD *)(a2 + 36) = *(_QWORD *)(v4 + 5);
  *(_QWORD *)a2 = off_24C336AA0;
}

void mlcore::ContainerTable::smartIsFilteredColumn(mlcore::ContainerTable *this@<X0>, uint64_t a2@<X8>)
{
  char *v4;
  std::string *v5;

  v4 = (char *)this + 5615;
  *(_QWORD *)a2 = off_24C335D90;
  v5 = (std::string *)(a2 + 8);
  if (*v4 < 0)
  {
    std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)this + 699), *((_QWORD *)this + 700));
  }
  else
  {
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 5592);
    *(_QWORD *)(a2 + 24) = *((_QWORD *)this + 701);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 1404);
  *(_QWORD *)(a2 + 36) = *(_QWORD *)(v4 + 5);
  *(_QWORD *)a2 = off_24C336AA0;
}

void mlcore::ContainerTable::smartIsGeniusColumn(mlcore::ContainerTable *this@<X0>, uint64_t a2@<X8>)
{
  char *v4;
  std::string *v5;

  v4 = (char *)this + 5663;
  *(_QWORD *)a2 = off_24C335D90;
  v5 = (std::string *)(a2 + 8);
  if (*v4 < 0)
  {
    std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)this + 705), *((_QWORD *)this + 706));
  }
  else
  {
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 5640);
    *(_QWORD *)(a2 + 24) = *((_QWORD *)this + 707);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 1416);
  *(_QWORD *)(a2 + 36) = *(_QWORD *)(v4 + 5);
  *(_QWORD *)a2 = off_24C336AA0;
}

void mlcore::ContainerTable::smartEnabledOnlyColumn(mlcore::ContainerTable *this@<X0>, uint64_t a2@<X8>)
{
  char *v4;
  std::string *v5;

  v4 = (char *)this + 5711;
  *(_QWORD *)a2 = off_24C335D90;
  v5 = (std::string *)(a2 + 8);
  if (*v4 < 0)
  {
    std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)this + 711), *((_QWORD *)this + 712));
  }
  else
  {
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 5688);
    *(_QWORD *)(a2 + 24) = *((_QWORD *)this + 713);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 1428);
  *(_QWORD *)(a2 + 36) = *(_QWORD *)(v4 + 5);
  *(_QWORD *)a2 = off_24C336AA0;
}

void mlcore::ContainerTable::smartIsLimitedColumn(mlcore::ContainerTable *this@<X0>, uint64_t a2@<X8>)
{
  char *v4;
  std::string *v5;

  v4 = (char *)this + 5759;
  *(_QWORD *)a2 = off_24C335D90;
  v5 = (std::string *)(a2 + 8);
  if (*v4 < 0)
  {
    std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)this + 717), *((_QWORD *)this + 718));
  }
  else
  {
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 5736);
    *(_QWORD *)(a2 + 24) = *((_QWORD *)this + 719);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 1440);
  *(_QWORD *)(a2 + 36) = *(_QWORD *)(v4 + 5);
  *(_QWORD *)a2 = off_24C336AA0;
}

void mlcore::ContainerTable::smartLimitKindColumn(mlcore::ContainerTable *this@<X0>, uint64_t a2@<X8>)
{
  char *v4;
  std::string *v5;

  v4 = (char *)this + 5807;
  *(_QWORD *)a2 = off_24C335D90;
  v5 = (std::string *)(a2 + 8);
  if (*v4 < 0)
  {
    std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)this + 723), *((_QWORD *)this + 724));
  }
  else
  {
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 5784);
    *(_QWORD *)(a2 + 24) = *((_QWORD *)this + 725);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 1452);
  *(_QWORD *)(a2 + 36) = *(_QWORD *)(v4 + 5);
  *(_QWORD *)a2 = off_24C336AA0;
}

void mlcore::ContainerTable::smartLimitOrderColumn(mlcore::ContainerTable *this@<X0>, uint64_t a2@<X8>)
{
  char *v4;
  std::string *v5;

  v4 = (char *)this + 5855;
  *(_QWORD *)a2 = off_24C335D90;
  v5 = (std::string *)(a2 + 8);
  if (*v4 < 0)
  {
    std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)this + 729), *((_QWORD *)this + 730));
  }
  else
  {
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 5832);
    *(_QWORD *)(a2 + 24) = *((_QWORD *)this + 731);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 1464);
  *(_QWORD *)(a2 + 36) = *(_QWORD *)(v4 + 5);
  *(_QWORD *)a2 = off_24C336AA0;
}

void mlcore::ContainerTable::smartLimitValueColumn(mlcore::ContainerTable *this@<X0>, uint64_t a2@<X8>)
{
  std::string *v4;

  *(_QWORD *)a2 = off_24C335D90;
  v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 5903) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 735), *((_QWORD *)this + 736));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 5880);
    *(_QWORD *)(a2 + 24) = *((_QWORD *)this + 737);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 1476);
  *(_DWORD *)(a2 + 44) = *((_DWORD *)this + 1479);
  *(_QWORD *)(a2 + 36) = *(_QWORD *)((char *)this + 5908);
  *(_QWORD *)a2 = off_24C336AC0;
}

void mlcore::ContainerTable::smartReverseLimitOrderColumn(mlcore::ContainerTable *this@<X0>, uint64_t a2@<X8>)
{
  char *v4;
  std::string *v5;

  v4 = (char *)this + 5951;
  *(_QWORD *)a2 = off_24C335D90;
  v5 = (std::string *)(a2 + 8);
  if (*v4 < 0)
  {
    std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)this + 741), *((_QWORD *)this + 742));
  }
  else
  {
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 5928);
    *(_QWORD *)(a2 + 24) = *((_QWORD *)this + 743);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 1488);
  *(_QWORD *)(a2 + 36) = *(_QWORD *)(v4 + 5);
  *(_QWORD *)a2 = off_24C336AA0;
}

mediaplatform::Data *mlcore::ContainerTable::smartCriteriaColumn@<X0>(mlcore::ContainerTable *this@<X0>, uint64_t a2@<X8>)
{
  char *v4;
  std::string *v5;
  mediaplatform::Data *result;

  v4 = (char *)this + 5999;
  *(_QWORD *)a2 = off_24C335D90;
  v5 = (std::string *)(a2 + 8);
  if (*((char *)this + 5999) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)this + 747), *((_QWORD *)this + 748));
  }
  else
  {
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 5976);
    *(_QWORD *)(a2 + 24) = *((_QWORD *)this + 749);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 1500);
  *(_QWORD *)a2 = &off_24C335A98;
  *(_BYTE *)(a2 + 36) = v4[5];
  result = mediaplatform::Data::Data((mediaplatform::Data *)(a2 + 40), (mlcore::ContainerTable *)((char *)this + 6008));
  *(_QWORD *)a2 = &off_24C336A40;
  return result;
}

void sub_20A7EE624(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  uint64_t v3;

  *(_QWORD *)v1 = v3;
  if (*(char *)(v1 + 31) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

void mlcore::ContainerTable::playOrderColumn(mlcore::ContainerTable *this@<X0>, uint64_t a2@<X8>)
{
  char *v4;
  std::string *v5;

  v4 = (char *)this + 6079;
  *(_QWORD *)a2 = off_24C335D90;
  v5 = (std::string *)(a2 + 8);
  if (*v4 < 0)
  {
    std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)this + 757), *((_QWORD *)this + 758));
  }
  else
  {
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 6056);
    *(_QWORD *)(a2 + 24) = *((_QWORD *)this + 759);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 1520);
  *(_QWORD *)(a2 + 36) = *(_QWORD *)(v4 + 5);
  *(_QWORD *)a2 = off_24C336AA0;
}

void mlcore::ContainerTable::isReversedColumn(mlcore::ContainerTable *this@<X0>, uint64_t a2@<X8>)
{
  char *v4;
  std::string *v5;

  v4 = (char *)this + 6127;
  *(_QWORD *)a2 = off_24C335D90;
  v5 = (std::string *)(a2 + 8);
  if (*v4 < 0)
  {
    std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)this + 763), *((_QWORD *)this + 764));
  }
  else
  {
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 6104);
    *(_QWORD *)(a2 + 24) = *((_QWORD *)this + 765);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 1532);
  *(_QWORD *)(a2 + 36) = *(_QWORD *)(v4 + 5);
  *(_QWORD *)a2 = off_24C336AA0;
}

void mlcore::ContainerTable::albumFieldOrderColumn(mlcore::ContainerTable *this@<X0>, uint64_t a2@<X8>)
{
  char *v4;
  std::string *v5;

  v4 = (char *)this + 6175;
  *(_QWORD *)a2 = off_24C335D90;
  v5 = (std::string *)(a2 + 8);
  if (*v4 < 0)
  {
    std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)this + 769), *((_QWORD *)this + 770));
  }
  else
  {
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 6152);
    *(_QWORD *)(a2 + 24) = *((_QWORD *)this + 771);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 1544);
  *(_QWORD *)(a2 + 36) = *(_QWORD *)(v4 + 5);
  *(_QWORD *)a2 = off_24C336AA0;
}

void mlcore::ContainerTable::repeatModeColumn(mlcore::ContainerTable *this@<X0>, uint64_t a2@<X8>)
{
  char *v4;
  std::string *v5;

  v4 = (char *)this + 6223;
  *(_QWORD *)a2 = off_24C335D90;
  v5 = (std::string *)(a2 + 8);
  if (*v4 < 0)
  {
    std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)this + 775), *((_QWORD *)this + 776));
  }
  else
  {
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 6200);
    *(_QWORD *)(a2 + 24) = *((_QWORD *)this + 777);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 1556);
  *(_QWORD *)(a2 + 36) = *(_QWORD *)(v4 + 5);
  *(_QWORD *)a2 = off_24C336AA0;
}

void mlcore::ContainerTable::shuffleItemsColumn(mlcore::ContainerTable *this@<X0>, uint64_t a2@<X8>)
{
  char *v4;
  std::string *v5;

  v4 = (char *)this + 6271;
  *(_QWORD *)a2 = off_24C335D90;
  v5 = (std::string *)(a2 + 8);
  if (*v4 < 0)
  {
    std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)this + 781), *((_QWORD *)this + 782));
  }
  else
  {
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 6248);
    *(_QWORD *)(a2 + 24) = *((_QWORD *)this + 783);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 1568);
  *(_QWORD *)(a2 + 36) = *(_QWORD *)(v4 + 5);
  *(_QWORD *)a2 = off_24C336AA0;
}

void mlcore::ContainerTable::hasBeenShuffledColumn(mlcore::ContainerTable *this@<X0>, uint64_t a2@<X8>)
{
  char *v4;
  std::string *v5;

  v4 = (char *)this + 6319;
  *(_QWORD *)a2 = off_24C335D90;
  v5 = (std::string *)(a2 + 8);
  if (*v4 < 0)
  {
    std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)this + 787), *((_QWORD *)this + 788));
  }
  else
  {
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 6296);
    *(_QWORD *)(a2 + 24) = *((_QWORD *)this + 789);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 1580);
  *(_QWORD *)(a2 + 36) = *(_QWORD *)(v4 + 5);
  *(_QWORD *)a2 = off_24C336AA0;
}

void mlcore::ContainerTable::filePathColumn(mlcore::ContainerTable *this@<X0>, uint64_t a2@<X8>)
{
  char *v4;
  std::string *v5;
  std::string *v6;

  v4 = (char *)this + 6367;
  *(_QWORD *)a2 = off_24C335D90;
  v5 = (std::string *)(a2 + 8);
  if (*((char *)this + 6367) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)this + 793), *((_QWORD *)this + 794));
  }
  else
  {
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 6344);
    *(_QWORD *)(a2 + 24) = *((_QWORD *)this + 795);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 1592);
  *(_QWORD *)a2 = &off_24C335AB8;
  *(_BYTE *)(a2 + 36) = v4[5];
  v6 = (std::string *)(a2 + 40);
  if (v4[32] < 0)
  {
    std::string::__init_copy_ctor_external(v6, *((const std::string::value_type **)this + 797), *((_QWORD *)this + 798));
  }
  else
  {
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 6376);
    *(_QWORD *)(a2 + 56) = *((_QWORD *)this + 799);
  }
  *(_QWORD *)a2 = &off_24C336A60;
}

void sub_20A7EEA64(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  uint64_t v3;

  *(_QWORD *)v1 = v3;
  if (*(char *)(v1 + 31) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

void mlcore::ContainerTable::isSaveableColumn(mlcore::ContainerTable *this@<X0>, uint64_t a2@<X8>)
{
  char *v4;
  std::string *v5;

  v4 = (char *)this + 6431;
  *(_QWORD *)a2 = off_24C335D90;
  v5 = (std::string *)(a2 + 8);
  if (*v4 < 0)
  {
    std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)this + 801), *((_QWORD *)this + 802));
  }
  else
  {
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 6408);
    *(_QWORD *)(a2 + 24) = *((_QWORD *)this + 803);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 1608);
  *(_QWORD *)(a2 + 36) = *(_QWORD *)(v4 + 5);
  *(_QWORD *)a2 = off_24C336AA0;
}

void mlcore::ContainerTable::isSrcRemoteColumn(mlcore::ContainerTable *this@<X0>, uint64_t a2@<X8>)
{
  char *v4;
  std::string *v5;

  v4 = (char *)this + 6479;
  *(_QWORD *)a2 = off_24C335D90;
  v5 = (std::string *)(a2 + 8);
  if (*v4 < 0)
  {
    std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)this + 807), *((_QWORD *)this + 808));
  }
  else
  {
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 6456);
    *(_QWORD *)(a2 + 24) = *((_QWORD *)this + 809);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 1620);
  *(_QWORD *)(a2 + 36) = *(_QWORD *)(v4 + 5);
  *(_QWORD *)a2 = off_24C336AA0;
}

void mlcore::ContainerTable::isIgnoredSyncingColumn(mlcore::ContainerTable *this@<X0>, uint64_t a2@<X8>)
{
  char *v4;
  std::string *v5;

  v4 = (char *)this + 6527;
  *(_QWORD *)a2 = off_24C335D90;
  v5 = (std::string *)(a2 + 8);
  if (*v4 < 0)
  {
    std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)this + 813), *((_QWORD *)this + 814));
  }
  else
  {
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 6504);
    *(_QWORD *)(a2 + 24) = *((_QWORD *)this + 815);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 1632);
  *(_QWORD *)(a2 + 36) = *(_QWORD *)(v4 + 5);
  *(_QWORD *)a2 = off_24C336AA0;
}

void mlcore::ContainerTable::containerTypeColumn(mlcore::ContainerTable *this@<X0>, uint64_t a2@<X8>)
{
  char *v4;
  std::string *v5;

  v4 = (char *)this + 6575;
  *(_QWORD *)a2 = off_24C335D90;
  v5 = (std::string *)(a2 + 8);
  if (*v4 < 0)
  {
    std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)this + 819), *((_QWORD *)this + 820));
  }
  else
  {
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 6552);
    *(_QWORD *)(a2 + 24) = *((_QWORD *)this + 821);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 1644);
  *(_QWORD *)(a2 + 36) = *(_QWORD *)(v4 + 5);
  *(_QWORD *)a2 = off_24C336AA0;
}

void mlcore::ContainerTable::isContainerTypeActiveTargetColumn(mlcore::ContainerTable *this@<X0>, uint64_t a2@<X8>)
{
  char *v4;
  std::string *v5;

  v4 = (char *)this + 6623;
  *(_QWORD *)a2 = off_24C335D90;
  v5 = (std::string *)(a2 + 8);
  if (*v4 < 0)
  {
    std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)this + 825), *((_QWORD *)this + 826));
  }
  else
  {
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 6600);
    *(_QWORD *)(a2 + 24) = *((_QWORD *)this + 827);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 1656);
  *(_QWORD *)(a2 + 36) = *(_QWORD *)(v4 + 5);
  *(_QWORD *)a2 = off_24C336AA0;
}

void mlcore::ContainerTable::origDateModifiedColumn(mlcore::ContainerTable *this@<X0>, uint64_t a2@<X8>)
{
  std::string *v4;

  *(_QWORD *)a2 = off_24C335D90;
  v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 6671) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 831), *((_QWORD *)this + 832));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 6648);
    *(_QWORD *)(a2 + 24) = *((_QWORD *)this + 833);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 1668);
  *(_DWORD *)(a2 + 44) = *((_DWORD *)this + 1671);
  *(_QWORD *)(a2 + 36) = *(_QWORD *)((char *)this + 6676);
  *(_QWORD *)a2 = off_24C336AC0;
}

void mlcore::ContainerTable::storeCloudIDColumn(mlcore::ContainerTable *this@<X0>, uint64_t a2@<X8>)
{
  std::string *v4;

  *(_QWORD *)a2 = off_24C335D90;
  v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 6719) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 837), *((_QWORD *)this + 838));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 6696);
    *(_QWORD *)(a2 + 24) = *((_QWORD *)this + 839);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 1680);
  *(_DWORD *)(a2 + 44) = *((_DWORD *)this + 1683);
  *(_QWORD *)(a2 + 36) = *(_QWORD *)((char *)this + 6724);
  *(_QWORD *)a2 = off_24C336AC0;
}

void mlcore::ContainerTable::hasCloudPlayOrderColumn(mlcore::ContainerTable *this@<X0>, uint64_t a2@<X8>)
{
  char *v4;
  std::string *v5;

  v4 = (char *)this + 6767;
  *(_QWORD *)a2 = off_24C335D90;
  v5 = (std::string *)(a2 + 8);
  if (*v4 < 0)
  {
    std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)this + 843), *((_QWORD *)this + 844));
  }
  else
  {
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 6744);
    *(_QWORD *)(a2 + 24) = *((_QWORD *)this + 845);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 1692);
  *(_QWORD *)(a2 + 36) = *(_QWORD *)(v4 + 5);
  *(_QWORD *)a2 = off_24C336AA0;
}

void mlcore::ContainerTable::cloudGlobalIDColumn(mlcore::ContainerTable *this@<X0>, uint64_t a2@<X8>)
{
  char *v4;
  std::string *v5;
  std::string *v6;

  v4 = (char *)this + 6815;
  *(_QWORD *)a2 = off_24C335D90;
  v5 = (std::string *)(a2 + 8);
  if (*((char *)this + 6815) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)this + 849), *((_QWORD *)this + 850));
  }
  else
  {
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 6792);
    *(_QWORD *)(a2 + 24) = *((_QWORD *)this + 851);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 1704);
  *(_QWORD *)a2 = &off_24C335AB8;
  *(_BYTE *)(a2 + 36) = v4[5];
  v6 = (std::string *)(a2 + 40);
  if (v4[32] < 0)
  {
    std::string::__init_copy_ctor_external(v6, *((const std::string::value_type **)this + 853), *((_QWORD *)this + 854));
  }
  else
  {
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 6824);
    *(_QWORD *)(a2 + 56) = *((_QWORD *)this + 855);
  }
  *(_QWORD *)a2 = &off_24C336A60;
}

void sub_20A7EEFBC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  uint64_t v3;

  *(_QWORD *)v1 = v3;
  if (*(char *)(v1 + 31) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

void mlcore::ContainerTable::cloudShareURLColumn(mlcore::ContainerTable *this@<X0>, uint64_t a2@<X8>)
{
  char *v4;
  std::string *v5;
  std::string *v6;

  v4 = (char *)this + 6879;
  *(_QWORD *)a2 = off_24C335D90;
  v5 = (std::string *)(a2 + 8);
  if (*((char *)this + 6879) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)this + 857), *((_QWORD *)this + 858));
  }
  else
  {
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 6856);
    *(_QWORD *)(a2 + 24) = *((_QWORD *)this + 859);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 1720);
  *(_QWORD *)a2 = &off_24C335AB8;
  *(_BYTE *)(a2 + 36) = v4[5];
  v6 = (std::string *)(a2 + 40);
  if (v4[32] < 0)
  {
    std::string::__init_copy_ctor_external(v6, *((const std::string::value_type **)this + 861), *((_QWORD *)this + 862));
  }
  else
  {
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 6888);
    *(_QWORD *)(a2 + 56) = *((_QWORD *)this + 863);
  }
  *(_QWORD *)a2 = &off_24C336A60;
}

void sub_20A7EF0B4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  uint64_t v3;

  *(_QWORD *)v1 = v3;
  if (*(char *)(v1 + 31) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

void mlcore::ContainerTable::cloudIsPublicColumn(mlcore::ContainerTable *this@<X0>, uint64_t a2@<X8>)
{
  char *v4;
  std::string *v5;

  v4 = (char *)this + 6943;
  *(_QWORD *)a2 = off_24C335D90;
  v5 = (std::string *)(a2 + 8);
  if (*v4 < 0)
  {
    std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)this + 865), *((_QWORD *)this + 866));
  }
  else
  {
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 6920);
    *(_QWORD *)(a2 + 24) = *((_QWORD *)this + 867);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 1736);
  *(_QWORD *)(a2 + 36) = *(_QWORD *)(v4 + 5);
  *(_QWORD *)a2 = off_24C336AA0;
}

void mlcore::ContainerTable::cloudIsVisibleColumn(mlcore::ContainerTable *this@<X0>, uint64_t a2@<X8>)
{
  char *v4;
  std::string *v5;

  v4 = (char *)this + 6991;
  *(_QWORD *)a2 = off_24C335D90;
  v5 = (std::string *)(a2 + 8);
  if (*v4 < 0)
  {
    std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)this + 871), *((_QWORD *)this + 872));
  }
  else
  {
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 6968);
    *(_QWORD *)(a2 + 24) = *((_QWORD *)this + 873);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 1748);
  *(_QWORD *)(a2 + 36) = *(_QWORD *)(v4 + 5);
  *(_QWORD *)a2 = off_24C336AA0;
}

void mlcore::ContainerTable::cloudIsSubscribedColumn(mlcore::ContainerTable *this@<X0>, uint64_t a2@<X8>)
{
  char *v4;
  std::string *v5;

  v4 = (char *)this + 7039;
  *(_QWORD *)a2 = off_24C335D90;
  v5 = (std::string *)(a2 + 8);
  if (*v4 < 0)
  {
    std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)this + 877), *((_QWORD *)this + 878));
  }
  else
  {
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 7016);
    *(_QWORD *)(a2 + 24) = *((_QWORD *)this + 879);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 1760);
  *(_QWORD *)(a2 + 36) = *(_QWORD *)(v4 + 5);
  *(_QWORD *)a2 = off_24C336AA0;
}

void mlcore::ContainerTable::cloudIsCuratorPlaylistColumn(mlcore::ContainerTable *this@<X0>, uint64_t a2@<X8>)
{
  char *v4;
  std::string *v5;

  v4 = (char *)this + 7087;
  *(_QWORD *)a2 = off_24C335D90;
  v5 = (std::string *)(a2 + 8);
  if (*v4 < 0)
  {
    std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)this + 883), *((_QWORD *)this + 884));
  }
  else
  {
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 7064);
    *(_QWORD *)(a2 + 24) = *((_QWORD *)this + 885);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 1772);
  *(_QWORD *)(a2 + 36) = *(_QWORD *)(v4 + 5);
  *(_QWORD *)a2 = off_24C336AA0;
}

void mlcore::ContainerTable::cloudAuthorStoreIDColumn(mlcore::ContainerTable *this@<X0>, uint64_t a2@<X8>)
{
  std::string *v4;

  *(_QWORD *)a2 = off_24C335D90;
  v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 7135) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 889), *((_QWORD *)this + 890));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 7112);
    *(_QWORD *)(a2 + 24) = *((_QWORD *)this + 891);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 1784);
  *(_DWORD *)(a2 + 44) = *((_DWORD *)this + 1787);
  *(_QWORD *)(a2 + 36) = *(_QWORD *)((char *)this + 7140);
  *(_QWORD *)a2 = off_24C336AC0;
}

void mlcore::ContainerTable::cloudAuthorDisplayNameColumn(mlcore::ContainerTable *this@<X0>, uint64_t a2@<X8>)
{
  char *v4;
  std::string *v5;
  std::string *v6;

  v4 = (char *)this + 7183;
  *(_QWORD *)a2 = off_24C335D90;
  v5 = (std::string *)(a2 + 8);
  if (*((char *)this + 7183) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)this + 895), *((_QWORD *)this + 896));
  }
  else
  {
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 7160);
    *(_QWORD *)(a2 + 24) = *((_QWORD *)this + 897);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 1796);
  *(_QWORD *)a2 = &off_24C335AB8;
  *(_BYTE *)(a2 + 36) = v4[5];
  v6 = (std::string *)(a2 + 40);
  if (v4[32] < 0)
  {
    std::string::__init_copy_ctor_external(v6, *((const std::string::value_type **)this + 899), *((_QWORD *)this + 900));
  }
  else
  {
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 7192);
    *(_QWORD *)(a2 + 56) = *((_QWORD *)this + 901);
  }
  *(_QWORD *)a2 = &off_24C336A60;
}

void sub_20A7EF468(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  uint64_t v3;

  *(_QWORD *)v1 = v3;
  if (*(char *)(v1 + 31) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

void mlcore::ContainerTable::cloudAuthorStoreURLColumn(mlcore::ContainerTable *this@<X0>, uint64_t a2@<X8>)
{
  char *v4;
  std::string *v5;
  std::string *v6;

  v4 = (char *)this + 7247;
  *(_QWORD *)a2 = off_24C335D90;
  v5 = (std::string *)(a2 + 8);
  if (*((char *)this + 7247) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)this + 903), *((_QWORD *)this + 904));
  }
  else
  {
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 7224);
    *(_QWORD *)(a2 + 24) = *((_QWORD *)this + 905);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 1812);
  *(_QWORD *)a2 = &off_24C335AB8;
  *(_BYTE *)(a2 + 36) = v4[5];
  v6 = (std::string *)(a2 + 40);
  if (v4[32] < 0)
  {
    std::string::__init_copy_ctor_external(v6, *((const std::string::value_type **)this + 907), *((_QWORD *)this + 908));
  }
  else
  {
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 7256);
    *(_QWORD *)(a2 + 56) = *((_QWORD *)this + 909);
  }
  *(_QWORD *)a2 = &off_24C336A60;
}

void sub_20A7EF560(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  uint64_t v3;

  *(_QWORD *)v1 = v3;
  if (*(char *)(v1 + 31) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

void mlcore::ContainerTable::cloudMinimumRefreshIntervalColumn(mlcore::ContainerTable *this@<X0>, uint64_t a2@<X8>)
{
  std::string *v4;

  *(_QWORD *)a2 = off_24C335D90;
  v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 7311) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 911), *((_QWORD *)this + 912));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 7288);
    *(_QWORD *)(a2 + 24) = *((_QWORD *)this + 913);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 1828);
  *(_DWORD *)(a2 + 44) = *((_DWORD *)this + 1831);
  *(_QWORD *)(a2 + 36) = *(_QWORD *)((char *)this + 7316);
  *(_QWORD *)a2 = off_24C336AC0;
}

void mlcore::ContainerTable::cloudLastUpdateTimeColumn(mlcore::ContainerTable *this@<X0>, uint64_t a2@<X8>)
{
  std::string *v4;

  *(_QWORD *)a2 = off_24C335D90;
  v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 7359) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 917), *((_QWORD *)this + 918));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 7336);
    *(_QWORD *)(a2 + 24) = *((_QWORD *)this + 919);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 1840);
  *(_DWORD *)(a2 + 44) = *((_DWORD *)this + 1843);
  *(_QWORD *)(a2 + 36) = *(_QWORD *)((char *)this + 7364);
  *(_QWORD *)a2 = off_24C336AC0;
}

void mlcore::ContainerTable::cloudSubscriberCountColumn(mlcore::ContainerTable *this@<X0>, uint64_t a2@<X8>)
{
  char *v4;
  std::string *v5;

  v4 = (char *)this + 7407;
  *(_QWORD *)a2 = off_24C335D90;
  v5 = (std::string *)(a2 + 8);
  if (*v4 < 0)
  {
    std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)this + 923), *((_QWORD *)this + 924));
  }
  else
  {
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 7384);
    *(_QWORD *)(a2 + 24) = *((_QWORD *)this + 925);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 1852);
  *(_QWORD *)(a2 + 36) = *(_QWORD *)(v4 + 5);
  *(_QWORD *)a2 = off_24C336AA0;
}

void mlcore::ContainerTable::cloudSubscriberPlayCountColumn(mlcore::ContainerTable *this@<X0>, uint64_t a2@<X8>)
{
  char *v4;
  std::string *v5;

  v4 = (char *)this + 7455;
  *(_QWORD *)a2 = off_24C335D90;
  v5 = (std::string *)(a2 + 8);
  if (*v4 < 0)
  {
    std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)this + 929), *((_QWORD *)this + 930));
  }
  else
  {
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 7432);
    *(_QWORD *)(a2 + 24) = *((_QWORD *)this + 931);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 1864);
  *(_QWORD *)(a2 + 36) = *(_QWORD *)(v4 + 5);
  *(_QWORD *)a2 = off_24C336AA0;
}

void mlcore::ContainerTable::cloudSubscriberLikeCountColumn(mlcore::ContainerTable *this@<X0>, uint64_t a2@<X8>)
{
  char *v4;
  std::string *v5;

  v4 = (char *)this + 7503;
  *(_QWORD *)a2 = off_24C335D90;
  v5 = (std::string *)(a2 + 8);
  if (*v4 < 0)
  {
    std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)this + 935), *((_QWORD *)this + 936));
  }
  else
  {
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 7480);
    *(_QWORD *)(a2 + 24) = *((_QWORD *)this + 937);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 1876);
  *(_QWORD *)(a2 + 36) = *(_QWORD *)(v4 + 5);
  *(_QWORD *)a2 = off_24C336AA0;
}

void mlcore::ContainerTable::keepLocalColumn(mlcore::ContainerTable *this@<X0>, uint64_t a2@<X8>)
{
  char *v4;
  std::string *v5;

  v4 = (char *)this + 7551;
  *(_QWORD *)a2 = off_24C335D90;
  v5 = (std::string *)(a2 + 8);
  if (*v4 < 0)
  {
    std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)this + 941), *((_QWORD *)this + 942));
  }
  else
  {
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 7528);
    *(_QWORD *)(a2 + 24) = *((_QWORD *)this + 943);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 1888);
  *(_QWORD *)(a2 + 36) = *(_QWORD *)(v4 + 5);
  *(_QWORD *)a2 = off_24C336AA0;
}

void mlcore::ContainerTable::keepLocalStatusColumn(mlcore::ContainerTable *this@<X0>, uint64_t a2@<X8>)
{
  char *v4;
  std::string *v5;

  v4 = (char *)this + 7599;
  *(_QWORD *)a2 = off_24C335D90;
  v5 = (std::string *)(a2 + 8);
  if (*v4 < 0)
  {
    std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)this + 947), *((_QWORD *)this + 948));
  }
  else
  {
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 7576);
    *(_QWORD *)(a2 + 24) = *((_QWORD *)this + 949);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 1900);
  *(_QWORD *)(a2 + 36) = *(_QWORD *)(v4 + 5);
  *(_QWORD *)a2 = off_24C336AA0;
}

void mlcore::ContainerTable::keepLocalStatusReasonColumn(mlcore::ContainerTable *this@<X0>, uint64_t a2@<X8>)
{
  char *v4;
  std::string *v5;

  v4 = (char *)this + 7647;
  *(_QWORD *)a2 = off_24C335D90;
  v5 = (std::string *)(a2 + 8);
  if (*v4 < 0)
  {
    std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)this + 953), *((_QWORD *)this + 954));
  }
  else
  {
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 7624);
    *(_QWORD *)(a2 + 24) = *((_QWORD *)this + 955);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 1912);
  *(_QWORD *)(a2 + 36) = *(_QWORD *)(v4 + 5);
  *(_QWORD *)a2 = off_24C336AA0;
}

void mlcore::ContainerTable::keepLocalConstraintsColumn(mlcore::ContainerTable *this@<X0>, uint64_t a2@<X8>)
{
  char *v4;
  std::string *v5;

  v4 = (char *)this + 7695;
  *(_QWORD *)a2 = off_24C335D90;
  v5 = (std::string *)(a2 + 8);
  if (*v4 < 0)
  {
    std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)this + 959), *((_QWORD *)this + 960));
  }
  else
  {
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 7672);
    *(_QWORD *)(a2 + 24) = *((_QWORD *)this + 961);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 1924);
  *(_QWORD *)(a2 + 36) = *(_QWORD *)(v4 + 5);
  *(_QWORD *)a2 = off_24C336AA0;
}

void mlcore::ContainerTable::externalVendorIdentifierColumn(mlcore::ContainerTable *this@<X0>, uint64_t a2@<X8>)
{
  char *v4;
  std::string *v5;
  std::string *v6;

  v4 = (char *)this + 7743;
  *(_QWORD *)a2 = off_24C335D90;
  v5 = (std::string *)(a2 + 8);
  if (*((char *)this + 7743) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)this + 965), *((_QWORD *)this + 966));
  }
  else
  {
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 7720);
    *(_QWORD *)(a2 + 24) = *((_QWORD *)this + 967);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 1936);
  *(_QWORD *)a2 = &off_24C335AB8;
  *(_BYTE *)(a2 + 36) = v4[5];
  v6 = (std::string *)(a2 + 40);
  if (v4[32] < 0)
  {
    std::string::__init_copy_ctor_external(v6, *((const std::string::value_type **)this + 969), *((_QWORD *)this + 970));
  }
  else
  {
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 7752);
    *(_QWORD *)(a2 + 56) = *((_QWORD *)this + 971);
  }
  *(_QWORD *)a2 = &off_24C336A60;
}

void sub_20A7EFB44(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  uint64_t v3;

  *(_QWORD *)v1 = v3;
  if (*(char *)(v1 + 31) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

void mlcore::ContainerTable::externalVendorDisplayNameColumn(mlcore::ContainerTable *this@<X0>, uint64_t a2@<X8>)
{
  char *v4;
  std::string *v5;
  std::string *v6;

  v4 = (char *)this + 7807;
  *(_QWORD *)a2 = off_24C335D90;
  v5 = (std::string *)(a2 + 8);
  if (*((char *)this + 7807) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)this + 973), *((_QWORD *)this + 974));
  }
  else
  {
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 7784);
    *(_QWORD *)(a2 + 24) = *((_QWORD *)this + 975);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 1952);
  *(_QWORD *)a2 = &off_24C335AB8;
  *(_BYTE *)(a2 + 36) = v4[5];
  v6 = (std::string *)(a2 + 40);
  if (v4[32] < 0)
  {
    std::string::__init_copy_ctor_external(v6, *((const std::string::value_type **)this + 977), *((_QWORD *)this + 978));
  }
  else
  {
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 7816);
    *(_QWORD *)(a2 + 56) = *((_QWORD *)this + 979);
  }
  *(_QWORD *)a2 = &off_24C336A60;
}

void sub_20A7EFC3C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  uint64_t v3;

  *(_QWORD *)v1 = v3;
  if (*(char *)(v1 + 31) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

void mlcore::ContainerTable::externalVendorContainerTagColumn(mlcore::ContainerTable *this@<X0>, uint64_t a2@<X8>)
{
  char *v4;
  std::string *v5;
  std::string *v6;

  v4 = (char *)this + 7871;
  *(_QWORD *)a2 = off_24C335D90;
  v5 = (std::string *)(a2 + 8);
  if (*((char *)this + 7871) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)this + 981), *((_QWORD *)this + 982));
  }
  else
  {
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 7848);
    *(_QWORD *)(a2 + 24) = *((_QWORD *)this + 983);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 1968);
  *(_QWORD *)a2 = &off_24C335AB8;
  *(_BYTE *)(a2 + 36) = v4[5];
  v6 = (std::string *)(a2 + 40);
  if (v4[32] < 0)
  {
    std::string::__init_copy_ctor_external(v6, *((const std::string::value_type **)this + 985), *((_QWORD *)this + 986));
  }
  else
  {
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 7880);
    *(_QWORD *)(a2 + 56) = *((_QWORD *)this + 987);
  }
  *(_QWORD *)a2 = &off_24C336A60;
}

void sub_20A7EFD34(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  uint64_t v3;

  *(_QWORD *)v1 = v3;
  if (*(char *)(v1 + 31) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

void mlcore::ContainerTable::isExternalVendorPlaylistColumn(mlcore::ContainerTable *this@<X0>, uint64_t a2@<X8>)
{
  char *v4;
  std::string *v5;

  v4 = (char *)this + 7935;
  *(_QWORD *)a2 = off_24C335D90;
  v5 = (std::string *)(a2 + 8);
  if (*v4 < 0)
  {
    std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)this + 989), *((_QWORD *)this + 990));
  }
  else
  {
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 7912);
    *(_QWORD *)(a2 + 24) = *((_QWORD *)this + 991);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 1984);
  *(_QWORD *)(a2 + 36) = *(_QWORD *)(v4 + 5);
  *(_QWORD *)a2 = off_24C336AA0;
}

void mlcore::ContainerTable::syncIDColumn(mlcore::ContainerTable *this@<X0>, uint64_t a2@<X8>)
{
  std::string *v4;

  *(_QWORD *)a2 = off_24C335D90;
  v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 7983) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 995), *((_QWORD *)this + 996));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 7960);
    *(_QWORD *)(a2 + 24) = *((_QWORD *)this + 997);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 1996);
  *(_DWORD *)(a2 + 44) = *((_DWORD *)this + 1999);
  *(_QWORD *)(a2 + 36) = *(_QWORD *)((char *)this + 7988);
  *(_QWORD *)a2 = off_24C336AC0;
}

void mlcore::ContainerTable::cloudIsSharingDisabledColumn(mlcore::ContainerTable *this@<X0>, uint64_t a2@<X8>)
{
  char *v4;
  std::string *v5;

  v4 = (char *)this + 8031;
  *(_QWORD *)a2 = off_24C335D90;
  v5 = (std::string *)(a2 + 8);
  if (*v4 < 0)
  {
    std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)this + 1001), *((_QWORD *)this + 1002));
  }
  else
  {
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 8008);
    *(_QWORD *)(a2 + 24) = *((_QWORD *)this + 1003);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 2008);
  *(_QWORD *)(a2 + 36) = *(_QWORD *)(v4 + 5);
  *(_QWORD *)a2 = off_24C336AA0;
}

void mlcore::ContainerTable::cloudVersionHashColumn(mlcore::ContainerTable *this@<X0>, uint64_t a2@<X8>)
{
  char *v4;
  std::string *v5;
  std::string *v6;

  v4 = (char *)this + 8079;
  *(_QWORD *)a2 = off_24C335D90;
  v5 = (std::string *)(a2 + 8);
  if (*((char *)this + 8079) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)this + 1007), *((_QWORD *)this + 1008));
  }
  else
  {
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 8056);
    *(_QWORD *)(a2 + 24) = *((_QWORD *)this + 1009);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 2020);
  *(_QWORD *)a2 = &off_24C335AB8;
  *(_BYTE *)(a2 + 36) = v4[5];
  v6 = (std::string *)(a2 + 40);
  if (v4[32] < 0)
  {
    std::string::__init_copy_ctor_external(v6, *((const std::string::value_type **)this + 1011), *((_QWORD *)this + 1012));
  }
  else
  {
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 8088);
    *(_QWORD *)(a2 + 56) = *((_QWORD *)this + 1013);
  }
  *(_QWORD *)a2 = &off_24C336A60;
}

void sub_20A7EFFD0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  uint64_t v3;

  *(_QWORD *)v1 = v3;
  if (*(char *)(v1 + 31) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

void mlcore::ContainerTable::datePlayedLocalColumn(mlcore::ContainerTable *this@<X0>, uint64_t a2@<X8>)
{
  std::string *v4;

  *(_QWORD *)a2 = off_24C335D90;
  v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 8143) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 1015), *((_QWORD *)this + 1016));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 8120);
    *(_QWORD *)(a2 + 24) = *((_QWORD *)this + 1017);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 2036);
  *(_DWORD *)(a2 + 44) = *((_DWORD *)this + 2039);
  *(_QWORD *)(a2 + 36) = *(_QWORD *)((char *)this + 8148);
  *(_QWORD *)a2 = off_24C336AC0;
}

void mlcore::ContainerTable::cloudAuthorHandleColumn(mlcore::ContainerTable *this@<X0>, uint64_t a2@<X8>)
{
  char *v4;
  std::string *v5;
  std::string *v6;

  v4 = (char *)this + 0x1FFF;
  *(_QWORD *)a2 = off_24C335D90;
  v5 = (std::string *)(a2 + 8);
  if (*((char *)this + 0x1FFF) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)this + 1021), *((_QWORD *)this + 1022));
  }
  else
  {
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 8168);
    *(_QWORD *)(a2 + 24) = *((_QWORD *)this + 1023);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 2048);
  *(_QWORD *)a2 = &off_24C335AB8;
  *(_BYTE *)(a2 + 36) = v4[5];
  v6 = (std::string *)(a2 + 40);
  if (v4[32] < 0)
  {
    std::string::__init_copy_ctor_external(v6, *((const std::string::value_type **)this + 1025), *((_QWORD *)this + 1026));
  }
  else
  {
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 8200);
    *(_QWORD *)(a2 + 56) = *((_QWORD *)this + 1027);
  }
  *(_QWORD *)a2 = &off_24C336A60;
}

void sub_20A7F0154(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  uint64_t v3;

  *(_QWORD *)v1 = v3;
  if (*(char *)(v1 + 31) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

void mlcore::ContainerTable::cloudUniversalLibraryIDColumn(mlcore::ContainerTable *this@<X0>, uint64_t a2@<X8>)
{
  char *v4;
  std::string *v5;
  std::string *v6;

  v4 = (char *)this + 8255;
  *(_QWORD *)a2 = off_24C335D90;
  v5 = (std::string *)(a2 + 8);
  if (*((char *)this + 8255) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)this + 1029), *((_QWORD *)this + 1030));
  }
  else
  {
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 8232);
    *(_QWORD *)(a2 + 24) = *((_QWORD *)this + 1031);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 2064);
  *(_QWORD *)a2 = &off_24C335AB8;
  *(_BYTE *)(a2 + 36) = v4[5];
  v6 = (std::string *)(a2 + 40);
  if (v4[32] < 0)
  {
    std::string::__init_copy_ctor_external(v6, *((const std::string::value_type **)this + 1033), *((_QWORD *)this + 1034));
  }
  else
  {
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 8264);
    *(_QWORD *)(a2 + 56) = *((_QWORD *)this + 1035);
  }
  *(_QWORD *)a2 = &off_24C336A60;
}

void sub_20A7F024C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  uint64_t v3;

  *(_QWORD *)v1 = v3;
  if (*(char *)(v1 + 31) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

void mlcore::ContainerTable::shouldDisplayIndexColumn(mlcore::ContainerTable *this@<X0>, uint64_t a2@<X8>)
{
  char *v4;
  std::string *v5;

  v4 = (char *)this + 8319;
  *(_QWORD *)a2 = off_24C335D90;
  v5 = (std::string *)(a2 + 8);
  if (*v4 < 0)
  {
    std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)this + 1037), *((_QWORD *)this + 1038));
  }
  else
  {
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 8296);
    *(_QWORD *)(a2 + 24) = *((_QWORD *)this + 1039);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 2080);
  *(_QWORD *)(a2 + 36) = *(_QWORD *)(v4 + 5);
  *(_QWORD *)a2 = off_24C336AA0;
}

void mlcore::ContainerTable::dateDownloadedColumn(mlcore::ContainerTable *this@<X0>, uint64_t a2@<X8>)
{
  std::string *v4;

  *(_QWORD *)a2 = off_24C335D90;
  v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 8367) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 1043), *((_QWORD *)this + 1044));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 8344);
    *(_QWORD *)(a2 + 24) = *((_QWORD *)this + 1045);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 2092);
  *(_DWORD *)(a2 + 44) = *((_DWORD *)this + 2095);
  *(_QWORD *)(a2 + 36) = *(_QWORD *)((char *)this + 8372);
  *(_QWORD *)a2 = off_24C336AC0;
}

void mlcore::ContainerTable::categoryTypeMaskColumn(mlcore::ContainerTable *this@<X0>, uint64_t a2@<X8>)
{
  char *v4;
  std::string *v5;

  v4 = (char *)this + 8415;
  *(_QWORD *)a2 = off_24C335D90;
  v5 = (std::string *)(a2 + 8);
  if (*v4 < 0)
  {
    std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)this + 1049), *((_QWORD *)this + 1050));
  }
  else
  {
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 8392);
    *(_QWORD *)(a2 + 24) = *((_QWORD *)this + 1051);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 2104);
  *(_QWORD *)(a2 + 36) = *(_QWORD *)(v4 + 5);
  *(_QWORD *)a2 = off_24C336AA0;
}

void mlcore::ContainerTable::groupingSortKeyColumn(mlcore::ContainerTable *this@<X0>, uint64_t a2@<X8>)
{
  char *v4;
  std::string *v5;
  std::string *v6;

  v4 = (char *)this + 8463;
  *(_QWORD *)a2 = off_24C335D90;
  v5 = (std::string *)(a2 + 8);
  if (*((char *)this + 8463) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)this + 1055), *((_QWORD *)this + 1056));
  }
  else
  {
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 8440);
    *(_QWORD *)(a2 + 24) = *((_QWORD *)this + 1057);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 2116);
  *(_QWORD *)a2 = &off_24C335AB8;
  *(_BYTE *)(a2 + 36) = v4[5];
  v6 = (std::string *)(a2 + 40);
  if (v4[32] < 0)
  {
    std::string::__init_copy_ctor_external(v6, *((const std::string::value_type **)this + 1059), *((_QWORD *)this + 1060));
  }
  else
  {
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 8472);
    *(_QWORD *)(a2 + 56) = *((_QWORD *)this + 1061);
  }
  *(_QWORD *)a2 = &off_24C336A60;
}

void sub_20A7F04E8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  uint64_t v3;

  *(_QWORD *)v1 = v3;
  if (*(char *)(v1 + 31) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

void mlcore::ContainerTable::traitsColumn(mlcore::ContainerTable *this@<X0>, uint64_t a2@<X8>)
{
  char *v4;
  std::string *v5;

  v4 = (char *)this + 8527;
  *(_QWORD *)a2 = off_24C335D90;
  v5 = (std::string *)(a2 + 8);
  if (*v4 < 0)
  {
    std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)this + 1063), *((_QWORD *)this + 1064));
  }
  else
  {
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 8504);
    *(_QWORD *)(a2 + 24) = *((_QWORD *)this + 1065);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 2132);
  *(_QWORD *)(a2 + 36) = *(_QWORD *)(v4 + 5);
  *(_QWORD *)a2 = off_24C336AA0;
}

void mlcore::ContainerTable::likedStateChangedDateColumn(mlcore::ContainerTable *this@<X0>, uint64_t a2@<X8>)
{
  std::string *v4;

  *(_QWORD *)a2 = off_24C335D90;
  v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 8575) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 1069), *((_QWORD *)this + 1070));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 8552);
    *(_QWORD *)(a2 + 24) = *((_QWORD *)this + 1071);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 2144);
  *(_DWORD *)(a2 + 44) = *((_DWORD *)this + 2147);
  *(_QWORD *)(a2 + 36) = *(_QWORD *)((char *)this + 8580);
  *(_QWORD *)a2 = off_24C336AC0;
}

void mlcore::ContainerTable::isColaborativeColumn(mlcore::ContainerTable *this@<X0>, uint64_t a2@<X8>)
{
  char *v4;
  std::string *v5;

  v4 = (char *)this + 8623;
  *(_QWORD *)a2 = off_24C335D90;
  v5 = (std::string *)(a2 + 8);
  if (*v4 < 0)
  {
    std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)this + 1075), *((_QWORD *)this + 1076));
  }
  else
  {
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 8600);
    *(_QWORD *)(a2 + 24) = *((_QWORD *)this + 1077);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 2156);
  *(_QWORD *)(a2 + 36) = *(_QWORD *)(v4 + 5);
  *(_QWORD *)a2 = off_24C336AA0;
}

void mlcore::ContainerTable::collaborationModeColumn(mlcore::ContainerTable *this@<X0>, uint64_t a2@<X8>)
{
  char *v4;
  std::string *v5;

  v4 = (char *)this + 8671;
  *(_QWORD *)a2 = off_24C335D90;
  v5 = (std::string *)(a2 + 8);
  if (*v4 < 0)
  {
    std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)this + 1081), *((_QWORD *)this + 1082));
  }
  else
  {
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 8648);
    *(_QWORD *)(a2 + 24) = *((_QWORD *)this + 1083);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 2168);
  *(_QWORD *)(a2 + 36) = *(_QWORD *)(v4 + 5);
  *(_QWORD *)a2 = off_24C336AA0;
}

void mlcore::ContainerTable::collaboratorPermissionsColumn(mlcore::ContainerTable *this@<X0>, uint64_t a2@<X8>)
{
  char *v4;
  std::string *v5;

  v4 = (char *)this + 8719;
  *(_QWORD *)a2 = off_24C335D90;
  v5 = (std::string *)(a2 + 8);
  if (*v4 < 0)
  {
    std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)this + 1087), *((_QWORD *)this + 1088));
  }
  else
  {
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 8696);
    *(_QWORD *)(a2 + 24) = *((_QWORD *)this + 1089);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 2180);
  *(_QWORD *)(a2 + 36) = *(_QWORD *)(v4 + 5);
  *(_QWORD *)a2 = off_24C336AA0;
}

void mlcore::ContainerTable::collaborationInvitationURLColumn(mlcore::ContainerTable *this@<X0>, uint64_t a2@<X8>)
{
  char *v4;
  std::string *v5;
  std::string *v6;

  v4 = (char *)this + 8767;
  *(_QWORD *)a2 = off_24C335D90;
  v5 = (std::string *)(a2 + 8);
  if (*((char *)this + 8767) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)this + 1093), *((_QWORD *)this + 1094));
  }
  else
  {
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 8744);
    *(_QWORD *)(a2 + 24) = *((_QWORD *)this + 1095);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 2192);
  *(_QWORD *)a2 = &off_24C335AB8;
  *(_BYTE *)(a2 + 36) = v4[5];
  v6 = (std::string *)(a2 + 40);
  if (v4[32] < 0)
  {
    std::string::__init_copy_ctor_external(v6, *((const std::string::value_type **)this + 1097), *((_QWORD *)this + 1098));
  }
  else
  {
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 8776);
    *(_QWORD *)(a2 + 56) = *((_QWORD *)this + 1099);
  }
  *(_QWORD *)a2 = &off_24C336A60;
}

void sub_20A7F089C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  uint64_t v3;

  *(_QWORD *)v1 = v3;
  if (*(char *)(v1 + 31) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

void mlcore::ContainerTable::coverArtworkRecipeColumn(mlcore::ContainerTable *this@<X0>, uint64_t a2@<X8>)
{
  char *v4;
  std::string *v5;
  std::string *v6;

  v4 = (char *)this + 8831;
  *(_QWORD *)a2 = off_24C335D90;
  v5 = (std::string *)(a2 + 8);
  if (*((char *)this + 8831) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)this + 1101), *((_QWORD *)this + 1102));
  }
  else
  {
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 8808);
    *(_QWORD *)(a2 + 24) = *((_QWORD *)this + 1103);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 2208);
  *(_QWORD *)a2 = &off_24C335AB8;
  *(_BYTE *)(a2 + 36) = v4[5];
  v6 = (std::string *)(a2 + 40);
  if (v4[32] < 0)
  {
    std::string::__init_copy_ctor_external(v6, *((const std::string::value_type **)this + 1105), *((_QWORD *)this + 1106));
  }
  else
  {
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 8840);
    *(_QWORD *)(a2 + 56) = *((_QWORD *)this + 1107);
  }
  *(_QWORD *)a2 = &off_24C336A60;
}

void sub_20A7F0994(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  uint64_t v3;

  *(_QWORD *)v1 = v3;
  if (*(char *)(v1 + 31) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

void mlcore::ContainerTable::collaborationInvitationURLExpirationDateColumn(mlcore::ContainerTable *this@<X0>, uint64_t a2@<X8>)
{
  std::string *v4;

  *(_QWORD *)a2 = off_24C335D90;
  v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 8895) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 1109), *((_QWORD *)this + 1110));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 8872);
    *(_QWORD *)(a2 + 24) = *((_QWORD *)this + 1111);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 2224);
  *(_DWORD *)(a2 + 44) = *((_DWORD *)this + 2227);
  *(_QWORD *)(a2 + 36) = *(_QWORD *)((char *)this + 8900);
  *(_QWORD *)a2 = off_24C336AC0;
}

void mlcore::ContainerTable::collaborationJoinRequestPendingColumn(mlcore::ContainerTable *this@<X0>, uint64_t a2@<X8>)
{
  char *v4;
  std::string *v5;

  v4 = (char *)this + 8943;
  *(_QWORD *)a2 = off_24C335D90;
  v5 = (std::string *)(a2 + 8);
  if (*v4 < 0)
  {
    std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)this + 1115), *((_QWORD *)this + 1116));
  }
  else
  {
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 8920);
    *(_QWORD *)(a2 + 24) = *((_QWORD *)this + 1117);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 2236);
  *(_QWORD *)(a2 + 36) = *(_QWORD *)(v4 + 5);
  *(_QWORD *)a2 = off_24C336AA0;
}

void mlcore::ContainerTable::collaboratorStatusColumn(mlcore::ContainerTable *this@<X0>, uint64_t a2@<X8>)
{
  char *v4;
  std::string *v5;

  v4 = (char *)this + 8991;
  *(_QWORD *)a2 = off_24C335D90;
  v5 = (std::string *)(a2 + 8);
  if (*v4 < 0)
  {
    std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)this + 1121), *((_QWORD *)this + 1122));
  }
  else
  {
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 8968);
    *(_QWORD *)(a2 + 24) = *((_QWORD *)this + 1123);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 2248);
  *(_QWORD *)(a2 + 36) = *(_QWORD *)(v4 + 5);
  *(_QWORD *)a2 = off_24C336AA0;
}

uint64_t mlcore::GetForeignProperty<double>(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  char *v12;
  uint64_t ForeignProperty;
  _QWORD *v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  __int128 v19;
  _QWORD v20[2];
  _BYTE v21[24];
  _BYTE *v22;
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  v6 = *a3;
  v5 = (std::__shared_weak_count *)a3[1];
  v20[0] = *a3;
  v20[1] = v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    v6 = *a3;
    v9 = a3[1];
    *(_QWORD *)&v19 = a2;
    *((_QWORD *)&v19 + 1) = a1;
    if (v9)
    {
      v10 = (unint64_t *)(v9 + 8);
      do
        v11 = __ldxr(v10);
      while (__stxr(v11 + 1, v10));
    }
  }
  else
  {
    v9 = 0;
    *(_QWORD *)&v19 = a2;
    *((_QWORD *)&v19 + 1) = a1;
  }
  v12 = (char *)operator new(0x28uLL);
  *(_QWORD *)v12 = &off_24C33B458;
  *(_OWORD *)(v12 + 8) = v19;
  *((_QWORD *)v12 + 3) = v6;
  *((_QWORD *)v12 + 4) = v9;
  v22 = v12;
  ForeignProperty = mlcore::_GetForeignProperty(a1, a2, v20, (uint64_t)v21);
  v14 = v22;
  if (v22 == v21)
  {
    v15 = 4;
    v14 = v21;
    goto LABEL_13;
  }
  if (v22)
  {
    v15 = 5;
LABEL_13:
    (*(void (**)(void))(*v14 + 8 * v15))();
  }
  if (v5)
  {
    v16 = (unint64_t *)&v5->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  return ForeignProperty;
}

void sub_20A7F0CD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, char *a19)
{
  uint64_t v19;
  char *v20;
  char *v22;
  uint64_t v23;

  v22 = a19;
  if (a19 == v20)
  {
    v23 = 4;
    v22 = &a16;
  }
  else
  {
    if (!a19)
      goto LABEL_6;
    v23 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v22 + 8 * v23))();
LABEL_6:
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100](v19);
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)&a14);
  _Unwind_Resume(a1);
}

uint64_t mlcore::GetForeignProperty<mediaplatform::Data>(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  char *v12;
  uint64_t ForeignProperty;
  _QWORD *v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  __int128 v19;
  _QWORD v20[2];
  _BYTE v21[24];
  _BYTE *v22;
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  v6 = *a3;
  v5 = (std::__shared_weak_count *)a3[1];
  v20[0] = *a3;
  v20[1] = v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    v6 = *a3;
    v9 = a3[1];
    *(_QWORD *)&v19 = a2;
    *((_QWORD *)&v19 + 1) = a1;
    if (v9)
    {
      v10 = (unint64_t *)(v9 + 8);
      do
        v11 = __ldxr(v10);
      while (__stxr(v11 + 1, v10));
    }
  }
  else
  {
    v9 = 0;
    *(_QWORD *)&v19 = a2;
    *((_QWORD *)&v19 + 1) = a1;
  }
  v12 = (char *)operator new(0x28uLL);
  *(_QWORD *)v12 = &off_24C33B3A8;
  *(_OWORD *)(v12 + 8) = v19;
  *((_QWORD *)v12 + 3) = v6;
  *((_QWORD *)v12 + 4) = v9;
  v22 = v12;
  ForeignProperty = mlcore::_GetForeignProperty(a1, a2, v20, (uint64_t)v21);
  v14 = v22;
  if (v22 == v21)
  {
    v15 = 4;
    v14 = v21;
    goto LABEL_13;
  }
  if (v22)
  {
    v15 = 5;
LABEL_13:
    (*(void (**)(void))(*v14 + 8 * v15))();
  }
  if (v5)
  {
    v16 = (unint64_t *)&v5->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  return ForeignProperty;
}

void sub_20A7F0E98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, char *a19)
{
  uint64_t v19;
  char *v20;
  char *v22;
  uint64_t v23;

  v22 = a19;
  if (a19 == v20)
  {
    v23 = 4;
    v22 = &a16;
  }
  else
  {
    if (!a19)
      goto LABEL_6;
    v23 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v22 + 8 * v23))();
LABEL_6:
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100](v19);
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)&a14);
  _Unwind_Resume(a1);
}

uint64_t mlcore::ModelPropertyBase::name(mlcore::ModelPropertyBase *this)
{
  return (uint64_t)this + 16;
}

std::string *mlcore::ModelPropertyBase::setName(uint64_t a1, const std::string *a2)
{
  return std::string::operator=((std::string *)(a1 + 16), a2);
}

uint64_t mlcore::ModelPropertyBase::aliasName(mlcore::ModelPropertyBase *this)
{
  return (uint64_t)this + 40;
}

std::string *mlcore::ModelPropertyBase::setAliasName(uint64_t a1, const std::string *a2)
{
  return std::string::operator=((std::string *)(a1 + 40), a2);
}

uint64_t mlcore::ModelPropertyBase::entityClass(mlcore::ModelPropertyBase *this)
{
  return *((_QWORD *)this + 1);
}

uint64_t mlcore::ModelPropertyBase::setEntityClass(uint64_t this, mlcore::EntityClass *a2)
{
  *(_QWORD *)(this + 8) = a2;
  return this;
}

uint64_t mlcore::ModelProperty<std::string>::compareValuesFromCaches(unint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5;
  void *v6;
  int v7;
  void *v8;
  std::string::size_type size;
  std::string *v10;
  std::string::size_type v11;
  std::string *v12;
  size_t v13;
  unsigned int v14;
  unsigned int v15;
  std::string v17;
  std::string v18;

  mlcore::PropertyCacheBase<std::string,mediaplatform::Data>::valueForProperty(&v18, a2, a1);
  mlcore::PropertyCacheBase<std::string,mediaplatform::Data>::valueForProperty(&v17, a3, a1);
  v5 = SHIBYTE(v17.__r_.__value_.__r.__words[2]);
  v6 = (void *)v17.__r_.__value_.__r.__words[0];
  v7 = SHIBYTE(v18.__r_.__value_.__r.__words[2]);
  v8 = (void *)v18.__r_.__value_.__r.__words[0];
  if ((v18.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v18.__r_.__value_.__r.__words[2]);
  else
    size = v18.__r_.__value_.__l.__size_;
  if ((v18.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v10 = &v18;
  else
    v10 = (std::string *)v18.__r_.__value_.__r.__words[0];
  if ((v17.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v11 = HIBYTE(v17.__r_.__value_.__r.__words[2]);
  else
    v11 = v17.__r_.__value_.__l.__size_;
  if ((v17.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v12 = &v17;
  else
    v12 = (std::string *)v17.__r_.__value_.__r.__words[0];
  if (v11 >= size)
    v13 = size;
  else
    v13 = v11;
  v14 = memcmp(v10, v12, v13);
  if (v5 < 0)
  {
    operator delete(v6);
    if ((v7 & 0x80000000) == 0)
      goto LABEL_18;
  }
  else if ((v7 & 0x80000000) == 0)
  {
    goto LABEL_18;
  }
  operator delete(v8);
LABEL_18:
  v15 = v11 < size;
  if (size < v11)
    v15 = -1;
  if (v14)
    return v14;
  else
    return v15;
}

void sub_20A7F0FF4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t mlcore::ModelProperty<mediaplatform::Data>::compareValuesFromCaches(unint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5;
  void *v6;
  int v7;
  size_t v8;
  unsigned int v9;
  BOOL v10;
  void (**v12)(mediaplatform::Data *__hidden);
  size_t v13;
  void *__s2;
  char v15;
  void (**v16)(mediaplatform::Data *__hidden);
  size_t v17;
  void *__s1;
  char v19;

  mlcore::PropertyCacheBase<mediaplatform::Data>::valueForProperty((mediaplatform::Data *)&v16, a2, a1);
  mlcore::PropertyCacheBase<mediaplatform::Data>::valueForProperty((mediaplatform::Data *)&v12, a3, a1);
  v5 = v17;
  v6 = __s2;
  v7 = v13;
  if (v17 >= v13)
    v8 = v13;
  else
    v8 = v17;
  v9 = memcmp(__s1, __s2, v8);
  v12 = &off_24C331510;
  if (v15)
    v10 = v6 == 0;
  else
    v10 = 1;
  if (!v10)
    MEMORY[0x20BD27AE4](v6, 0x1000C8077774924);
  v16 = &off_24C331510;
  if (v19 && __s1)
    MEMORY[0x20BD27AE4](__s1, 0x1000C8077774924);
  if (v9)
    return v9;
  else
    return (v5 - v7);
}

void sub_20A7F10F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18)
{
  if (a18)
  {
    if (a17)
      MEMORY[0x20BD27AE4](a17, 0x1000C8077774924);
  }
  _Unwind_Resume(exception_object);
}

mediaplatform::Data *mlcore::PropertyCacheBase<mediaplatform::Data>::valueForProperty(mediaplatform::Data *a1, uint64_t a2, unint64_t a3)
{
  _QWORD *v5;
  std::logic_error *exception;
  std::string v8;

  v5 = std::__hash_table<std::__hash_value_type<mlcore::ModelProperty<double> *,double>,std::__unordered_map_hasher<mlcore::ModelProperty<double> *,std::__hash_value_type<mlcore::ModelProperty<double> *,double>,std::hash<mlcore::ModelProperty<double> *>,std::equal_to<mlcore::ModelProperty<double> *>,true>,std::__unordered_map_equal<mlcore::ModelProperty<double> *,std::__hash_value_type<mlcore::ModelProperty<double> *,double>,std::equal_to<mlcore::ModelProperty<double> *>,std::hash<mlcore::ModelProperty<double> *>,true>,std::allocator<std::__hash_value_type<mlcore::ModelProperty<double> *,double>>>::find<mlcore::ModelProperty<double> *>((_QWORD *)(a2 + 8), a3);
  if (!v5)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    (*(void (**)(std::string *__return_ptr, unint64_t))(*(_QWORD *)a3 + 40))(&v8, a3);
    std::logic_error::logic_error(exception, &v8);
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8C0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24C32FBC0, MEMORY[0x24BEDAB00]);
  }
  return mediaplatform::Data::Data(a1, (const mediaplatform::Data *)(v5 + 3));
}

void sub_20A7F11D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  int v16;

  if (a15 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  goto LABEL_6;
}

uint64_t mlcore::ModelProperty<std::string>::compareCongruentPropertyValuesFromCaches(unint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  int v6;
  void *v7;
  int v8;
  void *v9;
  std::string::size_type size;
  std::string *v11;
  std::string::size_type v12;
  std::string *v13;
  size_t v14;
  unsigned int v15;
  unsigned int v16;
  std::string v18;
  std::string v19;

  mlcore::PropertyCacheBase<std::string,mediaplatform::Data>::valueForProperty(&v19, a2, a1);
  mlcore::PropertyCacheBase<std::string,mediaplatform::Data>::valueForProperty(&v18, a4, a3);
  v6 = SHIBYTE(v18.__r_.__value_.__r.__words[2]);
  v7 = (void *)v18.__r_.__value_.__r.__words[0];
  v8 = SHIBYTE(v19.__r_.__value_.__r.__words[2]);
  v9 = (void *)v19.__r_.__value_.__r.__words[0];
  if ((v19.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v19.__r_.__value_.__r.__words[2]);
  else
    size = v19.__r_.__value_.__l.__size_;
  if ((v19.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v11 = &v19;
  else
    v11 = (std::string *)v19.__r_.__value_.__r.__words[0];
  if ((v18.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v12 = HIBYTE(v18.__r_.__value_.__r.__words[2]);
  else
    v12 = v18.__r_.__value_.__l.__size_;
  if ((v18.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v13 = &v18;
  else
    v13 = (std::string *)v18.__r_.__value_.__r.__words[0];
  if (v12 >= size)
    v14 = size;
  else
    v14 = v12;
  v15 = memcmp(v11, v13, v14);
  if (v6 < 0)
  {
    operator delete(v7);
    if ((v8 & 0x80000000) == 0)
      goto LABEL_18;
  }
  else if ((v8 & 0x80000000) == 0)
  {
    goto LABEL_18;
  }
  operator delete(v9);
LABEL_18:
  v16 = v12 < size;
  if (size < v12)
    v16 = -1;
  if (v15)
    return v15;
  else
    return v16;
}

void sub_20A7F12E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t mlcore::ModelProperty<mediaplatform::Data>::compareCongruentPropertyValuesFromCaches(unint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  int v6;
  void *v7;
  int v8;
  size_t v9;
  unsigned int v10;
  BOOL v11;
  void (**v13)(mediaplatform::Data *__hidden);
  size_t v14;
  void *__s2;
  char v16;
  void (**v17)(mediaplatform::Data *__hidden);
  size_t v18;
  void *__s1;
  char v20;

  mlcore::PropertyCacheBase<mediaplatform::Data>::valueForProperty((mediaplatform::Data *)&v17, a2, a1);
  mlcore::PropertyCacheBase<mediaplatform::Data>::valueForProperty((mediaplatform::Data *)&v13, a4, a3);
  v6 = v18;
  v7 = __s2;
  v8 = v14;
  if (v18 >= v14)
    v9 = v14;
  else
    v9 = v18;
  v10 = memcmp(__s1, __s2, v9);
  v13 = &off_24C331510;
  if (v16)
    v11 = v7 == 0;
  else
    v11 = 1;
  if (!v11)
    MEMORY[0x20BD27AE4](v7, 0x1000C8077774924);
  v17 = &off_24C331510;
  if (v20 && __s1)
    MEMORY[0x20BD27AE4](__s1, 0x1000C8077774924);
  if (v10)
    return v10;
  else
    return (v6 - v8);
}

void sub_20A7F13E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18)
{
  if (a18)
  {
    if (a17)
      MEMORY[0x20BD27AE4](a17, 0x1000C8077774924);
  }
  _Unwind_Resume(exception_object);
}

uint64_t mlcore::ModelProperty<mediaplatform::Data>::propertyType()
{
  return 4;
}

_QWORD *std::__function::__func<mlcore::GetForeignPropertyBase(mlcore::ModelPropertyBase *,mlcore::ModelPropertyBase *,std::shared_ptr<mlcore::Predicate>)::$_0,std::allocator<mlcore::GetForeignPropertyBase(mlcore::ModelPropertyBase *,mlcore::ModelPropertyBase *,std::shared_ptr<mlcore::Predicate>)::$_0>,mlcore::ModelPropertyBase * ()(void)>::~__func(_QWORD *a1)
{
  *a1 = &off_24C33B610;
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 3));
  return a1;
}

void std::__function::__func<mlcore::GetForeignPropertyBase(mlcore::ModelPropertyBase *,mlcore::ModelPropertyBase *,std::shared_ptr<mlcore::Predicate>)::$_0,std::allocator<mlcore::GetForeignPropertyBase(mlcore::ModelPropertyBase *,mlcore::ModelPropertyBase *,std::shared_ptr<mlcore::Predicate>)::$_0>,mlcore::ModelPropertyBase * ()(void)>::~__func(_QWORD *a1)
{
  *a1 = &off_24C33B610;
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 3));
  JUMPOUT(0x20BD27AFCLL);
}

char *std::__function::__func<mlcore::GetForeignPropertyBase(mlcore::ModelPropertyBase *,mlcore::ModelPropertyBase *,std::shared_ptr<mlcore::Predicate>)::$_0,std::allocator<mlcore::GetForeignPropertyBase(mlcore::ModelPropertyBase *,mlcore::ModelPropertyBase *,std::shared_ptr<mlcore::Predicate>)::$_0>,mlcore::ModelPropertyBase * ()(void)>::__clone(uint64_t a1)
{
  char *result;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  result = (char *)operator new(0x28uLL);
  *(_QWORD *)result = &off_24C33B610;
  *(_OWORD *)(result + 8) = *(_OWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 32);
  *((_QWORD *)result + 3) = *(_QWORD *)(a1 + 24);
  *((_QWORD *)result + 4) = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

uint64_t std::__function::__func<mlcore::GetForeignPropertyBase(mlcore::ModelPropertyBase *,mlcore::ModelPropertyBase *,std::shared_ptr<mlcore::Predicate>)::$_0,std::allocator<mlcore::GetForeignPropertyBase(mlcore::ModelPropertyBase *,mlcore::ModelPropertyBase *,std::shared_ptr<mlcore::Predicate>)::$_0>,mlcore::ModelPropertyBase * ()(void)>::__clone(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  *(_QWORD *)a2 = &off_24C33B610;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 32);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(result + 24);
  *(_QWORD *)(a2 + 32) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

uint64_t std::__function::__func<mlcore::GetForeignPropertyBase(mlcore::ModelPropertyBase *,mlcore::ModelPropertyBase *,std::shared_ptr<mlcore::Predicate>)::$_0,std::allocator<mlcore::GetForeignPropertyBase(mlcore::ModelPropertyBase *,mlcore::ModelPropertyBase *,std::shared_ptr<mlcore::Predicate>)::$_0>,mlcore::ModelPropertyBase * ()(void)>::destroy(uint64_t a1)
{
  return std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100](a1 + 24);
}

uint64_t std::__function::__func<mlcore::GetForeignPropertyBase(mlcore::ModelPropertyBase *,mlcore::ModelPropertyBase *,std::shared_ptr<mlcore::Predicate>)::$_0,std::allocator<mlcore::GetForeignPropertyBase(mlcore::ModelPropertyBase *,mlcore::ModelPropertyBase *,std::shared_ptr<mlcore::Predicate>)::$_0>,mlcore::ModelPropertyBase * ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN6mlcore22GetForeignPropertyBaseEPNS_17ModelPropertyBaseES1_NSt3__110shared_ptrINS_9PredicateEEEE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<mlcore::GetForeignPropertyBase(mlcore::ModelPropertyBase *,mlcore::ModelPropertyBase *,std::shared_ptr<mlcore::Predicate>)::$_0,std::allocator<mlcore::GetForeignPropertyBase(mlcore::ModelPropertyBase *,mlcore::ModelPropertyBase *,std::shared_ptr<mlcore::Predicate>)::$_0>,mlcore::ModelPropertyBase * ()(void)>::target_type()
{
}

void mlcore::ItemKVSTable::~ItemKVSTable(mlcore::ItemKVSTable *this)
{
  *(_QWORD *)this = off_24C336050;
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)this + 240);
  *((_QWORD *)this + 24) = off_24C335D90;
  if (*((char *)this + 223) < 0)
    operator delete(*((void **)this + 25));
  *(_QWORD *)this = off_24C3354E8;
  *((_QWORD *)this + 18) = off_24C335D90;
  if (*((char *)this + 175) < 0)
    operator delete(*((void **)this + 19));
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)this + 80);
  if (*((char *)this + 79) < 0)
    operator delete(*((void **)this + 7));
  mediaplatform::DatabaseTableBase::~DatabaseTableBase((void **)this);
}

{
  *(_QWORD *)this = off_24C336050;
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)this + 240);
  *((_QWORD *)this + 24) = off_24C335D90;
  if (*((char *)this + 223) < 0)
    operator delete(*((void **)this + 25));
  *(_QWORD *)this = off_24C3354E8;
  *((_QWORD *)this + 18) = off_24C335D90;
  if (*((char *)this + 175) < 0)
    operator delete(*((void **)this + 19));
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)this + 80);
  if (*((char *)this + 79) < 0)
    operator delete(*((void **)this + 7));
  mediaplatform::DatabaseTableBase::~DatabaseTableBase((void **)this);
  JUMPOUT(0x20BD27AFCLL);
}

void mlcore::ItemKVSTable::persistentIDColumn(mlcore::ItemKVSTable *this@<X0>, uint64_t a2@<X8>)
{
  mlcore::MediaTable<long long,std::string>::mediaColumnAtIndex<0ul>(a2, (uint64_t)this);
}

void mlcore::ItemKVSTable::keyColumn(mlcore::ItemKVSTable *this@<X0>, uint64_t a2@<X8>)
{
  mlcore::MediaTable<long long,std::string>::mediaColumnAtIndex<1ul>(a2, (uint64_t)this);
}

void mlcore::PlaylistItem::~PlaylistItem(mlcore::PlaylistItem *this)
{
  *(_QWORD *)this = off_24C33A860;
  mlcore::PropertyCacheBase<long long,int,double,std::string,mediaplatform::Data>::~PropertyCacheBase((_QWORD *)this + 1);
}

{
  *(_QWORD *)this = off_24C33A860;
  mlcore::PropertyCacheBase<long long,int,double,std::string,mediaplatform::Data>::~PropertyCacheBase((_QWORD *)this + 1);
  JUMPOUT(0x20BD27AFCLL);
}

double std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::TypedEntityClass<mlcore::PlaylistItem>::sharedPointer(void)::{lambda(void)#1} &&>>()
{
  uint64_t v0;
  double result;

  v0 = operator new();
  result = 0.0;
  *(_OWORD *)(v0 + 16) = 0u;
  *(_OWORD *)(v0 + 32) = 0u;
  *(_OWORD *)(v0 + 48) = 0u;
  *(_OWORD *)(v0 + 64) = 0u;
  *(_OWORD *)(v0 + 80) = 0u;
  *(_QWORD *)(v0 + 96) = 0;
  *(_DWORD *)(v0 + 104) = 1065353216;
  *(_OWORD *)(v0 + 112) = 0u;
  *(_OWORD *)(v0 + 128) = 0u;
  *(_DWORD *)(v0 + 144) = 1065353216;
  *(_QWORD *)v0 = &off_24C3385B8;
  *(_QWORD *)(v0 + 8) = 850045863;
  mlcore::TypedEntityClass<mlcore::PlaylistItem>::sharedPointer(void)::__sharedPointer = v0;
  return result;
}

void mlcore::TypedEntityClass<mlcore::PlaylistItem>::~TypedEntityClass(mlcore::EntityClass *a1)
{
  mlcore::EntityClass::~EntityClass(a1);
  JUMPOUT(0x20BD27AFCLL);
}

uint64_t mlcore::TypedEntityClass<mlcore::PlaylistItem>::description(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
}

double mlcore::TypedEntityClass<mlcore::PlaylistItem>::create@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, _OWORD *a4@<X8>)
{
  double v8;
  unint64_t *v9;
  uint64_t v10;
  double result;
  double v12[3];
  unint64_t v13[3];
  unint64_t *v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  std::allocate_shared[abi:ne180100]<mlcore::PlaylistItem,std::allocator<mlcore::PlaylistItem>,long long &,void>(v12, a2);
  v8 = v12[0];
  v13[0] = (unint64_t)&off_24C33B140;
  v14 = v13;
  mlcore::PropertyCache::mergePropertiesFromCache(*(_QWORD *)&v12[0] + 8, a3, (uint64_t)v13);
  v9 = v14;
  if (v14 == v13)
  {
    v10 = 4;
    v9 = v13;
    goto LABEL_5;
  }
  if (v14)
  {
    v10 = 5;
LABEL_5:
    (*(void (**)(void))(*v9 + 8 * v10))();
  }
  v13[0] = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 112))(a1);
  std::__hash_table<std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>,std::__unordered_map_hasher<mlcore::ModelProperty<long long> *,std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>,std::hash<mlcore::ModelProperty<long long> *>,std::equal_to<mlcore::ModelProperty<long long> *>,true>,std::__unordered_map_equal<mlcore::ModelProperty<long long> *,std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>,std::equal_to<mlcore::ModelProperty<long long> *>,std::hash<mlcore::ModelProperty<long long> *>,true>,std::allocator<std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>>>::__emplace_unique_key_args<mlcore::ModelProperty<long long> *,std::piecewise_construct_t const&,std::tuple<mlcore::ModelProperty<long long> * const&>,std::tuple<>>(*(_QWORD *)&v8 + 176, v13[0], v13)[3] = a2;
  result = v12[0];
  *a4 = *(_OWORD *)v12;
  return result;
}

void sub_20A7F18CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15)
{
  char *v15;
  char *v17;
  uint64_t v18;

  v17 = a15;
  if (a15 == v15)
  {
    v18 = 4;
    v17 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v18 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v17 + 8 * v18))();
LABEL_6:
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t mlcore::TypedEntityClass<mlcore::PlaylistItem>::name(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
}

BOOL mlcore::TypedEntityClass<mlcore::PlaylistItem>::isRevisionTrackable(uint64_t a1)
{
  return (*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1) != -1;
}

uint64_t mlcore::TypedEntityClass<mlcore::PlaylistItem>::isCloudUpdatable()
{
  return 0;
}

void mlcore::TypedEntityClass<mlcore::PlaylistItem>::databaseTablesToDeleteFrom(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

void mlcore::TypedEntityClass<mlcore::PlaylistItem>::databaseTablesToInsertInto(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

uint64_t mlcore::TypedEntityClass<mlcore::PlaylistItem>::representativeItemPersistentIDProperty()
{
  return 0;
}

uint64_t mlcore::TypedEntityClass<mlcore::PlaylistItem>::trackForeignPersistentIDProperty()
{
  return 0;
}

uint64_t mlcore::TypedEntityClass<mlcore::PlaylistItem>::trackForeignOrderingProperty()
{
  return 0;
}

uint64_t mlcore::TypedEntityClass<mlcore::PlaylistItem>::sectionPropertyForOrderingProperty()
{
  return 0;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::PlaylistItemPropertyPersistentID(void)::$_0 &&>>()
{
  uint64_t v0;
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  mlcore::ContainerItemTable **v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  std::string *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  std::string *v19;
  __int128 v20;
  std::string v21;
  std::string __p;
  char v23;
  _QWORD v24[2];

  v0 = operator new();
  v1 = (_QWORD *)mediaplatform::Singleton<mlcore::ContainerItemTable>::sharedInstance();
  v2 = (std::__shared_weak_count *)v1[1];
  v24[0] = *v1;
  v24[1] = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  v5 = (mlcore::ContainerItemTable **)mediaplatform::Singleton<mlcore::ContainerItemTable>::sharedInstance();
  mlcore::ContainerItemTable::persistentIDColumn(*v5, (uint64_t)&__p);
  mlcore::DatabaseModelProperty<long long>::DatabaseModelProperty(v0, v24, (uint64_t)&__p);
  mlcore::PlaylistItemPropertyPersistentID(void)::property = v0;
  if (v23 < 0)
    operator delete((void *)__p.__r_.__value_.__l.__size_);
  if (v2)
  {
    v6 = (unint64_t *)&v2->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v8 = mlcore::PlaylistItemPropertyPersistentID(void)::property;
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  std::string::operator=((std::string *)(v8 + 40), &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v9 = mlcore::TypedEntityClass<mlcore::PlaylistItem>::sharedPointer();
  v10 = mlcore::PlaylistItemPropertyPersistentID(void)::property;
  v11 = mediaplatform::Singleton<mlcore::ContainerItemTable>::sharedInstance();
  v12 = *(_QWORD *)v11;
  if (*(char *)(*(_QWORD *)v11 + 31) >= 0)
    v13 = *(unsigned __int8 *)(*(_QWORD *)v11 + 31);
  else
    v13 = *(_QWORD *)(*(_QWORD *)v11 + 16);
  v14 = &v21;
  std::string::basic_string[abi:ne180100]((uint64_t)&v21, v13 + 1);
  if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v14 = (std::string *)v21.__r_.__value_.__r.__words[0];
  if (v13)
  {
    v17 = *(char **)(v12 + 8);
    v16 = (char *)(v12 + 8);
    v15 = v17;
    if (v16[23] >= 0)
      v18 = v16;
    else
      v18 = v15;
    memmove(v14, v18, v13);
  }
  *(_WORD *)((char *)&v14->__r_.__value_.__l.__data_ + v13) = 46;
  v19 = std::string::append(&v21, "persistentID");
  v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  __p.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  mlcore::EntityClass::setPropertyForName(v9, v10, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
}

void sub_20A7F1B64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

mlcore::ContainerItemTable *_ZNSt3__115allocate_sharedB8ne180100IN6mlcore18ContainerItemTableENS_9allocatorIS2_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(mlcore::ContainerItemTable **a1)
{
  _QWORD *v2;
  mlcore::ContainerItemTable *result;

  v2 = operator new(0x368uLL);
  v2[1] = 0;
  v2[2] = 0;
  *v2 = &off_24C33CDA8;
  result = mlcore::ContainerItemTable::ContainerItemTable((mlcore::ContainerItemTable *)(v2 + 3));
  *a1 = result;
  a1[1] = (mlcore::ContainerItemTable *)v2;
  return result;
}

void sub_20A7F1C60(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<mlcore::ContainerItemTable>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C33CDA8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<mlcore::ContainerItemTable>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C33CDA8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x20BD27AFCLL);
}

uint64_t std::__shared_ptr_emplace<mlcore::ContainerItemTable>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

char *std::allocate_shared[abi:ne180100]<mlcore::PlaylistItem,std::allocator<mlcore::PlaylistItem>,long long &,void>(_QWORD *a1, uint64_t a2)
{
  char *v4;
  char *result;

  v4 = (char *)operator new(0x100uLL);
  *((_QWORD *)v4 + 1) = 0;
  *((_QWORD *)v4 + 2) = 0;
  *(_QWORD *)v4 = &off_24C33C670;
  *(_OWORD *)(v4 + 40) = 0u;
  *(_OWORD *)(v4 + 56) = 0u;
  *((_DWORD *)v4 + 18) = 1065353216;
  *((_OWORD *)v4 + 5) = 0u;
  *((_OWORD *)v4 + 6) = 0u;
  *((_DWORD *)v4 + 28) = 1065353216;
  *(_OWORD *)(v4 + 120) = 0u;
  *(_OWORD *)(v4 + 136) = 0u;
  *((_DWORD *)v4 + 38) = 1065353216;
  *((_OWORD *)v4 + 10) = 0u;
  *((_OWORD *)v4 + 11) = 0u;
  *((_DWORD *)v4 + 48) = 1065353216;
  *(_OWORD *)(v4 + 200) = 0u;
  *(_OWORD *)(v4 + 216) = 0u;
  *((_DWORD *)v4 + 58) = 1065353216;
  *((_QWORD *)v4 + 4) = &off_24C3371C0;
  *((_QWORD *)v4 + 30) = &unk_24C3371E8;
  *((_QWORD *)v4 + 31) = a2;
  a1[1] = v4;
  *((_QWORD *)v4 + 3) = &off_24C336EE8;
  result = v4 + 24;
  *a1 = result;
  return result;
}

void std::__shared_ptr_emplace<mlcore::PlaylistItem>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C33C670;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<mlcore::PlaylistItem>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C33C670;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x20BD27AFCLL);
}

uint64_t std::__shared_ptr_emplace<mlcore::PlaylistItem>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::PlaylistItemPropertyContainerPersistentID(void)::$_0 &&>>()
{
  uint64_t v0;
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  mlcore::ContainerItemTable **v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  std::string *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  std::string *v19;
  __int128 v20;
  std::string v21;
  std::string __p;
  char v23;
  _QWORD v24[2];

  v0 = operator new();
  v1 = (_QWORD *)mediaplatform::Singleton<mlcore::ContainerItemTable>::sharedInstance();
  v2 = (std::__shared_weak_count *)v1[1];
  v24[0] = *v1;
  v24[1] = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  v5 = (mlcore::ContainerItemTable **)mediaplatform::Singleton<mlcore::ContainerItemTable>::sharedInstance();
  mlcore::ContainerItemTable::containerPIDColumn(*v5, (uint64_t)&__p);
  mlcore::DatabaseModelProperty<long long>::DatabaseModelProperty(v0, v24, (uint64_t)&__p);
  mlcore::PlaylistItemPropertyContainerPersistentID(void)::property = v0;
  if (v23 < 0)
    operator delete((void *)__p.__r_.__value_.__l.__size_);
  if (v2)
  {
    v6 = (unint64_t *)&v2->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v8 = mlcore::PlaylistItemPropertyContainerPersistentID(void)::property;
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  std::string::operator=((std::string *)(v8 + 40), &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v9 = mlcore::TypedEntityClass<mlcore::PlaylistItem>::sharedPointer();
  v10 = mlcore::PlaylistItemPropertyContainerPersistentID(void)::property;
  v11 = mediaplatform::Singleton<mlcore::ContainerItemTable>::sharedInstance();
  v12 = *(_QWORD *)v11;
  if (*(char *)(*(_QWORD *)v11 + 31) >= 0)
    v13 = *(unsigned __int8 *)(*(_QWORD *)v11 + 31);
  else
    v13 = *(_QWORD *)(*(_QWORD *)v11 + 16);
  v14 = &v21;
  std::string::basic_string[abi:ne180100]((uint64_t)&v21, v13 + 1);
  if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v14 = (std::string *)v21.__r_.__value_.__r.__words[0];
  if (v13)
  {
    v17 = *(char **)(v12 + 8);
    v16 = (char *)(v12 + 8);
    v15 = v17;
    if (v16[23] >= 0)
      v18 = v16;
    else
      v18 = v15;
    memmove(v14, v18, v13);
  }
  *(_WORD *)((char *)&v14->__r_.__value_.__l.__data_ + v13) = 46;
  v19 = std::string::append(&v21, "containerPID");
  v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  __p.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  mlcore::EntityClass::setPropertyForName(v9, v10, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
}

void sub_20A7F1F88(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::PlaylistItemPropertyItemPersistentID(void)::$_0 &&>>()
{
  uint64_t v0;
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  mlcore::ContainerItemTable **v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  std::string *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  std::string *v19;
  __int128 v20;
  std::string v21;
  std::string __p;
  char v23;
  _QWORD v24[2];

  v0 = operator new();
  v1 = (_QWORD *)mediaplatform::Singleton<mlcore::ContainerItemTable>::sharedInstance();
  v2 = (std::__shared_weak_count *)v1[1];
  v24[0] = *v1;
  v24[1] = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  v5 = (mlcore::ContainerItemTable **)mediaplatform::Singleton<mlcore::ContainerItemTable>::sharedInstance();
  mlcore::ContainerItemTable::itemPIDColumn(*v5, (uint64_t)&__p);
  mlcore::DatabaseModelProperty<long long>::DatabaseModelProperty(v0, v24, (uint64_t)&__p);
  mlcore::PlaylistItemPropertyItemPersistentID(void)::property = v0;
  if (v23 < 0)
    operator delete((void *)__p.__r_.__value_.__l.__size_);
  if (v2)
  {
    v6 = (unint64_t *)&v2->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v8 = mlcore::PlaylistItemPropertyItemPersistentID(void)::property;
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  std::string::operator=((std::string *)(v8 + 40), &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v9 = mlcore::TypedEntityClass<mlcore::PlaylistItem>::sharedPointer();
  v10 = mlcore::PlaylistItemPropertyItemPersistentID(void)::property;
  v11 = mediaplatform::Singleton<mlcore::ContainerItemTable>::sharedInstance();
  v12 = *(_QWORD *)v11;
  if (*(char *)(*(_QWORD *)v11 + 31) >= 0)
    v13 = *(unsigned __int8 *)(*(_QWORD *)v11 + 31);
  else
    v13 = *(_QWORD *)(*(_QWORD *)v11 + 16);
  v14 = &v21;
  std::string::basic_string[abi:ne180100]((uint64_t)&v21, v13 + 1);
  if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v14 = (std::string *)v21.__r_.__value_.__r.__words[0];
  if (v13)
  {
    v17 = *(char **)(v12 + 8);
    v16 = (char *)(v12 + 8);
    v15 = v17;
    if (v16[23] >= 0)
      v18 = v16;
    else
      v18 = v15;
    memmove(v14, v18, v13);
  }
  *(_WORD *)((char *)&v14->__r_.__value_.__l.__data_ + v13) = 46;
  v19 = std::string::append(&v21, "itemPID");
  v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  __p.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  mlcore::EntityClass::setPropertyForName(v9, v10, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
}

void sub_20A7F2218(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::PlaylistItemPropertyPosition(void)::$_0 &&>>()
{
  uint64_t v0;
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  mlcore::ContainerItemTable **v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  std::string *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  std::string *v19;
  __int128 v20;
  std::string v21;
  std::string __p;
  char v23;
  _QWORD v24[2];

  v0 = operator new();
  v1 = (_QWORD *)mediaplatform::Singleton<mlcore::ContainerItemTable>::sharedInstance();
  v2 = (std::__shared_weak_count *)v1[1];
  v24[0] = *v1;
  v24[1] = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  v5 = (mlcore::ContainerItemTable **)mediaplatform::Singleton<mlcore::ContainerItemTable>::sharedInstance();
  mlcore::ContainerItemTable::positionColumn(*v5, (uint64_t)&__p);
  mlcore::DatabaseModelProperty<long long>::DatabaseModelProperty(v0, v24, (uint64_t)&__p);
  mlcore::PlaylistItemPropertyPosition(void)::property = v0;
  if (v23 < 0)
    operator delete((void *)__p.__r_.__value_.__l.__size_);
  if (v2)
  {
    v6 = (unint64_t *)&v2->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v8 = mlcore::PlaylistItemPropertyPosition(void)::property;
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  std::string::operator=((std::string *)(v8 + 40), &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v9 = mlcore::TypedEntityClass<mlcore::PlaylistItem>::sharedPointer();
  v10 = mlcore::PlaylistItemPropertyPosition(void)::property;
  v11 = mediaplatform::Singleton<mlcore::ContainerItemTable>::sharedInstance();
  v12 = *(_QWORD *)v11;
  if (*(char *)(*(_QWORD *)v11 + 31) >= 0)
    v13 = *(unsigned __int8 *)(*(_QWORD *)v11 + 31);
  else
    v13 = *(_QWORD *)(*(_QWORD *)v11 + 16);
  v14 = &v21;
  std::string::basic_string[abi:ne180100]((uint64_t)&v21, v13 + 1);
  if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v14 = (std::string *)v21.__r_.__value_.__r.__words[0];
  if (v13)
  {
    v17 = *(char **)(v12 + 8);
    v16 = (char *)(v12 + 8);
    v15 = v17;
    if (v16[23] >= 0)
      v18 = v16;
    else
      v18 = v15;
    memmove(v14, v18, v13);
  }
  *(_WORD *)((char *)&v14->__r_.__value_.__l.__data_ + v13) = 46;
  v19 = std::string::append(&v21, "position");
  v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  __p.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  mlcore::EntityClass::setPropertyForName(v9, v10, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
}

void sub_20A7F24A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::PlaylistItemPropertyUUID(void)::$_0 &&>>()
{
  uint64_t v0;
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  mlcore::ContainerItemTable **v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  std::string *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  std::string *v19;
  __int128 v20;
  std::string v21;
  std::string __str;
  _QWORD v23[2];

  v0 = operator new();
  v1 = (_QWORD *)mediaplatform::Singleton<mlcore::ContainerItemTable>::sharedInstance();
  v2 = (std::__shared_weak_count *)v1[1];
  v23[0] = *v1;
  v23[1] = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  v5 = (mlcore::ContainerItemTable **)mediaplatform::Singleton<mlcore::ContainerItemTable>::sharedInstance();
  mlcore::ContainerItemTable::UUIDColumn(*v5, (uint64_t)&__str);
  mlcore::DatabaseModelProperty<std::string>::DatabaseModelProperty(v0, v23, (uint64_t)&__str);
  mlcore::PlaylistItemPropertyUUID(void)::property = v0;
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&__str);
  if (v2)
  {
    v6 = (unint64_t *)&v2->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v8 = mlcore::PlaylistItemPropertyUUID(void)::property;
  std::string::basic_string[abi:ne180100]<0>(&__str, "");
  std::string::operator=((std::string *)(v8 + 40), &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  v9 = mlcore::TypedEntityClass<mlcore::PlaylistItem>::sharedPointer();
  v10 = mlcore::PlaylistItemPropertyUUID(void)::property;
  v11 = mediaplatform::Singleton<mlcore::ContainerItemTable>::sharedInstance();
  v12 = *(_QWORD *)v11;
  if (*(char *)(*(_QWORD *)v11 + 31) >= 0)
    v13 = *(unsigned __int8 *)(*(_QWORD *)v11 + 31);
  else
    v13 = *(_QWORD *)(*(_QWORD *)v11 + 16);
  v14 = &v21;
  std::string::basic_string[abi:ne180100]((uint64_t)&v21, v13 + 1);
  if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v14 = (std::string *)v21.__r_.__value_.__r.__words[0];
  if (v13)
  {
    v17 = *(char **)(v12 + 8);
    v16 = (char *)(v12 + 8);
    v15 = v17;
    if (v16[23] >= 0)
      v18 = v16;
    else
      v18 = v15;
    memmove(v14, v18, v13);
  }
  *(_WORD *)((char *)&v14->__r_.__value_.__l.__data_ + v13) = 46;
  v19 = std::string::append(&v21, "UUID");
  v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  __str.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  mlcore::EntityClass::setPropertyForName(v9, v10, &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
}

void sub_20A7F2730(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::PlaylistItemPropertyPositionUUID(void)::$_0 &&>>()
{
  uint64_t v0;
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  mlcore::ContainerItemTable **v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  std::string *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  std::string *v19;
  __int128 v20;
  std::string v21;
  std::string __str;
  _QWORD v23[2];

  v0 = operator new();
  v1 = (_QWORD *)mediaplatform::Singleton<mlcore::ContainerItemTable>::sharedInstance();
  v2 = (std::__shared_weak_count *)v1[1];
  v23[0] = *v1;
  v23[1] = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  v5 = (mlcore::ContainerItemTable **)mediaplatform::Singleton<mlcore::ContainerItemTable>::sharedInstance();
  mlcore::ContainerItemTable::positionUUIDColumn(*v5, (uint64_t)&__str);
  mlcore::DatabaseModelProperty<std::string>::DatabaseModelProperty(v0, v23, (uint64_t)&__str);
  mlcore::PlaylistItemPropertyPositionUUID(void)::property = v0;
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&__str);
  if (v2)
  {
    v6 = (unint64_t *)&v2->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v8 = mlcore::PlaylistItemPropertyPositionUUID(void)::property;
  std::string::basic_string[abi:ne180100]<0>(&__str, "");
  std::string::operator=((std::string *)(v8 + 40), &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  v9 = mlcore::TypedEntityClass<mlcore::PlaylistItem>::sharedPointer();
  v10 = mlcore::PlaylistItemPropertyPositionUUID(void)::property;
  v11 = mediaplatform::Singleton<mlcore::ContainerItemTable>::sharedInstance();
  v12 = *(_QWORD *)v11;
  if (*(char *)(*(_QWORD *)v11 + 31) >= 0)
    v13 = *(unsigned __int8 *)(*(_QWORD *)v11 + 31);
  else
    v13 = *(_QWORD *)(*(_QWORD *)v11 + 16);
  v14 = &v21;
  std::string::basic_string[abi:ne180100]((uint64_t)&v21, v13 + 1);
  if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v14 = (std::string *)v21.__r_.__value_.__r.__words[0];
  if (v13)
  {
    v17 = *(char **)(v12 + 8);
    v16 = (char *)(v12 + 8);
    v15 = v17;
    if (v16[23] >= 0)
      v18 = v16;
    else
      v18 = v15;
    memmove(v14, v18, v13);
  }
  *(_WORD *)((char *)&v14->__r_.__value_.__l.__data_ + v13) = 46;
  v19 = std::string::append(&v21, "positionUUID");
  v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  __str.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  mlcore::EntityClass::setPropertyForName(v9, v10, &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
}

void sub_20A7F29B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

uint64_t mlcore::PlaylistItemPropertyOccurrenceID(mlcore *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&mlcore::PlaylistItemPropertyOccurrenceID(void)::once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&mlcore::PlaylistItemPropertyOccurrenceID(void)::once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::PlaylistItemPropertyOccurrenceID(void)::$_0 &&>>);
  }
  return mlcore::PlaylistItemPropertyOccurrenceID(void)::property;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::PlaylistItemPropertyOccurrenceID(void)::$_0 &&>>()
{
  uint64_t v0;
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  mlcore::ContainerItemTable **v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  std::string *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  std::string *v19;
  __int128 v20;
  std::string v21;
  std::string __str;
  _QWORD v23[2];

  v0 = operator new();
  v1 = (_QWORD *)mediaplatform::Singleton<mlcore::ContainerItemTable>::sharedInstance();
  v2 = (std::__shared_weak_count *)v1[1];
  v23[0] = *v1;
  v23[1] = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  v5 = (mlcore::ContainerItemTable **)mediaplatform::Singleton<mlcore::ContainerItemTable>::sharedInstance();
  mlcore::ContainerItemTable::occurrenceIDColumn(*v5, (uint64_t)&__str);
  mlcore::DatabaseModelProperty<std::string>::DatabaseModelProperty(v0, v23, (uint64_t)&__str);
  mlcore::PlaylistItemPropertyOccurrenceID(void)::property = v0;
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&__str);
  if (v2)
  {
    v6 = (unint64_t *)&v2->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v8 = mlcore::PlaylistItemPropertyOccurrenceID(void)::property;
  std::string::basic_string[abi:ne180100]<0>(&__str, "");
  std::string::operator=((std::string *)(v8 + 40), &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  v9 = mlcore::TypedEntityClass<mlcore::PlaylistItem>::sharedPointer();
  v10 = mlcore::PlaylistItemPropertyOccurrenceID(void)::property;
  v11 = mediaplatform::Singleton<mlcore::ContainerItemTable>::sharedInstance();
  v12 = *(_QWORD *)v11;
  if (*(char *)(*(_QWORD *)v11 + 31) >= 0)
    v13 = *(unsigned __int8 *)(*(_QWORD *)v11 + 31);
  else
    v13 = *(_QWORD *)(*(_QWORD *)v11 + 16);
  v14 = &v21;
  std::string::basic_string[abi:ne180100]((uint64_t)&v21, v13 + 1);
  if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v14 = (std::string *)v21.__r_.__value_.__r.__words[0];
  if (v13)
  {
    v17 = *(char **)(v12 + 8);
    v16 = (char *)(v12 + 8);
    v15 = v17;
    if (v16[23] >= 0)
      v18 = v16;
    else
      v18 = v15;
    memmove(v14, v18, v13);
  }
  *(_WORD *)((char *)&v14->__r_.__value_.__l.__data_ + v13) = 46;
  v19 = std::string::append(&v21, "occurrenceID");
  v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  __str.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  mlcore::EntityClass::setPropertyForName(v9, v10, &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
}

void sub_20A7F2C8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

uint64_t mlcore::PlaylistItemPropertyTitle(mlcore *this)
{
  mlcore *v1;
  uint64_t v2;
  uint64_t v4[2];

  v1 = (mlcore *)mlcore::PlaylistItemPropertyItemPersistentID(this);
  v2 = mlcore::ItemPropertyTitle(v1);
  v4[0] = 0;
  v4[1] = 0;
  return mlcore::GetForeignProperty<std::string>((uint64_t)v1, v2, v4);
}

void sub_20A7F2D80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t mlcore::PlaylistItemPropertyArtistName(mlcore *this)
{
  mlcore *v1;
  uint64_t v2;
  uint64_t v4[2];

  v1 = (mlcore *)mlcore::PlaylistItemPropertyItemPersistentID(this);
  v2 = mlcore::ItemPropertyArtistName(v1);
  v4[0] = 0;
  v4[1] = 0;
  return mlcore::GetForeignProperty<std::string>((uint64_t)v1, v2, v4);
}

void sub_20A7F2DD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t mlcore::PlaylistItemPropertyItemArtistName(mlcore *this)
{
  mlcore *v1;
  uint64_t v2;
  uint64_t v4[2];

  v1 = (mlcore *)mlcore::PlaylistItemPropertyItemPersistentID(this);
  v2 = mlcore::ItemPropertyItemArtistName(v1);
  v4[0] = 0;
  v4[1] = 0;
  return mlcore::GetForeignProperty<std::string>((uint64_t)v1, v2, v4);
}

void sub_20A7F2E28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

double mlcore::PlaylistItem::PlaylistItem(mlcore::PlaylistItem *this, uint64_t a2)
{
  double result;

  result = 0.0;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_DWORD *)this + 12) = 1065353216;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *((_DWORD *)this + 22) = 1065353216;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_DWORD *)this + 32) = 1065353216;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 152) = 0u;
  *((_DWORD *)this + 42) = 1065353216;
  *((_OWORD *)this + 11) = 0u;
  *((_OWORD *)this + 12) = 0u;
  *((_DWORD *)this + 52) = 1065353216;
  *((_QWORD *)this + 27) = &unk_24C3371E8;
  *((_QWORD *)this + 28) = a2;
  *(_QWORD *)this = &off_24C336EE8;
  *((_QWORD *)this + 1) = &off_24C3371C0;
  return result;
}

{
  double result;

  result = 0.0;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_DWORD *)this + 12) = 1065353216;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *((_DWORD *)this + 22) = 1065353216;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_DWORD *)this + 32) = 1065353216;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 152) = 0u;
  *((_DWORD *)this + 42) = 1065353216;
  *((_OWORD *)this + 11) = 0u;
  *((_OWORD *)this + 12) = 0u;
  *((_DWORD *)this + 52) = 1065353216;
  *((_QWORD *)this + 27) = &unk_24C3371E8;
  *((_QWORD *)this + 28) = a2;
  *(_QWORD *)this = &off_24C336EE8;
  *((_QWORD *)this + 1) = &off_24C3371C0;
  return result;
}

mlcore::PlaylistItem *mlcore::PlaylistItem::PlaylistItem(mlcore::PlaylistItem *this, uint64_t a2, uint64_t a3, uint64_t a4)
{
  char *v8;
  mlcore *v9;
  mlcore *v10;
  unint64_t v12;

  *((_QWORD *)this + 1) = &off_24C3371C0;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_DWORD *)this + 12) = 1065353216;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *((_DWORD *)this + 22) = 1065353216;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_DWORD *)this + 32) = 1065353216;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 152) = 0u;
  *((_DWORD *)this + 42) = 1065353216;
  *((_OWORD *)this + 11) = 0u;
  v8 = (char *)this + 176;
  *((_OWORD *)this + 12) = 0u;
  *((_DWORD *)this + 52) = 1065353216;
  *((_QWORD *)this + 27) = &unk_24C3371E8;
  *((_QWORD *)this + 28) = 0;
  *(_QWORD *)this = &off_24C336EE8;
  v12 = mlcore::PlaylistItemPropertyContainerPersistentID(this);
  v9 = (mlcore *)std::__hash_table<std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>,std::__unordered_map_hasher<mlcore::ModelProperty<long long> *,std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>,std::hash<mlcore::ModelProperty<long long> *>,std::equal_to<mlcore::ModelProperty<long long> *>,true>,std::__unordered_map_equal<mlcore::ModelProperty<long long> *,std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>,std::equal_to<mlcore::ModelProperty<long long> *>,std::hash<mlcore::ModelProperty<long long> *>,true>,std::allocator<std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>>>::__emplace_unique_key_args<mlcore::ModelProperty<long long> *,std::piecewise_construct_t const&,std::tuple<mlcore::ModelProperty<long long> * const&>,std::tuple<>>((uint64_t)v8, v12, &v12);
  *((_QWORD *)v9 + 3) = a2;
  v12 = mlcore::PlaylistItemPropertyItemPersistentID(v9);
  v10 = (mlcore *)std::__hash_table<std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>,std::__unordered_map_hasher<mlcore::ModelProperty<long long> *,std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>,std::hash<mlcore::ModelProperty<long long> *>,std::equal_to<mlcore::ModelProperty<long long> *>,true>,std::__unordered_map_equal<mlcore::ModelProperty<long long> *,std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>,std::equal_to<mlcore::ModelProperty<long long> *>,std::hash<mlcore::ModelProperty<long long> *>,true>,std::allocator<std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>>>::__emplace_unique_key_args<mlcore::ModelProperty<long long> *,std::piecewise_construct_t const&,std::tuple<mlcore::ModelProperty<long long> * const&>,std::tuple<>>((uint64_t)v8, v12, &v12);
  *((_QWORD *)v10 + 3) = a3;
  v12 = mlcore::PlaylistItemPropertyPosition(v10);
  std::__hash_table<std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>,std::__unordered_map_hasher<mlcore::ModelProperty<long long> *,std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>,std::hash<mlcore::ModelProperty<long long> *>,std::equal_to<mlcore::ModelProperty<long long> *>,true>,std::__unordered_map_equal<mlcore::ModelProperty<long long> *,std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>,std::equal_to<mlcore::ModelProperty<long long> *>,std::hash<mlcore::ModelProperty<long long> *>,true>,std::allocator<std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>>>::__emplace_unique_key_args<mlcore::ModelProperty<long long> *,std::piecewise_construct_t const&,std::tuple<mlcore::ModelProperty<long long> * const&>,std::tuple<>>((uint64_t)v8, v12, &v12)[3] = a4;
  return this;
}

{
  char *v8;
  mlcore *v9;
  mlcore *v10;
  unint64_t v12;

  *((_QWORD *)this + 1) = &off_24C3371C0;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_DWORD *)this + 12) = 1065353216;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *((_DWORD *)this + 22) = 1065353216;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_DWORD *)this + 32) = 1065353216;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 152) = 0u;
  *((_DWORD *)this + 42) = 1065353216;
  *((_OWORD *)this + 11) = 0u;
  v8 = (char *)this + 176;
  *((_OWORD *)this + 12) = 0u;
  *((_DWORD *)this + 52) = 1065353216;
  *((_QWORD *)this + 27) = &unk_24C3371E8;
  *((_QWORD *)this + 28) = 0;
  *(_QWORD *)this = &off_24C336EE8;
  v12 = mlcore::PlaylistItemPropertyContainerPersistentID(this);
  v9 = (mlcore *)std::__hash_table<std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>,std::__unordered_map_hasher<mlcore::ModelProperty<long long> *,std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>,std::hash<mlcore::ModelProperty<long long> *>,std::equal_to<mlcore::ModelProperty<long long> *>,true>,std::__unordered_map_equal<mlcore::ModelProperty<long long> *,std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>,std::equal_to<mlcore::ModelProperty<long long> *>,std::hash<mlcore::ModelProperty<long long> *>,true>,std::allocator<std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>>>::__emplace_unique_key_args<mlcore::ModelProperty<long long> *,std::piecewise_construct_t const&,std::tuple<mlcore::ModelProperty<long long> * const&>,std::tuple<>>((uint64_t)v8, v12, &v12);
  *((_QWORD *)v9 + 3) = a2;
  v12 = mlcore::PlaylistItemPropertyItemPersistentID(v9);
  v10 = (mlcore *)std::__hash_table<std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>,std::__unordered_map_hasher<mlcore::ModelProperty<long long> *,std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>,std::hash<mlcore::ModelProperty<long long> *>,std::equal_to<mlcore::ModelProperty<long long> *>,true>,std::__unordered_map_equal<mlcore::ModelProperty<long long> *,std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>,std::equal_to<mlcore::ModelProperty<long long> *>,std::hash<mlcore::ModelProperty<long long> *>,true>,std::allocator<std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>>>::__emplace_unique_key_args<mlcore::ModelProperty<long long> *,std::piecewise_construct_t const&,std::tuple<mlcore::ModelProperty<long long> * const&>,std::tuple<>>((uint64_t)v8, v12, &v12);
  *((_QWORD *)v10 + 3) = a3;
  v12 = mlcore::PlaylistItemPropertyPosition(v10);
  std::__hash_table<std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>,std::__unordered_map_hasher<mlcore::ModelProperty<long long> *,std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>,std::hash<mlcore::ModelProperty<long long> *>,std::equal_to<mlcore::ModelProperty<long long> *>,true>,std::__unordered_map_equal<mlcore::ModelProperty<long long> *,std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>,std::equal_to<mlcore::ModelProperty<long long> *>,std::hash<mlcore::ModelProperty<long long> *>,true>,std::allocator<std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>>>::__emplace_unique_key_args<mlcore::ModelProperty<long long> *,std::piecewise_construct_t const&,std::tuple<mlcore::ModelProperty<long long> * const&>,std::tuple<>>((uint64_t)v8, v12, &v12)[3] = a4;
  return this;
}

void sub_20A7F2FE8(_Unwind_Exception *a1)
{
  _QWORD *v1;
  _QWORD *v2;

  *v1 = off_24C33A860;
  mlcore::PropertyCacheBase<long long,int,double,std::string,mediaplatform::Data>::~PropertyCacheBase(v2);
  _Unwind_Resume(a1);
}

void sub_20A7F3104(_Unwind_Exception *a1)
{
  _QWORD *v1;
  _QWORD *v2;

  *v1 = off_24C33A860;
  mlcore::PropertyCacheBase<long long,int,double,std::string,mediaplatform::Data>::~PropertyCacheBase(v2);
  _Unwind_Resume(a1);
}

uint64_t mlcore::PlaylistItem::playlistPersistentID(mlcore::PlaylistItem *this)
{
  unint64_t v2;

  v2 = mlcore::PlaylistItemPropertyContainerPersistentID(this);
  return mlcore::Entity::valueForProperty<long long>((uint64_t)this, v2);
}

_QWORD *mlcore::PlaylistItem::setPlaylistPersistentID(mlcore::PlaylistItem *this, uint64_t a2)
{
  _QWORD *result;
  unint64_t v5;

  v5 = mlcore::PlaylistItemPropertyContainerPersistentID(this);
  result = std::__hash_table<std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>,std::__unordered_map_hasher<mlcore::ModelProperty<long long> *,std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>,std::hash<mlcore::ModelProperty<long long> *>,std::equal_to<mlcore::ModelProperty<long long> *>,true>,std::__unordered_map_equal<mlcore::ModelProperty<long long> *,std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>,std::equal_to<mlcore::ModelProperty<long long> *>,std::hash<mlcore::ModelProperty<long long> *>,true>,std::allocator<std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>>>::__emplace_unique_key_args<mlcore::ModelProperty<long long> *,std::piecewise_construct_t const&,std::tuple<mlcore::ModelProperty<long long> * const&>,std::tuple<>>((uint64_t)this + 176, v5, &v5);
  result[3] = a2;
  return result;
}

uint64_t mlcore::PlaylistItem::itemPersistentID(mlcore::PlaylistItem *this)
{
  unint64_t v2;

  v2 = mlcore::PlaylistItemPropertyItemPersistentID(this);
  return mlcore::Entity::valueForProperty<long long>((uint64_t)this, v2);
}

_QWORD *mlcore::PlaylistItem::setItemPersistentID(mlcore::PlaylistItem *this, uint64_t a2)
{
  _QWORD *result;
  unint64_t v5;

  v5 = mlcore::PlaylistItemPropertyItemPersistentID(this);
  result = std::__hash_table<std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>,std::__unordered_map_hasher<mlcore::ModelProperty<long long> *,std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>,std::hash<mlcore::ModelProperty<long long> *>,std::equal_to<mlcore::ModelProperty<long long> *>,true>,std::__unordered_map_equal<mlcore::ModelProperty<long long> *,std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>,std::equal_to<mlcore::ModelProperty<long long> *>,std::hash<mlcore::ModelProperty<long long> *>,true>,std::allocator<std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>>>::__emplace_unique_key_args<mlcore::ModelProperty<long long> *,std::piecewise_construct_t const&,std::tuple<mlcore::ModelProperty<long long> * const&>,std::tuple<>>((uint64_t)this + 176, v5, &v5);
  result[3] = a2;
  return result;
}

uint64_t mlcore::PlaylistItem::position(mlcore::PlaylistItem *this)
{
  unint64_t v2;

  v2 = mlcore::PlaylistItemPropertyPosition(this);
  return mlcore::Entity::valueForProperty<long long>((uint64_t)this, v2);
}

_QWORD *mlcore::PlaylistItem::setPosition(mlcore::PlaylistItem *this, uint64_t a2)
{
  _QWORD *result;
  unint64_t v5;

  v5 = mlcore::PlaylistItemPropertyPosition(this);
  result = std::__hash_table<std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>,std::__unordered_map_hasher<mlcore::ModelProperty<long long> *,std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>,std::hash<mlcore::ModelProperty<long long> *>,std::equal_to<mlcore::ModelProperty<long long> *>,true>,std::__unordered_map_equal<mlcore::ModelProperty<long long> *,std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>,std::equal_to<mlcore::ModelProperty<long long> *>,std::hash<mlcore::ModelProperty<long long> *>,true>,std::allocator<std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>>>::__emplace_unique_key_args<mlcore::ModelProperty<long long> *,std::piecewise_construct_t const&,std::tuple<mlcore::ModelProperty<long long> * const&>,std::tuple<>>((uint64_t)this + 176, v5, &v5);
  result[3] = a2;
  return result;
}

void mlcore::PlaylistItem::UUID(mlcore::PlaylistItem *this@<X0>, std::string *a2@<X8>)
{
  unint64_t v4;

  v4 = mlcore::PlaylistItemPropertyUUID(this);
  mlcore::Entity::valueForProperty<std::string>(a2, (uint64_t)this, v4);
}

void mlcore::PlaylistItem::setUUID(mlcore *a1, uint64_t a2)
{
  std::string::size_type v4;

  v4 = mlcore::PlaylistItemPropertyUUID(a1);
  mlcore::Entity::setValueForProperty<std::string>((uint64_t)a1, a2, v4);
}

void mlcore::PlaylistItem::positionUUID(mlcore::PlaylistItem *this@<X0>, std::string *a2@<X8>)
{
  unint64_t v4;

  v4 = mlcore::PlaylistItemPropertyPositionUUID(this);
  mlcore::Entity::valueForProperty<std::string>(a2, (uint64_t)this, v4);
}

void mlcore::PlaylistItem::setPositionUUID(mlcore *a1, uint64_t a2)
{
  std::string::size_type v4;

  v4 = mlcore::PlaylistItemPropertyPositionUUID(a1);
  mlcore::Entity::setValueForProperty<std::string>((uint64_t)a1, a2, v4);
}

void mediaplatform::PropertyList::~PropertyList(const void **this)
{
  *this = &off_24C330CB0;
  mediaplatform::CFRetainedPointer<__CFDictionary *>::~CFRetainedPointer(this + 1);
}

{
  *this = &off_24C330CB0;
  mediaplatform::CFRetainedPointer<__CFDictionary *>::~CFRetainedPointer(this + 1);
  JUMPOUT(0x20BD27AFCLL);
}

const void **mediaplatform::PropertyList::descriptionAttributes@<X0>(CFTypeRef *this@<X0>, std::string **a2@<X8>)
{
  CFStringRef v3;
  const __CFString *v4;
  CFIndex Length;
  CFIndex MaximumSizeForEncoding;
  CFIndex v7;
  void *v8;
  std::string *v9;
  CFStringRef v11;
  __int128 v12;
  uint64_t v13;
  void *__p[2];
  uint64_t v15;
  __int128 v16;

  *(_QWORD *)&v16 = *MEMORY[0x24BDAC8D0];
  v3 = CFCopyDescription(this[1]);
  v11 = v3;
  if (v3)
  {
    v4 = v3;
    v12 = 0uLL;
    v13 = 0;
    Length = CFStringGetLength(v3);
    MaximumSizeForEncoding = CFStringGetMaximumSizeForEncoding(Length, 0x8000100u);
    if ((MaximumSizeForEncoding & 0x8000000000000000) == 0)
    {
      v7 = MaximumSizeForEncoding + 1;
      v8 = malloc_type_malloc(MaximumSizeForEncoding + 1, 0x1DE48D06uLL);
      if (CFStringGetCString(v4, (char *)v8, v7, 0x8000100u))
      {
        MEMORY[0x20BD277A8](&v12, v8);
        free(v8);
        *(_OWORD *)__p = v12;
        v15 = v13;
        goto LABEL_8;
      }
      free(v8);
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "(invalid)");
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "(null)");
  }
LABEL_8:
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  *(_QWORD *)&v12 = a2;
  BYTE8(v12) = 0;
  v9 = (std::string *)operator new(0x18uLL);
  *a2 = v9;
  a2[1] = v9;
  a2[2] = v9 + 1;
  a2[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)(a2 + 2), (__int128 *)__p, &v16, v9);
  if (SHIBYTE(v15) < 0)
    operator delete(__p[0]);
  return mediaplatform::CFRetainedPointer<__CFString const*>::~CFRetainedPointer((const void **)&v11);
}

void sub_20A7F3504(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  mediaplatform::CFRetainedPointer<__CFString const*>::~CFRetainedPointer((const void **)&a9);
  _Unwind_Resume(a1);
}

const void **mediaplatform::CFRetainedPointer<__CFString const*>::~CFRetainedPointer(const void **a1)
{
  const void *v2;

  v2 = *a1;
  if (v2)
    CFRelease(v2);
  return a1;
}

const void **mediaplatform::CFRetainedPointer<__CFDictionary *>::~CFRetainedPointer(const void **a1)
{
  const void *v2;

  v2 = *a1;
  if (v2)
    CFRelease(v2);
  return a1;
}

mediaplatform::PropertyList *mediaplatform::PropertyList::PropertyList(mediaplatform::PropertyList *this, const mediaplatform::FilePath *a2)
{
  const void **v3;
  const void *v5[3];
  uint64_t v6;
  char v7;

  *(_QWORD *)this = &off_24C330CB0;
  *((_QWORD *)this + 1) = 0;
  v3 = (const void **)((char *)this + 8);
  if (*((_QWORD *)a2 + 2) == *((_QWORD *)a2 + 1))
  {
    v5[0] = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
    mediaplatform::CFRetainedPointer<__CFDictionary *>::operator=(v3, v5[0]);
    mediaplatform::CFRetainedPointer<__CFDictionary *>::~CFRetainedPointer(v5);
  }
  else
  {
    mediaplatform::Data::Data((mediaplatform::Data *)v5, a2);
    mediaplatform::PropertyList::_initializeDictionary((const void **)this, (const mediaplatform::Data *)v5);
    v5[0] = &off_24C331510;
    if (v7 && v6)
      MEMORY[0x20BD27AE4](v6, 0x1000C8077774924);
  }
  return this;
}

void sub_20A7F3684(_Unwind_Exception *a1, uint64_t a2, ...)
{
  const void **v2;
  va_list va;

  va_start(va, a2);
  mediaplatform::CFRetainedPointer<__CFDictionary *>::~CFRetainedPointer((const void **)va);
  mediaplatform::CFRetainedPointer<__CFDictionary *>::~CFRetainedPointer(v2);
  _Unwind_Resume(a1);
}

const void **mediaplatform::PropertyList::_initializeDictionary(const void **this, const mediaplatform::Data *a2)
{
  CFDataRef v3;
  CFTypeRef v4;
  mediaplatform::PlatformErrorCondition *exception;
  int v7;
  CFTypeRef cf[8];
  std::string v9;
  const void *v10;
  const void *v11;
  CFDataRef v12;

  v3 = CFDataCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], *((const UInt8 **)a2 + 3), *((_QWORD *)a2 + 1));
  v11 = 0;
  v12 = v3;
  mediaplatform::CFPropertyListFromData(v3, 1uLL, &v11, (const void ***)cf);
  v4 = cf[0];
  if (!cf[0])
  {
    v10 = 0;
    mediaplatform::CFRetainedPointer<void const*>::~CFRetainedPointer(cf);
    mediaplatform::FormatString<mediaplatform::CFRetainedPointer<__CFError *>>(&v9);
    v7 = 3;
    mediaplatform::PlatformErrorCondition::PlatformErrorCondition((uint64_t)cf, &v7, (__int128 *)&v9);
    exception = (mediaplatform::PlatformErrorCondition *)__cxa_allocate_exception(0x40uLL);
    mediaplatform::PlatformErrorCondition::PlatformErrorCondition(exception, (const mediaplatform::PlatformErrorCondition *)cf);
  }
  CFRetain(cf[0]);
  v10 = v4;
  mediaplatform::CFRetainedPointer<void const*>::~CFRetainedPointer(cf);
  mediaplatform::CFRetainedPointer<__CFDictionary *>::operator=(this + 1, v10);
  mediaplatform::CFRetainedPointer<__CFDictionary *>::~CFRetainedPointer(&v10);
  mediaplatform::CFRetainedPointer<__CFError *>::~CFRetainedPointer(&v11);
  return mediaplatform::CFRetainedPointer<__CFData const*>::~CFRetainedPointer((const void **)&v12);
}

void sub_20A7F37D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::exception a11)
{
  uint64_t v11;

  mediaplatform::PlatformErrorCondition::~PlatformErrorCondition(&a11);
  if (*(char *)(v11 - 41) < 0)
    operator delete(*(void **)(v11 - 64));
  mediaplatform::CFRetainedPointer<__CFDictionary *>::~CFRetainedPointer((const void **)(v11 - 40));
  mediaplatform::CFRetainedPointer<__CFError *>::~CFRetainedPointer((const void **)(v11 - 32));
  mediaplatform::CFRetainedPointer<__CFData const*>::~CFRetainedPointer((const void **)(v11 - 24));
  _Unwind_Resume(a1);
}

const void **mediaplatform::CFRetainedPointer<__CFDictionary *>::operator=(const void **a1, CFTypeRef cf)
{
  const void *v4;

  if (cf)
    CFRetain(cf);
  v4 = *a1;
  *a1 = cf;
  if (v4)
    CFRelease(v4);
  return a1;
}

const void **mediaplatform::CFRetainedPointer<void const*>::~CFRetainedPointer(const void **a1)
{
  const void *v2;

  v2 = *a1;
  if (v2)
    CFRelease(v2);
  return a1;
}

void mediaplatform::FormatString<mediaplatform::CFRetainedPointer<__CFError *>>(std::string *a1)
{
  a1->__r_.__value_.__r.__words[0] = 0;
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  mediaplatform::FormatImplementation<mediaplatform::CFRetainedPointer<__CFError *>>((std::string *)"Failed to parse plist data: {1}", a1, 0);
}

void sub_20A7F38F4(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

const void **mediaplatform::CFRetainedPointer<__CFError *>::~CFRetainedPointer(const void **a1)
{
  const void *v2;

  v2 = *a1;
  if (v2)
    CFRelease(v2);
  return a1;
}

const void **mediaplatform::CFRetainedPointer<__CFData const*>::~CFRetainedPointer(const void **a1)
{
  const void *v2;

  v2 = *a1;
  if (v2)
    CFRelease(v2);
  return a1;
}

void mediaplatform::FormatImplementation<mediaplatform::CFRetainedPointer<__CFError *>>(std::string *a1, std::string *a2, std::string::size_type a3)
{
  char v6;
  char *v7;
  std::string::size_type i;
  int v9;
  char *v10;
  size_t v11;
  size_t v12;
  std::string *v13;
  _BYTE *v14;
  size_t v15;
  unsigned __int8 v16;
  size_t v17;
  size_t v18;
  size_t v19;
  unint64_t v20;
  size_t v21;
  const void *v22;
  char *v23;
  const void *v24;
  size_t v25;
  unint64_t v26;
  uint64_t v27;
  size_t v28;
  const void *p_p;
  unint64_t v30;
  _BYTE *v31;
  uint64_t v32;
  int v34;
  uint64_t v35;
  char *v36;
  char *v37;
  unsigned __int8 *v38;
  int v39;
  std::runtime_error *exception;
  int v41;
  uint64_t v42;
  char v43;
  size_t v44;
  char v45;
  char *v46;
  void *__p;
  size_t v48;
  unsigned __int8 v49;

  v6 = 0;
  v7 = (char *)a1;
  for (i = a3; ; ++i)
  {
    v46 = v7;
    if (*v7 == 123)
      break;
    if (!*v7)
    {
      std::string::resize(a2, i, 0);
      if (i != a3)
        mediaplatform::CopyFormatSectionToResult(a1, a2, a3, i - a3, v6 & 1);
      return;
    }
LABEL_7:
    ++v7;
  }
  v9 = v7[1];
  if (v9 == 123)
  {
    v46 = v7 + 1;
    v6 = 1;
    ++v7;
    goto LABEL_7;
  }
  if (v9 == 42)
  {
    v46 = v7 + 2;
    v34 = v7[2];
    if ((v34 - 48) > 9)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Invalid format string- missing numeric value.");
    }
    else
    {
      v35 = 0;
      v36 = v7 + 3;
      do
      {
        v37 = v36;
        v46 = v36;
        v35 = (v34 - 48) + 10 * v35;
        ++v36;
        v39 = *v37;
        v38 = (unsigned __int8 *)(v37 - 1);
        v34 = v39;
      }
      while ((v39 - 58) >= 0xFFFFFFF6);
      v46 = (char *)(v38 + 2);
      if (*(v36 - 1) == 125)
        mediaplatform::FormatterParameters<0ul,mediaplatform::CFRetainedPointer<__CFError *>>::formatOptionsAtIndex<mediaplatform::CFRetainedPointer<__CFError *>>(v35);
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Invalid format options reference: Must be of form {*<index>} but no trailing '}' found.");
    }
    __cxa_throw(exception, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
  }
  mediaplatform::FormatOptions::FormatOptions((uint64_t)&v41, (const char **)&v46);
  if (v42)
    mediaplatform::FormatterParameters<1ul>::formatParameterAtIndex<mediaplatform::FormatterParameters<0ul,mediaplatform::CFRetainedPointer<__CFError *>>>();
  v10 = v46;
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  v11 = v49;
  if ((v49 & 0x80u) != 0)
    v11 = v48;
  v12 = v44;
  if (v44 <= v11)
    v12 = v11;
  if (v43)
    v11 = v12;
  mediaplatform::FormatImplementation<mediaplatform::CFRetainedPointer<__CFError *>>(v10, a2, v11 + i);
  if ((a2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v13 = a2;
  else
    v13 = (std::string *)a2->__r_.__value_.__r.__words[0];
  v14 = (char *)v13 + i;
  v15 = v49;
  v16 = v49;
  v17 = v48;
  if ((v49 & 0x80u) == 0)
    v18 = v49;
  else
    v18 = v48;
  if (v43 && (v19 = v44, v20 = v44 - v18, v44 > v18))
  {
    if (v41)
    {
      if (v41 == 1)
      {
        v26 = v20 >> 1;
        if (v20 >= 2)
        {
          if (v26 <= 1)
            v27 = 1;
          else
            v27 = v20 >> 1;
          do
          {
            *v14++ = v45;
            --v27;
          }
          while (v27);
          v15 = v49;
          v17 = v48;
          v16 = v49;
        }
        if ((v16 & 0x80u) == 0)
          v28 = v15;
        else
          v28 = v17;
        if (v28)
        {
          if ((v16 & 0x80u) == 0)
            p_p = &__p;
          else
            p_p = __p;
          memmove(v14, p_p, v28);
        }
        if (v20 != v26)
        {
          v30 = v20 - (v20 >> 1);
          v31 = &v14[v18];
          if (v30 <= 1)
            v30 = 1;
          v32 = -(uint64_t)v30;
          do
            *v31++ = v45;
          while (!__CFADD__(v32++, 1));
        }
      }
      else if (v41 == 2)
      {
        if (v44 != v18)
        {
          do
          {
            *v14++ = v45;
            --v20;
          }
          while (v20);
          v15 = v49;
          v17 = v48;
          v16 = v49;
        }
        v21 = (v16 & 0x80u) == 0 ? v15 : v17;
        if (v21)
        {
          if ((v16 & 0x80u) == 0)
            v22 = &__p;
          else
            v22 = __p;
          v23 = v14;
          goto LABEL_45;
        }
      }
    }
    else
    {
      if (v18)
      {
        if ((v49 & 0x80u) == 0)
          v24 = &__p;
        else
          v24 = __p;
        memmove((char *)v13 + i, v24, v18);
      }
      if (v19 != v18)
      {
        v25 = (size_t)v13 + v18;
        do
        {
          *(_BYTE *)(v25 + i) = v45;
          ++v25;
          --v20;
        }
        while (v20);
      }
    }
  }
  else if (v18)
  {
    if ((v49 & 0x80u) == 0)
      v22 = &__p;
    else
      v22 = __p;
    v23 = (char *)v13 + i;
    v21 = v18;
LABEL_45:
    memmove(v23, v22, v21);
  }
  if ((char)v49 < 0)
    operator delete(__p);
  if (i != a3)
    mediaplatform::CopyFormatSectionToResult(a1, a2, a3, i - a3, v6 & 1);
}

void sub_20A7F3D24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void mediaplatform::FormatterParameters<0ul,mediaplatform::CFRetainedPointer<__CFError *>>::formatOptionsAtIndex<mediaplatform::CFRetainedPointer<__CFError *>>(uint64_t a1)
{
  std::runtime_error *exception;

  if (!a1)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Requested parameter is not an FormatOptions instance.");
    __cxa_throw(exception, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
  }
  mediaplatform::FormatterParameters<1ul>::formatOptionsAtIndex<mediaplatform::CFRetainedPointer<__CFError *>>();
}

void sub_20A7F3D98(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void mediaplatform::FormatterParameters<1ul>::formatParameterAtIndex<mediaplatform::FormatterParameters<0ul,mediaplatform::CFRetainedPointer<__CFError *>>>()
{
  std::runtime_error *exception;

  exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
  std::runtime_error::runtime_error(exception, "Parameter index out of bounds.");
  __cxa_throw(exception, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
}

void sub_20A7F3DE8(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void mediaplatform::FormatterParameters<1ul>::formatOptionsAtIndex<mediaplatform::CFRetainedPointer<__CFError *>>()
{
  std::runtime_error *exception;

  exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
  std::runtime_error::runtime_error(exception, "Parameter index out of bounds.");
  __cxa_throw(exception, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
}

void sub_20A7F3E38(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

mediaplatform::PropertyList *mediaplatform::PropertyList::PropertyList(mediaplatform::PropertyList *this, const mediaplatform::Data *a2)
{
  *(_QWORD *)this = &off_24C330CB0;
  *((_QWORD *)this + 1) = 0;
  mediaplatform::PropertyList::_initializeDictionary((const void **)this, a2);
  return this;
}

void sub_20A7F3E88(_Unwind_Exception *a1)
{
  const void **v1;

  mediaplatform::CFRetainedPointer<__CFDictionary *>::~CFRetainedPointer(v1);
  _Unwind_Resume(a1);
}

_QWORD *mediaplatform::PropertyList::PropertyList(_QWORD *a1, uint64_t a2)
{
  *a1 = &off_24C330CB0;
  a1[1] = CFDictionaryCreateMutableCopy((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, *(CFDictionaryRef *)(a2 + 8));
  return a1;
}

{
  *a1 = &off_24C330CB0;
  a1[1] = CFDictionaryCreateMutableCopy((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, *(CFDictionaryRef *)(a2 + 8));
  return a1;
}

uint64_t mediaplatform::PropertyList::PropertyList(uint64_t a1, uint64_t a2)
{
  const void *v4;

  *(_QWORD *)a1 = &off_24C330CB0;
  *(_QWORD *)(a1 + 8) = 0;
  mediaplatform::CFRetainedPointer<__CFDictionary *>::operator=((const void **)(a1 + 8), *(CFTypeRef *)(a2 + 8));
  v4 = *(const void **)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  if (v4)
    CFRelease(v4);
  return a1;
}

void sub_20A7F3F8C(_Unwind_Exception *a1)
{
  const void **v1;

  mediaplatform::CFRetainedPointer<__CFDictionary *>::~CFRetainedPointer(v1);
  _Unwind_Resume(a1);
}

uint64_t mediaplatform::PropertyList::operator=(uint64_t a1, uint64_t a2)
{
  CFMutableDictionaryRef MutableCopy;
  const void *v4;

  if (a1 != a2)
  {
    MutableCopy = CFDictionaryCreateMutableCopy((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, *(CFDictionaryRef *)(a2 + 8));
    v4 = *(const void **)(a1 + 8);
    if (v4)
      CFRelease(v4);
    *(_QWORD *)(a1 + 8) = MutableCopy;
  }
  return a1;
}

{
  const void *v4;

  if (a1 != a2)
  {
    mediaplatform::CFRetainedPointer<__CFDictionary *>::operator=((const void **)(a1 + 8), *(CFTypeRef *)(a2 + 8));
    v4 = *(const void **)(a2 + 8);
    *(_QWORD *)(a2 + 8) = 0;
    if (v4)
      CFRelease(v4);
  }
  return a1;
}

BOOL mediaplatform::PropertyList::operator==(uint64_t a1, uint64_t a2)
{
  return CFEqual(*(CFTypeRef *)(a1 + 8), *(CFTypeRef *)(a2 + 8)) != 0;
}

BOOL mediaplatform::PropertyList::operator!=(uint64_t a1, uint64_t a2)
{
  return CFEqual(*(CFTypeRef *)(a1 + 8), *(CFTypeRef *)(a2 + 8)) == 0;
}

const __CFDictionary *mediaplatform::PropertyList::valuesCount(mediaplatform::PropertyList *this)
{
  const __CFDictionary *result;

  result = (const __CFDictionary *)*((_QWORD *)this + 1);
  if (result)
    return (const __CFDictionary *)CFDictionaryGetCount(result);
  return result;
}

BOOL mediaplatform::PropertyList::keyExists(uint64_t a1, const char *a2)
{
  const __CFDictionary *v2;
  CFStringRef v3;
  const void *Value;
  const void *v5;
  CFTypeRef cf;
  const void *v8;

  v2 = *(const __CFDictionary **)(a1 + 8);
  if (a2[23] < 0)
    a2 = *(const char **)a2;
  v3 = CFStringCreateWithCString(0, a2, 0x8000100u);
  cf = v3;
  if (!v3)
  {
    v3 = &stru_24C33DDF8;
    CFRetain(&stru_24C33DDF8);
    cf = &stru_24C33DDF8;
  }
  Value = CFDictionaryGetValue(v2, v3);
  v5 = Value;
  if (Value)
    CFRetain(Value);
  v8 = v5;
  mediaplatform::CFRetainedPointer<__CFString const*>::~CFRetainedPointer(&cf);
  mediaplatform::CFRetainedPointer<void const*>::~CFRetainedPointer(&v8);
  return v5 != 0;
}

void sub_20A7F4148(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9)
{
  mediaplatform::CFRetainedPointer<__CFString const*>::~CFRetainedPointer(&a9);
  _Unwind_Resume(a1);
}

const void **mediaplatform::PropertyList::propertyListData@<X0>(CFPropertyListRef *this@<X0>, CFPropertyListFormat format@<X1>, uint64_t a3@<X8>)
{
  CFDataRef Data;
  const __CFData *v5;
  const UInt8 *BytePtr;
  size_t Length;
  void *v8;
  CFDataRef theData;

  Data = CFPropertyListCreateData((CFAllocatorRef)*MEMORY[0x24BDBD240], this[1], format, 0, 0);
  if (Data)
  {
    v5 = Data;
    CFRetain(Data);
    theData = v5;
    BytePtr = CFDataGetBytePtr(v5);
    Length = CFDataGetLength(theData);
    *(_QWORD *)a3 = &off_24C331510;
    *(_QWORD *)(a3 + 8) = Length;
    *(_QWORD *)(a3 + 16) = Length;
    if (Length)
      v8 = (void *)operator new[]();
    else
      v8 = 0;
    *(_QWORD *)(a3 + 24) = v8;
    *(_BYTE *)(a3 + 32) = 1;
    if (BytePtr)
      memcpy(v8, BytePtr, Length);
    else
      bzero(v8, Length);
  }
  else
  {
    theData = 0;
    *(_QWORD *)a3 = &off_24C331510;
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
    *(_QWORD *)(a3 + 24) = 0;
    *(_BYTE *)(a3 + 32) = 0;
  }
  return mediaplatform::CFRetainedPointer<__CFData const*>::~CFRetainedPointer((const void **)&theData);
}

void sub_20A7F4258(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  mediaplatform::CFRetainedPointer<__CFData const*>::~CFRetainedPointer((const void **)va);
  _Unwind_Resume(a1);
}

_QWORD *mediaplatform::PropertyList::PropertyList(_QWORD *a1, CFDictionaryRef *a2)
{
  *a1 = &off_24C330CB0;
  a1[1] = CFDictionaryCreateMutableCopy((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, *a2);
  return a1;
}

{
  *a1 = &off_24C330CB0;
  a1[1] = CFDictionaryCreateMutableCopy((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, *a2);
  return a1;
}

CFTypeRef mediaplatform::PropertyList::_cfValueForKey@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v3;
  const __CFDictionary *v5;
  CFStringRef v6;
  const void *Value;
  CFTypeRef result;
  std::runtime_error *exception;
  std::string cf;

  v3 = a2;
  v5 = *(const __CFDictionary **)(a1 + 8);
  if (*(char *)(a2 + 23) < 0)
    a2 = *(_QWORD *)a2;
  v6 = CFStringCreateWithCString(0, (const char *)a2, 0x8000100u);
  cf.__r_.__value_.__r.__words[0] = (std::string::size_type)v6;
  if (!v6)
  {
    v6 = &stru_24C33DDF8;
    CFRetain(&stru_24C33DDF8);
    cf.__r_.__value_.__r.__words[0] = (std::string::size_type)&stru_24C33DDF8;
  }
  Value = CFDictionaryGetValue(v5, v6);
  mediaplatform::CFRetainedPointer<__CFString const*>::~CFRetainedPointer((const void **)&cf.__r_.__value_.__l.__data_);
  if (!Value)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    mediaplatform::FormatString<std::string>(&cf, (std::string *)"no such key '{0}'", v3);
    std::runtime_error::runtime_error(exception, &cf);
    exception->__vftable = (std::runtime_error_vtbl *)(MEMORY[0x24BEDB8A0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24C32FBB0, MEMORY[0x24BEDAAD0]);
  }
  result = CFRetain(Value);
  *a3 = Value;
  return result;
}

void sub_20A7F4408(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  int v16;

  if (a15 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  goto LABEL_6;
}

_QWORD *mediaplatform::DatabaseValue::DatabaseValue(_QWORD *this, void *a2)
{
  *this = a2;
  return this;
}

{
  *this = a2;
  return this;
}

uint64_t mediaplatform::DatabaseValue::value<int>(sqlite3_value **a1)
{
  return sqlite3_value_int(*a1);
}

sqlite3_int64 mediaplatform::DatabaseValue::value<long long>(sqlite3_value **a1)
{
  return sqlite3_value_int64(*a1);
}

double mediaplatform::DatabaseValue::value<double>(sqlite3_value **a1)
{
  return sqlite3_value_double(*a1);
}

_QWORD *mediaplatform::DatabaseValue::value<std::string>@<X0>(sqlite3_value **a1@<X0>, _QWORD *a2@<X8>)
{
  unsigned __int8 *v4;
  size_t v5;

  v4 = (unsigned __int8 *)sqlite3_value_text(*a1);
  v5 = sqlite3_value_bytes(*a1);
  return std::string::basic_string[abi:ne180100](a2, v4, v5);
}

_QWORD *std::string::basic_string[abi:ne180100](_QWORD *__dst, void *__src, size_t __len)
{
  void *v6;
  size_t v7;
  size_t v8;

  if (__len >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (__len >= 0x17)
  {
    v7 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17)
      v7 = __len | 7;
    v8 = v7 + 1;
    v6 = operator new(v7 + 1);
    __dst[1] = __len;
    __dst[2] = v8 | 0x8000000000000000;
    *__dst = v6;
  }
  else
  {
    *((_BYTE *)__dst + 23) = __len;
    v6 = __dst;
    if (!__len)
      goto LABEL_9;
  }
  memmove(v6, __src, __len);
LABEL_9:
  *((_BYTE *)v6 + __len) = 0;
  return __dst;
}

_QWORD *mediaplatform::DatabaseValue::value<std::wstring>@<X0>(sqlite3_value **a1@<X0>, _QWORD *a2@<X8>)
{
  void *v4;
  unint64_t v5;

  v4 = (void *)sqlite3_value_text16(*a1);
  v5 = (uint64_t)sqlite3_value_bytes16(*a1) >> 2;
  return std::wstring::basic_string[abi:ne180100](a2, v4, v5);
}

_QWORD *std::wstring::basic_string[abi:ne180100](_QWORD *__dst, void *__src, unint64_t a3)
{
  void *v6;
  uint64_t v7;
  uint64_t v8;

  if (a3 >= 0x3FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (a3 >= 5)
  {
    v7 = (a3 & 0xFFFFFFFFFFFFFFFELL) + 2;
    if ((a3 | 1) != 5)
      v7 = a3 | 1;
    v6 = std::__allocate_at_least[abi:ne180100]<std::allocator<wchar_t>>(v7 + 1);
    __dst[1] = a3;
    __dst[2] = v8 | 0x8000000000000000;
    *__dst = v6;
  }
  else
  {
    *((_BYTE *)__dst + 23) = a3;
    v6 = __dst;
    if (!a3)
      goto LABEL_9;
  }
  memmove(v6, __src, 4 * a3);
LABEL_9:
  *((_DWORD *)v6 + a3) = 0;
  return __dst;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<wchar_t>>(unint64_t a1)
{
  if (a1 >> 62)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(4 * a1);
}

void mediaplatform::DatabaseValue::value<mediaplatform::Data>(sqlite3_value **a1@<X0>, uint64_t a2@<X8>)
{
  const void *v4;
  int v5;
  size_t v6;
  void *v7;

  v4 = sqlite3_value_blob(*a1);
  v5 = sqlite3_value_bytes(*a1);
  v6 = v5;
  *(_QWORD *)a2 = &off_24C331510;
  *(_QWORD *)(a2 + 8) = v5;
  *(_QWORD *)(a2 + 16) = v5;
  if (v5)
    v7 = (void *)operator new[]();
  else
    v7 = 0;
  *(_QWORD *)(a2 + 24) = v7;
  *(_BYTE *)(a2 + 32) = 1;
  if (v4)
    memcpy(v7, v4, v6);
  else
    bzero(v7, v6);
}

uint64_t mediaplatform::DatabaseValue::type(sqlite3_value **this)
{
  unsigned int v1;

  v1 = sqlite3_value_type(*this) - 1;
  if (v1 > 4)
    return 0;
  else
    return dword_20A918070[v1];
}

void mlcore::DatabaseProperty::~DatabaseProperty(mlcore::DatabaseProperty *this)
{
  *(_QWORD *)this = off_24C33A860;
  mlcore::PropertyCacheBase<long long,int,double,std::string,mediaplatform::Data>::~PropertyCacheBase((_QWORD *)this + 1);
}

{
  *(_QWORD *)this = off_24C33A860;
  mlcore::PropertyCacheBase<long long,int,double,std::string,mediaplatform::Data>::~PropertyCacheBase((_QWORD *)this + 1);
  JUMPOUT(0x20BD27AFCLL);
}

void mlcore::DatabaseProperty::_SQLExpressionForIdentity(mlcore::DatabaseProperty *this@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  __int128 *v6;
  uint64_t v7;
  uint64_t v8;
  mlcore *v9;
  unint64_t v10;
  _QWORD *v11;
  char *v12;
  char *v13;
  char *v14;
  __int128 v15;
  __int128 v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t *p_shared_owners;
  unint64_t v25;
  __int128 v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  std::string __p;
  __int128 v34;
  _QWORD v35[3];
  __int128 v36;
  __int128 v37;
  char v38;

  v4 = (*(uint64_t (**)(mlcore::DatabaseProperty *))(*(_QWORD *)this + 48))(this);
  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 88))(v4);
  (*(void (**)(_QWORD *__return_ptr))(*(_QWORD *)v5 + 24))(v35);
  v6 = (__int128 *)v35[0];
  v7 = (*(uint64_t (**)(mlcore::DatabaseProperty *))(*(_QWORD *)this + 48))(this);
  v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 88))(v7);
  std::allocate_shared[abi:ne180100]<mediaplatform::SQLColumnNameExpression,std::allocator<mediaplatform::SQLColumnNameExpression>,std::string &,std::string const&,void>(&v36, v6, (__int128 *)(v8 + 8));
  v10 = mlcore::DatabasePropertyPropertyKey(v9);
  mlcore::Entity::valueForProperty<std::string>(&__p, (uint64_t)this, v10);
  v11 = operator new(0x50uLL);
  v11[1] = 0;
  v11[2] = 0;
  *v11 = &off_24C33BA68;
  std::string::basic_string[abi:ne180100]<0>(&v37, "");
  mediaplatform::SQLLiteralValue<std::string>::SQLLiteralValue((uint64_t)(v11 + 3), (__int128 *)&__p, &v37);
  if (v38 < 0)
    operator delete((void *)v37);
  *(_QWORD *)&v34 = v11 + 3;
  *((_QWORD *)&v34 + 1) = v11;
  v12 = (char *)operator new(0x48uLL);
  v13 = v12;
  *(_OWORD *)(v12 + 8) = 0u;
  *(_QWORD *)v12 = &off_24C33BEC8;
  *((_QWORD *)v12 + 3) = &off_24C331138;
  v14 = v12 + 24;
  v15 = v36;
  v36 = 0u;
  v16 = v34;
  v34 = 0u;
  *((_DWORD *)v12 + 8) = 13;
  *(_OWORD *)(v12 + 40) = v15;
  v17 = (std::__shared_weak_count *)*((_QWORD *)&v15 + 1);
  if (*((_QWORD *)&v15 + 1))
  {
    v18 = (unint64_t *)(*((_QWORD *)&v15 + 1) + 8);
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
  }
  *(_OWORD *)(v12 + 56) = v16;
  v20 = (std::__shared_weak_count *)*((_QWORD *)&v16 + 1);
  if (*((_QWORD *)&v16 + 1))
  {
    v21 = (unint64_t *)(*((_QWORD *)&v16 + 1) + 8);
    do
      v22 = __ldxr(v21);
    while (__stxr(v22 + 1, v21));
    do
      v23 = __ldaxr(v21);
    while (__stlxr(v23 - 1, v21));
    if (!v23)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v16 + 1) + 16))(*((_QWORD *)&v16 + 1));
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  if (v17)
  {
    p_shared_owners = (unint64_t *)&v17->__shared_owners_;
    do
      v25 = __ldaxr(p_shared_owners);
    while (__stlxr(v25 - 1, p_shared_owners));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  *(_QWORD *)&v26 = v14;
  *((_QWORD *)&v26 + 1) = v13;
  *a2 = v26;
  v27 = (std::__shared_weak_count *)*((_QWORD *)&v34 + 1);
  if (*((_QWORD *)&v34 + 1))
  {
    v28 = (unint64_t *)(*((_QWORD *)&v34 + 1) + 8);
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v30 = (std::__shared_weak_count *)*((_QWORD *)&v36 + 1);
  if (*((_QWORD *)&v36 + 1))
  {
    v31 = (unint64_t *)(*((_QWORD *)&v36 + 1) + 8);
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }
  *(_QWORD *)&v37 = v35;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v37);
}

void sub_20A7F4A44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,char a22)
{
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  if (a15 < 0)
    operator delete(__p);
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)&a22);
  __p = &a19;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

uint64_t mlcore::DatabasePropertyPropertyKey(mlcore *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&mlcore::DatabasePropertyPropertyKey(void)::once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&mlcore::DatabasePropertyPropertyKey(void)::once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::DatabasePropertyPropertyKey(void)::$_0 &&>>);
  }
  return mlcore::DatabasePropertyPropertyKey(void)::property;
}

uint64_t mediaplatform::SQLLiteralValue<std::string>::SQLLiteralValue(uint64_t a1, __int128 *a2, __int128 *a3)
{
  __int128 v5;
  std::string *v6;
  __int128 v7;

  *(_QWORD *)a1 = off_24C335B60;
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 8), *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v5 = *a2;
    *(_QWORD *)(a1 + 24) = *((_QWORD *)a2 + 2);
    *(_OWORD *)(a1 + 8) = v5;
  }
  v6 = (std::string *)(a1 + 32);
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v6, *(const std::string::value_type **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    v7 = *a3;
    *(_QWORD *)(a1 + 48) = *((_QWORD *)a3 + 2);
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = v7;
  }
  return a1;
}

void sub_20A7F4BB0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 31) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

uint64_t mediaplatform::SQLLiteralValue<std::string>::~SQLLiteralValue(uint64_t a1)
{
  *(_QWORD *)a1 = off_24C335B60;
  if (*(char *)(a1 + 55) < 0)
    operator delete(*(void **)(a1 + 32));
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void mediaplatform::SQLLiteralValue<std::string>::~SQLLiteralValue(uint64_t a1)
{
  *(_QWORD *)a1 = off_24C335B60;
  if (*(char *)(a1 + 55) < 0)
    operator delete(*(void **)(a1 + 32));
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  JUMPOUT(0x20BD27AFCLL);
}

uint64_t mediaplatform::SQLLiteralValue<std::string>::sql(uint64_t a1)
{
  std::string *p_p;
  std::string::size_type size;
  std::string *v4;
  std::string::size_type v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  std::string __p;
  std::string v11;
  _QWORD v12[11];
  char v13;
  uint64_t v14;

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v12);
  if (*(char *)(a1 + 31) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(a1 + 8), *(_QWORD *)(a1 + 16));
  else
    __p = *(std::string *)(a1 + 8);
  std::string::basic_string[abi:ne180100]<0>(&v11, "'");
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    size = __p.__r_.__value_.__l.__size_;
  for (; size; --size)
  {
    std::string::push_back(&v11, p_p->__r_.__value_.__s.__data_[0]);
    if (p_p->__r_.__value_.__s.__data_[0] == 39)
      std::string::push_back(&v11, 39);
    p_p = (std::string *)((char *)p_p + 1);
  }
  std::string::push_back(&v11, 39);
  if ((v11.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v4 = &v11;
  else
    v4 = (std::string *)v11.__r_.__value_.__r.__words[0];
  if ((v11.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v5 = HIBYTE(v11.__r_.__value_.__r.__words[2]);
  else
    v5 = v11.__r_.__value_.__l.__size_;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)v4, v5);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (*(char *)(a1 + 55) < 0)
  {
    if (!*(_QWORD *)(a1 + 40))
      goto LABEL_35;
LABEL_28:
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)" /* ", 4);
    v6 = *(char *)(a1 + 55);
    if (v6 >= 0)
      v7 = a1 + 32;
    else
      v7 = *(_QWORD *)(a1 + 32);
    if (v6 >= 0)
      v8 = *(unsigned __int8 *)(a1 + 55);
    else
      v8 = *(_QWORD *)(a1 + 40);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, v7, v8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)" */", 3);
    goto LABEL_35;
  }
  if (*(_BYTE *)(a1 + 55))
    goto LABEL_28;
LABEL_35:
  std::stringbuf::str();
  v12[0] = *MEMORY[0x24BEDB800];
  *(_QWORD *)((char *)v12 + *(_QWORD *)(v12[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  v12[1] = MEMORY[0x24BEDB848] + 16;
  if (v13 < 0)
    operator delete((void *)v12[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x20BD27A84](&v14);
}

void sub_20A7F4E68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22)
{
  std::ostringstream::~ostringstream((uint64_t)&a22);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<mediaplatform::SQLLiteralValue<std::string>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C33BA68;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<mediaplatform::SQLLiteralValue<std::string>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C33BA68;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x20BD27AFCLL);
}

uint64_t std::__shared_ptr_emplace<mediaplatform::SQLLiteralValue<std::string>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::DatabasePropertyPropertyKey(void)::$_0 &&>>()
{
  uint64_t v0;
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  mlcore::MLDatabasePropertiesTable **v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  std::string *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  std::string *v19;
  __int128 v20;
  std::string v21;
  std::string __str;
  _QWORD v23[2];

  v0 = operator new();
  v1 = (_QWORD *)mediaplatform::Singleton<mlcore::MLDatabasePropertiesTable>::sharedInstance();
  v2 = (std::__shared_weak_count *)v1[1];
  v23[0] = *v1;
  v23[1] = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  v5 = (mlcore::MLDatabasePropertiesTable **)mediaplatform::Singleton<mlcore::MLDatabasePropertiesTable>::sharedInstance();
  mlcore::MLDatabasePropertiesTable::keyColumn(*v5, (uint64_t)&__str);
  mlcore::DatabaseModelProperty<std::string>::DatabaseModelProperty(v0, v23, (uint64_t)&__str);
  mlcore::DatabasePropertyPropertyKey(void)::property = v0;
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&__str);
  if (v2)
  {
    v6 = (unint64_t *)&v2->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v8 = mlcore::DatabasePropertyPropertyKey(void)::property;
  std::string::basic_string[abi:ne180100]<0>(&__str, "");
  std::string::operator=((std::string *)(v8 + 40), &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  v9 = mlcore::TypedEntityClass<mlcore::DatabaseProperty>::sharedPointer();
  v10 = mlcore::DatabasePropertyPropertyKey(void)::property;
  v11 = mediaplatform::Singleton<mlcore::MLDatabasePropertiesTable>::sharedInstance();
  v12 = *(_QWORD *)v11;
  if (*(char *)(*(_QWORD *)v11 + 31) >= 0)
    v13 = *(unsigned __int8 *)(*(_QWORD *)v11 + 31);
  else
    v13 = *(_QWORD *)(*(_QWORD *)v11 + 16);
  v14 = &v21;
  std::string::basic_string[abi:ne180100]((uint64_t)&v21, v13 + 1);
  if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v14 = (std::string *)v21.__r_.__value_.__r.__words[0];
  if (v13)
  {
    v17 = *(char **)(v12 + 8);
    v16 = (char *)(v12 + 8);
    v15 = v17;
    if (v16[23] >= 0)
      v18 = v16;
    else
      v18 = v15;
    memmove(v14, v18, v13);
  }
  *(_WORD *)((char *)&v14->__r_.__value_.__l.__data_ + v13) = 46;
  v19 = std::string::append(&v21, "key");
  v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  __str.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  mlcore::EntityClass::setPropertyForName(v9, v10, &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
}

void sub_20A7F50D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

uint64_t mediaplatform::Singleton<mlcore::MLDatabasePropertiesTable>::sharedInstance()
{
  unsigned __int8 v0;
  mlcore::MLDatabasePropertiesTable **v2;

  if ((v0 & 1) == 0
  {
    v2 = (mlcore::MLDatabasePropertiesTable **)operator new();
    _ZNSt3__115allocate_sharedB8ne180100IN6mlcore25MLDatabasePropertiesTableENS_9allocatorIS2_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(v2);
    mediaplatform::Singleton<mlcore::MLDatabasePropertiesTable>::sharedInstance(void)::_sharedInstance = (uint64_t)v2;
  }
  return mediaplatform::Singleton<mlcore::MLDatabasePropertiesTable>::sharedInstance(void)::_sharedInstance;
}

void sub_20A7F51FC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x20BD27AFC](v1, 0x20C40A4A59CD2);
  _Unwind_Resume(a1);
}

uint64_t mlcore::TypedEntityClass<mlcore::DatabaseProperty>::sharedPointer()
{
  unint64_t v0;
  char v2;
  char **v3;
  char *v4;

  v0 = atomic_load(&mlcore::TypedEntityClass<mlcore::DatabaseProperty>::sharedPointer(void)::__once);
  if (v0 != -1)
  {
    v4 = &v2;
    v3 = &v4;
    std::__call_once(&mlcore::TypedEntityClass<mlcore::DatabaseProperty>::sharedPointer(void)::__once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::TypedEntityClass<mlcore::DatabaseProperty>::sharedPointer(void)::{lambda(void)#1} &&>>);
  }
  return mlcore::TypedEntityClass<mlcore::DatabaseProperty>::sharedPointer(void)::__sharedPointer;
}

double std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::TypedEntityClass<mlcore::DatabaseProperty>::sharedPointer(void)::{lambda(void)#1} &&>>()
{
  uint64_t v0;
  double result;

  v0 = operator new();
  result = 0.0;
  *(_OWORD *)(v0 + 16) = 0u;
  *(_OWORD *)(v0 + 32) = 0u;
  *(_OWORD *)(v0 + 48) = 0u;
  *(_OWORD *)(v0 + 64) = 0u;
  *(_OWORD *)(v0 + 80) = 0u;
  *(_QWORD *)(v0 + 96) = 0;
  *(_DWORD *)(v0 + 104) = 1065353216;
  *(_OWORD *)(v0 + 112) = 0u;
  *(_OWORD *)(v0 + 128) = 0u;
  *(_DWORD *)(v0 + 144) = 1065353216;
  *(_QWORD *)v0 = &off_24C3389A8;
  *(_QWORD *)(v0 + 8) = 850045863;
  mlcore::TypedEntityClass<mlcore::DatabaseProperty>::sharedPointer(void)::__sharedPointer = v0;
  return result;
}

void mlcore::TypedEntityClass<mlcore::DatabaseProperty>::~TypedEntityClass(mlcore::EntityClass *a1)
{
  mlcore::EntityClass::~EntityClass(a1);
  JUMPOUT(0x20BD27AFCLL);
}

uint64_t mlcore::TypedEntityClass<mlcore::DatabaseProperty>::description(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
}

__n128 mlcore::TypedEntityClass<mlcore::DatabaseProperty>::create@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, __n128 *a4@<X8>)
{
  char *v8;
  uint64_t v9;
  unint64_t *v10;
  uint64_t v11;
  __n128 result;
  __n128 v13;
  unint64_t v14[3];
  unint64_t *v15;
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  v8 = (char *)operator new(0x100uLL);
  *((_QWORD *)v8 + 1) = 0;
  *((_QWORD *)v8 + 2) = 0;
  *(_QWORD *)v8 = &off_24C33CC20;
  *(_OWORD *)(v8 + 40) = 0u;
  *(_OWORD *)(v8 + 56) = 0u;
  *((_DWORD *)v8 + 18) = 1065353216;
  *((_OWORD *)v8 + 5) = 0u;
  *((_OWORD *)v8 + 6) = 0u;
  *((_DWORD *)v8 + 28) = 1065353216;
  *(_OWORD *)(v8 + 120) = 0u;
  *(_OWORD *)(v8 + 136) = 0u;
  *((_DWORD *)v8 + 38) = 1065353216;
  *((_OWORD *)v8 + 10) = 0u;
  *((_OWORD *)v8 + 11) = 0u;
  *((_DWORD *)v8 + 48) = 1065353216;
  *(_OWORD *)(v8 + 216) = 0u;
  *((_DWORD *)v8 + 58) = 1065353216;
  *((_QWORD *)v8 + 30) = &unk_24C3371E8;
  *((_QWORD *)v8 + 31) = a2;
  *(_OWORD *)(v8 + 200) = 0u;
  v9 = (uint64_t)(v8 + 200);
  *((_QWORD *)v8 + 4) = &off_24C3371C0;
  *((_QWORD *)v8 + 3) = &off_24C338230;
  v13.n128_u64[0] = (unint64_t)(v8 + 24);
  v13.n128_u64[1] = (unint64_t)v8;
  v14[0] = (unint64_t)&off_24C33B140;
  v15 = v14;
  mlcore::PropertyCache::mergePropertiesFromCache((uint64_t)(v8 + 32), a3, (uint64_t)v14);
  v10 = v15;
  if (v15 == v14)
  {
    v11 = 4;
    v10 = v14;
    goto LABEL_5;
  }
  if (v15)
  {
    v11 = 5;
LABEL_5:
    (*(void (**)(void))(*v10 + 8 * v11))();
  }
  v14[0] = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 112))(a1);
  std::__hash_table<std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>,std::__unordered_map_hasher<mlcore::ModelProperty<long long> *,std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>,std::hash<mlcore::ModelProperty<long long> *>,std::equal_to<mlcore::ModelProperty<long long> *>,true>,std::__unordered_map_equal<mlcore::ModelProperty<long long> *,std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>,std::equal_to<mlcore::ModelProperty<long long> *>,std::hash<mlcore::ModelProperty<long long> *>,true>,std::allocator<std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>>>::__emplace_unique_key_args<mlcore::ModelProperty<long long> *,std::piecewise_construct_t const&,std::tuple<mlcore::ModelProperty<long long> * const&>,std::tuple<>>(v9, v14[0], v14)[3] = a2;
  result = v13;
  *a4 = v13;
  return result;
}

void sub_20A7F549C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15)
{
  char *v15;
  char *v17;
  uint64_t v18;

  v17 = a15;
  if (a15 == v15)
  {
    v18 = 4;
    v17 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v18 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v17 + 8 * v18))();
LABEL_6:
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t mlcore::TypedEntityClass<mlcore::DatabaseProperty>::name(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
}

uint64_t mlcore::TypedEntityClass<mlcore::DatabaseProperty>::entityType()
{
  return 0xFFFFFFFFLL;
}

BOOL mlcore::TypedEntityClass<mlcore::DatabaseProperty>::isRevisionTrackable(uint64_t a1)
{
  return (*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1) != -1;
}

uint64_t mlcore::TypedEntityClass<mlcore::DatabaseProperty>::isCloudUpdatable()
{
  return 0;
}

uint64_t mlcore::TypedEntityClass<mlcore::DatabaseProperty>::databaseTable()
{
  return *(_QWORD *)mediaplatform::Singleton<mlcore::MLDatabasePropertiesTable>::sharedInstance();
}

void mlcore::TypedEntityClass<mlcore::DatabaseProperty>::databaseTablesToDeleteFrom(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

void mlcore::TypedEntityClass<mlcore::DatabaseProperty>::databaseTablesToInsertInto(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

uint64_t mlcore::TypedEntityClass<mlcore::DatabaseProperty>::persistentIDProperty()
{
  return 0;
}

uint64_t mlcore::TypedEntityClass<mlcore::DatabaseProperty>::representativeItemPersistentIDProperty()
{
  return 0;
}

uint64_t mlcore::TypedEntityClass<mlcore::DatabaseProperty>::trackForeignPersistentIDProperty()
{
  return 0;
}

uint64_t mlcore::TypedEntityClass<mlcore::DatabaseProperty>::trackForeignOrderingProperty()
{
  return 0;
}

uint64_t mlcore::TypedEntityClass<mlcore::DatabaseProperty>::sectionPropertyForOrderingProperty()
{
  return 0;
}

void std::__shared_ptr_emplace<mlcore::DatabaseProperty>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C33CC20;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<mlcore::DatabaseProperty>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C33CC20;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x20BD27AFCLL);
}

uint64_t std::__shared_ptr_emplace<mlcore::DatabaseProperty>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

mlcore::MLDatabasePropertiesTable *_ZNSt3__115allocate_sharedB8ne180100IN6mlcore25MLDatabasePropertiesTableENS_9allocatorIS2_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(mlcore::MLDatabasePropertiesTable **a1)
{
  _QWORD *v2;
  mlcore::MLDatabasePropertiesTable *result;

  v2 = operator new(0x168uLL);
  v2[1] = 0;
  v2[2] = 0;
  *v2 = &off_24C33D198;
  result = mlcore::MLDatabasePropertiesTable::MLDatabasePropertiesTable((mlcore::MLDatabasePropertiesTable *)(v2 + 3));
  *a1 = result;
  a1[1] = (mlcore::MLDatabasePropertiesTable *)v2;
  return result;
}

void sub_20A7F560C(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<mlcore::MLDatabasePropertiesTable>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C33D198;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<mlcore::MLDatabasePropertiesTable>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C33D198;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x20BD27AFCLL);
}

uint64_t std::__shared_ptr_emplace<mlcore::MLDatabasePropertiesTable>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t mlcore::DatabasePropertyPropertyValue(mlcore *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&mlcore::DatabasePropertyPropertyValue(void)::once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&mlcore::DatabasePropertyPropertyValue(void)::once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::DatabasePropertyPropertyValue(void)::$_0 &&>>);
  }
  return mlcore::DatabasePropertyPropertyValue(void)::property;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::DatabasePropertyPropertyValue(void)::$_0 &&>>()
{
  uint64_t v0;
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  mlcore::MLDatabasePropertiesTable **v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  std::string *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  std::string *v19;
  __int128 v20;
  std::string v21;
  std::string __str;
  _QWORD v23[2];

  v0 = operator new();
  v1 = (_QWORD *)mediaplatform::Singleton<mlcore::MLDatabasePropertiesTable>::sharedInstance();
  v2 = (std::__shared_weak_count *)v1[1];
  v23[0] = *v1;
  v23[1] = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  v5 = (mlcore::MLDatabasePropertiesTable **)mediaplatform::Singleton<mlcore::MLDatabasePropertiesTable>::sharedInstance();
  mlcore::MLDatabasePropertiesTable::valueColumn(*v5, (uint64_t)&__str);
  mlcore::DatabaseModelProperty<std::string>::DatabaseModelProperty(v0, v23, (uint64_t)&__str);
  mlcore::DatabasePropertyPropertyValue(void)::property = v0;
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&__str);
  if (v2)
  {
    v6 = (unint64_t *)&v2->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v8 = mlcore::DatabasePropertyPropertyValue(void)::property;
  std::string::basic_string[abi:ne180100]<0>(&__str, "");
  std::string::operator=((std::string *)(v8 + 40), &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  v9 = mlcore::TypedEntityClass<mlcore::DatabaseProperty>::sharedPointer();
  v10 = mlcore::DatabasePropertyPropertyValue(void)::property;
  v11 = mediaplatform::Singleton<mlcore::MLDatabasePropertiesTable>::sharedInstance();
  v12 = *(_QWORD *)v11;
  if (*(char *)(*(_QWORD *)v11 + 31) >= 0)
    v13 = *(unsigned __int8 *)(*(_QWORD *)v11 + 31);
  else
    v13 = *(_QWORD *)(*(_QWORD *)v11 + 16);
  v14 = &v21;
  std::string::basic_string[abi:ne180100]((uint64_t)&v21, v13 + 1);
  if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v14 = (std::string *)v21.__r_.__value_.__r.__words[0];
  if (v13)
  {
    v17 = *(char **)(v12 + 8);
    v16 = (char *)(v12 + 8);
    v15 = v17;
    if (v16[23] >= 0)
      v18 = v16;
    else
      v18 = v15;
    memmove(v14, v18, v13);
  }
  *(_WORD *)((char *)&v14->__r_.__value_.__l.__data_ + v13) = 46;
  v19 = std::string::append(&v21, "value");
  v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  __str.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  mlcore::EntityClass::setPropertyForName(v9, v10, &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
}

void sub_20A7F589C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

uint64_t mlcore::DatabaseProperty::DatabaseProperty(uint64_t a1, uint64_t a2)
{
  std::string::size_type v4;

  *(_QWORD *)(a1 + 8) = &off_24C3371C0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_DWORD *)(a1 + 48) = 1065353216;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_DWORD *)(a1 + 88) = 1065353216;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_DWORD *)(a1 + 128) = 1065353216;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_DWORD *)(a1 + 168) = 1065353216;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_DWORD *)(a1 + 208) = 1065353216;
  *(_QWORD *)(a1 + 216) = &unk_24C3371E8;
  *(_QWORD *)(a1 + 224) = 0;
  *(_QWORD *)a1 = &off_24C338230;
  v4 = mlcore::DatabasePropertyPropertyKey((mlcore *)a1);
  mlcore::Entity::setValueForProperty<std::string>(a1, a2, v4);
  return a1;
}

void sub_20A7F59EC(_Unwind_Exception *a1)
{
  _QWORD *v1;
  _QWORD *v2;

  *v1 = off_24C33A860;
  mlcore::PropertyCacheBase<long long,int,double,std::string,mediaplatform::Data>::~PropertyCacheBase(v2);
  _Unwind_Resume(a1);
}

double mlcore::DatabaseProperty::DatabaseProperty(mlcore::DatabaseProperty *this, uint64_t a2)
{
  double result;

  result = 0.0;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_DWORD *)this + 12) = 1065353216;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *((_DWORD *)this + 22) = 1065353216;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_DWORD *)this + 32) = 1065353216;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 152) = 0u;
  *((_DWORD *)this + 42) = 1065353216;
  *((_OWORD *)this + 11) = 0u;
  *((_OWORD *)this + 12) = 0u;
  *((_DWORD *)this + 52) = 1065353216;
  *((_QWORD *)this + 27) = &unk_24C3371E8;
  *((_QWORD *)this + 28) = a2;
  *(_QWORD *)this = &off_24C338230;
  *((_QWORD *)this + 1) = &off_24C3371C0;
  return result;
}

{
  double result;

  result = 0.0;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_DWORD *)this + 12) = 1065353216;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *((_DWORD *)this + 22) = 1065353216;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_DWORD *)this + 32) = 1065353216;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 152) = 0u;
  *((_DWORD *)this + 42) = 1065353216;
  *((_OWORD *)this + 11) = 0u;
  *((_OWORD *)this + 12) = 0u;
  *((_DWORD *)this + 52) = 1065353216;
  *((_QWORD *)this + 27) = &unk_24C3371E8;
  *((_QWORD *)this + 28) = a2;
  *(_QWORD *)this = &off_24C338230;
  *((_QWORD *)this + 1) = &off_24C3371C0;
  return result;
}

void mlcore::DatabaseProperty::key(mlcore::DatabaseProperty *this@<X0>, std::string *a2@<X8>)
{
  unint64_t v4;

  v4 = mlcore::DatabasePropertyPropertyKey(this);
  mlcore::Entity::valueForProperty<std::string>(a2, (uint64_t)this, v4);
}

void mlcore::DatabaseProperty::value(mlcore::DatabaseProperty *this@<X0>, std::string *a2@<X8>)
{
  unint64_t v4;

  v4 = mlcore::DatabasePropertyPropertyValue(this);
  mlcore::Entity::valueForProperty<std::string>(a2, (uint64_t)this, v4);
}

void mlcore::DatabaseProperty::setValue(mlcore *a1, uint64_t a2)
{
  std::string::size_type v4;

  v4 = mlcore::DatabasePropertyPropertyValue(a1);
  mlcore::Entity::setValueForProperty<std::string>((uint64_t)a1, a2, v4);
}

double std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::TypedEntityClass<mlcore::Playlist>::sharedPointer(void)::{lambda(void)#1} &&>>()
{
  uint64_t v0;
  double result;

  v0 = operator new();
  result = 0.0;
  *(_OWORD *)(v0 + 16) = 0u;
  *(_OWORD *)(v0 + 32) = 0u;
  *(_OWORD *)(v0 + 48) = 0u;
  *(_OWORD *)(v0 + 64) = 0u;
  *(_OWORD *)(v0 + 80) = 0u;
  *(_QWORD *)(v0 + 96) = 0;
  *(_DWORD *)(v0 + 104) = 1065353216;
  *(_OWORD *)(v0 + 112) = 0u;
  *(_OWORD *)(v0 + 128) = 0u;
  *(_DWORD *)(v0 + 144) = 1065353216;
  *(_QWORD *)v0 = &off_24C339428;
  *(_QWORD *)(v0 + 8) = 850045863;
  mlcore::TypedEntityClass<mlcore::Playlist>::sharedPointer(void)::__sharedPointer = v0;
  return result;
}

void mlcore::TypedEntityClass<mlcore::Playlist>::~TypedEntityClass(mlcore::EntityClass *a1)
{
  mlcore::EntityClass::~EntityClass(a1);
  JUMPOUT(0x20BD27AFCLL);
}

uint64_t mlcore::TypedEntityClass<mlcore::Playlist>::description(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
}

BOOL mlcore::TypedEntityClass<mlcore::Playlist>::isRevisionTrackable(uint64_t a1)
{
  return (*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1) != -1;
}

uint64_t mlcore::TypedEntityClass<mlcore::Playlist>::isCloudUpdatable()
{
  return 1;
}

void mlcore::TypedEntityClass<mlcore::Playlist>::databaseTablesToDeleteFrom(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

void mlcore::TypedEntityClass<mlcore::Playlist>::databaseTablesToInsertInto(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

uint64_t mlcore::TypedEntityClass<mlcore::Playlist>::representativeItemPersistentIDProperty()
{
  return 0;
}

uint64_t mlcore::TypedEntityClass<mlcore::Playlist>::trackForeignPersistentIDProperty()
{
  return 0;
}

uint64_t mlcore::TypedEntityClass<mlcore::Playlist>::trackForeignOrderingProperty()
{
  return 0;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::PlaylistPropertyPersistentID(void)::$_0 &&>>()
{
  uint64_t v0;
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  mlcore::ContainerTable **v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  std::string *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  std::string *v19;
  __int128 v20;
  std::string v21;
  std::string __p;
  char v23;
  _QWORD v24[2];

  v0 = operator new();
  v1 = (_QWORD *)mediaplatform::Singleton<mlcore::ContainerTable>::sharedInstance();
  v2 = (std::__shared_weak_count *)v1[1];
  v24[0] = *v1;
  v24[1] = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  v5 = (mlcore::ContainerTable **)mediaplatform::Singleton<mlcore::ContainerTable>::sharedInstance();
  mlcore::ContainerTable::persistentIDColumn(*v5, (uint64_t)&__p);
  mlcore::DatabaseModelProperty<long long>::DatabaseModelProperty(v0, v24, (uint64_t)&__p);
  mlcore::PlaylistPropertyPersistentID(void)::property = v0;
  if (v23 < 0)
    operator delete((void *)__p.__r_.__value_.__l.__size_);
  if (v2)
  {
    v6 = (unint64_t *)&v2->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v8 = mlcore::PlaylistPropertyPersistentID(void)::property;
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  std::string::operator=((std::string *)(v8 + 40), &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v9 = mlcore::TypedEntityClass<mlcore::Playlist>::sharedPointer();
  v10 = mlcore::PlaylistPropertyPersistentID(void)::property;
  v11 = mediaplatform::Singleton<mlcore::ContainerTable>::sharedInstance();
  v12 = *(_QWORD *)v11;
  if (*(char *)(*(_QWORD *)v11 + 31) >= 0)
    v13 = *(unsigned __int8 *)(*(_QWORD *)v11 + 31);
  else
    v13 = *(_QWORD *)(*(_QWORD *)v11 + 16);
  v14 = &v21;
  std::string::basic_string[abi:ne180100]((uint64_t)&v21, v13 + 1);
  if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v14 = (std::string *)v21.__r_.__value_.__r.__words[0];
  if (v13)
  {
    v17 = *(char **)(v12 + 8);
    v16 = (char *)(v12 + 8);
    v15 = v17;
    if (v16[23] >= 0)
      v18 = v16;
    else
      v18 = v15;
    memmove(v14, v18, v13);
  }
  *(_WORD *)((char *)&v14->__r_.__value_.__l.__data_ + v13) = 46;
  v19 = std::string::append(&v21, "persistentID");
  v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  __p.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  mlcore::EntityClass::setPropertyForName(v9, v10, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
}

void sub_20A7F5E74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

_QWORD *_ZNSt3__115allocate_sharedB8ne180100IN6mlcore14ContainerTableENS_9allocatorIS2_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *result;

  v2 = operator new(0x2348uLL);
  v2[1] = 0;
  v2[2] = 0;
  *v2 = &off_24C33C830;
  result = mlcore::ContainerTable::ContainerTable((mlcore::ContainerTable *)(v2 + 3));
  *a1 = result;
  a1[1] = v2;
  return result;
}

void sub_20A7F5F70(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<mlcore::ContainerTable>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C33C830;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<mlcore::ContainerTable>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C33C830;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x20BD27AFCLL);
}

uint64_t std::__shared_ptr_emplace<mlcore::ContainerTable>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

char *std::allocate_shared[abi:ne180100]<mlcore::Playlist,std::allocator<mlcore::Playlist>,long long &,void>(_QWORD *a1, uint64_t a2)
{
  char *v4;
  char *result;

  v4 = (char *)operator new(0x110uLL);
  *(_OWORD *)(v4 + 8) = 0u;
  *(_QWORD *)v4 = &off_24C33D5C0;
  *(_OWORD *)(v4 + 40) = 0u;
  *(_OWORD *)(v4 + 56) = 0u;
  *((_DWORD *)v4 + 18) = 1065353216;
  *((_OWORD *)v4 + 5) = 0u;
  *((_OWORD *)v4 + 6) = 0u;
  *((_DWORD *)v4 + 28) = 1065353216;
  *(_OWORD *)(v4 + 120) = 0u;
  *(_OWORD *)(v4 + 136) = 0u;
  *((_DWORD *)v4 + 38) = 1065353216;
  *((_OWORD *)v4 + 10) = 0u;
  *((_OWORD *)v4 + 11) = 0u;
  *((_DWORD *)v4 + 48) = 1065353216;
  *(_OWORD *)(v4 + 200) = 0u;
  *(_OWORD *)(v4 + 216) = 0u;
  *((_DWORD *)v4 + 58) = 1065353216;
  *((_QWORD *)v4 + 4) = &off_24C3371C0;
  *((_QWORD *)v4 + 30) = &unk_24C3371E8;
  *((_QWORD *)v4 + 31) = a2;
  *((_OWORD *)v4 + 16) = 0u;
  a1[1] = v4;
  *((_QWORD *)v4 + 3) = &off_24C33AB48;
  result = v4 + 24;
  *a1 = result;
  return result;
}

void std::__shared_ptr_emplace<mlcore::Playlist>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C33D5C0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<mlcore::Playlist>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C33D5C0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x20BD27AFCLL);
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::PlaylistPropertyDistinguishedKind(void)::$_0 &&>>()
{
  uint64_t v0;
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  mlcore::ContainerTable **v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  std::string *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  std::string *v19;
  __int128 v20;
  std::string v21;
  std::string __p;
  char v23;
  _QWORD v24[2];

  v0 = operator new();
  v1 = (_QWORD *)mediaplatform::Singleton<mlcore::ContainerTable>::sharedInstance();
  v2 = (std::__shared_weak_count *)v1[1];
  v24[0] = *v1;
  v24[1] = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  v5 = (mlcore::ContainerTable **)mediaplatform::Singleton<mlcore::ContainerTable>::sharedInstance();
  mlcore::ContainerTable::distinguishedKindColumn(*v5, (uint64_t)&__p);
  mlcore::DatabaseModelProperty<int>::DatabaseModelProperty(v0, v24, (uint64_t)&__p);
  mlcore::PlaylistPropertyDistinguishedKind(void)::property = v0;
  if (v23 < 0)
    operator delete((void *)__p.__r_.__value_.__l.__size_);
  if (v2)
  {
    v6 = (unint64_t *)&v2->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v8 = mlcore::PlaylistPropertyDistinguishedKind(void)::property;
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  std::string::operator=((std::string *)(v8 + 40), &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v9 = mlcore::TypedEntityClass<mlcore::Playlist>::sharedPointer();
  v10 = mlcore::PlaylistPropertyDistinguishedKind(void)::property;
  v11 = mediaplatform::Singleton<mlcore::ContainerTable>::sharedInstance();
  v12 = *(_QWORD *)v11;
  if (*(char *)(*(_QWORD *)v11 + 31) >= 0)
    v13 = *(unsigned __int8 *)(*(_QWORD *)v11 + 31);
  else
    v13 = *(_QWORD *)(*(_QWORD *)v11 + 16);
  v14 = &v21;
  std::string::basic_string[abi:ne180100]((uint64_t)&v21, v13 + 1);
  if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v14 = (std::string *)v21.__r_.__value_.__r.__words[0];
  if (v13)
  {
    v17 = *(char **)(v12 + 8);
    v16 = (char *)(v12 + 8);
    v15 = v17;
    if (v16[23] >= 0)
      v18 = v16;
    else
      v18 = v15;
    memmove(v14, v18, v13);
  }
  *(_WORD *)((char *)&v14->__r_.__value_.__l.__data_ + v13) = 46;
  v19 = std::string::append(&v21, "distinguishedKind");
  v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  __p.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  mlcore::EntityClass::setPropertyForName(v9, v10, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
}

void sub_20A7F628C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

uint64_t mlcore::PlaylistPropertyDatePlayed(mlcore *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&mlcore::PlaylistPropertyDatePlayed(void)::once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&mlcore::PlaylistPropertyDatePlayed(void)::once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::PlaylistPropertyDatePlayed(void)::$_0 &&>>);
  }
  return mlcore::PlaylistPropertyDatePlayed(void)::property;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::PlaylistPropertyDatePlayed(void)::$_0 &&>>()
{
  uint64_t v0;
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  mlcore::ContainerTable **v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  std::string *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  std::string *v19;
  __int128 v20;
  std::string v21;
  std::string __p;
  char v23;
  _QWORD v24[2];

  v0 = operator new();
  v1 = (_QWORD *)mediaplatform::Singleton<mlcore::ContainerTable>::sharedInstance();
  v2 = (std::__shared_weak_count *)v1[1];
  v24[0] = *v1;
  v24[1] = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  v5 = (mlcore::ContainerTable **)mediaplatform::Singleton<mlcore::ContainerTable>::sharedInstance();
  mlcore::ContainerTable::datePlayedColumn(*v5, (uint64_t)&__p);
  mlcore::DatabaseModelProperty<long long>::DatabaseModelProperty(v0, v24, (uint64_t)&__p);
  mlcore::PlaylistPropertyDatePlayed(void)::property = v0;
  if (v23 < 0)
    operator delete((void *)__p.__r_.__value_.__l.__size_);
  if (v2)
  {
    v6 = (unint64_t *)&v2->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v8 = mlcore::PlaylistPropertyDatePlayed(void)::property;
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  std::string::operator=((std::string *)(v8 + 40), &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v9 = mlcore::TypedEntityClass<mlcore::Playlist>::sharedPointer();
  v10 = mlcore::PlaylistPropertyDatePlayed(void)::property;
  v11 = mediaplatform::Singleton<mlcore::ContainerTable>::sharedInstance();
  v12 = *(_QWORD *)v11;
  if (*(char *)(*(_QWORD *)v11 + 31) >= 0)
    v13 = *(unsigned __int8 *)(*(_QWORD *)v11 + 31);
  else
    v13 = *(_QWORD *)(*(_QWORD *)v11 + 16);
  v14 = &v21;
  std::string::basic_string[abi:ne180100]((uint64_t)&v21, v13 + 1);
  if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v14 = (std::string *)v21.__r_.__value_.__r.__words[0];
  if (v13)
  {
    v17 = *(char **)(v12 + 8);
    v16 = (char *)(v12 + 8);
    v15 = v17;
    if (v16[23] >= 0)
      v18 = v16;
    else
      v18 = v15;
    memmove(v14, v18, v13);
  }
  *(_WORD *)((char *)&v14->__r_.__value_.__l.__data_ + v13) = 46;
  v19 = std::string::append(&v21, "datePlayed");
  v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  __p.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  mlcore::EntityClass::setPropertyForName(v9, v10, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
}

void sub_20A7F6578(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

uint64_t mlcore::PlaylistPropertyPlayCountUser(mlcore *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&mlcore::PlaylistPropertyPlayCountUser(void)::once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&mlcore::PlaylistPropertyPlayCountUser(void)::once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::PlaylistPropertyPlayCountUser(void)::$_0 &&>>);
  }
  return mlcore::PlaylistPropertyPlayCountUser(void)::property;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::PlaylistPropertyPlayCountUser(void)::$_0 &&>>()
{
  uint64_t v0;
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  mlcore::ContainerTable **v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  std::string *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  std::string *v19;
  __int128 v20;
  std::string v21;
  std::string __p;
  char v23;
  _QWORD v24[2];

  v0 = operator new();
  v1 = (_QWORD *)mediaplatform::Singleton<mlcore::ContainerTable>::sharedInstance();
  v2 = (std::__shared_weak_count *)v1[1];
  v24[0] = *v1;
  v24[1] = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  v5 = (mlcore::ContainerTable **)mediaplatform::Singleton<mlcore::ContainerTable>::sharedInstance();
  mlcore::ContainerTable::playCountUserColumn(*v5, (uint64_t)&__p);
  mlcore::DatabaseModelProperty<int>::DatabaseModelProperty(v0, v24, (uint64_t)&__p);
  mlcore::PlaylistPropertyPlayCountUser(void)::property = v0;
  if (v23 < 0)
    operator delete((void *)__p.__r_.__value_.__l.__size_);
  if (v2)
  {
    v6 = (unint64_t *)&v2->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v8 = mlcore::PlaylistPropertyPlayCountUser(void)::property;
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  std::string::operator=((std::string *)(v8 + 40), &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v9 = mlcore::TypedEntityClass<mlcore::Playlist>::sharedPointer();
  v10 = mlcore::PlaylistPropertyPlayCountUser(void)::property;
  v11 = mediaplatform::Singleton<mlcore::ContainerTable>::sharedInstance();
  v12 = *(_QWORD *)v11;
  if (*(char *)(*(_QWORD *)v11 + 31) >= 0)
    v13 = *(unsigned __int8 *)(*(_QWORD *)v11 + 31);
  else
    v13 = *(_QWORD *)(*(_QWORD *)v11 + 16);
  v14 = &v21;
  std::string::basic_string[abi:ne180100]((uint64_t)&v21, v13 + 1);
  if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v14 = (std::string *)v21.__r_.__value_.__r.__words[0];
  if (v13)
  {
    v17 = *(char **)(v12 + 8);
    v16 = (char *)(v12 + 8);
    v15 = v17;
    if (v16[23] >= 0)
      v18 = v16;
    else
      v18 = v15;
    memmove(v14, v18, v13);
  }
  *(_WORD *)((char *)&v14->__r_.__value_.__l.__data_ + v13) = 46;
  v19 = std::string::append(&v21, "playCountUser");
  v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  __p.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  mlcore::EntityClass::setPropertyForName(v9, v10, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
}

void sub_20A7F6864(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

uint64_t mlcore::PlaylistPropertyPlayCountRecent(mlcore *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&mlcore::PlaylistPropertyPlayCountRecent(void)::once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&mlcore::PlaylistPropertyPlayCountRecent(void)::once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::PlaylistPropertyPlayCountRecent(void)::$_0 &&>>);
  }
  return mlcore::PlaylistPropertyPlayCountRecent(void)::property;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::PlaylistPropertyPlayCountRecent(void)::$_0 &&>>()
{
  uint64_t v0;
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  mlcore::ContainerTable **v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  std::string *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  std::string *v19;
  __int128 v20;
  std::string v21;
  std::string __p;
  char v23;
  _QWORD v24[2];

  v0 = operator new();
  v1 = (_QWORD *)mediaplatform::Singleton<mlcore::ContainerTable>::sharedInstance();
  v2 = (std::__shared_weak_count *)v1[1];
  v24[0] = *v1;
  v24[1] = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  v5 = (mlcore::ContainerTable **)mediaplatform::Singleton<mlcore::ContainerTable>::sharedInstance();
  mlcore::ContainerTable::playCountRecentColumn(*v5, (uint64_t)&__p);
  mlcore::DatabaseModelProperty<int>::DatabaseModelProperty(v0, v24, (uint64_t)&__p);
  mlcore::PlaylistPropertyPlayCountRecent(void)::property = v0;
  if (v23 < 0)
    operator delete((void *)__p.__r_.__value_.__l.__size_);
  if (v2)
  {
    v6 = (unint64_t *)&v2->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v8 = mlcore::PlaylistPropertyPlayCountRecent(void)::property;
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  std::string::operator=((std::string *)(v8 + 40), &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v9 = mlcore::TypedEntityClass<mlcore::Playlist>::sharedPointer();
  v10 = mlcore::PlaylistPropertyPlayCountRecent(void)::property;
  v11 = mediaplatform::Singleton<mlcore::ContainerTable>::sharedInstance();
  v12 = *(_QWORD *)v11;
  if (*(char *)(*(_QWORD *)v11 + 31) >= 0)
    v13 = *(unsigned __int8 *)(*(_QWORD *)v11 + 31);
  else
    v13 = *(_QWORD *)(*(_QWORD *)v11 + 16);
  v14 = &v21;
  std::string::basic_string[abi:ne180100]((uint64_t)&v21, v13 + 1);
  if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v14 = (std::string *)v21.__r_.__value_.__r.__words[0];
  if (v13)
  {
    v17 = *(char **)(v12 + 8);
    v16 = (char *)(v12 + 8);
    v15 = v17;
    if (v16[23] >= 0)
      v18 = v16;
    else
      v18 = v15;
    memmove(v14, v18, v13);
  }
  *(_WORD *)((char *)&v14->__r_.__value_.__l.__data_ + v13) = 46;
  v19 = std::string::append(&v21, "playCountRecent");
  v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  __p.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  mlcore::EntityClass::setPropertyForName(v9, v10, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
}

void sub_20A7F6B50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::PlaylistPropertyParentPersistentID(void)::$_0 &&>>()
{
  uint64_t v0;
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  mlcore::ContainerTable **v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  std::string *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  std::string *v19;
  __int128 v20;
  std::string v21;
  std::string __p;
  char v23;
  _QWORD v24[2];

  v0 = operator new();
  v1 = (_QWORD *)mediaplatform::Singleton<mlcore::ContainerTable>::sharedInstance();
  v2 = (std::__shared_weak_count *)v1[1];
  v24[0] = *v1;
  v24[1] = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  v5 = (mlcore::ContainerTable **)mediaplatform::Singleton<mlcore::ContainerTable>::sharedInstance();
  mlcore::ContainerTable::parentPersistentIDColumn(*v5, (uint64_t)&__p);
  mlcore::DatabaseModelProperty<long long>::DatabaseModelProperty(v0, v24, (uint64_t)&__p);
  mlcore::PlaylistPropertyParentPersistentID(void)::property = v0;
  if (v23 < 0)
    operator delete((void *)__p.__r_.__value_.__l.__size_);
  if (v2)
  {
    v6 = (unint64_t *)&v2->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v8 = mlcore::PlaylistPropertyParentPersistentID(void)::property;
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  std::string::operator=((std::string *)(v8 + 40), &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v9 = mlcore::TypedEntityClass<mlcore::Playlist>::sharedPointer();
  v10 = mlcore::PlaylistPropertyParentPersistentID(void)::property;
  v11 = mediaplatform::Singleton<mlcore::ContainerTable>::sharedInstance();
  v12 = *(_QWORD *)v11;
  if (*(char *)(*(_QWORD *)v11 + 31) >= 0)
    v13 = *(unsigned __int8 *)(*(_QWORD *)v11 + 31);
  else
    v13 = *(_QWORD *)(*(_QWORD *)v11 + 16);
  v14 = &v21;
  std::string::basic_string[abi:ne180100]((uint64_t)&v21, v13 + 1);
  if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v14 = (std::string *)v21.__r_.__value_.__r.__words[0];
  if (v13)
  {
    v17 = *(char **)(v12 + 8);
    v16 = (char *)(v12 + 8);
    v15 = v17;
    if (v16[23] >= 0)
      v18 = v16;
    else
      v18 = v15;
    memmove(v14, v18, v13);
  }
  *(_WORD *)((char *)&v14->__r_.__value_.__l.__data_ + v13) = 46;
  v19 = std::string::append(&v21, "parentPersistentID");
  v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  __p.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  mlcore::EntityClass::setPropertyForName(v9, v10, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
}

void sub_20A7F6DE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

uint64_t mlcore::PlaylistPropertyContainedMediaType(mlcore *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&mlcore::PlaylistPropertyContainedMediaType(void)::once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&mlcore::PlaylistPropertyContainedMediaType(void)::once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::PlaylistPropertyContainedMediaType(void)::$_0 &&>>);
  }
  return mlcore::PlaylistPropertyContainedMediaType(void)::property;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::PlaylistPropertyContainedMediaType(void)::$_0 &&>>()
{
  uint64_t v0;
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  mlcore::ContainerTable **v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  std::string *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  std::string *v19;
  __int128 v20;
  std::string v21;
  std::string __p;
  char v23;
  _QWORD v24[2];

  v0 = operator new();
  v1 = (_QWORD *)mediaplatform::Singleton<mlcore::ContainerTable>::sharedInstance();
  v2 = (std::__shared_weak_count *)v1[1];
  v24[0] = *v1;
  v24[1] = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  v5 = (mlcore::ContainerTable **)mediaplatform::Singleton<mlcore::ContainerTable>::sharedInstance();
  mlcore::ContainerTable::containedMediaTypeColumn(*v5, (uint64_t)&__p);
  mlcore::DatabaseModelProperty<int>::DatabaseModelProperty(v0, v24, (uint64_t)&__p);
  mlcore::PlaylistPropertyContainedMediaType(void)::property = v0;
  if (v23 < 0)
    operator delete((void *)__p.__r_.__value_.__l.__size_);
  if (v2)
  {
    v6 = (unint64_t *)&v2->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v8 = mlcore::PlaylistPropertyContainedMediaType(void)::property;
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  std::string::operator=((std::string *)(v8 + 40), &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v9 = mlcore::TypedEntityClass<mlcore::Playlist>::sharedPointer();
  v10 = mlcore::PlaylistPropertyContainedMediaType(void)::property;
  v11 = mediaplatform::Singleton<mlcore::ContainerTable>::sharedInstance();
  v12 = *(_QWORD *)v11;
  if (*(char *)(*(_QWORD *)v11 + 31) >= 0)
    v13 = *(unsigned __int8 *)(*(_QWORD *)v11 + 31);
  else
    v13 = *(_QWORD *)(*(_QWORD *)v11 + 16);
  v14 = &v21;
  std::string::basic_string[abi:ne180100]((uint64_t)&v21, v13 + 1);
  if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v14 = (std::string *)v21.__r_.__value_.__r.__words[0];
  if (v13)
  {
    v17 = *(char **)(v12 + 8);
    v16 = (char *)(v12 + 8);
    v15 = v17;
    if (v16[23] >= 0)
      v18 = v16;
    else
      v18 = v15;
    memmove(v14, v18, v13);
  }
  *(_WORD *)((char *)&v14->__r_.__value_.__l.__data_ + v13) = 46;
  v19 = std::string::append(&v21, "containedMediaType");
  v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  __p.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  mlcore::EntityClass::setPropertyForName(v9, v10, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
}

void sub_20A7F70CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::PlaylistPropertyName(void)::$_0 &&>>()
{
  uint64_t v0;
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  mlcore::ContainerTable **v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  std::string *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  std::string *v19;
  __int128 v20;
  std::string v21;
  std::string __str;
  _QWORD v23[2];

  v0 = operator new();
  v1 = (_QWORD *)mediaplatform::Singleton<mlcore::ContainerTable>::sharedInstance();
  v2 = (std::__shared_weak_count *)v1[1];
  v23[0] = *v1;
  v23[1] = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  v5 = (mlcore::ContainerTable **)mediaplatform::Singleton<mlcore::ContainerTable>::sharedInstance();
  mlcore::ContainerTable::nameColumn(*v5, (uint64_t)&__str);
  mlcore::DatabaseModelProperty<std::string>::DatabaseModelProperty(v0, v23, (uint64_t)&__str);
  mlcore::PlaylistPropertyName(void)::property = v0;
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&__str);
  if (v2)
  {
    v6 = (unint64_t *)&v2->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v8 = mlcore::PlaylistPropertyName(void)::property;
  std::string::basic_string[abi:ne180100]<0>(&__str, "");
  std::string::operator=((std::string *)(v8 + 40), &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  v9 = mlcore::TypedEntityClass<mlcore::Playlist>::sharedPointer();
  v10 = mlcore::PlaylistPropertyName(void)::property;
  v11 = mediaplatform::Singleton<mlcore::ContainerTable>::sharedInstance();
  v12 = *(_QWORD *)v11;
  if (*(char *)(*(_QWORD *)v11 + 31) >= 0)
    v13 = *(unsigned __int8 *)(*(_QWORD *)v11 + 31);
  else
    v13 = *(_QWORD *)(*(_QWORD *)v11 + 16);
  v14 = &v21;
  std::string::basic_string[abi:ne180100]((uint64_t)&v21, v13 + 1);
  if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v14 = (std::string *)v21.__r_.__value_.__r.__words[0];
  if (v13)
  {
    v17 = *(char **)(v12 + 8);
    v16 = (char *)(v12 + 8);
    v15 = v17;
    if (v16[23] >= 0)
      v18 = v16;
    else
      v18 = v15;
    memmove(v14, v18, v13);
  }
  *(_WORD *)((char *)&v14->__r_.__value_.__l.__data_ + v13) = 46;
  v19 = std::string::append(&v21, "name");
  v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  __str.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  mlcore::EntityClass::setPropertyForName(v9, v10, &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
}

void sub_20A7F7354(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::PlaylistPropertyDateCreated(void)::$_0 &&>>()
{
  uint64_t v0;
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  mlcore::ContainerTable **v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  std::string *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  std::string *v19;
  __int128 v20;
  std::string v21;
  std::string __p;
  char v23;
  _QWORD v24[2];

  v0 = operator new();
  v1 = (_QWORD *)mediaplatform::Singleton<mlcore::ContainerTable>::sharedInstance();
  v2 = (std::__shared_weak_count *)v1[1];
  v24[0] = *v1;
  v24[1] = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  v5 = (mlcore::ContainerTable **)mediaplatform::Singleton<mlcore::ContainerTable>::sharedInstance();
  mlcore::ContainerTable::dateCreatedColumn(*v5, (uint64_t)&__p);
  mlcore::DatabaseModelProperty<long long>::DatabaseModelProperty(v0, v24, (uint64_t)&__p);
  mlcore::PlaylistPropertyDateCreated(void)::property = v0;
  if (v23 < 0)
    operator delete((void *)__p.__r_.__value_.__l.__size_);
  if (v2)
  {
    v6 = (unint64_t *)&v2->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v8 = mlcore::PlaylistPropertyDateCreated(void)::property;
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  std::string::operator=((std::string *)(v8 + 40), &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v9 = mlcore::TypedEntityClass<mlcore::Playlist>::sharedPointer();
  v10 = mlcore::PlaylistPropertyDateCreated(void)::property;
  v11 = mediaplatform::Singleton<mlcore::ContainerTable>::sharedInstance();
  v12 = *(_QWORD *)v11;
  if (*(char *)(*(_QWORD *)v11 + 31) >= 0)
    v13 = *(unsigned __int8 *)(*(_QWORD *)v11 + 31);
  else
    v13 = *(_QWORD *)(*(_QWORD *)v11 + 16);
  v14 = &v21;
  std::string::basic_string[abi:ne180100]((uint64_t)&v21, v13 + 1);
  if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v14 = (std::string *)v21.__r_.__value_.__r.__words[0];
  if (v13)
  {
    v17 = *(char **)(v12 + 8);
    v16 = (char *)(v12 + 8);
    v15 = v17;
    if (v16[23] >= 0)
      v18 = v16;
    else
      v18 = v15;
    memmove(v14, v18, v13);
  }
  *(_WORD *)((char *)&v14->__r_.__value_.__l.__data_ + v13) = 46;
  v19 = std::string::append(&v21, "dateCreated");
  v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  __p.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  mlcore::EntityClass::setPropertyForName(v9, v10, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
}

void sub_20A7F75DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::PlaylistPropertyDateModified(void)::$_0 &&>>()
{
  uint64_t v0;
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  mlcore::ContainerTable **v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  std::string *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  std::string *v19;
  __int128 v20;
  std::string v21;
  std::string __p;
  char v23;
  _QWORD v24[2];

  v0 = operator new();
  v1 = (_QWORD *)mediaplatform::Singleton<mlcore::ContainerTable>::sharedInstance();
  v2 = (std::__shared_weak_count *)v1[1];
  v24[0] = *v1;
  v24[1] = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  v5 = (mlcore::ContainerTable **)mediaplatform::Singleton<mlcore::ContainerTable>::sharedInstance();
  mlcore::ContainerTable::dateModifiedColumn(*v5, (uint64_t)&__p);
  mlcore::DatabaseModelProperty<long long>::DatabaseModelProperty(v0, v24, (uint64_t)&__p);
  mlcore::PlaylistPropertyDateModified(void)::property = v0;
  if (v23 < 0)
    operator delete((void *)__p.__r_.__value_.__l.__size_);
  if (v2)
  {
    v6 = (unint64_t *)&v2->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v8 = mlcore::PlaylistPropertyDateModified(void)::property;
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  std::string::operator=((std::string *)(v8 + 40), &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v9 = mlcore::TypedEntityClass<mlcore::Playlist>::sharedPointer();
  v10 = mlcore::PlaylistPropertyDateModified(void)::property;
  v11 = mediaplatform::Singleton<mlcore::ContainerTable>::sharedInstance();
  v12 = *(_QWORD *)v11;
  if (*(char *)(*(_QWORD *)v11 + 31) >= 0)
    v13 = *(unsigned __int8 *)(*(_QWORD *)v11 + 31);
  else
    v13 = *(_QWORD *)(*(_QWORD *)v11 + 16);
  v14 = &v21;
  std::string::basic_string[abi:ne180100]((uint64_t)&v21, v13 + 1);
  if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v14 = (std::string *)v21.__r_.__value_.__r.__words[0];
  if (v13)
  {
    v17 = *(char **)(v12 + 8);
    v16 = (char *)(v12 + 8);
    v15 = v17;
    if (v16[23] >= 0)
      v18 = v16;
    else
      v18 = v15;
    memmove(v14, v18, v13);
  }
  *(_WORD *)((char *)&v14->__r_.__value_.__l.__data_ + v13) = 46;
  v19 = std::string::append(&v21, "dateModified");
  v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  __p.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  mlcore::EntityClass::setPropertyForName(v9, v10, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
}

void sub_20A7F786C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::PlaylistPropertyDateDownloaded(void)::$_0 &&>>()
{
  uint64_t v0;
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  mlcore::ContainerTable **v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  std::string *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  std::string *v19;
  __int128 v20;
  std::string v21;
  std::string __p;
  char v23;
  _QWORD v24[2];

  v0 = operator new();
  v1 = (_QWORD *)mediaplatform::Singleton<mlcore::ContainerTable>::sharedInstance();
  v2 = (std::__shared_weak_count *)v1[1];
  v24[0] = *v1;
  v24[1] = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  v5 = (mlcore::ContainerTable **)mediaplatform::Singleton<mlcore::ContainerTable>::sharedInstance();
  mlcore::ContainerTable::dateDownloadedColumn(*v5, (uint64_t)&__p);
  mlcore::DatabaseModelProperty<long long>::DatabaseModelProperty(v0, v24, (uint64_t)&__p);
  mlcore::PlaylistPropertyDateDownloaded(void)::property = v0;
  if (v23 < 0)
    operator delete((void *)__p.__r_.__value_.__l.__size_);
  if (v2)
  {
    v6 = (unint64_t *)&v2->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v8 = mlcore::PlaylistPropertyDateDownloaded(void)::property;
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  std::string::operator=((std::string *)(v8 + 40), &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v9 = mlcore::TypedEntityClass<mlcore::Playlist>::sharedPointer();
  v10 = mlcore::PlaylistPropertyDateDownloaded(void)::property;
  v11 = mediaplatform::Singleton<mlcore::ContainerTable>::sharedInstance();
  v12 = *(_QWORD *)v11;
  if (*(char *)(*(_QWORD *)v11 + 31) >= 0)
    v13 = *(unsigned __int8 *)(*(_QWORD *)v11 + 31);
  else
    v13 = *(_QWORD *)(*(_QWORD *)v11 + 16);
  v14 = &v21;
  std::string::basic_string[abi:ne180100]((uint64_t)&v21, v13 + 1);
  if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v14 = (std::string *)v21.__r_.__value_.__r.__words[0];
  if (v13)
  {
    v17 = *(char **)(v12 + 8);
    v16 = (char *)(v12 + 8);
    v15 = v17;
    if (v16[23] >= 0)
      v18 = v16;
    else
      v18 = v15;
    memmove(v14, v18, v13);
  }
  *(_WORD *)((char *)&v14->__r_.__value_.__l.__data_ + v13) = 46;
  v19 = std::string::append(&v21, "dateDownloaded");
  v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  __p.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  mlcore::EntityClass::setPropertyForName(v9, v10, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
}

void sub_20A7F7AFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::PlaylistPropertyNameOrder(void)::$_0 &&>>()
{
  uint64_t v0;
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  mlcore::ContainerTable **v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  std::string *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  std::string *v19;
  __int128 v20;
  std::string v21;
  std::string __p;
  char v23;
  _QWORD v24[2];

  v0 = operator new();
  v1 = (_QWORD *)mediaplatform::Singleton<mlcore::ContainerTable>::sharedInstance();
  v2 = (std::__shared_weak_count *)v1[1];
  v24[0] = *v1;
  v24[1] = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  v5 = (mlcore::ContainerTable **)mediaplatform::Singleton<mlcore::ContainerTable>::sharedInstance();
  mlcore::ContainerTable::nameOrderColumn(*v5, (uint64_t)&__p);
  mlcore::DatabaseModelProperty<long long>::DatabaseModelProperty(v0, v24, (uint64_t)&__p);
  mlcore::PlaylistPropertyNameOrder(void)::property = v0;
  if (v23 < 0)
    operator delete((void *)__p.__r_.__value_.__l.__size_);
  if (v2)
  {
    v6 = (unint64_t *)&v2->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v8 = mlcore::PlaylistPropertyNameOrder(void)::property;
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  std::string::operator=((std::string *)(v8 + 40), &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v9 = mlcore::TypedEntityClass<mlcore::Playlist>::sharedPointer();
  v10 = mlcore::PlaylistPropertyNameOrder(void)::property;
  v11 = mediaplatform::Singleton<mlcore::ContainerTable>::sharedInstance();
  v12 = *(_QWORD *)v11;
  if (*(char *)(*(_QWORD *)v11 + 31) >= 0)
    v13 = *(unsigned __int8 *)(*(_QWORD *)v11 + 31);
  else
    v13 = *(_QWORD *)(*(_QWORD *)v11 + 16);
  v14 = &v21;
  std::string::basic_string[abi:ne180100]((uint64_t)&v21, v13 + 1);
  if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v14 = (std::string *)v21.__r_.__value_.__r.__words[0];
  if (v13)
  {
    v17 = *(char **)(v12 + 8);
    v16 = (char *)(v12 + 8);
    v15 = v17;
    if (v16[23] >= 0)
      v18 = v16;
    else
      v18 = v15;
    memmove(v14, v18, v13);
  }
  *(_WORD *)((char *)&v14->__r_.__value_.__l.__data_ + v13) = 46;
  v19 = std::string::append(&v21, "nameOrder");
  v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  __p.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  mlcore::EntityClass::setPropertyForName(v9, v10, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
}

void sub_20A7F7D8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::PlaylistPropertyDescription(void)::$_0 &&>>()
{
  uint64_t v0;
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  mlcore::ContainerTable **v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  std::string *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  std::string *v19;
  __int128 v20;
  std::string v21;
  std::string __str;
  _QWORD v23[2];

  v0 = operator new();
  v1 = (_QWORD *)mediaplatform::Singleton<mlcore::ContainerTable>::sharedInstance();
  v2 = (std::__shared_weak_count *)v1[1];
  v23[0] = *v1;
  v23[1] = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  v5 = (mlcore::ContainerTable **)mediaplatform::Singleton<mlcore::ContainerTable>::sharedInstance();
  mlcore::ContainerTable::descriptionColumn(*v5, (uint64_t)&__str);
  mlcore::DatabaseModelProperty<std::string>::DatabaseModelProperty(v0, v23, (uint64_t)&__str);
  mlcore::PlaylistPropertyDescription(void)::property = v0;
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&__str);
  if (v2)
  {
    v6 = (unint64_t *)&v2->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v8 = mlcore::PlaylistPropertyDescription(void)::property;
  std::string::basic_string[abi:ne180100]<0>(&__str, "");
  std::string::operator=((std::string *)(v8 + 40), &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  v9 = mlcore::TypedEntityClass<mlcore::Playlist>::sharedPointer();
  v10 = mlcore::PlaylistPropertyDescription(void)::property;
  v11 = mediaplatform::Singleton<mlcore::ContainerTable>::sharedInstance();
  v12 = *(_QWORD *)v11;
  if (*(char *)(*(_QWORD *)v11 + 31) >= 0)
    v13 = *(unsigned __int8 *)(*(_QWORD *)v11 + 31);
  else
    v13 = *(_QWORD *)(*(_QWORD *)v11 + 16);
  v14 = &v21;
  std::string::basic_string[abi:ne180100]((uint64_t)&v21, v13 + 1);
  if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v14 = (std::string *)v21.__r_.__value_.__r.__words[0];
  if (v13)
  {
    v17 = *(char **)(v12 + 8);
    v16 = (char *)(v12 + 8);
    v15 = v17;
    if (v16[23] >= 0)
      v18 = v16;
    else
      v18 = v15;
    memmove(v14, v18, v13);
  }
  *(_WORD *)((char *)&v14->__r_.__value_.__l.__data_ + v13) = 46;
  v19 = std::string::append(&v21, "description");
  v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  __str.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  mlcore::EntityClass::setPropertyForName(v9, v10, &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
}

void sub_20A7F8014(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::PlaylistPropertyCloudAuthorName(void)::$_0 &&>>()
{
  uint64_t v0;
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  mlcore::ContainerTable **v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  std::string *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  std::string *v19;
  __int128 v20;
  std::string v21;
  std::string __str;
  _QWORD v23[2];

  v0 = operator new();
  v1 = (_QWORD *)mediaplatform::Singleton<mlcore::ContainerTable>::sharedInstance();
  v2 = (std::__shared_weak_count *)v1[1];
  v23[0] = *v1;
  v23[1] = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  v5 = (mlcore::ContainerTable **)mediaplatform::Singleton<mlcore::ContainerTable>::sharedInstance();
  mlcore::ContainerTable::cloudAuthorDisplayNameColumn(*v5, (uint64_t)&__str);
  mlcore::DatabaseModelProperty<std::string>::DatabaseModelProperty(v0, v23, (uint64_t)&__str);
  mlcore::PlaylistPropertyCloudAuthorName(void)::property = v0;
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&__str);
  if (v2)
  {
    v6 = (unint64_t *)&v2->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v8 = mlcore::PlaylistPropertyCloudAuthorName(void)::property;
  std::string::basic_string[abi:ne180100]<0>(&__str, "");
  std::string::operator=((std::string *)(v8 + 40), &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  v9 = mlcore::TypedEntityClass<mlcore::Playlist>::sharedPointer();
  v10 = mlcore::PlaylistPropertyCloudAuthorName(void)::property;
  v11 = mediaplatform::Singleton<mlcore::ContainerTable>::sharedInstance();
  v12 = *(_QWORD *)v11;
  if (*(char *)(*(_QWORD *)v11 + 31) >= 0)
    v13 = *(unsigned __int8 *)(*(_QWORD *)v11 + 31);
  else
    v13 = *(_QWORD *)(*(_QWORD *)v11 + 16);
  v14 = &v21;
  std::string::basic_string[abi:ne180100]((uint64_t)&v21, v13 + 1);
  if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v14 = (std::string *)v21.__r_.__value_.__r.__words[0];
  if (v13)
  {
    v17 = *(char **)(v12 + 8);
    v16 = (char *)(v12 + 8);
    v15 = v17;
    if (v16[23] >= 0)
      v18 = v16;
    else
      v18 = v15;
    memmove(v14, v18, v13);
  }
  *(_WORD *)((char *)&v14->__r_.__value_.__l.__data_ + v13) = 46;
  v19 = std::string::append(&v21, "cloudAuthorName");
  v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  __str.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  mlcore::EntityClass::setPropertyForName(v9, v10, &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
}

void sub_20A7F8294(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::PlaylistPropertyStoreCloudID(void)::$_0 &&>>()
{
  uint64_t v0;
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  mlcore::ContainerTable **v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  std::string *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  std::string *v19;
  __int128 v20;
  std::string v21;
  std::string __p;
  char v23;
  _QWORD v24[2];

  v0 = operator new();
  v1 = (_QWORD *)mediaplatform::Singleton<mlcore::ContainerTable>::sharedInstance();
  v2 = (std::__shared_weak_count *)v1[1];
  v24[0] = *v1;
  v24[1] = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  v5 = (mlcore::ContainerTable **)mediaplatform::Singleton<mlcore::ContainerTable>::sharedInstance();
  mlcore::ContainerTable::storeCloudIDColumn(*v5, (uint64_t)&__p);
  mlcore::DatabaseModelProperty<long long>::DatabaseModelProperty(v0, v24, (uint64_t)&__p);
  mlcore::PlaylistPropertyStoreCloudID(void)::property = v0;
  if (v23 < 0)
    operator delete((void *)__p.__r_.__value_.__l.__size_);
  if (v2)
  {
    v6 = (unint64_t *)&v2->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v8 = mlcore::PlaylistPropertyStoreCloudID(void)::property;
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  std::string::operator=((std::string *)(v8 + 40), &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v9 = mlcore::TypedEntityClass<mlcore::Playlist>::sharedPointer();
  v10 = mlcore::PlaylistPropertyStoreCloudID(void)::property;
  v11 = mediaplatform::Singleton<mlcore::ContainerTable>::sharedInstance();
  v12 = *(_QWORD *)v11;
  if (*(char *)(*(_QWORD *)v11 + 31) >= 0)
    v13 = *(unsigned __int8 *)(*(_QWORD *)v11 + 31);
  else
    v13 = *(_QWORD *)(*(_QWORD *)v11 + 16);
  v14 = &v21;
  std::string::basic_string[abi:ne180100]((uint64_t)&v21, v13 + 1);
  if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v14 = (std::string *)v21.__r_.__value_.__r.__words[0];
  if (v13)
  {
    v17 = *(char **)(v12 + 8);
    v16 = (char *)(v12 + 8);
    v15 = v17;
    if (v16[23] >= 0)
      v18 = v16;
    else
      v18 = v15;
    memmove(v14, v18, v13);
  }
  *(_WORD *)((char *)&v14->__r_.__value_.__l.__data_ + v13) = 46;
  v19 = std::string::append(&v21, "storeCloudID");
  v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  __p.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  mlcore::EntityClass::setPropertyForName(v9, v10, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
}

void sub_20A7F851C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::PlaylistPropertyIsOwner(void)::$_0 &&>>()
{
  uint64_t v0;
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  mlcore::ContainerTable **v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  std::string *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  std::string *v19;
  __int128 v20;
  std::string v21;
  std::string __p;
  char v23;
  _QWORD v24[2];

  v0 = operator new();
  v1 = (_QWORD *)mediaplatform::Singleton<mlcore::ContainerTable>::sharedInstance();
  v2 = (std::__shared_weak_count *)v1[1];
  v24[0] = *v1;
  v24[1] = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  v5 = (mlcore::ContainerTable **)mediaplatform::Singleton<mlcore::ContainerTable>::sharedInstance();
  mlcore::ContainerTable::isOwnerColumn(*v5, (uint64_t)&__p);
  mlcore::DatabaseModelProperty<int>::DatabaseModelProperty(v0, v24, (uint64_t)&__p);
  mlcore::PlaylistPropertyIsOwner(void)::property = v0;
  if (v23 < 0)
    operator delete((void *)__p.__r_.__value_.__l.__size_);
  if (v2)
  {
    v6 = (unint64_t *)&v2->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v8 = mlcore::PlaylistPropertyIsOwner(void)::property;
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  std::string::operator=((std::string *)(v8 + 40), &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v9 = mlcore::TypedEntityClass<mlcore::Playlist>::sharedPointer();
  v10 = mlcore::PlaylistPropertyIsOwner(void)::property;
  v11 = mediaplatform::Singleton<mlcore::ContainerTable>::sharedInstance();
  v12 = *(_QWORD *)v11;
  if (*(char *)(*(_QWORD *)v11 + 31) >= 0)
    v13 = *(unsigned __int8 *)(*(_QWORD *)v11 + 31);
  else
    v13 = *(_QWORD *)(*(_QWORD *)v11 + 16);
  v14 = &v21;
  std::string::basic_string[abi:ne180100]((uint64_t)&v21, v13 + 1);
  if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v14 = (std::string *)v21.__r_.__value_.__r.__words[0];
  if (v13)
  {
    v17 = *(char **)(v12 + 8);
    v16 = (char *)(v12 + 8);
    v15 = v17;
    if (v16[23] >= 0)
      v18 = v16;
    else
      v18 = v15;
    memmove(v14, v18, v13);
  }
  *(_WORD *)((char *)&v14->__r_.__value_.__l.__data_ + v13) = 46;
  v19 = std::string::append(&v21, "isOwner");
  v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  __p.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  mlcore::EntityClass::setPropertyForName(v9, v10, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
}

void sub_20A7F87AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::PlaylistPropertyIsEditable(void)::$_0 &&>>()
{
  uint64_t v0;
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  mlcore::ContainerTable **v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  std::string *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  std::string *v19;
  __int128 v20;
  std::string v21;
  std::string __p;
  char v23;
  _QWORD v24[2];

  v0 = operator new();
  v1 = (_QWORD *)mediaplatform::Singleton<mlcore::ContainerTable>::sharedInstance();
  v2 = (std::__shared_weak_count *)v1[1];
  v24[0] = *v1;
  v24[1] = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  v5 = (mlcore::ContainerTable **)mediaplatform::Singleton<mlcore::ContainerTable>::sharedInstance();
  mlcore::ContainerTable::isEditableColumn(*v5, (uint64_t)&__p);
  mlcore::DatabaseModelProperty<int>::DatabaseModelProperty(v0, v24, (uint64_t)&__p);
  mlcore::PlaylistPropertyIsEditable(void)::property = v0;
  if (v23 < 0)
    operator delete((void *)__p.__r_.__value_.__l.__size_);
  if (v2)
  {
    v6 = (unint64_t *)&v2->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v8 = mlcore::PlaylistPropertyIsEditable(void)::property;
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  std::string::operator=((std::string *)(v8 + 40), &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v9 = mlcore::TypedEntityClass<mlcore::Playlist>::sharedPointer();
  v10 = mlcore::PlaylistPropertyIsEditable(void)::property;
  v11 = mediaplatform::Singleton<mlcore::ContainerTable>::sharedInstance();
  v12 = *(_QWORD *)v11;
  if (*(char *)(*(_QWORD *)v11 + 31) >= 0)
    v13 = *(unsigned __int8 *)(*(_QWORD *)v11 + 31);
  else
    v13 = *(_QWORD *)(*(_QWORD *)v11 + 16);
  v14 = &v21;
  std::string::basic_string[abi:ne180100]((uint64_t)&v21, v13 + 1);
  if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v14 = (std::string *)v21.__r_.__value_.__r.__words[0];
  if (v13)
  {
    v17 = *(char **)(v12 + 8);
    v16 = (char *)(v12 + 8);
    v15 = v17;
    if (v16[23] >= 0)
      v18 = v16;
    else
      v18 = v15;
    memmove(v14, v18, v13);
  }
  *(_WORD *)((char *)&v14->__r_.__value_.__l.__data_ + v13) = 46;
  v19 = std::string::append(&v21, "isEditable");
  v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  __p.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  mlcore::EntityClass::setPropertyForName(v9, v10, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
}

void sub_20A7F8A3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::PlaylistPropertyLikedState(void)::$_0 &&>>()
{
  uint64_t v0;
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  mlcore::ContainerTable **v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  std::string *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  std::string *v19;
  __int128 v20;
  std::string v21;
  std::string __p;
  char v23;
  _QWORD v24[2];

  v0 = operator new();
  v1 = (_QWORD *)mediaplatform::Singleton<mlcore::ContainerTable>::sharedInstance();
  v2 = (std::__shared_weak_count *)v1[1];
  v24[0] = *v1;
  v24[1] = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  v5 = (mlcore::ContainerTable **)mediaplatform::Singleton<mlcore::ContainerTable>::sharedInstance();
  mlcore::ContainerTable::likedStateColumn(*v5, (uint64_t)&__p);
  mlcore::DatabaseModelProperty<int>::DatabaseModelProperty(v0, v24, (uint64_t)&__p);
  mlcore::PlaylistPropertyLikedState(void)::property = v0;
  if (v23 < 0)
    operator delete((void *)__p.__r_.__value_.__l.__size_);
  if (v2)
  {
    v6 = (unint64_t *)&v2->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v8 = mlcore::PlaylistPropertyLikedState(void)::property;
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  std::string::operator=((std::string *)(v8 + 40), &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v9 = mlcore::TypedEntityClass<mlcore::Playlist>::sharedPointer();
  v10 = mlcore::PlaylistPropertyLikedState(void)::property;
  v11 = mediaplatform::Singleton<mlcore::ContainerTable>::sharedInstance();
  v12 = *(_QWORD *)v11;
  if (*(char *)(*(_QWORD *)v11 + 31) >= 0)
    v13 = *(unsigned __int8 *)(*(_QWORD *)v11 + 31);
  else
    v13 = *(_QWORD *)(*(_QWORD *)v11 + 16);
  v14 = &v21;
  std::string::basic_string[abi:ne180100]((uint64_t)&v21, v13 + 1);
  if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v14 = (std::string *)v21.__r_.__value_.__r.__words[0];
  if (v13)
  {
    v17 = *(char **)(v12 + 8);
    v16 = (char *)(v12 + 8);
    v15 = v17;
    if (v16[23] >= 0)
      v18 = v16;
    else
      v18 = v15;
    memmove(v14, v18, v13);
  }
  *(_WORD *)((char *)&v14->__r_.__value_.__l.__data_ + v13) = 46;
  v19 = std::string::append(&v21, "likeState");
  v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  __p.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  mlcore::EntityClass::setPropertyForName(v9, v10, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
}

void sub_20A7F8CCC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::PlaylistPropertyIsSubscribed(void)::$_0 &&>>()
{
  uint64_t v0;
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  mlcore::ContainerTable **v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  std::string *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  std::string *v19;
  __int128 v20;
  std::string v21;
  std::string __p;
  char v23;
  _QWORD v24[2];

  v0 = operator new();
  v1 = (_QWORD *)mediaplatform::Singleton<mlcore::ContainerTable>::sharedInstance();
  v2 = (std::__shared_weak_count *)v1[1];
  v24[0] = *v1;
  v24[1] = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  v5 = (mlcore::ContainerTable **)mediaplatform::Singleton<mlcore::ContainerTable>::sharedInstance();
  mlcore::ContainerTable::cloudIsSubscribedColumn(*v5, (uint64_t)&__p);
  mlcore::DatabaseModelProperty<int>::DatabaseModelProperty(v0, v24, (uint64_t)&__p);
  mlcore::PlaylistPropertyIsSubscribed(void)::property = v0;
  if (v23 < 0)
    operator delete((void *)__p.__r_.__value_.__l.__size_);
  if (v2)
  {
    v6 = (unint64_t *)&v2->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v8 = mlcore::PlaylistPropertyIsSubscribed(void)::property;
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  std::string::operator=((std::string *)(v8 + 40), &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v9 = mlcore::TypedEntityClass<mlcore::Playlist>::sharedPointer();
  v10 = mlcore::PlaylistPropertyIsSubscribed(void)::property;
  v11 = mediaplatform::Singleton<mlcore::ContainerTable>::sharedInstance();
  v12 = *(_QWORD *)v11;
  if (*(char *)(*(_QWORD *)v11 + 31) >= 0)
    v13 = *(unsigned __int8 *)(*(_QWORD *)v11 + 31);
  else
    v13 = *(_QWORD *)(*(_QWORD *)v11 + 16);
  v14 = &v21;
  std::string::basic_string[abi:ne180100]((uint64_t)&v21, v13 + 1);
  if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v14 = (std::string *)v21.__r_.__value_.__r.__words[0];
  if (v13)
  {
    v17 = *(char **)(v12 + 8);
    v16 = (char *)(v12 + 8);
    v15 = v17;
    if (v16[23] >= 0)
      v18 = v16;
    else
      v18 = v15;
    memmove(v14, v18, v13);
  }
  *(_WORD *)((char *)&v14->__r_.__value_.__l.__data_ + v13) = 46;
  v19 = std::string::append(&v21, "isSubscribed");
  v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  __p.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  mlcore::EntityClass::setPropertyForName(v9, v10, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
}

void sub_20A7F8F5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::PlaylistPropertyIsCuratorOwned(void)::$_0 &&>>()
{
  uint64_t v0;
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  mlcore::ContainerTable **v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  std::string *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  std::string *v19;
  __int128 v20;
  std::string v21;
  std::string __p;
  char v23;
  _QWORD v24[2];

  v0 = operator new();
  v1 = (_QWORD *)mediaplatform::Singleton<mlcore::ContainerTable>::sharedInstance();
  v2 = (std::__shared_weak_count *)v1[1];
  v24[0] = *v1;
  v24[1] = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  v5 = (mlcore::ContainerTable **)mediaplatform::Singleton<mlcore::ContainerTable>::sharedInstance();
  mlcore::ContainerTable::cloudIsCuratorPlaylistColumn(*v5, (uint64_t)&__p);
  mlcore::DatabaseModelProperty<int>::DatabaseModelProperty(v0, v24, (uint64_t)&__p);
  mlcore::PlaylistPropertyIsCuratorOwned(void)::property = v0;
  if (v23 < 0)
    operator delete((void *)__p.__r_.__value_.__l.__size_);
  if (v2)
  {
    v6 = (unint64_t *)&v2->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v8 = mlcore::PlaylistPropertyIsCuratorOwned(void)::property;
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  std::string::operator=((std::string *)(v8 + 40), &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v9 = mlcore::TypedEntityClass<mlcore::Playlist>::sharedPointer();
  v10 = mlcore::PlaylistPropertyIsCuratorOwned(void)::property;
  v11 = mediaplatform::Singleton<mlcore::ContainerTable>::sharedInstance();
  v12 = *(_QWORD *)v11;
  if (*(char *)(*(_QWORD *)v11 + 31) >= 0)
    v13 = *(unsigned __int8 *)(*(_QWORD *)v11 + 31);
  else
    v13 = *(_QWORD *)(*(_QWORD *)v11 + 16);
  v14 = &v21;
  std::string::basic_string[abi:ne180100]((uint64_t)&v21, v13 + 1);
  if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v14 = (std::string *)v21.__r_.__value_.__r.__words[0];
  if (v13)
  {
    v17 = *(char **)(v12 + 8);
    v16 = (char *)(v12 + 8);
    v15 = v17;
    if (v16[23] >= 0)
      v18 = v16;
    else
      v18 = v15;
    memmove(v14, v18, v13);
  }
  *(_WORD *)((char *)&v14->__r_.__value_.__l.__data_ + v13) = 46;
  v19 = std::string::append(&v21, "isCuratorOwned");
  v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  __p.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  mlcore::EntityClass::setPropertyForName(v9, v10, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
}

void sub_20A7F91EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::PlaylistPropertyIsHidden(void)::$_0 &&>>()
{
  uint64_t v0;
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  mlcore::ContainerTable **v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  std::string *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  std::string *v19;
  __int128 v20;
  std::string v21;
  std::string __p;
  char v23;
  _QWORD v24[2];

  v0 = operator new();
  v1 = (_QWORD *)mediaplatform::Singleton<mlcore::ContainerTable>::sharedInstance();
  v2 = (std::__shared_weak_count *)v1[1];
  v24[0] = *v1;
  v24[1] = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  v5 = (mlcore::ContainerTable **)mediaplatform::Singleton<mlcore::ContainerTable>::sharedInstance();
  mlcore::ContainerTable::isHiddenColumn(*v5, (uint64_t)&__p);
  mlcore::DatabaseModelProperty<int>::DatabaseModelProperty(v0, v24, (uint64_t)&__p);
  mlcore::PlaylistPropertyIsHidden(void)::property = v0;
  if (v23 < 0)
    operator delete((void *)__p.__r_.__value_.__l.__size_);
  if (v2)
  {
    v6 = (unint64_t *)&v2->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v8 = mlcore::PlaylistPropertyIsHidden(void)::property;
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  std::string::operator=((std::string *)(v8 + 40), &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v9 = mlcore::TypedEntityClass<mlcore::Playlist>::sharedPointer();
  v10 = mlcore::PlaylistPropertyIsHidden(void)::property;
  v11 = mediaplatform::Singleton<mlcore::ContainerTable>::sharedInstance();
  v12 = *(_QWORD *)v11;
  if (*(char *)(*(_QWORD *)v11 + 31) >= 0)
    v13 = *(unsigned __int8 *)(*(_QWORD *)v11 + 31);
  else
    v13 = *(_QWORD *)(*(_QWORD *)v11 + 16);
  v14 = &v21;
  std::string::basic_string[abi:ne180100]((uint64_t)&v21, v13 + 1);
  if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v14 = (std::string *)v21.__r_.__value_.__r.__words[0];
  if (v13)
  {
    v17 = *(char **)(v12 + 8);
    v16 = (char *)(v12 + 8);
    v15 = v17;
    if (v16[23] >= 0)
      v18 = v16;
    else
      v18 = v15;
    memmove(v14, v18, v13);
  }
  *(_WORD *)((char *)&v14->__r_.__value_.__l.__data_ + v13) = 46;
  v19 = std::string::append(&v21, "isHidden");
  v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  __p.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  mlcore::EntityClass::setPropertyForName(v9, v10, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
}

void sub_20A7F947C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

uint64_t mlcore::PlaylistPropertyIsSourceRemote(mlcore *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&mlcore::PlaylistPropertyIsSourceRemote(void)::once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&mlcore::PlaylistPropertyIsSourceRemote(void)::once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::PlaylistPropertyIsSourceRemote(void)::$_0 &&>>);
  }
  return mlcore::PlaylistPropertyIsSourceRemote(void)::property;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::PlaylistPropertyIsSourceRemote(void)::$_0 &&>>()
{
  uint64_t v0;
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  mlcore::ContainerTable **v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  std::string *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  std::string *v19;
  __int128 v20;
  std::string v21;
  std::string __p;
  char v23;
  _QWORD v24[2];

  v0 = operator new();
  v1 = (_QWORD *)mediaplatform::Singleton<mlcore::ContainerTable>::sharedInstance();
  v2 = (std::__shared_weak_count *)v1[1];
  v24[0] = *v1;
  v24[1] = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  v5 = (mlcore::ContainerTable **)mediaplatform::Singleton<mlcore::ContainerTable>::sharedInstance();
  mlcore::ContainerTable::isSrcRemoteColumn(*v5, (uint64_t)&__p);
  mlcore::DatabaseModelProperty<int>::DatabaseModelProperty(v0, v24, (uint64_t)&__p);
  mlcore::PlaylistPropertyIsSourceRemote(void)::property = v0;
  if (v23 < 0)
    operator delete((void *)__p.__r_.__value_.__l.__size_);
  if (v2)
  {
    v6 = (unint64_t *)&v2->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v8 = mlcore::PlaylistPropertyIsSourceRemote(void)::property;
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  std::string::operator=((std::string *)(v8 + 40), &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v9 = mlcore::TypedEntityClass<mlcore::Playlist>::sharedPointer();
  v10 = mlcore::PlaylistPropertyIsSourceRemote(void)::property;
  v11 = mediaplatform::Singleton<mlcore::ContainerTable>::sharedInstance();
  v12 = *(_QWORD *)v11;
  if (*(char *)(*(_QWORD *)v11 + 31) >= 0)
    v13 = *(unsigned __int8 *)(*(_QWORD *)v11 + 31);
  else
    v13 = *(_QWORD *)(*(_QWORD *)v11 + 16);
  v14 = &v21;
  std::string::basic_string[abi:ne180100]((uint64_t)&v21, v13 + 1);
  if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v14 = (std::string *)v21.__r_.__value_.__r.__words[0];
  if (v13)
  {
    v17 = *(char **)(v12 + 8);
    v16 = (char *)(v12 + 8);
    v15 = v17;
    if (v16[23] >= 0)
      v18 = v16;
    else
      v18 = v15;
    memmove(v14, v18, v13);
  }
  *(_WORD *)((char *)&v14->__r_.__value_.__l.__data_ + v13) = 46;
  v19 = std::string::append(&v21, "isSrcRemote");
  v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  __p.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  mlcore::EntityClass::setPropertyForName(v9, v10, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
}

void sub_20A7F9768(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::PlaylistPropertyIsSmart(void)::$_0 &&>>()
{
  uint64_t v0;
  uint64_t v1;
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  std::string __str;

  v0 = operator new();
  v1 = mlcore::PlaylistPropertySmartCriteria((mlcore *)v0);
  v2 = (std::__shared_weak_count *)operator new(0x30uLL);
  v3 = v2;
  v2->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  v2->__shared_weak_owners_ = 0;
  v2->__vftable = (std::__shared_weak_count_vtbl *)&off_24C33C788;
  v2[1].__shared_owners_ = v1;
  LOBYTE(v2[1].__shared_weak_owners_) = 0;
  v2[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_24C337008;
  *(_OWORD *)(v0 + 16) = 0u;
  *(_OWORD *)(v0 + 32) = 0u;
  *(_OWORD *)(v0 + 48) = 0u;
  *(_QWORD *)v0 = &off_24C3398B8;
  *(_QWORD *)(v0 + 64) = v2 + 1;
  *(_QWORD *)(v0 + 72) = v2;
  do
    v5 = __ldxr(p_shared_owners);
  while (__stxr(v5 + 1, p_shared_owners));
  mlcore::PlaylistPropertyIsSmart(void)::property = v0;
  do
    v6 = __ldaxr(p_shared_owners);
  while (__stlxr(v6 - 1, p_shared_owners));
  if (!v6)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v3);
  }
  v7 = mlcore::PlaylistPropertyIsSmart(void)::property;
  std::string::basic_string[abi:ne180100]<0>(&__str, "is_smart");
  std::string::operator=((std::string *)(v7 + 40), &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  v8 = mlcore::TypedEntityClass<mlcore::Playlist>::sharedPointer();
  v9 = mlcore::PlaylistPropertyIsSmart(void)::property;
  std::string::basic_string[abi:ne180100]<0>(&__str, "isSmart");
  mlcore::EntityClass::setPropertyForName(v8, v9, &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
}

void sub_20A7F997C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_emplace<mlcore::NullPredicate<mediaplatform::Data>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C33C788;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<mlcore::NullPredicate<mediaplatform::Data>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C33C788;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x20BD27AFCLL);
}

uint64_t std::__shared_ptr_emplace<mlcore::NullPredicate<mediaplatform::Data>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::PlaylistPropertySmartCriteria(void)::$_0 &&>>()
{
  uint64_t v0;
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  mlcore::ContainerTable **v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  std::string *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  std::string *v19;
  __int128 v20;
  std::string v21;
  std::string __str;
  _QWORD v23[2];

  v0 = operator new();
  v1 = (_QWORD *)mediaplatform::Singleton<mlcore::ContainerTable>::sharedInstance();
  v2 = (std::__shared_weak_count *)v1[1];
  v23[0] = *v1;
  v23[1] = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  v5 = (mlcore::ContainerTable **)mediaplatform::Singleton<mlcore::ContainerTable>::sharedInstance();
  mlcore::ContainerTable::smartCriteriaColumn(*v5, (uint64_t)&__str);
  mlcore::DatabaseModelProperty<mediaplatform::Data>::DatabaseModelProperty(v0, v23, (uint64_t)&__str);
  mlcore::PlaylistPropertySmartCriteria(void)::property = v0;
  mediaplatform::DatabaseColumn<mediaplatform::Data>::~DatabaseColumn((uint64_t)&__str);
  if (v2)
  {
    v6 = (unint64_t *)&v2->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v8 = mlcore::PlaylistPropertySmartCriteria(void)::property;
  std::string::basic_string[abi:ne180100]<0>(&__str, "");
  std::string::operator=((std::string *)(v8 + 40), &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  v9 = mlcore::TypedEntityClass<mlcore::Playlist>::sharedPointer();
  v10 = mlcore::PlaylistPropertySmartCriteria(void)::property;
  v11 = mediaplatform::Singleton<mlcore::ContainerTable>::sharedInstance();
  v12 = *(_QWORD *)v11;
  if (*(char *)(*(_QWORD *)v11 + 31) >= 0)
    v13 = *(unsigned __int8 *)(*(_QWORD *)v11 + 31);
  else
    v13 = *(_QWORD *)(*(_QWORD *)v11 + 16);
  v14 = &v21;
  std::string::basic_string[abi:ne180100]((uint64_t)&v21, v13 + 1);
  if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v14 = (std::string *)v21.__r_.__value_.__r.__words[0];
  if (v13)
  {
    v17 = *(char **)(v12 + 8);
    v16 = (char *)(v12 + 8);
    v15 = v17;
    if (v16[23] >= 0)
      v18 = v16;
    else
      v18 = v15;
    memmove(v14, v18, v13);
  }
  *(_WORD *)((char *)&v14->__r_.__value_.__l.__data_ + v13) = 46;
  v19 = std::string::append(&v21, "smartCriteria");
  v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  __str.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  mlcore::EntityClass::setPropertyForName(v9, v10, &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
}

void sub_20A7F9BD8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

uint64_t mlcore::PlaylistPropertySmartEvaluationOrder(mlcore *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&mlcore::PlaylistPropertySmartEvaluationOrder(void)::once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&mlcore::PlaylistPropertySmartEvaluationOrder(void)::once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::PlaylistPropertySmartEvaluationOrder(void)::$_0 &&>>);
  }
  return mlcore::PlaylistPropertySmartEvaluationOrder(void)::property;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::PlaylistPropertySmartEvaluationOrder(void)::$_0 &&>>()
{
  uint64_t v0;
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  mlcore::ContainerTable **v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  std::string *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  std::string *v19;
  __int128 v20;
  std::string v21;
  std::string __p;
  char v23;
  _QWORD v24[2];

  v0 = operator new();
  v1 = (_QWORD *)mediaplatform::Singleton<mlcore::ContainerTable>::sharedInstance();
  v2 = (std::__shared_weak_count *)v1[1];
  v24[0] = *v1;
  v24[1] = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  v5 = (mlcore::ContainerTable **)mediaplatform::Singleton<mlcore::ContainerTable>::sharedInstance();
  mlcore::ContainerTable::smartPlaylistEvaluationOrderColumn(*v5, (uint64_t)&__p);
  mlcore::DatabaseModelProperty<int>::DatabaseModelProperty(v0, v24, (uint64_t)&__p);
  mlcore::PlaylistPropertySmartEvaluationOrder(void)::property = v0;
  if (v23 < 0)
    operator delete((void *)__p.__r_.__value_.__l.__size_);
  if (v2)
  {
    v6 = (unint64_t *)&v2->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v8 = mlcore::PlaylistPropertySmartEvaluationOrder(void)::property;
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  std::string::operator=((std::string *)(v8 + 40), &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v9 = mlcore::TypedEntityClass<mlcore::Playlist>::sharedPointer();
  v10 = mlcore::PlaylistPropertySmartEvaluationOrder(void)::property;
  v11 = mediaplatform::Singleton<mlcore::ContainerTable>::sharedInstance();
  v12 = *(_QWORD *)v11;
  if (*(char *)(*(_QWORD *)v11 + 31) >= 0)
    v13 = *(unsigned __int8 *)(*(_QWORD *)v11 + 31);
  else
    v13 = *(_QWORD *)(*(_QWORD *)v11 + 16);
  v14 = &v21;
  std::string::basic_string[abi:ne180100]((uint64_t)&v21, v13 + 1);
  if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v14 = (std::string *)v21.__r_.__value_.__r.__words[0];
  if (v13)
  {
    v17 = *(char **)(v12 + 8);
    v16 = (char *)(v12 + 8);
    v15 = v17;
    if (v16[23] >= 0)
      v18 = v16;
    else
      v18 = v15;
    memmove(v14, v18, v13);
  }
  *(_WORD *)((char *)&v14->__r_.__value_.__l.__data_ + v13) = 46;
  v19 = std::string::append(&v21, "evaluationOrder");
  v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  __p.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  mlcore::EntityClass::setPropertyForName(v9, v10, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
}

void sub_20A7F9EBC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::PlaylistPropertySmartIsFolder(void)::$_0 &&>>()
{
  uint64_t v0;
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  mlcore::ContainerTable **v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  std::string *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  std::string *v19;
  __int128 v20;
  std::string v21;
  std::string __p;
  char v23;
  _QWORD v24[2];

  v0 = operator new();
  v1 = (_QWORD *)mediaplatform::Singleton<mlcore::ContainerTable>::sharedInstance();
  v2 = (std::__shared_weak_count *)v1[1];
  v24[0] = *v1;
  v24[1] = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  v5 = (mlcore::ContainerTable **)mediaplatform::Singleton<mlcore::ContainerTable>::sharedInstance();
  mlcore::ContainerTable::smartIsFolderColumn(*v5, (uint64_t)&__p);
  mlcore::DatabaseModelProperty<int>::DatabaseModelProperty(v0, v24, (uint64_t)&__p);
  mlcore::PlaylistPropertySmartIsFolder(void)::property = v0;
  if (v23 < 0)
    operator delete((void *)__p.__r_.__value_.__l.__size_);
  if (v2)
  {
    v6 = (unint64_t *)&v2->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v8 = mlcore::PlaylistPropertySmartIsFolder(void)::property;
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  std::string::operator=((std::string *)(v8 + 40), &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v9 = mlcore::TypedEntityClass<mlcore::Playlist>::sharedPointer();
  v10 = mlcore::PlaylistPropertySmartIsFolder(void)::property;
  v11 = mediaplatform::Singleton<mlcore::ContainerTable>::sharedInstance();
  v12 = *(_QWORD *)v11;
  if (*(char *)(*(_QWORD *)v11 + 31) >= 0)
    v13 = *(unsigned __int8 *)(*(_QWORD *)v11 + 31);
  else
    v13 = *(_QWORD *)(*(_QWORD *)v11 + 16);
  v14 = &v21;
  std::string::basic_string[abi:ne180100]((uint64_t)&v21, v13 + 1);
  if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v14 = (std::string *)v21.__r_.__value_.__r.__words[0];
  if (v13)
  {
    v17 = *(char **)(v12 + 8);
    v16 = (char *)(v12 + 8);
    v15 = v17;
    if (v16[23] >= 0)
      v18 = v16;
    else
      v18 = v15;
    memmove(v14, v18, v13);
  }
  *(_WORD *)((char *)&v14->__r_.__value_.__l.__data_ + v13) = 46;
  v19 = std::string::append(&v21, "smartIsFolder");
  v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  __p.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  mlcore::EntityClass::setPropertyForName(v9, v10, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
}

void sub_20A7FA14C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

uint64_t mlcore::PlaylistPropertySmartIsDynamic(mlcore *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&mlcore::PlaylistPropertySmartIsDynamic(void)::once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&mlcore::PlaylistPropertySmartIsDynamic(void)::once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::PlaylistPropertySmartIsDynamic(void)::$_0 &&>>);
  }
  return mlcore::PlaylistPropertySmartIsDynamic(void)::property;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::PlaylistPropertySmartIsDynamic(void)::$_0 &&>>()
{
  uint64_t v0;
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  mlcore::ContainerTable **v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  std::string *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  std::string *v19;
  __int128 v20;
  std::string v21;
  std::string __p;
  char v23;
  _QWORD v24[2];

  v0 = operator new();
  v1 = (_QWORD *)mediaplatform::Singleton<mlcore::ContainerTable>::sharedInstance();
  v2 = (std::__shared_weak_count *)v1[1];
  v24[0] = *v1;
  v24[1] = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  v5 = (mlcore::ContainerTable **)mediaplatform::Singleton<mlcore::ContainerTable>::sharedInstance();
  mlcore::ContainerTable::smartIsDynamicColumn(*v5, (uint64_t)&__p);
  mlcore::DatabaseModelProperty<int>::DatabaseModelProperty(v0, v24, (uint64_t)&__p);
  mlcore::PlaylistPropertySmartIsDynamic(void)::property = v0;
  if (v23 < 0)
    operator delete((void *)__p.__r_.__value_.__l.__size_);
  if (v2)
  {
    v6 = (unint64_t *)&v2->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v8 = mlcore::PlaylistPropertySmartIsDynamic(void)::property;
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  std::string::operator=((std::string *)(v8 + 40), &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v9 = mlcore::TypedEntityClass<mlcore::Playlist>::sharedPointer();
  v10 = mlcore::PlaylistPropertySmartIsDynamic(void)::property;
  v11 = mediaplatform::Singleton<mlcore::ContainerTable>::sharedInstance();
  v12 = *(_QWORD *)v11;
  if (*(char *)(*(_QWORD *)v11 + 31) >= 0)
    v13 = *(unsigned __int8 *)(*(_QWORD *)v11 + 31);
  else
    v13 = *(_QWORD *)(*(_QWORD *)v11 + 16);
  v14 = &v21;
  std::string::basic_string[abi:ne180100]((uint64_t)&v21, v13 + 1);
  if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v14 = (std::string *)v21.__r_.__value_.__r.__words[0];
  if (v13)
  {
    v17 = *(char **)(v12 + 8);
    v16 = (char *)(v12 + 8);
    v15 = v17;
    if (v16[23] >= 0)
      v18 = v16;
    else
      v18 = v15;
    memmove(v14, v18, v13);
  }
  *(_WORD *)((char *)&v14->__r_.__value_.__l.__data_ + v13) = 46;
  v19 = std::string::append(&v21, "smartIsDynamic");
  v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  __p.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  mlcore::EntityClass::setPropertyForName(v9, v10, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
}

void sub_20A7FA438(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

uint64_t mlcore::PlaylistPropertySmartIsFiltered(mlcore *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&mlcore::PlaylistPropertySmartIsFiltered(void)::once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&mlcore::PlaylistPropertySmartIsFiltered(void)::once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::PlaylistPropertySmartIsFiltered(void)::$_0 &&>>);
  }
  return mlcore::PlaylistPropertySmartIsFiltered(void)::property;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::PlaylistPropertySmartIsFiltered(void)::$_0 &&>>()
{
  uint64_t v0;
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  mlcore::ContainerTable **v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  std::string *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  std::string *v19;
  __int128 v20;
  std::string v21;
  std::string __p;
  char v23;
  _QWORD v24[2];

  v0 = operator new();
  v1 = (_QWORD *)mediaplatform::Singleton<mlcore::ContainerTable>::sharedInstance();
  v2 = (std::__shared_weak_count *)v1[1];
  v24[0] = *v1;
  v24[1] = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  v5 = (mlcore::ContainerTable **)mediaplatform::Singleton<mlcore::ContainerTable>::sharedInstance();
  mlcore::ContainerTable::smartIsFilteredColumn(*v5, (uint64_t)&__p);
  mlcore::DatabaseModelProperty<int>::DatabaseModelProperty(v0, v24, (uint64_t)&__p);
  mlcore::PlaylistPropertySmartIsFiltered(void)::property = v0;
  if (v23 < 0)
    operator delete((void *)__p.__r_.__value_.__l.__size_);
  if (v2)
  {
    v6 = (unint64_t *)&v2->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v8 = mlcore::PlaylistPropertySmartIsFiltered(void)::property;
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  std::string::operator=((std::string *)(v8 + 40), &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v9 = mlcore::TypedEntityClass<mlcore::Playlist>::sharedPointer();
  v10 = mlcore::PlaylistPropertySmartIsFiltered(void)::property;
  v11 = mediaplatform::Singleton<mlcore::ContainerTable>::sharedInstance();
  v12 = *(_QWORD *)v11;
  if (*(char *)(*(_QWORD *)v11 + 31) >= 0)
    v13 = *(unsigned __int8 *)(*(_QWORD *)v11 + 31);
  else
    v13 = *(_QWORD *)(*(_QWORD *)v11 + 16);
  v14 = &v21;
  std::string::basic_string[abi:ne180100]((uint64_t)&v21, v13 + 1);
  if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v14 = (std::string *)v21.__r_.__value_.__r.__words[0];
  if (v13)
  {
    v17 = *(char **)(v12 + 8);
    v16 = (char *)(v12 + 8);
    v15 = v17;
    if (v16[23] >= 0)
      v18 = v16;
    else
      v18 = v15;
    memmove(v14, v18, v13);
  }
  *(_WORD *)((char *)&v14->__r_.__value_.__l.__data_ + v13) = 46;
  v19 = std::string::append(&v21, "smartIsFiltered");
  v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  __p.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  mlcore::EntityClass::setPropertyForName(v9, v10, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
}

void sub_20A7FA724(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::PlaylistPropertySmartIsGenius(void)::$_0 &&>>()
{
  uint64_t v0;
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  mlcore::ContainerTable **v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  std::string *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  std::string *v19;
  __int128 v20;
  std::string v21;
  std::string __p;
  char v23;
  _QWORD v24[2];

  v0 = operator new();
  v1 = (_QWORD *)mediaplatform::Singleton<mlcore::ContainerTable>::sharedInstance();
  v2 = (std::__shared_weak_count *)v1[1];
  v24[0] = *v1;
  v24[1] = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  v5 = (mlcore::ContainerTable **)mediaplatform::Singleton<mlcore::ContainerTable>::sharedInstance();
  mlcore::ContainerTable::smartIsGeniusColumn(*v5, (uint64_t)&__p);
  mlcore::DatabaseModelProperty<int>::DatabaseModelProperty(v0, v24, (uint64_t)&__p);
  mlcore::PlaylistPropertySmartIsGenius(void)::property = v0;
  if (v23 < 0)
    operator delete((void *)__p.__r_.__value_.__l.__size_);
  if (v2)
  {
    v6 = (unint64_t *)&v2->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v8 = mlcore::PlaylistPropertySmartIsGenius(void)::property;
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  std::string::operator=((std::string *)(v8 + 40), &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v9 = mlcore::TypedEntityClass<mlcore::Playlist>::sharedPointer();
  v10 = mlcore::PlaylistPropertySmartIsGenius(void)::property;
  v11 = mediaplatform::Singleton<mlcore::ContainerTable>::sharedInstance();
  v12 = *(_QWORD *)v11;
  if (*(char *)(*(_QWORD *)v11 + 31) >= 0)
    v13 = *(unsigned __int8 *)(*(_QWORD *)v11 + 31);
  else
    v13 = *(_QWORD *)(*(_QWORD *)v11 + 16);
  v14 = &v21;
  std::string::basic_string[abi:ne180100]((uint64_t)&v21, v13 + 1);
  if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v14 = (std::string *)v21.__r_.__value_.__r.__words[0];
  if (v13)
  {
    v17 = *(char **)(v12 + 8);
    v16 = (char *)(v12 + 8);
    v15 = v17;
    if (v16[23] >= 0)
      v18 = v16;
    else
      v18 = v15;
    memmove(v14, v18, v13);
  }
  *(_WORD *)((char *)&v14->__r_.__value_.__l.__data_ + v13) = 46;
  v19 = std::string::append(&v21, "smartIsGenius");
  v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  __p.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  mlcore::EntityClass::setPropertyForName(v9, v10, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
}

void sub_20A7FA9B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

uint64_t mlcore::PlaylistPropertySmartIsEnabledOnly(mlcore *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&mlcore::PlaylistPropertySmartIsEnabledOnly(void)::once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&mlcore::PlaylistPropertySmartIsEnabledOnly(void)::once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::PlaylistPropertySmartIsEnabledOnly(void)::$_0 &&>>);
  }
  return mlcore::PlaylistPropertySmartIsEnabledOnly(void)::property;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::PlaylistPropertySmartIsEnabledOnly(void)::$_0 &&>>()
{
  uint64_t v0;
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  mlcore::ContainerTable **v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  std::string *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  std::string *v19;
  __int128 v20;
  std::string v21;
  std::string __p;
  char v23;
  _QWORD v24[2];

  v0 = operator new();
  v1 = (_QWORD *)mediaplatform::Singleton<mlcore::ContainerTable>::sharedInstance();
  v2 = (std::__shared_weak_count *)v1[1];
  v24[0] = *v1;
  v24[1] = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  v5 = (mlcore::ContainerTable **)mediaplatform::Singleton<mlcore::ContainerTable>::sharedInstance();
  mlcore::ContainerTable::smartEnabledOnlyColumn(*v5, (uint64_t)&__p);
  mlcore::DatabaseModelProperty<int>::DatabaseModelProperty(v0, v24, (uint64_t)&__p);
  mlcore::PlaylistPropertySmartIsEnabledOnly(void)::property = v0;
  if (v23 < 0)
    operator delete((void *)__p.__r_.__value_.__l.__size_);
  if (v2)
  {
    v6 = (unint64_t *)&v2->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v8 = mlcore::PlaylistPropertySmartIsEnabledOnly(void)::property;
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  std::string::operator=((std::string *)(v8 + 40), &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v9 = mlcore::TypedEntityClass<mlcore::Playlist>::sharedPointer();
  v10 = mlcore::PlaylistPropertySmartIsEnabledOnly(void)::property;
  v11 = mediaplatform::Singleton<mlcore::ContainerTable>::sharedInstance();
  v12 = *(_QWORD *)v11;
  if (*(char *)(*(_QWORD *)v11 + 31) >= 0)
    v13 = *(unsigned __int8 *)(*(_QWORD *)v11 + 31);
  else
    v13 = *(_QWORD *)(*(_QWORD *)v11 + 16);
  v14 = &v21;
  std::string::basic_string[abi:ne180100]((uint64_t)&v21, v13 + 1);
  if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v14 = (std::string *)v21.__r_.__value_.__r.__words[0];
  if (v13)
  {
    v17 = *(char **)(v12 + 8);
    v16 = (char *)(v12 + 8);
    v15 = v17;
    if (v16[23] >= 0)
      v18 = v16;
    else
      v18 = v15;
    memmove(v14, v18, v13);
  }
  *(_WORD *)((char *)&v14->__r_.__value_.__l.__data_ + v13) = 46;
  v19 = std::string::append(&v21, "smartIsEnabledOnly");
  v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  __p.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  mlcore::EntityClass::setPropertyForName(v9, v10, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
}

void sub_20A7FACA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

uint64_t mlcore::PlaylistPropertySmartIsLimited(mlcore *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&mlcore::PlaylistPropertySmartIsLimited(void)::once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&mlcore::PlaylistPropertySmartIsLimited(void)::once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::PlaylistPropertySmartIsLimited(void)::$_0 &&>>);
  }
  return mlcore::PlaylistPropertySmartIsLimited(void)::property;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::PlaylistPropertySmartIsLimited(void)::$_0 &&>>()
{
  uint64_t v0;
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  mlcore::ContainerTable **v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  std::string *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  std::string *v19;
  __int128 v20;
  std::string v21;
  std::string __p;
  char v23;
  _QWORD v24[2];

  v0 = operator new();
  v1 = (_QWORD *)mediaplatform::Singleton<mlcore::ContainerTable>::sharedInstance();
  v2 = (std::__shared_weak_count *)v1[1];
  v24[0] = *v1;
  v24[1] = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  v5 = (mlcore::ContainerTable **)mediaplatform::Singleton<mlcore::ContainerTable>::sharedInstance();
  mlcore::ContainerTable::smartIsLimitedColumn(*v5, (uint64_t)&__p);
  mlcore::DatabaseModelProperty<int>::DatabaseModelProperty(v0, v24, (uint64_t)&__p);
  mlcore::PlaylistPropertySmartIsLimited(void)::property = v0;
  if (v23 < 0)
    operator delete((void *)__p.__r_.__value_.__l.__size_);
  if (v2)
  {
    v6 = (unint64_t *)&v2->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v8 = mlcore::PlaylistPropertySmartIsLimited(void)::property;
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  std::string::operator=((std::string *)(v8 + 40), &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v9 = mlcore::TypedEntityClass<mlcore::Playlist>::sharedPointer();
  v10 = mlcore::PlaylistPropertySmartIsLimited(void)::property;
  v11 = mediaplatform::Singleton<mlcore::ContainerTable>::sharedInstance();
  v12 = *(_QWORD *)v11;
  if (*(char *)(*(_QWORD *)v11 + 31) >= 0)
    v13 = *(unsigned __int8 *)(*(_QWORD *)v11 + 31);
  else
    v13 = *(_QWORD *)(*(_QWORD *)v11 + 16);
  v14 = &v21;
  std::string::basic_string[abi:ne180100]((uint64_t)&v21, v13 + 1);
  if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v14 = (std::string *)v21.__r_.__value_.__r.__words[0];
  if (v13)
  {
    v17 = *(char **)(v12 + 8);
    v16 = (char *)(v12 + 8);
    v15 = v17;
    if (v16[23] >= 0)
      v18 = v16;
    else
      v18 = v15;
    memmove(v14, v18, v13);
  }
  *(_WORD *)((char *)&v14->__r_.__value_.__l.__data_ + v13) = 46;
  v19 = std::string::append(&v21, "smartIsLimited");
  v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  __p.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  mlcore::EntityClass::setPropertyForName(v9, v10, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
}

void sub_20A7FAF8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

uint64_t mlcore::PlaylistPropertySmartLimitKind(mlcore *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&mlcore::PlaylistPropertySmartLimitKind(void)::once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&mlcore::PlaylistPropertySmartLimitKind(void)::once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::PlaylistPropertySmartLimitKind(void)::$_0 &&>>);
  }
  return mlcore::PlaylistPropertySmartLimitKind(void)::property;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::PlaylistPropertySmartLimitKind(void)::$_0 &&>>()
{
  uint64_t v0;
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  mlcore::ContainerTable **v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  std::string *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  std::string *v19;
  __int128 v20;
  std::string v21;
  std::string __p;
  char v23;
  _QWORD v24[2];

  v0 = operator new();
  v1 = (_QWORD *)mediaplatform::Singleton<mlcore::ContainerTable>::sharedInstance();
  v2 = (std::__shared_weak_count *)v1[1];
  v24[0] = *v1;
  v24[1] = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  v5 = (mlcore::ContainerTable **)mediaplatform::Singleton<mlcore::ContainerTable>::sharedInstance();
  mlcore::ContainerTable::smartLimitKindColumn(*v5, (uint64_t)&__p);
  mlcore::DatabaseModelProperty<int>::DatabaseModelProperty(v0, v24, (uint64_t)&__p);
  mlcore::PlaylistPropertySmartLimitKind(void)::property = v0;
  if (v23 < 0)
    operator delete((void *)__p.__r_.__value_.__l.__size_);
  if (v2)
  {
    v6 = (unint64_t *)&v2->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v8 = mlcore::PlaylistPropertySmartLimitKind(void)::property;
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  std::string::operator=((std::string *)(v8 + 40), &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v9 = mlcore::TypedEntityClass<mlcore::Playlist>::sharedPointer();
  v10 = mlcore::PlaylistPropertySmartLimitKind(void)::property;
  v11 = mediaplatform::Singleton<mlcore::ContainerTable>::sharedInstance();
  v12 = *(_QWORD *)v11;
  if (*(char *)(*(_QWORD *)v11 + 31) >= 0)
    v13 = *(unsigned __int8 *)(*(_QWORD *)v11 + 31);
  else
    v13 = *(_QWORD *)(*(_QWORD *)v11 + 16);
  v14 = &v21;
  std::string::basic_string[abi:ne180100]((uint64_t)&v21, v13 + 1);
  if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v14 = (std::string *)v21.__r_.__value_.__r.__words[0];
  if (v13)
  {
    v17 = *(char **)(v12 + 8);
    v16 = (char *)(v12 + 8);
    v15 = v17;
    if (v16[23] >= 0)
      v18 = v16;
    else
      v18 = v15;
    memmove(v14, v18, v13);
  }
  *(_WORD *)((char *)&v14->__r_.__value_.__l.__data_ + v13) = 46;
  v19 = std::string::append(&v21, "smartLimitKind");
  v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  __p.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  mlcore::EntityClass::setPropertyForName(v9, v10, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
}

void sub_20A7FB278(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

uint64_t mlcore::PlaylistPropertySmartLimitOrder(mlcore *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&mlcore::PlaylistPropertySmartLimitOrder(void)::once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&mlcore::PlaylistPropertySmartLimitOrder(void)::once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::PlaylistPropertySmartLimitOrder(void)::$_0 &&>>);
  }
  return mlcore::PlaylistPropertySmartLimitOrder(void)::property;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::PlaylistPropertySmartLimitOrder(void)::$_0 &&>>()
{
  uint64_t v0;
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  mlcore::ContainerTable **v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  std::string *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  std::string *v19;
  __int128 v20;
  std::string v21;
  std::string __p;
  char v23;
  _QWORD v24[2];

  v0 = operator new();
  v1 = (_QWORD *)mediaplatform::Singleton<mlcore::ContainerTable>::sharedInstance();
  v2 = (std::__shared_weak_count *)v1[1];
  v24[0] = *v1;
  v24[1] = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  v5 = (mlcore::ContainerTable **)mediaplatform::Singleton<mlcore::ContainerTable>::sharedInstance();
  mlcore::ContainerTable::smartLimitOrderColumn(*v5, (uint64_t)&__p);
  mlcore::DatabaseModelProperty<int>::DatabaseModelProperty(v0, v24, (uint64_t)&__p);
  mlcore::PlaylistPropertySmartLimitOrder(void)::property = v0;
  if (v23 < 0)
    operator delete((void *)__p.__r_.__value_.__l.__size_);
  if (v2)
  {
    v6 = (unint64_t *)&v2->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v8 = mlcore::PlaylistPropertySmartLimitOrder(void)::property;
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  std::string::operator=((std::string *)(v8 + 40), &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v9 = mlcore::TypedEntityClass<mlcore::Playlist>::sharedPointer();
  v10 = mlcore::PlaylistPropertySmartLimitOrder(void)::property;
  v11 = mediaplatform::Singleton<mlcore::ContainerTable>::sharedInstance();
  v12 = *(_QWORD *)v11;
  if (*(char *)(*(_QWORD *)v11 + 31) >= 0)
    v13 = *(unsigned __int8 *)(*(_QWORD *)v11 + 31);
  else
    v13 = *(_QWORD *)(*(_QWORD *)v11 + 16);
  v14 = &v21;
  std::string::basic_string[abi:ne180100]((uint64_t)&v21, v13 + 1);
  if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v14 = (std::string *)v21.__r_.__value_.__r.__words[0];
  if (v13)
  {
    v17 = *(char **)(v12 + 8);
    v16 = (char *)(v12 + 8);
    v15 = v17;
    if (v16[23] >= 0)
      v18 = v16;
    else
      v18 = v15;
    memmove(v14, v18, v13);
  }
  *(_WORD *)((char *)&v14->__r_.__value_.__l.__data_ + v13) = 46;
  v19 = std::string::append(&v21, "smartLimitOrder");
  v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  __p.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  mlcore::EntityClass::setPropertyForName(v9, v10, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
}

void sub_20A7FB564(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

uint64_t mlcore::PlaylistPropertySmartReverseLimitOrder(mlcore *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&mlcore::PlaylistPropertySmartReverseLimitOrder(void)::once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&mlcore::PlaylistPropertySmartReverseLimitOrder(void)::once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::PlaylistPropertySmartReverseLimitOrder(void)::$_0 &&>>);
  }
  return mlcore::PlaylistPropertySmartReverseLimitOrder(void)::property;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::PlaylistPropertySmartReverseLimitOrder(void)::$_0 &&>>()
{
  uint64_t v0;
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  mlcore::ContainerTable **v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  std::string *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  std::string *v19;
  __int128 v20;
  std::string v21;
  std::string __p;
  char v23;
  _QWORD v24[2];

  v0 = operator new();
  v1 = (_QWORD *)mediaplatform::Singleton<mlcore::ContainerTable>::sharedInstance();
  v2 = (std::__shared_weak_count *)v1[1];
  v24[0] = *v1;
  v24[1] = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  v5 = (mlcore::ContainerTable **)mediaplatform::Singleton<mlcore::ContainerTable>::sharedInstance();
  mlcore::ContainerTable::smartReverseLimitOrderColumn(*v5, (uint64_t)&__p);
  mlcore::DatabaseModelProperty<int>::DatabaseModelProperty(v0, v24, (uint64_t)&__p);
  mlcore::PlaylistPropertySmartReverseLimitOrder(void)::property = v0;
  if (v23 < 0)
    operator delete((void *)__p.__r_.__value_.__l.__size_);
  if (v2)
  {
    v6 = (unint64_t *)&v2->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v8 = mlcore::PlaylistPropertySmartReverseLimitOrder(void)::property;
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  std::string::operator=((std::string *)(v8 + 40), &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v9 = mlcore::TypedEntityClass<mlcore::Playlist>::sharedPointer();
  v10 = mlcore::PlaylistPropertySmartReverseLimitOrder(void)::property;
  v11 = mediaplatform::Singleton<mlcore::ContainerTable>::sharedInstance();
  v12 = *(_QWORD *)v11;
  if (*(char *)(*(_QWORD *)v11 + 31) >= 0)
    v13 = *(unsigned __int8 *)(*(_QWORD *)v11 + 31);
  else
    v13 = *(_QWORD *)(*(_QWORD *)v11 + 16);
  v14 = &v21;
  std::string::basic_string[abi:ne180100]((uint64_t)&v21, v13 + 1);
  if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v14 = (std::string *)v21.__r_.__value_.__r.__words[0];
  if (v13)
  {
    v17 = *(char **)(v12 + 8);
    v16 = (char *)(v12 + 8);
    v15 = v17;
    if (v16[23] >= 0)
      v18 = v16;
    else
      v18 = v15;
    memmove(v14, v18, v13);
  }
  *(_WORD *)((char *)&v14->__r_.__value_.__l.__data_ + v13) = 46;
  v19 = std::string::append(&v21, "smartReverseLimitOrder");
  v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  __p.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  mlcore::EntityClass::setPropertyForName(v9, v10, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
}

void sub_20A7FB850(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

uint64_t mlcore::PlaylistPropertySmartLimitValue(mlcore *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&mlcore::PlaylistPropertySmartLimitValue(void)::once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&mlcore::PlaylistPropertySmartLimitValue(void)::once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::PlaylistPropertySmartLimitValue(void)::$_0 &&>>);
  }
  return mlcore::PlaylistPropertySmartLimitValue(void)::property;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::PlaylistPropertySmartLimitValue(void)::$_0 &&>>()
{
  uint64_t v0;
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  mlcore::ContainerTable **v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  std::string *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  std::string *v19;
  __int128 v20;
  std::string v21;
  std::string __p;
  char v23;
  _QWORD v24[2];

  v0 = operator new();
  v1 = (_QWORD *)mediaplatform::Singleton<mlcore::ContainerTable>::sharedInstance();
  v2 = (std::__shared_weak_count *)v1[1];
  v24[0] = *v1;
  v24[1] = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  v5 = (mlcore::ContainerTable **)mediaplatform::Singleton<mlcore::ContainerTable>::sharedInstance();
  mlcore::ContainerTable::smartLimitValueColumn(*v5, (uint64_t)&__p);
  mlcore::DatabaseModelProperty<long long>::DatabaseModelProperty(v0, v24, (uint64_t)&__p);
  mlcore::PlaylistPropertySmartLimitValue(void)::property = v0;
  if (v23 < 0)
    operator delete((void *)__p.__r_.__value_.__l.__size_);
  if (v2)
  {
    v6 = (unint64_t *)&v2->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v8 = mlcore::PlaylistPropertySmartLimitValue(void)::property;
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  std::string::operator=((std::string *)(v8 + 40), &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v9 = mlcore::TypedEntityClass<mlcore::Playlist>::sharedPointer();
  v10 = mlcore::PlaylistPropertySmartLimitValue(void)::property;
  v11 = mediaplatform::Singleton<mlcore::ContainerTable>::sharedInstance();
  v12 = *(_QWORD *)v11;
  if (*(char *)(*(_QWORD *)v11 + 31) >= 0)
    v13 = *(unsigned __int8 *)(*(_QWORD *)v11 + 31);
  else
    v13 = *(_QWORD *)(*(_QWORD *)v11 + 16);
  v14 = &v21;
  std::string::basic_string[abi:ne180100]((uint64_t)&v21, v13 + 1);
  if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v14 = (std::string *)v21.__r_.__value_.__r.__words[0];
  if (v13)
  {
    v17 = *(char **)(v12 + 8);
    v16 = (char *)(v12 + 8);
    v15 = v17;
    if (v16[23] >= 0)
      v18 = v16;
    else
      v18 = v15;
    memmove(v14, v18, v13);
  }
  *(_WORD *)((char *)&v14->__r_.__value_.__l.__data_ + v13) = 46;
  v19 = std::string::append(&v21, "smartLimitValue");
  v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  __p.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  mlcore::EntityClass::setPropertyForName(v9, v10, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
}

void sub_20A7FBB3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

uint64_t mlcore::PlaylistPropertyPlayOrder(mlcore *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&mlcore::PlaylistPropertyPlayOrder(void)::once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&mlcore::PlaylistPropertyPlayOrder(void)::once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::PlaylistPropertyPlayOrder(void)::$_0 &&>>);
  }
  return mlcore::PlaylistPropertyPlayOrder(void)::property;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::PlaylistPropertyPlayOrder(void)::$_0 &&>>()
{
  uint64_t v0;
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  mlcore::ContainerTable **v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  std::string *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  std::string *v19;
  __int128 v20;
  std::string v21;
  std::string __p;
  char v23;
  _QWORD v24[2];

  v0 = operator new();
  v1 = (_QWORD *)mediaplatform::Singleton<mlcore::ContainerTable>::sharedInstance();
  v2 = (std::__shared_weak_count *)v1[1];
  v24[0] = *v1;
  v24[1] = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  v5 = (mlcore::ContainerTable **)mediaplatform::Singleton<mlcore::ContainerTable>::sharedInstance();
  mlcore::ContainerTable::playOrderColumn(*v5, (uint64_t)&__p);
  mlcore::DatabaseModelProperty<int>::DatabaseModelProperty(v0, v24, (uint64_t)&__p);
  mlcore::PlaylistPropertyPlayOrder(void)::property = v0;
  if (v23 < 0)
    operator delete((void *)__p.__r_.__value_.__l.__size_);
  if (v2)
  {
    v6 = (unint64_t *)&v2->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v8 = mlcore::PlaylistPropertyPlayOrder(void)::property;
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  std::string::operator=((std::string *)(v8 + 40), &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v9 = mlcore::TypedEntityClass<mlcore::Playlist>::sharedPointer();
  v10 = mlcore::PlaylistPropertyPlayOrder(void)::property;
  v11 = mediaplatform::Singleton<mlcore::ContainerTable>::sharedInstance();
  v12 = *(_QWORD *)v11;
  if (*(char *)(*(_QWORD *)v11 + 31) >= 0)
    v13 = *(unsigned __int8 *)(*(_QWORD *)v11 + 31);
  else
    v13 = *(_QWORD *)(*(_QWORD *)v11 + 16);
  v14 = &v21;
  std::string::basic_string[abi:ne180100]((uint64_t)&v21, v13 + 1);
  if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v14 = (std::string *)v21.__r_.__value_.__r.__words[0];
  if (v13)
  {
    v17 = *(char **)(v12 + 8);
    v16 = (char *)(v12 + 8);
    v15 = v17;
    if (v16[23] >= 0)
      v18 = v16;
    else
      v18 = v15;
    memmove(v14, v18, v13);
  }
  *(_WORD *)((char *)&v14->__r_.__value_.__l.__data_ + v13) = 46;
  v19 = std::string::append(&v21, "playOrder");
  v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  __p.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  mlcore::EntityClass::setPropertyForName(v9, v10, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
}

void sub_20A7FBE28(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

uint64_t mlcore::PlaylistPropertyIsReversed(mlcore *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&mlcore::PlaylistPropertyIsReversed(void)::once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&mlcore::PlaylistPropertyIsReversed(void)::once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::PlaylistPropertyIsReversed(void)::$_0 &&>>);
  }
  return mlcore::PlaylistPropertyIsReversed(void)::property;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::PlaylistPropertyIsReversed(void)::$_0 &&>>()
{
  uint64_t v0;
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  mlcore::ContainerTable **v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  std::string *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  std::string *v19;
  __int128 v20;
  std::string v21;
  std::string __p;
  char v23;
  _QWORD v24[2];

  v0 = operator new();
  v1 = (_QWORD *)mediaplatform::Singleton<mlcore::ContainerTable>::sharedInstance();
  v2 = (std::__shared_weak_count *)v1[1];
  v24[0] = *v1;
  v24[1] = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  v5 = (mlcore::ContainerTable **)mediaplatform::Singleton<mlcore::ContainerTable>::sharedInstance();
  mlcore::ContainerTable::isReversedColumn(*v5, (uint64_t)&__p);
  mlcore::DatabaseModelProperty<int>::DatabaseModelProperty(v0, v24, (uint64_t)&__p);
  mlcore::PlaylistPropertyIsReversed(void)::property = v0;
  if (v23 < 0)
    operator delete((void *)__p.__r_.__value_.__l.__size_);
  if (v2)
  {
    v6 = (unint64_t *)&v2->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v8 = mlcore::PlaylistPropertyIsReversed(void)::property;
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  std::string::operator=((std::string *)(v8 + 40), &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v9 = mlcore::TypedEntityClass<mlcore::Playlist>::sharedPointer();
  v10 = mlcore::PlaylistPropertyIsReversed(void)::property;
  v11 = mediaplatform::Singleton<mlcore::ContainerTable>::sharedInstance();
  v12 = *(_QWORD *)v11;
  if (*(char *)(*(_QWORD *)v11 + 31) >= 0)
    v13 = *(unsigned __int8 *)(*(_QWORD *)v11 + 31);
  else
    v13 = *(_QWORD *)(*(_QWORD *)v11 + 16);
  v14 = &v21;
  std::string::basic_string[abi:ne180100]((uint64_t)&v21, v13 + 1);
  if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v14 = (std::string *)v21.__r_.__value_.__r.__words[0];
  if (v13)
  {
    v17 = *(char **)(v12 + 8);
    v16 = (char *)(v12 + 8);
    v15 = v17;
    if (v16[23] >= 0)
      v18 = v16;
    else
      v18 = v15;
    memmove(v14, v18, v13);
  }
  *(_WORD *)((char *)&v14->__r_.__value_.__l.__data_ + v13) = 46;
  v19 = std::string::append(&v21, "isReversed");
  v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  __p.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  mlcore::EntityClass::setPropertyForName(v9, v10, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
}

void sub_20A7FC114(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::PlaylistPropertyKeepLocal(void)::$_0 &&>>()
{
  uint64_t v0;
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  mlcore::ContainerTable **v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  std::string *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  std::string *v19;
  __int128 v20;
  std::string v21;
  std::string __p;
  char v23;
  _QWORD v24[2];

  v0 = operator new();
  v1 = (_QWORD *)mediaplatform::Singleton<mlcore::ContainerTable>::sharedInstance();
  v2 = (std::__shared_weak_count *)v1[1];
  v24[0] = *v1;
  v24[1] = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  v5 = (mlcore::ContainerTable **)mediaplatform::Singleton<mlcore::ContainerTable>::sharedInstance();
  mlcore::ContainerTable::keepLocalColumn(*v5, (uint64_t)&__p);
  mlcore::DatabaseModelProperty<int>::DatabaseModelProperty(v0, v24, (uint64_t)&__p);
  mlcore::PlaylistPropertyKeepLocal(void)::property = v0;
  if (v23 < 0)
    operator delete((void *)__p.__r_.__value_.__l.__size_);
  if (v2)
  {
    v6 = (unint64_t *)&v2->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v8 = mlcore::PlaylistPropertyKeepLocal(void)::property;
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  std::string::operator=((std::string *)(v8 + 40), &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v9 = mlcore::TypedEntityClass<mlcore::Playlist>::sharedPointer();
  v10 = mlcore::PlaylistPropertyKeepLocal(void)::property;
  v11 = mediaplatform::Singleton<mlcore::ContainerTable>::sharedInstance();
  v12 = *(_QWORD *)v11;
  if (*(char *)(*(_QWORD *)v11 + 31) >= 0)
    v13 = *(unsigned __int8 *)(*(_QWORD *)v11 + 31);
  else
    v13 = *(_QWORD *)(*(_QWORD *)v11 + 16);
  v14 = &v21;
  std::string::basic_string[abi:ne180100]((uint64_t)&v21, v13 + 1);
  if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v14 = (std::string *)v21.__r_.__value_.__r.__words[0];
  if (v13)
  {
    v17 = *(char **)(v12 + 8);
    v16 = (char *)(v12 + 8);
    v15 = v17;
    if (v16[23] >= 0)
      v18 = v16;
    else
      v18 = v15;
    memmove(v14, v18, v13);
  }
  *(_WORD *)((char *)&v14->__r_.__value_.__l.__data_ + v13) = 46;
  v19 = std::string::append(&v21, "keepLocal");
  v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  __p.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  mlcore::EntityClass::setPropertyForName(v9, v10, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
}

void sub_20A7FC3A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::PlaylistPropertyKeepLocalStatus(void)::$_0 &&>>()
{
  uint64_t v0;
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  mlcore::ContainerTable **v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  std::string *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  std::string *v19;
  __int128 v20;
  std::string v21;
  std::string __p;
  char v23;
  _QWORD v24[2];

  v0 = operator new();
  v1 = (_QWORD *)mediaplatform::Singleton<mlcore::ContainerTable>::sharedInstance();
  v2 = (std::__shared_weak_count *)v1[1];
  v24[0] = *v1;
  v24[1] = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  v5 = (mlcore::ContainerTable **)mediaplatform::Singleton<mlcore::ContainerTable>::sharedInstance();
  mlcore::ContainerTable::keepLocalStatusColumn(*v5, (uint64_t)&__p);
  mlcore::DatabaseModelProperty<int>::DatabaseModelProperty(v0, v24, (uint64_t)&__p);
  mlcore::PlaylistPropertyKeepLocalStatus(void)::property = v0;
  if (v23 < 0)
    operator delete((void *)__p.__r_.__value_.__l.__size_);
  if (v2)
  {
    v6 = (unint64_t *)&v2->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v8 = mlcore::PlaylistPropertyKeepLocalStatus(void)::property;
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  std::string::operator=((std::string *)(v8 + 40), &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v9 = mlcore::TypedEntityClass<mlcore::Playlist>::sharedPointer();
  v10 = mlcore::PlaylistPropertyKeepLocalStatus(void)::property;
  v11 = mediaplatform::Singleton<mlcore::ContainerTable>::sharedInstance();
  v12 = *(_QWORD *)v11;
  if (*(char *)(*(_QWORD *)v11 + 31) >= 0)
    v13 = *(unsigned __int8 *)(*(_QWORD *)v11 + 31);
  else
    v13 = *(_QWORD *)(*(_QWORD *)v11 + 16);
  v14 = &v21;
  std::string::basic_string[abi:ne180100]((uint64_t)&v21, v13 + 1);
  if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v14 = (std::string *)v21.__r_.__value_.__r.__words[0];
  if (v13)
  {
    v17 = *(char **)(v12 + 8);
    v16 = (char *)(v12 + 8);
    v15 = v17;
    if (v16[23] >= 0)
      v18 = v16;
    else
      v18 = v15;
    memmove(v14, v18, v13);
  }
  *(_WORD *)((char *)&v14->__r_.__value_.__l.__data_ + v13) = 46;
  v19 = std::string::append(&v21, "keepLocalStatus");
  v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  __p.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  mlcore::EntityClass::setPropertyForName(v9, v10, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
}

void sub_20A7FC634(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::PlaylistPropertyKeepLocalStatusReason(void)::$_0 &&>>()
{
  uint64_t v0;
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  mlcore::ContainerTable **v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  std::string *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  std::string *v19;
  __int128 v20;
  std::string v21;
  std::string __p;
  char v23;
  _QWORD v24[2];

  v0 = operator new();
  v1 = (_QWORD *)mediaplatform::Singleton<mlcore::ContainerTable>::sharedInstance();
  v2 = (std::__shared_weak_count *)v1[1];
  v24[0] = *v1;
  v24[1] = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  v5 = (mlcore::ContainerTable **)mediaplatform::Singleton<mlcore::ContainerTable>::sharedInstance();
  mlcore::ContainerTable::keepLocalStatusReasonColumn(*v5, (uint64_t)&__p);
  mlcore::DatabaseModelProperty<int>::DatabaseModelProperty(v0, v24, (uint64_t)&__p);
  mlcore::PlaylistPropertyKeepLocalStatusReason(void)::property = v0;
  if (v23 < 0)
    operator delete((void *)__p.__r_.__value_.__l.__size_);
  if (v2)
  {
    v6 = (unint64_t *)&v2->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v8 = mlcore::PlaylistPropertyKeepLocalStatusReason(void)::property;
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  std::string::operator=((std::string *)(v8 + 40), &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v9 = mlcore::TypedEntityClass<mlcore::Playlist>::sharedPointer();
  v10 = mlcore::PlaylistPropertyKeepLocalStatusReason(void)::property;
  v11 = mediaplatform::Singleton<mlcore::ContainerTable>::sharedInstance();
  v12 = *(_QWORD *)v11;
  if (*(char *)(*(_QWORD *)v11 + 31) >= 0)
    v13 = *(unsigned __int8 *)(*(_QWORD *)v11 + 31);
  else
    v13 = *(_QWORD *)(*(_QWORD *)v11 + 16);
  v14 = &v21;
  std::string::basic_string[abi:ne180100]((uint64_t)&v21, v13 + 1);
  if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v14 = (std::string *)v21.__r_.__value_.__r.__words[0];
  if (v13)
  {
    v17 = *(char **)(v12 + 8);
    v16 = (char *)(v12 + 8);
    v15 = v17;
    if (v16[23] >= 0)
      v18 = v16;
    else
      v18 = v15;
    memmove(v14, v18, v13);
  }
  *(_WORD *)((char *)&v14->__r_.__value_.__l.__data_ + v13) = 46;
  v19 = std::string::append(&v21, "keepLocalStatusReason");
  v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  __p.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  mlcore::EntityClass::setPropertyForName(v9, v10, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
}

void sub_20A7FC8C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::PlaylistPropertyKeepLocalConstraints(void)::$_0 &&>>()
{
  uint64_t v0;
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  mlcore::ContainerTable **v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  std::string *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  std::string *v19;
  __int128 v20;
  std::string v21;
  std::string __p;
  char v23;
  _QWORD v24[2];

  v0 = operator new();
  v1 = (_QWORD *)mediaplatform::Singleton<mlcore::ContainerTable>::sharedInstance();
  v2 = (std::__shared_weak_count *)v1[1];
  v24[0] = *v1;
  v24[1] = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  v5 = (mlcore::ContainerTable **)mediaplatform::Singleton<mlcore::ContainerTable>::sharedInstance();
  mlcore::ContainerTable::keepLocalConstraintsColumn(*v5, (uint64_t)&__p);
  mlcore::DatabaseModelProperty<int>::DatabaseModelProperty(v0, v24, (uint64_t)&__p);
  mlcore::PlaylistPropertyKeepLocalConstraints(void)::property = v0;
  if (v23 < 0)
    operator delete((void *)__p.__r_.__value_.__l.__size_);
  if (v2)
  {
    v6 = (unint64_t *)&v2->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v8 = mlcore::PlaylistPropertyKeepLocalConstraints(void)::property;
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  std::string::operator=((std::string *)(v8 + 40), &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v9 = mlcore::TypedEntityClass<mlcore::Playlist>::sharedPointer();
  v10 = mlcore::PlaylistPropertyKeepLocalConstraints(void)::property;
  v11 = mediaplatform::Singleton<mlcore::ContainerTable>::sharedInstance();
  v12 = *(_QWORD *)v11;
  if (*(char *)(*(_QWORD *)v11 + 31) >= 0)
    v13 = *(unsigned __int8 *)(*(_QWORD *)v11 + 31);
  else
    v13 = *(_QWORD *)(*(_QWORD *)v11 + 16);
  v14 = &v21;
  std::string::basic_string[abi:ne180100]((uint64_t)&v21, v13 + 1);
  if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v14 = (std::string *)v21.__r_.__value_.__r.__words[0];
  if (v13)
  {
    v17 = *(char **)(v12 + 8);
    v16 = (char *)(v12 + 8);
    v15 = v17;
    if (v16[23] >= 0)
      v18 = v16;
    else
      v18 = v15;
    memmove(v14, v18, v13);
  }
  *(_WORD *)((char *)&v14->__r_.__value_.__l.__data_ + v13) = 46;
  v19 = std::string::append(&v21, "keepLocalConstraints");
  v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  __p.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  mlcore::EntityClass::setPropertyForName(v9, v10, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
}

void sub_20A7FCB54(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

uint64_t mlcore::PlaylistPropertyIsKeepLocalEnabled(mlcore *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&mlcore::PlaylistPropertyIsKeepLocalEnabled(void)::once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&mlcore::PlaylistPropertyIsKeepLocalEnabled(void)::once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::PlaylistPropertyIsKeepLocalEnabled(void)::$_0 &&>>);
  }
  return mlcore::PlaylistPropertyIsKeepLocalEnabled(void)::property;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::PlaylistPropertyIsKeepLocalEnabled(void)::$_0 &&>>()
{
  mlcore *v0;
  uint64_t v1;
  _QWORD *v2;
  __int128 v3;
  std::__shared_weak_count *v4;
  unint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  std::string __p;
  __int128 v15;

  v0 = (mlcore *)operator new();
  v1 = mlcore::PlaylistPropertyKeepLocal(v0);
  v2 = operator new(8uLL);
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v2;
  *v2 = 0x200000001;
  __p.__r_.__value_.__l.__size_ = (std::string::size_type)(v2 + 1);
  __p.__r_.__value_.__r.__words[2] = (std::string::size_type)(v2 + 1);
  std::allocate_shared[abi:ne180100]<mlcore::InPredicate<int>,std::allocator<mlcore::InPredicate<int>>,mlcore::ModelProperty<int> *&,std::vector<int> const&,void>((uint64_t *)&v15, v1, (int **)&__p);
  v3 = v15;
  v15 = 0uLL;
  *((_OWORD *)v0 + 1) = 0u;
  *((_OWORD *)v0 + 2) = 0u;
  *(_QWORD *)v0 = &off_24C3398B8;
  *((_OWORD *)v0 + 3) = 0u;
  *((_OWORD *)v0 + 4) = v3;
  v4 = (std::__shared_weak_count *)*((_QWORD *)&v3 + 1);
  if (*((_QWORD *)&v3 + 1))
  {
    v5 = (unint64_t *)(*((_QWORD *)&v3 + 1) + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
    mlcore::PlaylistPropertyIsKeepLocalEnabled(void)::property = (uint64_t)v0;
    do
      v7 = __ldaxr(v5);
    while (__stlxr(v7 - 1, v5));
    if (!v7)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v3 + 1) + 16))(*((_QWORD *)&v3 + 1));
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  else
  {
    mlcore::PlaylistPropertyIsKeepLocalEnabled(void)::property = (uint64_t)v0;
  }
  v8 = (std::__shared_weak_count *)*((_QWORD *)&v15 + 1);
  if (*((_QWORD *)&v15 + 1))
  {
    v9 = (unint64_t *)(*((_QWORD *)&v15 + 1) + 8);
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  if (__p.__r_.__value_.__r.__words[0])
  {
    __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  v11 = mlcore::PlaylistPropertyIsKeepLocalEnabled(void)::property;
  std::string::basic_string[abi:ne180100]<0>(&__p, "is_keeplocal_enabled");
  std::string::operator=((std::string *)(v11 + 40), &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v12 = mlcore::TypedEntityClass<mlcore::Playlist>::sharedPointer();
  v13 = mlcore::PlaylistPropertyIsKeepLocalEnabled(void)::property;
  std::string::basic_string[abi:ne180100]<0>(&__p, "isKeepLocalEnabled");
  mlcore::EntityClass::setPropertyForName(v12, v13, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_20A7FCE10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::PlaylistPropertyCloudGlobalID(void)::$_0 &&>>()
{
  uint64_t v0;
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  mlcore::ContainerTable **v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  std::string *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  std::string *v19;
  __int128 v20;
  std::string v21;
  std::string __str;
  _QWORD v23[2];

  v0 = operator new();
  v1 = (_QWORD *)mediaplatform::Singleton<mlcore::ContainerTable>::sharedInstance();
  v2 = (std::__shared_weak_count *)v1[1];
  v23[0] = *v1;
  v23[1] = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  v5 = (mlcore::ContainerTable **)mediaplatform::Singleton<mlcore::ContainerTable>::sharedInstance();
  mlcore::ContainerTable::cloudGlobalIDColumn(*v5, (uint64_t)&__str);
  mlcore::DatabaseModelProperty<std::string>::DatabaseModelProperty(v0, v23, (uint64_t)&__str);
  mlcore::PlaylistPropertyCloudGlobalID(void)::property = v0;
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&__str);
  if (v2)
  {
    v6 = (unint64_t *)&v2->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v8 = mlcore::PlaylistPropertyCloudGlobalID(void)::property;
  std::string::basic_string[abi:ne180100]<0>(&__str, "");
  std::string::operator=((std::string *)(v8 + 40), &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  v9 = mlcore::TypedEntityClass<mlcore::Playlist>::sharedPointer();
  v10 = mlcore::PlaylistPropertyCloudGlobalID(void)::property;
  v11 = mediaplatform::Singleton<mlcore::ContainerTable>::sharedInstance();
  v12 = *(_QWORD *)v11;
  if (*(char *)(*(_QWORD *)v11 + 31) >= 0)
    v13 = *(unsigned __int8 *)(*(_QWORD *)v11 + 31);
  else
    v13 = *(_QWORD *)(*(_QWORD *)v11 + 16);
  v14 = &v21;
  std::string::basic_string[abi:ne180100]((uint64_t)&v21, v13 + 1);
  if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v14 = (std::string *)v21.__r_.__value_.__r.__words[0];
  if (v13)
  {
    v17 = *(char **)(v12 + 8);
    v16 = (char *)(v12 + 8);
    v15 = v17;
    if (v16[23] >= 0)
      v18 = v16;
    else
      v18 = v15;
    memmove(v14, v18, v13);
  }
  *(_WORD *)((char *)&v14->__r_.__value_.__l.__data_ + v13) = 46;
  v19 = std::string::append(&v21, "cloudGlobalID");
  v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  __str.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  mlcore::EntityClass::setPropertyForName(v9, v10, &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
}

void sub_20A7FD038(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::PlaylistPropertyCloudShareURL(void)::$_0 &&>>()
{
  uint64_t v0;
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  mlcore::ContainerTable **v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  std::string *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  std::string *v19;
  __int128 v20;
  std::string v21;
  std::string __str;
  _QWORD v23[2];

  v0 = operator new();
  v1 = (_QWORD *)mediaplatform::Singleton<mlcore::ContainerTable>::sharedInstance();
  v2 = (std::__shared_weak_count *)v1[1];
  v23[0] = *v1;
  v23[1] = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  v5 = (mlcore::ContainerTable **)mediaplatform::Singleton<mlcore::ContainerTable>::sharedInstance();
  mlcore::ContainerTable::cloudShareURLColumn(*v5, (uint64_t)&__str);
  mlcore::DatabaseModelProperty<std::string>::DatabaseModelProperty(v0, v23, (uint64_t)&__str);
  mlcore::PlaylistPropertyCloudShareURL(void)::property = v0;
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&__str);
  if (v2)
  {
    v6 = (unint64_t *)&v2->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v8 = mlcore::PlaylistPropertyCloudShareURL(void)::property;
  std::string::basic_string[abi:ne180100]<0>(&__str, "");
  std::string::operator=((std::string *)(v8 + 40), &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  v9 = mlcore::TypedEntityClass<mlcore::Playlist>::sharedPointer();
  v10 = mlcore::PlaylistPropertyCloudShareURL(void)::property;
  v11 = mediaplatform::Singleton<mlcore::ContainerTable>::sharedInstance();
  v12 = *(_QWORD *)v11;
  if (*(char *)(*(_QWORD *)v11 + 31) >= 0)
    v13 = *(unsigned __int8 *)(*(_QWORD *)v11 + 31);
  else
    v13 = *(_QWORD *)(*(_QWORD *)v11 + 16);
  v14 = &v21;
  std::string::basic_string[abi:ne180100]((uint64_t)&v21, v13 + 1);
  if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v14 = (std::string *)v21.__r_.__value_.__r.__words[0];
  if (v13)
  {
    v17 = *(char **)(v12 + 8);
    v16 = (char *)(v12 + 8);
    v15 = v17;
    if (v16[23] >= 0)
      v18 = v16;
    else
      v18 = v15;
    memmove(v14, v18, v13);
  }
  *(_WORD *)((char *)&v14->__r_.__value_.__l.__data_ + v13) = 46;
  v19 = std::string::append(&v21, "cloudShareURL");
  v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  __str.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  mlcore::EntityClass::setPropertyForName(v9, v10, &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
}

void sub_20A7FD2B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

uint64_t mlcore::PlaylistPropertyCloudMinimumRefreshInterval(mlcore *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&mlcore::PlaylistPropertyCloudMinimumRefreshInterval(void)::once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&mlcore::PlaylistPropertyCloudMinimumRefreshInterval(void)::once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::PlaylistPropertyCloudMinimumRefreshInterval(void)::$_0 &&>>);
  }
  return mlcore::PlaylistPropertyCloudMinimumRefreshInterval(void)::property;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::PlaylistPropertyCloudMinimumRefreshInterval(void)::$_0 &&>>()
{
  uint64_t v0;
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  mlcore::ContainerTable **v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  std::string *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  std::string *v19;
  __int128 v20;
  std::string v21;
  std::string __p;
  char v23;
  _QWORD v24[2];

  v0 = operator new();
  v1 = (_QWORD *)mediaplatform::Singleton<mlcore::ContainerTable>::sharedInstance();
  v2 = (std::__shared_weak_count *)v1[1];
  v24[0] = *v1;
  v24[1] = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  v5 = (mlcore::ContainerTable **)mediaplatform::Singleton<mlcore::ContainerTable>::sharedInstance();
  mlcore::ContainerTable::cloudMinimumRefreshIntervalColumn(*v5, (uint64_t)&__p);
  mlcore::DatabaseModelProperty<long long>::DatabaseModelProperty(v0, v24, (uint64_t)&__p);
  mlcore::PlaylistPropertyCloudMinimumRefreshInterval(void)::property = v0;
  if (v23 < 0)
    operator delete((void *)__p.__r_.__value_.__l.__size_);
  if (v2)
  {
    v6 = (unint64_t *)&v2->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v8 = mlcore::PlaylistPropertyCloudMinimumRefreshInterval(void)::property;
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  std::string::operator=((std::string *)(v8 + 40), &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v9 = mlcore::TypedEntityClass<mlcore::Playlist>::sharedPointer();
  v10 = mlcore::PlaylistPropertyCloudMinimumRefreshInterval(void)::property;
  v11 = mediaplatform::Singleton<mlcore::ContainerTable>::sharedInstance();
  v12 = *(_QWORD *)v11;
  if (*(char *)(*(_QWORD *)v11 + 31) >= 0)
    v13 = *(unsigned __int8 *)(*(_QWORD *)v11 + 31);
  else
    v13 = *(_QWORD *)(*(_QWORD *)v11 + 16);
  v14 = &v21;
  std::string::basic_string[abi:ne180100]((uint64_t)&v21, v13 + 1);
  if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v14 = (std::string *)v21.__r_.__value_.__r.__words[0];
  if (v13)
  {
    v17 = *(char **)(v12 + 8);
    v16 = (char *)(v12 + 8);
    v15 = v17;
    if (v16[23] >= 0)
      v18 = v16;
    else
      v18 = v15;
    memmove(v14, v18, v13);
  }
  *(_WORD *)((char *)&v14->__r_.__value_.__l.__data_ + v13) = 46;
  v19 = std::string::append(&v21, "minRefreshInterval");
  v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  __p.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  mlcore::EntityClass::setPropertyForName(v9, v10, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
}

void sub_20A7FD59C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

uint64_t mlcore::PlaylistPropertyCloudLastUpdateTime(mlcore *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&mlcore::PlaylistPropertyCloudLastUpdateTime(void)::once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&mlcore::PlaylistPropertyCloudLastUpdateTime(void)::once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::PlaylistPropertyCloudLastUpdateTime(void)::$_0 &&>>);
  }
  return mlcore::PlaylistPropertyCloudLastUpdateTime(void)::property;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::PlaylistPropertyCloudLastUpdateTime(void)::$_0 &&>>()
{
  uint64_t v0;
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  mlcore::ContainerTable **v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  std::string *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  std::string *v19;
  __int128 v20;
  std::string v21;
  std::string __p;
  char v23;
  _QWORD v24[2];

  v0 = operator new();
  v1 = (_QWORD *)mediaplatform::Singleton<mlcore::ContainerTable>::sharedInstance();
  v2 = (std::__shared_weak_count *)v1[1];
  v24[0] = *v1;
  v24[1] = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  v5 = (mlcore::ContainerTable **)mediaplatform::Singleton<mlcore::ContainerTable>::sharedInstance();
  mlcore::ContainerTable::cloudLastUpdateTimeColumn(*v5, (uint64_t)&__p);
  mlcore::DatabaseModelProperty<long long>::DatabaseModelProperty(v0, v24, (uint64_t)&__p);
  mlcore::PlaylistPropertyCloudLastUpdateTime(void)::property = v0;
  if (v23 < 0)
    operator delete((void *)__p.__r_.__value_.__l.__size_);
  if (v2)
  {
    v6 = (unint64_t *)&v2->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v8 = mlcore::PlaylistPropertyCloudLastUpdateTime(void)::property;
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  std::string::operator=((std::string *)(v8 + 40), &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v9 = mlcore::TypedEntityClass<mlcore::Playlist>::sharedPointer();
  v10 = mlcore::PlaylistPropertyCloudLastUpdateTime(void)::property;
  v11 = mediaplatform::Singleton<mlcore::ContainerTable>::sharedInstance();
  v12 = *(_QWORD *)v11;
  if (*(char *)(*(_QWORD *)v11 + 31) >= 0)
    v13 = *(unsigned __int8 *)(*(_QWORD *)v11 + 31);
  else
    v13 = *(_QWORD *)(*(_QWORD *)v11 + 16);
  v14 = &v21;
  std::string::basic_string[abi:ne180100]((uint64_t)&v21, v13 + 1);
  if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v14 = (std::string *)v21.__r_.__value_.__r.__words[0];
  if (v13)
  {
    v17 = *(char **)(v12 + 8);
    v16 = (char *)(v12 + 8);
    v15 = v17;
    if (v16[23] >= 0)
      v18 = v16;
    else
      v18 = v15;
    memmove(v14, v18, v13);
  }
  *(_WORD *)((char *)&v14->__r_.__value_.__l.__data_ + v13) = 46;
  v19 = std::string::append(&v21, "lastUpdateTime");
  v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  __p.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  mlcore::EntityClass::setPropertyForName(v9, v10, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
}

void sub_20A7FD888(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::PlaylistPropertyCloudIsPublic(void)::$_0 &&>>()
{
  uint64_t v0;
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  mlcore::ContainerTable **v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  std::string *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  std::string *v19;
  __int128 v20;
  std::string v21;
  std::string __p;
  char v23;
  _QWORD v24[2];

  v0 = operator new();
  v1 = (_QWORD *)mediaplatform::Singleton<mlcore::ContainerTable>::sharedInstance();
  v2 = (std::__shared_weak_count *)v1[1];
  v24[0] = *v1;
  v24[1] = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  v5 = (mlcore::ContainerTable **)mediaplatform::Singleton<mlcore::ContainerTable>::sharedInstance();
  mlcore::ContainerTable::cloudIsPublicColumn(*v5, (uint64_t)&__p);
  mlcore::DatabaseModelProperty<int>::DatabaseModelProperty(v0, v24, (uint64_t)&__p);
  mlcore::PlaylistPropertyCloudIsPublic(void)::property = v0;
  if (v23 < 0)
    operator delete((void *)__p.__r_.__value_.__l.__size_);
  if (v2)
  {
    v6 = (unint64_t *)&v2->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v8 = mlcore::PlaylistPropertyCloudIsPublic(void)::property;
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  std::string::operator=((std::string *)(v8 + 40), &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v9 = mlcore::TypedEntityClass<mlcore::Playlist>::sharedPointer();
  v10 = mlcore::PlaylistPropertyCloudIsPublic(void)::property;
  v11 = mediaplatform::Singleton<mlcore::ContainerTable>::sharedInstance();
  v12 = *(_QWORD *)v11;
  if (*(char *)(*(_QWORD *)v11 + 31) >= 0)
    v13 = *(unsigned __int8 *)(*(_QWORD *)v11 + 31);
  else
    v13 = *(_QWORD *)(*(_QWORD *)v11 + 16);
  v14 = &v21;
  std::string::basic_string[abi:ne180100]((uint64_t)&v21, v13 + 1);
  if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v14 = (std::string *)v21.__r_.__value_.__r.__words[0];
  if (v13)
  {
    v17 = *(char **)(v12 + 8);
    v16 = (char *)(v12 + 8);
    v15 = v17;
    if (v16[23] >= 0)
      v18 = v16;
    else
      v18 = v15;
    memmove(v14, v18, v13);
  }
  *(_WORD *)((char *)&v14->__r_.__value_.__l.__data_ + v13) = 46;
  v19 = std::string::append(&v21, "isPublic");
  v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  __p.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  mlcore::EntityClass::setPropertyForName(v9, v10, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
}

void sub_20A7FDB18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::PlaylistPropertyCloudIsVisible(void)::$_0 &&>>()
{
  uint64_t v0;
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  mlcore::ContainerTable **v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  std::string *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  std::string *v19;
  __int128 v20;
  std::string v21;
  std::string __p;
  char v23;
  _QWORD v24[2];

  v0 = operator new();
  v1 = (_QWORD *)mediaplatform::Singleton<mlcore::ContainerTable>::sharedInstance();
  v2 = (std::__shared_weak_count *)v1[1];
  v24[0] = *v1;
  v24[1] = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  v5 = (mlcore::ContainerTable **)mediaplatform::Singleton<mlcore::ContainerTable>::sharedInstance();
  mlcore::ContainerTable::cloudIsVisibleColumn(*v5, (uint64_t)&__p);
  mlcore::DatabaseModelProperty<int>::DatabaseModelProperty(v0, v24, (uint64_t)&__p);
  mlcore::PlaylistPropertyCloudIsVisible(void)::property = v0;
  if (v23 < 0)
    operator delete((void *)__p.__r_.__value_.__l.__size_);
  if (v2)
  {
    v6 = (unint64_t *)&v2->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v8 = mlcore::PlaylistPropertyCloudIsVisible(void)::property;
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  std::string::operator=((std::string *)(v8 + 40), &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v9 = mlcore::TypedEntityClass<mlcore::Playlist>::sharedPointer();
  v10 = mlcore::PlaylistPropertyCloudIsVisible(void)::property;
  v11 = mediaplatform::Singleton<mlcore::ContainerTable>::sharedInstance();
  v12 = *(_QWORD *)v11;
  if (*(char *)(*(_QWORD *)v11 + 31) >= 0)
    v13 = *(unsigned __int8 *)(*(_QWORD *)v11 + 31);
  else
    v13 = *(_QWORD *)(*(_QWORD *)v11 + 16);
  v14 = &v21;
  std::string::basic_string[abi:ne180100]((uint64_t)&v21, v13 + 1);
  if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v14 = (std::string *)v21.__r_.__value_.__r.__words[0];
  if (v13)
  {
    v17 = *(char **)(v12 + 8);
    v16 = (char *)(v12 + 8);
    v15 = v17;
    if (v16[23] >= 0)
      v18 = v16;
    else
      v18 = v15;
    memmove(v14, v18, v13);
  }
  *(_WORD *)((char *)&v14->__r_.__value_.__l.__data_ + v13) = 46;
  v19 = std::string::append(&v21, "isCloudVisible");
  v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  __p.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  mlcore::EntityClass::setPropertyForName(v9, v10, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
}

void sub_20A7FDDA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::PlaylistPropertyCloudAuthorStoreID(void)::$_0 &&>>()
{
  uint64_t v0;
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  mlcore::ContainerTable **v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  std::string *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  std::string *v19;
  __int128 v20;
  std::string v21;
  std::string __p;
  char v23;
  _QWORD v24[2];

  v0 = operator new();
  v1 = (_QWORD *)mediaplatform::Singleton<mlcore::ContainerTable>::sharedInstance();
  v2 = (std::__shared_weak_count *)v1[1];
  v24[0] = *v1;
  v24[1] = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  v5 = (mlcore::ContainerTable **)mediaplatform::Singleton<mlcore::ContainerTable>::sharedInstance();
  mlcore::ContainerTable::cloudAuthorStoreIDColumn(*v5, (uint64_t)&__p);
  mlcore::DatabaseModelProperty<long long>::DatabaseModelProperty(v0, v24, (uint64_t)&__p);
  mlcore::PlaylistPropertyCloudAuthorStoreID(void)::property = v0;
  if (v23 < 0)
    operator delete((void *)__p.__r_.__value_.__l.__size_);
  if (v2)
  {
    v6 = (unint64_t *)&v2->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v8 = mlcore::PlaylistPropertyCloudAuthorStoreID(void)::property;
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  std::string::operator=((std::string *)(v8 + 40), &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v9 = mlcore::TypedEntityClass<mlcore::Playlist>::sharedPointer();
  v10 = mlcore::PlaylistPropertyCloudAuthorStoreID(void)::property;
  v11 = mediaplatform::Singleton<mlcore::ContainerTable>::sharedInstance();
  v12 = *(_QWORD *)v11;
  if (*(char *)(*(_QWORD *)v11 + 31) >= 0)
    v13 = *(unsigned __int8 *)(*(_QWORD *)v11 + 31);
  else
    v13 = *(_QWORD *)(*(_QWORD *)v11 + 16);
  v14 = &v21;
  std::string::basic_string[abi:ne180100]((uint64_t)&v21, v13 + 1);
  if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v14 = (std::string *)v21.__r_.__value_.__r.__words[0];
  if (v13)
  {
    v17 = *(char **)(v12 + 8);
    v16 = (char *)(v12 + 8);
    v15 = v17;
    if (v16[23] >= 0)
      v18 = v16;
    else
      v18 = v15;
    memmove(v14, v18, v13);
  }
  *(_WORD *)((char *)&v14->__r_.__value_.__l.__data_ + v13) = 46;
  v19 = std::string::append(&v21, "authorStoreID");
  v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  __p.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  mlcore::EntityClass::setPropertyForName(v9, v10, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
}

void sub_20A7FE038(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::PlaylistPropertySyncID(void)::$_0 &&>>()
{
  uint64_t v0;
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  mlcore::ContainerTable **v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  std::string *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  std::string *v19;
  __int128 v20;
  std::string v21;
  std::string __p;
  char v23;
  _QWORD v24[2];

  v0 = operator new();
  v1 = (_QWORD *)mediaplatform::Singleton<mlcore::ContainerTable>::sharedInstance();
  v2 = (std::__shared_weak_count *)v1[1];
  v24[0] = *v1;
  v24[1] = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  v5 = (mlcore::ContainerTable **)mediaplatform::Singleton<mlcore::ContainerTable>::sharedInstance();
  mlcore::ContainerTable::syncIDColumn(*v5, (uint64_t)&__p);
  mlcore::DatabaseModelProperty<long long>::DatabaseModelProperty(v0, v24, (uint64_t)&__p);
  mlcore::PlaylistPropertySyncID(void)::property = v0;
  if (v23 < 0)
    operator delete((void *)__p.__r_.__value_.__l.__size_);
  if (v2)
  {
    v6 = (unint64_t *)&v2->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v8 = mlcore::PlaylistPropertySyncID(void)::property;
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  std::string::operator=((std::string *)(v8 + 40), &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v9 = mlcore::TypedEntityClass<mlcore::Playlist>::sharedPointer();
  v10 = mlcore::PlaylistPropertySyncID(void)::property;
  v11 = mediaplatform::Singleton<mlcore::ContainerTable>::sharedInstance();
  v12 = *(_QWORD *)v11;
  if (*(char *)(*(_QWORD *)v11 + 31) >= 0)
    v13 = *(unsigned __int8 *)(*(_QWORD *)v11 + 31);
  else
    v13 = *(_QWORD *)(*(_QWORD *)v11 + 16);
  v14 = &v21;
  std::string::basic_string[abi:ne180100]((uint64_t)&v21, v13 + 1);
  if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v14 = (std::string *)v21.__r_.__value_.__r.__words[0];
  if (v13)
  {
    v17 = *(char **)(v12 + 8);
    v16 = (char *)(v12 + 8);
    v15 = v17;
    if (v16[23] >= 0)
      v18 = v16;
    else
      v18 = v15;
    memmove(v14, v18, v13);
  }
  *(_WORD *)((char *)&v14->__r_.__value_.__l.__data_ + v13) = 46;
  v19 = std::string::append(&v21, "syncID");
  v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  __p.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  mlcore::EntityClass::setPropertyForName(v9, v10, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
}

void sub_20A7FE2C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::PlaylistPropertyIsTracklistUserEditable(void)::$_0 &&>>()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  __int128 v3;
  uint64_t IsHidden;
  _QWORD *v5;
  __int128 v6;
  uint64_t IsGenius;
  _QWORD *v8;
  __int128 v9;
  uint64_t v10;
  _QWORD *v11;
  __int128 v12;
  uint64_t IsFolder;
  char *v14;
  __int128 v15;
  __int128 *v16;
  char v17;
  uint64_t v18;
  char v19;
  __int128 v20;
  unint64_t *v21;
  unint64_t v22;
  mlcore *v23;
  uint64_t IsEditable;
  _QWORD *v25;
  __int128 v26;
  uint64_t IsSubscribed;
  char *v28;
  __int128 v29;
  __int128 *v30;
  char v31;
  uint64_t v32;
  char v33;
  __int128 v34;
  unint64_t *v35;
  unint64_t v36;
  __int128 *v37;
  uint64_t v38;
  __int128 v39;
  unint64_t *v40;
  unint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *p_shared_owners;
  unint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  uint64_t i;
  uint64_t j;
  uint64_t k;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  __int128 *v54;
  __int128 v55;
  __int128 *v56;
  __int128 v57;
  __int128 **v58;
  __int128 *v59;
  __int128 *v60;
  uint64_t v61;
  std::__shared_weak_count *v62;
  __int128 ***v63;
  char v64;
  _OWORD v65[2];
  _OWORD v66[2];
  _BYTE __str[32];
  __int128 v68;
  uint64_t v69;
  _QWORD v70[4];

  v70[3] = *MEMORY[0x24BDAC8D0];
  v0 = operator new();
  v1 = mlcore::PlaylistPropertyDistinguishedKind((mlcore *)v0);
  v2 = (char *)operator new(0x48uLL);
  *(_OWORD *)(v2 + 8) = 0u;
  *(_QWORD *)v2 = &off_24C33CE50;
  *((_QWORD *)v2 + 4) = v1;
  *((_QWORD *)v2 + 5) = 0;
  *((_QWORD *)v2 + 3) = &unk_24C339C50;
  *((_DWORD *)v2 + 12) = 0;
  *(_OWORD *)(v2 + 56) = 0u;
  *(_QWORD *)&v3 = v2 + 24;
  *((_QWORD *)&v3 + 1) = v2;
  *(_OWORD *)__str = v3;
  IsHidden = mlcore::PlaylistPropertyIsHidden((mlcore *)v2);
  v5 = operator new(0x30uLL);
  v5[1] = 0;
  v5[2] = 0;
  *v5 = &off_24C33C9F0;
  v5[4] = IsHidden;
  *((_DWORD *)v5 + 10) = 1;
  v5[3] = &unk_24C3377B8;
  *(_QWORD *)&v6 = v5 + 3;
  *((_QWORD *)&v6 + 1) = v5;
  *(_OWORD *)&__str[16] = v6;
  IsGenius = mlcore::PlaylistPropertySmartIsGenius((mlcore *)v5);
  v8 = operator new(0x30uLL);
  v8[1] = 0;
  v8[2] = 0;
  *v8 = &off_24C33C9F0;
  v8[4] = IsGenius;
  *((_DWORD *)v8 + 10) = 1;
  v8[3] = &unk_24C3377B8;
  *(_QWORD *)&v9 = v8 + 3;
  *((_QWORD *)&v9 + 1) = v8;
  v68 = v9;
  v10 = mlcore::PlaylistPropertySmartCriteria((mlcore *)v8);
  v11 = operator new(0x30uLL);
  v11[1] = 0;
  v11[2] = 0;
  *v11 = &off_24C33C788;
  v11[4] = v10;
  *((_BYTE *)v11 + 40) = 1;
  v11[3] = &unk_24C337008;
  *(_QWORD *)&v12 = v11 + 3;
  *((_QWORD *)&v12 + 1) = v11;
  v66[0] = v12;
  IsFolder = mlcore::PlaylistPropertySmartIsFolder((mlcore *)v11);
  v14 = (char *)operator new(0x30uLL);
  *(_OWORD *)(v14 + 8) = 0u;
  *(_QWORD *)v14 = &off_24C33C9F0;
  *((_QWORD *)v14 + 4) = IsFolder;
  *((_DWORD *)v14 + 10) = 0;
  *((_QWORD *)v14 + 3) = &unk_24C3377B8;
  *(_QWORD *)&v15 = v14 + 24;
  *((_QWORD *)&v15 + 1) = v14;
  v66[1] = v15;
  v56 = 0;
  v57 = 0u;
  *(_QWORD *)&v65[0] = &v56;
  BYTE8(v65[0]) = 0;
  v16 = (__int128 *)operator new(0x20uLL);
  v17 = 0;
  v18 = 0;
  v56 = v16;
  *(_QWORD *)&v57 = v16;
  *((_QWORD *)&v57 + 1) = v16 + 2;
  do
  {
    v19 = v17;
    v20 = v66[v18];
    *v16 = v20;
    if (*((_QWORD *)&v20 + 1))
    {
      v21 = (unint64_t *)(*((_QWORD *)&v20 + 1) + 8);
      do
        v22 = __ldxr(v21);
      while (__stxr(v22 + 1, v21));
    }
    ++v16;
    v17 = 1;
    v18 = 1;
  }
  while ((v19 & 1) == 0);
  *(_QWORD *)&v57 = v16;
  mlcore::CreateOrPredicate(&v56, &v69);
  IsEditable = mlcore::PlaylistPropertyIsEditable(v23);
  v25 = operator new(0x30uLL);
  v25[1] = 0;
  v25[2] = 0;
  *v25 = &off_24C33C9F0;
  v25[4] = IsEditable;
  *((_DWORD *)v25 + 10) = 0;
  v25[3] = &unk_24C3377B8;
  *(_QWORD *)&v26 = v25 + 3;
  *((_QWORD *)&v26 + 1) = v25;
  v65[0] = v26;
  IsSubscribed = mlcore::PlaylistPropertyIsSubscribed((mlcore *)v25);
  v28 = (char *)operator new(0x30uLL);
  *(_OWORD *)(v28 + 8) = 0u;
  *(_QWORD *)v28 = &off_24C33C9F0;
  *((_QWORD *)v28 + 4) = IsSubscribed;
  *((_DWORD *)v28 + 10) = 1;
  *((_QWORD *)v28 + 3) = &unk_24C3377B8;
  *(_QWORD *)&v29 = v28 + 24;
  *((_QWORD *)&v29 + 1) = v28;
  v65[1] = v29;
  v54 = 0;
  v55 = 0u;
  v58 = &v54;
  LOBYTE(v59) = 0;
  v30 = (__int128 *)operator new(0x20uLL);
  v31 = 0;
  v32 = 0;
  v54 = v30;
  *(_QWORD *)&v55 = v30;
  *((_QWORD *)&v55 + 1) = v30 + 2;
  do
  {
    v33 = v31;
    v34 = v65[v32];
    *v30 = v34;
    if (*((_QWORD *)&v34 + 1))
    {
      v35 = (unint64_t *)(*((_QWORD *)&v34 + 1) + 8);
      do
        v36 = __ldxr(v35);
      while (__stxr(v36 + 1, v35));
    }
    ++v30;
    v31 = 1;
    v32 = 1;
  }
  while ((v33 & 1) == 0);
  *(_QWORD *)&v55 = v30;
  mlcore::CreateOrPredicate(&v54, v70);
  v58 = 0;
  v59 = 0;
  v60 = 0;
  v63 = &v58;
  v64 = 0;
  v37 = (__int128 *)operator new(0x50uLL);
  v38 = 0;
  v58 = (__int128 **)v37;
  v59 = v37;
  v60 = v37 + 5;
  do
  {
    v39 = *(_OWORD *)&__str[16 * v38];
    *v37 = v39;
    if (*((_QWORD *)&v39 + 1))
    {
      v40 = (unint64_t *)(*((_QWORD *)&v39 + 1) + 8);
      do
        v41 = __ldxr(v40);
      while (__stxr(v41 + 1, v40));
    }
    ++v38;
    ++v37;
  }
  while (v38 != 5);
  v59 = v37;
  mlcore::CreateAndPredicate((__int128 **)&v58, &v61);
  *(_OWORD *)(v0 + 32) = 0u;
  *(_OWORD *)(v0 + 48) = 0u;
  *(_OWORD *)(v0 + 16) = 0u;
  *(_QWORD *)v0 = &off_24C3398B8;
  v42 = v62;
  *(_QWORD *)(v0 + 64) = v61;
  *(_QWORD *)(v0 + 72) = v42;
  if (v42)
  {
    p_shared_owners = (unint64_t *)&v42->__shared_owners_;
    do
      v44 = __ldxr(p_shared_owners);
    while (__stxr(v44 + 1, p_shared_owners));
    v45 = v62;
    mlcore::PlaylistPropertyIsTracklistUserEditable(void)::property = v0;
    if (v62)
    {
      v46 = (unint64_t *)&v62->__shared_owners_;
      do
        v47 = __ldaxr(v46);
      while (__stlxr(v47 - 1, v46));
      if (!v47)
      {
        ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
        std::__shared_weak_count::__release_weak(v45);
      }
    }
  }
  else
  {
    mlcore::PlaylistPropertyIsTracklistUserEditable(void)::property = v0;
  }
  v63 = &v58;
  std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v63);
  for (i = 64; i != -16; i -= 16)
    std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)&__str[i]);
  v63 = (__int128 ***)&v54;
  std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v63);
  for (j = 1; j != -1; --j)
    std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)&v65[j]);
  *(_QWORD *)&v65[0] = &v56;
  std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__destroy_vector::operator()[abi:ne180100]((void ***)v65);
  for (k = 1; k != -1; --k)
    std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)&v66[k]);
  v51 = mlcore::PlaylistPropertyIsTracklistUserEditable(void)::property;
  std::string::basic_string[abi:ne180100]<0>(__str, "is_track_list_user_editable");
  std::string::operator=((std::string *)(v51 + 40), (const std::string *)__str);
  if ((__str[23] & 0x80000000) != 0)
    operator delete(*(void **)__str);
  v52 = mlcore::TypedEntityClass<mlcore::Playlist>::sharedPointer();
  v53 = mlcore::PlaylistPropertyIsTracklistUserEditable(void)::property;
  std::string::basic_string[abi:ne180100]<0>(__str, "isTracklistUserEditable");
  mlcore::EntityClass::setPropertyForName(v52, v53, (std::string *)__str);
  if ((__str[23] & 0x80000000) != 0)
    operator delete(*(void **)__str);
}

void sub_20A7FE8E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28)
{
  uint64_t v28;

  if (*(char *)(v28 - 137) < 0)
    operator delete(*(void **)(v28 - 160));
  _Unwind_Resume(exception_object);
}

void sub_20A7FEABC()
{
  JUMPOUT(0x20A7FEAB4);
}

uint64_t mlcore::PlaylistPropertyExternalVendorIdentifier(mlcore *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&mlcore::PlaylistPropertyExternalVendorIdentifier(void)::once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&mlcore::PlaylistPropertyExternalVendorIdentifier(void)::once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::PlaylistPropertyExternalVendorIdentifier(void)::$_0 &&>>);
  }
  return mlcore::PlaylistPropertyExternalVendorIdentifier(void)::property;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::PlaylistPropertyExternalVendorIdentifier(void)::$_0 &&>>()
{
  uint64_t v0;
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  mlcore::ContainerTable **v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  std::string *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  std::string *v19;
  __int128 v20;
  std::string v21;
  std::string __str;
  _QWORD v23[2];

  v0 = operator new();
  v1 = (_QWORD *)mediaplatform::Singleton<mlcore::ContainerTable>::sharedInstance();
  v2 = (std::__shared_weak_count *)v1[1];
  v23[0] = *v1;
  v23[1] = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  v5 = (mlcore::ContainerTable **)mediaplatform::Singleton<mlcore::ContainerTable>::sharedInstance();
  mlcore::ContainerTable::externalVendorIdentifierColumn(*v5, (uint64_t)&__str);
  mlcore::DatabaseModelProperty<std::string>::DatabaseModelProperty(v0, v23, (uint64_t)&__str);
  mlcore::PlaylistPropertyExternalVendorIdentifier(void)::property = v0;
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&__str);
  if (v2)
  {
    v6 = (unint64_t *)&v2->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v8 = mlcore::PlaylistPropertyExternalVendorIdentifier(void)::property;
  std::string::basic_string[abi:ne180100]<0>(&__str, "");
  std::string::operator=((std::string *)(v8 + 40), &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  v9 = mlcore::TypedEntityClass<mlcore::Playlist>::sharedPointer();
  v10 = mlcore::PlaylistPropertyExternalVendorIdentifier(void)::property;
  v11 = mediaplatform::Singleton<mlcore::ContainerTable>::sharedInstance();
  v12 = *(_QWORD *)v11;
  if (*(char *)(*(_QWORD *)v11 + 31) >= 0)
    v13 = *(unsigned __int8 *)(*(_QWORD *)v11 + 31);
  else
    v13 = *(_QWORD *)(*(_QWORD *)v11 + 16);
  v14 = &v21;
  std::string::basic_string[abi:ne180100]((uint64_t)&v21, v13 + 1);
  if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v14 = (std::string *)v21.__r_.__value_.__r.__words[0];
  if (v13)
  {
    v17 = *(char **)(v12 + 8);
    v16 = (char *)(v12 + 8);
    v15 = v17;
    if (v16[23] >= 0)
      v18 = v16;
    else
      v18 = v15;
    memmove(v14, v18, v13);
  }
  *(_WORD *)((char *)&v14->__r_.__value_.__l.__data_ + v13) = 46;
  v19 = std::string::append(&v21, "externalVendorIdentifier");
  v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  __str.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  mlcore::EntityClass::setPropertyForName(v9, v10, &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
}

void sub_20A7FECEC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::PlaylistPropertyExternalVendorDisplayName(void)::$_0 &&>>()
{
  uint64_t v0;
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  mlcore::ContainerTable **v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  std::string *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  std::string *v19;
  __int128 v20;
  std::string v21;
  std::string __str;
  _QWORD v23[2];

  v0 = operator new();
  v1 = (_QWORD *)mediaplatform::Singleton<mlcore::ContainerTable>::sharedInstance();
  v2 = (std::__shared_weak_count *)v1[1];
  v23[0] = *v1;
  v23[1] = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  v5 = (mlcore::ContainerTable **)mediaplatform::Singleton<mlcore::ContainerTable>::sharedInstance();
  mlcore::ContainerTable::externalVendorDisplayNameColumn(*v5, (uint64_t)&__str);
  mlcore::DatabaseModelProperty<std::string>::DatabaseModelProperty(v0, v23, (uint64_t)&__str);
  mlcore::PlaylistPropertyExternalVendorDisplayName(void)::property = v0;
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&__str);
  if (v2)
  {
    v6 = (unint64_t *)&v2->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v8 = mlcore::PlaylistPropertyExternalVendorDisplayName(void)::property;
  std::string::basic_string[abi:ne180100]<0>(&__str, "");
  std::string::operator=((std::string *)(v8 + 40), &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  v9 = mlcore::TypedEntityClass<mlcore::Playlist>::sharedPointer();
  v10 = mlcore::PlaylistPropertyExternalVendorDisplayName(void)::property;
  v11 = mediaplatform::Singleton<mlcore::ContainerTable>::sharedInstance();
  v12 = *(_QWORD *)v11;
  if (*(char *)(*(_QWORD *)v11 + 31) >= 0)
    v13 = *(unsigned __int8 *)(*(_QWORD *)v11 + 31);
  else
    v13 = *(_QWORD *)(*(_QWORD *)v11 + 16);
  v14 = &v21;
  std::string::basic_string[abi:ne180100]((uint64_t)&v21, v13 + 1);
  if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v14 = (std::string *)v21.__r_.__value_.__r.__words[0];
  if (v13)
  {
    v17 = *(char **)(v12 + 8);
    v16 = (char *)(v12 + 8);
    v15 = v17;
    if (v16[23] >= 0)
      v18 = v16;
    else
      v18 = v15;
    memmove(v14, v18, v13);
  }
  *(_WORD *)((char *)&v14->__r_.__value_.__l.__data_ + v13) = 46;
  v19 = std::string::append(&v21, "externalVendorDisplayName");
  v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  __str.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  mlcore::EntityClass::setPropertyForName(v9, v10, &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
}

void sub_20A7FEF6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

uint64_t mlcore::PlaylistPropertyExternalVendorContainerTag(mlcore *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&mlcore::PlaylistPropertyExternalVendorContainerTag(void)::once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&mlcore::PlaylistPropertyExternalVendorContainerTag(void)::once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::PlaylistPropertyExternalVendorContainerTag(void)::$_0 &&>>);
  }
  return mlcore::PlaylistPropertyExternalVendorContainerTag(void)::property;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::PlaylistPropertyExternalVendorContainerTag(void)::$_0 &&>>()
{
  uint64_t v0;
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  mlcore::ContainerTable **v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  std::string *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  std::string *v19;
  __int128 v20;
  std::string v21;
  std::string __str;
  _QWORD v23[2];

  v0 = operator new();
  v1 = (_QWORD *)mediaplatform::Singleton<mlcore::ContainerTable>::sharedInstance();
  v2 = (std::__shared_weak_count *)v1[1];
  v23[0] = *v1;
  v23[1] = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  v5 = (mlcore::ContainerTable **)mediaplatform::Singleton<mlcore::ContainerTable>::sharedInstance();
  mlcore::ContainerTable::externalVendorContainerTagColumn(*v5, (uint64_t)&__str);
  mlcore::DatabaseModelProperty<std::string>::DatabaseModelProperty(v0, v23, (uint64_t)&__str);
  mlcore::PlaylistPropertyExternalVendorContainerTag(void)::property = v0;
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&__str);
  if (v2)
  {
    v6 = (unint64_t *)&v2->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v8 = mlcore::PlaylistPropertyExternalVendorContainerTag(void)::property;
  std::string::basic_string[abi:ne180100]<0>(&__str, "");
  std::string::operator=((std::string *)(v8 + 40), &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  v9 = mlcore::TypedEntityClass<mlcore::Playlist>::sharedPointer();
  v10 = mlcore::PlaylistPropertyExternalVendorContainerTag(void)::property;
  v11 = mediaplatform::Singleton<mlcore::ContainerTable>::sharedInstance();
  v12 = *(_QWORD *)v11;
  if (*(char *)(*(_QWORD *)v11 + 31) >= 0)
    v13 = *(unsigned __int8 *)(*(_QWORD *)v11 + 31);
  else
    v13 = *(_QWORD *)(*(_QWORD *)v11 + 16);
  v14 = &v21;
  std::string::basic_string[abi:ne180100]((uint64_t)&v21, v13 + 1);
  if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v14 = (std::string *)v21.__r_.__value_.__r.__words[0];
  if (v13)
  {
    v17 = *(char **)(v12 + 8);
    v16 = (char *)(v12 + 8);
    v15 = v17;
    if (v16[23] >= 0)
      v18 = v16;
    else
      v18 = v15;
    memmove(v14, v18, v13);
  }
  *(_WORD *)((char *)&v14->__r_.__value_.__l.__data_ + v13) = 46;
  v19 = std::string::append(&v21, "externalVendorContainerTag");
  v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  __str.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  mlcore::EntityClass::setPropertyForName(v9, v10, &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
}

void sub_20A7FF248(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::PlaylistPropertyIsExternalVendorPlaylist(void)::$_0 &&>>()
{
  uint64_t v0;
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  mlcore::ContainerTable **v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  std::string *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  std::string *v19;
  __int128 v20;
  std::string v21;
  std::string __p;
  char v23;
  _QWORD v24[2];

  v0 = operator new();
  v1 = (_QWORD *)mediaplatform::Singleton<mlcore::ContainerTable>::sharedInstance();
  v2 = (std::__shared_weak_count *)v1[1];
  v24[0] = *v1;
  v24[1] = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  v5 = (mlcore::ContainerTable **)mediaplatform::Singleton<mlcore::ContainerTable>::sharedInstance();
  mlcore::ContainerTable::isExternalVendorPlaylistColumn(*v5, (uint64_t)&__p);
  mlcore::DatabaseModelProperty<int>::DatabaseModelProperty(v0, v24, (uint64_t)&__p);
  mlcore::PlaylistPropertyIsExternalVendorPlaylist(void)::property = v0;
  if (v23 < 0)
    operator delete((void *)__p.__r_.__value_.__l.__size_);
  if (v2)
  {
    v6 = (unint64_t *)&v2->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v8 = mlcore::PlaylistPropertyIsExternalVendorPlaylist(void)::property;
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  std::string::operator=((std::string *)(v8 + 40), &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v9 = mlcore::TypedEntityClass<mlcore::Playlist>::sharedPointer();
  v10 = mlcore::PlaylistPropertyIsExternalVendorPlaylist(void)::property;
  v11 = mediaplatform::Singleton<mlcore::ContainerTable>::sharedInstance();
  v12 = *(_QWORD *)v11;
  if (*(char *)(*(_QWORD *)v11 + 31) >= 0)
    v13 = *(unsigned __int8 *)(*(_QWORD *)v11 + 31);
  else
    v13 = *(_QWORD *)(*(_QWORD *)v11 + 16);
  v14 = &v21;
  std::string::basic_string[abi:ne180100]((uint64_t)&v21, v13 + 1);
  if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v14 = (std::string *)v21.__r_.__value_.__r.__words[0];
  if (v13)
  {
    v17 = *(char **)(v12 + 8);
    v16 = (char *)(v12 + 8);
    v15 = v17;
    if (v16[23] >= 0)
      v18 = v16;
    else
      v18 = v15;
    memmove(v14, v18, v13);
  }
  *(_WORD *)((char *)&v14->__r_.__value_.__l.__data_ + v13) = 46;
  v19 = std::string::append(&v21, "isExternalVendorPlaylist");
  v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  __p.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  mlcore::EntityClass::setPropertyForName(v9, v10, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
}

void sub_20A7FF4D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

uint64_t mlcore::PlaylistPropertyCloudIsSharingDisabled(mlcore *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&mlcore::PlaylistPropertyCloudIsSharingDisabled(void)::once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&mlcore::PlaylistPropertyCloudIsSharingDisabled(void)::once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::PlaylistPropertyCloudIsSharingDisabled(void)::$_0 &&>>);
  }
  return mlcore::PlaylistPropertyCloudIsSharingDisabled(void)::property;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::PlaylistPropertyCloudIsSharingDisabled(void)::$_0 &&>>()
{
  uint64_t v0;
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  mlcore::ContainerTable **v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  std::string *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  std::string *v19;
  __int128 v20;
  std::string v21;
  std::string __p;
  char v23;
  _QWORD v24[2];

  v0 = operator new();
  v1 = (_QWORD *)mediaplatform::Singleton<mlcore::ContainerTable>::sharedInstance();
  v2 = (std::__shared_weak_count *)v1[1];
  v24[0] = *v1;
  v24[1] = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  v5 = (mlcore::ContainerTable **)mediaplatform::Singleton<mlcore::ContainerTable>::sharedInstance();
  mlcore::ContainerTable::cloudIsSharingDisabledColumn(*v5, (uint64_t)&__p);
  mlcore::DatabaseModelProperty<int>::DatabaseModelProperty(v0, v24, (uint64_t)&__p);
  mlcore::PlaylistPropertyCloudIsSharingDisabled(void)::property = v0;
  if (v23 < 0)
    operator delete((void *)__p.__r_.__value_.__l.__size_);
  if (v2)
  {
    v6 = (unint64_t *)&v2->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v8 = mlcore::PlaylistPropertyCloudIsSharingDisabled(void)::property;
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  std::string::operator=((std::string *)(v8 + 40), &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v9 = mlcore::TypedEntityClass<mlcore::Playlist>::sharedPointer();
  v10 = mlcore::PlaylistPropertyCloudIsSharingDisabled(void)::property;
  v11 = mediaplatform::Singleton<mlcore::ContainerTable>::sharedInstance();
  v12 = *(_QWORD *)v11;
  if (*(char *)(*(_QWORD *)v11 + 31) >= 0)
    v13 = *(unsigned __int8 *)(*(_QWORD *)v11 + 31);
  else
    v13 = *(_QWORD *)(*(_QWORD *)v11 + 16);
  v14 = &v21;
  std::string::basic_string[abi:ne180100]((uint64_t)&v21, v13 + 1);
  if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v14 = (std::string *)v21.__r_.__value_.__r.__words[0];
  if (v13)
  {
    v17 = *(char **)(v12 + 8);
    v16 = (char *)(v12 + 8);
    v15 = v17;
    if (v16[23] >= 0)
      v18 = v16;
    else
      v18 = v15;
    memmove(v14, v18, v13);
  }
  *(_WORD *)((char *)&v14->__r_.__value_.__l.__data_ + v13) = 46;
  v19 = std::string::append(&v21, "cloudIsSharingDisabled");
  v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  __p.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  mlcore::EntityClass::setPropertyForName(v9, v10, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
}

void sub_20A7FF7BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::PlaylistPropertyCloudVersionHash(void)::$_0 &&>>()
{
  uint64_t v0;
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  mlcore::ContainerTable **v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  std::string *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  std::string *v19;
  __int128 v20;
  std::string v21;
  std::string __str;
  _QWORD v23[2];

  v0 = operator new();
  v1 = (_QWORD *)mediaplatform::Singleton<mlcore::ContainerTable>::sharedInstance();
  v2 = (std::__shared_weak_count *)v1[1];
  v23[0] = *v1;
  v23[1] = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  v5 = (mlcore::ContainerTable **)mediaplatform::Singleton<mlcore::ContainerTable>::sharedInstance();
  mlcore::ContainerTable::cloudVersionHashColumn(*v5, (uint64_t)&__str);
  mlcore::DatabaseModelProperty<std::string>::DatabaseModelProperty(v0, v23, (uint64_t)&__str);
  mlcore::PlaylistPropertyCloudVersionHash(void)::property = v0;
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&__str);
  if (v2)
  {
    v6 = (unint64_t *)&v2->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v8 = mlcore::PlaylistPropertyCloudVersionHash(void)::property;
  std::string::basic_string[abi:ne180100]<0>(&__str, "");
  std::string::operator=((std::string *)(v8 + 40), &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  v9 = mlcore::TypedEntityClass<mlcore::Playlist>::sharedPointer();
  v10 = mlcore::PlaylistPropertyCloudVersionHash(void)::property;
  v11 = mediaplatform::Singleton<mlcore::ContainerTable>::sharedInstance();
  v12 = *(_QWORD *)v11;
  if (*(char *)(*(_QWORD *)v11 + 31) >= 0)
    v13 = *(unsigned __int8 *)(*(_QWORD *)v11 + 31);
  else
    v13 = *(_QWORD *)(*(_QWORD *)v11 + 16);
  v14 = &v21;
  std::string::basic_string[abi:ne180100]((uint64_t)&v21, v13 + 1);
  if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v14 = (std::string *)v21.__r_.__value_.__r.__words[0];
  if (v13)
  {
    v17 = *(char **)(v12 + 8);
    v16 = (char *)(v12 + 8);
    v15 = v17;
    if (v16[23] >= 0)
      v18 = v16;
    else
      v18 = v15;
    memmove(v14, v18, v13);
  }
  *(_WORD *)((char *)&v14->__r_.__value_.__l.__data_ + v13) = 46;
  v19 = std::string::append(&v21, "cloudVersionHash");
  v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  __str.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  mlcore::EntityClass::setPropertyForName(v9, v10, &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
}

void sub_20A7FFA44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::PlaylistPropertyDatePlayedLocal(void)::$_0 &&>>()
{
  uint64_t v0;
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  mlcore::ContainerTable **v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  std::string *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  std::string *v19;
  __int128 v20;
  std::string v21;
  std::string __p;
  char v23;
  _QWORD v24[2];

  v0 = operator new();
  v1 = (_QWORD *)mediaplatform::Singleton<mlcore::ContainerTable>::sharedInstance();
  v2 = (std::__shared_weak_count *)v1[1];
  v24[0] = *v1;
  v24[1] = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  v5 = (mlcore::ContainerTable **)mediaplatform::Singleton<mlcore::ContainerTable>::sharedInstance();
  mlcore::ContainerTable::datePlayedLocalColumn(*v5, (uint64_t)&__p);
  mlcore::DatabaseModelProperty<long long>::DatabaseModelProperty(v0, v24, (uint64_t)&__p);
  mlcore::PlaylistPropertyDatePlayedLocal(void)::property = v0;
  if (v23 < 0)
    operator delete((void *)__p.__r_.__value_.__l.__size_);
  if (v2)
  {
    v6 = (unint64_t *)&v2->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v8 = mlcore::PlaylistPropertyDatePlayedLocal(void)::property;
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  std::string::operator=((std::string *)(v8 + 40), &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v9 = mlcore::TypedEntityClass<mlcore::Playlist>::sharedPointer();
  v10 = mlcore::PlaylistPropertyDatePlayedLocal(void)::property;
  v11 = mediaplatform::Singleton<mlcore::ContainerTable>::sharedInstance();
  v12 = *(_QWORD *)v11;
  if (*(char *)(*(_QWORD *)v11 + 31) >= 0)
    v13 = *(unsigned __int8 *)(*(_QWORD *)v11 + 31);
  else
    v13 = *(_QWORD *)(*(_QWORD *)v11 + 16);
  v14 = &v21;
  std::string::basic_string[abi:ne180100]((uint64_t)&v21, v13 + 1);
  if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v14 = (std::string *)v21.__r_.__value_.__r.__words[0];
  if (v13)
  {
    v17 = *(char **)(v12 + 8);
    v16 = (char *)(v12 + 8);
    v15 = v17;
    if (v16[23] >= 0)
      v18 = v16;
    else
      v18 = v15;
    memmove(v14, v18, v13);
  }
  *(_WORD *)((char *)&v14->__r_.__value_.__l.__data_ + v13) = 46;
  v19 = std::string::append(&v21, "datePlayedLocal");
  v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  __p.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  mlcore::EntityClass::setPropertyForName(v9, v10, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
}

void sub_20A7FFCCC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::PlaylistPropertyCloudAuthorHandle(void)::$_0 &&>>()
{
  uint64_t v0;
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  mlcore::ContainerTable **v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  std::string *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  std::string *v19;
  __int128 v20;
  std::string v21;
  std::string __str;
  _QWORD v23[2];

  v0 = operator new();
  v1 = (_QWORD *)mediaplatform::Singleton<mlcore::ContainerTable>::sharedInstance();
  v2 = (std::__shared_weak_count *)v1[1];
  v23[0] = *v1;
  v23[1] = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  v5 = (mlcore::ContainerTable **)mediaplatform::Singleton<mlcore::ContainerTable>::sharedInstance();
  mlcore::ContainerTable::cloudAuthorHandleColumn(*v5, (uint64_t)&__str);
  mlcore::DatabaseModelProperty<std::string>::DatabaseModelProperty(v0, v23, (uint64_t)&__str);
  mlcore::PlaylistPropertyCloudAuthorHandle(void)::property = v0;
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&__str);
  if (v2)
  {
    v6 = (unint64_t *)&v2->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v8 = mlcore::PlaylistPropertyCloudAuthorHandle(void)::property;
  std::string::basic_string[abi:ne180100]<0>(&__str, "");
  std::string::operator=((std::string *)(v8 + 40), &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  v9 = mlcore::TypedEntityClass<mlcore::Playlist>::sharedPointer();
  v10 = mlcore::PlaylistPropertyCloudAuthorHandle(void)::property;
  v11 = mediaplatform::Singleton<mlcore::ContainerTable>::sharedInstance();
  v12 = *(_QWORD *)v11;
  if (*(char *)(*(_QWORD *)v11 + 31) >= 0)
    v13 = *(unsigned __int8 *)(*(_QWORD *)v11 + 31);
  else
    v13 = *(_QWORD *)(*(_QWORD *)v11 + 16);
  v14 = &v21;
  std::string::basic_string[abi:ne180100]((uint64_t)&v21, v13 + 1);
  if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v14 = (std::string *)v21.__r_.__value_.__r.__words[0];
  if (v13)
  {
    v17 = *(char **)(v12 + 8);
    v16 = (char *)(v12 + 8);
    v15 = v17;
    if (v16[23] >= 0)
      v18 = v16;
    else
      v18 = v15;
    memmove(v14, v18, v13);
  }
  *(_WORD *)((char *)&v14->__r_.__value_.__l.__data_ + v13) = 46;
  v19 = std::string::append(&v21, "cloudAuthorHandle");
  v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  __str.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  mlcore::EntityClass::setPropertyForName(v9, v10, &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
}

void sub_20A7FFF54(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::PlaylistPropertyCloudUniversalLibraryID(void)::$_0 &&>>()
{
  uint64_t v0;
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  mlcore::ContainerTable **v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  std::string *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  std::string *v19;
  __int128 v20;
  std::string v21;
  std::string __str;
  _QWORD v23[2];

  v0 = operator new();
  v1 = (_QWORD *)mediaplatform::Singleton<mlcore::ContainerTable>::sharedInstance();
  v2 = (std::__shared_weak_count *)v1[1];
  v23[0] = *v1;
  v23[1] = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  v5 = (mlcore::ContainerTable **)mediaplatform::Singleton<mlcore::ContainerTable>::sharedInstance();
  mlcore::ContainerTable::cloudUniversalLibraryIDColumn(*v5, (uint64_t)&__str);
  mlcore::DatabaseModelProperty<std::string>::DatabaseModelProperty(v0, v23, (uint64_t)&__str);
  mlcore::PlaylistPropertyCloudUniversalLibraryID(void)::property = v0;
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&__str);
  if (v2)
  {
    v6 = (unint64_t *)&v2->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v8 = mlcore::PlaylistPropertyCloudUniversalLibraryID(void)::property;
  std::string::basic_string[abi:ne180100]<0>(&__str, "");
  std::string::operator=((std::string *)(v8 + 40), &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  v9 = mlcore::TypedEntityClass<mlcore::Playlist>::sharedPointer();
  v10 = mlcore::PlaylistPropertyCloudUniversalLibraryID(void)::property;
  v11 = mediaplatform::Singleton<mlcore::ContainerTable>::sharedInstance();
  v12 = *(_QWORD *)v11;
  if (*(char *)(*(_QWORD *)v11 + 31) >= 0)
    v13 = *(unsigned __int8 *)(*(_QWORD *)v11 + 31);
  else
    v13 = *(_QWORD *)(*(_QWORD *)v11 + 16);
  v14 = &v21;
  std::string::basic_string[abi:ne180100]((uint64_t)&v21, v13 + 1);
  if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v14 = (std::string *)v21.__r_.__value_.__r.__words[0];
  if (v13)
  {
    v17 = *(char **)(v12 + 8);
    v16 = (char *)(v12 + 8);
    v15 = v17;
    if (v16[23] >= 0)
      v18 = v16;
    else
      v18 = v15;
    memmove(v14, v18, v13);
  }
  *(_WORD *)((char *)&v14->__r_.__value_.__l.__data_ + v13) = 46;
  v19 = std::string::append(&v21, "cloudUniversalLibraryID");
  v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  __str.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  mlcore::EntityClass::setPropertyForName(v9, v10, &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
}

void sub_20A8001D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::PlaylistPropertyShouldDisplayIndex(void)::$_0 &&>>()
{
  uint64_t v0;
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  mlcore::ContainerTable **v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  std::string *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  std::string *v19;
  __int128 v20;
  std::string v21;
  std::string __p;
  char v23;
  _QWORD v24[2];

  v0 = operator new();
  v1 = (_QWORD *)mediaplatform::Singleton<mlcore::ContainerTable>::sharedInstance();
  v2 = (std::__shared_weak_count *)v1[1];
  v24[0] = *v1;
  v24[1] = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  v5 = (mlcore::ContainerTable **)mediaplatform::Singleton<mlcore::ContainerTable>::sharedInstance();
  mlcore::ContainerTable::shouldDisplayIndexColumn(*v5, (uint64_t)&__p);
  mlcore::DatabaseModelProperty<int>::DatabaseModelProperty(v0, v24, (uint64_t)&__p);
  mlcore::PlaylistPropertyShouldDisplayIndex(void)::property = v0;
  if (v23 < 0)
    operator delete((void *)__p.__r_.__value_.__l.__size_);
  if (v2)
  {
    v6 = (unint64_t *)&v2->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v8 = mlcore::PlaylistPropertyShouldDisplayIndex(void)::property;
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  std::string::operator=((std::string *)(v8 + 40), &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v9 = mlcore::TypedEntityClass<mlcore::Playlist>::sharedPointer();
  v10 = mlcore::PlaylistPropertyShouldDisplayIndex(void)::property;
  v11 = mediaplatform::Singleton<mlcore::ContainerTable>::sharedInstance();
  v12 = *(_QWORD *)v11;
  if (*(char *)(*(_QWORD *)v11 + 31) >= 0)
    v13 = *(unsigned __int8 *)(*(_QWORD *)v11 + 31);
  else
    v13 = *(_QWORD *)(*(_QWORD *)v11 + 16);
  v14 = &v21;
  std::string::basic_string[abi:ne180100]((uint64_t)&v21, v13 + 1);
  if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v14 = (std::string *)v21.__r_.__value_.__r.__words[0];
  if (v13)
  {
    v17 = *(char **)(v12 + 8);
    v16 = (char *)(v12 + 8);
    v15 = v17;
    if (v16[23] >= 0)
      v18 = v16;
    else
      v18 = v15;
    memmove(v14, v18, v13);
  }
  *(_WORD *)((char *)&v14->__r_.__value_.__l.__data_ + v13) = 46;
  v19 = std::string::append(&v21, "shouldDisplayIndex");
  v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  __p.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  mlcore::EntityClass::setPropertyForName(v9, v10, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
}

void sub_20A80045C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::PlaylistPropertyCategoryType(void)::$_0 &&>>()
{
  uint64_t v0;
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  mlcore::ContainerTable **v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  std::string *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  std::string *v19;
  __int128 v20;
  std::string v21;
  std::string __p;
  char v23;
  _QWORD v24[2];

  v0 = operator new();
  v1 = (_QWORD *)mediaplatform::Singleton<mlcore::ContainerTable>::sharedInstance();
  v2 = (std::__shared_weak_count *)v1[1];
  v24[0] = *v1;
  v24[1] = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  v5 = (mlcore::ContainerTable **)mediaplatform::Singleton<mlcore::ContainerTable>::sharedInstance();
  mlcore::ContainerTable::categoryTypeMaskColumn(*v5, (uint64_t)&__p);
  mlcore::DatabaseModelProperty<int>::DatabaseModelProperty(v0, v24, (uint64_t)&__p);
  mlcore::PlaylistPropertyCategoryType(void)::property = v0;
  if (v23 < 0)
    operator delete((void *)__p.__r_.__value_.__l.__size_);
  if (v2)
  {
    v6 = (unint64_t *)&v2->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v8 = mlcore::PlaylistPropertyCategoryType(void)::property;
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  std::string::operator=((std::string *)(v8 + 40), &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v9 = mlcore::TypedEntityClass<mlcore::Playlist>::sharedPointer();
  v10 = mlcore::PlaylistPropertyCategoryType(void)::property;
  v11 = mediaplatform::Singleton<mlcore::ContainerTable>::sharedInstance();
  v12 = *(_QWORD *)v11;
  if (*(char *)(*(_QWORD *)v11 + 31) >= 0)
    v13 = *(unsigned __int8 *)(*(_QWORD *)v11 + 31);
  else
    v13 = *(_QWORD *)(*(_QWORD *)v11 + 16);
  v14 = &v21;
  std::string::basic_string[abi:ne180100]((uint64_t)&v21, v13 + 1);
  if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v14 = (std::string *)v21.__r_.__value_.__r.__words[0];
  if (v13)
  {
    v17 = *(char **)(v12 + 8);
    v16 = (char *)(v12 + 8);
    v15 = v17;
    if (v16[23] >= 0)
      v18 = v16;
    else
      v18 = v15;
    memmove(v14, v18, v13);
  }
  *(_WORD *)((char *)&v14->__r_.__value_.__l.__data_ + v13) = 46;
  v19 = std::string::append(&v21, "categoryTypeMask");
  v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  __p.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  mlcore::EntityClass::setPropertyForName(v9, v10, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
}

void sub_20A8006EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::PlaylistPropertyGroupingSortKey(void)::$_0 &&>>()
{
  uint64_t v0;
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  mlcore::ContainerTable **v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  std::string *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  std::string *v19;
  __int128 v20;
  std::string v21;
  std::string __str;
  _QWORD v23[2];

  v0 = operator new();
  v1 = (_QWORD *)mediaplatform::Singleton<mlcore::ContainerTable>::sharedInstance();
  v2 = (std::__shared_weak_count *)v1[1];
  v23[0] = *v1;
  v23[1] = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  v5 = (mlcore::ContainerTable **)mediaplatform::Singleton<mlcore::ContainerTable>::sharedInstance();
  mlcore::ContainerTable::groupingSortKeyColumn(*v5, (uint64_t)&__str);
  mlcore::DatabaseModelProperty<std::string>::DatabaseModelProperty(v0, v23, (uint64_t)&__str);
  mlcore::PlaylistPropertyGroupingSortKey(void)::property = v0;
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&__str);
  if (v2)
  {
    v6 = (unint64_t *)&v2->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v8 = mlcore::PlaylistPropertyGroupingSortKey(void)::property;
  std::string::basic_string[abi:ne180100]<0>(&__str, "");
  std::string::operator=((std::string *)(v8 + 40), &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  v9 = mlcore::TypedEntityClass<mlcore::Playlist>::sharedPointer();
  v10 = mlcore::PlaylistPropertyGroupingSortKey(void)::property;
  v11 = mediaplatform::Singleton<mlcore::ContainerTable>::sharedInstance();
  v12 = *(_QWORD *)v11;
  if (*(char *)(*(_QWORD *)v11 + 31) >= 0)
    v13 = *(unsigned __int8 *)(*(_QWORD *)v11 + 31);
  else
    v13 = *(_QWORD *)(*(_QWORD *)v11 + 16);
  v14 = &v21;
  std::string::basic_string[abi:ne180100]((uint64_t)&v21, v13 + 1);
  if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v14 = (std::string *)v21.__r_.__value_.__r.__words[0];
  if (v13)
  {
    v17 = *(char **)(v12 + 8);
    v16 = (char *)(v12 + 8);
    v15 = v17;
    if (v16[23] >= 0)
      v18 = v16;
    else
      v18 = v15;
    memmove(v14, v18, v13);
  }
  *(_WORD *)((char *)&v14->__r_.__value_.__l.__data_ + v13) = 46;
  v19 = std::string::append(&v21, "groupingSortKey");
  v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  __str.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  mlcore::EntityClass::setPropertyForName(v9, v10, &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
}

void sub_20A800974(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::PlaylistPropertyLikedStateChangedDate(void)::$_0 &&>>()
{
  uint64_t v0;
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  mlcore::ContainerTable **v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  std::string *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  std::string *v19;
  __int128 v20;
  std::string v21;
  std::string __p;
  char v23;
  _QWORD v24[2];

  v0 = operator new();
  v1 = (_QWORD *)mediaplatform::Singleton<mlcore::ContainerTable>::sharedInstance();
  v2 = (std::__shared_weak_count *)v1[1];
  v24[0] = *v1;
  v24[1] = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  v5 = (mlcore::ContainerTable **)mediaplatform::Singleton<mlcore::ContainerTable>::sharedInstance();
  mlcore::ContainerTable::likedStateChangedDateColumn(*v5, (uint64_t)&__p);
  mlcore::DatabaseModelProperty<long long>::DatabaseModelProperty(v0, v24, (uint64_t)&__p);
  mlcore::PlaylistPropertyLikedStateChangedDate(void)::property = v0;
  if (v23 < 0)
    operator delete((void *)__p.__r_.__value_.__l.__size_);
  if (v2)
  {
    v6 = (unint64_t *)&v2->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v8 = mlcore::PlaylistPropertyLikedStateChangedDate(void)::property;
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  std::string::operator=((std::string *)(v8 + 40), &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v9 = mlcore::TypedEntityClass<mlcore::Playlist>::sharedPointer();
  v10 = mlcore::PlaylistPropertyLikedStateChangedDate(void)::property;
  v11 = mediaplatform::Singleton<mlcore::ContainerTable>::sharedInstance();
  v12 = *(_QWORD *)v11;
  if (*(char *)(*(_QWORD *)v11 + 31) >= 0)
    v13 = *(unsigned __int8 *)(*(_QWORD *)v11 + 31);
  else
    v13 = *(_QWORD *)(*(_QWORD *)v11 + 16);
  v14 = &v21;
  std::string::basic_string[abi:ne180100]((uint64_t)&v21, v13 + 1);
  if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v14 = (std::string *)v21.__r_.__value_.__r.__words[0];
  if (v13)
  {
    v17 = *(char **)(v12 + 8);
    v16 = (char *)(v12 + 8);
    v15 = v17;
    if (v16[23] >= 0)
      v18 = v16;
    else
      v18 = v15;
    memmove(v14, v18, v13);
  }
  *(_WORD *)((char *)&v14->__r_.__value_.__l.__data_ + v13) = 46;
  v19 = std::string::append(&v21, "likedStateChangedDate");
  v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  __p.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  mlcore::EntityClass::setPropertyForName(v9, v10, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
}

void sub_20A800BFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::PlaylistPropertyTraits(void)::$_0 &&>>()
{
  uint64_t v0;
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  mlcore::ContainerTable **v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  std::string *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  std::string *v19;
  __int128 v20;
  std::string v21;
  std::string __p;
  char v23;
  _QWORD v24[2];

  v0 = operator new();
  v1 = (_QWORD *)mediaplatform::Singleton<mlcore::ContainerTable>::sharedInstance();
  v2 = (std::__shared_weak_count *)v1[1];
  v24[0] = *v1;
  v24[1] = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  v5 = (mlcore::ContainerTable **)mediaplatform::Singleton<mlcore::ContainerTable>::sharedInstance();
  mlcore::ContainerTable::traitsColumn(*v5, (uint64_t)&__p);
  mlcore::DatabaseModelProperty<int>::DatabaseModelProperty(v0, v24, (uint64_t)&__p);
  mlcore::PlaylistPropertyTraits(void)::property = v0;
  if (v23 < 0)
    operator delete((void *)__p.__r_.__value_.__l.__size_);
  if (v2)
  {
    v6 = (unint64_t *)&v2->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v8 = mlcore::PlaylistPropertyTraits(void)::property;
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  std::string::operator=((std::string *)(v8 + 40), &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v9 = mlcore::TypedEntityClass<mlcore::Playlist>::sharedPointer();
  v10 = mlcore::PlaylistPropertyTraits(void)::property;
  v11 = mediaplatform::Singleton<mlcore::ContainerTable>::sharedInstance();
  v12 = *(_QWORD *)v11;
  if (*(char *)(*(_QWORD *)v11 + 31) >= 0)
    v13 = *(unsigned __int8 *)(*(_QWORD *)v11 + 31);
  else
    v13 = *(_QWORD *)(*(_QWORD *)v11 + 16);
  v14 = &v21;
  std::string::basic_string[abi:ne180100]((uint64_t)&v21, v13 + 1);
  if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v14 = (std::string *)v21.__r_.__value_.__r.__words[0];
  if (v13)
  {
    v17 = *(char **)(v12 + 8);
    v16 = (char *)(v12 + 8);
    v15 = v17;
    if (v16[23] >= 0)
      v18 = v16;
    else
      v18 = v15;
    memmove(v14, v18, v13);
  }
  *(_WORD *)((char *)&v14->__r_.__value_.__l.__data_ + v13) = 46;
  v19 = std::string::append(&v21, "traits");
  v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  __p.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  mlcore::EntityClass::setPropertyForName(v9, v10, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
}

void sub_20A800E8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::PlaylistPropertyIsCollaborative(void)::$_0 &&>>()
{
  uint64_t v0;
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  mlcore::ContainerTable **v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  std::string *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  std::string *v19;
  __int128 v20;
  std::string v21;
  std::string __p;
  char v23;
  _QWORD v24[2];

  v0 = operator new();
  v1 = (_QWORD *)mediaplatform::Singleton<mlcore::ContainerTable>::sharedInstance();
  v2 = (std::__shared_weak_count *)v1[1];
  v24[0] = *v1;
  v24[1] = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  v5 = (mlcore::ContainerTable **)mediaplatform::Singleton<mlcore::ContainerTable>::sharedInstance();
  mlcore::ContainerTable::isColaborativeColumn(*v5, (uint64_t)&__p);
  mlcore::DatabaseModelProperty<int>::DatabaseModelProperty(v0, v24, (uint64_t)&__p);
  mlcore::PlaylistPropertyIsCollaborative(void)::property = v0;
  if (v23 < 0)
    operator delete((void *)__p.__r_.__value_.__l.__size_);
  if (v2)
  {
    v6 = (unint64_t *)&v2->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v8 = mlcore::PlaylistPropertyIsCollaborative(void)::property;
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  std::string::operator=((std::string *)(v8 + 40), &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v9 = mlcore::TypedEntityClass<mlcore::Playlist>::sharedPointer();
  v10 = mlcore::PlaylistPropertyIsCollaborative(void)::property;
  v11 = mediaplatform::Singleton<mlcore::ContainerTable>::sharedInstance();
  v12 = *(_QWORD *)v11;
  if (*(char *)(*(_QWORD *)v11 + 31) >= 0)
    v13 = *(unsigned __int8 *)(*(_QWORD *)v11 + 31);
  else
    v13 = *(_QWORD *)(*(_QWORD *)v11 + 16);
  v14 = &v21;
  std::string::basic_string[abi:ne180100]((uint64_t)&v21, v13 + 1);
  if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v14 = (std::string *)v21.__r_.__value_.__r.__words[0];
  if (v13)
  {
    v17 = *(char **)(v12 + 8);
    v16 = (char *)(v12 + 8);
    v15 = v17;
    if (v16[23] >= 0)
      v18 = v16;
    else
      v18 = v15;
    memmove(v14, v18, v13);
  }
  *(_WORD *)((char *)&v14->__r_.__value_.__l.__data_ + v13) = 46;
  v19 = std::string::append(&v21, "isCollaborative");
  v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  __p.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  mlcore::EntityClass::setPropertyForName(v9, v10, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
}

void sub_20A80111C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::PlaylistPropertyCollaborationMode(void)::$_0 &&>>()
{
  uint64_t v0;
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  mlcore::ContainerTable **v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  std::string *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  std::string *v19;
  __int128 v20;
  std::string v21;
  std::string __p;
  char v23;
  _QWORD v24[2];

  v0 = operator new();
  v1 = (_QWORD *)mediaplatform::Singleton<mlcore::ContainerTable>::sharedInstance();
  v2 = (std::__shared_weak_count *)v1[1];
  v24[0] = *v1;
  v24[1] = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  v5 = (mlcore::ContainerTable **)mediaplatform::Singleton<mlcore::ContainerTable>::sharedInstance();
  mlcore::ContainerTable::collaborationModeColumn(*v5, (uint64_t)&__p);
  mlcore::DatabaseModelProperty<int>::DatabaseModelProperty(v0, v24, (uint64_t)&__p);
  mlcore::PlaylistPropertyCollaborationMode(void)::property = v0;
  if (v23 < 0)
    operator delete((void *)__p.__r_.__value_.__l.__size_);
  if (v2)
  {
    v6 = (unint64_t *)&v2->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v8 = mlcore::PlaylistPropertyCollaborationMode(void)::property;
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  std::string::operator=((std::string *)(v8 + 40), &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v9 = mlcore::TypedEntityClass<mlcore::Playlist>::sharedPointer();
  v10 = mlcore::PlaylistPropertyCollaborationMode(void)::property;
  v11 = mediaplatform::Singleton<mlcore::ContainerTable>::sharedInstance();
  v12 = *(_QWORD *)v11;
  if (*(char *)(*(_QWORD *)v11 + 31) >= 0)
    v13 = *(unsigned __int8 *)(*(_QWORD *)v11 + 31);
  else
    v13 = *(_QWORD *)(*(_QWORD *)v11 + 16);
  v14 = &v21;
  std::string::basic_string[abi:ne180100]((uint64_t)&v21, v13 + 1);
  if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v14 = (std::string *)v21.__r_.__value_.__r.__words[0];
  if (v13)
  {
    v17 = *(char **)(v12 + 8);
    v16 = (char *)(v12 + 8);
    v15 = v17;
    if (v16[23] >= 0)
      v18 = v16;
    else
      v18 = v15;
    memmove(v14, v18, v13);
  }
  *(_WORD *)((char *)&v14->__r_.__value_.__l.__data_ + v13) = 46;
  v19 = std::string::append(&v21, "collaborationMode");
  v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  __p.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  mlcore::EntityClass::setPropertyForName(v9, v10, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
}

void sub_20A8013AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::PlaylistPropertyCollaboratorPermissions(void)::$_0 &&>>()
{
  uint64_t v0;
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  mlcore::ContainerTable **v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  std::string *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  std::string *v19;
  __int128 v20;
  std::string v21;
  std::string __p;
  char v23;
  _QWORD v24[2];

  v0 = operator new();
  v1 = (_QWORD *)mediaplatform::Singleton<mlcore::ContainerTable>::sharedInstance();
  v2 = (std::__shared_weak_count *)v1[1];
  v24[0] = *v1;
  v24[1] = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  v5 = (mlcore::ContainerTable **)mediaplatform::Singleton<mlcore::ContainerTable>::sharedInstance();
  mlcore::ContainerTable::collaboratorPermissionsColumn(*v5, (uint64_t)&__p);
  mlcore::DatabaseModelProperty<int>::DatabaseModelProperty(v0, v24, (uint64_t)&__p);
  mlcore::PlaylistPropertyCollaboratorPermissions(void)::property = v0;
  if (v23 < 0)
    operator delete((void *)__p.__r_.__value_.__l.__size_);
  if (v2)
  {
    v6 = (unint64_t *)&v2->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v8 = mlcore::PlaylistPropertyCollaboratorPermissions(void)::property;
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  std::string::operator=((std::string *)(v8 + 40), &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v9 = mlcore::TypedEntityClass<mlcore::Playlist>::sharedPointer();
  v10 = mlcore::PlaylistPropertyCollaboratorPermissions(void)::property;
  v11 = mediaplatform::Singleton<mlcore::ContainerTable>::sharedInstance();
  v12 = *(_QWORD *)v11;
  if (*(char *)(*(_QWORD *)v11 + 31) >= 0)
    v13 = *(unsigned __int8 *)(*(_QWORD *)v11 + 31);
  else
    v13 = *(_QWORD *)(*(_QWORD *)v11 + 16);
  v14 = &v21;
  std::string::basic_string[abi:ne180100]((uint64_t)&v21, v13 + 1);
  if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v14 = (std::string *)v21.__r_.__value_.__r.__words[0];
  if (v13)
  {
    v17 = *(char **)(v12 + 8);
    v16 = (char *)(v12 + 8);
    v15 = v17;
    if (v16[23] >= 0)
      v18 = v16;
    else
      v18 = v15;
    memmove(v14, v18, v13);
  }
  *(_WORD *)((char *)&v14->__r_.__value_.__l.__data_ + v13) = 46;
  v19 = std::string::append(&v21, "collaboratorPermissions");
  v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  __p.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  mlcore::EntityClass::setPropertyForName(v9, v10, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
}

void sub_20A80163C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::PlaylistPropertyCollaborationInvitationURL(void)::$_0 &&>>()
{
  uint64_t v0;
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  mlcore::ContainerTable **v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  std::string *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  std::string *v19;
  __int128 v20;
  std::string v21;
  std::string __str;
  _QWORD v23[2];

  v0 = operator new();
  v1 = (_QWORD *)mediaplatform::Singleton<mlcore::ContainerTable>::sharedInstance();
  v2 = (std::__shared_weak_count *)v1[1];
  v23[0] = *v1;
  v23[1] = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  v5 = (mlcore::ContainerTable **)mediaplatform::Singleton<mlcore::ContainerTable>::sharedInstance();
  mlcore::ContainerTable::collaborationInvitationURLColumn(*v5, (uint64_t)&__str);
  mlcore::DatabaseModelProperty<std::string>::DatabaseModelProperty(v0, v23, (uint64_t)&__str);
  mlcore::PlaylistPropertyCollaborationInvitationURL(void)::property = v0;
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&__str);
  if (v2)
  {
    v6 = (unint64_t *)&v2->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v8 = mlcore::PlaylistPropertyCollaborationInvitationURL(void)::property;
  std::string::basic_string[abi:ne180100]<0>(&__str, "");
  std::string::operator=((std::string *)(v8 + 40), &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  v9 = mlcore::TypedEntityClass<mlcore::Playlist>::sharedPointer();
  v10 = mlcore::PlaylistPropertyCollaborationInvitationURL(void)::property;
  v11 = mediaplatform::Singleton<mlcore::ContainerTable>::sharedInstance();
  v12 = *(_QWORD *)v11;
  if (*(char *)(*(_QWORD *)v11 + 31) >= 0)
    v13 = *(unsigned __int8 *)(*(_QWORD *)v11 + 31);
  else
    v13 = *(_QWORD *)(*(_QWORD *)v11 + 16);
  v14 = &v21;
  std::string::basic_string[abi:ne180100]((uint64_t)&v21, v13 + 1);
  if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v14 = (std::string *)v21.__r_.__value_.__r.__words[0];
  if (v13)
  {
    v17 = *(char **)(v12 + 8);
    v16 = (char *)(v12 + 8);
    v15 = v17;
    if (v16[23] >= 0)
      v18 = v16;
    else
      v18 = v15;
    memmove(v14, v18, v13);
  }
  *(_WORD *)((char *)&v14->__r_.__value_.__l.__data_ + v13) = 46;
  v19 = std::string::append(&v21, "collaborationInvitationURL");
  v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  __str.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  mlcore::EntityClass::setPropertyForName(v9, v10, &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
}

void sub_20A8018C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::PlaylistPropertyCoverArtworkRecipe(void)::$_0 &&>>()
{
  uint64_t v0;
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  mlcore::ContainerTable **v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  std::string *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  std::string *v19;
  __int128 v20;
  std::string v21;
  std::string __str;
  _QWORD v23[2];

  v0 = operator new();
  v1 = (_QWORD *)mediaplatform::Singleton<mlcore::ContainerTable>::sharedInstance();
  v2 = (std::__shared_weak_count *)v1[1];
  v23[0] = *v1;
  v23[1] = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  v5 = (mlcore::ContainerTable **)mediaplatform::Singleton<mlcore::ContainerTable>::sharedInstance();
  mlcore::ContainerTable::coverArtworkRecipeColumn(*v5, (uint64_t)&__str);
  mlcore::DatabaseModelProperty<std::string>::DatabaseModelProperty(v0, v23, (uint64_t)&__str);
  mlcore::PlaylistPropertyCoverArtworkRecipe(void)::property = v0;
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&__str);
  if (v2)
  {
    v6 = (unint64_t *)&v2->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v8 = mlcore::PlaylistPropertyCoverArtworkRecipe(void)::property;
  std::string::basic_string[abi:ne180100]<0>(&__str, "");
  std::string::operator=((std::string *)(v8 + 40), &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  v9 = mlcore::TypedEntityClass<mlcore::Playlist>::sharedPointer();
  v10 = mlcore::PlaylistPropertyCoverArtworkRecipe(void)::property;
  v11 = mediaplatform::Singleton<mlcore::ContainerTable>::sharedInstance();
  v12 = *(_QWORD *)v11;
  if (*(char *)(*(_QWORD *)v11 + 31) >= 0)
    v13 = *(unsigned __int8 *)(*(_QWORD *)v11 + 31);
  else
    v13 = *(_QWORD *)(*(_QWORD *)v11 + 16);
  v14 = &v21;
  std::string::basic_string[abi:ne180100]((uint64_t)&v21, v13 + 1);
  if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v14 = (std::string *)v21.__r_.__value_.__r.__words[0];
  if (v13)
  {
    v17 = *(char **)(v12 + 8);
    v16 = (char *)(v12 + 8);
    v15 = v17;
    if (v16[23] >= 0)
      v18 = v16;
    else
      v18 = v15;
    memmove(v14, v18, v13);
  }
  *(_WORD *)((char *)&v14->__r_.__value_.__l.__data_ + v13) = 46;
  v19 = std::string::append(&v21, "coverArtworkRecipe");
  v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  __str.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  mlcore::EntityClass::setPropertyForName(v9, v10, &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
}

void sub_20A801B44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::PlaylistPropertyCollaborationInvitationURLExpirationDate(void)::$_0 &&>>()
{
  uint64_t v0;
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  mlcore::ContainerTable **v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  std::string *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  std::string *v19;
  __int128 v20;
  std::string v21;
  std::string __p;
  char v23;
  _QWORD v24[2];

  v0 = operator new();
  v1 = (_QWORD *)mediaplatform::Singleton<mlcore::ContainerTable>::sharedInstance();
  v2 = (std::__shared_weak_count *)v1[1];
  v24[0] = *v1;
  v24[1] = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  v5 = (mlcore::ContainerTable **)mediaplatform::Singleton<mlcore::ContainerTable>::sharedInstance();
  mlcore::ContainerTable::collaborationInvitationURLExpirationDateColumn(*v5, (uint64_t)&__p);
  mlcore::DatabaseModelProperty<long long>::DatabaseModelProperty(v0, v24, (uint64_t)&__p);
  mlcore::PlaylistPropertyCollaborationInvitationURLExpirationDate(void)::property = v0;
  if (v23 < 0)
    operator delete((void *)__p.__r_.__value_.__l.__size_);
  if (v2)
  {
    v6 = (unint64_t *)&v2->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v8 = mlcore::PlaylistPropertyCollaborationInvitationURLExpirationDate(void)::property;
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  std::string::operator=((std::string *)(v8 + 40), &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v9 = mlcore::TypedEntityClass<mlcore::Playlist>::sharedPointer();
  v10 = mlcore::PlaylistPropertyCollaborationInvitationURLExpirationDate(void)::property;
  v11 = mediaplatform::Singleton<mlcore::ContainerTable>::sharedInstance();
  v12 = *(_QWORD *)v11;
  if (*(char *)(*(_QWORD *)v11 + 31) >= 0)
    v13 = *(unsigned __int8 *)(*(_QWORD *)v11 + 31);
  else
    v13 = *(_QWORD *)(*(_QWORD *)v11 + 16);
  v14 = &v21;
  std::string::basic_string[abi:ne180100]((uint64_t)&v21, v13 + 1);
  if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v14 = (std::string *)v21.__r_.__value_.__r.__words[0];
  if (v13)
  {
    v17 = *(char **)(v12 + 8);
    v16 = (char *)(v12 + 8);
    v15 = v17;
    if (v16[23] >= 0)
      v18 = v16;
    else
      v18 = v15;
    memmove(v14, v18, v13);
  }
  *(_WORD *)((char *)&v14->__r_.__value_.__l.__data_ + v13) = 46;
  v19 = std::string::append(&v21, "collaborationInvitationURLExpirationDate");
  v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  __p.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  mlcore::EntityClass::setPropertyForName(v9, v10, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
}

void sub_20A801DCC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::PlaylistPropertyCollaborationJoinRequestPending(void)::$_0 &&>>()
{
  uint64_t v0;
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  mlcore::ContainerTable **v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  std::string *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  std::string *v19;
  __int128 v20;
  std::string v21;
  std::string __p;
  char v23;
  _QWORD v24[2];

  v0 = operator new();
  v1 = (_QWORD *)mediaplatform::Singleton<mlcore::ContainerTable>::sharedInstance();
  v2 = (std::__shared_weak_count *)v1[1];
  v24[0] = *v1;
  v24[1] = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  v5 = (mlcore::ContainerTable **)mediaplatform::Singleton<mlcore::ContainerTable>::sharedInstance();
  mlcore::ContainerTable::collaborationJoinRequestPendingColumn(*v5, (uint64_t)&__p);
  mlcore::DatabaseModelProperty<int>::DatabaseModelProperty(v0, v24, (uint64_t)&__p);
  mlcore::PlaylistPropertyCollaborationJoinRequestPending(void)::property = v0;
  if (v23 < 0)
    operator delete((void *)__p.__r_.__value_.__l.__size_);
  if (v2)
  {
    v6 = (unint64_t *)&v2->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v8 = mlcore::PlaylistPropertyCollaborationJoinRequestPending(void)::property;
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  std::string::operator=((std::string *)(v8 + 40), &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v9 = mlcore::TypedEntityClass<mlcore::Playlist>::sharedPointer();
  v10 = mlcore::PlaylistPropertyCollaborationJoinRequestPending(void)::property;
  v11 = mediaplatform::Singleton<mlcore::ContainerTable>::sharedInstance();
  v12 = *(_QWORD *)v11;
  if (*(char *)(*(_QWORD *)v11 + 31) >= 0)
    v13 = *(unsigned __int8 *)(*(_QWORD *)v11 + 31);
  else
    v13 = *(_QWORD *)(*(_QWORD *)v11 + 16);
  v14 = &v21;
  std::string::basic_string[abi:ne180100]((uint64_t)&v21, v13 + 1);
  if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v14 = (std::string *)v21.__r_.__value_.__r.__words[0];
  if (v13)
  {
    v17 = *(char **)(v12 + 8);
    v16 = (char *)(v12 + 8);
    v15 = v17;
    if (v16[23] >= 0)
      v18 = v16;
    else
      v18 = v15;
    memmove(v14, v18, v13);
  }
  *(_WORD *)((char *)&v14->__r_.__value_.__l.__data_ + v13) = 46;
  v19 = std::string::append(&v21, "collaborationJoinRequestPending");
  v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  __p.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  mlcore::EntityClass::setPropertyForName(v9, v10, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
}

void sub_20A80205C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::PlaylistPropertyCollaboratorStatus(void)::$_0 &&>>()
{
  uint64_t v0;
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  mlcore::ContainerTable **v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  std::string *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  std::string *v19;
  __int128 v20;
  std::string v21;
  std::string __p;
  char v23;
  _QWORD v24[2];

  v0 = operator new();
  v1 = (_QWORD *)mediaplatform::Singleton<mlcore::ContainerTable>::sharedInstance();
  v2 = (std::__shared_weak_count *)v1[1];
  v24[0] = *v1;
  v24[1] = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  v5 = (mlcore::ContainerTable **)mediaplatform::Singleton<mlcore::ContainerTable>::sharedInstance();
  mlcore::ContainerTable::collaboratorStatusColumn(*v5, (uint64_t)&__p);
  mlcore::DatabaseModelProperty<int>::DatabaseModelProperty(v0, v24, (uint64_t)&__p);
  mlcore::PlaylistPropertyCollaboratorStatus(void)::property = v0;
  if (v23 < 0)
    operator delete((void *)__p.__r_.__value_.__l.__size_);
  if (v2)
  {
    v6 = (unint64_t *)&v2->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v8 = mlcore::PlaylistPropertyCollaboratorStatus(void)::property;
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  std::string::operator=((std::string *)(v8 + 40), &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v9 = mlcore::TypedEntityClass<mlcore::Playlist>::sharedPointer();
  v10 = mlcore::PlaylistPropertyCollaboratorStatus(void)::property;
  v11 = mediaplatform::Singleton<mlcore::ContainerTable>::sharedInstance();
  v12 = *(_QWORD *)v11;
  if (*(char *)(*(_QWORD *)v11 + 31) >= 0)
    v13 = *(unsigned __int8 *)(*(_QWORD *)v11 + 31);
  else
    v13 = *(_QWORD *)(*(_QWORD *)v11 + 16);
  v14 = &v21;
  std::string::basic_string[abi:ne180100]((uint64_t)&v21, v13 + 1);
  if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v14 = (std::string *)v21.__r_.__value_.__r.__words[0];
  if (v13)
  {
    v17 = *(char **)(v12 + 8);
    v16 = (char *)(v12 + 8);
    v15 = v17;
    if (v16[23] >= 0)
      v18 = v16;
    else
      v18 = v15;
    memmove(v14, v18, v13);
  }
  *(_WORD *)((char *)&v14->__r_.__value_.__l.__data_ + v13) = 46;
  v19 = std::string::append(&v21, "collaboratorStatus");
  v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  __p.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  mlcore::EntityClass::setPropertyForName(v9, v10, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
}

void sub_20A8022EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::PlaylistCategoryTypeIsPersonalMix(void)::$_0 &&>>()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  std::__shared_weak_count *v3;
  unint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  std::string __str;

  v0 = operator new();
  v1 = mlcore::PlaylistPropertyCategoryType((mlcore *)v0);
  v2 = (char *)operator new(0x48uLL);
  v3 = (std::__shared_weak_count *)v2;
  *(_OWORD *)(v2 + 8) = 0u;
  v4 = (unint64_t *)(v2 + 8);
  *(_QWORD *)v2 = &off_24C33CE50;
  *((_QWORD *)v2 + 4) = v1;
  *((_QWORD *)v2 + 3) = &unk_24C339C50;
  *((_QWORD *)v2 + 5) = 0x700000000;
  *((_DWORD *)v2 + 12) = 1;
  *(_OWORD *)(v2 + 56) = 0u;
  *(_OWORD *)(v0 + 16) = 0u;
  *(_OWORD *)(v0 + 32) = 0u;
  *(_OWORD *)(v0 + 48) = 0u;
  *(_QWORD *)v0 = &off_24C3398B8;
  *(_QWORD *)(v0 + 64) = v2 + 24;
  *(_QWORD *)(v0 + 72) = v2;
  do
    v5 = __ldxr(v4);
  while (__stxr(v5 + 1, v4));
  mlcore::PlaylistCategoryTypeIsPersonalMix(void)::property = v0;
  do
    v6 = __ldaxr(v4);
  while (__stlxr(v6 - 1, v4));
  if (!v6)
  {
    (*(void (**)(char *))(*(_QWORD *)v2 + 16))(v2);
    std::__shared_weak_count::__release_weak(v3);
  }
  v7 = mlcore::PlaylistCategoryTypeIsPersonalMix(void)::property;
  std::string::basic_string[abi:ne180100]<0>(&__str, "is_category_type_personal_mix");
  std::string::operator=((std::string *)(v7 + 40), &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  v8 = mlcore::TypedEntityClass<mlcore::Playlist>::sharedPointer();
  v9 = mlcore::PlaylistCategoryTypeIsPersonalMix(void)::property;
  std::string::basic_string[abi:ne180100]<0>(&__str, "isCategoryTypePersonalMix");
  mlcore::EntityClass::setPropertyForName(v8, v9, &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
}

void sub_20A802510(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::PlaylistCategoryTypeIsEditorial(void)::$_0 &&>>()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  std::__shared_weak_count *v3;
  unint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  std::string __str;

  v0 = operator new();
  v1 = mlcore::PlaylistPropertyCategoryType((mlcore *)v0);
  v2 = (char *)operator new(0x48uLL);
  v3 = (std::__shared_weak_count *)v2;
  *(_OWORD *)(v2 + 8) = 0u;
  v4 = (unint64_t *)(v2 + 8);
  *(_QWORD *)v2 = &off_24C33CE50;
  *((_QWORD *)v2 + 4) = v1;
  *((_QWORD *)v2 + 3) = &unk_24C339C50;
  *((_QWORD *)v2 + 5) = 0x700000000;
  *((_DWORD *)v2 + 12) = 2;
  *(_OWORD *)(v2 + 56) = 0u;
  *(_OWORD *)(v0 + 16) = 0u;
  *(_OWORD *)(v0 + 32) = 0u;
  *(_OWORD *)(v0 + 48) = 0u;
  *(_QWORD *)v0 = &off_24C3398B8;
  *(_QWORD *)(v0 + 64) = v2 + 24;
  *(_QWORD *)(v0 + 72) = v2;
  do
    v5 = __ldxr(v4);
  while (__stxr(v5 + 1, v4));
  mlcore::PlaylistCategoryTypeIsEditorial(void)::property = v0;
  do
    v6 = __ldaxr(v4);
  while (__stlxr(v6 - 1, v4));
  if (!v6)
  {
    (*(void (**)(char *))(*(_QWORD *)v2 + 16))(v2);
    std::__shared_weak_count::__release_weak(v3);
  }
  v7 = mlcore::PlaylistCategoryTypeIsEditorial(void)::property;
  std::string::basic_string[abi:ne180100]<0>(&__str, "is_category_type_editorial");
  std::string::operator=((std::string *)(v7 + 40), &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  v8 = mlcore::TypedEntityClass<mlcore::Playlist>::sharedPointer();
  v9 = mlcore::PlaylistCategoryTypeIsEditorial(void)::property;
  std::string::basic_string[abi:ne180100]<0>(&__str, "isCategoryTypeEditorial");
  mlcore::EntityClass::setPropertyForName(v8, v9, &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
}

void sub_20A8026BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::PlaylistCategoryTypeIsUserShared(void)::$_0 &&>>()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  std::__shared_weak_count *v3;
  unint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  std::string __str;

  v0 = operator new();
  v1 = mlcore::PlaylistPropertyCategoryType((mlcore *)v0);
  v2 = (char *)operator new(0x48uLL);
  v3 = (std::__shared_weak_count *)v2;
  *(_OWORD *)(v2 + 8) = 0u;
  v4 = (unint64_t *)(v2 + 8);
  *(_QWORD *)v2 = &off_24C33CE50;
  *((_QWORD *)v2 + 4) = v1;
  *((_QWORD *)v2 + 3) = &unk_24C339C50;
  *((_QWORD *)v2 + 5) = 0x700000000;
  *((_DWORD *)v2 + 12) = 4;
  *(_OWORD *)(v2 + 56) = 0u;
  *(_OWORD *)(v0 + 16) = 0u;
  *(_OWORD *)(v0 + 32) = 0u;
  *(_OWORD *)(v0 + 48) = 0u;
  *(_QWORD *)v0 = &off_24C3398B8;
  *(_QWORD *)(v0 + 64) = v2 + 24;
  *(_QWORD *)(v0 + 72) = v2;
  do
    v5 = __ldxr(v4);
  while (__stxr(v5 + 1, v4));
  mlcore::PlaylistCategoryTypeIsUserShared(void)::property = v0;
  do
    v6 = __ldaxr(v4);
  while (__stlxr(v6 - 1, v4));
  if (!v6)
  {
    (*(void (**)(char *))(*(_QWORD *)v2 + 16))(v2);
    std::__shared_weak_count::__release_weak(v3);
  }
  v7 = mlcore::PlaylistCategoryTypeIsUserShared(void)::property;
  std::string::basic_string[abi:ne180100]<0>(&__str, "is_category_type_user_shared");
  std::string::operator=((std::string *)(v7 + 40), &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  v8 = mlcore::TypedEntityClass<mlcore::Playlist>::sharedPointer();
  v9 = mlcore::PlaylistCategoryTypeIsUserShared(void)::property;
  std::string::basic_string[abi:ne180100]<0>(&__str, "isCategoryTypeUserShared");
  mlcore::EntityClass::setPropertyForName(v8, v9, &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
}

void sub_20A802868(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::PlaylistPropertyIsSubscribedAndNotPersonalMix(void)::$_0 &&>>()
{
  uint64_t v0;
  uint64_t IsSubscribed;
  _QWORD *v2;
  __int128 v3;
  uint64_t IsPersonalMix;
  char *v5;
  __int128 v6;
  __int128 *v7;
  char v8;
  uint64_t v9;
  char v10;
  __int128 v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t i;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __int128 *v24;
  __int128 v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  __int128 **v28;
  char v29;
  _BYTE __str[32];
  uint64_t v31;

  v31 = *MEMORY[0x24BDAC8D0];
  v0 = operator new();
  IsSubscribed = mlcore::PlaylistPropertyIsSubscribed((mlcore *)v0);
  v2 = operator new(0x30uLL);
  v2[1] = 0;
  v2[2] = 0;
  *v2 = &off_24C33C9F0;
  v2[4] = IsSubscribed;
  *((_DWORD *)v2 + 10) = 0;
  v2[3] = &unk_24C3377B8;
  *(_QWORD *)&v3 = v2 + 3;
  *((_QWORD *)&v3 + 1) = v2;
  *(_OWORD *)__str = v3;
  IsPersonalMix = mlcore::PlaylistCategoryTypeIsPersonalMix((mlcore *)v2);
  v5 = (char *)operator new(0x30uLL);
  *(_OWORD *)(v5 + 8) = 0u;
  *(_QWORD *)v5 = &off_24C33C9F0;
  *((_QWORD *)v5 + 4) = IsPersonalMix;
  *((_DWORD *)v5 + 10) = 1;
  *((_QWORD *)v5 + 3) = &unk_24C3377B8;
  *(_QWORD *)&v6 = v5 + 24;
  *((_QWORD *)&v6 + 1) = v5;
  *(_OWORD *)&__str[16] = v6;
  v24 = 0;
  v25 = 0u;
  v28 = &v24;
  v29 = 0;
  v7 = (__int128 *)operator new(0x20uLL);
  v8 = 0;
  v9 = 0;
  v24 = v7;
  *(_QWORD *)&v25 = v7;
  *((_QWORD *)&v25 + 1) = v7 + 2;
  do
  {
    v10 = v8;
    v11 = *(_OWORD *)&__str[16 * v9];
    *v7 = v11;
    if (*((_QWORD *)&v11 + 1))
    {
      v12 = (unint64_t *)(*((_QWORD *)&v11 + 1) + 8);
      do
        v13 = __ldxr(v12);
      while (__stxr(v13 + 1, v12));
    }
    ++v7;
    v8 = 1;
    v9 = 1;
  }
  while ((v10 & 1) == 0);
  *(_QWORD *)&v25 = v7;
  mlcore::CreateAndPredicate(&v24, &v26);
  *(_OWORD *)(v0 + 32) = 0u;
  *(_OWORD *)(v0 + 48) = 0u;
  *(_OWORD *)(v0 + 16) = 0u;
  *(_QWORD *)v0 = &off_24C3398B8;
  v14 = v27;
  *(_QWORD *)(v0 + 64) = v26;
  *(_QWORD *)(v0 + 72) = v14;
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldxr(p_shared_owners);
    while (__stxr(v16 + 1, p_shared_owners));
    v17 = v27;
    mlcore::PlaylistPropertyIsSubscribedAndNotPersonalMix(void)::property = v0;
    if (v27)
    {
      v18 = (unint64_t *)&v27->__shared_owners_;
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v19 - 1, v18));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
    }
  }
  else
  {
    mlcore::PlaylistPropertyIsSubscribedAndNotPersonalMix(void)::property = v0;
  }
  v28 = &v24;
  std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v28);
  for (i = 16; i != -16; i -= 16)
    std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)&__str[i]);
  v21 = mlcore::PlaylistPropertyIsSubscribedAndNotPersonalMix(void)::property;
  std::string::basic_string[abi:ne180100]<0>(__str, "is_subscribed_and_not_personal_mix");
  std::string::operator=((std::string *)(v21 + 40), (const std::string *)__str);
  if ((__str[23] & 0x80000000) != 0)
    operator delete(*(void **)__str);
  v22 = mlcore::TypedEntityClass<mlcore::Playlist>::sharedPointer();
  v23 = mlcore::PlaylistPropertyIsSubscribedAndNotPersonalMix(void)::property;
  std::string::basic_string[abi:ne180100]<0>(__str, "isSubscribedAndNotPersonalMix");
  mlcore::EntityClass::setPropertyForName(v22, v23, (std::string *)__str);
  if ((__str[23] & 0x80000000) != 0)
    operator delete(*(void **)__str);
}

void sub_20A802B3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::PlaylistPropertyIsFavoritedSongs(void)::$_0 &&>>()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  std::__shared_weak_count *v3;
  unint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  std::string __str;

  v0 = operator new();
  v1 = mlcore::PlaylistPropertyDistinguishedKind((mlcore *)v0);
  v2 = (char *)operator new(0x48uLL);
  v3 = (std::__shared_weak_count *)v2;
  *(_OWORD *)(v2 + 8) = 0u;
  v4 = (unint64_t *)(v2 + 8);
  *(_QWORD *)v2 = &off_24C33CE50;
  *((_QWORD *)v2 + 4) = v1;
  *((_QWORD *)v2 + 5) = 0;
  *((_QWORD *)v2 + 3) = &unk_24C339C50;
  *((_DWORD *)v2 + 12) = 71;
  *(_OWORD *)(v2 + 56) = 0u;
  *(_OWORD *)(v0 + 16) = 0u;
  *(_OWORD *)(v0 + 32) = 0u;
  *(_OWORD *)(v0 + 48) = 0u;
  *(_QWORD *)v0 = &off_24C3398B8;
  *(_QWORD *)(v0 + 64) = v2 + 24;
  *(_QWORD *)(v0 + 72) = v2;
  do
    v5 = __ldxr(v4);
  while (__stxr(v5 + 1, v4));
  mlcore::PlaylistPropertyIsFavoritedSongs(void)::property = v0;
  do
    v6 = __ldaxr(v4);
  while (__stlxr(v6 - 1, v4));
  if (!v6)
  {
    (*(void (**)(char *))(*(_QWORD *)v2 + 16))(v2);
    std::__shared_weak_count::__release_weak(v3);
  }
  v7 = mlcore::PlaylistPropertyIsFavoritedSongs(void)::property;
  std::string::basic_string[abi:ne180100]<0>(&__str, "is_type_favorites_playlist");
  std::string::operator=((std::string *)(v7 + 40), &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  v8 = mlcore::TypedEntityClass<mlcore::Playlist>::sharedPointer();
  v9 = mlcore::PlaylistPropertyIsFavoritedSongs(void)::property;
  std::string::basic_string[abi:ne180100]<0>(&__str, "favoriteSongsPlaylist");
  mlcore::EntityClass::setPropertyForName(v8, v9, &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
}

void sub_20A802D58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

double mlcore::Playlist::Playlist(mlcore::Playlist *this, uint64_t a2)
{
  double result;

  result = 0.0;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_DWORD *)this + 12) = 1065353216;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *((_DWORD *)this + 22) = 1065353216;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_DWORD *)this + 32) = 1065353216;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 152) = 0u;
  *((_DWORD *)this + 42) = 1065353216;
  *((_DWORD *)this + 52) = 1065353216;
  *((_QWORD *)this + 27) = &unk_24C3371E8;
  *((_QWORD *)this + 28) = a2;
  *((_OWORD *)this + 11) = 0u;
  *((_OWORD *)this + 12) = 0u;
  *(_QWORD *)this = &off_24C33AB48;
  *((_QWORD *)this + 1) = &off_24C3371C0;
  *((_QWORD *)this + 29) = 0;
  *((_QWORD *)this + 30) = 0;
  return result;
}

{
  double result;

  result = 0.0;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_DWORD *)this + 12) = 1065353216;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *((_DWORD *)this + 22) = 1065353216;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_DWORD *)this + 32) = 1065353216;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 152) = 0u;
  *((_DWORD *)this + 42) = 1065353216;
  *((_DWORD *)this + 52) = 1065353216;
  *((_QWORD *)this + 27) = &unk_24C3371E8;
  *((_QWORD *)this + 28) = a2;
  *((_OWORD *)this + 11) = 0u;
  *((_OWORD *)this + 12) = 0u;
  *(_QWORD *)this = &off_24C33AB48;
  *((_QWORD *)this + 1) = &off_24C3371C0;
  *((_QWORD *)this + 29) = 0;
  *((_QWORD *)this + 30) = 0;
  return result;
}

void mlcore::Playlist::filterPredicate(mlcore::Playlist *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t *v5;
  unint64_t v6;
  mlcore *v7;
  unint64_t IsEnabledOnly;
  _BOOL8 hasValueForProperty;
  unint64_t v10;
  mlcore *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  uint64_t IsUserDisabled;
  char *v15;
  __int128 *v16;
  char v17;
  uint64_t v18;
  char v19;
  __int128 v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t i;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  std::runtime_error *exception;
  __int128 v34;
  __int128 *v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38;
  std::__shared_weak_count *v39;
  __int128 **v40;
  char v41;
  _QWORD v42[2];
  __int128 v43;
  char v44;
  uint64_t v45;

  v45 = *MEMORY[0x24BDAC8D0];
  v5 = (uint64_t *)((char *)this + 232);
  v4 = *((_QWORD *)this + 29);
  if (!v4)
  {
    v6 = mlcore::PlaylistPropertySmartCriteria(this);
    if (!mlcore::PropertyCache::hasValueForProperty((_QWORD *)this + 1, v6))
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "faulting not implemented yet");
      __cxa_throw(exception, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
    }
    mlcore::PropertyCacheBase<mediaplatform::Data>::valueForProperty((mediaplatform::Data *)v42, (uint64_t)this + 8, v6);
    mlcore::PredicateFromSearchData((mlcore *)v42, &v38);
    v42[0] = &off_24C331510;
    if (v44)
    {
      v7 = (mlcore *)*((_QWORD *)&v43 + 1);
      if (*((_QWORD *)&v43 + 1))
        v7 = (mlcore *)MEMORY[0x20BD27AE4](*((_QWORD *)&v43 + 1), 0x1000C8077774924);
    }
    IsEnabledOnly = mlcore::PlaylistPropertySmartIsEnabledOnly(v7);
    hasValueForProperty = mlcore::PropertyCache::hasValueForProperty((_QWORD *)this + 1, IsEnabledOnly);
    if (hasValueForProperty
      && (v10 = mlcore::PlaylistPropertySmartIsEnabledOnly((mlcore *)hasValueForProperty),
          v11 = (mlcore *)mlcore::Entity::valueForProperty<int>((uint64_t)this, v10),
          (_DWORD)v11))
    {
      v42[0] = v38;
      v42[1] = v39;
      if (v39)
      {
        p_shared_owners = (unint64_t *)&v39->__shared_owners_;
        do
          v13 = __ldxr(p_shared_owners);
        while (__stxr(v13 + 1, p_shared_owners));
      }
      IsUserDisabled = mlcore::ItemPropertyIsUserDisabled(v11);
      v15 = (char *)operator new(0x48uLL);
      *(_OWORD *)(v15 + 8) = 0u;
      *(_QWORD *)v15 = &off_24C33CE50;
      *((_QWORD *)v15 + 4) = IsUserDisabled;
      *((_QWORD *)v15 + 5) = 0;
      *((_QWORD *)v15 + 3) = &unk_24C339C50;
      *((_DWORD *)v15 + 12) = 0;
      *(_OWORD *)(v15 + 56) = 0u;
      *(_QWORD *)&v34 = v15 + 24;
      *((_QWORD *)&v34 + 1) = v15;
      v43 = v34;
      v35 = 0;
      v36 = 0u;
      v40 = &v35;
      v41 = 0;
      v16 = (__int128 *)operator new(0x20uLL);
      v17 = 0;
      v18 = 0;
      v35 = v16;
      *(_QWORD *)&v36 = v16;
      *((_QWORD *)&v36 + 1) = v16 + 2;
      do
      {
        v19 = v17;
        v20 = *(_OWORD *)&v42[2 * v18];
        *v16 = v20;
        if (*((_QWORD *)&v20 + 1))
        {
          v21 = (unint64_t *)(*((_QWORD *)&v20 + 1) + 8);
          do
            v22 = __ldxr(v21);
          while (__stxr(v22 + 1, v21));
        }
        ++v16;
        v17 = 1;
        v18 = 1;
      }
      while ((v19 & 1) == 0);
      *(_QWORD *)&v36 = v16;
      mlcore::CreateAndPredicate(&v35, &v37);
      std::shared_ptr<mlcore::Predicate>::operator=[abi:ne180100]((uint64_t)v5, &v37);
      v23 = (std::__shared_weak_count *)*((_QWORD *)&v37 + 1);
      if (*((_QWORD *)&v37 + 1))
      {
        v24 = (unint64_t *)(*((_QWORD *)&v37 + 1) + 8);
        do
          v25 = __ldaxr(v24);
        while (__stlxr(v25 - 1, v24));
        if (!v25)
        {
          ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
          std::__shared_weak_count::__release_weak(v23);
        }
      }
      v40 = &v35;
      std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v40);
      for (i = 2; i != -2; i -= 2)
        std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)&v42[i]);
    }
    else
    {
      std::shared_ptr<mlcore::Predicate>::operator=[abi:ne180100](v5, v38, (uint64_t)v39);
    }
    v27 = v39;
    if (v39)
    {
      v28 = (unint64_t *)&v39->__shared_owners_;
      do
        v29 = __ldaxr(v28);
      while (__stlxr(v29 - 1, v28));
      if (!v29)
      {
        ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
        std::__shared_weak_count::__release_weak(v27);
      }
    }
    v4 = *v5;
  }
  v30 = *((_QWORD *)this + 30);
  *a2 = v4;
  a2[1] = v30;
  if (v30)
  {
    v31 = (unint64_t *)(v30 + 8);
    do
      v32 = __ldxr(v31);
    while (__stxr(v32 + 1, v31));
  }
}

void sub_20A80318C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, void **a19, uint64_t a20,uint64_t a21)
{
  uint64_t i;

  std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__destroy_vector::operator()[abi:ne180100](&a19);
  for (i = 16; i != -16; i -= 16)
    std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)&a21 + i);
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  _Unwind_Resume(a1);
}

uint64_t mlcore::Playlist::adjustedSmartLimitValue(mlcore::Playlist *this)
{
  unint64_t v2;
  mlcore *v3;
  int v4;
  unint64_t v5;
  uint64_t result;
  uint64_t v7;

  v2 = mlcore::PlaylistPropertySmartLimitKind(this);
  v3 = (mlcore *)mlcore::Entity::valueForProperty<int>((uint64_t)this, v2);
  v4 = (int)v3;
  v5 = mlcore::PlaylistPropertySmartLimitValue(v3);
  result = mlcore::Entity::valueForProperty<long long>((uint64_t)this, v5);
  switch(v4)
  {
    case 0:
      v7 = 60000;
      goto LABEL_5;
    case 1:
      result <<= 20;
      break;
    case 3:
      v7 = 3600000;
LABEL_5:
      result *= v7;
      break;
    case 4:
      result <<= 30;
      break;
    default:
      return result;
  }
  return result;
}

void mlcore::Playlist::playlistFilename(int a1@<W0>, uint64_t a2@<X1>, std::string *a3@<X8>)
{
  const char *v4;
  const char *v5;
  std::string *p_p;
  int v7;
  std::string v8;
  void *__p;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v12 = a2;
  if (!a2)
    __assert_rtn("playlistFilename", "Playlist.cpp", 215, "persistentID != 0");
  __p = 0;
  v10 = 0;
  v11 = 0;
  v4 = "iTunes/Playlist_{0}.plist";
  if (a1 == 3)
    v4 = "iTunes/Genius_Playlist_{0}.plist";
  if (a1 == 2)
    v5 = "iTunes/OnTheGoPlaylist_{0}.plist";
  else
    v5 = v4;
  MEMORY[0x20BD277A8](&__p, v5);
  a3->__r_.__value_.__r.__words[0] = 0;
  a3->__r_.__value_.__l.__size_ = 0;
  a3->__r_.__value_.__r.__words[2] = 0;
  if ((SHIBYTE(v11) & 0x80000000) == 0)
  {
    if (!HIBYTE(v11))
      return;
    p_p = (std::string *)&__p;
LABEL_12:
    mediaplatform::FormatString<long long>(&v8, p_p, &v12);
    v7 = SHIBYTE(v11);
    *a3 = v8;
    if ((v7 & 0x80000000) == 0)
      return;
    goto LABEL_13;
  }
  if (v10)
  {
    p_p = (std::string *)__p;
    goto LABEL_12;
  }
LABEL_13:
  operator delete(__p);
}

void sub_20A8033A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *mlcore::AnyInPredicate<long long>::~AnyInPredicate(_QWORD *a1)
{
  void *v2;

  *a1 = &unk_24C337410;
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 5));
  *a1 = off_24C3399E0;
  v2 = (void *)a1[1];
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }
  return a1;
}

void mlcore::AnyInPredicate<long long>::~AnyInPredicate(_QWORD *a1)
{
  void *v2;

  *a1 = &unk_24C337410;
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 5));
  *a1 = off_24C3399E0;
  v2 = (void *)a1[1];
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }
  JUMPOUT(0x20BD27AFCLL);
}

uint64_t mlcore::AnyInPredicate<long long>::description(_QWORD *a1)
{
  uint64_t *v2;
  uint64_t *v3;
  char v4;
  uint64_t v5;
  void **v6;
  uint64_t v7;
  _QWORD *v8;
  char i;
  void *__p[2];
  unsigned __int8 v12;
  _QWORD v13[11];
  char v14;
  uint64_t v15;

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v13);
  v2 = (uint64_t *)a1[1];
  v3 = (uint64_t *)a1[2];
  if (v2 != v3)
  {
    v4 = 1;
    do
    {
      v5 = *v2;
      if ((v4 & 1) == 0)
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)", ", 2);
      (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)v5 + 40))(__p, v5);
      if ((v12 & 0x80u) == 0)
        v6 = __p;
      else
        v6 = (void **)__p[0];
      if ((v12 & 0x80u) == 0)
        v7 = v12;
      else
        v7 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)v6, v7);
      if ((char)v12 < 0)
        operator delete(__p[0]);
      v4 = 0;
      ++v2;
    }
    while (v2 != v3);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)" in [", 5);
  v8 = (_QWORD *)(a1[5] + 16);
  for (i = 1; ; i = 0)
  {
    v8 = (_QWORD *)*v8;
    if (!v8)
      break;
    if ((i & 1) == 0)
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)", ", 2);
    std::ostream::operator<<();
  }
  LOBYTE(__p[0]) = 93;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)__p, 1);
  std::stringbuf::str();
  v13[0] = *MEMORY[0x24BEDB800];
  *(_QWORD *)((char *)v13 + *(_QWORD *)(v13[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  v13[1] = MEMORY[0x24BEDB848] + 16;
  if (v14 < 0)
    operator delete((void *)v13[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x20BD27A84](&v15);
}

void sub_20A803628(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  std::ostringstream::~ostringstream((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t mlcore::AnyInPredicate<long long>::matches(_QWORD *a1, _QWORD *a2)
{
  unint64_t *v2;
  unint64_t *i;
  uint64_t v6;
  _QWORD *v7;

  v2 = (unint64_t *)a1[1];
  for (i = (unint64_t *)a1[2]; v2 != i; ++v2)
  {
    v6 = mlcore::PropertyCacheBase<long long,int,double,std::string,mediaplatform::Data>::valueForProperty(*a2 + 8, *v2);
    v7 = (_QWORD *)(a1[5] + 16);
    while (1)
    {
      v7 = (_QWORD *)*v7;
      if (!v7)
        break;
      if (v6 == v7[2])
        return 1;
    }
  }
  return 0;
}

void mlcore::AnyInPredicateBase::_allProperties(mlcore::AnyInPredicateBase *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v5;

  *(_QWORD *)(a2 + 48) = 0;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)a2 = 0u;
  *(_DWORD *)(a2 + 56) = 1065353216;
  v3 = (uint64_t *)*((_QWORD *)this + 1);
  v4 = (uint64_t *)*((_QWORD *)this + 2);
  while (v3 != v4)
  {
    v5 = *v3;
    mlcore::OrderedSet<mlcore::ModelPropertyBase *,std::hash<mlcore::ModelPropertyBase *>,std::equal_to<mlcore::ModelPropertyBase *>>::insert((float *)a2, &v5);
    ++v3;
  }
}

void sub_20A803748(_Unwind_Exception *a1)
{
  uint64_t v1;

  mlcore::OrderedSet<mlcore::ModelPropertyBase *,std::hash<mlcore::ModelPropertyBase *>,std::equal_to<mlcore::ModelPropertyBase *>>::~OrderedSet(v1);
  _Unwind_Resume(a1);
}

void mlcore::AnyInPredicate<long long>::_SQLExpression(uint64_t a1@<X0>, uint64_t *a2@<X1>, _OWORD *a3@<X8>)
{
  std::__shared_weak_count *v6;
  __int128 v7;
  _OWORD *v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t *v15;
  uint64_t *i;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char *v27;
  uint64_t v28;
  char *v29;
  _QWORD *v30;
  _QWORD *v31;
  char *v32;
  __int128 v33;
  int64x2_t v34;
  _OWORD *v35;
  uint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  __int128 v46;
  uint64_t v47;
  std::__shared_weak_count *v48;
  __int128 v49;
  int64x2_t v50;
  _QWORD v51[2];
  std::__shared_weak_count *v52;
  void *__p;
  int64x2_t v54;
  uint64_t v55;
  _QWORD *v56;
  __int128 v57;
  uint64_t v58;

  v58 = *MEMORY[0x24BDAC8D0];
  v6 = (std::__shared_weak_count *)operator new(0x28uLL);
  v6->__shared_owners_ = 0;
  v6->__shared_weak_owners_ = 0;
  v6->__vftable = (std::__shared_weak_count_vtbl *)&off_24C33BD08;
  v6[1].__vftable = (std::__shared_weak_count_vtbl *)&off_24C335D00;
  LODWORD(v6[1].__shared_owners_) = *(_DWORD *)(a1 + 32);
  v51[1] = v6 + 1;
  v52 = v6;
  std::allocate_shared[abi:ne180100]<mediaplatform::DatabaseBindParameter,std::allocator<mediaplatform::DatabaseBindParameter>,std::shared_ptr<mediaplatform::DatabaseParameter<int>> &,void>(&v49, (uint64_t)&v6[1], v6);
  v7 = v49;
  v57 = v49;
  v49 = 0uLL;
  v51[0] = 0;
  v50 = 0uLL;
  __p = &v50;
  v54.i8[0] = 0;
  v8 = operator new(0x10uLL);
  v50.i64[0] = (uint64_t)v8;
  v51[0] = v8 + 1;
  *v8 = v7;
  if (*((_QWORD *)&v7 + 1))
  {
    v9 = (unint64_t *)(*((_QWORD *)&v7 + 1) + 8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
    v50.i64[1] = (uint64_t)(v8 + 1);
    do
      v11 = __ldaxr(v9);
    while (__stlxr(v11 - 1, v9));
    if (!v11)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v7 + 1) + 16))(*((_QWORD *)&v7 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v7 + 1));
    }
  }
  else
  {
    v50.i64[1] = (uint64_t)(v8 + 1);
  }
  v12 = (std::__shared_weak_count *)*((_QWORD *)&v49 + 1);
  if (*((_QWORD *)&v49 + 1))
  {
    v13 = (unint64_t *)(*((_QWORD *)&v49 + 1) + 8);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  v15 = *(uint64_t **)(a1 + 8);
  for (i = *(uint64_t **)(a1 + 16); v15 != i; ++v15)
  {
    v17 = *v15;
    v18 = (std::__shared_weak_count *)a2[1];
    v47 = *a2;
    v48 = v18;
    if (v18)
    {
      p_shared_owners = (unint64_t *)&v18->__shared_owners_;
      do
        v20 = __ldxr(p_shared_owners);
      while (__stxr(v20 + 1, p_shared_owners));
    }
    (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t *))(*(_QWORD *)v17 + 96))(&v49, v17, &v47);
    v21 = v49;
    v57 = v49;
    v49 = 0uLL;
    v22 = v50.i64[1];
    if (v50.i64[1] >= v51[0])
    {
      v46 = v21;
      v23 = (v50.i64[1] - v50.i64[0]) >> 4;
      v24 = v23 + 1;
      if ((unint64_t)(v23 + 1) >> 60)
        std::vector<std::string>::__throw_length_error[abi:ne180100]();
      v25 = v51[0] - v50.i64[0];
      if ((v51[0] - v50.i64[0]) >> 3 > v24)
        v24 = v25 >> 3;
      if ((unint64_t)v25 >= 0x7FFFFFFFFFFFFFF0)
        v26 = 0xFFFFFFFFFFFFFFFLL;
      else
        v26 = v24;
      v56 = v51;
      v27 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<mediaplatform::DatabaseParameterBase>>>(v26);
      v29 = &v27[16 * v23];
      *(_OWORD *)v29 = v46;
      v57 = 0uLL;
      v30 = (_QWORD *)v50.i64[1];
      v31 = (_QWORD *)v50.i64[0];
      if (v50.i64[1] == v50.i64[0])
      {
        v34 = vdupq_n_s64(v50.u64[1]);
        v32 = &v27[16 * v23];
      }
      else
      {
        v32 = &v27[16 * v23];
        do
        {
          v33 = *((_OWORD *)v30 - 1);
          v30 -= 2;
          *((_OWORD *)v32 - 1) = v33;
          v32 -= 16;
          *v30 = 0;
          v30[1] = 0;
        }
        while (v30 != v31);
        v34 = v50;
      }
      v35 = v29 + 16;
      v50.i64[0] = (uint64_t)v32;
      v50.i64[1] = (uint64_t)(v29 + 16);
      v54 = v34;
      v36 = v51[0];
      v51[0] = &v27[16 * v28];
      v55 = v36;
      __p = (void *)v34.i64[0];
      std::__split_buffer<std::shared_ptr<mediaplatform::SQLExpression const>>::~__split_buffer((uint64_t)&__p);
      v37 = (std::__shared_weak_count *)*((_QWORD *)&v49 + 1);
      v50.i64[1] = (uint64_t)v35;
      if (*((_QWORD *)&v49 + 1))
      {
        v38 = (unint64_t *)(*((_QWORD *)&v49 + 1) + 8);
        do
          v39 = __ldaxr(v38);
        while (__stlxr(v39 - 1, v38));
        if (!v39)
        {
          ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
          std::__shared_weak_count::__release_weak(v37);
        }
      }
    }
    else
    {
      *(_OWORD *)v50.i64[1] = v21;
      v57 = 0uLL;
      v50.i64[1] = v22 + 16;
    }
    v40 = v48;
    if (v48)
    {
      v41 = (unint64_t *)&v48->__shared_owners_;
      do
        v42 = __ldaxr(v41);
      while (__stlxr(v42 - 1, v41));
      if (!v42)
      {
        ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
        std::__shared_weak_count::__release_weak(v40);
      }
    }
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "HashtableLookupInt64");
  std::allocate_shared[abi:ne180100]<mediaplatform::SQLFunctionExpression,std::allocator<mediaplatform::SQLFunctionExpression>,std::string,std::vector<std::shared_ptr<mediaplatform::SQLExpression const>> &,void>(&v57, (__int128 *)&__p, &v50);
  *a3 = v57;
  if (v54.i8[15] < 0)
    operator delete(__p);
  __p = &v50;
  std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  v43 = v52;
  if (v52)
  {
    v44 = (unint64_t *)&v52->__shared_owners_;
    do
      v45 = __ldaxr(v44);
    while (__stlxr(v45 - 1, v44));
    if (!v45)
    {
      ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
      std::__shared_weak_count::__release_weak(v43);
    }
  }
}

void sub_20A803AFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  uint64_t v25;

  if (a25 < 0)
    operator delete(__p);
  *(_QWORD *)(v25 - 112) = &a15;
  std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v25 - 112));
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)&a18);
  _Unwind_Resume(a1);
}

void std::allocate_shared[abi:ne180100]<mediaplatform::DatabaseBindParameter,std::allocator<mediaplatform::DatabaseBindParameter>,std::shared_ptr<mediaplatform::DatabaseParameter<int>> &,void>(_QWORD *a1, uint64_t a2, std::__shared_weak_count *a3)
{
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;

  v6 = operator new(0x30uLL);
  v7 = v6;
  v6[1] = 0;
  v6[2] = 0;
  *v6 = &off_24C33BFE0;
  v8 = v6 + 3;
  if (a3)
  {
    p_shared_owners = (unint64_t *)&a3->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
    v6[3] = &off_24C3311D8;
    v6[4] = a2;
    v6[5] = a3;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))a3->__on_zero_shared)(a3);
      std::__shared_weak_count::__release_weak(a3);
    }
  }
  else
  {
    v6[3] = &off_24C3311D8;
    v6[4] = a2;
    v6[5] = 0;
  }
  *a1 = v8;
  a1[1] = v7;
}

void std::allocate_shared[abi:ne180100]<mediaplatform::SQLFunctionExpression,std::allocator<mediaplatform::SQLFunctionExpression>,std::string,std::vector<std::shared_ptr<mediaplatform::SQLExpression const>> &,void>(_QWORD *a1, __int128 *a2, _QWORD **a3)
{
  char *v6;
  __int128 v7;
  void (**v8)(mediaplatform::SQLExpressionList *__hidden);
  uint64_t v9;
  __int128 v10;
  void *__p[2];
  uint64_t v12;
  void **v13;

  v6 = (char *)operator new(0x58uLL);
  *(_OWORD *)(v6 + 8) = 0u;
  *(_QWORD *)v6 = &off_24C33C050;
  v7 = *a2;
  v10 = 0u;
  *(_OWORD *)__p = v7;
  v12 = *((_QWORD *)a2 + 2);
  *(_QWORD *)a2 = 0;
  *(__int128 *)((char *)a2 + 8) = 0u;
  v8 = &off_24C330FB0;
  v9 = 0;
  std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__init_with_size[abi:ne180100]<std::shared_ptr<mediaplatform::SQLExpression const>*,std::shared_ptr<mediaplatform::SQLExpression const>*>((char *)&v9, *a3, a3[1], ((char *)a3[1] - (char *)*a3) >> 4);
  mediaplatform::SQLFunctionExpression::SQLFunctionExpression((uint64_t)(v6 + 24), (__int128 *)__p, (uint64_t)&v8);
  v8 = &off_24C330FB0;
  v13 = (void **)&v9;
  std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__destroy_vector::operator()[abi:ne180100](&v13);
  if (SHIBYTE(v12) < 0)
    operator delete(__p[0]);
  *a1 = v6 + 24;
  a1[1] = v6;
}

void sub_20A803D30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19)
{
  std::__shared_weak_count *v19;
  void *v21;

  std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a19);
  if (a18 < 0)
    operator delete(__p);
  std::__shared_weak_count::~__shared_weak_count(v19);
  operator delete(v21);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<mediaplatform::DatabaseBindParameter>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C33BFE0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<mediaplatform::DatabaseBindParameter>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C33BFE0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x20BD27AFCLL);
}

void mediaplatform::DatabaseParameter<int>::~DatabaseParameter()
{
  JUMPOUT(0x20BD27AFCLL);
}

uint64_t mediaplatform::DatabaseParameter<int>::description()
{
  _QWORD v1[11];
  char v2;
  uint64_t v3;

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v1);
  std::ostream::operator<<();
  std::stringbuf::str();
  v1[0] = *MEMORY[0x24BEDB800];
  *(_QWORD *)((char *)v1 + *(_QWORD *)(v1[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  v1[1] = MEMORY[0x24BEDB848] + 16;
  if (v2 < 0)
    operator delete((void *)v1[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x20BD27A84](&v3);
}

void sub_20A803E80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
  uint64_t v27;

  *(_QWORD *)(v27 + *(_QWORD *)(*MEMORY[0x24BEDB800] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  if (a24 < 0)
    operator delete(__p);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x20BD27A84](&a27);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<mediaplatform::DatabaseParameter<int>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C33BD08;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<mediaplatform::DatabaseParameter<int>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C33BD08;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x20BD27AFCLL);
}

_QWORD *mlcore::AnyInPredicate<std::string>::~AnyInPredicate(_QWORD *a1)
{
  void *v2;

  *a1 = &unk_24C337308;
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 5));
  *a1 = off_24C3399E0;
  v2 = (void *)a1[1];
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }
  return a1;
}

void mlcore::AnyInPredicate<std::string>::~AnyInPredicate(_QWORD *a1)
{
  void *v2;

  *a1 = &unk_24C337308;
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 5));
  *a1 = off_24C3399E0;
  v2 = (void *)a1[1];
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }
  JUMPOUT(0x20BD27AFCLL);
}

uint64_t mlcore::AnyInPredicate<std::string>::description(_QWORD *a1)
{
  uint64_t *v2;
  uint64_t *v3;
  char v4;
  uint64_t v5;
  std::string *p_p;
  std::string::size_type size;
  uint64_t *v8;
  char v9;
  std::string *v10;
  std::string::size_type v11;
  std::string __p;
  _QWORD v14[11];
  char v15;
  uint64_t v16;

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v14);
  v2 = (uint64_t *)a1[1];
  v3 = (uint64_t *)a1[2];
  if (v2 != v3)
  {
    v4 = 1;
    do
    {
      v5 = *v2;
      if ((v4 & 1) == 0)
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)", ", 2);
      (*(void (**)(std::string *__return_ptr, uint64_t))(*(_QWORD *)v5 + 40))(&__p, v5);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        p_p = &__p;
      else
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      else
        size = __p.__r_.__value_.__l.__size_;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)p_p, size);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      v4 = 0;
      ++v2;
    }
    while (v2 != v3);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)" in [", 5);
  v8 = *(uint64_t **)(a1[5] + 16);
  if (v8)
  {
    v9 = 1;
    do
    {
      if (*((char *)v8 + 39) < 0)
        std::string::__init_copy_ctor_external(&__p, (const std::string::value_type *)v8[2], v8[3]);
      else
        __p = *(std::string *)(v8 + 2);
      if ((v9 & 1) == 0)
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)", ", 2);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"\"", 1);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v10 = &__p;
      else
        v10 = (std::string *)__p.__r_.__value_.__r.__words[0];
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v11 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      else
        v11 = __p.__r_.__value_.__l.__size_;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v10, v11);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"\"", 1);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      v9 = 0;
      v8 = (uint64_t *)*v8;
    }
    while (v8);
  }
  __p.__r_.__value_.__s.__data_[0] = 93;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)&__p, 1);
  std::stringbuf::str();
  v14[0] = *MEMORY[0x24BEDB800];
  *(_QWORD *)((char *)v14 + *(_QWORD *)(v14[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  v14[1] = MEMORY[0x24BEDB848] + 16;
  if (v15 < 0)
    operator delete((void *)v14[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x20BD27A84](&v16);
}

void sub_20A804210(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  std::ostringstream::~ostringstream((uint64_t)&a15);
  _Unwind_Resume(a1);
}

BOOL mlcore::AnyInPredicate<std::string>::matches(_QWORD *a1, _QWORD *a2)
{
  unint64_t *v2;
  uint64_t v3;
  int v4;
  __int128 v5;
  std::string::size_type size;
  uint64_t v7;
  _BOOL8 v8;
  std::string::size_type v9;
  int v10;
  std::string *v11;
  std::string *p_p;
  uint64_t v13;
  int v14;
  int v15;
  int v16;
  int v17;
  BOOL v19;
  BOOL v20;
  BOOL v21;
  unint64_t *v23;
  std::string v26;
  std::string __p;

  v2 = (unint64_t *)a1[1];
  v23 = (unint64_t *)a1[2];
  if (v2 != v23)
  {
    while (1)
    {
      mlcore::PropertyCacheBase<std::string,mediaplatform::Data>::valueForProperty(&__p, *a2 + 8, *v2);
      v3 = a1[5] + 16;
      v4 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
      v5 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      else
        size = __p.__r_.__value_.__l.__size_;
      v7 = HIBYTE(__p.__r_.__value_.__r.__words[2]) - 1;
      while (1)
      {
        v3 = *(_QWORD *)v3;
        v8 = v3 != 0;
        if (!v3)
          break;
        if (*(char *)(v3 + 39) < 0)
          std::string::__init_copy_ctor_external(&v26, *(const std::string::value_type **)(v3 + 16), *(_QWORD *)(v3 + 24));
        else
          v26 = *(std::string *)(v3 + 16);
        v9 = HIBYTE(v26.__r_.__value_.__r.__words[2]);
        v10 = SHIBYTE(v26.__r_.__value_.__r.__words[2]);
        if ((v26.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v9 = v26.__r_.__value_.__l.__size_;
        if (size == v9)
        {
          if ((v26.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v11 = &v26;
          else
            v11 = (std::string *)v26.__r_.__value_.__r.__words[0];
          if (v4 < 0)
          {
            v20 = memcmp((const void *)v5, v11, *((size_t *)&v5 + 1)) == 0;
          }
          else
          {
            if (!v4)
            {
              v20 = 1;
              if ((SHIBYTE(v26.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                goto LABEL_29;
              goto LABEL_32;
            }
            p_p = &__p;
            v13 = v7;
            do
            {
              v15 = p_p->__r_.__value_.__s.__data_[0];
              p_p = (std::string *)((char *)p_p + 1);
              v14 = v15;
              v17 = v11->__r_.__value_.__s.__data_[0];
              v11 = (std::string *)((char *)v11 + 1);
              v16 = v17;
              v19 = v13-- != 0;
              v20 = v14 == v16;
            }
            while (v14 == v16 && v19);
          }
          if ((v10 & 0x80000000) == 0)
            goto LABEL_29;
LABEL_32:
          operator delete(v26.__r_.__value_.__l.__data_);
          if (v20)
            break;
        }
        else
        {
          v20 = 0;
          if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
            goto LABEL_32;
LABEL_29:
          if (v20)
            break;
        }
      }
      if (v4 < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      ++v2;
      if (v3)
        v21 = 1;
      else
        v21 = v2 == v23;
      if (v21)
        return v8;
    }
  }
  return 0;
}

void sub_20A8043E4(_Unwind_Exception *exception_object)
{
  void *v1;
  int v2;

  if (v2 < 0)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

void mlcore::AnyInPredicate<std::string>::_SQLExpression(uint64_t a1@<X0>, uint64_t *a2@<X1>, _OWORD *a3@<X8>)
{
  std::__shared_weak_count *v6;
  __int128 v7;
  _OWORD *v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t *v15;
  uint64_t *i;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char *v27;
  uint64_t v28;
  char *v29;
  _QWORD *v30;
  _QWORD *v31;
  char *v32;
  __int128 v33;
  int64x2_t v34;
  _OWORD *v35;
  uint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  __int128 v46;
  uint64_t v47;
  std::__shared_weak_count *v48;
  __int128 v49;
  int64x2_t v50;
  _QWORD v51[2];
  std::__shared_weak_count *v52;
  void *__p;
  int64x2_t v54;
  uint64_t v55;
  _QWORD *v56;
  __int128 v57;
  uint64_t v58;

  v58 = *MEMORY[0x24BDAC8D0];
  v6 = (std::__shared_weak_count *)operator new(0x28uLL);
  v6->__shared_owners_ = 0;
  v6->__shared_weak_owners_ = 0;
  v6->__vftable = (std::__shared_weak_count_vtbl *)&off_24C33BD08;
  v6[1].__vftable = (std::__shared_weak_count_vtbl *)&off_24C335D00;
  LODWORD(v6[1].__shared_owners_) = *(_DWORD *)(a1 + 32);
  v51[1] = v6 + 1;
  v52 = v6;
  std::allocate_shared[abi:ne180100]<mediaplatform::DatabaseBindParameter,std::allocator<mediaplatform::DatabaseBindParameter>,std::shared_ptr<mediaplatform::DatabaseParameter<int>> &,void>(&v49, (uint64_t)&v6[1], v6);
  v7 = v49;
  v57 = v49;
  v49 = 0uLL;
  v51[0] = 0;
  v50 = 0uLL;
  __p = &v50;
  v54.i8[0] = 0;
  v8 = operator new(0x10uLL);
  v50.i64[0] = (uint64_t)v8;
  v51[0] = v8 + 1;
  *v8 = v7;
  if (*((_QWORD *)&v7 + 1))
  {
    v9 = (unint64_t *)(*((_QWORD *)&v7 + 1) + 8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
    v50.i64[1] = (uint64_t)(v8 + 1);
    do
      v11 = __ldaxr(v9);
    while (__stlxr(v11 - 1, v9));
    if (!v11)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v7 + 1) + 16))(*((_QWORD *)&v7 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v7 + 1));
    }
  }
  else
  {
    v50.i64[1] = (uint64_t)(v8 + 1);
  }
  v12 = (std::__shared_weak_count *)*((_QWORD *)&v49 + 1);
  if (*((_QWORD *)&v49 + 1))
  {
    v13 = (unint64_t *)(*((_QWORD *)&v49 + 1) + 8);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  v15 = *(uint64_t **)(a1 + 8);
  for (i = *(uint64_t **)(a1 + 16); v15 != i; ++v15)
  {
    v17 = *v15;
    v18 = (std::__shared_weak_count *)a2[1];
    v47 = *a2;
    v48 = v18;
    if (v18)
    {
      p_shared_owners = (unint64_t *)&v18->__shared_owners_;
      do
        v20 = __ldxr(p_shared_owners);
      while (__stxr(v20 + 1, p_shared_owners));
    }
    (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t *))(*(_QWORD *)v17 + 96))(&v49, v17, &v47);
    v21 = v49;
    v57 = v49;
    v49 = 0uLL;
    v22 = v50.i64[1];
    if (v50.i64[1] >= v51[0])
    {
      v46 = v21;
      v23 = (v50.i64[1] - v50.i64[0]) >> 4;
      v24 = v23 + 1;
      if ((unint64_t)(v23 + 1) >> 60)
        std::vector<std::string>::__throw_length_error[abi:ne180100]();
      v25 = v51[0] - v50.i64[0];
      if ((v51[0] - v50.i64[0]) >> 3 > v24)
        v24 = v25 >> 3;
      if ((unint64_t)v25 >= 0x7FFFFFFFFFFFFFF0)
        v26 = 0xFFFFFFFFFFFFFFFLL;
      else
        v26 = v24;
      v56 = v51;
      v27 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<mediaplatform::DatabaseParameterBase>>>(v26);
      v29 = &v27[16 * v23];
      *(_OWORD *)v29 = v46;
      v57 = 0uLL;
      v30 = (_QWORD *)v50.i64[1];
      v31 = (_QWORD *)v50.i64[0];
      if (v50.i64[1] == v50.i64[0])
      {
        v34 = vdupq_n_s64(v50.u64[1]);
        v32 = &v27[16 * v23];
      }
      else
      {
        v32 = &v27[16 * v23];
        do
        {
          v33 = *((_OWORD *)v30 - 1);
          v30 -= 2;
          *((_OWORD *)v32 - 1) = v33;
          v32 -= 16;
          *v30 = 0;
          v30[1] = 0;
        }
        while (v30 != v31);
        v34 = v50;
      }
      v35 = v29 + 16;
      v50.i64[0] = (uint64_t)v32;
      v50.i64[1] = (uint64_t)(v29 + 16);
      v54 = v34;
      v36 = v51[0];
      v51[0] = &v27[16 * v28];
      v55 = v36;
      __p = (void *)v34.i64[0];
      std::__split_buffer<std::shared_ptr<mediaplatform::SQLExpression const>>::~__split_buffer((uint64_t)&__p);
      v37 = (std::__shared_weak_count *)*((_QWORD *)&v49 + 1);
      v50.i64[1] = (uint64_t)v35;
      if (*((_QWORD *)&v49 + 1))
      {
        v38 = (unint64_t *)(*((_QWORD *)&v49 + 1) + 8);
        do
          v39 = __ldaxr(v38);
        while (__stlxr(v39 - 1, v38));
        if (!v39)
        {
          ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
          std::__shared_weak_count::__release_weak(v37);
        }
      }
    }
    else
    {
      *(_OWORD *)v50.i64[1] = v21;
      v57 = 0uLL;
      v50.i64[1] = v22 + 16;
    }
    v40 = v48;
    if (v48)
    {
      v41 = (unint64_t *)&v48->__shared_owners_;
      do
        v42 = __ldaxr(v41);
      while (__stlxr(v42 - 1, v41));
      if (!v42)
      {
        ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
        std::__shared_weak_count::__release_weak(v40);
      }
    }
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "HashtableLookupString");
  std::allocate_shared[abi:ne180100]<mediaplatform::SQLFunctionExpression,std::allocator<mediaplatform::SQLFunctionExpression>,std::string,std::vector<std::shared_ptr<mediaplatform::SQLExpression const>> &,void>(&v57, (__int128 *)&__p, &v50);
  *a3 = v57;
  if (v54.i8[15] < 0)
    operator delete(__p);
  __p = &v50;
  std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  v43 = v52;
  if (v52)
  {
    v44 = (unint64_t *)&v52->__shared_owners_;
    do
      v45 = __ldaxr(v44);
    while (__stlxr(v45 - 1, v44));
    if (!v45)
    {
      ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
      std::__shared_weak_count::__release_weak(v43);
    }
  }
}

void sub_20A80479C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  uint64_t v25;

  if (a25 < 0)
    operator delete(__p);
  *(_QWORD *)(v25 - 112) = &a15;
  std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v25 - 112));
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)&a18);
  _Unwind_Resume(a1);
}

_QWORD *mlcore::AnyInPredicate<double>::~AnyInPredicate(_QWORD *a1)
{
  void *v2;

  *a1 = &unk_24C337360;
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 5));
  *a1 = off_24C3399E0;
  v2 = (void *)a1[1];
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }
  return a1;
}

void mlcore::AnyInPredicate<double>::~AnyInPredicate(_QWORD *a1)
{
  void *v2;

  *a1 = &unk_24C337360;
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 5));
  *a1 = off_24C3399E0;
  v2 = (void *)a1[1];
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }
  JUMPOUT(0x20BD27AFCLL);
}

uint64_t mlcore::AnyInPredicate<double>::description(_QWORD *a1)
{
  uint64_t *v2;
  uint64_t *v3;
  char v4;
  uint64_t v5;
  void **v6;
  uint64_t v7;
  _QWORD *v8;
  char i;
  void *__p[2];
  unsigned __int8 v12;
  _QWORD v13[11];
  char v14;
  uint64_t v15;

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v13);
  v2 = (uint64_t *)a1[1];
  v3 = (uint64_t *)a1[2];
  if (v2 != v3)
  {
    v4 = 1;
    do
    {
      v5 = *v2;
      if ((v4 & 1) == 0)
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)", ", 2);
      (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)v5 + 40))(__p, v5);
      if ((v12 & 0x80u) == 0)
        v6 = __p;
      else
        v6 = (void **)__p[0];
      if ((v12 & 0x80u) == 0)
        v7 = v12;
      else
        v7 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)v6, v7);
      if ((char)v12 < 0)
        operator delete(__p[0]);
      v4 = 0;
      ++v2;
    }
    while (v2 != v3);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)" in [", 5);
  v8 = (_QWORD *)(a1[5] + 16);
  for (i = 1; ; i = 0)
  {
    v8 = (_QWORD *)*v8;
    if (!v8)
      break;
    if ((i & 1) == 0)
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)", ", 2);
    std::ostream::operator<<();
  }
  LOBYTE(__p[0]) = 93;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)__p, 1);
  std::stringbuf::str();
  v13[0] = *MEMORY[0x24BEDB800];
  *(_QWORD *)((char *)v13 + *(_QWORD *)(v13[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  v13[1] = MEMORY[0x24BEDB848] + 16;
  if (v14 < 0)
    operator delete((void *)v13[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x20BD27A84](&v15);
}

void sub_20A804A98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  std::ostringstream::~ostringstream((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t mlcore::AnyInPredicate<double>::matches(_QWORD *a1, _QWORD *a2)
{
  unint64_t *v2;
  unint64_t *i;
  double v6;
  uint64_t v7;

  v2 = (unint64_t *)a1[1];
  for (i = (unint64_t *)a1[2]; v2 != i; ++v2)
  {
    v6 = mlcore::PropertyCacheBase<double,std::string,mediaplatform::Data>::valueForProperty(*a2 + 8, *v2);
    v7 = a1[5] + 16;
    while (1)
    {
      v7 = *(_QWORD *)v7;
      if (!v7)
        break;
      if (v6 == *(double *)(v7 + 16))
        return 1;
    }
  }
  return 0;
}

void mlcore::AnyInPredicate<double>::_SQLExpression(uint64_t a1@<X0>, uint64_t *a2@<X1>, _OWORD *a3@<X8>)
{
  std::__shared_weak_count *v6;
  __int128 v7;
  _OWORD *v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t *v15;
  uint64_t *i;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char *v27;
  uint64_t v28;
  char *v29;
  _QWORD *v30;
  _QWORD *v31;
  char *v32;
  __int128 v33;
  int64x2_t v34;
  _OWORD *v35;
  uint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  __int128 v46;
  uint64_t v47;
  std::__shared_weak_count *v48;
  __int128 v49;
  int64x2_t v50;
  _QWORD v51[2];
  std::__shared_weak_count *v52;
  void *__p;
  int64x2_t v54;
  uint64_t v55;
  _QWORD *v56;
  __int128 v57;
  uint64_t v58;

  v58 = *MEMORY[0x24BDAC8D0];
  v6 = (std::__shared_weak_count *)operator new(0x28uLL);
  v6->__shared_owners_ = 0;
  v6->__shared_weak_owners_ = 0;
  v6->__vftable = (std::__shared_weak_count_vtbl *)&off_24C33BD08;
  v6[1].__vftable = (std::__shared_weak_count_vtbl *)&off_24C335D00;
  LODWORD(v6[1].__shared_owners_) = *(_DWORD *)(a1 + 32);
  v51[1] = v6 + 1;
  v52 = v6;
  std::allocate_shared[abi:ne180100]<mediaplatform::DatabaseBindParameter,std::allocator<mediaplatform::DatabaseBindParameter>,std::shared_ptr<mediaplatform::DatabaseParameter<int>> &,void>(&v49, (uint64_t)&v6[1], v6);
  v7 = v49;
  v57 = v49;
  v49 = 0uLL;
  v51[0] = 0;
  v50 = 0uLL;
  __p = &v50;
  v54.i8[0] = 0;
  v8 = operator new(0x10uLL);
  v50.i64[0] = (uint64_t)v8;
  v51[0] = v8 + 1;
  *v8 = v7;
  if (*((_QWORD *)&v7 + 1))
  {
    v9 = (unint64_t *)(*((_QWORD *)&v7 + 1) + 8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
    v50.i64[1] = (uint64_t)(v8 + 1);
    do
      v11 = __ldaxr(v9);
    while (__stlxr(v11 - 1, v9));
    if (!v11)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v7 + 1) + 16))(*((_QWORD *)&v7 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v7 + 1));
    }
  }
  else
  {
    v50.i64[1] = (uint64_t)(v8 + 1);
  }
  v12 = (std::__shared_weak_count *)*((_QWORD *)&v49 + 1);
  if (*((_QWORD *)&v49 + 1))
  {
    v13 = (unint64_t *)(*((_QWORD *)&v49 + 1) + 8);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  v15 = *(uint64_t **)(a1 + 8);
  for (i = *(uint64_t **)(a1 + 16); v15 != i; ++v15)
  {
    v17 = *v15;
    v18 = (std::__shared_weak_count *)a2[1];
    v47 = *a2;
    v48 = v18;
    if (v18)
    {
      p_shared_owners = (unint64_t *)&v18->__shared_owners_;
      do
        v20 = __ldxr(p_shared_owners);
      while (__stxr(v20 + 1, p_shared_owners));
    }
    (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t *))(*(_QWORD *)v17 + 96))(&v49, v17, &v47);
    v21 = v49;
    v57 = v49;
    v49 = 0uLL;
    v22 = v50.i64[1];
    if (v50.i64[1] >= v51[0])
    {
      v46 = v21;
      v23 = (v50.i64[1] - v50.i64[0]) >> 4;
      v24 = v23 + 1;
      if ((unint64_t)(v23 + 1) >> 60)
        std::vector<std::string>::__throw_length_error[abi:ne180100]();
      v25 = v51[0] - v50.i64[0];
      if ((v51[0] - v50.i64[0]) >> 3 > v24)
        v24 = v25 >> 3;
      if ((unint64_t)v25 >= 0x7FFFFFFFFFFFFFF0)
        v26 = 0xFFFFFFFFFFFFFFFLL;
      else
        v26 = v24;
      v56 = v51;
      v27 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<mediaplatform::DatabaseParameterBase>>>(v26);
      v29 = &v27[16 * v23];
      *(_OWORD *)v29 = v46;
      v57 = 0uLL;
      v30 = (_QWORD *)v50.i64[1];
      v31 = (_QWORD *)v50.i64[0];
      if (v50.i64[1] == v50.i64[0])
      {
        v34 = vdupq_n_s64(v50.u64[1]);
        v32 = &v27[16 * v23];
      }
      else
      {
        v32 = &v27[16 * v23];
        do
        {
          v33 = *((_OWORD *)v30 - 1);
          v30 -= 2;
          *((_OWORD *)v32 - 1) = v33;
          v32 -= 16;
          *v30 = 0;
          v30[1] = 0;
        }
        while (v30 != v31);
        v34 = v50;
      }
      v35 = v29 + 16;
      v50.i64[0] = (uint64_t)v32;
      v50.i64[1] = (uint64_t)(v29 + 16);
      v54 = v34;
      v36 = v51[0];
      v51[0] = &v27[16 * v28];
      v55 = v36;
      __p = (void *)v34.i64[0];
      std::__split_buffer<std::shared_ptr<mediaplatform::SQLExpression const>>::~__split_buffer((uint64_t)&__p);
      v37 = (std::__shared_weak_count *)*((_QWORD *)&v49 + 1);
      v50.i64[1] = (uint64_t)v35;
      if (*((_QWORD *)&v49 + 1))
      {
        v38 = (unint64_t *)(*((_QWORD *)&v49 + 1) + 8);
        do
          v39 = __ldaxr(v38);
        while (__stlxr(v39 - 1, v38));
        if (!v39)
        {
          ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
          std::__shared_weak_count::__release_weak(v37);
        }
      }
    }
    else
    {
      *(_OWORD *)v50.i64[1] = v21;
      v57 = 0uLL;
      v50.i64[1] = v22 + 16;
    }
    v40 = v48;
    if (v48)
    {
      v41 = (unint64_t *)&v48->__shared_owners_;
      do
        v42 = __ldaxr(v41);
      while (__stlxr(v42 - 1, v41));
      if (!v42)
      {
        ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
        std::__shared_weak_count::__release_weak(v40);
      }
    }
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "HashtableLookupDouble");
  std::allocate_shared[abi:ne180100]<mediaplatform::SQLFunctionExpression,std::allocator<mediaplatform::SQLFunctionExpression>,std::string,std::vector<std::shared_ptr<mediaplatform::SQLExpression const>> &,void>(&v57, (__int128 *)&__p, &v50);
  *a3 = v57;
  if (v54.i8[15] < 0)
    operator delete(__p);
  __p = &v50;
  std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  v43 = v52;
  if (v52)
  {
    v44 = (unint64_t *)&v52->__shared_owners_;
    do
      v45 = __ldaxr(v44);
    while (__stlxr(v45 - 1, v44));
    if (!v45)
    {
      ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
      std::__shared_weak_count::__release_weak(v43);
    }
  }
}

void sub_20A804EEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  uint64_t v25;

  if (a25 < 0)
    operator delete(__p);
  *(_QWORD *)(v25 - 112) = &a15;
  std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v25 - 112));
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)&a18);
  _Unwind_Resume(a1);
}

_QWORD *mlcore::AnyInPredicate<int>::~AnyInPredicate(_QWORD *a1)
{
  void *v2;

  *a1 = &unk_24C3373B8;
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 5));
  *a1 = off_24C3399E0;
  v2 = (void *)a1[1];
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }
  return a1;
}

void mlcore::AnyInPredicate<int>::~AnyInPredicate(_QWORD *a1)
{
  void *v2;

  *a1 = &unk_24C3373B8;
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 5));
  *a1 = off_24C3399E0;
  v2 = (void *)a1[1];
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }
  JUMPOUT(0x20BD27AFCLL);
}

uint64_t mlcore::AnyInPredicate<int>::description(_QWORD *a1)
{
  uint64_t *v2;
  uint64_t *v3;
  char v4;
  uint64_t v5;
  void **v6;
  uint64_t v7;
  _QWORD *v8;
  char i;
  void *__p[2];
  unsigned __int8 v12;
  _QWORD v13[11];
  char v14;
  uint64_t v15;

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v13);
  v2 = (uint64_t *)a1[1];
  v3 = (uint64_t *)a1[2];
  if (v2 != v3)
  {
    v4 = 1;
    do
    {
      v5 = *v2;
      if ((v4 & 1) == 0)
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)", ", 2);
      (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)v5 + 40))(__p, v5);
      if ((v12 & 0x80u) == 0)
        v6 = __p;
      else
        v6 = (void **)__p[0];
      if ((v12 & 0x80u) == 0)
        v7 = v12;
      else
        v7 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)v6, v7);
      if ((char)v12 < 0)
        operator delete(__p[0]);
      v4 = 0;
      ++v2;
    }
    while (v2 != v3);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)" in [", 5);
  v8 = (_QWORD *)(a1[5] + 16);
  for (i = 1; ; i = 0)
  {
    v8 = (_QWORD *)*v8;
    if (!v8)
      break;
    if ((i & 1) == 0)
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)", ", 2);
    std::ostream::operator<<();
  }
  LOBYTE(__p[0]) = 93;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)__p, 1);
  std::stringbuf::str();
  v13[0] = *MEMORY[0x24BEDB800];
  *(_QWORD *)((char *)v13 + *(_QWORD *)(v13[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  v13[1] = MEMORY[0x24BEDB848] + 16;
  if (v14 < 0)
    operator delete((void *)v13[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x20BD27A84](&v15);
}

void sub_20A8051E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  std::ostringstream::~ostringstream((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t mlcore::AnyInPredicate<int>::matches(_QWORD *a1, _QWORD *a2)
{
  unint64_t *v2;
  unint64_t *i;
  int v6;
  uint64_t v7;

  v2 = (unint64_t *)a1[1];
  for (i = (unint64_t *)a1[2]; v2 != i; ++v2)
  {
    v6 = mlcore::PropertyCacheBase<int,double,std::string,mediaplatform::Data>::valueForProperty(*a2 + 8, *v2);
    v7 = a1[5] + 16;
    while (1)
    {
      v7 = *(_QWORD *)v7;
      if (!v7)
        break;
      if (v6 == *(_DWORD *)(v7 + 16))
        return 1;
    }
  }
  return 0;
}

void mlcore::AnyInPredicate<int>::_SQLExpression(uint64_t a1@<X0>, uint64_t *a2@<X1>, _OWORD *a3@<X8>)
{
  std::__shared_weak_count *v6;
  __int128 v7;
  _OWORD *v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t *v15;
  uint64_t *i;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char *v27;
  uint64_t v28;
  char *v29;
  _QWORD *v30;
  _QWORD *v31;
  char *v32;
  __int128 v33;
  int64x2_t v34;
  _OWORD *v35;
  uint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  __int128 v46;
  uint64_t v47;
  std::__shared_weak_count *v48;
  __int128 v49;
  int64x2_t v50;
  _QWORD v51[2];
  std::__shared_weak_count *v52;
  void *__p;
  int64x2_t v54;
  uint64_t v55;
  _QWORD *v56;
  __int128 v57;
  uint64_t v58;

  v58 = *MEMORY[0x24BDAC8D0];
  v6 = (std::__shared_weak_count *)operator new(0x28uLL);
  v6->__shared_owners_ = 0;
  v6->__shared_weak_owners_ = 0;
  v6->__vftable = (std::__shared_weak_count_vtbl *)&off_24C33BD08;
  v6[1].__vftable = (std::__shared_weak_count_vtbl *)&off_24C335D00;
  LODWORD(v6[1].__shared_owners_) = *(_DWORD *)(a1 + 32);
  v51[1] = v6 + 1;
  v52 = v6;
  std::allocate_shared[abi:ne180100]<mediaplatform::DatabaseBindParameter,std::allocator<mediaplatform::DatabaseBindParameter>,std::shared_ptr<mediaplatform::DatabaseParameter<int>> &,void>(&v49, (uint64_t)&v6[1], v6);
  v7 = v49;
  v57 = v49;
  v49 = 0uLL;
  v51[0] = 0;
  v50 = 0uLL;
  __p = &v50;
  v54.i8[0] = 0;
  v8 = operator new(0x10uLL);
  v50.i64[0] = (uint64_t)v8;
  v51[0] = v8 + 1;
  *v8 = v7;
  if (*((_QWORD *)&v7 + 1))
  {
    v9 = (unint64_t *)(*((_QWORD *)&v7 + 1) + 8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
    v50.i64[1] = (uint64_t)(v8 + 1);
    do
      v11 = __ldaxr(v9);
    while (__stlxr(v11 - 1, v9));
    if (!v11)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v7 + 1) + 16))(*((_QWORD *)&v7 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v7 + 1));
    }
  }
  else
  {
    v50.i64[1] = (uint64_t)(v8 + 1);
  }
  v12 = (std::__shared_weak_count *)*((_QWORD *)&v49 + 1);
  if (*((_QWORD *)&v49 + 1))
  {
    v13 = (unint64_t *)(*((_QWORD *)&v49 + 1) + 8);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  v15 = *(uint64_t **)(a1 + 8);
  for (i = *(uint64_t **)(a1 + 16); v15 != i; ++v15)
  {
    v17 = *v15;
    v18 = (std::__shared_weak_count *)a2[1];
    v47 = *a2;
    v48 = v18;
    if (v18)
    {
      p_shared_owners = (unint64_t *)&v18->__shared_owners_;
      do
        v20 = __ldxr(p_shared_owners);
      while (__stxr(v20 + 1, p_shared_owners));
    }
    (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t *))(*(_QWORD *)v17 + 96))(&v49, v17, &v47);
    v21 = v49;
    v57 = v49;
    v49 = 0uLL;
    v22 = v50.i64[1];
    if (v50.i64[1] >= v51[0])
    {
      v46 = v21;
      v23 = (v50.i64[1] - v50.i64[0]) >> 4;
      v24 = v23 + 1;
      if ((unint64_t)(v23 + 1) >> 60)
        std::vector<std::string>::__throw_length_error[abi:ne180100]();
      v25 = v51[0] - v50.i64[0];
      if ((v51[0] - v50.i64[0]) >> 3 > v24)
        v24 = v25 >> 3;
      if ((unint64_t)v25 >= 0x7FFFFFFFFFFFFFF0)
        v26 = 0xFFFFFFFFFFFFFFFLL;
      else
        v26 = v24;
      v56 = v51;
      v27 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<mediaplatform::DatabaseParameterBase>>>(v26);
      v29 = &v27[16 * v23];
      *(_OWORD *)v29 = v46;
      v57 = 0uLL;
      v30 = (_QWORD *)v50.i64[1];
      v31 = (_QWORD *)v50.i64[0];
      if (v50.i64[1] == v50.i64[0])
      {
        v34 = vdupq_n_s64(v50.u64[1]);
        v32 = &v27[16 * v23];
      }
      else
      {
        v32 = &v27[16 * v23];
        do
        {
          v33 = *((_OWORD *)v30 - 1);
          v30 -= 2;
          *((_OWORD *)v32 - 1) = v33;
          v32 -= 16;
          *v30 = 0;
          v30[1] = 0;
        }
        while (v30 != v31);
        v34 = v50;
      }
      v35 = v29 + 16;
      v50.i64[0] = (uint64_t)v32;
      v50.i64[1] = (uint64_t)(v29 + 16);
      v54 = v34;
      v36 = v51[0];
      v51[0] = &v27[16 * v28];
      v55 = v36;
      __p = (void *)v34.i64[0];
      std::__split_buffer<std::shared_ptr<mediaplatform::SQLExpression const>>::~__split_buffer((uint64_t)&__p);
      v37 = (std::__shared_weak_count *)*((_QWORD *)&v49 + 1);
      v50.i64[1] = (uint64_t)v35;
      if (*((_QWORD *)&v49 + 1))
      {
        v38 = (unint64_t *)(*((_QWORD *)&v49 + 1) + 8);
        do
          v39 = __ldaxr(v38);
        while (__stlxr(v39 - 1, v38));
        if (!v39)
        {
          ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
          std::__shared_weak_count::__release_weak(v37);
        }
      }
    }
    else
    {
      *(_OWORD *)v50.i64[1] = v21;
      v57 = 0uLL;
      v50.i64[1] = v22 + 16;
    }
    v40 = v48;
    if (v48)
    {
      v41 = (unint64_t *)&v48->__shared_owners_;
      do
        v42 = __ldaxr(v41);
      while (__stlxr(v42 - 1, v41));
      if (!v42)
      {
        ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
        std::__shared_weak_count::__release_weak(v40);
      }
    }
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "HashtableLookupInt");
  std::allocate_shared[abi:ne180100]<mediaplatform::SQLFunctionExpression,std::allocator<mediaplatform::SQLFunctionExpression>,std::string,std::vector<std::shared_ptr<mediaplatform::SQLExpression const>> &,void>(&v57, (__int128 *)&__p, &v50);
  *a3 = v57;
  if (v54.i8[15] < 0)
    operator delete(__p);
  __p = &v50;
  std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  v43 = v52;
  if (v52)
  {
    v44 = (unint64_t *)&v52->__shared_owners_;
    do
      v45 = __ldaxr(v44);
    while (__stlxr(v45 - 1, v44));
    if (!v45)
    {
      ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
      std::__shared_weak_count::__release_weak(v43);
    }
  }
}

void sub_20A805634(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  uint64_t v25;

  if (a25 < 0)
    operator delete(__p);
  *(_QWORD *)(v25 - 112) = &a15;
  std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v25 - 112));
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)&a18);
  _Unwind_Resume(a1);
}

_QWORD *mlcore::AnyInPredicate<mediaplatform::Data>::~AnyInPredicate(_QWORD *a1)
{
  void *v2;

  *a1 = &unk_24C3372B0;
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 5));
  *a1 = off_24C3399E0;
  v2 = (void *)a1[1];
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }
  return a1;
}

void mlcore::AnyInPredicate<mediaplatform::Data>::~AnyInPredicate(_QWORD *a1)
{
  void *v2;

  *a1 = &unk_24C3372B0;
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 5));
  *a1 = off_24C3399E0;
  v2 = (void *)a1[1];
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }
  JUMPOUT(0x20BD27AFCLL);
}

uint64_t mlcore::AnyInPredicate<mediaplatform::Data>::description(_QWORD *a1)
{
  uint64_t *v2;
  uint64_t *v3;
  char v4;
  uint64_t v5;
  void *p_p;
  uint64_t v7;
  _QWORD *v8;
  char v9;
  const void *v10;
  size_t v11;
  void *v12;
  std::string *v13;
  std::string::size_type size;
  std::string v16;
  void *__p;
  size_t v18;
  int64_t v19;
  void *v20;
  char v21;
  _QWORD v22[11];
  char v23;
  uint64_t v24;

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v22);
  v2 = (uint64_t *)a1[1];
  v3 = (uint64_t *)a1[2];
  if (v2 != v3)
  {
    v4 = 1;
    do
    {
      v5 = *v2;
      if ((v4 & 1) == 0)
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)", ", 2);
      (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)v5 + 40))(&__p, v5);
      if (v19 >= 0)
        p_p = &__p;
      else
        p_p = __p;
      if (v19 >= 0)
        v7 = HIBYTE(v19);
      else
        v7 = v18;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)p_p, v7);
      if (SHIBYTE(v19) < 0)
        operator delete(__p);
      v4 = 0;
      ++v2;
    }
    while (v2 != v3);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)" in [", 5);
  v8 = *(_QWORD **)(a1[5] + 16);
  if (v8)
  {
    v9 = 1;
    while (1)
    {
      v10 = (const void *)v8[5];
      v11 = v8[3];
      __p = &off_24C331510;
      v18 = v11;
      v19 = v11;
      v12 = v11 ? (void *)operator new[]() : 0;
      v20 = v12;
      v21 = 1;
      if (!v10)
        break;
      memcpy(v12, v10, v11);
      if ((v9 & 1) == 0)
        goto LABEL_23;
LABEL_24:
      mediaplatform::Base16Representation((uint64_t)&__p, &v16);
      if ((v16.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v13 = &v16;
      else
        v13 = (std::string *)v16.__r_.__value_.__r.__words[0];
      if ((v16.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(v16.__r_.__value_.__r.__words[2]);
      else
        size = v16.__r_.__value_.__l.__size_;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)v13, size);
      if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v16.__r_.__value_.__l.__data_);
        if (!v12)
          goto LABEL_33;
LABEL_32:
        MEMORY[0x20BD27AE4](v12, 0x1000C8077774924);
        goto LABEL_33;
      }
      if (v12)
        goto LABEL_32;
LABEL_33:
      v9 = 0;
      v8 = (_QWORD *)*v8;
      if (!v8)
        goto LABEL_37;
    }
    bzero(v12, v11);
    if ((v9 & 1) != 0)
      goto LABEL_24;
LABEL_23:
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)", ", 2);
    goto LABEL_24;
  }
LABEL_37:
  LOBYTE(__p) = 93;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)&__p, 1);
  std::stringbuf::str();
  v22[0] = *MEMORY[0x24BEDB800];
  *(_QWORD *)((char *)v22 + *(_QWORD *)(v22[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  v22[1] = MEMORY[0x24BEDB848] + 16;
  if (v23 < 0)
    operator delete((void *)v22[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x20BD27A84](&v24);
}

void sub_20A8059F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,char a23)
{
  std::ostringstream::~ostringstream((uint64_t)&a23);
  _Unwind_Resume(a1);
}

uint64_t mlcore::AnyInPredicate<mediaplatform::Data>::matches(_QWORD *a1, _QWORD *a2)
{
  unint64_t *v2;
  unint64_t *v3;
  _QWORD *v6;
  const void *v7;
  size_t v8;
  void *v9;
  _BOOL4 v10;
  _QWORD v12[3];
  void *__s1;
  char v14;

  v2 = (unint64_t *)a1[1];
  v3 = (unint64_t *)a1[2];
  while (v2 != v3)
  {
    mlcore::PropertyCacheBase<mediaplatform::Data>::valueForProperty((mediaplatform::Data *)v12, *a2 + 8, *v2);
    v6 = (_QWORD *)(a1[5] + 16);
    while (1)
    {
      v6 = (_QWORD *)*v6;
      if (!v6)
        break;
      v7 = (const void *)v6[5];
      v8 = v6[3];
      if (v8)
        v9 = (void *)operator new[]();
      else
        v9 = 0;
      if (v7)
        memcpy(v9, v7, v8);
      else
        bzero(v9, v8);
      if (v8 == v12[1])
      {
        v10 = memcmp(__s1, v9, v8) == 0;
        if (!v9)
          goto LABEL_15;
LABEL_14:
        MEMORY[0x20BD27AE4](v9, 0x1000C8077774924);
        goto LABEL_15;
      }
      v10 = 0;
      if (v9)
        goto LABEL_14;
LABEL_15:
      if (v10)
      {
        v12[0] = &off_24C331510;
        if (v14)
        {
          if (__s1)
            MEMORY[0x20BD27AE4](__s1, 0x1000C8077774924);
        }
        return 1;
      }
    }
    v12[0] = &off_24C331510;
    if (v14 && __s1)
      MEMORY[0x20BD27AE4](__s1, 0x1000C8077774924);
    ++v2;
  }
  return 0;
}

void sub_20A805BFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  if (a14)
  {
    if (a13)
      MEMORY[0x20BD27AE4](a13, 0x1000C8077774924);
  }
  _Unwind_Resume(exception_object);
}

void mlcore::AnyInPredicate<mediaplatform::Data>::_SQLExpression(uint64_t a1@<X0>, uint64_t *a2@<X1>, _OWORD *a3@<X8>)
{
  std::__shared_weak_count *v6;
  __int128 v7;
  _OWORD *v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t *v15;
  uint64_t *i;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char *v27;
  uint64_t v28;
  char *v29;
  _QWORD *v30;
  _QWORD *v31;
  char *v32;
  __int128 v33;
  int64x2_t v34;
  _OWORD *v35;
  uint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  __int128 v46;
  uint64_t v47;
  std::__shared_weak_count *v48;
  __int128 v49;
  int64x2_t v50;
  _QWORD v51[2];
  std::__shared_weak_count *v52;
  void *__p;
  int64x2_t v54;
  uint64_t v55;
  _QWORD *v56;
  __int128 v57;
  uint64_t v58;

  v58 = *MEMORY[0x24BDAC8D0];
  v6 = (std::__shared_weak_count *)operator new(0x28uLL);
  v6->__shared_owners_ = 0;
  v6->__shared_weak_owners_ = 0;
  v6->__vftable = (std::__shared_weak_count_vtbl *)&off_24C33BD08;
  v6[1].__vftable = (std::__shared_weak_count_vtbl *)&off_24C335D00;
  LODWORD(v6[1].__shared_owners_) = *(_DWORD *)(a1 + 32);
  v51[1] = v6 + 1;
  v52 = v6;
  std::allocate_shared[abi:ne180100]<mediaplatform::DatabaseBindParameter,std::allocator<mediaplatform::DatabaseBindParameter>,std::shared_ptr<mediaplatform::DatabaseParameter<int>> &,void>(&v49, (uint64_t)&v6[1], v6);
  v7 = v49;
  v57 = v49;
  v49 = 0uLL;
  v51[0] = 0;
  v50 = 0uLL;
  __p = &v50;
  v54.i8[0] = 0;
  v8 = operator new(0x10uLL);
  v50.i64[0] = (uint64_t)v8;
  v51[0] = v8 + 1;
  *v8 = v7;
  if (*((_QWORD *)&v7 + 1))
  {
    v9 = (unint64_t *)(*((_QWORD *)&v7 + 1) + 8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
    v50.i64[1] = (uint64_t)(v8 + 1);
    do
      v11 = __ldaxr(v9);
    while (__stlxr(v11 - 1, v9));
    if (!v11)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v7 + 1) + 16))(*((_QWORD *)&v7 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v7 + 1));
    }
  }
  else
  {
    v50.i64[1] = (uint64_t)(v8 + 1);
  }
  v12 = (std::__shared_weak_count *)*((_QWORD *)&v49 + 1);
  if (*((_QWORD *)&v49 + 1))
  {
    v13 = (unint64_t *)(*((_QWORD *)&v49 + 1) + 8);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  v15 = *(uint64_t **)(a1 + 8);
  for (i = *(uint64_t **)(a1 + 16); v15 != i; ++v15)
  {
    v17 = *v15;
    v18 = (std::__shared_weak_count *)a2[1];
    v47 = *a2;
    v48 = v18;
    if (v18)
    {
      p_shared_owners = (unint64_t *)&v18->__shared_owners_;
      do
        v20 = __ldxr(p_shared_owners);
      while (__stxr(v20 + 1, p_shared_owners));
    }
    (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t *))(*(_QWORD *)v17 + 96))(&v49, v17, &v47);
    v21 = v49;
    v57 = v49;
    v49 = 0uLL;
    v22 = v50.i64[1];
    if (v50.i64[1] >= v51[0])
    {
      v46 = v21;
      v23 = (v50.i64[1] - v50.i64[0]) >> 4;
      v24 = v23 + 1;
      if ((unint64_t)(v23 + 1) >> 60)
        std::vector<std::string>::__throw_length_error[abi:ne180100]();
      v25 = v51[0] - v50.i64[0];
      if ((v51[0] - v50.i64[0]) >> 3 > v24)
        v24 = v25 >> 3;
      if ((unint64_t)v25 >= 0x7FFFFFFFFFFFFFF0)
        v26 = 0xFFFFFFFFFFFFFFFLL;
      else
        v26 = v24;
      v56 = v51;
      v27 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<mediaplatform::DatabaseParameterBase>>>(v26);
      v29 = &v27[16 * v23];
      *(_OWORD *)v29 = v46;
      v57 = 0uLL;
      v30 = (_QWORD *)v50.i64[1];
      v31 = (_QWORD *)v50.i64[0];
      if (v50.i64[1] == v50.i64[0])
      {
        v34 = vdupq_n_s64(v50.u64[1]);
        v32 = &v27[16 * v23];
      }
      else
      {
        v32 = &v27[16 * v23];
        do
        {
          v33 = *((_OWORD *)v30 - 1);
          v30 -= 2;
          *((_OWORD *)v32 - 1) = v33;
          v32 -= 16;
          *v30 = 0;
          v30[1] = 0;
        }
        while (v30 != v31);
        v34 = v50;
      }
      v35 = v29 + 16;
      v50.i64[0] = (uint64_t)v32;
      v50.i64[1] = (uint64_t)(v29 + 16);
      v54 = v34;
      v36 = v51[0];
      v51[0] = &v27[16 * v28];
      v55 = v36;
      __p = (void *)v34.i64[0];
      std::__split_buffer<std::shared_ptr<mediaplatform::SQLExpression const>>::~__split_buffer((uint64_t)&__p);
      v37 = (std::__shared_weak_count *)*((_QWORD *)&v49 + 1);
      v50.i64[1] = (uint64_t)v35;
      if (*((_QWORD *)&v49 + 1))
      {
        v38 = (unint64_t *)(*((_QWORD *)&v49 + 1) + 8);
        do
          v39 = __ldaxr(v38);
        while (__stlxr(v39 - 1, v38));
        if (!v39)
        {
          ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
          std::__shared_weak_count::__release_weak(v37);
        }
      }
    }
    else
    {
      *(_OWORD *)v50.i64[1] = v21;
      v57 = 0uLL;
      v50.i64[1] = v22 + 16;
    }
    v40 = v48;
    if (v48)
    {
      v41 = (unint64_t *)&v48->__shared_owners_;
      do
        v42 = __ldaxr(v41);
      while (__stlxr(v42 - 1, v41));
      if (!v42)
      {
        ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
        std::__shared_weak_count::__release_weak(v40);
      }
    }
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "HashtableLookupData");
  std::allocate_shared[abi:ne180100]<mediaplatform::SQLFunctionExpression,std::allocator<mediaplatform::SQLFunctionExpression>,std::string,std::vector<std::shared_ptr<mediaplatform::SQLExpression const>> &,void>(&v57, (__int128 *)&__p, &v50);
  *a3 = v57;
  if (v54.i8[15] < 0)
    operator delete(__p);
  __p = &v50;
  std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  v43 = v52;
  if (v52)
  {
    v44 = (unint64_t *)&v52->__shared_owners_;
    do
      v45 = __ldaxr(v44);
    while (__stlxr(v45 - 1, v44));
    if (!v45)
    {
      ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
      std::__shared_weak_count::__release_weak(v43);
    }
  }
}

void sub_20A805FD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  uint64_t v25;

  if (a25 < 0)
    operator delete(__p);
  *(_QWORD *)(v25 - 112) = &a15;
  std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v25 - 112));
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)&a18);
  _Unwind_Resume(a1);
}

_QWORD *mlcore::AnyInPredicate<long long>::AnyInPredicate(_QWORD *a1, uint64_t **a2, unint64_t **a3)
{
  _BYTE v6[40];

  std::unordered_set<long long>::unordered_set<std::__wrap_iter<long long const*>>((uint64_t)v6, *a3, a3[1]);
  mlcore::AnyInPredicate<long long>::AnyInPredicate(a1, a2, (uint64_t)v6);
  std::__hash_table<mlcore::ModelPropertyBase *,std::hash<mlcore::ModelPropertyBase *>,std::equal_to<mlcore::ModelPropertyBase *>,std::allocator<mlcore::ModelPropertyBase *>>::~__hash_table((uint64_t)v6);
  return a1;
}

{
  _BYTE v6[40];

  std::unordered_set<long long>::unordered_set<std::__wrap_iter<long long const*>>((uint64_t)v6, *a3, a3[1]);
  mlcore::AnyInPredicate<long long>::AnyInPredicate(a1, a2, (uint64_t)v6);
  std::__hash_table<mlcore::ModelPropertyBase *,std::hash<mlcore::ModelPropertyBase *>,std::equal_to<mlcore::ModelPropertyBase *>,std::allocator<mlcore::ModelPropertyBase *>>::~__hash_table((uint64_t)v6);
  return a1;
}

void sub_20A8060B0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__hash_table<mlcore::ModelPropertyBase *,std::hash<mlcore::ModelPropertyBase *>,std::equal_to<mlcore::ModelPropertyBase *>,std::allocator<mlcore::ModelPropertyBase *>>::~__hash_table((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *mlcore::AnyInPredicate<long long>::AnyInPredicate(_QWORD *a1, uint64_t **a2, uint64_t a3)
{
  uint64_t *v5;
  uint64_t *v6;
  unint64_t v7;
  void *v8;
  void *v10;
  uint64_t v11;
  uint64_t v12;

  v6 = *a2;
  v5 = a2[1];
  v7 = v5 - *a2;
  v11 = 0;
  v12 = 0;
  v10 = 0;
  std::vector<mlcore::ModelPropertyBase *>::__init_with_size[abi:ne180100]<std::__wrap_iter<mlcore::ModelProperty<long long> * const*>,std::__wrap_iter<mlcore::ModelProperty<long long> * const*>>((char *)&v10, v6, v5, v7);
  *a1 = off_24C3399E0;
  a1[2] = 0;
  a1[3] = 0;
  a1[1] = 0;
  v8 = v10;
  std::vector<mlcore::ModelPropertyBase *>::__init_with_size[abi:ne180100]<mlcore::ModelPropertyBase **,mlcore::ModelPropertyBase **>(a1 + 1, v10, v11, (v11 - (uint64_t)v10) >> 3);
  if (v8)
    operator delete(v8);
  *a1 = &unk_24C337410;
  mlcore::SharedObject<std::unordered_set<long long>,int>::create<std::unordered_set<long long> const&>((uint64_t)(a1 + 4), a3);
  return a1;
}

{
  return __ZN6mlcore14AnyInPredicateIxEC2ERKNSt3__16vectorIPNS_13ModelPropertyIxEENS2_9allocatorIS6_EEEERKNS2_13unordered_setIxNS2_4hashIxEENS2_8equal_toIxEENS7_IxEEEE(a1, a2, a3);
}

void sub_20A80616C(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  uint64_t v2;
  void *v4;

  *v1 = v2;
  v4 = (void *)v1[1];
  if (v4)
  {
    v1[2] = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<mlcore::ModelPropertyBase *>::__init_with_size[abi:ne180100]<std::__wrap_iter<mlcore::ModelProperty<long long> * const*>,std::__wrap_iter<mlcore::ModelProperty<long long> * const*>>(char *result, uint64_t *a2, uint64_t *a3, unint64_t a4)
{
  char *v6;
  _QWORD *v7;
  uint64_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<mlcore::ModelPropertyBase *>::__vallocate[abi:ne180100](result, a4);
    v7 = (_QWORD *)*((_QWORD *)v6 + 1);
    while (a2 != a3)
    {
      v8 = *a2++;
      *v7++ = v8;
    }
    *((_QWORD *)v6 + 1) = v7;
  }
  return result;
}

void sub_20A8061F0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void mlcore::SharedObject<std::unordered_set<long long>,int>::create<std::unordered_set<long long> const&>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  unsigned __int8 v5;
  int v6;
  uint64_t v7;
  _QWORD *i;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  _QWORD *v11;
  _QWORD *v12;
  unint64_t v13;
  uint8x8_t v14;
  void **v15;
  void *j;
  unint64_t v17;
  _QWORD *v18;
  float v19;
  float v20;
  _BOOL8 v21;
  unint64_t v22;
  unint64_t v23;
  int8x8_t prime;
  void *v25;
  void *v26;
  uint64_t v27;
  _QWORD *v28;
  unint64_t v29;
  uint8x8_t v30;
  unint64_t v31;
  uint8x8_t v32;
  uint64_t v33;
  _QWORD *v34;
  unint64_t v35;
  _QWORD *v36;
  _QWORD *v37;
  unint64_t v38;
  unint64_t *p_shared_weak_owners;
  unint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t v42;
  unint64_t v43;
  void *v44;
  uint64_t v45;
  std::mutex *v46;

  v46 = (std::mutex *)mlcore::SharedObject<std::unordered_set<long long>,int>::_mutex();
  std::mutex::lock(v46);
  if ((v5 & 1) == 0
  {
    mlcore::SharedObject<std::unordered_set<long long>,int>::_nextToken(void)::token = operator new();
  }
  v6 = (*(_DWORD *)mlcore::SharedObject<std::unordered_set<long long>,int>::_nextToken(void)::token)++;
  v7 = operator new();
  *(_OWORD *)v7 = 0u;
  *(_OWORD *)(v7 + 16) = 0u;
  *(_DWORD *)(v7 + 32) = *(_DWORD *)(a2 + 32);
  std::__hash_table<std::__hash_value_type<mlcore::ModelProperty<std::string> *,std::string>,std::__unordered_map_hasher<mlcore::ModelProperty<std::string> *,std::__hash_value_type<mlcore::ModelProperty<std::string> *,std::string>,std::hash<mlcore::ModelProperty<std::string> *>,std::equal_to<mlcore::ModelProperty<std::string> *>,true>,std::__unordered_map_equal<mlcore::ModelProperty<std::string> *,std::__hash_value_type<mlcore::ModelProperty<std::string> *,std::string>,std::equal_to<mlcore::ModelProperty<std::string> *>,std::hash<mlcore::ModelProperty<std::string> *>,true>,std::allocator<std::__hash_value_type<mlcore::ModelProperty<std::string> *,std::string>>>::__rehash<true>(v7, *(_QWORD *)(a2 + 8));
  for (i = *(_QWORD **)(a2 + 16); i; i = (_QWORD *)*i)
    std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::__emplace_unique_key_args<long long,long long const&>(v7, i[2], i[2]);
  v45 = a1;
  v9 = (std::__shared_weak_count *)operator new();
  v9->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v9->__shared_owners_;
  v9->__vftable = (std::__shared_weak_count_vtbl *)&off_24C33D8D0;
  v9->__shared_weak_owners_ = 0;
  v9[1].__vftable = (std::__shared_weak_count_vtbl *)v7;
  LODWORD(v9[1].__shared_owners_) = v6;
  v11 = (_QWORD *)mlcore::SharedObject<std::unordered_set<long long>,int>::_objects();
  v12 = v11;
  v13 = v11[1];
  if (v13)
  {
    v14 = (uint8x8_t)vcnt_s8((int8x8_t)v13);
    v14.i16[0] = vaddlv_u8(v14);
    if (v14.u32[0] > 1uLL)
    {
      v2 = v6;
      if (v13 <= v6)
        v2 = v6 % v13;
    }
    else
    {
      v2 = (v13 - 1) & v6;
    }
    v15 = *(void ***)(*v11 + 8 * v2);
    if (v15)
    {
      for (j = *v15; j; j = *(void **)j)
      {
        v17 = *((_QWORD *)j + 1);
        if (v17 == v6)
        {
          if (*((_DWORD *)j + 4) == v6)
            goto LABEL_77;
        }
        else
        {
          if (v14.u32[0] > 1uLL)
          {
            if (v17 >= v13)
              v17 %= v13;
          }
          else
          {
            v17 &= v13 - 1;
          }
          if (v17 != v2)
            break;
        }
      }
    }
  }
  j = operator new(0x28uLL);
  v18 = v12 + 2;
  *(_QWORD *)j = 0;
  *((_QWORD *)j + 1) = v6;
  *((_DWORD *)j + 4) = v6;
  *((_QWORD *)j + 3) = 0;
  *((_QWORD *)j + 4) = 0;
  v19 = (float)(unint64_t)(v12[3] + 1);
  v20 = *((float *)v12 + 8);
  if (!v13 || (float)(v20 * (float)v13) < v19)
  {
    v21 = 1;
    if (v13 >= 3)
      v21 = (v13 & (v13 - 1)) != 0;
    v22 = v21 | (2 * v13);
    v23 = vcvtps_u32_f32(v19 / v20);
    if (v22 <= v23)
      prime = (int8x8_t)v23;
    else
      prime = (int8x8_t)v22;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
    }
    v13 = v12[1];
    if (*(_QWORD *)&prime > v13)
      goto LABEL_33;
    if (*(_QWORD *)&prime < v13)
    {
      v31 = vcvtps_u32_f32((float)(unint64_t)v12[3] / *((float *)v12 + 8));
      if (v13 < 3 || (v32 = (uint8x8_t)vcnt_s8((int8x8_t)v13), v32.i16[0] = vaddlv_u8(v32), v32.u32[0] > 1uLL))
      {
        v31 = std::__next_prime(v31);
      }
      else
      {
        v33 = 1 << -(char)__clz(v31 - 1);
        if (v31 >= 2)
          v31 = v33;
      }
      if (*(_QWORD *)&prime <= v31)
        prime = (int8x8_t)v31;
      if (*(_QWORD *)&prime >= v13)
      {
        v13 = v12[1];
      }
      else
      {
        if (prime)
        {
LABEL_33:
          if (*(_QWORD *)&prime >> 61)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v25 = operator new(8 * *(_QWORD *)&prime);
          v26 = (void *)*v12;
          *v12 = v25;
          if (v26)
            operator delete(v26);
          v27 = 0;
          v12[1] = prime;
          do
            *(_QWORD *)(*v12 + 8 * v27++) = 0;
          while (*(_QWORD *)&prime != v27);
          v28 = (_QWORD *)*v18;
          if (*v18)
          {
            v29 = v28[1];
            v30 = (uint8x8_t)vcnt_s8(prime);
            v30.i16[0] = vaddlv_u8(v30);
            if (v30.u32[0] > 1uLL)
            {
              if (v29 >= *(_QWORD *)&prime)
                v29 %= *(_QWORD *)&prime;
            }
            else
            {
              v29 &= *(_QWORD *)&prime - 1;
            }
            *(_QWORD *)(*v12 + 8 * v29) = v18;
            v34 = (_QWORD *)*v28;
            if (*v28)
            {
              do
              {
                v35 = v34[1];
                if (v30.u32[0] > 1uLL)
                {
                  if (v35 >= *(_QWORD *)&prime)
                    v35 %= *(_QWORD *)&prime;
                }
                else
                {
                  v35 &= *(_QWORD *)&prime - 1;
                }
                if (v35 != v29)
                {
                  if (!*(_QWORD *)(*v12 + 8 * v35))
                  {
                    *(_QWORD *)(*v12 + 8 * v35) = v28;
                    goto LABEL_58;
                  }
                  *v28 = *v34;
                  *v34 = **(_QWORD **)(*v12 + 8 * v35);
                  **(_QWORD **)(*v12 + 8 * v35) = v34;
                  v34 = v28;
                }
                v35 = v29;
LABEL_58:
                v28 = v34;
                v34 = (_QWORD *)*v34;
                v29 = v35;
              }
              while (v34);
            }
          }
          v13 = (unint64_t)prime;
          goto LABEL_62;
        }
        v44 = (void *)*v12;
        *v12 = 0;
        if (v44)
          operator delete(v44);
        v13 = 0;
        v12[1] = 0;
      }
    }
LABEL_62:
    if ((v13 & (v13 - 1)) != 0)
    {
      if (v13 <= v6)
        v2 = v6 % v13;
      else
        v2 = v6;
    }
    else
    {
      v2 = (v13 - 1) & v6;
    }
  }
  v36 = (_QWORD *)*v12;
  v37 = *(_QWORD **)(*v12 + 8 * v2);
  if (v37)
  {
    *(_QWORD *)j = *v37;
LABEL_75:
    *v37 = j;
    goto LABEL_76;
  }
  *(_QWORD *)j = *v18;
  *v18 = j;
  v36[v2] = v18;
  if (*(_QWORD *)j)
  {
    v38 = *(_QWORD *)(*(_QWORD *)j + 8);
    if ((v13 & (v13 - 1)) != 0)
    {
      if (v38 >= v13)
        v38 %= v13;
    }
    else
    {
      v38 &= v13 - 1;
    }
    v37 = (_QWORD *)(*v12 + 8 * v38);
    goto LABEL_75;
  }
LABEL_76:
  ++v12[3];
LABEL_77:
  p_shared_weak_owners = (unint64_t *)&v9->__shared_weak_owners_;
  do
    v40 = __ldxr(p_shared_weak_owners);
  while (__stxr(v40 + 1, p_shared_weak_owners));
  v41 = (std::__shared_weak_count *)*((_QWORD *)j + 4);
  *((_QWORD *)j + 3) = v7;
  *((_QWORD *)j + 4) = v9;
  if (v41)
    std::__shared_weak_count::__release_weak(v41);
  *(_DWORD *)v45 = v6;
  *(_QWORD *)(v45 + 8) = v7;
  *(_QWORD *)(v45 + 16) = v9;
  do
    v42 = __ldxr(p_shared_owners);
  while (__stxr(v42 + 1, p_shared_owners));
  do
    v43 = __ldaxr(p_shared_owners);
  while (__stlxr(v43 - 1, p_shared_owners));
  if (!v43)
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
  std::mutex::unlock(v46);
}

void sub_20A80676C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::mutex *a11, char a12, uint64_t a13, int a14, char a15)
{
  __break(1u);
}

void sub_20A8067B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, std::mutex *a11)
{
  __cxa_end_catch();
  std::mutex::unlock(a11);
  _Unwind_Resume(a1);
}

void sub_20A8067C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, std::mutex *a11)
{
  std::mutex::unlock(a11);
  _Unwind_Resume(a1);
}

void sub_20A8067DC()
{
  uint64_t v0;
  uint64_t v1;

  v1 = std::__hash_table<mlcore::ModelPropertyBase *,std::hash<mlcore::ModelPropertyBase *>,std::equal_to<mlcore::ModelPropertyBase *>,std::allocator<mlcore::ModelPropertyBase *>>::~__hash_table(v0);
  MEMORY[0x20BD27AFC](v1, 0x10A0C408EF24B1CLL);
  JUMPOUT(0x20A8067FCLL);
}

uint64_t mlcore::SharedObject<std::unordered_set<long long>,int>::_mutex()
{
  unsigned __int8 v0;
  uint64_t v2;

  if ((v0 & 1) == 0
  {
    v2 = operator new();
    *(_QWORD *)v2 = 850045863;
    *(_OWORD *)(v2 + 8) = 0u;
    *(_OWORD *)(v2 + 24) = 0u;
    *(_OWORD *)(v2 + 40) = 0u;
    *(_QWORD *)(v2 + 56) = 0;
    mlcore::SharedObject<std::unordered_set<long long>,int>::_mutex(void)::mutex = v2;
  }
  return mlcore::SharedObject<std::unordered_set<long long>,int>::_mutex(void)::mutex;
}

void sub_20A806898(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t mlcore::SharedObject<std::unordered_set<long long>,int>::_objects()
{
  unsigned __int8 v0;
  uint64_t v2;

  if ((v0 & 1) == 0
  {
    v2 = operator new();
    *(_OWORD *)v2 = 0u;
    *(_OWORD *)(v2 + 16) = 0u;
    *(_DWORD *)(v2 + 32) = 1065353216;
    mlcore::SharedObject<std::unordered_set<long long>,int>::_objects(void)::objects = v2;
  }
  return mlcore::SharedObject<std::unordered_set<long long>,int>::_objects(void)::objects;
}

void sub_20A80692C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<int,std::weak_ptr<std::unordered_set<long long>>>,void *>>>::operator()[abi:ne180100](char a1, _QWORD *__p)
{
  std::__shared_weak_count *v3;

  if (a1)
  {
    v3 = (std::__shared_weak_count *)__p[4];
    if (v3)
      std::__shared_weak_count::__release_weak(v3);
  }
  else if (!__p)
  {
    return;
  }
  operator delete(__p);
}

void mlcore::SharedObject<std::unordered_set<long long>,int>::create<std::unordered_set<long long> const&>(std::unordered_set<long long> const&)::{lambda(std::unordered_set<long long>*)#1}::operator()(int *a1, uint64_t a2)
{
  std::mutex *v4;
  _QWORD *v5;
  uint64_t v6;

  v4 = (std::mutex *)mlcore::SharedObject<std::unordered_set<long long>,int>::_mutex();
  std::mutex::lock(v4);
  v5 = (_QWORD *)mlcore::SharedObject<std::unordered_set<long long>,int>::_objects();
  std::__hash_table<std::__hash_value_type<int,std::weak_ptr<std::unordered_set<long long>>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::weak_ptr<std::unordered_set<long long>>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::weak_ptr<std::unordered_set<long long>>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::weak_ptr<std::unordered_set<long long>>>>>::__erase_unique<int>(v5, *a1);
  if (a2)
  {
    v6 = std::__hash_table<mlcore::ModelPropertyBase *,std::hash<mlcore::ModelPropertyBase *>,std::equal_to<mlcore::ModelPropertyBase *>,std::allocator<mlcore::ModelPropertyBase *>>::~__hash_table(a2);
    MEMORY[0x20BD27AFC](v6, 0x10A0C408EF24B1CLL);
  }
  std::mutex::unlock(v4);
}

void sub_20A8069F0(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<int,std::weak_ptr<std::unordered_set<long long>>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::weak_ptr<std::unordered_set<long long>>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::weak_ptr<std::unordered_set<long long>>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::weak_ptr<std::unordered_set<long long>>>>>::__erase_unique<int>(_QWORD *a1, int a2)
{
  uint64_t *v3;
  int8x8_t v4;
  unint64_t v5;
  uint8x8_t v6;
  uint64_t *v7;
  uint64_t *v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;

  v3 = std::__hash_table<std::__hash_value_type<int,std::weak_ptr<std::unordered_set<long long>>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::weak_ptr<std::unordered_set<long long>>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::weak_ptr<std::unordered_set<long long>>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::weak_ptr<std::unordered_set<long long>>>>>::find<int>(a1, a2);
  if (v3)
  {
    v4 = (int8x8_t)a1[1];
    v5 = v3[1];
    v6 = (uint8x8_t)vcnt_s8(v4);
    v6.i16[0] = vaddlv_u8(v6);
    if (v6.u32[0] > 1uLL)
    {
      if (v5 >= *(_QWORD *)&v4)
        v5 %= *(_QWORD *)&v4;
    }
    else
    {
      v5 &= *(_QWORD *)&v4 - 1;
    }
    v7 = *(uint64_t **)(*a1 + 8 * v5);
    do
    {
      v8 = v7;
      v7 = (uint64_t *)*v7;
    }
    while (v7 != v3);
    if (v8 == a1 + 2)
      goto LABEL_20;
    v9 = v8[1];
    if (v6.u32[0] > 1uLL)
    {
      if (v9 >= *(_QWORD *)&v4)
        v9 %= *(_QWORD *)&v4;
    }
    else
    {
      v9 &= *(_QWORD *)&v4 - 1;
    }
    if (v9 != v5)
    {
LABEL_20:
      if (!*v3)
        goto LABEL_21;
      v10 = *(_QWORD *)(*v3 + 8);
      if (v6.u32[0] > 1uLL)
      {
        if (v10 >= *(_QWORD *)&v4)
          v10 %= *(_QWORD *)&v4;
      }
      else
      {
        v10 &= *(_QWORD *)&v4 - 1;
      }
      if (v10 != v5)
LABEL_21:
        *(_QWORD *)(*a1 + 8 * v5) = 0;
    }
    v11 = *v3;
    if (*v3)
    {
      v12 = *(_QWORD *)(v11 + 8);
      if (v6.u32[0] > 1uLL)
      {
        if (v12 >= *(_QWORD *)&v4)
          v12 %= *(_QWORD *)&v4;
      }
      else
      {
        v12 &= *(_QWORD *)&v4 - 1;
      }
      if (v12 != v5)
      {
        *(_QWORD *)(*a1 + 8 * v12) = v8;
        v11 = *v3;
      }
    }
    *v8 = v11;
    *v3 = 0;
    --a1[3];
    std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<int,std::weak_ptr<std::unordered_set<long long>>>,void *>>>::operator()[abi:ne180100](1, v3);
  }
}

uint64_t *std::__hash_table<std::__hash_value_type<int,std::weak_ptr<std::unordered_set<long long>>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::weak_ptr<std::unordered_set<long long>>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::weak_ptr<std::unordered_set<long long>>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::weak_ptr<std::unordered_set<long long>>>>>::find<int>(_QWORD *a1, int a2)
{
  unint64_t v2;
  uint8x8_t v3;
  unint64_t v4;
  uint64_t **v5;
  uint64_t *result;
  unint64_t v7;

  v2 = a1[1];
  if (!v2)
    return 0;
  v3 = (uint8x8_t)vcnt_s8((int8x8_t)v2);
  v3.i16[0] = vaddlv_u8(v3);
  if (v3.u32[0] > 1uLL)
  {
    v4 = a2;
    if (v2 <= a2)
      v4 = a2 % v2;
  }
  else
  {
    v4 = (v2 - 1) & a2;
  }
  v5 = *(uint64_t ***)(*a1 + 8 * v4);
  if (!v5)
    return 0;
  for (result = *v5; result; result = (uint64_t *)*result)
  {
    v7 = result[1];
    if (v7 == a2)
    {
      if (*((_DWORD *)result + 4) == a2)
        return result;
    }
    else
    {
      if (v3.u32[0] > 1uLL)
      {
        if (v7 >= v2)
          v7 %= v2;
      }
      else
      {
        v7 &= v2 - 1;
      }
      if (v7 != v4)
        return 0;
    }
  }
  return result;
}

void std::__shared_ptr_pointer<std::unordered_set<long long> *,mlcore::SharedObject<std::unordered_set<long long>,int> mlcore::SharedObject<std::unordered_set<long long>,int>::create<std::unordered_set<long long> const&>(std::unordered_set<long long> const&)::{lambda(std::unordered_set<long long> *)#1},std::allocator<std::unordered_set<long long>>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x20BD27AFCLL);
}

void std::__shared_ptr_pointer<std::unordered_set<long long> *,mlcore::SharedObject<std::unordered_set<long long>,int> mlcore::SharedObject<std::unordered_set<long long>,int>::create<std::unordered_set<long long> const&>(std::unordered_set<long long> const&)::{lambda(std::unordered_set<long long> *)#1},std::allocator<std::unordered_set<long long>>>::__on_zero_shared(uint64_t a1)
{
  uint64_t v2;
  std::mutex *v3;
  _QWORD *v4;
  uint64_t v5;

  v2 = *(_QWORD *)(a1 + 24);
  v3 = (std::mutex *)mlcore::SharedObject<std::unordered_set<long long>,int>::_mutex();
  std::mutex::lock(v3);
  v4 = (_QWORD *)mlcore::SharedObject<std::unordered_set<long long>,int>::_objects();
  std::__hash_table<std::__hash_value_type<int,std::weak_ptr<std::unordered_set<long long>>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::weak_ptr<std::unordered_set<long long>>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::weak_ptr<std::unordered_set<long long>>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::weak_ptr<std::unordered_set<long long>>>>>::__erase_unique<int>(v4, *(_DWORD *)(a1 + 32));
  if (v2)
  {
    v5 = std::__hash_table<mlcore::ModelPropertyBase *,std::hash<mlcore::ModelPropertyBase *>,std::equal_to<mlcore::ModelPropertyBase *>,std::allocator<mlcore::ModelPropertyBase *>>::~__hash_table(v2);
    MEMORY[0x20BD27AFC](v5, 0x10A0C408EF24B1CLL);
  }
  std::mutex::unlock(v3);
}

void sub_20A806CA0(void *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  __clang_call_terminate(a1);
}

uint64_t std::__shared_ptr_pointer<std::unordered_set<long long> *,mlcore::SharedObject<std::unordered_set<long long>,int> mlcore::SharedObject<std::unordered_set<long long>,int>::create<std::unordered_set<long long> const&>(std::unordered_set<long long> const&)::{lambda(std::unordered_set<long long> *)#1},std::allocator<std::unordered_set<long long>>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN6mlcore12SharedObjectINSt3__113unordered_setIxNS1_4hashIxEENS1_8equal_toIxEENS1_9allocatorIxEEEEiE6createIJRKS9_EEESA_DpOT_EUlPS9_E_"))
  {
    return a1 + 32;
  }
  else
  {
    return 0;
  }
}

void sub_20A806D48(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__hash_table<mlcore::ModelPropertyBase *,std::hash<mlcore::ModelPropertyBase *>,std::equal_to<mlcore::ModelPropertyBase *>,std::allocator<mlcore::ModelPropertyBase *>>::~__hash_table((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *mlcore::AnyInPredicateBase::AnyInPredicateBase(_QWORD *a1, uint64_t a2)
{
  *a1 = off_24C3399E0;
  a1[2] = 0;
  a1[3] = 0;
  a1[1] = 0;
  std::vector<mlcore::ModelPropertyBase *>::__init_with_size[abi:ne180100]<mlcore::ModelPropertyBase **,mlcore::ModelPropertyBase **>(a1 + 1, *(const void **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3);
  return a1;
}

uint64_t mlcore::AnyInPredicate<long long>::values(uint64_t a1)
{
  return *(_QWORD *)(a1 + 40);
}

uint64_t mlcore::AnyInPredicate<long long>::AnyInPredicate(uint64_t a1, uint64_t **a2, uint64_t a3)
{
  uint64_t *v5;
  uint64_t *v6;
  unint64_t v7;
  void *v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  void *v13;
  uint64_t v14;
  uint64_t v15;

  v6 = *a2;
  v5 = a2[1];
  v7 = v5 - *a2;
  v14 = 0;
  v15 = 0;
  v13 = 0;
  std::vector<mlcore::ModelPropertyBase *>::__init_with_size[abi:ne180100]<std::__wrap_iter<mlcore::ModelProperty<long long> * const*>,std::__wrap_iter<mlcore::ModelProperty<long long> * const*>>((char *)&v13, v6, v5, v7);
  *(_QWORD *)a1 = off_24C3399E0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  v8 = v13;
  std::vector<mlcore::ModelPropertyBase *>::__init_with_size[abi:ne180100]<mlcore::ModelPropertyBase **,mlcore::ModelPropertyBase **>((_QWORD *)(a1 + 8), v13, v14, (v14 - (uint64_t)v13) >> 3);
  if (v8)
    operator delete(v8);
  *(_QWORD *)a1 = &unk_24C337410;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)a3;
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a3 + 8);
  v9 = *(_QWORD *)(a3 + 16);
  *(_QWORD *)(a1 + 48) = v9;
  if (v9)
  {
    v10 = (unint64_t *)(v9 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  return a1;
}

{
  return __ZN6mlcore14AnyInPredicateIxEC2ERKNSt3__16vectorIPNS_13ModelPropertyIxEENS2_9allocatorIS6_EEEENS_12SharedObjectINS2_13unordered_setIxNS2_4hashIxEENS2_8equal_toIxEENS7_IxEEEEiEE(a1, a2, a3);
}

void sub_20A806E7C(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

_QWORD *mlcore::AnyInPredicate<long long>::_lookupFunctionName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "HashtableLookupInt64");
}

_QWORD *mlcore::AnyInPredicate<std::string>::AnyInPredicate(_QWORD *a1, uint64_t **a2, unsigned __int8 **a3)
{
  void *v5;
  void *__p[5];

  std::unordered_set<std::string>::unordered_set<std::__wrap_iter<std::string const*>>((uint64_t)__p, *a3, a3[1]);
  mlcore::AnyInPredicate<std::string>::AnyInPredicate(a1, a2, (uint64_t)__p);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__deallocate_node((void **)__p[2]);
  v5 = __p[0];
  __p[0] = 0;
  if (v5)
    operator delete(v5);
  return a1;
}

{
  void *v5;
  void *__p[5];

  std::unordered_set<std::string>::unordered_set<std::__wrap_iter<std::string const*>>((uint64_t)__p, *a3, a3[1]);
  mlcore::AnyInPredicate<std::string>::AnyInPredicate(a1, a2, (uint64_t)__p);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__deallocate_node((void **)__p[2]);
  v5 = __p[0];
  __p[0] = 0;
  if (v5)
    operator delete(v5);
  return a1;
}

void sub_20A806F08(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::unordered_set<std::string>::unordered_set<std::__wrap_iter<std::string const*>>(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  unsigned __int8 *v5;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a2 != a3)
  {
    v5 = a2;
    do
    {
      std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>(a1, v5, (uint64_t)v5);
      v5 += 24;
    }
    while (v5 != a3);
  }
  return a1;
}

void sub_20A806F80(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

_QWORD *mlcore::AnyInPredicate<std::string>::AnyInPredicate(_QWORD *a1, uint64_t **a2, uint64_t a3)
{
  uint64_t *v5;
  uint64_t *v6;
  unint64_t v7;
  void *v8;
  void *v10;
  uint64_t v11;
  uint64_t v12;

  v6 = *a2;
  v5 = a2[1];
  v7 = v5 - *a2;
  v11 = 0;
  v12 = 0;
  v10 = 0;
  std::vector<mlcore::ModelPropertyBase *>::__init_with_size[abi:ne180100]<std::__wrap_iter<mlcore::ModelProperty<std::string> * const*>,std::__wrap_iter<mlcore::ModelProperty<std::string> * const*>>((char *)&v10, v6, v5, v7);
  *a1 = off_24C3399E0;
  a1[2] = 0;
  a1[3] = 0;
  a1[1] = 0;
  v8 = v10;
  std::vector<mlcore::ModelPropertyBase *>::__init_with_size[abi:ne180100]<mlcore::ModelPropertyBase **,mlcore::ModelPropertyBase **>(a1 + 1, v10, v11, (v11 - (uint64_t)v10) >> 3);
  if (v8)
    operator delete(v8);
  *a1 = &unk_24C337308;
  mlcore::SharedObject<std::unordered_set<std::string>,int>::create<std::unordered_set<std::string> const&>((uint64_t)(a1 + 4), a3);
  return a1;
}

{
  return __ZN6mlcore14AnyInPredicateINSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEEC2ERKNS1_6vectorIPNS_13ModelPropertyIS7_EENS5_ISC_EEEERKNS1_13unordered_setIS7_NS1_4hashIS7_EENS1_8equal_toIS7_EENS5_IS7_EEEE(a1, a2, a3);
}

void sub_20A80703C(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  uint64_t v2;
  void *v4;

  *v1 = v2;
  v4 = (void *)v1[1];
  if (v4)
  {
    v1[2] = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<mlcore::ModelPropertyBase *>::__init_with_size[abi:ne180100]<std::__wrap_iter<mlcore::ModelProperty<std::string> * const*>,std::__wrap_iter<mlcore::ModelProperty<std::string> * const*>>(char *result, uint64_t *a2, uint64_t *a3, unint64_t a4)
{
  char *v6;
  _QWORD *v7;
  uint64_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<mlcore::ModelPropertyBase *>::__vallocate[abi:ne180100](result, a4);
    v7 = (_QWORD *)*((_QWORD *)v6 + 1);
    while (a2 != a3)
    {
      v8 = *a2++;
      *v7++ = v8;
    }
    *((_QWORD *)v6 + 1) = v7;
  }
  return result;
}

void sub_20A8070C0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void mlcore::SharedObject<std::unordered_set<std::string>,int>::create<std::unordered_set<std::string> const&>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  unsigned __int8 v5;
  int v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  _QWORD *v10;
  _QWORD *v11;
  unint64_t v12;
  uint8x8_t v13;
  void **v14;
  void *i;
  unint64_t v16;
  _QWORD *v17;
  float v18;
  float v19;
  _BOOL8 v20;
  unint64_t v21;
  unint64_t v22;
  int8x8_t prime;
  void *v24;
  void *v25;
  uint64_t v26;
  _QWORD *v27;
  unint64_t v28;
  uint8x8_t v29;
  unint64_t v30;
  uint8x8_t v31;
  uint64_t v32;
  _QWORD *v33;
  unint64_t v34;
  _QWORD *v35;
  _QWORD *v36;
  unint64_t v37;
  unint64_t *p_shared_weak_owners;
  unint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t v41;
  unint64_t v42;
  void *v43;
  uint64_t v44;
  std::mutex *v45;

  v45 = (std::mutex *)mlcore::SharedObject<std::unordered_set<std::string>,int>::_mutex();
  std::mutex::lock(v45);
  if ((v5 & 1) == 0
  {
    mlcore::SharedObject<std::unordered_set<std::string>,int>::_nextToken(void)::token = operator new();
  }
  v6 = (*(_DWORD *)mlcore::SharedObject<std::unordered_set<std::string>,int>::_nextToken(void)::token)++;
  v7 = operator new();
  std::unordered_set<std::string>::unordered_set(v7, a2);
  v44 = a1;
  v8 = (std::__shared_weak_count *)operator new();
  v8->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v8->__shared_owners_;
  v8->__vftable = (std::__shared_weak_count_vtbl *)&off_24C33D828;
  v8->__shared_weak_owners_ = 0;
  v8[1].__vftable = (std::__shared_weak_count_vtbl *)v7;
  LODWORD(v8[1].__shared_owners_) = v6;
  v10 = (_QWORD *)mlcore::SharedObject<std::unordered_set<std::string>,int>::_objects();
  v11 = v10;
  v12 = v10[1];
  if (v12)
  {
    v13 = (uint8x8_t)vcnt_s8((int8x8_t)v12);
    v13.i16[0] = vaddlv_u8(v13);
    if (v13.u32[0] > 1uLL)
    {
      v2 = v6;
      if (v12 <= v6)
        v2 = v6 % v12;
    }
    else
    {
      v2 = (v12 - 1) & v6;
    }
    v14 = *(void ***)(*v10 + 8 * v2);
    if (v14)
    {
      for (i = *v14; i; i = *(void **)i)
      {
        v16 = *((_QWORD *)i + 1);
        if (v16 == v6)
        {
          if (*((_DWORD *)i + 4) == v6)
            goto LABEL_75;
        }
        else
        {
          if (v13.u32[0] > 1uLL)
          {
            if (v16 >= v12)
              v16 %= v12;
          }
          else
          {
            v16 &= v12 - 1;
          }
          if (v16 != v2)
            break;
        }
      }
    }
  }
  i = operator new(0x28uLL);
  v17 = v11 + 2;
  *(_QWORD *)i = 0;
  *((_QWORD *)i + 1) = v6;
  *((_DWORD *)i + 4) = v6;
  *((_QWORD *)i + 3) = 0;
  *((_QWORD *)i + 4) = 0;
  v18 = (float)(unint64_t)(v11[3] + 1);
  v19 = *((float *)v11 + 8);
  if (!v12 || (float)(v19 * (float)v12) < v18)
  {
    v20 = 1;
    if (v12 >= 3)
      v20 = (v12 & (v12 - 1)) != 0;
    v21 = v20 | (2 * v12);
    v22 = vcvtps_u32_f32(v18 / v19);
    if (v21 <= v22)
      prime = (int8x8_t)v22;
    else
      prime = (int8x8_t)v21;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
    }
    v12 = v11[1];
    if (*(_QWORD *)&prime > v12)
      goto LABEL_31;
    if (*(_QWORD *)&prime < v12)
    {
      v30 = vcvtps_u32_f32((float)(unint64_t)v11[3] / *((float *)v11 + 8));
      if (v12 < 3 || (v31 = (uint8x8_t)vcnt_s8((int8x8_t)v12), v31.i16[0] = vaddlv_u8(v31), v31.u32[0] > 1uLL))
      {
        v30 = std::__next_prime(v30);
      }
      else
      {
        v32 = 1 << -(char)__clz(v30 - 1);
        if (v30 >= 2)
          v30 = v32;
      }
      if (*(_QWORD *)&prime <= v30)
        prime = (int8x8_t)v30;
      if (*(_QWORD *)&prime >= v12)
      {
        v12 = v11[1];
      }
      else
      {
        if (prime)
        {
LABEL_31:
          if (*(_QWORD *)&prime >> 61)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v24 = operator new(8 * *(_QWORD *)&prime);
          v25 = (void *)*v11;
          *v11 = v24;
          if (v25)
            operator delete(v25);
          v26 = 0;
          v11[1] = prime;
          do
            *(_QWORD *)(*v11 + 8 * v26++) = 0;
          while (*(_QWORD *)&prime != v26);
          v27 = (_QWORD *)*v17;
          if (*v17)
          {
            v28 = v27[1];
            v29 = (uint8x8_t)vcnt_s8(prime);
            v29.i16[0] = vaddlv_u8(v29);
            if (v29.u32[0] > 1uLL)
            {
              if (v28 >= *(_QWORD *)&prime)
                v28 %= *(_QWORD *)&prime;
            }
            else
            {
              v28 &= *(_QWORD *)&prime - 1;
            }
            *(_QWORD *)(*v11 + 8 * v28) = v17;
            v33 = (_QWORD *)*v27;
            if (*v27)
            {
              do
              {
                v34 = v33[1];
                if (v29.u32[0] > 1uLL)
                {
                  if (v34 >= *(_QWORD *)&prime)
                    v34 %= *(_QWORD *)&prime;
                }
                else
                {
                  v34 &= *(_QWORD *)&prime - 1;
                }
                if (v34 != v28)
                {
                  if (!*(_QWORD *)(*v11 + 8 * v34))
                  {
                    *(_QWORD *)(*v11 + 8 * v34) = v27;
                    goto LABEL_56;
                  }
                  *v27 = *v33;
                  *v33 = **(_QWORD **)(*v11 + 8 * v34);
                  **(_QWORD **)(*v11 + 8 * v34) = v33;
                  v33 = v27;
                }
                v34 = v28;
LABEL_56:
                v27 = v33;
                v33 = (_QWORD *)*v33;
                v28 = v34;
              }
              while (v33);
            }
          }
          v12 = (unint64_t)prime;
          goto LABEL_60;
        }
        v43 = (void *)*v11;
        *v11 = 0;
        if (v43)
          operator delete(v43);
        v12 = 0;
        v11[1] = 0;
      }
    }
LABEL_60:
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v12 <= v6)
        v2 = v6 % v12;
      else
        v2 = v6;
    }
    else
    {
      v2 = (v12 - 1) & v6;
    }
  }
  v35 = (_QWORD *)*v11;
  v36 = *(_QWORD **)(*v11 + 8 * v2);
  if (v36)
  {
    *(_QWORD *)i = *v36;
LABEL_73:
    *v36 = i;
    goto LABEL_74;
  }
  *(_QWORD *)i = *v17;
  *v17 = i;
  v35[v2] = v17;
  if (*(_QWORD *)i)
  {
    v37 = *(_QWORD *)(*(_QWORD *)i + 8);
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v37 >= v12)
        v37 %= v12;
    }
    else
    {
      v37 &= v12 - 1;
    }
    v36 = (_QWORD *)(*v11 + 8 * v37);
    goto LABEL_73;
  }
LABEL_74:
  ++v11[3];
LABEL_75:
  p_shared_weak_owners = (unint64_t *)&v8->__shared_weak_owners_;
  do
    v39 = __ldxr(p_shared_weak_owners);
  while (__stxr(v39 + 1, p_shared_weak_owners));
  v40 = (std::__shared_weak_count *)*((_QWORD *)i + 4);
  *((_QWORD *)i + 3) = v7;
  *((_QWORD *)i + 4) = v8;
  if (v40)
    std::__shared_weak_count::__release_weak(v40);
  *(_DWORD *)v44 = v6;
  *(_QWORD *)(v44 + 8) = v7;
  *(_QWORD *)(v44 + 16) = v8;
  do
    v41 = __ldxr(p_shared_owners);
  while (__stxr(v41 + 1, p_shared_owners));
  do
    v42 = __ldaxr(p_shared_owners);
  while (__stlxr(v42 - 1, p_shared_owners));
  if (!v42)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
  std::mutex::unlock(v45);
}

void sub_20A80760C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::mutex *a11, char a12, uint64_t a13, int a14, char a15)
{
  __break(1u);
}

void sub_20A807650()
{
  __cxa_end_catch();
  JUMPOUT(0x20A807694);
}

void sub_20A807660()
{
  uint64_t v0;

  MEMORY[0x20BD27AFC](v0, 0x10A0C408EF24B1CLL);
  JUMPOUT(0x20A807694);
}

void sub_20A807680()
{
  JUMPOUT(0x20A807694);
}

uint64_t mlcore::SharedObject<std::unordered_set<std::string>,int>::_mutex()
{
  unsigned __int8 v0;
  uint64_t v2;

  if ((v0 & 1) == 0
  {
    v2 = operator new();
    *(_QWORD *)v2 = 850045863;
    *(_OWORD *)(v2 + 8) = 0u;
    *(_OWORD *)(v2 + 24) = 0u;
    *(_OWORD *)(v2 + 40) = 0u;
    *(_QWORD *)(v2 + 56) = 0;
    mlcore::SharedObject<std::unordered_set<std::string>,int>::_mutex(void)::mutex = v2;
  }
  return mlcore::SharedObject<std::unordered_set<std::string>,int>::_mutex(void)::mutex;
}

void sub_20A807730(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t std::unordered_set<std::string>::unordered_set(uint64_t a1, uint64_t a2)
{
  unsigned __int8 *i;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  std::__hash_table<std::__hash_value_type<mlcore::ModelProperty<std::string> *,std::string>,std::__unordered_map_hasher<mlcore::ModelProperty<std::string> *,std::__hash_value_type<mlcore::ModelProperty<std::string> *,std::string>,std::hash<mlcore::ModelProperty<std::string> *>,std::equal_to<mlcore::ModelProperty<std::string> *>,true>,std::__unordered_map_equal<mlcore::ModelProperty<std::string> *,std::__hash_value_type<mlcore::ModelProperty<std::string> *,std::string>,std::equal_to<mlcore::ModelProperty<std::string> *>,std::hash<mlcore::ModelProperty<std::string> *>,true>,std::allocator<std::__hash_value_type<mlcore::ModelProperty<std::string> *,std::string>>>::__rehash<true>(a1, *(_QWORD *)(a2 + 8));
  for (i = *(unsigned __int8 **)(a2 + 16); i; i = *(unsigned __int8 **)i)
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>(a1, i + 16, (uint64_t)(i + 16));
  return a1;
}

void sub_20A8077A4(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

uint64_t mlcore::SharedObject<std::unordered_set<std::string>,int>::_objects()
{
  unsigned __int8 v0;
  uint64_t v2;

  if ((v0 & 1) == 0
  {
    v2 = operator new();
    *(_OWORD *)v2 = 0u;
    *(_OWORD *)(v2 + 16) = 0u;
    *(_DWORD *)(v2 + 32) = 1065353216;
    mlcore::SharedObject<std::unordered_set<std::string>,int>::_objects(void)::objects = v2;
  }
  return mlcore::SharedObject<std::unordered_set<std::string>,int>::_objects(void)::objects;
}

void sub_20A807838(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void mlcore::SharedObject<std::unordered_set<std::string>,int>::create<std::unordered_set<std::string> const&>(std::unordered_set<std::string> const&)::{lambda(std::unordered_set<std::string>*)#1}::operator()(int *a1, uint64_t a2)
{
  std::mutex *v4;
  _QWORD *v5;
  uint64_t v6;

  v4 = (std::mutex *)mlcore::SharedObject<std::unordered_set<std::string>,int>::_mutex();
  std::mutex::lock(v4);
  v5 = (_QWORD *)mlcore::SharedObject<std::unordered_set<std::string>,int>::_objects();
  std::__hash_table<std::__hash_value_type<int,std::weak_ptr<std::unordered_set<long long>>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::weak_ptr<std::unordered_set<long long>>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::weak_ptr<std::unordered_set<long long>>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::weak_ptr<std::unordered_set<long long>>>>>::__erase_unique<int>(v5, *a1);
  if (a2)
  {
    v6 = std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(a2);
    MEMORY[0x20BD27AFC](v6, 0x10A0C408EF24B1CLL);
  }
  std::mutex::unlock(v4);
}

void sub_20A8078B4(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<std::unordered_set<std::string> *,mlcore::SharedObject<std::unordered_set<std::string>,int> mlcore::SharedObject<std::unordered_set<std::string>,int>::create<std::unordered_set<std::string> const&>(std::unordered_set<std::string> const&)::{lambda(std::unordered_set<std::string> *)#1},std::allocator<std::unordered_set<std::string>>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x20BD27AFCLL);
}

void std::__shared_ptr_pointer<std::unordered_set<std::string> *,mlcore::SharedObject<std::unordered_set<std::string>,int> mlcore::SharedObject<std::unordered_set<std::string>,int>::create<std::unordered_set<std::string> const&>(std::unordered_set<std::string> const&)::{lambda(std::unordered_set<std::string> *)#1},std::allocator<std::unordered_set<std::string>>>::__on_zero_shared(uint64_t a1)
{
  uint64_t v2;
  std::mutex *v3;
  _QWORD *v4;
  uint64_t v5;

  v2 = *(_QWORD *)(a1 + 24);
  v3 = (std::mutex *)mlcore::SharedObject<std::unordered_set<std::string>,int>::_mutex();
  std::mutex::lock(v3);
  v4 = (_QWORD *)mlcore::SharedObject<std::unordered_set<std::string>,int>::_objects();
  std::__hash_table<std::__hash_value_type<int,std::weak_ptr<std::unordered_set<long long>>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::weak_ptr<std::unordered_set<long long>>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::weak_ptr<std::unordered_set<long long>>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::weak_ptr<std::unordered_set<long long>>>>>::__erase_unique<int>(v4, *(_DWORD *)(a1 + 32));
  if (v2)
  {
    v5 = std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v2);
    MEMORY[0x20BD27AFC](v5, 0x10A0C408EF24B1CLL);
  }
  std::mutex::unlock(v3);
}

void sub_20A807954(void *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  __clang_call_terminate(a1);
}

uint64_t std::__shared_ptr_pointer<std::unordered_set<std::string> *,mlcore::SharedObject<std::unordered_set<std::string>,int> mlcore::SharedObject<std::unordered_set<std::string>,int>::create<std::unordered_set<std::string> const&>(std::unordered_set<std::string> const&)::{lambda(std::unordered_set<std::string> *)#1},std::allocator<std::unordered_set<std::string>>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN6mlcore12SharedObjectINSt3__113unordered_setINS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEENS1_4hashIS8_EENS1_8equal_toIS8_EENS6_IS8_EEEEiE6createIJRKSE_EEESF_DpOT_EUlPSE_E_"))
  {
    return a1 + 32;
  }
  else
  {
    return 0;
  }
}

void std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  unint64_t v11;
  unsigned __int8 **v12;
  unsigned __int8 *i;
  unint64_t v14;
  _QWORD *v15;
  std::string *v16;
  float v17;
  float v18;
  _BOOL8 v19;
  unint64_t v20;
  unint64_t v21;
  size_t v22;
  uint64_t v23;
  _QWORD *v24;
  unint64_t v25;

  v7 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)a2);
  v8 = v7;
  v9 = *(_QWORD *)(a1 + 8);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    v11 = v10.u32[0];
    if (v10.u32[0] > 1uLL)
    {
      v3 = v7;
      if (v7 >= v9)
        v3 = v7 % v9;
    }
    else
    {
      v3 = (v9 - 1) & v7;
    }
    v12 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v3);
    if (v12)
    {
      for (i = *v12; i; i = *(unsigned __int8 **)i)
      {
        v14 = *((_QWORD *)i + 1);
        if (v14 == v8)
        {
          if (std::equal_to<std::string>::operator()[abi:ne180100](i + 16, a2))
            return;
        }
        else
        {
          if (v11 > 1)
          {
            if (v14 >= v9)
              v14 %= v9;
          }
          else
          {
            v14 &= v9 - 1;
          }
          if (v14 != v3)
            break;
        }
      }
    }
  }
  v15 = operator new(0x28uLL);
  *v15 = 0;
  v15[1] = v8;
  v16 = (std::string *)(v15 + 2);
  if (*(char *)(a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v16, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)&v16->__r_.__value_.__l.__data_ = *(_OWORD *)a3;
    v15[4] = *(_QWORD *)(a3 + 16);
  }
  v17 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v18 = *(float *)(a1 + 32);
  if (!v9 || (float)(v18 * (float)v9) < v17)
  {
    v19 = 1;
    if (v9 >= 3)
      v19 = (v9 & (v9 - 1)) != 0;
    v20 = v19 | (2 * v9);
    v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21)
      v22 = v21;
    else
      v22 = v20;
    std::__hash_table<std::__hash_value_type<mlcore::ModelProperty<std::string> *,std::string>,std::__unordered_map_hasher<mlcore::ModelProperty<std::string> *,std::__hash_value_type<mlcore::ModelProperty<std::string> *,std::string>,std::hash<mlcore::ModelProperty<std::string> *>,std::equal_to<mlcore::ModelProperty<std::string> *>,true>,std::__unordered_map_equal<mlcore::ModelProperty<std::string> *,std::__hash_value_type<mlcore::ModelProperty<std::string> *,std::string>,std::equal_to<mlcore::ModelProperty<std::string> *>,std::hash<mlcore::ModelProperty<std::string> *>,true>,std::allocator<std::__hash_value_type<mlcore::ModelProperty<std::string> *,std::string>>>::__rehash<true>(a1, v22);
    v9 = *(_QWORD *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9)
        v3 = v8 % v9;
      else
        v3 = v8;
    }
    else
    {
      v3 = (v9 - 1) & v8;
    }
  }
  v23 = *(_QWORD *)a1;
  v24 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v24)
  {
    *v15 = *v24;
LABEL_41:
    *v24 = v15;
    goto LABEL_42;
  }
  *v15 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v15;
  *(_QWORD *)(v23 + 8 * v3) = a1 + 16;
  if (*v15)
  {
    v25 = *(_QWORD *)(*v15 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v25 >= v9)
        v25 %= v9;
    }
    else
    {
      v25 &= v9 - 1;
    }
    v24 = (_QWORD *)(*(_QWORD *)a1 + 8 * v25);
    goto LABEL_41;
  }
LABEL_42:
  ++*(_QWORD *)(a1 + 24);
}

void sub_20A807BDC(_Unwind_Exception *a1)
{
  void **v1;

  std::__hash_node_destructor<std::allocator<std::__hash_node<std::string,void *>>>::operator()[abi:ne180100](0, v1);
  _Unwind_Resume(a1);
}

unint64_t std::__string_hash<char>::operator()[abi:ne180100](uint64_t a1)
{
  int v1;
  unint64_t v2;
  BOOL v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t result;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _QWORD *v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  unint64_t v78;
  unint64_t v79;
  unint64_t v80;
  unint64_t v81;
  int v82;
  uint64_t v83;
  unint64_t v84;
  unint64_t v85;

  v1 = *(char *)(a1 + 23);
  v2 = *(_QWORD *)(a1 + 8);
  v3 = v1 < 0;
  if (v1 >= 0)
    v4 = (uint64_t *)a1;
  else
    v4 = *(uint64_t **)a1;
  if (!v3)
    v2 = *(unsigned __int8 *)(a1 + 23);
  if (v2 > 0x20)
  {
    if (v2 > 0x40)
    {
      v34 = 0x9DDFEA08EB382D69;
      v44 = *(uint64_t *)((char *)v4 + v2 - 48);
      v43 = *(uint64_t *)((char *)v4 + v2 - 40);
      v45 = *(uint64_t *)((char *)v4 + v2 - 24);
      v47 = *(uint64_t *)((char *)v4 + v2 - 64);
      v46 = *(uint64_t *)((char *)v4 + v2 - 56);
      v48 = *(uint64_t *)((char *)v4 + v2 - 16);
      v49 = *(uint64_t *)((char *)v4 + v2 - 8);
      v50 = v46 + v48;
      v51 = 0x9DDFEA08EB382D69
          * (v45 ^ ((0x9DDFEA08EB382D69 * (v45 ^ (v44 + v2))) >> 47) ^ (0x9DDFEA08EB382D69 * (v45 ^ (v44 + v2))));
      v52 = 0x9DDFEA08EB382D69 * (v51 ^ (v51 >> 47));
      v53 = v47 + v2 + v46 + v44;
      v54 = v53 + v43;
      v55 = __ROR8__(v53, 44) + v47 + v2 + __ROR8__(v43 + v47 + v2 - 0x622015F714C7D297 * (v51 ^ (v51 >> 47)), 21);
      v56 = v46 + v48 + *(uint64_t *)((char *)v4 + v2 - 32) - 0x4B6D499041670D8DLL;
      v57 = v56 + v45 + v48;
      v58 = __ROR8__(v57, 44);
      v59 = v57 + v49;
      v60 = v58 + v56 + __ROR8__(v56 + v43 + v49, 21);
      v62 = *v4;
      v61 = v4 + 4;
      v63 = v62 - 0x4B6D499041670D8DLL * v43;
      v64 = -(uint64_t)((v2 - 1) & 0xFFFFFFFFFFFFFFC0);
      do
      {
        v65 = *(v61 - 3);
        v66 = v63 + v54 + v50 + v65;
        v67 = v61[2];
        v68 = v61[3];
        v69 = v61[1];
        v50 = v69 + v54 - 0x4B6D499041670D8DLL * __ROR8__(v50 + v55 + v67, 42);
        v70 = v52 + v59;
        v71 = *(v61 - 2);
        v72 = *(v61 - 1);
        v73 = *(v61 - 4) - 0x4B6D499041670D8DLL * v55;
        v74 = v73 + v59 + v72;
        v75 = v73 + v65 + v71;
        v54 = v75 + v72;
        v76 = __ROR8__(v75, 44) + v73;
        v77 = (0xB492B66FBE98F273 * __ROR8__(v66, 37)) ^ v60;
        v63 = 0xB492B66FBE98F273 * __ROR8__(v70, 33);
        v55 = v76 + __ROR8__(v74 + v77, 21);
        v78 = v63 + v60 + *v61;
        v59 = v78 + v69 + v67 + v68;
        v60 = __ROR8__(v78 + v69 + v67, 44) + v78 + __ROR8__(v50 + v71 + v78 + v68, 21);
        v61 += 8;
        v52 = v77;
        v64 += 64;
      }
      while (v64);
      v79 = 0x9DDFEA08EB382D69
          * (v59 ^ ((0x9DDFEA08EB382D69 * (v59 ^ v54)) >> 47) ^ (0x9DDFEA08EB382D69 * (v59 ^ v54)));
      v80 = v63
          - 0x622015F714C7D297
          * ((0x9DDFEA08EB382D69
            * (v60 ^ ((0x9DDFEA08EB382D69 * (v60 ^ v55)) >> 47) ^ (0x9DDFEA08EB382D69 * (v60 ^ v55)))) ^ ((0x9DDFEA08EB382D69 * (v60 ^ ((0x9DDFEA08EB382D69 * (v60 ^ v55)) >> 47) ^ (0x9DDFEA08EB382D69 * (v60 ^ v55)))) >> 47));
      v81 = 0x9DDFEA08EB382D69
          * (v80 ^ (v77 - 0x4B6D499041670D8DLL * (v50 ^ (v50 >> 47)) - 0x622015F714C7D297 * (v79 ^ (v79 >> 47))));
      v35 = 0x9DDFEA08EB382D69 * (v80 ^ (v81 >> 47) ^ v81);
    }
    else
    {
      v9 = (char *)v4 + v2;
      v10 = *(uint64_t *)((char *)v4 + v2 - 16);
      v11 = *(uint64_t *)((char *)v4 + v2 - 8);
      v12 = v4[1];
      v13 = *v4 - 0x3C5A37A36834CED9 * (v10 + v2);
      v16 = v4 + 2;
      v14 = v4[2];
      v15 = v16[1];
      v17 = __ROR8__(v13 + v15, 52);
      v18 = __ROR8__(v13, 37);
      v19 = v13 + v12;
      v20 = __ROR8__(v19, 7);
      v21 = v19 + v14;
      v22 = v20 + v18;
      v23 = *((_QWORD *)v9 - 4) + v14;
      v24 = v11 + v15;
      v25 = __ROR8__(v24 + v23, 52);
      v26 = v22 + v17;
      v27 = __ROR8__(v23, 37);
      v28 = *((_QWORD *)v9 - 3) + v23;
      v29 = __ROR8__(v28, 7);
      v30 = v26 + __ROR8__(v21, 31);
      v31 = v28 + v10;
      v32 = v31 + v24;
      v33 = v21 + v15 + v27 + v29 + v25 + __ROR8__(v31, 31);
      v34 = 0x9AE16A3B2F90404FLL;
      v35 = v30
          - 0x3C5A37A36834CED9
          * ((0xC3A5C85C97CB3127 * (v32 + v30) - 0x651E95C4D06FBFB1 * v33) ^ ((0xC3A5C85C97CB3127 * (v32 + v30)
                                                                                 - 0x651E95C4D06FBFB1 * v33) >> 47));
    }
    return (v35 ^ (v35 >> 47)) * v34;
  }
  else
  {
    if (v2 > 0x10)
    {
      v36 = v4[1];
      v37 = 0xB492B66FBE98F273 * *v4;
      v38 = 0x9AE16A3B2F90404FLL * *(uint64_t *)((char *)v4 + v2 - 8);
      v39 = __ROR8__(v38, 30) + __ROR8__(v37 - v36, 43);
      v40 = v37 + v2 + __ROR8__(v36 ^ 0xC949D7C7509E6557, 20) - v38;
      v41 = 0x9DDFEA08EB382D69 * (v40 ^ (v39 - 0x3C5A37A36834CED9 * *(uint64_t *)((char *)v4 + v2 - 16)));
      v42 = v40 ^ (v41 >> 47) ^ v41;
      return 0x9DDFEA08EB382D69 * ((0x9DDFEA08EB382D69 * v42) ^ ((0x9DDFEA08EB382D69 * v42) >> 47));
    }
    if (v2 >= 9)
    {
      v5 = *v4;
      v6 = *(uint64_t *)((char *)v4 + v2 - 8);
      v7 = __ROR8__(v6 + v2, v2);
      return (0x9DDFEA08EB382D69
            * ((0x9DDFEA08EB382D69
              * (v7 ^ ((0x9DDFEA08EB382D69 * (v7 ^ v5)) >> 47) ^ (0x9DDFEA08EB382D69 * (v7 ^ v5)))) ^ ((0x9DDFEA08EB382D69 * (v7 ^ ((0x9DDFEA08EB382D69 * (v7 ^ v5)) >> 47) ^ (0x9DDFEA08EB382D69 * (v7 ^ v5)))) >> 47))) ^ v6;
    }
    if (v2 >= 4)
    {
      v82 = *(_DWORD *)v4;
      v83 = *(unsigned int *)((char *)v4 + v2 - 4);
      v84 = 0x9DDFEA08EB382D69 * ((v2 + (8 * v82)) ^ v83);
      v42 = v83 ^ (v84 >> 47) ^ v84;
      return 0x9DDFEA08EB382D69 * ((0x9DDFEA08EB382D69 * v42) ^ ((0x9DDFEA08EB382D69 * v42) >> 47));
    }
    result = 0x9AE16A3B2F90404FLL;
    if (v2)
    {
      v85 = (0xC949D7C7509E6557 * (v2 + 4 * *((unsigned __int8 *)v4 + v2 - 1))) ^ (0x9AE16A3B2F90404FLL
                                                                                     * (*(unsigned __int8 *)v4 | ((unint64_t)*((unsigned __int8 *)v4 + (v2 >> 1)) << 8)));
      return 0x9AE16A3B2F90404FLL * (v85 ^ (v85 >> 47));
    }
  }
  return result;
}

BOOL std::equal_to<std::string>::operator()[abi:ne180100](unsigned __int8 *a1, unsigned __int8 *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  int v7;
  int v8;
  int v9;
  int v10;
  BOOL v12;
  BOOL v13;
  _BOOL8 v14;

  v2 = a1[23];
  if ((v2 & 0x80u) == 0)
    v3 = a1[23];
  else
    v3 = *((_QWORD *)a1 + 1);
  v4 = a2[23];
  v5 = (char)v4;
  if ((v4 & 0x80u) != 0)
    v4 = *((_QWORD *)a2 + 1);
  if (v3 != v4)
    return 0;
  if (v5 < 0)
    a2 = *(unsigned __int8 **)a2;
  if ((v2 & 0x80) != 0)
    return memcmp(*(const void **)a1, a2, *((_QWORD *)a1 + 1)) == 0;
  if (!a1[23])
    return 1;
  v6 = v2 - 1;
  do
  {
    v8 = *a1++;
    v7 = v8;
    v10 = *a2++;
    v9 = v10;
    v12 = v6-- != 0;
    v13 = v7 == v9;
    v14 = v7 == v9;
  }
  while (v13 && v12);
  return v14;
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::string,void *>>>::operator()[abi:ne180100](char a1, void **__p)
{
  if (a1)
  {
    if (*((char *)__p + 39) < 0)
      operator delete(__p[2]);
  }
  else if (!__p)
  {
    return;
  }
  operator delete(__p);
}

void sub_20A80819C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t mlcore::AnyInPredicate<std::string>::values(uint64_t a1)
{
  return *(_QWORD *)(a1 + 40);
}

uint64_t mlcore::AnyInPredicate<std::string>::AnyInPredicate(uint64_t a1, uint64_t **a2, uint64_t a3)
{
  uint64_t *v5;
  uint64_t *v6;
  unint64_t v7;
  void *v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  void *v13;
  uint64_t v14;
  uint64_t v15;

  v6 = *a2;
  v5 = a2[1];
  v7 = v5 - *a2;
  v14 = 0;
  v15 = 0;
  v13 = 0;
  std::vector<mlcore::ModelPropertyBase *>::__init_with_size[abi:ne180100]<std::__wrap_iter<mlcore::ModelProperty<std::string> * const*>,std::__wrap_iter<mlcore::ModelProperty<std::string> * const*>>((char *)&v13, v6, v5, v7);
  *(_QWORD *)a1 = off_24C3399E0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  v8 = v13;
  std::vector<mlcore::ModelPropertyBase *>::__init_with_size[abi:ne180100]<mlcore::ModelPropertyBase **,mlcore::ModelPropertyBase **>((_QWORD *)(a1 + 8), v13, v14, (v14 - (uint64_t)v13) >> 3);
  if (v8)
    operator delete(v8);
  *(_QWORD *)a1 = &unk_24C337308;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)a3;
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a3 + 8);
  v9 = *(_QWORD *)(a3 + 16);
  *(_QWORD *)(a1 + 48) = v9;
  if (v9)
  {
    v10 = (unint64_t *)(v9 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  return a1;
}

{
  return __ZN6mlcore14AnyInPredicateINSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEEC2ERKNS1_6vectorIPNS_13ModelPropertyIS7_EENS5_ISC_EEEENS_12SharedObjectINS1_13unordered_setIS7_NS1_4hashIS7_EENS1_8equal_toIS7_EENS5_IS7_EEEEiEE(a1, a2, a3);
}

void sub_20A808288(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

_QWORD *mlcore::AnyInPredicate<std::string>::_lookupFunctionName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "HashtableLookupString");
}

_QWORD *mlcore::AnyInPredicate<double>::AnyInPredicate(_QWORD *a1, uint64_t **a2, double **a3)
{
  _BYTE v6[40];

  std::unordered_set<double>::unordered_set<std::__wrap_iter<double const*>>((uint64_t)v6, *a3, a3[1]);
  mlcore::AnyInPredicate<double>::AnyInPredicate(a1, a2, (uint64_t)v6);
  std::__hash_table<mlcore::ModelPropertyBase *,std::hash<mlcore::ModelPropertyBase *>,std::equal_to<mlcore::ModelPropertyBase *>,std::allocator<mlcore::ModelPropertyBase *>>::~__hash_table((uint64_t)v6);
  return a1;
}

{
  _BYTE v6[40];

  std::unordered_set<double>::unordered_set<std::__wrap_iter<double const*>>((uint64_t)v6, *a3, a3[1]);
  mlcore::AnyInPredicate<double>::AnyInPredicate(a1, a2, (uint64_t)v6);
  std::__hash_table<mlcore::ModelPropertyBase *,std::hash<mlcore::ModelPropertyBase *>,std::equal_to<mlcore::ModelPropertyBase *>,std::allocator<mlcore::ModelPropertyBase *>>::~__hash_table((uint64_t)v6);
  return a1;
}

void sub_20A808304(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__hash_table<mlcore::ModelPropertyBase *,std::hash<mlcore::ModelPropertyBase *>,std::equal_to<mlcore::ModelPropertyBase *>,std::allocator<mlcore::ModelPropertyBase *>>::~__hash_table((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::unordered_set<double>::unordered_set<std::__wrap_iter<double const*>>(uint64_t a1, double *a2, double *a3)
{
  double *v5;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a2 != a3)
  {
    v5 = a2;
    do
    {
      std::__hash_table<double,std::hash<double>,std::equal_to<double>,std::allocator<double>>::__emplace_unique_key_args<double,double const&>(a1, *v5, *v5);
      ++v5;
    }
    while (v5 != a3);
  }
  return a1;
}

void sub_20A80837C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<mlcore::ModelPropertyBase *,std::hash<mlcore::ModelPropertyBase *>,std::equal_to<mlcore::ModelPropertyBase *>,std::allocator<mlcore::ModelPropertyBase *>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

_QWORD *mlcore::AnyInPredicate<double>::AnyInPredicate(_QWORD *a1, uint64_t **a2, uint64_t a3)
{
  uint64_t *v5;
  uint64_t *v6;
  unint64_t v7;
  void *v8;
  void *v10;
  uint64_t v11;
  uint64_t v12;

  v6 = *a2;
  v5 = a2[1];
  v7 = v5 - *a2;
  v11 = 0;
  v12 = 0;
  v10 = 0;
  std::vector<mlcore::ModelPropertyBase *>::__init_with_size[abi:ne180100]<std::__wrap_iter<mlcore::ModelProperty<double> * const*>,std::__wrap_iter<mlcore::ModelProperty<double> * const*>>((char *)&v10, v6, v5, v7);
  *a1 = off_24C3399E0;
  a1[2] = 0;
  a1[3] = 0;
  a1[1] = 0;
  v8 = v10;
  std::vector<mlcore::ModelPropertyBase *>::__init_with_size[abi:ne180100]<mlcore::ModelPropertyBase **,mlcore::ModelPropertyBase **>(a1 + 1, v10, v11, (v11 - (uint64_t)v10) >> 3);
  if (v8)
    operator delete(v8);
  *a1 = &unk_24C337360;
  mlcore::SharedObject<std::unordered_set<double>,int>::create<std::unordered_set<double> const&>((uint64_t)(a1 + 4), a3);
  return a1;
}

{
  return __ZN6mlcore14AnyInPredicateIdEC2ERKNSt3__16vectorIPNS_13ModelPropertyIdEENS2_9allocatorIS6_EEEERKNS2_13unordered_setIdNS2_4hashIdEENS2_8equal_toIdEENS7_IdEEEE(a1, a2, a3);
}

void sub_20A808438(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  uint64_t v2;
  void *v4;

  *v1 = v2;
  v4 = (void *)v1[1];
  if (v4)
  {
    v1[2] = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<mlcore::ModelPropertyBase *>::__init_with_size[abi:ne180100]<std::__wrap_iter<mlcore::ModelProperty<double> * const*>,std::__wrap_iter<mlcore::ModelProperty<double> * const*>>(char *result, uint64_t *a2, uint64_t *a3, unint64_t a4)
{
  char *v6;
  _QWORD *v7;
  uint64_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<mlcore::ModelPropertyBase *>::__vallocate[abi:ne180100](result, a4);
    v7 = (_QWORD *)*((_QWORD *)v6 + 1);
    while (a2 != a3)
    {
      v8 = *a2++;
      *v7++ = v8;
    }
    *((_QWORD *)v6 + 1) = v7;
  }
  return result;
}

void sub_20A8084BC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void mlcore::SharedObject<std::unordered_set<double>,int>::create<std::unordered_set<double> const&>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  unsigned __int8 v5;
  int v6;
  uint64_t v7;
  double *i;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  _QWORD *v11;
  _QWORD *v12;
  unint64_t v13;
  uint8x8_t v14;
  void **v15;
  void *j;
  unint64_t v17;
  _QWORD *v18;
  float v19;
  float v20;
  _BOOL8 v21;
  unint64_t v22;
  unint64_t v23;
  int8x8_t prime;
  void *v25;
  void *v26;
  uint64_t v27;
  _QWORD *v28;
  unint64_t v29;
  uint8x8_t v30;
  unint64_t v31;
  uint8x8_t v32;
  uint64_t v33;
  _QWORD *v34;
  unint64_t v35;
  _QWORD *v36;
  _QWORD *v37;
  unint64_t v38;
  unint64_t *p_shared_weak_owners;
  unint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t v42;
  unint64_t v43;
  void *v44;
  uint64_t v45;
  std::mutex *v46;

  v46 = (std::mutex *)mlcore::SharedObject<std::unordered_set<double>,int>::_mutex();
  std::mutex::lock(v46);
  if ((v5 & 1) == 0
  {
    mlcore::SharedObject<std::unordered_set<double>,int>::_nextToken(void)::token = operator new();
  }
  v6 = (*(_DWORD *)mlcore::SharedObject<std::unordered_set<double>,int>::_nextToken(void)::token)++;
  v7 = operator new();
  *(_OWORD *)v7 = 0u;
  *(_OWORD *)(v7 + 16) = 0u;
  *(_DWORD *)(v7 + 32) = *(_DWORD *)(a2 + 32);
  std::__hash_table<std::__hash_value_type<mlcore::ModelProperty<std::string> *,std::string>,std::__unordered_map_hasher<mlcore::ModelProperty<std::string> *,std::__hash_value_type<mlcore::ModelProperty<std::string> *,std::string>,std::hash<mlcore::ModelProperty<std::string> *>,std::equal_to<mlcore::ModelProperty<std::string> *>,true>,std::__unordered_map_equal<mlcore::ModelProperty<std::string> *,std::__hash_value_type<mlcore::ModelProperty<std::string> *,std::string>,std::equal_to<mlcore::ModelProperty<std::string> *>,std::hash<mlcore::ModelProperty<std::string> *>,true>,std::allocator<std::__hash_value_type<mlcore::ModelProperty<std::string> *,std::string>>>::__rehash<true>(v7, *(_QWORD *)(a2 + 8));
  for (i = *(double **)(a2 + 16); i; i = *(double **)i)
    std::__hash_table<double,std::hash<double>,std::equal_to<double>,std::allocator<double>>::__emplace_unique_key_args<double,double const&>(v7, i[2], i[2]);
  v45 = a1;
  v9 = (std::__shared_weak_count *)operator new();
  v9->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v9->__shared_owners_;
  v9->__vftable = (std::__shared_weak_count_vtbl *)&off_24C33D860;
  v9->__shared_weak_owners_ = 0;
  v9[1].__vftable = (std::__shared_weak_count_vtbl *)v7;
  LODWORD(v9[1].__shared_owners_) = v6;
  v11 = (_QWORD *)mlcore::SharedObject<std::unordered_set<double>,int>::_objects();
  v12 = v11;
  v13 = v11[1];
  if (v13)
  {
    v14 = (uint8x8_t)vcnt_s8((int8x8_t)v13);
    v14.i16[0] = vaddlv_u8(v14);
    if (v14.u32[0] > 1uLL)
    {
      v2 = v6;
      if (v13 <= v6)
        v2 = v6 % v13;
    }
    else
    {
      v2 = (v13 - 1) & v6;
    }
    v15 = *(void ***)(*v11 + 8 * v2);
    if (v15)
    {
      for (j = *v15; j; j = *(void **)j)
      {
        v17 = *((_QWORD *)j + 1);
        if (v17 == v6)
        {
          if (*((_DWORD *)j + 4) == v6)
            goto LABEL_77;
        }
        else
        {
          if (v14.u32[0] > 1uLL)
          {
            if (v17 >= v13)
              v17 %= v13;
          }
          else
          {
            v17 &= v13 - 1;
          }
          if (v17 != v2)
            break;
        }
      }
    }
  }
  j = operator new(0x28uLL);
  v18 = v12 + 2;
  *(_QWORD *)j = 0;
  *((_QWORD *)j + 1) = v6;
  *((_DWORD *)j + 4) = v6;
  *((_QWORD *)j + 3) = 0;
  *((_QWORD *)j + 4) = 0;
  v19 = (float)(unint64_t)(v12[3] + 1);
  v20 = *((float *)v12 + 8);
  if (!v13 || (float)(v20 * (float)v13) < v19)
  {
    v21 = 1;
    if (v13 >= 3)
      v21 = (v13 & (v13 - 1)) != 0;
    v22 = v21 | (2 * v13);
    v23 = vcvtps_u32_f32(v19 / v20);
    if (v22 <= v23)
      prime = (int8x8_t)v23;
    else
      prime = (int8x8_t)v22;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
    }
    v13 = v12[1];
    if (*(_QWORD *)&prime > v13)
      goto LABEL_33;
    if (*(_QWORD *)&prime < v13)
    {
      v31 = vcvtps_u32_f32((float)(unint64_t)v12[3] / *((float *)v12 + 8));
      if (v13 < 3 || (v32 = (uint8x8_t)vcnt_s8((int8x8_t)v13), v32.i16[0] = vaddlv_u8(v32), v32.u32[0] > 1uLL))
      {
        v31 = std::__next_prime(v31);
      }
      else
      {
        v33 = 1 << -(char)__clz(v31 - 1);
        if (v31 >= 2)
          v31 = v33;
      }
      if (*(_QWORD *)&prime <= v31)
        prime = (int8x8_t)v31;
      if (*(_QWORD *)&prime >= v13)
      {
        v13 = v12[1];
      }
      else
      {
        if (prime)
        {
LABEL_33:
          if (*(_QWORD *)&prime >> 61)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v25 = operator new(8 * *(_QWORD *)&prime);
          v26 = (void *)*v12;
          *v12 = v25;
          if (v26)
            operator delete(v26);
          v27 = 0;
          v12[1] = prime;
          do
            *(_QWORD *)(*v12 + 8 * v27++) = 0;
          while (*(_QWORD *)&prime != v27);
          v28 = (_QWORD *)*v18;
          if (*v18)
          {
            v29 = v28[1];
            v30 = (uint8x8_t)vcnt_s8(prime);
            v30.i16[0] = vaddlv_u8(v30);
            if (v30.u32[0] > 1uLL)
            {
              if (v29 >= *(_QWORD *)&prime)
                v29 %= *(_QWORD *)&prime;
            }
            else
            {
              v29 &= *(_QWORD *)&prime - 1;
            }
            *(_QWORD *)(*v12 + 8 * v29) = v18;
            v34 = (_QWORD *)*v28;
            if (*v28)
            {
              do
              {
                v35 = v34[1];
                if (v30.u32[0] > 1uLL)
                {
                  if (v35 >= *(_QWORD *)&prime)
                    v35 %= *(_QWORD *)&prime;
                }
                else
                {
                  v35 &= *(_QWORD *)&prime - 1;
                }
                if (v35 != v29)
                {
                  if (!*(_QWORD *)(*v12 + 8 * v35))
                  {
                    *(_QWORD *)(*v12 + 8 * v35) = v28;
                    goto LABEL_58;
                  }
                  *v28 = *v34;
                  *v34 = **(_QWORD **)(*v12 + 8 * v35);
                  **(_QWORD **)(*v12 + 8 * v35) = v34;
                  v34 = v28;
                }
                v35 = v29;
LABEL_58:
                v28 = v34;
                v34 = (_QWORD *)*v34;
                v29 = v35;
              }
              while (v34);
            }
          }
          v13 = (unint64_t)prime;
          goto LABEL_62;
        }
        v44 = (void *)*v12;
        *v12 = 0;
        if (v44)
          operator delete(v44);
        v13 = 0;
        v12[1] = 0;
      }
    }
LABEL_62:
    if ((v13 & (v13 - 1)) != 0)
    {
      if (v13 <= v6)
        v2 = v6 % v13;
      else
        v2 = v6;
    }
    else
    {
      v2 = (v13 - 1) & v6;
    }
  }
  v36 = (_QWORD *)*v12;
  v37 = *(_QWORD **)(*v12 + 8 * v2);
  if (v37)
  {
    *(_QWORD *)j = *v37;
LABEL_75:
    *v37 = j;
    goto LABEL_76;
  }
  *(_QWORD *)j = *v18;
  *v18 = j;
  v36[v2] = v18;
  if (*(_QWORD *)j)
  {
    v38 = *(_QWORD *)(*(_QWORD *)j + 8);
    if ((v13 & (v13 - 1)) != 0)
    {
      if (v38 >= v13)
        v38 %= v13;
    }
    else
    {
      v38 &= v13 - 1;
    }
    v37 = (_QWORD *)(*v12 + 8 * v38);
    goto LABEL_75;
  }
LABEL_76:
  ++v12[3];
LABEL_77:
  p_shared_weak_owners = (unint64_t *)&v9->__shared_weak_owners_;
  do
    v40 = __ldxr(p_shared_weak_owners);
  while (__stxr(v40 + 1, p_shared_weak_owners));
  v41 = (std::__shared_weak_count *)*((_QWORD *)j + 4);
  *((_QWORD *)j + 3) = v7;
  *((_QWORD *)j + 4) = v9;
  if (v41)
    std::__shared_weak_count::__release_weak(v41);
  *(_DWORD *)v45 = v6;
  *(_QWORD *)(v45 + 8) = v7;
  *(_QWORD *)(v45 + 16) = v9;
  do
    v42 = __ldxr(p_shared_owners);
  while (__stxr(v42 + 1, p_shared_owners));
  do
    v43 = __ldaxr(p_shared_owners);
  while (__stlxr(v43 - 1, p_shared_owners));
  if (!v43)
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
  std::mutex::unlock(v46);
}

void sub_20A808A38(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::mutex *a11, char a12, uint64_t a13, int a14, char a15)
{
  __break(1u);
}

void sub_20A808A7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, std::mutex *a11)
{
  __cxa_end_catch();
  std::mutex::unlock(a11);
  _Unwind_Resume(a1);
}

void sub_20A808A90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, std::mutex *a11)
{
  std::mutex::unlock(a11);
  _Unwind_Resume(a1);
}

void sub_20A808AA8()
{
  uint64_t v0;
  uint64_t v1;

  v1 = std::__hash_table<mlcore::ModelPropertyBase *,std::hash<mlcore::ModelPropertyBase *>,std::equal_to<mlcore::ModelPropertyBase *>,std::allocator<mlcore::ModelPropertyBase *>>::~__hash_table(v0);
  MEMORY[0x20BD27AFC](v1, 0x10A0C408EF24B1CLL);
  JUMPOUT(0x20A808AC8);
}

uint64_t mlcore::SharedObject<std::unordered_set<double>,int>::_mutex()
{
  unsigned __int8 v0;
  uint64_t v2;

  if ((v0 & 1) == 0
  {
    v2 = operator new();
    *(_QWORD *)v2 = 850045863;
    *(_OWORD *)(v2 + 8) = 0u;
    *(_OWORD *)(v2 + 24) = 0u;
    *(_OWORD *)(v2 + 40) = 0u;
    *(_QWORD *)(v2 + 56) = 0;
    mlcore::SharedObject<std::unordered_set<double>,int>::_mutex(void)::mutex = v2;
  }
  return mlcore::SharedObject<std::unordered_set<double>,int>::_mutex(void)::mutex;
}

void sub_20A808B64(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t mlcore::SharedObject<std::unordered_set<double>,int>::_objects()
{
  unsigned __int8 v0;
  uint64_t v2;

  if ((v0 & 1) == 0
  {
    v2 = operator new();
    *(_OWORD *)v2 = 0u;
    *(_OWORD *)(v2 + 16) = 0u;
    *(_DWORD *)(v2 + 32) = 1065353216;
    mlcore::SharedObject<std::unordered_set<double>,int>::_objects(void)::objects = v2;
  }
  return mlcore::SharedObject<std::unordered_set<double>,int>::_objects(void)::objects;
}

void sub_20A808BF8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void mlcore::SharedObject<std::unordered_set<double>,int>::create<std::unordered_set<double> const&>(std::unordered_set<double> const&)::{lambda(std::unordered_set<double>*)#1}::operator()(int *a1, uint64_t a2)
{
  std::mutex *v4;
  _QWORD *v5;
  uint64_t v6;

  v4 = (std::mutex *)mlcore::SharedObject<std::unordered_set<double>,int>::_mutex();
  std::mutex::lock(v4);
  v5 = (_QWORD *)mlcore::SharedObject<std::unordered_set<double>,int>::_objects();
  std::__hash_table<std::__hash_value_type<int,std::weak_ptr<std::unordered_set<long long>>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::weak_ptr<std::unordered_set<long long>>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::weak_ptr<std::unordered_set<long long>>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::weak_ptr<std::unordered_set<long long>>>>>::__erase_unique<int>(v5, *a1);
  if (a2)
  {
    v6 = std::__hash_table<mlcore::ModelPropertyBase *,std::hash<mlcore::ModelPropertyBase *>,std::equal_to<mlcore::ModelPropertyBase *>,std::allocator<mlcore::ModelPropertyBase *>>::~__hash_table(a2);
    MEMORY[0x20BD27AFC](v6, 0x10A0C408EF24B1CLL);
  }
  std::mutex::unlock(v4);
}

void sub_20A808C74(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<std::unordered_set<double> *,mlcore::SharedObject<std::unordered_set<double>,int> mlcore::SharedObject<std::unordered_set<double>,int>::create<std::unordered_set<double> const&>(std::unordered_set<double> const&)::{lambda(std::unordered_set<double> *)#1},std::allocator<std::unordered_set<double>>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x20BD27AFCLL);
}

void std::__shared_ptr_pointer<std::unordered_set<double> *,mlcore::SharedObject<std::unordered_set<double>,int> mlcore::SharedObject<std::unordered_set<double>,int>::create<std::unordered_set<double> const&>(std::unordered_set<double> const&)::{lambda(std::unordered_set<double> *)#1},std::allocator<std::unordered_set<double>>>::__on_zero_shared(uint64_t a1)
{
  uint64_t v2;
  std::mutex *v3;
  _QWORD *v4;
  uint64_t v5;

  v2 = *(_QWORD *)(a1 + 24);
  v3 = (std::mutex *)mlcore::SharedObject<std::unordered_set<double>,int>::_mutex();
  std::mutex::lock(v3);
  v4 = (_QWORD *)mlcore::SharedObject<std::unordered_set<double>,int>::_objects();
  std::__hash_table<std::__hash_value_type<int,std::weak_ptr<std::unordered_set<long long>>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::weak_ptr<std::unordered_set<long long>>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::weak_ptr<std::unordered_set<long long>>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::weak_ptr<std::unordered_set<long long>>>>>::__erase_unique<int>(v4, *(_DWORD *)(a1 + 32));
  if (v2)
  {
    v5 = std::__hash_table<mlcore::ModelPropertyBase *,std::hash<mlcore::ModelPropertyBase *>,std::equal_to<mlcore::ModelPropertyBase *>,std::allocator<mlcore::ModelPropertyBase *>>::~__hash_table(v2);
    MEMORY[0x20BD27AFC](v5, 0x10A0C408EF24B1CLL);
  }
  std::mutex::unlock(v3);
}

void sub_20A808D14(void *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  __clang_call_terminate(a1);
}

uint64_t std::__shared_ptr_pointer<std::unordered_set<double> *,mlcore::SharedObject<std::unordered_set<double>,int> mlcore::SharedObject<std::unordered_set<double>,int>::create<std::unordered_set<double> const&>(std::unordered_set<double> const&)::{lambda(std::unordered_set<double> *)#1},std::allocator<std::unordered_set<double>>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN6mlcore12SharedObjectINSt3__113unordered_setIdNS1_4hashIdEENS1_8equal_toIdEENS1_9allocatorIdEEEEiE6createIJRKS9_EEESA_DpOT_EUlPS9_E_"))
  {
    return a1 + 32;
  }
  else
  {
    return 0;
  }
}

void std::__hash_table<double,std::hash<double>,std::equal_to<double>,std::allocator<double>>::__emplace_unique_key_args<double,double const&>(uint64_t a1, double a2, double a3)
{
  double v3;
  double v6;
  unint64_t v7;
  uint8x8_t v8;
  double **v9;
  double *i;
  unint64_t v11;
  double *v12;
  float v13;
  float v14;
  _BOOL8 v15;
  unint64_t v16;
  unint64_t v17;
  size_t v18;
  uint64_t v19;
  double **v20;
  unint64_t v21;

  if (a2 == 0.0)
    v6 = 0.0;
  else
    v6 = a2;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = v6;
      if (*(_QWORD *)&v6 >= v7)
        *(_QWORD *)&v3 = *(_QWORD *)&v6 % v7;
    }
    else
    {
      *(_QWORD *)&v3 = (v7 - 1) & *(_QWORD *)&v6;
    }
    v9 = *(double ***)(*(_QWORD *)a1 + 8 * *(_QWORD *)&v3);
    if (v9)
    {
      for (i = *v9; i; i = *(double **)i)
      {
        v11 = *((_QWORD *)i + 1);
        if (v11 == *(_QWORD *)&v6)
        {
          if (i[2] == a2)
            return;
        }
        else
        {
          if (v8.u32[0] > 1uLL)
          {
            if (v11 >= v7)
              v11 %= v7;
          }
          else
          {
            v11 &= v7 - 1;
          }
          if (v11 != *(_QWORD *)&v3)
            break;
        }
      }
    }
  }
  v12 = (double *)operator new(0x18uLL);
  *v12 = 0.0;
  v12[1] = v6;
  v12[2] = a3;
  v13 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v14 = *(float *)(a1 + 32);
  if (!v7 || (float)(v14 * (float)v7) < v13)
  {
    v15 = 1;
    if (v7 >= 3)
      v15 = (v7 & (v7 - 1)) != 0;
    v16 = v15 | (2 * v7);
    v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17)
      v18 = v17;
    else
      v18 = v16;
    std::__hash_table<std::__hash_value_type<mlcore::ModelProperty<std::string> *,std::string>,std::__unordered_map_hasher<mlcore::ModelProperty<std::string> *,std::__hash_value_type<mlcore::ModelProperty<std::string> *,std::string>,std::hash<mlcore::ModelProperty<std::string> *>,std::equal_to<mlcore::ModelProperty<std::string> *>,true>,std::__unordered_map_equal<mlcore::ModelProperty<std::string> *,std::__hash_value_type<mlcore::ModelProperty<std::string> *,std::string>,std::equal_to<mlcore::ModelProperty<std::string> *>,std::hash<mlcore::ModelProperty<std::string> *>,true>,std::allocator<std::__hash_value_type<mlcore::ModelProperty<std::string> *,std::string>>>::__rehash<true>(a1, v18);
    v7 = *(_QWORD *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (*(_QWORD *)&v6 >= v7)
        *(_QWORD *)&v3 = *(_QWORD *)&v6 % v7;
      else
        v3 = v6;
    }
    else
    {
      *(_QWORD *)&v3 = (v7 - 1) & *(_QWORD *)&v6;
    }
  }
  v19 = *(_QWORD *)a1;
  v20 = *(double ***)(*(_QWORD *)a1 + 8 * *(_QWORD *)&v3);
  if (v20)
  {
    *(_QWORD *)v12 = *v20;
LABEL_41:
    *v20 = v12;
    goto LABEL_42;
  }
  *v12 = *(double *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v12;
  *(_QWORD *)(v19 + 8 * *(_QWORD *)&v3) = a1 + 16;
  if (*(_QWORD *)v12)
  {
    v21 = *(_QWORD *)(*(_QWORD *)v12 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v21 >= v7)
        v21 %= v7;
    }
    else
    {
      v21 &= v7 - 1;
    }
    v20 = (double **)(*(_QWORD *)a1 + 8 * v21);
    goto LABEL_41;
  }
LABEL_42:
  ++*(_QWORD *)(a1 + 24);
}

void sub_20A808F6C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_20A808FD0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__hash_table<mlcore::ModelPropertyBase *,std::hash<mlcore::ModelPropertyBase *>,std::equal_to<mlcore::ModelPropertyBase *>,std::allocator<mlcore::ModelPropertyBase *>>::~__hash_table((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t mlcore::AnyInPredicate<double>::values(uint64_t a1)
{
  return *(_QWORD *)(a1 + 40);
}

uint64_t mlcore::AnyInPredicate<double>::AnyInPredicate(uint64_t a1, uint64_t **a2, uint64_t a3)
{
  uint64_t *v5;
  uint64_t *v6;
  unint64_t v7;
  void *v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  void *v13;
  uint64_t v14;
  uint64_t v15;

  v6 = *a2;
  v5 = a2[1];
  v7 = v5 - *a2;
  v14 = 0;
  v15 = 0;
  v13 = 0;
  std::vector<mlcore::ModelPropertyBase *>::__init_with_size[abi:ne180100]<std::__wrap_iter<mlcore::ModelProperty<double> * const*>,std::__wrap_iter<mlcore::ModelProperty<double> * const*>>((char *)&v13, v6, v5, v7);
  *(_QWORD *)a1 = off_24C3399E0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  v8 = v13;
  std::vector<mlcore::ModelPropertyBase *>::__init_with_size[abi:ne180100]<mlcore::ModelPropertyBase **,mlcore::ModelPropertyBase **>((_QWORD *)(a1 + 8), v13, v14, (v14 - (uint64_t)v13) >> 3);
  if (v8)
    operator delete(v8);
  *(_QWORD *)a1 = &unk_24C337360;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)a3;
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a3 + 8);
  v9 = *(_QWORD *)(a3 + 16);
  *(_QWORD *)(a1 + 48) = v9;
  if (v9)
  {
    v10 = (unint64_t *)(v9 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  return a1;
}

{
  return __ZN6mlcore14AnyInPredicateIdEC2ERKNSt3__16vectorIPNS_13ModelPropertyIdEENS2_9allocatorIS6_EEEENS_12SharedObjectINS2_13unordered_setIdNS2_4hashIdEENS2_8equal_toIdEENS7_IdEEEEiEE(a1, a2, a3);
}

void sub_20A8090BC(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

_QWORD *mlcore::AnyInPredicate<double>::_lookupFunctionName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "HashtableLookupDouble");
}

_QWORD *mlcore::AnyInPredicate<int>::AnyInPredicate(_QWORD *a1, uint64_t **a2, int **a3)
{
  _BYTE v6[40];

  std::unordered_set<int>::unordered_set<std::__wrap_iter<int const*>>((uint64_t)v6, *a3, a3[1]);
  mlcore::AnyInPredicate<int>::AnyInPredicate(a1, a2, (uint64_t)v6);
  std::__hash_table<mlcore::ModelPropertyBase *,std::hash<mlcore::ModelPropertyBase *>,std::equal_to<mlcore::ModelPropertyBase *>,std::allocator<mlcore::ModelPropertyBase *>>::~__hash_table((uint64_t)v6);
  return a1;
}

{
  _BYTE v6[40];

  std::unordered_set<int>::unordered_set<std::__wrap_iter<int const*>>((uint64_t)v6, *a3, a3[1]);
  mlcore::AnyInPredicate<int>::AnyInPredicate(a1, a2, (uint64_t)v6);
  std::__hash_table<mlcore::ModelPropertyBase *,std::hash<mlcore::ModelPropertyBase *>,std::equal_to<mlcore::ModelPropertyBase *>,std::allocator<mlcore::ModelPropertyBase *>>::~__hash_table((uint64_t)v6);
  return a1;
}

void sub_20A809138(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__hash_table<mlcore::ModelPropertyBase *,std::hash<mlcore::ModelPropertyBase *>,std::equal_to<mlcore::ModelPropertyBase *>,std::allocator<mlcore::ModelPropertyBase *>>::~__hash_table((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *mlcore::AnyInPredicate<int>::AnyInPredicate(_QWORD *a1, uint64_t **a2, uint64_t a3)
{
  uint64_t *v5;
  uint64_t *v6;
  unint64_t v7;
  void *v8;
  void *v10;
  uint64_t v11;
  uint64_t v12;

  v6 = *a2;
  v5 = a2[1];
  v7 = v5 - *a2;
  v11 = 0;
  v12 = 0;
  v10 = 0;
  std::vector<mlcore::ModelPropertyBase *>::__init_with_size[abi:ne180100]<std::__wrap_iter<mlcore::ModelProperty<int> * const*>,std::__wrap_iter<mlcore::ModelProperty<int> * const*>>((char *)&v10, v6, v5, v7);
  *a1 = off_24C3399E0;
  a1[2] = 0;
  a1[3] = 0;
  a1[1] = 0;
  v8 = v10;
  std::vector<mlcore::ModelPropertyBase *>::__init_with_size[abi:ne180100]<mlcore::ModelPropertyBase **,mlcore::ModelPropertyBase **>(a1 + 1, v10, v11, (v11 - (uint64_t)v10) >> 3);
  if (v8)
    operator delete(v8);
  *a1 = &unk_24C3373B8;
  mlcore::SharedObject<std::unordered_set<int>,int>::create<std::unordered_set<int> const&>((uint64_t)(a1 + 4), a3);
  return a1;
}

{
  return __ZN6mlcore14AnyInPredicateIiEC2ERKNSt3__16vectorIPNS_13ModelPropertyIiEENS2_9allocatorIS6_EEEERKNS2_13unordered_setIiNS2_4hashIiEENS2_8equal_toIiEENS7_IiEEEE(a1, a2, a3);
}

void sub_20A8091F4(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  uint64_t v2;
  void *v4;

  *v1 = v2;
  v4 = (void *)v1[1];
  if (v4)
  {
    v1[2] = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<mlcore::ModelPropertyBase *>::__init_with_size[abi:ne180100]<std::__wrap_iter<mlcore::ModelProperty<int> * const*>,std::__wrap_iter<mlcore::ModelProperty<int> * const*>>(char *result, uint64_t *a2, uint64_t *a3, unint64_t a4)
{
  char *v6;
  _QWORD *v7;
  uint64_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<mlcore::ModelPropertyBase *>::__vallocate[abi:ne180100](result, a4);
    v7 = (_QWORD *)*((_QWORD *)v6 + 1);
    while (a2 != a3)
    {
      v8 = *a2++;
      *v7++ = v8;
    }
    *((_QWORD *)v6 + 1) = v7;
  }
  return result;
}

void sub_20A809278(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void mlcore::SharedObject<std::unordered_set<int>,int>::create<std::unordered_set<int> const&>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  unsigned __int8 v5;
  int v6;
  uint64_t v7;
  uint64_t *i;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  _QWORD *v11;
  _QWORD *v12;
  unint64_t v13;
  uint8x8_t v14;
  void **v15;
  void *j;
  unint64_t v17;
  _QWORD *v18;
  float v19;
  float v20;
  _BOOL8 v21;
  unint64_t v22;
  unint64_t v23;
  int8x8_t prime;
  void *v25;
  void *v26;
  uint64_t v27;
  _QWORD *v28;
  unint64_t v29;
  uint8x8_t v30;
  unint64_t v31;
  uint8x8_t v32;
  uint64_t v33;
  _QWORD *v34;
  unint64_t v35;
  _QWORD *v36;
  _QWORD *v37;
  unint64_t v38;
  unint64_t *p_shared_weak_owners;
  unint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t v42;
  unint64_t v43;
  void *v44;
  uint64_t v45;
  std::mutex *v46;

  v46 = (std::mutex *)mlcore::SharedObject<std::unordered_set<int>,int>::_mutex();
  std::mutex::lock(v46);
  if ((v5 & 1) == 0
  {
    mlcore::SharedObject<std::unordered_set<int>,int>::_nextToken(void)::token = operator new();
  }
  v6 = (*(_DWORD *)mlcore::SharedObject<std::unordered_set<int>,int>::_nextToken(void)::token)++;
  v7 = operator new();
  *(_OWORD *)v7 = 0u;
  *(_OWORD *)(v7 + 16) = 0u;
  *(_DWORD *)(v7 + 32) = *(_DWORD *)(a2 + 32);
  std::__hash_table<std::__hash_value_type<mlcore::ModelProperty<std::string> *,std::string>,std::__unordered_map_hasher<mlcore::ModelProperty<std::string> *,std::__hash_value_type<mlcore::ModelProperty<std::string> *,std::string>,std::hash<mlcore::ModelProperty<std::string> *>,std::equal_to<mlcore::ModelProperty<std::string> *>,true>,std::__unordered_map_equal<mlcore::ModelProperty<std::string> *,std::__hash_value_type<mlcore::ModelProperty<std::string> *,std::string>,std::equal_to<mlcore::ModelProperty<std::string> *>,std::hash<mlcore::ModelProperty<std::string> *>,true>,std::allocator<std::__hash_value_type<mlcore::ModelProperty<std::string> *,std::string>>>::__rehash<true>(v7, *(_QWORD *)(a2 + 8));
  for (i = *(uint64_t **)(a2 + 16); i; i = (uint64_t *)*i)
    std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::__emplace_unique_key_args<int,int const&>(v7, *((_DWORD *)i + 4), *((_DWORD *)i + 4));
  v45 = a1;
  v9 = (std::__shared_weak_count *)operator new();
  v9->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v9->__shared_owners_;
  v9->__vftable = (std::__shared_weak_count_vtbl *)&off_24C33D898;
  v9->__shared_weak_owners_ = 0;
  v9[1].__vftable = (std::__shared_weak_count_vtbl *)v7;
  LODWORD(v9[1].__shared_owners_) = v6;
  v11 = (_QWORD *)mlcore::SharedObject<std::unordered_set<int>,int>::_objects();
  v12 = v11;
  v13 = v11[1];
  if (v13)
  {
    v14 = (uint8x8_t)vcnt_s8((int8x8_t)v13);
    v14.i16[0] = vaddlv_u8(v14);
    if (v14.u32[0] > 1uLL)
    {
      v2 = v6;
      if (v13 <= v6)
        v2 = v6 % v13;
    }
    else
    {
      v2 = (v13 - 1) & v6;
    }
    v15 = *(void ***)(*v11 + 8 * v2);
    if (v15)
    {
      for (j = *v15; j; j = *(void **)j)
      {
        v17 = *((_QWORD *)j + 1);
        if (v17 == v6)
        {
          if (*((_DWORD *)j + 4) == v6)
            goto LABEL_77;
        }
        else
        {
          if (v14.u32[0] > 1uLL)
          {
            if (v17 >= v13)
              v17 %= v13;
          }
          else
          {
            v17 &= v13 - 1;
          }
          if (v17 != v2)
            break;
        }
      }
    }
  }
  j = operator new(0x28uLL);
  v18 = v12 + 2;
  *(_QWORD *)j = 0;
  *((_QWORD *)j + 1) = v6;
  *((_DWORD *)j + 4) = v6;
  *((_QWORD *)j + 3) = 0;
  *((_QWORD *)j + 4) = 0;
  v19 = (float)(unint64_t)(v12[3] + 1);
  v20 = *((float *)v12 + 8);
  if (!v13 || (float)(v20 * (float)v13) < v19)
  {
    v21 = 1;
    if (v13 >= 3)
      v21 = (v13 & (v13 - 1)) != 0;
    v22 = v21 | (2 * v13);
    v23 = vcvtps_u32_f32(v19 / v20);
    if (v22 <= v23)
      prime = (int8x8_t)v23;
    else
      prime = (int8x8_t)v22;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
    }
    v13 = v12[1];
    if (*(_QWORD *)&prime > v13)
      goto LABEL_33;
    if (*(_QWORD *)&prime < v13)
    {
      v31 = vcvtps_u32_f32((float)(unint64_t)v12[3] / *((float *)v12 + 8));
      if (v13 < 3 || (v32 = (uint8x8_t)vcnt_s8((int8x8_t)v13), v32.i16[0] = vaddlv_u8(v32), v32.u32[0] > 1uLL))
      {
        v31 = std::__next_prime(v31);
      }
      else
      {
        v33 = 1 << -(char)__clz(v31 - 1);
        if (v31 >= 2)
          v31 = v33;
      }
      if (*(_QWORD *)&prime <= v31)
        prime = (int8x8_t)v31;
      if (*(_QWORD *)&prime >= v13)
      {
        v13 = v12[1];
      }
      else
      {
        if (prime)
        {
LABEL_33:
          if (*(_QWORD *)&prime >> 61)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v25 = operator new(8 * *(_QWORD *)&prime);
          v26 = (void *)*v12;
          *v12 = v25;
          if (v26)
            operator delete(v26);
          v27 = 0;
          v12[1] = prime;
          do
            *(_QWORD *)(*v12 + 8 * v27++) = 0;
          while (*(_QWORD *)&prime != v27);
          v28 = (_QWORD *)*v18;
          if (*v18)
          {
            v29 = v28[1];
            v30 = (uint8x8_t)vcnt_s8(prime);
            v30.i16[0] = vaddlv_u8(v30);
            if (v30.u32[0] > 1uLL)
            {
              if (v29 >= *(_QWORD *)&prime)
                v29 %= *(_QWORD *)&prime;
            }
            else
            {
              v29 &= *(_QWORD *)&prime - 1;
            }
            *(_QWORD *)(*v12 + 8 * v29) = v18;
            v34 = (_QWORD *)*v28;
            if (*v28)
            {
              do
              {
                v35 = v34[1];
                if (v30.u32[0] > 1uLL)
                {
                  if (v35 >= *(_QWORD *)&prime)
                    v35 %= *(_QWORD *)&prime;
                }
                else
                {
                  v35 &= *(_QWORD *)&prime - 1;
                }
                if (v35 != v29)
                {
                  if (!*(_QWORD *)(*v12 + 8 * v35))
                  {
                    *(_QWORD *)(*v12 + 8 * v35) = v28;
                    goto LABEL_58;
                  }
                  *v28 = *v34;
                  *v34 = **(_QWORD **)(*v12 + 8 * v35);
                  **(_QWORD **)(*v12 + 8 * v35) = v34;
                  v34 = v28;
                }
                v35 = v29;
LABEL_58:
                v28 = v34;
                v34 = (_QWORD *)*v34;
                v29 = v35;
              }
              while (v34);
            }
          }
          v13 = (unint64_t)prime;
          goto LABEL_62;
        }
        v44 = (void *)*v12;
        *v12 = 0;
        if (v44)
          operator delete(v44);
        v13 = 0;
        v12[1] = 0;
      }
    }
LABEL_62:
    if ((v13 & (v13 - 1)) != 0)
    {
      if (v13 <= v6)
        v2 = v6 % v13;
      else
        v2 = v6;
    }
    else
    {
      v2 = (v13 - 1) & v6;
    }
  }
  v36 = (_QWORD *)*v12;
  v37 = *(_QWORD **)(*v12 + 8 * v2);
  if (v37)
  {
    *(_QWORD *)j = *v37;
LABEL_75:
    *v37 = j;
    goto LABEL_76;
  }
  *(_QWORD *)j = *v18;
  *v18 = j;
  v36[v2] = v18;
  if (*(_QWORD *)j)
  {
    v38 = *(_QWORD *)(*(_QWORD *)j + 8);
    if ((v13 & (v13 - 1)) != 0)
    {
      if (v38 >= v13)
        v38 %= v13;
    }
    else
    {
      v38 &= v13 - 1;
    }
    v37 = (_QWORD *)(*v12 + 8 * v38);
    goto LABEL_75;
  }
LABEL_76:
  ++v12[3];
LABEL_77:
  p_shared_weak_owners = (unint64_t *)&v9->__shared_weak_owners_;
  do
    v40 = __ldxr(p_shared_weak_owners);
  while (__stxr(v40 + 1, p_shared_weak_owners));
  v41 = (std::__shared_weak_count *)*((_QWORD *)j + 4);
  *((_QWORD *)j + 3) = v7;
  *((_QWORD *)j + 4) = v9;
  if (v41)
    std::__shared_weak_count::__release_weak(v41);
  *(_DWORD *)v45 = v6;
  *(_QWORD *)(v45 + 8) = v7;
  *(_QWORD *)(v45 + 16) = v9;
  do
    v42 = __ldxr(p_shared_owners);
  while (__stxr(v42 + 1, p_shared_owners));
  do
    v43 = __ldaxr(p_shared_owners);
  while (__stlxr(v43 - 1, p_shared_owners));
  if (!v43)
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
  std::mutex::unlock(v46);
}

void sub_20A8097F4(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::mutex *a11, char a12, uint64_t a13, int a14, char a15)
{
  __break(1u);
}

void sub_20A809838(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, std::mutex *a11)
{
  __cxa_end_catch();
  std::mutex::unlock(a11);
  _Unwind_Resume(a1);
}

void sub_20A80984C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, std::mutex *a11)
{
  std::mutex::unlock(a11);
  _Unwind_Resume(a1);
}

void sub_20A809864()
{
  uint64_t v0;
  uint64_t v1;

  v1 = std::__hash_table<mlcore::ModelPropertyBase *,std::hash<mlcore::ModelPropertyBase *>,std::equal_to<mlcore::ModelPropertyBase *>,std::allocator<mlcore::ModelPropertyBase *>>::~__hash_table(v0);
  MEMORY[0x20BD27AFC](v1, 0x10A0C408EF24B1CLL);
  JUMPOUT(0x20A809884);
}

uint64_t mlcore::SharedObject<std::unordered_set<int>,int>::_mutex()
{
  unsigned __int8 v0;
  uint64_t v2;

  if ((v0 & 1) == 0
  {
    v2 = operator new();
    *(_QWORD *)v2 = 850045863;
    *(_OWORD *)(v2 + 8) = 0u;
    *(_OWORD *)(v2 + 24) = 0u;
    *(_OWORD *)(v2 + 40) = 0u;
    *(_QWORD *)(v2 + 56) = 0;
    mlcore::SharedObject<std::unordered_set<int>,int>::_mutex(void)::mutex = v2;
  }
  return mlcore::SharedObject<std::unordered_set<int>,int>::_mutex(void)::mutex;
}

void sub_20A809920(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t mlcore::SharedObject<std::unordered_set<int>,int>::_objects()
{
  unsigned __int8 v0;
  uint64_t v2;

  if ((v0 & 1) == 0
  {
    v2 = operator new();
    *(_OWORD *)v2 = 0u;
    *(_OWORD *)(v2 + 16) = 0u;
    *(_DWORD *)(v2 + 32) = 1065353216;
    mlcore::SharedObject<std::unordered_set<int>,int>::_objects(void)::objects = v2;
  }
  return mlcore::SharedObject<std::unordered_set<int>,int>::_objects(void)::objects;
}

void sub_20A8099B4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void mlcore::SharedObject<std::unordered_set<int>,int>::create<std::unordered_set<int> const&>(std::unordered_set<int> const&)::{lambda(std::unordered_set<int>*)#1}::operator()(int *a1, uint64_t a2)
{
  std::mutex *v4;
  _QWORD *v5;
  uint64_t v6;

  v4 = (std::mutex *)mlcore::SharedObject<std::unordered_set<int>,int>::_mutex();
  std::mutex::lock(v4);
  v5 = (_QWORD *)mlcore::SharedObject<std::unordered_set<int>,int>::_objects();
  std::__hash_table<std::__hash_value_type<int,std::weak_ptr<std::unordered_set<long long>>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::weak_ptr<std::unordered_set<long long>>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::weak_ptr<std::unordered_set<long long>>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::weak_ptr<std::unordered_set<long long>>>>>::__erase_unique<int>(v5, *a1);
  if (a2)
  {
    v6 = std::__hash_table<mlcore::ModelPropertyBase *,std::hash<mlcore::ModelPropertyBase *>,std::equal_to<mlcore::ModelPropertyBase *>,std::allocator<mlcore::ModelPropertyBase *>>::~__hash_table(a2);
    MEMORY[0x20BD27AFC](v6, 0x10A0C408EF24B1CLL);
  }
  std::mutex::unlock(v4);
}

void sub_20A809A30(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<std::unordered_set<int> *,mlcore::SharedObject<std::unordered_set<int>,int> mlcore::SharedObject<std::unordered_set<int>,int>::create<std::unordered_set<int> const&>(std::unordered_set<int> const&)::{lambda(std::unordered_set<int> *)#1},std::allocator<std::unordered_set<int>>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x20BD27AFCLL);
}

void std::__shared_ptr_pointer<std::unordered_set<int> *,mlcore::SharedObject<std::unordered_set<int>,int> mlcore::SharedObject<std::unordered_set<int>,int>::create<std::unordered_set<int> const&>(std::unordered_set<int> const&)::{lambda(std::unordered_set<int> *)#1},std::allocator<std::unordered_set<int>>>::__on_zero_shared(uint64_t a1)
{
  uint64_t v2;
  std::mutex *v3;
  _QWORD *v4;
  uint64_t v5;

  v2 = *(_QWORD *)(a1 + 24);
  v3 = (std::mutex *)mlcore::SharedObject<std::unordered_set<int>,int>::_mutex();
  std::mutex::lock(v3);
  v4 = (_QWORD *)mlcore::SharedObject<std::unordered_set<int>,int>::_objects();
  std::__hash_table<std::__hash_value_type<int,std::weak_ptr<std::unordered_set<long long>>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::weak_ptr<std::unordered_set<long long>>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::weak_ptr<std::unordered_set<long long>>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::weak_ptr<std::unordered_set<long long>>>>>::__erase_unique<int>(v4, *(_DWORD *)(a1 + 32));
  if (v2)
  {
    v5 = std::__hash_table<mlcore::ModelPropertyBase *,std::hash<mlcore::ModelPropertyBase *>,std::equal_to<mlcore::ModelPropertyBase *>,std::allocator<mlcore::ModelPropertyBase *>>::~__hash_table(v2);
    MEMORY[0x20BD27AFC](v5, 0x10A0C408EF24B1CLL);
  }
  std::mutex::unlock(v3);
}

void sub_20A809AD0(void *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  __clang_call_terminate(a1);
}

uint64_t std::__shared_ptr_pointer<std::unordered_set<int> *,mlcore::SharedObject<std::unordered_set<int>,int> mlcore::SharedObject<std::unordered_set<int>,int>::create<std::unordered_set<int> const&>(std::unordered_set<int> const&)::{lambda(std::unordered_set<int> *)#1},std::allocator<std::unordered_set<int>>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN6mlcore12SharedObjectINSt3__113unordered_setIiNS1_4hashIiEENS1_8equal_toIiEENS1_9allocatorIiEEEEiE6createIJRKS9_EEESA_DpOT_EUlPS9_E_"))
  {
    return a1 + 32;
  }
  else
  {
    return 0;
  }
}

void sub_20A809B78(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__hash_table<mlcore::ModelPropertyBase *,std::hash<mlcore::ModelPropertyBase *>,std::equal_to<mlcore::ModelPropertyBase *>,std::allocator<mlcore::ModelPropertyBase *>>::~__hash_table((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t mlcore::AnyInPredicate<int>::values(uint64_t a1)
{
  return *(_QWORD *)(a1 + 40);
}

uint64_t mlcore::AnyInPredicate<int>::AnyInPredicate(uint64_t a1, uint64_t **a2, uint64_t a3)
{
  uint64_t *v5;
  uint64_t *v6;
  unint64_t v7;
  void *v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  void *v13;
  uint64_t v14;
  uint64_t v15;

  v6 = *a2;
  v5 = a2[1];
  v7 = v5 - *a2;
  v14 = 0;
  v15 = 0;
  v13 = 0;
  std::vector<mlcore::ModelPropertyBase *>::__init_with_size[abi:ne180100]<std::__wrap_iter<mlcore::ModelProperty<int> * const*>,std::__wrap_iter<mlcore::ModelProperty<int> * const*>>((char *)&v13, v6, v5, v7);
  *(_QWORD *)a1 = off_24C3399E0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  v8 = v13;
  std::vector<mlcore::ModelPropertyBase *>::__init_with_size[abi:ne180100]<mlcore::ModelPropertyBase **,mlcore::ModelPropertyBase **>((_QWORD *)(a1 + 8), v13, v14, (v14 - (uint64_t)v13) >> 3);
  if (v8)
    operator delete(v8);
  *(_QWORD *)a1 = &unk_24C3373B8;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)a3;
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a3 + 8);
  v9 = *(_QWORD *)(a3 + 16);
  *(_QWORD *)(a1 + 48) = v9;
  if (v9)
  {
    v10 = (unint64_t *)(v9 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  return a1;
}

{
  return __ZN6mlcore14AnyInPredicateIiEC2ERKNSt3__16vectorIPNS_13ModelPropertyIiEENS2_9allocatorIS6_EEEENS_12SharedObjectINS2_13unordered_setIiNS2_4hashIiEENS2_8equal_toIiEENS7_IiEEEEiEE(a1, a2, a3);
}

void sub_20A809C64(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

_QWORD *mlcore::AnyInPredicate<int>::_lookupFunctionName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "HashtableLookupInt");
}

_QWORD *mlcore::AnyInPredicate<mediaplatform::Data>::AnyInPredicate(_QWORD *a1, uint64_t **a2, const mediaplatform::Data **a3)
{
  _BYTE v6[40];

  std::unordered_set<mediaplatform::Data>::unordered_set<std::__wrap_iter<mediaplatform::Data const*>>((uint64_t)v6, *a3, a3[1]);
  mlcore::AnyInPredicate<mediaplatform::Data>::AnyInPredicate(a1, a2, (uint64_t)v6);
  std::__hash_table<mediaplatform::Data,std::hash<mediaplatform::Data>,std::equal_to<mediaplatform::Data>,std::allocator<mediaplatform::Data>>::~__hash_table((uint64_t)v6);
  return a1;
}

{
  _BYTE v6[40];

  std::unordered_set<mediaplatform::Data>::unordered_set<std::__wrap_iter<mediaplatform::Data const*>>((uint64_t)v6, *a3, a3[1]);
  mlcore::AnyInPredicate<mediaplatform::Data>::AnyInPredicate(a1, a2, (uint64_t)v6);
  std::__hash_table<mediaplatform::Data,std::hash<mediaplatform::Data>,std::equal_to<mediaplatform::Data>,std::allocator<mediaplatform::Data>>::~__hash_table((uint64_t)v6);
  return a1;
}

void sub_20A809CE0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__hash_table<mediaplatform::Data,std::hash<mediaplatform::Data>,std::equal_to<mediaplatform::Data>,std::allocator<mediaplatform::Data>>::~__hash_table((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::unordered_set<mediaplatform::Data>::unordered_set<std::__wrap_iter<mediaplatform::Data const*>>(uint64_t a1, const mediaplatform::Data *a2, const mediaplatform::Data *a3)
{
  const mediaplatform::Data *v5;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a2 != a3)
  {
    v5 = a2;
    do
    {
      std::__hash_table<mediaplatform::Data,std::hash<mediaplatform::Data>,std::equal_to<mediaplatform::Data>,std::allocator<mediaplatform::Data>>::__emplace_unique_key_args<mediaplatform::Data,mediaplatform::Data const&>(a1, (uint64_t)v5, v5);
      v5 = (const mediaplatform::Data *)((char *)v5 + 40);
    }
    while (v5 != a3);
  }
  return a1;
}

void sub_20A809D58(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<mediaplatform::Data,std::hash<mediaplatform::Data>,std::equal_to<mediaplatform::Data>,std::allocator<mediaplatform::Data>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

_QWORD *mlcore::AnyInPredicate<mediaplatform::Data>::AnyInPredicate(_QWORD *a1, uint64_t **a2, uint64_t a3)
{
  uint64_t *v5;
  uint64_t *v6;
  unint64_t v7;
  void *v8;
  void *v10;
  uint64_t v11;
  uint64_t v12;

  v6 = *a2;
  v5 = a2[1];
  v7 = v5 - *a2;
  v11 = 0;
  v12 = 0;
  v10 = 0;
  std::vector<mlcore::ModelPropertyBase *>::__init_with_size[abi:ne180100]<std::__wrap_iter<mlcore::ModelProperty<mediaplatform::Data> * const*>,std::__wrap_iter<mlcore::ModelProperty<mediaplatform::Data> * const*>>((char *)&v10, v6, v5, v7);
  *a1 = off_24C3399E0;
  a1[2] = 0;
  a1[3] = 0;
  a1[1] = 0;
  v8 = v10;
  std::vector<mlcore::ModelPropertyBase *>::__init_with_size[abi:ne180100]<mlcore::ModelPropertyBase **,mlcore::ModelPropertyBase **>(a1 + 1, v10, v11, (v11 - (uint64_t)v10) >> 3);
  if (v8)
    operator delete(v8);
  *a1 = &unk_24C3372B0;
  mlcore::SharedObject<std::unordered_set<mediaplatform::Data>,int>::create<std::unordered_set<mediaplatform::Data> const&>((uint64_t)(a1 + 4), a3);
  return a1;
}

{
  return __ZN6mlcore14AnyInPredicateIN13mediaplatform4DataEEC2ERKNSt3__16vectorIPNS_13ModelPropertyIS2_EENS4_9allocatorIS8_EEEERKNS4_13unordered_setIS2_NS4_4hashIS2_EENS4_8equal_toIS2_EENS9_IS2_EEEE(a1, a2, a3);
}

void sub_20A809E14(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  uint64_t v2;
  void *v4;

  *v1 = v2;
  v4 = (void *)v1[1];
  if (v4)
  {
    v1[2] = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__hash_table<mediaplatform::Data,std::hash<mediaplatform::Data>,std::equal_to<mediaplatform::Data>,std::allocator<mediaplatform::Data>>::~__hash_table(uint64_t a1)
{
  void (***v2)(uint64_t);
  void (**v3)(uint64_t);
  void *v4;

  v2 = *(void (****)(uint64_t))(a1 + 16);
  if (v2)
  {
    do
    {
      v3 = *v2;
      (*v2[2])((uint64_t)(v2 + 2));
      operator delete(v2);
      v2 = (void (***)(uint64_t))v3;
    }
    while (v3);
  }
  v4 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v4)
    operator delete(v4);
  return a1;
}

char *std::vector<mlcore::ModelPropertyBase *>::__init_with_size[abi:ne180100]<std::__wrap_iter<mlcore::ModelProperty<mediaplatform::Data> * const*>,std::__wrap_iter<mlcore::ModelProperty<mediaplatform::Data> * const*>>(char *result, uint64_t *a2, uint64_t *a3, unint64_t a4)
{
  char *v6;
  _QWORD *v7;
  uint64_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<mlcore::ModelPropertyBase *>::__vallocate[abi:ne180100](result, a4);
    v7 = (_QWORD *)*((_QWORD *)v6 + 1);
    while (a2 != a3)
    {
      v8 = *a2++;
      *v7++ = v8;
    }
    *((_QWORD *)v6 + 1) = v7;
  }
  return result;
}

void sub_20A809EFC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void mlcore::SharedObject<std::unordered_set<mediaplatform::Data>,int>::create<std::unordered_set<mediaplatform::Data> const&>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  unsigned __int8 v5;
  int v6;
  uint64_t v7;
  _QWORD *i;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  _QWORD *v11;
  _QWORD *v12;
  unint64_t v13;
  uint8x8_t v14;
  void **v15;
  void *j;
  unint64_t v17;
  _QWORD *v18;
  float v19;
  float v20;
  _BOOL8 v21;
  unint64_t v22;
  unint64_t v23;
  int8x8_t prime;
  void *v25;
  void *v26;
  uint64_t v27;
  _QWORD *v28;
  unint64_t v29;
  uint8x8_t v30;
  unint64_t v31;
  uint8x8_t v32;
  uint64_t v33;
  _QWORD *v34;
  unint64_t v35;
  _QWORD *v36;
  _QWORD *v37;
  unint64_t v38;
  unint64_t *p_shared_weak_owners;
  unint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t v42;
  unint64_t v43;
  void *v44;
  uint64_t v45;
  std::mutex *v46;

  v46 = (std::mutex *)mlcore::SharedObject<std::unordered_set<mediaplatform::Data>,int>::_mutex();
  std::mutex::lock(v46);
  if ((v5 & 1) == 0
  {
    mlcore::SharedObject<std::unordered_set<mediaplatform::Data>,int>::_nextToken(void)::token = operator new();
  }
  v6 = (*(_DWORD *)mlcore::SharedObject<std::unordered_set<mediaplatform::Data>,int>::_nextToken(void)::token)++;
  v7 = operator new();
  *(_OWORD *)v7 = 0u;
  *(_OWORD *)(v7 + 16) = 0u;
  *(_DWORD *)(v7 + 32) = *(_DWORD *)(a2 + 32);
  std::__hash_table<std::__hash_value_type<mlcore::ModelProperty<std::string> *,std::string>,std::__unordered_map_hasher<mlcore::ModelProperty<std::string> *,std::__hash_value_type<mlcore::ModelProperty<std::string> *,std::string>,std::hash<mlcore::ModelProperty<std::string> *>,std::equal_to<mlcore::ModelProperty<std::string> *>,true>,std::__unordered_map_equal<mlcore::ModelProperty<std::string> *,std::__hash_value_type<mlcore::ModelProperty<std::string> *,std::string>,std::equal_to<mlcore::ModelProperty<std::string> *>,std::hash<mlcore::ModelProperty<std::string> *>,true>,std::allocator<std::__hash_value_type<mlcore::ModelProperty<std::string> *,std::string>>>::__rehash<true>(v7, *(_QWORD *)(a2 + 8));
  for (i = *(_QWORD **)(a2 + 16); i; i = (_QWORD *)*i)
    std::__hash_table<mediaplatform::Data,std::hash<mediaplatform::Data>,std::equal_to<mediaplatform::Data>,std::allocator<mediaplatform::Data>>::__emplace_unique_key_args<mediaplatform::Data,mediaplatform::Data const&>(v7, (uint64_t)(i + 2), (const mediaplatform::Data *)(i + 2));
  v45 = a1;
  v9 = (std::__shared_weak_count *)operator new();
  v9->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v9->__shared_owners_;
  v9->__vftable = (std::__shared_weak_count_vtbl *)&off_24C33D7F0;
  v9->__shared_weak_owners_ = 0;
  v9[1].__vftable = (std::__shared_weak_count_vtbl *)v7;
  LODWORD(v9[1].__shared_owners_) = v6;
  v11 = (_QWORD *)mlcore::SharedObject<std::unordered_set<mediaplatform::Data>,int>::_objects();
  v12 = v11;
  v13 = v11[1];
  if (v13)
  {
    v14 = (uint8x8_t)vcnt_s8((int8x8_t)v13);
    v14.i16[0] = vaddlv_u8(v14);
    if (v14.u32[0] > 1uLL)
    {
      v2 = v6;
      if (v13 <= v6)
        v2 = v6 % v13;
    }
    else
    {
      v2 = (v13 - 1) & v6;
    }
    v15 = *(void ***)(*v11 + 8 * v2);
    if (v15)
    {
      for (j = *v15; j; j = *(void **)j)
      {
        v17 = *((_QWORD *)j + 1);
        if (v17 == v6)
        {
          if (*((_DWORD *)j + 4) == v6)
            goto LABEL_77;
        }
        else
        {
          if (v14.u32[0] > 1uLL)
          {
            if (v17 >= v13)
              v17 %= v13;
          }
          else
          {
            v17 &= v13 - 1;
          }
          if (v17 != v2)
            break;
        }
      }
    }
  }
  j = operator new(0x28uLL);
  v18 = v12 + 2;
  *(_QWORD *)j = 0;
  *((_QWORD *)j + 1) = v6;
  *((_DWORD *)j + 4) = v6;
  *((_QWORD *)j + 3) = 0;
  *((_QWORD *)j + 4) = 0;
  v19 = (float)(unint64_t)(v12[3] + 1);
  v20 = *((float *)v12 + 8);
  if (!v13 || (float)(v20 * (float)v13) < v19)
  {
    v21 = 1;
    if (v13 >= 3)
      v21 = (v13 & (v13 - 1)) != 0;
    v22 = v21 | (2 * v13);
    v23 = vcvtps_u32_f32(v19 / v20);
    if (v22 <= v23)
      prime = (int8x8_t)v23;
    else
      prime = (int8x8_t)v22;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
    }
    v13 = v12[1];
    if (*(_QWORD *)&prime > v13)
      goto LABEL_33;
    if (*(_QWORD *)&prime < v13)
    {
      v31 = vcvtps_u32_f32((float)(unint64_t)v12[3] / *((float *)v12 + 8));
      if (v13 < 3 || (v32 = (uint8x8_t)vcnt_s8((int8x8_t)v13), v32.i16[0] = vaddlv_u8(v32), v32.u32[0] > 1uLL))
      {
        v31 = std::__next_prime(v31);
      }
      else
      {
        v33 = 1 << -(char)__clz(v31 - 1);
        if (v31 >= 2)
          v31 = v33;
      }
      if (*(_QWORD *)&prime <= v31)
        prime = (int8x8_t)v31;
      if (*(_QWORD *)&prime >= v13)
      {
        v13 = v12[1];
      }
      else
      {
        if (prime)
        {
LABEL_33:
          if (*(_QWORD *)&prime >> 61)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v25 = operator new(8 * *(_QWORD *)&prime);
          v26 = (void *)*v12;
          *v12 = v25;
          if (v26)
            operator delete(v26);
          v27 = 0;
          v12[1] = prime;
          do
            *(_QWORD *)(*v12 + 8 * v27++) = 0;
          while (*(_QWORD *)&prime != v27);
          v28 = (_QWORD *)*v18;
          if (*v18)
          {
            v29 = v28[1];
            v30 = (uint8x8_t)vcnt_s8(prime);
            v30.i16[0] = vaddlv_u8(v30);
            if (v30.u32[0] > 1uLL)
            {
              if (v29 >= *(_QWORD *)&prime)
                v29 %= *(_QWORD *)&prime;
            }
            else
            {
              v29 &= *(_QWORD *)&prime - 1;
            }
            *(_QWORD *)(*v12 + 8 * v29) = v18;
            v34 = (_QWORD *)*v28;
            if (*v28)
            {
              do
              {
                v35 = v34[1];
                if (v30.u32[0] > 1uLL)
                {
                  if (v35 >= *(_QWORD *)&prime)
                    v35 %= *(_QWORD *)&prime;
                }
                else
                {
                  v35 &= *(_QWORD *)&prime - 1;
                }
                if (v35 != v29)
                {
                  if (!*(_QWORD *)(*v12 + 8 * v35))
                  {
                    *(_QWORD *)(*v12 + 8 * v35) = v28;
                    goto LABEL_58;
                  }
                  *v28 = *v34;
                  *v34 = **(_QWORD **)(*v12 + 8 * v35);
                  **(_QWORD **)(*v12 + 8 * v35) = v34;
                  v34 = v28;
                }
                v35 = v29;
LABEL_58:
                v28 = v34;
                v34 = (_QWORD *)*v34;
                v29 = v35;
              }
              while (v34);
            }
          }
          v13 = (unint64_t)prime;
          goto LABEL_62;
        }
        v44 = (void *)*v12;
        *v12 = 0;
        if (v44)
          operator delete(v44);
        v13 = 0;
        v12[1] = 0;
      }
    }
LABEL_62:
    if ((v13 & (v13 - 1)) != 0)
    {
      if (v13 <= v6)
        v2 = v6 % v13;
      else
        v2 = v6;
    }
    else
    {
      v2 = (v13 - 1) & v6;
    }
  }
  v36 = (_QWORD *)*v12;
  v37 = *(_QWORD **)(*v12 + 8 * v2);
  if (v37)
  {
    *(_QWORD *)j = *v37;
LABEL_75:
    *v37 = j;
    goto LABEL_76;
  }
  *(_QWORD *)j = *v18;
  *v18 = j;
  v36[v2] = v18;
  if (*(_QWORD *)j)
  {
    v38 = *(_QWORD *)(*(_QWORD *)j + 8);
    if ((v13 & (v13 - 1)) != 0)
    {
      if (v38 >= v13)
        v38 %= v13;
    }
    else
    {
      v38 &= v13 - 1;
    }
    v37 = (_QWORD *)(*v12 + 8 * v38);
    goto LABEL_75;
  }
LABEL_76:
  ++v12[3];
LABEL_77:
  p_shared_weak_owners = (unint64_t *)&v9->__shared_weak_owners_;
  do
    v40 = __ldxr(p_shared_weak_owners);
  while (__stxr(v40 + 1, p_shared_weak_owners));
  v41 = (std::__shared_weak_count *)*((_QWORD *)j + 4);
  *((_QWORD *)j + 3) = v7;
  *((_QWORD *)j + 4) = v9;
  if (v41)
    std::__shared_weak_count::__release_weak(v41);
  *(_DWORD *)v45 = v6;
  *(_QWORD *)(v45 + 8) = v7;
  *(_QWORD *)(v45 + 16) = v9;
  do
    v42 = __ldxr(p_shared_owners);
  while (__stxr(v42 + 1, p_shared_owners));
  do
    v43 = __ldaxr(p_shared_owners);
  while (__stlxr(v43 - 1, p_shared_owners));
  if (!v43)
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
  std::mutex::unlock(v46);
}

void sub_20A80A478(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::mutex *a11, char a12, uint64_t a13, int a14, char a15)
{
  __break(1u);
}

void sub_20A80A4BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, std::mutex *a11)
{
  __cxa_end_catch();
  std::mutex::unlock(a11);
  _Unwind_Resume(a1);
}

void sub_20A80A4D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, std::mutex *a11)
{
  std::mutex::unlock(a11);
  _Unwind_Resume(a1);
}

void sub_20A80A4E8()
{
  uint64_t v0;
  uint64_t v1;

  v1 = std::__hash_table<mediaplatform::Data,std::hash<mediaplatform::Data>,std::equal_to<mediaplatform::Data>,std::allocator<mediaplatform::Data>>::~__hash_table(v0);
  MEMORY[0x20BD27AFC](v1, 0x10A0C408EF24B1CLL);
  JUMPOUT(0x20A80A508);
}

uint64_t mlcore::SharedObject<std::unordered_set<mediaplatform::Data>,int>::_mutex()
{
  unsigned __int8 v0;
  uint64_t v2;

  if ((v0 & 1) == 0
  {
    v2 = operator new();
    *(_QWORD *)v2 = 850045863;
    *(_OWORD *)(v2 + 8) = 0u;
    *(_OWORD *)(v2 + 24) = 0u;
    *(_OWORD *)(v2 + 40) = 0u;
    *(_QWORD *)(v2 + 56) = 0;
    mlcore::SharedObject<std::unordered_set<mediaplatform::Data>,int>::_mutex(void)::mutex = v2;
  }
  return mlcore::SharedObject<std::unordered_set<mediaplatform::Data>,int>::_mutex(void)::mutex;
}

void sub_20A80A5A4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t mlcore::SharedObject<std::unordered_set<mediaplatform::Data>,int>::_objects()
{
  unsigned __int8 v0;
  uint64_t v2;

  if ((v0 & 1) == 0
  {
    v2 = operator new();
    *(_OWORD *)v2 = 0u;
    *(_OWORD *)(v2 + 16) = 0u;
    *(_DWORD *)(v2 + 32) = 1065353216;
    mlcore::SharedObject<std::unordered_set<mediaplatform::Data>,int>::_objects(void)::objects = v2;
  }
  return mlcore::SharedObject<std::unordered_set<mediaplatform::Data>,int>::_objects(void)::objects;
}

void sub_20A80A638(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void mlcore::SharedObject<std::unordered_set<mediaplatform::Data>,int>::create<std::unordered_set<mediaplatform::Data> const&>(std::unordered_set<mediaplatform::Data> const&)::{lambda(std::unordered_set<mediaplatform::Data>*)#1}::operator()(int *a1, uint64_t a2)
{
  std::mutex *v4;
  uint64_t *v5;
  uint64_t v6;

  v4 = (std::mutex *)mlcore::SharedObject<std::unordered_set<mediaplatform::Data>,int>::_mutex();
  std::mutex::lock(v4);
  v5 = (uint64_t *)mlcore::SharedObject<std::unordered_set<mediaplatform::Data>,int>::_objects();
  std::__hash_table<std::__hash_value_type<int,std::weak_ptr<std::unordered_set<mediaplatform::Data>>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::weak_ptr<std::unordered_set<mediaplatform::Data>>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::weak_ptr<std::unordered_set<mediaplatform::Data>>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::weak_ptr<std::unordered_set<mediaplatform::Data>>>>>::__erase_unique<int>(v5, *a1);
  if (a2)
  {
    v6 = std::__hash_table<mediaplatform::Data,std::hash<mediaplatform::Data>,std::equal_to<mediaplatform::Data>,std::allocator<mediaplatform::Data>>::~__hash_table(a2);
    MEMORY[0x20BD27AFC](v6, 0x10A0C408EF24B1CLL);
  }
  std::mutex::unlock(v4);
}

void sub_20A80A6B4(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<int,std::weak_ptr<std::unordered_set<mediaplatform::Data>>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::weak_ptr<std::unordered_set<mediaplatform::Data>>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::weak_ptr<std::unordered_set<mediaplatform::Data>>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::weak_ptr<std::unordered_set<mediaplatform::Data>>>>>::__erase_unique<int>(uint64_t *a1, int a2)
{
  unint64_t v2;
  unint64_t v4;
  uint8x8_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t **v8;
  uint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;

  v2 = a1[1];
  if (v2)
  {
    v4 = a2;
    v5 = (uint8x8_t)vcnt_s8((int8x8_t)v2);
    v5.i16[0] = vaddlv_u8(v5);
    if (v5.u32[0] > 1uLL)
    {
      v6 = a2;
      if (v2 <= a2)
        v6 = a2 % v2;
    }
    else
    {
      v6 = (v2 - 1) & a2;
    }
    v7 = *a1;
    v8 = *(uint64_t ***)(*a1 + 8 * v6);
    if (v8)
    {
      v9 = *v8;
      if (*v8)
      {
        v10 = v2 - 1;
        do
        {
          v11 = v9[1];
          if (v11 == v4)
          {
            if (*((_DWORD *)v9 + 4) == a2)
            {
              if (v5.u32[0] > 1uLL)
              {
                if (v2 <= v4)
                  v4 %= v2;
              }
              else
              {
                v4 &= v10;
              }
              v12 = *(uint64_t **)(v7 + 8 * v4);
              do
              {
                v13 = v12;
                v12 = (uint64_t *)*v12;
              }
              while (v12 != v9);
              if (v13 == a1 + 2)
                goto LABEL_36;
              v14 = v13[1];
              if (v5.u32[0] > 1uLL)
              {
                if (v14 >= v2)
                  v14 %= v2;
              }
              else
              {
                v14 &= v10;
              }
              if (v14 != v4)
              {
LABEL_36:
                if (!*v9)
                  goto LABEL_37;
                v15 = *(_QWORD *)(*v9 + 8);
                if (v5.u32[0] > 1uLL)
                {
                  if (v15 >= v2)
                    v15 %= v2;
                }
                else
                {
                  v15 &= v10;
                }
                if (v15 != v4)
LABEL_37:
                  *(_QWORD *)(v7 + 8 * v4) = 0;
              }
              v16 = *v9;
              if (*v9)
              {
                v17 = *(_QWORD *)(v16 + 8);
                if (v5.u32[0] > 1uLL)
                {
                  if (v17 >= v2)
                    v17 %= v2;
                }
                else
                {
                  v17 &= v10;
                }
                if (v17 != v4)
                {
                  *(_QWORD *)(*a1 + 8 * v17) = v13;
                  v16 = *v9;
                }
              }
              *v13 = v16;
              *v9 = 0;
              --a1[3];
              std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<int,std::weak_ptr<std::unordered_set<long long>>>,void *>>>::operator()[abi:ne180100](1, v9);
              return;
            }
          }
          else
          {
            if (v5.u32[0] > 1uLL)
            {
              if (v11 >= v2)
                v11 %= v2;
            }
            else
            {
              v11 &= v10;
            }
            if (v11 != v6)
              return;
          }
          v9 = (uint64_t *)*v9;
        }
        while (v9);
      }
    }
  }
}

void std::__shared_ptr_pointer<std::unordered_set<mediaplatform::Data> *,mlcore::SharedObject<std::unordered_set<mediaplatform::Data>,int> mlcore::SharedObject<std::unordered_set<mediaplatform::Data>,int>::create<std::unordered_set<mediaplatform::Data> const&>(std::unordered_set<mediaplatform::Data> const&)::{lambda(std::unordered_set<mediaplatform::Data> *)#1},std::allocator<std::unordered_set<mediaplatform::Data>>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x20BD27AFCLL);
}

void std::__shared_ptr_pointer<std::unordered_set<mediaplatform::Data> *,mlcore::SharedObject<std::unordered_set<mediaplatform::Data>,int> mlcore::SharedObject<std::unordered_set<mediaplatform::Data>,int>::create<std::unordered_set<mediaplatform::Data> const&>(std::unordered_set<mediaplatform::Data> const&)::{lambda(std::unordered_set<mediaplatform::Data> *)#1},std::allocator<std::unordered_set<mediaplatform::Data>>>::__on_zero_shared(uint64_t a1)
{
  uint64_t v2;
  std::mutex *v3;
  uint64_t *v4;
  uint64_t v5;

  v2 = *(_QWORD *)(a1 + 24);
  v3 = (std::mutex *)mlcore::SharedObject<std::unordered_set<mediaplatform::Data>,int>::_mutex();
  std::mutex::lock(v3);
  v4 = (uint64_t *)mlcore::SharedObject<std::unordered_set<mediaplatform::Data>,int>::_objects();
  std::__hash_table<std::__hash_value_type<int,std::weak_ptr<std::unordered_set<mediaplatform::Data>>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::weak_ptr<std::unordered_set<mediaplatform::Data>>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::weak_ptr<std::unordered_set<mediaplatform::Data>>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::weak_ptr<std::unordered_set<mediaplatform::Data>>>>>::__erase_unique<int>(v4, *(_DWORD *)(a1 + 32));
  if (v2)
  {
    v5 = std::__hash_table<mediaplatform::Data,std::hash<mediaplatform::Data>,std::equal_to<mediaplatform::Data>,std::allocator<mediaplatform::Data>>::~__hash_table(v2);
    MEMORY[0x20BD27AFC](v5, 0x10A0C408EF24B1CLL);
  }
  std::mutex::unlock(v3);
}

void sub_20A80A904(void *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  __clang_call_terminate(a1);
}

uint64_t std::__shared_ptr_pointer<std::unordered_set<mediaplatform::Data> *,mlcore::SharedObject<std::unordered_set<mediaplatform::Data>,int> mlcore::SharedObject<std::unordered_set<mediaplatform::Data>,int>::create<std::unordered_set<mediaplatform::Data> const&>(std::unordered_set<mediaplatform::Data> const&)::{lambda(std::unordered_set<mediaplatform::Data> *)#1},std::allocator<std::unordered_set<mediaplatform::Data>>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN6mlcore12SharedObjectINSt3__113unordered_setIN13mediaplatform4DataENS1_4hashIS4_EENS1_8equal_toIS4_EENS1_9allocatorIS4_EEEEiE6createIJRKSB_EEESC_DpOT_EUlPSB_E_"))
  {
    return a1 + 32;
  }
  else
  {
    return 0;
  }
}

void std::__hash_table<mediaplatform::Data,std::hash<mediaplatform::Data>,std::equal_to<mediaplatform::Data>,std::allocator<mediaplatform::Data>>::__emplace_unique_key_args<mediaplatform::Data,mediaplatform::Data const&>(uint64_t a1, uint64_t a2, const mediaplatform::Data *a3)
{
  unint64_t v3;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  unint64_t v11;
  uint64_t ***v12;
  uint64_t **v13;
  size_t v14;
  const void *v15;
  unint64_t v16;
  _QWORD *v17;
  float v18;
  float v19;
  _BOOL8 v20;
  unint64_t v21;
  unint64_t v22;
  size_t v23;
  uint64_t v24;
  _QWORD *v25;
  unint64_t v26;

  v7 = std::hash<mediaplatform::Data>::operator()(*(_QWORD *)(a2 + 8), *(void **)(a2 + 24));
  v8 = v7;
  v9 = *(_QWORD *)(a1 + 8);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    v11 = v10.u32[0];
    if (v10.u32[0] > 1uLL)
    {
      v3 = v7;
      if (v7 >= v9)
        v3 = v7 % v9;
    }
    else
    {
      v3 = (v9 - 1) & v7;
    }
    v12 = *(uint64_t ****)(*(_QWORD *)a1 + 8 * v3);
    if (v12)
    {
      v13 = *v12;
      if (*v12)
      {
        v14 = *(_QWORD *)(a2 + 8);
        v15 = *(const void **)(a2 + 24);
        do
        {
          v16 = (unint64_t)v13[1];
          if (v16 == v8)
          {
            if ((uint64_t *)v14 == v13[3] && !memcmp(v13[5], v15, v14))
              return;
          }
          else
          {
            if (v11 > 1)
            {
              if (v16 >= v9)
                v16 %= v9;
            }
            else
            {
              v16 &= v9 - 1;
            }
            if (v16 != v3)
              break;
          }
          v13 = (uint64_t **)*v13;
        }
        while (v13);
      }
    }
  }
  v17 = operator new(0x38uLL);
  *v17 = 0;
  v17[1] = v8;
  mediaplatform::Data::Data((mediaplatform::Data *)(v17 + 2), a3);
  v18 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v19 = *(float *)(a1 + 32);
  if (!v9 || (float)(v19 * (float)v9) < v18)
  {
    v20 = 1;
    if (v9 >= 3)
      v20 = (v9 & (v9 - 1)) != 0;
    v21 = v20 | (2 * v9);
    v22 = vcvtps_u32_f32(v18 / v19);
    if (v21 <= v22)
      v23 = v22;
    else
      v23 = v21;
    std::__hash_table<std::__hash_value_type<mlcore::ModelProperty<std::string> *,std::string>,std::__unordered_map_hasher<mlcore::ModelProperty<std::string> *,std::__hash_value_type<mlcore::ModelProperty<std::string> *,std::string>,std::hash<mlcore::ModelProperty<std::string> *>,std::equal_to<mlcore::ModelProperty<std::string> *>,true>,std::__unordered_map_equal<mlcore::ModelProperty<std::string> *,std::__hash_value_type<mlcore::ModelProperty<std::string> *,std::string>,std::equal_to<mlcore::ModelProperty<std::string> *>,std::hash<mlcore::ModelProperty<std::string> *>,true>,std::allocator<std::__hash_value_type<mlcore::ModelProperty<std::string> *,std::string>>>::__rehash<true>(a1, v23);
    v9 = *(_QWORD *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9)
        v3 = v8 % v9;
      else
        v3 = v8;
    }
    else
    {
      v3 = (v9 - 1) & v8;
    }
  }
  v24 = *(_QWORD *)a1;
  v25 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v25)
  {
    *v17 = *v25;
LABEL_40:
    *v25 = v17;
    goto LABEL_41;
  }
  *v17 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v17;
  *(_QWORD *)(v24 + 8 * v3) = a1 + 16;
  if (*v17)
  {
    v26 = *(_QWORD *)(*v17 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v26 >= v9)
        v26 %= v9;
    }
    else
    {
      v26 &= v9 - 1;
    }
    v25 = (_QWORD *)(*(_QWORD *)a1 + 8 * v26);
    goto LABEL_40;
  }
LABEL_41:
  ++*(_QWORD *)(a1 + 24);
}

void sub_20A80AB94(_Unwind_Exception *a1)
{
  void *v1;
  void (***v2)(_QWORD);

  (**v2)(v2);
  operator delete(v1);
  _Unwind_Resume(a1);
}

unint64_t std::hash<mediaplatform::Data>::operator()(size_t __len, void *a2)
{
  unint64_t v2;
  void *__p[2];
  char v5;

  std::string::basic_string[abi:ne180100](__p, a2, __len);
  v2 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)__p);
  if (v5 < 0)
    operator delete(__p[0]);
  return v2;
}

void sub_20A80AC5C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__hash_table<mediaplatform::Data,std::hash<mediaplatform::Data>,std::equal_to<mediaplatform::Data>,std::allocator<mediaplatform::Data>>::~__hash_table((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t mlcore::AnyInPredicate<mediaplatform::Data>::values(uint64_t a1)
{
  return *(_QWORD *)(a1 + 40);
}

uint64_t mlcore::AnyInPredicate<mediaplatform::Data>::AnyInPredicate(uint64_t a1, uint64_t **a2, uint64_t a3)
{
  uint64_t *v5;
  uint64_t *v6;
  unint64_t v7;
  void *v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  void *v13;
  uint64_t v14;
  uint64_t v15;

  v6 = *a2;
  v5 = a2[1];
  v7 = v5 - *a2;
  v14 = 0;
  v15 = 0;
  v13 = 0;
  std::vector<mlcore::ModelPropertyBase *>::__init_with_size[abi:ne180100]<std::__wrap_iter<mlcore::ModelProperty<mediaplatform::Data> * const*>,std::__wrap_iter<mlcore::ModelProperty<mediaplatform::Data> * const*>>((char *)&v13, v6, v5, v7);
  *(_QWORD *)a1 = off_24C3399E0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  v8 = v13;
  std::vector<mlcore::ModelPropertyBase *>::__init_with_size[abi:ne180100]<mlcore::ModelPropertyBase **,mlcore::ModelPropertyBase **>((_QWORD *)(a1 + 8), v13, v14, (v14 - (uint64_t)v13) >> 3);
  if (v8)
    operator delete(v8);
  *(_QWORD *)a1 = &unk_24C3372B0;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)a3;
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a3 + 8);
  v9 = *(_QWORD *)(a3 + 16);
  *(_QWORD *)(a1 + 48) = v9;
  if (v9)
  {
    v10 = (unint64_t *)(v9 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  return a1;
}

{
  return __ZN6mlcore14AnyInPredicateIN13mediaplatform4DataEEC2ERKNSt3__16vectorIPNS_13ModelPropertyIS2_EENS4_9allocatorIS8_EEEENS_12SharedObjectINS4_13unordered_setIS2_NS4_4hashIS2_EENS4_8equal_toIS2_EENS9_IS2_EEEEiEE(a1, a2, a3);
}

void sub_20A80AD48(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

_QWORD *mlcore::AnyInPredicate<mediaplatform::Data>::_lookupFunctionName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "HashtableLookupData");
}

void mediaplatform::Describable::~Describable(mediaplatform::Describable *this)
{
  JUMPOUT(0x20BD27AFCLL);
}

uint64_t mediaplatform::Describable::toString(mediaplatform::Describable *this, const mediaplatform::FormatOptions *a2)
{
  return (*(uint64_t (**)(mediaplatform::Describable *))(*(_QWORD *)this + 40))(this);
}

_QWORD *mediaplatform::Describable::className@<X0>(mediaplatform::Describable *this@<X0>, _QWORD *a2@<X8>)
{
  if (!this)
    __cxa_bad_typeid();
  return std::string::basic_string[abi:ne180100]<0>(a2, (char *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL));
}

void mediaplatform::Describable::descriptionAttributes(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

uint64_t mediaplatform::Describable::description(mediaplatform::Describable *this)
{
  void *p_p;
  uint64_t v3;
  uint64_t *v4;
  uint64_t *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  void *__p;
  uint64_t v11;
  unsigned __int8 v12;
  _QWORD v13[11];
  char v14;
  uint64_t v15;
  char v16;
  void **v17;

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v13);
  LOBYTE(__p) = 60;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)&__p, 1);
  (*(void (**)(void **__return_ptr, mediaplatform::Describable *))(*(_QWORD *)this + 24))(&__p, this);
  if ((v12 & 0x80u) == 0)
    p_p = &__p;
  else
    p_p = __p;
  if ((v12 & 0x80u) == 0)
    v3 = v12;
  else
    v3 = v11;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)p_p, v3);
  LOBYTE(v17) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)&v17, 1);
  *(_DWORD *)((char *)&v13[1] + *(_QWORD *)(v13[0] - 24)) = *(_DWORD *)((_BYTE *)&v13[1] + *(_QWORD *)(v13[0] - 24)) & 0xFFFFFFB5 | 8;
  std::ostream::operator<<();
  if ((char)v12 < 0)
    operator delete(__p);
  (*(void (**)(void **__return_ptr, mediaplatform::Describable *))(*(_QWORD *)this + 32))(&__p, this);
  v4 = (uint64_t *)__p;
  v5 = (uint64_t *)v11;
  if (__p != (void *)v11)
  {
    do
    {
      v16 = 32;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)&v16, 1);
      v6 = *((char *)v4 + 23);
      if (v6 >= 0)
        v7 = (uint64_t)v4;
      else
        v7 = *v4;
      if (v6 >= 0)
        v8 = *((unsigned __int8 *)v4 + 23);
      else
        v8 = v4[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, v7, v8);
      v4 += 3;
    }
    while (v4 != v5);
  }
  v16 = 62;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)&v16, 1);
  std::stringbuf::str();
  v17 = &__p;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v17);
  v13[0] = *MEMORY[0x24BEDB800];
  *(_QWORD *)((char *)v13 + *(_QWORD *)(v13[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  v13[1] = MEMORY[0x24BEDB848] + 16;
  if (v14 < 0)
    operator delete((void *)v13[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x20BD27A84](&v15);
}

void sub_20A80AFB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  std::ostringstream::~ostringstream((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void mlcore::Podcast::~Podcast(mlcore::Podcast *this)
{
  *(_QWORD *)this = off_24C33A860;
  mlcore::PropertyCacheBase<long long,int,double,std::string,mediaplatform::Data>::~PropertyCacheBase((_QWORD *)this + 1);
}

{
  *(_QWORD *)this = off_24C33A860;
  mlcore::PropertyCacheBase<long long,int,double,std::string,mediaplatform::Data>::~PropertyCacheBase((_QWORD *)this + 1);
  JUMPOUT(0x20BD27AFCLL);
}

{
  *(_QWORD *)this = off_24C33A860;
  mlcore::PropertyCacheBase<long long,int,double,std::string,mediaplatform::Data>::~PropertyCacheBase((_QWORD *)this + 1);
}

double std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::TypedEntityClass<mlcore::Podcast>::sharedPointer(void)::{lambda(void)#1} &&>>()
{
  uint64_t v0;
  double result;

  v0 = operator new();
  result = 0.0;
  *(_OWORD *)(v0 + 16) = 0u;
  *(_OWORD *)(v0 + 32) = 0u;
  *(_OWORD *)(v0 + 48) = 0u;
  *(_OWORD *)(v0 + 64) = 0u;
  *(_OWORD *)(v0 + 80) = 0u;
  *(_QWORD *)(v0 + 96) = 0;
  *(_DWORD *)(v0 + 104) = 1065353216;
  *(_OWORD *)(v0 + 112) = 0u;
  *(_OWORD *)(v0 + 128) = 0u;
  *(_DWORD *)(v0 + 144) = 1065353216;
  *(_QWORD *)v0 = &off_24C339230;
  *(_QWORD *)(v0 + 8) = 850045863;
  mlcore::TypedEntityClass<mlcore::Podcast>::sharedPointer(void)::__sharedPointer = v0;
  return result;
}

void mlcore::TypedEntityClass<mlcore::Podcast>::~TypedEntityClass(mlcore::EntityClass *a1)
{
  mlcore::EntityClass::~EntityClass(a1);
  JUMPOUT(0x20BD27AFCLL);
}

uint64_t mlcore::TypedEntityClass<mlcore::Podcast>::description(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
}

__n128 mlcore::TypedEntityClass<mlcore::Podcast>::create@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, __n128 *a4@<X8>)
{
  char *v8;
  uint64_t v9;
  unint64_t *v10;
  uint64_t v11;
  __n128 result;
  __n128 v13;
  unint64_t v14[3];
  unint64_t *v15;
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  v8 = (char *)operator new(0x100uLL);
  *((_QWORD *)v8 + 1) = 0;
  *((_QWORD *)v8 + 2) = 0;
  *(_QWORD *)v8 = &off_24C33D518;
  *(_OWORD *)(v8 + 40) = 0u;
  *(_OWORD *)(v8 + 56) = 0u;
  *((_DWORD *)v8 + 18) = 1065353216;
  *((_OWORD *)v8 + 5) = 0u;
  *((_OWORD *)v8 + 6) = 0u;
  *((_DWORD *)v8 + 28) = 1065353216;
  *(_OWORD *)(v8 + 120) = 0u;
  *(_OWORD *)(v8 + 136) = 0u;
  *((_DWORD *)v8 + 38) = 1065353216;
  *((_OWORD *)v8 + 10) = 0u;
  *((_OWORD *)v8 + 11) = 0u;
  *((_DWORD *)v8 + 48) = 1065353216;
  *(_OWORD *)(v8 + 216) = 0u;
  *((_DWORD *)v8 + 58) = 1065353216;
  *((_QWORD *)v8 + 30) = &unk_24C3371E8;
  *((_QWORD *)v8 + 31) = a2;
  *(_OWORD *)(v8 + 200) = 0u;
  v9 = (uint64_t)(v8 + 200);
  *((_QWORD *)v8 + 4) = &off_24C3371C0;
  *((_QWORD *)v8 + 3) = &off_24C33AA58;
  v13.n128_u64[0] = (unint64_t)(v8 + 24);
  v13.n128_u64[1] = (unint64_t)v8;
  v14[0] = (unint64_t)&off_24C33B140;
  v15 = v14;
  mlcore::PropertyCache::mergePropertiesFromCache((uint64_t)(v8 + 32), a3, (uint64_t)v14);
  v10 = v15;
  if (v15 == v14)
  {
    v11 = 4;
    v10 = v14;
    goto LABEL_5;
  }
  if (v15)
  {
    v11 = 5;
LABEL_5:
    (*(void (**)(void))(*v10 + 8 * v11))();
  }
  v14[0] = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 112))(a1);
  std::__hash_table<std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>,std::__unordered_map_hasher<mlcore::ModelProperty<long long> *,std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>,std::hash<mlcore::ModelProperty<long long> *>,std::equal_to<mlcore::ModelProperty<long long> *>,true>,std::__unordered_map_equal<mlcore::ModelProperty<long long> *,std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>,std::equal_to<mlcore::ModelProperty<long long> *>,std::hash<mlcore::ModelProperty<long long> *>,true>,std::allocator<std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>>>::__emplace_unique_key_args<mlcore::ModelProperty<long long> *,std::piecewise_construct_t const&,std::tuple<mlcore::ModelProperty<long long> * const&>,std::tuple<>>(v9, v14[0], v14)[3] = a2;
  result = v13;
  *a4 = v13;
  return result;
}

void sub_20A80B284(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15)
{
  char *v15;
  char *v17;
  uint64_t v18;

  v17 = a15;
  if (a15 == v15)
  {
    v18 = 4;
    v17 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v18 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v17 + 8 * v18))();
LABEL_6:
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t mlcore::TypedEntityClass<mlcore::Podcast>::name(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
}

uint64_t mlcore::TypedEntityClass<mlcore::Podcast>::entityType()
{
  return 4;
}

BOOL mlcore::TypedEntityClass<mlcore::Podcast>::isRevisionTrackable(uint64_t a1)
{
  return (*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1) != -1;
}

uint64_t mlcore::TypedEntityClass<mlcore::Podcast>::isCloudUpdatable()
{
  return 1;
}

void mlcore::TypedEntityClass<mlcore::Podcast>::databaseTablesToDeleteFrom(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

void mlcore::TypedEntityClass<mlcore::Podcast>::databaseTablesToInsertInto(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

uint64_t mlcore::TypedEntityClass<mlcore::Podcast>::sectionPropertyForOrderingProperty(mlcore *a1, mlcore *a2)
{
  mlcore *HasTitle;

  HasTitle = (mlcore *)mlcore::AlbumPropertyOrder(a1);
  if (HasTitle == a2)
    return mlcore::AlbumPropertyOrderSection(HasTitle);
  HasTitle = (mlcore *)mlcore::AlbumPropertyHasTitle(HasTitle);
  if (HasTitle == a2)
    return mlcore::AlbumPropertyOrderSection(HasTitle);
  else
    return 0;
}

mlcore::AlbumTable *_ZNSt3__115allocate_sharedB8ne180100IN6mlcore10AlbumTableENS_9allocatorIS2_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(mlcore::AlbumTable **a1)
{
  _QWORD *v2;
  mlcore::AlbumTable *result;

  v2 = operator new(0xB28uLL);
  v2[1] = 0;
  v2[2] = 0;
  *v2 = &off_24C33C1D8;
  result = mlcore::AlbumTable::AlbumTable((mlcore::AlbumTable *)(v2 + 3));
  *a1 = result;
  a1[1] = (mlcore::AlbumTable *)v2;
  return result;
}

void sub_20A80B3B8(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<mlcore::AlbumTable>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C33C1D8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<mlcore::AlbumTable>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C33C1D8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x20BD27AFCLL);
}

uint64_t std::__shared_ptr_emplace<mlcore::AlbumTable>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__shared_ptr_emplace<mlcore::Podcast>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C33D518;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<mlcore::Podcast>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C33D518;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x20BD27AFCLL);
}

uint64_t std::__shared_ptr_emplace<mlcore::Podcast>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

double mlcore::Podcast::Podcast(mlcore::Podcast *this, uint64_t a2)
{
  double result;

  result = 0.0;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_DWORD *)this + 12) = 1065353216;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *((_DWORD *)this + 22) = 1065353216;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_DWORD *)this + 32) = 1065353216;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 152) = 0u;
  *((_DWORD *)this + 42) = 1065353216;
  *((_OWORD *)this + 11) = 0u;
  *((_OWORD *)this + 12) = 0u;
  *((_DWORD *)this + 52) = 1065353216;
  *((_QWORD *)this + 27) = &unk_24C3371E8;
  *((_QWORD *)this + 28) = a2;
  *(_QWORD *)this = &off_24C33AA58;
  *((_QWORD *)this + 1) = &off_24C3371C0;
  return result;
}

{
  double result;

  result = 0.0;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_DWORD *)this + 12) = 1065353216;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *((_DWORD *)this + 22) = 1065353216;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_DWORD *)this + 32) = 1065353216;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 152) = 0u;
  *((_DWORD *)this + 42) = 1065353216;
  *((_OWORD *)this + 11) = 0u;
  *((_OWORD *)this + 12) = 0u;
  *((_DWORD *)this + 52) = 1065353216;
  *((_QWORD *)this + 27) = &unk_24C3371E8;
  *((_QWORD *)this + 28) = a2;
  *(_QWORD *)this = &off_24C33AA58;
  *((_QWORD *)this + 1) = &off_24C3371C0;
  return result;
}

uint64_t MemHandleGetPtr(uint64_t result)
{
  if (result)
    return *(_QWORD *)result;
  return result;
}

_DWORD *MemNewHandleClear(size_t a1)
{
  _DWORD *v2;
  void *v3;

  v2 = malloc_type_malloc(0x10uLL, 0x10800409227ACB4uLL);
  if (v2)
  {
    v3 = malloc_type_calloc(a1, 1uLL, 0x82ECC85uLL);
    *(_QWORD *)v2 = v3;
    if (v3)
    {
      v2[2] = a1;
    }
    else
    {
      free(v2);
      return 0;
    }
  }
  return v2;
}

_DWORD *MemNewHandle(size_t a1)
{
  _DWORD *v2;
  void *v3;

  v2 = malloc_type_malloc(0x10uLL, 0x10800409227ACB4uLL);
  if (v2)
  {
    v3 = malloc_type_malloc(a1, 0xC32ADC66uLL);
    *(_QWORD *)v2 = v3;
    if (v3)
    {
      v2[2] = a1;
    }
    else
    {
      free(v2);
      return 0;
    }
  }
  return v2;
}

uint64_t MemResizeHandle(void ***a1, int a2)
{
  void **v4;
  unint64_t v5;
  int v6;
  void **v8;

  if (!a1)
    return 4294967246;
  v4 = *a1;
  if (*a1)
  {
    v5 = *((unsigned int *)v4 + 2);
    v6 = v5 + a2;
    if (a2 < 0 && v6 < 0)
    {
      return 4294967246;
    }
    else
    {
      if (v5 < v6)
        *v4 = malloc_type_realloc(*v4, v6, 0xEB0A7651uLL);
      *((_DWORD *)v4 + 2) = v6;
      if (a2 >= 1)
        bzero((char *)**a1 + (int)v5, a2);
      return 0;
    }
  }
  else
  {
    v8 = (void **)MemNewHandleClear(a2);
    *a1 = v8;
    if (v8)
      return 0;
    else
      return 4294967188;
  }
}

uint64_t MemGetHandleSize(uint64_t result)
{
  if (result)
    return *(unsigned int *)(result + 8);
  return result;
}

uint64_t MemSetHandleSize(uint64_t a1, size_t size)
{
  int v2;

  v2 = size;
  if (*(unsigned int *)(a1 + 8) < size)
    *(_QWORD *)a1 = malloc_type_realloc(*(void **)a1, size, 0xEB0A7651uLL);
  *(_DWORD *)(a1 + 8) = v2;
  return 0;
}

void MemDisposeHandle(void **a1)
{
  void *v2;

  if (a1)
  {
    v2 = *a1;
    if (v2)
      free(v2);
    free(a1);
  }
}

uint64_t mlcore::AndPredicate::description(mlcore::AndPredicate *this)
{
  uint64_t v2;
  uint64_t v3;
  char v4;
  void **v5;
  uint64_t v6;
  void *__p[2];
  unsigned __int8 v9;
  _QWORD v10[11];
  char v11;
  uint64_t v12;

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v10);
  LOBYTE(__p[0]) = 40;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)__p, 1);
  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  if (v2 != v3)
  {
    v4 = 1;
    do
    {
      if ((v4 & 1) == 0)
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)" and ", 5);
      (*(void (**)(void **__return_ptr))(**(_QWORD **)v2 + 40))(__p);
      if ((v9 & 0x80u) == 0)
        v5 = __p;
      else
        v5 = (void **)__p[0];
      if ((v9 & 0x80u) == 0)
        v6 = v9;
      else
        v6 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)v5, v6);
      if ((char)v9 < 0)
        operator delete(__p[0]);
      v4 = 0;
      v2 += 16;
    }
    while (v2 != v3);
  }
  LOBYTE(__p[0]) = 41;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)__p, 1);
  std::stringbuf::str();
  v10[0] = *MEMORY[0x24BEDB800];
  *(_QWORD *)((char *)v10 + *(_QWORD *)(v10[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  v10[1] = MEMORY[0x24BEDB848] + 16;
  if (v11 < 0)
    operator delete((void *)v10[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x20BD27A84](&v12);
}

void sub_20A80B964(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  std::ostringstream::~ostringstream((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t mlcore::AndPredicate::matches(uint64_t a1, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  char v19;
  uint64_t v21;
  std::__shared_weak_count *v22;
  uint64_t v23;
  std::__shared_weak_count *v24;

  v2 = *(uint64_t **)(a1 + 8);
  v3 = *(uint64_t **)(a1 + 16);
  if (v2 == v3)
    return 1;
  do
  {
    v5 = *v2;
    v6 = (std::__shared_weak_count *)v2[1];
    v23 = *v2;
    v24 = v6;
    if (v6)
    {
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v8 = __ldxr(p_shared_owners);
      while (__stxr(v8 + 1, p_shared_owners));
    }
    v9 = (std::__shared_weak_count *)a2[1];
    v21 = *a2;
    v22 = v9;
    if (v9)
    {
      v10 = (unint64_t *)&v9->__shared_owners_;
      do
        v11 = __ldxr(v10);
      while (__stxr(v11 + 1, v10));
    }
    v12 = (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)v5 + 48))(v5, &v21);
    v13 = v22;
    if (v22)
    {
      v14 = (unint64_t *)&v22->__shared_owners_;
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 - 1, v14));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
    v16 = v24;
    if (v24)
    {
      v17 = (unint64_t *)&v24->__shared_owners_;
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
    v2 += 2;
    if (v2 == v3)
      v19 = 0;
    else
      v19 = v12;
  }
  while ((v19 & 1) != 0);
  return v12;
}

void sub_20A80BABC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

uint64_t std::allocate_shared[abi:ne180100]<mediaplatform::SQLBinaryExpressionList,std::allocator<mediaplatform::SQLBinaryExpressionList>,std::vector<std::shared_ptr<mediaplatform::SQLExpression const>> &,mediaplatform::SQLBinaryExpression::BinaryOperator,void>(uint64_t *a1, _QWORD **a2, int a3)
{
  _QWORD *v6;
  uint64_t result;

  v6 = operator new(0x60uLL);
  v6[1] = 0;
  v6[2] = 0;
  *v6 = &off_24C33C0F8;
  result = mediaplatform::SQLBinaryExpressionList::SQLBinaryExpressionList((uint64_t)(v6 + 3), a2, a3);
  *a1 = result;
  a1[1] = (uint64_t)v6;
  return result;
}

void sub_20A80BB30(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<mediaplatform::SQLBinaryExpressionList>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C33C0F8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<mediaplatform::SQLBinaryExpressionList>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C33C0F8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x20BD27AFCLL);
}

uint64_t mlcore::OrPredicate::description(mlcore::OrPredicate *this)
{
  uint64_t v2;
  uint64_t v3;
  char v4;
  void **v5;
  uint64_t v6;
  void *__p[2];
  unsigned __int8 v9;
  _QWORD v10[11];
  char v11;
  uint64_t v12;

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v10);
  LOBYTE(__p[0]) = 40;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)__p, 1);
  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  if (v2 != v3)
  {
    v4 = 1;
    do
    {
      if ((v4 & 1) == 0)
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)" or ", 4);
      (*(void (**)(void **__return_ptr))(**(_QWORD **)v2 + 40))(__p);
      if ((v9 & 0x80u) == 0)
        v5 = __p;
      else
        v5 = (void **)__p[0];
      if ((v9 & 0x80u) == 0)
        v6 = v9;
      else
        v6 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)v5, v6);
      if ((char)v9 < 0)
        operator delete(__p[0]);
      v4 = 0;
      v2 += 16;
    }
    while (v2 != v3);
  }
  LOBYTE(__p[0]) = 41;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)__p, 1);
  std::stringbuf::str();
  v10[0] = *MEMORY[0x24BEDB800];
  *(_QWORD *)((char *)v10 + *(_QWORD *)(v10[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  v10[1] = MEMORY[0x24BEDB848] + 16;
  if (v11 < 0)
    operator delete((void *)v10[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x20BD27A84](&v12);
}

void sub_20A80BD40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  std::ostringstream::~ostringstream((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t mlcore::OrPredicate::matches(uint64_t a1, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  char v19;
  uint64_t v21;
  std::__shared_weak_count *v22;
  uint64_t v23;
  std::__shared_weak_count *v24;

  v2 = *(uint64_t **)(a1 + 8);
  v3 = *(uint64_t **)(a1 + 16);
  if (v2 == v3)
    return 0;
  do
  {
    v5 = *v2;
    v6 = (std::__shared_weak_count *)v2[1];
    v23 = *v2;
    v24 = v6;
    if (v6)
    {
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v8 = __ldxr(p_shared_owners);
      while (__stxr(v8 + 1, p_shared_owners));
    }
    v9 = (std::__shared_weak_count *)a2[1];
    v21 = *a2;
    v22 = v9;
    if (v9)
    {
      v10 = (unint64_t *)&v9->__shared_owners_;
      do
        v11 = __ldxr(v10);
      while (__stxr(v11 + 1, v10));
    }
    v12 = (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)v5 + 48))(v5, &v21);
    v13 = v22;
    if (v22)
    {
      v14 = (unint64_t *)&v22->__shared_owners_;
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 - 1, v14));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
    v16 = v24;
    if (v24)
    {
      v17 = (unint64_t *)&v24->__shared_owners_;
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
    v2 += 2;
    if (v2 == v3)
      v19 = 1;
    else
      v19 = v12;
  }
  while ((v19 & 1) == 0);
  return v12;
}

void sub_20A80BE98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

uint64_t mlcore::CompoundPredicate::CompoundPredicate(uint64_t a1, _QWORD **a2)
{
  *(_QWORD *)a1 = off_24C339690;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  std::vector<std::shared_ptr<mlcore::Predicate>>::__init_with_size[abi:ne180100]<std::shared_ptr<mlcore::Predicate>*,std::shared_ptr<mlcore::Predicate>*>((char *)(a1 + 8), *a2, a2[1], ((char *)a2[1] - (char *)*a2) >> 4);
  return a1;
}

uint64_t mlcore::CompoundPredicate::subpredicates(mlcore::CompoundPredicate *this)
{
  return (uint64_t)this + 8;
}

__int128 *std::remove[abi:ne180100]<std::__wrap_iter<std::shared_ptr<mlcore::Predicate> *>,decltype(nullptr)>(__int128 *result, __int128 *a2)
{
  __int128 *i;

  if (result == a2)
  {
LABEL_4:
    result = a2;
  }
  else
  {
    while (*(_QWORD *)result)
    {
      if (++result == a2)
        goto LABEL_4;
    }
  }
  if (result != a2)
  {
    for (i = result + 1; i != a2; ++i)
    {
      if (*(_QWORD *)i)
        result = (__int128 *)(std::shared_ptr<mlcore::Predicate>::operator=[abi:ne180100]((uint64_t)result, i) + 16);
    }
  }
  return result;
}

void std::__shared_ptr_emplace<mlcore::AndPredicate>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C33C4B0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<mlcore::AndPredicate>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C33C4B0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x20BD27AFCLL);
}

void std::__shared_ptr_emplace<mlcore::OrPredicate>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C33C360;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<mlcore::OrPredicate>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C33C360;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x20BD27AFCLL);
}

void mlcore::CloudKVSTable::~CloudKVSTable(mlcore::CloudKVSTable *this)
{
  mlcore::MediaTable<std::string,long long,long long,double,long long,long long>::~MediaTable((uint64_t)this);
  JUMPOUT(0x20BD27AFCLL);
}

uint64_t mediaplatform::DatabaseTable<std::string,long long,long long,double,long long,long long>::columnCount()
{
  return 6;
}

void mlcore::MediaTable<std::string,long long,long long,double,long long,long long>::~MediaTable(uint64_t a1)
{
  *(_QWORD *)a1 = &off_24C335F70;
  *(_QWORD *)(a1 + 640) = off_24C335D90;
  if (*(char *)(a1 + 671) < 0)
    operator delete(*(void **)(a1 + 648));
  *(_QWORD *)(a1 + 592) = off_24C335D90;
  if (*(char *)(a1 + 623) < 0)
    operator delete(*(void **)(a1 + 600));
  *(_QWORD *)(a1 + 544) = off_24C335D90;
  if (*(char *)(a1 + 575) < 0)
    operator delete(*(void **)(a1 + 552));
  *(_QWORD *)(a1 + 496) = off_24C335D90;
  if (*(char *)(a1 + 527) < 0)
    operator delete(*(void **)(a1 + 504));
  *(_QWORD *)(a1 + 448) = off_24C335D90;
  if (*(char *)(a1 + 479) < 0)
    operator delete(*(void **)(a1 + 456));
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 384);
  mediaplatform::DatabaseTable<std::string,long long,long long,double,long long,long long>::~DatabaseTable(a1);
}

{
  mlcore::MediaTable<std::string,long long,long long,double,long long,long long>::~MediaTable(a1);
  JUMPOUT(0x20BD27AFCLL);
}

void mediaplatform::DatabaseTable<std::string,long long,long long,double,long long,long long>::~DatabaseTable(uint64_t a1)
{
  *(_QWORD *)a1 = &off_24C335408;
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 320);
  *(_QWORD *)(a1 + 272) = off_24C335D90;
  if (*(char *)(a1 + 303) < 0)
    operator delete(*(void **)(a1 + 280));
  *(_QWORD *)(a1 + 224) = off_24C335D90;
  if (*(char *)(a1 + 255) < 0)
    operator delete(*(void **)(a1 + 232));
  *(_QWORD *)(a1 + 176) = off_24C335D90;
  if (*(char *)(a1 + 207) < 0)
    operator delete(*(void **)(a1 + 184));
  *(_QWORD *)(a1 + 128) = off_24C335D90;
  if (*(char *)(a1 + 159) < 0)
    operator delete(*(void **)(a1 + 136));
  *(_QWORD *)(a1 + 80) = off_24C335D90;
  if (*(char *)(a1 + 111) < 0)
    operator delete(*(void **)(a1 + 88));
  if (*(char *)(a1 + 79) < 0)
    operator delete(*(void **)(a1 + 56));
  mediaplatform::DatabaseTableBase::~DatabaseTableBase((void **)a1);
}

{
  mediaplatform::DatabaseTable<std::string,long long,long long,double,long long,long long>::~DatabaseTable(a1);
  JUMPOUT(0x20BD27AFCLL);
}

void mlcore::CloudKVSTable::keyColoumn(mlcore::CloudKVSTable *this@<X0>, uint64_t a2@<X8>)
{
  std::string *v4;
  std::string *v5;

  *(_QWORD *)a2 = off_24C335D90;
  v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 415) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 49), *((_QWORD *)this + 50));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 392);
    *(_QWORD *)(a2 + 24) = *((_QWORD *)this + 51);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 104);
  *(_QWORD *)a2 = &off_24C335AB8;
  *(_BYTE *)(a2 + 36) = *((_BYTE *)this + 420);
  v5 = (std::string *)(a2 + 40);
  if (*((char *)this + 447) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)this + 53), *((_QWORD *)this + 54));
  }
  else
  {
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 424);
    *(_QWORD *)(a2 + 56) = *((_QWORD *)this + 55);
  }
  *(_QWORD *)a2 = &off_24C336A60;
}

void sub_20A80C27C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  uint64_t v3;

  *(_QWORD *)v1 = v3;
  if (*(char *)(v1 + 31) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

void mlcore::CloudKVSTable::playCountColumn(mlcore::CloudKVSTable *this@<X0>, uint64_t a2@<X8>)
{
  std::string *v4;

  *(_QWORD *)a2 = off_24C335D90;
  v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 479) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 57), *((_QWORD *)this + 58));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 456);
    *(_QWORD *)(a2 + 24) = *((_QWORD *)this + 59);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 120);
  *(_DWORD *)(a2 + 44) = *((_DWORD *)this + 123);
  *(_QWORD *)(a2 + 36) = *(_QWORD *)((char *)this + 484);
  *(_QWORD *)a2 = off_24C336AC0;
}

void mlcore::CloudKVSTable::hasBeenPlayedColumn(mlcore::CloudKVSTable *this@<X0>, uint64_t a2@<X8>)
{
  std::string *v4;

  *(_QWORD *)a2 = off_24C335D90;
  v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 527) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 63), *((_QWORD *)this + 64));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 504);
    *(_QWORD *)(a2 + 24) = *((_QWORD *)this + 65);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 132);
  *(_DWORD *)(a2 + 44) = *((_DWORD *)this + 135);
  *(_QWORD *)(a2 + 36) = *(_QWORD *)((char *)this + 532);
  *(_QWORD *)a2 = off_24C336AC0;
}

void mlcore::CloudKVSTable::bookmarkTimeColumn(mlcore::CloudKVSTable *this@<X0>, uint64_t a2@<X8>)
{
  std::string *v4;

  *(_QWORD *)a2 = off_24C335D90;
  v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 575) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 69), *((_QWORD *)this + 70));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 552);
    *(_QWORD *)(a2 + 24) = *((_QWORD *)this + 71);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 144);
  *(_DWORD *)(a2 + 44) = *((_DWORD *)this + 147);
  *(_QWORD *)(a2 + 36) = *(_QWORD *)((char *)this + 580);
  *(_QWORD *)a2 = off_24C336A80;
}

void mlcore::CloudKVSTable::bookmarkSyncTimestampColumn(mlcore::CloudKVSTable *this@<X0>, uint64_t a2@<X8>)
{
  std::string *v4;

  *(_QWORD *)a2 = off_24C335D90;
  v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 623) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 75), *((_QWORD *)this + 76));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 600);
    *(_QWORD *)(a2 + 24) = *((_QWORD *)this + 77);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 156);
  *(_DWORD *)(a2 + 44) = *((_DWORD *)this + 159);
  *(_QWORD *)(a2 + 36) = *(_QWORD *)((char *)this + 628);
  *(_QWORD *)a2 = off_24C336AC0;
}

void mlcore::CloudKVSTable::bookmarkSyncRevisionColumn(mlcore::CloudKVSTable *this@<X0>, uint64_t a2@<X8>)
{
  std::string *v4;

  *(_QWORD *)a2 = off_24C335D90;
  v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 671) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 81), *((_QWORD *)this + 82));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 648);
    *(_QWORD *)(a2 + 24) = *((_QWORD *)this + 83);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 168);
  *(_DWORD *)(a2 + 44) = *((_DWORD *)this + 171);
  *(_QWORD *)(a2 + 36) = *(_QWORD *)((char *)this + 676);
  *(_QWORD *)a2 = off_24C336AC0;
}

void mediaplatform::DatabaseTableBase::~DatabaseTableBase(void **this)
{
  mediaplatform::DatabaseTableBase::~DatabaseTableBase(this);
  JUMPOUT(0x20BD27AFCLL);
}

{
  void **v2;

  *this = &off_24C330F50;
  v2 = this + 4;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
}

unint64_t mediaplatform::DatabaseTableBase::columnCount(mediaplatform::DatabaseTableBase *this)
{
  return 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)this + 5) - *((_QWORD *)this + 4)) >> 3);
}

std::string *mediaplatform::DatabaseTableBase::columnNames@<X0>(__int128 **this@<X0>, std::string *a2@<X8>)
{
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  return std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(a2, this[4], this[5], 0xAAAAAAAAAAAAAAABLL * (((char *)this[5] - (char *)this[4]) >> 3));
}

void mediaplatform::DatabaseTableBase::targetColumnExpression(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

_QWORD *mediaplatform::DatabaseTableBase::DatabaseTableBase(_QWORD *a1, __int128 *a2)
{
  std::string *v3;
  __int128 v4;

  *a1 = &off_24C330F50;
  v3 = (std::string *)(a1 + 1);
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    v3->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = v4;
  }
  a1[4] = 0;
  a1[5] = 0;
  a1[6] = 0;
  return a1;
}

{
  std::string *v3;
  __int128 v4;

  *a1 = &off_24C330F50;
  v3 = (std::string *)(a1 + 1);
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    v3->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = v4;
  }
  a1[4] = 0;
  a1[5] = 0;
  a1[6] = 0;
  return a1;
}

uint64_t mediaplatform::DatabaseTableBase::name(mediaplatform::DatabaseTableBase *this)
{
  return (uint64_t)this + 8;
}

std::string *mediaplatform::DatabaseTableBase::setName(uint64_t a1, const std::string *a2)
{
  return std::string::operator=((std::string *)(a1 + 8), a2);
}

void mlcore::Entity::descriptionAttributes(mlcore::Entity *this@<X0>, std::string **a2@<X8>)
{
  std::string *v3;
  std::string v4;
  __int128 v5;

  *(_QWORD *)&v5 = *MEMORY[0x24BDAC8D0];
  std::to_string(&v4, *((_QWORD *)this + 28));
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v3 = (std::string *)operator new(0x18uLL);
  *a2 = v3;
  a2[1] = v3;
  a2[2] = v3 + 1;
  a2[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)(a2 + 2), (__int128 *)&v4, &v5, v3);
  if (SHIBYTE(v4.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v4.__r_.__value_.__l.__data_);
}

void sub_20A80C770(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v18 = v17;
  *(_QWORD *)(v16 + 8) = v18;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a9);
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void mlcore::Entity::_SQLExpressionForIdentity(mlcore::Entity *this@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  __int128 v13;
  int v14;
  __int128 *v15[3];
  __int128 v16;
  __int128 v17;

  v4 = (*(uint64_t (**)(mlcore::Entity *))(*(_QWORD *)this + 48))(this);
  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 88))(v4);
  (*(void (**)(__int128 **__return_ptr))(*(_QWORD *)v5 + 24))(v15);
  std::allocate_shared[abi:ne180100]<mediaplatform::SQLColumnNameExpression,std::allocator<mediaplatform::SQLColumnNameExpression>,std::string &,void>(&v16, v15[0]);
  v14 = 13;
  v12 = *((_QWORD *)this + 28);
  std::allocate_shared[abi:ne180100]<mediaplatform::SQLLiteralValue<long long>,std::allocator<mediaplatform::SQLLiteralValue<long long>>,long long,void>(&v13, &v12);
  std::allocate_shared[abi:ne180100]<mediaplatform::SQLBinaryExpression,std::allocator<mediaplatform::SQLBinaryExpression>,std::shared_ptr<mediaplatform::SQLExpression>,mediaplatform::SQLBinaryExpression::BinaryOperator,std::shared_ptr<mediaplatform::SQLColumnNameExpression>,void>(&v17, &v16, &v14, &v13);
  *a2 = v17;
  v17 = 0uLL;
  v6 = (std::__shared_weak_count *)*((_QWORD *)&v13 + 1);
  if (*((_QWORD *)&v13 + 1))
  {
    v7 = (unint64_t *)(*((_QWORD *)&v13 + 1) + 8);
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  v9 = (std::__shared_weak_count *)*((_QWORD *)&v16 + 1);
  if (*((_QWORD *)&v16 + 1))
  {
    v10 = (unint64_t *)(*((_QWORD *)&v16 + 1) + 8);
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  *(_QWORD *)&v13 = v15;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v13);
}

void sub_20A80C8C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void **a11, uint64_t a12, uint64_t a13, char a14)
{
  uint64_t v14;

  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100](v14 - 48);
  a11 = (void **)&a14;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a11);
  _Unwind_Resume(a1);
}

void std::allocate_shared[abi:ne180100]<mediaplatform::SQLColumnNameExpression,std::allocator<mediaplatform::SQLColumnNameExpression>,std::string &,void>(_QWORD *a1, __int128 *a2)
{
  _QWORD *v4;
  void *__p[2];
  char v6;
  void *v7[2];
  char v8;
  void *v9[2];
  char v10;

  v4 = operator new(0x88uLL);
  v4[1] = 0;
  v4[2] = 0;
  *v4 = &off_24C33C130;
  std::string::basic_string[abi:ne180100]<0>(v9, "");
  std::string::basic_string[abi:ne180100]<0>(v7, "");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  mediaplatform::SQLColumnNameExpression::SQLColumnNameExpression((uint64_t)(v4 + 3), a2, (__int128 *)v9, (__int128 *)v7, (__int128 *)__p);
  if (v6 < 0)
    operator delete(__p[0]);
  if (v8 < 0)
    operator delete(v7[0]);
  if (v10 < 0)
    operator delete(v9[0]);
  *a1 = v4 + 3;
  a1[1] = v4;
}

void sub_20A80C9CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  std::__shared_weak_count *v27;
  void *v29;

  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (a27 < 0)
    operator delete(a22);
  std::__shared_weak_count::~__shared_weak_count(v27);
  operator delete(v29);
  _Unwind_Resume(a1);
}

void std::allocate_shared[abi:ne180100]<mediaplatform::SQLLiteralValue<long long>,std::allocator<mediaplatform::SQLLiteralValue<long long>>,long long,void>(_QWORD *a1, uint64_t *a2)
{
  _QWORD *v4;
  uint64_t v5;
  std::string *v6;
  void *__p[2];
  uint64_t v8;

  v4 = operator new(0x40uLL);
  v4[1] = 0;
  v4[2] = 0;
  *v4 = &off_24C33BB48;
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  v5 = *a2;
  v4[3] = off_24C335C00;
  v4[4] = v5;
  v6 = (std::string *)(v4 + 5);
  if (SHIBYTE(v8) < 0)
  {
    std::string::__init_copy_ctor_external(v6, (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
    if (SHIBYTE(v8) < 0)
      operator delete(__p[0]);
  }
  else
  {
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = *(_OWORD *)__p;
    v4[7] = v8;
  }
  *a1 = v4 + 3;
  a1[1] = v4;
}

void sub_20A80CAD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  std::__shared_weak_count *v15;
  void *v17;

  if (a15 < 0)
    operator delete(__p);
  std::__shared_weak_count::~__shared_weak_count(v15);
  operator delete(v17);
  _Unwind_Resume(a1);
}

uint64_t mediaplatform::SQLLiteralValue<long long>::~SQLLiteralValue(uint64_t a1)
{
  *(_QWORD *)a1 = off_24C335C00;
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
  return a1;
}

void mediaplatform::SQLLiteralValue<long long>::~SQLLiteralValue(uint64_t a1)
{
  *(_QWORD *)a1 = off_24C335C00;
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
  JUMPOUT(0x20BD27AFCLL);
}

uint64_t mediaplatform::SQLLiteralValue<long long>::sql(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  void *v11[2];
  unsigned __int8 v12;
  _QWORD v13[11];
  char v14;
  uint64_t v15;
  _QWORD v16[11];
  char v17;
  uint64_t v18;

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v13);
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  std::ostream::operator<<();
  std::stringbuf::str();
  v2 = *MEMORY[0x24BEDB800];
  v16[0] = v2;
  v3 = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  *(_QWORD *)((char *)v16 + *(_QWORD *)(v2 - 24)) = v3;
  v4 = MEMORY[0x24BEDB848];
  v16[1] = MEMORY[0x24BEDB848] + 16;
  if (v17 < 0)
    operator delete((void *)v16[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x20BD27A84](&v18);
  if ((v12 & 0x80u) == 0)
    v5 = v11;
  else
    v5 = (void **)v11[0];
  if ((v12 & 0x80u) == 0)
    v6 = v12;
  else
    v6 = (uint64_t)v11[1];
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)v5, v6);
  if ((char)v12 < 0)
    operator delete(v11[0]);
  if (*(char *)(a1 + 39) < 0)
  {
    if (!*(_QWORD *)(a1 + 24))
      goto LABEL_22;
LABEL_15:
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)" /* ", 4);
    v7 = *(char *)(a1 + 39);
    if (v7 >= 0)
      v8 = a1 + 16;
    else
      v8 = *(_QWORD *)(a1 + 16);
    if (v7 >= 0)
      v9 = *(unsigned __int8 *)(a1 + 39);
    else
      v9 = *(_QWORD *)(a1 + 24);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, v8, v9);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)" */", 3);
    goto LABEL_22;
  }
  if (*(_BYTE *)(a1 + 39))
    goto LABEL_15;
LABEL_22:
  std::stringbuf::str();
  v13[0] = v2;
  *(_QWORD *)((char *)v13 + *(_QWORD *)(v2 - 24)) = v3;
  v13[1] = v4 + 16;
  if (v14 < 0)
    operator delete((void *)v13[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x20BD27A84](&v15);
}

void sub_20A80CD5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49)
{
  if (a15 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<mediaplatform::SQLLiteralValue<long long>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C33BB48;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<mediaplatform::SQLLiteralValue<long long>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C33BB48;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x20BD27AFCLL);
}

uint64_t std::__shared_ptr_emplace<mediaplatform::SQLLiteralValue<long long>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

double mlcore::Entity::Entity(mlcore::Entity *this, uint64_t a2)
{
  double result;

  result = 0.0;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_DWORD *)this + 12) = 1065353216;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *((_DWORD *)this + 22) = 1065353216;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_DWORD *)this + 32) = 1065353216;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 152) = 0u;
  *((_DWORD *)this + 42) = 1065353216;
  *((_OWORD *)this + 11) = 0u;
  *((_OWORD *)this + 12) = 0u;
  *((_DWORD *)this + 52) = 1065353216;
  *(_QWORD *)this = off_24C33A860;
  *((_QWORD *)this + 1) = &off_24C3371C0;
  *((_QWORD *)this + 27) = &unk_24C3371E8;
  *((_QWORD *)this + 28) = a2;
  return result;
}

_QWORD *mlcore::Entity::Entity(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  *a1 = off_24C33A860;
  mlcore::PropertyCacheBase<long long,int,double,std::string,mediaplatform::Data>::PropertyCacheBase((uint64_t)(a1 + 1), a3);
  a1[1] = &off_24C3371C0;
  a1[27] = &unk_24C3371E8;
  a1[28] = a2;
  return a1;
}

void mlcore::Entity::~Entity(mlcore::Entity *this)
{
  *(_QWORD *)this = off_24C33A860;
  mlcore::PropertyCacheBase<long long,int,double,std::string,mediaplatform::Data>::~PropertyCacheBase((_QWORD *)this + 1);
}

_QWORD *mlcore::Entity::createWithType@<X0>(mlcore::Entity *this@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *result;
  std::runtime_error *exception;
  __int128 v10;

  *a3 = 0;
  a3[1] = 0;
  switch((int)this)
  {
    case 0:
      std::allocate_shared[abi:ne180100]<mlcore::Item,std::allocator<mlcore::Item>,long long &,void>(&v10, a2);
      break;
    case 1:
      std::allocate_shared[abi:ne180100]<mlcore::Playlist,std::allocator<mlcore::Playlist>,long long &,void>(&v10, a2);
      break;
    case 2:
      std::allocate_shared[abi:ne180100]<mlcore::ItemArtist,std::allocator<mlcore::ItemArtist>,long long &,void>(&v10, a2);
      break;
    case 3:
      std::allocate_shared[abi:ne180100]<mlcore::Genre,std::allocator<mlcore::Genre>,long long &,void>(&v10, a2);
      break;
    case 4:
      std::allocate_shared[abi:ne180100]<mlcore::Album,std::allocator<mlcore::Album>,long long &,void>(&v10, a2);
      break;
    case 5:
      std::allocate_shared[abi:ne180100]<mlcore::Composer,std::allocator<mlcore::Composer>,long long &,void>(&v10, a2);
      break;
    case 7:
      std::allocate_shared[abi:ne180100]<mlcore::Artist,std::allocator<mlcore::Artist>,long long &,void>(&v10, a2);
      break;
    case 8:
      std::allocate_shared[abi:ne180100]<mlcore::LibraryProperty,std::allocator<mlcore::LibraryProperty>,long long &,void>(&v10, a2);
      break;
    case 9:
      std::allocate_shared[abi:ne180100]<mlcore::PlaylistItem,std::allocator<mlcore::PlaylistItem>,long long &,void>(&v10, a2);
      break;
    default:
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "unknown entity type");
      __cxa_throw(exception, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
  }
  v5 = v10;
  *(_OWORD *)a3 = v10;
  v6 = v5;
  v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 48))(v5);
  *(_QWORD *)&v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 112))(v7);
  result = std::__hash_table<std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>,std::__unordered_map_hasher<mlcore::ModelProperty<long long> *,std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>,std::hash<mlcore::ModelProperty<long long> *>,std::equal_to<mlcore::ModelProperty<long long> *>,true>,std::__unordered_map_equal<mlcore::ModelProperty<long long> *,std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>,std::equal_to<mlcore::ModelProperty<long long> *>,std::hash<mlcore::ModelProperty<long long> *>,true>,std::allocator<std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>>>::__emplace_unique_key_args<mlcore::ModelProperty<long long> *,std::piecewise_construct_t const&,std::tuple<mlcore::ModelProperty<long long> * const&>,std::tuple<>>(v6 + 176, v10, &v10);
  result[3] = a2;
  return result;
}

void sub_20A80D018(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v2;

  __cxa_free_exception(v2);
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

char *std::allocate_shared[abi:ne180100]<mlcore::Genre,std::allocator<mlcore::Genre>,long long &,void>(_QWORD *a1, uint64_t a2)
{
  char *v4;
  char *result;

  v4 = (char *)operator new(0x100uLL);
  *((_QWORD *)v4 + 1) = 0;
  *((_QWORD *)v4 + 2) = 0;
  *(_QWORD *)v4 = &off_24C33D320;
  *(_OWORD *)(v4 + 40) = 0u;
  *(_OWORD *)(v4 + 56) = 0u;
  *((_DWORD *)v4 + 18) = 1065353216;
  *((_OWORD *)v4 + 5) = 0u;
  *((_OWORD *)v4 + 6) = 0u;
  *((_DWORD *)v4 + 28) = 1065353216;
  *(_OWORD *)(v4 + 120) = 0u;
  *(_OWORD *)(v4 + 136) = 0u;
  *((_DWORD *)v4 + 38) = 1065353216;
  *((_OWORD *)v4 + 10) = 0u;
  *((_OWORD *)v4 + 11) = 0u;
  *((_DWORD *)v4 + 48) = 1065353216;
  *(_OWORD *)(v4 + 200) = 0u;
  *(_OWORD *)(v4 + 216) = 0u;
  *((_DWORD *)v4 + 58) = 1065353216;
  *((_QWORD *)v4 + 4) = &off_24C3371C0;
  *((_QWORD *)v4 + 30) = &unk_24C3371E8;
  *((_QWORD *)v4 + 31) = a2;
  a1[1] = v4;
  *((_QWORD *)v4 + 3) = &off_24C33A6F8;
  result = v4 + 24;
  *a1 = result;
  return result;
}

char *std::allocate_shared[abi:ne180100]<mlcore::Album,std::allocator<mlcore::Album>,long long &,void>(_QWORD *a1, uint64_t a2)
{
  char *v4;
  char *result;

  v4 = (char *)operator new(0x100uLL);
  *((_QWORD *)v4 + 1) = 0;
  *((_QWORD *)v4 + 2) = 0;
  *(_QWORD *)v4 = &off_24C33D2E8;
  *(_OWORD *)(v4 + 40) = 0u;
  *(_OWORD *)(v4 + 56) = 0u;
  *((_DWORD *)v4 + 18) = 1065353216;
  *((_OWORD *)v4 + 5) = 0u;
  *((_OWORD *)v4 + 6) = 0u;
  *((_DWORD *)v4 + 28) = 1065353216;
  *(_OWORD *)(v4 + 120) = 0u;
  *(_OWORD *)(v4 + 136) = 0u;
  *((_DWORD *)v4 + 38) = 1065353216;
  *((_OWORD *)v4 + 10) = 0u;
  *((_OWORD *)v4 + 11) = 0u;
  *((_DWORD *)v4 + 48) = 1065353216;
  *(_OWORD *)(v4 + 200) = 0u;
  *(_OWORD *)(v4 + 216) = 0u;
  *((_DWORD *)v4 + 58) = 1065353216;
  *((_QWORD *)v4 + 4) = &off_24C3371C0;
  *((_QWORD *)v4 + 30) = &unk_24C3371E8;
  *((_QWORD *)v4 + 31) = a2;
  a1[1] = v4;
  *((_QWORD *)v4 + 3) = &off_24C33A6A8;
  result = v4 + 24;
  *a1 = result;
  return result;
}

char *std::allocate_shared[abi:ne180100]<mlcore::LibraryProperty,std::allocator<mlcore::LibraryProperty>,long long &,void>(_QWORD *a1, uint64_t a2)
{
  char *v4;
  char *result;

  v4 = (char *)operator new(0x100uLL);
  *((_QWORD *)v4 + 1) = 0;
  *((_QWORD *)v4 + 2) = 0;
  *(_QWORD *)v4 = &off_24C33CB08;
  *(_OWORD *)(v4 + 40) = 0u;
  *(_OWORD *)(v4 + 56) = 0u;
  *((_DWORD *)v4 + 18) = 1065353216;
  *((_OWORD *)v4 + 5) = 0u;
  *((_OWORD *)v4 + 6) = 0u;
  *((_DWORD *)v4 + 28) = 1065353216;
  *(_OWORD *)(v4 + 120) = 0u;
  *(_OWORD *)(v4 + 136) = 0u;
  *((_DWORD *)v4 + 38) = 1065353216;
  *((_OWORD *)v4 + 10) = 0u;
  *((_OWORD *)v4 + 11) = 0u;
  *((_DWORD *)v4 + 48) = 1065353216;
  *(_OWORD *)(v4 + 200) = 0u;
  *(_OWORD *)(v4 + 216) = 0u;
  *((_DWORD *)v4 + 58) = 1065353216;
  *((_QWORD *)v4 + 4) = &off_24C3371C0;
  *((_QWORD *)v4 + 30) = &unk_24C3371E8;
  *((_QWORD *)v4 + 31) = a2;
  a1[1] = v4;
  *((_QWORD *)v4 + 3) = &off_24C338068;
  result = v4 + 24;
  *a1 = result;
  return result;
}

void std::__shared_ptr_emplace<mlcore::LibraryProperty>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C33CB08;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<mlcore::LibraryProperty>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C33CB08;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x20BD27AFCLL);
}

uint64_t std::__shared_ptr_emplace<mlcore::LibraryProperty>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__shared_ptr_emplace<mlcore::Album>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C33D2E8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<mlcore::Album>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C33D2E8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x20BD27AFCLL);
}

uint64_t std::__shared_ptr_emplace<mlcore::Album>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__shared_ptr_emplace<mlcore::Genre>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C33D320;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<mlcore::Genre>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C33D320;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x20BD27AFCLL);
}

uint64_t std::__shared_ptr_emplace<mlcore::Genre>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t mlcore::Entity::persistentID(mlcore::Entity *this)
{
  return *((_QWORD *)this + 28);
}

BOOL mlcore::Entity::hasValueForProperty(mlcore::Entity *this, mlcore::ModelPropertyBase *a2)
{
  return mlcore::PropertyCache::hasValueForProperty((_QWORD *)this + 1, (unint64_t)a2);
}

void mlcore::LocalizedSearchQuery::~LocalizedSearchQuery(void **this)
{
  void **v2;

  *this = off_24C339E70;
  v2 = this + 7;
  std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*((char *)this + 55) < 0)
    operator delete(this[4]);
  *this = &off_24C33A798;
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)(this + 2));
}

{
  void **v2;

  *this = off_24C339E70;
  v2 = this + 7;
  std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*((char *)this + 55) < 0)
    operator delete(this[4]);
  *this = &off_24C33A798;
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)(this + 2));
  JUMPOUT(0x20BD27AFCLL);
}

void mlcore::LocalizedSearchQuery::_perform(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  _QWORD v11[2];
  _BYTE v12[24];
  _BYTE *v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  v4 = (std::__shared_weak_count *)a2[1];
  v11[0] = *a2;
  v11[1] = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100]((uint64_t)v12, a3);
  mlcore::LocalizedSearchQuery::_performWeightedSearch(a1, v11, (uint64_t)v12);
  v7 = v13;
  if (v13 == v12)
  {
    v8 = 4;
    v7 = v12;
  }
  else
  {
    if (!v13)
      goto LABEL_9;
    v8 = 5;
  }
  (*(void (**)(void))(*v7 + 8 * v8))();
LABEL_9:
  if (v4)
  {
    v9 = (unint64_t *)&v4->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

void sub_20A80D50C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15)
{
  char *v15;
  char *v17;
  uint64_t v18;

  v17 = a15;
  if (a15 == v15)
  {
    v18 = 4;
    v17 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v18 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v17 + 8 * v18))();
LABEL_6:
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  _Unwind_Resume(a1);
}

void mlcore::LocalizedSearchQuery::_performWeightedSearch(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t **v8;
  std::__shared_weak_count *v9;
  uint64_t *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  unsigned __int8 v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  std::exception_vtbl *v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  uint64_t *v28;
  unint64_t v29;
  uint64_t v30;
  std::exception_vtbl *v31;
  unint64_t *v32;
  unint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  std::vector<std::string> *v39;
  unsigned __int8 v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  _QWORD *v44;
  char *v45;
  char v46;
  uint64_t v47;
  char *v48;
  char v49;
  __int128 v50;
  unint64_t *v51;
  unint64_t v52;
  void **v53;
  uint64_t i;
  std::__shared_weak_count *size;
  unint64_t *v56;
  unint64_t v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  uint64_t v61;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  __int128 v64;
  unint64_t v65;
  uint64_t *v66;
  uint64_t v67;
  unint64_t *v68;
  unint64_t v69;
  std::string::value_type *v70;
  std::__shared_weak_count *v71;
  unint64_t *v72;
  unint64_t v73;
  unint64_t v74;
  unint64_t v75;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  unint64_t v78;
  std::__shared_weak_count *v79;
  unint64_t *v80;
  unint64_t v81;
  unint64_t v82;
  uint64_t v83;
  int v84;
  std::string::value_type *v85;
  int v86;
  int v87;
  uint64_t v88;
  int v89;
  uint64_t v90;
  std::exception_vtbl *v91;
  int v92;
  void **v93;
  uint64_t v94;
  void **v95;
  uint64_t v96;
  int v97;
  __int128 *v98;
  uint64_t v99;
  uint64_t v100;
  std::vector<std::string>::pointer end;
  std::vector<std::string>::pointer begin;
  std::mutex *v103;
  unsigned __int8 v104;
  int v105;
  std::exception_vtbl *v106;
  uint64_t v107;
  unint64_t *v108;
  _QWORD *v109;
  _QWORD *v110;
  unint64_t v111;
  uint8x8_t v112;
  void **v113;
  void *v114;
  unint64_t v115;
  _QWORD *v116;
  float v117;
  float v118;
  _BOOL8 v119;
  unint64_t v120;
  unint64_t v121;
  int8x8_t prime;
  void *v123;
  void *v124;
  uint64_t v125;
  _QWORD *v126;
  unint64_t v127;
  uint8x8_t v128;
  unint64_t v129;
  uint8x8_t v130;
  uint64_t v131;
  _QWORD *v132;
  unint64_t v133;
  _QWORD *v134;
  _QWORD *v135;
  unint64_t v136;
  unint64_t *v137;
  unint64_t v138;
  std::__shared_weak_count *v139;
  __int128 v140;
  unint64_t v141;
  unint64_t v142;
  std::__shared_weak_count *v143;
  unint64_t *v144;
  unint64_t v145;
  uint64_t v146;
  std::__shared_weak_count *v147;
  unint64_t *v148;
  unint64_t v149;
  std::__shared_weak_count *v150;
  unint64_t *v151;
  unint64_t v152;
  uint64_t v153;
  unint64_t v154;
  __int128 v155;
  unint64_t *v156;
  unint64_t v157;
  char *v158;
  _QWORD *v159;
  __int128 v160;
  std::__shared_weak_count *v161;
  unint64_t *v162;
  unint64_t v163;
  std::__shared_weak_count *v164;
  unint64_t *v165;
  unint64_t v166;
  void (__cdecl *v167)(std::exception *__hidden);
  void (__cdecl *j)(std::exception *__hidden);
  std::string::value_type *v169;
  unint64_t *v170;
  unint64_t v171;
  uint64_t *v172;
  std::__shared_weak_count *v173;
  unint64_t *v174;
  unint64_t v175;
  uint64_t *v176;
  char *v177;
  _QWORD *v178;
  __int128 v179;
  std::__shared_weak_count *v180;
  unint64_t *v181;
  unint64_t v182;
  std::__shared_weak_count *v183;
  unint64_t *v184;
  unint64_t v185;
  std::__shared_weak_count *v186;
  unint64_t *v187;
  unint64_t v188;
  std::__shared_weak_count *v189;
  unint64_t *v190;
  unint64_t v191;
  std::__shared_weak_count *v192;
  unint64_t *v193;
  unint64_t v194;
  std::string::size_type v195;
  unint64_t v196;
  __int128 v197;
  unint64_t *v198;
  unint64_t v199;
  int v200;
  mlcore *v201;
  mlcore *v202;
  mlcore *v203;
  std::exception_vtbl *v204;
  std::exception_vtbl *v205;
  mlcore *v206;
  uint64_t v207;
  std::exception_vtbl *v208;
  std::exception_vtbl *v209;
  std::exception_vtbl *v210;
  std::exception_vtbl *v211;
  std::exception_vtbl *v212;
  std::exception_vtbl *v213;
  unsigned __int8 v214;
  char *v215;
  char *v216;
  _QWORD *v217;
  _QWORD *v218;
  mlcore **v219;
  mlcore **v220;
  uint64_t v221;
  unint64_t v222;
  unint64_t v223;
  uint64_t v224;
  _QWORD *v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  unint64_t v229;
  unint64_t v230;
  mlcore **v231;
  mlcore *v232;
  char *v233;
  uint64_t v234;
  std::__shared_weak_count *v235;
  unint64_t *v236;
  unint64_t v237;
  unint64_t *v238;
  unint64_t v239;
  uint64_t v240;
  char *v241;
  char *v242;
  uint64_t v243;
  unint64_t *v244;
  unint64_t v245;
  std::__shared_weak_count *v246;
  unint64_t *v247;
  unint64_t v248;
  uint64_t v249;
  uint64_t v250;
  unint64_t *v251;
  unint64_t v252;
  char *v253;
  unint64_t *v254;
  std::string *v255;
  _QWORD *v256;
  unint64_t v257;
  unint64_t v258;
  std::__shared_weak_count *v259;
  unint64_t *v260;
  unint64_t v261;
  _DWORD *v262;
  uint64_t v263;
  unint64_t v264;
  int v265;
  __int128 v266;
  unint64_t *v267;
  unint64_t v268;
  char *v269;
  std::string *v270;
  __int128 v271;
  uint64_t v272;
  std::string::value_type **v273;
  uint64_t v274;
  unint64_t v275;
  unint64_t v276;
  char *v277;
  uint64_t v278;
  char *v279;
  _QWORD *v280;
  _QWORD *v281;
  char *v282;
  __int128 v283;
  int64x2_t v284;
  std::exception_vtbl *v285;
  std::__shared_weak_count *v286;
  unint64_t *v287;
  unint64_t v288;
  std::string::value_type **v289;
  uint64_t v290;
  unint64_t v291;
  unint64_t v292;
  char *v293;
  uint64_t v294;
  char *v295;
  std::string::value_type *v296;
  unint64_t *v297;
  unint64_t v298;
  _QWORD *v299;
  _QWORD *v300;
  char *v301;
  __int128 v302;
  int64x2_t v303;
  std::exception_vtbl *v304;
  unint64_t *v305;
  unint64_t v306;
  __int128 v307;
  unint64_t *v308;
  unint64_t v309;
  char *v310;
  char *v311;
  std::__shared_weak_count *v312;
  unint64_t *v313;
  unint64_t v314;
  __int128 v315;
  unint64_t *v316;
  unint64_t v317;
  std::__shared_weak_count *v318;
  unint64_t *v319;
  unint64_t v320;
  unint64_t v321;
  unint64_t *v322;
  unint64_t v323;
  __int128 v324;
  std::__shared_weak_count *v325;
  unint64_t *v326;
  unint64_t v327;
  std::__shared_weak_count *v328;
  unint64_t *v329;
  unint64_t v330;
  std::__shared_weak_count *v331;
  unint64_t *v332;
  unint64_t v333;
  _QWORD *v334;
  uint64_t v335;
  unint64_t *v336;
  unint64_t v337;
  char *v338;
  unint64_t *v339;
  unint64_t v340;
  std::string *v341;
  std::__shared_weak_count *v342;
  unint64_t *v343;
  unint64_t v344;
  unint64_t *v345;
  unint64_t v346;
  uint64_t *v347;
  uint64_t v348;
  uint64_t *v349;
  __int128 v350;
  unint64_t *v351;
  unint64_t v352;
  __int128 *v353;
  uint64_t k;
  std::__shared_weak_count *v355;
  unint64_t *v356;
  unint64_t v357;
  std::__shared_weak_count *v358;
  unint64_t *v359;
  unint64_t v360;
  std::__shared_weak_count *v361;
  unint64_t *v362;
  unint64_t v363;
  uint64_t v364;
  std::__shared_weak_count *v365;
  unint64_t *v366;
  unint64_t v367;
  unint64_t v368;
  std::string::value_type *v369;
  std::__shared_weak_count *v370;
  unint64_t *v371;
  unint64_t v372;
  uint64_t v373;
  _QWORD *v374;
  _QWORD *v375;
  unint64_t *v376;
  unint64_t v377;
  std::__shared_weak_count *v378;
  unint64_t *v379;
  unint64_t v380;
  unint64_t *v381;
  unint64_t v382;
  unint64_t *v383;
  unint64_t v384;
  unint64_t v385;
  unint64_t *v386;
  unint64_t v387;
  __int128 v388;
  std::__shared_weak_count *v389;
  unint64_t *v390;
  unint64_t v391;
  uint64_t v392;
  uint64_t v393;
  uint64_t v394;
  std::__shared_weak_count *v395;
  unint64_t *v396;
  unint64_t v397;
  std::__shared_weak_count *v398;
  std::__shared_weak_count *v399;
  unint64_t *v400;
  unint64_t *v401;
  unint64_t v402;
  std::string::value_type *v403;
  std::__shared_weak_count *v404;
  unint64_t *v405;
  unint64_t v406;
  unint64_t *v407;
  unint64_t v408;
  unint64_t *v409;
  unint64_t v410;
  unint64_t v411;
  unint64_t *v412;
  unint64_t v413;
  std::string::value_type *v414;
  unint64_t *v415;
  unint64_t v416;
  unint64_t v417;
  std::__shared_weak_count *v418;
  __int128 v419;
  unint64_t v420;
  uint64_t v421;
  unint64_t *v422;
  unint64_t v423;
  char *v424;
  unint64_t *v425;
  unint64_t v426;
  std::__shared_weak_count *v427;
  unint64_t *v428;
  unint64_t v429;
  _QWORD *v430;
  std::__shared_weak_count *v431;
  unint64_t *v432;
  unint64_t v433;
  _QWORD *v434;
  _QWORD *v435;
  uint64_t v436;
  unint64_t v437;
  uint64_t v438;
  unint64_t v439;
  char *v440;
  char *v441;
  uint64_t v442;
  unint64_t *v443;
  unint64_t v444;
  char *v445;
  __int128 v446;
  int64x2_t v447;
  uint64_t v448;
  void *v449;
  unint64_t *v450;
  unint64_t v451;
  std::__shared_weak_count *v452;
  unint64_t *v453;
  unint64_t v454;
  std::__shared_weak_count *v455;
  unint64_t *v456;
  unint64_t v457;
  std::__shared_weak_count *v458;
  unint64_t *v459;
  unint64_t v460;
  std::__shared_weak_count *v461;
  unint64_t *v462;
  unint64_t v463;
  std::__shared_weak_count *v464;
  unint64_t *v465;
  unint64_t v466;
  std::__shared_weak_count *v467;
  unint64_t *v468;
  unint64_t v469;
  std::__shared_weak_count *v470;
  unint64_t *v471;
  unint64_t v472;
  std::__shared_weak_count *v473;
  unint64_t *v474;
  unint64_t v475;
  unsigned __int8 *v476;
  unsigned __int8 v477;
  uint64_t v478;
  uint64_t v479;
  uint64_t v480;
  unint64_t *v481;
  unint64_t v482;
  uint64_t v483;
  std::exception_vtbl *v484;
  std::exception_vtbl *v485;
  unint64_t *v486;
  unint64_t v487;
  uint64_t v488;
  char *v489;
  unint64_t v490;
  unint64_t v491;
  unint64_t v492;
  char *v493;
  char *v494;
  uint64_t v495;
  std::exception_vtbl *v496;
  uint64_t v497;
  uint64_t v498;
  int v499;
  uint64_t v500;
  uint64_t v501;
  std::__shared_weak_count *v502;
  unint64_t *v503;
  unint64_t v504;
  _QWORD *v505;
  _QWORD *v506;
  _QWORD *v507;
  std::__shared_weak_count *v508;
  unint64_t *v509;
  unint64_t v510;
  unint64_t *v511;
  unint64_t v512;
  __int128 v513;
  char *v514;
  unint64_t *v515;
  unint64_t v516;
  unint64_t *v517;
  unint64_t v518;
  std::__shared_weak_count *v519;
  unint64_t *v520;
  unint64_t v521;
  std::__shared_weak_count *v522;
  unint64_t *v523;
  unint64_t v524;
  std::__shared_weak_count *v525;
  unint64_t *v526;
  unint64_t v527;
  unint64_t *v528;
  unint64_t v529;
  uint64_t *v530;
  void *v531;
  void *v532;
  std::__shared_weak_count *v533;
  unint64_t *v534;
  unint64_t v535;
  unint64_t v536;
  unint64_t v537;
  std::__shared_weak_count *v538;
  unint64_t *v539;
  unint64_t v540;
  __int128 *v541;
  uint64_t v542;
  int v543;
  sqlite3_int64 v544;
  sqlite3_int64 v545;
  int v546;
  void **v547;
  std::string::value_type *v548;
  std::string::value_type **v549;
  uint64_t v550;
  void **v551;
  uint64_t v552;
  int v553;
  __int128 *v554;
  uint64_t v555;
  std::__shared_weak_count *v556;
  unint64_t *v557;
  unint64_t v558;
  std::__shared_weak_count *v559;
  unint64_t *v560;
  unint64_t v561;
  std::__shared_weak_count *v562;
  unint64_t *v563;
  unint64_t v564;
  unsigned __int8 v565;
  uint64_t v566;
  uint64_t m;
  uint64_t v568;
  uint64_t *v569;
  unint64_t *v570;
  unint64_t v571;
  _QWORD *v572;
  _QWORD *v573;
  _QWORD *v574;
  uint64_t v575;
  _QWORD *v576;
  std::__shared_weak_count *v577;
  unint64_t *v578;
  unint64_t v579;
  unint64_t *v580;
  unint64_t v581;
  _QWORD *v582;
  __int128 v583;
  std::__shared_weak_count *v584;
  unint64_t *v585;
  unint64_t v586;
  std::__shared_weak_count *v587;
  unint64_t *v588;
  unint64_t v589;
  uint64_t v590;
  uint64_t v591;
  uint64_t v592;
  _QWORD *v593;
  std::__shared_weak_count_vtbl *v594;
  _QWORD *v595;
  unint64_t *v596;
  unint64_t v597;
  std::__shared_weak_count *v598;
  unint64_t *v599;
  uint64_t v600;
  unint64_t v601;
  std::__shared_weak_count *v602;
  unint64_t *v603;
  unint64_t v604;
  _QWORD *v605;
  __int128 v606;
  std::__shared_weak_count *v607;
  unint64_t *v608;
  unint64_t v609;
  std::__shared_weak_count *v610;
  unint64_t *v611;
  unint64_t v612;
  std::__shared_weak_count *v613;
  unint64_t *v614;
  unint64_t v615;
  std::string::value_type *v616;
  uint64_t v617;
  std::__shared_weak_count *v618;
  unint64_t *v619;
  unint64_t v620;
  std::__shared_weak_count *v621;
  unint64_t *v622;
  unint64_t v623;
  _QWORD *v624;
  uint64_t v625;
  std::__shared_weak_count *v626;
  unint64_t *v627;
  unint64_t v628;
  std::__shared_weak_count *v629;
  unint64_t *v630;
  unint64_t v631;
  std::__shared_weak_count *v632;
  unint64_t *v633;
  unint64_t v634;
  std::__shared_weak_count *v635;
  unint64_t *v636;
  unint64_t v637;
  std::__shared_weak_count *v638;
  unint64_t *v639;
  unint64_t v640;
  std::__shared_weak_count *v641;
  unint64_t *v642;
  unint64_t v643;
  std::__shared_weak_count *v644;
  unint64_t *v645;
  unint64_t v646;
  void *v647;
  unint64_t v648;
  uint64_t v650;
  sqlite3_int64 v651;
  uint64_t v652;
  std::mutex *v653;
  __int128 v654;
  uint64_t v655;
  std::__shared_weak_count *v656;
  std::__shared_weak_count *v657;
  __int128 v658;
  unsigned __int8 *v659;
  __int128 v660;
  __int128 v661;
  void (**v662)(mediaplatform::DatabaseParameterList *__hidden);
  char *v663;
  char *v664;
  uint64_t v665;
  __int128 v666;
  uint64_t v667[2];
  __int128 v668;
  uint64_t v669[2];
  __int128 v670;
  __int128 v671;
  __int128 v672;
  __int128 v673;
  uint64_t *v674;
  __int128 v675;
  __int128 v676;
  __int128 v677;
  std::exception_vtbl *v678;
  std::exception_vtbl *v679;
  std::exception_vtbl *v680;
  mlcore::DeviceLibraryView *v681;
  std::__shared_weak_count *v682;
  sqlite3_int64 v683;
  std::__shared_weak_count *v684;
  char *v685;
  char *v686;
  uint64_t v687;
  uint64_t v688;
  std::__shared_weak_count *v689;
  __int128 v690;
  unint64_t v691;
  std::string::value_type *v692;
  std::string::value_type *v693;
  __int128 v694;
  char *v695;
  void *__p[4];
  int v697;
  __int128 v698;
  __int128 v699;
  int v700;
  __int128 v701;
  std::vector<std::string> *v702;
  std::__shared_weak_count *v703;
  std::string v704;
  uint64_t v705;
  std::__shared_weak_count *v706;
  uint64_t *v707;
  std::__shared_weak_count *v708;
  mlcore::DeviceLibraryView *v709;
  std::string::value_type *v710;
  std::string::value_type *v711[4];
  std::string::value_type **v712;
  std::string v713;
  __int128 v714;
  std::string::value_type *__s[4];
  std::string::value_type **v716;
  __int128 v717;
  uint64_t v718;
  std::exception v719[8];
  std::string v720;
  void *v721[2];
  __int128 v722;
  int v723;
  __int128 v724;
  __int128 *v725;
  __int128 *v726;
  void *v727[2];
  char *v728;
  void **v729;
  std::exception v730[4];
  _BYTE v731[24];
  uint64_t v732;
  __int128 v733[4];
  std::string v734;
  uint64_t v735;

  v3 = a1;
  v735 = *MEMORY[0x24BDAC8D0];
  v4 = *a2;
  v5 = *(_QWORD *)(*a2 + 24);
  v709 = *(mlcore::DeviceLibraryView **)(*a2 + 16);
  v710 = (std::string::value_type *)v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
    v4 = *a2;
  }
  v8 = *(uint64_t ***)(v4 + 48);
  v10 = *v8;
  v9 = (std::__shared_weak_count *)v8[1];
  v707 = v10;
  v708 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
  }
  v13 = atomic_load((unsigned __int8 *)(a1 + 88));
  if ((v13 & 1) != 0)
  {
    v651 = 0;
  }
  else
  {
    v14 = *a2;
    v15 = (std::__shared_weak_count *)a2[1];
    v705 = *a2;
    v706 = v15;
    if (v15)
    {
      v16 = (unint64_t *)&v15->__shared_owners_;
      do
        v17 = __ldxr(v16);
      while (__stxr(v17 + 1, v16));
    }
    v18 = *(std::exception_vtbl **)(v14 + 24);
    v730[0] = *(std::exception *)(v14 + 16);
    v730[1].__vftable = v18;
    if (v18)
    {
      v19 = (unint64_t *)&v18->~exception_0;
      do
        v20 = __ldxr(v19);
      while (__stxr(v20 + 1, v19));
    }
    v730[2].__vftable = (std::exception_vtbl *)v14;
    v730[3].__vftable = (std::exception_vtbl *)v15;
    if (v15)
    {
      v21 = (unint64_t *)&v15->__shared_owners_;
      do
        v22 = __ldxr(v21);
      while (__stxr(v22 + 1, v21));
    }
    v651 = mlcore::EntityRevisionController::latestRevisionNumber((mlcore::EntityRevisionController *)v730);
    if (v15)
    {
      v23 = (unint64_t *)&v15->__shared_owners_;
      do
        v24 = __ldaxr(v23);
      while (__stlxr(v24 - 1, v23));
      if (!v24)
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
      }
    }
    v25 = (std::__shared_weak_count *)v730[1].__vftable;
    if (v730[1].__vftable)
    {
      v26 = (unint64_t *)&v730[1].~exception_0;
      do
        v27 = __ldaxr(v26);
      while (__stlxr(v27 - 1, v26));
      if (!v27)
      {
        ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
        std::__shared_weak_count::__release_weak(v25);
      }
    }
    if (v706)
    {
      v28 = &v706->__shared_owners_;
      do
        v29 = __ldaxr((unint64_t *)v28);
      while (__stlxr(v29 - 1, (unint64_t *)v28));
      if (!v29)
      {
        ((void (*)(std::__shared_weak_count *))v706->__on_zero_shared)(v706);
        std::__shared_weak_count::__release_weak(v706);
      }
    }
  }
  mlcore::DeviceLibraryView::library(v709, __s);
  v30 = *((_QWORD *)__s[0] + 19);
  v31 = (std::exception_vtbl *)*((_QWORD *)__s[0] + 20);
  v730[0].__vftable = (std::exception_vtbl *)v30;
  v730[1].__vftable = v31;
  if (v31)
  {
    v32 = (unint64_t *)&v31->~exception_0;
    do
      v33 = __ldxr(v32);
    while (__stxr(v33 + 1, v32));
  }
  if (*(char *)(v30 + 399) < 0)
    std::string::__init_copy_ctor_external(&v704, *(const std::string::value_type **)(v30 + 376), *(_QWORD *)(v30 + 384));
  else
    v704 = *(std::string *)(v30 + 376);
  if (v31)
  {
    v34 = (unint64_t *)&v31->~exception_0;
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 - 1, v34));
    if (!v35)
    {
      (*((void (**)(std::exception_vtbl *))v31->~exception + 2))(v31);
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v31);
    }
  }
  v36 = (std::__shared_weak_count *)__s[1];
  if (__s[1])
  {
    v37 = (unint64_t *)(__s[1] + 8);
    do
      v38 = __ldaxr(v37);
    while (__stlxr(v38 - 1, v37));
    if (!v38)
    {
      ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
      std::__shared_weak_count::__release_weak(v36);
    }
  }
  v39 = (std::vector<std::string> *)operator new(0x60uLL);
  v39->__end_ = 0;
  v39->__end_cap_.__value_ = 0;
  v39->__begin_ = (std::vector<std::string>::pointer)&off_24C33B9C0;
  v650 = v3 + 32;
  v702 = mediaplatform::SearchMatcher::SearchMatcher(v39 + 1, (std::string *)(v3 + 32), (uint64_t)&v704, 7);
  v703 = (std::__shared_weak_count *)v39;
  v701 = 0uLL;
  v40 = atomic_load((unsigned __int8 *)(v3 + 88));
  v652 = v3;
  if ((v40 & 1) != 0)
    goto LABEL_270;
  *(_QWORD *)&v714 = 0;
  v41 = operator new();
  *(_OWORD *)v41 = 0u;
  *(_OWORD *)(v41 + 16) = 0u;
  *(_DWORD *)(v41 + 32) = 1065353216;
  *(_QWORD *)&v714 = v41;
  _ZNSt3__115allocate_sharedB8ne180100IN13mediaplatform18SQLSelectStatementENS_9allocatorIS2_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(&v694);
  v42 = v694;
  v43 = operator new(0x88uLL);
  v43[1] = 0;
  v43[2] = 0;
  *v43 = &off_24C33C130;
  std::string::basic_string[abi:ne180100]<0>(__s, "name_order");
  std::string::basic_string[abi:ne180100]<0>(v711, "");
  std::string::basic_string[abi:ne180100]<0>(v721, "");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  mediaplatform::SQLColumnNameExpression::SQLColumnNameExpression((uint64_t)(v43 + 3), (__int128 *)__s, (__int128 *)v711, (__int128 *)v721, (__int128 *)__p);
  if (SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
  if (SBYTE7(v722) < 0)
    operator delete(v721[0]);
  if (SHIBYTE(v711[2]) < 0)
    operator delete(v711[0]);
  if (SHIBYTE(__s[2]) < 0)
    operator delete(__s[0]);
  *(_QWORD *)&v724 = v43 + 3;
  *((_QWORD *)&v724 + 1) = v43;
  *(_OWORD *)&v730[0].__vftable = v724;
  v724 = 0uLL;
  v44 = operator new(0x88uLL);
  v44[1] = 0;
  v44[2] = 0;
  *v44 = &off_24C33C130;
  std::string::basic_string[abi:ne180100]<0>(__s, "name");
  std::string::basic_string[abi:ne180100]<0>(v711, "");
  std::string::basic_string[abi:ne180100]<0>(v721, "");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  mediaplatform::SQLColumnNameExpression::SQLColumnNameExpression((uint64_t)(v44 + 3), (__int128 *)__s, (__int128 *)v711, (__int128 *)v721, (__int128 *)__p);
  if (SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
  if (SBYTE7(v722) < 0)
    operator delete(v721[0]);
  if (SHIBYTE(v711[2]) < 0)
    operator delete(v711[0]);
  if (SHIBYTE(__s[2]) < 0)
    operator delete(__s[0]);
  v713.__r_.__value_.__r.__words[0] = (std::string::size_type)(v44 + 3);
  v713.__r_.__value_.__l.__size_ = (std::string::size_type)v44;
  *(_OWORD *)&v730[2].__vftable = *(_OWORD *)&v713.__r_.__value_.__l.__data_;
  *(_OWORD *)&v713.__r_.__value_.__l.__data_ = 0uLL;
  v728 = 0;
  v727[0] = 0;
  v727[1] = 0;
  __s[0] = (std::string::value_type *)v727;
  LOBYTE(__s[1]) = 0;
  v45 = (char *)operator new(0x20uLL);
  v46 = 0;
  v47 = 0;
  v727[0] = v45;
  v727[1] = v45;
  v728 = v45 + 32;
  v48 = v45;
  do
  {
    v49 = v46;
    v50 = *(_OWORD *)&v730[2 * v47].__vftable;
    *(_OWORD *)v48 = v50;
    if (*((_QWORD *)&v50 + 1))
    {
      v51 = (unint64_t *)(*((_QWORD *)&v50 + 1) + 8);
      do
        v52 = __ldxr(v51);
      while (__stxr(v52 + 1, v51));
    }
    v48 += 16;
    v46 = 1;
    v47 = 1;
  }
  while ((v49 & 1) == 0);
  v727[1] = v48;
  v53 = (void **)(*(_QWORD *)(v42 + 8) + 16);
  if (v53 != v727)
    std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__assign_with_size[abi:ne180100]<std::shared_ptr<mediaplatform::SQLExpression const>*,std::shared_ptr<mediaplatform::SQLExpression const>*>(v53, (uint64_t *)v45, (uint64_t *)v48, (v48 - v45) >> 4);
  __s[0] = (std::string::value_type *)v727;
  std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__destroy_vector::operator()[abi:ne180100]((void ***)__s);
  for (i = 2; i != -2; i -= 2)
    std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)&v730[i]);
  size = (std::__shared_weak_count *)v713.__r_.__value_.__l.__size_;
  if (v713.__r_.__value_.__l.__size_)
  {
    v56 = (unint64_t *)(v713.__r_.__value_.__l.__size_ + 8);
    do
      v57 = __ldaxr(v56);
    while (__stlxr(v57 - 1, v56));
    if (!v57)
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
  }
  v58 = (std::__shared_weak_count *)*((_QWORD *)&v724 + 1);
  if (*((_QWORD *)&v724 + 1))
  {
    v59 = (unint64_t *)(*((_QWORD *)&v724 + 1) + 8);
    do
      v60 = __ldaxr(v59);
    while (__stlxr(v60 - 1, v59));
    if (!v60)
    {
      ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
      std::__shared_weak_count::__release_weak(v58);
    }
  }
  v61 = v694;
  v62 = (std::__shared_weak_count *)operator new(0x50uLL);
  v62->__shared_owners_ = 0;
  v63 = (unint64_t *)&v62->__shared_owners_;
  v62->__shared_weak_owners_ = 0;
  v62->__vftable = (std::__shared_weak_count_vtbl *)&off_24C33BBF0;
  std::string::basic_string[abi:ne180100]<0>(v730, "sort_map");
  memset(__s, 0, 24);
  mediaplatform::SQLFromStatement::SQLFromStatement((uint64_t)&v62[1], (__int128 *)v730, (_QWORD **)__s);
  v711[0] = (std::string::value_type *)__s;
  std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__destroy_vector::operator()[abi:ne180100]((void ***)v711);
  if (SHIBYTE(v730[2].__vftable) < 0)
    operator delete(v730[0].__vftable);
  *(_QWORD *)&v64 = v62 + 1;
  *((_QWORD *)&v64 + 1) = v62;
  v699 = v64;
  mediaplatform::SQLSelectStatement::setFromStatement(v61, (uint64_t *)&v699);
  do
    v65 = __ldaxr(v63);
  while (__stlxr(v65 - 1, v63));
  if (!v65)
  {
    ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
    std::__shared_weak_count::__release_weak(v62);
  }
  v66 = v707;
  v67 = v694;
  v698 = v694;
  if (*((_QWORD *)&v694 + 1))
  {
    v68 = (unint64_t *)(*((_QWORD *)&v694 + 1) + 8);
    do
      v69 = __ldxr(v68);
    while (__stxr(v69 + 1, v68));
  }
  (*(void (**)(std::exception *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v67 + 16))(v730, v67, 0);
  mediaplatform::DatabaseConnection::_ensureConnectionIsOpen(v66);
  mediaplatform::DatabaseConnection::_prepareStatement((uint64_t)v66, (unsigned __int8 *)v730, (uint64_t *)__s);
  v70 = __s[0];
  v71 = (std::__shared_weak_count *)__s[1];
  if (__s[1])
  {
    v72 = (unint64_t *)(__s[1] + 8);
    do
      v73 = __ldxr(v72);
    while (__stxr(v73 + 1, v72));
    *(_QWORD *)&v677 = v70;
    *((_QWORD *)&v677 + 1) = v71;
    do
      v74 = __ldxr(v72);
    while (__stxr(v74 + 1, v72));
    do
      v75 = __ldaxr(v72);
    while (__stlxr(v75 - 1, v72));
    if (!v75)
    {
      ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
      std::__shared_weak_count::__release_weak(v71);
    }
  }
  else
  {
    v677 = (unint64_t)__s[0];
  }
  v76 = (std::__shared_weak_count *)__s[1];
  if (__s[1])
  {
    v77 = (unint64_t *)(__s[1] + 8);
    do
      v78 = __ldaxr(v77);
    while (__stlxr(v78 - 1, v77));
    if (!v78)
    {
      ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
      std::__shared_weak_count::__release_weak(v76);
    }
  }
  if (SHIBYTE(v730[2].__vftable) < 0)
    operator delete(v730[0].__vftable);
  v79 = (std::__shared_weak_count *)*((_QWORD *)&v698 + 1);
  if (*((_QWORD *)&v698 + 1))
  {
    v80 = (unint64_t *)(*((_QWORD *)&v698 + 1) + 8);
    do
      v81 = __ldaxr(v80);
    while (__stlxr(v81 - 1, v80));
    if (!v81)
    {
      ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
      std::__shared_weak_count::__release_weak(v79);
    }
  }
  *(_QWORD *)&v724 = &off_24C33B560;
  *((_QWORD *)&v724 + 1) = &v702;
  v725 = &v714;
  v726 = &v724;
  LOBYTE(v692) = 0;
  v82 = 1;
  while (1)
  {
    v83 = v677;
    v84 = sqlite3_step(*(sqlite3_stmt **)(v677 + 24));
    mediaplatform::DatabaseStatement::_checkSQLiteResult(v83, v84);
    *(_DWORD *)(v83 + 56) = v84;
    if (v84 != 100)
      break;
    memset(__p, 0, sizeof(__p));
    v730[0].__vftable = (std::exception_vtbl *)v83;
    LODWORD(v730[1].__vftable) = 1;
    __p[0] = (void *)sqlite3_column_int64(*(sqlite3_stmt **)(v83 + 24), 0);
    mediaplatform::ColumnResultsFunctor::operator()<std::string>((uint64_t *)v730, (uint64_t)&__p[1]);
    v85 = (std::string::value_type *)__p[0];
    __s[0] = (std::string::value_type *)__p[0];
    v86 = SHIBYTE(__p[3]);
    if (SHIBYTE(__p[3]) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)&__s[1], (const std::string::value_type *)__p[1], (std::string::size_type)__p[2]);
      v85 = __s[0];
    }
    else
    {
      *(_OWORD *)&__s[1] = *(_OWORD *)&__p[1];
      __s[3] = (std::string::value_type *)__p[3];
    }
    v716 = &v692;
    v711[0] = v85;
    v87 = SHIBYTE(__s[3]);
    if (SHIBYTE(__s[3]) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)&v711[1], __s[1], (std::string::size_type)__s[2]);
    }
    else
    {
      *(_OWORD *)&v711[1] = *(_OWORD *)&__s[1];
      v711[3] = __s[3];
    }
    v712 = &v692;
    v88 = (uint64_t)v726;
    if (!v726)
      goto LABEL_127;
    if (v726 != &v724)
    {
      v88 = (*(uint64_t (**)(void))(*(_QWORD *)v726 + 16))();
LABEL_127:
      v729 = (void **)v88;
      goto LABEL_129;
    }
    v729 = v727;
    (*(void (**)(uint64_t, uint64_t))(v724 + 24))((uint64_t)&v724, (uint64_t)v727);
LABEL_129:
    v730[0] = (std::exception)v711[0];
    v89 = SHIBYTE(v711[3]);
    if (SHIBYTE(v711[3]) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)&v730[1], v711[1], (std::string::size_type)v711[2]);
    }
    else
    {
      *(_OWORD *)&v730[1].__vftable = *(_OWORD *)&v711[1];
      v730[3] = (std::exception)v711[3];
    }
    *(_QWORD *)v731 = &v692;
    v90 = (uint64_t)v729;
    if (!v729)
      goto LABEL_135;
    if (v729 != v727)
    {
      v90 = (*((uint64_t (**)(void))*v729 + 2))();
LABEL_135:
      *((_QWORD *)&v722 + 1) = v90;
      goto LABEL_137;
    }
    *((_QWORD *)&v722 + 1) = v721;
    (*((void (**)(void **, void **))v727[0] + 3))(v727, v721);
LABEL_137:
    v91 = v730[0].__vftable;
    v92 = SHIBYTE(v730[3].__vftable);
    if (SHIBYTE(v730[3].__vftable) < 0)
      std::string::__init_copy_ctor_external(&v713, (const std::string::value_type *)v730[1].__vftable, (std::string::size_type)v730[2].__vftable);
    else
      v713 = *(std::string *)&v730[1].__vftable;
    *(_QWORD *)&v673 = v91;
    if (!*((_QWORD *)&v722 + 1))
      std::__throw_bad_function_call[abi:ne180100]();
    (*(void (**)(_QWORD, __int128 *, std::string *, std::string::value_type **))(**((_QWORD **)&v722 + 1)
                                                                                          + 48))(*((_QWORD *)&v722 + 1), &v673, &v713, &v692);
    if (SHIBYTE(v713.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v713.__r_.__value_.__l.__data_);
    v93 = (void **)*((_QWORD *)&v722 + 1);
    if (*((void ***)&v722 + 1) == v721)
    {
      v93 = v721;
      v94 = 4;
    }
    else
    {
      if (!*((_QWORD *)&v722 + 1))
        goto LABEL_148;
      v94 = 5;
    }
    (*((void (**)(void))*v93 + v94))();
LABEL_148:
    if (v92 < 0)
      operator delete(v730[1].__vftable);
    v95 = v729;
    if (v729 == v727)
    {
      v95 = v727;
      v96 = 4;
      v82 = 1;
    }
    else
    {
      v82 = 1;
      if (!v729)
        goto LABEL_155;
      v96 = 5;
    }
    (*((void (**)(void))*v95 + v96))();
LABEL_155:
    if (v89 < 0)
    {
      operator delete(v711[1]);
      if ((v87 & 0x80000000) == 0)
      {
LABEL_157:
        if (v86 < 0)
          goto LABEL_162;
        goto LABEL_158;
      }
    }
    else if ((v87 & 0x80000000) == 0)
    {
      goto LABEL_157;
    }
    operator delete(__s[1]);
    if (v86 < 0)
LABEL_162:
      operator delete(__p[1]);
LABEL_158:
    if ((_BYTE)v692)
      goto LABEL_165;
  }
  if (v84 == -1)
    __assert_rtn("hasColumnValueData", "DatabaseStatement.cpp", 102, "_lastStepResult != -1");
  LOBYTE(v692) = 1;
LABEL_165:
  v97 = sqlite3_reset(*(sqlite3_stmt **)(v83 + 24));
  mediaplatform::DatabaseStatement::_checkSQLiteResult(v83, v97);
  *(_DWORD *)(v83 + 56) = -1;
  v98 = v726;
  if (v726 == &v724)
  {
    v99 = 4;
    v98 = &v724;
LABEL_169:
    (*(void (**)(void))(*(_QWORD *)v98 + 8 * v99))();
  }
  else if (v726)
  {
    v99 = 5;
    goto LABEL_169;
  }
  v100 = v714;
  begin = v702[2].__begin_;
  end = v702[2].__end_;
  v103 = (std::mutex *)mlcore::SharedObject<mlcore::LocalizedSearchQuery::SearchWeightContext,int>::_mutex();
  std::mutex::lock(v103);
  v653 = v103;
  if ((v104 & 1) == 0
  {
    mlcore::SharedObject<mlcore::LocalizedSearchQuery::SearchWeightContext,int>::_nextToken(void)::token = operator new();
  }
  v105 = (*(_DWORD *)mlcore::SharedObject<mlcore::LocalizedSearchQuery::SearchWeightContext,int>::_nextToken(void)::token)++;
  v106 = (std::exception_vtbl *)operator new();
  std::unordered_map<long long,mediaplatform::SearchMatcher::ReasonResult>::unordered_map((uint64_t)v106, v100);
  v106[1].what = (const char *(__cdecl *)(const std::exception *__hidden))(0xAAAAAAAAAAAAAAABLL
                                                                         * (((char *)end - (char *)begin) >> 3));
  LODWORD(__s[0]) = v105;
  v730[0].__vftable = v106;
  v107 = operator new();
  *(_QWORD *)(v107 + 8) = 0;
  v108 = (unint64_t *)(v107 + 8);
  *(_QWORD *)v107 = &off_24C33D7B8;
  *(_QWORD *)(v107 + 16) = 0;
  *(_QWORD *)(v107 + 24) = v106;
  *(_DWORD *)(v107 + 32) = v105;
  v730[1].__vftable = (std::exception_vtbl *)v107;
  v109 = (_QWORD *)mlcore::SharedObject<mlcore::LocalizedSearchQuery::SearchWeightContext,int>::_objects();
  v110 = v109;
  v111 = v109[1];
  if (!v111)
    goto LABEL_188;
  v112 = (uint8x8_t)vcnt_s8((int8x8_t)v111);
  v112.i16[0] = vaddlv_u8(v112);
  if (v112.u32[0] > 1uLL)
  {
    v82 = v105;
    if (v111 <= v105)
      v82 = v105 % v111;
  }
  else
  {
    v82 = (v111 - 1) & v105;
  }
  v113 = *(void ***)(*v109 + 8 * v82);
  if (!v113 || (v114 = *v113) == 0)
  {
LABEL_188:
    v114 = operator new(0x28uLL);
    v116 = v110 + 2;
    *(_QWORD *)v114 = 0;
    *((_QWORD *)v114 + 1) = v105;
    *((_DWORD *)v114 + 4) = v105;
    *((_QWORD *)v114 + 3) = 0;
    *((_QWORD *)v114 + 4) = 0;
    v117 = (float)(unint64_t)(v110[3] + 1);
    v118 = *((float *)v110 + 8);
    if (v111 && (float)(v118 * (float)v111) >= v117)
    {
LABEL_234:
      v134 = (_QWORD *)*v110;
      v135 = *(_QWORD **)(*v110 + 8 * v82);
      if (v135)
      {
        *(_QWORD *)v114 = *v135;
        v3 = v652;
        v103 = v653;
      }
      else
      {
        *(_QWORD *)v114 = *v116;
        *v116 = v114;
        v134[v82] = v116;
        v3 = v652;
        v103 = v653;
        if (!*(_QWORD *)v114)
        {
LABEL_243:
          ++v110[3];
          goto LABEL_244;
        }
        v136 = *(_QWORD *)(*(_QWORD *)v114 + 8);
        if ((v111 & (v111 - 1)) != 0)
        {
          if (v136 >= v111)
            v136 %= v111;
        }
        else
        {
          v136 &= v111 - 1;
        }
        v135 = (_QWORD *)(*v110 + 8 * v136);
      }
      *v135 = v114;
      goto LABEL_243;
    }
    v119 = 1;
    if (v111 >= 3)
      v119 = (v111 & (v111 - 1)) != 0;
    v120 = v119 | (2 * v111);
    v121 = vcvtps_u32_f32(v117 / v118);
    if (v120 <= v121)
      prime = (int8x8_t)v121;
    else
      prime = (int8x8_t)v120;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
    }
    v111 = v110[1];
    if (*(_QWORD *)&prime > v111)
      goto LABEL_200;
    if (*(_QWORD *)&prime < v111)
    {
      v129 = vcvtps_u32_f32((float)(unint64_t)v110[3] / *((float *)v110 + 8));
      if (v111 < 3 || (v130 = (uint8x8_t)vcnt_s8((int8x8_t)v111), v130.i16[0] = vaddlv_u8(v130), v130.u32[0] > 1uLL))
      {
        v129 = std::__next_prime(v129);
      }
      else
      {
        v131 = 1 << -(char)__clz(v129 - 1);
        if (v129 >= 2)
          v129 = v131;
      }
      if (*(_QWORD *)&prime <= v129)
        prime = (int8x8_t)v129;
      if (*(_QWORD *)&prime >= v111)
      {
        v111 = v110[1];
      }
      else
      {
        if (prime)
        {
LABEL_200:
          if (*(_QWORD *)&prime >> 61)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v123 = operator new(8 * *(_QWORD *)&prime);
          v124 = (void *)*v110;
          *v110 = v123;
          if (v124)
            operator delete(v124);
          v125 = 0;
          v110[1] = prime;
          do
            *(_QWORD *)(*v110 + 8 * v125++) = 0;
          while (*(_QWORD *)&prime != v125);
          v126 = (_QWORD *)*v116;
          if (*v116)
          {
            v127 = v126[1];
            v128 = (uint8x8_t)vcnt_s8(prime);
            v128.i16[0] = vaddlv_u8(v128);
            if (v128.u32[0] > 1uLL)
            {
              if (v127 >= *(_QWORD *)&prime)
                v127 %= *(_QWORD *)&prime;
            }
            else
            {
              v127 &= *(_QWORD *)&prime - 1;
            }
            *(_QWORD *)(*v110 + 8 * v127) = v116;
            v132 = (_QWORD *)*v126;
            if (*v126)
            {
              do
              {
                v133 = v132[1];
                if (v128.u32[0] > 1uLL)
                {
                  if (v133 >= *(_QWORD *)&prime)
                    v133 %= *(_QWORD *)&prime;
                }
                else
                {
                  v133 &= *(_QWORD *)&prime - 1;
                }
                if (v133 != v127)
                {
                  if (!*(_QWORD *)(*v110 + 8 * v133))
                  {
                    *(_QWORD *)(*v110 + 8 * v133) = v126;
                    goto LABEL_225;
                  }
                  *v126 = *v132;
                  *v132 = **(_QWORD **)(*v110 + 8 * v133);
                  **(_QWORD **)(*v110 + 8 * v133) = v132;
                  v132 = v126;
                }
                v133 = v127;
LABEL_225:
                v126 = v132;
                v132 = (_QWORD *)*v132;
                v127 = v133;
              }
              while (v132);
            }
          }
          v111 = (unint64_t)prime;
          goto LABEL_229;
        }
        v647 = (void *)*v110;
        *v110 = 0;
        if (v647)
          operator delete(v647);
        v111 = 0;
        v110[1] = 0;
      }
    }
LABEL_229:
    if ((v111 & (v111 - 1)) != 0)
    {
      if (v111 <= v105)
        v82 = v105 % v111;
      else
        v82 = v105;
    }
    else
    {
      v82 = (v111 - 1) & v105;
    }
    goto LABEL_234;
  }
  while (2)
  {
    v115 = *((_QWORD *)v114 + 1);
    if (v115 != v105)
    {
      if (v112.u32[0] > 1uLL)
      {
        if (v115 >= v111)
          v115 %= v111;
      }
      else
      {
        v115 &= v111 - 1;
      }
      if (v115 != v82)
        goto LABEL_188;
      goto LABEL_187;
    }
    if (*((_DWORD *)v114 + 4) != v105)
    {
LABEL_187:
      v114 = *(void **)v114;
      if (!v114)
        goto LABEL_188;
      continue;
    }
    break;
  }
  v3 = v652;
LABEL_244:
  v137 = (unint64_t *)(v107 + 16);
  do
    v138 = __ldxr(v137);
  while (__stxr(v138 + 1, v137));
  v139 = (std::__shared_weak_count *)*((_QWORD *)v114 + 4);
  *((_QWORD *)v114 + 3) = v106;
  *((_QWORD *)v114 + 4) = v107;
  if (v139)
    std::__shared_weak_count::__release_weak(v139);
  *(_QWORD *)&v140 = v106;
  *((_QWORD *)&v140 + 1) = v107;
  v658 = v140;
  do
    v141 = __ldxr(v108);
  while (__stxr(v141 + 1, v108));
  do
    v142 = __ldaxr(v108);
  while (__stlxr(v142 - 1, v108));
  if (!v142)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v107 + 16))(v107);
    std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v107);
  }
  std::mutex::unlock(v103);
  v700 = v105;
  v143 = (std::__shared_weak_count *)*((_QWORD *)&v701 + 1);
  v701 = v658;
  if (v143)
  {
    v144 = (unint64_t *)&v143->__shared_owners_;
    do
      v145 = __ldaxr(v144);
    while (__stlxr(v145 - 1, v144));
    if (!v145)
    {
      ((void (*)(std::__shared_weak_count *))v143->__on_zero_shared)(v143);
      std::__shared_weak_count::__release_weak(v143);
    }
  }
  if ((_QWORD)v714)
  {
    v146 = std::__hash_table<std::__hash_value_type<long long,mediaplatform::SearchMatcher::ReasonResult>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,mediaplatform::SearchMatcher::ReasonResult>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,mediaplatform::SearchMatcher::ReasonResult>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,mediaplatform::SearchMatcher::ReasonResult>>>::~__hash_table(v714);
    MEMORY[0x20BD27AFC](v146, 0x10A0C408EF24B1CLL);
  }
  v147 = (std::__shared_weak_count *)*((_QWORD *)&v677 + 1);
  if (*((_QWORD *)&v677 + 1))
  {
    v148 = (unint64_t *)(*((_QWORD *)&v677 + 1) + 8);
    do
      v149 = __ldaxr(v148);
    while (__stlxr(v149 - 1, v148));
    if (!v149)
    {
      ((void (*)(std::__shared_weak_count *))v147->__on_zero_shared)(v147);
      std::__shared_weak_count::__release_weak(v147);
    }
  }
  v150 = (std::__shared_weak_count *)*((_QWORD *)&v694 + 1);
  if (*((_QWORD *)&v694 + 1))
  {
    v151 = (unint64_t *)(*((_QWORD *)&v694 + 1) + 8);
    do
      v152 = __ldaxr(v151);
    while (__stlxr(v152 - 1, v151));
    if (!v152)
    {
      ((void (*)(std::__shared_weak_count *))v150->__on_zero_shared)(v150);
      std::__shared_weak_count::__release_weak(v150);
    }
  }
LABEL_270:
  memset(&v713, 0, sizeof(v713));
  memset(v711, 0, sizeof(v711));
  LODWORD(v712) = 1065353216;
  v722 = 0u;
  *(_OWORD *)v721 = 0u;
  v723 = 1065353216;
  memset(__p, 0, sizeof(__p));
  v697 = 1065353216;
  v153 = *(_QWORD *)(v3 + 56);
  v648 = v3 + 56;
  if (*(_QWORD *)(v3 + 64) != v153)
  {
    v154 = 0;
    do
    {
      v155 = *(_OWORD *)(v153 + 16 * v154);
      *(_OWORD *)&v730[0].__vftable = v155;
      if (*((_QWORD *)&v155 + 1))
      {
        v156 = (unint64_t *)(*((_QWORD *)&v155 + 1) + 8);
        do
          v157 = __ldxr(v156);
        while (__stxr(v157 + 1, v156));
      }
      if (*(_QWORD *)(v155 + 56) == *(_QWORD *)(v155 + 48))
      {
        if (!std::__hash_table<std::__hash_value_type<std::shared_ptr<mlcore::LocalizedSearchScope>,long long>,std::__unordered_map_hasher<std::shared_ptr<mlcore::LocalizedSearchScope>,std::__hash_value_type<std::shared_ptr<mlcore::LocalizedSearchScope>,long long>,std::hash<std::shared_ptr<mlcore::LocalizedSearchScope>>,std::equal_to<std::shared_ptr<mlcore::LocalizedSearchScope>>,true>,std::__unordered_map_equal<std::shared_ptr<mlcore::LocalizedSearchScope>,std::__hash_value_type<std::shared_ptr<mlcore::LocalizedSearchScope>,long long>,std::equal_to<std::shared_ptr<mlcore::LocalizedSearchScope>>,std::hash<std::shared_ptr<mlcore::LocalizedSearchScope>>,true>,std::allocator<std::__hash_value_type<std::shared_ptr<mlcore::LocalizedSearchScope>,long long>>>::find<std::shared_ptr<mlcore::LocalizedSearchScope>>(v711, (uint64_t **)v730))std::vector<std::shared_ptr<mlcore::LocalizedSearchScope>>::push_back[abi:ne180100](&v713.__r_.__value_.__l.__data_, (__int128 *)v730);
        __s[0] = (std::string::value_type *)v730;
        v176 = std::__hash_table<std::__hash_value_type<std::shared_ptr<mlcore::LocalizedSearchScope>,long long>,std::__unordered_map_hasher<std::shared_ptr<mlcore::LocalizedSearchScope>,std::__hash_value_type<std::shared_ptr<mlcore::LocalizedSearchScope>,long long>,std::hash<std::shared_ptr<mlcore::LocalizedSearchScope>>,std::equal_to<std::shared_ptr<mlcore::LocalizedSearchScope>>,true>,std::__unordered_map_equal<std::shared_ptr<mlcore::LocalizedSearchScope>,std::__hash_value_type<std::shared_ptr<mlcore::LocalizedSearchScope>,long long>,std::equal_to<std::shared_ptr<mlcore::LocalizedSearchScope>>,std::hash<std::shared_ptr<mlcore::LocalizedSearchScope>>,true>,std::allocator<std::__hash_value_type<std::shared_ptr<mlcore::LocalizedSearchScope>,long long>>>::__emplace_unique_key_args<std::shared_ptr<mlcore::LocalizedSearchScope>,std::piecewise_construct_t const&,std::tuple<std::shared_ptr<mlcore::LocalizedSearchScope> const&>,std::tuple<>>((uint64_t)v711, (uint64_t **)v730, (_QWORD **)__s);
        v176[4] |= 1 << v154;
      }
      else
      {
        v158 = (char *)operator new(0x30uLL);
        *((_QWORD *)v158 + 1) = 0;
        *((_QWORD *)v158 + 2) = 0;
        *(_QWORD *)v158 = &off_24C33D780;
        *((_QWORD *)v158 + 4) = 0;
        *((_QWORD *)v158 + 5) = 0;
        *((_QWORD *)v158 + 3) = 0;
        __s[0] = v158 + 24;
        __s[1] = v158;
        v727[0] = v730;
        v159 = std::__hash_table<std::__hash_value_type<std::shared_ptr<mlcore::LocalizedSearchScope>,std::shared_ptr<std::vector<mlcore::EntityClass *>>>,std::__unordered_map_hasher<std::shared_ptr<mlcore::LocalizedSearchScope>,std::__hash_value_type<std::shared_ptr<mlcore::LocalizedSearchScope>,std::shared_ptr<std::vector<mlcore::EntityClass *>>>,std::hash<std::shared_ptr<mlcore::LocalizedSearchScope>>,std::equal_to<std::shared_ptr<mlcore::LocalizedSearchScope>>,true>,std::__unordered_map_equal<std::shared_ptr<mlcore::LocalizedSearchScope>,std::__hash_value_type<std::shared_ptr<mlcore::LocalizedSearchScope>,std::shared_ptr<std::vector<mlcore::EntityClass *>>>,std::equal_to<std::shared_ptr<mlcore::LocalizedSearchScope>>,std::hash<std::shared_ptr<mlcore::LocalizedSearchScope>>,true>,std::allocator<std::__hash_value_type<std::shared_ptr<mlcore::LocalizedSearchScope>,std::shared_ptr<std::vector<mlcore::EntityClass *>>>>>::__emplace_unique_key_args<std::shared_ptr<mlcore::LocalizedSearchScope>,std::piecewise_construct_t const&,std::tuple<std::shared_ptr<mlcore::LocalizedSearchScope> const&>,std::tuple<>>((uint64_t *)v721, (uint64_t)v730, (_QWORD **)v727);
        v160 = *(_OWORD *)__s;
        __s[0] = 0;
        __s[1] = 0;
        v161 = (std::__shared_weak_count *)v159[5];
        *((_OWORD *)v159 + 2) = v160;
        if (v161)
        {
          v162 = (unint64_t *)&v161->__shared_owners_;
          do
            v163 = __ldaxr(v162);
          while (__stlxr(v163 - 1, v162));
          if (!v163)
          {
            ((void (*)(std::__shared_weak_count *))v161->__on_zero_shared)(v161);
            std::__shared_weak_count::__release_weak(v161);
          }
        }
        v164 = (std::__shared_weak_count *)__s[1];
        if (__s[1])
        {
          v165 = (unint64_t *)(__s[1] + 8);
          do
            v166 = __ldaxr(v165);
          while (__stlxr(v166 - 1, v165));
          if (!v166)
          {
            ((void (*)(std::__shared_weak_count *))v164->__on_zero_shared)(v164);
            std::__shared_weak_count::__release_weak(v164);
          }
        }
        v167 = v730[0].__vftable[2].~exception;
        for (j = v730[0].__vftable[2].~exception_0;
              v167 != j;
              v167 = (void (__cdecl *)(std::exception *__hidden))((char *)v167 + 16))
        {
          v169 = (std::string::value_type *)*((_QWORD *)v167 + 1);
          __s[0] = *(std::string::value_type **)v167;
          __s[1] = v169;
          if (v169)
          {
            v170 = (unint64_t *)(v169 + 8);
            do
              v171 = __ldxr(v170);
            while (__stxr(v171 + 1, v170));
          }
          if (!std::__hash_table<std::__hash_value_type<std::shared_ptr<mlcore::LocalizedSearchScope>,long long>,std::__unordered_map_hasher<std::shared_ptr<mlcore::LocalizedSearchScope>,std::__hash_value_type<std::shared_ptr<mlcore::LocalizedSearchScope>,long long>,std::hash<std::shared_ptr<mlcore::LocalizedSearchScope>>,std::equal_to<std::shared_ptr<mlcore::LocalizedSearchScope>>,true>,std::__unordered_map_equal<std::shared_ptr<mlcore::LocalizedSearchScope>,std::__hash_value_type<std::shared_ptr<mlcore::LocalizedSearchScope>,long long>,std::equal_to<std::shared_ptr<mlcore::LocalizedSearchScope>>,std::hash<std::shared_ptr<mlcore::LocalizedSearchScope>>,true>,std::allocator<std::__hash_value_type<std::shared_ptr<mlcore::LocalizedSearchScope>,long long>>>::find<std::shared_ptr<mlcore::LocalizedSearchScope>>(v711, (uint64_t **)__s))std::vector<std::shared_ptr<mlcore::LocalizedSearchScope>>::push_back[abi:ne180100](&v713.__r_.__value_.__l.__data_, (__int128 *)__s);
          v727[0] = __s;
          v172 = std::__hash_table<std::__hash_value_type<std::shared_ptr<mlcore::LocalizedSearchScope>,long long>,std::__unordered_map_hasher<std::shared_ptr<mlcore::LocalizedSearchScope>,std::__hash_value_type<std::shared_ptr<mlcore::LocalizedSearchScope>,long long>,std::hash<std::shared_ptr<mlcore::LocalizedSearchScope>>,std::equal_to<std::shared_ptr<mlcore::LocalizedSearchScope>>,true>,std::__unordered_map_equal<std::shared_ptr<mlcore::LocalizedSearchScope>,std::__hash_value_type<std::shared_ptr<mlcore::LocalizedSearchScope>,long long>,std::equal_to<std::shared_ptr<mlcore::LocalizedSearchScope>>,std::hash<std::shared_ptr<mlcore::LocalizedSearchScope>>,true>,std::allocator<std::__hash_value_type<std::shared_ptr<mlcore::LocalizedSearchScope>,long long>>>::__emplace_unique_key_args<std::shared_ptr<mlcore::LocalizedSearchScope>,std::piecewise_construct_t const&,std::tuple<std::shared_ptr<mlcore::LocalizedSearchScope> const&>,std::tuple<>>((uint64_t)v711, (uint64_t **)__s, (_QWORD **)v727);
          v172[4] |= 1 << v154;
          v173 = (std::__shared_weak_count *)__s[1];
          if (__s[1])
          {
            v174 = (unint64_t *)(__s[1] + 8);
            do
              v175 = __ldaxr(v174);
            while (__stlxr(v175 - 1, v174));
            if (!v175)
            {
              ((void (*)(std::__shared_weak_count *))v173->__on_zero_shared)(v173);
              std::__shared_weak_count::__release_weak(v173);
            }
          }
        }
      }
      v177 = (char *)operator new(0x30uLL);
      *((_QWORD *)v177 + 1) = 0;
      *((_QWORD *)v177 + 2) = 0;
      *(_QWORD *)v177 = &off_24C33D6A0;
      *((_QWORD *)v177 + 4) = 0;
      *((_QWORD *)v177 + 5) = 0;
      *((_QWORD *)v177 + 3) = 0;
      __s[0] = v177 + 24;
      __s[1] = v177;
      v727[0] = v730;
      v178 = std::__hash_table<std::__hash_value_type<std::shared_ptr<mlcore::LocalizedSearchScope>,std::shared_ptr<std::vector<mlcore::PropertyCache>>>,std::__unordered_map_hasher<std::shared_ptr<mlcore::LocalizedSearchScope>,std::__hash_value_type<std::shared_ptr<mlcore::LocalizedSearchScope>,std::shared_ptr<std::vector<mlcore::PropertyCache>>>,std::hash<std::shared_ptr<mlcore::LocalizedSearchScope>>,std::equal_to<std::shared_ptr<mlcore::LocalizedSearchScope>>,true>,std::__unordered_map_equal<std::shared_ptr<mlcore::LocalizedSearchScope>,std::__hash_value_type<std::shared_ptr<mlcore::LocalizedSearchScope>,std::shared_ptr<std::vector<mlcore::PropertyCache>>>,std::equal_to<std::shared_ptr<mlcore::LocalizedSearchScope>>,std::hash<std::shared_ptr<mlcore::LocalizedSearchScope>>,true>,std::allocator<std::__hash_value_type<std::shared_ptr<mlcore::LocalizedSearchScope>,std::shared_ptr<std::vector<mlcore::PropertyCache>>>>>::__emplace_unique_key_args<std::shared_ptr<mlcore::LocalizedSearchScope>,std::piecewise_construct_t const&,std::tuple<std::shared_ptr<mlcore::LocalizedSearchScope> const&>,std::tuple<>>((uint64_t *)__p, (uint64_t)v730, (_QWORD **)v727);
      v3 = v652;
      v179 = *(_OWORD *)__s;
      __s[0] = 0;
      __s[1] = 0;
      v180 = (std::__shared_weak_count *)v178[5];
      *((_OWORD *)v178 + 2) = v179;
      if (v180)
      {
        v181 = (unint64_t *)&v180->__shared_owners_;
        do
          v182 = __ldaxr(v181);
        while (__stlxr(v182 - 1, v181));
        if (!v182)
        {
          ((void (*)(std::__shared_weak_count *))v180->__on_zero_shared)(v180);
          std::__shared_weak_count::__release_weak(v180);
        }
      }
      v183 = (std::__shared_weak_count *)__s[1];
      if (__s[1])
      {
        v184 = (unint64_t *)(__s[1] + 8);
        do
          v185 = __ldaxr(v184);
        while (__stlxr(v185 - 1, v184));
        if (!v185)
        {
          ((void (*)(std::__shared_weak_count *))v183->__on_zero_shared)(v183);
          std::__shared_weak_count::__release_weak(v183);
        }
      }
      v186 = (std::__shared_weak_count *)v730[1].__vftable;
      if (v730[1].__vftable)
      {
        v187 = (unint64_t *)&v730[1].~exception_0;
        do
          v188 = __ldaxr(v187);
        while (__stlxr(v188 - 1, v187));
        if (!v188)
        {
          ((void (*)(std::__shared_weak_count *))v186->__on_zero_shared)(v186);
          std::__shared_weak_count::__release_weak(v186);
        }
      }
      ++v154;
      v153 = *(_QWORD *)(v652 + 56);
    }
    while (v154 < (*(_QWORD *)(v652 + 64) - v153) >> 4);
  }
  v694 = 0uLL;
  v695 = 0;
  std::allocate_shared[abi:ne180100]<mediaplatform::SQLColumnNameExpression,std::allocator<mediaplatform::SQLColumnNameExpression>,char const(&)[7],void>(v730);
  *(_OWORD *)__s = *(_OWORD *)&v730[0].__vftable;
  LODWORD(v727[0]) = 17;
  LODWORD(v724) = 0;
  std::allocate_shared[abi:ne180100]<mediaplatform::SQLLiteralValue<int>,std::allocator<mediaplatform::SQLLiteralValue<int>>,int,void>(v730, &v724);
  std::allocate_shared[abi:ne180100]<mediaplatform::SQLBinaryExpression,std::allocator<mediaplatform::SQLBinaryExpression>,std::shared_ptr<mediaplatform::SQLExpression>,mediaplatform::SQLBinaryExpression::BinaryOperator,std::shared_ptr<mediaplatform::SQLColumnNameExpression>,void>(&v692, (__int128 *)__s, (int *)v727, (__int128 *)v730);
  v189 = (std::__shared_weak_count *)v730[1].__vftable;
  if (v730[1].__vftable)
  {
    v190 = (unint64_t *)&v730[1].~exception_0;
    do
      v191 = __ldaxr(v190);
    while (__stlxr(v191 - 1, v190));
    if (!v191)
    {
      ((void (*)(std::__shared_weak_count *))v189->__on_zero_shared)(v189);
      std::__shared_weak_count::__release_weak(v189);
    }
  }
  v192 = (std::__shared_weak_count *)__s[1];
  if (__s[1])
  {
    v193 = (unint64_t *)(__s[1] + 8);
    do
      v194 = __ldaxr(v193);
    while (__stlxr(v194 - 1, v193));
    if (!v194)
    {
      ((void (*)(std::__shared_weak_count *))v192->__on_zero_shared)(v192);
      std::__shared_weak_count::__release_weak(v192);
    }
  }
  v691 = 0;
  v195 = v713.__r_.__value_.__r.__words[0];
  if (v713.__r_.__value_.__l.__size_ == v713.__r_.__value_.__r.__words[0])
    goto LABEL_718;
  v196 = 0;
  while (2)
  {
    v197 = *(_OWORD *)(v195 + 16 * v196);
    v690 = v197;
    if (*((_QWORD *)&v197 + 1))
    {
      v198 = (unint64_t *)(*((_QWORD *)&v197 + 1) + 8);
      do
        v199 = __ldxr(v198);
      while (__stxr(v199 + 1, v198));
    }
    v200 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)v197 + 64))(*(_QWORD *)v197);
    v727[1] = 0;
    v727[0] = 0;
    v728 = 0;
    switch(v200)
    {
      case 0:
        v201 = (mlcore *)mlcore::TypedEntityClass<mlcore::Item>::sharedPointer();
        v202 = (mlcore *)mlcore::ItemPropertyPersistentID(v201);
        v203 = (mlcore *)mlcore::ItemPropertyTitleOrder(v202);
        v204 = (std::exception_vtbl *)mlcore::ItemPropertySearchTitle(v203);
        LODWORD(v730[0].__vftable) = 300;
        v730[1].__vftable = v204;
        v205 = (std::exception_vtbl *)mlcore::ItemPropertySearchAlbum((mlcore *)v204);
        LODWORD(v730[2].__vftable) = 75;
        v730[3].__vftable = v205;
        v206 = (mlcore *)mlcore::ItemPropertySearchArtist((mlcore *)v205);
        *(_DWORD *)v731 = 60;
        *(_QWORD *)&v731[8] = v206;
        v207 = mlcore::ItemPropertySearchItemArtist(v206);
        *(_DWORD *)&v731[16] = 20;
        v732 = v207;
        std::vector<std::pair<int,mlcore::ModelPropertyBase *>>::__assign_with_size[abi:ne180100]<std::pair<int,mlcore::ModelPropertyBase *> const*,std::pair<int,mlcore::ModelPropertyBase *> const*>((char **)v727, (__int128 *)v730, v733, 4uLL);
        goto LABEL_340;
      case 1:
        v201 = (mlcore *)mlcore::TypedEntityClass<mlcore::Playlist>::sharedPointer();
        v202 = (mlcore *)mlcore::PlaylistPropertyPersistentID(v201);
        v203 = (mlcore *)mlcore::PlaylistPropertyNameOrder(v202);
        v210 = (std::exception_vtbl *)mlcore::PlaylistPropertyNameOrder(v203);
        LODWORD(v730[0].__vftable) = 400;
        v730[1].__vftable = v210;
        std::vector<std::pair<int,mlcore::ModelPropertyBase *>>::__assign_with_size[abi:ne180100]<std::pair<int,mlcore::ModelPropertyBase *> const*,std::pair<int,mlcore::ModelPropertyBase *> const*>((char **)v727, (__int128 *)v730, (__int128 *)&v730[2], 1uLL);
        goto LABEL_340;
      case 3:
        v201 = (mlcore *)mlcore::TypedEntityClass<mlcore::Item>::sharedPointer();
        v202 = (mlcore *)mlcore::ItemPropertyGenrePersistentID(v201);
        v203 = (mlcore *)mlcore::ItemPropertyGenreOrder(v202);
        v208 = (std::exception_vtbl *)mlcore::ItemPropertyGenreOrder(v203);
        LODWORD(v730[0].__vftable) = 50;
        v730[1].__vftable = v208;
        std::vector<std::pair<int,mlcore::ModelPropertyBase *>>::__assign_with_size[abi:ne180100]<std::pair<int,mlcore::ModelPropertyBase *> const*,std::pair<int,mlcore::ModelPropertyBase *> const*>((char **)v727, (__int128 *)v730, (__int128 *)&v730[2], 1uLL);
        goto LABEL_340;
      case 4:
        v201 = (mlcore *)mlcore::TypedEntityClass<mlcore::Item>::sharedPointer();
        v202 = (mlcore *)mlcore::ItemPropertyAlbumPersistentID(v201);
        v203 = (mlcore *)mlcore::ItemPropertyAlbumOrder(v202);
        v211 = (std::exception_vtbl *)mlcore::ItemPropertySearchAlbum(v203);
        LODWORD(v730[0].__vftable) = 500;
        v730[1].__vftable = v211;
        v212 = (std::exception_vtbl *)mlcore::ItemPropertySearchArtist((mlcore *)v211);
        LODWORD(v730[2].__vftable) = 90;
        v730[3].__vftable = v212;
        std::vector<std::pair<int,mlcore::ModelPropertyBase *>>::__assign_with_size[abi:ne180100]<std::pair<int,mlcore::ModelPropertyBase *> const*,std::pair<int,mlcore::ModelPropertyBase *> const*>((char **)v727, (__int128 *)v730, (__int128 *)v731, 2uLL);
        goto LABEL_340;
      case 5:
        v201 = (mlcore *)mlcore::TypedEntityClass<mlcore::Item>::sharedPointer();
        v202 = (mlcore *)mlcore::ItemPropertyComposerPersistentID(v201);
        v203 = (mlcore *)mlcore::ItemPropertyComposerOrder(v202);
        v213 = (std::exception_vtbl *)mlcore::ItemPropertySearchComposer(v203);
        LODWORD(v730[0].__vftable) = 100;
        v730[1].__vftable = v213;
        std::vector<std::pair<int,mlcore::ModelPropertyBase *>>::__assign_with_size[abi:ne180100]<std::pair<int,mlcore::ModelPropertyBase *> const*,std::pair<int,mlcore::ModelPropertyBase *> const*>((char **)v727, (__int128 *)v730, (__int128 *)&v730[2], 1uLL);
        goto LABEL_340;
      case 7:
        v201 = (mlcore *)mlcore::TypedEntityClass<mlcore::Artist>::sharedPointer();
        v202 = (mlcore *)mlcore::ArtistPropertyPersistentID(v201);
        v203 = (mlcore *)mlcore::ArtistPropertyOrder(v202);
        v209 = (std::exception_vtbl *)mlcore::ArtistPropertyOrder(v203);
        LODWORD(v730[0].__vftable) = 600;
        v730[1].__vftable = v209;
        std::vector<std::pair<int,mlcore::ModelPropertyBase *>>::__assign_with_size[abi:ne180100]<std::pair<int,mlcore::ModelPropertyBase *> const*,std::pair<int,mlcore::ModelPropertyBase *> const*>((char **)v727, (__int128 *)v730, (__int128 *)&v730[2], 1uLL);
LABEL_340:
        v214 = atomic_load((unsigned __int8 *)(v3 + 88));
        if ((v214 & 1) != 0 || !(_QWORD)v701)
          goto LABEL_707;
        v215 = (char *)operator new(8uLL);
        *(_QWORD *)v215 = v202;
        v216 = v215 + 8;
        v217 = v727[0];
        v218 = v727[1];
        v219 = (mlcore **)(v215 + 8);
        break;
      default:
        goto LABEL_709;
    }
    while (2)
    {
      if (v217 != v218)
      {
        if (v219 < (mlcore **)v216)
        {
          *v219 = (mlcore *)v217[1];
          v220 = v219 + 1;
LABEL_362:
          v217 += 2;
          v218 = v727[1];
          v219 = v220;
          continue;
        }
        v221 = ((char *)v219 - v215) >> 3;
        v222 = v221 + 1;
        if ((unint64_t)(v221 + 1) >> 61)
          std::vector<std::string>::__throw_length_error[abi:ne180100]();
        if ((v216 - v215) >> 2 > v222)
          v222 = (v216 - v215) >> 2;
        if ((unint64_t)(v216 - v215) >= 0x7FFFFFFFFFFFFFF8)
          v223 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v223 = v222;
        if (v223)
          v223 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<mlcore::ModelPropertyBase *>>(v223);
        else
          v224 = 0;
        v225 = (_QWORD *)(v223 + 8 * v221);
        v216 = (char *)(v223 + 8 * v224);
        *v225 = v217[1];
        v220 = (mlcore **)(v225 + 1);
        if (v219 == (mlcore **)v215)
        {
          v215 = (char *)v219;
        }
        else
        {
          do
          {
            v226 = (uint64_t)*--v219;
            *--v225 = v226;
          }
          while (v219 != (mlcore **)v215);
          if (!v215)
            goto LABEL_361;
        }
        operator delete(v215);
LABEL_361:
        v215 = (char *)v225;
        goto LABEL_362;
      }
      break;
    }
    if (!v203)
    {
      v227 = (uint64_t)v219;
      v3 = v652;
      goto LABEL_382;
    }
    v3 = v652;
    if (v219 < (mlcore **)v216)
    {
      *v219 = v203;
      v227 = (uint64_t)(v219 + 1);
      goto LABEL_382;
    }
    v228 = ((char *)v219 - v215) >> 3;
    v229 = v228 + 1;
    if ((unint64_t)(v228 + 1) >> 61)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    if ((v216 - v215) >> 2 > v229)
      v229 = (v216 - v215) >> 2;
    if ((unint64_t)(v216 - v215) >= 0x7FFFFFFFFFFFFFF8)
      v230 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v230 = v229;
    if (v230)
      v230 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<mlcore::ModelPropertyBase *>>(v230);
    v231 = (mlcore **)(v230 + 8 * v228);
    *v231 = v203;
    v227 = (uint64_t)(v231 + 1);
    if (v219 == (mlcore **)v215)
    {
      v215 = (char *)v219;
LABEL_380:
      operator delete(v215);
      goto LABEL_381;
    }
    do
    {
      v232 = *--v219;
      *--v231 = v232;
    }
    while (v219 != (mlcore **)v215);
    if (v215)
      goto LABEL_380;
LABEL_381:
    v215 = (char *)v231;
LABEL_382:
    v233 = (char *)operator new(0x80uLL);
    *(_OWORD *)(v233 + 8) = 0u;
    *(_QWORD *)v233 = &off_24C33CB40;
    *(_OWORD *)&v730[0].__vftable = 0u;
    v688 = mlcore::PropertiesQuery::PropertiesQuery((uint64_t)(v233 + 24), (uint64_t)v201, (uint64_t *)v730);
    v689 = (std::__shared_weak_count *)v233;
    v234 = *(_QWORD *)(v690 + 8);
    v235 = *(std::__shared_weak_count **)(v690 + 16);
    if (v235)
    {
      v236 = (unint64_t *)&v235->__shared_owners_;
      do
        v237 = __ldxr(v236);
      while (__stxr(v237 + 1, v236));
      std::shared_ptr<mlcore::Predicate>::operator=[abi:ne180100]((_QWORD *)v233 + 5, v234, (uint64_t)v235);
      v238 = (unint64_t *)&v235->__shared_owners_;
      do
        v239 = __ldaxr(v238);
      while (__stlxr(v239 - 1, v238));
      if (!v239)
      {
        ((void (*)(std::__shared_weak_count *))v235->__on_zero_shared)(v235);
        std::__shared_weak_count::__release_weak(v235);
      }
    }
    else
    {
      std::shared_ptr<mlcore::Predicate>::operator=[abi:ne180100]((_QWORD *)v233 + 5, v234, 0);
    }
    v240 = v688;
    v686 = 0;
    v687 = 0;
    v685 = 0;
    std::vector<mlcore::ModelPropertyBase *>::__init_with_size[abi:ne180100]<mlcore::ModelPropertyBase **,mlcore::ModelPropertyBase **>(&v685, v215, v227, (v227 - (uint64_t)v215) >> 3);
    v241 = (char *)(v240 + 80);
    v242 = v685;
    std::vector<mlcore::ModelPropertyBase *>::__assign_with_size[abi:ne180100]<mlcore::ModelPropertyBase **,mlcore::ModelPropertyBase **>(v241, v685, (uint64_t)v686, (v686 - v685) >> 3);
    if (v242)
    {
      v686 = v242;
      operator delete(v242);
    }
    v243 = v688;
    v681 = v709;
    v682 = (std::__shared_weak_count *)v710;
    if (v710)
    {
      v244 = (unint64_t *)(v710 + 8);
      do
        v245 = __ldxr(v244);
      while (__stxr(v245 + 1, v244));
    }
    (*(void (**)(sqlite3_int64 *__return_ptr, uint64_t, mlcore::DeviceLibraryView **))(*(_QWORD *)v243 + 72))(&v683, v243, &v681);
    v246 = v682;
    if (v682)
    {
      v247 = (unint64_t *)&v682->__shared_owners_;
      do
        v248 = __ldaxr(v247);
      while (__stlxr(v248 - 1, v247));
      if (!v248)
      {
        ((void (*)(std::__shared_weak_count *))v246->__on_zero_shared)(v246);
        std::__shared_weak_count::__release_weak(v246);
      }
    }
    v249 = *(_QWORD *)(v683 + 8);
    v725 = 0;
    v724 = 0uLL;
    std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__init_with_size[abi:ne180100]<std::shared_ptr<mediaplatform::SQLExpression const>*,std::shared_ptr<mediaplatform::SQLExpression const>*>((char *)&v724, *(_QWORD **)(v249 + 16), *(_QWORD **)(v249 + 24), (uint64_t)(*(_QWORD *)(v249 + 24) - *(_QWORD *)(v249 + 16)) >> 4);
    if (*((_QWORD *)&v724 + 1) == (_QWORD)v724)
      std::vector<mlcore::PropertyCache>::__throw_out_of_range[abi:ne180100]();
    v250 = *(_QWORD *)(v724 + 8);
    v679 = *(std::exception_vtbl **)v724;
    v680 = (std::exception_vtbl *)v250;
    if (v250)
    {
      v251 = (unint64_t *)(v250 + 8);
      do
        v252 = __ldxr(v251);
      while (__stxr(v252 + 1, v251));
    }
    v253 = (char *)operator new(0x40uLL);
    *((_QWORD *)v253 + 1) = 0;
    v254 = (unint64_t *)(v253 + 8);
    *((_QWORD *)v253 + 2) = 0;
    *(_QWORD *)v253 = &off_24C33BB48;
    *((_QWORD *)v253 + 3) = off_24C335C00;
    *((_QWORD *)v253 + 4) = v700;
    v255 = (std::string *)(v253 + 40);
    if (*(char *)(v3 + 55) < 0)
    {
      std::string::__init_copy_ctor_external(v255, *(const std::string::value_type **)(v3 + 32), *(_QWORD *)(v3 + 40));
    }
    else
    {
      *(_OWORD *)&v255->__r_.__value_.__l.__data_ = *(_OWORD *)v650;
      *((_QWORD *)v253 + 7) = *(_QWORD *)(v650 + 16);
    }
    __s[0] = v253 + 24;
    __s[1] = v253;
    v673 = 0uLL;
    v678 = 0;
    v677 = 0uLL;
    v730[0].__vftable = (std::exception_vtbl *)&v677;
    LOBYTE(v730[1].__vftable) = 0;
    v256 = operator new(0x10uLL);
    *(_QWORD *)&v677 = v256;
    v678 = (std::exception_vtbl *)(v256 + 2);
    *v256 = v253 + 24;
    v256[1] = v253;
    do
      v257 = __ldxr(v254);
    while (__stxr(v257 + 1, v254));
    *((_QWORD *)&v677 + 1) = v256 + 2;
    do
      v258 = __ldaxr(v254);
    while (__stlxr(v258 - 1, v254));
    if (!v258)
    {
      (*(void (**)(char *))(*(_QWORD *)v253 + 16))(v253);
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v253);
    }
    v259 = (std::__shared_weak_count *)*((_QWORD *)&v673 + 1);
    if (*((_QWORD *)&v673 + 1))
    {
      v260 = (unint64_t *)(*((_QWORD *)&v673 + 1) + 8);
      do
        v261 = __ldaxr(v260);
      while (__stlxr(v261 - 1, v260));
      if (!v261)
      {
        ((void (*)(std::__shared_weak_count *))v259->__on_zero_shared)(v259);
        std::__shared_weak_count::__release_weak(v259);
      }
    }
    v262 = v727[0];
    if (v727[1] != v727[0])
    {
      v263 = 0;
      do
      {
        v264 = v263 + 1;
        if (v263 + 1 >= (unint64_t)((uint64_t)(*((_QWORD *)&v724 + 1) - v724) >> 4))
          std::vector<mlcore::PropertyCache>::__throw_out_of_range[abi:ne180100]();
        v265 = v262[4 * v263++];
        v266 = *(_OWORD *)(v724 + 16 * v264);
        *(_OWORD *)__s = v266;
        if (*((_QWORD *)&v266 + 1))
        {
          v267 = (unint64_t *)(*((_QWORD *)&v266 + 1) + 8);
          do
            v268 = __ldxr(v267);
          while (__stxr(v268 + 1, v267));
        }
        v269 = (char *)operator new(0x40uLL);
        *((_QWORD *)v269 + 1) = 0;
        *((_QWORD *)v269 + 2) = 0;
        *(_QWORD *)v269 = &off_24C33BAD8;
        std::string::basic_string[abi:ne180100]<0>(v730, "");
        *((_QWORD *)v269 + 3) = off_24C335BB0;
        *((_DWORD *)v269 + 8) = v265;
        v270 = (std::string *)(v269 + 40);
        if (SHIBYTE(v730[2].__vftable) < 0)
        {
          std::string::__init_copy_ctor_external(v270, (const std::string::value_type *)v730[0].__vftable, (std::string::size_type)v730[1].__vftable);
          if (SHIBYTE(v730[2].__vftable) < 0)
            operator delete(v730[0].__vftable);
        }
        else
        {
          *(_OWORD *)&v270->__r_.__value_.__l.__data_ = *(_OWORD *)&v730[0].__vftable;
          *((std::exception *)v269 + 7) = v730[2];
        }
        *(_QWORD *)&v714 = v269 + 24;
        *((_QWORD *)&v714 + 1) = v269;
        v271 = v714;
        v673 = v714;
        v714 = 0uLL;
        v272 = *((_QWORD *)&v677 + 1);
        if (*((_QWORD *)&v677 + 1) >= (unint64_t)v678)
        {
          v654 = v271;
          v274 = (uint64_t)(*((_QWORD *)&v677 + 1) - v677) >> 4;
          if ((unint64_t)(v274 + 1) >> 60)
            std::vector<std::string>::__throw_length_error[abi:ne180100]();
          v275 = (uint64_t)((uint64_t)v678 - v677) >> 3;
          if (v275 <= v274 + 1)
            v275 = v274 + 1;
          if ((unint64_t)((unint64_t)v678 - v677) >= 0x7FFFFFFFFFFFFFF0)
            v276 = 0xFFFFFFFFFFFFFFFLL;
          else
            v276 = v275;
          *(_QWORD *)v731 = &v678;
          v277 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<mediaplatform::DatabaseParameterBase>>>(v276);
          v279 = &v277[16 * v274];
          *(_OWORD *)v279 = v654;
          v673 = 0uLL;
          v280 = (_QWORD *)*((_QWORD *)&v677 + 1);
          v281 = (_QWORD *)v677;
          if (*((_QWORD *)&v677 + 1) == (_QWORD)v677)
          {
            v284 = vdupq_n_s64(*((unint64_t *)&v677 + 1));
            v282 = &v277[16 * v274];
          }
          else
          {
            v282 = &v277[16 * v274];
            do
            {
              v283 = *((_OWORD *)v280 - 1);
              v280 -= 2;
              *((_OWORD *)v282 - 1) = v283;
              v282 -= 16;
              *v280 = 0;
              v280[1] = 0;
            }
            while (v280 != v281);
            v284 = (int64x2_t)v677;
          }
          v273 = (std::string::value_type **)(v279 + 16);
          *(_QWORD *)&v677 = v282;
          *((_QWORD *)&v677 + 1) = v279 + 16;
          *(int64x2_t *)&v730[1].__vftable = v284;
          v285 = v678;
          v678 = (std::exception_vtbl *)&v277[16 * v278];
          v730[3].__vftable = v285;
          v730[0] = *(std::exception *)v284.i8;
          std::__split_buffer<std::shared_ptr<mediaplatform::SQLExpression const>>::~__split_buffer((uint64_t)v730);
        }
        else
        {
          **((_OWORD **)&v677 + 1) = v271;
          v273 = (std::string::value_type **)(v272 + 16);
          v673 = 0uLL;
        }
        *((_QWORD *)&v677 + 1) = v273;
        if (v273 >= (std::string::value_type **)v678)
        {
          v290 = (uint64_t)((uint64_t)v273 - v677) >> 4;
          if ((unint64_t)(v290 + 1) >> 60)
            std::vector<std::string>::__throw_length_error[abi:ne180100]();
          v291 = (uint64_t)((uint64_t)v678 - v677) >> 3;
          if (v291 <= v290 + 1)
            v291 = v290 + 1;
          if ((unint64_t)((unint64_t)v678 - v677) >= 0x7FFFFFFFFFFFFFF0)
            v292 = 0xFFFFFFFFFFFFFFFLL;
          else
            v292 = v291;
          *(_QWORD *)v731 = &v678;
          v293 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<mediaplatform::DatabaseParameterBase>>>(v292);
          v295 = &v293[16 * v290];
          v296 = __s[1];
          *(_OWORD *)v295 = *(_OWORD *)__s;
          if (v296)
          {
            v297 = (unint64_t *)(v296 + 8);
            do
              v298 = __ldxr(v297);
            while (__stxr(v298 + 1, v297));
          }
          v299 = (_QWORD *)*((_QWORD *)&v677 + 1);
          v300 = (_QWORD *)v677;
          if (*((_QWORD *)&v677 + 1) == (_QWORD)v677)
          {
            v303 = vdupq_n_s64(*((unint64_t *)&v677 + 1));
            v301 = &v293[16 * v290];
          }
          else
          {
            v301 = &v293[16 * v290];
            do
            {
              v302 = *((_OWORD *)v299 - 1);
              v299 -= 2;
              *((_OWORD *)v301 - 1) = v302;
              v301 -= 16;
              *v299 = 0;
              v299[1] = 0;
            }
            while (v299 != v300);
            v303 = (int64x2_t)v677;
          }
          v289 = (std::string::value_type **)(v295 + 16);
          *(_QWORD *)&v677 = v301;
          *((_QWORD *)&v677 + 1) = v295 + 16;
          *(int64x2_t *)&v730[1].__vftable = v303;
          v304 = v678;
          v678 = (std::exception_vtbl *)&v293[16 * v294];
          v730[3].__vftable = v304;
          v730[0] = *(std::exception *)v303.i8;
          std::__split_buffer<std::shared_ptr<mediaplatform::SQLExpression const>>::~__split_buffer((uint64_t)v730);
          v286 = (std::__shared_weak_count *)__s[1];
        }
        else
        {
          *v273 = __s[0];
          v286 = (std::__shared_weak_count *)__s[1];
          v273[1] = __s[1];
          if (v286)
          {
            v287 = (unint64_t *)&v286->__shared_owners_;
            do
              v288 = __ldxr(v287);
            while (__stxr(v288 + 1, v287));
          }
          v289 = v273 + 2;
        }
        *((_QWORD *)&v677 + 1) = v289;
        if (v286)
        {
          v305 = (unint64_t *)&v286->__shared_owners_;
          do
            v306 = __ldaxr(v305);
          while (__stlxr(v306 - 1, v305));
          if (!v306)
          {
            ((void (*)(std::__shared_weak_count *))v286->__on_zero_shared)(v286);
            std::__shared_weak_count::__release_weak(v286);
          }
        }
        v262 = v727[0];
      }
      while (v264 < ((char *)v727[1] - (char *)v727[0]) >> 4);
    }
    v676 = 0uLL;
    if (v203)
    {
      if (*((_QWORD *)&v724 + 1) == (_QWORD)v724)
        std::vector<mlcore::PropertyCache>::__throw_out_of_range[abi:ne180100]();
      v307 = *(_OWORD *)(*((_QWORD *)&v724 + 1) - 16);
      *(_OWORD *)&v730[0].__vftable = v307;
      v655 = v307;
      if (*((_QWORD *)&v307 + 1))
      {
        v308 = (unint64_t *)(*((_QWORD *)&v307 + 1) + 8);
        do
          v309 = __ldxr(v308);
        while (__stxr(v309 + 1, v308));
      }
      LODWORD(v673) = 0;
      std::allocate_shared[abi:ne180100]<mediaplatform::SQLLiteralValue<int>,std::allocator<mediaplatform::SQLLiteralValue<int>>,int,void>(__s, &v673);
      v310 = (char *)operator new(0x48uLL);
      v311 = v310;
      *((_QWORD *)v310 + 1) = 0;
      *((_QWORD *)v310 + 2) = 0;
      *(_QWORD *)v310 = &off_24C33BEC8;
      v312 = (std::__shared_weak_count *)v730[1].__vftable;
      if (v730[1].__vftable)
      {
        v313 = (unint64_t *)&v730[1].~exception_0;
        do
          v314 = __ldxr(v313);
        while (__stxr(v314 + 1, v313));
      }
      v315 = *(_OWORD *)__s;
      __s[1] = 0;
      __s[0] = 0;
      *((_QWORD *)v310 + 3) = &off_24C331138;
      *((_DWORD *)v310 + 8) = 14;
      *((_QWORD *)v310 + 5) = v655;
      *((_QWORD *)v310 + 6) = v312;
      if (v312)
      {
        v316 = (unint64_t *)&v312->__shared_owners_;
        do
          v317 = __ldxr(v316);
        while (__stxr(v317 + 1, v316));
      }
      *(_OWORD *)(v310 + 56) = v315;
      v318 = (std::__shared_weak_count *)*((_QWORD *)&v315 + 1);
      if (!*((_QWORD *)&v315 + 1))
        goto LABEL_484;
      v319 = (unint64_t *)(*((_QWORD *)&v315 + 1) + 8);
      do
        v320 = __ldxr(v319);
      while (__stxr(v320 + 1, v319));
      do
        v321 = __ldaxr(v319);
      while (__stlxr(v321 - 1, v319));
      if (!v321)
      {
        (*(void (**)(_QWORD))(**((_QWORD **)&v315 + 1) + 16))(*((_QWORD *)&v315 + 1));
        std::__shared_weak_count::__release_weak(v318);
        if (v312)
        {
LABEL_485:
          v322 = (unint64_t *)&v312->__shared_owners_;
          do
            v323 = __ldaxr(v322);
          while (__stlxr(v323 - 1, v322));
          if (!v323)
          {
            ((void (*)(std::__shared_weak_count *))v312->__on_zero_shared)(v312);
            std::__shared_weak_count::__release_weak(v312);
          }
        }
      }
      else
      {
LABEL_484:
        if (v312)
          goto LABEL_485;
      }
      *(_QWORD *)&v324 = v311 + 24;
      *((_QWORD *)&v324 + 1) = v311;
      v325 = (std::__shared_weak_count *)*((_QWORD *)&v676 + 1);
      v676 = v324;
      if (v325)
      {
        v326 = (unint64_t *)&v325->__shared_owners_;
        do
          v327 = __ldaxr(v326);
        while (__stlxr(v327 - 1, v326));
        if (!v327)
        {
          ((void (*)(std::__shared_weak_count *))v325->__on_zero_shared)(v325);
          std::__shared_weak_count::__release_weak(v325);
        }
      }
      v328 = (std::__shared_weak_count *)__s[1];
      if (__s[1])
      {
        v329 = (unint64_t *)(__s[1] + 8);
        do
          v330 = __ldaxr(v329);
        while (__stlxr(v330 - 1, v329));
        if (!v330)
        {
          ((void (*)(std::__shared_weak_count *))v328->__on_zero_shared)(v328);
          std::__shared_weak_count::__release_weak(v328);
        }
      }
      v331 = (std::__shared_weak_count *)v730[1].__vftable;
      if (v730[1].__vftable)
      {
        v332 = (unint64_t *)&v730[1].~exception_0;
        do
          v333 = __ldaxr(v332);
        while (__stlxr(v333 - 1, v332));
        if (!v333)
        {
          ((void (*)(std::__shared_weak_count *))v331->__on_zero_shared)(v331);
          std::__shared_weak_count::__release_weak(v331);
        }
      }
    }
    v730[0].__vftable = (std::exception_vtbl *)&off_24C330FB0;
    memset(&v730[1], 0, 24);
    std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__init_with_size[abi:ne180100]<std::shared_ptr<mediaplatform::SQLExpression const>*,std::shared_ptr<mediaplatform::SQLExpression const>*>((char *)&v730[1], (_QWORD *)v677, *((_QWORD **)&v677 + 1), (uint64_t)(*((_QWORD *)&v677 + 1) - v677) >> 4);
    v334 = operator new(0x58uLL);
    v334[1] = 0;
    v334[2] = 0;
    *v334 = &off_24C33C050;
    std::string::basic_string[abi:ne180100]<0>(__s, "SearchTermWeight");
    mediaplatform::SQLFunctionExpression::SQLFunctionExpression((uint64_t)(v334 + 3), (__int128 *)__s, (uint64_t)v730);
    if (SHIBYTE(__s[2]) < 0)
      operator delete(__s[0]);
    *(_QWORD *)&v675 = v334 + 3;
    *((_QWORD *)&v675 + 1) = v334;
    v730[0].__vftable = (std::exception_vtbl *)&off_24C330FB0;
    __s[0] = (std::string::value_type *)&v730[1];
    std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__destroy_vector::operator()[abi:ne180100]((void ***)__s);
    v335 = v683;
    v730[0].__vftable = v679;
    v730[1].__vftable = v680;
    if (v680)
    {
      v336 = (unint64_t *)&v680->~exception_0;
      do
        v337 = __ldxr(v336);
      while (__stxr(v337 + 1, v336));
    }
    std::allocate_shared[abi:ne180100]<mediaplatform::SQLLiteralValue<unsigned long>,std::allocator<mediaplatform::SQLLiteralValue<unsigned long>>,unsigned long &,void>(&v671, (uint64_t *)&v691);
    v338 = (char *)operator new(0x48uLL);
    *(_OWORD *)(v338 + 8) = 0u;
    *(_QWORD *)v338 = &off_24C33BE20;
    v656 = (std::__shared_weak_count *)*((_QWORD *)&v671 + 1);
    v714 = v671;
    v671 = 0u;
    std::string::basic_string[abi:ne180100]<0>(__s, "subscope_index");
    mediaplatform::SQLAliasExpression::SQLAliasExpression((std::string *)v338 + 1, (std::string::size_type *)&v714, (__int128 *)__s);
    if (SHIBYTE(__s[2]) < 0)
      operator delete(__s[0]);
    if (v656)
    {
      v339 = (unint64_t *)&v656->__shared_owners_;
      do
        v340 = __ldaxr(v339);
      while (__stlxr(v340 - 1, v339));
      if (!v340)
      {
        ((void (*)(std::__shared_weak_count *))v656->__on_zero_shared)(v656);
        std::__shared_weak_count::__release_weak(v656);
      }
    }
    *(_QWORD *)&v672 = v338 + 24;
    *((_QWORD *)&v672 + 1) = v338;
    *(_OWORD *)&v730[2].__vftable = v672;
    v672 = 0uLL;
    v341 = (std::string *)operator new(0x48uLL);
    v341->__r_.__value_.__l.__size_ = 0;
    v341->__r_.__value_.__r.__words[2] = 0;
    v341->__r_.__value_.__r.__words[0] = (std::string::size_type)&off_24C33BE20;
    v342 = (std::__shared_weak_count *)*((_QWORD *)&v675 + 1);
    v714 = v675;
    if (*((_QWORD *)&v675 + 1))
    {
      v343 = (unint64_t *)(*((_QWORD *)&v675 + 1) + 8);
      do
        v344 = __ldxr(v343);
      while (__stxr(v344 + 1, v343));
    }
    std::string::basic_string[abi:ne180100]<0>(__s, "weight");
    mediaplatform::SQLAliasExpression::SQLAliasExpression(v341 + 1, (std::string::size_type *)&v714, (__int128 *)__s);
    if (SHIBYTE(__s[2]) < 0)
    {
      operator delete(__s[0]);
      if (v342)
        goto LABEL_524;
    }
    else
    {
      if (!v342)
        goto LABEL_528;
LABEL_524:
      v345 = (unint64_t *)&v342->__shared_owners_;
      do
        v346 = __ldaxr(v345);
      while (__stlxr(v346 - 1, v345));
      if (!v346)
      {
        ((void (*)(std::__shared_weak_count *))v342->__on_zero_shared)(v342);
        std::__shared_weak_count::__release_weak(v342);
      }
    }
LABEL_528:
    *(_QWORD *)&v670 = v341 + 1;
    *((_QWORD *)&v670 + 1) = v341;
    *(_OWORD *)v731 = v670;
    v670 = 0uLL;
    v674 = 0;
    v673 = 0uLL;
    __s[0] = (std::string::value_type *)&v673;
    LOBYTE(__s[1]) = 0;
    v347 = (uint64_t *)operator new(0x30uLL);
    v348 = 0;
    *(_QWORD *)&v673 = v347;
    *((_QWORD *)&v673 + 1) = v347;
    v674 = v347 + 6;
    v349 = v347;
    do
    {
      v350 = *(_OWORD *)&v730[2 * v348].__vftable;
      *(_OWORD *)v349 = v350;
      if (*((_QWORD *)&v350 + 1))
      {
        v351 = (unint64_t *)(*((_QWORD *)&v350 + 1) + 8);
        do
          v352 = __ldxr(v351);
        while (__stxr(v352 + 1, v351));
      }
      ++v348;
      v349 += 2;
    }
    while (v348 != 3);
    *((_QWORD *)&v673 + 1) = v349;
    v353 = (__int128 *)(*(_QWORD *)(v335 + 8) + 16);
    if (v353 != &v673)
      std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__assign_with_size[abi:ne180100]<std::shared_ptr<mediaplatform::SQLExpression const>*,std::shared_ptr<mediaplatform::SQLExpression const>*>(v353, v347, v349, ((char *)v349 - (char *)v347) >> 4);
    __s[0] = (std::string::value_type *)&v673;
    std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__destroy_vector::operator()[abi:ne180100]((void ***)__s);
    for (k = 4; k != -2; k -= 2)
      std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)&v730[k]);
    v355 = (std::__shared_weak_count *)*((_QWORD *)&v670 + 1);
    if (*((_QWORD *)&v670 + 1))
    {
      v356 = (unint64_t *)(*((_QWORD *)&v670 + 1) + 8);
      do
        v357 = __ldaxr(v356);
      while (__stlxr(v357 - 1, v356));
      if (!v357)
      {
        ((void (*)(std::__shared_weak_count *))v355->__on_zero_shared)(v355);
        std::__shared_weak_count::__release_weak(v355);
      }
    }
    v358 = (std::__shared_weak_count *)*((_QWORD *)&v672 + 1);
    if (*((_QWORD *)&v672 + 1))
    {
      v359 = (unint64_t *)(*((_QWORD *)&v672 + 1) + 8);
      do
        v360 = __ldaxr(v359);
      while (__stlxr(v360 - 1, v359));
      if (!v360)
      {
        ((void (*)(std::__shared_weak_count *))v358->__on_zero_shared)(v358);
        std::__shared_weak_count::__release_weak(v358);
      }
    }
    v361 = (std::__shared_weak_count *)*((_QWORD *)&v671 + 1);
    if (*((_QWORD *)&v671 + 1))
    {
      v362 = (unint64_t *)(*((_QWORD *)&v671 + 1) + 8);
      do
        v363 = __ldaxr(v362);
      while (__stlxr(v363 - 1, v362));
      if (!v363)
      {
        ((void (*)(std::__shared_weak_count *))v361->__on_zero_shared)(v361);
        std::__shared_weak_count::__release_weak(v361);
      }
    }
    v364 = v683;
    v365 = (std::__shared_weak_count *)v680;
    v669[0] = (uint64_t)v679;
    v669[1] = (uint64_t)v680;
    if (v680)
    {
      v366 = (unint64_t *)&v680->~exception_0;
      do
        v367 = __ldxr(v366);
      while (__stxr(v367 + 1, v366));
      mediaplatform::SQLSelectStatement::setGroupingExpression(v364, v669);
      do
        v368 = __ldaxr(v366);
      while (__stlxr(v368 - 1, v366));
      if (!v368)
      {
        ((void (*)(std::__shared_weak_count *))v365->__on_zero_shared)(v365);
        std::__shared_weak_count::__release_weak(v365);
      }
    }
    else
    {
      mediaplatform::SQLSelectStatement::setGroupingExpression(v683, v669);
    }
    v369 = v692;
    v370 = (std::__shared_weak_count *)v693;
    __s[0] = v692;
    __s[1] = v693;
    if (v693)
    {
      v371 = (unint64_t *)(v693 + 8);
      do
        v372 = __ldxr(v371);
      while (__stxr(v372 + 1, v371));
    }
    v373 = v676;
    if ((_QWORD)v676)
    {
      v374 = operator new(0x48uLL);
      v375 = v374;
      v374[1] = 0;
      v374[2] = 0;
      *v374 = &off_24C33BEC8;
      if (v370)
      {
        v376 = (unint64_t *)&v370->__shared_owners_;
        do
          v377 = __ldxr(v376);
        while (__stxr(v377 + 1, v376));
      }
      v378 = (std::__shared_weak_count *)*((_QWORD *)&v676 + 1);
      if (*((_QWORD *)&v676 + 1))
      {
        v379 = (unint64_t *)(*((_QWORD *)&v676 + 1) + 8);
        do
          v380 = __ldxr(v379);
        while (__stxr(v380 + 1, v379));
      }
      v374[3] = &off_24C331138;
      *((_DWORD *)v374 + 8) = 1;
      v374[5] = v369;
      v374[6] = v370;
      if (v370)
      {
        v381 = (unint64_t *)&v370->__shared_owners_;
        do
          v382 = __ldxr(v381);
        while (__stxr(v382 + 1, v381));
      }
      v374[7] = v373;
      v374[8] = v378;
      if (!v378)
        goto LABEL_578;
      v383 = (unint64_t *)&v378->__shared_owners_;
      do
        v384 = __ldxr(v383);
      while (__stxr(v384 + 1, v383));
      do
        v385 = __ldaxr(v383);
      while (__stlxr(v385 - 1, v383));
      if (!v385)
      {
        ((void (*)(std::__shared_weak_count *))v378->__on_zero_shared)(v378);
        std::__shared_weak_count::__release_weak(v378);
        if (v370)
        {
LABEL_579:
          v386 = (unint64_t *)&v370->__shared_owners_;
          do
            v387 = __ldaxr(v386);
          while (__stlxr(v387 - 1, v386));
          if (!v387)
          {
            ((void (*)(std::__shared_weak_count *))v370->__on_zero_shared)(v370);
            std::__shared_weak_count::__release_weak(v370);
          }
        }
      }
      else
      {
LABEL_578:
        if (v370)
          goto LABEL_579;
      }
      *(_QWORD *)&v388 = v375 + 3;
      *((_QWORD *)&v388 + 1) = v375;
      v389 = (std::__shared_weak_count *)__s[1];
      *(_OWORD *)__s = v388;
      if (v389)
      {
        v390 = (unint64_t *)&v389->__shared_owners_;
        do
          v391 = __ldaxr(v390);
        while (__stlxr(v391 - 1, v390));
        if (!v391)
        {
          ((void (*)(std::__shared_weak_count *))v389->__on_zero_shared)(v389);
          std::__shared_weak_count::__release_weak(v389);
        }
      }
    }
    v392 = v683;
    v393 = *(_QWORD *)(v683 + 8);
    v394 = *(_QWORD *)(v393 + 56);
    v395 = *(std::__shared_weak_count **)(v393 + 64);
    *(_QWORD *)&v673 = v394;
    *((_QWORD *)&v673 + 1) = v395;
    if (v395)
    {
      v396 = (unint64_t *)&v395->__shared_owners_;
      do
        v397 = __ldxr(v396);
      while (__stxr(v397 + 1, v396));
    }
    if (v394)
    {
      v398 = (std::__shared_weak_count *)operator new(0x48uLL);
      v399 = v398;
      v398->__shared_owners_ = 0;
      v400 = (unint64_t *)&v398->__shared_owners_;
      v398->__shared_weak_owners_ = 0;
      v398->__vftable = (std::__shared_weak_count_vtbl *)&off_24C33BEC8;
      if (v395)
      {
        v401 = (unint64_t *)&v395->__shared_owners_;
        do
          v402 = __ldxr(v401);
        while (__stxr(v402 + 1, v401));
      }
      v403 = __s[0];
      v404 = (std::__shared_weak_count *)__s[1];
      if (__s[1])
      {
        v405 = (unint64_t *)(__s[1] + 8);
        do
          v406 = __ldxr(v405);
        while (__stxr(v406 + 1, v405));
      }
      v398[1].__vftable = (std::__shared_weak_count_vtbl *)&off_24C331138;
      LODWORD(v398[1].__shared_owners_) = 1;
      v398[1].__shared_weak_owners_ = v394;
      v398[2].__vftable = (std::__shared_weak_count_vtbl *)v395;
      if (v395)
      {
        v407 = (unint64_t *)&v395->__shared_owners_;
        do
          v408 = __ldxr(v407);
        while (__stxr(v408 + 1, v407));
      }
      v398[2].__shared_owners_ = (uint64_t)v403;
      v398[2].__shared_weak_owners_ = (uint64_t)v404;
      if (!v404)
        goto LABEL_607;
      v409 = (unint64_t *)&v404->__shared_owners_;
      do
        v410 = __ldxr(v409);
      while (__stxr(v410 + 1, v409));
      do
        v411 = __ldaxr(v409);
      while (__stlxr(v411 - 1, v409));
      if (!v411)
      {
        ((void (*)(std::__shared_weak_count *))v404->__on_zero_shared)(v404);
        std::__shared_weak_count::__release_weak(v404);
        if (v395)
        {
LABEL_608:
          v412 = (unint64_t *)&v395->__shared_owners_;
          do
            v413 = __ldaxr(v412);
          while (__stlxr(v413 - 1, v412));
          if (!v413)
          {
            ((void (*)(std::__shared_weak_count *))v395->__on_zero_shared)(v395);
            std::__shared_weak_count::__release_weak(v395);
          }
        }
      }
      else
      {
LABEL_607:
        if (v395)
          goto LABEL_608;
      }
      *(_QWORD *)&v419 = v399 + 1;
      *((_QWORD *)&v419 + 1) = v399;
      v668 = v419;
      mediaplatform::SQLSelectStatement::setWhereExpression(v392, (uint64_t *)&v668);
      do
        v420 = __ldaxr(v400);
      while (__stlxr(v420 - 1, v400));
      if (!v420)
      {
        ((void (*)(std::__shared_weak_count *))v399->__on_zero_shared)(v399);
        v418 = v399;
LABEL_624:
        std::__shared_weak_count::__release_weak(v418);
      }
    }
    else
    {
      v414 = __s[1];
      v667[0] = (uint64_t)__s[0];
      v667[1] = (uint64_t)__s[1];
      if (__s[1])
      {
        v415 = (unint64_t *)(__s[1] + 8);
        do
          v416 = __ldxr(v415);
        while (__stxr(v416 + 1, v415));
        mediaplatform::SQLSelectStatement::setWhereExpression(v392, v667);
        do
          v417 = __ldaxr(v415);
        while (__stlxr(v417 - 1, v415));
        if (!v417)
        {
          (*(void (**)(std::string::value_type *))(*(_QWORD *)v414 + 16))(v414);
          v418 = (std::__shared_weak_count *)v414;
          goto LABEL_624;
        }
      }
      else
      {
        mediaplatform::SQLSelectStatement::setWhereExpression(v392, v667);
      }
    }
    v421 = *(_QWORD *)(v683 + 16);
    *(_QWORD *)&v672 = *(_QWORD *)(v683 + 8);
    *((_QWORD *)&v672 + 1) = v421;
    if (v421)
    {
      v422 = (unint64_t *)(v421 + 8);
      do
        v423 = __ldxr(v422);
      while (__stxr(v423 + 1, v422));
    }
    v424 = (char *)operator new(0x70uLL);
    *(_OWORD *)(v424 + 8) = 0u;
    *(_QWORD *)v424 = &off_24C33C088;
    v657 = (std::__shared_weak_count *)*((_QWORD *)&v672 + 1);
    *(_OWORD *)&v730[0].__vftable = v672;
    v672 = 0u;
    mediaplatform::SQLSelectCoreStatement::SQLSelectCoreStatement((uint64_t)(v424 + 24), (uint64_t *)v730);
    if (v657)
    {
      v425 = (unint64_t *)&v657->__shared_owners_;
      do
        v426 = __ldaxr(v425);
      while (__stlxr(v426 - 1, v425));
      if (!v426)
      {
        ((void (*)(std::__shared_weak_count *))v657->__on_zero_shared)(v657);
        std::__shared_weak_count::__release_weak(v657);
      }
    }
    *(_QWORD *)&v714 = v424 + 24;
    *((_QWORD *)&v714 + 1) = v424;
    v427 = (std::__shared_weak_count *)*((_QWORD *)&v672 + 1);
    if (*((_QWORD *)&v672 + 1))
    {
      v428 = (unint64_t *)(*((_QWORD *)&v672 + 1) + 8);
      do
        v429 = __ldaxr(v428);
      while (__stlxr(v429 - 1, v428));
      if (!v429)
      {
        ((void (*)(std::__shared_weak_count *))v427->__on_zero_shared)(v427);
        std::__shared_weak_count::__release_weak(v427);
      }
    }
    v430 = (_QWORD *)*((_QWORD *)&v694 + 1);
    if (*((_QWORD *)&v694 + 1) >= (unint64_t)v695)
    {
      v435 = (_QWORD *)v694;
      v436 = (uint64_t)(*((_QWORD *)&v694 + 1) - v694) >> 4;
      v437 = v436 + 1;
      if ((unint64_t)(v436 + 1) >> 60)
        std::vector<std::string>::__throw_length_error[abi:ne180100]();
      v438 = (uint64_t)&v695[-v694];
      if ((uint64_t)&v695[-v694] >> 3 > v437)
        v437 = v438 >> 3;
      if ((unint64_t)v438 >= 0x7FFFFFFFFFFFFFF0)
        v439 = 0xFFFFFFFFFFFFFFFLL;
      else
        v439 = v437;
      if (v439 >> 60)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v440 = (char *)operator new(16 * v439);
      v441 = &v440[16 * v436];
      v442 = *((_QWORD *)&v714 + 1);
      *(_OWORD *)v441 = v714;
      if (v442)
      {
        v443 = (unint64_t *)(v442 + 8);
        do
          v444 = __ldxr(v443);
        while (__stxr(v444 + 1, v443));
        v430 = (_QWORD *)*((_QWORD *)&v694 + 1);
      }
      if (v430 == v435)
      {
        v447 = vdupq_n_s64((unint64_t)v430);
        v445 = &v440[16 * v436];
      }
      else
      {
        v445 = &v440[16 * v436];
        do
        {
          v446 = *((_OWORD *)v430 - 1);
          v430 -= 2;
          *((_OWORD *)v445 - 1) = v446;
          v445 -= 16;
          *v430 = 0;
          v430[1] = 0;
        }
        while (v430 != v435);
        v447 = (int64x2_t)v694;
      }
      v434 = v441 + 16;
      *(_QWORD *)&v694 = v445;
      *((_QWORD *)&v694 + 1) = v441 + 16;
      v695 = &v440[16 * v439];
      v448 = v447.i64[1];
      v449 = (void *)v447.i64[0];
      while ((void *)v448 != v449)
        v448 = std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100](v448 - 16);
      if (v449)
        operator delete(v449);
      v431 = (std::__shared_weak_count *)*((_QWORD *)&v714 + 1);
    }
    else
    {
      **((_QWORD **)&v694 + 1) = v714;
      v431 = (std::__shared_weak_count *)*((_QWORD *)&v714 + 1);
      v430[1] = *((_QWORD *)&v714 + 1);
      if (v431)
      {
        v432 = (unint64_t *)&v431->__shared_owners_;
        do
          v433 = __ldxr(v432);
        while (__stxr(v433 + 1, v432));
      }
      v434 = v430 + 2;
    }
    *((_QWORD *)&v694 + 1) = v434;
    if (v431)
    {
      v450 = (unint64_t *)&v431->__shared_owners_;
      do
        v451 = __ldaxr(v450);
      while (__stlxr(v451 - 1, v450));
      if (!v451)
      {
        ((void (*)(std::__shared_weak_count *))v431->__on_zero_shared)(v431);
        std::__shared_weak_count::__release_weak(v431);
      }
    }
    v452 = (std::__shared_weak_count *)*((_QWORD *)&v673 + 1);
    if (*((_QWORD *)&v673 + 1))
    {
      v453 = (unint64_t *)(*((_QWORD *)&v673 + 1) + 8);
      do
        v454 = __ldaxr(v453);
      while (__stlxr(v454 - 1, v453));
      if (!v454)
      {
        ((void (*)(std::__shared_weak_count *))v452->__on_zero_shared)(v452);
        std::__shared_weak_count::__release_weak(v452);
      }
    }
    v455 = (std::__shared_weak_count *)__s[1];
    if (__s[1])
    {
      v456 = (unint64_t *)(__s[1] + 8);
      do
        v457 = __ldaxr(v456);
      while (__stlxr(v457 - 1, v456));
      if (!v457)
      {
        ((void (*)(std::__shared_weak_count *))v455->__on_zero_shared)(v455);
        std::__shared_weak_count::__release_weak(v455);
      }
    }
    v458 = (std::__shared_weak_count *)*((_QWORD *)&v675 + 1);
    if (*((_QWORD *)&v675 + 1))
    {
      v459 = (unint64_t *)(*((_QWORD *)&v675 + 1) + 8);
      do
        v460 = __ldaxr(v459);
      while (__stlxr(v460 - 1, v459));
      if (!v460)
      {
        ((void (*)(std::__shared_weak_count *))v458->__on_zero_shared)(v458);
        std::__shared_weak_count::__release_weak(v458);
      }
    }
    v461 = (std::__shared_weak_count *)*((_QWORD *)&v676 + 1);
    if (*((_QWORD *)&v676 + 1))
    {
      v462 = (unint64_t *)(*((_QWORD *)&v676 + 1) + 8);
      do
        v463 = __ldaxr(v462);
      while (__stlxr(v463 - 1, v462));
      if (!v463)
      {
        ((void (*)(std::__shared_weak_count *))v461->__on_zero_shared)(v461);
        std::__shared_weak_count::__release_weak(v461);
      }
    }
    v730[0].__vftable = (std::exception_vtbl *)&v677;
    std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__destroy_vector::operator()[abi:ne180100]((void ***)v730);
    v464 = (std::__shared_weak_count *)v680;
    if (v680)
    {
      v465 = (unint64_t *)&v680->~exception_0;
      do
        v466 = __ldaxr(v465);
      while (__stlxr(v466 - 1, v465));
      if (!v466)
      {
        ((void (*)(std::__shared_weak_count *))v464->__on_zero_shared)(v464);
        std::__shared_weak_count::__release_weak(v464);
      }
    }
    v730[0].__vftable = (std::exception_vtbl *)&v724;
    std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__destroy_vector::operator()[abi:ne180100]((void ***)v730);
    v467 = v684;
    if (v684)
    {
      v468 = (unint64_t *)&v684->__shared_owners_;
      do
        v469 = __ldaxr(v468);
      while (__stlxr(v469 - 1, v468));
      if (!v469)
      {
        ((void (*)(std::__shared_weak_count *))v467->__on_zero_shared)(v467);
        std::__shared_weak_count::__release_weak(v467);
      }
    }
    v470 = v689;
    if (!v689)
      goto LABEL_705;
    v471 = (unint64_t *)&v689->__shared_owners_;
    do
      v472 = __ldaxr(v471);
    while (__stlxr(v472 - 1, v471));
    if (!v472)
    {
      ((void (*)(std::__shared_weak_count *))v470->__on_zero_shared)(v470);
      std::__shared_weak_count::__release_weak(v470);
      if (v215)
LABEL_706:
        operator delete(v215);
    }
    else
    {
LABEL_705:
      if (v215)
        goto LABEL_706;
    }
LABEL_707:
    if (v727[0])
      operator delete(v727[0]);
LABEL_709:
    v473 = (std::__shared_weak_count *)*((_QWORD *)&v690 + 1);
    if (*((_QWORD *)&v690 + 1))
    {
      v474 = (unint64_t *)(*((_QWORD *)&v690 + 1) + 8);
      do
        v475 = __ldaxr(v474);
      while (__stlxr(v475 - 1, v474));
      if (!v475)
      {
        ((void (*)(std::__shared_weak_count *))v473->__on_zero_shared)(v473);
        std::__shared_weak_count::__release_weak(v473);
      }
    }
    v196 = v691 + 1;
    v691 = v196;
    v195 = v713.__r_.__value_.__r.__words[0];
    if (v196 < (uint64_t)(v713.__r_.__value_.__l.__size_ - v713.__r_.__value_.__r.__words[0]) >> 4)
      continue;
    break;
  }
LABEL_718:
  v476 = (unsigned __int8 *)(v3 + 88);
  v477 = atomic_load((unsigned __int8 *)(v3 + 88));
  if ((v477 & 1) != 0)
    goto LABEL_844;
  v659 = (unsigned __int8 *)(v3 + 88);
  v478 = *((_QWORD *)&v694 + 1);
  v479 = v694;
  if (*((_QWORD *)&v694 + 1) == (_QWORD)v694)
    std::vector<mlcore::PropertyCache>::__throw_out_of_range[abi:ne180100]();
  v480 = *(_QWORD *)(v694 + 8);
  *(_QWORD *)&v673 = *(_QWORD *)v694;
  *((_QWORD *)&v673 + 1) = v480;
  if (v480)
  {
    v481 = (unint64_t *)(v480 + 8);
    do
      v482 = __ldxr(v481);
    while (__stxr(v482 + 1, v481));
    v478 = *((_QWORD *)&v694 + 1);
  }
  v677 = 0uLL;
  v678 = 0;
  v483 = v479 + 16;
  if (v479 + 16 != v478)
  {
    while (2)
    {
      v485 = *(std::exception_vtbl **)(v479 + 16);
      v484 = *(std::exception_vtbl **)(v479 + 24);
      v479 = v483;
      LODWORD(v730[0].__vftable) = 1;
      v730[1].__vftable = v485;
      v730[2].__vftable = v484;
      if (v484)
      {
        v486 = (unint64_t *)&v484->~exception_0;
        do
          v487 = __ldxr(v486);
        while (__stxr(v487 + 1, v486));
      }
      v488 = *((_QWORD *)&v677 + 1);
      if (*((_QWORD *)&v677 + 1) < (unint64_t)v678)
      {
        **((_DWORD **)&v677 + 1) = 1;
        *(_OWORD *)(v488 + 8) = *(_OWORD *)&v730[1].__vftable;
        v730[1].__vftable = 0;
        v730[2].__vftable = 0;
        v489 = (char *)(v488 + 24);
        break;
      }
      v490 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)&v677 + 1) - v677) >> 3);
      v491 = v490 + 1;
      if (v490 + 1 > 0xAAAAAAAAAAAAAAALL)
        std::vector<std::string>::__throw_length_error[abi:ne180100]();
      if (0x5555555555555556 * ((uint64_t)((uint64_t)v678 - v677) >> 3) > v491)
        v491 = 0x5555555555555556 * ((uint64_t)((uint64_t)v678 - v677) >> 3);
      if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)((uint64_t)v678 - v677) >> 3) >= 0x555555555555555)
        v492 = 0xAAAAAAAAAAAAAAALL;
      else
        v492 = v491;
      v493 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v492);
      v494 = &v493[24 * v490];
      v496 = (std::exception_vtbl *)&v493[24 * v495];
      *(_DWORD *)v494 = 1;
      *(_OWORD *)(v494 + 8) = *(_OWORD *)&v730[1].__vftable;
      v730[1].__vftable = 0;
      v730[2].__vftable = 0;
      v489 = v494 + 24;
      v497 = *((_QWORD *)&v677 + 1);
      v498 = v677;
      if (*((_QWORD *)&v677 + 1) == (_QWORD)v677)
      {
        *(_QWORD *)&v677 = v494;
        *((_QWORD *)&v677 + 1) = v494 + 24;
        v678 = v496;
        if (v497)
          goto LABEL_742;
      }
      else
      {
        do
        {
          v499 = *(_DWORD *)(v497 - 24);
          v497 -= 24;
          *((_DWORD *)v494 - 6) = v499;
          v494 -= 24;
          *(_OWORD *)(v494 + 8) = *(_OWORD *)(v497 + 8);
          *(_QWORD *)(v497 + 8) = 0;
          *(_QWORD *)(v497 + 16) = 0;
        }
        while (v497 != v498);
        v497 = *((_QWORD *)&v677 + 1);
        v500 = v677;
        *(_QWORD *)&v677 = v494;
        *((_QWORD *)&v677 + 1) = v489;
        v678 = v496;
        if (v497 != v500)
        {
          do
          {
            v501 = v497 - 24;
            std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100](v497 - 16);
            v497 = v501;
          }
          while (v501 != v500);
          v497 = v500;
        }
        if (v497)
        {
LABEL_742:
          operator delete((void *)v497);
          v502 = (std::__shared_weak_count *)v730[2].__vftable;
          *((_QWORD *)&v677 + 1) = v489;
          if (v730[2].__vftable)
          {
            v503 = (unint64_t *)&v730[2].~exception_0;
            do
              v504 = __ldaxr(v503);
            while (__stlxr(v504 - 1, v503));
            if (!v504)
            {
              ((void (*)(std::__shared_weak_count *))v502->__on_zero_shared)(v502);
              std::__shared_weak_count::__release_weak(v502);
            }
          }
LABEL_749:
          v483 = v479 + 16;
          if (v479 + 16 == *((_QWORD *)&v694 + 1))
            goto LABEL_750;
          continue;
        }
      }
      break;
    }
    *((_QWORD *)&v677 + 1) = v489;
    goto LABEL_749;
  }
LABEL_750:
  v505 = operator new(0x80uLL);
  v506 = v505;
  v505[1] = 0;
  v505[2] = 0;
  *v505 = &off_24C33C168;
  v507 = v505 + 3;
  v508 = (std::__shared_weak_count *)*((_QWORD *)&v673 + 1);
  *(_OWORD *)&v730[0].__vftable = v673;
  if (*((_QWORD *)&v673 + 1))
  {
    v509 = (unint64_t *)(*((_QWORD *)&v673 + 1) + 8);
    do
      v510 = __ldxr(v509);
    while (__stxr(v510 + 1, v509));
  }
  mediaplatform::SQLCompoundSelectStatement::SQLCompoundSelectStatement((uint64_t)(v505 + 3), v730, (uint64_t *)&v677);
  v3 = v652;
  if (v508)
  {
    v511 = (unint64_t *)&v508->__shared_owners_;
    do
      v512 = __ldaxr(v511);
    while (__stlxr(v512 - 1, v511));
    if (!v512)
    {
      ((void (*)(std::__shared_weak_count *))v508->__on_zero_shared)(v508);
      std::__shared_weak_count::__release_weak(v508);
    }
  }
  *(_QWORD *)&v714 = v507;
  *((_QWORD *)&v714 + 1) = v506;
  std::allocate_shared[abi:ne180100]<mediaplatform::SQLColumnNameExpression,std::allocator<mediaplatform::SQLColumnNameExpression>,char const(&)[7],void>(__s);
  v690 = *(_OWORD *)__s;
  LODWORD(v688) = 1;
  std::allocate_shared[abi:ne180100]<mediaplatform::SQLOrderingTerm,std::allocator<mediaplatform::SQLOrderingTerm>,std::shared_ptr<mediaplatform::SQLExpression>,mediaplatform::SQLOrderingTerm::OrderingType,void>(&v724, &v690, (unsigned int *)&v688);
  v513 = v724;
  *(_OWORD *)v727 = v724;
  v724 = 0uLL;
  memset(v730, 0, 24);
  __s[0] = (std::string::value_type *)v730;
  LOBYTE(__s[1]) = 0;
  v514 = (char *)operator new(0x10uLL);
  v730[0].__vftable = (std::exception_vtbl *)v514;
  v730[1].__vftable = (std::exception_vtbl *)v514;
  v730[2].__vftable = (std::exception_vtbl *)(v514 + 16);
  *(_OWORD *)v514 = v513;
  if (*((_QWORD *)&v513 + 1))
  {
    v515 = (unint64_t *)(*((_QWORD *)&v513 + 1) + 8);
    do
      v516 = __ldxr(v515);
    while (__stxr(v516 + 1, v515));
  }
  v730[1].__vftable = (std::exception_vtbl *)(v514 + 16);
  std::vector<std::shared_ptr<mediaplatform::SQLOrderingTerm const>>::__assign_with_size[abi:ne180100]<std::shared_ptr<mediaplatform::SQLOrderingTerm const>*,std::shared_ptr<mediaplatform::SQLOrderingTerm const>*>((uint64_t)(v506 + 13), (uint64_t *)v514, (uint64_t *)v514 + 2, 1uLL);
  __s[0] = (std::string::value_type *)v730;
  std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__destroy_vector::operator()[abi:ne180100]((void ***)__s);
  if (*((_QWORD *)&v513 + 1))
  {
    v517 = (unint64_t *)(*((_QWORD *)&v513 + 1) + 8);
    do
      v518 = __ldaxr(v517);
    while (__stlxr(v518 - 1, v517));
    if (!v518)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v513 + 1) + 16))(*((_QWORD *)&v513 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v513 + 1));
    }
  }
  v519 = (std::__shared_weak_count *)*((_QWORD *)&v724 + 1);
  if (*((_QWORD *)&v724 + 1))
  {
    v520 = (unint64_t *)(*((_QWORD *)&v724 + 1) + 8);
    do
      v521 = __ldaxr(v520);
    while (__stlxr(v521 - 1, v520));
    if (!v521)
    {
      ((void (*)(std::__shared_weak_count *))v519->__on_zero_shared)(v519);
      std::__shared_weak_count::__release_weak(v519);
    }
  }
  v522 = (std::__shared_weak_count *)*((_QWORD *)&v690 + 1);
  if (*((_QWORD *)&v690 + 1))
  {
    v523 = (unint64_t *)(*((_QWORD *)&v690 + 1) + 8);
    do
      v524 = __ldaxr(v523);
    while (__stlxr(v524 - 1, v523));
    if (!v524)
    {
      ((void (*)(std::__shared_weak_count *))v522->__on_zero_shared)(v522);
      std::__shared_weak_count::__release_weak(v522);
    }
  }
  v525 = (std::__shared_weak_count *)*((_QWORD *)&v714 + 1);
  v666 = v714;
  if (*((_QWORD *)&v714 + 1))
  {
    v526 = (unint64_t *)(*((_QWORD *)&v714 + 1) + 8);
    do
      v527 = __ldxr(v526);
    while (__stxr(v527 + 1, v526));
  }
  mlcore::SQLRenderer::SQLRenderer((uint64_t)v730, &v666);
  if (v525)
  {
    v528 = (unint64_t *)&v525->__shared_owners_;
    do
      v529 = __ldaxr(v528);
    while (__stlxr(v529 - 1, v528));
    if (!v529)
    {
      ((void (*)(std::__shared_weak_count *))v525->__on_zero_shared)(v525);
      std::__shared_weak_count::__release_weak(v525);
    }
  }
  v530 = v707;
  v662 = &off_24C331228;
  v663 = 0;
  v664 = 0;
  v665 = 0;
  std::vector<std::shared_ptr<mediaplatform::DatabaseParameterBase>>::__init_with_size[abi:ne180100]<std::shared_ptr<mediaplatform::DatabaseParameterBase>*,std::shared_ptr<mediaplatform::DatabaseParameterBase>*>(&v663, *(_QWORD **)&v731[8], *(_QWORD **)&v731[16], (uint64_t)(*(_QWORD *)&v731[16] - *(_QWORD *)&v731[8]) >> 4);
  mediaplatform::DatabaseConnection::_ensureConnectionIsOpen(v530);
  mediaplatform::DatabaseConnection::_prepareStatement((uint64_t)v530, (unsigned __int8 *)&v730[1], (uint64_t *)v727);
  v531 = v727[0];
  __s[0] = (std::string::value_type *)&off_24C331228;
  memset(&__s[1], 0, 24);
  std::vector<std::shared_ptr<mediaplatform::DatabaseParameterBase>>::__init_with_size[abi:ne180100]<std::shared_ptr<mediaplatform::DatabaseParameterBase>*,std::shared_ptr<mediaplatform::DatabaseParameterBase>*>(&__s[1], v663, v664, (v664 - v663) >> 4);
  mediaplatform::DatabaseStatement::bindParameters<mediaplatform::DatabaseParameterList>((uint64_t)v531, __s[1], __s[2]);
  __s[0] = (std::string::value_type *)&off_24C331228;
  *(_QWORD *)&v724 = &__s[1];
  std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v724);
  v532 = v727[0];
  v533 = (std::__shared_weak_count *)v727[1];
  if (v727[1])
  {
    v534 = (unint64_t *)((char *)v727[1] + 8);
    do
      v535 = __ldxr(v534);
    while (__stxr(v535 + 1, v534));
    *(_QWORD *)&v690 = v532;
    *((_QWORD *)&v690 + 1) = v533;
    do
      v536 = __ldxr(v534);
    while (__stxr(v536 + 1, v534));
    do
      v537 = __ldaxr(v534);
    while (__stlxr(v537 - 1, v534));
    if (!v537)
    {
      ((void (*)(std::__shared_weak_count *))v533->__on_zero_shared)(v533);
      std::__shared_weak_count::__release_weak(v533);
    }
  }
  else
  {
    v690 = (unint64_t)v727[0];
  }
  v538 = (std::__shared_weak_count *)v727[1];
  if (v727[1])
  {
    v539 = (unint64_t *)((char *)v727[1] + 8);
    do
      v540 = __ldaxr(v539);
    while (__stlxr(v540 - 1, v539));
    if (!v540)
    {
      ((void (*)(std::__shared_weak_count *))v538->__on_zero_shared)(v538);
      std::__shared_weak_count::__release_weak(v538);
    }
  }
  v662 = &off_24C331228;
  __s[0] = (std::string::value_type *)&v663;
  std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__destroy_vector::operator()[abi:ne180100]((void ***)__s);
  v541 = (__int128 *)operator new(0x30uLL);
  *(_QWORD *)v541 = &off_24C33B5B8;
  *((_QWORD *)v541 + 1) = v652;
  *((_QWORD *)v541 + 2) = &v713;
  *((_QWORD *)v541 + 3) = v711;
  *((_QWORD *)v541 + 4) = v721;
  *((_QWORD *)v541 + 5) = __p;
  v726 = v541;
  LOBYTE(v676) = 0;
  while (2)
  {
    v542 = v690;
    v543 = sqlite3_step(*(sqlite3_stmt **)(v690 + 24));
    mediaplatform::DatabaseStatement::_checkSQLiteResult(v542, v543);
    *(_DWORD *)(v542 + 56) = v543;
    if (v543 == 100)
    {
      v544 = sqlite3_column_int64(*(sqlite3_stmt **)(v542 + 24), 0);
      v545 = sqlite3_column_int64(*(sqlite3_stmt **)(v542 + 24), 1);
      v546 = sqlite3_column_int(*(sqlite3_stmt **)(v542 + 24), 2);
      if (!v726)
      {
        v729 = 0;
LABEL_994:
        __s[3] = 0;
        v688 = v544;
        v683 = v545;
        LODWORD(v679) = v546;
LABEL_995:
        std::__throw_bad_function_call[abi:ne180100]();
      }
      if (v726 == &v724)
      {
        v729 = v727;
        (*(void (**)(__int128 *, void **))(v724 + 24))(&v724, v727);
        v547 = v729;
        if (!v729)
          goto LABEL_994;
      }
      else
      {
        v547 = (void **)(*(uint64_t (**)(void))(*(_QWORD *)v726 + 16))();
        v729 = v547;
        if (!v547)
          goto LABEL_994;
      }
      if (v547 == v727)
      {
        __s[3] = (std::string::value_type *)__s;
        (*((void (**)(void **, std::string::value_type **))v727[0] + 3))(v727, __s);
        v548 = __s[3];
      }
      else
      {
        v548 = (std::string::value_type *)(*((uint64_t (**)(void **))*v547 + 2))(v547);
        __s[3] = v548;
      }
      v688 = v544;
      v683 = v545;
      LODWORD(v679) = v546;
      if (!v548)
        goto LABEL_995;
      (*(void (**)(std::string::value_type *, uint64_t *, sqlite3_int64 *, std::exception_vtbl **, __int128 *))(*(_QWORD *)v548 + 48))(v548, &v688, &v683, &v679, &v676);
      v549 = (std::string::value_type **)__s[3];
      if ((std::string::value_type **)__s[3] == __s)
      {
        v549 = __s;
        v550 = 4;
LABEL_813:
        (*(void (**)(void))&(*v549)[8 * v550])();
      }
      else if (__s[3])
      {
        v550 = 5;
        goto LABEL_813;
      }
      v551 = v729;
      if (v729 == v727)
      {
        v551 = v727;
        v552 = 4;
LABEL_818:
        (*((void (**)(void))*v551 + v552))();
      }
      else if (v729)
      {
        v552 = 5;
        goto LABEL_818;
      }
      if ((_BYTE)v676)
        goto LABEL_823;
      continue;
    }
    break;
  }
  if (v543 == -1)
    __assert_rtn("hasColumnValueData", "DatabaseStatement.cpp", 102, "_lastStepResult != -1");
  LOBYTE(v676) = 1;
LABEL_823:
  v553 = sqlite3_reset(*(sqlite3_stmt **)(v542 + 24));
  mediaplatform::DatabaseStatement::_checkSQLiteResult(v542, v553);
  *(_DWORD *)(v542 + 56) = -1;
  v554 = v726;
  if (v726 == &v724)
  {
    v555 = 4;
    v554 = &v724;
LABEL_827:
    (*(void (**)(void))(*(_QWORD *)v554 + 8 * v555))();
  }
  else if (v726)
  {
    v555 = 5;
    goto LABEL_827;
  }
  v556 = (std::__shared_weak_count *)*((_QWORD *)&v690 + 1);
  if (*((_QWORD *)&v690 + 1))
  {
    v557 = (unint64_t *)(*((_QWORD *)&v690 + 1) + 8);
    do
      v558 = __ldaxr(v557);
    while (__stlxr(v558 - 1, v557));
    if (!v558)
    {
      ((void (*)(std::__shared_weak_count *))v556->__on_zero_shared)(v556);
      std::__shared_weak_count::__release_weak(v556);
    }
  }
  mlcore::SQLRenderer::~SQLRenderer((mlcore::SQLRenderer *)v730);
  v559 = (std::__shared_weak_count *)*((_QWORD *)&v714 + 1);
  if (*((_QWORD *)&v714 + 1))
  {
    v560 = (unint64_t *)(*((_QWORD *)&v714 + 1) + 8);
    do
      v561 = __ldaxr(v560);
    while (__stlxr(v561 - 1, v560));
    if (!v561)
    {
      ((void (*)(std::__shared_weak_count *))v559->__on_zero_shared)(v559);
      std::__shared_weak_count::__release_weak(v559);
    }
  }
  v730[0].__vftable = (std::exception_vtbl *)&v677;
  std::vector<mediaplatform::SQLCompoundSelectStatement::CompoundFragment>::__destroy_vector::operator()[abi:ne180100]((void ***)v730);
  v562 = (std::__shared_weak_count *)*((_QWORD *)&v673 + 1);
  if (*((_QWORD *)&v673 + 1))
  {
    v563 = (unint64_t *)(*((_QWORD *)&v673 + 1) + 8);
    do
      v564 = __ldaxr(v563);
    while (__stlxr(v564 - 1, v563));
    if (!v564)
    {
      ((void (*)(std::__shared_weak_count *))v562->__on_zero_shared)(v562);
      std::__shared_weak_count::__release_weak(v562);
    }
  }
  v476 = v659;
LABEL_844:
  v565 = atomic_load(v476);
  if ((v565 & 1) != 0)
  {
    std::string::basic_string[abi:ne180100]<0>(v730, "Search query was cancelled.");
    mlcore::MediaError::MediaError((uint64_t)__s, 7, (uint64_t)v730);
    if (SHIBYTE(v730[2].__vftable) < 0)
      operator delete(v730[0].__vftable);
    v624 = operator new(0xF8uLL);
    v624[1] = 0;
    v624[2] = 0;
    *v624 = &off_24C33D208;
    *(_OWORD *)&v730[1].__vftable = *(_OWORD *)&__s[1];
    v730[0].__vftable = (std::exception_vtbl *)off_24C335E70;
    v730[3].__vftable = (std::exception_vtbl *)&unk_24C335EA0;
    *(_DWORD *)v731 = (_DWORD)v716;
    if (SHIBYTE(v718) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)&v731[8], (const std::string::value_type *)v717, *((std::string::size_type *)&v717 + 1));
    }
    else
    {
      *(_OWORD *)&v731[8] = v717;
      v732 = v718;
    }
    mediaplatform::PlatformErrorCondition::PlatformErrorCondition((mediaplatform::PlatformErrorCondition *)v733, (const mediaplatform::PlatformErrorCondition *)v719);
    if (SHIBYTE(v720.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v734, v720.__r_.__value_.__l.__data_, v720.__r_.__value_.__l.__size_);
    else
      v734 = v720;
    mlcore::LocalizedSearchQueryResult::LocalizedSearchQueryResult((uint64_t)(v624 + 3), (uint64_t)v730);
    v730[0].__vftable = (std::exception_vtbl *)off_24C335E70;
    v730[3].__vftable = (std::exception_vtbl *)&unk_24C335EA0;
    if (SHIBYTE(v734.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v734.__r_.__value_.__l.__data_);
    mediaplatform::PlatformErrorCondition::~PlatformErrorCondition((std::exception *)v733);
    if (SHIBYTE(v732) < 0)
      operator delete(*(void **)&v731[8]);
    std::exception::~exception(v730);
    v727[0] = v624 + 3;
    v727[1] = v624;
    v660 = *(_OWORD *)v727;
    v727[0] = 0;
    v727[1] = 0;
    v625 = *(_QWORD *)(a3 + 24);
    if (!v625)
      std::__throw_bad_function_call[abi:ne180100]();
    (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v625 + 48))(v625, &v660);
    v626 = (std::__shared_weak_count *)*((_QWORD *)&v660 + 1);
    if (*((_QWORD *)&v660 + 1))
    {
      v627 = (unint64_t *)(*((_QWORD *)&v660 + 1) + 8);
      do
        v628 = __ldaxr(v627);
      while (__stlxr(v628 - 1, v627));
      if (!v628)
      {
        ((void (*)(std::__shared_weak_count *))v626->__on_zero_shared)(v626);
        std::__shared_weak_count::__release_weak(v626);
      }
    }
    v629 = (std::__shared_weak_count *)v727[1];
    if (v727[1])
    {
      v630 = (unint64_t *)((char *)v727[1] + 8);
      do
        v631 = __ldaxr(v630);
      while (__stlxr(v631 - 1, v630));
      if (!v631)
      {
        ((void (*)(std::__shared_weak_count *))v629->__on_zero_shared)(v629);
        std::__shared_weak_count::__release_weak(v629);
      }
    }
    __s[0] = (std::string::value_type *)off_24C335E70;
    __s[3] = (std::string::value_type *)&unk_24C335EA0;
    if (SHIBYTE(v720.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v720.__r_.__value_.__l.__data_);
    mediaplatform::PlatformErrorCondition::~PlatformErrorCondition(v719);
    if (SHIBYTE(v718) < 0)
      operator delete((void *)v717);
    std::exception::~exception((std::exception *)__s);
  }
  else
  {
    memset(v730, 0, sizeof(v730));
    *(_DWORD *)v731 = 1065353216;
    v566 = *(_QWORD *)(v3 + 56);
    for (m = *(_QWORD *)(v3 + 64); v566 != m; v566 += 16)
    {
      v569 = *(uint64_t **)v566;
      v568 = *(_QWORD *)(v566 + 8);
      *(_QWORD *)&v673 = *(_QWORD *)v566;
      *((_QWORD *)&v673 + 1) = v568;
      if (v568)
      {
        v570 = (unint64_t *)(v568 + 8);
        do
          v571 = __ldxr(v570);
        while (__stxr(v571 + 1, v570));
      }
      if (v569[7] == v569[6])
      {
        v592 = *v569;
        v590 = (uint64_t)(v569 + 3);
        v591 = v592;
        __s[0] = (std::string::value_type *)&v673;
        v593 = std::__hash_table<std::__hash_value_type<std::shared_ptr<mlcore::LocalizedSearchScope>,std::shared_ptr<std::vector<mlcore::PropertyCache>>>,std::__unordered_map_hasher<std::shared_ptr<mlcore::LocalizedSearchScope>,std::__hash_value_type<std::shared_ptr<mlcore::LocalizedSearchScope>,std::shared_ptr<std::vector<mlcore::PropertyCache>>>,std::hash<std::shared_ptr<mlcore::LocalizedSearchScope>>,std::equal_to<std::shared_ptr<mlcore::LocalizedSearchScope>>,true>,std::__unordered_map_equal<std::shared_ptr<mlcore::LocalizedSearchScope>,std::__hash_value_type<std::shared_ptr<mlcore::LocalizedSearchScope>,std::shared_ptr<std::vector<mlcore::PropertyCache>>>,std::equal_to<std::shared_ptr<mlcore::LocalizedSearchScope>>,std::hash<std::shared_ptr<mlcore::LocalizedSearchScope>>,true>,std::allocator<std::__hash_value_type<std::shared_ptr<mlcore::LocalizedSearchScope>,std::shared_ptr<std::vector<mlcore::PropertyCache>>>>>::__emplace_unique_key_args<std::shared_ptr<mlcore::LocalizedSearchScope>,std::piecewise_construct_t const&,std::tuple<std::shared_ptr<mlcore::LocalizedSearchScope> const&>,std::tuple<>>((uint64_t *)__p, (uint64_t)&v673, (_QWORD **)__s);
        v594 = (std::__shared_weak_count_vtbl *)operator new();
        v594->~__shared_weak_count = 0;
        v594->~__shared_weak_count_0 = 0;
        v594->__on_zero_shared = 0;
        *(_QWORD *)&v690 = v594;
        v595 = operator new(0x128uLL);
        v595[1] = 0;
        v595[2] = 0;
        *v595 = &off_24C33CD38;
        __s[0] = (std::string::value_type *)v709;
        __s[1] = v710;
        if (v710)
        {
          v596 = (unint64_t *)(v710 + 8);
          do
            v597 = __ldxr(v596);
          while (__stxr(v597 + 1, v596));
        }
        v727[0] = v594;
        v598 = (std::__shared_weak_count *)operator new();
        v598->__shared_owners_ = 0;
        v599 = (unint64_t *)&v598->__shared_owners_;
        v598->__vftable = (std::__shared_weak_count_vtbl *)&off_24C33D978;
        v598->__shared_weak_owners_ = 0;
        v598[1].__vftable = v594;
        v727[1] = v598;
        *(_QWORD *)&v690 = 0;
        v724 = 0uLL;
        v677 = 0uLL;
        mlcore::EntityQueryResult::EntityQueryResult(v595 + 3, __s, v591, v590, v593 + 4, v727, &v724, v600, 0, 0, v651, (uint64_t *)&v677);
        do
          v601 = __ldaxr(v599);
        while (__stlxr(v601 - 1, v599));
        if (!v601)
        {
          ((void (*)(std::__shared_weak_count *))v598->__on_zero_shared)(v598);
          std::__shared_weak_count::__release_weak(v598);
        }
        v602 = (std::__shared_weak_count *)__s[1];
        if (__s[1])
        {
          v603 = (unint64_t *)(__s[1] + 8);
          do
            v604 = __ldaxr(v603);
          while (__stlxr(v604 - 1, v603));
          if (!v604)
          {
            ((void (*)(std::__shared_weak_count *))v602->__on_zero_shared)(v602);
            std::__shared_weak_count::__release_weak(v602);
          }
        }
        *(_QWORD *)&v714 = v595 + 3;
        *((_QWORD *)&v714 + 1) = v595;
        __s[0] = (std::string::value_type *)v673;
        v605 = std::__hash_table<std::__hash_value_type<mlcore::LocalizedSearchScope *,std::shared_ptr<mlcore::EntityQueryResult>>,std::__unordered_map_hasher<mlcore::LocalizedSearchScope *,std::__hash_value_type<mlcore::LocalizedSearchScope *,std::shared_ptr<mlcore::EntityQueryResult>>,std::hash<mlcore::LocalizedSearchScope *>,std::equal_to<mlcore::LocalizedSearchScope *>,true>,std::__unordered_map_equal<mlcore::LocalizedSearchScope *,std::__hash_value_type<mlcore::LocalizedSearchScope *,std::shared_ptr<mlcore::EntityQueryResult>>,std::equal_to<mlcore::LocalizedSearchScope *>,std::hash<mlcore::LocalizedSearchScope *>,true>,std::allocator<std::__hash_value_type<mlcore::LocalizedSearchScope *,std::shared_ptr<mlcore::EntityQueryResult>>>>::__emplace_unique_key_args<mlcore::LocalizedSearchScope *,std::piecewise_construct_t const&,std::tuple<mlcore::LocalizedSearchScope *&&>,std::tuple<>>((uint64_t)v730, v673, (uint64_t *)__s);
        v606 = v714;
        v714 = 0uLL;
        v607 = (std::__shared_weak_count *)v605[4];
        *(_OWORD *)(v605 + 3) = v606;
        if (v607)
        {
          v608 = (unint64_t *)&v607->__shared_owners_;
          do
            v609 = __ldaxr(v608);
          while (__stlxr(v609 - 1, v608));
          if (!v609)
          {
            ((void (*)(std::__shared_weak_count *))v607->__on_zero_shared)(v607);
            std::__shared_weak_count::__release_weak(v607);
          }
        }
        v610 = (std::__shared_weak_count *)*((_QWORD *)&v714 + 1);
        if (*((_QWORD *)&v714 + 1))
        {
          v611 = (unint64_t *)(*((_QWORD *)&v714 + 1) + 8);
          do
            v612 = __ldaxr(v611);
          while (__stlxr(v612 - 1, v611));
          if (!v612)
          {
            ((void (*)(std::__shared_weak_count *))v610->__on_zero_shared)(v610);
            std::__shared_weak_count::__release_weak(v610);
          }
        }
        std::unique_ptr<std::vector<mlcore::Section>>::reset[abi:ne180100]((void ***)&v690);
      }
      else
      {
        memset(__s, 0, sizeof(__s));
        LODWORD(v716) = 1065353216;
        v727[0] = &v673;
        v572 = std::__hash_table<std::__hash_value_type<std::shared_ptr<mlcore::LocalizedSearchScope>,std::shared_ptr<std::vector<mlcore::PropertyCache>>>,std::__unordered_map_hasher<std::shared_ptr<mlcore::LocalizedSearchScope>,std::__hash_value_type<std::shared_ptr<mlcore::LocalizedSearchScope>,std::shared_ptr<std::vector<mlcore::PropertyCache>>>,std::hash<std::shared_ptr<mlcore::LocalizedSearchScope>>,std::equal_to<std::shared_ptr<mlcore::LocalizedSearchScope>>,true>,std::__unordered_map_equal<std::shared_ptr<mlcore::LocalizedSearchScope>,std::__hash_value_type<std::shared_ptr<mlcore::LocalizedSearchScope>,std::shared_ptr<std::vector<mlcore::PropertyCache>>>,std::equal_to<std::shared_ptr<mlcore::LocalizedSearchScope>>,std::hash<std::shared_ptr<mlcore::LocalizedSearchScope>>,true>,std::allocator<std::__hash_value_type<std::shared_ptr<mlcore::LocalizedSearchScope>,std::shared_ptr<std::vector<mlcore::PropertyCache>>>>>::__emplace_unique_key_args<std::shared_ptr<mlcore::LocalizedSearchScope>,std::piecewise_construct_t const&,std::tuple<std::shared_ptr<mlcore::LocalizedSearchScope> const&>,std::tuple<>>((uint64_t *)__p, (uint64_t)&v673, (_QWORD **)v727);
        v727[0] = &v673;
        v573 = std::__hash_table<std::__hash_value_type<std::shared_ptr<mlcore::LocalizedSearchScope>,std::shared_ptr<std::vector<mlcore::EntityClass *>>>,std::__unordered_map_hasher<std::shared_ptr<mlcore::LocalizedSearchScope>,std::__hash_value_type<std::shared_ptr<mlcore::LocalizedSearchScope>,std::shared_ptr<std::vector<mlcore::EntityClass *>>>,std::hash<std::shared_ptr<mlcore::LocalizedSearchScope>>,std::equal_to<std::shared_ptr<mlcore::LocalizedSearchScope>>,true>,std::__unordered_map_equal<std::shared_ptr<mlcore::LocalizedSearchScope>,std::__hash_value_type<std::shared_ptr<mlcore::LocalizedSearchScope>,std::shared_ptr<std::vector<mlcore::EntityClass *>>>,std::equal_to<std::shared_ptr<mlcore::LocalizedSearchScope>>,std::hash<std::shared_ptr<mlcore::LocalizedSearchScope>>,true>,std::allocator<std::__hash_value_type<std::shared_ptr<mlcore::LocalizedSearchScope>,std::shared_ptr<std::vector<mlcore::EntityClass *>>>>>::__emplace_unique_key_args<std::shared_ptr<mlcore::LocalizedSearchScope>,std::piecewise_construct_t const&,std::tuple<std::shared_ptr<mlcore::LocalizedSearchScope> const&>,std::tuple<>>((uint64_t *)v721, (uint64_t)&v673, (_QWORD **)v727);
        v574 = operator new(0x160uLL);
        v576 = v574;
        v574[1] = 0;
        v574[2] = 0;
        *v574 = &off_24C33D0B8;
        v577 = (std::__shared_weak_count *)v710;
        v727[0] = v709;
        v727[1] = v710;
        if (v710)
        {
          v578 = (unint64_t *)(v710 + 8);
          do
            v579 = __ldxr(v578);
          while (__stxr(v579 + 1, v578));
        }
        v724 = 0uLL;
        mlcore::MultiEntityQueryResult::MultiEntityQueryResult((uint64_t)(v574 + 3), (uint64_t *)v727, (unint64_t)__s, v572 + 4, v573 + 4, v651, (uint64_t *)&v724, v575);
        if (v577)
        {
          v580 = (unint64_t *)&v577->__shared_owners_;
          do
            v581 = __ldaxr(v580);
          while (__stlxr(v581 - 1, v580));
          if (!v581)
          {
            ((void (*)(std::__shared_weak_count *))v577->__on_zero_shared)(v577);
            std::__shared_weak_count::__release_weak(v577);
          }
        }
        *(_QWORD *)&v677 = v576 + 3;
        *((_QWORD *)&v677 + 1) = v576;
        v727[0] = (void *)v673;
        v582 = std::__hash_table<std::__hash_value_type<mlcore::LocalizedSearchScope *,std::shared_ptr<mlcore::EntityQueryResult>>,std::__unordered_map_hasher<mlcore::LocalizedSearchScope *,std::__hash_value_type<mlcore::LocalizedSearchScope *,std::shared_ptr<mlcore::EntityQueryResult>>,std::hash<mlcore::LocalizedSearchScope *>,std::equal_to<mlcore::LocalizedSearchScope *>,true>,std::__unordered_map_equal<mlcore::LocalizedSearchScope *,std::__hash_value_type<mlcore::LocalizedSearchScope *,std::shared_ptr<mlcore::EntityQueryResult>>,std::equal_to<mlcore::LocalizedSearchScope *>,std::hash<mlcore::LocalizedSearchScope *>,true>,std::allocator<std::__hash_value_type<mlcore::LocalizedSearchScope *,std::shared_ptr<mlcore::EntityQueryResult>>>>::__emplace_unique_key_args<mlcore::LocalizedSearchScope *,std::piecewise_construct_t const&,std::tuple<mlcore::LocalizedSearchScope *&&>,std::tuple<>>((uint64_t)v730, v673, (uint64_t *)v727);
        v583 = v677;
        v677 = 0uLL;
        v584 = (std::__shared_weak_count *)v582[4];
        *(_OWORD *)(v582 + 3) = v583;
        if (v584)
        {
          v585 = (unint64_t *)&v584->__shared_owners_;
          do
            v586 = __ldaxr(v585);
          while (__stlxr(v586 - 1, v585));
          if (!v586)
          {
            ((void (*)(std::__shared_weak_count *))v584->__on_zero_shared)(v584);
            std::__shared_weak_count::__release_weak(v584);
          }
        }
        v587 = (std::__shared_weak_count *)*((_QWORD *)&v677 + 1);
        if (*((_QWORD *)&v677 + 1))
        {
          v588 = (unint64_t *)(*((_QWORD *)&v677 + 1) + 8);
          do
            v589 = __ldaxr(v588);
          while (__stlxr(v589 - 1, v588));
          if (!v589)
          {
            ((void (*)(std::__shared_weak_count *))v587->__on_zero_shared)(v587);
            std::__shared_weak_count::__release_weak(v587);
          }
        }
        std::__hash_table<std::__hash_value_type<mlcore::EntityClass *,std::vector<mlcore::ModelPropertyBase *>>,std::__unordered_map_hasher<mlcore::EntityClass *,std::__hash_value_type<mlcore::EntityClass *,std::vector<mlcore::ModelPropertyBase *>>,std::hash<mlcore::EntityClass *>,std::equal_to<mlcore::EntityClass *>,true>,std::__unordered_map_equal<mlcore::EntityClass *,std::__hash_value_type<mlcore::EntityClass *,std::vector<mlcore::ModelPropertyBase *>>,std::equal_to<mlcore::EntityClass *>,std::hash<mlcore::EntityClass *>,true>,std::allocator<std::__hash_value_type<mlcore::EntityClass *,std::vector<mlcore::ModelPropertyBase *>>>>::~__hash_table((uint64_t)__s);
      }
      v613 = (std::__shared_weak_count *)*((_QWORD *)&v673 + 1);
      if (*((_QWORD *)&v673 + 1))
      {
        v614 = (unint64_t *)(*((_QWORD *)&v673 + 1) + 8);
        do
          v615 = __ldaxr(v614);
        while (__stlxr(v615 - 1, v614));
        if (!v615)
        {
          ((void (*)(std::__shared_weak_count *))v613->__on_zero_shared)(v613);
          std::__shared_weak_count::__release_weak(v613);
        }
      }
    }
    v616 = (std::string::value_type *)operator new(0xF8uLL);
    *((_QWORD *)v616 + 1) = 0;
    *((_QWORD *)v616 + 2) = 0;
    *(_QWORD *)v616 = &off_24C33D208;
    __s[0] = (std::string::value_type *)mlcore::LocalizedSearchQueryResult::LocalizedSearchQueryResult((uint64_t)(v616 + 24), (uint64_t)v730, v648);
    __s[1] = v616;
    v661 = *(_OWORD *)__s;
    __s[1] = 0;
    __s[0] = 0;
    v617 = *(_QWORD *)(a3 + 24);
    if (!v617)
      std::__throw_bad_function_call[abi:ne180100]();
    (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v617 + 48))(v617, &v661);
    v618 = (std::__shared_weak_count *)*((_QWORD *)&v661 + 1);
    if (*((_QWORD *)&v661 + 1))
    {
      v619 = (unint64_t *)(*((_QWORD *)&v661 + 1) + 8);
      do
        v620 = __ldaxr(v619);
      while (__stlxr(v620 - 1, v619));
      if (!v620)
      {
        ((void (*)(std::__shared_weak_count *))v618->__on_zero_shared)(v618);
        std::__shared_weak_count::__release_weak(v618);
      }
    }
    v621 = (std::__shared_weak_count *)__s[1];
    if (__s[1])
    {
      v622 = (unint64_t *)(__s[1] + 8);
      do
        v623 = __ldaxr(v622);
      while (__stlxr(v623 - 1, v622));
      if (!v623)
      {
        ((void (*)(std::__shared_weak_count *))v621->__on_zero_shared)(v621);
        std::__shared_weak_count::__release_weak(v621);
      }
    }
    std::__hash_table<std::__hash_value_type<mlcore::LocalizedSearchScope *,std::shared_ptr<mlcore::EntityQueryResult>>,std::__unordered_map_hasher<mlcore::LocalizedSearchScope *,std::__hash_value_type<mlcore::LocalizedSearchScope *,std::shared_ptr<mlcore::EntityQueryResult>>,std::hash<mlcore::LocalizedSearchScope *>,std::equal_to<mlcore::LocalizedSearchScope *>,true>,std::__unordered_map_equal<mlcore::LocalizedSearchScope *,std::__hash_value_type<mlcore::LocalizedSearchScope *,std::shared_ptr<mlcore::EntityQueryResult>>,std::equal_to<mlcore::LocalizedSearchScope *>,std::hash<mlcore::LocalizedSearchScope *>,true>,std::allocator<std::__hash_value_type<mlcore::LocalizedSearchScope *,std::shared_ptr<mlcore::EntityQueryResult>>>>::~__hash_table((uint64_t)v730);
  }
  v632 = (std::__shared_weak_count *)v693;
  if (v693)
  {
    v633 = (unint64_t *)(v693 + 8);
    do
      v634 = __ldaxr(v633);
    while (__stlxr(v634 - 1, v633));
    if (!v634)
    {
      ((void (*)(std::__shared_weak_count *))v632->__on_zero_shared)(v632);
      std::__shared_weak_count::__release_weak(v632);
    }
  }
  v730[0].__vftable = (std::exception_vtbl *)&v694;
  std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__destroy_vector::operator()[abi:ne180100]((void ***)v730);
  std::__hash_table<std::__hash_value_type<std::shared_ptr<mlcore::LocalizedSearchScope>,std::shared_ptr<std::vector<mlcore::PropertyCache>>>,std::__unordered_map_hasher<std::shared_ptr<mlcore::LocalizedSearchScope>,std::__hash_value_type<std::shared_ptr<mlcore::LocalizedSearchScope>,std::shared_ptr<std::vector<mlcore::PropertyCache>>>,std::hash<std::shared_ptr<mlcore::LocalizedSearchScope>>,std::equal_to<std::shared_ptr<mlcore::LocalizedSearchScope>>,true>,std::__unordered_map_equal<std::shared_ptr<mlcore::LocalizedSearchScope>,std::__hash_value_type<std::shared_ptr<mlcore::LocalizedSearchScope>,std::shared_ptr<std::vector<mlcore::PropertyCache>>>,std::equal_to<std::shared_ptr<mlcore::LocalizedSearchScope>>,std::hash<std::shared_ptr<mlcore::LocalizedSearchScope>>,true>,std::allocator<std::__hash_value_type<std::shared_ptr<mlcore::LocalizedSearchScope>,std::shared_ptr<std::vector<mlcore::PropertyCache>>>>>::~__hash_table((uint64_t)__p);
  std::__hash_table<std::__hash_value_type<std::shared_ptr<mlcore::LocalizedSearchScope>,std::shared_ptr<std::vector<mlcore::PropertyCache>>>,std::__unordered_map_hasher<std::shared_ptr<mlcore::LocalizedSearchScope>,std::__hash_value_type<std::shared_ptr<mlcore::LocalizedSearchScope>,std::shared_ptr<std::vector<mlcore::PropertyCache>>>,std::hash<std::shared_ptr<mlcore::LocalizedSearchScope>>,std::equal_to<std::shared_ptr<mlcore::LocalizedSearchScope>>,true>,std::__unordered_map_equal<std::shared_ptr<mlcore::LocalizedSearchScope>,std::__hash_value_type<std::shared_ptr<mlcore::LocalizedSearchScope>,std::shared_ptr<std::vector<mlcore::PropertyCache>>>,std::equal_to<std::shared_ptr<mlcore::LocalizedSearchScope>>,std::hash<std::shared_ptr<mlcore::LocalizedSearchScope>>,true>,std::allocator<std::__hash_value_type<std::shared_ptr<mlcore::LocalizedSearchScope>,std::shared_ptr<std::vector<mlcore::PropertyCache>>>>>::~__hash_table((uint64_t)v721);
  std::__hash_table<std::__hash_value_type<std::shared_ptr<mlcore::LocalizedSearchScope>,long long>,std::__unordered_map_hasher<std::shared_ptr<mlcore::LocalizedSearchScope>,std::__hash_value_type<std::shared_ptr<mlcore::LocalizedSearchScope>,long long>,std::hash<std::shared_ptr<mlcore::LocalizedSearchScope>>,std::equal_to<std::shared_ptr<mlcore::LocalizedSearchScope>>,true>,std::__unordered_map_equal<std::shared_ptr<mlcore::LocalizedSearchScope>,std::__hash_value_type<std::shared_ptr<mlcore::LocalizedSearchScope>,long long>,std::equal_to<std::shared_ptr<mlcore::LocalizedSearchScope>>,std::hash<std::shared_ptr<mlcore::LocalizedSearchScope>>,true>,std::allocator<std::__hash_value_type<std::shared_ptr<mlcore::LocalizedSearchScope>,long long>>>::~__hash_table((uint64_t)v711);
  v730[0].__vftable = (std::exception_vtbl *)&v713;
  std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__destroy_vector::operator()[abi:ne180100]((void ***)v730);
  v635 = (std::__shared_weak_count *)*((_QWORD *)&v701 + 1);
  if (*((_QWORD *)&v701 + 1))
  {
    v636 = (unint64_t *)(*((_QWORD *)&v701 + 1) + 8);
    do
      v637 = __ldaxr(v636);
    while (__stlxr(v637 - 1, v636));
    if (!v637)
    {
      ((void (*)(std::__shared_weak_count *))v635->__on_zero_shared)(v635);
      std::__shared_weak_count::__release_weak(v635);
    }
  }
  v638 = v703;
  if (v703)
  {
    v639 = (unint64_t *)&v703->__shared_owners_;
    do
      v640 = __ldaxr(v639);
    while (__stlxr(v640 - 1, v639));
    if (!v640)
    {
      ((void (*)(std::__shared_weak_count *))v638->__on_zero_shared)(v638);
      std::__shared_weak_count::__release_weak(v638);
    }
  }
  if (SHIBYTE(v704.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v704.__r_.__value_.__l.__data_);
  v641 = v708;
  if (v708)
  {
    v642 = (unint64_t *)&v708->__shared_owners_;
    do
      v643 = __ldaxr(v642);
    while (__stlxr(v643 - 1, v642));
    if (!v643)
    {
      ((void (*)(std::__shared_weak_count *))v641->__on_zero_shared)(v641);
      std::__shared_weak_count::__release_weak(v641);
    }
  }
  v644 = (std::__shared_weak_count *)v710;
  if (v710)
  {
    v645 = (unint64_t *)(v710 + 8);
    do
      v646 = __ldaxr(v645);
    while (__stlxr(v646 - 1, v645));
    if (!v646)
    {
      ((void (*)(std::__shared_weak_count *))v644->__on_zero_shared)(v644);
      std::__shared_weak_count::__release_weak(v644);
    }
  }
}

void sub_20A811530(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,std::mutex *a21)
{
  std::mutex::unlock(a21);
  JUMPOUT(0x20A8120CCLL);
}

void sub_20A811544()
{
  void *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE v5[24];
  _BYTE *v6;

  __cxa_free_exception(v0);
  __cxa_end_catch();
  v1 = v6;
  if (v6 == v5)
  {
    v2 = 4;
    v1 = v5;
  }
  else
  {
    if (!v6)
    {
LABEL_6:
      std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)&v3);
      std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)&v4);
      JUMPOUT(0x20A81211CLL);
    }
    v2 = 5;
  }
  (*(void (**)(void))(*v1 + 8 * v2))();
  goto LABEL_6;
}

void sub_20A811594()
{
  int v0;
  int v1;
  char v2;
  char v3;
  uint64_t v4;
  unint64_t *v5;
  uint64_t v6;
  unint64_t *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE v13[24];
  _BYTE *v14;

  v5 = (unint64_t *)STACK[0x418];
  if ((unint64_t *)STACK[0x418] == &STACK[0x400])
  {
    v6 = 4;
    v5 = &STACK[0x400];
  }
  else
  {
    if (!v5)
      goto LABEL_6;
    v6 = 5;
  }
  (*(void (**)(void))(*v5 + 8 * v6))();
LABEL_6:
  if (v2 < 0)
    operator delete(*(void **)(v4 - 248));
  v7 = (unint64_t *)STACK[0x468];
  if ((unint64_t *)STACK[0x468] == &STACK[0x450])
  {
    v8 = 4;
    v7 = &STACK[0x450];
  }
  else
  {
    if (!v7)
    {
      if ((v3 & 0x80) == 0)
        goto LABEL_16;
      goto LABEL_12;
    }
    v8 = 5;
  }
  (*(void (**)(void))(*v7 + 8 * v8))();
  if ((v3 & 0x80) == 0)
  {
LABEL_16:
    if ((v1 & 0x80000000) == 0)
      goto LABEL_18;
    goto LABEL_17;
  }
LABEL_12:
  operator delete((void *)STACK[0x308]);
  if ((v1 & 0x80000000) == 0)
  {
LABEL_18:
    if (v0 < 0)
      operator delete((void *)STACK[0x238]);
    v9 = v14;
    if (v14 == v13)
    {
      v10 = 4;
      v9 = v13;
    }
    else
    {
      if (!v14)
      {
LABEL_25:
        std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)&v11);
        std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)&v12);
        JUMPOUT(0x20A81211CLL);
      }
      v10 = 5;
    }
    (*(void (**)(void))(*v9 + 8 * v10))();
    goto LABEL_25;
  }
LABEL_17:
  operator delete((void *)STACK[0x368]);
  goto LABEL_18;
}

void sub_20A8116E0()
{
  std::__shared_weak_count *v0;
  uint64_t v1;
  void *v2;

  std::__shared_weak_count::~__shared_weak_count(v0);
  operator delete(v2);
  std::__hash_table<std::__hash_value_type<mlcore::LocalizedSearchScope *,std::shared_ptr<mlcore::EntityQueryResult>>,std::__unordered_map_hasher<mlcore::LocalizedSearchScope *,std::__hash_value_type<mlcore::LocalizedSearchScope *,std::shared_ptr<mlcore::EntityQueryResult>>,std::hash<mlcore::LocalizedSearchScope *>,std::equal_to<mlcore::LocalizedSearchScope *>,true>,std::__unordered_map_equal<mlcore::LocalizedSearchScope *,std::__hash_value_type<mlcore::LocalizedSearchScope *,std::shared_ptr<mlcore::EntityQueryResult>>,std::equal_to<mlcore::LocalizedSearchScope *>,std::hash<mlcore::LocalizedSearchScope *>,true>,std::allocator<std::__hash_value_type<mlcore::LocalizedSearchScope *,std::shared_ptr<mlcore::EntityQueryResult>>>>::~__hash_table(v1 - 256);
  JUMPOUT(0x20A81207CLL);
}

void sub_20A8116F4()
{
  uint64_t v0;

  std::__hash_table<std::__hash_value_type<mlcore::LocalizedSearchScope *,std::shared_ptr<mlcore::EntityQueryResult>>,std::__unordered_map_hasher<mlcore::LocalizedSearchScope *,std::__hash_value_type<mlcore::LocalizedSearchScope *,std::shared_ptr<mlcore::EntityQueryResult>>,std::hash<mlcore::LocalizedSearchScope *>,std::equal_to<mlcore::LocalizedSearchScope *>,true>,std::__unordered_map_equal<mlcore::LocalizedSearchScope *,std::__hash_value_type<mlcore::LocalizedSearchScope *,std::shared_ptr<mlcore::EntityQueryResult>>,std::equal_to<mlcore::LocalizedSearchScope *>,std::hash<mlcore::LocalizedSearchScope *>,true>,std::allocator<std::__hash_value_type<mlcore::LocalizedSearchScope *,std::shared_ptr<mlcore::EntityQueryResult>>>>::~__hash_table(v0 - 256);
  JUMPOUT(0x20A81207CLL);
}

void sub_20A8116FC()
{
  uint64_t v0;

  mlcore::MediaError::~MediaError((std::exception *)(v0 - 256));
  JUMPOUT(0x20A811728);
}

void sub_20A811738()
{
  mlcore::MediaError::~MediaError((mlcore::MediaError *)&STACK[0x360]);
  JUMPOUT(0x20A81207CLL);
}

void sub_20A811740()
{
  uint64_t v0;

  if (*(char *)(v0 - 233) < 0)
    operator delete(*(void **)(v0 - 256));
  JUMPOUT(0x20A81207CLL);
}

void sub_20A811758()
{
  JUMPOUT(0x20A81207CLL);
}

void sub_20A811818(void *a1, int a2)
{
  uint64_t v2;

  if (a2)
  {
    __cxa_begin_catch(a1);
    mlcore::SharedObject<mlcore::LocalizedSearchQuery::SearchWeightContext,int>::create<std::unordered_map<long long,mediaplatform::SearchMatcher::ReasonResult> &,unsigned long>(std::unordered_map<long long,mediaplatform::SearchMatcher::ReasonResult> &,unsigned long &&)::{lambda(mlcore::LocalizedSearchQuery::SearchWeightContext*)#1}::operator()((int *)&STACK[0x360], v2);
    __cxa_rethrow();
  }
  JUMPOUT(0x20A812150);
}

void sub_20A81183C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,std::mutex *a21)
{
  __cxa_end_catch();
  std::mutex::unlock(a21);
  JUMPOUT(0x20A8120CCLL);
}

void sub_20A811848(void *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  JUMPOUT(0x20A812150);
}

void sub_20A811858(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,std::mutex *a21)
{
  uint64_t v21;

  MEMORY[0x20BD27AFC](v21, 0x10A0C4090A7D76FLL);
  std::mutex::unlock(a21);
  JUMPOUT(0x20A8120CCLL);
}

void sub_20A811878(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,std::mutex *a21)
{
  std::mutex::unlock(a21);
  JUMPOUT(0x20A8120CCLL);
}

void sub_20A811880()
{
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x260]);
  JUMPOUT(0x20A8120D4);
}

void sub_20A811888()
{
  std::__shared_weak_count *v0;
  unint64_t v1;
  uint64_t v2;
  void *v3;

  STACK[0x300] = v1;
  std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x300]);
  if (*(char *)(v2 - 233) < 0)
    operator delete(*(void **)(v2 - 256));
  std::__shared_weak_count::~__shared_weak_count(v0);
  operator delete(v3);
  JUMPOUT(0x20A8120D4);
}

void sub_20A8118EC()
{
  std::__shared_weak_count *v0;
  uint64_t v1;
  void *v2;

  if (SLOBYTE(STACK[0x247]) < 0)
    operator delete((void *)STACK[0x230]);
  if (SLOBYTE(STACK[0x417]) < 0)
    operator delete((void *)STACK[0x400]);
  if (SLOBYTE(STACK[0x317]) < 0)
    operator delete((void *)STACK[0x300]);
  if (SLOBYTE(STACK[0x377]) < 0)
    operator delete((void *)STACK[0x360]);
  std::__shared_weak_count::~__shared_weak_count(v0);
  operator delete(v2);
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x430]);
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100](v1 - 256);
  JUMPOUT(0x20A8120D4);
}

void sub_20A811970()
{
  JUMPOUT(0x20A81195CLL);
}

void sub_20A811978()
{
  std::__shared_weak_count *v0;
  void *v1;

  if (SLOBYTE(STACK[0x247]) < 0)
    operator delete((void *)STACK[0x230]);
  if (SLOBYTE(STACK[0x417]) < 0)
    operator delete((void *)STACK[0x400]);
  if (SLOBYTE(STACK[0x317]) < 0)
    operator delete((void *)STACK[0x300]);
  if (SLOBYTE(STACK[0x377]) < 0)
    JUMPOUT(0x20A8119D0);
  std::__shared_weak_count::~__shared_weak_count(v0);
  operator delete(v1);
  JUMPOUT(0x20A8120D4);
}

void sub_20A8119EC()
{
  JUMPOUT(0x20A8120D4);
}

void sub_20A8119F4()
{
  JUMPOUT(0x20A81211CLL);
}

void sub_20A811A00()
{
  uint64_t v0;
  uint64_t v1;

  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100](v0);
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100](v1 - 256);
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x2D0]);
  JUMPOUT(0x20A812140);
}

void sub_20A811A38()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _BYTE v4[24];
  _BYTE *v5;

  if (SLOBYTE(STACK[0x24F]) < 0)
    JUMPOUT(0x20A811A44);
  v0 = v5;
  if (v5 == v4)
  {
    v1 = 4;
    v0 = v4;
  }
  else
  {
    if (!v5)
    {
LABEL_8:
      std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100](&v2);
      std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100](&v3);
      JUMPOUT(0x20A81211CLL);
    }
    v1 = 5;
  }
  (*(void (**)(void))(*v0 + 8 * v1))();
  goto LABEL_8;
}

void sub_20A811A50(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  uint64_t v27;

  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)&a27);
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x360]);
  std::__hash_table<std::__hash_value_type<mlcore::LocalizedSearchScope *,std::shared_ptr<mlcore::EntityQueryResult>>,std::__unordered_map_hasher<mlcore::LocalizedSearchScope *,std::__hash_value_type<mlcore::LocalizedSearchScope *,std::shared_ptr<mlcore::EntityQueryResult>>,std::hash<mlcore::LocalizedSearchScope *>,std::equal_to<mlcore::LocalizedSearchScope *>,true>,std::__unordered_map_equal<mlcore::LocalizedSearchScope *,std::__hash_value_type<mlcore::LocalizedSearchScope *,std::shared_ptr<mlcore::EntityQueryResult>>,std::equal_to<mlcore::LocalizedSearchScope *>,std::hash<mlcore::LocalizedSearchScope *>,true>,std::allocator<std::__hash_value_type<mlcore::LocalizedSearchScope *,std::shared_ptr<mlcore::EntityQueryResult>>>>::~__hash_table(v27 - 256);
  JUMPOUT(0x20A81207CLL);
}

void sub_20A811A68(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  va_list va;

  va_start(va, a16);
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x450]);
  JUMPOUT(0x20A811A7CLL);
}

void sub_20A811AA0()
{
  uint64_t v0;

  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100](v0 - 256);
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x360]);
  JUMPOUT(0x20A812084);
}

void sub_20A811AC0()
{
  JUMPOUT(0x20A812084);
}

void sub_20A811AC8()
{
  JUMPOUT(0x20A8120CCLL);
}

void sub_20A811AD0()
{
  uint64_t v0;

  if (*(char *)(v0 - 233) < 0)
    operator delete(*(void **)(v0 - 256));
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x260]);
  JUMPOUT(0x20A8120D4);
}

void sub_20A811AF0()
{
  std::__shared_weak_count *v0;
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(v0);
  operator delete(v1);
  JUMPOUT(0x20A812130);
}

void sub_20A811B04()
{
  JUMPOUT(0x20A812130);
}

void sub_20A811B0C()
{
  JUMPOUT(0x20A812140);
}

void sub_20A811B98()
{
  std::__shared_weak_count *v0;
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(v0);
  operator delete(v1);
  JUMPOUT(0x20A811FCCLL);
}

void sub_20A811BAC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47)
{
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)&a47);
  JUMPOUT(0x20A811F18);
}

void sub_20A811F24()
{
  JUMPOUT(0x20A81200CLL);
}

void sub_20A811F34()
{
  uint64_t v0;

  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x360]);
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100](v0 - 256);
  JUMPOUT(0x20A8120F4);
}

void sub_20A811F44()
{
  JUMPOUT(0x20A812000);
}

void sub_20A811F50()
{
  uint64_t v0;

  if (*(char *)(v0 - 233) < 0)
    operator delete(*(void **)(v0 - 256));
  JUMPOUT(0x20A811FA8);
}

void sub_20A811F6C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47)
{
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)&a47);
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x350]);
  JUMPOUT(0x20A811FB4);
}

void sub_20A811F8C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a69;
  void *v69;

  if (v69)
    operator delete(v69);
  if (STACK[0x450])
    operator delete((void *)STACK[0x450]);
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)&a69);
  JUMPOUT(0x20A81207CLL);
}

void sub_20A8120E0()
{
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x360]);
  JUMPOUT(0x20A8120ECLL);
}

uint64_t std::__hash_table<std::__hash_value_type<long long,mediaplatform::SearchMatcher::ReasonResult>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,mediaplatform::SearchMatcher::ReasonResult>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,mediaplatform::SearchMatcher::ReasonResult>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,mediaplatform::SearchMatcher::ReasonResult>>>::~__hash_table(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  v2 = *(_QWORD **)(a1 + 16);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      std::__hash_table<mlcore::ModelPropertyBase *,std::hash<mlcore::ModelPropertyBase *>,std::equal_to<mlcore::ModelPropertyBase *>,std::allocator<mlcore::ModelPropertyBase *>>::~__hash_table((uint64_t)(v2 + 4));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v4)
    operator delete(v4);
  return a1;
}

void std::allocate_shared[abi:ne180100]<mediaplatform::SQLColumnNameExpression,std::allocator<mediaplatform::SQLColumnNameExpression>,char const(&)[7],void>(_QWORD *a1)
{
  _QWORD *v2;
  void *__p[2];
  char v4;
  void *v5[2];
  char v6;
  void *v7[2];
  char v8;
  __int128 v9;
  char v10;

  v2 = operator new(0x88uLL);
  v2[1] = 0;
  v2[2] = 0;
  *v2 = &off_24C33C130;
  std::string::basic_string[abi:ne180100]<0>(&v9, "weight");
  std::string::basic_string[abi:ne180100]<0>(v7, "");
  std::string::basic_string[abi:ne180100]<0>(v5, "");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  mediaplatform::SQLColumnNameExpression::SQLColumnNameExpression((uint64_t)(v2 + 3), &v9, (__int128 *)v7, (__int128 *)v5, (__int128 *)__p);
  if (v4 < 0)
    operator delete(__p[0]);
  if (v6 < 0)
    operator delete(v5[0]);
  if (v8 < 0)
    operator delete(v7[0]);
  if (v10 < 0)
    operator delete((void *)v9);
  *a1 = v2 + 3;
  a1[1] = v2;
}

void sub_20A81229C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  std::__shared_weak_count *v26;
  uint64_t v27;
  void *v29;

  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  if (a26 < 0)
    operator delete(a21);
  if (*(char *)(v27 - 33) < 0)
    operator delete(*(void **)(v27 - 56));
  std::__shared_weak_count::~__shared_weak_count(v26);
  operator delete(v29);
  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<std::__hash_value_type<std::shared_ptr<mlcore::LocalizedSearchScope>,std::shared_ptr<std::vector<mlcore::EntityClass *>>>,std::__unordered_map_hasher<std::shared_ptr<mlcore::LocalizedSearchScope>,std::__hash_value_type<std::shared_ptr<mlcore::LocalizedSearchScope>,std::shared_ptr<std::vector<mlcore::EntityClass *>>>,std::hash<std::shared_ptr<mlcore::LocalizedSearchScope>>,std::equal_to<std::shared_ptr<mlcore::LocalizedSearchScope>>,true>,std::__unordered_map_equal<std::shared_ptr<mlcore::LocalizedSearchScope>,std::__hash_value_type<std::shared_ptr<mlcore::LocalizedSearchScope>,std::shared_ptr<std::vector<mlcore::EntityClass *>>>,std::equal_to<std::shared_ptr<mlcore::LocalizedSearchScope>>,std::hash<std::shared_ptr<mlcore::LocalizedSearchScope>>,true>,std::allocator<std::__hash_value_type<std::shared_ptr<mlcore::LocalizedSearchScope>,std::shared_ptr<std::vector<mlcore::EntityClass *>>>>>::__emplace_unique_key_args<std::shared_ptr<mlcore::LocalizedSearchScope>,std::piecewise_construct_t const&,std::tuple<std::shared_ptr<mlcore::LocalizedSearchScope> const&>,std::tuple<>>(uint64_t *a1, uint64_t a2, _QWORD **a3)
{
  unint64_t v3;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  uint8x8_t v14;
  unint64_t v15;
  _QWORD **v16;
  _QWORD *i;
  unint64_t v18;
  uint64_t *v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  BOOL v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  _QWORD *v34;
  uint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  float v38;
  float v39;
  _BOOL8 v40;
  unint64_t v41;
  unint64_t v42;
  int8x8_t prime;
  void *v44;
  void *v45;
  uint64_t v46;
  _QWORD *v47;
  unint64_t v48;
  uint8x8_t v49;
  unint64_t v50;
  uint8x8_t v51;
  uint64_t v52;
  _QWORD *v53;
  unint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  unint64_t v57;
  void *v59;
  _QWORD v60[2];
  uint64_t *v61;
  std::__shared_weak_count *v62;

  v7 = *(std::__shared_weak_count **)(a2 + 8);
  v61 = *(uint64_t **)a2;
  v62 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  v10 = std::hash<std::shared_ptr<mlcore::LocalizedSearchScope>>::operator()(&v61);
  if (v7)
  {
    v11 = (unint64_t *)&v7->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  v13 = a1[1];
  if (v13)
  {
    v14 = (uint8x8_t)vcnt_s8((int8x8_t)v13);
    v14.i16[0] = vaddlv_u8(v14);
    v15 = v14.u32[0];
    if (v14.u32[0] > 1uLL)
    {
      v3 = v10;
      if (v10 >= v13)
        v3 = v10 % v13;
    }
    else
    {
      v3 = (v13 - 1) & v10;
    }
    v16 = *(_QWORD ***)(*a1 + 8 * v3);
    if (v16)
    {
      for (i = *v16; i; i = (_QWORD *)*i)
      {
        v18 = i[1];
        if (v18 == v10)
        {
          v19 = (uint64_t *)i[2];
          v20 = (std::__shared_weak_count *)i[3];
          v61 = v19;
          v62 = v20;
          if (v20)
          {
            v21 = (unint64_t *)&v20->__shared_owners_;
            do
              v22 = __ldxr(v21);
            while (__stxr(v22 + 1, v21));
          }
          v23 = *(std::__shared_weak_count **)(a2 + 8);
          v60[0] = *(_QWORD *)a2;
          v60[1] = v23;
          if (v23)
          {
            v24 = (unint64_t *)&v23->__shared_owners_;
            do
              v25 = __ldxr(v24);
            while (__stxr(v25 + 1, v24));
          }
          v26 = std::equal_to<std::shared_ptr<mlcore::LocalizedSearchScope>>::operator()(v19, v60);
          if (v23)
          {
            v27 = (unint64_t *)&v23->__shared_owners_;
            do
              v28 = __ldaxr(v27);
            while (__stlxr(v28 - 1, v27));
            if (!v28)
            {
              ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
              std::__shared_weak_count::__release_weak(v23);
            }
          }
          v29 = v62;
          if (v62)
          {
            v30 = (unint64_t *)&v62->__shared_owners_;
            do
              v31 = __ldaxr(v30);
            while (__stlxr(v31 - 1, v30));
            if (!v31)
            {
              ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
              std::__shared_weak_count::__release_weak(v29);
            }
          }
          if (v26)
            return i;
        }
        else
        {
          if (v15 > 1)
          {
            if (v18 >= v13)
              v18 %= v13;
          }
          else
          {
            v18 &= v13 - 1;
          }
          if (v18 != v3)
            break;
        }
      }
    }
  }
  v32 = a1 + 2;
  v33 = operator new(0x30uLL);
  i = v33;
  *v33 = 0;
  v33[1] = v10;
  v34 = *a3;
  v33[2] = **a3;
  v35 = v34[1];
  v33[3] = v35;
  if (v35)
  {
    v36 = (unint64_t *)(v35 + 8);
    do
      v37 = __ldxr(v36);
    while (__stxr(v37 + 1, v36));
  }
  v33[4] = 0;
  v33[5] = 0;
  v38 = (float)(unint64_t)(a1[3] + 1);
  v39 = *((float *)a1 + 8);
  if (!v13 || (float)(v39 * (float)v13) < v38)
  {
    v40 = 1;
    if (v13 >= 3)
      v40 = (v13 & (v13 - 1)) != 0;
    v41 = v40 | (2 * v13);
    v42 = vcvtps_u32_f32(v38 / v39);
    if (v41 <= v42)
      prime = (int8x8_t)v42;
    else
      prime = (int8x8_t)v41;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
    }
    v13 = a1[1];
    if (*(_QWORD *)&prime > v13)
      goto LABEL_57;
    if (*(_QWORD *)&prime < v13)
    {
      v50 = vcvtps_u32_f32((float)(unint64_t)a1[3] / *((float *)a1 + 8));
      if (v13 < 3 || (v51 = (uint8x8_t)vcnt_s8((int8x8_t)v13), v51.i16[0] = vaddlv_u8(v51), v51.u32[0] > 1uLL))
      {
        v50 = std::__next_prime(v50);
      }
      else
      {
        v52 = 1 << -(char)__clz(v50 - 1);
        if (v50 >= 2)
          v50 = v52;
      }
      if (*(_QWORD *)&prime <= v50)
        prime = (int8x8_t)v50;
      if (*(_QWORD *)&prime >= v13)
      {
        v13 = a1[1];
      }
      else
      {
        if (prime)
        {
LABEL_57:
          if (*(_QWORD *)&prime >> 61)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v44 = operator new(8 * *(_QWORD *)&prime);
          v45 = (void *)*a1;
          *a1 = (uint64_t)v44;
          if (v45)
            operator delete(v45);
          v46 = 0;
          a1[1] = (uint64_t)prime;
          do
            *(_QWORD *)(*a1 + 8 * v46++) = 0;
          while (*(_QWORD *)&prime != v46);
          v47 = (_QWORD *)*v32;
          if (*v32)
          {
            v48 = v47[1];
            v49 = (uint8x8_t)vcnt_s8(prime);
            v49.i16[0] = vaddlv_u8(v49);
            if (v49.u32[0] > 1uLL)
            {
              if (v48 >= *(_QWORD *)&prime)
                v48 %= *(_QWORD *)&prime;
            }
            else
            {
              v48 &= *(_QWORD *)&prime - 1;
            }
            *(_QWORD *)(*a1 + 8 * v48) = v32;
            v53 = (_QWORD *)*v47;
            if (*v47)
            {
              do
              {
                v54 = v53[1];
                if (v49.u32[0] > 1uLL)
                {
                  if (v54 >= *(_QWORD *)&prime)
                    v54 %= *(_QWORD *)&prime;
                }
                else
                {
                  v54 &= *(_QWORD *)&prime - 1;
                }
                if (v54 != v48)
                {
                  if (!*(_QWORD *)(*a1 + 8 * v54))
                  {
                    *(_QWORD *)(*a1 + 8 * v54) = v47;
                    goto LABEL_82;
                  }
                  *v47 = *v53;
                  *v53 = **(_QWORD **)(*a1 + 8 * v54);
                  **(_QWORD **)(*a1 + 8 * v54) = v53;
                  v53 = v47;
                }
                v54 = v48;
LABEL_82:
                v47 = v53;
                v53 = (_QWORD *)*v53;
                v48 = v54;
              }
              while (v53);
            }
          }
          v13 = (unint64_t)prime;
          goto LABEL_86;
        }
        v59 = (void *)*a1;
        *a1 = 0;
        if (v59)
          operator delete(v59);
        v13 = 0;
        a1[1] = 0;
      }
    }
LABEL_86:
    if ((v13 & (v13 - 1)) != 0)
    {
      if (v10 >= v13)
        v3 = v10 % v13;
      else
        v3 = v10;
    }
    else
    {
      v3 = (v13 - 1) & v10;
    }
  }
  v55 = *a1;
  v56 = *(_QWORD **)(*a1 + 8 * v3);
  if (v56)
  {
    *i = *v56;
LABEL_99:
    *v56 = i;
    goto LABEL_100;
  }
  *i = *v32;
  *v32 = i;
  *(_QWORD *)(v55 + 8 * v3) = v32;
  if (*i)
  {
    v57 = *(_QWORD *)(*i + 8);
    if ((v13 & (v13 - 1)) != 0)
    {
      if (v57 >= v13)
        v57 %= v13;
    }
    else
    {
      v57 &= v13 - 1;
    }
    v56 = (_QWORD *)(*a1 + 8 * v57);
    goto LABEL_99;
  }
LABEL_100:
  ++a1[3];
  return i;
}

void sub_20A81283C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13)
{
  void *v13;

  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::shared_ptr<mlcore::LocalizedSearchScope>,std::shared_ptr<std::vector<mlcore::PropertyCache>>>,void *>>>::operator()[abi:ne180100](1, v13);
  _Unwind_Resume(a1);
}

uint64_t **std::__hash_table<std::__hash_value_type<std::shared_ptr<mlcore::LocalizedSearchScope>,long long>,std::__unordered_map_hasher<std::shared_ptr<mlcore::LocalizedSearchScope>,std::__hash_value_type<std::shared_ptr<mlcore::LocalizedSearchScope>,long long>,std::hash<std::shared_ptr<mlcore::LocalizedSearchScope>>,std::equal_to<std::shared_ptr<mlcore::LocalizedSearchScope>>,true>,std::__unordered_map_equal<std::shared_ptr<mlcore::LocalizedSearchScope>,std::__hash_value_type<std::shared_ptr<mlcore::LocalizedSearchScope>,long long>,std::equal_to<std::shared_ptr<mlcore::LocalizedSearchScope>>,std::hash<std::shared_ptr<mlcore::LocalizedSearchScope>>,true>,std::allocator<std::__hash_value_type<std::shared_ptr<mlcore::LocalizedSearchScope>,long long>>>::find<std::shared_ptr<mlcore::LocalizedSearchScope>>(_QWORD *a1, uint64_t **a2)
{
  unint64_t v4;
  int8x8_t v5;
  unint64_t v6;
  uint8x8_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t ***v10;
  uint64_t **i;
  unint64_t v12;

  v4 = std::__unordered_map_hasher<std::shared_ptr<mlcore::LocalizedSearchScope>,std::__hash_value_type<std::shared_ptr<mlcore::LocalizedSearchScope>,long long>,std::hash<std::shared_ptr<mlcore::LocalizedSearchScope>>,std::equal_to<std::shared_ptr<mlcore::LocalizedSearchScope>>,true>::operator()[abi:ne180100](*a2, a2[1]);
  v5 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v5)
    return 0;
  v6 = v4;
  v7 = (uint8x8_t)vcnt_s8(v5);
  v7.i16[0] = vaddlv_u8(v7);
  v8 = v7.u32[0];
  if (v7.u32[0] > 1uLL)
  {
    v9 = v4;
    if (v4 >= *(_QWORD *)&v5)
      v9 = v4 % *(_QWORD *)&v5;
  }
  else
  {
    v9 = (*(_QWORD *)&v5 - 1) & v4;
  }
  v10 = *(uint64_t ****)(*a1 + 8 * v9);
  if (!v10)
    return 0;
  for (i = *v10; i; i = (uint64_t **)*i)
  {
    v12 = (unint64_t)i[1];
    if (v6 == v12)
    {
      if (std::__unordered_map_equal<std::shared_ptr<mlcore::LocalizedSearchScope>,std::__hash_value_type<std::shared_ptr<mlcore::LocalizedSearchScope>,long long>,std::equal_to<std::shared_ptr<mlcore::LocalizedSearchScope>>,std::hash<std::shared_ptr<mlcore::LocalizedSearchScope>>,true>::operator()[abi:ne180100](i[2], (std::__shared_weak_count *)i[3], a2))
      {
        return i;
      }
    }
    else
    {
      if (v8 > 1)
      {
        if (v12 >= *(_QWORD *)&v5)
          v12 %= *(_QWORD *)&v5;
      }
      else
      {
        v12 &= *(_QWORD *)&v5 - 1;
      }
      if (v12 != v9)
        return 0;
    }
  }
  return i;
}

void std::vector<std::shared_ptr<mlcore::LocalizedSearchScope>>::push_back[abi:ne180100](char **a1, __int128 *a2)
{
  char *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  __int128 v17;
  unint64_t *v18;
  unint64_t v19;
  char *v20;
  char *v21;
  char *v22;
  __int128 v23;
  int64x2_t v24;
  uint64_t v25;
  void *v26;

  v4 = a1[1];
  v5 = (unint64_t)a1[2];
  if ((unint64_t)v4 >= v5)
  {
    v10 = (v4 - *a1) >> 4;
    v11 = v10 + 1;
    if ((unint64_t)(v10 + 1) >> 60)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v12 = v5 - (_QWORD)*a1;
    if (v12 >> 3 > v11)
      v11 = v12 >> 3;
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF0)
      v13 = 0xFFFFFFFFFFFFFFFLL;
    else
      v13 = v11;
    v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<mediaplatform::DatabaseParameterBase>>>(v13);
    v16 = &v14[16 * v10];
    v17 = *a2;
    *(_OWORD *)v16 = *a2;
    if (*((_QWORD *)&v17 + 1))
    {
      v18 = (unint64_t *)(*((_QWORD *)&v17 + 1) + 8);
      do
        v19 = __ldxr(v18);
      while (__stxr(v19 + 1, v18));
    }
    v21 = *a1;
    v20 = a1[1];
    if (v20 == *a1)
    {
      v24 = vdupq_n_s64((unint64_t)v20);
      v22 = &v14[16 * v10];
    }
    else
    {
      v22 = &v14[16 * v10];
      do
      {
        v23 = *((_OWORD *)v20 - 1);
        v20 -= 16;
        *((_OWORD *)v22 - 1) = v23;
        v22 -= 16;
        *(_QWORD *)v20 = 0;
        *((_QWORD *)v20 + 1) = 0;
      }
      while (v20 != v21);
      v24 = *(int64x2_t *)a1;
    }
    v9 = v16 + 16;
    *a1 = v22;
    a1[1] = v16 + 16;
    a1[2] = &v14[16 * v15];
    v25 = v24.i64[1];
    v26 = (void *)v24.i64[0];
    while ((void *)v25 != v26)
      v25 = std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100](v25 - 16);
    if (v26)
      operator delete(v26);
  }
  else
  {
    v6 = *((_QWORD *)a2 + 1);
    *(_QWORD *)v4 = *(_QWORD *)a2;
    *((_QWORD *)v4 + 1) = v6;
    if (v6)
    {
      v7 = (unint64_t *)(v6 + 8);
      do
        v8 = __ldxr(v7);
      while (__stxr(v8 + 1, v7));
    }
    v9 = v4 + 16;
  }
  a1[1] = v9;
}

uint64_t *std::__hash_table<std::__hash_value_type<std::shared_ptr<mlcore::LocalizedSearchScope>,long long>,std::__unordered_map_hasher<std::shared_ptr<mlcore::LocalizedSearchScope>,std::__hash_value_type<std::shared_ptr<mlcore::LocalizedSearchScope>,long long>,std::hash<std::shared_ptr<mlcore::LocalizedSearchScope>>,std::equal_to<std::shared_ptr<mlcore::LocalizedSearchScope>>,true>,std::__unordered_map_equal<std::shared_ptr<mlcore::LocalizedSearchScope>,std::__hash_value_type<std::shared_ptr<mlcore::LocalizedSearchScope>,long long>,std::equal_to<std::shared_ptr<mlcore::LocalizedSearchScope>>,std::hash<std::shared_ptr<mlcore::LocalizedSearchScope>>,true>,std::allocator<std::__hash_value_type<std::shared_ptr<mlcore::LocalizedSearchScope>,long long>>>::__emplace_unique_key_args<std::shared_ptr<mlcore::LocalizedSearchScope>,std::piecewise_construct_t const&,std::tuple<std::shared_ptr<mlcore::LocalizedSearchScope> const&>,std::tuple<>>(uint64_t a1, uint64_t **a2, _QWORD **a3)
{
  unint64_t v3;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  unint64_t v11;
  uint64_t **v12;
  uint64_t *i;
  unint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  float v21;
  float v22;
  _BOOL8 v23;
  unint64_t v24;
  unint64_t v25;
  int8x8_t prime;
  void *v27;
  void *v28;
  uint64_t v29;
  _QWORD *v30;
  unint64_t v31;
  uint8x8_t v32;
  unint64_t v33;
  uint8x8_t v34;
  uint64_t v35;
  _QWORD *v36;
  unint64_t v37;
  _QWORD *v38;
  unint64_t v39;
  void *v41;
  _QWORD v42[2];
  char v43;

  v7 = std::__unordered_map_hasher<std::shared_ptr<mlcore::LocalizedSearchScope>,std::__hash_value_type<std::shared_ptr<mlcore::LocalizedSearchScope>,long long>,std::hash<std::shared_ptr<mlcore::LocalizedSearchScope>>,std::equal_to<std::shared_ptr<mlcore::LocalizedSearchScope>>,true>::operator()[abi:ne180100](*a2, a2[1]);
  v8 = v7;
  v9 = *(_QWORD *)(a1 + 8);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    v11 = v10.u32[0];
    if (v10.u32[0] > 1uLL)
    {
      v3 = v7;
      if (v7 >= v9)
        v3 = v7 % v9;
    }
    else
    {
      v3 = (v9 - 1) & v7;
    }
    v12 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v3);
    if (v12)
    {
      for (i = *v12; i; i = (uint64_t *)*i)
      {
        v14 = i[1];
        if (v14 == v8)
        {
          if (std::__unordered_map_equal<std::shared_ptr<mlcore::LocalizedSearchScope>,std::__hash_value_type<std::shared_ptr<mlcore::LocalizedSearchScope>,long long>,std::equal_to<std::shared_ptr<mlcore::LocalizedSearchScope>>,std::hash<std::shared_ptr<mlcore::LocalizedSearchScope>>,true>::operator()[abi:ne180100]((_QWORD *)i[2], (std::__shared_weak_count *)i[3], a2))
          {
            return i;
          }
        }
        else
        {
          if (v11 > 1)
          {
            if (v14 >= v9)
              v14 %= v9;
          }
          else
          {
            v14 &= v9 - 1;
          }
          if (v14 != v3)
            break;
        }
      }
    }
  }
  v15 = (_QWORD *)(a1 + 16);
  v16 = operator new(0x28uLL);
  v42[0] = v16;
  v42[1] = a1 + 16;
  *v16 = 0;
  v16[1] = v8;
  v17 = *a3;
  v16[2] = **a3;
  v18 = v17[1];
  v16[3] = v18;
  if (v18)
  {
    v19 = (unint64_t *)(v18 + 8);
    do
      v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
  }
  v16[4] = 0;
  v43 = 1;
  v21 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v22 = *(float *)(a1 + 32);
  if (!v9 || (float)(v22 * (float)v9) < v21)
  {
    v23 = 1;
    if (v9 >= 3)
      v23 = (v9 & (v9 - 1)) != 0;
    v24 = v23 | (2 * v9);
    v25 = vcvtps_u32_f32(v21 / v22);
    if (v24 <= v25)
      prime = (int8x8_t)v25;
    else
      prime = (int8x8_t)v24;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
    }
    v9 = *(_QWORD *)(a1 + 8);
    if (*(_QWORD *)&prime > v9)
      goto LABEL_33;
    if (*(_QWORD *)&prime < v9)
    {
      v33 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v9 < 3 || (v34 = (uint8x8_t)vcnt_s8((int8x8_t)v9), v34.i16[0] = vaddlv_u8(v34), v34.u32[0] > 1uLL))
      {
        v33 = std::__next_prime(v33);
      }
      else
      {
        v35 = 1 << -(char)__clz(v33 - 1);
        if (v33 >= 2)
          v33 = v35;
      }
      if (*(_QWORD *)&prime <= v33)
        prime = (int8x8_t)v33;
      if (*(_QWORD *)&prime >= v9)
      {
        v9 = *(_QWORD *)(a1 + 8);
      }
      else
      {
        if (prime)
        {
LABEL_33:
          if (*(_QWORD *)&prime >> 61)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v27 = operator new(8 * *(_QWORD *)&prime);
          v28 = *(void **)a1;
          *(_QWORD *)a1 = v27;
          if (v28)
            operator delete(v28);
          v29 = 0;
          *(int8x8_t *)(a1 + 8) = prime;
          do
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v29++) = 0;
          while (*(_QWORD *)&prime != v29);
          v30 = (_QWORD *)*v15;
          if (*v15)
          {
            v31 = v30[1];
            v32 = (uint8x8_t)vcnt_s8(prime);
            v32.i16[0] = vaddlv_u8(v32);
            if (v32.u32[0] > 1uLL)
            {
              if (v31 >= *(_QWORD *)&prime)
                v31 %= *(_QWORD *)&prime;
            }
            else
            {
              v31 &= *(_QWORD *)&prime - 1;
            }
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v31) = v15;
            v36 = (_QWORD *)*v30;
            if (*v30)
            {
              do
              {
                v37 = v36[1];
                if (v32.u32[0] > 1uLL)
                {
                  if (v37 >= *(_QWORD *)&prime)
                    v37 %= *(_QWORD *)&prime;
                }
                else
                {
                  v37 &= *(_QWORD *)&prime - 1;
                }
                if (v37 != v31)
                {
                  if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v37))
                  {
                    *(_QWORD *)(*(_QWORD *)a1 + 8 * v37) = v30;
                    goto LABEL_58;
                  }
                  *v30 = *v36;
                  *v36 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v37);
                  **(_QWORD **)(*(_QWORD *)a1 + 8 * v37) = v36;
                  v36 = v30;
                }
                v37 = v31;
LABEL_58:
                v30 = v36;
                v36 = (_QWORD *)*v36;
                v31 = v37;
              }
              while (v36);
            }
          }
          v9 = (unint64_t)prime;
          goto LABEL_62;
        }
        v41 = *(void **)a1;
        *(_QWORD *)a1 = 0;
        if (v41)
          operator delete(v41);
        v9 = 0;
        *(_QWORD *)(a1 + 8) = 0;
      }
    }
LABEL_62:
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9)
        v3 = v8 % v9;
      else
        v3 = v8;
    }
    else
    {
      v3 = (v9 - 1) & v8;
    }
  }
  v38 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  i = (uint64_t *)v42[0];
  if (v38)
  {
    *(_QWORD *)v42[0] = *v38;
LABEL_75:
    *v38 = i;
    goto LABEL_76;
  }
  *(_QWORD *)v42[0] = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = i;
  *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = v15;
  if (*i)
  {
    v39 = *(_QWORD *)(*i + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v39 >= v9)
        v39 %= v9;
    }
    else
    {
      v39 &= v9 - 1;
    }
    v38 = (_QWORD *)(*(_QWORD *)a1 + 8 * v39);
    goto LABEL_75;
  }
LABEL_76:
  v42[0] = 0;
  ++*(_QWORD *)(a1 + 24);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::shared_ptr<mlcore::LocalizedSearchScope>,long long>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::shared_ptr<mlcore::LocalizedSearchScope>,long long>,void *>>>>::reset[abi:ne180100]((uint64_t)v42);
  return i;
}

void sub_20A812EDC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::shared_ptr<mlcore::LocalizedSearchScope>,long long>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::shared_ptr<mlcore::LocalizedSearchScope>,long long>,void *>>>>::reset[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<std::__hash_value_type<std::shared_ptr<mlcore::LocalizedSearchScope>,std::shared_ptr<std::vector<mlcore::PropertyCache>>>,std::__unordered_map_hasher<std::shared_ptr<mlcore::LocalizedSearchScope>,std::__hash_value_type<std::shared_ptr<mlcore::LocalizedSearchScope>,std::shared_ptr<std::vector<mlcore::PropertyCache>>>,std::hash<std::shared_ptr<mlcore::LocalizedSearchScope>>,std::equal_to<std::shared_ptr<mlcore::LocalizedSearchScope>>,true>,std::__unordered_map_equal<std::shared_ptr<mlcore::LocalizedSearchScope>,std::__hash_value_type<std::shared_ptr<mlcore::LocalizedSearchScope>,std::shared_ptr<std::vector<mlcore::PropertyCache>>>,std::equal_to<std::shared_ptr<mlcore::LocalizedSearchScope>>,std::hash<std::shared_ptr<mlcore::LocalizedSearchScope>>,true>,std::allocator<std::__hash_value_type<std::shared_ptr<mlcore::LocalizedSearchScope>,std::shared_ptr<std::vector<mlcore::PropertyCache>>>>>::__emplace_unique_key_args<std::shared_ptr<mlcore::LocalizedSearchScope>,std::piecewise_construct_t const&,std::tuple<std::shared_ptr<mlcore::LocalizedSearchScope> const&>,std::tuple<>>(uint64_t *a1, uint64_t a2, _QWORD **a3)
{
  unint64_t v3;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  uint8x8_t v14;
  unint64_t v15;
  _QWORD **v16;
  _QWORD *i;
  unint64_t v18;
  uint64_t *v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  BOOL v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  _QWORD *v34;
  uint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  float v38;
  float v39;
  _BOOL8 v40;
  unint64_t v41;
  unint64_t v42;
  int8x8_t prime;
  void *v44;
  void *v45;
  uint64_t v46;
  _QWORD *v47;
  unint64_t v48;
  uint8x8_t v49;
  unint64_t v50;
  uint8x8_t v51;
  uint64_t v52;
  _QWORD *v53;
  unint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  unint64_t v57;
  void *v59;
  _QWORD v60[2];
  uint64_t *v61;
  std::__shared_weak_count *v62;

  v7 = *(std::__shared_weak_count **)(a2 + 8);
  v61 = *(uint64_t **)a2;
  v62 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  v10 = std::hash<std::shared_ptr<mlcore::LocalizedSearchScope>>::operator()(&v61);
  if (v7)
  {
    v11 = (unint64_t *)&v7->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  v13 = a1[1];
  if (v13)
  {
    v14 = (uint8x8_t)vcnt_s8((int8x8_t)v13);
    v14.i16[0] = vaddlv_u8(v14);
    v15 = v14.u32[0];
    if (v14.u32[0] > 1uLL)
    {
      v3 = v10;
      if (v10 >= v13)
        v3 = v10 % v13;
    }
    else
    {
      v3 = (v13 - 1) & v10;
    }
    v16 = *(_QWORD ***)(*a1 + 8 * v3);
    if (v16)
    {
      for (i = *v16; i; i = (_QWORD *)*i)
      {
        v18 = i[1];
        if (v18 == v10)
        {
          v19 = (uint64_t *)i[2];
          v20 = (std::__shared_weak_count *)i[3];
          v61 = v19;
          v62 = v20;
          if (v20)
          {
            v21 = (unint64_t *)&v20->__shared_owners_;
            do
              v22 = __ldxr(v21);
            while (__stxr(v22 + 1, v21));
          }
          v23 = *(std::__shared_weak_count **)(a2 + 8);
          v60[0] = *(_QWORD *)a2;
          v60[1] = v23;
          if (v23)
          {
            v24 = (unint64_t *)&v23->__shared_owners_;
            do
              v25 = __ldxr(v24);
            while (__stxr(v25 + 1, v24));
          }
          v26 = std::equal_to<std::shared_ptr<mlcore::LocalizedSearchScope>>::operator()(v19, v60);
          if (v23)
          {
            v27 = (unint64_t *)&v23->__shared_owners_;
            do
              v28 = __ldaxr(v27);
            while (__stlxr(v28 - 1, v27));
            if (!v28)
            {
              ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
              std::__shared_weak_count::__release_weak(v23);
            }
          }
          v29 = v62;
          if (v62)
          {
            v30 = (unint64_t *)&v62->__shared_owners_;
            do
              v31 = __ldaxr(v30);
            while (__stlxr(v31 - 1, v30));
            if (!v31)
            {
              ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
              std::__shared_weak_count::__release_weak(v29);
            }
          }
          if (v26)
            return i;
        }
        else
        {
          if (v15 > 1)
          {
            if (v18 >= v13)
              v18 %= v13;
          }
          else
          {
            v18 &= v13 - 1;
          }
          if (v18 != v3)
            break;
        }
      }
    }
  }
  v32 = a1 + 2;
  v33 = operator new(0x30uLL);
  i = v33;
  *v33 = 0;
  v33[1] = v10;
  v34 = *a3;
  v33[2] = **a3;
  v35 = v34[1];
  v33[3] = v35;
  if (v35)
  {
    v36 = (unint64_t *)(v35 + 8);
    do
      v37 = __ldxr(v36);
    while (__stxr(v37 + 1, v36));
  }
  v33[4] = 0;
  v33[5] = 0;
  v38 = (float)(unint64_t)(a1[3] + 1);
  v39 = *((float *)a1 + 8);
  if (!v13 || (float)(v39 * (float)v13) < v38)
  {
    v40 = 1;
    if (v13 >= 3)
      v40 = (v13 & (v13 - 1)) != 0;
    v41 = v40 | (2 * v13);
    v42 = vcvtps_u32_f32(v38 / v39);
    if (v41 <= v42)
      prime = (int8x8_t)v42;
    else
      prime = (int8x8_t)v41;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
    }
    v13 = a1[1];
    if (*(_QWORD *)&prime > v13)
      goto LABEL_57;
    if (*(_QWORD *)&prime < v13)
    {
      v50 = vcvtps_u32_f32((float)(unint64_t)a1[3] / *((float *)a1 + 8));
      if (v13 < 3 || (v51 = (uint8x8_t)vcnt_s8((int8x8_t)v13), v51.i16[0] = vaddlv_u8(v51), v51.u32[0] > 1uLL))
      {
        v50 = std::__next_prime(v50);
      }
      else
      {
        v52 = 1 << -(char)__clz(v50 - 1);
        if (v50 >= 2)
          v50 = v52;
      }
      if (*(_QWORD *)&prime <= v50)
        prime = (int8x8_t)v50;
      if (*(_QWORD *)&prime >= v13)
      {
        v13 = a1[1];
      }
      else
      {
        if (prime)
        {
LABEL_57:
          if (*(_QWORD *)&prime >> 61)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v44 = operator new(8 * *(_QWORD *)&prime);
          v45 = (void *)*a1;
          *a1 = (uint64_t)v44;
          if (v45)
            operator delete(v45);
          v46 = 0;
          a1[1] = (uint64_t)prime;
          do
            *(_QWORD *)(*a1 + 8 * v46++) = 0;
          while (*(_QWORD *)&prime != v46);
          v47 = (_QWORD *)*v32;
          if (*v32)
          {
            v48 = v47[1];
            v49 = (uint8x8_t)vcnt_s8(prime);
            v49.i16[0] = vaddlv_u8(v49);
            if (v49.u32[0] > 1uLL)
            {
              if (v48 >= *(_QWORD *)&prime)
                v48 %= *(_QWORD *)&prime;
            }
            else
            {
              v48 &= *(_QWORD *)&prime - 1;
            }
            *(_QWORD *)(*a1 + 8 * v48) = v32;
            v53 = (_QWORD *)*v47;
            if (*v47)
            {
              do
              {
                v54 = v53[1];
                if (v49.u32[0] > 1uLL)
                {
                  if (v54 >= *(_QWORD *)&prime)
                    v54 %= *(_QWORD *)&prime;
                }
                else
                {
                  v54 &= *(_QWORD *)&prime - 1;
                }
                if (v54 != v48)
                {
                  if (!*(_QWORD *)(*a1 + 8 * v54))
                  {
                    *(_QWORD *)(*a1 + 8 * v54) = v47;
                    goto LABEL_82;
                  }
                  *v47 = *v53;
                  *v53 = **(_QWORD **)(*a1 + 8 * v54);
                  **(_QWORD **)(*a1 + 8 * v54) = v53;
                  v53 = v47;
                }
                v54 = v48;
LABEL_82:
                v47 = v53;
                v53 = (_QWORD *)*v53;
                v48 = v54;
              }
              while (v53);
            }
          }
          v13 = (unint64_t)prime;
          goto LABEL_86;
        }
        v59 = (void *)*a1;
        *a1 = 0;
        if (v59)
          operator delete(v59);
        v13 = 0;
        a1[1] = 0;
      }
    }
LABEL_86:
    if ((v13 & (v13 - 1)) != 0)
    {
      if (v10 >= v13)
        v3 = v10 % v13;
      else
        v3 = v10;
    }
    else
    {
      v3 = (v13 - 1) & v10;
    }
  }
  v55 = *a1;
  v56 = *(_QWORD **)(*a1 + 8 * v3);
  if (v56)
  {
    *i = *v56;
LABEL_99:
    *v56 = i;
    goto LABEL_100;
  }
  *i = *v32;
  *v32 = i;
  *(_QWORD *)(v55 + 8 * v3) = v32;
  if (*i)
  {
    v57 = *(_QWORD *)(*i + 8);
    if ((v13 & (v13 - 1)) != 0)
    {
      if (v57 >= v13)
        v57 %= v13;
    }
    else
    {
      v57 &= v13 - 1;
    }
    v56 = (_QWORD *)(*a1 + 8 * v57);
    goto LABEL_99;
  }
LABEL_100:
  ++a1[3];
  return i;
}

void sub_20A813418(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13)
{
  void *v13;

  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::shared_ptr<mlcore::LocalizedSearchScope>,std::shared_ptr<std::vector<mlcore::PropertyCache>>>,void *>>>::operator()[abi:ne180100](1, v13);
  _Unwind_Resume(a1);
}

char *std::vector<std::pair<int,mlcore::ModelPropertyBase *>>::__assign_with_size[abi:ne180100]<std::pair<int,mlcore::ModelPropertyBase *> const*,std::pair<int,mlcore::ModelPropertyBase *> const*>(char **a1, __int128 *a2, __int128 *a3, unint64_t a4)
{
  __int128 *v6;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  char *result;
  char *v13;
  __int128 v14;
  int64_t v15;
  _QWORD *v16;
  unint64_t v17;
  __int128 *v18;
  char *v19;
  __int128 v20;
  char *v21;

  v6 = a2;
  v8 = (uint64_t)a1[2];
  v9 = *a1;
  if (a4 <= (v8 - (uint64_t)*a1) >> 4)
  {
    v16 = a1 + 1;
    result = a1[1];
    v17 = (result - v9) >> 4;
    if (v17 >= a4)
    {
      v21 = v9;
      while (v6 != a3)
      {
        *(_DWORD *)v21 = *(_DWORD *)v6;
        *((_QWORD *)v21 + 1) = *((_QWORD *)v6 + 1);
        v21 += 16;
        ++v6;
      }
      v15 = v21 - v9;
      result = v9;
    }
    else
    {
      v18 = &a2[v17];
      if (result != v9)
      {
        do
        {
          *(_DWORD *)v9 = *(_DWORD *)v6;
          *((_QWORD *)v9 + 1) = *((_QWORD *)v6++ + 1);
          v9 += 16;
        }
        while (v6 != v18);
      }
      v19 = result;
      while (v18 != a3)
      {
        v20 = *v18++;
        *(_OWORD *)v19 = v20;
        v19 += 16;
      }
      v15 = v19 - result;
    }
  }
  else
  {
    if (v9)
    {
      a1[1] = v9;
      operator delete(v9);
      v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    v10 = v8 >> 3;
    if (v8 >> 3 <= a4)
      v10 = a4;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0)
      v11 = 0xFFFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    if (v11 >> 60)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    result = (char *)operator new(16 * v11);
    *a1 = result;
    a1[1] = result;
    a1[2] = &result[16 * v11];
    v13 = result;
    if (v6 != a3)
    {
      v13 = result;
      do
      {
        v14 = *v6++;
        *(_OWORD *)v13 = v14;
        v13 += 16;
      }
      while (v6 != a3);
    }
    v15 = v13 - result;
    v16 = a1 + 1;
  }
  *v16 = &result[v15];
  return result;
}

void std::allocate_shared[abi:ne180100]<mediaplatform::SQLOrderingTerm,std::allocator<mediaplatform::SQLOrderingTerm>,std::shared_ptr<mediaplatform::SQLExpression>,mediaplatform::SQLOrderingTerm::OrderingType,void>(_QWORD *a1, __int128 *a2, unsigned int *a3)
{
  char *v6;
  __int128 v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t v11;

  v6 = (char *)operator new(0x38uLL);
  *(_OWORD *)(v6 + 8) = 0u;
  *(_QWORD *)v6 = &off_24C33BB80;
  *((_QWORD *)v6 + 3) = &off_24C330E30;
  v7 = *a2;
  *a2 = 0u;
  *((_QWORD *)v6 + 4) = *a3;
  *(_OWORD *)(v6 + 40) = v7;
  v8 = (std::__shared_weak_count *)*((_QWORD *)&v7 + 1);
  if (*((_QWORD *)&v7 + 1))
  {
    v9 = (unint64_t *)(*((_QWORD *)&v7 + 1) + 8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
    do
      v11 = __ldaxr(v9);
    while (__stlxr(v11 - 1, v9));
    if (!v11)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v7 + 1) + 16))(*((_QWORD *)&v7 + 1));
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  *a1 = v6 + 24;
  a1[1] = v6;
}

_QWORD *std::__hash_table<std::__hash_value_type<mlcore::LocalizedSearchScope *,std::shared_ptr<mlcore::EntityQueryResult>>,std::__unordered_map_hasher<mlcore::LocalizedSearchScope *,std::__hash_value_type<mlcore::LocalizedSearchScope *,std::shared_ptr<mlcore::EntityQueryResult>>,std::hash<mlcore::LocalizedSearchScope *>,std::equal_to<mlcore::LocalizedSearchScope *>,true>,std::__unordered_map_equal<mlcore::LocalizedSearchScope *,std::__hash_value_type<mlcore::LocalizedSearchScope *,std::shared_ptr<mlcore::EntityQueryResult>>,std::equal_to<mlcore::LocalizedSearchScope *>,std::hash<mlcore::LocalizedSearchScope *>,true>,std::allocator<std::__hash_value_type<mlcore::LocalizedSearchScope *,std::shared_ptr<mlcore::EntityQueryResult>>>>::__emplace_unique_key_args<mlcore::LocalizedSearchScope *,std::piecewise_construct_t const&,std::tuple<mlcore::LocalizedSearchScope *&&>,std::tuple<>>(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  _QWORD **v11;
  _QWORD *i;
  unint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  float v16;
  float v17;
  _BOOL8 v18;
  unint64_t v19;
  unint64_t v20;
  size_t v21;
  uint64_t v22;
  _QWORD *v23;
  unint64_t v24;
  _QWORD v26[2];
  char v27;

  v6 = 0x9DDFEA08EB382D69 * (((8 * a2) + 8) ^ HIDWORD(a2));
  v7 = 0x9DDFEA08EB382D69 * (HIDWORD(a2) ^ (v6 >> 47) ^ v6);
  v8 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
  v9 = *(_QWORD *)(a1 + 8);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      v3 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
      if (v8 >= v9)
        v3 = v8 % v9;
    }
    else
    {
      v3 = v8 & (v9 - 1);
    }
    v11 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v3);
    if (v11)
    {
      for (i = *v11; i; i = (_QWORD *)*i)
      {
        v13 = i[1];
        if (v13 == v8)
        {
          if (i[2] == a2)
            return i;
        }
        else
        {
          if (v10.u32[0] > 1uLL)
          {
            if (v13 >= v9)
              v13 %= v9;
          }
          else
          {
            v13 &= v9 - 1;
          }
          if (v13 != v3)
            break;
        }
      }
    }
  }
  v14 = (_QWORD *)(a1 + 16);
  i = operator new(0x28uLL);
  v26[0] = i;
  v26[1] = a1 + 16;
  *i = 0;
  i[1] = v8;
  v15 = *a3;
  i[3] = 0;
  i[4] = 0;
  i[2] = v15;
  v27 = 1;
  v16 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v17 = *(float *)(a1 + 32);
  if (!v9 || (float)(v17 * (float)v9) < v16)
  {
    v18 = 1;
    if (v9 >= 3)
      v18 = (v9 & (v9 - 1)) != 0;
    v19 = v18 | (2 * v9);
    v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20)
      v21 = v20;
    else
      v21 = v19;
    std::__hash_table<std::__hash_value_type<mlcore::ModelProperty<std::string> *,std::string>,std::__unordered_map_hasher<mlcore::ModelProperty<std::string> *,std::__hash_value_type<mlcore::ModelProperty<std::string> *,std::string>,std::hash<mlcore::ModelProperty<std::string> *>,std::equal_to<mlcore::ModelProperty<std::string> *>,true>,std::__unordered_map_equal<mlcore::ModelProperty<std::string> *,std::__hash_value_type<mlcore::ModelProperty<std::string> *,std::string>,std::equal_to<mlcore::ModelProperty<std::string> *>,std::hash<mlcore::ModelProperty<std::string> *>,true>,std::allocator<std::__hash_value_type<mlcore::ModelProperty<std::string> *,std::string>>>::__rehash<true>(a1, v21);
    v9 = *(_QWORD *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9)
        v3 = v8 % v9;
      else
        v3 = v8;
    }
    else
    {
      v3 = (v9 - 1) & v8;
    }
  }
  v22 = *(_QWORD *)a1;
  v23 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v23)
  {
    *i = *v23;
LABEL_38:
    *v23 = i;
    goto LABEL_39;
  }
  *i = *v14;
  *v14 = i;
  *(_QWORD *)(v22 + 8 * v3) = v14;
  if (*i)
  {
    v24 = *(_QWORD *)(*i + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v24 >= v9)
        v24 %= v9;
    }
    else
    {
      v24 &= v9 - 1;
    }
    v23 = (_QWORD *)(*(_QWORD *)a1 + 8 * v24);
    goto LABEL_38;
  }
LABEL_39:
  v26[0] = 0;
  ++*(_QWORD *)(a1 + 24);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<mlcore::LocalizedSearchScope *,std::shared_ptr<mlcore::EntityQueryResult>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<mlcore::LocalizedSearchScope *,std::shared_ptr<mlcore::EntityQueryResult>>,void *>>>>::reset[abi:ne180100]((uint64_t)v26);
  return i;
}

void sub_20A8138D4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<mlcore::LocalizedSearchScope *,std::shared_ptr<mlcore::EntityQueryResult>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<mlcore::LocalizedSearchScope *,std::shared_ptr<mlcore::EntityQueryResult>>,void *>>>>::reset[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::__hash_table<std::__hash_value_type<std::shared_ptr<mlcore::LocalizedSearchScope>,std::shared_ptr<std::vector<mlcore::PropertyCache>>>,std::__unordered_map_hasher<std::shared_ptr<mlcore::LocalizedSearchScope>,std::__hash_value_type<std::shared_ptr<mlcore::LocalizedSearchScope>,std::shared_ptr<std::vector<mlcore::PropertyCache>>>,std::hash<std::shared_ptr<mlcore::LocalizedSearchScope>>,std::equal_to<std::shared_ptr<mlcore::LocalizedSearchScope>>,true>,std::__unordered_map_equal<std::shared_ptr<mlcore::LocalizedSearchScope>,std::__hash_value_type<std::shared_ptr<mlcore::LocalizedSearchScope>,std::shared_ptr<std::vector<mlcore::PropertyCache>>>,std::equal_to<std::shared_ptr<mlcore::LocalizedSearchScope>>,std::hash<std::shared_ptr<mlcore::LocalizedSearchScope>>,true>,std::allocator<std::__hash_value_type<std::shared_ptr<mlcore::LocalizedSearchScope>,std::shared_ptr<std::vector<mlcore::PropertyCache>>>>>::~__hash_table(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  v2 = *(_QWORD **)(a1 + 16);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)(v2 + 4));
      std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)(v2 + 2));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v4)
    operator delete(v4);
  return a1;
}

uint64_t std::__hash_table<std::__hash_value_type<std::shared_ptr<mlcore::LocalizedSearchScope>,long long>,std::__unordered_map_hasher<std::shared_ptr<mlcore::LocalizedSearchScope>,std::__hash_value_type<std::shared_ptr<mlcore::LocalizedSearchScope>,long long>,std::hash<std::shared_ptr<mlcore::LocalizedSearchScope>>,std::equal_to<std::shared_ptr<mlcore::LocalizedSearchScope>>,true>,std::__unordered_map_equal<std::shared_ptr<mlcore::LocalizedSearchScope>,std::__hash_value_type<std::shared_ptr<mlcore::LocalizedSearchScope>,long long>,std::equal_to<std::shared_ptr<mlcore::LocalizedSearchScope>>,std::hash<std::shared_ptr<mlcore::LocalizedSearchScope>>,true>,std::allocator<std::__hash_value_type<std::shared_ptr<mlcore::LocalizedSearchScope>,long long>>>::~__hash_table(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  v2 = *(_QWORD **)(a1 + 16);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)(v2 + 2));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v4)
    operator delete(v4);
  return a1;
}

uint64_t mlcore::LocalizedSearchQueryResult::LocalizedSearchQueryResult(uint64_t a1, uint64_t a2)
{
  std::exception v5;
  __int128 v6;
  void *v7;
  int v8;
  std::string v9;
  std::exception v10[8];
  std::string __p;

  v6 = *(_OWORD *)(a2 + 8);
  v5.__vftable = (std::exception_vtbl *)off_24C335E70;
  v7 = &unk_24C335EA0;
  v8 = *(_DWORD *)(a2 + 32);
  if (*(char *)(a2 + 63) < 0)
    std::string::__init_copy_ctor_external(&v9, *(const std::string::value_type **)(a2 + 40), *(_QWORD *)(a2 + 48));
  else
    v9 = *(std::string *)(a2 + 40);
  mediaplatform::PlatformErrorCondition::PlatformErrorCondition((mediaplatform::PlatformErrorCondition *)v10, (const mediaplatform::PlatformErrorCondition *)(a2 + 64));
  if (*(char *)(a2 + 151) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(a2 + 128), *(_QWORD *)(a2 + 136));
  else
    __p = *(std::string *)(a2 + 128);
  mlcore::QueryResult::QueryResult(a1, (uint64_t)&v5);
  v5.__vftable = (std::exception_vtbl *)off_24C335E70;
  v7 = &unk_24C335EA0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  mediaplatform::PlatformErrorCondition::~PlatformErrorCondition(v10);
  if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v9.__r_.__value_.__l.__data_);
  std::exception::~exception(&v5);
  *(_QWORD *)a1 = &off_24C33A588;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_DWORD *)(a1 + 192) = 1065353216;
  *(_QWORD *)(a1 + 208) = 0;
  *(_QWORD *)(a1 + 216) = 0;
  *(_QWORD *)(a1 + 200) = 0;
  return a1;
}

void sub_20A813AE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  std::exception *v20;

  mediaplatform::PlatformErrorCondition::~PlatformErrorCondition(v20);
  if (a20 < 0)
    operator delete(__p);
  std::exception::~exception(&a10);
  _Unwind_Resume(a1);
}

void mlcore::LocalizedSearchQueryResult::~LocalizedSearchQueryResult(std::exception *this)
{
  std::exception *v2;
  std::exception *v3;

  this->__vftable = (std::exception_vtbl *)&off_24C33A588;
  v2 = this + 20;
  v3 = this + 25;
  std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v3);
  std::__hash_table<std::__hash_value_type<mlcore::LocalizedSearchScope *,std::shared_ptr<mlcore::EntityQueryResult>>,std::__unordered_map_hasher<mlcore::LocalizedSearchScope *,std::__hash_value_type<mlcore::LocalizedSearchScope *,std::shared_ptr<mlcore::EntityQueryResult>>,std::hash<mlcore::LocalizedSearchScope *>,std::equal_to<mlcore::LocalizedSearchScope *>,true>,std::__unordered_map_equal<mlcore::LocalizedSearchScope *,std::__hash_value_type<mlcore::LocalizedSearchScope *,std::shared_ptr<mlcore::EntityQueryResult>>,std::equal_to<mlcore::LocalizedSearchScope *>,std::hash<mlcore::LocalizedSearchScope *>,true>,std::allocator<std::__hash_value_type<mlcore::LocalizedSearchScope *,std::shared_ptr<mlcore::EntityQueryResult>>>>::~__hash_table((uint64_t)v2);
  mlcore::QueryResult::~QueryResult(this);
}

{
  std::exception *v2;
  std::exception *v3;

  this->__vftable = (std::exception_vtbl *)&off_24C33A588;
  v2 = this + 20;
  v3 = this + 25;
  std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v3);
  std::__hash_table<std::__hash_value_type<mlcore::LocalizedSearchScope *,std::shared_ptr<mlcore::EntityQueryResult>>,std::__unordered_map_hasher<mlcore::LocalizedSearchScope *,std::__hash_value_type<mlcore::LocalizedSearchScope *,std::shared_ptr<mlcore::EntityQueryResult>>,std::hash<mlcore::LocalizedSearchScope *>,std::equal_to<mlcore::LocalizedSearchScope *>,true>,std::__unordered_map_equal<mlcore::LocalizedSearchScope *,std::__hash_value_type<mlcore::LocalizedSearchScope *,std::shared_ptr<mlcore::EntityQueryResult>>,std::equal_to<mlcore::LocalizedSearchScope *>,std::hash<mlcore::LocalizedSearchScope *>,true>,std::allocator<std::__hash_value_type<mlcore::LocalizedSearchScope *,std::shared_ptr<mlcore::EntityQueryResult>>>>::~__hash_table((uint64_t)v2);
  mlcore::QueryResult::~QueryResult(this);
  JUMPOUT(0x20BD27AFCLL);
}

void std::__shared_ptr_emplace<mlcore::LocalizedSearchQueryResult>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C33D208;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<mlcore::LocalizedSearchQueryResult>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C33D208;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x20BD27AFCLL);
}

uint64_t std::__shared_ptr_emplace<mlcore::LocalizedSearchQueryResult>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__shared_ptr_pointer<std::vector<mlcore::Section> *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x20BD27AFCLL);
}

void **std::__shared_ptr_pointer<std::vector<mlcore::Section> *>::__on_zero_shared(uint64_t a1)
{
  return std::default_delete<std::vector<mlcore::Section>>::operator()[abi:ne180100](*(void ***)(a1 + 24));
}

uint64_t std::__shared_ptr_pointer<std::vector<mlcore::Section> *>::__get_deleter(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), 0x800000020A918FF8))
    return a1 + 24;
  else
    return 0;
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<mlcore::LocalizedSearchScope *,std::shared_ptr<mlcore::EntityQueryResult>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<mlcore::LocalizedSearchScope *,std::shared_ptr<mlcore::EntityQueryResult>>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  void *v1;

  v1 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v1)
  {
    if (*(_BYTE *)(a1 + 16))
      std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)v1 + 24);
    operator delete(v1);
  }
}

void std::__shared_ptr_emplace<mlcore::MultiEntityQueryResult>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C33D0B8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<mlcore::MultiEntityQueryResult>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C33D0B8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x20BD27AFCLL);
}

uint64_t std::__shared_ptr_emplace<mlcore::MultiEntityQueryResult>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t mlcore::LocalizedSearchQueryResult::LocalizedSearchQueryResult(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t *v6;
  _QWORD *v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint8x8_t v14;
  _QWORD *v15;
  _QWORD *i;
  unint64_t v17;
  void *v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  float v22;
  float v23;
  _BOOL8 v24;
  unint64_t v25;
  unint64_t v26;
  size_t v27;
  uint64_t v28;
  _QWORD *v29;
  unint64_t v30;
  _QWORD **v32;
  std::exception v33;
  void *v34;
  void *v35;
  char v36;
  std::exception v37[10];
  char v38;
  void *v39[2];
  char v40;
  char v41;

  std::string::basic_string[abi:ne180100]<0>(v39, "");
  mlcore::MediaError::MediaError((uint64_t)&v33, 0, (uint64_t)v39);
  mlcore::QueryResult::QueryResult(a1, (uint64_t)&v33);
  v33.__vftable = (std::exception_vtbl *)off_24C335E70;
  v34 = &unk_24C335EA0;
  if (v38 < 0)
    operator delete(v37[8].__vftable);
  mediaplatform::PlatformErrorCondition::~PlatformErrorCondition(v37);
  if (v36 < 0)
    operator delete(v35);
  std::exception::~exception(&v33);
  if (v41 < 0)
    operator delete(v39[0]);
  v32 = (_QWORD **)a3;
  *(_QWORD *)a1 = &off_24C33A588;
  *(_OWORD *)(a1 + 160) = 0u;
  v6 = (uint64_t *)(a1 + 160);
  *(_OWORD *)(a1 + 176) = 0u;
  *(_DWORD *)(a1 + 192) = *(_DWORD *)(a2 + 32);
  std::__hash_table<std::__hash_value_type<mlcore::ModelProperty<std::string> *,std::string>,std::__unordered_map_hasher<mlcore::ModelProperty<std::string> *,std::__hash_value_type<mlcore::ModelProperty<std::string> *,std::string>,std::hash<mlcore::ModelProperty<std::string> *>,std::equal_to<mlcore::ModelProperty<std::string> *>,true>,std::__unordered_map_equal<mlcore::ModelProperty<std::string> *,std::__hash_value_type<mlcore::ModelProperty<std::string> *,std::string>,std::equal_to<mlcore::ModelProperty<std::string> *>,std::hash<mlcore::ModelProperty<std::string> *>,true>,std::allocator<std::__hash_value_type<mlcore::ModelProperty<std::string> *,std::string>>>::__rehash<true>(a1 + 160, *(_QWORD *)(a2 + 8));
  v7 = *(_QWORD **)(a2 + 16);
  if (v7)
  {
    v8 = (_QWORD *)(a1 + 176);
    do
    {
      v9 = v7[2];
      v10 = 0x9DDFEA08EB382D69 * (((8 * v9) + 8) ^ HIDWORD(v9));
      v11 = 0x9DDFEA08EB382D69 * (HIDWORD(v9) ^ (v10 >> 47) ^ v10);
      v12 = 0x9DDFEA08EB382D69 * (v11 ^ (v11 >> 47));
      v13 = *(_QWORD *)(a1 + 168);
      if (v13)
      {
        v14 = (uint8x8_t)vcnt_s8((int8x8_t)v13);
        v14.i16[0] = vaddlv_u8(v14);
        if (v14.u32[0] > 1uLL)
        {
          a3 = 0x9DDFEA08EB382D69 * (v11 ^ (v11 >> 47));
          if (v12 >= v13)
            a3 = v12 % v13;
        }
        else
        {
          a3 = v12 & (v13 - 1);
        }
        v15 = *(_QWORD **)(*v6 + 8 * a3);
        if (v15)
        {
          for (i = (_QWORD *)*v15; i; i = (_QWORD *)*i)
          {
            v17 = i[1];
            if (v17 == v12)
            {
              if (i[2] == v9)
                goto LABEL_50;
            }
            else
            {
              if (v14.u32[0] > 1uLL)
              {
                if (v17 >= v13)
                  v17 %= v13;
              }
              else
              {
                v17 &= v13 - 1;
              }
              if (v17 != a3)
                break;
            }
          }
        }
      }
      v18 = operator new(0x28uLL);
      v39[0] = v18;
      v39[1] = (void *)(a1 + 176);
      *(_QWORD *)v18 = 0;
      *((_QWORD *)v18 + 1) = v12;
      *((_OWORD *)v18 + 1) = *((_OWORD *)v7 + 1);
      v19 = v7[4];
      *((_QWORD *)v18 + 4) = v19;
      if (v19)
      {
        v20 = (unint64_t *)(v19 + 8);
        do
          v21 = __ldxr(v20);
        while (__stxr(v21 + 1, v20));
      }
      v40 = 1;
      v22 = (float)(unint64_t)(*(_QWORD *)(a1 + 184) + 1);
      v23 = *(float *)(a1 + 192);
      if (!v13 || (float)(v23 * (float)v13) < v22)
      {
        v24 = (v13 & (v13 - 1)) != 0;
        if (v13 < 3)
          v24 = 1;
        v25 = v24 | (2 * v13);
        v26 = vcvtps_u32_f32(v22 / v23);
        if (v25 <= v26)
          v27 = v26;
        else
          v27 = v25;
        std::__hash_table<std::__hash_value_type<mlcore::ModelProperty<std::string> *,std::string>,std::__unordered_map_hasher<mlcore::ModelProperty<std::string> *,std::__hash_value_type<mlcore::ModelProperty<std::string> *,std::string>,std::hash<mlcore::ModelProperty<std::string> *>,std::equal_to<mlcore::ModelProperty<std::string> *>,true>,std::__unordered_map_equal<mlcore::ModelProperty<std::string> *,std::__hash_value_type<mlcore::ModelProperty<std::string> *,std::string>,std::equal_to<mlcore::ModelProperty<std::string> *>,std::hash<mlcore::ModelProperty<std::string> *>,true>,std::allocator<std::__hash_value_type<mlcore::ModelProperty<std::string> *,std::string>>>::__rehash<true>(a1 + 160, v27);
        v13 = *(_QWORD *)(a1 + 168);
        if ((v13 & (v13 - 1)) != 0)
        {
          if (v12 >= v13)
            a3 = v12 % v13;
          else
            a3 = v12;
        }
        else
        {
          a3 = (v13 - 1) & v12;
        }
      }
      v28 = *v6;
      v29 = *(_QWORD **)(*v6 + 8 * a3);
      if (v29)
      {
        *(_QWORD *)v18 = *v29;
      }
      else
      {
        *(_QWORD *)v18 = *v8;
        *v8 = v18;
        *(_QWORD *)(v28 + 8 * a3) = v8;
        if (!*(_QWORD *)v18)
          goto LABEL_49;
        v30 = *(_QWORD *)(*(_QWORD *)v18 + 8);
        if ((v13 & (v13 - 1)) != 0)
        {
          if (v30 >= v13)
            v30 %= v13;
        }
        else
        {
          v30 &= v13 - 1;
        }
        v29 = (_QWORD *)(*v6 + 8 * v30);
      }
      *v29 = v18;
LABEL_49:
      v39[0] = 0;
      ++*(_QWORD *)(a1 + 184);
      std::unique_ptr<std::__hash_node<std::__hash_value_type<mlcore::LocalizedSearchScope *,std::shared_ptr<mlcore::EntityQueryResult>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<mlcore::LocalizedSearchScope *,std::shared_ptr<mlcore::EntityQueryResult>>,void *>>>>::reset[abi:ne180100]((uint64_t)v39);
LABEL_50:
      v7 = (_QWORD *)*v7;
    }
    while (v7);
  }
  *(_QWORD *)(a1 + 200) = 0;
  *(_QWORD *)(a1 + 208) = 0;
  *(_QWORD *)(a1 + 216) = 0;
  std::vector<std::shared_ptr<mlcore::LocalizedSearchScope>>::__init_with_size[abi:ne180100]<std::shared_ptr<mlcore::LocalizedSearchScope>*,std::shared_ptr<mlcore::LocalizedSearchScope>*>((char *)(a1 + 200), *v32, v32[1], ((char *)v32[1] - (char *)*v32) >> 4);
  return a1;
}

void sub_20A8140A4(_Unwind_Exception *a1)
{
  std::exception *v1;
  uint64_t v2;

  std::__hash_table<std::__hash_value_type<mlcore::LocalizedSearchScope *,std::shared_ptr<mlcore::EntityQueryResult>>,std::__unordered_map_hasher<mlcore::LocalizedSearchScope *,std::__hash_value_type<mlcore::LocalizedSearchScope *,std::shared_ptr<mlcore::EntityQueryResult>>,std::hash<mlcore::LocalizedSearchScope *>,std::equal_to<mlcore::LocalizedSearchScope *>,true>,std::__unordered_map_equal<mlcore::LocalizedSearchScope *,std::__hash_value_type<mlcore::LocalizedSearchScope *,std::shared_ptr<mlcore::EntityQueryResult>>,std::equal_to<mlcore::LocalizedSearchScope *>,std::hash<mlcore::LocalizedSearchScope *>,true>,std::allocator<std::__hash_value_type<mlcore::LocalizedSearchScope *,std::shared_ptr<mlcore::EntityQueryResult>>>>::~__hash_table(v2);
  mlcore::QueryResult::~QueryResult(v1);
  _Unwind_Resume(a1);
}

char *std::vector<std::shared_ptr<mlcore::LocalizedSearchScope>>::__init_with_size[abi:ne180100]<std::shared_ptr<mlcore::LocalizedSearchScope>*,std::shared_ptr<mlcore::LocalizedSearchScope>*>(char *result, _QWORD *a2, _QWORD *a3, unint64_t a4)
{
  char *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  if (a4)
  {
    v6 = result;
    result = std::vector<std::shared_ptr<mlcore::Predicate>>::__vallocate[abi:ne180100](result, a4);
    v7 = (_QWORD *)*((_QWORD *)v6 + 1);
    while (a2 != a3)
    {
      *v7 = *a2;
      v8 = a2[1];
      v7[1] = v8;
      if (v8)
      {
        v9 = (unint64_t *)(v8 + 8);
        do
          v10 = __ldxr(v9);
        while (__stxr(v10 + 1, v9));
      }
      a2 += 2;
      v7 += 2;
    }
    *((_QWORD *)v6 + 1) = v7;
  }
  return result;
}

void sub_20A81418C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void std::__function::__func<mlcore::LocalizedSearchQuery::_performWeightedSearch(std::shared_ptr<mlcore::Transaction>,std::function<void ()(std::shared_ptr<mlcore::QueryResult>)>)::$_1,std::allocator<mlcore::LocalizedSearchQuery::_performWeightedSearch(std::shared_ptr<mlcore::Transaction>,std::function<void ()(std::shared_ptr<mlcore::QueryResult>)>)::$_1>,void ()(long long,unsigned long,int,BOOL &)>::~__func()
{
  JUMPOUT(0x20BD27AFCLL);
}

__n128 std::__function::__func<mlcore::LocalizedSearchQuery::_performWeightedSearch(std::shared_ptr<mlcore::Transaction>,std::function<void ()(std::shared_ptr<mlcore::QueryResult>)>)::$_1,std::allocator<mlcore::LocalizedSearchQuery::_performWeightedSearch(std::shared_ptr<mlcore::Transaction>,std::function<void ()(std::shared_ptr<mlcore::QueryResult>)>)::$_1>,void ()(long long,unsigned long,int,BOOL &)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x30uLL);
  *(_QWORD *)v2 = &off_24C33B5B8;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  *((_QWORD *)v2 + 5) = *(_QWORD *)(a1 + 40);
  return result;
}

__n128 std::__function::__func<mlcore::LocalizedSearchQuery::_performWeightedSearch(std::shared_ptr<mlcore::Transaction>,std::function<void ()(std::shared_ptr<mlcore::QueryResult>)>)::$_1,std::allocator<mlcore::LocalizedSearchQuery::_performWeightedSearch(std::shared_ptr<mlcore::Transaction>,std::function<void ()(std::shared_ptr<mlcore::QueryResult>)>)::$_1>,void ()(long long,unsigned long,int,BOOL &)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  *(_QWORD *)a2 = &off_24C33B5B8;
  result = *(__n128 *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 40) = *(_QWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<mlcore::LocalizedSearchQuery::_performWeightedSearch(std::shared_ptr<mlcore::Transaction>,std::function<void ()(std::shared_ptr<mlcore::QueryResult>)>)::$_1,std::allocator<mlcore::LocalizedSearchQuery::_performWeightedSearch(std::shared_ptr<mlcore::Transaction>,std::function<void ()(std::shared_ptr<mlcore::QueryResult>)>)::$_1>,void ()(long long,unsigned long,int,BOOL &)>::operator()(uint64_t a1, uint64_t *a2, uint64_t *a3, int *a4, _BYTE *a5)
{
  uint64_t v6;
  uint64_t v7;
  unsigned __int8 v8;
  __int128 v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  __int128 v19;
  unint64_t *v20;
  unint64_t v21;
  uint64_t *v22;
  void **v23;
  unint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t *v36;
  _QWORD *v37;
  unint64_t v38;
  mlcore *v39;
  uint64_t *v40;
  _QWORD *v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  unint64_t v48;
  BOOL v49;
  _QWORD *v50;
  unsigned __int8 v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  int v56;
  uint64_t v57;
  void (**v58)(mlcore::PropertyCache *__hidden);
  __int128 v59;
  __int128 v60;
  int v61;
  __int128 v62;
  __int128 v63;
  int v64;
  __int128 v65;
  __int128 v66;
  int v67;
  _BYTE v68[32];
  int v69;
  _BYTE v70[32];
  int v71;
  void *v72;
  __int128 v73;
  __int128 v74;
  _QWORD *v75[3];

  v57 = *a2;
  v6 = *a3;
  v56 = *a4;
  v7 = *(_QWORD *)(a1 + 8);
  v8 = atomic_load((unsigned __int8 *)(v7 + 88));
  *a5 = v8 & 1;
  v9 = *(_OWORD *)(**(_QWORD **)(a1 + 16) + 16 * v6);
  v74 = v9;
  if (*((_QWORD *)&v9 + 1))
  {
    v10 = (unint64_t *)(*((_QWORD *)&v9 + 1) + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  v12 = *(_QWORD *)(a1 + 24);
  v58 = (void (**)(mlcore::PropertyCache *__hidden))&v74;
  v13 = std::__hash_table<std::__hash_value_type<std::shared_ptr<mlcore::LocalizedSearchScope>,long long>,std::__unordered_map_hasher<std::shared_ptr<mlcore::LocalizedSearchScope>,std::__hash_value_type<std::shared_ptr<mlcore::LocalizedSearchScope>,long long>,std::hash<std::shared_ptr<mlcore::LocalizedSearchScope>>,std::equal_to<std::shared_ptr<mlcore::LocalizedSearchScope>>,true>,std::__unordered_map_equal<std::shared_ptr<mlcore::LocalizedSearchScope>,std::__hash_value_type<std::shared_ptr<mlcore::LocalizedSearchScope>,long long>,std::equal_to<std::shared_ptr<mlcore::LocalizedSearchScope>>,std::hash<std::shared_ptr<mlcore::LocalizedSearchScope>>,true>,std::allocator<std::__hash_value_type<std::shared_ptr<mlcore::LocalizedSearchScope>,long long>>>::__emplace_unique_key_args<std::shared_ptr<mlcore::LocalizedSearchScope>,std::piecewise_construct_t const&,std::tuple<std::shared_ptr<mlcore::LocalizedSearchScope> const&>,std::tuple<>>(v12, (uint64_t **)&v74, &v58);
  v15 = *(_QWORD *)(v7 + 56);
  v14 = *(_QWORD *)(v7 + 64);
  if (v14 != v15)
  {
    v16 = 0;
    v17 = v13[4];
    v18 = *(_QWORD *)v74;
    do
    {
      if (((v17 >> v16) & 1) != 0)
      {
        v19 = *(_OWORD *)(v15 + 16 * v16);
        v73 = v19;
        if (*((_QWORD *)&v19 + 1))
        {
          v20 = (unint64_t *)(*((_QWORD *)&v19 + 1) + 8);
          do
            v21 = __ldxr(v20);
          while (__stxr(v21 + 1, v20));
        }
        if (*(_QWORD *)(v19 + 56) != *(_QWORD *)(v19 + 48))
        {
          v22 = *(uint64_t **)(a1 + 32);
          v58 = (void (**)(mlcore::PropertyCache *__hidden))&v73;
          v23 = (void **)std::__hash_table<std::__hash_value_type<std::shared_ptr<mlcore::LocalizedSearchScope>,std::shared_ptr<std::vector<mlcore::EntityClass *>>>,std::__unordered_map_hasher<std::shared_ptr<mlcore::LocalizedSearchScope>,std::__hash_value_type<std::shared_ptr<mlcore::LocalizedSearchScope>,std::shared_ptr<std::vector<mlcore::EntityClass *>>>,std::hash<std::shared_ptr<mlcore::LocalizedSearchScope>>,std::equal_to<std::shared_ptr<mlcore::LocalizedSearchScope>>,true>,std::__unordered_map_equal<std::shared_ptr<mlcore::LocalizedSearchScope>,std::__hash_value_type<std::shared_ptr<mlcore::LocalizedSearchScope>,std::shared_ptr<std::vector<mlcore::EntityClass *>>>,std::equal_to<std::shared_ptr<mlcore::LocalizedSearchScope>>,std::hash<std::shared_ptr<mlcore::LocalizedSearchScope>>,true>,std::allocator<std::__hash_value_type<std::shared_ptr<mlcore::LocalizedSearchScope>,std::shared_ptr<std::vector<mlcore::EntityClass *>>>>>::__emplace_unique_key_args<std::shared_ptr<mlcore::LocalizedSearchScope>,std::piecewise_construct_t const&,std::tuple<std::shared_ptr<mlcore::LocalizedSearchScope> const&>,std::tuple<>>(v22, (uint64_t)&v73, &v58)[4];
          v25 = v23[1];
          v24 = (unint64_t)v23[2];
          if ((unint64_t)v25 >= v24)
          {
            v27 = ((char *)v25 - (_BYTE *)*v23) >> 3;
            if ((unint64_t)(v27 + 1) >> 61)
              std::vector<std::string>::__throw_length_error[abi:ne180100]();
            v28 = v24 - (_QWORD)*v23;
            v29 = v28 >> 2;
            if (v28 >> 2 <= (unint64_t)(v27 + 1))
              v29 = v27 + 1;
            if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFF8)
              v30 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v30 = v29;
            if (v30)
              v30 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<mlcore::ModelPropertyBase *>>(v30);
            else
              v31 = 0;
            v32 = (_QWORD *)(v30 + 8 * v27);
            *v32 = v18;
            v26 = v32 + 1;
            v34 = (char *)*v23;
            v33 = (char *)v23[1];
            if (v33 != *v23)
            {
              do
              {
                v35 = *((_QWORD *)v33 - 1);
                v33 -= 8;
                *--v32 = v35;
              }
              while (v33 != v34);
              v33 = (char *)*v23;
            }
            *v23 = v32;
            v23[1] = v26;
            v23[2] = (void *)(v30 + 8 * v31);
            if (v33)
              operator delete(v33);
          }
          else
          {
            *v25 = v18;
            v26 = v25 + 1;
          }
          v23[1] = v26;
        }
        v36 = *(uint64_t **)(a1 + 40);
        v58 = (void (**)(mlcore::PropertyCache *__hidden))&v73;
        v37 = std::__hash_table<std::__hash_value_type<std::shared_ptr<mlcore::LocalizedSearchScope>,std::shared_ptr<std::vector<mlcore::PropertyCache>>>,std::__unordered_map_hasher<std::shared_ptr<mlcore::LocalizedSearchScope>,std::__hash_value_type<std::shared_ptr<mlcore::LocalizedSearchScope>,std::shared_ptr<std::vector<mlcore::PropertyCache>>>,std::hash<std::shared_ptr<mlcore::LocalizedSearchScope>>,std::equal_to<std::shared_ptr<mlcore::LocalizedSearchScope>>,true>,std::__unordered_map_equal<std::shared_ptr<mlcore::LocalizedSearchScope>,std::__hash_value_type<std::shared_ptr<mlcore::LocalizedSearchScope>,std::shared_ptr<std::vector<mlcore::PropertyCache>>>,std::equal_to<std::shared_ptr<mlcore::LocalizedSearchScope>>,std::hash<std::shared_ptr<mlcore::LocalizedSearchScope>>,true>,std::allocator<std::__hash_value_type<std::shared_ptr<mlcore::LocalizedSearchScope>,std::shared_ptr<std::vector<mlcore::PropertyCache>>>>>::__emplace_unique_key_args<std::shared_ptr<mlcore::LocalizedSearchScope>,std::piecewise_construct_t const&,std::tuple<std::shared_ptr<mlcore::LocalizedSearchScope> const&>,std::tuple<>>(v36, (uint64_t)&v73, &v58);
        v38 = *(_QWORD *)(v7 + 80);
        if (!v38)
          v38 = -1;
        if (0x84BDA12F684BDA13 * ((uint64_t)(*(_QWORD *)(v37[4] + 8) - *(_QWORD *)v37[4]) >> 3) < v38)
        {
          v59 = 0u;
          v60 = 0u;
          v62 = 0u;
          v63 = 0u;
          v61 = 1065353216;
          v64 = 1065353216;
          v65 = 0u;
          v66 = 0u;
          memset(v68, 0, sizeof(v68));
          v67 = 1065353216;
          v69 = 1065353216;
          memset(v70, 0, sizeof(v70));
          v71 = 1065353216;
          v58 = &off_24C3371C0;
          v72 = &unk_24C3371E8;
          v75[0] = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v18 + 112))(v18);
          v39 = (mlcore *)std::__hash_table<std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>,std::__unordered_map_hasher<mlcore::ModelProperty<long long> *,std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>,std::hash<mlcore::ModelProperty<long long> *>,std::equal_to<mlcore::ModelProperty<long long> *>,true>,std::__unordered_map_equal<mlcore::ModelProperty<long long> *,std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>,std::equal_to<mlcore::ModelProperty<long long> *>,std::hash<mlcore::ModelProperty<long long> *>,true>,std::allocator<std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>>>::__emplace_unique_key_args<mlcore::ModelProperty<long long> *,std::piecewise_construct_t const&,std::tuple<mlcore::ModelProperty<long long> * const&>,std::tuple<>>((uint64_t)v70, (unint64_t)v75[0], v75);
          *((_QWORD *)v39 + 3) = v57;
          v75[0] = (_QWORD *)mlcore::LocalizedSearchPropertyWeight(v39);
          *((_DWORD *)std::__hash_table<std::__hash_value_type<mlcore::ModelProperty<int> *,int>,std::__unordered_map_hasher<mlcore::ModelProperty<int> *,std::__hash_value_type<mlcore::ModelProperty<int> *,int>,std::hash<mlcore::ModelProperty<int> *>,std::equal_to<mlcore::ModelProperty<int> *>,true>,std::__unordered_map_equal<mlcore::ModelProperty<int> *,std::__hash_value_type<mlcore::ModelProperty<int> *,int>,std::equal_to<mlcore::ModelProperty<int> *>,std::hash<mlcore::ModelProperty<int> *>,true>,std::allocator<std::__hash_value_type<mlcore::ModelProperty<int> *,int>>>::__emplace_unique_key_args<mlcore::ModelProperty<int> *,std::piecewise_construct_t const&,std::tuple<mlcore::ModelProperty<int> * const&>,std::tuple<>>((uint64_t)v68, (unint64_t)v75[0], v75)+ 6) = v56;
          v40 = *(uint64_t **)(a1 + 40);
          v75[0] = &v73;
          v41 = std::__hash_table<std::__hash_value_type<std::shared_ptr<mlcore::LocalizedSearchScope>,std::shared_ptr<std::vector<mlcore::PropertyCache>>>,std::__unordered_map_hasher<std::shared_ptr<mlcore::LocalizedSearchScope>,std::__hash_value_type<std::shared_ptr<mlcore::LocalizedSearchScope>,std::shared_ptr<std::vector<mlcore::PropertyCache>>>,std::hash<std::shared_ptr<mlcore::LocalizedSearchScope>>,std::equal_to<std::shared_ptr<mlcore::LocalizedSearchScope>>,true>,std::__unordered_map_equal<std::shared_ptr<mlcore::LocalizedSearchScope>,std::__hash_value_type<std::shared_ptr<mlcore::LocalizedSearchScope>,std::shared_ptr<std::vector<mlcore::PropertyCache>>>,std::equal_to<std::shared_ptr<mlcore::LocalizedSearchScope>>,std::hash<std::shared_ptr<mlcore::LocalizedSearchScope>>,true>,std::allocator<std::__hash_value_type<std::shared_ptr<mlcore::LocalizedSearchScope>,std::shared_ptr<std::vector<mlcore::PropertyCache>>>>>::__emplace_unique_key_args<std::shared_ptr<mlcore::LocalizedSearchScope>,std::piecewise_construct_t const&,std::tuple<std::shared_ptr<mlcore::LocalizedSearchScope> const&>,std::tuple<>>(v40, (uint64_t)&v73, v75);
          v42 = v41[4];
          v43 = *(_QWORD **)(v42 + 8);
          if ((unint64_t)v43 >= *(_QWORD *)(v42 + 16))
          {
            v44 = std::vector<mlcore::PropertyCache>::__push_back_slow_path<mlcore::PropertyCache const&>((uint64_t *)v41[4], (uint64_t)&v58);
          }
          else
          {
            mlcore::PropertyCacheBase<long long,int,double,std::string,mediaplatform::Data>::PropertyCacheBase(*(_QWORD *)(v42 + 8), (uint64_t)&v58);
            *v43 = &off_24C3371C0;
            v43[26] = &unk_24C3371E8;
            v44 = (uint64_t)(v43 + 27);
            *(_QWORD *)(v42 + 8) = v43 + 27;
          }
          *(_QWORD *)(v42 + 8) = v44;
          mlcore::PropertyCacheBase<long long,int,double,std::string,mediaplatform::Data>::~PropertyCacheBase(&v58);
        }
        v45 = (std::__shared_weak_count *)*((_QWORD *)&v73 + 1);
        if (*((_QWORD *)&v73 + 1))
        {
          v46 = (unint64_t *)(*((_QWORD *)&v73 + 1) + 8);
          do
            v47 = __ldaxr(v46);
          while (__stlxr(v47 - 1, v46));
          if (!v47)
          {
            ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
            std::__shared_weak_count::__release_weak(v45);
          }
        }
        v15 = *(_QWORD *)(v7 + 56);
        v14 = *(_QWORD *)(v7 + 64);
      }
      ++v16;
    }
    while (v16 < (v14 - v15) >> 4);
  }
  v48 = *(_QWORD *)(v7 + 80);
  if (v48)
    v49 = *a5 == 0;
  else
    v49 = 0;
  if (v49)
  {
    *a5 = 1;
    v50 = (_QWORD *)(*(_QWORD *)(a1 + 40) + 16);
    while (1)
    {
      v50 = (_QWORD *)*v50;
      if (!v50)
        break;
      if (0x84BDA12F684BDA13 * ((uint64_t)(*(_QWORD *)(v50[4] + 8) - *(_QWORD *)v50[4]) >> 3) < v48)
      {
        v51 = atomic_load((unsigned __int8 *)(v7 + 88));
        *a5 = v51 & 1;
        break;
      }
    }
  }
  v52 = (std::__shared_weak_count *)*((_QWORD *)&v74 + 1);
  if (*((_QWORD *)&v74 + 1))
  {
    v53 = (unint64_t *)(*((_QWORD *)&v74 + 1) + 8);
    do
      v54 = __ldaxr(v53);
    while (__stlxr(v54 - 1, v53));
    if (!v54)
    {
      ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
      std::__shared_weak_count::__release_weak(v52);
    }
  }
}

void sub_20A814674(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
  uint64_t v16;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;

  v18 = *(std::__shared_weak_count **)(v16 - 120);
  if (v18)
  {
    p_shared_owners = (unint64_t *)&v18->__shared_owners_;
    do
      v20 = __ldaxr(p_shared_owners);
    while (__stlxr(v20 - 1, p_shared_owners));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<mlcore::LocalizedSearchQuery::_performWeightedSearch(std::shared_ptr<mlcore::Transaction>,std::function<void ()(std::shared_ptr<mlcore::QueryResult>)>)::$_1,std::allocator<mlcore::LocalizedSearchQuery::_performWeightedSearch(std::shared_ptr<mlcore::Transaction>,std::function<void ()(std::shared_ptr<mlcore::QueryResult>)>)::$_1>,void ()(long long,unsigned long,int,BOOL &)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN6mlcore20LocalizedSearchQuery22_performWeightedSearchENSt3__110shared_ptrINS_11TransactionEEENS1_8functionIFvNS2_INS_11QueryResultEEEEEEE3$_1"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<mlcore::LocalizedSearchQuery::_performWeightedSearch(std::shared_ptr<mlcore::Transaction>,std::function<void ()(std::shared_ptr<mlcore::QueryResult>)>)::$_1,std::allocator<mlcore::LocalizedSearchQuery::_performWeightedSearch(std::shared_ptr<mlcore::Transaction>,std::function<void ()(std::shared_ptr<mlcore::QueryResult>)>)::$_1>,void ()(long long,unsigned long,int,BOOL &)>::target_type()
{
}

uint64_t mlcore::LocalizedSearchPropertyWeight(mlcore *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&mlcore::LocalizedSearchPropertyWeight(void)::once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&mlcore::LocalizedSearchPropertyWeight(void)::once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::LocalizedSearchPropertyWeight(void)::$_0 &&>>);
  }
  return mlcore::LocalizedSearchPropertyWeight(void)::property;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::LocalizedSearchPropertyWeight(void)::$_0 &&>>()
{
  uint64_t v0;
  std::__shared_weak_count *v1;
  unint64_t *v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  std::string __str;
  __int128 v8;
  uint64_t v9;
  __int128 v10;

  v0 = operator new();
  std::allocate_shared[abi:ne180100]<mediaplatform::SQLColumnNameExpression,std::allocator<mediaplatform::SQLColumnNameExpression>,char const(&)[7],void>(&v8);
  v10 = v8;
  v9 = 0;
  v8 = 0uLL;
  mlcore::ComplexProperty<int>::ComplexProperty(v0, &v10, (_QWORD **)&v8);
  mlcore::LocalizedSearchPropertyWeight(void)::property = v0;
  __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v8;
  std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
  v1 = (std::__shared_weak_count *)*((_QWORD *)&v10 + 1);
  if (*((_QWORD *)&v10 + 1))
  {
    v2 = (unint64_t *)(*((_QWORD *)&v10 + 1) + 8);
    do
      v3 = __ldaxr(v2);
    while (__stlxr(v3 - 1, v2));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  v4 = mlcore::LocalizedSearchPropertyWeight(void)::property;
  std::string::basic_string[abi:ne180100]<0>(&__str, "weight");
  std::string::operator=((std::string *)(v4 + 40), &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  v5 = mlcore::TypedEntityClass<mlcore::Item>::sharedPointer();
  v6 = mlcore::LocalizedSearchPropertyWeight(void)::property;
  std::string::basic_string[abi:ne180100]<0>(&__str, "searchTermWeight");
  mlcore::EntityClass::setPropertyForName(v5, v6, &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
}

void sub_20A8148E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_emplace<mediaplatform::SQLOrderingTerm>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C33BB80;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<mediaplatform::SQLOrderingTerm>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C33BB80;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x20BD27AFCLL);
}

void std::__shared_ptr_emplace<mediaplatform::SQLCompoundSelectStatement>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C33C168;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<mediaplatform::SQLCompoundSelectStatement>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C33C168;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x20BD27AFCLL);
}

uint64_t std::__shared_ptr_emplace<mediaplatform::SQLCompoundSelectStatement>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__shared_ptr_emplace<mediaplatform::SQLAliasExpression>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C33BE20;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<mediaplatform::SQLAliasExpression>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C33BE20;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x20BD27AFCLL);
}

void std::__shared_ptr_emplace<mlcore::PropertiesQuery>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C33CB40;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<mlcore::PropertiesQuery>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C33CB40;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x20BD27AFCLL);
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::shared_ptr<mlcore::LocalizedSearchScope>,std::shared_ptr<std::vector<mlcore::PropertyCache>>>,void *>>>::operator()[abi:ne180100](char a1, void *__p)
{
  if (a1)
  {
    std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)__p + 32);
    std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)__p + 16);
  }
  if (__p)
    operator delete(__p);
}

BOOL std::equal_to<std::shared_ptr<mlcore::LocalizedSearchScope>>::operator()(_QWORD *a1, _QWORD *a2)
{
  _QWORD *v2;
  _BOOL8 v3;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  unsigned __int8 v14;
  size_t v15;
  unint64_t v16;
  int v17;
  void **v18;
  uint64_t v19;
  void **p_s1;
  int v21;
  int v22;
  int v23;
  int v24;
  BOOL v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  void *__p[2];
  unsigned __int8 v33;
  void *__s1;
  size_t __n;
  unsigned __int8 v36;
  uint64_t v37;
  std::__shared_weak_count *v38;
  uint64_t v39;
  std::__shared_weak_count *v40;

  v2 = (_QWORD *)*a2;
  if (*a1 != *(_QWORD *)*a2)
    return 0;
  v6 = a1[1];
  v7 = (std::__shared_weak_count *)a1[2];
  v39 = v6;
  v40 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
    v2 = (_QWORD *)*a2;
  }
  v11 = v2[1];
  v10 = (std::__shared_weak_count *)v2[2];
  v37 = v11;
  v38 = v10;
  if (v10)
  {
    v12 = (unint64_t *)&v10->__shared_owners_;
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  if (v6 == v11)
  {
    v3 = 1;
  }
  else
  {
    v3 = 0;
    if (v6 && v11)
    {
      (*(void (**)(void **__return_ptr))(*(_QWORD *)v6 + 40))(&__s1);
      (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)v11 + 40))(__p, v11);
      v14 = v36;
      if ((v36 & 0x80u) == 0)
        v15 = v36;
      else
        v15 = __n;
      v16 = v33;
      v17 = (char)v33;
      if ((v33 & 0x80u) != 0)
        v16 = (unint64_t)__p[1];
      if (v15 == v16)
      {
        if ((v33 & 0x80u) == 0)
          v18 = __p;
        else
          v18 = (void **)__p[0];
        if ((char)v36 < 0)
        {
          v3 = memcmp(__s1, v18, __n) == 0;
        }
        else if (v36)
        {
          v19 = v36 - 1;
          p_s1 = &__s1;
          do
          {
            v22 = *(unsigned __int8 *)p_s1;
            p_s1 = (void **)((char *)p_s1 + 1);
            v21 = v22;
            v24 = *(unsigned __int8 *)v18;
            v18 = (void **)((char *)v18 + 1);
            v23 = v24;
            v26 = v19-- != 0;
            v3 = v21 == v23;
          }
          while (v21 == v23 && v26);
        }
        else
        {
          v3 = 1;
        }
      }
      else
      {
        v3 = 0;
      }
      if (v17 < 0)
      {
        operator delete(__p[0]);
        v14 = v36;
      }
      if ((v14 & 0x80) != 0)
        operator delete(__s1);
    }
  }
  if (v10)
  {
    v27 = (unint64_t *)&v10->__shared_owners_;
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  v29 = v40;
  if (v40)
  {
    v30 = (unint64_t *)&v40->__shared_owners_;
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  return v3;
}

void sub_20A814CBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  uint64_t v18;

  if (a17 < 0)
    operator delete(__p);
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)&a18);
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100](v18 - 48);
  _Unwind_Resume(a1);
}

unint64_t std::hash<std::shared_ptr<mlcore::LocalizedSearchScope>>::operator()(uint64_t **a1)
{
  uint64_t *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  void *__p[2];
  char v13;
  uint64_t v14;
  std::__shared_weak_count *v15;

  v2 = *a1;
  v3 = (*a1)[1];
  v4 = (std::__shared_weak_count *)v2[2];
  v14 = v3;
  v15 = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  if (v3)
  {
    (*(void (**)(void **__return_ptr))(*(_QWORD *)v3 + 40))(__p);
    v7 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)__p);
    if (v13 < 0)
      operator delete(__p[0]);
  }
  else
  {
    v7 = 0;
  }
  v8 = **a1;
  if (v4)
  {
    v9 = (unint64_t *)&v4->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  return v7 ^ v8;
}

void sub_20A814DB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<std::vector<mlcore::PropertyCache>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C33D6A0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<std::vector<mlcore::PropertyCache>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C33D6A0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x20BD27AFCLL);
}

void std::__shared_ptr_emplace<std::vector<mlcore::PropertyCache>>::__on_zero_shared(uint64_t a1)
{
  void **v1;

  v1 = (void **)(a1 + 24);
  std::vector<mlcore::PropertyCache>::__destroy_vector::operator()[abi:ne180100](&v1);
}

unint64_t std::__unordered_map_hasher<std::shared_ptr<mlcore::LocalizedSearchScope>,std::__hash_value_type<std::shared_ptr<mlcore::LocalizedSearchScope>,long long>,std::hash<std::shared_ptr<mlcore::LocalizedSearchScope>>,std::equal_to<std::shared_ptr<mlcore::LocalizedSearchScope>>,true>::operator()[abi:ne180100](uint64_t *a1, uint64_t *a2)
{
  unint64_t *v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t *v9[2];

  v9[0] = a1;
  v9[1] = a2;
  if (a2)
  {
    v3 = (unint64_t *)(a2 + 1);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  v5 = std::hash<std::shared_ptr<mlcore::LocalizedSearchScope>>::operator()(v9);
  if (a2)
  {
    v6 = (unint64_t *)(a2 + 1);
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      (*(void (**)(uint64_t *))(*a2 + 16))(a2);
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)a2);
    }
  }
  return v5;
}

void sub_20A814EBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

BOOL std::__unordered_map_equal<std::shared_ptr<mlcore::LocalizedSearchScope>,std::__hash_value_type<std::shared_ptr<mlcore::LocalizedSearchScope>,long long>,std::equal_to<std::shared_ptr<mlcore::LocalizedSearchScope>>,std::hash<std::shared_ptr<mlcore::LocalizedSearchScope>>,true>::operator()[abi:ne180100](_QWORD *a1, std::__shared_weak_count *a2, _QWORD *a3)
{
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  _BOOL8 v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  _QWORD v15[3];
  std::__shared_weak_count *v16;

  v15[2] = a1;
  v16 = a2;
  if (a2)
  {
    p_shared_owners = (unint64_t *)&a2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  v5 = (std::__shared_weak_count *)a3[1];
  v15[0] = *a3;
  v15[1] = v5;
  if (v5)
  {
    v6 = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  v8 = std::equal_to<std::shared_ptr<mlcore::LocalizedSearchScope>>::operator()(a1, v15);
  if (v5)
  {
    v9 = (unint64_t *)&v5->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  v11 = v16;
  if (v16)
  {
    v12 = (unint64_t *)&v16->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  return v8;
}

void sub_20A814FA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<std::shared_ptr<mlcore::LocalizedSearchScope>,long long>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::shared_ptr<mlcore::LocalizedSearchScope>,long long>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  void *v1;

  v1 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v1)
  {
    if (*(_BYTE *)(a1 + 16))
      std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)v1 + 16);
    operator delete(v1);
  }
}

void std::__shared_ptr_emplace<std::vector<mlcore::EntityClass *>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C33D780;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<std::vector<mlcore::EntityClass *>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C33D780;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x20BD27AFCLL);
}

void std::__shared_ptr_emplace<std::vector<mlcore::EntityClass *>>::__on_zero_shared(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(_QWORD *)(a1 + 32) = v2;
    operator delete(v2);
  }
}

uint64_t mlcore::SharedObject<mlcore::LocalizedSearchQuery::SearchWeightContext,int>::_mutex()
{
  unsigned __int8 v0;
  uint64_t v2;

  if ((v0 & 1) == 0
  {
    v2 = operator new();
    *(_QWORD *)v2 = 850045863;
    *(_OWORD *)(v2 + 8) = 0u;
    *(_OWORD *)(v2 + 24) = 0u;
    *(_OWORD *)(v2 + 40) = 0u;
    *(_QWORD *)(v2 + 56) = 0;
    mlcore::SharedObject<mlcore::LocalizedSearchQuery::SearchWeightContext,int>::_mutex(void)::mutex = v2;
  }
  return mlcore::SharedObject<mlcore::LocalizedSearchQuery::SearchWeightContext,int>::_mutex(void)::mutex;
}

void sub_20A8150F0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t std::unordered_map<long long,mediaplatform::SearchMatcher::ReasonResult>::unordered_map(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  _QWORD *v6;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  _QWORD *v10;
  _QWORD *i;
  unint64_t v12;
  _QWORD *v13;
  float v14;
  float v15;
  _BOOL8 v16;
  unint64_t v17;
  unint64_t v18;
  size_t v19;
  uint64_t v20;
  _QWORD *v21;
  unint64_t v22;
  _QWORD v24[2];
  char v25;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  std::__hash_table<std::__hash_value_type<mlcore::ModelProperty<std::string> *,std::string>,std::__unordered_map_hasher<mlcore::ModelProperty<std::string> *,std::__hash_value_type<mlcore::ModelProperty<std::string> *,std::string>,std::hash<mlcore::ModelProperty<std::string> *>,std::equal_to<mlcore::ModelProperty<std::string> *>,true>,std::__unordered_map_equal<mlcore::ModelProperty<std::string> *,std::__hash_value_type<mlcore::ModelProperty<std::string> *,std::string>,std::equal_to<mlcore::ModelProperty<std::string> *>,std::hash<mlcore::ModelProperty<std::string> *>,true>,std::allocator<std::__hash_value_type<mlcore::ModelProperty<std::string> *,std::string>>>::__rehash<true>(a1, *(_QWORD *)(a2 + 8));
  v5 = *(uint64_t **)(a2 + 16);
  if (v5)
  {
    v6 = (_QWORD *)(a1 + 16);
    do
    {
      v7 = v5[2];
      v8 = *(_QWORD *)(a1 + 8);
      if (v8)
      {
        v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
        v9.i16[0] = vaddlv_u8(v9);
        if (v9.u32[0] > 1uLL)
        {
          v2 = v5[2];
          if (v7 >= v8)
            v2 = v7 % v8;
        }
        else
        {
          v2 = (v8 - 1) & v7;
        }
        v10 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v2);
        if (v10)
        {
          for (i = (_QWORD *)*v10; i; i = (_QWORD *)*i)
          {
            v12 = i[1];
            if (v12 == v7)
            {
              if (i[2] == v7)
                goto LABEL_41;
            }
            else
            {
              if (v9.u32[0] > 1uLL)
              {
                if (v12 >= v8)
                  v12 %= v8;
              }
              else
              {
                v12 &= v8 - 1;
              }
              if (v12 != v2)
                break;
            }
          }
        }
      }
      v13 = operator new(0x48uLL);
      v24[0] = v13;
      v24[1] = a1 + 16;
      v25 = 0;
      *v13 = 0;
      v13[1] = v7;
      v13[2] = v5[2];
      *((_DWORD *)v13 + 6) = *((_DWORD *)v5 + 6);
      std::unordered_set<unsigned long>::unordered_set((uint64_t)(v13 + 4), (uint64_t)(v5 + 4));
      v25 = 1;
      v14 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
      v15 = *(float *)(a1 + 32);
      if (!v8 || (float)(v15 * (float)v8) < v14)
      {
        v16 = (v8 & (v8 - 1)) != 0;
        if (v8 < 3)
          v16 = 1;
        v17 = v16 | (2 * v8);
        v18 = vcvtps_u32_f32(v14 / v15);
        if (v17 <= v18)
          v19 = v18;
        else
          v19 = v17;
        std::__hash_table<std::__hash_value_type<mlcore::ModelProperty<std::string> *,std::string>,std::__unordered_map_hasher<mlcore::ModelProperty<std::string> *,std::__hash_value_type<mlcore::ModelProperty<std::string> *,std::string>,std::hash<mlcore::ModelProperty<std::string> *>,std::equal_to<mlcore::ModelProperty<std::string> *>,true>,std::__unordered_map_equal<mlcore::ModelProperty<std::string> *,std::__hash_value_type<mlcore::ModelProperty<std::string> *,std::string>,std::equal_to<mlcore::ModelProperty<std::string> *>,std::hash<mlcore::ModelProperty<std::string> *>,true>,std::allocator<std::__hash_value_type<mlcore::ModelProperty<std::string> *,std::string>>>::__rehash<true>(a1, v19);
        v8 = *(_QWORD *)(a1 + 8);
        if ((v8 & (v8 - 1)) != 0)
        {
          if (v7 >= v8)
            v2 = v7 % v8;
          else
            v2 = v7;
        }
        else
        {
          v2 = (v8 - 1) & v7;
        }
      }
      v20 = *(_QWORD *)a1;
      v21 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v2);
      if (v21)
      {
        *v13 = *v21;
      }
      else
      {
        *v13 = *v6;
        *v6 = v13;
        *(_QWORD *)(v20 + 8 * v2) = v6;
        if (!*v13)
          goto LABEL_40;
        v22 = *(_QWORD *)(*v13 + 8);
        if ((v8 & (v8 - 1)) != 0)
        {
          if (v22 >= v8)
            v22 %= v8;
        }
        else
        {
          v22 &= v8 - 1;
        }
        v21 = (_QWORD *)(*(_QWORD *)a1 + 8 * v22);
      }
      *v21 = v13;
LABEL_40:
      v24[0] = 0;
      ++*(_QWORD *)(a1 + 24);
      std::unique_ptr<std::__hash_node<std::__hash_value_type<long long,mediaplatform::SearchMatcher::ReasonResult>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<long long,mediaplatform::SearchMatcher::ReasonResult>,void *>>>>::reset[abi:ne180100]((uint64_t)v24);
LABEL_41:
      v5 = (uint64_t *)*v5;
    }
    while (v5);
  }
  return a1;
}

void sub_20A815360(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<std::__hash_value_type<long long,mediaplatform::SearchMatcher::ReasonResult>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,mediaplatform::SearchMatcher::ReasonResult>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,mediaplatform::SearchMatcher::ReasonResult>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,mediaplatform::SearchMatcher::ReasonResult>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

uint64_t mlcore::SharedObject<mlcore::LocalizedSearchQuery::SearchWeightContext,int>::_objects()
{
  unsigned __int8 v0;
  uint64_t v2;

  if ((v0 & 1) == 0
  {
    v2 = operator new();
    *(_OWORD *)v2 = 0u;
    *(_OWORD *)(v2 + 16) = 0u;
    *(_DWORD *)(v2 + 32) = 1065353216;
    mlcore::SharedObject<mlcore::LocalizedSearchQuery::SearchWeightContext,int>::_objects(void)::objects = v2;
  }
  return mlcore::SharedObject<mlcore::LocalizedSearchQuery::SearchWeightContext,int>::_objects(void)::objects;
}

void sub_20A815408(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void mlcore::SharedObject<mlcore::LocalizedSearchQuery::SearchWeightContext,int>::create<std::unordered_map<long long,mediaplatform::SearchMatcher::ReasonResult> &,unsigned long>(std::unordered_map<long long,mediaplatform::SearchMatcher::ReasonResult> &,unsigned long &&)::{lambda(mlcore::LocalizedSearchQuery::SearchWeightContext*)#1}::operator()(int *a1, uint64_t a2)
{
  std::mutex *v4;
  _QWORD *v5;
  uint64_t v6;

  v4 = (std::mutex *)mlcore::SharedObject<mlcore::LocalizedSearchQuery::SearchWeightContext,int>::_mutex();
  std::mutex::lock(v4);
  v5 = (_QWORD *)mlcore::SharedObject<mlcore::LocalizedSearchQuery::SearchWeightContext,int>::_objects();
  std::__hash_table<std::__hash_value_type<int,std::weak_ptr<std::unordered_set<long long>>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::weak_ptr<std::unordered_set<long long>>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::weak_ptr<std::unordered_set<long long>>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::weak_ptr<std::unordered_set<long long>>>>>::__erase_unique<int>(v5, *a1);
  if (a2)
  {
    v6 = std::__hash_table<std::__hash_value_type<long long,mediaplatform::SearchMatcher::ReasonResult>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,mediaplatform::SearchMatcher::ReasonResult>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,mediaplatform::SearchMatcher::ReasonResult>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,mediaplatform::SearchMatcher::ReasonResult>>>::~__hash_table(a2);
    MEMORY[0x20BD27AFC](v6, 0x10A0C4090A7D76FLL);
  }
  std::mutex::unlock(v4);
}

void sub_20A815484(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<mlcore::LocalizedSearchQuery::SearchWeightContext *,mlcore::SharedObject<mlcore::LocalizedSearchQuery::SearchWeightContext,int> mlcore::SharedObject<mlcore::LocalizedSearchQuery::SearchWeightContext,int>::create<std::unordered_map<long long,mediaplatform::SearchMatcher::ReasonResult> &,unsigned long>(std::unordered_map<long long,mediaplatform::SearchMatcher::ReasonResult> &,unsigned long &&)::{lambda(mlcore::LocalizedSearchQuery::SearchWeightContext *)#1},std::allocator<mlcore::LocalizedSearchQuery::SearchWeightContext>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x20BD27AFCLL);
}

void std::__shared_ptr_pointer<mlcore::LocalizedSearchQuery::SearchWeightContext *,mlcore::SharedObject<mlcore::LocalizedSearchQuery::SearchWeightContext,int> mlcore::SharedObject<mlcore::LocalizedSearchQuery::SearchWeightContext,int>::create<std::unordered_map<long long,mediaplatform::SearchMatcher::ReasonResult> &,unsigned long>(std::unordered_map<long long,mediaplatform::SearchMatcher::ReasonResult> &,unsigned long &&)::{lambda(mlcore::LocalizedSearchQuery::SearchWeightContext *)#1},std::allocator<mlcore::LocalizedSearchQuery::SearchWeightContext>>::__on_zero_shared(uint64_t a1)
{
  uint64_t v2;
  std::mutex *v3;
  _QWORD *v4;
  uint64_t v5;

  v2 = *(_QWORD *)(a1 + 24);
  v3 = (std::mutex *)mlcore::SharedObject<mlcore::LocalizedSearchQuery::SearchWeightContext,int>::_mutex();
  std::mutex::lock(v3);
  v4 = (_QWORD *)mlcore::SharedObject<mlcore::LocalizedSearchQuery::SearchWeightContext,int>::_objects();
  std::__hash_table<std::__hash_value_type<int,std::weak_ptr<std::unordered_set<long long>>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::weak_ptr<std::unordered_set<long long>>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::weak_ptr<std::unordered_set<long long>>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::weak_ptr<std::unordered_set<long long>>>>>::__erase_unique<int>(v4, *(_DWORD *)(a1 + 32));
  if (v2)
  {
    v5 = std::__hash_table<std::__hash_value_type<long long,mediaplatform::SearchMatcher::ReasonResult>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,mediaplatform::SearchMatcher::ReasonResult>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,mediaplatform::SearchMatcher::ReasonResult>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,mediaplatform::SearchMatcher::ReasonResult>>>::~__hash_table(v2);
    MEMORY[0x20BD27AFC](v5, 0x10A0C4090A7D76FLL);
  }
  std::mutex::unlock(v3);
}

void sub_20A815524(void *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  __clang_call_terminate(a1);
}

uint64_t std::__shared_ptr_pointer<mlcore::LocalizedSearchQuery::SearchWeightContext *,mlcore::SharedObject<mlcore::LocalizedSearchQuery::SearchWeightContext,int> mlcore::SharedObject<mlcore::LocalizedSearchQuery::SearchWeightContext,int>::create<std::unordered_map<long long,mediaplatform::SearchMatcher::ReasonResult> &,unsigned long>(std::unordered_map<long long,mediaplatform::SearchMatcher::ReasonResult> &,unsigned long &&)::{lambda(mlcore::LocalizedSearchQuery::SearchWeightContext *)#1},std::allocator<mlcore::LocalizedSearchQuery::SearchWeightContext>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN6mlcore12SharedObjectINS_20LocalizedSearchQuery19SearchWeightContextEiE6createIJRNSt3__113unordered_mapIxN13mediaplatform13SearchMatcher12ReasonResultENS5_4hashIxEENS5_8equal_toIxEENS5_9allocatorINS5_4pairIKxS9_EEEEEEmEEES3_DpOT_EUlPS2_E_"))
  {
    return a1 + 32;
  }
  else
  {
    return 0;
  }
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<long long,mediaplatform::SearchMatcher::ReasonResult>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<long long,mediaplatform::SearchMatcher::ReasonResult>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  void *v1;

  v1 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v1)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__hash_table<mlcore::ModelPropertyBase *,std::hash<mlcore::ModelPropertyBase *>,std::equal_to<mlcore::ModelPropertyBase *>,std::allocator<mlcore::ModelPropertyBase *>>::~__hash_table((uint64_t)v1 + 32);
    operator delete(v1);
  }
}

uint64_t std::unordered_set<unsigned long>::unordered_set(uint64_t a1, uint64_t a2)
{
  _QWORD *i;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  std::__hash_table<std::__hash_value_type<mlcore::ModelProperty<std::string> *,std::string>,std::__unordered_map_hasher<mlcore::ModelProperty<std::string> *,std::__hash_value_type<mlcore::ModelProperty<std::string> *,std::string>,std::hash<mlcore::ModelProperty<std::string> *>,std::equal_to<mlcore::ModelProperty<std::string> *>,true>,std::__unordered_map_equal<mlcore::ModelProperty<std::string> *,std::__hash_value_type<mlcore::ModelProperty<std::string> *,std::string>,std::equal_to<mlcore::ModelProperty<std::string> *>,std::hash<mlcore::ModelProperty<std::string> *>,true>,std::allocator<std::__hash_value_type<mlcore::ModelProperty<std::string> *,std::string>>>::__rehash<true>(a1, *(_QWORD *)(a2 + 8));
  for (i = *(_QWORD **)(a2 + 16); i; i = (_QWORD *)*i)
    std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__emplace_unique_key_args<unsigned long,unsigned long const&>(a1, i[2], i[2]);
  return a1;
}

void sub_20A81561C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<mlcore::ModelPropertyBase *,std::hash<mlcore::ModelPropertyBase *>,std::equal_to<mlcore::ModelPropertyBase *>,std::allocator<mlcore::ModelPropertyBase *>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

void std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__emplace_unique_key_args<unsigned long,unsigned long const&>(uint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v7;
  uint8x8_t v8;
  _QWORD *v9;
  _QWORD *i;
  unint64_t v11;
  _QWORD *v12;
  float v13;
  float v14;
  _BOOL8 v15;
  unint64_t v16;
  unint64_t v17;
  size_t v18;
  uint64_t v19;
  _QWORD *v20;
  unint64_t v21;

  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = a2;
      if (v7 <= a2)
        v3 = a2 % v7;
    }
    else
    {
      v3 = (v7 - 1) & a2;
    }
    v9 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      for (i = (_QWORD *)*v9; i; i = (_QWORD *)*i)
      {
        v11 = i[1];
        if (v11 == a2)
        {
          if (i[2] == a2)
            return;
        }
        else
        {
          if (v8.u32[0] > 1uLL)
          {
            if (v11 >= v7)
              v11 %= v7;
          }
          else
          {
            v11 &= v7 - 1;
          }
          if (v11 != v3)
            break;
        }
      }
    }
  }
  v12 = operator new(0x18uLL);
  *v12 = 0;
  v12[1] = a2;
  v12[2] = a3;
  v13 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v14 = *(float *)(a1 + 32);
  if (!v7 || (float)(v14 * (float)v7) < v13)
  {
    v15 = 1;
    if (v7 >= 3)
      v15 = (v7 & (v7 - 1)) != 0;
    v16 = v15 | (2 * v7);
    v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17)
      v18 = v17;
    else
      v18 = v16;
    std::__hash_table<std::__hash_value_type<mlcore::ModelProperty<std::string> *,std::string>,std::__unordered_map_hasher<mlcore::ModelProperty<std::string> *,std::__hash_value_type<mlcore::ModelProperty<std::string> *,std::string>,std::hash<mlcore::ModelProperty<std::string> *>,std::equal_to<mlcore::ModelProperty<std::string> *>,true>,std::__unordered_map_equal<mlcore::ModelProperty<std::string> *,std::__hash_value_type<mlcore::ModelProperty<std::string> *,std::string>,std::equal_to<mlcore::ModelProperty<std::string> *>,std::hash<mlcore::ModelProperty<std::string> *>,true>,std::allocator<std::__hash_value_type<mlcore::ModelProperty<std::string> *,std::string>>>::__rehash<true>(a1, v18);
    v7 = *(_QWORD *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= a2)
        v3 = a2 % v7;
      else
        v3 = a2;
    }
    else
    {
      v3 = (v7 - 1) & a2;
    }
  }
  v19 = *(_QWORD *)a1;
  v20 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v20)
  {
    *v12 = *v20;
LABEL_38:
    *v20 = v12;
    goto LABEL_39;
  }
  *v12 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v12;
  *(_QWORD *)(v19 + 8 * v3) = a1 + 16;
  if (*v12)
  {
    v21 = *(_QWORD *)(*v12 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v21 >= v7)
        v21 %= v7;
    }
    else
    {
      v21 &= v7 - 1;
    }
    v20 = (_QWORD *)(*(_QWORD *)a1 + 8 * v21);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
}

void sub_20A815824(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

double mediaplatform::ColumnResultsFunctor::operator()<std::string>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  int v4;
  const unsigned __int8 *v5;
  char *v6;
  double result;
  __int128 v8;
  uint64_t v9;

  v3 = *a1;
  v4 = *((_DWORD *)a1 + 2);
  *((_DWORD *)a1 + 2) = v4 + 1;
  v5 = sqlite3_column_text(*(sqlite3_stmt **)(v3 + 24), v4);
  if (v5)
    v6 = (char *)v5;
  else
    v6 = "";
  std::string::basic_string[abi:ne180100]<0>(&v8, v6);
  if (*(char *)(a2 + 23) < 0)
    operator delete(*(void **)a2);
  result = *(double *)&v8;
  *(_OWORD *)a2 = v8;
  *(_QWORD *)(a2 + 16) = v9;
  return result;
}

void std::__function::__func<mlcore::LocalizedSearchQuery::_performWeightedSearch(std::shared_ptr<mlcore::Transaction>,std::function<void ()(std::shared_ptr<mlcore::QueryResult>)>)::$_0,std::allocator<mlcore::LocalizedSearchQuery::_performWeightedSearch(std::shared_ptr<mlcore::Transaction>,std::function<void ()(std::shared_ptr<mlcore::QueryResult>)>)::$_0>,void ()(long long,std::string,BOOL &)>::~__func()
{
  JUMPOUT(0x20BD27AFCLL);
}

__n128 std::__function::__func<mlcore::LocalizedSearchQuery::_performWeightedSearch(std::shared_ptr<mlcore::Transaction>,std::function<void ()(std::shared_ptr<mlcore::QueryResult>)>)::$_0,std::allocator<mlcore::LocalizedSearchQuery::_performWeightedSearch(std::shared_ptr<mlcore::Transaction>,std::function<void ()(std::shared_ptr<mlcore::QueryResult>)>)::$_0>,void ()(long long,std::string,BOOL &)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_24C33B560;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<mlcore::LocalizedSearchQuery::_performWeightedSearch(std::shared_ptr<mlcore::Transaction>,std::function<void ()(std::shared_ptr<mlcore::QueryResult>)>)::$_0,std::allocator<mlcore::LocalizedSearchQuery::_performWeightedSearch(std::shared_ptr<mlcore::Transaction>,std::function<void ()(std::shared_ptr<mlcore::QueryResult>)>)::$_0>,void ()(long long,std::string,BOOL &)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24C33B560;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<mlcore::LocalizedSearchQuery::_performWeightedSearch(std::shared_ptr<mlcore::Transaction>,std::function<void ()(std::shared_ptr<mlcore::QueryResult>)>)::$_0,std::allocator<mlcore::LocalizedSearchQuery::_performWeightedSearch(std::shared_ptr<mlcore::Transaction>,std::function<void ()(std::shared_ptr<mlcore::QueryResult>)>)::$_0>,void ()(long long,std::string,BOOL &)>::operator()(uint64_t a1, unint64_t *a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v5;
  int v6;
  uint64_t *v7;
  uint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  void **v11;
  char *v12;
  unint64_t v13;
  float v14;
  float v15;
  _BOOL8 v16;
  unint64_t v17;
  unint64_t v18;
  size_t v19;
  _QWORD *v20;
  unint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t i;
  _QWORD *v26;
  unint64_t v27;
  _QWORD *v28;
  _QWORD *inserted;
  _QWORD *v30;
  unint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  void *__p[2];
  uint64_t v35;
  int v36;
  _QWORD v37[4];
  int v38;
  _QWORD v39[2];
  char v40;

  v5 = *a2;
  *(_OWORD *)__p = *(_OWORD *)a3;
  v35 = *(_QWORD *)(a3 + 16);
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)a3 = 0;
  mediaplatform::SearchMatcher::reasons(**(std::string ***)(a1 + 8), (uint64_t)__p, (uint64_t)&v36);
  v6 = v36;
  if (!v36)
    goto LABEL_51;
  v7 = *(uint64_t **)(a1 + 16);
  v8 = *v7;
  v9 = *(_QWORD *)(*v7 + 8);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      v3 = v5;
      if (v5 >= v9)
        v3 = v5 % v9;
    }
    else
    {
      v3 = (v9 - 1) & v5;
    }
    v11 = *(void ***)(*(_QWORD *)v8 + 8 * v3);
    if (v11)
    {
      v12 = (char *)*v11;
      if (*v11)
      {
        do
        {
          v13 = *((_QWORD *)v12 + 1);
          if (v13 == v5)
          {
            if (*((_QWORD *)v12 + 2) == v5)
              goto LABEL_41;
          }
          else
          {
            if (v10.u32[0] > 1uLL)
            {
              if (v13 >= v9)
                v13 %= v9;
            }
            else
            {
              v13 &= v9 - 1;
            }
            if (v13 != v3)
              break;
          }
          v12 = *(char **)v12;
        }
        while (v12);
      }
    }
  }
  v12 = (char *)operator new(0x48uLL);
  v39[0] = v12;
  v39[1] = v8 + 16;
  *(_QWORD *)v12 = 0;
  *((_QWORD *)v12 + 1) = v5;
  *((_QWORD *)v12 + 2) = v5;
  *(_OWORD *)(v12 + 56) = 0u;
  *(_OWORD *)(v12 + 40) = 0u;
  *(_OWORD *)(v12 + 24) = 0u;
  *((_DWORD *)v12 + 16) = 1065353216;
  v40 = 1;
  v14 = (float)(unint64_t)(*(_QWORD *)(v8 + 24) + 1);
  v15 = *(float *)(v8 + 32);
  if (!v9 || (float)(v15 * (float)v9) < v14)
  {
    v16 = 1;
    if (v9 >= 3)
      v16 = (v9 & (v9 - 1)) != 0;
    v17 = v16 | (2 * v9);
    v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18)
      v19 = v18;
    else
      v19 = v17;
    std::__hash_table<std::__hash_value_type<mlcore::ModelProperty<std::string> *,std::string>,std::__unordered_map_hasher<mlcore::ModelProperty<std::string> *,std::__hash_value_type<mlcore::ModelProperty<std::string> *,std::string>,std::hash<mlcore::ModelProperty<std::string> *>,std::equal_to<mlcore::ModelProperty<std::string> *>,true>,std::__unordered_map_equal<mlcore::ModelProperty<std::string> *,std::__hash_value_type<mlcore::ModelProperty<std::string> *,std::string>,std::equal_to<mlcore::ModelProperty<std::string> *>,std::hash<mlcore::ModelProperty<std::string> *>,true>,std::allocator<std::__hash_value_type<mlcore::ModelProperty<std::string> *,std::string>>>::__rehash<true>(v8, v19);
    v9 = *(_QWORD *)(v8 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v5 >= v9)
        v3 = v5 % v9;
      else
        v3 = v5;
    }
    else
    {
      v3 = (v9 - 1) & v5;
    }
  }
  v20 = *(_QWORD **)(*(_QWORD *)v8 + 8 * v3);
  if (v20)
  {
    *(_QWORD *)v12 = *v20;
  }
  else
  {
    *(_QWORD *)v12 = *(_QWORD *)(v8 + 16);
    *(_QWORD *)(v8 + 16) = v12;
    *(_QWORD *)(*(_QWORD *)v8 + 8 * v3) = v8 + 16;
    if (!*(_QWORD *)v12)
      goto LABEL_40;
    v21 = *(_QWORD *)(*(_QWORD *)v12 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v21 >= v9)
        v21 %= v9;
    }
    else
    {
      v21 &= v9 - 1;
    }
    v20 = (_QWORD *)(*(_QWORD *)v8 + 8 * v21);
  }
  *v20 = v12;
LABEL_40:
  v39[0] = 0;
  ++*(_QWORD *)(v8 + 24);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<long long,mediaplatform::SearchMatcher::ReasonResult>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<long long,mediaplatform::SearchMatcher::ReasonResult>,void *>>>>::reset[abi:ne180100]((uint64_t)v39);
  v6 = v36;
LABEL_41:
  *((_DWORD *)v12 + 6) = v6;
  if (v12 + 24 != (char *)&v36)
  {
    v22 = v12 + 32;
    *((_DWORD *)v12 + 16) = v38;
    v23 = (_QWORD *)v37[2];
    v24 = *((_QWORD *)v12 + 5);
    if (!v24)
      goto LABEL_50;
    for (i = 0; i != v24; *(_QWORD *)(*v22 + 8 * i++) = 0)
      ;
    v26 = (_QWORD *)*((_QWORD *)v12 + 6);
    *((_QWORD *)v12 + 6) = 0;
    *((_QWORD *)v12 + 7) = 0;
    if (v26)
    {
      while (v23)
      {
        v27 = v23[2];
        v26[2] = v27;
        v28 = (_QWORD *)*v26;
        v26[1] = v27;
        inserted = std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__node_insert_multi_prepare((uint64_t)v22, v27, v26 + 2);
        std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__node_insert_multi_perform(v22, v26, inserted);
        v23 = (_QWORD *)*v23;
        v26 = v28;
        if (!v28)
          goto LABEL_50;
      }
      do
      {
        v33 = (_QWORD *)*v26;
        operator delete(v26);
        v26 = v33;
      }
      while (v33);
    }
    else
    {
LABEL_50:
      while (v23)
      {
        v30 = operator new(0x18uLL);
        *v30 = 0;
        v31 = v23[2];
        v30[2] = v31;
        v30[1] = v31;
        v32 = std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__node_insert_multi_prepare((uint64_t)v22, v31, v30 + 2);
        std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__node_insert_multi_perform(v22, v30, v32);
        v23 = (_QWORD *)*v23;
      }
    }
  }
LABEL_51:
  std::__hash_table<mlcore::ModelPropertyBase *,std::hash<mlcore::ModelPropertyBase *>,std::equal_to<mlcore::ModelPropertyBase *>,std::allocator<mlcore::ModelPropertyBase *>>::~__hash_table((uint64_t)v37);
  if (SHIBYTE(v35) < 0)
    operator delete(__p[0]);
}

void sub_20A815C88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  std::unique_ptr<std::__hash_node<std::__hash_value_type<long long,mediaplatform::SearchMatcher::ReasonResult>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<long long,mediaplatform::SearchMatcher::ReasonResult>,void *>>>>::reset[abi:ne180100]((uint64_t)&a21);
  std::__hash_table<mlcore::ModelPropertyBase *,std::hash<mlcore::ModelPropertyBase *>,std::equal_to<mlcore::ModelPropertyBase *>,std::allocator<mlcore::ModelPropertyBase *>>::~__hash_table((uint64_t)&a16);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<mlcore::LocalizedSearchQuery::_performWeightedSearch(std::shared_ptr<mlcore::Transaction>,std::function<void ()(std::shared_ptr<mlcore::QueryResult>)>)::$_0,std::allocator<mlcore::LocalizedSearchQuery::_performWeightedSearch(std::shared_ptr<mlcore::Transaction>,std::function<void ()(std::shared_ptr<mlcore::QueryResult>)>)::$_0>,void ()(long long,std::string,BOOL &)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN6mlcore20LocalizedSearchQuery22_performWeightedSearchENSt3__110shared_ptrINS_11TransactionEEENS1_8functionIFvNS2_INS_11QueryResultEEEEEEE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<mlcore::LocalizedSearchQuery::_performWeightedSearch(std::shared_ptr<mlcore::Transaction>,std::function<void ()(std::shared_ptr<mlcore::QueryResult>)>)::$_0,std::allocator<mlcore::LocalizedSearchQuery::_performWeightedSearch(std::shared_ptr<mlcore::Transaction>,std::function<void ()(std::shared_ptr<mlcore::QueryResult>)>)::$_0>,void ()(long long,std::string,BOOL &)>::target_type()
{
}

void std::__shared_ptr_emplace<mediaplatform::SearchMatcher>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C33B9C0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<mediaplatform::SearchMatcher>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C33B9C0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x20BD27AFCLL);
}

uint64_t std::__shared_ptr_emplace<mediaplatform::SearchMatcher>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

_QWORD *mlcore::LocalizedSearchScope::LocalizedSearchScope(_QWORD *a1, uint64_t a2, _QWORD *a3, uint64_t a4)
{
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;

  *a1 = a2;
  v5 = a3[1];
  a1[1] = *a3;
  a1[2] = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  a1[3] = 0;
  a1[4] = 0;
  a1[5] = 0;
  std::vector<mlcore::ModelPropertyBase *>::__init_with_size[abi:ne180100]<mlcore::ModelPropertyBase **,mlcore::ModelPropertyBase **>(a1 + 3, *(const void **)a4, *(_QWORD *)(a4 + 8), (uint64_t)(*(_QWORD *)(a4 + 8) - *(_QWORD *)a4) >> 3);
  a1[6] = 0;
  a1[7] = 0;
  a1[8] = 0;
  return a1;
}

void sub_20A815E10(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t mlcore::LocalizedSearchScope::LocalizedSearchScope(uint64_t a1, _QWORD **a2)
{
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  std::vector<std::shared_ptr<mlcore::LocalizedSearchScope>>::__init_with_size[abi:ne180100]<std::shared_ptr<mlcore::LocalizedSearchScope>*,std::shared_ptr<mlcore::LocalizedSearchScope>*>((char *)(a1 + 48), *a2, a2[1], ((char *)a2[1] - (char *)*a2) >> 4);
  return a1;
}

void sub_20A815E7C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v4;

  v4 = *(void **)(v2 + 24);
  if (v4)
  {
    *(_QWORD *)(v2 + 32) = v4;
    operator delete(v4);
  }
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t mlcore::LocalizedSearchScope::entityClass(mlcore::LocalizedSearchScope *this)
{
  return *(_QWORD *)this;
}

uint64_t mlcore::LocalizedSearchScope::predicate@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(this + 16);
  *a2 = *(_QWORD *)(this + 8);
  a2[1] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return this;
}

uint64_t mlcore::LocalizedSearchScope::properties(mlcore::LocalizedSearchScope *this)
{
  return (uint64_t)this + 24;
}

BOOL mlcore::LocalizedSearchScope::isAggregateScope(mlcore::LocalizedSearchScope *this)
{
  return *((_QWORD *)this + 7) != *((_QWORD *)this + 6);
}

uint64_t mlcore::LocalizedSearchScope::scopes(mlcore::LocalizedSearchScope *this)
{
  return (uint64_t)this + 48;
}

BOOL mlcore::LocalizedSearchScope::operator==(_QWORD *a1, _QWORD *a2)
{
  char *v2;
  char *v3;
  _QWORD *v4;
  _BOOL8 v5;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  const void *v15;
  size_t v16;
  const void *v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;

  v3 = (char *)a2[6];
  v2 = (char *)a2[7];
  v4 = (_QWORD *)a1[6];
  if (v2 - v3 != a1[7] - (_QWORD)v4)
    return 0;
  while (v3 != v2)
  {
    if (*(_QWORD *)v3 != *v4)
      return 0;
    v3 += 16;
    v4 += 2;
  }
  if (*a2 != *a1)
    return 0;
  v7 = a2[1];
  v8 = (std::__shared_weak_count *)a2[2];
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  v11 = a1[1];
  v12 = (std::__shared_weak_count *)a1[2];
  if (v12)
  {
    v13 = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  v5 = v7 == v11
    && (v15 = (const void *)a2[3], v16 = a2[4] - (_QWORD)v15, v17 = (const void *)a1[3], v16 == a1[4] - (_QWORD)v17)
    && memcmp(v15, v17, v16) == 0;
  if (v12)
  {
    v18 = (unint64_t *)&v12->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (v8)
  {
    v20 = (unint64_t *)&v8->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  return v5;
}

uint64_t mlcore::LocalizedSearchQuery::LocalizedSearchQuery(uint64_t a1, __int128 *a2)
{
  std::string *v3;
  __int128 v4;

  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)a1 = off_24C339E70;
  *(_QWORD *)(a1 + 8) = 0;
  v3 = (std::string *)(a1 + 32);
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    v3->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = v4;
  }
  *(_BYTE *)(a1 + 88) = 0;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  return a1;
}

void sub_20A8160A8(_Unwind_Exception *a1)
{
  _QWORD *v1;

  *v1 = &off_24C33A798;
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)(v1 + 2));
  _Unwind_Resume(a1);
}

uint64_t mlcore::LocalizedSearchQuery::scopes(mlcore::LocalizedSearchQuery *this)
{
  return (uint64_t)this + 56;
}

_QWORD *mlcore::LocalizedSearchQuery::setScopes(_QWORD *result, uint64_t **a2)
{
  void **v2;
  _QWORD *v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v2 = (void **)(result + 7);
  if (result + 7 != a2)
  {
    v3 = result;
    v5 = *a2;
    v4 = a2[1];
    v6 = (char *)v4 - (char *)*a2;
    v7 = v6 >> 4;
    v8 = result[9];
    v9 = (_QWORD *)result[7];
    if (v6 >> 4 > (unint64_t)((v8 - (uint64_t)v9) >> 4))
    {
      if (v9)
      {
        v10 = result[8];
        v11 = v9;
        if ((_QWORD *)v10 != v9)
        {
          do
            v10 = std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100](v10 - 16);
          while ((_QWORD *)v10 != v9);
          v11 = *v2;
        }
        v3[8] = v9;
        operator delete(v11);
        v8 = 0;
        *v2 = 0;
        v2[1] = 0;
        v2[2] = 0;
      }
      if (v6 < 0)
        std::vector<std::string>::__throw_length_error[abi:ne180100]();
      v12 = v8 >> 3;
      if (v8 >> 3 <= v7)
        v12 = v6 >> 4;
      if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0)
        v13 = 0xFFFFFFFFFFFFFFFLL;
      else
        v13 = v12;
      result = std::vector<std::shared_ptr<mlcore::Predicate>>::__vallocate[abi:ne180100](v2, v13);
      v14 = (uint64_t *)v3[8];
      while (v5 != v4)
      {
        v15 = v5[1];
        *v14 = *v5;
        v14[1] = v15;
        if (v15)
        {
          v16 = (unint64_t *)(v15 + 8);
          do
            v17 = __ldxr(v16);
          while (__stxr(v17 + 1, v16));
        }
        v5 += 2;
        v14 += 2;
      }
LABEL_30:
      v3[8] = v14;
      return result;
    }
    result = (_QWORD *)result[8];
    v18 = ((char *)result - (char *)v9) >> 4;
    if (v18 < v7)
    {
      v19 = &v5[2 * v18];
      if (result != v9)
      {
        do
        {
          v20 = *v5;
          v21 = v5[1];
          v5 += 2;
          result = std::shared_ptr<mlcore::Predicate>::operator=[abi:ne180100](v9, v20, v21);
          v9 += 2;
        }
        while (v5 != v19);
        v9 = (_QWORD *)v3[8];
      }
      v14 = v9;
      if (v19 != v4)
      {
        v14 = v9;
        do
        {
          v22 = v19[1];
          *v14 = *v19;
          v14[1] = v22;
          if (v22)
          {
            v23 = (unint64_t *)(v22 + 8);
            do
              v24 = __ldxr(v23);
            while (__stxr(v24 + 1, v23));
          }
          v19 += 2;
          v14 += 2;
        }
        while (v19 != v4);
      }
      goto LABEL_30;
    }
    if (v5 != v4)
    {
      do
      {
        v25 = *v5;
        v26 = v5[1];
        v5 += 2;
        std::shared_ptr<mlcore::Predicate>::operator=[abi:ne180100](v9, v25, v26);
        v9 += 2;
      }
      while (v5 != v4);
      result = (_QWORD *)v3[8];
    }
    while (result != v9)
      result = (_QWORD *)std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)(result - 2));
    v3[8] = v9;
  }
  return result;
}

uint64_t mlcore::LocalizedSearchQuery::setPerScopeResultLimit(uint64_t this, uint64_t a2)
{
  *(_QWORD *)(this + 80) = a2;
  return this;
}

uint64_t mlcore::LocalizedSearchQuery::cancel(uint64_t this)
{
  atomic_store(1u, (unsigned __int8 *)(this + 88));
  return this;
}

uint64_t mlcore::LocalizedSearchQuery::SearchWeightContext::SearchWeightContext(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;

  result = std::unordered_map<long long,mediaplatform::SearchMatcher::ReasonResult>::unordered_map(a1, a2);
  *(_QWORD *)(result + 40) = a3;
  return result;
}

{
  uint64_t result;

  result = std::unordered_map<long long,mediaplatform::SearchMatcher::ReasonResult>::unordered_map(a1, a2);
  *(_QWORD *)(result + 40) = a3;
  return result;
}

void mlcore::LocalizedSearchQueryResult::resultForSearchScope(_QWORD *a1@<X0>, unint64_t *a2@<X1>, _QWORD *a3@<X8>)
{
  _QWORD *v5;
  _QWORD *v6;
  int8x8_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  unint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t *v21;
  uint64_t *v22;
  std::__shared_weak_count *v23;
  uint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  uint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  uint64_t v37;
  unint64_t *p_shared_owners;
  unint64_t v39;
  unint64_t *v40;
  unint64_t v41;
  void *v42;
  void *v43;
  uint64_t v44;
  void *__p;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  std::__shared_weak_count *v49;
  uint64_t v50;
  std::__shared_weak_count *v51;

  v6 = (_QWORD *)a1[25];
  v5 = (_QWORD *)a1[26];
  if (v6 != v5)
  {
    while (*v6 != *a2)
    {
      v6 += 2;
      if (v6 == v5)
      {
        v6 = (_QWORD *)a1[26];
        break;
      }
    }
  }
  if (v6 == v5)
    __assert_rtn("resultForSearchScope", "LocalizedSearchQuery.cpp", 440, "validSearchScopeIter != _searchScopes.end()");
  v7 = (int8x8_t)a1[21];
  if (!*(_QWORD *)&v7)
    goto LABEL_22;
  v8 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ HIDWORD(*a2));
  v9 = 0x9DDFEA08EB382D69 * (HIDWORD(*a2) ^ (v8 >> 47) ^ v8);
  v10 = 0x9DDFEA08EB382D69 * (v9 ^ (v9 >> 47));
  v11 = (uint8x8_t)vcnt_s8(v7);
  v11.i16[0] = vaddlv_u8(v11);
  if (v11.u32[0] > 1uLL)
  {
    v12 = v10;
    if (v10 >= *(_QWORD *)&v7)
      v12 = v10 % *(_QWORD *)&v7;
  }
  else
  {
    v12 = v10 & (*(_QWORD *)&v7 - 1);
  }
  v13 = *(_QWORD **)(a1[20] + 8 * v12);
  if (!v13 || (v14 = (_QWORD *)*v13) == 0)
  {
LABEL_22:
    *a3 = 0;
    a3[1] = 0;
    return;
  }
  while (1)
  {
    v15 = v14[1];
    if (v15 == v10)
      break;
    if (v11.u32[0] > 1uLL)
    {
      if (v15 >= *(_QWORD *)&v7)
        v15 %= *(_QWORD *)&v7;
    }
    else
    {
      v15 &= *(_QWORD *)&v7 - 1;
    }
    if (v15 != v12)
      goto LABEL_22;
LABEL_21:
    v14 = (_QWORD *)*v14;
    if (!v14)
      goto LABEL_22;
  }
  if (v14[2] != *a2)
    goto LABEL_21;
  *a3 = 0;
  a3[1] = 0;
  v16 = v14[3];
  v17 = v14[4];
  if (v17)
  {
    v18 = (unint64_t *)(v17 + 8);
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
  }
  *a3 = v16;
  a3[1] = v17;
  v20 = *a2;
  v22 = *(uint64_t **)(*a2 + 48);
  v21 = *(uint64_t **)(*a2 + 56);
  if (v21 == v22)
  {
    v37 = *(_QWORD *)(v16 + 256);
    v36 = *(std::__shared_weak_count **)(v16 + 264);
    v50 = v37;
    v51 = v36;
    if (v36)
    {
      p_shared_owners = (unint64_t *)&v36->__shared_owners_;
      do
        v39 = __ldxr(p_shared_owners);
      while (__stxr(v39 + 1, p_shared_owners));
      v20 = *a2;
    }
    v42 = 0;
    v43 = 0;
    v44 = 0;
    std::vector<mlcore::ModelPropertyBase *>::__init_with_size[abi:ne180100]<mlcore::ModelPropertyBase **,mlcore::ModelPropertyBase **>(&v42, *(const void **)(v20 + 24), *(_QWORD *)(v20 + 32), (uint64_t)(*(_QWORD *)(v20 + 32) - *(_QWORD *)(v20 + 24)) >> 3);
    (*(void (**)(uint64_t, void **, _QWORD))(*(_QWORD *)v37 + 16))(v37, &v42, *(_QWORD *)*a2);
    if (v42)
    {
      v43 = v42;
      operator delete(v42);
    }
    if (v36)
    {
      v40 = (unint64_t *)&v36->__shared_owners_;
      do
        v41 = __ldaxr(v40);
      while (__stlxr(v41 - 1, v40));
      if (!v41)
      {
        ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
        std::__shared_weak_count::__release_weak(v36);
      }
    }
  }
  else
  {
    do
    {
      v24 = *v22;
      v23 = (std::__shared_weak_count *)v22[1];
      v50 = *v22;
      v51 = v23;
      if (v23)
      {
        v25 = (unint64_t *)&v23->__shared_owners_;
        do
          v26 = __ldxr(v25);
        while (__stxr(v26 + 1, v25));
      }
      v28 = *(_QWORD *)(*a3 + 256);
      v27 = *(std::__shared_weak_count **)(*a3 + 264);
      v48 = v28;
      v49 = v27;
      if (v27)
      {
        v29 = (unint64_t *)&v27->__shared_owners_;
        do
          v30 = __ldxr(v29);
        while (__stxr(v30 + 1, v29));
      }
      __p = 0;
      v46 = 0;
      v47 = 0;
      std::vector<mlcore::ModelPropertyBase *>::__init_with_size[abi:ne180100]<mlcore::ModelPropertyBase **,mlcore::ModelPropertyBase **>(&__p, *(const void **)(v24 + 24), *(_QWORD *)(v24 + 32), (uint64_t)(*(_QWORD *)(v24 + 32) - *(_QWORD *)(v24 + 24)) >> 3);
      (*(void (**)(uint64_t, void **, _QWORD))(*(_QWORD *)v28 + 16))(v28, &__p, *(_QWORD *)v24);
      if (__p)
      {
        v46 = __p;
        operator delete(__p);
      }
      if (v27)
      {
        v31 = (unint64_t *)&v27->__shared_owners_;
        do
          v32 = __ldaxr(v31);
        while (__stlxr(v32 - 1, v31));
        if (!v32)
        {
          ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
          std::__shared_weak_count::__release_weak(v27);
        }
      }
      v33 = v51;
      if (v51)
      {
        v34 = (unint64_t *)&v51->__shared_owners_;
        do
          v35 = __ldaxr(v34);
        while (__stlxr(v35 - 1, v34));
        if (!v35)
        {
          ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
          std::__shared_weak_count::__release_weak(v33);
        }
      }
      v22 += 2;
    }
    while (v22 != v21);
  }
}

void sub_20A816654(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, char a17)
{
  uint64_t v17;

  if (__p)
    operator delete(__p);
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100](v17);
  _Unwind_Resume(a1);
}

void mediaplatform::DatabaseStatement::~DatabaseStatement(mediaplatform::DatabaseStatement *this)
{
  mediaplatform::DatabaseStatement::~DatabaseStatement(this);
  JUMPOUT(0x20BD27AFCLL);
}

{
  sqlite3_stmt *v2;
  std::__shared_weak_count *v3;

  *(_QWORD *)this = &off_24C330F10;
  v2 = (sqlite3_stmt *)*((_QWORD *)this + 3);
  if (v2)
  {
    sqlite3_finalize(v2);
    *((_QWORD *)this + 3) = 0;
  }
  if (*((char *)this + 55) < 0)
    operator delete(*((void **)this + 4));
  v3 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
}

void mediaplatform::DatabaseStatement::descriptionAttributes(mediaplatform::DatabaseStatement *this@<X0>, std::string **a2@<X8>)
{
  std::string *v3;
  std::string __p;
  __int128 v5;

  *(_QWORD *)&v5 = *MEMORY[0x24BDAC8D0];
  mediaplatform::FormatString<std::string>(&__p, (std::string *)"sql='{0}'", (uint64_t)this + 32);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v3 = (std::string *)operator new(0x18uLL);
  *a2 = v3;
  a2[1] = v3;
  a2[2] = v3 + 1;
  a2[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)(a2 + 2), (__int128 *)&__p, &v5, v3);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_20A816798(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v18 = v17;
  *(_QWORD *)(v16 + 8) = v18;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a9);
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void mediaplatform::DatabaseBindParameter::~DatabaseBindParameter(mediaplatform::DatabaseBindParameter *this)
{
  *(_QWORD *)this = &off_24C3311D8;
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
}

{
  *(_QWORD *)this = &off_24C3311D8;
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
  JUMPOUT(0x20BD27AFCLL);
}

_QWORD *mediaplatform::DatabaseBindParameter::sql@<X0>(uint64_t a1@<X0>, uint64_t (***a2)(_QWORD, uint64_t)@<X1>, _QWORD *a3@<X8>)
{
  if (a2)
    return (_QWORD *)(**a2)(a2, a1);
  else
    return std::string::basic_string[abi:ne180100]<0>(a3, "?");
}

void mediaplatform::DatabaseParameterList::~DatabaseParameterList(mediaplatform::DatabaseParameterList *this)
{
  void **v1;

  *(_QWORD *)this = &off_24C331228;
  v1 = (void **)((char *)this + 8);
  std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__destroy_vector::operator()[abi:ne180100](&v1);
}

{
  void **v1;

  *(_QWORD *)this = &off_24C331228;
  v1 = (void **)((char *)this + 8);
  std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__destroy_vector::operator()[abi:ne180100](&v1);
  JUMPOUT(0x20BD27AFCLL);
}

uint64_t mediaplatform::DatabaseParameterList::description(mediaplatform::DatabaseParameterList *this)
{
  uint64_t *v2;
  uint64_t *v3;
  char v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  void *p_p;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  void *__p;
  uint64_t v15;
  unsigned __int8 v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  _QWORD v19[11];
  char v20;
  uint64_t v21;

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v19);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"(", 1);
  v2 = (uint64_t *)*((_QWORD *)this + 1);
  v3 = (uint64_t *)*((_QWORD *)this + 2);
  if (v2 != v3)
  {
    v4 = 1;
    do
    {
      v6 = *v2;
      v5 = (std::__shared_weak_count *)v2[1];
      v17 = *v2;
      v18 = v5;
      if (v5)
      {
        p_shared_owners = (unint64_t *)&v5->__shared_owners_;
        do
          v8 = __ldxr(p_shared_owners);
        while (__stxr(v8 + 1, p_shared_owners));
      }
      if ((v4 & 1) != 0)
      {
        (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)v6 + 40))(&__p, v6);
        if ((v16 & 0x80u) == 0)
          p_p = &__p;
        else
          p_p = __p;
        if ((v16 & 0x80u) == 0)
          v10 = v16;
        else
          v10 = v15;
      }
      else
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)", ", 2);
        (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)v6 + 40))(&__p, v6);
        if ((v16 & 0x80u) == 0)
          p_p = &__p;
        else
          p_p = __p;
        if ((v16 & 0x80u) == 0)
          v10 = v16;
        else
          v10 = v15;
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)p_p, v10);
      if ((char)v16 < 0)
      {
        operator delete(__p);
        if (v5)
        {
LABEL_23:
          v11 = (unint64_t *)&v5->__shared_owners_;
          do
            v12 = __ldaxr(v11);
          while (__stlxr(v12 - 1, v11));
          if (!v12)
          {
            ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
            std::__shared_weak_count::__release_weak(v5);
          }
        }
      }
      else if (v5)
      {
        goto LABEL_23;
      }
      v4 = 0;
      v2 += 2;
    }
    while (v2 != v3);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)")", 1);
  std::stringbuf::str();
  v19[0] = *MEMORY[0x24BEDB800];
  *(_QWORD *)((char *)v19 + *(_QWORD *)(v19[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  v19[1] = MEMORY[0x24BEDB848] + 16;
  if (v20 < 0)
    operator delete((void *)v19[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x20BD27A84](&v21);
}

void sub_20A816B5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, char a17)
{
  std::ostringstream::~ostringstream((uint64_t)&a17);
  _Unwind_Resume(a1);
}

uint64_t mediaplatform::DatabaseStatement::DatabaseStatement(uint64_t a1, sqlite3 *db, uint64_t a3)
{
  __int128 v6;
  const char *v7;
  int v8;
  int v10;
  mediaplatform::PlatformErrorCondition *exception;
  const char *v12;
  std::string __p;
  _BYTE v14[40];
  std::string v15;
  int v16;
  int v17;
  sqlite3_stmt *ppStmt;

  *(_QWORD *)a1 = &off_24C330F10;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  if (*(char *)(a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 32), *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
  }
  else
  {
    v6 = *(_OWORD *)a3;
    *(_QWORD *)(a1 + 48) = *(_QWORD *)(a3 + 16);
    *(_OWORD *)(a1 + 32) = v6;
  }
  *(_DWORD *)(a1 + 56) = -1;
  if (!db)
    __assert_rtn("DatabaseStatement", "DatabaseStatement.cpp", 25, "connectionHandle");
  ppStmt = 0;
  if (*(char *)(a3 + 23) >= 0)
    v7 = (const char *)a3;
  else
    v7 = *(const char **)a3;
  v8 = sqlite3_prepare_v2(db, v7, -1, &ppStmt, 0);
  *(_QWORD *)(a1 + 24) = ppStmt;
  if (v8)
  {
    v17 = sqlite3_errcode(db);
    if ((v17 - 1) > 0x19)
      v10 = 36;
    else
      v10 = *(_DWORD *)&asc_20A91932C[4 * (v17 - 1)];
    v16 = v10;
    std::string::basic_string[abi:ne180100]<0>(&__p, "");
    mediaplatform::PlatformErrorCondition::PlatformErrorCondition((uint64_t)v14, &v16, (__int128 *)&__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    v12 = sqlite3_errmsg(db);
    mediaplatform::FormatString<int,char const*,std::string>(&__p, (uint64_t)&v17, (uint64_t)&v12, a3);
    if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v15.__r_.__value_.__l.__data_);
    v15 = __p;
    exception = (mediaplatform::PlatformErrorCondition *)__cxa_allocate_exception(0x40uLL);
    mediaplatform::PlatformErrorCondition::PlatformErrorCondition(exception, (const mediaplatform::PlatformErrorCondition *)v14);
  }
  return a1;
}

void sub_20A816D58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, std::exception a16)
{
  uint64_t v16;
  void **v17;
  void *v18;
  std::__shared_weak_count *v20;

  __cxa_free_exception(v18);
  mediaplatform::PlatformErrorCondition::~PlatformErrorCondition(&a16);
  if (*(char *)(v16 + 55) < 0)
    operator delete(*v17);
  v20 = *(std::__shared_weak_count **)(v16 + 16);
  if (v20)
    std::__shared_weak_count::__release_weak(v20);
  _Unwind_Resume(a1);
}

void mediaplatform::FormatString<int,char const*,std::string>(std::string *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD v4[3];

  v4[0] = a4;
  v4[1] = a3;
  v4[2] = a2;
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  a1->__r_.__value_.__r.__words[0] = 0;
  mediaplatform::FormatImplementation<int,char const*,std::string>((std::string *)"SQLite Error {0}: {1} | {2}", a1, 0, (uint64_t)v4);
}

void sub_20A816E1C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void mediaplatform::FormatImplementation<int,char const*,std::string>(std::string *a1, std::string *a2, std::string::size_type a3, uint64_t a4)
{
  char v8;
  char *v9;
  std::string::size_type i;
  int v11;
  char *v12;
  uint64_t v13;
  unint64_t v14;
  const char *v15;
  const char *v16;
  const char *v17;
  std::string *v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char *v25;
  int v26;
  uint64_t v27;
  char *v28;
  char *v29;
  unsigned __int8 *v30;
  int v31;
  std::runtime_error *exception;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  _BYTE v39[56];
  uint64_t v40;
  uint64_t v41;

  v8 = 0;
  v41 = *MEMORY[0x24BDAC8D0];
  v9 = (char *)a1;
  for (i = a3; ; ++i)
  {
    v37 = v9;
    if (*v9 == 123)
      break;
    if (!*v9)
    {
      std::string::resize(a2, i, 0);
      if (i != a3)
        mediaplatform::CopyFormatSectionToResult(a1, a2, a3, i - a3, v8 & 1);
      return;
    }
LABEL_7:
    ++v9;
  }
  v11 = v9[1];
  if (v11 == 123)
  {
    v37 = v9 + 1;
    v8 = 1;
    ++v9;
    goto LABEL_7;
  }
  if (v11 == 42)
  {
    v37 = v9 + 2;
    v26 = v9[2];
    if ((v26 - 48) > 9)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Invalid format string- missing numeric value.");
    }
    else
    {
      v27 = 0;
      v28 = v9 + 3;
      do
      {
        v29 = v28;
        v37 = v28;
        v27 = (v26 - 48) + 10 * v27;
        ++v28;
        v31 = *v29;
        v30 = (unsigned __int8 *)(v29 - 1);
        v26 = v31;
      }
      while ((v31 - 58) >= 0xFFFFFFF6);
      v37 = (char *)(v30 + 2);
      if (*(v28 - 1) == 125)
        mediaplatform::FormatterParameters<0ul,int,char const*,std::string>::formatOptionsAtIndex<int,char const*,std::string>(v27);
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Invalid format options reference: Must be of form {*<index>} but no trailing '}' found.");
    }
    __cxa_throw(exception, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
  }
  mediaplatform::FormatOptions::FormatOptions((uint64_t)&v33, (const char **)&v37);
  v12 = v37;
  if (*((_QWORD *)&v33 + 1))
  {
    if (*((_QWORD *)&v33 + 1) == 1)
    {
      v15 = **(const char ***)(a4 + 8);
      v38 = (uint64_t)v15;
      if (v15)
        v15 = (const char *)strlen(v15);
      *(_QWORD *)v39 = v15;
      *(_OWORD *)&v39[8] = v33;
      *(_OWORD *)&v39[24] = v34;
      *(_OWORD *)&v39[40] = v35;
      v40 = v36;
      v16 = (const char *)*((_QWORD *)&v34 + 1);
      if (*((_QWORD *)&v34 + 1) <= (unint64_t)v15)
        v16 = v15;
      if ((_BYTE)v34)
        v17 = v16;
      else
        v17 = v15;
      mediaplatform::FormatImplementation<int,char const*,std::string>(v37, a2, &v17[i], a4);
      if ((a2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v18 = a2;
      else
        v18 = (std::string *)a2->__r_.__value_.__r.__words[0];
      mediaplatform::FormatOptions::justifyNativeValueOfLength<std::__wrap_iter<char *>,char const*>(&v33, (_BYTE *)v18 + i, (uint64_t)&v38);
    }
    else
    {
      if (*((_QWORD *)&v33 + 1) != 2)
        mediaplatform::FormatterParameters<3ul>::formatParameterAtIndex<mediaplatform::FormatterParameters<0ul,int,char const*,std::string>>();
      v13 = *(_QWORD *)a4;
      v38 = v13;
      *(_OWORD *)v39 = v33;
      *(_OWORD *)&v39[16] = v34;
      *(_OWORD *)&v39[32] = v35;
      *(_QWORD *)&v39[48] = v36;
      if (*(char *)(v13 + 23) < 0)
        v14 = *(_QWORD *)(v13 + 8);
      else
        v14 = *(unsigned __int8 *)(v13 + 23);
      v20 = *((_QWORD *)&v34 + 1);
      if (*((_QWORD *)&v34 + 1) <= v14)
        v20 = v14;
      if ((_BYTE)v34)
        v14 = v20;
      mediaplatform::FormatImplementation<int,char const*,std::string>(v37, a2, v14 + i, a4);
      if ((a2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v21 = (char *)a2;
      else
        v21 = (char *)a2->__r_.__value_.__r.__words[0];
      mediaplatform::FormatOptions::justifyNativeValueOfLength<std::__wrap_iter<char *>,std::string>(&v33, &v21[i], (uint64_t)&v38);
    }
  }
  else
  {
    mediaplatform::TypeFormatter<int,void>::TypeFormatter((uint64_t)&v38, **(_DWORD **)(a4 + 16), (uint64_t)&v33);
    if (v39[40] && !*(_BYTE *)(v38 + 48))
      v19 = 32;
    else
      v19 = 33;
    v22 = v19 - *(_QWORD *)&v39[32];
    if (*(_BYTE *)(v38 + 50) && v22 <= *(_QWORD *)(v38 + 24))
      v22 = *(_QWORD *)(v38 + 24);
    v23 = *((_QWORD *)&v34 + 1);
    if (*((_QWORD *)&v34 + 1) <= v22)
      v23 = v22;
    if ((_BYTE)v34)
      v24 = v23;
    else
      v24 = v22;
    mediaplatform::FormatImplementation<int,char const*,std::string>(v12, a2, v24 + i, a4);
    if ((a2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v25 = (char *)a2;
    else
      v25 = (char *)a2->__r_.__value_.__r.__words[0];
    mediaplatform::FormatOptions::justifyNativeValueOfLength<std::__wrap_iter<char *>,int>((char *)&v33, &v25[i], &v38);
  }
  if (i != a3)
    mediaplatform::CopyFormatSectionToResult(a1, a2, a3, i - a3, v8 & 1);
}

void sub_20A8171F8(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void mediaplatform::FormatterParameters<0ul,int,char const*,std::string>::formatOptionsAtIndex<int,char const*,std::string>(uint64_t a1)
{
  std::runtime_error *exception;

  if (!a1)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Requested parameter is not an FormatOptions instance.");
    __cxa_throw(exception, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
  }
  mediaplatform::FormatterParameters<1ul,char const*,std::string>::formatOptionsAtIndex<int,char const*,std::string>(a1);
}

void sub_20A81725C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void mediaplatform::FormatterParameters<3ul>::formatParameterAtIndex<mediaplatform::FormatterParameters<0ul,int,char const*,std::string>>()
{
  std::runtime_error *exception;

  exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
  std::runtime_error::runtime_error(exception, "Parameter index out of bounds.");
  __cxa_throw(exception, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
}

void sub_20A8172AC(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void mediaplatform::FormatterParameters<1ul,char const*,std::string>::formatOptionsAtIndex<int,char const*,std::string>(uint64_t a1)
{
  std::runtime_error *exception;

  if (a1 == 1)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Requested parameter is not an FormatOptions instance.");
    __cxa_throw(exception, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
  }
  mediaplatform::FormatterParameters<2ul,std::string>::formatOptionsAtIndex<int,char const*,std::string>(a1);
}

void sub_20A817308(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void mediaplatform::FormatterParameters<2ul,std::string>::formatOptionsAtIndex<int,char const*,std::string>(uint64_t a1)
{
  std::runtime_error *exception;

  if (a1 == 2)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Requested parameter is not an FormatOptions instance.");
    __cxa_throw(exception, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
  }
  mediaplatform::FormatterParameters<3ul>::formatOptionsAtIndex<int,char const*,std::string>();
}

void sub_20A817364(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void mediaplatform::FormatterParameters<3ul>::formatOptionsAtIndex<int,char const*,std::string>()
{
  std::runtime_error *exception;

  exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
  std::runtime_error::runtime_error(exception, "Parameter index out of bounds.");
  __cxa_throw(exception, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
}

void sub_20A8173B4(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

_QWORD *mediaplatform::DatabaseStatement::DatabaseStatement(_QWORD *a1, uint64_t a2)
{
  std::string *v4;
  __int128 v5;

  a1[1] = 0;
  a1[2] = 0;
  *a1 = &off_24C330F10;
  a1[3] = *(_QWORD *)(a2 + 24);
  v4 = (std::string *)(a1 + 4);
  if (*(char *)(a2 + 55) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)(a2 + 32), *(_QWORD *)(a2 + 40));
  }
  else
  {
    v5 = *(_OWORD *)(a2 + 32);
    v4->__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 48);
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v5;
  }
  *(_QWORD *)(a2 + 24) = 0;
  return a1;
}

void sub_20A817438(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  std::__shared_weak_count *v3;

  v3 = *(std::__shared_weak_count **)(v1 + 16);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  _Unwind_Resume(exception_object);
}

uint64_t mediaplatform::DatabaseStatement::step(sqlite3_stmt **this)
{
  int v2;
  uint64_t result;

  v2 = sqlite3_step(this[3]);
  result = mediaplatform::DatabaseStatement::_checkSQLiteResult((uint64_t)this, v2);
  *((_DWORD *)this + 14) = v2;
  return result;
}

uint64_t mediaplatform::DatabaseStatement::_checkSQLiteResult(uint64_t this, int a2)
{
  sqlite3 *v4;
  char *v5;
  int v6;
  void *exception;
  __int128 v8;
  int v9;

  if ((a2 - 100) >= 2 && a2 != 0)
  {
    v4 = sqlite3_db_handle(*(sqlite3_stmt **)(this + 24));
    v5 = (char *)sqlite3_errmsg(v4);
    if ((a2 - 1) > 0x19)
      v6 = 36;
    else
      v6 = *(_DWORD *)&asc_20A91932C[4 * (a2 - 1)];
    v9 = v6;
    exception = __cxa_allocate_exception(0x40uLL);
    std::string::basic_string[abi:ne180100]<0>(&v8, v5);
    mediaplatform::PlatformErrorCondition::PlatformErrorCondition((uint64_t)exception, &v9, &v8);
  }
  return this;
}

void sub_20A817548(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  void *v14;
  int v15;

  if (a14 < 0)
  {
    operator delete(__p);
    if ((v15 & 1) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v15)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v14);
  goto LABEL_6;
}

uint64_t mediaplatform::DatabaseStatement::reset(sqlite3_stmt **this)
{
  int v2;
  uint64_t result;

  v2 = sqlite3_reset(this[3]);
  result = mediaplatform::DatabaseStatement::_checkSQLiteResult((uint64_t)this, v2);
  *((_DWORD *)this + 14) = -1;
  return result;
}

uint64_t mediaplatform::DatabaseStatement::clearBindings(sqlite3_stmt **this)
{
  int v2;

  v2 = sqlite3_clear_bindings(this[3]);
  return mediaplatform::DatabaseStatement::_checkSQLiteResult((uint64_t)this, v2);
}

uint64_t mediaplatform::DatabaseStatement::finalize(sqlite3_stmt **this)
{
  uint64_t result;
  int v3;
  mediaplatform::PlatformErrorCondition *exception;
  void *__p[2];
  char v6;
  _BYTE v7[68];
  int v8;

  result = sqlite3_finalize(this[3]);
  if ((_DWORD)result)
  {
    if (result > 0x1A)
      v3 = 36;
    else
      v3 = *(_DWORD *)&asc_20A91932C[4 * (result - 1)];
    v8 = v3;
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    mediaplatform::PlatformErrorCondition::PlatformErrorCondition((uint64_t)v7, &v8, (__int128 *)__p);
    if (v6 < 0)
      operator delete(__p[0]);
    exception = (mediaplatform::PlatformErrorCondition *)__cxa_allocate_exception(0x40uLL);
    mediaplatform::PlatformErrorCondition::PlatformErrorCondition(exception, (const mediaplatform::PlatformErrorCondition *)v7);
  }
  this[3] = 0;
  return result;
}

void sub_20A81769C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, std::exception a15)
{
  mediaplatform::PlatformErrorCondition::~PlatformErrorCondition(&a15);
  _Unwind_Resume(a1);
}

BOOL mediaplatform::DatabaseStatement::isReadonly(sqlite3_stmt **this)
{
  return sqlite3_stmt_readonly(this[3]) != 0;
}

BOOL mediaplatform::DatabaseStatement::isBusy(sqlite3_stmt **this)
{
  return sqlite3_stmt_busy(this[3]) != 0;
}

BOOL mediaplatform::DatabaseStatement::hasColumnValueData(mediaplatform::DatabaseStatement *this)
{
  int v1;

  v1 = *((_DWORD *)this + 14);
  if (v1 == -1)
    __assert_rtn("hasColumnValueData", "DatabaseStatement.cpp", 102, "_lastStepResult != -1");
  return v1 == 100;
}

void mediaplatform::DatabaseStatement::sql(mediaplatform::DatabaseStatement *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 55) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 4), *((_QWORD *)this + 5));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *((_OWORD *)this + 2);
    a2->__r_.__value_.__r.__words[2] = *((_QWORD *)this + 6);
  }
}

uint64_t mediaplatform::DatabaseStatement::bindParameter<int>(uint64_t a1, int a2, int a3)
{
  int v4;

  v4 = sqlite3_bind_int(*(sqlite3_stmt **)(a1 + 24), a3 + 1, a2);
  return mediaplatform::DatabaseStatement::_checkSQLiteResult(a1, v4);
}

uint64_t mediaplatform::DatabaseStatement::bindParameter<unsigned int>(uint64_t a1, int a2, int a3)
{
  int v4;

  v4 = sqlite3_bind_int(*(sqlite3_stmt **)(a1 + 24), a3 + 1, a2);
  return mediaplatform::DatabaseStatement::_checkSQLiteResult(a1, v4);
}

uint64_t mediaplatform::DatabaseStatement::bindParameter<std::string>(uint64_t a1, char *a2, int a3)
{
  const char *v3;
  sqlite3_stmt *v5;
  uint64_t v6;
  int v7;

  v3 = a2;
  v5 = *(sqlite3_stmt **)(a1 + 24);
  if (a2[23] < 0)
  {
    v3 = *(const char **)a2;
    v6 = *((_QWORD *)a2 + 1);
  }
  else
  {
    LODWORD(v6) = a2[23];
  }
  v7 = sqlite3_bind_text(v5, a3 + 1, v3, v6, (void (__cdecl *)(void *))0xFFFFFFFFFFFFFFFFLL);
  return mediaplatform::DatabaseStatement::_checkSQLiteResult(a1, v7);
}

uint64_t mediaplatform::DatabaseStatement::bindParameter<std::wstring>(uint64_t a1, _QWORD *a2, int a3)
{
  _QWORD *v3;
  sqlite3_stmt *v5;
  uint64_t v6;
  int v7;

  v3 = a2;
  v5 = *(sqlite3_stmt **)(a1 + 24);
  if (*((char *)a2 + 23) < 0)
  {
    v3 = (_QWORD *)*a2;
    v6 = a2[1];
  }
  else
  {
    LODWORD(v6) = *((unsigned __int8 *)a2 + 23);
  }
  v7 = sqlite3_bind_text16(v5, a3 + 1, v3, v6, (void (__cdecl *)(void *))0xFFFFFFFFFFFFFFFFLL);
  return mediaplatform::DatabaseStatement::_checkSQLiteResult(a1, v7);
}

uint64_t mediaplatform::DatabaseStatement::bindParameter<mediaplatform::Data>(uint64_t a1, uint64_t a2, int a3)
{
  int v4;

  v4 = sqlite3_bind_blob(*(sqlite3_stmt **)(a1 + 24), a3 + 1, *(const void **)(a2 + 24), *(_DWORD *)(a2 + 8), (void (__cdecl *)(void *))0xFFFFFFFFFFFFFFFFLL);
  return mediaplatform::DatabaseStatement::_checkSQLiteResult(a1, v4);
}

uint64_t mediaplatform::DatabaseStatement::bindParameter<double>(uint64_t a1, int a2, double a3)
{
  int v4;

  v4 = sqlite3_bind_double(*(sqlite3_stmt **)(a1 + 24), a2 + 1, a3);
  return mediaplatform::DatabaseStatement::_checkSQLiteResult(a1, v4);
}

uint64_t mediaplatform::DatabaseStatement::bindParameter<float>(uint64_t a1, int a2, float a3)
{
  int v4;

  v4 = sqlite3_bind_double(*(sqlite3_stmt **)(a1 + 24), a2 + 1, a3);
  return mediaplatform::DatabaseStatement::_checkSQLiteResult(a1, v4);
}

uint64_t mediaplatform::DatabaseStatement::bindParameter<BOOL>(uint64_t a1, int a2, int a3)
{
  int v4;

  v4 = sqlite3_bind_int(*(sqlite3_stmt **)(a1 + 24), a3 + 1, a2);
  return mediaplatform::DatabaseStatement::_checkSQLiteResult(a1, v4);
}

uint64_t mediaplatform::DatabaseStatement::bindParameter<unsigned long>(uint64_t a1, sqlite3_int64 a2, int a3)
{
  int v4;

  v4 = sqlite3_bind_int64(*(sqlite3_stmt **)(a1 + 24), a3 + 1, a2);
  return mediaplatform::DatabaseStatement::_checkSQLiteResult(a1, v4);
}

uint64_t mediaplatform::DatabaseStatement::bindParameter<long long>(uint64_t a1, sqlite3_int64 a2, int a3)
{
  int v4;

  v4 = sqlite3_bind_int64(*(sqlite3_stmt **)(a1 + 24), a3 + 1, a2);
  return mediaplatform::DatabaseStatement::_checkSQLiteResult(a1, v4);
}

uint64_t mediaplatform::DatabaseStatement::bindParameter<unsigned long long>(uint64_t a1, sqlite3_int64 a2, int a3)
{
  int v4;

  v4 = sqlite3_bind_int64(*(sqlite3_stmt **)(a1 + 24), a3 + 1, a2);
  return mediaplatform::DatabaseStatement::_checkSQLiteResult(a1, v4);
}

uint64_t mediaplatform::DatabaseStatement::bindParameter<decltype(nullptr)>(uint64_t a1, uint64_t a2, int a3)
{
  int v4;

  v4 = sqlite3_bind_null(*(sqlite3_stmt **)(a1 + 24), a3 + 1);
  return mediaplatform::DatabaseStatement::_checkSQLiteResult(a1, v4);
}

uint64_t mediaplatform::DatabaseStatement::bindParameter<mediaplatform::Optional<int>>(uint64_t a1, uint64_t a2, int a3)
{
  int v4;

  if (*(_BYTE *)(a2 + 4))
    v4 = sqlite3_bind_int(*(sqlite3_stmt **)(a1 + 24), a3 + 1, *(_DWORD *)a2);
  else
    v4 = sqlite3_bind_null(*(sqlite3_stmt **)(a1 + 24), a3 + 1);
  return mediaplatform::DatabaseStatement::_checkSQLiteResult(a1, v4);
}

uint64_t mediaplatform::DatabaseStatement::bindParameter<mediaplatform::Optional<unsigned int>>(uint64_t a1, uint64_t a2, int a3)
{
  int v4;

  if (*(_BYTE *)(a2 + 4))
    v4 = sqlite3_bind_int(*(sqlite3_stmt **)(a1 + 24), a3 + 1, *(_DWORD *)a2);
  else
    v4 = sqlite3_bind_null(*(sqlite3_stmt **)(a1 + 24), a3 + 1);
  return mediaplatform::DatabaseStatement::_checkSQLiteResult(a1, v4);
}

void mediaplatform::DatabaseStatement::bindParameter<mediaplatform::Optional<std::string>>(uint64_t a1, uint64_t a2, int a3)
{
  int v5;
  std::string __p;

  if (*(_BYTE *)(a2 + 24))
  {
    if (*(char *)(a2 + 23) < 0)
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
    else
      __p = *(std::string *)a2;
    mediaplatform::DatabaseStatement::bindParameter<std::string>(a1, (char *)&__p, a3);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  else
  {
    v5 = sqlite3_bind_null(*(sqlite3_stmt **)(a1 + 24), a3 + 1);
    mediaplatform::DatabaseStatement::_checkSQLiteResult(a1, v5);
  }
}

void sub_20A817B8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void mediaplatform::DatabaseStatement::bindParameter<mediaplatform::Optional<std::wstring>>(uint64_t a1, uint64_t a2, int a3)
{
  int v5;
  std::wstring __p;

  if (*(_BYTE *)(a2 + 24))
  {
    if (*(char *)(a2 + 23) < 0)
      std::wstring::__init_copy_ctor_external(&__p, *(const std::wstring::value_type **)a2, *(_QWORD *)(a2 + 8));
    else
      __p = *(std::wstring *)a2;
    mediaplatform::DatabaseStatement::bindParameter<std::wstring>(a1, &__p, a3);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  else
  {
    v5 = sqlite3_bind_null(*(sqlite3_stmt **)(a1 + 24), a3 + 1);
    mediaplatform::DatabaseStatement::_checkSQLiteResult(a1, v5);
  }
}

void sub_20A817C48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::wstring::__init_copy_ctor_external(std::wstring *this, const std::wstring::value_type *__s, std::wstring::size_type __sz)
{
  std::wstring *v5;
  std::wstring::size_type v6;
  std::wstring *v7;
  uint64_t v8;

  v5 = this;
  if (__sz > 4)
  {
    if (__sz >= 0x3FFFFFFFFFFFFFF8)
      std::string::__throw_length_error[abi:ne180100]();
    v6 = (__sz & 0xFFFFFFFFFFFFFFFELL) + 2;
    if ((__sz | 1) != 5)
      v6 = __sz | 1;
    v7 = (std::wstring *)std::__allocate_at_least[abi:ne180100]<std::allocator<wchar_t>>(v6 + 1);
    v5->__r_.__value_.__l.__size_ = __sz;
    v5->__r_.__value_.__r.__words[2] = v8 | 0x8000000000000000;
    v5->__r_.__value_.__r.__words[0] = (std::wstring::size_type)v7;
    v5 = v7;
  }
  else
  {
    *((_BYTE *)&this->__r_.__value_.__s + 23) = __sz;
  }
  memmove(v5, __s, 4 * __sz + 4);
}

uint64_t mediaplatform::DatabaseStatement::bindParameter<mediaplatform::Optional<mediaplatform::Data>>(uint64_t a1, uint64_t a2, int a3)
{
  const void *v5;
  size_t v6;
  void *v7;
  int v8;
  uint64_t result;
  int v10;

  if (*(_BYTE *)(a2 + 40))
  {
    v5 = *(const void **)(a2 + 24);
    v6 = *(_QWORD *)(a2 + 8);
    if (v6)
      v7 = (void *)operator new[]();
    else
      v7 = 0;
    if (v5)
      memcpy(v7, v5, v6);
    else
      bzero(v7, v6);
    v10 = sqlite3_bind_blob(*(sqlite3_stmt **)(a1 + 24), a3 + 1, v7, v6, (void (__cdecl *)(void *))0xFFFFFFFFFFFFFFFFLL);
    result = mediaplatform::DatabaseStatement::_checkSQLiteResult(a1, v10);
    if (v7)
      JUMPOUT(0x20BD27AE4);
  }
  else
  {
    v8 = sqlite3_bind_null(*(sqlite3_stmt **)(a1 + 24), a3 + 1);
    return mediaplatform::DatabaseStatement::_checkSQLiteResult(a1, v8);
  }
  return result;
}

void sub_20A817DEC(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    MEMORY[0x20BD27AE4](v1, 0x1000C8077774924);
  _Unwind_Resume(exception_object);
}

uint64_t mediaplatform::DatabaseStatement::bindParameter<mediaplatform::Optional<double>>(uint64_t a1, uint64_t a2, int a3)
{
  int v4;

  if (*(_BYTE *)(a2 + 8))
    v4 = sqlite3_bind_double(*(sqlite3_stmt **)(a1 + 24), a3 + 1, *(double *)a2);
  else
    v4 = sqlite3_bind_null(*(sqlite3_stmt **)(a1 + 24), a3 + 1);
  return mediaplatform::DatabaseStatement::_checkSQLiteResult(a1, v4);
}

uint64_t mediaplatform::DatabaseStatement::bindParameter<mediaplatform::Optional<float>>(uint64_t a1, uint64_t a2, int a3)
{
  int v4;

  if (*(_BYTE *)(a2 + 4))
    v4 = sqlite3_bind_double(*(sqlite3_stmt **)(a1 + 24), a3 + 1, *(float *)a2);
  else
    v4 = sqlite3_bind_null(*(sqlite3_stmt **)(a1 + 24), a3 + 1);
  return mediaplatform::DatabaseStatement::_checkSQLiteResult(a1, v4);
}

uint64_t mediaplatform::DatabaseStatement::bindParameter<mediaplatform::Optional<BOOL>>(uint64_t a1, unsigned __int8 *a2, int a3)
{
  int v4;

  if (a2[1])
    v4 = sqlite3_bind_int(*(sqlite3_stmt **)(a1 + 24), a3 + 1, *a2);
  else
    v4 = sqlite3_bind_null(*(sqlite3_stmt **)(a1 + 24), a3 + 1);
  return mediaplatform::DatabaseStatement::_checkSQLiteResult(a1, v4);
}

uint64_t mediaplatform::DatabaseStatement::bindParameter<mediaplatform::Optional<unsigned long>>(uint64_t a1, uint64_t a2, int a3)
{
  int v4;

  if (*(_BYTE *)(a2 + 8))
    v4 = sqlite3_bind_int64(*(sqlite3_stmt **)(a1 + 24), a3 + 1, *(_QWORD *)a2);
  else
    v4 = sqlite3_bind_null(*(sqlite3_stmt **)(a1 + 24), a3 + 1);
  return mediaplatform::DatabaseStatement::_checkSQLiteResult(a1, v4);
}

uint64_t mediaplatform::DatabaseStatement::bindParameter<mediaplatform::Optional<long long>>(uint64_t a1, uint64_t a2, int a3)
{
  int v4;

  if (*(_BYTE *)(a2 + 8))
    v4 = sqlite3_bind_int64(*(sqlite3_stmt **)(a1 + 24), a3 + 1, *(_QWORD *)a2);
  else
    v4 = sqlite3_bind_null(*(sqlite3_stmt **)(a1 + 24), a3 + 1);
  return mediaplatform::DatabaseStatement::_checkSQLiteResult(a1, v4);
}

uint64_t mediaplatform::DatabaseStatement::bindParameter<mediaplatform::Optional<unsigned long long>>(uint64_t a1, uint64_t a2, int a3)
{
  int v4;

  if (*(_BYTE *)(a2 + 8))
    v4 = sqlite3_bind_int64(*(sqlite3_stmt **)(a1 + 24), a3 + 1, *(_QWORD *)a2);
  else
    v4 = sqlite3_bind_null(*(sqlite3_stmt **)(a1 + 24), a3 + 1);
  return mediaplatform::DatabaseStatement::_checkSQLiteResult(a1, v4);
}

uint64_t mediaplatform::DatabaseStatement::bindParameter<mediaplatform::DatabaseParameterList>(uint64_t result, uint64_t a2, int a3)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;

  v3 = *(uint64_t **)(a2 + 8);
  v4 = *(uint64_t **)(a2 + 16);
  if (v3 != v4)
  {
    v5 = result;
    do
    {
      v6 = *v3;
      v3 += 2;
      v7 = a3 + 1;
      result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 48))(v6, v5);
      a3 = v7;
    }
    while (v3 != v4);
  }
  return result;
}

uint64_t mediaplatform::DatabaseParameterList::parameters(mediaplatform::DatabaseParameterList *this)
{
  return (uint64_t)this + 8;
}

uint64_t mediaplatform::DatabaseStatement::columnValue<int>(uint64_t a1, int a2)
{
  return sqlite3_column_int(*(sqlite3_stmt **)(a1 + 24), a2);
}

_QWORD *mediaplatform::DatabaseStatement::columnValue<std::string>@<X0>(uint64_t a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  const unsigned __int8 *v4;
  char *v5;

  v4 = sqlite3_column_text(*(sqlite3_stmt **)(a1 + 24), a2);
  if (v4)
    v5 = (char *)v4;
  else
    v5 = "";
  return std::string::basic_string[abi:ne180100]<0>(a3, v5);
}

_QWORD *mediaplatform::DatabaseStatement::columnValue<std::wstring>@<X0>(uint64_t a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  __int32 *v4;

  v4 = (__int32 *)sqlite3_column_text16(*(sqlite3_stmt **)(a1 + 24), a2);
  return std::wstring::basic_string[abi:ne180100]<0>(a3, v4);
}

_QWORD *std::wstring::basic_string[abi:ne180100]<0>(_QWORD *a1, __int32 *a2)
{
  size_t v4;
  size_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;

  v4 = wcslen(a2);
  if (v4 >= 0x3FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v5 = v4;
  if (v4 >= 5)
  {
    v7 = (v4 & 0xFFFFFFFFFFFFFFFELL) + 2;
    if ((v4 | 1) != 5)
      v7 = v4 | 1;
    v6 = std::__allocate_at_least[abi:ne180100]<std::allocator<wchar_t>>(v7 + 1);
    a1[1] = v5;
    a1[2] = v8 | 0x8000000000000000;
    *a1 = v6;
  }
  else
  {
    *((_BYTE *)a1 + 23) = v4;
    v6 = a1;
    if (!v4)
      goto LABEL_9;
  }
  memmove(v6, a2, 4 * v5);
LABEL_9:
  *((_DWORD *)v6 + v5) = 0;
  return a1;
}

void mediaplatform::DatabaseStatement::columnValue<mediaplatform::Data>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  const void *v6;
  int v7;
  size_t v8;
  void *v9;

  v6 = sqlite3_column_blob(*(sqlite3_stmt **)(a1 + 24), a2);
  v7 = sqlite3_column_bytes(*(sqlite3_stmt **)(a1 + 24), a2);
  v8 = v7;
  *(_QWORD *)a3 = &off_24C331510;
  *(_QWORD *)(a3 + 8) = v7;
  *(_QWORD *)(a3 + 16) = v7;
  if (v7)
    v9 = (void *)operator new[]();
  else
    v9 = 0;
  *(_QWORD *)(a3 + 24) = v9;
  *(_BYTE *)(a3 + 32) = 1;
  if (v6)
    memcpy(v9, v6, v8);
  else
    bzero(v9, v8);
}

double mediaplatform::DatabaseStatement::columnValue<double>(uint64_t a1, int a2)
{
  return sqlite3_column_double(*(sqlite3_stmt **)(a1 + 24), a2);
}

float mediaplatform::DatabaseStatement::columnValue<float>(uint64_t a1, int a2)
{
  return sqlite3_column_double(*(sqlite3_stmt **)(a1 + 24), a2);
}

BOOL mediaplatform::DatabaseStatement::columnValue<BOOL>(uint64_t a1, int a2)
{
  return sqlite3_column_int(*(sqlite3_stmt **)(a1 + 24), a2) != 0;
}

sqlite3_int64 mediaplatform::DatabaseStatement::columnValue<unsigned long>(uint64_t a1, int a2)
{
  return sqlite3_column_int64(*(sqlite3_stmt **)(a1 + 24), a2);
}

sqlite3_int64 mediaplatform::DatabaseStatement::columnValue<long long>(uint64_t a1, int a2)
{
  return sqlite3_column_int64(*(sqlite3_stmt **)(a1 + 24), a2);
}

void mediaplatform::DatabaseStatement::columnValue<mediaplatform::DatabaseResultList>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  std::__shared_weak_count *v4;
  uint64_t v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  unint64_t v12;

  v4 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v4 || (v7 = *(_QWORD *)(a1 + 8), (v8 = std::__shared_weak_count::lock(v4)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v9 = v8;
  *(_DWORD *)a3 = a2;
  p_shared_owners = (unint64_t *)&v8->__shared_owners_;
  *(_QWORD *)(a3 + 8) = v7;
  *(_QWORD *)(a3 + 16) = v8;
  do
    v11 = __ldxr(p_shared_owners);
  while (__stxr(v11 + 1, p_shared_owners));
  do
    v12 = __ldaxr(p_shared_owners);
  while (__stlxr(v12 - 1, p_shared_owners));
  if (!v12)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v9);
  }
}

void std::__throw_bad_weak_ptr[abi:ne180100]()
{
  _QWORD *exception;

  exception = __cxa_allocate_exception(8uLL);
  *exception = MEMORY[0x24BEDB808] + 16;
  __cxa_throw(exception, MEMORY[0x24BEDB6D8], MEMORY[0x24BEDAC00]);
}

uint64_t mediaplatform::DatabaseResultList::DatabaseResultList(uint64_t result, _QWORD *a2, int a3)
{
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  *(_DWORD *)result = a3;
  v3 = a2[1];
  *(_QWORD *)(result + 8) = *a2;
  *(_QWORD *)(result + 16) = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

{
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  *(_DWORD *)result = a3;
  v3 = a2[1];
  *(_QWORD *)(result + 8) = *a2;
  *(_QWORD *)(result + 16) = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

uint64_t mediaplatform::DatabaseStatement::columnValue<mediaplatform::Optional<int>>@<X0>(uint64_t a1@<X0>, int a2@<W1>, _BYTE *a3@<X8>)
{
  uint64_t result;
  char v8;

  result = sqlite3_column_type(*(sqlite3_stmt **)(a1 + 24), a2);
  if (result > 4 || ((1 << result) & 0x16) == 0)
  {
    v8 = 0;
    *a3 = 0;
  }
  else
  {
    result = sqlite3_column_int(*(sqlite3_stmt **)(a1 + 24), a2);
    *(_DWORD *)a3 = result;
    v8 = 1;
  }
  a3[4] = v8;
  return result;
}

uint64_t mediaplatform::DatabaseStatement::columnValueType(sqlite3_stmt **this, int a2)
{
  unsigned int v2;

  v2 = sqlite3_column_type(this[3], a2) - 1;
  if (v2 > 3)
    return 5;
  else
    return dword_20A9226C0[v2];
}

_QWORD *mediaplatform::DatabaseStatement::columnValue<mediaplatform::Optional<std::string>>@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  _QWORD *result;
  const unsigned __int8 *v8;
  char *v9;
  __int128 v10;
  uint64_t v11;

  result = (_QWORD *)sqlite3_column_type(*(sqlite3_stmt **)(a1 + 24), a2);
  if (result > 4 || ((1 << (char)result) & 0x16) == 0)
  {
    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 24) = 0;
  }
  else
  {
    v8 = sqlite3_column_text(*(sqlite3_stmt **)(a1 + 24), a2);
    if (v8)
      v9 = (char *)v8;
    else
      v9 = "";
    result = std::string::basic_string[abi:ne180100]<0>(&v10, v9);
    *(_OWORD *)a3 = v10;
    *(_QWORD *)(a3 + 16) = v11;
    *(_BYTE *)(a3 + 24) = 1;
  }
  return result;
}

_QWORD *mediaplatform::DatabaseStatement::columnValue<mediaplatform::Optional<std::wstring>>@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  _QWORD *result;
  __int32 *v8;
  __int128 v9;
  uint64_t v10;

  result = (_QWORD *)sqlite3_column_type(*(sqlite3_stmt **)(a1 + 24), a2);
  if (result > 4 || ((1 << (char)result) & 0x16) == 0)
  {
    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 24) = 0;
  }
  else
  {
    v8 = (__int32 *)sqlite3_column_text16(*(sqlite3_stmt **)(a1 + 24), a2);
    result = std::wstring::basic_string[abi:ne180100]<0>(&v9, v8);
    *(_OWORD *)a3 = v9;
    *(_QWORD *)(a3 + 16) = v10;
    *(_BYTE *)(a3 + 24) = 1;
  }
  return result;
}

void mediaplatform::DatabaseStatement::columnValue<mediaplatform::Optional<mediaplatform::Data>>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  unsigned int v6;
  _BYTE v8[8];
  __int128 v9;
  uint64_t v10;
  char v11;

  v6 = sqlite3_column_type(*(sqlite3_stmt **)(a1 + 24), a2);
  if (v6 > 4 || ((1 << v6) & 0x16) == 0)
  {
    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 40) = 0;
  }
  else
  {
    mediaplatform::DatabaseStatement::columnValue<mediaplatform::Data>(a1, a2, (uint64_t)v8);
    *(_QWORD *)a3 = &off_24C331510;
    *(_QWORD *)(a3 + 24) = v10;
    *(_OWORD *)(a3 + 8) = v9;
    *(_BYTE *)(a3 + 32) = v11;
    *(_BYTE *)(a3 + 40) = 1;
  }
}

void mediaplatform::DatabaseStatement::columnValue<mediaplatform::Optional<double>>(uint64_t a1@<X0>, int a2@<W1>, double *a3@<X8>)
{
  unsigned int v6;
  char v8;

  v6 = sqlite3_column_type(*(sqlite3_stmt **)(a1 + 24), a2);
  if (v6 > 4 || ((1 << v6) & 0x16) == 0)
  {
    v8 = 0;
    *(_BYTE *)a3 = 0;
  }
  else
  {
    *a3 = sqlite3_column_double(*(sqlite3_stmt **)(a1 + 24), a2);
    v8 = 1;
  }
  *((_BYTE *)a3 + 8) = v8;
}

void mediaplatform::DatabaseStatement::columnValue<mediaplatform::Optional<float>>(uint64_t a1@<X0>, int a2@<W1>, float *a3@<X8>)
{
  unsigned int v6;
  float v8;
  char v9;

  v6 = sqlite3_column_type(*(sqlite3_stmt **)(a1 + 24), a2);
  if (v6 > 4 || ((1 << v6) & 0x16) == 0)
  {
    v9 = 0;
    *(_BYTE *)a3 = 0;
  }
  else
  {
    v8 = sqlite3_column_double(*(sqlite3_stmt **)(a1 + 24), a2);
    *a3 = v8;
    v9 = 1;
  }
  *((_BYTE *)a3 + 4) = v9;
}

uint64_t mediaplatform::DatabaseStatement::columnValue<mediaplatform::Optional<BOOL>>@<X0>(uint64_t a1@<X0>, int a2@<W1>, BOOL *a3@<X8>)
{
  uint64_t result;
  BOOL v8;
  char v9;

  result = sqlite3_column_type(*(sqlite3_stmt **)(a1 + 24), a2);
  if (result > 4 || ((1 << result) & 0x16) == 0)
  {
    v8 = 0;
    v9 = 0;
  }
  else
  {
    result = sqlite3_column_int(*(sqlite3_stmt **)(a1 + 24), a2);
    v8 = (_DWORD)result != 0;
    v9 = 1;
  }
  *a3 = v8;
  a3[1] = v9;
  return result;
}

sqlite3_int64 mediaplatform::DatabaseStatement::columnValue<mediaplatform::Optional<unsigned long>>@<X0>(uint64_t a1@<X0>, int a2@<W1>, _BYTE *a3@<X8>)
{
  sqlite3_int64 result;
  char v8;

  result = sqlite3_column_type(*(sqlite3_stmt **)(a1 + 24), a2);
  if (result > 4 || ((1 << result) & 0x16) == 0)
  {
    v8 = 0;
    *a3 = 0;
  }
  else
  {
    result = sqlite3_column_int64(*(sqlite3_stmt **)(a1 + 24), a2);
    *(_QWORD *)a3 = result;
    v8 = 1;
  }
  a3[8] = v8;
  return result;
}

sqlite3_int64 mediaplatform::DatabaseStatement::columnValue<mediaplatform::Optional<long long>>@<X0>(uint64_t a1@<X0>, int a2@<W1>, _BYTE *a3@<X8>)
{
  sqlite3_int64 result;
  char v8;

  result = sqlite3_column_type(*(sqlite3_stmt **)(a1 + 24), a2);
  if (result > 4 || ((1 << result) & 0x16) == 0)
  {
    v8 = 0;
    *a3 = 0;
  }
  else
  {
    result = sqlite3_column_int64(*(sqlite3_stmt **)(a1 + 24), a2);
    *(_QWORD *)a3 = result;
    v8 = 1;
  }
  a3[8] = v8;
  return result;
}

uint64_t mediaplatform::DatabaseStatement::columnCount(sqlite3_stmt **this)
{
  return sqlite3_column_count(this[3]);
}

_QWORD *mediaplatform::DatabaseStatement::columnName@<X0>(sqlite3_stmt **this@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  char *v4;

  v4 = (char *)sqlite3_column_name(this[3], a2);
  return std::string::basic_string[abi:ne180100]<0>(a3, v4);
}

uint64_t mediaplatform::DatabaseResultList::columnValueType(mediaplatform::DatabaseResultList *this, int a2)
{
  unsigned int v2;

  v2 = sqlite3_column_type(*(sqlite3_stmt **)(*((_QWORD *)this + 1) + 24), a2) - 1;
  if (v2 > 3)
    return 5;
  else
    return dword_20A9226C0[v2];
}

_QWORD *mediaplatform::DatabaseResultList::columnName@<X0>(mediaplatform::DatabaseResultList *this@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  char *v4;

  v4 = (char *)sqlite3_column_name(*(sqlite3_stmt **)(*((_QWORD *)this + 1) + 24), a2);
  return std::string::basic_string[abi:ne180100]<0>(a3, v4);
}

uint64_t mediaplatform::DatabaseResultList::columnCount(mediaplatform::DatabaseResultList *this)
{
  return sqlite3_column_count(*(sqlite3_stmt **)(*((_QWORD *)this + 1) + 24));
}

void mediaplatform::DatabaseParameterList::add(_QWORD *a1, __int128 *a2)
{
  _QWORD *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  __int128 v18;
  unint64_t *v19;
  unint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  char *v23;
  __int128 v24;
  int64x2_t v25;
  uint64_t v26;
  void *v27;

  v4 = (_QWORD *)a1[2];
  v5 = a1[3];
  if ((unint64_t)v4 >= v5)
  {
    v10 = a1[1];
    v11 = ((uint64_t)v4 - v10) >> 4;
    v12 = v11 + 1;
    if ((unint64_t)(v11 + 1) >> 60)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v13 = v5 - v10;
    if (v13 >> 3 > v12)
      v12 = v13 >> 3;
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF0)
      v14 = 0xFFFFFFFFFFFFFFFLL;
    else
      v14 = v12;
    v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<mediaplatform::DatabaseParameterBase>>>(v14);
    v17 = &v15[16 * v11];
    v18 = *a2;
    *(_OWORD *)v17 = *a2;
    if (*((_QWORD *)&v18 + 1))
    {
      v19 = (unint64_t *)(*((_QWORD *)&v18 + 1) + 8);
      do
        v20 = __ldxr(v19);
      while (__stxr(v20 + 1, v19));
    }
    v22 = (_QWORD *)a1[1];
    v21 = (_QWORD *)a1[2];
    if (v21 == v22)
    {
      v25 = vdupq_n_s64((unint64_t)v21);
      v23 = &v15[16 * v11];
    }
    else
    {
      v23 = &v15[16 * v11];
      do
      {
        v24 = *((_OWORD *)v21 - 1);
        v21 -= 2;
        *((_OWORD *)v23 - 1) = v24;
        v23 -= 16;
        *v21 = 0;
        v21[1] = 0;
      }
      while (v21 != v22);
      v25 = *(int64x2_t *)(a1 + 1);
    }
    v9 = v17 + 16;
    a1[1] = v23;
    a1[2] = v17 + 16;
    a1[3] = &v15[16 * v16];
    v26 = v25.i64[1];
    v27 = (void *)v25.i64[0];
    while ((void *)v26 != v27)
      v26 = std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100](v26 - 16);
    if (v27)
      operator delete(v27);
  }
  else
  {
    v6 = *((_QWORD *)a2 + 1);
    *v4 = *(_QWORD *)a2;
    v4[1] = v6;
    if (v6)
    {
      v7 = (unint64_t *)(v6 + 8);
      do
        v8 = __ldxr(v7);
      while (__stxr(v8 + 1, v7));
    }
    v9 = v4 + 2;
  }
  a1[2] = v9;
}

_QWORD *mediaplatform::DatabaseBindParameter::DatabaseBindParameter(_QWORD *result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *a2;
  v2 = a2[1];
  *result = &off_24C3311D8;
  result[1] = v3;
  result[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *a2;
  v2 = a2[1];
  *result = &off_24C3311D8;
  result[1] = v3;
  result[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

uint64_t mediaplatform::DatabaseBindParameter::parameter(mediaplatform::DatabaseBindParameter *this)
{
  return (uint64_t)this + 8;
}

void mediaplatform::ComponentsSeparatedByString(std::string *a1@<X0>, char *a2@<X1>, std::vector<std::string> *a3@<X8>)
{
  std::vector<std::string> *v4;
  char *size;
  std::string::size_type v6;
  int v7;
  char *v8;
  int64_t v9;
  char *v11;
  int v12;
  void *v13;
  char *v14;
  char *v15;
  char *v16;
  uint64_t v17;
  std::string::size_type v18;
  uint64_t v19;
  std::vector<std::string>::pointer end;
  __int128 v21;
  std::vector<std::string>::pointer v22;
  char *v23;
  std::string::size_type v24;
  int v25;
  char *v26;
  int64_t v27;
  void *v28;
  char *v29;
  int64_t v30;
  char *v31;
  int v32;
  uint64_t v33;
  char *v34;
  std::vector<std::string>::pointer v35;
  __int128 v36;
  std::vector<std::string>::pointer v37;
  std::string::size_type v38;
  std::vector<std::string> *v39;
  std::string v40;
  char v41;

  v4 = a3;
  a3->__begin_ = 0;
  a3->__end_ = 0;
  a3->__end_cap_.__value_ = 0;
  size = (char *)HIBYTE(a1->__r_.__value_.__r.__words[2]);
  if ((char)size >= 0)
    v6 = (std::string::size_type)a1;
  else
    v6 = a1->__r_.__value_.__r.__words[0];
  v7 = a2[23];
  if (v7 >= 0)
    v8 = a2;
  else
    v8 = *(char **)a2;
  if (v7 >= 0)
    v9 = a2[23];
  else
    v9 = *((_QWORD *)a2 + 1);
  if (v9)
  {
    if ((char)size < 0)
      size = (char *)a1->__r_.__value_.__l.__size_;
    if ((uint64_t)size >= v9)
    {
      v11 = &size[v6];
      v12 = *v8;
      v13 = (void *)v6;
      do
      {
        v14 = &size[-v9];
        if (v14 == (char *)-1)
          break;
        v15 = (char *)memchr(v13, v12, (size_t)(v14 + 1));
        if (!v15)
          break;
        v16 = v15;
        if (!memcmp(v15, v8, v9))
        {
          if (v16 == v11)
            break;
          v17 = (uint64_t)&v16[-v6];
          if (v17 == -1)
            break;
          v18 = 0;
          v39 = v4;
          do
          {
            v19 = v17;
            std::string::basic_string(&v40, a1, v18, v17 - v18, (std::allocator<char> *)&v41);
            end = v4->__end_;
            if (end >= v4->__end_cap_.__value_)
            {
              v22 = std::vector<std::string>::__push_back_slow_path<std::string const&>(v4, (__int128 *)&v40);
            }
            else
            {
              if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0)
              {
                std::string::__init_copy_ctor_external(v4->__end_, v40.__r_.__value_.__l.__data_, v40.__r_.__value_.__l.__size_);
              }
              else
              {
                v21 = *(_OWORD *)&v40.__r_.__value_.__l.__data_;
                end->__r_.__value_.__r.__words[2] = v40.__r_.__value_.__r.__words[2];
                *(_OWORD *)&end->__r_.__value_.__l.__data_ = v21;
              }
              v22 = end + 1;
              v4->__end_ = end + 1;
            }
            v4->__end_ = v22;
            v18 = v17 + v9;
            v23 = (char *)HIBYTE(a1->__r_.__value_.__r.__words[2]);
            if ((char)v23 >= 0)
              v24 = (std::string::size_type)a1;
            else
              v24 = a1->__r_.__value_.__r.__words[0];
            if ((char)v23 < 0)
              v23 = (char *)a1->__r_.__value_.__l.__size_;
            v25 = a2[23];
            if (v25 >= 0)
              v26 = a2;
            else
              v26 = *(char **)a2;
            if (v25 >= 0)
              v27 = a2[23];
            else
              v27 = *((_QWORD *)a2 + 1);
            if ((unint64_t)v23 >= v18)
            {
              v17 += v9;
              if (v27)
              {
                v28 = (void *)(v24 + v18);
                v29 = &v23[v24];
                v30 = (int64_t)&v23[-v18];
                if (v30 >= v27)
                {
                  v38 = v24;
                  v32 = *v26;
                  do
                  {
                    v33 = v30 - v27;
                    if (v33 == -1)
                      break;
                    v34 = (char *)memchr(v28, v32, v33 + 1);
                    if (!v34)
                      break;
                    v31 = v34;
                    if (!memcmp(v34, v26, v27))
                      goto LABEL_53;
                    v28 = v31 + 1;
                    v30 = v29 - (v31 + 1);
                  }
                  while (v30 >= v27);
                  v31 = v29;
LABEL_53:
                  v24 = v38;
                }
                else
                {
                  v31 = v29;
                }
                if (v31 == v29)
                  v17 = -1;
                else
                  v17 = (uint64_t)&v31[-v24];
                v4 = v39;
              }
            }
            else
            {
              v17 = -1;
            }
            if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v40.__r_.__value_.__l.__data_);
          }
          while (v17 != -1);
          std::string::basic_string(&v40, a1, v19 + v9, -v19, (std::allocator<char> *)&v41);
          v35 = v4->__end_;
          if (v35 >= v4->__end_cap_.__value_)
          {
            v37 = std::vector<std::string>::__push_back_slow_path<std::string const&>(v4, (__int128 *)&v40);
          }
          else
          {
            if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0)
            {
              std::string::__init_copy_ctor_external(v4->__end_, v40.__r_.__value_.__l.__data_, v40.__r_.__value_.__l.__size_);
            }
            else
            {
              v36 = *(_OWORD *)&v40.__r_.__value_.__l.__data_;
              v35->__r_.__value_.__r.__words[2] = v40.__r_.__value_.__r.__words[2];
              *(_OWORD *)&v35->__r_.__value_.__l.__data_ = v36;
            }
            v37 = v35 + 1;
            v4->__end_ = v35 + 1;
          }
          v4->__end_ = v37;
          if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v40.__r_.__value_.__l.__data_);
          return;
        }
        v13 = v16 + 1;
        size = (char *)(v11 - (v16 + 1));
      }
      while ((uint64_t)size >= v9);
    }
  }
  v4->__end_ = std::vector<std::string>::__push_back_slow_path<std::string const&>(v4, (__int128 *)a1);
}

void sub_20A818D80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  uint64_t v16;
  _QWORD *v17;

  v17[1] = v16;
  if (a16 < 0)
    operator delete(__p);
  __p = v17;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

std::vector<std::string>::pointer std::vector<std::string>::__push_back_slow_path<std::string const&>(std::vector<std::string> *a1, __int128 *a2)
{
  unint64_t v2;
  unint64_t v3;
  std::allocator<std::string> *p_end_cap;
  unint64_t v7;
  uint64_t v8;
  std::string *v9;
  std::__split_buffer<std::string>::pointer end;
  __int128 v11;
  std::vector<std::string>::pointer v12;
  std::__split_buffer<std::string> __v;

  v2 = 0xAAAAAAAAAAAAAAABLL * (((char *)a1->__end_ - (char *)a1->__begin_) >> 3);
  v3 = v2 + 1;
  if (v2 + 1 > 0xAAAAAAAAAAAAAAALL)
    std::vector<std::string>::__throw_length_error[abi:ne180100]();
  p_end_cap = (std::allocator<std::string> *)&a1->__end_cap_;
  if (0x5555555555555556 * (((char *)a1->__end_cap_.__value_ - (char *)a1->__begin_) >> 3) > v3)
    v3 = 0x5555555555555556 * (((char *)a1->__end_cap_.__value_ - (char *)a1->__begin_) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * (((char *)a1->__end_cap_.__value_ - (char *)a1->__begin_) >> 3) >= 0x555555555555555)
    v7 = 0xAAAAAAAAAAAAAAALL;
  else
    v7 = v3;
  __v.__end_cap_.__value_ = p_end_cap;
  if (v7)
  {
    v9 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v7);
  }
  else
  {
    v9 = 0;
    v8 = 0;
  }
  end = v9 + v2;
  __v.__first_ = v9;
  __v.__begin_ = end;
  __v.__end_ = end;
  __v.__end_cap_.__value_ = &v9[v8];
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(end, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
    end = __v.__end_;
  }
  else
  {
    v11 = *a2;
    end->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&end->__r_.__value_.__l.__data_ = v11;
  }
  __v.__end_ = end + 1;
  std::vector<std::string>::__swap_out_circular_buffer(a1, &__v);
  v12 = a1->__end_;
  std::__split_buffer<std::string>::~__split_buffer(&__v);
  return v12;
}

void sub_20A818EF0(_Unwind_Exception *a1, std::__split_buffer<std::string> *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::string> *)&a10);
  _Unwind_Resume(a1);
}

void mediaplatform::MakeLowercase(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  std::string::size_type size;
  int v4;
  std::string *v5;
  std::string::size_type v6;
  std::string *v7;

  if (*(char *)(a1 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)a1;
    a2->__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 16);
  }
  size = HIBYTE(a2->__r_.__value_.__r.__words[2]);
  v4 = (char)size;
  if ((size & 0x80u) != 0)
    size = a2->__r_.__value_.__l.__size_;
  if (size)
  {
    if (v4 >= 0)
      v5 = a2;
    else
      v5 = (std::string *)a2->__r_.__value_.__r.__words[0];
    do
    {
      v5->__r_.__value_.__s.__data_[0] = __tolower(v5->__r_.__value_.__s.__data_[0]);
      v5 = (std::string *)((char *)v5 + 1);
      v6 = HIBYTE(a2->__r_.__value_.__r.__words[2]);
      if ((v6 & 0x80u) == 0)
        v7 = a2;
      else
        v7 = (std::string *)a2->__r_.__value_.__r.__words[0];
      if ((v6 & 0x80u) != 0)
        v6 = a2->__r_.__value_.__l.__size_;
    }
    while (v5 != (std::string *)((char *)v7 + v6));
  }
}

void sub_20A818F98(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t mediaplatform::UTF16ToUTF8String@<X0>(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  uint64_t v4;
  std::string *v5;
  _BYTE v7[192];
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  std::wstring_convert<std::codecvt_utf8_utf16<wchar_t,1114111ul,(std::codecvt_mode)0>,wchar_t,std::allocator<wchar_t>,std::allocator<char>>::wstring_convert[abi:ne180100]((uint64_t)v7);
  v4 = *(unsigned __int8 *)(a1 + 23);
  if ((v4 & 0x80u) == 0)
    v5 = (std::string *)a1;
  else
    v5 = *(std::string **)a1;
  if ((v4 & 0x80u) != 0)
    v4 = *(_QWORD *)(a1 + 8);
  std::wstring_convert<std::codecvt_utf8_utf16<wchar_t,1114111ul,(std::codecvt_mode)0>,wchar_t,std::allocator<wchar_t>,std::allocator<char>>::to_bytes(a2, (uint64_t)v7, v5, (std::string *)((char *)v5 + 4 * v4));
  return std::wstring_convert<std::codecvt_utf8_utf16<wchar_t,1114111ul,(std::codecvt_mode)0>,wchar_t,std::allocator<wchar_t>,std::allocator<char>>::~wstring_convert((uint64_t)v7);
}

void sub_20A819040(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::wstring_convert<std::codecvt_utf8_utf16<wchar_t,1114111ul,(std::codecvt_mode)0>,wchar_t,std::allocator<wchar_t>,std::allocator<char>>::~wstring_convert((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::wstring_convert<std::codecvt_utf8_utf16<wchar_t,1114111ul,(std::codecvt_mode)0>,wchar_t,std::allocator<wchar_t>,std::allocator<char>>::wstring_convert[abi:ne180100](uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  std::codecvt<wchar_t,char,__mbstate_t>::codecvt((std::codecvt<wchar_t, char, mbstate_t> *)v2, 0);
  *(_QWORD *)(v2 + 24) = 1114111;
  *(_DWORD *)(v2 + 32) = 0;
  *(_QWORD *)v2 = &off_24C33B928;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_QWORD *)(a1 + 48) = v2;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_QWORD *)(a1 + 184) = 0;
  return a1;
}

void sub_20A8190EC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x20BD27AFC](v1, 0x10A1C408EF24B1CLL);
  _Unwind_Resume(a1);
}

void std::wstring_convert<std::codecvt_utf8_utf16<wchar_t,1114111ul,(std::codecvt_mode)0>,wchar_t,std::allocator<wchar_t>,std::allocator<char>>::to_bytes(std::string *__b, uint64_t a2, std::string *a3, std::string *a4)
{
  std::string *v7;
  std::string::size_type v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __n128 v12;
  __int128 v13;
  std::string::size_type size;
  std::string *v15;
  char *v16;
  int v17;
  BOOL v18;
  std::string *v19;
  uint64_t v20;
  std::string::size_type v21;
  std::string *v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  std::string *v27;
  unint64_t v28;
  std::string::size_type v29;
  std::string::size_type v30;
  std::string *v31;
  std::string *v32;
  std::string::size_type v33;
  std::string::size_type v34;
  std::string::size_type v35;
  std::string::size_type v36;
  int v37;
  BOOL v38;
  std::string *v39;
  char *v40;
  std::string::size_type v41;
  char *i;
  int v43;
  std::string *v44;
  char *v45;
  std::string::size_type v46;
  std::string *v47;
  std::string::size_type v48;
  std::string *v49;
  unint64_t v50;
  unint64_t v51;
  std::string::value_type *p_p;
  std::string *v53;
  std::string::value_type *v54;
  std::string::value_type v55;
  std::string::size_type v56;
  uint64_t v57;
  uint64_t v58;
  std::string::value_type v59;
  const std::string::value_type *v60;
  std::string::size_type v61;
  uint64_t v62;
  std::string *v63;
  void *__p;
  std::string::size_type v65;
  int64_t v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  uint64_t v75;

  v75 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)(a2 + 184) = 0;
  if (!*(_QWORD *)(a2 + 48))
    goto LABEL_64;
  v7 = a3;
  std::string::basic_string[abi:ne180100](__b, ((char *)a4 - (char *)a3) >> 1, 0);
  if (a4 == v7)
  {
    v23 = *(_OWORD *)(a2 + 136);
    v71 = *(_OWORD *)(a2 + 120);
    v72 = v23;
    v24 = *(_OWORD *)(a2 + 168);
    v73 = *(_OWORD *)(a2 + 152);
    v74 = v24;
    v25 = *(_OWORD *)(a2 + 72);
    v67 = *(_OWORD *)(a2 + 56);
    v68 = v25;
    v26 = *(_OWORD *)(a2 + 104);
    v69 = *(_OWORD *)(a2 + 88);
    v70 = v26;
  }
  else
  {
    if ((__b->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v8 = 22;
    else
      v8 = (__b->__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
    std::string::resize(__b, v8, 0);
    v9 = *(_OWORD *)(a2 + 136);
    v71 = *(_OWORD *)(a2 + 120);
    v72 = v9;
    v10 = *(_OWORD *)(a2 + 168);
    v73 = *(_OWORD *)(a2 + 152);
    v74 = v10;
    v11 = *(_OWORD *)(a2 + 72);
    v67 = *(_OWORD *)(a2 + 56);
    v68 = v11;
    v12 = *(__n128 *)(a2 + 88);
    v13 = *(_OWORD *)(a2 + 104);
    size = HIBYTE(__b->__r_.__value_.__r.__words[2]);
    if ((size & 0x80u) == 0)
      v15 = __b;
    else
      v15 = (std::string *)__b->__r_.__value_.__r.__words[0];
    if ((size & 0x80u) != 0)
      size = __b->__r_.__value_.__l.__size_;
    v16 = (char *)v15 + size;
    v69 = *(_OWORD *)(a2 + 88);
    v70 = v13;
    while (1)
    {
      v17 = (*(uint64_t (**)(_QWORD, __int128 *, std::string *, std::string *, std::string **, std::string *, char *, uint64_t *, __n128))(**(_QWORD **)(a2 + 48) + 24))(*(_QWORD *)(a2 + 48), &v67, v7, a4, &v63, v15, v16, &v62, v12);
      v18 = v63 == v7;
      *(_QWORD *)(a2 + 184) += ((char *)v63 - (char *)v7) >> 2;
      if (v18)
        goto LABEL_62;
      if (v17 != 1)
        break;
      if ((__b->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v19 = __b;
      else
        v19 = (std::string *)__b->__r_.__value_.__r.__words[0];
      v20 = v62 - (_QWORD)v19;
      std::string::resize(__b, 2 * (v62 - (_QWORD)v19), 0);
      v21 = HIBYTE(__b->__r_.__value_.__r.__words[2]);
      if ((v21 & 0x80u) == 0)
        v22 = __b;
      else
        v22 = (std::string *)__b->__r_.__value_.__r.__words[0];
      v15 = (std::string *)((char *)v22 + v20);
      if ((v21 & 0x80u) != 0)
        v21 = __b->__r_.__value_.__l.__size_;
      v16 = (char *)v22 + v21;
      v7 = v63;
      if (v63 >= a4)
        goto LABEL_62;
    }
    if (!v17)
    {
      if ((__b->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v32 = __b;
      else
        v32 = (std::string *)__b->__r_.__value_.__r.__words[0];
      std::string::resize(__b, v62 - (_QWORD)v32, 0);
      goto LABEL_37;
    }
    if (v17 != 3)
      goto LABEL_62;
    if ((__b->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v27 = __b;
    else
      v27 = (std::string *)__b->__r_.__value_.__r.__words[0];
    std::string::resize(__b, (char *)v15 - (char *)v27, 0);
    LODWORD(v28) = SHIBYTE(__b->__r_.__value_.__r.__words[2]);
    if ((v28 & 0x80000000) != 0)
    {
      if (v7 == a4)
        goto LABEL_37;
      v29 = __b->__r_.__value_.__l.__size_;
      v50 = __b->__r_.__value_.__r.__words[2];
      v30 = (v50 & 0x7FFFFFFFFFFFFFFFLL) - 1;
      v31 = (std::string *)__b->__r_.__value_.__r.__words[0];
      v28 = HIBYTE(v50);
    }
    else
    {
      if (v7 == a4)
        goto LABEL_37;
      v29 = HIBYTE(__b->__r_.__value_.__r.__words[2]);
      v30 = 22;
      v31 = __b;
    }
    v51 = (char *)a4 - (char *)v7;
    if (v31 > v7 || (std::string *)((char *)&v31->__r_.__value_.__l.__data_ + v29 + 1) <= v7)
    {
      if (v30 - v29 < v51)
      {
        std::string::__grow_by(__b, v30, v29 - v30 + v51, v29, v29, 0, 0);
        __b->__r_.__value_.__l.__size_ = v29;
        LOBYTE(v28) = *((_BYTE *)&__b->__r_.__value_.__s + 23);
      }
      v53 = __b;
      if ((v28 & 0x80) != 0)
        v53 = (std::string *)__b->__r_.__value_.__r.__words[0];
      v54 = (char *)v53 + v29;
      do
      {
        v55 = v7->__r_.__value_.__s.__data_[0];
        v7 = (std::string *)((char *)v7 + 1);
        *v54++ = v55;
      }
      while (v7 != a4);
      *v54 = 0;
      v56 = v51 + v29;
      if (SHIBYTE(__b->__r_.__value_.__r.__words[2]) < 0)
        __b->__r_.__value_.__l.__size_ = v56;
      else
        *((_BYTE *)&__b->__r_.__value_.__s + 23) = v56 & 0x7F;
    }
    else
    {
      if (v51 >= 0x7FFFFFFFFFFFFFF8)
        std::string::__throw_length_error[abi:ne180100]();
      if (v51 > 0x16)
      {
        v57 = (v51 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v51 | 7) != 0x17)
          v57 = v51 | 7;
        v58 = v57 + 1;
        p_p = (std::string::value_type *)operator new(v57 + 1);
        v65 = (char *)a4 - (char *)v7;
        v66 = v58 | 0x8000000000000000;
        __p = p_p;
      }
      else
      {
        HIBYTE(v66) = (_BYTE)a4 - (_BYTE)v7;
        p_p = (std::string::value_type *)&__p;
      }
      do
      {
        v59 = v7->__r_.__value_.__s.__data_[0];
        v7 = (std::string *)((char *)v7 + 1);
        *p_p++ = v59;
      }
      while (v7 != a4);
      *p_p = 0;
      if (v66 >= 0)
        v60 = (const std::string::value_type *)&__p;
      else
        v60 = (const std::string::value_type *)__p;
      if (v66 >= 0)
        v61 = HIBYTE(v66);
      else
        v61 = v65;
      std::string::append(__b, v60, v61);
      if (SHIBYTE(v66) < 0)
        operator delete(__p);
    }
  }
LABEL_37:
  v33 = HIBYTE(__b->__r_.__value_.__r.__words[2]);
  v34 = __b->__r_.__value_.__l.__size_;
  if ((v33 & 0x80u) == 0)
    v35 = 22;
  else
    v35 = (__b->__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
  std::string::resize(__b, v35, 0);
  if ((v33 & 0x80u) == 0)
    v36 = v33;
  else
    v36 = v34;
  v37 = SHIBYTE(__b->__r_.__value_.__r.__words[2]);
  v38 = v37 < 0;
  if (v37 >= 0)
    v39 = __b;
  else
    v39 = (std::string *)__b->__r_.__value_.__r.__words[0];
  v40 = (char *)v39 + v36;
  if (v38)
    v41 = __b->__r_.__value_.__l.__size_;
  else
    v41 = HIBYTE(__b->__r_.__value_.__r.__words[2]);
  for (i = &v40[v41]; ; i = (char *)v47 + v46)
  {
    v43 = (*(uint64_t (**)(_QWORD, __int128 *, char *, char *, void **))(**(_QWORD **)(a2 + 48) + 40))(*(_QWORD *)(a2 + 48), &v67, v40, i, &__p);
    if (v43 != 1)
      break;
    if ((__b->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v44 = __b;
    else
      v44 = (std::string *)__b->__r_.__value_.__r.__words[0];
    v45 = (char *)((_BYTE *)__p - (_BYTE *)v44);
    std::string::resize(__b, 2 * ((_BYTE *)__p - (_BYTE *)v44), 0);
    v46 = HIBYTE(__b->__r_.__value_.__r.__words[2]);
    if ((v46 & 0x80u) == 0)
      v47 = __b;
    else
      v47 = (std::string *)__b->__r_.__value_.__r.__words[0];
    v40 = &v45[(_QWORD)v47];
    if ((v46 & 0x80u) != 0)
      v46 = __b->__r_.__value_.__l.__size_;
  }
  if (!v43)
  {
    v40 = (char *)__p;
    goto LABEL_70;
  }
  if (v43 == 3)
  {
LABEL_70:
    if ((__b->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v49 = __b;
    else
      v49 = (std::string *)__b->__r_.__value_.__r.__words[0];
    std::string::resize(__b, v40 - (char *)v49, 0);
    return;
  }
LABEL_62:
  if (SHIBYTE(__b->__r_.__value_.__r.__words[2]) < 0)
    operator delete(__b->__r_.__value_.__l.__data_);
LABEL_64:
  if ((*(char *)(a2 + 23) & 0x80000000) == 0)
  {
    if (*(_BYTE *)(a2 + 23))
    {
      *(_OWORD *)&__b->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
      __b->__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 16);
      return;
    }
LABEL_103:
    std::__throw_range_error[abi:ne180100]("wstring_convert: to_bytes error");
  }
  v48 = *(_QWORD *)(a2 + 8);
  if (!v48)
    goto LABEL_103;
  std::string::__init_copy_ctor_external(__b, *(const std::string::value_type **)a2, v48);
}

void sub_20A819600(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  uint64_t v17;

  if (a17 < 0)
    operator delete(__p);
  if (*(char *)(v17 + 23) < 0)
    operator delete(*(void **)v17);
  _Unwind_Resume(exception_object);
}

uint64_t std::wstring_convert<std::codecvt_utf8_utf16<wchar_t,1114111ul,(std::codecvt_mode)0>,wchar_t,std::allocator<wchar_t>,std::allocator<char>>::~wstring_convert(uint64_t a1)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 48);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

void std::__throw_range_error[abi:ne180100](const char *a1)
{
  std::runtime_error *exception;

  exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
  std::range_error::range_error[abi:ne180100](exception, a1);
  __cxa_throw(exception, (struct type_info *)off_24C32FBB0, MEMORY[0x24BEDAAD0]);
}

void sub_20A8196E8(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::runtime_error *std::range_error::range_error[abi:ne180100](std::runtime_error *a1, const char *a2)
{
  std::runtime_error *result;

  result = std::runtime_error::runtime_error(a1, a2);
  result->__vftable = (std::runtime_error_vtbl *)(MEMORY[0x24BEDB8A0] + 16);
  return result;
}

void std::codecvt_utf8_utf16<wchar_t,1114111ul,(std::codecvt_mode)0>::~codecvt_utf8_utf16[abi:ne180100](std::codecvt<wchar_t, char, mbstate_t> *a1)
{
  std::codecvt<wchar_t,char,__mbstate_t>::~codecvt(a1);
  JUMPOUT(0x20BD27AFCLL);
}

uint64_t mediaplatform::UTF8ToUTF16String@<X0>(uint64_t a1@<X0>, std::wstring *a2@<X8>)
{
  uint64_t v4;
  char *v5;
  _BYTE v7[192];
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  std::wstring_convert<std::codecvt_utf8_utf16<wchar_t,1114111ul,(std::codecvt_mode)0>,wchar_t,std::allocator<wchar_t>,std::allocator<char>>::wstring_convert[abi:ne180100]((uint64_t)v7);
  v4 = *(unsigned __int8 *)(a1 + 23);
  if ((v4 & 0x80u) == 0)
    v5 = (char *)a1;
  else
    v5 = *(char **)a1;
  if ((v4 & 0x80u) != 0)
    v4 = *(_QWORD *)(a1 + 8);
  std::wstring_convert<std::codecvt_utf8_utf16<wchar_t,1114111ul,(std::codecvt_mode)0>,wchar_t,std::allocator<wchar_t>,std::allocator<char>>::from_bytes(a2, (uint64_t)v7, v5, &v5[v4]);
  return std::wstring_convert<std::codecvt_utf8_utf16<wchar_t,1114111ul,(std::codecvt_mode)0>,wchar_t,std::allocator<wchar_t>,std::allocator<char>>::~wstring_convert((uint64_t)v7);
}

void sub_20A8197D4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::wstring_convert<std::codecvt_utf8_utf16<wchar_t,1114111ul,(std::codecvt_mode)0>,wchar_t,std::allocator<wchar_t>,std::allocator<char>>::~wstring_convert((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::wstring_convert<std::codecvt_utf8_utf16<wchar_t,1114111ul,(std::codecvt_mode)0>,wchar_t,std::allocator<wchar_t>,std::allocator<char>>::from_bytes(std::wstring *this, uint64_t a2, char *a3, char *a4)
{
  std::wstring *v5;
  char *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::wstring::size_type v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __n128 v16;
  __int128 v17;
  std::wstring::size_type size;
  std::wstring *v19;
  char *v20;
  int v21;
  BOOL v22;
  std::wstring *v23;
  uint64_t v24;
  std::wstring::size_type v25;
  char v26;
  std::wstring *v27;
  const std::wstring::value_type **v28;
  std::wstring *v29;
  unint64_t v30;
  std::wstring::size_type v31;
  uint64_t v32;
  std::wstring::size_type v33;
  std::wstring *v34;
  std::wstring::size_type v35;
  std::wstring *v36;
  unint64_t v37;
  unint64_t v38;
  _DWORD *p_p;
  std::wstring *v40;
  std::wstring *v41;
  std::wstring::value_type v42;
  std::wstring::size_type v43;
  uint64_t v44;
  uint64_t v45;
  std::wstring::value_type v46;
  const std::wstring::value_type *v47;
  std::wstring::size_type v48;
  uint64_t v49;
  char *v50;
  void *__p;
  std::wstring::size_type v52;
  int64_t v53;
  _OWORD v54[8];
  uint64_t v55;

  v5 = this;
  v55 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)(a2 + 184) = 0;
  if (!*(_QWORD *)(a2 + 48))
    goto LABEL_32;
  v7 = a3;
  v8 = 2 * (a4 - a3);
  if (v8 >= 0x3FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (v8 >= 5)
  {
    v9 = v8 + 2;
    if ((v8 | 1) != 5)
      v9 = v8 | 1;
    this = (std::wstring *)std::__allocate_at_least[abi:ne180100]<std::allocator<wchar_t>>(v9 + 1);
    v5->__r_.__value_.__l.__size_ = v8;
    v5->__r_.__value_.__r.__words[2] = v10 | 0x8000000000000000;
    v5->__r_.__value_.__r.__words[0] = (std::wstring::size_type)this;
  }
  else
  {
    *((_BYTE *)&this->__r_.__value_.__s + 23) = v8;
    if (a4 == a3)
      goto LABEL_11;
  }
  v11 = 0;
  do
    this->__r_.__value_.__s.__data_[v11++] = 0;
  while (v8 != v11);
LABEL_11:
  this->__r_.__value_.__s.__data_[v8] = 0;
  if (v7 != a4)
  {
    if ((v5->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v12 = 4;
    else
      v12 = (v5->__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
    std::wstring::resize(v5, v12, 0);
    v13 = *(_OWORD *)(a2 + 136);
    v54[4] = *(_OWORD *)(a2 + 120);
    v54[5] = v13;
    v14 = *(_OWORD *)(a2 + 168);
    v54[6] = *(_OWORD *)(a2 + 152);
    v54[7] = v14;
    v15 = *(_OWORD *)(a2 + 72);
    v54[0] = *(_OWORD *)(a2 + 56);
    v54[1] = v15;
    v16 = *(__n128 *)(a2 + 88);
    v17 = *(_OWORD *)(a2 + 104);
    size = HIBYTE(v5->__r_.__value_.__r.__words[2]);
    if ((size & 0x80u) == 0)
      v19 = v5;
    else
      v19 = (std::wstring *)v5->__r_.__value_.__r.__words[0];
    if ((size & 0x80u) != 0)
      size = v5->__r_.__value_.__l.__size_;
    v20 = (char *)v19 + 4 * size;
    v54[2] = *(_OWORD *)(a2 + 88);
    v54[3] = v17;
    while (1)
    {
      v21 = (*(uint64_t (**)(_QWORD, _OWORD *, char *, char *, char **, std::wstring *, char *, uint64_t *, __n128))(**(_QWORD **)(a2 + 48) + 32))(*(_QWORD *)(a2 + 48), v54, v7, a4, &v50, v19, v20, &v49, v16);
      v22 = v50 == v7;
      *(_QWORD *)(a2 + 184) += v50 - v7;
      if (v22)
        goto LABEL_45;
      if (v21 != 1)
        break;
      if ((v5->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v23 = v5;
      else
        v23 = (std::wstring *)v5->__r_.__value_.__r.__words[0];
      v24 = v49 - (_QWORD)v23;
      std::wstring::resize(v5, (v49 - (uint64_t)v23) >> 1, 0);
      v25 = HIBYTE(v5->__r_.__value_.__r.__words[2]);
      v26 = v25;
      v27 = (std::wstring *)v5->__r_.__value_.__r.__words[0];
      if ((v25 & 0x80u) == 0)
        v27 = v5;
      v19 = (std::wstring *)((char *)v27 + v24);
      if ((v25 & 0x80u) != 0)
        v25 = v5->__r_.__value_.__l.__size_;
      v20 = (char *)v27 + 4 * v25;
      v7 = v50;
      if (v50 >= a4)
      {
        if ((v26 & 0x80) == 0)
          goto LABEL_32;
LABEL_46:
        operator delete(v5->__r_.__value_.__l.__data_);
LABEL_32:
        v28 = (const std::wstring::value_type **)(a2 + 24);
        if ((*(char *)(a2 + 47) & 0x80000000) == 0)
        {
          if (*(_BYTE *)(a2 + 47))
          {
            *(_OWORD *)&v5->__r_.__value_.__l.__data_ = *(_OWORD *)v28;
            v5->__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 40);
            return;
          }
LABEL_83:
          std::__throw_range_error[abi:ne180100]("wstring_convert: from_bytes error");
        }
        v35 = *(_QWORD *)(a2 + 32);
        if (!v35)
          goto LABEL_83;
        std::wstring::__init_copy_ctor_external(v5, *v28, v35);
        return;
      }
    }
    if (v21)
    {
      if (v21 != 3)
      {
LABEL_45:
        if ((*((_BYTE *)&v5->__r_.__value_.__s + 23) & 0x80) != 0)
          goto LABEL_46;
        goto LABEL_32;
      }
      if ((v5->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v29 = v5;
      else
        v29 = (std::wstring *)v5->__r_.__value_.__r.__words[0];
      std::wstring::resize(v5, ((char *)v19 - (char *)v29) >> 2, 0);
      LODWORD(v30) = SHIBYTE(v5->__r_.__value_.__r.__words[2]);
      if ((v30 & 0x80000000) != 0)
      {
        v32 = a4 - v7;
        if (a4 == v7)
          return;
        v31 = v5->__r_.__value_.__l.__size_;
        v37 = v5->__r_.__value_.__r.__words[2];
        v33 = (v37 & 0x7FFFFFFFFFFFFFFFLL) - 1;
        v34 = (std::wstring *)v5->__r_.__value_.__r.__words[0];
        v30 = HIBYTE(v37);
      }
      else
      {
        if (v7 == a4)
          return;
        v31 = HIBYTE(v5->__r_.__value_.__r.__words[2]);
        v32 = a4 - v7;
        v33 = 4;
        v34 = v5;
      }
      v38 = v32 >> 2;
      if (v34 > (std::wstring *)v7 || (char *)v34->__r_.__value_.__r.__words + 4 * v31 + 4 <= v7)
      {
        if (v33 - v31 < v38)
        {
          std::wstring::__grow_by(v5, v33, v31 - v33 + v38, v31, v31, 0, 0);
          v5->__r_.__value_.__l.__size_ = v31;
          LOBYTE(v30) = *((_BYTE *)&v5->__r_.__value_.__s + 23);
        }
        v40 = v5;
        if ((v30 & 0x80) != 0)
          v40 = (std::wstring *)v5->__r_.__value_.__r.__words[0];
        v41 = (std::wstring *)((char *)v40 + 4 * v31);
        while (v7 != a4)
        {
          v42 = *(_DWORD *)v7;
          v7 += 4;
          v41->__r_.__value_.__s.__data_[0] = v42;
          v41 = (std::wstring *)((char *)v41 + 4);
        }
        v41->__r_.__value_.__s.__data_[0] = 0;
        v43 = v38 + v31;
        if (SHIBYTE(v5->__r_.__value_.__r.__words[2]) < 0)
          v5->__r_.__value_.__l.__size_ = v43;
        else
          *((_BYTE *)&v5->__r_.__value_.__s + 23) = v43 & 0x7F;
      }
      else
      {
        if (v32 < 0)
          std::string::__throw_length_error[abi:ne180100]();
        if ((unint64_t)v32 > 0x13)
        {
          v44 = (v38 & 0xFFFFFFFFFFFFFFFELL) + 2;
          if ((v38 | 1) != 5)
            v44 = v38 | 1;
          p_p = std::__allocate_at_least[abi:ne180100]<std::allocator<wchar_t>>(v44 + 1);
          v52 = v38;
          v53 = v45 | 0x8000000000000000;
          __p = p_p;
        }
        else
        {
          HIBYTE(v53) = (unint64_t)v32 >> 2;
          p_p = &__p;
        }
        while (v7 != a4)
        {
          v46 = *(_DWORD *)v7;
          v7 += 4;
          *p_p++ = v46;
        }
        *p_p = 0;
        if (v53 >= 0)
          v47 = (const std::wstring::value_type *)&__p;
        else
          v47 = (const std::wstring::value_type *)__p;
        if (v53 >= 0)
          v48 = HIBYTE(v53);
        else
          v48 = v52;
        std::wstring::append(v5, v47, v48);
        if (SHIBYTE(v53) < 0)
          operator delete(__p);
      }
    }
    else
    {
      if ((v5->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v36 = v5;
      else
        v36 = (std::wstring *)v5->__r_.__value_.__r.__words[0];
      std::wstring::resize(v5, (v49 - (uint64_t)v36) >> 2, 0);
    }
  }
}

void sub_20A819C24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  uint64_t v17;

  if (a17 < 0)
    operator delete(__p);
  if (*(char *)(v17 + 23) < 0)
    operator delete(*(void **)v17);
  _Unwind_Resume(exception_object);
}

uint64_t mediaplatform::StringsEqualCaseInsensitive(char *a1, char *a2)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  char *v7;
  char *v8;
  __darwin_ct_rune_t v9;
  BOOL v10;
  uint64_t result;
  uint64_t v12;
  char *v13;

  v2 = a1[23];
  v3 = *((_QWORD *)a1 + 1);
  if (v2 >= 0)
    v3 = a1[23];
  v4 = a2[23];
  v5 = (char)v4;
  if ((v4 & 0x80u) != 0)
    v4 = *((_QWORD *)a2 + 1);
  if (v3 != v4)
    return 0;
  if (!v3)
    return 1;
  if (v2 >= 0)
    v7 = a1;
  else
    v7 = *(char **)a1;
  if (v5 >= 0)
    v8 = a2;
  else
    v8 = *(char **)a2;
  while (1)
  {
    v9 = __tolower(*v7);
    v10 = v9 == __tolower(*v8);
    result = v10;
    if (!v10)
      break;
    ++v7;
    ++v8;
    v12 = a1[23];
    if ((v12 & 0x80u) == 0)
      v13 = a1;
    else
      v13 = *(char **)a1;
    if ((v12 & 0x80u) != 0)
      v12 = *((_QWORD *)a1 + 1);
    if (v7 == &v13[v12])
      return 1;
  }
  return result;
}

void mediaplatform::RegexReplace(std::sub_match<const char *> **a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X8>)
{
  std::sub_match<const char *> *v6;
  std::sub_match<const char *> *v7;
  char *v8;
  __int128 v9;
  uint64_t v10;
  char **v11;
  char *v12;
  uint64_t v13;
  unint64_t v14;
  void **v15;
  std::string::size_type v16;
  std::string::size_type v17;
  unint64_t v18;
  std::string::size_type v19;
  unint64_t v20;
  uint64_t v21;
  std::string::size_type size;
  std::string *v23;
  std::string::size_type v24;
  std::string::size_type v25;
  _BYTE *v26;
  char v27;
  void *v28;
  std::sub_match<const char *> **v29;
  std::sub_match<const char *> **v30;
  std::sub_match<const char *> **v31;
  int v32;
  int v33;
  std::sub_match<const char *> **v34;
  std::sub_match<const char *> **v35;
  std::sub_match<const char *> *v36;
  char *v37;
  char v38;
  char v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  char *v45;
  void *v47;
  void *v48;
  uint64_t v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  uint64_t v55;
  void *v56;
  void *v57;
  uint64_t v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  uint64_t v64;
  void *v65[2];
  unsigned __int8 v66;
  _BYTE __p[48];
  _BYTE v68[40];
  __int128 v69;
  __int128 v70;
  __int128 v71;
  uint64_t v72;
  _BYTE v73[28];
  _BYTE v74[56];
  __int128 v75;
  __int128 v76;
  __int128 v77;
  uint64_t v78;
  std::string v79;
  _BYTE v80[56];
  __int128 v81;
  __int128 v82;
  __int128 v83;
  uint64_t v84;

  *(_QWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_QWORD *)(a4 + 16) = 0;
  if (*((char *)a1 + 23) < 0)
  {
    v7 = *a1;
    v6 = a1[1];
  }
  else
  {
    v6 = (std::sub_match<const char *> *)*((unsigned __int8 *)a1 + 23);
    v7 = (std::sub_match<const char *> *)a1;
  }
  v8 = (char *)v6 + (_QWORD)v7;
  *(_QWORD *)v73 = v7;
  *(_QWORD *)&v73[8] = (char *)v6 + (_QWORD)v7;
  *(_QWORD *)&v73[16] = a2;
  *(_DWORD *)&v73[24] = 0;
  *(_QWORD *)&v75 = 0;
  *(_QWORD *)&v74[48] = 0;
  BYTE8(v75) = 0;
  v76 = 0uLL;
  LOBYTE(v77) = 0;
  BYTE8(v77) = 0;
  v78 = 0;
  memset(v74, 0, 41);
  memset(v68, 0, 17);
  *(_QWORD *)&v68[24] = 0;
  *(_QWORD *)&v68[32] = 0;
  LOBYTE(v69) = 0;
  BYTE8(v69) = 0;
  *(_QWORD *)&v70 = 0;
  memset(__p, 0, 41);
  std::basic_regex<char,std::regex_traits<char>>::__search<std::allocator<std::sub_match<char const*>>>(a2, v7, (std::sub_match<const char *> *)((char *)v6 + (_QWORD)v7), (std::vector<std::csub_match> *)__p, 0);
  std::match_results<std::__wrap_iter<char const*>>::__assign[abi:ne180100]<char const*,std::allocator<std::sub_match<char const*>>>((char **)v74, (uint64_t)v7, v8, (uint64_t *)__p, 0);
  if (*(_QWORD *)__p)
    operator delete(*(void **)__p);
  v45 = (char *)a1;
  *(_OWORD *)__p = *(_OWORD *)v73;
  *(_OWORD *)&__p[12] = *(_OWORD *)&v73[12];
  *(_QWORD *)&__p[40] = 0;
  *(_QWORD *)v68 = 0;
  *(_QWORD *)&__p[32] = 0;
  std::vector<std::sub_match<std::__wrap_iter<char const*>>>::__init_with_size[abi:ne180100]<std::sub_match<std::__wrap_iter<char const*>>*,std::sub_match<std::__wrap_iter<char const*>>*>(&__p[32], *(__int128 **)v74, *(__int128 **)&v74[8], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)&v74[8] - *(_QWORD *)v74) >> 3));
  v69 = v75;
  v70 = v76;
  v71 = v77;
  v72 = v78;
  *(_OWORD *)&v68[8] = *(_OWORD *)&v74[24];
  *(_OWORD *)&v68[24] = *(_OWORD *)&v74[40];
  while (*(_QWORD *)&__p[40] != *(_QWORD *)&__p[32])
  {
    memset(v80, 0, 24);
    std::vector<std::sub_match<std::__wrap_iter<char const*>>>::__init_with_size[abi:ne180100]<std::sub_match<std::__wrap_iter<char const*>>*,std::sub_match<std::__wrap_iter<char const*>>*>(v80, *(__int128 **)&__p[32], *(__int128 **)&__p[40], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)&__p[40] - *(_QWORD *)&__p[32]) >> 3));
    v81 = v69;
    v82 = v70;
    v83 = v71;
    v84 = v72;
    *(_OWORD *)&v80[24] = *(_OWORD *)&v68[8];
    *(_OWORD *)&v80[40] = *(_OWORD *)&v68[24];
    v57 = 0;
    v58 = 0;
    v9 = *(_OWORD *)v80;
    v56 = 0;
    std::vector<std::sub_match<std::__wrap_iter<char const*>>>::__init_with_size[abi:ne180100]<std::sub_match<std::__wrap_iter<char const*>>*,std::sub_match<std::__wrap_iter<char const*>>*>(&v56, *(__int128 **)v80, *(__int128 **)&v80[8], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)&v80[8] - *(_QWORD *)v80) >> 3));
    v61 = v69;
    v62 = v70;
    v63 = v71;
    v64 = v72;
    v59 = *(_OWORD *)&v68[8];
    v60 = *(_OWORD *)&v68[24];
    v10 = *(_QWORD *)(a3 + 24);
    if (!v10)
      std::__throw_bad_function_call[abi:ne180100]();
    (*(void (**)(void **__return_ptr, uint64_t, void **))(*(_QWORD *)v10 + 48))(v65, v10, &v56);
    if (v56)
    {
      v57 = v56;
      operator delete(v56);
    }
    if (*((_QWORD *)&v9 + 1) == (_QWORD)v9)
      v11 = (char **)&v80[24];
    else
      v11 = (char **)v9;
    v12 = *v11;
    v13 = *(unsigned __int8 *)(a4 + 23);
    if ((v13 & 0x80u) == 0)
      v14 = a4;
    else
      v14 = *(_QWORD *)a4;
    if ((v13 & 0x80u) != 0)
      v13 = *(_QWORD *)(a4 + 8);
    std::string::__insert_with_size<std::__wrap_iter<char const*>,std::__wrap_iter<char const*>>((std::string *)a4, v14 + v13, (char *)v7, v12, v12 - (char *)v7);
    if ((v66 & 0x80u) == 0)
      v15 = v65;
    else
      v15 = (void **)v65[0];
    if ((v66 & 0x80u) == 0)
      v16 = v66;
    else
      v16 = (std::string::size_type)v65[1];
    if (v16)
    {
      v17 = *(unsigned __int8 *)(a4 + 23);
      v18 = *(_QWORD *)a4;
      if ((v17 & 0x80u) == 0)
        v19 = *(unsigned __int8 *)(a4 + 23);
      else
        v19 = *(_QWORD *)(a4 + 8);
      if ((v17 & 0x80u) == 0)
        v20 = a4;
      else
        v20 = *(_QWORD *)a4;
      if (v20 > (unint64_t)v15 || v20 + v19 + 1 <= (unint64_t)v15)
      {
        if ((v17 & 0x80) != 0)
        {
          v24 = (*(_QWORD *)(a4 + 16) & 0x7FFFFFFFFFFFFFFFLL) - 1;
          v17 = *(_QWORD *)(a4 + 8);
          if (v24 - v17 >= v16)
            goto LABEL_47;
LABEL_45:
          std::string::__grow_by((std::string *)a4, v24, v17 + v16 - v24, v17, v19, 0, v16);
          *(_QWORD *)(a4 + 8) = v17 + v16;
          v18 = *(_QWORD *)a4;
        }
        else
        {
          v18 = a4;
          v24 = 22;
          if (22 - v17 < v16)
            goto LABEL_45;
LABEL_47:
          if (v17 == v19)
            v17 = v19;
          else
            memmove((void *)(v18 + v19 + v16), (const void *)(v18 + v19), v17 - v19);
        }
        v25 = v17 + v16;
        if (*(char *)(a4 + 23) < 0)
          *(_QWORD *)(a4 + 8) = v25;
        else
          *(_BYTE *)(a4 + 23) = v25 & 0x7F;
        *(_BYTE *)(v18 + v25) = 0;
        v26 = (_BYTE *)(v18 + v19);
        do
        {
          v27 = *(_BYTE *)v15;
          v15 = (void **)((char *)v15 + 1);
          *v26++ = v27;
          --v16;
        }
        while (v16);
        goto LABEL_55;
      }
      v21 = 0;
      memset(&v79, 0, sizeof(v79));
      do
        std::string::push_back(&v79, *((_BYTE *)v15 + v21++));
      while (v16 != v21);
      size = HIBYTE(v79.__r_.__value_.__r.__words[2]);
      if ((v79.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v23 = &v79;
      else
        v23 = (std::string *)v79.__r_.__value_.__r.__words[0];
      if ((v79.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        size = v79.__r_.__value_.__l.__size_;
      std::string::__insert_from_safe_copy[abi:ne180100]<std::__wrap_iter<char const*>,std::__wrap_iter<char const*>>((std::string *)a4, v16, v19, (char *)v23, (char *)v23 + size);
      if (SHIBYTE(v79.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v79.__r_.__value_.__l.__data_);
    }
LABEL_55:
    v28 = *(void **)v80;
    v29 = (std::sub_match<const char *> **)&v80[32];
    if (*(_QWORD *)&v80[8] != *(_QWORD *)v80)
      v29 = (std::sub_match<const char *> **)(*(_QWORD *)v80 + 8);
    v7 = *v29;
    if (((char)v66 & 0x80000000) == 0)
    {
      if (!*(_QWORD *)v80)
        goto LABEL_60;
LABEL_59:
      operator delete(v28);
      goto LABEL_60;
    }
    operator delete(v65[0]);
    if (v28)
      goto LABEL_59;
LABEL_60:
    v48 = 0;
    v49 = 0;
    v47 = 0;
    v31 = *(std::sub_match<const char *> ***)&__p[32];
    v30 = *(std::sub_match<const char *> ***)&__p[40];
    std::vector<std::sub_match<std::__wrap_iter<char const*>>>::__init_with_size[abi:ne180100]<std::sub_match<std::__wrap_iter<char const*>>*,std::sub_match<std::__wrap_iter<char const*>>*>(&v47, *(__int128 **)&__p[32], *(__int128 **)&__p[40], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)&__p[40] - *(_QWORD *)&__p[32]) >> 3));
    v52 = v69;
    v53 = v70;
    v54 = v71;
    v55 = v72;
    v50 = *(_OWORD *)&v68[8];
    v51 = *(_OWORD *)&v68[24];
    v32 = *(_DWORD *)&__p[24];
    v33 = *(_DWORD *)&__p[24] | 0x800;
    *(_DWORD *)&__p[24] |= 0x800u;
    if (v30 == v31)
      v34 = (std::sub_match<const char *> **)&v68[8];
    else
      v34 = v31;
    v35 = v31 + 1;
    if (v30 == v31)
      v35 = (std::sub_match<const char *> **)&v68[16];
    v36 = *v35;
    v37 = *(char **)&__p[8];
    if (*v34 != *v35)
      goto LABEL_66;
    if (*(std::sub_match<const char *> **)&__p[8] == v36)
    {
      if (v31)
LABEL_70:
        operator delete(v31);
LABEL_71:
      BYTE8(v71) = 0;
      *(_OWORD *)&__p[32] = 0u;
      memset(v68, 0, 25);
      *(_QWORD *)&v68[32] = 0;
      *(_QWORD *)&v69 = 0;
      BYTE8(v69) = 0;
      v70 = 0uLL;
      LOBYTE(v71) = 0;
      v72 = 0;
      goto LABEL_72;
    }
    *(_QWORD *)&v80[48] = 0;
    *(_QWORD *)&v81 = 0;
    BYTE8(v81) = 0;
    v82 = 0uLL;
    LOBYTE(v83) = 0;
    BYTE8(v83) = 0;
    v84 = 0;
    memset(v80, 0, 41);
    v39 = std::basic_regex<char,std::regex_traits<char>>::__search<std::allocator<std::sub_match<char const*>>>(*(uint64_t *)&__p[16], v36, *(std::sub_match<const char *> **)&__p[8], (std::vector<std::csub_match> *)v80, v32 | 0x860u);
    std::match_results<std::__wrap_iter<char const*>>::__assign[abi:ne180100]<char const*,std::allocator<std::sub_match<char const*>>>((char **)&__p[32], (uint64_t)v36, v37, (uint64_t *)v80, 1);
    if (*(_QWORD *)v80)
      operator delete(*(void **)v80);
    if ((v39 & 1) == 0)
    {
      v36 = (std::sub_match<const char *> *)((char *)v36 + 1);
      v33 = *(_DWORD *)&__p[24];
      v37 = *(char **)&__p[8];
LABEL_66:
      *(_DWORD *)&__p[24] = v33 | 0x80;
      *(_QWORD *)&v80[48] = 0;
      *(_QWORD *)&v81 = 0;
      BYTE8(v81) = 0;
      v82 = 0uLL;
      LOBYTE(v83) = 0;
      BYTE8(v83) = 0;
      v84 = 0;
      memset(v80, 0, 41);
      v38 = std::basic_regex<char,std::regex_traits<char>>::__search<std::allocator<std::sub_match<char const*>>>(*(uint64_t *)&__p[16], v36, (std::sub_match<const char *> *)v37, (std::vector<std::csub_match> *)v80, v33 | 0x80u);
      std::match_results<std::__wrap_iter<char const*>>::__assign[abi:ne180100]<char const*,std::allocator<std::sub_match<char const*>>>((char **)&__p[32], (uint64_t)v36, v37, (uint64_t *)v80, (v33 & 0x800) != 0);
      if (*(_QWORD *)v80)
        operator delete(*(void **)v80);
      if ((v38 & 1) == 0)
      {
        v31 = *(std::sub_match<const char *> ***)&__p[32];
        if (*(_QWORD *)&__p[32])
          goto LABEL_70;
        goto LABEL_71;
      }
    }
LABEL_72:
    if (v47)
    {
      v48 = v47;
      operator delete(v47);
    }
  }
  if (*(_QWORD *)&__p[32])
    operator delete(*(void **)&__p[32]);
  v40 = *(unsigned __int8 *)(a4 + 23);
  if ((v40 & 0x80u) == 0)
    v41 = a4;
  else
    v41 = *(_QWORD *)a4;
  if ((v40 & 0x80u) != 0)
    v40 = *(_QWORD *)(a4 + 8);
  v42 = v41 + v40;
  v43 = v45;
  if (v45[23] < 0)
  {
    v43 = *(char **)v45;
    v44 = *((_QWORD *)v45 + 1);
  }
  else
  {
    v44 = v45[23];
  }
  std::string::__insert_with_size<std::__wrap_iter<char const*>,std::__wrap_iter<char const*>>((std::string *)a4, v42, (char *)v7, &v43[v44], &v43[v44] - (char *)v7);
  if (*(_QWORD *)v74)
    operator delete(*(void **)v74);
}

void sub_20A81A434()
{
  __break(1u);
}

void sub_20A81A4E0()
{
  __cxa_end_catch();
  JUMPOUT(0x20A81A4E8);
}

_QWORD *std::vector<std::sub_match<std::__wrap_iter<char const*>>>::__init_with_size[abi:ne180100]<std::sub_match<std::__wrap_iter<char const*>>*,std::sub_match<std::__wrap_iter<char const*>>*>(_QWORD *result, __int128 *a2, __int128 *a3, unint64_t a4)
{
  _QWORD *v4;
  uint64_t v7;
  __int128 v8;

  if (a4)
  {
    v4 = result;
    if (a4 >= 0xAAAAAAAAAAAAAABLL)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    result = std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(a4);
    *v4 = result;
    v4[1] = result;
    v4[2] = &result[3 * v7];
    while (a2 != a3)
    {
      v8 = *a2;
      result[2] = *((_QWORD *)a2 + 2);
      *(_OWORD *)result = v8;
      result += 3;
      a2 = (__int128 *)((char *)a2 + 24);
    }
    v4[1] = result;
  }
  return result;
}

void sub_20A81A5C0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::string::__insert_with_size<std::__wrap_iter<char const*>,std::__wrap_iter<char const*>>(std::string *this, uint64_t a2, char *a3, char *a4, std::string::size_type __n_add)
{
  std::string::value_type *v7;
  std::string::size_type size;
  std::string *v10;
  std::string::size_type v11;
  unsigned int v12;
  std::string::size_type v13;
  std::string::size_type v14;
  std::string *v15;
  std::string v16;

  v7 = a3;
  if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
  {
    if (!__n_add)
      return;
    v10 = (std::string *)this->__r_.__value_.__r.__words[0];
    size = this->__r_.__value_.__l.__size_;
  }
  else
  {
    if (!__n_add)
      return;
    size = HIBYTE(this->__r_.__value_.__r.__words[2]);
    v10 = this;
  }
  v11 = a2 - (_QWORD)v10;
  if (v10 > (std::string *)a3 || (char *)&v10->__r_.__value_.__l.__data_ + size + 1 <= a3)
  {
    std::string::__insert_from_safe_copy[abi:ne180100]<std::__wrap_iter<char const*>,std::__wrap_iter<char const*>>(this, __n_add, v11, a3, a4);
  }
  else
  {
    memset(&v16, 0, sizeof(v16));
    if (a3 == a4)
    {
      v13 = 0;
      v14 = 0;
      v12 = 0;
    }
    else
    {
      do
        std::string::push_back(&v16, *v7++);
      while (v7 != a4);
      v12 = HIBYTE(v16.__r_.__value_.__r.__words[2]);
      v13 = v16.__r_.__value_.__l.__size_;
      v14 = v16.__r_.__value_.__r.__words[0];
    }
    if ((v12 & 0x80u) == 0)
      v15 = &v16;
    else
      v15 = (std::string *)v14;
    if ((v12 & 0x80u) == 0)
      v13 = v12;
    std::string::__insert_from_safe_copy[abi:ne180100]<std::__wrap_iter<char const*>,std::__wrap_iter<char const*>>(this, __n_add, v11, (char *)v15, (char *)v15 + v13);
    if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v16.__r_.__value_.__l.__data_);
  }
}

void sub_20A81A700(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t std::basic_regex<char,std::regex_traits<char>>::__search<std::allocator<std::sub_match<char const*>>>(uint64_t a1, std::sub_match<const char *> *a2, std::sub_match<const char *> *a3, std::vector<std::csub_match> *this, int a5)
{
  int v9;
  int v10;
  const std::vector<std::csub_match>::value_type *v11;
  std::vector<std::csub_match>::pointer end;
  std::vector<std::csub_match>::pointer begin;
  const std::vector<std::csub_match>::value_type *v14;
  std::sub_match<const char *> *first;
  std::sub_match<const char *> *second;
  uint64_t result;
  int v18;
  const char *v19;
  int v20;

  if ((a5 & 0x80) != 0)
    v9 = a5 & 0xFFA;
  else
    v9 = a5;
  v10 = *(_DWORD *)(a1 + 28);
  this[1].__begin_ = a3;
  v11 = (const std::vector<std::csub_match>::value_type *)&this[1];
  this[1].__end_ = a3;
  LOBYTE(this[1].__end_cap_.__value_) = 0;
  std::vector<std::sub_match<char const*>>::assign(this, (v10 + 1), (std::vector<std::csub_match>::const_reference)&this[1]);
  this[2].__begin_ = a2;
  this[2].__end_ = a2;
  LOBYTE(this[2].__end_cap_.__value_) = 0;
  *(std::pair<const char *, const char *> *)&this[3].__begin_ = v11->std::pair<const char *, const char *>;
  LOBYTE(this[3].__end_cap_.__value_) = this[1].__end_cap_.__value_;
  if ((v9 & 0x800) == 0)
    this[4].__end_ = a2;
  LOBYTE(this[4].__begin_) = 1;
  if (!std::basic_regex<char,std::regex_traits<char>>::__match_at_start<std::allocator<std::sub_match<char const*>>>(a1, (const char *)a2, (const char *)a3, (uint64_t *)this, v9, (v9 & 0x800) == 0))
  {
    if (a2 == a3 || (v9 & 0x40) != 0)
      goto LABEL_18;
    v18 = v9 | 0x80;
    v19 = (char *)&a2->first + 1;
    if (v19 != (const char *)a3)
    {
      do
      {
        std::vector<std::sub_match<char const*>>::assign(this, 0xAAAAAAAAAAAAAAABLL * (((char *)this->__end_ - (char *)this->__begin_) >> 3), v11);
        v20 = std::basic_regex<char,std::regex_traits<char>>::__match_at_start<std::allocator<std::sub_match<char const*>>>(a1, v19, (const char *)a3, (uint64_t *)this, v18, 0);
        begin = this->__begin_;
        end = this->__end_;
        if (v20)
          goto LABEL_8;
        std::vector<std::sub_match<char const*>>::assign(this, 0xAAAAAAAAAAAAAAABLL * (((char *)end - (char *)begin) >> 3), v11);
      }
      while (++v19 != (const char *)a3);
    }
    std::vector<std::sub_match<char const*>>::assign(this, 0xAAAAAAAAAAAAAAABLL * (((char *)this->__end_ - (char *)this->__begin_) >> 3), v11);
    if (!std::basic_regex<char,std::regex_traits<char>>::__match_at_start<std::allocator<std::sub_match<char const*>>>(a1, (const char *)a3, (const char *)a3, (uint64_t *)this, v18, 0))
    {
LABEL_18:
      result = 0;
      this->__end_ = this->__begin_;
      return result;
    }
  }
  begin = this->__begin_;
  end = this->__end_;
LABEL_8:
  if (end == begin)
    v14 = v11;
  else
    v14 = begin;
  first = (std::sub_match<const char *> *)v14->first;
  this[2].__end_ = (std::vector<std::csub_match>::pointer)v14->first;
  LOBYTE(this[2].__end_cap_.__value_) = this[2].__begin_ != first;
  second = (std::sub_match<const char *> *)v14->second;
  this[3].__begin_ = second;
  LOBYTE(this[3].__end_cap_.__value_) = second != this[3].__end_;
  return 1;
}

void std::match_results<std::__wrap_iter<char const*>>::__assign[abi:ne180100]<char const*,std::allocator<std::sub_match<char const*>>>(char **a1, uint64_t a2, char *a3, uint64_t *a4, char a5)
{
  uint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  unint64_t v14;
  unint64_t v15;
  char *v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  char *v25;
  char *v26;
  char *v27;
  __int128 v28;
  char *v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  _QWORD *v37;
  _QWORD *v38;
  uint64_t *v39;
  uint64_t *v40;
  char v41;
  char *v42;
  char *v43;

  v10 = a4[6];
  v11 = 0xAAAAAAAAAAAAAAABLL * ((a4[1] - *a4) >> 3);
  v13 = *a1;
  v12 = a1[1];
  v14 = 0xAAAAAAAAAAAAAAABLL * ((v12 - *a1) >> 3);
  v15 = v11 - v14;
  if (v11 <= v14)
  {
    if (v11 < v14)
    {
      v12 = &v13[8 * ((a4[1] - *a4) >> 3)];
      a1[1] = v12;
    }
  }
  else
  {
    v16 = a1[2];
    if (0xAAAAAAAAAAAAAAABLL * ((v16 - v12) >> 3) >= v15)
    {
      v29 = &v12[24 * v15];
      v30 = 8 * ((a4[1] - *a4) >> 3) - 8 * ((v12 - *a1) >> 3);
      do
      {
        *(_QWORD *)v12 = 0;
        *((_QWORD *)v12 + 1) = 0;
        v12[16] = 0;
        v12 += 24;
        v30 -= 24;
      }
      while (v30);
      a1[1] = v29;
      v12 = v29;
    }
    else
    {
      if (v11 > 0xAAAAAAAAAAAAAAALL)
        std::vector<std::string>::__throw_length_error[abi:ne180100]();
      v17 = 0xAAAAAAAAAAAAAAABLL * ((v16 - v13) >> 3);
      v18 = 2 * v17;
      if (2 * v17 <= v11)
        v18 = 0xAAAAAAAAAAAAAAABLL * ((a4[1] - *a4) >> 3);
      if (v17 >= 0x555555555555555)
        v19 = 0xAAAAAAAAAAAAAAALL;
      else
        v19 = v18;
      v20 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v19);
      v22 = &v20[24 * v14];
      v12 = &v20[24 * v11];
      v23 = v22;
      v24 = 24 * v11 - 24 * v14;
      do
      {
        *(_QWORD *)v23 = 0;
        *((_QWORD *)v23 + 1) = 0;
        v23[16] = 0;
        v23 += 24;
        v24 -= 24;
      }
      while (v24);
      v25 = &v20[24 * v21];
      v27 = *a1;
      v26 = a1[1];
      if (v26 != *a1)
      {
        do
        {
          v28 = *(_OWORD *)(v26 - 24);
          *((_QWORD *)v22 - 1) = *((_QWORD *)v26 - 1);
          *(_OWORD *)(v22 - 24) = v28;
          v22 -= 24;
          v26 -= 24;
        }
        while (v26 != v27);
        v26 = *a1;
      }
      *a1 = v22;
      a1[1] = v12;
      a1[2] = v25;
      if (v26)
      {
        operator delete(v26);
        v12 = a1[1];
      }
    }
  }
  v31 = *a1;
  if (v12 != *a1)
  {
    v32 = 0;
    v33 = 0;
    v35 = *a4;
    v34 = a4[1];
    do
    {
      v36 = 0xAAAAAAAAAAAAAAABLL * ((v34 - v35) >> 3);
      v37 = (_QWORD *)(v35 + v32);
      if (v36 <= v33)
        v38 = a4 + 3;
      else
        v38 = v37;
      *(_QWORD *)&v31[v32] = a2 + *v38 - v10;
      if (0xAAAAAAAAAAAAAAABLL * ((a4[1] - *a4) >> 3) <= v33)
        v39 = a4 + 3;
      else
        v39 = (uint64_t *)(*a4 + v32);
      *(_QWORD *)&(*a1)[v32 + 8] = a2 + v39[1] - v10;
      v35 = *a4;
      v34 = a4[1];
      if (0xAAAAAAAAAAAAAAABLL * ((v34 - *a4) >> 3) <= v33)
        v40 = a4 + 3;
      else
        v40 = (uint64_t *)(*a4 + v32);
      v41 = *((_BYTE *)v40 + 16);
      v31 = *a1;
      v42 = a1[1];
      (*a1)[v32 + 16] = v41;
      ++v33;
      v32 += 24;
    }
    while (v33 < 0xAAAAAAAAAAAAAAABLL * ((v42 - v31) >> 3));
  }
  a1[3] = a3;
  a1[4] = a3;
  *((_BYTE *)a1 + 40) = 0;
  v43 = (char *)(a2 + a4[6] - v10);
  a1[6] = v43;
  a1[7] = (char *)(a2 + a4[7] - v10);
  *((_BYTE *)a1 + 64) = *((_BYTE *)a4 + 64);
  a1[9] = (char *)(a2 + a4[9] - v10);
  a1[10] = (char *)(a2 + a4[10] - v10);
  *((_BYTE *)a1 + 88) = *((_BYTE *)a4 + 88);
  if ((a5 & 1) == 0)
    a1[13] = v43;
  *((_BYTE *)a1 + 96) = *((_BYTE *)a4 + 96);
}

uint64_t std::basic_regex<char,std::regex_traits<char>>::__match_at_start<std::allocator<std::sub_match<char const*>>>(uint64_t a1, const char *a2, const char *a3, uint64_t *a4, int a5, char a6)
{
  int v7;
  const char *v9;
  const char *v10;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unsigned int v15;
  _DWORD *v16;
  BOOL v17;
  uint64_t v18;
  _QWORD *v19;
  _OWORD *v20;
  const char *v21;
  char *v22;
  __int128 v23;
  uint64_t v24;
  char *v25;
  __int128 v26;
  uint64_t v27;
  char *v28;
  __int128 *v29;
  __int128 *v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  char *v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  __int128 v38;
  __int128 *v39;
  char *v40;
  char *v41;
  __int128 v42;
  char *v43;
  char *v44;
  int64_t v45;
  char *v46;
  char *v47;
  unint64_t v48;
  char *v49;
  uint64_t v50;
  unint64_t v51;
  char *v52;
  uint64_t v53;
  char *v54;
  __int128 v55;
  unint64_t v56;
  char *v57;
  char *v58;
  char *v59;
  __int128 v60;
  char *v61;
  char *v62;
  char *v63;
  _QWORD *v64;
  _QWORD *v65;
  char *v66;
  uint64_t v67;
  _QWORD *v68;
  const char *v69;
  signed int v70;
  _DWORD *v71;
  unsigned int v72;
  uint64_t v73;
  _QWORD *v74;
  _OWORD *v75;
  const char *v76;
  char *v77;
  __int128 v78;
  uint64_t v79;
  char *v80;
  __int128 v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  void *v85;
  _BYTE *v86;
  unsigned int v87;
  uint64_t v88;
  char v89;
  _QWORD *v90;
  unint64_t v91;
  unint64_t v92;
  uint64_t v93;
  unint64_t v94;
  uint64_t v95;
  unsigned int v96;
  uint64_t v97;
  _QWORD *v98;
  unint64_t v99;
  unint64_t v100;
  unint64_t v101;
  uint64_t v102;
  unint64_t v104;
  uint64_t v105;
  unint64_t v106;
  uint64_t v107;
  uint64_t v108;
  _QWORD *v109;
  const char *v110;
  BOOL v111;
  char v112;
  BOOL v113;
  uint64_t v114;
  const char *v115;
  void **v116;
  _BYTE *v117;
  const char *v118;
  _QWORD *v119;
  _QWORD *v120;
  unint64_t v121;
  _QWORD *v122;
  unint64_t v123;
  char *v124;
  char *v125;
  __int128 v126;
  uint64_t v127;
  unint64_t v128;
  uint64_t v129;
  unint64_t v130;
  uint64_t v131;
  uint64_t *v132;
  char *v133;
  char *v134;
  void *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  size_t v139;
  void *v140;
  char *v141;
  unint64_t v142;
  char *v143;
  uint64_t v144;
  char *v145;
  uint64_t v146;
  uint64_t v147;
  char *v148;
  uint64_t v149;
  uint64_t v150;
  void *v151;
  uint64_t v152;
  unint64_t v153;
  uint64_t v154;
  uint64_t v155;
  char *v156;
  unint64_t v157;
  uint64_t v158;
  __int128 v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  unint64_t v167;
  _BYTE *v168;
  unsigned int v169;
  uint64_t v170;
  char v171;
  char *v172;
  char *v173;
  uint64_t v174;
  uint64_t *v175;
  uint64_t *v176;
  char *v177;
  int64_t v178;
  char *v179;
  char *v180;
  const char *v181;
  char v182;
  const char *v183;
  char v184;
  const char *v185;
  const char *v186;
  const char *v187;
  const char *i;
  __int16 v189;
  const char *v190;
  void *v191[2];
  __int128 v192;
  int64x2_t v193;
  _BYTE v194[56];
  void *__p[2];
  _QWORD v196[4];
  std::vector<std::csub_match>::value_type __x;

  v7 = a5;
  v9 = a3;
  v10 = a2;
  v189 = a5;
  if ((*(_WORD *)(a1 + 24) & 0x1F0) == 0)
  {
    v191[0] = 0;
    v191[1] = 0;
    *(_QWORD *)&v192 = 0;
    v67 = *(_QWORD *)(a1 + 40);
    if (v67)
    {
      __x.first = a3;
      __x.second = a3;
      __x.matched = 0;
      *(_DWORD *)v194 = 0;
      memset(&v194[8], 0, 48);
      *(_OWORD *)__p = 0u;
      memset(v196, 0, 21);
      v191[1] = std::vector<std::__state<char>>::__push_back_slow_path<std::__state<char>>(v191, (uint64_t)v194);
      if (__p[0])
        operator delete(__p[0]);
      if (*(_QWORD *)&v194[32])
        operator delete(*(void **)&v194[32]);
      v68 = v191[1];
      *((_DWORD *)v191[1] - 24) = 0;
      *(v68 - 11) = v10;
      *(v68 - 10) = v10;
      *(v68 - 9) = v9;
      std::vector<std::sub_match<char const*>>::resize((std::vector<std::csub_match> *)(v68 - 8), *(unsigned int *)(a1 + 28), &__x);
      std::vector<std::pair<unsigned long,char const*>>::resize((std::vector<std::pair<unsigned long, const char *>> *)((char *)v191[1] - 40), *(unsigned int *)(a1 + 32));
      v69 = v10;
      v187 = v9;
      v70 = (_DWORD)v9 - (_DWORD)v10;
      v71 = v191[1];
      *((_QWORD *)v191[1] - 2) = v67;
      *(v71 - 2) = v7;
      *((_BYTE *)v71 - 4) = a6;
      v72 = 1;
      while (2)
      {
        if ((v72 & 0xFFF) != 0 || (int)(v72 >> 12) < v70)
        {
          v74 = v71 - 4;
          v73 = *((_QWORD *)v71 - 2);
          v75 = v71 - 24;
          if (v73)
            (*(void (**)(uint64_t, _DWORD *))(*(_QWORD *)v73 + 16))(v73, v71 - 24);
          switch(*(_DWORD *)v75)
          {
            case 0xFFFFFC18:
              v76 = (const char *)*((_QWORD *)v71 - 10);
              if ((v189 & 0x20) != 0 && v76 == v69 || (v189 & 0x1000) != 0 && v76 != v187)
                goto LABEL_113;
              v164 = *a4;
              *(_QWORD *)v164 = v69;
              *(_QWORD *)(v164 + 8) = v76;
              *(_BYTE *)(v164 + 16) = 1;
              v165 = *((_QWORD *)v71 - 8);
              v166 = *((_QWORD *)v71 - 7) - v165;
              if (v166)
              {
                v167 = 0xAAAAAAAAAAAAAAABLL * (v166 >> 3);
                v168 = (_BYTE *)(v165 + 16);
                v169 = 1;
                do
                {
                  v170 = v164 + 24 * v169;
                  *(_OWORD *)v170 = *((_OWORD *)v168 - 1);
                  v171 = *v168;
                  v168 += 24;
                  *(_BYTE *)(v170 + 16) = v171;
                  v17 = v167 > v169++;
                }
                while (v17);
              }
              v83 = 1;
              goto LABEL_232;
            case 0xFFFFFC1D:
            case 0xFFFFFC1E:
            case 0xFFFFFC21:
              goto LABEL_120;
            case 0xFFFFFC1F:
LABEL_113:
              v77 = (char *)v191[1] - 96;
              std::allocator<std::__state<char>>::destroy[abi:ne180100]((_QWORD *)v191[1] - 12);
              v191[1] = v77;
              goto LABEL_120;
            case 0xFFFFFC20:
              v78 = *((_OWORD *)v71 - 5);
              *(_OWORD *)v194 = *v75;
              *(_OWORD *)&v194[16] = v78;
              memset(&v194[32], 0, 24);
              std::vector<std::sub_match<char const*>>::__init_with_size[abi:ne180100]<std::sub_match<char const*>*,std::sub_match<char const*>*>(&v194[32], *((__int128 **)v71 - 8), *((__int128 **)v71 - 7), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)v71 - 7) - *((_QWORD *)v71 - 8)) >> 3));
              __p[0] = 0;
              __p[1] = 0;
              v196[0] = 0;
              std::vector<std::pair<unsigned long,char const*>>::__init_with_size[abi:ne180100]<std::pair<unsigned long,char const*>*,std::pair<unsigned long,char const*>*>((char *)__p, *((__int128 **)v71 - 5), *((__int128 **)v71 - 4), (uint64_t)(*((_QWORD *)v71 - 4) - *((_QWORD *)v71 - 5)) >> 4);
              v79 = *v74;
              *(_QWORD *)((char *)&v196[1] + 5) = *(_QWORD *)((char *)v71 - 11);
              v196[1] = v79;
              (*(void (**)(_QWORD, uint64_t, _DWORD *))(*(_QWORD *)*v74 + 24))(*v74, 1, v71 - 24);
              (*(void (**)(_QWORD, _QWORD, _BYTE *))(*(_QWORD *)v196[1] + 24))(v196[1], 0, v194);
              v80 = (char *)v191[1];
              if (v191[1] >= (void *)v192)
              {
                v191[1] = std::vector<std::__state<char>>::__push_back_slow_path<std::__state<char>>(v191, (uint64_t)v194);
                if (__p[0])
                {
                  __p[1] = __p[0];
                  operator delete(__p[0]);
                }
              }
              else
              {
                v81 = *(_OWORD *)&v194[16];
                *(_OWORD *)v191[1] = *(_OWORD *)v194;
                *((_OWORD *)v80 + 1) = v81;
                *((_QWORD *)v80 + 4) = 0;
                *((_QWORD *)v80 + 5) = 0;
                *((_QWORD *)v80 + 6) = 0;
                *((_QWORD *)v80 + 7) = 0;
                *((_OWORD *)v80 + 2) = *(_OWORD *)&v194[32];
                *((_QWORD *)v80 + 6) = *(_QWORD *)&v194[48];
                memset(&v194[32], 0, 24);
                *((_QWORD *)v80 + 8) = 0;
                *((_QWORD *)v80 + 9) = 0;
                *(_OWORD *)(v80 + 56) = *(_OWORD *)__p;
                *((_QWORD *)v80 + 9) = v196[0];
                __p[0] = 0;
                __p[1] = 0;
                v196[0] = 0;
                v82 = v196[1];
                *(_QWORD *)(v80 + 85) = *(_QWORD *)((char *)&v196[1] + 5);
                *((_QWORD *)v80 + 10) = v82;
                v191[1] = v80 + 96;
              }
              if (*(_QWORD *)&v194[32])
              {
                *(_QWORD *)&v194[40] = *(_QWORD *)&v194[32];
                operator delete(*(void **)&v194[32]);
              }
LABEL_120:
              v71 = v191[1];
              ++v72;
              if (v191[0] == v191[1])
                goto LABEL_121;
              continue;
            default:
              std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)16>();
          }
        }
        break;
      }
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)12>();
    }
    goto LABEL_121;
  }
  v190 = (const char *)(a3 - a2);
  if (*(_DWORD *)(a1 + 28))
  {
    v191[0] = 0;
    v191[1] = 0;
    *(_QWORD *)&v192 = 0;
    v12 = *(_QWORD *)(a1 + 40);
    if (v12)
    {
      __x.first = a3;
      __x.second = a3;
      __x.matched = 0;
      *(_DWORD *)v194 = 0;
      memset(&v194[8], 0, 48);
      *(_OWORD *)__p = 0u;
      memset(v196, 0, 21);
      v191[1] = std::vector<std::__state<char>>::__push_back_slow_path<std::__state<char>>(v191, (uint64_t)v194);
      if (__p[0])
        operator delete(__p[0]);
      if (*(_QWORD *)&v194[32])
        operator delete(*(void **)&v194[32]);
      v175 = a4;
      v13 = v191[1];
      *((_DWORD *)v191[1] - 24) = 0;
      *(v13 - 11) = v10;
      *(v13 - 10) = v10;
      v186 = v9;
      *(v13 - 9) = v9;
      std::vector<std::sub_match<char const*>>::resize((std::vector<std::csub_match> *)(v13 - 8), *(unsigned int *)(a1 + 28), &__x);
      std::vector<std::pair<unsigned long,char const*>>::resize((std::vector<std::pair<unsigned long, const char *>> *)((char *)v191[1] - 40), *(unsigned int *)(a1 + 32));
      v177 = 0;
      v179 = 0;
      v173 = 0;
      v174 = 0;
      v180 = 0;
      v172 = 0;
      v14 = 0;
      v182 = 0;
      v15 = 0;
      v16 = v191[1];
      *((_QWORD *)v191[1] - 2) = v12;
      *(v16 - 2) = v7;
      *((_BYTE *)v16 - 4) = a6;
      do
      {
        v17 = (++v15 & 0xFFF) != 0 || (int)(v15 >> 12) < (int)v190;
        if (!v17)
          std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)12>();
        v19 = v16 - 4;
        v18 = *((_QWORD *)v16 - 2);
        v20 = v16 - 24;
        if (v18)
          (*(void (**)(uint64_t, _DWORD *))(*(_QWORD *)v18 + 16))(v18, v16 - 24);
        switch(*(_DWORD *)v20)
        {
          case 0xFFFFFC18:
            v21 = (const char *)*((_QWORD *)v16 - 10);
            if ((v189 & 0x20) != 0 && v21 == v10 || (v189 & 0x1000) != 0 && v21 != v186)
              goto LABEL_21;
            v28 = v177;
            if ((v182 & ((uint64_t)v14 >= (uint64_t)&v21[-*((_QWORD *)v16 - 11)])) == 0)
            {
              v183 = &v21[-*((_QWORD *)v16 - 11)];
              v30 = (__int128 *)*((_QWORD *)v16 - 8);
              v29 = (__int128 *)*((_QWORD *)v16 - 7);
              v31 = 0xAAAAAAAAAAAAAAABLL * (((char *)v29 - (char *)v30) >> 3);
              if (0xAAAAAAAAAAAAAAABLL * ((v174 - (uint64_t)v179) >> 3) >= v31)
              {
                v37 = (uint64_t)v172;
                if (0xAAAAAAAAAAAAAAABLL * ((v177 - v179) >> 3) >= v31)
                {
                  if (v30 == v29)
                  {
                    v43 = v179;
                    v44 = v179;
                  }
                  else
                  {
                    v43 = v179;
                    v44 = v179;
                    do
                    {
                      *(_OWORD *)v44 = *v30;
                      v44[16] = *((_BYTE *)v30 + 16);
                      v44 += 24;
                      v30 = (__int128 *)((char *)v30 + 24);
                    }
                    while (v30 != v29);
                  }
                  v45 = v44 - v43;
                  v28 = v43;
                }
                else
                {
                  v39 = (__int128 *)((char *)v30 + 8 * ((v177 - v179) >> 3));
                  if (v177 != v179)
                  {
                    v40 = v179;
                    do
                    {
                      *(_OWORD *)v40 = *v30;
                      v40[16] = *((_BYTE *)v30 + 16);
                      v30 = (__int128 *)((char *)v30 + 24);
                      v40 += 24;
                    }
                    while (v30 != v39);
                  }
                  v41 = v177;
                  while (v39 != v29)
                  {
                    v42 = *v39;
                    *((_QWORD *)v41 + 2) = *((_QWORD *)v39 + 2);
                    *(_OWORD *)v41 = v42;
                    v41 += 24;
                    v39 = (__int128 *)((char *)v39 + 24);
                  }
                  v45 = v41 - v177;
                }
              }
              else
              {
                if (v179)
                {
                  operator delete(v179);
                  v174 = 0;
                }
                if (v31 > 0xAAAAAAAAAAAAAAALL)
                  goto LABEL_245;
                v32 = 0x5555555555555556 * (v174 >> 3);
                if (v32 <= v31)
                  v32 = 0xAAAAAAAAAAAAAAABLL * (((char *)v29 - (char *)v30) >> 3);
                v33 = 0xAAAAAAAAAAAAAAABLL * (v174 >> 3) >= 0x555555555555555 ? 0xAAAAAAAAAAAAAAALL : v32;
                if (v33 > 0xAAAAAAAAAAAAAAALL)
LABEL_245:
                  std::vector<std::string>::__throw_length_error[abi:ne180100]();
                v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v33);
                v28 = v34;
                v36 = v34;
                if (v30 == v29)
                {
                  v37 = (uint64_t)v172;
                }
                else
                {
                  v37 = (uint64_t)v172;
                  do
                  {
                    v38 = *v30;
                    *((_QWORD *)v36 + 2) = *((_QWORD *)v30 + 2);
                    *(_OWORD *)v36 = v38;
                    v36 += 24;
                    v30 = (__int128 *)((char *)v30 + 24);
                  }
                  while (v30 != v29);
                }
                v174 = (uint64_t)&v34[24 * v35];
                v45 = v36 - v34;
                v179 = v34;
              }
              v47 = (char *)*((_QWORD *)v16 - 5);
              v46 = (char *)*((_QWORD *)v16 - 4);
              v48 = (v46 - v47) >> 4;
              if (v48 <= (v37 - (uint64_t)v180) >> 4)
              {
                v56 = (v173 - v180) >> 4;
                if (v56 >= v48)
                {
                  if (v47 == v46)
                  {
                    v63 = v180;
                    v62 = v180;
                  }
                  else
                  {
                    v62 = v180;
                    do
                    {
                      *(_QWORD *)v62 = *(_QWORD *)v47;
                      *((_QWORD *)v62 + 1) = *((_QWORD *)v47 + 1);
                      v62 += 16;
                      v47 += 16;
                    }
                    while (v47 != v46);
                    v63 = v180;
                  }
                  v61 = (char *)(v62 - v63);
                  v52 = v63;
                  v14 = v183;
                }
                else
                {
                  v57 = &v47[16 * v56];
                  if (v173 != v180)
                  {
                    v58 = v180;
                    do
                    {
                      *(_QWORD *)v58 = *(_QWORD *)v47;
                      *((_QWORD *)v58 + 1) = *((_QWORD *)v47 + 1);
                      v47 += 16;
                      v58 += 16;
                    }
                    while (v47 != v57);
                  }
                  if (v57 == v46)
                  {
                    v52 = v173;
                    v59 = v173;
                    v14 = v183;
                  }
                  else
                  {
                    v52 = v173;
                    v59 = v173;
                    v14 = v183;
                    do
                    {
                      v60 = *(_OWORD *)v57;
                      v57 += 16;
                      *(_OWORD *)v59 = v60;
                      v59 += 16;
                    }
                    while (v57 != v46);
                  }
                  v61 = (char *)(v59 - v52);
                }
              }
              else
              {
                v178 = v45;
                v49 = v28;
                if (v180)
                {
                  operator delete(v180);
                  v37 = 0;
                }
                if (v46 - v47 < 0)
                  goto LABEL_244;
                v50 = v37 >> 3;
                if (v37 >> 3 <= v48)
                  v50 = (v46 - v47) >> 4;
                v51 = (unint64_t)v37 >= 0x7FFFFFFFFFFFFFF0 ? 0xFFFFFFFFFFFFFFFLL : v50;
                if (v51 >> 60)
LABEL_244:
                  std::vector<std::string>::__throw_length_error[abi:ne180100]();
                v52 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<mediaplatform::DatabaseParameterBase>>>(v51);
                v54 = v52;
                while (v47 != v46)
                {
                  v55 = *(_OWORD *)v47;
                  v47 += 16;
                  *(_OWORD *)v54 = v55;
                  v54 += 16;
                }
                v172 = &v52[16 * v53];
                v61 = (char *)(v54 - v52);
                v180 = v52;
                v28 = v49;
                v14 = v183;
                v45 = v178;
              }
              v177 = &v28[v45];
              v173 = &v61[(_QWORD)v52];
            }
            v64 = v191[1];
            if (v14 == v190)
            {
              v65 = v191[0];
              while (v64 != v65)
              {
                v64 -= 12;
                std::allocator<std::__state<char>>::destroy[abi:ne180100](v64);
              }
              v191[1] = v65;
              v182 = 1;
              v14 = v190;
            }
            else
            {
              v66 = (char *)v191[1] - 96;
              std::allocator<std::__state<char>>::destroy[abi:ne180100]((_QWORD *)v191[1] - 12);
              v191[1] = v66;
              v182 = 1;
            }
            break;
          case 0xFFFFFC1D:
          case 0xFFFFFC1E:
          case 0xFFFFFC21:
            break;
          case 0xFFFFFC1F:
LABEL_21:
            v22 = (char *)v191[1] - 96;
            std::allocator<std::__state<char>>::destroy[abi:ne180100]((_QWORD *)v191[1] - 12);
            v191[1] = v22;
            break;
          case 0xFFFFFC20:
            v23 = *((_OWORD *)v16 - 5);
            *(_OWORD *)v194 = *v20;
            *(_OWORD *)&v194[16] = v23;
            memset(&v194[32], 0, 24);
            std::vector<std::sub_match<char const*>>::__init_with_size[abi:ne180100]<std::sub_match<char const*>*,std::sub_match<char const*>*>(&v194[32], *((__int128 **)v16 - 8), *((__int128 **)v16 - 7), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)v16 - 7) - *((_QWORD *)v16 - 8)) >> 3));
            __p[0] = 0;
            __p[1] = 0;
            v196[0] = 0;
            std::vector<std::pair<unsigned long,char const*>>::__init_with_size[abi:ne180100]<std::pair<unsigned long,char const*>*,std::pair<unsigned long,char const*>*>((char *)__p, *((__int128 **)v16 - 5), *((__int128 **)v16 - 4), (uint64_t)(*((_QWORD *)v16 - 4) - *((_QWORD *)v16 - 5)) >> 4);
            v24 = *v19;
            *(_QWORD *)((char *)&v196[1] + 5) = *(_QWORD *)((char *)v16 - 11);
            v196[1] = v24;
            (*(void (**)(_QWORD, uint64_t, _DWORD *))(*(_QWORD *)*v19 + 24))(*v19, 1, v16 - 24);
            (*(void (**)(_QWORD, _QWORD, _BYTE *))(*(_QWORD *)v196[1] + 24))(v196[1], 0, v194);
            v25 = (char *)v191[1];
            if (v191[1] >= (void *)v192)
            {
              v191[1] = std::vector<std::__state<char>>::__push_back_slow_path<std::__state<char>>(v191, (uint64_t)v194);
              if (__p[0])
              {
                __p[1] = __p[0];
                operator delete(__p[0]);
              }
            }
            else
            {
              v26 = *(_OWORD *)&v194[16];
              *(_OWORD *)v191[1] = *(_OWORD *)v194;
              *((_OWORD *)v25 + 1) = v26;
              *((_QWORD *)v25 + 4) = 0;
              *((_QWORD *)v25 + 5) = 0;
              *((_QWORD *)v25 + 6) = 0;
              *((_QWORD *)v25 + 7) = 0;
              *((_OWORD *)v25 + 2) = *(_OWORD *)&v194[32];
              *((_QWORD *)v25 + 6) = *(_QWORD *)&v194[48];
              memset(&v194[32], 0, 24);
              *((_QWORD *)v25 + 8) = 0;
              *((_QWORD *)v25 + 9) = 0;
              *(_OWORD *)(v25 + 56) = *(_OWORD *)__p;
              *((_QWORD *)v25 + 9) = v196[0];
              __p[0] = 0;
              __p[1] = 0;
              v196[0] = 0;
              v27 = v196[1];
              *(_QWORD *)(v25 + 85) = *(_QWORD *)((char *)&v196[1] + 5);
              *((_QWORD *)v25 + 10) = v27;
              v191[1] = v25 + 96;
            }
            if (*(_QWORD *)&v194[32])
            {
              *(_QWORD *)&v194[40] = *(_QWORD *)&v194[32];
              operator delete(*(void **)&v194[32]);
            }
            break;
          default:
            std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)16>();
        }
        v16 = v191[1];
      }
      while (v191[0] != v191[1]);
      if ((v182 & 1) != 0)
      {
        v84 = *v175;
        *(_QWORD *)v84 = v10;
        *(_QWORD *)(v84 + 8) = &v14[(_QWORD)v10];
        *(_BYTE *)(v84 + 16) = 1;
        v85 = v179;
        if (v177 != v179)
        {
          v86 = v179 + 16;
          v87 = 1;
          do
          {
            v88 = v84 + 24 * v87;
            *(_OWORD *)v88 = *((_OWORD *)v86 - 1);
            v89 = *v86;
            v86 += 24;
            *(_BYTE *)(v88 + 16) = v89;
            v17 = 0xAAAAAAAAAAAAAAABLL * ((v177 - v179) >> 3) > v87++;
          }
          while (v17);
        }
        v83 = 1;
      }
      else
      {
        v83 = 0;
        v85 = v179;
      }
      if (v180)
        operator delete(v180);
      if (v85)
        operator delete(v85);
      goto LABEL_232;
    }
LABEL_121:
    v83 = 0;
LABEL_232:
    *(_QWORD *)v194 = v191;
    std::vector<std::__state<char>>::__destroy_vector::operator()[abi:ne180100]((void ***)v194);
    return v83;
  }
  v192 = 0u;
  v193 = 0u;
  *(_OWORD *)v191 = 0u;
  v83 = *(_QWORD *)(a1 + 40);
  if (v83)
  {
    *(_DWORD *)v194 = 0;
    memset(&v194[8], 0, 48);
    *(_OWORD *)__p = 0uLL;
    memset(v196, 0, 21);
    std::deque<std::__state<char>>::push_back(v191, (uint64_t)v194);
    if (__p[0])
      operator delete(__p[0]);
    if (*(_QWORD *)&v194[32])
      operator delete(*(void **)&v194[32]);
    v176 = a4;
    v90 = v191[1];
    v91 = v193.i64[1] + v193.i64[0] - 1;
    v92 = v91 / 0x2A;
    v93 = *((_QWORD *)v191[1] + v91 / 0x2A);
    v94 = 3 * (v91 % 0x2A);
    v95 = v93 + 32 * v94;
    *(_DWORD *)v95 = 0;
    *(_QWORD *)(v95 + 8) = v10;
    *(_QWORD *)(v90[v92] + 32 * v94 + 16) = v10;
    *(_QWORD *)(v90[v92] + 32 * v94 + 24) = v9;
    std::vector<std::pair<unsigned long,char const*>>::resize((std::vector<std::pair<unsigned long, const char *>> *)(v90[v92] + 32 * v94 + 56), *(unsigned int *)(a1 + 32));
    v184 = 0;
    v96 = 0;
    v97 = v193.i64[1];
    v98 = v191[1];
    v99 = v193.i64[1] + v193.i64[0] - 1;
    v100 = v99 / 0x2A;
    v101 = 3 * (v99 % 0x2A);
    *(_QWORD *)(*((_QWORD *)v191[1] + v100) + 32 * v101 + 80) = v83;
    v102 = v98[v100] + 32 * v101;
    *(_DWORD *)(v102 + 88) = v7;
    *(_BYTE *)(v102 + 92) = a6;
    v181 = 0;
    while (2)
    {
      if ((++v96 & 0xFFF) == 0 && (int)(v96 >> 12) >= (int)v190)
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)12>();
      v104 = v97 + v193.i64[0] - 1;
      v105 = *((_QWORD *)v191[1] + v104 / 0x2A);
      v106 = v104 % 0x2A;
      v107 = v105 + 96 * (v104 % 0x2A);
      v109 = (_QWORD *)(v107 + 80);
      v108 = *(_QWORD *)(v107 + 80);
      if (v108)
        (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v108 + 16))(v108, v105 + 96 * v106);
      switch(*(_DWORD *)v107)
      {
        case 0xFFFFFC18:
          v110 = *(const char **)(v105 + 96 * v106 + 16);
          v111 = (v7 & 0x1000) == 0 || v110 == v9;
          v112 = v111;
          v113 = v110 != v10 || (v7 & 0x20) == 0;
          if (!v113 || (v112 & 1) == 0)
            goto LABEL_223;
          v114 = (uint64_t)&v110[-*(_QWORD *)(v105 + 96 * v106 + 8)];
          v115 = v181;
          if ((v184 & ((uint64_t)v181 >= v114)) == 0)
            v115 = (const char *)v114;
          if (v115 != v190)
          {
            v181 = v115;
            std::deque<std::__state<char>>::pop_back(v191);
            v184 = 1;
            goto LABEL_224;
          }
          v116 = (void **)v191[1];
          v117 = (_BYTE *)v192;
          if ((void *)v192 == v191[1])
          {
            v117 = v191[1];
          }
          else
          {
            v118 = v10;
            v119 = (char *)v191[1] + 8 * (v193.i64[0] / 0x2AuLL);
            v120 = (_QWORD *)(*v119 + 96 * (v193.i64[0] % 0x2AuLL));
            v121 = *((_QWORD *)v191[1] + (v193.i64[1] + v193.i64[0]) / 0x2AuLL)
                 + 96 * ((v193.i64[1] + v193.i64[0]) % 0x2AuLL);
            if (v120 != (_QWORD *)v121)
            {
              do
              {
                std::allocator<std::__state<char>>::destroy[abi:ne180100](v120);
                v120 += 12;
                if ((_QWORD *)((char *)v120 - *v119) == (_QWORD *)4032)
                {
                  v122 = (_QWORD *)v119[1];
                  ++v119;
                  v120 = v122;
                }
              }
              while (v120 != (_QWORD *)v121);
              v116 = (void **)v191[1];
              v117 = (_BYTE *)v192;
            }
            v10 = v118;
          }
          v193.i64[1] = 0;
          v153 = v117 - (_BYTE *)v116;
          if (v153 >= 0x11)
          {
            do
            {
              operator delete(*v116);
              v116 = (void **)((char *)v191[1] + 8);
              v191[1] = v116;
              v153 = v192 - (_QWORD)v116;
            }
            while ((_QWORD)v192 - (_QWORD)v116 > 0x10uLL);
          }
          if (v153 >> 3 == 1)
          {
            v154 = 21;
          }
          else
          {
            if (v153 >> 3 != 2)
              goto LABEL_211;
            v154 = 42;
          }
          v193.i64[0] = v154;
LABEL_211:
          v184 = 1;
          v181 = v190;
LABEL_224:
          v97 = v193.i64[1];
          if (v193.i64[1])
            continue;
          if ((v184 & 1) != 0)
          {
            v162 = *v176;
            *(_QWORD *)v162 = v10;
            *(_QWORD *)(v162 + 8) = &v181[(_QWORD)v10];
            v83 = 1;
            *(_BYTE *)(v162 + 16) = 1;
          }
          else
          {
            v83 = 0;
          }
          break;
        case 0xFFFFFC19:
        case 0xFFFFFC1E:
        case 0xFFFFFC21:
          goto LABEL_224;
        case 0xFFFFFC1D:
          v123 = v193.i64[0];
          v124 = (char *)v191[1];
          v125 = (char *)v192;
          if (!v193.i64[0])
          {
            v128 = (uint64_t)(v192 - (unint64_t)v191[1]) >> 3;
            v129 = 42 * v128 - 1;
            if ((void *)v192 == v191[1])
              v129 = 0;
            if ((unint64_t)(v129 - v193.i64[1]) < 0x2A)
            {
              if (v128 >= (uint64_t)(*((_QWORD *)&v192 + 1) - (unint64_t)v191[0]) >> 3)
              {
                if (*((void **)&v192 + 1) == v191[0])
                  v130 = 1;
                else
                  v130 = (uint64_t)(*((_QWORD *)&v192 + 1) - (unint64_t)v191[0]) >> 2;
                *(_QWORD *)&v194[32] = (char *)&v192 + 8;
                *(_QWORD *)v194 = std::__allocate_at_least[abi:ne180100]<std::allocator<mlcore::ModelPropertyBase *>>(v130);
                *(_QWORD *)&v194[8] = *(_QWORD *)v194;
                *(_QWORD *)&v194[16] = *(_QWORD *)v194;
                *(_QWORD *)&v194[24] = *(_QWORD *)v194 + 8 * v131;
                v185 = v10;
                __x.first = (const char *)operator new(0xFC0uLL);
                std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *>>::push_back(v194, &__x);
                v132 = (uint64_t *)v191[1];
                v133 = *(char **)&v194[16];
                for (i = v9; v132 != (uint64_t *)v192; *(_QWORD *)&v194[16] += 8)
                {
                  if (v133 == *(char **)&v194[24])
                  {
                    v134 = *(char **)&v194[8];
                    v135 = *(void **)v194;
                    if (*(_QWORD *)&v194[8] <= *(_QWORD *)v194)
                    {
                      if (v133 == *(char **)v194)
                        v142 = 1;
                      else
                        v142 = (uint64_t)&v133[-*(_QWORD *)v194] >> 2;
                      v143 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<mlcore::ModelPropertyBase *>>(v142);
                      v145 = &v143[8 * (v142 >> 2)];
                      v146 = v133 - v134;
                      v111 = v133 == v134;
                      v133 = v145;
                      v9 = i;
                      if (!v111)
                      {
                        v133 = &v145[v146 & 0xFFFFFFFFFFFFFFF8];
                        v147 = 8 * (v146 >> 3);
                        v148 = v145;
                        do
                        {
                          v149 = *(_QWORD *)v134;
                          v134 += 8;
                          *(_QWORD *)v148 = v149;
                          v148 += 8;
                          v147 -= 8;
                        }
                        while (v147);
                      }
                      *(_QWORD *)v194 = v143;
                      *(_QWORD *)&v194[8] = v145;
                      *(_QWORD *)&v194[16] = v133;
                      *(_QWORD *)&v194[24] = &v143[8 * v144];
                      if (v135)
                        operator delete(v135);
                    }
                    else
                    {
                      v136 = (uint64_t)(*(_QWORD *)&v194[8] - *(_QWORD *)v194) >> 3;
                      if (v136 >= -1)
                        v137 = v136 + 1;
                      else
                        v137 = v136 + 2;
                      v138 = *(_QWORD *)&v194[8] - 8 * (v137 >> 1);
                      v139 = (size_t)&v133[-*(_QWORD *)&v194[8]];
                      if (v133 != *(char **)&v194[8])
                      {
                        v140 = (void *)(*(_QWORD *)&v194[8] - 8 * (v137 >> 1));
                        memmove(v140, *(const void **)&v194[8], v139);
                        v138 = (uint64_t)v140;
                        v133 = v134;
                      }
                      v141 = &v133[-8 * (v137 >> 1)];
                      v133 = (char *)(v138 + v139);
                      *(_QWORD *)&v194[8] = v141;
                      *(_QWORD *)&v194[16] = v138 + v139;
                      v9 = i;
                    }
                  }
                  v150 = *v132++;
                  *(_QWORD *)v133 = v150;
                  v133 = (char *)(*(_QWORD *)&v194[16] + 8);
                }
                v151 = v191[0];
                *(_OWORD *)v191 = *(_OWORD *)v194;
                *(_QWORD *)&v192 = v133;
                *((_QWORD *)&v192 + 1) = *(_QWORD *)&v194[24];
                v152 = 21;
                if (&v133[-*(_QWORD *)&v194[8]] != (char *)8)
                  v152 = v193.i64[0] + 42;
                v193.i64[0] = v152;
                v10 = v185;
                if (v151)
                  operator delete(v151);
                LOWORD(v7) = v189;
              }
              else
              {
                if (v191[1] == v191[0])
                {
                  *(_QWORD *)v194 = operator new(0xFC0uLL);
                  std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *>>::push_back(v191, v194);
                  *(_QWORD *)v194 = *(_QWORD *)(v192 - 8);
                  *(_QWORD *)&v192 = v192 - 8;
                }
                else
                {
                  *(_QWORD *)v194 = operator new(0xFC0uLL);
                }
                std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *>>::push_front((uint64_t)v191, v194);
                v155 = 21;
                if ((_QWORD)v192 - (unint64_t)v191[1] != 8)
                  v155 = v193.i64[0] + 42;
                v193.i64[0] = v155;
              }
            }
            else
            {
              v193.i64[0] = 42;
              *(_QWORD *)v194 = *(_QWORD *)(v192 - 8);
              *(_QWORD *)&v192 = v192 - 8;
              std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *>>::push_front((uint64_t)v191, v194);
            }
            v123 = v193.i64[0];
            v124 = (char *)v191[1];
            v125 = (char *)v192;
          }
          v156 = &v124[8 * (v123 / 0x2A)];
          v157 = *(_QWORD *)v156 + 96 * (v123 % 0x2A);
          if (v125 == v124)
            v158 = 0;
          else
            v158 = v157;
          if (v158 == *(_QWORD *)v156)
            v158 = *((_QWORD *)v156 - 1) + 4032;
          v159 = *(_OWORD *)(v107 + 16);
          *(_OWORD *)(v158 - 96) = *(_OWORD *)v107;
          *(_OWORD *)(v158 - 80) = v159;
          v160 = v105 + 96 * v106;
          *(_QWORD *)(v158 - 56) = 0;
          *(_QWORD *)(v158 - 48) = 0;
          *(_QWORD *)(v158 - 64) = 0;
          *(_OWORD *)(v158 - 64) = *(_OWORD *)(v160 + 32);
          *(_QWORD *)(v158 - 48) = *(_QWORD *)(v160 + 48);
          *(_QWORD *)(v160 + 32) = 0;
          *(_QWORD *)(v160 + 40) = 0;
          *(_QWORD *)(v160 + 48) = 0;
          *(_QWORD *)(v158 - 40) = 0;
          *(_QWORD *)(v158 - 32) = 0;
          *(_QWORD *)(v158 - 24) = 0;
          *(_OWORD *)(v158 - 40) = *(_OWORD *)(v160 + 56);
          *(_QWORD *)(v158 - 24) = *(_QWORD *)(v160 + 72);
          *(_QWORD *)(v160 + 56) = 0;
          *(_QWORD *)(v160 + 64) = 0;
          *(_QWORD *)(v160 + 72) = 0;
          v161 = *v109;
          *(_QWORD *)(v158 - 11) = *(_QWORD *)(v107 + 85);
          *(_QWORD *)(v158 - 16) = v161;
          v193 = vaddq_s64(v193, (int64x2_t)xmmword_20A922680);
          goto LABEL_223;
        case 0xFFFFFC1F:
LABEL_223:
          std::deque<std::__state<char>>::pop_back(v191);
          goto LABEL_224;
        case 0xFFFFFC20:
          v126 = *(_OWORD *)(v107 + 16);
          *(_OWORD *)v194 = *(_OWORD *)v107;
          *(_OWORD *)&v194[16] = v126;
          memset(&v194[32], 0, 24);
          std::vector<std::sub_match<char const*>>::__init_with_size[abi:ne180100]<std::sub_match<char const*>*,std::sub_match<char const*>*>(&v194[32], *(__int128 **)(v105 + 96 * v106 + 32), *(__int128 **)(v105 + 96 * v106 + 40), 0xAAAAAAAAAAAAAAABLL* ((uint64_t)(*(_QWORD *)(v105 + 96 * v106 + 40) - *(_QWORD *)(v105 + 96 * v106 + 32)) >> 3));
          __p[0] = 0;
          __p[1] = 0;
          v196[0] = 0;
          std::vector<std::pair<unsigned long,char const*>>::__init_with_size[abi:ne180100]<std::pair<unsigned long,char const*>*,std::pair<unsigned long,char const*>*>((char *)__p, *(__int128 **)(v105 + 96 * v106 + 56), *(__int128 **)(v105 + 96 * v106 + 64), (uint64_t)(*(_QWORD *)(v105 + 96 * v106 + 64) - *(_QWORD *)(v105 + 96 * v106 + 56)) >> 4);
          v127 = *v109;
          *(_QWORD *)((char *)&v196[1] + 5) = *(_QWORD *)(v107 + 85);
          v196[1] = v127;
          (*(void (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*v109 + 24))(*v109, 1, v107);
          (*(void (**)(_QWORD, _QWORD, _BYTE *))(*(_QWORD *)v196[1] + 24))(v196[1], 0, v194);
          std::deque<std::__state<char>>::push_back(v191, (uint64_t)v194);
          if (__p[0])
          {
            __p[1] = __p[0];
            operator delete(__p[0]);
          }
          if (*(_QWORD *)&v194[32])
          {
            *(_QWORD *)&v194[40] = *(_QWORD *)&v194[32];
            operator delete(*(void **)&v194[32]);
          }
          goto LABEL_224;
        default:
          std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)16>();
      }
      break;
    }
  }
  std::deque<std::__state<char>>::~deque[abi:ne180100]((uint64_t)v191);
  return v83;
}

void sub_20A81BE74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37)
{
  void *v37;

  operator delete(v37);
  if (__p)
    operator delete(__p);
  std::deque<std::__state<char>>::~deque[abi:ne180100]((uint64_t)&a23);
  _Unwind_Resume(a1);
}

void std::vector<std::sub_match<char const*>>::assign(std::vector<std::csub_match> *this, std::vector<std::csub_match>::size_type __n, std::vector<std::csub_match>::const_reference __u)
{
  std::sub_match<const char *> *value;
  std::sub_match<const char *> *begin;
  unint64_t v8;
  std::vector<std::csub_match>::size_type v9;
  unint64_t v10;
  std::vector<std::csub_match>::pointer v11;
  std::sub_match<const char *> *v12;
  std::vector<std::csub_match>::size_type v13;
  std::pair<const char *, const char *> v14;
  std::vector<std::csub_match>::pointer end;
  std::vector<std::csub_match>::size_type v16;
  std::vector<std::csub_match>::size_type v17;
  std::vector<std::csub_match>::value_type *v18;
  std::sub_match<const char *> *v19;
  std::vector<std::csub_match>::size_type v20;
  std::pair<const char *, const char *> v21;

  value = this->__end_cap_.__value_;
  begin = this->__begin_;
  if (0xAAAAAAAAAAAAAAABLL * (((char *)value - (char *)begin) >> 3) >= __n)
  {
    end = this->__end_;
    v16 = end - begin;
    if (v16 >= __n)
      v17 = __n;
    else
      v17 = end - begin;
    if (v17)
    {
      v18 = begin;
      do
      {
        *v18++ = *__u;
        --v17;
      }
      while (v17);
    }
    if (__n <= v16)
    {
      this->__end_ = &begin[__n];
    }
    else
    {
      v19 = &end[__n - v16];
      v20 = 24 * __n - 24 * v16;
      do
      {
        v21 = __u->std::pair<const char *, const char *>;
        *(_QWORD *)&end->matched = *(_QWORD *)&__u->matched;
        end->std::pair<const char *, const char *> = v21;
        ++end;
        v20 -= 24;
      }
      while (v20);
      this->__end_ = v19;
    }
  }
  else
  {
    if (begin)
    {
      this->__end_ = begin;
      operator delete(begin);
      value = 0;
      this->__begin_ = 0;
      this->__end_ = 0;
      this->__end_cap_.__value_ = 0;
    }
    if (__n > 0xAAAAAAAAAAAAAAALL)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v8 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)value >> 3);
    v9 = 2 * v8;
    if (2 * v8 <= __n)
      v9 = __n;
    if (v8 >= 0x555555555555555)
      v10 = 0xAAAAAAAAAAAAAAALL;
    else
      v10 = v9;
    std::vector<mlcore::SortDescriptor>::__vallocate[abi:ne180100](this, v10);
    v11 = this->__end_;
    v12 = &v11[__n];
    v13 = 24 * __n;
    do
    {
      v14 = __u->std::pair<const char *, const char *>;
      *(_QWORD *)&v11->matched = *(_QWORD *)&__u->matched;
      v11->std::pair<const char *, const char *> = v14;
      ++v11;
      v13 -= 24;
    }
    while (v13);
    this->__end_ = v12;
  }
}

char *std::vector<std::__state<char>>::__push_back_slow_path<std::__state<char>>(void **a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v6;
  char *v7;
  __int128 v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  uint64_t v16;
  char *v17;
  char *v18;
  __int128 v19;
  uint64_t v20;
  char *v21;

  v2 = 0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[1] - (_BYTE *)*a1) >> 5);
  v3 = v2 + 1;
  if (v2 + 1 > 0x2AAAAAAAAAAAAAALL)
    std::vector<std::string>::__throw_length_error[abi:ne180100]();
  if (0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 5) > v3)
    v3 = 0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 5);
  if (0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 5) >= 0x155555555555555)
    v6 = 0x2AAAAAAAAAAAAAALL;
  else
    v6 = v3;
  if (v6)
  {
    if (v6 > 0x2AAAAAAAAAAAAAALL)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v7 = (char *)operator new(96 * v6);
  }
  else
  {
    v7 = 0;
  }
  v8 = *(_OWORD *)(a2 + 16);
  v9 = &v7[96 * v2];
  *(_OWORD *)v9 = *(_OWORD *)a2;
  *((_OWORD *)v9 + 1) = v8;
  v10 = &v7[96 * v6];
  *((_OWORD *)v9 + 2) = *(_OWORD *)(a2 + 32);
  *((_QWORD *)v9 + 6) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(v9 + 85) = *(_QWORD *)(a2 + 85);
  v11 = *(_QWORD *)(a2 + 72);
  v12 = *(_QWORD *)(a2 + 80);
  *((_QWORD *)v9 + 9) = 0;
  *((_QWORD *)v9 + 10) = v12;
  *(_OWORD *)(v9 + 56) = *(_OWORD *)(a2 + 56);
  *((_QWORD *)v9 + 9) = v11;
  *(_QWORD *)(a2 + 64) = 0;
  *(_QWORD *)(a2 + 72) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  v13 = v9 + 96;
  v14 = (char *)*a1;
  v15 = (char *)a1[1];
  if (v15 == *a1)
  {
    *a1 = v9;
    a1[1] = v13;
    a1[2] = v10;
  }
  else
  {
    v16 = 0;
    do
    {
      v17 = &v9[v16];
      v18 = &v15[v16];
      v19 = *(_OWORD *)&v15[v16 - 80];
      *((_OWORD *)v17 - 6) = *(_OWORD *)&v15[v16 - 96];
      *((_OWORD *)v17 - 5) = v19;
      *((_QWORD *)v17 - 6) = 0;
      *((_OWORD *)v17 - 4) = *(_OWORD *)&v15[v16 - 64];
      *((_QWORD *)v17 - 6) = *(_QWORD *)&v15[v16 - 48];
      *((_QWORD *)v18 - 8) = 0;
      *((_QWORD *)v18 - 7) = 0;
      *((_QWORD *)v18 - 6) = 0;
      *((_QWORD *)v17 - 3) = 0;
      *(_OWORD *)(v17 - 40) = *(_OWORD *)&v15[v16 - 40];
      *((_QWORD *)v17 - 3) = *(_QWORD *)&v15[v16 - 24];
      *((_QWORD *)v18 - 5) = 0;
      *((_QWORD *)v18 - 4) = 0;
      *((_QWORD *)v18 - 3) = 0;
      v20 = *(_QWORD *)&v15[v16 - 16];
      *(_QWORD *)(v17 - 11) = *(_QWORD *)&v15[v16 - 11];
      *((_QWORD *)v17 - 2) = v20;
      v16 -= 96;
    }
    while (&v15[v16] != v14);
    v15 = (char *)*a1;
    v21 = (char *)a1[1];
    *a1 = &v9[v16];
    a1[1] = v13;
    a1[2] = v10;
    while (v21 != v15)
    {
      v21 -= 96;
      std::allocator<std::__state<char>>::destroy[abi:ne180100](v21);
    }
  }
  if (v15)
    operator delete(v15);
  return v13;
}

void std::vector<std::sub_match<char const*>>::resize(std::vector<std::csub_match> *this, std::vector<std::csub_match>::size_type __sz, std::vector<std::csub_match>::const_reference __x)
{
  std::vector<std::csub_match>::pointer end;
  std::vector<std::csub_match>::pointer begin;
  unint64_t v7;
  unint64_t v8;
  std::sub_match<const char *> *value;
  unint64_t v11;
  std::vector<std::csub_match>::size_type v12;
  unint64_t v13;
  char *v14;
  uint64_t v15;
  std::sub_match<const char *> *v16;
  std::sub_match<const char *> *v17;
  std::pair<const char *, const char *> *v18;
  std::vector<std::csub_match>::size_type v19;
  std::pair<const char *, const char *> v20;
  std::sub_match<const char *> *v21;
  std::sub_match<const char *> *v22;
  std::vector<std::csub_match>::pointer v23;
  std::pair<const char *, const char *> v24;
  std::sub_match<const char *> *v25;
  std::vector<std::csub_match>::size_type v26;
  std::pair<const char *, const char *> v27;

  begin = this->__begin_;
  end = this->__end_;
  v7 = 0xAAAAAAAAAAAAAAABLL * (((char *)end - (char *)this->__begin_) >> 3);
  v8 = __sz - v7;
  if (__sz <= v7)
  {
    if (__sz < v7)
      this->__end_ = &begin[__sz];
  }
  else
  {
    value = this->__end_cap_.__value_;
    if (0xAAAAAAAAAAAAAAABLL * (((char *)value - (char *)end) >> 3) >= v8)
    {
      v25 = &end[v8];
      v26 = 24 * __sz - 8 * (((char *)end - (char *)this->__begin_) >> 3);
      do
      {
        v27 = __x->std::pair<const char *, const char *>;
        *(_QWORD *)&end->matched = *(_QWORD *)&__x->matched;
        end->std::pair<const char *, const char *> = v27;
        ++end;
        v26 -= 24;
      }
      while (v26);
      this->__end_ = v25;
    }
    else
    {
      if (__sz > 0xAAAAAAAAAAAAAAALL)
        std::vector<std::string>::__throw_length_error[abi:ne180100]();
      v11 = 0xAAAAAAAAAAAAAAABLL * (((char *)value - (char *)begin) >> 3);
      v12 = 2 * v11;
      if (2 * v11 <= __sz)
        v12 = __sz;
      if (v11 >= 0x555555555555555)
        v13 = 0xAAAAAAAAAAAAAAALL;
      else
        v13 = v12;
      v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v13);
      v16 = (std::sub_match<const char *> *)&v14[24 * v7];
      v17 = (std::sub_match<const char *> *)&v14[24 * __sz];
      v18 = v16;
      v19 = 24 * __sz - 24 * v7;
      do
      {
        v20 = __x->std::pair<const char *, const char *>;
        v18[1].first = *(const char **)&__x->matched;
        *v18 = v20;
        v18 = (std::pair<const char *, const char *> *)((char *)v18 + 24);
        v19 -= 24;
      }
      while (v19);
      v21 = (std::sub_match<const char *> *)&v14[24 * v15];
      v23 = this->__begin_;
      v22 = this->__end_;
      if (v22 != this->__begin_)
      {
        do
        {
          v24 = v22[-1].std::pair<const char *, const char *>;
          *(_QWORD *)&v16[-1].matched = *(_QWORD *)&v22[-1].matched;
          v16[-1].std::pair<const char *, const char *> = v24;
          --v16;
          --v22;
        }
        while (v22 != v23);
        v22 = this->__begin_;
      }
      this->__begin_ = v16;
      this->__end_ = v17;
      this->__end_cap_.__value_ = v21;
      if (v22)
        operator delete(v22);
    }
  }
}

void std::vector<std::pair<unsigned long,char const*>>::resize(std::vector<std::pair<unsigned long, const char *>> *this, std::vector<std::pair<unsigned long, const char *>>::size_type __sz)
{
  std::vector<std::pair<unsigned long, const char *>>::pointer begin;
  std::vector<std::pair<unsigned long, const char *>>::pointer end;
  std::vector<std::pair<unsigned long, const char *>>::size_type v5;
  std::vector<std::pair<unsigned long, const char *>>::size_type v6;
  std::pair<unsigned long, const char *> *value;
  uint64_t v8;
  std::vector<std::pair<unsigned long, const char *>>::size_type v9;
  unint64_t v10;
  char *v11;
  std::pair<unsigned long, const char *> *v12;
  uint64_t v13;
  std::pair<unsigned long, const char *> *v14;
  std::pair<unsigned long, const char *> *v15;
  std::pair<unsigned long, const char *> *v16;
  std::vector<std::pair<unsigned long, const char *>>::pointer v17;
  std::pair<unsigned long, const char *> *v18;

  begin = this->__begin_;
  end = this->__end_;
  v5 = end - this->__begin_;
  if (__sz <= v5)
  {
    if (__sz >= v5)
      return;
    v18 = &begin[__sz];
    goto LABEL_17;
  }
  v6 = __sz - v5;
  value = this->__end_cap_.__value_;
  if (__sz - v5 <= value - end)
  {
    bzero(this->__end_, 16 * v6);
    v18 = &end[v6];
LABEL_17:
    this->__end_ = v18;
    return;
  }
  if (__sz >> 60)
    std::vector<std::string>::__throw_length_error[abi:ne180100]();
  v8 = (char *)value - (char *)begin;
  v9 = v8 >> 3;
  if (v8 >> 3 <= __sz)
    v9 = __sz;
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0)
    v10 = 0xFFFFFFFFFFFFFFFLL;
  else
    v10 = v9;
  v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<mediaplatform::DatabaseParameterBase>>>(v10);
  v12 = (std::pair<unsigned long, const char *> *)&v11[16 * v5];
  v14 = (std::pair<unsigned long, const char *> *)&v11[16 * v13];
  bzero(v12, 16 * v6);
  v15 = &v12[v6];
  v17 = this->__begin_;
  v16 = this->__end_;
  if (v16 != this->__begin_)
  {
    do
    {
      v12[-1] = v16[-1];
      --v12;
      --v16;
    }
    while (v16 != v17);
    v16 = this->__begin_;
  }
  this->__begin_ = v12;
  this->__end_ = v15;
  this->__end_cap_.__value_ = v14;
  if (v16)
    operator delete(v16);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)12>()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x20BD2776C](exception, 12);
  __cxa_throw(exception, MEMORY[0x24BEDB6D0], MEMORY[0x24BEDABD0]);
}

void sub_20A81C5BC(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::allocator<std::__state<char>>::destroy[abi:ne180100](_QWORD *a1)
{
  void *v2;
  void *v3;

  v2 = (void *)a1[7];
  if (v2)
  {
    a1[8] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[4];
  if (v3)
  {
    a1[5] = v3;
    operator delete(v3);
  }
}

char *std::vector<std::sub_match<char const*>>::__init_with_size[abi:ne180100]<std::sub_match<char const*>*,std::sub_match<char const*>*>(char *result, __int128 *a2, __int128 *a3, unint64_t a4)
{
  char *v6;
  uint64_t v7;
  __int128 v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<mlcore::SortDescriptor>::__vallocate[abi:ne180100](result, a4);
    v7 = *((_QWORD *)v6 + 1);
    while (a2 != a3)
    {
      v8 = *a2;
      *(_QWORD *)(v7 + 16) = *((_QWORD *)a2 + 2);
      *(_OWORD *)v7 = v8;
      v7 += 24;
      a2 = (__int128 *)((char *)a2 + 24);
    }
    *((_QWORD *)v6 + 1) = v7;
  }
  return result;
}

void sub_20A81C674(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<std::pair<unsigned long,char const*>>::__init_with_size[abi:ne180100]<std::pair<unsigned long,char const*>*,std::pair<unsigned long,char const*>*>(char *result, __int128 *a2, __int128 *a3, unint64_t a4)
{
  char *v6;
  _OWORD *v7;
  __int128 v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<std::shared_ptr<mlcore::Predicate>>::__vallocate[abi:ne180100](result, a4);
    v7 = (_OWORD *)*((_QWORD *)v6 + 1);
    while (a2 != a3)
    {
      v8 = *a2++;
      *v7++ = v8;
    }
    *((_QWORD *)v6 + 1) = v7;
  }
  return result;
}

void sub_20A81C6E4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)16>()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x20BD2776C](exception, 16);
  __cxa_throw(exception, MEMORY[0x24BEDB6D0], MEMORY[0x24BEDABD0]);
}

void sub_20A81C738(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::vector<std::__state<char>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  _QWORD *v2;
  _QWORD *v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 12;
        std::allocator<std::__state<char>>::destroy[abi:ne180100](v4);
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

__n128 std::deque<std::__state<char>>::push_back(_QWORD *a1, uint64_t a2)
{
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  char *v21;
  unint64_t v22;
  char *v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  char *v30;
  char *v31;
  uint64_t v32;
  unint64_t v33;
  char *v34;
  BOOL v35;
  size_t v36;
  unint64_t v37;
  char *v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  __int128 v48;
  __int128 v49;
  unint64_t v50;
  char *v51;
  char *v52;
  uint64_t v53;
  char *v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  void *v60;
  _QWORD *v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  int64_t v71;
  char *v72;
  unint64_t v73;
  __int128 v74;
  __n128 result;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t *v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  void *v84;
  __int128 v85;
  __int128 v86;
  _QWORD *v87;

  v4 = (char *)a1[2];
  v5 = (char *)a1[1];
  if (v4 == v5)
    v6 = 0;
  else
    v6 = 42 * ((v4 - v5) >> 3) - 1;
  v7 = a1[4];
  v8 = a1[5] + v7;
  if (v6 == v8)
  {
    if (v7 < 0x2A)
    {
      v22 = (v4 - v5) >> 3;
      v23 = (char *)a1[3];
      v24 = (uint64_t)&v23[-*a1];
      if (v22 >= v24 >> 3)
      {
        if (v23 == (char *)*a1)
          v25 = 1;
        else
          v25 = v24 >> 2;
        v87 = a1 + 3;
        *(_QWORD *)&v85 = std::__allocate_at_least[abi:ne180100]<std::allocator<mlcore::ModelPropertyBase *>>(v25);
        *((_QWORD *)&v85 + 1) = v85 + 8 * v22;
        *(_QWORD *)&v86 = *((_QWORD *)&v85 + 1);
        *((_QWORD *)&v86 + 1) = v85 + 8 * v26;
        v84 = operator new(0xFC0uLL);
        std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *>>::push_back(&v85, &v84);
        v27 = a1[2];
        v29 = (char *)*((_QWORD *)&v85 + 1);
        v28 = (char *)v85;
        v31 = (char *)*((_QWORD *)&v86 + 1);
        v30 = (char *)v86;
        while (v27 != a1[1])
        {
          if (v29 == v28)
          {
            if (v30 >= v31)
            {
              if (v31 == v28)
                v37 = 1;
              else
                v37 = (v31 - v28) >> 2;
              v38 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<mlcore::ModelPropertyBase *>>(v37);
              v40 = v38;
              v29 = &v38[(2 * v37 + 6) & 0xFFFFFFFFFFFFFFF8];
              v41 = v30 - v28;
              v35 = v30 == v28;
              v30 = v29;
              if (!v35)
              {
                v30 = &v29[v41 & 0xFFFFFFFFFFFFFFF8];
                v42 = 8 * (v41 >> 3);
                v43 = v29;
                v44 = v28;
                do
                {
                  v45 = *(_QWORD *)v44;
                  v44 += 8;
                  *(_QWORD *)v43 = v45;
                  v43 += 8;
                  v42 -= 8;
                }
                while (v42);
              }
              v31 = &v38[8 * v39];
              if (v28)
                operator delete(v28);
              v28 = v40;
            }
            else
            {
              v32 = (v31 - v30) >> 3;
              if (v32 >= -1)
                v33 = v32 + 1;
              else
                v33 = v32 + 2;
              v34 = &v30[8 * (v33 >> 1)];
              v29 = &v34[-(v30 - v28)];
              v36 = v30 - v28;
              v35 = v30 == v28;
              v30 = v34;
              if (!v35)
                memmove(v29, v28, v36);
            }
          }
          v46 = *(_QWORD *)(v27 - 8);
          v27 -= 8;
          *((_QWORD *)v29 - 1) = v46;
          v29 -= 8;
        }
        *(_QWORD *)&v85 = v28;
        *((_QWORD *)&v85 + 1) = v29;
        *(_QWORD *)&v86 = v30;
        *((_QWORD *)&v86 + 1) = v31;
        v48 = v85;
        v49 = v86;
        *(_QWORD *)&v85 = *a1;
        v47 = (void *)v85;
        *((_QWORD *)&v85 + 1) = v27;
        *(_OWORD *)a1 = v48;
        *((_OWORD *)a1 + 1) = v49;
        if (v47)
          operator delete(v47);
        goto LABEL_60;
      }
      if (v23 != v4)
      {
        *(_QWORD *)&v85 = operator new(0xFC0uLL);
        std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *>>::push_back(a1, &v85);
LABEL_60:
        v5 = (char *)a1[1];
        v8 = a1[5] + a1[4];
        goto LABEL_61;
      }
      *(_QWORD *)&v85 = operator new(0xFC0uLL);
      std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *>>::push_front((uint64_t)a1, &v85);
      v61 = (_QWORD *)a1[1];
      v4 = (char *)a1[2];
      v63 = *v61;
      v62 = (char *)(v61 + 1);
      v10 = v63;
      a1[1] = v62;
      if (v4 == (char *)a1[3])
      {
        v64 = (uint64_t)&v62[-*a1];
        if ((unint64_t)v62 > *a1)
        {
          v65 = v64 >> 3;
          v14 = v64 >> 3 < -1;
          v66 = (v64 >> 3) + 2;
          if (v14)
            v67 = v66;
          else
            v67 = v65 + 1;
          v68 = -(v67 >> 1);
          v69 = v67 >> 1;
          v70 = &v62[-8 * v69];
          v71 = v4 - v62;
          if (v4 != v62)
          {
            memmove(&v62[-8 * v69], v62, v4 - v62);
            v62 = (char *)a1[1];
          }
          v4 = &v70[v71];
          v72 = &v62[8 * v68];
          goto LABEL_58;
        }
        if (v4 == (char *)*a1)
          v77 = 1;
        else
          v77 = (uint64_t)&v4[-*a1] >> 2;
        v51 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<mlcore::ModelPropertyBase *>>(v77);
        v52 = &v51[8 * (v77 >> 2)];
        v54 = &v51[8 * v78];
        v79 = (uint64_t *)a1[1];
        v4 = v52;
        v80 = a1[2] - (_QWORD)v79;
        if (v80)
        {
          v4 = &v52[v80 & 0xFFFFFFFFFFFFFFF8];
          v81 = 8 * (v80 >> 3);
          v82 = &v51[8 * (v77 >> 2)];
          do
          {
            v83 = *v79++;
            *(_QWORD *)v82 = v83;
            v82 += 8;
            v81 -= 8;
          }
          while (v81);
        }
LABEL_46:
        v60 = (void *)*a1;
        *a1 = v51;
        a1[1] = v52;
        a1[2] = v4;
        a1[3] = v54;
        if (v60)
        {
          operator delete(v60);
          v4 = (char *)a1[2];
        }
      }
    }
    else
    {
      a1[4] = v7 - 42;
      v11 = *(_QWORD *)v5;
      v9 = v5 + 8;
      v10 = v11;
      a1[1] = v9;
      if ((char *)a1[3] == v4)
      {
        v12 = (uint64_t)&v9[-*a1];
        if ((unint64_t)v9 > *a1)
        {
          v13 = v12 >> 3;
          v14 = v12 >> 3 < -1;
          v15 = (v12 >> 3) + 2;
          if (v14)
            v16 = v15;
          else
            v16 = v13 + 1;
          v17 = -(v16 >> 1);
          v18 = v16 >> 1;
          v19 = &v9[-8 * v18];
          v20 = v4 - v9;
          if (v4 == v9)
          {
            v21 = v4;
          }
          else
          {
            memmove(&v9[-8 * v18], v9, v4 - v9);
            v21 = (char *)a1[1];
          }
          v4 = &v19[v20];
          v72 = &v21[8 * v17];
LABEL_58:
          a1[1] = v72;
          a1[2] = v4;
          goto LABEL_59;
        }
        if (v4 == (char *)*a1)
          v50 = 1;
        else
          v50 = (uint64_t)&v4[-*a1] >> 2;
        v51 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<mlcore::ModelPropertyBase *>>(v50);
        v52 = &v51[8 * (v50 >> 2)];
        v54 = &v51[8 * v53];
        v55 = (uint64_t *)a1[1];
        v4 = v52;
        v56 = a1[2] - (_QWORD)v55;
        if (v56)
        {
          v4 = &v52[v56 & 0xFFFFFFFFFFFFFFF8];
          v57 = 8 * (v56 >> 3);
          v58 = &v51[8 * (v50 >> 2)];
          do
          {
            v59 = *v55++;
            *(_QWORD *)v58 = v59;
            v58 += 8;
            v57 -= 8;
          }
          while (v57);
        }
        goto LABEL_46;
      }
    }
LABEL_59:
    *(_QWORD *)v4 = v10;
    a1[2] += 8;
    goto LABEL_60;
  }
LABEL_61:
  v73 = *(_QWORD *)&v5[8 * (v8 / 0x2A)] + 96 * (v8 % 0x2A);
  v74 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)v73 = *(_OWORD *)a2;
  *(_OWORD *)(v73 + 16) = v74;
  *(_QWORD *)(v73 + 40) = 0;
  *(_QWORD *)(v73 + 48) = 0;
  *(_QWORD *)(v73 + 32) = 0;
  *(_OWORD *)(v73 + 32) = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(v73 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(v73 + 56) = 0;
  *(_QWORD *)(v73 + 64) = 0;
  *(_QWORD *)(v73 + 72) = 0;
  result = *(__n128 *)(a2 + 56);
  *(__n128 *)(v73 + 56) = result;
  *(_QWORD *)(v73 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a2 + 56) = 0;
  *(_QWORD *)(a2 + 64) = 0;
  *(_QWORD *)(a2 + 72) = 0;
  v76 = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(v73 + 85) = *(_QWORD *)(a2 + 85);
  *(_QWORD *)(v73 + 80) = v76;
  ++a1[5];
  return result;
}

void sub_20A81CC24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p)
{
  void *v11;

  operator delete(v11);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void std::deque<std::__state<char>>::pop_back(_QWORD *a1)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[5] + a1[4] - 1;
  std::allocator<std::__state<char>>::destroy[abi:ne180100]((_QWORD *)(*(_QWORD *)(a1[1] + 8 * (v2 / 0x2A))
                                                                     + 96 * (v2 % 0x2A)));
  v4 = a1[1];
  v3 = a1[2];
  if (v3 == v4)
    v5 = 0;
  else
    v5 = 42 * ((v3 - v4) >> 3) - 1;
  v6 = a1[4];
  v7 = a1[5] - 1;
  a1[5] = v7;
  if ((unint64_t)(v5 - (v7 + v6)) >= 0x54)
  {
    operator delete(*(void **)(v3 - 8));
    a1[2] -= 8;
  }
}

uint64_t std::deque<std::__state<char>>::~deque[abi:ne180100](uint64_t a1)
{
  void **v2;
  void **v3;
  unint64_t v4;
  void **v5;
  char *v6;
  unint64_t v7;
  char *v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;

  v2 = *(void ***)(a1 + 8);
  v3 = *(void ***)(a1 + 16);
  if (v3 == v2)
  {
    v3 = *(void ***)(a1 + 8);
  }
  else
  {
    v4 = *(_QWORD *)(a1 + 32);
    v5 = &v2[v4 / 0x2A];
    v6 = (char *)*v5 + 96 * (v4 % 0x2A);
    v7 = (unint64_t)v2[(*(_QWORD *)(a1 + 40) + v4) / 0x2A] + 96 * ((*(_QWORD *)(a1 + 40) + v4) % 0x2A);
    if (v6 != (char *)v7)
    {
      do
      {
        std::allocator<std::__state<char>>::destroy[abi:ne180100](v6);
        v6 += 96;
        if (v6 - (_BYTE *)*v5 == 4032)
        {
          v8 = (char *)v5[1];
          ++v5;
          v6 = v8;
        }
      }
      while (v6 != (char *)v7);
      v2 = *(void ***)(a1 + 8);
      v3 = *(void ***)(a1 + 16);
    }
  }
  *(_QWORD *)(a1 + 40) = 0;
  v9 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = *(void ***)(a1 + 16);
      v2 = (void **)(*(_QWORD *)(a1 + 8) + 8);
      *(_QWORD *)(a1 + 8) = v2;
      v9 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  v10 = v9 >> 3;
  if (v10 == 1)
  {
    v11 = 21;
    goto LABEL_14;
  }
  if (v10 == 2)
  {
    v11 = 42;
LABEL_14:
    *(_QWORD *)(a1 + 32) = v11;
  }
  if (v2 != v3)
  {
    do
    {
      v12 = *v2++;
      operator delete(v12);
    }
    while (v2 != v3);
    v14 = *(_QWORD *)(a1 + 8);
    v13 = *(_QWORD *)(a1 + 16);
    if (v13 != v14)
      *(_QWORD *)(a1 + 16) = v13 + ((v14 - v13 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *>>::push_front(uint64_t a1, _QWORD *a2)
{
  char *v4;
  char *v5;
  _BYTE *v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;

  v4 = *(char **)(a1 + 8);
  if (v4 == *(char **)a1)
  {
    v6 = *(_BYTE **)(a1 + 16);
    v7 = *(_BYTE **)(a1 + 24);
    if (v6 >= v7)
    {
      if (v7 == v4)
        v11 = 1;
      else
        v11 = (v7 - v4) >> 2;
      v12 = 2 * v11;
      v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<mlcore::ModelPropertyBase *>>(v11);
      v5 = &v13[(v12 + 6) & 0xFFFFFFFFFFFFFFF8];
      v15 = *(uint64_t **)(a1 + 8);
      v16 = v5;
      v17 = *(_QWORD *)(a1 + 16) - (_QWORD)v15;
      if (v17)
      {
        v16 = &v5[v17 & 0xFFFFFFFFFFFFFFF8];
        v18 = 8 * (v17 >> 3);
        v19 = v5;
        do
        {
          v20 = *v15++;
          *(_QWORD *)v19 = v20;
          v19 += 8;
          v18 -= 8;
        }
        while (v18);
      }
      v21 = *(char **)a1;
      *(_QWORD *)a1 = v13;
      *(_QWORD *)(a1 + 8) = v5;
      *(_QWORD *)(a1 + 16) = v16;
      *(_QWORD *)(a1 + 24) = &v13[8 * v14];
      if (v21)
      {
        operator delete(v21);
        v5 = *(char **)(a1 + 8);
      }
    }
    else
    {
      v8 = (v7 - v6) >> 3;
      if (v8 >= -1)
        v9 = v8 + 1;
      else
        v9 = v8 + 2;
      v10 = v9 >> 1;
      v5 = &v4[8 * (v9 >> 1)];
      if (v6 != v4)
      {
        memmove(&v4[8 * (v9 >> 1)], v4, v6 - v4);
        v4 = *(char **)(a1 + 16);
      }
      *(_QWORD *)(a1 + 8) = v5;
      *(_QWORD *)(a1 + 16) = &v4[8 * v10];
    }
  }
  else
  {
    v5 = *(char **)(a1 + 8);
  }
  *((_QWORD *)v5 - 1) = *a2;
  *(_QWORD *)(a1 + 8) -= 8;
}

void std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *>>::push_back(_QWORD *a1, _QWORD *a2)
{
  char *v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  int64_t v14;
  char *v15;
  unint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;

  v4 = (char *)a1[2];
  if (v4 == (char *)a1[3])
  {
    v5 = (char *)a1[1];
    v6 = (uint64_t)&v5[-*a1];
    if ((unint64_t)v5 <= *a1)
    {
      if (v4 == (char *)*a1)
        v16 = 1;
      else
        v16 = (uint64_t)&v4[-*a1] >> 2;
      v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<mlcore::ModelPropertyBase *>>(v16);
      v19 = &v17[8 * (v16 >> 2)];
      v20 = (uint64_t *)a1[1];
      v4 = v19;
      v21 = a1[2] - (_QWORD)v20;
      if (v21)
      {
        v4 = &v19[v21 & 0xFFFFFFFFFFFFFFF8];
        v22 = 8 * (v21 >> 3);
        v23 = &v17[8 * (v16 >> 2)];
        do
        {
          v24 = *v20++;
          *(_QWORD *)v23 = v24;
          v23 += 8;
          v22 -= 8;
        }
        while (v22);
      }
      v25 = (char *)*a1;
      *a1 = v17;
      a1[1] = v19;
      a1[2] = v4;
      a1[3] = &v17[8 * v18];
      if (v25)
      {
        operator delete(v25);
        v4 = (char *)a1[2];
      }
    }
    else
    {
      v7 = v6 >> 3;
      v8 = v6 >> 3 < -1;
      v9 = (v6 >> 3) + 2;
      if (v8)
        v10 = v9;
      else
        v10 = v7 + 1;
      v11 = -(v10 >> 1);
      v12 = v10 >> 1;
      v13 = &v5[-8 * v12];
      v14 = v4 - v5;
      if (v4 != v5)
      {
        memmove(&v5[-8 * v12], v5, v4 - v5);
        v4 = (char *)a1[1];
      }
      v15 = &v4[8 * v11];
      v4 = &v13[v14];
      a1[1] = v15;
      a1[2] = &v13[v14];
    }
  }
  *(_QWORD *)v4 = *a2;
  a1[2] += 8;
}

uint64_t std::string::__insert_from_safe_copy[abi:ne180100]<std::__wrap_iter<char const*>,std::__wrap_iter<char const*>>(std::string *this, std::string::size_type __n_add, std::string::size_type __n_copy, char *a4, char *a5)
{
  std::string *v9;
  std::string::size_type size;
  std::string::size_type v11;
  std::string *v12;
  size_t v13;
  std::string::size_type v14;
  _BYTE *v15;
  char v16;

  v9 = this;
  if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
  {
    size = this->__r_.__value_.__l.__size_;
    v11 = (this->__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
    if (v11 - size >= __n_add)
    {
      v12 = (std::string *)this->__r_.__value_.__r.__words[0];
      goto LABEL_7;
    }
  }
  else
  {
    size = HIBYTE(this->__r_.__value_.__r.__words[2]);
    v11 = 22;
    v12 = this;
    if (22 - size >= __n_add)
    {
LABEL_7:
      v13 = size - __n_copy;
      if (size == __n_copy)
        size = __n_copy;
      else
        memmove((char *)v12 + __n_copy + __n_add, (char *)v12 + __n_copy, v13);
      goto LABEL_10;
    }
  }
  std::string::__grow_by(this, v11, size + __n_add - v11, size, __n_copy, 0, __n_add);
  v9->__r_.__value_.__l.__size_ = size + __n_add;
  v12 = (std::string *)v9->__r_.__value_.__r.__words[0];
LABEL_10:
  v14 = size + __n_add;
  if (SHIBYTE(v9->__r_.__value_.__r.__words[2]) < 0)
    v9->__r_.__value_.__l.__size_ = v14;
  else
    *((_BYTE *)&v9->__r_.__value_.__s + 23) = v14 & 0x7F;
  v12->__r_.__value_.__s.__data_[v14] = 0;
  if (a4 != a5)
  {
    v15 = (char *)v12 + __n_copy;
    do
    {
      v16 = *a4++;
      *v15++ = v16;
    }
    while (a4 != a5);
  }
  if (SHIBYTE(v9->__r_.__value_.__r.__words[2]) < 0)
    v9 = (std::string *)v9->__r_.__value_.__r.__words[0];
  return (uint64_t)v9 + __n_copy;
}

void mediaplatform::Base16Representation(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  unint64_t v4;
  uint64_t v5;

  v4 = 0;
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  v5 = *(_QWORD *)(a1 + 24);
  while (v4 < *(_QWORD *)(a1 + 8))
  {
    std::string::push_back(a2, a0123456789abcd[(unint64_t)*(unsigned __int8 *)(v5 + v4) >> 4]);
    std::string::push_back(a2, a0123456789abcd[*(_BYTE *)(v5 + v4++) & 0xF]);
  }
}

void sub_20A81D230(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void mlcore::Account::~Account(mlcore::Account *this)
{
  *(_QWORD *)this = off_24C33A860;
  mlcore::PropertyCacheBase<long long,int,double,std::string,mediaplatform::Data>::~PropertyCacheBase((_QWORD *)this + 1);
}

{
  *(_QWORD *)this = off_24C33A860;
  mlcore::PropertyCacheBase<long long,int,double,std::string,mediaplatform::Data>::~PropertyCacheBase((_QWORD *)this + 1);
  JUMPOUT(0x20BD27AFCLL);
}

uint64_t mlcore::TypedEntityClass<mlcore::Account>::sharedPointer()
{
  unint64_t v0;
  char v2;
  char **v3;
  char *v4;

  v0 = atomic_load(&mlcore::TypedEntityClass<mlcore::Account>::sharedPointer(void)::__once);
  if (v0 != -1)
  {
    v4 = &v2;
    v3 = &v4;
    std::__call_once(&mlcore::TypedEntityClass<mlcore::Account>::sharedPointer(void)::__once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::TypedEntityClass<mlcore::Account>::sharedPointer(void)::{lambda(void)#1} &&>>);
  }
  return mlcore::TypedEntityClass<mlcore::Account>::sharedPointer(void)::__sharedPointer;
}

double std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::TypedEntityClass<mlcore::Account>::sharedPointer(void)::{lambda(void)#1} &&>>()
{
  uint64_t v0;
  double result;

  v0 = operator new();
  result = 0.0;
  *(_OWORD *)(v0 + 16) = 0u;
  *(_OWORD *)(v0 + 32) = 0u;
  *(_OWORD *)(v0 + 48) = 0u;
  *(_OWORD *)(v0 + 64) = 0u;
  *(_OWORD *)(v0 + 80) = 0u;
  *(_QWORD *)(v0 + 96) = 0;
  *(_DWORD *)(v0 + 104) = 1065353216;
  *(_OWORD *)(v0 + 112) = 0u;
  *(_OWORD *)(v0 + 128) = 0u;
  *(_DWORD *)(v0 + 144) = 1065353216;
  *(_QWORD *)v0 = &off_24C3390E0;
  *(_QWORD *)(v0 + 8) = 850045863;
  mlcore::TypedEntityClass<mlcore::Account>::sharedPointer(void)::__sharedPointer = v0;
  return result;
}

void mlcore::TypedEntityClass<mlcore::Account>::~TypedEntityClass(mlcore::EntityClass *a1)
{
  mlcore::EntityClass::~EntityClass(a1);
  JUMPOUT(0x20BD27AFCLL);
}

uint64_t mlcore::TypedEntityClass<mlcore::Account>::description(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
}

__n128 mlcore::TypedEntityClass<mlcore::Account>::create@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, __n128 *a4@<X8>)
{
  char *v8;
  uint64_t v9;
  unint64_t *v10;
  uint64_t v11;
  __n128 result;
  __n128 v13;
  unint64_t v14[3];
  unint64_t *v15;
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  v8 = (char *)operator new(0x100uLL);
  *((_QWORD *)v8 + 1) = 0;
  *((_QWORD *)v8 + 2) = 0;
  *(_QWORD *)v8 = &off_24C33D4A8;
  *(_OWORD *)(v8 + 40) = 0u;
  *(_OWORD *)(v8 + 56) = 0u;
  *((_DWORD *)v8 + 18) = 1065353216;
  *((_OWORD *)v8 + 5) = 0u;
  *((_OWORD *)v8 + 6) = 0u;
  *((_DWORD *)v8 + 28) = 1065353216;
  *(_OWORD *)(v8 + 120) = 0u;
  *(_OWORD *)(v8 + 136) = 0u;
  *((_DWORD *)v8 + 38) = 1065353216;
  *((_OWORD *)v8 + 10) = 0u;
  *((_OWORD *)v8 + 11) = 0u;
  *((_DWORD *)v8 + 48) = 1065353216;
  *(_OWORD *)(v8 + 216) = 0u;
  *((_DWORD *)v8 + 58) = 1065353216;
  *((_QWORD *)v8 + 30) = &unk_24C3371E8;
  *((_QWORD *)v8 + 31) = a2;
  *(_OWORD *)(v8 + 200) = 0u;
  v9 = (uint64_t)(v8 + 200);
  *((_QWORD *)v8 + 4) = &off_24C3371C0;
  *((_QWORD *)v8 + 3) = &off_24C33A9A0;
  v13.n128_u64[0] = (unint64_t)(v8 + 24);
  v13.n128_u64[1] = (unint64_t)v8;
  v14[0] = (unint64_t)&off_24C33B140;
  v15 = v14;
  mlcore::PropertyCache::mergePropertiesFromCache((uint64_t)(v8 + 32), a3, (uint64_t)v14);
  v10 = v15;
  if (v15 == v14)
  {
    v11 = 4;
    v10 = v14;
    goto LABEL_5;
  }
  if (v15)
  {
    v11 = 5;
LABEL_5:
    (*(void (**)(void))(*v10 + 8 * v11))();
  }
  v14[0] = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 112))(a1);
  std::__hash_table<std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>,std::__unordered_map_hasher<mlcore::ModelProperty<long long> *,std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>,std::hash<mlcore::ModelProperty<long long> *>,std::equal_to<mlcore::ModelProperty<long long> *>,true>,std::__unordered_map_equal<mlcore::ModelProperty<long long> *,std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>,std::equal_to<mlcore::ModelProperty<long long> *>,std::hash<mlcore::ModelProperty<long long> *>,true>,std::allocator<std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>>>::__emplace_unique_key_args<mlcore::ModelProperty<long long> *,std::piecewise_construct_t const&,std::tuple<mlcore::ModelProperty<long long> * const&>,std::tuple<>>(v9, v14[0], v14)[3] = a2;
  result = v13;
  *a4 = v13;
  return result;
}

void sub_20A81D528(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15)
{
  char *v15;
  char *v17;
  uint64_t v18;

  v17 = a15;
  if (a15 == v15)
  {
    v18 = 4;
    v17 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v18 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v17 + 8 * v18))();
LABEL_6:
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t mlcore::TypedEntityClass<mlcore::Account>::name(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
}

uint64_t mlcore::TypedEntityClass<mlcore::Account>::entityType()
{
  return 0xFFFFFFFFLL;
}

BOOL mlcore::TypedEntityClass<mlcore::Account>::isRevisionTrackable(uint64_t a1)
{
  return (*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1) != -1;
}

uint64_t mlcore::TypedEntityClass<mlcore::Account>::isCloudUpdatable()
{
  return 0;
}

uint64_t mlcore::TypedEntityClass<mlcore::Account>::databaseTable()
{
  return *(_QWORD *)mediaplatform::Singleton<mlcore::AccountTable>::sharedInstance();
}

void mlcore::TypedEntityClass<mlcore::Account>::databaseTablesToDeleteFrom(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

void mlcore::TypedEntityClass<mlcore::Account>::databaseTablesToInsertInto(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

uint64_t mlcore::TypedEntityClass<mlcore::Account>::persistentIDProperty()
{
  return 0;
}

uint64_t mlcore::TypedEntityClass<mlcore::Account>::representativeItemPersistentIDProperty()
{
  return 0;
}

uint64_t mlcore::TypedEntityClass<mlcore::Account>::trackForeignPersistentIDProperty()
{
  return 0;
}

uint64_t mlcore::TypedEntityClass<mlcore::Account>::trackForeignOrderingProperty()
{
  return 0;
}

uint64_t mlcore::TypedEntityClass<mlcore::Account>::sectionPropertyForOrderingProperty()
{
  return 0;
}

uint64_t mediaplatform::Singleton<mlcore::AccountTable>::sharedInstance()
{
  unsigned __int8 v0;
  mlcore::AccountTable **v2;

  if ((v0 & 1) == 0
  {
    v2 = (mlcore::AccountTable **)operator new();
    _ZNSt3__115allocate_sharedB8ne180100IN6mlcore12AccountTableENS_9allocatorIS2_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(v2);
    mediaplatform::Singleton<mlcore::AccountTable>::sharedInstance(void)::_sharedInstance = (uint64_t)v2;
  }
  return mediaplatform::Singleton<mlcore::AccountTable>::sharedInstance(void)::_sharedInstance;
}

void sub_20A81D67C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x20BD27AFC](v1, 0x20C40A4A59CD2);
  _Unwind_Resume(a1);
}

mlcore::AccountTable *_ZNSt3__115allocate_sharedB8ne180100IN6mlcore12AccountTableENS_9allocatorIS2_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(mlcore::AccountTable **a1)
{
  _QWORD *v2;
  mlcore::AccountTable *result;

  v2 = operator new(0x1C8uLL);
  v2[1] = 0;
  v2[2] = 0;
  *v2 = &off_24C33C478;
  result = mlcore::AccountTable::AccountTable((mlcore::AccountTable *)(v2 + 3));
  *a1 = result;
  a1[1] = (mlcore::AccountTable *)v2;
  return result;
}

void sub_20A81D6F4(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<mlcore::AccountTable>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C33C478;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<mlcore::AccountTable>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C33C478;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x20BD27AFCLL);
}

uint64_t std::__shared_ptr_emplace<mlcore::AccountTable>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__shared_ptr_emplace<mlcore::Account>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C33D4A8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<mlcore::Account>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C33D4A8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x20BD27AFCLL);
}

uint64_t std::__shared_ptr_emplace<mlcore::Account>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t mlcore::AccountPropertyDSID(mlcore *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&mlcore::AccountPropertyDSID(void)::once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&mlcore::AccountPropertyDSID(void)::once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::AccountPropertyDSID(void)::$_0 &&>>);
  }
  return mlcore::AccountPropertyDSID(void)::property;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::AccountPropertyDSID(void)::$_0 &&>>()
{
  uint64_t v0;
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  mlcore::AccountTable **v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  std::string *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  std::string *v19;
  __int128 v20;
  std::string v21;
  std::string __p;
  char v23;
  _QWORD v24[2];

  v0 = operator new();
  v1 = (_QWORD *)mediaplatform::Singleton<mlcore::AccountTable>::sharedInstance();
  v2 = (std::__shared_weak_count *)v1[1];
  v24[0] = *v1;
  v24[1] = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  v5 = (mlcore::AccountTable **)mediaplatform::Singleton<mlcore::AccountTable>::sharedInstance();
  mlcore::AccountTable::dsidColumn(*v5, (uint64_t)&__p);
  mlcore::DatabaseModelProperty<long long>::DatabaseModelProperty(v0, v24, (uint64_t)&__p);
  mlcore::AccountPropertyDSID(void)::property = v0;
  if (v23 < 0)
    operator delete((void *)__p.__r_.__value_.__l.__size_);
  if (v2)
  {
    v6 = (unint64_t *)&v2->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v8 = mlcore::AccountPropertyDSID(void)::property;
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  std::string::operator=((std::string *)(v8 + 40), &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v9 = mlcore::TypedEntityClass<mlcore::Account>::sharedPointer();
  v10 = mlcore::AccountPropertyDSID(void)::property;
  v11 = mediaplatform::Singleton<mlcore::AccountTable>::sharedInstance();
  v12 = *(_QWORD *)v11;
  if (*(char *)(*(_QWORD *)v11 + 31) >= 0)
    v13 = *(unsigned __int8 *)(*(_QWORD *)v11 + 31);
  else
    v13 = *(_QWORD *)(*(_QWORD *)v11 + 16);
  v14 = &v21;
  std::string::basic_string[abi:ne180100]((uint64_t)&v21, v13 + 1);
  if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v14 = (std::string *)v21.__r_.__value_.__r.__words[0];
  if (v13)
  {
    v17 = *(char **)(v12 + 8);
    v16 = (char *)(v12 + 8);
    v15 = v17;
    if (v16[23] >= 0)
      v18 = v16;
    else
      v18 = v15;
    memmove(v14, v18, v13);
  }
  *(_WORD *)((char *)&v14->__r_.__value_.__l.__data_ + v13) = 46;
  v19 = std::string::append(&v21, "dsid");
  v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  __p.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  mlcore::EntityClass::setPropertyForName(v9, v10, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
}

void sub_20A81D9DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

uint64_t mlcore::AccountPropertyAppleID(mlcore *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&mlcore::AccountPropertyAppleID(void)::once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&mlcore::AccountPropertyAppleID(void)::once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::AccountPropertyAppleID(void)::$_0 &&>>);
  }
  return mlcore::AccountPropertyAppleID(void)::property;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::AccountPropertyAppleID(void)::$_0 &&>>()
{
  uint64_t v0;
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  mlcore::AccountTable **v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  std::string *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  std::string *v19;
  __int128 v20;
  std::string v21;
  std::string __str;
  _QWORD v23[2];

  v0 = operator new();
  v1 = (_QWORD *)mediaplatform::Singleton<mlcore::AccountTable>::sharedInstance();
  v2 = (std::__shared_weak_count *)v1[1];
  v23[0] = *v1;
  v23[1] = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  v5 = (mlcore::AccountTable **)mediaplatform::Singleton<mlcore::AccountTable>::sharedInstance();
  mlcore::AccountTable::appleIDColumn(*v5, (uint64_t)&__str);
  mlcore::DatabaseModelProperty<std::string>::DatabaseModelProperty(v0, v23, (uint64_t)&__str);
  mlcore::AccountPropertyAppleID(void)::property = v0;
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&__str);
  if (v2)
  {
    v6 = (unint64_t *)&v2->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v8 = mlcore::AccountPropertyAppleID(void)::property;
  std::string::basic_string[abi:ne180100]<0>(&__str, "");
  std::string::operator=((std::string *)(v8 + 40), &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  v9 = mlcore::TypedEntityClass<mlcore::Account>::sharedPointer();
  v10 = mlcore::AccountPropertyAppleID(void)::property;
  v11 = mediaplatform::Singleton<mlcore::AccountTable>::sharedInstance();
  v12 = *(_QWORD *)v11;
  if (*(char *)(*(_QWORD *)v11 + 31) >= 0)
    v13 = *(unsigned __int8 *)(*(_QWORD *)v11 + 31);
  else
    v13 = *(_QWORD *)(*(_QWORD *)v11 + 16);
  v14 = &v21;
  std::string::basic_string[abi:ne180100]((uint64_t)&v21, v13 + 1);
  if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v14 = (std::string *)v21.__r_.__value_.__r.__words[0];
  if (v13)
  {
    v17 = *(char **)(v12 + 8);
    v16 = (char *)(v12 + 8);
    v15 = v17;
    if (v16[23] >= 0)
      v18 = v16;
    else
      v18 = v15;
    memmove(v14, v18, v13);
  }
  *(_WORD *)((char *)&v14->__r_.__value_.__l.__data_ + v13) = 46;
  v19 = std::string::append(&v21, "apple_id");
  v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  __str.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  mlcore::EntityClass::setPropertyForName(v9, v10, &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
}

void sub_20A81DCC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

uint64_t mlcore::AccountPropertyAltDSID(mlcore *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&mlcore::AccountPropertyAltDSID(void)::once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&mlcore::AccountPropertyAltDSID(void)::once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::AccountPropertyAltDSID(void)::$_0 &&>>);
  }
  return mlcore::AccountPropertyAltDSID(void)::property;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::AccountPropertyAltDSID(void)::$_0 &&>>()
{
  uint64_t v0;
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  mlcore::AccountTable **v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  std::string *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  std::string *v19;
  __int128 v20;
  std::string v21;
  std::string __str;
  _QWORD v23[2];

  v0 = operator new();
  v1 = (_QWORD *)mediaplatform::Singleton<mlcore::AccountTable>::sharedInstance();
  v2 = (std::__shared_weak_count *)v1[1];
  v23[0] = *v1;
  v23[1] = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  v5 = (mlcore::AccountTable **)mediaplatform::Singleton<mlcore::AccountTable>::sharedInstance();
  mlcore::AccountTable::altDSIDColumn(*v5, (uint64_t)&__str);
  mlcore::DatabaseModelProperty<std::string>::DatabaseModelProperty(v0, v23, (uint64_t)&__str);
  mlcore::AccountPropertyAltDSID(void)::property = v0;
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&__str);
  if (v2)
  {
    v6 = (unint64_t *)&v2->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v8 = mlcore::AccountPropertyAltDSID(void)::property;
  std::string::basic_string[abi:ne180100]<0>(&__str, "");
  std::string::operator=((std::string *)(v8 + 40), &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  v9 = mlcore::TypedEntityClass<mlcore::Account>::sharedPointer();
  v10 = mlcore::AccountPropertyAltDSID(void)::property;
  v11 = mediaplatform::Singleton<mlcore::AccountTable>::sharedInstance();
  v12 = *(_QWORD *)v11;
  if (*(char *)(*(_QWORD *)v11 + 31) >= 0)
    v13 = *(unsigned __int8 *)(*(_QWORD *)v11 + 31);
  else
    v13 = *(_QWORD *)(*(_QWORD *)v11 + 16);
  v14 = &v21;
  std::string::basic_string[abi:ne180100]((uint64_t)&v21, v13 + 1);
  if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v14 = (std::string *)v21.__r_.__value_.__r.__words[0];
  if (v13)
  {
    v17 = *(char **)(v12 + 8);
    v16 = (char *)(v12 + 8);
    v15 = v17;
    if (v16[23] >= 0)
      v18 = v16;
    else
      v18 = v15;
    memmove(v14, v18, v13);
  }
  *(_WORD *)((char *)&v14->__r_.__value_.__l.__data_ + v13) = 46;
  v19 = std::string::append(&v21, "alt_dsid");
  v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  __str.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  mlcore::EntityClass::setPropertyForName(v9, v10, &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
}

void sub_20A81DF9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

uint64_t mlcore::Account::dsid(mlcore::Account *this)
{
  unint64_t v2;

  v2 = mlcore::AccountPropertyDSID(this);
  return mlcore::Entity::valueForProperty<long long>((uint64_t)this, v2);
}

_QWORD *mlcore::Account::setDSID(mlcore::Account *this, uint64_t a2)
{
  _QWORD *result;
  unint64_t v5;

  v5 = mlcore::AccountPropertyDSID(this);
  result = std::__hash_table<std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>,std::__unordered_map_hasher<mlcore::ModelProperty<long long> *,std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>,std::hash<mlcore::ModelProperty<long long> *>,std::equal_to<mlcore::ModelProperty<long long> *>,true>,std::__unordered_map_equal<mlcore::ModelProperty<long long> *,std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>,std::equal_to<mlcore::ModelProperty<long long> *>,std::hash<mlcore::ModelProperty<long long> *>,true>,std::allocator<std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>>>::__emplace_unique_key_args<mlcore::ModelProperty<long long> *,std::piecewise_construct_t const&,std::tuple<mlcore::ModelProperty<long long> * const&>,std::tuple<>>((uint64_t)this + 176, v5, &v5);
  result[3] = a2;
  return result;
}

void mlcore::Account::appleID(mlcore::Account *this@<X0>, std::string *a2@<X8>)
{
  unint64_t v4;

  v4 = mlcore::AccountPropertyAppleID(this);
  mlcore::Entity::valueForProperty<std::string>(a2, (uint64_t)this, v4);
}

void mlcore::Account::setAppleID(mlcore *a1, uint64_t a2)
{
  std::string::size_type v4;

  v4 = mlcore::AccountPropertyAppleID(a1);
  mlcore::Entity::setValueForProperty<std::string>((uint64_t)a1, a2, v4);
}

void mlcore::Account::altDSID(mlcore::Account *this@<X0>, std::string *a2@<X8>)
{
  unint64_t v4;

  v4 = mlcore::AccountPropertyAltDSID(this);
  mlcore::Entity::valueForProperty<std::string>(a2, (uint64_t)this, v4);
}

void mlcore::Account::setAltDSID(mlcore *a1, uint64_t a2)
{
  std::string::size_type v4;

  v4 = mlcore::AccountPropertyAltDSID(a1);
  mlcore::Entity::setValueForProperty<std::string>((uint64_t)a1, a2, v4);
}

void mlcore::PlaylistItemReaction::~PlaylistItemReaction(mlcore::PlaylistItemReaction *this)
{
  *(_QWORD *)this = off_24C33A860;
  mlcore::PropertyCacheBase<long long,int,double,std::string,mediaplatform::Data>::~PropertyCacheBase((_QWORD *)this + 1);
}

{
  *(_QWORD *)this = off_24C33A860;
  mlcore::PropertyCacheBase<long long,int,double,std::string,mediaplatform::Data>::~PropertyCacheBase((_QWORD *)this + 1);
  JUMPOUT(0x20BD27AFCLL);
}

double std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::TypedEntityClass<mlcore::PlaylistItemReaction>::sharedPointer(void)::{lambda(void)#1} &&>>()
{
  uint64_t v0;
  double result;

  v0 = operator new();
  result = 0.0;
  *(_OWORD *)(v0 + 16) = 0u;
  *(_OWORD *)(v0 + 32) = 0u;
  *(_OWORD *)(v0 + 48) = 0u;
  *(_OWORD *)(v0 + 64) = 0u;
  *(_OWORD *)(v0 + 80) = 0u;
  *(_QWORD *)(v0 + 96) = 0;
  *(_DWORD *)(v0 + 104) = 1065353216;
  *(_OWORD *)(v0 + 112) = 0u;
  *(_OWORD *)(v0 + 128) = 0u;
  *(_DWORD *)(v0 + 144) = 1065353216;
  *(_QWORD *)v0 = &off_24C338AF8;
  *(_QWORD *)(v0 + 8) = 850045863;
  mlcore::TypedEntityClass<mlcore::PlaylistItemReaction>::sharedPointer(void)::__sharedPointer = v0;
  return result;
}

void mlcore::TypedEntityClass<mlcore::PlaylistItemReaction>::~TypedEntityClass(mlcore::EntityClass *a1)
{
  mlcore::EntityClass::~EntityClass(a1);
  JUMPOUT(0x20BD27AFCLL);
}

uint64_t mlcore::TypedEntityClass<mlcore::PlaylistItemReaction>::description(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
}

__n128 mlcore::TypedEntityClass<mlcore::PlaylistItemReaction>::create@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, __n128 *a4@<X8>)
{
  char *v8;
  uint64_t v9;
  unint64_t *v10;
  uint64_t v11;
  __n128 result;
  __n128 v13;
  unint64_t v14[3];
  unint64_t *v15;
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  v8 = (char *)operator new(0x100uLL);
  *((_QWORD *)v8 + 1) = 0;
  *((_QWORD *)v8 + 2) = 0;
  *(_QWORD *)v8 = &off_24C33CFA0;
  *(_OWORD *)(v8 + 40) = 0u;
  *(_OWORD *)(v8 + 56) = 0u;
  *((_DWORD *)v8 + 18) = 1065353216;
  *((_OWORD *)v8 + 5) = 0u;
  *((_OWORD *)v8 + 6) = 0u;
  *((_DWORD *)v8 + 28) = 1065353216;
  *(_OWORD *)(v8 + 120) = 0u;
  *(_OWORD *)(v8 + 136) = 0u;
  *((_DWORD *)v8 + 38) = 1065353216;
  *((_OWORD *)v8 + 10) = 0u;
  *((_OWORD *)v8 + 11) = 0u;
  *((_DWORD *)v8 + 48) = 1065353216;
  *(_OWORD *)(v8 + 216) = 0u;
  *((_DWORD *)v8 + 58) = 1065353216;
  *((_QWORD *)v8 + 30) = &unk_24C3371E8;
  *((_QWORD *)v8 + 31) = a2;
  *(_OWORD *)(v8 + 200) = 0u;
  v9 = (uint64_t)(v8 + 200);
  *((_QWORD *)v8 + 4) = &off_24C3371C0;
  *((_QWORD *)v8 + 3) = &off_24C339EE8;
  v13.n128_u64[0] = (unint64_t)(v8 + 24);
  v13.n128_u64[1] = (unint64_t)v8;
  v14[0] = (unint64_t)&off_24C33B140;
  v15 = v14;
  mlcore::PropertyCache::mergePropertiesFromCache((uint64_t)(v8 + 32), a3, (uint64_t)v14);
  v10 = v15;
  if (v15 == v14)
  {
    v11 = 4;
    v10 = v14;
    goto LABEL_5;
  }
  if (v15)
  {
    v11 = 5;
LABEL_5:
    (*(void (**)(void))(*v10 + 8 * v11))();
  }
  v14[0] = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 112))(a1);
  std::__hash_table<std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>,std::__unordered_map_hasher<mlcore::ModelProperty<long long> *,std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>,std::hash<mlcore::ModelProperty<long long> *>,std::equal_to<mlcore::ModelProperty<long long> *>,true>,std::__unordered_map_equal<mlcore::ModelProperty<long long> *,std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>,std::equal_to<mlcore::ModelProperty<long long> *>,std::hash<mlcore::ModelProperty<long long> *>,true>,std::allocator<std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>>>::__emplace_unique_key_args<mlcore::ModelProperty<long long> *,std::piecewise_construct_t const&,std::tuple<mlcore::ModelProperty<long long> * const&>,std::tuple<>>(v9, v14[0], v14)[3] = a2;
  result = v13;
  *a4 = v13;
  return result;
}

void sub_20A81E400(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15)
{
  char *v15;
  char *v17;
  uint64_t v18;

  v17 = a15;
  if (a15 == v15)
  {
    v18 = 4;
    v17 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v18 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v17 + 8 * v18))();
LABEL_6:
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t mlcore::TypedEntityClass<mlcore::PlaylistItemReaction>::name(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
}

uint64_t mlcore::TypedEntityClass<mlcore::PlaylistItemReaction>::entityType()
{
  return 12;
}

BOOL mlcore::TypedEntityClass<mlcore::PlaylistItemReaction>::isRevisionTrackable(uint64_t a1)
{
  return (*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1) != -1;
}

uint64_t mlcore::TypedEntityClass<mlcore::PlaylistItemReaction>::isCloudUpdatable()
{
  return 0;
}

void mlcore::TypedEntityClass<mlcore::PlaylistItemReaction>::databaseTablesToDeleteFrom(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

void mlcore::TypedEntityClass<mlcore::PlaylistItemReaction>::databaseTablesToInsertInto(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

uint64_t mlcore::TypedEntityClass<mlcore::PlaylistItemReaction>::representativeItemPersistentIDProperty()
{
  return 0;
}

uint64_t mlcore::TypedEntityClass<mlcore::PlaylistItemReaction>::trackForeignPersistentIDProperty()
{
  return 0;
}

uint64_t mlcore::TypedEntityClass<mlcore::PlaylistItemReaction>::trackForeignOrderingProperty()
{
  return 0;
}

uint64_t mlcore::TypedEntityClass<mlcore::PlaylistItemReaction>::sectionPropertyForOrderingProperty()
{
  return 0;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::PlaylistItemReactionPropertyPersistentID(void)::$_0 &&>>()
{
  uint64_t v0;
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  mlcore::ContainerItemReactionTable **v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  std::string *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  std::string *v19;
  __int128 v20;
  std::string v21;
  std::string __p;
  char v23;
  _QWORD v24[2];

  v0 = operator new();
  v1 = (_QWORD *)mediaplatform::Singleton<mlcore::ContainerItemReactionTable>::sharedInstance();
  v2 = (std::__shared_weak_count *)v1[1];
  v24[0] = *v1;
  v24[1] = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  v5 = (mlcore::ContainerItemReactionTable **)mediaplatform::Singleton<mlcore::ContainerItemReactionTable>::sharedInstance();
  mlcore::ContainerItemReactionTable::persistentIDColumn(*v5, (uint64_t)&__p);
  mlcore::DatabaseModelProperty<long long>::DatabaseModelProperty(v0, v24, (uint64_t)&__p);
  mlcore::PlaylistItemReactionPropertyPersistentID(void)::property = v0;
  if (v23 < 0)
    operator delete((void *)__p.__r_.__value_.__l.__size_);
  if (v2)
  {
    v6 = (unint64_t *)&v2->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v8 = mlcore::PlaylistItemReactionPropertyPersistentID(void)::property;
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  std::string::operator=((std::string *)(v8 + 40), &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v9 = mlcore::TypedEntityClass<mlcore::PlaylistItemReaction>::sharedPointer();
  v10 = mlcore::PlaylistItemReactionPropertyPersistentID(void)::property;
  v11 = mediaplatform::Singleton<mlcore::ContainerItemReactionTable>::sharedInstance();
  v12 = *(_QWORD *)v11;
  if (*(char *)(*(_QWORD *)v11 + 31) >= 0)
    v13 = *(unsigned __int8 *)(*(_QWORD *)v11 + 31);
  else
    v13 = *(_QWORD *)(*(_QWORD *)v11 + 16);
  v14 = &v21;
  std::string::basic_string[abi:ne180100]((uint64_t)&v21, v13 + 1);
  if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v14 = (std::string *)v21.__r_.__value_.__r.__words[0];
  if (v13)
  {
    v17 = *(char **)(v12 + 8);
    v16 = (char *)(v12 + 8);
    v15 = v17;
    if (v16[23] >= 0)
      v18 = v16;
    else
      v18 = v15;
    memmove(v14, v18, v13);
  }
  *(_WORD *)((char *)&v14->__r_.__value_.__l.__data_ + v13) = 46;
  v19 = std::string::append(&v21, "persistentID");
  v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  __p.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  mlcore::EntityClass::setPropertyForName(v9, v10, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
}

void sub_20A81E698(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

mlcore::ContainerItemReactionTable *_ZNSt3__115allocate_sharedB8ne180100IN6mlcore26ContainerItemReactionTableENS_9allocatorIS2_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(mlcore::ContainerItemReactionTable **a1)
{
  _QWORD *v2;
  mlcore::ContainerItemReactionTable *result;

  v2 = operator new(0x268uLL);
  v2[1] = 0;
  v2[2] = 0;
  *v2 = &off_24C33D1D0;
  result = mlcore::ContainerItemReactionTable::ContainerItemReactionTable((mlcore::ContainerItemReactionTable *)(v2 + 3));
  *a1 = result;
  a1[1] = (mlcore::ContainerItemReactionTable *)v2;
  return result;
}

void sub_20A81E794(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<mlcore::ContainerItemReactionTable>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C33D1D0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<mlcore::ContainerItemReactionTable>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C33D1D0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x20BD27AFCLL);
}

uint64_t std::__shared_ptr_emplace<mlcore::ContainerItemReactionTable>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__shared_ptr_emplace<mlcore::PlaylistItemReaction>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C33CFA0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<mlcore::PlaylistItemReaction>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C33CFA0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x20BD27AFCLL);
}

uint64_t std::__shared_ptr_emplace<mlcore::PlaylistItemReaction>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::PlaylistItemReactionPropertyContainerItemPersistentID(void)::$_0 &&>>()
{
  uint64_t v0;
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  mlcore::ContainerItemReactionTable **v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  std::string *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  std::string *v19;
  __int128 v20;
  std::string v21;
  std::string __p;
  char v23;
  _QWORD v24[2];

  v0 = operator new();
  v1 = (_QWORD *)mediaplatform::Singleton<mlcore::ContainerItemReactionTable>::sharedInstance();
  v2 = (std::__shared_weak_count *)v1[1];
  v24[0] = *v1;
  v24[1] = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  v5 = (mlcore::ContainerItemReactionTable **)mediaplatform::Singleton<mlcore::ContainerItemReactionTable>::sharedInstance();
  mlcore::ContainerItemReactionTable::containerItemPersistentIDColumn(*v5, (uint64_t)&__p);
  mlcore::DatabaseModelProperty<long long>::DatabaseModelProperty(v0, v24, (uint64_t)&__p);
  mlcore::PlaylistItemReactionPropertyContainerItemPersistentID(void)::property = v0;
  if (v23 < 0)
    operator delete((void *)__p.__r_.__value_.__l.__size_);
  if (v2)
  {
    v6 = (unint64_t *)&v2->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v8 = mlcore::PlaylistItemReactionPropertyContainerItemPersistentID(void)::property;
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  std::string::operator=((std::string *)(v8 + 40), &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v9 = mlcore::TypedEntityClass<mlcore::PlaylistItemReaction>::sharedPointer();
  v10 = mlcore::PlaylistItemReactionPropertyContainerItemPersistentID(void)::property;
  v11 = mediaplatform::Singleton<mlcore::ContainerItemReactionTable>::sharedInstance();
  v12 = *(_QWORD *)v11;
  if (*(char *)(*(_QWORD *)v11 + 31) >= 0)
    v13 = *(unsigned __int8 *)(*(_QWORD *)v11 + 31);
  else
    v13 = *(_QWORD *)(*(_QWORD *)v11 + 16);
  v14 = &v21;
  std::string::basic_string[abi:ne180100]((uint64_t)&v21, v13 + 1);
  if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v14 = (std::string *)v21.__r_.__value_.__r.__words[0];
  if (v13)
  {
    v17 = *(char **)(v12 + 8);
    v16 = (char *)(v12 + 8);
    v15 = v17;
    if (v16[23] >= 0)
      v18 = v16;
    else
      v18 = v15;
    memmove(v14, v18, v13);
  }
  *(_WORD *)((char *)&v14->__r_.__value_.__l.__data_ + v13) = 46;
  v19 = std::string::append(&v21, "containerItemPersistentID");
  v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  __p.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  mlcore::EntityClass::setPropertyForName(v9, v10, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
}

void sub_20A81EA20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::PlaylistItemReactionPropertyPersonPersistentID(void)::$_0 &&>>()
{
  uint64_t v0;
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  mlcore::ContainerItemReactionTable **v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  std::string *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  std::string *v19;
  __int128 v20;
  std::string v21;
  std::string __p;
  char v23;
  _QWORD v24[2];

  v0 = operator new();
  v1 = (_QWORD *)mediaplatform::Singleton<mlcore::ContainerItemReactionTable>::sharedInstance();
  v2 = (std::__shared_weak_count *)v1[1];
  v24[0] = *v1;
  v24[1] = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  v5 = (mlcore::ContainerItemReactionTable **)mediaplatform::Singleton<mlcore::ContainerItemReactionTable>::sharedInstance();
  mlcore::ContainerItemReactionTable::personPersistentIDColumn(*v5, (uint64_t)&__p);
  mlcore::DatabaseModelProperty<long long>::DatabaseModelProperty(v0, v24, (uint64_t)&__p);
  mlcore::PlaylistItemReactionPropertyPersonPersistentID(void)::property = v0;
  if (v23 < 0)
    operator delete((void *)__p.__r_.__value_.__l.__size_);
  if (v2)
  {
    v6 = (unint64_t *)&v2->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v8 = mlcore::PlaylistItemReactionPropertyPersonPersistentID(void)::property;
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  std::string::operator=((std::string *)(v8 + 40), &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v9 = mlcore::TypedEntityClass<mlcore::PlaylistItemReaction>::sharedPointer();
  v10 = mlcore::PlaylistItemReactionPropertyPersonPersistentID(void)::property;
  v11 = mediaplatform::Singleton<mlcore::ContainerItemReactionTable>::sharedInstance();
  v12 = *(_QWORD *)v11;
  if (*(char *)(*(_QWORD *)v11 + 31) >= 0)
    v13 = *(unsigned __int8 *)(*(_QWORD *)v11 + 31);
  else
    v13 = *(_QWORD *)(*(_QWORD *)v11 + 16);
  v14 = &v21;
  std::string::basic_string[abi:ne180100]((uint64_t)&v21, v13 + 1);
  if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v14 = (std::string *)v21.__r_.__value_.__r.__words[0];
  if (v13)
  {
    v17 = *(char **)(v12 + 8);
    v16 = (char *)(v12 + 8);
    v15 = v17;
    if (v16[23] >= 0)
      v18 = v16;
    else
      v18 = v15;
    memmove(v14, v18, v13);
  }
  *(_WORD *)((char *)&v14->__r_.__value_.__l.__data_ + v13) = 46;
  v19 = std::string::append(&v21, "personPersistentID");
  v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  __p.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  mlcore::EntityClass::setPropertyForName(v9, v10, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
}

void sub_20A81ECB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::PlaylistItemReactionPropertyReactionText(void)::$_0 &&>>()
{
  uint64_t v0;
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  mlcore::ContainerItemReactionTable **v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  std::string *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  std::string *v19;
  __int128 v20;
  std::string v21;
  std::string __str;
  _QWORD v23[2];

  v0 = operator new();
  v1 = (_QWORD *)mediaplatform::Singleton<mlcore::ContainerItemReactionTable>::sharedInstance();
  v2 = (std::__shared_weak_count *)v1[1];
  v23[0] = *v1;
  v23[1] = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  v5 = (mlcore::ContainerItemReactionTable **)mediaplatform::Singleton<mlcore::ContainerItemReactionTable>::sharedInstance();
  mlcore::ContainerItemReactionTable::reactionTextColumn(*v5, (uint64_t)&__str);
  mlcore::DatabaseModelProperty<std::string>::DatabaseModelProperty(v0, v23, (uint64_t)&__str);
  mlcore::PlaylistItemReactionPropertyReactionText(void)::property = v0;
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&__str);
  if (v2)
  {
    v6 = (unint64_t *)&v2->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v8 = mlcore::PlaylistItemReactionPropertyReactionText(void)::property;
  std::string::basic_string[abi:ne180100]<0>(&__str, "");
  std::string::operator=((std::string *)(v8 + 40), &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  v9 = mlcore::TypedEntityClass<mlcore::PlaylistItemReaction>::sharedPointer();
  v10 = mlcore::PlaylistItemReactionPropertyReactionText(void)::property;
  v11 = mediaplatform::Singleton<mlcore::ContainerItemReactionTable>::sharedInstance();
  v12 = *(_QWORD *)v11;
  if (*(char *)(*(_QWORD *)v11 + 31) >= 0)
    v13 = *(unsigned __int8 *)(*(_QWORD *)v11 + 31);
  else
    v13 = *(_QWORD *)(*(_QWORD *)v11 + 16);
  v14 = &v21;
  std::string::basic_string[abi:ne180100]((uint64_t)&v21, v13 + 1);
  if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v14 = (std::string *)v21.__r_.__value_.__r.__words[0];
  if (v13)
  {
    v17 = *(char **)(v12 + 8);
    v16 = (char *)(v12 + 8);
    v15 = v17;
    if (v16[23] >= 0)
      v18 = v16;
    else
      v18 = v15;
    memmove(v14, v18, v13);
  }
  *(_WORD *)((char *)&v14->__r_.__value_.__l.__data_ + v13) = 46;
  v19 = std::string::append(&v21, "reactionText");
  v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  __str.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  mlcore::EntityClass::setPropertyForName(v9, v10, &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
}

void sub_20A81EF38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::PlaylistItemReactionPropertyDate(void)::$_0 &&>>()
{
  uint64_t v0;
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  mlcore::ContainerItemReactionTable **v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  std::string *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  std::string *v19;
  __int128 v20;
  std::string v21;
  std::string __p;
  char v23;
  _QWORD v24[2];

  v0 = operator new();
  v1 = (_QWORD *)mediaplatform::Singleton<mlcore::ContainerItemReactionTable>::sharedInstance();
  v2 = (std::__shared_weak_count *)v1[1];
  v24[0] = *v1;
  v24[1] = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  v5 = (mlcore::ContainerItemReactionTable **)mediaplatform::Singleton<mlcore::ContainerItemReactionTable>::sharedInstance();
  mlcore::ContainerItemReactionTable::dateColumn(*v5, (uint64_t)&__p);
  mlcore::DatabaseModelProperty<long long>::DatabaseModelProperty(v0, v24, (uint64_t)&__p);
  mlcore::PlaylistItemReactionPropertyDate(void)::property = v0;
  if (v23 < 0)
    operator delete((void *)__p.__r_.__value_.__l.__size_);
  if (v2)
  {
    v6 = (unint64_t *)&v2->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v8 = mlcore::PlaylistItemReactionPropertyDate(void)::property;
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  std::string::operator=((std::string *)(v8 + 40), &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v9 = mlcore::TypedEntityClass<mlcore::PlaylistItemReaction>::sharedPointer();
  v10 = mlcore::PlaylistItemReactionPropertyDate(void)::property;
  v11 = mediaplatform::Singleton<mlcore::ContainerItemReactionTable>::sharedInstance();
  v12 = *(_QWORD *)v11;
  if (*(char *)(*(_QWORD *)v11 + 31) >= 0)
    v13 = *(unsigned __int8 *)(*(_QWORD *)v11 + 31);
  else
    v13 = *(_QWORD *)(*(_QWORD *)v11 + 16);
  v14 = &v21;
  std::string::basic_string[abi:ne180100]((uint64_t)&v21, v13 + 1);
  if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v14 = (std::string *)v21.__r_.__value_.__r.__words[0];
  if (v13)
  {
    v17 = *(char **)(v12 + 8);
    v16 = (char *)(v12 + 8);
    v15 = v17;
    if (v16[23] >= 0)
      v18 = v16;
    else
      v18 = v15;
    memmove(v14, v18, v13);
  }
  *(_WORD *)((char *)&v14->__r_.__value_.__l.__data_ + v13) = 46;
  v19 = std::string::append(&v21, "date");
  v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  __p.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  mlcore::EntityClass::setPropertyForName(v9, v10, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
}

void sub_20A81F1C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

double mlcore::PlaylistItemReaction::PlaylistItemReaction(mlcore::PlaylistItemReaction *this, uint64_t a2)
{
  double result;

  result = 0.0;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_DWORD *)this + 12) = 1065353216;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *((_DWORD *)this + 22) = 1065353216;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_DWORD *)this + 32) = 1065353216;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 152) = 0u;
  *((_DWORD *)this + 42) = 1065353216;
  *((_OWORD *)this + 11) = 0u;
  *((_OWORD *)this + 12) = 0u;
  *((_DWORD *)this + 52) = 1065353216;
  *((_QWORD *)this + 27) = &unk_24C3371E8;
  *((_QWORD *)this + 28) = a2;
  *(_QWORD *)this = &off_24C339EE8;
  *((_QWORD *)this + 1) = &off_24C3371C0;
  return result;
}

{
  double result;

  result = 0.0;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_DWORD *)this + 12) = 1065353216;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *((_DWORD *)this + 22) = 1065353216;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_DWORD *)this + 32) = 1065353216;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 152) = 0u;
  *((_DWORD *)this + 42) = 1065353216;
  *((_OWORD *)this + 11) = 0u;
  *((_OWORD *)this + 12) = 0u;
  *((_DWORD *)this + 52) = 1065353216;
  *((_QWORD *)this + 27) = &unk_24C3371E8;
  *((_QWORD *)this + 28) = a2;
  *(_QWORD *)this = &off_24C339EE8;
  *((_QWORD *)this + 1) = &off_24C3371C0;
  return result;
}

uint64_t ChapterData_Create(_QWORD *a1)
{
  void *v2;
  _DWORD *v3;
  uint64_t v4;
  uint64_t v5;

  v2 = malloc_type_calloc(0x58uLL, 1uLL, 0x1745688DuLL);
  if (v2)
  {
    v3 = v2;
    *(_QWORD *)v2 = 0x163687064;
    v4 = JRAtomContainerCreate((uint64_t **)v2 + 3);
    if ((_DWORD)v4)
    {
      v5 = v4;
    }
    else
    {
      v3[5] = 0;
      v5 = ChapterData_NewChapterInternal((uint64_t)v3, 0, 0, 0);
      if (!(_DWORD)v5)
      {
LABEL_7:
        *a1 = v3;
        return v5;
      }
    }
    ChapterData_Dispose(v3);
    v3 = 0;
    goto LABEL_7;
  }
  return 0;
}

uint64_t ChapterData_NewChapterInternal(uint64_t a1, unsigned int a2, int a3, unsigned int *a4)
{
  signed int v7;
  unsigned int **v8;
  uint64_t result;
  unsigned int *v10;
  int v11;
  __int16 v12;
  signed int v13;
  int v14;
  unsigned int v15;
  __int16 v16;
  unsigned int v17;
  signed int v18;
  signed int v19;

  if (!a1)
    return 4294967246;
  if (*(_DWORD *)a1 != 1667788900)
    return 4294967246;
  if (a2 <= 1)
    v7 = 1;
  else
    v7 = a2;
  if (a3)
  {
    v8 = (unsigned int **)(a1 + 32);
    if (!*(_QWORD *)(a1 + 32))
    {
      result = JRAtomContainerCreate((uint64_t **)(a1 + 32));
      if ((_DWORD)result)
        return result;
    }
  }
  else
  {
    v8 = (unsigned int **)(a1 + 24);
  }
  v10 = *v8;
  v11 = JRCountChildrenOfType(v10, 0, 1667785072);
  if (v11 >= 1)
  {
    v12 = v11;
    v18 = 0;
    if (JRFindChildByIndex(v10, 0, 1667785072, v11, &v18))
    {
      v13 = v18;
      if (v18 >= v7)
      {
        while (1)
        {
          v19 = 0;
          v14 = v12;
          v15 = JRFindChildByIndex(v10, 0, 1667785072, v12, &v19);
          if (v15)
            v13 = v19;
          if (v13 < v7)
          {
            v16 = v12 + 1;
            if (a3)
              return JRInsertChild(v10, 0, 0x63686170u, v7, v16, 0, 0, a4);
            goto LABEL_25;
          }
          if (v13 == v7)
            break;
          --v12;
          if (v14 <= 1)
            goto LABEL_20;
        }
        if (!a4)
          return 0;
        v17 = v15;
        result = 0;
        goto LABEL_30;
      }
      goto LABEL_20;
    }
    return 4294967246;
  }
LABEL_20:
  v16 = 0;
  if (a3)
    return JRInsertChild(v10, 0, 0x63686170u, v7, v16, 0, 0, a4);
LABEL_25:
  *(_BYTE *)(a1 + 64) = 0;
  *(_BYTE *)(a1 + 78) = 0;
  result = JRInsertChild(v10, 0, 0x63686170u, v7, v16, 0, 0, (_DWORD *)(a1 + 72));
  if (!(_DWORD)result)
  {
    *(_DWORD *)(a1 + 68) = v7;
    *(_BYTE *)(a1 + 64) = 1;
    *(_WORD *)(a1 + 76) = v16;
    *(_BYTE *)(a1 + 78) = 0;
    *(_DWORD *)(a1 + 80) = -1;
    ++*(_DWORD *)(a1 + 20);
    *(_BYTE *)(a1 + 16) = 1;
    if (a4)
    {
      result = 0;
      v17 = *(_DWORD *)(a1 + 72);
LABEL_30:
      *a4 = v17;
      return result;
    }
    return 0;
  }
  return result;
}

void ChapterData_Dispose(_DWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;

  if (*a1 == 1667788900)
  {
    JRAtomContainerRelease(*((_DWORD **)a1 + 3));
    JRAtomContainerRelease(*((_DWORD **)a1 + 4));
    v2 = (void *)*((_QWORD *)a1 + 5);
    if (v2)
      free(v2);
    v3 = (void *)*((_QWORD *)a1 + 6);
    if (v3)
      free(v3);
    v4 = (void *)*((_QWORD *)a1 + 7);
    if (v4)
      free(v4);
    free(a1);
  }
}

uint64_t ChapterData_NewChapter(uint64_t a1, unsigned int a2)
{
  return ChapterData_NewChapterInternal(a1, a2, 0, 0);
}

uint64_t ChapterData_CreateWithFlattenedData(unsigned int a1, const void *a2, int8x8_t **a3)
{
  uint64_t v6;
  int8x8_t *v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int *v10;
  const void *AtomDataPtr;
  unsigned int v12;
  int8x8_t *v14;
  size_t __n;

  v14 = 0;
  v6 = ChapterData_Create(&v14);
  v7 = v14;
  if ((_DWORD)v6)
  {
    v8 = v6;
    if (v14)
    {
LABEL_3:
      ChapterData_Dispose(v7);
      v7 = 0;
    }
  }
  else
  {
    if (!v14)
    {
      v8 = 4294967188;
      goto LABEL_12;
    }
    v9 = JRDataToAtomContainer(a1, a2);
    if (!v9)
    {
      v8 = 4294967246;
      goto LABEL_3;
    }
    v10 = (unsigned int *)v9;
    JRAtomContainerRelease(*(_DWORD **)&v7[3]);
    v7[3] = (int8x8_t)v10;
    v7[2].i32[1] = JRCountChildrenOfType(v10, 0, 1667785072);
    LODWORD(__n) = 0;
    AtomDataPtr = (const void *)JRFindAndGetAtomDataPtr(*(unsigned int **)&v7[3], 0, 1751475314, 1, &__n);
    if (AtomDataPtr)
    {
      v12 = __n;
      if (__n >= 9)
      {
        v12 = 8;
        LODWORD(__n) = 8;
      }
      memcpy(&v7[1], AtomDataPtr, v12);
      v7[1] = vrev32_s8(v7[1]);
    }
    v8 = 0;
  }
LABEL_12:
  *a3 = v7;
  return v8;
}

uint64_t ChapterData_ExportFlattenedData(uint64_t a1, CFDataRef *a2)
{
  unsigned int v4;
  CFDataRef v5;
  _DWORD v7[2];

  if (!a1)
    return 4294967246;
  if (*(_DWORD *)a1 != 1667788900)
    return 4294967246;
  if (*(_BYTE *)(a1 + 16))
  {
    v4 = bswap32(*(_DWORD *)(a1 + 12));
    v7[0] = bswap32(*(_DWORD *)(a1 + 8));
    v7[1] = v4;
    JRAddOrInsertAtom(*(unsigned int **)(a1 + 24), 0, 0x68656472u, 8, v7);
    *(_BYTE *)(a1 + 16) = 0;
  }
  v5 = JRAtomContainerToCFData(*(unsigned int **)(a1 + 24));
  *a2 = v5;
  if (v5)
    return 0;
  else
    return 4294967246;
}

_DWORD *ChapterData_Retain(_DWORD *result)
{
  if (result)
  {
    if (*result == 1667788900)
      ++result[1];
  }
  return result;
}

void ChapterData_Release(_DWORD *a1)
{
  int v1;

  if (a1 && *a1 == 1667788900)
  {
    v1 = a1[1] - 1;
    a1[1] = v1;
    if (!v1)
      ChapterData_Dispose(a1);
  }
}

int8x8_t *ChapterData_CreateCopy(int8x8_t *result)
{
  int v1;
  const __CFData *v2;
  unsigned int Length;
  const UInt8 *BytePtr;
  CFDataRef theData;
  int8x8_t *v6;

  theData = 0;
  v6 = 0;
  if (result)
  {
    if (result->i32[0] == 1667788900)
    {
      v1 = ChapterData_ExportFlattenedData((uint64_t)result, &theData);
      v2 = theData;
      if (!v1)
      {
        Length = CFDataGetLength(theData);
        BytePtr = CFDataGetBytePtr(v2);
        ChapterData_CreateWithFlattenedData(Length, BytePtr, &v6);
      }
      if (v2)
        CFRelease(v2);
      return v6;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t ChapterData_SetProperty(uint64_t a1, unsigned int a2, int a3, char a4, int a5, uint64_t *a6)
{
  unsigned int v7;
  unsigned int ChapterAtom;
  unsigned int v12;
  int v13;
  void *v14;
  _QWORD *v15;
  uint64_t result;
  int v17;
  unsigned int *v18;
  int v19;
  unsigned int v20;
  int v21;
  uint64_t *v22;
  int v23;
  unsigned int v24;
  unsigned int *v25;
  int v26;
  void *v27;
  char *v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  int v32;

  if (!a1)
    return 4294967246;
  if (*(_DWORD *)a1 != 1667788900)
    return 4294967246;
  v7 = a2 <= 1 ? 1 : a2;
  if (v7 == -1)
    return 4294967246;
  ChapterAtom = ChapterData_GetChapterAtom(a1, v7, a4);
  v32 = ChapterAtom;
  if (!ChapterAtom)
    return 4294967246;
  v12 = ChapterAtom;
  if (a3 > 1886154594)
  {
    if (a3 != 1886154595)
    {
      if (a3 != 1970433056 && a3 != 1970433140)
        goto LABEL_27;
      v17 = *(_DWORD *)(a1 + 12);
      if ((v17 & 4) == 0)
      {
        *(_DWORD *)(a1 + 12) = v17 | 4;
        *(_BYTE *)(a1 + 16) = 1;
      }
      v15 = (_QWORD *)(a1 + 56);
      v14 = *(void **)(a1 + 56);
      if (!v14)
        goto LABEL_26;
      goto LABEL_25;
    }
    v30 = 0;
    v31 = 0;
    v26 = *(_DWORD *)(a1 + 12);
    if ((v26 & 2) == 0)
    {
      *(_DWORD *)(a1 + 12) = v26 | 2;
      *(_BYTE *)(a1 + 16) = 1;
    }
    v27 = *(void **)(a1 + 48);
    if (v27)
      free(v27);
    *(_QWORD *)(a1 + 48) = 0;
    __memmove_chk();
    if ((_DWORD)v30 == 1953653099)
    {
      v28 = (char *)&v31 + 4;
      v29 = bswap32(HIDWORD(v31));
    }
    else
    {
      if ((_DWORD)v30 != 1768777060)
      {
LABEL_45:
        *(_BYTE *)(a1 + 78) = 0;
        v18 = *(unsigned int **)(a1 + 24);
        v22 = &v30;
        v19 = v12;
        v20 = 1886154595;
        v21 = a5;
        goto LABEL_28;
      }
      LODWORD(v30) = 1684368745;
      v28 = (char *)&v30 + 4;
      v29 = HIDWORD(v30);
    }
    *(_DWORD *)v28 = bswap32(v29);
    goto LABEL_45;
  }
  if (a3 == 1851878757)
  {
    v23 = *(_DWORD *)(a1 + 12);
    if ((v23 & 1) == 0)
    {
      *(_DWORD *)(a1 + 12) = v23 | 1;
      *(_BYTE *)(a1 + 16) = 1;
    }
    v15 = (_QWORD *)(a1 + 40);
    v14 = *(void **)(a1 + 40);
    if (!v14)
      goto LABEL_26;
    goto LABEL_25;
  }
  if (a3 != 1885561704)
  {
    if (a3 != 1885626740)
    {
LABEL_27:
      *(_BYTE *)(a1 + 78) = 0;
      v18 = *(unsigned int **)(a1 + 24);
      v19 = v12;
      v20 = a3;
      v21 = a5;
      v22 = a6;
LABEL_28:
      JRAddOrInsertAtom(v18, v19, v20, v21, v22);
      result = 0;
      *(_BYTE *)(a1 + 16) = 1;
      return result;
    }
    v13 = *(_DWORD *)(a1 + 12);
    if ((v13 & 2) == 0)
    {
      *(_DWORD *)(a1 + 12) = v13 | 2;
      *(_BYTE *)(a1 + 16) = 1;
    }
    v15 = (_QWORD *)(a1 + 48);
    v14 = *(void **)(a1 + 48);
    if (!v14)
    {
LABEL_26:
      *v15 = 0;
      goto LABEL_27;
    }
LABEL_25:
    free(v14);
    goto LABEL_26;
  }
  result = ChapterData_NewChapterInternal(a1, v7, 1, (unsigned int *)&v32);
  if (!(_DWORD)result)
  {
    v24 = JRFindChildByIndex(*(unsigned int **)(a1 + 32), v32, 1885561704, 1, 0);
    LODWORD(v30) = v24;
    v25 = *(unsigned int **)(a1 + 32);
    if (v24)
      JRSetAtomData(v25, v24, a5, a6);
    else
      JRInsertChild(v25, v32, 0x70636368u, 0, 1, a5, a6, &v30);
    return 0;
  }
  return result;
}

unsigned int *ChapterData_GetChapterAtom(uint64_t a1, unsigned int a2, char a3)
{
  int v4;
  unsigned int *v5;
  unsigned int *v6;
  int v8;
  __int16 i;
  unsigned int *v10;
  int v11;
  int v12;
  __int16 v13;

  v13 = 1;
  if (*(_DWORD *)a1 != 1667788900)
    return 0;
  v12 = 0;
  if (a2 <= 1)
    v4 = 1;
  else
    v4 = a2;
  if ((a3 & 1) == 0)
  {
    if (!*(_BYTE *)(a1 + 64) || *(_DWORD *)(a1 + 68) != v4)
    {
      v5 = JRFindChildByID(*(unsigned int **)(a1 + 24), 0, 1667785072, v4, &v13);
      v6 = v5;
      if ((_DWORD)v5)
      {
        *(_DWORD *)(a1 + 68) = v4;
        *(_DWORD *)(a1 + 72) = (_DWORD)v5;
        *(_WORD *)(a1 + 76) = v13;
        *(_BYTE *)(a1 + 64) = 1;
        *(_BYTE *)(a1 + 78) = 0;
      }
      return v6;
    }
    return (unsigned int *)*(unsigned int *)(a1 + 72);
  }
  if (*(_BYTE *)(a1 + 64) && *(_BYTE *)(a1 + 78) && v4 >= *(_DWORD *)(a1 + 68) && v4 < *(_DWORD *)(a1 + 80))
    return (unsigned int *)*(unsigned int *)(a1 + 72);
  v6 = 0;
  v8 = -1;
  for (i = 1; ; ++i)
  {
    v10 = JRFindChildByIndex(*(unsigned int **)(a1 + 24), 0, 1667785072, i, &v12);
    if (!(_DWORD)v10)
    {
      v11 = 0;
      if (!(_DWORD)v6)
        return v6;
      goto LABEL_24;
    }
    if (v12 > v4)
      break;
    v8 = v12;
    v6 = v10;
  }
  v11 = (int)v10;
  if (!(_DWORD)v6)
    return v6;
LABEL_24:
  *(_DWORD *)(a1 + 68) = v8;
  *(_DWORD *)(a1 + 72) = (_DWORD)v6;
  *(_WORD *)(a1 + 76) = i - 1;
  *(_BYTE *)(a1 + 64) = 1;
  *(_BYTE *)(a1 + 78) = 1;
  if ((_DWORD)v10)
  {
    *(_DWORD *)(a1 + 80) = v12;
    *(_DWORD *)(a1 + 84) = v11;
  }
  else
  {
    *(_QWORD *)(a1 + 80) = 0xFFFFFFFFLL;
  }
  return v6;
}

uint64_t ChapterData_CopyProperty(uint64_t a1, unsigned int a2, int a3, char a4, unsigned int a5, _WORD *a6)
{
  int ChapterAtom;
  int v12;

  if (!a1 || *(_DWORD *)a1 != 1667788900)
    return 4294967246;
  if (a2 <= 1)
    a2 = 1;
  if (a2 == -1)
    return 4294967246;
  if (a3 == 1970433140)
    return ChapterData_FindURLTitleForTime(a1, a2, a4, a5, a6);
  if (a3 == 1851878757)
    return ChapterData_FindNameForTime(a1, a2, a4, a5, a6);
  ChapterAtom = ChapterData_GetChapterAtom(a1, a2, a4);
  if (ChapterAtom
    && (v12 = JRFindChildByIndex(*(unsigned int **)(a1 + 24), ChapterAtom, a3, 1, 0)) != 0)
  {
    return JRCopyAtomDataToPtr(*(unsigned int **)(a1 + 24), v12, 1, a5, a6, 0);
  }
  else
  {
    return 4294967246;
  }
}

uint64_t ChapterData_FindNameForTime(uint64_t a1, unsigned int a2, int a3, unsigned int a4, _WORD *a5)
{
  unsigned int v9;
  uint64_t v10;
  uint64_t *v11;
  __int16 *EntryForTime;
  int v13;
  const void *AtomDataPtr;
  unsigned int v15;
  uint64_t v16;
  uint64_t result;
  size_t __n;

  if (!a1)
    return 4294967246;
  if (*(_DWORD *)a1 != 1667788900 || (*(_BYTE *)(a1 + 12) & 1) == 0)
    return 4294967246;
  if (a2 <= 1)
    v9 = 1;
  else
    v9 = a2;
  v11 = (uint64_t *)(a1 + 40);
  v10 = *(_QWORD *)(a1 + 40);
  if (!v10)
  {
    result = ChapterDataCacheTable_BuildTable(*(unsigned int **)(a1 + 24), 1851878757, (_QWORD *)(a1 + 40));
    if ((_DWORD)result)
      return result;
    v10 = *v11;
  }
  EntryForTime = (__int16 *)ChapterDataCacheTable_FindEntryForTime(v10, v9, a3, 0);
  if (!EntryForTime)
    return 4294967246;
  LODWORD(__n) = 0;
  v13 = JRFindChildByIndex(*(unsigned int **)(a1 + 24), 0, 1667785072, *EntryForTime, 0);
  if (!v13)
    return 4294967246;
  AtomDataPtr = (const void *)JRFindAndGetAtomDataPtr(*(unsigned int **)(a1 + 24), v13, 1851878757, 1, &__n);
  if (!AtomDataPtr)
    return 4294967246;
  v15 = __n;
  if (__n > a4)
  {
    LODWORD(__n) = a4;
    v15 = a4;
  }
  memcpy(a5, AtomDataPtr, v15);
  if (v15 >= 2)
  {
    v16 = v15 >> 1;
    do
    {
      *a5 = bswap32((unsigned __int16)*a5) >> 16;
      ++a5;
      --v16;
    }
    while (v16);
  }
  return 0;
}

uint64_t ChapterData_FindURLTitleForTime(uint64_t a1, unsigned int a2, int a3, unsigned int a4, _WORD *a5)
{
  unsigned int v9;
  uint64_t v10;
  uint64_t *v11;
  __int16 *EntryForTime;
  int v13;
  const void *AtomDataPtr;
  unsigned int v15;
  uint64_t v16;
  uint64_t result;
  size_t __n;

  if (!a1)
    return 4294967246;
  if (*(_DWORD *)a1 != 1667788900 || (*(_BYTE *)(a1 + 12) & 4) == 0)
    return 4294967246;
  if (a2 <= 1)
    v9 = 1;
  else
    v9 = a2;
  v11 = (uint64_t *)(a1 + 56);
  v10 = *(_QWORD *)(a1 + 56);
  if (!v10)
  {
    result = ChapterDataCacheTable_BuildTable(*(unsigned int **)(a1 + 24), 1970433140, (_QWORD *)(a1 + 56));
    if ((_DWORD)result)
      return result;
    v10 = *v11;
  }
  EntryForTime = (__int16 *)ChapterDataCacheTable_FindEntryForTime(v10, v9, a3, 0);
  if (!EntryForTime)
    return 4294967246;
  LODWORD(__n) = 0;
  v13 = JRFindChildByIndex(*(unsigned int **)(a1 + 24), 0, 1667785072, *EntryForTime, 0);
  if (!v13)
    return 4294967246;
  AtomDataPtr = (const void *)JRFindAndGetAtomDataPtr(*(unsigned int **)(a1 + 24), v13, 1970433140, 1, &__n);
  if (!AtomDataPtr)
    return 4294967246;
  v15 = __n;
  if (__n > a4)
  {
    LODWORD(__n) = a4;
    v15 = a4;
  }
  memcpy(a5, AtomDataPtr, v15);
  if (v15 >= 2)
  {
    v16 = v15 >> 1;
    do
    {
      *a5 = bswap32((unsigned __int16)*a5) >> 16;
      ++a5;
      --v16;
    }
    while (v16);
  }
  return 0;
}

uint64_t ChapterDataCacheTable_BuildTable(unsigned int *a1, int a2, _QWORD *a3)
{
  int v6;
  _DWORD *v7;
  _DWORD *v8;
  __int16 i;
  int v10;
  int v11;
  uint64_t v12;
  _DWORD *v13;
  uint64_t result;
  int v15;
  int v16;

  v6 = JRCountChildrenOfType(a1, 0, 1667785072);
  v7 = malloc_type_calloc(8 * (v6 - 1) + 16, 1uLL, 0x1745688DuLL);
  v8 = v7;
  if (v7)
  {
    v15 = 0;
    *v7 = v6;
    for (i = 1; ; ++i)
    {
      v16 = 0;
      v10 = JRFindChildByIndex(a1, 0, 1667785072, i, &v16);
      if (!v10)
        break;
      v11 = v16;
      if (JRFindAndGetAtomDataPtr(a1, v10, a2, 1, &v15))
      {
        v12 = v8[1];
        if (v12 >= *v8)
          goto LABEL_11;
        v13 = &v8[2 * v12];
        *((_WORD *)v13 + 4) = i;
        v13[3] = v11;
        v8[1] = v12 + 1;
      }
    }
    if (v8[1])
    {
      result = 0;
      goto LABEL_12;
    }
LABEL_11:
    free(v8);
    v8 = 0;
    result = 4294967246;
  }
  else
  {
    result = 4294967188;
  }
LABEL_12:
  *a3 = v8;
  return result;
}

uint64_t ChapterDataCacheTable_FindEntryForTime(uint64_t a1, unsigned int a2, int a3, _DWORD *a4)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  int *v7;
  int v8;
  uint64_t v9;
  uint64_t result;

  if (a2 <= 1)
    v4 = 1;
  else
    v4 = a2;
  if (a3 < 0)
    v4 += 150;
  v5 = *(unsigned int *)(a1 + 4);
  if ((_DWORD)v5)
  {
    v6 = 0;
    v7 = (int *)(a1 + 12);
    while (1)
    {
      v8 = *v7;
      v7 += 2;
      if (v8 > v4)
        break;
      if (v5 == ++v6)
        goto LABEL_12;
    }
    LODWORD(v5) = v6;
    if (!(_DWORD)v6)
      return 0;
  }
LABEL_12:
  v9 = (v5 - 1);
  if ((a3 & 0x40000000) != 0 && v4 != *(_DWORD *)(a1 + 8 * v9 + 12))
    return 0;
  result = a1 + 8 * v9 + 8;
  if (a4)
    *a4 = v9;
  return result;
}

_DWORD *ChapterData_GetFlags(_DWORD *result)
{
  if (result)
  {
    if (*result == 1667788900)
      return (_DWORD *)result[3];
    else
      return 0;
  }
  return result;
}

_DWORD *ChapterData_GetNumChapters(_DWORD *result)
{
  if (result)
  {
    if (*result == 1667788900)
      return (_DWORD *)result[5];
    else
      return 0;
  }
  return result;
}

uint64_t ChapterData_GetIndChapterTime(uint64_t a1, int a2)
{
  uint64_t result;
  unsigned int v4;

  if (!a2)
    __assert_rtn("ChapterData_GetIndChapterTime", "ITChapterUtilities.c", 995, "inIndex >= kChapterIndex_First");
  result = 0xFFFFFFFFLL;
  v4 = -1;
  if (a1 && *(_DWORD *)a1 == 1667788900)
  {
    JRFindChildByIndex(*(unsigned int **)(a1 + 24), 0, 1667785072, (__int16)a2, &v4);
    if (v4 == 1)
      return 0;
    else
      return v4;
  }
  return result;
}

uint64_t ChapterData_GetNameCookieForTime(uint64_t a1, unsigned int a2, _DWORD *a3)
{
  int v3;
  uint64_t result;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  int *v10;
  int v11;

  if (!a1)
    return 4294967246;
  if (*(_DWORD *)a1 != 1667788900)
    return 4294967246;
  v3 = a2 <= 1 ? 1 : a2;
  if ((*(_BYTE *)(a1 + 12) & 1) == 0)
    return 4294967246;
  v7 = (uint64_t *)(a1 + 40);
  v6 = *(_QWORD *)(a1 + 40);
  if (v6)
  {
LABEL_11:
    v8 = *(unsigned int *)(v6 + 4);
    if (!(_DWORD)v8)
      goto LABEL_19;
    v9 = 0;
    v10 = (int *)(v6 + 12);
    while (1)
    {
      v11 = *v10;
      v10 += 2;
      if (v11 > v3)
        break;
      if (v8 == ++v9)
        goto LABEL_19;
    }
    LODWORD(v8) = v9;
    if ((_DWORD)v9)
    {
LABEL_19:
      result = 0;
      *a3 = v8;
      return result;
    }
    return 4294967246;
  }
  result = ChapterDataCacheTable_BuildTable(*(unsigned int **)(a1 + 24), 1851878757, v7);
  if (!(_DWORD)result)
  {
    v6 = *v7;
    goto LABEL_11;
  }
  return result;
}

uint64_t ChapterData_GetURLCookieForTime(uint64_t a1, unsigned int a2, int a3, _DWORD *a4)
{
  unsigned int v4;
  uint64_t v7;
  uint64_t *v8;
  uint64_t result;
  int v10;

  if (!a1)
    return 4294967246;
  if (*(_DWORD *)a1 != 1667788900)
    return 4294967246;
  v4 = a2 <= 1 ? 1 : a2;
  if ((*(_BYTE *)(a1 + 12) & 4) == 0)
    return 4294967246;
  v8 = (uint64_t *)(a1 + 56);
  v7 = *(_QWORD *)(a1 + 56);
  if (v7)
  {
LABEL_8:
    v10 = 0;
    if (ChapterDataCacheTable_FindEntryForTime(v7, v4, a3, &v10))
    {
      result = 0;
      *a4 = v10 + 1;
      return result;
    }
    return 4294967246;
  }
  result = ChapterDataCacheTable_BuildTable(*(unsigned int **)(a1 + 24), 1970433056, v8);
  if (!(_DWORD)result)
  {
    v7 = *v8;
    goto LABEL_8;
  }
  return result;
}

uint64_t ChapterData_FindURLForTime(uint64_t a1, unsigned int a2, int a3, unsigned int a4, void *a5)
{
  unsigned int v9;
  uint64_t v10;
  uint64_t *v11;
  __int16 *EntryForTime;
  int v13;
  const void *AtomDataPtr;
  unsigned int v15;
  uint64_t result;
  size_t __n;

  if (!a1)
    return 4294967246;
  if (*(_DWORD *)a1 != 1667788900 || (*(_BYTE *)(a1 + 12) & 4) == 0)
    return 4294967246;
  if (a2 <= 1)
    v9 = 1;
  else
    v9 = a2;
  v11 = (uint64_t *)(a1 + 56);
  v10 = *(_QWORD *)(a1 + 56);
  if (!v10)
  {
    result = ChapterDataCacheTable_BuildTable(*(unsigned int **)(a1 + 24), 1970433056, (_QWORD *)(a1 + 56));
    if ((_DWORD)result)
      return result;
    v10 = *v11;
  }
  EntryForTime = (__int16 *)ChapterDataCacheTable_FindEntryForTime(v10, v9, a3, 0);
  if (!EntryForTime)
    return 4294967246;
  LODWORD(__n) = 0;
  v13 = JRFindChildByIndex(*(unsigned int **)(a1 + 24), 0, 1667785072, *EntryForTime, 0);
  if (!v13)
    return 4294967246;
  AtomDataPtr = (const void *)JRFindAndGetAtomDataPtr(*(unsigned int **)(a1 + 24), v13, 1970433056, 1, &__n);
  if (!AtomDataPtr)
    return 4294967246;
  v15 = __n;
  if (__n > a4)
  {
    LODWORD(__n) = a4;
    v15 = a4;
  }
  memcpy(a5, AtomDataPtr, v15);
  return 0;
}

uint64_t ChapterData_GetPictureCookieForTime(uint64_t a1, unsigned int a2, int a3, _DWORD *a4)
{
  unsigned int v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t result;
  int v10;

  if (!a1)
    return 4294967246;
  if (*(_DWORD *)a1 != 1667788900 || (*(_BYTE *)(a1 + 12) & 2) == 0)
    return 4294967246;
  if (a2 <= 1)
    v6 = 1;
  else
    v6 = a2;
  v8 = (uint64_t *)(a1 + 48);
  v7 = *(_QWORD *)(a1 + 48);
  if (v7)
  {
LABEL_8:
    v10 = 0;
    if (ChapterDataCacheTable_FindEntryForTime(v7, v6, a3, &v10))
    {
      result = 0;
      *a4 = v10 + 1;
      return result;
    }
    return 4294967246;
  }
  result = ChapterDataCacheTable_BuildTable(*(unsigned int **)(a1 + 24), 1886154595, v8);
  if (!(_DWORD)result)
  {
    v7 = *v8;
    goto LABEL_8;
  }
  return result;
}

uint64_t mediaplatform::DatabaseErrorCodeFromSQLiteErrorCode(mediaplatform *this)
{
  if (((_DWORD)this - 1) > 0x19)
    return 36;
  else
    return *(unsigned int *)&asc_20A91932C[4 * ((_DWORD)this - 1)];
}

BOOL mediaplatform::DatabaseErrorImpliesRetryableAction(uint64_t a1)
{
  return (*(_DWORD *)(a1 + 8) & 0xFFFFFFFE) == 12;
}

void mlcore::ExistsPredicate::description(mlcore::ExistsPredicate *this@<X0>, std::string *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  void *__p[2];
  char v12;
  void *v13[2];
  char v14;

  (*(void (**)(void **__return_ptr))(**(_QWORD **)(*((_QWORD *)this + 1) + 8) + 40))(v13);
  v4 = *((_QWORD *)this + 1);
  v5 = *(_QWORD *)(v4 + 16);
  v6 = *(std::__shared_weak_count **)(v4 + 24);
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  (*(void (**)(void **__return_ptr))(*(_QWORD *)v5 + 40))(__p);
  mediaplatform::FormatString<std::string,std::string>(a2, (std::string *)"exists in {0} ({1})", (uint64_t)v13, (uint64_t)__p);
  if (v12 < 0)
    operator delete(__p[0]);
  if (v6)
  {
    v9 = (unint64_t *)&v6->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  if (v14 < 0)
    operator delete(v13[0]);
}

void sub_20A820820(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a16 < 0)
    operator delete(__p);
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  if (a22 < 0)
    operator delete(a17);
  _Unwind_Resume(a1);
}

uint64_t mlcore::ExistsPredicate::matches()
{
  return 0;
}

void std::__shared_ptr_emplace<mediaplatform::SQLExistsExpression>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C33BF00;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<mediaplatform::SQLExistsExpression>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C33BF00;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x20BD27AFCLL);
}

_QWORD *mlcore::ExistsPredicate::ExistsPredicate(_QWORD *result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *a2;
  v2 = a2[1];
  *result = &off_24C337B10;
  result[1] = v3;
  result[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *a2;
  v2 = a2[1];
  *result = &off_24C337B10;
  result[1] = v3;
  result[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

uint64_t mlcore::ExistsPredicate::query@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(this + 16);
  *a2 = *(_QWORD *)(this + 8);
  a2[1] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return this;
}

uint64_t NewSearchCriteriaList(int a1, _QWORD *a2)
{
  char *v4;
  uint64_t result;

  if (!a2)
    return 4294967246;
  v4 = (char *)malloc_type_calloc(0x58uLL, 1uLL, 0x731431D2uLL);
  if (v4)
  {
    result = 0;
    *(_OWORD *)(v4 + 56) = 0u;
    *((_QWORD *)v4 + 9) = 0;
    *(_OWORD *)(v4 + 40) = 0u;
    *(_OWORD *)(v4 + 24) = 0u;
    *((_DWORD *)v4 + 17) = 512;
    *((_DWORD *)v4 + 3) = a1;
    *(_QWORD *)v4 = 0x1534C7374;
  }
  else
  {
    result = 4294967188;
  }
  *a2 = v4;
  return result;
}

uint64_t GetSearchCriteriaListOptions(_DWORD *a1, _DWORD *a2)
{
  uint64_t result;

  result = 4294967246;
  if (a1 && a2 && *a1 == 1397519220)
  {
    result = 0;
    *a2 = a1[3];
  }
  return result;
}

void DisposeSearchCriteriaList(_DWORD *a1)
{
  int v2;
  int v3;
  _QWORD *v4;
  unsigned int v5;
  unsigned int v6;
  _QWORD *v7;

  if (a1)
  {
    if (*a1 == 1397519220)
    {
      v2 = a1[1];
      if (v2)
      {
        v3 = v2 - 1;
        a1[1] = v3;
        if (!v3)
        {
          v4 = (_QWORD *)*((_QWORD *)a1 + 10);
          if (v4)
          {
            v5 = a1[4];
            if (v5)
            {
              v6 = 0;
              v7 = v4 + 2;
              do
              {
                if (*((_BYTE *)v7 - 8))
                {
                  DisposeSearchCriteriaList(*v7);
                  v5 = a1[4];
                }
                ++v6;
                v7 += 3;
              }
              while (v6 < v5);
              v4 = (_QWORD *)*((_QWORD *)a1 + 10);
            }
            free(v4);
          }
          DeleteStringCache((uint64_t)(a1 + 6));
          free(a1);
        }
      }
    }
  }
}

uint64_t AppendSearchCriterion(_DWORD *a1, unsigned int a2, int a3, void *__s1, int a5)
{
  uint64_t result;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;

  if (!a1)
    return 4294967246;
  if (*a1 != 1397519220)
    return 4294967246;
  HIDWORD(v8) = a5;
  LODWORD(v8) = a3;
  *(_QWORD *)((char *)&v8 + 4) = a2 | 0x1000000000000;
  v7 = 0;
  result = AddStringToStringCache(a1 + 6, __s1, a5, (a5 + 3) & 0xFFFFFFFC, &v7);
  v9 = v7;
  if (!(_DWORD)result)
    return InsertElement((uint64_t)a1, &v8);
  return result;
}

uint64_t InsertElement(uint64_t a1, __int128 *a2)
{
  int v4;
  char *v5;
  char *v6;
  const void *v7;
  uint64_t result;
  char *v9;
  __int128 v10;

  v4 = *(_DWORD *)(a1 + 16);
  if (v4 != *(_DWORD *)(a1 + 20))
  {
    v6 = *(char **)(a1 + 80);
LABEL_7:
    result = 0;
    v9 = &v6[24 * v4];
    v10 = *a2;
    *((_QWORD *)v9 + 2) = *((_QWORD *)a2 + 2);
    *(_OWORD *)v9 = v10;
    ++*(_DWORD *)(a1 + 16);
    return result;
  }
  v5 = (char *)malloc_type_calloc(24 * (v4 + 3), 1uLL, 0xF3EC4C50uLL);
  if (v5)
  {
    v6 = v5;
    v7 = *(const void **)(a1 + 80);
    if (v7)
    {
      memmove(v5, v7, 24 * *(unsigned int *)(a1 + 16));
      free(*(void **)(a1 + 80));
    }
    *(_QWORD *)(a1 + 80) = v6;
    v4 = *(_DWORD *)(a1 + 16);
    *(_DWORD *)(a1 + 20) += 3;
    goto LABEL_7;
  }
  return 4294967188;
}

uint64_t AppendUStringSearchCriterion(_DWORD *a1, char a2, int a3, unsigned __int16 *a4)
{
  if ((a2 & 0xF) != 0 && a4)
    return AppendSearchCriterion(a1, a2, a3, a4 + 1, 2 * *a4);
  else
    return 4294967246;
}

uint64_t AppendValueRangeSearchCriterion(_DWORD *a1, __int16 a2, int a3, void *a4)
{
  if ((a2 & 0xFF1) == 0 || a4 == 0)
    return 4294967246;
  else
    return AppendSearchCriterion(a1, a2, a3, a4, 68);
}

uint64_t AppendNumericSearchCriterion(_DWORD *a1, __int16 a2, int a3, unint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD __s1[3];
  __int128 v8;
  _QWORD v9[6];

  if ((a2 & 0xFF1) == 0)
    return 4294967246;
  v9[4] = v4;
  v9[5] = v5;
  __s1[1] = 0;
  memset(&v9[1], 0, 20);
  __s1[0] = a4;
  __s1[2] = 1;
  v8 = a4;
  v9[0] = 1;
  return AppendSearchCriterion(a1, a2, a3, __s1, 68);
}

double InitValueRangeCriteria(uint64_t a1, uint64_t a2, uint64_t a3)
{
  double result;

  if (a3)
  {
    result = 0.0;
    *(_OWORD *)(a3 + 24) = 0u;
    *(_OWORD *)(a3 + 8) = 0u;
    *(_OWORD *)(a3 + 40) = 0u;
    *(_OWORD *)(a3 + 52) = 0u;
    *(_QWORD *)a3 = a1;
    *(_QWORD *)(a3 + 16) = 1;
    *(_QWORD *)(a3 + 24) = a2;
    *(_QWORD *)(a3 + 40) = 1;
  }
  return result;
}

uint64_t AppendNestedSearchCriteriaList(_DWORD *a1, int a2, _DWORD *a3)
{
  uint64_t result;
  __int128 v6;
  _DWORD *v7;

  result = 4294967246;
  if (a1)
  {
    if ((a2 & 1) != 0)
    {
      result = 4294967246;
      if (a3)
      {
        if (*a1 == 1397519220 && *a3 == 1397519220)
        {
          LODWORD(v6) = 0;
          DWORD1(v6) = a2;
          *((_QWORD *)&v6 + 1) = 0x800000001;
          v7 = a3;
          result = InsertElement((uint64_t)a1, &v6);
          if (!(_DWORD)result)
            ++a3[1];
        }
      }
    }
  }
  return result;
}

_DWORD *CountSearchCriteria(_DWORD *result)
{
  if (result)
  {
    if (*result == 1397519220)
      return (_DWORD *)result[4];
    else
      return 0;
  }
  return result;
}

uint64_t GetSearchCriterionInfo(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;

  v3 = 4294967246;
  if (!a1 || !a3)
    return v3;
  if (*(_DWORD *)a1 != 1397519220)
    return 4294967246;
  if (*(_DWORD *)(a1 + 16) <= a2)
    return 4294967246;
  if (!*(_DWORD *)(a1 + 8))
    return 4294967246;
  v4 = *(_QWORD *)(a1 + 80);
  if (!v4)
    return 4294967246;
  v5 = v4 + 24 * a2;
  *(_OWORD *)(a3 + 16) = 0u;
  *(_OWORD *)a3 = 0u;
  v6 = *(_DWORD *)(v5 + 4);
  *(_DWORD *)(a3 + 24) = *(_DWORD *)(v5 + 12);
  *(_DWORD *)a3 = *(_DWORD *)v5;
  *(_DWORD *)(a3 + 4) = v6;
  *(_BYTE *)(a3 + 9) = *(_BYTE *)(v5 + 10);
  if (*(_BYTE *)(v5 + 8))
  {
    v3 = 0;
    *(_BYTE *)(a3 + 8) = 1;
    *(_QWORD *)(a3 + 16) = *(_QWORD *)(v4 + 24 * a2 + 16);
    return v3;
  }
  v3 = *(unsigned int *)(v5 + 12);
  if (!(_DWORD)v3)
  {
    *(_QWORD *)(a3 + 16) = v4 + 24 * a2 + 16;
    return v3;
  }
  return GetStringCachePtr(a1 + 24, *(_QWORD *)(v4 + 24 * a2 + 16), (_QWORD *)(a3 + 16), 0);
}

uint64_t GetExportedSearchCriteriaListSize(uint64_t a1)
{
  int v1;
  _QWORD *v2;
  uint64_t v3;
  int ExportedSearchCriteriaListSize;

  if (!a1 || *(_DWORD *)a1 != 1397519220)
    return 0;
  v1 = *(_DWORD *)(a1 + 16);
  if (!v1)
    return 136;
  v2 = (_QWORD *)(*(_QWORD *)(a1 + 80) + 16);
  LODWORD(v3) = 136;
  do
  {
    if (*((_BYTE *)v2 - 8))
      ExportedSearchCriteriaListSize = GetExportedSearchCriteriaListSize(*v2);
    else
      ExportedSearchCriteriaListSize = *((_DWORD *)v2 - 1);
    v3 = (_DWORD)v3 + ExportedSearchCriteriaListSize + (ExportedSearchCriteriaListSize & 1u) + 56;
    v2 += 3;
    --v1;
  }
  while (v1);
  return v3;
}

uint64_t LockSearchCriteriaList(uint64_t a1)
{
  uint64_t v2;
  unsigned int v3;
  unsigned int v4;
  _QWORD *v5;

  if (!a1)
    return 4294967246;
  if (*(_DWORD *)a1 != 1397519220)
    return 4294967246;
  ++*(_DWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 80);
  if (v2)
  {
    v3 = *(_DWORD *)(a1 + 16);
    if (v3)
    {
      v4 = 0;
      v5 = (_QWORD *)(v2 + 16);
      do
      {
        if (*((_BYTE *)v5 - 8))
        {
          LockSearchCriteriaList(*v5);
          v3 = *(_DWORD *)(a1 + 16);
        }
        ++v4;
        v5 += 3;
      }
      while (v4 < v3);
    }
  }
  return 0;
}

uint64_t UnlockSearchCriteriaList(uint64_t a1)
{
  int v2;
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  _QWORD *v6;

  if (!a1)
    return 4294967246;
  if (*(_DWORD *)a1 != 1397519220)
    return 4294967246;
  v2 = *(_DWORD *)(a1 + 8);
  if (!v2)
    return 4294967246;
  *(_DWORD *)(a1 + 8) = v2 - 1;
  v3 = *(_QWORD *)(a1 + 80);
  if (v3)
  {
    v4 = *(_DWORD *)(a1 + 16);
    if (v4)
    {
      v5 = 0;
      v6 = (_QWORD *)(v3 + 16);
      do
      {
        if (*((_BYTE *)v6 - 8))
        {
          UnlockSearchCriteriaList(*v6);
          v4 = *(_DWORD *)(a1 + 16);
        }
        ++v5;
        v6 += 3;
      }
      while (v5 < v4);
    }
  }
  return 0;
}

uint64_t GetSearchCriterionInfoNumericValue(uint64_t a1, _QWORD *a2)
{
  uint64_t result;
  _QWORD *v4;

  result = 4294967246;
  if (a1)
  {
    if (a2)
    {
      if (!*(_BYTE *)(a1 + 8))
      {
        v4 = *(_QWORD **)(a1 + 16);
        if (v4)
        {
          if (*(_DWORD *)(a1 + 24) == 68)
          {
            result = 0;
            *a2 = *v4;
          }
        }
      }
    }
  }
  return result;
}

uint64_t GetSearchCriterionInfoBooleanValue(uint64_t a1, BOOL *a2)
{
  uint64_t result;
  _QWORD *v4;

  result = 4294967246;
  if (a1)
  {
    if (a2)
    {
      if (!*(_BYTE *)(a1 + 8))
      {
        v4 = *(_QWORD **)(a1 + 16);
        if (v4)
        {
          if (*(_DWORD *)(a1 + 24) == 68)
          {
            result = 0;
            *a2 = *v4 != 0;
          }
        }
      }
    }
  }
  return result;
}

__n128 GetSearchCriterionInfoValueRange(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  __n128 result;
  __int128 v4;
  __int128 v5;

  if (a1)
  {
    if (a2)
    {
      if (!*(_BYTE *)(a1 + 8))
      {
        v2 = *(_QWORD *)(a1 + 16);
        if (v2)
        {
          if (*(_DWORD *)(a1 + 24) == 68)
          {
            *(_OWORD *)a2 = *(_OWORD *)v2;
            result = *(__n128 *)(v2 + 16);
            v4 = *(_OWORD *)(v2 + 32);
            v5 = *(_OWORD *)(v2 + 48);
            *(_DWORD *)(a2 + 64) = *(_DWORD *)(v2 + 64);
            *(_OWORD *)(a2 + 32) = v4;
            *(_OWORD *)(a2 + 48) = v5;
            *(__n128 *)(a2 + 16) = result;
          }
        }
      }
    }
  }
  return result;
}

_QWORD *ResolveValueRangeCriteriaValue(_QWORD *result)
{
  _QWORD *v1;
  uint64_t v2;

  if (result)
  {
    v1 = result;
    result = (_QWORD *)*result;
    v2 = v1[1];
    if (v2)
      return (_QWORD *)((char *)result + v1[2] * v2);
  }
  return result;
}

_QWORD *GetValueRangeCriteriaStartValue(_QWORD *result)
{
  _QWORD *v1;
  uint64_t v2;

  if (result)
  {
    v1 = result;
    result = (_QWORD *)*result;
    v2 = v1[1];
    if (v2)
      return (_QWORD *)((char *)result + v1[2] * v2);
  }
  return result;
}

uint64_t GetValueRangeCriteriaEndValue(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;

  if (result)
  {
    v1 = result;
    result = *(_QWORD *)(result + 24);
    v2 = *(_QWORD *)(v1 + 32);
    if (v2)
      result += *(_QWORD *)(v1 + 40) * v2;
  }
  return result;
}

uint64_t ImportSearchCriteriaList(const void *a1, unsigned int a2, _DWORD **a3)
{
  size_t v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t appended;
  int v13;
  int v14;
  char *v15;
  int v16;
  unint64_t v17;
  uint64_t v18;
  size_t v19;
  uint64_t v20;
  int8x8_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _DWORD *v25;

  if (!a3)
    return 4294967246;
  *a3 = 0;
  if (!a1 || a2 < 0x88)
    return 4294967246;
  v5 = a2;
  v6 = (unsigned int *)malloc_type_malloc(a2, 0x4186F335uLL);
  if (v6)
  {
    v7 = v6;
    memmove(v6, a1, v5);
    v8 = *v7;
    *v7 = bswap32(*v7);
    v9 = bswap32(*((unsigned __int16 *)v7 + 2)) >> 16;
    *((_WORD *)v7 + 2) = v9;
    *((_WORD *)v7 + 3) = bswap32(*((unsigned __int16 *)v7 + 3)) >> 16;
    v7[2] = bswap32(v7[2]);
    if (v8 != 1953713235 || v9 > 1)
    {
      appended = 4294967246;
    }
    else
    {
      v13 = *((unsigned __int8 *)v7 + 15);
      v14 = *((unsigned __int8 *)v7 + 14);
      v15 = (char *)malloc_type_calloc(0x58uLL, 1uLL, 0x731431D2uLL);
      if (!v15)
      {
        appended = 4294967188;
LABEL_38:
        *a3 = 0;
        goto LABEL_39;
      }
      v16 = v13 != 0;
      if (v14)
        v16 |= 2u;
      *(_OWORD *)(v15 + 56) = 0u;
      *((_QWORD *)v15 + 9) = 0;
      *(_OWORD *)(v15 + 40) = 0u;
      *(_OWORD *)(v15 + 24) = 0u;
      *((_DWORD *)v15 + 17) = 512;
      *((_DWORD *)v15 + 3) = v16;
      *(_QWORD *)v15 = 0x1534C7374;
      *a3 = v15;
      if (v7[2])
      {
        v17 = 0;
        v18 = (uint64_t)(v7 + 34);
        v19 = (size_t)v7 + v5;
        v20 = 10;
        while (1)
        {
          v21 = vrev32_s8(*(int8x8_t *)v18);
          *(int8x8_t *)v18 = v21;
          v22 = bswap32(*(_DWORD *)(v18 + 52));
          *(_DWORD *)(v18 + 52) = v22;
          if (*(_BYTE *)(v18 + 8))
          {
            v25 = 0;
            appended = ImportSearchCriteriaList(v18 + 56, v22, &v25);
            if (!(_DWORD)appended)
            {
              appended = AppendNestedSearchCriteriaList(*a3, *(_DWORD *)(v18 + 4), v25);
              DisposeSearchCriteriaList(v25);
            }
          }
          else
          {
            appended = ITSearchCriteriaEndianSwapProc(v21.i32[0], (int8x16_t *)(v18 + 56), v22);
            v23 = (uint64_t)*a3;
            if ((_DWORD)appended)
              goto LABEL_37;
            appended = AppendSearchCriterion((_DWORD *)v23, *(_DWORD *)(v18 + 4), *(_DWORD *)v18, (void *)(v18 + 56), *(_DWORD *)(v18 + 52));
          }
          if ((_DWORD)appended)
            break;
          if (*(_BYTE *)(v18 + 9))
          {
            v23 = (uint64_t)*a3;
            if (!*a3 || *(_DWORD *)v23 != 1397519220 || v17 >= *(unsigned int *)(v23 + 16))
            {
              appended = 4294967246;
              goto LABEL_37;
            }
            *(_BYTE *)(*(_QWORD *)(v23 + 80) + v20) = 0;
          }
          v24 = *(unsigned int *)(v18 + 52) + v18 + (*(_DWORD *)(v18 + 52) & 1);
          v18 = v24 + 56;
          if ((((_DWORD)v24 + 56) & 2) != 0)
          {
            memmove((void *)(v24 + 54), (const void *)(v24 + 56), v19 - v18);
            v18 -= 2;
          }
          ++v17;
          v20 += 24;
          if (v17 >= v7[2])
            goto LABEL_33;
        }
        v23 = (uint64_t)*a3;
LABEL_37:
        DisposeSearchCriteriaList((_DWORD *)v23);
        goto LABEL_38;
      }
LABEL_33:
      appended = 0;
    }
LABEL_39:
    free(v7);
    return appended;
  }
  return 4294967188;
}

uint64_t ITSearchCriteriaEndianSwapProc(int a1, int8x16_t *a2, unsigned int a3)
{
  int8x16_t *v4;
  uint64_t result;
  int8x16_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = a2;
  switch(a1)
  {
    case 2:
    case 3:
    case 4:
    case 8:
    case 9:
    case 14:
    case 17:
    case 18:
    case 39:
    case 54:
    case 55:
    case 56:
    case 62:
    case 71:
    case 78:
    case 79:
    case 80:
    case 81:
    case 82:
    case 83:
    case 89:
    case 104:
    case 144:
    case 145:
    case 148:
    case 149:
      if (!a2)
        return 4294967246;
      if (a3 >= 2)
      {
        v7 = a3 >> 1;
        do
        {
          v4->i16[0] = bswap32(v4->u16[0]) >> 16;
          v4 = (int8x16_t *)((char *)v4 + 2);
          --v7;
        }
        while (v7);
      }
      return 0;
    case 5:
    case 6:
    case 7:
    case 10:
    case 11:
    case 12:
    case 13:
    case 16:
    case 20:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
    case 46:
    case 47:
    case 48:
    case 53:
    case 57:
    case 58:
    case 59:
    case 60:
    case 63:
    case 67:
    case 68:
    case 69:
    case 73:
    case 77:
    case 90:
    case 91:
    case 96:
    case 97:
    case 98:
    case 99:
    case 100:
    case 101:
    case 102:
    case 103:
    case 117:
    case 118:
    case 125:
    case 133:
    case 134:
    case 136:
    case 140:
    case 141:
    case 142:
    case 154:
    case 156:
    case 183:
      goto LABEL_2;
    default:
      fwrite("ITSearchCriteriaEndianSwapProc(): Unknown match field\n", 0x36uLL, 1uLL, (FILE *)*MEMORY[0x24BDAC8D8]);
      if (a3 == 68)
      {
LABEL_2:
        result = 4294967246;
        if (v4 && a3 == 68)
        {
          result = 0;
          v6 = vrev64q_s8(v4[1]);
          *v4 = vrev64q_s8(*v4);
          v4[1] = v6;
          v4[2] = vrev64q_s8(v4[2]);
        }
      }
      else if (v4)
      {
        if (a3 < 2)
        {
          return 0;
        }
        else
        {
          v8 = a3 >> 1;
          result = 0;
          do
          {
            v4->i16[0] = bswap32(v4->u16[0]) >> 16;
            v4 = (int8x16_t *)((char *)v4 + 2);
            --v8;
          }
          while (v8);
        }
      }
      else
      {
        return 4294967246;
      }
      return result;
  }
}

uint64_t ExportSearchCriteriaList(uint64_t a1, uint64_t a2, unsigned int a3, unsigned int *a4)
{
  unsigned int ExportedSearchCriteriaListSize;
  uint64_t result;
  unsigned int v10;
  int v11;
  unsigned int v12;
  _BYTE *v13;
  uint64_t *v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  _BYTE *v19;
  unsigned int v20;

  if (!a1)
    return 4294967246;
  if (*(_DWORD *)a1 != 1397519220)
    return 4294967246;
  ExportedSearchCriteriaListSize = GetExportedSearchCriteriaListSize(a1);
  if (a4)
    *a4 = ExportedSearchCriteriaListSize;
  if (!a2)
    return 0;
  if (ExportedSearchCriteriaListSize > a3)
    return 4294967246;
  *(_QWORD *)(a2 + 128) = 0;
  *(_OWORD *)(a2 + 96) = 0u;
  *(_OWORD *)(a2 + 112) = 0u;
  *(_OWORD *)(a2 + 64) = 0u;
  *(_OWORD *)(a2 + 80) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  v11 = *(_DWORD *)(a1 + 12);
  v10 = *(_DWORD *)(a1 + 16);
  if ((v11 & 1) != 0)
    *(_BYTE *)(a2 + 15) = 1;
  if ((v11 & 2) != 0)
    *(_BYTE *)(a2 + 14) = 1;
  *(_QWORD *)a2 = 0x100010074734C53;
  *(_DWORD *)(a2 + 8) = bswap32(v10);
  if (!v10)
    return 0;
  v12 = 0;
  v13 = (_BYTE *)(a2 + 136);
  v14 = (uint64_t *)(*(_QWORD *)(a1 + 80) + 16);
  do
  {
    v20 = 0;
    *(_OWORD *)v13 = 0u;
    *((_OWORD *)v13 + 1) = 0u;
    *((_OWORD *)v13 + 2) = 0u;
    *((_QWORD *)v13 + 6) = 0;
    *(_QWORD *)v13 = *(v14 - 2);
    v15 = *((unsigned __int8 *)v14 - 8);
    v13[8] = v15;
    v13[9] = *((_BYTE *)v14 - 6) == 0;
    if (v15)
    {
      v16 = *v14;
      v17 = GetExportedSearchCriteriaListSize(*v14);
      v20 = v17;
      result = ExportSearchCriteriaList(v16, v13 + 56, v17, &v20);
      if ((_DWORD)result)
        return result;
    }
    else
    {
      v20 = *((_DWORD *)v14 - 1);
      result = GetStringCacheString(a1 + 24, *v14, v13 + 56, 0, v20);
      if ((_DWORD)result)
        return result;
      result = ITSearchCriteriaEndianSwapProc(*(_DWORD *)v13, (int8x16_t *)(v13 + 56), v20);
      if ((_DWORD)result)
        return result;
    }
    v18 = v20;
    v19 = &v13[v20 + 56];
    if ((v20 & 1) != 0)
      *v19++ = 0;
    result = 0;
    *(int8x8_t *)v13 = vrev32_s8(*(int8x8_t *)v13);
    *((_DWORD *)v13 + 13) = bswap32(v18);
    ++v12;
    v14 += 3;
    v13 = v19;
  }
  while (v12 < *(_DWORD *)(a1 + 16));
  return result;
}

mlcore::GeniusSimilaritiesTable *mlcore::GeniusSimilaritiesTable::GeniusSimilaritiesTable(mlcore::GeniusSimilaritiesTable *this)
{
  void *__p[2];
  char v4;
  _BYTE v5[80];
  void *v6[2];
  char v7;
  _QWORD v8[3];
  char v9;
  void *v10[2];
  char v11;

  std::string::basic_string[abi:ne180100]<0>(v10, "genius_similarities");
  std::string::basic_string[abi:ne180100]<0>(v6, "genius_id");
  mlcore::MediaColumn<long long>::MediaColumn((uint64_t)v8, (uint64_t)v6, 1);
  std::string::basic_string[abi:ne180100]<0>(__p, "data");
  mlcore::MediaColumn<mediaplatform::Data>::MediaColumn((uint64_t)v5, (uint64_t)__p);
  mlcore::MediaTable<long long,mediaplatform::Data>::MediaTable((uint64_t)this, (uint64_t)v10, (uint64_t)v8, (uint64_t)v5);
  mediaplatform::DatabaseColumn<mediaplatform::Data>::~DatabaseColumn((uint64_t)v5);
  if (v4 < 0)
    operator delete(__p[0]);
  v8[0] = off_24C335D90;
  if (v9 < 0)
    operator delete((void *)v8[1]);
  if (v7 < 0)
    operator delete(v6[0]);
  if (v11 < 0)
    operator delete(v10[0]);
  *(_QWORD *)this = off_24C33A3D8;
  return this;
}

void sub_20A8217D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  uint64_t v31;

  mediaplatform::DatabaseColumn<mediaplatform::Data>::~DatabaseColumn((uint64_t)&a16);
  if (a15 < 0)
    operator delete(__p);
  *(_QWORD *)(v31 - 88) = off_24C335D90;
  if (*(char *)(v31 - 57) < 0)
    operator delete(*(void **)(v31 - 80));
  if (a31 < 0)
    operator delete(a26);
  if (*(char *)(v31 - 17) < 0)
    operator delete(*(void **)(v31 - 40));
  _Unwind_Resume(a1);
}

void mlcore::GeniusSimilaritiesTable::~GeniusSimilaritiesTable(mlcore::GeniusSimilaritiesTable *this)
{
  *(_QWORD *)this = off_24C336018;
  mediaplatform::DatabaseColumn<mediaplatform::Data>::~DatabaseColumn((uint64_t)this + 256);
  *((_QWORD *)this + 26) = off_24C335D90;
  if (*((char *)this + 239) < 0)
    operator delete(*((void **)this + 27));
  *(_QWORD *)this = off_24C3354B0;
  *((_QWORD *)this + 20) = off_24C335D90;
  if (*((char *)this + 191) < 0)
    operator delete(*((void **)this + 21));
  mediaplatform::DatabaseColumn<mediaplatform::Data>::~DatabaseColumn((uint64_t)this + 80);
  if (*((char *)this + 79) < 0)
    operator delete(*((void **)this + 7));
  mediaplatform::DatabaseTableBase::~DatabaseTableBase((void **)this);
}

{
  *(_QWORD *)this = off_24C336018;
  mediaplatform::DatabaseColumn<mediaplatform::Data>::~DatabaseColumn((uint64_t)this + 256);
  *((_QWORD *)this + 26) = off_24C335D90;
  if (*((char *)this + 239) < 0)
    operator delete(*((void **)this + 27));
  *(_QWORD *)this = off_24C3354B0;
  *((_QWORD *)this + 20) = off_24C335D90;
  if (*((char *)this + 191) < 0)
    operator delete(*((void **)this + 21));
  mediaplatform::DatabaseColumn<mediaplatform::Data>::~DatabaseColumn((uint64_t)this + 80);
  if (*((char *)this + 79) < 0)
    operator delete(*((void **)this + 7));
  mediaplatform::DatabaseTableBase::~DatabaseTableBase((void **)this);
  JUMPOUT(0x20BD27AFCLL);
}

void mlcore::GeniusSimilaritiesTable::persistentIDColumn(mlcore::GeniusSimilaritiesTable *this@<X0>, uint64_t a2@<X8>)
{
  mlcore::MediaTable<long long,mediaplatform::Data>::mediaColumnAtIndex<0ul>(a2, (uint64_t)this);
}

mediaplatform::Data *mlcore::GeniusSimilaritiesTable::dataColumn@<X0>(mlcore::GeniusSimilaritiesTable *this@<X0>, uint64_t a2@<X8>)
{
  return mlcore::MediaTable<long long,mediaplatform::Data>::mediaColumnAtIndex<1ul>(a2, (uint64_t)this);
}

void mlcore::ItemVideoTable::~ItemVideoTable(mlcore::ItemVideoTable *this)
{
  *(_QWORD *)this = &off_24C336398;
  std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul,3ul,4ul,5ul,6ul,7ul,8ul,9ul,10ul,11ul,12ul,13ul,14ul,15ul,16ul,17ul,18ul,19ul,20ul,21ul,22ul,23ul,24ul,25ul,26ul,27ul,28ul,29ul,30ul,31ul,32ul,33ul,34ul,35ul,36ul,37ul,38ul>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<mediaplatform::Data>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<int>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<std::string>>::~__tuple_impl((uint64_t)this + 2144);
  mediaplatform::DatabaseTable<long long,int,int,int,int,std::string,std::string,std::string,std::string,int,int,int,int,long long,int,int,int,int,int,int,int,int,std::string,long long,long long,std::string,long long,mediaplatform::Data,int,int,int,int,std::string,int,long long,long long,std::string,std::string,std::string>::~DatabaseTable((uint64_t)this);
}

{
  *(_QWORD *)this = &off_24C336398;
  std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul,3ul,4ul,5ul,6ul,7ul,8ul,9ul,10ul,11ul,12ul,13ul,14ul,15ul,16ul,17ul,18ul,19ul,20ul,21ul,22ul,23ul,24ul,25ul,26ul,27ul,28ul,29ul,30ul,31ul,32ul,33ul,34ul,35ul,36ul,37ul,38ul>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<mediaplatform::Data>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<int>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<std::string>>::~__tuple_impl((uint64_t)this + 2144);
  mediaplatform::DatabaseTable<long long,int,int,int,int,std::string,std::string,std::string,std::string,int,int,int,int,long long,int,int,int,int,int,int,int,int,std::string,long long,long long,std::string,long long,mediaplatform::Data,int,int,int,int,std::string,int,long long,long long,std::string,std::string,std::string>::~DatabaseTable((uint64_t)this);
  JUMPOUT(0x20BD27AFCLL);
}

uint64_t mediaplatform::DatabaseTable<long long,int,int,int,int,std::string,std::string,std::string,std::string,int,int,int,int,long long,int,int,int,int,int,int,int,int,std::string,long long,long long,std::string,long long,mediaplatform::Data,int,int,int,int,std::string,int,long long,long long,std::string,std::string,std::string>::columnCount()
{
  return 39;
}

uint64_t std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul,3ul,4ul,5ul,6ul,7ul,8ul,9ul,10ul,11ul,12ul,13ul,14ul,15ul,16ul,17ul,18ul,19ul,20ul,21ul,22ul,23ul,24ul,25ul,26ul,27ul,28ul,29ul,30ul,31ul,32ul,33ul,34ul,35ul,36ul,37ul,38ul>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<mediaplatform::Data>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<int>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<std::string>>::~__tuple_impl(uint64_t a1)
{
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 2000);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 1936);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 1872);
  *(_QWORD *)(a1 + 1824) = off_24C335D90;
  if (*(char *)(a1 + 1855) < 0)
    operator delete(*(void **)(a1 + 1832));
  *(_QWORD *)(a1 + 1776) = off_24C335D90;
  if (*(char *)(a1 + 1807) < 0)
    operator delete(*(void **)(a1 + 1784));
  *(_QWORD *)(a1 + 1728) = off_24C335D90;
  if (*(char *)(a1 + 1759) < 0)
    operator delete(*(void **)(a1 + 1736));
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 1664);
  *(_QWORD *)(a1 + 1616) = off_24C335D90;
  if (*(char *)(a1 + 1647) < 0)
    operator delete(*(void **)(a1 + 1624));
  *(_QWORD *)(a1 + 1568) = off_24C335D90;
  if (*(char *)(a1 + 1599) < 0)
    operator delete(*(void **)(a1 + 1576));
  *(_QWORD *)(a1 + 1520) = off_24C335D90;
  if (*(char *)(a1 + 1551) < 0)
    operator delete(*(void **)(a1 + 1528));
  *(_QWORD *)(a1 + 1472) = off_24C335D90;
  if (*(char *)(a1 + 1503) < 0)
    operator delete(*(void **)(a1 + 1480));
  mediaplatform::DatabaseColumn<mediaplatform::Data>::~DatabaseColumn(a1 + 1392);
  *(_QWORD *)(a1 + 1344) = off_24C335D90;
  if (*(char *)(a1 + 1375) < 0)
    operator delete(*(void **)(a1 + 1352));
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 1280);
  *(_QWORD *)(a1 + 1232) = off_24C335D90;
  if (*(char *)(a1 + 1263) < 0)
    operator delete(*(void **)(a1 + 1240));
  *(_QWORD *)(a1 + 1184) = off_24C335D90;
  if (*(char *)(a1 + 1215) < 0)
    operator delete(*(void **)(a1 + 1192));
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 1120);
  *(_QWORD *)(a1 + 1072) = off_24C335D90;
  if (*(char *)(a1 + 1103) < 0)
    operator delete(*(void **)(a1 + 1080));
  *(_QWORD *)(a1 + 1024) = off_24C335D90;
  if (*(char *)(a1 + 1055) < 0)
    operator delete(*(void **)(a1 + 1032));
  *(_QWORD *)(a1 + 976) = off_24C335D90;
  if (*(char *)(a1 + 1007) < 0)
    operator delete(*(void **)(a1 + 984));
  *(_QWORD *)(a1 + 928) = off_24C335D90;
  if (*(char *)(a1 + 959) < 0)
    operator delete(*(void **)(a1 + 936));
  *(_QWORD *)(a1 + 880) = off_24C335D90;
  if (*(char *)(a1 + 911) < 0)
    operator delete(*(void **)(a1 + 888));
  *(_QWORD *)(a1 + 832) = off_24C335D90;
  if (*(char *)(a1 + 863) < 0)
    operator delete(*(void **)(a1 + 840));
  *(_QWORD *)(a1 + 784) = off_24C335D90;
  if (*(char *)(a1 + 815) < 0)
    operator delete(*(void **)(a1 + 792));
  *(_QWORD *)(a1 + 736) = off_24C335D90;
  if (*(char *)(a1 + 767) < 0)
    operator delete(*(void **)(a1 + 744));
  *(_QWORD *)(a1 + 688) = off_24C335D90;
  if (*(char *)(a1 + 719) < 0)
    operator delete(*(void **)(a1 + 696));
  *(_QWORD *)(a1 + 640) = off_24C335D90;
  if (*(char *)(a1 + 671) < 0)
    operator delete(*(void **)(a1 + 648));
  *(_QWORD *)(a1 + 592) = off_24C335D90;
  if (*(char *)(a1 + 623) < 0)
    operator delete(*(void **)(a1 + 600));
  *(_QWORD *)(a1 + 544) = off_24C335D90;
  if (*(char *)(a1 + 575) < 0)
    operator delete(*(void **)(a1 + 552));
  *(_QWORD *)(a1 + 496) = off_24C335D90;
  if (*(char *)(a1 + 527) < 0)
    operator delete(*(void **)(a1 + 504));
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 432);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 368);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 304);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 240);
  *(_QWORD *)(a1 + 192) = off_24C335D90;
  if (*(char *)(a1 + 223) < 0)
    operator delete(*(void **)(a1 + 200));
  *(_QWORD *)(a1 + 144) = off_24C335D90;
  if (*(char *)(a1 + 175) < 0)
    operator delete(*(void **)(a1 + 152));
  *(_QWORD *)(a1 + 96) = off_24C335D90;
  if (*(char *)(a1 + 127) < 0)
    operator delete(*(void **)(a1 + 104));
  *(_QWORD *)(a1 + 48) = off_24C335D90;
  if (*(char *)(a1 + 79) < 0)
    operator delete(*(void **)(a1 + 56));
  *(_QWORD *)a1 = off_24C335D90;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void mediaplatform::DatabaseTable<long long,int,int,int,int,std::string,std::string,std::string,std::string,int,int,int,int,long long,int,int,int,int,int,int,int,int,std::string,long long,long long,std::string,long long,mediaplatform::Data,int,int,int,int,std::string,int,long long,long long,std::string,std::string,std::string>::~DatabaseTable(uint64_t a1)
{
  *(_QWORD *)a1 = &off_24C335830;
  *(_QWORD *)(a1 + 2096) = off_24C335D90;
  if (*(char *)(a1 + 2127) < 0)
    operator delete(*(void **)(a1 + 2104));
  *(_QWORD *)(a1 + 2048) = off_24C335D90;
  if (*(char *)(a1 + 2079) < 0)
    operator delete(*(void **)(a1 + 2056));
  *(_QWORD *)(a1 + 2000) = off_24C335D90;
  if (*(char *)(a1 + 2031) < 0)
    operator delete(*(void **)(a1 + 2008));
  *(_QWORD *)(a1 + 1952) = off_24C335D90;
  if (*(char *)(a1 + 1983) < 0)
    operator delete(*(void **)(a1 + 1960));
  mediaplatform::DatabaseColumnTuple<4ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>>::~DatabaseColumnTuple(a1 + 80);
  if (*(char *)(a1 + 79) < 0)
    operator delete(*(void **)(a1 + 56));
  mediaplatform::DatabaseTableBase::~DatabaseTableBase((void **)a1);
}

{
  mediaplatform::DatabaseTable<long long,int,int,int,int,std::string,std::string,std::string,std::string,int,int,int,int,long long,int,int,int,int,int,int,int,int,std::string,long long,long long,std::string,long long,mediaplatform::Data,int,int,int,int,std::string,int,long long,long long,std::string,std::string,std::string>::~DatabaseTable(a1);
  JUMPOUT(0x20BD27AFCLL);
}

uint64_t mediaplatform::DatabaseColumnTuple<4ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>>::~DatabaseColumnTuple(uint64_t a1)
{
  *(_QWORD *)(a1 + 1824) = off_24C335D90;
  if (*(char *)(a1 + 1855) < 0)
    operator delete(*(void **)(a1 + 1832));
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 1760);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 1696);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 1632);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 1568);
  *(_QWORD *)(a1 + 1520) = off_24C335D90;
  if (*(char *)(a1 + 1551) < 0)
    operator delete(*(void **)(a1 + 1528));
  *(_QWORD *)(a1 + 1472) = off_24C335D90;
  if (*(char *)(a1 + 1503) < 0)
    operator delete(*(void **)(a1 + 1480));
  *(_QWORD *)(a1 + 1424) = off_24C335D90;
  if (*(char *)(a1 + 1455) < 0)
    operator delete(*(void **)(a1 + 1432));
  return mediaplatform::DatabaseColumnTuple<12ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>>::~DatabaseColumnTuple(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<12ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>>::~DatabaseColumnTuple(uint64_t a1)
{
  *(_QWORD *)(a1 + 1376) = off_24C335D90;
  if (*(char *)(a1 + 1407) < 0)
    operator delete(*(void **)(a1 + 1384));
  *(_QWORD *)(a1 + 1328) = off_24C335D90;
  if (*(char *)(a1 + 1359) < 0)
    operator delete(*(void **)(a1 + 1336));
  *(_QWORD *)(a1 + 1280) = off_24C335D90;
  if (*(char *)(a1 + 1311) < 0)
    operator delete(*(void **)(a1 + 1288));
  *(_QWORD *)(a1 + 1232) = off_24C335D90;
  if (*(char *)(a1 + 1263) < 0)
    operator delete(*(void **)(a1 + 1240));
  *(_QWORD *)(a1 + 1184) = off_24C335D90;
  if (*(char *)(a1 + 1215) < 0)
    operator delete(*(void **)(a1 + 1192));
  *(_QWORD *)(a1 + 1136) = off_24C335D90;
  if (*(char *)(a1 + 1167) < 0)
    operator delete(*(void **)(a1 + 1144));
  return mediaplatform::DatabaseColumnTuple<18ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>>::~DatabaseColumnTuple(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<18ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>>::~DatabaseColumnTuple(uint64_t a1)
{
  *(_QWORD *)(a1 + 1088) = off_24C335D90;
  if (*(char *)(a1 + 1119) < 0)
    operator delete(*(void **)(a1 + 1096));
  *(_QWORD *)(a1 + 1040) = off_24C335D90;
  if (*(char *)(a1 + 1071) < 0)
    operator delete(*(void **)(a1 + 1048));
  *(_QWORD *)(a1 + 992) = off_24C335D90;
  if (*(char *)(a1 + 1023) < 0)
    operator delete(*(void **)(a1 + 1000));
  *(_QWORD *)(a1 + 944) = off_24C335D90;
  if (*(char *)(a1 + 975) < 0)
    operator delete(*(void **)(a1 + 952));
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 880);
  *(_QWORD *)(a1 + 832) = off_24C335D90;
  if (*(char *)(a1 + 863) < 0)
    operator delete(*(void **)(a1 + 840));
  return mediaplatform::DatabaseColumnTuple<24ul,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>>::~DatabaseColumnTuple(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<24ul,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>>::~DatabaseColumnTuple(uint64_t a1)
{
  *(_QWORD *)(a1 + 784) = off_24C335D90;
  if (*(char *)(a1 + 815) < 0)
    operator delete(*(void **)(a1 + 792));
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 720);
  *(_QWORD *)(a1 + 672) = off_24C335D90;
  if (*(char *)(a1 + 703) < 0)
    operator delete(*(void **)(a1 + 680));
  mediaplatform::DatabaseColumn<mediaplatform::Data>::~DatabaseColumn(a1 + 592);
  *(_QWORD *)(a1 + 544) = off_24C335D90;
  if (*(char *)(a1 + 575) < 0)
    operator delete(*(void **)(a1 + 552));
  *(_QWORD *)(a1 + 496) = off_24C335D90;
  if (*(char *)(a1 + 527) < 0)
    operator delete(*(void **)(a1 + 504));
  *(_QWORD *)(a1 + 448) = off_24C335D90;
  if (*(char *)(a1 + 479) < 0)
    operator delete(*(void **)(a1 + 456));
  return mediaplatform::DatabaseColumnTuple<31ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>>::~DatabaseColumnTuple(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<31ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>>::~DatabaseColumnTuple(uint64_t a1)
{
  *(_QWORD *)(a1 + 400) = off_24C335D90;
  if (*(char *)(a1 + 431) < 0)
    operator delete(*(void **)(a1 + 408));
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 336);
  *(_QWORD *)(a1 + 288) = off_24C335D90;
  if (*(char *)(a1 + 319) < 0)
    operator delete(*(void **)(a1 + 296));
  *(_QWORD *)(a1 + 240) = off_24C335D90;
  if (*(char *)(a1 + 271) < 0)
    operator delete(*(void **)(a1 + 248));
  *(_QWORD *)(a1 + 192) = off_24C335D90;
  if (*(char *)(a1 + 223) < 0)
    operator delete(*(void **)(a1 + 200));
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 128);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 64);
  return mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1);
}

void mlcore::MediaTable<long long,int,int,int,int,std::string,std::string,std::string,std::string,int,int,int,int,long long,int,int,int,int,int,int,int,int,std::string,long long,long long,std::string,long long,mediaplatform::Data,int,int,int,int,std::string,int,long long,long long,std::string,std::string,std::string>::~MediaTable(_QWORD *a1)
{
  *a1 = &off_24C336398;
  std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul,3ul,4ul,5ul,6ul,7ul,8ul,9ul,10ul,11ul,12ul,13ul,14ul,15ul,16ul,17ul,18ul,19ul,20ul,21ul,22ul,23ul,24ul,25ul,26ul,27ul,28ul,29ul,30ul,31ul,32ul,33ul,34ul,35ul,36ul,37ul,38ul>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<mediaplatform::Data>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<int>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<std::string>>::~__tuple_impl((uint64_t)(a1 + 268));
  mediaplatform::DatabaseTable<long long,int,int,int,int,std::string,std::string,std::string,std::string,int,int,int,int,long long,int,int,int,int,int,int,int,int,std::string,long long,long long,std::string,long long,mediaplatform::Data,int,int,int,int,std::string,int,long long,long long,std::string,std::string,std::string>::~DatabaseTable((uint64_t)a1);
}

{
  *a1 = &off_24C336398;
  std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul,3ul,4ul,5ul,6ul,7ul,8ul,9ul,10ul,11ul,12ul,13ul,14ul,15ul,16ul,17ul,18ul,19ul,20ul,21ul,22ul,23ul,24ul,25ul,26ul,27ul,28ul,29ul,30ul,31ul,32ul,33ul,34ul,35ul,36ul,37ul,38ul>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<mediaplatform::Data>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<int>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<std::string>>::~__tuple_impl((uint64_t)(a1 + 268));
  mediaplatform::DatabaseTable<long long,int,int,int,int,std::string,std::string,std::string,std::string,int,int,int,int,long long,int,int,int,int,int,int,int,int,std::string,long long,long long,std::string,long long,mediaplatform::Data,int,int,int,int,std::string,int,long long,long long,std::string,std::string,std::string>::~DatabaseTable((uint64_t)a1);
  JUMPOUT(0x20BD27AFCLL);
}

uint64_t std::__tuple_leaf<7ul,mlcore::MediaColumn<std::string>,false>::__tuple_leaf[abi:ne180100]<mlcore::MediaColumn<std::string>&,void>(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  std::string *v5;
  __int128 v6;

  *(_QWORD *)a1 = off_24C335D90;
  if (*(char *)(a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 8), *(const std::string::value_type **)(a2 + 8), *(_QWORD *)(a2 + 16));
  }
  else
  {
    v4 = *(_OWORD *)(a2 + 8);
    *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 8) = v4;
  }
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_QWORD *)a1 = &off_24C335AB8;
  *(_BYTE *)(a1 + 36) = *(_BYTE *)(a2 + 36);
  v5 = (std::string *)(a1 + 40);
  if (*(char *)(a2 + 63) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *(const std::string::value_type **)(a2 + 40), *(_QWORD *)(a2 + 48));
  }
  else
  {
    v6 = *(_OWORD *)(a2 + 40);
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
  *(_QWORD *)a1 = &off_24C336A60;
  return a1;
}

void sub_20A8221DC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  uint64_t v3;

  *(_QWORD *)v1 = v3;
  if (*(char *)(v1 + 31) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

uint64_t std::__tuple_leaf<22ul,mlcore::MediaColumn<std::string>,false>::__tuple_leaf[abi:ne180100]<mlcore::MediaColumn<std::string>&,void>(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  std::string *v5;
  __int128 v6;

  *(_QWORD *)a1 = off_24C335D90;
  if (*(char *)(a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 8), *(const std::string::value_type **)(a2 + 8), *(_QWORD *)(a2 + 16));
  }
  else
  {
    v4 = *(_OWORD *)(a2 + 8);
    *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 8) = v4;
  }
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_QWORD *)a1 = &off_24C335AB8;
  *(_BYTE *)(a1 + 36) = *(_BYTE *)(a2 + 36);
  v5 = (std::string *)(a1 + 40);
  if (*(char *)(a2 + 63) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *(const std::string::value_type **)(a2 + 40), *(_QWORD *)(a2 + 48));
  }
  else
  {
    v6 = *(_OWORD *)(a2 + 40);
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
  *(_QWORD *)a1 = &off_24C336A60;
  return a1;
}

void sub_20A8222B8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  uint64_t v3;

  *(_QWORD *)v1 = v3;
  if (*(char *)(v1 + 31) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

uint64_t std::__tuple_leaf<37ul,mlcore::MediaColumn<std::string>,false>::__tuple_leaf[abi:ne180100]<mlcore::MediaColumn<std::string>&,void>(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  std::string *v5;
  __int128 v6;

  *(_QWORD *)a1 = off_24C335D90;
  if (*(char *)(a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 8), *(const std::string::value_type **)(a2 + 8), *(_QWORD *)(a2 + 16));
  }
  else
  {
    v4 = *(_OWORD *)(a2 + 8);
    *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 8) = v4;
  }
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_QWORD *)a1 = &off_24C335AB8;
  *(_BYTE *)(a1 + 36) = *(_BYTE *)(a2 + 36);
  v5 = (std::string *)(a1 + 40);
  if (*(char *)(a2 + 63) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *(const std::string::value_type **)(a2 + 40), *(_QWORD *)(a2 + 48));
  }
  else
  {
    v6 = *(_OWORD *)(a2 + 40);
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
  *(_QWORD *)a1 = &off_24C336A60;
  return a1;
}

void sub_20A822394(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  uint64_t v3;

  *(_QWORD *)v1 = v3;
  if (*(char *)(v1 + 31) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

uint64_t mediaplatform::DatabaseColumnTuple<1ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>>::DatabaseColumnTuple(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39)
{
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  int v56;
  int v57;
  int v58;
  int v59;
  int v60;
  int v61;
  int v62;
  const void *v63;
  size_t v64;
  void *v65;
  uint64_t v66;
  int v67;
  int v68;
  int v69;
  int v70;
  int v71;
  int v72;
  int v73;
  int v74;
  const void *v75;
  size_t v76;
  void *v77;
  int v78;
  int v79;
  int v80;
  int v81;
  int v82;
  int v83;
  int v84;
  std::string *v85;
  int v86;
  std::string *v87;
  __int128 v88;
  int v90;
  int v91;
  uint64_t v92;
  int v93;
  uint64_t v94;
  int v95;
  uint64_t v96;
  int v97;
  uint64_t v98;
  int v99;
  uint64_t v100;
  int v101;
  int v102;
  uint64_t v103;
  int v104;
  int v105;
  uint64_t v106;
  int v107;
  uint64_t v108;
  int v109;
  uint64_t v110;
  int v111;
  uint64_t v112;
  int v113;
  uint64_t v114;
  int v115;
  uint64_t v116;
  int v117;
  uint64_t v118;
  int v119;
  uint64_t v120;
  int v121;
  int v122;
  uint64_t v123;
  int v124;
  uint64_t v125;
  int v126;
  uint64_t v127;
  int v128;
  uint64_t v129;
  int v130;
  int v131;
  int v132;
  int v133;
  int v134;
  int v135;
  int v136;
  int v137;
  int v138;
  int v139;
  int v140;
  uint64_t v141;
  int v142;
  int v143;
  int v144;
  int v145;
  uint64_t v146;
  int v147;
  int v148;
  int v149;
  uint64_t (**v150)();
  std::string v151;
  int v152;
  char v153;
  std::string v154;
  uint64_t (**v155)();
  std::string v156;
  int v157;
  char v158;
  std::string v159;
  uint64_t (**v160)();
  std::string v161;
  int v162;
  char v163;
  std::string v164;
  uint64_t (**v165)();
  std::string v166;
  int v167;
  uint64_t v168;
  int v169;
  uint64_t (**v170)();
  std::string v171;
  int v172;
  uint64_t v173;
  int v174;
  uint64_t (**v175)();
  std::string v176;
  int v177;
  uint64_t v178;
  uint64_t (**v179)();
  std::string v180;
  int v181;
  char v182;
  std::string v183;
  uint64_t (**v184)();
  std::string v185;
  int v186;
  uint64_t v187;
  uint64_t (**v188)();
  std::string v189;
  int v190;
  uint64_t v191;
  uint64_t (**v192)();
  std::string v193;
  int v194;
  uint64_t v195;
  uint64_t (**v196)();
  std::string v197;
  int v198;
  uint64_t v199;
  uint64_t (**v200)();
  std::string v201;
  int v202;
  char v203;
  void (**v204)(mediaplatform::Data *__hidden);
  size_t v205;
  size_t v206;
  const void *v207;
  char v208;
  uint64_t (**v209)();
  std::string v210;
  int v211;
  uint64_t v212;
  int v213;
  uint64_t (**v214)();
  std::string v215;
  int v216;
  char v217;
  std::string v218;
  uint64_t (**v219)();
  std::string v220;
  int v221;
  uint64_t v222;
  int v223;
  uint64_t (**v224)();
  std::string v225;
  int v226;
  uint64_t v227;
  int v228;
  uint64_t (**v229)();
  std::string v230;
  int v231;
  char v232;
  std::string v233;
  uint64_t (**v234)();
  std::string v235;
  int v236;
  uint64_t v237;
  uint64_t (**v238)();
  std::string v239;
  int v240;
  uint64_t v241;
  uint64_t (**v242)();
  std::string v243;
  int v244;
  uint64_t v245;
  uint64_t (**v246)();
  std::string v247;
  int v248;
  uint64_t v249;
  uint64_t (**v250)();
  std::string v251;
  int v252;
  uint64_t v253;
  uint64_t (**v254)();
  std::string v255;
  int v256;
  uint64_t v257;
  uint64_t (**v258)();
  std::string v259;
  int v260;
  uint64_t v261;
  uint64_t (**v262)();
  std::string v263;
  int v264;
  uint64_t v265;
  uint64_t (**v266)();
  std::string v267;
  int v268;
  uint64_t v269;
  int v270;
  uint64_t (**v271)();
  std::string v272;
  int v273;
  uint64_t v274;
  uint64_t (**v275)();
  std::string v276;
  int v277;
  uint64_t v278;
  uint64_t (**v279)();
  std::string v280;
  int v281;
  uint64_t v282;
  uint64_t (**v283)();
  std::string v284;
  int v285;
  uint64_t v286;
  uint64_t (**v287)();
  std::string v288;
  int v289;
  char v290;
  std::string v291;
  uint64_t (**v292)();
  std::string v293;
  int v294;
  char v295;
  std::string v296;
  uint64_t (**v297)();
  std::string v298;
  int v299;
  char v300;
  std::string v301;
  uint64_t (**v302)();
  std::string v303;
  int v304;
  char v305;
  std::string v306;
  uint64_t (**v307)();
  std::string v308;
  int v309;
  uint64_t v310;
  uint64_t (**v311)();
  std::string __s;
  int v313;
  uint64_t v314;
  uint64_t (**v315)();
  std::string v316;
  int v317;
  uint64_t v318;
  uint64_t (**v319)();
  std::string v320;
  int v321;
  char v322;
  std::string v323;
  uint64_t (**v324)();
  std::string v325;
  int v326;
  char v327;
  std::string v328;
  uint64_t (**v329)();
  std::string v330;
  int v331;
  char v332;
  std::string v333;
  uint64_t (**v334)();
  std::string __p;
  int v336;
  uint64_t v337;
  int v338;
  uint64_t (**v339)();
  std::string v340;
  int v341;
  uint64_t v342;
  int v343;
  uint64_t (**v344)();
  std::string v345;
  int v346;
  uint64_t v347;
  uint64_t (**v348)();
  std::string v349;
  int v350;
  char v351;
  std::string v352;
  uint64_t (**v353)();
  std::string v354;
  int v355;
  uint64_t v356;
  uint64_t (**v357)();
  std::string v358;
  int v359;
  uint64_t v360;
  uint64_t (**v361)();
  std::string v362;
  int v363;
  uint64_t v364;
  uint64_t (**v365)();
  std::string v366;
  int v367;
  uint64_t v368;
  uint64_t (**v369)();
  std::string v370;
  int v371;
  char v372;
  void (**v373)(mediaplatform::Data *__hidden);
  size_t v374;
  size_t v375;
  void *v376;
  char v377;
  uint64_t (**v378)();
  std::string v379;
  int v380;
  uint64_t v381;
  int v382;
  uint64_t (**v383)();
  std::string v384;
  int v385;
  char v386;
  std::string v387;
  uint64_t (**v388)();
  std::string v389;
  int v390;
  uint64_t v391;
  int v392;
  uint64_t (**v393)();
  std::string v394;
  int v395;
  uint64_t v396;
  int v397;
  uint64_t (**v398)();
  std::string v399;
  int v400;
  char v401;
  std::string v402;
  uint64_t (**v403)();
  std::string v404;
  int v405;
  uint64_t v406;
  uint64_t (**v407)();
  std::string v408;
  int v409;
  uint64_t v410;
  uint64_t (**v411)();
  std::string v412;
  int v413;
  uint64_t v414;
  uint64_t (**v415)();
  std::string v416;
  int v417;
  uint64_t v418;
  uint64_t (**v419)();
  std::string v420;
  int v421;
  uint64_t v422;
  uint64_t (**v423)();
  std::string v424;
  int v425;
  uint64_t v426;
  uint64_t (**v427)();
  std::string v428;
  int v429;
  uint64_t v430;
  uint64_t (**v431)();
  std::string v432;
  int v433;
  uint64_t v434;
  uint64_t (**v435)();
  std::string v436;
  int v437;
  uint64_t v438;
  int v439;
  uint64_t (**v440)();
  std::string v441;
  int v442;
  uint64_t v443;
  uint64_t (**v444)();
  std::string v445;
  int v446;
  uint64_t v447;
  uint64_t (**v448)();
  std::string v449;
  int v450;
  uint64_t v451;
  uint64_t (**v452)();
  std::string v453;
  int v454;
  uint64_t v455;
  uint64_t (**v456)();
  std::string v457;
  int v458;
  char v459;
  std::string v460;
  uint64_t (**v461)();
  std::string v462;
  int v463;
  char v464;
  std::string v465;
  uint64_t (**v466)();
  std::string v467;
  int v468;
  char v469;
  std::string v470;
  uint64_t (**v471)();
  std::string v472;
  int v473;
  char v474;
  std::string v475;
  uint64_t (**v476)();
  std::string v477;
  int v478;
  uint64_t v479;
  uint64_t (**v480)();
  std::string v481;
  int v482;
  uint64_t v483;

  v39 = MEMORY[0x24BDAC7A8](a1);
  v42 = v41;
  v44 = v43;
  v46 = v45;
  v48 = v47;
  v50 = v49;
  v51 = v40;
  v53 = v52;
  v54 = v39;
  if (*(char *)(v40 + 31) < 0)
    std::string::__init_copy_ctor_external(&v316, *(const std::string::value_type **)(v40 + 8), *(_QWORD *)(v40 + 16));
  else
    v316 = *(std::string *)(v40 + 8);
  v317 = *(_DWORD *)(v51 + 32);
  v315 = off_24C335AF8;
  v318 = *(_QWORD *)(v51 + 36);
  if (*(char *)(v50 + 31) < 0)
    std::string::__init_copy_ctor_external(&__s, *(const std::string::value_type **)(v50 + 8), *(_QWORD *)(v50 + 16));
  else
    __s = *(std::string *)(v50 + 8);
  v148 = *(_DWORD *)(v50 + 32);
  v313 = v148;
  v311 = off_24C335AF8;
  v146 = *(_QWORD *)(v50 + 36);
  v314 = v146;
  if (*(char *)(v48 + 31) < 0)
    std::string::__init_copy_ctor_external(&v308, *(const std::string::value_type **)(v48 + 8), *(_QWORD *)(v48 + 16));
  else
    v308 = *(std::string *)(v48 + 8);
  v143 = *(_DWORD *)(v48 + 32);
  v309 = v143;
  v307 = off_24C335AF8;
  v141 = *(_QWORD *)(v48 + 36);
  v310 = v141;
  v302 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(v46 + 31) < 0)
    std::string::__init_copy_ctor_external(&v303, *(const std::string::value_type **)(v46 + 8), *(_QWORD *)(v46 + 16));
  else
    v303 = *(std::string *)(v46 + 8);
  v304 = *(_DWORD *)(v46 + 32);
  v302 = &off_24C335AB8;
  v305 = *(_BYTE *)(v46 + 36);
  if (*(char *)(v46 + 63) < 0)
    std::string::__init_copy_ctor_external(&v306, *(const std::string::value_type **)(v46 + 40), *(_QWORD *)(v46 + 48));
  else
    v306 = *(std::string *)(v46 + 40);
  v297 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(v44 + 31) < 0)
    std::string::__init_copy_ctor_external(&v298, *(const std::string::value_type **)(v44 + 8), *(_QWORD *)(v44 + 16));
  else
    v298 = *(std::string *)(v44 + 8);
  v299 = *(_DWORD *)(v44 + 32);
  v297 = &off_24C335AB8;
  v300 = *(_BYTE *)(v44 + 36);
  if (*(char *)(v44 + 63) < 0)
    std::string::__init_copy_ctor_external(&v301, *(const std::string::value_type **)(v44 + 40), *(_QWORD *)(v44 + 48));
  else
    v301 = *(std::string *)(v44 + 40);
  v292 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(v42 + 31) < 0)
    std::string::__init_copy_ctor_external(&v293, *(const std::string::value_type **)(v42 + 8), *(_QWORD *)(v42 + 16));
  else
    v293 = *(std::string *)(v42 + 8);
  v294 = *(_DWORD *)(v42 + 32);
  v292 = &off_24C335AB8;
  v295 = *(_BYTE *)(v42 + 36);
  if (*(char *)(v42 + 63) < 0)
    std::string::__init_copy_ctor_external(&v296, *(const std::string::value_type **)(v42 + 40), *(_QWORD *)(v42 + 48));
  else
    v296 = *(std::string *)(v42 + 40);
  v287 = (uint64_t (**)())off_24C335D90;
  v103 = v53;
  if (*(char *)(a9 + 31) < 0)
    std::string::__init_copy_ctor_external(&v288, *(const std::string::value_type **)(a9 + 8), *(_QWORD *)(a9 + 16));
  else
    v288 = *(std::string *)(a9 + 8);
  v289 = *(_DWORD *)(a9 + 32);
  v287 = &off_24C335AB8;
  v290 = *(_BYTE *)(a9 + 36);
  if (*(char *)(a9 + 63) < 0)
    std::string::__init_copy_ctor_external(&v291, *(const std::string::value_type **)(a9 + 40), *(_QWORD *)(a9 + 48));
  else
    v291 = *(std::string *)(a9 + 40);
  if (*(char *)(a10 + 31) < 0)
    std::string::__init_copy_ctor_external(&v284, *(const std::string::value_type **)(a10 + 8), *(_QWORD *)(a10 + 16));
  else
    v284 = *(std::string *)(a10 + 8);
  v131 = *(_DWORD *)(a10 + 32);
  v285 = v131;
  v283 = off_24C335AF8;
  v129 = *(_QWORD *)(a10 + 36);
  v286 = v129;
  if (*(char *)(a11 + 31) < 0)
    std::string::__init_copy_ctor_external(&v280, *(const std::string::value_type **)(a11 + 8), *(_QWORD *)(a11 + 16));
  else
    v280 = *(std::string *)(a11 + 8);
  v128 = *(_DWORD *)(a11 + 32);
  v281 = v128;
  v279 = off_24C335AF8;
  v127 = *(_QWORD *)(a11 + 36);
  v282 = v127;
  if (*(char *)(a12 + 31) < 0)
    std::string::__init_copy_ctor_external(&v276, *(const std::string::value_type **)(a12 + 8), *(_QWORD *)(a12 + 16));
  else
    v276 = *(std::string *)(a12 + 8);
  v126 = *(_DWORD *)(a12 + 32);
  v277 = v126;
  v275 = off_24C335AF8;
  v125 = *(_QWORD *)(a12 + 36);
  v278 = v125;
  if (*(char *)(a13 + 31) < 0)
    std::string::__init_copy_ctor_external(&v272, *(const std::string::value_type **)(a13 + 8), *(_QWORD *)(a13 + 16));
  else
    v272 = *(std::string *)(a13 + 8);
  v124 = *(_DWORD *)(a13 + 32);
  v273 = v124;
  v271 = off_24C335AF8;
  v123 = *(_QWORD *)(a13 + 36);
  v274 = v123;
  if (*(char *)(a14 + 31) < 0)
    std::string::__init_copy_ctor_external(&v267, *(const std::string::value_type **)(a14 + 8), *(_QWORD *)(a14 + 16));
  else
    v267 = *(std::string *)(a14 + 8);
  v55 = *(_DWORD *)(a14 + 32);
  v266 = off_24C335B18;
  v269 = *(_QWORD *)(a14 + 36);
  v56 = *(_DWORD *)(a14 + 44);
  v122 = v55;
  v268 = v55;
  v270 = v56;
  if (*(char *)(a15 + 31) < 0)
    std::string::__init_copy_ctor_external(&v263, *(const std::string::value_type **)(a15 + 8), *(_QWORD *)(a15 + 16));
  else
    v263 = *(std::string *)(a15 + 8);
  v121 = *(_DWORD *)(a15 + 32);
  v264 = v121;
  v262 = off_24C335AF8;
  v120 = *(_QWORD *)(a15 + 36);
  v265 = v120;
  if (*(char *)(a16 + 31) < 0)
    std::string::__init_copy_ctor_external(&v259, *(const std::string::value_type **)(a16 + 8), *(_QWORD *)(a16 + 16));
  else
    v259 = *(std::string *)(a16 + 8);
  v119 = *(_DWORD *)(a16 + 32);
  v260 = v119;
  v258 = off_24C335AF8;
  v118 = *(_QWORD *)(a16 + 36);
  v261 = v118;
  if (*(char *)(a17 + 31) < 0)
    std::string::__init_copy_ctor_external(&v255, *(const std::string::value_type **)(a17 + 8), *(_QWORD *)(a17 + 16));
  else
    v255 = *(std::string *)(a17 + 8);
  v117 = *(_DWORD *)(a17 + 32);
  v256 = v117;
  v254 = off_24C335AF8;
  v116 = *(_QWORD *)(a17 + 36);
  v257 = v116;
  if (*(char *)(a18 + 31) < 0)
    std::string::__init_copy_ctor_external(&v251, *(const std::string::value_type **)(a18 + 8), *(_QWORD *)(a18 + 16));
  else
    v251 = *(std::string *)(a18 + 8);
  v115 = *(_DWORD *)(a18 + 32);
  v252 = v115;
  v250 = off_24C335AF8;
  v114 = *(_QWORD *)(a18 + 36);
  v253 = v114;
  if (*(char *)(a19 + 31) < 0)
    std::string::__init_copy_ctor_external(&v247, *(const std::string::value_type **)(a19 + 8), *(_QWORD *)(a19 + 16));
  else
    v247 = *(std::string *)(a19 + 8);
  v113 = *(_DWORD *)(a19 + 32);
  v248 = v113;
  v246 = off_24C335AF8;
  v112 = *(_QWORD *)(a19 + 36);
  v249 = v112;
  if (*(char *)(a20 + 31) < 0)
    std::string::__init_copy_ctor_external(&v243, *(const std::string::value_type **)(a20 + 8), *(_QWORD *)(a20 + 16));
  else
    v243 = *(std::string *)(a20 + 8);
  v111 = *(_DWORD *)(a20 + 32);
  v244 = v111;
  v242 = off_24C335AF8;
  v110 = *(_QWORD *)(a20 + 36);
  v245 = v110;
  if (*(char *)(a21 + 31) < 0)
    std::string::__init_copy_ctor_external(&v239, *(const std::string::value_type **)(a21 + 8), *(_QWORD *)(a21 + 16));
  else
    v239 = *(std::string *)(a21 + 8);
  v109 = *(_DWORD *)(a21 + 32);
  v240 = v109;
  v238 = off_24C335AF8;
  v108 = *(_QWORD *)(a21 + 36);
  v241 = v108;
  if (*(char *)(a22 + 31) < 0)
    std::string::__init_copy_ctor_external(&v235, *(const std::string::value_type **)(a22 + 8), *(_QWORD *)(a22 + 16));
  else
    v235 = *(std::string *)(a22 + 8);
  v107 = *(_DWORD *)(a22 + 32);
  v236 = v107;
  v234 = off_24C335AF8;
  v106 = *(_QWORD *)(a22 + 36);
  v237 = v106;
  v229 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a23 + 31) < 0)
    std::string::__init_copy_ctor_external(&v230, *(const std::string::value_type **)(a23 + 8), *(_QWORD *)(a23 + 16));
  else
    v230 = *(std::string *)(a23 + 8);
  v231 = *(_DWORD *)(a23 + 32);
  v229 = &off_24C335AB8;
  v232 = *(_BYTE *)(a23 + 36);
  if (*(char *)(a23 + 63) < 0)
    std::string::__init_copy_ctor_external(&v233, *(const std::string::value_type **)(a23 + 40), *(_QWORD *)(a23 + 48));
  else
    v233 = *(std::string *)(a23 + 40);
  if (*(char *)(a24 + 31) < 0)
    std::string::__init_copy_ctor_external(&v225, *(const std::string::value_type **)(a24 + 8), *(_QWORD *)(a24 + 16));
  else
    v225 = *(std::string *)(a24 + 8);
  v57 = *(_DWORD *)(a24 + 32);
  v224 = off_24C335B18;
  v227 = *(_QWORD *)(a24 + 36);
  v58 = *(_DWORD *)(a24 + 44);
  v105 = v57;
  v226 = v57;
  v228 = v58;
  if (*(char *)(a25 + 31) < 0)
    std::string::__init_copy_ctor_external(&v220, *(const std::string::value_type **)(a25 + 8), *(_QWORD *)(a25 + 16));
  else
    v220 = *(std::string *)(a25 + 8);
  v59 = *(_DWORD *)(a25 + 32);
  v219 = off_24C335B18;
  v222 = *(_QWORD *)(a25 + 36);
  v60 = *(_DWORD *)(a25 + 44);
  v104 = v59;
  v221 = v59;
  v223 = v60;
  v214 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a26 + 31) < 0)
    std::string::__init_copy_ctor_external(&v215, *(const std::string::value_type **)(a26 + 8), *(_QWORD *)(a26 + 16));
  else
    v215 = *(std::string *)(a26 + 8);
  v216 = *(_DWORD *)(a26 + 32);
  v214 = &off_24C335AB8;
  v217 = *(_BYTE *)(a26 + 36);
  if (*(char *)(a26 + 63) < 0)
    std::string::__init_copy_ctor_external(&v218, *(const std::string::value_type **)(a26 + 40), *(_QWORD *)(a26 + 48));
  else
    v218 = *(std::string *)(a26 + 40);
  if (*(char *)(a27 + 31) < 0)
    std::string::__init_copy_ctor_external(&v210, *(const std::string::value_type **)(a27 + 8), *(_QWORD *)(a27 + 16));
  else
    v210 = *(std::string *)(a27 + 8);
  v61 = *(_DWORD *)(a27 + 32);
  v209 = off_24C335B18;
  v212 = *(_QWORD *)(a27 + 36);
  v62 = *(_DWORD *)(a27 + 44);
  v102 = v61;
  v211 = v61;
  v213 = v62;
  v200 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a28 + 31) < 0)
    std::string::__init_copy_ctor_external(&v201, *(const std::string::value_type **)(a28 + 8), *(_QWORD *)(a28 + 16));
  else
    v201 = *(std::string *)(a28 + 8);
  v202 = *(_DWORD *)(a28 + 32);
  v200 = &off_24C335A98;
  v203 = *(_BYTE *)(a28 + 36);
  v63 = *(const void **)(a28 + 64);
  v64 = *(_QWORD *)(a28 + 48);
  v204 = &off_24C331510;
  v205 = v64;
  v206 = v64;
  if (v64)
    v65 = (void *)operator new[]();
  else
    v65 = 0;
  v207 = v65;
  v208 = 1;
  if (v63)
    memcpy(v65, v63, v64);
  else
    bzero(v65, v64);
  if (*(char *)(a29 + 31) < 0)
    std::string::__init_copy_ctor_external(&v197, *(const std::string::value_type **)(a29 + 8), *(_QWORD *)(a29 + 16));
  else
    v197 = *(std::string *)(a29 + 8);
  v101 = *(_DWORD *)(a29 + 32);
  v198 = v101;
  v196 = off_24C335AF8;
  v100 = *(_QWORD *)(a29 + 36);
  v199 = v100;
  if (*(char *)(a30 + 31) < 0)
    std::string::__init_copy_ctor_external(&v193, *(const std::string::value_type **)(a30 + 8), *(_QWORD *)(a30 + 16));
  else
    v193 = *(std::string *)(a30 + 8);
  v99 = *(_DWORD *)(a30 + 32);
  v194 = v99;
  v192 = off_24C335AF8;
  v98 = *(_QWORD *)(a30 + 36);
  v195 = v98;
  if (*(char *)(a31 + 31) < 0)
    std::string::__init_copy_ctor_external(&v189, *(const std::string::value_type **)(a31 + 8), *(_QWORD *)(a31 + 16));
  else
    v189 = *(std::string *)(a31 + 8);
  v97 = *(_DWORD *)(a31 + 32);
  v190 = v97;
  v188 = off_24C335AF8;
  v96 = *(_QWORD *)(a31 + 36);
  v191 = v96;
  if (*(char *)(a32 + 31) < 0)
    std::string::__init_copy_ctor_external(&v185, *(const std::string::value_type **)(a32 + 8), *(_QWORD *)(a32 + 16));
  else
    v185 = *(std::string *)(a32 + 8);
  v95 = *(_DWORD *)(a32 + 32);
  v186 = v95;
  v184 = off_24C335AF8;
  v66 = *(_QWORD *)(a32 + 36);
  v187 = v66;
  v179 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a33 + 31) < 0)
    std::string::__init_copy_ctor_external(&v180, *(const std::string::value_type **)(a33 + 8), *(_QWORD *)(a33 + 16));
  else
    v180 = *(std::string *)(a33 + 8);
  v181 = *(_DWORD *)(a33 + 32);
  v179 = &off_24C335AB8;
  v182 = *(_BYTE *)(a33 + 36);
  v94 = v66;
  if (*(char *)(a33 + 63) < 0)
    std::string::__init_copy_ctor_external(&v183, *(const std::string::value_type **)(a33 + 40), *(_QWORD *)(a33 + 48));
  else
    v183 = *(std::string *)(a33 + 40);
  if (*(char *)(a34 + 31) < 0)
    std::string::__init_copy_ctor_external(&v176, *(const std::string::value_type **)(a34 + 8), *(_QWORD *)(a34 + 16));
  else
    v176 = *(std::string *)(a34 + 8);
  v93 = *(_DWORD *)(a34 + 32);
  v177 = v93;
  v175 = off_24C335AF8;
  v92 = *(_QWORD *)(a34 + 36);
  v178 = v92;
  if (*(char *)(a35 + 31) < 0)
    std::string::__init_copy_ctor_external(&v171, *(const std::string::value_type **)(a35 + 8), *(_QWORD *)(a35 + 16));
  else
    v171 = *(std::string *)(a35 + 8);
  v67 = *(_DWORD *)(a35 + 32);
  v170 = off_24C335B18;
  v173 = *(_QWORD *)(a35 + 36);
  v68 = *(_DWORD *)(a35 + 44);
  v91 = v67;
  v172 = v67;
  v174 = v68;
  v165 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a36 + 31) < 0)
    std::string::__init_copy_ctor_external(&v166, *(const std::string::value_type **)(a36 + 8), *(_QWORD *)(a36 + 16));
  else
    v166 = *(std::string *)(a36 + 8);
  v69 = *(_DWORD *)(a36 + 32);
  v165 = off_24C335B18;
  v168 = *(_QWORD *)(a36 + 36);
  v70 = *(_DWORD *)(a36 + 44);
  v90 = v69;
  v167 = v69;
  v169 = v70;
  v160 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a37 + 31) < 0)
    std::string::__init_copy_ctor_external(&v161, *(const std::string::value_type **)(a37 + 8), *(_QWORD *)(a37 + 16));
  else
    v161 = *(std::string *)(a37 + 8);
  v162 = *(_DWORD *)(a37 + 32);
  v160 = &off_24C335AB8;
  v163 = *(_BYTE *)(a37 + 36);
  if (*(char *)(a37 + 63) < 0)
    std::string::__init_copy_ctor_external(&v164, *(const std::string::value_type **)(a37 + 40), *(_QWORD *)(a37 + 48));
  else
    v164 = *(std::string *)(a37 + 40);
  v155 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a38 + 31) < 0)
    std::string::__init_copy_ctor_external(&v156, *(const std::string::value_type **)(a38 + 8), *(_QWORD *)(a38 + 16));
  else
    v156 = *(std::string *)(a38 + 8);
  v157 = *(_DWORD *)(a38 + 32);
  v155 = &off_24C335AB8;
  v158 = *(_BYTE *)(a38 + 36);
  if (*(char *)(a38 + 63) < 0)
    std::string::__init_copy_ctor_external(&v159, *(const std::string::value_type **)(a38 + 40), *(_QWORD *)(a38 + 48));
  else
    v159 = *(std::string *)(a38 + 40);
  v150 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a39 + 31) < 0)
    std::string::__init_copy_ctor_external(&v151, *(const std::string::value_type **)(a39 + 8), *(_QWORD *)(a39 + 16));
  else
    v151 = *(std::string *)(a39 + 8);
  v152 = *(_DWORD *)(a39 + 32);
  v150 = &off_24C335AB8;
  v153 = *(_BYTE *)(a39 + 36);
  if (*(char *)(a39 + 63) < 0)
    std::string::__init_copy_ctor_external(&v154, *(const std::string::value_type **)(a39 + 40), *(_QWORD *)(a39 + 48));
  else
    v154 = *(std::string *)(a39 + 40);
  v480 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v481, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
  else
    v481 = __s;
  v482 = v148;
  v480 = off_24C335AF8;
  v483 = v146;
  v476 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v308.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v477, v308.__r_.__value_.__l.__data_, v308.__r_.__value_.__l.__size_);
  else
    v477 = v308;
  v478 = v143;
  v476 = off_24C335AF8;
  v479 = v141;
  v471 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v303.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v472, v303.__r_.__value_.__l.__data_, v303.__r_.__value_.__l.__size_);
  else
    v472 = v303;
  v473 = v304;
  v471 = &off_24C335AB8;
  v474 = v305;
  if (SHIBYTE(v306.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v475, v306.__r_.__value_.__l.__data_, v306.__r_.__value_.__l.__size_);
  else
    v475 = v306;
  v466 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v298.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v467, v298.__r_.__value_.__l.__data_, v298.__r_.__value_.__l.__size_);
  else
    v467 = v298;
  v468 = v299;
  v466 = &off_24C335AB8;
  v469 = v300;
  if (SHIBYTE(v301.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v470, v301.__r_.__value_.__l.__data_, v301.__r_.__value_.__l.__size_);
  else
    v470 = v301;
  v461 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v293.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v462, v293.__r_.__value_.__l.__data_, v293.__r_.__value_.__l.__size_);
  else
    v462 = v293;
  v463 = v294;
  v461 = &off_24C335AB8;
  v464 = v295;
  if (SHIBYTE(v296.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v465, v296.__r_.__value_.__l.__data_, v296.__r_.__value_.__l.__size_);
  else
    v465 = v296;
  v456 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v288.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v457, v288.__r_.__value_.__l.__data_, v288.__r_.__value_.__l.__size_);
  else
    v457 = v288;
  v458 = v289;
  v456 = &off_24C335AB8;
  v459 = v290;
  if (SHIBYTE(v291.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v460, v291.__r_.__value_.__l.__data_, v291.__r_.__value_.__l.__size_);
  else
    v460 = v291;
  v452 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v284.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v453, v284.__r_.__value_.__l.__data_, v284.__r_.__value_.__l.__size_);
  else
    v453 = v284;
  v454 = v131;
  v452 = off_24C335AF8;
  v455 = v129;
  v448 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v280.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v449, v280.__r_.__value_.__l.__data_, v280.__r_.__value_.__l.__size_);
  else
    v449 = v280;
  v450 = v128;
  v448 = off_24C335AF8;
  v451 = v127;
  v444 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v276.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v445, v276.__r_.__value_.__l.__data_, v276.__r_.__value_.__l.__size_);
  else
    v445 = v276;
  v446 = v126;
  v444 = off_24C335AF8;
  v447 = v125;
  v440 = (uint64_t (**)())off_24C335D90;
  v71 = SHIBYTE(v272.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v272.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v441, v272.__r_.__value_.__l.__data_, v272.__r_.__value_.__l.__size_);
  else
    v441 = v272;
  v442 = v124;
  v440 = off_24C335AF8;
  v443 = v123;
  v435 = (uint64_t (**)())off_24C335D90;
  v72 = SHIBYTE(v267.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v267.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v436, v267.__r_.__value_.__l.__data_, v267.__r_.__value_.__l.__size_);
  else
    v436 = v267;
  v435 = off_24C335B18;
  v438 = v269;
  v437 = v122;
  v439 = v270;
  v431 = (uint64_t (**)())off_24C335D90;
  v73 = SHIBYTE(v263.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v263.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v432, v263.__r_.__value_.__l.__data_, v263.__r_.__value_.__l.__size_);
  else
    v432 = v263;
  v433 = v121;
  v431 = off_24C335AF8;
  v434 = v120;
  v427 = (uint64_t (**)())off_24C335D90;
  v149 = SHIBYTE(v259.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v259.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v428, v259.__r_.__value_.__l.__data_, v259.__r_.__value_.__l.__size_);
  else
    v428 = v259;
  v429 = v119;
  v427 = off_24C335AF8;
  v430 = v118;
  v423 = (uint64_t (**)())off_24C335D90;
  v147 = SHIBYTE(v255.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v255.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v424, v255.__r_.__value_.__l.__data_, v255.__r_.__value_.__l.__size_);
  else
    v424 = v255;
  v425 = v117;
  v423 = off_24C335AF8;
  v426 = v116;
  v419 = (uint64_t (**)())off_24C335D90;
  v145 = SHIBYTE(v251.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v251.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v420, v251.__r_.__value_.__l.__data_, v251.__r_.__value_.__l.__size_);
  else
    v420 = v251;
  v421 = v115;
  v419 = off_24C335AF8;
  v422 = v114;
  v415 = (uint64_t (**)())off_24C335D90;
  v74 = SHIBYTE(v247.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v247.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v416, v247.__r_.__value_.__l.__data_, v247.__r_.__value_.__l.__size_);
  else
    v416 = v247;
  v417 = v113;
  v415 = off_24C335AF8;
  v418 = v112;
  v411 = (uint64_t (**)())off_24C335D90;
  v144 = SHIBYTE(v243.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v243.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v412, v243.__r_.__value_.__l.__data_, v243.__r_.__value_.__l.__size_);
  else
    v412 = v243;
  v413 = v111;
  v411 = off_24C335AF8;
  v414 = v110;
  v407 = (uint64_t (**)())off_24C335D90;
  v142 = SHIBYTE(v239.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v239.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v408, v239.__r_.__value_.__l.__data_, v239.__r_.__value_.__l.__size_);
  else
    v408 = v239;
  v409 = v109;
  v407 = off_24C335AF8;
  v410 = v108;
  v403 = (uint64_t (**)())off_24C335D90;
  v140 = SHIBYTE(v235.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v235.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v404, v235.__r_.__value_.__l.__data_, v235.__r_.__value_.__l.__size_);
  else
    v404 = v235;
  v405 = v107;
  v403 = off_24C335AF8;
  v406 = v106;
  v398 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v230.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v399, v230.__r_.__value_.__l.__data_, v230.__r_.__value_.__l.__size_);
  else
    v399 = v230;
  v400 = v231;
  v398 = &off_24C335AB8;
  v401 = v232;
  if (SHIBYTE(v233.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v402, v233.__r_.__value_.__l.__data_, v233.__r_.__value_.__l.__size_);
  else
    v402 = v233;
  v393 = (uint64_t (**)())off_24C335D90;
  v139 = SHIBYTE(v225.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v225.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v394, v225.__r_.__value_.__l.__data_, v225.__r_.__value_.__l.__size_);
  else
    v394 = v225;
  v393 = off_24C335B18;
  v396 = v227;
  v395 = v105;
  v397 = v228;
  v388 = (uint64_t (**)())off_24C335D90;
  v138 = SHIBYTE(v220.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v220.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v389, v220.__r_.__value_.__l.__data_, v220.__r_.__value_.__l.__size_);
  else
    v389 = v220;
  v388 = off_24C335B18;
  v391 = v222;
  v390 = v104;
  v392 = v223;
  v383 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v215.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v384, v215.__r_.__value_.__l.__data_, v215.__r_.__value_.__l.__size_);
  else
    v384 = v215;
  v385 = v216;
  v383 = &off_24C335AB8;
  v386 = v217;
  if (SHIBYTE(v218.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v387, v218.__r_.__value_.__l.__data_, v218.__r_.__value_.__l.__size_);
  else
    v387 = v218;
  v378 = (uint64_t (**)())off_24C335D90;
  v137 = SHIBYTE(v210.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v210.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v379, v210.__r_.__value_.__l.__data_, v210.__r_.__value_.__l.__size_);
  else
    v379 = v210;
  v378 = off_24C335B18;
  v381 = v212;
  v380 = v102;
  v382 = v213;
  v369 = (uint64_t (**)())off_24C335D90;
  v136 = v74;
  if (SHIBYTE(v201.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v370, v201.__r_.__value_.__l.__data_, v201.__r_.__value_.__l.__size_);
  else
    v370 = v201;
  v371 = v202;
  v369 = &off_24C335A98;
  v372 = v203;
  v75 = v207;
  v76 = v205;
  v373 = &off_24C331510;
  v374 = v205;
  v375 = v205;
  if (v205)
    v77 = (void *)operator new[]();
  else
    v77 = 0;
  v376 = v77;
  v377 = 1;
  if (v75)
    memcpy(v77, v75, v76);
  else
    bzero(v77, v76);
  v365 = (uint64_t (**)())off_24C335D90;
  v78 = SHIBYTE(v197.__r_.__value_.__r.__words[2]);
  v135 = v73;
  if (SHIBYTE(v197.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v366, v197.__r_.__value_.__l.__data_, v197.__r_.__value_.__l.__size_);
  else
    v366 = v197;
  v367 = v101;
  v365 = off_24C335AF8;
  v368 = v100;
  v361 = (uint64_t (**)())off_24C335D90;
  v79 = SHIBYTE(v193.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v193.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v362, v193.__r_.__value_.__l.__data_, v193.__r_.__value_.__l.__size_);
  else
    v362 = v193;
  v363 = v99;
  v361 = off_24C335AF8;
  v364 = v98;
  v357 = (uint64_t (**)())off_24C335D90;
  v80 = SHIBYTE(v189.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v189.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v358, v189.__r_.__value_.__l.__data_, v189.__r_.__value_.__l.__size_);
  else
    v358 = v189;
  v359 = v97;
  v357 = off_24C335AF8;
  v360 = v96;
  v353 = (uint64_t (**)())off_24C335D90;
  v81 = SHIBYTE(v185.__r_.__value_.__r.__words[2]);
  v134 = v79;
  if (SHIBYTE(v185.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v354, v185.__r_.__value_.__l.__data_, v185.__r_.__value_.__l.__size_);
  else
    v354 = v185;
  v355 = v95;
  v353 = off_24C335AF8;
  v356 = v94;
  v348 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v180.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v349, v180.__r_.__value_.__l.__data_, v180.__r_.__value_.__l.__size_);
  else
    v349 = v180;
  v350 = v181;
  v348 = &off_24C335AB8;
  v351 = v182;
  v133 = v72;
  if (SHIBYTE(v183.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v352, v183.__r_.__value_.__l.__data_, v183.__r_.__value_.__l.__size_);
  else
    v352 = v183;
  v344 = (uint64_t (**)())off_24C335D90;
  v82 = SHIBYTE(v176.__r_.__value_.__r.__words[2]);
  v132 = v71;
  if (SHIBYTE(v176.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v345, v176.__r_.__value_.__l.__data_, v176.__r_.__value_.__l.__size_);
  else
    v345 = v176;
  v346 = v93;
  v344 = off_24C335AF8;
  v347 = v92;
  v339 = (uint64_t (**)())off_24C335D90;
  v83 = SHIBYTE(v171.__r_.__value_.__r.__words[2]);
  v130 = v78;
  if (SHIBYTE(v171.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v340, v171.__r_.__value_.__l.__data_, v171.__r_.__value_.__l.__size_);
  else
    v340 = v171;
  v339 = off_24C335B18;
  v342 = v173;
  v341 = v91;
  v343 = v174;
  v334 = (uint64_t (**)())off_24C335D90;
  v84 = SHIBYTE(v166.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v166.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&__p, v166.__r_.__value_.__l.__data_, v166.__r_.__value_.__l.__size_);
  else
    __p = v166;
  v334 = off_24C335B18;
  v337 = v168;
  v336 = v90;
  v338 = v169;
  v329 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v161.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v330, v161.__r_.__value_.__l.__data_, v161.__r_.__value_.__l.__size_);
  else
    v330 = v161;
  v331 = v162;
  v329 = &off_24C335AB8;
  v332 = v163;
  if (SHIBYTE(v164.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v333, v164.__r_.__value_.__l.__data_, v164.__r_.__value_.__l.__size_);
  else
    v333 = v164;
  v324 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v156.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v325, v156.__r_.__value_.__l.__data_, v156.__r_.__value_.__l.__size_);
  else
    v325 = v156;
  v326 = v157;
  v324 = &off_24C335AB8;
  v327 = v158;
  if (SHIBYTE(v159.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v328, v159.__r_.__value_.__l.__data_, v159.__r_.__value_.__l.__size_);
  else
    v328 = v159;
  v319 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v151.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v320, v151.__r_.__value_.__l.__data_, v151.__r_.__value_.__l.__size_);
  else
    v320 = v151;
  v321 = v152;
  v319 = &off_24C335AB8;
  v322 = v153;
  if (SHIBYTE(v154.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v323, v154.__r_.__value_.__l.__data_, v154.__r_.__value_.__l.__size_);
  else
    v323 = v154;
  mediaplatform::DatabaseColumnTuple<3ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>>::DatabaseColumnTuple(v54, (uint64_t)&v480, (uint64_t)&v476, (uint64_t)&v471, (uint64_t)&v466, (uint64_t)&v461, (uint64_t)&v456, (uint64_t)&v452, (uint64_t)&v448, (uint64_t)&v444, (uint64_t)&v440, (uint64_t)&v435, (uint64_t)&v431, (uint64_t)&v427, (uint64_t)&v423, (uint64_t)&v419, (uint64_t)&v415, (uint64_t)&v411, (uint64_t)&v407,
    (uint64_t)&v403,
    (uint64_t)&v398,
    (uint64_t)&v393,
    (uint64_t)&v388,
    (uint64_t)&v383,
    (uint64_t)&v378,
    (uint64_t)&v369,
    (uint64_t)&v365,
    (uint64_t)&v361,
    (uint64_t)&v357,
    (uint64_t)&v353,
    (uint64_t)&v348,
    (uint64_t)&v344,
    (uint64_t)&v339,
    (uint64_t)&v334,
    (uint64_t)&v329,
    (uint64_t)&v324,
    (uint64_t)&v319);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v319);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v324);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v329);
  v334 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v339 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v340.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v340.__r_.__value_.__l.__data_);
  v344 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v345.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v345.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v348);
  v353 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v354.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v354.__r_.__value_.__l.__data_);
  v357 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v358.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v358.__r_.__value_.__l.__data_);
  v361 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v362.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v362.__r_.__value_.__l.__data_);
  v365 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v366.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v366.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<mediaplatform::Data>::~DatabaseColumn((uint64_t)&v369);
  v378 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v379.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v379.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v383);
  v388 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v389.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v389.__r_.__value_.__l.__data_);
  v393 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v394.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v394.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v398);
  v403 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v404.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v404.__r_.__value_.__l.__data_);
  v407 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v408.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v408.__r_.__value_.__l.__data_);
  v411 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v412.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v412.__r_.__value_.__l.__data_);
  v415 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v416.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v416.__r_.__value_.__l.__data_);
  v419 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v420.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v420.__r_.__value_.__l.__data_);
  v423 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v424.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v424.__r_.__value_.__l.__data_);
  v427 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v428.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v428.__r_.__value_.__l.__data_);
  v431 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v432.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v432.__r_.__value_.__l.__data_);
  v435 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v436.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v436.__r_.__value_.__l.__data_);
  v440 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v441.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v441.__r_.__value_.__l.__data_);
  v444 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v445.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v445.__r_.__value_.__l.__data_);
  v448 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v449.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v449.__r_.__value_.__l.__data_);
  v452 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v453.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v453.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v456);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v461);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v466);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v471);
  v476 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v477.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v477.__r_.__value_.__l.__data_);
  v480 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v481.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v481.__r_.__value_.__l.__data_);
  *(_QWORD *)(v54 + 1920) = off_24C335D90;
  v85 = (std::string *)(v54 + 1928);
  v86 = SHIBYTE(v316.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v316.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v85, v316.__r_.__value_.__l.__data_, v316.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v85->__r_.__value_.__l.__data_ = *(_OWORD *)&v316.__r_.__value_.__l.__data_;
    *(_QWORD *)(v54 + 1944) = *((_QWORD *)&v316.__r_.__value_.__l + 2);
  }
  *(_DWORD *)(v54 + 1952) = v317;
  *(_QWORD *)(v54 + 1920) = off_24C335AF8;
  *(_QWORD *)(v54 + 1956) = v318;
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v150);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v155);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v160);
  v165 = (uint64_t (**)())off_24C335D90;
  if (v84 < 0)
    operator delete(v166.__r_.__value_.__l.__data_);
  v170 = (uint64_t (**)())off_24C335D90;
  if (v83 < 0)
  {
    operator delete(v171.__r_.__value_.__l.__data_);
    if ((v82 & 0x80000000) == 0)
      goto LABEL_349;
  }
  else if ((v82 & 0x80000000) == 0)
  {
    goto LABEL_349;
  }
  operator delete(v176.__r_.__value_.__l.__data_);
LABEL_349:
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v179);
  if (v81 < 0)
  {
    operator delete(v185.__r_.__value_.__l.__data_);
    if ((v80 & 0x80000000) == 0)
      goto LABEL_351;
  }
  else if ((v80 & 0x80000000) == 0)
  {
    goto LABEL_351;
  }
  operator delete(v189.__r_.__value_.__l.__data_);
LABEL_351:
  if (v134 < 0)
    operator delete(v193.__r_.__value_.__l.__data_);
  if (v130 < 0)
    operator delete(v197.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<mediaplatform::Data>::~DatabaseColumn((uint64_t)&v200);
  if (v137 < 0)
    operator delete(v210.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v214);
  if (v138 < 0)
    operator delete(v220.__r_.__value_.__l.__data_);
  if (v139 < 0)
    operator delete(v225.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v229);
  if (v140 < 0)
    operator delete(v235.__r_.__value_.__l.__data_);
  if (v142 < 0)
    operator delete(v239.__r_.__value_.__l.__data_);
  if (v144 < 0)
    operator delete(v243.__r_.__value_.__l.__data_);
  if (v136 < 0)
    operator delete(v247.__r_.__value_.__l.__data_);
  if (v145 < 0)
    operator delete(v251.__r_.__value_.__l.__data_);
  if (v147 < 0)
    operator delete(v255.__r_.__value_.__l.__data_);
  if (v149 < 0)
  {
    operator delete(v259.__r_.__value_.__l.__data_);
    if ((v135 & 0x80000000) == 0)
      goto LABEL_375;
  }
  else if ((v135 & 0x80000000) == 0)
  {
    goto LABEL_375;
  }
  operator delete(v263.__r_.__value_.__l.__data_);
LABEL_375:
  if (v133 < 0)
  {
    operator delete(v267.__r_.__value_.__l.__data_);
    if ((v132 & 0x80000000) == 0)
      goto LABEL_377;
  }
  else if ((v132 & 0x80000000) == 0)
  {
    goto LABEL_377;
  }
  operator delete(v272.__r_.__value_.__l.__data_);
LABEL_377:
  if (SHIBYTE(v276.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v276.__r_.__value_.__l.__data_);
  if (SHIBYTE(v280.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v280.__r_.__value_.__l.__data_);
  if (SHIBYTE(v284.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v284.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v287);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v292);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v297);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v302);
  if (SHIBYTE(v308.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v308.__r_.__value_.__l.__data_);
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__s.__r_.__value_.__l.__data_);
    if ((v86 & 0x80000000) == 0)
      goto LABEL_387;
  }
  else if ((v86 & 0x80000000) == 0)
  {
    goto LABEL_387;
  }
  operator delete(v316.__r_.__value_.__l.__data_);
LABEL_387:
  *(_QWORD *)(v54 + 1968) = off_24C335D90;
  v87 = (std::string *)(v54 + 1976);
  if (*(char *)(v103 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v87, *(const std::string::value_type **)(v103 + 8), *(_QWORD *)(v103 + 16));
  }
  else
  {
    v88 = *(_OWORD *)(v103 + 8);
    *(_QWORD *)(v54 + 1992) = *(_QWORD *)(v103 + 24);
    *(_OWORD *)&v87->__r_.__value_.__l.__data_ = v88;
  }
  *(_DWORD *)(v54 + 2000) = *(_DWORD *)(v103 + 32);
  *(_QWORD *)(v54 + 1968) = off_24C335AF8;
  *(_QWORD *)(v54 + 2004) = *(_QWORD *)(v103 + 36);
  return v54;
}

void sub_20A8247DC(_Unwind_Exception *a1)
{
  uint64_t v1;

  mediaplatform::DatabaseColumnTuple<2ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>>::~DatabaseColumnTuple(v1);
  _Unwind_Resume(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<1ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>>::~DatabaseColumnTuple(uint64_t a1)
{
  *(_QWORD *)(a1 + 1968) = off_24C335D90;
  if (*(char *)(a1 + 1999) < 0)
    operator delete(*(void **)(a1 + 1976));
  *(_QWORD *)(a1 + 1920) = off_24C335D90;
  if (*(char *)(a1 + 1951) < 0)
    operator delete(*(void **)(a1 + 1928));
  *(_QWORD *)(a1 + 1872) = off_24C335D90;
  if (*(char *)(a1 + 1903) < 0)
    operator delete(*(void **)(a1 + 1880));
  return mediaplatform::DatabaseColumnTuple<4ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>>::~DatabaseColumnTuple(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<2ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>>::~DatabaseColumnTuple(uint64_t a1)
{
  *(_QWORD *)(a1 + 1920) = off_24C335D90;
  if (*(char *)(a1 + 1951) < 0)
    operator delete(*(void **)(a1 + 1928));
  *(_QWORD *)(a1 + 1872) = off_24C335D90;
  if (*(char *)(a1 + 1903) < 0)
    operator delete(*(void **)(a1 + 1880));
  return mediaplatform::DatabaseColumnTuple<4ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>>::~DatabaseColumnTuple(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<3ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>>::DatabaseColumnTuple(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37)
{
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  int v53;
  int v54;
  int v55;
  int v56;
  int v57;
  int v58;
  int v59;
  const void *v60;
  size_t v61;
  void *v62;
  int v63;
  int v64;
  int v65;
  int v66;
  int v67;
  int v68;
  int v69;
  int v70;
  const void *v71;
  size_t v72;
  void *v73;
  int v74;
  int v75;
  int v76;
  int v77;
  int v78;
  int v79;
  int v80;
  std::string *v81;
  int v82;
  std::string *v83;
  __int128 v84;
  int v86;
  int v87;
  int v88;
  int v89;
  uint64_t v90;
  int v91;
  uint64_t v92;
  int v93;
  uint64_t v94;
  int v95;
  uint64_t v96;
  int v97;
  uint64_t v98;
  int v99;
  int v100;
  int v101;
  uint64_t v102;
  int v103;
  uint64_t v104;
  int v105;
  uint64_t v106;
  int v107;
  uint64_t v108;
  int v109;
  uint64_t v110;
  int v111;
  uint64_t v112;
  int v113;
  uint64_t v114;
  int v115;
  uint64_t v116;
  int v117;
  uint64_t v118;
  int v119;
  int v120;
  int v121;
  int v122;
  uint64_t v123;
  int v124;
  int v125;
  int v126;
  uint64_t v127;
  int v128;
  int v129;
  int v130;
  uint64_t v131;
  int v132;
  int v133;
  int v134;
  uint64_t v135;
  int v136;
  int v137;
  int v138;
  int v139;
  int v140;
  int v141;
  int v142;
  uint64_t (**v143)();
  std::string v144;
  int v145;
  char v146;
  std::string v147;
  uint64_t (**v148)();
  std::string v149;
  int v150;
  char v151;
  std::string v152;
  uint64_t (**v153)();
  std::string v154;
  int v155;
  char v156;
  std::string v157;
  uint64_t (**v158)();
  std::string v159;
  int v160;
  uint64_t v161;
  int v162;
  uint64_t (**v163)();
  std::string v164;
  int v165;
  uint64_t v166;
  int v167;
  uint64_t (**v168)();
  std::string v169;
  int v170;
  uint64_t v171;
  uint64_t (**v172)();
  std::string v173;
  int v174;
  char v175;
  std::string v176;
  uint64_t (**v177)();
  std::string v178;
  int v179;
  uint64_t v180;
  uint64_t (**v181)();
  std::string v182;
  int v183;
  uint64_t v184;
  uint64_t (**v185)();
  std::string v186;
  int v187;
  uint64_t v188;
  uint64_t (**v189)();
  std::string v190;
  int v191;
  uint64_t v192;
  uint64_t (**v193)();
  std::string v194;
  int v195;
  char v196;
  void (**v197)(mediaplatform::Data *__hidden);
  size_t v198;
  size_t v199;
  const void *v200;
  char v201;
  uint64_t (**v202)();
  std::string v203;
  int v204;
  uint64_t v205;
  int v206;
  uint64_t (**v207)();
  std::string v208;
  int v209;
  char v210;
  std::string v211;
  uint64_t (**v212)();
  std::string v213;
  int v214;
  uint64_t v215;
  int v216;
  uint64_t (**v217)();
  std::string v218;
  int v219;
  uint64_t v220;
  int v221;
  uint64_t (**v222)();
  std::string v223;
  int v224;
  char v225;
  std::string v226;
  uint64_t (**v227)();
  std::string v228;
  int v229;
  uint64_t v230;
  uint64_t (**v231)();
  std::string v232;
  int v233;
  uint64_t v234;
  uint64_t (**v235)();
  std::string v236;
  int v237;
  uint64_t v238;
  uint64_t (**v239)();
  std::string v240;
  int v241;
  uint64_t v242;
  uint64_t (**v243)();
  std::string v244;
  int v245;
  uint64_t v246;
  uint64_t (**v247)();
  std::string v248;
  int v249;
  uint64_t v250;
  uint64_t (**v251)();
  std::string v252;
  int v253;
  uint64_t v254;
  uint64_t (**v255)();
  std::string v256;
  int v257;
  uint64_t v258;
  uint64_t (**v259)();
  std::string v260;
  int v261;
  uint64_t v262;
  int v263;
  uint64_t (**v264)();
  std::string v265;
  int v266;
  uint64_t v267;
  uint64_t (**v268)();
  std::string v269;
  int v270;
  uint64_t v271;
  uint64_t (**v272)();
  std::string v273;
  int v274;
  uint64_t v275;
  uint64_t (**v276)();
  std::string v277;
  int v278;
  uint64_t v279;
  uint64_t (**v280)();
  std::string v281;
  int v282;
  char v283;
  std::string v284;
  uint64_t (**v285)();
  std::string v286;
  int v287;
  char v288;
  std::string v289;
  uint64_t (**v290)();
  std::string v291;
  int v292;
  char v293;
  std::string v294;
  uint64_t (**v295)();
  std::string __s;
  int v297;
  char v298;
  std::string v299;
  uint64_t (**v300)();
  std::string v301;
  int v302;
  uint64_t v303;
  uint64_t (**v304)();
  std::string v305;
  int v306;
  char v307;
  std::string v308;
  uint64_t (**v309)();
  std::string v310;
  int v311;
  char v312;
  std::string v313;
  uint64_t (**v314)();
  std::string v315;
  int v316;
  char v317;
  std::string v318;
  uint64_t (**v319)();
  std::string __p;
  int v321;
  uint64_t v322;
  int v323;
  uint64_t (**v324)();
  std::string v325;
  int v326;
  uint64_t v327;
  int v328;
  uint64_t (**v329)();
  std::string v330;
  int v331;
  uint64_t v332;
  uint64_t (**v333)();
  std::string v334;
  int v335;
  char v336;
  std::string v337;
  uint64_t (**v338)();
  std::string v339;
  int v340;
  uint64_t v341;
  uint64_t (**v342)();
  std::string v343;
  int v344;
  uint64_t v345;
  uint64_t (**v346)();
  std::string v347;
  int v348;
  uint64_t v349;
  uint64_t (**v350)();
  std::string v351;
  int v352;
  uint64_t v353;
  uint64_t (**v354)();
  std::string v355;
  int v356;
  char v357;
  void (**v358)(mediaplatform::Data *__hidden);
  size_t v359;
  size_t v360;
  void *v361;
  char v362;
  uint64_t (**v363)();
  std::string v364;
  int v365;
  uint64_t v366;
  int v367;
  uint64_t (**v368)();
  std::string v369;
  int v370;
  char v371;
  std::string v372;
  uint64_t (**v373)();
  std::string v374;
  int v375;
  uint64_t v376;
  int v377;
  uint64_t (**v378)();
  std::string v379;
  int v380;
  uint64_t v381;
  int v382;
  uint64_t (**v383)();
  std::string v384;
  int v385;
  char v386;
  std::string v387;
  uint64_t (**v388)();
  std::string v389;
  int v390;
  uint64_t v391;
  uint64_t (**v392)();
  std::string v393;
  int v394;
  uint64_t v395;
  uint64_t (**v396)();
  std::string v397;
  int v398;
  uint64_t v399;
  uint64_t (**v400)();
  std::string v401;
  int v402;
  uint64_t v403;
  uint64_t (**v404)();
  std::string v405;
  int v406;
  uint64_t v407;
  uint64_t (**v408)();
  std::string v409;
  int v410;
  uint64_t v411;
  uint64_t (**v412)();
  std::string v413;
  int v414;
  uint64_t v415;
  uint64_t (**v416)();
  std::string v417;
  int v418;
  uint64_t v419;
  uint64_t (**v420)();
  std::string v421;
  int v422;
  uint64_t v423;
  int v424;
  uint64_t (**v425)();
  std::string v426;
  int v427;
  uint64_t v428;
  uint64_t (**v429)();
  std::string v430;
  int v431;
  uint64_t v432;
  uint64_t (**v433)();
  std::string v434;
  int v435;
  uint64_t v436;
  uint64_t (**v437)();
  std::string v438;
  int v439;
  uint64_t v440;
  uint64_t (**v441)();
  std::string v442;
  int v443;
  char v444;
  std::string v445;
  uint64_t (**v446)();
  std::string v447;
  int v448;
  char v449;
  std::string v450;
  uint64_t (**v451)();
  std::string v452;
  int v453;
  char v454;
  std::string v455;
  uint64_t (**v456)();
  std::string v457;
  int v458;
  char v459;
  std::string v460;

  v37 = MEMORY[0x24BDAC7A8](a1);
  v40 = v39;
  v42 = v41;
  v44 = v43;
  v46 = v45;
  v48 = v47;
  v49 = v38;
  v102 = v50;
  v51 = v37;
  if (*(char *)(v38 + 31) < 0)
    std::string::__init_copy_ctor_external(&v301, *(const std::string::value_type **)(v38 + 8), *(_QWORD *)(v38 + 16));
  else
    v301 = *(std::string *)(v38 + 8);
  v302 = *(_DWORD *)(v49 + 32);
  v300 = off_24C335AF8;
  v303 = *(_QWORD *)(v49 + 36);
  v295 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(v48 + 31) < 0)
    std::string::__init_copy_ctor_external(&__s, *(const std::string::value_type **)(v48 + 8), *(_QWORD *)(v48 + 16));
  else
    __s = *(std::string *)(v48 + 8);
  v297 = *(_DWORD *)(v48 + 32);
  v295 = &off_24C335AB8;
  v298 = *(_BYTE *)(v48 + 36);
  if (*(char *)(v48 + 63) < 0)
    std::string::__init_copy_ctor_external(&v299, *(const std::string::value_type **)(v48 + 40), *(_QWORD *)(v48 + 48));
  else
    v299 = *(std::string *)(v48 + 40);
  v290 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(v46 + 31) < 0)
    std::string::__init_copy_ctor_external(&v291, *(const std::string::value_type **)(v46 + 8), *(_QWORD *)(v46 + 16));
  else
    v291 = *(std::string *)(v46 + 8);
  v292 = *(_DWORD *)(v46 + 32);
  v290 = &off_24C335AB8;
  v293 = *(_BYTE *)(v46 + 36);
  if (*(char *)(v46 + 63) < 0)
    std::string::__init_copy_ctor_external(&v294, *(const std::string::value_type **)(v46 + 40), *(_QWORD *)(v46 + 48));
  else
    v294 = *(std::string *)(v46 + 40);
  v285 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(v44 + 31) < 0)
    std::string::__init_copy_ctor_external(&v286, *(const std::string::value_type **)(v44 + 8), *(_QWORD *)(v44 + 16));
  else
    v286 = *(std::string *)(v44 + 8);
  v287 = *(_DWORD *)(v44 + 32);
  v285 = &off_24C335AB8;
  v288 = *(_BYTE *)(v44 + 36);
  if (*(char *)(v44 + 63) < 0)
    std::string::__init_copy_ctor_external(&v289, *(const std::string::value_type **)(v44 + 40), *(_QWORD *)(v44 + 48));
  else
    v289 = *(std::string *)(v44 + 40);
  v280 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(v42 + 31) < 0)
    std::string::__init_copy_ctor_external(&v281, *(const std::string::value_type **)(v42 + 8), *(_QWORD *)(v42 + 16));
  else
    v281 = *(std::string *)(v42 + 8);
  v282 = *(_DWORD *)(v42 + 32);
  v280 = &off_24C335AB8;
  v283 = *(_BYTE *)(v42 + 36);
  if (*(char *)(v42 + 63) < 0)
    std::string::__init_copy_ctor_external(&v284, *(const std::string::value_type **)(v42 + 40), *(_QWORD *)(v42 + 48));
  else
    v284 = *(std::string *)(v42 + 40);
  if (*(char *)(v40 + 31) < 0)
    std::string::__init_copy_ctor_external(&v277, *(const std::string::value_type **)(v40 + 8), *(_QWORD *)(v40 + 16));
  else
    v277 = *(std::string *)(v40 + 8);
  v137 = *(_DWORD *)(v40 + 32);
  v278 = v137;
  v276 = off_24C335AF8;
  v135 = *(_QWORD *)(v40 + 36);
  v279 = v135;
  if (*(char *)(a9 + 31) < 0)
    std::string::__init_copy_ctor_external(&v273, *(const std::string::value_type **)(a9 + 8), *(_QWORD *)(a9 + 16));
  else
    v273 = *(std::string *)(a9 + 8);
  v133 = *(_DWORD *)(a9 + 32);
  v274 = v133;
  v272 = off_24C335AF8;
  v131 = *(_QWORD *)(a9 + 36);
  v275 = v131;
  if (*(char *)(a10 + 31) < 0)
    std::string::__init_copy_ctor_external(&v269, *(const std::string::value_type **)(a10 + 8), *(_QWORD *)(a10 + 16));
  else
    v269 = *(std::string *)(a10 + 8);
  v129 = *(_DWORD *)(a10 + 32);
  v270 = v129;
  v268 = off_24C335AF8;
  v127 = *(_QWORD *)(a10 + 36);
  v271 = v127;
  if (*(char *)(a11 + 31) < 0)
    std::string::__init_copy_ctor_external(&v265, *(const std::string::value_type **)(a11 + 8), *(_QWORD *)(a11 + 16));
  else
    v265 = *(std::string *)(a11 + 8);
  v125 = *(_DWORD *)(a11 + 32);
  v266 = v125;
  v264 = off_24C335AF8;
  v123 = *(_QWORD *)(a11 + 36);
  v267 = v123;
  if (*(char *)(a12 + 31) < 0)
    std::string::__init_copy_ctor_external(&v260, *(const std::string::value_type **)(a12 + 8), *(_QWORD *)(a12 + 16));
  else
    v260 = *(std::string *)(a12 + 8);
  v52 = *(_DWORD *)(a12 + 32);
  v259 = off_24C335B18;
  v262 = *(_QWORD *)(a12 + 36);
  v53 = *(_DWORD *)(a12 + 44);
  v121 = v52;
  v261 = v52;
  v263 = v53;
  if (*(char *)(a13 + 31) < 0)
    std::string::__init_copy_ctor_external(&v256, *(const std::string::value_type **)(a13 + 8), *(_QWORD *)(a13 + 16));
  else
    v256 = *(std::string *)(a13 + 8);
  v119 = *(_DWORD *)(a13 + 32);
  v257 = v119;
  v255 = off_24C335AF8;
  v118 = *(_QWORD *)(a13 + 36);
  v258 = v118;
  if (*(char *)(a14 + 31) < 0)
    std::string::__init_copy_ctor_external(&v252, *(const std::string::value_type **)(a14 + 8), *(_QWORD *)(a14 + 16));
  else
    v252 = *(std::string *)(a14 + 8);
  v117 = *(_DWORD *)(a14 + 32);
  v253 = v117;
  v251 = off_24C335AF8;
  v116 = *(_QWORD *)(a14 + 36);
  v254 = v116;
  if (*(char *)(a15 + 31) < 0)
    std::string::__init_copy_ctor_external(&v248, *(const std::string::value_type **)(a15 + 8), *(_QWORD *)(a15 + 16));
  else
    v248 = *(std::string *)(a15 + 8);
  v115 = *(_DWORD *)(a15 + 32);
  v249 = v115;
  v247 = off_24C335AF8;
  v114 = *(_QWORD *)(a15 + 36);
  v250 = v114;
  if (*(char *)(a16 + 31) < 0)
    std::string::__init_copy_ctor_external(&v244, *(const std::string::value_type **)(a16 + 8), *(_QWORD *)(a16 + 16));
  else
    v244 = *(std::string *)(a16 + 8);
  v113 = *(_DWORD *)(a16 + 32);
  v245 = v113;
  v243 = off_24C335AF8;
  v112 = *(_QWORD *)(a16 + 36);
  v246 = v112;
  if (*(char *)(a17 + 31) < 0)
    std::string::__init_copy_ctor_external(&v240, *(const std::string::value_type **)(a17 + 8), *(_QWORD *)(a17 + 16));
  else
    v240 = *(std::string *)(a17 + 8);
  v111 = *(_DWORD *)(a17 + 32);
  v241 = v111;
  v239 = off_24C335AF8;
  v110 = *(_QWORD *)(a17 + 36);
  v242 = v110;
  if (*(char *)(a18 + 31) < 0)
    std::string::__init_copy_ctor_external(&v236, *(const std::string::value_type **)(a18 + 8), *(_QWORD *)(a18 + 16));
  else
    v236 = *(std::string *)(a18 + 8);
  v109 = *(_DWORD *)(a18 + 32);
  v237 = v109;
  v235 = off_24C335AF8;
  v108 = *(_QWORD *)(a18 + 36);
  v238 = v108;
  if (*(char *)(a19 + 31) < 0)
    std::string::__init_copy_ctor_external(&v232, *(const std::string::value_type **)(a19 + 8), *(_QWORD *)(a19 + 16));
  else
    v232 = *(std::string *)(a19 + 8);
  v107 = *(_DWORD *)(a19 + 32);
  v233 = v107;
  v231 = off_24C335AF8;
  v106 = *(_QWORD *)(a19 + 36);
  v234 = v106;
  if (*(char *)(a20 + 31) < 0)
    std::string::__init_copy_ctor_external(&v228, *(const std::string::value_type **)(a20 + 8), *(_QWORD *)(a20 + 16));
  else
    v228 = *(std::string *)(a20 + 8);
  v105 = *(_DWORD *)(a20 + 32);
  v229 = v105;
  v227 = off_24C335AF8;
  v104 = *(_QWORD *)(a20 + 36);
  v230 = v104;
  v222 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a21 + 31) < 0)
    std::string::__init_copy_ctor_external(&v223, *(const std::string::value_type **)(a21 + 8), *(_QWORD *)(a21 + 16));
  else
    v223 = *(std::string *)(a21 + 8);
  v224 = *(_DWORD *)(a21 + 32);
  v222 = &off_24C335AB8;
  v225 = *(_BYTE *)(a21 + 36);
  if (*(char *)(a21 + 63) < 0)
    std::string::__init_copy_ctor_external(&v226, *(const std::string::value_type **)(a21 + 40), *(_QWORD *)(a21 + 48));
  else
    v226 = *(std::string *)(a21 + 40);
  if (*(char *)(a22 + 31) < 0)
    std::string::__init_copy_ctor_external(&v218, *(const std::string::value_type **)(a22 + 8), *(_QWORD *)(a22 + 16));
  else
    v218 = *(std::string *)(a22 + 8);
  v54 = *(_DWORD *)(a22 + 32);
  v217 = off_24C335B18;
  v220 = *(_QWORD *)(a22 + 36);
  v55 = *(_DWORD *)(a22 + 44);
  v103 = v54;
  v219 = v54;
  v221 = v55;
  if (*(char *)(a23 + 31) < 0)
    std::string::__init_copy_ctor_external(&v213, *(const std::string::value_type **)(a23 + 8), *(_QWORD *)(a23 + 16));
  else
    v213 = *(std::string *)(a23 + 8);
  v56 = *(_DWORD *)(a23 + 32);
  v212 = off_24C335B18;
  v215 = *(_QWORD *)(a23 + 36);
  v57 = *(_DWORD *)(a23 + 44);
  v101 = v56;
  v214 = v56;
  v216 = v57;
  v207 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a24 + 31) < 0)
    std::string::__init_copy_ctor_external(&v208, *(const std::string::value_type **)(a24 + 8), *(_QWORD *)(a24 + 16));
  else
    v208 = *(std::string *)(a24 + 8);
  v209 = *(_DWORD *)(a24 + 32);
  v207 = &off_24C335AB8;
  v210 = *(_BYTE *)(a24 + 36);
  if (*(char *)(a24 + 63) < 0)
    std::string::__init_copy_ctor_external(&v211, *(const std::string::value_type **)(a24 + 40), *(_QWORD *)(a24 + 48));
  else
    v211 = *(std::string *)(a24 + 40);
  if (*(char *)(a25 + 31) < 0)
    std::string::__init_copy_ctor_external(&v203, *(const std::string::value_type **)(a25 + 8), *(_QWORD *)(a25 + 16));
  else
    v203 = *(std::string *)(a25 + 8);
  v58 = *(_DWORD *)(a25 + 32);
  v202 = off_24C335B18;
  v205 = *(_QWORD *)(a25 + 36);
  v59 = *(_DWORD *)(a25 + 44);
  v100 = v58;
  v204 = v58;
  v206 = v59;
  v193 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a26 + 31) < 0)
    std::string::__init_copy_ctor_external(&v194, *(const std::string::value_type **)(a26 + 8), *(_QWORD *)(a26 + 16));
  else
    v194 = *(std::string *)(a26 + 8);
  v195 = *(_DWORD *)(a26 + 32);
  v193 = &off_24C335A98;
  v196 = *(_BYTE *)(a26 + 36);
  v60 = *(const void **)(a26 + 64);
  v61 = *(_QWORD *)(a26 + 48);
  v197 = &off_24C331510;
  v198 = v61;
  v199 = v61;
  if (v61)
    v62 = (void *)operator new[]();
  else
    v62 = 0;
  v200 = v62;
  v201 = 1;
  if (v60)
    memcpy(v62, v60, v61);
  else
    bzero(v62, v61);
  if (*(char *)(a27 + 31) < 0)
    std::string::__init_copy_ctor_external(&v190, *(const std::string::value_type **)(a27 + 8), *(_QWORD *)(a27 + 16));
  else
    v190 = *(std::string *)(a27 + 8);
  v99 = *(_DWORD *)(a27 + 32);
  v191 = v99;
  v189 = off_24C335AF8;
  v98 = *(_QWORD *)(a27 + 36);
  v192 = v98;
  if (*(char *)(a28 + 31) < 0)
    std::string::__init_copy_ctor_external(&v186, *(const std::string::value_type **)(a28 + 8), *(_QWORD *)(a28 + 16));
  else
    v186 = *(std::string *)(a28 + 8);
  v97 = *(_DWORD *)(a28 + 32);
  v187 = v97;
  v185 = off_24C335AF8;
  v96 = *(_QWORD *)(a28 + 36);
  v188 = v96;
  if (*(char *)(a29 + 31) < 0)
    std::string::__init_copy_ctor_external(&v182, *(const std::string::value_type **)(a29 + 8), *(_QWORD *)(a29 + 16));
  else
    v182 = *(std::string *)(a29 + 8);
  v95 = *(_DWORD *)(a29 + 32);
  v183 = v95;
  v181 = off_24C335AF8;
  v94 = *(_QWORD *)(a29 + 36);
  v184 = v94;
  if (*(char *)(a30 + 31) < 0)
    std::string::__init_copy_ctor_external(&v178, *(const std::string::value_type **)(a30 + 8), *(_QWORD *)(a30 + 16));
  else
    v178 = *(std::string *)(a30 + 8);
  v93 = *(_DWORD *)(a30 + 32);
  v179 = v93;
  v177 = off_24C335AF8;
  v92 = *(_QWORD *)(a30 + 36);
  v180 = v92;
  v172 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a31 + 31) < 0)
    std::string::__init_copy_ctor_external(&v173, *(const std::string::value_type **)(a31 + 8), *(_QWORD *)(a31 + 16));
  else
    v173 = *(std::string *)(a31 + 8);
  v174 = *(_DWORD *)(a31 + 32);
  v172 = &off_24C335AB8;
  v175 = *(_BYTE *)(a31 + 36);
  if (*(char *)(a31 + 63) < 0)
    std::string::__init_copy_ctor_external(&v176, *(const std::string::value_type **)(a31 + 40), *(_QWORD *)(a31 + 48));
  else
    v176 = *(std::string *)(a31 + 40);
  if (*(char *)(a32 + 31) < 0)
    std::string::__init_copy_ctor_external(&v169, *(const std::string::value_type **)(a32 + 8), *(_QWORD *)(a32 + 16));
  else
    v169 = *(std::string *)(a32 + 8);
  v91 = *(_DWORD *)(a32 + 32);
  v170 = v91;
  v168 = off_24C335AF8;
  v90 = *(_QWORD *)(a32 + 36);
  v171 = v90;
  if (*(char *)(a33 + 31) < 0)
    std::string::__init_copy_ctor_external(&v164, *(const std::string::value_type **)(a33 + 8), *(_QWORD *)(a33 + 16));
  else
    v164 = *(std::string *)(a33 + 8);
  v63 = *(_DWORD *)(a33 + 32);
  v163 = off_24C335B18;
  v166 = *(_QWORD *)(a33 + 36);
  v64 = *(_DWORD *)(a33 + 44);
  v89 = v63;
  v165 = v63;
  v167 = v64;
  if (*(char *)(a34 + 31) < 0)
    std::string::__init_copy_ctor_external(&v159, *(const std::string::value_type **)(a34 + 8), *(_QWORD *)(a34 + 16));
  else
    v159 = *(std::string *)(a34 + 8);
  v65 = *(_DWORD *)(a34 + 32);
  v158 = off_24C335B18;
  v161 = *(_QWORD *)(a34 + 36);
  v66 = *(_DWORD *)(a34 + 44);
  v88 = v65;
  v160 = v65;
  v162 = v66;
  v153 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a35 + 31) < 0)
    std::string::__init_copy_ctor_external(&v154, *(const std::string::value_type **)(a35 + 8), *(_QWORD *)(a35 + 16));
  else
    v154 = *(std::string *)(a35 + 8);
  v155 = *(_DWORD *)(a35 + 32);
  v153 = &off_24C335AB8;
  v156 = *(_BYTE *)(a35 + 36);
  if (*(char *)(a35 + 63) < 0)
    std::string::__init_copy_ctor_external(&v157, *(const std::string::value_type **)(a35 + 40), *(_QWORD *)(a35 + 48));
  else
    v157 = *(std::string *)(a35 + 40);
  v148 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a36 + 31) < 0)
    std::string::__init_copy_ctor_external(&v149, *(const std::string::value_type **)(a36 + 8), *(_QWORD *)(a36 + 16));
  else
    v149 = *(std::string *)(a36 + 8);
  v150 = *(_DWORD *)(a36 + 32);
  v148 = &off_24C335AB8;
  v151 = *(_BYTE *)(a36 + 36);
  if (*(char *)(a36 + 63) < 0)
    std::string::__init_copy_ctor_external(&v152, *(const std::string::value_type **)(a36 + 40), *(_QWORD *)(a36 + 48));
  else
    v152 = *(std::string *)(a36 + 40);
  v143 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a37 + 31) < 0)
    std::string::__init_copy_ctor_external(&v144, *(const std::string::value_type **)(a37 + 8), *(_QWORD *)(a37 + 16));
  else
    v144 = *(std::string *)(a37 + 8);
  v145 = *(_DWORD *)(a37 + 32);
  v143 = &off_24C335AB8;
  v146 = *(_BYTE *)(a37 + 36);
  if (*(char *)(a37 + 63) < 0)
    std::string::__init_copy_ctor_external(&v147, *(const std::string::value_type **)(a37 + 40), *(_QWORD *)(a37 + 48));
  else
    v147 = *(std::string *)(a37 + 40);
  v456 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v457, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
  else
    v457 = __s;
  v458 = v297;
  v456 = &off_24C335AB8;
  v459 = v298;
  if (SHIBYTE(v299.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v460, v299.__r_.__value_.__l.__data_, v299.__r_.__value_.__l.__size_);
  else
    v460 = v299;
  v451 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v291.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v452, v291.__r_.__value_.__l.__data_, v291.__r_.__value_.__l.__size_);
  else
    v452 = v291;
  v453 = v292;
  v451 = &off_24C335AB8;
  v454 = v293;
  if (SHIBYTE(v294.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v455, v294.__r_.__value_.__l.__data_, v294.__r_.__value_.__l.__size_);
  else
    v455 = v294;
  v446 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v286.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v447, v286.__r_.__value_.__l.__data_, v286.__r_.__value_.__l.__size_);
  else
    v447 = v286;
  v448 = v287;
  v446 = &off_24C335AB8;
  v449 = v288;
  if (SHIBYTE(v289.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v450, v289.__r_.__value_.__l.__data_, v289.__r_.__value_.__l.__size_);
  else
    v450 = v289;
  v441 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v281.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v442, v281.__r_.__value_.__l.__data_, v281.__r_.__value_.__l.__size_);
  else
    v442 = v281;
  v443 = v282;
  v441 = &off_24C335AB8;
  v444 = v283;
  if (SHIBYTE(v284.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v445, v284.__r_.__value_.__l.__data_, v284.__r_.__value_.__l.__size_);
  else
    v445 = v284;
  v437 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v277.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v438, v277.__r_.__value_.__l.__data_, v277.__r_.__value_.__l.__size_);
  else
    v438 = v277;
  v439 = v137;
  v437 = off_24C335AF8;
  v440 = v135;
  v433 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v273.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v434, v273.__r_.__value_.__l.__data_, v273.__r_.__value_.__l.__size_);
  else
    v434 = v273;
  v435 = v133;
  v433 = off_24C335AF8;
  v436 = v131;
  v429 = (uint64_t (**)())off_24C335D90;
  v67 = SHIBYTE(v269.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v269.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v430, v269.__r_.__value_.__l.__data_, v269.__r_.__value_.__l.__size_);
  else
    v430 = v269;
  v431 = v129;
  v429 = off_24C335AF8;
  v432 = v127;
  v425 = (uint64_t (**)())off_24C335D90;
  v68 = SHIBYTE(v265.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v265.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v426, v265.__r_.__value_.__l.__data_, v265.__r_.__value_.__l.__size_);
  else
    v426 = v265;
  v427 = v125;
  v425 = off_24C335AF8;
  v428 = v123;
  v420 = (uint64_t (**)())off_24C335D90;
  v142 = SHIBYTE(v260.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v260.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v421, v260.__r_.__value_.__l.__data_, v260.__r_.__value_.__l.__size_);
  else
    v421 = v260;
  v420 = off_24C335B18;
  v423 = v262;
  v422 = v121;
  v424 = v263;
  v416 = (uint64_t (**)())off_24C335D90;
  v141 = SHIBYTE(v256.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v256.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v417, v256.__r_.__value_.__l.__data_, v256.__r_.__value_.__l.__size_);
  else
    v417 = v256;
  v418 = v119;
  v416 = off_24C335AF8;
  v419 = v118;
  v412 = (uint64_t (**)())off_24C335D90;
  v140 = SHIBYTE(v252.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v252.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v413, v252.__r_.__value_.__l.__data_, v252.__r_.__value_.__l.__size_);
  else
    v413 = v252;
  v414 = v117;
  v412 = off_24C335AF8;
  v415 = v116;
  v408 = (uint64_t (**)())off_24C335D90;
  v139 = SHIBYTE(v248.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v248.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v409, v248.__r_.__value_.__l.__data_, v248.__r_.__value_.__l.__size_);
  else
    v409 = v248;
  v410 = v115;
  v408 = off_24C335AF8;
  v411 = v114;
  v404 = (uint64_t (**)())off_24C335D90;
  v138 = SHIBYTE(v244.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v244.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v405, v244.__r_.__value_.__l.__data_, v244.__r_.__value_.__l.__size_);
  else
    v405 = v244;
  v406 = v113;
  v404 = off_24C335AF8;
  v407 = v112;
  v400 = (uint64_t (**)())off_24C335D90;
  v136 = SHIBYTE(v240.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v240.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v401, v240.__r_.__value_.__l.__data_, v240.__r_.__value_.__l.__size_);
  else
    v401 = v240;
  v402 = v111;
  v400 = off_24C335AF8;
  v403 = v110;
  v396 = (uint64_t (**)())off_24C335D90;
  v69 = SHIBYTE(v236.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v236.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v397, v236.__r_.__value_.__l.__data_, v236.__r_.__value_.__l.__size_);
  else
    v397 = v236;
  v398 = v109;
  v396 = off_24C335AF8;
  v399 = v108;
  v392 = (uint64_t (**)())off_24C335D90;
  v70 = SHIBYTE(v232.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v232.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v393, v232.__r_.__value_.__l.__data_, v232.__r_.__value_.__l.__size_);
  else
    v393 = v232;
  v394 = v107;
  v392 = off_24C335AF8;
  v395 = v106;
  v388 = (uint64_t (**)())off_24C335D90;
  v134 = SHIBYTE(v228.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v228.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v389, v228.__r_.__value_.__l.__data_, v228.__r_.__value_.__l.__size_);
  else
    v389 = v228;
  v390 = v105;
  v388 = off_24C335AF8;
  v391 = v104;
  v383 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v223.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v384, v223.__r_.__value_.__l.__data_, v223.__r_.__value_.__l.__size_);
  else
    v384 = v223;
  v385 = v224;
  v383 = &off_24C335AB8;
  v386 = v225;
  if (SHIBYTE(v226.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v387, v226.__r_.__value_.__l.__data_, v226.__r_.__value_.__l.__size_);
  else
    v387 = v226;
  v378 = (uint64_t (**)())off_24C335D90;
  v132 = SHIBYTE(v218.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v218.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v379, v218.__r_.__value_.__l.__data_, v218.__r_.__value_.__l.__size_);
  else
    v379 = v218;
  v378 = off_24C335B18;
  v381 = v220;
  v380 = v103;
  v382 = v221;
  v373 = (uint64_t (**)())off_24C335D90;
  v130 = SHIBYTE(v213.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v213.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v374, v213.__r_.__value_.__l.__data_, v213.__r_.__value_.__l.__size_);
  else
    v374 = v213;
  v373 = off_24C335B18;
  v376 = v215;
  v375 = v101;
  v377 = v216;
  v368 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v208.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v369, v208.__r_.__value_.__l.__data_, v208.__r_.__value_.__l.__size_);
  else
    v369 = v208;
  v370 = v209;
  v368 = &off_24C335AB8;
  v371 = v210;
  if (SHIBYTE(v211.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v372, v211.__r_.__value_.__l.__data_, v211.__r_.__value_.__l.__size_);
  else
    v372 = v211;
  v363 = (uint64_t (**)())off_24C335D90;
  v128 = SHIBYTE(v203.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v203.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v364, v203.__r_.__value_.__l.__data_, v203.__r_.__value_.__l.__size_);
  else
    v364 = v203;
  v363 = off_24C335B18;
  v366 = v205;
  v365 = v100;
  v367 = v206;
  v354 = (uint64_t (**)())off_24C335D90;
  v87 = v68;
  v126 = v70;
  if (SHIBYTE(v194.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v355, v194.__r_.__value_.__l.__data_, v194.__r_.__value_.__l.__size_);
  else
    v355 = v194;
  v356 = v195;
  v354 = &off_24C335A98;
  v357 = v196;
  v71 = v200;
  v72 = v198;
  v358 = &off_24C331510;
  v359 = v198;
  v360 = v198;
  if (v198)
    v73 = (void *)operator new[]();
  else
    v73 = 0;
  v361 = v73;
  v362 = 1;
  if (v71)
    memcpy(v73, v71, v72);
  else
    bzero(v73, v72);
  v350 = (uint64_t (**)())off_24C335D90;
  v74 = SHIBYTE(v190.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v190.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v351, v190.__r_.__value_.__l.__data_, v190.__r_.__value_.__l.__size_);
  else
    v351 = v190;
  v352 = v99;
  v350 = off_24C335AF8;
  v353 = v98;
  v346 = (uint64_t (**)())off_24C335D90;
  v75 = SHIBYTE(v186.__r_.__value_.__r.__words[2]);
  v86 = v67;
  if (SHIBYTE(v186.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v347, v186.__r_.__value_.__l.__data_, v186.__r_.__value_.__l.__size_);
  else
    v347 = v186;
  v348 = v97;
  v346 = off_24C335AF8;
  v349 = v96;
  v342 = (uint64_t (**)())off_24C335D90;
  v76 = SHIBYTE(v182.__r_.__value_.__r.__words[2]);
  v124 = v69;
  if (SHIBYTE(v182.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v343, v182.__r_.__value_.__l.__data_, v182.__r_.__value_.__l.__size_);
  else
    v343 = v182;
  v344 = v95;
  v342 = off_24C335AF8;
  v345 = v94;
  v338 = (uint64_t (**)())off_24C335D90;
  v77 = SHIBYTE(v178.__r_.__value_.__r.__words[2]);
  v122 = v75;
  if (SHIBYTE(v178.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v339, v178.__r_.__value_.__l.__data_, v178.__r_.__value_.__l.__size_);
  else
    v339 = v178;
  v340 = v93;
  v338 = off_24C335AF8;
  v341 = v92;
  v333 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v173.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v334, v173.__r_.__value_.__l.__data_, v173.__r_.__value_.__l.__size_);
  else
    v334 = v173;
  v335 = v174;
  v333 = &off_24C335AB8;
  v336 = v175;
  if (SHIBYTE(v176.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v337, v176.__r_.__value_.__l.__data_, v176.__r_.__value_.__l.__size_);
  else
    v337 = v176;
  v329 = (uint64_t (**)())off_24C335D90;
  v78 = SHIBYTE(v169.__r_.__value_.__r.__words[2]);
  v120 = v74;
  if (SHIBYTE(v169.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v330, v169.__r_.__value_.__l.__data_, v169.__r_.__value_.__l.__size_);
  else
    v330 = v169;
  v331 = v91;
  v329 = off_24C335AF8;
  v332 = v90;
  v324 = (uint64_t (**)())off_24C335D90;
  v79 = SHIBYTE(v164.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v164.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v325, v164.__r_.__value_.__l.__data_, v164.__r_.__value_.__l.__size_);
  else
    v325 = v164;
  v324 = off_24C335B18;
  v327 = v166;
  v326 = v89;
  v328 = v167;
  v319 = (uint64_t (**)())off_24C335D90;
  v80 = SHIBYTE(v159.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v159.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&__p, v159.__r_.__value_.__l.__data_, v159.__r_.__value_.__l.__size_);
  else
    __p = v159;
  v319 = off_24C335B18;
  v322 = v161;
  v321 = v88;
  v323 = v162;
  v314 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v154.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v315, v154.__r_.__value_.__l.__data_, v154.__r_.__value_.__l.__size_);
  else
    v315 = v154;
  v316 = v155;
  v314 = &off_24C335AB8;
  v317 = v156;
  if (SHIBYTE(v157.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v318, v157.__r_.__value_.__l.__data_, v157.__r_.__value_.__l.__size_);
  else
    v318 = v157;
  v309 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v149.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v310, v149.__r_.__value_.__l.__data_, v149.__r_.__value_.__l.__size_);
  else
    v310 = v149;
  v311 = v150;
  v309 = &off_24C335AB8;
  v312 = v151;
  if (SHIBYTE(v152.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v313, v152.__r_.__value_.__l.__data_, v152.__r_.__value_.__l.__size_);
  else
    v313 = v152;
  v304 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v144.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v305, v144.__r_.__value_.__l.__data_, v144.__r_.__value_.__l.__size_);
  else
    v305 = v144;
  v306 = v145;
  v304 = &off_24C335AB8;
  v307 = v146;
  if (SHIBYTE(v147.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v308, v147.__r_.__value_.__l.__data_, v147.__r_.__value_.__l.__size_);
  else
    v308 = v147;
  mediaplatform::DatabaseColumnTuple<5ul,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>>::DatabaseColumnTuple(v51, (uint64_t)&v456, (uint64_t)&v451, (uint64_t)&v446, (uint64_t)&v441, (uint64_t)&v437, (uint64_t)&v433, (uint64_t)&v429, (uint64_t)&v425, (uint64_t)&v420, (uint64_t)&v416, (uint64_t)&v412, (uint64_t)&v408, (uint64_t)&v404, (uint64_t)&v400, (uint64_t)&v396, (uint64_t)&v392, (uint64_t)&v388, (uint64_t)&v383,
    (uint64_t)&v378,
    (uint64_t)&v373,
    (uint64_t)&v368,
    (uint64_t)&v363,
    (uint64_t)&v354,
    (uint64_t)&v350,
    (uint64_t)&v346,
    (uint64_t)&v342,
    (uint64_t)&v338,
    (uint64_t)&v333,
    (uint64_t)&v329,
    (uint64_t)&v324,
    (uint64_t)&v319,
    (uint64_t)&v314,
    (uint64_t)&v309,
    (uint64_t)&v304);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v304);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v309);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v314);
  v319 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v324 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v325.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v325.__r_.__value_.__l.__data_);
  v329 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v330.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v330.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v333);
  v338 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v339.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v339.__r_.__value_.__l.__data_);
  v342 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v343.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v343.__r_.__value_.__l.__data_);
  v346 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v347.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v347.__r_.__value_.__l.__data_);
  v350 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v351.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v351.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<mediaplatform::Data>::~DatabaseColumn((uint64_t)&v354);
  v363 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v364.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v364.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v368);
  v373 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v374.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v374.__r_.__value_.__l.__data_);
  v378 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v379.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v379.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v383);
  v388 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v389.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v389.__r_.__value_.__l.__data_);
  v392 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v393.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v393.__r_.__value_.__l.__data_);
  v396 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v397.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v397.__r_.__value_.__l.__data_);
  v400 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v401.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v401.__r_.__value_.__l.__data_);
  v404 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v405.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v405.__r_.__value_.__l.__data_);
  v408 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v409.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v409.__r_.__value_.__l.__data_);
  v412 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v413.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v413.__r_.__value_.__l.__data_);
  v416 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v417.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v417.__r_.__value_.__l.__data_);
  v420 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v421.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v421.__r_.__value_.__l.__data_);
  v425 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v426.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v426.__r_.__value_.__l.__data_);
  v429 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v430.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v430.__r_.__value_.__l.__data_);
  v433 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v434.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v434.__r_.__value_.__l.__data_);
  v437 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v438.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v438.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v441);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v446);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v451);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v456);
  *(_QWORD *)(v51 + 1824) = off_24C335D90;
  v81 = (std::string *)(v51 + 1832);
  v82 = SHIBYTE(v301.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v301.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v81, v301.__r_.__value_.__l.__data_, v301.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v81->__r_.__value_.__l.__data_ = *(_OWORD *)&v301.__r_.__value_.__l.__data_;
    *(_QWORD *)(v51 + 1848) = *((_QWORD *)&v301.__r_.__value_.__l + 2);
  }
  *(_DWORD *)(v51 + 1856) = v302;
  *(_QWORD *)(v51 + 1824) = off_24C335AF8;
  *(_QWORD *)(v51 + 1860) = v303;
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v143);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v148);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v153);
  if ((v80 & 0x80000000) == 0)
  {
    if ((v79 & 0x80000000) == 0)
      goto LABEL_331;
LABEL_371:
    operator delete(v164.__r_.__value_.__l.__data_);
    if ((v78 & 0x80000000) == 0)
      goto LABEL_332;
    goto LABEL_372;
  }
  operator delete(v159.__r_.__value_.__l.__data_);
  if (v79 < 0)
    goto LABEL_371;
LABEL_331:
  if ((v78 & 0x80000000) == 0)
    goto LABEL_332;
LABEL_372:
  operator delete(v169.__r_.__value_.__l.__data_);
LABEL_332:
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v172);
  if (v77 < 0)
  {
    operator delete(v178.__r_.__value_.__l.__data_);
    if ((v76 & 0x80000000) == 0)
      goto LABEL_334;
  }
  else if ((v76 & 0x80000000) == 0)
  {
    goto LABEL_334;
  }
  operator delete(v182.__r_.__value_.__l.__data_);
LABEL_334:
  if (v122 < 0)
    operator delete(v186.__r_.__value_.__l.__data_);
  if (v120 < 0)
    operator delete(v190.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<mediaplatform::Data>::~DatabaseColumn((uint64_t)&v193);
  if (v128 < 0)
    operator delete(v203.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v207);
  if (v130 < 0)
    operator delete(v213.__r_.__value_.__l.__data_);
  if (v132 < 0)
    operator delete(v218.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v222);
  if (v134 < 0)
    operator delete(v228.__r_.__value_.__l.__data_);
  if (v126 < 0)
  {
    operator delete(v232.__r_.__value_.__l.__data_);
    if ((v124 & 0x80000000) == 0)
      goto LABEL_348;
  }
  else if ((v124 & 0x80000000) == 0)
  {
    goto LABEL_348;
  }
  operator delete(v236.__r_.__value_.__l.__data_);
LABEL_348:
  if (v136 < 0)
    operator delete(v240.__r_.__value_.__l.__data_);
  if (v138 < 0)
    operator delete(v244.__r_.__value_.__l.__data_);
  if (v139 < 0)
    operator delete(v248.__r_.__value_.__l.__data_);
  if (v140 < 0)
    operator delete(v252.__r_.__value_.__l.__data_);
  if (v141 < 0)
    operator delete(v256.__r_.__value_.__l.__data_);
  if (v142 < 0)
    operator delete(v260.__r_.__value_.__l.__data_);
  if (v87 < 0)
  {
    operator delete(v265.__r_.__value_.__l.__data_);
    if ((v86 & 0x80000000) == 0)
      goto LABEL_362;
  }
  else if ((v86 & 0x80000000) == 0)
  {
    goto LABEL_362;
  }
  operator delete(v269.__r_.__value_.__l.__data_);
LABEL_362:
  if (SHIBYTE(v273.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v273.__r_.__value_.__l.__data_);
  if (SHIBYTE(v277.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v277.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v280);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v285);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v290);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v295);
  if (v82 < 0)
    operator delete(v301.__r_.__value_.__l.__data_);
  *(_QWORD *)(v51 + 1872) = off_24C335D90;
  v83 = (std::string *)(v51 + 1880);
  if (*(char *)(v102 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v83, *(const std::string::value_type **)(v102 + 8), *(_QWORD *)(v102 + 16));
  }
  else
  {
    v84 = *(_OWORD *)(v102 + 8);
    *(_QWORD *)(v51 + 1896) = *(_QWORD *)(v102 + 24);
    *(_OWORD *)&v83->__r_.__value_.__l.__data_ = v84;
  }
  *(_DWORD *)(v51 + 1904) = *(_DWORD *)(v102 + 32);
  *(_QWORD *)(v51 + 1872) = off_24C335AF8;
  *(_QWORD *)(v51 + 1908) = *(_QWORD *)(v102 + 36);
  return v51;
}

void sub_20A8273DC(_Unwind_Exception *a1)
{
  uint64_t v1;

  mediaplatform::DatabaseColumnTuple<4ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>>::~DatabaseColumnTuple(v1);
  _Unwind_Resume(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<3ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>>::~DatabaseColumnTuple(uint64_t a1)
{
  *(_QWORD *)(a1 + 1872) = off_24C335D90;
  if (*(char *)(a1 + 1903) < 0)
    operator delete(*(void **)(a1 + 1880));
  return mediaplatform::DatabaseColumnTuple<4ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>>::~DatabaseColumnTuple(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<5ul,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>>::DatabaseColumnTuple(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35)
{
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  int v52;
  int v53;
  int v54;
  int v55;
  int v56;
  int v57;
  int v58;
  const void *v59;
  size_t v60;
  void *v61;
  uint64_t v62;
  int v63;
  int v64;
  int v65;
  int v66;
  int v67;
  int v68;
  int v69;
  const void *v70;
  size_t v71;
  void *v72;
  int v73;
  int v74;
  int v75;
  int v76;
  int v77;
  int v78;
  int v79;
  std::string *v80;
  __int128 v81;
  std::string *v82;
  __int128 v83;
  int v85;
  int v86;
  int v87;
  uint64_t v88;
  int v89;
  uint64_t v90;
  int v91;
  uint64_t v92;
  int v93;
  uint64_t v94;
  int v95;
  uint64_t v96;
  int v97;
  int v98;
  uint64_t v99;
  int v100;
  int v101;
  uint64_t v102;
  int v103;
  uint64_t v104;
  int v105;
  uint64_t v106;
  int v107;
  uint64_t v108;
  int v109;
  uint64_t v110;
  int v111;
  uint64_t v112;
  int v113;
  uint64_t v114;
  int v115;
  int v116;
  uint64_t v117;
  int v118;
  int v119;
  int v120;
  int v121;
  int v122;
  uint64_t v123;
  int v124;
  int v125;
  int v126;
  uint64_t v127;
  int v128;
  int v129;
  int v130;
  uint64_t v131;
  int v132;
  int v133;
  int v134;
  uint64_t v135;
  int v136;
  int v137;
  int v138;
  int v139;
  uint64_t (**v140)();
  std::string v141;
  int v142;
  char v143;
  std::string v144;
  uint64_t (**v145)();
  std::string v146;
  int v147;
  char v148;
  std::string v149;
  uint64_t (**v150)();
  std::string v151;
  int v152;
  char v153;
  std::string v154;
  uint64_t (**v155)();
  std::string v156;
  int v157;
  uint64_t v158;
  int v159;
  uint64_t (**v160)();
  std::string v161;
  int v162;
  uint64_t v163;
  int v164;
  uint64_t (**v165)();
  std::string v166;
  int v167;
  uint64_t v168;
  uint64_t (**v169)();
  std::string v170;
  int v171;
  char v172;
  std::string v173;
  uint64_t (**v174)();
  std::string v175;
  int v176;
  uint64_t v177;
  uint64_t (**v178)();
  std::string v179;
  int v180;
  uint64_t v181;
  uint64_t (**v182)();
  std::string v183;
  int v184;
  uint64_t v185;
  uint64_t (**v186)();
  std::string v187;
  int v188;
  uint64_t v189;
  uint64_t (**v190)();
  std::string v191;
  int v192;
  char v193;
  void (**v194)(mediaplatform::Data *__hidden);
  size_t v195;
  size_t v196;
  const void *v197;
  char v198;
  uint64_t (**v199)();
  std::string v200;
  int v201;
  uint64_t v202;
  int v203;
  uint64_t (**v204)();
  std::string v205;
  int v206;
  char v207;
  std::string v208;
  uint64_t (**v209)();
  std::string v210;
  int v211;
  uint64_t v212;
  int v213;
  uint64_t (**v214)();
  std::string v215;
  int v216;
  uint64_t v217;
  int v218;
  uint64_t (**v219)();
  std::string v220;
  int v221;
  char v222;
  std::string v223;
  uint64_t (**v224)();
  std::string v225;
  int v226;
  uint64_t v227;
  uint64_t (**v228)();
  std::string v229;
  int v230;
  uint64_t v231;
  uint64_t (**v232)();
  std::string v233;
  int v234;
  uint64_t v235;
  uint64_t (**v236)();
  std::string v237;
  int v238;
  uint64_t v239;
  uint64_t (**v240)();
  std::string v241;
  int v242;
  uint64_t v243;
  uint64_t (**v244)();
  std::string v245;
  int v246;
  uint64_t v247;
  uint64_t (**v248)();
  std::string v249;
  int v250;
  uint64_t v251;
  uint64_t (**v252)();
  std::string v253;
  int v254;
  uint64_t v255;
  uint64_t (**v256)();
  std::string v257;
  int v258;
  uint64_t v259;
  int v260;
  uint64_t (**v261)();
  std::string v262;
  int v263;
  uint64_t v264;
  uint64_t (**v265)();
  std::string v266;
  int v267;
  uint64_t v268;
  uint64_t (**v269)();
  std::string v270;
  int v271;
  uint64_t v272;
  uint64_t (**v273)();
  std::string v274;
  int v275;
  uint64_t v276;
  uint64_t (**v277)();
  std::string v278;
  int v279;
  char v280;
  std::string v281;
  uint64_t (**v282)();
  std::string __s;
  int v284;
  char v285;
  std::string v286;
  uint64_t (**v287)();
  std::string v288;
  int v289;
  char v290;
  std::string v291;
  uint64_t (**v292)();
  std::string v293;
  int v294;
  char v295;
  std::string v296;
  uint64_t (**v297)();
  std::string v298;
  int v299;
  char v300;
  std::string v301;
  uint64_t (**v302)();
  std::string v303;
  int v304;
  char v305;
  std::string v306;
  uint64_t (**v307)();
  std::string __p;
  int v309;
  uint64_t v310;
  int v311;
  uint64_t (**v312)();
  std::string v313;
  int v314;
  uint64_t v315;
  int v316;
  uint64_t (**v317)();
  std::string v318;
  int v319;
  uint64_t v320;
  uint64_t (**v321)();
  std::string v322;
  int v323;
  char v324;
  std::string v325;
  uint64_t (**v326)();
  std::string v327;
  int v328;
  uint64_t v329;
  uint64_t (**v330)();
  std::string v331;
  int v332;
  uint64_t v333;
  uint64_t (**v334)();
  std::string v335;
  int v336;
  uint64_t v337;
  uint64_t (**v338)();
  std::string v339;
  int v340;
  uint64_t v341;
  uint64_t (**v342)();
  std::string v343;
  int v344;
  char v345;
  void (**v346)(mediaplatform::Data *__hidden);
  size_t v347;
  size_t v348;
  void *v349;
  char v350;
  uint64_t (**v351)();
  std::string v352;
  int v353;
  uint64_t v354;
  int v355;
  uint64_t (**v356)();
  std::string v357;
  int v358;
  char v359;
  std::string v360;
  uint64_t (**v361)();
  std::string v362;
  int v363;
  uint64_t v364;
  int v365;
  uint64_t (**v366)();
  std::string v367;
  int v368;
  uint64_t v369;
  int v370;
  uint64_t (**v371)();
  std::string v372;
  int v373;
  char v374;
  std::string v375;
  uint64_t (**v376)();
  std::string v377;
  int v378;
  uint64_t v379;
  uint64_t (**v380)();
  std::string v381;
  int v382;
  uint64_t v383;
  uint64_t (**v384)();
  std::string v385;
  int v386;
  uint64_t v387;
  uint64_t (**v388)();
  std::string v389;
  int v390;
  uint64_t v391;
  uint64_t (**v392)();
  std::string v393;
  int v394;
  uint64_t v395;
  uint64_t (**v396)();
  std::string v397;
  int v398;
  uint64_t v399;
  uint64_t (**v400)();
  std::string v401;
  int v402;
  uint64_t v403;
  uint64_t (**v404)();
  std::string v405;
  int v406;
  uint64_t v407;
  uint64_t (**v408)();
  std::string v409;
  int v410;
  uint64_t v411;
  int v412;
  uint64_t (**v413)();
  std::string v414;
  int v415;
  uint64_t v416;
  uint64_t (**v417)();
  std::string v418;
  int v419;
  uint64_t v420;
  uint64_t (**v421)();
  std::string v422;
  int v423;
  uint64_t v424;
  uint64_t (**v425)();
  std::string v426;
  int v427;
  uint64_t v428;
  uint64_t (**v429)();
  std::string v430;
  int v431;
  char v432;
  std::string v433;
  uint64_t (**v434)();
  std::string v435;
  int v436;
  char v437;
  std::string v438;

  v35 = MEMORY[0x24BDAC7A8](a1);
  v38 = v37;
  v40 = v39;
  v42 = v41;
  v44 = v43;
  v46 = v45;
  v47 = v36;
  v49 = v48;
  v50 = v35;
  v287 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(v36 + 31) < 0)
    std::string::__init_copy_ctor_external(&v288, *(const std::string::value_type **)(v36 + 8), *(_QWORD *)(v36 + 16));
  else
    v288 = *(std::string *)(v36 + 8);
  v289 = *(_DWORD *)(v47 + 32);
  v287 = &off_24C335AB8;
  v290 = *(_BYTE *)(v47 + 36);
  if (*(char *)(v47 + 63) < 0)
    std::string::__init_copy_ctor_external(&v291, *(const std::string::value_type **)(v47 + 40), *(_QWORD *)(v47 + 48));
  else
    v291 = *(std::string *)(v47 + 40);
  v282 = (uint64_t (**)())off_24C335D90;
  v99 = v49;
  if (*(char *)(v46 + 31) < 0)
    std::string::__init_copy_ctor_external(&__s, *(const std::string::value_type **)(v46 + 8), *(_QWORD *)(v46 + 16));
  else
    __s = *(std::string *)(v46 + 8);
  v284 = *(_DWORD *)(v46 + 32);
  v282 = &off_24C335AB8;
  v285 = *(_BYTE *)(v46 + 36);
  if (*(char *)(v46 + 63) < 0)
    std::string::__init_copy_ctor_external(&v286, *(const std::string::value_type **)(v46 + 40), *(_QWORD *)(v46 + 48));
  else
    v286 = *(std::string *)(v46 + 40);
  v277 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(v44 + 31) < 0)
    std::string::__init_copy_ctor_external(&v278, *(const std::string::value_type **)(v44 + 8), *(_QWORD *)(v44 + 16));
  else
    v278 = *(std::string *)(v44 + 8);
  v279 = *(_DWORD *)(v44 + 32);
  v277 = &off_24C335AB8;
  v280 = *(_BYTE *)(v44 + 36);
  if (*(char *)(v44 + 63) < 0)
    std::string::__init_copy_ctor_external(&v281, *(const std::string::value_type **)(v44 + 40), *(_QWORD *)(v44 + 48));
  else
    v281 = *(std::string *)(v44 + 40);
  if (*(char *)(v42 + 31) < 0)
    std::string::__init_copy_ctor_external(&v274, *(const std::string::value_type **)(v42 + 8), *(_QWORD *)(v42 + 16));
  else
    v274 = *(std::string *)(v42 + 8);
  v137 = *(_DWORD *)(v42 + 32);
  v275 = v137;
  v273 = off_24C335AF8;
  v135 = *(_QWORD *)(v42 + 36);
  v276 = v135;
  if (*(char *)(v40 + 31) < 0)
    std::string::__init_copy_ctor_external(&v270, *(const std::string::value_type **)(v40 + 8), *(_QWORD *)(v40 + 16));
  else
    v270 = *(std::string *)(v40 + 8);
  v133 = *(_DWORD *)(v40 + 32);
  v271 = v133;
  v269 = off_24C335AF8;
  v131 = *(_QWORD *)(v40 + 36);
  v272 = v131;
  if (*(char *)(v38 + 31) < 0)
    std::string::__init_copy_ctor_external(&v266, *(const std::string::value_type **)(v38 + 8), *(_QWORD *)(v38 + 16));
  else
    v266 = *(std::string *)(v38 + 8);
  v129 = *(_DWORD *)(v38 + 32);
  v267 = v129;
  v265 = off_24C335AF8;
  v127 = *(_QWORD *)(v38 + 36);
  v268 = v127;
  if (*(char *)(a9 + 31) < 0)
    std::string::__init_copy_ctor_external(&v262, *(const std::string::value_type **)(a9 + 8), *(_QWORD *)(a9 + 16));
  else
    v262 = *(std::string *)(a9 + 8);
  v125 = *(_DWORD *)(a9 + 32);
  v263 = v125;
  v261 = off_24C335AF8;
  v123 = *(_QWORD *)(a9 + 36);
  v264 = v123;
  if (*(char *)(a10 + 31) < 0)
    std::string::__init_copy_ctor_external(&v257, *(const std::string::value_type **)(a10 + 8), *(_QWORD *)(a10 + 16));
  else
    v257 = *(std::string *)(a10 + 8);
  v51 = *(_DWORD *)(a10 + 32);
  v256 = off_24C335B18;
  v259 = *(_QWORD *)(a10 + 36);
  v52 = *(_DWORD *)(a10 + 44);
  v121 = v51;
  v258 = v51;
  v260 = v52;
  if (*(char *)(a11 + 31) < 0)
    std::string::__init_copy_ctor_external(&v253, *(const std::string::value_type **)(a11 + 8), *(_QWORD *)(a11 + 16));
  else
    v253 = *(std::string *)(a11 + 8);
  v119 = *(_DWORD *)(a11 + 32);
  v254 = v119;
  v252 = off_24C335AF8;
  v117 = *(_QWORD *)(a11 + 36);
  v255 = v117;
  if (*(char *)(a12 + 31) < 0)
    std::string::__init_copy_ctor_external(&v249, *(const std::string::value_type **)(a12 + 8), *(_QWORD *)(a12 + 16));
  else
    v249 = *(std::string *)(a12 + 8);
  v115 = *(_DWORD *)(a12 + 32);
  v250 = v115;
  v248 = off_24C335AF8;
  v114 = *(_QWORD *)(a12 + 36);
  v251 = v114;
  if (*(char *)(a13 + 31) < 0)
    std::string::__init_copy_ctor_external(&v245, *(const std::string::value_type **)(a13 + 8), *(_QWORD *)(a13 + 16));
  else
    v245 = *(std::string *)(a13 + 8);
  v113 = *(_DWORD *)(a13 + 32);
  v246 = v113;
  v244 = off_24C335AF8;
  v112 = *(_QWORD *)(a13 + 36);
  v247 = v112;
  if (*(char *)(a14 + 31) < 0)
    std::string::__init_copy_ctor_external(&v241, *(const std::string::value_type **)(a14 + 8), *(_QWORD *)(a14 + 16));
  else
    v241 = *(std::string *)(a14 + 8);
  v111 = *(_DWORD *)(a14 + 32);
  v242 = v111;
  v240 = off_24C335AF8;
  v110 = *(_QWORD *)(a14 + 36);
  v243 = v110;
  if (*(char *)(a15 + 31) < 0)
    std::string::__init_copy_ctor_external(&v237, *(const std::string::value_type **)(a15 + 8), *(_QWORD *)(a15 + 16));
  else
    v237 = *(std::string *)(a15 + 8);
  v109 = *(_DWORD *)(a15 + 32);
  v238 = v109;
  v236 = off_24C335AF8;
  v108 = *(_QWORD *)(a15 + 36);
  v239 = v108;
  if (*(char *)(a16 + 31) < 0)
    std::string::__init_copy_ctor_external(&v233, *(const std::string::value_type **)(a16 + 8), *(_QWORD *)(a16 + 16));
  else
    v233 = *(std::string *)(a16 + 8);
  v107 = *(_DWORD *)(a16 + 32);
  v234 = v107;
  v232 = off_24C335AF8;
  v106 = *(_QWORD *)(a16 + 36);
  v235 = v106;
  if (*(char *)(a17 + 31) < 0)
    std::string::__init_copy_ctor_external(&v229, *(const std::string::value_type **)(a17 + 8), *(_QWORD *)(a17 + 16));
  else
    v229 = *(std::string *)(a17 + 8);
  v105 = *(_DWORD *)(a17 + 32);
  v230 = v105;
  v228 = off_24C335AF8;
  v104 = *(_QWORD *)(a17 + 36);
  v231 = v104;
  if (*(char *)(a18 + 31) < 0)
    std::string::__init_copy_ctor_external(&v225, *(const std::string::value_type **)(a18 + 8), *(_QWORD *)(a18 + 16));
  else
    v225 = *(std::string *)(a18 + 8);
  v103 = *(_DWORD *)(a18 + 32);
  v226 = v103;
  v224 = off_24C335AF8;
  v102 = *(_QWORD *)(a18 + 36);
  v227 = v102;
  v219 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a19 + 31) < 0)
    std::string::__init_copy_ctor_external(&v220, *(const std::string::value_type **)(a19 + 8), *(_QWORD *)(a19 + 16));
  else
    v220 = *(std::string *)(a19 + 8);
  v221 = *(_DWORD *)(a19 + 32);
  v219 = &off_24C335AB8;
  v222 = *(_BYTE *)(a19 + 36);
  if (*(char *)(a19 + 63) < 0)
    std::string::__init_copy_ctor_external(&v223, *(const std::string::value_type **)(a19 + 40), *(_QWORD *)(a19 + 48));
  else
    v223 = *(std::string *)(a19 + 40);
  if (*(char *)(a20 + 31) < 0)
    std::string::__init_copy_ctor_external(&v215, *(const std::string::value_type **)(a20 + 8), *(_QWORD *)(a20 + 16));
  else
    v215 = *(std::string *)(a20 + 8);
  v53 = *(_DWORD *)(a20 + 32);
  v214 = off_24C335B18;
  v217 = *(_QWORD *)(a20 + 36);
  v54 = *(_DWORD *)(a20 + 44);
  v101 = v53;
  v216 = v53;
  v218 = v54;
  if (*(char *)(a21 + 31) < 0)
    std::string::__init_copy_ctor_external(&v210, *(const std::string::value_type **)(a21 + 8), *(_QWORD *)(a21 + 16));
  else
    v210 = *(std::string *)(a21 + 8);
  v55 = *(_DWORD *)(a21 + 32);
  v209 = off_24C335B18;
  v212 = *(_QWORD *)(a21 + 36);
  v56 = *(_DWORD *)(a21 + 44);
  v100 = v55;
  v211 = v55;
  v213 = v56;
  v204 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a22 + 31) < 0)
    std::string::__init_copy_ctor_external(&v205, *(const std::string::value_type **)(a22 + 8), *(_QWORD *)(a22 + 16));
  else
    v205 = *(std::string *)(a22 + 8);
  v206 = *(_DWORD *)(a22 + 32);
  v204 = &off_24C335AB8;
  v207 = *(_BYTE *)(a22 + 36);
  if (*(char *)(a22 + 63) < 0)
    std::string::__init_copy_ctor_external(&v208, *(const std::string::value_type **)(a22 + 40), *(_QWORD *)(a22 + 48));
  else
    v208 = *(std::string *)(a22 + 40);
  if (*(char *)(a23 + 31) < 0)
    std::string::__init_copy_ctor_external(&v200, *(const std::string::value_type **)(a23 + 8), *(_QWORD *)(a23 + 16));
  else
    v200 = *(std::string *)(a23 + 8);
  v57 = *(_DWORD *)(a23 + 32);
  v199 = off_24C335B18;
  v202 = *(_QWORD *)(a23 + 36);
  v58 = *(_DWORD *)(a23 + 44);
  v201 = v57;
  v203 = v58;
  v190 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a24 + 31) < 0)
    std::string::__init_copy_ctor_external(&v191, *(const std::string::value_type **)(a24 + 8), *(_QWORD *)(a24 + 16));
  else
    v191 = *(std::string *)(a24 + 8);
  v192 = *(_DWORD *)(a24 + 32);
  v190 = &off_24C335A98;
  v193 = *(_BYTE *)(a24 + 36);
  v59 = *(const void **)(a24 + 64);
  v60 = *(_QWORD *)(a24 + 48);
  v194 = &off_24C331510;
  v195 = v60;
  v196 = v60;
  if (v60)
    v61 = (void *)operator new[]();
  else
    v61 = 0;
  v197 = v61;
  v198 = 1;
  if (v59)
    memcpy(v61, v59, v60);
  else
    bzero(v61, v60);
  if (*(char *)(a25 + 31) < 0)
    std::string::__init_copy_ctor_external(&v187, *(const std::string::value_type **)(a25 + 8), *(_QWORD *)(a25 + 16));
  else
    v187 = *(std::string *)(a25 + 8);
  v97 = *(_DWORD *)(a25 + 32);
  v188 = v97;
  v186 = off_24C335AF8;
  v96 = *(_QWORD *)(a25 + 36);
  v189 = v96;
  v98 = v57;
  if (*(char *)(a26 + 31) < 0)
    std::string::__init_copy_ctor_external(&v183, *(const std::string::value_type **)(a26 + 8), *(_QWORD *)(a26 + 16));
  else
    v183 = *(std::string *)(a26 + 8);
  v95 = *(_DWORD *)(a26 + 32);
  v184 = v95;
  v182 = off_24C335AF8;
  v62 = *(_QWORD *)(a26 + 36);
  v185 = v62;
  if (*(char *)(a27 + 31) < 0)
    std::string::__init_copy_ctor_external(&v179, *(const std::string::value_type **)(a27 + 8), *(_QWORD *)(a27 + 16));
  else
    v179 = *(std::string *)(a27 + 8);
  v93 = *(_DWORD *)(a27 + 32);
  v180 = v93;
  v178 = off_24C335AF8;
  v92 = *(_QWORD *)(a27 + 36);
  v181 = v92;
  if (*(char *)(a28 + 31) < 0)
    std::string::__init_copy_ctor_external(&v175, *(const std::string::value_type **)(a28 + 8), *(_QWORD *)(a28 + 16));
  else
    v175 = *(std::string *)(a28 + 8);
  v91 = *(_DWORD *)(a28 + 32);
  v176 = v91;
  v174 = off_24C335AF8;
  v90 = *(_QWORD *)(a28 + 36);
  v177 = v90;
  v169 = (uint64_t (**)())off_24C335D90;
  v94 = v62;
  if (*(char *)(a29 + 31) < 0)
    std::string::__init_copy_ctor_external(&v170, *(const std::string::value_type **)(a29 + 8), *(_QWORD *)(a29 + 16));
  else
    v170 = *(std::string *)(a29 + 8);
  v171 = *(_DWORD *)(a29 + 32);
  v169 = &off_24C335AB8;
  v172 = *(_BYTE *)(a29 + 36);
  if (*(char *)(a29 + 63) < 0)
    std::string::__init_copy_ctor_external(&v173, *(const std::string::value_type **)(a29 + 40), *(_QWORD *)(a29 + 48));
  else
    v173 = *(std::string *)(a29 + 40);
  if (*(char *)(a30 + 31) < 0)
    std::string::__init_copy_ctor_external(&v166, *(const std::string::value_type **)(a30 + 8), *(_QWORD *)(a30 + 16));
  else
    v166 = *(std::string *)(a30 + 8);
  v89 = *(_DWORD *)(a30 + 32);
  v167 = v89;
  v165 = off_24C335AF8;
  v88 = *(_QWORD *)(a30 + 36);
  v168 = v88;
  if (*(char *)(a31 + 31) < 0)
    std::string::__init_copy_ctor_external(&v161, *(const std::string::value_type **)(a31 + 8), *(_QWORD *)(a31 + 16));
  else
    v161 = *(std::string *)(a31 + 8);
  v63 = *(_DWORD *)(a31 + 32);
  v160 = off_24C335B18;
  v163 = *(_QWORD *)(a31 + 36);
  v64 = *(_DWORD *)(a31 + 44);
  v87 = v63;
  v162 = v63;
  v164 = v64;
  if (*(char *)(a32 + 31) < 0)
    std::string::__init_copy_ctor_external(&v156, *(const std::string::value_type **)(a32 + 8), *(_QWORD *)(a32 + 16));
  else
    v156 = *(std::string *)(a32 + 8);
  v65 = *(_DWORD *)(a32 + 32);
  v155 = off_24C335B18;
  v158 = *(_QWORD *)(a32 + 36);
  v66 = *(_DWORD *)(a32 + 44);
  v86 = v65;
  v157 = v65;
  v159 = v66;
  v150 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a33 + 31) < 0)
    std::string::__init_copy_ctor_external(&v151, *(const std::string::value_type **)(a33 + 8), *(_QWORD *)(a33 + 16));
  else
    v151 = *(std::string *)(a33 + 8);
  v152 = *(_DWORD *)(a33 + 32);
  v150 = &off_24C335AB8;
  v153 = *(_BYTE *)(a33 + 36);
  if (*(char *)(a33 + 63) < 0)
    std::string::__init_copy_ctor_external(&v154, *(const std::string::value_type **)(a33 + 40), *(_QWORD *)(a33 + 48));
  else
    v154 = *(std::string *)(a33 + 40);
  v145 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a34 + 31) < 0)
    std::string::__init_copy_ctor_external(&v146, *(const std::string::value_type **)(a34 + 8), *(_QWORD *)(a34 + 16));
  else
    v146 = *(std::string *)(a34 + 8);
  v147 = *(_DWORD *)(a34 + 32);
  v145 = &off_24C335AB8;
  v148 = *(_BYTE *)(a34 + 36);
  if (*(char *)(a34 + 63) < 0)
    std::string::__init_copy_ctor_external(&v149, *(const std::string::value_type **)(a34 + 40), *(_QWORD *)(a34 + 48));
  else
    v149 = *(std::string *)(a34 + 40);
  v140 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a35 + 31) < 0)
    std::string::__init_copy_ctor_external(&v141, *(const std::string::value_type **)(a35 + 8), *(_QWORD *)(a35 + 16));
  else
    v141 = *(std::string *)(a35 + 8);
  v142 = *(_DWORD *)(a35 + 32);
  v140 = &off_24C335AB8;
  v143 = *(_BYTE *)(a35 + 36);
  if (*(char *)(a35 + 63) < 0)
    std::string::__init_copy_ctor_external(&v144, *(const std::string::value_type **)(a35 + 40), *(_QWORD *)(a35 + 48));
  else
    v144 = *(std::string *)(a35 + 40);
  v434 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v435, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
  else
    v435 = __s;
  v436 = v284;
  v434 = &off_24C335AB8;
  v437 = v285;
  if (SHIBYTE(v286.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v438, v286.__r_.__value_.__l.__data_, v286.__r_.__value_.__l.__size_);
  else
    v438 = v286;
  v429 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v278.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v430, v278.__r_.__value_.__l.__data_, v278.__r_.__value_.__l.__size_);
  else
    v430 = v278;
  v431 = v279;
  v429 = &off_24C335AB8;
  v432 = v280;
  if (SHIBYTE(v281.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v433, v281.__r_.__value_.__l.__data_, v281.__r_.__value_.__l.__size_);
  else
    v433 = v281;
  if (SHIBYTE(v274.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v426, v274.__r_.__value_.__l.__data_, v274.__r_.__value_.__l.__size_);
  else
    v426 = v274;
  v427 = v137;
  v425 = off_24C335AF8;
  v428 = v135;
  v421 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v270.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v422, v270.__r_.__value_.__l.__data_, v270.__r_.__value_.__l.__size_);
  else
    v422 = v270;
  v423 = v133;
  v421 = off_24C335AF8;
  v424 = v131;
  v417 = (uint64_t (**)())off_24C335D90;
  v67 = SHIBYTE(v266.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v266.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v418, v266.__r_.__value_.__l.__data_, v266.__r_.__value_.__l.__size_);
  else
    v418 = v266;
  v419 = v129;
  v417 = off_24C335AF8;
  v420 = v127;
  v413 = (uint64_t (**)())off_24C335D90;
  v68 = SHIBYTE(v262.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v262.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v414, v262.__r_.__value_.__l.__data_, v262.__r_.__value_.__l.__size_);
  else
    v414 = v262;
  v415 = v125;
  v413 = off_24C335AF8;
  v416 = v123;
  v408 = (uint64_t (**)())off_24C335D90;
  v139 = SHIBYTE(v257.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v257.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v409, v257.__r_.__value_.__l.__data_, v257.__r_.__value_.__l.__size_);
  else
    v409 = v257;
  v408 = off_24C335B18;
  v411 = v259;
  v410 = v121;
  v412 = v260;
  v404 = (uint64_t (**)())off_24C335D90;
  v138 = SHIBYTE(v253.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v253.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v405, v253.__r_.__value_.__l.__data_, v253.__r_.__value_.__l.__size_);
  else
    v405 = v253;
  v406 = v119;
  v404 = off_24C335AF8;
  v407 = v117;
  v400 = (uint64_t (**)())off_24C335D90;
  v136 = SHIBYTE(v249.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v249.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v401, v249.__r_.__value_.__l.__data_, v249.__r_.__value_.__l.__size_);
  else
    v401 = v249;
  v402 = v115;
  v400 = off_24C335AF8;
  v403 = v114;
  v396 = (uint64_t (**)())off_24C335D90;
  v134 = SHIBYTE(v245.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v245.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v397, v245.__r_.__value_.__l.__data_, v245.__r_.__value_.__l.__size_);
  else
    v397 = v245;
  v398 = v113;
  v396 = off_24C335AF8;
  v399 = v112;
  v392 = (uint64_t (**)())off_24C335D90;
  v132 = SHIBYTE(v241.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v241.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v393, v241.__r_.__value_.__l.__data_, v241.__r_.__value_.__l.__size_);
  else
    v393 = v241;
  v394 = v111;
  v392 = off_24C335AF8;
  v395 = v110;
  v388 = (uint64_t (**)())off_24C335D90;
  v130 = SHIBYTE(v237.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v237.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v389, v237.__r_.__value_.__l.__data_, v237.__r_.__value_.__l.__size_);
  else
    v389 = v237;
  v390 = v109;
  v388 = off_24C335AF8;
  v391 = v108;
  v384 = (uint64_t (**)())off_24C335D90;
  v128 = SHIBYTE(v233.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v233.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v385, v233.__r_.__value_.__l.__data_, v233.__r_.__value_.__l.__size_);
  else
    v385 = v233;
  v386 = v107;
  v384 = off_24C335AF8;
  v387 = v106;
  v380 = (uint64_t (**)())off_24C335D90;
  v126 = SHIBYTE(v229.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v229.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v381, v229.__r_.__value_.__l.__data_, v229.__r_.__value_.__l.__size_);
  else
    v381 = v229;
  v382 = v105;
  v380 = off_24C335AF8;
  v383 = v104;
  v376 = (uint64_t (**)())off_24C335D90;
  v124 = SHIBYTE(v225.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v225.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v377, v225.__r_.__value_.__l.__data_, v225.__r_.__value_.__l.__size_);
  else
    v377 = v225;
  v378 = v103;
  v376 = off_24C335AF8;
  v379 = v102;
  v371 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v220.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v372, v220.__r_.__value_.__l.__data_, v220.__r_.__value_.__l.__size_);
  else
    v372 = v220;
  v373 = v221;
  v371 = &off_24C335AB8;
  v374 = v222;
  if (SHIBYTE(v223.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v375, v223.__r_.__value_.__l.__data_, v223.__r_.__value_.__l.__size_);
  else
    v375 = v223;
  v366 = (uint64_t (**)())off_24C335D90;
  v122 = SHIBYTE(v215.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v215.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v367, v215.__r_.__value_.__l.__data_, v215.__r_.__value_.__l.__size_);
  else
    v367 = v215;
  v366 = off_24C335B18;
  v369 = v217;
  v368 = v101;
  v370 = v218;
  v361 = (uint64_t (**)())off_24C335D90;
  v120 = SHIBYTE(v210.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v210.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v362, v210.__r_.__value_.__l.__data_, v210.__r_.__value_.__l.__size_);
  else
    v362 = v210;
  v361 = off_24C335B18;
  v364 = v212;
  v363 = v100;
  v365 = v213;
  v356 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v205.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v357, v205.__r_.__value_.__l.__data_, v205.__r_.__value_.__l.__size_);
  else
    v357 = v205;
  v358 = v206;
  v356 = &off_24C335AB8;
  v359 = v207;
  if (SHIBYTE(v208.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v360, v208.__r_.__value_.__l.__data_, v208.__r_.__value_.__l.__size_);
  else
    v360 = v208;
  v351 = (uint64_t (**)())off_24C335D90;
  v69 = SHIBYTE(v200.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v200.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v352, v200.__r_.__value_.__l.__data_, v200.__r_.__value_.__l.__size_);
  else
    v352 = v200;
  v351 = off_24C335B18;
  v354 = v202;
  v353 = v98;
  v355 = v203;
  v342 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v191.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v343, v191.__r_.__value_.__l.__data_, v191.__r_.__value_.__l.__size_);
  else
    v343 = v191;
  v344 = v192;
  v342 = &off_24C335A98;
  v345 = v193;
  v70 = v197;
  v71 = v195;
  v346 = &off_24C331510;
  v347 = v195;
  v348 = v195;
  if (v195)
    v72 = (void *)operator new[]();
  else
    v72 = 0;
  v349 = v72;
  v350 = 1;
  if (v70)
    memcpy(v72, v70, v71);
  else
    bzero(v72, v71);
  v338 = (uint64_t (**)())off_24C335D90;
  v73 = SHIBYTE(v187.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v187.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v339, v187.__r_.__value_.__l.__data_, v187.__r_.__value_.__l.__size_);
  else
    v339 = v187;
  v340 = v97;
  v338 = off_24C335AF8;
  v341 = v96;
  v334 = (uint64_t (**)())off_24C335D90;
  v74 = SHIBYTE(v183.__r_.__value_.__r.__words[2]);
  v118 = v73;
  if (SHIBYTE(v183.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v335, v183.__r_.__value_.__l.__data_, v183.__r_.__value_.__l.__size_);
  else
    v335 = v183;
  v336 = v95;
  v334 = off_24C335AF8;
  v337 = v94;
  v330 = (uint64_t (**)())off_24C335D90;
  v75 = SHIBYTE(v179.__r_.__value_.__r.__words[2]);
  v85 = v67;
  if (SHIBYTE(v179.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v331, v179.__r_.__value_.__l.__data_, v179.__r_.__value_.__l.__size_);
  else
    v331 = v179;
  v332 = v93;
  v330 = off_24C335AF8;
  v333 = v92;
  v326 = (uint64_t (**)())off_24C335D90;
  v76 = SHIBYTE(v175.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v175.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v327, v175.__r_.__value_.__l.__data_, v175.__r_.__value_.__l.__size_);
  else
    v327 = v175;
  v328 = v91;
  v326 = off_24C335AF8;
  v329 = v90;
  v321 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v170.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v322, v170.__r_.__value_.__l.__data_, v170.__r_.__value_.__l.__size_);
  else
    v322 = v170;
  v323 = v171;
  v321 = &off_24C335AB8;
  v324 = v172;
  v116 = v69;
  if (SHIBYTE(v173.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v325, v173.__r_.__value_.__l.__data_, v173.__r_.__value_.__l.__size_);
  else
    v325 = v173;
  v317 = (uint64_t (**)())off_24C335D90;
  v77 = SHIBYTE(v166.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v166.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v318, v166.__r_.__value_.__l.__data_, v166.__r_.__value_.__l.__size_);
  else
    v318 = v166;
  v319 = v89;
  v317 = off_24C335AF8;
  v320 = v88;
  v312 = (uint64_t (**)())off_24C335D90;
  v78 = SHIBYTE(v161.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v161.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v313, v161.__r_.__value_.__l.__data_, v161.__r_.__value_.__l.__size_);
  else
    v313 = v161;
  v312 = off_24C335B18;
  v315 = v163;
  v314 = v87;
  v316 = v164;
  v307 = (uint64_t (**)())off_24C335D90;
  v79 = SHIBYTE(v156.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v156.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&__p, v156.__r_.__value_.__l.__data_, v156.__r_.__value_.__l.__size_);
  else
    __p = v156;
  v307 = off_24C335B18;
  v310 = v158;
  v309 = v86;
  v311 = v159;
  v302 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v151.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v303, v151.__r_.__value_.__l.__data_, v151.__r_.__value_.__l.__size_);
  else
    v303 = v151;
  v304 = v152;
  v302 = &off_24C335AB8;
  v305 = v153;
  if (SHIBYTE(v154.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v306, v154.__r_.__value_.__l.__data_, v154.__r_.__value_.__l.__size_);
  else
    v306 = v154;
  v297 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v146.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v298, v146.__r_.__value_.__l.__data_, v146.__r_.__value_.__l.__size_);
  else
    v298 = v146;
  v299 = v147;
  v297 = &off_24C335AB8;
  v300 = v148;
  if (SHIBYTE(v149.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v301, v149.__r_.__value_.__l.__data_, v149.__r_.__value_.__l.__size_);
  else
    v301 = v149;
  v292 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v141.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v293, v141.__r_.__value_.__l.__data_, v141.__r_.__value_.__l.__size_);
  else
    v293 = v141;
  v294 = v142;
  v292 = &off_24C335AB8;
  v295 = v143;
  if (SHIBYTE(v144.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v296, v144.__r_.__value_.__l.__data_, v144.__r_.__value_.__l.__size_);
  else
    v296 = v144;
  mediaplatform::DatabaseColumnTuple<7ul,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>>::DatabaseColumnTuple(v50, (uint64_t)&v434, (uint64_t)&v429, (uint64_t)&v425, (uint64_t)&v421, (uint64_t)&v417, (uint64_t)&v413, (uint64_t)&v408, (uint64_t)&v404, (uint64_t)&v400, (uint64_t)&v396, (uint64_t)&v392, (uint64_t)&v388, (uint64_t)&v384, (uint64_t)&v380, (uint64_t)&v376, (uint64_t)&v371, (uint64_t)&v366, (uint64_t)&v361,
    (uint64_t)&v356,
    (uint64_t)&v351,
    (uint64_t)&v342,
    (uint64_t)&v338,
    (uint64_t)&v334,
    (uint64_t)&v330,
    (uint64_t)&v326,
    (uint64_t)&v321,
    (uint64_t)&v317,
    (uint64_t)&v312,
    (uint64_t)&v307,
    (uint64_t)&v302,
    (uint64_t)&v297,
    (uint64_t)&v292);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v292);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v297);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v302);
  v307 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v312 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v313.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v313.__r_.__value_.__l.__data_);
  v317 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v318.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v318.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v321);
  v326 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v327.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v327.__r_.__value_.__l.__data_);
  v330 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v331.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v331.__r_.__value_.__l.__data_);
  v334 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v335.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v335.__r_.__value_.__l.__data_);
  v338 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v339.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v339.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<mediaplatform::Data>::~DatabaseColumn((uint64_t)&v342);
  v351 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v352.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v352.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v356);
  v361 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v362.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v362.__r_.__value_.__l.__data_);
  v366 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v367.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v367.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v371);
  v376 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v377.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v377.__r_.__value_.__l.__data_);
  v380 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v381.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v381.__r_.__value_.__l.__data_);
  v384 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v385.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v385.__r_.__value_.__l.__data_);
  v388 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v389.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v389.__r_.__value_.__l.__data_);
  v392 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v393.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v393.__r_.__value_.__l.__data_);
  v396 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v397.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v397.__r_.__value_.__l.__data_);
  v400 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v401.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v401.__r_.__value_.__l.__data_);
  v404 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v405.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v405.__r_.__value_.__l.__data_);
  v408 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v409.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v409.__r_.__value_.__l.__data_);
  v413 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v414.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v414.__r_.__value_.__l.__data_);
  v417 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v418.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v418.__r_.__value_.__l.__data_);
  v421 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v422.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v422.__r_.__value_.__l.__data_);
  v425 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v426.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v426.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v429);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v434);
  *(_QWORD *)(v50 + 1696) = off_24C335D90;
  if (SHIBYTE(v288.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external((std::string *)(v50 + 1704), v288.__r_.__value_.__l.__data_, v288.__r_.__value_.__l.__size_);
  else
    *(std::string *)(v50 + 1704) = v288;
  *(_DWORD *)(v50 + 1728) = v289;
  *(_QWORD *)(v50 + 1696) = &off_24C335AB8;
  *(_BYTE *)(v50 + 1732) = v290;
  v80 = (std::string *)(v50 + 1736);
  if (SHIBYTE(v291.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v80, v291.__r_.__value_.__l.__data_, v291.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v80->__r_.__value_.__l.__data_ = *(_OWORD *)&v291.__r_.__value_.__l.__data_;
    *(_QWORD *)(v50 + 1752) = *((_QWORD *)&v291.__r_.__value_.__l + 2);
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v140);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v145);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v150);
  v155 = (uint64_t (**)())off_24C335D90;
  if (v79 < 0)
    operator delete(v156.__r_.__value_.__l.__data_);
  if (v78 < 0)
  {
    operator delete(v161.__r_.__value_.__l.__data_);
    if ((v77 & 0x80000000) == 0)
      goto LABEL_315;
  }
  else if ((v77 & 0x80000000) == 0)
  {
    goto LABEL_315;
  }
  operator delete(v166.__r_.__value_.__l.__data_);
LABEL_315:
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v169);
  if (v76 < 0)
    operator delete(v175.__r_.__value_.__l.__data_);
  if (v75 < 0)
  {
    operator delete(v179.__r_.__value_.__l.__data_);
    if ((v74 & 0x80000000) == 0)
      goto LABEL_319;
  }
  else if ((v74 & 0x80000000) == 0)
  {
    goto LABEL_319;
  }
  operator delete(v183.__r_.__value_.__l.__data_);
LABEL_319:
  if (v118 < 0)
    operator delete(v187.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<mediaplatform::Data>::~DatabaseColumn((uint64_t)&v190);
  if (v116 < 0)
    operator delete(v200.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v204);
  if (v120 < 0)
    operator delete(v210.__r_.__value_.__l.__data_);
  if (v122 < 0)
    operator delete(v215.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v219);
  if (v124 < 0)
    operator delete(v225.__r_.__value_.__l.__data_);
  if (v126 < 0)
    operator delete(v229.__r_.__value_.__l.__data_);
  if (v128 < 0)
    operator delete(v233.__r_.__value_.__l.__data_);
  if (v130 < 0)
    operator delete(v237.__r_.__value_.__l.__data_);
  if (v132 < 0)
    operator delete(v241.__r_.__value_.__l.__data_);
  if (v134 < 0)
    operator delete(v245.__r_.__value_.__l.__data_);
  if (v136 < 0)
    operator delete(v249.__r_.__value_.__l.__data_);
  if (v138 < 0)
    operator delete(v253.__r_.__value_.__l.__data_);
  if (v139 < 0)
  {
    operator delete(v257.__r_.__value_.__l.__data_);
    if ((v68 & 0x80000000) == 0)
      goto LABEL_345;
  }
  else if ((v68 & 0x80000000) == 0)
  {
    goto LABEL_345;
  }
  operator delete(v262.__r_.__value_.__l.__data_);
LABEL_345:
  if (v85 < 0)
    operator delete(v266.__r_.__value_.__l.__data_);
  if (SHIBYTE(v270.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v270.__r_.__value_.__l.__data_);
  if (SHIBYTE(v274.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v274.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v277);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v282);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v287);
  *(_QWORD *)(v50 + 1760) = off_24C335D90;
  if (*(char *)(v99 + 31) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(v50 + 1768), *(const std::string::value_type **)(v99 + 8), *(_QWORD *)(v99 + 16));
  }
  else
  {
    v81 = *(_OWORD *)(v99 + 8);
    *(_QWORD *)(v50 + 1784) = *(_QWORD *)(v99 + 24);
    *(_OWORD *)(v50 + 1768) = v81;
  }
  *(_DWORD *)(v50 + 1792) = *(_DWORD *)(v99 + 32);
  *(_QWORD *)(v50 + 1760) = &off_24C335AB8;
  *(_BYTE *)(v50 + 1796) = *(_BYTE *)(v99 + 36);
  v82 = (std::string *)(v50 + 1800);
  if (*(char *)(v99 + 63) < 0)
  {
    std::string::__init_copy_ctor_external(v82, *(const std::string::value_type **)(v99 + 40), *(_QWORD *)(v99 + 48));
  }
  else
  {
    v83 = *(_OWORD *)(v99 + 40);
    *(_QWORD *)(v50 + 1816) = *(_QWORD *)(v99 + 56);
    *(_OWORD *)&v82->__r_.__value_.__l.__data_ = v83;
  }
  return v50;
}

void sub_20A829D60(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;
  uint64_t v3;

  *(_QWORD *)(v1 + 1760) = v3;
  if (*(char *)(v1 + 1791) < 0)
    operator delete(*v2);
  mediaplatform::DatabaseColumnTuple<6ul,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>>::~DatabaseColumnTuple(v1);
  _Unwind_Resume(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<5ul,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>>::~DatabaseColumnTuple(uint64_t a1)
{
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 1760);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 1696);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 1632);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 1568);
  *(_QWORD *)(a1 + 1520) = off_24C335D90;
  if (*(char *)(a1 + 1551) < 0)
    operator delete(*(void **)(a1 + 1528));
  *(_QWORD *)(a1 + 1472) = off_24C335D90;
  if (*(char *)(a1 + 1503) < 0)
    operator delete(*(void **)(a1 + 1480));
  *(_QWORD *)(a1 + 1424) = off_24C335D90;
  if (*(char *)(a1 + 1455) < 0)
    operator delete(*(void **)(a1 + 1432));
  return mediaplatform::DatabaseColumnTuple<12ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>>::~DatabaseColumnTuple(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<6ul,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>>::~DatabaseColumnTuple(uint64_t a1)
{
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 1696);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 1632);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 1568);
  *(_QWORD *)(a1 + 1520) = off_24C335D90;
  if (*(char *)(a1 + 1551) < 0)
    operator delete(*(void **)(a1 + 1528));
  *(_QWORD *)(a1 + 1472) = off_24C335D90;
  if (*(char *)(a1 + 1503) < 0)
    operator delete(*(void **)(a1 + 1480));
  *(_QWORD *)(a1 + 1424) = off_24C335D90;
  if (*(char *)(a1 + 1455) < 0)
    operator delete(*(void **)(a1 + 1432));
  return mediaplatform::DatabaseColumnTuple<12ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>>::~DatabaseColumnTuple(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<7ul,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>>::DatabaseColumnTuple(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  int v50;
  int v51;
  int v52;
  int v53;
  int v54;
  int v55;
  int v56;
  int v57;
  const void *v58;
  size_t v59;
  void *v60;
  int v61;
  int v62;
  int v63;
  int v64;
  const void *v65;
  size_t v66;
  void *v67;
  int v68;
  int v69;
  int v70;
  int v71;
  int v72;
  const void *v73;
  size_t v74;
  void *v75;
  int v76;
  int v77;
  int v78;
  int v79;
  int v80;
  int v81;
  int v82;
  std::string *v83;
  int v84;
  std::string *v85;
  std::string *v86;
  __int128 v87;
  std::string *v88;
  __int128 v89;
  uint64_t v91;
  int v92;
  int v93;
  int v94;
  int v95;
  int v96;
  uint64_t v97;
  int v98;
  uint64_t v99;
  int v100;
  uint64_t v101;
  int v102;
  uint64_t v103;
  int v104;
  uint64_t v105;
  int v106;
  int v107;
  int v108;
  int v109;
  uint64_t v110;
  int v111;
  uint64_t v112;
  int v113;
  uint64_t v114;
  int v115;
  uint64_t v116;
  int v117;
  uint64_t v118;
  int v119;
  int v120;
  uint64_t v121;
  int v122;
  int v123;
  int v124;
  uint64_t v125;
  int v126;
  int v127;
  int v128;
  uint64_t v129;
  int v130;
  int v131;
  int v132;
  int v133;
  int v134;
  uint64_t v135;
  int v136;
  int v137;
  int v138;
  uint64_t v139;
  int v140;
  int v141;
  int v142;
  uint64_t v143;
  int v144;
  uint64_t v145;
  uint64_t (**v146)();
  std::string v147;
  int v148;
  char v149;
  std::string v150;
  uint64_t (**v151)();
  std::string v152;
  int v153;
  char v154;
  std::string v155;
  uint64_t (**v156)();
  std::string v157;
  int v158;
  char v159;
  std::string v160;
  uint64_t (**v161)();
  std::string v162;
  int v163;
  uint64_t v164;
  int v165;
  uint64_t (**v166)();
  std::string v167;
  int v168;
  uint64_t v169;
  int v170;
  uint64_t (**v171)();
  std::string v172;
  int v173;
  uint64_t v174;
  uint64_t (**v175)();
  std::string v176;
  int v177;
  char v178;
  std::string v179;
  uint64_t (**v180)();
  std::string v181;
  int v182;
  uint64_t v183;
  uint64_t (**v184)();
  std::string v185;
  int v186;
  uint64_t v187;
  uint64_t (**v188)();
  std::string v189;
  int v190;
  uint64_t v191;
  uint64_t (**v192)();
  std::string v193;
  int v194;
  uint64_t v195;
  uint64_t (**v196)();
  std::string v197;
  int v198;
  char v199;
  void (**v200)(mediaplatform::Data *__hidden);
  size_t v201;
  size_t v202;
  const void *v203;
  char v204;
  uint64_t (**v205)();
  std::string v206;
  int v207;
  uint64_t v208;
  int v209;
  uint64_t (**v210)();
  std::string v211;
  int v212;
  char v213;
  std::string v214;
  uint64_t (**v215)();
  std::string v216;
  int v217;
  uint64_t v218;
  int v219;
  uint64_t (**v220)();
  std::string v221;
  int v222;
  uint64_t v223;
  int v224;
  uint64_t (**v225)();
  std::string v226;
  int v227;
  char v228;
  std::string v229;
  uint64_t (**v230)();
  std::string v231;
  int v232;
  uint64_t v233;
  uint64_t (**v234)();
  std::string v235;
  int v236;
  uint64_t v237;
  uint64_t (**v238)();
  std::string v239;
  int v240;
  uint64_t v241;
  uint64_t (**v242)();
  std::string v243;
  int v244;
  uint64_t v245;
  uint64_t (**v246)();
  std::string v247;
  int v248;
  uint64_t v249;
  uint64_t (**v250)();
  std::string v251;
  int v252;
  uint64_t v253;
  uint64_t (**v254)();
  std::string v255;
  int v256;
  uint64_t v257;
  uint64_t (**v258)();
  std::string v259;
  int v260;
  uint64_t v261;
  uint64_t (**v262)();
  std::string v263;
  int v264;
  uint64_t v265;
  int v266;
  uint64_t (**v267)();
  std::string v268;
  int v269;
  uint64_t v270;
  uint64_t (**v271)();
  std::string v272;
  int v273;
  uint64_t v274;
  uint64_t (**v275)();
  std::string v276;
  int v277;
  uint64_t v278;
  uint64_t (**v279)();
  std::string __s;
  int v281;
  uint64_t v282;
  uint64_t (**v283)();
  std::string v284;
  int v285;
  char v286;
  std::string v287;
  uint64_t (**v288)();
  std::string v289;
  int v290;
  char v291;
  std::string v292;
  uint64_t (**v293)();
  std::string v294;
  int v295;
  char v296;
  std::string v297;
  uint64_t (**v298)();
  std::string v299;
  int v300;
  char v301;
  std::string v302;
  uint64_t (**v303)();
  std::string v304;
  int v305;
  uint64_t v306;
  int v307;
  uint64_t (**v308)();
  std::string v309;
  int v310;
  uint64_t v311;
  int v312;
  uint64_t (**v313)();
  std::string v314;
  int v315;
  uint64_t v316;
  uint64_t (**v317)();
  std::string v318;
  int v319;
  char v320;
  std::string v321;
  uint64_t (**v322)();
  std::string v323;
  int v324;
  uint64_t v325;
  uint64_t (**v326)();
  std::string v327;
  int v328;
  uint64_t v329;
  uint64_t (**v330)();
  std::string v331;
  int v332;
  uint64_t v333;
  uint64_t (**v334)();
  std::string v335;
  int v336;
  uint64_t v337;
  uint64_t (**v338)();
  std::string v339;
  int v340;
  char v341;
  void (**v342)(mediaplatform::Data *__hidden);
  size_t v343;
  size_t v344;
  const void *v345;
  char v346;
  uint64_t (**v347)();
  std::string v348;
  int v349;
  uint64_t v350;
  int v351;
  uint64_t (**v352)();
  std::string v353;
  int v354;
  char v355;
  std::string v356;
  uint64_t (**v357)();
  std::string v358;
  int v359;
  uint64_t v360;
  int v361;
  uint64_t (**v362)();
  std::string v363;
  int v364;
  uint64_t v365;
  int v366;
  uint64_t (**v367)();
  std::string v368;
  int v369;
  char v370;
  std::string v371;
  uint64_t (**v372)();
  std::string v373;
  int v374;
  uint64_t v375;
  uint64_t (**v376)();
  std::string v377;
  int v378;
  uint64_t v379;
  uint64_t (**v380)();
  std::string v381;
  int v382;
  uint64_t v383;
  uint64_t (**v384)();
  std::string v385;
  int v386;
  uint64_t v387;
  uint64_t (**v388)();
  std::string v389;
  int v390;
  uint64_t v391;
  uint64_t (**v392)();
  std::string v393;
  int v394;
  uint64_t v395;
  uint64_t (**v396)();
  std::string v397;
  int v398;
  uint64_t v399;
  uint64_t (**v400)();
  std::string v401;
  int v402;
  uint64_t v403;
  uint64_t (**v404)();
  std::string v405;
  int v406;
  uint64_t v407;
  int v408;
  uint64_t (**v409)();
  std::string v410;
  int v411;
  uint64_t v412;
  uint64_t (**v413)();
  std::string v414;
  int v415;
  uint64_t v416;
  uint64_t (**v417)();
  std::string v418;
  int v419;
  uint64_t v420;
  uint64_t (**v421)();
  std::string v422;
  int v423;
  uint64_t v424;
  uint64_t (**v425)();
  std::string v426;
  int v427;
  char v428;
  std::string v429;
  uint64_t (**v430)();
  std::string v431;
  int v432;
  char v433;
  std::string v434;
  uint64_t (**v435)();
  std::string v436;
  int v437;
  char v438;
  std::string v439;
  uint64_t (**v440)();
  std::string __p;
  int v442;
  uint64_t v443;
  int v444;
  uint64_t (**v445)();
  std::string v446;
  int v447;
  uint64_t v448;
  int v449;
  uint64_t (**v450)();
  std::string v451;
  int v452;
  uint64_t v453;
  uint64_t (**v454)();
  std::string v455;
  int v456;
  char v457;
  std::string v458;
  uint64_t (**v459)();
  std::string v460;
  int v461;
  uint64_t v462;
  uint64_t (**v463)();
  std::string v464;
  int v465;
  uint64_t v466;
  uint64_t (**v467)();
  std::string v468;
  int v469;
  uint64_t v470;
  uint64_t (**v471)();
  std::string v472;
  int v473;
  uint64_t v474;
  uint64_t (**v475)();
  std::string v476;
  int v477;
  char v478;
  void (**v479)(mediaplatform::Data *__hidden);
  size_t v480;
  size_t v481;
  void *v482;
  char v483;
  uint64_t (**v484)();
  std::string v485;
  int v486;
  uint64_t v487;
  int v488;
  uint64_t (**v489)();
  std::string v490;
  int v491;
  char v492;
  std::string v493;
  uint64_t (**v494)();
  std::string v495;
  int v496;
  uint64_t v497;
  int v498;
  uint64_t (**v499)();
  std::string v500;
  int v501;
  uint64_t v502;
  int v503;
  uint64_t (**v504)();
  std::string v505;
  int v506;
  char v507;
  std::string v508;
  uint64_t (**v509)();
  std::string v510;
  int v511;
  uint64_t v512;
  uint64_t (**v513)();
  std::string v514;
  int v515;
  uint64_t v516;
  uint64_t (**v517)();
  std::string v518;
  int v519;
  uint64_t v520;
  uint64_t (**v521)();
  std::string v522;
  int v523;
  uint64_t v524;
  uint64_t (**v525)();
  std::string v526;
  int v527;
  uint64_t v528;
  uint64_t (**v529)();
  std::string v530;
  int v531;
  uint64_t v532;
  uint64_t (**v533)();
  std::string v534;
  int v535;
  uint64_t v536;
  uint64_t (**v537)();
  std::string v538;
  int v539;
  uint64_t v540;
  uint64_t (**v541)();
  std::string v542;
  int v543;
  uint64_t v544;
  int v545;
  uint64_t (**v546)();
  std::string v547;
  int v548;
  uint64_t v549;
  uint64_t (**v550)();
  std::string v551;
  int v552;
  uint64_t v553;
  uint64_t (**v554)();
  std::string v555;
  int v556;
  uint64_t v557;

  v33 = MEMORY[0x24BDAC7A8](a1);
  v36 = v35;
  v38 = v37;
  v40 = v39;
  v42 = v41;
  v44 = v43;
  v45 = v34;
  v47 = v46;
  v145 = v33;
  v283 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(v34 + 31) < 0)
    std::string::__init_copy_ctor_external(&v284, *(const std::string::value_type **)(v34 + 8), *(_QWORD *)(v34 + 16));
  else
    v284 = *(std::string *)(v34 + 8);
  v285 = *(_DWORD *)(v45 + 32);
  v283 = &off_24C335AB8;
  v286 = *(_BYTE *)(v45 + 36);
  if (*(char *)(v45 + 63) < 0)
    std::string::__init_copy_ctor_external(&v287, *(const std::string::value_type **)(v45 + 40), *(_QWORD *)(v45 + 48));
  else
    v287 = *(std::string *)(v45 + 40);
  v91 = v47;
  if (*(char *)(v44 + 31) < 0)
    std::string::__init_copy_ctor_external(&__s, *(const std::string::value_type **)(v44 + 8), *(_QWORD *)(v44 + 16));
  else
    __s = *(std::string *)(v44 + 8);
  v48 = *(_DWORD *)(v44 + 32);
  v281 = v48;
  v279 = off_24C335AF8;
  v49 = *(_QWORD *)(v44 + 36);
  v282 = v49;
  if (*(char *)(v42 + 31) < 0)
    std::string::__init_copy_ctor_external(&v276, *(const std::string::value_type **)(v42 + 8), *(_QWORD *)(v42 + 16));
  else
    v276 = *(std::string *)(v42 + 8);
  v93 = *(_DWORD *)(v42 + 32);
  v277 = v93;
  v275 = off_24C335AF8;
  v143 = *(_QWORD *)(v42 + 36);
  v278 = v143;
  if (*(char *)(v40 + 31) < 0)
    std::string::__init_copy_ctor_external(&v272, *(const std::string::value_type **)(v40 + 8), *(_QWORD *)(v40 + 16));
  else
    v272 = *(std::string *)(v40 + 8);
  v141 = *(_DWORD *)(v40 + 32);
  v273 = v141;
  v271 = off_24C335AF8;
  v139 = *(_QWORD *)(v40 + 36);
  v274 = v139;
  if (*(char *)(v38 + 31) < 0)
    std::string::__init_copy_ctor_external(&v268, *(const std::string::value_type **)(v38 + 8), *(_QWORD *)(v38 + 16));
  else
    v268 = *(std::string *)(v38 + 8);
  v137 = *(_DWORD *)(v38 + 32);
  v269 = v137;
  v267 = off_24C335AF8;
  v135 = *(_QWORD *)(v38 + 36);
  v270 = v135;
  if (*(char *)(v36 + 31) < 0)
    std::string::__init_copy_ctor_external(&v263, *(const std::string::value_type **)(v36 + 8), *(_QWORD *)(v36 + 16));
  else
    v263 = *(std::string *)(v36 + 8);
  v50 = *(_DWORD *)(v36 + 32);
  v262 = off_24C335B18;
  v265 = *(_QWORD *)(v36 + 36);
  v51 = *(_DWORD *)(v36 + 44);
  v133 = v50;
  v264 = v50;
  v266 = v51;
  if (*(char *)(a9 + 31) < 0)
    std::string::__init_copy_ctor_external(&v259, *(const std::string::value_type **)(a9 + 8), *(_QWORD *)(a9 + 16));
  else
    v259 = *(std::string *)(a9 + 8);
  v131 = *(_DWORD *)(a9 + 32);
  v260 = v131;
  v258 = off_24C335AF8;
  v129 = *(_QWORD *)(a9 + 36);
  v261 = v129;
  if (*(char *)(a10 + 31) < 0)
    std::string::__init_copy_ctor_external(&v255, *(const std::string::value_type **)(a10 + 8), *(_QWORD *)(a10 + 16));
  else
    v255 = *(std::string *)(a10 + 8);
  v127 = *(_DWORD *)(a10 + 32);
  v256 = v127;
  v254 = off_24C335AF8;
  v125 = *(_QWORD *)(a10 + 36);
  v257 = v125;
  if (*(char *)(a11 + 31) < 0)
    std::string::__init_copy_ctor_external(&v251, *(const std::string::value_type **)(a11 + 8), *(_QWORD *)(a11 + 16));
  else
    v251 = *(std::string *)(a11 + 8);
  v123 = *(_DWORD *)(a11 + 32);
  v252 = v123;
  v250 = off_24C335AF8;
  v121 = *(_QWORD *)(a11 + 36);
  v253 = v121;
  if (*(char *)(a12 + 31) < 0)
    std::string::__init_copy_ctor_external(&v247, *(const std::string::value_type **)(a12 + 8), *(_QWORD *)(a12 + 16));
  else
    v247 = *(std::string *)(a12 + 8);
  v119 = *(_DWORD *)(a12 + 32);
  v248 = v119;
  v246 = off_24C335AF8;
  v118 = *(_QWORD *)(a12 + 36);
  v249 = v118;
  if (*(char *)(a13 + 31) < 0)
    std::string::__init_copy_ctor_external(&v243, *(const std::string::value_type **)(a13 + 8), *(_QWORD *)(a13 + 16));
  else
    v243 = *(std::string *)(a13 + 8);
  v117 = *(_DWORD *)(a13 + 32);
  v244 = v117;
  v242 = off_24C335AF8;
  v116 = *(_QWORD *)(a13 + 36);
  v245 = v116;
  if (*(char *)(a14 + 31) < 0)
    std::string::__init_copy_ctor_external(&v239, *(const std::string::value_type **)(a14 + 8), *(_QWORD *)(a14 + 16));
  else
    v239 = *(std::string *)(a14 + 8);
  v115 = *(_DWORD *)(a14 + 32);
  v240 = v115;
  v238 = off_24C335AF8;
  v114 = *(_QWORD *)(a14 + 36);
  v241 = v114;
  if (*(char *)(a15 + 31) < 0)
    std::string::__init_copy_ctor_external(&v235, *(const std::string::value_type **)(a15 + 8), *(_QWORD *)(a15 + 16));
  else
    v235 = *(std::string *)(a15 + 8);
  v113 = *(_DWORD *)(a15 + 32);
  v236 = v113;
  v234 = off_24C335AF8;
  v112 = *(_QWORD *)(a15 + 36);
  v237 = v112;
  if (*(char *)(a16 + 31) < 0)
    std::string::__init_copy_ctor_external(&v231, *(const std::string::value_type **)(a16 + 8), *(_QWORD *)(a16 + 16));
  else
    v231 = *(std::string *)(a16 + 8);
  v111 = *(_DWORD *)(a16 + 32);
  v232 = v111;
  v230 = off_24C335AF8;
  v110 = *(_QWORD *)(a16 + 36);
  v233 = v110;
  v225 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a17 + 31) < 0)
    std::string::__init_copy_ctor_external(&v226, *(const std::string::value_type **)(a17 + 8), *(_QWORD *)(a17 + 16));
  else
    v226 = *(std::string *)(a17 + 8);
  v227 = *(_DWORD *)(a17 + 32);
  v225 = &off_24C335AB8;
  v228 = *(_BYTE *)(a17 + 36);
  if (*(char *)(a17 + 63) < 0)
    std::string::__init_copy_ctor_external(&v229, *(const std::string::value_type **)(a17 + 40), *(_QWORD *)(a17 + 48));
  else
    v229 = *(std::string *)(a17 + 40);
  if (*(char *)(a18 + 31) < 0)
    std::string::__init_copy_ctor_external(&v221, *(const std::string::value_type **)(a18 + 8), *(_QWORD *)(a18 + 16));
  else
    v221 = *(std::string *)(a18 + 8);
  v52 = *(_DWORD *)(a18 + 32);
  v220 = off_24C335B18;
  v223 = *(_QWORD *)(a18 + 36);
  v53 = *(_DWORD *)(a18 + 44);
  v109 = v52;
  v222 = v52;
  v224 = v53;
  if (*(char *)(a19 + 31) < 0)
    std::string::__init_copy_ctor_external(&v216, *(const std::string::value_type **)(a19 + 8), *(_QWORD *)(a19 + 16));
  else
    v216 = *(std::string *)(a19 + 8);
  v54 = *(_DWORD *)(a19 + 32);
  v215 = off_24C335B18;
  v218 = *(_QWORD *)(a19 + 36);
  v55 = *(_DWORD *)(a19 + 44);
  v108 = v54;
  v217 = v54;
  v219 = v55;
  v210 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a20 + 31) < 0)
    std::string::__init_copy_ctor_external(&v211, *(const std::string::value_type **)(a20 + 8), *(_QWORD *)(a20 + 16));
  else
    v211 = *(std::string *)(a20 + 8);
  v212 = *(_DWORD *)(a20 + 32);
  v210 = &off_24C335AB8;
  v213 = *(_BYTE *)(a20 + 36);
  if (*(char *)(a20 + 63) < 0)
    std::string::__init_copy_ctor_external(&v214, *(const std::string::value_type **)(a20 + 40), *(_QWORD *)(a20 + 48));
  else
    v214 = *(std::string *)(a20 + 40);
  if (*(char *)(a21 + 31) < 0)
    std::string::__init_copy_ctor_external(&v206, *(const std::string::value_type **)(a21 + 8), *(_QWORD *)(a21 + 16));
  else
    v206 = *(std::string *)(a21 + 8);
  v56 = *(_DWORD *)(a21 + 32);
  v205 = off_24C335B18;
  v208 = *(_QWORD *)(a21 + 36);
  v57 = *(_DWORD *)(a21 + 44);
  v107 = v56;
  v207 = v56;
  v209 = v57;
  v196 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a22 + 31) < 0)
    std::string::__init_copy_ctor_external(&v197, *(const std::string::value_type **)(a22 + 8), *(_QWORD *)(a22 + 16));
  else
    v197 = *(std::string *)(a22 + 8);
  v198 = *(_DWORD *)(a22 + 32);
  v196 = &off_24C335A98;
  v199 = *(_BYTE *)(a22 + 36);
  v58 = *(const void **)(a22 + 64);
  v59 = *(_QWORD *)(a22 + 48);
  v200 = &off_24C331510;
  v201 = v59;
  v202 = v59;
  if (v59)
    v60 = (void *)operator new[]();
  else
    v60 = 0;
  v203 = v60;
  v204 = 1;
  if (v58)
    memcpy(v60, v58, v59);
  else
    bzero(v60, v59);
  if (*(char *)(a23 + 31) < 0)
    std::string::__init_copy_ctor_external(&v193, *(const std::string::value_type **)(a23 + 8), *(_QWORD *)(a23 + 16));
  else
    v193 = *(std::string *)(a23 + 8);
  v106 = *(_DWORD *)(a23 + 32);
  v194 = v106;
  v192 = off_24C335AF8;
  v105 = *(_QWORD *)(a23 + 36);
  v195 = v105;
  if (*(char *)(a24 + 31) < 0)
    std::string::__init_copy_ctor_external(&v189, *(const std::string::value_type **)(a24 + 8), *(_QWORD *)(a24 + 16));
  else
    v189 = *(std::string *)(a24 + 8);
  v104 = *(_DWORD *)(a24 + 32);
  v190 = v104;
  v188 = off_24C335AF8;
  v103 = *(_QWORD *)(a24 + 36);
  v191 = v103;
  if (*(char *)(a25 + 31) < 0)
    std::string::__init_copy_ctor_external(&v185, *(const std::string::value_type **)(a25 + 8), *(_QWORD *)(a25 + 16));
  else
    v185 = *(std::string *)(a25 + 8);
  v102 = *(_DWORD *)(a25 + 32);
  v186 = v102;
  v184 = off_24C335AF8;
  v101 = *(_QWORD *)(a25 + 36);
  v187 = v101;
  if (*(char *)(a26 + 31) < 0)
    std::string::__init_copy_ctor_external(&v181, *(const std::string::value_type **)(a26 + 8), *(_QWORD *)(a26 + 16));
  else
    v181 = *(std::string *)(a26 + 8);
  v100 = *(_DWORD *)(a26 + 32);
  v182 = v100;
  v180 = off_24C335AF8;
  v99 = *(_QWORD *)(a26 + 36);
  v183 = v99;
  v175 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a27 + 31) < 0)
    std::string::__init_copy_ctor_external(&v176, *(const std::string::value_type **)(a27 + 8), *(_QWORD *)(a27 + 16));
  else
    v176 = *(std::string *)(a27 + 8);
  v177 = *(_DWORD *)(a27 + 32);
  v175 = &off_24C335AB8;
  v178 = *(_BYTE *)(a27 + 36);
  if (*(char *)(a27 + 63) < 0)
    std::string::__init_copy_ctor_external(&v179, *(const std::string::value_type **)(a27 + 40), *(_QWORD *)(a27 + 48));
  else
    v179 = *(std::string *)(a27 + 40);
  if (*(char *)(a28 + 31) < 0)
    std::string::__init_copy_ctor_external(&v172, *(const std::string::value_type **)(a28 + 8), *(_QWORD *)(a28 + 16));
  else
    v172 = *(std::string *)(a28 + 8);
  v98 = *(_DWORD *)(a28 + 32);
  v173 = v98;
  v171 = off_24C335AF8;
  v97 = *(_QWORD *)(a28 + 36);
  v174 = v97;
  if (*(char *)(a29 + 31) < 0)
    std::string::__init_copy_ctor_external(&v167, *(const std::string::value_type **)(a29 + 8), *(_QWORD *)(a29 + 16));
  else
    v167 = *(std::string *)(a29 + 8);
  v61 = *(_DWORD *)(a29 + 32);
  v166 = off_24C335B18;
  v169 = *(_QWORD *)(a29 + 36);
  v62 = *(_DWORD *)(a29 + 44);
  v96 = v61;
  v168 = v61;
  v170 = v62;
  if (*(char *)(a30 + 31) < 0)
    std::string::__init_copy_ctor_external(&v162, *(const std::string::value_type **)(a30 + 8), *(_QWORD *)(a30 + 16));
  else
    v162 = *(std::string *)(a30 + 8);
  v63 = *(_DWORD *)(a30 + 32);
  v161 = off_24C335B18;
  v164 = *(_QWORD *)(a30 + 36);
  v64 = *(_DWORD *)(a30 + 44);
  v95 = v63;
  v163 = v63;
  v165 = v64;
  v156 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a31 + 31) < 0)
    std::string::__init_copy_ctor_external(&v157, *(const std::string::value_type **)(a31 + 8), *(_QWORD *)(a31 + 16));
  else
    v157 = *(std::string *)(a31 + 8);
  v158 = *(_DWORD *)(a31 + 32);
  v156 = &off_24C335AB8;
  v159 = *(_BYTE *)(a31 + 36);
  if (*(char *)(a31 + 63) < 0)
    std::string::__init_copy_ctor_external(&v160, *(const std::string::value_type **)(a31 + 40), *(_QWORD *)(a31 + 48));
  else
    v160 = *(std::string *)(a31 + 40);
  v151 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a32 + 31) < 0)
    std::string::__init_copy_ctor_external(&v152, *(const std::string::value_type **)(a32 + 8), *(_QWORD *)(a32 + 16));
  else
    v152 = *(std::string *)(a32 + 8);
  v153 = *(_DWORD *)(a32 + 32);
  v151 = &off_24C335AB8;
  v154 = *(_BYTE *)(a32 + 36);
  if (*(char *)(a32 + 63) < 0)
    std::string::__init_copy_ctor_external(&v155, *(const std::string::value_type **)(a32 + 40), *(_QWORD *)(a32 + 48));
  else
    v155 = *(std::string *)(a32 + 40);
  v146 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a33 + 31) < 0)
    std::string::__init_copy_ctor_external(&v147, *(const std::string::value_type **)(a33 + 8), *(_QWORD *)(a33 + 16));
  else
    v147 = *(std::string *)(a33 + 8);
  v148 = *(_DWORD *)(a33 + 32);
  v146 = &off_24C335AB8;
  v149 = *(_BYTE *)(a33 + 36);
  if (*(char *)(a33 + 63) < 0)
    std::string::__init_copy_ctor_external(&v150, *(const std::string::value_type **)(a33 + 40), *(_QWORD *)(a33 + 48));
  else
    v150 = *(std::string *)(a33 + 40);
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v422, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
  else
    v422 = __s;
  v423 = v48;
  v421 = off_24C335AF8;
  v424 = v49;
  if (SHIBYTE(v276.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v418, v276.__r_.__value_.__l.__data_, v276.__r_.__value_.__l.__size_);
  else
    v418 = v276;
  v419 = v93;
  v417 = off_24C335AF8;
  v420 = v143;
  if (SHIBYTE(v272.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v414, v272.__r_.__value_.__l.__data_, v272.__r_.__value_.__l.__size_);
  else
    v414 = v272;
  v415 = v141;
  v413 = off_24C335AF8;
  v416 = v139;
  v409 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v268.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v410, v268.__r_.__value_.__l.__data_, v268.__r_.__value_.__l.__size_);
  else
    v410 = v268;
  v411 = v137;
  v409 = off_24C335AF8;
  v412 = v135;
  v404 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v263.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v405, v263.__r_.__value_.__l.__data_, v263.__r_.__value_.__l.__size_);
  else
    v405 = v263;
  v404 = off_24C335B18;
  v407 = v265;
  v406 = v133;
  v408 = v266;
  v400 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v259.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v401, v259.__r_.__value_.__l.__data_, v259.__r_.__value_.__l.__size_);
  else
    v401 = v259;
  v402 = v131;
  v400 = off_24C335AF8;
  v403 = v129;
  v396 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v255.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v397, v255.__r_.__value_.__l.__data_, v255.__r_.__value_.__l.__size_);
  else
    v397 = v255;
  v398 = v127;
  v396 = off_24C335AF8;
  v399 = v125;
  v392 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v251.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v393, v251.__r_.__value_.__l.__data_, v251.__r_.__value_.__l.__size_);
  else
    v393 = v251;
  v394 = v123;
  v392 = off_24C335AF8;
  v395 = v121;
  v388 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v247.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v389, v247.__r_.__value_.__l.__data_, v247.__r_.__value_.__l.__size_);
  else
    v389 = v247;
  v390 = v119;
  v388 = off_24C335AF8;
  v391 = v118;
  v384 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v243.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v385, v243.__r_.__value_.__l.__data_, v243.__r_.__value_.__l.__size_);
  else
    v385 = v243;
  v386 = v117;
  v384 = off_24C335AF8;
  v387 = v116;
  v380 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v239.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v381, v239.__r_.__value_.__l.__data_, v239.__r_.__value_.__l.__size_);
  else
    v381 = v239;
  v382 = v115;
  v380 = off_24C335AF8;
  v383 = v114;
  v376 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v235.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v377, v235.__r_.__value_.__l.__data_, v235.__r_.__value_.__l.__size_);
  else
    v377 = v235;
  v378 = v113;
  v376 = off_24C335AF8;
  v379 = v112;
  v372 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v231.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v373, v231.__r_.__value_.__l.__data_, v231.__r_.__value_.__l.__size_);
  else
    v373 = v231;
  v374 = v111;
  v372 = off_24C335AF8;
  v375 = v110;
  v367 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v226.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v368, v226.__r_.__value_.__l.__data_, v226.__r_.__value_.__l.__size_);
  else
    v368 = v226;
  v369 = v227;
  v367 = &off_24C335AB8;
  v370 = v228;
  if (SHIBYTE(v229.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v371, v229.__r_.__value_.__l.__data_, v229.__r_.__value_.__l.__size_);
  else
    v371 = v229;
  v362 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v221.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v363, v221.__r_.__value_.__l.__data_, v221.__r_.__value_.__l.__size_);
  else
    v363 = v221;
  v362 = off_24C335B18;
  v365 = v223;
  v364 = v109;
  v366 = v224;
  v357 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v216.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v358, v216.__r_.__value_.__l.__data_, v216.__r_.__value_.__l.__size_);
  else
    v358 = v216;
  v357 = off_24C335B18;
  v360 = v218;
  v359 = v108;
  v361 = v219;
  v352 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v211.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v353, v211.__r_.__value_.__l.__data_, v211.__r_.__value_.__l.__size_);
  else
    v353 = v211;
  v354 = v212;
  v352 = &off_24C335AB8;
  v355 = v213;
  if (SHIBYTE(v214.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v356, v214.__r_.__value_.__l.__data_, v214.__r_.__value_.__l.__size_);
  else
    v356 = v214;
  v347 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v206.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v348, v206.__r_.__value_.__l.__data_, v206.__r_.__value_.__l.__size_);
  else
    v348 = v206;
  v347 = off_24C335B18;
  v350 = v208;
  v349 = v107;
  v351 = v209;
  v338 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v197.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v339, v197.__r_.__value_.__l.__data_, v197.__r_.__value_.__l.__size_);
  else
    v339 = v197;
  v340 = v198;
  v338 = &off_24C335A98;
  v341 = v199;
  v65 = v203;
  v66 = v201;
  v342 = &off_24C331510;
  v343 = v201;
  v344 = v201;
  if (v201)
    v67 = (void *)operator new[]();
  else
    v67 = 0;
  v345 = v67;
  v346 = 1;
  if (v65)
    memcpy(v67, v65, v66);
  else
    bzero(v67, v66);
  v334 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v193.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v335, v193.__r_.__value_.__l.__data_, v193.__r_.__value_.__l.__size_);
  else
    v335 = v193;
  v336 = v106;
  v334 = off_24C335AF8;
  v337 = v105;
  v330 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v189.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v331, v189.__r_.__value_.__l.__data_, v189.__r_.__value_.__l.__size_);
  else
    v331 = v189;
  v332 = v104;
  v330 = off_24C335AF8;
  v333 = v103;
  v326 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v185.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v327, v185.__r_.__value_.__l.__data_, v185.__r_.__value_.__l.__size_);
  else
    v327 = v185;
  v328 = v102;
  v326 = off_24C335AF8;
  v329 = v101;
  v322 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v181.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v323, v181.__r_.__value_.__l.__data_, v181.__r_.__value_.__l.__size_);
  else
    v323 = v181;
  v324 = v100;
  v322 = off_24C335AF8;
  v325 = v99;
  v317 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v176.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v318, v176.__r_.__value_.__l.__data_, v176.__r_.__value_.__l.__size_);
  else
    v318 = v176;
  v319 = v177;
  v317 = &off_24C335AB8;
  v320 = v178;
  if (SHIBYTE(v179.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v321, v179.__r_.__value_.__l.__data_, v179.__r_.__value_.__l.__size_);
  else
    v321 = v179;
  v313 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v172.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v314, v172.__r_.__value_.__l.__data_, v172.__r_.__value_.__l.__size_);
  else
    v314 = v172;
  v315 = v98;
  v313 = off_24C335AF8;
  v316 = v97;
  v308 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v167.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v309, v167.__r_.__value_.__l.__data_, v167.__r_.__value_.__l.__size_);
  else
    v309 = v167;
  v308 = off_24C335B18;
  v311 = v169;
  v310 = v96;
  v312 = v170;
  v303 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v162.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v304, v162.__r_.__value_.__l.__data_, v162.__r_.__value_.__l.__size_);
  else
    v304 = v162;
  v303 = off_24C335B18;
  v306 = v164;
  v305 = v95;
  v307 = v165;
  v298 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v157.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v299, v157.__r_.__value_.__l.__data_, v157.__r_.__value_.__l.__size_);
  else
    v299 = v157;
  v300 = v158;
  v298 = &off_24C335AB8;
  v301 = v159;
  if (SHIBYTE(v160.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v302, v160.__r_.__value_.__l.__data_, v160.__r_.__value_.__l.__size_);
  else
    v302 = v160;
  v293 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v152.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v294, v152.__r_.__value_.__l.__data_, v152.__r_.__value_.__l.__size_);
  else
    v294 = v152;
  v295 = v153;
  v293 = &off_24C335AB8;
  v296 = v154;
  if (SHIBYTE(v155.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v297, v155.__r_.__value_.__l.__data_, v155.__r_.__value_.__l.__size_);
  else
    v297 = v155;
  v288 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v147.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v289, v147.__r_.__value_.__l.__data_, v147.__r_.__value_.__l.__size_);
  else
    v289 = v147;
  v290 = v148;
  v288 = &off_24C335AB8;
  v291 = v149;
  if (SHIBYTE(v150.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v292, v150.__r_.__value_.__l.__data_, v150.__r_.__value_.__l.__size_);
  else
    v292 = v150;
  v554 = (uint64_t (**)())off_24C335D90;
  v68 = SHIBYTE(v418.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v418.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v555, v418.__r_.__value_.__l.__data_, v418.__r_.__value_.__l.__size_);
  else
    v555 = v418;
  v556 = v93;
  v554 = off_24C335AF8;
  v557 = v143;
  v550 = (uint64_t (**)())off_24C335D90;
  v69 = SHIBYTE(v414.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v414.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v551, v414.__r_.__value_.__l.__data_, v414.__r_.__value_.__l.__size_);
  else
    v551 = v414;
  v552 = v141;
  v550 = off_24C335AF8;
  v553 = v139;
  v546 = (uint64_t (**)())off_24C335D90;
  v70 = SHIBYTE(v410.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v410.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v547, v410.__r_.__value_.__l.__data_, v410.__r_.__value_.__l.__size_);
  else
    v547 = v410;
  v548 = v137;
  v546 = off_24C335AF8;
  v549 = v135;
  v541 = (uint64_t (**)())off_24C335D90;
  v71 = SHIBYTE(v405.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v405.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v542, v405.__r_.__value_.__l.__data_, v405.__r_.__value_.__l.__size_);
  else
    v542 = v405;
  v541 = off_24C335B18;
  v544 = v407;
  v543 = v133;
  v545 = v408;
  v537 = (uint64_t (**)())off_24C335D90;
  v144 = SHIBYTE(v401.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v401.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v538, v401.__r_.__value_.__l.__data_, v401.__r_.__value_.__l.__size_);
  else
    v538 = v401;
  v539 = v131;
  v537 = off_24C335AF8;
  v540 = v129;
  v533 = (uint64_t (**)())off_24C335D90;
  v142 = SHIBYTE(v397.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v397.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v534, v397.__r_.__value_.__l.__data_, v397.__r_.__value_.__l.__size_);
  else
    v534 = v397;
  v535 = v127;
  v533 = off_24C335AF8;
  v536 = v125;
  v529 = (uint64_t (**)())off_24C335D90;
  v140 = SHIBYTE(v393.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v393.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v530, v393.__r_.__value_.__l.__data_, v393.__r_.__value_.__l.__size_);
  else
    v530 = v393;
  v531 = v123;
  v529 = off_24C335AF8;
  v532 = v121;
  v525 = (uint64_t (**)())off_24C335D90;
  v72 = SHIBYTE(v389.__r_.__value_.__r.__words[2]);
  v138 = v71;
  if (SHIBYTE(v389.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v526, v389.__r_.__value_.__l.__data_, v389.__r_.__value_.__l.__size_);
  else
    v526 = v389;
  v527 = v119;
  v525 = off_24C335AF8;
  v528 = v118;
  v521 = (uint64_t (**)())off_24C335D90;
  v136 = SHIBYTE(v385.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v385.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v522, v385.__r_.__value_.__l.__data_, v385.__r_.__value_.__l.__size_);
  else
    v522 = v385;
  v523 = v117;
  v521 = off_24C335AF8;
  v524 = v116;
  v517 = (uint64_t (**)())off_24C335D90;
  v134 = SHIBYTE(v381.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v381.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v518, v381.__r_.__value_.__l.__data_, v381.__r_.__value_.__l.__size_);
  else
    v518 = v381;
  v519 = v115;
  v517 = off_24C335AF8;
  v520 = v114;
  v513 = (uint64_t (**)())off_24C335D90;
  v132 = SHIBYTE(v377.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v377.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v514, v377.__r_.__value_.__l.__data_, v377.__r_.__value_.__l.__size_);
  else
    v514 = v377;
  v515 = v113;
  v513 = off_24C335AF8;
  v516 = v112;
  v509 = (uint64_t (**)())off_24C335D90;
  v130 = SHIBYTE(v373.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v373.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v510, v373.__r_.__value_.__l.__data_, v373.__r_.__value_.__l.__size_);
  else
    v510 = v373;
  v511 = v111;
  v509 = off_24C335AF8;
  v512 = v110;
  v504 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v368.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v505, v368.__r_.__value_.__l.__data_, v368.__r_.__value_.__l.__size_);
  else
    v505 = v368;
  v506 = v369;
  v504 = &off_24C335AB8;
  v507 = v370;
  if (SHIBYTE(v371.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v508, v371.__r_.__value_.__l.__data_, v371.__r_.__value_.__l.__size_);
  else
    v508 = v371;
  v499 = (uint64_t (**)())off_24C335D90;
  v128 = SHIBYTE(v363.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v363.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v500, v363.__r_.__value_.__l.__data_, v363.__r_.__value_.__l.__size_);
  else
    v500 = v363;
  v499 = off_24C335B18;
  v502 = v365;
  v501 = v109;
  v503 = v366;
  v494 = (uint64_t (**)())off_24C335D90;
  v126 = SHIBYTE(v358.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v358.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v495, v358.__r_.__value_.__l.__data_, v358.__r_.__value_.__l.__size_);
  else
    v495 = v358;
  v494 = off_24C335B18;
  v497 = v360;
  v496 = v108;
  v498 = v361;
  v489 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v353.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v490, v353.__r_.__value_.__l.__data_, v353.__r_.__value_.__l.__size_);
  else
    v490 = v353;
  v491 = v354;
  v489 = &off_24C335AB8;
  v492 = v355;
  if (SHIBYTE(v356.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v493, v356.__r_.__value_.__l.__data_, v356.__r_.__value_.__l.__size_);
  else
    v493 = v356;
  v484 = (uint64_t (**)())off_24C335D90;
  v124 = SHIBYTE(v348.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v348.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v485, v348.__r_.__value_.__l.__data_, v348.__r_.__value_.__l.__size_);
  else
    v485 = v348;
  v122 = v70;
  v484 = off_24C335B18;
  v487 = v350;
  v486 = v107;
  v488 = v351;
  v475 = (uint64_t (**)())off_24C335D90;
  v92 = v68;
  if (SHIBYTE(v339.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v476, v339.__r_.__value_.__l.__data_, v339.__r_.__value_.__l.__size_);
  else
    v476 = v339;
  v477 = v340;
  v475 = &off_24C335A98;
  v478 = v341;
  v73 = v345;
  v74 = v343;
  v479 = &off_24C331510;
  v480 = v343;
  v481 = v343;
  if (v343)
    v75 = (void *)operator new[]();
  else
    v75 = 0;
  v482 = v75;
  v483 = 1;
  if (v73)
    memcpy(v75, v73, v74);
  else
    bzero(v75, v74);
  v471 = (uint64_t (**)())off_24C335D90;
  v76 = SHIBYTE(v335.__r_.__value_.__r.__words[2]);
  v94 = v72;
  if (SHIBYTE(v335.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v472, v335.__r_.__value_.__l.__data_, v335.__r_.__value_.__l.__size_);
  else
    v472 = v335;
  v473 = v106;
  v471 = off_24C335AF8;
  v474 = v105;
  v467 = (uint64_t (**)())off_24C335D90;
  v77 = SHIBYTE(v331.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v331.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v468, v331.__r_.__value_.__l.__data_, v331.__r_.__value_.__l.__size_);
  else
    v468 = v331;
  v469 = v104;
  v467 = off_24C335AF8;
  v470 = v103;
  v463 = (uint64_t (**)())off_24C335D90;
  v78 = SHIBYTE(v327.__r_.__value_.__r.__words[2]);
  v120 = v77;
  if (SHIBYTE(v327.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v464, v327.__r_.__value_.__l.__data_, v327.__r_.__value_.__l.__size_);
  else
    v464 = v327;
  v465 = v102;
  v463 = off_24C335AF8;
  v466 = v101;
  v459 = (uint64_t (**)())off_24C335D90;
  v79 = SHIBYTE(v323.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v323.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v460, v323.__r_.__value_.__l.__data_, v323.__r_.__value_.__l.__size_);
  else
    v460 = v323;
  v461 = v100;
  v459 = off_24C335AF8;
  v462 = v99;
  v454 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v318.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v455, v318.__r_.__value_.__l.__data_, v318.__r_.__value_.__l.__size_);
  else
    v455 = v318;
  v456 = v319;
  v454 = &off_24C335AB8;
  v457 = v320;
  if (SHIBYTE(v321.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v458, v321.__r_.__value_.__l.__data_, v321.__r_.__value_.__l.__size_);
  else
    v458 = v321;
  v450 = (uint64_t (**)())off_24C335D90;
  v80 = SHIBYTE(v314.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v314.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v451, v314.__r_.__value_.__l.__data_, v314.__r_.__value_.__l.__size_);
  else
    v451 = v314;
  v452 = v98;
  v450 = off_24C335AF8;
  v453 = v97;
  v445 = (uint64_t (**)())off_24C335D90;
  v81 = SHIBYTE(v309.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v309.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v446, v309.__r_.__value_.__l.__data_, v309.__r_.__value_.__l.__size_);
  else
    v446 = v309;
  v445 = off_24C335B18;
  v448 = v311;
  v447 = v96;
  v449 = v312;
  v440 = (uint64_t (**)())off_24C335D90;
  v82 = SHIBYTE(v304.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v304.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&__p, v304.__r_.__value_.__l.__data_, v304.__r_.__value_.__l.__size_);
  else
    __p = v304;
  v440 = off_24C335B18;
  v443 = v306;
  v442 = v95;
  v444 = v307;
  v435 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v299.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v436, v299.__r_.__value_.__l.__data_, v299.__r_.__value_.__l.__size_);
  else
    v436 = v299;
  v437 = v300;
  v435 = &off_24C335AB8;
  v438 = v301;
  if (SHIBYTE(v302.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v439, v302.__r_.__value_.__l.__data_, v302.__r_.__value_.__l.__size_);
  else
    v439 = v302;
  v430 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v294.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v431, v294.__r_.__value_.__l.__data_, v294.__r_.__value_.__l.__size_);
  else
    v431 = v294;
  v432 = v295;
  v430 = &off_24C335AB8;
  v433 = v296;
  if (SHIBYTE(v297.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v434, v297.__r_.__value_.__l.__data_, v297.__r_.__value_.__l.__size_);
  else
    v434 = v297;
  v425 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v289.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v426, v289.__r_.__value_.__l.__data_, v289.__r_.__value_.__l.__size_);
  else
    v426 = v289;
  v427 = v290;
  v425 = &off_24C335AB8;
  v428 = v291;
  if (SHIBYTE(v292.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v429, v292.__r_.__value_.__l.__data_, v292.__r_.__value_.__l.__size_);
  else
    v429 = v292;
  mediaplatform::DatabaseColumnTuple<10ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>>::DatabaseColumnTuple(v145, (uint64_t)&v554, (uint64_t)&v550, (uint64_t)&v546, (uint64_t)&v541, (uint64_t)&v537, (uint64_t)&v533, (uint64_t)&v529, (uint64_t)&v525, (uint64_t)&v521, (uint64_t)&v517, (uint64_t)&v513, (uint64_t)&v509, (uint64_t)&v504, (uint64_t)&v499, (uint64_t)&v494, (uint64_t)&v489, (uint64_t)&v484, (uint64_t)&v475,
    (uint64_t)&v471,
    (uint64_t)&v467,
    (uint64_t)&v463,
    (uint64_t)&v459,
    (uint64_t)&v454,
    (uint64_t)&v450,
    (uint64_t)&v445,
    (uint64_t)&v440,
    (uint64_t)&v435,
    (uint64_t)&v430,
    (uint64_t)&v425);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v425);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v430);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v435);
  v440 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v445 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v446.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v446.__r_.__value_.__l.__data_);
  v450 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v451.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v451.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v454);
  v459 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v460.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v460.__r_.__value_.__l.__data_);
  v463 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v464.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v464.__r_.__value_.__l.__data_);
  v467 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v468.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v468.__r_.__value_.__l.__data_);
  v471 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v472.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v472.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<mediaplatform::Data>::~DatabaseColumn((uint64_t)&v475);
  v484 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v485.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v485.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v489);
  v494 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v495.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v495.__r_.__value_.__l.__data_);
  v499 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v500.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v500.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v504);
  v509 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v510.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v510.__r_.__value_.__l.__data_);
  v513 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v514.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v514.__r_.__value_.__l.__data_);
  v517 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v518.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v518.__r_.__value_.__l.__data_);
  v521 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v522.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v522.__r_.__value_.__l.__data_);
  v525 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v526.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v526.__r_.__value_.__l.__data_);
  v529 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v530.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v530.__r_.__value_.__l.__data_);
  v533 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v534.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v534.__r_.__value_.__l.__data_);
  v537 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v538.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v538.__r_.__value_.__l.__data_);
  v541 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v542.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v542.__r_.__value_.__l.__data_);
  v546 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v547.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v547.__r_.__value_.__l.__data_);
  v550 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v551.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v551.__r_.__value_.__l.__data_);
  v554 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v555.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v555.__r_.__value_.__l.__data_);
  *(_QWORD *)(v145 + 1520) = off_24C335D90;
  v83 = (std::string *)(v145 + 1528);
  v84 = SHIBYTE(v422.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v422.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v83, v422.__r_.__value_.__l.__data_, v422.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v83->__r_.__value_.__l.__data_ = *(_OWORD *)&v422.__r_.__value_.__l.__data_;
    *(_QWORD *)(v145 + 1544) = *((_QWORD *)&v422.__r_.__value_.__l + 2);
  }
  *(_DWORD *)(v145 + 1552) = v423;
  *(_QWORD *)(v145 + 1520) = off_24C335AF8;
  *(_QWORD *)(v145 + 1556) = v424;
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v288);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v293);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v298);
  v303 = (uint64_t (**)())off_24C335D90;
  if (v82 < 0)
    operator delete(v304.__r_.__value_.__l.__data_);
  v308 = (uint64_t (**)())off_24C335D90;
  if (v81 < 0)
    operator delete(v309.__r_.__value_.__l.__data_);
  v313 = (uint64_t (**)())off_24C335D90;
  if (v80 < 0)
    operator delete(v314.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v317);
  v322 = (uint64_t (**)())off_24C335D90;
  if (v79 < 0)
    operator delete(v323.__r_.__value_.__l.__data_);
  v326 = (uint64_t (**)())off_24C335D90;
  if (v78 < 0)
    operator delete(v327.__r_.__value_.__l.__data_);
  v330 = (uint64_t (**)())off_24C335D90;
  if (v120 < 0)
    operator delete(v331.__r_.__value_.__l.__data_);
  v334 = (uint64_t (**)())off_24C335D90;
  if (v76 < 0)
    operator delete(v335.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<mediaplatform::Data>::~DatabaseColumn((uint64_t)&v338);
  v347 = (uint64_t (**)())off_24C335D90;
  if (v124 < 0)
    operator delete(v348.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v352);
  v357 = (uint64_t (**)())off_24C335D90;
  if (v126 < 0)
    operator delete(v358.__r_.__value_.__l.__data_);
  v362 = (uint64_t (**)())off_24C335D90;
  if (v128 < 0)
    operator delete(v363.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v367);
  v372 = (uint64_t (**)())off_24C335D90;
  if (v130 < 0)
    operator delete(v373.__r_.__value_.__l.__data_);
  v376 = (uint64_t (**)())off_24C335D90;
  if (v132 < 0)
    operator delete(v377.__r_.__value_.__l.__data_);
  v380 = (uint64_t (**)())off_24C335D90;
  if (v134 < 0)
    operator delete(v381.__r_.__value_.__l.__data_);
  v384 = (uint64_t (**)())off_24C335D90;
  if (v136 < 0)
    operator delete(v385.__r_.__value_.__l.__data_);
  v388 = (uint64_t (**)())off_24C335D90;
  if (v94 < 0)
    operator delete(v389.__r_.__value_.__l.__data_);
  v392 = (uint64_t (**)())off_24C335D90;
  if (v140 < 0)
    operator delete(v393.__r_.__value_.__l.__data_);
  v396 = (uint64_t (**)())off_24C335D90;
  if (v142 < 0)
    operator delete(v397.__r_.__value_.__l.__data_);
  v400 = (uint64_t (**)())off_24C335D90;
  if (v144 < 0)
    operator delete(v401.__r_.__value_.__l.__data_);
  v404 = (uint64_t (**)())off_24C335D90;
  if (v138 < 0)
    operator delete(v405.__r_.__value_.__l.__data_);
  v409 = (uint64_t (**)())off_24C335D90;
  if (v122 < 0)
    operator delete(v410.__r_.__value_.__l.__data_);
  v413 = (uint64_t (**)())off_24C335D90;
  if (v69 < 0)
    operator delete(v414.__r_.__value_.__l.__data_);
  v417 = (uint64_t (**)())off_24C335D90;
  if (v92 < 0)
    operator delete(v418.__r_.__value_.__l.__data_);
  v421 = (uint64_t (**)())off_24C335D90;
  if (v84 < 0)
    operator delete(v422.__r_.__value_.__l.__data_);
  *(_QWORD *)(v145 + 1568) = off_24C335D90;
  v85 = (std::string *)(v145 + 1576);
  if (SHIBYTE(v284.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v85, v284.__r_.__value_.__l.__data_, v284.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v85->__r_.__value_.__l.__data_ = *(_OWORD *)&v284.__r_.__value_.__l.__data_;
    *(_QWORD *)(v145 + 1592) = *((_QWORD *)&v284.__r_.__value_.__l + 2);
  }
  *(_DWORD *)(v145 + 1600) = v285;
  *(_QWORD *)(v145 + 1568) = &off_24C335AB8;
  *(_BYTE *)(v145 + 1604) = v286;
  v86 = (std::string *)(v145 + 1608);
  if (SHIBYTE(v287.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v86, v287.__r_.__value_.__l.__data_, v287.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v86->__r_.__value_.__l.__data_ = *(_OWORD *)&v287.__r_.__value_.__l.__data_;
    *(_QWORD *)(v145 + 1624) = *((_QWORD *)&v287.__r_.__value_.__l + 2);
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v146);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v151);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v156);
  v161 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v162.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v162.__r_.__value_.__l.__data_);
  v166 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v167.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v167.__r_.__value_.__l.__data_);
  v171 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v172.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v172.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v175);
  v180 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v181.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v181.__r_.__value_.__l.__data_);
  if (SHIBYTE(v185.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v185.__r_.__value_.__l.__data_);
  if (SHIBYTE(v189.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v189.__r_.__value_.__l.__data_);
  if (SHIBYTE(v193.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v193.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<mediaplatform::Data>::~DatabaseColumn((uint64_t)&v196);
  if (SHIBYTE(v206.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v206.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v210);
  if (SHIBYTE(v216.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v216.__r_.__value_.__l.__data_);
  if (SHIBYTE(v221.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v221.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v225);
  if (SHIBYTE(v231.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v231.__r_.__value_.__l.__data_);
  if (SHIBYTE(v235.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v235.__r_.__value_.__l.__data_);
  if (SHIBYTE(v239.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v239.__r_.__value_.__l.__data_);
  if (SHIBYTE(v243.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v243.__r_.__value_.__l.__data_);
  if (SHIBYTE(v247.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v247.__r_.__value_.__l.__data_);
  if (SHIBYTE(v251.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v251.__r_.__value_.__l.__data_);
  if (SHIBYTE(v255.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v255.__r_.__value_.__l.__data_);
  if (SHIBYTE(v259.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v259.__r_.__value_.__l.__data_);
  if (SHIBYTE(v263.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v263.__r_.__value_.__l.__data_);
  if (SHIBYTE(v268.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v268.__r_.__value_.__l.__data_);
  if (SHIBYTE(v272.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v272.__r_.__value_.__l.__data_);
  if (SHIBYTE(v276.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v276.__r_.__value_.__l.__data_);
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__s.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v283);
  *(_QWORD *)(v145 + 1632) = off_24C335D90;
  if (*(char *)(v91 + 31) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(v145 + 1640), *(const std::string::value_type **)(v91 + 8), *(_QWORD *)(v91 + 16));
  }
  else
  {
    v87 = *(_OWORD *)(v91 + 8);
    *(_QWORD *)(v145 + 1656) = *(_QWORD *)(v91 + 24);
    *(_OWORD *)(v145 + 1640) = v87;
  }
  *(_DWORD *)(v145 + 1664) = *(_DWORD *)(v91 + 32);
  *(_QWORD *)(v145 + 1632) = &off_24C335AB8;
  *(_BYTE *)(v145 + 1668) = *(_BYTE *)(v91 + 36);
  v88 = (std::string *)(v145 + 1672);
  if (*(char *)(v91 + 63) < 0)
  {
    std::string::__init_copy_ctor_external(v88, *(const std::string::value_type **)(v91 + 40), *(_QWORD *)(v91 + 48));
  }
  else
  {
    v89 = *(_OWORD *)(v91 + 40);
    *(_QWORD *)(v145 + 1688) = *(_QWORD *)(v91 + 56);
    *(_OWORD *)&v88->__r_.__value_.__l.__data_ = v89;
  }
  return v145;
}

void sub_20A82D3D0(_Unwind_Exception *a1)
{
  void **v1;
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)(v2 + 1632) = v3;
  if (*(char *)(v2 + 1663) < 0)
    operator delete(*v1);
  mediaplatform::DatabaseColumnTuple<8ul,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>>::~DatabaseColumnTuple(STACK[0x310]);
  _Unwind_Resume(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<7ul,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>>::~DatabaseColumnTuple(uint64_t a1)
{
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 1632);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 1568);
  *(_QWORD *)(a1 + 1520) = off_24C335D90;
  if (*(char *)(a1 + 1551) < 0)
    operator delete(*(void **)(a1 + 1528));
  *(_QWORD *)(a1 + 1472) = off_24C335D90;
  if (*(char *)(a1 + 1503) < 0)
    operator delete(*(void **)(a1 + 1480));
  *(_QWORD *)(a1 + 1424) = off_24C335D90;
  if (*(char *)(a1 + 1455) < 0)
    operator delete(*(void **)(a1 + 1432));
  return mediaplatform::DatabaseColumnTuple<12ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>>::~DatabaseColumnTuple(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<8ul,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>>::~DatabaseColumnTuple(uint64_t a1)
{
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 1568);
  *(_QWORD *)(a1 + 1520) = off_24C335D90;
  if (*(char *)(a1 + 1551) < 0)
    operator delete(*(void **)(a1 + 1528));
  *(_QWORD *)(a1 + 1472) = off_24C335D90;
  if (*(char *)(a1 + 1503) < 0)
    operator delete(*(void **)(a1 + 1480));
  *(_QWORD *)(a1 + 1424) = off_24C335D90;
  if (*(char *)(a1 + 1455) < 0)
    operator delete(*(void **)(a1 + 1432));
  return mediaplatform::DatabaseColumnTuple<12ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>>::~DatabaseColumnTuple(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<9ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>>::~DatabaseColumnTuple(uint64_t a1)
{
  *(_QWORD *)(a1 + 1520) = off_24C335D90;
  if (*(char *)(a1 + 1551) < 0)
    operator delete(*(void **)(a1 + 1528));
  *(_QWORD *)(a1 + 1472) = off_24C335D90;
  if (*(char *)(a1 + 1503) < 0)
    operator delete(*(void **)(a1 + 1480));
  *(_QWORD *)(a1 + 1424) = off_24C335D90;
  if (*(char *)(a1 + 1455) < 0)
    operator delete(*(void **)(a1 + 1432));
  return mediaplatform::DatabaseColumnTuple<12ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>>::~DatabaseColumnTuple(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<10ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>>::DatabaseColumnTuple(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30)
{
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  int v52;
  int v53;
  const void *v54;
  size_t v55;
  void *v56;
  int v57;
  int v58;
  int v59;
  int v60;
  const void *v61;
  size_t v62;
  void *v63;
  int v64;
  int v65;
  int v66;
  const void *v67;
  size_t v68;
  void *v69;
  int v70;
  int v71;
  int v72;
  int v73;
  int v74;
  std::string *v75;
  int v76;
  std::string *v77;
  int v78;
  std::string *v79;
  __int128 v80;
  uint64_t result;
  int v82;
  int v83;
  int v84;
  int v85;
  uint64_t v86;
  int v87;
  uint64_t v88;
  int v89;
  uint64_t v90;
  int v91;
  uint64_t v92;
  int v93;
  uint64_t v94;
  int v95;
  int v96;
  int v97;
  int v98;
  uint64_t v99;
  int v100;
  uint64_t v101;
  int v102;
  uint64_t v103;
  int v104;
  int v105;
  int v106;
  uint64_t v107;
  int v108;
  int v109;
  int v110;
  uint64_t v111;
  int v112;
  int v113;
  int v114;
  uint64_t v115;
  int v116;
  int v117;
  int v118;
  uint64_t v119;
  int v120;
  int v121;
  int v122;
  uint64_t v123;
  int v124;
  int v125;
  int v126;
  int v127;
  int v128;
  uint64_t v129;
  uint64_t (**v130)();
  std::string v131;
  int v132;
  char v133;
  std::string v134;
  uint64_t (**v135)();
  std::string v136;
  int v137;
  char v138;
  std::string v139;
  uint64_t (**v140)();
  std::string v141;
  int v142;
  char v143;
  std::string v144;
  uint64_t (**v145)();
  std::string v146;
  int v147;
  uint64_t v148;
  int v149;
  uint64_t (**v150)();
  std::string v151;
  int v152;
  uint64_t v153;
  int v154;
  uint64_t (**v155)();
  std::string v156;
  int v157;
  uint64_t v158;
  uint64_t (**v159)();
  std::string v160;
  int v161;
  char v162;
  std::string v163;
  uint64_t (**v164)();
  std::string v165;
  int v166;
  uint64_t v167;
  uint64_t (**v168)();
  std::string v169;
  int v170;
  uint64_t v171;
  uint64_t (**v172)();
  std::string v173;
  int v174;
  uint64_t v175;
  uint64_t (**v176)();
  std::string v177;
  int v178;
  uint64_t v179;
  uint64_t (**v180)();
  std::string v181;
  int v182;
  char v183;
  void (**v184)(mediaplatform::Data *__hidden);
  size_t v185;
  size_t v186;
  const void *v187;
  char v188;
  uint64_t (**v189)();
  std::string v190;
  int v191;
  uint64_t v192;
  int v193;
  uint64_t (**v194)();
  std::string v195;
  int v196;
  char v197;
  std::string v198;
  uint64_t (**v199)();
  std::string v200;
  int v201;
  uint64_t v202;
  int v203;
  uint64_t (**v204)();
  std::string v205;
  int v206;
  uint64_t v207;
  int v208;
  uint64_t (**v209)();
  std::string v210;
  int v211;
  char v212;
  std::string v213;
  uint64_t (**v214)();
  std::string v215;
  int v216;
  uint64_t v217;
  uint64_t (**v218)();
  std::string v219;
  int v220;
  uint64_t v221;
  uint64_t (**v222)();
  std::string v223;
  int v224;
  uint64_t v225;
  uint64_t (**v226)();
  std::string v227;
  int v228;
  uint64_t v229;
  uint64_t (**v230)();
  std::string v231;
  int v232;
  uint64_t v233;
  uint64_t (**v234)();
  std::string v235;
  int v236;
  uint64_t v237;
  uint64_t (**v238)();
  std::string v239;
  int v240;
  uint64_t v241;
  uint64_t (**v242)();
  std::string v243;
  int v244;
  uint64_t v245;
  uint64_t (**v246)();
  std::string v247;
  int v248;
  uint64_t v249;
  int v250;
  uint64_t (**v251)();
  std::string __s;
  int v253;
  uint64_t v254;
  uint64_t (**v255)();
  std::string v256;
  int v257;
  uint64_t v258;
  uint64_t (**v259)();
  std::string v260;
  int v261;
  char v262;
  std::string v263;
  uint64_t (**v264)();
  std::string v265;
  int v266;
  char v267;
  std::string v268;
  uint64_t (**v269)();
  std::string v270;
  int v271;
  char v272;
  std::string v273;
  uint64_t (**v274)();
  std::string v275;
  int v276;
  uint64_t v277;
  int v278;
  uint64_t (**v279)();
  std::string v280;
  int v281;
  uint64_t v282;
  int v283;
  uint64_t (**v284)();
  std::string v285;
  int v286;
  uint64_t v287;
  uint64_t (**v288)();
  std::string v289;
  int v290;
  char v291;
  std::string v292;
  uint64_t (**v293)();
  std::string v294;
  int v295;
  uint64_t v296;
  uint64_t (**v297)();
  std::string v298;
  int v299;
  uint64_t v300;
  uint64_t (**v301)();
  std::string v302;
  int v303;
  uint64_t v304;
  uint64_t (**v305)();
  std::string v306;
  int v307;
  uint64_t v308;
  uint64_t (**v309)();
  std::string v310;
  int v311;
  char v312;
  void (**v313)(mediaplatform::Data *__hidden);
  size_t v314;
  size_t v315;
  const void *v316;
  char v317;
  uint64_t (**v318)();
  std::string v319;
  int v320;
  uint64_t v321;
  int v322;
  uint64_t (**v323)();
  std::string v324;
  int v325;
  char v326;
  std::string v327;
  uint64_t (**v328)();
  std::string v329;
  int v330;
  uint64_t v331;
  int v332;
  uint64_t (**v333)();
  std::string v334;
  int v335;
  uint64_t v336;
  int v337;
  uint64_t (**v338)();
  std::string v339;
  int v340;
  char v341;
  std::string v342;
  uint64_t (**v343)();
  std::string v344;
  int v345;
  uint64_t v346;
  uint64_t (**v347)();
  std::string v348;
  int v349;
  uint64_t v350;
  uint64_t (**v351)();
  std::string v352;
  int v353;
  uint64_t v354;
  uint64_t (**v355)();
  std::string v356;
  int v357;
  uint64_t v358;
  uint64_t (**v359)();
  std::string v360;
  int v361;
  uint64_t v362;
  uint64_t (**v363)();
  std::string v364;
  int v365;
  uint64_t v366;
  uint64_t (**v367)();
  std::string v368;
  int v369;
  uint64_t v370;
  uint64_t (**v371)();
  std::string v372;
  int v373;
  uint64_t v374;
  uint64_t (**v375)();
  std::string v376;
  int v377;
  uint64_t v378;
  int v379;
  uint64_t (**v380)();
  std::string v381;
  int v382;
  uint64_t v383;
  uint64_t (**v384)();
  std::string v385;
  int v386;
  char v387;
  std::string v388;
  uint64_t (**v389)();
  std::string v390;
  int v391;
  char v392;
  std::string v393;
  uint64_t (**v394)();
  std::string v395;
  int v396;
  char v397;
  std::string v398;
  uint64_t (**v399)();
  std::string __p;
  int v401;
  uint64_t v402;
  int v403;
  uint64_t (**v404)();
  std::string v405;
  int v406;
  uint64_t v407;
  int v408;
  uint64_t (**v409)();
  std::string v410;
  int v411;
  uint64_t v412;
  uint64_t (**v413)();
  std::string v414;
  int v415;
  char v416;
  std::string v417;
  uint64_t (**v418)();
  std::string v419;
  int v420;
  uint64_t v421;
  uint64_t (**v422)();
  std::string v423;
  int v424;
  uint64_t v425;
  uint64_t (**v426)();
  std::string v427;
  int v428;
  uint64_t v429;
  uint64_t (**v430)();
  std::string v431;
  int v432;
  uint64_t v433;
  uint64_t (**v434)();
  std::string v435;
  int v436;
  char v437;
  void (**v438)(mediaplatform::Data *__hidden);
  size_t v439;
  size_t v440;
  void *v441;
  char v442;
  uint64_t (**v443)();
  std::string v444;
  int v445;
  uint64_t v446;
  int v447;
  uint64_t (**v448)();
  std::string v449;
  int v450;
  char v451;
  std::string v452;
  uint64_t (**v453)();
  std::string v454;
  int v455;
  uint64_t v456;
  int v457;
  uint64_t (**v458)();
  std::string v459;
  int v460;
  uint64_t v461;
  int v462;
  uint64_t (**v463)();
  std::string v464;
  int v465;
  char v466;
  std::string v467;
  uint64_t (**v468)();
  std::string v469;
  int v470;
  uint64_t v471;
  uint64_t (**v472)();
  std::string v473;
  int v474;
  uint64_t v475;
  uint64_t (**v476)();
  std::string v477;
  int v478;
  uint64_t v479;
  uint64_t (**v480)();
  std::string v481;
  int v482;
  uint64_t v483;
  uint64_t (**v484)();
  std::string v485;
  int v486;
  uint64_t v487;
  uint64_t (**v488)();
  std::string v489;
  int v490;
  uint64_t v491;
  uint64_t (**v492)();
  std::string v493;
  int v494;
  uint64_t v495;
  uint64_t (**v496)();
  std::string v497;
  int v498;
  uint64_t v499;
  uint64_t (**v500)();
  std::string v501;
  int v502;
  uint64_t v503;
  int v504;

  v30 = MEMORY[0x24BDAC7A8](a1);
  v33 = v32;
  v35 = v34;
  v37 = v36;
  v39 = v38;
  v41 = v40;
  v42 = v31;
  v44 = v43;
  v129 = v30;
  if (*(char *)(v31 + 31) < 0)
    std::string::__init_copy_ctor_external(&v256, *(const std::string::value_type **)(v31 + 8), *(_QWORD *)(v31 + 16));
  else
    v256 = *(std::string *)(v31 + 8);
  v257 = *(_DWORD *)(v42 + 32);
  v255 = off_24C335AF8;
  v258 = *(_QWORD *)(v42 + 36);
  if (*(char *)(v41 + 31) < 0)
    std::string::__init_copy_ctor_external(&__s, *(const std::string::value_type **)(v41 + 8), *(_QWORD *)(v41 + 16));
  else
    __s = *(std::string *)(v41 + 8);
  v83 = *(_DWORD *)(v41 + 32);
  v253 = v83;
  v251 = off_24C335AF8;
  v45 = *(_QWORD *)(v41 + 36);
  v254 = v45;
  if (*(char *)(v39 + 31) < 0)
    std::string::__init_copy_ctor_external(&v247, *(const std::string::value_type **)(v39 + 8), *(_QWORD *)(v39 + 16));
  else
    v247 = *(std::string *)(v39 + 8);
  v46 = *(_DWORD *)(v39 + 32);
  v246 = off_24C335B18;
  v249 = *(_QWORD *)(v39 + 36);
  v47 = *(_DWORD *)(v39 + 44);
  v127 = v46;
  v248 = v46;
  v250 = v47;
  if (*(char *)(v37 + 31) < 0)
    std::string::__init_copy_ctor_external(&v243, *(const std::string::value_type **)(v37 + 8), *(_QWORD *)(v37 + 16));
  else
    v243 = *(std::string *)(v37 + 8);
  v125 = *(_DWORD *)(v37 + 32);
  v244 = v125;
  v242 = off_24C335AF8;
  v123 = *(_QWORD *)(v37 + 36);
  v245 = v123;
  if (*(char *)(v35 + 31) < 0)
    std::string::__init_copy_ctor_external(&v239, *(const std::string::value_type **)(v35 + 8), *(_QWORD *)(v35 + 16));
  else
    v239 = *(std::string *)(v35 + 8);
  v121 = *(_DWORD *)(v35 + 32);
  v240 = v121;
  v238 = off_24C335AF8;
  v119 = *(_QWORD *)(v35 + 36);
  v241 = v119;
  if (*(char *)(v33 + 31) < 0)
    std::string::__init_copy_ctor_external(&v235, *(const std::string::value_type **)(v33 + 8), *(_QWORD *)(v33 + 16));
  else
    v235 = *(std::string *)(v33 + 8);
  v117 = *(_DWORD *)(v33 + 32);
  v236 = v117;
  v234 = off_24C335AF8;
  v115 = *(_QWORD *)(v33 + 36);
  v237 = v115;
  if (*(char *)(a9 + 31) < 0)
    std::string::__init_copy_ctor_external(&v231, *(const std::string::value_type **)(a9 + 8), *(_QWORD *)(a9 + 16));
  else
    v231 = *(std::string *)(a9 + 8);
  v113 = *(_DWORD *)(a9 + 32);
  v232 = v113;
  v230 = off_24C335AF8;
  v111 = *(_QWORD *)(a9 + 36);
  v233 = v111;
  if (*(char *)(a10 + 31) < 0)
    std::string::__init_copy_ctor_external(&v227, *(const std::string::value_type **)(a10 + 8), *(_QWORD *)(a10 + 16));
  else
    v227 = *(std::string *)(a10 + 8);
  v109 = *(_DWORD *)(a10 + 32);
  v228 = v109;
  v226 = off_24C335AF8;
  v107 = *(_QWORD *)(a10 + 36);
  v229 = v107;
  if (*(char *)(a11 + 31) < 0)
    std::string::__init_copy_ctor_external(&v223, *(const std::string::value_type **)(a11 + 8), *(_QWORD *)(a11 + 16));
  else
    v223 = *(std::string *)(a11 + 8);
  v105 = *(_DWORD *)(a11 + 32);
  v224 = v105;
  v222 = off_24C335AF8;
  v103 = *(_QWORD *)(a11 + 36);
  v225 = v103;
  if (*(char *)(a12 + 31) < 0)
    std::string::__init_copy_ctor_external(&v219, *(const std::string::value_type **)(a12 + 8), *(_QWORD *)(a12 + 16));
  else
    v219 = *(std::string *)(a12 + 8);
  v102 = *(_DWORD *)(a12 + 32);
  v220 = v102;
  v218 = off_24C335AF8;
  v101 = *(_QWORD *)(a12 + 36);
  v221 = v101;
  if (*(char *)(a13 + 31) < 0)
    std::string::__init_copy_ctor_external(&v215, *(const std::string::value_type **)(a13 + 8), *(_QWORD *)(a13 + 16));
  else
    v215 = *(std::string *)(a13 + 8);
  v100 = *(_DWORD *)(a13 + 32);
  v216 = v100;
  v214 = off_24C335AF8;
  v99 = *(_QWORD *)(a13 + 36);
  v217 = v99;
  v209 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a14 + 31) < 0)
    std::string::__init_copy_ctor_external(&v210, *(const std::string::value_type **)(a14 + 8), *(_QWORD *)(a14 + 16));
  else
    v210 = *(std::string *)(a14 + 8);
  v211 = *(_DWORD *)(a14 + 32);
  v209 = &off_24C335AB8;
  v212 = *(_BYTE *)(a14 + 36);
  if (*(char *)(a14 + 63) < 0)
    std::string::__init_copy_ctor_external(&v213, *(const std::string::value_type **)(a14 + 40), *(_QWORD *)(a14 + 48));
  else
    v213 = *(std::string *)(a14 + 40);
  if (*(char *)(a15 + 31) < 0)
    std::string::__init_copy_ctor_external(&v205, *(const std::string::value_type **)(a15 + 8), *(_QWORD *)(a15 + 16));
  else
    v205 = *(std::string *)(a15 + 8);
  v48 = *(_DWORD *)(a15 + 32);
  v204 = off_24C335B18;
  v207 = *(_QWORD *)(a15 + 36);
  v49 = *(_DWORD *)(a15 + 44);
  v98 = v48;
  v206 = v48;
  v208 = v49;
  if (*(char *)(a16 + 31) < 0)
    std::string::__init_copy_ctor_external(&v200, *(const std::string::value_type **)(a16 + 8), *(_QWORD *)(a16 + 16));
  else
    v200 = *(std::string *)(a16 + 8);
  v50 = *(_DWORD *)(a16 + 32);
  v199 = off_24C335B18;
  v202 = *(_QWORD *)(a16 + 36);
  v51 = *(_DWORD *)(a16 + 44);
  v97 = v50;
  v201 = v50;
  v203 = v51;
  v194 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a17 + 31) < 0)
    std::string::__init_copy_ctor_external(&v195, *(const std::string::value_type **)(a17 + 8), *(_QWORD *)(a17 + 16));
  else
    v195 = *(std::string *)(a17 + 8);
  v196 = *(_DWORD *)(a17 + 32);
  v194 = &off_24C335AB8;
  v197 = *(_BYTE *)(a17 + 36);
  if (*(char *)(a17 + 63) < 0)
    std::string::__init_copy_ctor_external(&v198, *(const std::string::value_type **)(a17 + 40), *(_QWORD *)(a17 + 48));
  else
    v198 = *(std::string *)(a17 + 40);
  if (*(char *)(a18 + 31) < 0)
    std::string::__init_copy_ctor_external(&v190, *(const std::string::value_type **)(a18 + 8), *(_QWORD *)(a18 + 16));
  else
    v190 = *(std::string *)(a18 + 8);
  v52 = *(_DWORD *)(a18 + 32);
  v189 = off_24C335B18;
  v192 = *(_QWORD *)(a18 + 36);
  v53 = *(_DWORD *)(a18 + 44);
  v96 = v52;
  v191 = v52;
  v193 = v53;
  v180 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a19 + 31) < 0)
    std::string::__init_copy_ctor_external(&v181, *(const std::string::value_type **)(a19 + 8), *(_QWORD *)(a19 + 16));
  else
    v181 = *(std::string *)(a19 + 8);
  v182 = *(_DWORD *)(a19 + 32);
  v180 = &off_24C335A98;
  v183 = *(_BYTE *)(a19 + 36);
  v54 = *(const void **)(a19 + 64);
  v55 = *(_QWORD *)(a19 + 48);
  v184 = &off_24C331510;
  v185 = v55;
  v186 = v55;
  if (v55)
    v56 = (void *)operator new[]();
  else
    v56 = 0;
  v187 = v56;
  v188 = 1;
  if (v54)
    memcpy(v56, v54, v55);
  else
    bzero(v56, v55);
  if (*(char *)(a20 + 31) < 0)
    std::string::__init_copy_ctor_external(&v177, *(const std::string::value_type **)(a20 + 8), *(_QWORD *)(a20 + 16));
  else
    v177 = *(std::string *)(a20 + 8);
  v95 = *(_DWORD *)(a20 + 32);
  v178 = v95;
  v176 = off_24C335AF8;
  v94 = *(_QWORD *)(a20 + 36);
  v179 = v94;
  if (*(char *)(a21 + 31) < 0)
    std::string::__init_copy_ctor_external(&v173, *(const std::string::value_type **)(a21 + 8), *(_QWORD *)(a21 + 16));
  else
    v173 = *(std::string *)(a21 + 8);
  v93 = *(_DWORD *)(a21 + 32);
  v174 = v93;
  v172 = off_24C335AF8;
  v92 = *(_QWORD *)(a21 + 36);
  v175 = v92;
  if (*(char *)(a22 + 31) < 0)
    std::string::__init_copy_ctor_external(&v169, *(const std::string::value_type **)(a22 + 8), *(_QWORD *)(a22 + 16));
  else
    v169 = *(std::string *)(a22 + 8);
  v91 = *(_DWORD *)(a22 + 32);
  v170 = v91;
  v168 = off_24C335AF8;
  v90 = *(_QWORD *)(a22 + 36);
  v171 = v90;
  if (*(char *)(a23 + 31) < 0)
    std::string::__init_copy_ctor_external(&v165, *(const std::string::value_type **)(a23 + 8), *(_QWORD *)(a23 + 16));
  else
    v165 = *(std::string *)(a23 + 8);
  v89 = *(_DWORD *)(a23 + 32);
  v166 = v89;
  v164 = off_24C335AF8;
  v88 = *(_QWORD *)(a23 + 36);
  v167 = v88;
  v159 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a24 + 31) < 0)
    std::string::__init_copy_ctor_external(&v160, *(const std::string::value_type **)(a24 + 8), *(_QWORD *)(a24 + 16));
  else
    v160 = *(std::string *)(a24 + 8);
  v161 = *(_DWORD *)(a24 + 32);
  v159 = &off_24C335AB8;
  v162 = *(_BYTE *)(a24 + 36);
  if (*(char *)(a24 + 63) < 0)
    std::string::__init_copy_ctor_external(&v163, *(const std::string::value_type **)(a24 + 40), *(_QWORD *)(a24 + 48));
  else
    v163 = *(std::string *)(a24 + 40);
  if (*(char *)(a25 + 31) < 0)
    std::string::__init_copy_ctor_external(&v156, *(const std::string::value_type **)(a25 + 8), *(_QWORD *)(a25 + 16));
  else
    v156 = *(std::string *)(a25 + 8);
  v87 = *(_DWORD *)(a25 + 32);
  v157 = v87;
  v155 = off_24C335AF8;
  v86 = *(_QWORD *)(a25 + 36);
  v158 = v86;
  if (*(char *)(a26 + 31) < 0)
    std::string::__init_copy_ctor_external(&v151, *(const std::string::value_type **)(a26 + 8), *(_QWORD *)(a26 + 16));
  else
    v151 = *(std::string *)(a26 + 8);
  v57 = *(_DWORD *)(a26 + 32);
  v150 = off_24C335B18;
  v153 = *(_QWORD *)(a26 + 36);
  v58 = *(_DWORD *)(a26 + 44);
  v85 = v57;
  v152 = v57;
  v154 = v58;
  if (*(char *)(a27 + 31) < 0)
    std::string::__init_copy_ctor_external(&v146, *(const std::string::value_type **)(a27 + 8), *(_QWORD *)(a27 + 16));
  else
    v146 = *(std::string *)(a27 + 8);
  v59 = *(_DWORD *)(a27 + 32);
  v145 = off_24C335B18;
  v148 = *(_QWORD *)(a27 + 36);
  v60 = *(_DWORD *)(a27 + 44);
  v84 = v59;
  v147 = v59;
  v149 = v60;
  v140 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a28 + 31) < 0)
    std::string::__init_copy_ctor_external(&v141, *(const std::string::value_type **)(a28 + 8), *(_QWORD *)(a28 + 16));
  else
    v141 = *(std::string *)(a28 + 8);
  v142 = *(_DWORD *)(a28 + 32);
  v140 = &off_24C335AB8;
  v143 = *(_BYTE *)(a28 + 36);
  if (*(char *)(a28 + 63) < 0)
    std::string::__init_copy_ctor_external(&v144, *(const std::string::value_type **)(a28 + 40), *(_QWORD *)(a28 + 48));
  else
    v144 = *(std::string *)(a28 + 40);
  v135 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a29 + 31) < 0)
    std::string::__init_copy_ctor_external(&v136, *(const std::string::value_type **)(a29 + 8), *(_QWORD *)(a29 + 16));
  else
    v136 = *(std::string *)(a29 + 8);
  v137 = *(_DWORD *)(a29 + 32);
  v135 = &off_24C335AB8;
  v138 = *(_BYTE *)(a29 + 36);
  if (*(char *)(a29 + 63) < 0)
    std::string::__init_copy_ctor_external(&v139, *(const std::string::value_type **)(a29 + 40), *(_QWORD *)(a29 + 48));
  else
    v139 = *(std::string *)(a29 + 40);
  v130 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a30 + 31) < 0)
    std::string::__init_copy_ctor_external(&v131, *(const std::string::value_type **)(a30 + 8), *(_QWORD *)(a30 + 16));
  else
    v131 = *(std::string *)(a30 + 8);
  v132 = *(_DWORD *)(a30 + 32);
  v130 = &off_24C335AB8;
  v133 = *(_BYTE *)(a30 + 36);
  if (*(char *)(a30 + 63) < 0)
    std::string::__init_copy_ctor_external(&v134, *(const std::string::value_type **)(a30 + 40), *(_QWORD *)(a30 + 48));
  else
    v134 = *(std::string *)(a30 + 40);
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v381, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
  else
    v381 = __s;
  v382 = v83;
  v380 = off_24C335AF8;
  v383 = v45;
  if (SHIBYTE(v247.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v376, v247.__r_.__value_.__l.__data_, v247.__r_.__value_.__l.__size_);
  else
    v376 = v247;
  v375 = off_24C335B18;
  v378 = v249;
  v377 = v127;
  v379 = v250;
  if (SHIBYTE(v243.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v372, v243.__r_.__value_.__l.__data_, v243.__r_.__value_.__l.__size_);
  else
    v372 = v243;
  v373 = v125;
  v371 = off_24C335AF8;
  v374 = v123;
  if (SHIBYTE(v239.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v368, v239.__r_.__value_.__l.__data_, v239.__r_.__value_.__l.__size_);
  else
    v368 = v239;
  v369 = v121;
  v367 = off_24C335AF8;
  v370 = v119;
  if (SHIBYTE(v235.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v364, v235.__r_.__value_.__l.__data_, v235.__r_.__value_.__l.__size_);
  else
    v364 = v235;
  v365 = v117;
  v363 = off_24C335AF8;
  v366 = v115;
  v359 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v231.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v360, v231.__r_.__value_.__l.__data_, v231.__r_.__value_.__l.__size_);
  else
    v360 = v231;
  v361 = v113;
  v359 = off_24C335AF8;
  v362 = v111;
  v355 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v227.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v356, v227.__r_.__value_.__l.__data_, v227.__r_.__value_.__l.__size_);
  else
    v356 = v227;
  v357 = v109;
  v355 = off_24C335AF8;
  v358 = v107;
  v351 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v223.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v352, v223.__r_.__value_.__l.__data_, v223.__r_.__value_.__l.__size_);
  else
    v352 = v223;
  v353 = v105;
  v351 = off_24C335AF8;
  v354 = v103;
  v347 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v219.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v348, v219.__r_.__value_.__l.__data_, v219.__r_.__value_.__l.__size_);
  else
    v348 = v219;
  v349 = v102;
  v347 = off_24C335AF8;
  v350 = v101;
  v343 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v215.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v344, v215.__r_.__value_.__l.__data_, v215.__r_.__value_.__l.__size_);
  else
    v344 = v215;
  v345 = v100;
  v343 = off_24C335AF8;
  v346 = v99;
  v338 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v210.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v339, v210.__r_.__value_.__l.__data_, v210.__r_.__value_.__l.__size_);
  else
    v339 = v210;
  v340 = v211;
  v338 = &off_24C335AB8;
  v341 = v212;
  if (SHIBYTE(v213.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v342, v213.__r_.__value_.__l.__data_, v213.__r_.__value_.__l.__size_);
  else
    v342 = v213;
  v333 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v205.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v334, v205.__r_.__value_.__l.__data_, v205.__r_.__value_.__l.__size_);
  else
    v334 = v205;
  v333 = off_24C335B18;
  v336 = v207;
  v335 = v98;
  v337 = v208;
  v328 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v200.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v329, v200.__r_.__value_.__l.__data_, v200.__r_.__value_.__l.__size_);
  else
    v329 = v200;
  v328 = off_24C335B18;
  v331 = v202;
  v330 = v97;
  v332 = v203;
  v323 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v195.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v324, v195.__r_.__value_.__l.__data_, v195.__r_.__value_.__l.__size_);
  else
    v324 = v195;
  v325 = v196;
  v323 = &off_24C335AB8;
  v326 = v197;
  if (SHIBYTE(v198.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v327, v198.__r_.__value_.__l.__data_, v198.__r_.__value_.__l.__size_);
  else
    v327 = v198;
  v318 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v190.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v319, v190.__r_.__value_.__l.__data_, v190.__r_.__value_.__l.__size_);
  else
    v319 = v190;
  v318 = off_24C335B18;
  v321 = v192;
  v320 = v96;
  v322 = v193;
  v309 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v181.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v310, v181.__r_.__value_.__l.__data_, v181.__r_.__value_.__l.__size_);
  else
    v310 = v181;
  v311 = v182;
  v309 = &off_24C335A98;
  v312 = v183;
  v61 = v187;
  v62 = v185;
  v313 = &off_24C331510;
  v314 = v185;
  v315 = v185;
  if (v185)
    v63 = (void *)operator new[]();
  else
    v63 = 0;
  v316 = v63;
  v317 = 1;
  if (v61)
    memcpy(v63, v61, v62);
  else
    bzero(v63, v62);
  v305 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v177.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v306, v177.__r_.__value_.__l.__data_, v177.__r_.__value_.__l.__size_);
  else
    v306 = v177;
  v307 = v95;
  v305 = off_24C335AF8;
  v308 = v94;
  v301 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v173.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v302, v173.__r_.__value_.__l.__data_, v173.__r_.__value_.__l.__size_);
  else
    v302 = v173;
  v303 = v93;
  v301 = off_24C335AF8;
  v304 = v92;
  v297 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v169.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v298, v169.__r_.__value_.__l.__data_, v169.__r_.__value_.__l.__size_);
  else
    v298 = v169;
  v299 = v91;
  v297 = off_24C335AF8;
  v300 = v90;
  v293 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v165.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v294, v165.__r_.__value_.__l.__data_, v165.__r_.__value_.__l.__size_);
  else
    v294 = v165;
  v295 = v89;
  v293 = off_24C335AF8;
  v296 = v88;
  v288 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v160.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v289, v160.__r_.__value_.__l.__data_, v160.__r_.__value_.__l.__size_);
  else
    v289 = v160;
  v290 = v161;
  v288 = &off_24C335AB8;
  v291 = v162;
  if (SHIBYTE(v163.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v292, v163.__r_.__value_.__l.__data_, v163.__r_.__value_.__l.__size_);
  else
    v292 = v163;
  v284 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v156.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v285, v156.__r_.__value_.__l.__data_, v156.__r_.__value_.__l.__size_);
  else
    v285 = v156;
  v286 = v87;
  v284 = off_24C335AF8;
  v287 = v86;
  v279 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v151.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v280, v151.__r_.__value_.__l.__data_, v151.__r_.__value_.__l.__size_);
  else
    v280 = v151;
  v279 = off_24C335B18;
  v282 = v153;
  v281 = v85;
  v283 = v154;
  v274 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v146.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v275, v146.__r_.__value_.__l.__data_, v146.__r_.__value_.__l.__size_);
  else
    v275 = v146;
  v274 = off_24C335B18;
  v277 = v148;
  v276 = v84;
  v278 = v149;
  v269 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v141.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v270, v141.__r_.__value_.__l.__data_, v141.__r_.__value_.__l.__size_);
  else
    v270 = v141;
  v271 = v142;
  v269 = &off_24C335AB8;
  v272 = v143;
  if (SHIBYTE(v144.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v273, v144.__r_.__value_.__l.__data_, v144.__r_.__value_.__l.__size_);
  else
    v273 = v144;
  v264 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v136.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v265, v136.__r_.__value_.__l.__data_, v136.__r_.__value_.__l.__size_);
  else
    v265 = v136;
  v266 = v137;
  v264 = &off_24C335AB8;
  v267 = v138;
  if (SHIBYTE(v139.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v268, v139.__r_.__value_.__l.__data_, v139.__r_.__value_.__l.__size_);
  else
    v268 = v139;
  v259 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v131.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v260, v131.__r_.__value_.__l.__data_, v131.__r_.__value_.__l.__size_);
  else
    v260 = v131;
  v261 = v132;
  v259 = &off_24C335AB8;
  v262 = v133;
  if (SHIBYTE(v134.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v263, v134.__r_.__value_.__l.__data_, v134.__r_.__value_.__l.__size_);
  else
    v263 = v134;
  v500 = (uint64_t (**)())off_24C335D90;
  v64 = SHIBYTE(v376.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v376.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v501, v376.__r_.__value_.__l.__data_, v376.__r_.__value_.__l.__size_);
  else
    v501 = v376;
  v500 = off_24C335B18;
  v503 = v378;
  v502 = v127;
  v504 = v379;
  v496 = (uint64_t (**)())off_24C335D90;
  v65 = SHIBYTE(v372.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v372.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v497, v372.__r_.__value_.__l.__data_, v372.__r_.__value_.__l.__size_);
  else
    v497 = v372;
  v498 = v125;
  v496 = off_24C335AF8;
  v499 = v123;
  v492 = (uint64_t (**)())off_24C335D90;
  v128 = SHIBYTE(v368.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v368.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v493, v368.__r_.__value_.__l.__data_, v368.__r_.__value_.__l.__size_);
  else
    v493 = v368;
  v494 = v121;
  v492 = off_24C335AF8;
  v495 = v119;
  v488 = (uint64_t (**)())off_24C335D90;
  v126 = SHIBYTE(v364.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v364.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v489, v364.__r_.__value_.__l.__data_, v364.__r_.__value_.__l.__size_);
  else
    v489 = v364;
  v490 = v117;
  v488 = off_24C335AF8;
  v491 = v115;
  v484 = (uint64_t (**)())off_24C335D90;
  v124 = SHIBYTE(v360.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v360.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v485, v360.__r_.__value_.__l.__data_, v360.__r_.__value_.__l.__size_);
  else
    v485 = v360;
  v486 = v113;
  v484 = off_24C335AF8;
  v487 = v111;
  v480 = (uint64_t (**)())off_24C335D90;
  v122 = SHIBYTE(v356.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v356.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v481, v356.__r_.__value_.__l.__data_, v356.__r_.__value_.__l.__size_);
  else
    v481 = v356;
  v482 = v109;
  v480 = off_24C335AF8;
  v483 = v107;
  v476 = (uint64_t (**)())off_24C335D90;
  v120 = SHIBYTE(v352.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v352.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v477, v352.__r_.__value_.__l.__data_, v352.__r_.__value_.__l.__size_);
  else
    v477 = v352;
  v478 = v105;
  v476 = off_24C335AF8;
  v479 = v103;
  v472 = (uint64_t (**)())off_24C335D90;
  v118 = SHIBYTE(v348.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v348.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v473, v348.__r_.__value_.__l.__data_, v348.__r_.__value_.__l.__size_);
  else
    v473 = v348;
  v474 = v102;
  v472 = off_24C335AF8;
  v475 = v101;
  v468 = (uint64_t (**)())off_24C335D90;
  v116 = SHIBYTE(v344.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v344.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v469, v344.__r_.__value_.__l.__data_, v344.__r_.__value_.__l.__size_);
  else
    v469 = v344;
  v470 = v100;
  v468 = off_24C335AF8;
  v471 = v99;
  v463 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v339.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v464, v339.__r_.__value_.__l.__data_, v339.__r_.__value_.__l.__size_);
  else
    v464 = v339;
  v465 = v340;
  v463 = &off_24C335AB8;
  v466 = v341;
  if (SHIBYTE(v342.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v467, v342.__r_.__value_.__l.__data_, v342.__r_.__value_.__l.__size_);
  else
    v467 = v342;
  v458 = (uint64_t (**)())off_24C335D90;
  v114 = SHIBYTE(v334.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v334.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v459, v334.__r_.__value_.__l.__data_, v334.__r_.__value_.__l.__size_);
  else
    v459 = v334;
  v458 = off_24C335B18;
  v461 = v336;
  v460 = v98;
  v462 = v337;
  v453 = (uint64_t (**)())off_24C335D90;
  v112 = SHIBYTE(v329.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v329.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v454, v329.__r_.__value_.__l.__data_, v329.__r_.__value_.__l.__size_);
  else
    v454 = v329;
  v453 = off_24C335B18;
  v456 = v331;
  v455 = v97;
  v457 = v332;
  v448 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v324.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v449, v324.__r_.__value_.__l.__data_, v324.__r_.__value_.__l.__size_);
  else
    v449 = v324;
  v450 = v325;
  v448 = &off_24C335AB8;
  v451 = v326;
  if (SHIBYTE(v327.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v452, v327.__r_.__value_.__l.__data_, v327.__r_.__value_.__l.__size_);
  else
    v452 = v327;
  v443 = (uint64_t (**)())off_24C335D90;
  v66 = SHIBYTE(v319.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v319.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v444, v319.__r_.__value_.__l.__data_, v319.__r_.__value_.__l.__size_);
  else
    v444 = v319;
  v443 = off_24C335B18;
  v446 = v321;
  v445 = v96;
  v447 = v322;
  v434 = (uint64_t (**)())off_24C335D90;
  v110 = v66;
  if (SHIBYTE(v310.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v435, v310.__r_.__value_.__l.__data_, v310.__r_.__value_.__l.__size_);
  else
    v435 = v310;
  v436 = v311;
  v434 = &off_24C335A98;
  v437 = v312;
  v67 = v316;
  v68 = v314;
  v438 = &off_24C331510;
  v439 = v314;
  v440 = v314;
  if (v314)
    v69 = (void *)operator new[]();
  else
    v69 = 0;
  v441 = v69;
  v442 = 1;
  if (v67)
    memcpy(v69, v67, v68);
  else
    bzero(v69, v68);
  v430 = (uint64_t (**)())off_24C335D90;
  v70 = SHIBYTE(v306.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v306.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v431, v306.__r_.__value_.__l.__data_, v306.__r_.__value_.__l.__size_);
  else
    v431 = v306;
  v432 = v95;
  v430 = off_24C335AF8;
  v433 = v94;
  v426 = (uint64_t (**)())off_24C335D90;
  v108 = SHIBYTE(v302.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v302.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v427, v302.__r_.__value_.__l.__data_, v302.__r_.__value_.__l.__size_);
  else
    v427 = v302;
  v428 = v93;
  v426 = off_24C335AF8;
  v429 = v92;
  v422 = (uint64_t (**)())off_24C335D90;
  v104 = SHIBYTE(v298.__r_.__value_.__r.__words[2]);
  v106 = v70;
  if (SHIBYTE(v298.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v423, v298.__r_.__value_.__l.__data_, v298.__r_.__value_.__l.__size_);
  else
    v423 = v298;
  v424 = v91;
  v422 = off_24C335AF8;
  v425 = v90;
  v418 = (uint64_t (**)())off_24C335D90;
  v71 = SHIBYTE(v294.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v294.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v419, v294.__r_.__value_.__l.__data_, v294.__r_.__value_.__l.__size_);
  else
    v419 = v294;
  v420 = v89;
  v418 = off_24C335AF8;
  v421 = v88;
  v413 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v289.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v414, v289.__r_.__value_.__l.__data_, v289.__r_.__value_.__l.__size_);
  else
    v414 = v289;
  v415 = v290;
  v413 = &off_24C335AB8;
  v416 = v291;
  if (SHIBYTE(v292.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v417, v292.__r_.__value_.__l.__data_, v292.__r_.__value_.__l.__size_);
  else
    v417 = v292;
  v409 = (uint64_t (**)())off_24C335D90;
  v72 = SHIBYTE(v285.__r_.__value_.__r.__words[2]);
  v82 = v65;
  if (SHIBYTE(v285.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v410, v285.__r_.__value_.__l.__data_, v285.__r_.__value_.__l.__size_);
  else
    v410 = v285;
  v411 = v87;
  v409 = off_24C335AF8;
  v412 = v86;
  v404 = (uint64_t (**)())off_24C335D90;
  v73 = SHIBYTE(v280.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v280.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v405, v280.__r_.__value_.__l.__data_, v280.__r_.__value_.__l.__size_);
  else
    v405 = v280;
  v404 = off_24C335B18;
  v407 = v282;
  v406 = v85;
  v408 = v283;
  v399 = (uint64_t (**)())off_24C335D90;
  v74 = SHIBYTE(v275.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v275.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&__p, v275.__r_.__value_.__l.__data_, v275.__r_.__value_.__l.__size_);
  else
    __p = v275;
  v399 = off_24C335B18;
  v402 = v277;
  v401 = v84;
  v403 = v278;
  v394 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v270.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v395, v270.__r_.__value_.__l.__data_, v270.__r_.__value_.__l.__size_);
  else
    v395 = v270;
  v396 = v271;
  v394 = &off_24C335AB8;
  v397 = v272;
  if (SHIBYTE(v273.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v398, v273.__r_.__value_.__l.__data_, v273.__r_.__value_.__l.__size_);
  else
    v398 = v273;
  v389 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v265.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v390, v265.__r_.__value_.__l.__data_, v265.__r_.__value_.__l.__size_);
  else
    v390 = v265;
  v391 = v266;
  v389 = &off_24C335AB8;
  v392 = v267;
  if (SHIBYTE(v268.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v393, v268.__r_.__value_.__l.__data_, v268.__r_.__value_.__l.__size_);
  else
    v393 = v268;
  v384 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v260.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v385, v260.__r_.__value_.__l.__data_, v260.__r_.__value_.__l.__size_);
  else
    v385 = v260;
  v386 = v261;
  v384 = &off_24C335AB8;
  v387 = v262;
  if (SHIBYTE(v263.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v388, v263.__r_.__value_.__l.__data_, v263.__r_.__value_.__l.__size_);
  else
    v388 = v263;
  mediaplatform::DatabaseColumnTuple<13ul,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>>::DatabaseColumnTuple(v129, (uint64_t)&v500, (uint64_t)&v496, (uint64_t)&v492, (uint64_t)&v488, (uint64_t)&v484, (uint64_t)&v480, (uint64_t)&v476, (uint64_t)&v472, (uint64_t)&v468, (uint64_t)&v463, (uint64_t)&v458, (uint64_t)&v453, (uint64_t)&v448, (uint64_t)&v443, (uint64_t)&v434, (uint64_t)&v430, (uint64_t)&v426, (uint64_t)&v422,
    (uint64_t)&v418,
    (uint64_t)&v413,
    (uint64_t)&v409,
    (uint64_t)&v404,
    (uint64_t)&v399,
    (uint64_t)&v394,
    (uint64_t)&v389,
    (uint64_t)&v384);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v384);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v389);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v394);
  v399 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v404 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v405.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v405.__r_.__value_.__l.__data_);
  v409 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v410.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v410.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v413);
  v418 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v419.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v419.__r_.__value_.__l.__data_);
  v422 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v423.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v423.__r_.__value_.__l.__data_);
  v426 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v427.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v427.__r_.__value_.__l.__data_);
  v430 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v431.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v431.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<mediaplatform::Data>::~DatabaseColumn((uint64_t)&v434);
  v443 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v444.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v444.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v448);
  v453 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v454.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v454.__r_.__value_.__l.__data_);
  v458 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v459.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v459.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v463);
  v468 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v469.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v469.__r_.__value_.__l.__data_);
  v472 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v473.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v473.__r_.__value_.__l.__data_);
  v476 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v477.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v477.__r_.__value_.__l.__data_);
  v480 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v481.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v481.__r_.__value_.__l.__data_);
  v484 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v485.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v485.__r_.__value_.__l.__data_);
  v488 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v489.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v489.__r_.__value_.__l.__data_);
  v492 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v493.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v493.__r_.__value_.__l.__data_);
  v496 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v497.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v497.__r_.__value_.__l.__data_);
  v500 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v501.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v501.__r_.__value_.__l.__data_);
  *(_QWORD *)(v129 + 1376) = off_24C335D90;
  v75 = (std::string *)(v129 + 1384);
  v76 = SHIBYTE(v381.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v381.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v75, v381.__r_.__value_.__l.__data_, v381.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v75->__r_.__value_.__l.__data_ = *(_OWORD *)&v381.__r_.__value_.__l.__data_;
    *(_QWORD *)(v129 + 1400) = *((_QWORD *)&v381.__r_.__value_.__l + 2);
  }
  *(_DWORD *)(v129 + 1408) = v382;
  *(_QWORD *)(v129 + 1376) = off_24C335AF8;
  *(_QWORD *)(v129 + 1412) = v383;
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v259);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v264);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v269);
  v274 = (uint64_t (**)())off_24C335D90;
  if (v74 < 0)
    operator delete(v275.__r_.__value_.__l.__data_);
  v279 = (uint64_t (**)())off_24C335D90;
  if (v73 < 0)
    operator delete(v280.__r_.__value_.__l.__data_);
  v284 = (uint64_t (**)())off_24C335D90;
  if (v72 < 0)
    operator delete(v285.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v288);
  v293 = (uint64_t (**)())off_24C335D90;
  if (v71 < 0)
    operator delete(v294.__r_.__value_.__l.__data_);
  v297 = (uint64_t (**)())off_24C335D90;
  if (v104 < 0)
    operator delete(v298.__r_.__value_.__l.__data_);
  v301 = (uint64_t (**)())off_24C335D90;
  if (v108 < 0)
    operator delete(v302.__r_.__value_.__l.__data_);
  v305 = (uint64_t (**)())off_24C335D90;
  if (v106 < 0)
    operator delete(v306.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<mediaplatform::Data>::~DatabaseColumn((uint64_t)&v309);
  v318 = (uint64_t (**)())off_24C335D90;
  if (v110 < 0)
    operator delete(v319.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v323);
  v328 = (uint64_t (**)())off_24C335D90;
  if (v112 < 0)
    operator delete(v329.__r_.__value_.__l.__data_);
  v333 = (uint64_t (**)())off_24C335D90;
  if (v114 < 0)
    operator delete(v334.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v338);
  v343 = (uint64_t (**)())off_24C335D90;
  if (v116 < 0)
    operator delete(v344.__r_.__value_.__l.__data_);
  v347 = (uint64_t (**)())off_24C335D90;
  if (v118 < 0)
    operator delete(v348.__r_.__value_.__l.__data_);
  v351 = (uint64_t (**)())off_24C335D90;
  if (v120 < 0)
    operator delete(v352.__r_.__value_.__l.__data_);
  v355 = (uint64_t (**)())off_24C335D90;
  if (v122 < 0)
    operator delete(v356.__r_.__value_.__l.__data_);
  v359 = (uint64_t (**)())off_24C335D90;
  if (v124 < 0)
    operator delete(v360.__r_.__value_.__l.__data_);
  v363 = (uint64_t (**)())off_24C335D90;
  if (v126 < 0)
    operator delete(v364.__r_.__value_.__l.__data_);
  if (v128 < 0)
  {
    operator delete(v368.__r_.__value_.__l.__data_);
    if ((v82 & 0x80000000) == 0)
      goto LABEL_391;
  }
  else if ((v82 & 0x80000000) == 0)
  {
    goto LABEL_391;
  }
  operator delete(v372.__r_.__value_.__l.__data_);
LABEL_391:
  if (v64 < 0)
  {
    operator delete(v376.__r_.__value_.__l.__data_);
    if ((v76 & 0x80000000) == 0)
      goto LABEL_393;
  }
  else if ((v76 & 0x80000000) == 0)
  {
    goto LABEL_393;
  }
  operator delete(v381.__r_.__value_.__l.__data_);
LABEL_393:
  *(_QWORD *)(v129 + 1424) = off_24C335D90;
  v77 = (std::string *)(v129 + 1432);
  v78 = SHIBYTE(v256.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v256.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v77, v256.__r_.__value_.__l.__data_, v256.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v77->__r_.__value_.__l.__data_ = *(_OWORD *)&v256.__r_.__value_.__l.__data_;
    *(_QWORD *)(v129 + 1448) = *((_QWORD *)&v256.__r_.__value_.__l + 2);
  }
  *(_DWORD *)(v129 + 1456) = v257;
  *(_QWORD *)(v129 + 1424) = off_24C335AF8;
  *(_QWORD *)(v129 + 1460) = v258;
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v130);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v135);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v140);
  if (SHIBYTE(v146.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v146.__r_.__value_.__l.__data_);
  if (SHIBYTE(v151.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v151.__r_.__value_.__l.__data_);
  if (SHIBYTE(v156.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v156.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v159);
  if (SHIBYTE(v165.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v165.__r_.__value_.__l.__data_);
  if (SHIBYTE(v169.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v169.__r_.__value_.__l.__data_);
  if (SHIBYTE(v173.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v173.__r_.__value_.__l.__data_);
  if (SHIBYTE(v177.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v177.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<mediaplatform::Data>::~DatabaseColumn((uint64_t)&v180);
  if (SHIBYTE(v190.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v190.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v194);
  if (SHIBYTE(v200.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v200.__r_.__value_.__l.__data_);
  if (SHIBYTE(v205.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v205.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v209);
  if (SHIBYTE(v215.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v215.__r_.__value_.__l.__data_);
  if (SHIBYTE(v219.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v219.__r_.__value_.__l.__data_);
  if (SHIBYTE(v223.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v223.__r_.__value_.__l.__data_);
  if (SHIBYTE(v227.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v227.__r_.__value_.__l.__data_);
  if (SHIBYTE(v231.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v231.__r_.__value_.__l.__data_);
  if (SHIBYTE(v235.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v235.__r_.__value_.__l.__data_);
  if (SHIBYTE(v239.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v239.__r_.__value_.__l.__data_);
  if (SHIBYTE(v243.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v243.__r_.__value_.__l.__data_);
  if (SHIBYTE(v247.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v247.__r_.__value_.__l.__data_);
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__s.__r_.__value_.__l.__data_);
    if ((v78 & 0x80000000) == 0)
      goto LABEL_440;
  }
  else if ((v78 & 0x80000000) == 0)
  {
    goto LABEL_440;
  }
  operator delete(v256.__r_.__value_.__l.__data_);
LABEL_440:
  *(_QWORD *)(v129 + 1472) = off_24C335D90;
  v79 = (std::string *)(v129 + 1480);
  if (*(char *)(v44 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v79, *(const std::string::value_type **)(v44 + 8), *(_QWORD *)(v44 + 16));
  }
  else
  {
    v80 = *(_OWORD *)(v44 + 8);
    *(_QWORD *)(v129 + 1496) = *(_QWORD *)(v44 + 24);
    *(_OWORD *)&v79->__r_.__value_.__l.__data_ = v80;
  }
  result = v129;
  *(_DWORD *)(v129 + 1504) = *(_DWORD *)(v44 + 32);
  *(_QWORD *)(v129 + 1472) = off_24C335AF8;
  *(_QWORD *)(v129 + 1508) = *(_QWORD *)(v44 + 36);
  return result;
}

void sub_20A830A68(_Unwind_Exception *a1)
{
  mediaplatform::DatabaseColumnTuple<11ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>>::~DatabaseColumnTuple(STACK[0x2C0]);
  _Unwind_Resume(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<10ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>>::~DatabaseColumnTuple(uint64_t a1)
{
  *(_QWORD *)(a1 + 1472) = off_24C335D90;
  if (*(char *)(a1 + 1503) < 0)
    operator delete(*(void **)(a1 + 1480));
  *(_QWORD *)(a1 + 1424) = off_24C335D90;
  if (*(char *)(a1 + 1455) < 0)
    operator delete(*(void **)(a1 + 1432));
  return mediaplatform::DatabaseColumnTuple<12ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>>::~DatabaseColumnTuple(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<11ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>>::~DatabaseColumnTuple(uint64_t a1)
{
  *(_QWORD *)(a1 + 1424) = off_24C335D90;
  if (*(char *)(a1 + 1455) < 0)
    operator delete(*(void **)(a1 + 1432));
  return mediaplatform::DatabaseColumnTuple<12ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>>::~DatabaseColumnTuple(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<13ul,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>>::DatabaseColumnTuple(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  int v45;
  int v46;
  int v47;
  int v48;
  int v49;
  const void *v50;
  size_t v51;
  void *v52;
  int v53;
  int v54;
  int v55;
  int v56;
  const void *v57;
  size_t v58;
  void *v59;
  int v60;
  int v61;
  int v62;
  int v63;
  int v64;
  const void *v65;
  size_t v66;
  void *v67;
  int v68;
  int v69;
  int v70;
  int v71;
  int v72;
  std::string *v73;
  int v74;
  std::string *v75;
  int v76;
  std::string *v77;
  __int128 v78;
  uint64_t v79;
  int v81;
  int v82;
  int v83;
  uint64_t v84;
  int v85;
  int v86;
  int v87;
  int v88;
  uint64_t v89;
  int v90;
  uint64_t v91;
  int v92;
  uint64_t v93;
  int v94;
  uint64_t v95;
  int v96;
  uint64_t v97;
  int v98;
  int v99;
  int v100;
  int v101;
  uint64_t v102;
  int v103;
  uint64_t v104;
  int v105;
  int v106;
  int v107;
  uint64_t v108;
  int v109;
  int v110;
  int v111;
  uint64_t v112;
  int v113;
  int v114;
  int v115;
  uint64_t v116;
  int v117;
  int v118;
  int v119;
  uint64_t v120;
  int v121;
  int v122;
  int v123;
  int v124;
  uint64_t (**v125)();
  std::string v126;
  int v127;
  char v128;
  std::string v129;
  uint64_t (**v130)();
  std::string v131;
  int v132;
  char v133;
  std::string v134;
  uint64_t (**v135)();
  std::string v136;
  int v137;
  char v138;
  std::string v139;
  uint64_t (**v140)();
  std::string v141;
  int v142;
  uint64_t v143;
  int v144;
  uint64_t (**v145)();
  std::string v146;
  int v147;
  uint64_t v148;
  int v149;
  uint64_t (**v150)();
  std::string v151;
  int v152;
  uint64_t v153;
  uint64_t (**v154)();
  std::string v155;
  int v156;
  char v157;
  std::string v158;
  uint64_t (**v159)();
  std::string v160;
  int v161;
  uint64_t v162;
  uint64_t (**v163)();
  std::string v164;
  int v165;
  uint64_t v166;
  uint64_t (**v167)();
  std::string v168;
  int v169;
  uint64_t v170;
  uint64_t (**v171)();
  std::string v172;
  int v173;
  uint64_t v174;
  uint64_t (**v175)();
  std::string v176;
  int v177;
  char v178;
  void (**v179)(mediaplatform::Data *__hidden);
  size_t v180;
  size_t v181;
  const void *v182;
  char v183;
  uint64_t (**v184)();
  std::string v185;
  int v186;
  uint64_t v187;
  int v188;
  uint64_t (**v189)();
  std::string v190;
  int v191;
  char v192;
  std::string v193;
  uint64_t (**v194)();
  std::string v195;
  int v196;
  uint64_t v197;
  int v198;
  uint64_t (**v199)();
  std::string v200;
  int v201;
  uint64_t v202;
  int v203;
  uint64_t (**v204)();
  std::string v205;
  int v206;
  char v207;
  std::string v208;
  uint64_t (**v209)();
  std::string v210;
  int v211;
  uint64_t v212;
  uint64_t (**v213)();
  std::string v214;
  int v215;
  uint64_t v216;
  uint64_t (**v217)();
  std::string v218;
  int v219;
  uint64_t v220;
  uint64_t (**v221)();
  std::string v222;
  int v223;
  uint64_t v224;
  uint64_t (**v225)();
  std::string v226;
  int v227;
  uint64_t v228;
  uint64_t (**v229)();
  std::string v230;
  int v231;
  uint64_t v232;
  uint64_t (**v233)();
  std::string __s;
  int v235;
  uint64_t v236;
  uint64_t (**v237)();
  std::string v238;
  int v239;
  uint64_t v240;
  uint64_t (**v241)();
  std::string v242;
  int v243;
  char v244;
  std::string v245;
  uint64_t (**v246)();
  std::string v247;
  int v248;
  char v249;
  std::string v250;
  uint64_t (**v251)();
  std::string v252;
  int v253;
  char v254;
  std::string v255;
  uint64_t (**v256)();
  std::string v257;
  int v258;
  uint64_t v259;
  int v260;
  uint64_t (**v261)();
  std::string v262;
  int v263;
  uint64_t v264;
  int v265;
  uint64_t (**v266)();
  std::string v267;
  int v268;
  uint64_t v269;
  uint64_t (**v270)();
  std::string v271;
  int v272;
  char v273;
  std::string v274;
  uint64_t (**v275)();
  std::string v276;
  int v277;
  uint64_t v278;
  uint64_t (**v279)();
  std::string v280;
  int v281;
  uint64_t v282;
  uint64_t (**v283)();
  std::string v284;
  int v285;
  uint64_t v286;
  uint64_t (**v287)();
  std::string v288;
  int v289;
  uint64_t v290;
  uint64_t (**v291)();
  std::string v292;
  int v293;
  char v294;
  void (**v295)(mediaplatform::Data *__hidden);
  size_t v296;
  size_t v297;
  const void *v298;
  char v299;
  uint64_t (**v300)();
  std::string v301;
  int v302;
  uint64_t v303;
  int v304;
  uint64_t (**v305)();
  std::string v306;
  int v307;
  char v308;
  std::string v309;
  uint64_t (**v310)();
  std::string v311;
  int v312;
  uint64_t v313;
  int v314;
  uint64_t (**v315)();
  std::string v316;
  int v317;
  uint64_t v318;
  int v319;
  uint64_t (**v320)();
  std::string v321;
  int v322;
  char v323;
  std::string v324;
  uint64_t (**v325)();
  std::string v326;
  int v327;
  uint64_t v328;
  uint64_t (**v329)();
  std::string v330;
  int v331;
  uint64_t v332;
  uint64_t (**v333)();
  std::string v334;
  int v335;
  uint64_t v336;
  uint64_t (**v337)();
  std::string v338;
  int v339;
  uint64_t v340;
  uint64_t (**v341)();
  std::string v342;
  int v343;
  uint64_t v344;
  uint64_t (**v345)();
  std::string v346;
  int v347;
  uint64_t v348;
  uint64_t (**v349)();
  std::string v350;
  int v351;
  uint64_t v352;
  uint64_t (**v353)();
  std::string v354;
  int v355;
  char v356;
  std::string v357;
  uint64_t (**v358)();
  std::string v359;
  int v360;
  char v361;
  std::string v362;
  uint64_t (**v363)();
  std::string v364;
  int v365;
  char v366;
  std::string v367;
  uint64_t (**v368)();
  std::string __p;
  int v370;
  uint64_t v371;
  int v372;
  uint64_t (**v373)();
  std::string v374;
  int v375;
  uint64_t v376;
  int v377;
  uint64_t (**v378)();
  std::string v379;
  int v380;
  uint64_t v381;
  uint64_t (**v382)();
  std::string v383;
  int v384;
  char v385;
  std::string v386;
  uint64_t (**v387)();
  std::string v388;
  int v389;
  uint64_t v390;
  uint64_t (**v391)();
  std::string v392;
  int v393;
  uint64_t v394;
  uint64_t (**v395)();
  std::string v396;
  int v397;
  uint64_t v398;
  uint64_t (**v399)();
  std::string v400;
  int v401;
  uint64_t v402;
  uint64_t (**v403)();
  std::string v404;
  int v405;
  char v406;
  void (**v407)(mediaplatform::Data *__hidden);
  size_t v408;
  size_t v409;
  void *v410;
  char v411;
  uint64_t (**v412)();
  std::string v413;
  int v414;
  uint64_t v415;
  int v416;
  uint64_t (**v417)();
  std::string v418;
  int v419;
  char v420;
  std::string v421;
  uint64_t (**v422)();
  std::string v423;
  int v424;
  uint64_t v425;
  int v426;
  uint64_t (**v427)();
  std::string v428;
  int v429;
  uint64_t v430;
  int v431;
  uint64_t (**v432)();
  std::string v433;
  int v434;
  char v435;
  std::string v436;
  uint64_t (**v437)();
  std::string v438;
  int v439;
  uint64_t v440;
  uint64_t (**v441)();
  std::string v442;
  int v443;
  uint64_t v444;
  uint64_t (**v445)();
  std::string v446;
  int v447;
  uint64_t v448;
  uint64_t (**v449)();
  std::string v450;
  int v451;
  uint64_t v452;
  uint64_t (**v453)();
  std::string v454;
  int v455;
  uint64_t v456;
  uint64_t (**v457)();
  std::string v458;
  int v459;
  uint64_t v460;

  v27 = MEMORY[0x24BDAC7A8](a1);
  v30 = v29;
  v32 = v31;
  v34 = v33;
  v36 = v35;
  v38 = v37;
  v39 = v28;
  v41 = v40;
  v42 = v27;
  if (*(char *)(v28 + 31) < 0)
    std::string::__init_copy_ctor_external(&v238, *(const std::string::value_type **)(v28 + 8), *(_QWORD *)(v28 + 16));
  else
    v238 = *(std::string *)(v28 + 8);
  v239 = *(_DWORD *)(v39 + 32);
  v237 = off_24C335AF8;
  v240 = *(_QWORD *)(v39 + 36);
  if (*(char *)(v38 + 31) < 0)
    std::string::__init_copy_ctor_external(&__s, *(const std::string::value_type **)(v38 + 8), *(_QWORD *)(v38 + 16));
  else
    __s = *(std::string *)(v38 + 8);
  v87 = *(_DWORD *)(v38 + 32);
  v235 = v87;
  v233 = off_24C335AF8;
  v43 = *(_QWORD *)(v38 + 36);
  v236 = v43;
  if (*(char *)(v36 + 31) < 0)
    std::string::__init_copy_ctor_external(&v230, *(const std::string::value_type **)(v36 + 8), *(_QWORD *)(v36 + 16));
  else
    v230 = *(std::string *)(v36 + 8);
  v122 = *(_DWORD *)(v36 + 32);
  v231 = v122;
  v229 = off_24C335AF8;
  v120 = *(_QWORD *)(v36 + 36);
  v232 = v120;
  if (*(char *)(v34 + 31) < 0)
    std::string::__init_copy_ctor_external(&v226, *(const std::string::value_type **)(v34 + 8), *(_QWORD *)(v34 + 16));
  else
    v226 = *(std::string *)(v34 + 8);
  v118 = *(_DWORD *)(v34 + 32);
  v227 = v118;
  v225 = off_24C335AF8;
  v116 = *(_QWORD *)(v34 + 36);
  v228 = v116;
  if (*(char *)(v32 + 31) < 0)
    std::string::__init_copy_ctor_external(&v222, *(const std::string::value_type **)(v32 + 8), *(_QWORD *)(v32 + 16));
  else
    v222 = *(std::string *)(v32 + 8);
  v114 = *(_DWORD *)(v32 + 32);
  v223 = v114;
  v221 = off_24C335AF8;
  v112 = *(_QWORD *)(v32 + 36);
  v224 = v112;
  if (*(char *)(v30 + 31) < 0)
    std::string::__init_copy_ctor_external(&v218, *(const std::string::value_type **)(v30 + 8), *(_QWORD *)(v30 + 16));
  else
    v218 = *(std::string *)(v30 + 8);
  v110 = *(_DWORD *)(v30 + 32);
  v219 = v110;
  v217 = off_24C335AF8;
  v108 = *(_QWORD *)(v30 + 36);
  v220 = v108;
  if (*(char *)(a9 + 31) < 0)
    std::string::__init_copy_ctor_external(&v214, *(const std::string::value_type **)(a9 + 8), *(_QWORD *)(a9 + 16));
  else
    v214 = *(std::string *)(a9 + 8);
  v106 = *(_DWORD *)(a9 + 32);
  v215 = v106;
  v213 = off_24C335AF8;
  v104 = *(_QWORD *)(a9 + 36);
  v216 = v104;
  if (*(char *)(a10 + 31) < 0)
    std::string::__init_copy_ctor_external(&v210, *(const std::string::value_type **)(a10 + 8), *(_QWORD *)(a10 + 16));
  else
    v210 = *(std::string *)(a10 + 8);
  v103 = *(_DWORD *)(a10 + 32);
  v211 = v103;
  v209 = off_24C335AF8;
  v102 = *(_QWORD *)(a10 + 36);
  v212 = v102;
  v204 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a11 + 31) < 0)
    std::string::__init_copy_ctor_external(&v205, *(const std::string::value_type **)(a11 + 8), *(_QWORD *)(a11 + 16));
  else
    v205 = *(std::string *)(a11 + 8);
  v206 = *(_DWORD *)(a11 + 32);
  v204 = &off_24C335AB8;
  v207 = *(_BYTE *)(a11 + 36);
  if (*(char *)(a11 + 63) < 0)
    std::string::__init_copy_ctor_external(&v208, *(const std::string::value_type **)(a11 + 40), *(_QWORD *)(a11 + 48));
  else
    v208 = *(std::string *)(a11 + 40);
  if (*(char *)(a12 + 31) < 0)
    std::string::__init_copy_ctor_external(&v200, *(const std::string::value_type **)(a12 + 8), *(_QWORD *)(a12 + 16));
  else
    v200 = *(std::string *)(a12 + 8);
  v44 = *(_DWORD *)(a12 + 32);
  v199 = off_24C335B18;
  v202 = *(_QWORD *)(a12 + 36);
  v45 = *(_DWORD *)(a12 + 44);
  v101 = v44;
  v201 = v44;
  v203 = v45;
  if (*(char *)(a13 + 31) < 0)
    std::string::__init_copy_ctor_external(&v195, *(const std::string::value_type **)(a13 + 8), *(_QWORD *)(a13 + 16));
  else
    v195 = *(std::string *)(a13 + 8);
  v46 = *(_DWORD *)(a13 + 32);
  v194 = off_24C335B18;
  v197 = *(_QWORD *)(a13 + 36);
  v47 = *(_DWORD *)(a13 + 44);
  v100 = v46;
  v196 = v46;
  v198 = v47;
  v189 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a14 + 31) < 0)
    std::string::__init_copy_ctor_external(&v190, *(const std::string::value_type **)(a14 + 8), *(_QWORD *)(a14 + 16));
  else
    v190 = *(std::string *)(a14 + 8);
  v191 = *(_DWORD *)(a14 + 32);
  v189 = &off_24C335AB8;
  v192 = *(_BYTE *)(a14 + 36);
  if (*(char *)(a14 + 63) < 0)
    std::string::__init_copy_ctor_external(&v193, *(const std::string::value_type **)(a14 + 40), *(_QWORD *)(a14 + 48));
  else
    v193 = *(std::string *)(a14 + 40);
  v84 = v41;
  if (*(char *)(a15 + 31) < 0)
    std::string::__init_copy_ctor_external(&v185, *(const std::string::value_type **)(a15 + 8), *(_QWORD *)(a15 + 16));
  else
    v185 = *(std::string *)(a15 + 8);
  v48 = *(_DWORD *)(a15 + 32);
  v184 = off_24C335B18;
  v187 = *(_QWORD *)(a15 + 36);
  v49 = *(_DWORD *)(a15 + 44);
  v99 = v48;
  v186 = v48;
  v188 = v49;
  v175 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a16 + 31) < 0)
    std::string::__init_copy_ctor_external(&v176, *(const std::string::value_type **)(a16 + 8), *(_QWORD *)(a16 + 16));
  else
    v176 = *(std::string *)(a16 + 8);
  v177 = *(_DWORD *)(a16 + 32);
  v175 = &off_24C335A98;
  v178 = *(_BYTE *)(a16 + 36);
  v50 = *(const void **)(a16 + 64);
  v51 = *(_QWORD *)(a16 + 48);
  v179 = &off_24C331510;
  v180 = v51;
  v181 = v51;
  if (v51)
    v52 = (void *)operator new[]();
  else
    v52 = 0;
  v182 = v52;
  v183 = 1;
  if (v50)
    memcpy(v52, v50, v51);
  else
    bzero(v52, v51);
  if (*(char *)(a17 + 31) < 0)
    std::string::__init_copy_ctor_external(&v172, *(const std::string::value_type **)(a17 + 8), *(_QWORD *)(a17 + 16));
  else
    v172 = *(std::string *)(a17 + 8);
  v98 = *(_DWORD *)(a17 + 32);
  v173 = v98;
  v171 = off_24C335AF8;
  v97 = *(_QWORD *)(a17 + 36);
  v174 = v97;
  if (*(char *)(a18 + 31) < 0)
    std::string::__init_copy_ctor_external(&v168, *(const std::string::value_type **)(a18 + 8), *(_QWORD *)(a18 + 16));
  else
    v168 = *(std::string *)(a18 + 8);
  v96 = *(_DWORD *)(a18 + 32);
  v169 = v96;
  v167 = off_24C335AF8;
  v95 = *(_QWORD *)(a18 + 36);
  v170 = v95;
  if (*(char *)(a19 + 31) < 0)
    std::string::__init_copy_ctor_external(&v164, *(const std::string::value_type **)(a19 + 8), *(_QWORD *)(a19 + 16));
  else
    v164 = *(std::string *)(a19 + 8);
  v94 = *(_DWORD *)(a19 + 32);
  v165 = v94;
  v163 = off_24C335AF8;
  v93 = *(_QWORD *)(a19 + 36);
  v166 = v93;
  if (*(char *)(a20 + 31) < 0)
    std::string::__init_copy_ctor_external(&v160, *(const std::string::value_type **)(a20 + 8), *(_QWORD *)(a20 + 16));
  else
    v160 = *(std::string *)(a20 + 8);
  v92 = *(_DWORD *)(a20 + 32);
  v161 = v92;
  v159 = off_24C335AF8;
  v91 = *(_QWORD *)(a20 + 36);
  v162 = v91;
  v154 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a21 + 31) < 0)
    std::string::__init_copy_ctor_external(&v155, *(const std::string::value_type **)(a21 + 8), *(_QWORD *)(a21 + 16));
  else
    v155 = *(std::string *)(a21 + 8);
  v156 = *(_DWORD *)(a21 + 32);
  v154 = &off_24C335AB8;
  v157 = *(_BYTE *)(a21 + 36);
  if (*(char *)(a21 + 63) < 0)
    std::string::__init_copy_ctor_external(&v158, *(const std::string::value_type **)(a21 + 40), *(_QWORD *)(a21 + 48));
  else
    v158 = *(std::string *)(a21 + 40);
  if (*(char *)(a22 + 31) < 0)
    std::string::__init_copy_ctor_external(&v151, *(const std::string::value_type **)(a22 + 8), *(_QWORD *)(a22 + 16));
  else
    v151 = *(std::string *)(a22 + 8);
  v90 = *(_DWORD *)(a22 + 32);
  v152 = v90;
  v150 = off_24C335AF8;
  v89 = *(_QWORD *)(a22 + 36);
  v153 = v89;
  if (*(char *)(a23 + 31) < 0)
    std::string::__init_copy_ctor_external(&v146, *(const std::string::value_type **)(a23 + 8), *(_QWORD *)(a23 + 16));
  else
    v146 = *(std::string *)(a23 + 8);
  v53 = *(_DWORD *)(a23 + 32);
  v145 = off_24C335B18;
  v148 = *(_QWORD *)(a23 + 36);
  v54 = *(_DWORD *)(a23 + 44);
  v88 = v53;
  v147 = v53;
  v149 = v54;
  if (*(char *)(a24 + 31) < 0)
    std::string::__init_copy_ctor_external(&v141, *(const std::string::value_type **)(a24 + 8), *(_QWORD *)(a24 + 16));
  else
    v141 = *(std::string *)(a24 + 8);
  v55 = *(_DWORD *)(a24 + 32);
  v140 = off_24C335B18;
  v143 = *(_QWORD *)(a24 + 36);
  v56 = *(_DWORD *)(a24 + 44);
  v142 = v55;
  v144 = v56;
  v135 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a25 + 31) < 0)
    std::string::__init_copy_ctor_external(&v136, *(const std::string::value_type **)(a25 + 8), *(_QWORD *)(a25 + 16));
  else
    v136 = *(std::string *)(a25 + 8);
  v137 = *(_DWORD *)(a25 + 32);
  v135 = &off_24C335AB8;
  v138 = *(_BYTE *)(a25 + 36);
  if (*(char *)(a25 + 63) < 0)
    std::string::__init_copy_ctor_external(&v139, *(const std::string::value_type **)(a25 + 40), *(_QWORD *)(a25 + 48));
  else
    v139 = *(std::string *)(a25 + 40);
  v130 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a26 + 31) < 0)
    std::string::__init_copy_ctor_external(&v131, *(const std::string::value_type **)(a26 + 8), *(_QWORD *)(a26 + 16));
  else
    v131 = *(std::string *)(a26 + 8);
  v132 = *(_DWORD *)(a26 + 32);
  v130 = &off_24C335AB8;
  v133 = *(_BYTE *)(a26 + 36);
  if (*(char *)(a26 + 63) < 0)
    std::string::__init_copy_ctor_external(&v134, *(const std::string::value_type **)(a26 + 40), *(_QWORD *)(a26 + 48));
  else
    v134 = *(std::string *)(a26 + 40);
  v125 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a27 + 31) < 0)
    std::string::__init_copy_ctor_external(&v126, *(const std::string::value_type **)(a27 + 8), *(_QWORD *)(a27 + 16));
  else
    v126 = *(std::string *)(a27 + 8);
  v127 = *(_DWORD *)(a27 + 32);
  v125 = &off_24C335AB8;
  v128 = *(_BYTE *)(a27 + 36);
  if (*(char *)(a27 + 63) < 0)
    std::string::__init_copy_ctor_external(&v129, *(const std::string::value_type **)(a27 + 40), *(_QWORD *)(a27 + 48));
  else
    v129 = *(std::string *)(a27 + 40);
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v350, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
  else
    v350 = __s;
  v351 = v87;
  v349 = off_24C335AF8;
  v352 = v43;
  if (SHIBYTE(v230.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v346, v230.__r_.__value_.__l.__data_, v230.__r_.__value_.__l.__size_);
  else
    v346 = v230;
  v347 = v122;
  v345 = off_24C335AF8;
  v348 = v120;
  if (SHIBYTE(v226.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v342, v226.__r_.__value_.__l.__data_, v226.__r_.__value_.__l.__size_);
  else
    v342 = v226;
  v343 = v118;
  v341 = off_24C335AF8;
  v344 = v116;
  if (SHIBYTE(v222.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v338, v222.__r_.__value_.__l.__data_, v222.__r_.__value_.__l.__size_);
  else
    v338 = v222;
  v339 = v114;
  v337 = off_24C335AF8;
  v340 = v112;
  if (SHIBYTE(v218.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v334, v218.__r_.__value_.__l.__data_, v218.__r_.__value_.__l.__size_);
  else
    v334 = v218;
  v335 = v110;
  v333 = off_24C335AF8;
  v336 = v108;
  if (SHIBYTE(v214.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v330, v214.__r_.__value_.__l.__data_, v214.__r_.__value_.__l.__size_);
  else
    v330 = v214;
  v331 = v106;
  v329 = off_24C335AF8;
  v332 = v104;
  if (SHIBYTE(v210.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v326, v210.__r_.__value_.__l.__data_, v210.__r_.__value_.__l.__size_);
  else
    v326 = v210;
  v327 = v103;
  v325 = off_24C335AF8;
  v328 = v102;
  v320 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v205.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v321, v205.__r_.__value_.__l.__data_, v205.__r_.__value_.__l.__size_);
  else
    v321 = v205;
  v322 = v206;
  v320 = &off_24C335AB8;
  v323 = v207;
  if (SHIBYTE(v208.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v324, v208.__r_.__value_.__l.__data_, v208.__r_.__value_.__l.__size_);
  else
    v324 = v208;
  if (SHIBYTE(v200.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v316, v200.__r_.__value_.__l.__data_, v200.__r_.__value_.__l.__size_);
  else
    v316 = v200;
  v315 = off_24C335B18;
  v318 = v202;
  v317 = v101;
  v319 = v203;
  v310 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v195.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v311, v195.__r_.__value_.__l.__data_, v195.__r_.__value_.__l.__size_);
  else
    v311 = v195;
  v310 = off_24C335B18;
  v313 = v197;
  v312 = v100;
  v314 = v198;
  v305 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v190.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v306, v190.__r_.__value_.__l.__data_, v190.__r_.__value_.__l.__size_);
  else
    v306 = v190;
  v307 = v191;
  v305 = &off_24C335AB8;
  v308 = v192;
  if (SHIBYTE(v193.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v309, v193.__r_.__value_.__l.__data_, v193.__r_.__value_.__l.__size_);
  else
    v309 = v193;
  v300 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v185.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v301, v185.__r_.__value_.__l.__data_, v185.__r_.__value_.__l.__size_);
  else
    v301 = v185;
  v300 = off_24C335B18;
  v303 = v187;
  v302 = v99;
  v304 = v188;
  v291 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v176.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v292, v176.__r_.__value_.__l.__data_, v176.__r_.__value_.__l.__size_);
  else
    v292 = v176;
  v293 = v177;
  v291 = &off_24C335A98;
  v294 = v178;
  v57 = v182;
  v58 = v180;
  v295 = &off_24C331510;
  v296 = v180;
  v297 = v180;
  if (v180)
    v59 = (void *)operator new[]();
  else
    v59 = 0;
  v298 = v59;
  v299 = 1;
  if (v57)
    memcpy(v59, v57, v58);
  else
    bzero(v59, v58);
  v287 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v172.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v288, v172.__r_.__value_.__l.__data_, v172.__r_.__value_.__l.__size_);
  else
    v288 = v172;
  v289 = v98;
  v287 = off_24C335AF8;
  v290 = v97;
  v283 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v168.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v284, v168.__r_.__value_.__l.__data_, v168.__r_.__value_.__l.__size_);
  else
    v284 = v168;
  v285 = v96;
  v283 = off_24C335AF8;
  v286 = v95;
  v279 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v164.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v280, v164.__r_.__value_.__l.__data_, v164.__r_.__value_.__l.__size_);
  else
    v280 = v164;
  v281 = v94;
  v279 = off_24C335AF8;
  v282 = v93;
  v275 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v160.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v276, v160.__r_.__value_.__l.__data_, v160.__r_.__value_.__l.__size_);
  else
    v276 = v160;
  v277 = v92;
  v275 = off_24C335AF8;
  v278 = v91;
  v270 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v155.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v271, v155.__r_.__value_.__l.__data_, v155.__r_.__value_.__l.__size_);
  else
    v271 = v155;
  v272 = v156;
  v270 = &off_24C335AB8;
  v273 = v157;
  if (SHIBYTE(v158.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v274, v158.__r_.__value_.__l.__data_, v158.__r_.__value_.__l.__size_);
  else
    v274 = v158;
  v266 = (uint64_t (**)())off_24C335D90;
  v60 = SHIBYTE(v151.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v151.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v267, v151.__r_.__value_.__l.__data_, v151.__r_.__value_.__l.__size_);
  else
    v267 = v151;
  v268 = v90;
  v266 = off_24C335AF8;
  v269 = v89;
  v261 = (uint64_t (**)())off_24C335D90;
  v61 = SHIBYTE(v146.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v146.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v262, v146.__r_.__value_.__l.__data_, v146.__r_.__value_.__l.__size_);
  else
    v262 = v146;
  v261 = off_24C335B18;
  v264 = v148;
  v263 = v88;
  v265 = v149;
  v256 = (uint64_t (**)())off_24C335D90;
  v86 = SHIBYTE(v141.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v141.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v257, v141.__r_.__value_.__l.__data_, v141.__r_.__value_.__l.__size_);
  else
    v257 = v141;
  v256 = off_24C335B18;
  v259 = v143;
  v258 = v55;
  v260 = v144;
  v251 = (uint64_t (**)())off_24C335D90;
  v82 = v61;
  if (SHIBYTE(v136.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(&v252, v136.__r_.__value_.__l.__data_, v136.__r_.__value_.__l.__size_);
    v62 = v55;
  }
  else
  {
    v62 = v55;
    v252 = v136;
  }
  v253 = v137;
  v251 = &off_24C335AB8;
  v254 = v138;
  v83 = v62;
  if (SHIBYTE(v139.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v255, v139.__r_.__value_.__l.__data_, v139.__r_.__value_.__l.__size_);
  else
    v255 = v139;
  v246 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v131.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v247, v131.__r_.__value_.__l.__data_, v131.__r_.__value_.__l.__size_);
  else
    v247 = v131;
  v248 = v132;
  v246 = &off_24C335AB8;
  v249 = v133;
  if (SHIBYTE(v134.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v250, v134.__r_.__value_.__l.__data_, v134.__r_.__value_.__l.__size_);
  else
    v250 = v134;
  v241 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v126.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v242, v126.__r_.__value_.__l.__data_, v126.__r_.__value_.__l.__size_);
  else
    v242 = v126;
  v243 = v127;
  v241 = &off_24C335AB8;
  v244 = v128;
  if (SHIBYTE(v129.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v245, v129.__r_.__value_.__l.__data_, v129.__r_.__value_.__l.__size_);
  else
    v245 = v129;
  v457 = (uint64_t (**)())off_24C335D90;
  v85 = SHIBYTE(v346.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v346.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v458, v346.__r_.__value_.__l.__data_, v346.__r_.__value_.__l.__size_);
  else
    v458 = v346;
  v459 = v122;
  v457 = off_24C335AF8;
  v460 = v120;
  v453 = (uint64_t (**)())off_24C335D90;
  v63 = SHIBYTE(v342.__r_.__value_.__r.__words[2]);
  v81 = v60;
  if (SHIBYTE(v342.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v454, v342.__r_.__value_.__l.__data_, v342.__r_.__value_.__l.__size_);
  else
    v454 = v342;
  v455 = v118;
  v453 = off_24C335AF8;
  v456 = v116;
  v449 = (uint64_t (**)())off_24C335D90;
  v123 = SHIBYTE(v338.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v338.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v450, v338.__r_.__value_.__l.__data_, v338.__r_.__value_.__l.__size_);
  else
    v450 = v338;
  v451 = v114;
  v449 = off_24C335AF8;
  v452 = v112;
  v445 = (uint64_t (**)())off_24C335D90;
  v121 = SHIBYTE(v334.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v334.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v446, v334.__r_.__value_.__l.__data_, v334.__r_.__value_.__l.__size_);
  else
    v446 = v334;
  v447 = v110;
  v445 = off_24C335AF8;
  v448 = v108;
  v441 = (uint64_t (**)())off_24C335D90;
  v119 = SHIBYTE(v330.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v330.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v442, v330.__r_.__value_.__l.__data_, v330.__r_.__value_.__l.__size_);
  else
    v442 = v330;
  v443 = v106;
  v441 = off_24C335AF8;
  v444 = v104;
  v437 = (uint64_t (**)())off_24C335D90;
  v117 = SHIBYTE(v326.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v326.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v438, v326.__r_.__value_.__l.__data_, v326.__r_.__value_.__l.__size_);
  else
    v438 = v326;
  v439 = v103;
  v437 = off_24C335AF8;
  v440 = v102;
  v432 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v321.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v433, v321.__r_.__value_.__l.__data_, v321.__r_.__value_.__l.__size_);
  else
    v433 = v321;
  v434 = v322;
  v432 = &off_24C335AB8;
  v435 = v323;
  if (SHIBYTE(v324.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v436, v324.__r_.__value_.__l.__data_, v324.__r_.__value_.__l.__size_);
  else
    v436 = v324;
  v427 = (uint64_t (**)())off_24C335D90;
  v124 = SHIBYTE(v316.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v316.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v428, v316.__r_.__value_.__l.__data_, v316.__r_.__value_.__l.__size_);
  else
    v428 = v316;
  v427 = off_24C335B18;
  v430 = v318;
  v429 = v101;
  v431 = v319;
  v422 = (uint64_t (**)())off_24C335D90;
  v115 = SHIBYTE(v311.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v311.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v423, v311.__r_.__value_.__l.__data_, v311.__r_.__value_.__l.__size_);
  else
    v423 = v311;
  v422 = off_24C335B18;
  v425 = v313;
  v424 = v100;
  v426 = v314;
  v417 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v306.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v418, v306.__r_.__value_.__l.__data_, v306.__r_.__value_.__l.__size_);
  else
    v418 = v306;
  v419 = v307;
  v417 = &off_24C335AB8;
  v420 = v308;
  if (SHIBYTE(v309.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v421, v309.__r_.__value_.__l.__data_, v309.__r_.__value_.__l.__size_);
  else
    v421 = v309;
  v412 = (uint64_t (**)())off_24C335D90;
  v64 = SHIBYTE(v301.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v301.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v413, v301.__r_.__value_.__l.__data_, v301.__r_.__value_.__l.__size_);
  else
    v413 = v301;
  v412 = off_24C335B18;
  v415 = v303;
  v414 = v99;
  v416 = v304;
  v403 = (uint64_t (**)())off_24C335D90;
  v113 = v64;
  if (SHIBYTE(v292.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v404, v292.__r_.__value_.__l.__data_, v292.__r_.__value_.__l.__size_);
  else
    v404 = v292;
  v405 = v293;
  v403 = &off_24C335A98;
  v406 = v294;
  v65 = v298;
  v66 = v296;
  v407 = &off_24C331510;
  v408 = v296;
  v409 = v296;
  if (v296)
    v67 = (void *)operator new[]();
  else
    v67 = 0;
  v410 = v67;
  v411 = 1;
  if (v65)
    memcpy(v67, v65, v66);
  else
    bzero(v67, v66);
  v399 = (uint64_t (**)())off_24C335D90;
  v68 = SHIBYTE(v288.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v288.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v400, v288.__r_.__value_.__l.__data_, v288.__r_.__value_.__l.__size_);
  else
    v400 = v288;
  v401 = v98;
  v399 = off_24C335AF8;
  v402 = v97;
  v395 = (uint64_t (**)())off_24C335D90;
  v69 = SHIBYTE(v284.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v284.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v396, v284.__r_.__value_.__l.__data_, v284.__r_.__value_.__l.__size_);
  else
    v396 = v284;
  v397 = v96;
  v395 = off_24C335AF8;
  v398 = v95;
  v391 = (uint64_t (**)())off_24C335D90;
  v111 = SHIBYTE(v280.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v280.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v392, v280.__r_.__value_.__l.__data_, v280.__r_.__value_.__l.__size_);
  else
    v392 = v280;
  v393 = v94;
  v391 = off_24C335AF8;
  v394 = v93;
  v387 = (uint64_t (**)())off_24C335D90;
  v109 = SHIBYTE(v276.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v276.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v388, v276.__r_.__value_.__l.__data_, v276.__r_.__value_.__l.__size_);
  else
    v388 = v276;
  v389 = v92;
  v387 = off_24C335AF8;
  v390 = v91;
  v382 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v271.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v383, v271.__r_.__value_.__l.__data_, v271.__r_.__value_.__l.__size_);
  else
    v383 = v271;
  v384 = v272;
  v382 = &off_24C335AB8;
  v385 = v273;
  v107 = v69;
  if (SHIBYTE(v274.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v386, v274.__r_.__value_.__l.__data_, v274.__r_.__value_.__l.__size_);
  else
    v386 = v274;
  v378 = (uint64_t (**)())off_24C335D90;
  v70 = SHIBYTE(v267.__r_.__value_.__r.__words[2]);
  v105 = v68;
  if (SHIBYTE(v267.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v379, v267.__r_.__value_.__l.__data_, v267.__r_.__value_.__l.__size_);
  else
    v379 = v267;
  v380 = v90;
  v378 = off_24C335AF8;
  v381 = v89;
  v373 = (uint64_t (**)())off_24C335D90;
  v71 = SHIBYTE(v262.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v262.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v374, v262.__r_.__value_.__l.__data_, v262.__r_.__value_.__l.__size_);
  else
    v374 = v262;
  v373 = off_24C335B18;
  v376 = v264;
  v375 = v88;
  v377 = v265;
  v368 = (uint64_t (**)())off_24C335D90;
  v72 = SHIBYTE(v257.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v257.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&__p, v257.__r_.__value_.__l.__data_, v257.__r_.__value_.__l.__size_);
  else
    __p = v257;
  v368 = off_24C335B18;
  v371 = v259;
  v370 = v83;
  v372 = v260;
  v363 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v252.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v364, v252.__r_.__value_.__l.__data_, v252.__r_.__value_.__l.__size_);
  else
    v364 = v252;
  v365 = v253;
  v363 = &off_24C335AB8;
  v366 = v254;
  if (SHIBYTE(v255.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v367, v255.__r_.__value_.__l.__data_, v255.__r_.__value_.__l.__size_);
  else
    v367 = v255;
  v358 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v247.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v359, v247.__r_.__value_.__l.__data_, v247.__r_.__value_.__l.__size_);
  else
    v359 = v247;
  v360 = v248;
  v358 = &off_24C335AB8;
  v361 = v249;
  if (SHIBYTE(v250.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v362, v250.__r_.__value_.__l.__data_, v250.__r_.__value_.__l.__size_);
  else
    v362 = v250;
  v353 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v242.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v354, v242.__r_.__value_.__l.__data_, v242.__r_.__value_.__l.__size_);
  else
    v354 = v242;
  v355 = v243;
  v353 = &off_24C335AB8;
  v356 = v244;
  if (SHIBYTE(v245.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v357, v245.__r_.__value_.__l.__data_, v245.__r_.__value_.__l.__size_);
  else
    v357 = v245;
  mediaplatform::DatabaseColumnTuple<16ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>>::DatabaseColumnTuple(v42, (uint64_t)&v457, (uint64_t)&v453, (uint64_t)&v449, (uint64_t)&v445, (uint64_t)&v441, (uint64_t)&v437, (uint64_t)&v432, (uint64_t)&v427, (uint64_t)&v422, (uint64_t)&v417, (uint64_t)&v412, (uint64_t)&v403, (uint64_t)&v399, (uint64_t)&v395, (uint64_t)&v391, (uint64_t)&v387, (uint64_t)&v382, (uint64_t)&v378,
    (uint64_t)&v373,
    (uint64_t)&v368,
    (uint64_t)&v363,
    (uint64_t)&v358,
    (uint64_t)&v353);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v353);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v358);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v363);
  v368 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v373 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v374.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v374.__r_.__value_.__l.__data_);
  v378 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v379.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v379.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v382);
  v387 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v388.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v388.__r_.__value_.__l.__data_);
  v391 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v392.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v392.__r_.__value_.__l.__data_);
  v395 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v396.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v396.__r_.__value_.__l.__data_);
  v399 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v400.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v400.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<mediaplatform::Data>::~DatabaseColumn((uint64_t)&v403);
  v412 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v413.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v413.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v417);
  v422 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v423.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v423.__r_.__value_.__l.__data_);
  v427 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v428.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v428.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v432);
  v437 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v438.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v438.__r_.__value_.__l.__data_);
  v441 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v442.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v442.__r_.__value_.__l.__data_);
  v445 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v446.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v446.__r_.__value_.__l.__data_);
  v449 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v450.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v450.__r_.__value_.__l.__data_);
  v453 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v454.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v454.__r_.__value_.__l.__data_);
  v457 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v458.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v458.__r_.__value_.__l.__data_);
  *(_QWORD *)(v42 + 1232) = off_24C335D90;
  v73 = (std::string *)(v42 + 1240);
  v74 = SHIBYTE(v350.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v350.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v73, v350.__r_.__value_.__l.__data_, v350.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v73->__r_.__value_.__l.__data_ = *(_OWORD *)&v350.__r_.__value_.__l.__data_;
    *(_QWORD *)(v42 + 1256) = *((_QWORD *)&v350.__r_.__value_.__l + 2);
  }
  *(_DWORD *)(v42 + 1264) = v351;
  *(_QWORD *)(v42 + 1232) = off_24C335AF8;
  *(_QWORD *)(v42 + 1268) = v352;
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v241);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v246);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v251);
  v256 = (uint64_t (**)())off_24C335D90;
  if (v72 < 0)
    operator delete(v257.__r_.__value_.__l.__data_);
  v261 = (uint64_t (**)())off_24C335D90;
  if (v71 < 0)
    operator delete(v262.__r_.__value_.__l.__data_);
  v266 = (uint64_t (**)())off_24C335D90;
  if (v70 < 0)
    operator delete(v267.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v270);
  v275 = (uint64_t (**)())off_24C335D90;
  if (v109 < 0)
    operator delete(v276.__r_.__value_.__l.__data_);
  v279 = (uint64_t (**)())off_24C335D90;
  if (v111 < 0)
    operator delete(v280.__r_.__value_.__l.__data_);
  v283 = (uint64_t (**)())off_24C335D90;
  if (v107 < 0)
    operator delete(v284.__r_.__value_.__l.__data_);
  v287 = (uint64_t (**)())off_24C335D90;
  if (v105 < 0)
    operator delete(v288.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<mediaplatform::Data>::~DatabaseColumn((uint64_t)&v291);
  v300 = (uint64_t (**)())off_24C335D90;
  if (v113 < 0)
    operator delete(v301.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v305);
  v310 = (uint64_t (**)())off_24C335D90;
  if (v115 < 0)
    operator delete(v311.__r_.__value_.__l.__data_);
  v315 = (uint64_t (**)())off_24C335D90;
  if (v124 < 0)
    operator delete(v316.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v320);
  v325 = (uint64_t (**)())off_24C335D90;
  if (v117 < 0)
    operator delete(v326.__r_.__value_.__l.__data_);
  v329 = (uint64_t (**)())off_24C335D90;
  if (v119 < 0)
    operator delete(v330.__r_.__value_.__l.__data_);
  v333 = (uint64_t (**)())off_24C335D90;
  if (v121 < 0)
    operator delete(v334.__r_.__value_.__l.__data_);
  if (v123 < 0)
    operator delete(v338.__r_.__value_.__l.__data_);
  if (v63 < 0)
    operator delete(v342.__r_.__value_.__l.__data_);
  if (v85 < 0)
  {
    operator delete(v346.__r_.__value_.__l.__data_);
    if ((v74 & 0x80000000) == 0)
      goto LABEL_356;
  }
  else if ((v74 & 0x80000000) == 0)
  {
    goto LABEL_356;
  }
  operator delete(v350.__r_.__value_.__l.__data_);
LABEL_356:
  *(_QWORD *)(v42 + 1280) = off_24C335D90;
  v75 = (std::string *)(v42 + 1288);
  v76 = SHIBYTE(v238.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v238.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v75, v238.__r_.__value_.__l.__data_, v238.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v75->__r_.__value_.__l.__data_ = *(_OWORD *)&v238.__r_.__value_.__l.__data_;
    *(_QWORD *)(v42 + 1304) = *((_QWORD *)&v238.__r_.__value_.__l + 2);
  }
  *(_DWORD *)(v42 + 1312) = v239;
  *(_QWORD *)(v42 + 1280) = off_24C335AF8;
  *(_QWORD *)(v42 + 1316) = v240;
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v125);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v130);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v135);
  if (v86 < 0)
  {
    operator delete(v141.__r_.__value_.__l.__data_);
    if ((v82 & 0x80000000) == 0)
      goto LABEL_363;
  }
  else if ((v82 & 0x80000000) == 0)
  {
    goto LABEL_363;
  }
  operator delete(v146.__r_.__value_.__l.__data_);
LABEL_363:
  if (v81 < 0)
    operator delete(v151.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v154);
  if (SHIBYTE(v160.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v160.__r_.__value_.__l.__data_);
  if (SHIBYTE(v164.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v164.__r_.__value_.__l.__data_);
  if (SHIBYTE(v168.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v168.__r_.__value_.__l.__data_);
  if (SHIBYTE(v172.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v172.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<mediaplatform::Data>::~DatabaseColumn((uint64_t)&v175);
  if (SHIBYTE(v185.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v185.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v189);
  if (SHIBYTE(v195.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v195.__r_.__value_.__l.__data_);
  if (SHIBYTE(v200.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v200.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v204);
  if (SHIBYTE(v210.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v210.__r_.__value_.__l.__data_);
  if (SHIBYTE(v214.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v214.__r_.__value_.__l.__data_);
  if (SHIBYTE(v218.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v218.__r_.__value_.__l.__data_);
  if (SHIBYTE(v222.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v222.__r_.__value_.__l.__data_);
  if (SHIBYTE(v226.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v226.__r_.__value_.__l.__data_);
  if (SHIBYTE(v230.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v230.__r_.__value_.__l.__data_);
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__s.__r_.__value_.__l.__data_);
    if ((v76 & 0x80000000) == 0)
      goto LABEL_393;
  }
  else if ((v76 & 0x80000000) == 0)
  {
    goto LABEL_393;
  }
  operator delete(v238.__r_.__value_.__l.__data_);
LABEL_393:
  *(_QWORD *)(v42 + 1328) = off_24C335D90;
  v77 = (std::string *)(v42 + 1336);
  if (*(char *)(v84 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v77, *(const std::string::value_type **)(v84 + 8), *(_QWORD *)(v84 + 16));
  }
  else
  {
    v78 = *(_OWORD *)(v84 + 8);
    *(_QWORD *)(v42 + 1352) = *(_QWORD *)(v84 + 24);
    *(_OWORD *)&v77->__r_.__value_.__l.__data_ = v78;
  }
  *(_DWORD *)(v42 + 1360) = *(_DWORD *)(v84 + 32);
  *(_QWORD *)(v42 + 1328) = off_24C335B18;
  v79 = *(_QWORD *)(v84 + 36);
  *(_DWORD *)(v42 + 1372) = *(_DWORD *)(v84 + 44);
  *(_QWORD *)(v42 + 1364) = v79;
  return v42;
}

void sub_20A833B4C(_Unwind_Exception *a1)
{
  uint64_t v1;

  mediaplatform::DatabaseColumnTuple<14ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>>::~DatabaseColumnTuple(v1);
  _Unwind_Resume(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<13ul,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>>::~DatabaseColumnTuple(uint64_t a1)
{
  *(_QWORD *)(a1 + 1328) = off_24C335D90;
  if (*(char *)(a1 + 1359) < 0)
    operator delete(*(void **)(a1 + 1336));
  *(_QWORD *)(a1 + 1280) = off_24C335D90;
  if (*(char *)(a1 + 1311) < 0)
    operator delete(*(void **)(a1 + 1288));
  *(_QWORD *)(a1 + 1232) = off_24C335D90;
  if (*(char *)(a1 + 1263) < 0)
    operator delete(*(void **)(a1 + 1240));
  *(_QWORD *)(a1 + 1184) = off_24C335D90;
  if (*(char *)(a1 + 1215) < 0)
    operator delete(*(void **)(a1 + 1192));
  *(_QWORD *)(a1 + 1136) = off_24C335D90;
  if (*(char *)(a1 + 1167) < 0)
    operator delete(*(void **)(a1 + 1144));
  return mediaplatform::DatabaseColumnTuple<18ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>>::~DatabaseColumnTuple(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<14ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>>::~DatabaseColumnTuple(uint64_t a1)
{
  *(_QWORD *)(a1 + 1280) = off_24C335D90;
  if (*(char *)(a1 + 1311) < 0)
    operator delete(*(void **)(a1 + 1288));
  *(_QWORD *)(a1 + 1232) = off_24C335D90;
  if (*(char *)(a1 + 1263) < 0)
    operator delete(*(void **)(a1 + 1240));
  *(_QWORD *)(a1 + 1184) = off_24C335D90;
  if (*(char *)(a1 + 1215) < 0)
    operator delete(*(void **)(a1 + 1192));
  *(_QWORD *)(a1 + 1136) = off_24C335D90;
  if (*(char *)(a1 + 1167) < 0)
    operator delete(*(void **)(a1 + 1144));
  return mediaplatform::DatabaseColumnTuple<18ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>>::~DatabaseColumnTuple(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<15ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>>::~DatabaseColumnTuple(uint64_t a1)
{
  *(_QWORD *)(a1 + 1232) = off_24C335D90;
  if (*(char *)(a1 + 1263) < 0)
    operator delete(*(void **)(a1 + 1240));
  *(_QWORD *)(a1 + 1184) = off_24C335D90;
  if (*(char *)(a1 + 1215) < 0)
    operator delete(*(void **)(a1 + 1192));
  *(_QWORD *)(a1 + 1136) = off_24C335D90;
  if (*(char *)(a1 + 1167) < 0)
    operator delete(*(void **)(a1 + 1144));
  return mediaplatform::DatabaseColumnTuple<18ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>>::~DatabaseColumnTuple(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<16ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>>::DatabaseColumnTuple(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  const void *v37;
  size_t v38;
  void *v39;
  int v40;
  int v41;
  int v42;
  int v43;
  const void *v44;
  size_t v45;
  void *v46;
  int v47;
  const void *v48;
  size_t v49;
  void *v50;
  int v51;
  int v52;
  int v53;
  int v54;
  int v55;
  std::string *v56;
  int v57;
  std::string *v58;
  int v59;
  std::string *v60;
  __int128 v61;
  int v63;
  int v64;
  int v65;
  int v66;
  int v67;
  int v68;
  int v70;
  int v71;
  int v72;
  uint64_t v73;
  int v74;
  uint64_t v75;
  int v76;
  uint64_t v77;
  int v78;
  uint64_t v79;
  int v80;
  uint64_t v81;
  int v82;
  uint64_t v83;
  int v84;
  int v85;
  int v86;
  int v87;
  int v88;
  uint64_t v89;
  int v90;
  int v91;
  int v92;
  int v93;
  int v94;
  uint64_t v95;
  int v96;
  int v97;
  int v98;
  uint64_t v99;
  int v100;
  int v101;
  int v102;
  uint64_t (**v103)();
  std::string v104;
  int v105;
  char v106;
  std::string v107;
  uint64_t (**v108)();
  std::string v109;
  int v110;
  char v111;
  std::string v112;
  uint64_t (**v113)();
  std::string v114;
  int v115;
  char v116;
  std::string v117;
  uint64_t (**v118)();
  std::string v119;
  int v120;
  uint64_t v121;
  int v122;
  uint64_t (**v123)();
  std::string v124;
  int v125;
  uint64_t v126;
  int v127;
  uint64_t (**v128)();
  std::string v129;
  int v130;
  uint64_t v131;
  uint64_t (**v132)();
  std::string v133;
  int v134;
  char v135;
  std::string v136;
  uint64_t (**v137)();
  std::string v138;
  int v139;
  uint64_t v140;
  uint64_t (**v141)();
  std::string v142;
  int v143;
  uint64_t v144;
  uint64_t (**v145)();
  std::string v146;
  int v147;
  uint64_t v148;
  uint64_t (**v149)();
  std::string v150;
  int v151;
  uint64_t v152;
  uint64_t (**v153)();
  std::string v154;
  int v155;
  char v156;
  void (**v157)(mediaplatform::Data *__hidden);
  size_t v158;
  size_t v159;
  const void *v160;
  char v161;
  uint64_t (**v162)();
  std::string v163;
  int v164;
  uint64_t v165;
  int v166;
  uint64_t (**v167)();
  std::string v168;
  int v169;
  char v170;
  std::string v171;
  uint64_t (**v172)();
  std::string v173;
  int v174;
  uint64_t v175;
  int v176;
  uint64_t (**v177)();
  std::string v178;
  int v179;
  uint64_t v180;
  int v181;
  uint64_t (**v182)();
  std::string v183;
  int v184;
  char v185;
  std::string v186;
  uint64_t (**v187)();
  std::string v188;
  int v189;
  uint64_t v190;
  uint64_t (**v191)();
  std::string v192;
  int v193;
  uint64_t v194;
  uint64_t (**v195)();
  std::string v196;
  int v197;
  uint64_t v198;
  uint64_t (**v199)();
  std::string __s;
  int v201;
  uint64_t v202;
  uint64_t (**v203)();
  std::string v204;
  int v205;
  uint64_t v206;
  uint64_t (**v207)();
  std::string v208;
  int v209;
  char v210;
  std::string v211;
  uint64_t (**v212)();
  std::string v213;
  int v214;
  char v215;
  std::string v216;
  uint64_t (**v217)();
  std::string v218;
  int v219;
  char v220;
  std::string v221;
  uint64_t (**v222)();
  std::string v223;
  int v224;
  uint64_t v225;
  int v226;
  uint64_t (**v227)();
  std::string v228;
  int v229;
  uint64_t v230;
  int v231;
  uint64_t (**v232)();
  std::string v233;
  int v234;
  uint64_t v235;
  uint64_t (**v236)();
  std::string v237;
  int v238;
  char v239;
  std::string v240;
  uint64_t (**v241)();
  std::string v242;
  int v243;
  uint64_t v244;
  uint64_t (**v245)();
  std::string v246;
  int v247;
  uint64_t v248;
  uint64_t (**v249)();
  std::string v250;
  int v251;
  uint64_t v252;
  uint64_t (**v253)();
  std::string v254;
  int v255;
  uint64_t v256;
  uint64_t (**v257)();
  std::string v258;
  int v259;
  char v260;
  void (**v261)(mediaplatform::Data *__hidden);
  size_t v262;
  size_t v263;
  const void *v264;
  char v265;
  uint64_t (**v266)();
  std::string v267;
  int v268;
  uint64_t v269;
  int v270;
  uint64_t (**v271)();
  std::string v272;
  int v273;
  char v274;
  std::string v275;
  uint64_t (**v276)();
  std::string v277;
  int v278;
  uint64_t v279;
  int v280;
  uint64_t (**v281)();
  std::string v282;
  int v283;
  uint64_t v284;
  int v285;
  uint64_t (**v286)();
  std::string v287;
  int v288;
  char v289;
  std::string v290;
  uint64_t (**v291)();
  std::string v292;
  int v293;
  uint64_t v294;
  uint64_t (**v295)();
  std::string v296;
  int v297;
  uint64_t v298;
  uint64_t (**v299)();
  std::string v300;
  int v301;
  uint64_t v302;
  uint64_t (**v303)();
  std::string v304;
  int v305;
  uint64_t v306;
  uint64_t (**v307)();
  std::string v308;
  int v309;
  char v310;
  std::string v311;
  uint64_t (**v312)();
  std::string v313;
  int v314;
  char v315;
  std::string v316;
  uint64_t (**v317)();
  std::string v318;
  int v319;
  char v320;
  std::string v321;
  uint64_t (**v322)();
  std::string __p;
  int v324;
  uint64_t v325;
  int v326;
  uint64_t (**v327)();
  std::string v328;
  int v329;
  uint64_t v330;
  int v331;
  uint64_t (**v332)();
  std::string v333;
  int v334;
  uint64_t v335;
  uint64_t (**v336)();
  std::string v337;
  int v338;
  char v339;
  std::string v340;
  uint64_t (**v341)();
  std::string v342;
  int v343;
  uint64_t v344;
  uint64_t (**v345)();
  std::string v346;
  int v347;
  uint64_t v348;
  uint64_t (**v349)();
  std::string v350;
  int v351;
  uint64_t v352;
  uint64_t (**v353)();
  std::string v354;
  int v355;
  uint64_t v356;
  uint64_t (**v357)();
  std::string v358;
  int v359;
  char v360;
  void (**v361)(mediaplatform::Data *__hidden);
  size_t v362;
  size_t v363;
  void *v364;
  char v365;
  uint64_t (**v366)();
  std::string v367;
  int v368;
  uint64_t v369;
  int v370;
  uint64_t (**v371)();
  std::string v372;
  int v373;
  char v374;
  std::string v375;
  uint64_t (**v376)();
  std::string v377;
  int v378;
  uint64_t v379;
  int v380;
  uint64_t (**v381)();
  std::string v382;
  int v383;
  uint64_t v384;
  int v385;
  uint64_t (**v386)();
  std::string v387;
  int v388;
  char v389;
  std::string v390;
  uint64_t (**v391)();
  std::string v392;
  int v393;
  uint64_t v394;
  uint64_t (**v395)();
  std::string v396;
  int v397;
  uint64_t v398;
  uint64_t (**v399)();
  std::string v400;
  int v401;
  uint64_t v402;

  if (*(char *)(a3 + 31) < 0)
    std::string::__init_copy_ctor_external(&v204, *(const std::string::value_type **)(a3 + 8), *(_QWORD *)(a3 + 16));
  else
    v204 = *(std::string *)(a3 + 8);
  v205 = *(_DWORD *)(a3 + 32);
  v203 = off_24C335AF8;
  v206 = *(_QWORD *)(a3 + 36);
  if (*(char *)(a4 + 31) < 0)
    std::string::__init_copy_ctor_external(&__s, *(const std::string::value_type **)(a4 + 8), *(_QWORD *)(a4 + 16));
  else
    __s = *(std::string *)(a4 + 8);
  v84 = *(_DWORD *)(a4 + 32);
  v201 = v84;
  v199 = off_24C335AF8;
  v83 = *(_QWORD *)(a4 + 36);
  v202 = v83;
  if (*(char *)(a5 + 31) < 0)
    std::string::__init_copy_ctor_external(&v196, *(const std::string::value_type **)(a5 + 8), *(_QWORD *)(a5 + 16));
  else
    v196 = *(std::string *)(a5 + 8);
  v101 = *(_DWORD *)(a5 + 32);
  v197 = v101;
  v195 = off_24C335AF8;
  v99 = *(_QWORD *)(a5 + 36);
  v198 = v99;
  if (*(char *)(a6 + 31) < 0)
    std::string::__init_copy_ctor_external(&v192, *(const std::string::value_type **)(a6 + 8), *(_QWORD *)(a6 + 16));
  else
    v192 = *(std::string *)(a6 + 8);
  v97 = *(_DWORD *)(a6 + 32);
  v193 = v97;
  v191 = off_24C335AF8;
  v95 = *(_QWORD *)(a6 + 36);
  v194 = v95;
  if (*(char *)(a7 + 31) < 0)
    std::string::__init_copy_ctor_external(&v188, *(const std::string::value_type **)(a7 + 8), *(_QWORD *)(a7 + 16));
  else
    v188 = *(std::string *)(a7 + 8);
  v91 = *(_DWORD *)(a7 + 32);
  v189 = v91;
  v187 = off_24C335AF8;
  v89 = *(_QWORD *)(a7 + 36);
  v190 = v89;
  v182 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a8 + 31) < 0)
    std::string::__init_copy_ctor_external(&v183, *(const std::string::value_type **)(a8 + 8), *(_QWORD *)(a8 + 16));
  else
    v183 = *(std::string *)(a8 + 8);
  v184 = *(_DWORD *)(a8 + 32);
  v182 = &off_24C335AB8;
  v185 = *(_BYTE *)(a8 + 36);
  if (*(char *)(a8 + 63) < 0)
    std::string::__init_copy_ctor_external(&v186, *(const std::string::value_type **)(a8 + 40), *(_QWORD *)(a8 + 48));
  else
    v186 = *(std::string *)(a8 + 40);
  if (*(char *)(a9 + 31) < 0)
    std::string::__init_copy_ctor_external(&v178, *(const std::string::value_type **)(a9 + 8), *(_QWORD *)(a9 + 16));
  else
    v178 = *(std::string *)(a9 + 8);
  v31 = *(_DWORD *)(a9 + 32);
  v177 = off_24C335B18;
  v180 = *(_QWORD *)(a9 + 36);
  v32 = *(_DWORD *)(a9 + 44);
  v87 = v31;
  v179 = v31;
  v181 = v32;
  if (*(char *)(a10 + 31) < 0)
    std::string::__init_copy_ctor_external(&v173, *(const std::string::value_type **)(a10 + 8), *(_QWORD *)(a10 + 16));
  else
    v173 = *(std::string *)(a10 + 8);
  v33 = *(_DWORD *)(a10 + 32);
  v172 = off_24C335B18;
  v175 = *(_QWORD *)(a10 + 36);
  v34 = *(_DWORD *)(a10 + 44);
  v93 = v33;
  v174 = v33;
  v176 = v34;
  v167 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a11 + 31) < 0)
    std::string::__init_copy_ctor_external(&v168, *(const std::string::value_type **)(a11 + 8), *(_QWORD *)(a11 + 16));
  else
    v168 = *(std::string *)(a11 + 8);
  v169 = *(_DWORD *)(a11 + 32);
  v167 = &off_24C335AB8;
  v170 = *(_BYTE *)(a11 + 36);
  if (*(char *)(a11 + 63) < 0)
    std::string::__init_copy_ctor_external(&v171, *(const std::string::value_type **)(a11 + 40), *(_QWORD *)(a11 + 48));
  else
    v171 = *(std::string *)(a11 + 40);
  if (*(char *)(a12 + 31) < 0)
    std::string::__init_copy_ctor_external(&v163, *(const std::string::value_type **)(a12 + 8), *(_QWORD *)(a12 + 16));
  else
    v163 = *(std::string *)(a12 + 8);
  v35 = *(_DWORD *)(a12 + 32);
  v162 = off_24C335B18;
  v165 = *(_QWORD *)(a12 + 36);
  v36 = *(_DWORD *)(a12 + 44);
  v85 = v35;
  v164 = v35;
  v166 = v36;
  v153 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a13 + 31) < 0)
    std::string::__init_copy_ctor_external(&v154, *(const std::string::value_type **)(a13 + 8), *(_QWORD *)(a13 + 16));
  else
    v154 = *(std::string *)(a13 + 8);
  v155 = *(_DWORD *)(a13 + 32);
  v153 = &off_24C335A98;
  v156 = *(_BYTE *)(a13 + 36);
  v37 = *(const void **)(a13 + 64);
  v38 = *(_QWORD *)(a13 + 48);
  v157 = &off_24C331510;
  v158 = v38;
  v159 = v38;
  if (v38)
    v39 = (void *)operator new[]();
  else
    v39 = 0;
  v160 = v39;
  v161 = 1;
  if (v37)
    memcpy(v39, v37, v38);
  else
    bzero(v39, v38);
  if (*(char *)(a14 + 31) < 0)
    std::string::__init_copy_ctor_external(&v150, *(const std::string::value_type **)(a14 + 8), *(_QWORD *)(a14 + 16));
  else
    v150 = *(std::string *)(a14 + 8);
  v82 = *(_DWORD *)(a14 + 32);
  v151 = v82;
  v149 = off_24C335AF8;
  v81 = *(_QWORD *)(a14 + 36);
  v152 = v81;
  if (*(char *)(a15 + 31) < 0)
    std::string::__init_copy_ctor_external(&v146, *(const std::string::value_type **)(a15 + 8), *(_QWORD *)(a15 + 16));
  else
    v146 = *(std::string *)(a15 + 8);
  v80 = *(_DWORD *)(a15 + 32);
  v147 = v80;
  v145 = off_24C335AF8;
  v79 = *(_QWORD *)(a15 + 36);
  v148 = v79;
  if (*(char *)(a16 + 31) < 0)
    std::string::__init_copy_ctor_external(&v142, *(const std::string::value_type **)(a16 + 8), *(_QWORD *)(a16 + 16));
  else
    v142 = *(std::string *)(a16 + 8);
  v78 = *(_DWORD *)(a16 + 32);
  v143 = v78;
  v141 = off_24C335AF8;
  v77 = *(_QWORD *)(a16 + 36);
  v144 = v77;
  if (*(char *)(a17 + 31) < 0)
    std::string::__init_copy_ctor_external(&v138, *(const std::string::value_type **)(a17 + 8), *(_QWORD *)(a17 + 16));
  else
    v138 = *(std::string *)(a17 + 8);
  v76 = *(_DWORD *)(a17 + 32);
  v139 = v76;
  v137 = off_24C335AF8;
  v75 = *(_QWORD *)(a17 + 36);
  v140 = v75;
  v132 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a18 + 31) < 0)
    std::string::__init_copy_ctor_external(&v133, *(const std::string::value_type **)(a18 + 8), *(_QWORD *)(a18 + 16));
  else
    v133 = *(std::string *)(a18 + 8);
  v134 = *(_DWORD *)(a18 + 32);
  v132 = &off_24C335AB8;
  v135 = *(_BYTE *)(a18 + 36);
  if (*(char *)(a18 + 63) < 0)
    std::string::__init_copy_ctor_external(&v136, *(const std::string::value_type **)(a18 + 40), *(_QWORD *)(a18 + 48));
  else
    v136 = *(std::string *)(a18 + 40);
  if (*(char *)(a19 + 31) < 0)
    std::string::__init_copy_ctor_external(&v129, *(const std::string::value_type **)(a19 + 8), *(_QWORD *)(a19 + 16));
  else
    v129 = *(std::string *)(a19 + 8);
  v74 = *(_DWORD *)(a19 + 32);
  v130 = v74;
  v128 = off_24C335AF8;
  v73 = *(_QWORD *)(a19 + 36);
  v131 = v73;
  if (*(char *)(a20 + 31) < 0)
    std::string::__init_copy_ctor_external(&v124, *(const std::string::value_type **)(a20 + 8), *(_QWORD *)(a20 + 16));
  else
    v124 = *(std::string *)(a20 + 8);
  v40 = *(_DWORD *)(a20 + 32);
  v123 = off_24C335B18;
  v126 = *(_QWORD *)(a20 + 36);
  v41 = *(_DWORD *)(a20 + 44);
  v72 = v40;
  v125 = v40;
  v127 = v41;
  if (*(char *)(a21 + 31) < 0)
    std::string::__init_copy_ctor_external(&v119, *(const std::string::value_type **)(a21 + 8), *(_QWORD *)(a21 + 16));
  else
    v119 = *(std::string *)(a21 + 8);
  v42 = *(_DWORD *)(a21 + 32);
  v118 = off_24C335B18;
  v121 = *(_QWORD *)(a21 + 36);
  v43 = *(_DWORD *)(a21 + 44);
  v71 = v42;
  v120 = v42;
  v122 = v43;
  v113 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a22 + 31) < 0)
    std::string::__init_copy_ctor_external(&v114, *(const std::string::value_type **)(a22 + 8), *(_QWORD *)(a22 + 16));
  else
    v114 = *(std::string *)(a22 + 8);
  v115 = *(_DWORD *)(a22 + 32);
  v113 = &off_24C335AB8;
  v116 = *(_BYTE *)(a22 + 36);
  if (*(char *)(a22 + 63) < 0)
    std::string::__init_copy_ctor_external(&v117, *(const std::string::value_type **)(a22 + 40), *(_QWORD *)(a22 + 48));
  else
    v117 = *(std::string *)(a22 + 40);
  v108 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a23 + 31) < 0)
    std::string::__init_copy_ctor_external(&v109, *(const std::string::value_type **)(a23 + 8), *(_QWORD *)(a23 + 16));
  else
    v109 = *(std::string *)(a23 + 8);
  v110 = *(_DWORD *)(a23 + 32);
  v108 = &off_24C335AB8;
  v111 = *(_BYTE *)(a23 + 36);
  if (*(char *)(a23 + 63) < 0)
    std::string::__init_copy_ctor_external(&v112, *(const std::string::value_type **)(a23 + 40), *(_QWORD *)(a23 + 48));
  else
    v112 = *(std::string *)(a23 + 40);
  v103 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a24 + 31) < 0)
    std::string::__init_copy_ctor_external(&v104, *(const std::string::value_type **)(a24 + 8), *(_QWORD *)(a24 + 16));
  else
    v104 = *(std::string *)(a24 + 8);
  v105 = *(_DWORD *)(a24 + 32);
  v103 = &off_24C335AB8;
  v106 = *(_BYTE *)(a24 + 36);
  if (*(char *)(a24 + 63) < 0)
    std::string::__init_copy_ctor_external(&v107, *(const std::string::value_type **)(a24 + 40), *(_QWORD *)(a24 + 48));
  else
    v107 = *(std::string *)(a24 + 40);
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v304, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
  else
    v304 = __s;
  v305 = v84;
  v303 = off_24C335AF8;
  v306 = v83;
  if (SHIBYTE(v196.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v300, v196.__r_.__value_.__l.__data_, v196.__r_.__value_.__l.__size_);
  else
    v300 = v196;
  v301 = v101;
  v299 = off_24C335AF8;
  v302 = v99;
  if (SHIBYTE(v192.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v296, v192.__r_.__value_.__l.__data_, v192.__r_.__value_.__l.__size_);
  else
    v296 = v192;
  v297 = v97;
  v295 = off_24C335AF8;
  v298 = v95;
  if (SHIBYTE(v188.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v292, v188.__r_.__value_.__l.__data_, v188.__r_.__value_.__l.__size_);
  else
    v292 = v188;
  v293 = v91;
  v291 = off_24C335AF8;
  v294 = v89;
  v286 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v183.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v287, v183.__r_.__value_.__l.__data_, v183.__r_.__value_.__l.__size_);
  else
    v287 = v183;
  v288 = v184;
  v286 = &off_24C335AB8;
  v289 = v185;
  if (SHIBYTE(v186.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v290, v186.__r_.__value_.__l.__data_, v186.__r_.__value_.__l.__size_);
  else
    v290 = v186;
  if (SHIBYTE(v178.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v282, v178.__r_.__value_.__l.__data_, v178.__r_.__value_.__l.__size_);
  else
    v282 = v178;
  v281 = off_24C335B18;
  v284 = v180;
  v283 = v87;
  v285 = v181;
  if (SHIBYTE(v173.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v277, v173.__r_.__value_.__l.__data_, v173.__r_.__value_.__l.__size_);
  else
    v277 = v173;
  v276 = off_24C335B18;
  v279 = v175;
  v278 = v93;
  v280 = v176;
  v271 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v168.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v272, v168.__r_.__value_.__l.__data_, v168.__r_.__value_.__l.__size_);
  else
    v272 = v168;
  v273 = v169;
  v271 = &off_24C335AB8;
  v274 = v170;
  if (SHIBYTE(v171.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v275, v171.__r_.__value_.__l.__data_, v171.__r_.__value_.__l.__size_);
  else
    v275 = v171;
  if (SHIBYTE(v163.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v267, v163.__r_.__value_.__l.__data_, v163.__r_.__value_.__l.__size_);
  else
    v267 = v163;
  v266 = off_24C335B18;
  v269 = v165;
  v268 = v85;
  v270 = v166;
  v257 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v154.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v258, v154.__r_.__value_.__l.__data_, v154.__r_.__value_.__l.__size_);
  else
    v258 = v154;
  v259 = v155;
  v257 = &off_24C335A98;
  v260 = v156;
  v44 = v160;
  v45 = v158;
  v261 = &off_24C331510;
  v262 = v158;
  v263 = v158;
  if (v158)
    v46 = (void *)operator new[]();
  else
    v46 = 0;
  v264 = v46;
  v265 = 1;
  if (v44)
    memcpy(v46, v44, v45);
  else
    bzero(v46, v45);
  if (SHIBYTE(v150.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v254, v150.__r_.__value_.__l.__data_, v150.__r_.__value_.__l.__size_);
  else
    v254 = v150;
  v255 = v82;
  v253 = off_24C335AF8;
  v256 = v81;
  v68 = SHIBYTE(v146.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v146.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v250, v146.__r_.__value_.__l.__data_, v146.__r_.__value_.__l.__size_);
  else
    v250 = v146;
  v251 = v80;
  v249 = off_24C335AF8;
  v252 = v79;
  v67 = SHIBYTE(v142.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v142.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v246, v142.__r_.__value_.__l.__data_, v142.__r_.__value_.__l.__size_);
  else
    v246 = v142;
  v247 = v78;
  v245 = off_24C335AF8;
  v248 = v77;
  v241 = (uint64_t (**)())off_24C335D90;
  v66 = SHIBYTE(v138.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v138.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v242, v138.__r_.__value_.__l.__data_, v138.__r_.__value_.__l.__size_);
  else
    v242 = v138;
  v243 = v76;
  v241 = off_24C335AF8;
  v244 = v75;
  v236 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v133.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v237, v133.__r_.__value_.__l.__data_, v133.__r_.__value_.__l.__size_);
  else
    v237 = v133;
  v238 = v134;
  v236 = &off_24C335AB8;
  v239 = v135;
  if (SHIBYTE(v136.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v240, v136.__r_.__value_.__l.__data_, v136.__r_.__value_.__l.__size_);
  else
    v240 = v136;
  v232 = (uint64_t (**)())off_24C335D90;
  v65 = SHIBYTE(v129.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v129.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v233, v129.__r_.__value_.__l.__data_, v129.__r_.__value_.__l.__size_);
  else
    v233 = v129;
  v234 = v74;
  v232 = off_24C335AF8;
  v235 = v73;
  v227 = (uint64_t (**)())off_24C335D90;
  v64 = SHIBYTE(v124.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v124.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v228, v124.__r_.__value_.__l.__data_, v124.__r_.__value_.__l.__size_);
  else
    v228 = v124;
  v227 = off_24C335B18;
  v230 = v126;
  v229 = v72;
  v231 = v127;
  v222 = (uint64_t (**)())off_24C335D90;
  v63 = SHIBYTE(v119.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v119.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v223, v119.__r_.__value_.__l.__data_, v119.__r_.__value_.__l.__size_);
  else
    v223 = v119;
  v222 = off_24C335B18;
  v225 = v121;
  v224 = v71;
  v226 = v122;
  v217 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v114.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v218, v114.__r_.__value_.__l.__data_, v114.__r_.__value_.__l.__size_);
  else
    v218 = v114;
  v219 = v115;
  v217 = &off_24C335AB8;
  v220 = v116;
  if (SHIBYTE(v117.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v221, v117.__r_.__value_.__l.__data_, v117.__r_.__value_.__l.__size_);
  else
    v221 = v117;
  v212 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v109.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v213, v109.__r_.__value_.__l.__data_, v109.__r_.__value_.__l.__size_);
  else
    v213 = v109;
  v214 = v110;
  v212 = &off_24C335AB8;
  v215 = v111;
  if (SHIBYTE(v112.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v216, v112.__r_.__value_.__l.__data_, v112.__r_.__value_.__l.__size_);
  else
    v216 = v112;
  v207 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v104.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v208, v104.__r_.__value_.__l.__data_, v104.__r_.__value_.__l.__size_);
  else
    v208 = v104;
  v209 = v105;
  v207 = &off_24C335AB8;
  v210 = v106;
  if (SHIBYTE(v107.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v211, v107.__r_.__value_.__l.__data_, v107.__r_.__value_.__l.__size_);
  else
    v211 = v107;
  v399 = (uint64_t (**)())off_24C335D90;
  v70 = SHIBYTE(v300.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v300.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v400, v300.__r_.__value_.__l.__data_, v300.__r_.__value_.__l.__size_);
  else
    v400 = v300;
  v401 = v101;
  v399 = off_24C335AF8;
  v402 = v99;
  v395 = (uint64_t (**)())off_24C335D90;
  v102 = SHIBYTE(v296.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v296.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v396, v296.__r_.__value_.__l.__data_, v296.__r_.__value_.__l.__size_);
  else
    v396 = v296;
  v397 = v97;
  v395 = off_24C335AF8;
  v398 = v95;
  v391 = (uint64_t (**)())off_24C335D90;
  v100 = SHIBYTE(v292.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v292.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v392, v292.__r_.__value_.__l.__data_, v292.__r_.__value_.__l.__size_);
  else
    v392 = v292;
  v393 = v91;
  v391 = off_24C335AF8;
  v394 = v89;
  v386 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v287.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v387, v287.__r_.__value_.__l.__data_, v287.__r_.__value_.__l.__size_);
  else
    v387 = v287;
  v388 = v288;
  v386 = &off_24C335AB8;
  v389 = v289;
  if (SHIBYTE(v290.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v390, v290.__r_.__value_.__l.__data_, v290.__r_.__value_.__l.__size_);
  else
    v390 = v290;
  v381 = (uint64_t (**)())off_24C335D90;
  v98 = SHIBYTE(v282.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v282.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v382, v282.__r_.__value_.__l.__data_, v282.__r_.__value_.__l.__size_);
  else
    v382 = v282;
  v381 = off_24C335B18;
  v384 = v284;
  v383 = v87;
  v385 = v285;
  v376 = (uint64_t (**)())off_24C335D90;
  v96 = SHIBYTE(v277.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v277.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v377, v277.__r_.__value_.__l.__data_, v277.__r_.__value_.__l.__size_);
  else
    v377 = v277;
  v376 = off_24C335B18;
  v379 = v279;
  v378 = v93;
  v380 = v280;
  v371 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v272.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v372, v272.__r_.__value_.__l.__data_, v272.__r_.__value_.__l.__size_);
  else
    v372 = v272;
  v373 = v273;
  v371 = &off_24C335AB8;
  v374 = v274;
  if (SHIBYTE(v275.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v375, v275.__r_.__value_.__l.__data_, v275.__r_.__value_.__l.__size_);
  else
    v375 = v275;
  v366 = (uint64_t (**)())off_24C335D90;
  v47 = SHIBYTE(v267.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v267.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v367, v267.__r_.__value_.__l.__data_, v267.__r_.__value_.__l.__size_);
  else
    v367 = v267;
  v366 = off_24C335B18;
  v369 = v269;
  v368 = v85;
  v370 = v270;
  v357 = (uint64_t (**)())off_24C335D90;
  v94 = v47;
  if (SHIBYTE(v258.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v358, v258.__r_.__value_.__l.__data_, v258.__r_.__value_.__l.__size_);
  else
    v358 = v258;
  v359 = v259;
  v357 = &off_24C335A98;
  v360 = v260;
  v48 = v264;
  v49 = v262;
  v361 = &off_24C331510;
  v362 = v262;
  v363 = v262;
  if (v262)
    v50 = (void *)operator new[]();
  else
    v50 = 0;
  v364 = v50;
  v365 = 1;
  if (v48)
    memcpy(v50, v48, v49);
  else
    bzero(v50, v49);
  v353 = (uint64_t (**)())off_24C335D90;
  v51 = SHIBYTE(v254.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v254.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v354, v254.__r_.__value_.__l.__data_, v254.__r_.__value_.__l.__size_);
  else
    v354 = v254;
  v355 = v82;
  v353 = off_24C335AF8;
  v356 = v81;
  v349 = (uint64_t (**)())off_24C335D90;
  v52 = SHIBYTE(v250.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v250.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v350, v250.__r_.__value_.__l.__data_, v250.__r_.__value_.__l.__size_);
  else
    v350 = v250;
  v351 = v80;
  v349 = off_24C335AF8;
  v352 = v79;
  v345 = (uint64_t (**)())off_24C335D90;
  v92 = SHIBYTE(v246.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v246.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v346, v246.__r_.__value_.__l.__data_, v246.__r_.__value_.__l.__size_);
  else
    v346 = v246;
  v347 = v78;
  v345 = off_24C335AF8;
  v348 = v77;
  v341 = (uint64_t (**)())off_24C335D90;
  v90 = SHIBYTE(v242.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v242.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v342, v242.__r_.__value_.__l.__data_, v242.__r_.__value_.__l.__size_);
  else
    v342 = v242;
  v343 = v76;
  v341 = off_24C335AF8;
  v344 = v75;
  v336 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v237.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v337, v237.__r_.__value_.__l.__data_, v237.__r_.__value_.__l.__size_);
  else
    v337 = v237;
  v338 = v238;
  v336 = &off_24C335AB8;
  v339 = v239;
  v88 = v52;
  if (SHIBYTE(v240.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v340, v240.__r_.__value_.__l.__data_, v240.__r_.__value_.__l.__size_);
  else
    v340 = v240;
  v332 = (uint64_t (**)())off_24C335D90;
  v53 = SHIBYTE(v233.__r_.__value_.__r.__words[2]);
  v86 = v51;
  if (SHIBYTE(v233.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v333, v233.__r_.__value_.__l.__data_, v233.__r_.__value_.__l.__size_);
  else
    v333 = v233;
  v334 = v74;
  v332 = off_24C335AF8;
  v335 = v73;
  v327 = (uint64_t (**)())off_24C335D90;
  v54 = SHIBYTE(v228.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v228.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v328, v228.__r_.__value_.__l.__data_, v228.__r_.__value_.__l.__size_);
  else
    v328 = v228;
  v327 = off_24C335B18;
  v330 = v230;
  v329 = v72;
  v331 = v231;
  v322 = (uint64_t (**)())off_24C335D90;
  v55 = SHIBYTE(v223.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v223.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&__p, v223.__r_.__value_.__l.__data_, v223.__r_.__value_.__l.__size_);
  else
    __p = v223;
  v322 = off_24C335B18;
  v325 = v225;
  v324 = v71;
  v326 = v226;
  v317 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v218.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v318, v218.__r_.__value_.__l.__data_, v218.__r_.__value_.__l.__size_);
  else
    v318 = v218;
  v319 = v219;
  v317 = &off_24C335AB8;
  v320 = v220;
  if (SHIBYTE(v221.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v321, v221.__r_.__value_.__l.__data_, v221.__r_.__value_.__l.__size_);
  else
    v321 = v221;
  v312 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v213.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v313, v213.__r_.__value_.__l.__data_, v213.__r_.__value_.__l.__size_);
  else
    v313 = v213;
  v314 = v214;
  v312 = &off_24C335AB8;
  v315 = v215;
  if (SHIBYTE(v216.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v316, v216.__r_.__value_.__l.__data_, v216.__r_.__value_.__l.__size_);
  else
    v316 = v216;
  v307 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v208.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v308, v208.__r_.__value_.__l.__data_, v208.__r_.__value_.__l.__size_);
  else
    v308 = v208;
  v309 = v209;
  v307 = &off_24C335AB8;
  v310 = v210;
  if (SHIBYTE(v211.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v311, v211.__r_.__value_.__l.__data_, v211.__r_.__value_.__l.__size_);
  else
    v311 = v211;
  mediaplatform::DatabaseColumnTuple<19ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>>::DatabaseColumnTuple(a1, (uint64_t)&v399, (uint64_t)&v395, (uint64_t)&v391, (uint64_t)&v386, (uint64_t)&v381, (uint64_t)&v376, (uint64_t)&v371, (uint64_t)&v366, (uint64_t)&v357, (uint64_t)&v353, (uint64_t)&v349, (uint64_t)&v345, (uint64_t)&v341, (uint64_t)&v336, (uint64_t)&v332, (uint64_t)&v327, (uint64_t)&v322, (uint64_t)&v317,
    (uint64_t)&v312,
    (uint64_t)&v307);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v307);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v312);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v317);
  v322 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v327 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v328.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v328.__r_.__value_.__l.__data_);
  v332 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v333.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v333.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v336);
  v341 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v342.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v342.__r_.__value_.__l.__data_);
  v345 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v346.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v346.__r_.__value_.__l.__data_);
  v349 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v350.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v350.__r_.__value_.__l.__data_);
  v353 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v354.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v354.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<mediaplatform::Data>::~DatabaseColumn((uint64_t)&v357);
  v366 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v367.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v367.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v371);
  v376 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v377.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v377.__r_.__value_.__l.__data_);
  v381 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v382.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v382.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v386);
  v391 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v392.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v392.__r_.__value_.__l.__data_);
  v395 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v396.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v396.__r_.__value_.__l.__data_);
  v399 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v400.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v400.__r_.__value_.__l.__data_);
  *(_QWORD *)(a1 + 1088) = off_24C335D90;
  v56 = (std::string *)(a1 + 1096);
  v57 = SHIBYTE(v304.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v304.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v56, v304.__r_.__value_.__l.__data_, v304.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v56->__r_.__value_.__l.__data_ = *(_OWORD *)&v304.__r_.__value_.__l.__data_;
    *(_QWORD *)(a1 + 1112) = *((_QWORD *)&v304.__r_.__value_.__l + 2);
  }
  *(_DWORD *)(a1 + 1120) = v84;
  *(_QWORD *)(a1 + 1088) = off_24C335AF8;
  *(_QWORD *)(a1 + 1124) = v83;
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v207);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v212);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v217);
  v222 = (uint64_t (**)())off_24C335D90;
  if (v55 < 0)
    operator delete(v223.__r_.__value_.__l.__data_);
  v227 = (uint64_t (**)())off_24C335D90;
  if (v54 < 0)
    operator delete(v228.__r_.__value_.__l.__data_);
  v232 = (uint64_t (**)())off_24C335D90;
  if (v53 < 0)
    operator delete(v233.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v236);
  v241 = (uint64_t (**)())off_24C335D90;
  if (v90 < 0)
    operator delete(v242.__r_.__value_.__l.__data_);
  v245 = (uint64_t (**)())off_24C335D90;
  if (v92 < 0)
    operator delete(v246.__r_.__value_.__l.__data_);
  v249 = (uint64_t (**)())off_24C335D90;
  if (v88 < 0)
    operator delete(v250.__r_.__value_.__l.__data_);
  v253 = (uint64_t (**)())off_24C335D90;
  if (v86 < 0)
    operator delete(v254.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<mediaplatform::Data>::~DatabaseColumn((uint64_t)&v257);
  v266 = (uint64_t (**)())off_24C335D90;
  if (v94 < 0)
    operator delete(v267.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v271);
  v276 = (uint64_t (**)())off_24C335D90;
  if (v96 < 0)
    operator delete(v277.__r_.__value_.__l.__data_);
  v281 = (uint64_t (**)())off_24C335D90;
  if (v98 < 0)
    operator delete(v282.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v286);
  if (v100 < 0)
    operator delete(v292.__r_.__value_.__l.__data_);
  if (v102 < 0)
    operator delete(v296.__r_.__value_.__l.__data_);
  if (v70 < 0)
  {
    operator delete(v300.__r_.__value_.__l.__data_);
    if ((v57 & 0x80000000) == 0)
      goto LABEL_317;
  }
  else if ((v57 & 0x80000000) == 0)
  {
    goto LABEL_317;
  }
  operator delete(v304.__r_.__value_.__l.__data_);
LABEL_317:
  *(_QWORD *)(a1 + 1136) = off_24C335D90;
  v58 = (std::string *)(a1 + 1144);
  v59 = SHIBYTE(v204.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v204.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v58, v204.__r_.__value_.__l.__data_, v204.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v58->__r_.__value_.__l.__data_ = *(_OWORD *)&v204.__r_.__value_.__l.__data_;
    *(_QWORD *)(a1 + 1160) = *((_QWORD *)&v204.__r_.__value_.__l + 2);
  }
  *(_DWORD *)(a1 + 1168) = v205;
  *(_QWORD *)(a1 + 1136) = off_24C335AF8;
  *(_QWORD *)(a1 + 1172) = v206;
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v103);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v108);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v113);
  if (v63 < 0)
    operator delete(v119.__r_.__value_.__l.__data_);
  if (v64 < 0)
    operator delete(v124.__r_.__value_.__l.__data_);
  if (v65 < 0)
    operator delete(v129.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v132);
  if (v66 < 0)
    operator delete(v138.__r_.__value_.__l.__data_);
  if (v67 < 0)
    operator delete(v142.__r_.__value_.__l.__data_);
  if (v68 < 0)
    operator delete(v146.__r_.__value_.__l.__data_);
  if (SHIBYTE(v150.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v150.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<mediaplatform::Data>::~DatabaseColumn((uint64_t)&v153);
  if (SHIBYTE(v163.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v163.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v167);
  if (SHIBYTE(v173.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v173.__r_.__value_.__l.__data_);
  if (SHIBYTE(v178.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v178.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v182);
  if (SHIBYTE(v188.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v188.__r_.__value_.__l.__data_);
  if (SHIBYTE(v192.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v192.__r_.__value_.__l.__data_);
  if (SHIBYTE(v196.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v196.__r_.__value_.__l.__data_);
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__s.__r_.__value_.__l.__data_);
    if ((v59 & 0x80000000) == 0)
      goto LABEL_350;
  }
  else if ((v59 & 0x80000000) == 0)
  {
    goto LABEL_350;
  }
  operator delete(v204.__r_.__value_.__l.__data_);
LABEL_350:
  *(_QWORD *)(a1 + 1184) = off_24C335D90;
  v60 = (std::string *)(a1 + 1192);
  if (*(char *)(a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v60, *(const std::string::value_type **)(a2 + 8), *(_QWORD *)(a2 + 16));
  }
  else
  {
    v61 = *(_OWORD *)(a2 + 8);
    *(_QWORD *)(a1 + 1208) = *(_QWORD *)(a2 + 24);
    *(_OWORD *)&v60->__r_.__value_.__l.__data_ = v61;
  }
  *(_DWORD *)(a1 + 1216) = *(_DWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 1184) = off_24C335AF8;
  *(_QWORD *)(a1 + 1220) = *(_QWORD *)(a2 + 36);
  return a1;
}

void sub_20A8366D4(_Unwind_Exception *a1)
{
  uint64_t v1;

  mediaplatform::DatabaseColumnTuple<17ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>>::~DatabaseColumnTuple(v1);
  _Unwind_Resume(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<16ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>>::~DatabaseColumnTuple(uint64_t a1)
{
  *(_QWORD *)(a1 + 1184) = off_24C335D90;
  if (*(char *)(a1 + 1215) < 0)
    operator delete(*(void **)(a1 + 1192));
  *(_QWORD *)(a1 + 1136) = off_24C335D90;
  if (*(char *)(a1 + 1167) < 0)
    operator delete(*(void **)(a1 + 1144));
  return mediaplatform::DatabaseColumnTuple<18ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>>::~DatabaseColumnTuple(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<17ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>>::~DatabaseColumnTuple(uint64_t a1)
{
  *(_QWORD *)(a1 + 1136) = off_24C335D90;
  if (*(char *)(a1 + 1167) < 0)
    operator delete(*(void **)(a1 + 1144));
  return mediaplatform::DatabaseColumnTuple<18ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>>::~DatabaseColumnTuple(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<19ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>>::DatabaseColumnTuple(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  int v38;
  int v39;
  int v40;
  int v41;
  int v42;
  int v43;
  const void *v44;
  size_t v45;
  void *v46;
  int v47;
  int v48;
  int v49;
  int v50;
  const void *v51;
  size_t v52;
  void *v53;
  int v54;
  const void *v55;
  size_t v56;
  void *v57;
  int v58;
  int v59;
  const void *v60;
  size_t v61;
  void *v62;
  int v63;
  int v64;
  int v65;
  int v66;
  int v67;
  std::string *v68;
  std::string *v69;
  int v70;
  std::string *v71;
  int v72;
  std::string *v73;
  __int128 v74;
  int v76;
  int v77;
  int v78;
  int v79;
  int v80;
  int v81;
  uint64_t v82;
  int v83;
  int v84;
  int v85;
  int v86;
  int v87;
  int v88;
  int v89;
  uint64_t v90;
  int v91;
  uint64_t v92;
  int v93;
  uint64_t v94;
  int v95;
  uint64_t v96;
  int v97;
  uint64_t v98;
  int v99;
  int v100;
  int v101;
  int v102;
  int v103;
  int v104;
  int v105;
  uint64_t (**v106)();
  std::string v107;
  int v108;
  char v109;
  std::string v110;
  uint64_t (**v111)();
  std::string v112;
  int v113;
  char v114;
  std::string v115;
  uint64_t (**v116)();
  std::string v117;
  int v118;
  char v119;
  std::string v120;
  uint64_t (**v121)();
  std::string v122;
  int v123;
  uint64_t v124;
  int v125;
  uint64_t (**v126)();
  std::string v127;
  int v128;
  uint64_t v129;
  int v130;
  uint64_t (**v131)();
  std::string v132;
  int v133;
  uint64_t v134;
  uint64_t (**v135)();
  std::string v136;
  int v137;
  char v138;
  std::string v139;
  uint64_t (**v140)();
  std::string v141;
  int v142;
  uint64_t v143;
  uint64_t (**v144)();
  std::string v145;
  int v146;
  uint64_t v147;
  uint64_t (**v148)();
  std::string v149;
  int v150;
  uint64_t v151;
  uint64_t (**v152)();
  std::string v153;
  int v154;
  uint64_t v155;
  uint64_t (**v156)();
  std::string v157;
  int v158;
  char v159;
  void (**v160)(mediaplatform::Data *__hidden);
  size_t v161;
  size_t v162;
  const void *v163;
  char v164;
  uint64_t (**v165)();
  std::string v166;
  int v167;
  uint64_t v168;
  int v169;
  uint64_t (**v170)();
  std::string v171;
  int v172;
  char v173;
  std::string v174;
  uint64_t (**v175)();
  std::string v176;
  int v177;
  uint64_t v178;
  int v179;
  uint64_t (**v180)();
  std::string v181;
  int v182;
  uint64_t v183;
  int v184;
  uint64_t (**v185)();
  std::string v186;
  int v187;
  char v188;
  std::string v189;
  uint64_t (**v190)();
  std::string __s;
  int v192;
  uint64_t v193;
  uint64_t (**v194)();
  std::string v195;
  int v196;
  uint64_t v197;
  uint64_t (**v198)();
  std::string v199;
  int v200;
  char v201;
  std::string v202;
  uint64_t (**v203)();
  std::string v204;
  int v205;
  char v206;
  std::string v207;
  uint64_t (**v208)();
  std::string v209;
  int v210;
  char v211;
  std::string v212;
  uint64_t (**v213)();
  std::string v214;
  int v215;
  uint64_t v216;
  int v217;
  uint64_t (**v218)();
  std::string v219;
  int v220;
  uint64_t v221;
  int v222;
  uint64_t (**v223)();
  std::string v224;
  int v225;
  uint64_t v226;
  uint64_t (**v227)();
  std::string v228;
  int v229;
  char v230;
  std::string v231;
  uint64_t (**v232)();
  std::string v233;
  int v234;
  uint64_t v235;
  uint64_t (**v236)();
  std::string v237;
  int v238;
  uint64_t v239;
  uint64_t (**v240)();
  std::string v241;
  int v242;
  uint64_t v243;
  uint64_t (**v244)();
  std::string v245;
  int v246;
  uint64_t v247;
  uint64_t (**v248)();
  std::string v249;
  int v250;
  char v251;
  void (**v252)(mediaplatform::Data *__hidden);
  size_t v253;
  size_t v254;
  const void *v255;
  char v256;
  uint64_t (**v257)();
  std::string v258;
  int v259;
  uint64_t v260;
  int v261;
  uint64_t (**v262)();
  std::string v263;
  int v264;
  char v265;
  std::string v266;
  uint64_t (**v267)();
  std::string v268;
  int v269;
  uint64_t v270;
  int v271;
  uint64_t (**v272)();
  std::string v273;
  int v274;
  uint64_t v275;
  int v276;
  uint64_t (**v277)();
  std::string v278;
  int v279;
  char v280;
  std::string v281;
  uint64_t (**v282)();
  std::string v283;
  int v284;
  uint64_t v285;
  uint64_t (**v286)();
  std::string v287;
  int v288;
  char v289;
  std::string v290;
  uint64_t (**v291)();
  std::string v292;
  int v293;
  char v294;
  std::string v295;
  uint64_t (**v296)();
  std::string v297;
  int v298;
  char v299;
  std::string v300;
  uint64_t (**v301)();
  std::string v302;
  int v303;
  uint64_t v304;
  int v305;
  uint64_t (**v306)();
  std::string v307;
  int v308;
  uint64_t v309;
  int v310;
  uint64_t (**v311)();
  std::string v312;
  int v313;
  uint64_t v314;
  uint64_t (**v315)();
  std::string v316;
  int v317;
  char v318;
  std::string v319;
  uint64_t (**v320)();
  std::string v321;
  int v322;
  uint64_t v323;
  uint64_t (**v324)();
  std::string v325;
  int v326;
  uint64_t v327;
  uint64_t (**v328)();
  std::string v329;
  int v330;
  uint64_t v331;
  uint64_t (**v332)();
  std::string v333;
  int v334;
  uint64_t v335;
  uint64_t (**v336)();
  std::string v337;
  int v338;
  char v339;
  void (**v340)(mediaplatform::Data *__hidden);
  size_t v341;
  size_t v342;
  const void *v343;
  char v344;
  uint64_t (**v345)();
  std::string v346;
  int v347;
  uint64_t v348;
  int v349;
  uint64_t (**v350)();
  std::string v351;
  int v352;
  char v353;
  std::string v354;
  uint64_t (**v355)();
  std::string v356;
  int v357;
  uint64_t v358;
  int v359;
  uint64_t (**v360)();
  std::string v361;
  int v362;
  uint64_t v363;
  int v364;
  uint64_t (**v365)();
  std::string v366;
  int v367;
  char v368;
  std::string v369;
  uint64_t (**v370)();
  std::string v371;
  int v372;
  char v373;
  std::string v374;
  uint64_t (**v375)();
  std::string v376;
  int v377;
  char v378;
  std::string v379;
  uint64_t (**v380)();
  std::string v381;
  int v382;
  char v383;
  std::string v384;
  uint64_t (**v385)();
  std::string __p;
  int v387;
  uint64_t v388;
  int v389;
  uint64_t (**v390)();
  std::string v391;
  int v392;
  uint64_t v393;
  int v394;
  uint64_t (**v395)();
  std::string v396;
  int v397;
  uint64_t v398;
  uint64_t (**v399)();
  std::string v400;
  int v401;
  char v402;
  std::string v403;
  uint64_t (**v404)();
  std::string v405;
  int v406;
  uint64_t v407;
  uint64_t (**v408)();
  std::string v409;
  int v410;
  uint64_t v411;
  uint64_t (**v412)();
  std::string v413;
  int v414;
  uint64_t v415;
  uint64_t (**v416)();
  std::string v417;
  int v418;
  uint64_t v419;
  uint64_t (**v420)();
  std::string v421;
  int v422;
  char v423;
  void (**v424)(mediaplatform::Data *__hidden);
  size_t v425;
  size_t v426;
  void *v427;
  char v428;
  uint64_t (**v429)();
  std::string v430;
  int v431;
  uint64_t v432;
  int v433;
  uint64_t (**v434)();
  std::string v435;
  int v436;
  char v437;
  std::string v438;
  uint64_t (**v439)();
  std::string v440;
  int v441;
  uint64_t v442;
  int v443;
  uint64_t (**v444)();
  std::string v445;
  int v446;
  uint64_t v447;
  int v448;

  v21 = MEMORY[0x24BDAC7A8](a1);
  v24 = v23;
  v26 = v25;
  v28 = v27;
  v30 = v29;
  v32 = v31;
  v33 = v22;
  v34 = v21;
  v82 = v35;
  if (*(char *)(v22 + 31) < 0)
    std::string::__init_copy_ctor_external(&v195, *(const std::string::value_type **)(v22 + 8), *(_QWORD *)(v22 + 16));
  else
    v195 = *(std::string *)(v22 + 8);
  v196 = *(_DWORD *)(v33 + 32);
  v194 = off_24C335AF8;
  v197 = *(_QWORD *)(v33 + 36);
  if (*(char *)(v32 + 31) < 0)
    std::string::__init_copy_ctor_external(&__s, *(const std::string::value_type **)(v32 + 8), *(_QWORD *)(v32 + 16));
  else
    __s = *(std::string *)(v32 + 8);
  v36 = *(_DWORD *)(v32 + 32);
  v192 = v36;
  v190 = off_24C335AF8;
  v37 = *(_QWORD *)(v32 + 36);
  v193 = v37;
  v185 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(v30 + 31) < 0)
    std::string::__init_copy_ctor_external(&v186, *(const std::string::value_type **)(v30 + 8), *(_QWORD *)(v30 + 16));
  else
    v186 = *(std::string *)(v30 + 8);
  v187 = *(_DWORD *)(v30 + 32);
  v185 = &off_24C335AB8;
  v188 = *(_BYTE *)(v30 + 36);
  if (*(char *)(v30 + 63) < 0)
    std::string::__init_copy_ctor_external(&v189, *(const std::string::value_type **)(v30 + 40), *(_QWORD *)(v30 + 48));
  else
    v189 = *(std::string *)(v30 + 40);
  if (*(char *)(v28 + 31) < 0)
    std::string::__init_copy_ctor_external(&v181, *(const std::string::value_type **)(v28 + 8), *(_QWORD *)(v28 + 16));
  else
    v181 = *(std::string *)(v28 + 8);
  v38 = *(_DWORD *)(v28 + 32);
  v180 = off_24C335B18;
  v183 = *(_QWORD *)(v28 + 36);
  v39 = *(_DWORD *)(v28 + 44);
  v104 = v38;
  v182 = v38;
  v184 = v39;
  if (*(char *)(v26 + 31) < 0)
    std::string::__init_copy_ctor_external(&v176, *(const std::string::value_type **)(v26 + 8), *(_QWORD *)(v26 + 16));
  else
    v176 = *(std::string *)(v26 + 8);
  v40 = *(_DWORD *)(v26 + 32);
  v175 = off_24C335B18;
  v178 = *(_QWORD *)(v26 + 36);
  v41 = *(_DWORD *)(v26 + 44);
  v102 = v40;
  v177 = v40;
  v179 = v41;
  v170 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(v24 + 31) < 0)
    std::string::__init_copy_ctor_external(&v171, *(const std::string::value_type **)(v24 + 8), *(_QWORD *)(v24 + 16));
  else
    v171 = *(std::string *)(v24 + 8);
  v172 = *(_DWORD *)(v24 + 32);
  v170 = &off_24C335AB8;
  v173 = *(_BYTE *)(v24 + 36);
  if (*(char *)(v24 + 63) < 0)
    std::string::__init_copy_ctor_external(&v174, *(const std::string::value_type **)(v24 + 40), *(_QWORD *)(v24 + 48));
  else
    v174 = *(std::string *)(v24 + 40);
  if (*(char *)(a9 + 31) < 0)
    std::string::__init_copy_ctor_external(&v166, *(const std::string::value_type **)(a9 + 8), *(_QWORD *)(a9 + 16));
  else
    v166 = *(std::string *)(a9 + 8);
  v42 = *(_DWORD *)(a9 + 32);
  v165 = off_24C335B18;
  v168 = *(_QWORD *)(a9 + 36);
  v43 = *(_DWORD *)(a9 + 44);
  v100 = v42;
  v167 = v42;
  v169 = v43;
  v156 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a10 + 31) < 0)
    std::string::__init_copy_ctor_external(&v157, *(const std::string::value_type **)(a10 + 8), *(_QWORD *)(a10 + 16));
  else
    v157 = *(std::string *)(a10 + 8);
  v158 = *(_DWORD *)(a10 + 32);
  v156 = &off_24C335A98;
  v159 = *(_BYTE *)(a10 + 36);
  v44 = *(const void **)(a10 + 64);
  v45 = *(_QWORD *)(a10 + 48);
  v160 = &off_24C331510;
  v161 = v45;
  v162 = v45;
  if (v45)
    v46 = (void *)operator new[]();
  else
    v46 = 0;
  v163 = v46;
  v164 = 1;
  if (v44)
    memcpy(v46, v44, v45);
  else
    bzero(v46, v45);
  if (*(char *)(a11 + 31) < 0)
    std::string::__init_copy_ctor_external(&v153, *(const std::string::value_type **)(a11 + 8), *(_QWORD *)(a11 + 16));
  else
    v153 = *(std::string *)(a11 + 8);
  v99 = *(_DWORD *)(a11 + 32);
  v154 = v99;
  v152 = off_24C335AF8;
  v98 = *(_QWORD *)(a11 + 36);
  v155 = v98;
  if (*(char *)(a12 + 31) < 0)
    std::string::__init_copy_ctor_external(&v149, *(const std::string::value_type **)(a12 + 8), *(_QWORD *)(a12 + 16));
  else
    v149 = *(std::string *)(a12 + 8);
  v97 = *(_DWORD *)(a12 + 32);
  v150 = v97;
  v148 = off_24C335AF8;
  v96 = *(_QWORD *)(a12 + 36);
  v151 = v96;
  if (*(char *)(a13 + 31) < 0)
    std::string::__init_copy_ctor_external(&v145, *(const std::string::value_type **)(a13 + 8), *(_QWORD *)(a13 + 16));
  else
    v145 = *(std::string *)(a13 + 8);
  v95 = *(_DWORD *)(a13 + 32);
  v146 = v95;
  v144 = off_24C335AF8;
  v94 = *(_QWORD *)(a13 + 36);
  v147 = v94;
  if (*(char *)(a14 + 31) < 0)
    std::string::__init_copy_ctor_external(&v141, *(const std::string::value_type **)(a14 + 8), *(_QWORD *)(a14 + 16));
  else
    v141 = *(std::string *)(a14 + 8);
  v93 = *(_DWORD *)(a14 + 32);
  v142 = v93;
  v140 = off_24C335AF8;
  v92 = *(_QWORD *)(a14 + 36);
  v143 = v92;
  v135 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a15 + 31) < 0)
    std::string::__init_copy_ctor_external(&v136, *(const std::string::value_type **)(a15 + 8), *(_QWORD *)(a15 + 16));
  else
    v136 = *(std::string *)(a15 + 8);
  v137 = *(_DWORD *)(a15 + 32);
  v135 = &off_24C335AB8;
  v138 = *(_BYTE *)(a15 + 36);
  if (*(char *)(a15 + 63) < 0)
    std::string::__init_copy_ctor_external(&v139, *(const std::string::value_type **)(a15 + 40), *(_QWORD *)(a15 + 48));
  else
    v139 = *(std::string *)(a15 + 40);
  if (*(char *)(a16 + 31) < 0)
    std::string::__init_copy_ctor_external(&v132, *(const std::string::value_type **)(a16 + 8), *(_QWORD *)(a16 + 16));
  else
    v132 = *(std::string *)(a16 + 8);
  v91 = *(_DWORD *)(a16 + 32);
  v133 = v91;
  v131 = off_24C335AF8;
  v90 = *(_QWORD *)(a16 + 36);
  v134 = v90;
  if (*(char *)(a17 + 31) < 0)
    std::string::__init_copy_ctor_external(&v127, *(const std::string::value_type **)(a17 + 8), *(_QWORD *)(a17 + 16));
  else
    v127 = *(std::string *)(a17 + 8);
  v47 = *(_DWORD *)(a17 + 32);
  v126 = off_24C335B18;
  v129 = *(_QWORD *)(a17 + 36);
  v48 = *(_DWORD *)(a17 + 44);
  v89 = v47;
  v128 = v47;
  v130 = v48;
  if (*(char *)(a18 + 31) < 0)
    std::string::__init_copy_ctor_external(&v122, *(const std::string::value_type **)(a18 + 8), *(_QWORD *)(a18 + 16));
  else
    v122 = *(std::string *)(a18 + 8);
  v49 = *(_DWORD *)(a18 + 32);
  v121 = off_24C335B18;
  v124 = *(_QWORD *)(a18 + 36);
  v50 = *(_DWORD *)(a18 + 44);
  v88 = v49;
  v123 = v49;
  v125 = v50;
  v116 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a19 + 31) < 0)
    std::string::__init_copy_ctor_external(&v117, *(const std::string::value_type **)(a19 + 8), *(_QWORD *)(a19 + 16));
  else
    v117 = *(std::string *)(a19 + 8);
  v118 = *(_DWORD *)(a19 + 32);
  v116 = &off_24C335AB8;
  v119 = *(_BYTE *)(a19 + 36);
  if (*(char *)(a19 + 63) < 0)
    std::string::__init_copy_ctor_external(&v120, *(const std::string::value_type **)(a19 + 40), *(_QWORD *)(a19 + 48));
  else
    v120 = *(std::string *)(a19 + 40);
  v111 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a20 + 31) < 0)
    std::string::__init_copy_ctor_external(&v112, *(const std::string::value_type **)(a20 + 8), *(_QWORD *)(a20 + 16));
  else
    v112 = *(std::string *)(a20 + 8);
  v113 = *(_DWORD *)(a20 + 32);
  v111 = &off_24C335AB8;
  v114 = *(_BYTE *)(a20 + 36);
  if (*(char *)(a20 + 63) < 0)
    std::string::__init_copy_ctor_external(&v115, *(const std::string::value_type **)(a20 + 40), *(_QWORD *)(a20 + 48));
  else
    v115 = *(std::string *)(a20 + 40);
  v106 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a21 + 31) < 0)
    std::string::__init_copy_ctor_external(&v107, *(const std::string::value_type **)(a21 + 8), *(_QWORD *)(a21 + 16));
  else
    v107 = *(std::string *)(a21 + 8);
  v108 = *(_DWORD *)(a21 + 32);
  v106 = &off_24C335AB8;
  v109 = *(_BYTE *)(a21 + 36);
  if (*(char *)(a21 + 63) < 0)
    std::string::__init_copy_ctor_external(&v110, *(const std::string::value_type **)(a21 + 40), *(_QWORD *)(a21 + 48));
  else
    v110 = *(std::string *)(a21 + 40);
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v283, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
  else
    v283 = __s;
  v284 = v36;
  v282 = off_24C335AF8;
  v285 = v37;
  v277 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v186.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v278, v186.__r_.__value_.__l.__data_, v186.__r_.__value_.__l.__size_);
  else
    v278 = v186;
  v279 = v187;
  v277 = &off_24C335AB8;
  v280 = v188;
  if (SHIBYTE(v189.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v281, v189.__r_.__value_.__l.__data_, v189.__r_.__value_.__l.__size_);
  else
    v281 = v189;
  if (SHIBYTE(v181.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v273, v181.__r_.__value_.__l.__data_, v181.__r_.__value_.__l.__size_);
  else
    v273 = v181;
  v272 = off_24C335B18;
  v275 = v183;
  v274 = v104;
  v276 = v184;
  if (SHIBYTE(v176.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v268, v176.__r_.__value_.__l.__data_, v176.__r_.__value_.__l.__size_);
  else
    v268 = v176;
  v267 = off_24C335B18;
  v270 = v178;
  v269 = v102;
  v271 = v179;
  v262 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v171.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v263, v171.__r_.__value_.__l.__data_, v171.__r_.__value_.__l.__size_);
  else
    v263 = v171;
  v264 = v172;
  v262 = &off_24C335AB8;
  v265 = v173;
  if (SHIBYTE(v174.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v266, v174.__r_.__value_.__l.__data_, v174.__r_.__value_.__l.__size_);
  else
    v266 = v174;
  if (SHIBYTE(v166.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v258, v166.__r_.__value_.__l.__data_, v166.__r_.__value_.__l.__size_);
  else
    v258 = v166;
  v257 = off_24C335B18;
  v260 = v168;
  v259 = v100;
  v261 = v169;
  v248 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v157.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v249, v157.__r_.__value_.__l.__data_, v157.__r_.__value_.__l.__size_);
  else
    v249 = v157;
  v250 = v158;
  v248 = &off_24C335A98;
  v251 = v159;
  v51 = v163;
  v52 = v161;
  v252 = &off_24C331510;
  v253 = v161;
  v254 = v161;
  if (v161)
    v53 = (void *)operator new[]();
  else
    v53 = 0;
  v255 = v53;
  v256 = 1;
  if (v51)
    memcpy(v53, v51, v52);
  else
    bzero(v53, v52);
  if (SHIBYTE(v153.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v245, v153.__r_.__value_.__l.__data_, v153.__r_.__value_.__l.__size_);
  else
    v245 = v153;
  v246 = v99;
  v244 = off_24C335AF8;
  v247 = v98;
  if (SHIBYTE(v149.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v241, v149.__r_.__value_.__l.__data_, v149.__r_.__value_.__l.__size_);
  else
    v241 = v149;
  v242 = v97;
  v240 = off_24C335AF8;
  v243 = v96;
  if (SHIBYTE(v145.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v237, v145.__r_.__value_.__l.__data_, v145.__r_.__value_.__l.__size_);
  else
    v237 = v145;
  v238 = v95;
  v236 = off_24C335AF8;
  v239 = v94;
  if (SHIBYTE(v141.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v233, v141.__r_.__value_.__l.__data_, v141.__r_.__value_.__l.__size_);
  else
    v233 = v141;
  v234 = v93;
  v232 = off_24C335AF8;
  v235 = v92;
  v227 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v136.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v228, v136.__r_.__value_.__l.__data_, v136.__r_.__value_.__l.__size_);
  else
    v228 = v136;
  v229 = v137;
  v227 = &off_24C335AB8;
  v230 = v138;
  if (SHIBYTE(v139.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v231, v139.__r_.__value_.__l.__data_, v139.__r_.__value_.__l.__size_);
  else
    v231 = v139;
  if (SHIBYTE(v132.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v224, v132.__r_.__value_.__l.__data_, v132.__r_.__value_.__l.__size_);
  else
    v224 = v132;
  v225 = v91;
  v223 = off_24C335AF8;
  v226 = v90;
  if (SHIBYTE(v127.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v219, v127.__r_.__value_.__l.__data_, v127.__r_.__value_.__l.__size_);
  else
    v219 = v127;
  v218 = off_24C335B18;
  v221 = v129;
  v220 = v89;
  v222 = v130;
  if (SHIBYTE(v122.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v214, v122.__r_.__value_.__l.__data_, v122.__r_.__value_.__l.__size_);
  else
    v214 = v122;
  v213 = off_24C335B18;
  v216 = v124;
  v215 = v88;
  v217 = v125;
  v208 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v117.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v209, v117.__r_.__value_.__l.__data_, v117.__r_.__value_.__l.__size_);
  else
    v209 = v117;
  v210 = v118;
  v208 = &off_24C335AB8;
  v211 = v119;
  if (SHIBYTE(v120.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v212, v120.__r_.__value_.__l.__data_, v120.__r_.__value_.__l.__size_);
  else
    v212 = v120;
  v203 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v112.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v204, v112.__r_.__value_.__l.__data_, v112.__r_.__value_.__l.__size_);
  else
    v204 = v112;
  v205 = v113;
  v203 = &off_24C335AB8;
  v206 = v114;
  if (SHIBYTE(v115.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v207, v115.__r_.__value_.__l.__data_, v115.__r_.__value_.__l.__size_);
  else
    v207 = v115;
  v198 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v107.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v199, v107.__r_.__value_.__l.__data_, v107.__r_.__value_.__l.__size_);
  else
    v199 = v107;
  v200 = v108;
  v198 = &off_24C335AB8;
  v201 = v109;
  if (SHIBYTE(v110.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v202, v110.__r_.__value_.__l.__data_, v110.__r_.__value_.__l.__size_);
  else
    v202 = v110;
  v365 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v278.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v366, v278.__r_.__value_.__l.__data_, v278.__r_.__value_.__l.__size_);
  else
    v366 = v278;
  v367 = v279;
  v365 = &off_24C335AB8;
  v368 = v280;
  if (SHIBYTE(v281.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v369, v281.__r_.__value_.__l.__data_, v281.__r_.__value_.__l.__size_);
  else
    v369 = v281;
  v360 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v273.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v361, v273.__r_.__value_.__l.__data_, v273.__r_.__value_.__l.__size_);
  else
    v361 = v273;
  v360 = off_24C335B18;
  v363 = v275;
  v362 = v104;
  v364 = v276;
  v355 = (uint64_t (**)())off_24C335D90;
  v54 = SHIBYTE(v268.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v268.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v356, v268.__r_.__value_.__l.__data_, v268.__r_.__value_.__l.__size_);
  else
    v356 = v268;
  v355 = off_24C335B18;
  v358 = v270;
  v357 = v102;
  v359 = v271;
  v350 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v263.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v351, v263.__r_.__value_.__l.__data_, v263.__r_.__value_.__l.__size_);
  else
    v351 = v263;
  v352 = v264;
  v350 = &off_24C335AB8;
  v353 = v265;
  if (SHIBYTE(v266.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v354, v266.__r_.__value_.__l.__data_, v266.__r_.__value_.__l.__size_);
  else
    v354 = v266;
  v345 = (uint64_t (**)())off_24C335D90;
  v86 = SHIBYTE(v258.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v258.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v346, v258.__r_.__value_.__l.__data_, v258.__r_.__value_.__l.__size_);
  else
    v346 = v258;
  v345 = off_24C335B18;
  v348 = v260;
  v347 = v100;
  v349 = v261;
  v336 = (uint64_t (**)())off_24C335D90;
  v85 = v54;
  if (SHIBYTE(v249.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v337, v249.__r_.__value_.__l.__data_, v249.__r_.__value_.__l.__size_);
  else
    v337 = v249;
  v338 = v250;
  v336 = &off_24C335A98;
  v339 = v251;
  v55 = v255;
  v56 = v253;
  v340 = &off_24C331510;
  v341 = v253;
  v342 = v253;
  if (v253)
    v57 = (void *)operator new[]();
  else
    v57 = 0;
  v343 = v57;
  v344 = 1;
  if (v55)
    memcpy(v57, v55, v56);
  else
    bzero(v57, v56);
  v332 = (uint64_t (**)())off_24C335D90;
  v84 = SHIBYTE(v245.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v245.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v333, v245.__r_.__value_.__l.__data_, v245.__r_.__value_.__l.__size_);
  else
    v333 = v245;
  v334 = v99;
  v332 = off_24C335AF8;
  v335 = v98;
  v328 = (uint64_t (**)())off_24C335D90;
  v81 = SHIBYTE(v241.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v241.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v329, v241.__r_.__value_.__l.__data_, v241.__r_.__value_.__l.__size_);
  else
    v329 = v241;
  v330 = v97;
  v328 = off_24C335AF8;
  v331 = v96;
  v324 = (uint64_t (**)())off_24C335D90;
  v80 = SHIBYTE(v237.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v237.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v325, v237.__r_.__value_.__l.__data_, v237.__r_.__value_.__l.__size_);
  else
    v325 = v237;
  v326 = v95;
  v324 = off_24C335AF8;
  v327 = v94;
  v320 = (uint64_t (**)())off_24C335D90;
  v83 = SHIBYTE(v233.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v233.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v321, v233.__r_.__value_.__l.__data_, v233.__r_.__value_.__l.__size_);
  else
    v321 = v233;
  v322 = v93;
  v320 = off_24C335AF8;
  v323 = v92;
  v315 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v228.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v316, v228.__r_.__value_.__l.__data_, v228.__r_.__value_.__l.__size_);
  else
    v316 = v228;
  v317 = v229;
  v315 = &off_24C335AB8;
  v318 = v230;
  if (SHIBYTE(v231.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v319, v231.__r_.__value_.__l.__data_, v231.__r_.__value_.__l.__size_);
  else
    v319 = v231;
  v311 = (uint64_t (**)())off_24C335D90;
  v79 = SHIBYTE(v224.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v224.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v312, v224.__r_.__value_.__l.__data_, v224.__r_.__value_.__l.__size_);
  else
    v312 = v224;
  v313 = v91;
  v311 = off_24C335AF8;
  v314 = v90;
  v306 = (uint64_t (**)())off_24C335D90;
  v78 = SHIBYTE(v219.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v219.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v307, v219.__r_.__value_.__l.__data_, v219.__r_.__value_.__l.__size_);
  else
    v307 = v219;
  v306 = off_24C335B18;
  v309 = v221;
  v308 = v89;
  v310 = v222;
  v301 = (uint64_t (**)())off_24C335D90;
  v77 = SHIBYTE(v214.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v214.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v302, v214.__r_.__value_.__l.__data_, v214.__r_.__value_.__l.__size_);
  else
    v302 = v214;
  v301 = off_24C335B18;
  v304 = v216;
  v303 = v88;
  v305 = v217;
  v296 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v209.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v297, v209.__r_.__value_.__l.__data_, v209.__r_.__value_.__l.__size_);
  else
    v297 = v209;
  v298 = v210;
  v296 = &off_24C335AB8;
  v299 = v211;
  if (SHIBYTE(v212.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v300, v212.__r_.__value_.__l.__data_, v212.__r_.__value_.__l.__size_);
  else
    v300 = v212;
  v291 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v204.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v292, v204.__r_.__value_.__l.__data_, v204.__r_.__value_.__l.__size_);
  else
    v292 = v204;
  v293 = v205;
  v291 = &off_24C335AB8;
  v294 = v206;
  if (SHIBYTE(v207.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v295, v207.__r_.__value_.__l.__data_, v207.__r_.__value_.__l.__size_);
  else
    v295 = v207;
  v286 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v199.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v287, v199.__r_.__value_.__l.__data_, v199.__r_.__value_.__l.__size_);
  else
    v287 = v199;
  v288 = v200;
  v286 = &off_24C335AB8;
  v289 = v201;
  if (SHIBYTE(v202.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v290, v202.__r_.__value_.__l.__data_, v202.__r_.__value_.__l.__size_);
  else
    v290 = v202;
  v444 = (uint64_t (**)())off_24C335D90;
  v58 = SHIBYTE(v361.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v361.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v445, v361.__r_.__value_.__l.__data_, v361.__r_.__value_.__l.__size_);
  else
    v445 = v361;
  v444 = off_24C335B18;
  v447 = v363;
  v446 = v104;
  v448 = v364;
  v439 = (uint64_t (**)())off_24C335D90;
  v105 = SHIBYTE(v356.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v356.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v440, v356.__r_.__value_.__l.__data_, v356.__r_.__value_.__l.__size_);
  else
    v440 = v356;
  v439 = off_24C335B18;
  v442 = v358;
  v441 = v102;
  v443 = v359;
  v434 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v351.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v435, v351.__r_.__value_.__l.__data_, v351.__r_.__value_.__l.__size_);
  else
    v435 = v351;
  v436 = v352;
  v434 = &off_24C335AB8;
  v437 = v353;
  if (SHIBYTE(v354.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v438, v354.__r_.__value_.__l.__data_, v354.__r_.__value_.__l.__size_);
  else
    v438 = v354;
  v429 = (uint64_t (**)())off_24C335D90;
  v59 = SHIBYTE(v346.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v346.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v430, v346.__r_.__value_.__l.__data_, v346.__r_.__value_.__l.__size_);
  else
    v430 = v346;
  v429 = off_24C335B18;
  v432 = v348;
  v431 = v100;
  v433 = v349;
  v420 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v337.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v421, v337.__r_.__value_.__l.__data_, v337.__r_.__value_.__l.__size_);
  else
    v421 = v337;
  v422 = v338;
  v420 = &off_24C335A98;
  v423 = v339;
  v60 = v343;
  v61 = v341;
  v424 = &off_24C331510;
  v425 = v341;
  v426 = v341;
  if (v341)
    v62 = (void *)operator new[]();
  else
    v62 = 0;
  v427 = v62;
  v428 = 1;
  if (v60)
    memcpy(v62, v60, v61);
  else
    bzero(v62, v61);
  v416 = (uint64_t (**)())off_24C335D90;
  v103 = SHIBYTE(v333.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v333.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v417, v333.__r_.__value_.__l.__data_, v333.__r_.__value_.__l.__size_);
  else
    v417 = v333;
  v418 = v99;
  v416 = off_24C335AF8;
  v419 = v98;
  v412 = (uint64_t (**)())off_24C335D90;
  v101 = SHIBYTE(v329.__r_.__value_.__r.__words[2]);
  v87 = v58;
  if (SHIBYTE(v329.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v413, v329.__r_.__value_.__l.__data_, v329.__r_.__value_.__l.__size_);
  else
    v413 = v329;
  v414 = v97;
  v412 = off_24C335AF8;
  v415 = v96;
  v408 = (uint64_t (**)())off_24C335D90;
  v63 = SHIBYTE(v325.__r_.__value_.__r.__words[2]);
  v76 = v59;
  if (SHIBYTE(v325.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v409, v325.__r_.__value_.__l.__data_, v325.__r_.__value_.__l.__size_);
  else
    v409 = v325;
  v410 = v95;
  v408 = off_24C335AF8;
  v411 = v94;
  v404 = (uint64_t (**)())off_24C335D90;
  v64 = SHIBYTE(v321.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v321.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v405, v321.__r_.__value_.__l.__data_, v321.__r_.__value_.__l.__size_);
  else
    v405 = v321;
  v406 = v93;
  v404 = off_24C335AF8;
  v407 = v92;
  v399 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v316.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v400, v316.__r_.__value_.__l.__data_, v316.__r_.__value_.__l.__size_);
  else
    v400 = v316;
  v401 = v317;
  v399 = &off_24C335AB8;
  v402 = v318;
  if (SHIBYTE(v319.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v403, v319.__r_.__value_.__l.__data_, v319.__r_.__value_.__l.__size_);
  else
    v403 = v319;
  v395 = (uint64_t (**)())off_24C335D90;
  v65 = SHIBYTE(v312.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v312.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v396, v312.__r_.__value_.__l.__data_, v312.__r_.__value_.__l.__size_);
  else
    v396 = v312;
  v397 = v91;
  v395 = off_24C335AF8;
  v398 = v90;
  v390 = (uint64_t (**)())off_24C335D90;
  v66 = SHIBYTE(v307.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v307.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v391, v307.__r_.__value_.__l.__data_, v307.__r_.__value_.__l.__size_);
  else
    v391 = v307;
  v390 = off_24C335B18;
  v393 = v309;
  v392 = v89;
  v394 = v310;
  v385 = (uint64_t (**)())off_24C335D90;
  v67 = SHIBYTE(v302.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v302.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&__p, v302.__r_.__value_.__l.__data_, v302.__r_.__value_.__l.__size_);
  else
    __p = v302;
  v385 = off_24C335B18;
  v388 = v304;
  v387 = v88;
  v389 = v305;
  v380 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v297.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v381, v297.__r_.__value_.__l.__data_, v297.__r_.__value_.__l.__size_);
  else
    v381 = v297;
  v382 = v298;
  v380 = &off_24C335AB8;
  v383 = v299;
  if (SHIBYTE(v300.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v384, v300.__r_.__value_.__l.__data_, v300.__r_.__value_.__l.__size_);
  else
    v384 = v300;
  v375 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v292.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v376, v292.__r_.__value_.__l.__data_, v292.__r_.__value_.__l.__size_);
  else
    v376 = v292;
  v377 = v293;
  v375 = &off_24C335AB8;
  v378 = v294;
  if (SHIBYTE(v295.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v379, v295.__r_.__value_.__l.__data_, v295.__r_.__value_.__l.__size_);
  else
    v379 = v295;
  v370 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v287.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v371, v287.__r_.__value_.__l.__data_, v287.__r_.__value_.__l.__size_);
  else
    v371 = v287;
  v372 = v288;
  v370 = &off_24C335AB8;
  v373 = v289;
  if (SHIBYTE(v290.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v374, v290.__r_.__value_.__l.__data_, v290.__r_.__value_.__l.__size_);
  else
    v374 = v290;
  mediaplatform::DatabaseColumnTuple<23ul,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>>::DatabaseColumnTuple(v34, (uint64_t)&v444, (uint64_t)&v439, (uint64_t)&v434, (uint64_t)&v429, (uint64_t)&v420, (uint64_t)&v416, (uint64_t)&v412, (uint64_t)&v408, (uint64_t)&v404, (uint64_t)&v399, (uint64_t)&v395, (uint64_t)&v390, (uint64_t)&v385, (uint64_t)&v380, (uint64_t)&v375, (uint64_t)&v370);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v370);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v375);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v380);
  v385 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v390 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v391.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v391.__r_.__value_.__l.__data_);
  v395 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v396.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v396.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v399);
  v404 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v405.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v405.__r_.__value_.__l.__data_);
  v408 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v409.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v409.__r_.__value_.__l.__data_);
  v412 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v413.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v413.__r_.__value_.__l.__data_);
  v416 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v417.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v417.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<mediaplatform::Data>::~DatabaseColumn((uint64_t)&v420);
  v429 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v430.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v430.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v434);
  v439 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v440.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v440.__r_.__value_.__l.__data_);
  v444 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v445.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v445.__r_.__value_.__l.__data_);
  *(_QWORD *)(v34 + 880) = off_24C335D90;
  if (SHIBYTE(v366.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external((std::string *)(v34 + 888), v366.__r_.__value_.__l.__data_, v366.__r_.__value_.__l.__size_);
  else
    *(std::string *)(v34 + 888) = v366;
  *(_DWORD *)(v34 + 912) = v367;
  *(_QWORD *)(v34 + 880) = &off_24C335AB8;
  *(_BYTE *)(v34 + 916) = v368;
  v68 = (std::string *)(v34 + 920);
  if (SHIBYTE(v369.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v68, v369.__r_.__value_.__l.__data_, v369.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v68->__r_.__value_.__l.__data_ = *(_OWORD *)&v369.__r_.__value_.__l.__data_;
    *(_QWORD *)(v34 + 936) = *((_QWORD *)&v369.__r_.__value_.__l + 2);
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v286);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v291);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v296);
  v301 = (uint64_t (**)())off_24C335D90;
  if (v67 < 0)
    operator delete(v302.__r_.__value_.__l.__data_);
  v306 = (uint64_t (**)())off_24C335D90;
  if (v66 < 0)
    operator delete(v307.__r_.__value_.__l.__data_);
  v311 = (uint64_t (**)())off_24C335D90;
  if (v65 < 0)
    operator delete(v312.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v315);
  v320 = (uint64_t (**)())off_24C335D90;
  if (v64 < 0)
    operator delete(v321.__r_.__value_.__l.__data_);
  v324 = (uint64_t (**)())off_24C335D90;
  if (v63 < 0)
    operator delete(v325.__r_.__value_.__l.__data_);
  v328 = (uint64_t (**)())off_24C335D90;
  if (v101 < 0)
    operator delete(v329.__r_.__value_.__l.__data_);
  v332 = (uint64_t (**)())off_24C335D90;
  if (v103 < 0)
    operator delete(v333.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<mediaplatform::Data>::~DatabaseColumn((uint64_t)&v336);
  v345 = (uint64_t (**)())off_24C335D90;
  if (v76 < 0)
    operator delete(v346.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v350);
  v355 = (uint64_t (**)())off_24C335D90;
  if (v105 < 0)
    operator delete(v356.__r_.__value_.__l.__data_);
  v360 = (uint64_t (**)())off_24C335D90;
  if (v87 < 0)
    operator delete(v361.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v365);
  *(_QWORD *)(v34 + 944) = off_24C335D90;
  v69 = (std::string *)(v34 + 952);
  v70 = SHIBYTE(v283.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v283.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v69, v283.__r_.__value_.__l.__data_, v283.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v69->__r_.__value_.__l.__data_ = *(_OWORD *)&v283.__r_.__value_.__l.__data_;
    *(_QWORD *)(v34 + 968) = *((_QWORD *)&v283.__r_.__value_.__l + 2);
  }
  *(_DWORD *)(v34 + 976) = v284;
  *(_QWORD *)(v34 + 944) = off_24C335AF8;
  *(_QWORD *)(v34 + 980) = v285;
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v198);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v203);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v208);
  v213 = (uint64_t (**)())off_24C335D90;
  if (v77 < 0)
    operator delete(v214.__r_.__value_.__l.__data_);
  v218 = (uint64_t (**)())off_24C335D90;
  if (v78 < 0)
    operator delete(v219.__r_.__value_.__l.__data_);
  v223 = (uint64_t (**)())off_24C335D90;
  if (v79 < 0)
    operator delete(v224.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v227);
  v232 = (uint64_t (**)())off_24C335D90;
  if (v83 < 0)
    operator delete(v233.__r_.__value_.__l.__data_);
  v236 = (uint64_t (**)())off_24C335D90;
  if (v80 < 0)
    operator delete(v237.__r_.__value_.__l.__data_);
  v240 = (uint64_t (**)())off_24C335D90;
  if (v81 < 0)
    operator delete(v241.__r_.__value_.__l.__data_);
  v244 = (uint64_t (**)())off_24C335D90;
  if (v84 < 0)
    operator delete(v245.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<mediaplatform::Data>::~DatabaseColumn((uint64_t)&v248);
  v257 = (uint64_t (**)())off_24C335D90;
  if (v86 < 0)
    operator delete(v258.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v262);
  if (v85 < 0)
    operator delete(v268.__r_.__value_.__l.__data_);
  if (SHIBYTE(v273.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v273.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v277);
  if (v70 < 0)
    operator delete(v283.__r_.__value_.__l.__data_);
  *(_QWORD *)(v34 + 992) = off_24C335D90;
  v71 = (std::string *)(v34 + 1000);
  v72 = SHIBYTE(v195.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v195.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v71, v195.__r_.__value_.__l.__data_, v195.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v71->__r_.__value_.__l.__data_ = *(_OWORD *)&v195.__r_.__value_.__l.__data_;
    *(_QWORD *)(v34 + 1016) = *((_QWORD *)&v195.__r_.__value_.__l + 2);
  }
  *(_DWORD *)(v34 + 1024) = v196;
  *(_QWORD *)(v34 + 992) = off_24C335AF8;
  *(_QWORD *)(v34 + 1028) = v197;
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v106);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v111);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v116);
  if (SHIBYTE(v122.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v122.__r_.__value_.__l.__data_);
  if (SHIBYTE(v127.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v127.__r_.__value_.__l.__data_);
  if (SHIBYTE(v132.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v132.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v135);
  if (SHIBYTE(v141.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v141.__r_.__value_.__l.__data_);
  if (SHIBYTE(v145.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v145.__r_.__value_.__l.__data_);
  if (SHIBYTE(v149.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v149.__r_.__value_.__l.__data_);
  if (SHIBYTE(v153.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v153.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<mediaplatform::Data>::~DatabaseColumn((uint64_t)&v156);
  if (SHIBYTE(v166.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v166.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v170);
  if (SHIBYTE(v176.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v176.__r_.__value_.__l.__data_);
  if (SHIBYTE(v181.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v181.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v185);
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__s.__r_.__value_.__l.__data_);
    if ((v72 & 0x80000000) == 0)
      goto LABEL_400;
  }
  else if ((v72 & 0x80000000) == 0)
  {
    goto LABEL_400;
  }
  operator delete(v195.__r_.__value_.__l.__data_);
LABEL_400:
  *(_QWORD *)(v34 + 1040) = off_24C335D90;
  v73 = (std::string *)(v34 + 1048);
  if (*(char *)(v82 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v73, *(const std::string::value_type **)(v82 + 8), *(_QWORD *)(v82 + 16));
  }
  else
  {
    v74 = *(_OWORD *)(v82 + 8);
    *(_QWORD *)(v34 + 1064) = *(_QWORD *)(v82 + 24);
    *(_OWORD *)&v73->__r_.__value_.__l.__data_ = v74;
  }
  *(_DWORD *)(v34 + 1072) = *(_DWORD *)(v82 + 32);
  *(_QWORD *)(v34 + 1040) = off_24C335AF8;
  *(_QWORD *)(v34 + 1076) = *(_QWORD *)(v82 + 36);
  return v34;
}

void sub_20A8394EC(_Unwind_Exception *a1)
{
  uint64_t v1;

  mediaplatform::DatabaseColumnTuple<20ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>>::~DatabaseColumnTuple(v1);
  _Unwind_Resume(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<19ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>>::~DatabaseColumnTuple(uint64_t a1)
{
  *(_QWORD *)(a1 + 1040) = off_24C335D90;
  if (*(char *)(a1 + 1071) < 0)
    operator delete(*(void **)(a1 + 1048));
  *(_QWORD *)(a1 + 992) = off_24C335D90;
  if (*(char *)(a1 + 1023) < 0)
    operator delete(*(void **)(a1 + 1000));
  *(_QWORD *)(a1 + 944) = off_24C335D90;
  if (*(char *)(a1 + 975) < 0)
    operator delete(*(void **)(a1 + 952));
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 880);
  *(_QWORD *)(a1 + 832) = off_24C335D90;
  if (*(char *)(a1 + 863) < 0)
    operator delete(*(void **)(a1 + 840));
  return mediaplatform::DatabaseColumnTuple<24ul,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>>::~DatabaseColumnTuple(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<20ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>>::~DatabaseColumnTuple(uint64_t a1)
{
  *(_QWORD *)(a1 + 992) = off_24C335D90;
  if (*(char *)(a1 + 1023) < 0)
    operator delete(*(void **)(a1 + 1000));
  *(_QWORD *)(a1 + 944) = off_24C335D90;
  if (*(char *)(a1 + 975) < 0)
    operator delete(*(void **)(a1 + 952));
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 880);
  *(_QWORD *)(a1 + 832) = off_24C335D90;
  if (*(char *)(a1 + 863) < 0)
    operator delete(*(void **)(a1 + 840));
  return mediaplatform::DatabaseColumnTuple<24ul,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>>::~DatabaseColumnTuple(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<21ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>>::~DatabaseColumnTuple(uint64_t a1)
{
  *(_QWORD *)(a1 + 944) = off_24C335D90;
  if (*(char *)(a1 + 975) < 0)
    operator delete(*(void **)(a1 + 952));
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 880);
  *(_QWORD *)(a1 + 832) = off_24C335D90;
  if (*(char *)(a1 + 863) < 0)
    operator delete(*(void **)(a1 + 840));
  return mediaplatform::DatabaseColumnTuple<24ul,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>>::~DatabaseColumnTuple(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<22ul,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>>::~DatabaseColumnTuple(uint64_t a1)
{
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 880);
  *(_QWORD *)(a1 + 832) = off_24C335D90;
  if (*(char *)(a1 + 863) < 0)
    operator delete(*(void **)(a1 + 840));
  return mediaplatform::DatabaseColumnTuple<24ul,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>>::~DatabaseColumnTuple(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<23ul,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>>::DatabaseColumnTuple(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  int v24;
  int v25;
  int v26;
  int v27;
  const void *v28;
  size_t v29;
  void *v30;
  int v31;
  int v32;
  int v33;
  int v34;
  const void *v35;
  size_t v36;
  void *v37;
  const void *v38;
  size_t v39;
  void *v40;
  int v41;
  const void *v42;
  size_t v43;
  void *v44;
  int v45;
  int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  std::string *v52;
  int v53;
  std::string *v54;
  std::string *v55;
  int v56;
  std::string *v57;
  __int128 v58;
  uint64_t v59;
  int v61;
  int v62;
  int v63;
  int v64;
  int v65;
  int v66;
  int v67;
  int v68;
  int v69;
  int v71;
  int v72;
  int v73;
  int v74;
  int v75;
  int v76;
  uint64_t v77;
  int v78;
  uint64_t v79;
  int v80;
  uint64_t v81;
  int v82;
  uint64_t v83;
  int v84;
  uint64_t v85;
  int v86;
  int v87;
  uint64_t (**v88)();
  std::string v89;
  int v90;
  char v91;
  std::string v92;
  uint64_t (**v93)();
  std::string v94;
  int v95;
  char v96;
  std::string v97;
  uint64_t (**v98)();
  std::string v99;
  int v100;
  char v101;
  std::string v102;
  uint64_t (**v103)();
  std::string v104;
  int v105;
  uint64_t v106;
  int v107;
  uint64_t (**v108)();
  std::string v109;
  int v110;
  uint64_t v111;
  int v112;
  uint64_t (**v113)();
  std::string v114;
  int v115;
  uint64_t v116;
  uint64_t (**v117)();
  std::string v118;
  int v119;
  char v120;
  std::string v121;
  uint64_t (**v122)();
  std::string v123;
  int v124;
  uint64_t v125;
  uint64_t (**v126)();
  std::string v127;
  int v128;
  uint64_t v129;
  uint64_t (**v130)();
  std::string v131;
  int v132;
  uint64_t v133;
  uint64_t (**v134)();
  std::string v135;
  int v136;
  uint64_t v137;
  uint64_t (**v138)();
  std::string v139;
  int v140;
  char v141;
  void (**v142)(mediaplatform::Data *__hidden);
  size_t v143;
  size_t v144;
  const void *v145;
  char v146;
  uint64_t (**v147)();
  std::string v148;
  int v149;
  uint64_t v150;
  int v151;
  uint64_t (**v152)();
  std::string __s;
  int v154;
  char v155;
  std::string v156;
  uint64_t (**v157)();
  std::string v158;
  int v159;
  uint64_t v160;
  int v161;
  uint64_t (**v162)();
  std::string v163;
  int v164;
  char v165;
  std::string v166;
  uint64_t (**v167)();
  std::string v168;
  int v169;
  char v170;
  std::string v171;
  uint64_t (**v172)();
  std::string v173;
  int v174;
  char v175;
  std::string v176;
  uint64_t (**v177)();
  std::string v178;
  int v179;
  uint64_t v180;
  int v181;
  uint64_t (**v182)();
  std::string v183;
  int v184;
  uint64_t v185;
  int v186;
  uint64_t (**v187)();
  std::string v188;
  int v189;
  uint64_t v190;
  uint64_t (**v191)();
  std::string v192;
  int v193;
  char v194;
  std::string v195;
  uint64_t (**v196)();
  std::string v197;
  int v198;
  uint64_t v199;
  uint64_t (**v200)();
  std::string v201;
  int v202;
  uint64_t v203;
  uint64_t (**v204)();
  std::string v205;
  int v206;
  uint64_t v207;
  uint64_t (**v208)();
  std::string v209;
  int v210;
  uint64_t v211;
  uint64_t (**v212)();
  std::string v213;
  int v214;
  char v215;
  void (**v216)(mediaplatform::Data *__hidden);
  size_t v217;
  size_t v218;
  const void *v219;
  char v220;
  uint64_t (**v221)();
  std::string v222;
  int v223;
  uint64_t v224;
  int v225;
  uint64_t (**v226)();
  std::string v227;
  int v228;
  char v229;
  std::string v230;
  uint64_t (**v231)();
  std::string v232;
  int v233;
  char v234;
  std::string v235;
  uint64_t (**v236)();
  std::string v237;
  int v238;
  char v239;
  std::string v240;
  uint64_t (**v241)();
  std::string v242;
  int v243;
  char v244;
  std::string v245;
  uint64_t (**v246)();
  std::string v247;
  int v248;
  uint64_t v249;
  int v250;
  uint64_t (**v251)();
  std::string v252;
  int v253;
  uint64_t v254;
  int v255;
  uint64_t (**v256)();
  std::string v257;
  int v258;
  uint64_t v259;
  uint64_t (**v260)();
  std::string v261;
  int v262;
  char v263;
  std::string v264;
  uint64_t (**v265)();
  std::string v266;
  int v267;
  uint64_t v268;
  uint64_t (**v269)();
  std::string v270;
  int v271;
  uint64_t v272;
  uint64_t (**v273)();
  std::string v274;
  int v275;
  uint64_t v276;
  uint64_t (**v277)();
  std::string v278;
  int v279;
  uint64_t v280;
  uint64_t (**v281)();
  std::string v282;
  int v283;
  char v284;
  void (**v285)(mediaplatform::Data *__hidden);
  size_t v286;
  size_t v287;
  const void *v288;
  char v289;
  uint64_t (**v290)();
  std::string v291;
  int v292;
  uint64_t v293;
  int v294;
  uint64_t (**v295)();
  std::string v296;
  int v297;
  char v298;
  std::string v299;
  uint64_t (**v300)();
  std::string v301;
  int v302;
  char v303;
  std::string v304;
  uint64_t (**v305)();
  std::string v306;
  int v307;
  char v308;
  std::string v309;
  uint64_t (**v310)();
  std::string v311;
  int v312;
  uint64_t v313;
  int v314;
  uint64_t (**v315)();
  std::string v316;
  int v317;
  uint64_t v318;
  int v319;
  uint64_t (**v320)();
  std::string v321;
  int v322;
  uint64_t v323;
  uint64_t (**v324)();
  std::string v325;
  int v326;
  char v327;
  std::string v328;
  uint64_t (**v329)();
  std::string v330;
  int v331;
  uint64_t v332;
  uint64_t (**v333)();
  std::string v334;
  int v335;
  uint64_t v336;
  uint64_t (**v337)();
  std::string v338;
  int v339;
  uint64_t v340;
  uint64_t (**v341)();
  std::string v342;
  int v343;
  uint64_t v344;
  uint64_t (**v345)();
  std::string v346;
  int v347;
  char v348;
  _QWORD v349[4];
  char v350;
  uint64_t (**v351)();
  std::string v352;
  int v353;
  char v354;
  std::string v355;
  uint64_t (**v356)();
  std::string v357;
  int v358;
  char v359;
  std::string v360;
  uint64_t (**v361)();
  std::string v362;
  int v363;
  char v364;
  std::string v365;
  uint64_t (**v366)();
  std::string __p;
  int v368;
  uint64_t v369;
  int v370;
  uint64_t (**v371)();
  std::string v372;
  int v373;
  uint64_t v374;
  int v375;
  uint64_t (**v376)();
  std::string v377;
  int v378;
  uint64_t v379;
  uint64_t (**v380)();
  std::string v381;
  int v382;
  char v383;
  std::string v384;
  uint64_t (**v385)();
  std::string v386;
  int v387;
  uint64_t v388;
  uint64_t (**v389)();
  std::string v390;
  int v391;
  uint64_t v392;
  uint64_t (**v393)();
  std::string v394;
  int v395;
  uint64_t v396;
  uint64_t (**v397)();
  std::string v398;
  int v399;
  uint64_t v400;

  if (*(char *)(a3 + 31) < 0)
    std::string::__init_copy_ctor_external(&v158, *(const std::string::value_type **)(a3 + 8), *(_QWORD *)(a3 + 16));
  else
    v158 = *(std::string *)(a3 + 8);
  v24 = *(_DWORD *)(a3 + 32);
  v157 = off_24C335B18;
  v160 = *(_QWORD *)(a3 + 36);
  v25 = *(_DWORD *)(a3 + 44);
  v159 = v24;
  v161 = v25;
  v152 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a4 + 31) < 0)
    std::string::__init_copy_ctor_external(&__s, *(const std::string::value_type **)(a4 + 8), *(_QWORD *)(a4 + 16));
  else
    __s = *(std::string *)(a4 + 8);
  v154 = *(_DWORD *)(a4 + 32);
  v152 = &off_24C335AB8;
  v155 = *(_BYTE *)(a4 + 36);
  if (*(char *)(a4 + 63) < 0)
    std::string::__init_copy_ctor_external(&v156, *(const std::string::value_type **)(a4 + 40), *(_QWORD *)(a4 + 48));
  else
    v156 = *(std::string *)(a4 + 40);
  if (*(char *)(a5 + 31) < 0)
    std::string::__init_copy_ctor_external(&v148, *(const std::string::value_type **)(a5 + 8), *(_QWORD *)(a5 + 16));
  else
    v148 = *(std::string *)(a5 + 8);
  v26 = *(_DWORD *)(a5 + 32);
  v147 = off_24C335B18;
  v150 = *(_QWORD *)(a5 + 36);
  v27 = *(_DWORD *)(a5 + 44);
  v149 = v26;
  v151 = v27;
  v138 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a6 + 31) < 0)
    std::string::__init_copy_ctor_external(&v139, *(const std::string::value_type **)(a6 + 8), *(_QWORD *)(a6 + 16));
  else
    v139 = *(std::string *)(a6 + 8);
  v140 = *(_DWORD *)(a6 + 32);
  v138 = &off_24C335A98;
  v141 = *(_BYTE *)(a6 + 36);
  v28 = *(const void **)(a6 + 64);
  v29 = *(_QWORD *)(a6 + 48);
  v142 = &off_24C331510;
  v143 = v29;
  v144 = v29;
  if (v29)
    v30 = (void *)operator new[]();
  else
    v30 = 0;
  v145 = v30;
  v146 = 1;
  if (v28)
    memcpy(v30, v28, v29);
  else
    bzero(v30, v29);
  if (*(char *)(a7 + 31) < 0)
    std::string::__init_copy_ctor_external(&v135, *(const std::string::value_type **)(a7 + 8), *(_QWORD *)(a7 + 16));
  else
    v135 = *(std::string *)(a7 + 8);
  v86 = *(_DWORD *)(a7 + 32);
  v136 = v86;
  v134 = off_24C335AF8;
  v85 = *(_QWORD *)(a7 + 36);
  v137 = v85;
  if (*(char *)(a8 + 31) < 0)
    std::string::__init_copy_ctor_external(&v131, *(const std::string::value_type **)(a8 + 8), *(_QWORD *)(a8 + 16));
  else
    v131 = *(std::string *)(a8 + 8);
  v84 = *(_DWORD *)(a8 + 32);
  v132 = v84;
  v130 = off_24C335AF8;
  v83 = *(_QWORD *)(a8 + 36);
  v133 = v83;
  if (*(char *)(a9 + 31) < 0)
    std::string::__init_copy_ctor_external(&v127, *(const std::string::value_type **)(a9 + 8), *(_QWORD *)(a9 + 16));
  else
    v127 = *(std::string *)(a9 + 8);
  v82 = *(_DWORD *)(a9 + 32);
  v128 = v82;
  v126 = off_24C335AF8;
  v81 = *(_QWORD *)(a9 + 36);
  v129 = v81;
  if (*(char *)(a10 + 31) < 0)
    std::string::__init_copy_ctor_external(&v123, *(const std::string::value_type **)(a10 + 8), *(_QWORD *)(a10 + 16));
  else
    v123 = *(std::string *)(a10 + 8);
  v80 = *(_DWORD *)(a10 + 32);
  v124 = v80;
  v122 = off_24C335AF8;
  v79 = *(_QWORD *)(a10 + 36);
  v125 = v79;
  v117 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a11 + 31) < 0)
    std::string::__init_copy_ctor_external(&v118, *(const std::string::value_type **)(a11 + 8), *(_QWORD *)(a11 + 16));
  else
    v118 = *(std::string *)(a11 + 8);
  v119 = *(_DWORD *)(a11 + 32);
  v117 = &off_24C335AB8;
  v120 = *(_BYTE *)(a11 + 36);
  if (*(char *)(a11 + 63) < 0)
    std::string::__init_copy_ctor_external(&v121, *(const std::string::value_type **)(a11 + 40), *(_QWORD *)(a11 + 48));
  else
    v121 = *(std::string *)(a11 + 40);
  if (*(char *)(a12 + 31) < 0)
    std::string::__init_copy_ctor_external(&v114, *(const std::string::value_type **)(a12 + 8), *(_QWORD *)(a12 + 16));
  else
    v114 = *(std::string *)(a12 + 8);
  v78 = *(_DWORD *)(a12 + 32);
  v115 = v78;
  v113 = off_24C335AF8;
  v77 = *(_QWORD *)(a12 + 36);
  v116 = v77;
  if (*(char *)(a13 + 31) < 0)
    std::string::__init_copy_ctor_external(&v109, *(const std::string::value_type **)(a13 + 8), *(_QWORD *)(a13 + 16));
  else
    v109 = *(std::string *)(a13 + 8);
  v31 = *(_DWORD *)(a13 + 32);
  v108 = off_24C335B18;
  v111 = *(_QWORD *)(a13 + 36);
  v32 = *(_DWORD *)(a13 + 44);
  v76 = v31;
  v110 = v31;
  v112 = v32;
  if (*(char *)(a14 + 31) < 0)
    std::string::__init_copy_ctor_external(&v104, *(const std::string::value_type **)(a14 + 8), *(_QWORD *)(a14 + 16));
  else
    v104 = *(std::string *)(a14 + 8);
  v33 = *(_DWORD *)(a14 + 32);
  v103 = off_24C335B18;
  v106 = *(_QWORD *)(a14 + 36);
  v34 = *(_DWORD *)(a14 + 44);
  v75 = v33;
  v105 = v33;
  v107 = v34;
  v98 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a15 + 31) < 0)
    std::string::__init_copy_ctor_external(&v99, *(const std::string::value_type **)(a15 + 8), *(_QWORD *)(a15 + 16));
  else
    v99 = *(std::string *)(a15 + 8);
  v100 = *(_DWORD *)(a15 + 32);
  v98 = &off_24C335AB8;
  v101 = *(_BYTE *)(a15 + 36);
  if (*(char *)(a15 + 63) < 0)
    std::string::__init_copy_ctor_external(&v102, *(const std::string::value_type **)(a15 + 40), *(_QWORD *)(a15 + 48));
  else
    v102 = *(std::string *)(a15 + 40);
  v93 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a16 + 31) < 0)
    std::string::__init_copy_ctor_external(&v94, *(const std::string::value_type **)(a16 + 8), *(_QWORD *)(a16 + 16));
  else
    v94 = *(std::string *)(a16 + 8);
  v95 = *(_DWORD *)(a16 + 32);
  v93 = &off_24C335AB8;
  v96 = *(_BYTE *)(a16 + 36);
  if (*(char *)(a16 + 63) < 0)
    std::string::__init_copy_ctor_external(&v97, *(const std::string::value_type **)(a16 + 40), *(_QWORD *)(a16 + 48));
  else
    v97 = *(std::string *)(a16 + 40);
  v88 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a17 + 31) < 0)
    std::string::__init_copy_ctor_external(&v89, *(const std::string::value_type **)(a17 + 8), *(_QWORD *)(a17 + 16));
  else
    v89 = *(std::string *)(a17 + 8);
  v90 = *(_DWORD *)(a17 + 32);
  v88 = &off_24C335AB8;
  v91 = *(_BYTE *)(a17 + 36);
  if (*(char *)(a17 + 63) < 0)
    std::string::__init_copy_ctor_external(&v92, *(const std::string::value_type **)(a17 + 40), *(_QWORD *)(a17 + 48));
  else
    v92 = *(std::string *)(a17 + 40);
  v226 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v227, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
  else
    v227 = __s;
  v228 = v154;
  v226 = &off_24C335AB8;
  v229 = v155;
  if (SHIBYTE(v156.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v230, v156.__r_.__value_.__l.__data_, v156.__r_.__value_.__l.__size_);
  else
    v230 = v156;
  if (SHIBYTE(v148.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v222, v148.__r_.__value_.__l.__data_, v148.__r_.__value_.__l.__size_);
  else
    v222 = v148;
  v223 = v26;
  v221 = off_24C335B18;
  v224 = v150;
  v225 = v151;
  v212 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v139.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v213, v139.__r_.__value_.__l.__data_, v139.__r_.__value_.__l.__size_);
  else
    v213 = v139;
  v214 = v140;
  v212 = &off_24C335A98;
  v215 = v141;
  v35 = v145;
  v36 = v143;
  v216 = &off_24C331510;
  v217 = v143;
  v218 = v143;
  if (v143)
    v37 = (void *)operator new[]();
  else
    v37 = 0;
  v219 = v37;
  v220 = 1;
  if (v35)
    memcpy(v37, v35, v36);
  else
    bzero(v37, v36);
  if (SHIBYTE(v135.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v209, v135.__r_.__value_.__l.__data_, v135.__r_.__value_.__l.__size_);
  else
    v209 = v135;
  v210 = v86;
  v208 = off_24C335AF8;
  v211 = v85;
  if (SHIBYTE(v131.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v205, v131.__r_.__value_.__l.__data_, v131.__r_.__value_.__l.__size_);
  else
    v205 = v131;
  v206 = v84;
  v204 = off_24C335AF8;
  v207 = v83;
  if (SHIBYTE(v127.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v201, v127.__r_.__value_.__l.__data_, v127.__r_.__value_.__l.__size_);
  else
    v201 = v127;
  v202 = v82;
  v200 = off_24C335AF8;
  v203 = v81;
  if (SHIBYTE(v123.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v197, v123.__r_.__value_.__l.__data_, v123.__r_.__value_.__l.__size_);
  else
    v197 = v123;
  v198 = v80;
  v196 = off_24C335AF8;
  v199 = v79;
  v191 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v118.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v192, v118.__r_.__value_.__l.__data_, v118.__r_.__value_.__l.__size_);
  else
    v192 = v118;
  v193 = v119;
  v191 = &off_24C335AB8;
  v194 = v120;
  if (SHIBYTE(v121.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v195, v121.__r_.__value_.__l.__data_, v121.__r_.__value_.__l.__size_);
  else
    v195 = v121;
  if (SHIBYTE(v114.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v188, v114.__r_.__value_.__l.__data_, v114.__r_.__value_.__l.__size_);
  else
    v188 = v114;
  v189 = v78;
  v187 = off_24C335AF8;
  v190 = v77;
  if (SHIBYTE(v109.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v183, v109.__r_.__value_.__l.__data_, v109.__r_.__value_.__l.__size_);
  else
    v183 = v109;
  v182 = off_24C335B18;
  v185 = v111;
  v184 = v76;
  v186 = v112;
  if (SHIBYTE(v104.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v178, v104.__r_.__value_.__l.__data_, v104.__r_.__value_.__l.__size_);
  else
    v178 = v104;
  v177 = off_24C335B18;
  v180 = v106;
  v179 = v75;
  v181 = v107;
  v172 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v99.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v173, v99.__r_.__value_.__l.__data_, v99.__r_.__value_.__l.__size_);
  else
    v173 = v99;
  v174 = v100;
  v172 = &off_24C335AB8;
  v175 = v101;
  if (SHIBYTE(v102.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v176, v102.__r_.__value_.__l.__data_, v102.__r_.__value_.__l.__size_);
  else
    v176 = v102;
  v167 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v94.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v168, v94.__r_.__value_.__l.__data_, v94.__r_.__value_.__l.__size_);
  else
    v168 = v94;
  v169 = v95;
  v167 = &off_24C335AB8;
  v170 = v96;
  if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v171, v97.__r_.__value_.__l.__data_, v97.__r_.__value_.__l.__size_);
  else
    v171 = v97;
  v162 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v89.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v163, v89.__r_.__value_.__l.__data_, v89.__r_.__value_.__l.__size_);
  else
    v163 = v89;
  v164 = v90;
  v162 = &off_24C335AB8;
  v165 = v91;
  if (SHIBYTE(v92.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v166, v92.__r_.__value_.__l.__data_, v92.__r_.__value_.__l.__size_);
  else
    v166 = v92;
  if (SHIBYTE(v222.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v291, v222.__r_.__value_.__l.__data_, v222.__r_.__value_.__l.__size_);
  else
    v291 = v222;
  v73 = v26;
  v292 = v26;
  v290 = off_24C335B18;
  v293 = v224;
  v294 = v225;
  v281 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v213.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v282, v213.__r_.__value_.__l.__data_, v213.__r_.__value_.__l.__size_);
  else
    v282 = v213;
  v283 = v214;
  v281 = &off_24C335A98;
  v284 = v215;
  v38 = v219;
  v39 = v217;
  v285 = &off_24C331510;
  v286 = v217;
  v287 = v217;
  if (v217)
    v40 = (void *)operator new[]();
  else
    v40 = 0;
  v288 = v40;
  v289 = 1;
  if (v38)
    memcpy(v40, v38, v39);
  else
    bzero(v40, v39);
  if (SHIBYTE(v209.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v278, v209.__r_.__value_.__l.__data_, v209.__r_.__value_.__l.__size_);
  else
    v278 = v209;
  v279 = v86;
  v277 = off_24C335AF8;
  v280 = v85;
  if (SHIBYTE(v205.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v274, v205.__r_.__value_.__l.__data_, v205.__r_.__value_.__l.__size_);
  else
    v274 = v205;
  v275 = v84;
  v273 = off_24C335AF8;
  v276 = v83;
  if (SHIBYTE(v201.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v270, v201.__r_.__value_.__l.__data_, v201.__r_.__value_.__l.__size_);
  else
    v270 = v201;
  v271 = v82;
  v269 = off_24C335AF8;
  v272 = v81;
  v72 = SHIBYTE(v197.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v197.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v266, v197.__r_.__value_.__l.__data_, v197.__r_.__value_.__l.__size_);
  else
    v266 = v197;
  v267 = v80;
  v265 = off_24C335AF8;
  v268 = v79;
  v260 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v192.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v261, v192.__r_.__value_.__l.__data_, v192.__r_.__value_.__l.__size_);
  else
    v261 = v192;
  v262 = v193;
  v260 = &off_24C335AB8;
  v263 = v194;
  if (SHIBYTE(v195.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v264, v195.__r_.__value_.__l.__data_, v195.__r_.__value_.__l.__size_);
  else
    v264 = v195;
  v41 = SHIBYTE(v188.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v188.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v257, v188.__r_.__value_.__l.__data_, v188.__r_.__value_.__l.__size_);
  else
    v257 = v188;
  v258 = v78;
  v256 = off_24C335AF8;
  v259 = v77;
  v251 = (uint64_t (**)())off_24C335D90;
  v71 = SHIBYTE(v183.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v183.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v252, v183.__r_.__value_.__l.__data_, v183.__r_.__value_.__l.__size_);
  else
    v252 = v183;
  v251 = off_24C335B18;
  v254 = v185;
  v253 = v76;
  v255 = v186;
  v246 = (uint64_t (**)())off_24C335D90;
  v69 = SHIBYTE(v178.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v178.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v247, v178.__r_.__value_.__l.__data_, v178.__r_.__value_.__l.__size_);
  else
    v247 = v178;
  v68 = v41;
  v246 = off_24C335B18;
  v249 = v180;
  v248 = v75;
  v250 = v181;
  v241 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v173.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v242, v173.__r_.__value_.__l.__data_, v173.__r_.__value_.__l.__size_);
  else
    v242 = v173;
  v243 = v174;
  v241 = &off_24C335AB8;
  v244 = v175;
  if (SHIBYTE(v176.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v245, v176.__r_.__value_.__l.__data_, v176.__r_.__value_.__l.__size_);
  else
    v245 = v176;
  v236 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v168.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v237, v168.__r_.__value_.__l.__data_, v168.__r_.__value_.__l.__size_);
  else
    v237 = v168;
  v238 = v169;
  v236 = &off_24C335AB8;
  v239 = v170;
  if (SHIBYTE(v171.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v240, v171.__r_.__value_.__l.__data_, v171.__r_.__value_.__l.__size_);
  else
    v240 = v171;
  v231 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v163.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v232, v163.__r_.__value_.__l.__data_, v163.__r_.__value_.__l.__size_);
  else
    v232 = v163;
  v233 = v164;
  v231 = &off_24C335AB8;
  v234 = v165;
  if (SHIBYTE(v166.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v235, v166.__r_.__value_.__l.__data_, v166.__r_.__value_.__l.__size_);
  else
    v235 = v166;
  v345 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v282.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v346, v282.__r_.__value_.__l.__data_, v282.__r_.__value_.__l.__size_);
  else
    v346 = v282;
  v347 = v283;
  v345 = &off_24C335A98;
  v348 = v284;
  v42 = v288;
  v43 = v286;
  v349[0] = &off_24C331510;
  v349[1] = v286;
  v349[2] = v286;
  if (v286)
    v44 = (void *)operator new[]();
  else
    v44 = 0;
  v349[3] = v44;
  v350 = 1;
  if (v42)
    memcpy(v44, v42, v43);
  else
    bzero(v44, v43);
  v341 = (uint64_t (**)())off_24C335D90;
  v45 = SHIBYTE(v278.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v278.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v342, v278.__r_.__value_.__l.__data_, v278.__r_.__value_.__l.__size_);
  else
    v342 = v278;
  v343 = v86;
  v341 = off_24C335AF8;
  v344 = v85;
  v337 = (uint64_t (**)())off_24C335D90;
  v67 = SHIBYTE(v274.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v274.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v338, v274.__r_.__value_.__l.__data_, v274.__r_.__value_.__l.__size_);
  else
    v338 = v274;
  v339 = v84;
  v337 = off_24C335AF8;
  v340 = v83;
  v333 = (uint64_t (**)())off_24C335D90;
  v66 = SHIBYTE(v270.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v270.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v334, v270.__r_.__value_.__l.__data_, v270.__r_.__value_.__l.__size_);
  else
    v334 = v270;
  v335 = v82;
  v333 = off_24C335AF8;
  v336 = v81;
  v329 = (uint64_t (**)())off_24C335D90;
  v65 = SHIBYTE(v266.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v266.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v330, v266.__r_.__value_.__l.__data_, v266.__r_.__value_.__l.__size_);
  else
    v330 = v266;
  v331 = v80;
  v329 = off_24C335AF8;
  v332 = v79;
  v324 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v261.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v325, v261.__r_.__value_.__l.__data_, v261.__r_.__value_.__l.__size_);
  else
    v325 = v261;
  v326 = v262;
  v324 = &off_24C335AB8;
  v327 = v263;
  v64 = v45;
  if (SHIBYTE(v264.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v328, v264.__r_.__value_.__l.__data_, v264.__r_.__value_.__l.__size_);
  else
    v328 = v264;
  v320 = (uint64_t (**)())off_24C335D90;
  v63 = SHIBYTE(v257.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v257.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v321, v257.__r_.__value_.__l.__data_, v257.__r_.__value_.__l.__size_);
  else
    v321 = v257;
  v322 = v78;
  v320 = off_24C335AF8;
  v323 = v77;
  v315 = (uint64_t (**)())off_24C335D90;
  v62 = SHIBYTE(v252.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v252.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v316, v252.__r_.__value_.__l.__data_, v252.__r_.__value_.__l.__size_);
  else
    v316 = v252;
  v315 = off_24C335B18;
  v318 = v254;
  v317 = v76;
  v319 = v255;
  v310 = (uint64_t (**)())off_24C335D90;
  v61 = SHIBYTE(v247.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v247.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v311, v247.__r_.__value_.__l.__data_, v247.__r_.__value_.__l.__size_);
  else
    v311 = v247;
  v310 = off_24C335B18;
  v313 = v249;
  v312 = v75;
  v314 = v250;
  v305 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v242.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v306, v242.__r_.__value_.__l.__data_, v242.__r_.__value_.__l.__size_);
  else
    v306 = v242;
  v307 = v243;
  v305 = &off_24C335AB8;
  v308 = v244;
  if (SHIBYTE(v245.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v309, v245.__r_.__value_.__l.__data_, v245.__r_.__value_.__l.__size_);
  else
    v309 = v245;
  v300 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v237.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v301, v237.__r_.__value_.__l.__data_, v237.__r_.__value_.__l.__size_);
  else
    v301 = v237;
  v302 = v238;
  v300 = &off_24C335AB8;
  v303 = v239;
  if (SHIBYTE(v240.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v304, v240.__r_.__value_.__l.__data_, v240.__r_.__value_.__l.__size_);
  else
    v304 = v240;
  v295 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v232.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v296, v232.__r_.__value_.__l.__data_, v232.__r_.__value_.__l.__size_);
  else
    v296 = v232;
  v297 = v233;
  v295 = &off_24C335AB8;
  v298 = v234;
  if (SHIBYTE(v235.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v299, v235.__r_.__value_.__l.__data_, v235.__r_.__value_.__l.__size_);
  else
    v299 = v235;
  v397 = (uint64_t (**)())off_24C335D90;
  v74 = SHIBYTE(v342.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v342.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v398, v342.__r_.__value_.__l.__data_, v342.__r_.__value_.__l.__size_);
  else
    v398 = v342;
  v399 = v86;
  v397 = off_24C335AF8;
  v400 = v85;
  v393 = (uint64_t (**)())off_24C335D90;
  v46 = SHIBYTE(v338.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v338.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v394, v338.__r_.__value_.__l.__data_, v338.__r_.__value_.__l.__size_);
  else
    v394 = v338;
  v395 = v84;
  v393 = off_24C335AF8;
  v396 = v83;
  v389 = (uint64_t (**)())off_24C335D90;
  v47 = SHIBYTE(v334.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v334.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v390, v334.__r_.__value_.__l.__data_, v334.__r_.__value_.__l.__size_);
  else
    v390 = v334;
  v391 = v82;
  v389 = off_24C335AF8;
  v392 = v81;
  v385 = (uint64_t (**)())off_24C335D90;
  v48 = SHIBYTE(v330.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v330.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v386, v330.__r_.__value_.__l.__data_, v330.__r_.__value_.__l.__size_);
  else
    v386 = v330;
  v387 = v80;
  v385 = off_24C335AF8;
  v388 = v79;
  v380 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v325.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v381, v325.__r_.__value_.__l.__data_, v325.__r_.__value_.__l.__size_);
  else
    v381 = v325;
  v382 = v326;
  v380 = &off_24C335AB8;
  v383 = v327;
  v87 = v46;
  if (SHIBYTE(v328.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v384, v328.__r_.__value_.__l.__data_, v328.__r_.__value_.__l.__size_);
  else
    v384 = v328;
  v376 = (uint64_t (**)())off_24C335D90;
  v49 = SHIBYTE(v321.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v321.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v377, v321.__r_.__value_.__l.__data_, v321.__r_.__value_.__l.__size_);
  else
    v377 = v321;
  v378 = v78;
  v376 = off_24C335AF8;
  v379 = v77;
  v371 = (uint64_t (**)())off_24C335D90;
  v50 = SHIBYTE(v316.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v316.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v372, v316.__r_.__value_.__l.__data_, v316.__r_.__value_.__l.__size_);
  else
    v372 = v316;
  v371 = off_24C335B18;
  v374 = v318;
  v373 = v76;
  v375 = v319;
  v366 = (uint64_t (**)())off_24C335D90;
  v51 = SHIBYTE(v311.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v311.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&__p, v311.__r_.__value_.__l.__data_, v311.__r_.__value_.__l.__size_);
  else
    __p = v311;
  v366 = off_24C335B18;
  v369 = v313;
  v368 = v75;
  v370 = v314;
  v361 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v306.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v362, v306.__r_.__value_.__l.__data_, v306.__r_.__value_.__l.__size_);
  else
    v362 = v306;
  v363 = v307;
  v361 = &off_24C335AB8;
  v364 = v308;
  if (SHIBYTE(v309.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v365, v309.__r_.__value_.__l.__data_, v309.__r_.__value_.__l.__size_);
  else
    v365 = v309;
  v356 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v301.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v357, v301.__r_.__value_.__l.__data_, v301.__r_.__value_.__l.__size_);
  else
    v357 = v301;
  v358 = v302;
  v356 = &off_24C335AB8;
  v359 = v303;
  if (SHIBYTE(v304.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v360, v304.__r_.__value_.__l.__data_, v304.__r_.__value_.__l.__size_);
  else
    v360 = v304;
  v351 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v296.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v352, v296.__r_.__value_.__l.__data_, v296.__r_.__value_.__l.__size_);
  else
    v352 = v296;
  v353 = v297;
  v351 = &off_24C335AB8;
  v354 = v298;
  if (SHIBYTE(v299.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v355, v299.__r_.__value_.__l.__data_, v299.__r_.__value_.__l.__size_);
  else
    v355 = v299;
  mediaplatform::DatabaseColumnTuple<28ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>>::DatabaseColumnTuple(a1, (uint64_t)&v397, (uint64_t)&v393, (uint64_t)&v389, (uint64_t)&v385, (uint64_t)&v380, (uint64_t)&v376, (uint64_t)&v371, (uint64_t)&v366, (uint64_t)&v361, (uint64_t)&v356, (uint64_t)&v351);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v351);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v356);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v361);
  v366 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v371 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v372.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v372.__r_.__value_.__l.__data_);
  v376 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v377.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v377.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v380);
  v385 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v386.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v386.__r_.__value_.__l.__data_);
  v389 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v390.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v390.__r_.__value_.__l.__data_);
  v393 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v394.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v394.__r_.__value_.__l.__data_);
  v397 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v398.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v398.__r_.__value_.__l.__data_);
  *(_QWORD *)(a1 + 592) = off_24C335D90;
  if (SHIBYTE(v346.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external((std::string *)(a1 + 600), v346.__r_.__value_.__l.__data_, v346.__r_.__value_.__l.__size_);
  else
    *(std::string *)(a1 + 600) = v346;
  *(_DWORD *)(a1 + 624) = v347;
  *(_QWORD *)(a1 + 592) = &off_24C335A98;
  *(_BYTE *)(a1 + 628) = v348;
  mediaplatform::Data::Data((mediaplatform::Data *)(a1 + 632), (const mediaplatform::Data *)v349);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v295);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v300);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v305);
  v310 = (uint64_t (**)())off_24C335D90;
  if (v51 < 0)
    operator delete(v311.__r_.__value_.__l.__data_);
  v315 = (uint64_t (**)())off_24C335D90;
  if (v50 < 0)
    operator delete(v316.__r_.__value_.__l.__data_);
  v320 = (uint64_t (**)())off_24C335D90;
  if (v49 < 0)
    operator delete(v321.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v324);
  v329 = (uint64_t (**)())off_24C335D90;
  if (v48 < 0)
    operator delete(v330.__r_.__value_.__l.__data_);
  v333 = (uint64_t (**)())off_24C335D90;
  if (v47 < 0)
    operator delete(v334.__r_.__value_.__l.__data_);
  v337 = (uint64_t (**)())off_24C335D90;
  if (v87 < 0)
    operator delete(v338.__r_.__value_.__l.__data_);
  v341 = (uint64_t (**)())off_24C335D90;
  if (v74 < 0)
    operator delete(v342.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<mediaplatform::Data>::~DatabaseColumn((uint64_t)&v345);
  *(_QWORD *)(a1 + 672) = off_24C335D90;
  v52 = (std::string *)(a1 + 680);
  v53 = SHIBYTE(v291.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v291.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v52, v291.__r_.__value_.__l.__data_, v291.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v52->__r_.__value_.__l.__data_ = *(_OWORD *)&v291.__r_.__value_.__l.__data_;
    *(_QWORD *)(a1 + 696) = *((_QWORD *)&v291.__r_.__value_.__l + 2);
  }
  *(_DWORD *)(a1 + 704) = v73;
  *(_QWORD *)(a1 + 672) = off_24C335B18;
  *(_QWORD *)(a1 + 708) = v293;
  *(_DWORD *)(a1 + 716) = v294;
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v231);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v236);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v241);
  v246 = (uint64_t (**)())off_24C335D90;
  if (v61 < 0)
    operator delete(v247.__r_.__value_.__l.__data_);
  v251 = (uint64_t (**)())off_24C335D90;
  if (v62 < 0)
    operator delete(v252.__r_.__value_.__l.__data_);
  v256 = (uint64_t (**)())off_24C335D90;
  if (v63 < 0)
    operator delete(v257.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v260);
  v265 = (uint64_t (**)())off_24C335D90;
  if (v65 < 0)
    operator delete(v266.__r_.__value_.__l.__data_);
  v269 = (uint64_t (**)())off_24C335D90;
  if (v66 < 0)
    operator delete(v270.__r_.__value_.__l.__data_);
  v273 = (uint64_t (**)())off_24C335D90;
  if (v67 < 0)
    operator delete(v274.__r_.__value_.__l.__data_);
  v277 = (uint64_t (**)())off_24C335D90;
  if (v64 < 0)
    operator delete(v278.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<mediaplatform::Data>::~DatabaseColumn((uint64_t)&v281);
  if (v53 < 0)
    operator delete(v291.__r_.__value_.__l.__data_);
  *(_QWORD *)(a1 + 720) = off_24C335D90;
  if (SHIBYTE(v227.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external((std::string *)(a1 + 728), v227.__r_.__value_.__l.__data_, v227.__r_.__value_.__l.__size_);
  else
    *(std::string *)(a1 + 728) = v227;
  *(_DWORD *)(a1 + 752) = v228;
  *(_QWORD *)(a1 + 720) = &off_24C335AB8;
  *(_BYTE *)(a1 + 756) = v229;
  v54 = (std::string *)(a1 + 760);
  if (SHIBYTE(v230.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v54, v230.__r_.__value_.__l.__data_, v230.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v54->__r_.__value_.__l.__data_ = *(_OWORD *)&v230.__r_.__value_.__l.__data_;
    *(_QWORD *)(a1 + 776) = *((_QWORD *)&v230.__r_.__value_.__l + 2);
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v162);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v167);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v172);
  v177 = (uint64_t (**)())off_24C335D90;
  if (v69 < 0)
    operator delete(v178.__r_.__value_.__l.__data_);
  v182 = (uint64_t (**)())off_24C335D90;
  if (v71 < 0)
    operator delete(v183.__r_.__value_.__l.__data_);
  v187 = (uint64_t (**)())off_24C335D90;
  if (v68 < 0)
    operator delete(v188.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v191);
  v196 = (uint64_t (**)())off_24C335D90;
  if (v72 < 0)
    operator delete(v197.__r_.__value_.__l.__data_);
  v200 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v201.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v201.__r_.__value_.__l.__data_);
  v204 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v205.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v205.__r_.__value_.__l.__data_);
  if (SHIBYTE(v209.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v209.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<mediaplatform::Data>::~DatabaseColumn((uint64_t)&v212);
  if (SHIBYTE(v222.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v222.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v226);
  *(_QWORD *)(a1 + 784) = off_24C335D90;
  v55 = (std::string *)(a1 + 792);
  v56 = SHIBYTE(v158.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v158.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v55, v158.__r_.__value_.__l.__data_, v158.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v55->__r_.__value_.__l.__data_ = *(_OWORD *)&v158.__r_.__value_.__l.__data_;
    *(_QWORD *)(a1 + 808) = *((_QWORD *)&v158.__r_.__value_.__l + 2);
  }
  *(_DWORD *)(a1 + 816) = v159;
  *(_QWORD *)(a1 + 784) = off_24C335B18;
  *(_QWORD *)(a1 + 820) = v160;
  *(_DWORD *)(a1 + 828) = v161;
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v88);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v93);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v98);
  if (SHIBYTE(v104.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v104.__r_.__value_.__l.__data_);
  if (SHIBYTE(v109.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v109.__r_.__value_.__l.__data_);
  if (SHIBYTE(v114.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v114.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v117);
  if (SHIBYTE(v123.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v123.__r_.__value_.__l.__data_);
  if (SHIBYTE(v127.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v127.__r_.__value_.__l.__data_);
  if (SHIBYTE(v131.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v131.__r_.__value_.__l.__data_);
  if (SHIBYTE(v135.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v135.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<mediaplatform::Data>::~DatabaseColumn((uint64_t)&v138);
  if (SHIBYTE(v148.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v148.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v152);
  if (v56 < 0)
    operator delete(v158.__r_.__value_.__l.__data_);
  *(_QWORD *)(a1 + 832) = off_24C335D90;
  v57 = (std::string *)(a1 + 840);
  if (*(char *)(a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v57, *(const std::string::value_type **)(a2 + 8), *(_QWORD *)(a2 + 16));
  }
  else
  {
    v58 = *(_OWORD *)(a2 + 8);
    *(_QWORD *)(a1 + 856) = *(_QWORD *)(a2 + 24);
    *(_OWORD *)&v57->__r_.__value_.__l.__data_ = v58;
  }
  *(_DWORD *)(a1 + 864) = *(_DWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 832) = off_24C335B18;
  v59 = *(_QWORD *)(a2 + 36);
  *(_DWORD *)(a1 + 876) = *(_DWORD *)(a2 + 44);
  *(_QWORD *)(a1 + 868) = v59;
  return a1;
}

void sub_20A83C3C0(_Unwind_Exception *a1)
{
  uint64_t v1;

  mediaplatform::DatabaseColumnTuple<24ul,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>>::~DatabaseColumnTuple(v1);
  _Unwind_Resume(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<23ul,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>>::~DatabaseColumnTuple(uint64_t a1)
{
  *(_QWORD *)(a1 + 832) = off_24C335D90;
  if (*(char *)(a1 + 863) < 0)
    operator delete(*(void **)(a1 + 840));
  return mediaplatform::DatabaseColumnTuple<24ul,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>>::~DatabaseColumnTuple(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<25ul,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>>::~DatabaseColumnTuple(uint64_t a1)
{
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 720);
  *(_QWORD *)(a1 + 672) = off_24C335D90;
  if (*(char *)(a1 + 703) < 0)
    operator delete(*(void **)(a1 + 680));
  mediaplatform::DatabaseColumn<mediaplatform::Data>::~DatabaseColumn(a1 + 592);
  *(_QWORD *)(a1 + 544) = off_24C335D90;
  if (*(char *)(a1 + 575) < 0)
    operator delete(*(void **)(a1 + 552));
  *(_QWORD *)(a1 + 496) = off_24C335D90;
  if (*(char *)(a1 + 527) < 0)
    operator delete(*(void **)(a1 + 504));
  *(_QWORD *)(a1 + 448) = off_24C335D90;
  if (*(char *)(a1 + 479) < 0)
    operator delete(*(void **)(a1 + 456));
  return mediaplatform::DatabaseColumnTuple<31ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>>::~DatabaseColumnTuple(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<26ul,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>>::~DatabaseColumnTuple(uint64_t a1)
{
  *(_QWORD *)(a1 + 672) = off_24C335D90;
  if (*(char *)(a1 + 703) < 0)
    operator delete(*(void **)(a1 + 680));
  mediaplatform::DatabaseColumn<mediaplatform::Data>::~DatabaseColumn(a1 + 592);
  *(_QWORD *)(a1 + 544) = off_24C335D90;
  if (*(char *)(a1 + 575) < 0)
    operator delete(*(void **)(a1 + 552));
  *(_QWORD *)(a1 + 496) = off_24C335D90;
  if (*(char *)(a1 + 527) < 0)
    operator delete(*(void **)(a1 + 504));
  *(_QWORD *)(a1 + 448) = off_24C335D90;
  if (*(char *)(a1 + 479) < 0)
    operator delete(*(void **)(a1 + 456));
  return mediaplatform::DatabaseColumnTuple<31ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>>::~DatabaseColumnTuple(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<27ul,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>>::~DatabaseColumnTuple(uint64_t a1)
{
  mediaplatform::DatabaseColumn<mediaplatform::Data>::~DatabaseColumn(a1 + 592);
  *(_QWORD *)(a1 + 544) = off_24C335D90;
  if (*(char *)(a1 + 575) < 0)
    operator delete(*(void **)(a1 + 552));
  *(_QWORD *)(a1 + 496) = off_24C335D90;
  if (*(char *)(a1 + 527) < 0)
    operator delete(*(void **)(a1 + 504));
  *(_QWORD *)(a1 + 448) = off_24C335D90;
  if (*(char *)(a1 + 479) < 0)
    operator delete(*(void **)(a1 + 456));
  return mediaplatform::DatabaseColumnTuple<31ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>>::~DatabaseColumnTuple(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<28ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>>::DatabaseColumnTuple(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  int v20;
  uint64_t v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  std::string *v27;
  std::string *v28;
  std::string *v29;
  std::string *v30;
  int v31;
  std::string *v32;
  int v33;
  std::string *v34;
  int v35;
  std::string *v36;
  std::string *v37;
  int v38;
  std::string *v39;
  int v40;
  std::string *v41;
  int v42;
  std::string *v43;
  __int128 v44;
  int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  int v52;
  uint64_t v53;
  int v54;
  int v55;
  uint64_t v56;
  int v57;
  int v58;
  int v59;
  uint64_t (**v60)();
  std::string v61;
  int v62;
  char v63;
  std::string v64;
  uint64_t (**v65)();
  std::string v66;
  int v67;
  char v68;
  std::string v69;
  uint64_t (**v70)();
  std::string v71;
  int v72;
  char v73;
  std::string v74;
  uint64_t (**v75)();
  std::string __p;
  int v77;
  uint64_t v78;
  int v79;
  uint64_t (**v80)();
  std::string v81;
  int v82;
  uint64_t v83;
  int v84;
  uint64_t (**v85)();
  std::string v86;
  int v87;
  uint64_t v88;
  uint64_t (**v89)();
  std::string v90;
  int v91;
  char v92;
  std::string v93;
  uint64_t (**v94)();
  std::string v95;
  int v96;
  uint64_t v97;
  uint64_t (**v98)();
  std::string __s;
  int v100;
  uint64_t v101;
  uint64_t (**v102)();
  std::string v103;
  int v104;
  uint64_t v105;
  uint64_t (**v106)();
  std::string v107;
  int v108;
  char v109;
  std::string v110;
  uint64_t (**v111)();
  std::string v112;
  int v113;
  char v114;
  std::string v115;
  uint64_t (**v116)();
  std::string v117;
  int v118;
  char v119;
  std::string v120;
  uint64_t (**v121)();
  std::string v122;
  int v123;
  uint64_t v124;
  int v125;
  uint64_t (**v126)();
  std::string v127;
  int v128;
  uint64_t v129;
  int v130;
  uint64_t (**v131)();
  std::string v132;
  int v133;
  uint64_t v134;
  uint64_t (**v135)();
  std::string v136;
  int v137;
  char v138;
  std::string v139;
  uint64_t (**v140)();
  std::string v141;
  int v142;
  uint64_t v143;
  uint64_t (**v144)();
  std::string v145;
  int v146;
  uint64_t v147;
  uint64_t (**v148)();
  std::string v149;
  int v150;
  char v151;
  std::string v152;
  uint64_t (**v153)();
  std::string v154;
  int v155;
  char v156;
  std::string v157;
  uint64_t (**v158)();
  std::string v159;
  int v160;
  char v161;
  std::string v162;
  uint64_t (**v163)();
  std::string v164;
  int v165;
  uint64_t v166;
  int v167;
  uint64_t (**v168)();
  std::string v169;
  int v170;
  uint64_t v171;
  int v172;
  uint64_t (**v173)();
  std::string v174;
  int v175;
  uint64_t v176;
  uint64_t (**v177)();
  std::string v178;
  int v179;
  char v180;
  std::string v181;
  uint64_t (**v182)();
  std::string v183;
  int v184;
  uint64_t v185;
  uint64_t (**v186)();
  std::string v187;
  int v188;
  char v189;
  std::string v190;
  uint64_t (**v191)();
  std::string v192;
  int v193;
  char v194;
  std::string v195;
  uint64_t (**v196)();
  std::string v197;
  int v198;
  char v199;
  std::string v200;
  uint64_t (**v201)();
  std::string v202;
  int v203;
  uint64_t v204;
  int v205;
  uint64_t (**v206)();
  std::string v207;
  int v208;
  uint64_t v209;
  int v210;
  uint64_t (**v211)();
  std::string v212;
  int v213;
  uint64_t v214;
  uint64_t (**v215)();
  std::string v216;
  int v217;
  char v218;
  std::string v219;
  uint64_t (**v220)();
  std::string v221;
  int v222;
  char v223;
  std::string v224;
  uint64_t (**v225)();
  std::string v226;
  int v227;
  char v228;
  std::string v229;
  uint64_t (**v230)();
  std::string v231;
  int v232;
  char v233;
  std::string v234;
  uint64_t (**v235)();
  std::string v236;
  int v237;
  uint64_t v238;
  int v239;
  uint64_t (**v240)();
  std::string v241;
  int v242;
  uint64_t v243;
  int v244;
  uint64_t (**v245)();
  std::string v246;
  int v247;
  uint64_t v248;
  uint64_t (**v249)();
  std::string v250;
  int v251;
  char v252;
  std::string v253;
  uint64_t (**v254)();
  std::string v255;
  int v256;
  char v257;
  std::string v258;
  uint64_t (**v259)();
  std::string v260;
  int v261;
  char v262;
  std::string v263;
  uint64_t (**v264)();
  std::string v265;
  int v266;
  uint64_t v267;
  int v268;
  uint64_t (**v269)();
  std::string v270;
  int v271;
  uint64_t v272;
  int v273;
  uint64_t (**v274)();
  std::string v275;
  int v276;
  char v277;
  std::string v278;
  uint64_t (**v279)();
  std::string v280;
  int v281;
  char v282;
  std::string v283;
  uint64_t (**v284)();
  std::string v285;
  int v286;
  char v287;
  std::string v288;
  uint64_t (**v289)();
  std::string v290;
  int v291;
  uint64_t v292;
  int v293;
  uint64_t (**v294)();
  std::string v295;
  int v296;
  char v297;
  std::string v298;
  uint64_t (**v299)();
  std::string v300;
  int v301;
  char v302;
  std::string v303;
  uint64_t (**v304)();
  std::string v305;
  int v306;
  char v307;
  std::string v308;
  uint64_t (**v309)();
  std::string v310;
  int v311;
  char v312;
  std::string v313;
  uint64_t (**v314)();
  std::string v315;
  int v316;
  char v317;
  std::string v318;
  uint64_t (**v319)();
  std::string v320;
  int v321;
  char v322;
  std::string v323;

  if (*(char *)(a3 + 31) < 0)
    std::string::__init_copy_ctor_external(&v103, *(const std::string::value_type **)(a3 + 8), *(_QWORD *)(a3 + 16));
  else
    v103 = *(std::string *)(a3 + 8);
  v104 = *(_DWORD *)(a3 + 32);
  v102 = off_24C335AF8;
  v105 = *(_QWORD *)(a3 + 36);
  if (*(char *)(a4 + 31) < 0)
    std::string::__init_copy_ctor_external(&__s, *(const std::string::value_type **)(a4 + 8), *(_QWORD *)(a4 + 16));
  else
    __s = *(std::string *)(a4 + 8);
  v20 = *(_DWORD *)(a4 + 32);
  v100 = v20;
  v98 = off_24C335AF8;
  v21 = *(_QWORD *)(a4 + 36);
  v101 = v21;
  if (*(char *)(a5 + 31) < 0)
    std::string::__init_copy_ctor_external(&v95, *(const std::string::value_type **)(a5 + 8), *(_QWORD *)(a5 + 16));
  else
    v95 = *(std::string *)(a5 + 8);
  v55 = *(_DWORD *)(a5 + 32);
  v96 = v55;
  v94 = off_24C335AF8;
  v53 = *(_QWORD *)(a5 + 36);
  v97 = v53;
  v89 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a6 + 31) < 0)
    std::string::__init_copy_ctor_external(&v90, *(const std::string::value_type **)(a6 + 8), *(_QWORD *)(a6 + 16));
  else
    v90 = *(std::string *)(a6 + 8);
  v91 = *(_DWORD *)(a6 + 32);
  v89 = &off_24C335AB8;
  v92 = *(_BYTE *)(a6 + 36);
  if (*(char *)(a6 + 63) < 0)
    std::string::__init_copy_ctor_external(&v93, *(const std::string::value_type **)(a6 + 40), *(_QWORD *)(a6 + 48));
  else
    v93 = *(std::string *)(a6 + 40);
  if (*(char *)(a7 + 31) < 0)
    std::string::__init_copy_ctor_external(&v86, *(const std::string::value_type **)(a7 + 8), *(_QWORD *)(a7 + 16));
  else
    v86 = *(std::string *)(a7 + 8);
  v57 = *(_DWORD *)(a7 + 32);
  v87 = v57;
  v85 = off_24C335AF8;
  v56 = *(_QWORD *)(a7 + 36);
  v88 = v56;
  if (*(char *)(a8 + 31) < 0)
    std::string::__init_copy_ctor_external(&v81, *(const std::string::value_type **)(a8 + 8), *(_QWORD *)(a8 + 16));
  else
    v81 = *(std::string *)(a8 + 8);
  v22 = *(_DWORD *)(a8 + 32);
  v80 = off_24C335B18;
  v83 = *(_QWORD *)(a8 + 36);
  v23 = *(_DWORD *)(a8 + 44);
  v58 = v22;
  v82 = v22;
  v84 = v23;
  if (*(char *)(a9 + 31) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(a9 + 8), *(_QWORD *)(a9 + 16));
  else
    __p = *(std::string *)(a9 + 8);
  v24 = *(_DWORD *)(a9 + 32);
  v75 = off_24C335B18;
  v78 = *(_QWORD *)(a9 + 36);
  v25 = *(_DWORD *)(a9 + 44);
  v59 = v24;
  v77 = v24;
  v79 = v25;
  v70 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a10 + 31) < 0)
    std::string::__init_copy_ctor_external(&v71, *(const std::string::value_type **)(a10 + 8), *(_QWORD *)(a10 + 16));
  else
    v71 = *(std::string *)(a10 + 8);
  v72 = *(_DWORD *)(a10 + 32);
  v70 = &off_24C335AB8;
  v73 = *(_BYTE *)(a10 + 36);
  if (*(char *)(a10 + 63) < 0)
    std::string::__init_copy_ctor_external(&v74, *(const std::string::value_type **)(a10 + 40), *(_QWORD *)(a10 + 48));
  else
    v74 = *(std::string *)(a10 + 40);
  v65 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a11 + 31) < 0)
    std::string::__init_copy_ctor_external(&v66, *(const std::string::value_type **)(a11 + 8), *(_QWORD *)(a11 + 16));
  else
    v66 = *(std::string *)(a11 + 8);
  v67 = *(_DWORD *)(a11 + 32);
  v65 = &off_24C335AB8;
  v68 = *(_BYTE *)(a11 + 36);
  if (*(char *)(a11 + 63) < 0)
    std::string::__init_copy_ctor_external(&v69, *(const std::string::value_type **)(a11 + 40), *(_QWORD *)(a11 + 48));
  else
    v69 = *(std::string *)(a11 + 40);
  v60 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a12 + 31) < 0)
    std::string::__init_copy_ctor_external(&v61, *(const std::string::value_type **)(a12 + 8), *(_QWORD *)(a12 + 16));
  else
    v61 = *(std::string *)(a12 + 8);
  v62 = *(_DWORD *)(a12 + 32);
  v60 = &off_24C335AB8;
  v63 = *(_BYTE *)(a12 + 36);
  if (*(char *)(a12 + 63) < 0)
    std::string::__init_copy_ctor_external(&v64, *(const std::string::value_type **)(a12 + 40), *(_QWORD *)(a12 + 48));
  else
    v64 = *(std::string *)(a12 + 40);
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v145, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
  else
    v145 = __s;
  v146 = v20;
  v144 = off_24C335AF8;
  v147 = v21;
  if (SHIBYTE(v95.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v141, v95.__r_.__value_.__l.__data_, v95.__r_.__value_.__l.__size_);
  else
    v141 = v95;
  v142 = v55;
  v140 = off_24C335AF8;
  v143 = v53;
  v135 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v90.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v136, v90.__r_.__value_.__l.__data_, v90.__r_.__value_.__l.__size_);
  else
    v136 = v90;
  v137 = v91;
  v135 = &off_24C335AB8;
  v138 = v92;
  if (SHIBYTE(v93.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v139, v93.__r_.__value_.__l.__data_, v93.__r_.__value_.__l.__size_);
  else
    v139 = v93;
  if (SHIBYTE(v86.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v132, v86.__r_.__value_.__l.__data_, v86.__r_.__value_.__l.__size_);
  else
    v132 = v86;
  v133 = v57;
  v131 = off_24C335AF8;
  v134 = v56;
  if (SHIBYTE(v81.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v127, v81.__r_.__value_.__l.__data_, v81.__r_.__value_.__l.__size_);
  else
    v127 = v81;
  v126 = off_24C335B18;
  v129 = v83;
  v128 = v58;
  v130 = v84;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v122, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  else
    v122 = __p;
  v121 = off_24C335B18;
  v124 = v78;
  v123 = v59;
  v125 = v79;
  v116 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v71.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v117, v71.__r_.__value_.__l.__data_, v71.__r_.__value_.__l.__size_);
  else
    v117 = v71;
  v118 = v72;
  v116 = &off_24C335AB8;
  v119 = v73;
  if (SHIBYTE(v74.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v120, v74.__r_.__value_.__l.__data_, v74.__r_.__value_.__l.__size_);
  else
    v120 = v74;
  v111 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v112, v66.__r_.__value_.__l.__data_, v66.__r_.__value_.__l.__size_);
  else
    v112 = v66;
  v113 = v67;
  v111 = &off_24C335AB8;
  v114 = v68;
  if (SHIBYTE(v69.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v115, v69.__r_.__value_.__l.__data_, v69.__r_.__value_.__l.__size_);
  else
    v115 = v69;
  v106 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v107, v61.__r_.__value_.__l.__data_, v61.__r_.__value_.__l.__size_);
  else
    v107 = v61;
  v108 = v62;
  v106 = &off_24C335AB8;
  v109 = v63;
  if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v110, v64.__r_.__value_.__l.__data_, v64.__r_.__value_.__l.__size_);
  else
    v110 = v64;
  if (SHIBYTE(v141.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v183, v141.__r_.__value_.__l.__data_, v141.__r_.__value_.__l.__size_);
  else
    v183 = v141;
  v184 = v55;
  v182 = off_24C335AF8;
  v185 = v53;
  v177 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v136.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v178, v136.__r_.__value_.__l.__data_, v136.__r_.__value_.__l.__size_);
  else
    v178 = v136;
  v179 = v137;
  v177 = &off_24C335AB8;
  v180 = v138;
  if (SHIBYTE(v139.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v181, v139.__r_.__value_.__l.__data_, v139.__r_.__value_.__l.__size_);
  else
    v181 = v139;
  if (SHIBYTE(v132.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v174, v132.__r_.__value_.__l.__data_, v132.__r_.__value_.__l.__size_);
  else
    v174 = v132;
  v175 = v57;
  v173 = off_24C335AF8;
  v176 = v56;
  if (SHIBYTE(v127.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v169, v127.__r_.__value_.__l.__data_, v127.__r_.__value_.__l.__size_);
  else
    v169 = v127;
  v168 = off_24C335B18;
  v171 = v129;
  v170 = v58;
  v172 = v130;
  if (SHIBYTE(v122.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v164, v122.__r_.__value_.__l.__data_, v122.__r_.__value_.__l.__size_);
  else
    v164 = v122;
  v163 = off_24C335B18;
  v166 = v124;
  v165 = v59;
  v167 = v125;
  v158 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v117.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v159, v117.__r_.__value_.__l.__data_, v117.__r_.__value_.__l.__size_);
  else
    v159 = v117;
  v160 = v118;
  v158 = &off_24C335AB8;
  v161 = v119;
  if (SHIBYTE(v120.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v162, v120.__r_.__value_.__l.__data_, v120.__r_.__value_.__l.__size_);
  else
    v162 = v120;
  v153 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v112.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v154, v112.__r_.__value_.__l.__data_, v112.__r_.__value_.__l.__size_);
  else
    v154 = v112;
  v155 = v113;
  v153 = &off_24C335AB8;
  v156 = v114;
  if (SHIBYTE(v115.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v157, v115.__r_.__value_.__l.__data_, v115.__r_.__value_.__l.__size_);
  else
    v157 = v115;
  v148 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v107.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v149, v107.__r_.__value_.__l.__data_, v107.__r_.__value_.__l.__size_);
  else
    v149 = v107;
  v150 = v108;
  v148 = &off_24C335AB8;
  v151 = v109;
  if (SHIBYTE(v110.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v152, v110.__r_.__value_.__l.__data_, v110.__r_.__value_.__l.__size_);
  else
    v152 = v110;
  v215 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v178.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v216, v178.__r_.__value_.__l.__data_, v178.__r_.__value_.__l.__size_);
  else
    v216 = v178;
  v217 = v179;
  v215 = &off_24C335AB8;
  v218 = v180;
  if (SHIBYTE(v181.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v219, v181.__r_.__value_.__l.__data_, v181.__r_.__value_.__l.__size_);
  else
    v219 = v181;
  v26 = SHIBYTE(v174.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v174.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v212, v174.__r_.__value_.__l.__data_, v174.__r_.__value_.__l.__size_);
  else
    v212 = v174;
  v213 = v57;
  v211 = off_24C335AF8;
  v214 = v56;
  v52 = SHIBYTE(v169.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v169.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v207, v169.__r_.__value_.__l.__data_, v169.__r_.__value_.__l.__size_);
  else
    v207 = v169;
  v206 = off_24C335B18;
  v209 = v129;
  v208 = v58;
  v210 = v130;
  v51 = SHIBYTE(v164.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v164.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v202, v164.__r_.__value_.__l.__data_, v164.__r_.__value_.__l.__size_);
  else
    v202 = v164;
  v201 = off_24C335B18;
  v204 = v124;
  v203 = v59;
  v205 = v125;
  v196 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v159.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v197, v159.__r_.__value_.__l.__data_, v159.__r_.__value_.__l.__size_);
  else
    v197 = v159;
  v198 = v160;
  v196 = &off_24C335AB8;
  v199 = v161;
  if (SHIBYTE(v162.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v200, v162.__r_.__value_.__l.__data_, v162.__r_.__value_.__l.__size_);
  else
    v200 = v162;
  v191 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v154.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v192, v154.__r_.__value_.__l.__data_, v154.__r_.__value_.__l.__size_);
  else
    v192 = v154;
  v193 = v155;
  v191 = &off_24C335AB8;
  v194 = v156;
  if (SHIBYTE(v157.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v195, v157.__r_.__value_.__l.__data_, v157.__r_.__value_.__l.__size_);
  else
    v195 = v157;
  v186 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v149.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v187, v149.__r_.__value_.__l.__data_, v149.__r_.__value_.__l.__size_);
  else
    v187 = v149;
  v188 = v150;
  v186 = &off_24C335AB8;
  v189 = v151;
  if (SHIBYTE(v152.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v190, v152.__r_.__value_.__l.__data_, v152.__r_.__value_.__l.__size_);
  else
    v190 = v152;
  v50 = SHIBYTE(v212.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v212.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v246, v212.__r_.__value_.__l.__data_, v212.__r_.__value_.__l.__size_);
  else
    v246 = v212;
  v247 = v57;
  v245 = off_24C335AF8;
  v248 = v56;
  v49 = SHIBYTE(v207.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v207.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v241, v207.__r_.__value_.__l.__data_, v207.__r_.__value_.__l.__size_);
  else
    v241 = v207;
  v240 = off_24C335B18;
  v243 = v129;
  v242 = v58;
  v244 = v130;
  v48 = SHIBYTE(v202.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v202.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v236, v202.__r_.__value_.__l.__data_, v202.__r_.__value_.__l.__size_);
  else
    v236 = v202;
  v235 = off_24C335B18;
  v238 = v124;
  v237 = v59;
  v239 = v125;
  v230 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v197.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v231, v197.__r_.__value_.__l.__data_, v197.__r_.__value_.__l.__size_);
  else
    v231 = v197;
  v232 = v198;
  v230 = &off_24C335AB8;
  v233 = v199;
  if (SHIBYTE(v200.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v234, v200.__r_.__value_.__l.__data_, v200.__r_.__value_.__l.__size_);
  else
    v234 = v200;
  v225 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v192.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v226, v192.__r_.__value_.__l.__data_, v192.__r_.__value_.__l.__size_);
  else
    v226 = v192;
  v227 = v193;
  v225 = &off_24C335AB8;
  v228 = v194;
  if (SHIBYTE(v195.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v229, v195.__r_.__value_.__l.__data_, v195.__r_.__value_.__l.__size_);
  else
    v229 = v195;
  v220 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v187.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v221, v187.__r_.__value_.__l.__data_, v187.__r_.__value_.__l.__size_);
  else
    v221 = v187;
  v222 = v188;
  v220 = &off_24C335AB8;
  v223 = v189;
  if (SHIBYTE(v190.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v224, v190.__r_.__value_.__l.__data_, v190.__r_.__value_.__l.__size_);
  else
    v224 = v190;
  v269 = (uint64_t (**)())off_24C335D90;
  v47 = SHIBYTE(v241.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v241.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v270, v241.__r_.__value_.__l.__data_, v241.__r_.__value_.__l.__size_);
  else
    v270 = v241;
  v269 = off_24C335B18;
  v272 = v129;
  v271 = v58;
  v273 = v130;
  v264 = (uint64_t (**)())off_24C335D90;
  v54 = SHIBYTE(v236.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v236.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v265, v236.__r_.__value_.__l.__data_, v236.__r_.__value_.__l.__size_);
  else
    v265 = v236;
  v264 = off_24C335B18;
  v267 = v124;
  v266 = v59;
  v268 = v125;
  v259 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v231.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v260, v231.__r_.__value_.__l.__data_, v231.__r_.__value_.__l.__size_);
  else
    v260 = v231;
  v261 = v232;
  v259 = &off_24C335AB8;
  v262 = v233;
  if (SHIBYTE(v234.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v263, v234.__r_.__value_.__l.__data_, v234.__r_.__value_.__l.__size_);
  else
    v263 = v234;
  v254 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v226.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v255, v226.__r_.__value_.__l.__data_, v226.__r_.__value_.__l.__size_);
  else
    v255 = v226;
  v256 = v227;
  v254 = &off_24C335AB8;
  v257 = v228;
  if (SHIBYTE(v229.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v258, v229.__r_.__value_.__l.__data_, v229.__r_.__value_.__l.__size_);
  else
    v258 = v229;
  v249 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v221.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v250, v221.__r_.__value_.__l.__data_, v221.__r_.__value_.__l.__size_);
  else
    v250 = v221;
  v251 = v222;
  v249 = &off_24C335AB8;
  v252 = v223;
  if (SHIBYTE(v224.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v253, v224.__r_.__value_.__l.__data_, v224.__r_.__value_.__l.__size_);
  else
    v253 = v224;
  v289 = (uint64_t (**)())off_24C335D90;
  v46 = SHIBYTE(v265.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v265.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v290, v265.__r_.__value_.__l.__data_, v265.__r_.__value_.__l.__size_);
  else
    v290 = v265;
  v291 = v59;
  v289 = off_24C335B18;
  v292 = v124;
  v293 = v125;
  v284 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v260.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v285, v260.__r_.__value_.__l.__data_, v260.__r_.__value_.__l.__size_);
  else
    v285 = v260;
  v286 = v261;
  v284 = &off_24C335AB8;
  v287 = v262;
  if (SHIBYTE(v263.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v288, v263.__r_.__value_.__l.__data_, v263.__r_.__value_.__l.__size_);
  else
    v288 = v263;
  v279 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v255.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v280, v255.__r_.__value_.__l.__data_, v255.__r_.__value_.__l.__size_);
  else
    v280 = v255;
  v281 = v256;
  v279 = &off_24C335AB8;
  v282 = v257;
  if (SHIBYTE(v258.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v283, v258.__r_.__value_.__l.__data_, v258.__r_.__value_.__l.__size_);
  else
    v283 = v258;
  v274 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v250.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v275, v250.__r_.__value_.__l.__data_, v250.__r_.__value_.__l.__size_);
  else
    v275 = v250;
  v276 = v251;
  v274 = &off_24C335AB8;
  v277 = v252;
  if (SHIBYTE(v253.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v278, v253.__r_.__value_.__l.__data_, v253.__r_.__value_.__l.__size_);
  else
    v278 = v253;
  v304 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v285.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v305, v285.__r_.__value_.__l.__data_, v285.__r_.__value_.__l.__size_);
  else
    v305 = v285;
  v306 = v286;
  v304 = &off_24C335AB8;
  v307 = v287;
  if (SHIBYTE(v288.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v308, v288.__r_.__value_.__l.__data_, v288.__r_.__value_.__l.__size_);
  else
    v308 = v288;
  v299 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v280.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v300, v280.__r_.__value_.__l.__data_, v280.__r_.__value_.__l.__size_);
  else
    v300 = v280;
  v301 = v281;
  v299 = &off_24C335AB8;
  v302 = v282;
  if (SHIBYTE(v283.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v303, v283.__r_.__value_.__l.__data_, v283.__r_.__value_.__l.__size_);
  else
    v303 = v283;
  v294 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v275.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v295, v275.__r_.__value_.__l.__data_, v275.__r_.__value_.__l.__size_);
  else
    v295 = v275;
  v296 = v276;
  v294 = &off_24C335AB8;
  v297 = v277;
  if (SHIBYTE(v278.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v298, v278.__r_.__value_.__l.__data_, v278.__r_.__value_.__l.__size_);
  else
    v298 = v278;
  v314 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v300.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v315, v300.__r_.__value_.__l.__data_, v300.__r_.__value_.__l.__size_);
  else
    v315 = v300;
  v316 = v301;
  v314 = &off_24C335AB8;
  v317 = v302;
  if (SHIBYTE(v303.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v318, v303.__r_.__value_.__l.__data_, v303.__r_.__value_.__l.__size_);
  else
    v318 = v303;
  v309 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v295.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v310, v295.__r_.__value_.__l.__data_, v295.__r_.__value_.__l.__size_);
  else
    v310 = v295;
  v311 = v296;
  v309 = &off_24C335AB8;
  v312 = v297;
  if (SHIBYTE(v298.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v313, v298.__r_.__value_.__l.__data_, v298.__r_.__value_.__l.__size_);
  else
    v313 = v298;
  v319 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v310.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v320, v310.__r_.__value_.__l.__data_, v310.__r_.__value_.__l.__size_);
  else
    v320 = v310;
  v321 = v311;
  v319 = &off_24C335AB8;
  v322 = v312;
  if (SHIBYTE(v313.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v323, v313.__r_.__value_.__l.__data_, v313.__r_.__value_.__l.__size_);
  else
    v323 = v313;
  *(_QWORD *)a1 = off_24C335D90;
  if (SHIBYTE(v320.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external((std::string *)(a1 + 8), v320.__r_.__value_.__l.__data_, v320.__r_.__value_.__l.__size_);
  else
    *(std::string *)(a1 + 8) = v320;
  *(_DWORD *)(a1 + 32) = v321;
  *(_QWORD *)a1 = &off_24C335AB8;
  *(_BYTE *)(a1 + 36) = v322;
  v27 = (std::string *)(a1 + 40);
  if (SHIBYTE(v323.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v27, v323.__r_.__value_.__l.__data_, v323.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v27->__r_.__value_.__l.__data_ = *(_OWORD *)&v323.__r_.__value_.__l.__data_;
    *(_QWORD *)(a1 + 56) = *((_QWORD *)&v323.__r_.__value_.__l + 2);
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v319);
  *(_QWORD *)(a1 + 64) = off_24C335D90;
  if (SHIBYTE(v315.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external((std::string *)(a1 + 72), v315.__r_.__value_.__l.__data_, v315.__r_.__value_.__l.__size_);
  else
    *(std::string *)(a1 + 72) = v315;
  *(_DWORD *)(a1 + 96) = v316;
  *(_QWORD *)(a1 + 64) = &off_24C335AB8;
  *(_BYTE *)(a1 + 100) = v317;
  v28 = (std::string *)(a1 + 104);
  if (SHIBYTE(v318.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v28, v318.__r_.__value_.__l.__data_, v318.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v28->__r_.__value_.__l.__data_ = *(_OWORD *)&v318.__r_.__value_.__l.__data_;
    *(_QWORD *)(a1 + 120) = *((_QWORD *)&v318.__r_.__value_.__l + 2);
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v309);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v314);
  *(_QWORD *)(a1 + 128) = off_24C335D90;
  if (SHIBYTE(v305.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external((std::string *)(a1 + 136), v305.__r_.__value_.__l.__data_, v305.__r_.__value_.__l.__size_);
  else
    *(std::string *)(a1 + 136) = v305;
  *(_DWORD *)(a1 + 160) = v306;
  *(_QWORD *)(a1 + 128) = &off_24C335AB8;
  *(_BYTE *)(a1 + 164) = v307;
  v29 = (std::string *)(a1 + 168);
  if (SHIBYTE(v308.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v29, v308.__r_.__value_.__l.__data_, v308.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v29->__r_.__value_.__l.__data_ = *(_OWORD *)&v308.__r_.__value_.__l.__data_;
    *(_QWORD *)(a1 + 184) = *((_QWORD *)&v308.__r_.__value_.__l + 2);
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v294);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v299);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v304);
  *(_QWORD *)(a1 + 192) = off_24C335D90;
  v30 = (std::string *)(a1 + 200);
  v31 = SHIBYTE(v290.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v290.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v30, v290.__r_.__value_.__l.__data_, v290.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v30->__r_.__value_.__l.__data_ = *(_OWORD *)&v290.__r_.__value_.__l.__data_;
    *(_QWORD *)(a1 + 216) = *((_QWORD *)&v290.__r_.__value_.__l + 2);
  }
  *(_DWORD *)(a1 + 224) = v59;
  *(_QWORD *)(a1 + 192) = off_24C335B18;
  *(_QWORD *)(a1 + 228) = v292;
  *(_DWORD *)(a1 + 236) = v293;
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v274);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v279);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v284);
  v289 = (uint64_t (**)())off_24C335D90;
  if (v31 < 0)
    operator delete(v290.__r_.__value_.__l.__data_);
  *(_QWORD *)(a1 + 240) = off_24C335D90;
  v32 = (std::string *)(a1 + 248);
  v33 = SHIBYTE(v270.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v270.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v32, v270.__r_.__value_.__l.__data_, v270.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v32->__r_.__value_.__l.__data_ = *(_OWORD *)&v270.__r_.__value_.__l.__data_;
    *(_QWORD *)(a1 + 264) = *((_QWORD *)&v270.__r_.__value_.__l + 2);
  }
  *(_QWORD *)(a1 + 240) = off_24C335B18;
  *(_DWORD *)(a1 + 272) = v58;
  *(_QWORD *)(a1 + 276) = v272;
  *(_DWORD *)(a1 + 284) = v273;
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v249);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v254);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v259);
  v264 = (uint64_t (**)())off_24C335D90;
  if (v46 < 0)
    operator delete(v265.__r_.__value_.__l.__data_);
  v269 = (uint64_t (**)())off_24C335D90;
  if (v33 < 0)
    operator delete(v270.__r_.__value_.__l.__data_);
  *(_QWORD *)(a1 + 288) = off_24C335D90;
  v34 = (std::string *)(a1 + 296);
  v35 = SHIBYTE(v246.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v246.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v34, v246.__r_.__value_.__l.__data_, v246.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v34->__r_.__value_.__l.__data_ = *(_OWORD *)&v246.__r_.__value_.__l.__data_;
    *(_QWORD *)(a1 + 312) = *((_QWORD *)&v246.__r_.__value_.__l + 2);
  }
  *(_DWORD *)(a1 + 320) = v57;
  *(_QWORD *)(a1 + 288) = off_24C335AF8;
  *(_QWORD *)(a1 + 324) = v56;
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v220);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v225);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v230);
  v235 = (uint64_t (**)())off_24C335D90;
  if (v54 < 0)
    operator delete(v236.__r_.__value_.__l.__data_);
  v240 = (uint64_t (**)())off_24C335D90;
  if (v47 < 0)
    operator delete(v241.__r_.__value_.__l.__data_);
  v245 = (uint64_t (**)())off_24C335D90;
  if (v35 < 0)
    operator delete(v246.__r_.__value_.__l.__data_);
  *(_QWORD *)(a1 + 336) = off_24C335D90;
  if (SHIBYTE(v216.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external((std::string *)(a1 + 344), v216.__r_.__value_.__l.__data_, v216.__r_.__value_.__l.__size_);
  else
    *(std::string *)(a1 + 344) = v216;
  *(_DWORD *)(a1 + 368) = v217;
  *(_QWORD *)(a1 + 336) = &off_24C335AB8;
  *(_BYTE *)(a1 + 372) = v218;
  v36 = (std::string *)(a1 + 376);
  if (SHIBYTE(v219.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v36, v219.__r_.__value_.__l.__data_, v219.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v36->__r_.__value_.__l.__data_ = *(_OWORD *)&v219.__r_.__value_.__l.__data_;
    *(_QWORD *)(a1 + 392) = *((_QWORD *)&v219.__r_.__value_.__l + 2);
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v186);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v191);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v196);
  if (v48 < 0)
    operator delete(v202.__r_.__value_.__l.__data_);
  if (v49 < 0)
    operator delete(v207.__r_.__value_.__l.__data_);
  if (v50 < 0)
    operator delete(v212.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v215);
  *(_QWORD *)(a1 + 400) = off_24C335D90;
  v37 = (std::string *)(a1 + 408);
  v38 = SHIBYTE(v183.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v183.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v37, v183.__r_.__value_.__l.__data_, v183.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v37->__r_.__value_.__l.__data_ = *(_OWORD *)&v183.__r_.__value_.__l.__data_;
    *(_QWORD *)(a1 + 424) = *((_QWORD *)&v183.__r_.__value_.__l + 2);
  }
  *(_DWORD *)(a1 + 432) = v184;
  *(_QWORD *)(a1 + 400) = off_24C335AF8;
  *(_QWORD *)(a1 + 436) = v185;
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v148);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v153);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v158);
  v163 = (uint64_t (**)())off_24C335D90;
  if (v51 < 0)
    operator delete(v164.__r_.__value_.__l.__data_);
  if (v52 < 0)
    operator delete(v169.__r_.__value_.__l.__data_);
  if (v26 < 0)
    operator delete(v174.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v177);
  if (v38 < 0)
    operator delete(v183.__r_.__value_.__l.__data_);
  *(_QWORD *)(a1 + 448) = off_24C335D90;
  v39 = (std::string *)(a1 + 456);
  v40 = SHIBYTE(v145.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v145.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v39, v145.__r_.__value_.__l.__data_, v145.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v39->__r_.__value_.__l.__data_ = *(_OWORD *)&v145.__r_.__value_.__l.__data_;
    *(_QWORD *)(a1 + 472) = *((_QWORD *)&v145.__r_.__value_.__l + 2);
  }
  *(_DWORD *)(a1 + 480) = v146;
  *(_QWORD *)(a1 + 448) = off_24C335AF8;
  *(_QWORD *)(a1 + 484) = v147;
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v106);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v111);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v116);
  if (SHIBYTE(v122.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v122.__r_.__value_.__l.__data_);
  if (SHIBYTE(v127.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v127.__r_.__value_.__l.__data_);
  if (SHIBYTE(v132.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v132.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v135);
  if (SHIBYTE(v141.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v141.__r_.__value_.__l.__data_);
    if ((v40 & 0x80000000) == 0)
      goto LABEL_332;
  }
  else if ((v40 & 0x80000000) == 0)
  {
    goto LABEL_332;
  }
  operator delete(v145.__r_.__value_.__l.__data_);
LABEL_332:
  *(_QWORD *)(a1 + 496) = off_24C335D90;
  v41 = (std::string *)(a1 + 504);
  v42 = SHIBYTE(v103.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v103.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v41, v103.__r_.__value_.__l.__data_, v103.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v41->__r_.__value_.__l.__data_ = *(_OWORD *)&v103.__r_.__value_.__l.__data_;
    *(_QWORD *)(a1 + 520) = *((_QWORD *)&v103.__r_.__value_.__l + 2);
  }
  *(_DWORD *)(a1 + 528) = v104;
  *(_QWORD *)(a1 + 496) = off_24C335AF8;
  *(_QWORD *)(a1 + 532) = v105;
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v60);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v65);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v70);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v81.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v81.__r_.__value_.__l.__data_);
  if (SHIBYTE(v86.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v86.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v89);
  if (SHIBYTE(v95.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v95.__r_.__value_.__l.__data_);
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__s.__r_.__value_.__l.__data_);
    if ((v42 & 0x80000000) == 0)
      goto LABEL_347;
  }
  else if ((v42 & 0x80000000) == 0)
  {
    goto LABEL_347;
  }
  operator delete(v103.__r_.__value_.__l.__data_);
LABEL_347:
  *(_QWORD *)(a1 + 544) = off_24C335D90;
  v43 = (std::string *)(a1 + 552);
  if (*(char *)(a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v43, *(const std::string::value_type **)(a2 + 8), *(_QWORD *)(a2 + 16));
  }
  else
  {
    v44 = *(_OWORD *)(a2 + 8);
    *(_QWORD *)(a1 + 568) = *(_QWORD *)(a2 + 24);
    *(_OWORD *)&v43->__r_.__value_.__l.__data_ = v44;
  }
  *(_DWORD *)(a1 + 576) = *(_DWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 544) = off_24C335AF8;
  *(_QWORD *)(a1 + 580) = *(_QWORD *)(a2 + 36);
  return a1;
}

void sub_20A83EFC4(_Unwind_Exception *a1)
{
  uint64_t v1;

  mediaplatform::DatabaseColumnTuple<29ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>>::~DatabaseColumnTuple(v1);
  _Unwind_Resume(a1);
}

void sub_20A83F3B8()
{
  unint64_t v0;

  STACK[0xC38] = v0;
  if (SLOBYTE(STACK[0xC57]) < 0)
    operator delete((void *)STACK[0xC40]);
  JUMPOUT(0x20A83F10CLL);
}

void sub_20A83F3D4()
{
  JUMPOUT(0x20A83F10CLL);
}

void sub_20A83F3DC()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 - 216) = v0;
  if (*(char *)(v1 - 185) < 0)
    operator delete(*(void **)(v1 - 208));
  JUMPOUT(0x20A83F114);
}

void sub_20A83F3F8()
{
  JUMPOUT(0x20A83F114);
}

void sub_20A83F400()
{
  STACK[0xB78] = (unint64_t)off_24C335D90;
  if (SLOBYTE(STACK[0xB97]) < 0)
    operator delete((void *)STACK[0xB80]);
  JUMPOUT(0x20A83F11CLL);
}

void sub_20A83F424()
{
  JUMPOUT(0x20A83F11CLL);
}

void sub_20A83F42C()
{
  STACK[0xBB8] = (unint64_t)off_24C335D90;
  if (SLOBYTE(STACK[0xBD7]) < 0)
    operator delete((void *)STACK[0xBC0]);
  JUMPOUT(0x20A83F124);
}

void sub_20A83F450()
{
  JUMPOUT(0x20A83F124);
}

void sub_20A83F458()
{
  STACK[0xBF8] = (unint64_t)off_24C335D90;
  if (SLOBYTE(STACK[0xC17]) < 0)
    operator delete((void *)STACK[0xC00]);
  JUMPOUT(0x20A83F12CLL);
}

void sub_20A83F47C()
{
  JUMPOUT(0x20A83F12CLL);
}

void sub_20A83F484()
{
  STACK[0xA88] = (unint64_t)off_24C335D90;
  if (SLOBYTE(STACK[0xAA7]) < 0)
    operator delete((void *)STACK[0xA90]);
  JUMPOUT(0x20A83F134);
}

void sub_20A83F4A8()
{
  JUMPOUT(0x20A83F134);
}

void sub_20A83F4B0()
{
  unint64_t v0;

  STACK[0xAC8] = v0;
  if (SLOBYTE(STACK[0xAE7]) < 0)
    operator delete((void *)STACK[0xAD0]);
  JUMPOUT(0x20A83F13CLL);
}

void sub_20A83F4CC()
{
  JUMPOUT(0x20A83F13CLL);
}

void sub_20A83F4D4()
{
  unint64_t v0;

  STACK[0xB08] = v0;
  if (SLOBYTE(STACK[0xB27]) < 0)
    operator delete((void *)STACK[0xB10]);
  JUMPOUT(0x20A83F144);
}

void sub_20A83F4F0()
{
  JUMPOUT(0x20A83F144);
}

void sub_20A83F4F8()
{
  JUMPOUT(0x20A83F160);
}

void sub_20A83F500()
{
  unint64_t v0;

  STACK[0x968] = v0;
  if (SLOBYTE(STACK[0x987]) < 0)
    operator delete((void *)STACK[0x970]);
  JUMPOUT(0x20A83F168);
}

void sub_20A83F51C()
{
  JUMPOUT(0x20A83F168);
}

void sub_20A83F524()
{
  unint64_t v0;

  STACK[0x9A8] = v0;
  if (SLOBYTE(STACK[0x9C7]) < 0)
    operator delete((void *)STACK[0x9B0]);
  JUMPOUT(0x20A83F170);
}

void sub_20A83F540()
{
  JUMPOUT(0x20A83F170);
}

void sub_20A83F548()
{
  STACK[0x9E8] = (unint64_t)off_24C335D90;
  if (SLOBYTE(STACK[0xA07]) < 0)
    operator delete((void *)STACK[0x9F0]);
  JUMPOUT(0x20A83F178);
}

void sub_20A83F56C()
{
  JUMPOUT(0x20A83F178);
}

void sub_20A83F574()
{
  JUMPOUT(0x20A83F194);
}

void sub_20A83F57C()
{
  JUMPOUT(0x20A83F1B0);
}

void sub_20A83F584()
{
  STACK[0x818] = (unint64_t)off_24C335D90;
  if (SLOBYTE(STACK[0x837]) < 0)
    operator delete((void *)STACK[0x820]);
  JUMPOUT(0x20A83F1B8);
}

void sub_20A83F5A8()
{
  JUMPOUT(0x20A83F1B8);
}

void sub_20A83F5B0()
{
  STACK[0x858] = (unint64_t)off_24C335D90;
  if (SLOBYTE(STACK[0x877]) < 0)
    operator delete((void *)STACK[0x860]);
  JUMPOUT(0x20A83F1C0);
}

void sub_20A83F5D4()
{
  JUMPOUT(0x20A83F1C0);
}

void sub_20A83F5DC()
{
  STACK[0x898] = (unint64_t)off_24C335D90;
  if (SLOBYTE(STACK[0x8B7]) < 0)
    operator delete((void *)STACK[0x8A0]);
  JUMPOUT(0x20A83F1C8);
}

void sub_20A83F600()
{
  JUMPOUT(0x20A83F1C8);
}

void sub_20A83F608()
{
  JUMPOUT(0x20A83F1E4);
}

void sub_20A83F610()
{
  JUMPOUT(0x20A83F200);
}

void sub_20A83F618()
{
  JUMPOUT(0x20A83F210);
}

void sub_20A83F620()
{
  STACK[0x688] = (unint64_t)off_24C335D90;
  if (SLOBYTE(STACK[0x6A7]) < 0)
    operator delete((void *)STACK[0x690]);
  JUMPOUT(0x20A83F218);
}

void sub_20A83F644()
{
  JUMPOUT(0x20A83F218);
}

void sub_20A83F64C()
{
  STACK[0x6C8] = (unint64_t)off_24C335D90;
  if (SLOBYTE(STACK[0x6E7]) < 0)
    operator delete((void *)STACK[0x6D0]);
  JUMPOUT(0x20A83F220);
}

void sub_20A83F670()
{
  JUMPOUT(0x20A83F220);
}

void sub_20A83F678()
{
  STACK[0x708] = (unint64_t)off_24C335D90;
  if (SLOBYTE(STACK[0x727]) < 0)
    operator delete((void *)STACK[0x710]);
  JUMPOUT(0x20A83F228);
}

void sub_20A83F69C()
{
  JUMPOUT(0x20A83F228);
}

void sub_20A83F6A4()
{
  JUMPOUT(0x20A83F238);
}

void sub_20A83F6AC()
{
  JUMPOUT(0x20A83F248);
}

void sub_20A83F6B4()
{
  JUMPOUT(0x20A83F258);
}

void sub_20A83F6BC()
{
  unint64_t v0;

  STACK[0x7D8] = v0;
  if (SLOBYTE(STACK[0x7F7]) < 0)
    operator delete((void *)STACK[0x7E0]);
  JUMPOUT(0x20A83F260);
}

void sub_20A83F6D8()
{
  JUMPOUT(0x20A83F260);
}

void sub_20A83F6E0()
{
  unint64_t v0;

  STACK[0x4C8] = v0;
  if (SLOBYTE(STACK[0x4E7]) < 0)
    operator delete((void *)STACK[0x4D0]);
  JUMPOUT(0x20A83F268);
}

void sub_20A83F6FC()
{
  JUMPOUT(0x20A83F268);
}

void sub_20A83F704()
{
  unint64_t v0;

  STACK[0x508] = v0;
  if (SLOBYTE(STACK[0x527]) < 0)
    operator delete((void *)STACK[0x510]);
  JUMPOUT(0x20A83F270);
}

void sub_20A83F720()
{
  JUMPOUT(0x20A83F270);
}

void sub_20A83F728()
{
  unint64_t v0;

  STACK[0x548] = v0;
  if (SLOBYTE(STACK[0x567]) < 0)
    operator delete((void *)STACK[0x550]);
  JUMPOUT(0x20A83F278);
}

void sub_20A83F744()
{
  JUMPOUT(0x20A83F278);
}

void sub_20A83F74C()
{
  JUMPOUT(0x20A83F288);
}

void sub_20A83F754()
{
  JUMPOUT(0x20A83F298);
}

void sub_20A83F75C()
{
  JUMPOUT(0x20A83F2A8);
}

void sub_20A83F764()
{
  unint64_t v0;

  STACK[0x618] = v0;
  if (SLOBYTE(STACK[0x637]) < 0)
    operator delete((void *)STACK[0x620]);
  JUMPOUT(0x20A83F2B0);
}

void sub_20A83F780()
{
  JUMPOUT(0x20A83F2B0);
}

void sub_20A83F788()
{
  JUMPOUT(0x20A83F2C0);
}

void sub_20A83F790()
{
  STACK[0x2D8] = (unint64_t)off_24C335D90;
  if (SLOBYTE(STACK[0x2F7]) < 0)
    operator delete((void *)STACK[0x2E0]);
  JUMPOUT(0x20A83F2C8);
}

void sub_20A83F7B4()
{
  JUMPOUT(0x20A83F2C8);
}

void sub_20A83F7BC()
{
  STACK[0x318] = (unint64_t)off_24C335D90;
  if (SLOBYTE(STACK[0x337]) < 0)
    operator delete((void *)STACK[0x320]);
  JUMPOUT(0x20A83F2D0);
}

void sub_20A83F7E0()
{
  JUMPOUT(0x20A83F2D0);
}

void sub_20A83F7E8()
{
  STACK[0x358] = (unint64_t)off_24C335D90;
  if (SLOBYTE(STACK[0x377]) < 0)
    operator delete((void *)STACK[0x360]);
  JUMPOUT(0x20A83F2D8);
}

void sub_20A83F80C()
{
  JUMPOUT(0x20A83F2D8);
}

void sub_20A83F814()
{
  JUMPOUT(0x20A83F2E8);
}

void sub_20A83F81C()
{
  JUMPOUT(0x20A83F2F8);
}

void sub_20A83F824()
{
  JUMPOUT(0x20A83F308);
}

void sub_20A83F82C()
{
  unint64_t v0;

  STACK[0x428] = v0;
  if (SLOBYTE(STACK[0x447]) < 0)
    operator delete((void *)STACK[0x430]);
  JUMPOUT(0x20A83F310);
}

void sub_20A83F848()
{
  JUMPOUT(0x20A83F310);
}

void sub_20A83F850()
{
  JUMPOUT(0x20A83F320);
}

void sub_20A83F858()
{
  JUMPOUT(0x20A83F330);
}

void sub_20A83F860(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *__p,uint64_t a34,int a35,__int16 a36,char a37,char a38)
{
  if (a38 < 0)
    operator delete(__p);
  JUMPOUT(0x20A83F338);
}

void sub_20A83F87C()
{
  JUMPOUT(0x20A83F338);
}

void sub_20A83F884(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *__p,uint64_t a42,int a43,__int16 a44,char a45,char a46)
{
  if (a46 < 0)
    operator delete(__p);
  JUMPOUT(0x20A83F340);
}

void sub_20A83F8A0()
{
  JUMPOUT(0x20A83F340);
}

void sub_20A83F8A8(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,void *__p,uint64_t a50,int a51,__int16 a52,char a53,char a54)
{
  if (a54 < 0)
    operator delete(__p);
  JUMPOUT(0x20A83F348);
}

void sub_20A83F8C4()
{
  JUMPOUT(0x20A83F348);
}

void sub_20A83F8CC()
{
  JUMPOUT(0x20A83F358);
}

void sub_20A83F8D4()
{
  JUMPOUT(0x20A83F368);
}

void sub_20A83F8DC()
{
  JUMPOUT(0x20A83F378);
}

void sub_20A83F8E4()
{
  STACK[0x208] = (unint64_t)off_24C335D90;
  if (SLOBYTE(STACK[0x227]) < 0)
    operator delete((void *)STACK[0x210]);
  JUMPOUT(0x20A83F380);
}

void sub_20A83F908()
{
  JUMPOUT(0x20A83F380);
}

void sub_20A83F910()
{
  JUMPOUT(0x20A83F390);
}

void sub_20A83F918()
{
  JUMPOUT(0x20A83F3A0);
}

uint64_t mediaplatform::DatabaseColumnTuple<28ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>>::~DatabaseColumnTuple(uint64_t a1)
{
  *(_QWORD *)(a1 + 544) = off_24C335D90;
  if (*(char *)(a1 + 575) < 0)
    operator delete(*(void **)(a1 + 552));
  *(_QWORD *)(a1 + 496) = off_24C335D90;
  if (*(char *)(a1 + 527) < 0)
    operator delete(*(void **)(a1 + 504));
  *(_QWORD *)(a1 + 448) = off_24C335D90;
  if (*(char *)(a1 + 479) < 0)
    operator delete(*(void **)(a1 + 456));
  return mediaplatform::DatabaseColumnTuple<31ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>>::~DatabaseColumnTuple(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<29ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>>::~DatabaseColumnTuple(uint64_t a1)
{
  *(_QWORD *)(a1 + 496) = off_24C335D90;
  if (*(char *)(a1 + 527) < 0)
    operator delete(*(void **)(a1 + 504));
  *(_QWORD *)(a1 + 448) = off_24C335D90;
  if (*(char *)(a1 + 479) < 0)
    operator delete(*(void **)(a1 + 456));
  return mediaplatform::DatabaseColumnTuple<31ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>>::~DatabaseColumnTuple(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<30ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>>::~DatabaseColumnTuple(uint64_t a1)
{
  *(_QWORD *)(a1 + 448) = off_24C335D90;
  if (*(char *)(a1 + 479) < 0)
    operator delete(*(void **)(a1 + 456));
  return mediaplatform::DatabaseColumnTuple<31ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>>::~DatabaseColumnTuple(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<32ul,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>>::~DatabaseColumnTuple(uint64_t a1)
{
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 336);
  *(_QWORD *)(a1 + 288) = off_24C335D90;
  if (*(char *)(a1 + 319) < 0)
    operator delete(*(void **)(a1 + 296));
  *(_QWORD *)(a1 + 240) = off_24C335D90;
  if (*(char *)(a1 + 271) < 0)
    operator delete(*(void **)(a1 + 248));
  *(_QWORD *)(a1 + 192) = off_24C335D90;
  if (*(char *)(a1 + 223) < 0)
    operator delete(*(void **)(a1 + 200));
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 128);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 64);
  return mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<33ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>>::~DatabaseColumnTuple(uint64_t a1)
{
  *(_QWORD *)(a1 + 288) = off_24C335D90;
  if (*(char *)(a1 + 319) < 0)
    operator delete(*(void **)(a1 + 296));
  *(_QWORD *)(a1 + 240) = off_24C335D90;
  if (*(char *)(a1 + 271) < 0)
    operator delete(*(void **)(a1 + 248));
  *(_QWORD *)(a1 + 192) = off_24C335D90;
  if (*(char *)(a1 + 223) < 0)
    operator delete(*(void **)(a1 + 200));
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 128);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 64);
  return mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<34ul,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>>::~DatabaseColumnTuple(uint64_t a1)
{
  *(_QWORD *)(a1 + 240) = off_24C335D90;
  if (*(char *)(a1 + 271) < 0)
    operator delete(*(void **)(a1 + 248));
  *(_QWORD *)(a1 + 192) = off_24C335D90;
  if (*(char *)(a1 + 223) < 0)
    operator delete(*(void **)(a1 + 200));
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 128);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 64);
  return mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<35ul,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>>::~DatabaseColumnTuple(uint64_t a1)
{
  *(_QWORD *)(a1 + 192) = off_24C335D90;
  if (*(char *)(a1 + 223) < 0)
    operator delete(*(void **)(a1 + 200));
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 128);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 64);
  return mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<36ul,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>>::~DatabaseColumnTuple(uint64_t a1)
{
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 128);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 64);
  return mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1);
}

void mlcore::ItemVideoTable::persistentIDColumn(mlcore::ItemVideoTable *this@<X0>, uint64_t a2@<X8>)
{
  std::string *v4;

  *(_QWORD *)a2 = off_24C335D90;
  v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 2175) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 269), *((_QWORD *)this + 270));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 2152);
    *(_QWORD *)(a2 + 24) = *((_QWORD *)this + 271);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 544);
  *(_DWORD *)(a2 + 44) = *((_DWORD *)this + 547);
  *(_QWORD *)(a2 + 36) = *(_QWORD *)((char *)this + 2180);
  *(_QWORD *)a2 = off_24C336AC0;
}

void mlcore::ItemVideoTable::videoQualityColumn(mlcore::ItemVideoTable *this@<X0>, uint64_t a2@<X8>)
{
  std::string *v4;

  *(_QWORD *)a2 = off_24C335D90;
  v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 2223) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 275), *((_QWORD *)this + 276));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 2200);
    *(_QWORD *)(a2 + 24) = *((_QWORD *)this + 277);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 556);
  *(_QWORD *)(a2 + 36) = *(_QWORD *)((char *)this + 2228);
  *(_QWORD *)a2 = off_24C336AA0;
}

void mlcore::ItemVideoTable::isRentalColumn(mlcore::ItemVideoTable *this@<X0>, uint64_t a2@<X8>)
{
  std::string *v4;

  *(_QWORD *)a2 = off_24C335D90;
  v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 2271) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 281), *((_QWORD *)this + 282));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 2248);
    *(_QWORD *)(a2 + 24) = *((_QWORD *)this + 283);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 568);
  *(_QWORD *)(a2 + 36) = *(_QWORD *)((char *)this + 2276);
  *(_QWORD *)a2 = off_24C336AA0;
}

void mlcore::ItemVideoTable::hasChapterDataColumn(mlcore::ItemVideoTable *this@<X0>, uint64_t a2@<X8>)
{
  std::string *v4;

  *(_QWORD *)a2 = off_24C335D90;
  v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 2319) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 287), *((_QWORD *)this + 288));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 2296);
    *(_QWORD *)(a2 + 24) = *((_QWORD *)this + 289);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 580);
  *(_QWORD *)(a2 + 36) = *(_QWORD *)((char *)this + 2324);
  *(_QWORD *)a2 = off_24C336AA0;
}

void mlcore::ItemVideoTable::seasonNumberColumn(mlcore::ItemVideoTable *this@<X0>, uint64_t a2@<X8>)
{
  std::string *v4;

  *(_QWORD *)a2 = off_24C335D90;
  v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 2367) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 293), *((_QWORD *)this + 294));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 2344);
    *(_QWORD *)(a2 + 24) = *((_QWORD *)this + 295);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 592);
  *(_QWORD *)(a2 + 36) = *(_QWORD *)((char *)this + 2372);
  *(_QWORD *)a2 = off_24C336AA0;
}

void mlcore::ItemVideoTable::episodeIDColumn(mlcore::ItemVideoTable *this@<X0>, uint64_t a2@<X8>)
{
  std::string *v4;
  std::string *v5;

  *(_QWORD *)a2 = off_24C335D90;
  v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 2415) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 299), *((_QWORD *)this + 300));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 2392);
    *(_QWORD *)(a2 + 24) = *((_QWORD *)this + 301);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 604);
  *(_QWORD *)a2 = &off_24C335AB8;
  *(_BYTE *)(a2 + 36) = *((_BYTE *)this + 2420);
  v5 = (std::string *)(a2 + 40);
  if (*((char *)this + 2447) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)this + 303), *((_QWORD *)this + 304));
  }
  else
  {
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 2424);
    *(_QWORD *)(a2 + 56) = *((_QWORD *)this + 305);
  }
  *(_QWORD *)a2 = &off_24C336A60;
}

void sub_20A83FF14(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  uint64_t v3;

  *(_QWORD *)v1 = v3;
  if (*(char *)(v1 + 31) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

void mlcore::ItemVideoTable::networkNameColumn(mlcore::ItemVideoTable *this@<X0>, uint64_t a2@<X8>)
{
  std::string *v4;
  std::string *v5;

  *(_QWORD *)a2 = off_24C335D90;
  v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 2479) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 307), *((_QWORD *)this + 308));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 2456);
    *(_QWORD *)(a2 + 24) = *((_QWORD *)this + 309);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 620);
  *(_QWORD *)a2 = &off_24C335AB8;
  *(_BYTE *)(a2 + 36) = *((_BYTE *)this + 2484);
  v5 = (std::string *)(a2 + 40);
  if (*((char *)this + 2511) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)this + 311), *((_QWORD *)this + 312));
  }
  else
  {
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 2488);
    *(_QWORD *)(a2 + 56) = *((_QWORD *)this + 313);
  }
  *(_QWORD *)a2 = &off_24C336A60;
}

void sub_20A83FFF4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  uint64_t v3;

  *(_QWORD *)v1 = v3;
  if (*(char *)(v1 + 31) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

void mlcore::ItemVideoTable::extendedContentRatingColumn(mlcore::ItemVideoTable *this@<X0>, uint64_t a2@<X8>)
{
  std::string *v4;
  std::string *v5;

  *(_QWORD *)a2 = off_24C335D90;
  v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 2543) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 315), *((_QWORD *)this + 316));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 2520);
    *(_QWORD *)(a2 + 24) = *((_QWORD *)this + 317);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 636);
  *(_QWORD *)a2 = &off_24C335AB8;
  *(_BYTE *)(a2 + 36) = *((_BYTE *)this + 2548);
  v5 = (std::string *)(a2 + 40);
  if (*((char *)this + 2575) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)this + 319), *((_QWORD *)this + 320));
  }
  else
  {
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 2552);
    *(_QWORD *)(a2 + 56) = *((_QWORD *)this + 321);
  }
  *(_QWORD *)a2 = &off_24C336A60;
}

void sub_20A8400D4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  uint64_t v3;

  *(_QWORD *)v1 = v3;
  if (*(char *)(v1 + 31) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

void mlcore::ItemVideoTable::movieInfoColumn(mlcore::ItemVideoTable *this@<X0>, uint64_t a2@<X8>)
{
  std::string *v4;
  std::string *v5;

  *(_QWORD *)a2 = off_24C335D90;
  v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 2607) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 323), *((_QWORD *)this + 324));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 2584);
    *(_QWORD *)(a2 + 24) = *((_QWORD *)this + 325);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 652);
  *(_QWORD *)a2 = &off_24C335AB8;
  *(_BYTE *)(a2 + 36) = *((_BYTE *)this + 2612);
  v5 = (std::string *)(a2 + 40);
  if (*((char *)this + 2639) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)this + 327), *((_QWORD *)this + 328));
  }
  else
  {
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 2616);
    *(_QWORD *)(a2 + 56) = *((_QWORD *)this + 329);
  }
  *(_QWORD *)a2 = &off_24C336A60;
}

void sub_20A8401B4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  uint64_t v3;

  *(_QWORD *)v1 = v3;
  if (*(char *)(v1 + 31) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

void mlcore::ItemVideoTable::hasAlternateAudioColumn(mlcore::ItemVideoTable *this@<X0>, uint64_t a2@<X8>)
{
  std::string *v4;

  *(_QWORD *)a2 = off_24C335D90;
  v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 2671) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 331), *((_QWORD *)this + 332));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 2648);
    *(_QWORD *)(a2 + 24) = *((_QWORD *)this + 333);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 668);
  *(_QWORD *)(a2 + 36) = *(_QWORD *)((char *)this + 2676);
  *(_QWORD *)a2 = off_24C336AA0;
}

void mlcore::ItemVideoTable::hasSubtitlesColumn(mlcore::ItemVideoTable *this@<X0>, uint64_t a2@<X8>)
{
  std::string *v4;

  *(_QWORD *)a2 = off_24C335D90;
  v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 2719) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 337), *((_QWORD *)this + 338));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 2696);
    *(_QWORD *)(a2 + 24) = *((_QWORD *)this + 339);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 680);
  *(_QWORD *)(a2 + 36) = *(_QWORD *)((char *)this + 2724);
  *(_QWORD *)a2 = off_24C336AA0;
}

void mlcore::ItemVideoTable::audioLanguageColumn(mlcore::ItemVideoTable *this@<X0>, uint64_t a2@<X8>)
{
  std::string *v4;

  *(_QWORD *)a2 = off_24C335D90;
  v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 2767) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 343), *((_QWORD *)this + 344));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 2744);
    *(_QWORD *)(a2 + 24) = *((_QWORD *)this + 345);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 692);
  *(_QWORD *)(a2 + 36) = *(_QWORD *)((char *)this + 2772);
  *(_QWORD *)a2 = off_24C336AA0;
}

void mlcore::ItemVideoTable::audioTrackIndexColumn(mlcore::ItemVideoTable *this@<X0>, uint64_t a2@<X8>)
{
  std::string *v4;

  *(_QWORD *)a2 = off_24C335D90;
  v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 2815) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 349), *((_QWORD *)this + 350));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 2792);
    *(_QWORD *)(a2 + 24) = *((_QWORD *)this + 351);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 704);
  *(_QWORD *)(a2 + 36) = *(_QWORD *)((char *)this + 2820);
  *(_QWORD *)a2 = off_24C336AA0;
}

void mlcore::ItemVideoTable::audioTrackIDColumn(mlcore::ItemVideoTable *this@<X0>, uint64_t a2@<X8>)
{
  std::string *v4;

  *(_QWORD *)a2 = off_24C335D90;
  v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 2863) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 355), *((_QWORD *)this + 356));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 2840);
    *(_QWORD *)(a2 + 24) = *((_QWORD *)this + 357);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 716);
  *(_DWORD *)(a2 + 44) = *((_DWORD *)this + 719);
  *(_QWORD *)(a2 + 36) = *(_QWORD *)((char *)this + 2868);
  *(_QWORD *)a2 = off_24C336AC0;
}

void mlcore::ItemVideoTable::subtitleLanguageColumn(mlcore::ItemVideoTable *this@<X0>, uint64_t a2@<X8>)
{
  std::string *v4;

  *(_QWORD *)a2 = off_24C335D90;
  v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 2911) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 361), *((_QWORD *)this + 362));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 2888);
    *(_QWORD *)(a2 + 24) = *((_QWORD *)this + 363);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 728);
  *(_QWORD *)(a2 + 36) = *(_QWORD *)((char *)this + 2916);
  *(_QWORD *)a2 = off_24C336AA0;
}

void mlcore::ItemVideoTable::subtitleTrackIndexColumn(mlcore::ItemVideoTable *this@<X0>, uint64_t a2@<X8>)
{
  std::string *v4;

  *(_QWORD *)a2 = off_24C335D90;
  v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 2959) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 367), *((_QWORD *)this + 368));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 2936);
    *(_QWORD *)(a2 + 24) = *((_QWORD *)this + 369);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 740);
  *(_QWORD *)(a2 + 36) = *(_QWORD *)((char *)this + 2964);
  *(_QWORD *)a2 = off_24C336AA0;
}

void mlcore::ItemVideoTable::rentalDurationColumn(mlcore::ItemVideoTable *this@<X0>, uint64_t a2@<X8>)
{
  std::string *v4;

  *(_QWORD *)a2 = off_24C335D90;
  v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 3007) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 373), *((_QWORD *)this + 374));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 2984);
    *(_QWORD *)(a2 + 24) = *((_QWORD *)this + 375);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 752);
  *(_QWORD *)(a2 + 36) = *(_QWORD *)((char *)this + 3012);
  *(_QWORD *)a2 = off_24C336AA0;
}

void mlcore::ItemVideoTable::rentalPlaybackDurationColumn(mlcore::ItemVideoTable *this@<X0>, uint64_t a2@<X8>)
{
  std::string *v4;

  *(_QWORD *)a2 = off_24C335D90;
  v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 3055) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 379), *((_QWORD *)this + 380));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 3032);
    *(_QWORD *)(a2 + 24) = *((_QWORD *)this + 381);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 764);
  *(_QWORD *)(a2 + 36) = *(_QWORD *)((char *)this + 3060);
  *(_QWORD *)a2 = off_24C336AA0;
}

void mlcore::ItemVideoTable::rentalPlaybackDateStartedColumn(mlcore::ItemVideoTable *this@<X0>, uint64_t a2@<X8>)
{
  std::string *v4;

  *(_QWORD *)a2 = off_24C335D90;
  v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 3103) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 385), *((_QWORD *)this + 386));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 3080);
    *(_QWORD *)(a2 + 24) = *((_QWORD *)this + 387);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 776);
  *(_QWORD *)(a2 + 36) = *(_QWORD *)((char *)this + 3108);
  *(_QWORD *)a2 = off_24C336AA0;
}

void mlcore::ItemVideoTable::rentalDateStartedColumn(mlcore::ItemVideoTable *this@<X0>, uint64_t a2@<X8>)
{
  std::string *v4;

  *(_QWORD *)a2 = off_24C335D90;
  v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 3151) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 391), *((_QWORD *)this + 392));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 3128);
    *(_QWORD *)(a2 + 24) = *((_QWORD *)this + 393);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 788);
  *(_QWORD *)(a2 + 36) = *(_QWORD *)((char *)this + 3156);
  *(_QWORD *)a2 = off_24C336AA0;
}

void mlcore::ItemVideoTable::isDemoColumn(mlcore::ItemVideoTable *this@<X0>, uint64_t a2@<X8>)
{
  std::string *v4;

  *(_QWORD *)a2 = off_24C335D90;
  v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 3199) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 397), *((_QWORD *)this + 398));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 3176);
    *(_QWORD *)(a2 + 24) = *((_QWORD *)this + 399);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 800);
  *(_QWORD *)(a2 + 36) = *(_QWORD *)((char *)this + 3204);
  *(_QWORD *)a2 = off_24C336AA0;
}

void mlcore::ItemVideoTable::hasHLSColumn(mlcore::ItemVideoTable *this@<X0>, uint64_t a2@<X8>)
{
  std::string *v4;

  *(_QWORD *)a2 = off_24C335D90;
  v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 3247) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 403), *((_QWORD *)this + 404));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 3224);
    *(_QWORD *)(a2 + 24) = *((_QWORD *)this + 405);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 812);
  *(_QWORD *)(a2 + 36) = *(_QWORD *)((char *)this + 3252);
  *(_QWORD *)a2 = off_24C336AA0;
}

void mlcore::ItemVideoTable::audioTrackLocaleColumn(mlcore::ItemVideoTable *this@<X0>, uint64_t a2@<X8>)
{
  std::string *v4;
  std::string *v5;

  *(_QWORD *)a2 = off_24C335D90;
  v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 3295) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 409), *((_QWORD *)this + 410));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 3272);
    *(_QWORD *)(a2 + 24) = *((_QWORD *)this + 411);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 824);
  *(_QWORD *)a2 = &off_24C335AB8;
  *(_BYTE *)(a2 + 36) = *((_BYTE *)this + 3300);
  v5 = (std::string *)(a2 + 40);
  if (*((char *)this + 3327) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)this + 413), *((_QWORD *)this + 414));
  }
  else
  {
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 3304);
    *(_QWORD *)(a2 + 56) = *((_QWORD *)this + 415);
  }
  *(_QWORD *)a2 = &off_24C336A60;
}

void sub_20A8408E8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  uint64_t v3;

  *(_QWORD *)v1 = v3;
  if (*(char *)(v1 + 31) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

void mlcore::ItemVideoTable::showSortTypeColumn(mlcore::ItemVideoTable *this@<X0>, uint64_t a2@<X8>)
{
  std::string *v4;

  *(_QWORD *)a2 = off_24C335D90;
  v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 3359) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 417), *((_QWORD *)this + 418));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 3336);
    *(_QWORD *)(a2 + 24) = *((_QWORD *)this + 419);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 840);
  *(_DWORD *)(a2 + 44) = *((_DWORD *)this + 843);
  *(_QWORD *)(a2 + 36) = *(_QWORD *)((char *)this + 3364);
  *(_QWORD *)a2 = off_24C336AC0;
}

void mlcore::ItemVideoTable::episodeTypeColumn(mlcore::ItemVideoTable *this@<X0>, uint64_t a2@<X8>)
{
  std::string *v4;

  *(_QWORD *)a2 = off_24C335D90;
  v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 3407) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 423), *((_QWORD *)this + 424));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 3384);
    *(_QWORD *)(a2 + 24) = *((_QWORD *)this + 425);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 852);
  *(_DWORD *)(a2 + 44) = *((_DWORD *)this + 855);
  *(_QWORD *)(a2 + 36) = *(_QWORD *)((char *)this + 3412);
  *(_QWORD *)a2 = off_24C336AC0;
}

void mlcore::ItemVideoTable::episodeTypeDisplayNameColumn(mlcore::ItemVideoTable *this@<X0>, uint64_t a2@<X8>)
{
  std::string *v4;
  std::string *v5;

  *(_QWORD *)a2 = off_24C335D90;
  v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 3455) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 429), *((_QWORD *)this + 430));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 3432);
    *(_QWORD *)(a2 + 24) = *((_QWORD *)this + 431);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 864);
  *(_QWORD *)a2 = &off_24C335AB8;
  *(_BYTE *)(a2 + 36) = *((_BYTE *)this + 3460);
  v5 = (std::string *)(a2 + 40);
  if (*((char *)this + 3487) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)this + 433), *((_QWORD *)this + 434));
  }
  else
  {
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 3464);
    *(_QWORD *)(a2 + 56) = *((_QWORD *)this + 435);
  }
  *(_QWORD *)a2 = &off_24C336A60;
}

void sub_20A840AD0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  uint64_t v3;

  *(_QWORD *)v1 = v3;
  if (*(char *)(v1 + 31) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

void mlcore::ItemVideoTable::episodeSubSortOrderColumn(mlcore::ItemVideoTable *this@<X0>, uint64_t a2@<X8>)
{
  std::string *v4;

  *(_QWORD *)a2 = off_24C335D90;
  v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 3519) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 437), *((_QWORD *)this + 438));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 3496);
    *(_QWORD *)(a2 + 24) = *((_QWORD *)this + 439);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 880);
  *(_DWORD *)(a2 + 44) = *((_DWORD *)this + 883);
  *(_QWORD *)(a2 + 36) = *(_QWORD *)((char *)this + 3524);
  *(_QWORD *)a2 = off_24C336AC0;
}

mediaplatform::Data *mlcore::ItemVideoTable::hlsOfflinePlaybackKeysColumn@<X0>(mlcore::ItemVideoTable *this@<X0>, uint64_t a2@<X8>)
{
  std::string *v4;
  mediaplatform::Data *result;

  *(_QWORD *)a2 = off_24C335D90;
  v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 3567) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 443), *((_QWORD *)this + 444));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 3544);
    *(_QWORD *)(a2 + 24) = *((_QWORD *)this + 445);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 892);
  *(_QWORD *)a2 = &off_24C335A98;
  *(_BYTE *)(a2 + 36) = *((_BYTE *)this + 3572);
  result = mediaplatform::Data::Data((mediaplatform::Data *)(a2 + 40), (mlcore::ItemVideoTable *)((char *)this + 3576));
  *(_QWORD *)a2 = &off_24C336A40;
  return result;
}

void sub_20A840C10(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  uint64_t v3;

  *(_QWORD *)v1 = v3;
  if (*(char *)(v1 + 31) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

void mlcore::ItemVideoTable::isPremium(mlcore::ItemVideoTable *this@<X0>, uint64_t a2@<X8>)
{
  std::string *v4;

  *(_QWORD *)a2 = off_24C335D90;
  v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 3647) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 453), *((_QWORD *)this + 454));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 3624);
    *(_QWORD *)(a2 + 24) = *((_QWORD *)this + 455);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 912);
  *(_QWORD *)(a2 + 36) = *(_QWORD *)((char *)this + 3652);
  *(_QWORD *)a2 = off_24C336AA0;
}

void mlcore::ItemVideoTable::colorCapability(mlcore::ItemVideoTable *this@<X0>, uint64_t a2@<X8>)
{
  std::string *v4;

  *(_QWORD *)a2 = off_24C335D90;
  v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 3695) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 459), *((_QWORD *)this + 460));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 3672);
    *(_QWORD *)(a2 + 24) = *((_QWORD *)this + 461);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 924);
  *(_QWORD *)(a2 + 36) = *(_QWORD *)((char *)this + 3700);
  *(_QWORD *)a2 = off_24C336AA0;
}

void mlcore::ItemVideoTable::hlsColorCapability(mlcore::ItemVideoTable *this@<X0>, uint64_t a2@<X8>)
{
  std::string *v4;

  *(_QWORD *)a2 = off_24C335D90;
  v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 3743) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 465), *((_QWORD *)this + 466));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 3720);
    *(_QWORD *)(a2 + 24) = *((_QWORD *)this + 467);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 936);
  *(_QWORD *)(a2 + 36) = *(_QWORD *)((char *)this + 3748);
  *(_QWORD *)a2 = off_24C336AA0;
}

void mlcore::ItemVideoTable::hlsVideoQuality(mlcore::ItemVideoTable *this@<X0>, uint64_t a2@<X8>)
{
  std::string *v4;

  *(_QWORD *)a2 = off_24C335D90;
  v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 3791) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 471), *((_QWORD *)this + 472));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 3768);
    *(_QWORD *)(a2 + 24) = *((_QWORD *)this + 473);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 948);
  *(_QWORD *)(a2 + 36) = *(_QWORD *)((char *)this + 3796);
  *(_QWORD *)a2 = off_24C336AA0;
}

void mlcore::ItemVideoTable::hlsPlaylistURL(mlcore::ItemVideoTable *this@<X0>, uint64_t a2@<X8>)
{
  std::string *v4;
  std::string *v5;

  *(_QWORD *)a2 = off_24C335D90;
  v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 3839) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 477), *((_QWORD *)this + 478));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 3816);
    *(_QWORD *)(a2 + 24) = *((_QWORD *)this + 479);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 960);
  *(_QWORD *)a2 = &off_24C335AB8;
  *(_BYTE *)(a2 + 36) = *((_BYTE *)this + 3844);
  v5 = (std::string *)(a2 + 40);
  if (*((char *)this + 3871) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)this + 481), *((_QWORD *)this + 482));
  }
  else
  {
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 3848);
    *(_QWORD *)(a2 + 56) = *((_QWORD *)this + 483);
  }
  *(_QWORD *)a2 = &off_24C336A60;
}

void sub_20A840EE0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  uint64_t v3;

  *(_QWORD *)v1 = v3;
  if (*(char *)(v1 + 31) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

void mlcore::ItemVideoTable::audioCapability(mlcore::ItemVideoTable *this@<X0>, uint64_t a2@<X8>)
{
  std::string *v4;

  *(_QWORD *)a2 = off_24C335D90;
  v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 3903) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 485), *((_QWORD *)this + 486));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 3880);
    *(_QWORD *)(a2 + 24) = *((_QWORD *)this + 487);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 976);
  *(_QWORD *)(a2 + 36) = *(_QWORD *)((char *)this + 3908);
  *(_QWORD *)a2 = off_24C336AA0;
}

void mlcore::ItemVideoTable::hlsAudioCapability(mlcore::ItemVideoTable *this@<X0>, uint64_t a2@<X8>)
{
  std::string *v4;

  *(_QWORD *)a2 = off_24C335D90;
  v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 3951) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 491), *((_QWORD *)this + 492));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 3928);
    *(_QWORD *)(a2 + 24) = *((_QWORD *)this + 493);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 988);
  *(_DWORD *)(a2 + 44) = *((_DWORD *)this + 991);
  *(_QWORD *)(a2 + 36) = *(_QWORD *)((char *)this + 3956);
  *(_QWORD *)a2 = off_24C336AC0;
}

void mlcore::ItemVideoTable::hlsAssetTraits(mlcore::ItemVideoTable *this@<X0>, uint64_t a2@<X8>)
{
  std::string *v4;

  *(_QWORD *)a2 = off_24C335D90;
  v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 3999) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 497), *((_QWORD *)this + 498));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 3976);
    *(_QWORD *)(a2 + 24) = *((_QWORD *)this + 499);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 1000);
  *(_DWORD *)(a2 + 44) = *((_DWORD *)this + 1003);
  *(_QWORD *)(a2 + 36) = *(_QWORD *)((char *)this + 4004);
  *(_QWORD *)a2 = off_24C336AC0;
}

void mlcore::ItemVideoTable::hlsKeyServerURL(mlcore::ItemVideoTable *this@<X0>, uint64_t a2@<X8>)
{
  std::string *v4;
  std::string *v5;

  *(_QWORD *)a2 = off_24C335D90;
  v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 4047) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 503), *((_QWORD *)this + 504));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 4024);
    *(_QWORD *)(a2 + 24) = *((_QWORD *)this + 505);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 1012);
  *(_QWORD *)a2 = &off_24C335AB8;
  *(_BYTE *)(a2 + 36) = *((_BYTE *)this + 4052);
  v5 = (std::string *)(a2 + 40);
  if (*((char *)this + 4079) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)this + 507), *((_QWORD *)this + 508));
  }
  else
  {
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 4056);
    *(_QWORD *)(a2 + 56) = *((_QWORD *)this + 509);
  }
  *(_QWORD *)a2 = &off_24C336A60;
}

void sub_20A841144(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  uint64_t v3;

  *(_QWORD *)v1 = v3;
  if (*(char *)(v1 + 31) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

void mlcore::ItemVideoTable::hlsKeyCertificateURL(mlcore::ItemVideoTable *this@<X0>, uint64_t a2@<X8>)
{
  char *v4;
  std::string *v5;
  std::string *v6;

  v4 = (char *)this + 4111;
  *(_QWORD *)a2 = off_24C335D90;
  v5 = (std::string *)(a2 + 8);
  if (*((char *)this + 4111) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)this + 511), *((_QWORD *)this + 512));
  }
  else
  {
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 4088);
    *(_QWORD *)(a2 + 24) = *((_QWORD *)this + 513);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 1028);
  *(_QWORD *)a2 = &off_24C335AB8;
  *(_BYTE *)(a2 + 36) = v4[5];
  v6 = (std::string *)(a2 + 40);
  if (v4[32] < 0)
  {
    std::string::__init_copy_ctor_external(v6, *((const std::string::value_type **)this + 515), *((_QWORD *)this + 516));
  }
  else
  {
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 4120);
    *(_QWORD *)(a2 + 56) = *((_QWORD *)this + 517);
  }
  *(_QWORD *)a2 = &off_24C336A60;
}

void sub_20A841238(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  uint64_t v3;

  *(_QWORD *)v1 = v3;
  if (*(char *)(v1 + 31) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

void mlcore::ItemVideoTable::hlsKeyServerProtocol(mlcore::ItemVideoTable *this@<X0>, uint64_t a2@<X8>)
{
  char *v4;
  std::string *v5;
  std::string *v6;

  v4 = (char *)this + 4175;
  *(_QWORD *)a2 = off_24C335D90;
  v5 = (std::string *)(a2 + 8);
  if (*((char *)this + 4175) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)this + 519), *((_QWORD *)this + 520));
  }
  else
  {
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 4152);
    *(_QWORD *)(a2 + 24) = *((_QWORD *)this + 521);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 1044);
  *(_QWORD *)a2 = &off_24C335AB8;
  *(_BYTE *)(a2 + 36) = v4[5];
  v6 = (std::string *)(a2 + 40);
  if (v4[32] < 0)
  {
    std::string::__init_copy_ctor_external(v6, *((const std::string::value_type **)this + 523), *((_QWORD *)this + 524));
  }
  else
  {
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 4184);
    *(_QWORD *)(a2 + 56) = *((_QWORD *)this + 525);
  }
  *(_QWORD *)a2 = &off_24C336A60;
}

void sub_20A841330(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  uint64_t v3;

  *(_QWORD *)v1 = v3;
  if (*(char *)(v1 + 31) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

void mlcore::ComparisonPredicate<long long>::~ComparisonPredicate(_QWORD *a1)
{
  *a1 = &unk_24C339CA8;
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 4));
  JUMPOUT(0x20BD27AFCLL);
}

uint64_t mlcore::ComparisonPredicate<long long>::description(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void **v10;
  uint64_t v11;
  std::runtime_error *exception;
  void *__p[2];
  unsigned __int8 v15;
  _QWORD v16[11];
  char v17;
  uint64_t v18;
  char v19;

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  v2 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(v2 + 16);
  v3 = v2 + 16;
  v4 = v5;
  v6 = *(char *)(v3 + 23);
  if (v6 >= 0)
    v7 = v3;
  else
    v7 = v4;
  if (v6 >= 0)
    v8 = *(unsigned __int8 *)(v3 + 23);
  else
    v8 = *(_QWORD *)(v3 + 8);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, v7, v8);
  LOBYTE(__p[0]) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)__p, 1);
  v9 = *(unsigned int *)(a1 + 20);
  if (v9 >= 0xD)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "unexpected operator type");
    __cxa_throw(exception, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, (&off_24C33DA90)[v9]);
  if ((v15 & 0x80u) == 0)
    v10 = __p;
  else
    v10 = (void **)__p[0];
  if ((v15 & 0x80u) == 0)
    v11 = v15;
  else
    v11 = (uint64_t)__p[1];
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)v10, v11);
  v19 = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)&v19, 1);
  std::ostream::operator<<();
  if ((char)v15 < 0)
    operator delete(__p[0]);
  std::stringbuf::str();
  v16[0] = *MEMORY[0x24BEDB800];
  *(_QWORD *)((char *)v16 + *(_QWORD *)(v16[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  v16[1] = MEMORY[0x24BEDB848] + 16;
  if (v17 < 0)
    operator delete((void *)v16[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x20BD27A84](&v18);
}

void sub_20A841528(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  void *v16;

  __cxa_free_exception(v16);
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

BOOL mlcore::ComparisonPredicate<long long>::matches(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  BOOL v5;
  std::runtime_error *exception;

  v3 = mlcore::PropertyCacheBase<long long,int,double,std::string,mediaplatform::Data>::valueForProperty(*a2 + 8, *(_QWORD *)(a1 + 8));
  switch(*(_DWORD *)(a1 + 20))
  {
    case 0:
      return v3 == *(_QWORD *)(a1 + 24);
    case 1:
      v5 = v3 == *(_QWORD *)(a1 + 24);
      return !v5;
    case 2:
      return v3 > *(_QWORD *)(a1 + 24);
    case 3:
      return v3 < *(_QWORD *)(a1 + 24);
    case 4:
      return v3 >= *(_QWORD *)(a1 + 24);
    case 5:
      return v3 <= *(_QWORD *)(a1 + 24);
    case 7:
      v5 = (*(_QWORD *)(a1 + 24) & v3) == 0;
      return !v5;
    case 8:
      v5 = (*(_QWORD *)(a1 + 24) | v3) == 0;
      return !v5;
    default:
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "unexpected operator type");
      __cxa_throw(exception, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
  }
}

void sub_20A841660(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::allocate_shared[abi:ne180100]<mediaplatform::SQLFunctionExpression,std::allocator<mediaplatform::SQLFunctionExpression>,char const(&)[7],std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>,void>(_QWORD *a1, _QWORD **a2)
{
  _QWORD *v4;
  void (**v5)(mediaplatform::SQLExpressionList *__hidden);
  void *v6[3];
  void *__p[2];
  char v8;
  void **v9;

  v4 = operator new(0x58uLL);
  v4[1] = 0;
  v4[2] = 0;
  *v4 = &off_24C33C050;
  std::string::basic_string[abi:ne180100]<0>(__p, "IFNULL");
  v5 = &off_24C330FB0;
  memset(v6, 0, sizeof(v6));
  std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__init_with_size[abi:ne180100]<std::shared_ptr<mediaplatform::SQLExpression const>*,std::shared_ptr<mediaplatform::SQLExpression const>*>((char *)v6, *a2, a2[1], ((char *)a2[1] - (char *)*a2) >> 4);
  mediaplatform::SQLFunctionExpression::SQLFunctionExpression((uint64_t)(v4 + 3), (__int128 *)__p, (uint64_t)&v5);
  v5 = &off_24C330FB0;
  v9 = v6;
  std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__destroy_vector::operator()[abi:ne180100](&v9);
  if (v8 < 0)
    operator delete(__p[0]);
  *a1 = v4 + 3;
  a1[1] = v4;
}

void sub_20A84173C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19)
{
  std::__shared_weak_count *v19;
  void *v21;

  std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a19);
  if (a18 < 0)
    operator delete(__p);
  std::__shared_weak_count::~__shared_weak_count(v19);
  operator delete(v21);
  _Unwind_Resume(a1);
}

void std::allocate_shared[abi:ne180100]<mediaplatform::SQLLiteralValue<long long>,std::allocator<mediaplatform::SQLLiteralValue<long long>>,int,void>(_QWORD *a1, int a2)
{
  _QWORD *v4;
  std::string *v5;
  void *__p[2];
  uint64_t v7;

  v4 = operator new(0x40uLL);
  v4[1] = 0;
  v4[2] = 0;
  *v4 = &off_24C33BB48;
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  v4[3] = off_24C335C00;
  v4[4] = a2;
  v5 = (std::string *)(v4 + 5);
  if (SHIBYTE(v7) < 0)
  {
    std::string::__init_copy_ctor_external(v5, (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
    if (SHIBYTE(v7) < 0)
      operator delete(__p[0]);
  }
  else
  {
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = *(_OWORD *)__p;
    v4[7] = v7;
  }
  *a1 = v4 + 3;
  a1[1] = v4;
}

void sub_20A841830(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  std::__shared_weak_count *v15;
  void *v17;

  if (a15 < 0)
    operator delete(__p);
  std::__shared_weak_count::~__shared_weak_count(v15);
  operator delete(v17);
  _Unwind_Resume(a1);
}

void std::allocate_shared[abi:ne180100]<mediaplatform::SQLLiteralValue<std::string>,std::allocator<mediaplatform::SQLLiteralValue<std::string>>,char const(&)[1],void>(_QWORD *a1)
{
  _QWORD *v2;
  void *__p[2];
  char v4;
  void *v5[2];
  char v6;

  v2 = operator new(0x50uLL);
  v2[1] = 0;
  v2[2] = 0;
  *v2 = &off_24C33BA68;
  std::string::basic_string[abi:ne180100]<0>(v5, "");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  mediaplatform::SQLLiteralValue<std::string>::SQLLiteralValue((uint64_t)(v2 + 3), (__int128 *)v5, (__int128 *)__p);
  if (v4 < 0)
    operator delete(__p[0]);
  if (v6 < 0)
    operator delete(v5[0]);
  *a1 = v2 + 3;
  a1[1] = v2;
}

void sub_20A841900(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  std::__shared_weak_count *v20;
  void *v22;

  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  std::__shared_weak_count::~__shared_weak_count(v20);
  operator delete(v22);
  _Unwind_Resume(a1);
}

void std::allocate_shared[abi:ne180100]<mediaplatform::SQLLiteralValue<double>,std::allocator<mediaplatform::SQLLiteralValue<double>>,int,void>(_QWORD *a1, int a2)
{
  char *v4;
  std::string *v5;
  void *__p[2];
  uint64_t v7;

  v4 = (char *)operator new(0x40uLL);
  *((_QWORD *)v4 + 1) = 0;
  *((_QWORD *)v4 + 2) = 0;
  *(_QWORD *)v4 = &off_24C33BAA0;
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  *((_QWORD *)v4 + 3) = off_24C335B88;
  *((double *)v4 + 4) = (double)a2;
  v5 = (std::string *)(v4 + 40);
  if (SHIBYTE(v7) < 0)
  {
    std::string::__init_copy_ctor_external(v5, (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
    if (SHIBYTE(v7) < 0)
      operator delete(__p[0]);
  }
  else
  {
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = *(_OWORD *)__p;
    *((_QWORD *)v4 + 7) = v7;
  }
  *a1 = v4 + 24;
  a1[1] = v4;
}

void sub_20A8419F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  std::__shared_weak_count *v15;
  void *v17;

  if (a15 < 0)
    operator delete(__p);
  std::__shared_weak_count::~__shared_weak_count(v15);
  operator delete(v17);
  _Unwind_Resume(a1);
}

void std::allocate_shared[abi:ne180100]<mediaplatform::SQLLiteralValue<mediaplatform::Data>,std::allocator<mediaplatform::SQLLiteralValue<mediaplatform::Data>>,mediaplatform::Data,void>(_QWORD *a1, const mediaplatform::Data *a2)
{
  std::string *v4;
  std::string *v5;
  void *__p[2];
  std::string::size_type v7;

  v4 = (std::string *)operator new(0x60uLL);
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = (std::string::size_type)&off_24C33BA30;
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  v4[1].__r_.__value_.__r.__words[0] = (std::string::size_type)off_24C335B38;
  mediaplatform::Data::Data((mediaplatform::Data *)&v4[1].__r_.__value_.__r.__words[1], a2);
  v5 = v4 + 3;
  if (SHIBYTE(v7) < 0)
  {
    std::string::__init_copy_ctor_external(v5, (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
    if (SHIBYTE(v7) < 0)
      operator delete(__p[0]);
  }
  else
  {
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = *(_OWORD *)__p;
    v4[3].__r_.__value_.__r.__words[2] = v7;
  }
  *a1 = v4 + 1;
  a1[1] = v4;
}

void sub_20A841ADC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;
  uint64_t v17;
  void *v18;

  *(_QWORD *)(v15 + 32) = &off_24C331510;
  if (*(_BYTE *)(v15 + 64))
  {
    v17 = *(_QWORD *)(v15 + 56);
    if (v17)
      MEMORY[0x20BD27AE4](v17, 0x1000C8077774924);
  }
  if (a15 < 0)
    operator delete(__p);
  std::__shared_weak_count::~__shared_weak_count((std::__shared_weak_count *)v15);
  operator delete(v18);
  _Unwind_Resume(a1);
}

void std::allocate_shared[abi:ne180100]<mediaplatform::SQLBinaryExpression,std::allocator<mediaplatform::SQLBinaryExpression>,std::shared_ptr<mediaplatform::SQLExpression> &,mediaplatform::SQLBinaryExpression::BinaryOperator,std::shared_ptr<mediaplatform::DatabaseBindParameter> &,void>(_QWORD *a1, uint64_t a2, std::__shared_weak_count *a3, int *a4, uint64_t *a5)
{
  _QWORD *v10;
  _QWORD *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  int v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t *v24;
  unint64_t v25;

  v10 = operator new(0x48uLL);
  v11 = v10;
  v10[1] = 0;
  v10[2] = 0;
  *v10 = &off_24C33BEC8;
  if (a3)
  {
    p_shared_owners = (unint64_t *)&a3->__shared_owners_;
    do
      v13 = __ldxr(p_shared_owners);
    while (__stxr(v13 + 1, p_shared_owners));
  }
  v14 = *a4;
  v15 = *a5;
  v16 = (std::__shared_weak_count *)a5[1];
  if (v16)
  {
    v17 = (unint64_t *)&v16->__shared_owners_;
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
  }
  v10[3] = &off_24C331138;
  *((_DWORD *)v10 + 8) = v14;
  v10[5] = a2;
  v10[6] = a3;
  if (a3)
  {
    v19 = (unint64_t *)&a3->__shared_owners_;
    do
      v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
  }
  v10[7] = v15;
  v10[8] = v16;
  if (!v16)
    goto LABEL_15;
  v21 = (unint64_t *)&v16->__shared_owners_;
  do
    v22 = __ldxr(v21);
  while (__stxr(v22 + 1, v21));
  do
    v23 = __ldaxr(v21);
  while (__stlxr(v23 - 1, v21));
  if (!v23)
  {
    ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
    std::__shared_weak_count::__release_weak(v16);
    if (!a3)
      goto LABEL_21;
  }
  else
  {
LABEL_15:
    if (!a3)
      goto LABEL_21;
  }
  v24 = (unint64_t *)&a3->__shared_owners_;
  do
    v25 = __ldaxr(v24);
  while (__stlxr(v25 - 1, v24));
  if (!v25)
  {
    ((void (*)(std::__shared_weak_count *))a3->__on_zero_shared)(a3);
    std::__shared_weak_count::__release_weak(a3);
  }
LABEL_21:
  *a1 = v11 + 3;
  a1[1] = v11;
}

uint64_t mediaplatform::SQLLiteralValue<mediaplatform::Data>::~SQLLiteralValue(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = off_24C335B38;
  if (*(char *)(a1 + 71) < 0)
    operator delete(*(void **)(a1 + 48));
  *(_QWORD *)(a1 + 8) = &off_24C331510;
  if (*(_BYTE *)(a1 + 40))
  {
    v2 = *(_QWORD *)(a1 + 32);
    if (v2)
      MEMORY[0x20BD27AE4](v2, 0x1000C8077774924);
  }
  return a1;
}

void mediaplatform::SQLLiteralValue<mediaplatform::Data>::~SQLLiteralValue(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = off_24C335B38;
  if (*(char *)(a1 + 71) < 0)
    operator delete(*(void **)(a1 + 48));
  *(_QWORD *)(a1 + 8) = &off_24C331510;
  if (*(_BYTE *)(a1 + 40))
  {
    v2 = *(_QWORD *)(a1 + 32);
    if (v2)
      MEMORY[0x20BD27AE4](v2, 0x1000C8077774924);
  }
  JUMPOUT(0x20BD27AFCLL);
}

uint64_t mediaplatform::SQLLiteralValue<mediaplatform::Data>::sql(uint64_t a1)
{
  const void *v2;
  size_t v3;
  void *v4;
  void **v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v11[4];
  char v12;
  void *__p[2];
  unsigned __int8 v14;
  _QWORD v15[11];
  char v16;
  uint64_t v17;

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  v2 = *(const void **)(a1 + 32);
  v3 = *(_QWORD *)(a1 + 16);
  v11[0] = &off_24C331510;
  v11[1] = v3;
  v11[2] = v3;
  if (v3)
    v4 = (void *)operator new[]();
  else
    v4 = 0;
  v11[3] = v4;
  v12 = 1;
  if (v2)
    memcpy(v4, v2, v3);
  else
    bzero(v4, v3);
  mediaplatform::SQLStringValue<mediaplatform::Data>((uint64_t)__p, (uint64_t)v11);
  if ((v14 & 0x80u) == 0)
    v5 = __p;
  else
    v5 = (void **)__p[0];
  if ((v14 & 0x80u) == 0)
    v6 = v14;
  else
    v6 = (uint64_t)__p[1];
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)v5, v6);
  if ((char)v14 < 0)
    operator delete(__p[0]);
  if (v4)
    MEMORY[0x20BD27AE4](v4, 0x1000C8077774924);
  if (*(char *)(a1 + 71) < 0)
  {
    if (!*(_QWORD *)(a1 + 56))
      goto LABEL_28;
LABEL_21:
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)" /* ", 4);
    v7 = *(char *)(a1 + 71);
    if (v7 >= 0)
      v8 = a1 + 48;
    else
      v8 = *(_QWORD *)(a1 + 48);
    if (v7 >= 0)
      v9 = *(unsigned __int8 *)(a1 + 71);
    else
      v9 = *(_QWORD *)(a1 + 56);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, v8, v9);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)" */", 3);
    goto LABEL_28;
  }
  if (*(_BYTE *)(a1 + 71))
    goto LABEL_21;
LABEL_28:
  std::stringbuf::str();
  v15[0] = *MEMORY[0x24BEDB800];
  *(_QWORD *)((char *)v15 + *(_QWORD *)(v15[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  v15[1] = MEMORY[0x24BEDB848] + 16;
  if (v16 < 0)
    operator delete((void *)v15[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x20BD27A84](&v17);
}

void sub_20A841F54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  std::ostringstream::~ostringstream((uint64_t)&a21);
  _Unwind_Resume(a1);
}

uint64_t mediaplatform::SQLStringValue<mediaplatform::Data>(uint64_t a1, uint64_t a2)
{
  std::string *p_p;
  std::string::size_type size;
  std::string __p;
  _QWORD v7[11];
  char v8;
  uint64_t v9;

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v7);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"x'", 2);
  mediaplatform::Base16Representation(a2, &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    size = __p.__r_.__value_.__l.__size_;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)p_p, size);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"'", 1);
  std::stringbuf::str();
  v7[0] = *MEMORY[0x24BEDB800];
  *(_QWORD *)((char *)v7 + *(_QWORD *)(v7[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  v7[1] = MEMORY[0x24BEDB848] + 16;
  if (v8 < 0)
    operator delete((void *)v7[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x20BD27A84](&v9);
}

void sub_20A8420B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<mediaplatform::SQLLiteralValue<mediaplatform::Data>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C33BA30;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<mediaplatform::SQLLiteralValue<mediaplatform::Data>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C33BA30;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x20BD27AFCLL);
}

uint64_t std::__shared_ptr_emplace<mediaplatform::SQLLiteralValue<mediaplatform::Data>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t mediaplatform::SQLLiteralValue<double>::~SQLLiteralValue(uint64_t a1)
{
  *(_QWORD *)a1 = off_24C335B88;
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
  return a1;
}

void mediaplatform::SQLLiteralValue<double>::~SQLLiteralValue(uint64_t a1)
{
  *(_QWORD *)a1 = off_24C335B88;
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
  JUMPOUT(0x20BD27AFCLL);
}

uint64_t mediaplatform::SQLLiteralValue<double>::sql(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  void *v11[2];
  unsigned __int8 v12;
  _QWORD v13[11];
  char v14;
  uint64_t v15;
  _QWORD v16[11];
  char v17;
  uint64_t v18;

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v13);
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  std::ostream::operator<<();
  std::stringbuf::str();
  v2 = *MEMORY[0x24BEDB800];
  v16[0] = v2;
  v3 = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  *(_QWORD *)((char *)v16 + *(_QWORD *)(v2 - 24)) = v3;
  v4 = MEMORY[0x24BEDB848];
  v16[1] = MEMORY[0x24BEDB848] + 16;
  if (v17 < 0)
    operator delete((void *)v16[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x20BD27A84](&v18);
  if ((v12 & 0x80u) == 0)
    v5 = v11;
  else
    v5 = (void **)v11[0];
  if ((v12 & 0x80u) == 0)
    v6 = v12;
  else
    v6 = (uint64_t)v11[1];
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)v5, v6);
  if ((char)v12 < 0)
    operator delete(v11[0]);
  if (*(char *)(a1 + 39) < 0)
  {
    if (!*(_QWORD *)(a1 + 24))
      goto LABEL_22;
LABEL_15:
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)" /* ", 4);
    v7 = *(char *)(a1 + 39);
    if (v7 >= 0)
      v8 = a1 + 16;
    else
      v8 = *(_QWORD *)(a1 + 16);
    if (v7 >= 0)
      v9 = *(unsigned __int8 *)(a1 + 39);
    else
      v9 = *(_QWORD *)(a1 + 24);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, v8, v9);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)" */", 3);
    goto LABEL_22;
  }
  if (*(_BYTE *)(a1 + 39))
    goto LABEL_15;
LABEL_22:
  std::stringbuf::str();
  v13[0] = v2;
  *(_QWORD *)((char *)v13 + *(_QWORD *)(v2 - 24)) = v3;
  v13[1] = v4 + 16;
  if (v14 < 0)
    operator delete((void *)v13[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x20BD27A84](&v15);
}

void sub_20A842394(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49)
{
  if (a15 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<mediaplatform::SQLLiteralValue<double>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C33BAA0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<mediaplatform::SQLLiteralValue<double>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C33BAA0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x20BD27AFCLL);
}

uint64_t std::__shared_ptr_emplace<mediaplatform::SQLLiteralValue<double>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void mediaplatform::DatabaseParameter<long long>::~DatabaseParameter()
{
  JUMPOUT(0x20BD27AFCLL);
}

uint64_t mediaplatform::DatabaseParameter<long long>::description()
{
  _QWORD v1[11];
  char v2;
  uint64_t v3;

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v1);
  std::ostream::operator<<();
  std::stringbuf::str();
  v1[0] = *MEMORY[0x24BEDB800];
  *(_QWORD *)((char *)v1 + *(_QWORD *)(v1[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  v1[1] = MEMORY[0x24BEDB848] + 16;
  if (v2 < 0)
    operator delete((void *)v1[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x20BD27A84](&v3);
}

void sub_20A8424F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
  uint64_t v27;

  *(_QWORD *)(v27 + *(_QWORD *)(*MEMORY[0x24BEDB800] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  if (a24 < 0)
    operator delete(__p);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x20BD27A84](&a27);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<mediaplatform::DatabaseParameter<long long>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C33BD40;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<mediaplatform::DatabaseParameter<long long>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C33BD40;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x20BD27AFCLL);
}

void mlcore::ComparisonPredicate<std::string>::~ComparisonPredicate(uint64_t a1)
{
  *(_QWORD *)a1 = &unk_24C339BA0;
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100](a1 + 48);
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  JUMPOUT(0x20BD27AFCLL);
}

uint64_t mlcore::ComparisonPredicate<std::string>::description(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void **v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  std::runtime_error *exception;
  void *__p[2];
  unsigned __int8 v21;
  _QWORD v22[11];
  char v23;
  uint64_t v24;
  char v25;

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v22);
  v2 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(v2 + 16);
  v3 = v2 + 16;
  v4 = v5;
  v6 = *(char *)(v3 + 23);
  if (v6 >= 0)
    v7 = v3;
  else
    v7 = v4;
  if (v6 >= 0)
    v8 = *(unsigned __int8 *)(v3 + 23);
  else
    v8 = *(_QWORD *)(v3 + 8);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, v7, v8);
  LOBYTE(__p[0]) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)__p, 1);
  v9 = *(unsigned int *)(a1 + 20);
  if (v9 >= 0xD)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "unexpected operator type");
    __cxa_throw(exception, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, (&off_24C33DA90)[v9]);
  if ((v21 & 0x80u) == 0)
    v10 = __p;
  else
    v10 = (void **)__p[0];
  if ((v21 & 0x80u) == 0)
    v11 = v21;
  else
    v11 = (uint64_t)__p[1];
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)v10, v11);
  v25 = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)&v25, 1);
  v25 = 34;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)&v25, 1);
  v14 = *(_QWORD *)(a1 + 24);
  v13 = a1 + 24;
  v12 = v14;
  v15 = *(char *)(v13 + 23);
  if (v15 >= 0)
    v16 = v13;
  else
    v16 = v12;
  if (v15 >= 0)
    v17 = *(unsigned __int8 *)(v13 + 23);
  else
    v17 = *(_QWORD *)(v13 + 8);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, v16, v17);
  v25 = 34;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)&v25, 1);
  if ((char)v21 < 0)
    operator delete(__p[0]);
  std::stringbuf::str();
  v22[0] = *MEMORY[0x24BEDB800];
  *(_QWORD *)((char *)v22 + *(_QWORD *)(v22[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  v22[1] = MEMORY[0x24BEDB848] + 16;
  if (v23 < 0)
    operator delete((void *)v22[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x20BD27A84](&v24);
}

void sub_20A8427D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  void *v16;

  __cxa_free_exception(v16);
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

uint64_t mlcore::ComparisonPredicate<std::string>::matches(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  std::string __p;

  mlcore::PropertyCacheBase<std::string,mediaplatform::Data>::valueForProperty(&__p, *a2 + 8, *(_QWORD *)(a1 + 8));
  v3 = mlcore::_string_matches((unsigned __int8 *)(a1 + 24), *(_DWORD *)(a1 + 20), (unsigned __int8 *)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return v3;
}

void sub_20A842870(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void mediaplatform::DatabaseParameter<std::string>::~DatabaseParameter(uint64_t a1)
{
  *(_QWORD *)a1 = off_24C335C70;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  JUMPOUT(0x20BD27AFCLL);
}

void mediaplatform::DatabaseParameter<std::string>::description(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  std::string *p_p;
  std::string::size_type size;
  std::string __p;

  if (*(char *)(a1 + 31) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(a1 + 8), *(_QWORD *)(a1 + 16));
  else
    __p = *(std::string *)(a1 + 8);
  std::string::basic_string[abi:ne180100]<0>(a2, "'");
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    size = __p.__r_.__value_.__l.__size_;
  for (; size; --size)
  {
    std::string::push_back(a2, p_p->__r_.__value_.__s.__data_[0]);
    if (p_p->__r_.__value_.__s.__data_[0] == 39)
      std::string::push_back(a2, 39);
    p_p = (std::string *)((char *)p_p + 1);
  }
  std::string::push_back(a2, 39);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_20A8429AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  uint64_t v14;

  if (*(char *)(v14 + 23) < 0)
    operator delete(*(void **)v14);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_emplace<mediaplatform::DatabaseParameter<std::string>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C33BC98;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<mediaplatform::DatabaseParameter<std::string>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C33BC98;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x20BD27AFCLL);
}

uint64_t mlcore::_string_matches(unsigned __int8 *a1, int a2, unsigned __int8 *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  unsigned __int8 *v7;
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  int v12;
  BOOL v14;
  _BOOL8 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  unsigned __int8 *v20;
  uint64_t v21;
  int v22;
  int v23;
  int v24;
  BOOL v25;
  int v26;
  int v27;
  size_t v28;
  unsigned __int8 *v29;
  size_t v30;
  const void *v31;
  size_t v32;
  int v33;
  int v34;
  int v35;
  BOOL v36;
  _BOOL4 v37;
  int v38;
  int v39;
  size_t v40;
  size_t v41;
  const void *v42;
  size_t v43;
  int v44;
  int v45;
  unsigned __int8 *v46;
  int v47;
  int64_t v48;
  char *v49;
  int v50;
  char *v51;
  int64_t v52;
  char *v53;
  char *v54;
  uint64_t v56;
  unsigned __int8 *v57;
  uint64_t v58;
  unsigned __int8 *v59;
  unsigned __int8 *v60;
  BOOL v61;
  uint64_t v62;
  int64_t v64;
  char *v65;
  int v66;
  char *v67;
  int64_t v68;
  char *v69;
  char *v70;
  BOOL v71;
  unsigned __int8 *v72;
  unsigned __int8 *v73;
  uint64_t v74;
  int v75;
  int v76;
  int v77;
  void *v78;
  int64_t v79;
  char *v80;
  int v81;
  void *v82;
  int64_t v83;
  char *v84;
  std::runtime_error *exception;

  switch(a2)
  {
    case 0:
      v3 = a1[23];
      if ((v3 & 0x80u) == 0)
        v4 = a1[23];
      else
        v4 = *((_QWORD *)a1 + 1);
      v5 = a3[23];
      v6 = (char)v5;
      if ((v5 & 0x80u) != 0)
        v5 = *((_QWORD *)a3 + 1);
      if (v4 != v5)
        return 0;
      if (v6 >= 0)
        v7 = a3;
      else
        v7 = *(unsigned __int8 **)a3;
      if ((v3 & 0x80) != 0)
        return memcmp(*(const void **)a1, v7, *((_QWORD *)a1 + 1)) == 0;
      if (!a1[23])
        return 1;
      v8 = v3 - 1;
      do
      {
        v10 = *a1++;
        v9 = v10;
        v12 = *v7++;
        v11 = v12;
        v14 = v8-- != 0;
        v25 = v9 == v11;
        v15 = v9 == v11;
      }
      while (v25 && v14);
      return v15;
    case 1:
      v16 = a1[23];
      if ((v16 & 0x80u) == 0)
        v17 = a1[23];
      else
        v17 = *((_QWORD *)a1 + 1);
      v18 = a3[23];
      v19 = (char)v18;
      if ((v18 & 0x80u) != 0)
        v18 = *((_QWORD *)a3 + 1);
      if (v17 != v18)
        return 1;
      if (v19 >= 0)
        v20 = a3;
      else
        v20 = *(unsigned __int8 **)a3;
      if ((v16 & 0x80) != 0)
      {
        v71 = memcmp(*(const void **)a1, v20, *((_QWORD *)a1 + 1)) == 0;
        return !v71;
      }
      if (!a1[23])
        return 0;
      v21 = v16 - 1;
      do
      {
        v23 = *a1++;
        v22 = v23;
        v24 = *v20++;
        v25 = v22 == v24;
        v15 = v22 != v24;
        v25 = !v25 || v21-- == 0;
      }
      while (!v25);
      return v15;
    case 2:
      v26 = (char)a1[23];
      v27 = (char)a3[23];
      if (v27 >= 0)
        v28 = a3[23];
      else
        v28 = *((_QWORD *)a3 + 1);
      if (v27 >= 0)
        v29 = a3;
      else
        v29 = *(unsigned __int8 **)a3;
      if (v26 >= 0)
        v30 = a1[23];
      else
        v30 = *((_QWORD *)a1 + 1);
      if (v26 >= 0)
        v31 = a1;
      else
        v31 = *(const void **)a1;
      if (v30 >= v28)
        v32 = v28;
      else
        v32 = v30;
      a1 = v29;
      goto LABEL_69;
    case 3:
      v33 = (char)a3[23];
      v34 = (char)a1[23];
      if (v34 >= 0)
        v28 = a1[23];
      else
        v28 = *((_QWORD *)a1 + 1);
      if (v34 < 0)
        a1 = *(unsigned __int8 **)a1;
      if (v33 >= 0)
        v30 = a3[23];
      else
        v30 = *((_QWORD *)a3 + 1);
      if (v33 >= 0)
        v31 = a3;
      else
        v31 = *(const void **)a3;
      if (v30 >= v28)
        v32 = v28;
      else
        v32 = v30;
LABEL_69:
      v35 = memcmp(a1, v31, v32);
      LODWORD(v15) = v28 < v30;
      v36 = v35 == 0;
      v37 = v35 < 0;
      goto LABEL_101;
    case 4:
      v38 = (char)a3[23];
      v39 = (char)a1[23];
      if (v39 >= 0)
        v40 = a1[23];
      else
        v40 = *((_QWORD *)a1 + 1);
      if (v39 < 0)
        a1 = *(unsigned __int8 **)a1;
      if (v38 >= 0)
        v41 = a3[23];
      else
        v41 = *((_QWORD *)a3 + 1);
      if (v38 >= 0)
        v42 = a3;
      else
        v42 = *(const void **)a3;
      if (v41 >= v40)
        v43 = v40;
      else
        v43 = v41;
      goto LABEL_100;
    case 5:
      v44 = (char)a1[23];
      v45 = (char)a3[23];
      if (v45 >= 0)
        v40 = a3[23];
      else
        v40 = *((_QWORD *)a3 + 1);
      if (v45 >= 0)
        v46 = a3;
      else
        v46 = *(unsigned __int8 **)a3;
      if (v44 >= 0)
        v41 = a1[23];
      else
        v41 = *((_QWORD *)a1 + 1);
      if (v44 >= 0)
        v42 = a1;
      else
        v42 = *(const void **)a1;
      if (v41 >= v40)
        v43 = v40;
      else
        v43 = v41;
      a1 = v46;
LABEL_100:
      v47 = memcmp(a1, v42, v43);
      LODWORD(v15) = v40 >= v41;
      v36 = v47 == 0;
      v37 = v47 >= 0;
LABEL_101:
      if (v36)
        return v15;
      else
        return v37;
    case 9:
      v48 = a3[23];
      if ((v48 & 0x80u) == 0)
        v49 = (char *)a3;
      else
        v49 = *(char **)a3;
      v50 = (char)a1[23];
      if (v50 >= 0)
        v51 = (char *)a1;
      else
        v51 = *(char **)a1;
      if (v50 >= 0)
        v52 = a1[23];
      else
        v52 = *((_QWORD *)a1 + 1);
      if (!v52)
        return 1;
      if ((v48 & 0x80u) != 0)
        v48 = *((_QWORD *)a3 + 1);
      v53 = &v49[v48];
      if (v48 < v52)
        goto LABEL_117;
      v77 = *v51;
      v78 = v49;
      do
      {
        v79 = v48 - v52;
        if (v79 == -1)
          break;
        v80 = (char *)memchr(v78, v77, v79 + 1);
        if (!v80)
          break;
        v54 = v80;
        if (!memcmp(v80, v51, v52))
          return v54 != v53 && v54 == v49;
        v78 = v54 + 1;
        v48 = v53 - (v54 + 1);
      }
      while (v48 >= v52);
LABEL_117:
      v54 = v53;
      return v54 != v53 && v54 == v49;
    case 10:
      v56 = a3[23];
      if ((v56 & 0x80u) == 0)
        v57 = a3;
      else
        v57 = *(unsigned __int8 **)a3;
      if ((v56 & 0x80u) != 0)
        v56 = *((_QWORD *)a3 + 1);
      v58 = a1[23];
      v59 = *(unsigned __int8 **)a1;
      if ((v58 & 0x80u) != 0)
        v58 = *((_QWORD *)a1 + 1);
      else
        v59 = a1;
      v60 = &v57[v56];
      if (v56)
        v61 = v58 == 0;
      else
        v61 = 1;
      if (v61)
      {
        v73 = &v57[v56];
        goto LABEL_135;
      }
      v72 = v57;
      v73 = &v57[v56];
      do
      {
        if (*v72 == *v59)
        {
          v74 = 1;
          while (v58 != v74)
          {
            if (&v72[v74] == v60)
              goto LABEL_135;
            v75 = v72[v74];
            v76 = v59[v74++];
            if (v75 != v76)
              goto LABEL_164;
          }
          v73 = v72;
        }
LABEL_164:
        ++v72;
      }
      while (v72 != v60);
LABEL_135:
      v62 = v73 - v57;
      if (v73 == v60 && v58 != 0)
        v62 = -1;
      return v62 == v56 - v58;
    case 11:
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "not implemented yet");
      goto LABEL_192;
    case 12:
      v64 = a3[23];
      if ((v64 & 0x80u) == 0)
        v65 = (char *)a3;
      else
        v65 = *(char **)a3;
      v66 = (char)a1[23];
      if (v66 >= 0)
        v67 = (char *)a1;
      else
        v67 = *(char **)a1;
      if (v66 >= 0)
        v68 = a1[23];
      else
        v68 = *((_QWORD *)a1 + 1);
      if (!v68)
        return 1;
      if ((v64 & 0x80u) != 0)
        v64 = *((_QWORD *)a3 + 1);
      v69 = &v65[v64];
      if (v64 < v68)
        goto LABEL_157;
      v81 = *v67;
      v82 = v65;
      break;
    default:
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "unexpected operator type");
LABEL_192:
      __cxa_throw(exception, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
  }
  do
  {
    v83 = v64 - v68;
    if (v83 == -1)
      break;
    v84 = (char *)memchr(v82, v81, v83 + 1);
    if (!v84)
      break;
    v70 = v84;
    if (!memcmp(v84, v67, v68))
      goto LABEL_158;
    v82 = v70 + 1;
    v64 = v69 - (v70 + 1);
  }
  while (v64 >= v68);
LABEL_157:
  v70 = v69;
LABEL_158:
  v71 = v70 == v69 || v70 - v65 == -1;
  return !v71;
}

void sub_20A842F00(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

_QWORD *mlcore::ComparisonPredicate<double>::~ComparisonPredicate(_QWORD *a1)
{
  *a1 = &unk_24C339BF8;
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 4));
  return a1;
}

void mlcore::ComparisonPredicate<double>::~ComparisonPredicate(_QWORD *a1)
{
  *a1 = &unk_24C339BF8;
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 4));
  JUMPOUT(0x20BD27AFCLL);
}

uint64_t mlcore::ComparisonPredicate<double>::description(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void **v10;
  uint64_t v11;
  std::runtime_error *exception;
  void *__p[2];
  unsigned __int8 v15;
  _QWORD v16[11];
  char v17;
  uint64_t v18;
  char v19;

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  v2 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(v2 + 16);
  v3 = v2 + 16;
  v4 = v5;
  v6 = *(char *)(v3 + 23);
  if (v6 >= 0)
    v7 = v3;
  else
    v7 = v4;
  if (v6 >= 0)
    v8 = *(unsigned __int8 *)(v3 + 23);
  else
    v8 = *(_QWORD *)(v3 + 8);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, v7, v8);
  LOBYTE(__p[0]) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)__p, 1);
  v9 = *(unsigned int *)(a1 + 20);
  if (v9 >= 0xD)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "unexpected operator type");
    __cxa_throw(exception, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, (&off_24C33DA90)[v9]);
  if ((v15 & 0x80u) == 0)
    v10 = __p;
  else
    v10 = (void **)__p[0];
  if ((v15 & 0x80u) == 0)
    v11 = v15;
  else
    v11 = (uint64_t)__p[1];
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)v10, v11);
  v19 = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)&v19, 1);
  std::ostream::operator<<();
  if ((char)v15 < 0)
    operator delete(__p[0]);
  std::stringbuf::str();
  v16[0] = *MEMORY[0x24BEDB800];
  *(_QWORD *)((char *)v16 + *(_QWORD *)(v16[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  v16[1] = MEMORY[0x24BEDB848] + 16;
  if (v17 < 0)
    operator delete((void *)v16[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x20BD27A84](&v18);
}

void sub_20A843124(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  void *v16;

  __cxa_free_exception(v16);
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

BOOL mlcore::ComparisonPredicate<double>::matches(uint64_t a1, _QWORD *a2)
{
  double v3;
  _BOOL8 result;
  std::runtime_error *exception;

  v3 = mlcore::PropertyCacheBase<double,std::string,mediaplatform::Data>::valueForProperty(*a2 + 8, *(_QWORD *)(a1 + 8));
  switch(*(_DWORD *)(a1 + 20))
  {
    case 0:
      result = v3 == *(double *)(a1 + 24);
      break;
    case 1:
      result = v3 != *(double *)(a1 + 24);
      break;
    case 2:
      result = v3 > *(double *)(a1 + 24);
      break;
    case 3:
      result = v3 < *(double *)(a1 + 24);
      break;
    case 4:
      result = v3 >= *(double *)(a1 + 24);
      break;
    case 5:
      result = v3 <= *(double *)(a1 + 24);
      break;
    default:
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "unexpected operator type");
      __cxa_throw(exception, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
  }
  return result;
}

void sub_20A843240(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void mlcore::ComparisonPredicate<double>::_SQLExpression(uint64_t a1@<X0>, uint64_t *a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  _OWORD *v15;
  char v16;
  uint64_t v17;
  char v18;
  __int128 v19;
  unint64_t *v20;
  unint64_t v21;
  __int128 v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  uint64_t i;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  _QWORD *v33;
  __int128 v34;
  std::__shared_weak_count *v35;
  unint64_t *p_shared_owners;
  unint64_t v37;
  unint64_t *v38;
  unint64_t v39;
  _QWORD *v40;
  char v41;
  uint64_t v42;
  char v43;
  __int128 v44;
  unint64_t *v45;
  unint64_t v46;
  __int128 v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  uint64_t n;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  unint64_t *v58;
  unint64_t v59;
  _OWORD *v60;
  char v61;
  uint64_t v62;
  char v63;
  __int128 v64;
  unint64_t *v65;
  unint64_t v66;
  __int128 v67;
  std::__shared_weak_count *v68;
  unint64_t *v69;
  unint64_t v70;
  std::__shared_weak_count *v71;
  unint64_t *v72;
  unint64_t v73;
  uint64_t ii;
  unint64_t *v75;
  unint64_t *v76;
  unint64_t v77;
  _OWORD *v78;
  char v79;
  uint64_t v80;
  char v81;
  __int128 v82;
  unint64_t *v83;
  unint64_t v84;
  __int128 v85;
  std::__shared_weak_count *v86;
  unint64_t *v87;
  unint64_t v88;
  std::__shared_weak_count *v89;
  unint64_t *v90;
  unint64_t v91;
  uint64_t j;
  unint64_t *v93;
  unint64_t *v94;
  unint64_t v95;
  _OWORD *v96;
  char v97;
  uint64_t v98;
  char v99;
  __int128 v100;
  unint64_t *v101;
  unint64_t v102;
  __int128 v103;
  std::__shared_weak_count *v104;
  unint64_t *v105;
  unint64_t v106;
  std::__shared_weak_count *v107;
  unint64_t *v108;
  unint64_t v109;
  uint64_t k;
  unint64_t *v111;
  unint64_t *v112;
  unint64_t v113;
  _OWORD *v114;
  char v115;
  uint64_t v116;
  char v117;
  __int128 v118;
  unint64_t *v119;
  unint64_t v120;
  __int128 v121;
  std::__shared_weak_count *v122;
  unint64_t *v123;
  unint64_t v124;
  std::__shared_weak_count *v125;
  unint64_t *v126;
  unint64_t v127;
  uint64_t m;
  unint64_t *v129;
  std::__shared_weak_count *v130;
  unint64_t *v131;
  unint64_t v132;
  std::__shared_weak_count *v133;
  unint64_t *v134;
  unint64_t v135;
  __int128 v136;
  __int128 *v137;
  _QWORD *v138;
  _QWORD *v139;
  __int128 v140;
  uint64_t v141;
  std::__shared_weak_count *v142;
  uint64_t v143;
  std::__shared_weak_count *v144;
  __int128 v145;
  __int128 v146;
  __int128 v147;
  __int128 v148;
  char v149;
  __int128 v150;
  __int128 v151;
  uint64_t v152;

  v152 = *MEMORY[0x24BDAC8D0];
  if (!*(_QWORD *)(a1 + 32))
  {
    v33 = operator new(0x28uLL);
    v33[1] = 0;
    v33[2] = 0;
    *v33 = &off_24C33BCD0;
    v33[3] = &off_24C335CB8;
    v33[4] = *(_QWORD *)(a1 + 24);
    *(_QWORD *)&v34 = v33 + 3;
    *((_QWORD *)&v34 + 1) = v33;
    v35 = *(std::__shared_weak_count **)(a1 + 40);
    *(_OWORD *)(a1 + 32) = v34;
    if (v35)
    {
      p_shared_owners = (unint64_t *)&v35->__shared_owners_;
      do
        v37 = __ldaxr(p_shared_owners);
      while (__stlxr(v37 - 1, p_shared_owners));
      if (!v37)
      {
        ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
        std::__shared_weak_count::__release_weak(v35);
      }
    }
  }
  v6 = *(_QWORD *)(a1 + 8);
  v7 = (std::__shared_weak_count *)a2[1];
  v143 = *a2;
  v144 = v7;
  if (v7)
  {
    v8 = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t *))(*(_QWORD *)v6 + 96))(&v145, v6, &v143);
  v10 = v144;
  if (v144)
  {
    v11 = (unint64_t *)&v144->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  std::allocate_shared[abi:ne180100]<mediaplatform::DatabaseBindParameter,std::allocator<mediaplatform::DatabaseBindParameter>,std::shared_ptr<mediaplatform::DatabaseParameter<int>> &,void>(&v141, *(_QWORD *)(a1 + 32), *(std::__shared_weak_count **)(a1 + 40));
  if ((*(_BYTE *)(a1 + 16) & 4) != 0)
  {
    switch((*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 80))(*(_QWORD *)(a1 + 8)))
    {
      case 0u:
        v147 = v145;
        if (*((_QWORD *)&v145 + 1))
        {
          v13 = (unint64_t *)(*((_QWORD *)&v145 + 1) + 8);
          do
            v14 = __ldxr(v13);
          while (__stxr(v14 + 1, v13));
        }
        LODWORD(v136) = 0;
        std::allocate_shared[abi:ne180100]<mediaplatform::SQLLiteralValue<int>,std::allocator<mediaplatform::SQLLiteralValue<int>>,int,void>(&v140, &v136);
        v148 = v140;
        v140 = 0uLL;
        *(_QWORD *)&v151 = 0;
        v150 = 0uLL;
        v137 = &v150;
        LOBYTE(v138) = 0;
        v15 = operator new(0x20uLL);
        v16 = 0;
        v17 = 0;
        *(_QWORD *)&v150 = v15;
        *((_QWORD *)&v150 + 1) = v15;
        *(_QWORD *)&v151 = v15 + 2;
        do
        {
          v18 = v16;
          v19 = *(&v147 + v17);
          *v15 = v19;
          if (*((_QWORD *)&v19 + 1))
          {
            v20 = (unint64_t *)(*((_QWORD *)&v19 + 1) + 8);
            do
              v21 = __ldxr(v20);
            while (__stxr(v21 + 1, v20));
          }
          ++v15;
          v16 = 1;
          v17 = 1;
        }
        while ((v18 & 1) == 0);
        *((_QWORD *)&v150 + 1) = v15;
        std::allocate_shared[abi:ne180100]<mediaplatform::SQLFunctionExpression,std::allocator<mediaplatform::SQLFunctionExpression>,char const(&)[7],std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>,void>(&v146, (_QWORD **)&v150);
        v22 = v146;
        v146 = 0uLL;
        v23 = (std::__shared_weak_count *)*((_QWORD *)&v145 + 1);
        v145 = v22;
        if (v23)
        {
          v24 = (unint64_t *)&v23->__shared_owners_;
          do
            v25 = __ldaxr(v24);
          while (__stlxr(v25 - 1, v24));
          if (!v25)
          {
            ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
            std::__shared_weak_count::__release_weak(v23);
          }
        }
        v26 = (std::__shared_weak_count *)*((_QWORD *)&v146 + 1);
        if (*((_QWORD *)&v146 + 1))
        {
          v27 = (unint64_t *)(*((_QWORD *)&v146 + 1) + 8);
          do
            v28 = __ldaxr(v27);
          while (__stlxr(v28 - 1, v27));
          if (!v28)
          {
            ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
            std::__shared_weak_count::__release_weak(v26);
          }
        }
        v137 = &v150;
        std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v137);
        for (i = 16; i != -16; i -= 16)
          std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)&v147 + i);
        v30 = (std::__shared_weak_count *)*((_QWORD *)&v140 + 1);
        if (*((_QWORD *)&v140 + 1))
        {
          v31 = (unint64_t *)(*((_QWORD *)&v140 + 1) + 8);
          do
            v32 = __ldaxr(v31);
          while (__stlxr(v32 - 1, v31));
          goto LABEL_164;
        }
        break;
      case 1u:
        v147 = v145;
        if (*((_QWORD *)&v145 + 1))
        {
          v76 = (unint64_t *)(*((_QWORD *)&v145 + 1) + 8);
          do
            v77 = __ldxr(v76);
          while (__stxr(v77 + 1, v76));
        }
        std::allocate_shared[abi:ne180100]<mediaplatform::SQLLiteralValue<long long>,std::allocator<mediaplatform::SQLLiteralValue<long long>>,int,void>(&v140, 0);
        v148 = v140;
        v140 = 0uLL;
        *(_QWORD *)&v151 = 0;
        v150 = 0uLL;
        v137 = &v150;
        LOBYTE(v138) = 0;
        v78 = operator new(0x20uLL);
        v79 = 0;
        v80 = 0;
        *(_QWORD *)&v150 = v78;
        *((_QWORD *)&v150 + 1) = v78;
        *(_QWORD *)&v151 = v78 + 2;
        do
        {
          v81 = v79;
          v82 = *(&v147 + v80);
          *v78 = v82;
          if (*((_QWORD *)&v82 + 1))
          {
            v83 = (unint64_t *)(*((_QWORD *)&v82 + 1) + 8);
            do
              v84 = __ldxr(v83);
            while (__stxr(v84 + 1, v83));
          }
          ++v78;
          v79 = 1;
          v80 = 1;
        }
        while ((v81 & 1) == 0);
        *((_QWORD *)&v150 + 1) = v78;
        std::allocate_shared[abi:ne180100]<mediaplatform::SQLFunctionExpression,std::allocator<mediaplatform::SQLFunctionExpression>,char const(&)[7],std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>,void>(&v146, (_QWORD **)&v150);
        v85 = v146;
        v146 = 0uLL;
        v86 = (std::__shared_weak_count *)*((_QWORD *)&v145 + 1);
        v145 = v85;
        if (v86)
        {
          v87 = (unint64_t *)&v86->__shared_owners_;
          do
            v88 = __ldaxr(v87);
          while (__stlxr(v88 - 1, v87));
          if (!v88)
          {
            ((void (*)(std::__shared_weak_count *))v86->__on_zero_shared)(v86);
            std::__shared_weak_count::__release_weak(v86);
          }
        }
        v89 = (std::__shared_weak_count *)*((_QWORD *)&v146 + 1);
        if (*((_QWORD *)&v146 + 1))
        {
          v90 = (unint64_t *)(*((_QWORD *)&v146 + 1) + 8);
          do
            v91 = __ldaxr(v90);
          while (__stlxr(v91 - 1, v90));
          if (!v91)
          {
            ((void (*)(std::__shared_weak_count *))v89->__on_zero_shared)(v89);
            std::__shared_weak_count::__release_weak(v89);
          }
        }
        v137 = &v150;
        std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v137);
        for (j = 16; j != -16; j -= 16)
          std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)&v147 + j);
        v30 = (std::__shared_weak_count *)*((_QWORD *)&v140 + 1);
        if (*((_QWORD *)&v140 + 1))
        {
          v93 = (unint64_t *)(*((_QWORD *)&v140 + 1) + 8);
          do
            v32 = __ldaxr(v93);
          while (__stlxr(v32 - 1, v93));
          goto LABEL_164;
        }
        break;
      case 2u:
        v147 = v145;
        if (*((_QWORD *)&v145 + 1))
        {
          v94 = (unint64_t *)(*((_QWORD *)&v145 + 1) + 8);
          do
            v95 = __ldxr(v94);
          while (__stxr(v95 + 1, v94));
        }
        std::allocate_shared[abi:ne180100]<mediaplatform::SQLLiteralValue<double>,std::allocator<mediaplatform::SQLLiteralValue<double>>,int,void>(&v140, 0);
        v148 = v140;
        v140 = 0uLL;
        *(_QWORD *)&v151 = 0;
        v150 = 0uLL;
        v137 = &v150;
        LOBYTE(v138) = 0;
        v96 = operator new(0x20uLL);
        v97 = 0;
        v98 = 0;
        *(_QWORD *)&v150 = v96;
        *((_QWORD *)&v150 + 1) = v96;
        *(_QWORD *)&v151 = v96 + 2;
        do
        {
          v99 = v97;
          v100 = *(&v147 + v98);
          *v96 = v100;
          if (*((_QWORD *)&v100 + 1))
          {
            v101 = (unint64_t *)(*((_QWORD *)&v100 + 1) + 8);
            do
              v102 = __ldxr(v101);
            while (__stxr(v102 + 1, v101));
          }
          ++v96;
          v97 = 1;
          v98 = 1;
        }
        while ((v99 & 1) == 0);
        *((_QWORD *)&v150 + 1) = v96;
        std::allocate_shared[abi:ne180100]<mediaplatform::SQLFunctionExpression,std::allocator<mediaplatform::SQLFunctionExpression>,char const(&)[7],std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>,void>(&v146, (_QWORD **)&v150);
        v103 = v146;
        v146 = 0uLL;
        v104 = (std::__shared_weak_count *)*((_QWORD *)&v145 + 1);
        v145 = v103;
        if (v104)
        {
          v105 = (unint64_t *)&v104->__shared_owners_;
          do
            v106 = __ldaxr(v105);
          while (__stlxr(v106 - 1, v105));
          if (!v106)
          {
            ((void (*)(std::__shared_weak_count *))v104->__on_zero_shared)(v104);
            std::__shared_weak_count::__release_weak(v104);
          }
        }
        v107 = (std::__shared_weak_count *)*((_QWORD *)&v146 + 1);
        if (*((_QWORD *)&v146 + 1))
        {
          v108 = (unint64_t *)(*((_QWORD *)&v146 + 1) + 8);
          do
            v109 = __ldaxr(v108);
          while (__stlxr(v109 - 1, v108));
          if (!v109)
          {
            ((void (*)(std::__shared_weak_count *))v107->__on_zero_shared)(v107);
            std::__shared_weak_count::__release_weak(v107);
          }
        }
        v137 = &v150;
        std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v137);
        for (k = 16; k != -16; k -= 16)
          std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)&v147 + k);
        v30 = (std::__shared_weak_count *)*((_QWORD *)&v140 + 1);
        if (*((_QWORD *)&v140 + 1))
        {
          v111 = (unint64_t *)(*((_QWORD *)&v140 + 1) + 8);
          do
            v32 = __ldaxr(v111);
          while (__stlxr(v32 - 1, v111));
          goto LABEL_164;
        }
        break;
      case 3u:
        v147 = v145;
        if (*((_QWORD *)&v145 + 1))
        {
          v112 = (unint64_t *)(*((_QWORD *)&v145 + 1) + 8);
          do
            v113 = __ldxr(v112);
          while (__stxr(v113 + 1, v112));
        }
        std::allocate_shared[abi:ne180100]<mediaplatform::SQLLiteralValue<std::string>,std::allocator<mediaplatform::SQLLiteralValue<std::string>>,char const(&)[1],void>(&v140);
        v148 = v140;
        v140 = 0uLL;
        *(_QWORD *)&v151 = 0;
        v150 = 0uLL;
        v137 = &v150;
        LOBYTE(v138) = 0;
        v114 = operator new(0x20uLL);
        v115 = 0;
        v116 = 0;
        *(_QWORD *)&v150 = v114;
        *((_QWORD *)&v150 + 1) = v114;
        *(_QWORD *)&v151 = v114 + 2;
        do
        {
          v117 = v115;
          v118 = *(&v147 + v116);
          *v114 = v118;
          if (*((_QWORD *)&v118 + 1))
          {
            v119 = (unint64_t *)(*((_QWORD *)&v118 + 1) + 8);
            do
              v120 = __ldxr(v119);
            while (__stxr(v120 + 1, v119));
          }
          ++v114;
          v115 = 1;
          v116 = 1;
        }
        while ((v117 & 1) == 0);
        *((_QWORD *)&v150 + 1) = v114;
        std::allocate_shared[abi:ne180100]<mediaplatform::SQLFunctionExpression,std::allocator<mediaplatform::SQLFunctionExpression>,char const(&)[7],std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>,void>(&v146, (_QWORD **)&v150);
        v121 = v146;
        v146 = 0uLL;
        v122 = (std::__shared_weak_count *)*((_QWORD *)&v145 + 1);
        v145 = v121;
        if (v122)
        {
          v123 = (unint64_t *)&v122->__shared_owners_;
          do
            v124 = __ldaxr(v123);
          while (__stlxr(v124 - 1, v123));
          if (!v124)
          {
            ((void (*)(std::__shared_weak_count *))v122->__on_zero_shared)(v122);
            std::__shared_weak_count::__release_weak(v122);
          }
        }
        v125 = (std::__shared_weak_count *)*((_QWORD *)&v146 + 1);
        if (*((_QWORD *)&v146 + 1))
        {
          v126 = (unint64_t *)(*((_QWORD *)&v146 + 1) + 8);
          do
            v127 = __ldaxr(v126);
          while (__stlxr(v127 - 1, v126));
          if (!v127)
          {
            ((void (*)(std::__shared_weak_count *))v125->__on_zero_shared)(v125);
            std::__shared_weak_count::__release_weak(v125);
          }
        }
        v137 = &v150;
        std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v137);
        for (m = 16; m != -16; m -= 16)
          std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)&v147 + m);
        v30 = (std::__shared_weak_count *)*((_QWORD *)&v140 + 1);
        if (*((_QWORD *)&v140 + 1))
        {
          v129 = (unint64_t *)(*((_QWORD *)&v140 + 1) + 8);
          do
            v32 = __ldaxr(v129);
          while (__stlxr(v32 - 1, v129));
          goto LABEL_164;
        }
        break;
      case 4u:
        v150 = v145;
        if (*((_QWORD *)&v145 + 1))
        {
          v38 = (unint64_t *)(*((_QWORD *)&v145 + 1) + 8);
          do
            v39 = __ldxr(v38);
          while (__stxr(v39 + 1, v38));
        }
        *(_QWORD *)&v147 = &off_24C331510;
        *((_QWORD *)&v147 + 1) = 0;
        v148 = 0uLL;
        v149 = 0;
        std::allocate_shared[abi:ne180100]<mediaplatform::SQLLiteralValue<mediaplatform::Data>,std::allocator<mediaplatform::SQLLiteralValue<mediaplatform::Data>>,mediaplatform::Data,void>(&v136, (const mediaplatform::Data *)&v147);
        v151 = v136;
        v136 = 0uLL;
        v138 = 0;
        v139 = 0;
        v137 = 0;
        *(_QWORD *)&v146 = &v137;
        BYTE8(v146) = 0;
        v40 = operator new(0x20uLL);
        v41 = 0;
        v42 = 0;
        v137 = (__int128 *)v40;
        v138 = v40;
        v139 = v40 + 4;
        do
        {
          v43 = v41;
          v44 = *(&v150 + v42);
          *(_OWORD *)v40 = v44;
          if (*((_QWORD *)&v44 + 1))
          {
            v45 = (unint64_t *)(*((_QWORD *)&v44 + 1) + 8);
            do
              v46 = __ldxr(v45);
            while (__stxr(v46 + 1, v45));
          }
          v40 += 2;
          v41 = 1;
          v42 = 1;
        }
        while ((v43 & 1) == 0);
        v138 = v40;
        std::allocate_shared[abi:ne180100]<mediaplatform::SQLFunctionExpression,std::allocator<mediaplatform::SQLFunctionExpression>,char const(&)[7],std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>,void>(&v140, (_QWORD **)&v137);
        v47 = v140;
        v140 = 0uLL;
        v48 = (std::__shared_weak_count *)*((_QWORD *)&v145 + 1);
        v145 = v47;
        if (v48)
        {
          v49 = (unint64_t *)&v48->__shared_owners_;
          do
            v50 = __ldaxr(v49);
          while (__stlxr(v50 - 1, v49));
          if (!v50)
          {
            ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
            std::__shared_weak_count::__release_weak(v48);
          }
        }
        v51 = (std::__shared_weak_count *)*((_QWORD *)&v140 + 1);
        if (*((_QWORD *)&v140 + 1))
        {
          v52 = (unint64_t *)(*((_QWORD *)&v140 + 1) + 8);
          do
            v53 = __ldaxr(v52);
          while (__stlxr(v53 - 1, v52));
          if (!v53)
          {
            ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
            std::__shared_weak_count::__release_weak(v51);
          }
        }
        *(_QWORD *)&v146 = &v137;
        std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v146);
        for (n = 16; n != -16; n -= 16)
          std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)&v150 + n);
        v55 = (std::__shared_weak_count *)*((_QWORD *)&v136 + 1);
        if (*((_QWORD *)&v136 + 1))
        {
          v56 = (unint64_t *)(*((_QWORD *)&v136 + 1) + 8);
          do
            v57 = __ldaxr(v56);
          while (__stlxr(v57 - 1, v56));
          if (!v57)
          {
            ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
            std::__shared_weak_count::__release_weak(v55);
          }
        }
        if (v149 && *((_QWORD *)&v148 + 1))
          MEMORY[0x20BD27AE4](*((_QWORD *)&v148 + 1), 0x1000C8077774924);
        break;
      default:
        v147 = v145;
        if (*((_QWORD *)&v145 + 1))
        {
          v58 = (unint64_t *)(*((_QWORD *)&v145 + 1) + 8);
          do
            v59 = __ldxr(v58);
          while (__stxr(v59 + 1, v58));
        }
        std::allocate_shared[abi:ne180100]<mediaplatform::SQLLiteralValue<long long>,std::allocator<mediaplatform::SQLLiteralValue<long long>>,int,void>(&v140, 0);
        v148 = v140;
        v140 = 0uLL;
        *(_QWORD *)&v151 = 0;
        v150 = 0uLL;
        v137 = &v150;
        LOBYTE(v138) = 0;
        v60 = operator new(0x20uLL);
        v61 = 0;
        v62 = 0;
        *(_QWORD *)&v150 = v60;
        *((_QWORD *)&v150 + 1) = v60;
        *(_QWORD *)&v151 = v60 + 2;
        do
        {
          v63 = v61;
          v64 = *(&v147 + v62);
          *v60 = v64;
          if (*((_QWORD *)&v64 + 1))
          {
            v65 = (unint64_t *)(*((_QWORD *)&v64 + 1) + 8);
            do
              v66 = __ldxr(v65);
            while (__stxr(v66 + 1, v65));
          }
          ++v60;
          v61 = 1;
          v62 = 1;
        }
        while ((v63 & 1) == 0);
        *((_QWORD *)&v150 + 1) = v60;
        std::allocate_shared[abi:ne180100]<mediaplatform::SQLFunctionExpression,std::allocator<mediaplatform::SQLFunctionExpression>,char const(&)[7],std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>,void>(&v146, (_QWORD **)&v150);
        v67 = v146;
        v146 = 0uLL;
        v68 = (std::__shared_weak_count *)*((_QWORD *)&v145 + 1);
        v145 = v67;
        if (v68)
        {
          v69 = (unint64_t *)&v68->__shared_owners_;
          do
            v70 = __ldaxr(v69);
          while (__stlxr(v70 - 1, v69));
          if (!v70)
          {
            ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
            std::__shared_weak_count::__release_weak(v68);
          }
        }
        v71 = (std::__shared_weak_count *)*((_QWORD *)&v146 + 1);
        if (*((_QWORD *)&v146 + 1))
        {
          v72 = (unint64_t *)(*((_QWORD *)&v146 + 1) + 8);
          do
            v73 = __ldaxr(v72);
          while (__stlxr(v73 - 1, v72));
          if (!v73)
          {
            ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
            std::__shared_weak_count::__release_weak(v71);
          }
        }
        v137 = &v150;
        std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v137);
        for (ii = 16; ii != -16; ii -= 16)
          std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)&v147 + ii);
        v30 = (std::__shared_weak_count *)*((_QWORD *)&v140 + 1);
        if (*((_QWORD *)&v140 + 1))
        {
          v75 = (unint64_t *)(*((_QWORD *)&v140 + 1) + 8);
          do
            v32 = __ldaxr(v75);
          while (__stlxr(v32 - 1, v75));
LABEL_164:
          if (!v32)
          {
            ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
            std::__shared_weak_count::__release_weak(v30);
          }
        }
        break;
    }
  }
  LODWORD(v150) = mlcore::ComparisonPredicateBase::_SQLOperator((mlcore::ComparisonPredicateBase *)a1);
  std::allocate_shared[abi:ne180100]<mediaplatform::SQLBinaryExpression,std::allocator<mediaplatform::SQLBinaryExpression>,std::shared_ptr<mediaplatform::SQLExpression> &,mediaplatform::SQLBinaryExpression::BinaryOperator,std::shared_ptr<mediaplatform::DatabaseBindParameter> &,void>(&v147, v145, *((std::__shared_weak_count **)&v145 + 1), (int *)&v150, &v141);
  *a3 = v147;
  v130 = v142;
  if (v142)
  {
    v131 = (unint64_t *)&v142->__shared_owners_;
    do
      v132 = __ldaxr(v131);
    while (__stlxr(v132 - 1, v131));
    if (!v132)
    {
      ((void (*)(std::__shared_weak_count *))v130->__on_zero_shared)(v130);
      std::__shared_weak_count::__release_weak(v130);
    }
  }
  v133 = (std::__shared_weak_count *)*((_QWORD *)&v145 + 1);
  if (*((_QWORD *)&v145 + 1))
  {
    v134 = (unint64_t *)(*((_QWORD *)&v145 + 1) + 8);
    do
      v135 = __ldaxr(v134);
    while (__stlxr(v135 - 1, v134));
    if (!v135)
    {
      ((void (*)(std::__shared_weak_count *))v133->__on_zero_shared)(v133);
      std::__shared_weak_count::__release_weak(v133);
    }
  }
}

void sub_20A843DF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25)
{
  uint64_t i;

  std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__destroy_vector::operator()[abi:ne180100](&a12);
  for (i = 16; i != -16; i -= 16)
    std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)(&a25 + i));
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)&a21);
  _Unwind_Resume(a1);
}

void mediaplatform::DatabaseParameter<double>::~DatabaseParameter()
{
  JUMPOUT(0x20BD27AFCLL);
}

uint64_t mediaplatform::DatabaseParameter<double>::description()
{
  _QWORD v1[11];
  char v2;
  uint64_t v3;

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v1);
  std::ostream::operator<<();
  std::stringbuf::str();
  v1[0] = *MEMORY[0x24BEDB800];
  *(_QWORD *)((char *)v1 + *(_QWORD *)(v1[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  v1[1] = MEMORY[0x24BEDB848] + 16;
  if (v2 < 0)
    operator delete((void *)v1[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x20BD27A84](&v3);
}

void sub_20A8440D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
  uint64_t v27;

  *(_QWORD *)(v27 + *(_QWORD *)(*MEMORY[0x24BEDB800] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  if (a24 < 0)
    operator delete(__p);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x20BD27A84](&a27);
  _Unwind_Resume(a1);
}

uint64_t mediaplatform::DatabaseParameter<double>::bind(uint64_t a1, uint64_t a2, int a3)
{
  int v4;

  v4 = sqlite3_bind_double(*(sqlite3_stmt **)(a2 + 24), a3 + 1, *(double *)(a1 + 8));
  return mediaplatform::DatabaseStatement::_checkSQLiteResult(a2, v4);
}

void std::__shared_ptr_emplace<mediaplatform::DatabaseParameter<double>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C33BCD0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<mediaplatform::DatabaseParameter<double>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C33BCD0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x20BD27AFCLL);
}

uint64_t std::__shared_ptr_emplace<mediaplatform::DatabaseParameter<double>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void mlcore::ComparisonPredicate<int>::~ComparisonPredicate(_QWORD *a1)
{
  *a1 = &unk_24C339C50;
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 4));
  JUMPOUT(0x20BD27AFCLL);
}

uint64_t mlcore::ComparisonPredicate<int>::description(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void **v10;
  uint64_t v11;
  std::runtime_error *exception;
  void *__p[2];
  unsigned __int8 v15;
  _QWORD v16[11];
  char v17;
  uint64_t v18;
  char v19;

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  v2 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(v2 + 16);
  v3 = v2 + 16;
  v4 = v5;
  v6 = *(char *)(v3 + 23);
  if (v6 >= 0)
    v7 = v3;
  else
    v7 = v4;
  if (v6 >= 0)
    v8 = *(unsigned __int8 *)(v3 + 23);
  else
    v8 = *(_QWORD *)(v3 + 8);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, v7, v8);
  LOBYTE(__p[0]) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)__p, 1);
  v9 = *(unsigned int *)(a1 + 20);
  if (v9 >= 0xD)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "unexpected operator type");
    __cxa_throw(exception, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, (&off_24C33DA90)[v9]);
  if ((v15 & 0x80u) == 0)
    v10 = __p;
  else
    v10 = (void **)__p[0];
  if ((v15 & 0x80u) == 0)
    v11 = v15;
  else
    v11 = (uint64_t)__p[1];
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)v10, v11);
  v19 = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)&v19, 1);
  std::ostream::operator<<();
  if ((char)v15 < 0)
    operator delete(__p[0]);
  std::stringbuf::str();
  v16[0] = *MEMORY[0x24BEDB800];
  *(_QWORD *)((char *)v16 + *(_QWORD *)(v16[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  v16[1] = MEMORY[0x24BEDB848] + 16;
  if (v17 < 0)
    operator delete((void *)v16[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x20BD27A84](&v18);
}

void sub_20A84439C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  void *v16;

  __cxa_free_exception(v16);
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

BOOL mlcore::ComparisonPredicate<int>::matches(uint64_t a1, _QWORD *a2)
{
  int v3;
  BOOL v5;
  std::runtime_error *exception;

  v3 = mlcore::PropertyCacheBase<int,double,std::string,mediaplatform::Data>::valueForProperty(*a2 + 8, *(_QWORD *)(a1 + 8));
  switch(*(_DWORD *)(a1 + 20))
  {
    case 0:
      return v3 == *(_DWORD *)(a1 + 24);
    case 1:
      v5 = v3 == *(_DWORD *)(a1 + 24);
      return !v5;
    case 2:
      return v3 > *(_DWORD *)(a1 + 24);
    case 3:
      return v3 < *(_DWORD *)(a1 + 24);
    case 4:
      return v3 >= *(_DWORD *)(a1 + 24);
    case 5:
      return v3 <= *(_DWORD *)(a1 + 24);
    case 7:
      v5 = (*(_DWORD *)(a1 + 24) & v3) == 0;
      return !v5;
    case 8:
      v5 = (*(_DWORD *)(a1 + 24) | v3) == 0;
      return !v5;
    default:
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "unexpected operator type");
      __cxa_throw(exception, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
  }
}

void sub_20A8444D4(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t mlcore::ComparisonPredicate<mediaplatform::Data>::~ComparisonPredicate(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = &unk_24C339B48;
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100](a1 + 64);
  *(_QWORD *)(a1 + 24) = &off_24C331510;
  if (*(_BYTE *)(a1 + 56))
  {
    v2 = *(_QWORD *)(a1 + 48);
    if (v2)
      MEMORY[0x20BD27AE4](v2, 0x1000C8077774924);
  }
  return a1;
}

void mlcore::ComparisonPredicate<mediaplatform::Data>::~ComparisonPredicate(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = &unk_24C339B48;
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100](a1 + 64);
  *(_QWORD *)(a1 + 24) = &off_24C331510;
  if (*(_BYTE *)(a1 + 56))
  {
    v2 = *(_QWORD *)(a1 + 48);
    if (v2)
      MEMORY[0x20BD27AE4](v2, 0x1000C8077774924);
  }
  JUMPOUT(0x20BD27AFCLL);
}

uint64_t mlcore::ComparisonPredicate<mediaplatform::Data>::description(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void **v10;
  uint64_t v11;
  std::string *p_p;
  std::string::size_type size;
  std::runtime_error *exception;
  std::string __p;
  void *v17[2];
  unsigned __int8 v18;
  _QWORD v19[11];
  char v20;
  uint64_t v21;

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v19);
  v2 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(v2 + 16);
  v3 = v2 + 16;
  v4 = v5;
  v6 = *(char *)(v3 + 23);
  if (v6 >= 0)
    v7 = v3;
  else
    v7 = v4;
  if (v6 >= 0)
    v8 = *(unsigned __int8 *)(v3 + 23);
  else
    v8 = *(_QWORD *)(v3 + 8);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, v7, v8);
  LOBYTE(v17[0]) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)v17, 1);
  v9 = *(unsigned int *)(a1 + 20);
  if (v9 >= 0xD)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "unexpected operator type");
    __cxa_throw(exception, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
  }
  std::string::basic_string[abi:ne180100]<0>(v17, (&off_24C33DA90)[v9]);
  if ((v18 & 0x80u) == 0)
    v10 = v17;
  else
    v10 = (void **)v17[0];
  if ((v18 & 0x80u) == 0)
    v11 = v18;
  else
    v11 = (uint64_t)v17[1];
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)v10, v11);
  __p.__r_.__value_.__s.__data_[0] = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)&__p, 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"x'", 2);
  mediaplatform::Base16Representation(a1 + 24, &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    size = __p.__r_.__value_.__l.__size_;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)p_p, size);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"'", 1);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if ((char)v18 < 0)
    operator delete(v17[0]);
  std::stringbuf::str();
  v19[0] = *MEMORY[0x24BEDB800];
  *(_QWORD *)((char *)v19 + *(_QWORD *)(v19[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  v19[1] = MEMORY[0x24BEDB848] + 16;
  if (v20 < 0)
    operator delete((void *)v19[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x20BD27A84](&v21);
}

void sub_20A8447B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22)
{
  void *v22;

  __cxa_free_exception(v22);
  std::ostringstream::~ostringstream((uint64_t)&a22);
  _Unwind_Resume(a1);
}

uint64_t mlcore::ComparisonPredicate<mediaplatform::Data>::matches(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  void *__dst[2];
  char v8;
  _QWORD v9[3];
  void *__src;
  char v11;

  v2 = a1;
  mlcore::PropertyCacheBase<mediaplatform::Data>::valueForProperty((mediaplatform::Data *)v9, *a2 + 8, *(_QWORD *)(a1 + 8));
  std::string::basic_string[abi:ne180100](__dst, *(void **)(v2 + 48), *(_QWORD *)(v2 + 32));
  LODWORD(v2) = *(_DWORD *)(v2 + 20);
  std::string::basic_string[abi:ne180100](__p, __src, v9[1]);
  v3 = mlcore::_string_matches((unsigned __int8 *)__dst, v2, (unsigned __int8 *)__p);
  if (v6 < 0)
    operator delete(__p[0]);
  if (v8 < 0)
    operator delete(__dst[0]);
  v9[0] = &off_24C331510;
  if (v11 && __src)
    MEMORY[0x20BD27AE4](__src, 0x1000C8077774924);
  return v3;
}

void sub_20A8448D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (a26)
  {
    if (a25)
      MEMORY[0x20BD27AE4](a25, 0x1000C8077774924);
  }
  _Unwind_Resume(exception_object);
}

void mlcore::ComparisonPredicate<mediaplatform::Data>::_SQLExpression(uint64_t a1@<X0>, uint64_t *a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  _OWORD *v15;
  char v16;
  uint64_t v17;
  char v18;
  __int128 v19;
  unint64_t *v20;
  unint64_t v21;
  __int128 v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  uint64_t i;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  _QWORD *v33;
  __int128 v34;
  std::__shared_weak_count *v35;
  unint64_t *p_shared_owners;
  unint64_t v37;
  unint64_t *v38;
  unint64_t v39;
  _QWORD *v40;
  char v41;
  uint64_t v42;
  char v43;
  __int128 v44;
  unint64_t *v45;
  unint64_t v46;
  __int128 v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  uint64_t n;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  unint64_t *v58;
  unint64_t v59;
  _OWORD *v60;
  char v61;
  uint64_t v62;
  char v63;
  __int128 v64;
  unint64_t *v65;
  unint64_t v66;
  __int128 v67;
  std::__shared_weak_count *v68;
  unint64_t *v69;
  unint64_t v70;
  std::__shared_weak_count *v71;
  unint64_t *v72;
  unint64_t v73;
  uint64_t ii;
  unint64_t *v75;
  unint64_t *v76;
  unint64_t v77;
  _OWORD *v78;
  char v79;
  uint64_t v80;
  char v81;
  __int128 v82;
  unint64_t *v83;
  unint64_t v84;
  __int128 v85;
  std::__shared_weak_count *v86;
  unint64_t *v87;
  unint64_t v88;
  std::__shared_weak_count *v89;
  unint64_t *v90;
  unint64_t v91;
  uint64_t j;
  unint64_t *v93;
  unint64_t *v94;
  unint64_t v95;
  _OWORD *v96;
  char v97;
  uint64_t v98;
  char v99;
  __int128 v100;
  unint64_t *v101;
  unint64_t v102;
  __int128 v103;
  std::__shared_weak_count *v104;
  unint64_t *v105;
  unint64_t v106;
  std::__shared_weak_count *v107;
  unint64_t *v108;
  unint64_t v109;
  uint64_t k;
  unint64_t *v111;
  unint64_t *v112;
  unint64_t v113;
  _OWORD *v114;
  char v115;
  uint64_t v116;
  char v117;
  __int128 v118;
  unint64_t *v119;
  unint64_t v120;
  __int128 v121;
  std::__shared_weak_count *v122;
  unint64_t *v123;
  unint64_t v124;
  std::__shared_weak_count *v125;
  unint64_t *v126;
  unint64_t v127;
  uint64_t m;
  unint64_t *v129;
  std::__shared_weak_count *v130;
  unint64_t *v131;
  unint64_t v132;
  std::__shared_weak_count *v133;
  unint64_t *v134;
  unint64_t v135;
  __int128 v136;
  __int128 *v137;
  _QWORD *v138;
  _QWORD *v139;
  __int128 v140;
  uint64_t v141;
  std::__shared_weak_count *v142;
  uint64_t v143;
  std::__shared_weak_count *v144;
  __int128 v145;
  __int128 v146;
  __int128 v147;
  __int128 v148;
  char v149;
  __int128 v150;
  __int128 v151;
  uint64_t v152;

  v152 = *MEMORY[0x24BDAC8D0];
  if (!*(_QWORD *)(a1 + 64))
  {
    v33 = operator new(0x48uLL);
    v33[1] = 0;
    v33[2] = 0;
    *v33 = &off_24C33BC60;
    v33[3] = &off_24C335C28;
    mediaplatform::Data::Data((mediaplatform::Data *)(v33 + 4), (const mediaplatform::Data *)(a1 + 24));
    *(_QWORD *)&v34 = v33 + 3;
    *((_QWORD *)&v34 + 1) = v33;
    v35 = *(std::__shared_weak_count **)(a1 + 72);
    *(_OWORD *)(a1 + 64) = v34;
    if (v35)
    {
      p_shared_owners = (unint64_t *)&v35->__shared_owners_;
      do
        v37 = __ldaxr(p_shared_owners);
      while (__stlxr(v37 - 1, p_shared_owners));
      if (!v37)
      {
        ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
        std::__shared_weak_count::__release_weak(v35);
      }
    }
  }
  v6 = *(_QWORD *)(a1 + 8);
  v7 = (std::__shared_weak_count *)a2[1];
  v143 = *a2;
  v144 = v7;
  if (v7)
  {
    v8 = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t *))(*(_QWORD *)v6 + 96))(&v145, v6, &v143);
  v10 = v144;
  if (v144)
  {
    v11 = (unint64_t *)&v144->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  std::allocate_shared[abi:ne180100]<mediaplatform::DatabaseBindParameter,std::allocator<mediaplatform::DatabaseBindParameter>,std::shared_ptr<mediaplatform::DatabaseParameter<int>> &,void>(&v141, *(_QWORD *)(a1 + 64), *(std::__shared_weak_count **)(a1 + 72));
  if ((*(_BYTE *)(a1 + 16) & 4) != 0)
  {
    switch((*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 80))(*(_QWORD *)(a1 + 8)))
    {
      case 0u:
        v147 = v145;
        if (*((_QWORD *)&v145 + 1))
        {
          v13 = (unint64_t *)(*((_QWORD *)&v145 + 1) + 8);
          do
            v14 = __ldxr(v13);
          while (__stxr(v14 + 1, v13));
        }
        LODWORD(v136) = 0;
        std::allocate_shared[abi:ne180100]<mediaplatform::SQLLiteralValue<int>,std::allocator<mediaplatform::SQLLiteralValue<int>>,int,void>(&v140, &v136);
        v148 = v140;
        v140 = 0uLL;
        *(_QWORD *)&v151 = 0;
        v150 = 0uLL;
        v137 = &v150;
        LOBYTE(v138) = 0;
        v15 = operator new(0x20uLL);
        v16 = 0;
        v17 = 0;
        *(_QWORD *)&v150 = v15;
        *((_QWORD *)&v150 + 1) = v15;
        *(_QWORD *)&v151 = v15 + 2;
        do
        {
          v18 = v16;
          v19 = *(&v147 + v17);
          *v15 = v19;
          if (*((_QWORD *)&v19 + 1))
          {
            v20 = (unint64_t *)(*((_QWORD *)&v19 + 1) + 8);
            do
              v21 = __ldxr(v20);
            while (__stxr(v21 + 1, v20));
          }
          ++v15;
          v16 = 1;
          v17 = 1;
        }
        while ((v18 & 1) == 0);
        *((_QWORD *)&v150 + 1) = v15;
        std::allocate_shared[abi:ne180100]<mediaplatform::SQLFunctionExpression,std::allocator<mediaplatform::SQLFunctionExpression>,char const(&)[7],std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>,void>(&v146, (_QWORD **)&v150);
        v22 = v146;
        v146 = 0uLL;
        v23 = (std::__shared_weak_count *)*((_QWORD *)&v145 + 1);
        v145 = v22;
        if (v23)
        {
          v24 = (unint64_t *)&v23->__shared_owners_;
          do
            v25 = __ldaxr(v24);
          while (__stlxr(v25 - 1, v24));
          if (!v25)
          {
            ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
            std::__shared_weak_count::__release_weak(v23);
          }
        }
        v26 = (std::__shared_weak_count *)*((_QWORD *)&v146 + 1);
        if (*((_QWORD *)&v146 + 1))
        {
          v27 = (unint64_t *)(*((_QWORD *)&v146 + 1) + 8);
          do
            v28 = __ldaxr(v27);
          while (__stlxr(v28 - 1, v27));
          if (!v28)
          {
            ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
            std::__shared_weak_count::__release_weak(v26);
          }
        }
        v137 = &v150;
        std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v137);
        for (i = 16; i != -16; i -= 16)
          std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)&v147 + i);
        v30 = (std::__shared_weak_count *)*((_QWORD *)&v140 + 1);
        if (*((_QWORD *)&v140 + 1))
        {
          v31 = (unint64_t *)(*((_QWORD *)&v140 + 1) + 8);
          do
            v32 = __ldaxr(v31);
          while (__stlxr(v32 - 1, v31));
          goto LABEL_164;
        }
        break;
      case 1u:
        v147 = v145;
        if (*((_QWORD *)&v145 + 1))
        {
          v76 = (unint64_t *)(*((_QWORD *)&v145 + 1) + 8);
          do
            v77 = __ldxr(v76);
          while (__stxr(v77 + 1, v76));
        }
        std::allocate_shared[abi:ne180100]<mediaplatform::SQLLiteralValue<long long>,std::allocator<mediaplatform::SQLLiteralValue<long long>>,int,void>(&v140, 0);
        v148 = v140;
        v140 = 0uLL;
        *(_QWORD *)&v151 = 0;
        v150 = 0uLL;
        v137 = &v150;
        LOBYTE(v138) = 0;
        v78 = operator new(0x20uLL);
        v79 = 0;
        v80 = 0;
        *(_QWORD *)&v150 = v78;
        *((_QWORD *)&v150 + 1) = v78;
        *(_QWORD *)&v151 = v78 + 2;
        do
        {
          v81 = v79;
          v82 = *(&v147 + v80);
          *v78 = v82;
          if (*((_QWORD *)&v82 + 1))
          {
            v83 = (unint64_t *)(*((_QWORD *)&v82 + 1) + 8);
            do
              v84 = __ldxr(v83);
            while (__stxr(v84 + 1, v83));
          }
          ++v78;
          v79 = 1;
          v80 = 1;
        }
        while ((v81 & 1) == 0);
        *((_QWORD *)&v150 + 1) = v78;
        std::allocate_shared[abi:ne180100]<mediaplatform::SQLFunctionExpression,std::allocator<mediaplatform::SQLFunctionExpression>,char const(&)[7],std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>,void>(&v146, (_QWORD **)&v150);
        v85 = v146;
        v146 = 0uLL;
        v86 = (std::__shared_weak_count *)*((_QWORD *)&v145 + 1);
        v145 = v85;
        if (v86)
        {
          v87 = (unint64_t *)&v86->__shared_owners_;
          do
            v88 = __ldaxr(v87);
          while (__stlxr(v88 - 1, v87));
          if (!v88)
          {
            ((void (*)(std::__shared_weak_count *))v86->__on_zero_shared)(v86);
            std::__shared_weak_count::__release_weak(v86);
          }
        }
        v89 = (std::__shared_weak_count *)*((_QWORD *)&v146 + 1);
        if (*((_QWORD *)&v146 + 1))
        {
          v90 = (unint64_t *)(*((_QWORD *)&v146 + 1) + 8);
          do
            v91 = __ldaxr(v90);
          while (__stlxr(v91 - 1, v90));
          if (!v91)
          {
            ((void (*)(std::__shared_weak_count *))v89->__on_zero_shared)(v89);
            std::__shared_weak_count::__release_weak(v89);
          }
        }
        v137 = &v150;
        std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v137);
        for (j = 16; j != -16; j -= 16)
          std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)&v147 + j);
        v30 = (std::__shared_weak_count *)*((_QWORD *)&v140 + 1);
        if (*((_QWORD *)&v140 + 1))
        {
          v93 = (unint64_t *)(*((_QWORD *)&v140 + 1) + 8);
          do
            v32 = __ldaxr(v93);
          while (__stlxr(v32 - 1, v93));
          goto LABEL_164;
        }
        break;
      case 2u:
        v147 = v145;
        if (*((_QWORD *)&v145 + 1))
        {
          v94 = (unint64_t *)(*((_QWORD *)&v145 + 1) + 8);
          do
            v95 = __ldxr(v94);
          while (__stxr(v95 + 1, v94));
        }
        std::allocate_shared[abi:ne180100]<mediaplatform::SQLLiteralValue<double>,std::allocator<mediaplatform::SQLLiteralValue<double>>,int,void>(&v140, 0);
        v148 = v140;
        v140 = 0uLL;
        *(_QWORD *)&v151 = 0;
        v150 = 0uLL;
        v137 = &v150;
        LOBYTE(v138) = 0;
        v96 = operator new(0x20uLL);
        v97 = 0;
        v98 = 0;
        *(_QWORD *)&v150 = v96;
        *((_QWORD *)&v150 + 1) = v96;
        *(_QWORD *)&v151 = v96 + 2;
        do
        {
          v99 = v97;
          v100 = *(&v147 + v98);
          *v96 = v100;
          if (*((_QWORD *)&v100 + 1))
          {
            v101 = (unint64_t *)(*((_QWORD *)&v100 + 1) + 8);
            do
              v102 = __ldxr(v101);
            while (__stxr(v102 + 1, v101));
          }
          ++v96;
          v97 = 1;
          v98 = 1;
        }
        while ((v99 & 1) == 0);
        *((_QWORD *)&v150 + 1) = v96;
        std::allocate_shared[abi:ne180100]<mediaplatform::SQLFunctionExpression,std::allocator<mediaplatform::SQLFunctionExpression>,char const(&)[7],std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>,void>(&v146, (_QWORD **)&v150);
        v103 = v146;
        v146 = 0uLL;
        v104 = (std::__shared_weak_count *)*((_QWORD *)&v145 + 1);
        v145 = v103;
        if (v104)
        {
          v105 = (unint64_t *)&v104->__shared_owners_;
          do
            v106 = __ldaxr(v105);
          while (__stlxr(v106 - 1, v105));
          if (!v106)
          {
            ((void (*)(std::__shared_weak_count *))v104->__on_zero_shared)(v104);
            std::__shared_weak_count::__release_weak(v104);
          }
        }
        v107 = (std::__shared_weak_count *)*((_QWORD *)&v146 + 1);
        if (*((_QWORD *)&v146 + 1))
        {
          v108 = (unint64_t *)(*((_QWORD *)&v146 + 1) + 8);
          do
            v109 = __ldaxr(v108);
          while (__stlxr(v109 - 1, v108));
          if (!v109)
          {
            ((void (*)(std::__shared_weak_count *))v107->__on_zero_shared)(v107);
            std::__shared_weak_count::__release_weak(v107);
          }
        }
        v137 = &v150;
        std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v137);
        for (k = 16; k != -16; k -= 16)
          std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)&v147 + k);
        v30 = (std::__shared_weak_count *)*((_QWORD *)&v140 + 1);
        if (*((_QWORD *)&v140 + 1))
        {
          v111 = (unint64_t *)(*((_QWORD *)&v140 + 1) + 8);
          do
            v32 = __ldaxr(v111);
          while (__stlxr(v32 - 1, v111));
          goto LABEL_164;
        }
        break;
      case 3u:
        v147 = v145;
        if (*((_QWORD *)&v145 + 1))
        {
          v112 = (unint64_t *)(*((_QWORD *)&v145 + 1) + 8);
          do
            v113 = __ldxr(v112);
          while (__stxr(v113 + 1, v112));
        }
        std::allocate_shared[abi:ne180100]<mediaplatform::SQLLiteralValue<std::string>,std::allocator<mediaplatform::SQLLiteralValue<std::string>>,char const(&)[1],void>(&v140);
        v148 = v140;
        v140 = 0uLL;
        *(_QWORD *)&v151 = 0;
        v150 = 0uLL;
        v137 = &v150;
        LOBYTE(v138) = 0;
        v114 = operator new(0x20uLL);
        v115 = 0;
        v116 = 0;
        *(_QWORD *)&v150 = v114;
        *((_QWORD *)&v150 + 1) = v114;
        *(_QWORD *)&v151 = v114 + 2;
        do
        {
          v117 = v115;
          v118 = *(&v147 + v116);
          *v114 = v118;
          if (*((_QWORD *)&v118 + 1))
          {
            v119 = (unint64_t *)(*((_QWORD *)&v118 + 1) + 8);
            do
              v120 = __ldxr(v119);
            while (__stxr(v120 + 1, v119));
          }
          ++v114;
          v115 = 1;
          v116 = 1;
        }
        while ((v117 & 1) == 0);
        *((_QWORD *)&v150 + 1) = v114;
        std::allocate_shared[abi:ne180100]<mediaplatform::SQLFunctionExpression,std::allocator<mediaplatform::SQLFunctionExpression>,char const(&)[7],std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>,void>(&v146, (_QWORD **)&v150);
        v121 = v146;
        v146 = 0uLL;
        v122 = (std::__shared_weak_count *)*((_QWORD *)&v145 + 1);
        v145 = v121;
        if (v122)
        {
          v123 = (unint64_t *)&v122->__shared_owners_;
          do
            v124 = __ldaxr(v123);
          while (__stlxr(v124 - 1, v123));
          if (!v124)
          {
            ((void (*)(std::__shared_weak_count *))v122->__on_zero_shared)(v122);
            std::__shared_weak_count::__release_weak(v122);
          }
        }
        v125 = (std::__shared_weak_count *)*((_QWORD *)&v146 + 1);
        if (*((_QWORD *)&v146 + 1))
        {
          v126 = (unint64_t *)(*((_QWORD *)&v146 + 1) + 8);
          do
            v127 = __ldaxr(v126);
          while (__stlxr(v127 - 1, v126));
          if (!v127)
          {
            ((void (*)(std::__shared_weak_count *))v125->__on_zero_shared)(v125);
            std::__shared_weak_count::__release_weak(v125);
          }
        }
        v137 = &v150;
        std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v137);
        for (m = 16; m != -16; m -= 16)
          std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)&v147 + m);
        v30 = (std::__shared_weak_count *)*((_QWORD *)&v140 + 1);
        if (*((_QWORD *)&v140 + 1))
        {
          v129 = (unint64_t *)(*((_QWORD *)&v140 + 1) + 8);
          do
            v32 = __ldaxr(v129);
          while (__stlxr(v32 - 1, v129));
          goto LABEL_164;
        }
        break;
      case 4u:
        v150 = v145;
        if (*((_QWORD *)&v145 + 1))
        {
          v38 = (unint64_t *)(*((_QWORD *)&v145 + 1) + 8);
          do
            v39 = __ldxr(v38);
          while (__stxr(v39 + 1, v38));
        }
        *(_QWORD *)&v147 = &off_24C331510;
        *((_QWORD *)&v147 + 1) = 0;
        v148 = 0uLL;
        v149 = 0;
        std::allocate_shared[abi:ne180100]<mediaplatform::SQLLiteralValue<mediaplatform::Data>,std::allocator<mediaplatform::SQLLiteralValue<mediaplatform::Data>>,mediaplatform::Data,void>(&v136, (const mediaplatform::Data *)&v147);
        v151 = v136;
        v136 = 0uLL;
        v138 = 0;
        v139 = 0;
        v137 = 0;
        *(_QWORD *)&v146 = &v137;
        BYTE8(v146) = 0;
        v40 = operator new(0x20uLL);
        v41 = 0;
        v42 = 0;
        v137 = (__int128 *)v40;
        v138 = v40;
        v139 = v40 + 4;
        do
        {
          v43 = v41;
          v44 = *(&v150 + v42);
          *(_OWORD *)v40 = v44;
          if (*((_QWORD *)&v44 + 1))
          {
            v45 = (unint64_t *)(*((_QWORD *)&v44 + 1) + 8);
            do
              v46 = __ldxr(v45);
            while (__stxr(v46 + 1, v45));
          }
          v40 += 2;
          v41 = 1;
          v42 = 1;
        }
        while ((v43 & 1) == 0);
        v138 = v40;
        std::allocate_shared[abi:ne180100]<mediaplatform::SQLFunctionExpression,std::allocator<mediaplatform::SQLFunctionExpression>,char const(&)[7],std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>,void>(&v140, (_QWORD **)&v137);
        v47 = v140;
        v140 = 0uLL;
        v48 = (std::__shared_weak_count *)*((_QWORD *)&v145 + 1);
        v145 = v47;
        if (v48)
        {
          v49 = (unint64_t *)&v48->__shared_owners_;
          do
            v50 = __ldaxr(v49);
          while (__stlxr(v50 - 1, v49));
          if (!v50)
          {
            ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
            std::__shared_weak_count::__release_weak(v48);
          }
        }
        v51 = (std::__shared_weak_count *)*((_QWORD *)&v140 + 1);
        if (*((_QWORD *)&v140 + 1))
        {
          v52 = (unint64_t *)(*((_QWORD *)&v140 + 1) + 8);
          do
            v53 = __ldaxr(v52);
          while (__stlxr(v53 - 1, v52));
          if (!v53)
          {
            ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
            std::__shared_weak_count::__release_weak(v51);
          }
        }
        *(_QWORD *)&v146 = &v137;
        std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v146);
        for (n = 16; n != -16; n -= 16)
          std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)&v150 + n);
        v55 = (std::__shared_weak_count *)*((_QWORD *)&v136 + 1);
        if (*((_QWORD *)&v136 + 1))
        {
          v56 = (unint64_t *)(*((_QWORD *)&v136 + 1) + 8);
          do
            v57 = __ldaxr(v56);
          while (__stlxr(v57 - 1, v56));
          if (!v57)
          {
            ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
            std::__shared_weak_count::__release_weak(v55);
          }
        }
        if (v149 && *((_QWORD *)&v148 + 1))
          MEMORY[0x20BD27AE4](*((_QWORD *)&v148 + 1), 0x1000C8077774924);
        break;
      default:
        v147 = v145;
        if (*((_QWORD *)&v145 + 1))
        {
          v58 = (unint64_t *)(*((_QWORD *)&v145 + 1) + 8);
          do
            v59 = __ldxr(v58);
          while (__stxr(v59 + 1, v58));
        }
        std::allocate_shared[abi:ne180100]<mediaplatform::SQLLiteralValue<long long>,std::allocator<mediaplatform::SQLLiteralValue<long long>>,int,void>(&v140, 0);
        v148 = v140;
        v140 = 0uLL;
        *(_QWORD *)&v151 = 0;
        v150 = 0uLL;
        v137 = &v150;
        LOBYTE(v138) = 0;
        v60 = operator new(0x20uLL);
        v61 = 0;
        v62 = 0;
        *(_QWORD *)&v150 = v60;
        *((_QWORD *)&v150 + 1) = v60;
        *(_QWORD *)&v151 = v60 + 2;
        do
        {
          v63 = v61;
          v64 = *(&v147 + v62);
          *v60 = v64;
          if (*((_QWORD *)&v64 + 1))
          {
            v65 = (unint64_t *)(*((_QWORD *)&v64 + 1) + 8);
            do
              v66 = __ldxr(v65);
            while (__stxr(v66 + 1, v65));
          }
          ++v60;
          v61 = 1;
          v62 = 1;
        }
        while ((v63 & 1) == 0);
        *((_QWORD *)&v150 + 1) = v60;
        std::allocate_shared[abi:ne180100]<mediaplatform::SQLFunctionExpression,std::allocator<mediaplatform::SQLFunctionExpression>,char const(&)[7],std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>,void>(&v146, (_QWORD **)&v150);
        v67 = v146;
        v146 = 0uLL;
        v68 = (std::__shared_weak_count *)*((_QWORD *)&v145 + 1);
        v145 = v67;
        if (v68)
        {
          v69 = (unint64_t *)&v68->__shared_owners_;
          do
            v70 = __ldaxr(v69);
          while (__stlxr(v70 - 1, v69));
          if (!v70)
          {
            ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
            std::__shared_weak_count::__release_weak(v68);
          }
        }
        v71 = (std::__shared_weak_count *)*((_QWORD *)&v146 + 1);
        if (*((_QWORD *)&v146 + 1))
        {
          v72 = (unint64_t *)(*((_QWORD *)&v146 + 1) + 8);
          do
            v73 = __ldaxr(v72);
          while (__stlxr(v73 - 1, v72));
          if (!v73)
          {
            ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
            std::__shared_weak_count::__release_weak(v71);
          }
        }
        v137 = &v150;
        std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v137);
        for (ii = 16; ii != -16; ii -= 16)
          std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)&v147 + ii);
        v30 = (std::__shared_weak_count *)*((_QWORD *)&v140 + 1);
        if (*((_QWORD *)&v140 + 1))
        {
          v75 = (unint64_t *)(*((_QWORD *)&v140 + 1) + 8);
          do
            v32 = __ldaxr(v75);
          while (__stlxr(v32 - 1, v75));
LABEL_164:
          if (!v32)
          {
            ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
            std::__shared_weak_count::__release_weak(v30);
          }
        }
        break;
    }
  }
  LODWORD(v150) = mlcore::ComparisonPredicateBase::_SQLOperator((mlcore::ComparisonPredicateBase *)a1);
  std::allocate_shared[abi:ne180100]<mediaplatform::SQLBinaryExpression,std::allocator<mediaplatform::SQLBinaryExpression>,std::shared_ptr<mediaplatform::SQLExpression> &,mediaplatform::SQLBinaryExpression::BinaryOperator,std::shared_ptr<mediaplatform::DatabaseBindParameter> &,void>(&v147, v145, *((std::__shared_weak_count **)&v145 + 1), (int *)&v150, &v141);
  *a3 = v147;
  v130 = v142;
  if (v142)
  {
    v131 = (unint64_t *)&v142->__shared_owners_;
    do
      v132 = __ldaxr(v131);
    while (__stlxr(v132 - 1, v131));
    if (!v132)
    {
      ((void (*)(std::__shared_weak_count *))v130->__on_zero_shared)(v130);
      std::__shared_weak_count::__release_weak(v130);
    }
  }
  v133 = (std::__shared_weak_count *)*((_QWORD *)&v145 + 1);
  if (*((_QWORD *)&v145 + 1))
  {
    v134 = (unint64_t *)(*((_QWORD *)&v145 + 1) + 8);
    do
      v135 = __ldaxr(v134);
    while (__stlxr(v135 - 1, v134));
    if (!v135)
    {
      ((void (*)(std::__shared_weak_count *))v133->__on_zero_shared)(v133);
      std::__shared_weak_count::__release_weak(v133);
    }
  }
}

void sub_20A8454F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25)
{
  uint64_t i;

  std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__destroy_vector::operator()[abi:ne180100](&a12);
  for (i = 16; i != -16; i -= 16)
    std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)(&a25 + i));
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)&a21);
  _Unwind_Resume(a1);
}

uint64_t mediaplatform::DatabaseParameter<mediaplatform::Data>::~DatabaseParameter(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = &off_24C335C28;
  *(_QWORD *)(a1 + 8) = &off_24C331510;
  if (*(_BYTE *)(a1 + 40))
  {
    v2 = *(_QWORD *)(a1 + 32);
    if (v2)
      MEMORY[0x20BD27AE4](v2, 0x1000C8077774924);
  }
  return a1;
}

void mediaplatform::DatabaseParameter<mediaplatform::Data>::~DatabaseParameter(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)a1 = &off_24C335C28;
  *(_QWORD *)(a1 + 8) = &off_24C331510;
  if (*(_BYTE *)(a1 + 40))
  {
    v1 = *(_QWORD *)(a1 + 32);
    if (v1)
      MEMORY[0x20BD27AE4](v1, 0x1000C8077774924);
  }
  JUMPOUT(0x20BD27AFCLL);
}

uint64_t mediaplatform::DatabaseParameter<mediaplatform::Data>::description@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  const void *v3;
  size_t v4;
  void *v5;
  uint64_t result;
  _QWORD v7[4];
  char v8;

  v3 = *(const void **)(a1 + 32);
  v4 = *(_QWORD *)(a1 + 16);
  v7[0] = &off_24C331510;
  v7[1] = v4;
  v7[2] = v4;
  if (v4)
    v5 = (void *)operator new[]();
  else
    v5 = 0;
  v7[3] = v5;
  v8 = 1;
  if (v3)
    memcpy(v5, v3, v4);
  else
    bzero(v5, v4);
  result = mediaplatform::SQLStringValue<mediaplatform::Data>(a2, (uint64_t)v7);
  if (v5)
    JUMPOUT(0x20BD27AE4);
  return result;
}

void sub_20A845898(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    MEMORY[0x20BD27AE4](v1, 0x1000C8077774924);
  _Unwind_Resume(exception_object);
}

uint64_t mediaplatform::DatabaseParameter<mediaplatform::Data>::bind(uint64_t a1, uint64_t a2, int a3)
{
  const void *v5;
  size_t v6;
  void *v7;
  int v8;
  uint64_t result;

  v5 = *(const void **)(a1 + 32);
  v6 = *(_QWORD *)(a1 + 16);
  if (v6)
    v7 = (void *)operator new[]();
  else
    v7 = 0;
  if (v5)
    memcpy(v7, v5, v6);
  else
    bzero(v7, v6);
  v8 = sqlite3_bind_blob(*(sqlite3_stmt **)(a2 + 24), a3 + 1, v7, v6, (void (__cdecl *)(void *))0xFFFFFFFFFFFFFFFFLL);
  result = mediaplatform::DatabaseStatement::_checkSQLiteResult(a2, v8);
  if (v7)
    JUMPOUT(0x20BD27AE4);
  return result;
}

void sub_20A845990(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    MEMORY[0x20BD27AE4](v1, 0x1000C8077774924);
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_emplace<mediaplatform::DatabaseParameter<mediaplatform::Data>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C33BC60;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<mediaplatform::DatabaseParameter<mediaplatform::Data>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C33BC60;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x20BD27AFCLL);
}

uint64_t std::__shared_ptr_emplace<mediaplatform::DatabaseParameter<mediaplatform::Data>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void mlcore::ComparisonPropertyPredicate::~ComparisonPropertyPredicate(mlcore::ComparisonPropertyPredicate *this)
{
  JUMPOUT(0x20BD27AFCLL);
}

_QWORD *mlcore::ComparisonPropertyPredicate::description@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "");
}

uint64_t mlcore::ComparisonPropertyPredicate::matches()
{
  return 0;
}

uint64_t mlcore::ComparisonPredicateBase::ComparisonPredicateBase(uint64_t result, uint64_t a2, int a3, int a4)
{
  *(_QWORD *)result = off_24C33A380;
  *(_QWORD *)(result + 8) = a2;
  *(_DWORD *)(result + 16) = a4;
  *(_DWORD *)(result + 20) = a3;
  return result;
}

uint64_t mlcore::ComparisonPredicate<long long>::property(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8);
}

uint64_t mlcore::ComparisonPredicate<long long>::value(uint64_t a1)
{
  return a1 + 24;
}

uint64_t mlcore::ComparisonPredicate<long long>::setValue(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  *(_QWORD *)(result + 24) = *a2;
  v2 = *(_QWORD *)(result + 32);
  if (v2)
    *(_QWORD *)(v2 + 8) = *a2;
  return result;
}

uint64_t mlcore::ComparisonPredicate<std::string>::property(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8);
}

uint64_t mlcore::ComparisonPredicate<std::string>::value(uint64_t a1)
{
  return a1 + 24;
}

std::string *mlcore::ComparisonPredicate<std::string>::setValue(std::string *a1, const std::string *a2)
{
  std::string *result;
  std::string::pointer data;

  result = std::string::operator=(a1 + 1, a2);
  data = a1[2].__r_.__value_.__l.__data_;
  if (data)
    return std::string::operator=((std::string *)(data + 8), a2);
  return result;
}

double mlcore::ComparisonPredicate<double>::ComparisonPredicate(uint64_t a1, uint64_t a2, int a3, double *a4, int a5)
{
  double result;

  *(_DWORD *)(a1 + 16) = a5;
  *(_DWORD *)(a1 + 20) = a3;
  *(_QWORD *)a1 = &unk_24C339BF8;
  *(_QWORD *)(a1 + 8) = a2;
  result = *a4;
  *(double *)(a1 + 24) = *a4;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  return result;
}

{
  double result;

  *(_DWORD *)(a1 + 16) = a5;
  *(_DWORD *)(a1 + 20) = a3;
  *(_QWORD *)a1 = &unk_24C339BF8;
  *(_QWORD *)(a1 + 8) = a2;
  result = *a4;
  *(double *)(a1 + 24) = *a4;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  return result;
}

uint64_t mlcore::ComparisonPredicate<double>::property(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8);
}

uint64_t mlcore::ComparisonPredicate<double>::value(uint64_t a1)
{
  return a1 + 24;
}

double mlcore::ComparisonPredicate<double>::setValue(uint64_t a1, double *a2)
{
  double result;
  uint64_t v3;

  result = *a2;
  *(double *)(a1 + 24) = *a2;
  v3 = *(_QWORD *)(a1 + 32);
  if (v3)
  {
    result = *a2;
    *(double *)(v3 + 8) = *a2;
  }
  return result;
}

uint64_t mlcore::ComparisonPredicate<int>::property(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8);
}

uint64_t mlcore::ComparisonPredicate<int>::value(uint64_t a1)
{
  return a1 + 24;
}

uint64_t mlcore::ComparisonPredicate<int>::setValue(uint64_t result, _DWORD *a2)
{
  uint64_t v2;

  *(_DWORD *)(result + 24) = *a2;
  v2 = *(_QWORD *)(result + 32);
  if (v2)
    *(_DWORD *)(v2 + 8) = *a2;
  return result;
}

uint64_t mlcore::ComparisonPredicate<mediaplatform::Data>::ComparisonPredicate(uint64_t a1, uint64_t a2, int a3, mediaplatform::Data *a4, int a5)
{
  *(_DWORD *)(a1 + 16) = a5;
  *(_DWORD *)(a1 + 20) = a3;
  *(_QWORD *)a1 = &unk_24C339B48;
  *(_QWORD *)(a1 + 8) = a2;
  mediaplatform::Data::Data((mediaplatform::Data *)(a1 + 24), a4);
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  return a1;
}

{
  *(_DWORD *)(a1 + 16) = a5;
  *(_DWORD *)(a1 + 20) = a3;
  *(_QWORD *)a1 = &unk_24C339B48;
  *(_QWORD *)(a1 + 8) = a2;
  mediaplatform::Data::Data((mediaplatform::Data *)(a1 + 24), a4);
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  return a1;
}

uint64_t mlcore::ComparisonPredicate<mediaplatform::Data>::property(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8);
}

uint64_t mlcore::ComparisonPredicate<mediaplatform::Data>::value(uint64_t a1)
{
  return a1 + 24;
}

uint64_t mlcore::ComparisonPredicate<mediaplatform::Data>::setValue(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = mediaplatform::Data::operator=(a1 + 24, a2);
  v5 = *(_QWORD *)(a1 + 64);
  if (v5)
    return mediaplatform::Data::operator=(v5 + 8, a2);
  return result;
}

uint64_t mlcore::ComparisonPropertyPredicate::ComparisonPropertyPredicate(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  *(_DWORD *)(result + 16) = 0;
  *(_DWORD *)(result + 20) = a3;
  *(_QWORD *)result = &off_24C33A5A8;
  *(_QWORD *)(result + 8) = a2;
  *(_QWORD *)(result + 24) = a4;
  return result;
}

{
  *(_DWORD *)(result + 16) = 0;
  *(_DWORD *)(result + 20) = a3;
  *(_QWORD *)result = &off_24C33A5A8;
  *(_QWORD *)(result + 8) = a2;
  *(_QWORD *)(result + 24) = a4;
  return result;
}

void mediaplatform::SQLBeginTransactionStatement::~SQLBeginTransactionStatement(mediaplatform::SQLBeginTransactionStatement *this)
{
  JUMPOUT(0x20BD27AFCLL);
}

void mediaplatform::SQLBeginTransactionStatement::sql(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  std::string v7;
  void *__p;
  uint64_t v9;
  uint64_t v10;

  __p = 0;
  v9 = 0;
  v10 = 0;
  v3 = *(unsigned int *)(a1 + 8);
  if (v3 >= 3)
  {
    a2->__r_.__value_.__r.__words[0] = 0;
    a2->__r_.__value_.__l.__size_ = 0;
    a2->__r_.__value_.__r.__words[2] = 0;
  }
  else
  {
    MEMORY[0x20BD277A8](&__p, (&off_24C33DAF8)[v3]);
    v4 = HIBYTE(v10);
    v5 = SHIBYTE(v10);
    v6 = v9;
    a2->__r_.__value_.__l.__size_ = 0;
    a2->__r_.__value_.__r.__words[2] = 0;
    a2->__r_.__value_.__r.__words[0] = 0;
    if (v5 < 0)
      v4 = v6;
    if (v4)
    {
      mediaplatform::FormatString<std::string>(&v7, (std::string *)"BEGIN {0} TRANSACTION", (uint64_t)&__p);
      *a2 = v7;
      goto LABEL_8;
    }
  }
  MEMORY[0x20BD277A8](a2, "BEGIN TRANSACTION");
LABEL_8:
  if (SHIBYTE(v10) < 0)
    operator delete(__p);
}

void sub_20A845D90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void mediaplatform::SQLRollbackTransactionStatement::~SQLRollbackTransactionStatement(void **this)
{
  *this = off_24C3314E8;
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
}

{
  *this = off_24C3314E8;
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
  JUMPOUT(0x20BD27AFCLL);
}

void mediaplatform::SQLRollbackTransactionStatement::sql(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  std::string *p_p;
  std::string::size_type size;
  std::string __p;

  std::string::basic_string[abi:ne180100]<0>(a2, "ROLLBACK TRANSACTION");
  if (*(char *)(a1 + 31) < 0)
  {
    if (!*(_QWORD *)(a1 + 16))
      return;
  }
  else if (!*(_BYTE *)(a1 + 31))
  {
    return;
  }
  mediaplatform::FormatString<std::string>(&__p, (std::string *)"TO SAVEPOINT {0}", a1 + 8);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    size = __p.__r_.__value_.__l.__size_;
  std::string::append(a2, (const std::string::value_type *)p_p, size);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_20A845EEC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;

  if (a15 < 0)
    operator delete(__p);
  if (*(char *)(v15 + 23) < 0)
    operator delete(*(void **)v15);
  _Unwind_Resume(exception_object);
}

void mediaplatform::SQLCommitTransactionStatement::~SQLCommitTransactionStatement(mediaplatform::SQLCommitTransactionStatement *this)
{
  JUMPOUT(0x20BD27AFCLL);
}

_QWORD *mediaplatform::SQLCommitTransactionStatement::sql@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "COMMIT TRANSACTION");
}

uint64_t mediaplatform::SQLBeginTransactionStatement::SQLBeginTransactionStatement(uint64_t result, int a2)
{
  *(_QWORD *)result = &off_24C331498;
  *(_DWORD *)(result + 8) = a2;
  return result;
}

{
  *(_QWORD *)result = &off_24C331498;
  *(_DWORD *)(result + 8) = a2;
  return result;
}

uint64_t mediaplatform::SQLBeginTransactionStatement::transactionBehavior(mediaplatform::SQLBeginTransactionStatement *this)
{
  return *((unsigned int *)this + 2);
}

uint64_t mediaplatform::SQLBeginTransactionStatement::setTransactionBehavior(uint64_t result, int a2)
{
  *(_DWORD *)(result + 8) = a2;
  return result;
}

_QWORD *mediaplatform::SQLRollbackTransactionStatement::SQLRollbackTransactionStatement(_QWORD *a1, __int128 *a2)
{
  std::string *v3;
  __int128 v4;

  *a1 = off_24C3314E8;
  v3 = (std::string *)(a1 + 1);
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    v3->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = v4;
  }
  return a1;
}

{
  std::string *v3;
  __int128 v4;

  *a1 = off_24C3314E8;
  v3 = (std::string *)(a1 + 1);
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    v3->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = v4;
  }
  return a1;
}

uint64_t mediaplatform::SQLRollbackTransactionStatement::savepointName(mediaplatform::SQLRollbackTransactionStatement *this)
{
  return (uint64_t)this + 8;
}

std::string *mediaplatform::SQLRollbackTransactionStatement::setSavepointName(uint64_t a1, const std::string *a2)
{
  return std::string::operator=((std::string *)(a1 + 8), a2);
}

mlcore::LocalizedSortingDetails *mlcore::LocalizedSortingDetails::LocalizedSortingDetails(mlcore::LocalizedSortingDetails *this, const mediaplatform::FilePath *a2)
{
  __int128 *v3;
  __int128 *i;
  __int128 v5;
  unint64_t v6;
  unint64_t v7;
  __int128 v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  __int128 v16;
  unint64_t v17;
  char *v18;
  char *v19;
  __int128 v20;
  void **v21;
  int v22;
  void *v24[2];
  uint64_t v25;
  std::string __p;
  __int128 *v27;
  __int128 *v28;
  void (**v29)(mediaplatform::PropertyList *__hidden);
  const void *v30;

  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  if (*((_QWORD *)a2 + 2) != *((_QWORD *)a2 + 1))
  {
    mediaplatform::PropertyList::PropertyList((mediaplatform::PropertyList *)&v29, a2);
    std::string::basic_string[abi:ne180100]<0>(&__p, "InsignificantSortPrefixes");
    mediaplatform::PropertyList::arrayValueForKey<std::string>((uint64_t)&v27, (uint64_t)&v29, (uint64_t)&__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    v3 = v27;
    for (i = v28; v3 != i; v3 = (__int128 *)((char *)v3 + 24))
    {
      if (*((char *)v3 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)v3, *((_QWORD *)v3 + 1));
      }
      else
      {
        v5 = *v3;
        __p.__r_.__value_.__r.__words[2] = *((_QWORD *)v3 + 2);
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v5;
      }
      mediaplatform::StringToUCharString((uint64_t)&__p, v24);
      v7 = *((_QWORD *)this + 1);
      v6 = *((_QWORD *)this + 2);
      if (v7 >= v6)
      {
        v9 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7 - *(_QWORD *)this) >> 3);
        v10 = v9 + 1;
        if (v9 + 1 > 0xAAAAAAAAAAAAAAALL)
          std::vector<std::string>::__throw_length_error[abi:ne180100]();
        v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v6 - *(_QWORD *)this) >> 3);
        if (2 * v11 > v10)
          v10 = 2 * v11;
        if (v11 >= 0x555555555555555)
          v12 = 0xAAAAAAAAAAAAAAALL;
        else
          v12 = v10;
        if (v12)
          v12 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v12);
        else
          v13 = 0;
        v14 = v12 + 24 * v9;
        v15 = v12 + 24 * v13;
        v16 = *(_OWORD *)v24;
        *(_QWORD *)(v14 + 16) = v25;
        *(_OWORD *)v14 = v16;
        v24[1] = 0;
        v25 = 0;
        v24[0] = 0;
        v17 = v14 + 24;
        v18 = *(char **)this;
        v19 = (char *)*((_QWORD *)this + 1);
        if (v19 == *(char **)this)
        {
          *(_QWORD *)this = v14;
          *((_QWORD *)this + 1) = v17;
          *((_QWORD *)this + 2) = v15;
        }
        else
        {
          do
          {
            v20 = *(_OWORD *)(v19 - 24);
            *(_QWORD *)(v14 - 8) = *((_QWORD *)v19 - 1);
            *(_OWORD *)(v14 - 24) = v20;
            v14 -= 24;
            *((_QWORD *)v19 - 2) = 0;
            *((_QWORD *)v19 - 1) = 0;
            *((_QWORD *)v19 - 3) = 0;
            v19 -= 24;
          }
          while (v19 != v18);
          v19 = *(char **)this;
          v21 = (void **)*((_QWORD *)this + 1);
          *(_QWORD *)this = v14;
          *((_QWORD *)this + 1) = v17;
          *((_QWORD *)this + 2) = v15;
          while (v21 != (void **)v19)
          {
            if (*((char *)v21 - 1) < 0)
              operator delete(*(v21 - 3));
            v21 -= 3;
          }
        }
        if (v19)
          operator delete(v19);
        v22 = SHIBYTE(v25);
        *((_QWORD *)this + 1) = v17;
        if (v22 < 0)
          operator delete(v24[0]);
      }
      else
      {
        v8 = *(_OWORD *)v24;
        *(_QWORD *)(v7 + 16) = v25;
        *(_OWORD *)v7 = v8;
        *((_QWORD *)this + 1) = v7 + 24;
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
    }
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v27;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
    v29 = &off_24C330CB0;
    mediaplatform::CFRetainedPointer<__CFDictionary *>::~CFRetainedPointer(&v30);
  }
  return this;
}

void sub_20A846298(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,void (**a25)(mediaplatform::PropertyList *__hidden this),const void *a26)
{
  if (a21 < 0)
    operator delete(__p);
  a25 = &off_24C330CB0;
  mediaplatform::CFRetainedPointer<__CFDictionary *>::~CFRetainedPointer(&a26);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a22);
  _Unwind_Resume(a1);
}

const void **mediaplatform::PropertyList::arrayValueForKey<std::string>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  std::__split_buffer<std::string>::pointer first;
  CFTypeID TypeID;
  CFIndex Count;
  CFIndex i;
  const __CFString *ValueAtIndex;
  const __CFString *v9;
  unint64_t v10;
  unint64_t v11;
  __int128 v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  std::string *v18;
  __int128 v19;
  uint64_t v20;
  int v21;
  std::logic_error *exception;
  const __CFString *v24;
  void *__p[2];
  std::string::size_type v26;
  const __CFString *v27;
  CFArrayRef theArray;
  std::__split_buffer<std::string> __v;

  mediaplatform::PropertyList::_cfValueForKey(a2, a3, &__v);
  first = __v.__first_;
  TypeID = CFArrayGetTypeID();
  if (first)
  {
    if (CFGetTypeID(first) == TypeID)
      CFRetain(first);
    else
      first = 0;
  }
  theArray = (CFArrayRef)first;
  mediaplatform::CFRetainedPointer<void const*>::~CFRetainedPointer((const void **)&__v.__first_);
  if (!first)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "not an array");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24C32FBD0, MEMORY[0x24BEDAB88]);
  }
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  Count = CFArrayGetCount((CFArrayRef)first);
  if (Count >= 1)
  {
    for (i = 0; i != Count; ++i)
    {
      ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(theArray, i);
      v9 = ValueAtIndex;
      if (ValueAtIndex)
      {
        CFRetain(ValueAtIndex);
        v27 = v9;
        CFRetain(v9);
      }
      else
      {
        v27 = 0;
      }
      v24 = v9;
      mediaplatform::PlistValueGetter<std::string,void>::value(__p, v9);
      v10 = *(_QWORD *)(a1 + 8);
      v11 = *(_QWORD *)(a1 + 16);
      if (v10 >= v11)
      {
        v13 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v10 - *(_QWORD *)a1) >> 3);
        v14 = v13 + 1;
        if (v13 + 1 > 0xAAAAAAAAAAAAAAALL)
          std::vector<std::string>::__throw_length_error[abi:ne180100]();
        v15 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v11 - *(_QWORD *)a1) >> 3);
        if (2 * v15 > v14)
          v14 = 2 * v15;
        if (v15 >= 0x555555555555555)
          v16 = 0xAAAAAAAAAAAAAAALL;
        else
          v16 = v14;
        __v.__end_cap_.__value_ = (std::allocator<std::string> *)(a1 + 16);
        if (v16)
          v16 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v16);
        else
          v17 = 0;
        v18 = (std::string *)(v16 + 24 * v13);
        __v.__first_ = (std::__split_buffer<std::string>::pointer)v16;
        __v.__begin_ = v18;
        __v.__end_cap_.__value_ = (std::string *)(v16 + 24 * v17);
        v19 = *(_OWORD *)__p;
        v18->__r_.__value_.__r.__words[2] = v26;
        *(_OWORD *)&v18->__r_.__value_.__l.__data_ = v19;
        __p[1] = 0;
        v26 = 0;
        __p[0] = 0;
        __v.__end_ = v18 + 1;
        std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)a1, &__v);
        v20 = *(_QWORD *)(a1 + 8);
        std::__split_buffer<std::string>::~__split_buffer(&__v);
        v21 = SHIBYTE(v26);
        *(_QWORD *)(a1 + 8) = v20;
        if (v21 < 0)
          operator delete(__p[0]);
      }
      else
      {
        v12 = *(_OWORD *)__p;
        *(_QWORD *)(v10 + 16) = v26;
        *(_OWORD *)v10 = v12;
        __p[1] = 0;
        v26 = 0;
        __p[0] = 0;
        *(_QWORD *)(a1 + 8) = v10 + 24;
      }
      mediaplatform::CFRetainedPointer<void const*>::~CFRetainedPointer((const void **)&v24);
      mediaplatform::CFRetainedPointer<void const*>::~CFRetainedPointer((const void **)&v27);
    }
  }
  return mediaplatform::CFRetainedPointer<__CFArray const*>::~CFRetainedPointer((const void **)&theArray);
}

void sub_20A84658C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17, int a18, const void *a19, __int16 a20,char a21,char a22)
{
  mediaplatform::CFRetainedPointer<__CFArray const*>::~CFRetainedPointer(&a19);
  _Unwind_Resume(a1);
}

const void **mediaplatform::PlistValueGetter<std::string,void>::value(_QWORD *a1, const __CFString *a2)
{
  CFTypeID TypeID;
  CFIndex Length;
  CFIndex MaximumSizeForEncoding;
  CFIndex v7;
  void *v8;
  std::logic_error *exception;
  const __CFString *v11;
  __int128 v12;
  uint64_t v13;

  TypeID = CFStringGetTypeID();
  if (!a2 || CFGetTypeID(a2) != TypeID)
  {
    v11 = 0;
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "not a string");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24C32FBD0, MEMORY[0x24BEDAB88]);
  }
  CFRetain(a2);
  v11 = a2;
  v12 = 0uLL;
  v13 = 0;
  Length = CFStringGetLength(a2);
  MaximumSizeForEncoding = CFStringGetMaximumSizeForEncoding(Length, 0x8000100u);
  if (MaximumSizeForEncoding < 0)
    goto LABEL_7;
  v7 = MaximumSizeForEncoding + 1;
  v8 = malloc_type_malloc(MaximumSizeForEncoding + 1, 0x1DE48D06uLL);
  if (!CFStringGetCString(a2, (char *)v8, v7, 0x8000100u))
  {
    free(v8);
LABEL_7:
    std::string::basic_string[abi:ne180100]<0>(a1, "(invalid)");
    return mediaplatform::CFRetainedPointer<__CFString const*>::~CFRetainedPointer((const void **)&v11);
  }
  MEMORY[0x20BD277A8](&v12, v8);
  free(v8);
  *(_OWORD *)a1 = v12;
  a1[2] = v13;
  return mediaplatform::CFRetainedPointer<__CFString const*>::~CFRetainedPointer((const void **)&v11);
}

void sub_20A84674C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  mediaplatform::CFRetainedPointer<__CFString const*>::~CFRetainedPointer((const void **)&a9);
  _Unwind_Resume(a1);
}

const void **mediaplatform::CFRetainedPointer<__CFArray const*>::~CFRetainedPointer(const void **a1)
{
  const void *v2;

  v2 = *a1;
  if (v2)
    CFRelease(v2);
  return a1;
}

uint64_t std::vector<std::wstring>::__init_with_size[abi:ne180100]<std::wstring*,std::wstring*>(uint64_t result, __int128 *a2, __int128 *a3, unint64_t a4)
{
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  __int128 v10;
  _QWORD v11[3];
  char v12;
  _QWORD *v13;
  _QWORD *v14;

  if (a4)
  {
    if (a4 >= 0xAAAAAAAAAAAAAABLL)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v6 = (_QWORD *)result;
    v7 = std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(a4);
    v8 = v7;
    *v6 = v7;
    v6[1] = v7;
    v6[2] = &v7[3 * v9];
    v14 = v7;
    v13 = v7;
    v11[0] = v6 + 2;
    v11[1] = &v13;
    v11[2] = &v14;
    v12 = 0;
    if (a2 != a3)
    {
      do
      {
        if (*((char *)a2 + 23) < 0)
        {
          std::wstring::__init_copy_ctor_external(v7, *(__int16 **)a2, *((_QWORD *)a2 + 1));
          v7 = v14;
        }
        else
        {
          v10 = *a2;
          v7[2] = *((_QWORD *)a2 + 2);
          *(_OWORD *)v7 = v10;
        }
        a2 = (__int128 *)((char *)a2 + 24);
        v7 += 3;
        v14 = v7;
      }
      while (a2 != a3);
      v8 = v7;
    }
    v12 = 1;
    result = std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
    v6[1] = v8;
  }
  return result;
}

void sub_20A8468FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

mlcore::GeniusConfigTable *mlcore::GeniusConfigTable::GeniusConfigTable(mlcore::GeniusConfigTable *this)
{
  void *__p[2];
  char v4;
  _BYTE v5[80];
  void *v6[2];
  char v7;
  _QWORD v8[3];
  char v9;
  void *v10[2];
  char v11;
  _QWORD v12[3];
  char v13;
  void *v14[2];
  char v15;
  _QWORD v16[3];
  char v17;
  void *v18[2];
  char v19;
  _QWORD v20[3];
  char v21;
  void *v22[2];
  char v23;

  std::string::basic_string[abi:ne180100]<0>(v22, "genius_config");
  std::string::basic_string[abi:ne180100]<0>(v18, "id");
  mlcore::MediaColumn<long long>::MediaColumn((uint64_t)v20, (uint64_t)v18, 1);
  std::string::basic_string[abi:ne180100]<0>(v14, "version");
  mlcore::MediaColumn<int>::MediaColumn((uint64_t)v16, (uint64_t)v14, 32);
  std::string::basic_string[abi:ne180100]<0>(v10, "default_num_results");
  mlcore::MediaColumn<int>::MediaColumn((uint64_t)v12, (uint64_t)v10, 0);
  std::string::basic_string[abi:ne180100]<0>(v6, "min_num_results");
  mlcore::MediaColumn<int>::MediaColumn((uint64_t)v8, (uint64_t)v6, 0);
  std::string::basic_string[abi:ne180100]<0>(__p, "data");
  mlcore::MediaColumn<mediaplatform::Data>::MediaColumn((uint64_t)v5, (uint64_t)__p);
  mlcore::MediaTable<long long,int,int,int,mediaplatform::Data>::MediaTable((uint64_t)this, (uint64_t)v22, (uint64_t)v20, (uint64_t)v16, (uint64_t)v12, (uint64_t)v8, (uint64_t)v5);
  mediaplatform::DatabaseColumn<mediaplatform::Data>::~DatabaseColumn((uint64_t)v5);
  if (v4 < 0)
    operator delete(__p[0]);
  v8[0] = off_24C335D90;
  if (v9 < 0)
    operator delete((void *)v8[1]);
  if (v7 < 0)
    operator delete(v6[0]);
  v12[0] = off_24C335D90;
  if (v13 < 0)
    operator delete((void *)v12[1]);
  if (v11 < 0)
    operator delete(v10[0]);
  v16[0] = off_24C335D90;
  if (v17 < 0)
    operator delete((void *)v16[1]);
  if (v15 < 0)
    operator delete(v14[0]);
  v20[0] = off_24C335D90;
  if (v21 < 0)
    operator delete((void *)v20[1]);
  if (v19 < 0)
    operator delete(v18[0]);
  if (v23 < 0)
    operator delete(v22[0]);
  *(_QWORD *)this = off_24C339770;
  return this;
}

void sub_20A846AF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,void (**a31)(mediaplatform::DatabaseColumnBase *__hidden this),void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,uint64_t a38,uint64_t a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,void (**a46)(mediaplatform::DatabaseColumnBase *__hidden this),void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52)
{
  uint64_t v52;

  mediaplatform::DatabaseColumn<mediaplatform::Data>::~DatabaseColumn((uint64_t)&a15);
  if (a14 < 0)
    operator delete(__p);
  a31 = off_24C335D90;
  if (a37 < 0)
    operator delete(a32);
  if (a30 < 0)
    operator delete(a25);
  a46 = off_24C335D90;
  if (a52 < 0)
    operator delete(a47);
  if (a45 < 0)
    operator delete(a40);
  *(_QWORD *)(v52 - 176) = off_24C335D90;
  if (*(char *)(v52 - 145) < 0)
    operator delete(*(void **)(v52 - 168));
  if (*(char *)(v52 - 177) < 0)
    operator delete(*(void **)(v52 - 200));
  *(_QWORD *)(v52 - 104) = off_24C335D90;
  if (*(char *)(v52 - 73) < 0)
    operator delete(*(void **)(v52 - 96));
  if (*(char *)(v52 - 105) < 0)
    operator delete(*(void **)(v52 - 128));
  if (*(char *)(v52 - 33) < 0)
    operator delete(*(void **)(v52 - 56));
  _Unwind_Resume(a1);
}

void sub_20A846C14()
{
  JUMPOUT(0x20A846BECLL);
}

void sub_20A846C1C()
{
  JUMPOUT(0x20A846BFCLL);
}

uint64_t mlcore::MediaTable<long long,int,int,int,mediaplatform::Data>::MediaTable(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  int v13;
  int v14;
  int v15;
  uint64_t v16;
  const void *v17;
  size_t v18;
  void *v19;
  std::string *v20;
  int v21;
  const void *v22;
  size_t v23;
  void *v24;
  int v25;
  int v26;
  const void *v27;
  size_t v28;
  void *v29;
  int v30;
  int v31;
  const void *v32;
  size_t v33;
  void *v34;
  int v35;
  const void *v36;
  size_t v37;
  void *v38;
  std::string *v39;
  int v40;
  std::string *v41;
  int v42;
  std::string *v43;
  int v44;
  int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  int v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  int v60;
  uint64_t v61;
  uint64_t v62;
  int v63;
  uint64_t (**v64)();
  std::string v65;
  int v66;
  char v67;
  void (**v68)(mediaplatform::Data *__hidden);
  size_t v69;
  size_t v70;
  const void *v71;
  char v72;
  uint64_t (**v73)();
  std::string __p;
  int v75;
  uint64_t v76;
  uint64_t (**v77)();
  std::string v78;
  int v79;
  uint64_t v80;
  uint64_t (**v81)();
  std::string v82;
  int v83;
  uint64_t v84;
  uint64_t (**v85)();
  std::string v86;
  int v87;
  uint64_t v88;
  int v89;
  std::string v90;
  uint64_t (**v91)();
  std::string v92;
  int v93;
  char v94;
  void (**v95)(mediaplatform::Data *__hidden);
  size_t v96;
  size_t v97;
  const void *v98;
  char v99;
  uint64_t (**v100)();
  std::string v101;
  int v102;
  uint64_t v103;
  uint64_t (**v104)();
  std::string v105;
  int v106;
  uint64_t v107;
  uint64_t (**v108)();
  std::string __s;
  int v110;
  uint64_t v111;
  uint64_t (**v112)();
  std::string v113;
  int v114;
  uint64_t v115;
  int v116;
  uint64_t (**v117)();
  std::string v118;
  int v119;
  char v120;
  void (**v121)(mediaplatform::Data *__hidden);
  size_t v122;
  size_t v123;
  const void *v124;
  char v125;
  uint64_t (**v126)();
  std::string v127;
  int v128;
  uint64_t v129;
  uint64_t (**v130)();
  std::string v131;
  int v132;
  uint64_t v133;
  uint64_t (**v134)();
  std::string v135;
  int v136;
  uint64_t v137;
  uint64_t (**v138)();
  std::string v139;
  int v140;
  char v141;
  void (**v142)(mediaplatform::Data *__hidden);
  size_t v143;
  size_t v144;
  const void *v145;
  char v146;
  uint64_t (**v147)();
  std::string v148;
  int v149;
  uint64_t v150;
  uint64_t (**v151)();
  std::string v152;
  int v153;
  uint64_t v154;
  uint64_t (**v155)();
  std::string v156;
  int v157;
  char v158;
  void (**v159)(mediaplatform::Data *__hidden);
  size_t v160;
  size_t v161;
  void *v162;
  char v163;
  uint64_t (**v164)();
  std::string v165;
  int v166;
  uint64_t v167;

  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&v90, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    v90 = *(std::string *)a2;
  if (*(char *)(a3 + 31) < 0)
    std::string::__init_copy_ctor_external(&v86, *(const std::string::value_type **)(a3 + 8), *(_QWORD *)(a3 + 16));
  else
    v86 = *(std::string *)(a3 + 8);
  v13 = *(_DWORD *)(a3 + 32);
  v85 = off_24C335B18;
  v88 = *(_QWORD *)(a3 + 36);
  v14 = *(_DWORD *)(a3 + 44);
  v59 = v13;
  v87 = v13;
  v89 = v14;
  if (*(char *)(a4 + 31) < 0)
    std::string::__init_copy_ctor_external(&v82, *(const std::string::value_type **)(a4 + 8), *(_QWORD *)(a4 + 16));
  else
    v82 = *(std::string *)(a4 + 8);
  v60 = *(_DWORD *)(a4 + 32);
  v83 = v60;
  v81 = off_24C335AF8;
  v61 = *(_QWORD *)(a4 + 36);
  v84 = v61;
  v56 = a3;
  v57 = a4;
  if (*(char *)(a5 + 31) < 0)
    std::string::__init_copy_ctor_external(&v78, *(const std::string::value_type **)(a5 + 8), *(_QWORD *)(a5 + 16));
  else
    v78 = *(std::string *)(a5 + 8);
  v63 = *(_DWORD *)(a5 + 32);
  v79 = v63;
  v77 = off_24C335AF8;
  v55 = a5;
  v62 = *(_QWORD *)(a5 + 36);
  v80 = v62;
  if (*(char *)(a6 + 31) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(a6 + 8), *(_QWORD *)(a6 + 16));
  else
    __p = *(std::string *)(a6 + 8);
  v15 = *(_DWORD *)(a6 + 32);
  v75 = v15;
  v73 = off_24C335AF8;
  v54 = a6;
  v16 = *(_QWORD *)(a6 + 36);
  v76 = v16;
  v64 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a7 + 31) < 0)
    std::string::__init_copy_ctor_external(&v65, *(const std::string::value_type **)(a7 + 8), *(_QWORD *)(a7 + 16));
  else
    v65 = *(std::string *)(a7 + 8);
  v66 = *(_DWORD *)(a7 + 32);
  v64 = &off_24C335A98;
  v67 = *(_BYTE *)(a7 + 36);
  v17 = *(const void **)(a7 + 64);
  v58 = a7;
  v18 = *(_QWORD *)(a7 + 48);
  v68 = &off_24C331510;
  v69 = v18;
  v70 = v18;
  if (v18)
    v19 = (void *)operator new[]();
  else
    v19 = 0;
  v71 = v19;
  v72 = 1;
  if (v17)
    memcpy(v19, v17, v18);
  else
    bzero(v19, v18);
  *(_QWORD *)a1 = &off_24C330F50;
  v20 = (std::string *)(a1 + 8);
  v21 = SHIBYTE(v90.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v90.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v20, v90.__r_.__value_.__l.__data_, v90.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v20->__r_.__value_.__l.__data_ = *(_OWORD *)&v90.__r_.__value_.__l.__data_;
    *(_QWORD *)(a1 + 24) = *((_QWORD *)&v90.__r_.__value_.__l + 2);
  }
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)a1 = &off_24C3357F8;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  v52 = SHIBYTE(v86.__r_.__value_.__r.__words[2]);
  v53 = v21;
  if (SHIBYTE(v86.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v113, v86.__r_.__value_.__l.__data_, v86.__r_.__value_.__l.__size_);
  else
    v113 = v86;
  v112 = off_24C335B18;
  v115 = v88;
  v114 = v59;
  v116 = v89;
  v51 = SHIBYTE(v82.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v82.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&__s, v82.__r_.__value_.__l.__data_, v82.__r_.__value_.__l.__size_);
  else
    __s = v82;
  v110 = v60;
  v108 = off_24C335AF8;
  v111 = v61;
  v50 = SHIBYTE(v78.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v78.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v105, v78.__r_.__value_.__l.__data_, v78.__r_.__value_.__l.__size_);
  else
    v105 = v78;
  v106 = v63;
  v104 = off_24C335AF8;
  v107 = v62;
  v49 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v101, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  else
    v101 = __p;
  v102 = v15;
  v100 = off_24C335AF8;
  v103 = v16;
  v91 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v65.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v92, v65.__r_.__value_.__l.__data_, v65.__r_.__value_.__l.__size_);
  else
    v92 = v65;
  v93 = v66;
  v91 = &off_24C335A98;
  v94 = v67;
  v22 = v71;
  v23 = v69;
  v95 = &off_24C331510;
  v96 = v69;
  v97 = v69;
  if (v69)
    v24 = (void *)operator new[]();
  else
    v24 = 0;
  v98 = v24;
  v99 = 1;
  if (v22)
    memcpy(v24, v22, v23);
  else
    bzero(v24, v23);
  v25 = SHIBYTE(__s.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v135, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
  else
    v135 = __s;
  v136 = v60;
  v134 = off_24C335AF8;
  v137 = v61;
  v26 = SHIBYTE(v105.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v105.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v131, v105.__r_.__value_.__l.__data_, v105.__r_.__value_.__l.__size_);
  else
    v131 = v105;
  v132 = v63;
  v130 = off_24C335AF8;
  v133 = v62;
  v48 = SHIBYTE(v101.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v101.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v127, v101.__r_.__value_.__l.__data_, v101.__r_.__value_.__l.__size_);
  else
    v127 = v101;
  v128 = v15;
  v126 = off_24C335AF8;
  v129 = v16;
  v117 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v92.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v118, v92.__r_.__value_.__l.__data_, v92.__r_.__value_.__l.__size_);
  else
    v118 = v92;
  v119 = v93;
  v117 = &off_24C335A98;
  v120 = v94;
  v27 = v98;
  v28 = v96;
  v121 = &off_24C331510;
  v122 = v96;
  v123 = v96;
  if (v96)
    v29 = (void *)operator new[]();
  else
    v29 = 0;
  v124 = v29;
  v125 = 1;
  if (v27)
    memcpy(v29, v27, v28);
  else
    bzero(v29, v28);
  v30 = SHIBYTE(v131.__r_.__value_.__r.__words[2]);
  v47 = v26;
  if (SHIBYTE(v131.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v152, v131.__r_.__value_.__l.__data_, v131.__r_.__value_.__l.__size_);
  else
    v152 = v131;
  v153 = v63;
  v151 = off_24C335AF8;
  v154 = v62;
  v31 = SHIBYTE(v127.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v127.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v148, v127.__r_.__value_.__l.__data_, v127.__r_.__value_.__l.__size_);
  else
    v148 = v127;
  v149 = v15;
  v147 = off_24C335AF8;
  v150 = v16;
  v138 = (uint64_t (**)())off_24C335D90;
  v46 = v30;
  if (SHIBYTE(v118.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v139, v118.__r_.__value_.__l.__data_, v118.__r_.__value_.__l.__size_);
  else
    v139 = v118;
  v140 = v119;
  v138 = &off_24C335A98;
  v141 = v120;
  v32 = v124;
  v33 = v122;
  v142 = &off_24C331510;
  v143 = v122;
  v144 = v122;
  if (v122)
    v34 = (void *)operator new[]();
  else
    v34 = 0;
  v145 = v34;
  v146 = 1;
  if (v32)
    memcpy(v34, v32, v33);
  else
    bzero(v34, v33);
  v35 = SHIBYTE(v148.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v148.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v165, v148.__r_.__value_.__l.__data_, v148.__r_.__value_.__l.__size_);
  else
    v165 = v148;
  v166 = v15;
  v164 = off_24C335AF8;
  v167 = v16;
  v155 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v139.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v156, v139.__r_.__value_.__l.__data_, v139.__r_.__value_.__l.__size_);
  else
    v156 = v139;
  v157 = v140;
  v155 = &off_24C335A98;
  v158 = v141;
  v36 = v145;
  v37 = v143;
  v159 = &off_24C331510;
  v160 = v143;
  v161 = v143;
  if (v143)
    v38 = (void *)operator new[]();
  else
    v38 = 0;
  v162 = v38;
  v163 = 1;
  if (v36)
    memcpy(v38, v36, v37);
  else
    bzero(v38, v37);
  mediaplatform::DatabaseColumnTuple<3ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<mediaplatform::Data>>::DatabaseColumnTuple(a1 + 80, (uint64_t)&v164, (uint64_t)&v155);
  mediaplatform::DatabaseColumn<mediaplatform::Data>::~DatabaseColumn((uint64_t)&v155);
  if (SHIBYTE(v165.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v165.__r_.__value_.__l.__data_);
  *(_QWORD *)(a1 + 208) = off_24C335D90;
  v39 = (std::string *)(a1 + 216);
  v40 = SHIBYTE(v152.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v152.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v39, v152.__r_.__value_.__l.__data_, v152.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v39->__r_.__value_.__l.__data_ = *(_OWORD *)&v152.__r_.__value_.__l.__data_;
    *(_QWORD *)(a1 + 232) = *((_QWORD *)&v152.__r_.__value_.__l + 2);
  }
  *(_DWORD *)(a1 + 240) = v63;
  *(_QWORD *)(a1 + 208) = off_24C335AF8;
  *(_QWORD *)(a1 + 244) = v62;
  mediaplatform::DatabaseColumn<mediaplatform::Data>::~DatabaseColumn((uint64_t)&v138);
  if (v35 < 0)
  {
    operator delete(v148.__r_.__value_.__l.__data_);
    if ((v40 & 0x80000000) == 0)
      goto LABEL_101;
  }
  else if ((v40 & 0x80000000) == 0)
  {
    goto LABEL_101;
  }
  operator delete(v152.__r_.__value_.__l.__data_);
LABEL_101:
  *(_QWORD *)(a1 + 256) = off_24C335D90;
  v41 = (std::string *)(a1 + 264);
  v42 = SHIBYTE(v135.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v135.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v41, v135.__r_.__value_.__l.__data_, v135.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v41->__r_.__value_.__l.__data_ = *(_OWORD *)&v135.__r_.__value_.__l.__data_;
    *(_QWORD *)(a1 + 280) = *((_QWORD *)&v135.__r_.__value_.__l + 2);
  }
  *(_DWORD *)(a1 + 288) = v60;
  *(_QWORD *)(a1 + 256) = off_24C335AF8;
  *(_QWORD *)(a1 + 292) = v61;
  mediaplatform::DatabaseColumn<mediaplatform::Data>::~DatabaseColumn((uint64_t)&v117);
  if (v31 < 0)
    operator delete(v127.__r_.__value_.__l.__data_);
  if (v46 < 0)
    operator delete(v131.__r_.__value_.__l.__data_);
  if (v42 < 0)
    operator delete(v135.__r_.__value_.__l.__data_);
  *(_QWORD *)(a1 + 304) = off_24C335D90;
  v43 = (std::string *)(a1 + 312);
  v44 = SHIBYTE(v113.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v113.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v43, v113.__r_.__value_.__l.__data_, v113.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v43->__r_.__value_.__l.__data_ = *(_OWORD *)&v113.__r_.__value_.__l.__data_;
    *(_QWORD *)(a1 + 328) = *((_QWORD *)&v113.__r_.__value_.__l + 2);
  }
  *(_DWORD *)(a1 + 336) = v59;
  *(_QWORD *)(a1 + 304) = off_24C335B18;
  *(_QWORD *)(a1 + 340) = v115;
  *(_DWORD *)(a1 + 348) = v116;
  mediaplatform::DatabaseColumn<mediaplatform::Data>::~DatabaseColumn((uint64_t)&v91);
  if (v48 < 0)
    operator delete(v101.__r_.__value_.__l.__data_);
  if (v47 < 0)
    operator delete(v105.__r_.__value_.__l.__data_);
  if (v25 < 0)
  {
    operator delete(__s.__r_.__value_.__l.__data_);
    if ((v44 & 0x80000000) == 0)
      goto LABEL_121;
  }
  else if ((v44 & 0x80000000) == 0)
  {
    goto LABEL_121;
  }
  operator delete(v113.__r_.__value_.__l.__data_);
LABEL_121:
  mediaplatform::DatabaseColumn<mediaplatform::Data>::~DatabaseColumn((uint64_t)&v64);
  if (v49 < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (v50 < 0)
    operator delete(v78.__r_.__value_.__l.__data_);
  if (v51 < 0)
    operator delete(v82.__r_.__value_.__l.__data_);
  if (v52 < 0)
    operator delete(v86.__r_.__value_.__l.__data_);
  if (v53 < 0)
    operator delete(v90.__r_.__value_.__l.__data_);
  *(_QWORD *)a1 = off_24C336360;
  std::__tuple_leaf<0ul,mlcore::MediaColumn<long long>,false>::__tuple_leaf[abi:ne180100]<mlcore::MediaColumn<long long>&,void>(a1 + 352, v56);
  std::__tuple_leaf<3ul,mlcore::MediaColumn<int>,false>::__tuple_leaf[abi:ne180100]<mlcore::MediaColumn<int>&,void>(a1 + 400, v57);
  std::__tuple_leaf<3ul,mlcore::MediaColumn<int>,false>::__tuple_leaf[abi:ne180100]<mlcore::MediaColumn<int>&,void>(a1 + 448, v55);
  std::__tuple_leaf<3ul,mlcore::MediaColumn<int>,false>::__tuple_leaf[abi:ne180100]<mlcore::MediaColumn<int>&,void>(a1 + 496, v54);
  std::__tuple_leaf<4ul,mlcore::MediaColumn<mediaplatform::Data>,false>::__tuple_leaf[abi:ne180100]<mlcore::MediaColumn<mediaplatform::Data>&,void>(a1 + 544, v58);
  return a1;
}

void sub_20A8477F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43,uint64_t a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52,uint64_t a53,uint64_t a54,uint64_t a55,void *a56,uint64_t a57,int a58,__int16 a59,char a60,char a61,uint64_t a62,uint64_t a63)
{
  void *a65;
  char a70;
  void *a72;
  char a73;
  uint64_t a74;
  uint64_t v74;
  uint64_t v75;

  mediaplatform::DatabaseColumnTuple<1ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<mediaplatform::Data>>::~DatabaseColumnTuple(v75);
  mediaplatform::DatabaseColumn<mediaplatform::Data>::~DatabaseColumn((uint64_t)&a74);
  if (SLOBYTE(STACK[0x22F]) < 0)
    operator delete((void *)STACK[0x218]);
  if (SLOBYTE(STACK[0x25F]) < 0)
    operator delete((void *)STACK[0x248]);
  if (SLOBYTE(STACK[0x28F]) < 0)
    operator delete((void *)STACK[0x278]);
  if (SLOBYTE(STACK[0x2BF]) < 0)
    operator delete((void *)STACK[0x2A8]);
  if (*(char *)(v74 + 79) < 0)
    operator delete(*a10);
  mediaplatform::DatabaseTableBase::~DatabaseTableBase((void **)v74);
  mediaplatform::DatabaseColumn<mediaplatform::Data>::~DatabaseColumn((uint64_t)&a27);
  if (a43 < 0)
    operator delete(a38);
  if (a52 < 0)
    operator delete(a47);
  if (a61 < 0)
    operator delete(a56);
  if (a70 < 0)
    operator delete(a65);
  if (a73 < 0)
    operator delete(a72);
  _Unwind_Resume(a1);
}

void mlcore::GeniusConfigTable::~GeniusConfigTable(mlcore::GeniusConfigTable *this)
{
  *(_QWORD *)this = off_24C336360;
  mediaplatform::DatabaseColumn<mediaplatform::Data>::~DatabaseColumn((uint64_t)this + 544);
  *((_QWORD *)this + 62) = off_24C335D90;
  if (*((char *)this + 527) < 0)
    operator delete(*((void **)this + 63));
  *((_QWORD *)this + 56) = off_24C335D90;
  if (*((char *)this + 479) < 0)
    operator delete(*((void **)this + 57));
  *((_QWORD *)this + 50) = off_24C335D90;
  if (*((char *)this + 431) < 0)
    operator delete(*((void **)this + 51));
  *((_QWORD *)this + 44) = off_24C335D90;
  if (*((char *)this + 383) < 0)
    operator delete(*((void **)this + 45));
  mediaplatform::DatabaseTable<long long,int,int,int,mediaplatform::Data>::~DatabaseTable((uint64_t)this);
}

{
  *(_QWORD *)this = off_24C336360;
  mediaplatform::DatabaseColumn<mediaplatform::Data>::~DatabaseColumn((uint64_t)this + 544);
  *((_QWORD *)this + 62) = off_24C335D90;
  if (*((char *)this + 527) < 0)
    operator delete(*((void **)this + 63));
  *((_QWORD *)this + 56) = off_24C335D90;
  if (*((char *)this + 479) < 0)
    operator delete(*((void **)this + 57));
  *((_QWORD *)this + 50) = off_24C335D90;
  if (*((char *)this + 431) < 0)
    operator delete(*((void **)this + 51));
  *((_QWORD *)this + 44) = off_24C335D90;
  if (*((char *)this + 383) < 0)
    operator delete(*((void **)this + 45));
  mediaplatform::DatabaseTable<long long,int,int,int,mediaplatform::Data>::~DatabaseTable((uint64_t)this);
  JUMPOUT(0x20BD27AFCLL);
}

uint64_t mediaplatform::DatabaseTable<long long,int,int,int,mediaplatform::Data>::columnCount()
{
  return 5;
}

void mediaplatform::DatabaseTable<long long,int,int,int,mediaplatform::Data>::columnNames(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  mediaplatform::ColumnNamesApplier::operator()<long long>((uint64_t)a2, a1 + 304);
  mediaplatform::ColumnNamesApplier::operator()<int>((uint64_t)a2, a1 + 256);
  mediaplatform::ColumnNamesApplier::operator()<int>((uint64_t)a2, a1 + 208);
  mediaplatform::ColumnNamesApplier::operator()<int>((uint64_t)a2, a1 + 160);
  mediaplatform::ColumnNamesApplier::operator()<mediaplatform::Data>((uint64_t)a2, a1 + 80);
}

void sub_20A847CF4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void mediaplatform::DatabaseTable<long long,int,int,int,mediaplatform::Data>::targetColumnExpression(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  __int128 *v3;
  __int128 *v4[3];
  __int128 **v5;

  v3 = (__int128 *)(a1 + 8);
  (*(void (**)(__int128 **__return_ptr))(*(_QWORD *)a1 + 24))(v4);
  std::allocate_shared[abi:ne180100]<mediaplatform::SQLColumnNameExpression,std::allocator<mediaplatform::SQLColumnNameExpression>,std::string &,std::string const&,void>(a2, v4[0], v3);
  v5 = v4;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v5);
}

void sub_20A847D6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void mediaplatform::DatabaseTable<long long,int,int,int,mediaplatform::Data>::~DatabaseTable(uint64_t a1)
{
  *(_QWORD *)a1 = &off_24C3357F8;
  *(_QWORD *)(a1 + 304) = off_24C335D90;
  if (*(char *)(a1 + 335) < 0)
    operator delete(*(void **)(a1 + 312));
  *(_QWORD *)(a1 + 256) = off_24C335D90;
  if (*(char *)(a1 + 287) < 0)
    operator delete(*(void **)(a1 + 264));
  *(_QWORD *)(a1 + 208) = off_24C335D90;
  if (*(char *)(a1 + 239) < 0)
    operator delete(*(void **)(a1 + 216));
  *(_QWORD *)(a1 + 160) = off_24C335D90;
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  mediaplatform::DatabaseColumn<mediaplatform::Data>::~DatabaseColumn(a1 + 80);
  if (*(char *)(a1 + 79) < 0)
    operator delete(*(void **)(a1 + 56));
  mediaplatform::DatabaseTableBase::~DatabaseTableBase((void **)a1);
}

{
  mediaplatform::DatabaseTable<long long,int,int,int,mediaplatform::Data>::~DatabaseTable(a1);
  JUMPOUT(0x20BD27AFCLL);
}

void mlcore::MediaTable<long long,int,int,int,mediaplatform::Data>::~MediaTable(uint64_t a1)
{
  *(_QWORD *)a1 = off_24C336360;
  mediaplatform::DatabaseColumn<mediaplatform::Data>::~DatabaseColumn(a1 + 544);
  *(_QWORD *)(a1 + 496) = off_24C335D90;
  if (*(char *)(a1 + 527) < 0)
    operator delete(*(void **)(a1 + 504));
  *(_QWORD *)(a1 + 448) = off_24C335D90;
  if (*(char *)(a1 + 479) < 0)
    operator delete(*(void **)(a1 + 456));
  *(_QWORD *)(a1 + 400) = off_24C335D90;
  if (*(char *)(a1 + 431) < 0)
    operator delete(*(void **)(a1 + 408));
  *(_QWORD *)(a1 + 352) = off_24C335D90;
  if (*(char *)(a1 + 383) < 0)
    operator delete(*(void **)(a1 + 360));
  mediaplatform::DatabaseTable<long long,int,int,int,mediaplatform::Data>::~DatabaseTable(a1);
}

{
  *(_QWORD *)a1 = off_24C336360;
  mediaplatform::DatabaseColumn<mediaplatform::Data>::~DatabaseColumn(a1 + 544);
  *(_QWORD *)(a1 + 496) = off_24C335D90;
  if (*(char *)(a1 + 527) < 0)
    operator delete(*(void **)(a1 + 504));
  *(_QWORD *)(a1 + 448) = off_24C335D90;
  if (*(char *)(a1 + 479) < 0)
    operator delete(*(void **)(a1 + 456));
  *(_QWORD *)(a1 + 400) = off_24C335D90;
  if (*(char *)(a1 + 431) < 0)
    operator delete(*(void **)(a1 + 408));
  *(_QWORD *)(a1 + 352) = off_24C335D90;
  if (*(char *)(a1 + 383) < 0)
    operator delete(*(void **)(a1 + 360));
  mediaplatform::DatabaseTable<long long,int,int,int,mediaplatform::Data>::~DatabaseTable(a1);
  JUMPOUT(0x20BD27AFCLL);
}

uint64_t std::__tuple_leaf<4ul,mlcore::MediaColumn<mediaplatform::Data>,false>::__tuple_leaf[abi:ne180100]<mlcore::MediaColumn<mediaplatform::Data>&,void>(uint64_t a1, uint64_t a2)
{
  __int128 v4;

  *(_QWORD *)a1 = off_24C335D90;
  if (*(char *)(a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 8), *(const std::string::value_type **)(a2 + 8), *(_QWORD *)(a2 + 16));
  }
  else
  {
    v4 = *(_OWORD *)(a2 + 8);
    *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 8) = v4;
  }
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_QWORD *)a1 = &off_24C335A98;
  *(_BYTE *)(a1 + 36) = *(_BYTE *)(a2 + 36);
  mediaplatform::Data::Data((mediaplatform::Data *)(a1 + 40), (const mediaplatform::Data *)(a2 + 40));
  *(_QWORD *)a1 = &off_24C336A40;
  return a1;
}

void sub_20A84801C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  uint64_t v3;

  *(_QWORD *)v1 = v3;
  if (*(char *)(v1 + 31) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

uint64_t mediaplatform::DatabaseColumnTuple<1ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<mediaplatform::Data>>::~DatabaseColumnTuple(uint64_t a1)
{
  *(_QWORD *)(a1 + 176) = off_24C335D90;
  if (*(char *)(a1 + 207) < 0)
    operator delete(*(void **)(a1 + 184));
  *(_QWORD *)(a1 + 128) = off_24C335D90;
  if (*(char *)(a1 + 159) < 0)
    operator delete(*(void **)(a1 + 136));
  *(_QWORD *)(a1 + 80) = off_24C335D90;
  if (*(char *)(a1 + 111) < 0)
    operator delete(*(void **)(a1 + 88));
  return mediaplatform::DatabaseColumn<mediaplatform::Data>::~DatabaseColumn(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<2ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<mediaplatform::Data>>::~DatabaseColumnTuple(uint64_t a1)
{
  *(_QWORD *)(a1 + 128) = off_24C335D90;
  if (*(char *)(a1 + 159) < 0)
    operator delete(*(void **)(a1 + 136));
  *(_QWORD *)(a1 + 80) = off_24C335D90;
  if (*(char *)(a1 + 111) < 0)
    operator delete(*(void **)(a1 + 88));
  return mediaplatform::DatabaseColumn<mediaplatform::Data>::~DatabaseColumn(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<3ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<mediaplatform::Data>>::DatabaseColumnTuple(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6;
  char v7;
  const void *v8;
  size_t v9;
  void *v10;
  std::string *v11;
  __int128 v12;
  uint64_t (**v14)();
  std::string v15;
  int v16;
  char v17;
  _QWORD v18[4];
  char v19;

  if (*(char *)(a3 + 31) < 0)
    std::string::__init_copy_ctor_external(&v15, *(const std::string::value_type **)(a3 + 8), *(_QWORD *)(a3 + 16));
  else
    v15 = *(std::string *)(a3 + 8);
  v6 = *(_DWORD *)(a3 + 32);
  v16 = v6;
  v14 = &off_24C335A98;
  v7 = *(_BYTE *)(a3 + 36);
  v17 = v7;
  v8 = *(const void **)(a3 + 64);
  v9 = *(_QWORD *)(a3 + 48);
  v18[0] = &off_24C331510;
  v18[1] = v9;
  v18[2] = v9;
  if (v9)
    v10 = (void *)operator new[]();
  else
    v10 = 0;
  v18[3] = v10;
  v19 = 1;
  if (v8)
    memcpy(v10, v8, v9);
  else
    bzero(v10, v9);
  *(_QWORD *)a1 = off_24C335D90;
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 8), v15.__r_.__value_.__l.__data_, v15.__r_.__value_.__l.__size_);
    v6 = v16;
    v7 = v17;
  }
  else
  {
    *(std::string *)(a1 + 8) = v15;
  }
  *(_DWORD *)(a1 + 32) = v6;
  *(_QWORD *)a1 = &off_24C335A98;
  *(_BYTE *)(a1 + 36) = v7;
  mediaplatform::Data::Data((mediaplatform::Data *)(a1 + 40), (const mediaplatform::Data *)v18);
  mediaplatform::DatabaseColumn<mediaplatform::Data>::~DatabaseColumn((uint64_t)&v14);
  *(_QWORD *)(a1 + 80) = off_24C335D90;
  v11 = (std::string *)(a1 + 88);
  if (*(char *)(a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v11, *(const std::string::value_type **)(a2 + 8), *(_QWORD *)(a2 + 16));
  }
  else
  {
    v12 = *(_OWORD *)(a2 + 8);
    *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 24);
    *(_OWORD *)&v11->__r_.__value_.__l.__data_ = v12;
  }
  *(_DWORD *)(a1 + 112) = *(_DWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 80) = off_24C335AF8;
  *(_QWORD *)(a1 + 116) = *(_QWORD *)(a2 + 36);
  return a1;
}

void sub_20A84829C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;

  mediaplatform::DatabaseColumn<mediaplatform::Data>::~DatabaseColumn(v15);
  _Unwind_Resume(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<3ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<mediaplatform::Data>>::~DatabaseColumnTuple(uint64_t a1)
{
  *(_QWORD *)(a1 + 80) = off_24C335D90;
  if (*(char *)(a1 + 111) < 0)
    operator delete(*(void **)(a1 + 88));
  return mediaplatform::DatabaseColumn<mediaplatform::Data>::~DatabaseColumn(a1);
}

void mlcore::GeniusConfigTable::IDColumn(mlcore::GeniusConfigTable *this@<X0>, uint64_t a2@<X8>)
{
  mlcore::MediaTable<long long,int,int,int,mediaplatform::Data>::mediaColumnAtIndex<0ul>(a2, (uint64_t)this);
}

void mlcore::MediaTable<long long,int,int,int,mediaplatform::Data>::mediaColumnAtIndex<0ul>(uint64_t a1, uint64_t a2)
{
  std::string *v4;

  *(_QWORD *)a1 = off_24C335D90;
  v4 = (std::string *)(a1 + 8);
  if (*(char *)(a2 + 383) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)(a2 + 360), *(_QWORD *)(a2 + 368));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)(a2 + 360);
    v4->__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 376);
  }
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 384);
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 396);
  *(_QWORD *)(a1 + 36) = *(_QWORD *)(a2 + 388);
  *(_QWORD *)a1 = off_24C336AC0;
}

void mlcore::GeniusConfigTable::versionColumn(mlcore::GeniusConfigTable *this@<X0>, uint64_t a2@<X8>)
{
  mlcore::MediaTable<long long,int,int,int,mediaplatform::Data>::mediaColumnAtIndex<1ul>(a2, (uint64_t)this);
}

void mlcore::MediaTable<long long,int,int,int,mediaplatform::Data>::mediaColumnAtIndex<1ul>(uint64_t a1, uint64_t a2)
{
  std::string *v4;

  *(_QWORD *)a1 = off_24C335D90;
  v4 = (std::string *)(a1 + 8);
  if (*(char *)(a2 + 431) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)(a2 + 408), *(_QWORD *)(a2 + 416));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)(a2 + 408);
    v4->__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 424);
  }
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 432);
  *(_QWORD *)(a1 + 36) = *(_QWORD *)(a2 + 436);
  *(_QWORD *)a1 = off_24C336AA0;
}

void mlcore::GeniusConfigTable::defaultNumResultsColumn(mlcore::GeniusConfigTable *this@<X0>, uint64_t a2@<X8>)
{
  mlcore::MediaTable<long long,int,int,int,mediaplatform::Data>::mediaColumnAtIndex<2ul>(a2, (uint64_t)this);
}

void mlcore::MediaTable<long long,int,int,int,mediaplatform::Data>::mediaColumnAtIndex<2ul>(uint64_t a1, uint64_t a2)
{
  std::string *v4;

  *(_QWORD *)a1 = off_24C335D90;
  v4 = (std::string *)(a1 + 8);
  if (*(char *)(a2 + 479) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)(a2 + 456), *(_QWORD *)(a2 + 464));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)(a2 + 456);
    v4->__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 472);
  }
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 480);
  *(_QWORD *)(a1 + 36) = *(_QWORD *)(a2 + 484);
  *(_QWORD *)a1 = off_24C336AA0;
}

void mlcore::GeniusConfigTable::minNumResultsColumn(mlcore::GeniusConfigTable *this@<X0>, uint64_t a2@<X8>)
{
  mlcore::MediaTable<long long,int,int,int,mediaplatform::Data>::mediaColumnAtIndex<3ul>(a2, (uint64_t)this);
}

void mlcore::MediaTable<long long,int,int,int,mediaplatform::Data>::mediaColumnAtIndex<3ul>(uint64_t a1, uint64_t a2)
{
  std::string *v4;

  *(_QWORD *)a1 = off_24C335D90;
  v4 = (std::string *)(a1 + 8);
  if (*(char *)(a2 + 527) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)(a2 + 504), *(_QWORD *)(a2 + 512));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)(a2 + 504);
    v4->__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 520);
  }
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 528);
  *(_QWORD *)(a1 + 36) = *(_QWORD *)(a2 + 532);
  *(_QWORD *)a1 = off_24C336AA0;
}

mediaplatform::Data *mlcore::GeniusConfigTable::dataColumn@<X0>(mlcore::GeniusConfigTable *this@<X0>, uint64_t a2@<X8>)
{
  return mlcore::MediaTable<long long,int,int,int,mediaplatform::Data>::mediaColumnAtIndex<4ul>(a2, (uint64_t)this);
}

mediaplatform::Data *mlcore::MediaTable<long long,int,int,int,mediaplatform::Data>::mediaColumnAtIndex<4ul>(uint64_t a1, uint64_t a2)
{
  mediaplatform::Data *result;

  *(_QWORD *)a1 = off_24C335D90;
  if (*(char *)(a2 + 575) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 8), *(const std::string::value_type **)(a2 + 552), *(_QWORD *)(a2 + 560));
  }
  else
  {
    *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 552);
    *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 568);
  }
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 576);
  *(_QWORD *)a1 = &off_24C335A98;
  *(_BYTE *)(a1 + 36) = *(_BYTE *)(a2 + 580);
  result = mediaplatform::Data::Data((mediaplatform::Data *)(a1 + 40), (const mediaplatform::Data *)(a2 + 584));
  *(_QWORD *)a1 = &off_24C336A40;
  return result;
}

void sub_20A8485E0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  uint64_t v3;

  *(_QWORD *)v1 = v3;
  if (*(char *)(v1 + 31) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

void mediaplatform::SQLOnJoinConstraint::~SQLOnJoinConstraint(mediaplatform::SQLOnJoinConstraint *this)
{
  *(_QWORD *)this = &off_24C331188;
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
}

{
  *(_QWORD *)this = &off_24C331188;
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
  JUMPOUT(0x20BD27AFCLL);
}

void mediaplatform::SQLOnJoinConstraint::sql(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  std::string *v3;
  std::string v4;

  (*(void (**)(std::string *__return_ptr))(**(_QWORD **)(a1 + 8) + 16))(&v4);
  v3 = std::string::insert(&v4, 0, "ON ");
  *a2 = *v3;
  v3->__r_.__value_.__l.__size_ = 0;
  v3->__r_.__value_.__r.__words[2] = 0;
  v3->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v4.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v4.__r_.__value_.__l.__data_);
}

void sub_20A8486E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void mediaplatform::SQLUsingJoinConstraint::~SQLUsingJoinConstraint(mediaplatform::SQLUsingJoinConstraint *this)
{
  void **v1;

  *(_QWORD *)this = &off_24C3313A0;
  v1 = (void **)((char *)this + 8);
  std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__destroy_vector::operator()[abi:ne180100](&v1);
}

{
  void **v1;

  *(_QWORD *)this = &off_24C3313A0;
  v1 = (void **)((char *)this + 8);
  std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__destroy_vector::operator()[abi:ne180100](&v1);
  JUMPOUT(0x20BD27AFCLL);
}

void mediaplatform::SQLUsingJoinConstraint::sql(uint64_t a1@<X0>, uint64_t a2@<X1>, std::string *a3@<X8>)
{
  uint64_t *v6;
  uint64_t *v7;
  char v8;
  std::__shared_weak_count *v9;
  uint64_t v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  void **v13;
  uint64_t v14;
  void **v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  std::string *v19;
  __int128 v20;
  std::string *v21;
  void *v22[2];
  unsigned __int8 v23;
  std::string v24;
  std::string v25;
  void *__p[2];
  unsigned __int8 v27;
  uint64_t v28;
  std::__shared_weak_count *v29;
  _QWORD v30[11];
  char v31;
  uint64_t v32;

  std::string::basic_string[abi:ne180100]<0>(v22, ", ");
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v30);
  v6 = *(uint64_t **)(a1 + 8);
  v7 = *(uint64_t **)(a1 + 16);
  if (v6 != v7)
  {
    v8 = 1;
    do
    {
      v10 = *v6;
      v9 = (std::__shared_weak_count *)v6[1];
      v28 = *v6;
      v29 = v9;
      if (v9)
      {
        p_shared_owners = (unint64_t *)&v9->__shared_owners_;
        do
          v12 = __ldxr(p_shared_owners);
        while (__stxr(v12 + 1, p_shared_owners));
      }
      if ((v8 & 1) == 0)
      {
        if ((v23 & 0x80u) == 0)
          v13 = v22;
        else
          v13 = (void **)v22[0];
        if ((v23 & 0x80u) == 0)
          v14 = v23;
        else
          v14 = (uint64_t)v22[1];
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)v13, v14);
      }
      (*(void (**)(void **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v10 + 16))(__p, v10, a2);
      if ((v27 & 0x80u) == 0)
        v15 = __p;
      else
        v15 = (void **)__p[0];
      if ((v27 & 0x80u) == 0)
        v16 = v27;
      else
        v16 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)v15, v16);
      if ((char)v27 < 0)
      {
        operator delete(__p[0]);
        if (v9)
        {
LABEL_24:
          v17 = (unint64_t *)&v9->__shared_owners_;
          do
            v18 = __ldaxr(v17);
          while (__stlxr(v18 - 1, v17));
          if (!v18)
          {
            ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
            std::__shared_weak_count::__release_weak(v9);
          }
        }
      }
      else if (v9)
      {
        goto LABEL_24;
      }
      v8 = 0;
      v6 += 2;
    }
    while (v6 != v7);
  }
  std::stringbuf::str();
  v30[0] = *MEMORY[0x24BEDB800];
  *(_QWORD *)((char *)v30 + *(_QWORD *)(v30[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  v30[1] = MEMORY[0x24BEDB848] + 16;
  if (v31 < 0)
    operator delete((void *)v30[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x20BD27A84](&v32);
  v19 = std::string::insert(&v24, 0, "USING (");
  v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  v25.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v25.__r_.__value_.__l.__data_ = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  v21 = std::string::append(&v25, ")");
  *a3 = *v21;
  v21->__r_.__value_.__l.__size_ = 0;
  v21->__r_.__value_.__r.__words[2] = 0;
  v21->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v25.__r_.__value_.__l.__data_);
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v24.__r_.__value_.__l.__data_);
  if ((char)v23 < 0)
    operator delete(v22[0]);
}

void sub_20A8489E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,char a34,uint64_t a35,char a36)
{
  if (a26 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  if (a14 < 0)
    operator delete(a9);
  _Unwind_Resume(exception_object);
}

void mediaplatform::SQLJoinClause::~SQLJoinClause(void **this)
{
  *this = off_24C330D60;
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)(this + 5));
  if (*((char *)this + 39) < 0)
    operator delete(this[2]);
}

{
  *this = off_24C330D60;
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)(this + 5));
  if (*((char *)this + 39) < 0)
    operator delete(this[2]);
  JUMPOUT(0x20BD27AFCLL);
}

uint64_t mediaplatform::SQLJoinClause::sql(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  void *p_p;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  void **v10;
  uint64_t v11;
  std::runtime_error *exception;
  void *__p;
  uint64_t v15;
  unsigned __int8 v16;
  _QWORD v17[11];
  char v18;
  uint64_t v19;

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v17);
  v4 = *(unsigned int *)(a1 + 8);
  if (v4 >= 8)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "unknown join operator");
    __cxa_throw(exception, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, (&off_24C33DB10)[v4]);
  if ((v16 & 0x80u) == 0)
    p_p = &__p;
  else
    p_p = __p;
  if ((v16 & 0x80u) == 0)
    v6 = v16;
  else
    v6 = v15;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)p_p, v6);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)" JOIN ", 6);
  if ((char)v16 < 0)
    operator delete(__p);
  v7 = *(char *)(a1 + 39);
  if (v7 >= 0)
    v8 = a1 + 16;
  else
    v8 = *(_QWORD *)(a1 + 16);
  if (v7 >= 0)
    v9 = *(unsigned __int8 *)(a1 + 39);
  else
    v9 = *(_QWORD *)(a1 + 24);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, v8, v9);
  if (*(_QWORD *)(a1 + 40))
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)" ", 1);
    (*(void (**)(void **__return_ptr, _QWORD, uint64_t))(**(_QWORD **)(a1 + 40) + 16))(&__p, *(_QWORD *)(a1 + 40), a2);
    v10 = (v16 & 0x80u) == 0 ? &__p : (void **)__p;
    v11 = (v16 & 0x80u) == 0 ? v16 : v15;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)v10, v11);
    if ((char)v16 < 0)
      operator delete(__p);
  }
  std::stringbuf::str();
  v17[0] = *MEMORY[0x24BEDB800];
  *(_QWORD *)((char *)v17 + *(_QWORD *)(v17[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  v17[1] = MEMORY[0x24BEDB848] + 16;
  if (v18 < 0)
    operator delete((void *)v17[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x20BD27A84](&v19);
}

void sub_20A848CD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  void *v15;

  __cxa_free_exception(v15);
  std::ostringstream::~ostringstream((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void mediaplatform::SQLFromStatement::~SQLFromStatement(void **this)
{
  void **v2;

  *this = off_24C330EA0;
  v2 = this + 4;
  std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
}

{
  void **v2;

  *this = off_24C330EA0;
  v2 = this + 4;
  std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
  JUMPOUT(0x20BD27AFCLL);
}

uint64_t mediaplatform::SQLFromStatement::sql(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *size;
  unint64_t *v5;
  unint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::string *v23;
  std::string::size_type v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  uint64_t v29;
  std::__shared_weak_count *v30;
  std::string v31;
  uint64_t v32;
  std::__shared_weak_count *v33;
  _QWORD v34[11];
  char v35;
  uint64_t v36;

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v34);
  if (a2)
  {
    (*(void (**)(std::string *__return_ptr, uint64_t))(*(_QWORD *)a2 + 8))(&v31, a2);
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>(v31.__r_.__value_.__r.__words[0] + 48, (unsigned __int8 *)(a1 + 8), a1 + 8);
    size = (std::__shared_weak_count *)v31.__r_.__value_.__l.__size_;
    if (v31.__r_.__value_.__l.__size_)
    {
      v5 = (unint64_t *)(v31.__r_.__value_.__l.__size_ + 8);
      do
        v6 = __ldaxr(v5);
      while (__stlxr(v6 - 1, v5));
      if (!v6)
      {
        ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
        std::__shared_weak_count::__release_weak(size);
      }
    }
  }
  v7 = *(char *)(a1 + 31);
  if (v7 >= 0)
    v8 = a1 + 8;
  else
    v8 = *(_QWORD *)(a1 + 8);
  if (v7 >= 0)
    v9 = *(unsigned __int8 *)(a1 + 31);
  else
    v9 = *(_QWORD *)(a1 + 16);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, v8, v9);
  v10 = *(uint64_t **)(a1 + 32);
  v11 = *(uint64_t **)(a1 + 40);
  while (v10 != v11)
  {
    v12 = *v10;
    v13 = (std::__shared_weak_count *)v10[1];
    v32 = *v10;
    v33 = v13;
    if (v13)
    {
      p_shared_owners = (unint64_t *)&v13->__shared_owners_;
      do
        v15 = __ldxr(p_shared_owners);
      while (__stxr(v15 + 1, p_shared_owners));
    }
    if (a2)
    {
      if (*(char *)(v12 + 39) < 0)
        std::string::__init_copy_ctor_external(&v31, *(const std::string::value_type **)(v12 + 16), *(_QWORD *)(v12 + 24));
      else
        v31 = *(std::string *)(v12 + 16);
      (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)a2 + 8))(&v29, a2);
      v16 = v29 + 48;
      if (std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>((_QWORD *)(v29 + 48), (unsigned __int8 *)&v31))
      {
        v17 = v30;
        if (v30)
        {
          v18 = (unint64_t *)&v30->__shared_owners_;
          do
            v19 = __ldaxr(v18);
          while (__stlxr(v19 - 1, v18));
          if (!v19)
          {
            ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
            std::__shared_weak_count::__release_weak(v17);
          }
        }
        goto LABEL_41;
      }
      std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>(v16, (unsigned __int8 *)&v31, (uint64_t)&v31);
      v20 = v30;
      if (v30)
      {
        v21 = (unint64_t *)&v30->__shared_owners_;
        do
          v22 = __ldaxr(v21);
        while (__stlxr(v22 - 1, v21));
        if (!v22)
        {
          ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
          std::__shared_weak_count::__release_weak(v20);
        }
      }
      if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v31.__r_.__value_.__l.__data_);
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)" ", 1);
    (*(void (**)(std::string *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v32 + 16))(&v31, v32, a2);
    if ((v31.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v23 = &v31;
    else
      v23 = (std::string *)v31.__r_.__value_.__r.__words[0];
    if ((v31.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v24 = HIBYTE(v31.__r_.__value_.__r.__words[2]);
    else
      v24 = v31.__r_.__value_.__l.__size_;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)v23, v24);
LABEL_41:
    if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v31.__r_.__value_.__l.__data_);
    v25 = v33;
    if (v33)
    {
      v26 = (unint64_t *)&v33->__shared_owners_;
      do
        v27 = __ldaxr(v26);
      while (__stlxr(v27 - 1, v26));
      if (!v27)
      {
        ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
        std::__shared_weak_count::__release_weak(v25);
      }
    }
    v10 += 2;
  }
  std::stringbuf::str();
  v34[0] = *MEMORY[0x24BEDB800];
  *(_QWORD *)((char *)v34 + *(_QWORD *)(v34[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  v34[1] = MEMORY[0x24BEDB848] + 16;
  if (v35 < 0)
    operator delete((void *)v34[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x20BD27A84](&v36);
}

void sub_20A8490E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17, uint64_t a18, char a19)
{
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)&__p);
  std::ostringstream::~ostringstream((uint64_t)&a19);
  _Unwind_Resume(a1);
}

_QWORD *mediaplatform::SQLOnJoinConstraint::SQLOnJoinConstraint(_QWORD *result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *a2;
  v2 = a2[1];
  *result = &off_24C331188;
  result[1] = v3;
  result[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *a2;
  v2 = a2[1];
  *result = &off_24C331188;
  result[1] = v3;
  result[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

_QWORD *mediaplatform::SQLUsingJoinConstraint::SQLUsingJoinConstraint(_QWORD *a1, uint64_t *a2)
{
  std::__shared_weak_count *v3;
  uint64_t v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t v11;

  *a1 = &off_24C3313A0;
  v4 = *a2;
  v3 = (std::__shared_weak_count *)a2[1];
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  a1[1] = 0;
  a1[2] = 0;
  a1[3] = 0;
  v7 = operator new(0x10uLL);
  a1[1] = v7;
  a1[2] = v7;
  v8 = v7 + 2;
  a1[3] = v7 + 2;
  *v7 = v4;
  v7[1] = v3;
  if (v3)
  {
    v9 = (unint64_t *)&v3->__shared_owners_;
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
    a1[2] = v8;
    do
      v11 = __ldaxr(v9);
    while (__stlxr(v11 - 1, v9));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  else
  {
    a1[2] = v8;
  }
  return a1;
}

void sub_20A8492B0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  void **v3;
  va_list va;
  uint64_t v5;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, void **);
  v5 = va_arg(va1, _QWORD);
  std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  _Unwind_Resume(a1);
}

_QWORD *mediaplatform::SQLUsingJoinConstraint::SQLUsingJoinConstraint(_QWORD *a1, _QWORD **a2)
{
  *a1 = &off_24C3313A0;
  a1[2] = 0;
  a1[3] = 0;
  a1[1] = 0;
  std::vector<std::shared_ptr<mediaplatform::SQLColumnNameExpression const>>::__init_with_size[abi:ne180100]<std::shared_ptr<mediaplatform::SQLColumnNameExpression const>*,std::shared_ptr<mediaplatform::SQLColumnNameExpression const>*>(a1 + 1, *a2, a2[1], ((char *)a2[1] - (char *)*a2) >> 4);
  return a1;
}

{
  *a1 = &off_24C3313A0;
  a1[2] = 0;
  a1[3] = 0;
  a1[1] = 0;
  std::vector<std::shared_ptr<mediaplatform::SQLColumnNameExpression const>>::__init_with_size[abi:ne180100]<std::shared_ptr<mediaplatform::SQLColumnNameExpression const>*,std::shared_ptr<mediaplatform::SQLColumnNameExpression const>*>(a1 + 1, *a2, a2[1], ((char *)a2[1] - (char *)*a2) >> 4);
  return a1;
}

_QWORD *std::vector<std::shared_ptr<mediaplatform::SQLColumnNameExpression const>>::__init_with_size[abi:ne180100]<std::shared_ptr<mediaplatform::SQLColumnNameExpression const>*,std::shared_ptr<mediaplatform::SQLColumnNameExpression const>*>(_QWORD *result, _QWORD *a2, _QWORD *a3, unint64_t a4)
{
  _QWORD *v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  if (a4)
  {
    if (a4 >> 60)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v7 = result;
    result = operator new(16 * a4);
    *v7 = result;
    v7[1] = result;
    v7[2] = &result[2 * a4];
    while (a2 != a3)
    {
      v8 = a2[1];
      *result = *a2;
      result[1] = v8;
      if (v8)
      {
        v9 = (unint64_t *)(v8 + 8);
        do
          v10 = __ldxr(v9);
        while (__stxr(v10 + 1, v9));
      }
      a2 += 2;
      result += 2;
    }
    v7[1] = result;
  }
  return result;
}

void sub_20A8493B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t mediaplatform::SQLJoinClause::SQLJoinClause(uint64_t a1, int a2, __int128 *a3, _QWORD *a4)
{
  std::string *v6;
  __int128 v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  *(_QWORD *)a1 = off_24C330D60;
  *(_DWORD *)(a1 + 8) = a2;
  v6 = (std::string *)(a1 + 16);
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v6, *(const std::string::value_type **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    v7 = *a3;
    v6->__r_.__value_.__r.__words[2] = *((_QWORD *)a3 + 2);
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = v7;
  }
  v8 = a4[1];
  *(_QWORD *)(a1 + 40) = *a4;
  *(_QWORD *)(a1 + 48) = v8;
  if (v8)
  {
    v9 = (unint64_t *)(v8 + 8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  return a1;
}

uint64_t mediaplatform::SQLFromStatement::SQLFromStatement(uint64_t a1, __int128 *a2, _QWORD **a3)
{
  __int128 v5;

  *(_QWORD *)a1 = off_24C330EA0;
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 8), *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v5 = *a2;
    *(_QWORD *)(a1 + 24) = *((_QWORD *)a2 + 2);
    *(_OWORD *)(a1 + 8) = v5;
  }
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  std::vector<std::shared_ptr<mediaplatform::SQLJoinClause const>>::__init_with_size[abi:ne180100]<std::shared_ptr<mediaplatform::SQLJoinClause const>*,std::shared_ptr<mediaplatform::SQLJoinClause const>*>((_QWORD *)(a1 + 32), *a3, a3[1], ((char *)a3[1] - (char *)*a3) >> 4);
  return a1;
}

void sub_20A849518(_Unwind_Exception *exception_object)
{
  void **v1;
  uint64_t v2;

  if (*(char *)(v2 + 31) < 0)
    operator delete(*v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::vector<std::shared_ptr<mediaplatform::SQLJoinClause const>>::__init_with_size[abi:ne180100]<std::shared_ptr<mediaplatform::SQLJoinClause const>*,std::shared_ptr<mediaplatform::SQLJoinClause const>*>(_QWORD *result, _QWORD *a2, _QWORD *a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  if (a4)
  {
    if (a4 >> 60)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v6 = result;
    result = std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<mediaplatform::DatabaseParameterBase>>>(a4);
    *v6 = result;
    v6[1] = result;
    v6[2] = &result[2 * v7];
    while (a2 != a3)
    {
      *result = *a2;
      v8 = a2[1];
      result[1] = v8;
      if (v8)
      {
        v9 = (unint64_t *)(v8 + 8);
        do
          v10 = __ldxr(v9);
        while (__stxr(v10 + 1, v9));
      }
      a2 += 2;
      result += 2;
    }
    v6[1] = result;
  }
  return result;
}

void sub_20A8495D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

int64x2_t *mediaplatform::SQLFromStatement::addJoinClause(int64x2_t *result, __int128 *a2)
{
  int64x2_t *v2;
  __int128 v3;
  unint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  _OWORD *v7;
  _OWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  _QWORD *v17;
  _QWORD *v18;
  char *v19;
  __int128 v20;
  int64x2_t v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  int64x2_t v25;
  uint64_t v26;
  int64x2_t *v27;

  v2 = result;
  v3 = *a2;
  if (*((_QWORD *)a2 + 1))
  {
    v4 = (unint64_t *)(*((_QWORD *)&v3 + 1) + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = result[3].u64[0];
  v7 = (_OWORD *)result[2].i64[1];
  if ((unint64_t)v7 >= v6)
  {
    v23 = v3;
    v9 = result[2].i64[0];
    v10 = ((uint64_t)v7 - v9) >> 4;
    if ((unint64_t)(v10 + 1) >> 60)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v11 = v6 - v9;
    v12 = v11 >> 3;
    if (v11 >> 3 <= (unint64_t)(v10 + 1))
      v12 = v10 + 1;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF0)
      v13 = 0xFFFFFFFFFFFFFFFLL;
    else
      v13 = v12;
    v27 = v2 + 3;
    v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<mediaplatform::DatabaseParameterBase>>>(v13);
    v16 = &v14[16 * v10];
    *(_OWORD *)v16 = v23;
    v18 = (_QWORD *)v2[2].i64[0];
    v17 = (_QWORD *)v2[2].i64[1];
    if (v17 == v18)
    {
      v21 = vdupq_n_s64((unint64_t)v17);
      v19 = &v14[16 * v10];
    }
    else
    {
      v19 = &v14[16 * v10];
      do
      {
        v20 = *((_OWORD *)v17 - 1);
        v17 -= 2;
        *((_OWORD *)v19 - 1) = v20;
        v19 -= 16;
        *v17 = 0;
        v17[1] = 0;
      }
      while (v17 != v18);
      v21 = v2[2];
    }
    v8 = v16 + 16;
    v2[2].i64[0] = (uint64_t)v19;
    v2[2].i64[1] = (uint64_t)(v16 + 16);
    v25 = v21;
    v22 = v2[3].i64[0];
    v2[3].i64[0] = (uint64_t)&v14[16 * v15];
    v26 = v22;
    v24 = v21.i64[0];
    result = (int64x2_t *)std::__split_buffer<std::shared_ptr<mediaplatform::SQLExpression const>>::~__split_buffer((uint64_t)&v24);
  }
  else
  {
    *v7 = v3;
    v8 = v7 + 1;
  }
  v2[2].i64[1] = (uint64_t)v8;
  return result;
}

void sub_20A84970C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void mlcore::ItemArtistTable::~ItemArtistTable(mlcore::ItemArtistTable *this)
{
  *(_QWORD *)this = off_24C336168;
  std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul,3ul,4ul,5ul,6ul,7ul,8ul,9ul,10ul,11ul,12ul,13ul,14ul,15ul>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<mediaplatform::Data>,mlcore::MediaColumn<int>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<mediaplatform::Data>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<int>>::~__tuple_impl((uint64_t)this + 976);
  *(_QWORD *)this = off_24C335600;
  *((_QWORD *)this + 116) = off_24C335D90;
  if (*((char *)this + 959) < 0)
    operator delete(*((void **)this + 117));
  mediaplatform::DatabaseColumnTuple<1ul,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple((uint64_t)this + 80);
  if (*((char *)this + 79) < 0)
    operator delete(*((void **)this + 7));
  mediaplatform::DatabaseTableBase::~DatabaseTableBase((void **)this);
}

{
  *(_QWORD *)this = off_24C336168;
  std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul,3ul,4ul,5ul,6ul,7ul,8ul,9ul,10ul,11ul,12ul,13ul,14ul,15ul>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<mediaplatform::Data>,mlcore::MediaColumn<int>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<mediaplatform::Data>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<int>>::~__tuple_impl((uint64_t)this + 976);
  *(_QWORD *)this = off_24C335600;
  *((_QWORD *)this + 116) = off_24C335D90;
  if (*((char *)this + 959) < 0)
    operator delete(*((void **)this + 117));
  mediaplatform::DatabaseColumnTuple<1ul,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple((uint64_t)this + 80);
  if (*((char *)this + 79) < 0)
    operator delete(*((void **)this + 7));
  mediaplatform::DatabaseTableBase::~DatabaseTableBase((void **)this);
  JUMPOUT(0x20BD27AFCLL);
}

uint64_t mediaplatform::DatabaseTable<long long,std::string,std::string,std::string,std::string,mediaplatform::Data,int,long long,long long,int,int,int,int,mediaplatform::Data,long long,int>::columnCount()
{
  return 16;
}

uint64_t std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul,3ul,4ul,5ul,6ul,7ul,8ul,9ul,10ul,11ul,12ul,13ul,14ul,15ul>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<mediaplatform::Data>,mlcore::MediaColumn<int>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<mediaplatform::Data>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<int>>::~__tuple_impl(uint64_t a1)
{
  *(_QWORD *)(a1 + 848) = off_24C335D90;
  if (*(char *)(a1 + 879) < 0)
    operator delete(*(void **)(a1 + 856));
  *(_QWORD *)(a1 + 800) = off_24C335D90;
  if (*(char *)(a1 + 831) < 0)
    operator delete(*(void **)(a1 + 808));
  mediaplatform::DatabaseColumn<mediaplatform::Data>::~DatabaseColumn(a1 + 720);
  *(_QWORD *)(a1 + 672) = off_24C335D90;
  if (*(char *)(a1 + 703) < 0)
    operator delete(*(void **)(a1 + 680));
  *(_QWORD *)(a1 + 624) = off_24C335D90;
  if (*(char *)(a1 + 655) < 0)
    operator delete(*(void **)(a1 + 632));
  *(_QWORD *)(a1 + 576) = off_24C335D90;
  if (*(char *)(a1 + 607) < 0)
    operator delete(*(void **)(a1 + 584));
  *(_QWORD *)(a1 + 528) = off_24C335D90;
  if (*(char *)(a1 + 559) < 0)
    operator delete(*(void **)(a1 + 536));
  *(_QWORD *)(a1 + 480) = off_24C335D90;
  if (*(char *)(a1 + 511) < 0)
    operator delete(*(void **)(a1 + 488));
  *(_QWORD *)(a1 + 432) = off_24C335D90;
  if (*(char *)(a1 + 463) < 0)
    operator delete(*(void **)(a1 + 440));
  *(_QWORD *)(a1 + 384) = off_24C335D90;
  if (*(char *)(a1 + 415) < 0)
    operator delete(*(void **)(a1 + 392));
  mediaplatform::DatabaseColumn<mediaplatform::Data>::~DatabaseColumn(a1 + 304);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 240);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 176);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 112);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 48);
  *(_QWORD *)a1 = off_24C335D90;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

uint64_t mediaplatform::DatabaseColumnTuple<1ul,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(uint64_t a1)
{
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 784);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 720);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 656);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 592);
  mediaplatform::DatabaseColumn<mediaplatform::Data>::~DatabaseColumn(a1 + 512);
  *(_QWORD *)(a1 + 464) = off_24C335D90;
  if (*(char *)(a1 + 495) < 0)
    operator delete(*(void **)(a1 + 472));
  *(_QWORD *)(a1 + 416) = off_24C335D90;
  if (*(char *)(a1 + 447) < 0)
    operator delete(*(void **)(a1 + 424));
  *(_QWORD *)(a1 + 368) = off_24C335D90;
  if (*(char *)(a1 + 399) < 0)
    operator delete(*(void **)(a1 + 376));
  return mediaplatform::DatabaseColumnTuple<9ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<9ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(uint64_t a1)
{
  *(_QWORD *)(a1 + 320) = off_24C335D90;
  if (*(char *)(a1 + 351) < 0)
    operator delete(*(void **)(a1 + 328));
  *(_QWORD *)(a1 + 272) = off_24C335D90;
  if (*(char *)(a1 + 303) < 0)
    operator delete(*(void **)(a1 + 280));
  *(_QWORD *)(a1 + 224) = off_24C335D90;
  if (*(char *)(a1 + 255) < 0)
    operator delete(*(void **)(a1 + 232));
  *(_QWORD *)(a1 + 176) = off_24C335D90;
  if (*(char *)(a1 + 207) < 0)
    operator delete(*(void **)(a1 + 184));
  mediaplatform::DatabaseColumn<mediaplatform::Data>::~DatabaseColumn(a1 + 96);
  *(_QWORD *)(a1 + 48) = off_24C335D90;
  if (*(char *)(a1 + 79) < 0)
    operator delete(*(void **)(a1 + 56));
  *(_QWORD *)a1 = off_24C335D90;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void mediaplatform::DatabaseTable<long long,std::string,std::string,std::string,std::string,mediaplatform::Data,int,long long,long long,int,int,int,int,mediaplatform::Data,long long,int>::~DatabaseTable(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = off_24C335600;
  v2 = a1 + 80;
  *(_QWORD *)(a1 + 928) = off_24C335D90;
  if (*(char *)(a1 + 959) < 0)
    operator delete(*(void **)(a1 + 936));
  mediaplatform::DatabaseColumnTuple<1ul,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(v2);
  if (*(char *)(a1 + 79) < 0)
    operator delete(*(void **)(a1 + 56));
  mediaplatform::DatabaseTableBase::~DatabaseTableBase((void **)a1);
}

{
  uint64_t v2;

  *(_QWORD *)a1 = off_24C335600;
  v2 = a1 + 80;
  *(_QWORD *)(a1 + 928) = off_24C335D90;
  if (*(char *)(a1 + 959) < 0)
    operator delete(*(void **)(a1 + 936));
  mediaplatform::DatabaseColumnTuple<1ul,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(v2);
  if (*(char *)(a1 + 79) < 0)
    operator delete(*(void **)(a1 + 56));
  mediaplatform::DatabaseTableBase::~DatabaseTableBase((void **)a1);
  JUMPOUT(0x20BD27AFCLL);
}

{
  uint64_t v2;

  *(_QWORD *)a1 = off_24C335600;
  v2 = a1 + 80;
  *(_QWORD *)(a1 + 928) = off_24C335D90;
  if (*(char *)(a1 + 959) < 0)
    operator delete(*(void **)(a1 + 936));
  mediaplatform::DatabaseColumnTuple<1ul,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(v2);
  if (*(char *)(a1 + 79) < 0)
    operator delete(*(void **)(a1 + 56));
  mediaplatform::DatabaseTableBase::~DatabaseTableBase((void **)a1);
}

void mlcore::MediaTable<long long,std::string,std::string,std::string,std::string,mediaplatform::Data,int,long long,long long,int,int,int,int,mediaplatform::Data,long long,int>::~MediaTable(uint64_t a1)
{
  *(_QWORD *)a1 = off_24C336168;
  std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul,3ul,4ul,5ul,6ul,7ul,8ul,9ul,10ul,11ul,12ul,13ul,14ul,15ul>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<mediaplatform::Data>,mlcore::MediaColumn<int>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<mediaplatform::Data>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<int>>::~__tuple_impl(a1 + 976);
  *(_QWORD *)a1 = off_24C335600;
  *(_QWORD *)(a1 + 928) = off_24C335D90;
  if (*(char *)(a1 + 959) < 0)
    operator delete(*(void **)(a1 + 936));
  mediaplatform::DatabaseColumnTuple<1ul,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(a1 + 80);
  if (*(char *)(a1 + 79) < 0)
    operator delete(*(void **)(a1 + 56));
  mediaplatform::DatabaseTableBase::~DatabaseTableBase((void **)a1);
}

{
  *(_QWORD *)a1 = off_24C336168;
  std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul,3ul,4ul,5ul,6ul,7ul,8ul,9ul,10ul,11ul,12ul,13ul,14ul,15ul>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<mediaplatform::Data>,mlcore::MediaColumn<int>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<mediaplatform::Data>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<int>>::~__tuple_impl(a1 + 976);
  *(_QWORD *)a1 = off_24C335600;
  *(_QWORD *)(a1 + 928) = off_24C335D90;
  if (*(char *)(a1 + 959) < 0)
    operator delete(*(void **)(a1 + 936));
  mediaplatform::DatabaseColumnTuple<1ul,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(a1 + 80);
  if (*(char *)(a1 + 79) < 0)
    operator delete(*(void **)(a1 + 56));
  mediaplatform::DatabaseTableBase::~DatabaseTableBase((void **)a1);
  JUMPOUT(0x20BD27AFCLL);
}

uint64_t std::__tuple_leaf<5ul,mlcore::MediaColumn<mediaplatform::Data>,false>::__tuple_leaf[abi:ne180100]<mlcore::MediaColumn<mediaplatform::Data>&,void>(uint64_t a1, uint64_t a2)
{
  __int128 v4;

  *(_QWORD *)a1 = off_24C335D90;
  if (*(char *)(a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 8), *(const std::string::value_type **)(a2 + 8), *(_QWORD *)(a2 + 16));
  }
  else
  {
    v4 = *(_OWORD *)(a2 + 8);
    *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 8) = v4;
  }
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_QWORD *)a1 = &off_24C335A98;
  *(_BYTE *)(a1 + 36) = *(_BYTE *)(a2 + 36);
  mediaplatform::Data::Data((mediaplatform::Data *)(a1 + 40), (const mediaplatform::Data *)(a2 + 40));
  *(_QWORD *)a1 = &off_24C336A40;
  return a1;
}

void sub_20A849D60(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  uint64_t v3;

  *(_QWORD *)v1 = v3;
  if (*(char *)(v1 + 31) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

uint64_t mediaplatform::DatabaseColumnTuple<2ul,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(uint64_t a1)
{
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 720);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 656);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 592);
  mediaplatform::DatabaseColumn<mediaplatform::Data>::~DatabaseColumn(a1 + 512);
  *(_QWORD *)(a1 + 464) = off_24C335D90;
  if (*(char *)(a1 + 495) < 0)
    operator delete(*(void **)(a1 + 472));
  *(_QWORD *)(a1 + 416) = off_24C335D90;
  if (*(char *)(a1 + 447) < 0)
    operator delete(*(void **)(a1 + 424));
  *(_QWORD *)(a1 + 368) = off_24C335D90;
  if (*(char *)(a1 + 399) < 0)
    operator delete(*(void **)(a1 + 376));
  return mediaplatform::DatabaseColumnTuple<9ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<3ul,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(uint64_t a1)
{
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 656);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 592);
  mediaplatform::DatabaseColumn<mediaplatform::Data>::~DatabaseColumn(a1 + 512);
  *(_QWORD *)(a1 + 464) = off_24C335D90;
  if (*(char *)(a1 + 495) < 0)
    operator delete(*(void **)(a1 + 472));
  *(_QWORD *)(a1 + 416) = off_24C335D90;
  if (*(char *)(a1 + 447) < 0)
    operator delete(*(void **)(a1 + 424));
  *(_QWORD *)(a1 + 368) = off_24C335D90;
  if (*(char *)(a1 + 399) < 0)
    operator delete(*(void **)(a1 + 376));
  return mediaplatform::DatabaseColumnTuple<9ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<4ul,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(uint64_t a1)
{
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 592);
  mediaplatform::DatabaseColumn<mediaplatform::Data>::~DatabaseColumn(a1 + 512);
  *(_QWORD *)(a1 + 464) = off_24C335D90;
  if (*(char *)(a1 + 495) < 0)
    operator delete(*(void **)(a1 + 472));
  *(_QWORD *)(a1 + 416) = off_24C335D90;
  if (*(char *)(a1 + 447) < 0)
    operator delete(*(void **)(a1 + 424));
  *(_QWORD *)(a1 + 368) = off_24C335D90;
  if (*(char *)(a1 + 399) < 0)
    operator delete(*(void **)(a1 + 376));
  return mediaplatform::DatabaseColumnTuple<9ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<5ul,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(uint64_t a1)
{
  mediaplatform::DatabaseColumn<mediaplatform::Data>::~DatabaseColumn(a1 + 512);
  *(_QWORD *)(a1 + 464) = off_24C335D90;
  if (*(char *)(a1 + 495) < 0)
    operator delete(*(void **)(a1 + 472));
  *(_QWORD *)(a1 + 416) = off_24C335D90;
  if (*(char *)(a1 + 447) < 0)
    operator delete(*(void **)(a1 + 424));
  *(_QWORD *)(a1 + 368) = off_24C335D90;
  if (*(char *)(a1 + 399) < 0)
    operator delete(*(void **)(a1 + 376));
  return mediaplatform::DatabaseColumnTuple<9ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<6ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(uint64_t a1)
{
  *(_QWORD *)(a1 + 464) = off_24C335D90;
  if (*(char *)(a1 + 495) < 0)
    operator delete(*(void **)(a1 + 472));
  *(_QWORD *)(a1 + 416) = off_24C335D90;
  if (*(char *)(a1 + 447) < 0)
    operator delete(*(void **)(a1 + 424));
  *(_QWORD *)(a1 + 368) = off_24C335D90;
  if (*(char *)(a1 + 399) < 0)
    operator delete(*(void **)(a1 + 376));
  return mediaplatform::DatabaseColumnTuple<9ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<7ul,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(uint64_t a1)
{
  *(_QWORD *)(a1 + 416) = off_24C335D90;
  if (*(char *)(a1 + 447) < 0)
    operator delete(*(void **)(a1 + 424));
  *(_QWORD *)(a1 + 368) = off_24C335D90;
  if (*(char *)(a1 + 399) < 0)
    operator delete(*(void **)(a1 + 376));
  return mediaplatform::DatabaseColumnTuple<9ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<8ul,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(uint64_t a1)
{
  *(_QWORD *)(a1 + 368) = off_24C335D90;
  if (*(char *)(a1 + 399) < 0)
    operator delete(*(void **)(a1 + 376));
  return mediaplatform::DatabaseColumnTuple<9ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<10ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(uint64_t a1)
{
  *(_QWORD *)(a1 + 272) = off_24C335D90;
  if (*(char *)(a1 + 303) < 0)
    operator delete(*(void **)(a1 + 280));
  *(_QWORD *)(a1 + 224) = off_24C335D90;
  if (*(char *)(a1 + 255) < 0)
    operator delete(*(void **)(a1 + 232));
  *(_QWORD *)(a1 + 176) = off_24C335D90;
  if (*(char *)(a1 + 207) < 0)
    operator delete(*(void **)(a1 + 184));
  mediaplatform::DatabaseColumn<mediaplatform::Data>::~DatabaseColumn(a1 + 96);
  *(_QWORD *)(a1 + 48) = off_24C335D90;
  if (*(char *)(a1 + 79) < 0)
    operator delete(*(void **)(a1 + 56));
  *(_QWORD *)a1 = off_24C335D90;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

uint64_t mediaplatform::DatabaseColumnTuple<11ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(uint64_t a1)
{
  *(_QWORD *)(a1 + 224) = off_24C335D90;
  if (*(char *)(a1 + 255) < 0)
    operator delete(*(void **)(a1 + 232));
  *(_QWORD *)(a1 + 176) = off_24C335D90;
  if (*(char *)(a1 + 207) < 0)
    operator delete(*(void **)(a1 + 184));
  mediaplatform::DatabaseColumn<mediaplatform::Data>::~DatabaseColumn(a1 + 96);
  *(_QWORD *)(a1 + 48) = off_24C335D90;
  if (*(char *)(a1 + 79) < 0)
    operator delete(*(void **)(a1 + 56));
  *(_QWORD *)a1 = off_24C335D90;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

uint64_t mediaplatform::DatabaseColumnTuple<12ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(uint64_t a1)
{
  *(_QWORD *)(a1 + 176) = off_24C335D90;
  if (*(char *)(a1 + 207) < 0)
    operator delete(*(void **)(a1 + 184));
  mediaplatform::DatabaseColumn<mediaplatform::Data>::~DatabaseColumn(a1 + 96);
  *(_QWORD *)(a1 + 48) = off_24C335D90;
  if (*(char *)(a1 + 79) < 0)
    operator delete(*(void **)(a1 + 56));
  *(_QWORD *)a1 = off_24C335D90;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

uint64_t mediaplatform::DatabaseColumnTuple<13ul,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(uint64_t a1)
{
  mediaplatform::DatabaseColumn<mediaplatform::Data>::~DatabaseColumn(a1 + 96);
  *(_QWORD *)(a1 + 48) = off_24C335D90;
  if (*(char *)(a1 + 79) < 0)
    operator delete(*(void **)(a1 + 56));
  *(_QWORD *)a1 = off_24C335D90;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void mlcore::ItemArtistTable::persistentIDColumn(mlcore::ItemArtistTable *this@<X0>, uint64_t a2@<X8>)
{
  std::string *v4;

  *(_QWORD *)a2 = off_24C335D90;
  v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 1007) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 123), *((_QWORD *)this + 124));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 984);
    *(_QWORD *)(a2 + 24) = *((_QWORD *)this + 125);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 252);
  *(_DWORD *)(a2 + 44) = *((_DWORD *)this + 255);
  *(_QWORD *)(a2 + 36) = *(_QWORD *)((char *)this + 1012);
  *(_QWORD *)a2 = off_24C336AC0;
}

void mlcore::ItemArtistTable::nameColumn(mlcore::ItemArtistTable *this@<X0>, uint64_t a2@<X8>)
{
  std::string *v4;
  std::string *v5;

  *(_QWORD *)a2 = off_24C335D90;
  v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 1055) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 129), *((_QWORD *)this + 130));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 1032);
    *(_QWORD *)(a2 + 24) = *((_QWORD *)this + 131);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 264);
  *(_QWORD *)a2 = &off_24C335AB8;
  *(_BYTE *)(a2 + 36) = *((_BYTE *)this + 1060);
  v5 = (std::string *)(a2 + 40);
  if (*((char *)this + 1087) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)this + 133), *((_QWORD *)this + 134));
  }
  else
  {
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 1064);
    *(_QWORD *)(a2 + 56) = *((_QWORD *)this + 135);
  }
  *(_QWORD *)a2 = &off_24C336A60;
}

void sub_20A84A370(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  uint64_t v3;

  *(_QWORD *)v1 = v3;
  if (*(char *)(v1 + 31) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

void mlcore::ItemArtistTable::sortNameColumn(mlcore::ItemArtistTable *this@<X0>, uint64_t a2@<X8>)
{
  std::string *v4;
  std::string *v5;

  *(_QWORD *)a2 = off_24C335D90;
  v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 1119) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 137), *((_QWORD *)this + 138));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 1096);
    *(_QWORD *)(a2 + 24) = *((_QWORD *)this + 139);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 280);
  *(_QWORD *)a2 = &off_24C335AB8;
  *(_BYTE *)(a2 + 36) = *((_BYTE *)this + 1124);
  v5 = (std::string *)(a2 + 40);
  if (*((char *)this + 1151) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)this + 141), *((_QWORD *)this + 142));
  }
  else
  {
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 1128);
    *(_QWORD *)(a2 + 56) = *((_QWORD *)this + 143);
  }
  *(_QWORD *)a2 = &off_24C336A60;
}

void sub_20A84A450(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  uint64_t v3;

  *(_QWORD *)v1 = v3;
  if (*(char *)(v1 + 31) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

void mlcore::ItemArtistTable::seriesNameColumn(mlcore::ItemArtistTable *this@<X0>, uint64_t a2@<X8>)
{
  std::string *v4;
  std::string *v5;

  *(_QWORD *)a2 = off_24C335D90;
  v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 1183) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 145), *((_QWORD *)this + 146));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 1160);
    *(_QWORD *)(a2 + 24) = *((_QWORD *)this + 147);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 296);
  *(_QWORD *)a2 = &off_24C335AB8;
  *(_BYTE *)(a2 + 36) = *((_BYTE *)this + 1188);
  v5 = (std::string *)(a2 + 40);
  if (*((char *)this + 1215) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)this + 149), *((_QWORD *)this + 150));
  }
  else
  {
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 1192);
    *(_QWORD *)(a2 + 56) = *((_QWORD *)this + 151);
  }
  *(_QWORD *)a2 = &off_24C336A60;
}

void sub_20A84A530(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  uint64_t v3;

  *(_QWORD *)v1 = v3;
  if (*(char *)(v1 + 31) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

void mlcore::ItemArtistTable::sortSeriesNameColumn(mlcore::ItemArtistTable *this@<X0>, uint64_t a2@<X8>)
{
  std::string *v4;
  std::string *v5;

  *(_QWORD *)a2 = off_24C335D90;
  v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 1247) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 153), *((_QWORD *)this + 154));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 1224);
    *(_QWORD *)(a2 + 24) = *((_QWORD *)this + 155);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 312);
  *(_QWORD *)a2 = &off_24C335AB8;
  *(_BYTE *)(a2 + 36) = *((_BYTE *)this + 1252);
  v5 = (std::string *)(a2 + 40);
  if (*((char *)this + 1279) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)this + 157), *((_QWORD *)this + 158));
  }
  else
  {
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 1256);
    *(_QWORD *)(a2 + 56) = *((_QWORD *)this + 159);
  }
  *(_QWORD *)a2 = &off_24C336A60;
}

void sub_20A84A610(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  uint64_t v3;

  *(_QWORD *)v1 = v3;
  if (*(char *)(v1 + 31) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

mediaplatform::Data *mlcore::ItemArtistTable::groupingKeyColumn@<X0>(mlcore::ItemArtistTable *this@<X0>, uint64_t a2@<X8>)
{
  std::string *v4;
  mediaplatform::Data *result;

  *(_QWORD *)a2 = off_24C335D90;
  v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 1311) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 161), *((_QWORD *)this + 162));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 1288);
    *(_QWORD *)(a2 + 24) = *((_QWORD *)this + 163);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 328);
  *(_QWORD *)a2 = &off_24C335A98;
  *(_BYTE *)(a2 + 36) = *((_BYTE *)this + 1316);
  result = mediaplatform::Data::Data((mediaplatform::Data *)(a2 + 40), (mlcore::ItemArtistTable *)((char *)this + 1320));
  *(_QWORD *)a2 = &off_24C336A40;
  return result;
}

void sub_20A84A6CC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  uint64_t v3;

  *(_QWORD *)v1 = v3;
  if (*(char *)(v1 + 31) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

void mlcore::ItemArtistTable::cloudStatusColumn(mlcore::ItemArtistTable *this@<X0>, uint64_t a2@<X8>)
{
  std::string *v4;

  *(_QWORD *)a2 = off_24C335D90;
  v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 1391) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 171), *((_QWORD *)this + 172));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 1368);
    *(_QWORD *)(a2 + 24) = *((_QWORD *)this + 173);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 348);
  *(_QWORD *)(a2 + 36) = *(_QWORD *)((char *)this + 1396);
  *(_QWORD *)a2 = off_24C336AA0;
}

void mlcore::ItemArtistTable::storeIDColumn(mlcore::ItemArtistTable *this@<X0>, uint64_t a2@<X8>)
{
  std::string *v4;

  *(_QWORD *)a2 = off_24C335D90;
  v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 1439) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 177), *((_QWORD *)this + 178));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 1416);
    *(_QWORD *)(a2 + 24) = *((_QWORD *)this + 179);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 360);
  *(_DWORD *)(a2 + 44) = *((_DWORD *)this + 363);
  *(_QWORD *)(a2 + 36) = *(_QWORD *)((char *)this + 1444);
  *(_QWORD *)a2 = off_24C336AC0;
}

void mlcore::ItemArtistTable::representativeItemPersistentIDColumn(mlcore::ItemArtistTable *this@<X0>, uint64_t a2@<X8>)
{
  std::string *v4;

  *(_QWORD *)a2 = off_24C335D90;
  v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 1487) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 183), *((_QWORD *)this + 184));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 1464);
    *(_QWORD *)(a2 + 24) = *((_QWORD *)this + 185);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 372);
  *(_DWORD *)(a2 + 44) = *((_DWORD *)this + 375);
  *(_QWORD *)(a2 + 36) = *(_QWORD *)((char *)this + 1492);
  *(_QWORD *)a2 = off_24C336AC0;
}

void mlcore::ItemArtistTable::keepLocalColumn(mlcore::ItemArtistTable *this@<X0>, uint64_t a2@<X8>)
{
  std::string *v4;

  *(_QWORD *)a2 = off_24C335D90;
  v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 1535) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 189), *((_QWORD *)this + 190));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 1512);
    *(_QWORD *)(a2 + 24) = *((_QWORD *)this + 191);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 384);
  *(_QWORD *)(a2 + 36) = *(_QWORD *)((char *)this + 1540);
  *(_QWORD *)a2 = off_24C336AA0;
}

void mlcore::ItemArtistTable::keepLocalStatusColumn(mlcore::ItemArtistTable *this@<X0>, uint64_t a2@<X8>)
{
  std::string *v4;

  *(_QWORD *)a2 = off_24C335D90;
  v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 1583) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 195), *((_QWORD *)this + 196));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 1560);
    *(_QWORD *)(a2 + 24) = *((_QWORD *)this + 197);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 396);
  *(_QWORD *)(a2 + 36) = *(_QWORD *)((char *)this + 1588);
  *(_QWORD *)a2 = off_24C336AA0;
}

void mlcore::ItemArtistTable::keepLocalStatusReasonColumn(mlcore::ItemArtistTable *this@<X0>, uint64_t a2@<X8>)
{
  std::string *v4;

  *(_QWORD *)a2 = off_24C335D90;
  v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 1631) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 201), *((_QWORD *)this + 202));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 1608);
    *(_QWORD *)(a2 + 24) = *((_QWORD *)this + 203);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 408);
  *(_QWORD *)(a2 + 36) = *(_QWORD *)((char *)this + 1636);
  *(_QWORD *)a2 = off_24C336AA0;
}

void mlcore::ItemArtistTable::keepLocalConstraintsColumn(mlcore::ItemArtistTable *this@<X0>, uint64_t a2@<X8>)
{
  std::string *v4;

  *(_QWORD *)a2 = off_24C335D90;
  v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 1679) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 207), *((_QWORD *)this + 208));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 1656);
    *(_QWORD *)(a2 + 24) = *((_QWORD *)this + 209);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 420);
  *(_QWORD *)(a2 + 36) = *(_QWORD *)((char *)this + 1684);
  *(_QWORD *)a2 = off_24C336AA0;
}

mediaplatform::Data *mlcore::ItemArtistTable::appDataColumn@<X0>(mlcore::ItemArtistTable *this@<X0>, uint64_t a2@<X8>)
{
  std::string *v4;
  mediaplatform::Data *result;

  *(_QWORD *)a2 = off_24C335D90;
  v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 1727) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 213), *((_QWORD *)this + 214));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 1704);
    *(_QWORD *)(a2 + 24) = *((_QWORD *)this + 215);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 432);
  *(_QWORD *)a2 = &off_24C335A98;
  *(_BYTE *)(a2 + 36) = *((_BYTE *)this + 1732);
  result = mediaplatform::Data::Data((mediaplatform::Data *)(a2 + 40), (mlcore::ItemArtistTable *)((char *)this + 1736));
  *(_QWORD *)a2 = &off_24C336A40;
  return result;
}

void sub_20A84AAFC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  uint64_t v3;

  *(_QWORD *)v1 = v3;
  if (*(char *)(v1 + 31) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

void mlcore::ItemArtistTable::syncIDColumn(mlcore::ItemArtistTable *this@<X0>, uint64_t a2@<X8>)
{
  std::string *v4;

  *(_QWORD *)a2 = off_24C335D90;
  v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 1807) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 223), *((_QWORD *)this + 224));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 1784);
    *(_QWORD *)(a2 + 24) = *((_QWORD *)this + 225);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 452);
  *(_DWORD *)(a2 + 44) = *((_DWORD *)this + 455);
  *(_QWORD *)(a2 + 36) = *(_QWORD *)((char *)this + 1812);
  *(_QWORD *)a2 = off_24C336AC0;
}

void mlcore::ItemArtistTable::classicalExperienceAvailableColumn(mlcore::ItemArtistTable *this@<X0>, uint64_t a2@<X8>)
{
  std::string *v4;

  *(_QWORD *)a2 = off_24C335D90;
  v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 1855) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 229), *((_QWORD *)this + 230));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 1832);
    *(_QWORD *)(a2 + 24) = *((_QWORD *)this + 231);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 464);
  *(_QWORD *)(a2 + 36) = *(_QWORD *)((char *)this + 1860);
  *(_QWORD *)a2 = off_24C336AA0;
}

mlcore::LanguageResources *mlcore::LanguageResources::LanguageResources(mlcore::LanguageResources *this, const mediaplatform::ContentBundle *a2)
{
  __int128 *v4;
  __int128 *v5;
  char *v6;
  __int128 v7;
  size_t size;
  std::string *v9;
  std::string *p_str;
  void **v11;
  mediaplatform::PlatformErrorCondition *exception;
  std::string *v14;
  uint64_t *v15;
  mlcore::LanguageResources *v16;
  std::string __p;
  __int128 v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  std::string __str;
  std::string v23;
  void (**v24)(mediaplatform::File *__hidden);
  uint64_t v25;
  std::string v26;
  std::string::size_type *p_size;

  std::string::basic_string[abi:ne180100]<0>(&v26, "");
  mediaplatform::FilePath::FilePath(&__p, &v26);
  mlcore::LocalizedSectionsInfo::LocalizedSectionsInfo(this, (const mediaplatform::FilePath *)&__p);
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_24C331570;
  __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p.__r_.__value_.__l.__size_;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v26.__r_.__value_.__l.__data_);
  v16 = this;
  std::string::basic_string[abi:ne180100]<0>(&v26, "");
  mediaplatform::FilePath::FilePath(&__p, &v26);
  mlcore::LocalizedSortingDetails::LocalizedSortingDetails((mlcore::LanguageResources *)((char *)this + 72), (const mediaplatform::FilePath *)&__p);
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_24C331570;
  __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p.__r_.__value_.__l.__size_;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v26.__r_.__value_.__l.__data_);
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = 0;
  v14 = (std::string *)((char *)this + 96);
  v15 = (uint64_t *)((char *)this + 72);
  *((_QWORD *)this + 14) = 0;
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  mediaplatform::FilePath::FilePath(&v26, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v5 = (__int128 *)*((_QWORD *)a2 + 12);
  v4 = (__int128 *)*((_QWORD *)a2 + 13);
  if (v5 != v4)
  {
    v6 = (char *)a2 + 64;
    while (1)
    {
      if (*((char *)v5 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&__str, *(const std::string::value_type **)v5, *((_QWORD *)v5 + 1));
      }
      else
      {
        v7 = *v5;
        __str.__r_.__value_.__r.__words[2] = *((_QWORD *)v5 + 2);
        *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v7;
      }
      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
      else
        size = __str.__r_.__value_.__l.__size_;
      std::string::basic_string[abi:ne180100]((uint64_t)&v23, size + 6);
      if ((v23.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v9 = &v23;
      else
        v9 = (std::string *)v23.__r_.__value_.__r.__words[0];
      if (size)
      {
        if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          p_str = &__str;
        else
          p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
        memmove(v9, p_str, size);
      }
      strcpy((char *)v9 + size, ".lproj");
      mediaplatform::FilePath::operator+((uint64_t)v6, &v23, (uint64_t)&__p);
      mediaplatform::File::File((mediaplatform::File *)&v24, (const mediaplatform::FilePath *)&__p);
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_24C331570;
      p_size = &__p.__r_.__value_.__l.__size_;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&p_size);
      if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v23.__r_.__value_.__l.__data_);
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_24C331570;
      *(_QWORD *)&v18 = 0;
      *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = 0uLL;
      std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)&__p.__r_.__value_.__r.__words[1], *(__int128 **)(v25 + 8), *(__int128 **)(v25 + 16), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v25 + 16) - *(_QWORD *)(v25 + 8)) >> 3));
      if (mediaplatform::File::exists((mediaplatform::FilePath **)&v24))
        break;
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_24C331570;
      v23.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p.__r_.__value_.__l.__size_;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v23);
      v24 = &off_24C331550;
      std::unique_ptr<mediaplatform::File::FilePrivate>::reset[abi:ne180100](&v25);
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__str.__r_.__value_.__l.__data_);
      v5 = (__int128 *)((char *)v5 + 24);
      if (v5 == v4)
        goto LABEL_34;
    }
    std::string::operator=(v14, &__str);
    if (&v26 != (std::string *)v25)
      std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((std::vector<std::string> *)&v26.__r_.__value_.__r.__words[1], *(std::string **)(v25 + 8), *(__int128 **)(v25 + 16), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v25 + 16) - *(_QWORD *)(v25 + 8)) >> 3));
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_24C331570;
    v23.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p.__r_.__value_.__l.__size_;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v23);
    v24 = &off_24C331550;
    std::unique_ptr<mediaplatform::File::FilePrivate>::reset[abi:ne180100](&v25);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
  }
LABEL_34:
  if (v26.__r_.__value_.__r.__words[2] == v26.__r_.__value_.__l.__size_)
  {
    LODWORD(v23.__r_.__value_.__l.__data_) = 2;
    std::string::basic_string[abi:ne180100]<0>(&__str, "Could not find preferred localization bundle");
    mediaplatform::PlatformErrorCondition::PlatformErrorCondition((uint64_t)&__p, (int *)&v23, (__int128 *)&__str);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
    exception = (mediaplatform::PlatformErrorCondition *)__cxa_allocate_exception(0x40uLL);
    mediaplatform::PlatformErrorCondition::PlatformErrorCondition(exception, (const mediaplatform::PlatformErrorCondition *)&__p);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "Sections.plist");
  mediaplatform::FilePath::operator+((uint64_t)&v26, &__p, (uint64_t)&__str);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  mlcore::LocalizedSectionsInfo::LocalizedSectionsInfo((mlcore::LocalizedSectionsInfo *)&__p, (const mediaplatform::FilePath *)&__str);
  if (*(_QWORD *)v16)
  {
    std::vector<mlcore::LocalizedSectionHeader>::__base_destruct_at_end[abi:ne180100]((uint64_t)v16, *(_QWORD *)v16);
    operator delete(*(void **)v16);
    *(_QWORD *)v16 = 0;
    *((_QWORD *)v16 + 1) = 0;
    *((_QWORD *)v16 + 2) = 0;
  }
  *(std::string *)v16 = __p;
  memset(&__p, 0, sizeof(__p));
  std::vector<std::string>::__vdeallocate((std::vector<std::string> *)v16 + 1);
  *(_OWORD *)((char *)v16 + 24) = v18;
  *((_QWORD *)v16 + 5) = v19;
  v19 = 0;
  v18 = 0uLL;
  v11 = (void **)((char *)v16 + 48);
  if (*((char *)v16 + 71) < 0)
    operator delete(*v11);
  *(_OWORD *)v11 = v20;
  *((_QWORD *)v16 + 8) = v21;
  HIBYTE(v21) = 0;
  LOBYTE(v20) = 0;
  v23.__r_.__value_.__r.__words[0] = (std::string::size_type)&v18;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v23);
  v23.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
  std::vector<mlcore::LocalizedSectionHeader>::__destroy_vector::operator()[abi:ne180100]((void ***)&v23);
  std::string::basic_string[abi:ne180100]<0>(&v23, "SortingDetails.plist");
  mediaplatform::FilePath::operator+((uint64_t)&v26, &v23, (uint64_t)&__p);
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v23.__r_.__value_.__l.__data_);
  mlcore::LocalizedSortingDetails::LocalizedSortingDetails((mlcore::LocalizedSortingDetails *)&v23, (const mediaplatform::FilePath *)&__p);
  if (*v15)
  {
    std::vector<std::string>::__clear[abi:ne180100](v15);
    operator delete((void *)*v15);
    *v15 = 0;
    v15[1] = 0;
    v15[2] = 0;
  }
  *((std::string *)v16 + 3) = v23;
  memset(&v23, 0, sizeof(v23));
  v24 = (void (**)(mediaplatform::File *__hidden))&v23;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v24);
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_24C331570;
  v23.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p.__r_.__value_.__l.__size_;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v23);
  __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_24C331570;
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&__str.__r_.__value_.__l.__size_;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  v26.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_24C331570;
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v26.__r_.__value_.__l.__size_;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  return v16;
}

void sub_20A84B16C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **a10, std::exception_vtbl *a11, void **a12, std::exception a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38)
{
  uint64_t v38;

  mediaplatform::PlatformErrorCondition::~PlatformErrorCondition(&a13);
  *(_QWORD *)(v38 - 128) = &off_24C331570;
  a13.__vftable = (std::exception_vtbl *)(v38 - 120);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a13);
  if (*((char *)a12 + 119) < 0)
    operator delete(*a10);
  a13.__vftable = a11;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a13);
  mlcore::LocalizedSectionsInfo::~LocalizedSectionsInfo(a12);
  _Unwind_Resume(a1);
}

void std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>(std::vector<std::string> *a1, std::string *__str, __int128 *a3, unint64_t a4)
{
  __int128 *v6;
  uint64_t p_end_cap;
  std::string *begin;
  unint64_t v10;
  unint64_t v11;
  std::string *v12;
  std::string *end;
  __int128 *v14;
  uint64_t v15;

  v6 = (__int128 *)__str;
  p_end_cap = (uint64_t)&a1->__end_cap_;
  begin = a1->__begin_;
  if (0xAAAAAAAAAAAAAAABLL * (((char *)a1->__end_cap_.__value_ - (char *)a1->__begin_) >> 3) < a4)
  {
    std::vector<std::string>::__vdeallocate(a1);
    if (a4 > 0xAAAAAAAAAAAAAAALL)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v10 = 0x5555555555555556 * (((char *)a1->__end_cap_.__value_ - (char *)a1->__begin_) >> 3);
    if (v10 <= a4)
      v10 = a4;
    if (0xAAAAAAAAAAAAAAABLL * (((char *)a1->__end_cap_.__value_ - (char *)a1->__begin_) >> 3) >= 0x555555555555555)
      v11 = 0xAAAAAAAAAAAAAAALL;
    else
      v11 = v10;
    std::vector<mlcore::SortDescriptor>::__vallocate[abi:ne180100](a1, v11);
    v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string*,std::string*,std::string*>(p_end_cap, v6, a3, a1->__end_);
LABEL_15:
    a1->__end_ = v12;
    return;
  }
  end = a1->__end_;
  if (0xAAAAAAAAAAAAAAABLL * (((char *)end - (char *)begin) >> 3) < a4)
  {
    v14 = (__int128 *)(&__str->__r_.__value_.__l.__data_ + (((char *)end - (char *)begin) >> 3));
    if (end != begin)
    {
      v15 = 8 * (((char *)end - (char *)begin) >> 3);
      do
      {
        std::string::operator=(begin, (const std::string *)v6);
        v6 = (__int128 *)((char *)v6 + 24);
        ++begin;
        v15 -= 24;
      }
      while (v15);
      begin = a1->__end_;
    }
    v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string*,std::string*,std::string*>(p_end_cap, v14, a3, begin);
    goto LABEL_15;
  }
  if (__str != (std::string *)a3)
  {
    do
    {
      std::string::operator=(begin, (const std::string *)v6);
      v6 = (__int128 *)((char *)v6 + 24);
      ++begin;
    }
    while (v6 != a3);
    end = a1->__end_;
  }
  while (end != begin)
  {
    if (SHIBYTE(end[-1].__r_.__value_.__r.__words[2]) < 0)
      operator delete(end[-1].__r_.__value_.__l.__data_);
    --end;
  }
  a1->__end_ = begin;
}

void sub_20A84B520(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t mlcore::LanguageResources::sortingDetails(mlcore::LanguageResources *this)
{
  return (uint64_t)this + 72;
}

uint64_t mlcore::LanguageResources::canonicalLanguageIdentifier(mlcore::LanguageResources *this)
{
  return (uint64_t)this + 96;
}

uint64_t mlcore::LanguageResources::unknownSectionIndex(mlcore::LanguageResources *this)
{
  return -1;
}

void mediaplatform::SQLOrderingTerm::~SQLOrderingTerm(mediaplatform::SQLOrderingTerm *this)
{
  *(_QWORD *)this = &off_24C330E30;
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)this + 16);
}

{
  *(_QWORD *)this = &off_24C330E30;
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)this + 16);
  JUMPOUT(0x20BD27AFCLL);
}

uint64_t mediaplatform::SQLOrderingTerm::sql(uint64_t a1, uint64_t a2)
{
  void *p_p;
  uint64_t v5;
  void **v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  void *__p;
  uint64_t v12;
  unsigned __int8 v13;
  _QWORD v14[11];
  char v15;
  uint64_t v16;

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v14);
  (*(void (**)(void **__return_ptr, _QWORD, uint64_t))(**(_QWORD **)(a1 + 16) + 16))(&__p, *(_QWORD *)(a1 + 16), a2);
  if ((v13 & 0x80u) == 0)
    p_p = &__p;
  else
    p_p = __p;
  if ((v13 & 0x80u) == 0)
    v5 = v13;
  else
    v5 = v12;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)p_p, v5);
  if ((char)v13 < 0)
    operator delete(__p);
  if (*(_DWORD *)(a1 + 12))
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)" ", 1);
    mediaplatform::NameForCollateType(&__p, *(_DWORD *)(a1 + 12));
    v6 = (v13 & 0x80u) == 0 ? &__p : (void **)__p;
    v7 = (v13 & 0x80u) == 0 ? v13 : v12;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v6, v7);
    if ((char)v13 < 0)
      operator delete(__p);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)" ", 1);
  mediaplatform::NameForOrderingType(&__p, *(_DWORD *)(a1 + 8));
  if ((v13 & 0x80u) == 0)
    v8 = &__p;
  else
    v8 = __p;
  if ((v13 & 0x80u) == 0)
    v9 = v13;
  else
    v9 = v12;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v8, v9);
  if ((char)v13 < 0)
    operator delete(__p);
  std::stringbuf::str();
  v14[0] = *MEMORY[0x24BEDB800];
  *(_QWORD *)((char *)v14 + *(_QWORD *)(v14[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  v14[1] = MEMORY[0x24BEDB848] + 16;
  if (v15 < 0)
    operator delete((void *)v14[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x20BD27A84](&v16);
}

void sub_20A84B76C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a15);
  _Unwind_Resume(a1);
}

_QWORD *mediaplatform::NameForCollateType(_QWORD *a1, int a2)
{
  std::runtime_error *exception;

  if ((a2 - 1) >= 3)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "unknown collate type");
    __cxa_throw(exception, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
  }
  return std::string::basic_string[abi:ne180100]<0>(a1, (&off_24C33DB50)[a2 - 1]);
}

void sub_20A84B80C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

_QWORD *mediaplatform::NameForOrderingType(_QWORD *a1, int a2)
{
  char *v2;
  std::runtime_error *exception;

  if (a2)
  {
    if (a2 != 1)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "unknown ordering type");
      __cxa_throw(exception, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
    }
    v2 = "DESC";
  }
  else
  {
    v2 = "ASC";
  }
  return std::string::basic_string[abi:ne180100]<0>(a1, v2);
}

void sub_20A84B888(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t mediaplatform::SQLOrderingTerm::SQLOrderingTerm(uint64_t result, _QWORD *a2, int a3, int a4)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  *(_QWORD *)result = &off_24C330E30;
  *(_DWORD *)(result + 8) = a3;
  *(_DWORD *)(result + 12) = a4;
  v4 = a2[1];
  *(_QWORD *)(result + 16) = *a2;
  *(_QWORD *)(result + 24) = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return result;
}

{
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  *(_QWORD *)result = &off_24C330E30;
  *(_DWORD *)(result + 8) = a3;
  *(_DWORD *)(result + 12) = a4;
  v4 = a2[1];
  *(_QWORD *)(result + 16) = *a2;
  *(_QWORD *)(result + 24) = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return result;
}

uint64_t mlcore::MediaTable<long long,std::string,std::string,long long,long long,mediaplatform::Data,int,int,int,int,std::string,int,int,int,int,int,int,mediaplatform::Data,int,long long,long long,long long,int,long long,std::string,long long>::MediaTable(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28)
{
  int v35;
  int v36;
  int v37;
  int v38;
  int v39;
  int v40;
  const void *v41;
  size_t v42;
  void *v43;
  const void *v44;
  size_t v45;
  void *v46;
  int v47;
  int v48;
  uint64_t v49;
  int v50;
  int v51;
  uint64_t v52;
  int v53;
  int v54;
  uint64_t v55;
  int v56;
  int v57;
  int v58;
  _OWORD *v59;
  int v60;
  std::string *v61;
  const void *v62;
  size_t v63;
  void *v64;
  int v65;
  int v66;
  const void *v67;
  size_t v68;
  void *v69;
  int v70;
  int v71;
  int v72;
  int v73;
  int v74;
  int v75;
  __int128 v76;
  __int128 v77;
  std::string *v78;
  __int128 v79;
  _OWORD *v81;
  int v82;
  int v83;
  int v84;
  int v85;
  int v86;
  int v87;
  uint64_t v88;
  int v89;
  uint64_t v90;
  int v91;
  int v92;
  uint64_t v93;
  int v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  int v98;
  uint64_t v99;
  uint64_t v100;
  int v101;
  uint64_t v102;
  int v103;
  uint64_t v104;
  int v105;
  uint64_t v106;
  int v107;
  uint64_t v108;
  int v109;
  uint64_t v110;
  int v111;
  int v112;
  int v113;
  uint64_t v114;
  int v115;
  int v116;
  int v117;
  uint64_t v118;
  int v119;
  int v120;
  int v121;
  uint64_t v122;
  int v123;
  int v124;
  int v125;
  int v126;
  int v127;
  int v128;
  int v129;
  int v130;
  int v131;
  int v132;
  std::string v133;
  int v134;
  uint64_t v135;
  int v136;
  uint64_t (**v137)();
  std::string v138;
  int v139;
  char v140;
  std::string v141;
  uint64_t (**v142)();
  std::string v143;
  int v144;
  uint64_t v145;
  int v146;
  uint64_t (**v147)();
  std::string v148;
  int v149;
  uint64_t v150;
  uint64_t (**v151)();
  std::string v152;
  int v153;
  uint64_t v154;
  int v155;
  uint64_t (**v156)();
  std::string v157;
  int v158;
  uint64_t v159;
  int v160;
  uint64_t (**v161)();
  std::string v162;
  int v163;
  uint64_t v164;
  int v165;
  uint64_t (**v166)();
  std::string v167;
  int v168;
  uint64_t v169;
  uint64_t (**v170)();
  std::string v171;
  int v172;
  char v173;
  void (**v174)(mediaplatform::Data *__hidden);
  size_t v175;
  size_t v176;
  const void *v177;
  char v178;
  uint64_t (**v179)();
  std::string v180;
  int v181;
  uint64_t v182;
  uint64_t (**v183)();
  std::string v184;
  int v185;
  uint64_t v186;
  uint64_t (**v187)();
  std::string v188;
  int v189;
  uint64_t v190;
  uint64_t (**v191)();
  std::string v192;
  int v193;
  uint64_t v194;
  uint64_t (**v195)();
  std::string v196;
  int v197;
  uint64_t v198;
  uint64_t (**v199)();
  std::string v200;
  int v201;
  uint64_t v202;
  uint64_t (**v203)();
  std::string v204;
  int v205;
  char v206;
  std::string v207;
  uint64_t (**v208)();
  std::string v209;
  int v210;
  uint64_t v211;
  uint64_t (**v212)();
  std::string v213;
  int v214;
  uint64_t v215;
  uint64_t (**v216)();
  std::string v217;
  int v218;
  uint64_t v219;
  uint64_t (**v220)();
  std::string v221;
  int v222;
  uint64_t v223;
  uint64_t (**v224)();
  std::string v225;
  int v226;
  char v227;
  void (**v228)(mediaplatform::Data *__hidden);
  size_t v229;
  size_t v230;
  const void *v231;
  char v232;
  uint64_t (**v233)();
  std::string v234;
  int v235;
  uint64_t v236;
  int v237;
  uint64_t (**v238)();
  std::string v239;
  int v240;
  uint64_t v241;
  int v242;
  uint64_t (**v243)();
  std::string v244;
  int v245;
  char v246;
  std::string v247;
  uint64_t (**v248)();
  std::string v249;
  int v250;
  char v251;
  std::string v252;
  uint64_t (**v253)();
  std::string __s;
  int v255;
  uint64_t v256;
  int v257;
  std::string v258;
  uint64_t (**v259)();
  std::string __p;
  int v261;
  uint64_t v262;
  int v263;
  uint64_t (**v264)();
  std::string v265;
  int v266;
  char v267;
  std::string v268;
  uint64_t (**v269)();
  std::string v270;
  int v271;
  uint64_t v272;
  int v273;
  uint64_t (**v274)();
  std::string v275;
  int v276;
  uint64_t v277;
  uint64_t (**v278)();
  std::string v279;
  int v280;
  uint64_t v281;
  int v282;
  uint64_t (**v283)();
  std::string v284;
  int v285;
  uint64_t v286;
  int v287;
  uint64_t (**v288)();
  std::string v289;
  int v290;
  uint64_t v291;
  int v292;
  uint64_t (**v293)();
  std::string v294;
  int v295;
  uint64_t v296;
  uint64_t (**v297)();
  std::string v298;
  int v299;
  char v300;
  void (**v301)(mediaplatform::Data *__hidden);
  size_t v302;
  size_t v303;
  void *v304;
  char v305;
  uint64_t (**v306)();
  std::string v307;
  int v308;
  uint64_t v309;
  uint64_t (**v310)();
  std::string v311;
  int v312;
  uint64_t v313;
  uint64_t (**v314)();
  std::string v315;
  int v316;
  uint64_t v317;
  uint64_t (**v318)();
  std::string v319;
  int v320;
  uint64_t v321;
  uint64_t (**v322)();
  std::string v323;
  int v324;
  uint64_t v325;
  uint64_t (**v326)();
  std::string v327;
  int v328;
  uint64_t v329;
  uint64_t (**v330)();
  std::string v331;
  int v332;
  char v333;
  std::string v334;
  uint64_t (**v335)();
  std::string v336;
  int v337;
  uint64_t v338;
  uint64_t (**v339)();
  std::string v340;
  int v341;
  uint64_t v342;
  uint64_t (**v343)();
  std::string v344;
  int v345;
  uint64_t v346;
  uint64_t (**v347)();
  std::string v348;
  int v349;
  uint64_t v350;
  uint64_t (**v351)();
  std::string v352;
  int v353;
  char v354;
  void (**v355)(mediaplatform::Data *__hidden);
  size_t v356;
  size_t v357;
  void *v358;
  char v359;
  uint64_t (**v360)();
  std::string v361;
  int v362;
  uint64_t v363;
  int v364;
  uint64_t (**v365)();
  std::string v366;
  int v367;
  uint64_t v368;
  int v369;
  uint64_t (**v370)();
  std::string v371;
  int v372;
  char v373;
  std::string v374;
  uint64_t (**v375)();
  std::string v376;
  int v377;
  char v378;
  std::string v379;
  uint64_t (**v380)();
  std::string v381;
  int v382;
  uint64_t v383;
  int v384;

  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&v258, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    v258 = *(std::string *)a2;
  if (*(char *)(a3 + 31) < 0)
    std::string::__init_copy_ctor_external(&__s, *(const std::string::value_type **)(a3 + 8), *(_QWORD *)(a3 + 16));
  else
    __s = *(std::string *)(a3 + 8);
  v35 = *(_DWORD *)(a3 + 32);
  v253 = off_24C335B18;
  v256 = *(_QWORD *)(a3 + 36);
  v36 = *(_DWORD *)(a3 + 44);
  v130 = v35;
  v255 = v35;
  v257 = v36;
  v248 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a4 + 31) < 0)
    std::string::__init_copy_ctor_external(&v249, *(const std::string::value_type **)(a4 + 8), *(_QWORD *)(a4 + 16));
  else
    v249 = *(std::string *)(a4 + 8);
  v250 = *(_DWORD *)(a4 + 32);
  v248 = &off_24C335AB8;
  v251 = *(_BYTE *)(a4 + 36);
  if (*(char *)(a4 + 63) < 0)
    std::string::__init_copy_ctor_external(&v252, *(const std::string::value_type **)(a4 + 40), *(_QWORD *)(a4 + 48));
  else
    v252 = *(std::string *)(a4 + 40);
  v243 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a5 + 31) < 0)
    std::string::__init_copy_ctor_external(&v244, *(const std::string::value_type **)(a5 + 8), *(_QWORD *)(a5 + 16));
  else
    v244 = *(std::string *)(a5 + 8);
  v245 = *(_DWORD *)(a5 + 32);
  v243 = &off_24C335AB8;
  v246 = *(_BYTE *)(a5 + 36);
  if (*(char *)(a5 + 63) < 0)
    std::string::__init_copy_ctor_external(&v247, *(const std::string::value_type **)(a5 + 40), *(_QWORD *)(a5 + 48));
  else
    v247 = *(std::string *)(a5 + 40);
  v95 = a5;
  if (*(char *)(a6 + 31) < 0)
    std::string::__init_copy_ctor_external(&v239, *(const std::string::value_type **)(a6 + 8), *(_QWORD *)(a6 + 16));
  else
    v239 = *(std::string *)(a6 + 8);
  v37 = *(_DWORD *)(a6 + 32);
  v238 = off_24C335B18;
  v241 = *(_QWORD *)(a6 + 36);
  v38 = *(_DWORD *)(a6 + 44);
  v128 = v37;
  v240 = v37;
  v242 = v38;
  if (*(char *)(a7 + 31) < 0)
    std::string::__init_copy_ctor_external(&v234, *(const std::string::value_type **)(a7 + 8), *(_QWORD *)(a7 + 16));
  else
    v234 = *(std::string *)(a7 + 8);
  v39 = *(_DWORD *)(a7 + 32);
  v233 = off_24C335B18;
  v236 = *(_QWORD *)(a7 + 36);
  v40 = *(_DWORD *)(a7 + 44);
  v126 = v39;
  v235 = v39;
  v237 = v40;
  v224 = (uint64_t (**)())off_24C335D90;
  v99 = a3;
  if (*(char *)(a8 + 31) < 0)
    std::string::__init_copy_ctor_external(&v225, *(const std::string::value_type **)(a8 + 8), *(_QWORD *)(a8 + 16));
  else
    v225 = *(std::string *)(a8 + 8);
  v226 = *(_DWORD *)(a8 + 32);
  v224 = &off_24C335A98;
  v227 = *(_BYTE *)(a8 + 36);
  v41 = *(const void **)(a8 + 64);
  v42 = *(_QWORD *)(a8 + 48);
  v228 = &off_24C331510;
  v229 = v42;
  v230 = v42;
  if (v42)
    v43 = (void *)operator new[]();
  else
    v43 = 0;
  v231 = v43;
  v232 = 1;
  if (v41)
    memcpy(v43, v41, v42);
  else
    bzero(v43, v42);
  v96 = a4;
  if (*(char *)(a9 + 31) < 0)
    std::string::__init_copy_ctor_external(&v221, *(const std::string::value_type **)(a9 + 8), *(_QWORD *)(a9 + 16));
  else
    v221 = *(std::string *)(a9 + 8);
  v124 = *(_DWORD *)(a9 + 32);
  v222 = v124;
  v220 = off_24C335AF8;
  v122 = *(_QWORD *)(a9 + 36);
  v223 = v122;
  if (*(char *)(a10 + 31) < 0)
    std::string::__init_copy_ctor_external(&v217, *(const std::string::value_type **)(a10 + 8), *(_QWORD *)(a10 + 16));
  else
    v217 = *(std::string *)(a10 + 8);
  v120 = *(_DWORD *)(a10 + 32);
  v218 = v120;
  v216 = off_24C335AF8;
  v118 = *(_QWORD *)(a10 + 36);
  v219 = v118;
  if (*(char *)(a11 + 31) < 0)
    std::string::__init_copy_ctor_external(&v213, *(const std::string::value_type **)(a11 + 8), *(_QWORD *)(a11 + 16));
  else
    v213 = *(std::string *)(a11 + 8);
  v116 = *(_DWORD *)(a11 + 32);
  v214 = v116;
  v212 = off_24C335AF8;
  v114 = *(_QWORD *)(a11 + 36);
  v215 = v114;
  if (*(char *)(a12 + 31) < 0)
    std::string::__init_copy_ctor_external(&v209, *(const std::string::value_type **)(a12 + 8), *(_QWORD *)(a12 + 16));
  else
    v209 = *(std::string *)(a12 + 8);
  v112 = *(_DWORD *)(a12 + 32);
  v210 = v112;
  v208 = off_24C335AF8;
  v110 = *(_QWORD *)(a12 + 36);
  v211 = v110;
  v203 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a13 + 31) < 0)
    std::string::__init_copy_ctor_external(&v204, *(const std::string::value_type **)(a13 + 8), *(_QWORD *)(a13 + 16));
  else
    v204 = *(std::string *)(a13 + 8);
  v205 = *(_DWORD *)(a13 + 32);
  v203 = &off_24C335AB8;
  v206 = *(_BYTE *)(a13 + 36);
  if (*(char *)(a13 + 63) < 0)
    std::string::__init_copy_ctor_external(&v207, *(const std::string::value_type **)(a13 + 40), *(_QWORD *)(a13 + 48));
  else
    v207 = *(std::string *)(a13 + 40);
  if (*(char *)(a14 + 31) < 0)
    std::string::__init_copy_ctor_external(&v200, *(const std::string::value_type **)(a14 + 8), *(_QWORD *)(a14 + 16));
  else
    v200 = *(std::string *)(a14 + 8);
  v109 = *(_DWORD *)(a14 + 32);
  v201 = v109;
  v199 = off_24C335AF8;
  v108 = *(_QWORD *)(a14 + 36);
  v202 = v108;
  if (*(char *)(a15 + 31) < 0)
    std::string::__init_copy_ctor_external(&v196, *(const std::string::value_type **)(a15 + 8), *(_QWORD *)(a15 + 16));
  else
    v196 = *(std::string *)(a15 + 8);
  v107 = *(_DWORD *)(a15 + 32);
  v197 = v107;
  v195 = off_24C335AF8;
  v106 = *(_QWORD *)(a15 + 36);
  v198 = v106;
  if (*(char *)(a16 + 31) < 0)
    std::string::__init_copy_ctor_external(&v192, *(const std::string::value_type **)(a16 + 8), *(_QWORD *)(a16 + 16));
  else
    v192 = *(std::string *)(a16 + 8);
  v105 = *(_DWORD *)(a16 + 32);
  v193 = v105;
  v191 = off_24C335AF8;
  v104 = *(_QWORD *)(a16 + 36);
  v194 = v104;
  if (*(char *)(a17 + 31) < 0)
    std::string::__init_copy_ctor_external(&v188, *(const std::string::value_type **)(a17 + 8), *(_QWORD *)(a17 + 16));
  else
    v188 = *(std::string *)(a17 + 8);
  v103 = *(_DWORD *)(a17 + 32);
  v189 = v103;
  v187 = off_24C335AF8;
  v102 = *(_QWORD *)(a17 + 36);
  v190 = v102;
  v90 = a8;
  if (*(char *)(a18 + 31) < 0)
    std::string::__init_copy_ctor_external(&v184, *(const std::string::value_type **)(a18 + 8), *(_QWORD *)(a18 + 16));
  else
    v184 = *(std::string *)(a18 + 8);
  v101 = *(_DWORD *)(a18 + 32);
  v185 = v101;
  v183 = off_24C335AF8;
  v100 = *(_QWORD *)(a18 + 36);
  v186 = v100;
  if (*(char *)(a19 + 31) < 0)
    std::string::__init_copy_ctor_external(&v180, *(const std::string::value_type **)(a19 + 8), *(_QWORD *)(a19 + 16));
  else
    v180 = *(std::string *)(a19 + 8);
  v98 = *(_DWORD *)(a19 + 32);
  v181 = v98;
  v179 = off_24C335AF8;
  v97 = *(_QWORD *)(a19 + 36);
  v182 = v97;
  v170 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a20 + 31) < 0)
    std::string::__init_copy_ctor_external(&v171, *(const std::string::value_type **)(a20 + 8), *(_QWORD *)(a20 + 16));
  else
    v171 = *(std::string *)(a20 + 8);
  v172 = *(_DWORD *)(a20 + 32);
  v170 = &off_24C335A98;
  v173 = *(_BYTE *)(a20 + 36);
  v44 = *(const void **)(a20 + 64);
  v45 = *(_QWORD *)(a20 + 48);
  v174 = &off_24C331510;
  v175 = v45;
  v176 = v45;
  if (v45)
    v46 = (void *)operator new[]();
  else
    v46 = 0;
  v177 = v46;
  v178 = 1;
  if (v44)
    memcpy(v46, v44, v45);
  else
    bzero(v46, v45);
  if (*(char *)(a21 + 31) < 0)
    std::string::__init_copy_ctor_external(&v167, *(const std::string::value_type **)(a21 + 8), *(_QWORD *)(a21 + 16));
  else
    v167 = *(std::string *)(a21 + 8);
  v94 = *(_DWORD *)(a21 + 32);
  v168 = v94;
  v166 = off_24C335AF8;
  v93 = *(_QWORD *)(a21 + 36);
  v169 = v93;
  if (*(char *)(a22 + 31) < 0)
    std::string::__init_copy_ctor_external(&v162, *(const std::string::value_type **)(a22 + 8), *(_QWORD *)(a22 + 16));
  else
    v162 = *(std::string *)(a22 + 8);
  v47 = *(_DWORD *)(a22 + 32);
  v161 = off_24C335B18;
  v164 = *(_QWORD *)(a22 + 36);
  v48 = *(_DWORD *)(a22 + 44);
  v92 = v47;
  v163 = v47;
  v165 = v48;
  if (*(char *)(a23 + 31) < 0)
    std::string::__init_copy_ctor_external(&v157, *(const std::string::value_type **)(a23 + 8), *(_QWORD *)(a23 + 16));
  else
    v157 = *(std::string *)(a23 + 8);
  v49 = a24;
  v50 = *(_DWORD *)(a23 + 32);
  v156 = off_24C335B18;
  v159 = *(_QWORD *)(a23 + 36);
  v51 = *(_DWORD *)(a23 + 44);
  v91 = v50;
  v158 = v50;
  v160 = v51;
  if (*(char *)(a24 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(&v152, *(const std::string::value_type **)(a24 + 8), *(_QWORD *)(a24 + 16));
    v49 = a24;
  }
  else
  {
    v152 = *(std::string *)(a24 + 8);
  }
  v52 = a25;
  v53 = *(_DWORD *)(v49 + 32);
  v151 = off_24C335B18;
  v154 = *(_QWORD *)(v49 + 36);
  v54 = *(_DWORD *)(v49 + 44);
  v89 = v53;
  v153 = v53;
  v155 = v54;
  if (*(char *)(a25 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(&v148, *(const std::string::value_type **)(a25 + 8), *(_QWORD *)(a25 + 16));
    v52 = a25;
  }
  else
  {
    v148 = *(std::string *)(a25 + 8);
  }
  v55 = a26;
  v56 = *(_DWORD *)(v52 + 32);
  v149 = v56;
  v147 = off_24C335AF8;
  v88 = *(_QWORD *)(v52 + 36);
  v150 = v88;
  if (*(char *)(a26 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(&v143, *(const std::string::value_type **)(a26 + 8), *(_QWORD *)(a26 + 16));
    v55 = a26;
  }
  else
  {
    v143 = *(std::string *)(a26 + 8);
  }
  v57 = *(_DWORD *)(v55 + 32);
  v142 = off_24C335B18;
  v145 = *(_QWORD *)(v55 + 36);
  v58 = *(_DWORD *)(v55 + 44);
  v86 = v57;
  v144 = v57;
  v146 = v58;
  v137 = (uint64_t (**)())off_24C335D90;
  v87 = v56;
  if (*(char *)(a27 + 31) < 0)
    std::string::__init_copy_ctor_external(&v138, *(const std::string::value_type **)(a27 + 8), *(_QWORD *)(a27 + 16));
  else
    v138 = *(std::string *)(a27 + 8);
  v139 = *(_DWORD *)(a27 + 32);
  v137 = &off_24C335AB8;
  v140 = *(_BYTE *)(a27 + 36);
  v59 = (_OWORD *)(a27 + 40);
  if (*(char *)(a27 + 63) < 0)
  {
    std::string::__init_copy_ctor_external(&v141, *(const std::string::value_type **)(a27 + 40), *(_QWORD *)(a27 + 48));
    v59 = (_OWORD *)(a27 + 40);
  }
  else
  {
    *(_OWORD *)&v141.__r_.__value_.__l.__data_ = *v59;
    v141.__r_.__value_.__r.__words[2] = *(_QWORD *)(a27 + 56);
  }
  v81 = v59;
  if (*(char *)(a28 + 31) < 0)
    std::string::__init_copy_ctor_external(&v133, *(const std::string::value_type **)(a28 + 8), *(_QWORD *)(a28 + 16));
  else
    v133 = *(std::string *)(a28 + 8);
  v60 = *(_DWORD *)(a28 + 32);
  v134 = v60;
  v135 = *(_QWORD *)(a28 + 36);
  v136 = *(_DWORD *)(a28 + 44);
  *(_QWORD *)a1 = &off_24C330F50;
  v61 = (std::string *)(a1 + 8);
  v85 = SHIBYTE(v258.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v258.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v61, v258.__r_.__value_.__l.__data_, v258.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v61->__r_.__value_.__l.__data_ = *(_OWORD *)&v258.__r_.__value_.__l.__data_;
    *(_QWORD *)(a1 + 24) = *((_QWORD *)&v258.__r_.__value_.__l + 2);
  }
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)a1 = off_24C3356A8;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  v84 = SHIBYTE(__s.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v381, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
  else
    v381 = __s;
  v382 = v130;
  v380 = off_24C335B18;
  v383 = v256;
  v384 = v257;
  v375 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v249.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v376, v249.__r_.__value_.__l.__data_, v249.__r_.__value_.__l.__size_);
  else
    v376 = v249;
  v377 = v250;
  v375 = &off_24C335AB8;
  v378 = v251;
  if (SHIBYTE(v252.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v379, v252.__r_.__value_.__l.__data_, v252.__r_.__value_.__l.__size_);
  else
    v379 = v252;
  v370 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v244.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v371, v244.__r_.__value_.__l.__data_, v244.__r_.__value_.__l.__size_);
  else
    v371 = v244;
  v372 = v245;
  v370 = &off_24C335AB8;
  v373 = v246;
  if (SHIBYTE(v247.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v374, v247.__r_.__value_.__l.__data_, v247.__r_.__value_.__l.__size_);
  else
    v374 = v247;
  v132 = SHIBYTE(v239.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v239.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v366, v239.__r_.__value_.__l.__data_, v239.__r_.__value_.__l.__size_);
  else
    v366 = v239;
  v365 = off_24C335B18;
  v368 = v241;
  v367 = v128;
  v369 = v242;
  v131 = SHIBYTE(v234.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v234.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v361, v234.__r_.__value_.__l.__data_, v234.__r_.__value_.__l.__size_);
  else
    v361 = v234;
  v360 = off_24C335B18;
  v363 = v236;
  v362 = v126;
  v364 = v237;
  v351 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v225.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v352, v225.__r_.__value_.__l.__data_, v225.__r_.__value_.__l.__size_);
  else
    v352 = v225;
  v353 = v226;
  v351 = &off_24C335A98;
  v354 = v227;
  v62 = v231;
  v63 = v229;
  v355 = &off_24C331510;
  v356 = v229;
  v357 = v229;
  if (v229)
    v64 = (void *)operator new[]();
  else
    v64 = 0;
  v358 = v64;
  v359 = 1;
  if (v62)
    memcpy(v64, v62, v63);
  else
    bzero(v64, v63);
  v347 = (uint64_t (**)())off_24C335D90;
  v65 = SHIBYTE(v221.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v221.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v348, v221.__r_.__value_.__l.__data_, v221.__r_.__value_.__l.__size_);
  else
    v348 = v221;
  v349 = v124;
  v347 = off_24C335AF8;
  v350 = v122;
  v343 = (uint64_t (**)())off_24C335D90;
  v66 = SHIBYTE(v217.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v217.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v344, v217.__r_.__value_.__l.__data_, v217.__r_.__value_.__l.__size_);
  else
    v344 = v217;
  v345 = v120;
  v343 = off_24C335AF8;
  v346 = v118;
  v339 = (uint64_t (**)())off_24C335D90;
  v129 = SHIBYTE(v213.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v213.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v340, v213.__r_.__value_.__l.__data_, v213.__r_.__value_.__l.__size_);
  else
    v340 = v213;
  v341 = v116;
  v339 = off_24C335AF8;
  v342 = v114;
  v335 = (uint64_t (**)())off_24C335D90;
  v127 = SHIBYTE(v209.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v209.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v336, v209.__r_.__value_.__l.__data_, v209.__r_.__value_.__l.__size_);
  else
    v336 = v209;
  v337 = v112;
  v335 = off_24C335AF8;
  v338 = v110;
  v330 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v204.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v331, v204.__r_.__value_.__l.__data_, v204.__r_.__value_.__l.__size_);
  else
    v331 = v204;
  v332 = v205;
  v330 = &off_24C335AB8;
  v333 = v206;
  if (SHIBYTE(v207.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v334, v207.__r_.__value_.__l.__data_, v207.__r_.__value_.__l.__size_);
  else
    v334 = v207;
  v326 = (uint64_t (**)())off_24C335D90;
  v125 = SHIBYTE(v200.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v200.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v327, v200.__r_.__value_.__l.__data_, v200.__r_.__value_.__l.__size_);
  else
    v327 = v200;
  v328 = v109;
  v326 = off_24C335AF8;
  v329 = v108;
  v322 = (uint64_t (**)())off_24C335D90;
  v123 = SHIBYTE(v196.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v196.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v323, v196.__r_.__value_.__l.__data_, v196.__r_.__value_.__l.__size_);
  else
    v323 = v196;
  v324 = v107;
  v322 = off_24C335AF8;
  v325 = v106;
  v318 = (uint64_t (**)())off_24C335D90;
  v121 = SHIBYTE(v192.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v192.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v319, v192.__r_.__value_.__l.__data_, v192.__r_.__value_.__l.__size_);
  else
    v319 = v192;
  v320 = v105;
  v318 = off_24C335AF8;
  v321 = v104;
  v314 = (uint64_t (**)())off_24C335D90;
  v119 = SHIBYTE(v188.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v188.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v315, v188.__r_.__value_.__l.__data_, v188.__r_.__value_.__l.__size_);
  else
    v315 = v188;
  v316 = v103;
  v314 = off_24C335AF8;
  v317 = v102;
  v310 = (uint64_t (**)())off_24C335D90;
  v117 = SHIBYTE(v184.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v184.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v311, v184.__r_.__value_.__l.__data_, v184.__r_.__value_.__l.__size_);
  else
    v311 = v184;
  v312 = v101;
  v310 = off_24C335AF8;
  v313 = v100;
  v306 = (uint64_t (**)())off_24C335D90;
  v115 = SHIBYTE(v180.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v180.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v307, v180.__r_.__value_.__l.__data_, v180.__r_.__value_.__l.__size_);
  else
    v307 = v180;
  v308 = v98;
  v306 = off_24C335AF8;
  v309 = v97;
  v297 = (uint64_t (**)())off_24C335D90;
  v83 = v65;
  v82 = v66;
  if (SHIBYTE(v171.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v298, v171.__r_.__value_.__l.__data_, v171.__r_.__value_.__l.__size_);
  else
    v298 = v171;
  v299 = v172;
  v297 = &off_24C335A98;
  v300 = v173;
  v67 = v177;
  v68 = v175;
  v301 = &off_24C331510;
  v302 = v175;
  v303 = v175;
  if (v175)
    v69 = (void *)operator new[]();
  else
    v69 = 0;
  v304 = v69;
  v305 = 1;
  if (v67)
    memcpy(v69, v67, v68);
  else
    bzero(v69, v68);
  v293 = (uint64_t (**)())off_24C335D90;
  v70 = SHIBYTE(v167.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v167.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v294, v167.__r_.__value_.__l.__data_, v167.__r_.__value_.__l.__size_);
  else
    v294 = v167;
  v295 = v94;
  v293 = off_24C335AF8;
  v296 = v93;
  v288 = (uint64_t (**)())off_24C335D90;
  v113 = SHIBYTE(v162.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v162.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v289, v162.__r_.__value_.__l.__data_, v162.__r_.__value_.__l.__size_);
  else
    v289 = v162;
  v288 = off_24C335B18;
  v291 = v164;
  v290 = v92;
  v292 = v165;
  v283 = (uint64_t (**)())off_24C335D90;
  v71 = SHIBYTE(v157.__r_.__value_.__r.__words[2]);
  v111 = v70;
  if (SHIBYTE(v157.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v284, v157.__r_.__value_.__l.__data_, v157.__r_.__value_.__l.__size_);
  else
    v284 = v157;
  v283 = off_24C335B18;
  v286 = v159;
  v285 = v91;
  v287 = v160;
  v278 = (uint64_t (**)())off_24C335D90;
  v72 = SHIBYTE(v152.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v152.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v279, v152.__r_.__value_.__l.__data_, v152.__r_.__value_.__l.__size_);
  else
    v279 = v152;
  v278 = off_24C335B18;
  v281 = v154;
  v280 = v89;
  v282 = v155;
  v274 = (uint64_t (**)())off_24C335D90;
  v73 = SHIBYTE(v148.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v148.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v275, v148.__r_.__value_.__l.__data_, v148.__r_.__value_.__l.__size_);
  else
    v275 = v148;
  v276 = v87;
  v274 = off_24C335AF8;
  v277 = v88;
  v269 = (uint64_t (**)())off_24C335D90;
  v74 = SHIBYTE(v143.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v143.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v270, v143.__r_.__value_.__l.__data_, v143.__r_.__value_.__l.__size_);
  else
    v270 = v143;
  v269 = off_24C335B18;
  v272 = v145;
  v271 = v86;
  v273 = v146;
  v264 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v138.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v265, v138.__r_.__value_.__l.__data_, v138.__r_.__value_.__l.__size_);
  else
    v265 = v138;
  v266 = v139;
  v264 = &off_24C335AB8;
  v267 = v140;
  if (SHIBYTE(v141.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v268, v141.__r_.__value_.__l.__data_, v141.__r_.__value_.__l.__size_);
  else
    v268 = v141;
  v259 = (uint64_t (**)())off_24C335D90;
  v75 = SHIBYTE(v133.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v133.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&__p, v133.__r_.__value_.__l.__data_, v133.__r_.__value_.__l.__size_);
  else
    __p = v133;
  v259 = off_24C335B18;
  v262 = v135;
  v261 = v60;
  v263 = v136;
  mediaplatform::DatabaseColumnTuple<0ul,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>>::DatabaseColumnTuple(a1 + 80, (uint64_t)&v380, (uint64_t)&v375, (uint64_t)&v370, (uint64_t)&v365, (uint64_t)&v360, (uint64_t)&v351, (uint64_t)&v347, (uint64_t)&v343, (uint64_t)&v339, (uint64_t)&v335, (uint64_t)&v330, (uint64_t)&v326, (uint64_t)&v322, (uint64_t)&v318, (uint64_t)&v314, (uint64_t)&v310, (uint64_t)&v306, (uint64_t)&v297,
    (uint64_t)&v293,
    (uint64_t)&v288,
    (uint64_t)&v283,
    (uint64_t)&v278,
    (uint64_t)&v274,
    (uint64_t)&v269,
    (uint64_t)&v264,
    (uint64_t)&v259);
  v259 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v264);
  v269 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v270.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v270.__r_.__value_.__l.__data_);
  v274 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v275.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v275.__r_.__value_.__l.__data_);
  v278 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v279.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v279.__r_.__value_.__l.__data_);
  v283 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v284.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v284.__r_.__value_.__l.__data_);
  v288 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v289.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v289.__r_.__value_.__l.__data_);
  v293 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v294.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v294.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<mediaplatform::Data>::~DatabaseColumn((uint64_t)&v297);
  v306 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v307.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v307.__r_.__value_.__l.__data_);
  v310 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v311.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v311.__r_.__value_.__l.__data_);
  v314 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v315.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v315.__r_.__value_.__l.__data_);
  v318 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v319.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v319.__r_.__value_.__l.__data_);
  v322 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v323.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v323.__r_.__value_.__l.__data_);
  v326 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v327.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v327.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v330);
  v335 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v336.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v336.__r_.__value_.__l.__data_);
  v339 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v340.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v340.__r_.__value_.__l.__data_);
  v343 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v344.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v344.__r_.__value_.__l.__data_);
  if (SHIBYTE(v348.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v348.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<mediaplatform::Data>::~DatabaseColumn((uint64_t)&v351);
  if (SHIBYTE(v361.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v361.__r_.__value_.__l.__data_);
  if (SHIBYTE(v366.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v366.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v370);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v375);
  if (SHIBYTE(v381.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v381.__r_.__value_.__l.__data_);
  if (v75 < 0)
    operator delete(v133.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v137);
  v142 = (uint64_t (**)())off_24C335D90;
  if (v74 < 0)
    operator delete(v143.__r_.__value_.__l.__data_);
  v147 = (uint64_t (**)())off_24C335D90;
  if (v73 < 0)
    operator delete(v148.__r_.__value_.__l.__data_);
  v151 = (uint64_t (**)())off_24C335D90;
  if (v72 < 0)
    operator delete(v152.__r_.__value_.__l.__data_);
  v156 = (uint64_t (**)())off_24C335D90;
  if (v71 < 0)
    operator delete(v157.__r_.__value_.__l.__data_);
  v161 = (uint64_t (**)())off_24C335D90;
  if (v113 < 0)
    operator delete(v162.__r_.__value_.__l.__data_);
  v166 = (uint64_t (**)())off_24C335D90;
  if (v111 < 0)
    operator delete(v167.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<mediaplatform::Data>::~DatabaseColumn((uint64_t)&v170);
  v179 = (uint64_t (**)())off_24C335D90;
  if (v115 < 0)
    operator delete(v180.__r_.__value_.__l.__data_);
  v183 = (uint64_t (**)())off_24C335D90;
  if (v117 < 0)
    operator delete(v184.__r_.__value_.__l.__data_);
  v187 = (uint64_t (**)())off_24C335D90;
  if (v119 < 0)
    operator delete(v188.__r_.__value_.__l.__data_);
  v191 = (uint64_t (**)())off_24C335D90;
  if (v121 < 0)
    operator delete(v192.__r_.__value_.__l.__data_);
  v195 = (uint64_t (**)())off_24C335D90;
  if (v123 < 0)
    operator delete(v196.__r_.__value_.__l.__data_);
  v199 = (uint64_t (**)())off_24C335D90;
  if (v125 < 0)
    operator delete(v200.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v203);
  v208 = (uint64_t (**)())off_24C335D90;
  if (v127 < 0)
    operator delete(v209.__r_.__value_.__l.__data_);
  v212 = (uint64_t (**)())off_24C335D90;
  if (v129 < 0)
    operator delete(v213.__r_.__value_.__l.__data_);
  v216 = (uint64_t (**)())off_24C335D90;
  if (v82 < 0)
    operator delete(v217.__r_.__value_.__l.__data_);
  v220 = (uint64_t (**)())off_24C335D90;
  if (v83 < 0)
    operator delete(v221.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<mediaplatform::Data>::~DatabaseColumn((uint64_t)&v224);
  v233 = (uint64_t (**)())off_24C335D90;
  if (v131 < 0)
    operator delete(v234.__r_.__value_.__l.__data_);
  v238 = (uint64_t (**)())off_24C335D90;
  if (v132 < 0)
    operator delete(v239.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v243);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v248);
  v253 = (uint64_t (**)())off_24C335D90;
  if (v84 < 0)
    operator delete(__s.__r_.__value_.__l.__data_);
  if (v85 < 0)
    operator delete(v258.__r_.__value_.__l.__data_);
  *(_QWORD *)a1 = off_24C336210;
  std::__tuple_leaf<0ul,mlcore::MediaColumn<long long>,false>::__tuple_leaf[abi:ne180100]<mlcore::MediaColumn<long long>&,void>(a1 + 1456, v99);
  std::__tuple_leaf<1ul,mlcore::MediaColumn<std::string>,false>::__tuple_leaf[abi:ne180100]<mlcore::MediaColumn<std::string>&,void>(a1 + 1504, v96);
  std::__tuple_leaf<2ul,mlcore::MediaColumn<std::string>,false>::__tuple_leaf[abi:ne180100]<mlcore::MediaColumn<std::string>&,void>(a1 + 1568, v95);
  std::__tuple_leaf<0ul,mlcore::MediaColumn<long long>,false>::__tuple_leaf[abi:ne180100]<mlcore::MediaColumn<long long>&,void>(a1 + 1632, a6);
  std::__tuple_leaf<0ul,mlcore::MediaColumn<long long>,false>::__tuple_leaf[abi:ne180100]<mlcore::MediaColumn<long long>&,void>(a1 + 1680, a7);
  std::__tuple_leaf<5ul,mlcore::MediaColumn<mediaplatform::Data>,false>::__tuple_leaf[abi:ne180100]<mlcore::MediaColumn<mediaplatform::Data>&,void>(a1 + 1728, v90);
  std::__tuple_leaf<3ul,mlcore::MediaColumn<int>,false>::__tuple_leaf[abi:ne180100]<mlcore::MediaColumn<int>&,void>(a1 + 1808, a9);
  std::__tuple_leaf<3ul,mlcore::MediaColumn<int>,false>::__tuple_leaf[abi:ne180100]<mlcore::MediaColumn<int>&,void>(a1 + 1856, a10);
  std::__tuple_leaf<3ul,mlcore::MediaColumn<int>,false>::__tuple_leaf[abi:ne180100]<mlcore::MediaColumn<int>&,void>(a1 + 1904, a11);
  std::__tuple_leaf<3ul,mlcore::MediaColumn<int>,false>::__tuple_leaf[abi:ne180100]<mlcore::MediaColumn<int>&,void>(a1 + 1952, a12);
  std::__tuple_leaf<10ul,mlcore::MediaColumn<std::string>,false>::__tuple_leaf[abi:ne180100]<mlcore::MediaColumn<std::string>&,void>(a1 + 2000, a13);
  std::__tuple_leaf<3ul,mlcore::MediaColumn<int>,false>::__tuple_leaf[abi:ne180100]<mlcore::MediaColumn<int>&,void>(a1 + 2064, a14);
  std::__tuple_leaf<3ul,mlcore::MediaColumn<int>,false>::__tuple_leaf[abi:ne180100]<mlcore::MediaColumn<int>&,void>(a1 + 2112, a15);
  std::__tuple_leaf<3ul,mlcore::MediaColumn<int>,false>::__tuple_leaf[abi:ne180100]<mlcore::MediaColumn<int>&,void>(a1 + 2160, a16);
  std::__tuple_leaf<3ul,mlcore::MediaColumn<int>,false>::__tuple_leaf[abi:ne180100]<mlcore::MediaColumn<int>&,void>(a1 + 2208, a17);
  std::__tuple_leaf<3ul,mlcore::MediaColumn<int>,false>::__tuple_leaf[abi:ne180100]<mlcore::MediaColumn<int>&,void>(a1 + 2256, a18);
  std::__tuple_leaf<3ul,mlcore::MediaColumn<int>,false>::__tuple_leaf[abi:ne180100]<mlcore::MediaColumn<int>&,void>(a1 + 2304, a19);
  *(_QWORD *)(a1 + 2352) = off_24C335D90;
  if (*(char *)(a20 + 31) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 2360), *(const std::string::value_type **)(a20 + 8), *(_QWORD *)(a20 + 16));
  }
  else
  {
    v76 = *(_OWORD *)(a20 + 8);
    *(_QWORD *)(a1 + 2376) = *(_QWORD *)(a20 + 24);
    *(_OWORD *)(a1 + 2360) = v76;
  }
  *(_DWORD *)(a1 + 2384) = *(_DWORD *)(a20 + 32);
  *(_QWORD *)(a1 + 2352) = &off_24C335A98;
  *(_BYTE *)(a1 + 2388) = *(_BYTE *)(a20 + 36);
  mediaplatform::Data::Data((mediaplatform::Data *)(a1 + 2392), (const mediaplatform::Data *)(a20 + 40));
  *(_QWORD *)(a1 + 2352) = &off_24C336A40;
  std::__tuple_leaf<3ul,mlcore::MediaColumn<int>,false>::__tuple_leaf[abi:ne180100]<mlcore::MediaColumn<int>&,void>(a1 + 2432, a21);
  std::__tuple_leaf<0ul,mlcore::MediaColumn<long long>,false>::__tuple_leaf[abi:ne180100]<mlcore::MediaColumn<long long>&,void>(a1 + 2480, a22);
  std::__tuple_leaf<0ul,mlcore::MediaColumn<long long>,false>::__tuple_leaf[abi:ne180100]<mlcore::MediaColumn<long long>&,void>(a1 + 2528, a23);
  std::__tuple_leaf<0ul,mlcore::MediaColumn<long long>,false>::__tuple_leaf[abi:ne180100]<mlcore::MediaColumn<long long>&,void>(a1 + 2576, a24);
  std::__tuple_leaf<3ul,mlcore::MediaColumn<int>,false>::__tuple_leaf[abi:ne180100]<mlcore::MediaColumn<int>&,void>(a1 + 2624, a25);
  std::__tuple_leaf<0ul,mlcore::MediaColumn<long long>,false>::__tuple_leaf[abi:ne180100]<mlcore::MediaColumn<long long>&,void>(a1 + 2672, a26);
  *(_QWORD *)(a1 + 2720) = off_24C335D90;
  if (*(char *)(a27 + 31) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 2728), *(const std::string::value_type **)(a27 + 8), *(_QWORD *)(a27 + 16));
  }
  else
  {
    v77 = *(_OWORD *)(a27 + 8);
    *(_QWORD *)(a1 + 2744) = *(_QWORD *)(a27 + 24);
    *(_OWORD *)(a1 + 2728) = v77;
  }
  *(_DWORD *)(a1 + 2752) = *(_DWORD *)(a27 + 32);
  *(_QWORD *)(a1 + 2720) = &off_24C335AB8;
  *(_BYTE *)(a1 + 2756) = *(_BYTE *)(a27 + 36);
  v78 = (std::string *)(a1 + 2760);
  if (*(char *)(a27 + 63) < 0)
  {
    std::string::__init_copy_ctor_external(v78, *(const std::string::value_type **)(a27 + 40), *(_QWORD *)(a27 + 48));
  }
  else
  {
    v79 = *v81;
    *(_QWORD *)(a1 + 2776) = *((_QWORD *)v81 + 2);
    *(_OWORD *)&v78->__r_.__value_.__l.__data_ = v79;
  }
  *(_QWORD *)(a1 + 2720) = &off_24C336A60;
  std::__tuple_leaf<0ul,mlcore::MediaColumn<long long>,false>::__tuple_leaf[abi:ne180100]<mlcore::MediaColumn<long long>&,void>(a1 + 2784, a28);
  return a1;
}

void sub_20A84D618(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  uint64_t v6;

  *(_QWORD *)(v1 + 2720) = v4;
  if (*(char *)(v1 + 2751) < 0)
    operator delete(*v5);
  *(_QWORD *)(v1 + 2672) = v4;
  if (*(char *)(v1 + 2703) < 0)
    operator delete(*(void **)(v1 + 2680));
  *(_QWORD *)(v1 + 2624) = v4;
  if (*(char *)(v1 + 2655) < 0)
    operator delete(*(void **)(v1 + 2632));
  *(_QWORD *)(v1 + 2576) = v4;
  if (*(char *)(v1 + 2607) < 0)
    operator delete(*(void **)(v1 + 2584));
  *(_QWORD *)(v1 + 2528) = v4;
  if (*(char *)(v1 + 2559) < 0)
    operator delete(*(void **)(v1 + 2536));
  *(_QWORD *)(v1 + 2480) = v4;
  if (*(char *)(v1 + 2511) < 0)
    operator delete(*(void **)(v1 + 2488));
  *(_QWORD *)(v1 + 2432) = v4;
  if (*(char *)(v1 + 2463) < 0)
    operator delete(*(void **)(v1 + 2440));
  mediaplatform::DatabaseColumn<mediaplatform::Data>::~DatabaseColumn(v1 + 2352);
  *(_QWORD *)(v1 + 2304) = v4;
  if (*(char *)(v1 + 2335) < 0)
    operator delete(*(void **)(v1 + 2312));
  *(_QWORD *)(v1 + 2256) = v4;
  if (*(char *)(v1 + 2287) < 0)
    operator delete(*(void **)(v1 + 2264));
  *(_QWORD *)(v1 + 2208) = v4;
  if (*(char *)(v1 + 2239) < 0)
    operator delete(*(void **)(v1 + 2216));
  *(_QWORD *)(v1 + 2160) = v4;
  if (*(char *)(v1 + 2191) < 0)
    operator delete(*(void **)(v1 + 2168));
  *(_QWORD *)(v1 + 2112) = v4;
  if (*(char *)(v1 + 2143) < 0)
    operator delete(*(void **)(v1 + 2120));
  *(_QWORD *)(v1 + 2064) = v4;
  if (*(char *)(v1 + 2095) < 0)
    operator delete(*(void **)(v1 + 2072));
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(v3);
  *(_QWORD *)(v1 + 1952) = v4;
  if (*(char *)(v1 + 1983) < 0)
    operator delete(*(void **)(v1 + 1960));
  *(_QWORD *)(v1 + 1904) = v4;
  if (*(char *)(v1 + 1935) < 0)
    operator delete(*(void **)(v1 + 1912));
  *(_QWORD *)(v1 + 1856) = v4;
  if (*(char *)(v1 + 1887) < 0)
    operator delete(*(void **)(v1 + 1864));
  *(_QWORD *)(v1 + 1808) = v4;
  if (*(char *)(v1 + 1839) < 0)
    operator delete(*(void **)(v1 + 1816));
  mediaplatform::DatabaseColumn<mediaplatform::Data>::~DatabaseColumn(v2);
  *(_QWORD *)(v1 + 1680) = v4;
  if (*(char *)(v1 + 1711) < 0)
    operator delete(*(void **)(v1 + 1688));
  *(_QWORD *)(v1 + 1632) = v4;
  if (*(char *)(v1 + 1663) < 0)
    operator delete(*(void **)(v1 + 1640));
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(STACK[0x348]);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(v6);
  *(_QWORD *)(v1 + 1456) = v4;
  if (*(char *)(v1 + 1487) < 0)
    operator delete(*(void **)(v1 + 1464));
  mediaplatform::DatabaseTable<long long,std::string,std::string,long long,long long,mediaplatform::Data,int,int,int,int,std::string,int,int,int,int,int,int,mediaplatform::Data,int,long long,long long,long long,int,long long,std::string,long long>::~DatabaseTable(v1);
  _Unwind_Resume(a1);
}

void mlcore::AlbumTable::~AlbumTable(void **this)
{
  *this = off_24C336210;
  std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul,3ul,4ul,5ul,6ul,7ul,8ul,9ul,10ul,11ul,12ul,13ul,14ul,15ul,16ul,17ul,18ul,19ul,20ul,21ul,22ul,23ul,24ul,25ul>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<mediaplatform::Data>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<mediaplatform::Data>,mlcore::MediaColumn<int>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<int>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<long long>>::~__tuple_impl((uint64_t)(this + 182));
  *this = off_24C3356A8;
  mediaplatform::DatabaseColumnTuple<0ul,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>>::~DatabaseColumnTuple((uint64_t)(this + 10));
  if (*((char *)this + 79) < 0)
    operator delete(this[7]);
  mediaplatform::DatabaseTableBase::~DatabaseTableBase(this);
}

{
  *this = off_24C336210;
  std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul,3ul,4ul,5ul,6ul,7ul,8ul,9ul,10ul,11ul,12ul,13ul,14ul,15ul,16ul,17ul,18ul,19ul,20ul,21ul,22ul,23ul,24ul,25ul>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<mediaplatform::Data>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<mediaplatform::Data>,mlcore::MediaColumn<int>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<int>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<long long>>::~__tuple_impl((uint64_t)(this + 182));
  *this = off_24C3356A8;
  mediaplatform::DatabaseColumnTuple<0ul,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>>::~DatabaseColumnTuple((uint64_t)(this + 10));
  if (*((char *)this + 79) < 0)
    operator delete(this[7]);
  mediaplatform::DatabaseTableBase::~DatabaseTableBase(this);
  JUMPOUT(0x20BD27AFCLL);
}

uint64_t mediaplatform::DatabaseTable<long long,std::string,std::string,long long,long long,mediaplatform::Data,int,int,int,int,std::string,int,int,int,int,int,int,mediaplatform::Data,int,long long,long long,long long,int,long long,std::string,long long>::columnCount()
{
  return 26;
}

uint64_t std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul,3ul,4ul,5ul,6ul,7ul,8ul,9ul,10ul,11ul,12ul,13ul,14ul,15ul,16ul,17ul,18ul,19ul,20ul,21ul,22ul,23ul,24ul,25ul>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<mediaplatform::Data>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<mediaplatform::Data>,mlcore::MediaColumn<int>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<int>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<long long>>::~__tuple_impl(uint64_t a1)
{
  *(_QWORD *)(a1 + 1328) = off_24C335D90;
  if (*(char *)(a1 + 1359) < 0)
    operator delete(*(void **)(a1 + 1336));
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 1264);
  *(_QWORD *)(a1 + 1216) = off_24C335D90;
  if (*(char *)(a1 + 1247) < 0)
    operator delete(*(void **)(a1 + 1224));
  *(_QWORD *)(a1 + 1168) = off_24C335D90;
  if (*(char *)(a1 + 1199) < 0)
    operator delete(*(void **)(a1 + 1176));
  *(_QWORD *)(a1 + 1120) = off_24C335D90;
  if (*(char *)(a1 + 1151) < 0)
    operator delete(*(void **)(a1 + 1128));
  *(_QWORD *)(a1 + 1072) = off_24C335D90;
  if (*(char *)(a1 + 1103) < 0)
    operator delete(*(void **)(a1 + 1080));
  *(_QWORD *)(a1 + 1024) = off_24C335D90;
  if (*(char *)(a1 + 1055) < 0)
    operator delete(*(void **)(a1 + 1032));
  *(_QWORD *)(a1 + 976) = off_24C335D90;
  if (*(char *)(a1 + 1007) < 0)
    operator delete(*(void **)(a1 + 984));
  mediaplatform::DatabaseColumn<mediaplatform::Data>::~DatabaseColumn(a1 + 896);
  *(_QWORD *)(a1 + 848) = off_24C335D90;
  if (*(char *)(a1 + 879) < 0)
    operator delete(*(void **)(a1 + 856));
  *(_QWORD *)(a1 + 800) = off_24C335D90;
  if (*(char *)(a1 + 831) < 0)
    operator delete(*(void **)(a1 + 808));
  *(_QWORD *)(a1 + 752) = off_24C335D90;
  if (*(char *)(a1 + 783) < 0)
    operator delete(*(void **)(a1 + 760));
  *(_QWORD *)(a1 + 704) = off_24C335D90;
  if (*(char *)(a1 + 735) < 0)
    operator delete(*(void **)(a1 + 712));
  *(_QWORD *)(a1 + 656) = off_24C335D90;
  if (*(char *)(a1 + 687) < 0)
    operator delete(*(void **)(a1 + 664));
  *(_QWORD *)(a1 + 608) = off_24C335D90;
  if (*(char *)(a1 + 639) < 0)
    operator delete(*(void **)(a1 + 616));
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 544);
  *(_QWORD *)(a1 + 496) = off_24C335D90;
  if (*(char *)(a1 + 527) < 0)
    operator delete(*(void **)(a1 + 504));
  *(_QWORD *)(a1 + 448) = off_24C335D90;
  if (*(char *)(a1 + 479) < 0)
    operator delete(*(void **)(a1 + 456));
  *(_QWORD *)(a1 + 400) = off_24C335D90;
  if (*(char *)(a1 + 431) < 0)
    operator delete(*(void **)(a1 + 408));
  *(_QWORD *)(a1 + 352) = off_24C335D90;
  if (*(char *)(a1 + 383) < 0)
    operator delete(*(void **)(a1 + 360));
  mediaplatform::DatabaseColumn<mediaplatform::Data>::~DatabaseColumn(a1 + 272);
  *(_QWORD *)(a1 + 224) = off_24C335D90;
  if (*(char *)(a1 + 255) < 0)
    operator delete(*(void **)(a1 + 232));
  *(_QWORD *)(a1 + 176) = off_24C335D90;
  if (*(char *)(a1 + 207) < 0)
    operator delete(*(void **)(a1 + 184));
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 112);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 48);
  *(_QWORD *)a1 = off_24C335D90;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

uint64_t mediaplatform::DatabaseColumnTuple<0ul,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>>::~DatabaseColumnTuple(uint64_t a1)
{
  *(_QWORD *)(a1 + 1328) = off_24C335D90;
  if (*(char *)(a1 + 1359) < 0)
    operator delete(*(void **)(a1 + 1336));
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 1264);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 1200);
  *(_QWORD *)(a1 + 1152) = off_24C335D90;
  if (*(char *)(a1 + 1183) < 0)
    operator delete(*(void **)(a1 + 1160));
  *(_QWORD *)(a1 + 1104) = off_24C335D90;
  if (*(char *)(a1 + 1135) < 0)
    operator delete(*(void **)(a1 + 1112));
  mediaplatform::DatabaseColumn<mediaplatform::Data>::~DatabaseColumn(a1 + 1024);
  *(_QWORD *)(a1 + 976) = off_24C335D90;
  if (*(char *)(a1 + 1007) < 0)
    operator delete(*(void **)(a1 + 984));
  return mediaplatform::DatabaseColumnTuple<7ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>>::~DatabaseColumnTuple(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<7ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>>::~DatabaseColumnTuple(uint64_t a1)
{
  *(_QWORD *)(a1 + 928) = off_24C335D90;
  if (*(char *)(a1 + 959) < 0)
    operator delete(*(void **)(a1 + 936));
  *(_QWORD *)(a1 + 880) = off_24C335D90;
  if (*(char *)(a1 + 911) < 0)
    operator delete(*(void **)(a1 + 888));
  *(_QWORD *)(a1 + 832) = off_24C335D90;
  if (*(char *)(a1 + 863) < 0)
    operator delete(*(void **)(a1 + 840));
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 768);
  *(_QWORD *)(a1 + 720) = off_24C335D90;
  if (*(char *)(a1 + 751) < 0)
    operator delete(*(void **)(a1 + 728));
  *(_QWORD *)(a1 + 672) = off_24C335D90;
  if (*(char *)(a1 + 703) < 0)
    operator delete(*(void **)(a1 + 680));
  return mediaplatform::DatabaseColumnTuple<13ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>>::~DatabaseColumnTuple(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<13ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>>::~DatabaseColumnTuple(uint64_t a1)
{
  *(_QWORD *)(a1 + 624) = off_24C335D90;
  if (*(char *)(a1 + 655) < 0)
    operator delete(*(void **)(a1 + 632));
  *(_QWORD *)(a1 + 576) = off_24C335D90;
  if (*(char *)(a1 + 607) < 0)
    operator delete(*(void **)(a1 + 584));
  *(_QWORD *)(a1 + 528) = off_24C335D90;
  if (*(char *)(a1 + 559) < 0)
    operator delete(*(void **)(a1 + 536));
  *(_QWORD *)(a1 + 480) = off_24C335D90;
  if (*(char *)(a1 + 511) < 0)
    operator delete(*(void **)(a1 + 488));
  mediaplatform::DatabaseColumn<mediaplatform::Data>::~DatabaseColumn(a1 + 400);
  *(_QWORD *)(a1 + 352) = off_24C335D90;
  if (*(char *)(a1 + 383) < 0)
    operator delete(*(void **)(a1 + 360));
  return mediaplatform::DatabaseColumnTuple<19ul,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>>::~DatabaseColumnTuple(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<19ul,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>>::~DatabaseColumnTuple(uint64_t a1)
{
  *(_QWORD *)(a1 + 304) = off_24C335D90;
  if (*(char *)(a1 + 335) < 0)
    operator delete(*(void **)(a1 + 312));
  *(_QWORD *)(a1 + 256) = off_24C335D90;
  if (*(char *)(a1 + 287) < 0)
    operator delete(*(void **)(a1 + 264));
  *(_QWORD *)(a1 + 208) = off_24C335D90;
  if (*(char *)(a1 + 239) < 0)
    operator delete(*(void **)(a1 + 216));
  *(_QWORD *)(a1 + 160) = off_24C335D90;
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  *(_QWORD *)(a1 + 112) = off_24C335D90;
  if (*(char *)(a1 + 143) < 0)
    operator delete(*(void **)(a1 + 120));
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 48);
  *(_QWORD *)a1 = off_24C335D90;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void mediaplatform::DatabaseTable<long long,std::string,std::string,long long,long long,mediaplatform::Data,int,int,int,int,std::string,int,int,int,int,int,int,mediaplatform::Data,int,long long,long long,long long,int,long long,std::string,long long>::~DatabaseTable(uint64_t a1)
{
  *(_QWORD *)a1 = off_24C3356A8;
  mediaplatform::DatabaseColumnTuple<0ul,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>>::~DatabaseColumnTuple(a1 + 80);
  if (*(char *)(a1 + 79) < 0)
    operator delete(*(void **)(a1 + 56));
  mediaplatform::DatabaseTableBase::~DatabaseTableBase((void **)a1);
}

{
  *(_QWORD *)a1 = off_24C3356A8;
  mediaplatform::DatabaseColumnTuple<0ul,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>>::~DatabaseColumnTuple(a1 + 80);
  if (*(char *)(a1 + 79) < 0)
    operator delete(*(void **)(a1 + 56));
  mediaplatform::DatabaseTableBase::~DatabaseTableBase((void **)a1);
  JUMPOUT(0x20BD27AFCLL);
}

{
  *(_QWORD *)a1 = off_24C3356A8;
  mediaplatform::DatabaseColumnTuple<0ul,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>>::~DatabaseColumnTuple(a1 + 80);
  if (*(char *)(a1 + 79) < 0)
    operator delete(*(void **)(a1 + 56));
  mediaplatform::DatabaseTableBase::~DatabaseTableBase((void **)a1);
}

void mlcore::MediaTable<long long,std::string,std::string,long long,long long,mediaplatform::Data,int,int,int,int,std::string,int,int,int,int,int,int,mediaplatform::Data,int,long long,long long,long long,int,long long,std::string,long long>::~MediaTable(uint64_t a1)
{
  *(_QWORD *)a1 = off_24C336210;
  std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul,3ul,4ul,5ul,6ul,7ul,8ul,9ul,10ul,11ul,12ul,13ul,14ul,15ul,16ul,17ul,18ul,19ul,20ul,21ul,22ul,23ul,24ul,25ul>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<mediaplatform::Data>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<mediaplatform::Data>,mlcore::MediaColumn<int>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<int>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<long long>>::~__tuple_impl(a1 + 1456);
  *(_QWORD *)a1 = off_24C3356A8;
  mediaplatform::DatabaseColumnTuple<0ul,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>>::~DatabaseColumnTuple(a1 + 80);
  if (*(char *)(a1 + 79) < 0)
    operator delete(*(void **)(a1 + 56));
  mediaplatform::DatabaseTableBase::~DatabaseTableBase((void **)a1);
}

{
  *(_QWORD *)a1 = off_24C336210;
  std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul,3ul,4ul,5ul,6ul,7ul,8ul,9ul,10ul,11ul,12ul,13ul,14ul,15ul,16ul,17ul,18ul,19ul,20ul,21ul,22ul,23ul,24ul,25ul>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<mediaplatform::Data>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<mediaplatform::Data>,mlcore::MediaColumn<int>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<int>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<long long>>::~__tuple_impl(a1 + 1456);
  *(_QWORD *)a1 = off_24C3356A8;
  mediaplatform::DatabaseColumnTuple<0ul,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>>::~DatabaseColumnTuple(a1 + 80);
  if (*(char *)(a1 + 79) < 0)
    operator delete(*(void **)(a1 + 56));
  mediaplatform::DatabaseTableBase::~DatabaseTableBase((void **)a1);
  JUMPOUT(0x20BD27AFCLL);
}

uint64_t std::__tuple_leaf<10ul,mlcore::MediaColumn<std::string>,false>::__tuple_leaf[abi:ne180100]<mlcore::MediaColumn<std::string>&,void>(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  std::string *v5;
  __int128 v6;

  *(_QWORD *)a1 = off_24C335D90;
  if (*(char *)(a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 8), *(const std::string::value_type **)(a2 + 8), *(_QWORD *)(a2 + 16));
  }
  else
  {
    v4 = *(_OWORD *)(a2 + 8);
    *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 8) = v4;
  }
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_QWORD *)a1 = &off_24C335AB8;
  *(_BYTE *)(a1 + 36) = *(_BYTE *)(a2 + 36);
  v5 = (std::string *)(a1 + 40);
  if (*(char *)(a2 + 63) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *(const std::string::value_type **)(a2 + 40), *(_QWORD *)(a2 + 48));
  }
  else
  {
    v6 = *(_OWORD *)(a2 + 40);
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
  *(_QWORD *)a1 = &off_24C336A60;
  return a1;
}

void sub_20A84E698(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  uint64_t v3;

  *(_QWORD *)v1 = v3;
  if (*(char *)(v1 + 31) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

uint64_t mediaplatform::DatabaseColumnTuple<1ul,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>>::~DatabaseColumnTuple(uint64_t a1)
{
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 1264);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 1200);
  *(_QWORD *)(a1 + 1152) = off_24C335D90;
  if (*(char *)(a1 + 1183) < 0)
    operator delete(*(void **)(a1 + 1160));
  *(_QWORD *)(a1 + 1104) = off_24C335D90;
  if (*(char *)(a1 + 1135) < 0)
    operator delete(*(void **)(a1 + 1112));
  mediaplatform::DatabaseColumn<mediaplatform::Data>::~DatabaseColumn(a1 + 1024);
  *(_QWORD *)(a1 + 976) = off_24C335D90;
  if (*(char *)(a1 + 1007) < 0)
    operator delete(*(void **)(a1 + 984));
  return mediaplatform::DatabaseColumnTuple<7ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>>::~DatabaseColumnTuple(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<2ul,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>>::~DatabaseColumnTuple(uint64_t a1)
{
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 1200);
  *(_QWORD *)(a1 + 1152) = off_24C335D90;
  if (*(char *)(a1 + 1183) < 0)
    operator delete(*(void **)(a1 + 1160));
  *(_QWORD *)(a1 + 1104) = off_24C335D90;
  if (*(char *)(a1 + 1135) < 0)
    operator delete(*(void **)(a1 + 1112));
  mediaplatform::DatabaseColumn<mediaplatform::Data>::~DatabaseColumn(a1 + 1024);
  *(_QWORD *)(a1 + 976) = off_24C335D90;
  if (*(char *)(a1 + 1007) < 0)
    operator delete(*(void **)(a1 + 984));
  return mediaplatform::DatabaseColumnTuple<7ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>>::~DatabaseColumnTuple(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<3ul,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>>::~DatabaseColumnTuple(uint64_t a1)
{
  *(_QWORD *)(a1 + 1152) = off_24C335D90;
  if (*(char *)(a1 + 1183) < 0)
    operator delete(*(void **)(a1 + 1160));
  *(_QWORD *)(a1 + 1104) = off_24C335D90;
  if (*(char *)(a1 + 1135) < 0)
    operator delete(*(void **)(a1 + 1112));
  mediaplatform::DatabaseColumn<mediaplatform::Data>::~DatabaseColumn(a1 + 1024);
  *(_QWORD *)(a1 + 976) = off_24C335D90;
  if (*(char *)(a1 + 1007) < 0)
    operator delete(*(void **)(a1 + 984));
  return mediaplatform::DatabaseColumnTuple<7ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>>::~DatabaseColumnTuple(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<4ul,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>>::~DatabaseColumnTuple(uint64_t a1)
{
  *(_QWORD *)(a1 + 1104) = off_24C335D90;
  if (*(char *)(a1 + 1135) < 0)
    operator delete(*(void **)(a1 + 1112));
  mediaplatform::DatabaseColumn<mediaplatform::Data>::~DatabaseColumn(a1 + 1024);
  *(_QWORD *)(a1 + 976) = off_24C335D90;
  if (*(char *)(a1 + 1007) < 0)
    operator delete(*(void **)(a1 + 984));
  return mediaplatform::DatabaseColumnTuple<7ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>>::~DatabaseColumnTuple(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<5ul,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>>::~DatabaseColumnTuple(uint64_t a1)
{
  mediaplatform::DatabaseColumn<mediaplatform::Data>::~DatabaseColumn(a1 + 1024);
  *(_QWORD *)(a1 + 976) = off_24C335D90;
  if (*(char *)(a1 + 1007) < 0)
    operator delete(*(void **)(a1 + 984));
  return mediaplatform::DatabaseColumnTuple<7ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>>::~DatabaseColumnTuple(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<6ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>>::~DatabaseColumnTuple(uint64_t a1)
{
  *(_QWORD *)(a1 + 976) = off_24C335D90;
  if (*(char *)(a1 + 1007) < 0)
    operator delete(*(void **)(a1 + 984));
  return mediaplatform::DatabaseColumnTuple<7ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>>::~DatabaseColumnTuple(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<8ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>>::~DatabaseColumnTuple(uint64_t a1)
{
  *(_QWORD *)(a1 + 880) = off_24C335D90;
  if (*(char *)(a1 + 911) < 0)
    operator delete(*(void **)(a1 + 888));
  *(_QWORD *)(a1 + 832) = off_24C335D90;
  if (*(char *)(a1 + 863) < 0)
    operator delete(*(void **)(a1 + 840));
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 768);
  *(_QWORD *)(a1 + 720) = off_24C335D90;
  if (*(char *)(a1 + 751) < 0)
    operator delete(*(void **)(a1 + 728));
  *(_QWORD *)(a1 + 672) = off_24C335D90;
  if (*(char *)(a1 + 703) < 0)
    operator delete(*(void **)(a1 + 680));
  return mediaplatform::DatabaseColumnTuple<13ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>>::~DatabaseColumnTuple(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<9ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>>::~DatabaseColumnTuple(uint64_t a1)
{
  *(_QWORD *)(a1 + 832) = off_24C335D90;
  if (*(char *)(a1 + 863) < 0)
    operator delete(*(void **)(a1 + 840));
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 768);
  *(_QWORD *)(a1 + 720) = off_24C335D90;
  if (*(char *)(a1 + 751) < 0)
    operator delete(*(void **)(a1 + 728));
  *(_QWORD *)(a1 + 672) = off_24C335D90;
  if (*(char *)(a1 + 703) < 0)
    operator delete(*(void **)(a1 + 680));
  return mediaplatform::DatabaseColumnTuple<13ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>>::~DatabaseColumnTuple(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<10ul,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>>::~DatabaseColumnTuple(uint64_t a1)
{
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 768);
  *(_QWORD *)(a1 + 720) = off_24C335D90;
  if (*(char *)(a1 + 751) < 0)
    operator delete(*(void **)(a1 + 728));
  *(_QWORD *)(a1 + 672) = off_24C335D90;
  if (*(char *)(a1 + 703) < 0)
    operator delete(*(void **)(a1 + 680));
  return mediaplatform::DatabaseColumnTuple<13ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>>::~DatabaseColumnTuple(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<11ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>>::~DatabaseColumnTuple(uint64_t a1)
{
  *(_QWORD *)(a1 + 720) = off_24C335D90;
  if (*(char *)(a1 + 751) < 0)
    operator delete(*(void **)(a1 + 728));
  *(_QWORD *)(a1 + 672) = off_24C335D90;
  if (*(char *)(a1 + 703) < 0)
    operator delete(*(void **)(a1 + 680));
  return mediaplatform::DatabaseColumnTuple<13ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>>::~DatabaseColumnTuple(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<12ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>>::~DatabaseColumnTuple(uint64_t a1)
{
  *(_QWORD *)(a1 + 672) = off_24C335D90;
  if (*(char *)(a1 + 703) < 0)
    operator delete(*(void **)(a1 + 680));
  return mediaplatform::DatabaseColumnTuple<13ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>>::~DatabaseColumnTuple(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<14ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>>::~DatabaseColumnTuple(uint64_t a1)
{
  *(_QWORD *)(a1 + 576) = off_24C335D90;
  if (*(char *)(a1 + 607) < 0)
    operator delete(*(void **)(a1 + 584));
  *(_QWORD *)(a1 + 528) = off_24C335D90;
  if (*(char *)(a1 + 559) < 0)
    operator delete(*(void **)(a1 + 536));
  *(_QWORD *)(a1 + 480) = off_24C335D90;
  if (*(char *)(a1 + 511) < 0)
    operator delete(*(void **)(a1 + 488));
  mediaplatform::DatabaseColumn<mediaplatform::Data>::~DatabaseColumn(a1 + 400);
  *(_QWORD *)(a1 + 352) = off_24C335D90;
  if (*(char *)(a1 + 383) < 0)
    operator delete(*(void **)(a1 + 360));
  return mediaplatform::DatabaseColumnTuple<19ul,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>>::~DatabaseColumnTuple(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<15ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>>::~DatabaseColumnTuple(uint64_t a1)
{
  *(_QWORD *)(a1 + 528) = off_24C335D90;
  if (*(char *)(a1 + 559) < 0)
    operator delete(*(void **)(a1 + 536));
  *(_QWORD *)(a1 + 480) = off_24C335D90;
  if (*(char *)(a1 + 511) < 0)
    operator delete(*(void **)(a1 + 488));
  mediaplatform::DatabaseColumn<mediaplatform::Data>::~DatabaseColumn(a1 + 400);
  *(_QWORD *)(a1 + 352) = off_24C335D90;
  if (*(char *)(a1 + 383) < 0)
    operator delete(*(void **)(a1 + 360));
  return mediaplatform::DatabaseColumnTuple<19ul,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>>::~DatabaseColumnTuple(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<16ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>>::~DatabaseColumnTuple(uint64_t a1)
{
  *(_QWORD *)(a1 + 480) = off_24C335D90;
  if (*(char *)(a1 + 511) < 0)
    operator delete(*(void **)(a1 + 488));
  mediaplatform::DatabaseColumn<mediaplatform::Data>::~DatabaseColumn(a1 + 400);
  *(_QWORD *)(a1 + 352) = off_24C335D90;
  if (*(char *)(a1 + 383) < 0)
    operator delete(*(void **)(a1 + 360));
  return mediaplatform::DatabaseColumnTuple<19ul,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>>::~DatabaseColumnTuple(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<17ul,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>>::~DatabaseColumnTuple(uint64_t a1)
{
  mediaplatform::DatabaseColumn<mediaplatform::Data>::~DatabaseColumn(a1 + 400);
  *(_QWORD *)(a1 + 352) = off_24C335D90;
  if (*(char *)(a1 + 383) < 0)
    operator delete(*(void **)(a1 + 360));
  return mediaplatform::DatabaseColumnTuple<19ul,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>>::~DatabaseColumnTuple(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<18ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>>::~DatabaseColumnTuple(uint64_t a1)
{
  *(_QWORD *)(a1 + 352) = off_24C335D90;
  if (*(char *)(a1 + 383) < 0)
    operator delete(*(void **)(a1 + 360));
  return mediaplatform::DatabaseColumnTuple<19ul,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>>::~DatabaseColumnTuple(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<20ul,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>>::~DatabaseColumnTuple(uint64_t a1)
{
  *(_QWORD *)(a1 + 256) = off_24C335D90;
  if (*(char *)(a1 + 287) < 0)
    operator delete(*(void **)(a1 + 264));
  *(_QWORD *)(a1 + 208) = off_24C335D90;
  if (*(char *)(a1 + 239) < 0)
    operator delete(*(void **)(a1 + 216));
  *(_QWORD *)(a1 + 160) = off_24C335D90;
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  *(_QWORD *)(a1 + 112) = off_24C335D90;
  if (*(char *)(a1 + 143) < 0)
    operator delete(*(void **)(a1 + 120));
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 48);
  *(_QWORD *)a1 = off_24C335D90;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

uint64_t mediaplatform::DatabaseColumnTuple<21ul,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>>::~DatabaseColumnTuple(uint64_t a1)
{
  *(_QWORD *)(a1 + 208) = off_24C335D90;
  if (*(char *)(a1 + 239) < 0)
    operator delete(*(void **)(a1 + 216));
  *(_QWORD *)(a1 + 160) = off_24C335D90;
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  *(_QWORD *)(a1 + 112) = off_24C335D90;
  if (*(char *)(a1 + 143) < 0)
    operator delete(*(void **)(a1 + 120));
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 48);
  *(_QWORD *)a1 = off_24C335D90;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

uint64_t mediaplatform::DatabaseColumnTuple<22ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>>::~DatabaseColumnTuple(uint64_t a1)
{
  *(_QWORD *)(a1 + 160) = off_24C335D90;
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  *(_QWORD *)(a1 + 112) = off_24C335D90;
  if (*(char *)(a1 + 143) < 0)
    operator delete(*(void **)(a1 + 120));
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 48);
  *(_QWORD *)a1 = off_24C335D90;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

uint64_t mediaplatform::DatabaseColumnTuple<23ul,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>>::~DatabaseColumnTuple(uint64_t a1)
{
  *(_QWORD *)(a1 + 112) = off_24C335D90;
  if (*(char *)(a1 + 143) < 0)
    operator delete(*(void **)(a1 + 120));
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 48);
  *(_QWORD *)a1 = off_24C335D90;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void mlcore::AlbumTable::persistentIDColumn(mlcore::AlbumTable *this@<X0>, uint64_t a2@<X8>)
{
  std::string *v4;

  *(_QWORD *)a2 = off_24C335D90;
  v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 1487) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 183), *((_QWORD *)this + 184));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 1464);
    *(_QWORD *)(a2 + 24) = *((_QWORD *)this + 185);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 372);
  *(_DWORD *)(a2 + 44) = *((_DWORD *)this + 375);
  *(_QWORD *)(a2 + 36) = *(_QWORD *)((char *)this + 1492);
  *(_QWORD *)a2 = off_24C336AC0;
}

void mlcore::AlbumTable::titleColumn(mlcore::AlbumTable *this@<X0>, uint64_t a2@<X8>)
{
  std::string *v4;
  std::string *v5;

  *(_QWORD *)a2 = off_24C335D90;
  v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 1535) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 189), *((_QWORD *)this + 190));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 1512);
    *(_QWORD *)(a2 + 24) = *((_QWORD *)this + 191);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 384);
  *(_QWORD *)a2 = &off_24C335AB8;
  *(_BYTE *)(a2 + 36) = *((_BYTE *)this + 1540);
  v5 = (std::string *)(a2 + 40);
  if (*((char *)this + 1567) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)this + 193), *((_QWORD *)this + 194));
  }
  else
  {
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 1544);
    *(_QWORD *)(a2 + 56) = *((_QWORD *)this + 195);
  }
  *(_QWORD *)a2 = &off_24C336A60;
}

void sub_20A84EFA0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  uint64_t v3;

  *(_QWORD *)v1 = v3;
  if (*(char *)(v1 + 31) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

void mlcore::AlbumTable::sortTitleColumn(mlcore::AlbumTable *this@<X0>, uint64_t a2@<X8>)
{
  std::string *v4;
  std::string *v5;

  *(_QWORD *)a2 = off_24C335D90;
  v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 1599) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 197), *((_QWORD *)this + 198));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 1576);
    *(_QWORD *)(a2 + 24) = *((_QWORD *)this + 199);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 400);
  *(_QWORD *)a2 = &off_24C335AB8;
  *(_BYTE *)(a2 + 36) = *((_BYTE *)this + 1604);
  v5 = (std::string *)(a2 + 40);
  if (*((char *)this + 1631) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)this + 201), *((_QWORD *)this + 202));
  }
  else
  {
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 1608);
    *(_QWORD *)(a2 + 56) = *((_QWORD *)this + 203);
  }
  *(_QWORD *)a2 = &off_24C336A60;
}

void sub_20A84F080(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  uint64_t v3;

  *(_QWORD *)v1 = v3;
  if (*(char *)(v1 + 31) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

void mlcore::AlbumTable::albumArtistPersistentIDColumn(mlcore::AlbumTable *this@<X0>, uint64_t a2@<X8>)
{
  std::string *v4;

  *(_QWORD *)a2 = off_24C335D90;
  v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 1663) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 205), *((_QWORD *)this + 206));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 1640);
    *(_QWORD *)(a2 + 24) = *((_QWORD *)this + 207);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 416);
  *(_DWORD *)(a2 + 44) = *((_DWORD *)this + 419);
  *(_QWORD *)(a2 + 36) = *(_QWORD *)((char *)this + 1668);
  *(_QWORD *)a2 = off_24C336AC0;
}

void mlcore::AlbumTable::representativeItemPersistentIDColumn(mlcore::AlbumTable *this@<X0>, uint64_t a2@<X8>)
{
  std::string *v4;

  *(_QWORD *)a2 = off_24C335D90;
  v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 1711) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 211), *((_QWORD *)this + 212));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 1688);
    *(_QWORD *)(a2 + 24) = *((_QWORD *)this + 213);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 428);
  *(_DWORD *)(a2 + 44) = *((_DWORD *)this + 431);
  *(_QWORD *)(a2 + 36) = *(_QWORD *)((char *)this + 1716);
  *(_QWORD *)a2 = off_24C336AC0;
}

mediaplatform::Data *mlcore::AlbumTable::groupingKeyColumn@<X0>(mlcore::AlbumTable *this@<X0>, uint64_t a2@<X8>)
{
  std::string *v4;
  mediaplatform::Data *result;

  *(_QWORD *)a2 = off_24C335D90;
  v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 1759) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 217), *((_QWORD *)this + 218));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 1736);
    *(_QWORD *)(a2 + 24) = *((_QWORD *)this + 219);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 440);
  *(_QWORD *)a2 = &off_24C335A98;
  *(_BYTE *)(a2 + 36) = *((_BYTE *)this + 1764);
  result = mediaplatform::Data::Data((mediaplatform::Data *)(a2 + 40), (mlcore::AlbumTable *)((char *)this + 1768));
  *(_QWORD *)a2 = &off_24C336A40;
  return result;
}

void sub_20A84F244(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  uint64_t v3;

  *(_QWORD *)v1 = v3;
  if (*(char *)(v1 + 31) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

void mlcore::AlbumTable::cloudStatusColumn(mlcore::AlbumTable *this@<X0>, uint64_t a2@<X8>)
{
  std::string *v4;

  *(_QWORD *)a2 = off_24C335D90;
  v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 1839) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 227), *((_QWORD *)this + 228));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 1816);
    *(_QWORD *)(a2 + 24) = *((_QWORD *)this + 229);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 460);
  *(_QWORD *)(a2 + 36) = *(_QWORD *)((char *)this + 1844);
  *(_QWORD *)a2 = off_24C336AA0;
}

void mlcore::AlbumTable::userRatingColumn(mlcore::AlbumTable *this@<X0>, uint64_t a2@<X8>)
{
  std::string *v4;

  *(_QWORD *)a2 = off_24C335D90;
  v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 1887) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 233), *((_QWORD *)this + 234));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 1864);
    *(_QWORD *)(a2 + 24) = *((_QWORD *)this + 235);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 472);
  *(_QWORD *)(a2 + 36) = *(_QWORD *)((char *)this + 1892);
  *(_QWORD *)a2 = off_24C336AA0;
}

void mlcore::AlbumTable::likedStateColumn(mlcore::AlbumTable *this@<X0>, uint64_t a2@<X8>)
{
  std::string *v4;

  *(_QWORD *)a2 = off_24C335D90;
  v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 1935) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 239), *((_QWORD *)this + 240));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 1912);
    *(_QWORD *)(a2 + 24) = *((_QWORD *)this + 241);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 484);
  *(_QWORD *)(a2 + 36) = *(_QWORD *)((char *)this + 1940);
  *(_QWORD *)a2 = off_24C336AA0;
}

void mlcore::AlbumTable::allCompilationsColumn(mlcore::AlbumTable *this@<X0>, uint64_t a2@<X8>)
{
  std::string *v4;

  *(_QWORD *)a2 = off_24C335D90;
  v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 1983) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 245), *((_QWORD *)this + 246));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 1960);
    *(_QWORD *)(a2 + 24) = *((_QWORD *)this + 247);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 496);
  *(_QWORD *)(a2 + 36) = *(_QWORD *)((char *)this + 1988);
  *(_QWORD *)a2 = off_24C336AA0;
}

void mlcore::AlbumTable::feedURLColumn(mlcore::AlbumTable *this@<X0>, uint64_t a2@<X8>)
{
  std::string *v4;
  std::string *v5;

  *(_QWORD *)a2 = off_24C335D90;
  v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 2031) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 251), *((_QWORD *)this + 252));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 2008);
    *(_QWORD *)(a2 + 24) = *((_QWORD *)this + 253);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 508);
  *(_QWORD *)a2 = &off_24C335AB8;
  *(_BYTE *)(a2 + 36) = *((_BYTE *)this + 2036);
  v5 = (std::string *)(a2 + 40);
  if (*((char *)this + 2063) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)this + 255), *((_QWORD *)this + 256));
  }
  else
  {
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 2040);
    *(_QWORD *)(a2 + 56) = *((_QWORD *)this + 257);
  }
  *(_QWORD *)a2 = &off_24C336A60;
}

void sub_20A84F514(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  uint64_t v3;

  *(_QWORD *)v1 = v3;
  if (*(char *)(v1 + 31) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

void mlcore::AlbumTable::seasonNumberColumn(mlcore::AlbumTable *this@<X0>, uint64_t a2@<X8>)
{
  std::string *v4;

  *(_QWORD *)a2 = off_24C335D90;
  v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 2095) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 259), *((_QWORD *)this + 260));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 2072);
    *(_QWORD *)(a2 + 24) = *((_QWORD *)this + 261);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 524);
  *(_QWORD *)(a2 + 36) = *(_QWORD *)((char *)this + 2100);
  *(_QWORD *)a2 = off_24C336AA0;
}

void mlcore::AlbumTable::albumYearColumn(mlcore::AlbumTable *this@<X0>, uint64_t a2@<X8>)
{
  std::string *v4;

  *(_QWORD *)a2 = off_24C335D90;
  v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 2143) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 265), *((_QWORD *)this + 266));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 2120);
    *(_QWORD *)(a2 + 24) = *((_QWORD *)this + 267);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 536);
  *(_QWORD *)(a2 + 36) = *(_QWORD *)((char *)this + 2148);
  *(_QWORD *)a2 = off_24C336AA0;
}

void mlcore::AlbumTable::keepLocalColumn(mlcore::AlbumTable *this@<X0>, uint64_t a2@<X8>)
{
  std::string *v4;

  *(_QWORD *)a2 = off_24C335D90;
  v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 2191) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 271), *((_QWORD *)this + 272));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 2168);
    *(_QWORD *)(a2 + 24) = *((_QWORD *)this + 273);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 548);
  *(_QWORD *)(a2 + 36) = *(_QWORD *)((char *)this + 2196);
  *(_QWORD *)a2 = off_24C336AA0;
}

void mlcore::AlbumTable::keepLocalStatusColumn(mlcore::AlbumTable *this@<X0>, uint64_t a2@<X8>)
{
  std::string *v4;

  *(_QWORD *)a2 = off_24C335D90;
  v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 2239) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 277), *((_QWORD *)this + 278));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 2216);
    *(_QWORD *)(a2 + 24) = *((_QWORD *)this + 279);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 560);
  *(_QWORD *)(a2 + 36) = *(_QWORD *)((char *)this + 2244);
  *(_QWORD *)a2 = off_24C336AA0;
}

void mlcore::AlbumTable::keepLocalStatusReasonColumn(mlcore::AlbumTable *this@<X0>, uint64_t a2@<X8>)
{
  std::string *v4;

  *(_QWORD *)a2 = off_24C335D90;
  v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 2287) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 283), *((_QWORD *)this + 284));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 2264);
    *(_QWORD *)(a2 + 24) = *((_QWORD *)this + 285);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 572);
  *(_QWORD *)(a2 + 36) = *(_QWORD *)((char *)this + 2292);
  *(_QWORD *)a2 = off_24C336AA0;
}

void mlcore::AlbumTable::keepLocalConstraintsColumn(mlcore::AlbumTable *this@<X0>, uint64_t a2@<X8>)
{
  std::string *v4;

  *(_QWORD *)a2 = off_24C335D90;
  v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 2335) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 289), *((_QWORD *)this + 290));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 2312);
    *(_QWORD *)(a2 + 24) = *((_QWORD *)this + 291);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 584);
  *(_QWORD *)(a2 + 36) = *(_QWORD *)((char *)this + 2340);
  *(_QWORD *)a2 = off_24C336AA0;
}

mediaplatform::Data *mlcore::AlbumTable::appDataColumn@<X0>(mlcore::AlbumTable *this@<X0>, uint64_t a2@<X8>)
{
  std::string *v4;
  mediaplatform::Data *result;

  *(_QWORD *)a2 = off_24C335D90;
  v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 2383) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 295), *((_QWORD *)this + 296));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 2360);
    *(_QWORD *)(a2 + 24) = *((_QWORD *)this + 297);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 596);
  *(_QWORD *)a2 = &off_24C335A98;
  *(_BYTE *)(a2 + 36) = *((_BYTE *)this + 2388);
  result = mediaplatform::Data::Data((mediaplatform::Data *)(a2 + 40), (mlcore::AlbumTable *)((char *)this + 2392));
  *(_QWORD *)a2 = &off_24C336A40;
  return result;
}

void sub_20A84F8B8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  uint64_t v3;

  *(_QWORD *)v1 = v3;
  if (*(char *)(v1 + 31) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

void mlcore::AlbumTable::containsClassicalWorkColumn(mlcore::AlbumTable *this@<X0>, uint64_t a2@<X8>)
{
  std::string *v4;

  *(_QWORD *)a2 = off_24C335D90;
  v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 2463) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 305), *((_QWORD *)this + 306));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 2440);
    *(_QWORD *)(a2 + 24) = *((_QWORD *)this + 307);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 616);
  *(_QWORD *)(a2 + 36) = *(_QWORD *)((char *)this + 2468);
  *(_QWORD *)a2 = off_24C336AA0;
}

void mlcore::AlbumTable::datePlayedLocalColumn(mlcore::AlbumTable *this@<X0>, uint64_t a2@<X8>)
{
  std::string *v4;

  *(_QWORD *)a2 = off_24C335D90;
  v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 2511) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 311), *((_QWORD *)this + 312));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 2488);
    *(_QWORD *)(a2 + 24) = *((_QWORD *)this + 313);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 628);
  *(_DWORD *)(a2 + 44) = *((_DWORD *)this + 631);
  *(_QWORD *)(a2 + 36) = *(_QWORD *)((char *)this + 2516);
  *(_QWORD *)a2 = off_24C336AC0;
}

void mlcore::AlbumTable::userRatingIsDerivedColumn(mlcore::AlbumTable *this@<X0>, uint64_t a2@<X8>)
{
  std::string *v4;

  *(_QWORD *)a2 = off_24C335D90;
  v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 2559) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 317), *((_QWORD *)this + 318));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 2536);
    *(_QWORD *)(a2 + 24) = *((_QWORD *)this + 319);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 640);
  *(_DWORD *)(a2 + 44) = *((_DWORD *)this + 643);
  *(_QWORD *)(a2 + 36) = *(_QWORD *)((char *)this + 2564);
  *(_QWORD *)a2 = off_24C336AC0;
}

void mlcore::AlbumTable::syncIDColumn(mlcore::AlbumTable *this@<X0>, uint64_t a2@<X8>)
{
  std::string *v4;

  *(_QWORD *)a2 = off_24C335D90;
  v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 2607) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 323), *((_QWORD *)this + 324));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 2584);
    *(_QWORD *)(a2 + 24) = *((_QWORD *)this + 325);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 652);
  *(_DWORD *)(a2 + 44) = *((_DWORD *)this + 655);
  *(_QWORD *)(a2 + 36) = *(_QWORD *)((char *)this + 2612);
  *(_QWORD *)a2 = off_24C336AC0;
}

void mlcore::AlbumTable::classicalExperienceAvailableColumn(mlcore::AlbumTable *this@<X0>, uint64_t a2@<X8>)
{
  std::string *v4;

  *(_QWORD *)a2 = off_24C335D90;
  v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 2655) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 329), *((_QWORD *)this + 330));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 2632);
    *(_QWORD *)(a2 + 24) = *((_QWORD *)this + 331);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 664);
  *(_QWORD *)(a2 + 36) = *(_QWORD *)((char *)this + 2660);
  *(_QWORD *)a2 = off_24C336AA0;
}

void mlcore::AlbumTable::storeIDColumn(mlcore::AlbumTable *this@<X0>, uint64_t a2@<X8>)
{
  std::string *v4;

  *(_QWORD *)a2 = off_24C335D90;
  v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 2703) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 335), *((_QWORD *)this + 336));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 2680);
    *(_QWORD *)(a2 + 24) = *((_QWORD *)this + 337);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 676);
  *(_DWORD *)(a2 + 44) = *((_DWORD *)this + 679);
  *(_QWORD *)(a2 + 36) = *(_QWORD *)((char *)this + 2708);
  *(_QWORD *)a2 = off_24C336AC0;
}

void mlcore::AlbumTable::cloudLibraryIDColumn(mlcore::AlbumTable *this@<X0>, uint64_t a2@<X8>)
{
  std::string *v4;
  std::string *v5;

  *(_QWORD *)a2 = off_24C335D90;
  v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 2751) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 341), *((_QWORD *)this + 342));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 2728);
    *(_QWORD *)(a2 + 24) = *((_QWORD *)this + 343);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 688);
  *(_QWORD *)a2 = &off_24C335AB8;
  *(_BYTE *)(a2 + 36) = *((_BYTE *)this + 2756);
  v5 = (std::string *)(a2 + 40);
  if (*((char *)this + 2783) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)this + 345), *((_QWORD *)this + 346));
  }
  else
  {
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 2760);
    *(_QWORD *)(a2 + 56) = *((_QWORD *)this + 347);
  }
  *(_QWORD *)a2 = &off_24C336A60;
}

void sub_20A84FCA0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  uint64_t v3;

  *(_QWORD *)v1 = v3;
  if (*(char *)(v1 + 31) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

void mlcore::AlbumTable::likedStateChangedDateColumn(mlcore::AlbumTable *this@<X0>, uint64_t a2@<X8>)
{
  std::string *v4;

  *(_QWORD *)a2 = off_24C335D90;
  v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 2815) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 349), *((_QWORD *)this + 350));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 2792);
    *(_QWORD *)(a2 + 24) = *((_QWORD *)this + 351);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 704);
  *(_DWORD *)(a2 + 44) = *((_DWORD *)this + 707);
  *(_QWORD *)(a2 + 36) = *(_QWORD *)((char *)this + 2820);
  *(_QWORD *)a2 = off_24C336AC0;
}

void mlcore::MediaTable<long long,int,int,std::string,std::string,int>::~MediaTable(uint64_t a1)
{
  *(_QWORD *)a1 = off_24C3362B8;
  *(_QWORD *)(a1 + 672) = off_24C335D90;
  if (*(char *)(a1 + 703) < 0)
    operator delete(*(void **)(a1 + 680));
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 608);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 544);
  *(_QWORD *)(a1 + 496) = off_24C335D90;
  if (*(char *)(a1 + 527) < 0)
    operator delete(*(void **)(a1 + 504));
  *(_QWORD *)(a1 + 448) = off_24C335D90;
  if (*(char *)(a1 + 479) < 0)
    operator delete(*(void **)(a1 + 456));
  *(_QWORD *)(a1 + 400) = off_24C335D90;
  if (*(char *)(a1 + 431) < 0)
    operator delete(*(void **)(a1 + 408));
  mediaplatform::DatabaseTable<long long,int,int,std::string,std::string,int>::~DatabaseTable(a1);
}

{
  *(_QWORD *)a1 = off_24C3362B8;
  *(_QWORD *)(a1 + 672) = off_24C335D90;
  if (*(char *)(a1 + 703) < 0)
    operator delete(*(void **)(a1 + 680));
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 608);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 544);
  *(_QWORD *)(a1 + 496) = off_24C335D90;
  if (*(char *)(a1 + 527) < 0)
    operator delete(*(void **)(a1 + 504));
  *(_QWORD *)(a1 + 448) = off_24C335D90;
  if (*(char *)(a1 + 479) < 0)
    operator delete(*(void **)(a1 + 456));
  *(_QWORD *)(a1 + 400) = off_24C335D90;
  if (*(char *)(a1 + 431) < 0)
    operator delete(*(void **)(a1 + 408));
  mediaplatform::DatabaseTable<long long,int,int,std::string,std::string,int>::~DatabaseTable(a1);
}

{
  *(_QWORD *)a1 = off_24C3362B8;
  *(_QWORD *)(a1 + 672) = off_24C335D90;
  if (*(char *)(a1 + 703) < 0)
    operator delete(*(void **)(a1 + 680));
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 608);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 544);
  *(_QWORD *)(a1 + 496) = off_24C335D90;
  if (*(char *)(a1 + 527) < 0)
    operator delete(*(void **)(a1 + 504));
  *(_QWORD *)(a1 + 448) = off_24C335D90;
  if (*(char *)(a1 + 479) < 0)
    operator delete(*(void **)(a1 + 456));
  *(_QWORD *)(a1 + 400) = off_24C335D90;
  if (*(char *)(a1 + 431) < 0)
    operator delete(*(void **)(a1 + 408));
  mediaplatform::DatabaseTable<long long,int,int,std::string,std::string,int>::~DatabaseTable(a1);
  JUMPOUT(0x20BD27AFCLL);
}

void mediaplatform::DatabaseTable<long long,int,int,std::string,std::string,int>::~DatabaseTable(uint64_t a1)
{
  *(_QWORD *)a1 = &off_24C335750;
  *(_QWORD *)(a1 + 352) = off_24C335D90;
  if (*(char *)(a1 + 383) < 0)
    operator delete(*(void **)(a1 + 360));
  *(_QWORD *)(a1 + 304) = off_24C335D90;
  if (*(char *)(a1 + 335) < 0)
    operator delete(*(void **)(a1 + 312));
  *(_QWORD *)(a1 + 256) = off_24C335D90;
  if (*(char *)(a1 + 287) < 0)
    operator delete(*(void **)(a1 + 264));
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 192);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 128);
  *(_QWORD *)(a1 + 80) = off_24C335D90;
  if (*(char *)(a1 + 111) < 0)
    operator delete(*(void **)(a1 + 88));
  if (*(char *)(a1 + 79) < 0)
    operator delete(*(void **)(a1 + 56));
  mediaplatform::DatabaseTableBase::~DatabaseTableBase((void **)a1);
}

{
  mediaplatform::DatabaseTable<long long,int,int,std::string,std::string,int>::~DatabaseTable(a1);
  JUMPOUT(0x20BD27AFCLL);
}

uint64_t mediaplatform::DatabaseTable<long long,int,int,std::string,std::string,int>::columnCount()
{
  return 6;
}

void mlcore::BestArtworkTokenTable::~BestArtworkTokenTable(mlcore::BestArtworkTokenTable *this)
{
  *(_QWORD *)this = off_24C3362B8;
  *((_QWORD *)this + 84) = off_24C335D90;
  if (*((char *)this + 703) < 0)
    operator delete(*((void **)this + 85));
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)this + 608);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)this + 544);
  *((_QWORD *)this + 62) = off_24C335D90;
  if (*((char *)this + 527) < 0)
    operator delete(*((void **)this + 63));
  *((_QWORD *)this + 56) = off_24C335D90;
  if (*((char *)this + 479) < 0)
    operator delete(*((void **)this + 57));
  *((_QWORD *)this + 50) = off_24C335D90;
  if (*((char *)this + 431) < 0)
    operator delete(*((void **)this + 51));
  mediaplatform::DatabaseTable<long long,int,int,std::string,std::string,int>::~DatabaseTable((uint64_t)this);
}

{
  *(_QWORD *)this = off_24C3362B8;
  *((_QWORD *)this + 84) = off_24C335D90;
  if (*((char *)this + 703) < 0)
    operator delete(*((void **)this + 85));
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)this + 608);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)this + 544);
  *((_QWORD *)this + 62) = off_24C335D90;
  if (*((char *)this + 527) < 0)
    operator delete(*((void **)this + 63));
  *((_QWORD *)this + 56) = off_24C335D90;
  if (*((char *)this + 479) < 0)
    operator delete(*((void **)this + 57));
  *((_QWORD *)this + 50) = off_24C335D90;
  if (*((char *)this + 431) < 0)
    operator delete(*((void **)this + 51));
  mediaplatform::DatabaseTable<long long,int,int,std::string,std::string,int>::~DatabaseTable((uint64_t)this);
  JUMPOUT(0x20BD27AFCLL);
}

uint64_t mediaplatform::DatabaseColumnTuple<1ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(uint64_t a1)
{
  *(_QWORD *)(a1 + 224) = off_24C335D90;
  if (*(char *)(a1 + 255) < 0)
    operator delete(*(void **)(a1 + 232));
  *(_QWORD *)(a1 + 176) = off_24C335D90;
  if (*(char *)(a1 + 207) < 0)
    operator delete(*(void **)(a1 + 184));
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 112);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 48);
  *(_QWORD *)a1 = off_24C335D90;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

uint64_t mediaplatform::DatabaseColumnTuple<2ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(uint64_t a1)
{
  *(_QWORD *)(a1 + 176) = off_24C335D90;
  if (*(char *)(a1 + 207) < 0)
    operator delete(*(void **)(a1 + 184));
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 112);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 48);
  *(_QWORD *)a1 = off_24C335D90;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void mlcore::BestArtworkTokenTable::entityPersistentIDColumn(mlcore::BestArtworkTokenTable *this@<X0>, uint64_t a2@<X8>)
{
  std::string *v4;

  *(_QWORD *)a2 = off_24C335D90;
  v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 431) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 51), *((_QWORD *)this + 52));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 408);
    *(_QWORD *)(a2 + 24) = *((_QWORD *)this + 53);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 108);
  *(_DWORD *)(a2 + 44) = *((_DWORD *)this + 111);
  *(_QWORD *)(a2 + 36) = *(_QWORD *)((char *)this + 436);
  *(_QWORD *)a2 = off_24C336AC0;
}

void mlcore::BestArtworkTokenTable::entityTypeColumn(mlcore::BestArtworkTokenTable *this@<X0>, uint64_t a2@<X8>)
{
  std::string *v4;

  *(_QWORD *)a2 = off_24C335D90;
  v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 479) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 57), *((_QWORD *)this + 58));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 456);
    *(_QWORD *)(a2 + 24) = *((_QWORD *)this + 59);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 120);
  *(_QWORD *)(a2 + 36) = *(_QWORD *)((char *)this + 484);
  *(_QWORD *)a2 = off_24C336AA0;
}

void mlcore::BestArtworkTokenTable::artworkTypeColumn(mlcore::BestArtworkTokenTable *this@<X0>, uint64_t a2@<X8>)
{
  std::string *v4;

  *(_QWORD *)a2 = off_24C335D90;
  v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 527) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 63), *((_QWORD *)this + 64));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 504);
    *(_QWORD *)(a2 + 24) = *((_QWORD *)this + 65);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 132);
  *(_QWORD *)(a2 + 36) = *(_QWORD *)((char *)this + 532);
  *(_QWORD *)a2 = off_24C336AA0;
}

void mlcore::BestArtworkTokenTable::availableArtworkTokenColumn(mlcore::BestArtworkTokenTable *this@<X0>, uint64_t a2@<X8>)
{
  std::string *v4;
  std::string *v5;

  *(_QWORD *)a2 = off_24C335D90;
  v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 575) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 69), *((_QWORD *)this + 70));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 552);
    *(_QWORD *)(a2 + 24) = *((_QWORD *)this + 71);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 144);
  *(_QWORD *)a2 = &off_24C335AB8;
  *(_BYTE *)(a2 + 36) = *((_BYTE *)this + 580);
  v5 = (std::string *)(a2 + 40);
  if (*((char *)this + 607) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)this + 73), *((_QWORD *)this + 74));
  }
  else
  {
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 584);
    *(_QWORD *)(a2 + 56) = *((_QWORD *)this + 75);
  }
  *(_QWORD *)a2 = &off_24C336A60;
}

void sub_20A85042C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  uint64_t v3;

  *(_QWORD *)v1 = v3;
  if (*(char *)(v1 + 31) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

void mlcore::BestArtworkTokenTable::fetchableArtworkTokenColumn(mlcore::BestArtworkTokenTable *this@<X0>, uint64_t a2@<X8>)
{
  std::string *v4;
  std::string *v5;

  *(_QWORD *)a2 = off_24C335D90;
  v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 639) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 77), *((_QWORD *)this + 78));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 616);
    *(_QWORD *)(a2 + 24) = *((_QWORD *)this + 79);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 160);
  *(_QWORD *)a2 = &off_24C335AB8;
  *(_BYTE *)(a2 + 36) = *((_BYTE *)this + 644);
  v5 = (std::string *)(a2 + 40);
  if (*((char *)this + 671) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)this + 81), *((_QWORD *)this + 82));
  }
  else
  {
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 648);
    *(_QWORD *)(a2 + 56) = *((_QWORD *)this + 83);
  }
  *(_QWORD *)a2 = &off_24C336A60;
}

void sub_20A85050C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  uint64_t v3;

  *(_QWORD *)v1 = v3;
  if (*(char *)(v1 + 31) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

void mlcore::BestArtworkTokenTable::fetchableArtworkSourceTypeColumn(mlcore::BestArtworkTokenTable *this@<X0>, uint64_t a2@<X8>)
{
  std::string *v4;

  *(_QWORD *)a2 = off_24C335D90;
  v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 703) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 85), *((_QWORD *)this + 86));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 680);
    *(_QWORD *)(a2 + 24) = *((_QWORD *)this + 87);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 176);
  *(_QWORD *)(a2 + 36) = *(_QWORD *)((char *)this + 708);
  *(_QWORD *)a2 = off_24C336AA0;
}

void mlcore::SortDescriptor::~SortDescriptor(mlcore::SortDescriptor *this)
{
  JUMPOUT(0x20BD27AFCLL);
}

void mlcore::SortDescriptor::description(mlcore::SortDescriptor *this@<X0>, std::string *a2@<X8>)
{
  std::string *v4;
  __int128 v5;
  std::string *v6;
  __int128 v7;
  const std::string::value_type *v8;
  std::string *v9;
  __int128 v10;
  std::string *v11;
  std::string v12;
  std::string v13;
  std::string v14;
  std::string v15;

  (*(void (**)(std::string *__return_ptr))(**((_QWORD **)this + 1) + 40))(&v12);
  v4 = std::string::insert(&v12, 0, "{ ");
  v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  v13.__r_.__value_.__r.__words[2] = v4->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v13.__r_.__value_.__l.__data_ = v5;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  v6 = std::string::append(&v13, ", ");
  v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  v14.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v14.__r_.__value_.__l.__data_ = v7;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  if (*((_DWORD *)this + 4))
    v8 = "desc";
  else
    v8 = "asc";
  v9 = std::string::append(&v14, v8);
  v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
  v15.__r_.__value_.__r.__words[2] = v9->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v15.__r_.__value_.__l.__data_ = v10;
  v9->__r_.__value_.__l.__size_ = 0;
  v9->__r_.__value_.__r.__words[2] = 0;
  v9->__r_.__value_.__r.__words[0] = 0;
  v11 = std::string::append(&v15, " }");
  *a2 = *v11;
  v11->__r_.__value_.__l.__size_ = 0;
  v11->__r_.__value_.__r.__words[2] = 0;
  v11->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v15.__r_.__value_.__l.__data_);
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v14.__r_.__value_.__l.__data_);
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v13.__r_.__value_.__l.__data_);
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v12.__r_.__value_.__l.__data_);
}

void sub_20A8506F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  uint64_t v28;

  if (*(char *)(v28 - 25) < 0)
    operator delete(*(void **)(v28 - 48));
  if (a28 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

uint64_t mlcore::MultiSortDescriptor::description(mlcore::MultiSortDescriptor *this)
{
  char *v2;
  void **v3;
  uint64_t v4;
  int v5;
  const char *v6;
  uint64_t v7;
  void *__p[2];
  unsigned __int8 v10;
  _QWORD v11[11];
  char v12;
  uint64_t v13;

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v11);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"{ ", 2);
  v2 = (char *)this + 24;
  while (1)
  {
    v2 = *(char **)v2;
    if (!v2)
      break;
    (*(void (**)(void **__return_ptr))(**((_QWORD **)v2 + 3) + 40))(__p);
    if ((v10 & 0x80u) == 0)
      v3 = __p;
    else
      v3 = (void **)__p[0];
    if ((v10 & 0x80u) == 0)
      v4 = v10;
    else
      v4 = (uint64_t)__p[1];
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)v3, v4);
    if ((char)v10 < 0)
      operator delete(__p[0]);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)", ", 2);
  }
  v5 = *((_DWORD *)this + 12);
  if (v5)
    v6 = "desc";
  else
    v6 = "asc";
  if (v5)
    v7 = 4;
  else
    v7 = 3;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)v6, v7);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)" }", 2);
  std::stringbuf::str();
  v11[0] = *MEMORY[0x24BEDB800];
  *(_QWORD *)((char *)v11 + *(_QWORD *)(v11[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  v11[1] = MEMORY[0x24BEDB848] + 16;
  if (v12 < 0)
    operator delete((void *)v11[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x20BD27A84](&v13);
}

void sub_20A850908(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  std::ostringstream::~ostringstream((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t mlcore::comparisonUsingSortDescriptors@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = &off_24C33B770;
  a2[1] = result;
  a2[3] = a2;
  return result;
}

void std::__function::__func<mlcore::comparisonUsingSortDescriptors(std::vector<mlcore::SortDescriptor> const&)::$_0,std::allocator<mlcore::comparisonUsingSortDescriptors(std::vector<mlcore::SortDescriptor> const&)::$_0>,BOOL ()(mlcore::PropertyCache const&,mlcore::PropertyCache const&)>::~__func()
{
  JUMPOUT(0x20BD27AFCLL);
}

_QWORD *std::__function::__func<mlcore::comparisonUsingSortDescriptors(std::vector<mlcore::SortDescriptor> const&)::$_0,std::allocator<mlcore::comparisonUsingSortDescriptors(std::vector<mlcore::SortDescriptor> const&)::$_0>,BOOL ()(mlcore::PropertyCache const&,mlcore::PropertyCache const&)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24C33B770;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<mlcore::comparisonUsingSortDescriptors(std::vector<mlcore::SortDescriptor> const&)::$_0,std::allocator<mlcore::comparisonUsingSortDescriptors(std::vector<mlcore::SortDescriptor> const&)::$_0>,BOOL ()(mlcore::PropertyCache const&,mlcore::PropertyCache const&)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24C33B770;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<mlcore::comparisonUsingSortDescriptors(std::vector<mlcore::SortDescriptor> const&)::$_0,std::allocator<mlcore::comparisonUsingSortDescriptors(std::vector<mlcore::SortDescriptor> const&)::$_0>,BOOL ()(mlcore::PropertyCache const&,mlcore::PropertyCache const&)>::operator()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  BOOL v9;

  v3 = *(_QWORD **)(a1 + 8);
  if (v3[1] == *v3)
    __assert_rtn("_compareEntitiesWithSortDescriptors", "SortDescriptor.cpp", 36, "sortDescriptors.size()");
  v6 = *v3 + 24;
  do
  {
    v7 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v6 - 16) + 48))(*(_QWORD *)(v6 - 16), a2, a3);
    if (*(_DWORD *)(v6 - 8) == 1)
      v8 = -v7;
    else
      v8 = v7;
    if (v8)
      v9 = 1;
    else
      v9 = v6 == v3[1];
    v6 += 24;
  }
  while (!v9);
  return v8 >> 31;
}

uint64_t std::__function::__func<mlcore::comparisonUsingSortDescriptors(std::vector<mlcore::SortDescriptor> const&)::$_0,std::allocator<mlcore::comparisonUsingSortDescriptors(std::vector<mlcore::SortDescriptor> const&)::$_0>,BOOL ()(mlcore::PropertyCache const&,mlcore::PropertyCache const&)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN6mlcore30comparisonUsingSortDescriptorsERKNSt3__16vectorINS_14SortDescriptorENS0_9allocatorIS2_EEEEE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<mlcore::comparisonUsingSortDescriptors(std::vector<mlcore::SortDescriptor> const&)::$_0,std::allocator<mlcore::comparisonUsingSortDescriptors(std::vector<mlcore::SortDescriptor> const&)::$_0>,BOOL ()(mlcore::PropertyCache const&,mlcore::PropertyCache const&)>::target_type()
{
}

uint64_t mlcore::MultiSortDescriptor::ordering(mlcore::MultiSortDescriptor *this)
{
  return *((unsigned int *)this + 12);
}

uint64_t mlcore::MultiSortDescriptor::propertyForEntityClass@<X0>(mlcore::MultiSortDescriptor *this@<X0>, uint64_t a2@<X8>)
{
  return std::unordered_map<mlcore::EntityClass *,mlcore::ModelPropertyBase *>::unordered_map(a2, (uint64_t)this + 8);
}

uint64_t mlcore::comparisonUsingMultiSortDescriptors@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = &off_24C33B7C8;
  a2[1] = result;
  a2[3] = a2;
  return result;
}

void std::__function::__func<mlcore::comparisonUsingMultiSortDescriptors(std::vector<mlcore::MultiSortDescriptor> const&)::$_0,std::allocator<mlcore::comparisonUsingMultiSortDescriptors(std::vector<mlcore::MultiSortDescriptor> const&)::$_0>,BOOL ()(mlcore::PropertyCache const&,mlcore::PropertyCache const&)>::~__func()
{
  JUMPOUT(0x20BD27AFCLL);
}

_QWORD *std::__function::__func<mlcore::comparisonUsingMultiSortDescriptors(std::vector<mlcore::MultiSortDescriptor> const&)::$_0,std::allocator<mlcore::comparisonUsingMultiSortDescriptors(std::vector<mlcore::MultiSortDescriptor> const&)::$_0>,BOOL ()(mlcore::PropertyCache const&,mlcore::PropertyCache const&)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24C33B7C8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<mlcore::comparisonUsingMultiSortDescriptors(std::vector<mlcore::MultiSortDescriptor> const&)::$_0,std::allocator<mlcore::comparisonUsingMultiSortDescriptors(std::vector<mlcore::MultiSortDescriptor> const&)::$_0>,BOOL ()(mlcore::PropertyCache const&,mlcore::PropertyCache const&)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24C33B7C8;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<mlcore::comparisonUsingMultiSortDescriptors(std::vector<mlcore::MultiSortDescriptor> const&)::$_0,std::allocator<mlcore::comparisonUsingMultiSortDescriptors(std::vector<mlcore::MultiSortDescriptor> const&)::$_0>,BOOL ()(mlcore::PropertyCache const&,mlcore::PropertyCache const&)>::operator()(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t *v3;
  uint64_t v4;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int v11;
  unsigned int v12;
  BOOL v13;
  _BYTE v15[16];
  _QWORD *v16;

  v3 = *(uint64_t **)(a1 + 8);
  v4 = *v3;
  if (v3[1] == *v3)
    __assert_rtn("_compareEntitiesWithMultiSortDescriptors", "SortDescriptor.cpp", 93, "sortDescriptors.size()");
  while (2)
  {
    std::unordered_map<mlcore::EntityClass *,mlcore::ModelPropertyBase *>::unordered_map((uint64_t)v15, v4 + 8);
    v7 = v16;
    if (!v16)
    {
      std::__hash_table<mlcore::ModelPropertyBase *,std::hash<mlcore::ModelPropertyBase *>,std::equal_to<mlcore::ModelPropertyBase *>,std::allocator<mlcore::ModelPropertyBase *>>::~__hash_table((uint64_t)v15);
      v11 = -1;
      goto LABEL_27;
    }
    v8 = 0;
    v9 = 0;
    do
    {
      v10 = v7[3];
      if (v8)
      {
        if (!v9)
          goto LABEL_12;
      }
      else
      {
        if (mlcore::PropertyCache::hasValueForProperty(a2, v7[3]))
          v8 = v10;
        else
          v8 = 0;
        if (!v9)
        {
LABEL_12:
          if (mlcore::PropertyCache::hasValueForProperty(a3, v10))
            v9 = v10;
          else
            v9 = 0;
          if (!v8)
            goto LABEL_17;
          goto LABEL_16;
        }
      }
      if (!v8)
        goto LABEL_17;
LABEL_16:
      if (v9)
      {
        std::__hash_table<mlcore::ModelPropertyBase *,std::hash<mlcore::ModelPropertyBase *>,std::equal_to<mlcore::ModelPropertyBase *>,std::allocator<mlcore::ModelPropertyBase *>>::~__hash_table((uint64_t)v15);
LABEL_26:
        v11 = mlcore::ModelPropertyBase::compareCongruentPropertyValuesFromCaches(v8, (uint64_t)a2, v9, (uint64_t)a3);
        goto LABEL_27;
      }
LABEL_17:
      v7 = (_QWORD *)*v7;
    }
    while (v7);
    std::__hash_table<mlcore::ModelPropertyBase *,std::hash<mlcore::ModelPropertyBase *>,std::equal_to<mlcore::ModelPropertyBase *>,std::allocator<mlcore::ModelPropertyBase *>>::~__hash_table((uint64_t)v15);
    if (v9)
      v11 = 1;
    else
      v11 = -1;
    if (v8 && v9)
      goto LABEL_26;
LABEL_27:
    if (*(_DWORD *)(v4 + 48) == 1)
      v12 = -v11;
    else
      v12 = v11;
    v4 += 56;
    if (v12)
      v13 = 1;
    else
      v13 = v4 == v3[1];
    if (!v13)
      continue;
    return v12 >> 31;
  }
}

void sub_20A850CB4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__hash_table<mlcore::ModelPropertyBase *,std::hash<mlcore::ModelPropertyBase *>,std::equal_to<mlcore::ModelPropertyBase *>,std::allocator<mlcore::ModelPropertyBase *>>::~__hash_table((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<mlcore::comparisonUsingMultiSortDescriptors(std::vector<mlcore::MultiSortDescriptor> const&)::$_0,std::allocator<mlcore::comparisonUsingMultiSortDescriptors(std::vector<mlcore::MultiSortDescriptor> const&)::$_0>,BOOL ()(mlcore::PropertyCache const&,mlcore::PropertyCache const&)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN6mlcore35comparisonUsingMultiSortDescriptorsERKNSt3__16vectorINS_19MultiSortDescriptorENS0_9allocatorIS2_EEEEE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<mlcore::comparisonUsingMultiSortDescriptors(std::vector<mlcore::MultiSortDescriptor> const&)::$_0,std::allocator<mlcore::comparisonUsingMultiSortDescriptors(std::vector<mlcore::MultiSortDescriptor> const&)::$_0>,BOOL ()(mlcore::PropertyCache const&,mlcore::PropertyCache const&)>::target_type()
{
}

uint64_t AppendCStringMax(char *a1, char *__s, unsigned int a3)
{
  char *v3;
  uint64_t result;
  uint64_t v5;
  char v6;
  char *v7;

  if (!__s)
    return 0;
  v3 = a1;
  if (!a1)
    return strlen(__s);
  result = a3 - 1;
  if (a3 <= 1)
    return strlen(__s);
  v5 = 0;
  while (__s[v5])
  {
    if ((_DWORD)result == (_DWORD)++v5)
      return result;
  }
  do
  {
    v6 = *v3;
    if (!*v3)
    {
      v7 = &__s[v5];
      result = v5;
      goto LABEL_15;
    }
    ++v3;
    __s[v5++] = v6;
  }
  while ((_DWORD)result != (_DWORD)v5);
  v7 = &__s[v5];
LABEL_15:
  *v7 = 0;
  return result;
}

uint64_t CopyCStringMax(_BYTE *a1, _BYTE *a2, int a3)
{
  int v3;
  BOOL v4;
  uint64_t result;
  _BYTE *v7;
  int v8;
  BOOL v9;

  LOBYTE(v3) = *a1;
  if (*a1)
    v4 = a3 == 0;
  else
    v4 = 1;
  if (v4)
  {
    result = 0;
  }
  else
  {
    result = 0;
    v7 = a1 + 1;
    do
    {
      a2[result] = v3;
      v3 = v7[result];
      v8 = result++;
      if (v3)
        v9 = a3 - 1 == v8;
      else
        v9 = 1;
    }
    while (!v9);
    a2 += result;
  }
  *a2 = 0;
  return result;
}

uint64_t CreateStringCache(uint64_t a1, int a2)
{
  *(_OWORD *)(a1 + 36) = 0u;
  *(_DWORD *)(a1 + 52) = 0;
  *(_OWORD *)(a1 + 20) = 0u;
  *(_OWORD *)(a1 + 4) = 0u;
  *(_DWORD *)a1 = a2;
  *(_DWORD *)(a1 + 44) = 512;
  return 0;
}

uint64_t DeleteStringCache(uint64_t a1)
{
  void **v2;
  void **v3;
  void **v4;
  uint64_t result;

  if (!a1)
    return 4294967246;
  v2 = *(void ***)(a1 + 8);
  if (v2)
    MemDisposeHandle(v2);
  v3 = *(void ***)(a1 + 16);
  if (v3)
    MemDisposeHandle(v3);
  v4 = *(void ***)(a1 + 24);
  if (v4)
    MemDisposeHandle(v4);
  result = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  return result;
}

uint64_t AddStringToStringCache(int *a1, void *__s1, int a3, int a4, _QWORD *a5)
{
  int v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  size_t v14;
  int *v15;
  uint64_t v16;
  void *v18;
  int v19;
  uint64_t *v20;
  _QWORD **v21;
  void ***v22;
  unsigned int v23;
  uint64_t v24;
  unsigned int v25;
  void **v26;
  void **v27;
  unsigned int v28;
  int v29;
  unsigned int v30;
  char *v31;
  _DWORD *v32;
  uint64_t v33;
  size_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int *v47;
  uint64_t v48;
  int v49;
  int v50;
  int v51;
  int v52;
  int v53;
  uint64_t v54;
  int v55;
  const void *v57;
  void ***v60;
  int v61;

  if (a5)
    *a5 = 3203383023;
  if (a1)
  {
    if (!a4)
      return 0;
    v7 = *a1;
    v61 = a4;
    if ((*a1 & 1) != 0)
    {
      v8 = (_QWORD *)*((_QWORD *)a1 + 1);
      if (v8)
      {
        v9 = (uint64_t *)*((_QWORD *)a1 + 3);
        if (v9)
        {
          v10 = a1[8];
          if ((_DWORD)v10)
          {
            v11 = 0;
            v12 = *v9;
            v13 = **((_QWORD **)a1 + 2);
            v14 = a4;
            v15 = (int *)(*v8 + 4);
            while (1)
            {
              v16 = *(v15 - 1);
              if ((v16 & 0x80000000) == 0 && *v15 >= 1 && *v15 == a4)
              {
                v18 = __s1;
                v19 = memcmp(__s1, (const void *)(v12 + v16), v14);
                __s1 = v18;
                a4 = v61;
                if (!v19)
                  break;
              }
              ++v11;
              v15 += 2;
              if (v10 == v11)
                goto LABEL_18;
            }
            ++*(_DWORD *)(v13 + 4 * v11);
            if (a5)
            {
              v45 = 0;
              *a5 = v11 + 1;
              return v45;
            }
            return 0;
          }
        }
      }
    }
LABEL_18:
    v57 = __s1;
    v20 = (uint64_t *)(a1 + 6);
    v21 = (_QWORD **)(a1 + 2);
    v22 = (void ***)(a1 + 4);
    while (1)
    {
      v23 = a1[13];
      if (v23)
      {
        v24 = *v20;
        if (*v20)
          LODWORD(v24) = *(_DWORD *)(v24 + 8) - a1[10];
        if (v24 / v23 <= 5)
        {
          v25 = a1[11];
          if (v24 > v25)
          {
            v26 = (void **)MemNewHandle((_DWORD)v24 - v23 + v25);
            if (v26)
            {
              if (*v21)
              {
                v27 = v26;
                v60 = v22;
                v28 = a1[8];
                if (v28)
                {
                  v29 = 0;
                  v30 = 0;
                  v31 = (char *)*v26;
                  v32 = (_DWORD *)(**v21 + 4);
                  do
                  {
                    v33 = *(v32 - 1);
                    if ((v33 & 0x80000000) != 0)
                    {
                      if ((_DWORD)v33 == -2147483647)
                      {
                        *(v32 - 1) = 0x80000000;
                        *v32 = a1[9];
                        a1[9] = v30 + 1;
                      }
                    }
                    else
                    {
                      v34 = *v32;
                      if ((int)v34 >= 1)
                      {
                        memcpy(v31, (const void *)(**((_QWORD **)a1 + 3) + v33), v34);
                        *(v32 - 1) = v29;
                        v35 = (int)*v32;
                        v29 += v35;
                        v31 += v35;
                        v28 = a1[8];
                      }
                    }
                    ++v30;
                    v32 += 2;
                  }
                  while (v30 < v28);
                }
                MemDisposeHandle(*((void ***)a1 + 3));
                *((_QWORD *)a1 + 3) = v27;
                a1[13] = 0;
                a1[10] = a1[11];
                v22 = v60;
              }
            }
          }
        }
      }
      v36 = a1[9];
      if ((_DWORD)v36)
      {
        if (*v21)
          break;
      }
      v37 = MemResizeHandle((void ***)a1 + 1, 400);
      if ((_DWORD)v37)
        return v37;
      if ((v7 & 1) != 0)
      {
        v38 = MemResizeHandle(v22, 200);
        if ((_DWORD)v38)
        {
          v45 = v38;
          MemResizeHandle((void ***)a1 + 1, -400);
          return v45;
        }
      }
      v39 = 0;
      v40 = 0;
      v41 = a1[8];
      v42 = **((_QWORD **)a1 + 1) + 8 * v41;
      v43 = v41 + 1;
      v44 = v42;
      do
      {
        *(_DWORD *)(v42 + v39) = 0x80000000;
        if (v40)
          *(_DWORD *)(v40 + 4) = v43;
        v40 = v44;
        v44 += 8;
        v39 += 8;
        ++v43;
      }
      while (v39 != 400);
      a1[8] = v41 + 50;
      a1[9] = v41 + 1;
    }
    v46 = v36 - 1;
    v47 = (int *)(**v21 + 8 * (v36 - 1));
    a1[9] = v47[1];
    v48 = *((_QWORD *)a1 + 3);
    if (v48)
    {
      v49 = a1[10];
      v50 = *(_DWORD *)(v48 + 8) - v49;
    }
    else
    {
      v50 = 0;
      v49 = a1[10];
    }
    v51 = v61;
    if (v49 < v61)
    {
      v52 = a1[11];
      if (v52 <= v61)
        v53 = v61;
      else
        v53 = a1[11];
      if (!(v52 >> 13))
        a1[11] = 2 * v52;
      v54 = MemResizeHandle((void ***)a1 + 3, v53);
      v47 = (int *)(**v21 + 8 * (v36 - 1));
      if ((_DWORD)v54)
      {
        v45 = v54;
        v55 = a1[9];
        *v47 = 0x80000000;
        v47[1] = v55;
        a1[9] = v36;
        return v45;
      }
      v49 = a1[10] + v53;
      a1[10] = v49;
      v48 = *((_QWORD *)a1 + 3);
      v51 = v61;
      v46 = v36 - 1;
    }
    if (v48)
    {
      memcpy((void *)(*(_QWORD *)v48 + v50), v57, a3);
      v51 = v61;
      v49 = a1[10];
    }
    a1[10] = v49 - v51;
    *v47 = v50;
    v47[1] = v51;
    if (a5)
      *a5 = v36;
    if ((v7 & 1) != 0)
    {
      v45 = 0;
      ++*((_DWORD *)**v22 + v46);
      return v45;
    }
    return 0;
  }
  return 4294967246;
}

uint64_t DeleteStringCacheIndex(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  _DWORD *v6;

  if (!a1)
    return 4294967246;
  if (a2 == 3203383023)
    return 0;
  if ((int)a2 >= 1 && *(_DWORD *)(a1 + 32) >= (int)a2)
  {
    if ((*(_DWORD *)a1 & 1) == 0)
    {
      v3 = (a2 - 1);
LABEL_10:
      v2 = 0;
      v6 = (_DWORD *)(**(_QWORD **)(a1 + 8) + 8 * v3);
      *(_DWORD *)(a1 + 52) += v6[1];
      *v6 = -2147483647;
      return v2;
    }
    v4 = **(_QWORD **)(a1 + 16);
    v3 = (a2 - 1);
    v5 = *(_DWORD *)(v4 + 4 * v3) - 1;
    *(_DWORD *)(v4 + 4 * v3) = v5;
    if (!v5)
      goto LABEL_10;
    return 0;
  }
  return 4294967246;
}

uint64_t GetStringCachePtr(uint64_t a1, int a2, _QWORD *a3, int *a4)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  int v7;

  if (a4)
    *a4 = 0;
  if (a3)
    *a3 = 0;
  if (!a1)
    return 4294967246;
  if (a2 == -1091584273)
    return 0;
  if (a2 < 1)
    return 4294967246;
  if (*(_DWORD *)(a1 + 32) < a2)
    return 4294967246;
  v5 = **(_QWORD **)(a1 + 8);
  v6 = *(unsigned int *)(v5 + 8 * (a2 - 1));
  if ((v6 & 0x80000000) != 0)
    return 4294967246;
  v7 = *(_DWORD *)(v5 + 8 * (a2 - 1) + 4);
  if (v7 < 1)
    return 4294967246;
  if (a3)
    *a3 = **(_QWORD **)(a1 + 24) + v6;
  if (!a4)
    return 0;
  result = 0;
  *a4 = v7;
  return result;
}

uint64_t GetStringCacheString(uint64_t a1, int a2, void *__dst, int *a4, int a5)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v10;

  if (a4)
    *a4 = 0;
  if (!a1)
    return 4294967246;
  if (a2 == -1091584273)
    return 0;
  if (a2 < 1 || *(_DWORD *)(a1 + 32) < a2)
    return 4294967246;
  v7 = **(_QWORD **)(a1 + 8);
  v8 = *(unsigned int *)(v7 + 8 * (a2 - 1));
  if ((v8 & 0x80000000) != 0 || (v9 = *(_DWORD *)(v7 + 8 * (a2 - 1) + 4), v9 < 1))
  {
    v10 = 0;
    result = 4294967246;
  }
  else
  {
    if (v9 >= a5)
      v10 = a5;
    else
      v10 = v9;
    if (__dst)
      memcpy(__dst, (const void *)(**(_QWORD **)(a1 + 24) + v8), v10);
    result = 0;
  }
  if (a4)
    *a4 = v10;
  return result;
}

unint64_t SubStringUnicode(char *a1, int a2, unsigned __int16 *a3, int a4, char a5)
{
  int v10;
  int v11;
  char *v12;
  char *v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  int v17;
  int v18;

  if (!a4)
    return 0;
  v10 = *a3;
  if ((a5 & 1) != 0)
    v10 = ToLowerCase(*a3);
  if (!a2)
    return 0;
  v11 = a2;
  v12 = a1;
  v13 = a1;
  while (1)
  {
    v15 = *(unsigned __int16 *)v13;
    v13 += 2;
    v14 = v15;
    if ((a5 & 1) != 0)
      LODWORD(v14) = ToLowerCase(v14);
    if ((_DWORD)v14 == v10)
    {
      v16 = 1;
      while (v11 != (_DWORD)v16 && a4 != (_DWORD)v16)
      {
        v17 = *(unsigned __int16 *)&v12[2 * v16];
        if ((a5 & 1) != 0)
        {
          v17 = ToLowerCase(*(unsigned __int16 *)&v12[2 * v16]);
          v18 = ToLowerCase(a3[v16]);
        }
        else
        {
          v18 = a3[v16];
        }
        ++v16;
        if (v17 != v18)
          goto LABEL_18;
      }
      if (a4 == (_DWORD)v16)
        return (unint64_t)(v13 - a1) >> 1;
    }
LABEL_18:
    v12 = v13;
    if (!--v11)
      return 0;
  }
}

uint64_t ToLowerCase(uint64_t result)
{
  uint64_t v1;
  int64x2_t v2;
  int64x2_t v3;
  int16x4_t v4;
  int32x4_t v5;
  uint64x2_t v6;
  uint64x2_t v7;
  int64x2_t v8;
  int64x2_t v9;
  int32x4_t v10;
  uint32x4_t v11;
  int32x4_t v12;
  int16x4_t v13;
  int8x16_t v14;
  uint32x4_t v15;
  int8x16_t v16;
  int8x8_t v17;
  int8x8_t v18;
  int8x8_t v19;

  if (result <= 0xDE)
  {
    if ((ToLowerCase_sInited & 1) == 0)
    {
      v1 = 0;
      v2 = (int64x2_t)xmmword_20A922690;
      v3 = (int64x2_t)xmmword_20A9226A0;
      v4 = (int16x4_t)0x3000200010000;
      v5 = (int32x4_t)xmmword_20A9226B0;
      v6 = (uint64x2_t)vdupq_n_s64(0xDFuLL);
      v7 = (uint64x2_t)vdupq_n_s64(0xBFuLL);
      v8 = vdupq_n_s64(0xD7uLL);
      v9 = vdupq_n_s64(4uLL);
      v10.i64[0] = 0x4000000040;
      v10.i64[1] = 0x4000000040;
      v11.i64[0] = 0x1A0000001ALL;
      v11.i64[1] = 0x1A0000001ALL;
      v12.i64[0] = 0x400000004;
      v12.i64[1] = 0x400000004;
      v13 = (int16x4_t)0x3000200010000;
      do
      {
        v14 = (int8x16_t)vuzp1q_s32((int32x4_t)vcgtq_u64(v6, (uint64x2_t)v3), (int32x4_t)vcgtq_u64(v6, (uint64x2_t)v2));
        v15 = (uint32x4_t)vaddq_s32(v5, v10);
        v16 = (int8x16_t)vcgtq_u32(v11, v15);
        v17 = (int8x8_t)vmovn_s32((int32x4_t)vbicq_s8((int8x16_t)vuzp1q_s32((int32x4_t)vcgtq_u64((uint64x2_t)v3, v7), (int32x4_t)vcgtq_u64((uint64x2_t)v2, v7)), (int8x16_t)vuzp1q_s32((int32x4_t)vceqq_s64(v3, v8), (int32x4_t)vceqq_s64(v2, v8))));
        *(int16x4_t *)v15.i8 = vmovn_s32((int32x4_t)vandq_s8(v14, (int8x16_t)vcgeq_u32(v15, v11)));
        *(int8x8_t *)v16.i8 = vorr_s8(vand_s8(*(int8x8_t *)v15.i8, v17), (int8x8_t)vmovn_s32((int32x4_t)vandq_s8(v14, v16)));
        *(int8x8_t *)v15.i8 = vbic_s8(*(int8x8_t *)v15.i8, v17);
        v18 = vbsl_s8((int8x8_t)vcltz_s16(vshl_n_s16(*(int16x4_t *)v15.i8, 0xFuLL)), (int8x8_t)v4, (int8x8_t)vadd_s16(v13, (int16x4_t)0x20002000200020));
        v19 = vorr_s8(*(int8x8_t *)v16.i8, *(int8x8_t *)v15.i8);
        if ((v19.i8[0] & 1) != 0)
          ToLowerCase_table[v1] = v18.i16[0];
        if ((v19.i8[2] & 1) != 0)
          ToLowerCase_table[v1 + 1] = v18.i16[1];
        if ((v19.i8[4] & 1) != 0)
          ToLowerCase_table[v1 + 2] = v18.i16[2];
        if ((v19.i8[6] & 1) != 0)
          ToLowerCase_table[v1 + 3] = v18.i16[3];
        v2 = vaddq_s64(v2, v9);
        v3 = vaddq_s64(v3, v9);
        v5 = vaddq_s32(v5, v12);
        v4 = vadd_s16(v4, (int16x4_t)0x4000400040004);
        v13 = vadd_s16(v13, (int16x4_t)0x4000400040004);
        v1 += 4;
      }
      while (v1 != 224);
      ToLowerCase_sInited = 1;
    }
    return (unsigned __int16)ToLowerCase_table[result];
  }
  return result;
}

BOOL IsSubStringUnicode(char *a1, int a2, unsigned __int16 *a3, int a4, char a5)
{
  return SubStringUnicode(a1, a2, a3, a4, a5) != 0;
}

void mlcore::ContainerItemPerson::~ContainerItemPerson(mlcore::ContainerItemPerson *this)
{
  *(_QWORD *)this = off_24C33A860;
  mlcore::PropertyCacheBase<long long,int,double,std::string,mediaplatform::Data>::~PropertyCacheBase((_QWORD *)this + 1);
}

{
  *(_QWORD *)this = off_24C33A860;
  mlcore::PropertyCacheBase<long long,int,double,std::string,mediaplatform::Data>::~PropertyCacheBase((_QWORD *)this + 1);
  JUMPOUT(0x20BD27AFCLL);
}

double std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::TypedEntityClass<mlcore::ContainerItemPerson>::sharedPointer(void)::{lambda(void)#1} &&>>()
{
  uint64_t v0;
  double result;

  v0 = operator new();
  result = 0.0;
  *(_OWORD *)(v0 + 16) = 0u;
  *(_OWORD *)(v0 + 32) = 0u;
  *(_OWORD *)(v0 + 48) = 0u;
  *(_OWORD *)(v0 + 64) = 0u;
  *(_OWORD *)(v0 + 80) = 0u;
  *(_QWORD *)(v0 + 96) = 0;
  *(_DWORD *)(v0 + 104) = 1065353216;
  *(_OWORD *)(v0 + 112) = 0u;
  *(_OWORD *)(v0 + 128) = 0u;
  *(_DWORD *)(v0 + 144) = 1065353216;
  *(_QWORD *)v0 = &off_24C338A50;
  *(_QWORD *)(v0 + 8) = 850045863;
  mlcore::TypedEntityClass<mlcore::ContainerItemPerson>::sharedPointer(void)::__sharedPointer = v0;
  return result;
}

void mlcore::TypedEntityClass<mlcore::ContainerItemPerson>::~TypedEntityClass(mlcore::EntityClass *a1)
{
  mlcore::EntityClass::~EntityClass(a1);
  JUMPOUT(0x20BD27AFCLL);
}

uint64_t mlcore::TypedEntityClass<mlcore::ContainerItemPerson>::description(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
}

__n128 mlcore::TypedEntityClass<mlcore::ContainerItemPerson>::create@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, __n128 *a4@<X8>)
{
  char *v8;
  uint64_t v9;
  unint64_t *v10;
  uint64_t v11;
  __n128 result;
  __n128 v13;
  unint64_t v14[3];
  unint64_t *v15;
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  v8 = (char *)operator new(0x100uLL);
  *((_QWORD *)v8 + 1) = 0;
  *((_QWORD *)v8 + 2) = 0;
  *(_QWORD *)v8 = &off_24C33CEC0;
  *(_OWORD *)(v8 + 40) = 0u;
  *(_OWORD *)(v8 + 56) = 0u;
  *((_DWORD *)v8 + 18) = 1065353216;
  *((_OWORD *)v8 + 5) = 0u;
  *((_OWORD *)v8 + 6) = 0u;
  *((_DWORD *)v8 + 28) = 1065353216;
  *(_OWORD *)(v8 + 120) = 0u;
  *(_OWORD *)(v8 + 136) = 0u;
  *((_DWORD *)v8 + 38) = 1065353216;
  *((_OWORD *)v8 + 10) = 0u;
  *((_OWORD *)v8 + 11) = 0u;
  *((_DWORD *)v8 + 48) = 1065353216;
  *(_OWORD *)(v8 + 216) = 0u;
  *((_DWORD *)v8 + 58) = 1065353216;
  *((_QWORD *)v8 + 30) = &unk_24C3371E8;
  *((_QWORD *)v8 + 31) = a2;
  *(_OWORD *)(v8 + 200) = 0u;
  v9 = (uint64_t)(v8 + 200);
  *((_QWORD *)v8 + 4) = &off_24C3371C0;
  *((_QWORD *)v8 + 3) = &off_24C339D00;
  v13.n128_u64[0] = (unint64_t)(v8 + 24);
  v13.n128_u64[1] = (unint64_t)v8;
  v14[0] = (unint64_t)&off_24C33B140;
  v15 = v14;
  mlcore::PropertyCache::mergePropertiesFromCache((uint64_t)(v8 + 32), a3, (uint64_t)v14);
  v10 = v15;
  if (v15 == v14)
  {
    v11 = 4;
    v10 = v14;
    goto LABEL_5;
  }
  if (v15)
  {
    v11 = 5;
LABEL_5:
    (*(void (**)(void))(*v10 + 8 * v11))();
  }
  v14[0] = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 112))(a1);
  std::__hash_table<std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>,std::__unordered_map_hasher<mlcore::ModelProperty<long long> *,std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>,std::hash<mlcore::ModelProperty<long long> *>,std::equal_to<mlcore::ModelProperty<long long> *>,true>,std::__unordered_map_equal<mlcore::ModelProperty<long long> *,std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>,std::equal_to<mlcore::ModelProperty<long long> *>,std::hash<mlcore::ModelProperty<long long> *>,true>,std::allocator<std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>>>::__emplace_unique_key_args<mlcore::ModelProperty<long long> *,std::piecewise_construct_t const&,std::tuple<mlcore::ModelProperty<long long> * const&>,std::tuple<>>(v9, v14[0], v14)[3] = a2;
  result = v13;
  *a4 = v13;
  return result;
}

void sub_20A851924(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15)
{
  char *v15;
  char *v17;
  uint64_t v18;

  v17 = a15;
  if (a15 == v15)
  {
    v18 = 4;
    v17 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v18 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v17 + 8 * v18))();
LABEL_6:
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t mlcore::TypedEntityClass<mlcore::ContainerItemPerson>::name(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
}

uint64_t mlcore::TypedEntityClass<mlcore::ContainerItemPerson>::entityType()
{
  return 11;
}

BOOL mlcore::TypedEntityClass<mlcore::ContainerItemPerson>::isRevisionTrackable(uint64_t a1)
{
  return (*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1) != -1;
}

uint64_t mlcore::TypedEntityClass<mlcore::ContainerItemPerson>::isCloudUpdatable()
{
  return 0;
}

uint64_t mlcore::TypedEntityClass<mlcore::ContainerItemPerson>::databaseTable()
{
  return *(_QWORD *)mediaplatform::Singleton<mlcore::ContainerItemPersonTable>::sharedInstance();
}

void mlcore::TypedEntityClass<mlcore::ContainerItemPerson>::databaseTablesToDeleteFrom(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

void mlcore::TypedEntityClass<mlcore::ContainerItemPerson>::databaseTablesToInsertInto(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

uint64_t mlcore::TypedEntityClass<mlcore::ContainerItemPerson>::representativeItemPersistentIDProperty()
{
  return 0;
}

uint64_t mlcore::TypedEntityClass<mlcore::ContainerItemPerson>::trackForeignPersistentIDProperty()
{
  return 0;
}

uint64_t mlcore::TypedEntityClass<mlcore::ContainerItemPerson>::trackForeignOrderingProperty()
{
  return 0;
}

uint64_t mlcore::TypedEntityClass<mlcore::ContainerItemPerson>::sectionPropertyForOrderingProperty()
{
  return 0;
}

uint64_t mlcore::ContainerItemPersonPropertyPersistentID(mlcore *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&mlcore::ContainerItemPersonPropertyPersistentID(void)::once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&mlcore::ContainerItemPersonPropertyPersistentID(void)::once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ContainerItemPersonPropertyPersistentID(void)::$_0 &&>>);
  }
  return mlcore::ContainerItemPersonPropertyPersistentID(void)::property;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ContainerItemPersonPropertyPersistentID(void)::$_0 &&>>()
{
  uint64_t v0;
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  mlcore::ContainerItemPersonTable **v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  std::string *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  std::string *v19;
  __int128 v20;
  std::string v21;
  std::string __p;
  char v23;
  _QWORD v24[2];

  v0 = operator new();
  v1 = (_QWORD *)mediaplatform::Singleton<mlcore::ContainerItemPersonTable>::sharedInstance();
  v2 = (std::__shared_weak_count *)v1[1];
  v24[0] = *v1;
  v24[1] = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  v5 = (mlcore::ContainerItemPersonTable **)mediaplatform::Singleton<mlcore::ContainerItemPersonTable>::sharedInstance();
  mlcore::ContainerItemPersonTable::persistentIDColumn(*v5, (uint64_t)&__p);
  mlcore::DatabaseModelProperty<long long>::DatabaseModelProperty(v0, v24, (uint64_t)&__p);
  mlcore::ContainerItemPersonPropertyPersistentID(void)::property = v0;
  if (v23 < 0)
    operator delete((void *)__p.__r_.__value_.__l.__size_);
  if (v2)
  {
    v6 = (unint64_t *)&v2->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v8 = mlcore::ContainerItemPersonPropertyPersistentID(void)::property;
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  std::string::operator=((std::string *)(v8 + 40), &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v9 = mlcore::TypedEntityClass<mlcore::ContainerItemPerson>::sharedPointer();
  v10 = mlcore::ContainerItemPersonPropertyPersistentID(void)::property;
  v11 = mediaplatform::Singleton<mlcore::ContainerItemPersonTable>::sharedInstance();
  v12 = *(_QWORD *)v11;
  if (*(char *)(*(_QWORD *)v11 + 31) >= 0)
    v13 = *(unsigned __int8 *)(*(_QWORD *)v11 + 31);
  else
    v13 = *(_QWORD *)(*(_QWORD *)v11 + 16);
  v14 = &v21;
  std::string::basic_string[abi:ne180100]((uint64_t)&v21, v13 + 1);
  if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v14 = (std::string *)v21.__r_.__value_.__r.__words[0];
  if (v13)
  {
    v17 = *(char **)(v12 + 8);
    v16 = (char *)(v12 + 8);
    v15 = v17;
    if (v16[23] >= 0)
      v18 = v16;
    else
      v18 = v15;
    memmove(v14, v18, v13);
  }
  *(_WORD *)((char *)&v14->__r_.__value_.__l.__data_ + v13) = 46;
  v19 = std::string::append(&v21, "container_item_person_pid");
  v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  __p.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  mlcore::EntityClass::setPropertyForName(v9, v10, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
}

void sub_20A851C30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

mlcore::ContainerItemPersonTable *_ZNSt3__115allocate_sharedB8ne180100IN6mlcore24ContainerItemPersonTableENS_9allocatorIS2_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(mlcore::ContainerItemPersonTable **a1)
{
  _QWORD *v2;
  mlcore::ContainerItemPersonTable *result;

  v2 = operator new(0x188uLL);
  v2[1] = 0;
  v2[2] = 0;
  *v2 = &off_24C33D128;
  result = mlcore::ContainerItemPersonTable::ContainerItemPersonTable((mlcore::ContainerItemPersonTable *)(v2 + 3));
  *a1 = result;
  a1[1] = (mlcore::ContainerItemPersonTable *)v2;
  return result;
}

void sub_20A851D2C(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<mlcore::ContainerItemPersonTable>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C33D128;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<mlcore::ContainerItemPersonTable>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C33D128;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x20BD27AFCLL);
}

uint64_t std::__shared_ptr_emplace<mlcore::ContainerItemPersonTable>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__shared_ptr_emplace<mlcore::ContainerItemPerson>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C33CEC0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<mlcore::ContainerItemPerson>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C33CEC0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x20BD27AFCLL);
}

uint64_t std::__shared_ptr_emplace<mlcore::ContainerItemPerson>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t mlcore::ContainerItemPersonPropertyContainerItemPersistentID(mlcore *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&mlcore::ContainerItemPersonPropertyContainerItemPersistentID(void)::once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&mlcore::ContainerItemPersonPropertyContainerItemPersistentID(void)::once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ContainerItemPersonPropertyContainerItemPersistentID(void)::$_0 &&>>);
  }
  return mlcore::ContainerItemPersonPropertyContainerItemPersistentID(void)::property;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ContainerItemPersonPropertyContainerItemPersistentID(void)::$_0 &&>>()
{
  uint64_t v0;
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  mlcore::ContainerItemPersonTable **v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  std::string *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  std::string *v19;
  __int128 v20;
  std::string v21;
  std::string __p;
  char v23;
  _QWORD v24[2];

  v0 = operator new();
  v1 = (_QWORD *)mediaplatform::Singleton<mlcore::ContainerItemPersonTable>::sharedInstance();
  v2 = (std::__shared_weak_count *)v1[1];
  v24[0] = *v1;
  v24[1] = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  v5 = (mlcore::ContainerItemPersonTable **)mediaplatform::Singleton<mlcore::ContainerItemPersonTable>::sharedInstance();
  mlcore::ContainerItemPersonTable::containerItemPersistentIDColumn(*v5, (uint64_t)&__p);
  mlcore::DatabaseModelProperty<long long>::DatabaseModelProperty(v0, v24, (uint64_t)&__p);
  mlcore::ContainerItemPersonPropertyContainerItemPersistentID(void)::property = v0;
  if (v23 < 0)
    operator delete((void *)__p.__r_.__value_.__l.__size_);
  if (v2)
  {
    v6 = (unint64_t *)&v2->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v8 = mlcore::ContainerItemPersonPropertyContainerItemPersistentID(void)::property;
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  std::string::operator=((std::string *)(v8 + 40), &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v9 = mlcore::TypedEntityClass<mlcore::ContainerItemPerson>::sharedPointer();
  v10 = mlcore::ContainerItemPersonPropertyContainerItemPersistentID(void)::property;
  v11 = mediaplatform::Singleton<mlcore::ContainerItemPersonTable>::sharedInstance();
  v12 = *(_QWORD *)v11;
  if (*(char *)(*(_QWORD *)v11 + 31) >= 0)
    v13 = *(unsigned __int8 *)(*(_QWORD *)v11 + 31);
  else
    v13 = *(_QWORD *)(*(_QWORD *)v11 + 16);
  v14 = &v21;
  std::string::basic_string[abi:ne180100]((uint64_t)&v21, v13 + 1);
  if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v14 = (std::string *)v21.__r_.__value_.__r.__words[0];
  if (v13)
  {
    v17 = *(char **)(v12 + 8);
    v16 = (char *)(v12 + 8);
    v15 = v17;
    if (v16[23] >= 0)
      v18 = v16;
    else
      v18 = v15;
    memmove(v14, v18, v13);
  }
  *(_WORD *)((char *)&v14->__r_.__value_.__l.__data_ + v13) = 46;
  v19 = std::string::append(&v21, "container_item_pid");
  v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  __p.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  mlcore::EntityClass::setPropertyForName(v9, v10, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
}

void sub_20A852014(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ContainerItemPersonPropertyPersonPersistentID(void)::$_0 &&>>()
{
  uint64_t v0;
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  mlcore::ContainerItemPersonTable **v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  std::string *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  std::string *v19;
  __int128 v20;
  std::string v21;
  std::string __p;
  char v23;
  _QWORD v24[2];

  v0 = operator new();
  v1 = (_QWORD *)mediaplatform::Singleton<mlcore::ContainerItemPersonTable>::sharedInstance();
  v2 = (std::__shared_weak_count *)v1[1];
  v24[0] = *v1;
  v24[1] = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  v5 = (mlcore::ContainerItemPersonTable **)mediaplatform::Singleton<mlcore::ContainerItemPersonTable>::sharedInstance();
  mlcore::ContainerItemPersonTable::personPersistentIDColumn(*v5, (uint64_t)&__p);
  mlcore::DatabaseModelProperty<long long>::DatabaseModelProperty(v0, v24, (uint64_t)&__p);
  mlcore::ContainerItemPersonPropertyPersonPersistentID(void)::property = v0;
  if (v23 < 0)
    operator delete((void *)__p.__r_.__value_.__l.__size_);
  if (v2)
  {
    v6 = (unint64_t *)&v2->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v8 = mlcore::ContainerItemPersonPropertyPersonPersistentID(void)::property;
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  std::string::operator=((std::string *)(v8 + 40), &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v9 = mlcore::TypedEntityClass<mlcore::ContainerItemPerson>::sharedPointer();
  v10 = mlcore::ContainerItemPersonPropertyPersonPersistentID(void)::property;
  v11 = mediaplatform::Singleton<mlcore::ContainerItemPersonTable>::sharedInstance();
  v12 = *(_QWORD *)v11;
  if (*(char *)(*(_QWORD *)v11 + 31) >= 0)
    v13 = *(unsigned __int8 *)(*(_QWORD *)v11 + 31);
  else
    v13 = *(_QWORD *)(*(_QWORD *)v11 + 16);
  v14 = &v21;
  std::string::basic_string[abi:ne180100]((uint64_t)&v21, v13 + 1);
  if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v14 = (std::string *)v21.__r_.__value_.__r.__words[0];
  if (v13)
  {
    v17 = *(char **)(v12 + 8);
    v16 = (char *)(v12 + 8);
    v15 = v17;
    if (v16[23] >= 0)
      v18 = v16;
    else
      v18 = v15;
    memmove(v14, v18, v13);
  }
  *(_WORD *)((char *)&v14->__r_.__value_.__l.__data_ + v13) = 46;
  v19 = std::string::append(&v21, "person_pid");
  v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  __p.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  mlcore::EntityClass::setPropertyForName(v9, v10, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
}

void sub_20A8522A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

uint64_t mlcore::ContainerItemPerson::containerItemPersistentID(mlcore::ContainerItemPerson *this)
{
  unint64_t v2;

  v2 = mlcore::ContainerItemPersonPropertyContainerItemPersistentID(this);
  return mlcore::Entity::valueForProperty<long long>((uint64_t)this, v2);
}

_QWORD *mlcore::ContainerItemPerson::setContainerItemPersistentID(mlcore::ContainerItemPerson *this, uint64_t a2)
{
  _QWORD *result;
  unint64_t v5;

  v5 = mlcore::ContainerItemPersonPropertyContainerItemPersistentID(this);
  result = std::__hash_table<std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>,std::__unordered_map_hasher<mlcore::ModelProperty<long long> *,std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>,std::hash<mlcore::ModelProperty<long long> *>,std::equal_to<mlcore::ModelProperty<long long> *>,true>,std::__unordered_map_equal<mlcore::ModelProperty<long long> *,std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>,std::equal_to<mlcore::ModelProperty<long long> *>,std::hash<mlcore::ModelProperty<long long> *>,true>,std::allocator<std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>>>::__emplace_unique_key_args<mlcore::ModelProperty<long long> *,std::piecewise_construct_t const&,std::tuple<mlcore::ModelProperty<long long> * const&>,std::tuple<>>((uint64_t)this + 176, v5, &v5);
  result[3] = a2;
  return result;
}

uint64_t mlcore::ContainerItemPerson::personPersistentID(mlcore::ContainerItemPerson *this)
{
  unint64_t v2;

  v2 = mlcore::ContainerItemPersonPropertyPersonPersistentID(this);
  return mlcore::Entity::valueForProperty<long long>((uint64_t)this, v2);
}

_QWORD *mlcore::ContainerItemPerson::setPersonItemPersistentID(mlcore::ContainerItemPerson *this, uint64_t a2)
{
  _QWORD *result;
  unint64_t v5;

  v5 = mlcore::ContainerItemPersonPropertyPersonPersistentID(this);
  result = std::__hash_table<std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>,std::__unordered_map_hasher<mlcore::ModelProperty<long long> *,std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>,std::hash<mlcore::ModelProperty<long long> *>,std::equal_to<mlcore::ModelProperty<long long> *>,true>,std::__unordered_map_equal<mlcore::ModelProperty<long long> *,std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>,std::equal_to<mlcore::ModelProperty<long long> *>,std::hash<mlcore::ModelProperty<long long> *>,true>,std::allocator<std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>>>::__emplace_unique_key_args<mlcore::ModelProperty<long long> *,std::piecewise_construct_t const&,std::tuple<mlcore::ModelProperty<long long> * const&>,std::tuple<>>((uint64_t)this + 176, v5, &v5);
  result[3] = a2;
  return result;
}

void mlcore::ItemArtist::~ItemArtist(mlcore::ItemArtist *this)
{
  *(_QWORD *)this = off_24C33A860;
  mlcore::PropertyCacheBase<long long,int,double,std::string,mediaplatform::Data>::~PropertyCacheBase((_QWORD *)this + 1);
}

{
  *(_QWORD *)this = off_24C33A860;
  mlcore::PropertyCacheBase<long long,int,double,std::string,mediaplatform::Data>::~PropertyCacheBase((_QWORD *)this + 1);
  JUMPOUT(0x20BD27AFCLL);
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemArtistPropertyPersistentID(void)::$_0 &&>>()
{
  uint64_t v0;
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  mlcore::ItemArtistTable **v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  std::string *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  std::string *v19;
  __int128 v20;
  std::string v21;
  std::string __p;
  char v23;
  _QWORD v24[2];

  v0 = operator new();
  v1 = (_QWORD *)mediaplatform::Singleton<mlcore::ItemArtistTable>::sharedInstance();
  v2 = (std::__shared_weak_count *)v1[1];
  v24[0] = *v1;
  v24[1] = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  v5 = (mlcore::ItemArtistTable **)mediaplatform::Singleton<mlcore::ItemArtistTable>::sharedInstance();
  mlcore::ItemArtistTable::persistentIDColumn(*v5, (uint64_t)&__p);
  mlcore::DatabaseModelProperty<long long>::DatabaseModelProperty(v0, v24, (uint64_t)&__p);
  mlcore::ItemArtistPropertyPersistentID(void)::property = v0;
  if (v23 < 0)
    operator delete((void *)__p.__r_.__value_.__l.__size_);
  if (v2)
  {
    v6 = (unint64_t *)&v2->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v8 = mlcore::ItemArtistPropertyPersistentID(void)::property;
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  std::string::operator=((std::string *)(v8 + 40), &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v9 = mlcore::TypedEntityClass<mlcore::ItemArtist>::sharedPointer();
  v10 = mlcore::ItemArtistPropertyPersistentID(void)::property;
  v11 = mediaplatform::Singleton<mlcore::ItemArtistTable>::sharedInstance();
  v12 = *(_QWORD *)v11;
  if (*(char *)(*(_QWORD *)v11 + 31) >= 0)
    v13 = *(unsigned __int8 *)(*(_QWORD *)v11 + 31);
  else
    v13 = *(_QWORD *)(*(_QWORD *)v11 + 16);
  v14 = &v21;
  std::string::basic_string[abi:ne180100]((uint64_t)&v21, v13 + 1);
  if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v14 = (std::string *)v21.__r_.__value_.__r.__words[0];
  if (v13)
  {
    v17 = *(char **)(v12 + 8);
    v16 = (char *)(v12 + 8);
    v15 = v17;
    if (v16[23] >= 0)
      v18 = v16;
    else
      v18 = v15;
    memmove(v14, v18, v13);
  }
  *(_WORD *)((char *)&v14->__r_.__value_.__l.__data_ + v13) = 46;
  v19 = std::string::append(&v21, "persistentID");
  v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  __p.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  mlcore::EntityClass::setPropertyForName(v9, v10, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
}

void sub_20A852684(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemArtistPropertyStoreID(void)::$_0 &&>>()
{
  uint64_t v0;
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  mlcore::ItemArtistTable **v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  std::string *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  std::string *v19;
  __int128 v20;
  std::string v21;
  std::string __p;
  char v23;
  _QWORD v24[2];

  v0 = operator new();
  v1 = (_QWORD *)mediaplatform::Singleton<mlcore::ItemArtistTable>::sharedInstance();
  v2 = (std::__shared_weak_count *)v1[1];
  v24[0] = *v1;
  v24[1] = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  v5 = (mlcore::ItemArtistTable **)mediaplatform::Singleton<mlcore::ItemArtistTable>::sharedInstance();
  mlcore::ItemArtistTable::storeIDColumn(*v5, (uint64_t)&__p);
  mlcore::DatabaseModelProperty<long long>::DatabaseModelProperty(v0, v24, (uint64_t)&__p);
  mlcore::ItemArtistPropertyStoreID(void)::property = v0;
  if (v23 < 0)
    operator delete((void *)__p.__r_.__value_.__l.__size_);
  if (v2)
  {
    v6 = (unint64_t *)&v2->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v8 = mlcore::ItemArtistPropertyStoreID(void)::property;
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  std::string::operator=((std::string *)(v8 + 40), &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v9 = mlcore::TypedEntityClass<mlcore::ItemArtist>::sharedPointer();
  v10 = mlcore::ItemArtistPropertyStoreID(void)::property;
  v11 = mediaplatform::Singleton<mlcore::ItemArtistTable>::sharedInstance();
  v12 = *(_QWORD *)v11;
  if (*(char *)(*(_QWORD *)v11 + 31) >= 0)
    v13 = *(unsigned __int8 *)(*(_QWORD *)v11 + 31);
  else
    v13 = *(_QWORD *)(*(_QWORD *)v11 + 16);
  v14 = &v21;
  std::string::basic_string[abi:ne180100]((uint64_t)&v21, v13 + 1);
  if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v14 = (std::string *)v21.__r_.__value_.__r.__words[0];
  if (v13)
  {
    v17 = *(char **)(v12 + 8);
    v16 = (char *)(v12 + 8);
    v15 = v17;
    if (v16[23] >= 0)
      v18 = v16;
    else
      v18 = v15;
    memmove(v14, v18, v13);
  }
  *(_WORD *)((char *)&v14->__r_.__value_.__l.__data_ + v13) = 46;
  v19 = std::string::append(&v21, "storeID");
  v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  __p.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  mlcore::EntityClass::setPropertyForName(v9, v10, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
}

void sub_20A852914(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemArtistPropertyName(void)::$_0 &&>>()
{
  uint64_t v0;
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  mlcore::ItemArtistTable **v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  std::string *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  std::string *v19;
  __int128 v20;
  std::string v21;
  std::string __str;
  _QWORD v23[2];

  v0 = operator new();
  v1 = (_QWORD *)mediaplatform::Singleton<mlcore::ItemArtistTable>::sharedInstance();
  v2 = (std::__shared_weak_count *)v1[1];
  v23[0] = *v1;
  v23[1] = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  v5 = (mlcore::ItemArtistTable **)mediaplatform::Singleton<mlcore::ItemArtistTable>::sharedInstance();
  mlcore::ItemArtistTable::nameColumn(*v5, (uint64_t)&__str);
  mlcore::DatabaseModelProperty<std::string>::DatabaseModelProperty(v0, v23, (uint64_t)&__str);
  mlcore::ItemArtistPropertyName(void)::property = v0;
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&__str);
  if (v2)
  {
    v6 = (unint64_t *)&v2->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v8 = mlcore::ItemArtistPropertyName(void)::property;
  std::string::basic_string[abi:ne180100]<0>(&__str, "");
  std::string::operator=((std::string *)(v8 + 40), &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  v9 = mlcore::TypedEntityClass<mlcore::ItemArtist>::sharedPointer();
  v10 = mlcore::ItemArtistPropertyName(void)::property;
  v11 = mediaplatform::Singleton<mlcore::ItemArtistTable>::sharedInstance();
  v12 = *(_QWORD *)v11;
  if (*(char *)(*(_QWORD *)v11 + 31) >= 0)
    v13 = *(unsigned __int8 *)(*(_QWORD *)v11 + 31);
  else
    v13 = *(_QWORD *)(*(_QWORD *)v11 + 16);
  v14 = &v21;
  std::string::basic_string[abi:ne180100]((uint64_t)&v21, v13 + 1);
  if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v14 = (std::string *)v21.__r_.__value_.__r.__words[0];
  if (v13)
  {
    v17 = *(char **)(v12 + 8);
    v16 = (char *)(v12 + 8);
    v15 = v17;
    if (v16[23] >= 0)
      v18 = v16;
    else
      v18 = v15;
    memmove(v14, v18, v13);
  }
  *(_WORD *)((char *)&v14->__r_.__value_.__l.__data_ + v13) = 46;
  v19 = std::string::append(&v21, "name");
  v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  __str.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  mlcore::EntityClass::setPropertyForName(v9, v10, &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
}

void sub_20A852B9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

uint64_t mlcore::ItemArtistPropertySortName(mlcore *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&mlcore::ItemArtistPropertySortName(void)::once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&mlcore::ItemArtistPropertySortName(void)::once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemArtistPropertySortName(void)::$_0 &&>>);
  }
  return mlcore::ItemArtistPropertySortName(void)::property;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemArtistPropertySortName(void)::$_0 &&>>()
{
  uint64_t v0;
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  mlcore::ItemArtistTable **v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  std::string *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  std::string *v19;
  __int128 v20;
  std::string v21;
  std::string __str;
  _QWORD v23[2];

  v0 = operator new();
  v1 = (_QWORD *)mediaplatform::Singleton<mlcore::ItemArtistTable>::sharedInstance();
  v2 = (std::__shared_weak_count *)v1[1];
  v23[0] = *v1;
  v23[1] = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  v5 = (mlcore::ItemArtistTable **)mediaplatform::Singleton<mlcore::ItemArtistTable>::sharedInstance();
  mlcore::ItemArtistTable::sortNameColumn(*v5, (uint64_t)&__str);
  mlcore::DatabaseModelProperty<std::string>::DatabaseModelProperty(v0, v23, (uint64_t)&__str);
  mlcore::ItemArtistPropertySortName(void)::property = v0;
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&__str);
  if (v2)
  {
    v6 = (unint64_t *)&v2->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v8 = mlcore::ItemArtistPropertySortName(void)::property;
  std::string::basic_string[abi:ne180100]<0>(&__str, "");
  std::string::operator=((std::string *)(v8 + 40), &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  v9 = mlcore::TypedEntityClass<mlcore::ItemArtist>::sharedPointer();
  v10 = mlcore::ItemArtistPropertySortName(void)::property;
  v11 = mediaplatform::Singleton<mlcore::ItemArtistTable>::sharedInstance();
  v12 = *(_QWORD *)v11;
  if (*(char *)(*(_QWORD *)v11 + 31) >= 0)
    v13 = *(unsigned __int8 *)(*(_QWORD *)v11 + 31);
  else
    v13 = *(_QWORD *)(*(_QWORD *)v11 + 16);
  v14 = &v21;
  std::string::basic_string[abi:ne180100]((uint64_t)&v21, v13 + 1);
  if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v14 = (std::string *)v21.__r_.__value_.__r.__words[0];
  if (v13)
  {
    v17 = *(char **)(v12 + 8);
    v16 = (char *)(v12 + 8);
    v15 = v17;
    if (v16[23] >= 0)
      v18 = v16;
    else
      v18 = v15;
    memmove(v14, v18, v13);
  }
  *(_WORD *)((char *)&v14->__r_.__value_.__l.__data_ + v13) = 46;
  v19 = std::string::append(&v21, "sortName");
  v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  __str.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  mlcore::EntityClass::setPropertyForName(v9, v10, &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
}

void sub_20A852E78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemArtistPropertyHasName(void)::$_0 &&>>()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  std::__shared_weak_count *v3;
  unint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  std::string __str;

  v0 = operator new();
  v1 = mlcore::ItemArtistPropertyOrder((mlcore *)v0);
  v2 = (char *)operator new(0x48uLL);
  v3 = (std::__shared_weak_count *)v2;
  *(_OWORD *)(v2 + 8) = 0u;
  v4 = (unint64_t *)(v2 + 8);
  *(_QWORD *)v2 = &off_24C33CE88;
  *((_QWORD *)v2 + 4) = v1;
  *((_QWORD *)v2 + 5) = 0x100000000;
  *((_QWORD *)v2 + 3) = &unk_24C339CA8;
  *((_QWORD *)v2 + 6) = 0;
  *(_OWORD *)(v2 + 56) = 0u;
  *(_OWORD *)(v0 + 16) = 0u;
  *(_OWORD *)(v0 + 32) = 0u;
  *(_OWORD *)(v0 + 48) = 0u;
  *(_QWORD *)v0 = &off_24C3398B8;
  *(_QWORD *)(v0 + 64) = v2 + 24;
  *(_QWORD *)(v0 + 72) = v2;
  do
    v5 = __ldxr(v4);
  while (__stxr(v5 + 1, v4));
  mlcore::ItemArtistPropertyHasName(void)::property = v0;
  do
    v6 = __ldaxr(v4);
  while (__stlxr(v6 - 1, v4));
  if (!v6)
  {
    (*(void (**)(char *))(*(_QWORD *)v2 + 16))(v2);
    std::__shared_weak_count::__release_weak(v3);
  }
  v7 = mlcore::ItemArtistPropertyHasName(void)::property;
  std::string::basic_string[abi:ne180100]<0>(&__str, "has_name");
  std::string::operator=((std::string *)(v7 + 40), &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  v8 = mlcore::TypedEntityClass<mlcore::ItemArtist>::sharedPointer();
  v9 = mlcore::ItemArtistPropertyHasName(void)::property;
  std::string::basic_string[abi:ne180100]<0>(&__str, "hasName");
  mlcore::EntityClass::setPropertyForName(v8, v9, &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
}

void sub_20A853090(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemArtistPropertyRepresentativeItemPersistentID(void)::$_0 &&>>()
{
  uint64_t v0;
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  mlcore::ItemArtistTable **v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  std::string *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  std::string *v19;
  __int128 v20;
  std::string v21;
  std::string __p;
  char v23;
  _QWORD v24[2];

  v0 = operator new();
  v1 = (_QWORD *)mediaplatform::Singleton<mlcore::ItemArtistTable>::sharedInstance();
  v2 = (std::__shared_weak_count *)v1[1];
  v24[0] = *v1;
  v24[1] = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  v5 = (mlcore::ItemArtistTable **)mediaplatform::Singleton<mlcore::ItemArtistTable>::sharedInstance();
  mlcore::ItemArtistTable::representativeItemPersistentIDColumn(*v5, (uint64_t)&__p);
  mlcore::DatabaseModelProperty<long long>::DatabaseModelProperty(v0, v24, (uint64_t)&__p);
  mlcore::ItemArtistPropertyRepresentativeItemPersistentID(void)::property = v0;
  if (v23 < 0)
    operator delete((void *)__p.__r_.__value_.__l.__size_);
  if (v2)
  {
    v6 = (unint64_t *)&v2->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v8 = mlcore::ItemArtistPropertyRepresentativeItemPersistentID(void)::property;
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  std::string::operator=((std::string *)(v8 + 40), &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v9 = mlcore::TypedEntityClass<mlcore::ItemArtist>::sharedPointer();
  v10 = mlcore::ItemArtistPropertyRepresentativeItemPersistentID(void)::property;
  v11 = mediaplatform::Singleton<mlcore::ItemArtistTable>::sharedInstance();
  v12 = *(_QWORD *)v11;
  if (*(char *)(*(_QWORD *)v11 + 31) >= 0)
    v13 = *(unsigned __int8 *)(*(_QWORD *)v11 + 31);
  else
    v13 = *(_QWORD *)(*(_QWORD *)v11 + 16);
  v14 = &v21;
  std::string::basic_string[abi:ne180100]((uint64_t)&v21, v13 + 1);
  if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v14 = (std::string *)v21.__r_.__value_.__r.__words[0];
  if (v13)
  {
    v17 = *(char **)(v12 + 8);
    v16 = (char *)(v12 + 8);
    v15 = v17;
    if (v16[23] >= 0)
      v18 = v16;
    else
      v18 = v15;
    memmove(v14, v18, v13);
  }
  *(_WORD *)((char *)&v14->__r_.__value_.__l.__data_ + v13) = 46;
  v19 = std::string::append(&v21, "representativeItem");
  v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  __p.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  mlcore::EntityClass::setPropertyForName(v9, v10, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
}

void sub_20A8532A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemArtistPropertySeriesName(void)::$_0 &&>>()
{
  uint64_t v0;
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  mlcore::ItemArtistTable **v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  std::string *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  std::string *v19;
  __int128 v20;
  std::string v21;
  std::string __str;
  _QWORD v23[2];

  v0 = operator new();
  v1 = (_QWORD *)mediaplatform::Singleton<mlcore::ItemArtistTable>::sharedInstance();
  v2 = (std::__shared_weak_count *)v1[1];
  v23[0] = *v1;
  v23[1] = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  v5 = (mlcore::ItemArtistTable **)mediaplatform::Singleton<mlcore::ItemArtistTable>::sharedInstance();
  mlcore::ItemArtistTable::seriesNameColumn(*v5, (uint64_t)&__str);
  mlcore::DatabaseModelProperty<std::string>::DatabaseModelProperty(v0, v23, (uint64_t)&__str);
  mlcore::ItemArtistPropertySeriesName(void)::property = v0;
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&__str);
  if (v2)
  {
    v6 = (unint64_t *)&v2->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v8 = mlcore::ItemArtistPropertySeriesName(void)::property;
  std::string::basic_string[abi:ne180100]<0>(&__str, "");
  std::string::operator=((std::string *)(v8 + 40), &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  v9 = mlcore::TypedEntityClass<mlcore::ItemArtist>::sharedPointer();
  v10 = mlcore::ItemArtistPropertySeriesName(void)::property;
  v11 = mediaplatform::Singleton<mlcore::ItemArtistTable>::sharedInstance();
  v12 = *(_QWORD *)v11;
  if (*(char *)(*(_QWORD *)v11 + 31) >= 0)
    v13 = *(unsigned __int8 *)(*(_QWORD *)v11 + 31);
  else
    v13 = *(_QWORD *)(*(_QWORD *)v11 + 16);
  v14 = &v21;
  std::string::basic_string[abi:ne180100]((uint64_t)&v21, v13 + 1);
  if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v14 = (std::string *)v21.__r_.__value_.__r.__words[0];
  if (v13)
  {
    v17 = *(char **)(v12 + 8);
    v16 = (char *)(v12 + 8);
    v15 = v17;
    if (v16[23] >= 0)
      v18 = v16;
    else
      v18 = v15;
    memmove(v14, v18, v13);
  }
  *(_WORD *)((char *)&v14->__r_.__value_.__l.__data_ + v13) = 46;
  v19 = std::string::append(&v21, "seriesName");
  v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  __str.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  mlcore::EntityClass::setPropertyForName(v9, v10, &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
}

void sub_20A853530(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

uint64_t mlcore::ItemArtistPropertySortSeriesName(mlcore *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&mlcore::ItemArtistPropertySortSeriesName(void)::once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&mlcore::ItemArtistPropertySortSeriesName(void)::once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemArtistPropertySortSeriesName(void)::$_0 &&>>);
  }
  return mlcore::ItemArtistPropertySortSeriesName(void)::property;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemArtistPropertySortSeriesName(void)::$_0 &&>>()
{
  uint64_t v0;
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  mlcore::ItemArtistTable **v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  std::string *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  std::string *v19;
  __int128 v20;
  std::string v21;
  std::string __str;
  _QWORD v23[2];

  v0 = operator new();
  v1 = (_QWORD *)mediaplatform::Singleton<mlcore::ItemArtistTable>::sharedInstance();
  v2 = (std::__shared_weak_count *)v1[1];
  v23[0] = *v1;
  v23[1] = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  v5 = (mlcore::ItemArtistTable **)mediaplatform::Singleton<mlcore::ItemArtistTable>::sharedInstance();
  mlcore::ItemArtistTable::sortSeriesNameColumn(*v5, (uint64_t)&__str);
  mlcore::DatabaseModelProperty<std::string>::DatabaseModelProperty(v0, v23, (uint64_t)&__str);
  mlcore::ItemArtistPropertySortSeriesName(void)::property = v0;
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&__str);
  if (v2)
  {
    v6 = (unint64_t *)&v2->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v8 = mlcore::ItemArtistPropertySortSeriesName(void)::property;
  std::string::basic_string[abi:ne180100]<0>(&__str, "");
  std::string::operator=((std::string *)(v8 + 40), &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  v9 = mlcore::TypedEntityClass<mlcore::ItemArtist>::sharedPointer();
  v10 = mlcore::ItemArtistPropertySortSeriesName(void)::property;
  v11 = mediaplatform::Singleton<mlcore::ItemArtistTable>::sharedInstance();
  v12 = *(_QWORD *)v11;
  if (*(char *)(*(_QWORD *)v11 + 31) >= 0)
    v13 = *(unsigned __int8 *)(*(_QWORD *)v11 + 31);
  else
    v13 = *(_QWORD *)(*(_QWORD *)v11 + 16);
  v14 = &v21;
  std::string::basic_string[abi:ne180100]((uint64_t)&v21, v13 + 1);
  if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v14 = (std::string *)v21.__r_.__value_.__r.__words[0];
  if (v13)
  {
    v17 = *(char **)(v12 + 8);
    v16 = (char *)(v12 + 8);
    v15 = v17;
    if (v16[23] >= 0)
      v18 = v16;
    else
      v18 = v15;
    memmove(v14, v18, v13);
  }
  *(_WORD *)((char *)&v14->__r_.__value_.__l.__data_ + v13) = 46;
  v19 = std::string::append(&v21, "sortSeriesName");
  v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  __str.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  mlcore::EntityClass::setPropertyForName(v9, v10, &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
}

void sub_20A85380C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

uint64_t mlcore::ItemArtistPropertyGroupingKey(mlcore *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&mlcore::ItemArtistPropertyGroupingKey(void)::once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&mlcore::ItemArtistPropertyGroupingKey(void)::once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemArtistPropertyGroupingKey(void)::$_0 &&>>);
  }
  return mlcore::ItemArtistPropertyGroupingKey(void)::property;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemArtistPropertyGroupingKey(void)::$_0 &&>>()
{
  uint64_t v0;
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  mlcore::ItemArtistTable **v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  std::string *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  std::string *v19;
  __int128 v20;
  std::string v21;
  std::string __str;
  _QWORD v23[2];

  v0 = operator new();
  v1 = (_QWORD *)mediaplatform::Singleton<mlcore::ItemArtistTable>::sharedInstance();
  v2 = (std::__shared_weak_count *)v1[1];
  v23[0] = *v1;
  v23[1] = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  v5 = (mlcore::ItemArtistTable **)mediaplatform::Singleton<mlcore::ItemArtistTable>::sharedInstance();
  mlcore::ItemArtistTable::groupingKeyColumn(*v5, (uint64_t)&__str);
  mlcore::DatabaseModelProperty<mediaplatform::Data>::DatabaseModelProperty(v0, v23, (uint64_t)&__str);
  mlcore::ItemArtistPropertyGroupingKey(void)::property = v0;
  mediaplatform::DatabaseColumn<mediaplatform::Data>::~DatabaseColumn((uint64_t)&__str);
  if (v2)
  {
    v6 = (unint64_t *)&v2->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v8 = mlcore::ItemArtistPropertyGroupingKey(void)::property;
  std::string::basic_string[abi:ne180100]<0>(&__str, "");
  std::string::operator=((std::string *)(v8 + 40), &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  v9 = mlcore::TypedEntityClass<mlcore::ItemArtist>::sharedPointer();
  v10 = mlcore::ItemArtistPropertyGroupingKey(void)::property;
  v11 = mediaplatform::Singleton<mlcore::ItemArtistTable>::sharedInstance();
  v12 = *(_QWORD *)v11;
  if (*(char *)(*(_QWORD *)v11 + 31) >= 0)
    v13 = *(unsigned __int8 *)(*(_QWORD *)v11 + 31);
  else
    v13 = *(_QWORD *)(*(_QWORD *)v11 + 16);
  v14 = &v21;
  std::string::basic_string[abi:ne180100]((uint64_t)&v21, v13 + 1);
  if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v14 = (std::string *)v21.__r_.__value_.__r.__words[0];
  if (v13)
  {
    v17 = *(char **)(v12 + 8);
    v16 = (char *)(v12 + 8);
    v15 = v17;
    if (v16[23] >= 0)
      v18 = v16;
    else
      v18 = v15;
    memmove(v14, v18, v13);
  }
  *(_WORD *)((char *)&v14->__r_.__value_.__l.__data_ + v13) = 46;
  v19 = std::string::append(&v21, "groupingKey");
  v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  __str.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  mlcore::EntityClass::setPropertyForName(v9, v10, &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
}

void sub_20A853AE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemArtistPropertyClassicalExperienceAvailable(void)::$_0 &&>>()
{
  uint64_t v0;
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  mlcore::ItemArtistTable **v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  std::string *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  std::string *v19;
  __int128 v20;
  std::string v21;
  std::string __p;
  char v23;
  _QWORD v24[2];

  v0 = operator new();
  v1 = (_QWORD *)mediaplatform::Singleton<mlcore::ItemArtistTable>::sharedInstance();
  v2 = (std::__shared_weak_count *)v1[1];
  v24[0] = *v1;
  v24[1] = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  v5 = (mlcore::ItemArtistTable **)mediaplatform::Singleton<mlcore::ItemArtistTable>::sharedInstance();
  mlcore::ItemArtistTable::classicalExperienceAvailableColumn(*v5, (uint64_t)&__p);
  mlcore::DatabaseModelProperty<int>::DatabaseModelProperty(v0, v24, (uint64_t)&__p);
  mlcore::ItemArtistPropertyClassicalExperienceAvailable(void)::property = v0;
  if (v23 < 0)
    operator delete((void *)__p.__r_.__value_.__l.__size_);
  if (v2)
  {
    v6 = (unint64_t *)&v2->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v8 = mlcore::ItemArtistPropertyClassicalExperienceAvailable(void)::property;
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  std::string::operator=((std::string *)(v8 + 40), &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v9 = mlcore::TypedEntityClass<mlcore::ItemArtist>::sharedPointer();
  v10 = mlcore::ItemArtistPropertyClassicalExperienceAvailable(void)::property;
  v11 = mediaplatform::Singleton<mlcore::ItemArtistTable>::sharedInstance();
  v12 = *(_QWORD *)v11;
  if (*(char *)(*(_QWORD *)v11 + 31) >= 0)
    v13 = *(unsigned __int8 *)(*(_QWORD *)v11 + 31);
  else
    v13 = *(_QWORD *)(*(_QWORD *)v11 + 16);
  v14 = &v21;
  std::string::basic_string[abi:ne180100]((uint64_t)&v21, v13 + 1);
  if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v14 = (std::string *)v21.__r_.__value_.__r.__words[0];
  if (v13)
  {
    v17 = *(char **)(v12 + 8);
    v16 = (char *)(v12 + 8);
    v15 = v17;
    if (v16[23] >= 0)
      v18 = v16;
    else
      v18 = v15;
    memmove(v14, v18, v13);
  }
  *(_WORD *)((char *)&v14->__r_.__value_.__l.__data_ + v13) = 46;
  v19 = std::string::append(&v21, "classicalExperienceAvailable");
  v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  __p.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  mlcore::EntityClass::setPropertyForName(v9, v10, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
}

void sub_20A853D70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

uint64_t mlcore::ItemArtistPropertyOrderSection(mlcore *this)
{
  mlcore *v1;
  uint64_t v2;
  uint64_t v4[2];

  v1 = (mlcore *)mlcore::ItemArtistPropertyRepresentativeItemPersistentID(this);
  v2 = mlcore::ItemPropertyArtistOrderSection(v1);
  v4[0] = 0;
  v4[1] = 0;
  return mlcore::GetForeignProperty<int>((uint64_t)v1, v2, v4);
}

void sub_20A853E6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

double mlcore::ItemArtist::ItemArtist(mlcore::ItemArtist *this, uint64_t a2)
{
  double result;

  result = 0.0;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_DWORD *)this + 12) = 1065353216;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *((_DWORD *)this + 22) = 1065353216;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_DWORD *)this + 32) = 1065353216;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 152) = 0u;
  *((_DWORD *)this + 42) = 1065353216;
  *((_OWORD *)this + 11) = 0u;
  *((_OWORD *)this + 12) = 0u;
  *((_DWORD *)this + 52) = 1065353216;
  *((_QWORD *)this + 27) = &unk_24C3371E8;
  *((_QWORD *)this + 28) = a2;
  *(_QWORD *)this = &off_24C335E20;
  *((_QWORD *)this + 1) = &off_24C3371C0;
  return result;
}

{
  double result;

  result = 0.0;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_DWORD *)this + 12) = 1065353216;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *((_DWORD *)this + 22) = 1065353216;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_DWORD *)this + 32) = 1065353216;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 152) = 0u;
  *((_DWORD *)this + 42) = 1065353216;
  *((_OWORD *)this + 11) = 0u;
  *((_OWORD *)this + 12) = 0u;
  *((_DWORD *)this + 52) = 1065353216;
  *((_QWORD *)this + 27) = &unk_24C3371E8;
  *((_QWORD *)this + 28) = a2;
  *(_QWORD *)this = &off_24C335E20;
  *((_QWORD *)this + 1) = &off_24C3371C0;
  return result;
}

uint64_t mlcore::TypedEntityClass<mlcore::ItemArtist>::isCloudUpdatable()
{
  return 0;
}

uint64_t mlcore::TypedEntityClass<mlcore::ItemArtist>::sectionPropertyForOrderingProperty(mlcore *a1, mlcore *a2)
{
  mlcore *v3;

  v3 = (mlcore *)mlcore::ItemArtistPropertyOrder(a1);
  if (v3 == a2)
    return mlcore::ItemArtistPropertyOrderSection(v3);
  else
    return 0;
}

void mlcore::TypedEntityClass<mlcore::ItemArtist>::databaseTablesToDeleteFrom(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

void mlcore::TypedEntityClass<mlcore::ItemArtist>::databaseTablesToInsertInto(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

void mediaplatform::UnicodeSortKey::~UnicodeSortKey(mediaplatform::UnicodeSortKey *this)
{
  *(_QWORD *)this = &off_24C330E10;
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
}

{
  *(_QWORD *)this = &off_24C330E10;
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
  JUMPOUT(0x20BD27AFCLL);
}

{
  *(_QWORD *)this = &off_24C330E10;
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
}

void mediaplatform::UnicodeCollator::~UnicodeCollator(mediaplatform::UnicodeCollator *this)
{
  mediaplatform::UnicodeCollator::~UnicodeCollator(this);
  JUMPOUT(0x20BD27AFCLL);
}

{
  *(_QWORD *)this = &off_24C330E58;
  if (*((_QWORD *)this + 1))
  {
    ucol_close();
    *((_QWORD *)this + 1) = 0;
  }
}

void mediaplatform::UnicodeTransliterator::~UnicodeTransliterator(mediaplatform::UnicodeTransliterator *this)
{
  mediaplatform::UnicodeTransliterator::~UnicodeTransliterator(this);
  JUMPOUT(0x20BD27AFCLL);
}

{
  *(_QWORD *)this = &off_24C331300;
  if (*((_QWORD *)this + 4))
    utrans_close();
  if (*((char *)this + 31) < 0)
    operator delete(*((void **)this + 1));
}

_QWORD *mediaplatform::LocaleIdentifierWithOption@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  const char *v3;
  char __dst[16];
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  char v21;
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  v21 = 0;
  v19 = 0u;
  v20 = 0u;
  v17 = 0u;
  v18 = 0u;
  v15 = 0u;
  v16 = 0u;
  v13 = 0u;
  v14 = 0u;
  v11 = 0u;
  v12 = 0u;
  v9 = 0u;
  v10 = 0u;
  v7 = 0u;
  v8 = 0u;
  *(_OWORD *)__dst = 0u;
  v6 = 0u;
  if (*(char *)(a1 + 23) >= 0)
    v3 = (const char *)a1;
  else
    v3 = *(const char **)a1;
  strlcpy(__dst, v3, 0x101uLL);
  uloc_setKeywordValue();
  return std::string::basic_string[abi:ne180100]<0>(a2, __dst);
}

mediaplatform::UnicodeSortKey *mediaplatform::UnicodeSortKey::UnicodeSortKey(mediaplatform::UnicodeSortKey *this, const unsigned __int8 *a2, unsigned int a3)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v8;
  std::__shared_weak_count *v9;

  std::allocate_shared[abi:ne180100]<mediaplatform::Data,std::allocator<mediaplatform::Data>,unsigned char const*&,unsigned int &,void>(&v8, a2, a3);
  *(_QWORD *)this = &off_24C330E10;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 1) = 0;
  v4 = v9;
  std::shared_ptr<mlcore::Predicate>::operator=[abi:ne180100]((_QWORD *)this + 1, v8, (uint64_t)v9);
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  return this;
}

{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v8;
  std::__shared_weak_count *v9;

  std::allocate_shared[abi:ne180100]<mediaplatform::Data,std::allocator<mediaplatform::Data>,unsigned char const*&,unsigned int &,void>(&v8, a2, a3);
  *(_QWORD *)this = &off_24C330E10;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 1) = 0;
  v4 = v9;
  std::shared_ptr<mlcore::Predicate>::operator=[abi:ne180100]((_QWORD *)this + 1, v8, (uint64_t)v9);
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  return this;
}

void std::allocate_shared[abi:ne180100]<mediaplatform::Data,std::allocator<mediaplatform::Data>,unsigned char const*&,unsigned int &,void>(_QWORD *a1, const void *a2, unsigned int a3)
{
  _QWORD *v6;
  void *v7;

  v6 = operator new(0x40uLL);
  v6[1] = 0;
  v6[2] = 0;
  *v6 = &off_24C33C1A0;
  v6[3] = &off_24C331510;
  v6[4] = a3;
  v6[5] = a3;
  if (a3)
    v7 = (void *)operator new[]();
  else
    v7 = 0;
  v6[6] = v7;
  *((_BYTE *)v6 + 56) = 1;
  if (a2)
    memcpy(v7, a2, a3);
  else
    bzero(v7, a3);
  *a1 = v6 + 3;
  a1[1] = v6;
}

void sub_20A854334(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<mediaplatform::Data>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C33C1A0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<mediaplatform::Data>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C33C1A0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x20BD27AFCLL);
}

uint64_t std::__shared_ptr_emplace<mediaplatform::Data>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

_QWORD *mediaplatform::UnicodeSortKey::UnicodeSortKey(_QWORD *a1, uint64_t *a2)
{
  *a1 = &off_24C330E10;
  a1[2] = 0;
  a1[1] = 0;
  std::shared_ptr<mlcore::Predicate>::operator=[abi:ne180100](a1 + 1, *a2, a2[1]);
  return a1;
}

{
  *a1 = &off_24C330E10;
  a1[2] = 0;
  a1[1] = 0;
  std::shared_ptr<mlcore::Predicate>::operator=[abi:ne180100](a1 + 1, *a2, a2[1]);
  return a1;
}

uint64_t mediaplatform::UnicodeSortKey::data@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(this + 16);
  *a2 = *(_QWORD *)(this + 8);
  a2[1] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return this;
}

uint64_t mediaplatform::UnicodeSortKey::compare(mediaplatform::UnicodeSortKey *this, const mediaplatform::UnicodeSortKey *a2)
{
  std::__shared_weak_count *v3;
  uint64_t v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  const void *v10;
  unint64_t v11;
  size_t v12;
  int v13;
  uint64_t result;
  unsigned int v15;

  v4 = *((_QWORD *)a2 + 1);
  v3 = (std::__shared_weak_count *)*((_QWORD *)a2 + 2);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  v8 = *((_QWORD *)this + 1);
  v9 = *(_QWORD *)(v4 + 8);
  v10 = *(const void **)(v4 + 24);
  v11 = *(_QWORD *)(v8 + 8);
  if (v9 >= v11)
    v12 = *(_QWORD *)(v8 + 8);
  else
    v12 = *(_QWORD *)(v4 + 8);
  if (v9 < v11)
    v13 = 1;
  else
    v13 = -1;
  LODWORD(result) = memcmp(*(const void **)(v8 + 24), v10, v12);
  if (v11 == v9)
    v15 = 0;
  else
    v15 = v13;
  if ((_DWORD)result)
    return result;
  else
    return v15;
}

mediaplatform::UnicodeCollator *mediaplatform::UnicodeCollator::UnicodeCollator(mediaplatform::UnicodeCollator *this)
{
  uint64_t v2;
  std::runtime_error *exception;

  *(_QWORD *)this = &off_24C330E58;
  v2 = ucol_open();
  *((_QWORD *)this + 1) = v2;
  if (!v2)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "failed to create default collator");
    __cxa_throw(exception, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
  }
  mediaplatform::UnicodeCollator::setDefaultAttributes(this);
  return this;
}

void sub_20A854620(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t mediaplatform::UnicodeCollator::setDefaultAttributes(mediaplatform::UnicodeCollator *this)
{
  mediaplatform::UnicodeCollator::setAttribute();
  mediaplatform::UnicodeCollator::setAttribute();
  mediaplatform::UnicodeCollator::setAttribute();
  mediaplatform::UnicodeCollator::setAttribute();
  mediaplatform::UnicodeCollator::setAttribute();
  mediaplatform::UnicodeCollator::setAttribute();
  mediaplatform::UnicodeCollator::setAttribute();
  return mediaplatform::UnicodeCollator::setAttribute();
}

uint64_t mediaplatform::UnicodeCollator::setAttribute()
{
  return ucol_setAttribute();
}

void sub_20A85475C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  int v16;

  if (a15 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  goto LABEL_6;
}

void mediaplatform::FormatString<UColAttribute,UColAttributeValue,UErrorCode>(std::string *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4[3];

  v4[0] = a4;
  v4[1] = a3;
  v4[2] = a2;
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  a1->__r_.__value_.__r.__words[0] = 0;
  mediaplatform::FormatImplementation<UColAttribute,UColAttributeValue,UErrorCode>((std::string *)"failed to set collator attribute. attr=%d, value=%d, icuStatus=%d", a1, 0, v4);
}

void sub_20A8547E0(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void mediaplatform::FormatImplementation<UColAttribute,UColAttributeValue,UErrorCode>(std::string *a1, std::string *a2, std::string::size_type a3, uint64_t *a4)
{
  char v8;
  char *v9;
  std::string::size_type i;
  int v11;
  char *v12;
  unint64_t v13;
  size_t v14;
  char *v15;
  _QWORD *v16;
  const std::ios_base *v17;
  std::ios_base::fmtflags v18;
  const std::locale::facet *v19;
  size_t v20;
  size_t v21;
  size_t v22;
  std::string *v23;
  _BYTE *v24;
  size_t v25;
  unint64_t v26;
  __int128 *v27;
  void *v28;
  unint64_t v29;
  size_t v30;
  __int128 *v31;
  size_t v32;
  unint64_t v33;
  uint64_t v34;
  __int128 *v35;
  unint64_t v36;
  _BYTE *v37;
  uint64_t v38;
  int v40;
  uint64_t v41;
  char *v42;
  char *v43;
  unsigned __int8 *v44;
  int v45;
  std::runtime_error *exception;
  int v47;
  int v48;
  uint64_t v49;
  char v50;
  size_t v51;
  char v52;
  uint64_t v53;
  char v54;
  char *v55;
  __int128 v56;
  uint64_t v57;
  std::locale v58[2];
  uint64_t v59;
  void *v60;
  uint64_t v61;
  _BYTE v62[7];
  unsigned __int8 v63;
  _BYTE v64[48];
  void *__p;
  char v66;
  uint64_t v67;

  v8 = 0;
  v9 = (char *)a1;
  for (i = a3; ; ++i)
  {
    v55 = v9;
    if (*v9 == 123)
      break;
    if (!*v9)
    {
      std::string::resize(a2, i, 0);
      if (i != a3)
        mediaplatform::CopyFormatSectionToResult(a1, a2, a3, i - a3, v8 & 1);
      return;
    }
LABEL_7:
    ++v9;
  }
  v11 = v9[1];
  if (v11 == 123)
  {
    v55 = v9 + 1;
    v8 = 1;
    ++v9;
    goto LABEL_7;
  }
  if (v11 == 42)
  {
    v55 = v9 + 2;
    v40 = v9[2];
    if ((v40 - 48) > 9)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Invalid format string- missing numeric value.");
    }
    else
    {
      v41 = 0;
      v42 = v9 + 3;
      do
      {
        v43 = v42;
        v55 = v42;
        v41 = (v40 - 48) + 10 * v41;
        ++v42;
        v45 = *v43;
        v44 = (unsigned __int8 *)(v43 - 1);
        v40 = v45;
      }
      while ((v45 - 58) >= 0xFFFFFFF6);
      v55 = (char *)(v44 + 2);
      if (*(v42 - 1) == 125)
        mediaplatform::FormatterParameters<0ul,UColAttribute,UColAttributeValue,UErrorCode>::formatOptionsAtIndex<UColAttribute,UColAttributeValue,UErrorCode>(v41);
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Invalid format options reference: Must be of form {*<index>} but no trailing '}' found.");
    }
    __cxa_throw(exception, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
  }
  mediaplatform::FormatOptions::FormatOptions((uint64_t)&v48, (const char **)&v55);
  v12 = v55;
  if (v49)
  {
    if (v49 != 1)
    {
      if (v49 != 2)
        mediaplatform::FormatterParameters<3ul>::formatParameterAtIndex<mediaplatform::FormatterParameters<0ul,UColAttribute,UColAttributeValue,UErrorCode>>();
      mediaplatform::TypeFormatter<UErrorCode,void>::TypeFormatter((uint64_t)&v60, *a4, (uint64_t)&v48);
      v13 = v63;
      if ((v63 & 0x80u) != 0)
        v13 = v61;
      v14 = v51;
      if (v51 <= v13)
        v14 = v13;
      if (v50)
        v13 = v14;
      mediaplatform::FormatImplementation<UColAttribute,UColAttributeValue,UErrorCode>(v12, a2, v13 + i, a4);
      if ((a2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v15 = (char *)a2;
      else
        v15 = (char *)a2->__r_.__value_.__r.__words[0];
      goto LABEL_65;
    }
    v57 = 0;
    v56 = 0uLL;
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v60);
    v16 = v60;
    if (v50)
      *(_QWORD *)&v64[*((_QWORD *)v60 - 3)] = v51;
    if (v52)
      *(_QWORD *)&v62[*(v16 - 3)] = v53;
    v17 = (const std::ios_base *)((char *)&v60 + *(v16 - 3));
    v18 = v54;
    if (v17[1].__fmtflags_ == -1)
    {
      std::ios_base::getloc(v17);
      v19 = std::locale::use_facet(v58, MEMORY[0x24BEDB350]);
      ((void (*)(const std::locale::facet *, uint64_t))v19->__vftable[2].~facet_0)(v19, 32);
      std::locale::~locale(v58);
    }
    v17[1].__fmtflags_ = v18;
    std::ostream::operator<<();
    std::stringbuf::str();
    v56 = *(_OWORD *)&v58[0].__locale_;
    v60 = (void *)*MEMORY[0x24BEDB800];
    *(void **)((char *)&v60 + *((_QWORD *)v60 - 3)) = *(void **)(MEMORY[0x24BEDB800] + 24);
    v57 = v59;
    v61 = MEMORY[0x24BEDB848] + 16;
    if (v66 < 0)
      operator delete(__p);
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    MEMORY[0x20BD27A84](&v67);
    v47 = SHIBYTE(v57);
    if (v57 >= 0)
      v20 = HIBYTE(v57);
    else
      v20 = *((_QWORD *)&v56 + 1);
    v21 = v51;
    if (v51 <= v20)
      v21 = v20;
    if (v50)
      v22 = v21;
    else
      v22 = v20;
    mediaplatform::FormatImplementation<UColAttribute,UColAttributeValue,UErrorCode>(v12, a2, v22 + i, a4);
    if ((a2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v23 = a2;
    else
      v23 = (std::string *)a2->__r_.__value_.__r.__words[0];
    v24 = (char *)v23 + i;
    if (v50 && (v25 = v51, v26 = v51 - v20, v51 > v20))
    {
      if (v48)
      {
        if (v48 == 1)
        {
          v33 = v26 >> 1;
          if (v26 >= 2)
          {
            if (v33 <= 1)
              v34 = 1;
            else
              v34 = v26 >> 1;
            do
            {
              *v24++ = v54;
              --v34;
            }
            while (v34);
          }
          if (v20)
          {
            if (v47 >= 0)
              v35 = &v56;
            else
              v35 = (__int128 *)v56;
            memmove(v24, v35, v20);
          }
          if (v26 != v33)
          {
            v36 = v26 - (v26 >> 1);
            v37 = &v24[v20];
            if (v36 <= 1)
              v36 = 1;
            v38 = -(uint64_t)v36;
            do
              *v37++ = v54;
            while (!__CFADD__(v38++, 1));
          }
        }
        else if (v48 == 2)
        {
          if (v51 != v20)
          {
            do
            {
              *v24++ = v54;
              --v26;
            }
            while (v26);
          }
          goto LABEL_49;
        }
      }
      else
      {
        if (v20)
        {
          if (v47 >= 0)
            v31 = &v56;
          else
            v31 = (__int128 *)v56;
          memmove((char *)v23 + i, v31, v20);
        }
        if (v25 != v20)
        {
          v32 = (size_t)v23 + v20;
          do
          {
            *(_BYTE *)(v32 + i) = v54;
            ++v32;
            --v26;
          }
          while (v26);
        }
      }
    }
    else
    {
LABEL_49:
      if (v20)
      {
        if (v47 >= 0)
          v27 = &v56;
        else
          v27 = (__int128 *)v56;
        memmove(v24, v27, v20);
      }
    }
    if (SHIBYTE(v57) < 0)
    {
      v28 = (void *)v56;
      goto LABEL_67;
    }
  }
  else
  {
    mediaplatform::TypeFormatter<UColAttribute,void>::TypeFormatter((uint64_t)&v60, a4[2], (uint64_t)&v48);
    v29 = v63;
    if ((v63 & 0x80u) != 0)
      v29 = v61;
    v30 = v51;
    if (v51 <= v29)
      v30 = v29;
    if (v50)
      v29 = v30;
    mediaplatform::FormatImplementation<UColAttribute,UColAttributeValue,UErrorCode>(v12, a2, v29 + i, a4);
    if ((a2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v15 = (char *)a2;
    else
      v15 = (char *)a2->__r_.__value_.__r.__words[0];
LABEL_65:
    mediaplatform::FormatOptions::justifyNativeValueOfLength<std::__wrap_iter<char *>,UColAttribute>(&v48, &v15[i], (const void **)&v60);
    if ((char)v63 < 0)
    {
      v28 = v60;
LABEL_67:
      operator delete(v28);
    }
  }
  if (i != a3)
    mediaplatform::CopyFormatSectionToResult(a1, a2, a3, i - a3, v8 & 1);
}

void sub_20A854D90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, int a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,std::locale a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  std::locale::~locale(&a23);
  std::ostringstream::~ostringstream((uint64_t)&__p);
  _Unwind_Resume(a1);
}

void mediaplatform::FormatterParameters<0ul,UColAttribute,UColAttributeValue,UErrorCode>::formatOptionsAtIndex<UColAttribute,UColAttributeValue,UErrorCode>(uint64_t a1)
{
  std::runtime_error *exception;

  if (!a1)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Requested parameter is not an FormatOptions instance.");
    __cxa_throw(exception, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
  }
  mediaplatform::FormatterParameters<1ul,UColAttributeValue,UErrorCode>::formatOptionsAtIndex<UColAttribute,UColAttributeValue,UErrorCode>(a1);
}

void sub_20A854E48(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t mediaplatform::TypeFormatter<UColAttribute,void>::TypeFormatter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  const std::ios_base *v6;
  std::ios_base::fmtflags v7;
  const std::locale::facet *v8;
  __int128 v10;
  uint64_t v11;
  _QWORD v12[11];
  char v13;
  uint64_t v14;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v12);
  v5 = v12[0];
  if (*(_BYTE *)(a3 + 16))
    *(_QWORD *)((char *)&v12[3] + *(_QWORD *)(v12[0] - 24)) = *(_QWORD *)(a3 + 24);
  if (*(_BYTE *)(a3 + 32))
    *(_QWORD *)((char *)&v12[2] + *(_QWORD *)(v5 - 24)) = *(_QWORD *)(a3 + 40);
  v6 = (const std::ios_base *)((char *)v12 + *(_QWORD *)(v5 - 24));
  v7 = *(char *)(a3 + 52);
  if (v6[1].__fmtflags_ == -1)
  {
    std::ios_base::getloc(v6);
    v8 = std::locale::use_facet((const std::locale *)&v10, MEMORY[0x24BEDB350]);
    ((void (*)(const std::locale::facet *, uint64_t))v8->__vftable[2].~facet_0)(v8, 32);
    std::locale::~locale((std::locale *)&v10);
  }
  v6[1].__fmtflags_ = v7;
  std::ostream::operator<<();
  std::stringbuf::str();
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  *(_OWORD *)a1 = v10;
  *(_QWORD *)(a1 + 16) = v11;
  v12[0] = *MEMORY[0x24BEDB800];
  *(_QWORD *)((char *)v12 + *(_QWORD *)(v12[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  v12[1] = MEMORY[0x24BEDB848] + 16;
  if (v13 < 0)
    operator delete((void *)v12[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x20BD27A84](&v14);
  return a1;
}

void sub_20A854FD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
  uint64_t v12;

  std::locale::~locale((std::locale *)&a9);
  std::ostringstream::~ostringstream((uint64_t)&a12);
  if (*(char *)(v12 + 23) < 0)
    operator delete(*(void **)v12);
  _Unwind_Resume(a1);
}

_BYTE *mediaplatform::FormatOptions::justifyNativeValueOfLength<std::__wrap_iter<char *>,UColAttribute>(_BYTE *result, char *__dst, const void **a3)
{
  size_t v4;
  char v5;
  size_t v6;
  size_t v7;
  _BYTE *v8;
  unint64_t v9;
  unint64_t v10;
  int v11;
  const void *v12;
  void *v13;
  size_t v14;
  const void *v15;
  char *v16;
  unint64_t v17;
  uint64_t v18;
  const void *v19;
  unint64_t v20;
  char *v21;
  uint64_t v22;

  v4 = *((unsigned __int8 *)a3 + 23);
  v5 = v4;
  v6 = (size_t)a3[1];
  if ((v4 & 0x80u) == 0)
    v7 = *((unsigned __int8 *)a3 + 23);
  else
    v7 = (size_t)a3[1];
  if (!result[16] || (v8 = result, v9 = *((_QWORD *)result + 3), v10 = v9 - v7, v9 <= v7))
  {
    if (!v7)
      return result;
    if ((v4 & 0x80u) == 0)
      v12 = a3;
    else
      v12 = *a3;
    v13 = __dst;
    v14 = v7;
    return memmove(v13, v12, v14);
  }
  v11 = *(_DWORD *)result;
  if (*(_DWORD *)result)
  {
    if (v11 == 1)
    {
      v17 = v10 >> 1;
      if (v10 >= 2)
      {
        if (v17 <= 1)
          v18 = 1;
        else
          v18 = v10 >> 1;
        do
        {
          *__dst++ = result[52];
          --v18;
        }
        while (v18);
        v4 = *((unsigned __int8 *)a3 + 23);
        v6 = (size_t)a3[1];
        v5 = *((_BYTE *)a3 + 23);
      }
      if (v5 < 0)
        v4 = v6;
      if (v4)
      {
        if (v5 >= 0)
          v19 = a3;
        else
          v19 = *a3;
        result = memmove(__dst, v19, v4);
      }
      if (v10 != v17)
      {
        v20 = v10 - (v10 >> 1);
        v21 = &__dst[v7];
        if (v20 <= 1)
          v20 = 1;
        v22 = -(uint64_t)v20;
        do
          *v21++ = v8[52];
        while (!__CFADD__(v22++, 1));
      }
    }
    else if (v11 == 2)
    {
      if (v9 != v7)
      {
        do
        {
          *__dst++ = result[52];
          --v10;
        }
        while (v10);
        v4 = *((unsigned __int8 *)a3 + 23);
        v6 = (size_t)a3[1];
        v5 = *((_BYTE *)a3 + 23);
      }
      if (v5 < 0)
        v4 = v6;
      if (v4)
      {
        if (v5 >= 0)
          v12 = a3;
        else
          v12 = *a3;
        v13 = __dst;
        v14 = v4;
        return memmove(v13, v12, v14);
      }
    }
  }
  else
  {
    if (v7)
    {
      if ((v4 & 0x80u) == 0)
        v15 = a3;
      else
        v15 = *a3;
      result = memmove(__dst, v15, v7);
    }
    if (v9 != v7)
    {
      v16 = &__dst[v7];
      do
      {
        *v16++ = v8[52];
        --v10;
      }
      while (v10);
    }
  }
  return result;
}

void mediaplatform::FormatterParameters<3ul>::formatParameterAtIndex<mediaplatform::FormatterParameters<0ul,UColAttribute,UColAttributeValue,UErrorCode>>()
{
  std::runtime_error *exception;

  exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
  std::runtime_error::runtime_error(exception, "Parameter index out of bounds.");
  __cxa_throw(exception, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
}

void sub_20A8551FC(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t mediaplatform::TypeFormatter<UErrorCode,void>::TypeFormatter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  const std::ios_base *v6;
  std::ios_base::fmtflags v7;
  const std::locale::facet *v8;
  __int128 v10;
  uint64_t v11;
  _QWORD v12[11];
  char v13;
  uint64_t v14;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v12);
  v5 = v12[0];
  if (*(_BYTE *)(a3 + 16))
    *(_QWORD *)((char *)&v12[3] + *(_QWORD *)(v12[0] - 24)) = *(_QWORD *)(a3 + 24);
  if (*(_BYTE *)(a3 + 32))
    *(_QWORD *)((char *)&v12[2] + *(_QWORD *)(v5 - 24)) = *(_QWORD *)(a3 + 40);
  v6 = (const std::ios_base *)((char *)v12 + *(_QWORD *)(v5 - 24));
  v7 = *(char *)(a3 + 52);
  if (v6[1].__fmtflags_ == -1)
  {
    std::ios_base::getloc(v6);
    v8 = std::locale::use_facet((const std::locale *)&v10, MEMORY[0x24BEDB350]);
    ((void (*)(const std::locale::facet *, uint64_t))v8->__vftable[2].~facet_0)(v8, 32);
    std::locale::~locale((std::locale *)&v10);
  }
  v6[1].__fmtflags_ = v7;
  std::ostream::operator<<();
  std::stringbuf::str();
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  *(_OWORD *)a1 = v10;
  *(_QWORD *)(a1 + 16) = v11;
  v12[0] = *MEMORY[0x24BEDB800];
  *(_QWORD *)((char *)v12 + *(_QWORD *)(v12[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  v12[1] = MEMORY[0x24BEDB848] + 16;
  if (v13 < 0)
    operator delete((void *)v12[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x20BD27A84](&v14);
  return a1;
}

void sub_20A85538C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
  uint64_t v12;

  std::locale::~locale((std::locale *)&a9);
  std::ostringstream::~ostringstream((uint64_t)&a12);
  if (*(char *)(v12 + 23) < 0)
    operator delete(*(void **)v12);
  _Unwind_Resume(a1);
}

void mediaplatform::FormatterParameters<1ul,UColAttributeValue,UErrorCode>::formatOptionsAtIndex<UColAttribute,UColAttributeValue,UErrorCode>(uint64_t a1)
{
  std::runtime_error *exception;

  if (a1 == 1)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Requested parameter is not an FormatOptions instance.");
    __cxa_throw(exception, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
  }
  mediaplatform::FormatterParameters<2ul,UErrorCode>::formatOptionsAtIndex<UColAttribute,UColAttributeValue,UErrorCode>(a1);
}

void sub_20A855414(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void mediaplatform::FormatterParameters<2ul,UErrorCode>::formatOptionsAtIndex<UColAttribute,UColAttributeValue,UErrorCode>(uint64_t a1)
{
  std::runtime_error *exception;

  if (a1 == 2)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Requested parameter is not an FormatOptions instance.");
    __cxa_throw(exception, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
  }
  mediaplatform::FormatterParameters<3ul>::formatOptionsAtIndex<UColAttribute,UColAttributeValue,UErrorCode>();
}

void sub_20A855470(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void mediaplatform::FormatterParameters<3ul>::formatOptionsAtIndex<UColAttribute,UColAttributeValue,UErrorCode>()
{
  std::runtime_error *exception;

  exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
  std::runtime_error::runtime_error(exception, "Parameter index out of bounds.");
  __cxa_throw(exception, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
}

void sub_20A8554C0(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

mediaplatform::UnicodeCollator *mediaplatform::UnicodeCollator::UnicodeCollator(mediaplatform::UnicodeCollator *a1)
{
  uint64_t v2;
  std::runtime_error *exception;
  std::string v5;
  int v6;

  *(_QWORD *)a1 = &off_24C330E58;
  v6 = 0;
  v2 = ucol_open();
  *((_QWORD *)a1 + 1) = v2;
  if (!v2)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    std::runtime_error::runtime_error(exception, &v5);
    __cxa_throw(exception, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
  }
  mediaplatform::UnicodeCollator::setDefaultAttributes(a1);
  return a1;
}

void sub_20A855594(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  void *v14;
  int v15;

  if (a14 < 0)
  {
    operator delete(__p);
    if ((v15 & 1) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v15)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v14);
  goto LABEL_6;
}

uint64_t mediaplatform::UnicodeCollator::getAttribute()
{
  return ucol_getAttribute();
}

void sub_20A85565C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  void *v14;
  int v15;

  if (a14 < 0)
  {
    operator delete(__p);
    if ((v15 & 1) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v15)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v14);
  goto LABEL_6;
}

void mediaplatform::FormatString<UColAttribute,UErrorCode>(std::string *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3[2];

  v3[0] = a3;
  v3[1] = a2;
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  a1->__r_.__value_.__r.__words[0] = 0;
  mediaplatform::FormatImplementation<UColAttribute,UErrorCode>((std::string *)"failed to get collator attribute. attr=%d, icuStatus=%d", a1, 0, v3);
}

void sub_20A8556DC(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void mediaplatform::FormatImplementation<UColAttribute,UErrorCode>(std::string *a1, std::string *a2, std::string::size_type a3, uint64_t *a4)
{
  char v8;
  char *v9;
  std::string::size_type i;
  int v11;
  char *v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  unint64_t v16;
  unint64_t v17;
  int v18;
  uint64_t v19;
  char *v20;
  char *v21;
  unsigned __int8 *v22;
  int v23;
  std::runtime_error *exception;
  _BYTE v25[8];
  uint64_t v26;
  char v27;
  unint64_t v28;
  char *v29;
  void *__p;
  unint64_t v31;
  unsigned __int8 v32;

  v8 = 0;
  v9 = (char *)a1;
  for (i = a3; ; ++i)
  {
    v29 = v9;
    if (*v9 == 123)
      break;
    if (!*v9)
    {
      std::string::resize(a2, i, 0);
      if (i != a3)
        mediaplatform::CopyFormatSectionToResult(a1, a2, a3, i - a3, v8 & 1);
      return;
    }
LABEL_7:
    ++v9;
  }
  v11 = v9[1];
  if (v11 == 123)
  {
    v29 = v9 + 1;
    v8 = 1;
    ++v9;
    goto LABEL_7;
  }
  if (v11 == 42)
  {
    v29 = v9 + 2;
    v18 = v9[2];
    if ((v18 - 48) > 9)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Invalid format string- missing numeric value.");
    }
    else
    {
      v19 = 0;
      v20 = v9 + 3;
      do
      {
        v21 = v20;
        v29 = v20;
        v19 = (v18 - 48) + 10 * v19;
        ++v20;
        v23 = *v21;
        v22 = (unsigned __int8 *)(v21 - 1);
        v18 = v23;
      }
      while ((v23 - 58) >= 0xFFFFFFF6);
      v29 = (char *)(v22 + 2);
      if (*(v20 - 1) == 125)
        mediaplatform::FormatterParameters<0ul,UColAttribute,UErrorCode>::formatOptionsAtIndex<UColAttribute,UErrorCode>(v19);
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Invalid format options reference: Must be of form {*<index>} but no trailing '}' found.");
    }
    __cxa_throw(exception, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
  }
  mediaplatform::FormatOptions::FormatOptions((uint64_t)v25, (const char **)&v29);
  v12 = v29;
  if (v26)
  {
    if (v26 != 1)
      mediaplatform::FormatterParameters<2ul>::formatParameterAtIndex<mediaplatform::FormatterParameters<0ul,UColAttribute,UErrorCode>>();
    mediaplatform::TypeFormatter<UErrorCode,void>::TypeFormatter((uint64_t)&__p, *a4, (uint64_t)v25);
    v13 = v32;
    if ((v32 & 0x80u) != 0)
      v13 = v31;
    v14 = v28;
    if (v28 <= v13)
      v14 = v13;
    if (v27)
      v13 = v14;
    mediaplatform::FormatImplementation<UColAttribute,UErrorCode>(v12, a2, v13 + i, a4);
    if ((a2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v15 = (char *)a2;
    else
      v15 = (char *)a2->__r_.__value_.__r.__words[0];
  }
  else
  {
    mediaplatform::TypeFormatter<UColAttribute,void>::TypeFormatter((uint64_t)&__p, a4[1], (uint64_t)v25);
    v16 = v32;
    if ((v32 & 0x80u) != 0)
      v16 = v31;
    v17 = v28;
    if (v28 <= v16)
      v17 = v16;
    if (v27)
      v16 = v17;
    mediaplatform::FormatImplementation<UColAttribute,UErrorCode>(v12, a2, v16 + i, a4);
    if ((a2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v15 = (char *)a2;
    else
      v15 = (char *)a2->__r_.__value_.__r.__words[0];
  }
  mediaplatform::FormatOptions::justifyNativeValueOfLength<std::__wrap_iter<char *>,UColAttribute>(v25, &v15[i], (const void **)&__p);
  if ((char)v32 < 0)
    operator delete(__p);
  if (i != a3)
    mediaplatform::CopyFormatSectionToResult(a1, a2, a3, i - a3, v8 & 1);
}

void sub_20A8559B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void mediaplatform::FormatterParameters<0ul,UColAttribute,UErrorCode>::formatOptionsAtIndex<UColAttribute,UErrorCode>(uint64_t a1)
{
  std::runtime_error *exception;

  if (!a1)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Requested parameter is not an FormatOptions instance.");
    __cxa_throw(exception, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
  }
  mediaplatform::FormatterParameters<1ul,UErrorCode>::formatOptionsAtIndex<UColAttribute,UErrorCode>(a1);
}

void sub_20A855A30(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void mediaplatform::FormatterParameters<2ul>::formatParameterAtIndex<mediaplatform::FormatterParameters<0ul,UColAttribute,UErrorCode>>()
{
  std::runtime_error *exception;

  exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
  std::runtime_error::runtime_error(exception, "Parameter index out of bounds.");
  __cxa_throw(exception, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
}

void sub_20A855A80(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void mediaplatform::FormatterParameters<1ul,UErrorCode>::formatOptionsAtIndex<UColAttribute,UErrorCode>(uint64_t a1)
{
  std::runtime_error *exception;

  if (a1 == 1)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Requested parameter is not an FormatOptions instance.");
    __cxa_throw(exception, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
  }
  mediaplatform::FormatterParameters<2ul>::formatOptionsAtIndex<UColAttribute,UErrorCode>();
}

void sub_20A855ADC(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void mediaplatform::FormatterParameters<2ul>::formatOptionsAtIndex<UColAttribute,UErrorCode>()
{
  std::runtime_error *exception;

  exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
  std::runtime_error::runtime_error(exception, "Parameter index out of bounds.");
  __cxa_throw(exception, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
}

void sub_20A855B2C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t mediaplatform::UnicodeCollator::setStrength()
{
  return ucol_setStrength();
}

uint64_t mediaplatform::UnicodeCollator::strength(mediaplatform::UnicodeCollator *this)
{
  return ucol_getStrength();
}

__n128 mediaplatform::UnicodeCollator::versionData@<Q0>(__n128 *a1@<X8>)
{
  int64x2_t *v3;
  _DWORD *v4;
  __n128 result;

  ucol_getVersion();
  v3 = (int64x2_t *)operator new(0x40uLL);
  v3->i64[1] = 0;
  v3[1].i64[0] = 0;
  v3->i64[0] = (uint64_t)&off_24C33C1A0;
  v3[1].i64[1] = (uint64_t)&off_24C331510;
  v3[2] = vdupq_n_s64(4uLL);
  v4 = (_DWORD *)operator new[]();
  v3[3].i64[0] = (uint64_t)v4;
  v3[3].i8[8] = 1;
  *v4 = 0;
  result.n128_u64[0] = (unint64_t)&v3[1].u64[1];
  result.n128_u64[1] = (unint64_t)v3;
  *a1 = result;
  return result;
}

void sub_20A855BFC(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void mediaplatform::UnicodeCollator::createSortKey(mediaplatform::UnicodeSortKey **a1@<X8>)
{
  int SortKey;
  void *v3;
  unsigned int v4;
  unsigned int v5;
  _QWORD *v6;
  std::runtime_error *exception;

  SortKey = ucol_getSortKey();
  v3 = malloc_type_malloc(SortKey, 0x8BDBB4BCuLL);
  v4 = ucol_getSortKey();
  if (!v4)
  {
    free(v3);
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "failed to generate sort key");
    __cxa_throw(exception, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
  }
  v5 = v4;
  v6 = operator new(0x30uLL);
  v6[1] = 0;
  v6[2] = 0;
  *v6 = &off_24C33B9F8;
  *a1 = mediaplatform::UnicodeSortKey::UnicodeSortKey((mediaplatform::UnicodeSortKey *)(v6 + 3), (const unsigned __int8 *)v3, v5);
  a1[1] = (mediaplatform::UnicodeSortKey *)v6;
  free(v3);
}

void sub_20A855D28(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<mediaplatform::UnicodeSortKey>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C33B9F8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<mediaplatform::UnicodeSortKey>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C33B9F8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x20BD27AFCLL);
}

uint64_t std::__shared_ptr_emplace<mediaplatform::UnicodeSortKey>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

_QWORD *mediaplatform::UnicodeCollator::createGroupingKey@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  const UChar *v4;
  int32_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  const UChar **v9;
  int SortKeyPart;
  _BYTE *v11;
  size_t v12;
  uint64_t v13;
  void *v14;
  _QWORD *result;
  std::runtime_error *exception;
  std::string v17;
  int v18;
  UCharIterator iter;
  uint64_t v20;
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  if (*(char *)(a2 + 23) < 0)
  {
    MEMORY[0x24BDAC7A8](a1);
    v7 = (char *)&v17 - ((v8 + 20) & 0xFFFFFFFFFFFFFFF0);
    v4 = *v9;
  }
  else
  {
    MEMORY[0x24BDAC7A8](a1);
    v7 = (char *)&v17 - v6;
  }
  v20 = 0;
  v18 = 0;
  uiter_setString(&iter, v4, v5);
  SortKeyPart = ucol_nextSortKeyPart();
  if (v18 >= 1)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    mediaplatform::FormatString<UErrorCode>(&v17, (uint64_t)&v18);
    std::runtime_error::runtime_error(exception, &v17);
    __cxa_throw(exception, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
  }
  v11 = memchr(v7, 1, SortKeyPart);
  if (v11)
    v12 = v11 - v7;
  else
    v12 = 0;
  v13 = operator new();
  *(_QWORD *)v13 = &off_24C331510;
  *(_QWORD *)(v13 + 8) = v12;
  *(_QWORD *)(v13 + 16) = v12;
  if (v12)
    v14 = (void *)operator new[]();
  else
    v14 = 0;
  *(_QWORD *)(v13 + 24) = v14;
  *(_BYTE *)(v13 + 32) = 1;
  memcpy(v14, v7, v12);
  *a3 = v13;
  result = (_QWORD *)operator new();
  *result = &off_24C331A68;
  result[1] = 0;
  result[2] = 0;
  result[3] = v13;
  a3[1] = (uint64_t)result;
  return result;
}

void sub_20A855FA8(_Unwind_Exception *a1)
{
  void *v1;
  int v2;
  uint64_t v3;

  if (*(char *)(v3 - 169) < 0)
  {
    operator delete(*(void **)(v3 - 192));
    if ((v2 & 1) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v2)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v1);
  goto LABEL_6;
}

void mediaplatform::FormatString<UErrorCode>(std::string *a1, uint64_t a2)
{
  uint64_t v2;

  v2 = a2;
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  a1->__r_.__value_.__r.__words[0] = 0;
  mediaplatform::FormatImplementation<UErrorCode>((std::string *)"failed to get next sort key part. icuStatus=%d", a1, 0, &v2);
}

void sub_20A856068(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_pointer<mediaplatform::Data *,std::shared_ptr<mediaplatform::Data>::__shared_ptr_default_delete<mediaplatform::Data,mediaplatform::Data>,std::allocator<mediaplatform::Data>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x20BD27AFCLL);
}

uint64_t std::__shared_ptr_pointer<mediaplatform::Data *,std::shared_ptr<mediaplatform::Data>::__shared_ptr_default_delete<mediaplatform::Data,mediaplatform::Data>,std::allocator<mediaplatform::Data>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<mediaplatform::Data *,std::shared_ptr<mediaplatform::Data>::__shared_ptr_default_delete<mediaplatform::Data,mediaplatform::Data>,std::allocator<mediaplatform::Data>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), 0x800000020A91A607))
    return a1 + 24;
  else
    return 0;
}

void mediaplatform::FormatImplementation<UErrorCode>(std::string *a1, std::string *a2, std::string::size_type a3, uint64_t *a4)
{
  char v8;
  char *v9;
  std::string::size_type i;
  int v11;
  char *v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  int v16;
  uint64_t v17;
  char *v18;
  char *v19;
  unsigned __int8 *v20;
  int v21;
  std::runtime_error *exception;
  char v23[8];
  uint64_t v24;
  char v25;
  unint64_t v26;
  char *v27;
  void *__p[2];
  unsigned __int8 v29;

  v8 = 0;
  v9 = (char *)a1;
  for (i = a3; ; ++i)
  {
    v27 = v9;
    if (*v9 == 123)
      break;
    if (!*v9)
    {
      std::string::resize(a2, i, 0);
      if (i != a3)
        mediaplatform::CopyFormatSectionToResult(a1, a2, a3, i - a3, v8 & 1);
      return;
    }
LABEL_7:
    ++v9;
  }
  v11 = v9[1];
  if (v11 == 123)
  {
    v27 = v9 + 1;
    v8 = 1;
    ++v9;
    goto LABEL_7;
  }
  if (v11 == 42)
  {
    v27 = v9 + 2;
    v16 = v9[2];
    if ((v16 - 48) > 9)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Invalid format string- missing numeric value.");
    }
    else
    {
      v17 = 0;
      v18 = v9 + 3;
      do
      {
        v19 = v18;
        v27 = v18;
        v17 = (v16 - 48) + 10 * v17;
        ++v18;
        v21 = *v19;
        v20 = (unsigned __int8 *)(v19 - 1);
        v16 = v21;
      }
      while ((v21 - 58) >= 0xFFFFFFF6);
      v27 = (char *)(v20 + 2);
      if (*(v18 - 1) == 125)
        mediaplatform::FormatterParameters<0ul,UErrorCode>::formatOptionsAtIndex<UErrorCode>(v17);
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Invalid format options reference: Must be of form {*<index>} but no trailing '}' found.");
    }
    __cxa_throw(exception, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
  }
  mediaplatform::FormatOptions::FormatOptions((uint64_t)v23, (const char **)&v27);
  if (v24)
    mediaplatform::FormatterParameters<1ul>::formatParameterAtIndex<mediaplatform::FormatterParameters<0ul,UErrorCode>>();
  v12 = v27;
  mediaplatform::TypeFormatter<UErrorCode,void>::TypeFormatter((uint64_t)__p, *a4, (uint64_t)v23);
  v13 = v29;
  if ((v29 & 0x80u) != 0)
    v13 = (unint64_t)__p[1];
  v14 = v26;
  if (v26 <= v13)
    v14 = v13;
  if (v25)
    v13 = v14;
  mediaplatform::FormatImplementation<UErrorCode>(v12, a2, v13 + i, a4);
  if ((a2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v15 = (char *)a2;
  else
    v15 = (char *)a2->__r_.__value_.__r.__words[0];
  mediaplatform::FormatOptions::justifyNativeValueOfLength<std::__wrap_iter<char *>,UColAttribute>(v23, &v15[i], (const void **)__p);
  if ((char)v29 < 0)
    operator delete(__p[0]);
  if (i != a3)
    mediaplatform::CopyFormatSectionToResult(a1, a2, a3, i - a3, v8 & 1);
}

void sub_20A85634C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void mediaplatform::FormatterParameters<0ul,UErrorCode>::formatOptionsAtIndex<UErrorCode>(uint64_t a1)
{
  std::runtime_error *exception;

  if (!a1)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Requested parameter is not an FormatOptions instance.");
    __cxa_throw(exception, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
  }
  mediaplatform::FormatterParameters<1ul>::formatOptionsAtIndex<UErrorCode>();
}

void sub_20A8563C0(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void mediaplatform::FormatterParameters<1ul>::formatParameterAtIndex<mediaplatform::FormatterParameters<0ul,UErrorCode>>()
{
  std::runtime_error *exception;

  exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
  std::runtime_error::runtime_error(exception, "Parameter index out of bounds.");
  __cxa_throw(exception, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
}

void sub_20A856410(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void mediaplatform::FormatterParameters<1ul>::formatOptionsAtIndex<UErrorCode>()
{
  std::runtime_error *exception;

  exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
  std::runtime_error::runtime_error(exception, "Parameter index out of bounds.");
  __cxa_throw(exception, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
}

void sub_20A856460(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

_QWORD *mediaplatform::UnicodeTransliterator::UnicodeTransliterator(_QWORD *a1, __int128 *a2)
{
  std::string *v3;
  __int128 v4;

  *a1 = &off_24C331300;
  v3 = (std::string *)(a1 + 1);
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    v3->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = v4;
  }
  a1[4] = 0;
  return a1;
}

{
  std::string *v3;
  __int128 v4;

  *a1 = &off_24C331300;
  v3 = (std::string *)(a1 + 1);
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    v3->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = v4;
  }
  a1[4] = 0;
  return a1;
}

void mediaplatform::UnicodeTransliterator::transliterate(uint64_t a1@<X0>, char *a2@<X1>, _QWORD *a3@<X8>)
{
  int v6;
  void *v7;
  void *v8;
  uint64_t v9;
  char *v10;
  std::runtime_error *exception;
  std::string *v12;
  __int128 v13;
  const char *v14;
  std::string *v15;
  __int128 v16;
  int v17;
  std::string v18;
  std::string v19;
  std::string v20;
  UErrorCode v21;
  __int128 v22;
  char v23;

  if (!*(_QWORD *)(a1 + 32))
  {
    mediaplatform::StringToUCharString(a1 + 8, &v22);
    v21 = U_ZERO_ERROR;
    *(_QWORD *)(a1 + 32) = utrans_openU();
    if (v21)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::operator+<char>();
      v12 = std::string::append(&v18, "'. err=");
      v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
      v19.__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v19.__r_.__value_.__l.__data_ = v13;
      v12->__r_.__value_.__l.__size_ = 0;
      v12->__r_.__value_.__r.__words[2] = 0;
      v12->__r_.__value_.__r.__words[0] = 0;
      v14 = u_errorName(v21);
      v15 = std::string::append(&v19, v14);
      v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
      v20.__r_.__value_.__r.__words[2] = v15->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v20.__r_.__value_.__l.__data_ = v16;
      v15->__r_.__value_.__l.__size_ = 0;
      v15->__r_.__value_.__r.__words[2] = 0;
      v15->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(exception, &v20);
      __cxa_throw(exception, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
    }
    if (v23 < 0)
      operator delete((void *)v22);
  }
  v21 = U_ZERO_ERROR;
  v6 = a2[23];
  if ((v6 & 0x80u) != 0)
    v6 = *((_DWORD *)a2 + 2);
  v7 = malloc_type_malloc((10 * v6) | 1, 0xC4C371EEuLL);
  v8 = v7;
  if (a2[23] < 0)
  {
    v10 = *(char **)a2;
    v9 = *((_QWORD *)a2 + 1);
  }
  else
  {
    v9 = a2[23];
    v10 = a2;
  }
  v17 = v9;
  memcpy(v7, v10, 2 * v9);
  utrans_transUChars();
  std::wstring::basic_string[abi:ne180100](a3, (uint64_t)v8, v17);
  free(v8);
}

void sub_20A8567E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  void *v30;
  int v31;
  uint64_t v32;

  if (a30 < 0)
    operator delete(__p);
  if (a23 < 0)
    operator delete(a18);
  if (a17 < 0)
  {
    operator delete(a12);
    if ((v31 & 1) == 0)
    {
LABEL_10:
      if (*(char *)(v32 - 57) < 0)
        operator delete(*(void **)(v32 - 80));
      _Unwind_Resume(a1);
    }
  }
  else if (!v31)
  {
    goto LABEL_10;
  }
  __cxa_free_exception(v30);
  goto LABEL_10;
}

_QWORD *mediaplatform::StringToUCharString@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  int v4;
  const char *v5;
  int32_t v6;
  UChar *v8;
  uint64_t v9;
  char v10;
  const char *v11;
  int32_t v12;
  void *exception;
  std::string *v14;
  void *v15;
  std::string *v16;
  std::string v17;
  std::string v18;
  int v19;
  UErrorCode pErrorCode[2];
  UChar dest[256];
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)pErrorCode = 0;
  v4 = *(char *)(a1 + 23);
  if (v4 >= 0)
    v5 = (const char *)a1;
  else
    v5 = *(const char **)a1;
  if (v4 >= 0)
    v6 = *(unsigned __int8 *)(a1 + 23);
  else
    v6 = *(_DWORD *)(a1 + 8);
  u_strFromUTF8(dest, 256, (int32_t *)&pErrorCode[1], v5, v6, pErrorCode);
  if (pErrorCode[0] == U_STRING_NOT_TERMINATED_WARNING)
    return std::wstring::basic_string[abi:ne180100](a2, (uint64_t)dest, pErrorCode[1]);
  if (pErrorCode[0] != U_BUFFER_OVERFLOW_ERROR)
  {
    if (pErrorCode[0])
    {
      exception = __cxa_allocate_exception(0x40uLL);
      v19 = 37;
      std::to_string(&v17, pErrorCode[0]);
      v14 = std::string::insert(&v17, 0, "u_strFromUTF8: ");
      v18 = *v14;
      v14->__r_.__value_.__l.__size_ = 0;
      v14->__r_.__value_.__r.__words[2] = 0;
      v14->__r_.__value_.__r.__words[0] = 0;
      mediaplatform::PlatformErrorCondition::PlatformErrorCondition((uint64_t)exception, &v19, (__int128 *)&v18);
    }
    return std::wstring::basic_string[abi:ne180100](a2, (uint64_t)dest, pErrorCode[1]);
  }
  v8 = (UChar *)operator new[]();
  v9 = (uint64_t)v8;
  pErrorCode[0] = U_ZERO_ERROR;
  v10 = *(_BYTE *)(a1 + 23);
  if (v10 >= 0)
    v11 = (const char *)a1;
  else
    v11 = *(const char **)a1;
  if (v10 >= 0)
    v12 = *(unsigned __int8 *)(a1 + 23);
  else
    v12 = *(_DWORD *)(a1 + 8);
  u_strFromUTF8(v8, pErrorCode[1] + 1, (int32_t *)&pErrorCode[1], v11, v12, pErrorCode);
  if (pErrorCode[0])
  {
    v15 = __cxa_allocate_exception(0x40uLL);
    v19 = 37;
    std::to_string(&v17, pErrorCode[0]);
    v16 = std::string::insert(&v17, 0, "u_strFromUTF8: ");
    v18 = *v16;
    v16->__r_.__value_.__l.__size_ = 0;
    v16->__r_.__value_.__r.__words[2] = 0;
    v16->__r_.__value_.__r.__words[0] = 0;
    mediaplatform::PlatformErrorCondition::PlatformErrorCondition((uint64_t)v15, &v19, (__int128 *)&v18);
  }
  std::wstring::basic_string[abi:ne180100](a2, v9, pErrorCode[1]);
  return (_QWORD *)MEMORY[0x20BD27AE4](v9, 0x1000C80BDFB0063);
}

void sub_20A856B64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  uint64_t v21;
  void *v22;
  int v23;

  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v23 & 1) == 0)
    {
LABEL_8:
      MEMORY[0x20BD27AE4](v21, 0x1000C80BDFB0063);
      _Unwind_Resume(a1);
    }
  }
  else if (!v23)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v22);
  goto LABEL_8;
}

_QWORD *mediaplatform::UCharStringToString@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  int v4;
  const UChar *v5;
  int32_t v6;
  char *v8;
  char *v9;
  char v10;
  const UChar *v11;
  int32_t v12;
  void *exception;
  std::string *v14;
  void *v15;
  std::string *v16;
  std::string v17;
  std::string v18;
  int v19;
  UErrorCode pErrorCode[2];
  char dest[256];
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)pErrorCode = 0;
  v4 = *(char *)(a1 + 23);
  if (v4 >= 0)
    v5 = (const UChar *)a1;
  else
    v5 = *(const UChar **)a1;
  if (v4 >= 0)
    v6 = *(unsigned __int8 *)(a1 + 23);
  else
    v6 = *(_DWORD *)(a1 + 8);
  u_strToUTF8(dest, 256, (int32_t *)&pErrorCode[1], v5, v6, pErrorCode);
  if (pErrorCode[0] == U_STRING_NOT_TERMINATED_WARNING)
    return std::string::basic_string[abi:ne180100](a2, dest, pErrorCode[1]);
  if (pErrorCode[0] != U_BUFFER_OVERFLOW_ERROR)
  {
    if (pErrorCode[0])
    {
      exception = __cxa_allocate_exception(0x40uLL);
      v19 = 37;
      std::to_string(&v17, pErrorCode[0]);
      v14 = std::string::insert(&v17, 0, "u_strToUTF8: ");
      v18 = *v14;
      v14->__r_.__value_.__l.__size_ = 0;
      v14->__r_.__value_.__r.__words[2] = 0;
      v14->__r_.__value_.__r.__words[0] = 0;
      mediaplatform::PlatformErrorCondition::PlatformErrorCondition((uint64_t)exception, &v19, (__int128 *)&v18);
    }
    return std::string::basic_string[abi:ne180100](a2, dest, pErrorCode[1]);
  }
  v8 = (char *)operator new[]();
  v9 = v8;
  pErrorCode[0] = U_ZERO_ERROR;
  v10 = *(_BYTE *)(a1 + 23);
  if (v10 >= 0)
    v11 = (const UChar *)a1;
  else
    v11 = *(const UChar **)a1;
  if (v10 >= 0)
    v12 = *(unsigned __int8 *)(a1 + 23);
  else
    v12 = *(_DWORD *)(a1 + 8);
  u_strToUTF8(v8, pErrorCode[1] + 1, 0, v11, v12, pErrorCode);
  if (pErrorCode[0])
  {
    v15 = __cxa_allocate_exception(0x40uLL);
    v19 = 37;
    std::to_string(&v17, pErrorCode[0]);
    v16 = std::string::insert(&v17, 0, "u_strToUTF8: ");
    v18 = *v16;
    v16->__r_.__value_.__l.__size_ = 0;
    v16->__r_.__value_.__r.__words[2] = 0;
    v16->__r_.__value_.__r.__words[0] = 0;
    mediaplatform::PlatformErrorCondition::PlatformErrorCondition((uint64_t)v15, &v19, (__int128 *)&v18);
  }
  std::string::basic_string[abi:ne180100](a2, v9, pErrorCode[1]);
  return (_QWORD *)MEMORY[0x20BD27AE4](v9, 0x1000C8077774924);
}

void sub_20A856E9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  uint64_t v21;
  void *v22;
  int v23;

  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v23 & 1) == 0)
    {
LABEL_8:
      MEMORY[0x20BD27AE4](v21, 0x1000C8077774924);
      _Unwind_Resume(a1);
    }
  }
  else if (!v23)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v22);
  goto LABEL_8;
}

_QWORD *mediaplatform::WStringToUCharString@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  int v4;
  const __int32 *v5;
  int32_t v6;
  UChar *v8;
  uint64_t v9;
  int v10;
  const __int32 *v11;
  int32_t v12;
  void *exception;
  std::string *v14;
  void *v15;
  std::string *v16;
  std::string v17;
  std::string v18;
  int v19;
  UErrorCode v20;
  UErrorCode pErrorCode[2];
  UChar dest[256];
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)pErrorCode = 0;
  v4 = *(char *)(a1 + 23);
  if (v4 >= 0)
    v5 = (const __int32 *)a1;
  else
    v5 = *(const __int32 **)a1;
  if (v4 >= 0)
    v6 = *(unsigned __int8 *)(a1 + 23);
  else
    v6 = *(_DWORD *)(a1 + 8);
  u_strFromWCS(dest, 256, (int32_t *)&pErrorCode[1], v5, v6, pErrorCode);
  if (pErrorCode[0] == U_STRING_NOT_TERMINATED_WARNING)
    return std::wstring::basic_string[abi:ne180100](a2, (uint64_t)dest, pErrorCode[1]);
  if (pErrorCode[0] != U_BUFFER_OVERFLOW_ERROR)
  {
    if (pErrorCode[0])
    {
      exception = __cxa_allocate_exception(0x40uLL);
      v20 = U_STANDARD_ERROR_LIMIT|U_INTERNAL_PROGRAM_ERROR;
      std::to_string(&v17, pErrorCode[0]);
      v14 = std::string::insert(&v17, 0, "u_strFromWCS: ");
      v18 = *v14;
      v14->__r_.__value_.__l.__size_ = 0;
      v14->__r_.__value_.__r.__words[2] = 0;
      v14->__r_.__value_.__r.__words[0] = 0;
      mediaplatform::PlatformErrorCondition::PlatformErrorCondition((uint64_t)exception, (int *)&v20, (__int128 *)&v18);
    }
    return std::wstring::basic_string[abi:ne180100](a2, (uint64_t)dest, pErrorCode[1]);
  }
  v20 = U_ZERO_ERROR;
  v8 = (UChar *)operator new[]();
  v9 = (uint64_t)v8;
  v10 = *(char *)(a1 + 23);
  if (v10 >= 0)
    v11 = (const __int32 *)a1;
  else
    v11 = *(const __int32 **)a1;
  if (v10 >= 0)
    v12 = *(unsigned __int8 *)(a1 + 23);
  else
    v12 = *(_DWORD *)(a1 + 8);
  u_strFromWCS(v8, pErrorCode[1] + 1, 0, v11, v12, &v20);
  if (v20)
  {
    v15 = __cxa_allocate_exception(0x40uLL);
    v19 = 37;
    std::to_string(&v17, v20);
    v16 = std::string::insert(&v17, 0, "u_strFromWCS: ");
    v18 = *v16;
    v16->__r_.__value_.__l.__size_ = 0;
    v16->__r_.__value_.__r.__words[2] = 0;
    v16->__r_.__value_.__r.__words[0] = 0;
    mediaplatform::PlatformErrorCondition::PlatformErrorCondition((uint64_t)v15, &v19, (__int128 *)&v18);
  }
  std::wstring::basic_string[abi:ne180100](a2, v9, pErrorCode[1]);
  return (_QWORD *)MEMORY[0x20BD27AE4](v9, 0x1000C80BDFB0063);
}

void sub_20A8571D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  uint64_t v21;
  void *v22;
  int v23;

  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v23 & 1) == 0)
    {
LABEL_8:
      MEMORY[0x20BD27AE4](v21, 0x1000C80BDFB0063);
      _Unwind_Resume(a1);
    }
  }
  else if (!v23)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v22);
  goto LABEL_8;
}

_QWORD *mediaplatform::UCharStringToWString@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  int v4;
  const UChar *v5;
  int32_t v6;
  __int32 *v8;
  __int32 *v9;
  int v10;
  const UChar *v11;
  int32_t v12;
  void *exception;
  std::string *v14;
  void *v15;
  std::string *v16;
  std::string v17;
  std::string v18;
  int v19;
  UErrorCode v20;
  UErrorCode pErrorCode[2];
  __int32 dest[256];
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)pErrorCode = 0;
  v4 = *(char *)(a1 + 23);
  if (v4 >= 0)
    v5 = (const UChar *)a1;
  else
    v5 = *(const UChar **)a1;
  if (v4 >= 0)
    v6 = *(unsigned __int8 *)(a1 + 23);
  else
    v6 = *(_DWORD *)(a1 + 8);
  u_strToWCS(dest, 256, (int32_t *)&pErrorCode[1], v5, v6, pErrorCode);
  if (pErrorCode[0] == U_STRING_NOT_TERMINATED_WARNING)
    return std::wstring::basic_string[abi:ne180100](a2, dest, pErrorCode[1]);
  if (pErrorCode[0] != U_BUFFER_OVERFLOW_ERROR)
  {
    if (pErrorCode[0])
    {
      exception = __cxa_allocate_exception(0x40uLL);
      v20 = U_STANDARD_ERROR_LIMIT|U_INTERNAL_PROGRAM_ERROR;
      std::to_string(&v17, pErrorCode[0]);
      v14 = std::string::insert(&v17, 0, "u_strToWCS: ");
      v18 = *v14;
      v14->__r_.__value_.__l.__size_ = 0;
      v14->__r_.__value_.__r.__words[2] = 0;
      v14->__r_.__value_.__r.__words[0] = 0;
      mediaplatform::PlatformErrorCondition::PlatformErrorCondition((uint64_t)exception, (int *)&v20, (__int128 *)&v18);
    }
    return std::wstring::basic_string[abi:ne180100](a2, dest, pErrorCode[1]);
  }
  v20 = U_ZERO_ERROR;
  v8 = (__int32 *)operator new[]();
  v9 = v8;
  v10 = *(char *)(a1 + 23);
  if (v10 >= 0)
    v11 = (const UChar *)a1;
  else
    v11 = *(const UChar **)a1;
  if (v10 >= 0)
    v12 = *(unsigned __int8 *)(a1 + 23);
  else
    v12 = *(_DWORD *)(a1 + 8);
  u_strToWCS(v8, pErrorCode[1] + 1, 0, v11, v12, &v20);
  if (v20)
  {
    v15 = __cxa_allocate_exception(0x40uLL);
    v19 = 37;
    std::to_string(&v17, v20);
    v16 = std::string::insert(&v17, 0, "u_strToWCS: ");
    v18 = *v16;
    v16->__r_.__value_.__l.__size_ = 0;
    v16->__r_.__value_.__r.__words[2] = 0;
    v16->__r_.__value_.__r.__words[0] = 0;
    mediaplatform::PlatformErrorCondition::PlatformErrorCondition((uint64_t)v15, &v19, (__int128 *)&v18);
  }
  std::wstring::basic_string[abi:ne180100](a2, v9, pErrorCode[1]);
  return (_QWORD *)MEMORY[0x20BD27AE4](v9, 0x1000C8052888210);
}

void sub_20A85750C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  uint64_t v21;
  void *v22;
  int v23;

  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v23 & 1) == 0)
    {
LABEL_8:
      MEMORY[0x20BD27AE4](v21, 0x1000C8052888210);
      _Unwind_Resume(a1);
    }
  }
  else if (!v23)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v22);
  goto LABEL_8;
}

uint64_t mediaplatform::StringToWCharString@<X0>(uint64_t a1@<X0>, std::wstring *a2@<X8>)
{
  uint64_t v4;
  char *v5;
  _BYTE v7[192];
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  std::wstring_convert<std::codecvt_utf8_utf16<wchar_t,1114111ul,(std::codecvt_mode)0>,wchar_t,std::allocator<wchar_t>,std::allocator<char>>::wstring_convert[abi:ne180100]((uint64_t)v7);
  v4 = *(unsigned __int8 *)(a1 + 23);
  if ((v4 & 0x80u) == 0)
    v5 = (char *)a1;
  else
    v5 = *(char **)a1;
  if ((v4 & 0x80u) != 0)
    v4 = *(_QWORD *)(a1 + 8);
  std::wstring_convert<std::codecvt_utf8_utf16<wchar_t,1114111ul,(std::codecvt_mode)0>,wchar_t,std::allocator<wchar_t>,std::allocator<char>>::from_bytes(a2, (uint64_t)v7, v5, &v5[v4]);
  return std::wstring_convert<std::codecvt_utf8_utf16<wchar_t,1114111ul,(std::codecvt_mode)0>,wchar_t,std::allocator<wchar_t>,std::allocator<char>>::~wstring_convert((uint64_t)v7);
}

void sub_20A85767C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::wstring_convert<std::codecvt_utf8_utf16<wchar_t,1114111ul,(std::codecvt_mode)0>,wchar_t,std::allocator<wchar_t>,std::allocator<char>>::~wstring_convert((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t mediaplatform::WCharStringToString@<X0>(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  uint64_t v4;
  std::string *v5;
  _BYTE v7[192];
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  std::wstring_convert<std::codecvt_utf8_utf16<wchar_t,1114111ul,(std::codecvt_mode)0>,wchar_t,std::allocator<wchar_t>,std::allocator<char>>::wstring_convert[abi:ne180100]((uint64_t)v7);
  v4 = *(unsigned __int8 *)(a1 + 23);
  if ((v4 & 0x80u) == 0)
    v5 = (std::string *)a1;
  else
    v5 = *(std::string **)a1;
  if ((v4 & 0x80u) != 0)
    v4 = *(_QWORD *)(a1 + 8);
  std::wstring_convert<std::codecvt_utf8_utf16<wchar_t,1114111ul,(std::codecvt_mode)0>,wchar_t,std::allocator<wchar_t>,std::allocator<char>>::to_bytes(a2, (uint64_t)v7, v5, (std::string *)((char *)v5 + 4 * v4));
  return std::wstring_convert<std::codecvt_utf8_utf16<wchar_t,1114111ul,(std::codecvt_mode)0>,wchar_t,std::allocator<wchar_t>,std::allocator<char>>::~wstring_convert((uint64_t)v7);
}

void sub_20A857724(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::wstring_convert<std::codecvt_utf8_utf16<wchar_t,1114111ul,(std::codecvt_mode)0>,wchar_t,std::allocator<wchar_t>,std::allocator<char>>::~wstring_convert((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL mediaplatform::UStringStartsWith(uint64_t *a1, uint64_t *a2, int a3)
{
  unint64_t v3;
  unint64_t v4;
  BOOL v5;
  unint64_t i;
  uint64_t *v10;
  __int16 v11;
  uint64_t *v12;
  __int16 v13;
  uint64_t *v14;

  v3 = *((unsigned __int8 *)a1 + 23);
  if ((v3 & 0x80u) != 0)
    v3 = a1[1];
  if (*((char *)a2 + 23) >= 0)
    v4 = *((unsigned __int8 *)a2 + 23);
  else
    v4 = a2[1];
  if (v4 <= v3)
  {
    if (v4)
    {
      v5 = 0;
      for (i = 0; i != v4; v5 = i >= v4)
      {
        if (*((char *)a1 + 23) >= 0)
          v10 = a1;
        else
          v10 = (uint64_t *)*a1;
        v11 = *((_WORD *)v10 + i);
        if (a3)
        {
          v11 = MEMORY[0x20BD281BC](*((unsigned __int16 *)v10 + i));
          if (*((char *)a2 + 23) >= 0)
            v12 = a2;
          else
            v12 = (uint64_t *)*a2;
          v13 = MEMORY[0x20BD281BC](*((unsigned __int16 *)v12 + i));
        }
        else
        {
          if (*((char *)a2 + 23) >= 0)
            v14 = a2;
          else
            v14 = (uint64_t *)*a2;
          v13 = *((_WORD *)v14 + i);
        }
        if (v13 != v11)
          break;
        ++i;
      }
    }
    else
    {
      return 1;
    }
  }
  else
  {
    return 0;
  }
  return v5;
}

BOOL mediaplatform::UCharIsAlphaNumeric(mediaplatform *this)
{
  return u_isalnum((UChar32)this) != 0;
}

BOOL mediaplatform::UCharIsPunctuation(mediaplatform *this)
{
  return u_ispunct((UChar32)this) != 0;
}

void mlcore::LyricsTable::~LyricsTable(mlcore::LyricsTable *this)
{
  mlcore::MediaTable<long long,int,int,std::string,int,int>::~MediaTable((uint64_t)this);
  JUMPOUT(0x20BD27AFCLL);
}

uint64_t mediaplatform::DatabaseTable<long long,int,int,std::string,int,int>::columnCount()
{
  return 6;
}

void mediaplatform::DatabaseTable<long long,int,int,std::string,int,int>::columnNames(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  mediaplatform::ColumnNamesApplier::operator()<long long>((uint64_t)a2, a1 + 336);
  mediaplatform::ColumnNamesApplier::operator()<int>((uint64_t)a2, a1 + 288);
  mediaplatform::ColumnNamesApplier::operator()<int>((uint64_t)a2, a1 + 240);
  mediaplatform::ColumnNamesApplier::operator()<std::string>((uint64_t)a2, a1 + 176);
  mediaplatform::ColumnNamesApplier::operator()<int>((uint64_t)a2, a1 + 128);
  mediaplatform::ColumnNamesApplier::operator()<int>((uint64_t)a2, a1 + 80);
}

void sub_20A857920(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void mediaplatform::DatabaseTable<long long,int,int,std::string,int,int>::targetColumnExpression(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  __int128 *v3;
  __int128 *v4[3];
  __int128 **v5;

  v3 = (__int128 *)(a1 + 8);
  (*(void (**)(__int128 **__return_ptr))(*(_QWORD *)a1 + 24))(v4);
  std::allocate_shared[abi:ne180100]<mediaplatform::SQLColumnNameExpression,std::allocator<mediaplatform::SQLColumnNameExpression>,std::string &,std::string const&,void>(a2, v4[0], v3);
  v5 = v4;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v5);
}

void sub_20A857998(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void mlcore::MediaTable<long long,int,int,std::string,int,int>::~MediaTable(uint64_t a1)
{
  *(_QWORD *)a1 = &off_24C3362F0;
  *(_QWORD *)(a1 + 640) = off_24C335D90;
  if (*(char *)(a1 + 671) < 0)
    operator delete(*(void **)(a1 + 648));
  *(_QWORD *)(a1 + 592) = off_24C335D90;
  if (*(char *)(a1 + 623) < 0)
    operator delete(*(void **)(a1 + 600));
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 528);
  *(_QWORD *)(a1 + 480) = off_24C335D90;
  if (*(char *)(a1 + 511) < 0)
    operator delete(*(void **)(a1 + 488));
  *(_QWORD *)(a1 + 432) = off_24C335D90;
  if (*(char *)(a1 + 463) < 0)
    operator delete(*(void **)(a1 + 440));
  *(_QWORD *)(a1 + 384) = off_24C335D90;
  if (*(char *)(a1 + 415) < 0)
    operator delete(*(void **)(a1 + 392));
  mediaplatform::DatabaseTable<long long,int,int,std::string,int,int>::~DatabaseTable(a1);
}

{
  mlcore::MediaTable<long long,int,int,std::string,int,int>::~MediaTable(a1);
  JUMPOUT(0x20BD27AFCLL);
}

void mediaplatform::DatabaseTable<long long,int,int,std::string,int,int>::~DatabaseTable(uint64_t a1)
{
  *(_QWORD *)a1 = &off_24C335788;
  *(_QWORD *)(a1 + 336) = off_24C335D90;
  if (*(char *)(a1 + 367) < 0)
    operator delete(*(void **)(a1 + 344));
  *(_QWORD *)(a1 + 288) = off_24C335D90;
  if (*(char *)(a1 + 319) < 0)
    operator delete(*(void **)(a1 + 296));
  *(_QWORD *)(a1 + 240) = off_24C335D90;
  if (*(char *)(a1 + 271) < 0)
    operator delete(*(void **)(a1 + 248));
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 176);
  *(_QWORD *)(a1 + 128) = off_24C335D90;
  if (*(char *)(a1 + 159) < 0)
    operator delete(*(void **)(a1 + 136));
  *(_QWORD *)(a1 + 80) = off_24C335D90;
  if (*(char *)(a1 + 111) < 0)
    operator delete(*(void **)(a1 + 88));
  if (*(char *)(a1 + 79) < 0)
    operator delete(*(void **)(a1 + 56));
  mediaplatform::DatabaseTableBase::~DatabaseTableBase((void **)a1);
}

{
  mediaplatform::DatabaseTable<long long,int,int,std::string,int,int>::~DatabaseTable(a1);
  JUMPOUT(0x20BD27AFCLL);
}

uint64_t mediaplatform::DatabaseColumnTuple<1ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(uint64_t a1)
{
  *(_QWORD *)(a1 + 208) = off_24C335D90;
  if (*(char *)(a1 + 239) < 0)
    operator delete(*(void **)(a1 + 216));
  *(_QWORD *)(a1 + 160) = off_24C335D90;
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 96);
  *(_QWORD *)(a1 + 48) = off_24C335D90;
  if (*(char *)(a1 + 79) < 0)
    operator delete(*(void **)(a1 + 56));
  *(_QWORD *)a1 = off_24C335D90;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

uint64_t mediaplatform::DatabaseColumnTuple<2ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(uint64_t a1)
{
  *(_QWORD *)(a1 + 160) = off_24C335D90;
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 96);
  *(_QWORD *)(a1 + 48) = off_24C335D90;
  if (*(char *)(a1 + 79) < 0)
    operator delete(*(void **)(a1 + 56));
  *(_QWORD *)a1 = off_24C335D90;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void mlcore::LyricsTable::persistentIDColumn(mlcore::LyricsTable *this@<X0>, uint64_t a2@<X8>)
{
  std::string *v4;

  *(_QWORD *)a2 = off_24C335D90;
  v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 415) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 49), *((_QWORD *)this + 50));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 392);
    *(_QWORD *)(a2 + 24) = *((_QWORD *)this + 51);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 104);
  *(_DWORD *)(a2 + 44) = *((_DWORD *)this + 107);
  *(_QWORD *)(a2 + 36) = *(_QWORD *)((char *)this + 420);
  *(_QWORD *)a2 = off_24C336AC0;
}

void mlcore::LyricsTable::checksumColumn(mlcore::LyricsTable *this@<X0>, uint64_t a2@<X8>)
{
  std::string *v4;

  *(_QWORD *)a2 = off_24C335D90;
  v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 463) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 55), *((_QWORD *)this + 56));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 440);
    *(_QWORD *)(a2 + 24) = *((_QWORD *)this + 57);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 116);
  *(_QWORD *)(a2 + 36) = *(_QWORD *)((char *)this + 468);
  *(_QWORD *)a2 = off_24C336AA0;
}

void mlcore::LyricsTable::pendingChecksumColumn(mlcore::LyricsTable *this@<X0>, uint64_t a2@<X8>)
{
  std::string *v4;

  *(_QWORD *)a2 = off_24C335D90;
  v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 511) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 61), *((_QWORD *)this + 62));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 488);
    *(_QWORD *)(a2 + 24) = *((_QWORD *)this + 63);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 128);
  *(_QWORD *)(a2 + 36) = *(_QWORD *)((char *)this + 516);
  *(_QWORD *)a2 = off_24C336AA0;
}

void mlcore::LyricsTable::lyricsColumn(mlcore::LyricsTable *this@<X0>, uint64_t a2@<X8>)
{
  std::string *v4;
  std::string *v5;

  *(_QWORD *)a2 = off_24C335D90;
  v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 559) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 67), *((_QWORD *)this + 68));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 536);
    *(_QWORD *)(a2 + 24) = *((_QWORD *)this + 69);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 140);
  *(_QWORD *)a2 = &off_24C335AB8;
  *(_BYTE *)(a2 + 36) = *((_BYTE *)this + 564);
  v5 = (std::string *)(a2 + 40);
  if (*((char *)this + 591) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)this + 71), *((_QWORD *)this + 72));
  }
  else
  {
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 568);
    *(_QWORD *)(a2 + 56) = *((_QWORD *)this + 73);
  }
  *(_QWORD *)a2 = &off_24C336A60;
}

void sub_20A857E70(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  uint64_t v3;

  *(_QWORD *)v1 = v3;
  if (*(char *)(v1 + 31) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

void mlcore::LyricsTable::storeLyricsAvailableColumn(mlcore::LyricsTable *this@<X0>, uint64_t a2@<X8>)
{
  std::string *v4;

  *(_QWORD *)a2 = off_24C335D90;
  v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 623) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 75), *((_QWORD *)this + 76));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 600);
    *(_QWORD *)(a2 + 24) = *((_QWORD *)this + 77);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 156);
  *(_QWORD *)(a2 + 36) = *(_QWORD *)((char *)this + 628);
  *(_QWORD *)a2 = off_24C336AA0;
}

void mlcore::LyricsTable::timeSyncedLyricsAvailableColumn(mlcore::LyricsTable *this@<X0>, uint64_t a2@<X8>)
{
  std::string *v4;

  *(_QWORD *)a2 = off_24C335D90;
  v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 671) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 81), *((_QWORD *)this + 82));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 648);
    *(_QWORD *)(a2 + 24) = *((_QWORD *)this + 83);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 168);
  *(_QWORD *)(a2 + 36) = *(_QWORD *)((char *)this + 676);
  *(_QWORD *)a2 = off_24C336AA0;
}

void mlcore::PropertyCache::~PropertyCache(mlcore::PropertyCache *this)
{
  mlcore::PropertyCacheBase<long long,int,double,std::string,mediaplatform::Data>::~PropertyCacheBase(this);
  JUMPOUT(0x20BD27AFCLL);
}

uint64_t mlcore::PropertyCache::description@<X0>(mlcore::PropertyCache *this@<X0>, std::string *a2@<X8>)
{
  _QWORD *v4;
  std::locale::id *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const std::locale::facet *v14;
  _QWORD *v15;
  std::locale::id *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  const std::locale::facet *v25;
  _QWORD *v26;
  std::locale::id *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  const std::locale::facet *v36;
  uint64_t *v37;
  std::locale::id *v38;
  std::string::size_type v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t p_size;
  uint64_t v47;
  const std::locale::facet *v48;
  _QWORD *v49;
  std::locale::id *v50;
  const void *v51;
  size_t v52;
  void *v53;
  std::string::size_type v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  std::string *v61;
  std::string::size_type size;
  const std::locale::facet *v63;
  std::string *v64;
  __int128 v65;
  std::string *v66;
  _QWORD v68[11];
  char v69;
  uint64_t v70;
  std::string v71;
  int64_t v72;
  void *v73;
  char v74;
  std::string v75;
  std::locale v76;

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v68);
  v4 = (_QWORD *)*((_QWORD *)this + 23);
  if (v4)
  {
    v5 = (std::locale::id *)MEMORY[0x24BEDB350];
    do
    {
      v6 = v4[2];
      v71.__r_.__value_.__s.__data_[0] = 9;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v68, (uint64_t)&v71, 1);
      v9 = *(_QWORD *)(v6 + 16);
      v8 = v6 + 16;
      v7 = v9;
      v10 = *(char *)(v8 + 23);
      if (v10 >= 0)
        v11 = v8;
      else
        v11 = v7;
      if (v10 >= 0)
        v12 = *(unsigned __int8 *)(v8 + 23);
      else
        v12 = *(_QWORD *)(v8 + 8);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v68, v11, v12);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v68, (uint64_t)" = ", 3);
      v13 = (_QWORD *)std::ostream::operator<<();
      std::ios_base::getloc((const std::ios_base *)((char *)v13 + *(_QWORD *)(*v13 - 24)));
      v14 = std::locale::use_facet((const std::locale *)&v71, v5);
      ((void (*)(const std::locale::facet *, uint64_t))v14->__vftable[2].~facet_0)(v14, 10);
      std::locale::~locale((std::locale *)&v71);
      std::ostream::put();
      std::ostream::flush();
      v4 = (_QWORD *)*v4;
    }
    while (v4);
  }
  v15 = (_QWORD *)*((_QWORD *)this + 18);
  if (v15)
  {
    v16 = (std::locale::id *)MEMORY[0x24BEDB350];
    do
    {
      v17 = v15[2];
      v71.__r_.__value_.__s.__data_[0] = 9;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v68, (uint64_t)&v71, 1);
      v20 = *(_QWORD *)(v17 + 16);
      v19 = v17 + 16;
      v18 = v20;
      v21 = *(char *)(v19 + 23);
      if (v21 >= 0)
        v22 = v19;
      else
        v22 = v18;
      if (v21 >= 0)
        v23 = *(unsigned __int8 *)(v19 + 23);
      else
        v23 = *(_QWORD *)(v19 + 8);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v68, v22, v23);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v68, (uint64_t)" = ", 3);
      v24 = (_QWORD *)std::ostream::operator<<();
      std::ios_base::getloc((const std::ios_base *)((char *)v24 + *(_QWORD *)(*v24 - 24)));
      v25 = std::locale::use_facet((const std::locale *)&v71, v16);
      ((void (*)(const std::locale::facet *, uint64_t))v25->__vftable[2].~facet_0)(v25, 10);
      std::locale::~locale((std::locale *)&v71);
      std::ostream::put();
      std::ostream::flush();
      v15 = (_QWORD *)*v15;
    }
    while (v15);
  }
  v26 = (_QWORD *)*((_QWORD *)this + 13);
  if (v26)
  {
    v27 = (std::locale::id *)MEMORY[0x24BEDB350];
    do
    {
      v28 = v26[2];
      v71.__r_.__value_.__s.__data_[0] = 9;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v68, (uint64_t)&v71, 1);
      v31 = *(_QWORD *)(v28 + 16);
      v30 = v28 + 16;
      v29 = v31;
      v32 = *(char *)(v30 + 23);
      if (v32 >= 0)
        v33 = v30;
      else
        v33 = v29;
      if (v32 >= 0)
        v34 = *(unsigned __int8 *)(v30 + 23);
      else
        v34 = *(_QWORD *)(v30 + 8);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v68, v33, v34);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v68, (uint64_t)" = ", 3);
      v35 = (_QWORD *)std::ostream::operator<<();
      std::ios_base::getloc((const std::ios_base *)((char *)v35 + *(_QWORD *)(*v35 - 24)));
      v36 = std::locale::use_facet((const std::locale *)&v71, v27);
      ((void (*)(const std::locale::facet *, uint64_t))v36->__vftable[2].~facet_0)(v36, 10);
      std::locale::~locale((std::locale *)&v71);
      std::ostream::put();
      std::ostream::flush();
      v26 = (_QWORD *)*v26;
    }
    while (v26);
  }
  v37 = (uint64_t *)*((_QWORD *)this + 8);
  if (v37)
  {
    v38 = (std::locale::id *)MEMORY[0x24BEDB350];
    do
    {
      v39 = v37[2];
      v71.__r_.__value_.__r.__words[0] = v39;
      if (*((char *)v37 + 47) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)&v71.__r_.__value_.__r.__words[1], (const std::string::value_type *)v37[3], v37[4]);
        v39 = v71.__r_.__value_.__r.__words[0];
      }
      else
      {
        *(_OWORD *)&v71.__r_.__value_.__r.__words[1] = *(_OWORD *)(v37 + 3);
        v72 = v37[5];
      }
      v75.__r_.__value_.__s.__data_[0] = 9;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v68, (uint64_t)&v75, 1);
      v42 = *(_QWORD *)(v39 + 16);
      v41 = v39 + 16;
      v40 = v42;
      v43 = *(char *)(v41 + 23);
      if (v43 >= 0)
        v44 = v41;
      else
        v44 = v40;
      if (v43 >= 0)
        v45 = *(unsigned __int8 *)(v41 + 23);
      else
        v45 = *(_QWORD *)(v41 + 8);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v68, v44, v45);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v68, (uint64_t)" = ", 3);
      if (v72 >= 0)
        p_size = (uint64_t)&v71.__r_.__value_.__l.__size_;
      else
        p_size = v71.__r_.__value_.__l.__size_;
      if (v72 >= 0)
        v47 = HIBYTE(v72);
      else
        v47 = v71.__r_.__value_.__r.__words[2];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v68, p_size, v47);
      std::ios_base::getloc((const std::ios_base *)((char *)v68 + *(_QWORD *)(v68[0] - 24)));
      v48 = std::locale::use_facet((const std::locale *)&v75, v38);
      ((void (*)(const std::locale::facet *, uint64_t))v48->__vftable[2].~facet_0)(v48, 10);
      std::locale::~locale((std::locale *)&v75);
      std::ostream::put();
      std::ostream::flush();
      if (SHIBYTE(v72) < 0)
        operator delete((void *)v71.__r_.__value_.__l.__size_);
      v37 = (uint64_t *)*v37;
    }
    while (v37);
  }
  v49 = (_QWORD *)*((_QWORD *)this + 3);
  if (v49)
  {
    v50 = (std::locale::id *)MEMORY[0x24BEDB350];
    do
    {
      v51 = (const void *)v49[6];
      v52 = v49[4];
      v71.__r_.__value_.__r.__words[0] = v49[2];
      v71.__r_.__value_.__l.__size_ = (std::string::size_type)&off_24C331510;
      v71.__r_.__value_.__r.__words[2] = v52;
      v72 = v52;
      if (v52)
        v53 = (void *)operator new[]();
      else
        v53 = 0;
      v73 = v53;
      v74 = 1;
      if (v51)
        memcpy(v53, v51, v52);
      else
        bzero(v53, v52);
      v54 = v71.__r_.__value_.__r.__words[0];
      v75.__r_.__value_.__s.__data_[0] = 9;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v68, (uint64_t)&v75, 1);
      v57 = *(_QWORD *)(v54 + 16);
      v56 = v54 + 16;
      v55 = v57;
      v58 = *(char *)(v56 + 23);
      if (v58 >= 0)
        v59 = v56;
      else
        v59 = v55;
      if (v58 >= 0)
        v60 = *(unsigned __int8 *)(v56 + 23);
      else
        v60 = *(_QWORD *)(v56 + 8);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v68, v59, v60);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v68, (uint64_t)" = ", 3);
      (*(void (**)(std::string *__return_ptr, std::string::size_type *))(v71.__r_.__value_.__l.__size_ + 40))(&v75, &v71.__r_.__value_.__l.__size_);
      if ((v75.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v61 = &v75;
      else
        v61 = (std::string *)v75.__r_.__value_.__r.__words[0];
      if ((v75.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(v75.__r_.__value_.__r.__words[2]);
      else
        size = v75.__r_.__value_.__l.__size_;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v68, (uint64_t)v61, size);
      std::ios_base::getloc((const std::ios_base *)((char *)v68 + *(_QWORD *)(v68[0] - 24)));
      v63 = std::locale::use_facet(&v76, v50);
      ((void (*)(const std::locale::facet *, uint64_t))v63->__vftable[2].~facet_0)(v63, 10);
      std::locale::~locale(&v76);
      std::ostream::put();
      std::ostream::flush();
      if (SHIBYTE(v75.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v75.__r_.__value_.__l.__data_);
      v71.__r_.__value_.__l.__size_ = (std::string::size_type)&off_24C331510;
      if (v74 && v73)
        MEMORY[0x20BD27AE4](v73, 0x1000C8077774924);
      v49 = (_QWORD *)*v49;
    }
    while (v49);
  }
  std::stringbuf::str();
  v64 = std::string::insert(&v75, 0, "{\n");
  v65 = *(_OWORD *)&v64->__r_.__value_.__l.__data_;
  v71.__r_.__value_.__r.__words[2] = v64->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v71.__r_.__value_.__l.__data_ = v65;
  v64->__r_.__value_.__l.__size_ = 0;
  v64->__r_.__value_.__r.__words[2] = 0;
  v64->__r_.__value_.__r.__words[0] = 0;
  v66 = std::string::append(&v71, "}\n");
  *a2 = *v66;
  v66->__r_.__value_.__l.__size_ = 0;
  v66->__r_.__value_.__r.__words[2] = 0;
  v66->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v71.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v71.__r_.__value_.__l.__data_);
  if (SHIBYTE(v75.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v75.__r_.__value_.__l.__data_);
  v68[0] = *MEMORY[0x24BEDB800];
  *(_QWORD *)((char *)v68 + *(_QWORD *)(v68[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  v68[1] = MEMORY[0x24BEDB848] + 16;
  if (v69 < 0)
    operator delete((void *)v68[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x20BD27A84](&v70);
}

void sub_20A85863C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  if (*(char *)(v2 - 169) < 0)
    operator delete(*(void **)(v2 - 192));
  if (*(char *)(v2 - 113) < 0)
    operator delete(*(void **)(v2 - 136));
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'mlcore::PropertyCache::~PropertyCache(mlcore::PropertyCache *this)
{
  mlcore::PropertyCacheBase<long long,int,double,std::string,mediaplatform::Data>::~PropertyCacheBase((_QWORD *)this - 26);
}

{
  mlcore::PropertyCacheBase<long long,int,double,std::string,mediaplatform::Data>::~PropertyCacheBase((_QWORD *)this - 26);
  JUMPOUT(0x20BD27AFCLL);
}

uint64_t `non-virtual thunk to'mlcore::PropertyCache::description@<X0>(mlcore::PropertyCache *this@<X0>, std::string *a2@<X8>)
{
  return mlcore::PropertyCache::description((mlcore::PropertyCache *)((char *)this - 208), a2);
}

_QWORD *mlcore::PropertyCache::PropertyCache(mlcore::PropertyCache *this, const mlcore::PropertyCache *a2)
{
  _QWORD *result;

  result = (_QWORD *)mlcore::PropertyCacheBase<long long,int,double,std::string,mediaplatform::Data>::PropertyCacheBase((uint64_t)this, (uint64_t)a2);
  *result = &off_24C3371C0;
  result[26] = &unk_24C3371E8;
  return result;
}

void mlcore::PropertyCache::allProperties(mlcore::PropertyCache *this@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  unint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  unint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t *i;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  _QWORD *v43;
  uint64_t v44;
  unint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  const void *v48;
  size_t v49;
  void *v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  _QWORD *v56;
  uint64_t v57;
  std::string __p;

  v3 = (_QWORD *)*((_QWORD *)this + 23);
  if (v3)
  {
    v4 = 0;
    v5 = 0;
    v6 = 0;
    do
    {
      v7 = v3[2];
      if ((unint64_t)v5 >= v6)
      {
        v9 = v5 - v4;
        v10 = v9 + 1;
        if ((unint64_t)(v9 + 1) >> 61)
          std::vector<std::string>::__throw_length_error[abi:ne180100]();
        if ((uint64_t)(v6 - (_QWORD)v4) >> 2 > v10)
          v10 = (uint64_t)(v6 - (_QWORD)v4) >> 2;
        if (v6 - (unint64_t)v4 >= 0x7FFFFFFFFFFFFFF8)
          v11 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v11 = v10;
        if (v11)
          v11 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<mlcore::ModelPropertyBase *>>(v11);
        else
          v12 = 0;
        v13 = (_QWORD *)(v11 + 8 * v9);
        *v13 = v7;
        v8 = v13 + 1;
        while (v5 != v4)
        {
          v14 = *--v5;
          *--v13 = v14;
        }
        v15 = v11 + 8 * v12;
        if (v4)
          operator delete(v4);
        v4 = v13;
        v6 = v15;
      }
      else
      {
        *v5 = v7;
        v8 = v5 + 1;
      }
      v3 = (_QWORD *)*v3;
      v5 = v8;
    }
    while (v3);
  }
  else
  {
    v4 = 0;
    v8 = 0;
    v6 = 0;
  }
  v16 = (_QWORD *)*((_QWORD *)this + 18);
  if (v16)
  {
    do
    {
      v17 = v16[2];
      if ((unint64_t)v8 >= v6)
      {
        v19 = v8 - v4;
        v20 = v19 + 1;
        if ((unint64_t)(v19 + 1) >> 61)
          std::vector<std::string>::__throw_length_error[abi:ne180100]();
        if ((uint64_t)(v6 - (_QWORD)v4) >> 2 > v20)
          v20 = (uint64_t)(v6 - (_QWORD)v4) >> 2;
        if (v6 - (unint64_t)v4 >= 0x7FFFFFFFFFFFFFF8)
          v21 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v21 = v20;
        if (v21)
          v21 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<mlcore::ModelPropertyBase *>>(v21);
        else
          v22 = 0;
        v23 = (_QWORD *)(v21 + 8 * v19);
        *v23 = v17;
        v18 = v23 + 1;
        while (v8 != v4)
        {
          v24 = *--v8;
          *--v23 = v24;
        }
        v25 = v21 + 8 * v22;
        if (v4)
          operator delete(v4);
        v4 = v23;
        v6 = v25;
      }
      else
      {
        *v8 = v17;
        v18 = v8 + 1;
      }
      v16 = (_QWORD *)*v16;
      v8 = v18;
    }
    while (v16);
  }
  else
  {
    v18 = v8;
  }
  v26 = (_QWORD *)*((_QWORD *)this + 13);
  if (v26)
  {
    do
    {
      v27 = v26[2];
      if ((unint64_t)v18 >= v6)
      {
        v29 = v18 - v4;
        v30 = v29 + 1;
        if ((unint64_t)(v29 + 1) >> 61)
          std::vector<std::string>::__throw_length_error[abi:ne180100]();
        if ((uint64_t)(v6 - (_QWORD)v4) >> 2 > v30)
          v30 = (uint64_t)(v6 - (_QWORD)v4) >> 2;
        if (v6 - (unint64_t)v4 >= 0x7FFFFFFFFFFFFFF8)
          v31 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v31 = v30;
        if (v31)
          v31 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<mlcore::ModelPropertyBase *>>(v31);
        else
          v32 = 0;
        v33 = (_QWORD *)(v31 + 8 * v29);
        *v33 = v27;
        v28 = v33 + 1;
        while (v18 != v4)
        {
          v34 = *--v18;
          *--v33 = v34;
        }
        v35 = v31 + 8 * v32;
        if (v4)
          operator delete(v4);
        v4 = v33;
        v6 = v35;
      }
      else
      {
        *v18 = v27;
        v28 = v18 + 1;
      }
      v26 = (_QWORD *)*v26;
      v18 = v28;
    }
    while (v26);
  }
  else
  {
    v28 = v18;
  }
  for (i = (uint64_t *)*((_QWORD *)this + 8); i; i = (uint64_t *)*i)
  {
    v37 = i[2];
    if (*((char *)i + 47) < 0)
      std::string::__init_copy_ctor_external(&__p, (const std::string::value_type *)i[3], i[4]);
    else
      __p = *(std::string *)((_BYTE *)i + 1);
    if ((unint64_t)v28 >= v6)
    {
      v38 = v28 - v4;
      v39 = v38 + 1;
      if ((unint64_t)(v38 + 1) >> 61)
        std::vector<std::string>::__throw_length_error[abi:ne180100]();
      if ((uint64_t)(v6 - (_QWORD)v4) >> 2 > v39)
        v39 = (uint64_t)(v6 - (_QWORD)v4) >> 2;
      if (v6 - (unint64_t)v4 >= 0x7FFFFFFFFFFFFFF8)
        v40 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v40 = v39;
      if (v40)
        v40 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<mlcore::ModelPropertyBase *>>(v40);
      else
        v41 = 0;
      v42 = (_QWORD *)(v40 + 8 * v38);
      *v42 = v37;
      v43 = v42 + 1;
      while (v28 != v4)
      {
        v44 = *--v28;
        *--v42 = v44;
      }
      v45 = v40 + 8 * v41;
      if (v4)
        operator delete(v4);
      v4 = v42;
      v28 = v43;
      v6 = v45;
    }
    else
    {
      *v28++ = v37;
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  v46 = (_QWORD *)*((_QWORD *)this + 3);
  if (v46)
  {
    while (1)
    {
      v47 = v46[2];
      v48 = (const void *)v46[6];
      v49 = v46[4];
      v50 = v49 ? (void *)operator new[]() : 0;
      if (v48)
        memcpy(v50, v48, v49);
      else
        bzero(v50, v49);
      if ((unint64_t)v28 >= v6)
        break;
      *v28++ = v47;
      if (v50)
        goto LABEL_98;
LABEL_99:
      v46 = (_QWORD *)*v46;
      if (!v46)
        goto LABEL_117;
    }
    v51 = v28 - v4;
    v52 = v51 + 1;
    if ((unint64_t)(v51 + 1) >> 61)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    if ((uint64_t)(v6 - (_QWORD)v4) >> 2 > v52)
      v52 = (uint64_t)(v6 - (_QWORD)v4) >> 2;
    if (v6 - (unint64_t)v4 >= 0x7FFFFFFFFFFFFFF8)
      v53 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v53 = v52;
    if (v53)
      v53 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<mlcore::ModelPropertyBase *>>(v53);
    else
      v54 = 0;
    v55 = (_QWORD *)(v53 + 8 * v51);
    *v55 = v47;
    v56 = v55 + 1;
    while (v28 != v4)
    {
      v57 = *--v28;
      *--v55 = v57;
    }
    v6 = v53 + 8 * v54;
    if (v4)
      operator delete(v4);
    v4 = v55;
    v28 = v56;
    if (!v50)
      goto LABEL_99;
LABEL_98:
    MEMORY[0x20BD27AE4](v50, 0x1000C8077774924);
    goto LABEL_99;
  }
LABEL_117:
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  std::vector<mlcore::ModelPropertyBase *>::__init_with_size[abi:ne180100]<mlcore::ModelPropertyBase **,mlcore::ModelPropertyBase **>(a2, v4, (uint64_t)v28, v28 - v4);
  if (v4)
    operator delete(v4);
}

void sub_20A858D4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  uint64_t v17;
  void *v18;

  if (v17)
    MEMORY[0x20BD27AE4](v17, 0x1000C8077774924);
  if (v18)
    operator delete(v18);
  _Unwind_Resume(exception_object);
}

void mlcore::TVEpisode::~TVEpisode(mlcore::TVEpisode *this)
{
  *(_QWORD *)this = off_24C33A860;
  mlcore::PropertyCacheBase<long long,int,double,std::string,mediaplatform::Data>::~PropertyCacheBase((_QWORD *)this + 1);
}

{
  *(_QWORD *)this = off_24C33A860;
  mlcore::PropertyCacheBase<long long,int,double,std::string,mediaplatform::Data>::~PropertyCacheBase((_QWORD *)this + 1);
  JUMPOUT(0x20BD27AFCLL);
}

double std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::TypedEntityClass<mlcore::TVEpisode>::sharedPointer(void)::{lambda(void)#1} &&>>()
{
  uint64_t v0;
  double result;

  v0 = operator new();
  result = 0.0;
  *(_OWORD *)(v0 + 16) = 0u;
  *(_OWORD *)(v0 + 32) = 0u;
  *(_OWORD *)(v0 + 48) = 0u;
  *(_OWORD *)(v0 + 64) = 0u;
  *(_OWORD *)(v0 + 80) = 0u;
  *(_QWORD *)(v0 + 96) = 0;
  *(_DWORD *)(v0 + 104) = 1065353216;
  *(_OWORD *)(v0 + 112) = 0u;
  *(_OWORD *)(v0 + 128) = 0u;
  *(_DWORD *)(v0 + 144) = 1065353216;
  *(_QWORD *)v0 = &off_24C339578;
  *(_QWORD *)(v0 + 8) = 850045863;
  mlcore::TypedEntityClass<mlcore::TVEpisode>::sharedPointer(void)::__sharedPointer = v0;
  return result;
}

void mlcore::TypedEntityClass<mlcore::TVEpisode>::~TypedEntityClass(mlcore::EntityClass *a1)
{
  mlcore::EntityClass::~EntityClass(a1);
  JUMPOUT(0x20BD27AFCLL);
}

uint64_t mlcore::TypedEntityClass<mlcore::TVEpisode>::description(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
}

__n128 mlcore::TypedEntityClass<mlcore::TVEpisode>::create@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, __n128 *a4@<X8>)
{
  char *v8;
  uint64_t v9;
  unint64_t *v10;
  uint64_t v11;
  __n128 result;
  __n128 v13;
  unint64_t v14[3];
  unint64_t *v15;
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  v8 = (char *)operator new(0x100uLL);
  *((_QWORD *)v8 + 1) = 0;
  *((_QWORD *)v8 + 2) = 0;
  *(_QWORD *)v8 = &off_24C33D668;
  *(_OWORD *)(v8 + 40) = 0u;
  *(_OWORD *)(v8 + 56) = 0u;
  *((_DWORD *)v8 + 18) = 1065353216;
  *((_OWORD *)v8 + 5) = 0u;
  *((_OWORD *)v8 + 6) = 0u;
  *((_DWORD *)v8 + 28) = 1065353216;
  *(_OWORD *)(v8 + 120) = 0u;
  *(_OWORD *)(v8 + 136) = 0u;
  *((_DWORD *)v8 + 38) = 1065353216;
  *((_OWORD *)v8 + 10) = 0u;
  *((_OWORD *)v8 + 11) = 0u;
  *((_DWORD *)v8 + 48) = 1065353216;
  *(_OWORD *)(v8 + 216) = 0u;
  *((_DWORD *)v8 + 58) = 1065353216;
  *((_QWORD *)v8 + 30) = &unk_24C3371E8;
  *((_QWORD *)v8 + 31) = a2;
  *(_OWORD *)(v8 + 200) = 0u;
  v9 = (uint64_t)(v8 + 200);
  *((_QWORD *)v8 + 4) = &off_24C3371C0;
  *((_QWORD *)v8 + 3) = &off_24C33AC20;
  v13.n128_u64[0] = (unint64_t)(v8 + 24);
  v13.n128_u64[1] = (unint64_t)v8;
  v14[0] = (unint64_t)&off_24C33B140;
  v15 = v14;
  mlcore::PropertyCache::mergePropertiesFromCache((uint64_t)(v8 + 32), a3, (uint64_t)v14);
  v10 = v15;
  if (v15 == v14)
  {
    v11 = 4;
    v10 = v14;
    goto LABEL_5;
  }
  if (v15)
  {
    v11 = 5;
LABEL_5:
    (*(void (**)(void))(*v10 + 8 * v11))();
  }
  v14[0] = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 112))(a1);
  std::__hash_table<std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>,std::__unordered_map_hasher<mlcore::ModelProperty<long long> *,std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>,std::hash<mlcore::ModelProperty<long long> *>,std::equal_to<mlcore::ModelProperty<long long> *>,true>,std::__unordered_map_equal<mlcore::ModelProperty<long long> *,std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>,std::equal_to<mlcore::ModelProperty<long long> *>,std::hash<mlcore::ModelProperty<long long> *>,true>,std::allocator<std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>>>::__emplace_unique_key_args<mlcore::ModelProperty<long long> *,std::piecewise_construct_t const&,std::tuple<mlcore::ModelProperty<long long> * const&>,std::tuple<>>(v9, v14[0], v14)[3] = a2;
  result = v13;
  *a4 = v13;
  return result;
}

void sub_20A85903C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15)
{
  char *v15;
  char *v17;
  uint64_t v18;

  v17 = a15;
  if (a15 == v15)
  {
    v18 = 4;
    v17 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v18 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v17 + 8 * v18))();
LABEL_6:
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t mlcore::TypedEntityClass<mlcore::TVEpisode>::name(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
}

BOOL mlcore::TypedEntityClass<mlcore::TVEpisode>::isRevisionTrackable(uint64_t a1)
{
  return (*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1) != -1;
}

uint64_t mlcore::TypedEntityClass<mlcore::TVEpisode>::isCloudUpdatable()
{
  return 1;
}

_QWORD *mlcore::TypedEntityClass<mlcore::TVEpisode>::databaseTablesToDeleteFrom@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *result;

  v2 = *(_QWORD *)mediaplatform::Singleton<mlcore::ItemExtraTable>::sharedInstance();
  v3 = *(_QWORD *)mediaplatform::Singleton<mlcore::ItemStoreTable>::sharedInstance();
  v4 = *(_QWORD *)mediaplatform::Singleton<mlcore::ItemVideoTable>::sharedInstance();
  v5 = *(_QWORD *)mediaplatform::Singleton<mlcore::ItemPlaybackTable>::sharedInstance();
  v6 = *(_QWORD *)mediaplatform::Singleton<mlcore::ItemSearchTable>::sharedInstance();
  v7 = *(_QWORD *)mediaplatform::Singleton<mlcore::ItemKVSTable>::sharedInstance();
  v8 = *(_QWORD *)mediaplatform::Singleton<mlcore::ItemStatsTable>::sharedInstance();
  a1[1] = 0;
  a1[2] = 0;
  *a1 = 0;
  result = operator new(0x38uLL);
  a1[1] = result + 7;
  a1[2] = result + 7;
  *result = v2;
  result[1] = v3;
  result[2] = v4;
  result[3] = v5;
  result[4] = v6;
  result[5] = v7;
  result[6] = v8;
  *a1 = result;
  return result;
}

_QWORD *mlcore::TypedEntityClass<mlcore::TVEpisode>::databaseTablesToInsertInto@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *result;

  v2 = *(_QWORD *)mediaplatform::Singleton<mlcore::ItemExtraTable>::sharedInstance();
  v3 = *(_QWORD *)mediaplatform::Singleton<mlcore::ItemStoreTable>::sharedInstance();
  v4 = *(_QWORD *)mediaplatform::Singleton<mlcore::ItemVideoTable>::sharedInstance();
  v5 = *(_QWORD *)mediaplatform::Singleton<mlcore::ItemPlaybackTable>::sharedInstance();
  v6 = *(_QWORD *)mediaplatform::Singleton<mlcore::ItemSearchTable>::sharedInstance();
  v7 = *(_QWORD *)mediaplatform::Singleton<mlcore::ItemKVSTable>::sharedInstance();
  v8 = *(_QWORD *)mediaplatform::Singleton<mlcore::ItemStatsTable>::sharedInstance();
  a1[1] = 0;
  a1[2] = 0;
  *a1 = 0;
  result = operator new(0x38uLL);
  a1[1] = result + 7;
  a1[2] = result + 7;
  *result = v2;
  result[1] = v3;
  result[2] = v4;
  result[3] = v5;
  result[4] = v6;
  result[5] = v7;
  result[6] = v8;
  *a1 = result;
  return result;
}

uint64_t mlcore::TypedEntityClass<mlcore::TVEpisode>::representativeItemPersistentIDProperty()
{
  return 0;
}

uint64_t mlcore::TypedEntityClass<mlcore::TVEpisode>::trackForeignPersistentIDProperty()
{
  return 0;
}

uint64_t mlcore::TypedEntityClass<mlcore::TVEpisode>::trackForeignOrderingProperty()
{
  return 0;
}

uint64_t mlcore::TypedEntityClass<mlcore::TVEpisode>::sectionPropertyForOrderingProperty(mlcore *a1, mlcore *a2)
{
  mlcore *v3;
  mlcore *v4;
  mlcore *v5;
  mlcore *v6;
  mlcore *v7;

  v3 = (mlcore *)mlcore::ItemPropertyTitleOrder(a1);
  if (v3 == a2)
    return mlcore::ItemPropertyTitleOrderSection(v3);
  v4 = (mlcore *)mlcore::ItemPropertyAlbumOrder(v3);
  if (v4 == a2)
    return mlcore::ItemPropertyAlbumOrderSection(v4);
  v5 = (mlcore *)mlcore::ItemPropertyArtistOrder(v4);
  if (v5 == a2)
    return mlcore::ItemPropertyArtistOrderSection(v5);
  v6 = (mlcore *)mlcore::ItemPropertyComposerOrder(v5);
  if (v6 == a2)
    return mlcore::ItemPropertyComposerOrderSection(v6);
  v7 = (mlcore *)mlcore::ItemPropertyGenreOrder(v6);
  if (v7 == a2)
    return mlcore::ItemPropertyGenreOrderSection(v7);
  else
    return 0;
}

void std::__shared_ptr_emplace<mlcore::TVEpisode>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C33D668;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<mlcore::TVEpisode>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C33D668;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x20BD27AFCLL);
}

uint64_t std::__shared_ptr_emplace<mlcore::TVEpisode>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::TVEpisodePropertyPersistentID(void)::$_0 &&>>()
{
  uint64_t v0;
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  mlcore::ItemTable **v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  std::string *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  std::string *v19;
  __int128 v20;
  std::string v21;
  std::string __p;
  char v23;
  _QWORD v24[2];

  v0 = operator new();
  v1 = (_QWORD *)mediaplatform::Singleton<mlcore::ItemTable>::sharedInstance();
  v2 = (std::__shared_weak_count *)v1[1];
  v24[0] = *v1;
  v24[1] = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  v5 = (mlcore::ItemTable **)mediaplatform::Singleton<mlcore::ItemTable>::sharedInstance();
  mlcore::ItemTable::persistentIDColumn(*v5, (uint64_t)&__p);
  mlcore::DatabaseModelProperty<long long>::DatabaseModelProperty(v0, v24, (uint64_t)&__p);
  mlcore::TVEpisodePropertyPersistentID(void)::property = v0;
  if (v23 < 0)
    operator delete((void *)__p.__r_.__value_.__l.__size_);
  if (v2)
  {
    v6 = (unint64_t *)&v2->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v8 = mlcore::TVEpisodePropertyPersistentID(void)::property;
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  std::string::operator=((std::string *)(v8 + 40), &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v9 = mlcore::TypedEntityClass<mlcore::Item>::sharedPointer();
  v10 = mlcore::TVEpisodePropertyPersistentID(void)::property;
  v11 = mediaplatform::Singleton<mlcore::ItemTable>::sharedInstance();
  v12 = *(_QWORD *)v11;
  if (*(char *)(*(_QWORD *)v11 + 31) >= 0)
    v13 = *(unsigned __int8 *)(*(_QWORD *)v11 + 31);
  else
    v13 = *(_QWORD *)(*(_QWORD *)v11 + 16);
  v14 = &v21;
  std::string::basic_string[abi:ne180100]((uint64_t)&v21, v13 + 1);
  if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v14 = (std::string *)v21.__r_.__value_.__r.__words[0];
  if (v13)
  {
    v17 = *(char **)(v12 + 8);
    v16 = (char *)(v12 + 8);
    v15 = v17;
    if (v16[23] >= 0)
      v18 = v16;
    else
      v18 = v15;
    memmove(v14, v18, v13);
  }
  *(_WORD *)((char *)&v14->__r_.__value_.__l.__data_ + v13) = 46;
  v19 = std::string::append(&v21, "persistentID");
  v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  __p.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  mlcore::EntityClass::setPropertyForName(v9, v10, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
}

void sub_20A8594C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::TVEpisodePropertyEpisodeSortID(void)::$_0 &&>>()
{
  uint64_t v0;
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  mlcore::ItemTable **v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  std::string *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  std::string *v19;
  __int128 v20;
  std::string v21;
  std::string __p;
  char v23;
  _QWORD v24[2];

  v0 = operator new();
  v1 = (_QWORD *)mediaplatform::Singleton<mlcore::ItemTable>::sharedInstance();
  v2 = (std::__shared_weak_count *)v1[1];
  v24[0] = *v1;
  v24[1] = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  v5 = (mlcore::ItemTable **)mediaplatform::Singleton<mlcore::ItemTable>::sharedInstance();
  mlcore::ItemTable::episodeSortIDColumn(*v5, (uint64_t)&__p);
  mlcore::DatabaseModelProperty<int>::DatabaseModelProperty(v0, v24, (uint64_t)&__p);
  mlcore::TVEpisodePropertyEpisodeSortID(void)::property = v0;
  if (v23 < 0)
    operator delete((void *)__p.__r_.__value_.__l.__size_);
  if (v2)
  {
    v6 = (unint64_t *)&v2->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v8 = mlcore::TVEpisodePropertyEpisodeSortID(void)::property;
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  std::string::operator=((std::string *)(v8 + 40), &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v9 = mlcore::TypedEntityClass<mlcore::Item>::sharedPointer();
  v10 = mlcore::TVEpisodePropertyEpisodeSortID(void)::property;
  v11 = mediaplatform::Singleton<mlcore::ItemTable>::sharedInstance();
  v12 = *(_QWORD *)v11;
  if (*(char *)(*(_QWORD *)v11 + 31) >= 0)
    v13 = *(unsigned __int8 *)(*(_QWORD *)v11 + 31);
  else
    v13 = *(_QWORD *)(*(_QWORD *)v11 + 16);
  v14 = &v21;
  std::string::basic_string[abi:ne180100]((uint64_t)&v21, v13 + 1);
  if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v14 = (std::string *)v21.__r_.__value_.__r.__words[0];
  if (v13)
  {
    v17 = *(char **)(v12 + 8);
    v16 = (char *)(v12 + 8);
    v15 = v17;
    if (v16[23] >= 0)
      v18 = v16;
    else
      v18 = v15;
    memmove(v14, v18, v13);
  }
  *(_WORD *)((char *)&v14->__r_.__value_.__l.__data_ + v13) = 46;
  v19 = std::string::append(&v21, "sortID");
  v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  __p.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  mlcore::EntityClass::setPropertyForName(v9, v10, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
}

void sub_20A859754(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

double mlcore::TVEpisode::TVEpisode(mlcore::TVEpisode *this, uint64_t a2)
{
  double result;

  result = 0.0;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_DWORD *)this + 12) = 1065353216;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *((_DWORD *)this + 22) = 1065353216;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_DWORD *)this + 32) = 1065353216;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 152) = 0u;
  *((_DWORD *)this + 42) = 1065353216;
  *((_OWORD *)this + 11) = 0u;
  *((_OWORD *)this + 12) = 0u;
  *((_DWORD *)this + 52) = 1065353216;
  *((_QWORD *)this + 27) = &unk_24C3371E8;
  *((_QWORD *)this + 28) = a2;
  *(_QWORD *)this = &off_24C33AC20;
  *((_QWORD *)this + 1) = &off_24C3371C0;
  return result;
}

{
  double result;

  result = 0.0;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_DWORD *)this + 12) = 1065353216;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *((_DWORD *)this + 22) = 1065353216;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_DWORD *)this + 32) = 1065353216;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 152) = 0u;
  *((_DWORD *)this + 42) = 1065353216;
  *((_OWORD *)this + 11) = 0u;
  *((_OWORD *)this + 12) = 0u;
  *((_DWORD *)this + 52) = 1065353216;
  *((_QWORD *)this + 27) = &unk_24C3371E8;
  *((_QWORD *)this + 28) = a2;
  *(_QWORD *)this = &off_24C33AC20;
  *((_QWORD *)this + 1) = &off_24C3371C0;
  return result;
}

void mediaplatform::DatabaseIndexedColumn::~DatabaseIndexedColumn(mediaplatform::DatabaseIndexedColumn *this)
{
  *(_QWORD *)this = off_24C331200;
  *((_QWORD *)this + 1) = off_24C335D90;
  if (*((char *)this + 39) < 0)
    operator delete(*((void **)this + 2));
}

{
  *(_QWORD *)this = off_24C331200;
  *((_QWORD *)this + 1) = off_24C335D90;
  if (*((char *)this + 39) < 0)
    operator delete(*((void **)this + 2));
  JUMPOUT(0x20BD27AFCLL);
}

uint64_t mediaplatform::DatabaseIndexedColumn::sql(uint64_t a1)
{
  std::string *p_p;
  std::string::size_type size;
  std::string *v4;
  uint64_t v5;
  std::string *v6;
  std::string::size_type v7;
  std::string __p;
  _QWORD v10[11];
  char v11;
  uint64_t v12;

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v10);
  if (*(char *)(a1 + 39) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(a1 + 16), *(_QWORD *)(a1 + 24));
  else
    __p = *(std::string *)(a1 + 16);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    size = __p.__r_.__value_.__l.__size_;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)p_p, size);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (*(_DWORD *)(a1 + 52))
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)" COLLATE ", 9);
    mediaplatform::NameForCollateType(&__p, *(_DWORD *)(a1 + 52));
    v4 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
       ? &__p
       : (std::string *)__p.__r_.__value_.__r.__words[0];
    v5 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
       ? HIBYTE(__p.__r_.__value_.__r.__words[2])
       : __p.__r_.__value_.__l.__size_;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)v4, v5);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)" ", 1);
  mediaplatform::NameForOrderingType(&__p, *(_DWORD *)(a1 + 48));
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v6 = &__p;
  else
    v6 = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v7 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v7 = __p.__r_.__value_.__l.__size_;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)v6, v7);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::stringbuf::str();
  v10[0] = *MEMORY[0x24BEDB800];
  *(_QWORD *)((char *)v10 + *(_QWORD *)(v10[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  v10[1] = MEMORY[0x24BEDB848] + 16;
  if (v11 < 0)
    operator delete((void *)v10[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x20BD27A84](&v12);
}

void sub_20A859B10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  std::ostringstream::~ostringstream((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t mediaplatform::DatabaseIndexedColumn::DatabaseIndexedColumn(uint64_t a1, uint64_t a2, int a3, int a4)
{
  std::string *v8;
  __int128 v9;

  *(_QWORD *)a1 = off_24C331200;
  *(_QWORD *)(a1 + 8) = off_24C335D90;
  v8 = (std::string *)(a1 + 16);
  if (*(char *)(a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v8, *(const std::string::value_type **)(a2 + 8), *(_QWORD *)(a2 + 16));
  }
  else
  {
    v9 = *(_OWORD *)(a2 + 8);
    v8->__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 24);
    *(_OWORD *)&v8->__r_.__value_.__l.__data_ = v9;
  }
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 48) = a3;
  *(_DWORD *)(a1 + 52) = a4;
  return a1;
}

uint64_t mediaplatform::DatabaseIndexedColumn::column(mediaplatform::DatabaseIndexedColumn *this)
{
  return (uint64_t)this + 8;
}

std::string *mediaplatform::DatabaseIndexedColumn::setColumn(mediaplatform::DatabaseIndexedColumn *this, const mediaplatform::DatabaseColumnBase *a2)
{
  std::string *result;

  result = std::string::operator=((std::string *)((char *)this + 16), (const std::string *)((char *)a2 + 8));
  *((_DWORD *)this + 10) = *((_DWORD *)a2 + 8);
  return result;
}

uint64_t mediaplatform::DatabaseIndexedColumn::orderingType(mediaplatform::DatabaseIndexedColumn *this)
{
  return *((unsigned int *)this + 12);
}

uint64_t mediaplatform::DatabaseIndexedColumn::setOrderingType(uint64_t result, int a2)
{
  *(_DWORD *)(result + 48) = a2;
  return result;
}

uint64_t mediaplatform::DatabaseIndexedColumn::collateType(mediaplatform::DatabaseIndexedColumn *this)
{
  return *((unsigned int *)this + 13);
}

uint64_t mediaplatform::DatabaseIndexedColumn::setCollateType(uint64_t result, int a2)
{
  *(_DWORD *)(result + 52) = a2;
  return result;
}

std::string *mediaplatform::DatabaseIndex::DatabaseIndex(std::string *this, __int128 *a2, uint64_t a3, char **a4, std::string::size_type *a5)
{
  __int128 v9;
  __int128 v10;
  char *v11;
  char *v12;
  _QWORD *v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  std::string::size_type v17;
  unint64_t *v18;
  unint64_t v19;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v9 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v9;
  }
  this[1].__r_.__value_.__r.__words[0] = (std::string::size_type)&off_24C330F50;
  if (*(char *)(a3 + 31) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 32), *(const std::string::value_type **)(a3 + 8), *(_QWORD *)(a3 + 16));
  }
  else
  {
    v10 = *(_OWORD *)(a3 + 8);
    this[2].__r_.__value_.__r.__words[0] = *(_QWORD *)(a3 + 24);
    *(_OWORD *)&this[1].__r_.__value_.__r.__words[1] = v10;
  }
  this[2].__r_.__value_.__l.__size_ = 0;
  this[2].__r_.__value_.__r.__words[2] = 0;
  this[3].__r_.__value_.__r.__words[0] = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)((char *)this + 56), *(__int128 **)(a3 + 32), *(__int128 **)(a3 + 40), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a3 + 40) - *(_QWORD *)(a3 + 32)) >> 3));
  this[3].__r_.__value_.__l.__size_ = 0;
  this[3].__r_.__value_.__r.__words[2] = 0;
  this[4].__r_.__value_.__r.__words[0] = 0;
  v12 = *a4;
  v11 = a4[1];
  if (v11 != v12)
  {
    std::vector<std::shared_ptr<mlcore::Predicate>>::__vallocate[abi:ne180100](&this[3].__r_.__value_.__l.__size_, (v11 - v12) >> 4);
    v13 = (_QWORD *)this[3].__r_.__value_.__r.__words[2];
    do
    {
      *v13 = *(_QWORD *)v12;
      v14 = *((_QWORD *)v12 + 1);
      v13[1] = v14;
      if (v14)
      {
        v15 = (unint64_t *)(v14 + 8);
        do
          v16 = __ldxr(v15);
        while (__stxr(v16 + 1, v15));
      }
      v12 += 16;
      v13 += 2;
    }
    while (v12 != v11);
    this[3].__r_.__value_.__r.__words[2] = (std::string::size_type)v13;
  }
  this[4].__r_.__value_.__l.__size_ = *a5;
  v17 = a5[1];
  this[4].__r_.__value_.__r.__words[2] = v17;
  if (v17)
  {
    v18 = (unint64_t *)(v17 + 8);
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
  }
  LOWORD(this[5].__r_.__value_.__l.__data_) = 1;
  return this;
}

void sub_20A859D9C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

std::string *mediaplatform::DatabaseIndex::DatabaseIndex(std::string *this, __int128 *a2, uint64_t a3, uint64_t *a4, std::string::size_type *a5)
{
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  _OWORD *v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char *v22;
  uint64_t v23;
  char *v24;
  _QWORD *v25;
  _QWORD *v26;
  char *v27;
  __int128 v28;
  int64x2_t v29;
  char *v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  __int128 v35;
  __int128 v36;
  int64x2_t v37;
  char *v38;
  std::string::size_type v39[2];
  int64x2_t *v40;
  int64x2_t v41;
  char *v42;
  char **v43;

  v40 = 0;
  v41 = 0uLL;
  v7 = (std::__shared_weak_count *)a5[1];
  v39[0] = *a5;
  v39[1] = (std::string::size_type)v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  mediaplatform::DatabaseIndex::DatabaseIndex(this, a2, a3, (char **)&v40, v39);
  if (v7)
  {
    v10 = (unint64_t *)&v7->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  v37.i64[0] = (uint64_t)&v40;
  std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v37);
  v37 = 0uLL;
  v38 = 0;
  v12 = *a4;
  v13 = a4[1];
  if (*a4 != v13)
  {
    do
    {
      std::allocate_shared[abi:ne180100]<mediaplatform::DatabaseIndexedColumn,std::allocator<mediaplatform::DatabaseIndexedColumn>,mediaplatform::DatabaseColumnBase const&,void>((uint64_t *)&v36, v12);
      v14 = v36;
      if (*((_QWORD *)&v36 + 1))
      {
        v15 = (unint64_t *)(*((_QWORD *)&v36 + 1) + 8);
        do
          v16 = __ldxr(v15);
        while (__stxr(v16 + 1, v15));
      }
      v17 = v37.i64[1];
      if (v37.i64[1] >= (unint64_t)v38)
      {
        v35 = v14;
        v19 = (v37.i64[1] - v37.i64[0]) >> 4;
        if ((unint64_t)(v19 + 1) >> 60)
          std::vector<std::string>::__throw_length_error[abi:ne180100]();
        v20 = (uint64_t)&v38[-v37.i64[0]] >> 3;
        if (v20 <= v19 + 1)
          v20 = v19 + 1;
        if ((unint64_t)&v38[-v37.i64[0]] >= 0x7FFFFFFFFFFFFFF0)
          v21 = 0xFFFFFFFFFFFFFFFLL;
        else
          v21 = v20;
        v43 = &v38;
        v22 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<mediaplatform::DatabaseParameterBase>>>(v21);
        v24 = &v22[16 * v19];
        *(_OWORD *)v24 = v35;
        v25 = (_QWORD *)v37.i64[1];
        v26 = (_QWORD *)v37.i64[0];
        if (v37.i64[1] == v37.i64[0])
        {
          v29 = vdupq_n_s64(v37.u64[1]);
          v27 = &v22[16 * v19];
        }
        else
        {
          v27 = &v22[16 * v19];
          do
          {
            v28 = *((_OWORD *)v25 - 1);
            v25 -= 2;
            *((_OWORD *)v27 - 1) = v28;
            v27 -= 16;
            *v25 = 0;
            v25[1] = 0;
          }
          while (v25 != v26);
          v29 = v37;
        }
        v18 = v24 + 16;
        v37.i64[0] = (uint64_t)v27;
        v37.i64[1] = (uint64_t)(v24 + 16);
        v41 = v29;
        v30 = v38;
        v38 = &v22[16 * v23];
        v42 = v30;
        v40 = (int64x2_t *)v29.i64[0];
        std::__split_buffer<std::shared_ptr<mediaplatform::SQLExpression const>>::~__split_buffer((uint64_t)&v40);
      }
      else
      {
        *(_OWORD *)v37.i64[1] = v14;
        v18 = (_OWORD *)(v17 + 16);
      }
      v37.i64[1] = (uint64_t)v18;
      v31 = (std::__shared_weak_count *)*((_QWORD *)&v36 + 1);
      if (*((_QWORD *)&v36 + 1))
      {
        v32 = (unint64_t *)(*((_QWORD *)&v36 + 1) + 8);
        do
          v33 = __ldaxr(v32);
        while (__stlxr(v33 - 1, v32));
        if (!v33)
        {
          ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
          std::__shared_weak_count::__release_weak(v31);
        }
      }
      v12 += 40;
    }
    while (v12 != v13);
  }
  if (&this[3].__r_.__value_.__r.__words[1] != (std::string::size_type *)&v37)
    std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__assign_with_size[abi:ne180100]<std::shared_ptr<mediaplatform::SQLExpression const>*,std::shared_ptr<mediaplatform::SQLExpression const>*>(&this[3].__r_.__value_.__l.__size_, (uint64_t *)v37.i64[0], (uint64_t *)v37.i64[1], (v37.i64[1] - v37.i64[0]) >> 4);
  v40 = &v37;
  std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v40);
  return this;
}

{
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  _OWORD *v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char *v22;
  uint64_t v23;
  char *v24;
  _QWORD *v25;
  _QWORD *v26;
  char *v27;
  __int128 v28;
  int64x2_t v29;
  char *v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  __int128 v35;
  __int128 v36;
  int64x2_t v37;
  char *v38;
  std::string::size_type v39[2];
  int64x2_t *v40;
  int64x2_t v41;
  char *v42;
  char **v43;

  v40 = 0;
  v41 = 0uLL;
  v7 = (std::__shared_weak_count *)a5[1];
  v39[0] = *a5;
  v39[1] = (std::string::size_type)v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  mediaplatform::DatabaseIndex::DatabaseIndex(this, a2, a3, (char **)&v40, v39);
  if (v7)
  {
    v10 = (unint64_t *)&v7->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  v37.i64[0] = (uint64_t)&v40;
  std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v37);
  v37 = 0uLL;
  v38 = 0;
  v12 = *a4;
  v13 = a4[1];
  if (*a4 != v13)
  {
    do
    {
      std::allocate_shared[abi:ne180100]<mediaplatform::DatabaseIndexedColumn,std::allocator<mediaplatform::DatabaseIndexedColumn>,mediaplatform::DatabaseColumnBase const&,void>((uint64_t *)&v36, v12);
      v14 = v36;
      if (*((_QWORD *)&v36 + 1))
      {
        v15 = (unint64_t *)(*((_QWORD *)&v36 + 1) + 8);
        do
          v16 = __ldxr(v15);
        while (__stxr(v16 + 1, v15));
      }
      v17 = v37.i64[1];
      if (v37.i64[1] >= (unint64_t)v38)
      {
        v35 = v14;
        v19 = (v37.i64[1] - v37.i64[0]) >> 4;
        if ((unint64_t)(v19 + 1) >> 60)
          std::vector<std::string>::__throw_length_error[abi:ne180100]();
        v20 = (uint64_t)&v38[-v37.i64[0]] >> 3;
        if (v20 <= v19 + 1)
          v20 = v19 + 1;
        if ((unint64_t)&v38[-v37.i64[0]] >= 0x7FFFFFFFFFFFFFF0)
          v21 = 0xFFFFFFFFFFFFFFFLL;
        else
          v21 = v20;
        v43 = &v38;
        v22 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<mediaplatform::DatabaseParameterBase>>>(v21);
        v24 = &v22[16 * v19];
        *(_OWORD *)v24 = v35;
        v25 = (_QWORD *)v37.i64[1];
        v26 = (_QWORD *)v37.i64[0];
        if (v37.i64[1] == v37.i64[0])
        {
          v29 = vdupq_n_s64(v37.u64[1]);
          v27 = &v22[16 * v19];
        }
        else
        {
          v27 = &v22[16 * v19];
          do
          {
            v28 = *((_OWORD *)v25 - 1);
            v25 -= 2;
            *((_OWORD *)v27 - 1) = v28;
            v27 -= 16;
            *v25 = 0;
            v25[1] = 0;
          }
          while (v25 != v26);
          v29 = v37;
        }
        v18 = v24 + 16;
        v37.i64[0] = (uint64_t)v27;
        v37.i64[1] = (uint64_t)(v24 + 16);
        v41 = v29;
        v30 = v38;
        v38 = &v22[16 * v23];
        v42 = v30;
        v40 = (int64x2_t *)v29.i64[0];
        std::__split_buffer<std::shared_ptr<mediaplatform::SQLExpression const>>::~__split_buffer((uint64_t)&v40);
      }
      else
      {
        *(_OWORD *)v37.i64[1] = v14;
        v18 = (_OWORD *)(v17 + 16);
      }
      v37.i64[1] = (uint64_t)v18;
      v31 = (std::__shared_weak_count *)*((_QWORD *)&v36 + 1);
      if (*((_QWORD *)&v36 + 1))
      {
        v32 = (unint64_t *)(*((_QWORD *)&v36 + 1) + 8);
        do
          v33 = __ldaxr(v32);
        while (__stlxr(v33 - 1, v32));
        if (!v33)
        {
          ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
          std::__shared_weak_count::__release_weak(v31);
        }
      }
      v12 += 40;
    }
    while (v12 != v13);
  }
  if (&this[3].__r_.__value_.__r.__words[1] != (std::string::size_type *)&v37)
    std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__assign_with_size[abi:ne180100]<std::shared_ptr<mediaplatform::SQLExpression const>*,std::shared_ptr<mediaplatform::SQLExpression const>*>(&this[3].__r_.__value_.__l.__size_, (uint64_t *)v37.i64[0], (uint64_t *)v37.i64[1], (v37.i64[1] - v37.i64[0]) >> 4);
  v40 = &v37;
  std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v40);
  return this;
}

{
  std::string::size_type v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  __int128 v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  _OWORD *v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char *v26;
  uint64_t v27;
  char *v28;
  _QWORD *v29;
  _QWORD *v30;
  char *v31;
  __int128 v32;
  int64x2_t v33;
  std::string::size_type v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  __int128 v39;
  __int128 v40;
  std::string v41;
  void (**v42)(mediaplatform::DatabaseColumnBase *__hidden);
  std::string __p;
  int v44;
  int64x2_t v45;
  char *v46;
  std::string::size_type v47[2];
  void (**v48)(mediaplatform::DatabaseTableBase *__hidden);
  std::string v49;
  char **v50;
  uint64_t v51;
  uint64_t v52;

  v48 = &off_24C330F50;
  if (*(char *)(a3 + 23) < 0)
    std::string::__init_copy_ctor_external(&v49, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
  else
    v49 = *(std::string *)a3;
  v50 = 0;
  v51 = 0;
  v52 = 0;
  v42 = 0;
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = 0uLL;
  v9 = *a5;
  v10 = (std::__shared_weak_count *)a5[1];
  v47[0] = v9;
  v47[1] = (std::string::size_type)v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
  }
  mediaplatform::DatabaseIndex::DatabaseIndex(this, a2, (uint64_t)&v48, (char **)&v42, v47);
  if (v10)
  {
    v13 = (unint64_t *)&v10->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  v45.i64[0] = (uint64_t)&v42;
  std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v45);
  mediaplatform::DatabaseTableBase::~DatabaseTableBase((void **)&v48);
  v45 = 0uLL;
  v46 = 0;
  v15 = *a4;
  v16 = a4[1];
  if (*a4 != v16)
  {
    do
    {
      if (*(char *)(v15 + 23) < 0)
        std::string::__init_copy_ctor_external(&v41, *(const std::string::value_type **)v15, *(_QWORD *)(v15 + 8));
      else
        v41 = *(std::string *)v15;
      v42 = off_24C335D90;
      if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0)
      {
        v17 = (void *)v41.__r_.__value_.__r.__words[0];
        std::string::__init_copy_ctor_external(&__p, v41.__r_.__value_.__l.__data_, v41.__r_.__value_.__l.__size_);
        v44 = 0;
        operator delete(v17);
      }
      else
      {
        __p = v41;
        v44 = 0;
      }
      std::allocate_shared[abi:ne180100]<mediaplatform::DatabaseIndexedColumn,std::allocator<mediaplatform::DatabaseIndexedColumn>,mediaplatform::DatabaseColumnBase &,void>((uint64_t *)&v40, (uint64_t)&v42);
      v18 = v40;
      if (*((_QWORD *)&v40 + 1))
      {
        v19 = (unint64_t *)(*((_QWORD *)&v40 + 1) + 8);
        do
          v20 = __ldxr(v19);
        while (__stxr(v20 + 1, v19));
      }
      v21 = v45.i64[1];
      if (v45.i64[1] >= (unint64_t)v46)
      {
        v39 = v18;
        v23 = (v45.i64[1] - v45.i64[0]) >> 4;
        if ((unint64_t)(v23 + 1) >> 60)
          std::vector<std::string>::__throw_length_error[abi:ne180100]();
        v24 = (uint64_t)&v46[-v45.i64[0]] >> 3;
        if (v24 <= v23 + 1)
          v24 = v23 + 1;
        if ((unint64_t)&v46[-v45.i64[0]] >= 0x7FFFFFFFFFFFFFF0)
          v25 = 0xFFFFFFFFFFFFFFFLL;
        else
          v25 = v24;
        v50 = &v46;
        v26 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<mediaplatform::DatabaseParameterBase>>>(v25);
        v28 = &v26[16 * v23];
        *(_OWORD *)v28 = v39;
        v29 = (_QWORD *)v45.i64[1];
        v30 = (_QWORD *)v45.i64[0];
        if (v45.i64[1] == v45.i64[0])
        {
          v33 = vdupq_n_s64(v45.u64[1]);
          v31 = &v26[16 * v23];
        }
        else
        {
          v31 = &v26[16 * v23];
          do
          {
            v32 = *((_OWORD *)v29 - 1);
            v29 -= 2;
            *((_OWORD *)v31 - 1) = v32;
            v31 -= 16;
            *v29 = 0;
            v29[1] = 0;
          }
          while (v29 != v30);
          v33 = v45;
        }
        v22 = v28 + 16;
        v45.i64[0] = (uint64_t)v31;
        v45.i64[1] = (uint64_t)(v28 + 16);
        *(int64x2_t *)&v49.__r_.__value_.__l.__data_ = v33;
        v34 = (std::string::size_type)v46;
        v46 = &v26[16 * v27];
        v49.__r_.__value_.__r.__words[2] = v34;
        v48 = (void (**)(mediaplatform::DatabaseTableBase *__hidden))v33.i64[0];
        std::__split_buffer<std::shared_ptr<mediaplatform::SQLExpression const>>::~__split_buffer((uint64_t)&v48);
      }
      else
      {
        *(_OWORD *)v45.i64[1] = v18;
        v22 = (_OWORD *)(v21 + 16);
      }
      v45.i64[1] = (uint64_t)v22;
      v35 = (std::__shared_weak_count *)*((_QWORD *)&v40 + 1);
      if (*((_QWORD *)&v40 + 1))
      {
        v36 = (unint64_t *)(*((_QWORD *)&v40 + 1) + 8);
        do
          v37 = __ldaxr(v36);
        while (__stlxr(v37 - 1, v36));
        if (!v37)
        {
          ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
          std::__shared_weak_count::__release_weak(v35);
        }
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      v15 += 24;
    }
    while (v15 != v16);
  }
  if (&this[3].__r_.__value_.__r.__words[1] != (std::string::size_type *)&v45)
    std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__assign_with_size[abi:ne180100]<std::shared_ptr<mediaplatform::SQLExpression const>*,std::shared_ptr<mediaplatform::SQLExpression const>*>(&this[3].__r_.__value_.__l.__size_, (uint64_t *)v45.i64[0], (uint64_t *)v45.i64[1], (v45.i64[1] - v45.i64[0]) >> 4);
  v48 = (void (**)(mediaplatform::DatabaseTableBase *__hidden))&v45;
  std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v48);
  return this;
}

{
  std::string::size_type v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  __int128 v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  _OWORD *v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char *v26;
  uint64_t v27;
  char *v28;
  _QWORD *v29;
  _QWORD *v30;
  char *v31;
  __int128 v32;
  int64x2_t v33;
  std::string::size_type v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  __int128 v39;
  __int128 v40;
  std::string v41;
  void (**v42)(mediaplatform::DatabaseColumnBase *__hidden);
  std::string __p;
  int v44;
  int64x2_t v45;
  char *v46;
  std::string::size_type v47[2];
  void (**v48)(mediaplatform::DatabaseTableBase *__hidden);
  std::string v49;
  char **v50;
  uint64_t v51;
  uint64_t v52;

  v48 = &off_24C330F50;
  if (*(char *)(a3 + 23) < 0)
    std::string::__init_copy_ctor_external(&v49, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
  else
    v49 = *(std::string *)a3;
  v50 = 0;
  v51 = 0;
  v52 = 0;
  v42 = 0;
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = 0uLL;
  v9 = *a5;
  v10 = (std::__shared_weak_count *)a5[1];
  v47[0] = v9;
  v47[1] = (std::string::size_type)v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
  }
  mediaplatform::DatabaseIndex::DatabaseIndex(this, a2, (uint64_t)&v48, (char **)&v42, v47);
  if (v10)
  {
    v13 = (unint64_t *)&v10->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  v45.i64[0] = (uint64_t)&v42;
  std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v45);
  mediaplatform::DatabaseTableBase::~DatabaseTableBase((void **)&v48);
  v45 = 0uLL;
  v46 = 0;
  v15 = *a4;
  v16 = a4[1];
  if (*a4 != v16)
  {
    do
    {
      if (*(char *)(v15 + 23) < 0)
        std::string::__init_copy_ctor_external(&v41, *(const std::string::value_type **)v15, *(_QWORD *)(v15 + 8));
      else
        v41 = *(std::string *)v15;
      v42 = off_24C335D90;
      if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0)
      {
        v17 = (void *)v41.__r_.__value_.__r.__words[0];
        std::string::__init_copy_ctor_external(&__p, v41.__r_.__value_.__l.__data_, v41.__r_.__value_.__l.__size_);
        v44 = 0;
        operator delete(v17);
      }
      else
      {
        __p = v41;
        v44 = 0;
      }
      std::allocate_shared[abi:ne180100]<mediaplatform::DatabaseIndexedColumn,std::allocator<mediaplatform::DatabaseIndexedColumn>,mediaplatform::DatabaseColumnBase &,void>((uint64_t *)&v40, (uint64_t)&v42);
      v18 = v40;
      if (*((_QWORD *)&v40 + 1))
      {
        v19 = (unint64_t *)(*((_QWORD *)&v40 + 1) + 8);
        do
          v20 = __ldxr(v19);
        while (__stxr(v20 + 1, v19));
      }
      v21 = v45.i64[1];
      if (v45.i64[1] >= (unint64_t)v46)
      {
        v39 = v18;
        v23 = (v45.i64[1] - v45.i64[0]) >> 4;
        if ((unint64_t)(v23 + 1) >> 60)
          std::vector<std::string>::__throw_length_error[abi:ne180100]();
        v24 = (uint64_t)&v46[-v45.i64[0]] >> 3;
        if (v24 <= v23 + 1)
          v24 = v23 + 1;
        if ((unint64_t)&v46[-v45.i64[0]] >= 0x7FFFFFFFFFFFFFF0)
          v25 = 0xFFFFFFFFFFFFFFFLL;
        else
          v25 = v24;
        v50 = &v46;
        v26 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<mediaplatform::DatabaseParameterBase>>>(v25);
        v28 = &v26[16 * v23];
        *(_OWORD *)v28 = v39;
        v29 = (_QWORD *)v45.i64[1];
        v30 = (_QWORD *)v45.i64[0];
        if (v45.i64[1] == v45.i64[0])
        {
          v33 = vdupq_n_s64(v45.u64[1]);
          v31 = &v26[16 * v23];
        }
        else
        {
          v31 = &v26[16 * v23];
          do
          {
            v32 = *((_OWORD *)v29 - 1);
            v29 -= 2;
            *((_OWORD *)v31 - 1) = v32;
            v31 -= 16;
            *v29 = 0;
            v29[1] = 0;
          }
          while (v29 != v30);
          v33 = v45;
        }
        v22 = v28 + 16;
        v45.i64[0] = (uint64_t)v31;
        v45.i64[1] = (uint64_t)(v28 + 16);
        *(int64x2_t *)&v49.__r_.__value_.__l.__data_ = v33;
        v34 = (std::string::size_type)v46;
        v46 = &v26[16 * v27];
        v49.__r_.__value_.__r.__words[2] = v34;
        v48 = (void (**)(mediaplatform::DatabaseTableBase *__hidden))v33.i64[0];
        std::__split_buffer<std::shared_ptr<mediaplatform::SQLExpression const>>::~__split_buffer((uint64_t)&v48);
      }
      else
      {
        *(_OWORD *)v45.i64[1] = v18;
        v22 = (_OWORD *)(v21 + 16);
      }
      v45.i64[1] = (uint64_t)v22;
      v35 = (std::__shared_weak_count *)*((_QWORD *)&v40 + 1);
      if (*((_QWORD *)&v40 + 1))
      {
        v36 = (unint64_t *)(*((_QWORD *)&v40 + 1) + 8);
        do
          v37 = __ldaxr(v36);
        while (__stlxr(v37 - 1, v36));
        if (!v37)
        {
          ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
          std::__shared_weak_count::__release_weak(v35);
        }
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      v15 += 24;
    }
    while (v15 != v16);
  }
  if (&this[3].__r_.__value_.__r.__words[1] != (std::string::size_type *)&v45)
    std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__assign_with_size[abi:ne180100]<std::shared_ptr<mediaplatform::SQLExpression const>*,std::shared_ptr<mediaplatform::SQLExpression const>*>(&this[3].__r_.__value_.__l.__size_, (uint64_t *)v45.i64[0], (uint64_t *)v45.i64[1], (v45.i64[1] - v45.i64[0]) >> 4);
  v48 = (void (**)(mediaplatform::DatabaseTableBase *__hidden))&v45;
  std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v48);
  return this;
}

void sub_20A85A038(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void **a13, uint64_t a14, uint64_t a15)
{
  void **v15;

  a13 = (void **)&a15;
  std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__destroy_vector::operator()[abi:ne180100](&a13);
  mediaplatform::DatabaseIndex::~DatabaseIndex(v15);
  _Unwind_Resume(a1);
}

uint64_t std::allocate_shared[abi:ne180100]<mediaplatform::DatabaseIndexedColumn,std::allocator<mediaplatform::DatabaseIndexedColumn>,mediaplatform::DatabaseColumnBase const&,void>(uint64_t *a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t result;

  v4 = operator new(0x50uLL);
  v4[1] = 0;
  v4[2] = 0;
  *v4 = &off_24C33C018;
  result = mediaplatform::DatabaseIndexedColumn::DatabaseIndexedColumn((uint64_t)(v4 + 3), a2, 0, 0);
  *a1 = result;
  a1[1] = (uint64_t)v4;
  return result;
}

void sub_20A85A0F0(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void mediaplatform::DatabaseIndex::~DatabaseIndex(void **this)
{
  void **v2;

  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)(this + 13));
  v2 = this + 10;
  std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__destroy_vector::operator()[abi:ne180100](&v2);
  mediaplatform::DatabaseTableBase::~DatabaseTableBase(this + 3);
  if (*((char *)this + 23) < 0)
    operator delete(*this);
}

void std::__shared_ptr_emplace<mediaplatform::DatabaseIndexedColumn>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C33C018;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<mediaplatform::DatabaseIndexedColumn>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C33C018;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x20BD27AFCLL);
}

uint64_t std::__shared_ptr_emplace<mediaplatform::DatabaseIndexedColumn>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t **mediaplatform::DatabaseIndex::setColumns(uint64_t a1, uint64_t **a2)
{
  uint64_t **result;

  result = (uint64_t **)(a1 + 80);
  if (result != a2)
    return (uint64_t **)std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__assign_with_size[abi:ne180100]<std::shared_ptr<mediaplatform::SQLExpression const>*,std::shared_ptr<mediaplatform::SQLExpression const>*>(result, *a2, a2[1], ((char *)a2[1] - (char *)*a2) >> 4);
  return result;
}

void sub_20A85A420(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void **a13, uint64_t a14, uint64_t a15)
{
  void **v15;

  a13 = (void **)&a15;
  std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__destroy_vector::operator()[abi:ne180100](&a13);
  mediaplatform::DatabaseIndex::~DatabaseIndex(v15);
  _Unwind_Resume(a1);
}

void sub_20A85A7B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void **a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  void **v23;

  a18 = (void **)&a23;
  std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__destroy_vector::operator()[abi:ne180100](&a18);
  mediaplatform::DatabaseIndex::~DatabaseIndex(v23);
  _Unwind_Resume(a1);
}

uint64_t std::allocate_shared[abi:ne180100]<mediaplatform::DatabaseIndexedColumn,std::allocator<mediaplatform::DatabaseIndexedColumn>,mediaplatform::DatabaseColumnBase &,void>(uint64_t *a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t result;

  v4 = operator new(0x50uLL);
  v4[1] = 0;
  v4[2] = 0;
  *v4 = &off_24C33C018;
  result = mediaplatform::DatabaseIndexedColumn::DatabaseIndexedColumn((uint64_t)(v4 + 3), a2, 0, 0);
  *a1 = result;
  a1[1] = (uint64_t)v4;
  return result;
}

void sub_20A85A894(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void sub_20A85ABDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void **a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  void **v23;

  a18 = (void **)&a23;
  std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__destroy_vector::operator()[abi:ne180100](&a18);
  mediaplatform::DatabaseIndex::~DatabaseIndex(v23);
  _Unwind_Resume(a1);
}

uint64_t mediaplatform::DatabaseIndex::table(mediaplatform::DatabaseIndex *this)
{
  return (uint64_t)this + 24;
}

void mediaplatform::DatabaseIndex::setTable(mediaplatform::DatabaseIndex *this, const mediaplatform::DatabaseTableBase *a2)
{
  const mediaplatform::DatabaseTableBase *v4;

  v4 = (mediaplatform::DatabaseIndex *)((char *)this + 24);
  std::string::operator=((std::string *)((char *)this + 32), (const std::string *)((char *)a2 + 8));
  if (v4 != a2)
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((std::vector<std::string> *)((char *)this + 56), *((std::string **)a2 + 4), *((__int128 **)a2 + 5), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a2 + 5) - *((_QWORD *)a2 + 4)) >> 3));
}

uint64_t mediaplatform::DatabaseIndex::columns(mediaplatform::DatabaseIndex *this)
{
  return (uint64_t)this + 80;
}

uint64_t mediaplatform::DatabaseIndex::conditionalExpression@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(this + 112);
  *a2 = *(_QWORD *)(this + 104);
  a2[1] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return this;
}

_QWORD *mediaplatform::DatabaseIndex::setConditionalExpression(uint64_t a1, uint64_t *a2)
{
  return std::shared_ptr<mlcore::Predicate>::operator=[abi:ne180100]((_QWORD *)(a1 + 104), *a2, a2[1]);
}

uint64_t mediaplatform::DatabaseIndex::shouldCreateIfNonexistent(mediaplatform::DatabaseIndex *this)
{
  return *((unsigned __int8 *)this + 120);
}

uint64_t mediaplatform::DatabaseIndex::setShouldCreateIfNonexistent(uint64_t this, char a2)
{
  *(_BYTE *)(this + 120) = a2;
  return this;
}

uint64_t mediaplatform::DatabaseIndex::isUnique(mediaplatform::DatabaseIndex *this)
{
  return *((unsigned __int8 *)this + 121);
}

uint64_t mediaplatform::DatabaseIndex::setUnique(uint64_t this, char a2)
{
  *(_BYTE *)(this + 121) = a2;
  return this;
}

void mlcore::PlaylistAuthor::~PlaylistAuthor(mlcore::PlaylistAuthor *this)
{
  *(_QWORD *)this = off_24C33A860;
  mlcore::PropertyCacheBase<long long,int,double,std::string,mediaplatform::Data>::~PropertyCacheBase((_QWORD *)this + 1);
}

{
  *(_QWORD *)this = off_24C33A860;
  mlcore::PropertyCacheBase<long long,int,double,std::string,mediaplatform::Data>::~PropertyCacheBase((_QWORD *)this + 1);
  JUMPOUT(0x20BD27AFCLL);
}

double std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::TypedEntityClass<mlcore::PlaylistAuthor>::sharedPointer(void)::{lambda(void)#1} &&>>()
{
  uint64_t v0;
  double result;

  v0 = operator new();
  result = 0.0;
  *(_OWORD *)(v0 + 16) = 0u;
  *(_OWORD *)(v0 + 32) = 0u;
  *(_OWORD *)(v0 + 48) = 0u;
  *(_OWORD *)(v0 + 64) = 0u;
  *(_OWORD *)(v0 + 80) = 0u;
  *(_QWORD *)(v0 + 96) = 0;
  *(_DWORD *)(v0 + 104) = 1065353216;
  *(_OWORD *)(v0 + 112) = 0u;
  *(_OWORD *)(v0 + 128) = 0u;
  *(_DWORD *)(v0 + 144) = 1065353216;
  *(_QWORD *)v0 = &off_24C338708;
  *(_QWORD *)(v0 + 8) = 850045863;
  mlcore::TypedEntityClass<mlcore::PlaylistAuthor>::sharedPointer(void)::__sharedPointer = v0;
  return result;
}

void mlcore::TypedEntityClass<mlcore::PlaylistAuthor>::~TypedEntityClass(mlcore::EntityClass *a1)
{
  mlcore::EntityClass::~EntityClass(a1);
  JUMPOUT(0x20BD27AFCLL);
}

uint64_t mlcore::TypedEntityClass<mlcore::PlaylistAuthor>::description(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
}

__n128 mlcore::TypedEntityClass<mlcore::PlaylistAuthor>::create@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, __n128 *a4@<X8>)
{
  char *v8;
  uint64_t v9;
  unint64_t *v10;
  uint64_t v11;
  __n128 result;
  __n128 v13;
  unint64_t v14[3];
  unint64_t *v15;
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  v8 = (char *)operator new(0x100uLL);
  *((_QWORD *)v8 + 1) = 0;
  *((_QWORD *)v8 + 2) = 0;
  *(_QWORD *)v8 = &off_24C33C948;
  *(_OWORD *)(v8 + 40) = 0u;
  *(_OWORD *)(v8 + 56) = 0u;
  *((_DWORD *)v8 + 18) = 1065353216;
  *((_OWORD *)v8 + 5) = 0u;
  *((_OWORD *)v8 + 6) = 0u;
  *((_DWORD *)v8 + 28) = 1065353216;
  *(_OWORD *)(v8 + 120) = 0u;
  *(_OWORD *)(v8 + 136) = 0u;
  *((_DWORD *)v8 + 38) = 1065353216;
  *((_OWORD *)v8 + 10) = 0u;
  *((_OWORD *)v8 + 11) = 0u;
  *((_DWORD *)v8 + 48) = 1065353216;
  *(_OWORD *)(v8 + 216) = 0u;
  *((_DWORD *)v8 + 58) = 1065353216;
  *((_QWORD *)v8 + 30) = &unk_24C3371E8;
  *((_QWORD *)v8 + 31) = a2;
  *(_OWORD *)(v8 + 200) = 0u;
  v9 = (uint64_t)(v8 + 200);
  *((_QWORD *)v8 + 4) = &off_24C3371C0;
  *((_QWORD *)v8 + 3) = &off_24C3375D0;
  v13.n128_u64[0] = (unint64_t)(v8 + 24);
  v13.n128_u64[1] = (unint64_t)v8;
  v14[0] = (unint64_t)&off_24C33B140;
  v15 = v14;
  mlcore::PropertyCache::mergePropertiesFromCache((uint64_t)(v8 + 32), a3, (uint64_t)v14);
  v10 = v15;
  if (v15 == v14)
  {
    v11 = 4;
    v10 = v14;
    goto LABEL_5;
  }
  if (v15)
  {
    v11 = 5;
LABEL_5:
    (*(void (**)(void))(*v10 + 8 * v11))();
  }
  v14[0] = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 112))(a1);
  std::__hash_table<std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>,std::__unordered_map_hasher<mlcore::ModelProperty<long long> *,std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>,std::hash<mlcore::ModelProperty<long long> *>,std::equal_to<mlcore::ModelProperty<long long> *>,true>,std::__unordered_map_equal<mlcore::ModelProperty<long long> *,std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>,std::equal_to<mlcore::ModelProperty<long long> *>,std::hash<mlcore::ModelProperty<long long> *>,true>,std::allocator<std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>>>::__emplace_unique_key_args<mlcore::ModelProperty<long long> *,std::piecewise_construct_t const&,std::tuple<mlcore::ModelProperty<long long> * const&>,std::tuple<>>(v9, v14[0], v14)[3] = a2;
  result = v13;
  *a4 = v13;
  return result;
}

void sub_20A85AFC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15)
{
  char *v15;
  char *v17;
  uint64_t v18;

  v17 = a15;
  if (a15 == v15)
  {
    v18 = 4;
    v17 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v18 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v17 + 8 * v18))();
LABEL_6:
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t mlcore::TypedEntityClass<mlcore::PlaylistAuthor>::name(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
}

uint64_t mlcore::TypedEntityClass<mlcore::PlaylistAuthor>::entityType()
{
  return 11;
}

BOOL mlcore::TypedEntityClass<mlcore::PlaylistAuthor>::isRevisionTrackable(uint64_t a1)
{
  return (*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1) != -1;
}

uint64_t mlcore::TypedEntityClass<mlcore::PlaylistAuthor>::isCloudUpdatable()
{
  return 0;
}

void mlcore::TypedEntityClass<mlcore::PlaylistAuthor>::databaseTablesToDeleteFrom(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

void mlcore::TypedEntityClass<mlcore::PlaylistAuthor>::databaseTablesToInsertInto(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

uint64_t mlcore::TypedEntityClass<mlcore::PlaylistAuthor>::representativeItemPersistentIDProperty()
{
  return 0;
}

uint64_t mlcore::TypedEntityClass<mlcore::PlaylistAuthor>::trackForeignPersistentIDProperty()
{
  return 0;
}

uint64_t mlcore::TypedEntityClass<mlcore::PlaylistAuthor>::trackForeignOrderingProperty()
{
  return 0;
}

uint64_t mlcore::TypedEntityClass<mlcore::PlaylistAuthor>::sectionPropertyForOrderingProperty()
{
  return 0;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::PlaylistAuthorPropertyPersistentID(void)::$_0 &&>>()
{
  uint64_t v0;
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  mlcore::ContainerAuthorTable **v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  std::string *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  std::string *v19;
  __int128 v20;
  std::string v21;
  std::string __p;
  char v23;
  _QWORD v24[2];

  v0 = operator new();
  v1 = (_QWORD *)mediaplatform::Singleton<mlcore::ContainerAuthorTable>::sharedInstance();
  v2 = (std::__shared_weak_count *)v1[1];
  v24[0] = *v1;
  v24[1] = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  v5 = (mlcore::ContainerAuthorTable **)mediaplatform::Singleton<mlcore::ContainerAuthorTable>::sharedInstance();
  mlcore::ContainerAuthorTable::persistentIDColumn(*v5, (uint64_t)&__p);
  mlcore::DatabaseModelProperty<long long>::DatabaseModelProperty(v0, v24, (uint64_t)&__p);
  mlcore::PlaylistAuthorPropertyPersistentID(void)::property = v0;
  if (v23 < 0)
    operator delete((void *)__p.__r_.__value_.__l.__size_);
  if (v2)
  {
    v6 = (unint64_t *)&v2->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v8 = mlcore::PlaylistAuthorPropertyPersistentID(void)::property;
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  std::string::operator=((std::string *)(v8 + 40), &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v9 = mlcore::TypedEntityClass<mlcore::PlaylistAuthor>::sharedPointer();
  v10 = mlcore::PlaylistAuthorPropertyPersistentID(void)::property;
  v11 = mediaplatform::Singleton<mlcore::ContainerAuthorTable>::sharedInstance();
  v12 = *(_QWORD *)v11;
  if (*(char *)(*(_QWORD *)v11 + 31) >= 0)
    v13 = *(unsigned __int8 *)(*(_QWORD *)v11 + 31);
  else
    v13 = *(_QWORD *)(*(_QWORD *)v11 + 16);
  v14 = &v21;
  std::string::basic_string[abi:ne180100]((uint64_t)&v21, v13 + 1);
  if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v14 = (std::string *)v21.__r_.__value_.__r.__words[0];
  if (v13)
  {
    v17 = *(char **)(v12 + 8);
    v16 = (char *)(v12 + 8);
    v15 = v17;
    if (v16[23] >= 0)
      v18 = v16;
    else
      v18 = v15;
    memmove(v14, v18, v13);
  }
  *(_WORD *)((char *)&v14->__r_.__value_.__l.__data_ + v13) = 46;
  v19 = std::string::append(&v21, "persistentID");
  v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  __p.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  mlcore::EntityClass::setPropertyForName(v9, v10, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
}

void sub_20A85B258(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

mlcore::ContainerAuthorTable *_ZNSt3__115allocate_sharedB8ne180100IN6mlcore20ContainerAuthorTableENS_9allocatorIS2_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(mlcore::ContainerAuthorTable **a1)
{
  _QWORD *v2;
  mlcore::ContainerAuthorTable *result;

  v2 = operator new(0x2A8uLL);
  v2[1] = 0;
  v2[2] = 0;
  *v2 = &off_24C33CF30;
  result = mlcore::ContainerAuthorTable::ContainerAuthorTable((mlcore::ContainerAuthorTable *)(v2 + 3));
  *a1 = result;
  a1[1] = (mlcore::ContainerAuthorTable *)v2;
  return result;
}

void sub_20A85B354(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<mlcore::ContainerAuthorTable>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C33CF30;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<mlcore::ContainerAuthorTable>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C33CF30;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x20BD27AFCLL);
}

uint64_t std::__shared_ptr_emplace<mlcore::ContainerAuthorTable>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__shared_ptr_emplace<mlcore::PlaylistAuthor>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C33C948;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<mlcore::PlaylistAuthor>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C33C948;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x20BD27AFCLL);
}

uint64_t std::__shared_ptr_emplace<mlcore::PlaylistAuthor>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::PlaylistAuthorPropertyContainerPersistentID(void)::$_0 &&>>()
{
  uint64_t v0;
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  mlcore::ContainerAuthorTable **v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  std::string *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  std::string *v19;
  __int128 v20;
  std::string v21;
  std::string __p;
  char v23;
  _QWORD v24[2];

  v0 = operator new();
  v1 = (_QWORD *)mediaplatform::Singleton<mlcore::ContainerAuthorTable>::sharedInstance();
  v2 = (std::__shared_weak_count *)v1[1];
  v24[0] = *v1;
  v24[1] = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  v5 = (mlcore::ContainerAuthorTable **)mediaplatform::Singleton<mlcore::ContainerAuthorTable>::sharedInstance();
  mlcore::ContainerAuthorTable::containerPersistentIDColumn(*v5, (uint64_t)&__p);
  mlcore::DatabaseModelProperty<long long>::DatabaseModelProperty(v0, v24, (uint64_t)&__p);
  mlcore::PlaylistAuthorPropertyContainerPersistentID(void)::property = v0;
  if (v23 < 0)
    operator delete((void *)__p.__r_.__value_.__l.__size_);
  if (v2)
  {
    v6 = (unint64_t *)&v2->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v8 = mlcore::PlaylistAuthorPropertyContainerPersistentID(void)::property;
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  std::string::operator=((std::string *)(v8 + 40), &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v9 = mlcore::TypedEntityClass<mlcore::PlaylistAuthor>::sharedPointer();
  v10 = mlcore::PlaylistAuthorPropertyContainerPersistentID(void)::property;
  v11 = mediaplatform::Singleton<mlcore::ContainerAuthorTable>::sharedInstance();
  v12 = *(_QWORD *)v11;
  if (*(char *)(*(_QWORD *)v11 + 31) >= 0)
    v13 = *(unsigned __int8 *)(*(_QWORD *)v11 + 31);
  else
    v13 = *(_QWORD *)(*(_QWORD *)v11 + 16);
  v14 = &v21;
  std::string::basic_string[abi:ne180100]((uint64_t)&v21, v13 + 1);
  if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v14 = (std::string *)v21.__r_.__value_.__r.__words[0];
  if (v13)
  {
    v17 = *(char **)(v12 + 8);
    v16 = (char *)(v12 + 8);
    v15 = v17;
    if (v16[23] >= 0)
      v18 = v16;
    else
      v18 = v15;
    memmove(v14, v18, v13);
  }
  *(_WORD *)((char *)&v14->__r_.__value_.__l.__data_ + v13) = 46;
  v19 = std::string::append(&v21, "containerPersistentID");
  v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  __p.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  mlcore::EntityClass::setPropertyForName(v9, v10, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
}

void sub_20A85B5E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::PlaylistAuthorPropertyPersonPersistentID(void)::$_0 &&>>()
{
  uint64_t v0;
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  mlcore::ContainerAuthorTable **v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  std::string *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  std::string *v19;
  __int128 v20;
  std::string v21;
  std::string __p;
  char v23;
  _QWORD v24[2];

  v0 = operator new();
  v1 = (_QWORD *)mediaplatform::Singleton<mlcore::ContainerAuthorTable>::sharedInstance();
  v2 = (std::__shared_weak_count *)v1[1];
  v24[0] = *v1;
  v24[1] = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  v5 = (mlcore::ContainerAuthorTable **)mediaplatform::Singleton<mlcore::ContainerAuthorTable>::sharedInstance();
  mlcore::ContainerAuthorTable::personPersistentIDColumn(*v5, (uint64_t)&__p);
  mlcore::DatabaseModelProperty<long long>::DatabaseModelProperty(v0, v24, (uint64_t)&__p);
  mlcore::PlaylistAuthorPropertyPersonPersistentID(void)::property = v0;
  if (v23 < 0)
    operator delete((void *)__p.__r_.__value_.__l.__size_);
  if (v2)
  {
    v6 = (unint64_t *)&v2->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v8 = mlcore::PlaylistAuthorPropertyPersonPersistentID(void)::property;
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  std::string::operator=((std::string *)(v8 + 40), &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v9 = mlcore::TypedEntityClass<mlcore::PlaylistAuthor>::sharedPointer();
  v10 = mlcore::PlaylistAuthorPropertyPersonPersistentID(void)::property;
  v11 = mediaplatform::Singleton<mlcore::ContainerAuthorTable>::sharedInstance();
  v12 = *(_QWORD *)v11;
  if (*(char *)(*(_QWORD *)v11 + 31) >= 0)
    v13 = *(unsigned __int8 *)(*(_QWORD *)v11 + 31);
  else
    v13 = *(_QWORD *)(*(_QWORD *)v11 + 16);
  v14 = &v21;
  std::string::basic_string[abi:ne180100]((uint64_t)&v21, v13 + 1);
  if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v14 = (std::string *)v21.__r_.__value_.__r.__words[0];
  if (v13)
  {
    v17 = *(char **)(v12 + 8);
    v16 = (char *)(v12 + 8);
    v15 = v17;
    if (v16[23] >= 0)
      v18 = v16;
    else
      v18 = v15;
    memmove(v14, v18, v13);
  }
  *(_WORD *)((char *)&v14->__r_.__value_.__l.__data_ + v13) = 46;
  v19 = std::string::append(&v21, "personPersistentID");
  v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  __p.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  mlcore::EntityClass::setPropertyForName(v9, v10, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
}

void sub_20A85B870(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::PlaylistAuthorPropertyRole(void)::$_0 &&>>()
{
  uint64_t v0;
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  mlcore::ContainerAuthorTable **v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  std::string *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  std::string *v19;
  __int128 v20;
  std::string v21;
  std::string __p;
  char v23;
  _QWORD v24[2];

  v0 = operator new();
  v1 = (_QWORD *)mediaplatform::Singleton<mlcore::ContainerAuthorTable>::sharedInstance();
  v2 = (std::__shared_weak_count *)v1[1];
  v24[0] = *v1;
  v24[1] = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  v5 = (mlcore::ContainerAuthorTable **)mediaplatform::Singleton<mlcore::ContainerAuthorTable>::sharedInstance();
  mlcore::ContainerAuthorTable::roleColumn(*v5, (uint64_t)&__p);
  mlcore::DatabaseModelProperty<int>::DatabaseModelProperty(v0, v24, (uint64_t)&__p);
  mlcore::PlaylistAuthorPropertyRole(void)::property = v0;
  if (v23 < 0)
    operator delete((void *)__p.__r_.__value_.__l.__size_);
  if (v2)
  {
    v6 = (unint64_t *)&v2->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v8 = mlcore::PlaylistAuthorPropertyRole(void)::property;
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  std::string::operator=((std::string *)(v8 + 40), &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v9 = mlcore::TypedEntityClass<mlcore::PlaylistAuthor>::sharedPointer();
  v10 = mlcore::PlaylistAuthorPropertyRole(void)::property;
  v11 = mediaplatform::Singleton<mlcore::ContainerAuthorTable>::sharedInstance();
  v12 = *(_QWORD *)v11;
  if (*(char *)(*(_QWORD *)v11 + 31) >= 0)
    v13 = *(unsigned __int8 *)(*(_QWORD *)v11 + 31);
  else
    v13 = *(_QWORD *)(*(_QWORD *)v11 + 16);
  v14 = &v21;
  std::string::basic_string[abi:ne180100]((uint64_t)&v21, v13 + 1);
  if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v14 = (std::string *)v21.__r_.__value_.__r.__words[0];
  if (v13)
  {
    v17 = *(char **)(v12 + 8);
    v16 = (char *)(v12 + 8);
    v15 = v17;
    if (v16[23] >= 0)
      v18 = v16;
    else
      v18 = v15;
    memmove(v14, v18, v13);
  }
  *(_WORD *)((char *)&v14->__r_.__value_.__l.__data_ + v13) = 46;
  v19 = std::string::append(&v21, "role");
  v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  __p.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  mlcore::EntityClass::setPropertyForName(v9, v10, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
}

void sub_20A85BB00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::PlaylistAuthorPropertyIsPending(void)::$_0 &&>>()
{
  uint64_t v0;
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  mlcore::ContainerAuthorTable **v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  std::string *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  std::string *v19;
  __int128 v20;
  std::string v21;
  std::string __p;
  char v23;
  _QWORD v24[2];

  v0 = operator new();
  v1 = (_QWORD *)mediaplatform::Singleton<mlcore::ContainerAuthorTable>::sharedInstance();
  v2 = (std::__shared_weak_count *)v1[1];
  v24[0] = *v1;
  v24[1] = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  v5 = (mlcore::ContainerAuthorTable **)mediaplatform::Singleton<mlcore::ContainerAuthorTable>::sharedInstance();
  mlcore::ContainerAuthorTable::isPendingColumn(*v5, (uint64_t)&__p);
  mlcore::DatabaseModelProperty<int>::DatabaseModelProperty(v0, v24, (uint64_t)&__p);
  mlcore::PlaylistAuthorPropertyIsPending(void)::property = v0;
  if (v23 < 0)
    operator delete((void *)__p.__r_.__value_.__l.__size_);
  if (v2)
  {
    v6 = (unint64_t *)&v2->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v8 = mlcore::PlaylistAuthorPropertyIsPending(void)::property;
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  std::string::operator=((std::string *)(v8 + 40), &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v9 = mlcore::TypedEntityClass<mlcore::PlaylistAuthor>::sharedPointer();
  v10 = mlcore::PlaylistAuthorPropertyIsPending(void)::property;
  v11 = mediaplatform::Singleton<mlcore::ContainerAuthorTable>::sharedInstance();
  v12 = *(_QWORD *)v11;
  if (*(char *)(*(_QWORD *)v11 + 31) >= 0)
    v13 = *(unsigned __int8 *)(*(_QWORD *)v11 + 31);
  else
    v13 = *(_QWORD *)(*(_QWORD *)v11 + 16);
  v14 = &v21;
  std::string::basic_string[abi:ne180100]((uint64_t)&v21, v13 + 1);
  if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v14 = (std::string *)v21.__r_.__value_.__r.__words[0];
  if (v13)
  {
    v17 = *(char **)(v12 + 8);
    v16 = (char *)(v12 + 8);
    v15 = v17;
    if (v16[23] >= 0)
      v18 = v16;
    else
      v18 = v15;
    memmove(v14, v18, v13);
  }
  *(_WORD *)((char *)&v14->__r_.__value_.__l.__data_ + v13) = 46;
  v19 = std::string::append(&v21, "isPending");
  v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  __p.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  mlcore::EntityClass::setPropertyForName(v9, v10, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
}

void sub_20A85BD90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::PlaylistAuthorPropertyPosition(void)::$_0 &&>>()
{
  uint64_t v0;
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  mlcore::ContainerAuthorTable **v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  std::string *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  std::string *v19;
  __int128 v20;
  std::string v21;
  std::string __p;
  char v23;
  _QWORD v24[2];

  v0 = operator new();
  v1 = (_QWORD *)mediaplatform::Singleton<mlcore::ContainerAuthorTable>::sharedInstance();
  v2 = (std::__shared_weak_count *)v1[1];
  v24[0] = *v1;
  v24[1] = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  v5 = (mlcore::ContainerAuthorTable **)mediaplatform::Singleton<mlcore::ContainerAuthorTable>::sharedInstance();
  mlcore::ContainerAuthorTable::positionColumn(*v5, (uint64_t)&__p);
  mlcore::DatabaseModelProperty<int>::DatabaseModelProperty(v0, v24, (uint64_t)&__p);
  mlcore::PlaylistAuthorPropertyPosition(void)::property = v0;
  if (v23 < 0)
    operator delete((void *)__p.__r_.__value_.__l.__size_);
  if (v2)
  {
    v6 = (unint64_t *)&v2->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v8 = mlcore::PlaylistAuthorPropertyPosition(void)::property;
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  std::string::operator=((std::string *)(v8 + 40), &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v9 = mlcore::TypedEntityClass<mlcore::PlaylistAuthor>::sharedPointer();
  v10 = mlcore::PlaylistAuthorPropertyPosition(void)::property;
  v11 = mediaplatform::Singleton<mlcore::ContainerAuthorTable>::sharedInstance();
  v12 = *(_QWORD *)v11;
  if (*(char *)(*(_QWORD *)v11 + 31) >= 0)
    v13 = *(unsigned __int8 *)(*(_QWORD *)v11 + 31);
  else
    v13 = *(_QWORD *)(*(_QWORD *)v11 + 16);
  v14 = &v21;
  std::string::basic_string[abi:ne180100]((uint64_t)&v21, v13 + 1);
  if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v14 = (std::string *)v21.__r_.__value_.__r.__words[0];
  if (v13)
  {
    v17 = *(char **)(v12 + 8);
    v16 = (char *)(v12 + 8);
    v15 = v17;
    if (v16[23] >= 0)
      v18 = v16;
    else
      v18 = v15;
    memmove(v14, v18, v13);
  }
  *(_WORD *)((char *)&v14->__r_.__value_.__l.__data_ + v13) = 46;
  v19 = std::string::append(&v21, "position");
  v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  __p.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  mlcore::EntityClass::setPropertyForName(v9, v10, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
}

void sub_20A85C020(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

double mlcore::PlaylistAuthor::PlaylistAuthor(mlcore::PlaylistAuthor *this, uint64_t a2)
{
  double result;

  result = 0.0;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_DWORD *)this + 12) = 1065353216;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *((_DWORD *)this + 22) = 1065353216;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_DWORD *)this + 32) = 1065353216;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 152) = 0u;
  *((_DWORD *)this + 42) = 1065353216;
  *((_OWORD *)this + 11) = 0u;
  *((_OWORD *)this + 12) = 0u;
  *((_DWORD *)this + 52) = 1065353216;
  *((_QWORD *)this + 27) = &unk_24C3371E8;
  *((_QWORD *)this + 28) = a2;
  *(_QWORD *)this = &off_24C3375D0;
  *((_QWORD *)this + 1) = &off_24C3371C0;
  return result;
}

{
  double result;

  result = 0.0;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_DWORD *)this + 12) = 1065353216;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *((_DWORD *)this + 22) = 1065353216;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_DWORD *)this + 32) = 1065353216;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 152) = 0u;
  *((_DWORD *)this + 42) = 1065353216;
  *((_OWORD *)this + 11) = 0u;
  *((_OWORD *)this + 12) = 0u;
  *((_DWORD *)this + 52) = 1065353216;
  *((_QWORD *)this + 27) = &unk_24C3371E8;
  *((_QWORD *)this + 28) = a2;
  *(_QWORD *)this = &off_24C3375D0;
  *((_QWORD *)this + 1) = &off_24C3371C0;
  return result;
}

void mlcore::ItemTable::~ItemTable(mlcore::ItemTable *this)
{
  *(_QWORD *)this = off_24C336408;
  std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul,3ul,4ul,5ul,6ul,7ul,8ul,9ul,10ul,11ul,12ul,13ul,14ul,15ul,16ul,17ul,18ul,19ul,20ul,21ul,22ul,23ul,24ul,25ul,26ul,27ul,28ul,29ul,30ul,31ul,32ul,33ul,34ul,35ul,36ul,37ul>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<int>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<int>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<int>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<int>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<int>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<int>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<int>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<int>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<long long>>::~__tuple_impl((uint64_t)this + 1904);
  *(_QWORD *)this = off_24C3358A0;
  *((_QWORD *)this + 232) = off_24C335D90;
  if (*((char *)this + 1887) < 0)
    operator delete(*((void **)this + 233));
  *((_QWORD *)this + 226) = off_24C335D90;
  if (*((char *)this + 1839) < 0)
    operator delete(*((void **)this + 227));
  mediaplatform::DatabaseColumnTuple<2ul,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>>::~DatabaseColumnTuple((uint64_t)this + 80);
  if (*((char *)this + 79) < 0)
    operator delete(*((void **)this + 7));
  mediaplatform::DatabaseTableBase::~DatabaseTableBase((void **)this);
}

{
  *(_QWORD *)this = off_24C336408;
  std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul,3ul,4ul,5ul,6ul,7ul,8ul,9ul,10ul,11ul,12ul,13ul,14ul,15ul,16ul,17ul,18ul,19ul,20ul,21ul,22ul,23ul,24ul,25ul,26ul,27ul,28ul,29ul,30ul,31ul,32ul,33ul,34ul,35ul,36ul,37ul>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<int>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<int>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<int>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<int>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<int>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<int>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<int>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<int>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<long long>>::~__tuple_impl((uint64_t)this + 1904);
  *(_QWORD *)this = off_24C3358A0;
  *((_QWORD *)this + 232) = off_24C335D90;
  if (*((char *)this + 1887) < 0)
    operator delete(*((void **)this + 233));
  *((_QWORD *)this + 226) = off_24C335D90;
  if (*((char *)this + 1839) < 0)
    operator delete(*((void **)this + 227));
  mediaplatform::DatabaseColumnTuple<2ul,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>>::~DatabaseColumnTuple((uint64_t)this + 80);
  if (*((char *)this + 79) < 0)
    operator delete(*((void **)this + 7));
  mediaplatform::DatabaseTableBase::~DatabaseTableBase((void **)this);
  JUMPOUT(0x20BD27AFCLL);
}

uint64_t mediaplatform::DatabaseTable<long long,int,long long,int,long long,long long,int,long long,int,long long,long long,int,long long,long long,int,long long,long long,int,long long,long long,int,int,int,int,long long,long long,int,int,int,int,int,int,int,long long,int,long long,long long,long long>::columnCount()
{
  return 38;
}

uint64_t std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul,3ul,4ul,5ul,6ul,7ul,8ul,9ul,10ul,11ul,12ul,13ul,14ul,15ul,16ul,17ul,18ul,19ul,20ul,21ul,22ul,23ul,24ul,25ul,26ul,27ul,28ul,29ul,30ul,31ul,32ul,33ul,34ul,35ul,36ul,37ul>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<int>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<int>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<int>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<int>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<int>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<int>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<int>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<int>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<long long>>::~__tuple_impl(uint64_t a1)
{
  *(_QWORD *)(a1 + 1776) = off_24C335D90;
  if (*(char *)(a1 + 1807) < 0)
    operator delete(*(void **)(a1 + 1784));
  *(_QWORD *)(a1 + 1728) = off_24C335D90;
  if (*(char *)(a1 + 1759) < 0)
    operator delete(*(void **)(a1 + 1736));
  *(_QWORD *)(a1 + 1680) = off_24C335D90;
  if (*(char *)(a1 + 1711) < 0)
    operator delete(*(void **)(a1 + 1688));
  *(_QWORD *)(a1 + 1632) = off_24C335D90;
  if (*(char *)(a1 + 1663) < 0)
    operator delete(*(void **)(a1 + 1640));
  *(_QWORD *)(a1 + 1584) = off_24C335D90;
  if (*(char *)(a1 + 1615) < 0)
    operator delete(*(void **)(a1 + 1592));
  *(_QWORD *)(a1 + 1536) = off_24C335D90;
  if (*(char *)(a1 + 1567) < 0)
    operator delete(*(void **)(a1 + 1544));
  *(_QWORD *)(a1 + 1488) = off_24C335D90;
  if (*(char *)(a1 + 1519) < 0)
    operator delete(*(void **)(a1 + 1496));
  *(_QWORD *)(a1 + 1440) = off_24C335D90;
  if (*(char *)(a1 + 1471) < 0)
    operator delete(*(void **)(a1 + 1448));
  *(_QWORD *)(a1 + 1392) = off_24C335D90;
  if (*(char *)(a1 + 1423) < 0)
    operator delete(*(void **)(a1 + 1400));
  *(_QWORD *)(a1 + 1344) = off_24C335D90;
  if (*(char *)(a1 + 1375) < 0)
    operator delete(*(void **)(a1 + 1352));
  *(_QWORD *)(a1 + 1296) = off_24C335D90;
  if (*(char *)(a1 + 1327) < 0)
    operator delete(*(void **)(a1 + 1304));
  *(_QWORD *)(a1 + 1248) = off_24C335D90;
  if (*(char *)(a1 + 1279) < 0)
    operator delete(*(void **)(a1 + 1256));
  *(_QWORD *)(a1 + 1200) = off_24C335D90;
  if (*(char *)(a1 + 1231) < 0)
    operator delete(*(void **)(a1 + 1208));
  *(_QWORD *)(a1 + 1152) = off_24C335D90;
  if (*(char *)(a1 + 1183) < 0)
    operator delete(*(void **)(a1 + 1160));
  *(_QWORD *)(a1 + 1104) = off_24C335D90;
  if (*(char *)(a1 + 1135) < 0)
    operator delete(*(void **)(a1 + 1112));
  *(_QWORD *)(a1 + 1056) = off_24C335D90;
  if (*(char *)(a1 + 1087) < 0)
    operator delete(*(void **)(a1 + 1064));
  *(_QWORD *)(a1 + 1008) = off_24C335D90;
  if (*(char *)(a1 + 1039) < 0)
    operator delete(*(void **)(a1 + 1016));
  *(_QWORD *)(a1 + 960) = off_24C335D90;
  if (*(char *)(a1 + 991) < 0)
    operator delete(*(void **)(a1 + 968));
  *(_QWORD *)(a1 + 912) = off_24C335D90;
  if (*(char *)(a1 + 943) < 0)
    operator delete(*(void **)(a1 + 920));
  *(_QWORD *)(a1 + 864) = off_24C335D90;
  if (*(char *)(a1 + 895) < 0)
    operator delete(*(void **)(a1 + 872));
  *(_QWORD *)(a1 + 816) = off_24C335D90;
  if (*(char *)(a1 + 847) < 0)
    operator delete(*(void **)(a1 + 824));
  *(_QWORD *)(a1 + 768) = off_24C335D90;
  if (*(char *)(a1 + 799) < 0)
    operator delete(*(void **)(a1 + 776));
  *(_QWORD *)(a1 + 720) = off_24C335D90;
  if (*(char *)(a1 + 751) < 0)
    operator delete(*(void **)(a1 + 728));
  *(_QWORD *)(a1 + 672) = off_24C335D90;
  if (*(char *)(a1 + 703) < 0)
    operator delete(*(void **)(a1 + 680));
  *(_QWORD *)(a1 + 624) = off_24C335D90;
  if (*(char *)(a1 + 655) < 0)
    operator delete(*(void **)(a1 + 632));
  *(_QWORD *)(a1 + 576) = off_24C335D90;
  if (*(char *)(a1 + 607) < 0)
    operator delete(*(void **)(a1 + 584));
  *(_QWORD *)(a1 + 528) = off_24C335D90;
  if (*(char *)(a1 + 559) < 0)
    operator delete(*(void **)(a1 + 536));
  *(_QWORD *)(a1 + 480) = off_24C335D90;
  if (*(char *)(a1 + 511) < 0)
    operator delete(*(void **)(a1 + 488));
  *(_QWORD *)(a1 + 432) = off_24C335D90;
  if (*(char *)(a1 + 463) < 0)
    operator delete(*(void **)(a1 + 440));
  *(_QWORD *)(a1 + 384) = off_24C335D90;
  if (*(char *)(a1 + 415) < 0)
    operator delete(*(void **)(a1 + 392));
  *(_QWORD *)(a1 + 336) = off_24C335D90;
  if (*(char *)(a1 + 367) < 0)
    operator delete(*(void **)(a1 + 344));
  *(_QWORD *)(a1 + 288) = off_24C335D90;
  if (*(char *)(a1 + 319) < 0)
    operator delete(*(void **)(a1 + 296));
  *(_QWORD *)(a1 + 240) = off_24C335D90;
  if (*(char *)(a1 + 271) < 0)
    operator delete(*(void **)(a1 + 248));
  *(_QWORD *)(a1 + 192) = off_24C335D90;
  if (*(char *)(a1 + 223) < 0)
    operator delete(*(void **)(a1 + 200));
  *(_QWORD *)(a1 + 144) = off_24C335D90;
  if (*(char *)(a1 + 175) < 0)
    operator delete(*(void **)(a1 + 152));
  *(_QWORD *)(a1 + 96) = off_24C335D90;
  if (*(char *)(a1 + 127) < 0)
    operator delete(*(void **)(a1 + 104));
  *(_QWORD *)(a1 + 48) = off_24C335D90;
  if (*(char *)(a1 + 79) < 0)
    operator delete(*(void **)(a1 + 56));
  *(_QWORD *)a1 = off_24C335D90;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

uint64_t mediaplatform::DatabaseColumnTuple<2ul,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>>::~DatabaseColumnTuple(uint64_t a1)
{
  *(_QWORD *)(a1 + 1680) = off_24C335D90;
  if (*(char *)(a1 + 1711) < 0)
    operator delete(*(void **)(a1 + 1688));
  *(_QWORD *)(a1 + 1632) = off_24C335D90;
  if (*(char *)(a1 + 1663) < 0)
    operator delete(*(void **)(a1 + 1640));
  *(_QWORD *)(a1 + 1584) = off_24C335D90;
  if (*(char *)(a1 + 1615) < 0)
    operator delete(*(void **)(a1 + 1592));
  *(_QWORD *)(a1 + 1536) = off_24C335D90;
  if (*(char *)(a1 + 1567) < 0)
    operator delete(*(void **)(a1 + 1544));
  *(_QWORD *)(a1 + 1488) = off_24C335D90;
  if (*(char *)(a1 + 1519) < 0)
    operator delete(*(void **)(a1 + 1496));
  *(_QWORD *)(a1 + 1440) = off_24C335D90;
  if (*(char *)(a1 + 1471) < 0)
    operator delete(*(void **)(a1 + 1448));
  return mediaplatform::DatabaseColumnTuple<8ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>>::~DatabaseColumnTuple(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<8ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>>::~DatabaseColumnTuple(uint64_t a1)
{
  *(_QWORD *)(a1 + 1392) = off_24C335D90;
  if (*(char *)(a1 + 1423) < 0)
    operator delete(*(void **)(a1 + 1400));
  *(_QWORD *)(a1 + 1344) = off_24C335D90;
  if (*(char *)(a1 + 1375) < 0)
    operator delete(*(void **)(a1 + 1352));
  *(_QWORD *)(a1 + 1296) = off_24C335D90;
  if (*(char *)(a1 + 1327) < 0)
    operator delete(*(void **)(a1 + 1304));
  *(_QWORD *)(a1 + 1248) = off_24C335D90;
  if (*(char *)(a1 + 1279) < 0)
    operator delete(*(void **)(a1 + 1256));
  *(_QWORD *)(a1 + 1200) = off_24C335D90;
  if (*(char *)(a1 + 1231) < 0)
    operator delete(*(void **)(a1 + 1208));
  *(_QWORD *)(a1 + 1152) = off_24C335D90;
  if (*(char *)(a1 + 1183) < 0)
    operator delete(*(void **)(a1 + 1160));
  return mediaplatform::DatabaseColumnTuple<14ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>>::~DatabaseColumnTuple(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<14ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>>::~DatabaseColumnTuple(uint64_t a1)
{
  *(_QWORD *)(a1 + 1104) = off_24C335D90;
  if (*(char *)(a1 + 1135) < 0)
    operator delete(*(void **)(a1 + 1112));
  *(_QWORD *)(a1 + 1056) = off_24C335D90;
  if (*(char *)(a1 + 1087) < 0)
    operator delete(*(void **)(a1 + 1064));
  *(_QWORD *)(a1 + 1008) = off_24C335D90;
  if (*(char *)(a1 + 1039) < 0)
    operator delete(*(void **)(a1 + 1016));
  *(_QWORD *)(a1 + 960) = off_24C335D90;
  if (*(char *)(a1 + 991) < 0)
    operator delete(*(void **)(a1 + 968));
  *(_QWORD *)(a1 + 912) = off_24C335D90;
  if (*(char *)(a1 + 943) < 0)
    operator delete(*(void **)(a1 + 920));
  *(_QWORD *)(a1 + 864) = off_24C335D90;
  if (*(char *)(a1 + 895) < 0)
    operator delete(*(void **)(a1 + 872));
  return mediaplatform::DatabaseColumnTuple<20ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>>::~DatabaseColumnTuple(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<20ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>>::~DatabaseColumnTuple(uint64_t a1)
{
  *(_QWORD *)(a1 + 816) = off_24C335D90;
  if (*(char *)(a1 + 847) < 0)
    operator delete(*(void **)(a1 + 824));
  *(_QWORD *)(a1 + 768) = off_24C335D90;
  if (*(char *)(a1 + 799) < 0)
    operator delete(*(void **)(a1 + 776));
  *(_QWORD *)(a1 + 720) = off_24C335D90;
  if (*(char *)(a1 + 751) < 0)
    operator delete(*(void **)(a1 + 728));
  *(_QWORD *)(a1 + 672) = off_24C335D90;
  if (*(char *)(a1 + 703) < 0)
    operator delete(*(void **)(a1 + 680));
  *(_QWORD *)(a1 + 624) = off_24C335D90;
  if (*(char *)(a1 + 655) < 0)
    operator delete(*(void **)(a1 + 632));
  *(_QWORD *)(a1 + 576) = off_24C335D90;
  if (*(char *)(a1 + 607) < 0)
    operator delete(*(void **)(a1 + 584));
  return mediaplatform::DatabaseColumnTuple<26ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>>::~DatabaseColumnTuple(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<26ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>>::~DatabaseColumnTuple(uint64_t a1)
{
  *(_QWORD *)(a1 + 528) = off_24C335D90;
  if (*(char *)(a1 + 559) < 0)
    operator delete(*(void **)(a1 + 536));
  *(_QWORD *)(a1 + 480) = off_24C335D90;
  if (*(char *)(a1 + 511) < 0)
    operator delete(*(void **)(a1 + 488));
  *(_QWORD *)(a1 + 432) = off_24C335D90;
  if (*(char *)(a1 + 463) < 0)
    operator delete(*(void **)(a1 + 440));
  *(_QWORD *)(a1 + 384) = off_24C335D90;
  if (*(char *)(a1 + 415) < 0)
    operator delete(*(void **)(a1 + 392));
  *(_QWORD *)(a1 + 336) = off_24C335D90;
  if (*(char *)(a1 + 367) < 0)
    operator delete(*(void **)(a1 + 344));
  *(_QWORD *)(a1 + 288) = off_24C335D90;
  if (*(char *)(a1 + 319) < 0)
    operator delete(*(void **)(a1 + 296));
  return std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul,3ul,4ul,5ul>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>>::~__tuple_impl(a1);
}

void mediaplatform::DatabaseTable<long long,int,long long,int,long long,long long,int,long long,int,long long,long long,int,long long,long long,int,long long,long long,int,long long,long long,int,int,int,int,long long,long long,int,int,int,int,int,int,int,long long,int,long long,long long,long long>::~DatabaseTable(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = off_24C3358A0;
  v2 = a1 + 80;
  *(_QWORD *)(a1 + 1856) = off_24C335D90;
  if (*(char *)(a1 + 1887) < 0)
    operator delete(*(void **)(a1 + 1864));
  *(_QWORD *)(a1 + 1808) = off_24C335D90;
  if (*(char *)(a1 + 1839) < 0)
    operator delete(*(void **)(a1 + 1816));
  mediaplatform::DatabaseColumnTuple<2ul,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>>::~DatabaseColumnTuple(v2);
  if (*(char *)(a1 + 79) < 0)
    operator delete(*(void **)(a1 + 56));
  mediaplatform::DatabaseTableBase::~DatabaseTableBase((void **)a1);
}

{
  uint64_t v2;

  *(_QWORD *)a1 = off_24C3358A0;
  v2 = a1 + 80;
  *(_QWORD *)(a1 + 1856) = off_24C335D90;
  if (*(char *)(a1 + 1887) < 0)
    operator delete(*(void **)(a1 + 1864));
  *(_QWORD *)(a1 + 1808) = off_24C335D90;
  if (*(char *)(a1 + 1839) < 0)
    operator delete(*(void **)(a1 + 1816));
  mediaplatform::DatabaseColumnTuple<2ul,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>>::~DatabaseColumnTuple(v2);
  if (*(char *)(a1 + 79) < 0)
    operator delete(*(void **)(a1 + 56));
  mediaplatform::DatabaseTableBase::~DatabaseTableBase((void **)a1);
  JUMPOUT(0x20BD27AFCLL);
}

{
  uint64_t v2;

  *(_QWORD *)a1 = off_24C3358A0;
  v2 = a1 + 80;
  *(_QWORD *)(a1 + 1856) = off_24C335D90;
  if (*(char *)(a1 + 1887) < 0)
    operator delete(*(void **)(a1 + 1864));
  *(_QWORD *)(a1 + 1808) = off_24C335D90;
  if (*(char *)(a1 + 1839) < 0)
    operator delete(*(void **)(a1 + 1816));
  mediaplatform::DatabaseColumnTuple<2ul,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>>::~DatabaseColumnTuple(v2);
  if (*(char *)(a1 + 79) < 0)
    operator delete(*(void **)(a1 + 56));
  mediaplatform::DatabaseTableBase::~DatabaseTableBase((void **)a1);
}

void mlcore::MediaTable<long long,int,long long,int,long long,long long,int,long long,int,long long,long long,int,long long,long long,int,long long,long long,int,long long,long long,int,int,int,int,long long,long long,int,int,int,int,int,int,int,long long,int,long long,long long,long long>::~MediaTable(uint64_t a1)
{
  *(_QWORD *)a1 = off_24C336408;
  std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul,3ul,4ul,5ul,6ul,7ul,8ul,9ul,10ul,11ul,12ul,13ul,14ul,15ul,16ul,17ul,18ul,19ul,20ul,21ul,22ul,23ul,24ul,25ul,26ul,27ul,28ul,29ul,30ul,31ul,32ul,33ul,34ul,35ul,36ul,37ul>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<int>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<int>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<int>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<int>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<int>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<int>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<int>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<int>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<long long>>::~__tuple_impl(a1 + 1904);
  *(_QWORD *)a1 = off_24C3358A0;
  *(_QWORD *)(a1 + 1856) = off_24C335D90;
  if (*(char *)(a1 + 1887) < 0)
    operator delete(*(void **)(a1 + 1864));
  *(_QWORD *)(a1 + 1808) = off_24C335D90;
  if (*(char *)(a1 + 1839) < 0)
    operator delete(*(void **)(a1 + 1816));
  mediaplatform::DatabaseColumnTuple<2ul,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>>::~DatabaseColumnTuple(a1 + 80);
  if (*(char *)(a1 + 79) < 0)
    operator delete(*(void **)(a1 + 56));
  mediaplatform::DatabaseTableBase::~DatabaseTableBase((void **)a1);
}

{
  *(_QWORD *)a1 = off_24C336408;
  std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul,3ul,4ul,5ul,6ul,7ul,8ul,9ul,10ul,11ul,12ul,13ul,14ul,15ul,16ul,17ul,18ul,19ul,20ul,21ul,22ul,23ul,24ul,25ul,26ul,27ul,28ul,29ul,30ul,31ul,32ul,33ul,34ul,35ul,36ul,37ul>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<int>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<int>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<int>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<int>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<int>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<int>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<int>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<int>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<long long>>::~__tuple_impl(a1 + 1904);
  *(_QWORD *)a1 = off_24C3358A0;
  *(_QWORD *)(a1 + 1856) = off_24C335D90;
  if (*(char *)(a1 + 1887) < 0)
    operator delete(*(void **)(a1 + 1864));
  *(_QWORD *)(a1 + 1808) = off_24C335D90;
  if (*(char *)(a1 + 1839) < 0)
    operator delete(*(void **)(a1 + 1816));
  mediaplatform::DatabaseColumnTuple<2ul,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>>::~DatabaseColumnTuple(a1 + 80);
  if (*(char *)(a1 + 79) < 0)
    operator delete(*(void **)(a1 + 56));
  mediaplatform::DatabaseTableBase::~DatabaseTableBase((void **)a1);
  JUMPOUT(0x20BD27AFCLL);
}

uint64_t mediaplatform::DatabaseColumnTuple<1ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>>::~DatabaseColumnTuple(uint64_t a1)
{
  *(_QWORD *)(a1 + 1728) = off_24C335D90;
  if (*(char *)(a1 + 1759) < 0)
    operator delete(*(void **)(a1 + 1736));
  return mediaplatform::DatabaseColumnTuple<2ul,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>>::~DatabaseColumnTuple(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<3ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>>::~DatabaseColumnTuple(uint64_t a1)
{
  *(_QWORD *)(a1 + 1632) = off_24C335D90;
  if (*(char *)(a1 + 1663) < 0)
    operator delete(*(void **)(a1 + 1640));
  *(_QWORD *)(a1 + 1584) = off_24C335D90;
  if (*(char *)(a1 + 1615) < 0)
    operator delete(*(void **)(a1 + 1592));
  *(_QWORD *)(a1 + 1536) = off_24C335D90;
  if (*(char *)(a1 + 1567) < 0)
    operator delete(*(void **)(a1 + 1544));
  *(_QWORD *)(a1 + 1488) = off_24C335D90;
  if (*(char *)(a1 + 1519) < 0)
    operator delete(*(void **)(a1 + 1496));
  *(_QWORD *)(a1 + 1440) = off_24C335D90;
  if (*(char *)(a1 + 1471) < 0)
    operator delete(*(void **)(a1 + 1448));
  return mediaplatform::DatabaseColumnTuple<8ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>>::~DatabaseColumnTuple(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<4ul,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>>::~DatabaseColumnTuple(uint64_t a1)
{
  *(_QWORD *)(a1 + 1584) = off_24C335D90;
  if (*(char *)(a1 + 1615) < 0)
    operator delete(*(void **)(a1 + 1592));
  *(_QWORD *)(a1 + 1536) = off_24C335D90;
  if (*(char *)(a1 + 1567) < 0)
    operator delete(*(void **)(a1 + 1544));
  *(_QWORD *)(a1 + 1488) = off_24C335D90;
  if (*(char *)(a1 + 1519) < 0)
    operator delete(*(void **)(a1 + 1496));
  *(_QWORD *)(a1 + 1440) = off_24C335D90;
  if (*(char *)(a1 + 1471) < 0)
    operator delete(*(void **)(a1 + 1448));
  return mediaplatform::DatabaseColumnTuple<8ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>>::~DatabaseColumnTuple(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<5ul,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>>::~DatabaseColumnTuple(uint64_t a1)
{
  *(_QWORD *)(a1 + 1536) = off_24C335D90;
  if (*(char *)(a1 + 1567) < 0)
    operator delete(*(void **)(a1 + 1544));
  *(_QWORD *)(a1 + 1488) = off_24C335D90;
  if (*(char *)(a1 + 1519) < 0)
    operator delete(*(void **)(a1 + 1496));
  *(_QWORD *)(a1 + 1440) = off_24C335D90;
  if (*(char *)(a1 + 1471) < 0)
    operator delete(*(void **)(a1 + 1448));
  return mediaplatform::DatabaseColumnTuple<8ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>>::~DatabaseColumnTuple(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<6ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>>::~DatabaseColumnTuple(uint64_t a1)
{
  *(_QWORD *)(a1 + 1488) = off_24C335D90;
  if (*(char *)(a1 + 1519) < 0)
    operator delete(*(void **)(a1 + 1496));
  *(_QWORD *)(a1 + 1440) = off_24C335D90;
  if (*(char *)(a1 + 1471) < 0)
    operator delete(*(void **)(a1 + 1448));
  return mediaplatform::DatabaseColumnTuple<8ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>>::~DatabaseColumnTuple(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<7ul,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>>::~DatabaseColumnTuple(uint64_t a1)
{
  *(_QWORD *)(a1 + 1440) = off_24C335D90;
  if (*(char *)(a1 + 1471) < 0)
    operator delete(*(void **)(a1 + 1448));
  return mediaplatform::DatabaseColumnTuple<8ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>>::~DatabaseColumnTuple(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<9ul,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>>::~DatabaseColumnTuple(uint64_t a1)
{
  *(_QWORD *)(a1 + 1344) = off_24C335D90;
  if (*(char *)(a1 + 1375) < 0)
    operator delete(*(void **)(a1 + 1352));
  *(_QWORD *)(a1 + 1296) = off_24C335D90;
  if (*(char *)(a1 + 1327) < 0)
    operator delete(*(void **)(a1 + 1304));
  *(_QWORD *)(a1 + 1248) = off_24C335D90;
  if (*(char *)(a1 + 1279) < 0)
    operator delete(*(void **)(a1 + 1256));
  *(_QWORD *)(a1 + 1200) = off_24C335D90;
  if (*(char *)(a1 + 1231) < 0)
    operator delete(*(void **)(a1 + 1208));
  *(_QWORD *)(a1 + 1152) = off_24C335D90;
  if (*(char *)(a1 + 1183) < 0)
    operator delete(*(void **)(a1 + 1160));
  return mediaplatform::DatabaseColumnTuple<14ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>>::~DatabaseColumnTuple(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<10ul,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>>::~DatabaseColumnTuple(uint64_t a1)
{
  *(_QWORD *)(a1 + 1296) = off_24C335D90;
  if (*(char *)(a1 + 1327) < 0)
    operator delete(*(void **)(a1 + 1304));
  *(_QWORD *)(a1 + 1248) = off_24C335D90;
  if (*(char *)(a1 + 1279) < 0)
    operator delete(*(void **)(a1 + 1256));
  *(_QWORD *)(a1 + 1200) = off_24C335D90;
  if (*(char *)(a1 + 1231) < 0)
    operator delete(*(void **)(a1 + 1208));
  *(_QWORD *)(a1 + 1152) = off_24C335D90;
  if (*(char *)(a1 + 1183) < 0)
    operator delete(*(void **)(a1 + 1160));
  return mediaplatform::DatabaseColumnTuple<14ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>>::~DatabaseColumnTuple(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<11ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>>::~DatabaseColumnTuple(uint64_t a1)
{
  *(_QWORD *)(a1 + 1248) = off_24C335D90;
  if (*(char *)(a1 + 1279) < 0)
    operator delete(*(void **)(a1 + 1256));
  *(_QWORD *)(a1 + 1200) = off_24C335D90;
  if (*(char *)(a1 + 1231) < 0)
    operator delete(*(void **)(a1 + 1208));
  *(_QWORD *)(a1 + 1152) = off_24C335D90;
  if (*(char *)(a1 + 1183) < 0)
    operator delete(*(void **)(a1 + 1160));
  return mediaplatform::DatabaseColumnTuple<14ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>>::~DatabaseColumnTuple(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<12ul,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>>::~DatabaseColumnTuple(uint64_t a1)
{
  *(_QWORD *)(a1 + 1200) = off_24C335D90;
  if (*(char *)(a1 + 1231) < 0)
    operator delete(*(void **)(a1 + 1208));
  *(_QWORD *)(a1 + 1152) = off_24C335D90;
  if (*(char *)(a1 + 1183) < 0)
    operator delete(*(void **)(a1 + 1160));
  return mediaplatform::DatabaseColumnTuple<14ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>>::~DatabaseColumnTuple(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<13ul,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>>::~DatabaseColumnTuple(uint64_t a1)
{
  *(_QWORD *)(a1 + 1152) = off_24C335D90;
  if (*(char *)(a1 + 1183) < 0)
    operator delete(*(void **)(a1 + 1160));
  return mediaplatform::DatabaseColumnTuple<14ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>>::~DatabaseColumnTuple(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<15ul,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>>::~DatabaseColumnTuple(uint64_t a1)
{
  *(_QWORD *)(a1 + 1056) = off_24C335D90;
  if (*(char *)(a1 + 1087) < 0)
    operator delete(*(void **)(a1 + 1064));
  *(_QWORD *)(a1 + 1008) = off_24C335D90;
  if (*(char *)(a1 + 1039) < 0)
    operator delete(*(void **)(a1 + 1016));
  *(_QWORD *)(a1 + 960) = off_24C335D90;
  if (*(char *)(a1 + 991) < 0)
    operator delete(*(void **)(a1 + 968));
  *(_QWORD *)(a1 + 912) = off_24C335D90;
  if (*(char *)(a1 + 943) < 0)
    operator delete(*(void **)(a1 + 920));
  *(_QWORD *)(a1 + 864) = off_24C335D90;
  if (*(char *)(a1 + 895) < 0)
    operator delete(*(void **)(a1 + 872));
  return mediaplatform::DatabaseColumnTuple<20ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>>::~DatabaseColumnTuple(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<16ul,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>>::~DatabaseColumnTuple(uint64_t a1)
{
  *(_QWORD *)(a1 + 1008) = off_24C335D90;
  if (*(char *)(a1 + 1039) < 0)
    operator delete(*(void **)(a1 + 1016));
  *(_QWORD *)(a1 + 960) = off_24C335D90;
  if (*(char *)(a1 + 991) < 0)
    operator delete(*(void **)(a1 + 968));
  *(_QWORD *)(a1 + 912) = off_24C335D90;
  if (*(char *)(a1 + 943) < 0)
    operator delete(*(void **)(a1 + 920));
  *(_QWORD *)(a1 + 864) = off_24C335D90;
  if (*(char *)(a1 + 895) < 0)
    operator delete(*(void **)(a1 + 872));
  return mediaplatform::DatabaseColumnTuple<20ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>>::~DatabaseColumnTuple(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<17ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>>::~DatabaseColumnTuple(uint64_t a1)
{
  *(_QWORD *)(a1 + 960) = off_24C335D90;
  if (*(char *)(a1 + 991) < 0)
    operator delete(*(void **)(a1 + 968));
  *(_QWORD *)(a1 + 912) = off_24C335D90;
  if (*(char *)(a1 + 943) < 0)
    operator delete(*(void **)(a1 + 920));
  *(_QWORD *)(a1 + 864) = off_24C335D90;
  if (*(char *)(a1 + 895) < 0)
    operator delete(*(void **)(a1 + 872));
  return mediaplatform::DatabaseColumnTuple<20ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>>::~DatabaseColumnTuple(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<18ul,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>>::~DatabaseColumnTuple(uint64_t a1)
{
  *(_QWORD *)(a1 + 912) = off_24C335D90;
  if (*(char *)(a1 + 943) < 0)
    operator delete(*(void **)(a1 + 920));
  *(_QWORD *)(a1 + 864) = off_24C335D90;
  if (*(char *)(a1 + 895) < 0)
    operator delete(*(void **)(a1 + 872));
  return mediaplatform::DatabaseColumnTuple<20ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>>::~DatabaseColumnTuple(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<19ul,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>>::~DatabaseColumnTuple(uint64_t a1)
{
  *(_QWORD *)(a1 + 864) = off_24C335D90;
  if (*(char *)(a1 + 895) < 0)
    operator delete(*(void **)(a1 + 872));
  return mediaplatform::DatabaseColumnTuple<20ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>>::~DatabaseColumnTuple(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<21ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>>::~DatabaseColumnTuple(uint64_t a1)
{
  *(_QWORD *)(a1 + 768) = off_24C335D90;
  if (*(char *)(a1 + 799) < 0)
    operator delete(*(void **)(a1 + 776));
  *(_QWORD *)(a1 + 720) = off_24C335D90;
  if (*(char *)(a1 + 751) < 0)
    operator delete(*(void **)(a1 + 728));
  *(_QWORD *)(a1 + 672) = off_24C335D90;
  if (*(char *)(a1 + 703) < 0)
    operator delete(*(void **)(a1 + 680));
  *(_QWORD *)(a1 + 624) = off_24C335D90;
  if (*(char *)(a1 + 655) < 0)
    operator delete(*(void **)(a1 + 632));
  *(_QWORD *)(a1 + 576) = off_24C335D90;
  if (*(char *)(a1 + 607) < 0)
    operator delete(*(void **)(a1 + 584));
  return mediaplatform::DatabaseColumnTuple<26ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>>::~DatabaseColumnTuple(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<22ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>>::~DatabaseColumnTuple(uint64_t a1)
{
  *(_QWORD *)(a1 + 720) = off_24C335D90;
  if (*(char *)(a1 + 751) < 0)
    operator delete(*(void **)(a1 + 728));
  *(_QWORD *)(a1 + 672) = off_24C335D90;
  if (*(char *)(a1 + 703) < 0)
    operator delete(*(void **)(a1 + 680));
  *(_QWORD *)(a1 + 624) = off_24C335D90;
  if (*(char *)(a1 + 655) < 0)
    operator delete(*(void **)(a1 + 632));
  *(_QWORD *)(a1 + 576) = off_24C335D90;
  if (*(char *)(a1 + 607) < 0)
    operator delete(*(void **)(a1 + 584));
  return mediaplatform::DatabaseColumnTuple<26ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>>::~DatabaseColumnTuple(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<23ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>>::~DatabaseColumnTuple(uint64_t a1)
{
  *(_QWORD *)(a1 + 672) = off_24C335D90;
  if (*(char *)(a1 + 703) < 0)
    operator delete(*(void **)(a1 + 680));
  *(_QWORD *)(a1 + 624) = off_24C335D90;
  if (*(char *)(a1 + 655) < 0)
    operator delete(*(void **)(a1 + 632));
  *(_QWORD *)(a1 + 576) = off_24C335D90;
  if (*(char *)(a1 + 607) < 0)
    operator delete(*(void **)(a1 + 584));
  return mediaplatform::DatabaseColumnTuple<26ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>>::~DatabaseColumnTuple(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<24ul,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>>::~DatabaseColumnTuple(uint64_t a1)
{
  *(_QWORD *)(a1 + 624) = off_24C335D90;
  if (*(char *)(a1 + 655) < 0)
    operator delete(*(void **)(a1 + 632));
  *(_QWORD *)(a1 + 576) = off_24C335D90;
  if (*(char *)(a1 + 607) < 0)
    operator delete(*(void **)(a1 + 584));
  return mediaplatform::DatabaseColumnTuple<26ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>>::~DatabaseColumnTuple(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<25ul,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>>::~DatabaseColumnTuple(uint64_t a1)
{
  *(_QWORD *)(a1 + 576) = off_24C335D90;
  if (*(char *)(a1 + 607) < 0)
    operator delete(*(void **)(a1 + 584));
  return mediaplatform::DatabaseColumnTuple<26ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>>::~DatabaseColumnTuple(a1);
}

void mlcore::ItemTable::persistentIDColumn(mlcore::ItemTable *this@<X0>, uint64_t a2@<X8>)
{
  std::string *v4;

  *(_QWORD *)a2 = off_24C335D90;
  v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 1935) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 239), *((_QWORD *)this + 240));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 1912);
    *(_QWORD *)(a2 + 24) = *((_QWORD *)this + 241);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 484);
  *(_DWORD *)(a2 + 44) = *((_DWORD *)this + 487);
  *(_QWORD *)(a2 + 36) = *(_QWORD *)((char *)this + 1940);
  *(_QWORD *)a2 = off_24C336AC0;
}

void mlcore::ItemTable::mediaTypeColumn(mlcore::ItemTable *this@<X0>, uint64_t a2@<X8>)
{
  std::string *v4;

  *(_QWORD *)a2 = off_24C335D90;
  v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 1983) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 245), *((_QWORD *)this + 246));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 1960);
    *(_QWORD *)(a2 + 24) = *((_QWORD *)this + 247);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 496);
  *(_QWORD *)(a2 + 36) = *(_QWORD *)((char *)this + 1988);
  *(_QWORD *)a2 = off_24C336AA0;
}

void mlcore::ItemTable::titleOrderColumn(mlcore::ItemTable *this@<X0>, uint64_t a2@<X8>)
{
  std::string *v4;

  *(_QWORD *)a2 = off_24C335D90;
  v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 2031) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 251), *((_QWORD *)this + 252));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 2008);
    *(_QWORD *)(a2 + 24) = *((_QWORD *)this + 253);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 508);
  *(_DWORD *)(a2 + 44) = *((_DWORD *)this + 511);
  *(_QWORD *)(a2 + 36) = *(_QWORD *)((char *)this + 2036);
  *(_QWORD *)a2 = off_24C336AC0;
}

void mlcore::ItemTable::titleOrderSectionColumn(mlcore::ItemTable *this@<X0>, uint64_t a2@<X8>)
{
  std::string *v4;

  *(_QWORD *)a2 = off_24C335D90;
  v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 2079) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 257), *((_QWORD *)this + 258));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 2056);
    *(_QWORD *)(a2 + 24) = *((_QWORD *)this + 259);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 520);
  *(_QWORD *)(a2 + 36) = *(_QWORD *)((char *)this + 2084);
  *(_QWORD *)a2 = off_24C336AA0;
}

void mlcore::ItemTable::itemArtistPersistentIDColumn(mlcore::ItemTable *this@<X0>, uint64_t a2@<X8>)
{
  std::string *v4;

  *(_QWORD *)a2 = off_24C335D90;
  v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 2127) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 263), *((_QWORD *)this + 264));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 2104);
    *(_QWORD *)(a2 + 24) = *((_QWORD *)this + 265);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 532);
  *(_DWORD *)(a2 + 44) = *((_DWORD *)this + 535);
  *(_QWORD *)(a2 + 36) = *(_QWORD *)((char *)this + 2132);
  *(_QWORD *)a2 = off_24C336AC0;
}

void mlcore::ItemTable::itemArtistOrderColumn(mlcore::ItemTable *this@<X0>, uint64_t a2@<X8>)
{
  std::string *v4;

  *(_QWORD *)a2 = off_24C335D90;
  v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 2175) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 269), *((_QWORD *)this + 270));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 2152);
    *(_QWORD *)(a2 + 24) = *((_QWORD *)this + 271);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 544);
  *(_DWORD *)(a2 + 44) = *((_DWORD *)this + 547);
  *(_QWORD *)(a2 + 36) = *(_QWORD *)((char *)this + 2180);
  *(_QWORD *)a2 = off_24C336AC0;
}

void mlcore::ItemTable::itemArtistOrderSectionColumn(mlcore::ItemTable *this@<X0>, uint64_t a2@<X8>)
{
  std::string *v4;

  *(_QWORD *)a2 = off_24C335D90;
  v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 2223) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 275), *((_QWORD *)this + 276));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 2200);
    *(_QWORD *)(a2 + 24) = *((_QWORD *)this + 277);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 556);
  *(_QWORD *)(a2 + 36) = *(_QWORD *)((char *)this + 2228);
  *(_QWORD *)a2 = off_24C336AA0;
}

void mlcore::ItemTable::seriesNameOrderColumn(mlcore::ItemTable *this@<X0>, uint64_t a2@<X8>)
{
  std::string *v4;

  *(_QWORD *)a2 = off_24C335D90;
  v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 2271) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 281), *((_QWORD *)this + 282));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 2248);
    *(_QWORD *)(a2 + 24) = *((_QWORD *)this + 283);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 568);
  *(_DWORD *)(a2 + 44) = *((_DWORD *)this + 571);
  *(_QWORD *)(a2 + 36) = *(_QWORD *)((char *)this + 2276);
  *(_QWORD *)a2 = off_24C336AC0;
}

void mlcore::ItemTable::seriesNameOrderSectionColumn(mlcore::ItemTable *this@<X0>, uint64_t a2@<X8>)
{
  std::string *v4;

  *(_QWORD *)a2 = off_24C335D90;
  v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 2319) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 287), *((_QWORD *)this + 288));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 2296);
    *(_QWORD *)(a2 + 24) = *((_QWORD *)this + 289);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 580);
  *(_QWORD *)(a2 + 36) = *(_QWORD *)((char *)this + 2324);
  *(_QWORD *)a2 = off_24C336AA0;
}

void mlcore::ItemTable::albumPersistentIDColumn(mlcore::ItemTable *this@<X0>, uint64_t a2@<X8>)
{
  std::string *v4;

  *(_QWORD *)a2 = off_24C335D90;
  v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 2367) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 293), *((_QWORD *)this + 294));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 2344);
    *(_QWORD *)(a2 + 24) = *((_QWORD *)this + 295);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 592);
  *(_DWORD *)(a2 + 44) = *((_DWORD *)this + 595);
  *(_QWORD *)(a2 + 36) = *(_QWORD *)((char *)this + 2372);
  *(_QWORD *)a2 = off_24C336AC0;
}

void mlcore::ItemTable::albumOrderColumn(mlcore::ItemTable *this@<X0>, uint64_t a2@<X8>)
{
  std::string *v4;

  *(_QWORD *)a2 = off_24C335D90;
  v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 2415) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 299), *((_QWORD *)this + 300));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 2392);
    *(_QWORD *)(a2 + 24) = *((_QWORD *)this + 301);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 604);
  *(_DWORD *)(a2 + 44) = *((_DWORD *)this + 607);
  *(_QWORD *)(a2 + 36) = *(_QWORD *)((char *)this + 2420);
  *(_QWORD *)a2 = off_24C336AC0;
}

void mlcore::ItemTable::albumOrderSectionColumn(mlcore::ItemTable *this@<X0>, uint64_t a2@<X8>)
{
  std::string *v4;

  *(_QWORD *)a2 = off_24C335D90;
  v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 2463) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 305), *((_QWORD *)this + 306));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 2440);
    *(_QWORD *)(a2 + 24) = *((_QWORD *)this + 307);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 616);
  *(_QWORD *)(a2 + 36) = *(_QWORD *)((char *)this + 2468);
  *(_QWORD *)a2 = off_24C336AA0;
}

void mlcore::ItemTable::albumArtistPersistentIDColumn(mlcore::ItemTable *this@<X0>, uint64_t a2@<X8>)
{
  std::string *v4;

  *(_QWORD *)a2 = off_24C335D90;
  v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 2511) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 311), *((_QWORD *)this + 312));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 2488);
    *(_QWORD *)(a2 + 24) = *((_QWORD *)this + 313);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 628);
  *(_DWORD *)(a2 + 44) = *((_DWORD *)this + 631);
  *(_QWORD *)(a2 + 36) = *(_QWORD *)((char *)this + 2516);
  *(_QWORD *)a2 = off_24C336AC0;
}

void mlcore::ItemTable::albumArtistOrderColumn(mlcore::ItemTable *this@<X0>, uint64_t a2@<X8>)
{
  std::string *v4;

  *(_QWORD *)a2 = off_24C335D90;
  v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 2559) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 317), *((_QWORD *)this + 318));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 2536);
    *(_QWORD *)(a2 + 24) = *((_QWORD *)this + 319);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 640);
  *(_DWORD *)(a2 + 44) = *((_DWORD *)this + 643);
  *(_QWORD *)(a2 + 36) = *(_QWORD *)((char *)this + 2564);
  *(_QWORD *)a2 = off_24C336AC0;
}

void mlcore::ItemTable::albumArtistOrderSectionColumn(mlcore::ItemTable *this@<X0>, uint64_t a2@<X8>)
{
  std::string *v4;

  *(_QWORD *)a2 = off_24C335D90;
  v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 2607) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 323), *((_QWORD *)this + 324));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 2584);
    *(_QWORD *)(a2 + 24) = *((_QWORD *)this + 325);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 652);
  *(_QWORD *)(a2 + 36) = *(_QWORD *)((char *)this + 2612);
  *(_QWORD *)a2 = off_24C336AA0;
}

void mlcore::ItemTable::composerPersistentIDColumn(mlcore::ItemTable *this@<X0>, uint64_t a2@<X8>)
{
  std::string *v4;

  *(_QWORD *)a2 = off_24C335D90;
  v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 2655) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 329), *((_QWORD *)this + 330));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 2632);
    *(_QWORD *)(a2 + 24) = *((_QWORD *)this + 331);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 664);
  *(_DWORD *)(a2 + 44) = *((_DWORD *)this + 667);
  *(_QWORD *)(a2 + 36) = *(_QWORD *)((char *)this + 2660);
  *(_QWORD *)a2 = off_24C336AC0;
}

void mlcore::ItemTable::composerOrderColumn(mlcore::ItemTable *this@<X0>, uint64_t a2@<X8>)
{
  std::string *v4;

  *(_QWORD *)a2 = off_24C335D90;
  v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 2703) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 335), *((_QWORD *)this + 336));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 2680);
    *(_QWORD *)(a2 + 24) = *((_QWORD *)this + 337);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 676);
  *(_DWORD *)(a2 + 44) = *((_DWORD *)this + 679);
  *(_QWORD *)(a2 + 36) = *(_QWORD *)((char *)this + 2708);
  *(_QWORD *)a2 = off_24C336AC0;
}

void mlcore::ItemTable::composerOrderSectionColumn(mlcore::ItemTable *this@<X0>, uint64_t a2@<X8>)
{
  std::string *v4;

  *(_QWORD *)a2 = off_24C335D90;
  v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 2751) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 341), *((_QWORD *)this + 342));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 2728);
    *(_QWORD *)(a2 + 24) = *((_QWORD *)this + 343);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 688);
  *(_QWORD *)(a2 + 36) = *(_QWORD *)((char *)this + 2756);
  *(_QWORD *)a2 = off_24C336AA0;
}

void mlcore::ItemTable::genrePersistentIDColumn(mlcore::ItemTable *this@<X0>, uint64_t a2@<X8>)
{
  std::string *v4;

  *(_QWORD *)a2 = off_24C335D90;
  v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 2799) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 347), *((_QWORD *)this + 348));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 2776);
    *(_QWORD *)(a2 + 24) = *((_QWORD *)this + 349);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 700);
  *(_DWORD *)(a2 + 44) = *((_DWORD *)this + 703);
  *(_QWORD *)(a2 + 36) = *(_QWORD *)((char *)this + 2804);
  *(_QWORD *)a2 = off_24C336AC0;
}

void mlcore::ItemTable::genreOrderColumn(mlcore::ItemTable *this@<X0>, uint64_t a2@<X8>)
{
  std::string *v4;

  *(_QWORD *)a2 = off_24C335D90;
  v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 2847) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 353), *((_QWORD *)this + 354));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 2824);
    *(_QWORD *)(a2 + 24) = *((_QWORD *)this + 355);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 712);
  *(_DWORD *)(a2 + 44) = *((_DWORD *)this + 715);
  *(_QWORD *)(a2 + 36) = *(_QWORD *)((char *)this + 2852);
  *(_QWORD *)a2 = off_24C336AC0;
}

void mlcore::ItemTable::genreOrderSectionColumn(mlcore::ItemTable *this@<X0>, uint64_t a2@<X8>)
{
  std::string *v4;

  *(_QWORD *)a2 = off_24C335D90;
  v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 2895) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 359), *((_QWORD *)this + 360));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 2872);
    *(_QWORD *)(a2 + 24) = *((_QWORD *)this + 361);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 724);
  *(_QWORD *)(a2 + 36) = *(_QWORD *)((char *)this + 2900);
  *(_QWORD *)a2 = off_24C336AA0;
}

void mlcore::ItemTable::discNumberColumn(mlcore::ItemTable *this@<X0>, uint64_t a2@<X8>)
{
  std::string *v4;

  *(_QWORD *)a2 = off_24C335D90;
  v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 2943) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 365), *((_QWORD *)this + 366));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 2920);
    *(_QWORD *)(a2 + 24) = *((_QWORD *)this + 367);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 736);
  *(_QWORD *)(a2 + 36) = *(_QWORD *)((char *)this + 2948);
  *(_QWORD *)a2 = off_24C336AA0;
}

void mlcore::ItemTable::trackNumberColumn(mlcore::ItemTable *this@<X0>, uint64_t a2@<X8>)
{
  std::string *v4;

  *(_QWORD *)a2 = off_24C335D90;
  v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 2991) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 371), *((_QWORD *)this + 372));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 2968);
    *(_QWORD *)(a2 + 24) = *((_QWORD *)this + 373);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 748);
  *(_QWORD *)(a2 + 36) = *(_QWORD *)((char *)this + 2996);
  *(_QWORD *)a2 = off_24C336AA0;
}

void mlcore::ItemTable::episodeSortIDColumn(mlcore::ItemTable *this@<X0>, uint64_t a2@<X8>)
{
  std::string *v4;

  *(_QWORD *)a2 = off_24C335D90;
  v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 3039) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 377), *((_QWORD *)this + 378));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 3016);
    *(_QWORD *)(a2 + 24) = *((_QWORD *)this + 379);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 760);
  *(_QWORD *)(a2 + 36) = *(_QWORD *)((char *)this + 3044);
  *(_QWORD *)a2 = off_24C336AA0;
}

void mlcore::ItemTable::baseLocationIDColumn(mlcore::ItemTable *this@<X0>, uint64_t a2@<X8>)
{
  std::string *v4;

  *(_QWORD *)a2 = off_24C335D90;
  v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 3087) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 383), *((_QWORD *)this + 384));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 3064);
    *(_QWORD *)(a2 + 24) = *((_QWORD *)this + 385);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 772);
  *(_DWORD *)(a2 + 44) = *((_DWORD *)this + 775);
  *(_QWORD *)(a2 + 36) = *(_QWORD *)((char *)this + 3092);
  *(_QWORD *)a2 = off_24C336AC0;
}

void mlcore::ItemTable::remoteLocationIDColumn(mlcore::ItemTable *this@<X0>, uint64_t a2@<X8>)
{
  std::string *v4;

  *(_QWORD *)a2 = off_24C335D90;
  v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 3135) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 389), *((_QWORD *)this + 390));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 3112);
    *(_QWORD *)(a2 + 24) = *((_QWORD *)this + 391);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 784);
  *(_DWORD *)(a2 + 44) = *((_DWORD *)this + 787);
  *(_QWORD *)(a2 + 36) = *(_QWORD *)((char *)this + 3140);
  *(_QWORD *)a2 = off_24C336AC0;
}

void mlcore::ItemTable::excludeFromShuffleColumn(mlcore::ItemTable *this@<X0>, uint64_t a2@<X8>)
{
  std::string *v4;

  *(_QWORD *)a2 = off_24C335D90;
  v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 3183) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 395), *((_QWORD *)this + 396));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 3160);
    *(_QWORD *)(a2 + 24) = *((_QWORD *)this + 397);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 796);
  *(_QWORD *)(a2 + 36) = *(_QWORD *)((char *)this + 3188);
  *(_QWORD *)a2 = off_24C336AA0;
}

void mlcore::ItemTable::keepLocalColumn(mlcore::ItemTable *this@<X0>, uint64_t a2@<X8>)
{
  std::string *v4;

  *(_QWORD *)a2 = off_24C335D90;
  v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 3231) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 401), *((_QWORD *)this + 402));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 3208);
    *(_QWORD *)(a2 + 24) = *((_QWORD *)this + 403);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 808);
  *(_QWORD *)(a2 + 36) = *(_QWORD *)((char *)this + 3236);
  *(_QWORD *)a2 = off_24C336AA0;
}

void mlcore::ItemTable::keepLocalStatusColumn(mlcore::ItemTable *this@<X0>, uint64_t a2@<X8>)
{
  std::string *v4;

  *(_QWORD *)a2 = off_24C335D90;
  v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 3279) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 407), *((_QWORD *)this + 408));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 3256);
    *(_QWORD *)(a2 + 24) = *((_QWORD *)this + 409);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 820);
  *(_QWORD *)(a2 + 36) = *(_QWORD *)((char *)this + 3284);
  *(_QWORD *)a2 = off_24C336AA0;
}

void mlcore::ItemTable::keepLocalStatusReasonColumn(mlcore::ItemTable *this@<X0>, uint64_t a2@<X8>)
{
  std::string *v4;

  *(_QWORD *)a2 = off_24C335D90;
  v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 3327) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 413), *((_QWORD *)this + 414));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 3304);
    *(_QWORD *)(a2 + 24) = *((_QWORD *)this + 415);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 832);
  *(_QWORD *)(a2 + 36) = *(_QWORD *)((char *)this + 3332);
  *(_QWORD *)a2 = off_24C336AA0;
}

void mlcore::ItemTable::keepLocalConstraintsColumn(mlcore::ItemTable *this@<X0>, uint64_t a2@<X8>)
{
  std::string *v4;

  *(_QWORD *)a2 = off_24C335D90;
  v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 3375) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 419), *((_QWORD *)this + 420));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 3352);
    *(_QWORD *)(a2 + 24) = *((_QWORD *)this + 421);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 844);
  *(_QWORD *)(a2 + 36) = *(_QWORD *)((char *)this + 3380);
  *(_QWORD *)a2 = off_24C336AA0;
}

void mlcore::ItemTable::inMyLibraryColumn(mlcore::ItemTable *this@<X0>, uint64_t a2@<X8>)
{
  std::string *v4;

  *(_QWORD *)a2 = off_24C335D90;
  v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 3423) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 425), *((_QWORD *)this + 426));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 3400);
    *(_QWORD *)(a2 + 24) = *((_QWORD *)this + 427);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 856);
  *(_QWORD *)(a2 + 36) = *(_QWORD *)((char *)this + 3428);
  *(_QWORD *)a2 = off_24C336AA0;
}

void mlcore::ItemTable::isCompilationColumn(mlcore::ItemTable *this@<X0>, uint64_t a2@<X8>)
{
  std::string *v4;

  *(_QWORD *)a2 = off_24C335D90;
  v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 3471) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 431), *((_QWORD *)this + 432));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 3448);
    *(_QWORD *)(a2 + 24) = *((_QWORD *)this + 433);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 868);
  *(_QWORD *)(a2 + 36) = *(_QWORD *)((char *)this + 3476);
  *(_QWORD *)a2 = off_24C336AA0;
}

void mlcore::ItemTable::dateAddedColumn(mlcore::ItemTable *this@<X0>, uint64_t a2@<X8>)
{
  std::string *v4;

  *(_QWORD *)a2 = off_24C335D90;
  v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 3519) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 437), *((_QWORD *)this + 438));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 3496);
    *(_QWORD *)(a2 + 24) = *((_QWORD *)this + 439);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 880);
  *(_DWORD *)(a2 + 44) = *((_DWORD *)this + 883);
  *(_QWORD *)(a2 + 36) = *(_QWORD *)((char *)this + 3524);
  *(_QWORD *)a2 = off_24C336AC0;
}

void mlcore::ItemTable::showComposerColumn(mlcore::ItemTable *this@<X0>, uint64_t a2@<X8>)
{
  std::string *v4;

  *(_QWORD *)a2 = off_24C335D90;
  v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 3567) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 443), *((_QWORD *)this + 444));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 3544);
    *(_QWORD *)(a2 + 24) = *((_QWORD *)this + 445);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 892);
  *(_QWORD *)(a2 + 36) = *(_QWORD *)((char *)this + 3572);
  *(_QWORD *)a2 = off_24C336AA0;
}

void mlcore::ItemTable::isMusicShowColumn(mlcore::ItemTable *this@<X0>, uint64_t a2@<X8>)
{
  std::string *v4;

  *(_QWORD *)a2 = off_24C335D90;
  v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 3615) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 449), *((_QWORD *)this + 450));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 3592);
    *(_QWORD *)(a2 + 24) = *((_QWORD *)this + 451);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 904);
  *(_DWORD *)(a2 + 44) = *((_DWORD *)this + 907);
  *(_QWORD *)(a2 + 36) = *(_QWORD *)((char *)this + 3620);
  *(_QWORD *)a2 = off_24C336AC0;
}

