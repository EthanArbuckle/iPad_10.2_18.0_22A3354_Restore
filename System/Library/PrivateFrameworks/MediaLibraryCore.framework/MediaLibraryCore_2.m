void sub_20A75CF58(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void mediaplatform::FormatterParameters<0ul,unsigned int>::formatOptionsAtIndex<unsigned int>(uint64_t a1)
{
  std::runtime_error *exception;

  if (!a1)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Requested parameter is not an FormatOptions instance.");
    __cxa_throw(exception, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
  }
  mediaplatform::FormatterParameters<1ul>::formatOptionsAtIndex<unsigned int>();
}

void sub_20A75CFBC(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void mediaplatform::FormatterParameters<1ul>::formatParameterAtIndex<mediaplatform::FormatterParameters<0ul,unsigned int>>()
{
  std::runtime_error *exception;

  exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
  std::runtime_error::runtime_error(exception, "Parameter index out of bounds.");
  __cxa_throw(exception, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
}

void sub_20A75D00C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

char *mediaplatform::TypeFormatter<unsigned int,void>::formatAtLocation<std::__wrap_iter<char *>>(char *result, char *a2)
{
  uint64_t v2;
  char *v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  unint64_t v7;
  char *v8;

  v3 = result + 40;
  v2 = *((_QWORD *)result + 5);
  if (result[48])
  {
    v4 = *(_QWORD *)result;
    if (!*(_BYTE *)(*(_QWORD *)result + 48))
    {
      v6 = 0;
      goto LABEL_7;
    }
    v5 = *(_BYTE *)(v4 + 49);
  }
  else
  {
    v5 = 45;
  }
  *a2++ = v5;
  v4 = *(_QWORD *)result;
  v6 = 1;
LABEL_7:
  if (*(_BYTE *)(v4 + 16))
  {
    if (*(_BYTE *)(v4 + 50))
    {
      v7 = v6 - v2 + 32;
      if (v7 < *(_QWORD *)(v4 + 24))
      {
        do
        {
          *a2++ = 48;
          ++v7;
        }
        while (v7 < *(_QWORD *)(*(_QWORD *)result + 24));
      }
    }
  }
  v8 = &result[*((_QWORD *)result + 5) + 8];
  if (v3 != v8)
    return (char *)memmove(a2, v8, v3 - v8);
  return result;
}

void mediaplatform::FormatterParameters<1ul>::formatOptionsAtIndex<unsigned int>()
{
  std::runtime_error *exception;

  exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
  std::runtime_error::runtime_error(exception, "Parameter index out of bounds.");
  __cxa_throw(exception, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
}

void sub_20A75D0FC(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<mlcore::UnaryPredicate<long long>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C33CA28;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<mlcore::UnaryPredicate<long long>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C33CA28;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x20BD27AFCLL);
}

uint64_t std::__shared_ptr_emplace<mlcore::UnaryPredicate<long long>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__shared_ptr_emplace<mlcore::ComparisonPredicate<long long>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C33CE88;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<mlcore::ComparisonPredicate<long long>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C33CE88;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x20BD27AFCLL);
}

void std::__shared_ptr_emplace<mlcore::UnaryPredicate<double>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C33C9B8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<mlcore::UnaryPredicate<double>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C33C9B8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x20BD27AFCLL);
}

uint64_t std::__shared_ptr_emplace<mlcore::UnaryPredicate<double>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__shared_ptr_emplace<mlcore::ComparisonPredicate<double>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C33CE18;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<mlcore::ComparisonPredicate<double>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C33CE18;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x20BD27AFCLL);
}

uint64_t std::__shared_ptr_emplace<mlcore::ComparisonPredicate<double>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::allocate_shared[abi:ne180100]<mlcore::ComparisonPredicate<std::string>,std::allocator<mlcore::ComparisonPredicate<std::string>>,mlcore::ModelProperty<std::string> *&,mlcore::ComparisonOperator &,std::string const&,mlcore::ComparisonOptions &,void>(_QWORD *a1, std::string::size_type a2, int a3, uint64_t a4, int a5)
{
  std::string *v10;
  std::string *v11;

  v10 = (std::string *)operator new(0x58uLL);
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10[1].__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_24C339BA0;
  v10->__r_.__value_.__r.__words[0] = (std::string::size_type)&off_24C33CDE0;
  v10[1].__r_.__value_.__l.__size_ = a2;
  LODWORD(v10[1].__r_.__value_.__r.__words[2]) = a5;
  HIDWORD(v10[1].__r_.__value_.__r.__words[2]) = a3;
  v11 = v10 + 2;
  if (*(char *)(a4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v11, *(const std::string::value_type **)a4, *(_QWORD *)(a4 + 8));
  }
  else
  {
    *(_OWORD *)&v11->__r_.__value_.__l.__data_ = *(_OWORD *)a4;
    v10[2].__r_.__value_.__r.__words[2] = *(_QWORD *)(a4 + 16);
  }
  v10[3].__r_.__value_.__r.__words[0] = 0;
  v10[3].__r_.__value_.__l.__size_ = 0;
  *a1 = v10 + 1;
  a1[1] = v10;
}

void sub_20A75D2EC(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<mlcore::ComparisonPredicate<std::string>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C33CDE0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<mlcore::ComparisonPredicate<std::string>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C33CDE0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x20BD27AFCLL);
}

uint64_t std::__shared_ptr_emplace<mlcore::ComparisonPredicate<std::string>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__shared_ptr_emplace<mlcore::InPredicate<int>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C33C2F0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<mlcore::InPredicate<int>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C33C2F0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x20BD27AFCLL);
}

void std::__function::__func<mlcore::PredicateForKindPropertyComparison(CriterionInfo const&)::$_0,std::allocator<mlcore::PredicateForKindPropertyComparison(CriterionInfo const&)::$_0>,BOOL ()(std::string const&,BOOL &)>::~__func()
{
  JUMPOUT(0x20BD27AFCLL);
}

__n128 std::__function::__func<mlcore::PredicateForKindPropertyComparison(CriterionInfo const&)::$_0,std::allocator<mlcore::PredicateForKindPropertyComparison(CriterionInfo const&)::$_0>,BOOL ()(std::string const&,BOOL &)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_24C33B878;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<mlcore::PredicateForKindPropertyComparison(CriterionInfo const&)::$_0,std::allocator<mlcore::PredicateForKindPropertyComparison(CriterionInfo const&)::$_0>,BOOL ()(std::string const&,BOOL &)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24C33B878;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<mlcore::PredicateForKindPropertyComparison(CriterionInfo const&)::$_0,std::allocator<mlcore::PredicateForKindPropertyComparison(CriterionInfo const&)::$_0>,BOOL ()(std::string const&,BOOL &)>::operator()(uint64_t a1, const void **a2)
{
  uint64_t result;
  const void **v4;
  int v5;
  int v6;
  size_t v7;
  char *v8;
  size_t v9;
  const void *v10;
  size_t v11;
  char *v12;
  int64_t v13;
  char *v14;
  int v15;
  char *v16;
  int64_t v17;
  char *v18;
  char *v19;
  _QWORD *v21;
  int v22;
  size_t v23;
  char *v24;
  size_t v25;
  size_t v26;
  const void **v27;
  size_t v28;
  int v30;
  void *v31;
  int64_t v32;
  char *v33;
  _BOOL4 v35;

  result = 0;
  switch(**(_DWORD **)(a1 + 8))
  {
    case 1:
      v4 = *(const void ***)(a1 + 16);
      v5 = *((char *)v4 + 23);
      v6 = *((char *)a2 + 23);
      if (v6 >= 0)
        v7 = *((unsigned __int8 *)a2 + 23);
      else
        v7 = (size_t)a2[1];
      if (v6 >= 0)
        v8 = (char *)a2;
      else
        v8 = (char *)*a2;
      if (v5 >= 0)
        v9 = *((unsigned __int8 *)v4 + 23);
      else
        v9 = (size_t)v4[1];
      if (v5 >= 0)
        v10 = v4;
      else
        v10 = *v4;
      if (v9 >= v7)
        v11 = v7;
      else
        v11 = v9;
      goto LABEL_89;
    case 2:
      v12 = *(char **)(a1 + 16);
      v13 = *((unsigned __int8 *)a2 + 23);
      if ((v13 & 0x80u) == 0)
        v14 = (char *)a2;
      else
        v14 = (char *)*a2;
      v15 = v12[23];
      if (v15 >= 0)
        v16 = v12;
      else
        v16 = *(char **)v12;
      if (v15 >= 0)
        v17 = v12[23];
      else
        v17 = *((_QWORD *)v12 + 1);
      if (!v17)
        return 1;
      if ((v13 & 0x80u) != 0)
        v13 = (int64_t)a2[1];
      v18 = &v14[v13];
      if (v13 < v17)
        goto LABEL_30;
      v30 = *v16;
      v31 = v14;
      do
      {
        v32 = v13 - v17;
        if (v32 == -1)
          break;
        v33 = (char *)memchr(v31, v30, v32 + 1);
        if (!v33)
          break;
        v19 = v33;
        if (!memcmp(v33, v16, v17))
          return v19 != v18 && v19 - v14 != -1;
        v31 = v19 + 1;
        v13 = v18 - (v19 + 1);
      }
      while (v13 >= v17);
LABEL_30:
      v19 = v18;
      return v19 != v18 && v19 - v14 != -1;
    case 4:
      v21 = *(_QWORD **)(a1 + 16);
      v22 = *((char *)v21 + 23);
      if (v22 >= 0)
        v7 = *((unsigned __int8 *)v21 + 23);
      else
        v7 = v21[1];
      if (*((char *)a2 + 23) < 0)
      {
        if (v7 != -1)
        {
          v27 = a2;
          a2 = (const void **)*a2;
          v9 = (size_t)v27[1];
          goto LABEL_51;
        }
      }
      else if (v7 != -1)
      {
        v9 = *((unsigned __int8 *)a2 + 23);
LABEL_51:
        if (v22 < 0)
          v21 = (_QWORD *)*v21;
        if (v9 >= v7)
          v11 = v7;
        else
          v11 = v9;
        v8 = (char *)a2;
        goto LABEL_88;
      }
      goto LABEL_92;
    case 8:
      v23 = *((unsigned __int8 *)a2 + 23);
      v24 = (char *)a2[1];
      if ((v23 & 0x80u) == 0)
        v25 = *((unsigned __int8 *)a2 + 23);
      else
        v25 = (size_t)a2[1];
      v21 = *(_QWORD **)(a1 + 16);
      v26 = *((unsigned __int8 *)v21 + 23);
      if (*((char *)v21 + 23) < 0)
      {
        v7 = v21[1];
        if (v25 < v7)
          return 0;
      }
      else
      {
        v7 = *((unsigned __int8 *)v21 + 23);
        if (v25 < v26)
          return 0;
      }
      v28 = v25 - v7;
      if ((v23 & 0x80) != 0)
      {
        if (v7 == -1 || (unint64_t)v24 < v28)
LABEL_92:
          std::string::__throw_out_of_range[abi:ne180100]();
        if (&v24[-v28] >= v24)
          v9 = (size_t)a2[1];
        else
          v9 = (size_t)&v24[-v28];
        a2 = (const void **)*a2;
      }
      else
      {
        if (v7 == -1 || v23 < v28)
          goto LABEL_92;
        if (v23 - v28 >= v23)
          v9 = *((unsigned __int8 *)a2 + 23);
        else
          v9 = v23 - v28;
      }
      if ((v26 & 0x80u) != 0)
        v21 = (_QWORD *)*v21;
      v8 = (char *)a2 + v28;
      if (v9 >= v7)
        v11 = v7;
      else
        v11 = v9;
LABEL_88:
      v10 = v21;
LABEL_89:
      v35 = memcmp(v8, v10, v11) == 0;
      return v9 == v7 && v35;
    default:
      return result;
  }
}

uint64_t std::__function::__func<mlcore::PredicateForKindPropertyComparison(CriterionInfo const&)::$_0,std::allocator<mlcore::PredicateForKindPropertyComparison(CriterionInfo const&)::$_0>,BOOL ()(std::string const&,BOOL &)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN6mlcoreL34PredicateForKindPropertyComparisonERK13CriterionInfoE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<mlcore::PredicateForKindPropertyComparison(CriterionInfo const&)::$_0,std::allocator<mlcore::PredicateForKindPropertyComparison(CriterionInfo const&)::$_0>,BOOL ()(std::string const&,BOOL &)>::target_type()
{
}

BOOL std::type_info::operator==[abi:ne180100](uint64_t a1, uint64_t a2)
{
  if (a1 == a2)
    return 1;
  if ((a2 & a1) < 0 != __OFSUB__(a1, a2))
    return strcmp((const char *)(a1 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(a2 & 0x7FFFFFFFFFFFFFFFLL)) == 0;
  return 0;
}

void std::string::__throw_out_of_range[abi:ne180100]()
{
  std::__throw_out_of_range[abi:ne180100]("basic_string");
}

void std::__throw_out_of_range[abi:ne180100](const char *a1)
{
  std::logic_error *exception;

  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::out_of_range::out_of_range[abi:ne180100](exception, a1);
  __cxa_throw(exception, (struct type_info *)off_24C32FBC0, MEMORY[0x24BEDAB00]);
}

void sub_20A75D73C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *std::out_of_range::out_of_range[abi:ne180100](std::logic_error *a1, const char *a2)
{
  std::logic_error *result;

  result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8C0] + 16);
  return result;
}

_QWORD *std::wstring::basic_string[abi:ne180100](_QWORD *a1, uint64_t a2, unint64_t a3)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if (a3 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v5 = a1;
  if (a3 >= 0xB)
  {
    v6 = (a3 & 0xFFFFFFFFFFFFFFFCLL) + 4;
    if ((a3 | 3) != 0xB)
      v6 = a3 | 3;
    a1 = std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned short>>(v6 + 1);
    v5[1] = a3;
    v5[2] = v7 | 0x8000000000000000;
    *v5 = a1;
  }
  else
  {
    *((_BYTE *)a1 + 23) = a3;
    if (!a3)
      goto LABEL_10;
  }
  v8 = 0;
  do
  {
    *((_WORD *)a1 + v8) = *(_WORD *)(a2 + 2 * v8);
    ++v8;
  }
  while (a3 != v8);
LABEL_10:
  *((_WORD *)a1 + a3) = 0;
  return v5;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned short>>(uint64_t a1)
{
  if (a1 < 0)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(2 * a1);
}

_QWORD *std::__function::__func<mlcore::ForeignProperty<std::string> * mlcore::GetForeignProperty<std::string>(mlcore::ModelPropertyBase *,mlcore::ModelProperty<std::string> *,std::shared_ptr<mlcore::Predicate>)::{lambda(void)#1},std::allocator<mlcore::ForeignProperty<std::string> * mlcore::GetForeignProperty<std::string>(mlcore::ModelPropertyBase *,mlcore::ModelProperty<std::string> *,std::shared_ptr<mlcore::Predicate>)::{lambda(void)#1}>,mlcore::ModelPropertyBase * ()(void)>::~__func(_QWORD *a1)
{
  *a1 = &off_24C33B400;
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 3));
  return a1;
}

void std::__function::__func<mlcore::ForeignProperty<std::string> * mlcore::GetForeignProperty<std::string>(mlcore::ModelPropertyBase *,mlcore::ModelProperty<std::string> *,std::shared_ptr<mlcore::Predicate>)::{lambda(void)#1},std::allocator<mlcore::ForeignProperty<std::string> * mlcore::GetForeignProperty<std::string>(mlcore::ModelPropertyBase *,mlcore::ModelProperty<std::string> *,std::shared_ptr<mlcore::Predicate>)::{lambda(void)#1}>,mlcore::ModelPropertyBase * ()(void)>::~__func(_QWORD *a1)
{
  *a1 = &off_24C33B400;
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 3));
  JUMPOUT(0x20BD27AFCLL);
}

char *std::__function::__func<mlcore::ForeignProperty<std::string> * mlcore::GetForeignProperty<std::string>(mlcore::ModelPropertyBase *,mlcore::ModelProperty<std::string> *,std::shared_ptr<mlcore::Predicate>)::{lambda(void)#1},std::allocator<mlcore::ForeignProperty<std::string> * mlcore::GetForeignProperty<std::string>(mlcore::ModelPropertyBase *,mlcore::ModelProperty<std::string> *,std::shared_ptr<mlcore::Predicate>)::{lambda(void)#1}>,mlcore::ModelPropertyBase * ()(void)>::__clone(uint64_t a1)
{
  char *result;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  result = (char *)operator new(0x28uLL);
  *(_QWORD *)result = &off_24C33B400;
  *(_OWORD *)(result + 8) = *(_OWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 32);
  *((_QWORD *)result + 3) = *(_QWORD *)(a1 + 24);
  *((_QWORD *)result + 4) = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

uint64_t std::__function::__func<mlcore::ForeignProperty<std::string> * mlcore::GetForeignProperty<std::string>(mlcore::ModelPropertyBase *,mlcore::ModelProperty<std::string> *,std::shared_ptr<mlcore::Predicate>)::{lambda(void)#1},std::allocator<mlcore::ForeignProperty<std::string> * mlcore::GetForeignProperty<std::string>(mlcore::ModelPropertyBase *,mlcore::ModelProperty<std::string> *,std::shared_ptr<mlcore::Predicate>)::{lambda(void)#1}>,mlcore::ModelPropertyBase * ()(void)>::__clone(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  *(_QWORD *)a2 = &off_24C33B400;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 32);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(result + 24);
  *(_QWORD *)(a2 + 32) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

uint64_t std::__function::__func<mlcore::ForeignProperty<std::string> * mlcore::GetForeignProperty<std::string>(mlcore::ModelPropertyBase *,mlcore::ModelProperty<std::string> *,std::shared_ptr<mlcore::Predicate>)::{lambda(void)#1},std::allocator<mlcore::ForeignProperty<std::string> * mlcore::GetForeignProperty<std::string>(mlcore::ModelPropertyBase *,mlcore::ModelProperty<std::string> *,std::shared_ptr<mlcore::Predicate>)::{lambda(void)#1}>,mlcore::ModelPropertyBase * ()(void)>::destroy(uint64_t a1)
{
  return std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100](a1 + 24);
}

uint64_t std::__function::__func<mlcore::ForeignProperty<std::string> * mlcore::GetForeignProperty<std::string>(mlcore::ModelPropertyBase *,mlcore::ModelProperty<std::string> *,std::shared_ptr<mlcore::Predicate>)::{lambda(void)#1},std::allocator<mlcore::ForeignProperty<std::string> * mlcore::GetForeignProperty<std::string>(mlcore::ModelPropertyBase *,mlcore::ModelProperty<std::string> *,std::shared_ptr<mlcore::Predicate>)::{lambda(void)#1}>,mlcore::ModelPropertyBase * ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), 0x800000020A9213A6))
    return a1 + 8;
  else
    return 0;
}

void *std::__function::__func<mlcore::ForeignProperty<std::string> * mlcore::GetForeignProperty<std::string>(mlcore::ModelPropertyBase *,mlcore::ModelProperty<std::string> *,std::shared_ptr<mlcore::Predicate>)::{lambda(void)#1},std::allocator<mlcore::ForeignProperty<std::string> * mlcore::GetForeignProperty<std::string>(mlcore::ModelPropertyBase *,mlcore::ModelProperty<std::string> *,std::shared_ptr<mlcore::Predicate>)::{lambda(void)#1}>,mlcore::ModelPropertyBase * ()(void)>::target_type()
{
}

uint64_t std::string::basic_string[abi:ne180100](uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;

  if (a2 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (a2 > 0x16)
  {
    v4 = (a2 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a2 | 7) != 0x17)
      v4 = a2 | 7;
    v5 = v4 + 1;
    v6 = operator new(v4 + 1);
    *(_QWORD *)(a1 + 8) = a2;
    *(_QWORD *)(a1 + 16) = v5 | 0x8000000000000000;
    *(_QWORD *)a1 = v6;
  }
  else
  {
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)a1 = 0;
    *(_BYTE *)(a1 + 23) = a2;
  }
  return a1;
}

void mlcore::ForeignProperty<std::string>::~ForeignProperty(uint64_t a1)
{
  *(_QWORD *)a1 = &off_24C337C40;
  *(_QWORD *)(a1 + 64) = &unk_24C337CE0;
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100](a1 + 88);
  mlcore::ModelPropertyBase::~ModelPropertyBase((void **)a1);
}

{
  *(_QWORD *)a1 = &off_24C337C40;
  *(_QWORD *)(a1 + 64) = &unk_24C337CE0;
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100](a1 + 88);
  mlcore::ModelPropertyBase::~ModelPropertyBase((void **)a1);
  JUMPOUT(0x20BD27AFCLL);
}

void mlcore::ForeignProperty<std::string>::description(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  std::string *v4;
  __int128 v5;
  void **v6;
  std::string::size_type v7;
  std::string *v8;
  void *__p[2];
  unsigned __int8 v10;
  std::string v11;
  std::string v12;

  (*(void (**)(std::string *__return_ptr))(**(_QWORD **)(a1 + 72) + 40))(&v11);
  v4 = std::string::append(&v11, "->");
  v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  v12.__r_.__value_.__r.__words[2] = v4->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v12.__r_.__value_.__l.__data_ = v5;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  (*(void (**)(void **__return_ptr))(**(_QWORD **)(a1 + 80) + 40))(__p);
  if ((v10 & 0x80u) == 0)
    v6 = __p;
  else
    v6 = (void **)__p[0];
  if ((v10 & 0x80u) == 0)
    v7 = v10;
  else
    v7 = (std::string::size_type)__p[1];
  v8 = std::string::append(&v12, (const std::string::value_type *)v6, v7);
  *a2 = *v8;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  if ((char)v10 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v12.__r_.__value_.__l.__data_);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
}

void sub_20A75DB84(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a14 < 0)
    operator delete(__p);
  if (a26 < 0)
    operator delete(a21);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t mlcore::ForeignProperty<std::string>::databaseTables(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 80) + 64))(*(_QWORD *)(a1 + 80));
}

uint64_t mlcore::ForeignProperty<std::string>::databaseColumn(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 80) + 72))(*(_QWORD *)(a1 + 80));
}

uint64_t mlcore::ForeignProperty<std::string>::propertyType(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 80) + 80))(*(_QWORD *)(a1 + 80));
}

uint64_t mlcore::ForeignProperty<std::string>::isForeignProperty()
{
  return 1;
}

uint64_t mlcore::ForeignProperty<std::string>::baseProperty(uint64_t a1)
{
  return *(_QWORD *)(a1 + 72);
}

uint64_t mlcore::ForeignProperty<std::string>::foreignProperty(uint64_t a1)
{
  return *(_QWORD *)(a1 + 80);
}

uint64_t mlcore::ForeignProperty<std::string>::predicate@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(result + 96);
  *a2 = *(_QWORD *)(result + 88);
  a2[1] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void `non-virtual thunk to'mlcore::ForeignProperty<std::string>::~ForeignProperty(_QWORD *a1)
{
  void **v1;

  *(a1 - 8) = &off_24C337C40;
  v1 = (void **)(a1 - 8);
  *a1 = &unk_24C337CE0;
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 3));
  mlcore::ModelPropertyBase::~ModelPropertyBase(v1);
}

{
  void **v1;

  *(a1 - 8) = &off_24C337C40;
  v1 = (void **)(a1 - 8);
  *a1 = &unk_24C337CE0;
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 3));
  mlcore::ModelPropertyBase::~ModelPropertyBase(v1);
  JUMPOUT(0x20BD27AFCLL);
}

uint64_t `non-virtual thunk to'mlcore::ForeignProperty<std::string>::baseProperty(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8);
}

uint64_t `non-virtual thunk to'mlcore::ForeignProperty<std::string>::foreignProperty(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16);
}

uint64_t `non-virtual thunk to'mlcore::ForeignProperty<std::string>::predicate@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(result + 32);
  *a2 = *(_QWORD *)(result + 24);
  a2[1] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void mlcore::ModelPropertyBase::~ModelPropertyBase(void **this)
{
  *this = off_24C3397E0;
  if (*((char *)this + 63) < 0)
    operator delete(this[5]);
  if (*((char *)this + 39) < 0)
    operator delete(this[2]);
}

void std::allocate_shared[abi:ne180100]<mediaplatform::SQLBinaryExpression,std::allocator<mediaplatform::SQLBinaryExpression>,std::shared_ptr<mediaplatform::SQLExpression>,mediaplatform::SQLBinaryExpression::BinaryOperator,std::shared_ptr<mediaplatform::SQLColumnNameExpression>,void>(_QWORD *a1, __int128 *a2, int *a3, __int128 *a4)
{
  char *v8;
  char *v9;
  char *v10;
  __int128 v11;
  int v12;
  __int128 v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t *p_shared_owners;
  unint64_t v22;

  v8 = (char *)operator new(0x48uLL);
  v9 = v8;
  *(_OWORD *)(v8 + 8) = 0u;
  *(_QWORD *)v8 = &off_24C33BEC8;
  *((_QWORD *)v8 + 3) = &off_24C331138;
  v10 = v8 + 24;
  v11 = *a2;
  *a2 = 0u;
  v12 = *a3;
  v13 = *a4;
  *a4 = 0u;
  *((_DWORD *)v8 + 8) = v12;
  *(_OWORD *)(v8 + 40) = v11;
  v14 = (std::__shared_weak_count *)*((_QWORD *)&v11 + 1);
  if (*((_QWORD *)&v11 + 1))
  {
    v15 = (unint64_t *)(*((_QWORD *)&v11 + 1) + 8);
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  *(_OWORD *)(v8 + 56) = v13;
  v17 = (std::__shared_weak_count *)*((_QWORD *)&v13 + 1);
  if (!*((_QWORD *)&v13 + 1))
    goto LABEL_9;
  v18 = (unint64_t *)(*((_QWORD *)&v13 + 1) + 8);
  do
    v19 = __ldxr(v18);
  while (__stxr(v19 + 1, v18));
  do
    v20 = __ldaxr(v18);
  while (__stlxr(v20 - 1, v18));
  if (!v20)
  {
    (*(void (**)(_QWORD))(**((_QWORD **)&v13 + 1) + 16))(*((_QWORD *)&v13 + 1));
    std::__shared_weak_count::__release_weak(v17);
    if (!v14)
      goto LABEL_15;
  }
  else
  {
LABEL_9:
    if (!*((_QWORD *)&v11 + 1))
      goto LABEL_15;
  }
  p_shared_owners = (unint64_t *)&v14->__shared_owners_;
  do
    v22 = __ldaxr(p_shared_owners);
  while (__stlxr(v22 - 1, p_shared_owners));
  if (!v22)
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
  }
LABEL_15:
  *a1 = v10;
  a1[1] = v9;
}

void std::allocate_shared[abi:ne180100]<mediaplatform::SQLBinaryExpression,std::allocator<mediaplatform::SQLBinaryExpression>,std::shared_ptr<mediaplatform::SQLBinaryExpression> &,mediaplatform::SQLBinaryExpression::BinaryOperator,std::shared_ptr<mediaplatform::SQLExpression>,void>(_QWORD *a1, uint64_t a2, std::__shared_weak_count *a3, int *a4, __int128 *a5)
{
  char *v10;
  char *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  int v14;
  __int128 v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;

  v10 = (char *)operator new(0x48uLL);
  v11 = v10;
  *((_QWORD *)v10 + 1) = 0;
  *((_QWORD *)v10 + 2) = 0;
  *(_QWORD *)v10 = &off_24C33BEC8;
  if (a3)
  {
    p_shared_owners = (unint64_t *)&a3->__shared_owners_;
    do
      v13 = __ldxr(p_shared_owners);
    while (__stxr(v13 + 1, p_shared_owners));
  }
  v14 = *a4;
  v15 = *a5;
  *(_QWORD *)a5 = 0;
  *((_QWORD *)a5 + 1) = 0;
  *((_QWORD *)v10 + 3) = &off_24C331138;
  *((_DWORD *)v10 + 8) = v14;
  *((_QWORD *)v10 + 5) = a2;
  *((_QWORD *)v10 + 6) = a3;
  if (a3)
  {
    v16 = (unint64_t *)&a3->__shared_owners_;
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
  }
  *(_OWORD *)(v10 + 56) = v15;
  v18 = (std::__shared_weak_count *)*((_QWORD *)&v15 + 1);
  if (!*((_QWORD *)&v15 + 1))
    goto LABEL_12;
  v19 = (unint64_t *)(*((_QWORD *)&v15 + 1) + 8);
  do
    v20 = __ldxr(v19);
  while (__stxr(v20 + 1, v19));
  do
    v21 = __ldaxr(v19);
  while (__stlxr(v21 - 1, v19));
  if (!v21)
  {
    (*(void (**)(_QWORD))(**((_QWORD **)&v15 + 1) + 16))(*((_QWORD *)&v15 + 1));
    std::__shared_weak_count::__release_weak(v18);
    if (!a3)
      goto LABEL_18;
  }
  else
  {
LABEL_12:
    if (!a3)
      goto LABEL_18;
  }
  v22 = (unint64_t *)&a3->__shared_owners_;
  do
    v23 = __ldaxr(v22);
  while (__stlxr(v23 - 1, v22));
  if (!v23)
  {
    ((void (*)(std::__shared_weak_count *))a3->__on_zero_shared)(a3);
    std::__shared_weak_count::__release_weak(a3);
  }
LABEL_18:
  *a1 = v11 + 24;
  a1[1] = v11;
}

void std::allocate_shared[abi:ne180100]<mediaplatform::SQLOnJoinConstraint,std::allocator<mediaplatform::SQLOnJoinConstraint>,std::shared_ptr<mediaplatform::SQLBinaryExpression> &,void>(_QWORD *a1, uint64_t a2, std::__shared_weak_count *a3)
{
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;

  v6 = operator new(0x30uLL);
  v7 = v6;
  v6[1] = 0;
  v6[2] = 0;
  *v6 = &off_24C33BF38;
  v8 = v6 + 3;
  if (a3)
  {
    p_shared_owners = (unint64_t *)&a3->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
    v6[3] = &off_24C331188;
    v6[4] = a2;
    v6[5] = a3;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))a3->__on_zero_shared)(a3);
      std::__shared_weak_count::__release_weak(a3);
    }
  }
  else
  {
    v6[3] = &off_24C331188;
    v6[4] = a2;
    v6[5] = 0;
  }
  *a1 = v8;
  a1[1] = v7;
}

void std::allocate_shared[abi:ne180100]<mediaplatform::SQLJoinClause,std::allocator<mediaplatform::SQLJoinClause>,mediaplatform::SQLJoinClause::JoinOperator,std::string const&,std::shared_ptr<mediaplatform::SQLOnJoinConstraint> &,void>(_QWORD *a1, int a2, uint64_t a3, uint64_t *a4)
{
  char *v8;
  std::__shared_weak_count *v9;
  uint64_t v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  std::string *v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t v16;
  std::string v17;

  v8 = (char *)operator new(0x50uLL);
  *((_QWORD *)v8 + 1) = 0;
  *((_QWORD *)v8 + 2) = 0;
  *(_QWORD *)v8 = &off_24C33B988;
  if (*(char *)(a3 + 23) < 0)
    std::string::__init_copy_ctor_external(&v17, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
  else
    v17 = *(std::string *)a3;
  v10 = *a4;
  v9 = (std::__shared_weak_count *)a4[1];
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
  }
  *((_QWORD *)v8 + 3) = off_24C330D60;
  *((_DWORD *)v8 + 8) = a2;
  v13 = (std::string *)(v8 + 40);
  if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v13, v17.__r_.__value_.__l.__data_, v17.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v13->__r_.__value_.__l.__data_ = *(_OWORD *)&v17.__r_.__value_.__l.__data_;
    *((_QWORD *)v8 + 7) = *((_QWORD *)&v17.__r_.__value_.__l + 2);
  }
  *((_QWORD *)v8 + 8) = v10;
  *((_QWORD *)v8 + 9) = v9;
  if (v9)
  {
    v14 = (unint64_t *)&v9->__shared_owners_;
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
    do
      v16 = __ldaxr(v14);
    while (__stlxr(v16 - 1, v14));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v17.__r_.__value_.__l.__data_);
  *a1 = v8 + 24;
  a1[1] = v8;
}

void sub_20A75E1B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__shared_weak_count *v9;
  void *v10;
  void *v12;

  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  operator delete(v10);
  std::__shared_weak_count::~__shared_weak_count(v9);
  operator delete(v12);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<mediaplatform::SQLJoinClause>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C33B988;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<mediaplatform::SQLJoinClause>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C33B988;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x20BD27AFCLL);
}

void std::__shared_ptr_emplace<mediaplatform::SQLOnJoinConstraint>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C33BF38;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<mediaplatform::SQLOnJoinConstraint>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C33BF38;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x20BD27AFCLL);
}

void std::__shared_ptr_emplace<mediaplatform::SQLBinaryExpression>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C33BEC8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<mediaplatform::SQLBinaryExpression>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C33BEC8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x20BD27AFCLL);
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<mlcore::ModelProperty<std::string> *,std::string>,void *>>>::operator()[abi:ne180100](char a1, void **__p)
{
  if (a1)
  {
    if (*((char *)__p + 47) < 0)
      operator delete(__p[3]);
  }
  else if (!__p)
  {
    return;
  }
  operator delete(__p);
}

_QWORD *std::__function::__func<mlcore::ForeignProperty<mediaplatform::Data> * mlcore::GetForeignProperty<mediaplatform::Data>(mlcore::ModelPropertyBase *,mlcore::ModelProperty<mediaplatform::Data> *,std::shared_ptr<mlcore::Predicate>)::{lambda(void)#1},std::allocator<mlcore::ForeignProperty<mediaplatform::Data> * mlcore::GetForeignProperty<mediaplatform::Data>(mlcore::ModelPropertyBase *,mlcore::ModelProperty<mediaplatform::Data> *,std::shared_ptr<mlcore::Predicate>)::{lambda(void)#1}>,mlcore::ModelPropertyBase * ()(void)>::~__func(_QWORD *a1)
{
  *a1 = &off_24C33B3A8;
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 3));
  return a1;
}

void std::__function::__func<mlcore::ForeignProperty<mediaplatform::Data> * mlcore::GetForeignProperty<mediaplatform::Data>(mlcore::ModelPropertyBase *,mlcore::ModelProperty<mediaplatform::Data> *,std::shared_ptr<mlcore::Predicate>)::{lambda(void)#1},std::allocator<mlcore::ForeignProperty<mediaplatform::Data> * mlcore::GetForeignProperty<mediaplatform::Data>(mlcore::ModelPropertyBase *,mlcore::ModelProperty<mediaplatform::Data> *,std::shared_ptr<mlcore::Predicate>)::{lambda(void)#1}>,mlcore::ModelPropertyBase * ()(void)>::~__func(_QWORD *a1)
{
  *a1 = &off_24C33B3A8;
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 3));
  JUMPOUT(0x20BD27AFCLL);
}

char *std::__function::__func<mlcore::ForeignProperty<mediaplatform::Data> * mlcore::GetForeignProperty<mediaplatform::Data>(mlcore::ModelPropertyBase *,mlcore::ModelProperty<mediaplatform::Data> *,std::shared_ptr<mlcore::Predicate>)::{lambda(void)#1},std::allocator<mlcore::ForeignProperty<mediaplatform::Data> * mlcore::GetForeignProperty<mediaplatform::Data>(mlcore::ModelPropertyBase *,mlcore::ModelProperty<mediaplatform::Data> *,std::shared_ptr<mlcore::Predicate>)::{lambda(void)#1}>,mlcore::ModelPropertyBase * ()(void)>::__clone(uint64_t a1)
{
  char *result;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  result = (char *)operator new(0x28uLL);
  *(_QWORD *)result = &off_24C33B3A8;
  *(_OWORD *)(result + 8) = *(_OWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 32);
  *((_QWORD *)result + 3) = *(_QWORD *)(a1 + 24);
  *((_QWORD *)result + 4) = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

uint64_t std::__function::__func<mlcore::ForeignProperty<mediaplatform::Data> * mlcore::GetForeignProperty<mediaplatform::Data>(mlcore::ModelPropertyBase *,mlcore::ModelProperty<mediaplatform::Data> *,std::shared_ptr<mlcore::Predicate>)::{lambda(void)#1},std::allocator<mlcore::ForeignProperty<mediaplatform::Data> * mlcore::GetForeignProperty<mediaplatform::Data>(mlcore::ModelPropertyBase *,mlcore::ModelProperty<mediaplatform::Data> *,std::shared_ptr<mlcore::Predicate>)::{lambda(void)#1}>,mlcore::ModelPropertyBase * ()(void)>::__clone(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  *(_QWORD *)a2 = &off_24C33B3A8;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 32);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(result + 24);
  *(_QWORD *)(a2 + 32) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

uint64_t std::__function::__func<mlcore::ForeignProperty<mediaplatform::Data> * mlcore::GetForeignProperty<mediaplatform::Data>(mlcore::ModelPropertyBase *,mlcore::ModelProperty<mediaplatform::Data> *,std::shared_ptr<mlcore::Predicate>)::{lambda(void)#1},std::allocator<mlcore::ForeignProperty<mediaplatform::Data> * mlcore::GetForeignProperty<mediaplatform::Data>(mlcore::ModelPropertyBase *,mlcore::ModelProperty<mediaplatform::Data> *,std::shared_ptr<mlcore::Predicate>)::{lambda(void)#1}>,mlcore::ModelPropertyBase * ()(void)>::destroy(uint64_t a1)
{
  return std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100](a1 + 24);
}

void std::__function::__func<mlcore::ForeignProperty<mediaplatform::Data> * mlcore::GetForeignProperty<mediaplatform::Data>(mlcore::ModelPropertyBase *,mlcore::ModelProperty<mediaplatform::Data> *,std::shared_ptr<mlcore::Predicate>)::{lambda(void)#1},std::allocator<mlcore::ForeignProperty<mediaplatform::Data> * mlcore::GetForeignProperty<mediaplatform::Data>(mlcore::ModelPropertyBase *,mlcore::ModelProperty<mediaplatform::Data> *,std::shared_ptr<mlcore::Predicate>)::{lambda(void)#1}>,mlcore::ModelPropertyBase * ()(void)>::destroy_deallocate(void *a1)
{
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 24);
  operator delete(a1);
}

uint64_t std::__function::__func<mlcore::ForeignProperty<mediaplatform::Data> * mlcore::GetForeignProperty<mediaplatform::Data>(mlcore::ModelPropertyBase *,mlcore::ModelProperty<mediaplatform::Data> *,std::shared_ptr<mlcore::Predicate>)::{lambda(void)#1},std::allocator<mlcore::ForeignProperty<mediaplatform::Data> * mlcore::GetForeignProperty<mediaplatform::Data>(mlcore::ModelPropertyBase *,mlcore::ModelProperty<mediaplatform::Data> *,std::shared_ptr<mlcore::Predicate>)::{lambda(void)#1}>,mlcore::ModelPropertyBase * ()(void)>::operator()(uint64_t a1)
{
  int v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t Foreign;
  _QWORD *v7;
  uint64_t v8;
  void *v9;
  __int128 v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int8x16_t v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  size_t v26;
  std::string *v27;
  char *v28;
  char *v29;
  char *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  const std::string::value_type *v34;
  const std::string::value_type *v35;
  int v36;
  const std::string::value_type *v37;
  std::string::size_type v38;
  std::string *v39;
  __int128 v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  std::string::size_type size;
  unint64_t *v48;
  unint64_t v49;
  std::__shared_weak_count *v50;
  uint64_t v52;
  std::string::size_type v53;
  unint64_t *v54;
  unint64_t v55;
  unint64_t *v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t *v60;
  unint64_t v61;
  unint64_t *v62;
  std::string v63;
  std::string __p;

  v2 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 88))(*(_QWORD *)(a1 + 8));
  v3 = *(_QWORD **)(a1 + 8);
  if (v2)
  {
    v4 = (*(uint64_t (**)(_QWORD))(*v3 + 120))(*(_QWORD *)(a1 + 8));
    switch((*(unsigned int (**)(uint64_t))(*(_QWORD *)v4 + 80))(v4))
    {
      case 0u:
        v5 = *(_QWORD *)(a1 + 16);
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = 0uLL;
        Foreign = mlcore::GetForeignProperty<int>(v5, v4, (uint64_t *)&__p);
        goto LABEL_51;
      case 1u:
        v42 = *(_QWORD *)(a1 + 16);
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = 0uLL;
        Foreign = mlcore::GetForeignProperty<long long>(v42, v4, (uint64_t *)&__p);
        goto LABEL_51;
      case 2u:
        v43 = *(_QWORD *)(a1 + 16);
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = 0uLL;
        Foreign = mlcore::GetForeignProperty<double>(v43, v4, (uint64_t *)&__p);
        goto LABEL_51;
      case 3u:
        v44 = *(_QWORD *)(a1 + 16);
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = 0uLL;
        Foreign = mlcore::GetForeignProperty<std::string>(v44, v4, (uint64_t *)&__p);
        goto LABEL_51;
      case 4u:
        v45 = *(_QWORD *)(a1 + 16);
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = 0uLL;
        Foreign = mlcore::GetForeignProperty<mediaplatform::Data>(v45, v4, (uint64_t *)&__p);
LABEL_51:
        v41 = Foreign;
        break;
      default:
        v41 = 0;
        break;
    }
    v46 = (*(uint64_t (**)(_QWORD *))(*v3 + 128))(v3);
    (*(void (**)(std::string *__return_ptr, _QWORD *))(*v3 + 136))(&v63, v3);
    v16 = mlcore::GetForeignProperty<mediaplatform::Data>(v41, v46, (uint64_t *)&v63);
    size = v63.__r_.__value_.__l.__size_;
    if (v63.__r_.__value_.__l.__size_)
    {
      v48 = (unint64_t *)(v63.__r_.__value_.__l.__size_ + 8);
      do
        v49 = __ldaxr(v48);
      while (__stlxr(v49 - 1, v48));
      if (!v49)
      {
        (*(void (**)(std::string::size_type))(*(_QWORD *)size + 16))(size);
        v50 = (std::__shared_weak_count *)size;
LABEL_57:
        std::__shared_weak_count::__release_weak(v50);
      }
    }
  }
  else
  {
    v7 = *(_QWORD **)(a1 + 16);
    if (v7)
    {
      v8 = v3[1];
      if ((*(unsigned int (**)(_QWORD))(*v7 + 88))(*(_QWORD *)(a1 + 16)))
      {
        while (1)
        {
          (*(void (**)(std::string *__return_ptr))(*(_QWORD *)v9 + 32))(&__p);
          v10 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
          if (__p.__r_.__value_.__l.__size_)
          {
            v11 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
            do
              v12 = __ldaxr(v11);
            while (__stlxr(v12 - 1, v11));
            if (!v12)
            {
              (*(void (**)(_QWORD))(**((_QWORD **)&v10 + 1) + 16))(*((_QWORD *)&v10 + 1));
              std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v10 + 1));
            }
          }
          if ((_QWORD)v10)
            goto LABEL_17;
          v13 = v7[1];
          v14 = (*(uint64_t (**)(void *))(*(_QWORD *)v9 + 16))(v9);
          v7 = (_QWORD *)v14;
          if (v13 == v8)
            break;
          if (!v14)
            goto LABEL_17;
          if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 88))(v14) & 1) == 0 && v7[1] == v8)
          {
            v58 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 112))(v8);
            v59 = *(_QWORD *)(a1 + 8);
            v53 = *(_QWORD *)(a1 + 32);
            __p.__r_.__value_.__r.__words[0] = *(_QWORD *)(a1 + 24);
            __p.__r_.__value_.__l.__size_ = v53;
            if (v53)
            {
              v60 = (unint64_t *)(v53 + 8);
              do
                v61 = __ldxr(v60);
              while (__stxr(v61 + 1, v60));
            }
            v16 = mlcore::GetForeignProperty<mediaplatform::Data>(v58, v59, (uint64_t *)&__p);
            if (!v53)
              return v16;
            v62 = (unint64_t *)(v53 + 8);
            do
              v57 = __ldaxr(v62);
            while (__stlxr(v57 - 1, v62));
LABEL_72:
            if (v57)
              return v16;
            (*(void (**)(std::string::size_type))(*(_QWORD *)v53 + 16))(v53);
            v50 = (std::__shared_weak_count *)v53;
            goto LABEL_57;
          }
          if (((*(uint64_t (**)(_QWORD *))(*v7 + 88))(v7) & 1) == 0)
            goto LABEL_17;
        }
        v52 = *(_QWORD *)(a1 + 8);
        v53 = *(_QWORD *)(a1 + 32);
        __p.__r_.__value_.__r.__words[0] = *(_QWORD *)(a1 + 24);
        __p.__r_.__value_.__l.__size_ = v53;
        if (v53)
        {
          v54 = (unint64_t *)(v53 + 8);
          do
            v55 = __ldxr(v54);
          while (__stxr(v55 + 1, v54));
        }
        v16 = mlcore::GetForeignProperty<mediaplatform::Data>(v14, v52, (uint64_t *)&__p);
        if (!v53)
          return v16;
        v56 = (unint64_t *)(v53 + 8);
        do
          v57 = __ldaxr(v56);
        while (__stlxr(v57 - 1, v56));
        goto LABEL_72;
      }
    }
LABEL_17:
    v15 = operator new();
    v16 = v15;
    v17 = *(int8x16_t *)(a1 + 8);
    v18 = *(_QWORD *)(a1 + 24);
    v19 = *(std::__shared_weak_count **)(a1 + 32);
    if (v19)
    {
      p_shared_owners = (unint64_t *)&v19->__shared_owners_;
      do
        v21 = __ldxr(p_shared_owners);
      while (__stxr(v21 + 1, p_shared_owners));
    }
    *(_OWORD *)(v15 + 32) = 0u;
    *(_OWORD *)(v15 + 48) = 0u;
    *(_OWORD *)(v15 + 16) = 0u;
    *(_QWORD *)v15 = &off_24C337B68;
    *(_QWORD *)(v15 + 64) = &unk_24C337C08;
    *(int8x16_t *)(v15 + 72) = vextq_s8(v17, v17, 8uLL);
    *(_QWORD *)(v15 + 88) = v18;
    *(_QWORD *)(v15 + 96) = v19;
    if (v19)
    {
      v22 = (unint64_t *)&v19->__shared_owners_;
      do
        v23 = __ldxr(v22);
      while (__stxr(v23 + 1, v22));
      do
        v24 = __ldaxr(v22);
      while (__stlxr(v24 - 1, v22));
      if (!v24)
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
    }
    v25 = *(_QWORD *)(a1 + 16);
    if (*(char *)(v25 + 39) >= 0)
      v26 = *(unsigned __int8 *)(v25 + 39);
    else
      v26 = *(_QWORD *)(v25 + 24);
    v27 = &v63;
    std::string::basic_string[abi:ne180100]((uint64_t)&v63, v26 + 2);
    if ((v63.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v27 = (std::string *)v63.__r_.__value_.__r.__words[0];
    if (v26)
    {
      v30 = *(char **)(v25 + 16);
      v29 = (char *)(v25 + 16);
      v28 = v30;
      if (v29[23] >= 0)
        v31 = v29;
      else
        v31 = v28;
      memmove(v27, v31, v26);
    }
    strcpy((char *)v27 + v26, "->");
    v32 = *(_QWORD *)(a1 + 8);
    v35 = *(const std::string::value_type **)(v32 + 16);
    v33 = v32 + 16;
    v34 = v35;
    v36 = *(char *)(v33 + 23);
    if (v36 >= 0)
      v37 = (const std::string::value_type *)v33;
    else
      v37 = v34;
    if (v36 >= 0)
      v38 = *(unsigned __int8 *)(v33 + 23);
    else
      v38 = *(_QWORD *)(v33 + 8);
    v39 = std::string::append(&v63, v37, v38);
    v40 = *(_OWORD *)&v39->__r_.__value_.__l.__data_;
    __p.__r_.__value_.__r.__words[2] = v39->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v40;
    v39->__r_.__value_.__l.__size_ = 0;
    v39->__r_.__value_.__r.__words[2] = 0;
    v39->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v63.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v63.__r_.__value_.__l.__data_);
    mlcore::EntityClass::setPropertyForName(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 8), v16, &__p);
    *(_QWORD *)(v16 + 8) = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  return v16;
}

void sub_20A75E8F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  std::__shared_weak_count *v21;
  unint64_t *p_shared_owners;
  unint64_t v24;

  if (v21)
  {
    p_shared_owners = (unint64_t *)&v21->__shared_owners_;
    do
      v24 = __ldaxr(p_shared_owners);
    while (__stlxr(v24 - 1, p_shared_owners));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<mlcore::ForeignProperty<mediaplatform::Data> * mlcore::GetForeignProperty<mediaplatform::Data>(mlcore::ModelPropertyBase *,mlcore::ModelProperty<mediaplatform::Data> *,std::shared_ptr<mlcore::Predicate>)::{lambda(void)#1},std::allocator<mlcore::ForeignProperty<mediaplatform::Data> * mlcore::GetForeignProperty<mediaplatform::Data>(mlcore::ModelPropertyBase *,mlcore::ModelProperty<mediaplatform::Data> *,std::shared_ptr<mlcore::Predicate>)::{lambda(void)#1}>,mlcore::ModelPropertyBase * ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), 0x800000020A92158ELL))
    return a1 + 8;
  else
    return 0;
}

void *std::__function::__func<mlcore::ForeignProperty<mediaplatform::Data> * mlcore::GetForeignProperty<mediaplatform::Data>(mlcore::ModelPropertyBase *,mlcore::ModelProperty<mediaplatform::Data> *,std::shared_ptr<mlcore::Predicate>)::{lambda(void)#1},std::allocator<mlcore::ForeignProperty<mediaplatform::Data> * mlcore::GetForeignProperty<mediaplatform::Data>(mlcore::ModelPropertyBase *,mlcore::ModelProperty<mediaplatform::Data> *,std::shared_ptr<mlcore::Predicate>)::{lambda(void)#1}>,mlcore::ModelPropertyBase * ()(void)>::target_type()
{
}

void mlcore::ForeignProperty<mediaplatform::Data>::~ForeignProperty(uint64_t a1)
{
  *(_QWORD *)a1 = &off_24C337B68;
  *(_QWORD *)(a1 + 64) = &unk_24C337C08;
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100](a1 + 88);
  mlcore::ModelPropertyBase::~ModelPropertyBase((void **)a1);
}

{
  *(_QWORD *)a1 = &off_24C337B68;
  *(_QWORD *)(a1 + 64) = &unk_24C337C08;
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100](a1 + 88);
  mlcore::ModelPropertyBase::~ModelPropertyBase((void **)a1);
  JUMPOUT(0x20BD27AFCLL);
}

void mlcore::ForeignProperty<mediaplatform::Data>::description(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  std::string *v4;
  __int128 v5;
  void **v6;
  std::string::size_type v7;
  std::string *v8;
  void *__p[2];
  unsigned __int8 v10;
  std::string v11;
  std::string v12;

  (*(void (**)(std::string *__return_ptr))(**(_QWORD **)(a1 + 72) + 40))(&v11);
  v4 = std::string::append(&v11, "->");
  v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  v12.__r_.__value_.__r.__words[2] = v4->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v12.__r_.__value_.__l.__data_ = v5;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  (*(void (**)(void **__return_ptr))(**(_QWORD **)(a1 + 80) + 40))(__p);
  if ((v10 & 0x80u) == 0)
    v6 = __p;
  else
    v6 = (void **)__p[0];
  if ((v10 & 0x80u) == 0)
    v7 = v10;
  else
    v7 = (std::string::size_type)__p[1];
  v8 = std::string::append(&v12, (const std::string::value_type *)v6, v7);
  *a2 = *v8;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  if ((char)v10 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v12.__r_.__value_.__l.__data_);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
}

void sub_20A75EB7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a14 < 0)
    operator delete(__p);
  if (a26 < 0)
    operator delete(a21);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t mlcore::ForeignProperty<mediaplatform::Data>::insertIntoCacheFromResultList(unint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t result;
  _QWORD v7[3];
  uint64_t v8;
  char v9;

  mediaplatform::DatabaseStatement::columnValue<mediaplatform::Data>(*(_QWORD *)(a3 + 8), *(_DWORD *)a3 + a4, (uint64_t)v7);
  result = mlcore::PropertyCacheBase<mediaplatform::Data>::setValueForProperty(a2, (uint64_t)v7, a1);
  v7[0] = &off_24C331510;
  if (v9)
  {
    result = v8;
    if (v8)
      return MEMORY[0x20BD27AE4](v8, 0x1000C8077774924);
  }
  return result;
}

void sub_20A75EC44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  if (a14)
  {
    if (a13)
      MEMORY[0x20BD27AE4](a13, 0x1000C8077774924);
  }
  _Unwind_Resume(exception_object);
}

uint64_t mlcore::ForeignProperty<mediaplatform::Data>::databaseTables(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 80) + 64))(*(_QWORD *)(a1 + 80));
}

uint64_t mlcore::ForeignProperty<mediaplatform::Data>::databaseColumn(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 80) + 72))(*(_QWORD *)(a1 + 80));
}

uint64_t mlcore::ForeignProperty<mediaplatform::Data>::propertyType(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 80) + 80))(*(_QWORD *)(a1 + 80));
}

uint64_t mlcore::ForeignProperty<mediaplatform::Data>::isForeignProperty()
{
  return 1;
}

void mlcore::ForeignProperty<mediaplatform::Data>::_SQLExpression(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;

  v2 = *(_QWORD *)(a1 + 80);
  v3 = (std::__shared_weak_count *)a2[1];
  v9 = *a2;
  v10 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v2 + 96))(v2, &v9);
  v6 = v10;
  if (v10)
  {
    v7 = (unint64_t *)&v10->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_20A75ED44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void mlcore::ForeignProperty<mediaplatform::Data>::_SQLJoinClauses(_QWORD *a1@<X0>, uint64_t a2@<X1>, char **a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  __int128 v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  __int128 v35;
  unint64_t *v36;
  unint64_t v37;
  unint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  char *v45;
  uint64_t v46;
  char *v47;
  char *v48;
  char *v49;
  char *v50;
  __int128 v51;
  int64x2_t v52;
  char *v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  __int128 v63;
  __int128 v64;
  uint64_t v65;
  std::__shared_weak_count *v66;
  __int128 v67;
  uint64_t v68;
  std::__shared_weak_count *v69;
  __int128 v70;
  void *__p[3];
  _QWORD *v72;
  _QWORD *v73;
  _BYTE v74[24];
  char *v75;
  _QWORD *v76;

  v6 = (*(uint64_t (**)(_QWORD *))(*a1 + 120))(a1);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 104))(v6, a2);
  v7 = (*(uint64_t (**)(_QWORD *))(*a1 + 120))(a1);
  (*(void (**)(_QWORD **__return_ptr, _QWORD *))(*a1 + 64))(&v72, a1);
  v8 = v72;
  v9 = v73;
  if (v72 != v73)
  {
    do
    {
      v10 = *v8;
      if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 88))(a2) != v10)
      {
        (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)v7 + 64))(__p, v7);
        v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 72))(v7);
        v68 = 0;
        v69 = 0;
        (*(void (**)(_BYTE *__return_ptr, uint64_t, uint64_t *))(*(_QWORD *)v7 + 96))(v74, v7, &v68);
        LODWORD(v64) = 13;
        (*(void (**)(__int128 *__return_ptr, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v10 + 32))(&v67, v10, *(_QWORD *)__p[0], v11);
        std::allocate_shared[abi:ne180100]<mediaplatform::SQLBinaryExpression,std::allocator<mediaplatform::SQLBinaryExpression>,std::shared_ptr<mediaplatform::SQLExpression>,mediaplatform::SQLBinaryExpression::BinaryOperator,std::shared_ptr<mediaplatform::SQLColumnNameExpression>,void>(&v70, (__int128 *)v74, (int *)&v64, &v67);
        v12 = (std::__shared_weak_count *)*((_QWORD *)&v67 + 1);
        if (*((_QWORD *)&v67 + 1))
        {
          v13 = (unint64_t *)(*((_QWORD *)&v67 + 1) + 8);
          do
            v14 = __ldaxr(v13);
          while (__stlxr(v14 - 1, v13));
          if (!v14)
          {
            ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
            std::__shared_weak_count::__release_weak(v12);
          }
        }
        v15 = *(std::__shared_weak_count **)&v74[8];
        if (*(_QWORD *)&v74[8])
        {
          v16 = (unint64_t *)(*(_QWORD *)&v74[8] + 8);
          do
            v17 = __ldaxr(v16);
          while (__stlxr(v17 - 1, v16));
          if (!v17)
          {
            ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
            std::__shared_weak_count::__release_weak(v15);
          }
        }
        v18 = v69;
        if (v69)
        {
          p_shared_owners = (unint64_t *)&v69->__shared_owners_;
          do
            v20 = __ldaxr(p_shared_owners);
          while (__stlxr(v20 - 1, p_shared_owners));
          if (!v20)
          {
            ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
            std::__shared_weak_count::__release_weak(v18);
          }
        }
        v21 = a1[11];
        if (v21)
        {
          LODWORD(v64) = 1;
          v65 = 0;
          v66 = 0;
          (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t *))(*(_QWORD *)v21 + 64))(&v67, v21, &v65);
          v22 = (std::__shared_weak_count *)*((_QWORD *)&v70 + 1);
          std::allocate_shared[abi:ne180100]<mediaplatform::SQLBinaryExpression,std::allocator<mediaplatform::SQLBinaryExpression>,std::shared_ptr<mediaplatform::SQLBinaryExpression> &,mediaplatform::SQLBinaryExpression::BinaryOperator,std::shared_ptr<mediaplatform::SQLExpression>,void>(v74, v70, *((std::__shared_weak_count **)&v70 + 1), (int *)&v64, &v67);
          v23 = *(_OWORD *)v74;
          *(_OWORD *)v74 = 0uLL;
          v70 = v23;
          if (v22)
          {
            v24 = (unint64_t *)&v22->__shared_owners_;
            do
              v25 = __ldaxr(v24);
            while (__stlxr(v25 - 1, v24));
            if (!v25)
            {
              ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
              std::__shared_weak_count::__release_weak(v22);
            }
          }
          v26 = *(std::__shared_weak_count **)&v74[8];
          if (*(_QWORD *)&v74[8])
          {
            v27 = (unint64_t *)(*(_QWORD *)&v74[8] + 8);
            do
              v28 = __ldaxr(v27);
            while (__stlxr(v28 - 1, v27));
            if (!v28)
            {
              ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
              std::__shared_weak_count::__release_weak(v26);
            }
          }
          v29 = (std::__shared_weak_count *)*((_QWORD *)&v67 + 1);
          if (*((_QWORD *)&v67 + 1))
          {
            v30 = (unint64_t *)(*((_QWORD *)&v67 + 1) + 8);
            do
              v31 = __ldaxr(v30);
            while (__stlxr(v31 - 1, v30));
            if (!v31)
            {
              ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
              std::__shared_weak_count::__release_weak(v29);
            }
          }
          v32 = v66;
          if (v66)
          {
            v33 = (unint64_t *)&v66->__shared_owners_;
            do
              v34 = __ldaxr(v33);
            while (__stlxr(v34 - 1, v33));
            if (!v34)
            {
              ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
              std::__shared_weak_count::__release_weak(v32);
            }
          }
        }
        std::allocate_shared[abi:ne180100]<mediaplatform::SQLOnJoinConstraint,std::allocator<mediaplatform::SQLOnJoinConstraint>,std::shared_ptr<mediaplatform::SQLBinaryExpression> &,void>(&v67, v70, *((std::__shared_weak_count **)&v70 + 1));
        std::allocate_shared[abi:ne180100]<mediaplatform::SQLJoinClause,std::allocator<mediaplatform::SQLJoinClause>,mediaplatform::SQLJoinClause::JoinOperator,std::string const&,std::shared_ptr<mediaplatform::SQLOnJoinConstraint> &,void>(&v64, 1, v10 + 8, (uint64_t *)&v67);
        v35 = v64;
        if (*((_QWORD *)&v64 + 1))
        {
          v36 = (unint64_t *)(*((_QWORD *)&v64 + 1) + 8);
          do
            v37 = __ldxr(v36);
          while (__stxr(v37 + 1, v36));
        }
        v39 = a3[1];
        v38 = (unint64_t)a3[2];
        if ((unint64_t)v39 >= v38)
        {
          v63 = v35;
          v41 = (v39 - *a3) >> 4;
          if ((unint64_t)(v41 + 1) >> 60)
            std::vector<std::string>::__throw_length_error[abi:ne180100]();
          v42 = v38 - (_QWORD)*a3;
          v43 = v42 >> 3;
          if (v42 >> 3 <= (unint64_t)(v41 + 1))
            v43 = v41 + 1;
          if ((unint64_t)v42 >= 0x7FFFFFFFFFFFFFF0)
            v44 = 0xFFFFFFFFFFFFFFFLL;
          else
            v44 = v43;
          v76 = a3 + 2;
          v45 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<mediaplatform::DatabaseParameterBase>>>(v44);
          v47 = &v45[16 * v41];
          *(_OWORD *)v47 = v63;
          v49 = *a3;
          v48 = a3[1];
          if (v48 == *a3)
          {
            v52 = vdupq_n_s64((unint64_t)v48);
            v50 = &v45[16 * v41];
          }
          else
          {
            v50 = &v45[16 * v41];
            do
            {
              v51 = *((_OWORD *)v48 - 1);
              v48 -= 16;
              *((_OWORD *)v50 - 1) = v51;
              v50 -= 16;
              *(_QWORD *)v48 = 0;
              *((_QWORD *)v48 + 1) = 0;
            }
            while (v48 != v49);
            v52 = *(int64x2_t *)a3;
          }
          v40 = v47 + 16;
          *a3 = v50;
          a3[1] = v47 + 16;
          *(int64x2_t *)&v74[8] = v52;
          v53 = a3[2];
          a3[2] = &v45[16 * v46];
          v75 = v53;
          *(_QWORD *)v74 = v52.i64[0];
          std::__split_buffer<std::shared_ptr<mediaplatform::SQLExpression const>>::~__split_buffer((uint64_t)v74);
        }
        else
        {
          *(_OWORD *)v39 = v35;
          v40 = v39 + 16;
        }
        a3[1] = v40;
        v54 = (std::__shared_weak_count *)*((_QWORD *)&v64 + 1);
        if (*((_QWORD *)&v64 + 1))
        {
          v55 = (unint64_t *)(*((_QWORD *)&v64 + 1) + 8);
          do
            v56 = __ldaxr(v55);
          while (__stlxr(v56 - 1, v55));
          if (!v56)
          {
            ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
            std::__shared_weak_count::__release_weak(v54);
          }
        }
        v57 = (std::__shared_weak_count *)*((_QWORD *)&v67 + 1);
        if (*((_QWORD *)&v67 + 1))
        {
          v58 = (unint64_t *)(*((_QWORD *)&v67 + 1) + 8);
          do
            v59 = __ldaxr(v58);
          while (__stlxr(v59 - 1, v58));
          if (!v59)
          {
            ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
            std::__shared_weak_count::__release_weak(v57);
          }
        }
        v60 = (std::__shared_weak_count *)*((_QWORD *)&v70 + 1);
        if (*((_QWORD *)&v70 + 1))
        {
          v61 = (unint64_t *)(*((_QWORD *)&v70 + 1) + 8);
          do
            v62 = __ldaxr(v61);
          while (__stlxr(v62 - 1, v61));
          if (!v62)
          {
            ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
            std::__shared_weak_count::__release_weak(v60);
          }
        }
        if (__p[0])
        {
          __p[1] = __p[0];
          operator delete(__p[0]);
        }
      }
      ++v8;
    }
    while (v8 != v9);
    v8 = v72;
  }
  if (v8)
  {
    v73 = v8;
    operator delete(v8);
  }
}

void sub_20A75F250(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, char a17, uint64_t a18, char a19, uint64_t a20,char a21,uint64_t a22,void *__p,uint64_t a24,uint64_t a25,void *a26,uint64_t a27)
{
  std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a26);
  _Unwind_Resume(a1);
}

uint64_t mlcore::ForeignProperty<mediaplatform::Data>::baseProperty(uint64_t a1)
{
  return *(_QWORD *)(a1 + 72);
}

uint64_t mlcore::ForeignProperty<mediaplatform::Data>::foreignProperty(uint64_t a1)
{
  return *(_QWORD *)(a1 + 80);
}

uint64_t mlcore::ForeignProperty<mediaplatform::Data>::predicate@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(result + 96);
  *a2 = *(_QWORD *)(result + 88);
  a2[1] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void `non-virtual thunk to'mlcore::ForeignProperty<mediaplatform::Data>::~ForeignProperty(_QWORD *a1)
{
  void **v1;

  *(a1 - 8) = &off_24C337B68;
  v1 = (void **)(a1 - 8);
  *a1 = &unk_24C337C08;
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 3));
  mlcore::ModelPropertyBase::~ModelPropertyBase(v1);
}

{
  void **v1;

  *(a1 - 8) = &off_24C337B68;
  v1 = (void **)(a1 - 8);
  *a1 = &unk_24C337C08;
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 3));
  mlcore::ModelPropertyBase::~ModelPropertyBase(v1);
  JUMPOUT(0x20BD27AFCLL);
}

uint64_t `non-virtual thunk to'mlcore::ForeignProperty<mediaplatform::Data>::baseProperty(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8);
}

uint64_t `non-virtual thunk to'mlcore::ForeignProperty<mediaplatform::Data>::foreignProperty(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16);
}

uint64_t `non-virtual thunk to'mlcore::ForeignProperty<mediaplatform::Data>::predicate@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(result + 32);
  *a2 = *(_QWORD *)(result + 24);
  a2[1] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

uint64_t mlcore::PropertyCacheBase<mediaplatform::Data>::setValueForProperty(uint64_t a1, uint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  void **v13;
  _QWORD *v14;
  unint64_t v15;
  _QWORD *v16;
  float v17;
  float v18;
  _BOOL8 v19;
  unint64_t v20;
  unint64_t v21;
  size_t v22;
  uint64_t v23;
  _QWORD *v24;
  unint64_t v25;
  uint64_t v27[2];
  char v28;

  v7 = (uint64_t *)(a1 + 8);
  v8 = 0x9DDFEA08EB382D69 * (((8 * a3) + 8) ^ HIDWORD(a3));
  v9 = 0x9DDFEA08EB382D69 * (HIDWORD(a3) ^ (v8 >> 47) ^ v8);
  v10 = 0x9DDFEA08EB382D69 * (v9 ^ (v9 >> 47));
  v11 = *(_QWORD *)(a1 + 16);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      v3 = 0x9DDFEA08EB382D69 * (v9 ^ (v9 >> 47));
      if (v10 >= v11)
        v3 = v10 % v11;
    }
    else
    {
      v3 = v10 & (v11 - 1);
    }
    v13 = *(void ***)(*v7 + 8 * v3);
    if (v13)
    {
      v14 = *v13;
      if (*v13)
      {
        do
        {
          v15 = v14[1];
          if (v15 == v10)
          {
            if (v14[2] == a3)
              return mediaplatform::Data::operator=((uint64_t)(v14 + 3), a2);
          }
          else
          {
            if (v12.u32[0] > 1uLL)
            {
              if (v15 >= v11)
                v15 %= v11;
            }
            else
            {
              v15 &= v11 - 1;
            }
            if (v15 != v3)
              break;
          }
          v14 = (_QWORD *)*v14;
        }
        while (v14);
      }
    }
  }
  v16 = (_QWORD *)(a1 + 24);
  v14 = operator new(0x40uLL);
  v27[0] = (uint64_t)v14;
  v27[1] = a1 + 24;
  *v14 = 0;
  v14[1] = v10;
  v14[2] = a3;
  v14[3] = &off_24C331510;
  v14[5] = 0;
  v14[6] = 0;
  v14[4] = 0;
  *((_BYTE *)v14 + 56) = 0;
  v28 = 1;
  v17 = (float)(unint64_t)(*(_QWORD *)(a1 + 32) + 1);
  v18 = *(float *)(a1 + 40);
  if (!v11 || (float)(v18 * (float)v11) < v17)
  {
    v19 = 1;
    if (v11 >= 3)
      v19 = (v11 & (v11 - 1)) != 0;
    v20 = v19 | (2 * v11);
    v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21)
      v22 = v21;
    else
      v22 = v20;
    std::__hash_table<std::__hash_value_type<mlcore::ModelProperty<std::string> *,std::string>,std::__unordered_map_hasher<mlcore::ModelProperty<std::string> *,std::__hash_value_type<mlcore::ModelProperty<std::string> *,std::string>,std::hash<mlcore::ModelProperty<std::string> *>,std::equal_to<mlcore::ModelProperty<std::string> *>,true>,std::__unordered_map_equal<mlcore::ModelProperty<std::string> *,std::__hash_value_type<mlcore::ModelProperty<std::string> *,std::string>,std::equal_to<mlcore::ModelProperty<std::string> *>,std::hash<mlcore::ModelProperty<std::string> *>,true>,std::allocator<std::__hash_value_type<mlcore::ModelProperty<std::string> *,std::string>>>::__rehash<true>((uint64_t)v7, v22);
    v11 = *(_QWORD *)(a1 + 16);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
        v3 = v10 % v11;
      else
        v3 = v10;
    }
    else
    {
      v3 = (v11 - 1) & v10;
    }
  }
  v23 = *v7;
  v24 = *(_QWORD **)(*v7 + 8 * v3);
  if (v24)
  {
    *v14 = *v24;
LABEL_38:
    *v24 = v14;
    goto LABEL_39;
  }
  *v14 = *v16;
  *v16 = v14;
  *(_QWORD *)(v23 + 8 * v3) = v16;
  if (*v14)
  {
    v25 = *(_QWORD *)(*v14 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v25 >= v11)
        v25 %= v11;
    }
    else
    {
      v25 &= v11 - 1;
    }
    v24 = (_QWORD *)(*v7 + 8 * v25);
    goto LABEL_38;
  }
LABEL_39:
  v27[0] = 0;
  ++*(_QWORD *)(a1 + 32);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<mlcore::ModelProperty<mediaplatform::Data> *,mediaplatform::Data>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<mlcore::ModelProperty<mediaplatform::Data> *,mediaplatform::Data>,void *>>>>::reset[abi:ne180100](v27);
  return mediaplatform::Data::operator=((uint64_t)(v14 + 3), a2);
}

void sub_20A75F690(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<mlcore::ModelProperty<mediaplatform::Data> *,mediaplatform::Data>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<mlcore::ModelProperty<mediaplatform::Data> *,mediaplatform::Data>,void *>>>>::reset[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<mlcore::ModelProperty<mediaplatform::Data> *,mediaplatform::Data>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<mlcore::ModelProperty<mediaplatform::Data> *,mediaplatform::Data>,void *>>>>::reset[abi:ne180100](uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *a1;
  *a1 = 0;
  if (v1)
  {
    if (*((_BYTE *)a1 + 16))
    {
      *(_QWORD *)(v1 + 24) = &off_24C331510;
      if (*(_BYTE *)(v1 + 56))
      {
        v2 = *(_QWORD *)(v1 + 48);
        if (v2)
          MEMORY[0x20BD27AE4](v2, 0x1000C8077774924);
      }
    }
    operator delete((void *)v1);
  }
}

_QWORD *std::__function::__func<mlcore::ForeignProperty<double> * mlcore::GetForeignProperty<double>(mlcore::ModelPropertyBase *,mlcore::ModelProperty<double> *,std::shared_ptr<mlcore::Predicate>)::{lambda(void)#1},std::allocator<mlcore::ForeignProperty<double> * mlcore::GetForeignProperty<double>(mlcore::ModelPropertyBase *,mlcore::ModelProperty<double> *,std::shared_ptr<mlcore::Predicate>)::{lambda(void)#1}>,mlcore::ModelPropertyBase * ()(void)>::~__func(_QWORD *a1)
{
  *a1 = &off_24C33B458;
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 3));
  return a1;
}

void std::__function::__func<mlcore::ForeignProperty<double> * mlcore::GetForeignProperty<double>(mlcore::ModelPropertyBase *,mlcore::ModelProperty<double> *,std::shared_ptr<mlcore::Predicate>)::{lambda(void)#1},std::allocator<mlcore::ForeignProperty<double> * mlcore::GetForeignProperty<double>(mlcore::ModelPropertyBase *,mlcore::ModelProperty<double> *,std::shared_ptr<mlcore::Predicate>)::{lambda(void)#1}>,mlcore::ModelPropertyBase * ()(void)>::~__func(_QWORD *a1)
{
  *a1 = &off_24C33B458;
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 3));
  JUMPOUT(0x20BD27AFCLL);
}

char *std::__function::__func<mlcore::ForeignProperty<double> * mlcore::GetForeignProperty<double>(mlcore::ModelPropertyBase *,mlcore::ModelProperty<double> *,std::shared_ptr<mlcore::Predicate>)::{lambda(void)#1},std::allocator<mlcore::ForeignProperty<double> * mlcore::GetForeignProperty<double>(mlcore::ModelPropertyBase *,mlcore::ModelProperty<double> *,std::shared_ptr<mlcore::Predicate>)::{lambda(void)#1}>,mlcore::ModelPropertyBase * ()(void)>::__clone(uint64_t a1)
{
  char *result;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  result = (char *)operator new(0x28uLL);
  *(_QWORD *)result = &off_24C33B458;
  *(_OWORD *)(result + 8) = *(_OWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 32);
  *((_QWORD *)result + 3) = *(_QWORD *)(a1 + 24);
  *((_QWORD *)result + 4) = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

uint64_t std::__function::__func<mlcore::ForeignProperty<double> * mlcore::GetForeignProperty<double>(mlcore::ModelPropertyBase *,mlcore::ModelProperty<double> *,std::shared_ptr<mlcore::Predicate>)::{lambda(void)#1},std::allocator<mlcore::ForeignProperty<double> * mlcore::GetForeignProperty<double>(mlcore::ModelPropertyBase *,mlcore::ModelProperty<double> *,std::shared_ptr<mlcore::Predicate>)::{lambda(void)#1}>,mlcore::ModelPropertyBase * ()(void)>::__clone(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  *(_QWORD *)a2 = &off_24C33B458;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 32);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(result + 24);
  *(_QWORD *)(a2 + 32) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

uint64_t std::__function::__func<mlcore::ForeignProperty<double> * mlcore::GetForeignProperty<double>(mlcore::ModelPropertyBase *,mlcore::ModelProperty<double> *,std::shared_ptr<mlcore::Predicate>)::{lambda(void)#1},std::allocator<mlcore::ForeignProperty<double> * mlcore::GetForeignProperty<double>(mlcore::ModelPropertyBase *,mlcore::ModelProperty<double> *,std::shared_ptr<mlcore::Predicate>)::{lambda(void)#1}>,mlcore::ModelPropertyBase * ()(void)>::destroy(uint64_t a1)
{
  return std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100](a1 + 24);
}

void std::__function::__func<mlcore::ForeignProperty<double> * mlcore::GetForeignProperty<double>(mlcore::ModelPropertyBase *,mlcore::ModelProperty<double> *,std::shared_ptr<mlcore::Predicate>)::{lambda(void)#1},std::allocator<mlcore::ForeignProperty<double> * mlcore::GetForeignProperty<double>(mlcore::ModelPropertyBase *,mlcore::ModelProperty<double> *,std::shared_ptr<mlcore::Predicate>)::{lambda(void)#1}>,mlcore::ModelPropertyBase * ()(void)>::destroy_deallocate(void *a1)
{
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 24);
  operator delete(a1);
}

uint64_t std::__function::__func<mlcore::ForeignProperty<double> * mlcore::GetForeignProperty<double>(mlcore::ModelPropertyBase *,mlcore::ModelProperty<double> *,std::shared_ptr<mlcore::Predicate>)::{lambda(void)#1},std::allocator<mlcore::ForeignProperty<double> * mlcore::GetForeignProperty<double>(mlcore::ModelPropertyBase *,mlcore::ModelProperty<double> *,std::shared_ptr<mlcore::Predicate>)::{lambda(void)#1}>,mlcore::ModelPropertyBase * ()(void)>::operator()(uint64_t a1)
{
  int v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t Foreign;
  _QWORD *v7;
  uint64_t v8;
  void *v9;
  __int128 v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int8x16_t v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  size_t v26;
  std::string *v27;
  char *v28;
  char *v29;
  char *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  const std::string::value_type *v34;
  const std::string::value_type *v35;
  int v36;
  const std::string::value_type *v37;
  std::string::size_type v38;
  std::string *v39;
  __int128 v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  std::string::size_type size;
  unint64_t *v48;
  unint64_t v49;
  std::__shared_weak_count *v50;
  uint64_t v52;
  std::string::size_type v53;
  unint64_t *v54;
  unint64_t v55;
  unint64_t *v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t *v60;
  unint64_t v61;
  unint64_t *v62;
  std::string v63;
  std::string __p;

  v2 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 88))(*(_QWORD *)(a1 + 8));
  v3 = *(_QWORD **)(a1 + 8);
  if (v2)
  {
    v4 = (*(uint64_t (**)(_QWORD))(*v3 + 120))(*(_QWORD *)(a1 + 8));
    switch((*(unsigned int (**)(uint64_t))(*(_QWORD *)v4 + 80))(v4))
    {
      case 0u:
        v5 = *(_QWORD *)(a1 + 16);
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = 0uLL;
        Foreign = mlcore::GetForeignProperty<int>(v5, v4, (uint64_t *)&__p);
        goto LABEL_51;
      case 1u:
        v42 = *(_QWORD *)(a1 + 16);
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = 0uLL;
        Foreign = mlcore::GetForeignProperty<long long>(v42, v4, (uint64_t *)&__p);
        goto LABEL_51;
      case 2u:
        v43 = *(_QWORD *)(a1 + 16);
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = 0uLL;
        Foreign = mlcore::GetForeignProperty<double>(v43, v4, (uint64_t *)&__p);
        goto LABEL_51;
      case 3u:
        v44 = *(_QWORD *)(a1 + 16);
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = 0uLL;
        Foreign = mlcore::GetForeignProperty<std::string>(v44, v4, (uint64_t *)&__p);
        goto LABEL_51;
      case 4u:
        v45 = *(_QWORD *)(a1 + 16);
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = 0uLL;
        Foreign = mlcore::GetForeignProperty<mediaplatform::Data>(v45, v4, (uint64_t *)&__p);
LABEL_51:
        v41 = Foreign;
        break;
      default:
        v41 = 0;
        break;
    }
    v46 = (*(uint64_t (**)(_QWORD *))(*v3 + 128))(v3);
    (*(void (**)(std::string *__return_ptr, _QWORD *))(*v3 + 136))(&v63, v3);
    v16 = mlcore::GetForeignProperty<double>(v41, v46, (uint64_t *)&v63);
    size = v63.__r_.__value_.__l.__size_;
    if (v63.__r_.__value_.__l.__size_)
    {
      v48 = (unint64_t *)(v63.__r_.__value_.__l.__size_ + 8);
      do
        v49 = __ldaxr(v48);
      while (__stlxr(v49 - 1, v48));
      if (!v49)
      {
        (*(void (**)(std::string::size_type))(*(_QWORD *)size + 16))(size);
        v50 = (std::__shared_weak_count *)size;
LABEL_57:
        std::__shared_weak_count::__release_weak(v50);
      }
    }
  }
  else
  {
    v7 = *(_QWORD **)(a1 + 16);
    if (v7)
    {
      v8 = v3[1];
      if ((*(unsigned int (**)(_QWORD))(*v7 + 88))(*(_QWORD *)(a1 + 16)))
      {
        while (1)
        {
          (*(void (**)(std::string *__return_ptr))(*(_QWORD *)v9 + 32))(&__p);
          v10 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
          if (__p.__r_.__value_.__l.__size_)
          {
            v11 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
            do
              v12 = __ldaxr(v11);
            while (__stlxr(v12 - 1, v11));
            if (!v12)
            {
              (*(void (**)(_QWORD))(**((_QWORD **)&v10 + 1) + 16))(*((_QWORD *)&v10 + 1));
              std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v10 + 1));
            }
          }
          if ((_QWORD)v10)
            goto LABEL_17;
          v13 = v7[1];
          v14 = (*(uint64_t (**)(void *))(*(_QWORD *)v9 + 16))(v9);
          v7 = (_QWORD *)v14;
          if (v13 == v8)
            break;
          if (!v14)
            goto LABEL_17;
          if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 88))(v14) & 1) == 0 && v7[1] == v8)
          {
            v58 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 112))(v8);
            v59 = *(_QWORD *)(a1 + 8);
            v53 = *(_QWORD *)(a1 + 32);
            __p.__r_.__value_.__r.__words[0] = *(_QWORD *)(a1 + 24);
            __p.__r_.__value_.__l.__size_ = v53;
            if (v53)
            {
              v60 = (unint64_t *)(v53 + 8);
              do
                v61 = __ldxr(v60);
              while (__stxr(v61 + 1, v60));
            }
            v16 = mlcore::GetForeignProperty<double>(v58, v59, (uint64_t *)&__p);
            if (!v53)
              return v16;
            v62 = (unint64_t *)(v53 + 8);
            do
              v57 = __ldaxr(v62);
            while (__stlxr(v57 - 1, v62));
LABEL_72:
            if (v57)
              return v16;
            (*(void (**)(std::string::size_type))(*(_QWORD *)v53 + 16))(v53);
            v50 = (std::__shared_weak_count *)v53;
            goto LABEL_57;
          }
          if (((*(uint64_t (**)(_QWORD *))(*v7 + 88))(v7) & 1) == 0)
            goto LABEL_17;
        }
        v52 = *(_QWORD *)(a1 + 8);
        v53 = *(_QWORD *)(a1 + 32);
        __p.__r_.__value_.__r.__words[0] = *(_QWORD *)(a1 + 24);
        __p.__r_.__value_.__l.__size_ = v53;
        if (v53)
        {
          v54 = (unint64_t *)(v53 + 8);
          do
            v55 = __ldxr(v54);
          while (__stxr(v55 + 1, v54));
        }
        v16 = mlcore::GetForeignProperty<double>(v14, v52, (uint64_t *)&__p);
        if (!v53)
          return v16;
        v56 = (unint64_t *)(v53 + 8);
        do
          v57 = __ldaxr(v56);
        while (__stlxr(v57 - 1, v56));
        goto LABEL_72;
      }
    }
LABEL_17:
    v15 = operator new();
    v16 = v15;
    v17 = *(int8x16_t *)(a1 + 8);
    v18 = *(_QWORD *)(a1 + 24);
    v19 = *(std::__shared_weak_count **)(a1 + 32);
    if (v19)
    {
      p_shared_owners = (unint64_t *)&v19->__shared_owners_;
      do
        v21 = __ldxr(p_shared_owners);
      while (__stxr(v21 + 1, p_shared_owners));
    }
    *(_OWORD *)(v15 + 32) = 0u;
    *(_OWORD *)(v15 + 48) = 0u;
    *(_OWORD *)(v15 + 16) = 0u;
    *(_QWORD *)v15 = &off_24C337D18;
    *(_QWORD *)(v15 + 64) = &unk_24C337DB8;
    *(int8x16_t *)(v15 + 72) = vextq_s8(v17, v17, 8uLL);
    *(_QWORD *)(v15 + 88) = v18;
    *(_QWORD *)(v15 + 96) = v19;
    if (v19)
    {
      v22 = (unint64_t *)&v19->__shared_owners_;
      do
        v23 = __ldxr(v22);
      while (__stxr(v23 + 1, v22));
      do
        v24 = __ldaxr(v22);
      while (__stlxr(v24 - 1, v22));
      if (!v24)
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
    }
    v25 = *(_QWORD *)(a1 + 16);
    if (*(char *)(v25 + 39) >= 0)
      v26 = *(unsigned __int8 *)(v25 + 39);
    else
      v26 = *(_QWORD *)(v25 + 24);
    v27 = &v63;
    std::string::basic_string[abi:ne180100]((uint64_t)&v63, v26 + 2);
    if ((v63.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v27 = (std::string *)v63.__r_.__value_.__r.__words[0];
    if (v26)
    {
      v30 = *(char **)(v25 + 16);
      v29 = (char *)(v25 + 16);
      v28 = v30;
      if (v29[23] >= 0)
        v31 = v29;
      else
        v31 = v28;
      memmove(v27, v31, v26);
    }
    strcpy((char *)v27 + v26, "->");
    v32 = *(_QWORD *)(a1 + 8);
    v35 = *(const std::string::value_type **)(v32 + 16);
    v33 = v32 + 16;
    v34 = v35;
    v36 = *(char *)(v33 + 23);
    if (v36 >= 0)
      v37 = (const std::string::value_type *)v33;
    else
      v37 = v34;
    if (v36 >= 0)
      v38 = *(unsigned __int8 *)(v33 + 23);
    else
      v38 = *(_QWORD *)(v33 + 8);
    v39 = std::string::append(&v63, v37, v38);
    v40 = *(_OWORD *)&v39->__r_.__value_.__l.__data_;
    __p.__r_.__value_.__r.__words[2] = v39->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v40;
    v39->__r_.__value_.__l.__size_ = 0;
    v39->__r_.__value_.__r.__words[2] = 0;
    v39->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v63.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v63.__r_.__value_.__l.__data_);
    mlcore::EntityClass::setPropertyForName(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 8), v16, &__p);
    *(_QWORD *)(v16 + 8) = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  return v16;
}

void sub_20A75FD18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  std::__shared_weak_count *v21;
  unint64_t *p_shared_owners;
  unint64_t v24;

  if (v21)
  {
    p_shared_owners = (unint64_t *)&v21->__shared_owners_;
    do
      v24 = __ldaxr(p_shared_owners);
    while (__stlxr(v24 - 1, p_shared_owners));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<mlcore::ForeignProperty<double> * mlcore::GetForeignProperty<double>(mlcore::ModelPropertyBase *,mlcore::ModelProperty<double> *,std::shared_ptr<mlcore::Predicate>)::{lambda(void)#1},std::allocator<mlcore::ForeignProperty<double> * mlcore::GetForeignProperty<double>(mlcore::ModelPropertyBase *,mlcore::ModelProperty<double> *,std::shared_ptr<mlcore::Predicate>)::{lambda(void)#1}>,mlcore::ModelPropertyBase * ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), 0x800000020A9211B5))
    return a1 + 8;
  else
    return 0;
}

void *std::__function::__func<mlcore::ForeignProperty<double> * mlcore::GetForeignProperty<double>(mlcore::ModelPropertyBase *,mlcore::ModelProperty<double> *,std::shared_ptr<mlcore::Predicate>)::{lambda(void)#1},std::allocator<mlcore::ForeignProperty<double> * mlcore::GetForeignProperty<double>(mlcore::ModelPropertyBase *,mlcore::ModelProperty<double> *,std::shared_ptr<mlcore::Predicate>)::{lambda(void)#1}>,mlcore::ModelPropertyBase * ()(void)>::target_type()
{
}

void mlcore::ForeignProperty<double>::~ForeignProperty(uint64_t a1)
{
  *(_QWORD *)a1 = &off_24C337D18;
  *(_QWORD *)(a1 + 64) = &unk_24C337DB8;
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100](a1 + 88);
  mlcore::ModelPropertyBase::~ModelPropertyBase((void **)a1);
}

{
  *(_QWORD *)a1 = &off_24C337D18;
  *(_QWORD *)(a1 + 64) = &unk_24C337DB8;
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100](a1 + 88);
  mlcore::ModelPropertyBase::~ModelPropertyBase((void **)a1);
  JUMPOUT(0x20BD27AFCLL);
}

void mlcore::ForeignProperty<double>::description(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  std::string *v4;
  __int128 v5;
  void **v6;
  std::string::size_type v7;
  std::string *v8;
  void *__p[2];
  unsigned __int8 v10;
  std::string v11;
  std::string v12;

  (*(void (**)(std::string *__return_ptr))(**(_QWORD **)(a1 + 72) + 40))(&v11);
  v4 = std::string::append(&v11, "->");
  v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  v12.__r_.__value_.__r.__words[2] = v4->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v12.__r_.__value_.__l.__data_ = v5;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  (*(void (**)(void **__return_ptr))(**(_QWORD **)(a1 + 80) + 40))(__p);
  if ((v10 & 0x80u) == 0)
    v6 = __p;
  else
    v6 = (void **)__p[0];
  if ((v10 & 0x80u) == 0)
    v7 = v10;
  else
    v7 = (std::string::size_type)__p[1];
  v8 = std::string::append(&v12, (const std::string::value_type *)v6, v7);
  *a2 = *v8;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  if ((char)v10 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v12.__r_.__value_.__l.__data_);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
}

void sub_20A75FF9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a14 < 0)
    operator delete(__p);
  if (a26 < 0)
    operator delete(a21);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t mlcore::ModelProperty<double>::compareValuesFromCaches(unint64_t a1, uint64_t a2, uint64_t a3)
{
  double v5;
  double v6;

  v5 = mlcore::PropertyCacheBase<double,std::string,mediaplatform::Data>::valueForProperty(a2, a1);
  v6 = mlcore::PropertyCacheBase<double,std::string,mediaplatform::Data>::valueForProperty(a3, a1);
  if (v5 < v6)
    return 0xFFFFFFFFLL;
  else
    return v6 < v5;
}

uint64_t mlcore::ForeignProperty<double>::databaseTables(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 80) + 64))(*(_QWORD *)(a1 + 80));
}

uint64_t mlcore::ForeignProperty<double>::databaseColumn(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 80) + 72))(*(_QWORD *)(a1 + 80));
}

uint64_t mlcore::ForeignProperty<double>::propertyType(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 80) + 80))(*(_QWORD *)(a1 + 80));
}

uint64_t mlcore::ForeignProperty<double>::isForeignProperty()
{
  return 1;
}

uint64_t mlcore::ModelProperty<double>::compareCongruentPropertyValuesFromCaches(unint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  double v6;
  double v7;

  v6 = mlcore::PropertyCacheBase<double,std::string,mediaplatform::Data>::valueForProperty(a2, a1);
  v7 = mlcore::PropertyCacheBase<double,std::string,mediaplatform::Data>::valueForProperty(a4, a3);
  if (v6 < v7)
    return 0xFFFFFFFFLL;
  else
    return v7 < v6;
}

uint64_t mlcore::ForeignProperty<double>::baseProperty(uint64_t a1)
{
  return *(_QWORD *)(a1 + 72);
}

uint64_t mlcore::ForeignProperty<double>::foreignProperty(uint64_t a1)
{
  return *(_QWORD *)(a1 + 80);
}

uint64_t mlcore::ForeignProperty<double>::predicate@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(result + 96);
  *a2 = *(_QWORD *)(result + 88);
  a2[1] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void `non-virtual thunk to'mlcore::ForeignProperty<double>::~ForeignProperty(_QWORD *a1)
{
  void **v1;

  *(a1 - 8) = &off_24C337D18;
  v1 = (void **)(a1 - 8);
  *a1 = &unk_24C337DB8;
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 3));
  mlcore::ModelPropertyBase::~ModelPropertyBase(v1);
}

{
  void **v1;

  *(a1 - 8) = &off_24C337D18;
  v1 = (void **)(a1 - 8);
  *a1 = &unk_24C337DB8;
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 3));
  mlcore::ModelPropertyBase::~ModelPropertyBase(v1);
  JUMPOUT(0x20BD27AFCLL);
}

uint64_t `non-virtual thunk to'mlcore::ForeignProperty<double>::baseProperty(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8);
}

uint64_t `non-virtual thunk to'mlcore::ForeignProperty<double>::foreignProperty(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16);
}

uint64_t `non-virtual thunk to'mlcore::ForeignProperty<double>::predicate@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(result + 32);
  *a2 = *(_QWORD *)(result + 24);
  a2[1] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

_QWORD *std::__function::__func<mlcore::ForeignProperty<long long> * mlcore::GetForeignProperty<long long>(mlcore::ModelPropertyBase *,mlcore::ModelProperty<long long> *,std::shared_ptr<mlcore::Predicate>)::{lambda(void)#1},std::allocator<mlcore::ForeignProperty<long long> * mlcore::GetForeignProperty<long long>(mlcore::ModelPropertyBase *,mlcore::ModelProperty<long long> *,std::shared_ptr<mlcore::Predicate>)::{lambda(void)#1}>,mlcore::ModelPropertyBase * ()(void)>::~__func(_QWORD *a1)
{
  *a1 = &off_24C33B508;
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 3));
  return a1;
}

void std::__function::__func<mlcore::ForeignProperty<long long> * mlcore::GetForeignProperty<long long>(mlcore::ModelPropertyBase *,mlcore::ModelProperty<long long> *,std::shared_ptr<mlcore::Predicate>)::{lambda(void)#1},std::allocator<mlcore::ForeignProperty<long long> * mlcore::GetForeignProperty<long long>(mlcore::ModelPropertyBase *,mlcore::ModelProperty<long long> *,std::shared_ptr<mlcore::Predicate>)::{lambda(void)#1}>,mlcore::ModelPropertyBase * ()(void)>::~__func(_QWORD *a1)
{
  *a1 = &off_24C33B508;
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 3));
  JUMPOUT(0x20BD27AFCLL);
}

char *std::__function::__func<mlcore::ForeignProperty<long long> * mlcore::GetForeignProperty<long long>(mlcore::ModelPropertyBase *,mlcore::ModelProperty<long long> *,std::shared_ptr<mlcore::Predicate>)::{lambda(void)#1},std::allocator<mlcore::ForeignProperty<long long> * mlcore::GetForeignProperty<long long>(mlcore::ModelPropertyBase *,mlcore::ModelProperty<long long> *,std::shared_ptr<mlcore::Predicate>)::{lambda(void)#1}>,mlcore::ModelPropertyBase * ()(void)>::__clone(uint64_t a1)
{
  char *result;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  result = (char *)operator new(0x28uLL);
  *(_QWORD *)result = &off_24C33B508;
  *(_OWORD *)(result + 8) = *(_OWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 32);
  *((_QWORD *)result + 3) = *(_QWORD *)(a1 + 24);
  *((_QWORD *)result + 4) = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

uint64_t std::__function::__func<mlcore::ForeignProperty<long long> * mlcore::GetForeignProperty<long long>(mlcore::ModelPropertyBase *,mlcore::ModelProperty<long long> *,std::shared_ptr<mlcore::Predicate>)::{lambda(void)#1},std::allocator<mlcore::ForeignProperty<long long> * mlcore::GetForeignProperty<long long>(mlcore::ModelPropertyBase *,mlcore::ModelProperty<long long> *,std::shared_ptr<mlcore::Predicate>)::{lambda(void)#1}>,mlcore::ModelPropertyBase * ()(void)>::__clone(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  *(_QWORD *)a2 = &off_24C33B508;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 32);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(result + 24);
  *(_QWORD *)(a2 + 32) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

uint64_t std::__function::__func<mlcore::ForeignProperty<long long> * mlcore::GetForeignProperty<long long>(mlcore::ModelPropertyBase *,mlcore::ModelProperty<long long> *,std::shared_ptr<mlcore::Predicate>)::{lambda(void)#1},std::allocator<mlcore::ForeignProperty<long long> * mlcore::GetForeignProperty<long long>(mlcore::ModelPropertyBase *,mlcore::ModelProperty<long long> *,std::shared_ptr<mlcore::Predicate>)::{lambda(void)#1}>,mlcore::ModelPropertyBase * ()(void)>::destroy(uint64_t a1)
{
  return std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100](a1 + 24);
}

uint64_t std::__function::__func<mlcore::ForeignProperty<long long> * mlcore::GetForeignProperty<long long>(mlcore::ModelPropertyBase *,mlcore::ModelProperty<long long> *,std::shared_ptr<mlcore::Predicate>)::{lambda(void)#1},std::allocator<mlcore::ForeignProperty<long long> * mlcore::GetForeignProperty<long long>(mlcore::ModelPropertyBase *,mlcore::ModelProperty<long long> *,std::shared_ptr<mlcore::Predicate>)::{lambda(void)#1}>,mlcore::ModelPropertyBase * ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), 0x800000020A921033))
    return a1 + 8;
  else
    return 0;
}

void *std::__function::__func<mlcore::ForeignProperty<long long> * mlcore::GetForeignProperty<long long>(mlcore::ModelPropertyBase *,mlcore::ModelProperty<long long> *,std::shared_ptr<mlcore::Predicate>)::{lambda(void)#1},std::allocator<mlcore::ForeignProperty<long long> * mlcore::GetForeignProperty<long long>(mlcore::ModelPropertyBase *,mlcore::ModelProperty<long long> *,std::shared_ptr<mlcore::Predicate>)::{lambda(void)#1}>,mlcore::ModelPropertyBase * ()(void)>::target_type()
{
}

void mlcore::ForeignProperty<long long>::~ForeignProperty(uint64_t a1)
{
  *(_QWORD *)a1 = &off_24C337EC8;
  *(_QWORD *)(a1 + 64) = &unk_24C337F68;
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100](a1 + 88);
  mlcore::ModelPropertyBase::~ModelPropertyBase((void **)a1);
}

{
  *(_QWORD *)a1 = &off_24C337EC8;
  *(_QWORD *)(a1 + 64) = &unk_24C337F68;
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100](a1 + 88);
  mlcore::ModelPropertyBase::~ModelPropertyBase((void **)a1);
  JUMPOUT(0x20BD27AFCLL);
}

void mlcore::ForeignProperty<long long>::description(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  std::string *v4;
  __int128 v5;
  void **v6;
  std::string::size_type v7;
  std::string *v8;
  void *__p[2];
  unsigned __int8 v10;
  std::string v11;
  std::string v12;

  (*(void (**)(std::string *__return_ptr))(**(_QWORD **)(a1 + 72) + 40))(&v11);
  v4 = std::string::append(&v11, "->");
  v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  v12.__r_.__value_.__r.__words[2] = v4->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v12.__r_.__value_.__l.__data_ = v5;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  (*(void (**)(void **__return_ptr))(**(_QWORD **)(a1 + 80) + 40))(__p);
  if ((v10 & 0x80u) == 0)
    v6 = __p;
  else
    v6 = (void **)__p[0];
  if ((v10 & 0x80u) == 0)
    v7 = v10;
  else
    v7 = (std::string::size_type)__p[1];
  v8 = std::string::append(&v12, (const std::string::value_type *)v6, v7);
  *a2 = *v8;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  if ((char)v10 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v12.__r_.__value_.__l.__data_);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
}

void sub_20A76047C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a14 < 0)
    operator delete(__p);
  if (a26 < 0)
    operator delete(a21);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t mlcore::ModelProperty<long long>::compareValuesFromCaches(unint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;

  v5 = mlcore::PropertyCacheBase<long long,int,double,std::string,mediaplatform::Data>::valueForProperty(a2, a1);
  v6 = mlcore::PropertyCacheBase<long long,int,double,std::string,mediaplatform::Data>::valueForProperty(a3, a1);
  if (v5 < v6)
    return 0xFFFFFFFFLL;
  else
    return v6 < v5;
}

uint64_t mlcore::ForeignProperty<long long>::databaseTables(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 80) + 64))(*(_QWORD *)(a1 + 80));
}

uint64_t mlcore::ForeignProperty<long long>::databaseColumn(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 80) + 72))(*(_QWORD *)(a1 + 80));
}

uint64_t mlcore::ForeignProperty<long long>::propertyType(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 80) + 80))(*(_QWORD *)(a1 + 80));
}

uint64_t mlcore::ForeignProperty<long long>::isForeignProperty()
{
  return 1;
}

uint64_t mlcore::ForeignProperty<long long>::baseProperty(uint64_t a1)
{
  return *(_QWORD *)(a1 + 72);
}

uint64_t mlcore::ForeignProperty<long long>::foreignProperty(uint64_t a1)
{
  return *(_QWORD *)(a1 + 80);
}

uint64_t mlcore::ForeignProperty<long long>::predicate@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(result + 96);
  *a2 = *(_QWORD *)(result + 88);
  a2[1] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void `non-virtual thunk to'mlcore::ForeignProperty<long long>::~ForeignProperty(_QWORD *a1)
{
  void **v1;

  *(a1 - 8) = &off_24C337EC8;
  v1 = (void **)(a1 - 8);
  *a1 = &unk_24C337F68;
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 3));
  mlcore::ModelPropertyBase::~ModelPropertyBase(v1);
}

{
  void **v1;

  *(a1 - 8) = &off_24C337EC8;
  v1 = (void **)(a1 - 8);
  *a1 = &unk_24C337F68;
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 3));
  mlcore::ModelPropertyBase::~ModelPropertyBase(v1);
  JUMPOUT(0x20BD27AFCLL);
}

uint64_t `non-virtual thunk to'mlcore::ForeignProperty<long long>::baseProperty(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8);
}

uint64_t `non-virtual thunk to'mlcore::ForeignProperty<long long>::foreignProperty(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16);
}

uint64_t `non-virtual thunk to'mlcore::ForeignProperty<long long>::predicate@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(result + 32);
  *a2 = *(_QWORD *)(result + 24);
  a2[1] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

_QWORD *std::__function::__func<mlcore::ForeignProperty<int> * mlcore::GetForeignProperty<int>(mlcore::ModelPropertyBase *,mlcore::ModelProperty<int> *,std::shared_ptr<mlcore::Predicate>)::{lambda(void)#1},std::allocator<mlcore::ForeignProperty<int> * mlcore::GetForeignProperty<int>(mlcore::ModelPropertyBase *,mlcore::ModelProperty<int> *,std::shared_ptr<mlcore::Predicate>)::{lambda(void)#1}>,mlcore::ModelPropertyBase * ()(void)>::~__func(_QWORD *a1)
{
  *a1 = &off_24C33B4B0;
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 3));
  return a1;
}

void std::__function::__func<mlcore::ForeignProperty<int> * mlcore::GetForeignProperty<int>(mlcore::ModelPropertyBase *,mlcore::ModelProperty<int> *,std::shared_ptr<mlcore::Predicate>)::{lambda(void)#1},std::allocator<mlcore::ForeignProperty<int> * mlcore::GetForeignProperty<int>(mlcore::ModelPropertyBase *,mlcore::ModelProperty<int> *,std::shared_ptr<mlcore::Predicate>)::{lambda(void)#1}>,mlcore::ModelPropertyBase * ()(void)>::~__func(_QWORD *a1)
{
  *a1 = &off_24C33B4B0;
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 3));
  JUMPOUT(0x20BD27AFCLL);
}

char *std::__function::__func<mlcore::ForeignProperty<int> * mlcore::GetForeignProperty<int>(mlcore::ModelPropertyBase *,mlcore::ModelProperty<int> *,std::shared_ptr<mlcore::Predicate>)::{lambda(void)#1},std::allocator<mlcore::ForeignProperty<int> * mlcore::GetForeignProperty<int>(mlcore::ModelPropertyBase *,mlcore::ModelProperty<int> *,std::shared_ptr<mlcore::Predicate>)::{lambda(void)#1}>,mlcore::ModelPropertyBase * ()(void)>::__clone(uint64_t a1)
{
  char *result;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  result = (char *)operator new(0x28uLL);
  *(_QWORD *)result = &off_24C33B4B0;
  *(_OWORD *)(result + 8) = *(_OWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 32);
  *((_QWORD *)result + 3) = *(_QWORD *)(a1 + 24);
  *((_QWORD *)result + 4) = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

uint64_t std::__function::__func<mlcore::ForeignProperty<int> * mlcore::GetForeignProperty<int>(mlcore::ModelPropertyBase *,mlcore::ModelProperty<int> *,std::shared_ptr<mlcore::Predicate>)::{lambda(void)#1},std::allocator<mlcore::ForeignProperty<int> * mlcore::GetForeignProperty<int>(mlcore::ModelPropertyBase *,mlcore::ModelProperty<int> *,std::shared_ptr<mlcore::Predicate>)::{lambda(void)#1}>,mlcore::ModelPropertyBase * ()(void)>::__clone(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  *(_QWORD *)a2 = &off_24C33B4B0;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 32);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(result + 24);
  *(_QWORD *)(a2 + 32) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

uint64_t std::__function::__func<mlcore::ForeignProperty<int> * mlcore::GetForeignProperty<int>(mlcore::ModelPropertyBase *,mlcore::ModelProperty<int> *,std::shared_ptr<mlcore::Predicate>)::{lambda(void)#1},std::allocator<mlcore::ForeignProperty<int> * mlcore::GetForeignProperty<int>(mlcore::ModelPropertyBase *,mlcore::ModelProperty<int> *,std::shared_ptr<mlcore::Predicate>)::{lambda(void)#1}>,mlcore::ModelPropertyBase * ()(void)>::destroy(uint64_t a1)
{
  return std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100](a1 + 24);
}

uint64_t std::__function::__func<mlcore::ForeignProperty<int> * mlcore::GetForeignProperty<int>(mlcore::ModelPropertyBase *,mlcore::ModelProperty<int> *,std::shared_ptr<mlcore::Predicate>)::{lambda(void)#1},std::allocator<mlcore::ForeignProperty<int> * mlcore::GetForeignProperty<int>(mlcore::ModelPropertyBase *,mlcore::ModelProperty<int> *,std::shared_ptr<mlcore::Predicate>)::{lambda(void)#1}>,mlcore::ModelPropertyBase * ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), 0x800000020A921658))
    return a1 + 8;
  else
    return 0;
}

void *std::__function::__func<mlcore::ForeignProperty<int> * mlcore::GetForeignProperty<int>(mlcore::ModelPropertyBase *,mlcore::ModelProperty<int> *,std::shared_ptr<mlcore::Predicate>)::{lambda(void)#1},std::allocator<mlcore::ForeignProperty<int> * mlcore::GetForeignProperty<int>(mlcore::ModelPropertyBase *,mlcore::ModelProperty<int> *,std::shared_ptr<mlcore::Predicate>)::{lambda(void)#1}>,mlcore::ModelPropertyBase * ()(void)>::target_type()
{
}

void mlcore::ForeignProperty<int>::~ForeignProperty(uint64_t a1)
{
  *(_QWORD *)a1 = &off_24C337DF0;
  *(_QWORD *)(a1 + 64) = &unk_24C337E90;
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100](a1 + 88);
  mlcore::ModelPropertyBase::~ModelPropertyBase((void **)a1);
}

{
  *(_QWORD *)a1 = &off_24C337DF0;
  *(_QWORD *)(a1 + 64) = &unk_24C337E90;
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100](a1 + 88);
  mlcore::ModelPropertyBase::~ModelPropertyBase((void **)a1);
  JUMPOUT(0x20BD27AFCLL);
}

void mlcore::ForeignProperty<int>::description(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  std::string *v4;
  __int128 v5;
  void **v6;
  std::string::size_type v7;
  std::string *v8;
  void *__p[2];
  unsigned __int8 v10;
  std::string v11;
  std::string v12;

  (*(void (**)(std::string *__return_ptr))(**(_QWORD **)(a1 + 72) + 40))(&v11);
  v4 = std::string::append(&v11, "->");
  v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  v12.__r_.__value_.__r.__words[2] = v4->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v12.__r_.__value_.__l.__data_ = v5;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  (*(void (**)(void **__return_ptr))(**(_QWORD **)(a1 + 80) + 40))(__p);
  if ((v10 & 0x80u) == 0)
    v6 = __p;
  else
    v6 = (void **)__p[0];
  if ((v10 & 0x80u) == 0)
    v7 = v10;
  else
    v7 = (std::string::size_type)__p[1];
  v8 = std::string::append(&v12, (const std::string::value_type *)v6, v7);
  *a2 = *v8;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  if ((char)v10 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v12.__r_.__value_.__l.__data_);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
}

void sub_20A760904(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a14 < 0)
    operator delete(__p);
  if (a26 < 0)
    operator delete(a21);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t mlcore::ModelProperty<int>::compareValuesFromCaches(unint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5;
  int v6;

  v5 = mlcore::PropertyCacheBase<int,double,std::string,mediaplatform::Data>::valueForProperty(a2, a1);
  v6 = mlcore::PropertyCacheBase<int,double,std::string,mediaplatform::Data>::valueForProperty(a3, a1);
  if (v5 < v6)
    return 0xFFFFFFFFLL;
  else
    return v6 < v5;
}

uint64_t mlcore::ModelProperty<int>::compareCongruentPropertyValuesFromCaches(unint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  int v6;
  int v7;

  v6 = mlcore::PropertyCacheBase<int,double,std::string,mediaplatform::Data>::valueForProperty(a2, a1);
  v7 = mlcore::PropertyCacheBase<int,double,std::string,mediaplatform::Data>::valueForProperty(a4, a3);
  if (v6 < v7)
    return 0xFFFFFFFFLL;
  else
    return v7 < v6;
}

void `non-virtual thunk to'mlcore::ForeignProperty<int>::~ForeignProperty(_QWORD *a1)
{
  void **v1;

  *(a1 - 8) = &off_24C337DF0;
  v1 = (void **)(a1 - 8);
  *a1 = &unk_24C337E90;
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 3));
  mlcore::ModelPropertyBase::~ModelPropertyBase(v1);
}

{
  void **v1;

  *(a1 - 8) = &off_24C337DF0;
  v1 = (void **)(a1 - 8);
  *a1 = &unk_24C337E90;
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 3));
  mlcore::ModelPropertyBase::~ModelPropertyBase(v1);
  JUMPOUT(0x20BD27AFCLL);
}

void mediaplatform::FormatImplementation<int>(std::string *a1, std::string *a2, std::string::size_type a3, int **a4)
{
  char v8;
  char *v9;
  std::string::size_type i;
  int v11;
  char *v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  char *v17;
  int v18;
  uint64_t v19;
  char *v20;
  char *v21;
  unsigned __int8 *v22;
  int v23;
  std::runtime_error *exception;
  char v25[8];
  uint64_t v26;
  char v27;
  unint64_t v28;
  char *v29;
  uint64_t v30[6];
  char v31;
  uint64_t v32;

  v8 = 0;
  v32 = *MEMORY[0x24BDAC8D0];
  v9 = (char *)a1;
  for (i = a3; ; ++i)
  {
    v29 = v9;
    if (*v9 == 123)
      break;
    if (!*v9)
    {
      std::string::resize(a2, i, 0);
      if (i != a3)
        mediaplatform::CopyFormatSectionToResult(a1, a2, a3, i - a3, v8 & 1);
      return;
    }
LABEL_7:
    ++v9;
  }
  v11 = v9[1];
  if (v11 == 123)
  {
    v29 = v9 + 1;
    v8 = 1;
    ++v9;
    goto LABEL_7;
  }
  if (v11 == 42)
  {
    v29 = v9 + 2;
    v18 = v9[2];
    if ((v18 - 48) > 9)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Invalid format string- missing numeric value.");
    }
    else
    {
      v19 = 0;
      v20 = v9 + 3;
      do
      {
        v21 = v20;
        v29 = v20;
        v19 = (v18 - 48) + 10 * v19;
        ++v20;
        v23 = *v21;
        v22 = (unsigned __int8 *)(v21 - 1);
        v18 = v23;
      }
      while ((v23 - 58) >= 0xFFFFFFF6);
      v29 = (char *)(v22 + 2);
      if (*(v20 - 1) == 125)
        mediaplatform::FormatterParameters<0ul,int>::formatOptionsAtIndex<int>(v19);
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Invalid format options reference: Must be of form {*<index>} but no trailing '}' found.");
    }
    __cxa_throw(exception, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
  }
  mediaplatform::FormatOptions::FormatOptions((uint64_t)v25, (const char **)&v29);
  if (v26)
    mediaplatform::FormatterParameters<1ul>::formatParameterAtIndex<mediaplatform::FormatterParameters<0ul,int>>();
  v12 = v29;
  mediaplatform::TypeFormatter<int,void>::TypeFormatter((uint64_t)v30, **a4, (uint64_t)v25);
  if (v31 && !*(_BYTE *)(v30[0] + 48))
    v13 = 32;
  else
    v13 = 33;
  v14 = v13 - v30[5];
  if (*(_BYTE *)(v30[0] + 50) && v14 <= *(_QWORD *)(v30[0] + 24))
    v14 = *(_QWORD *)(v30[0] + 24);
  v15 = v28;
  if (v28 <= v14)
    v15 = v14;
  if (v27)
    v16 = v15;
  else
    v16 = v14;
  mediaplatform::FormatImplementation<int>(v12, a2, v16 + i, a4);
  if ((a2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v17 = (char *)a2;
  else
    v17 = (char *)a2->__r_.__value_.__r.__words[0];
  mediaplatform::FormatOptions::justifyNativeValueOfLength<std::__wrap_iter<char *>,int>(v25, &v17[i], v30);
  if (i != a3)
    mediaplatform::CopyFormatSectionToResult(a1, a2, a3, i - a3, v8 & 1);
}

void sub_20A760D28(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void mediaplatform::FormatterParameters<0ul,int>::formatOptionsAtIndex<int>(uint64_t a1)
{
  std::runtime_error *exception;

  if (!a1)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Requested parameter is not an FormatOptions instance.");
    __cxa_throw(exception, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
  }
  mediaplatform::FormatterParameters<1ul>::formatOptionsAtIndex<int>();
}

void sub_20A760D8C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void mediaplatform::FormatterParameters<1ul>::formatParameterAtIndex<mediaplatform::FormatterParameters<0ul,int>>()
{
  std::runtime_error *exception;

  exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
  std::runtime_error::runtime_error(exception, "Parameter index out of bounds.");
  __cxa_throw(exception, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
}

void sub_20A760DDC(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t mediaplatform::TypeFormatter<int,void>::TypeFormatter(uint64_t result, int a2, uint64_t a3)
{
  uint64_t v3;
  BOOL v4;
  unsigned int v5;
  _BYTE *v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;

  *(_QWORD *)result = a3;
  *(_QWORD *)(result + 40) = 0;
  *(_BYTE *)(result + 48) = a2 >= 0;
  switch(*(_DWORD *)(a3 + 4))
  {
    case 0:
      v3 = 39;
      if (a2 < 0)
      {
        do
        {
          *(_BYTE *)(result + v3) = 48 - (char)a2 % 10;
          v11 = a2 + 9;
          --v3;
          a2 /= 10;
        }
        while (v11 >= 0x13);
      }
      else
      {
        do
        {
          *(_BYTE *)(result + v3--) = (a2 % 0xAu) | 0x30;
          v4 = a2 >= 0xA;
          a2 /= 0xAu;
        }
        while (v4);
      }
      goto LABEL_26;
    case 1:
      if (a2 >= 0)
        v5 = a2;
      else
        v5 = -a2;
      v3 = 39;
      do
      {
        *(_BYTE *)(result + v3--) = v5 & 7 | 0x30;
        v4 = v5 >= 8;
        v5 >>= 3;
      }
      while (v4);
      goto LABEL_26;
    case 2:
      v6 = &mediaplatform::TypeFormatterUpperHexMapping;
      if (!*(_BYTE *)(a3 + 51))
        v6 = &mediaplatform::TypeFormatterLowerHexMapping;
      if (a2 >= 0)
        v7 = a2;
      else
        v7 = -a2;
      v8 = 39;
      do
      {
        *(_BYTE *)(result + v8--) = v6[v7 & 0xF];
        v4 = v7 >= 0x10;
        v7 >>= 4;
      }
      while (v4);
      v9 = v8 - 7;
      goto LABEL_27;
    case 3:
      if (a2 >= 0)
        v10 = a2;
      else
        v10 = -a2;
      v3 = 39;
      do
      {
        *(_BYTE *)(result + v3--) = v10 & 1 | 0x30;
        v4 = v10 >= 2;
        v10 >>= 1;
      }
      while (v4);
LABEL_26:
      v9 = v3 - 7;
LABEL_27:
      *(_QWORD *)(result + 40) = v9;
      break;
    default:
      return result;
  }
  return result;
}

char *mediaplatform::FormatOptions::justifyNativeValueOfLength<std::__wrap_iter<char *>,int>(char *result, char *a2, uint64_t *a3)
{
  char *v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  int v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  uint64_t v16;
  char *v18;

  v3 = a2;
  v4 = result;
  v5 = *a3;
  if (*((_BYTE *)a3 + 48) && !*(_BYTE *)(v5 + 48))
    v6 = 32;
  else
    v6 = 33;
  v7 = v6 - a3[5];
  if (*(_BYTE *)(v5 + 50))
  {
    v8 = *(_QWORD *)(v5 + 24);
    if (v7 <= v8)
      v7 = v8;
  }
  if (!result[16])
    return mediaplatform::TypeFormatter<unsigned int,void>::formatAtLocation<std::__wrap_iter<char *>>((char *)a3, v3);
  v9 = *((_QWORD *)result + 3);
  v10 = v9 - v7;
  if (v9 <= v7)
    return mediaplatform::TypeFormatter<unsigned int,void>::formatAtLocation<std::__wrap_iter<char *>>((char *)a3, v3);
  v11 = *(_DWORD *)result;
  if (*(_DWORD *)result)
  {
    if (v11 != 1)
    {
      if (v11 != 2)
        return result;
      if (v9 != v7)
      {
        do
        {
          *v3++ = result[52];
          --v10;
        }
        while (v10);
      }
      return mediaplatform::TypeFormatter<unsigned int,void>::formatAtLocation<std::__wrap_iter<char *>>((char *)a3, v3);
    }
    v12 = v10 >> 1;
    if (v10 >= 2)
    {
      if (v12 <= 1)
        v13 = 1;
      else
        v13 = v10 >> 1;
      do
      {
        *v3++ = result[52];
        --v13;
      }
      while (v13);
    }
    result = mediaplatform::TypeFormatter<unsigned int,void>::formatAtLocation<std::__wrap_iter<char *>>((char *)a3, v3);
    if (v10 != v12)
    {
      v14 = v10 - (v10 >> 1);
      v15 = &v3[v7];
      if (v14 <= 1)
        v14 = 1;
      v16 = -(uint64_t)v14;
      do
        *v15++ = v4[52];
      while (!__CFADD__(v16++, 1));
    }
  }
  else
  {
    result = mediaplatform::TypeFormatter<unsigned int,void>::formatAtLocation<std::__wrap_iter<char *>>((char *)a3, a2);
    if (v9 != v7)
    {
      v18 = &v3[v7];
      do
      {
        *v18++ = v4[52];
        --v10;
      }
      while (v10);
    }
  }
  return result;
}

void mediaplatform::FormatterParameters<1ul>::formatOptionsAtIndex<int>()
{
  std::runtime_error *exception;

  exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
  std::runtime_error::runtime_error(exception, "Parameter index out of bounds.");
  __cxa_throw(exception, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
}

void sub_20A7610F0(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void mlcore::SortDescriptorsForPlaylistDisplayOrder(uint64_t *a1@<X0>, int a2@<W1>, __int128 *a3@<X8>)
{
  uint64_t v6;
  unint64_t v7;
  mlcore *v8;
  uint64_t v9;
  unint64_t IsReversed;
  _BOOL4 v11;
  uint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  _QWORD v25[2];
  _QWORD v26[2];
  __int128 v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  void **v31;

  v6 = *a1;
  v7 = mlcore::PlaylistPropertyPlayOrder((mlcore *)a1);
  v8 = (mlcore *)mlcore::Entity::valueForProperty<int>(v6, v7);
  LODWORD(v6) = (_DWORD)v8;
  v9 = *a1;
  IsReversed = mlcore::PlaylistPropertyIsReversed(v8);
  v11 = mlcore::Entity::valueForProperty<int>(v9, IsReversed) != 0;
  mlcore::_sortDescriptorsFromTrackOrder((char *)&v29, v6, v11 ^ a2);
  v12 = *((_QWORD *)&v29 + 1);
  v13 = v29;
  if (*((_QWORD *)&v29 + 1) != (_QWORD)v29)
    goto LABEL_20;
  v14 = (std::__shared_weak_count *)a1[1];
  v26[0] = *a1;
  v26[1] = v14;
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldxr(p_shared_owners);
    while (__stxr(v16 + 1, p_shared_owners));
  }
  mlcore::SortDescriptorsForPlaylistLimitOrder((mlcore *)v26, a2, (char *)&v27);
  std::vector<mlcore::SortDescriptor>::__vdeallocate((void **)&v29);
  v29 = v27;
  v30 = v28;
  v28 = 0;
  v27 = 0uLL;
  v31 = (void **)&v27;
  std::vector<mlcore::SortDescriptor>::__destroy_vector::operator()[abi:ne180100](&v31);
  if (v14)
  {
    v17 = (unint64_t *)&v14->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v12 = *((_QWORD *)&v29 + 1);
  v13 = v29;
  if (*((_QWORD *)&v29 + 1) != (_QWORD)v29)
    goto LABEL_20;
  v19 = *a1;
  v20 = (std::__shared_weak_count *)a1[1];
  v25[0] = v19;
  v25[1] = v20;
  if (v20)
  {
    v21 = (unint64_t *)&v20->__shared_owners_;
    do
      v22 = __ldxr(v21);
    while (__stxr(v22 + 1, v21));
  }
  mlcore::SortDescriptorsForPlaylistEvaluationOrder((mlcore *)v25, a2, (char *)&v27);
  std::vector<mlcore::SortDescriptor>::__vdeallocate((void **)&v29);
  v29 = v27;
  v30 = v28;
  v28 = 0;
  v27 = 0uLL;
  v31 = (void **)&v27;
  std::vector<mlcore::SortDescriptor>::__destroy_vector::operator()[abi:ne180100](&v31);
  if (v20)
  {
    v23 = (unint64_t *)&v20->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  v12 = *((_QWORD *)&v29 + 1);
  v13 = v29;
  if (*((_QWORD *)&v29 + 1) != (_QWORD)v29)
  {
LABEL_20:
    *(_QWORD *)a3 = v13;
    *((_QWORD *)a3 + 1) = v12;
    *((_QWORD *)a3 + 2) = v30;
    a3 = &v29;
  }
  *(_QWORD *)a3 = 0;
  *((_QWORD *)a3 + 1) = 0;
  *((_QWORD *)a3 + 2) = 0;
  *(_QWORD *)&v27 = &v29;
  std::vector<mlcore::SortDescriptor>::__destroy_vector::operator()[abi:ne180100]((void ***)&v27);
}

void sub_20A7612F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void **a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  a13 = (void **)&a17;
  std::vector<mlcore::SortDescriptor>::__destroy_vector::operator()[abi:ne180100](&a13);
  _Unwind_Resume(a1);
}

uint64_t mlcore::Entity::valueForProperty<int>(uint64_t a1, unint64_t a2)
{
  uint64_t v3;
  std::runtime_error *exception;

  v3 = a1 + 8;
  if (!mlcore::PropertyCache::hasValueForProperty((_QWORD *)(a1 + 8), a2))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "faulting not implemented yet");
    __cxa_throw(exception, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
  }
  return mlcore::PropertyCacheBase<int,double,std::string,mediaplatform::Data>::valueForProperty(v3, a2);
}

void sub_20A76138C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

char *mlcore::_sortDescriptorsFromTrackOrder(char *this, int a2, int a3)
{
  char *v4;
  void (**v5)(mlcore::SortDescriptor *__hidden);
  mlcore *IsCompilation;
  int v7;
  void (**v8)(mlcore::SortDescriptor *__hidden);
  mlcore *v9;
  int v10;
  void (**v11)(mlcore::SortDescriptor *__hidden);
  mlcore *v12;
  int v13;
  void (**v14)(mlcore::SortDescriptor *__hidden);
  mlcore *v15;
  int v16;
  void (**v17)(mlcore::SortDescriptor *__hidden);
  mlcore *v18;
  int v19;
  void (**v20)(mlcore::SortDescriptor *__hidden);
  mlcore *v21;
  int v22;
  void (**v23)(mlcore::SortDescriptor *__hidden);
  mlcore *v24;
  int v25;
  void (**v26)(mlcore::SortDescriptor *__hidden);
  mlcore *v27;
  int v28;
  void (**v29)(mlcore::SortDescriptor *__hidden);
  mlcore *v30;
  int v31;
  void (**v32)(mlcore::SortDescriptor *__hidden);
  mlcore *v33;
  int v34;
  void (**v35)(mlcore::SortDescriptor *__hidden);
  mlcore *v36;
  int v37;
  void (**v38)(mlcore::SortDescriptor *__hidden);
  uint64_t v39;
  int v40;
  uint64_t v41;

  v41 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  v4 = this;
  switch(a2)
  {
    case 3:
      v5 = &off_24C337670;
      IsCompilation = (mlcore *)mlcore::ItemPropertyPersistentID((mlcore *)this);
      v7 = a3;
      this = std::vector<mlcore::SortDescriptor>::__assign_with_size[abi:ne180100]<mlcore::SortDescriptor const*,mlcore::SortDescriptor const*>(v4, (uint64_t)&v5, (uint64_t)&v8, 1uLL);
      break;
    case 5:
      v5 = &off_24C337670;
      IsCompilation = (mlcore *)mlcore::ItemPropertyTitleOrder((mlcore *)this);
      v7 = a3;
      v8 = &off_24C337670;
      v9 = (mlcore *)mlcore::ItemPropertyItemArtistOrder(IsCompilation);
      v10 = a3;
      v11 = &off_24C337670;
      v12 = (mlcore *)mlcore::ItemPropertyAlbumOrder(v9);
      v13 = a3;
      v14 = &off_24C337670;
      v15 = (mlcore *)mlcore::ItemPropertyDiscNumber(v12);
      v16 = a3;
      v17 = &off_24C337670;
      v18 = (mlcore *)mlcore::ItemPropertyTrackNumber(v15);
      v19 = a3;
      v20 = &off_24C337670;
      v21 = (mlcore *)mlcore::ItemPropertyTitleOrder(v18);
      v22 = a3;
      this = std::vector<mlcore::SortDescriptor>::__assign_with_size[abi:ne180100]<mlcore::SortDescriptor const*,mlcore::SortDescriptor const*>(v4, (uint64_t)&v5, (uint64_t)&v23, 6uLL);
      break;
    case 6:
    case 34:
      v5 = &off_24C337670;
      IsCompilation = (mlcore *)mlcore::ItemPropertyAlbumOrder((mlcore *)this);
      v7 = a3;
      v8 = &off_24C337670;
      v9 = (mlcore *)mlcore::ItemPropertyArtistOrder(IsCompilation);
      v10 = a3;
      v11 = &off_24C337670;
      v12 = (mlcore *)mlcore::ItemPropertyDiscNumber(v9);
      v13 = a3;
      v14 = &off_24C337670;
      v15 = (mlcore *)mlcore::ItemPropertyTrackNumber(v12);
      v16 = a3;
      v17 = &off_24C337670;
      v18 = (mlcore *)mlcore::ItemPropertyItemArtistOrder(v15);
      v19 = a3;
      v20 = &off_24C337670;
      v21 = (mlcore *)mlcore::ItemPropertyTitleOrder(v18);
      v22 = a3;
      this = std::vector<mlcore::SortDescriptor>::__assign_with_size[abi:ne180100]<mlcore::SortDescriptor const*,mlcore::SortDescriptor const*>(v4, (uint64_t)&v5, (uint64_t)&v23, 6uLL);
      break;
    case 7:
    case 32:
    case 51:
      v5 = &off_24C337670;
      IsCompilation = (mlcore *)mlcore::ItemPropertyItemArtistOrder((mlcore *)this);
      v7 = a3;
      v8 = &off_24C337670;
      v9 = (mlcore *)mlcore::ItemPropertyAlbumOrder(IsCompilation);
      v10 = a3;
      v11 = &off_24C337670;
      v12 = (mlcore *)mlcore::ItemPropertyDiscNumber(v9);
      v13 = a3;
      v14 = &off_24C337670;
      v15 = (mlcore *)mlcore::ItemPropertyTrackNumber(v12);
      v16 = a3;
      v17 = &off_24C337670;
      v18 = (mlcore *)mlcore::ItemPropertyTitleOrder(v15);
      v19 = a3;
      this = std::vector<mlcore::SortDescriptor>::__assign_with_size[abi:ne180100]<mlcore::SortDescriptor const*,mlcore::SortDescriptor const*>(v4, (uint64_t)&v5, (uint64_t)&v20, 5uLL);
      break;
    case 8:
      v5 = &off_24C337670;
      IsCompilation = (mlcore *)mlcore::ItemPropertyBitRate((mlcore *)this);
      v7 = a3;
      v8 = &off_24C337670;
      v9 = (mlcore *)mlcore::ItemPropertyTitleOrder(IsCompilation);
      v10 = a3;
      this = std::vector<mlcore::SortDescriptor>::__assign_with_size[abi:ne180100]<mlcore::SortDescriptor const*,mlcore::SortDescriptor const*>(v4, (uint64_t)&v5, (uint64_t)&v11, 2uLL);
      break;
    case 9:
    case 35:
      v5 = &off_24C337670;
      IsCompilation = (mlcore *)mlcore::ItemPropertyGenreOrder((mlcore *)this);
      v7 = a3;
      v8 = &off_24C337670;
      v9 = (mlcore *)mlcore::ItemPropertyItemArtistOrder(IsCompilation);
      v10 = a3;
      v11 = &off_24C337670;
      v12 = (mlcore *)mlcore::ItemPropertyAlbumOrder(v9);
      v13 = a3;
      v14 = &off_24C337670;
      v15 = (mlcore *)mlcore::ItemPropertyDiscNumber(v12);
      v16 = a3;
      v17 = &off_24C337670;
      v18 = (mlcore *)mlcore::ItemPropertyTrackNumber(v15);
      v19 = a3;
      v20 = &off_24C337670;
      v21 = (mlcore *)mlcore::ItemPropertyTitleOrder(v18);
      v22 = a3;
      this = std::vector<mlcore::SortDescriptor>::__assign_with_size[abi:ne180100]<mlcore::SortDescriptor const*,mlcore::SortDescriptor const*>(v4, (uint64_t)&v5, (uint64_t)&v23, 6uLL);
      break;
    case 10:
      v5 = &off_24C337670;
      IsCompilation = (mlcore *)mlcore::ItemPropertyMediaKind((mlcore *)this);
      v7 = a3;
      v8 = &off_24C337670;
      v9 = (mlcore *)mlcore::ItemPropertyTitleOrder(IsCompilation);
      v10 = a3;
      this = std::vector<mlcore::SortDescriptor>::__assign_with_size[abi:ne180100]<mlcore::SortDescriptor const*,mlcore::SortDescriptor const*>(v4, (uint64_t)&v5, (uint64_t)&v11, 2uLL);
      break;
    case 12:
      v5 = &off_24C337670;
      IsCompilation = (mlcore *)mlcore::ItemPropertyTrackNumber((mlcore *)this);
      v7 = a3;
      v8 = &off_24C337670;
      v9 = (mlcore *)mlcore::ItemPropertyAlbumOrder(IsCompilation);
      v10 = a3;
      v11 = &off_24C337670;
      v12 = (mlcore *)mlcore::ItemPropertyDiscNumber(v9);
      v13 = a3;
      v14 = &off_24C337670;
      v15 = (mlcore *)mlcore::ItemPropertyTitleOrder(v12);
      v16 = a3;
      this = std::vector<mlcore::SortDescriptor>::__assign_with_size[abi:ne180100]<mlcore::SortDescriptor const*,mlcore::SortDescriptor const*>(v4, (uint64_t)&v5, (uint64_t)&v17, 4uLL);
      break;
    case 13:
    case 14:
      v5 = &off_24C337670;
      IsCompilation = (mlcore *)mlcore::ItemPropertyFileSize((mlcore *)this);
      v7 = a3;
      v8 = &off_24C337670;
      v9 = (mlcore *)mlcore::ItemPropertyTitleOrder(IsCompilation);
      v10 = a3;
      this = std::vector<mlcore::SortDescriptor>::__assign_with_size[abi:ne180100]<mlcore::SortDescriptor const*,mlcore::SortDescriptor const*>(v4, (uint64_t)&v5, (uint64_t)&v11, 2uLL);
      break;
    case 15:
      v5 = &off_24C337670;
      IsCompilation = (mlcore *)mlcore::ItemPropertyYear((mlcore *)this);
      v7 = a3;
      v8 = &off_24C337670;
      v9 = (mlcore *)mlcore::ItemPropertyItemArtistOrder(IsCompilation);
      v10 = a3 ^ 1;
      v11 = &off_24C337670;
      v12 = (mlcore *)mlcore::ItemPropertyAlbumOrder(v9);
      v13 = a3 ^ 1;
      v14 = &off_24C337670;
      v15 = (mlcore *)mlcore::ItemPropertyDiscNumber(v12);
      v16 = a3 ^ 1;
      v17 = &off_24C337670;
      v18 = (mlcore *)mlcore::ItemPropertyTrackNumber(v15);
      v19 = a3 ^ 1;
      v20 = &off_24C337670;
      v21 = (mlcore *)mlcore::ItemPropertyTitleOrder(v18);
      v22 = a3 ^ 1;
      this = std::vector<mlcore::SortDescriptor>::__assign_with_size[abi:ne180100]<mlcore::SortDescriptor const*,mlcore::SortDescriptor const*>(v4, (uint64_t)&v5, (uint64_t)&v23, 6uLL);
      break;
    case 16:
      v5 = &off_24C337670;
      IsCompilation = (mlcore *)mlcore::ItemPropertySampleRate((mlcore *)this);
      v7 = a3;
      v8 = &off_24C337670;
      v9 = (mlcore *)mlcore::ItemPropertyTitleOrder(IsCompilation);
      v10 = a3;
      this = std::vector<mlcore::SortDescriptor>::__assign_with_size[abi:ne180100]<mlcore::SortDescriptor const*,mlcore::SortDescriptor const*>(v4, (uint64_t)&v5, (uint64_t)&v11, 2uLL);
      break;
    case 17:
      v5 = &off_24C337670;
      IsCompilation = (mlcore *)mlcore::ItemPropertyCategory((mlcore *)this);
      v7 = a3;
      v8 = &off_24C337670;
      v9 = (mlcore *)mlcore::ItemPropertyTitleOrder(IsCompilation);
      v10 = a3;
      this = std::vector<mlcore::SortDescriptor>::__assign_with_size[abi:ne180100]<mlcore::SortDescriptor const*,mlcore::SortDescriptor const*>(v4, (uint64_t)&v5, (uint64_t)&v11, 2uLL);
      break;
    case 20:
      v5 = &off_24C337670;
      IsCompilation = (mlcore *)mlcore::ItemPropertyDescription((mlcore *)this);
      v7 = a3;
      v8 = &off_24C337670;
      v9 = (mlcore *)mlcore::ItemPropertyTitleOrder(IsCompilation);
      v10 = a3;
      this = std::vector<mlcore::SortDescriptor>::__assign_with_size[abi:ne180100]<mlcore::SortDescriptor const*,mlcore::SortDescriptor const*>(v4, (uint64_t)&v5, (uint64_t)&v11, 2uLL);
      break;
    case 21:
      v5 = &off_24C337670;
      IsCompilation = (mlcore *)mlcore::ItemPropertyComment((mlcore *)this);
      v7 = a3;
      v8 = &off_24C337670;
      v9 = (mlcore *)mlcore::ItemPropertyTitleOrder(IsCompilation);
      v10 = a3;
      this = std::vector<mlcore::SortDescriptor>::__assign_with_size[abi:ne180100]<mlcore::SortDescriptor const*,mlcore::SortDescriptor const*>(v4, (uint64_t)&v5, (uint64_t)&v11, 2uLL);
      break;
    case 22:
      v5 = &off_24C337670;
      IsCompilation = (mlcore *)mlcore::ItemPropertyDateAdded((mlcore *)this);
      v7 = a3;
      v8 = &off_24C337670;
      v9 = (mlcore *)mlcore::ItemPropertyTitleOrder(IsCompilation);
      v10 = a3 ^ 1;
      this = std::vector<mlcore::SortDescriptor>::__assign_with_size[abi:ne180100]<mlcore::SortDescriptor const*,mlcore::SortDescriptor const*>(v4, (uint64_t)&v5, (uint64_t)&v11, 2uLL);
      break;
    case 23:
      v5 = &off_24C337670;
      IsCompilation = (mlcore *)mlcore::ItemPropertyEQPreset((mlcore *)this);
      v7 = a3;
      v8 = &off_24C337670;
      v9 = (mlcore *)mlcore::ItemPropertyTitleOrder(IsCompilation);
      v10 = a3;
      this = std::vector<mlcore::SortDescriptor>::__assign_with_size[abi:ne180100]<mlcore::SortDescriptor const*,mlcore::SortDescriptor const*>(v4, (uint64_t)&v5, (uint64_t)&v11, 2uLL);
      break;
    case 24:
    case 36:
      v5 = &off_24C337670;
      IsCompilation = (mlcore *)mlcore::ItemPropertyComposerOrder((mlcore *)this);
      v7 = a3;
      v8 = &off_24C337670;
      v9 = (mlcore *)mlcore::ItemPropertyAlbumOrder(IsCompilation);
      v10 = a3;
      v11 = &off_24C337670;
      v12 = (mlcore *)mlcore::ItemPropertyDiscNumber(v9);
      v13 = a3;
      v14 = &off_24C337670;
      v15 = (mlcore *)mlcore::ItemPropertyTrackNumber(v12);
      v16 = a3;
      v17 = &off_24C337670;
      v18 = (mlcore *)mlcore::ItemPropertyTitleOrder(v15);
      v19 = a3;
      this = std::vector<mlcore::SortDescriptor>::__assign_with_size[abi:ne180100]<mlcore::SortDescriptor const*,mlcore::SortDescriptor const*>(v4, (uint64_t)&v5, (uint64_t)&v20, 5uLL);
      break;
    case 25:
      v5 = &off_24C337670;
      IsCompilation = (mlcore *)mlcore::ItemPropertyVolumeNormalization((mlcore *)this);
      v7 = a3;
      v8 = &off_24C337670;
      v9 = (mlcore *)mlcore::ItemPropertyItemArtistOrder(IsCompilation);
      v10 = a3 ^ 1;
      v11 = &off_24C337670;
      v12 = (mlcore *)mlcore::ItemPropertyAlbumOrder(v9);
      v13 = a3 ^ 1;
      v14 = &off_24C337670;
      v15 = (mlcore *)mlcore::ItemPropertyDiscNumber(v12);
      v16 = a3 ^ 1;
      v17 = &off_24C337670;
      v18 = (mlcore *)mlcore::ItemPropertyTrackNumber(v15);
      v19 = a3 ^ 1;
      v20 = &off_24C337670;
      v21 = (mlcore *)mlcore::ItemPropertyTitleOrder(v18);
      v22 = a3 ^ 1;
      this = std::vector<mlcore::SortDescriptor>::__assign_with_size[abi:ne180100]<mlcore::SortDescriptor const*,mlcore::SortDescriptor const*>(v4, (uint64_t)&v5, (uint64_t)&v23, 6uLL);
      break;
    case 26:
      v5 = &off_24C337670;
      IsCompilation = (mlcore *)mlcore::ItemPropertyPlayCountUser((mlcore *)this);
      v7 = a3;
      v8 = &off_24C337670;
      v9 = (mlcore *)mlcore::ItemPropertyItemArtistOrder(IsCompilation);
      v10 = a3 ^ 1;
      v11 = &off_24C337670;
      v12 = (mlcore *)mlcore::ItemPropertyAlbumOrder(v9);
      v13 = a3 ^ 1;
      v14 = &off_24C337670;
      v15 = (mlcore *)mlcore::ItemPropertyDiscNumber(v12);
      v16 = a3 ^ 1;
      v17 = &off_24C337670;
      v18 = (mlcore *)mlcore::ItemPropertyTrackNumber(v15);
      v19 = a3 ^ 1;
      v20 = &off_24C337670;
      v21 = (mlcore *)mlcore::ItemPropertyTitleOrder(v18);
      v22 = a3 ^ 1;
      this = std::vector<mlcore::SortDescriptor>::__assign_with_size[abi:ne180100]<mlcore::SortDescriptor const*,mlcore::SortDescriptor const*>(v4, (uint64_t)&v5, (uint64_t)&v23, 6uLL);
      break;
    case 27:
      v5 = &off_24C337670;
      IsCompilation = (mlcore *)mlcore::ItemPropertyDatePlayed((mlcore *)this);
      v7 = a3;
      v8 = &off_24C337670;
      v9 = (mlcore *)mlcore::ItemPropertyItemArtistOrder(IsCompilation);
      v10 = a3 ^ 1;
      v11 = &off_24C337670;
      v12 = (mlcore *)mlcore::ItemPropertyAlbumOrder(v9);
      v13 = a3 ^ 1;
      v14 = &off_24C337670;
      v15 = (mlcore *)mlcore::ItemPropertyDiscNumber(v12);
      v16 = a3 ^ 1;
      v17 = &off_24C337670;
      v18 = (mlcore *)mlcore::ItemPropertyTrackNumber(v15);
      v19 = a3 ^ 1;
      v20 = &off_24C337670;
      v21 = (mlcore *)mlcore::ItemPropertyTitleOrder(v18);
      v22 = a3 ^ 1;
      this = std::vector<mlcore::SortDescriptor>::__assign_with_size[abi:ne180100]<mlcore::SortDescriptor const*,mlcore::SortDescriptor const*>(v4, (uint64_t)&v5, (uint64_t)&v23, 6uLL);
      break;
    case 28:
      v5 = &off_24C337670;
      IsCompilation = (mlcore *)mlcore::ItemPropertyDiscNumber((mlcore *)this);
      v7 = a3;
      v8 = &off_24C337670;
      v9 = (mlcore *)mlcore::ItemPropertyAlbumOrder(IsCompilation);
      v10 = a3;
      v11 = &off_24C337670;
      v12 = (mlcore *)mlcore::ItemPropertyTrackNumber(v9);
      v13 = a3;
      v14 = &off_24C337670;
      v15 = (mlcore *)mlcore::ItemPropertyTitleOrder(v12);
      v16 = a3;
      this = std::vector<mlcore::SortDescriptor>::__assign_with_size[abi:ne180100]<mlcore::SortDescriptor const*,mlcore::SortDescriptor const*>(v4, (uint64_t)&v5, (uint64_t)&v17, 4uLL);
      break;
    case 29:
      v5 = &off_24C337670;
      IsCompilation = (mlcore *)mlcore::ItemPropertyUserRating((mlcore *)this);
      v7 = a3;
      v8 = &off_24C337670;
      v9 = (mlcore *)mlcore::ItemPropertyItemArtistOrder(IsCompilation);
      v10 = a3 ^ 1;
      v11 = &off_24C337670;
      v12 = (mlcore *)mlcore::ItemPropertyAlbumOrder(v9);
      v13 = a3 ^ 1;
      v14 = &off_24C337670;
      v15 = (mlcore *)mlcore::ItemPropertyDiscNumber(v12);
      v16 = a3 ^ 1;
      v17 = &off_24C337670;
      v18 = (mlcore *)mlcore::ItemPropertyTrackNumber(v15);
      v19 = a3 ^ 1;
      v20 = &off_24C337670;
      v21 = (mlcore *)mlcore::ItemPropertyTitleOrder(v18);
      v22 = a3 ^ 1;
      this = std::vector<mlcore::SortDescriptor>::__assign_with_size[abi:ne180100]<mlcore::SortDescriptor const*,mlcore::SortDescriptor const*>(v4, (uint64_t)&v5, (uint64_t)&v23, 6uLL);
      break;
    case 30:
      v5 = &off_24C337670;
      IsCompilation = (mlcore *)mlcore::ItemPropertyIsCompilation((mlcore *)this);
      v7 = a3;
      v8 = &off_24C337670;
      v9 = (mlcore *)mlcore::ItemPropertyAlbumOrder(IsCompilation);
      v10 = a3 ^ 1;
      v11 = &off_24C337670;
      v12 = (mlcore *)mlcore::ItemPropertyDiscNumber(v9);
      v13 = a3 ^ 1;
      v14 = &off_24C337670;
      v15 = (mlcore *)mlcore::ItemPropertyTrackNumber(v12);
      v16 = a3 ^ 1;
      v17 = &off_24C337670;
      v18 = (mlcore *)mlcore::ItemPropertyTitleOrder(v15);
      v19 = a3 ^ 1;
      this = std::vector<mlcore::SortDescriptor>::__assign_with_size[abi:ne180100]<mlcore::SortDescriptor const*,mlcore::SortDescriptor const*>(v4, (uint64_t)&v5, (uint64_t)&v20, 5uLL);
      break;
    case 31:
      v5 = &off_24C337670;
      IsCompilation = (mlcore *)mlcore::ItemPropertyGenreOrder((mlcore *)this);
      v7 = a3;
      v8 = &off_24C337670;
      v9 = (mlcore *)mlcore::ItemPropertyIsCompilation(IsCompilation);
      v10 = a3;
      v11 = &off_24C337670;
      v12 = (mlcore *)mlcore::ItemPropertyAlbumOrder(v9);
      v13 = a3 ^ 1;
      v14 = &off_24C337670;
      v15 = (mlcore *)mlcore::ItemPropertyDiscNumber(v12);
      v16 = a3 ^ 1;
      v17 = &off_24C337670;
      v18 = (mlcore *)mlcore::ItemPropertyTrackNumber(v15);
      v19 = a3 ^ 1;
      v20 = &off_24C337670;
      v21 = (mlcore *)mlcore::ItemPropertyTitleOrder(v18);
      v22 = a3 ^ 1;
      this = std::vector<mlcore::SortDescriptor>::__assign_with_size[abi:ne180100]<mlcore::SortDescriptor const*,mlcore::SortDescriptor const*>(v4, (uint64_t)&v5, (uint64_t)&v23, 6uLL);
      break;
    case 40:
      v5 = &off_24C337670;
      IsCompilation = (mlcore *)mlcore::ItemPropertyDateReleased((mlcore *)this);
      v7 = a3;
      v8 = &off_24C337670;
      v9 = (mlcore *)mlcore::ItemPropertyAlbumOrder(IsCompilation);
      v10 = a3 ^ 1;
      v11 = &off_24C337670;
      v12 = (mlcore *)mlcore::ItemPropertyDiscNumber(v9);
      v13 = a3 ^ 1;
      v14 = &off_24C337670;
      v15 = (mlcore *)mlcore::ItemPropertyTrackNumber(v12);
      v16 = a3 ^ 1;
      v17 = &off_24C337670;
      v18 = (mlcore *)mlcore::ItemPropertyTitleOrder(v15);
      v19 = a3 ^ 1;
      this = std::vector<mlcore::SortDescriptor>::__assign_with_size[abi:ne180100]<mlcore::SortDescriptor const*,mlcore::SortDescriptor const*>(v4, (uint64_t)&v5, (uint64_t)&v20, 5uLL);
      break;
    case 41:
      v5 = &off_24C337670;
      IsCompilation = (mlcore *)mlcore::ItemPropertyBPM((mlcore *)this);
      v7 = a3;
      v8 = &off_24C337670;
      v9 = (mlcore *)mlcore::ItemPropertyItemArtistOrder(IsCompilation);
      v10 = a3 ^ 1;
      v11 = &off_24C337670;
      v12 = (mlcore *)mlcore::ItemPropertyAlbumOrder(v9);
      v13 = a3 ^ 1;
      v14 = &off_24C337670;
      v15 = (mlcore *)mlcore::ItemPropertyDiscNumber(v12);
      v16 = a3 ^ 1;
      v17 = &off_24C337670;
      v18 = (mlcore *)mlcore::ItemPropertyTrackNumber(v15);
      v19 = a3 ^ 1;
      v20 = &off_24C337670;
      v21 = (mlcore *)mlcore::ItemPropertyTitleOrder(v18);
      v22 = a3 ^ 1;
      this = std::vector<mlcore::SortDescriptor>::__assign_with_size[abi:ne180100]<mlcore::SortDescriptor const*,mlcore::SortDescriptor const*>(v4, (uint64_t)&v5, (uint64_t)&v23, 6uLL);
      break;
    case 43:
      v5 = &off_24C337670;
      IsCompilation = (mlcore *)mlcore::ItemPropertyGrouping((mlcore *)this);
      v7 = a3;
      v8 = &off_24C337670;
      v9 = (mlcore *)mlcore::ItemPropertyAlbumOrder(IsCompilation);
      v10 = a3;
      v11 = &off_24C337670;
      v12 = (mlcore *)mlcore::ItemPropertyArtistOrder(v9);
      v13 = a3;
      v14 = &off_24C337670;
      v15 = (mlcore *)mlcore::ItemPropertyDiscNumber(v12);
      v16 = a3;
      v17 = &off_24C337670;
      v18 = (mlcore *)mlcore::ItemPropertyTrackNumber(v15);
      v19 = a3;
      v20 = &off_24C337670;
      v21 = (mlcore *)mlcore::ItemPropertyItemArtistOrder(v18);
      v22 = a3;
      v23 = &off_24C337670;
      v24 = (mlcore *)mlcore::ItemPropertyTitleOrder(v21);
      v25 = a3;
      this = std::vector<mlcore::SortDescriptor>::__assign_with_size[abi:ne180100]<mlcore::SortDescriptor const*,mlcore::SortDescriptor const*>(v4, (uint64_t)&v5, (uint64_t)&v26, 7uLL);
      break;
    case 44:
      v5 = &off_24C337670;
      IsCompilation = (mlcore *)mlcore::ItemPropertySeriesNameOrder((mlcore *)this);
      v7 = a3;
      v8 = &off_24C337670;
      v9 = (mlcore *)mlcore::ItemPropertySeasonNumber(IsCompilation);
      v10 = a3;
      v11 = &off_24C337670;
      v12 = (mlcore *)mlcore::ItemPropertyEpisodeSortID(v9);
      v13 = a3;
      v14 = &off_24C337670;
      v15 = (mlcore *)mlcore::ItemPropertyEpisodeID(v12);
      v16 = a3;
      v17 = &off_24C337670;
      v18 = (mlcore *)mlcore::ItemPropertyTitleOrder(v15);
      v19 = a3;
      this = std::vector<mlcore::SortDescriptor>::__assign_with_size[abi:ne180100]<mlcore::SortDescriptor const*,mlcore::SortDescriptor const*>(v4, (uint64_t)&v5, (uint64_t)&v20, 5uLL);
      break;
    case 45:
      v5 = &off_24C337670;
      IsCompilation = (mlcore *)mlcore::ItemPropertySeasonNumber((mlcore *)this);
      v7 = a3;
      v8 = &off_24C337670;
      v9 = (mlcore *)mlcore::ItemPropertySeriesNameOrder(IsCompilation);
      v10 = a3;
      v11 = &off_24C337670;
      v12 = (mlcore *)mlcore::ItemPropertyEpisodeSortID(v9);
      v13 = a3;
      v14 = &off_24C337670;
      v15 = (mlcore *)mlcore::ItemPropertyEpisodeID(v12);
      v16 = a3;
      v17 = &off_24C337670;
      v18 = (mlcore *)mlcore::ItemPropertyTitleOrder(v15);
      v19 = a3;
      this = std::vector<mlcore::SortDescriptor>::__assign_with_size[abi:ne180100]<mlcore::SortDescriptor const*,mlcore::SortDescriptor const*>(v4, (uint64_t)&v5, (uint64_t)&v20, 5uLL);
      break;
    case 46:
      v5 = &off_24C337670;
      IsCompilation = (mlcore *)mlcore::ItemPropertyEpisodeID((mlcore *)this);
      v7 = a3;
      v8 = &off_24C337670;
      v9 = (mlcore *)mlcore::ItemPropertyTitleOrder(IsCompilation);
      v10 = a3;
      this = std::vector<mlcore::SortDescriptor>::__assign_with_size[abi:ne180100]<mlcore::SortDescriptor const*,mlcore::SortDescriptor const*>(v4, (uint64_t)&v5, (uint64_t)&v11, 2uLL);
      break;
    case 47:
      v5 = &off_24C337670;
      IsCompilation = (mlcore *)mlcore::ItemPropertyEpisodeSortID((mlcore *)this);
      v7 = a3;
      v8 = &off_24C337670;
      v9 = (mlcore *)mlcore::ItemPropertyEpisodeID(IsCompilation);
      v10 = a3;
      v11 = &off_24C337670;
      v12 = (mlcore *)mlcore::ItemPropertyTitleOrder(v9);
      v13 = a3;
      this = std::vector<mlcore::SortDescriptor>::__assign_with_size[abi:ne180100]<mlcore::SortDescriptor const*,mlcore::SortDescriptor const*>(v4, (uint64_t)&v5, (uint64_t)&v14, 3uLL);
      break;
    case 49:
      v5 = &off_24C337670;
      IsCompilation = (mlcore *)mlcore::ItemPropertySkipCountUser((mlcore *)this);
      v7 = a3;
      v8 = &off_24C337670;
      v9 = (mlcore *)mlcore::ItemPropertyItemArtistOrder(IsCompilation);
      v10 = a3 ^ 1;
      v11 = &off_24C337670;
      v12 = (mlcore *)mlcore::ItemPropertyAlbumOrder(v9);
      v13 = a3 ^ 1;
      v14 = &off_24C337670;
      v15 = (mlcore *)mlcore::ItemPropertyDiscNumber(v12);
      v16 = a3 ^ 1;
      v17 = &off_24C337670;
      v18 = (mlcore *)mlcore::ItemPropertyTrackNumber(v15);
      v19 = a3 ^ 1;
      v20 = &off_24C337670;
      v21 = (mlcore *)mlcore::ItemPropertyTitleOrder(v18);
      v22 = a3 ^ 1;
      this = std::vector<mlcore::SortDescriptor>::__assign_with_size[abi:ne180100]<mlcore::SortDescriptor const*,mlcore::SortDescriptor const*>(v4, (uint64_t)&v5, (uint64_t)&v23, 6uLL);
      break;
    case 50:
      v5 = &off_24C337670;
      IsCompilation = (mlcore *)mlcore::ItemPropertyDateSkipped((mlcore *)this);
      v7 = a3;
      v8 = &off_24C337670;
      v9 = (mlcore *)mlcore::ItemPropertyItemArtistOrder(IsCompilation);
      v10 = a3 ^ 1;
      v11 = &off_24C337670;
      v12 = (mlcore *)mlcore::ItemPropertyAlbumOrder(v9);
      v13 = a3 ^ 1;
      v14 = &off_24C337670;
      v15 = (mlcore *)mlcore::ItemPropertyDiscNumber(v12);
      v16 = a3 ^ 1;
      v17 = &off_24C337670;
      v18 = (mlcore *)mlcore::ItemPropertyTrackNumber(v15);
      v19 = a3 ^ 1;
      v20 = &off_24C337670;
      v21 = (mlcore *)mlcore::ItemPropertyTitleOrder(v18);
      v22 = a3 ^ 1;
      this = std::vector<mlcore::SortDescriptor>::__assign_with_size[abi:ne180100]<mlcore::SortDescriptor const*,mlcore::SortDescriptor const*>(v4, (uint64_t)&v5, (uint64_t)&v23, 6uLL);
      break;
    case 52:
      v5 = &off_24C337670;
      IsCompilation = (mlcore *)mlcore::ItemPropertyItemArtistOrder((mlcore *)this);
      v7 = a3;
      v8 = &off_24C337670;
      v9 = (mlcore *)mlcore::ItemPropertyYear(IsCompilation);
      v10 = a3;
      v11 = &off_24C337670;
      v12 = (mlcore *)mlcore::ItemPropertyAlbumOrder(v9);
      v13 = a3;
      v14 = &off_24C337670;
      v15 = (mlcore *)mlcore::ItemPropertyDiscNumber(v12);
      v16 = a3;
      v17 = &off_24C337670;
      v18 = (mlcore *)mlcore::ItemPropertyTrackNumber(v15);
      v19 = a3;
      v20 = &off_24C337670;
      v21 = (mlcore *)mlcore::ItemPropertyTitleOrder(v18);
      v22 = a3;
      this = std::vector<mlcore::SortDescriptor>::__assign_with_size[abi:ne180100]<mlcore::SortDescriptor const*,mlcore::SortDescriptor const*>(v4, (uint64_t)&v5, (uint64_t)&v23, 6uLL);
      break;
    case 53:
      v5 = &off_24C337670;
      IsCompilation = (mlcore *)mlcore::ItemPropertyItemArtistOrder((mlcore *)this);
      v7 = a3;
      v8 = &off_24C337670;
      v9 = (mlcore *)mlcore::ItemPropertyItemArtistOrder(IsCompilation);
      v10 = a3 ^ 1;
      v11 = &off_24C337670;
      v12 = (mlcore *)mlcore::ItemPropertyAlbumOrder(v9);
      v13 = a3 ^ 1;
      v14 = &off_24C337670;
      v15 = (mlcore *)mlcore::ItemPropertyDiscNumber(v12);
      v16 = a3 ^ 1;
      v17 = &off_24C337670;
      v18 = (mlcore *)mlcore::ItemPropertyTrackNumber(v15);
      v19 = a3 ^ 1;
      v20 = &off_24C337670;
      v21 = (mlcore *)mlcore::ItemPropertyTitleOrder(v18);
      v22 = a3 ^ 1;
      this = std::vector<mlcore::SortDescriptor>::__assign_with_size[abi:ne180100]<mlcore::SortDescriptor const*,mlcore::SortDescriptor const*>(v4, (uint64_t)&v5, (uint64_t)&v23, 6uLL);
      break;
    case 54:
      v5 = &off_24C337670;
      IsCompilation = (mlcore *)mlcore::ItemPropertyUserAlbumRating((mlcore *)this);
      v7 = a3;
      v8 = &off_24C337670;
      v9 = (mlcore *)mlcore::ItemPropertyItemArtistOrder(IsCompilation);
      v10 = a3 ^ 1;
      v11 = &off_24C337670;
      v12 = (mlcore *)mlcore::ItemPropertyAlbumOrder(v9);
      v13 = a3 ^ 1;
      v14 = &off_24C337670;
      v15 = (mlcore *)mlcore::ItemPropertyDiscNumber(v12);
      v16 = a3 ^ 1;
      v17 = &off_24C337670;
      v18 = (mlcore *)mlcore::ItemPropertyTrackNumber(v15);
      v19 = a3 ^ 1;
      v20 = &off_24C337670;
      v21 = (mlcore *)mlcore::ItemPropertyTitleOrder(v18);
      v22 = a3 ^ 1;
      this = std::vector<mlcore::SortDescriptor>::__assign_with_size[abi:ne180100]<mlcore::SortDescriptor const*,mlcore::SortDescriptor const*>(v4, (uint64_t)&v5, (uint64_t)&v23, 6uLL);
      break;
    case 56:
      v5 = &off_24C337670;
      IsCompilation = (mlcore *)mlcore::ItemPropertyComposerOrder((mlcore *)this);
      v7 = a3;
      v8 = &off_24C337670;
      v9 = (mlcore *)mlcore::ItemPropertyAlbumOrder(IsCompilation);
      v10 = a3 ^ 1;
      v11 = &off_24C337670;
      v12 = (mlcore *)mlcore::ItemPropertyArtistOrder(v9);
      v13 = a3 ^ 1;
      v14 = &off_24C337670;
      v15 = (mlcore *)mlcore::ItemPropertyDiscNumber(v12);
      v16 = a3 ^ 1;
      v17 = &off_24C337670;
      v18 = (mlcore *)mlcore::ItemPropertyTrackNumber(v15);
      v19 = a3 ^ 1;
      v20 = &off_24C337670;
      v21 = (mlcore *)mlcore::ItemPropertyItemArtistOrder(v18);
      v22 = a3 ^ 1;
      v23 = &off_24C337670;
      v24 = (mlcore *)mlcore::ItemPropertyTitleOrder(v21);
      v25 = a3 ^ 1;
      this = std::vector<mlcore::SortDescriptor>::__assign_with_size[abi:ne180100]<mlcore::SortDescriptor const*,mlcore::SortDescriptor const*>(v4, (uint64_t)&v5, (uint64_t)&v26, 7uLL);
      break;
    case 57:
      v5 = &off_24C337670;
      IsCompilation = (mlcore *)mlcore::ItemPropertyCategory((mlcore *)this);
      v7 = a3;
      v8 = &off_24C337670;
      v9 = (mlcore *)mlcore::ItemPropertyAlbumOrder(IsCompilation);
      v10 = a3 ^ 1;
      v11 = &off_24C337670;
      v12 = (mlcore *)mlcore::ItemPropertyArtistOrder(v9);
      v13 = a3 ^ 1;
      v14 = &off_24C337670;
      v15 = (mlcore *)mlcore::ItemPropertyDiscNumber(v12);
      v16 = a3 ^ 1;
      v17 = &off_24C337670;
      v18 = (mlcore *)mlcore::ItemPropertyTrackNumber(v15);
      v19 = a3 ^ 1;
      v20 = &off_24C337670;
      v21 = (mlcore *)mlcore::ItemPropertyItemArtistOrder(v18);
      v22 = a3 ^ 1;
      v23 = &off_24C337670;
      v24 = (mlcore *)mlcore::ItemPropertyTitleOrder(v21);
      v25 = a3 ^ 1;
      v26 = &off_24C337670;
      v27 = (mlcore *)mlcore::ItemPropertyItemArtistOrder(v24);
      v28 = a3 ^ 1;
      v29 = &off_24C337670;
      v30 = (mlcore *)mlcore::ItemPropertyAlbumOrder(v27);
      v31 = a3 ^ 1;
      v32 = &off_24C337670;
      v33 = (mlcore *)mlcore::ItemPropertyDiscNumber(v30);
      v34 = a3 ^ 1;
      v35 = &off_24C337670;
      v36 = (mlcore *)mlcore::ItemPropertyTrackNumber(v33);
      v37 = a3 ^ 1;
      v38 = &off_24C337670;
      v39 = mlcore::ItemPropertyTitleOrder(v36);
      v40 = a3 ^ 1;
      this = std::vector<mlcore::SortDescriptor>::__assign_with_size[abi:ne180100]<mlcore::SortDescriptor const*,mlcore::SortDescriptor const*>(v4, (uint64_t)&v5, (uint64_t)&v41, 0xCuLL);
      break;
    case 58:
      v5 = &off_24C337670;
      IsCompilation = (mlcore *)mlcore::ItemPropertyGenreOrder((mlcore *)this);
      v7 = a3;
      v8 = &off_24C337670;
      v9 = (mlcore *)mlcore::ItemPropertyAlbumOrder(IsCompilation);
      v10 = a3 ^ 1;
      v11 = &off_24C337670;
      v12 = (mlcore *)mlcore::ItemPropertyArtistOrder(v9);
      v13 = a3 ^ 1;
      v14 = &off_24C337670;
      v15 = (mlcore *)mlcore::ItemPropertyDiscNumber(v12);
      v16 = a3 ^ 1;
      v17 = &off_24C337670;
      v18 = (mlcore *)mlcore::ItemPropertyTrackNumber(v15);
      v19 = a3 ^ 1;
      v20 = &off_24C337670;
      v21 = (mlcore *)mlcore::ItemPropertyItemArtistOrder(v18);
      v22 = a3 ^ 1;
      v23 = &off_24C337670;
      v24 = (mlcore *)mlcore::ItemPropertyTitleOrder(v21);
      v25 = a3 ^ 1;
      v26 = &off_24C337670;
      v27 = (mlcore *)mlcore::ItemPropertyItemArtistOrder(v24);
      v28 = a3 ^ 1;
      v29 = &off_24C337670;
      v30 = (mlcore *)mlcore::ItemPropertyAlbumOrder(v27);
      v31 = a3 ^ 1;
      v32 = &off_24C337670;
      v33 = (mlcore *)mlcore::ItemPropertyDiscNumber(v30);
      v34 = a3 ^ 1;
      v35 = &off_24C337670;
      v36 = (mlcore *)mlcore::ItemPropertyTrackNumber(v33);
      v37 = a3 ^ 1;
      v38 = &off_24C337670;
      v39 = mlcore::ItemPropertyTitleOrder(v36);
      v40 = a3 ^ 1;
      this = std::vector<mlcore::SortDescriptor>::__assign_with_size[abi:ne180100]<mlcore::SortDescriptor const*,mlcore::SortDescriptor const*>(v4, (uint64_t)&v5, (uint64_t)&v41, 0xCuLL);
      break;
    case 59:
      v5 = &off_24C337670;
      IsCompilation = (mlcore *)mlcore::ItemPropertyGenreOrder((mlcore *)this);
      v7 = a3;
      v8 = &off_24C337670;
      v9 = (mlcore *)mlcore::ItemPropertyTitleOrder(IsCompilation);
      v10 = a3;
      v11 = &off_24C337670;
      v12 = (mlcore *)mlcore::ItemPropertyItemArtistOrder(v9);
      v13 = a3 ^ 1;
      v14 = &off_24C337670;
      v15 = (mlcore *)mlcore::ItemPropertyAlbumOrder(v12);
      v16 = a3 ^ 1;
      v17 = &off_24C337670;
      v18 = (mlcore *)mlcore::ItemPropertyDiscNumber(v15);
      v19 = a3 ^ 1;
      v20 = &off_24C337670;
      v21 = (mlcore *)mlcore::ItemPropertyTrackNumber(v18);
      v22 = a3 ^ 1;
      v23 = &off_24C337670;
      v24 = (mlcore *)mlcore::ItemPropertyTitleOrder(v21);
      v25 = a3 ^ 1;
      this = std::vector<mlcore::SortDescriptor>::__assign_with_size[abi:ne180100]<mlcore::SortDescriptor const*,mlcore::SortDescriptor const*>(v4, (uint64_t)&v5, (uint64_t)&v26, 7uLL);
      break;
    case 60:
      v5 = &off_24C337670;
      IsCompilation = (mlcore *)mlcore::ItemPropertyGlobalID((mlcore *)this);
      v7 = a3;
      v8 = &off_24C337670;
      v9 = (mlcore *)mlcore::ItemPropertyTitleOrder(IsCompilation);
      v10 = a3;
      this = std::vector<mlcore::SortDescriptor>::__assign_with_size[abi:ne180100]<mlcore::SortDescriptor const*,mlcore::SortDescriptor const*>(v4, (uint64_t)&v5, (uint64_t)&v11, 2uLL);
      break;
    case 61:
      v5 = &off_24C337670;
      IsCompilation = (mlcore *)mlcore::ItemPropertyFeedURL((mlcore *)this);
      v7 = a3;
      v8 = &off_24C337670;
      v9 = (mlcore *)mlcore::ItemPropertyAlbumOrder(IsCompilation);
      v10 = a3 ^ 1;
      v11 = &off_24C337670;
      v12 = (mlcore *)mlcore::ItemPropertyArtistOrder(v9);
      v13 = a3 ^ 1;
      v14 = &off_24C337670;
      v15 = (mlcore *)mlcore::ItemPropertyDiscNumber(v12);
      v16 = a3 ^ 1;
      v17 = &off_24C337670;
      v18 = (mlcore *)mlcore::ItemPropertyTrackNumber(v15);
      v19 = a3 ^ 1;
      v20 = &off_24C337670;
      v21 = (mlcore *)mlcore::ItemPropertyItemArtistOrder(v18);
      v22 = a3 ^ 1;
      v23 = &off_24C337670;
      v24 = (mlcore *)mlcore::ItemPropertyTitleOrder(v21);
      v25 = a3 ^ 1;
      v26 = &off_24C337670;
      v27 = (mlcore *)mlcore::ItemPropertyItemArtistOrder(v24);
      v28 = a3 ^ 1;
      v29 = &off_24C337670;
      v30 = (mlcore *)mlcore::ItemPropertyAlbumOrder(v27);
      v31 = a3 ^ 1;
      v32 = &off_24C337670;
      v33 = (mlcore *)mlcore::ItemPropertyDiscNumber(v30);
      v34 = a3 ^ 1;
      v35 = &off_24C337670;
      v36 = (mlcore *)mlcore::ItemPropertyTrackNumber(v33);
      v37 = a3 ^ 1;
      v38 = &off_24C337670;
      v39 = mlcore::ItemPropertyTitleOrder(v36);
      v40 = a3 ^ 1;
      this = std::vector<mlcore::SortDescriptor>::__assign_with_size[abi:ne180100]<mlcore::SortDescriptor const*,mlcore::SortDescriptor const*>(v4, (uint64_t)&v5, (uint64_t)&v41, 0xCuLL);
      break;
    case 62:
      v5 = &off_24C337670;
      IsCompilation = (mlcore *)mlcore::ItemPropertyStoreItemID((mlcore *)this);
      v7 = a3;
      this = std::vector<mlcore::SortDescriptor>::__assign_with_size[abi:ne180100]<mlcore::SortDescriptor const*,mlcore::SortDescriptor const*>(v4, (uint64_t)&v5, (uint64_t)&v8, 1uLL);
      break;
    case 67:
      v5 = &off_24C337670;
      IsCompilation = (mlcore *)mlcore::ItemPropertyIsUserDisabled((mlcore *)this);
      v7 = a3;
      v8 = &off_24C337670;
      v9 = (mlcore *)mlcore::ItemPropertyTitleOrder(IsCompilation);
      v10 = a3;
      this = std::vector<mlcore::SortDescriptor>::__assign_with_size[abi:ne180100]<mlcore::SortDescriptor const*,mlcore::SortDescriptor const*>(v4, (uint64_t)&v5, (uint64_t)&v11, 2uLL);
      break;
    case 70:
      v5 = &off_24C337670;
      IsCompilation = (mlcore *)mlcore::ItemPropertyStoreCloudID((mlcore *)this);
      v7 = a3;
      v8 = &off_24C337670;
      v9 = (mlcore *)mlcore::ItemPropertyTitleOrder(IsCompilation);
      v10 = a3;
      this = std::vector<mlcore::SortDescriptor>::__assign_with_size[abi:ne180100]<mlcore::SortDescriptor const*,mlcore::SortDescriptor const*>(v4, (uint64_t)&v5, (uint64_t)&v11, 2uLL);
      break;
    case 71:
      v5 = &off_24C337670;
      IsCompilation = (mlcore *)mlcore::ItemPropertyStoreAccountID((mlcore *)this);
      v7 = a3;
      v8 = &off_24C337670;
      v9 = (mlcore *)mlcore::ItemPropertyTitleOrder(IsCompilation);
      v10 = a3;
      this = std::vector<mlcore::SortDescriptor>::__assign_with_size[abi:ne180100]<mlcore::SortDescriptor const*,mlcore::SortDescriptor const*>(v4, (uint64_t)&v5, (uint64_t)&v11, 2uLL);
      break;
    case 72:
      v5 = &off_24C337670;
      IsCompilation = (mlcore *)mlcore::ItemPropertyStoreCloudStatus((mlcore *)this);
      v7 = a3;
      v8 = &off_24C337670;
      v9 = (mlcore *)mlcore::ItemPropertyItemArtistOrder(IsCompilation);
      v10 = a3 ^ 1;
      v11 = &off_24C337670;
      v12 = (mlcore *)mlcore::ItemPropertyAlbumOrder(v9);
      v13 = a3 ^ 1;
      v14 = &off_24C337670;
      v15 = (mlcore *)mlcore::ItemPropertyDiscNumber(v12);
      v16 = a3 ^ 1;
      v17 = &off_24C337670;
      v18 = (mlcore *)mlcore::ItemPropertyTrackNumber(v15);
      v19 = a3 ^ 1;
      v20 = &off_24C337670;
      v21 = (mlcore *)mlcore::ItemPropertyTitleOrder(v18);
      v22 = a3 ^ 1;
      this = std::vector<mlcore::SortDescriptor>::__assign_with_size[abi:ne180100]<mlcore::SortDescriptor const*,mlcore::SortDescriptor const*>(v4, (uint64_t)&v5, (uint64_t)&v23, 6uLL);
      break;
    case 112:
      v5 = &off_24C337670;
      IsCompilation = (mlcore *)mlcore::ItemPropertyLikedStateChangedDate((mlcore *)this);
      v7 = a3;
      this = std::vector<mlcore::SortDescriptor>::__assign_with_size[abi:ne180100]<mlcore::SortDescriptor const*,mlcore::SortDescriptor const*>(v4, (uint64_t)&v5, (uint64_t)&v8, 1uLL);
      break;
    default:
      return this;
  }
  return this;
}

void sub_20A76265C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::vector<mlcore::SortDescriptor>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

char *mlcore::SortDescriptorsForPlaylistLimitOrder@<X0>(mlcore *a1@<X0>, int a2@<W1>, char *a3@<X8>)
{
  uint64_t v6;
  unint64_t v7;
  mlcore *v8;
  uint64_t v9;
  unint64_t v10;
  int v11;

  v6 = *(_QWORD *)a1;
  v7 = mlcore::PlaylistPropertySmartLimitOrder(a1);
  v8 = (mlcore *)mlcore::Entity::valueForProperty<int>(v6, v7);
  LODWORD(v6) = (_DWORD)v8;
  v9 = *(_QWORD *)a1;
  v10 = mlcore::PlaylistPropertySmartReverseLimitOrder(v8);
  v11 = (mlcore::Entity::valueForProperty<int>(v9, v10) == 0) ^ a2;
  return mlcore::_sortDescriptorsFromTrackOrder(a3, v6, v11);
}

void std::vector<mlcore::SortDescriptor>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;
  char *v6;
  char *v7;
  void (**v8)(char *);
  BOOL v9;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      v6 = v4 - 24;
      v7 = v4 - 24;
      do
      {
        v8 = *(void (***)(char *))v7;
        v7 -= 24;
        (*v8)(v6);
        v9 = v6 == v2;
        v6 = v7;
      }
      while (!v9);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

char *mlcore::SortDescriptorsForPlaylistEvaluationOrder@<X0>(mlcore *a1@<X0>, int a2@<W1>, char *a3@<X8>)
{
  uint64_t v6;
  unint64_t v7;
  mlcore *v8;
  uint64_t v9;
  unint64_t IsReversed;
  int v11;

  v6 = *(_QWORD *)a1;
  v7 = mlcore::PlaylistPropertySmartEvaluationOrder(a1);
  v8 = (mlcore *)mlcore::Entity::valueForProperty<int>(v6, v7);
  LODWORD(v6) = (_DWORD)v8;
  v9 = *(_QWORD *)a1;
  IsReversed = mlcore::PlaylistPropertyIsReversed(v8);
  v11 = (mlcore::Entity::valueForProperty<int>(v9, IsReversed) == 0) ^ a2;
  return mlcore::_sortDescriptorsFromTrackOrder(a3, v6, v11);
}

char *std::vector<mlcore::SortDescriptor>::__assign_with_size[abi:ne180100]<mlcore::SortDescriptor const*,mlcore::SortDescriptor const*>(char *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v6;
  char *v7;
  _DWORD *v8;
  unint64_t v9;
  unint64_t v10;
  _DWORD *i;
  uint64_t v12;
  _BYTE *v13;
  unint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  _DWORD *v20;
  uint64_t v21;
  uint64_t v22;
  _DWORD *v23;
  uint64_t (***v24)(_QWORD);
  uint64_t (**v25)(_DWORD *);
  BOOL v26;

  v6 = a2;
  v7 = result;
  v8 = *(_DWORD **)result;
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)result + 2) - *(_QWORD *)result) >> 3) < a4)
  {
    std::vector<mlcore::SortDescriptor>::__vdeallocate((void **)result);
    v9 = 0x5555555555555556 * ((uint64_t)(*((_QWORD *)v7 + 2) - *(_QWORD *)v7) >> 3);
    if (v9 <= a4)
      v9 = a4;
    if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)v7 + 2) - *(_QWORD *)v7) >> 3) >= 0x555555555555555)
      v10 = 0xAAAAAAAAAAAAAAALL;
    else
      v10 = v9;
    result = std::vector<mlcore::SortDescriptor>::__vallocate[abi:ne180100](v7, v10);
    for (i = (_DWORD *)*((_QWORD *)v7 + 1); v6 != a3; i += 6)
    {
      *(_QWORD *)i = &off_24C337670;
      v12 = *(_QWORD *)(v6 + 8);
      i[4] = *(_DWORD *)(v6 + 16);
      *((_QWORD *)i + 1) = v12;
      v6 += 24;
    }
LABEL_19:
    *((_QWORD *)v7 + 1) = i;
    return result;
  }
  v13 = (_BYTE *)*((_QWORD *)result + 1);
  v14 = 0xAAAAAAAAAAAAAAABLL * ((v13 - (_BYTE *)v8) >> 3);
  if (v14 < a4)
  {
    v15 = a2 + 8 * ((v13 - (_BYTE *)v8) >> 3);
    if (v13 != (_BYTE *)v8)
    {
      v16 = (char *)(v8 + 2);
      v17 = 24 * v14;
      v18 = (uint64_t *)(a2 + 8);
      do
      {
        v19 = *v18;
        *((_DWORD *)v16 + 2) = *((_DWORD *)v18 + 2);
        *(_QWORD *)v16 = v19;
        v16 += 24;
        v18 += 3;
        v17 -= 24;
      }
      while (v17);
      v8 = (_DWORD *)*((_QWORD *)result + 1);
    }
    v20 = v8;
    if (v15 != a3)
    {
      v20 = v8;
      do
      {
        *(_QWORD *)v20 = &off_24C337670;
        v21 = *(_QWORD *)(v15 + 8);
        v20[4] = *(_DWORD *)(v15 + 16);
        *((_QWORD *)v20 + 1) = v21;
        v15 += 24;
        v20 += 6;
      }
      while (v15 != a3);
    }
    i = v20;
    goto LABEL_19;
  }
  if (a2 != a3)
  {
    do
    {
      v22 = *(_QWORD *)(v6 + 8);
      v8[4] = *(_DWORD *)(v6 + 16);
      *((_QWORD *)v8 + 1) = v22;
      v6 += 24;
      v8 += 6;
    }
    while (v6 != a3);
    v13 = (_BYTE *)*((_QWORD *)result + 1);
  }
  if (v13 != (_BYTE *)v8)
  {
    v23 = v13 - 24;
    v24 = (uint64_t (***)(_QWORD))(v13 - 24);
    do
    {
      v25 = (uint64_t (**)(_DWORD *))*v24;
      v24 -= 3;
      result = (char *)(*v25)(v23);
      v26 = v23 == v8;
      v23 = v24;
    }
    while (!v26);
  }
  *((_QWORD *)v7 + 1) = v8;
  return result;
}

char *std::vector<mlcore::SortDescriptor>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0xAAAAAAAAAAAAAABLL)
    std::vector<std::string>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[24 * v4];
  return result;
}

uint64_t mlcore::PropertyForPlaylistSmartLimitKind(mlcore *a1)
{
  uint64_t v1;
  unint64_t v2;
  mlcore *v3;
  uint64_t result;

  v1 = *(_QWORD *)a1;
  v2 = mlcore::PlaylistPropertySmartLimitKind(a1);
  v3 = (mlcore *)mlcore::Entity::valueForProperty<int>(v1, v2);
  switch((int)v3)
  {
    case 0:
    case 3:
      result = mlcore::ItemPropertyTotalTime(v3);
      break;
    case 1:
    case 4:
      result = mlcore::ItemPropertyFileSize(v3);
      break;
    default:
      result = 0;
      break;
  }
  return result;
}

void mlcore::DebugDescriptionFromSearchData(mlcore *this@<X0>, uint64_t a2@<X8>)
{
  _DWORD *v4;

  v4 = 0;
  ImportSearchCriteriaList(*((const void **)this + 3), *((_DWORD *)this + 2), &v4);
  mlcore::_criteriaListDescription(a2, (uint64_t)v4, 0);
  DisposeSearchCriteriaList(v4);
}

void mlcore::_criteriaListDescription(uint64_t a1, uint64_t a2, int a3)
{
  int v5;
  std::string *v6;
  std::string::size_type size;
  int v8;
  const std::locale::facet *v9;
  const std::locale::facet *v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int v13;
  const char *v14;
  std::string::size_type v15;
  unsigned int v16;
  unint64_t v17;
  int v18;
  std::string *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  BOOL v24;
  const char *v25;
  const char *v26;
  __int16 v27;
  unint64_t v28;
  uint64_t v29;
  char *v30;
  const char *v31;
  std::string *v32;
  void *v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  const __CFDate *v38;
  const __CFDate *v39;
  const __CFString *StringWithDate;
  const __CFString *v41;
  std::string *v42;
  __int128 v43;
  unint64_t v44;
  char *v45;
  uint64_t *v46;
  uint64_t v47;
  _QWORD *v48;
  char *v49;
  std::string *v50;
  std::string::size_type v51;
  char v52;
  std::string::size_type v53;
  std::string *p_p;
  const __CFAllocator *allocator;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  std::string v62;
  void *v63[2];
  uint64_t v64;
  std::string v65;
  std::string __p;
  unsigned int v67[4];
  __int128 v68;
  _QWORD v69[11];
  char v70;
  uint64_t v71;
  std::string v72;
  __int128 v73;
  __int128 v74;
  int v75;
  uint64_t v76;
  unint64_t v77;
  std::string v78;
  std::string v79;
  std::string v80;
  std::string *v81;
  std::string *v82;

  LockSearchCriteriaList(a2);
  memset(&v72, 0, sizeof(v72));
  if (a3 >= 1)
  {
    v5 = a3;
    do
    {
      std::string::append(&v72, "   ");
      --v5;
    }
    while (v5);
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v69);
  if ((v72.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v6 = &v72;
  else
    v6 = (std::string *)v72.__r_.__value_.__r.__words[0];
  if ((v72.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v72.__r_.__value_.__r.__words[2]);
  else
    size = v72.__r_.__value_.__l.__size_;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v69, (uint64_t)v6, size);
  if (a2 && *(_DWORD *)a2 == 1397519220)
  {
    v8 = *(_DWORD *)(a2 + 16);
    if ((*(_BYTE *)(a2 + 12) & 1) != 0)
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v69, (uint64_t)"||", 2);
      std::ios_base::getloc((const std::ios_base *)((char *)v69 + *(_QWORD *)(v69[0] - 24)));
      v9 = std::locale::use_facet((const std::locale *)&v80, MEMORY[0x24BEDB350]);
      ((void (*)(const std::locale::facet *, uint64_t))v9->__vftable[2].~facet_0)(v9, 10);
      goto LABEL_16;
    }
  }
  else
  {
    v8 = 0;
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v69, (uint64_t)"&&", 2);
  std::ios_base::getloc((const std::ios_base *)((char *)v69 + *(_QWORD *)(v69[0] - 24)));
  v10 = std::locale::use_facet((const std::locale *)&v80, MEMORY[0x24BEDB350]);
  ((void (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 10);
LABEL_16:
  std::locale::~locale((std::locale *)&v80);
  std::ostream::put();
  std::ostream::flush();
  if (v8)
  {
    v11 = 0;
    v12 = (a3 + 1);
    allocator = (const __CFAllocator *)*MEMORY[0x24BDBD240];
    while (GetSearchCriterionInfo(a2, v11, (uint64_t)v67) || !BYTE1(v67[2]))
    {
LABEL_289:
      if (v8 == ++v11)
        goto LABEL_290;
    }
    memset(&__p, 0, sizeof(__p));
    if (LOBYTE(v67[2]))
    {
      mlcore::_criteriaListDescription(&v80, v68, v12);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      __p = v80;
      goto LABEL_279;
    }
    v13 = v67[0];
    if (v67[0] > 0xB8)
    {
LABEL_279:
      v52 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v53 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      else
        v53 = __p.__r_.__value_.__l.__size_;
      if (v53)
      {
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          p_p = &__p;
        else
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v69, (uint64_t)p_p, v53);
        v52 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      }
      if (v52 < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      goto LABEL_289;
    }
    memset(&v65, 0, sizeof(v65));
    v14 = "Play Status";
    switch(v67[0])
    {
      case 0u:
        v14 = "Invalid";
        goto LABEL_159;
      case 1u:
        goto LABEL_159;
      case 2u:
        v14 = "Name";
        goto LABEL_159;
      case 3u:
        v14 = "Album";
        goto LABEL_159;
      case 4u:
        v14 = "Artist";
        goto LABEL_159;
      case 5u:
        v14 = "Bit Rate";
        goto LABEL_159;
      case 6u:
        v14 = "Sample Rate";
        goto LABEL_159;
      case 7u:
        v14 = "Year";
        goto LABEL_159;
      case 8u:
        v14 = "Genre";
        goto LABEL_159;
      case 9u:
        v14 = "Kind";
        goto LABEL_159;
      case 0xAu:
        v14 = "Date Modified";
        goto LABEL_159;
      case 0xBu:
        v14 = "Track Number";
        goto LABEL_159;
      case 0xCu:
        v14 = "Size";
        goto LABEL_159;
      case 0xDu:
        v14 = "Total Time";
        goto LABEL_159;
      case 0xEu:
        v14 = "Comment";
        goto LABEL_159;
      case 0xFu:
      case 0x85u:
        v14 = "Location";
        goto LABEL_159;
      case 0x10u:
        v14 = "Date Added";
        goto LABEL_159;
      case 0x11u:
        v14 = "EQ Preset";
        goto LABEL_159;
      case 0x12u:
        v14 = "Composer";
        goto LABEL_159;
      case 0x13u:
        v14 = "Obsolete Display Artist";
        goto LABEL_159;
      case 0x14u:
        v14 = "Volume";
        goto LABEL_159;
      case 0x15u:
        v14 = "Stream Status";
        goto LABEL_159;
      case 0x16u:
        v14 = "User Play Count";
        goto LABEL_159;
      case 0x17u:
        v14 = "Play Date";
        goto LABEL_159;
      case 0x18u:
        v14 = "Disc Number";
        goto LABEL_159;
      case 0x19u:
        v14 = "Track Rating";
        goto LABEL_159;
      case 0x1Au:
        v14 = "Price";
        goto LABEL_159;
      case 0x1Bu:
        v14 = "Object ID";
        goto LABEL_159;
      case 0x1Cu:
        v14 = "Persistent ID";
        goto LABEL_159;
      case 0x1Du:
        v14 = "Checked";
        goto LABEL_159;
      case 0x1Eu:
        v14 = "Playlist Item ID";
        goto LABEL_159;
      case 0x1Fu:
        v14 = "Compilation";
        goto LABEL_159;
      case 0x20u:
        v14 = "Purchase Date";
        goto LABEL_159;
      case 0x21u:
        v14 = "Relevance";
        goto LABEL_159;
      case 0x22u:
        v14 = "Release Date";
        goto LABEL_159;
      case 0x23u:
        v14 = "Beat Per Minute";
        goto LABEL_159;
      case 0x24u:
        v14 = "Parent Container ID";
        goto LABEL_159;
      case 0x25u:
        v14 = "Artwork";
        goto LABEL_159;
      case 0x26u:
        v14 = "Popuarity";
        goto LABEL_159;
      case 0x27u:
        v14 = "Grouping";
        goto LABEL_159;
      case 0x28u:
        v14 = "Playlist";
        goto LABEL_159;
      case 0x29u:
        v14 = "Purchased";
        goto LABEL_159;
      case 0x2Au:
        v14 = "Artist ID";
        goto LABEL_159;
      case 0x2Bu:
        v14 = "Playlist ID";
        goto LABEL_159;
      case 0x2Cu:
        v14 = "Composer ID";
        goto LABEL_159;
      case 0x2Du:
        v14 = "Genre ID";
        goto LABEL_159;
      case 0x2Eu:
        v14 = "Codec Type";
        goto LABEL_159;
      case 0x2Fu:
        v14 = "Codec Sub-Type";
        goto LABEL_159;
      case 0x30u:
        v14 = "Song Data Kind";
        goto LABEL_159;
      case 0x31u:
        v14 = "Disc Count";
        goto LABEL_159;
      case 0x32u:
        v14 = "Start Time";
        goto LABEL_159;
      case 0x33u:
        v14 = "Stop Time";
        goto LABEL_159;
      case 0x34u:
        v14 = "Track Count";
        goto LABEL_159;
      case 0x35u:
        v14 = "Store Front ID";
        goto LABEL_159;
      case 0x36u:
        v14 = "Description";
        goto LABEL_159;
      case 0x37u:
        v14 = "Category";
        goto LABEL_159;
      case 0x38u:
        v14 = "Keywords";
        goto LABEL_159;
      case 0x39u:
        v14 = "Podcast";
        goto LABEL_159;
      case 0x3Au:
        v14 = "Cloud Match State";
        goto LABEL_159;
      case 0x3Bu:
        v14 = "Has Lyrics";
        goto LABEL_159;
      case 0x3Cu:
        v14 = "Media Kind";
        goto LABEL_159;
      case 0x3Eu:
        v14 = "Series Name";
        goto LABEL_159;
      case 0x3Fu:
        v14 = "Season Number";
        goto LABEL_159;
      case 0x40u:
        v14 = "Epsisode ID";
        goto LABEL_159;
      case 0x41u:
        v14 = "Episode Sort ID";
        goto LABEL_159;
      case 0x42u:
        v14 = "Network Name";
        goto LABEL_159;
      case 0x43u:
        v14 = "Last Backup Date";
        goto LABEL_159;
      case 0x44u:
        v14 = "Skips";
        goto LABEL_159;
      case 0x45u:
        v14 = "Skip Date";
        goto LABEL_159;
      case 0x46u:
        v14 = "Gapless Album";
        goto LABEL_159;
      case 0x47u:
        v14 = "Album Artist";
        goto LABEL_159;
      case 0x48u:
        v14 = "Shuffle ID";
        goto LABEL_159;
      case 0x49u:
        v14 = "Track ID";
        goto LABEL_159;
      case 0x4Au:
        v14 = "Relative Volumne";
        goto LABEL_159;
      case 0x4Bu:
        v14 = "Attributes";
        goto LABEL_159;
      case 0x4Cu:
      case 0x60u:
        v14 = "Private";
        goto LABEL_159;
      case 0x4Du:
        v14 = "Album Info";
        goto LABEL_159;
      case 0x4Eu:
        v14 = "Sort Name";
        goto LABEL_159;
      case 0x4Fu:
        v14 = "Sort Album";
        goto LABEL_159;
      case 0x50u:
        v14 = "Sort Artist";
        goto LABEL_159;
      case 0x51u:
        v14 = "Sort Album Artist";
        goto LABEL_159;
      case 0x52u:
        v14 = "Sort Composer";
        goto LABEL_159;
      case 0x53u:
        v14 = "Sort Series Name";
        goto LABEL_159;
      case 0x54u:
        v14 = "Moive Info";
        goto LABEL_159;
      case 0x55u:
        v14 = "Poscast URL";
        goto LABEL_159;
      case 0x56u:
        v14 = "Long Description";
        goto LABEL_159;
      case 0x57u:
        v14 = "Exernal GUID";
        goto LABEL_159;
      case 0x58u:
        v14 = "Chapter Data";
        goto LABEL_159;
      case 0x59u:
        v14 = "Video Rating";
        goto LABEL_159;
      case 0x5Au:
        v14 = "Album Rating";
        goto LABEL_159;
      case 0x5Bu:
        v14 = "Rental Expiration Date";
        goto LABEL_159;
      case 0x5Cu:
        v14 = "Obsolere Ringtone Status";
        goto LABEL_159;
      case 0x5Du:
        v14 = "Bookmark Time";
        goto LABEL_159;
      case 0x5Eu:
        v14 = "Remember Bookmark";
        goto LABEL_159;
      case 0x5Fu:
        v14 = "Has Been Played";
        goto LABEL_159;
      case 0x61u:
        v14 = "Has Subtitles";
        goto LABEL_159;
      case 0x62u:
        v14 = "Audio Language";
        goto LABEL_159;
      case 0x63u:
        v14 = "Audio Track Index";
        goto LABEL_159;
      case 0x64u:
        v14 = "Audio Track ID";
        goto LABEL_159;
      case 0x65u:
        v14 = "Subtitle Language";
        goto LABEL_159;
      case 0x66u:
        v14 = "Subtitle Track Index";
        goto LABEL_159;
      case 0x67u:
        v14 = "Subtitle Track ID";
        goto LABEL_159;
      case 0x68u:
        v14 = "Studio";
        goto LABEL_159;
      case 0x69u:
        v14 = "Reserved 1";
        goto LABEL_159;
      case 0x6Au:
        v14 = "Reserved 2";
        goto LABEL_159;
      case 0x6Bu:
        v14 = "Reserved 3";
        goto LABEL_159;
      case 0x6Cu:
        v14 = "Reserved 4";
        goto LABEL_159;
      case 0x6Du:
        v14 = "Reserved 5";
        goto LABEL_159;
      case 0x6Eu:
        v14 = "Gpaless Info";
        goto LABEL_159;
      case 0x6Fu:
        v14 = "Genius ID";
        goto LABEL_159;
      case 0x70u:
        v14 = "Exclude From Shuffle";
        goto LABEL_159;
      case 0x71u:
        v14 = "Lyrics";
        goto LABEL_159;
      case 0x72u:
        v14 = "Store Persistent ID";
        goto LABEL_159;
      case 0x73u:
        v14 = "Jukebox Votes";
        goto LABEL_159;
      case 0x74u:
        v14 = "Voice Over Language";
        goto LABEL_159;
      case 0x75u:
        v14 = "iTunes U";
        goto LABEL_159;
      case 0x76u:
        v14 = "Uncompressed Size";
        goto LABEL_159;
      case 0x77u:
        v14 = "XID";
        goto LABEL_159;
      case 0x78u:
        v14 = "Game GUID";
        goto LABEL_159;
      case 0x79u:
        v14 = "App Identifier";
        goto LABEL_159;
      case 0x7Au:
        v14 = "Obsolete Track Kind";
        goto LABEL_159;
      case 0x7Bu:
        v14 = "Version";
        goto LABEL_159;
      case 0x7Cu:
        v14 = "Copyright";
        goto LABEL_159;
      case 0x7Du:
        v14 = "User Disabled";
        goto LABEL_159;
      case 0x7Eu:
        v14 = "Album Artwork";
        goto LABEL_159;
      case 0x7Fu:
        v14 = "Collection Description";
        goto LABEL_159;
      case 0x80u:
        v14 = "Flavor";
        goto LABEL_159;
      case 0x81u:
        v14 = "Cloud ID";
        goto LABEL_159;
      case 0x82u:
        v14 = "Cloud Download";
        goto LABEL_159;
      case 0x83u:
        v14 = "Chosen By Auto Fill";
        goto LABEL_159;
      case 0x84u:
        v14 = "Cloud User ID";
        goto LABEL_159;
      case 0x86u:
        v14 = "iCloud Type";
        goto LABEL_159;
      case 0x9Au:
        v14 = "Liked State";
        goto LABEL_159;
      case 0xB7u:
        v14 = "Liked State Changed Date";
LABEL_159:
        MEMORY[0x20BD277A8](&v65, v14);
        v15 = HIBYTE(v65.__r_.__value_.__r.__words[2]);
        if ((v65.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v15 = v65.__r_.__value_.__l.__size_;
        if (!v15)
          goto LABEL_162;
        goto LABEL_165;
      default:
LABEL_162:
        LODWORD(v73) = v13;
        mediaplatform::FormatString<unsigned int>(&v80, (std::string *)"(unsupported: {0})", (unsigned int *)&v73);
        if (SHIBYTE(v65.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v65.__r_.__value_.__l.__data_);
        v65 = v80;
LABEL_165:
        HIDWORD(v17) = v67[0] - 29;
        LODWORD(v17) = v67[0] - 29;
        v16 = v17 >> 1;
        if (v16 <= 6 && ((1 << v16) & 0x53) != 0)
        {
          std::string::basic_string[abi:ne180100]<0>(v63, "is equal to");
          break;
        }
        v63[1] = 0;
        v64 = 0;
        v63[0] = 0;
        v23 = v67[1] & 0xFFFFFF;
        if ((v67[1] & 0xFFFFFF) <= 0x1F)
        {
          v31 = "invalid";
          switch(v23)
          {
            case 0u:
              goto LABEL_232;
            case 1u:
              v24 = (v67[1] & 0x2000000) == 0;
              v25 = "is not equal to";
              v26 = "is equal to";
              break;
            case 2u:
              v24 = (v67[1] & 0x2000000) == 0;
              v25 = "does not contain";
              v26 = "contains";
              break;
            case 3u:
            case 5u:
            case 6u:
            case 7u:
              goto LABEL_168;
            case 4u:
              v24 = (v67[1] & 0x2000000) == 0;
              v25 = "does not start with";
              v26 = "starts with";
              break;
            case 8u:
              v24 = (v67[1] & 0x2000000) == 0;
              v25 = "does not end with";
              v26 = "ends with";
              break;
            default:
              if (v23 != 16)
                goto LABEL_168;
              v24 = (v67[1] & 0x2000000) == 0;
              v25 = "is not greater than";
              v26 = "is greater than";
              break;
          }
        }
        else if ((v67[1] & 0xFFFFFF) <= 0xFF)
        {
          switch(v23)
          {
            case 0x20u:
              v24 = (v67[1] & 0x2000000) == 0;
              v25 = "is not greater than or equal";
              v26 = "is greater than or equal";
              break;
            case 0x40u:
              v24 = (v67[1] & 0x2000000) == 0;
              v25 = "is not less than";
              v26 = "is less than";
              break;
            case 0x80u:
              v24 = (v67[1] & 0x2000000) == 0;
              v25 = "is not less than or equal";
              v26 = "is less than or equal";
              break;
            default:
              goto LABEL_168;
          }
        }
        else if ((v67[1] & 0xFFFFFF) > 0x3FF)
        {
          if (v23 != 1024 && v23 != 2048)
            break;
          v24 = (v67[1] & 0x2000000) == 0;
          v25 = "is not";
          v26 = "is";
        }
        else if (v23 == 256)
        {
          v24 = (v67[1] & 0x2000000) == 0;
          v25 = "is not in range";
          v26 = "is in range";
        }
        else
        {
          if (v23 != 512)
            break;
          v24 = (v67[1] & 0x2000000) == 0;
          v25 = "is not between";
          v26 = "is between";
        }
        if (v24)
          v31 = v26;
        else
          v31 = v25;
LABEL_232:
        MEMORY[0x20BD277A8](v63, v31);
        break;
    }
LABEL_168:
    v18 = v67[0];
    v19 = &v80;
    switch(v67[0])
    {
      case 2u:
      case 3u:
      case 4u:
      case 8u:
      case 9u:
      case 0xEu:
      case 0x11u:
      case 0x12u:
      case 0x27u:
      case 0x36u:
      case 0x37u:
      case 0x3Eu:
      case 0x40u:
      case 0x41u:
      case 0x42u:
      case 0x47u:
      case 0x4Eu:
      case 0x4Fu:
      case 0x50u:
      case 0x51u:
      case 0x52u:
      case 0x53u:
      case 0x56u:
      case 0x57u:
      case 0x71u:
      case 0x7Cu:
      case 0x7Fu:
      case 0x80u:
        mlcore::stringValueForCriterionInfo(&v62, v68, DWORD2(v68));
        goto LABEL_256;
      case 5u:
      case 6u:
      case 7u:
      case 0xBu:
      case 0xCu:
      case 0xDu:
      case 0x14u:
      case 0x16u:
      case 0x18u:
      case 0x19u:
      case 0x1Bu:
      case 0x1Cu:
      case 0x23u:
      case 0x28u:
      case 0x2Au:
      case 0x2Bu:
      case 0x2Cu:
      case 0x2Du:
      case 0x31u:
      case 0x32u:
      case 0x33u:
      case 0x34u:
      case 0x35u:
      case 0x3Cu:
      case 0x3Fu:
      case 0x44u:
      case 0x4Au:
      case 0x5Au:
      case 0x5Du:
      case 0x62u:
      case 0x63u:
      case 0x64u:
      case 0x65u:
      case 0x66u:
      case 0x6Fu:
      case 0x72u:
      case 0x76u:
      case 0x77u:
      case 0x81u:
      case 0x86u:
      case 0x9Au:
        if (LOBYTE(v67[2]) || !(_QWORD)v68)
        {
          v21 = v60;
          v20 = v61;
          v22 = v59;
        }
        else
        {
          v21 = v60;
          v20 = v61;
          v22 = v59;
          if (DWORD2(v68) == 68)
          {
            v20 = *(_QWORD *)v68;
            v21 = *(_QWORD *)(v68 + 8);
            v22 = *(_QWORD *)(v68 + 16);
            v58 = *(_QWORD *)(v68 + 24);
            v57 = *(_QWORD *)(v68 + 32);
            v56 = *(_QWORD *)(v68 + 40);
          }
        }
        v27 = v67[1];
        v60 = v21;
        v61 = v20;
        v59 = v22;
        v28 = v20 + v22 * v21;
        v29 = v58 + v56 * v57;
        v76 = v29;
        v77 = v28;
        v73 = 0uLL;
        *(_QWORD *)&v74 = 0;
        memset(&v79, 0, sizeof(v79));
        if ((int)v67[0] <= 89)
        {
          if (v67[0] == 25)
          {
LABEL_190:
            v75 = (int)v28 / 20;
            mediaplatform::FormatString<long long,int>(&v78, (uint64_t)&v77, (uint64_t)&v75);
            v73 = *(_OWORD *)&v78.__r_.__value_.__l.__data_;
            *(_QWORD *)&v74 = *((_QWORD *)&v78.__r_.__value_.__l + 2);
            v75 = (int)v29 / 20;
            mediaplatform::FormatString<long long,int>(&v78, (uint64_t)&v76, (uint64_t)&v75);
          }
          else if (v67[0] == 60)
          {
            mlcore::_stringForTrackFieldMediaKind((mlcore *)&v78, v28);
            v73 = *(_OWORD *)&v78.__r_.__value_.__l.__data_;
            *(_QWORD *)&v74 = *((_QWORD *)&v78.__r_.__value_.__l + 2);
            mlcore::_stringForTrackFieldMediaKind((mlcore *)&v78, v29);
          }
          else
          {
LABEL_193:
            mlcore::_convertNumericValueFromCriterionMatchKey(&v78, v67[0], v28);
            v73 = *(_OWORD *)&v78.__r_.__value_.__l.__data_;
            *(_QWORD *)&v74 = *((_QWORD *)&v78.__r_.__value_.__l + 2);
            mlcore::_convertNumericValueFromCriterionMatchKey(&v78, v18, v29);
          }
          v79 = v78;
          goto LABEL_195;
        }
        if (v67[0] == 90)
          goto LABEL_190;
        if (v67[0] != 134)
          goto LABEL_193;
        v30 = "invalid";
        if (v28 <= 7)
          v30 = (&off_24C33DA30)[v28];
        std::string::basic_string[abi:ne180100]<0>(&v78, v30);
        v73 = *(_OWORD *)&v78.__r_.__value_.__l.__data_;
        *(_QWORD *)&v74 = *((_QWORD *)&v78.__r_.__value_.__l + 2);
LABEL_195:
        v32 = (std::string *)"{0} to {1}";
        if ((v27 & 0x100) != 0 || (v32 = (std::string *)"{0} and {1}", (v27 & 0x200) != 0))
        {
          mediaplatform::FormatString<std::string,std::string>(&v62, v32, (uint64_t)&v73, (uint64_t)&v79);
        }
        else
        {
          *(_OWORD *)&v62.__r_.__value_.__l.__data_ = v73;
          v62.__r_.__value_.__r.__words[2] = v74;
          *(_QWORD *)&v74 = 0;
          v73 = 0uLL;
        }
        if (SHIBYTE(v79.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v79.__r_.__value_.__l.__data_);
        if (SBYTE7(v74) < 0)
        {
          v33 = (void *)v73;
          goto LABEL_203;
        }
        goto LABEL_256;
      case 0xAu:
      case 0x10u:
      case 0x17u:
      case 0x22u:
      case 0x45u:
      case 0xB7u:
        v73 = *(_OWORD *)v67;
        v74 = v68;
        v34 = atomic_load(&mlcore::_dateStringForCriteriaInfo(CriterionInfo)::once);
        if (v34 != -1)
        {
          v79.__r_.__value_.__r.__words[0] = (std::string::size_type)&v77;
          v78.__r_.__value_.__r.__words[0] = (std::string::size_type)&v79;
          std::__call_once(&mlcore::_dateStringForCriteriaInfo(CriterionInfo)::once, &v78, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::_dateStringForCriteriaInfo(CriterionInfo)::$_0 &&>>);
        }
        v35 = mlcore::dateRangeValueForCriterionInfo((uint64_t)&v73);
        v37 = v36;
        v38 = CFDateCreate(allocator, (double)v35);
        v39 = CFDateCreate(allocator, (double)v37);
        StringWithDate = CFDateFormatterCreateStringWithDate(allocator, (CFDateFormatterRef)mlcore::_dateStringForCriteriaInfo(CriterionInfo)::formatter, v38);
        v41 = CFDateFormatterCreateStringWithDate(allocator, (CFDateFormatterRef)mlcore::_dateStringForCriteriaInfo(CriterionInfo)::formatter, v39);
        CFRelease(v38);
        CFRelease(v39);
        mediaplatform::StringFromCFString((mediaplatform *)&v79, StringWithDate);
        mediaplatform::StringFromCFString((mediaplatform *)&v78, v41);
        CFRelease(StringWithDate);
        CFRelease(v41);
        v42 = (std::string *)"({0}) to ({1})";
        if ((WORD2(v73) & 0x100) != 0 || (v42 = (std::string *)"({0}) and ({1})", (WORD2(v73) & 0x200) != 0))
        {
          mediaplatform::FormatString<std::string,std::string>(&v62, v42, (uint64_t)&v79, (uint64_t)&v78);
        }
        else
        {
          v62 = v79;
          memset(&v79, 0, sizeof(v79));
        }
        if (SHIBYTE(v78.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v78.__r_.__value_.__l.__data_);
        if (SHIBYTE(v79.__r_.__value_.__r.__words[2]) < 0)
        {
          v33 = (void *)v79.__r_.__value_.__r.__words[0];
LABEL_203:
          operator delete(v33);
        }
        goto LABEL_256;
      case 0x1Du:
      case 0x1Fu:
      case 0x25u:
      case 0x29u:
      case 0x39u:
      case 0x5Eu:
      case 0x5Fu:
      case 0x60u:
      case 0x61u:
      case 0x70u:
      case 0x75u:
      case 0x7Du:
      case 0x83u:
      case 0x85u:
        break;
      case 0x7Eu:
        v19 = (std::string *)&v73;
        break;
      default:
        LODWORD(v73) = v67[0];
        mediaplatform::FormatString<unsigned int>(&v62, (std::string *)"(unsupported: %d)", (unsigned int *)&v73);
        goto LABEL_256;
    }
    v43 = v68;
    *(_OWORD *)&v19->__r_.__value_.__l.__data_ = *(_OWORD *)v67;
    *(_OWORD *)&v19->__r_.__value_.__r.__words[2] = v43;
    HIDWORD(v44) = LODWORD(v19->__r_.__value_.__l.__data_) - 29;
    LODWORD(v44) = HIDWORD(v44);
    switch((v44 >> 1))
    {
      case 0u:
      case 4u:
      case 6u:
        if ((v19->__r_.__value_.__s.__data_[7] & 2) != 0)
          v45 = "true";
        else
          v45 = "false";
        goto LABEL_255;
      case 1u:
        if ((v19->__r_.__value_.__s.__data_[7] & 2) != 0)
          v45 = "false";
        else
          v45 = "true";
        goto LABEL_255;
      default:
        if (LODWORD(v19->__r_.__value_.__l.__data_) == 133
          && (v19->__r_.__value_.__r.__words[0] & 0x40000000000) != 0)
        {
          if (v19->__r_.__value_.__s.__data_[8])
            goto LABEL_254;
          v46 = (uint64_t *)v19->__r_.__value_.__r.__words[2];
          if (v46)
          {
            if (LODWORD(v19[1].__r_.__value_.__l.__data_) == 68)
            {
              v47 = *v46;
              v45 = "on this computer";
              if ((v47 & 1) != 0 || (v45 = "on iCloud", (v47 & 0x10) != 0))
              {
LABEL_255:
                std::string::basic_string[abi:ne180100]<0>(&v62, v45);
LABEL_256:
                switch(v67[0])
                {
                  case 5u:
                    v49 = "kbps";
                    break;
                  case 0xCu:
                    v49 = "MB";
                    break;
                  case 6u:
                    v49 = "Hz";
                    break;
                  default:
                    v49 = "";
                    break;
                }
                std::string::basic_string[abi:ne180100]<0>(&v73, v49);
                v80.__r_.__value_.__r.__words[0] = (std::string::size_type)&v73;
                v80.__r_.__value_.__l.__size_ = (std::string::size_type)&v62;
                v80.__r_.__value_.__r.__words[2] = (std::string::size_type)v63;
                v81 = &v65;
                v82 = &v72;
                memset(&v79, 0, sizeof(v79));
                mediaplatform::FormatImplementation<std::string,std::string,std::string,std::string,std::string>((std::string *)"{0}{1} {2} {3} {4}\n", &v79, 0, (uint64_t *)&v80);
                if ((v79.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  v50 = &v79;
                else
                  v50 = (std::string *)v79.__r_.__value_.__r.__words[0];
                if ((v79.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  v51 = HIBYTE(v79.__r_.__value_.__r.__words[2]);
                else
                  v51 = v79.__r_.__value_.__l.__size_;
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v69, (uint64_t)v50, v51);
                if (SHIBYTE(v79.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v79.__r_.__value_.__l.__data_);
                if (SBYTE7(v74) < 0)
                  operator delete((void *)v73);
                if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v62.__r_.__value_.__l.__data_);
                if (SHIBYTE(v64) < 0)
                  operator delete(v63[0]);
                if (SHIBYTE(v65.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v65.__r_.__value_.__l.__data_);
                goto LABEL_279;
              }
            }
          }
        }
        else if (v19->__r_.__value_.__s.__data_[8])
        {
          goto LABEL_254;
        }
        v48 = (_QWORD *)v19->__r_.__value_.__r.__words[2];
        if (v48)
        {
          if (LODWORD(v19[1].__r_.__value_.__l.__data_) == 68)
          {
            v45 = "true";
            if (*v48)
              goto LABEL_255;
          }
        }
LABEL_254:
        v45 = "false";
        goto LABEL_255;
    }
  }
LABEL_290:
  UnlockSearchCriteriaList(a2);
  std::stringbuf::str();
  v69[0] = *MEMORY[0x24BEDB800];
  *(_QWORD *)((char *)v69 + *(_QWORD *)(v69[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  v69[1] = MEMORY[0x24BEDB848] + 16;
  if (v70 < 0)
    operator delete((void *)v69[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x20BD27A84](&v71);
  if (SHIBYTE(v72.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v72.__r_.__value_.__l.__data_);
}

void sub_20A763E4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,char a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  void *a72;
  char a73;
  uint64_t v73;

  if (*(char *)(v73 - 137) < 0)
    operator delete(*(void **)(v73 - 160));
  if (a25 < 0)
    operator delete(__p);
  if (a31 < 0)
    operator delete(a26);
  if (a38 < 0)
    operator delete(a33);
  std::ostringstream::~ostringstream((uint64_t)&a44);
  if (a73 < 0)
    operator delete(a72);
  _Unwind_Resume(a1);
}

_QWORD *mlcore::_stringForTrackFieldMediaKind(mlcore *this, uint64_t a2)
{
  char *v3;

  if (a2 > 4095)
  {
    if (a2 < 0x40000)
    {
      if (a2 >= 0x8000)
      {
        switch(a2)
        {
          case 0x8000:
            v3 = "rental";
            return std::string::basic_string[abi:ne180100]<0>(this, v3);
          case 0x10000:
            v3 = "digital booklet";
            return std::string::basic_string[abi:ne180100]<0>(this, v3);
          case 0x20000:
            v3 = "software application";
            return std::string::basic_string[abi:ne180100]<0>(this, v3);
        }
      }
      else
      {
        switch(a2)
        {
          case 0x1000:
            v3 = "software package";
            return std::string::basic_string[abi:ne180100]<0>(this, v3);
          case 0x2000:
            v3 = "forced music playlist";
            return std::string::basic_string[abi:ne180100]<0>(this, v3);
          case 0x4000:
            v3 = "ringtone";
            return std::string::basic_string[abi:ne180100]<0>(this, v3);
        }
      }
    }
    else if (a2 < 0x200000)
    {
      switch(a2)
      {
        case 0x40000:
          v3 = "software game";
          return std::string::basic_string[abi:ne180100]<0>(this, v3);
        case 0x80000:
          v3 = "audio pass";
          return std::string::basic_string[abi:ne180100]<0>(this, v3);
        case 0x100000:
          v3 = "voice memo";
          return std::string::basic_string[abi:ne180100]<0>(this, v3);
      }
    }
    else if (a2 >= 0x800000)
    {
      if (a2 == 0x800000)
      {
        v3 = "PDF book";
        return std::string::basic_string[abi:ne180100]<0>(this, v3);
      }
      if (a2 == 0x1000000)
      {
        v3 = "alert tone";
        return std::string::basic_string[abi:ne180100]<0>(this, v3);
      }
    }
    else
    {
      if (a2 == 0x200000)
      {
        v3 = "iTunes U";
        return std::string::basic_string[abi:ne180100]<0>(this, v3);
      }
      if (a2 == 0x400000)
      {
        v3 = "book";
        return std::string::basic_string[abi:ne180100]<0>(this, v3);
      }
    }
    goto LABEL_57;
  }
  if (a2 > 31)
  {
    if (a2 <= 255)
    {
      switch(a2)
      {
        case 32:
          v3 = "music video";
          return std::string::basic_string[abi:ne180100]<0>(this, v3);
        case 64:
          v3 = "TV show";
          return std::string::basic_string[abi:ne180100]<0>(this, v3);
        case 128:
          v3 = "interactive booklet";
          return std::string::basic_string[abi:ne180100]<0>(this, v3);
      }
    }
    else if (a2 > 1023)
    {
      if (a2 == 1024)
      {
        v3 = "home video";
        return std::string::basic_string[abi:ne180100]<0>(this, v3);
      }
      if (a2 == 2048)
      {
        v3 = "future video 3";
        return std::string::basic_string[abi:ne180100]<0>(this, v3);
      }
    }
    else
    {
      if (a2 == 256)
      {
        v3 = "coached audio";
        return std::string::basic_string[abi:ne180100]<0>(this, v3);
      }
      if (a2 == 512)
      {
        v3 = "video pass";
        return std::string::basic_string[abi:ne180100]<0>(this, v3);
      }
    }
LABEL_57:
    v3 = "invalid";
    return std::string::basic_string[abi:ne180100]<0>(this, v3);
  }
  v3 = "unknown";
  switch(a2)
  {
    case 0:
      return std::string::basic_string[abi:ne180100]<0>(this, v3);
    case 1:
      v3 = "music";
      break;
    case 2:
      v3 = "movie";
      break;
    case 3:
    case 5:
    case 6:
    case 7:
      goto LABEL_57;
    case 4:
      v3 = "podcast";
      break;
    case 8:
      v3 = "audiobook";
      break;
    default:
      if (a2 != 16)
        goto LABEL_57;
      v3 = "PDF booklet";
      break;
  }
  return std::string::basic_string[abi:ne180100]<0>(this, v3);
}

void mediaplatform::FormatString<long long,int>(std::string *a1, uint64_t a2, uint64_t a3)
{
  _QWORD v3[2];

  v3[0] = a3;
  v3[1] = a2;
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  a1->__r_.__value_.__r.__words[0] = 0;
  mediaplatform::FormatImplementation<long long,int>((std::string *)"{0} ({1} stars)", a1, 0, (uint64_t)v3);
}

void sub_20A764230(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void mlcore::_convertNumericValueFromCriterionMatchKey(std::string *this, int a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8[3];

  v7 = a3;
  if (a2 == 13)
  {
    v6 = a3 % 1000;
    v5 = a3 / 1000 % 60;
    v4 = a3 / 60000 % 60;
    v8[0] = &v4;
    v8[1] = &v5;
    v8[2] = &v6;
    this->__r_.__value_.__l.__size_ = 0;
    this->__r_.__value_.__r.__words[2] = 0;
    this->__r_.__value_.__r.__words[0] = 0;
    mediaplatform::FormatImplementation<long long,long long,long long>((std::string *)"{0}:{1}:{2}", this, 0, v8);
  }
  else
  {
    if (a2 == 12)
    {
      v8[0] = (uint64_t *)(a3 / 0x100000);
      v3 = (uint64_t *)v8;
    }
    else
    {
      v3 = &v7;
    }
    mediaplatform::FormatString<long long>(this, (std::string *)"{0}", v3);
  }
}

void sub_20A764378(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::_dateStringForCriteriaInfo(CriterionInfo)::$_0 &&>>()
{
  const __CFAllocator *v0;

  v0 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
  mlcore::_dateStringForCriteriaInfo(CriterionInfo)::locale = (uint64_t)CFLocaleCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], CFSTR("en"));
  mlcore::_dateStringForCriteriaInfo(CriterionInfo)::formatter = (uint64_t)CFDateFormatterCreate(v0, (CFLocaleRef)mlcore::_dateStringForCriteriaInfo(CriterionInfo)::locale, kCFDateFormatterNoStyle, kCFDateFormatterNoStyle);
  CFDateFormatterSetFormat((CFDateFormatterRef)mlcore::_dateStringForCriteriaInfo(CriterionInfo)::formatter, CFSTR("MM/dd/yyyy HH:mm"));
}

void mediaplatform::StringFromCFString(mediaplatform *this, CFStringRef theString)
{
  CFIndex Length;
  CFIndex MaximumSizeForEncoding;
  CFIndex v6;
  void *v7;
  __int128 v8;
  uint64_t v9;

  if (theString)
  {
    v8 = 0uLL;
    v9 = 0;
    Length = CFStringGetLength(theString);
    MaximumSizeForEncoding = CFStringGetMaximumSizeForEncoding(Length, 0x8000100u);
    if ((MaximumSizeForEncoding & 0x8000000000000000) == 0)
    {
      v6 = MaximumSizeForEncoding + 1;
      v7 = malloc_type_malloc(MaximumSizeForEncoding + 1, 0x1DE48D06uLL);
      if (CFStringGetCString(theString, (char *)v7, v6, 0x8000100u))
      {
        MEMORY[0x20BD277A8](&v8, v7);
        free(v7);
        *(_OWORD *)this = v8;
        *((_QWORD *)this + 2) = v9;
        return;
      }
      free(v7);
    }
    std::string::basic_string[abi:ne180100]<0>(this, "(invalid)");
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(this, "(null)");
  }
}

void sub_20A7644DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void mediaplatform::FormatImplementation<std::string,std::string,std::string,std::string,std::string>(std::string *a1, std::string *a2, std::string::size_type a3, uint64_t *a4)
{
  char v8;
  char *v9;
  std::string::size_type i;
  int v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  int v16;
  uint64_t v17;
  char *v18;
  char *v19;
  unsigned __int8 *v20;
  int v21;
  std::runtime_error *exception;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;

  v8 = 0;
  v9 = (char *)a1;
  for (i = a3; ; ++i)
  {
    v27 = v9;
    if (*v9 == 123)
      break;
    if (!*v9)
    {
      std::string::resize(a2, i, 0);
      if (i != a3)
        mediaplatform::CopyFormatSectionToResult(a1, a2, a3, i - a3, v8 & 1);
      return;
    }
LABEL_7:
    ++v9;
  }
  v11 = v9[1];
  if (v11 == 123)
  {
    v27 = v9 + 1;
    v8 = 1;
    ++v9;
    goto LABEL_7;
  }
  if (v11 == 42)
  {
    v27 = v9 + 2;
    v16 = v9[2];
    if ((v16 - 48) > 9)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Invalid format string- missing numeric value.");
    }
    else
    {
      v17 = 0;
      v18 = v9 + 3;
      do
      {
        v19 = v18;
        v27 = v18;
        v17 = (v16 - 48) + 10 * v17;
        ++v18;
        v21 = *v19;
        v20 = (unsigned __int8 *)(v19 - 1);
        v16 = v21;
      }
      while ((v21 - 58) >= 0xFFFFFFF6);
      v27 = (char *)(v20 + 2);
      if (*(v18 - 1) == 125)
        mediaplatform::FormatterParameters<0ul,std::string,std::string,std::string,std::string,std::string>::formatOptionsAtIndex<std::string,std::string,std::string,std::string,std::string>(v17);
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Invalid format options reference: Must be of form {*<index>} but no trailing '}' found.");
    }
    __cxa_throw(exception, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
  }
  mediaplatform::FormatOptions::FormatOptions((uint64_t)&v23, (const char **)&v27);
  switch(*((_QWORD *)&v23 + 1))
  {
    case 0:
      v12 = a4[4];
      break;
    case 1:
      v12 = a4[3];
      break;
    case 2:
      v12 = a4[2];
      break;
    case 3:
      v12 = a4[1];
      break;
    case 4:
      v12 = *a4;
      break;
    default:
      mediaplatform::FormatterParameters<5ul>::formatParameterAtIndex<mediaplatform::FormatterParameters<0ul,std::string,std::string,std::string,std::string,std::string>>();
  }
  v28 = v12;
  v29 = v23;
  v30 = v24;
  v31 = v25;
  v32 = v26;
  if (*(char *)(v12 + 23) < 0)
    v13 = *(_QWORD *)(v12 + 8);
  else
    v13 = *(unsigned __int8 *)(v12 + 23);
  v14 = *((_QWORD *)&v24 + 1);
  if (*((_QWORD *)&v24 + 1) <= v13)
    v14 = v13;
  if ((_BYTE)v24)
    v13 = v14;
  mediaplatform::FormatImplementation<std::string,std::string,std::string,std::string,std::string>(v27, a2, v13 + i, a4);
  if ((a2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v15 = (char *)a2;
  else
    v15 = (char *)a2->__r_.__value_.__r.__words[0];
  mediaplatform::FormatOptions::justifyNativeValueOfLength<std::__wrap_iter<char *>,std::string>(&v23, &v15[i], (uint64_t)&v28);
  if (i != a3)
    mediaplatform::CopyFormatSectionToResult(a1, a2, a3, i - a3, v8 & 1);
}

void sub_20A76476C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void mediaplatform::FormatterParameters<0ul,std::string,std::string,std::string,std::string,std::string>::formatOptionsAtIndex<std::string,std::string,std::string,std::string,std::string>(uint64_t a1)
{
  std::runtime_error *exception;

  if (!a1)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Requested parameter is not an FormatOptions instance.");
    __cxa_throw(exception, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
  }
  mediaplatform::FormatterParameters<1ul,std::string,std::string,std::string,std::string>::formatOptionsAtIndex<std::string,std::string,std::string,std::string,std::string>(a1);
}

void sub_20A7647C8(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void mediaplatform::FormatterParameters<5ul>::formatParameterAtIndex<mediaplatform::FormatterParameters<0ul,std::string,std::string,std::string,std::string,std::string>>()
{
  std::runtime_error *exception;

  exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
  std::runtime_error::runtime_error(exception, "Parameter index out of bounds.");
  __cxa_throw(exception, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
}

void sub_20A764818(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void mediaplatform::FormatterParameters<1ul,std::string,std::string,std::string,std::string>::formatOptionsAtIndex<std::string,std::string,std::string,std::string,std::string>(uint64_t a1)
{
  std::runtime_error *exception;

  if (a1 == 1)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Requested parameter is not an FormatOptions instance.");
    __cxa_throw(exception, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
  }
  mediaplatform::FormatterParameters<2ul,std::string,std::string,std::string>::formatOptionsAtIndex<std::string,std::string,std::string,std::string,std::string>(a1);
}

void sub_20A764874(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void mediaplatform::FormatterParameters<2ul,std::string,std::string,std::string>::formatOptionsAtIndex<std::string,std::string,std::string,std::string,std::string>(uint64_t a1)
{
  std::runtime_error *exception;

  if (a1 == 2)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Requested parameter is not an FormatOptions instance.");
    __cxa_throw(exception, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
  }
  mediaplatform::FormatterParameters<3ul,std::string,std::string>::formatOptionsAtIndex<std::string,std::string,std::string,std::string,std::string>(a1);
}

void sub_20A7648D0(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void mediaplatform::FormatterParameters<3ul,std::string,std::string>::formatOptionsAtIndex<std::string,std::string,std::string,std::string,std::string>(uint64_t a1)
{
  std::runtime_error *exception;

  if (a1 == 3)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Requested parameter is not an FormatOptions instance.");
    __cxa_throw(exception, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
  }
  mediaplatform::FormatterParameters<4ul,std::string>::formatOptionsAtIndex<std::string,std::string,std::string,std::string,std::string>(a1);
}

void sub_20A76492C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void mediaplatform::FormatterParameters<4ul,std::string>::formatOptionsAtIndex<std::string,std::string,std::string,std::string,std::string>(uint64_t a1)
{
  std::runtime_error *exception;

  if (a1 == 4)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Requested parameter is not an FormatOptions instance.");
    __cxa_throw(exception, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
  }
  mediaplatform::FormatterParameters<5ul>::formatOptionsAtIndex<std::string,std::string,std::string,std::string,std::string>();
}

void sub_20A764988(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void mediaplatform::FormatterParameters<5ul>::formatOptionsAtIndex<std::string,std::string,std::string,std::string,std::string>()
{
  std::runtime_error *exception;

  exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
  std::runtime_error::runtime_error(exception, "Parameter index out of bounds.");
  __cxa_throw(exception, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
}

void sub_20A7649D8(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void mediaplatform::FormatterParameters<0ul,std::string,std::string>::formatOptionsAtIndex<std::string,std::string>(uint64_t a1)
{
  std::runtime_error *exception;

  if (!a1)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Requested parameter is not an FormatOptions instance.");
    __cxa_throw(exception, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
  }
  mediaplatform::FormatterParameters<1ul,std::string>::formatOptionsAtIndex<std::string,std::string>(a1);
}

void sub_20A764A30(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void mediaplatform::FormatterParameters<2ul>::formatParameterAtIndex<mediaplatform::FormatterParameters<0ul,std::string,std::string>>()
{
  std::runtime_error *exception;

  exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
  std::runtime_error::runtime_error(exception, "Parameter index out of bounds.");
  __cxa_throw(exception, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
}

void sub_20A764A80(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void mediaplatform::FormatterParameters<1ul,std::string>::formatOptionsAtIndex<std::string,std::string>(uint64_t a1)
{
  std::runtime_error *exception;

  if (a1 == 1)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Requested parameter is not an FormatOptions instance.");
    __cxa_throw(exception, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
  }
  mediaplatform::FormatterParameters<2ul>::formatOptionsAtIndex<std::string,std::string>();
}

void sub_20A764ADC(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void mediaplatform::FormatterParameters<2ul>::formatOptionsAtIndex<std::string,std::string>()
{
  std::runtime_error *exception;

  exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
  std::runtime_error::runtime_error(exception, "Parameter index out of bounds.");
  __cxa_throw(exception, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
}

void sub_20A764B2C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void mediaplatform::FormatString<long long>(std::string *a1, std::string *a2, uint64_t *a3)
{
  uint64_t *v3;

  v3 = a3;
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  a1->__r_.__value_.__r.__words[0] = 0;
  mediaplatform::FormatImplementation<long long>(a2, a1, 0, &v3);
}

void sub_20A764B84(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void mediaplatform::FormatImplementation<long long,long long,long long>(std::string *a1, std::string *a2, std::string::size_type a3, uint64_t **a4)
{
  char v8;
  char *v9;
  std::string::size_type i;
  int v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char *v23;
  int v24;
  uint64_t v25;
  char *v26;
  char *v27;
  unsigned __int8 *v28;
  int v29;
  std::runtime_error *exception;
  char v31[8];
  uint64_t v32;
  char v33;
  unint64_t v34;
  char *v35;
  uint64_t v36[9];
  uint64_t v37;
  char v38;
  uint64_t v39;

  v8 = 0;
  v39 = *MEMORY[0x24BDAC8D0];
  v9 = (char *)a1;
  for (i = a3; ; ++i)
  {
    v35 = v9;
    if (*v9 == 123)
      break;
    if (!*v9)
    {
      std::string::resize(a2, i, 0);
      if (i != a3)
        mediaplatform::CopyFormatSectionToResult(a1, a2, a3, i - a3, v8 & 1);
      return;
    }
LABEL_7:
    ++v9;
  }
  v11 = v9[1];
  if (v11 == 123)
  {
    v35 = v9 + 1;
    v8 = 1;
    ++v9;
    goto LABEL_7;
  }
  if (v11 == 42)
  {
    v35 = v9 + 2;
    v24 = v9[2];
    if ((v24 - 48) > 9)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Invalid format string- missing numeric value.");
    }
    else
    {
      v25 = 0;
      v26 = v9 + 3;
      do
      {
        v27 = v26;
        v35 = v26;
        v25 = (v24 - 48) + 10 * v25;
        ++v26;
        v29 = *v27;
        v28 = (unsigned __int8 *)(v27 - 1);
        v24 = v29;
      }
      while ((v29 - 58) >= 0xFFFFFFF6);
      v35 = (char *)(v28 + 2);
      if (*(v26 - 1) == 125)
        mediaplatform::FormatterParameters<0ul,long long,long long,long long>::formatOptionsAtIndex<long long,long long,long long>(v25);
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Invalid format options reference: Must be of form {*<index>} but no trailing '}' found.");
    }
    __cxa_throw(exception, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
  }
  mediaplatform::FormatOptions::FormatOptions((uint64_t)v31, (const char **)&v35);
  v12 = v35;
  if (v32)
  {
    if (v32 == 1)
    {
      mediaplatform::TypeFormatter<long long,void>::TypeFormatter((uint64_t)v36, *a4[1], (uint64_t)v31);
      if (v38 && !*(_BYTE *)(v36[0] + 48))
        v14 = 64;
      else
        v14 = 65;
      v16 = v14 - v37;
      if (*(_BYTE *)(v36[0] + 50) && v16 <= *(_QWORD *)(v36[0] + 24))
        v16 = *(_QWORD *)(v36[0] + 24);
      v17 = v34;
      if (v34 <= v16)
        v17 = v16;
      if (v33)
        v18 = v17;
      else
        v18 = v16;
    }
    else
    {
      if (v32 != 2)
        mediaplatform::FormatterParameters<3ul>::formatParameterAtIndex<mediaplatform::FormatterParameters<0ul,long long,long long,long long>>();
      mediaplatform::TypeFormatter<long long,void>::TypeFormatter((uint64_t)v36, **a4, (uint64_t)v31);
      if (v38 && !*(_BYTE *)(v36[0] + 48))
        v13 = 64;
      else
        v13 = 65;
      v21 = v13 - v37;
      if (*(_BYTE *)(v36[0] + 50) && v21 <= *(_QWORD *)(v36[0] + 24))
        v21 = *(_QWORD *)(v36[0] + 24);
      v22 = v34;
      if (v34 <= v21)
        v22 = v21;
      if (v33)
        v18 = v22;
      else
        v18 = v21;
    }
  }
  else
  {
    mediaplatform::TypeFormatter<long long,void>::TypeFormatter((uint64_t)v36, *a4[2], (uint64_t)v31);
    if (v38 && !*(_BYTE *)(v36[0] + 48))
      v15 = 64;
    else
      v15 = 65;
    v19 = v15 - v37;
    if (*(_BYTE *)(v36[0] + 50) && v19 <= *(_QWORD *)(v36[0] + 24))
      v19 = *(_QWORD *)(v36[0] + 24);
    v20 = v34;
    if (v34 <= v19)
      v20 = v19;
    if (v33)
      v18 = v20;
    else
      v18 = v19;
  }
  mediaplatform::FormatImplementation<long long,long long,long long>(v12, a2, v18 + i, a4);
  if ((a2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v23 = (char *)a2;
  else
    v23 = (char *)a2->__r_.__value_.__r.__words[0];
  mediaplatform::FormatOptions::justifyNativeValueOfLength<std::__wrap_iter<char *>,long long>(v31, &v23[i], v36);
  if (i != a3)
    mediaplatform::CopyFormatSectionToResult(a1, a2, a3, i - a3, v8 & 1);
}

void sub_20A764F58(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void mediaplatform::FormatterParameters<0ul,long long,long long,long long>::formatOptionsAtIndex<long long,long long,long long>(uint64_t a1)
{
  std::runtime_error *exception;

  if (!a1)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Requested parameter is not an FormatOptions instance.");
    __cxa_throw(exception, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
  }
  mediaplatform::FormatterParameters<1ul,long long,long long>::formatOptionsAtIndex<long long,long long,long long>(a1);
}

void sub_20A764FBC(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t mediaplatform::TypeFormatter<long long,void>::TypeFormatter(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  BOOL v4;
  unint64_t v5;
  _BYTE *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;

  *(_QWORD *)result = a3;
  *(_QWORD *)(result + 72) = 0;
  *(_BYTE *)(result + 80) = a2 >= 0;
  switch(*(_DWORD *)(a3 + 4))
  {
    case 0:
      v3 = 71;
      if (a2 < 0)
      {
        do
        {
          *(_BYTE *)(result + v3) = 48 - (char)a2 % 10;
          v11 = a2 + 9;
          --v3;
          a2 /= 10;
        }
        while (v11 >= 0x13);
      }
      else
      {
        do
        {
          *(_BYTE *)(result + v3--) = (a2 % 0xAuLL) | 0x30;
          v4 = (unint64_t)a2 >= 0xA;
          a2 /= 0xAuLL;
        }
        while (v4);
      }
      goto LABEL_26;
    case 1:
      if (a2 >= 0)
        v5 = a2;
      else
        v5 = -a2;
      v3 = 71;
      do
      {
        *(_BYTE *)(result + v3--) = v5 & 7 | 0x30;
        v4 = v5 >= 8;
        v5 >>= 3;
      }
      while (v4);
      goto LABEL_26;
    case 2:
      v6 = &mediaplatform::TypeFormatterUpperHexMapping;
      if (!*(_BYTE *)(a3 + 51))
        v6 = &mediaplatform::TypeFormatterLowerHexMapping;
      if (a2 >= 0)
        v7 = a2;
      else
        v7 = -a2;
      v8 = 71;
      do
      {
        *(_BYTE *)(result + v8--) = v6[v7 & 0xF];
        v4 = v7 >= 0x10;
        v7 >>= 4;
      }
      while (v4);
      v9 = v8 - 7;
      goto LABEL_27;
    case 3:
      if (a2 >= 0)
        v10 = a2;
      else
        v10 = -a2;
      v3 = 71;
      do
      {
        *(_BYTE *)(result + v3--) = v10 & 1 | 0x30;
        v4 = v10 >= 2;
        v10 >>= 1;
      }
      while (v4);
LABEL_26:
      v9 = v3 - 7;
LABEL_27:
      *(_QWORD *)(result + 72) = v9;
      break;
    default:
      return result;
  }
  return result;
}

char *mediaplatform::FormatOptions::justifyNativeValueOfLength<std::__wrap_iter<char *>,long long>(char *result, char *a2, uint64_t *a3)
{
  char *v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  int v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  uint64_t v16;
  char *v18;

  v3 = a2;
  v4 = result;
  v5 = *a3;
  if (*((_BYTE *)a3 + 80) && !*(_BYTE *)(v5 + 48))
    v6 = 64;
  else
    v6 = 65;
  v7 = v6 - a3[9];
  if (*(_BYTE *)(v5 + 50))
  {
    v8 = *(_QWORD *)(v5 + 24);
    if (v7 <= v8)
      v7 = v8;
  }
  if (!result[16])
    return mediaplatform::TypeFormatter<long long,void>::formatAtLocation<std::__wrap_iter<char *>>((char *)a3, v3);
  v9 = *((_QWORD *)result + 3);
  v10 = v9 - v7;
  if (v9 <= v7)
    return mediaplatform::TypeFormatter<long long,void>::formatAtLocation<std::__wrap_iter<char *>>((char *)a3, v3);
  v11 = *(_DWORD *)result;
  if (*(_DWORD *)result)
  {
    if (v11 != 1)
    {
      if (v11 != 2)
        return result;
      if (v9 != v7)
      {
        do
        {
          *v3++ = result[52];
          --v10;
        }
        while (v10);
      }
      return mediaplatform::TypeFormatter<long long,void>::formatAtLocation<std::__wrap_iter<char *>>((char *)a3, v3);
    }
    v12 = v10 >> 1;
    if (v10 >= 2)
    {
      if (v12 <= 1)
        v13 = 1;
      else
        v13 = v10 >> 1;
      do
      {
        *v3++ = result[52];
        --v13;
      }
      while (v13);
    }
    result = mediaplatform::TypeFormatter<long long,void>::formatAtLocation<std::__wrap_iter<char *>>((char *)a3, v3);
    if (v10 != v12)
    {
      v14 = v10 - (v10 >> 1);
      v15 = &v3[v7];
      if (v14 <= 1)
        v14 = 1;
      v16 = -(uint64_t)v14;
      do
        *v15++ = v4[52];
      while (!__CFADD__(v16++, 1));
    }
  }
  else
  {
    result = mediaplatform::TypeFormatter<long long,void>::formatAtLocation<std::__wrap_iter<char *>>((char *)a3, a2);
    if (v9 != v7)
    {
      v18 = &v3[v7];
      do
      {
        *v18++ = v4[52];
        --v10;
      }
      while (v10);
    }
  }
  return result;
}

char *mediaplatform::TypeFormatter<long long,void>::formatAtLocation<std::__wrap_iter<char *>>(char *result, char *a2)
{
  uint64_t v2;
  char *v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  unint64_t v7;
  char *v8;

  v3 = result + 72;
  v2 = *((_QWORD *)result + 9);
  if (result[80])
  {
    v4 = *(_QWORD *)result;
    if (!*(_BYTE *)(*(_QWORD *)result + 48))
    {
      v6 = 0;
      goto LABEL_7;
    }
    v5 = *(_BYTE *)(v4 + 49);
  }
  else
  {
    v5 = 45;
  }
  *a2++ = v5;
  v4 = *(_QWORD *)result;
  v6 = 1;
LABEL_7:
  if (*(_BYTE *)(v4 + 16))
  {
    if (*(_BYTE *)(v4 + 50))
    {
      v7 = v6 - v2 + 64;
      if (v7 < *(_QWORD *)(v4 + 24))
      {
        do
        {
          *a2++ = 48;
          ++v7;
        }
        while (v7 < *(_QWORD *)(*(_QWORD *)result + 24));
      }
    }
  }
  v8 = &result[*((_QWORD *)result + 9) + 8];
  if (v3 != v8)
    return (char *)memmove(a2, v8, v3 - v8);
  return result;
}

void mediaplatform::FormatterParameters<3ul>::formatParameterAtIndex<mediaplatform::FormatterParameters<0ul,long long,long long,long long>>()
{
  std::runtime_error *exception;

  exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
  std::runtime_error::runtime_error(exception, "Parameter index out of bounds.");
  __cxa_throw(exception, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
}

void sub_20A76536C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void mediaplatform::FormatterParameters<1ul,long long,long long>::formatOptionsAtIndex<long long,long long,long long>(uint64_t a1)
{
  std::runtime_error *exception;

  if (a1 == 1)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Requested parameter is not an FormatOptions instance.");
    __cxa_throw(exception, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
  }
  mediaplatform::FormatterParameters<2ul,long long>::formatOptionsAtIndex<long long,long long,long long>(a1);
}

void sub_20A7653C8(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void mediaplatform::FormatterParameters<2ul,long long>::formatOptionsAtIndex<long long,long long,long long>(uint64_t a1)
{
  std::runtime_error *exception;

  if (a1 == 2)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Requested parameter is not an FormatOptions instance.");
    __cxa_throw(exception, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
  }
  mediaplatform::FormatterParameters<3ul>::formatOptionsAtIndex<long long,long long,long long>();
}

void sub_20A765424(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void mediaplatform::FormatterParameters<3ul>::formatOptionsAtIndex<long long,long long,long long>()
{
  std::runtime_error *exception;

  exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
  std::runtime_error::runtime_error(exception, "Parameter index out of bounds.");
  __cxa_throw(exception, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
}

void sub_20A765474(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void mediaplatform::FormatImplementation<long long>(std::string *a1, std::string *a2, std::string::size_type a3, uint64_t **a4)
{
  char v8;
  char *v9;
  std::string::size_type i;
  int v11;
  char *v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  char *v17;
  int v18;
  uint64_t v19;
  char *v20;
  char *v21;
  unsigned __int8 *v22;
  int v23;
  std::runtime_error *exception;
  char v25[8];
  uint64_t v26;
  char v27;
  unint64_t v28;
  char *v29;
  uint64_t v30[10];
  char v31;
  uint64_t v32;

  v8 = 0;
  v32 = *MEMORY[0x24BDAC8D0];
  v9 = (char *)a1;
  for (i = a3; ; ++i)
  {
    v29 = v9;
    if (*v9 == 123)
      break;
    if (!*v9)
    {
      std::string::resize(a2, i, 0);
      if (i != a3)
        mediaplatform::CopyFormatSectionToResult(a1, a2, a3, i - a3, v8 & 1);
      return;
    }
LABEL_7:
    ++v9;
  }
  v11 = v9[1];
  if (v11 == 123)
  {
    v29 = v9 + 1;
    v8 = 1;
    ++v9;
    goto LABEL_7;
  }
  if (v11 == 42)
  {
    v29 = v9 + 2;
    v18 = v9[2];
    if ((v18 - 48) > 9)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Invalid format string- missing numeric value.");
    }
    else
    {
      v19 = 0;
      v20 = v9 + 3;
      do
      {
        v21 = v20;
        v29 = v20;
        v19 = (v18 - 48) + 10 * v19;
        ++v20;
        v23 = *v21;
        v22 = (unsigned __int8 *)(v21 - 1);
        v18 = v23;
      }
      while ((v23 - 58) >= 0xFFFFFFF6);
      v29 = (char *)(v22 + 2);
      if (*(v20 - 1) == 125)
        mediaplatform::FormatterParameters<0ul,long long>::formatOptionsAtIndex<long long>(v19);
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Invalid format options reference: Must be of form {*<index>} but no trailing '}' found.");
    }
    __cxa_throw(exception, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
  }
  mediaplatform::FormatOptions::FormatOptions((uint64_t)v25, (const char **)&v29);
  if (v26)
    mediaplatform::FormatterParameters<1ul>::formatParameterAtIndex<mediaplatform::FormatterParameters<0ul,long long>>();
  v12 = v29;
  mediaplatform::TypeFormatter<long long,void>::TypeFormatter((uint64_t)v30, **a4, (uint64_t)v25);
  if (v31 && !*(_BYTE *)(v30[0] + 48))
    v13 = 64;
  else
    v13 = 65;
  v14 = v13 - v30[9];
  if (*(_BYTE *)(v30[0] + 50) && v14 <= *(_QWORD *)(v30[0] + 24))
    v14 = *(_QWORD *)(v30[0] + 24);
  v15 = v28;
  if (v28 <= v14)
    v15 = v14;
  if (v27)
    v16 = v15;
  else
    v16 = v14;
  mediaplatform::FormatImplementation<long long>(v12, a2, v16 + i, a4);
  if ((a2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v17 = (char *)a2;
  else
    v17 = (char *)a2->__r_.__value_.__r.__words[0];
  mediaplatform::FormatOptions::justifyNativeValueOfLength<std::__wrap_iter<char *>,long long>(v25, &v17[i], v30);
  if (i != a3)
    mediaplatform::CopyFormatSectionToResult(a1, a2, a3, i - a3, v8 & 1);
}

void sub_20A765730(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void mediaplatform::FormatterParameters<0ul,long long>::formatOptionsAtIndex<long long>(uint64_t a1)
{
  std::runtime_error *exception;

  if (!a1)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Requested parameter is not an FormatOptions instance.");
    __cxa_throw(exception, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
  }
  mediaplatform::FormatterParameters<1ul>::formatOptionsAtIndex<long long>();
}

void sub_20A765794(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void mediaplatform::FormatterParameters<1ul>::formatParameterAtIndex<mediaplatform::FormatterParameters<0ul,long long>>()
{
  std::runtime_error *exception;

  exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
  std::runtime_error::runtime_error(exception, "Parameter index out of bounds.");
  __cxa_throw(exception, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
}

void sub_20A7657E4(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void mediaplatform::FormatterParameters<1ul>::formatOptionsAtIndex<long long>()
{
  std::runtime_error *exception;

  exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
  std::runtime_error::runtime_error(exception, "Parameter index out of bounds.");
  __cxa_throw(exception, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
}

void sub_20A765834(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void mediaplatform::FormatImplementation<long long,int>(std::string *a1, std::string *a2, std::string::size_type a3, uint64_t a4)
{
  char v8;
  char *v9;
  std::string::size_type i;
  int v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  char *v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char *v22;
  int v23;
  uint64_t v24;
  char *v25;
  char *v26;
  unsigned __int8 *v27;
  int v28;
  std::runtime_error *exception;
  char v30[8];
  uint64_t v31;
  char v32;
  unint64_t v33;
  char *v34;
  uint64_t v35[6];
  char v36;
  uint64_t v37;
  char v38;
  uint64_t v39;

  v8 = 0;
  v39 = *MEMORY[0x24BDAC8D0];
  v9 = (char *)a1;
  for (i = a3; ; ++i)
  {
    v34 = v9;
    if (*v9 == 123)
      break;
    if (!*v9)
    {
      std::string::resize(a2, i, 0);
      if (i != a3)
        mediaplatform::CopyFormatSectionToResult(a1, a2, a3, i - a3, v8 & 1);
      return;
    }
LABEL_7:
    ++v9;
  }
  v11 = v9[1];
  if (v11 == 123)
  {
    v34 = v9 + 1;
    v8 = 1;
    ++v9;
    goto LABEL_7;
  }
  if (v11 == 42)
  {
    v34 = v9 + 2;
    v23 = v9[2];
    if ((v23 - 48) > 9)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Invalid format string- missing numeric value.");
    }
    else
    {
      v24 = 0;
      v25 = v9 + 3;
      do
      {
        v26 = v25;
        v34 = v25;
        v24 = (v23 - 48) + 10 * v24;
        ++v25;
        v28 = *v26;
        v27 = (unsigned __int8 *)(v26 - 1);
        v23 = v28;
      }
      while ((v28 - 58) >= 0xFFFFFFF6);
      v34 = (char *)(v27 + 2);
      if (*(v25 - 1) == 125)
        mediaplatform::FormatterParameters<0ul,long long,int>::formatOptionsAtIndex<long long,int>(v24);
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Invalid format options reference: Must be of form {*<index>} but no trailing '}' found.");
    }
    __cxa_throw(exception, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
  }
  mediaplatform::FormatOptions::FormatOptions((uint64_t)v30, (const char **)&v34);
  v12 = v34;
  if (v31)
  {
    if (v31 != 1)
      mediaplatform::FormatterParameters<2ul>::formatParameterAtIndex<mediaplatform::FormatterParameters<0ul,long long,int>>();
    mediaplatform::TypeFormatter<int,void>::TypeFormatter((uint64_t)v35, **(_DWORD **)a4, (uint64_t)v30);
    if (v36 && !*(_BYTE *)(v35[0] + 48))
      v13 = 32;
    else
      v13 = 33;
    v19 = v13 - v35[5];
    if (*(_BYTE *)(v35[0] + 50) && v19 <= *(_QWORD *)(v35[0] + 24))
      v19 = *(_QWORD *)(v35[0] + 24);
    v20 = v33;
    if (v33 <= v19)
      v20 = v19;
    if (v32)
      v21 = v20;
    else
      v21 = v19;
    mediaplatform::FormatImplementation<long long,int>(v12, a2, v21 + i, a4);
    if ((a2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v22 = (char *)a2;
    else
      v22 = (char *)a2->__r_.__value_.__r.__words[0];
    mediaplatform::FormatOptions::justifyNativeValueOfLength<std::__wrap_iter<char *>,int>(v30, &v22[i], v35);
  }
  else
  {
    mediaplatform::TypeFormatter<long long,void>::TypeFormatter((uint64_t)v35, **(_QWORD **)(a4 + 8), (uint64_t)v30);
    if (v38 && !*(_BYTE *)(v35[0] + 48))
      v14 = 64;
    else
      v14 = 65;
    v15 = v14 - v37;
    if (*(_BYTE *)(v35[0] + 50) && v15 <= *(_QWORD *)(v35[0] + 24))
      v15 = *(_QWORD *)(v35[0] + 24);
    v16 = v33;
    if (v33 <= v15)
      v16 = v15;
    if (v32)
      v17 = v16;
    else
      v17 = v15;
    mediaplatform::FormatImplementation<long long,int>(v12, a2, v17 + i, a4);
    if ((a2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v18 = (char *)a2;
    else
      v18 = (char *)a2->__r_.__value_.__r.__words[0];
    mediaplatform::FormatOptions::justifyNativeValueOfLength<std::__wrap_iter<char *>,long long>(v30, &v18[i], v35);
  }
  if (i != a3)
    mediaplatform::CopyFormatSectionToResult(a1, a2, a3, i - a3, v8 & 1);
}

void sub_20A765B98(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void mediaplatform::FormatterParameters<0ul,long long,int>::formatOptionsAtIndex<long long,int>(uint64_t a1)
{
  std::runtime_error *exception;

  if (!a1)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Requested parameter is not an FormatOptions instance.");
    __cxa_throw(exception, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
  }
  mediaplatform::FormatterParameters<1ul,int>::formatOptionsAtIndex<long long,int>(a1);
}

void sub_20A765BFC(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void mediaplatform::FormatterParameters<2ul>::formatParameterAtIndex<mediaplatform::FormatterParameters<0ul,long long,int>>()
{
  std::runtime_error *exception;

  exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
  std::runtime_error::runtime_error(exception, "Parameter index out of bounds.");
  __cxa_throw(exception, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
}

void sub_20A765C4C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void mediaplatform::FormatterParameters<1ul,int>::formatOptionsAtIndex<long long,int>(uint64_t a1)
{
  std::runtime_error *exception;

  if (a1 == 1)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Requested parameter is not an FormatOptions instance.");
    __cxa_throw(exception, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
  }
  mediaplatform::FormatterParameters<2ul>::formatOptionsAtIndex<long long,int>();
}

void sub_20A765CA8(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void mediaplatform::FormatterParameters<2ul>::formatOptionsAtIndex<long long,int>()
{
  std::runtime_error *exception;

  exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
  std::runtime_error::runtime_error(exception, "Parameter index out of bounds.");
  __cxa_throw(exception, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
}

void sub_20A765CF8(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void mlcore::Composer::~Composer(mlcore::Composer *this)
{
  *(_QWORD *)this = off_24C33A860;
  mlcore::PropertyCacheBase<long long,int,double,std::string,mediaplatform::Data>::~PropertyCacheBase((_QWORD *)this + 1);
}

{
  *(_QWORD *)this = off_24C33A860;
  mlcore::PropertyCacheBase<long long,int,double,std::string,mediaplatform::Data>::~PropertyCacheBase((_QWORD *)this + 1);
  JUMPOUT(0x20BD27AFCLL);
}

{
  *(_QWORD *)this = off_24C33A860;
  mlcore::PropertyCacheBase<long long,int,double,std::string,mediaplatform::Data>::~PropertyCacheBase((_QWORD *)this + 1);
}

double std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::TypedEntityClass<mlcore::Composer>::sharedPointer(void)::{lambda(void)#1} &&>>()
{
  uint64_t v0;
  double result;

  v0 = operator new();
  result = 0.0;
  *(_OWORD *)(v0 + 16) = 0u;
  *(_OWORD *)(v0 + 32) = 0u;
  *(_OWORD *)(v0 + 48) = 0u;
  *(_OWORD *)(v0 + 64) = 0u;
  *(_OWORD *)(v0 + 80) = 0u;
  *(_QWORD *)(v0 + 96) = 0;
  *(_DWORD *)(v0 + 104) = 1065353216;
  *(_OWORD *)(v0 + 112) = 0u;
  *(_OWORD *)(v0 + 128) = 0u;
  *(_DWORD *)(v0 + 144) = 1065353216;
  *(_QWORD *)v0 = &off_24C339380;
  *(_QWORD *)(v0 + 8) = 850045863;
  mlcore::TypedEntityClass<mlcore::Composer>::sharedPointer(void)::__sharedPointer = v0;
  return result;
}

void mlcore::TypedEntityClass<mlcore::Composer>::~TypedEntityClass(mlcore::EntityClass *a1)
{
  mlcore::EntityClass::~EntityClass(a1);
  JUMPOUT(0x20BD27AFCLL);
}

uint64_t mlcore::TypedEntityClass<mlcore::Composer>::description(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
}

double mlcore::TypedEntityClass<mlcore::Composer>::create@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, _OWORD *a4@<X8>)
{
  double v8;
  unint64_t *v9;
  uint64_t v10;
  double result;
  double v12[3];
  unint64_t v13[3];
  unint64_t *v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  std::allocate_shared[abi:ne180100]<mlcore::Composer,std::allocator<mlcore::Composer>,long long &,void>(v12, a2);
  v8 = v12[0];
  v13[0] = (unint64_t)&off_24C33B140;
  v14 = v13;
  mlcore::PropertyCache::mergePropertiesFromCache(*(_QWORD *)&v12[0] + 8, a3, (uint64_t)v13);
  v9 = v14;
  if (v14 == v13)
  {
    v10 = 4;
    v9 = v13;
    goto LABEL_5;
  }
  if (v14)
  {
    v10 = 5;
LABEL_5:
    (*(void (**)(void))(*v9 + 8 * v10))();
  }
  v13[0] = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 112))(a1);
  std::__hash_table<std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>,std::__unordered_map_hasher<mlcore::ModelProperty<long long> *,std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>,std::hash<mlcore::ModelProperty<long long> *>,std::equal_to<mlcore::ModelProperty<long long> *>,true>,std::__unordered_map_equal<mlcore::ModelProperty<long long> *,std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>,std::equal_to<mlcore::ModelProperty<long long> *>,std::hash<mlcore::ModelProperty<long long> *>,true>,std::allocator<std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>>>::__emplace_unique_key_args<mlcore::ModelProperty<long long> *,std::piecewise_construct_t const&,std::tuple<mlcore::ModelProperty<long long> * const&>,std::tuple<>>(*(_QWORD *)&v8 + 176, v13[0], v13)[3] = a2;
  result = v12[0];
  *a4 = *(_OWORD *)v12;
  return result;
}

void sub_20A765F14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15)
{
  char *v15;
  char *v17;
  uint64_t v18;

  v17 = a15;
  if (a15 == v15)
  {
    v18 = 4;
    v17 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v18 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v17 + 8 * v18))();
LABEL_6:
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t mlcore::TypedEntityClass<mlcore::Composer>::name(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
}

BOOL mlcore::TypedEntityClass<mlcore::Composer>::isRevisionTrackable(uint64_t a1)
{
  return (*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1) != -1;
}

uint64_t mlcore::TypedEntityClass<mlcore::Composer>::isCloudUpdatable()
{
  return 0;
}

void mlcore::TypedEntityClass<mlcore::Composer>::databaseTablesToDeleteFrom(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

void mlcore::TypedEntityClass<mlcore::Composer>::databaseTablesToInsertInto(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

uint64_t mlcore::TypedEntityClass<mlcore::Composer>::sectionPropertyForOrderingProperty(mlcore *a1, mlcore *a2)
{
  mlcore *v3;

  v3 = (mlcore *)mlcore::ComposerPropertyOrder(a1);
  if (v3 == a2)
    return mlcore::ComposerPropertyOrderSection(v3);
  else
    return 0;
}

uint64_t mlcore::ComposerPropertyOrderSection(mlcore *this)
{
  mlcore *v1;
  uint64_t v2;
  uint64_t v4[2];

  v1 = (mlcore *)mlcore::ComposerPropertyRepresentativeItemPersistentID(this);
  v2 = mlcore::ItemPropertyComposerOrderSection(v1);
  v4[0] = 0;
  v4[1] = 0;
  return mlcore::GetForeignProperty<int>((uint64_t)v1, v2, v4);
}

void sub_20A766038(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ComposerPropertyRepresentativeItemPersistentID(void)::$_0 &&>>()
{
  uint64_t v0;
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  mlcore::ComposerTable **v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  std::string *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  std::string *v19;
  __int128 v20;
  std::string v21;
  std::string __p;
  char v23;
  _QWORD v24[2];

  v0 = operator new();
  v1 = (_QWORD *)mediaplatform::Singleton<mlcore::ComposerTable>::sharedInstance();
  v2 = (std::__shared_weak_count *)v1[1];
  v24[0] = *v1;
  v24[1] = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  v5 = (mlcore::ComposerTable **)mediaplatform::Singleton<mlcore::ComposerTable>::sharedInstance();
  mlcore::ComposerTable::representativeItemPersistentIDColumn(*v5, (uint64_t)&__p);
  mlcore::DatabaseModelProperty<long long>::DatabaseModelProperty(v0, v24, (uint64_t)&__p);
  mlcore::ComposerPropertyRepresentativeItemPersistentID(void)::property = v0;
  if (v23 < 0)
    operator delete((void *)__p.__r_.__value_.__l.__size_);
  if (v2)
  {
    v6 = (unint64_t *)&v2->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v8 = mlcore::ComposerPropertyRepresentativeItemPersistentID(void)::property;
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  std::string::operator=((std::string *)(v8 + 40), &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v9 = mlcore::TypedEntityClass<mlcore::Composer>::sharedPointer();
  v10 = mlcore::ComposerPropertyRepresentativeItemPersistentID(void)::property;
  v11 = mediaplatform::Singleton<mlcore::ComposerTable>::sharedInstance();
  v12 = *(_QWORD *)v11;
  if (*(char *)(*(_QWORD *)v11 + 31) >= 0)
    v13 = *(unsigned __int8 *)(*(_QWORD *)v11 + 31);
  else
    v13 = *(_QWORD *)(*(_QWORD *)v11 + 16);
  v14 = &v21;
  std::string::basic_string[abi:ne180100]((uint64_t)&v21, v13 + 1);
  if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v14 = (std::string *)v21.__r_.__value_.__r.__words[0];
  if (v13)
  {
    v17 = *(char **)(v12 + 8);
    v16 = (char *)(v12 + 8);
    v15 = v17;
    if (v16[23] >= 0)
      v18 = v16;
    else
      v18 = v15;
    memmove(v14, v18, v13);
  }
  *(_WORD *)((char *)&v14->__r_.__value_.__l.__data_ + v13) = 46;
  v19 = std::string::append(&v21, "representativeItem");
  v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  __p.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  mlcore::EntityClass::setPropertyForName(v9, v10, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
}

void sub_20A766220(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

void mlcore::DatabaseModelProperty<long long>::~DatabaseModelProperty(mlcore::ModelPropertyBase *this)
{
  *(_QWORD *)this = off_24C33A190;
  *((_QWORD *)this + 9) = off_24C335D90;
  if (*((char *)this + 103) < 0)
    operator delete(*((void **)this + 10));
  mlcore::ModelPropertyBase::~ModelPropertyBase((void **)this);
}

{
  *(_QWORD *)this = off_24C33A190;
  *((_QWORD *)this + 9) = off_24C335D90;
  if (*((char *)this + 103) < 0)
    operator delete(*((void **)this + 10));
  mlcore::ModelPropertyBase::~ModelPropertyBase((void **)this);
  JUMPOUT(0x20BD27AFCLL);
}

void mlcore::DatabaseModelProperty<long long>::description(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  uint64_t v4;
  size_t v5;
  std::string *v6;
  char *v7;
  char *v8;
  char *v9;
  char *v10;
  std::string *p_p;
  std::string::size_type size;
  std::string *v13;
  std::string __p;
  std::string v15;

  v4 = *(_QWORD *)(a1 + 64);
  if (*(char *)(v4 + 31) >= 0)
    v5 = *(unsigned __int8 *)(v4 + 31);
  else
    v5 = *(_QWORD *)(v4 + 16);
  v6 = &v15;
  std::string::basic_string[abi:ne180100]((uint64_t)&v15, v5 + 1);
  if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v6 = (std::string *)v15.__r_.__value_.__r.__words[0];
  if (v5)
  {
    v9 = *(char **)(v4 + 8);
    v8 = (char *)(v4 + 8);
    v7 = v9;
    if (v8[23] >= 0)
      v10 = v8;
    else
      v10 = v7;
    memmove(v6, v10, v5);
  }
  *(_WORD *)((char *)&v6->__r_.__value_.__l.__data_ + v5) = 46;
  if (*(char *)(a1 + 103) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(a1 + 80), *(_QWORD *)(a1 + 88));
  else
    __p = *(std::string *)(a1 + 80);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    size = __p.__r_.__value_.__l.__size_;
  v13 = std::string::append(&v15, (const std::string::value_type *)p_p, size);
  *a2 = *v13;
  v13->__r_.__value_.__l.__size_ = 0;
  v13->__r_.__value_.__r.__words[2] = 0;
  v13->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v15.__r_.__value_.__l.__data_);
}

void sub_20A7664A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::allocate_shared[abi:ne180100]<mediaplatform::SQLUsingJoinConstraint,std::allocator<mediaplatform::SQLUsingJoinConstraint>,std::shared_ptr<mediaplatform::SQLColumnNameExpression>,void>(_QWORD *a1, __int128 *a2)
{
  char *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  __int128 v8;

  v4 = (char *)operator new(0x38uLL);
  *(_OWORD *)(v4 + 8) = 0u;
  *(_QWORD *)v4 = &off_24C33C0C0;
  v8 = *a2;
  v7 = (std::__shared_weak_count *)*((_QWORD *)&v8 + 1);
  *a2 = 0u;
  mediaplatform::SQLUsingJoinConstraint::SQLUsingJoinConstraint((_QWORD *)v4 + 3, (uint64_t *)&v8);
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  *a1 = v4 + 24;
  a1[1] = v4;
}

void sub_20A766580(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  std::__shared_weak_count *v3;
  void *v5;
  va_list va;

  va_start(va, a3);
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::__shared_weak_count::~__shared_weak_count(v3);
  operator delete(v5);
  _Unwind_Resume(a1);
}

void std::allocate_shared[abi:ne180100]<mediaplatform::SQLJoinClause,std::allocator<mediaplatform::SQLJoinClause>,mediaplatform::SQLJoinClause::JoinOperator &,std::string const&,std::shared_ptr<mediaplatform::SQLUsingJoinConstraint> &,void>(_QWORD *a1, int a2, uint64_t a3, uint64_t *a4)
{
  char *v8;
  std::__shared_weak_count *v9;
  uint64_t v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  std::string *v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t v16;
  std::string v17;

  v8 = (char *)operator new(0x50uLL);
  *((_QWORD *)v8 + 1) = 0;
  *((_QWORD *)v8 + 2) = 0;
  *(_QWORD *)v8 = &off_24C33B988;
  if (*(char *)(a3 + 23) < 0)
    std::string::__init_copy_ctor_external(&v17, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
  else
    v17 = *(std::string *)a3;
  v10 = *a4;
  v9 = (std::__shared_weak_count *)a4[1];
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
  }
  *((_QWORD *)v8 + 3) = off_24C330D60;
  *((_DWORD *)v8 + 8) = a2;
  v13 = (std::string *)(v8 + 40);
  if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v13, v17.__r_.__value_.__l.__data_, v17.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v13->__r_.__value_.__l.__data_ = *(_OWORD *)&v17.__r_.__value_.__l.__data_;
    *((_QWORD *)v8 + 7) = *((_QWORD *)&v17.__r_.__value_.__l + 2);
  }
  *((_QWORD *)v8 + 8) = v10;
  *((_QWORD *)v8 + 9) = v9;
  if (v9)
  {
    v14 = (unint64_t *)&v9->__shared_owners_;
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
    do
      v16 = __ldaxr(v14);
    while (__stlxr(v16 - 1, v14));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v17.__r_.__value_.__l.__data_);
  *a1 = v8 + 24;
  a1[1] = v8;
}

void sub_20A7666E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__shared_weak_count *v9;
  void *v10;
  void *v12;

  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  operator delete(v10);
  std::__shared_weak_count::~__shared_weak_count(v9);
  operator delete(v12);
  _Unwind_Resume(a1);
}

mlcore::ItemKVSTable *_ZNSt3__115allocate_sharedB8ne180100IN6mlcore12ItemKVSTableENS_9allocatorIS2_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(mlcore::ItemKVSTable **a1)
{
  _QWORD *v2;
  mlcore::ItemKVSTable *result;

  v2 = operator new(0x148uLL);
  v2[1] = 0;
  v2[2] = 0;
  *v2 = &off_24C33C5C8;
  result = mlcore::ItemKVSTable::ItemKVSTable((mlcore::ItemKVSTable *)(v2 + 3));
  *a1 = result;
  a1[1] = (mlcore::ItemKVSTable *)v2;
  return result;
}

void sub_20A766750(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<mlcore::ItemKVSTable>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C33C5C8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<mlcore::ItemKVSTable>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C33C5C8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x20BD27AFCLL);
}

uint64_t std::__shared_ptr_emplace<mlcore::ItemKVSTable>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__shared_ptr_emplace<mediaplatform::SQLUsingJoinConstraint>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C33C0C0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<mediaplatform::SQLUsingJoinConstraint>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C33C0C0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x20BD27AFCLL);
}

mlcore::ComposerTable *_ZNSt3__115allocate_sharedB8ne180100IN6mlcore13ComposerTableENS_9allocatorIS2_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(mlcore::ComposerTable **a1)
{
  _QWORD *v2;
  mlcore::ComposerTable *result;

  v2 = operator new(0x508uLL);
  v2[1] = 0;
  v2[2] = 0;
  *v2 = &off_24C33C718;
  result = mlcore::ComposerTable::ComposerTable((mlcore::ComposerTable *)(v2 + 3));
  *a1 = result;
  a1[1] = (mlcore::ComposerTable *)v2;
  return result;
}

void sub_20A766838(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<mlcore::ComposerTable>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C33C718;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<mlcore::ComposerTable>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C33C718;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x20BD27AFCLL);
}

uint64_t std::__shared_ptr_emplace<mlcore::ComposerTable>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ComposerPropertyPersistentID(void)::$_0 &&>>()
{
  uint64_t v0;
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  mlcore::ComposerTable **v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  std::string *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  std::string *v19;
  __int128 v20;
  std::string v21;
  std::string __p;
  char v23;
  _QWORD v24[2];

  v0 = operator new();
  v1 = (_QWORD *)mediaplatform::Singleton<mlcore::ComposerTable>::sharedInstance();
  v2 = (std::__shared_weak_count *)v1[1];
  v24[0] = *v1;
  v24[1] = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  v5 = (mlcore::ComposerTable **)mediaplatform::Singleton<mlcore::ComposerTable>::sharedInstance();
  mlcore::ComposerTable::persistentIDColumn(*v5, (uint64_t)&__p);
  mlcore::DatabaseModelProperty<long long>::DatabaseModelProperty(v0, v24, (uint64_t)&__p);
  mlcore::ComposerPropertyPersistentID(void)::property = v0;
  if (v23 < 0)
    operator delete((void *)__p.__r_.__value_.__l.__size_);
  if (v2)
  {
    v6 = (unint64_t *)&v2->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v8 = mlcore::ComposerPropertyPersistentID(void)::property;
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  std::string::operator=((std::string *)(v8 + 40), &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v9 = mlcore::TypedEntityClass<mlcore::Composer>::sharedPointer();
  v10 = mlcore::ComposerPropertyPersistentID(void)::property;
  v11 = mediaplatform::Singleton<mlcore::ComposerTable>::sharedInstance();
  v12 = *(_QWORD *)v11;
  if (*(char *)(*(_QWORD *)v11 + 31) >= 0)
    v13 = *(unsigned __int8 *)(*(_QWORD *)v11 + 31);
  else
    v13 = *(_QWORD *)(*(_QWORD *)v11 + 16);
  v14 = &v21;
  std::string::basic_string[abi:ne180100]((uint64_t)&v21, v13 + 1);
  if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v14 = (std::string *)v21.__r_.__value_.__r.__words[0];
  if (v13)
  {
    v17 = *(char **)(v12 + 8);
    v16 = (char *)(v12 + 8);
    v15 = v17;
    if (v16[23] >= 0)
      v18 = v16;
    else
      v18 = v15;
    memmove(v14, v18, v13);
  }
  *(_WORD *)((char *)&v14->__r_.__value_.__l.__data_ + v13) = 46;
  v19 = std::string::append(&v21, "persistentID");
  v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  __p.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  mlcore::EntityClass::setPropertyForName(v9, v10, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
}

void sub_20A766A74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

char *std::allocate_shared[abi:ne180100]<mlcore::Composer,std::allocator<mlcore::Composer>,long long &,void>(_QWORD *a1, uint64_t a2)
{
  char *v4;
  char *result;

  v4 = (char *)operator new(0x100uLL);
  *((_QWORD *)v4 + 1) = 0;
  *((_QWORD *)v4 + 2) = 0;
  *(_QWORD *)v4 = &off_24C33D588;
  *(_OWORD *)(v4 + 40) = 0u;
  *(_OWORD *)(v4 + 56) = 0u;
  *((_DWORD *)v4 + 18) = 1065353216;
  *((_OWORD *)v4 + 5) = 0u;
  *((_OWORD *)v4 + 6) = 0u;
  *((_DWORD *)v4 + 28) = 1065353216;
  *(_OWORD *)(v4 + 120) = 0u;
  *(_OWORD *)(v4 + 136) = 0u;
  *((_DWORD *)v4 + 38) = 1065353216;
  *((_OWORD *)v4 + 10) = 0u;
  *((_OWORD *)v4 + 11) = 0u;
  *((_DWORD *)v4 + 48) = 1065353216;
  *(_OWORD *)(v4 + 200) = 0u;
  *(_OWORD *)(v4 + 216) = 0u;
  *((_DWORD *)v4 + 58) = 1065353216;
  *((_QWORD *)v4 + 4) = &off_24C3371C0;
  *((_QWORD *)v4 + 30) = &unk_24C3371E8;
  *((_QWORD *)v4 + 31) = a2;
  a1[1] = v4;
  *((_QWORD *)v4 + 3) = &off_24C33AAF8;
  result = v4 + 24;
  *a1 = result;
  return result;
}

void _ZNSt3__110__function6__funcIZN6mlcore13PropertyCache24mergePropertiesFromCacheERKS3_RKNS_8functionIFbPNS2_17ModelPropertyBaseEEEEEd_UlS8_E_NS_9allocatorISD_EES9_ED0Ev()
{
  JUMPOUT(0x20BD27AFCLL);
}

_QWORD *_ZNKSt3__110__function6__funcIZN6mlcore13PropertyCache24mergePropertiesFromCacheERKS3_RKNS_8functionIFbPNS2_17ModelPropertyBaseEEEEEd_UlS8_E_NS_9allocatorISD_EES9_E7__cloneEv()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24C33B140;
  return result;
}

void _ZNKSt3__110__function6__funcIZN6mlcore13PropertyCache24mergePropertiesFromCacheERKS3_RKNS_8functionIFbPNS2_17ModelPropertyBaseEEEEEd_UlS8_E_NS_9allocatorISD_EES9_E7__cloneEPNS0_6__baseIS9_EE(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24C33B140;
}

uint64_t _ZNKSt3__110__function6__funcIZN6mlcore13PropertyCache24mergePropertiesFromCacheERKS3_RKNS_8functionIFbPNS2_17ModelPropertyBaseEEEEEd_UlS8_E_NS_9allocatorISD_EES9_E6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), 0x800000020A91F1AFLL))
    return a1 + 8;
  else
    return 0;
}

void *_ZNKSt3__110__function6__funcIZN6mlcore13PropertyCache24mergePropertiesFromCacheERKS3_RKNS_8functionIFbPNS2_17ModelPropertyBaseEEEEEd_UlS8_E_NS_9allocatorISD_EES9_E11target_typeEv()
{
  return &_ZTIZN6mlcore13PropertyCache24mergePropertiesFromCacheERKS0_RKNSt3__18functionIFbPNS_17ModelPropertyBaseEEEEEd_UlS6_E_;
}

void std::__shared_ptr_emplace<mlcore::Composer>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C33D588;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<mlcore::Composer>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C33D588;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x20BD27AFCLL);
}

uint64_t std::__shared_ptr_emplace<mlcore::Composer>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void mlcore::EntityClass::~EntityClass(mlcore::EntityClass *this)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  void **v5;
  void **v6;
  void *v7;

  *(_QWORD *)this = off_24C3366F8;
  v2 = (_QWORD *)*((_QWORD *)this + 16);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = (void *)*((_QWORD *)this + 14);
  *((_QWORD *)this + 14) = 0;
  if (v4)
    operator delete(v4);
  v5 = (void **)*((_QWORD *)this + 11);
  if (v5)
  {
    do
    {
      v6 = (void **)*v5;
      if (*((char *)v5 + 39) < 0)
        operator delete(v5[2]);
      operator delete(v5);
      v5 = v6;
    }
    while (v6);
  }
  v7 = (void *)*((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v7)
    operator delete(v7);
  std::mutex::~mutex((std::mutex *)((char *)this + 8));
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ComposerPropertyName(void)::$_0 &&>>()
{
  uint64_t v0;
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  mlcore::ComposerTable **v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  std::string *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  std::string *v19;
  __int128 v20;
  std::string v21;
  std::string __str;
  _QWORD v23[2];

  v0 = operator new();
  v1 = (_QWORD *)mediaplatform::Singleton<mlcore::ComposerTable>::sharedInstance();
  v2 = (std::__shared_weak_count *)v1[1];
  v23[0] = *v1;
  v23[1] = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  v5 = (mlcore::ComposerTable **)mediaplatform::Singleton<mlcore::ComposerTable>::sharedInstance();
  mlcore::ComposerTable::nameColumn(*v5, (uint64_t)&__str);
  mlcore::DatabaseModelProperty<std::string>::DatabaseModelProperty(v0, v23, (uint64_t)&__str);
  mlcore::ComposerPropertyName(void)::property = v0;
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&__str);
  if (v2)
  {
    v6 = (unint64_t *)&v2->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v8 = mlcore::ComposerPropertyName(void)::property;
  std::string::basic_string[abi:ne180100]<0>(&__str, "");
  std::string::operator=((std::string *)(v8 + 40), &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  v9 = mlcore::TypedEntityClass<mlcore::Composer>::sharedPointer();
  v10 = mlcore::ComposerPropertyName(void)::property;
  v11 = mediaplatform::Singleton<mlcore::ComposerTable>::sharedInstance();
  v12 = *(_QWORD *)v11;
  if (*(char *)(*(_QWORD *)v11 + 31) >= 0)
    v13 = *(unsigned __int8 *)(*(_QWORD *)v11 + 31);
  else
    v13 = *(_QWORD *)(*(_QWORD *)v11 + 16);
  v14 = &v21;
  std::string::basic_string[abi:ne180100]((uint64_t)&v21, v13 + 1);
  if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v14 = (std::string *)v21.__r_.__value_.__r.__words[0];
  if (v13)
  {
    v17 = *(char **)(v12 + 8);
    v16 = (char *)(v12 + 8);
    v15 = v17;
    if (v16[23] >= 0)
      v18 = v16;
    else
      v18 = v15;
    memmove(v14, v18, v13);
  }
  *(_WORD *)((char *)&v14->__r_.__value_.__l.__data_ + v13) = 46;
  v19 = std::string::append(&v21, "name");
  v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  __str.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  mlcore::EntityClass::setPropertyForName(v9, v10, &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
}

void sub_20A766F2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

void mlcore::DatabaseModelProperty<std::string>::~DatabaseModelProperty(void **a1)
{
  *a1 = &off_24C339FF8;
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)(a1 + 9));
  mlcore::ModelPropertyBase::~ModelPropertyBase(a1);
}

{
  *a1 = &off_24C339FF8;
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)(a1 + 9));
  mlcore::ModelPropertyBase::~ModelPropertyBase(a1);
  JUMPOUT(0x20BD27AFCLL);
}

void mlcore::DatabaseModelProperty<std::string>::description(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  uint64_t v4;
  size_t v5;
  std::string *v6;
  char *v7;
  char *v8;
  char *v9;
  char *v10;
  std::string *p_p;
  std::string::size_type size;
  std::string *v13;
  std::string __p;
  std::string v15;

  v4 = *(_QWORD *)(a1 + 64);
  if (*(char *)(v4 + 31) >= 0)
    v5 = *(unsigned __int8 *)(v4 + 31);
  else
    v5 = *(_QWORD *)(v4 + 16);
  v6 = &v15;
  std::string::basic_string[abi:ne180100]((uint64_t)&v15, v5 + 1);
  if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v6 = (std::string *)v15.__r_.__value_.__r.__words[0];
  if (v5)
  {
    v9 = *(char **)(v4 + 8);
    v8 = (char *)(v4 + 8);
    v7 = v9;
    if (v8[23] >= 0)
      v10 = v8;
    else
      v10 = v7;
    memmove(v6, v10, v5);
  }
  *(_WORD *)((char *)&v6->__r_.__value_.__l.__data_ + v5) = 46;
  if (*(char *)(a1 + 103) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(a1 + 80), *(_QWORD *)(a1 + 88));
  else
    __p = *(std::string *)(a1 + 80);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    size = __p.__r_.__value_.__l.__size_;
  v13 = std::string::append(&v15, (const std::string::value_type *)p_p, size);
  *a2 = *v13;
  v13->__r_.__value_.__l.__size_ = 0;
  v13->__r_.__value_.__r.__words[2] = 0;
  v13->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v15.__r_.__value_.__l.__data_);
}

void sub_20A767174(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *mlcore::DatabaseModelProperty<std::string>::databaseTables@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  _QWORD *v4;
  _QWORD *result;

  v3 = *(_QWORD *)(a1 + 64);
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  v4 = operator new(8uLL);
  *a2 = v4;
  *v4 = v3;
  result = v4 + 1;
  a2[1] = result;
  a2[2] = result;
  return result;
}

uint64_t mlcore::DatabaseModelProperty<std::string>::databaseColumn(uint64_t a1)
{
  return a1 + 72;
}

double mlcore::DatabaseModelProperty<std::string>::_SQLExpression@<D0>(mlcore *a1@<X0>, const mlcore::ModelPropertyBase *a2@<X1>, _OWORD *a3@<X8>)
{
  double result;
  __int128 v5;

  mlcore::SQLColumnNameFromProperty(a1, a2, &v5);
  result = *(double *)&v5;
  *a3 = v5;
  return result;
}

uint64_t mlcore::ComposerPropertySortName(mlcore *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&mlcore::ComposerPropertySortName(void)::once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&mlcore::ComposerPropertySortName(void)::once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ComposerPropertySortName(void)::$_0 &&>>);
  }
  return mlcore::ComposerPropertySortName(void)::property;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ComposerPropertySortName(void)::$_0 &&>>()
{
  uint64_t v0;
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  mlcore::ComposerTable **v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  std::string *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  std::string *v19;
  __int128 v20;
  std::string v21;
  std::string __str;
  _QWORD v23[2];

  v0 = operator new();
  v1 = (_QWORD *)mediaplatform::Singleton<mlcore::ComposerTable>::sharedInstance();
  v2 = (std::__shared_weak_count *)v1[1];
  v23[0] = *v1;
  v23[1] = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  v5 = (mlcore::ComposerTable **)mediaplatform::Singleton<mlcore::ComposerTable>::sharedInstance();
  mlcore::ComposerTable::sortNameColumn(*v5, (uint64_t)&__str);
  mlcore::DatabaseModelProperty<std::string>::DatabaseModelProperty(v0, v23, (uint64_t)&__str);
  mlcore::ComposerPropertySortName(void)::property = v0;
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&__str);
  if (v2)
  {
    v6 = (unint64_t *)&v2->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v8 = mlcore::ComposerPropertySortName(void)::property;
  std::string::basic_string[abi:ne180100]<0>(&__str, "");
  std::string::operator=((std::string *)(v8 + 40), &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  v9 = mlcore::TypedEntityClass<mlcore::Composer>::sharedPointer();
  v10 = mlcore::ComposerPropertySortName(void)::property;
  v11 = mediaplatform::Singleton<mlcore::ComposerTable>::sharedInstance();
  v12 = *(_QWORD *)v11;
  if (*(char *)(*(_QWORD *)v11 + 31) >= 0)
    v13 = *(unsigned __int8 *)(*(_QWORD *)v11 + 31);
  else
    v13 = *(_QWORD *)(*(_QWORD *)v11 + 16);
  v14 = &v21;
  std::string::basic_string[abi:ne180100]((uint64_t)&v21, v13 + 1);
  if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v14 = (std::string *)v21.__r_.__value_.__r.__words[0];
  if (v13)
  {
    v17 = *(char **)(v12 + 8);
    v16 = (char *)(v12 + 8);
    v15 = v17;
    if (v16[23] >= 0)
      v18 = v16;
    else
      v18 = v15;
    memmove(v14, v18, v13);
  }
  *(_WORD *)((char *)&v14->__r_.__value_.__l.__data_ + v13) = 46;
  v19 = std::string::append(&v21, "sortName");
  v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  __str.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  mlcore::EntityClass::setPropertyForName(v9, v10, &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
}

void sub_20A767448(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ComposerPropertyHasName(void)::$_0 &&>>()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  std::__shared_weak_count *v3;
  unint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  std::string __str;

  v0 = operator new();
  v1 = mlcore::ComposerPropertyOrder((mlcore *)v0);
  v2 = (char *)operator new(0x48uLL);
  v3 = (std::__shared_weak_count *)v2;
  *(_OWORD *)(v2 + 8) = 0u;
  v4 = (unint64_t *)(v2 + 8);
  *(_QWORD *)v2 = &off_24C33CE88;
  *((_QWORD *)v2 + 4) = v1;
  *((_QWORD *)v2 + 5) = 0x100000000;
  *((_QWORD *)v2 + 3) = &unk_24C339CA8;
  *((_QWORD *)v2 + 6) = 0;
  *(_OWORD *)(v2 + 56) = 0u;
  *(_OWORD *)(v0 + 16) = 0u;
  *(_OWORD *)(v0 + 32) = 0u;
  *(_OWORD *)(v0 + 48) = 0u;
  *(_QWORD *)v0 = &off_24C3398B8;
  *(_QWORD *)(v0 + 64) = v2 + 24;
  *(_QWORD *)(v0 + 72) = v2;
  do
    v5 = __ldxr(v4);
  while (__stxr(v5 + 1, v4));
  mlcore::ComposerPropertyHasName(void)::property = v0;
  do
    v6 = __ldaxr(v4);
  while (__stlxr(v6 - 1, v4));
  if (!v6)
  {
    (*(void (**)(char *))(*(_QWORD *)v2 + 16))(v2);
    std::__shared_weak_count::__release_weak(v3);
  }
  v7 = mlcore::ComposerPropertyHasName(void)::property;
  std::string::basic_string[abi:ne180100]<0>(&__str, "has_name");
  std::string::operator=((std::string *)(v7 + 40), &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  v8 = mlcore::TypedEntityClass<mlcore::Composer>::sharedPointer();
  v9 = mlcore::ComposerPropertyHasName(void)::property;
  std::string::basic_string[abi:ne180100]<0>(&__str, "hasName");
  mlcore::EntityClass::setPropertyForName(v8, v9, &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
}

void sub_20A767660(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t mlcore::ComposerPropertyGroupingKey(mlcore *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&mlcore::ComposerPropertyGroupingKey(void)::once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&mlcore::ComposerPropertyGroupingKey(void)::once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ComposerPropertyGroupingKey(void)::$_0 &&>>);
  }
  return mlcore::ComposerPropertyGroupingKey(void)::property;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ComposerPropertyGroupingKey(void)::$_0 &&>>()
{
  uint64_t v0;
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  mlcore::ComposerTable **v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  std::string *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  std::string *v19;
  __int128 v20;
  std::string v21;
  std::string __str;
  _QWORD v23[2];

  v0 = operator new();
  v1 = (_QWORD *)mediaplatform::Singleton<mlcore::ComposerTable>::sharedInstance();
  v2 = (std::__shared_weak_count *)v1[1];
  v23[0] = *v1;
  v23[1] = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  v5 = (mlcore::ComposerTable **)mediaplatform::Singleton<mlcore::ComposerTable>::sharedInstance();
  mlcore::ComposerTable::groupingKeyColumn(*v5, (uint64_t)&__str);
  mlcore::DatabaseModelProperty<mediaplatform::Data>::DatabaseModelProperty(v0, v23, (uint64_t)&__str);
  mlcore::ComposerPropertyGroupingKey(void)::property = v0;
  mediaplatform::DatabaseColumn<mediaplatform::Data>::~DatabaseColumn((uint64_t)&__str);
  if (v2)
  {
    v6 = (unint64_t *)&v2->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v8 = mlcore::ComposerPropertyGroupingKey(void)::property;
  std::string::basic_string[abi:ne180100]<0>(&__str, "");
  std::string::operator=((std::string *)(v8 + 40), &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  v9 = mlcore::TypedEntityClass<mlcore::Composer>::sharedPointer();
  v10 = mlcore::ComposerPropertyGroupingKey(void)::property;
  v11 = mediaplatform::Singleton<mlcore::ComposerTable>::sharedInstance();
  v12 = *(_QWORD *)v11;
  if (*(char *)(*(_QWORD *)v11 + 31) >= 0)
    v13 = *(unsigned __int8 *)(*(_QWORD *)v11 + 31);
  else
    v13 = *(_QWORD *)(*(_QWORD *)v11 + 16);
  v14 = &v21;
  std::string::basic_string[abi:ne180100]((uint64_t)&v21, v13 + 1);
  if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v14 = (std::string *)v21.__r_.__value_.__r.__words[0];
  if (v13)
  {
    v17 = *(char **)(v12 + 8);
    v16 = (char *)(v12 + 8);
    v15 = v17;
    if (v16[23] >= 0)
      v18 = v16;
    else
      v18 = v15;
    memmove(v14, v18, v13);
  }
  *(_WORD *)((char *)&v14->__r_.__value_.__l.__data_ + v13) = 46;
  v19 = std::string::append(&v21, "groupingKey");
  v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  __str.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  mlcore::EntityClass::setPropertyForName(v9, v10, &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
}

void sub_20A7678CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

void mlcore::DatabaseModelProperty<mediaplatform::Data>::~DatabaseModelProperty(void **a1)
{
  *a1 = &off_24C339F70;
  mediaplatform::DatabaseColumn<mediaplatform::Data>::~DatabaseColumn((uint64_t)(a1 + 9));
  mlcore::ModelPropertyBase::~ModelPropertyBase(a1);
}

{
  *a1 = &off_24C339F70;
  mediaplatform::DatabaseColumn<mediaplatform::Data>::~DatabaseColumn((uint64_t)(a1 + 9));
  mlcore::ModelPropertyBase::~ModelPropertyBase(a1);
  JUMPOUT(0x20BD27AFCLL);
}

void mlcore::DatabaseModelProperty<mediaplatform::Data>::description(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  uint64_t v4;
  size_t v5;
  std::string *v6;
  char *v7;
  char *v8;
  char *v9;
  char *v10;
  std::string *p_p;
  std::string::size_type size;
  std::string *v13;
  std::string __p;
  std::string v15;

  v4 = *(_QWORD *)(a1 + 64);
  if (*(char *)(v4 + 31) >= 0)
    v5 = *(unsigned __int8 *)(v4 + 31);
  else
    v5 = *(_QWORD *)(v4 + 16);
  v6 = &v15;
  std::string::basic_string[abi:ne180100]((uint64_t)&v15, v5 + 1);
  if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v6 = (std::string *)v15.__r_.__value_.__r.__words[0];
  if (v5)
  {
    v9 = *(char **)(v4 + 8);
    v8 = (char *)(v4 + 8);
    v7 = v9;
    if (v8[23] >= 0)
      v10 = v8;
    else
      v10 = v7;
    memmove(v6, v10, v5);
  }
  *(_WORD *)((char *)&v6->__r_.__value_.__l.__data_ + v5) = 46;
  if (*(char *)(a1 + 103) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(a1 + 80), *(_QWORD *)(a1 + 88));
  else
    __p = *(std::string *)(a1 + 80);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    size = __p.__r_.__value_.__l.__size_;
  v13 = std::string::append(&v15, (const std::string::value_type *)p_p, size);
  *a2 = *v13;
  v13->__r_.__value_.__l.__size_ = 0;
  v13->__r_.__value_.__r.__words[2] = 0;
  v13->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v15.__r_.__value_.__l.__data_);
}

void sub_20A767B14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t mlcore::ModelProperty<mediaplatform::Data>::insertIntoCacheFromResultList(unint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t result;
  _QWORD v7[3];
  uint64_t v8;
  char v9;

  mediaplatform::DatabaseStatement::columnValue<mediaplatform::Data>(*(_QWORD *)(a3 + 8), *(_DWORD *)a3 + a4, (uint64_t)v7);
  result = mlcore::PropertyCacheBase<mediaplatform::Data>::setValueForProperty(a2, (uint64_t)v7, a1);
  v7[0] = &off_24C331510;
  if (v9)
  {
    result = v8;
    if (v8)
      return MEMORY[0x20BD27AE4](v8, 0x1000C8077774924);
  }
  return result;
}

void sub_20A767BC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  if (a14)
  {
    if (a13)
      MEMORY[0x20BD27AE4](a13, 0x1000C8077774924);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *mlcore::DatabaseModelProperty<mediaplatform::Data>::databaseTables@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  _QWORD *v4;
  _QWORD *result;

  v3 = *(_QWORD *)(a1 + 64);
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  v4 = operator new(8uLL);
  *a2 = v4;
  *v4 = v3;
  result = v4 + 1;
  a2[1] = result;
  a2[2] = result;
  return result;
}

uint64_t mlcore::DatabaseModelProperty<mediaplatform::Data>::databaseColumn(uint64_t a1)
{
  return a1 + 72;
}

double mlcore::DatabaseModelProperty<mediaplatform::Data>::_SQLExpression@<D0>(mlcore *a1@<X0>, const mlcore::ModelPropertyBase *a2@<X1>, _OWORD *a3@<X8>)
{
  double result;
  __int128 v5;

  mlcore::SQLColumnNameFromProperty(a1, a2, &v5);
  result = *(double *)&v5;
  *a3 = v5;
  return result;
}

uint64_t mlcore::ComposerPropertyKeepLocal(mlcore *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&mlcore::ComposerPropertyKeepLocal(void)::once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&mlcore::ComposerPropertyKeepLocal(void)::once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ComposerPropertyKeepLocal(void)::$_0 &&>>);
  }
  return mlcore::ComposerPropertyKeepLocal(void)::property;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ComposerPropertyKeepLocal(void)::$_0 &&>>()
{
  uint64_t v0;
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  mlcore::ComposerTable **v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  std::string *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  std::string *v19;
  __int128 v20;
  std::string v21;
  std::string __p;
  char v23;
  _QWORD v24[2];

  v0 = operator new();
  v1 = (_QWORD *)mediaplatform::Singleton<mlcore::ComposerTable>::sharedInstance();
  v2 = (std::__shared_weak_count *)v1[1];
  v24[0] = *v1;
  v24[1] = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  v5 = (mlcore::ComposerTable **)mediaplatform::Singleton<mlcore::ComposerTable>::sharedInstance();
  mlcore::ComposerTable::keepLocalColumn(*v5, (uint64_t)&__p);
  mlcore::DatabaseModelProperty<int>::DatabaseModelProperty(v0, v24, (uint64_t)&__p);
  mlcore::ComposerPropertyKeepLocal(void)::property = v0;
  if (v23 < 0)
    operator delete((void *)__p.__r_.__value_.__l.__size_);
  if (v2)
  {
    v6 = (unint64_t *)&v2->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v8 = mlcore::ComposerPropertyKeepLocal(void)::property;
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  std::string::operator=((std::string *)(v8 + 40), &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v9 = mlcore::TypedEntityClass<mlcore::Composer>::sharedPointer();
  v10 = mlcore::ComposerPropertyKeepLocal(void)::property;
  v11 = mediaplatform::Singleton<mlcore::ComposerTable>::sharedInstance();
  v12 = *(_QWORD *)v11;
  if (*(char *)(*(_QWORD *)v11 + 31) >= 0)
    v13 = *(unsigned __int8 *)(*(_QWORD *)v11 + 31);
  else
    v13 = *(_QWORD *)(*(_QWORD *)v11 + 16);
  v14 = &v21;
  std::string::basic_string[abi:ne180100]((uint64_t)&v21, v13 + 1);
  if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v14 = (std::string *)v21.__r_.__value_.__r.__words[0];
  if (v13)
  {
    v17 = *(char **)(v12 + 8);
    v16 = (char *)(v12 + 8);
    v15 = v17;
    if (v16[23] >= 0)
      v18 = v16;
    else
      v18 = v15;
    memmove(v14, v18, v13);
  }
  *(_WORD *)((char *)&v14->__r_.__value_.__l.__data_ + v13) = 46;
  v19 = std::string::append(&v21, "keepLocal");
  v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  __p.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  mlcore::EntityClass::setPropertyForName(v9, v10, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
}

void sub_20A767EA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

void mlcore::DatabaseModelProperty<int>::~DatabaseModelProperty(mlcore::ModelPropertyBase *this)
{
  *(_QWORD *)this = off_24C33A108;
  *((_QWORD *)this + 9) = off_24C335D90;
  if (*((char *)this + 103) < 0)
    operator delete(*((void **)this + 10));
  mlcore::ModelPropertyBase::~ModelPropertyBase((void **)this);
}

{
  *(_QWORD *)this = off_24C33A108;
  *((_QWORD *)this + 9) = off_24C335D90;
  if (*((char *)this + 103) < 0)
    operator delete(*((void **)this + 10));
  mlcore::ModelPropertyBase::~ModelPropertyBase((void **)this);
  JUMPOUT(0x20BD27AFCLL);
}

void mlcore::DatabaseModelProperty<int>::description(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  uint64_t v4;
  size_t v5;
  std::string *v6;
  char *v7;
  char *v8;
  char *v9;
  char *v10;
  std::string *p_p;
  std::string::size_type size;
  std::string *v13;
  std::string __p;
  std::string v15;

  v4 = *(_QWORD *)(a1 + 64);
  if (*(char *)(v4 + 31) >= 0)
    v5 = *(unsigned __int8 *)(v4 + 31);
  else
    v5 = *(_QWORD *)(v4 + 16);
  v6 = &v15;
  std::string::basic_string[abi:ne180100]((uint64_t)&v15, v5 + 1);
  if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v6 = (std::string *)v15.__r_.__value_.__r.__words[0];
  if (v5)
  {
    v9 = *(char **)(v4 + 8);
    v8 = (char *)(v4 + 8);
    v7 = v9;
    if (v8[23] >= 0)
      v10 = v8;
    else
      v10 = v7;
    memmove(v6, v10, v5);
  }
  *(_WORD *)((char *)&v6->__r_.__value_.__l.__data_ + v5) = 46;
  if (*(char *)(a1 + 103) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(a1 + 80), *(_QWORD *)(a1 + 88));
  else
    __p = *(std::string *)(a1 + 80);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    size = __p.__r_.__value_.__l.__size_;
  v13 = std::string::append(&v15, (const std::string::value_type *)p_p, size);
  *a2 = *v13;
  v13->__r_.__value_.__l.__size_ = 0;
  v13->__r_.__value_.__r.__words[2] = 0;
  v13->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v15.__r_.__value_.__l.__data_);
}

void sub_20A768128(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *mlcore::DatabaseModelProperty<int>::databaseTables@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  _QWORD *v4;
  _QWORD *result;

  v3 = *(_QWORD *)(a1 + 64);
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  v4 = operator new(8uLL);
  *a2 = v4;
  *v4 = v3;
  result = v4 + 1;
  a2[1] = result;
  a2[2] = result;
  return result;
}

uint64_t mlcore::DatabaseModelProperty<int>::databaseColumn(uint64_t a1)
{
  return a1 + 72;
}

double mlcore::DatabaseModelProperty<int>::_SQLExpression@<D0>(mlcore *a1@<X0>, const mlcore::ModelPropertyBase *a2@<X1>, _OWORD *a3@<X8>)
{
  double result;
  __int128 v5;

  mlcore::SQLColumnNameFromProperty(a1, a2, &v5);
  result = *(double *)&v5;
  *a3 = v5;
  return result;
}

uint64_t mlcore::ComposerPropertyKeepLocalStatus(mlcore *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&mlcore::ComposerPropertyKeepLocalStatus(void)::once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&mlcore::ComposerPropertyKeepLocalStatus(void)::once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ComposerPropertyKeepLocalStatus(void)::$_0 &&>>);
  }
  return mlcore::ComposerPropertyKeepLocalStatus(void)::property;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ComposerPropertyKeepLocalStatus(void)::$_0 &&>>()
{
  uint64_t v0;
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  mlcore::ComposerTable **v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  std::string *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  std::string *v19;
  __int128 v20;
  std::string v21;
  std::string __p;
  char v23;
  _QWORD v24[2];

  v0 = operator new();
  v1 = (_QWORD *)mediaplatform::Singleton<mlcore::ComposerTable>::sharedInstance();
  v2 = (std::__shared_weak_count *)v1[1];
  v24[0] = *v1;
  v24[1] = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  v5 = (mlcore::ComposerTable **)mediaplatform::Singleton<mlcore::ComposerTable>::sharedInstance();
  mlcore::ComposerTable::keepLocalStatusColumn(*v5, (uint64_t)&__p);
  mlcore::DatabaseModelProperty<int>::DatabaseModelProperty(v0, v24, (uint64_t)&__p);
  mlcore::ComposerPropertyKeepLocalStatus(void)::property = v0;
  if (v23 < 0)
    operator delete((void *)__p.__r_.__value_.__l.__size_);
  if (v2)
  {
    v6 = (unint64_t *)&v2->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v8 = mlcore::ComposerPropertyKeepLocalStatus(void)::property;
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  std::string::operator=((std::string *)(v8 + 40), &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v9 = mlcore::TypedEntityClass<mlcore::Composer>::sharedPointer();
  v10 = mlcore::ComposerPropertyKeepLocalStatus(void)::property;
  v11 = mediaplatform::Singleton<mlcore::ComposerTable>::sharedInstance();
  v12 = *(_QWORD *)v11;
  if (*(char *)(*(_QWORD *)v11 + 31) >= 0)
    v13 = *(unsigned __int8 *)(*(_QWORD *)v11 + 31);
  else
    v13 = *(_QWORD *)(*(_QWORD *)v11 + 16);
  v14 = &v21;
  std::string::basic_string[abi:ne180100]((uint64_t)&v21, v13 + 1);
  if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v14 = (std::string *)v21.__r_.__value_.__r.__words[0];
  if (v13)
  {
    v17 = *(char **)(v12 + 8);
    v16 = (char *)(v12 + 8);
    v15 = v17;
    if (v16[23] >= 0)
      v18 = v16;
    else
      v18 = v15;
    memmove(v14, v18, v13);
  }
  *(_WORD *)((char *)&v14->__r_.__value_.__l.__data_ + v13) = 46;
  v19 = std::string::append(&v21, "keepLocalStatus");
  v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  __p.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  mlcore::EntityClass::setPropertyForName(v9, v10, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
}

void sub_20A768404(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

uint64_t mlcore::ComposerPropertyKeepLocalStatusReason(mlcore *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&mlcore::ComposerPropertyKeepLocalStatusReason(void)::once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&mlcore::ComposerPropertyKeepLocalStatusReason(void)::once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ComposerPropertyKeepLocalStatusReason(void)::$_0 &&>>);
  }
  return mlcore::ComposerPropertyKeepLocalStatusReason(void)::property;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ComposerPropertyKeepLocalStatusReason(void)::$_0 &&>>()
{
  uint64_t v0;
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  mlcore::ComposerTable **v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  std::string *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  std::string *v19;
  __int128 v20;
  std::string v21;
  std::string __p;
  char v23;
  _QWORD v24[2];

  v0 = operator new();
  v1 = (_QWORD *)mediaplatform::Singleton<mlcore::ComposerTable>::sharedInstance();
  v2 = (std::__shared_weak_count *)v1[1];
  v24[0] = *v1;
  v24[1] = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  v5 = (mlcore::ComposerTable **)mediaplatform::Singleton<mlcore::ComposerTable>::sharedInstance();
  mlcore::ComposerTable::keepLocalStatusReasonColumn(*v5, (uint64_t)&__p);
  mlcore::DatabaseModelProperty<int>::DatabaseModelProperty(v0, v24, (uint64_t)&__p);
  mlcore::ComposerPropertyKeepLocalStatusReason(void)::property = v0;
  if (v23 < 0)
    operator delete((void *)__p.__r_.__value_.__l.__size_);
  if (v2)
  {
    v6 = (unint64_t *)&v2->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v8 = mlcore::ComposerPropertyKeepLocalStatusReason(void)::property;
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  std::string::operator=((std::string *)(v8 + 40), &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v9 = mlcore::TypedEntityClass<mlcore::Composer>::sharedPointer();
  v10 = mlcore::ComposerPropertyKeepLocalStatusReason(void)::property;
  v11 = mediaplatform::Singleton<mlcore::ComposerTable>::sharedInstance();
  v12 = *(_QWORD *)v11;
  if (*(char *)(*(_QWORD *)v11 + 31) >= 0)
    v13 = *(unsigned __int8 *)(*(_QWORD *)v11 + 31);
  else
    v13 = *(_QWORD *)(*(_QWORD *)v11 + 16);
  v14 = &v21;
  std::string::basic_string[abi:ne180100]((uint64_t)&v21, v13 + 1);
  if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v14 = (std::string *)v21.__r_.__value_.__r.__words[0];
  if (v13)
  {
    v17 = *(char **)(v12 + 8);
    v16 = (char *)(v12 + 8);
    v15 = v17;
    if (v16[23] >= 0)
      v18 = v16;
    else
      v18 = v15;
    memmove(v14, v18, v13);
  }
  *(_WORD *)((char *)&v14->__r_.__value_.__l.__data_ + v13) = 46;
  v19 = std::string::append(&v21, "keepLocalStatusReason");
  v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  __p.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  mlcore::EntityClass::setPropertyForName(v9, v10, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
}

void sub_20A7686F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

uint64_t mlcore::ComposerPropertyKeepLocalConstraints(mlcore *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&mlcore::ComposerPropertyKeepLocalConstraints(void)::once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&mlcore::ComposerPropertyKeepLocalConstraints(void)::once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ComposerPropertyKeepLocalConstraints(void)::$_0 &&>>);
  }
  return mlcore::ComposerPropertyKeepLocalConstraints(void)::property;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ComposerPropertyKeepLocalConstraints(void)::$_0 &&>>()
{
  uint64_t v0;
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  mlcore::ComposerTable **v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  std::string *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  std::string *v19;
  __int128 v20;
  std::string v21;
  std::string __p;
  char v23;
  _QWORD v24[2];

  v0 = operator new();
  v1 = (_QWORD *)mediaplatform::Singleton<mlcore::ComposerTable>::sharedInstance();
  v2 = (std::__shared_weak_count *)v1[1];
  v24[0] = *v1;
  v24[1] = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  v5 = (mlcore::ComposerTable **)mediaplatform::Singleton<mlcore::ComposerTable>::sharedInstance();
  mlcore::ComposerTable::keepLocalConstraintsColumn(*v5, (uint64_t)&__p);
  mlcore::DatabaseModelProperty<int>::DatabaseModelProperty(v0, v24, (uint64_t)&__p);
  mlcore::ComposerPropertyKeepLocalConstraints(void)::property = v0;
  if (v23 < 0)
    operator delete((void *)__p.__r_.__value_.__l.__size_);
  if (v2)
  {
    v6 = (unint64_t *)&v2->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v8 = mlcore::ComposerPropertyKeepLocalConstraints(void)::property;
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  std::string::operator=((std::string *)(v8 + 40), &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v9 = mlcore::TypedEntityClass<mlcore::Composer>::sharedPointer();
  v10 = mlcore::ComposerPropertyKeepLocalConstraints(void)::property;
  v11 = mediaplatform::Singleton<mlcore::ComposerTable>::sharedInstance();
  v12 = *(_QWORD *)v11;
  if (*(char *)(*(_QWORD *)v11 + 31) >= 0)
    v13 = *(unsigned __int8 *)(*(_QWORD *)v11 + 31);
  else
    v13 = *(_QWORD *)(*(_QWORD *)v11 + 16);
  v14 = &v21;
  std::string::basic_string[abi:ne180100]((uint64_t)&v21, v13 + 1);
  if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v14 = (std::string *)v21.__r_.__value_.__r.__words[0];
  if (v13)
  {
    v17 = *(char **)(v12 + 8);
    v16 = (char *)(v12 + 8);
    v15 = v17;
    if (v16[23] >= 0)
      v18 = v16;
    else
      v18 = v15;
    memmove(v14, v18, v13);
  }
  *(_WORD *)((char *)&v14->__r_.__value_.__l.__data_ + v13) = 46;
  v19 = std::string::append(&v21, "keepLocalConstraints");
  v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  __p.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  mlcore::EntityClass::setPropertyForName(v9, v10, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
}

void sub_20A7689DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

uint64_t mlcore::ComposerPropertyItemCount(mlcore *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&mlcore::ComposerPropertyItemCount(void)::once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&mlcore::ComposerPropertyItemCount(void)::once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ComposerPropertyItemCount(void)::$_0 &&>>);
  }
  return mlcore::ComposerPropertyItemCount(void)::property;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ComposerPropertyItemCount(void)::$_0 &&>>()
{
  uint64_t v0;
  mlcore *v1;
  mlcore *v2;
  uint64_t v3;
  _QWORD *v4;
  __int128 v5;
  unint64_t *v6;
  unint64_t v7;
  unint64_t v8;
  std::__shared_weak_count *size;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  std::string __p;
  __int128 v18;

  v0 = operator new();
  v1 = (mlcore *)mlcore::TypedEntityClass<mlcore::Item>::sharedPointer();
  v2 = (mlcore *)mlcore::ItemPropertyComposerPersistentID(v1);
  v3 = mlcore::ComposerPropertyPersistentID(v2);
  v4 = operator new(0x38uLL);
  v4[1] = 0;
  v4[2] = 0;
  *v4 = &off_24C33D240;
  v4[4] = v2;
  v4[5] = 0;
  v4[3] = &off_24C33A5A8;
  v4[6] = v3;
  *(_QWORD *)&v18 = v4 + 3;
  *((_QWORD *)&v18 + 1) = v4;
  std::allocate_shared[abi:ne180100]<mlcore::AggregateFunctionQuery,std::allocator<mlcore::AggregateFunctionQuery>,mlcore::EntityClass *,mlcore::AggregateFunctionQuery::AggregateFunction,decltype(nullptr),std::shared_ptr<mlcore::ComparisonPropertyPredicate>,void>(&__p, (uint64_t)v1, 0, &v18);
  v5 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = 0uLL;
  *(_OWORD *)(v0 + 16) = 0u;
  *(_OWORD *)(v0 + 32) = 0u;
  *(_OWORD *)(v0 + 48) = 0u;
  *(_QWORD *)v0 = &off_24C337228;
  *(_OWORD *)(v0 + 64) = v5;
  if (*((_QWORD *)&v5 + 1))
  {
    v6 = (unint64_t *)(*((_QWORD *)&v5 + 1) + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
    mlcore::ComposerPropertyItemCount(void)::property = v0;
    do
      v8 = __ldaxr(v6);
    while (__stlxr(v8 - 1, v6));
    if (!v8)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v5 + 1) + 16))(*((_QWORD *)&v5 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v5 + 1));
    }
  }
  else
  {
    mlcore::ComposerPropertyItemCount(void)::property = v0;
  }
  size = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
  if (__p.__r_.__value_.__l.__size_)
  {
    v10 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
  }
  v12 = (std::__shared_weak_count *)*((_QWORD *)&v18 + 1);
  if (*((_QWORD *)&v18 + 1))
  {
    v13 = (unint64_t *)(*((_QWORD *)&v18 + 1) + 8);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  v15 = mlcore::TypedEntityClass<mlcore::Item>::sharedPointer();
  v16 = mlcore::ComposerPropertyItemCount(void)::property;
  std::string::basic_string[abi:ne180100]<0>(&__p, "itemCount");
  mlcore::EntityClass::setPropertyForName(v15, v16, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_20A768CBC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::allocate_shared[abi:ne180100]<mlcore::AggregateFunctionQuery,std::allocator<mlcore::AggregateFunctionQuery>,mlcore::EntityClass *,mlcore::AggregateFunctionQuery::AggregateFunction,decltype(nullptr),std::shared_ptr<mlcore::ComparisonPropertyPredicate>,void>(_QWORD *a1, uint64_t a2, int a3, __int128 *a4)
{
  char *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  __int128 v12;

  v8 = (char *)operator new(0x60uLL);
  *(_OWORD *)(v8 + 8) = 0u;
  *(_QWORD *)v8 = &off_24C33D080;
  v12 = *a4;
  v11 = (std::__shared_weak_count *)*((_QWORD *)&v12 + 1);
  *a4 = 0u;
  mlcore::AggregateFunctionQuery::AggregateFunctionQuery((uint64_t)(v8 + 24), a2, a3, 0, (uint64_t *)&v12, 0);
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  *a1 = v8 + 24;
  a1[1] = v8;
}

void sub_20A768E0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  std::__shared_weak_count *v3;
  void *v5;
  va_list va;

  va_start(va, a3);
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::__shared_weak_count::~__shared_weak_count(v3);
  operator delete(v5);
  _Unwind_Resume(a1);
}

double std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::TypedEntityClass<mlcore::Item>::sharedPointer(void)::{lambda(void)#1} &&>>()
{
  uint64_t v0;
  double result;

  v0 = operator new();
  result = 0.0;
  *(_OWORD *)(v0 + 16) = 0u;
  *(_OWORD *)(v0 + 32) = 0u;
  *(_OWORD *)(v0 + 48) = 0u;
  *(_OWORD *)(v0 + 64) = 0u;
  *(_OWORD *)(v0 + 80) = 0u;
  *(_QWORD *)(v0 + 96) = 0;
  *(_DWORD *)(v0 + 104) = 1065353216;
  *(_OWORD *)(v0 + 112) = 0u;
  *(_OWORD *)(v0 + 128) = 0u;
  *(_DWORD *)(v0 + 144) = 1065353216;
  *(_QWORD *)v0 = &off_24C338BA0;
  *(_QWORD *)(v0 + 8) = 850045863;
  mlcore::TypedEntityClass<mlcore::Item>::sharedPointer(void)::__sharedPointer = v0;
  return result;
}

void mlcore::TypedEntityClass<mlcore::Item>::~TypedEntityClass(mlcore::EntityClass *a1)
{
  mlcore::EntityClass::~EntityClass(a1);
  JUMPOUT(0x20BD27AFCLL);
}

uint64_t mlcore::TypedEntityClass<mlcore::Item>::description(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
}

BOOL mlcore::TypedEntityClass<mlcore::Item>::isRevisionTrackable(uint64_t a1)
{
  return (*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1) != -1;
}

char *std::allocate_shared[abi:ne180100]<mlcore::Item,std::allocator<mlcore::Item>,long long &,void>(_QWORD *a1, uint64_t a2)
{
  char *v4;
  char *result;

  v4 = (char *)operator new(0x100uLL);
  *((_QWORD *)v4 + 1) = 0;
  *((_QWORD *)v4 + 2) = 0;
  *(_QWORD *)v4 = &off_24C33D2B0;
  *(_OWORD *)(v4 + 40) = 0u;
  *(_OWORD *)(v4 + 56) = 0u;
  *((_DWORD *)v4 + 18) = 1065353216;
  *((_OWORD *)v4 + 5) = 0u;
  *((_OWORD *)v4 + 6) = 0u;
  *((_DWORD *)v4 + 28) = 1065353216;
  *(_OWORD *)(v4 + 120) = 0u;
  *(_OWORD *)(v4 + 136) = 0u;
  *((_DWORD *)v4 + 38) = 1065353216;
  *((_OWORD *)v4 + 10) = 0u;
  *((_OWORD *)v4 + 11) = 0u;
  *((_DWORD *)v4 + 48) = 1065353216;
  *(_OWORD *)(v4 + 200) = 0u;
  *(_OWORD *)(v4 + 216) = 0u;
  *((_DWORD *)v4 + 58) = 1065353216;
  *((_QWORD *)v4 + 4) = &off_24C3371C0;
  *((_QWORD *)v4 + 30) = &unk_24C3371E8;
  *((_QWORD *)v4 + 31) = a2;
  a1[1] = v4;
  *((_QWORD *)v4 + 3) = &off_24C33A658;
  result = v4 + 24;
  *a1 = result;
  return result;
}

void std::__shared_ptr_emplace<mlcore::Item>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C33D2B0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<mlcore::Item>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C33D2B0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x20BD27AFCLL);
}

uint64_t std::__shared_ptr_emplace<mlcore::Item>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void mlcore::QueryProperty<long long>::~QueryProperty(void **a1)
{
  *a1 = &off_24C337228;
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 8));
  mlcore::ModelPropertyBase::~ModelPropertyBase(a1);
}

{
  *a1 = &off_24C337228;
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 8));
  mlcore::ModelPropertyBase::~ModelPropertyBase(a1);
  JUMPOUT(0x20BD27AFCLL);
}

void mlcore::QueryProperty<long long>::description(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  unint64_t *v6;
  unint64_t v7;

  v1 = *(_QWORD *)(a1 + 64);
  v2 = *(_QWORD *)(v1 + 16);
  v3 = *(std::__shared_weak_count **)(v1 + 24);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
  if (v3)
  {
    v6 = (unint64_t *)&v3->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_20A7690DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void mlcore::QueryProperty<long long>::databaseColumn()
{
  std::runtime_error *exception;

  exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
  std::runtime_error::runtime_error(exception, "This property has no database column");
  __cxa_throw(exception, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
}

void sub_20A76912C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void mlcore::QueryProperty<long long>::_SQLJoinClauses(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

void std::__shared_ptr_emplace<mediaplatform::SQLSelectExpression>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C33BFA8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<mediaplatform::SQLSelectExpression>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C33BFA8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x20BD27AFCLL);
}

void std::__shared_ptr_emplace<mlcore::AggregateFunctionQuery>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C33D080;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<mlcore::AggregateFunctionQuery>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C33D080;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x20BD27AFCLL);
}

uint64_t std::__shared_ptr_emplace<mlcore::AggregateFunctionQuery>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__shared_ptr_emplace<mlcore::ComparisonPropertyPredicate>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C33D240;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<mlcore::ComparisonPropertyPredicate>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C33D240;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x20BD27AFCLL);
}

uint64_t mlcore::ComposerPropertyAlbumCount(mlcore *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&mlcore::ComposerPropertyAlbumCount(void)::once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&mlcore::ComposerPropertyAlbumCount(void)::once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ComposerPropertyAlbumCount(void)::$_0 &&>>);
  }
  return mlcore::ComposerPropertyAlbumCount(void)::property;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ComposerPropertyAlbumCount(void)::$_0 &&>>()
{
  uint64_t v0;
  mlcore *v1;
  mlcore *v2;
  mlcore *v3;
  uint64_t v4;
  _QWORD *v5;
  __int128 v6;
  unint64_t *v7;
  unint64_t v8;
  unint64_t v9;
  std::__shared_weak_count *size;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  std::string __p;
  char v19;
  __int128 v20;

  v0 = operator new();
  v1 = (mlcore *)mlcore::TypedEntityClass<mlcore::Item>::sharedPointer();
  v2 = (mlcore *)mlcore::ItemPropertyAlbumPersistentID(v1);
  v3 = (mlcore *)mlcore::ItemPropertyComposerPersistentID(v2);
  v4 = mlcore::ComposerPropertyPersistentID(v3);
  v5 = operator new(0x38uLL);
  v5[1] = 0;
  v5[2] = 0;
  *v5 = &off_24C33D240;
  v5[4] = v3;
  v5[5] = 0;
  v5[3] = &off_24C33A5A8;
  v5[6] = v4;
  *(_QWORD *)&v20 = v5 + 3;
  *((_QWORD *)&v20 + 1) = v5;
  v19 = 1;
  std::allocate_shared[abi:ne180100]<mlcore::AggregateFunctionQuery,std::allocator<mlcore::AggregateFunctionQuery>,mlcore::EntityClass *,mlcore::AggregateFunctionQuery::AggregateFunction,mlcore::ModelProperty<long long> *,std::shared_ptr<mlcore::ComparisonPropertyPredicate>,BOOL,void>(&__p, (uint64_t)v1, 0, (uint64_t)v2, &v20, &v19);
  v6 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = 0uLL;
  *(_OWORD *)(v0 + 16) = 0u;
  *(_OWORD *)(v0 + 32) = 0u;
  *(_OWORD *)(v0 + 48) = 0u;
  *(_QWORD *)v0 = &off_24C337228;
  *(_OWORD *)(v0 + 64) = v6;
  if (*((_QWORD *)&v6 + 1))
  {
    v7 = (unint64_t *)(*((_QWORD *)&v6 + 1) + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
    mlcore::ComposerPropertyAlbumCount(void)::property = v0;
    do
      v9 = __ldaxr(v7);
    while (__stlxr(v9 - 1, v7));
    if (!v9)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v6 + 1) + 16))(*((_QWORD *)&v6 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v6 + 1));
    }
  }
  else
  {
    mlcore::ComposerPropertyAlbumCount(void)::property = v0;
  }
  size = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
  if (__p.__r_.__value_.__l.__size_)
  {
    v11 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
  }
  v13 = (std::__shared_weak_count *)*((_QWORD *)&v20 + 1);
  if (*((_QWORD *)&v20 + 1))
  {
    v14 = (unint64_t *)(*((_QWORD *)&v20 + 1) + 8);
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  v16 = mlcore::TypedEntityClass<mlcore::Item>::sharedPointer();
  v17 = mlcore::ComposerPropertyAlbumCount(void)::property;
  std::string::basic_string[abi:ne180100]<0>(&__p, "albumCount");
  mlcore::EntityClass::setPropertyForName(v16, v17, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_20A769460(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::allocate_shared[abi:ne180100]<mlcore::AggregateFunctionQuery,std::allocator<mlcore::AggregateFunctionQuery>,mlcore::EntityClass *,mlcore::AggregateFunctionQuery::AggregateFunction,mlcore::ModelProperty<long long> *,std::shared_ptr<mlcore::ComparisonPropertyPredicate>,BOOL,void>(_QWORD *a1, uint64_t a2, int a3, uint64_t a4, __int128 *a5, char *a6)
{
  char *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::__shared_weak_count *v15;
  __int128 v16;

  v12 = (char *)operator new(0x60uLL);
  *(_OWORD *)(v12 + 8) = 0u;
  *(_QWORD *)v12 = &off_24C33D080;
  v16 = *a5;
  v15 = (std::__shared_weak_count *)*((_QWORD *)&v16 + 1);
  *a5 = 0u;
  mlcore::AggregateFunctionQuery::AggregateFunctionQuery((uint64_t)(v12 + 24), a2, a3, a4, (uint64_t *)&v16, *a6);
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  *a1 = v12 + 24;
  a1[1] = v12;
}

void sub_20A7695C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  std::__shared_weak_count *v3;
  void *v5;
  va_list va;

  va_start(va, a3);
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::__shared_weak_count::~__shared_weak_count(v3);
  operator delete(v5);
  _Unwind_Resume(a1);
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ComposerPropertyLatestItemDateAdded(void)::$_0 &&>>()
{
  uint64_t v0;
  mlcore *v1;
  mlcore *v2;
  mlcore *v3;
  uint64_t v4;
  _QWORD *v5;
  __int128 v6;
  unint64_t *v7;
  unint64_t v8;
  unint64_t v9;
  std::__shared_weak_count *size;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  std::string __p;
  __int128 v19;

  v0 = operator new();
  v1 = (mlcore *)mlcore::TypedEntityClass<mlcore::Item>::sharedPointer();
  v2 = (mlcore *)mlcore::ItemPropertyDateAdded(v1);
  v3 = (mlcore *)mlcore::ItemPropertyComposerPersistentID(v2);
  v4 = mlcore::ComposerPropertyPersistentID(v3);
  v5 = operator new(0x38uLL);
  v5[1] = 0;
  v5[2] = 0;
  *v5 = &off_24C33D240;
  v5[4] = v3;
  v5[5] = 0;
  v5[3] = &off_24C33A5A8;
  v5[6] = v4;
  *(_QWORD *)&v19 = v5 + 3;
  *((_QWORD *)&v19 + 1) = v5;
  std::allocate_shared[abi:ne180100]<mlcore::AggregateFunctionQuery,std::allocator<mlcore::AggregateFunctionQuery>,mlcore::EntityClass *,mlcore::AggregateFunctionQuery::AggregateFunction,mlcore::ModelProperty<long long> *,std::shared_ptr<mlcore::ComparisonPropertyPredicate>,void>(&__p, (uint64_t)v1, 2, (uint64_t)v2, &v19);
  v6 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = 0uLL;
  *(_OWORD *)(v0 + 16) = 0u;
  *(_OWORD *)(v0 + 32) = 0u;
  *(_OWORD *)(v0 + 48) = 0u;
  *(_QWORD *)v0 = &off_24C337228;
  *(_OWORD *)(v0 + 64) = v6;
  if (*((_QWORD *)&v6 + 1))
  {
    v7 = (unint64_t *)(*((_QWORD *)&v6 + 1) + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
    mlcore::ComposerPropertyLatestItemDateAdded(void)::property = v0;
    do
      v9 = __ldaxr(v7);
    while (__stlxr(v9 - 1, v7));
    if (!v9)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v6 + 1) + 16))(*((_QWORD *)&v6 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v6 + 1));
    }
  }
  else
  {
    mlcore::ComposerPropertyLatestItemDateAdded(void)::property = v0;
  }
  size = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
  if (__p.__r_.__value_.__l.__size_)
  {
    v11 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
  }
  v13 = (std::__shared_weak_count *)*((_QWORD *)&v19 + 1);
  if (*((_QWORD *)&v19 + 1))
  {
    v14 = (unint64_t *)(*((_QWORD *)&v19 + 1) + 8);
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  v16 = mlcore::TypedEntityClass<mlcore::Composer>::sharedPointer();
  v17 = mlcore::ComposerPropertyLatestItemDateAdded(void)::property;
  std::string::basic_string[abi:ne180100]<0>(&__p, "latestItemDateAdded");
  mlcore::EntityClass::setPropertyForName(v16, v17, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_20A7697C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::allocate_shared[abi:ne180100]<mlcore::AggregateFunctionQuery,std::allocator<mlcore::AggregateFunctionQuery>,mlcore::EntityClass *,mlcore::AggregateFunctionQuery::AggregateFunction,mlcore::ModelProperty<long long> *,std::shared_ptr<mlcore::ComparisonPropertyPredicate>,void>(_QWORD *a1, uint64_t a2, int a3, uint64_t a4, __int128 *a5)
{
  char *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  std::__shared_weak_count *v13;
  __int128 v14;

  v10 = (char *)operator new(0x60uLL);
  *(_OWORD *)(v10 + 8) = 0u;
  *(_QWORD *)v10 = &off_24C33D080;
  v14 = *a5;
  v13 = (std::__shared_weak_count *)*((_QWORD *)&v14 + 1);
  *a5 = 0u;
  mlcore::AggregateFunctionQuery::AggregateFunctionQuery((uint64_t)(v10 + 24), a2, a3, a4, (uint64_t *)&v14, 0);
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  *a1 = v10 + 24;
  a1[1] = v10;
}

void sub_20A769920(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  std::__shared_weak_count *v3;
  void *v5;
  va_list va;

  va_start(va, a3);
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::__shared_weak_count::~__shared_weak_count(v3);
  operator delete(v5);
  _Unwind_Resume(a1);
}

double mlcore::Composer::Composer(mlcore::Composer *this, uint64_t a2)
{
  double result;

  result = 0.0;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_DWORD *)this + 12) = 1065353216;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *((_DWORD *)this + 22) = 1065353216;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_DWORD *)this + 32) = 1065353216;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 152) = 0u;
  *((_DWORD *)this + 42) = 1065353216;
  *((_OWORD *)this + 11) = 0u;
  *((_OWORD *)this + 12) = 0u;
  *((_DWORD *)this + 52) = 1065353216;
  *((_QWORD *)this + 27) = &unk_24C3371E8;
  *((_QWORD *)this + 28) = a2;
  *(_QWORD *)this = &off_24C33AAF8;
  *((_QWORD *)this + 1) = &off_24C3371C0;
  return result;
}

{
  double result;

  result = 0.0;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_DWORD *)this + 12) = 1065353216;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *((_DWORD *)this + 22) = 1065353216;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_DWORD *)this + 32) = 1065353216;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 152) = 0u;
  *((_DWORD *)this + 42) = 1065353216;
  *((_OWORD *)this + 11) = 0u;
  *((_OWORD *)this + 12) = 0u;
  *((_DWORD *)this + 52) = 1065353216;
  *((_QWORD *)this + 27) = &unk_24C3371E8;
  *((_QWORD *)this + 28) = a2;
  *(_QWORD *)this = &off_24C33AAF8;
  *((_QWORD *)this + 1) = &off_24C3371C0;
  return result;
}

void mlcore::Composer::name(mlcore::Composer *this@<X0>, std::string *a2@<X8>)
{
  unint64_t v4;

  v4 = mlcore::ComposerPropertyName(this);
  mlcore::Entity::valueForProperty<std::string>(a2, (uint64_t)this, v4);
}

void mlcore::Entity::valueForProperty<std::string>(std::string *a1, uint64_t a2, unint64_t a3)
{
  uint64_t v5;
  std::runtime_error *exception;

  v5 = a2 + 8;
  if (!mlcore::PropertyCache::hasValueForProperty((_QWORD *)(a2 + 8), a3))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "faulting not implemented yet");
    __cxa_throw(exception, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
  }
  mlcore::PropertyCacheBase<std::string,mediaplatform::Data>::valueForProperty(a1, v5, a3);
}

void sub_20A769AC8(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void mlcore::Composer::setName(mlcore *a1, uint64_t a2)
{
  std::string::size_type v4;

  v4 = mlcore::ComposerPropertyName(a1);
  mlcore::Entity::setValueForProperty<std::string>((uint64_t)a1, a2, v4);
}

void mlcore::Entity::setValueForProperty<std::string>(uint64_t a1, uint64_t a2, std::string::size_type a3)
{
  uint64_t v4;
  std::string __p;

  v4 = a1 + 8;
  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    __p = *(std::string *)a2;
  mlcore::PropertyCacheBase<std::string,mediaplatform::Data>::setValueForProperty(v4, &__p, a3);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_20A769B80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

mlcore::AccountTable *mlcore::AccountTable::AccountTable(mlcore::AccountTable *this)
{
  int v2;
  std::string *v3;
  std::string *v4;
  std::string *v5;
  std::string *v6;
  int v7;
  int v9;
  int v10;
  void *v11[2];
  char v12;
  void *v13[2];
  char v14;
  _BYTE v15[8];
  std::string v16;
  int v17;
  char v18;
  std::string v19;
  void *v20[2];
  char v21;
  void *v22[2];
  char v23;
  _BYTE v24[8];
  std::string v25;
  int v26;
  char v27;
  std::string v28;
  void *v29[2];
  char v30;
  void (**v31)(mediaplatform::DatabaseColumnBase *__hidden);
  std::string v32;
  int v33;
  uint64_t v34;
  int v35;
  std::string v36;
  uint64_t (**v37)();
  std::string v38;
  int v39;
  char v40;
  std::string v41;
  uint64_t (**v42)();
  std::string v43;
  int v44;
  char v45;
  std::string v46;
  uint64_t (**v47)();
  std::string __p;
  int v49;
  uint64_t v50;
  int v51;
  std::string v52;
  uint64_t (**v53)();
  std::string v54;
  int v55;
  char v56;
  std::string v57;
  uint64_t (**v58)();
  std::string __s;
  int v60;
  char v61;
  std::string v62;
  uint64_t (**v63)();
  std::string v64;
  int v65;
  uint64_t v66;
  int v67;
  uint64_t (**v68)();
  std::string v69;
  int v70;
  char v71;
  std::string v72;
  uint64_t (**v73)();
  std::string v74;
  int v75;
  char v76;
  std::string v77;
  uint64_t (**v78)();
  std::string v79;
  int v80;
  char v81;
  std::string v82;

  std::string::basic_string[abi:ne180100]<0>(&v36, "account");
  std::string::basic_string[abi:ne180100]<0>(v29, "dsid");
  mlcore::MediaColumn<long long>::MediaColumn((uint64_t)&v31, (uint64_t)v29, 1);
  std::string::basic_string[abi:ne180100]<0>(v22, "apple_id");
  std::string::basic_string[abi:ne180100]<0>(v20, "");
  mlcore::MediaColumn<std::string>::MediaColumn((uint64_t)v24, (uint64_t)v22, (uint64_t)v20);
  std::string::basic_string[abi:ne180100]<0>(v13, "alt_dsid");
  std::string::basic_string[abi:ne180100]<0>(v11, "");
  mlcore::MediaColumn<std::string>::MediaColumn((uint64_t)v15, (uint64_t)v13, (uint64_t)v11);
  if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v52, v36.__r_.__value_.__l.__data_, v36.__r_.__value_.__l.__size_);
  else
    v52 = v36;
  if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&__p, v32.__r_.__value_.__l.__data_, v32.__r_.__value_.__l.__size_);
  else
    __p = v32;
  v47 = off_24C335B18;
  v50 = v34;
  v2 = v33;
  v49 = v33;
  v51 = v35;
  v42 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v43, v25.__r_.__value_.__l.__data_, v25.__r_.__value_.__l.__size_);
  else
    v43 = v25;
  v44 = v26;
  v42 = &off_24C335AB8;
  v45 = v27;
  if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v46, v28.__r_.__value_.__l.__data_, v28.__r_.__value_.__l.__size_);
  else
    v46 = v28;
  v37 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v38, v16.__r_.__value_.__l.__data_, v16.__r_.__value_.__l.__size_);
  else
    v38 = v16;
  v39 = v17;
  v37 = &off_24C335AB8;
  v40 = v18;
  if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v41, v19.__r_.__value_.__l.__data_, v19.__r_.__value_.__l.__size_);
  else
    v41 = v19;
  *(_QWORD *)this = &off_24C330F50;
  v3 = (std::string *)((char *)this + 8);
  v10 = SHIBYTE(v52.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v3, v52.__r_.__value_.__l.__data_, v52.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = *(_OWORD *)&v52.__r_.__value_.__l.__data_;
    *((_QWORD *)this + 3) = *((_QWORD *)&v52.__r_.__value_.__l + 2);
  }
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 6) = 0;
  *((_QWORD *)this + 7) = 0;
  *(_QWORD *)this = off_24C335558;
  *((_QWORD *)this + 8) = 0;
  *((_QWORD *)this + 9) = 0;
  v9 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v64, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  else
    v64 = __p;
  v65 = v2;
  v63 = off_24C335B18;
  v66 = v50;
  v67 = v51;
  v58 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&__s, v43.__r_.__value_.__l.__data_, v43.__r_.__value_.__l.__size_);
  else
    __s = v43;
  v60 = v44;
  v58 = &off_24C335AB8;
  v61 = v45;
  if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v62, v46.__r_.__value_.__l.__data_, v46.__r_.__value_.__l.__size_);
  else
    v62 = v46;
  v53 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v54, v38.__r_.__value_.__l.__data_, v38.__r_.__value_.__l.__size_);
  else
    v54 = v38;
  v55 = v39;
  v53 = &off_24C335AB8;
  v56 = v40;
  if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v57, v41.__r_.__value_.__l.__data_, v41.__r_.__value_.__l.__size_);
  else
    v57 = v41;
  v73 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v74, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
  else
    v74 = __s;
  v75 = v60;
  v73 = &off_24C335AB8;
  v76 = v61;
  if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v77, v62.__r_.__value_.__l.__data_, v62.__r_.__value_.__l.__size_);
  else
    v77 = v62;
  v68 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v69, v54.__r_.__value_.__l.__data_, v54.__r_.__value_.__l.__size_);
  else
    v69 = v54;
  v70 = v55;
  v68 = &off_24C335AB8;
  v71 = v56;
  if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v72, v57.__r_.__value_.__l.__data_, v57.__r_.__value_.__l.__size_);
  else
    v72 = v57;
  v78 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v69.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v79, v69.__r_.__value_.__l.__data_, v69.__r_.__value_.__l.__size_);
  else
    v79 = v69;
  v80 = v70;
  v78 = &off_24C335AB8;
  v81 = v71;
  if (SHIBYTE(v72.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v82, v72.__r_.__value_.__l.__data_, v72.__r_.__value_.__l.__size_);
  else
    v82 = v72;
  *((_QWORD *)this + 10) = off_24C335D90;
  if (SHIBYTE(v79.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 88), v79.__r_.__value_.__l.__data_, v79.__r_.__value_.__l.__size_);
  else
    *(std::string *)((char *)this + 88) = v79;
  *((_DWORD *)this + 28) = v80;
  *((_QWORD *)this + 10) = &off_24C335AB8;
  *((_BYTE *)this + 116) = v81;
  v4 = (std::string *)((char *)this + 120);
  if (SHIBYTE(v82.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v4, v82.__r_.__value_.__l.__data_, v82.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)&v82.__r_.__value_.__l.__data_;
    *((_QWORD *)this + 17) = *((_QWORD *)&v82.__r_.__value_.__l + 2);
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v78);
  *((_QWORD *)this + 18) = off_24C335D90;
  if (SHIBYTE(v74.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 152), v74.__r_.__value_.__l.__data_, v74.__r_.__value_.__l.__size_);
  else
    *(std::string *)((char *)this + 152) = v74;
  *((_DWORD *)this + 44) = v75;
  *((_QWORD *)this + 18) = &off_24C335AB8;
  *((_BYTE *)this + 180) = v76;
  v5 = (std::string *)((char *)this + 184);
  if (SHIBYTE(v77.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v5, v77.__r_.__value_.__l.__data_, v77.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = *(_OWORD *)&v77.__r_.__value_.__l.__data_;
    *((_QWORD *)this + 25) = *((_QWORD *)&v77.__r_.__value_.__l + 2);
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v68);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v73);
  *((_QWORD *)this + 26) = off_24C335D90;
  v6 = (std::string *)((char *)this + 216);
  v7 = SHIBYTE(v64.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v6, v64.__r_.__value_.__l.__data_, v64.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = *(_OWORD *)&v64.__r_.__value_.__l.__data_;
    *((_QWORD *)this + 29) = *((_QWORD *)&v64.__r_.__value_.__l + 2);
  }
  *((_DWORD *)this + 60) = v2;
  *((_QWORD *)this + 26) = off_24C335B18;
  *(_QWORD *)((char *)this + 244) = v66;
  *((_DWORD *)this + 63) = v67;
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v53);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v58);
  if (v7 < 0)
    operator delete(v64.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v37);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v42);
  if (v9 < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (v10 < 0)
    operator delete(v52.__r_.__value_.__l.__data_);
  *(_QWORD *)this = &off_24C3360C0;
  *((_QWORD *)this + 32) = off_24C335D90;
  if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external((std::string *)this + 11, v32.__r_.__value_.__l.__data_, v32.__r_.__value_.__l.__size_);
  else
    *((std::string *)this + 11) = v32;
  *((_DWORD *)this + 72) = v33;
  *(_QWORD *)((char *)this + 292) = v34;
  *((_DWORD *)this + 75) = v35;
  *((_QWORD *)this + 32) = off_24C336AC0;
  std::__tuple_leaf<1ul,mlcore::MediaColumn<std::string>,false>::__tuple_leaf[abi:ne180100]<mlcore::MediaColumn<std::string>&,void>((uint64_t)this + 304, (uint64_t)v24);
  std::__tuple_leaf<2ul,mlcore::MediaColumn<std::string>,false>::__tuple_leaf[abi:ne180100]<mlcore::MediaColumn<std::string>&,void>((uint64_t)this + 368, (uint64_t)v15);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)v15);
  if (v12 < 0)
    operator delete(v11[0]);
  if (v14 < 0)
    operator delete(v13[0]);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)v24);
  if (v21 < 0)
    operator delete(v20[0]);
  if (v23 < 0)
    operator delete(v22[0]);
  v31 = off_24C335D90;
  if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v32.__r_.__value_.__l.__data_);
  if (v30 < 0)
    operator delete(v29[0]);
  if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v36.__r_.__value_.__l.__data_);
  *(_QWORD *)this = &off_24C336C08;
  return this;
}

void sub_20A76A410(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,void *a41,uint64_t a42,int a43,__int16 a44,char a45,char a46,char a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,void *a55,uint64_t a56,int a57,__int16 a58,char a59,char a60,uint64_t a61,void *a62,uint64_t a63)
{
  char a67;
  void *a70;
  char a72;
  uint64_t v72;

  mediaplatform::DatabaseTable<long long,std::string,std::string>::~DatabaseTable(v72);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&a27);
  if (a20 < 0)
    operator delete(__p);
  if (a26 < 0)
    operator delete(a21);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&a47);
  if (a40 < 0)
    operator delete(a35);
  if (a46 < 0)
    operator delete(a41);
  a61 = (uint64_t)off_24C335D90;
  if (a67 < 0)
    operator delete(a62);
  if (a60 < 0)
    operator delete(a55);
  if (a72 < 0)
    operator delete(a70);
  _Unwind_Resume(a1);
}

void sub_20A76A6F4()
{
  JUMPOUT(0x20A76A668);
}

void sub_20A76A6FC()
{
  JUMPOUT(0x20A76A678);
}

void sub_20A76A704()
{
  JUMPOUT(0x20A76A688);
}

void sub_20A76A70C()
{
  JUMPOUT(0x20A76A690);
}

void sub_20A76A714()
{
  JUMPOUT(0x20A76A6A0);
}

void sub_20A76A71C()
{
  JUMPOUT(0x20A76A6B0);
}

void sub_20A76A724()
{
  JUMPOUT(0x20A76A6CCLL);
}

void sub_20A76A72C()
{
  JUMPOUT(0x20A76A6DCLL);
}

uint64_t mlcore::MediaColumn<std::string>::MediaColumn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5;
  std::string *v6;
  std::string __p;
  std::string v9;
  std::string v10;

  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&v9, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    v9 = *(std::string *)a2;
  if (*(char *)(a3 + 23) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
  else
    __p = *(std::string *)a3;
  v5 = SHIBYTE(v9.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v10, v9.__r_.__value_.__l.__data_, v9.__r_.__value_.__l.__size_);
  else
    v10 = v9;
  *(_QWORD *)a1 = off_24C335D90;
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 8), v10.__r_.__value_.__l.__data_, v10.__r_.__value_.__l.__size_);
    *(_DWORD *)(a1 + 32) = 16;
    operator delete(v10.__r_.__value_.__l.__data_);
  }
  else
  {
    *(std::string *)(a1 + 8) = v10;
    *(_DWORD *)(a1 + 32) = 16;
  }
  *(_QWORD *)a1 = &off_24C335AB8;
  *(_BYTE *)(a1 + 36) = 1;
  v6 = (std::string *)(a1 + 40);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v6, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    operator delete(__p.__r_.__value_.__l.__data_);
    if ((v5 & 0x80000000) == 0)
      goto LABEL_16;
    goto LABEL_15;
  }
  *(_OWORD *)&v6->__r_.__value_.__l.__data_ = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
  *(_QWORD *)(a1 + 56) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
  if (v5 < 0)
LABEL_15:
    operator delete(v9.__r_.__value_.__l.__data_);
LABEL_16:
  *(_QWORD *)a1 = &off_24C336A60;
  return a1;
}

void sub_20A76A8A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  uint64_t v21;
  uint64_t v22;
  void **v23;
  char v24;
  uint64_t v25;

  v25 = v22;
  *(_QWORD *)v21 = v25;
  if (*(char *)(v21 + 31) < 0)
    operator delete(*v23);
  if (a14 < 0)
    operator delete(__p);
  if (v24 < 0)
    operator delete(a16);
  _Unwind_Resume(exception_object);
}

void mlcore::AccountTable::~AccountTable(mlcore::AccountTable *this)
{
  mlcore::MediaTable<long long,std::string,std::string>::~MediaTable((uint64_t)this);
  JUMPOUT(0x20BD27AFCLL);
}

uint64_t mediaplatform::DatabaseTable<long long,std::string,std::string>::columnCount()
{
  return 3;
}

void mediaplatform::DatabaseTable<long long,std::string,std::string>::columnNames(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  mediaplatform::ColumnNamesApplier::operator()<long long>((uint64_t)a2, a1 + 208);
  mediaplatform::ColumnNamesApplier::operator()<std::string>((uint64_t)a2, a1 + 144);
  mediaplatform::ColumnNamesApplier::operator()<std::string>((uint64_t)a2, a1 + 80);
}

void sub_20A76A984(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void mediaplatform::DatabaseTable<long long,std::string,std::string>::targetColumnExpression(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  __int128 *v3;
  __int128 *v4[3];
  __int128 **v5;

  v3 = (__int128 *)(a1 + 8);
  (*(void (**)(__int128 **__return_ptr))(*(_QWORD *)a1 + 24))(v4);
  std::allocate_shared[abi:ne180100]<mediaplatform::SQLColumnNameExpression,std::allocator<mediaplatform::SQLColumnNameExpression>,std::string &,std::string const&,void>(a2, v4[0], v3);
  v5 = v4;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v5);
}

void sub_20A76A9FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void mlcore::MediaTable<long long,std::string,std::string>::~MediaTable(uint64_t a1)
{
  *(_QWORD *)a1 = &off_24C3360C0;
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 368);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 304);
  *(_QWORD *)(a1 + 256) = off_24C335D90;
  if (*(char *)(a1 + 287) < 0)
    operator delete(*(void **)(a1 + 264));
  *(_QWORD *)a1 = off_24C335558;
  *(_QWORD *)(a1 + 208) = off_24C335D90;
  if (*(char *)(a1 + 239) < 0)
    operator delete(*(void **)(a1 + 216));
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 144);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 80);
  if (*(char *)(a1 + 79) < 0)
    operator delete(*(void **)(a1 + 56));
  mediaplatform::DatabaseTableBase::~DatabaseTableBase((void **)a1);
}

{
  mlcore::MediaTable<long long,std::string,std::string>::~MediaTable(a1);
  JUMPOUT(0x20BD27AFCLL);
}

void mediaplatform::DatabaseTable<long long,std::string,std::string>::~DatabaseTable(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = off_24C335558;
  v2 = a1 + 80;
  *(_QWORD *)(a1 + 208) = off_24C335D90;
  if (*(char *)(a1 + 239) < 0)
    operator delete(*(void **)(a1 + 216));
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 144);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(v2);
  if (*(char *)(a1 + 79) < 0)
    operator delete(*(void **)(a1 + 56));
  mediaplatform::DatabaseTableBase::~DatabaseTableBase((void **)a1);
}

{
  uint64_t v2;

  *(_QWORD *)a1 = off_24C335558;
  v2 = a1 + 80;
  *(_QWORD *)(a1 + 208) = off_24C335D90;
  if (*(char *)(a1 + 239) < 0)
    operator delete(*(void **)(a1 + 216));
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 144);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(v2);
  if (*(char *)(a1 + 79) < 0)
    operator delete(*(void **)(a1 + 56));
  mediaplatform::DatabaseTableBase::~DatabaseTableBase((void **)a1);
  JUMPOUT(0x20BD27AFCLL);
}

{
  uint64_t v2;

  *(_QWORD *)a1 = off_24C335558;
  v2 = a1 + 80;
  *(_QWORD *)(a1 + 208) = off_24C335D90;
  if (*(char *)(a1 + 239) < 0)
    operator delete(*(void **)(a1 + 216));
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 144);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(v2);
  if (*(char *)(a1 + 79) < 0)
    operator delete(*(void **)(a1 + 56));
  mediaplatform::DatabaseTableBase::~DatabaseTableBase((void **)a1);
}

uint64_t std::__tuple_leaf<2ul,mlcore::MediaColumn<std::string>,false>::__tuple_leaf[abi:ne180100]<mlcore::MediaColumn<std::string>&,void>(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  std::string *v5;
  __int128 v6;

  *(_QWORD *)a1 = off_24C335D90;
  if (*(char *)(a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 8), *(const std::string::value_type **)(a2 + 8), *(_QWORD *)(a2 + 16));
  }
  else
  {
    v4 = *(_OWORD *)(a2 + 8);
    *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 8) = v4;
  }
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_QWORD *)a1 = &off_24C335AB8;
  *(_BYTE *)(a1 + 36) = *(_BYTE *)(a2 + 36);
  v5 = (std::string *)(a1 + 40);
  if (*(char *)(a2 + 63) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *(const std::string::value_type **)(a2 + 40), *(_QWORD *)(a2 + 48));
  }
  else
  {
    v6 = *(_OWORD *)(a2 + 40);
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
  *(_QWORD *)a1 = &off_24C336A60;
  return a1;
}

void sub_20A76ACF4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  uint64_t v3;

  *(_QWORD *)v1 = v3;
  if (*(char *)(v1 + 31) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

void mlcore::AccountTable::dsidColumn(mlcore::AccountTable *this@<X0>, uint64_t a2@<X8>)
{
  std::string *v4;

  *(_QWORD *)a2 = off_24C335D90;
  v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 287) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 33), *((_QWORD *)this + 34));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 264);
    *(_QWORD *)(a2 + 24) = *((_QWORD *)this + 35);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 72);
  *(_DWORD *)(a2 + 44) = *((_DWORD *)this + 75);
  *(_QWORD *)(a2 + 36) = *(_QWORD *)((char *)this + 292);
  *(_QWORD *)a2 = off_24C336AC0;
}

void mlcore::AccountTable::appleIDColumn(mlcore::AccountTable *this@<X0>, uint64_t a2@<X8>)
{
  std::string *v4;
  std::string *v5;

  *(_QWORD *)a2 = off_24C335D90;
  v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 335) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 39), *((_QWORD *)this + 40));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 312);
    *(_QWORD *)(a2 + 24) = *((_QWORD *)this + 41);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 84);
  *(_QWORD *)a2 = &off_24C335AB8;
  *(_BYTE *)(a2 + 36) = *((_BYTE *)this + 340);
  v5 = (std::string *)(a2 + 40);
  if (*((char *)this + 367) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)this + 43), *((_QWORD *)this + 44));
  }
  else
  {
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 344);
    *(_QWORD *)(a2 + 56) = *((_QWORD *)this + 45);
  }
  *(_QWORD *)a2 = &off_24C336A60;
}

void sub_20A76AE50(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  uint64_t v3;

  *(_QWORD *)v1 = v3;
  if (*(char *)(v1 + 31) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

void mlcore::AccountTable::altDSIDColumn(mlcore::AccountTable *this@<X0>, uint64_t a2@<X8>)
{
  std::string *v4;
  std::string *v5;

  *(_QWORD *)a2 = off_24C335D90;
  v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 399) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 47), *((_QWORD *)this + 48));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 376);
    *(_QWORD *)(a2 + 24) = *((_QWORD *)this + 49);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 100);
  *(_QWORD *)a2 = &off_24C335AB8;
  *(_BYTE *)(a2 + 36) = *((_BYTE *)this + 404);
  v5 = (std::string *)(a2 + 40);
  if (*((char *)this + 431) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)this + 51), *((_QWORD *)this + 52));
  }
  else
  {
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 408);
    *(_QWORD *)(a2 + 56) = *((_QWORD *)this + 53);
  }
  *(_QWORD *)a2 = &off_24C336A60;
}

void sub_20A76AF28(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  uint64_t v3;

  *(_QWORD *)v1 = v3;
  if (*(char *)(v1 + 31) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

void mlcore::Item::~Item(mlcore::Item *this)
{
  *(_QWORD *)this = off_24C33A860;
  mlcore::PropertyCacheBase<long long,int,double,std::string,mediaplatform::Data>::~PropertyCacheBase((_QWORD *)this + 1);
}

{
  *(_QWORD *)this = off_24C33A860;
  mlcore::PropertyCacheBase<long long,int,double,std::string,mediaplatform::Data>::~PropertyCacheBase((_QWORD *)this + 1);
  JUMPOUT(0x20BD27AFCLL);
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyPersistentID(void)::$_0 &&>>()
{
  uint64_t v0;
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  mlcore::ItemTable **v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  std::string *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  std::string *v19;
  __int128 v20;
  std::string v21;
  std::string __p;
  char v23;
  _QWORD v24[2];

  v0 = operator new();
  v1 = (_QWORD *)mediaplatform::Singleton<mlcore::ItemTable>::sharedInstance();
  v2 = (std::__shared_weak_count *)v1[1];
  v24[0] = *v1;
  v24[1] = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  v5 = (mlcore::ItemTable **)mediaplatform::Singleton<mlcore::ItemTable>::sharedInstance();
  mlcore::ItemTable::persistentIDColumn(*v5, (uint64_t)&__p);
  mlcore::DatabaseModelProperty<long long>::DatabaseModelProperty(v0, v24, (uint64_t)&__p);
  mlcore::ItemPropertyPersistentID(void)::property = v0;
  if (v23 < 0)
    operator delete((void *)__p.__r_.__value_.__l.__size_);
  if (v2)
  {
    v6 = (unint64_t *)&v2->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v8 = mlcore::ItemPropertyPersistentID(void)::property;
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  std::string::operator=((std::string *)(v8 + 40), &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v9 = mlcore::TypedEntityClass<mlcore::Item>::sharedPointer();
  v10 = mlcore::ItemPropertyPersistentID(void)::property;
  v11 = mediaplatform::Singleton<mlcore::ItemTable>::sharedInstance();
  v12 = *(_QWORD *)v11;
  if (*(char *)(*(_QWORD *)v11 + 31) >= 0)
    v13 = *(unsigned __int8 *)(*(_QWORD *)v11 + 31);
  else
    v13 = *(_QWORD *)(*(_QWORD *)v11 + 16);
  v14 = &v21;
  std::string::basic_string[abi:ne180100]((uint64_t)&v21, v13 + 1);
  if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v14 = (std::string *)v21.__r_.__value_.__r.__words[0];
  if (v13)
  {
    v17 = *(char **)(v12 + 8);
    v16 = (char *)(v12 + 8);
    v15 = v17;
    if (v16[23] >= 0)
      v18 = v16;
    else
      v18 = v15;
    memmove(v14, v18, v13);
  }
  *(_WORD *)((char *)&v14->__r_.__value_.__l.__data_ + v13) = 46;
  v19 = std::string::append(&v21, "persistentID");
  v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  __p.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  mlcore::EntityClass::setPropertyForName(v9, v10, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
}

void sub_20A76B18C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

uint64_t _ZNSt3__115allocate_sharedB8ne180100IN6mlcore9ItemTableENS_9allocatorIS2_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(uint64_t *a1)
{
  _QWORD *v2;
  uint64_t result;

  v2 = operator new(0xEA8uLL);
  v2[1] = 0;
  v2[2] = 0;
  *v2 = &off_24C33D630;
  result = mlcore::ItemTable::ItemTable((mlcore::ItemTable *)(v2 + 3));
  *a1 = result;
  a1[1] = (uint64_t)v2;
  return result;
}

void sub_20A76B288(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<mlcore::ItemTable>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C33D630;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<mlcore::ItemTable>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C33D630;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x20BD27AFCLL);
}

uint64_t std::__shared_ptr_emplace<mlcore::ItemTable>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyTitle(void)::$_0 &&>>()
{
  uint64_t v0;
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  mlcore::ItemExtraTable **v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  std::string *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  std::string *v19;
  __int128 v20;
  std::string v21;
  std::string __str;
  _QWORD v23[2];

  v0 = operator new();
  v1 = (_QWORD *)mediaplatform::Singleton<mlcore::ItemExtraTable>::sharedInstance();
  v2 = (std::__shared_weak_count *)v1[1];
  v23[0] = *v1;
  v23[1] = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  v5 = (mlcore::ItemExtraTable **)mediaplatform::Singleton<mlcore::ItemExtraTable>::sharedInstance();
  mlcore::ItemExtraTable::titleColumn(*v5, (uint64_t)&__str);
  mlcore::DatabaseModelProperty<std::string>::DatabaseModelProperty(v0, v23, (uint64_t)&__str);
  mlcore::ItemPropertyTitle(void)::property = v0;
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&__str);
  if (v2)
  {
    v6 = (unint64_t *)&v2->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v8 = mlcore::ItemPropertyTitle(void)::property;
  std::string::basic_string[abi:ne180100]<0>(&__str, "");
  std::string::operator=((std::string *)(v8 + 40), &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  v9 = mlcore::TypedEntityClass<mlcore::Item>::sharedPointer();
  v10 = mlcore::ItemPropertyTitle(void)::property;
  v11 = mediaplatform::Singleton<mlcore::ItemExtraTable>::sharedInstance();
  v12 = *(_QWORD *)v11;
  if (*(char *)(*(_QWORD *)v11 + 31) >= 0)
    v13 = *(unsigned __int8 *)(*(_QWORD *)v11 + 31);
  else
    v13 = *(_QWORD *)(*(_QWORD *)v11 + 16);
  v14 = &v21;
  std::string::basic_string[abi:ne180100]((uint64_t)&v21, v13 + 1);
  if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v14 = (std::string *)v21.__r_.__value_.__r.__words[0];
  if (v13)
  {
    v17 = *(char **)(v12 + 8);
    v16 = (char *)(v12 + 8);
    v15 = v17;
    if (v16[23] >= 0)
      v18 = v16;
    else
      v18 = v15;
    memmove(v14, v18, v13);
  }
  *(_WORD *)((char *)&v14->__r_.__value_.__l.__data_ + v13) = 46;
  v19 = std::string::append(&v21, "title");
  v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  __str.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  mlcore::EntityClass::setPropertyForName(v9, v10, &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
}

void sub_20A76B4BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

uint64_t _ZNSt3__115allocate_sharedB8ne180100IN6mlcore14ItemExtraTableENS_9allocatorIS2_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(uint64_t *a1)
{
  _QWORD *v2;
  uint64_t result;

  v2 = operator new(0xF08uLL);
  v2[1] = 0;
  v2[2] = 0;
  *v2 = &off_24C33C868;
  result = mlcore::ItemExtraTable::ItemExtraTable((mlcore::ItemExtraTable *)(v2 + 3));
  *a1 = result;
  a1[1] = (uint64_t)v2;
  return result;
}

void sub_20A76B5B0(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<mlcore::ItemExtraTable>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C33C868;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<mlcore::ItemExtraTable>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C33C868;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x20BD27AFCLL);
}

uint64_t std::__shared_ptr_emplace<mlcore::ItemExtraTable>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t mlcore::ItemPropertySortTitle(mlcore *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&mlcore::ItemPropertySortTitle(void)::once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&mlcore::ItemPropertySortTitle(void)::once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertySortTitle(void)::$_0 &&>>);
  }
  return mlcore::ItemPropertySortTitle(void)::property;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertySortTitle(void)::$_0 &&>>()
{
  uint64_t v0;
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  mlcore::ItemExtraTable **v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  std::string *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  std::string *v19;
  __int128 v20;
  std::string v21;
  std::string __str;
  _QWORD v23[2];

  v0 = operator new();
  v1 = (_QWORD *)mediaplatform::Singleton<mlcore::ItemExtraTable>::sharedInstance();
  v2 = (std::__shared_weak_count *)v1[1];
  v23[0] = *v1;
  v23[1] = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  v5 = (mlcore::ItemExtraTable **)mediaplatform::Singleton<mlcore::ItemExtraTable>::sharedInstance();
  mlcore::ItemExtraTable::sortTitleColumn(*v5, (uint64_t)&__str);
  mlcore::DatabaseModelProperty<std::string>::DatabaseModelProperty(v0, v23, (uint64_t)&__str);
  mlcore::ItemPropertySortTitle(void)::property = v0;
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&__str);
  if (v2)
  {
    v6 = (unint64_t *)&v2->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v8 = mlcore::ItemPropertySortTitle(void)::property;
  std::string::basic_string[abi:ne180100]<0>(&__str, "");
  std::string::operator=((std::string *)(v8 + 40), &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  v9 = mlcore::TypedEntityClass<mlcore::Item>::sharedPointer();
  v10 = mlcore::ItemPropertySortTitle(void)::property;
  v11 = mediaplatform::Singleton<mlcore::ItemExtraTable>::sharedInstance();
  v12 = *(_QWORD *)v11;
  if (*(char *)(*(_QWORD *)v11 + 31) >= 0)
    v13 = *(unsigned __int8 *)(*(_QWORD *)v11 + 31);
  else
    v13 = *(_QWORD *)(*(_QWORD *)v11 + 16);
  v14 = &v21;
  std::string::basic_string[abi:ne180100]((uint64_t)&v21, v13 + 1);
  if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v14 = (std::string *)v21.__r_.__value_.__r.__words[0];
  if (v13)
  {
    v17 = *(char **)(v12 + 8);
    v16 = (char *)(v12 + 8);
    v15 = v17;
    if (v16[23] >= 0)
      v18 = v16;
    else
      v18 = v15;
    memmove(v14, v18, v13);
  }
  *(_WORD *)((char *)&v14->__r_.__value_.__l.__data_ + v13) = 46;
  v19 = std::string::append(&v21, "sortTitle");
  v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  __str.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  mlcore::EntityClass::setPropertyForName(v9, v10, &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
}

void sub_20A76B840(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

uint64_t mlcore::ItemPropertyComment(mlcore *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&mlcore::ItemPropertyComment(void)::once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&mlcore::ItemPropertyComment(void)::once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyComment(void)::$_0 &&>>);
  }
  return mlcore::ItemPropertyComment(void)::property;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyComment(void)::$_0 &&>>()
{
  uint64_t v0;
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  mlcore::ItemExtraTable **v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  std::string *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  std::string *v19;
  __int128 v20;
  std::string v21;
  std::string __str;
  _QWORD v23[2];

  v0 = operator new();
  v1 = (_QWORD *)mediaplatform::Singleton<mlcore::ItemExtraTable>::sharedInstance();
  v2 = (std::__shared_weak_count *)v1[1];
  v23[0] = *v1;
  v23[1] = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  v5 = (mlcore::ItemExtraTable **)mediaplatform::Singleton<mlcore::ItemExtraTable>::sharedInstance();
  mlcore::ItemExtraTable::commentColumn(*v5, (uint64_t)&__str);
  mlcore::DatabaseModelProperty<std::string>::DatabaseModelProperty(v0, v23, (uint64_t)&__str);
  mlcore::ItemPropertyComment(void)::property = v0;
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&__str);
  if (v2)
  {
    v6 = (unint64_t *)&v2->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v8 = mlcore::ItemPropertyComment(void)::property;
  std::string::basic_string[abi:ne180100]<0>(&__str, "");
  std::string::operator=((std::string *)(v8 + 40), &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  v9 = mlcore::TypedEntityClass<mlcore::Item>::sharedPointer();
  v10 = mlcore::ItemPropertyComment(void)::property;
  v11 = mediaplatform::Singleton<mlcore::ItemExtraTable>::sharedInstance();
  v12 = *(_QWORD *)v11;
  if (*(char *)(*(_QWORD *)v11 + 31) >= 0)
    v13 = *(unsigned __int8 *)(*(_QWORD *)v11 + 31);
  else
    v13 = *(_QWORD *)(*(_QWORD *)v11 + 16);
  v14 = &v21;
  std::string::basic_string[abi:ne180100]((uint64_t)&v21, v13 + 1);
  if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v14 = (std::string *)v21.__r_.__value_.__r.__words[0];
  if (v13)
  {
    v17 = *(char **)(v12 + 8);
    v16 = (char *)(v12 + 8);
    v15 = v17;
    if (v16[23] >= 0)
      v18 = v16;
    else
      v18 = v15;
    memmove(v14, v18, v13);
  }
  *(_WORD *)((char *)&v14->__r_.__value_.__l.__data_ + v13) = 46;
  v19 = std::string::append(&v21, "comment");
  v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  __str.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  mlcore::EntityClass::setPropertyForName(v9, v10, &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
}

void sub_20A76BB1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

uint64_t mlcore::ItemPropertyDescription(mlcore *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&mlcore::ItemPropertyDescription(void)::once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&mlcore::ItemPropertyDescription(void)::once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyDescription(void)::$_0 &&>>);
  }
  return mlcore::ItemPropertyDescription(void)::property;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyDescription(void)::$_0 &&>>()
{
  uint64_t v0;
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  mlcore::ItemExtraTable **v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  std::string *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  std::string *v19;
  __int128 v20;
  std::string v21;
  std::string __str;
  _QWORD v23[2];

  v0 = operator new();
  v1 = (_QWORD *)mediaplatform::Singleton<mlcore::ItemExtraTable>::sharedInstance();
  v2 = (std::__shared_weak_count *)v1[1];
  v23[0] = *v1;
  v23[1] = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  v5 = (mlcore::ItemExtraTable **)mediaplatform::Singleton<mlcore::ItemExtraTable>::sharedInstance();
  mlcore::ItemExtraTable::descriptionColumn(*v5, (uint64_t)&__str);
  mlcore::DatabaseModelProperty<std::string>::DatabaseModelProperty(v0, v23, (uint64_t)&__str);
  mlcore::ItemPropertyDescription(void)::property = v0;
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&__str);
  if (v2)
  {
    v6 = (unint64_t *)&v2->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v8 = mlcore::ItemPropertyDescription(void)::property;
  std::string::basic_string[abi:ne180100]<0>(&__str, "");
  std::string::operator=((std::string *)(v8 + 40), &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  v9 = mlcore::TypedEntityClass<mlcore::Item>::sharedPointer();
  v10 = mlcore::ItemPropertyDescription(void)::property;
  v11 = mediaplatform::Singleton<mlcore::ItemExtraTable>::sharedInstance();
  v12 = *(_QWORD *)v11;
  if (*(char *)(*(_QWORD *)v11 + 31) >= 0)
    v13 = *(unsigned __int8 *)(*(_QWORD *)v11 + 31);
  else
    v13 = *(_QWORD *)(*(_QWORD *)v11 + 16);
  v14 = &v21;
  std::string::basic_string[abi:ne180100]((uint64_t)&v21, v13 + 1);
  if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v14 = (std::string *)v21.__r_.__value_.__r.__words[0];
  if (v13)
  {
    v17 = *(char **)(v12 + 8);
    v16 = (char *)(v12 + 8);
    v15 = v17;
    if (v16[23] >= 0)
      v18 = v16;
    else
      v18 = v15;
    memmove(v14, v18, v13);
  }
  *(_WORD *)((char *)&v14->__r_.__value_.__l.__data_ + v13) = 46;
  v19 = std::string::append(&v21, "description");
  v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  __str.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  mlcore::EntityClass::setPropertyForName(v9, v10, &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
}

void sub_20A76BDF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyLongDescription(void)::$_0 &&>>()
{
  uint64_t v0;
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  mlcore::ItemExtraTable **v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  std::string *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  std::string *v19;
  __int128 v20;
  std::string v21;
  std::string __str;
  _QWORD v23[2];

  v0 = operator new();
  v1 = (_QWORD *)mediaplatform::Singleton<mlcore::ItemExtraTable>::sharedInstance();
  v2 = (std::__shared_weak_count *)v1[1];
  v23[0] = *v1;
  v23[1] = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  v5 = (mlcore::ItemExtraTable **)mediaplatform::Singleton<mlcore::ItemExtraTable>::sharedInstance();
  mlcore::ItemExtraTable::descriptionLongColumn(*v5, (uint64_t)&__str);
  mlcore::DatabaseModelProperty<std::string>::DatabaseModelProperty(v0, v23, (uint64_t)&__str);
  mlcore::ItemPropertyLongDescription(void)::property = v0;
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&__str);
  if (v2)
  {
    v6 = (unint64_t *)&v2->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v8 = mlcore::ItemPropertyLongDescription(void)::property;
  std::string::basic_string[abi:ne180100]<0>(&__str, "");
  std::string::operator=((std::string *)(v8 + 40), &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  v9 = mlcore::TypedEntityClass<mlcore::Item>::sharedPointer();
  v10 = mlcore::ItemPropertyLongDescription(void)::property;
  v11 = mediaplatform::Singleton<mlcore::ItemExtraTable>::sharedInstance();
  v12 = *(_QWORD *)v11;
  if (*(char *)(*(_QWORD *)v11 + 31) >= 0)
    v13 = *(unsigned __int8 *)(*(_QWORD *)v11 + 31);
  else
    v13 = *(_QWORD *)(*(_QWORD *)v11 + 16);
  v14 = &v21;
  std::string::basic_string[abi:ne180100]((uint64_t)&v21, v13 + 1);
  if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v14 = (std::string *)v21.__r_.__value_.__r.__words[0];
  if (v13)
  {
    v17 = *(char **)(v12 + 8);
    v16 = (char *)(v12 + 8);
    v15 = v17;
    if (v16[23] >= 0)
      v18 = v16;
    else
      v18 = v15;
    memmove(v14, v18, v13);
  }
  *(_WORD *)((char *)&v14->__r_.__value_.__l.__data_ + v13) = 46;
  v19 = std::string::append(&v21, "longDescription");
  v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  __str.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  mlcore::EntityClass::setPropertyForName(v9, v10, &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
}

void sub_20A76C078(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyLyrics(void)::$_0 &&>>()
{
  uint64_t v0;
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  mlcore::LyricsTable **v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  std::string *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  std::string *v19;
  __int128 v20;
  std::string v21;
  std::string __str;
  _QWORD v23[2];

  v0 = operator new();
  v1 = (_QWORD *)mediaplatform::Singleton<mlcore::LyricsTable>::sharedInstance();
  v2 = (std::__shared_weak_count *)v1[1];
  v23[0] = *v1;
  v23[1] = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  v5 = (mlcore::LyricsTable **)mediaplatform::Singleton<mlcore::LyricsTable>::sharedInstance();
  mlcore::LyricsTable::lyricsColumn(*v5, (uint64_t)&__str);
  mlcore::DatabaseModelProperty<std::string>::DatabaseModelProperty(v0, v23, (uint64_t)&__str);
  mlcore::ItemPropertyLyrics(void)::property = v0;
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&__str);
  if (v2)
  {
    v6 = (unint64_t *)&v2->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v8 = mlcore::ItemPropertyLyrics(void)::property;
  std::string::basic_string[abi:ne180100]<0>(&__str, "");
  std::string::operator=((std::string *)(v8 + 40), &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  v9 = mlcore::TypedEntityClass<mlcore::Item>::sharedPointer();
  v10 = mlcore::ItemPropertyLyrics(void)::property;
  v11 = mediaplatform::Singleton<mlcore::LyricsTable>::sharedInstance();
  v12 = *(_QWORD *)v11;
  if (*(char *)(*(_QWORD *)v11 + 31) >= 0)
    v13 = *(unsigned __int8 *)(*(_QWORD *)v11 + 31);
  else
    v13 = *(_QWORD *)(*(_QWORD *)v11 + 16);
  v14 = &v21;
  std::string::basic_string[abi:ne180100]((uint64_t)&v21, v13 + 1);
  if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v14 = (std::string *)v21.__r_.__value_.__r.__words[0];
  if (v13)
  {
    v17 = *(char **)(v12 + 8);
    v16 = (char *)(v12 + 8);
    v15 = v17;
    if (v16[23] >= 0)
      v18 = v16;
    else
      v18 = v15;
    memmove(v14, v18, v13);
  }
  *(_WORD *)((char *)&v14->__r_.__value_.__l.__data_ + v13) = 46;
  v19 = std::string::append(&v21, "lyrics");
  v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  __str.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  mlcore::EntityClass::setPropertyForName(v9, v10, &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
}

void sub_20A76C2F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

mlcore::LyricsTable *_ZNSt3__115allocate_sharedB8ne180100IN6mlcore11LyricsTableENS_9allocatorIS2_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(mlcore::LyricsTable **a1)
{
  _QWORD *v2;
  mlcore::LyricsTable *result;

  v2 = operator new(0x2C8uLL);
  v2[1] = 0;
  v2[2] = 0;
  *v2 = &off_24C33C328;
  result = mlcore::LyricsTable::LyricsTable((mlcore::LyricsTable *)(v2 + 3));
  *a1 = result;
  a1[1] = (mlcore::LyricsTable *)v2;
  return result;
}

void sub_20A76C3EC(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<mlcore::LyricsTable>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C33C328;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<mlcore::LyricsTable>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C33C328;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x20BD27AFCLL);
}

uint64_t std::__shared_ptr_emplace<mlcore::LyricsTable>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyStoreLyricsAvailable(void)::$_0 &&>>()
{
  uint64_t v0;
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  mlcore::LyricsTable **v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  std::string *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  std::string *v19;
  __int128 v20;
  std::string v21;
  std::string __p;
  char v23;
  _QWORD v24[2];

  v0 = operator new();
  v1 = (_QWORD *)mediaplatform::Singleton<mlcore::LyricsTable>::sharedInstance();
  v2 = (std::__shared_weak_count *)v1[1];
  v24[0] = *v1;
  v24[1] = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  v5 = (mlcore::LyricsTable **)mediaplatform::Singleton<mlcore::LyricsTable>::sharedInstance();
  mlcore::LyricsTable::storeLyricsAvailableColumn(*v5, (uint64_t)&__p);
  mlcore::DatabaseModelProperty<int>::DatabaseModelProperty(v0, v24, (uint64_t)&__p);
  mlcore::ItemPropertyStoreLyricsAvailable(void)::property = v0;
  if (v23 < 0)
    operator delete((void *)__p.__r_.__value_.__l.__size_);
  if (v2)
  {
    v6 = (unint64_t *)&v2->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v8 = mlcore::ItemPropertyStoreLyricsAvailable(void)::property;
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  std::string::operator=((std::string *)(v8 + 40), &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v9 = mlcore::TypedEntityClass<mlcore::Item>::sharedPointer();
  v10 = mlcore::ItemPropertyStoreLyricsAvailable(void)::property;
  v11 = mediaplatform::Singleton<mlcore::LyricsTable>::sharedInstance();
  v12 = *(_QWORD *)v11;
  if (*(char *)(*(_QWORD *)v11 + 31) >= 0)
    v13 = *(unsigned __int8 *)(*(_QWORD *)v11 + 31);
  else
    v13 = *(_QWORD *)(*(_QWORD *)v11 + 16);
  v14 = &v21;
  std::string::basic_string[abi:ne180100]((uint64_t)&v21, v13 + 1);
  if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v14 = (std::string *)v21.__r_.__value_.__r.__words[0];
  if (v13)
  {
    v17 = *(char **)(v12 + 8);
    v16 = (char *)(v12 + 8);
    v15 = v17;
    if (v16[23] >= 0)
      v18 = v16;
    else
      v18 = v15;
    memmove(v14, v18, v13);
  }
  *(_WORD *)((char *)&v14->__r_.__value_.__l.__data_ + v13) = 46;
  v19 = std::string::append(&v21, "store_lyrics_available");
  v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  __p.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  mlcore::EntityClass::setPropertyForName(v9, v10, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
}

void sub_20A76C628(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyTimeSyncedLyricsAvailable(void)::$_0 &&>>()
{
  uint64_t v0;
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  mlcore::LyricsTable **v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  std::string *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  std::string *v19;
  __int128 v20;
  std::string v21;
  std::string __p;
  char v23;
  _QWORD v24[2];

  v0 = operator new();
  v1 = (_QWORD *)mediaplatform::Singleton<mlcore::LyricsTable>::sharedInstance();
  v2 = (std::__shared_weak_count *)v1[1];
  v24[0] = *v1;
  v24[1] = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  v5 = (mlcore::LyricsTable **)mediaplatform::Singleton<mlcore::LyricsTable>::sharedInstance();
  mlcore::LyricsTable::timeSyncedLyricsAvailableColumn(*v5, (uint64_t)&__p);
  mlcore::DatabaseModelProperty<int>::DatabaseModelProperty(v0, v24, (uint64_t)&__p);
  mlcore::ItemPropertyTimeSyncedLyricsAvailable(void)::property = v0;
  if (v23 < 0)
    operator delete((void *)__p.__r_.__value_.__l.__size_);
  if (v2)
  {
    v6 = (unint64_t *)&v2->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v8 = mlcore::ItemPropertyTimeSyncedLyricsAvailable(void)::property;
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  std::string::operator=((std::string *)(v8 + 40), &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v9 = mlcore::TypedEntityClass<mlcore::Item>::sharedPointer();
  v10 = mlcore::ItemPropertyTimeSyncedLyricsAvailable(void)::property;
  v11 = mediaplatform::Singleton<mlcore::LyricsTable>::sharedInstance();
  v12 = *(_QWORD *)v11;
  if (*(char *)(*(_QWORD *)v11 + 31) >= 0)
    v13 = *(unsigned __int8 *)(*(_QWORD *)v11 + 31);
  else
    v13 = *(_QWORD *)(*(_QWORD *)v11 + 16);
  v14 = &v21;
  std::string::basic_string[abi:ne180100]((uint64_t)&v21, v13 + 1);
  if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v14 = (std::string *)v21.__r_.__value_.__r.__words[0];
  if (v13)
  {
    v17 = *(char **)(v12 + 8);
    v16 = (char *)(v12 + 8);
    v15 = v17;
    if (v16[23] >= 0)
      v18 = v16;
    else
      v18 = v15;
    memmove(v14, v18, v13);
  }
  *(_WORD *)((char *)&v14->__r_.__value_.__l.__data_ + v13) = 46;
  v19 = std::string::append(&v21, "time_synced_lyrics_available");
  v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  __p.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  mlcore::EntityClass::setPropertyForName(v9, v10, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
}

void sub_20A76C8B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyLibraryLyricsAvailable(void)::$_0 &&>>()
{
  mlcore *v0;
  std::string::size_type v1;
  __int128 v2;
  std::__shared_weak_count *v3;
  unint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  std::__shared_weak_count *size;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  std::string __p;

  v0 = (mlcore *)operator new();
  v1 = mlcore::ItemPropertyLyrics(v0);
  mlcore::CreateComparisonPredicate("", v1, 1, 0, (std::string **)&__p);
  v2 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = 0uLL;
  *((_OWORD *)v0 + 1) = 0u;
  *((_OWORD *)v0 + 2) = 0u;
  *(_QWORD *)v0 = &off_24C3398B8;
  *((_OWORD *)v0 + 3) = 0u;
  *((_OWORD *)v0 + 4) = v2;
  v3 = (std::__shared_weak_count *)*((_QWORD *)&v2 + 1);
  if (*((_QWORD *)&v2 + 1))
  {
    v4 = (unint64_t *)(*((_QWORD *)&v2 + 1) + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
    mlcore::ItemPropertyLibraryLyricsAvailable(void)::property = (uint64_t)v0;
    do
      v6 = __ldaxr(v4);
    while (__stlxr(v6 - 1, v4));
    if (!v6)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v2 + 1) + 16))(*((_QWORD *)&v2 + 1));
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  else
  {
    mlcore::ItemPropertyLibraryLyricsAvailable(void)::property = (uint64_t)v0;
  }
  size = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
  if (__p.__r_.__value_.__l.__size_)
  {
    v8 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
  }
  v10 = mlcore::ItemPropertyLibraryLyricsAvailable(void)::property;
  std::string::basic_string[abi:ne180100]<0>(&__p, "has_library_lyrics");
  std::string::operator=((std::string *)(v10 + 40), &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v11 = mlcore::TypedEntityClass<mlcore::Item>::sharedPointer();
  v12 = mlcore::ItemPropertyLibraryLyricsAvailable(void)::property;
  std::string::basic_string[abi:ne180100]<0>(&__p, "hasLibraryLyrics");
  mlcore::EntityClass::setPropertyForName(v11, v12, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_20A76CAF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyCopyright(void)::$_0 &&>>()
{
  uint64_t v0;
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  mlcore::ItemExtraTable **v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  std::string *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  std::string *v19;
  __int128 v20;
  std::string v21;
  std::string __str;
  _QWORD v23[2];

  v0 = operator new();
  v1 = (_QWORD *)mediaplatform::Singleton<mlcore::ItemExtraTable>::sharedInstance();
  v2 = (std::__shared_weak_count *)v1[1];
  v23[0] = *v1;
  v23[1] = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  v5 = (mlcore::ItemExtraTable **)mediaplatform::Singleton<mlcore::ItemExtraTable>::sharedInstance();
  mlcore::ItemExtraTable::copyrightColumn(*v5, (uint64_t)&__str);
  mlcore::DatabaseModelProperty<std::string>::DatabaseModelProperty(v0, v23, (uint64_t)&__str);
  mlcore::ItemPropertyCopyright(void)::property = v0;
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&__str);
  if (v2)
  {
    v6 = (unint64_t *)&v2->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v8 = mlcore::ItemPropertyCopyright(void)::property;
  std::string::basic_string[abi:ne180100]<0>(&__str, "");
  std::string::operator=((std::string *)(v8 + 40), &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  v9 = mlcore::TypedEntityClass<mlcore::Item>::sharedPointer();
  v10 = mlcore::ItemPropertyCopyright(void)::property;
  v11 = mediaplatform::Singleton<mlcore::ItemExtraTable>::sharedInstance();
  v12 = *(_QWORD *)v11;
  if (*(char *)(*(_QWORD *)v11 + 31) >= 0)
    v13 = *(unsigned __int8 *)(*(_QWORD *)v11 + 31);
  else
    v13 = *(_QWORD *)(*(_QWORD *)v11 + 16);
  v14 = &v21;
  std::string::basic_string[abi:ne180100]((uint64_t)&v21, v13 + 1);
  if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v14 = (std::string *)v21.__r_.__value_.__r.__words[0];
  if (v13)
  {
    v17 = *(char **)(v12 + 8);
    v16 = (char *)(v12 + 8);
    v15 = v17;
    if (v16[23] >= 0)
      v18 = v16;
    else
      v18 = v15;
    memmove(v14, v18, v13);
  }
  *(_WORD *)((char *)&v14->__r_.__value_.__l.__data_ + v13) = 46;
  v19 = std::string::append(&v21, "copyright");
  v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  __str.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  mlcore::EntityClass::setPropertyForName(v9, v10, &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
}

void sub_20A76CCFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyCollectionDescription(void)::$_0 &&>>()
{
  uint64_t v0;
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  mlcore::ItemExtraTable **v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  std::string *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  std::string *v19;
  __int128 v20;
  std::string v21;
  std::string __str;
  _QWORD v23[2];

  v0 = operator new();
  v1 = (_QWORD *)mediaplatform::Singleton<mlcore::ItemExtraTable>::sharedInstance();
  v2 = (std::__shared_weak_count *)v1[1];
  v23[0] = *v1;
  v23[1] = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  v5 = (mlcore::ItemExtraTable **)mediaplatform::Singleton<mlcore::ItemExtraTable>::sharedInstance();
  mlcore::ItemExtraTable::collectionDescriptionColumn(*v5, (uint64_t)&__str);
  mlcore::DatabaseModelProperty<std::string>::DatabaseModelProperty(v0, v23, (uint64_t)&__str);
  mlcore::ItemPropertyCollectionDescription(void)::property = v0;
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&__str);
  if (v2)
  {
    v6 = (unint64_t *)&v2->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v8 = mlcore::ItemPropertyCollectionDescription(void)::property;
  std::string::basic_string[abi:ne180100]<0>(&__str, "");
  std::string::operator=((std::string *)(v8 + 40), &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  v9 = mlcore::TypedEntityClass<mlcore::Item>::sharedPointer();
  v10 = mlcore::ItemPropertyCollectionDescription(void)::property;
  v11 = mediaplatform::Singleton<mlcore::ItemExtraTable>::sharedInstance();
  v12 = *(_QWORD *)v11;
  if (*(char *)(*(_QWORD *)v11 + 31) >= 0)
    v13 = *(unsigned __int8 *)(*(_QWORD *)v11 + 31);
  else
    v13 = *(_QWORD *)(*(_QWORD *)v11 + 16);
  v14 = &v21;
  std::string::basic_string[abi:ne180100]((uint64_t)&v21, v13 + 1);
  if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v14 = (std::string *)v21.__r_.__value_.__r.__words[0];
  if (v13)
  {
    v17 = *(char **)(v12 + 8);
    v16 = (char *)(v12 + 8);
    v15 = v17;
    if (v16[23] >= 0)
      v18 = v16;
    else
      v18 = v15;
    memmove(v14, v18, v13);
  }
  *(_WORD *)((char *)&v14->__r_.__value_.__l.__data_ + v13) = 46;
  v19 = std::string::append(&v21, "collectionDescription");
  v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  __str.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  mlcore::EntityClass::setPropertyForName(v9, v10, &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
}

void sub_20A76CF7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyTitleOrder(void)::$_0 &&>>()
{
  uint64_t v0;
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  mlcore::ItemTable **v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  std::string *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  std::string *v19;
  __int128 v20;
  std::string v21;
  std::string __p;
  char v23;
  _QWORD v24[2];

  v0 = operator new();
  v1 = (_QWORD *)mediaplatform::Singleton<mlcore::ItemTable>::sharedInstance();
  v2 = (std::__shared_weak_count *)v1[1];
  v24[0] = *v1;
  v24[1] = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  v5 = (mlcore::ItemTable **)mediaplatform::Singleton<mlcore::ItemTable>::sharedInstance();
  mlcore::ItemTable::titleOrderColumn(*v5, (uint64_t)&__p);
  mlcore::DatabaseModelProperty<long long>::DatabaseModelProperty(v0, v24, (uint64_t)&__p);
  mlcore::ItemPropertyTitleOrder(void)::property = v0;
  if (v23 < 0)
    operator delete((void *)__p.__r_.__value_.__l.__size_);
  if (v2)
  {
    v6 = (unint64_t *)&v2->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v8 = mlcore::ItemPropertyTitleOrder(void)::property;
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  std::string::operator=((std::string *)(v8 + 40), &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v9 = mlcore::TypedEntityClass<mlcore::Item>::sharedPointer();
  v10 = mlcore::ItemPropertyTitleOrder(void)::property;
  v11 = mediaplatform::Singleton<mlcore::ItemTable>::sharedInstance();
  v12 = *(_QWORD *)v11;
  if (*(char *)(*(_QWORD *)v11 + 31) >= 0)
    v13 = *(unsigned __int8 *)(*(_QWORD *)v11 + 31);
  else
    v13 = *(_QWORD *)(*(_QWORD *)v11 + 16);
  v14 = &v21;
  std::string::basic_string[abi:ne180100]((uint64_t)&v21, v13 + 1);
  if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v14 = (std::string *)v21.__r_.__value_.__r.__words[0];
  if (v13)
  {
    v17 = *(char **)(v12 + 8);
    v16 = (char *)(v12 + 8);
    v15 = v17;
    if (v16[23] >= 0)
      v18 = v16;
    else
      v18 = v15;
    memmove(v14, v18, v13);
  }
  *(_WORD *)((char *)&v14->__r_.__value_.__l.__data_ + v13) = 46;
  v19 = std::string::append(&v21, "titleOrder");
  v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  __p.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  mlcore::EntityClass::setPropertyForName(v9, v10, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
}

void sub_20A76D204(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyTitleOrderSection(void)::$_0 &&>>()
{
  uint64_t v0;
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  mlcore::ItemTable **v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  std::string *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  std::string *v19;
  __int128 v20;
  std::string v21;
  std::string __p;
  char v23;
  _QWORD v24[2];

  v0 = operator new();
  v1 = (_QWORD *)mediaplatform::Singleton<mlcore::ItemTable>::sharedInstance();
  v2 = (std::__shared_weak_count *)v1[1];
  v24[0] = *v1;
  v24[1] = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  v5 = (mlcore::ItemTable **)mediaplatform::Singleton<mlcore::ItemTable>::sharedInstance();
  mlcore::ItemTable::titleOrderSectionColumn(*v5, (uint64_t)&__p);
  mlcore::DatabaseModelProperty<int>::DatabaseModelProperty(v0, v24, (uint64_t)&__p);
  mlcore::ItemPropertyTitleOrderSection(void)::property = v0;
  if (v23 < 0)
    operator delete((void *)__p.__r_.__value_.__l.__size_);
  if (v2)
  {
    v6 = (unint64_t *)&v2->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v8 = mlcore::ItemPropertyTitleOrderSection(void)::property;
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  std::string::operator=((std::string *)(v8 + 40), &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v9 = mlcore::TypedEntityClass<mlcore::Item>::sharedPointer();
  v10 = mlcore::ItemPropertyTitleOrderSection(void)::property;
  v11 = mediaplatform::Singleton<mlcore::ItemTable>::sharedInstance();
  v12 = *(_QWORD *)v11;
  if (*(char *)(*(_QWORD *)v11 + 31) >= 0)
    v13 = *(unsigned __int8 *)(*(_QWORD *)v11 + 31);
  else
    v13 = *(_QWORD *)(*(_QWORD *)v11 + 16);
  v14 = &v21;
  std::string::basic_string[abi:ne180100]((uint64_t)&v21, v13 + 1);
  if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v14 = (std::string *)v21.__r_.__value_.__r.__words[0];
  if (v13)
  {
    v17 = *(char **)(v12 + 8);
    v16 = (char *)(v12 + 8);
    v15 = v17;
    if (v16[23] >= 0)
      v18 = v16;
    else
      v18 = v15;
    memmove(v14, v18, v13);
  }
  *(_WORD *)((char *)&v14->__r_.__value_.__l.__data_ + v13) = 46;
  v19 = std::string::append(&v21, "titleSection");
  v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  __p.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  mlcore::EntityClass::setPropertyForName(v9, v10, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
}

void sub_20A76D494(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyAlbumOrder(void)::$_0 &&>>()
{
  uint64_t v0;
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  mlcore::ItemTable **v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  std::string *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  std::string *v19;
  __int128 v20;
  std::string v21;
  std::string __p;
  char v23;
  _QWORD v24[2];

  v0 = operator new();
  v1 = (_QWORD *)mediaplatform::Singleton<mlcore::ItemTable>::sharedInstance();
  v2 = (std::__shared_weak_count *)v1[1];
  v24[0] = *v1;
  v24[1] = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  v5 = (mlcore::ItemTable **)mediaplatform::Singleton<mlcore::ItemTable>::sharedInstance();
  mlcore::ItemTable::albumOrderColumn(*v5, (uint64_t)&__p);
  mlcore::DatabaseModelProperty<long long>::DatabaseModelProperty(v0, v24, (uint64_t)&__p);
  mlcore::ItemPropertyAlbumOrder(void)::property = v0;
  if (v23 < 0)
    operator delete((void *)__p.__r_.__value_.__l.__size_);
  if (v2)
  {
    v6 = (unint64_t *)&v2->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v8 = mlcore::ItemPropertyAlbumOrder(void)::property;
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  std::string::operator=((std::string *)(v8 + 40), &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v9 = mlcore::TypedEntityClass<mlcore::Item>::sharedPointer();
  v10 = mlcore::ItemPropertyAlbumOrder(void)::property;
  v11 = mediaplatform::Singleton<mlcore::ItemTable>::sharedInstance();
  v12 = *(_QWORD *)v11;
  if (*(char *)(*(_QWORD *)v11 + 31) >= 0)
    v13 = *(unsigned __int8 *)(*(_QWORD *)v11 + 31);
  else
    v13 = *(_QWORD *)(*(_QWORD *)v11 + 16);
  v14 = &v21;
  std::string::basic_string[abi:ne180100]((uint64_t)&v21, v13 + 1);
  if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v14 = (std::string *)v21.__r_.__value_.__r.__words[0];
  if (v13)
  {
    v17 = *(char **)(v12 + 8);
    v16 = (char *)(v12 + 8);
    v15 = v17;
    if (v16[23] >= 0)
      v18 = v16;
    else
      v18 = v15;
    memmove(v14, v18, v13);
  }
  *(_WORD *)((char *)&v14->__r_.__value_.__l.__data_ + v13) = 46;
  v19 = std::string::append(&v21, "albumOrder");
  v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  __p.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  mlcore::EntityClass::setPropertyForName(v9, v10, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
}

void sub_20A76D724(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyAlbumOrderSection(void)::$_0 &&>>()
{
  uint64_t v0;
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  mlcore::ItemTable **v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  std::string *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  std::string *v19;
  __int128 v20;
  std::string v21;
  std::string __p;
  char v23;
  _QWORD v24[2];

  v0 = operator new();
  v1 = (_QWORD *)mediaplatform::Singleton<mlcore::ItemTable>::sharedInstance();
  v2 = (std::__shared_weak_count *)v1[1];
  v24[0] = *v1;
  v24[1] = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  v5 = (mlcore::ItemTable **)mediaplatform::Singleton<mlcore::ItemTable>::sharedInstance();
  mlcore::ItemTable::albumOrderSectionColumn(*v5, (uint64_t)&__p);
  mlcore::DatabaseModelProperty<int>::DatabaseModelProperty(v0, v24, (uint64_t)&__p);
  mlcore::ItemPropertyAlbumOrderSection(void)::property = v0;
  if (v23 < 0)
    operator delete((void *)__p.__r_.__value_.__l.__size_);
  if (v2)
  {
    v6 = (unint64_t *)&v2->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v8 = mlcore::ItemPropertyAlbumOrderSection(void)::property;
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  std::string::operator=((std::string *)(v8 + 40), &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v9 = mlcore::TypedEntityClass<mlcore::Item>::sharedPointer();
  v10 = mlcore::ItemPropertyAlbumOrderSection(void)::property;
  v11 = mediaplatform::Singleton<mlcore::ItemTable>::sharedInstance();
  v12 = *(_QWORD *)v11;
  if (*(char *)(*(_QWORD *)v11 + 31) >= 0)
    v13 = *(unsigned __int8 *)(*(_QWORD *)v11 + 31);
  else
    v13 = *(_QWORD *)(*(_QWORD *)v11 + 16);
  v14 = &v21;
  std::string::basic_string[abi:ne180100]((uint64_t)&v21, v13 + 1);
  if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v14 = (std::string *)v21.__r_.__value_.__r.__words[0];
  if (v13)
  {
    v17 = *(char **)(v12 + 8);
    v16 = (char *)(v12 + 8);
    v15 = v17;
    if (v16[23] >= 0)
      v18 = v16;
    else
      v18 = v15;
    memmove(v14, v18, v13);
  }
  *(_WORD *)((char *)&v14->__r_.__value_.__l.__data_ + v13) = 46;
  v19 = std::string::append(&v21, "albumSection");
  v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  __p.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  mlcore::EntityClass::setPropertyForName(v9, v10, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
}

void sub_20A76D9B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyArtistOrder(void)::$_0 &&>>()
{
  uint64_t v0;
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  mlcore::ItemTable **v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  std::string *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  std::string *v19;
  __int128 v20;
  std::string v21;
  std::string __p;
  char v23;
  _QWORD v24[2];

  v0 = operator new();
  v1 = (_QWORD *)mediaplatform::Singleton<mlcore::ItemTable>::sharedInstance();
  v2 = (std::__shared_weak_count *)v1[1];
  v24[0] = *v1;
  v24[1] = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  v5 = (mlcore::ItemTable **)mediaplatform::Singleton<mlcore::ItemTable>::sharedInstance();
  mlcore::ItemTable::albumArtistOrderColumn(*v5, (uint64_t)&__p);
  mlcore::DatabaseModelProperty<long long>::DatabaseModelProperty(v0, v24, (uint64_t)&__p);
  mlcore::ItemPropertyArtistOrder(void)::property = v0;
  if (v23 < 0)
    operator delete((void *)__p.__r_.__value_.__l.__size_);
  if (v2)
  {
    v6 = (unint64_t *)&v2->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v8 = mlcore::ItemPropertyArtistOrder(void)::property;
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  std::string::operator=((std::string *)(v8 + 40), &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v9 = mlcore::TypedEntityClass<mlcore::Item>::sharedPointer();
  v10 = mlcore::ItemPropertyArtistOrder(void)::property;
  v11 = mediaplatform::Singleton<mlcore::ItemTable>::sharedInstance();
  v12 = *(_QWORD *)v11;
  if (*(char *)(*(_QWORD *)v11 + 31) >= 0)
    v13 = *(unsigned __int8 *)(*(_QWORD *)v11 + 31);
  else
    v13 = *(_QWORD *)(*(_QWORD *)v11 + 16);
  v14 = &v21;
  std::string::basic_string[abi:ne180100]((uint64_t)&v21, v13 + 1);
  if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v14 = (std::string *)v21.__r_.__value_.__r.__words[0];
  if (v13)
  {
    v17 = *(char **)(v12 + 8);
    v16 = (char *)(v12 + 8);
    v15 = v17;
    if (v16[23] >= 0)
      v18 = v16;
    else
      v18 = v15;
    memmove(v14, v18, v13);
  }
  *(_WORD *)((char *)&v14->__r_.__value_.__l.__data_ + v13) = 46;
  v19 = std::string::append(&v21, "artistOrder");
  v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  __p.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  mlcore::EntityClass::setPropertyForName(v9, v10, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
}

void sub_20A76DC44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

uint64_t mlcore::ItemPropertyArtistOrderSection(mlcore *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&mlcore::ItemPropertyArtistOrderSection(void)::once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&mlcore::ItemPropertyArtistOrderSection(void)::once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyArtistOrderSection(void)::$_0 &&>>);
  }
  return mlcore::ItemPropertyArtistOrderSection(void)::property;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyArtistOrderSection(void)::$_0 &&>>()
{
  uint64_t v0;
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  mlcore::ItemTable **v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  std::string *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  std::string *v19;
  __int128 v20;
  std::string v21;
  std::string __p;
  char v23;
  _QWORD v24[2];

  v0 = operator new();
  v1 = (_QWORD *)mediaplatform::Singleton<mlcore::ItemTable>::sharedInstance();
  v2 = (std::__shared_weak_count *)v1[1];
  v24[0] = *v1;
  v24[1] = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  v5 = (mlcore::ItemTable **)mediaplatform::Singleton<mlcore::ItemTable>::sharedInstance();
  mlcore::ItemTable::albumArtistOrderSectionColumn(*v5, (uint64_t)&__p);
  mlcore::DatabaseModelProperty<int>::DatabaseModelProperty(v0, v24, (uint64_t)&__p);
  mlcore::ItemPropertyArtistOrderSection(void)::property = v0;
  if (v23 < 0)
    operator delete((void *)__p.__r_.__value_.__l.__size_);
  if (v2)
  {
    v6 = (unint64_t *)&v2->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v8 = mlcore::ItemPropertyArtistOrderSection(void)::property;
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  std::string::operator=((std::string *)(v8 + 40), &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v9 = mlcore::TypedEntityClass<mlcore::Item>::sharedPointer();
  v10 = mlcore::ItemPropertyArtistOrderSection(void)::property;
  v11 = mediaplatform::Singleton<mlcore::ItemTable>::sharedInstance();
  v12 = *(_QWORD *)v11;
  if (*(char *)(*(_QWORD *)v11 + 31) >= 0)
    v13 = *(unsigned __int8 *)(*(_QWORD *)v11 + 31);
  else
    v13 = *(_QWORD *)(*(_QWORD *)v11 + 16);
  v14 = &v21;
  std::string::basic_string[abi:ne180100]((uint64_t)&v21, v13 + 1);
  if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v14 = (std::string *)v21.__r_.__value_.__r.__words[0];
  if (v13)
  {
    v17 = *(char **)(v12 + 8);
    v16 = (char *)(v12 + 8);
    v15 = v17;
    if (v16[23] >= 0)
      v18 = v16;
    else
      v18 = v15;
    memmove(v14, v18, v13);
  }
  *(_WORD *)((char *)&v14->__r_.__value_.__l.__data_ + v13) = 46;
  v19 = std::string::append(&v21, "artistSection");
  v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  __p.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  mlcore::EntityClass::setPropertyForName(v9, v10, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
}

void sub_20A76DF30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyItemArtistOrder(void)::$_0 &&>>()
{
  uint64_t v0;
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  mlcore::ItemTable **v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  std::string *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  std::string *v19;
  __int128 v20;
  std::string v21;
  std::string __p;
  char v23;
  _QWORD v24[2];

  v0 = operator new();
  v1 = (_QWORD *)mediaplatform::Singleton<mlcore::ItemTable>::sharedInstance();
  v2 = (std::__shared_weak_count *)v1[1];
  v24[0] = *v1;
  v24[1] = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  v5 = (mlcore::ItemTable **)mediaplatform::Singleton<mlcore::ItemTable>::sharedInstance();
  mlcore::ItemTable::itemArtistOrderColumn(*v5, (uint64_t)&__p);
  mlcore::DatabaseModelProperty<long long>::DatabaseModelProperty(v0, v24, (uint64_t)&__p);
  mlcore::ItemPropertyItemArtistOrder(void)::property = v0;
  if (v23 < 0)
    operator delete((void *)__p.__r_.__value_.__l.__size_);
  if (v2)
  {
    v6 = (unint64_t *)&v2->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v8 = mlcore::ItemPropertyItemArtistOrder(void)::property;
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  std::string::operator=((std::string *)(v8 + 40), &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v9 = mlcore::TypedEntityClass<mlcore::Item>::sharedPointer();
  v10 = mlcore::ItemPropertyItemArtistOrder(void)::property;
  v11 = mediaplatform::Singleton<mlcore::ItemTable>::sharedInstance();
  v12 = *(_QWORD *)v11;
  if (*(char *)(*(_QWORD *)v11 + 31) >= 0)
    v13 = *(unsigned __int8 *)(*(_QWORD *)v11 + 31);
  else
    v13 = *(_QWORD *)(*(_QWORD *)v11 + 16);
  v14 = &v21;
  std::string::basic_string[abi:ne180100]((uint64_t)&v21, v13 + 1);
  if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v14 = (std::string *)v21.__r_.__value_.__r.__words[0];
  if (v13)
  {
    v17 = *(char **)(v12 + 8);
    v16 = (char *)(v12 + 8);
    v15 = v17;
    if (v16[23] >= 0)
      v18 = v16;
    else
      v18 = v15;
    memmove(v14, v18, v13);
  }
  *(_WORD *)((char *)&v14->__r_.__value_.__l.__data_ + v13) = 46;
  v19 = std::string::append(&v21, "itemArtistOrder");
  v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  __p.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  mlcore::EntityClass::setPropertyForName(v9, v10, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
}

void sub_20A76E1C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

uint64_t mlcore::ItemPropertyItemArtistOrderSection(mlcore *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&mlcore::ItemPropertyItemArtistOrderSection(void)::once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&mlcore::ItemPropertyItemArtistOrderSection(void)::once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyItemArtistOrderSection(void)::$_0 &&>>);
  }
  return mlcore::ItemPropertyItemArtistOrderSection(void)::property;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyItemArtistOrderSection(void)::$_0 &&>>()
{
  uint64_t v0;
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  mlcore::ItemTable **v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  std::string *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  std::string *v19;
  __int128 v20;
  std::string v21;
  std::string __p;
  char v23;
  _QWORD v24[2];

  v0 = operator new();
  v1 = (_QWORD *)mediaplatform::Singleton<mlcore::ItemTable>::sharedInstance();
  v2 = (std::__shared_weak_count *)v1[1];
  v24[0] = *v1;
  v24[1] = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  v5 = (mlcore::ItemTable **)mediaplatform::Singleton<mlcore::ItemTable>::sharedInstance();
  mlcore::ItemTable::itemArtistOrderSectionColumn(*v5, (uint64_t)&__p);
  mlcore::DatabaseModelProperty<int>::DatabaseModelProperty(v0, v24, (uint64_t)&__p);
  mlcore::ItemPropertyItemArtistOrderSection(void)::property = v0;
  if (v23 < 0)
    operator delete((void *)__p.__r_.__value_.__l.__size_);
  if (v2)
  {
    v6 = (unint64_t *)&v2->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v8 = mlcore::ItemPropertyItemArtistOrderSection(void)::property;
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  std::string::operator=((std::string *)(v8 + 40), &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v9 = mlcore::TypedEntityClass<mlcore::Item>::sharedPointer();
  v10 = mlcore::ItemPropertyItemArtistOrderSection(void)::property;
  v11 = mediaplatform::Singleton<mlcore::ItemTable>::sharedInstance();
  v12 = *(_QWORD *)v11;
  if (*(char *)(*(_QWORD *)v11 + 31) >= 0)
    v13 = *(unsigned __int8 *)(*(_QWORD *)v11 + 31);
  else
    v13 = *(_QWORD *)(*(_QWORD *)v11 + 16);
  v14 = &v21;
  std::string::basic_string[abi:ne180100]((uint64_t)&v21, v13 + 1);
  if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v14 = (std::string *)v21.__r_.__value_.__r.__words[0];
  if (v13)
  {
    v17 = *(char **)(v12 + 8);
    v16 = (char *)(v12 + 8);
    v15 = v17;
    if (v16[23] >= 0)
      v18 = v16;
    else
      v18 = v15;
    memmove(v14, v18, v13);
  }
  *(_WORD *)((char *)&v14->__r_.__value_.__l.__data_ + v13) = 46;
  v19 = std::string::append(&v21, "itemArtistSection");
  v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  __p.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  mlcore::EntityClass::setPropertyForName(v9, v10, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
}

void sub_20A76E4AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertySeriesNameOrder(void)::$_0 &&>>()
{
  uint64_t v0;
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  mlcore::ItemTable **v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  std::string *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  std::string *v19;
  __int128 v20;
  std::string v21;
  std::string __p;
  char v23;
  _QWORD v24[2];

  v0 = operator new();
  v1 = (_QWORD *)mediaplatform::Singleton<mlcore::ItemTable>::sharedInstance();
  v2 = (std::__shared_weak_count *)v1[1];
  v24[0] = *v1;
  v24[1] = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  v5 = (mlcore::ItemTable **)mediaplatform::Singleton<mlcore::ItemTable>::sharedInstance();
  mlcore::ItemTable::seriesNameOrderColumn(*v5, (uint64_t)&__p);
  mlcore::DatabaseModelProperty<long long>::DatabaseModelProperty(v0, v24, (uint64_t)&__p);
  mlcore::ItemPropertySeriesNameOrder(void)::property = v0;
  if (v23 < 0)
    operator delete((void *)__p.__r_.__value_.__l.__size_);
  if (v2)
  {
    v6 = (unint64_t *)&v2->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v8 = mlcore::ItemPropertySeriesNameOrder(void)::property;
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  std::string::operator=((std::string *)(v8 + 40), &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v9 = mlcore::TypedEntityClass<mlcore::Item>::sharedPointer();
  v10 = mlcore::ItemPropertySeriesNameOrder(void)::property;
  v11 = mediaplatform::Singleton<mlcore::ItemTable>::sharedInstance();
  v12 = *(_QWORD *)v11;
  if (*(char *)(*(_QWORD *)v11 + 31) >= 0)
    v13 = *(unsigned __int8 *)(*(_QWORD *)v11 + 31);
  else
    v13 = *(_QWORD *)(*(_QWORD *)v11 + 16);
  v14 = &v21;
  std::string::basic_string[abi:ne180100]((uint64_t)&v21, v13 + 1);
  if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v14 = (std::string *)v21.__r_.__value_.__r.__words[0];
  if (v13)
  {
    v17 = *(char **)(v12 + 8);
    v16 = (char *)(v12 + 8);
    v15 = v17;
    if (v16[23] >= 0)
      v18 = v16;
    else
      v18 = v15;
    memmove(v14, v18, v13);
  }
  *(_WORD *)((char *)&v14->__r_.__value_.__l.__data_ + v13) = 46;
  v19 = std::string::append(&v21, "seriesNameOrder");
  v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  __p.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  mlcore::EntityClass::setPropertyForName(v9, v10, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
}

void sub_20A76E73C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

uint64_t mlcore::ItemPropertySeriesNameOrderSection(mlcore *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&mlcore::ItemPropertySeriesNameOrderSection(void)::once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&mlcore::ItemPropertySeriesNameOrderSection(void)::once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertySeriesNameOrderSection(void)::$_0 &&>>);
  }
  return mlcore::ItemPropertySeriesNameOrderSection(void)::property;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertySeriesNameOrderSection(void)::$_0 &&>>()
{
  uint64_t v0;
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  mlcore::ItemTable **v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  std::string *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  std::string *v19;
  __int128 v20;
  std::string v21;
  std::string __p;
  char v23;
  _QWORD v24[2];

  v0 = operator new();
  v1 = (_QWORD *)mediaplatform::Singleton<mlcore::ItemTable>::sharedInstance();
  v2 = (std::__shared_weak_count *)v1[1];
  v24[0] = *v1;
  v24[1] = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  v5 = (mlcore::ItemTable **)mediaplatform::Singleton<mlcore::ItemTable>::sharedInstance();
  mlcore::ItemTable::seriesNameOrderSectionColumn(*v5, (uint64_t)&__p);
  mlcore::DatabaseModelProperty<int>::DatabaseModelProperty(v0, v24, (uint64_t)&__p);
  mlcore::ItemPropertySeriesNameOrderSection(void)::property = v0;
  if (v23 < 0)
    operator delete((void *)__p.__r_.__value_.__l.__size_);
  if (v2)
  {
    v6 = (unint64_t *)&v2->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v8 = mlcore::ItemPropertySeriesNameOrderSection(void)::property;
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  std::string::operator=((std::string *)(v8 + 40), &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v9 = mlcore::TypedEntityClass<mlcore::Item>::sharedPointer();
  v10 = mlcore::ItemPropertySeriesNameOrderSection(void)::property;
  v11 = mediaplatform::Singleton<mlcore::ItemTable>::sharedInstance();
  v12 = *(_QWORD *)v11;
  if (*(char *)(*(_QWORD *)v11 + 31) >= 0)
    v13 = *(unsigned __int8 *)(*(_QWORD *)v11 + 31);
  else
    v13 = *(_QWORD *)(*(_QWORD *)v11 + 16);
  v14 = &v21;
  std::string::basic_string[abi:ne180100]((uint64_t)&v21, v13 + 1);
  if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v14 = (std::string *)v21.__r_.__value_.__r.__words[0];
  if (v13)
  {
    v17 = *(char **)(v12 + 8);
    v16 = (char *)(v12 + 8);
    v15 = v17;
    if (v16[23] >= 0)
      v18 = v16;
    else
      v18 = v15;
    memmove(v14, v18, v13);
  }
  *(_WORD *)((char *)&v14->__r_.__value_.__l.__data_ + v13) = 46;
  v19 = std::string::append(&v21, "seriesSection");
  v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  __p.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  mlcore::EntityClass::setPropertyForName(v9, v10, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
}

void sub_20A76EA28(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyComposerOrder(void)::$_0 &&>>()
{
  uint64_t v0;
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  mlcore::ItemTable **v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  std::string *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  std::string *v19;
  __int128 v20;
  std::string v21;
  std::string __p;
  char v23;
  _QWORD v24[2];

  v0 = operator new();
  v1 = (_QWORD *)mediaplatform::Singleton<mlcore::ItemTable>::sharedInstance();
  v2 = (std::__shared_weak_count *)v1[1];
  v24[0] = *v1;
  v24[1] = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  v5 = (mlcore::ItemTable **)mediaplatform::Singleton<mlcore::ItemTable>::sharedInstance();
  mlcore::ItemTable::composerOrderColumn(*v5, (uint64_t)&__p);
  mlcore::DatabaseModelProperty<long long>::DatabaseModelProperty(v0, v24, (uint64_t)&__p);
  mlcore::ItemPropertyComposerOrder(void)::property = v0;
  if (v23 < 0)
    operator delete((void *)__p.__r_.__value_.__l.__size_);
  if (v2)
  {
    v6 = (unint64_t *)&v2->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v8 = mlcore::ItemPropertyComposerOrder(void)::property;
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  std::string::operator=((std::string *)(v8 + 40), &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v9 = mlcore::TypedEntityClass<mlcore::Item>::sharedPointer();
  v10 = mlcore::ItemPropertyComposerOrder(void)::property;
  v11 = mediaplatform::Singleton<mlcore::ItemTable>::sharedInstance();
  v12 = *(_QWORD *)v11;
  if (*(char *)(*(_QWORD *)v11 + 31) >= 0)
    v13 = *(unsigned __int8 *)(*(_QWORD *)v11 + 31);
  else
    v13 = *(_QWORD *)(*(_QWORD *)v11 + 16);
  v14 = &v21;
  std::string::basic_string[abi:ne180100]((uint64_t)&v21, v13 + 1);
  if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v14 = (std::string *)v21.__r_.__value_.__r.__words[0];
  if (v13)
  {
    v17 = *(char **)(v12 + 8);
    v16 = (char *)(v12 + 8);
    v15 = v17;
    if (v16[23] >= 0)
      v18 = v16;
    else
      v18 = v15;
    memmove(v14, v18, v13);
  }
  *(_WORD *)((char *)&v14->__r_.__value_.__l.__data_ + v13) = 46;
  v19 = std::string::append(&v21, "composerOrder");
  v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  __p.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  mlcore::EntityClass::setPropertyForName(v9, v10, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
}

void sub_20A76ECB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyComposerOrderSection(void)::$_0 &&>>()
{
  uint64_t v0;
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  mlcore::ItemTable **v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  std::string *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  std::string *v19;
  __int128 v20;
  std::string v21;
  std::string __p;
  char v23;
  _QWORD v24[2];

  v0 = operator new();
  v1 = (_QWORD *)mediaplatform::Singleton<mlcore::ItemTable>::sharedInstance();
  v2 = (std::__shared_weak_count *)v1[1];
  v24[0] = *v1;
  v24[1] = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  v5 = (mlcore::ItemTable **)mediaplatform::Singleton<mlcore::ItemTable>::sharedInstance();
  mlcore::ItemTable::composerOrderSectionColumn(*v5, (uint64_t)&__p);
  mlcore::DatabaseModelProperty<int>::DatabaseModelProperty(v0, v24, (uint64_t)&__p);
  mlcore::ItemPropertyComposerOrderSection(void)::property = v0;
  if (v23 < 0)
    operator delete((void *)__p.__r_.__value_.__l.__size_);
  if (v2)
  {
    v6 = (unint64_t *)&v2->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v8 = mlcore::ItemPropertyComposerOrderSection(void)::property;
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  std::string::operator=((std::string *)(v8 + 40), &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v9 = mlcore::TypedEntityClass<mlcore::Item>::sharedPointer();
  v10 = mlcore::ItemPropertyComposerOrderSection(void)::property;
  v11 = mediaplatform::Singleton<mlcore::ItemTable>::sharedInstance();
  v12 = *(_QWORD *)v11;
  if (*(char *)(*(_QWORD *)v11 + 31) >= 0)
    v13 = *(unsigned __int8 *)(*(_QWORD *)v11 + 31);
  else
    v13 = *(_QWORD *)(*(_QWORD *)v11 + 16);
  v14 = &v21;
  std::string::basic_string[abi:ne180100]((uint64_t)&v21, v13 + 1);
  if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v14 = (std::string *)v21.__r_.__value_.__r.__words[0];
  if (v13)
  {
    v17 = *(char **)(v12 + 8);
    v16 = (char *)(v12 + 8);
    v15 = v17;
    if (v16[23] >= 0)
      v18 = v16;
    else
      v18 = v15;
    memmove(v14, v18, v13);
  }
  *(_WORD *)((char *)&v14->__r_.__value_.__l.__data_ + v13) = 46;
  v19 = std::string::append(&v21, "composerSection");
  v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  __p.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  mlcore::EntityClass::setPropertyForName(v9, v10, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
}

void sub_20A76EF48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyGenreOrder(void)::$_0 &&>>()
{
  uint64_t v0;
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  mlcore::ItemTable **v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  std::string *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  std::string *v19;
  __int128 v20;
  std::string v21;
  std::string __p;
  char v23;
  _QWORD v24[2];

  v0 = operator new();
  v1 = (_QWORD *)mediaplatform::Singleton<mlcore::ItemTable>::sharedInstance();
  v2 = (std::__shared_weak_count *)v1[1];
  v24[0] = *v1;
  v24[1] = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  v5 = (mlcore::ItemTable **)mediaplatform::Singleton<mlcore::ItemTable>::sharedInstance();
  mlcore::ItemTable::genreOrderColumn(*v5, (uint64_t)&__p);
  mlcore::DatabaseModelProperty<long long>::DatabaseModelProperty(v0, v24, (uint64_t)&__p);
  mlcore::ItemPropertyGenreOrder(void)::property = v0;
  if (v23 < 0)
    operator delete((void *)__p.__r_.__value_.__l.__size_);
  if (v2)
  {
    v6 = (unint64_t *)&v2->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v8 = mlcore::ItemPropertyGenreOrder(void)::property;
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  std::string::operator=((std::string *)(v8 + 40), &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v9 = mlcore::TypedEntityClass<mlcore::Item>::sharedPointer();
  v10 = mlcore::ItemPropertyGenreOrder(void)::property;
  v11 = mediaplatform::Singleton<mlcore::ItemTable>::sharedInstance();
  v12 = *(_QWORD *)v11;
  if (*(char *)(*(_QWORD *)v11 + 31) >= 0)
    v13 = *(unsigned __int8 *)(*(_QWORD *)v11 + 31);
  else
    v13 = *(_QWORD *)(*(_QWORD *)v11 + 16);
  v14 = &v21;
  std::string::basic_string[abi:ne180100]((uint64_t)&v21, v13 + 1);
  if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v14 = (std::string *)v21.__r_.__value_.__r.__words[0];
  if (v13)
  {
    v17 = *(char **)(v12 + 8);
    v16 = (char *)(v12 + 8);
    v15 = v17;
    if (v16[23] >= 0)
      v18 = v16;
    else
      v18 = v15;
    memmove(v14, v18, v13);
  }
  *(_WORD *)((char *)&v14->__r_.__value_.__l.__data_ + v13) = 46;
  v19 = std::string::append(&v21, "genreOrder");
  v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  __p.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  mlcore::EntityClass::setPropertyForName(v9, v10, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
}

void sub_20A76F1D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyGenreOrderSection(void)::$_0 &&>>()
{
  uint64_t v0;
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  mlcore::ItemTable **v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  std::string *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  std::string *v19;
  __int128 v20;
  std::string v21;
  std::string __p;
  char v23;
  _QWORD v24[2];

  v0 = operator new();
  v1 = (_QWORD *)mediaplatform::Singleton<mlcore::ItemTable>::sharedInstance();
  v2 = (std::__shared_weak_count *)v1[1];
  v24[0] = *v1;
  v24[1] = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  v5 = (mlcore::ItemTable **)mediaplatform::Singleton<mlcore::ItemTable>::sharedInstance();
  mlcore::ItemTable::genreOrderSectionColumn(*v5, (uint64_t)&__p);
  mlcore::DatabaseModelProperty<int>::DatabaseModelProperty(v0, v24, (uint64_t)&__p);
  mlcore::ItemPropertyGenreOrderSection(void)::property = v0;
  if (v23 < 0)
    operator delete((void *)__p.__r_.__value_.__l.__size_);
  if (v2)
  {
    v6 = (unint64_t *)&v2->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v8 = mlcore::ItemPropertyGenreOrderSection(void)::property;
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  std::string::operator=((std::string *)(v8 + 40), &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v9 = mlcore::TypedEntityClass<mlcore::Item>::sharedPointer();
  v10 = mlcore::ItemPropertyGenreOrderSection(void)::property;
  v11 = mediaplatform::Singleton<mlcore::ItemTable>::sharedInstance();
  v12 = *(_QWORD *)v11;
  if (*(char *)(*(_QWORD *)v11 + 31) >= 0)
    v13 = *(unsigned __int8 *)(*(_QWORD *)v11 + 31);
  else
    v13 = *(_QWORD *)(*(_QWORD *)v11 + 16);
  v14 = &v21;
  std::string::basic_string[abi:ne180100]((uint64_t)&v21, v13 + 1);
  if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v14 = (std::string *)v21.__r_.__value_.__r.__words[0];
  if (v13)
  {
    v17 = *(char **)(v12 + 8);
    v16 = (char *)(v12 + 8);
    v15 = v17;
    if (v16[23] >= 0)
      v18 = v16;
    else
      v18 = v15;
    memmove(v14, v18, v13);
  }
  *(_WORD *)((char *)&v14->__r_.__value_.__l.__data_ + v13) = 46;
  v19 = std::string::append(&v21, "genreSection");
  v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  __p.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  mlcore::EntityClass::setPropertyForName(v9, v10, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
}

void sub_20A76F468(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyInMyLibrary(void)::$_0 &&>>()
{
  uint64_t v0;
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  mlcore::ItemTable **v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  std::string *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  std::string *v19;
  __int128 v20;
  std::string v21;
  std::string __p;
  char v23;
  _QWORD v24[2];

  v0 = operator new();
  v1 = (_QWORD *)mediaplatform::Singleton<mlcore::ItemTable>::sharedInstance();
  v2 = (std::__shared_weak_count *)v1[1];
  v24[0] = *v1;
  v24[1] = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  v5 = (mlcore::ItemTable **)mediaplatform::Singleton<mlcore::ItemTable>::sharedInstance();
  mlcore::ItemTable::inMyLibraryColumn(*v5, (uint64_t)&__p);
  mlcore::DatabaseModelProperty<int>::DatabaseModelProperty(v0, v24, (uint64_t)&__p);
  mlcore::ItemPropertyInMyLibrary(void)::property = v0;
  if (v23 < 0)
    operator delete((void *)__p.__r_.__value_.__l.__size_);
  if (v2)
  {
    v6 = (unint64_t *)&v2->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v8 = mlcore::ItemPropertyInMyLibrary(void)::property;
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  std::string::operator=((std::string *)(v8 + 40), &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v9 = mlcore::TypedEntityClass<mlcore::Item>::sharedPointer();
  v10 = mlcore::ItemPropertyInMyLibrary(void)::property;
  v11 = mediaplatform::Singleton<mlcore::ItemTable>::sharedInstance();
  v12 = *(_QWORD *)v11;
  if (*(char *)(*(_QWORD *)v11 + 31) >= 0)
    v13 = *(unsigned __int8 *)(*(_QWORD *)v11 + 31);
  else
    v13 = *(_QWORD *)(*(_QWORD *)v11 + 16);
  v14 = &v21;
  std::string::basic_string[abi:ne180100]((uint64_t)&v21, v13 + 1);
  if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v14 = (std::string *)v21.__r_.__value_.__r.__words[0];
  if (v13)
  {
    v17 = *(char **)(v12 + 8);
    v16 = (char *)(v12 + 8);
    v15 = v17;
    if (v16[23] >= 0)
      v18 = v16;
    else
      v18 = v15;
    memmove(v14, v18, v13);
  }
  *(_WORD *)((char *)&v14->__r_.__value_.__l.__data_ + v13) = 46;
  v19 = std::string::append(&v21, "inMyLibrary");
  v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  __p.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  mlcore::EntityClass::setPropertyForName(v9, v10, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
}

void sub_20A76F6F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

uint64_t mlcore::ItemPropertyCloudInMyLibrary(mlcore *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&mlcore::ItemPropertyCloudInMyLibrary(void)::once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&mlcore::ItemPropertyCloudInMyLibrary(void)::once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyCloudInMyLibrary(void)::$_0 &&>>);
  }
  return mlcore::ItemPropertyCloudInMyLibrary(void)::property;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyCloudInMyLibrary(void)::$_0 &&>>()
{
  uint64_t v0;
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  mlcore::ItemStoreTable **v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  std::string *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  std::string *v19;
  __int128 v20;
  std::string v21;
  std::string __p;
  char v23;
  _QWORD v24[2];

  v0 = operator new();
  v1 = (_QWORD *)mediaplatform::Singleton<mlcore::ItemStoreTable>::sharedInstance();
  v2 = (std::__shared_weak_count *)v1[1];
  v24[0] = *v1;
  v24[1] = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  v5 = (mlcore::ItemStoreTable **)mediaplatform::Singleton<mlcore::ItemStoreTable>::sharedInstance();
  mlcore::ItemStoreTable::cloudInMyLibraryColumn(*v5, (uint64_t)&__p);
  mlcore::DatabaseModelProperty<int>::DatabaseModelProperty(v0, v24, (uint64_t)&__p);
  mlcore::ItemPropertyCloudInMyLibrary(void)::property = v0;
  if (v23 < 0)
    operator delete((void *)__p.__r_.__value_.__l.__size_);
  if (v2)
  {
    v6 = (unint64_t *)&v2->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v8 = mlcore::ItemPropertyCloudInMyLibrary(void)::property;
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  std::string::operator=((std::string *)(v8 + 40), &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v9 = mlcore::TypedEntityClass<mlcore::Item>::sharedPointer();
  v10 = mlcore::ItemPropertyCloudInMyLibrary(void)::property;
  v11 = mediaplatform::Singleton<mlcore::ItemStoreTable>::sharedInstance();
  v12 = *(_QWORD *)v11;
  if (*(char *)(*(_QWORD *)v11 + 31) >= 0)
    v13 = *(unsigned __int8 *)(*(_QWORD *)v11 + 31);
  else
    v13 = *(_QWORD *)(*(_QWORD *)v11 + 16);
  v14 = &v21;
  std::string::basic_string[abi:ne180100]((uint64_t)&v21, v13 + 1);
  if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v14 = (std::string *)v21.__r_.__value_.__r.__words[0];
  if (v13)
  {
    v17 = *(char **)(v12 + 8);
    v16 = (char *)(v12 + 8);
    v15 = v17;
    if (v16[23] >= 0)
      v18 = v16;
    else
      v18 = v15;
    memmove(v14, v18, v13);
  }
  *(_WORD *)((char *)&v14->__r_.__value_.__l.__data_ + v13) = 46;
  v19 = std::string::append(&v21, "cloudInMyLibrary");
  v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  __p.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  mlcore::EntityClass::setPropertyForName(v9, v10, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
}

void sub_20A76F9E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

_QWORD *_ZNSt3__115allocate_sharedB8ne180100IN6mlcore14ItemStoreTableENS_9allocatorIS2_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *result;

  v2 = operator new(0x1808uLL);
  v2[1] = 0;
  v2[2] = 0;
  *v2 = &off_24C33C8D8;
  result = mlcore::ItemStoreTable::ItemStoreTable((mlcore::ItemStoreTable *)(v2 + 3));
  *a1 = result;
  a1[1] = v2;
  return result;
}

void sub_20A76FAE0(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<mlcore::ItemStoreTable>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C33C8D8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<mlcore::ItemStoreTable>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C33C8D8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x20BD27AFCLL);
}

uint64_t std::__shared_ptr_emplace<mlcore::ItemStoreTable>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyFileSize(void)::$_0 &&>>()
{
  uint64_t v0;
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  mlcore::ItemExtraTable **v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  std::string *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  std::string *v19;
  __int128 v20;
  std::string v21;
  std::string __p;
  char v23;
  _QWORD v24[2];

  v0 = operator new();
  v1 = (_QWORD *)mediaplatform::Singleton<mlcore::ItemExtraTable>::sharedInstance();
  v2 = (std::__shared_weak_count *)v1[1];
  v24[0] = *v1;
  v24[1] = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  v5 = (mlcore::ItemExtraTable **)mediaplatform::Singleton<mlcore::ItemExtraTable>::sharedInstance();
  mlcore::ItemExtraTable::fileSizeColumn(*v5, (uint64_t)&__p);
  mlcore::DatabaseModelProperty<long long>::DatabaseModelProperty(v0, v24, (uint64_t)&__p);
  mlcore::ItemPropertyFileSize(void)::property = v0;
  if (v23 < 0)
    operator delete((void *)__p.__r_.__value_.__l.__size_);
  if (v2)
  {
    v6 = (unint64_t *)&v2->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v8 = mlcore::ItemPropertyFileSize(void)::property;
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  std::string::operator=((std::string *)(v8 + 40), &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v9 = mlcore::TypedEntityClass<mlcore::Item>::sharedPointer();
  v10 = mlcore::ItemPropertyFileSize(void)::property;
  v11 = mediaplatform::Singleton<mlcore::ItemExtraTable>::sharedInstance();
  v12 = *(_QWORD *)v11;
  if (*(char *)(*(_QWORD *)v11 + 31) >= 0)
    v13 = *(unsigned __int8 *)(*(_QWORD *)v11 + 31);
  else
    v13 = *(_QWORD *)(*(_QWORD *)v11 + 16);
  v14 = &v21;
  std::string::basic_string[abi:ne180100]((uint64_t)&v21, v13 + 1);
  if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v14 = (std::string *)v21.__r_.__value_.__r.__words[0];
  if (v13)
  {
    v17 = *(char **)(v12 + 8);
    v16 = (char *)(v12 + 8);
    v15 = v17;
    if (v16[23] >= 0)
      v18 = v16;
    else
      v18 = v15;
    memmove(v14, v18, v13);
  }
  *(_WORD *)((char *)&v14->__r_.__value_.__l.__data_ + v13) = 46;
  v19 = std::string::append(&v21, "fileSize");
  v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  __p.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  mlcore::EntityClass::setPropertyForName(v9, v10, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
}

void sub_20A76FD1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyTotalTime(void)::$_0 &&>>()
{
  uint64_t v0;
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  mlcore::ItemExtraTable **v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  std::string *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  std::string *v19;
  __int128 v20;
  std::string v21;
  std::string __p;
  char v23;
  _QWORD v24[2];

  v0 = operator new();
  v1 = (_QWORD *)mediaplatform::Singleton<mlcore::ItemExtraTable>::sharedInstance();
  v2 = (std::__shared_weak_count *)v1[1];
  v24[0] = *v1;
  v24[1] = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  v5 = (mlcore::ItemExtraTable **)mediaplatform::Singleton<mlcore::ItemExtraTable>::sharedInstance();
  mlcore::ItemExtraTable::totalTimeColumn(*v5, (uint64_t)&__p);
  mlcore::DatabaseModelProperty<double>::DatabaseModelProperty(v0, v24, (uint64_t)&__p);
  mlcore::ItemPropertyTotalTime(void)::property = v0;
  if (v23 < 0)
    operator delete((void *)__p.__r_.__value_.__l.__size_);
  if (v2)
  {
    v6 = (unint64_t *)&v2->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v8 = mlcore::ItemPropertyTotalTime(void)::property;
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  std::string::operator=((std::string *)(v8 + 40), &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v9 = mlcore::TypedEntityClass<mlcore::Item>::sharedPointer();
  v10 = mlcore::ItemPropertyTotalTime(void)::property;
  v11 = mediaplatform::Singleton<mlcore::ItemExtraTable>::sharedInstance();
  v12 = *(_QWORD *)v11;
  if (*(char *)(*(_QWORD *)v11 + 31) >= 0)
    v13 = *(unsigned __int8 *)(*(_QWORD *)v11 + 31);
  else
    v13 = *(_QWORD *)(*(_QWORD *)v11 + 16);
  v14 = &v21;
  std::string::basic_string[abi:ne180100]((uint64_t)&v21, v13 + 1);
  if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v14 = (std::string *)v21.__r_.__value_.__r.__words[0];
  if (v13)
  {
    v17 = *(char **)(v12 + 8);
    v16 = (char *)(v12 + 8);
    v15 = v17;
    if (v16[23] >= 0)
      v18 = v16;
    else
      v18 = v15;
    memmove(v14, v18, v13);
  }
  *(_WORD *)((char *)&v14->__r_.__value_.__l.__data_ + v13) = 46;
  v19 = std::string::append(&v21, "totalTime");
  v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  __p.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  mlcore::EntityClass::setPropertyForName(v9, v10, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
}

void sub_20A76FFAC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

uint64_t mlcore::MediaColumn<double>::~MediaColumn(uint64_t a1)
{
  *(_QWORD *)a1 = off_24C335D90;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void mlcore::MediaColumn<double>::~MediaColumn(uint64_t a1)
{
  *(_QWORD *)a1 = off_24C335D90;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  JUMPOUT(0x20BD27AFCLL);
}

uint64_t mediaplatform::DatabaseColumn<double>::~DatabaseColumn(uint64_t a1)
{
  *(_QWORD *)a1 = off_24C335D90;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void mediaplatform::DatabaseColumn<double>::~DatabaseColumn(uint64_t a1)
{
  *(_QWORD *)a1 = off_24C335D90;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  JUMPOUT(0x20BD27AFCLL);
}

void mlcore::DatabaseModelProperty<double>::~DatabaseModelProperty(mlcore::ModelPropertyBase *this)
{
  *(_QWORD *)this = off_24C33A080;
  *((_QWORD *)this + 9) = off_24C335D90;
  if (*((char *)this + 103) < 0)
    operator delete(*((void **)this + 10));
  mlcore::ModelPropertyBase::~ModelPropertyBase((void **)this);
}

{
  *(_QWORD *)this = off_24C33A080;
  *((_QWORD *)this + 9) = off_24C335D90;
  if (*((char *)this + 103) < 0)
    operator delete(*((void **)this + 10));
  mlcore::ModelPropertyBase::~ModelPropertyBase((void **)this);
  JUMPOUT(0x20BD27AFCLL);
}

void mlcore::DatabaseModelProperty<double>::description(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  uint64_t v4;
  size_t v5;
  std::string *v6;
  char *v7;
  char *v8;
  char *v9;
  char *v10;
  std::string *p_p;
  std::string::size_type size;
  std::string *v13;
  std::string __p;
  std::string v15;

  v4 = *(_QWORD *)(a1 + 64);
  if (*(char *)(v4 + 31) >= 0)
    v5 = *(unsigned __int8 *)(v4 + 31);
  else
    v5 = *(_QWORD *)(v4 + 16);
  v6 = &v15;
  std::string::basic_string[abi:ne180100]((uint64_t)&v15, v5 + 1);
  if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v6 = (std::string *)v15.__r_.__value_.__r.__words[0];
  if (v5)
  {
    v9 = *(char **)(v4 + 8);
    v8 = (char *)(v4 + 8);
    v7 = v9;
    if (v8[23] >= 0)
      v10 = v8;
    else
      v10 = v7;
    memmove(v6, v10, v5);
  }
  *(_WORD *)((char *)&v6->__r_.__value_.__l.__data_ + v5) = 46;
  if (*(char *)(a1 + 103) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(a1 + 80), *(_QWORD *)(a1 + 88));
  else
    __p = *(std::string *)(a1 + 80);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    size = __p.__r_.__value_.__l.__size_;
  v13 = std::string::append(&v15, (const std::string::value_type *)p_p, size);
  *a2 = *v13;
  v13->__r_.__value_.__l.__size_ = 0;
  v13->__r_.__value_.__r.__words[2] = 0;
  v13->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v15.__r_.__value_.__l.__data_);
}

void sub_20A77033C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *mlcore::DatabaseModelProperty<double>::databaseTables@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  _QWORD *v4;
  _QWORD *result;

  v3 = *(_QWORD *)(a1 + 64);
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  v4 = operator new(8uLL);
  *a2 = v4;
  *v4 = v3;
  result = v4 + 1;
  a2[1] = result;
  a2[2] = result;
  return result;
}

uint64_t mlcore::DatabaseModelProperty<double>::databaseColumn(uint64_t a1)
{
  return a1 + 72;
}

double mlcore::DatabaseModelProperty<double>::_SQLExpression@<D0>(mlcore *a1@<X0>, const mlcore::ModelPropertyBase *a2@<X1>, _OWORD *a3@<X8>)
{
  double result;
  __int128 v5;

  mlcore::SQLColumnNameFromProperty(a1, a2, &v5);
  result = *(double *)&v5;
  *a3 = v5;
  return result;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyLocation(void)::$_0 &&>>()
{
  uint64_t v0;
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  mlcore::ItemExtraTable **v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  std::string *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  std::string *v19;
  __int128 v20;
  std::string v21;
  std::string __str;
  _QWORD v23[2];

  v0 = operator new();
  v1 = (_QWORD *)mediaplatform::Singleton<mlcore::ItemExtraTable>::sharedInstance();
  v2 = (std::__shared_weak_count *)v1[1];
  v23[0] = *v1;
  v23[1] = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  v5 = (mlcore::ItemExtraTable **)mediaplatform::Singleton<mlcore::ItemExtraTable>::sharedInstance();
  mlcore::ItemExtraTable::locationColumn(*v5, (uint64_t)&__str);
  mlcore::DatabaseModelProperty<std::string>::DatabaseModelProperty(v0, v23, (uint64_t)&__str);
  mlcore::ItemPropertyLocation(void)::property = v0;
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&__str);
  if (v2)
  {
    v6 = (unint64_t *)&v2->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v8 = mlcore::ItemPropertyLocation(void)::property;
  std::string::basic_string[abi:ne180100]<0>(&__str, "");
  std::string::operator=((std::string *)(v8 + 40), &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  v9 = mlcore::TypedEntityClass<mlcore::Item>::sharedPointer();
  v10 = mlcore::ItemPropertyLocation(void)::property;
  v11 = mediaplatform::Singleton<mlcore::ItemExtraTable>::sharedInstance();
  v12 = *(_QWORD *)v11;
  if (*(char *)(*(_QWORD *)v11 + 31) >= 0)
    v13 = *(unsigned __int8 *)(*(_QWORD *)v11 + 31);
  else
    v13 = *(_QWORD *)(*(_QWORD *)v11 + 16);
  v14 = &v21;
  std::string::basic_string[abi:ne180100]((uint64_t)&v21, v13 + 1);
  if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v14 = (std::string *)v21.__r_.__value_.__r.__words[0];
  if (v13)
  {
    v17 = *(char **)(v12 + 8);
    v16 = (char *)(v12 + 8);
    v15 = v17;
    if (v16[23] >= 0)
      v18 = v16;
    else
      v18 = v15;
    memmove(v14, v18, v13);
  }
  *(_WORD *)((char *)&v14->__r_.__value_.__l.__data_ + v13) = 46;
  v19 = std::string::append(&v21, "location");
  v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  __str.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  mlcore::EntityClass::setPropertyForName(v9, v10, &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
}

void sub_20A7705B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyAlbumTrackCount(void)::$_0 &&>>()
{
  uint64_t v0;
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  mlcore::ItemExtraTable **v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  std::string *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  std::string *v19;
  __int128 v20;
  std::string v21;
  std::string __p;
  char v23;
  _QWORD v24[2];

  v0 = operator new();
  v1 = (_QWORD *)mediaplatform::Singleton<mlcore::ItemExtraTable>::sharedInstance();
  v2 = (std::__shared_weak_count *)v1[1];
  v24[0] = *v1;
  v24[1] = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  v5 = (mlcore::ItemExtraTable **)mediaplatform::Singleton<mlcore::ItemExtraTable>::sharedInstance();
  mlcore::ItemExtraTable::trackCountColumn(*v5, (uint64_t)&__p);
  mlcore::DatabaseModelProperty<int>::DatabaseModelProperty(v0, v24, (uint64_t)&__p);
  mlcore::ItemPropertyAlbumTrackCount(void)::property = v0;
  if (v23 < 0)
    operator delete((void *)__p.__r_.__value_.__l.__size_);
  if (v2)
  {
    v6 = (unint64_t *)&v2->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v8 = mlcore::ItemPropertyAlbumTrackCount(void)::property;
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  std::string::operator=((std::string *)(v8 + 40), &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v9 = mlcore::TypedEntityClass<mlcore::Item>::sharedPointer();
  v10 = mlcore::ItemPropertyAlbumTrackCount(void)::property;
  v11 = mediaplatform::Singleton<mlcore::ItemExtraTable>::sharedInstance();
  v12 = *(_QWORD *)v11;
  if (*(char *)(*(_QWORD *)v11 + 31) >= 0)
    v13 = *(unsigned __int8 *)(*(_QWORD *)v11 + 31);
  else
    v13 = *(_QWORD *)(*(_QWORD *)v11 + 16);
  v14 = &v21;
  std::string::basic_string[abi:ne180100]((uint64_t)&v21, v13 + 1);
  if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v14 = (std::string *)v21.__r_.__value_.__r.__words[0];
  if (v13)
  {
    v17 = *(char **)(v12 + 8);
    v16 = (char *)(v12 + 8);
    v15 = v17;
    if (v16[23] >= 0)
      v18 = v16;
    else
      v18 = v15;
    memmove(v14, v18, v13);
  }
  *(_WORD *)((char *)&v14->__r_.__value_.__l.__data_ + v13) = 46;
  v19 = std::string::append(&v21, "trackCount");
  v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  __p.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  mlcore::EntityClass::setPropertyForName(v9, v10, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
}

void sub_20A77083C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

uint64_t mlcore::ItemPropertyDiscCount(mlcore *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&mlcore::ItemPropertyDiscCount(void)::once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&mlcore::ItemPropertyDiscCount(void)::once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyDiscCount(void)::$_0 &&>>);
  }
  return mlcore::ItemPropertyDiscCount(void)::property;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyDiscCount(void)::$_0 &&>>()
{
  uint64_t v0;
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  mlcore::ItemExtraTable **v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  std::string *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  std::string *v19;
  __int128 v20;
  std::string v21;
  std::string __p;
  char v23;
  _QWORD v24[2];

  v0 = operator new();
  v1 = (_QWORD *)mediaplatform::Singleton<mlcore::ItemExtraTable>::sharedInstance();
  v2 = (std::__shared_weak_count *)v1[1];
  v24[0] = *v1;
  v24[1] = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  v5 = (mlcore::ItemExtraTable **)mediaplatform::Singleton<mlcore::ItemExtraTable>::sharedInstance();
  mlcore::ItemExtraTable::discCountColumn(*v5, (uint64_t)&__p);
  mlcore::DatabaseModelProperty<int>::DatabaseModelProperty(v0, v24, (uint64_t)&__p);
  mlcore::ItemPropertyDiscCount(void)::property = v0;
  if (v23 < 0)
    operator delete((void *)__p.__r_.__value_.__l.__size_);
  if (v2)
  {
    v6 = (unint64_t *)&v2->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v8 = mlcore::ItemPropertyDiscCount(void)::property;
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  std::string::operator=((std::string *)(v8 + 40), &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v9 = mlcore::TypedEntityClass<mlcore::Item>::sharedPointer();
  v10 = mlcore::ItemPropertyDiscCount(void)::property;
  v11 = mediaplatform::Singleton<mlcore::ItemExtraTable>::sharedInstance();
  v12 = *(_QWORD *)v11;
  if (*(char *)(*(_QWORD *)v11 + 31) >= 0)
    v13 = *(unsigned __int8 *)(*(_QWORD *)v11 + 31);
  else
    v13 = *(_QWORD *)(*(_QWORD *)v11 + 16);
  v14 = &v21;
  std::string::basic_string[abi:ne180100]((uint64_t)&v21, v13 + 1);
  if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v14 = (std::string *)v21.__r_.__value_.__r.__words[0];
  if (v13)
  {
    v17 = *(char **)(v12 + 8);
    v16 = (char *)(v12 + 8);
    v15 = v17;
    if (v16[23] >= 0)
      v18 = v16;
    else
      v18 = v15;
    memmove(v14, v18, v13);
  }
  *(_WORD *)((char *)&v14->__r_.__value_.__l.__data_ + v13) = 46;
  v19 = std::string::append(&v21, "discCount");
  v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  __p.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  mlcore::EntityClass::setPropertyForName(v9, v10, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
}

void sub_20A770B28(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyMediaType(void)::$_0 &&>>()
{
  uint64_t v0;
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  mlcore::ItemTable **v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  std::string *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  std::string *v19;
  __int128 v20;
  std::string v21;
  std::string __p;
  char v23;
  _QWORD v24[2];

  v0 = operator new();
  v1 = (_QWORD *)mediaplatform::Singleton<mlcore::ItemTable>::sharedInstance();
  v2 = (std::__shared_weak_count *)v1[1];
  v24[0] = *v1;
  v24[1] = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  v5 = (mlcore::ItemTable **)mediaplatform::Singleton<mlcore::ItemTable>::sharedInstance();
  mlcore::ItemTable::mediaTypeColumn(*v5, (uint64_t)&__p);
  mlcore::DatabaseModelProperty<int>::DatabaseModelProperty(v0, v24, (uint64_t)&__p);
  mlcore::ItemPropertyMediaType(void)::property = v0;
  if (v23 < 0)
    operator delete((void *)__p.__r_.__value_.__l.__size_);
  if (v2)
  {
    v6 = (unint64_t *)&v2->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v8 = mlcore::ItemPropertyMediaType(void)::property;
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  std::string::operator=((std::string *)(v8 + 40), &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v9 = mlcore::TypedEntityClass<mlcore::Item>::sharedPointer();
  v10 = mlcore::ItemPropertyMediaType(void)::property;
  v11 = mediaplatform::Singleton<mlcore::ItemTable>::sharedInstance();
  v12 = *(_QWORD *)v11;
  if (*(char *)(*(_QWORD *)v11 + 31) >= 0)
    v13 = *(unsigned __int8 *)(*(_QWORD *)v11 + 31);
  else
    v13 = *(_QWORD *)(*(_QWORD *)v11 + 16);
  v14 = &v21;
  std::string::basic_string[abi:ne180100]((uint64_t)&v21, v13 + 1);
  if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v14 = (std::string *)v21.__r_.__value_.__r.__words[0];
  if (v13)
  {
    v17 = *(char **)(v12 + 8);
    v16 = (char *)(v12 + 8);
    v15 = v17;
    if (v16[23] >= 0)
      v18 = v16;
    else
      v18 = v15;
    memmove(v14, v18, v13);
  }
  *(_WORD *)((char *)&v14->__r_.__value_.__l.__data_ + v13) = 46;
  v19 = std::string::append(&v21, "mediaType");
  v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  __p.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  mlcore::EntityClass::setPropertyForName(v9, v10, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
}

void sub_20A770DB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

uint64_t mlcore::ItemPropertyMediaKind(mlcore *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&mlcore::ItemPropertyMediaKind(void)::once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&mlcore::ItemPropertyMediaKind(void)::once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyMediaKind(void)::$_0 &&>>);
  }
  return mlcore::ItemPropertyMediaKind(void)::property;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyMediaKind(void)::$_0 &&>>()
{
  uint64_t v0;
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  mlcore::ItemExtraTable **v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  std::string *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  std::string *v19;
  __int128 v20;
  std::string v21;
  std::string __p;
  char v23;
  _QWORD v24[2];

  v0 = operator new();
  v1 = (_QWORD *)mediaplatform::Singleton<mlcore::ItemExtraTable>::sharedInstance();
  v2 = (std::__shared_weak_count *)v1[1];
  v24[0] = *v1;
  v24[1] = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  v5 = (mlcore::ItemExtraTable **)mediaplatform::Singleton<mlcore::ItemExtraTable>::sharedInstance();
  mlcore::ItemExtraTable::mediaKindColumn(*v5, (uint64_t)&__p);
  mlcore::DatabaseModelProperty<int>::DatabaseModelProperty(v0, v24, (uint64_t)&__p);
  mlcore::ItemPropertyMediaKind(void)::property = v0;
  if (v23 < 0)
    operator delete((void *)__p.__r_.__value_.__l.__size_);
  if (v2)
  {
    v6 = (unint64_t *)&v2->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v8 = mlcore::ItemPropertyMediaKind(void)::property;
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  std::string::operator=((std::string *)(v8 + 40), &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v9 = mlcore::TypedEntityClass<mlcore::Item>::sharedPointer();
  v10 = mlcore::ItemPropertyMediaKind(void)::property;
  v11 = mediaplatform::Singleton<mlcore::ItemExtraTable>::sharedInstance();
  v12 = *(_QWORD *)v11;
  if (*(char *)(*(_QWORD *)v11 + 31) >= 0)
    v13 = *(unsigned __int8 *)(*(_QWORD *)v11 + 31);
  else
    v13 = *(_QWORD *)(*(_QWORD *)v11 + 16);
  v14 = &v21;
  std::string::basic_string[abi:ne180100]((uint64_t)&v21, v13 + 1);
  if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v14 = (std::string *)v21.__r_.__value_.__r.__words[0];
  if (v13)
  {
    v17 = *(char **)(v12 + 8);
    v16 = (char *)(v12 + 8);
    v15 = v17;
    if (v16[23] >= 0)
      v18 = v16;
    else
      v18 = v15;
    memmove(v14, v18, v13);
  }
  *(_WORD *)((char *)&v14->__r_.__value_.__l.__data_ + v13) = 46;
  v19 = std::string::append(&v21, "mediaKind");
  v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  __p.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  mlcore::EntityClass::setPropertyForName(v9, v10, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
}

void sub_20A7710A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

uint64_t mlcore::ItemPropertyKindID(mlcore *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&mlcore::ItemPropertyKindID(void)::once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&mlcore::ItemPropertyKindID(void)::once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyKindID(void)::$_0 &&>>);
  }
  return mlcore::ItemPropertyKindID(void)::property;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyKindID(void)::$_0 &&>>()
{
  uint64_t v0;
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  mlcore::ItemExtraTable **v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  std::string *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  std::string *v19;
  __int128 v20;
  std::string v21;
  std::string __p;
  char v23;
  _QWORD v24[2];

  v0 = operator new();
  v1 = (_QWORD *)mediaplatform::Singleton<mlcore::ItemExtraTable>::sharedInstance();
  v2 = (std::__shared_weak_count *)v1[1];
  v24[0] = *v1;
  v24[1] = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  v5 = (mlcore::ItemExtraTable **)mediaplatform::Singleton<mlcore::ItemExtraTable>::sharedInstance();
  mlcore::ItemExtraTable::locationKindIDColumn(*v5, (uint64_t)&__p);
  mlcore::DatabaseModelProperty<int>::DatabaseModelProperty(v0, v24, (uint64_t)&__p);
  mlcore::ItemPropertyKindID(void)::property = v0;
  if (v23 < 0)
    operator delete((void *)__p.__r_.__value_.__l.__size_);
  if (v2)
  {
    v6 = (unint64_t *)&v2->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v8 = mlcore::ItemPropertyKindID(void)::property;
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  std::string::operator=((std::string *)(v8 + 40), &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v9 = mlcore::TypedEntityClass<mlcore::Item>::sharedPointer();
  v10 = mlcore::ItemPropertyKindID(void)::property;
  v11 = mediaplatform::Singleton<mlcore::ItemExtraTable>::sharedInstance();
  v12 = *(_QWORD *)v11;
  if (*(char *)(*(_QWORD *)v11 + 31) >= 0)
    v13 = *(unsigned __int8 *)(*(_QWORD *)v11 + 31);
  else
    v13 = *(_QWORD *)(*(_QWORD *)v11 + 16);
  v14 = &v21;
  std::string::basic_string[abi:ne180100]((uint64_t)&v21, v13 + 1);
  if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v14 = (std::string *)v21.__r_.__value_.__r.__words[0];
  if (v13)
  {
    v17 = *(char **)(v12 + 8);
    v16 = (char *)(v12 + 8);
    v15 = v17;
    if (v16[23] >= 0)
      v18 = v16;
    else
      v18 = v15;
    memmove(v14, v18, v13);
  }
  *(_WORD *)((char *)&v14->__r_.__value_.__l.__data_ + v13) = 46;
  v19 = std::string::append(&v21, "kindID");
  v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  __p.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  mlcore::EntityClass::setPropertyForName(v9, v10, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
}

void sub_20A771390(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyIsPreorder(void)::$_0 &&>>()
{
  uint64_t v0;
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  mlcore::ItemExtraTable **v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  std::string *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  std::string *v19;
  __int128 v20;
  std::string v21;
  std::string __p;
  char v23;
  _QWORD v24[2];

  v0 = operator new();
  v1 = (_QWORD *)mediaplatform::Singleton<mlcore::ItemExtraTable>::sharedInstance();
  v2 = (std::__shared_weak_count *)v1[1];
  v24[0] = *v1;
  v24[1] = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  v5 = (mlcore::ItemExtraTable **)mediaplatform::Singleton<mlcore::ItemExtraTable>::sharedInstance();
  mlcore::ItemExtraTable::isPreorderColumn(*v5, (uint64_t)&__p);
  mlcore::DatabaseModelProperty<int>::DatabaseModelProperty(v0, v24, (uint64_t)&__p);
  mlcore::ItemPropertyIsPreorder(void)::property = v0;
  if (v23 < 0)
    operator delete((void *)__p.__r_.__value_.__l.__size_);
  if (v2)
  {
    v6 = (unint64_t *)&v2->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v8 = mlcore::ItemPropertyIsPreorder(void)::property;
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  std::string::operator=((std::string *)(v8 + 40), &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v9 = mlcore::TypedEntityClass<mlcore::Item>::sharedPointer();
  v10 = mlcore::ItemPropertyIsPreorder(void)::property;
  v11 = mediaplatform::Singleton<mlcore::ItemExtraTable>::sharedInstance();
  v12 = *(_QWORD *)v11;
  if (*(char *)(*(_QWORD *)v11 + 31) >= 0)
    v13 = *(unsigned __int8 *)(*(_QWORD *)v11 + 31);
  else
    v13 = *(_QWORD *)(*(_QWORD *)v11 + 16);
  v14 = &v21;
  std::string::basic_string[abi:ne180100]((uint64_t)&v21, v13 + 1);
  if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v14 = (std::string *)v21.__r_.__value_.__r.__words[0];
  if (v13)
  {
    v17 = *(char **)(v12 + 8);
    v16 = (char *)(v12 + 8);
    v15 = v17;
    if (v16[23] >= 0)
      v18 = v16;
    else
      v18 = v15;
    memmove(v14, v18, v13);
  }
  *(_WORD *)((char *)&v14->__r_.__value_.__l.__data_ + v13) = 46;
  v19 = std::string::append(&v21, "isPreorder");
  v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  __p.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  mlcore::EntityClass::setPropertyForName(v9, v10, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
}

void sub_20A771620(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

uint64_t mlcore::ItemPropertyIsPodcast(mlcore *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&mlcore::ItemPropertyIsPodcast(void)::once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&mlcore::ItemPropertyIsPodcast(void)::once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyIsPodcast(void)::$_0 &&>>);
  }
  return mlcore::ItemPropertyIsPodcast(void)::property;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyIsPodcast(void)::$_0 &&>>()
{
  mlcore *v0;
  uint64_t v1;
  _DWORD *v2;
  __int128 v3;
  std::__shared_weak_count *v4;
  unint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  std::string __p;
  __int128 v15;

  v0 = (mlcore *)operator new();
  v1 = mlcore::ItemPropertyMediaType(v0);
  v2 = operator new(0x14uLL);
  __p.__r_.__value_.__l.__size_ = (std::string::size_type)(v2 + 5);
  __p.__r_.__value_.__r.__words[2] = (std::string::size_type)(v2 + 5);
  v2[4] = 2308;
  *(_OWORD *)v2 = xmmword_20A915E78;
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v2;
  std::allocate_shared[abi:ne180100]<mlcore::InPredicate<int>,std::allocator<mlcore::InPredicate<int>>,mlcore::ModelProperty<int> *&,std::vector<int> const&,void>((uint64_t *)&v15, v1, (int **)&__p);
  v3 = v15;
  v15 = 0uLL;
  *((_OWORD *)v0 + 1) = 0u;
  *((_OWORD *)v0 + 2) = 0u;
  *(_QWORD *)v0 = &off_24C3398B8;
  *((_OWORD *)v0 + 3) = 0u;
  *((_OWORD *)v0 + 4) = v3;
  v4 = (std::__shared_weak_count *)*((_QWORD *)&v3 + 1);
  if (*((_QWORD *)&v3 + 1))
  {
    v5 = (unint64_t *)(*((_QWORD *)&v3 + 1) + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
    mlcore::ItemPropertyIsPodcast(void)::property = (uint64_t)v0;
    do
      v7 = __ldaxr(v5);
    while (__stlxr(v7 - 1, v5));
    if (!v7)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v3 + 1) + 16))(*((_QWORD *)&v3 + 1));
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  else
  {
    mlcore::ItemPropertyIsPodcast(void)::property = (uint64_t)v0;
  }
  v8 = (std::__shared_weak_count *)*((_QWORD *)&v15 + 1);
  if (*((_QWORD *)&v15 + 1))
  {
    v9 = (unint64_t *)(*((_QWORD *)&v15 + 1) + 8);
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  if (__p.__r_.__value_.__r.__words[0])
  {
    __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  v11 = mlcore::ItemPropertyIsPodcast(void)::property;
  std::string::basic_string[abi:ne180100]<0>(&__p, "is_podcast");
  std::string::operator=((std::string *)(v11 + 40), &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v12 = mlcore::TypedEntityClass<mlcore::Item>::sharedPointer();
  v13 = mlcore::ItemPropertyIsPodcast(void)::property;
  std::string::basic_string[abi:ne180100]<0>(&__p, "isPodcast");
  mlcore::EntityClass::setPropertyForName(v12, v13, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_20A7718EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t mlcore::ItemPropertyIsITunesU(mlcore *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&mlcore::ItemPropertyIsITunesU(void)::once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&mlcore::ItemPropertyIsITunesU(void)::once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyIsITunesU(void)::$_0 &&>>);
  }
  return mlcore::ItemPropertyIsITunesU(void)::property;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyIsITunesU(void)::$_0 &&>>()
{
  mlcore *v0;
  uint64_t v1;
  _QWORD *v2;
  __int128 v3;
  std::__shared_weak_count *v4;
  unint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  std::string __p;
  __int128 v15;

  v0 = (mlcore *)operator new();
  v1 = mlcore::ItemPropertyMediaType(v0);
  v2 = operator new(0x18uLL);
  __p.__r_.__value_.__l.__size_ = (std::string::size_type)(v2 + 3);
  __p.__r_.__value_.__r.__words[2] = (std::string::size_type)(v2 + 3);
  v2[2] = 0x182000001820;
  *(_OWORD *)v2 = xmmword_20A915E8C;
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v2;
  std::allocate_shared[abi:ne180100]<mlcore::InPredicate<int>,std::allocator<mlcore::InPredicate<int>>,mlcore::ModelProperty<int> *&,std::vector<int> const&,void>((uint64_t *)&v15, v1, (int **)&__p);
  v3 = v15;
  v15 = 0uLL;
  *((_OWORD *)v0 + 1) = 0u;
  *((_OWORD *)v0 + 2) = 0u;
  *(_QWORD *)v0 = &off_24C3398B8;
  *((_OWORD *)v0 + 3) = 0u;
  *((_OWORD *)v0 + 4) = v3;
  v4 = (std::__shared_weak_count *)*((_QWORD *)&v3 + 1);
  if (*((_QWORD *)&v3 + 1))
  {
    v5 = (unint64_t *)(*((_QWORD *)&v3 + 1) + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
    mlcore::ItemPropertyIsITunesU(void)::property = (uint64_t)v0;
    do
      v7 = __ldaxr(v5);
    while (__stlxr(v7 - 1, v5));
    if (!v7)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v3 + 1) + 16))(*((_QWORD *)&v3 + 1));
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  else
  {
    mlcore::ItemPropertyIsITunesU(void)::property = (uint64_t)v0;
  }
  v8 = (std::__shared_weak_count *)*((_QWORD *)&v15 + 1);
  if (*((_QWORD *)&v15 + 1))
  {
    v9 = (unint64_t *)(*((_QWORD *)&v15 + 1) + 8);
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  if (__p.__r_.__value_.__r.__words[0])
  {
    __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  v11 = mlcore::ItemPropertyIsITunesU(void)::property;
  std::string::basic_string[abi:ne180100]<0>(&__p, "is_itunes_u");
  std::string::operator=((std::string *)(v11 + 40), &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v12 = mlcore::TypedEntityClass<mlcore::Item>::sharedPointer();
  v13 = mlcore::ItemPropertyIsITunesU(void)::property;
  std::string::basic_string[abi:ne180100]<0>(&__p, "isITunesU");
  mlcore::EntityClass::setPropertyForName(v12, v13, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_20A771B5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyIsVideo(void)::$_0 &&>>()
{
  mlcore *v0;
  uint64_t v1;
  _DWORD *v2;
  __int128 v3;
  std::__shared_weak_count *v4;
  unint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  std::string __p;
  __int128 v15;

  v0 = (mlcore *)operator new();
  v1 = mlcore::ItemPropertyMediaType(v0);
  v2 = operator new(0x44uLL);
  __p.__r_.__value_.__l.__size_ = (std::string::size_type)(v2 + 17);
  __p.__r_.__value_.__r.__words[2] = (std::string::size_type)(v2 + 17);
  v2[16] = 10240;
  *(_OWORD *)v2 = xmmword_20A915EA4;
  *((_OWORD *)v2 + 1) = unk_20A915EB4;
  *((_OWORD *)v2 + 2) = xmmword_20A915EC4;
  *((_OWORD *)v2 + 3) = unk_20A915ED4;
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v2;
  std::allocate_shared[abi:ne180100]<mlcore::InPredicate<int>,std::allocator<mlcore::InPredicate<int>>,mlcore::ModelProperty<int> *&,std::vector<int> const&,void>((uint64_t *)&v15, v1, (int **)&__p);
  v3 = v15;
  v15 = 0uLL;
  *((_OWORD *)v0 + 1) = 0u;
  *((_OWORD *)v0 + 2) = 0u;
  *(_QWORD *)v0 = &off_24C3398B8;
  *((_OWORD *)v0 + 3) = 0u;
  *((_OWORD *)v0 + 4) = v3;
  v4 = (std::__shared_weak_count *)*((_QWORD *)&v3 + 1);
  if (*((_QWORD *)&v3 + 1))
  {
    v5 = (unint64_t *)(*((_QWORD *)&v3 + 1) + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
    mlcore::ItemPropertyIsVideo(void)::property = (uint64_t)v0;
    do
      v7 = __ldaxr(v5);
    while (__stlxr(v7 - 1, v5));
    if (!v7)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v3 + 1) + 16))(*((_QWORD *)&v3 + 1));
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  else
  {
    mlcore::ItemPropertyIsVideo(void)::property = (uint64_t)v0;
  }
  v8 = (std::__shared_weak_count *)*((_QWORD *)&v15 + 1);
  if (*((_QWORD *)&v15 + 1))
  {
    v9 = (unint64_t *)(*((_QWORD *)&v15 + 1) + 8);
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  if (__p.__r_.__value_.__r.__words[0])
  {
    __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  v11 = mlcore::ItemPropertyIsVideo(void)::property;
  std::string::basic_string[abi:ne180100]<0>(&__p, "is_video");
  std::string::operator=((std::string *)(v11 + 40), &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v12 = mlcore::TypedEntityClass<mlcore::Item>::sharedPointer();
  v13 = mlcore::ItemPropertyIsVideo(void)::property;
  std::string::basic_string[abi:ne180100]<0>(&__p, "isVideo");
  mlcore::EntityClass::setPropertyForName(v12, v13, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_20A771D74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t mlcore::ItemPropertyBitRate(mlcore *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&mlcore::ItemPropertyBitRate(void)::once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&mlcore::ItemPropertyBitRate(void)::once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyBitRate(void)::$_0 &&>>);
  }
  return mlcore::ItemPropertyBitRate(void)::property;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyBitRate(void)::$_0 &&>>()
{
  uint64_t v0;
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  mlcore::ItemPlaybackTable **v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  std::string *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  std::string *v19;
  __int128 v20;
  std::string v21;
  std::string __p;
  char v23;
  _QWORD v24[2];

  v0 = operator new();
  v1 = (_QWORD *)mediaplatform::Singleton<mlcore::ItemPlaybackTable>::sharedInstance();
  v2 = (std::__shared_weak_count *)v1[1];
  v24[0] = *v1;
  v24[1] = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  v5 = (mlcore::ItemPlaybackTable **)mediaplatform::Singleton<mlcore::ItemPlaybackTable>::sharedInstance();
  mlcore::ItemPlaybackTable::bitrateColumn(*v5, (uint64_t)&__p);
  mlcore::DatabaseModelProperty<int>::DatabaseModelProperty(v0, v24, (uint64_t)&__p);
  mlcore::ItemPropertyBitRate(void)::property = v0;
  if (v23 < 0)
    operator delete((void *)__p.__r_.__value_.__l.__size_);
  if (v2)
  {
    v6 = (unint64_t *)&v2->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v8 = mlcore::ItemPropertyBitRate(void)::property;
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  std::string::operator=((std::string *)(v8 + 40), &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v9 = mlcore::TypedEntityClass<mlcore::Item>::sharedPointer();
  v10 = mlcore::ItemPropertyBitRate(void)::property;
  v11 = mediaplatform::Singleton<mlcore::ItemPlaybackTable>::sharedInstance();
  v12 = *(_QWORD *)v11;
  if (*(char *)(*(_QWORD *)v11 + 31) >= 0)
    v13 = *(unsigned __int8 *)(*(_QWORD *)v11 + 31);
  else
    v13 = *(_QWORD *)(*(_QWORD *)v11 + 16);
  v14 = &v21;
  std::string::basic_string[abi:ne180100]((uint64_t)&v21, v13 + 1);
  if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v14 = (std::string *)v21.__r_.__value_.__r.__words[0];
  if (v13)
  {
    v17 = *(char **)(v12 + 8);
    v16 = (char *)(v12 + 8);
    v15 = v17;
    if (v16[23] >= 0)
      v18 = v16;
    else
      v18 = v15;
    memmove(v14, v18, v13);
  }
  *(_WORD *)((char *)&v14->__r_.__value_.__l.__data_ + v13) = 46;
  v19 = std::string::append(&v21, "bitRate");
  v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  __p.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  mlcore::EntityClass::setPropertyForName(v9, v10, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
}

void sub_20A772000(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

uint64_t _ZNSt3__115allocate_sharedB8ne180100IN6mlcore17ItemPlaybackTableENS_9allocatorIS2_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(uint64_t *a1)
{
  _QWORD *v2;
  uint64_t result;

  v2 = operator new(0x8A8uLL);
  v2[1] = 0;
  v2[2] = 0;
  *v2 = &off_24C33CD70;
  result = mlcore::ItemPlaybackTable::ItemPlaybackTable((mlcore::ItemPlaybackTable *)(v2 + 3));
  *a1 = result;
  a1[1] = (uint64_t)v2;
  return result;
}

void sub_20A7720FC(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<mlcore::ItemPlaybackTable>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C33CD70;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<mlcore::ItemPlaybackTable>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C33CD70;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x20BD27AFCLL);
}

uint64_t std::__shared_ptr_emplace<mlcore::ItemPlaybackTable>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t mlcore::ItemPropertySampleRate(mlcore *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&mlcore::ItemPropertySampleRate(void)::once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&mlcore::ItemPropertySampleRate(void)::once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertySampleRate(void)::$_0 &&>>);
  }
  return mlcore::ItemPropertySampleRate(void)::property;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertySampleRate(void)::$_0 &&>>()
{
  uint64_t v0;
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  mlcore::ItemPlaybackTable **v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  std::string *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  std::string *v19;
  __int128 v20;
  std::string v21;
  std::string __p;
  char v23;
  _QWORD v24[2];

  v0 = operator new();
  v1 = (_QWORD *)mediaplatform::Singleton<mlcore::ItemPlaybackTable>::sharedInstance();
  v2 = (std::__shared_weak_count *)v1[1];
  v24[0] = *v1;
  v24[1] = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  v5 = (mlcore::ItemPlaybackTable **)mediaplatform::Singleton<mlcore::ItemPlaybackTable>::sharedInstance();
  mlcore::ItemPlaybackTable::sampleRateColumn(*v5, (uint64_t)&__p);
  mlcore::DatabaseModelProperty<double>::DatabaseModelProperty(v0, v24, (uint64_t)&__p);
  mlcore::ItemPropertySampleRate(void)::property = v0;
  if (v23 < 0)
    operator delete((void *)__p.__r_.__value_.__l.__size_);
  if (v2)
  {
    v6 = (unint64_t *)&v2->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v8 = mlcore::ItemPropertySampleRate(void)::property;
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  std::string::operator=((std::string *)(v8 + 40), &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v9 = mlcore::TypedEntityClass<mlcore::Item>::sharedPointer();
  v10 = mlcore::ItemPropertySampleRate(void)::property;
  v11 = mediaplatform::Singleton<mlcore::ItemPlaybackTable>::sharedInstance();
  v12 = *(_QWORD *)v11;
  if (*(char *)(*(_QWORD *)v11 + 31) >= 0)
    v13 = *(unsigned __int8 *)(*(_QWORD *)v11 + 31);
  else
    v13 = *(_QWORD *)(*(_QWORD *)v11 + 16);
  v14 = &v21;
  std::string::basic_string[abi:ne180100]((uint64_t)&v21, v13 + 1);
  if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v14 = (std::string *)v21.__r_.__value_.__r.__words[0];
  if (v13)
  {
    v17 = *(char **)(v12 + 8);
    v16 = (char *)(v12 + 8);
    v15 = v17;
    if (v16[23] >= 0)
      v18 = v16;
    else
      v18 = v15;
    memmove(v14, v18, v13);
  }
  *(_WORD *)((char *)&v14->__r_.__value_.__l.__data_ + v13) = 46;
  v19 = std::string::append(&v21, "sampleRate");
  v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  __p.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  mlcore::EntityClass::setPropertyForName(v9, v10, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
}

void sub_20A772394(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyAlbumPersistentID(void)::$_0 &&>>()
{
  uint64_t v0;
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  mlcore::ItemTable **v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  std::string *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  std::string *v19;
  __int128 v20;
  std::string v21;
  std::string __p;
  char v23;
  _QWORD v24[2];

  v0 = operator new();
  v1 = (_QWORD *)mediaplatform::Singleton<mlcore::ItemTable>::sharedInstance();
  v2 = (std::__shared_weak_count *)v1[1];
  v24[0] = *v1;
  v24[1] = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  v5 = (mlcore::ItemTable **)mediaplatform::Singleton<mlcore::ItemTable>::sharedInstance();
  mlcore::ItemTable::albumPersistentIDColumn(*v5, (uint64_t)&__p);
  mlcore::DatabaseModelProperty<long long>::DatabaseModelProperty(v0, v24, (uint64_t)&__p);
  mlcore::ItemPropertyAlbumPersistentID(void)::property = v0;
  if (v23 < 0)
    operator delete((void *)__p.__r_.__value_.__l.__size_);
  if (v2)
  {
    v6 = (unint64_t *)&v2->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v8 = mlcore::ItemPropertyAlbumPersistentID(void)::property;
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  std::string::operator=((std::string *)(v8 + 40), &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v9 = mlcore::TypedEntityClass<mlcore::Item>::sharedPointer();
  v10 = mlcore::ItemPropertyAlbumPersistentID(void)::property;
  v11 = mediaplatform::Singleton<mlcore::ItemTable>::sharedInstance();
  v12 = *(_QWORD *)v11;
  if (*(char *)(*(_QWORD *)v11 + 31) >= 0)
    v13 = *(unsigned __int8 *)(*(_QWORD *)v11 + 31);
  else
    v13 = *(_QWORD *)(*(_QWORD *)v11 + 16);
  v14 = &v21;
  std::string::basic_string[abi:ne180100]((uint64_t)&v21, v13 + 1);
  if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v14 = (std::string *)v21.__r_.__value_.__r.__words[0];
  if (v13)
  {
    v17 = *(char **)(v12 + 8);
    v16 = (char *)(v12 + 8);
    v15 = v17;
    if (v16[23] >= 0)
      v18 = v16;
    else
      v18 = v15;
    memmove(v14, v18, v13);
  }
  *(_WORD *)((char *)&v14->__r_.__value_.__l.__data_ + v13) = 46;
  v19 = std::string::append(&v21, "album");
  v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  __p.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  mlcore::EntityClass::setPropertyForName(v9, v10, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
}

void sub_20A772624(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyItemArtistPersistentID(void)::$_0 &&>>()
{
  uint64_t v0;
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  mlcore::ItemTable **v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  std::string *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  std::string *v19;
  __int128 v20;
  std::string v21;
  std::string __p;
  char v23;
  _QWORD v24[2];

  v0 = operator new();
  v1 = (_QWORD *)mediaplatform::Singleton<mlcore::ItemTable>::sharedInstance();
  v2 = (std::__shared_weak_count *)v1[1];
  v24[0] = *v1;
  v24[1] = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  v5 = (mlcore::ItemTable **)mediaplatform::Singleton<mlcore::ItemTable>::sharedInstance();
  mlcore::ItemTable::itemArtistPersistentIDColumn(*v5, (uint64_t)&__p);
  mlcore::DatabaseModelProperty<long long>::DatabaseModelProperty(v0, v24, (uint64_t)&__p);
  mlcore::ItemPropertyItemArtistPersistentID(void)::property = v0;
  if (v23 < 0)
    operator delete((void *)__p.__r_.__value_.__l.__size_);
  if (v2)
  {
    v6 = (unint64_t *)&v2->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v8 = mlcore::ItemPropertyItemArtistPersistentID(void)::property;
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  std::string::operator=((std::string *)(v8 + 40), &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v9 = mlcore::TypedEntityClass<mlcore::Item>::sharedPointer();
  v10 = mlcore::ItemPropertyItemArtistPersistentID(void)::property;
  v11 = mediaplatform::Singleton<mlcore::ItemTable>::sharedInstance();
  v12 = *(_QWORD *)v11;
  if (*(char *)(*(_QWORD *)v11 + 31) >= 0)
    v13 = *(unsigned __int8 *)(*(_QWORD *)v11 + 31);
  else
    v13 = *(_QWORD *)(*(_QWORD *)v11 + 16);
  v14 = &v21;
  std::string::basic_string[abi:ne180100]((uint64_t)&v21, v13 + 1);
  if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v14 = (std::string *)v21.__r_.__value_.__r.__words[0];
  if (v13)
  {
    v17 = *(char **)(v12 + 8);
    v16 = (char *)(v12 + 8);
    v15 = v17;
    if (v16[23] >= 0)
      v18 = v16;
    else
      v18 = v15;
    memmove(v14, v18, v13);
  }
  *(_WORD *)((char *)&v14->__r_.__value_.__l.__data_ + v13) = 46;
  v19 = std::string::append(&v21, "itemArtist");
  v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  __p.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  mlcore::EntityClass::setPropertyForName(v9, v10, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
}

void sub_20A7728B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyAlbumArtistPersistentID(void)::$_0 &&>>()
{
  uint64_t v0;
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  mlcore::ItemTable **v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  std::string *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  std::string *v19;
  __int128 v20;
  std::string v21;
  std::string __p;
  char v23;
  _QWORD v24[2];

  v0 = operator new();
  v1 = (_QWORD *)mediaplatform::Singleton<mlcore::ItemTable>::sharedInstance();
  v2 = (std::__shared_weak_count *)v1[1];
  v24[0] = *v1;
  v24[1] = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  v5 = (mlcore::ItemTable **)mediaplatform::Singleton<mlcore::ItemTable>::sharedInstance();
  mlcore::ItemTable::albumArtistPersistentIDColumn(*v5, (uint64_t)&__p);
  mlcore::DatabaseModelProperty<long long>::DatabaseModelProperty(v0, v24, (uint64_t)&__p);
  mlcore::ItemPropertyAlbumArtistPersistentID(void)::property = v0;
  if (v23 < 0)
    operator delete((void *)__p.__r_.__value_.__l.__size_);
  if (v2)
  {
    v6 = (unint64_t *)&v2->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v8 = mlcore::ItemPropertyAlbumArtistPersistentID(void)::property;
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  std::string::operator=((std::string *)(v8 + 40), &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v9 = mlcore::TypedEntityClass<mlcore::Item>::sharedPointer();
  v10 = mlcore::ItemPropertyAlbumArtistPersistentID(void)::property;
  v11 = mediaplatform::Singleton<mlcore::ItemTable>::sharedInstance();
  v12 = *(_QWORD *)v11;
  if (*(char *)(*(_QWORD *)v11 + 31) >= 0)
    v13 = *(unsigned __int8 *)(*(_QWORD *)v11 + 31);
  else
    v13 = *(_QWORD *)(*(_QWORD *)v11 + 16);
  v14 = &v21;
  std::string::basic_string[abi:ne180100]((uint64_t)&v21, v13 + 1);
  if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v14 = (std::string *)v21.__r_.__value_.__r.__words[0];
  if (v13)
  {
    v17 = *(char **)(v12 + 8);
    v16 = (char *)(v12 + 8);
    v15 = v17;
    if (v16[23] >= 0)
      v18 = v16;
    else
      v18 = v15;
    memmove(v14, v18, v13);
  }
  *(_WORD *)((char *)&v14->__r_.__value_.__l.__data_ + v13) = 46;
  v19 = std::string::append(&v21, "albumArtist");
  v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  __p.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  mlcore::EntityClass::setPropertyForName(v9, v10, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
}

void sub_20A772B44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyGenrePersistentID(void)::$_0 &&>>()
{
  uint64_t v0;
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  mlcore::ItemTable **v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  std::string *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  std::string *v19;
  __int128 v20;
  std::string v21;
  std::string __p;
  char v23;
  _QWORD v24[2];

  v0 = operator new();
  v1 = (_QWORD *)mediaplatform::Singleton<mlcore::ItemTable>::sharedInstance();
  v2 = (std::__shared_weak_count *)v1[1];
  v24[0] = *v1;
  v24[1] = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  v5 = (mlcore::ItemTable **)mediaplatform::Singleton<mlcore::ItemTable>::sharedInstance();
  mlcore::ItemTable::genrePersistentIDColumn(*v5, (uint64_t)&__p);
  mlcore::DatabaseModelProperty<long long>::DatabaseModelProperty(v0, v24, (uint64_t)&__p);
  mlcore::ItemPropertyGenrePersistentID(void)::property = v0;
  if (v23 < 0)
    operator delete((void *)__p.__r_.__value_.__l.__size_);
  if (v2)
  {
    v6 = (unint64_t *)&v2->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v8 = mlcore::ItemPropertyGenrePersistentID(void)::property;
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  std::string::operator=((std::string *)(v8 + 40), &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v9 = mlcore::TypedEntityClass<mlcore::Item>::sharedPointer();
  v10 = mlcore::ItemPropertyGenrePersistentID(void)::property;
  v11 = mediaplatform::Singleton<mlcore::ItemTable>::sharedInstance();
  v12 = *(_QWORD *)v11;
  if (*(char *)(*(_QWORD *)v11 + 31) >= 0)
    v13 = *(unsigned __int8 *)(*(_QWORD *)v11 + 31);
  else
    v13 = *(_QWORD *)(*(_QWORD *)v11 + 16);
  v14 = &v21;
  std::string::basic_string[abi:ne180100]((uint64_t)&v21, v13 + 1);
  if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v14 = (std::string *)v21.__r_.__value_.__r.__words[0];
  if (v13)
  {
    v17 = *(char **)(v12 + 8);
    v16 = (char *)(v12 + 8);
    v15 = v17;
    if (v16[23] >= 0)
      v18 = v16;
    else
      v18 = v15;
    memmove(v14, v18, v13);
  }
  *(_WORD *)((char *)&v14->__r_.__value_.__l.__data_ + v13) = 46;
  v19 = std::string::append(&v21, "genre");
  v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  __p.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  mlcore::EntityClass::setPropertyForName(v9, v10, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
}

void sub_20A772DD4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyComposerPersistentID(void)::$_0 &&>>()
{
  uint64_t v0;
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  mlcore::ItemTable **v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  std::string *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  std::string *v19;
  __int128 v20;
  std::string v21;
  std::string __p;
  char v23;
  _QWORD v24[2];

  v0 = operator new();
  v1 = (_QWORD *)mediaplatform::Singleton<mlcore::ItemTable>::sharedInstance();
  v2 = (std::__shared_weak_count *)v1[1];
  v24[0] = *v1;
  v24[1] = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  v5 = (mlcore::ItemTable **)mediaplatform::Singleton<mlcore::ItemTable>::sharedInstance();
  mlcore::ItemTable::composerPersistentIDColumn(*v5, (uint64_t)&__p);
  mlcore::DatabaseModelProperty<long long>::DatabaseModelProperty(v0, v24, (uint64_t)&__p);
  mlcore::ItemPropertyComposerPersistentID(void)::property = v0;
  if (v23 < 0)
    operator delete((void *)__p.__r_.__value_.__l.__size_);
  if (v2)
  {
    v6 = (unint64_t *)&v2->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v8 = mlcore::ItemPropertyComposerPersistentID(void)::property;
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  std::string::operator=((std::string *)(v8 + 40), &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v9 = mlcore::TypedEntityClass<mlcore::Item>::sharedPointer();
  v10 = mlcore::ItemPropertyComposerPersistentID(void)::property;
  v11 = mediaplatform::Singleton<mlcore::ItemTable>::sharedInstance();
  v12 = *(_QWORD *)v11;
  if (*(char *)(*(_QWORD *)v11 + 31) >= 0)
    v13 = *(unsigned __int8 *)(*(_QWORD *)v11 + 31);
  else
    v13 = *(_QWORD *)(*(_QWORD *)v11 + 16);
  v14 = &v21;
  std::string::basic_string[abi:ne180100]((uint64_t)&v21, v13 + 1);
  if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v14 = (std::string *)v21.__r_.__value_.__r.__words[0];
  if (v13)
  {
    v17 = *(char **)(v12 + 8);
    v16 = (char *)(v12 + 8);
    v15 = v17;
    if (v16[23] >= 0)
      v18 = v16;
    else
      v18 = v15;
    memmove(v14, v18, v13);
  }
  *(_WORD *)((char *)&v14->__r_.__value_.__l.__data_ + v13) = 46;
  v19 = std::string::append(&v21, "composer");
  v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  __p.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  mlcore::EntityClass::setPropertyForName(v9, v10, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
}

void sub_20A773064(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyBaseLocationID(void)::$_0 &&>>()
{
  uint64_t v0;
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  mlcore::ItemTable **v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  std::string *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  std::string *v19;
  __int128 v20;
  std::string v21;
  std::string __p;
  char v23;
  _QWORD v24[2];

  v0 = operator new();
  v1 = (_QWORD *)mediaplatform::Singleton<mlcore::ItemTable>::sharedInstance();
  v2 = (std::__shared_weak_count *)v1[1];
  v24[0] = *v1;
  v24[1] = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  v5 = (mlcore::ItemTable **)mediaplatform::Singleton<mlcore::ItemTable>::sharedInstance();
  mlcore::ItemTable::baseLocationIDColumn(*v5, (uint64_t)&__p);
  mlcore::DatabaseModelProperty<long long>::DatabaseModelProperty(v0, v24, (uint64_t)&__p);
  mlcore::ItemPropertyBaseLocationID(void)::property = v0;
  if (v23 < 0)
    operator delete((void *)__p.__r_.__value_.__l.__size_);
  if (v2)
  {
    v6 = (unint64_t *)&v2->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v8 = mlcore::ItemPropertyBaseLocationID(void)::property;
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  std::string::operator=((std::string *)(v8 + 40), &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v9 = mlcore::TypedEntityClass<mlcore::Item>::sharedPointer();
  v10 = mlcore::ItemPropertyBaseLocationID(void)::property;
  v11 = mediaplatform::Singleton<mlcore::ItemTable>::sharedInstance();
  v12 = *(_QWORD *)v11;
  if (*(char *)(*(_QWORD *)v11 + 31) >= 0)
    v13 = *(unsigned __int8 *)(*(_QWORD *)v11 + 31);
  else
    v13 = *(_QWORD *)(*(_QWORD *)v11 + 16);
  v14 = &v21;
  std::string::basic_string[abi:ne180100]((uint64_t)&v21, v13 + 1);
  if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v14 = (std::string *)v21.__r_.__value_.__r.__words[0];
  if (v13)
  {
    v17 = *(char **)(v12 + 8);
    v16 = (char *)(v12 + 8);
    v15 = v17;
    if (v16[23] >= 0)
      v18 = v16;
    else
      v18 = v15;
    memmove(v14, v18, v13);
  }
  *(_WORD *)((char *)&v14->__r_.__value_.__l.__data_ + v13) = 46;
  v19 = std::string::append(&v21, "baseLocationID");
  v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  __p.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  mlcore::EntityClass::setPropertyForName(v9, v10, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
}

void sub_20A7732F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyRemoteLocationID(void)::$_0 &&>>()
{
  uint64_t v0;
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  mlcore::ItemTable **v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  std::string *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  std::string *v19;
  __int128 v20;
  std::string v21;
  std::string __p;
  char v23;
  _QWORD v24[2];

  v0 = operator new();
  v1 = (_QWORD *)mediaplatform::Singleton<mlcore::ItemTable>::sharedInstance();
  v2 = (std::__shared_weak_count *)v1[1];
  v24[0] = *v1;
  v24[1] = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  v5 = (mlcore::ItemTable **)mediaplatform::Singleton<mlcore::ItemTable>::sharedInstance();
  mlcore::ItemTable::remoteLocationIDColumn(*v5, (uint64_t)&__p);
  mlcore::DatabaseModelProperty<long long>::DatabaseModelProperty(v0, v24, (uint64_t)&__p);
  mlcore::ItemPropertyRemoteLocationID(void)::property = v0;
  if (v23 < 0)
    operator delete((void *)__p.__r_.__value_.__l.__size_);
  if (v2)
  {
    v6 = (unint64_t *)&v2->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v8 = mlcore::ItemPropertyRemoteLocationID(void)::property;
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  std::string::operator=((std::string *)(v8 + 40), &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v9 = mlcore::TypedEntityClass<mlcore::Item>::sharedPointer();
  v10 = mlcore::ItemPropertyRemoteLocationID(void)::property;
  v11 = mediaplatform::Singleton<mlcore::ItemTable>::sharedInstance();
  v12 = *(_QWORD *)v11;
  if (*(char *)(*(_QWORD *)v11 + 31) >= 0)
    v13 = *(unsigned __int8 *)(*(_QWORD *)v11 + 31);
  else
    v13 = *(_QWORD *)(*(_QWORD *)v11 + 16);
  v14 = &v21;
  std::string::basic_string[abi:ne180100]((uint64_t)&v21, v13 + 1);
  if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v14 = (std::string *)v21.__r_.__value_.__r.__words[0];
  if (v13)
  {
    v17 = *(char **)(v12 + 8);
    v16 = (char *)(v12 + 8);
    v15 = v17;
    if (v16[23] >= 0)
      v18 = v16;
    else
      v18 = v15;
    memmove(v14, v18, v13);
  }
  *(_WORD *)((char *)&v14->__r_.__value_.__l.__data_ + v13) = 46;
  v19 = std::string::append(&v21, "remoteLocationID");
  v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  __p.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  mlcore::EntityClass::setPropertyForName(v9, v10, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
}

void sub_20A773584(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyKeepLocal(void)::$_0 &&>>()
{
  uint64_t v0;
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  mlcore::ItemTable **v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  std::string *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  std::string *v19;
  __int128 v20;
  std::string v21;
  std::string __p;
  char v23;
  _QWORD v24[2];

  v0 = operator new();
  v1 = (_QWORD *)mediaplatform::Singleton<mlcore::ItemTable>::sharedInstance();
  v2 = (std::__shared_weak_count *)v1[1];
  v24[0] = *v1;
  v24[1] = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  v5 = (mlcore::ItemTable **)mediaplatform::Singleton<mlcore::ItemTable>::sharedInstance();
  mlcore::ItemTable::keepLocalColumn(*v5, (uint64_t)&__p);
  mlcore::DatabaseModelProperty<int>::DatabaseModelProperty(v0, v24, (uint64_t)&__p);
  mlcore::ItemPropertyKeepLocal(void)::property = v0;
  if (v23 < 0)
    operator delete((void *)__p.__r_.__value_.__l.__size_);
  if (v2)
  {
    v6 = (unint64_t *)&v2->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v8 = mlcore::ItemPropertyKeepLocal(void)::property;
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  std::string::operator=((std::string *)(v8 + 40), &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v9 = mlcore::TypedEntityClass<mlcore::Item>::sharedPointer();
  v10 = mlcore::ItemPropertyKeepLocal(void)::property;
  v11 = mediaplatform::Singleton<mlcore::ItemTable>::sharedInstance();
  v12 = *(_QWORD *)v11;
  if (*(char *)(*(_QWORD *)v11 + 31) >= 0)
    v13 = *(unsigned __int8 *)(*(_QWORD *)v11 + 31);
  else
    v13 = *(_QWORD *)(*(_QWORD *)v11 + 16);
  v14 = &v21;
  std::string::basic_string[abi:ne180100]((uint64_t)&v21, v13 + 1);
  if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v14 = (std::string *)v21.__r_.__value_.__r.__words[0];
  if (v13)
  {
    v17 = *(char **)(v12 + 8);
    v16 = (char *)(v12 + 8);
    v15 = v17;
    if (v16[23] >= 0)
      v18 = v16;
    else
      v18 = v15;
    memmove(v14, v18, v13);
  }
  *(_WORD *)((char *)&v14->__r_.__value_.__l.__data_ + v13) = 46;
  v19 = std::string::append(&v21, "keepLocal");
  v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  __p.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  mlcore::EntityClass::setPropertyForName(v9, v10, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
}

void sub_20A773814(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyKeepLocalStatus(void)::$_0 &&>>()
{
  uint64_t v0;
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  mlcore::ItemTable **v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  std::string *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  std::string *v19;
  __int128 v20;
  std::string v21;
  std::string __p;
  char v23;
  _QWORD v24[2];

  v0 = operator new();
  v1 = (_QWORD *)mediaplatform::Singleton<mlcore::ItemTable>::sharedInstance();
  v2 = (std::__shared_weak_count *)v1[1];
  v24[0] = *v1;
  v24[1] = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  v5 = (mlcore::ItemTable **)mediaplatform::Singleton<mlcore::ItemTable>::sharedInstance();
  mlcore::ItemTable::keepLocalStatusColumn(*v5, (uint64_t)&__p);
  mlcore::DatabaseModelProperty<int>::DatabaseModelProperty(v0, v24, (uint64_t)&__p);
  mlcore::ItemPropertyKeepLocalStatus(void)::property = v0;
  if (v23 < 0)
    operator delete((void *)__p.__r_.__value_.__l.__size_);
  if (v2)
  {
    v6 = (unint64_t *)&v2->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v8 = mlcore::ItemPropertyKeepLocalStatus(void)::property;
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  std::string::operator=((std::string *)(v8 + 40), &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v9 = mlcore::TypedEntityClass<mlcore::Item>::sharedPointer();
  v10 = mlcore::ItemPropertyKeepLocalStatus(void)::property;
  v11 = mediaplatform::Singleton<mlcore::ItemTable>::sharedInstance();
  v12 = *(_QWORD *)v11;
  if (*(char *)(*(_QWORD *)v11 + 31) >= 0)
    v13 = *(unsigned __int8 *)(*(_QWORD *)v11 + 31);
  else
    v13 = *(_QWORD *)(*(_QWORD *)v11 + 16);
  v14 = &v21;
  std::string::basic_string[abi:ne180100]((uint64_t)&v21, v13 + 1);
  if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v14 = (std::string *)v21.__r_.__value_.__r.__words[0];
  if (v13)
  {
    v17 = *(char **)(v12 + 8);
    v16 = (char *)(v12 + 8);
    v15 = v17;
    if (v16[23] >= 0)
      v18 = v16;
    else
      v18 = v15;
    memmove(v14, v18, v13);
  }
  *(_WORD *)((char *)&v14->__r_.__value_.__l.__data_ + v13) = 46;
  v19 = std::string::append(&v21, "keepLocalStatus");
  v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  __p.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  mlcore::EntityClass::setPropertyForName(v9, v10, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
}

void sub_20A773AA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyKeepLocalStatusReason(void)::$_0 &&>>()
{
  uint64_t v0;
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  mlcore::ItemTable **v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  std::string *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  std::string *v19;
  __int128 v20;
  std::string v21;
  std::string __p;
  char v23;
  _QWORD v24[2];

  v0 = operator new();
  v1 = (_QWORD *)mediaplatform::Singleton<mlcore::ItemTable>::sharedInstance();
  v2 = (std::__shared_weak_count *)v1[1];
  v24[0] = *v1;
  v24[1] = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  v5 = (mlcore::ItemTable **)mediaplatform::Singleton<mlcore::ItemTable>::sharedInstance();
  mlcore::ItemTable::keepLocalStatusReasonColumn(*v5, (uint64_t)&__p);
  mlcore::DatabaseModelProperty<int>::DatabaseModelProperty(v0, v24, (uint64_t)&__p);
  mlcore::ItemPropertyKeepLocalStatusReason(void)::property = v0;
  if (v23 < 0)
    operator delete((void *)__p.__r_.__value_.__l.__size_);
  if (v2)
  {
    v6 = (unint64_t *)&v2->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v8 = mlcore::ItemPropertyKeepLocalStatusReason(void)::property;
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  std::string::operator=((std::string *)(v8 + 40), &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v9 = mlcore::TypedEntityClass<mlcore::Item>::sharedPointer();
  v10 = mlcore::ItemPropertyKeepLocalStatusReason(void)::property;
  v11 = mediaplatform::Singleton<mlcore::ItemTable>::sharedInstance();
  v12 = *(_QWORD *)v11;
  if (*(char *)(*(_QWORD *)v11 + 31) >= 0)
    v13 = *(unsigned __int8 *)(*(_QWORD *)v11 + 31);
  else
    v13 = *(_QWORD *)(*(_QWORD *)v11 + 16);
  v14 = &v21;
  std::string::basic_string[abi:ne180100]((uint64_t)&v21, v13 + 1);
  if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v14 = (std::string *)v21.__r_.__value_.__r.__words[0];
  if (v13)
  {
    v17 = *(char **)(v12 + 8);
    v16 = (char *)(v12 + 8);
    v15 = v17;
    if (v16[23] >= 0)
      v18 = v16;
    else
      v18 = v15;
    memmove(v14, v18, v13);
  }
  *(_WORD *)((char *)&v14->__r_.__value_.__l.__data_ + v13) = 46;
  v19 = std::string::append(&v21, "keepLocalStatusReason");
  v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  __p.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  mlcore::EntityClass::setPropertyForName(v9, v10, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
}

void sub_20A773D34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyKeepLocalConstraints(void)::$_0 &&>>()
{
  uint64_t v0;
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  mlcore::ItemTable **v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  std::string *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  std::string *v19;
  __int128 v20;
  std::string v21;
  std::string __p;
  char v23;
  _QWORD v24[2];

  v0 = operator new();
  v1 = (_QWORD *)mediaplatform::Singleton<mlcore::ItemTable>::sharedInstance();
  v2 = (std::__shared_weak_count *)v1[1];
  v24[0] = *v1;
  v24[1] = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  v5 = (mlcore::ItemTable **)mediaplatform::Singleton<mlcore::ItemTable>::sharedInstance();
  mlcore::ItemTable::keepLocalConstraintsColumn(*v5, (uint64_t)&__p);
  mlcore::DatabaseModelProperty<int>::DatabaseModelProperty(v0, v24, (uint64_t)&__p);
  mlcore::ItemPropertyKeepLocalConstraints(void)::property = v0;
  if (v23 < 0)
    operator delete((void *)__p.__r_.__value_.__l.__size_);
  if (v2)
  {
    v6 = (unint64_t *)&v2->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v8 = mlcore::ItemPropertyKeepLocalConstraints(void)::property;
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  std::string::operator=((std::string *)(v8 + 40), &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v9 = mlcore::TypedEntityClass<mlcore::Item>::sharedPointer();
  v10 = mlcore::ItemPropertyKeepLocalConstraints(void)::property;
  v11 = mediaplatform::Singleton<mlcore::ItemTable>::sharedInstance();
  v12 = *(_QWORD *)v11;
  if (*(char *)(*(_QWORD *)v11 + 31) >= 0)
    v13 = *(unsigned __int8 *)(*(_QWORD *)v11 + 31);
  else
    v13 = *(_QWORD *)(*(_QWORD *)v11 + 16);
  v14 = &v21;
  std::string::basic_string[abi:ne180100]((uint64_t)&v21, v13 + 1);
  if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v14 = (std::string *)v21.__r_.__value_.__r.__words[0];
  if (v13)
  {
    v17 = *(char **)(v12 + 8);
    v16 = (char *)(v12 + 8);
    v15 = v17;
    if (v16[23] >= 0)
      v18 = v16;
    else
      v18 = v15;
    memmove(v14, v18, v13);
  }
  *(_WORD *)((char *)&v14->__r_.__value_.__l.__data_ + v13) = 46;
  v19 = std::string::append(&v21, "keepLocalConstraints");
  v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  __p.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  mlcore::EntityClass::setPropertyForName(v9, v10, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
}

void sub_20A773FC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

uint64_t mlcore::ItemPropertyIsLocal(mlcore *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&mlcore::ItemPropertyIsLocal(void)::once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&mlcore::ItemPropertyIsLocal(void)::once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyIsLocal(void)::$_0 &&>>);
  }
  return mlcore::ItemPropertyIsLocal(void)::property;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyIsLocal(void)::$_0 &&>>()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  std::__shared_weak_count *v3;
  unint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  std::string __str;

  v0 = operator new();
  v1 = mlcore::ItemPropertyBaseLocationID((mlcore *)v0);
  v2 = (char *)operator new(0x48uLL);
  v3 = (std::__shared_weak_count *)v2;
  *(_OWORD *)(v2 + 8) = 0u;
  v4 = (unint64_t *)(v2 + 8);
  *(_QWORD *)v2 = &off_24C33CE88;
  *((_QWORD *)v2 + 4) = v1;
  *((_QWORD *)v2 + 5) = 0x200000000;
  *((_QWORD *)v2 + 3) = &unk_24C339CA8;
  *((_QWORD *)v2 + 6) = 0;
  *(_OWORD *)(v2 + 56) = 0u;
  *(_OWORD *)(v0 + 16) = 0u;
  *(_OWORD *)(v0 + 32) = 0u;
  *(_OWORD *)(v0 + 48) = 0u;
  *(_QWORD *)v0 = &off_24C3398B8;
  *(_QWORD *)(v0 + 64) = v2 + 24;
  *(_QWORD *)(v0 + 72) = v2;
  do
    v5 = __ldxr(v4);
  while (__stxr(v5 + 1, v4));
  mlcore::ItemPropertyIsLocal(void)::property = v0;
  do
    v6 = __ldaxr(v4);
  while (__stlxr(v6 - 1, v4));
  if (!v6)
  {
    (*(void (**)(char *))(*(_QWORD *)v2 + 16))(v2);
    std::__shared_weak_count::__release_weak(v3);
  }
  v7 = mlcore::ItemPropertyIsLocal(void)::property;
  std::string::basic_string[abi:ne180100]<0>(&__str, "is_local");
  std::string::operator=((std::string *)(v7 + 40), &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  v8 = mlcore::TypedEntityClass<mlcore::Item>::sharedPointer();
  v9 = mlcore::ItemPropertyIsLocal(void)::property;
  std::string::basic_string[abi:ne180100]<0>(&__str, "isLocal");
  mlcore::EntityClass::setPropertyForName(v8, v9, &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
}

void sub_20A774240(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t mlcore::ItemPropertyChosenByAutoFill(mlcore *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&mlcore::ItemPropertyChosenByAutoFill(void)::once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&mlcore::ItemPropertyChosenByAutoFill(void)::once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyChosenByAutoFill(void)::$_0 &&>>);
  }
  return mlcore::ItemPropertyChosenByAutoFill(void)::property;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyChosenByAutoFill(void)::$_0 &&>>()
{
  uint64_t v0;
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  mlcore::ItemStatsTable **v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  std::string *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  std::string *v19;
  __int128 v20;
  std::string v21;
  std::string __p;
  char v23;
  _QWORD v24[2];

  v0 = operator new();
  v1 = (_QWORD *)mediaplatform::Singleton<mlcore::ItemStatsTable>::sharedInstance();
  v2 = (std::__shared_weak_count *)v1[1];
  v24[0] = *v1;
  v24[1] = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  v5 = (mlcore::ItemStatsTable **)mediaplatform::Singleton<mlcore::ItemStatsTable>::sharedInstance();
  mlcore::ItemStatsTable::chosenByAutoFillColumn(*v5, (uint64_t)&__p);
  mlcore::DatabaseModelProperty<int>::DatabaseModelProperty(v0, v24, (uint64_t)&__p);
  mlcore::ItemPropertyChosenByAutoFill(void)::property = v0;
  if (v23 < 0)
    operator delete((void *)__p.__r_.__value_.__l.__size_);
  if (v2)
  {
    v6 = (unint64_t *)&v2->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v8 = mlcore::ItemPropertyChosenByAutoFill(void)::property;
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  std::string::operator=((std::string *)(v8 + 40), &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v9 = mlcore::TypedEntityClass<mlcore::Item>::sharedPointer();
  v10 = mlcore::ItemPropertyChosenByAutoFill(void)::property;
  v11 = mediaplatform::Singleton<mlcore::ItemStatsTable>::sharedInstance();
  v12 = *(_QWORD *)v11;
  if (*(char *)(*(_QWORD *)v11 + 31) >= 0)
    v13 = *(unsigned __int8 *)(*(_QWORD *)v11 + 31);
  else
    v13 = *(_QWORD *)(*(_QWORD *)v11 + 16);
  v14 = &v21;
  std::string::basic_string[abi:ne180100]((uint64_t)&v21, v13 + 1);
  if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v14 = (std::string *)v21.__r_.__value_.__r.__words[0];
  if (v13)
  {
    v17 = *(char **)(v12 + 8);
    v16 = (char *)(v12 + 8);
    v15 = v17;
    if (v16[23] >= 0)
      v18 = v16;
    else
      v18 = v15;
    memmove(v14, v18, v13);
  }
  *(_WORD *)((char *)&v14->__r_.__value_.__l.__data_ + v13) = 46;
  v19 = std::string::append(&v21, "chosenByAutoFill");
  v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  __p.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  mlcore::EntityClass::setPropertyForName(v9, v10, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
}

void sub_20A7744B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

uint64_t _ZNSt3__115allocate_sharedB8ne180100IN6mlcore14ItemStatsTableENS_9allocatorIS2_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(uint64_t *a1)
{
  _QWORD *v2;
  uint64_t result;

  v2 = operator new(0x868uLL);
  v2[1] = 0;
  v2[2] = 0;
  *v2 = &off_24C33C8A0;
  result = mlcore::ItemStatsTable::ItemStatsTable((mlcore::ItemStatsTable *)(v2 + 3));
  *a1 = result;
  a1[1] = (uint64_t)v2;
  return result;
}

void sub_20A7745B0(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<mlcore::ItemStatsTable>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C33C8A0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<mlcore::ItemStatsTable>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C33C8A0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x20BD27AFCLL);
}

uint64_t std::__shared_ptr_emplace<mlcore::ItemStatsTable>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t mlcore::ItemPropertySyncRedownloadParameters(mlcore *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&mlcore::ItemPropertySyncRedownloadParameters(void)::once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&mlcore::ItemPropertySyncRedownloadParameters(void)::once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertySyncRedownloadParameters(void)::$_0 &&>>);
  }
  return mlcore::ItemPropertySyncRedownloadParameters(void)::property;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertySyncRedownloadParameters(void)::$_0 &&>>()
{
  uint64_t v0;
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  mlcore::ItemStoreTable **v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  std::string *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  std::string *v19;
  __int128 v20;
  std::string v21;
  std::string __str;
  _QWORD v23[2];

  v0 = operator new();
  v1 = (_QWORD *)mediaplatform::Singleton<mlcore::ItemStoreTable>::sharedInstance();
  v2 = (std::__shared_weak_count *)v1[1];
  v23[0] = *v1;
  v23[1] = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  v5 = (mlcore::ItemStoreTable **)mediaplatform::Singleton<mlcore::ItemStoreTable>::sharedInstance();
  mlcore::ItemStoreTable::syncRedownloadParamsColumn(*v5, (uint64_t)&__str);
  mlcore::DatabaseModelProperty<std::string>::DatabaseModelProperty(v0, v23, (uint64_t)&__str);
  mlcore::ItemPropertySyncRedownloadParameters(void)::property = v0;
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&__str);
  if (v2)
  {
    v6 = (unint64_t *)&v2->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v8 = mlcore::ItemPropertySyncRedownloadParameters(void)::property;
  std::string::basic_string[abi:ne180100]<0>(&__str, "");
  std::string::operator=((std::string *)(v8 + 40), &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  v9 = mlcore::TypedEntityClass<mlcore::Item>::sharedPointer();
  v10 = mlcore::ItemPropertySyncRedownloadParameters(void)::property;
  v11 = mediaplatform::Singleton<mlcore::ItemStoreTable>::sharedInstance();
  v12 = *(_QWORD *)v11;
  if (*(char *)(*(_QWORD *)v11 + 31) >= 0)
    v13 = *(unsigned __int8 *)(*(_QWORD *)v11 + 31);
  else
    v13 = *(_QWORD *)(*(_QWORD *)v11 + 16);
  v14 = &v21;
  std::string::basic_string[abi:ne180100]((uint64_t)&v21, v13 + 1);
  if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v14 = (std::string *)v21.__r_.__value_.__r.__words[0];
  if (v13)
  {
    v17 = *(char **)(v12 + 8);
    v16 = (char *)(v12 + 8);
    v15 = v17;
    if (v16[23] >= 0)
      v18 = v16;
    else
      v18 = v15;
    memmove(v14, v18, v13);
  }
  *(_WORD *)((char *)&v14->__r_.__value_.__l.__data_ + v13) = 46;
  v19 = std::string::append(&v21, "syncRedownloadParameters");
  v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  __str.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  mlcore::EntityClass::setPropertyForName(v9, v10, &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
}

void sub_20A774840(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

uint64_t mlcore::ItemPropertyDownloadSourceContainerID(mlcore *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&mlcore::ItemPropertyDownloadSourceContainerID(void)::once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&mlcore::ItemPropertyDownloadSourceContainerID(void)::once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyDownloadSourceContainerID(void)::$_0 &&>>);
  }
  return mlcore::ItemPropertyDownloadSourceContainerID(void)::property;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyDownloadSourceContainerID(void)::$_0 &&>>()
{
  uint64_t v0;
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  mlcore::ItemTable **v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  std::string *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  std::string *v19;
  __int128 v20;
  std::string v21;
  std::string __p;
  char v23;
  _QWORD v24[2];

  v0 = operator new();
  v1 = (_QWORD *)mediaplatform::Singleton<mlcore::ItemTable>::sharedInstance();
  v2 = (std::__shared_weak_count *)v1[1];
  v24[0] = *v1;
  v24[1] = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  v5 = (mlcore::ItemTable **)mediaplatform::Singleton<mlcore::ItemTable>::sharedInstance();
  mlcore::ItemTable::downloadSourceContainerIDColumn(*v5, (uint64_t)&__p);
  mlcore::DatabaseModelProperty<long long>::DatabaseModelProperty(v0, v24, (uint64_t)&__p);
  mlcore::ItemPropertyDownloadSourceContainerID(void)::property = v0;
  if (v23 < 0)
    operator delete((void *)__p.__r_.__value_.__l.__size_);
  if (v2)
  {
    v6 = (unint64_t *)&v2->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v8 = mlcore::ItemPropertyDownloadSourceContainerID(void)::property;
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  std::string::operator=((std::string *)(v8 + 40), &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v9 = mlcore::TypedEntityClass<mlcore::Item>::sharedPointer();
  v10 = mlcore::ItemPropertyDownloadSourceContainerID(void)::property;
  v11 = mediaplatform::Singleton<mlcore::ItemTable>::sharedInstance();
  v12 = *(_QWORD *)v11;
  if (*(char *)(*(_QWORD *)v11 + 31) >= 0)
    v13 = *(unsigned __int8 *)(*(_QWORD *)v11 + 31);
  else
    v13 = *(_QWORD *)(*(_QWORD *)v11 + 16);
  v14 = &v21;
  std::string::basic_string[abi:ne180100]((uint64_t)&v21, v13 + 1);
  if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v14 = (std::string *)v21.__r_.__value_.__r.__words[0];
  if (v13)
  {
    v17 = *(char **)(v12 + 8);
    v16 = (char *)(v12 + 8);
    v15 = v17;
    if (v16[23] >= 0)
      v18 = v16;
    else
      v18 = v15;
    memmove(v14, v18, v13);
  }
  *(_WORD *)((char *)&v14->__r_.__value_.__l.__data_ + v13) = 46;
  v19 = std::string::append(&v21, "downloadSourceContainerPID");
  v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  __p.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  mlcore::EntityClass::setPropertyForName(v9, v10, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
}

void sub_20A774B24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyPurchaseHistoryID(void)::$_0 &&>>()
{
  uint64_t v0;
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  mlcore::ItemStoreTable **v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  std::string *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  std::string *v19;
  __int128 v20;
  std::string v21;
  std::string __p;
  char v23;
  _QWORD v24[2];

  v0 = operator new();
  v1 = (_QWORD *)mediaplatform::Singleton<mlcore::ItemStoreTable>::sharedInstance();
  v2 = (std::__shared_weak_count *)v1[1];
  v24[0] = *v1;
  v24[1] = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  v5 = (mlcore::ItemStoreTable **)mediaplatform::Singleton<mlcore::ItemStoreTable>::sharedInstance();
  mlcore::ItemStoreTable::purchaseHistoryIDColumn(*v5, (uint64_t)&__p);
  mlcore::DatabaseModelProperty<long long>::DatabaseModelProperty(v0, v24, (uint64_t)&__p);
  mlcore::ItemPropertyPurchaseHistoryID(void)::property = v0;
  if (v23 < 0)
    operator delete((void *)__p.__r_.__value_.__l.__size_);
  if (v2)
  {
    v6 = (unint64_t *)&v2->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v8 = mlcore::ItemPropertyPurchaseHistoryID(void)::property;
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  std::string::operator=((std::string *)(v8 + 40), &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v9 = mlcore::TypedEntityClass<mlcore::Item>::sharedPointer();
  v10 = mlcore::ItemPropertyPurchaseHistoryID(void)::property;
  v11 = mediaplatform::Singleton<mlcore::ItemStoreTable>::sharedInstance();
  v12 = *(_QWORD *)v11;
  if (*(char *)(*(_QWORD *)v11 + 31) >= 0)
    v13 = *(unsigned __int8 *)(*(_QWORD *)v11 + 31);
  else
    v13 = *(_QWORD *)(*(_QWORD *)v11 + 16);
  v14 = &v21;
  std::string::basic_string[abi:ne180100]((uint64_t)&v21, v13 + 1);
  if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v14 = (std::string *)v21.__r_.__value_.__r.__words[0];
  if (v13)
  {
    v17 = *(char **)(v12 + 8);
    v16 = (char *)(v12 + 8);
    v15 = v17;
    if (v16[23] >= 0)
      v18 = v16;
    else
      v18 = v15;
    memmove(v14, v18, v13);
  }
  *(_WORD *)((char *)&v14->__r_.__value_.__l.__data_ + v13) = 46;
  v19 = std::string::append(&v21, "purchaseHistoryID");
  v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  __p.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  mlcore::EntityClass::setPropertyForName(v9, v10, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
}

void sub_20A774DB4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertySyncID(void)::$_0 &&>>()
{
  uint64_t v0;
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  mlcore::ItemStoreTable **v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  std::string *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  std::string *v19;
  __int128 v20;
  std::string v21;
  std::string __p;
  char v23;
  _QWORD v24[2];

  v0 = operator new();
  v1 = (_QWORD *)mediaplatform::Singleton<mlcore::ItemStoreTable>::sharedInstance();
  v2 = (std::__shared_weak_count *)v1[1];
  v24[0] = *v1;
  v24[1] = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  v5 = (mlcore::ItemStoreTable **)mediaplatform::Singleton<mlcore::ItemStoreTable>::sharedInstance();
  mlcore::ItemStoreTable::syncIDColumn(*v5, (uint64_t)&__p);
  mlcore::DatabaseModelProperty<long long>::DatabaseModelProperty(v0, v24, (uint64_t)&__p);
  mlcore::ItemPropertySyncID(void)::property = v0;
  if (v23 < 0)
    operator delete((void *)__p.__r_.__value_.__l.__size_);
  if (v2)
  {
    v6 = (unint64_t *)&v2->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v8 = mlcore::ItemPropertySyncID(void)::property;
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  std::string::operator=((std::string *)(v8 + 40), &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v9 = mlcore::TypedEntityClass<mlcore::Item>::sharedPointer();
  v10 = mlcore::ItemPropertySyncID(void)::property;
  v11 = mediaplatform::Singleton<mlcore::ItemStoreTable>::sharedInstance();
  v12 = *(_QWORD *)v11;
  if (*(char *)(*(_QWORD *)v11 + 31) >= 0)
    v13 = *(unsigned __int8 *)(*(_QWORD *)v11 + 31);
  else
    v13 = *(_QWORD *)(*(_QWORD *)v11 + 16);
  v14 = &v21;
  std::string::basic_string[abi:ne180100]((uint64_t)&v21, v13 + 1);
  if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v14 = (std::string *)v21.__r_.__value_.__r.__words[0];
  if (v13)
  {
    v17 = *(char **)(v12 + 8);
    v16 = (char *)(v12 + 8);
    v15 = v17;
    if (v16[23] >= 0)
      v18 = v16;
    else
      v18 = v15;
    memmove(v14, v18, v13);
  }
  *(_WORD *)((char *)&v14->__r_.__value_.__l.__data_ + v13) = 46;
  v19 = std::string::append(&v21, "syncID");
  v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  __p.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  mlcore::EntityClass::setPropertyForName(v9, v10, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
}

void sub_20A775044(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertySubscriptionStoreItemID(void)::$_0 &&>>()
{
  uint64_t v0;
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  mlcore::ItemStoreTable **v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  std::string *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  std::string *v19;
  __int128 v20;
  std::string v21;
  std::string __p;
  char v23;
  _QWORD v24[2];

  v0 = operator new();
  v1 = (_QWORD *)mediaplatform::Singleton<mlcore::ItemStoreTable>::sharedInstance();
  v2 = (std::__shared_weak_count *)v1[1];
  v24[0] = *v1;
  v24[1] = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  v5 = (mlcore::ItemStoreTable **)mediaplatform::Singleton<mlcore::ItemStoreTable>::sharedInstance();
  mlcore::ItemStoreTable::subscriptionStoreItemIDColumn(*v5, (uint64_t)&__p);
  mlcore::DatabaseModelProperty<long long>::DatabaseModelProperty(v0, v24, (uint64_t)&__p);
  mlcore::ItemPropertySubscriptionStoreItemID(void)::property = v0;
  if (v23 < 0)
    operator delete((void *)__p.__r_.__value_.__l.__size_);
  if (v2)
  {
    v6 = (unint64_t *)&v2->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v8 = mlcore::ItemPropertySubscriptionStoreItemID(void)::property;
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  std::string::operator=((std::string *)(v8 + 40), &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v9 = mlcore::TypedEntityClass<mlcore::Item>::sharedPointer();
  v10 = mlcore::ItemPropertySubscriptionStoreItemID(void)::property;
  v11 = mediaplatform::Singleton<mlcore::ItemStoreTable>::sharedInstance();
  v12 = *(_QWORD *)v11;
  if (*(char *)(*(_QWORD *)v11 + 31) >= 0)
    v13 = *(unsigned __int8 *)(*(_QWORD *)v11 + 31);
  else
    v13 = *(_QWORD *)(*(_QWORD *)v11 + 16);
  v14 = &v21;
  std::string::basic_string[abi:ne180100]((uint64_t)&v21, v13 + 1);
  if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v14 = (std::string *)v21.__r_.__value_.__r.__words[0];
  if (v13)
  {
    v17 = *(char **)(v12 + 8);
    v16 = (char *)(v12 + 8);
    v15 = v17;
    if (v16[23] >= 0)
      v18 = v16;
    else
      v18 = v15;
    memmove(v14, v18, v13);
  }
  *(_WORD *)((char *)&v14->__r_.__value_.__l.__data_ + v13) = 46;
  v19 = std::string::append(&v21, "subscriptionStoreID");
  v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  __p.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  mlcore::EntityClass::setPropertyForName(v9, v10, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
}

void sub_20A7752D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

uint64_t mlcore::ItemPropertyPurchaseHistoryToken(mlcore *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&mlcore::ItemPropertyPurchaseHistoryToken(void)::once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&mlcore::ItemPropertyPurchaseHistoryToken(void)::once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyPurchaseHistoryToken(void)::$_0 &&>>);
  }
  return mlcore::ItemPropertyPurchaseHistoryToken(void)::property;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyPurchaseHistoryToken(void)::$_0 &&>>()
{
  uint64_t v0;
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  mlcore::ItemStoreTable **v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  std::string *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  std::string *v19;
  __int128 v20;
  std::string v21;
  std::string __p;
  char v23;
  _QWORD v24[2];

  v0 = operator new();
  v1 = (_QWORD *)mediaplatform::Singleton<mlcore::ItemStoreTable>::sharedInstance();
  v2 = (std::__shared_weak_count *)v1[1];
  v24[0] = *v1;
  v24[1] = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  v5 = (mlcore::ItemStoreTable **)mediaplatform::Singleton<mlcore::ItemStoreTable>::sharedInstance();
  mlcore::ItemStoreTable::purchaseHistoryTokenColumn(*v5, (uint64_t)&__p);
  mlcore::DatabaseModelProperty<long long>::DatabaseModelProperty(v0, v24, (uint64_t)&__p);
  mlcore::ItemPropertyPurchaseHistoryToken(void)::property = v0;
  if (v23 < 0)
    operator delete((void *)__p.__r_.__value_.__l.__size_);
  if (v2)
  {
    v6 = (unint64_t *)&v2->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v8 = mlcore::ItemPropertyPurchaseHistoryToken(void)::property;
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  std::string::operator=((std::string *)(v8 + 40), &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v9 = mlcore::TypedEntityClass<mlcore::Item>::sharedPointer();
  v10 = mlcore::ItemPropertyPurchaseHistoryToken(void)::property;
  v11 = mediaplatform::Singleton<mlcore::ItemStoreTable>::sharedInstance();
  v12 = *(_QWORD *)v11;
  if (*(char *)(*(_QWORD *)v11 + 31) >= 0)
    v13 = *(unsigned __int8 *)(*(_QWORD *)v11 + 31);
  else
    v13 = *(_QWORD *)(*(_QWORD *)v11 + 16);
  v14 = &v21;
  std::string::basic_string[abi:ne180100]((uint64_t)&v21, v13 + 1);
  if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v14 = (std::string *)v21.__r_.__value_.__r.__words[0];
  if (v13)
  {
    v17 = *(char **)(v12 + 8);
    v16 = (char *)(v12 + 8);
    v15 = v17;
    if (v16[23] >= 0)
      v18 = v16;
    else
      v18 = v15;
    memmove(v14, v18, v13);
  }
  *(_WORD *)((char *)&v14->__r_.__value_.__l.__data_ + v13) = 46;
  v19 = std::string::append(&v21, "purchaseHistoryToken");
  v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  __p.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  mlcore::EntityClass::setPropertyForName(v9, v10, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
}

void sub_20A7755C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyPurchaseHistoryRedownloadParameters(void)::$_0 &&>>()
{
  uint64_t v0;
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  mlcore::ItemStoreTable **v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  std::string *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  std::string *v19;
  __int128 v20;
  std::string v21;
  std::string __str;
  _QWORD v23[2];

  v0 = operator new();
  v1 = (_QWORD *)mediaplatform::Singleton<mlcore::ItemStoreTable>::sharedInstance();
  v2 = (std::__shared_weak_count *)v1[1];
  v23[0] = *v1;
  v23[1] = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  v5 = (mlcore::ItemStoreTable **)mediaplatform::Singleton<mlcore::ItemStoreTable>::sharedInstance();
  mlcore::ItemStoreTable::purchaseHistoryRedownloadParamsColumn(*v5, (uint64_t)&__str);
  mlcore::DatabaseModelProperty<std::string>::DatabaseModelProperty(v0, v23, (uint64_t)&__str);
  mlcore::ItemPropertyPurchaseHistoryRedownloadParameters(void)::property = v0;
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&__str);
  if (v2)
  {
    v6 = (unint64_t *)&v2->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v8 = mlcore::ItemPropertyPurchaseHistoryRedownloadParameters(void)::property;
  std::string::basic_string[abi:ne180100]<0>(&__str, "");
  std::string::operator=((std::string *)(v8 + 40), &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  v9 = mlcore::TypedEntityClass<mlcore::Item>::sharedPointer();
  v10 = mlcore::ItemPropertyPurchaseHistoryRedownloadParameters(void)::property;
  v11 = mediaplatform::Singleton<mlcore::ItemStoreTable>::sharedInstance();
  v12 = *(_QWORD *)v11;
  if (*(char *)(*(_QWORD *)v11 + 31) >= 0)
    v13 = *(unsigned __int8 *)(*(_QWORD *)v11 + 31);
  else
    v13 = *(_QWORD *)(*(_QWORD *)v11 + 16);
  v14 = &v21;
  std::string::basic_string[abi:ne180100]((uint64_t)&v21, v13 + 1);
  if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v14 = (std::string *)v21.__r_.__value_.__r.__words[0];
  if (v13)
  {
    v17 = *(char **)(v12 + 8);
    v16 = (char *)(v12 + 8);
    v15 = v17;
    if (v16[23] >= 0)
      v18 = v16;
    else
      v18 = v15;
    memmove(v14, v18, v13);
  }
  *(_WORD *)((char *)&v14->__r_.__value_.__l.__data_ + v13) = 46;
  v19 = std::string::append(&v21, "purchaseHistoryRedownloadParameters");
  v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  __str.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  mlcore::EntityClass::setPropertyForName(v9, v10, &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
}

void sub_20A775848(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

uint64_t mlcore::ItemPropertyIsOTAPurchased(mlcore *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&mlcore::ItemPropertyIsOTAPurchased(void)::once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&mlcore::ItemPropertyIsOTAPurchased(void)::once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyIsOTAPurchased(void)::$_0 &&>>);
  }
  return mlcore::ItemPropertyIsOTAPurchased(void)::property;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyIsOTAPurchased(void)::$_0 &&>>()
{
  uint64_t v0;
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  mlcore::ItemStoreTable **v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  std::string *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  std::string *v19;
  __int128 v20;
  std::string v21;
  std::string __p;
  char v23;
  _QWORD v24[2];

  v0 = operator new();
  v1 = (_QWORD *)mediaplatform::Singleton<mlcore::ItemStoreTable>::sharedInstance();
  v2 = (std::__shared_weak_count *)v1[1];
  v24[0] = *v1;
  v24[1] = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  v5 = (mlcore::ItemStoreTable **)mediaplatform::Singleton<mlcore::ItemStoreTable>::sharedInstance();
  mlcore::ItemStoreTable::isOtaPurchasedColumn(*v5, (uint64_t)&__p);
  mlcore::DatabaseModelProperty<long long>::DatabaseModelProperty(v0, v24, (uint64_t)&__p);
  mlcore::ItemPropertyIsOTAPurchased(void)::property = v0;
  if (v23 < 0)
    operator delete((void *)__p.__r_.__value_.__l.__size_);
  if (v2)
  {
    v6 = (unint64_t *)&v2->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v8 = mlcore::ItemPropertyIsOTAPurchased(void)::property;
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  std::string::operator=((std::string *)(v8 + 40), &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v9 = mlcore::TypedEntityClass<mlcore::Item>::sharedPointer();
  v10 = mlcore::ItemPropertyIsOTAPurchased(void)::property;
  v11 = mediaplatform::Singleton<mlcore::ItemStoreTable>::sharedInstance();
  v12 = *(_QWORD *)v11;
  if (*(char *)(*(_QWORD *)v11 + 31) >= 0)
    v13 = *(unsigned __int8 *)(*(_QWORD *)v11 + 31);
  else
    v13 = *(_QWORD *)(*(_QWORD *)v11 + 16);
  v14 = &v21;
  std::string::basic_string[abi:ne180100]((uint64_t)&v21, v13 + 1);
  if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v14 = (std::string *)v21.__r_.__value_.__r.__words[0];
  if (v13)
  {
    v17 = *(char **)(v12 + 8);
    v16 = (char *)(v12 + 8);
    v15 = v17;
    if (v16[23] >= 0)
      v18 = v16;
    else
      v18 = v15;
    memmove(v14, v18, v13);
  }
  *(_WORD *)((char *)&v14->__r_.__value_.__l.__data_ + v13) = 46;
  v19 = std::string::append(&v21, "isOTAPurchased");
  v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  __p.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  mlcore::EntityClass::setPropertyForName(v9, v10, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
}

void sub_20A775B2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

uint64_t mlcore::ItemPropertyIsSubscriptionContent(mlcore *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&mlcore::ItemPropertyIsSubscriptionContent(void)::once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&mlcore::ItemPropertyIsSubscriptionContent(void)::once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyIsSubscriptionContent(void)::$_0 &&>>);
  }
  return mlcore::ItemPropertyIsSubscriptionContent(void)::property;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyIsSubscriptionContent(void)::$_0 &&>>()
{
  uint64_t v0;
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  mlcore::ItemStoreTable **v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  std::string *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  std::string *v19;
  __int128 v20;
  std::string v21;
  std::string __p;
  char v23;
  _QWORD v24[2];

  v0 = operator new();
  v1 = (_QWORD *)mediaplatform::Singleton<mlcore::ItemStoreTable>::sharedInstance();
  v2 = (std::__shared_weak_count *)v1[1];
  v24[0] = *v1;
  v24[1] = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  v5 = (mlcore::ItemStoreTable **)mediaplatform::Singleton<mlcore::ItemStoreTable>::sharedInstance();
  mlcore::ItemStoreTable::isSubscriptionColumn(*v5, (uint64_t)&__p);
  mlcore::DatabaseModelProperty<long long>::DatabaseModelProperty(v0, v24, (uint64_t)&__p);
  mlcore::ItemPropertyIsSubscriptionContent(void)::property = v0;
  if (v23 < 0)
    operator delete((void *)__p.__r_.__value_.__l.__size_);
  if (v2)
  {
    v6 = (unint64_t *)&v2->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v8 = mlcore::ItemPropertyIsSubscriptionContent(void)::property;
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  std::string::operator=((std::string *)(v8 + 40), &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v9 = mlcore::TypedEntityClass<mlcore::Item>::sharedPointer();
  v10 = mlcore::ItemPropertyIsSubscriptionContent(void)::property;
  v11 = mediaplatform::Singleton<mlcore::ItemStoreTable>::sharedInstance();
  v12 = *(_QWORD *)v11;
  if (*(char *)(*(_QWORD *)v11 + 31) >= 0)
    v13 = *(unsigned __int8 *)(*(_QWORD *)v11 + 31);
  else
    v13 = *(_QWORD *)(*(_QWORD *)v11 + 16);
  v14 = &v21;
  std::string::basic_string[abi:ne180100]((uint64_t)&v21, v13 + 1);
  if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v14 = (std::string *)v21.__r_.__value_.__r.__words[0];
  if (v13)
  {
    v17 = *(char **)(v12 + 8);
    v16 = (char *)(v12 + 8);
    v15 = v17;
    if (v16[23] >= 0)
      v18 = v16;
    else
      v18 = v15;
    memmove(v14, v18, v13);
  }
  *(_WORD *)((char *)&v14->__r_.__value_.__l.__data_ + v13) = 46;
  v19 = std::string::append(&v21, "isSubscriptionContent");
  v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  __p.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  mlcore::EntityClass::setPropertyForName(v9, v10, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
}

void sub_20A775E18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

uint64_t mlcore::ItemPropertyNeedsRestore(mlcore *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&mlcore::ItemPropertyNeedsRestore(void)::once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&mlcore::ItemPropertyNeedsRestore(void)::once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyNeedsRestore(void)::$_0 &&>>);
  }
  return mlcore::ItemPropertyNeedsRestore(void)::property;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyNeedsRestore(void)::$_0 &&>>()
{
  uint64_t v0;
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  mlcore::ItemStatsTable **v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  std::string *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  std::string *v19;
  __int128 v20;
  std::string v21;
  std::string __p;
  char v23;
  _QWORD v24[2];

  v0 = operator new();
  v1 = (_QWORD *)mediaplatform::Singleton<mlcore::ItemStatsTable>::sharedInstance();
  v2 = (std::__shared_weak_count *)v1[1];
  v24[0] = *v1;
  v24[1] = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  v5 = (mlcore::ItemStatsTable **)mediaplatform::Singleton<mlcore::ItemStatsTable>::sharedInstance();
  mlcore::ItemStatsTable::needsRestoreColumn(*v5, (uint64_t)&__p);
  mlcore::DatabaseModelProperty<int>::DatabaseModelProperty(v0, v24, (uint64_t)&__p);
  mlcore::ItemPropertyNeedsRestore(void)::property = v0;
  if (v23 < 0)
    operator delete((void *)__p.__r_.__value_.__l.__size_);
  if (v2)
  {
    v6 = (unint64_t *)&v2->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v8 = mlcore::ItemPropertyNeedsRestore(void)::property;
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  std::string::operator=((std::string *)(v8 + 40), &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v9 = mlcore::TypedEntityClass<mlcore::Item>::sharedPointer();
  v10 = mlcore::ItemPropertyNeedsRestore(void)::property;
  v11 = mediaplatform::Singleton<mlcore::ItemStatsTable>::sharedInstance();
  v12 = *(_QWORD *)v11;
  if (*(char *)(*(_QWORD *)v11 + 31) >= 0)
    v13 = *(unsigned __int8 *)(*(_QWORD *)v11 + 31);
  else
    v13 = *(_QWORD *)(*(_QWORD *)v11 + 16);
  v14 = &v21;
  std::string::basic_string[abi:ne180100]((uint64_t)&v21, v13 + 1);
  if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v14 = (std::string *)v21.__r_.__value_.__r.__words[0];
  if (v13)
  {
    v17 = *(char **)(v12 + 8);
    v16 = (char *)(v12 + 8);
    v15 = v17;
    if (v16[23] >= 0)
      v18 = v16;
    else
      v18 = v15;
    memmove(v14, v18, v13);
  }
  *(_WORD *)((char *)&v14->__r_.__value_.__l.__data_ + v13) = 46;
  v19 = std::string::append(&v21, "needsRestore");
  v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  __p.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  mlcore::EntityClass::setPropertyForName(v9, v10, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
}

void sub_20A776104(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyPlayCountUser(void)::$_0 &&>>()
{
  uint64_t v0;
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  mlcore::ItemStatsTable **v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  std::string *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  std::string *v19;
  __int128 v20;
  std::string v21;
  std::string __p;
  char v23;
  _QWORD v24[2];

  v0 = operator new();
  v1 = (_QWORD *)mediaplatform::Singleton<mlcore::ItemStatsTable>::sharedInstance();
  v2 = (std::__shared_weak_count *)v1[1];
  v24[0] = *v1;
  v24[1] = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  v5 = (mlcore::ItemStatsTable **)mediaplatform::Singleton<mlcore::ItemStatsTable>::sharedInstance();
  mlcore::ItemStatsTable::playCountUserColumn(*v5, (uint64_t)&__p);
  mlcore::DatabaseModelProperty<int>::DatabaseModelProperty(v0, v24, (uint64_t)&__p);
  mlcore::ItemPropertyPlayCountUser(void)::property = v0;
  if (v23 < 0)
    operator delete((void *)__p.__r_.__value_.__l.__size_);
  if (v2)
  {
    v6 = (unint64_t *)&v2->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v8 = mlcore::ItemPropertyPlayCountUser(void)::property;
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  std::string::operator=((std::string *)(v8 + 40), &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v9 = mlcore::TypedEntityClass<mlcore::Item>::sharedPointer();
  v10 = mlcore::ItemPropertyPlayCountUser(void)::property;
  v11 = mediaplatform::Singleton<mlcore::ItemStatsTable>::sharedInstance();
  v12 = *(_QWORD *)v11;
  if (*(char *)(*(_QWORD *)v11 + 31) >= 0)
    v13 = *(unsigned __int8 *)(*(_QWORD *)v11 + 31);
  else
    v13 = *(_QWORD *)(*(_QWORD *)v11 + 16);
  v14 = &v21;
  std::string::basic_string[abi:ne180100]((uint64_t)&v21, v13 + 1);
  if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v14 = (std::string *)v21.__r_.__value_.__r.__words[0];
  if (v13)
  {
    v17 = *(char **)(v12 + 8);
    v16 = (char *)(v12 + 8);
    v15 = v17;
    if (v16[23] >= 0)
      v18 = v16;
    else
      v18 = v15;
    memmove(v14, v18, v13);
  }
  *(_WORD *)((char *)&v14->__r_.__value_.__l.__data_ + v13) = 46;
  v19 = std::string::append(&v21, "playCount");
  v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  __p.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  mlcore::EntityClass::setPropertyForName(v9, v10, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
}

void sub_20A776394(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

uint64_t mlcore::ItemPropertyPlayCountRecent(mlcore *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&mlcore::ItemPropertyPlayCountRecent(void)::once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&mlcore::ItemPropertyPlayCountRecent(void)::once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyPlayCountRecent(void)::$_0 &&>>);
  }
  return mlcore::ItemPropertyPlayCountRecent(void)::property;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyPlayCountRecent(void)::$_0 &&>>()
{
  uint64_t v0;
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  mlcore::ItemStatsTable **v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  std::string *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  std::string *v19;
  __int128 v20;
  std::string v21;
  std::string __p;
  char v23;
  _QWORD v24[2];

  v0 = operator new();
  v1 = (_QWORD *)mediaplatform::Singleton<mlcore::ItemStatsTable>::sharedInstance();
  v2 = (std::__shared_weak_count *)v1[1];
  v24[0] = *v1;
  v24[1] = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  v5 = (mlcore::ItemStatsTable **)mediaplatform::Singleton<mlcore::ItemStatsTable>::sharedInstance();
  mlcore::ItemStatsTable::playCountRecentColumn(*v5, (uint64_t)&__p);
  mlcore::DatabaseModelProperty<int>::DatabaseModelProperty(v0, v24, (uint64_t)&__p);
  mlcore::ItemPropertyPlayCountRecent(void)::property = v0;
  if (v23 < 0)
    operator delete((void *)__p.__r_.__value_.__l.__size_);
  if (v2)
  {
    v6 = (unint64_t *)&v2->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v8 = mlcore::ItemPropertyPlayCountRecent(void)::property;
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  std::string::operator=((std::string *)(v8 + 40), &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v9 = mlcore::TypedEntityClass<mlcore::Item>::sharedPointer();
  v10 = mlcore::ItemPropertyPlayCountRecent(void)::property;
  v11 = mediaplatform::Singleton<mlcore::ItemStatsTable>::sharedInstance();
  v12 = *(_QWORD *)v11;
  if (*(char *)(*(_QWORD *)v11 + 31) >= 0)
    v13 = *(unsigned __int8 *)(*(_QWORD *)v11 + 31);
  else
    v13 = *(_QWORD *)(*(_QWORD *)v11 + 16);
  v14 = &v21;
  std::string::basic_string[abi:ne180100]((uint64_t)&v21, v13 + 1);
  if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v14 = (std::string *)v21.__r_.__value_.__r.__words[0];
  if (v13)
  {
    v17 = *(char **)(v12 + 8);
    v16 = (char *)(v12 + 8);
    v15 = v17;
    if (v16[23] >= 0)
      v18 = v16;
    else
      v18 = v15;
    memmove(v14, v18, v13);
  }
  *(_WORD *)((char *)&v14->__r_.__value_.__l.__data_ + v13) = 46;
  v19 = std::string::append(&v21, "playCountRecent");
  v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  __p.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  mlcore::EntityClass::setPropertyForName(v9, v10, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
}

void sub_20A776680(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyUserRating(void)::$_0 &&>>()
{
  uint64_t v0;
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  mlcore::ItemStatsTable **v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  std::string *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  std::string *v19;
  __int128 v20;
  std::string v21;
  std::string __p;
  char v23;
  _QWORD v24[2];

  v0 = operator new();
  v1 = (_QWORD *)mediaplatform::Singleton<mlcore::ItemStatsTable>::sharedInstance();
  v2 = (std::__shared_weak_count *)v1[1];
  v24[0] = *v1;
  v24[1] = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  v5 = (mlcore::ItemStatsTable **)mediaplatform::Singleton<mlcore::ItemStatsTable>::sharedInstance();
  mlcore::ItemStatsTable::userRatingColumn(*v5, (uint64_t)&__p);
  mlcore::DatabaseModelProperty<int>::DatabaseModelProperty(v0, v24, (uint64_t)&__p);
  mlcore::ItemPropertyUserRating(void)::property = v0;
  if (v23 < 0)
    operator delete((void *)__p.__r_.__value_.__l.__size_);
  if (v2)
  {
    v6 = (unint64_t *)&v2->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v8 = mlcore::ItemPropertyUserRating(void)::property;
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  std::string::operator=((std::string *)(v8 + 40), &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v9 = mlcore::TypedEntityClass<mlcore::Item>::sharedPointer();
  v10 = mlcore::ItemPropertyUserRating(void)::property;
  v11 = mediaplatform::Singleton<mlcore::ItemStatsTable>::sharedInstance();
  v12 = *(_QWORD *)v11;
  if (*(char *)(*(_QWORD *)v11 + 31) >= 0)
    v13 = *(unsigned __int8 *)(*(_QWORD *)v11 + 31);
  else
    v13 = *(_QWORD *)(*(_QWORD *)v11 + 16);
  v14 = &v21;
  std::string::basic_string[abi:ne180100]((uint64_t)&v21, v13 + 1);
  if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v14 = (std::string *)v21.__r_.__value_.__r.__words[0];
  if (v13)
  {
    v17 = *(char **)(v12 + 8);
    v16 = (char *)(v12 + 8);
    v15 = v17;
    if (v16[23] >= 0)
      v18 = v16;
    else
      v18 = v15;
    memmove(v14, v18, v13);
  }
  *(_WORD *)((char *)&v14->__r_.__value_.__l.__data_ + v13) = 46;
  v19 = std::string::append(&v21, "userRating");
  v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  __p.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  mlcore::EntityClass::setPropertyForName(v9, v10, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
}

void sub_20A776910(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

uint64_t mlcore::ItemPropertyHasBeenPlayed(mlcore *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&mlcore::ItemPropertyHasBeenPlayed(void)::once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&mlcore::ItemPropertyHasBeenPlayed(void)::once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyHasBeenPlayed(void)::$_0 &&>>);
  }
  return mlcore::ItemPropertyHasBeenPlayed(void)::property;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyHasBeenPlayed(void)::$_0 &&>>()
{
  uint64_t v0;
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  mlcore::ItemStatsTable **v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  std::string *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  std::string *v19;
  __int128 v20;
  std::string v21;
  std::string __p;
  char v23;
  _QWORD v24[2];

  v0 = operator new();
  v1 = (_QWORD *)mediaplatform::Singleton<mlcore::ItemStatsTable>::sharedInstance();
  v2 = (std::__shared_weak_count *)v1[1];
  v24[0] = *v1;
  v24[1] = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  v5 = (mlcore::ItemStatsTable **)mediaplatform::Singleton<mlcore::ItemStatsTable>::sharedInstance();
  mlcore::ItemStatsTable::hasBeenPlayedColumn(*v5, (uint64_t)&__p);
  mlcore::DatabaseModelProperty<int>::DatabaseModelProperty(v0, v24, (uint64_t)&__p);
  mlcore::ItemPropertyHasBeenPlayed(void)::property = v0;
  if (v23 < 0)
    operator delete((void *)__p.__r_.__value_.__l.__size_);
  if (v2)
  {
    v6 = (unint64_t *)&v2->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v8 = mlcore::ItemPropertyHasBeenPlayed(void)::property;
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  std::string::operator=((std::string *)(v8 + 40), &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v9 = mlcore::TypedEntityClass<mlcore::Item>::sharedPointer();
  v10 = mlcore::ItemPropertyHasBeenPlayed(void)::property;
  v11 = mediaplatform::Singleton<mlcore::ItemStatsTable>::sharedInstance();
  v12 = *(_QWORD *)v11;
  if (*(char *)(*(_QWORD *)v11 + 31) >= 0)
    v13 = *(unsigned __int8 *)(*(_QWORD *)v11 + 31);
  else
    v13 = *(_QWORD *)(*(_QWORD *)v11 + 16);
  v14 = &v21;
  std::string::basic_string[abi:ne180100]((uint64_t)&v21, v13 + 1);
  if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v14 = (std::string *)v21.__r_.__value_.__r.__words[0];
  if (v13)
  {
    v17 = *(char **)(v12 + 8);
    v16 = (char *)(v12 + 8);
    v15 = v17;
    if (v16[23] >= 0)
      v18 = v16;
    else
      v18 = v15;
    memmove(v14, v18, v13);
  }
  *(_WORD *)((char *)&v14->__r_.__value_.__l.__data_ + v13) = 46;
  v19 = std::string::append(&v21, "hasBeenPlayed");
  v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  __p.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  mlcore::EntityClass::setPropertyForName(v9, v10, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
}

void sub_20A776BFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

uint64_t mlcore::ItemPropertyBookmarkTime(mlcore *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&mlcore::ItemPropertyBookmarkTime(void)::once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&mlcore::ItemPropertyBookmarkTime(void)::once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyBookmarkTime(void)::$_0 &&>>);
  }
  return mlcore::ItemPropertyBookmarkTime(void)::property;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyBookmarkTime(void)::$_0 &&>>()
{
  uint64_t v0;
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  mlcore::ItemStatsTable **v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  std::string *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  std::string *v19;
  __int128 v20;
  std::string v21;
  std::string __p;
  char v23;
  _QWORD v24[2];

  v0 = operator new();
  v1 = (_QWORD *)mediaplatform::Singleton<mlcore::ItemStatsTable>::sharedInstance();
  v2 = (std::__shared_weak_count *)v1[1];
  v24[0] = *v1;
  v24[1] = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  v5 = (mlcore::ItemStatsTable **)mediaplatform::Singleton<mlcore::ItemStatsTable>::sharedInstance();
  mlcore::ItemStatsTable::bookmarkTimeColumn(*v5, (uint64_t)&__p);
  mlcore::DatabaseModelProperty<double>::DatabaseModelProperty(v0, v24, (uint64_t)&__p);
  mlcore::ItemPropertyBookmarkTime(void)::property = v0;
  if (v23 < 0)
    operator delete((void *)__p.__r_.__value_.__l.__size_);
  if (v2)
  {
    v6 = (unint64_t *)&v2->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v8 = mlcore::ItemPropertyBookmarkTime(void)::property;
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  std::string::operator=((std::string *)(v8 + 40), &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v9 = mlcore::TypedEntityClass<mlcore::Item>::sharedPointer();
  v10 = mlcore::ItemPropertyBookmarkTime(void)::property;
  v11 = mediaplatform::Singleton<mlcore::ItemStatsTable>::sharedInstance();
  v12 = *(_QWORD *)v11;
  if (*(char *)(*(_QWORD *)v11 + 31) >= 0)
    v13 = *(unsigned __int8 *)(*(_QWORD *)v11 + 31);
  else
    v13 = *(_QWORD *)(*(_QWORD *)v11 + 16);
  v14 = &v21;
  std::string::basic_string[abi:ne180100]((uint64_t)&v21, v13 + 1);
  if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v14 = (std::string *)v21.__r_.__value_.__r.__words[0];
  if (v13)
  {
    v17 = *(char **)(v12 + 8);
    v16 = (char *)(v12 + 8);
    v15 = v17;
    if (v16[23] >= 0)
      v18 = v16;
    else
      v18 = v15;
    memmove(v14, v18, v13);
  }
  *(_WORD *)((char *)&v14->__r_.__value_.__l.__data_ + v13) = 46;
  v19 = std::string::append(&v21, "bookmarkTime");
  v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  __p.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  mlcore::EntityClass::setPropertyForName(v9, v10, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
}

void sub_20A776EE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyDatePlayed(void)::$_0 &&>>()
{
  uint64_t v0;
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  mlcore::ItemStatsTable **v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  std::string *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  std::string *v19;
  __int128 v20;
  std::string v21;
  std::string __p;
  char v23;
  _QWORD v24[2];

  v0 = operator new();
  v1 = (_QWORD *)mediaplatform::Singleton<mlcore::ItemStatsTable>::sharedInstance();
  v2 = (std::__shared_weak_count *)v1[1];
  v24[0] = *v1;
  v24[1] = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  v5 = (mlcore::ItemStatsTable **)mediaplatform::Singleton<mlcore::ItemStatsTable>::sharedInstance();
  mlcore::ItemStatsTable::datePlayedColumn(*v5, (uint64_t)&__p);
  mlcore::DatabaseModelProperty<long long>::DatabaseModelProperty(v0, v24, (uint64_t)&__p);
  mlcore::ItemPropertyDatePlayed(void)::property = v0;
  if (v23 < 0)
    operator delete((void *)__p.__r_.__value_.__l.__size_);
  if (v2)
  {
    v6 = (unint64_t *)&v2->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v8 = mlcore::ItemPropertyDatePlayed(void)::property;
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  std::string::operator=((std::string *)(v8 + 40), &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v9 = mlcore::TypedEntityClass<mlcore::Item>::sharedPointer();
  v10 = mlcore::ItemPropertyDatePlayed(void)::property;
  v11 = mediaplatform::Singleton<mlcore::ItemStatsTable>::sharedInstance();
  v12 = *(_QWORD *)v11;
  if (*(char *)(*(_QWORD *)v11 + 31) >= 0)
    v13 = *(unsigned __int8 *)(*(_QWORD *)v11 + 31);
  else
    v13 = *(_QWORD *)(*(_QWORD *)v11 + 16);
  v14 = &v21;
  std::string::basic_string[abi:ne180100]((uint64_t)&v21, v13 + 1);
  if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v14 = (std::string *)v21.__r_.__value_.__r.__words[0];
  if (v13)
  {
    v17 = *(char **)(v12 + 8);
    v16 = (char *)(v12 + 8);
    v15 = v17;
    if (v16[23] >= 0)
      v18 = v16;
    else
      v18 = v15;
    memmove(v14, v18, v13);
  }
  *(_WORD *)((char *)&v14->__r_.__value_.__l.__data_ + v13) = 46;
  v19 = std::string::append(&v21, "datePlayed");
  v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  __p.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  mlcore::EntityClass::setPropertyForName(v9, v10, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
}

void sub_20A777178(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

uint64_t mlcore::ItemPropertySearchTitle(mlcore *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&mlcore::ItemPropertySearchTitle(void)::once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&mlcore::ItemPropertySearchTitle(void)::once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertySearchTitle(void)::$_0 &&>>);
  }
  return mlcore::ItemPropertySearchTitle(void)::property;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertySearchTitle(void)::$_0 &&>>()
{
  uint64_t v0;
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  mlcore::ItemSearchTable **v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  std::string *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  std::string *v19;
  __int128 v20;
  std::string v21;
  std::string __p;
  char v23;
  _QWORD v24[2];

  v0 = operator new();
  v1 = (_QWORD *)mediaplatform::Singleton<mlcore::ItemSearchTable>::sharedInstance();
  v2 = (std::__shared_weak_count *)v1[1];
  v24[0] = *v1;
  v24[1] = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  v5 = (mlcore::ItemSearchTable **)mediaplatform::Singleton<mlcore::ItemSearchTable>::sharedInstance();
  mlcore::ItemSearchTable::searchTitleColumn(*v5, (uint64_t)&__p);
  mlcore::DatabaseModelProperty<long long>::DatabaseModelProperty(v0, v24, (uint64_t)&__p);
  mlcore::ItemPropertySearchTitle(void)::property = v0;
  if (v23 < 0)
    operator delete((void *)__p.__r_.__value_.__l.__size_);
  if (v2)
  {
    v6 = (unint64_t *)&v2->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v8 = mlcore::ItemPropertySearchTitle(void)::property;
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  std::string::operator=((std::string *)(v8 + 40), &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v9 = mlcore::TypedEntityClass<mlcore::Item>::sharedPointer();
  v10 = mlcore::ItemPropertySearchTitle(void)::property;
  v11 = mediaplatform::Singleton<mlcore::ItemSearchTable>::sharedInstance();
  v12 = *(_QWORD *)v11;
  if (*(char *)(*(_QWORD *)v11 + 31) >= 0)
    v13 = *(unsigned __int8 *)(*(_QWORD *)v11 + 31);
  else
    v13 = *(_QWORD *)(*(_QWORD *)v11 + 16);
  v14 = &v21;
  std::string::basic_string[abi:ne180100]((uint64_t)&v21, v13 + 1);
  if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v14 = (std::string *)v21.__r_.__value_.__r.__words[0];
  if (v13)
  {
    v17 = *(char **)(v12 + 8);
    v16 = (char *)(v12 + 8);
    v15 = v17;
    if (v16[23] >= 0)
      v18 = v16;
    else
      v18 = v15;
    memmove(v14, v18, v13);
  }
  *(_WORD *)((char *)&v14->__r_.__value_.__l.__data_ + v13) = 46;
  v19 = std::string::append(&v21, "searchTitle");
  v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  __p.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  mlcore::EntityClass::setPropertyForName(v9, v10, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
}

void sub_20A777464(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

uint64_t mediaplatform::Singleton<mlcore::ItemSearchTable>::sharedInstance()
{
  unsigned __int8 v0;
  mlcore::ItemSearchTable **v2;

  if ((v0 & 1) == 0
  {
    v2 = (mlcore::ItemSearchTable **)operator new();
    _ZNSt3__115allocate_sharedB8ne180100IN6mlcore15ItemSearchTableENS_9allocatorIS2_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(v2);
    mediaplatform::Singleton<mlcore::ItemSearchTable>::sharedInstance(void)::_sharedInstance = (uint64_t)v2;
  }
  return mediaplatform::Singleton<mlcore::ItemSearchTable>::sharedInstance(void)::_sharedInstance;
}

void sub_20A777594(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x20BD27AFC](v1, 0x20C40A4A59CD2);
  _Unwind_Resume(a1);
}

mlcore::ItemSearchTable *_ZNSt3__115allocate_sharedB8ne180100IN6mlcore15ItemSearchTableENS_9allocatorIS2_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(mlcore::ItemSearchTable **a1)
{
  _QWORD *v2;
  mlcore::ItemSearchTable *result;

  v2 = operator new(0x2A8uLL);
  v2[1] = 0;
  v2[2] = 0;
  *v2 = &off_24C33CAD0;
  result = mlcore::ItemSearchTable::ItemSearchTable((mlcore::ItemSearchTable *)(v2 + 3));
  *a1 = result;
  a1[1] = (mlcore::ItemSearchTable *)v2;
  return result;
}

void sub_20A77760C(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<mlcore::ItemSearchTable>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C33CAD0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<mlcore::ItemSearchTable>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C33CAD0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x20BD27AFCLL);
}

uint64_t std::__shared_ptr_emplace<mlcore::ItemSearchTable>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t mlcore::ItemPropertySearchAlbum(mlcore *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&mlcore::ItemPropertySearchAlbum(void)::once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&mlcore::ItemPropertySearchAlbum(void)::once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertySearchAlbum(void)::$_0 &&>>);
  }
  return mlcore::ItemPropertySearchAlbum(void)::property;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertySearchAlbum(void)::$_0 &&>>()
{
  uint64_t v0;
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  mlcore::ItemSearchTable **v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  std::string *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  std::string *v19;
  __int128 v20;
  std::string v21;
  std::string __p;
  char v23;
  _QWORD v24[2];

  v0 = operator new();
  v1 = (_QWORD *)mediaplatform::Singleton<mlcore::ItemSearchTable>::sharedInstance();
  v2 = (std::__shared_weak_count *)v1[1];
  v24[0] = *v1;
  v24[1] = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  v5 = (mlcore::ItemSearchTable **)mediaplatform::Singleton<mlcore::ItemSearchTable>::sharedInstance();
  mlcore::ItemSearchTable::searchAlbumColumn(*v5, (uint64_t)&__p);
  mlcore::DatabaseModelProperty<long long>::DatabaseModelProperty(v0, v24, (uint64_t)&__p);
  mlcore::ItemPropertySearchAlbum(void)::property = v0;
  if (v23 < 0)
    operator delete((void *)__p.__r_.__value_.__l.__size_);
  if (v2)
  {
    v6 = (unint64_t *)&v2->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v8 = mlcore::ItemPropertySearchAlbum(void)::property;
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  std::string::operator=((std::string *)(v8 + 40), &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v9 = mlcore::TypedEntityClass<mlcore::Item>::sharedPointer();
  v10 = mlcore::ItemPropertySearchAlbum(void)::property;
  v11 = mediaplatform::Singleton<mlcore::ItemSearchTable>::sharedInstance();
  v12 = *(_QWORD *)v11;
  if (*(char *)(*(_QWORD *)v11 + 31) >= 0)
    v13 = *(unsigned __int8 *)(*(_QWORD *)v11 + 31);
  else
    v13 = *(_QWORD *)(*(_QWORD *)v11 + 16);
  v14 = &v21;
  std::string::basic_string[abi:ne180100]((uint64_t)&v21, v13 + 1);
  if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v14 = (std::string *)v21.__r_.__value_.__r.__words[0];
  if (v13)
  {
    v17 = *(char **)(v12 + 8);
    v16 = (char *)(v12 + 8);
    v15 = v17;
    if (v16[23] >= 0)
      v18 = v16;
    else
      v18 = v15;
    memmove(v14, v18, v13);
  }
  *(_WORD *)((char *)&v14->__r_.__value_.__l.__data_ + v13) = 46;
  v19 = std::string::append(&v21, "searchAlbum");
  v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  __p.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  mlcore::EntityClass::setPropertyForName(v9, v10, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
}

void sub_20A7778A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

uint64_t mlcore::ItemPropertySearchArtist(mlcore *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&mlcore::ItemPropertySearchArtist(void)::once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&mlcore::ItemPropertySearchArtist(void)::once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertySearchArtist(void)::$_0 &&>>);
  }
  return mlcore::ItemPropertySearchArtist(void)::property;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertySearchArtist(void)::$_0 &&>>()
{
  uint64_t v0;
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  mlcore::ItemSearchTable **v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  std::string *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  std::string *v19;
  __int128 v20;
  std::string v21;
  std::string __p;
  char v23;
  _QWORD v24[2];

  v0 = operator new();
  v1 = (_QWORD *)mediaplatform::Singleton<mlcore::ItemSearchTable>::sharedInstance();
  v2 = (std::__shared_weak_count *)v1[1];
  v24[0] = *v1;
  v24[1] = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  v5 = (mlcore::ItemSearchTable **)mediaplatform::Singleton<mlcore::ItemSearchTable>::sharedInstance();
  mlcore::ItemSearchTable::searchAlbumArtistColumn(*v5, (uint64_t)&__p);
  mlcore::DatabaseModelProperty<long long>::DatabaseModelProperty(v0, v24, (uint64_t)&__p);
  mlcore::ItemPropertySearchArtist(void)::property = v0;
  if (v23 < 0)
    operator delete((void *)__p.__r_.__value_.__l.__size_);
  if (v2)
  {
    v6 = (unint64_t *)&v2->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v8 = mlcore::ItemPropertySearchArtist(void)::property;
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  std::string::operator=((std::string *)(v8 + 40), &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v9 = mlcore::TypedEntityClass<mlcore::Item>::sharedPointer();
  v10 = mlcore::ItemPropertySearchArtist(void)::property;
  v11 = mediaplatform::Singleton<mlcore::ItemSearchTable>::sharedInstance();
  v12 = *(_QWORD *)v11;
  if (*(char *)(*(_QWORD *)v11 + 31) >= 0)
    v13 = *(unsigned __int8 *)(*(_QWORD *)v11 + 31);
  else
    v13 = *(_QWORD *)(*(_QWORD *)v11 + 16);
  v14 = &v21;
  std::string::basic_string[abi:ne180100]((uint64_t)&v21, v13 + 1);
  if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v14 = (std::string *)v21.__r_.__value_.__r.__words[0];
  if (v13)
  {
    v17 = *(char **)(v12 + 8);
    v16 = (char *)(v12 + 8);
    v15 = v17;
    if (v16[23] >= 0)
      v18 = v16;
    else
      v18 = v15;
    memmove(v14, v18, v13);
  }
  *(_WORD *)((char *)&v14->__r_.__value_.__l.__data_ + v13) = 46;
  v19 = std::string::append(&v21, "searchArtist");
  v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  __p.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  mlcore::EntityClass::setPropertyForName(v9, v10, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
}

void sub_20A777B90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

uint64_t mlcore::ItemPropertySearchItemArtist(mlcore *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&mlcore::ItemPropertySearchItemArtist(void)::once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&mlcore::ItemPropertySearchItemArtist(void)::once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertySearchItemArtist(void)::$_0 &&>>);
  }
  return mlcore::ItemPropertySearchItemArtist(void)::property;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertySearchItemArtist(void)::$_0 &&>>()
{
  uint64_t v0;
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  mlcore::ItemSearchTable **v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  std::string *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  std::string *v19;
  __int128 v20;
  std::string v21;
  std::string __p;
  char v23;
  _QWORD v24[2];

  v0 = operator new();
  v1 = (_QWORD *)mediaplatform::Singleton<mlcore::ItemSearchTable>::sharedInstance();
  v2 = (std::__shared_weak_count *)v1[1];
  v24[0] = *v1;
  v24[1] = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  v5 = (mlcore::ItemSearchTable **)mediaplatform::Singleton<mlcore::ItemSearchTable>::sharedInstance();
  mlcore::ItemSearchTable::searchArtistColumn(*v5, (uint64_t)&__p);
  mlcore::DatabaseModelProperty<long long>::DatabaseModelProperty(v0, v24, (uint64_t)&__p);
  mlcore::ItemPropertySearchItemArtist(void)::property = v0;
  if (v23 < 0)
    operator delete((void *)__p.__r_.__value_.__l.__size_);
  if (v2)
  {
    v6 = (unint64_t *)&v2->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v8 = mlcore::ItemPropertySearchItemArtist(void)::property;
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  std::string::operator=((std::string *)(v8 + 40), &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v9 = mlcore::TypedEntityClass<mlcore::Item>::sharedPointer();
  v10 = mlcore::ItemPropertySearchItemArtist(void)::property;
  v11 = mediaplatform::Singleton<mlcore::ItemSearchTable>::sharedInstance();
  v12 = *(_QWORD *)v11;
  if (*(char *)(*(_QWORD *)v11 + 31) >= 0)
    v13 = *(unsigned __int8 *)(*(_QWORD *)v11 + 31);
  else
    v13 = *(_QWORD *)(*(_QWORD *)v11 + 16);
  v14 = &v21;
  std::string::basic_string[abi:ne180100]((uint64_t)&v21, v13 + 1);
  if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v14 = (std::string *)v21.__r_.__value_.__r.__words[0];
  if (v13)
  {
    v17 = *(char **)(v12 + 8);
    v16 = (char *)(v12 + 8);
    v15 = v17;
    if (v16[23] >= 0)
      v18 = v16;
    else
      v18 = v15;
    memmove(v14, v18, v13);
  }
  *(_WORD *)((char *)&v14->__r_.__value_.__l.__data_ + v13) = 46;
  v19 = std::string::append(&v21, "searchItemArtist");
  v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  __p.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  mlcore::EntityClass::setPropertyForName(v9, v10, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
}

void sub_20A777E7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

uint64_t mlcore::ItemPropertySearchComposer(mlcore *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&mlcore::ItemPropertySearchComposer(void)::once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&mlcore::ItemPropertySearchComposer(void)::once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertySearchComposer(void)::$_0 &&>>);
  }
  return mlcore::ItemPropertySearchComposer(void)::property;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertySearchComposer(void)::$_0 &&>>()
{
  uint64_t v0;
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  mlcore::ItemSearchTable **v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  std::string *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  std::string *v19;
  __int128 v20;
  std::string v21;
  std::string __p;
  char v23;
  _QWORD v24[2];

  v0 = operator new();
  v1 = (_QWORD *)mediaplatform::Singleton<mlcore::ItemSearchTable>::sharedInstance();
  v2 = (std::__shared_weak_count *)v1[1];
  v24[0] = *v1;
  v24[1] = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  v5 = (mlcore::ItemSearchTable **)mediaplatform::Singleton<mlcore::ItemSearchTable>::sharedInstance();
  mlcore::ItemSearchTable::searchComposerColumn(*v5, (uint64_t)&__p);
  mlcore::DatabaseModelProperty<long long>::DatabaseModelProperty(v0, v24, (uint64_t)&__p);
  mlcore::ItemPropertySearchComposer(void)::property = v0;
  if (v23 < 0)
    operator delete((void *)__p.__r_.__value_.__l.__size_);
  if (v2)
  {
    v6 = (unint64_t *)&v2->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v8 = mlcore::ItemPropertySearchComposer(void)::property;
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  std::string::operator=((std::string *)(v8 + 40), &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v9 = mlcore::TypedEntityClass<mlcore::Item>::sharedPointer();
  v10 = mlcore::ItemPropertySearchComposer(void)::property;
  v11 = mediaplatform::Singleton<mlcore::ItemSearchTable>::sharedInstance();
  v12 = *(_QWORD *)v11;
  if (*(char *)(*(_QWORD *)v11 + 31) >= 0)
    v13 = *(unsigned __int8 *)(*(_QWORD *)v11 + 31);
  else
    v13 = *(_QWORD *)(*(_QWORD *)v11 + 16);
  v14 = &v21;
  std::string::basic_string[abi:ne180100]((uint64_t)&v21, v13 + 1);
  if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v14 = (std::string *)v21.__r_.__value_.__r.__words[0];
  if (v13)
  {
    v17 = *(char **)(v12 + 8);
    v16 = (char *)(v12 + 8);
    v15 = v17;
    if (v16[23] >= 0)
      v18 = v16;
    else
      v18 = v15;
    memmove(v14, v18, v13);
  }
  *(_WORD *)((char *)&v14->__r_.__value_.__l.__data_ + v13) = 46;
  v19 = std::string::append(&v21, "searchComposer");
  v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  __p.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  mlcore::EntityClass::setPropertyForName(v9, v10, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
}

void sub_20A778168(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyLikedState(void)::$_0 &&>>()
{
  uint64_t v0;
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  mlcore::ItemStatsTable **v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  std::string *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  std::string *v19;
  __int128 v20;
  std::string v21;
  std::string __p;
  char v23;
  _QWORD v24[2];

  v0 = operator new();
  v1 = (_QWORD *)mediaplatform::Singleton<mlcore::ItemStatsTable>::sharedInstance();
  v2 = (std::__shared_weak_count *)v1[1];
  v24[0] = *v1;
  v24[1] = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  v5 = (mlcore::ItemStatsTable **)mediaplatform::Singleton<mlcore::ItemStatsTable>::sharedInstance();
  mlcore::ItemStatsTable::likedStateColumn(*v5, (uint64_t)&__p);
  mlcore::DatabaseModelProperty<int>::DatabaseModelProperty(v0, v24, (uint64_t)&__p);
  mlcore::ItemPropertyLikedState(void)::property = v0;
  if (v23 < 0)
    operator delete((void *)__p.__r_.__value_.__l.__size_);
  if (v2)
  {
    v6 = (unint64_t *)&v2->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v8 = mlcore::ItemPropertyLikedState(void)::property;
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  std::string::operator=((std::string *)(v8 + 40), &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v9 = mlcore::TypedEntityClass<mlcore::Item>::sharedPointer();
  v10 = mlcore::ItemPropertyLikedState(void)::property;
  v11 = mediaplatform::Singleton<mlcore::ItemStatsTable>::sharedInstance();
  v12 = *(_QWORD *)v11;
  if (*(char *)(*(_QWORD *)v11 + 31) >= 0)
    v13 = *(unsigned __int8 *)(*(_QWORD *)v11 + 31);
  else
    v13 = *(_QWORD *)(*(_QWORD *)v11 + 16);
  v14 = &v21;
  std::string::basic_string[abi:ne180100]((uint64_t)&v21, v13 + 1);
  if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v14 = (std::string *)v21.__r_.__value_.__r.__words[0];
  if (v13)
  {
    v17 = *(char **)(v12 + 8);
    v16 = (char *)(v12 + 8);
    v15 = v17;
    if (v16[23] >= 0)
      v18 = v16;
    else
      v18 = v15;
    memmove(v14, v18, v13);
  }
  *(_WORD *)((char *)&v14->__r_.__value_.__l.__data_ + v13) = 46;
  v19 = std::string::append(&v21, "liked");
  v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  __p.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  mlcore::EntityClass::setPropertyForName(v9, v10, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
}

void sub_20A7783F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyLikedStateChangedDate(void)::$_0 &&>>()
{
  uint64_t v0;
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  mlcore::ItemStatsTable **v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  std::string *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  std::string *v19;
  __int128 v20;
  std::string v21;
  std::string __p;
  char v23;
  _QWORD v24[2];

  v0 = operator new();
  v1 = (_QWORD *)mediaplatform::Singleton<mlcore::ItemStatsTable>::sharedInstance();
  v2 = (std::__shared_weak_count *)v1[1];
  v24[0] = *v1;
  v24[1] = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  v5 = (mlcore::ItemStatsTable **)mediaplatform::Singleton<mlcore::ItemStatsTable>::sharedInstance();
  mlcore::ItemStatsTable::likedStateChangedDateColumn(*v5, (uint64_t)&__p);
  mlcore::DatabaseModelProperty<long long>::DatabaseModelProperty(v0, v24, (uint64_t)&__p);
  mlcore::ItemPropertyLikedStateChangedDate(void)::property = v0;
  if (v23 < 0)
    operator delete((void *)__p.__r_.__value_.__l.__size_);
  if (v2)
  {
    v6 = (unint64_t *)&v2->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v8 = mlcore::ItemPropertyLikedStateChangedDate(void)::property;
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  std::string::operator=((std::string *)(v8 + 40), &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v9 = mlcore::TypedEntityClass<mlcore::Item>::sharedPointer();
  v10 = mlcore::ItemPropertyLikedStateChangedDate(void)::property;
  v11 = mediaplatform::Singleton<mlcore::ItemStatsTable>::sharedInstance();
  v12 = *(_QWORD *)v11;
  if (*(char *)(*(_QWORD *)v11 + 31) >= 0)
    v13 = *(unsigned __int8 *)(*(_QWORD *)v11 + 31);
  else
    v13 = *(_QWORD *)(*(_QWORD *)v11 + 16);
  v14 = &v21;
  std::string::basic_string[abi:ne180100]((uint64_t)&v21, v13 + 1);
  if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v14 = (std::string *)v21.__r_.__value_.__r.__words[0];
  if (v13)
  {
    v17 = *(char **)(v12 + 8);
    v16 = (char *)(v12 + 8);
    v15 = v17;
    if (v16[23] >= 0)
      v18 = v16;
    else
      v18 = v15;
    memmove(v14, v18, v13);
  }
  *(_WORD *)((char *)&v14->__r_.__value_.__l.__data_ + v13) = 46;
  v19 = std::string::append(&v21, "likedStateChangedDate");
  v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  __p.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  mlcore::EntityClass::setPropertyForName(v9, v10, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
}

void sub_20A778688(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

uint64_t mlcore::ItemPropertyDateSkipped(mlcore *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&mlcore::ItemPropertyDateSkipped(void)::once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&mlcore::ItemPropertyDateSkipped(void)::once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyDateSkipped(void)::$_0 &&>>);
  }
  return mlcore::ItemPropertyDateSkipped(void)::property;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyDateSkipped(void)::$_0 &&>>()
{
  uint64_t v0;
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  mlcore::ItemStatsTable **v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  std::string *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  std::string *v19;
  __int128 v20;
  std::string v21;
  std::string __p;
  char v23;
  _QWORD v24[2];

  v0 = operator new();
  v1 = (_QWORD *)mediaplatform::Singleton<mlcore::ItemStatsTable>::sharedInstance();
  v2 = (std::__shared_weak_count *)v1[1];
  v24[0] = *v1;
  v24[1] = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  v5 = (mlcore::ItemStatsTable **)mediaplatform::Singleton<mlcore::ItemStatsTable>::sharedInstance();
  mlcore::ItemStatsTable::dateSkippedColumn(*v5, (uint64_t)&__p);
  mlcore::DatabaseModelProperty<long long>::DatabaseModelProperty(v0, v24, (uint64_t)&__p);
  mlcore::ItemPropertyDateSkipped(void)::property = v0;
  if (v23 < 0)
    operator delete((void *)__p.__r_.__value_.__l.__size_);
  if (v2)
  {
    v6 = (unint64_t *)&v2->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v8 = mlcore::ItemPropertyDateSkipped(void)::property;
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  std::string::operator=((std::string *)(v8 + 40), &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v9 = mlcore::TypedEntityClass<mlcore::Item>::sharedPointer();
  v10 = mlcore::ItemPropertyDateSkipped(void)::property;
  v11 = mediaplatform::Singleton<mlcore::ItemStatsTable>::sharedInstance();
  v12 = *(_QWORD *)v11;
  if (*(char *)(*(_QWORD *)v11 + 31) >= 0)
    v13 = *(unsigned __int8 *)(*(_QWORD *)v11 + 31);
  else
    v13 = *(_QWORD *)(*(_QWORD *)v11 + 16);
  v14 = &v21;
  std::string::basic_string[abi:ne180100]((uint64_t)&v21, v13 + 1);
  if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v14 = (std::string *)v21.__r_.__value_.__r.__words[0];
  if (v13)
  {
    v17 = *(char **)(v12 + 8);
    v16 = (char *)(v12 + 8);
    v15 = v17;
    if (v16[23] >= 0)
      v18 = v16;
    else
      v18 = v15;
    memmove(v14, v18, v13);
  }
  *(_WORD *)((char *)&v14->__r_.__value_.__l.__data_ + v13) = 46;
  v19 = std::string::append(&v21, "dateSkipped");
  v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  __p.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  mlcore::EntityClass::setPropertyForName(v9, v10, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
}

void sub_20A778974(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

uint64_t mlcore::ItemPropertyHidden(mlcore *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&mlcore::ItemPropertyHidden(void)::once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&mlcore::ItemPropertyHidden(void)::once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyHidden(void)::$_0 &&>>);
  }
  return mlcore::ItemPropertyHidden(void)::property;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyHidden(void)::$_0 &&>>()
{
  uint64_t v0;
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  mlcore::ItemStatsTable **v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  std::string *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  std::string *v19;
  __int128 v20;
  std::string v21;
  std::string __p;
  char v23;
  _QWORD v24[2];

  v0 = operator new();
  v1 = (_QWORD *)mediaplatform::Singleton<mlcore::ItemStatsTable>::sharedInstance();
  v2 = (std::__shared_weak_count *)v1[1];
  v24[0] = *v1;
  v24[1] = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  v5 = (mlcore::ItemStatsTable **)mediaplatform::Singleton<mlcore::ItemStatsTable>::sharedInstance();
  mlcore::ItemStatsTable::hiddenColumn(*v5, (uint64_t)&__p);
  mlcore::DatabaseModelProperty<int>::DatabaseModelProperty(v0, v24, (uint64_t)&__p);
  mlcore::ItemPropertyHidden(void)::property = v0;
  if (v23 < 0)
    operator delete((void *)__p.__r_.__value_.__l.__size_);
  if (v2)
  {
    v6 = (unint64_t *)&v2->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v8 = mlcore::ItemPropertyHidden(void)::property;
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  std::string::operator=((std::string *)(v8 + 40), &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v9 = mlcore::TypedEntityClass<mlcore::Item>::sharedPointer();
  v10 = mlcore::ItemPropertyHidden(void)::property;
  v11 = mediaplatform::Singleton<mlcore::ItemStatsTable>::sharedInstance();
  v12 = *(_QWORD *)v11;
  if (*(char *)(*(_QWORD *)v11 + 31) >= 0)
    v13 = *(unsigned __int8 *)(*(_QWORD *)v11 + 31);
  else
    v13 = *(_QWORD *)(*(_QWORD *)v11 + 16);
  v14 = &v21;
  std::string::basic_string[abi:ne180100]((uint64_t)&v21, v13 + 1);
  if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v14 = (std::string *)v21.__r_.__value_.__r.__words[0];
  if (v13)
  {
    v17 = *(char **)(v12 + 8);
    v16 = (char *)(v12 + 8);
    v15 = v17;
    if (v16[23] >= 0)
      v18 = v16;
    else
      v18 = v15;
    memmove(v14, v18, v13);
  }
  *(_WORD *)((char *)&v14->__r_.__value_.__l.__data_ + v13) = 46;
  v19 = std::string::append(&v21, "hidden");
  v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  __p.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  mlcore::EntityClass::setPropertyForName(v9, v10, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
}

void sub_20A778C60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyContentRating(void)::$_0 &&>>()
{
  uint64_t v0;
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  mlcore::ItemExtraTable **v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  std::string *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  std::string *v19;
  __int128 v20;
  std::string v21;
  std::string __p;
  char v23;
  _QWORD v24[2];

  v0 = operator new();
  v1 = (_QWORD *)mediaplatform::Singleton<mlcore::ItemExtraTable>::sharedInstance();
  v2 = (std::__shared_weak_count *)v1[1];
  v24[0] = *v1;
  v24[1] = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  v5 = (mlcore::ItemExtraTable **)mediaplatform::Singleton<mlcore::ItemExtraTable>::sharedInstance();
  mlcore::ItemExtraTable::contentRatingColumn(*v5, (uint64_t)&__p);
  mlcore::DatabaseModelProperty<int>::DatabaseModelProperty(v0, v24, (uint64_t)&__p);
  mlcore::ItemPropertyContentRating(void)::property = v0;
  if (v23 < 0)
    operator delete((void *)__p.__r_.__value_.__l.__size_);
  if (v2)
  {
    v6 = (unint64_t *)&v2->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v8 = mlcore::ItemPropertyContentRating(void)::property;
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  std::string::operator=((std::string *)(v8 + 40), &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v9 = mlcore::TypedEntityClass<mlcore::Item>::sharedPointer();
  v10 = mlcore::ItemPropertyContentRating(void)::property;
  v11 = mediaplatform::Singleton<mlcore::ItemExtraTable>::sharedInstance();
  v12 = *(_QWORD *)v11;
  if (*(char *)(*(_QWORD *)v11 + 31) >= 0)
    v13 = *(unsigned __int8 *)(*(_QWORD *)v11 + 31);
  else
    v13 = *(_QWORD *)(*(_QWORD *)v11 + 16);
  v14 = &v21;
  std::string::basic_string[abi:ne180100]((uint64_t)&v21, v13 + 1);
  if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v14 = (std::string *)v21.__r_.__value_.__r.__words[0];
  if (v13)
  {
    v17 = *(char **)(v12 + 8);
    v16 = (char *)(v12 + 8);
    v15 = v17;
    if (v16[23] >= 0)
      v18 = v16;
    else
      v18 = v15;
    memmove(v14, v18, v13);
  }
  *(_WORD *)((char *)&v14->__r_.__value_.__l.__data_ + v13) = 46;
  v19 = std::string::append(&v21, "contentRating");
  v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  __p.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  mlcore::EntityClass::setPropertyForName(v9, v10, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
}

void sub_20A778EF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyContentRatingLevel(void)::$_0 &&>>()
{
  uint64_t v0;
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  mlcore::ItemExtraTable **v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  std::string *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  std::string *v19;
  __int128 v20;
  std::string v21;
  std::string __p;
  char v23;
  _QWORD v24[2];

  v0 = operator new();
  v1 = (_QWORD *)mediaplatform::Singleton<mlcore::ItemExtraTable>::sharedInstance();
  v2 = (std::__shared_weak_count *)v1[1];
  v24[0] = *v1;
  v24[1] = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  v5 = (mlcore::ItemExtraTable **)mediaplatform::Singleton<mlcore::ItemExtraTable>::sharedInstance();
  mlcore::ItemExtraTable::contentRatingLevelColumn(*v5, (uint64_t)&__p);
  mlcore::DatabaseModelProperty<int>::DatabaseModelProperty(v0, v24, (uint64_t)&__p);
  mlcore::ItemPropertyContentRatingLevel(void)::property = v0;
  if (v23 < 0)
    operator delete((void *)__p.__r_.__value_.__l.__size_);
  if (v2)
  {
    v6 = (unint64_t *)&v2->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v8 = mlcore::ItemPropertyContentRatingLevel(void)::property;
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  std::string::operator=((std::string *)(v8 + 40), &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v9 = mlcore::TypedEntityClass<mlcore::Item>::sharedPointer();
  v10 = mlcore::ItemPropertyContentRatingLevel(void)::property;
  v11 = mediaplatform::Singleton<mlcore::ItemExtraTable>::sharedInstance();
  v12 = *(_QWORD *)v11;
  if (*(char *)(*(_QWORD *)v11 + 31) >= 0)
    v13 = *(unsigned __int8 *)(*(_QWORD *)v11 + 31);
  else
    v13 = *(_QWORD *)(*(_QWORD *)v11 + 16);
  v14 = &v21;
  std::string::basic_string[abi:ne180100]((uint64_t)&v21, v13 + 1);
  if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v14 = (std::string *)v21.__r_.__value_.__r.__words[0];
  if (v13)
  {
    v17 = *(char **)(v12 + 8);
    v16 = (char *)(v12 + 8);
    v15 = v17;
    if (v16[23] >= 0)
      v18 = v16;
    else
      v18 = v15;
    memmove(v14, v18, v13);
  }
  *(_WORD *)((char *)&v14->__r_.__value_.__l.__data_ + v13) = 46;
  v19 = std::string::append(&v21, "contentRatingLevel");
  v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  __p.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  mlcore::EntityClass::setPropertyForName(v9, v10, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
}

void sub_20A779180(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

uint64_t mlcore::ItemPropertyDownloadIdentifier(mlcore *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&mlcore::ItemPropertyDownloadIdentifier(void)::once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&mlcore::ItemPropertyDownloadIdentifier(void)::once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyDownloadIdentifier(void)::$_0 &&>>);
  }
  return mlcore::ItemPropertyDownloadIdentifier(void)::property;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyDownloadIdentifier(void)::$_0 &&>>()
{
  uint64_t v0;
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  mlcore::ItemStatsTable **v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  std::string *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  std::string *v19;
  __int128 v20;
  std::string v21;
  std::string __str;
  _QWORD v23[2];

  v0 = operator new();
  v1 = (_QWORD *)mediaplatform::Singleton<mlcore::ItemStatsTable>::sharedInstance();
  v2 = (std::__shared_weak_count *)v1[1];
  v23[0] = *v1;
  v23[1] = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  v5 = (mlcore::ItemStatsTable **)mediaplatform::Singleton<mlcore::ItemStatsTable>::sharedInstance();
  mlcore::ItemStatsTable::downloadIdentifierColumn(*v5, (uint64_t)&__str);
  mlcore::DatabaseModelProperty<std::string>::DatabaseModelProperty(v0, v23, (uint64_t)&__str);
  mlcore::ItemPropertyDownloadIdentifier(void)::property = v0;
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&__str);
  if (v2)
  {
    v6 = (unint64_t *)&v2->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v8 = mlcore::ItemPropertyDownloadIdentifier(void)::property;
  std::string::basic_string[abi:ne180100]<0>(&__str, "");
  std::string::operator=((std::string *)(v8 + 40), &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  v9 = mlcore::TypedEntityClass<mlcore::Item>::sharedPointer();
  v10 = mlcore::ItemPropertyDownloadIdentifier(void)::property;
  v11 = mediaplatform::Singleton<mlcore::ItemStatsTable>::sharedInstance();
  v12 = *(_QWORD *)v11;
  if (*(char *)(*(_QWORD *)v11 + 31) >= 0)
    v13 = *(unsigned __int8 *)(*(_QWORD *)v11 + 31);
  else
    v13 = *(_QWORD *)(*(_QWORD *)v11 + 16);
  v14 = &v21;
  std::string::basic_string[abi:ne180100]((uint64_t)&v21, v13 + 1);
  if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v14 = (std::string *)v21.__r_.__value_.__r.__words[0];
  if (v13)
  {
    v17 = *(char **)(v12 + 8);
    v16 = (char *)(v12 + 8);
    v15 = v17;
    if (v16[23] >= 0)
      v18 = v16;
    else
      v18 = v15;
    memmove(v14, v18, v13);
  }
  *(_WORD *)((char *)&v14->__r_.__value_.__l.__data_ + v13) = 46;
  v19 = std::string::append(&v21, "downloadIdentifier");
  v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  __str.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  mlcore::EntityClass::setPropertyForName(v9, v10, &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
}

void sub_20A779464(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyIsExplicit(void)::$_0 &&>>()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  std::__shared_weak_count *v3;
  unint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  std::string __str;

  v0 = operator new();
  v1 = mlcore::ItemPropertyContentRating((mlcore *)v0);
  v2 = (char *)operator new(0x48uLL);
  v3 = (std::__shared_weak_count *)v2;
  *(_OWORD *)(v2 + 8) = 0u;
  v4 = (unint64_t *)(v2 + 8);
  *(_QWORD *)v2 = &off_24C33CE50;
  *((_QWORD *)v2 + 4) = v1;
  *((_QWORD *)v2 + 5) = 0;
  *((_QWORD *)v2 + 3) = &unk_24C339C50;
  *((_DWORD *)v2 + 12) = 1;
  *(_OWORD *)(v2 + 56) = 0u;
  *(_OWORD *)(v0 + 16) = 0u;
  *(_OWORD *)(v0 + 32) = 0u;
  *(_OWORD *)(v0 + 48) = 0u;
  *(_QWORD *)v0 = &off_24C3398B8;
  *(_QWORD *)(v0 + 64) = v2 + 24;
  *(_QWORD *)(v0 + 72) = v2;
  do
    v5 = __ldxr(v4);
  while (__stxr(v5 + 1, v4));
  mlcore::ItemPropertyIsExplicit(void)::property = v0;
  do
    v6 = __ldaxr(v4);
  while (__stlxr(v6 - 1, v4));
  if (!v6)
  {
    (*(void (**)(char *))(*(_QWORD *)v2 + 16))(v2);
    std::__shared_weak_count::__release_weak(v3);
  }
  v7 = mlcore::ItemPropertyIsExplicit(void)::property;
  std::string::basic_string[abi:ne180100]<0>(&__str, "is_explicit");
  std::string::operator=((std::string *)(v7 + 40), &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  v8 = mlcore::TypedEntityClass<mlcore::Item>::sharedPointer();
  v9 = mlcore::ItemPropertyIsExplicit(void)::property;
  std::string::basic_string[abi:ne180100]<0>(&__str, "isExplicit");
  mlcore::EntityClass::setPropertyForName(v8, v9, &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
}

void sub_20A779674(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyDiscNumber(void)::$_0 &&>>()
{
  uint64_t v0;
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  mlcore::ItemTable **v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  std::string *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  std::string *v19;
  __int128 v20;
  std::string v21;
  std::string __p;
  char v23;
  _QWORD v24[2];

  v0 = operator new();
  v1 = (_QWORD *)mediaplatform::Singleton<mlcore::ItemTable>::sharedInstance();
  v2 = (std::__shared_weak_count *)v1[1];
  v24[0] = *v1;
  v24[1] = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  v5 = (mlcore::ItemTable **)mediaplatform::Singleton<mlcore::ItemTable>::sharedInstance();
  mlcore::ItemTable::discNumberColumn(*v5, (uint64_t)&__p);
  mlcore::DatabaseModelProperty<int>::DatabaseModelProperty(v0, v24, (uint64_t)&__p);
  mlcore::ItemPropertyDiscNumber(void)::property = v0;
  if (v23 < 0)
    operator delete((void *)__p.__r_.__value_.__l.__size_);
  if (v2)
  {
    v6 = (unint64_t *)&v2->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v8 = mlcore::ItemPropertyDiscNumber(void)::property;
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  std::string::operator=((std::string *)(v8 + 40), &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v9 = mlcore::TypedEntityClass<mlcore::Item>::sharedPointer();
  v10 = mlcore::ItemPropertyDiscNumber(void)::property;
  v11 = mediaplatform::Singleton<mlcore::ItemTable>::sharedInstance();
  v12 = *(_QWORD *)v11;
  if (*(char *)(*(_QWORD *)v11 + 31) >= 0)
    v13 = *(unsigned __int8 *)(*(_QWORD *)v11 + 31);
  else
    v13 = *(_QWORD *)(*(_QWORD *)v11 + 16);
  v14 = &v21;
  std::string::basic_string[abi:ne180100]((uint64_t)&v21, v13 + 1);
  if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v14 = (std::string *)v21.__r_.__value_.__r.__words[0];
  if (v13)
  {
    v17 = *(char **)(v12 + 8);
    v16 = (char *)(v12 + 8);
    v15 = v17;
    if (v16[23] >= 0)
      v18 = v16;
    else
      v18 = v15;
    memmove(v14, v18, v13);
  }
  *(_WORD *)((char *)&v14->__r_.__value_.__l.__data_ + v13) = 46;
  v19 = std::string::append(&v21, "discNumber");
  v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  __p.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  mlcore::EntityClass::setPropertyForName(v9, v10, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
}

void sub_20A77988C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyTrackNumber(void)::$_0 &&>>()
{
  uint64_t v0;
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  mlcore::ItemTable **v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  std::string *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  std::string *v19;
  __int128 v20;
  std::string v21;
  std::string __p;
  char v23;
  _QWORD v24[2];

  v0 = operator new();
  v1 = (_QWORD *)mediaplatform::Singleton<mlcore::ItemTable>::sharedInstance();
  v2 = (std::__shared_weak_count *)v1[1];
  v24[0] = *v1;
  v24[1] = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  v5 = (mlcore::ItemTable **)mediaplatform::Singleton<mlcore::ItemTable>::sharedInstance();
  mlcore::ItemTable::trackNumberColumn(*v5, (uint64_t)&__p);
  mlcore::DatabaseModelProperty<int>::DatabaseModelProperty(v0, v24, (uint64_t)&__p);
  mlcore::ItemPropertyTrackNumber(void)::property = v0;
  if (v23 < 0)
    operator delete((void *)__p.__r_.__value_.__l.__size_);
  if (v2)
  {
    v6 = (unint64_t *)&v2->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v8 = mlcore::ItemPropertyTrackNumber(void)::property;
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  std::string::operator=((std::string *)(v8 + 40), &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v9 = mlcore::TypedEntityClass<mlcore::Item>::sharedPointer();
  v10 = mlcore::ItemPropertyTrackNumber(void)::property;
  v11 = mediaplatform::Singleton<mlcore::ItemTable>::sharedInstance();
  v12 = *(_QWORD *)v11;
  if (*(char *)(*(_QWORD *)v11 + 31) >= 0)
    v13 = *(unsigned __int8 *)(*(_QWORD *)v11 + 31);
  else
    v13 = *(_QWORD *)(*(_QWORD *)v11 + 16);
  v14 = &v21;
  std::string::basic_string[abi:ne180100]((uint64_t)&v21, v13 + 1);
  if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v14 = (std::string *)v21.__r_.__value_.__r.__words[0];
  if (v13)
  {
    v17 = *(char **)(v12 + 8);
    v16 = (char *)(v12 + 8);
    v15 = v17;
    if (v16[23] >= 0)
      v18 = v16;
    else
      v18 = v15;
    memmove(v14, v18, v13);
  }
  *(_WORD *)((char *)&v14->__r_.__value_.__l.__data_ + v13) = 46;
  v19 = std::string::append(&v21, "trackNumber");
  v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  __p.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  mlcore::EntityClass::setPropertyForName(v9, v10, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
}

void sub_20A779B1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyHasTrackNumber(void)::$_0 &&>>()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  std::__shared_weak_count *v3;
  unint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  std::string __str;

  v0 = operator new();
  v1 = mlcore::ItemPropertyTrackNumber((mlcore *)v0);
  v2 = (char *)operator new(0x48uLL);
  v3 = (std::__shared_weak_count *)v2;
  *(_OWORD *)(v2 + 8) = 0u;
  v4 = (unint64_t *)(v2 + 8);
  *(_QWORD *)v2 = &off_24C33CE50;
  *((_QWORD *)v2 + 4) = v1;
  *((_QWORD *)v2 + 5) = 0x100000000;
  *((_QWORD *)v2 + 3) = &unk_24C339C50;
  *((_DWORD *)v2 + 12) = 0;
  *(_OWORD *)(v2 + 56) = 0u;
  *(_OWORD *)(v0 + 16) = 0u;
  *(_OWORD *)(v0 + 32) = 0u;
  *(_OWORD *)(v0 + 48) = 0u;
  *(_QWORD *)v0 = &off_24C3398B8;
  *(_QWORD *)(v0 + 64) = v2 + 24;
  *(_QWORD *)(v0 + 72) = v2;
  do
    v5 = __ldxr(v4);
  while (__stxr(v5 + 1, v4));
  mlcore::ItemPropertyHasTrackNumber(void)::property = v0;
  do
    v6 = __ldaxr(v4);
  while (__stlxr(v6 - 1, v4));
  if (!v6)
  {
    (*(void (**)(char *))(*(_QWORD *)v2 + 16))(v2);
    std::__shared_weak_count::__release_weak(v3);
  }
  v7 = mlcore::ItemPropertyHasTrackNumber(void)::property;
  std::string::basic_string[abi:ne180100]<0>(&__str, "has_track_number");
  std::string::operator=((std::string *)(v7 + 40), &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  v8 = mlcore::TypedEntityClass<mlcore::Item>::sharedPointer();
  v9 = mlcore::ItemPropertyHasTrackNumber(void)::property;
  std::string::basic_string[abi:ne180100]<0>(&__str, "hasTrackNumber");
  mlcore::EntityClass::setPropertyForName(v8, v9, &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
}

void sub_20A779D3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t mlcore::ItemPropertySeasonNumber(mlcore *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&mlcore::ItemPropertySeasonNumber(void)::once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&mlcore::ItemPropertySeasonNumber(void)::once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertySeasonNumber(void)::$_0 &&>>);
  }
  return mlcore::ItemPropertySeasonNumber(void)::property;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertySeasonNumber(void)::$_0 &&>>()
{
  uint64_t v0;
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  mlcore::ItemVideoTable **v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  std::string *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  std::string *v19;
  __int128 v20;
  std::string v21;
  std::string __p;
  char v23;
  _QWORD v24[2];

  v0 = operator new();
  v1 = (_QWORD *)mediaplatform::Singleton<mlcore::ItemVideoTable>::sharedInstance();
  v2 = (std::__shared_weak_count *)v1[1];
  v24[0] = *v1;
  v24[1] = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  v5 = (mlcore::ItemVideoTable **)mediaplatform::Singleton<mlcore::ItemVideoTable>::sharedInstance();
  mlcore::ItemVideoTable::seasonNumberColumn(*v5, (uint64_t)&__p);
  mlcore::DatabaseModelProperty<int>::DatabaseModelProperty(v0, v24, (uint64_t)&__p);
  mlcore::ItemPropertySeasonNumber(void)::property = v0;
  if (v23 < 0)
    operator delete((void *)__p.__r_.__value_.__l.__size_);
  if (v2)
  {
    v6 = (unint64_t *)&v2->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v8 = mlcore::ItemPropertySeasonNumber(void)::property;
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  std::string::operator=((std::string *)(v8 + 40), &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v9 = mlcore::TypedEntityClass<mlcore::Item>::sharedPointer();
  v10 = mlcore::ItemPropertySeasonNumber(void)::property;
  v11 = mediaplatform::Singleton<mlcore::ItemVideoTable>::sharedInstance();
  v12 = *(_QWORD *)v11;
  if (*(char *)(*(_QWORD *)v11 + 31) >= 0)
    v13 = *(unsigned __int8 *)(*(_QWORD *)v11 + 31);
  else
    v13 = *(_QWORD *)(*(_QWORD *)v11 + 16);
  v14 = &v21;
  std::string::basic_string[abi:ne180100]((uint64_t)&v21, v13 + 1);
  if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v14 = (std::string *)v21.__r_.__value_.__r.__words[0];
  if (v13)
  {
    v17 = *(char **)(v12 + 8);
    v16 = (char *)(v12 + 8);
    v15 = v17;
    if (v16[23] >= 0)
      v18 = v16;
    else
      v18 = v15;
    memmove(v14, v18, v13);
  }
  *(_WORD *)((char *)&v14->__r_.__value_.__l.__data_ + v13) = 46;
  v19 = std::string::append(&v21, "seasonNumber");
  v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  __p.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  mlcore::EntityClass::setPropertyForName(v9, v10, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
}

void sub_20A779FB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

uint64_t _ZNSt3__115allocate_sharedB8ne180100IN6mlcore14ItemVideoTableENS_9allocatorIS2_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(uint64_t *a1)
{
  _QWORD *v2;
  uint64_t result;

  v2 = operator new(0x1088uLL);
  v2[1] = 0;
  v2[2] = 0;
  *v2 = &off_24C33C910;
  result = mlcore::ItemVideoTable::ItemVideoTable((mlcore::ItemVideoTable *)(v2 + 3));
  *a1 = result;
  a1[1] = (uint64_t)v2;
  return result;
}

void sub_20A77A0AC(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<mlcore::ItemVideoTable>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C33C910;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<mlcore::ItemVideoTable>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C33C910;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x20BD27AFCLL);
}

uint64_t std::__shared_ptr_emplace<mlcore::ItemVideoTable>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyYear(void)::$_0 &&>>()
{
  uint64_t v0;
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  mlcore::ItemExtraTable **v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  std::string *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  std::string *v19;
  __int128 v20;
  std::string v21;
  std::string __p;
  char v23;
  _QWORD v24[2];

  v0 = operator new();
  v1 = (_QWORD *)mediaplatform::Singleton<mlcore::ItemExtraTable>::sharedInstance();
  v2 = (std::__shared_weak_count *)v1[1];
  v24[0] = *v1;
  v24[1] = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  v5 = (mlcore::ItemExtraTable **)mediaplatform::Singleton<mlcore::ItemExtraTable>::sharedInstance();
  mlcore::ItemExtraTable::yearColumn(*v5, (uint64_t)&__p);
  mlcore::DatabaseModelProperty<int>::DatabaseModelProperty(v0, v24, (uint64_t)&__p);
  mlcore::ItemPropertyYear(void)::property = v0;
  if (v23 < 0)
    operator delete((void *)__p.__r_.__value_.__l.__size_);
  if (v2)
  {
    v6 = (unint64_t *)&v2->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v8 = mlcore::ItemPropertyYear(void)::property;
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  std::string::operator=((std::string *)(v8 + 40), &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v9 = mlcore::TypedEntityClass<mlcore::Item>::sharedPointer();
  v10 = mlcore::ItemPropertyYear(void)::property;
  v11 = mediaplatform::Singleton<mlcore::ItemExtraTable>::sharedInstance();
  v12 = *(_QWORD *)v11;
  if (*(char *)(*(_QWORD *)v11 + 31) >= 0)
    v13 = *(unsigned __int8 *)(*(_QWORD *)v11 + 31);
  else
    v13 = *(_QWORD *)(*(_QWORD *)v11 + 16);
  v14 = &v21;
  std::string::basic_string[abi:ne180100]((uint64_t)&v21, v13 + 1);
  if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v14 = (std::string *)v21.__r_.__value_.__r.__words[0];
  if (v13)
  {
    v17 = *(char **)(v12 + 8);
    v16 = (char *)(v12 + 8);
    v15 = v17;
    if (v16[23] >= 0)
      v18 = v16;
    else
      v18 = v15;
    memmove(v14, v18, v13);
  }
  *(_WORD *)((char *)&v14->__r_.__value_.__l.__data_ + v13) = 46;
  v19 = std::string::append(&v21, "year");
  v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  __p.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  mlcore::EntityClass::setPropertyForName(v9, v10, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
}

void sub_20A77A2E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertySkipCountUser(void)::$_0 &&>>()
{
  uint64_t v0;
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  mlcore::ItemStatsTable **v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  std::string *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  std::string *v19;
  __int128 v20;
  std::string v21;
  std::string __p;
  char v23;
  _QWORD v24[2];

  v0 = operator new();
  v1 = (_QWORD *)mediaplatform::Singleton<mlcore::ItemStatsTable>::sharedInstance();
  v2 = (std::__shared_weak_count *)v1[1];
  v24[0] = *v1;
  v24[1] = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  v5 = (mlcore::ItemStatsTable **)mediaplatform::Singleton<mlcore::ItemStatsTable>::sharedInstance();
  mlcore::ItemStatsTable::skipCountUserColumn(*v5, (uint64_t)&__p);
  mlcore::DatabaseModelProperty<int>::DatabaseModelProperty(v0, v24, (uint64_t)&__p);
  mlcore::ItemPropertySkipCountUser(void)::property = v0;
  if (v23 < 0)
    operator delete((void *)__p.__r_.__value_.__l.__size_);
  if (v2)
  {
    v6 = (unint64_t *)&v2->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v8 = mlcore::ItemPropertySkipCountUser(void)::property;
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  std::string::operator=((std::string *)(v8 + 40), &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v9 = mlcore::TypedEntityClass<mlcore::Item>::sharedPointer();
  v10 = mlcore::ItemPropertySkipCountUser(void)::property;
  v11 = mediaplatform::Singleton<mlcore::ItemStatsTable>::sharedInstance();
  v12 = *(_QWORD *)v11;
  if (*(char *)(*(_QWORD *)v11 + 31) >= 0)
    v13 = *(unsigned __int8 *)(*(_QWORD *)v11 + 31);
  else
    v13 = *(_QWORD *)(*(_QWORD *)v11 + 16);
  v14 = &v21;
  std::string::basic_string[abi:ne180100]((uint64_t)&v21, v13 + 1);
  if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v14 = (std::string *)v21.__r_.__value_.__r.__words[0];
  if (v13)
  {
    v17 = *(char **)(v12 + 8);
    v16 = (char *)(v12 + 8);
    v15 = v17;
    if (v16[23] >= 0)
      v18 = v16;
    else
      v18 = v15;
    memmove(v14, v18, v13);
  }
  *(_WORD *)((char *)&v14->__r_.__value_.__l.__data_ + v13) = 46;
  v19 = std::string::append(&v21, "skipCountUser");
  v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  __p.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  mlcore::EntityClass::setPropertyForName(v9, v10, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
}

void sub_20A77A578(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

uint64_t mlcore::ItemPropertySkipCountRecent(mlcore *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&mlcore::ItemPropertySkipCountRecent(void)::once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&mlcore::ItemPropertySkipCountRecent(void)::once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertySkipCountRecent(void)::$_0 &&>>);
  }
  return mlcore::ItemPropertySkipCountRecent(void)::property;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertySkipCountRecent(void)::$_0 &&>>()
{
  uint64_t v0;
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  mlcore::ItemStatsTable **v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  std::string *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  std::string *v19;
  __int128 v20;
  std::string v21;
  std::string __p;
  char v23;
  _QWORD v24[2];

  v0 = operator new();
  v1 = (_QWORD *)mediaplatform::Singleton<mlcore::ItemStatsTable>::sharedInstance();
  v2 = (std::__shared_weak_count *)v1[1];
  v24[0] = *v1;
  v24[1] = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  v5 = (mlcore::ItemStatsTable **)mediaplatform::Singleton<mlcore::ItemStatsTable>::sharedInstance();
  mlcore::ItemStatsTable::skipCountRecentColumn(*v5, (uint64_t)&__p);
  mlcore::DatabaseModelProperty<int>::DatabaseModelProperty(v0, v24, (uint64_t)&__p);
  mlcore::ItemPropertySkipCountRecent(void)::property = v0;
  if (v23 < 0)
    operator delete((void *)__p.__r_.__value_.__l.__size_);
  if (v2)
  {
    v6 = (unint64_t *)&v2->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v8 = mlcore::ItemPropertySkipCountRecent(void)::property;
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  std::string::operator=((std::string *)(v8 + 40), &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v9 = mlcore::TypedEntityClass<mlcore::Item>::sharedPointer();
  v10 = mlcore::ItemPropertySkipCountRecent(void)::property;
  v11 = mediaplatform::Singleton<mlcore::ItemStatsTable>::sharedInstance();
  v12 = *(_QWORD *)v11;
  if (*(char *)(*(_QWORD *)v11 + 31) >= 0)
    v13 = *(unsigned __int8 *)(*(_QWORD *)v11 + 31);
  else
    v13 = *(_QWORD *)(*(_QWORD *)v11 + 16);
  v14 = &v21;
  std::string::basic_string[abi:ne180100]((uint64_t)&v21, v13 + 1);
  if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v14 = (std::string *)v21.__r_.__value_.__r.__words[0];
  if (v13)
  {
    v17 = *(char **)(v12 + 8);
    v16 = (char *)(v12 + 8);
    v15 = v17;
    if (v16[23] >= 0)
      v18 = v16;
    else
      v18 = v15;
    memmove(v14, v18, v13);
  }
  *(_WORD *)((char *)&v14->__r_.__value_.__l.__data_ + v13) = 46;
  v19 = std::string::append(&v21, "skipCountRecent");
  v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  __p.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  mlcore::EntityClass::setPropertyForName(v9, v10, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
}

void sub_20A77A864(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyVolumeNormalization(void)::$_0 &&>>()
{
  uint64_t v0;
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  mlcore::ItemPlaybackTable **v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  std::string *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  std::string *v19;
  __int128 v20;
  std::string v21;
  std::string __p;
  char v23;
  _QWORD v24[2];

  v0 = operator new();
  v1 = (_QWORD *)mediaplatform::Singleton<mlcore::ItemPlaybackTable>::sharedInstance();
  v2 = (std::__shared_weak_count *)v1[1];
  v24[0] = *v1;
  v24[1] = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  v5 = (mlcore::ItemPlaybackTable **)mediaplatform::Singleton<mlcore::ItemPlaybackTable>::sharedInstance();
  mlcore::ItemPlaybackTable::volumeNormalizationEnergyColumn(*v5, (uint64_t)&__p);
  mlcore::DatabaseModelProperty<int>::DatabaseModelProperty(v0, v24, (uint64_t)&__p);
  mlcore::ItemPropertyVolumeNormalization(void)::property = v0;
  if (v23 < 0)
    operator delete((void *)__p.__r_.__value_.__l.__size_);
  if (v2)
  {
    v6 = (unint64_t *)&v2->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v8 = mlcore::ItemPropertyVolumeNormalization(void)::property;
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  std::string::operator=((std::string *)(v8 + 40), &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v9 = mlcore::TypedEntityClass<mlcore::Item>::sharedPointer();
  v10 = mlcore::ItemPropertyVolumeNormalization(void)::property;
  v11 = mediaplatform::Singleton<mlcore::ItemPlaybackTable>::sharedInstance();
  v12 = *(_QWORD *)v11;
  if (*(char *)(*(_QWORD *)v11 + 31) >= 0)
    v13 = *(unsigned __int8 *)(*(_QWORD *)v11 + 31);
  else
    v13 = *(_QWORD *)(*(_QWORD *)v11 + 16);
  v14 = &v21;
  std::string::basic_string[abi:ne180100]((uint64_t)&v21, v13 + 1);
  if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v14 = (std::string *)v21.__r_.__value_.__r.__words[0];
  if (v13)
  {
    v17 = *(char **)(v12 + 8);
    v16 = (char *)(v12 + 8);
    v15 = v17;
    if (v16[23] >= 0)
      v18 = v16;
    else
      v18 = v15;
    memmove(v14, v18, v13);
  }
  *(_WORD *)((char *)&v14->__r_.__value_.__l.__data_ + v13) = 46;
  v19 = std::string::append(&v21, "volumeNormalization");
  v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  __p.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  mlcore::EntityClass::setPropertyForName(v9, v10, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
}

void sub_20A77AAF4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

uint64_t mlcore::ItemPropertyCategoryID(mlcore *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&mlcore::ItemPropertyCategoryID(void)::once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&mlcore::ItemPropertyCategoryID(void)::once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyCategoryID(void)::$_0 &&>>);
  }
  return mlcore::ItemPropertyCategoryID(void)::property;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyCategoryID(void)::$_0 &&>>()
{
  uint64_t v0;
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  mlcore::ItemExtraTable **v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  std::string *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  std::string *v19;
  __int128 v20;
  std::string v21;
  std::string __p;
  char v23;
  _QWORD v24[2];

  v0 = operator new();
  v1 = (_QWORD *)mediaplatform::Singleton<mlcore::ItemExtraTable>::sharedInstance();
  v2 = (std::__shared_weak_count *)v1[1];
  v24[0] = *v1;
  v24[1] = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  v5 = (mlcore::ItemExtraTable **)mediaplatform::Singleton<mlcore::ItemExtraTable>::sharedInstance();
  mlcore::ItemExtraTable::categoryIDColumn(*v5, (uint64_t)&__p);
  mlcore::DatabaseModelProperty<long long>::DatabaseModelProperty(v0, v24, (uint64_t)&__p);
  mlcore::ItemPropertyCategoryID(void)::property = v0;
  if (v23 < 0)
    operator delete((void *)__p.__r_.__value_.__l.__size_);
  if (v2)
  {
    v6 = (unint64_t *)&v2->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v8 = mlcore::ItemPropertyCategoryID(void)::property;
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  std::string::operator=((std::string *)(v8 + 40), &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v9 = mlcore::TypedEntityClass<mlcore::Item>::sharedPointer();
  v10 = mlcore::ItemPropertyCategoryID(void)::property;
  v11 = mediaplatform::Singleton<mlcore::ItemExtraTable>::sharedInstance();
  v12 = *(_QWORD *)v11;
  if (*(char *)(*(_QWORD *)v11 + 31) >= 0)
    v13 = *(unsigned __int8 *)(*(_QWORD *)v11 + 31);
  else
    v13 = *(_QWORD *)(*(_QWORD *)v11 + 16);
  v14 = &v21;
  std::string::basic_string[abi:ne180100]((uint64_t)&v21, v13 + 1);
  if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v14 = (std::string *)v21.__r_.__value_.__r.__words[0];
  if (v13)
  {
    v17 = *(char **)(v12 + 8);
    v16 = (char *)(v12 + 8);
    v15 = v17;
    if (v16[23] >= 0)
      v18 = v16;
    else
      v18 = v15;
    memmove(v14, v18, v13);
  }
  *(_WORD *)((char *)&v14->__r_.__value_.__l.__data_ + v13) = 46;
  v19 = std::string::append(&v21, "categoryID");
  v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  __p.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  mlcore::EntityClass::setPropertyForName(v9, v10, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
}

void sub_20A77ADE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyBPM(void)::$_0 &&>>()
{
  uint64_t v0;
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  mlcore::ItemExtraTable **v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  std::string *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  std::string *v19;
  __int128 v20;
  std::string v21;
  std::string __p;
  char v23;
  _QWORD v24[2];

  v0 = operator new();
  v1 = (_QWORD *)mediaplatform::Singleton<mlcore::ItemExtraTable>::sharedInstance();
  v2 = (std::__shared_weak_count *)v1[1];
  v24[0] = *v1;
  v24[1] = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  v5 = (mlcore::ItemExtraTable **)mediaplatform::Singleton<mlcore::ItemExtraTable>::sharedInstance();
  mlcore::ItemExtraTable::BPMColumn(*v5, (uint64_t)&__p);
  mlcore::DatabaseModelProperty<int>::DatabaseModelProperty(v0, v24, (uint64_t)&__p);
  mlcore::ItemPropertyBPM(void)::property = v0;
  if (v23 < 0)
    operator delete((void *)__p.__r_.__value_.__l.__size_);
  if (v2)
  {
    v6 = (unint64_t *)&v2->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v8 = mlcore::ItemPropertyBPM(void)::property;
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  std::string::operator=((std::string *)(v8 + 40), &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v9 = mlcore::TypedEntityClass<mlcore::Item>::sharedPointer();
  v10 = mlcore::ItemPropertyBPM(void)::property;
  v11 = mediaplatform::Singleton<mlcore::ItemExtraTable>::sharedInstance();
  v12 = *(_QWORD *)v11;
  if (*(char *)(*(_QWORD *)v11 + 31) >= 0)
    v13 = *(unsigned __int8 *)(*(_QWORD *)v11 + 31);
  else
    v13 = *(_QWORD *)(*(_QWORD *)v11 + 16);
  v14 = &v21;
  std::string::basic_string[abi:ne180100]((uint64_t)&v21, v13 + 1);
  if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v14 = (std::string *)v21.__r_.__value_.__r.__words[0];
  if (v13)
  {
    v17 = *(char **)(v12 + 8);
    v16 = (char *)(v12 + 8);
    v15 = v17;
    if (v16[23] >= 0)
      v18 = v16;
    else
      v18 = v15;
    memmove(v14, v18, v13);
  }
  *(_WORD *)((char *)&v14->__r_.__value_.__l.__data_ + v13) = 46;
  v19 = std::string::append(&v21, "BPM");
  v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  __p.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  mlcore::EntityClass::setPropertyForName(v9, v10, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
}

void sub_20A77B070(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

uint64_t mlcore::ItemPropertyIsCompilation(mlcore *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&mlcore::ItemPropertyIsCompilation(void)::once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&mlcore::ItemPropertyIsCompilation(void)::once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyIsCompilation(void)::$_0 &&>>);
  }
  return mlcore::ItemPropertyIsCompilation(void)::property;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyIsCompilation(void)::$_0 &&>>()
{
  uint64_t v0;
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  mlcore::ItemTable **v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  std::string *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  std::string *v19;
  __int128 v20;
  std::string v21;
  std::string __p;
  char v23;
  _QWORD v24[2];

  v0 = operator new();
  v1 = (_QWORD *)mediaplatform::Singleton<mlcore::ItemTable>::sharedInstance();
  v2 = (std::__shared_weak_count *)v1[1];
  v24[0] = *v1;
  v24[1] = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  v5 = (mlcore::ItemTable **)mediaplatform::Singleton<mlcore::ItemTable>::sharedInstance();
  mlcore::ItemTable::isCompilationColumn(*v5, (uint64_t)&__p);
  mlcore::DatabaseModelProperty<int>::DatabaseModelProperty(v0, v24, (uint64_t)&__p);
  mlcore::ItemPropertyIsCompilation(void)::property = v0;
  if (v23 < 0)
    operator delete((void *)__p.__r_.__value_.__l.__size_);
  if (v2)
  {
    v6 = (unint64_t *)&v2->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v8 = mlcore::ItemPropertyIsCompilation(void)::property;
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  std::string::operator=((std::string *)(v8 + 40), &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v9 = mlcore::TypedEntityClass<mlcore::Item>::sharedPointer();
  v10 = mlcore::ItemPropertyIsCompilation(void)::property;
  v11 = mediaplatform::Singleton<mlcore::ItemTable>::sharedInstance();
  v12 = *(_QWORD *)v11;
  if (*(char *)(*(_QWORD *)v11 + 31) >= 0)
    v13 = *(unsigned __int8 *)(*(_QWORD *)v11 + 31);
  else
    v13 = *(_QWORD *)(*(_QWORD *)v11 + 16);
  v14 = &v21;
  std::string::basic_string[abi:ne180100]((uint64_t)&v21, v13 + 1);
  if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v14 = (std::string *)v21.__r_.__value_.__r.__words[0];
  if (v13)
  {
    v17 = *(char **)(v12 + 8);
    v16 = (char *)(v12 + 8);
    v15 = v17;
    if (v16[23] >= 0)
      v18 = v16;
    else
      v18 = v15;
    memmove(v14, v18, v13);
  }
  *(_WORD *)((char *)&v14->__r_.__value_.__l.__data_ + v13) = 46;
  v19 = std::string::append(&v21, "isCompilation");
  v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  __p.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  mlcore::EntityClass::setPropertyForName(v9, v10, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
}

void sub_20A77B35C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyDateReleased(void)::$_0 &&>>()
{
  uint64_t v0;
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  mlcore::ItemStoreTable **v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  std::string *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  std::string *v19;
  __int128 v20;
  std::string v21;
  std::string __p;
  char v23;
  _QWORD v24[2];

  v0 = operator new();
  v1 = (_QWORD *)mediaplatform::Singleton<mlcore::ItemStoreTable>::sharedInstance();
  v2 = (std::__shared_weak_count *)v1[1];
  v24[0] = *v1;
  v24[1] = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  v5 = (mlcore::ItemStoreTable **)mediaplatform::Singleton<mlcore::ItemStoreTable>::sharedInstance();
  mlcore::ItemStoreTable::dateReleasedColumn(*v5, (uint64_t)&__p);
  mlcore::DatabaseModelProperty<long long>::DatabaseModelProperty(v0, v24, (uint64_t)&__p);
  mlcore::ItemPropertyDateReleased(void)::property = v0;
  if (v23 < 0)
    operator delete((void *)__p.__r_.__value_.__l.__size_);
  if (v2)
  {
    v6 = (unint64_t *)&v2->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v8 = mlcore::ItemPropertyDateReleased(void)::property;
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  std::string::operator=((std::string *)(v8 + 40), &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v9 = mlcore::TypedEntityClass<mlcore::Item>::sharedPointer();
  v10 = mlcore::ItemPropertyDateReleased(void)::property;
  v11 = mediaplatform::Singleton<mlcore::ItemStoreTable>::sharedInstance();
  v12 = *(_QWORD *)v11;
  if (*(char *)(*(_QWORD *)v11 + 31) >= 0)
    v13 = *(unsigned __int8 *)(*(_QWORD *)v11 + 31);
  else
    v13 = *(_QWORD *)(*(_QWORD *)v11 + 16);
  v14 = &v21;
  std::string::basic_string[abi:ne180100]((uint64_t)&v21, v13 + 1);
  if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v14 = (std::string *)v21.__r_.__value_.__r.__words[0];
  if (v13)
  {
    v17 = *(char **)(v12 + 8);
    v16 = (char *)(v12 + 8);
    v15 = v17;
    if (v16[23] >= 0)
      v18 = v16;
    else
      v18 = v15;
    memmove(v14, v18, v13);
  }
  *(_WORD *)((char *)&v14->__r_.__value_.__l.__data_ + v13) = 46;
  v19 = std::string::append(&v21, "dateReleased");
  v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  __p.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  mlcore::EntityClass::setPropertyForName(v9, v10, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
}

void sub_20A77B5EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

uint64_t mlcore::ItemPropertyFeedURL(mlcore *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&mlcore::ItemPropertyFeedURL(void)::once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&mlcore::ItemPropertyFeedURL(void)::once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyFeedURL(void)::$_0 &&>>);
  }
  return mlcore::ItemPropertyFeedURL(void)::property;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyFeedURL(void)::$_0 &&>>()
{
  uint64_t v0;
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  mlcore::ItemStoreTable **v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  std::string *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  std::string *v19;
  __int128 v20;
  std::string v21;
  std::string __str;
  _QWORD v23[2];

  v0 = operator new();
  v1 = (_QWORD *)mediaplatform::Singleton<mlcore::ItemStoreTable>::sharedInstance();
  v2 = (std::__shared_weak_count *)v1[1];
  v23[0] = *v1;
  v23[1] = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  v5 = (mlcore::ItemStoreTable **)mediaplatform::Singleton<mlcore::ItemStoreTable>::sharedInstance();
  mlcore::ItemStoreTable::feedURLColumn(*v5, (uint64_t)&__str);
  mlcore::DatabaseModelProperty<std::string>::DatabaseModelProperty(v0, v23, (uint64_t)&__str);
  mlcore::ItemPropertyFeedURL(void)::property = v0;
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&__str);
  if (v2)
  {
    v6 = (unint64_t *)&v2->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v8 = mlcore::ItemPropertyFeedURL(void)::property;
  std::string::basic_string[abi:ne180100]<0>(&__str, "");
  std::string::operator=((std::string *)(v8 + 40), &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  v9 = mlcore::TypedEntityClass<mlcore::Item>::sharedPointer();
  v10 = mlcore::ItemPropertyFeedURL(void)::property;
  v11 = mediaplatform::Singleton<mlcore::ItemStoreTable>::sharedInstance();
  v12 = *(_QWORD *)v11;
  if (*(char *)(*(_QWORD *)v11 + 31) >= 0)
    v13 = *(unsigned __int8 *)(*(_QWORD *)v11 + 31);
  else
    v13 = *(_QWORD *)(*(_QWORD *)v11 + 16);
  v14 = &v21;
  std::string::basic_string[abi:ne180100]((uint64_t)&v21, v13 + 1);
  if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v14 = (std::string *)v21.__r_.__value_.__r.__words[0];
  if (v13)
  {
    v17 = *(char **)(v12 + 8);
    v16 = (char *)(v12 + 8);
    v15 = v17;
    if (v16[23] >= 0)
      v18 = v16;
    else
      v18 = v15;
    memmove(v14, v18, v13);
  }
  *(_WORD *)((char *)&v14->__r_.__value_.__l.__data_ + v13) = 46;
  v19 = std::string::append(&v21, "feedURL");
  v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  __str.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  mlcore::EntityClass::setPropertyForName(v9, v10, &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
}

void sub_20A77B8D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyRelativeVolume(void)::$_0 &&>>()
{
  uint64_t v0;
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  mlcore::ItemPlaybackTable **v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  std::string *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  std::string *v19;
  __int128 v20;
  std::string v21;
  std::string __p;
  char v23;
  _QWORD v24[2];

  v0 = operator new();
  v1 = (_QWORD *)mediaplatform::Singleton<mlcore::ItemPlaybackTable>::sharedInstance();
  v2 = (std::__shared_weak_count *)v1[1];
  v24[0] = *v1;
  v24[1] = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  v5 = (mlcore::ItemPlaybackTable **)mediaplatform::Singleton<mlcore::ItemPlaybackTable>::sharedInstance();
  mlcore::ItemPlaybackTable::relativeVolumeColumn(*v5, (uint64_t)&__p);
  mlcore::DatabaseModelProperty<int>::DatabaseModelProperty(v0, v24, (uint64_t)&__p);
  mlcore::ItemPropertyRelativeVolume(void)::property = v0;
  if (v23 < 0)
    operator delete((void *)__p.__r_.__value_.__l.__size_);
  if (v2)
  {
    v6 = (unint64_t *)&v2->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v8 = mlcore::ItemPropertyRelativeVolume(void)::property;
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  std::string::operator=((std::string *)(v8 + 40), &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v9 = mlcore::TypedEntityClass<mlcore::Item>::sharedPointer();
  v10 = mlcore::ItemPropertyRelativeVolume(void)::property;
  v11 = mediaplatform::Singleton<mlcore::ItemPlaybackTable>::sharedInstance();
  v12 = *(_QWORD *)v11;
  if (*(char *)(*(_QWORD *)v11 + 31) >= 0)
    v13 = *(unsigned __int8 *)(*(_QWORD *)v11 + 31);
  else
    v13 = *(_QWORD *)(*(_QWORD *)v11 + 16);
  v14 = &v21;
  std::string::basic_string[abi:ne180100]((uint64_t)&v21, v13 + 1);
  if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v14 = (std::string *)v21.__r_.__value_.__r.__words[0];
  if (v13)
  {
    v17 = *(char **)(v12 + 8);
    v16 = (char *)(v12 + 8);
    v15 = v17;
    if (v16[23] >= 0)
      v18 = v16;
    else
      v18 = v15;
    memmove(v14, v18, v13);
  }
  *(_WORD *)((char *)&v14->__r_.__value_.__l.__data_ + v13) = 46;
  v19 = std::string::append(&v21, "relativeVolume");
  v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  __p.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  mlcore::EntityClass::setPropertyForName(v9, v10, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
}

void sub_20A77BB58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyRememberBookmarkTime(void)::$_0 &&>>()
{
  uint64_t v0;
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  mlcore::ItemStatsTable **v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  std::string *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  std::string *v19;
  __int128 v20;
  std::string v21;
  std::string __p;
  char v23;
  _QWORD v24[2];

  v0 = operator new();
  v1 = (_QWORD *)mediaplatform::Singleton<mlcore::ItemStatsTable>::sharedInstance();
  v2 = (std::__shared_weak_count *)v1[1];
  v24[0] = *v1;
  v24[1] = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  v5 = (mlcore::ItemStatsTable **)mediaplatform::Singleton<mlcore::ItemStatsTable>::sharedInstance();
  mlcore::ItemStatsTable::rememberBookmarkColumn(*v5, (uint64_t)&__p);
  mlcore::DatabaseModelProperty<int>::DatabaseModelProperty(v0, v24, (uint64_t)&__p);
  mlcore::ItemPropertyRememberBookmarkTime(void)::property = v0;
  if (v23 < 0)
    operator delete((void *)__p.__r_.__value_.__l.__size_);
  if (v2)
  {
    v6 = (unint64_t *)&v2->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v8 = mlcore::ItemPropertyRememberBookmarkTime(void)::property;
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  std::string::operator=((std::string *)(v8 + 40), &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v9 = mlcore::TypedEntityClass<mlcore::Item>::sharedPointer();
  v10 = mlcore::ItemPropertyRememberBookmarkTime(void)::property;
  v11 = mediaplatform::Singleton<mlcore::ItemStatsTable>::sharedInstance();
  v12 = *(_QWORD *)v11;
  if (*(char *)(*(_QWORD *)v11 + 31) >= 0)
    v13 = *(unsigned __int8 *)(*(_QWORD *)v11 + 31);
  else
    v13 = *(_QWORD *)(*(_QWORD *)v11 + 16);
  v14 = &v21;
  std::string::basic_string[abi:ne180100]((uint64_t)&v21, v13 + 1);
  if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v14 = (std::string *)v21.__r_.__value_.__r.__words[0];
  if (v13)
  {
    v17 = *(char **)(v12 + 8);
    v16 = (char *)(v12 + 8);
    v15 = v17;
    if (v16[23] >= 0)
      v18 = v16;
    else
      v18 = v15;
    memmove(v14, v18, v13);
  }
  *(_WORD *)((char *)&v14->__r_.__value_.__l.__data_ + v13) = 46;
  v19 = std::string::append(&v21, "rememberBookmarkTime");
  v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  __p.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  mlcore::EntityClass::setPropertyForName(v9, v10, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
}

void sub_20A77BDE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

uint64_t mlcore::ItemPropertyAudioTrackIndex(mlcore *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&mlcore::ItemPropertyAudioTrackIndex(void)::once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&mlcore::ItemPropertyAudioTrackIndex(void)::once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyAudioTrackIndex(void)::$_0 &&>>);
  }
  return mlcore::ItemPropertyAudioTrackIndex(void)::property;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyAudioTrackIndex(void)::$_0 &&>>()
{
  uint64_t v0;
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  mlcore::ItemVideoTable **v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  std::string *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  std::string *v19;
  __int128 v20;
  std::string v21;
  std::string __p;
  char v23;
  _QWORD v24[2];

  v0 = operator new();
  v1 = (_QWORD *)mediaplatform::Singleton<mlcore::ItemVideoTable>::sharedInstance();
  v2 = (std::__shared_weak_count *)v1[1];
  v24[0] = *v1;
  v24[1] = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  v5 = (mlcore::ItemVideoTable **)mediaplatform::Singleton<mlcore::ItemVideoTable>::sharedInstance();
  mlcore::ItemVideoTable::audioTrackIndexColumn(*v5, (uint64_t)&__p);
  mlcore::DatabaseModelProperty<int>::DatabaseModelProperty(v0, v24, (uint64_t)&__p);
  mlcore::ItemPropertyAudioTrackIndex(void)::property = v0;
  if (v23 < 0)
    operator delete((void *)__p.__r_.__value_.__l.__size_);
  if (v2)
  {
    v6 = (unint64_t *)&v2->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v8 = mlcore::ItemPropertyAudioTrackIndex(void)::property;
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  std::string::operator=((std::string *)(v8 + 40), &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v9 = mlcore::TypedEntityClass<mlcore::Item>::sharedPointer();
  v10 = mlcore::ItemPropertyAudioTrackIndex(void)::property;
  v11 = mediaplatform::Singleton<mlcore::ItemVideoTable>::sharedInstance();
  v12 = *(_QWORD *)v11;
  if (*(char *)(*(_QWORD *)v11 + 31) >= 0)
    v13 = *(unsigned __int8 *)(*(_QWORD *)v11 + 31);
  else
    v13 = *(_QWORD *)(*(_QWORD *)v11 + 16);
  v14 = &v21;
  std::string::basic_string[abi:ne180100]((uint64_t)&v21, v13 + 1);
  if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v14 = (std::string *)v21.__r_.__value_.__r.__words[0];
  if (v13)
  {
    v17 = *(char **)(v12 + 8);
    v16 = (char *)(v12 + 8);
    v15 = v17;
    if (v16[23] >= 0)
      v18 = v16;
    else
      v18 = v15;
    memmove(v14, v18, v13);
  }
  *(_WORD *)((char *)&v14->__r_.__value_.__l.__data_ + v13) = 46;
  v19 = std::string::append(&v21, "audioTrackIndex");
  v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  __p.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  mlcore::EntityClass::setPropertyForName(v9, v10, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
}

void sub_20A77C0D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

uint64_t mlcore::ItemPropertyHasAlternateAudio(mlcore *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&mlcore::ItemPropertyHasAlternateAudio(void)::once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&mlcore::ItemPropertyHasAlternateAudio(void)::once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyHasAlternateAudio(void)::$_0 &&>>);
  }
  return mlcore::ItemPropertyHasAlternateAudio(void)::property;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyHasAlternateAudio(void)::$_0 &&>>()
{
  uint64_t v0;
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  mlcore::ItemVideoTable **v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  std::string *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  std::string *v19;
  __int128 v20;
  std::string v21;
  std::string __p;
  char v23;
  _QWORD v24[2];

  v0 = operator new();
  v1 = (_QWORD *)mediaplatform::Singleton<mlcore::ItemVideoTable>::sharedInstance();
  v2 = (std::__shared_weak_count *)v1[1];
  v24[0] = *v1;
  v24[1] = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  v5 = (mlcore::ItemVideoTable **)mediaplatform::Singleton<mlcore::ItemVideoTable>::sharedInstance();
  mlcore::ItemVideoTable::hasAlternateAudioColumn(*v5, (uint64_t)&__p);
  mlcore::DatabaseModelProperty<int>::DatabaseModelProperty(v0, v24, (uint64_t)&__p);
  mlcore::ItemPropertyHasAlternateAudio(void)::property = v0;
  if (v23 < 0)
    operator delete((void *)__p.__r_.__value_.__l.__size_);
  if (v2)
  {
    v6 = (unint64_t *)&v2->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v8 = mlcore::ItemPropertyHasAlternateAudio(void)::property;
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  std::string::operator=((std::string *)(v8 + 40), &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v9 = mlcore::TypedEntityClass<mlcore::Item>::sharedPointer();
  v10 = mlcore::ItemPropertyHasAlternateAudio(void)::property;
  v11 = mediaplatform::Singleton<mlcore::ItemVideoTable>::sharedInstance();
  v12 = *(_QWORD *)v11;
  if (*(char *)(*(_QWORD *)v11 + 31) >= 0)
    v13 = *(unsigned __int8 *)(*(_QWORD *)v11 + 31);
  else
    v13 = *(_QWORD *)(*(_QWORD *)v11 + 16);
  v14 = &v21;
  std::string::basic_string[abi:ne180100]((uint64_t)&v21, v13 + 1);
  if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v14 = (std::string *)v21.__r_.__value_.__r.__words[0];
  if (v13)
  {
    v17 = *(char **)(v12 + 8);
    v16 = (char *)(v12 + 8);
    v15 = v17;
    if (v16[23] >= 0)
      v18 = v16;
    else
      v18 = v15;
    memmove(v14, v18, v13);
  }
  *(_WORD *)((char *)&v14->__r_.__value_.__l.__data_ + v13) = 46;
  v19 = std::string::append(&v21, "hasAlternateAudio");
  v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  __p.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  mlcore::EntityClass::setPropertyForName(v9, v10, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
}

void sub_20A77C3C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

uint64_t mlcore::ItemPropertyAudioLanguage(mlcore *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&mlcore::ItemPropertyAudioLanguage(void)::once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&mlcore::ItemPropertyAudioLanguage(void)::once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyAudioLanguage(void)::$_0 &&>>);
  }
  return mlcore::ItemPropertyAudioLanguage(void)::property;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyAudioLanguage(void)::$_0 &&>>()
{
  uint64_t v0;
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  mlcore::ItemVideoTable **v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  std::string *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  std::string *v19;
  __int128 v20;
  std::string v21;
  std::string __p;
  char v23;
  _QWORD v24[2];

  v0 = operator new();
  v1 = (_QWORD *)mediaplatform::Singleton<mlcore::ItemVideoTable>::sharedInstance();
  v2 = (std::__shared_weak_count *)v1[1];
  v24[0] = *v1;
  v24[1] = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  v5 = (mlcore::ItemVideoTable **)mediaplatform::Singleton<mlcore::ItemVideoTable>::sharedInstance();
  mlcore::ItemVideoTable::audioLanguageColumn(*v5, (uint64_t)&__p);
  mlcore::DatabaseModelProperty<int>::DatabaseModelProperty(v0, v24, (uint64_t)&__p);
  mlcore::ItemPropertyAudioLanguage(void)::property = v0;
  if (v23 < 0)
    operator delete((void *)__p.__r_.__value_.__l.__size_);
  if (v2)
  {
    v6 = (unint64_t *)&v2->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v8 = mlcore::ItemPropertyAudioLanguage(void)::property;
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  std::string::operator=((std::string *)(v8 + 40), &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v9 = mlcore::TypedEntityClass<mlcore::Item>::sharedPointer();
  v10 = mlcore::ItemPropertyAudioLanguage(void)::property;
  v11 = mediaplatform::Singleton<mlcore::ItemVideoTable>::sharedInstance();
  v12 = *(_QWORD *)v11;
  if (*(char *)(*(_QWORD *)v11 + 31) >= 0)
    v13 = *(unsigned __int8 *)(*(_QWORD *)v11 + 31);
  else
    v13 = *(_QWORD *)(*(_QWORD *)v11 + 16);
  v14 = &v21;
  std::string::basic_string[abi:ne180100]((uint64_t)&v21, v13 + 1);
  if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v14 = (std::string *)v21.__r_.__value_.__r.__words[0];
  if (v13)
  {
    v17 = *(char **)(v12 + 8);
    v16 = (char *)(v12 + 8);
    v15 = v17;
    if (v16[23] >= 0)
      v18 = v16;
    else
      v18 = v15;
    memmove(v14, v18, v13);
  }
  *(_WORD *)((char *)&v14->__r_.__value_.__l.__data_ + v13) = 46;
  v19 = std::string::append(&v21, "audioLanguage");
  v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  __p.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  mlcore::EntityClass::setPropertyForName(v9, v10, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
}

void sub_20A77C6AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

uint64_t mlcore::ItemPropertyAudioTrackID(mlcore *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&mlcore::ItemPropertyAudioTrackID(void)::once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&mlcore::ItemPropertyAudioTrackID(void)::once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyAudioTrackID(void)::$_0 &&>>);
  }
  return mlcore::ItemPropertyAudioTrackID(void)::property;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyAudioTrackID(void)::$_0 &&>>()
{
  uint64_t v0;
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  mlcore::ItemVideoTable **v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  std::string *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  std::string *v19;
  __int128 v20;
  std::string v21;
  std::string __p;
  char v23;
  _QWORD v24[2];

  v0 = operator new();
  v1 = (_QWORD *)mediaplatform::Singleton<mlcore::ItemVideoTable>::sharedInstance();
  v2 = (std::__shared_weak_count *)v1[1];
  v24[0] = *v1;
  v24[1] = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  v5 = (mlcore::ItemVideoTable **)mediaplatform::Singleton<mlcore::ItemVideoTable>::sharedInstance();
  mlcore::ItemVideoTable::audioTrackIDColumn(*v5, (uint64_t)&__p);
  mlcore::DatabaseModelProperty<long long>::DatabaseModelProperty(v0, v24, (uint64_t)&__p);
  mlcore::ItemPropertyAudioTrackID(void)::property = v0;
  if (v23 < 0)
    operator delete((void *)__p.__r_.__value_.__l.__size_);
  if (v2)
  {
    v6 = (unint64_t *)&v2->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v8 = mlcore::ItemPropertyAudioTrackID(void)::property;
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  std::string::operator=((std::string *)(v8 + 40), &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v9 = mlcore::TypedEntityClass<mlcore::Item>::sharedPointer();
  v10 = mlcore::ItemPropertyAudioTrackID(void)::property;
  v11 = mediaplatform::Singleton<mlcore::ItemVideoTable>::sharedInstance();
  v12 = *(_QWORD *)v11;
  if (*(char *)(*(_QWORD *)v11 + 31) >= 0)
    v13 = *(unsigned __int8 *)(*(_QWORD *)v11 + 31);
  else
    v13 = *(_QWORD *)(*(_QWORD *)v11 + 16);
  v14 = &v21;
  std::string::basic_string[abi:ne180100]((uint64_t)&v21, v13 + 1);
  if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v14 = (std::string *)v21.__r_.__value_.__r.__words[0];
  if (v13)
  {
    v17 = *(char **)(v12 + 8);
    v16 = (char *)(v12 + 8);
    v15 = v17;
    if (v16[23] >= 0)
      v18 = v16;
    else
      v18 = v15;
    memmove(v14, v18, v13);
  }
  *(_WORD *)((char *)&v14->__r_.__value_.__l.__data_ + v13) = 46;
  v19 = std::string::append(&v21, "audioTrackID");
  v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  __p.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  mlcore::EntityClass::setPropertyForName(v9, v10, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
}

void sub_20A77C998(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyExcludeFromShuffle(void)::$_0 &&>>()
{
  uint64_t v0;
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  mlcore::ItemTable **v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  std::string *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  std::string *v19;
  __int128 v20;
  std::string v21;
  std::string __p;
  char v23;
  _QWORD v24[2];

  v0 = operator new();
  v1 = (_QWORD *)mediaplatform::Singleton<mlcore::ItemTable>::sharedInstance();
  v2 = (std::__shared_weak_count *)v1[1];
  v24[0] = *v1;
  v24[1] = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  v5 = (mlcore::ItemTable **)mediaplatform::Singleton<mlcore::ItemTable>::sharedInstance();
  mlcore::ItemTable::excludeFromShuffleColumn(*v5, (uint64_t)&__p);
  mlcore::DatabaseModelProperty<int>::DatabaseModelProperty(v0, v24, (uint64_t)&__p);
  mlcore::ItemPropertyExcludeFromShuffle(void)::property = v0;
  if (v23 < 0)
    operator delete((void *)__p.__r_.__value_.__l.__size_);
  if (v2)
  {
    v6 = (unint64_t *)&v2->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v8 = mlcore::ItemPropertyExcludeFromShuffle(void)::property;
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  std::string::operator=((std::string *)(v8 + 40), &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v9 = mlcore::TypedEntityClass<mlcore::Item>::sharedPointer();
  v10 = mlcore::ItemPropertyExcludeFromShuffle(void)::property;
  v11 = mediaplatform::Singleton<mlcore::ItemTable>::sharedInstance();
  v12 = *(_QWORD *)v11;
  if (*(char *)(*(_QWORD *)v11 + 31) >= 0)
    v13 = *(unsigned __int8 *)(*(_QWORD *)v11 + 31);
  else
    v13 = *(_QWORD *)(*(_QWORD *)v11 + 16);
  v14 = &v21;
  std::string::basic_string[abi:ne180100]((uint64_t)&v21, v13 + 1);
  if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v14 = (std::string *)v21.__r_.__value_.__r.__words[0];
  if (v13)
  {
    v17 = *(char **)(v12 + 8);
    v16 = (char *)(v12 + 8);
    v15 = v17;
    if (v16[23] >= 0)
      v18 = v16;
    else
      v18 = v15;
    memmove(v14, v18, v13);
  }
  *(_WORD *)((char *)&v14->__r_.__value_.__l.__data_ + v13) = 46;
  v19 = std::string::append(&v21, "excludeFromShuffle");
  v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  __p.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  mlcore::EntityClass::setPropertyForName(v9, v10, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
}

void sub_20A77CC28(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

uint64_t mlcore::ItemPropertyAudioTrackLocale(mlcore *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&mlcore::ItemPropertyAudioTrackLocale(void)::once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&mlcore::ItemPropertyAudioTrackLocale(void)::once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyAudioTrackLocale(void)::$_0 &&>>);
  }
  return mlcore::ItemPropertyAudioTrackLocale(void)::property;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyAudioTrackLocale(void)::$_0 &&>>()
{
  uint64_t v0;
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  mlcore::ItemVideoTable **v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  std::string *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  std::string *v19;
  __int128 v20;
  std::string v21;
  std::string __str;
  _QWORD v23[2];

  v0 = operator new();
  v1 = (_QWORD *)mediaplatform::Singleton<mlcore::ItemVideoTable>::sharedInstance();
  v2 = (std::__shared_weak_count *)v1[1];
  v23[0] = *v1;
  v23[1] = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  v5 = (mlcore::ItemVideoTable **)mediaplatform::Singleton<mlcore::ItemVideoTable>::sharedInstance();
  mlcore::ItemVideoTable::audioTrackLocaleColumn(*v5, (uint64_t)&__str);
  mlcore::DatabaseModelProperty<std::string>::DatabaseModelProperty(v0, v23, (uint64_t)&__str);
  mlcore::ItemPropertyAudioTrackLocale(void)::property = v0;
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&__str);
  if (v2)
  {
    v6 = (unint64_t *)&v2->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v8 = mlcore::ItemPropertyAudioTrackLocale(void)::property;
  std::string::basic_string[abi:ne180100]<0>(&__str, "");
  std::string::operator=((std::string *)(v8 + 40), &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  v9 = mlcore::TypedEntityClass<mlcore::Item>::sharedPointer();
  v10 = mlcore::ItemPropertyAudioTrackLocale(void)::property;
  v11 = mediaplatform::Singleton<mlcore::ItemVideoTable>::sharedInstance();
  v12 = *(_QWORD *)v11;
  if (*(char *)(*(_QWORD *)v11 + 31) >= 0)
    v13 = *(unsigned __int8 *)(*(_QWORD *)v11 + 31);
  else
    v13 = *(_QWORD *)(*(_QWORD *)v11 + 16);
  v14 = &v21;
  std::string::basic_string[abi:ne180100]((uint64_t)&v21, v13 + 1);
  if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v14 = (std::string *)v21.__r_.__value_.__r.__words[0];
  if (v13)
  {
    v17 = *(char **)(v12 + 8);
    v16 = (char *)(v12 + 8);
    v15 = v17;
    if (v16[23] >= 0)
      v18 = v16;
    else
      v18 = v15;
    memmove(v14, v18, v13);
  }
  *(_WORD *)((char *)&v14->__r_.__value_.__l.__data_ + v13) = 46;
  v19 = std::string::append(&v21, "audioTrackLocale");
  v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  __str.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  mlcore::EntityClass::setPropertyForName(v9, v10, &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
}

void sub_20A77CF0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyShowSortType(void)::$_0 &&>>()
{
  uint64_t v0;
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  mlcore::ItemVideoTable **v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  std::string *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  std::string *v19;
  __int128 v20;
  std::string v21;
  std::string __p;
  char v23;
  _QWORD v24[2];

  v0 = operator new();
  v1 = (_QWORD *)mediaplatform::Singleton<mlcore::ItemVideoTable>::sharedInstance();
  v2 = (std::__shared_weak_count *)v1[1];
  v24[0] = *v1;
  v24[1] = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  v5 = (mlcore::ItemVideoTable **)mediaplatform::Singleton<mlcore::ItemVideoTable>::sharedInstance();
  mlcore::ItemVideoTable::showSortTypeColumn(*v5, (uint64_t)&__p);
  mlcore::DatabaseModelProperty<long long>::DatabaseModelProperty(v0, v24, (uint64_t)&__p);
  mlcore::ItemPropertyShowSortType(void)::property = v0;
  if (v23 < 0)
    operator delete((void *)__p.__r_.__value_.__l.__size_);
  if (v2)
  {
    v6 = (unint64_t *)&v2->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v8 = mlcore::ItemPropertyShowSortType(void)::property;
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  std::string::operator=((std::string *)(v8 + 40), &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v9 = mlcore::TypedEntityClass<mlcore::Item>::sharedPointer();
  v10 = mlcore::ItemPropertyShowSortType(void)::property;
  v11 = mediaplatform::Singleton<mlcore::ItemVideoTable>::sharedInstance();
  v12 = *(_QWORD *)v11;
  if (*(char *)(*(_QWORD *)v11 + 31) >= 0)
    v13 = *(unsigned __int8 *)(*(_QWORD *)v11 + 31);
  else
    v13 = *(_QWORD *)(*(_QWORD *)v11 + 16);
  v14 = &v21;
  std::string::basic_string[abi:ne180100]((uint64_t)&v21, v13 + 1);
  if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v14 = (std::string *)v21.__r_.__value_.__r.__words[0];
  if (v13)
  {
    v17 = *(char **)(v12 + 8);
    v16 = (char *)(v12 + 8);
    v15 = v17;
    if (v16[23] >= 0)
      v18 = v16;
    else
      v18 = v15;
    memmove(v14, v18, v13);
  }
  *(_WORD *)((char *)&v14->__r_.__value_.__l.__data_ + v13) = 46;
  v19 = std::string::append(&v21, "showSortType");
  v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  __p.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  mlcore::EntityClass::setPropertyForName(v9, v10, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
}

void sub_20A77D194(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyEpisodeType(void)::$_0 &&>>()
{
  uint64_t v0;
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  mlcore::ItemVideoTable **v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  std::string *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  std::string *v19;
  __int128 v20;
  std::string v21;
  std::string __p;
  char v23;
  _QWORD v24[2];

  v0 = operator new();
  v1 = (_QWORD *)mediaplatform::Singleton<mlcore::ItemVideoTable>::sharedInstance();
  v2 = (std::__shared_weak_count *)v1[1];
  v24[0] = *v1;
  v24[1] = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  v5 = (mlcore::ItemVideoTable **)mediaplatform::Singleton<mlcore::ItemVideoTable>::sharedInstance();
  mlcore::ItemVideoTable::episodeTypeColumn(*v5, (uint64_t)&__p);
  mlcore::DatabaseModelProperty<long long>::DatabaseModelProperty(v0, v24, (uint64_t)&__p);
  mlcore::ItemPropertyEpisodeType(void)::property = v0;
  if (v23 < 0)
    operator delete((void *)__p.__r_.__value_.__l.__size_);
  if (v2)
  {
    v6 = (unint64_t *)&v2->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v8 = mlcore::ItemPropertyEpisodeType(void)::property;
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  std::string::operator=((std::string *)(v8 + 40), &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v9 = mlcore::TypedEntityClass<mlcore::Item>::sharedPointer();
  v10 = mlcore::ItemPropertyEpisodeType(void)::property;
  v11 = mediaplatform::Singleton<mlcore::ItemVideoTable>::sharedInstance();
  v12 = *(_QWORD *)v11;
  if (*(char *)(*(_QWORD *)v11 + 31) >= 0)
    v13 = *(unsigned __int8 *)(*(_QWORD *)v11 + 31);
  else
    v13 = *(_QWORD *)(*(_QWORD *)v11 + 16);
  v14 = &v21;
  std::string::basic_string[abi:ne180100]((uint64_t)&v21, v13 + 1);
  if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v14 = (std::string *)v21.__r_.__value_.__r.__words[0];
  if (v13)
  {
    v17 = *(char **)(v12 + 8);
    v16 = (char *)(v12 + 8);
    v15 = v17;
    if (v16[23] >= 0)
      v18 = v16;
    else
      v18 = v15;
    memmove(v14, v18, v13);
  }
  *(_WORD *)((char *)&v14->__r_.__value_.__l.__data_ + v13) = 46;
  v19 = std::string::append(&v21, "episodeType");
  v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  __p.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  mlcore::EntityClass::setPropertyForName(v9, v10, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
}

void sub_20A77D424(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyEpisodeTypeDisplayName(void)::$_0 &&>>()
{
  uint64_t v0;
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  mlcore::ItemVideoTable **v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  std::string *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  std::string *v19;
  __int128 v20;
  std::string v21;
  std::string __str;
  _QWORD v23[2];

  v0 = operator new();
  v1 = (_QWORD *)mediaplatform::Singleton<mlcore::ItemVideoTable>::sharedInstance();
  v2 = (std::__shared_weak_count *)v1[1];
  v23[0] = *v1;
  v23[1] = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  v5 = (mlcore::ItemVideoTable **)mediaplatform::Singleton<mlcore::ItemVideoTable>::sharedInstance();
  mlcore::ItemVideoTable::episodeTypeDisplayNameColumn(*v5, (uint64_t)&__str);
  mlcore::DatabaseModelProperty<std::string>::DatabaseModelProperty(v0, v23, (uint64_t)&__str);
  mlcore::ItemPropertyEpisodeTypeDisplayName(void)::property = v0;
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&__str);
  if (v2)
  {
    v6 = (unint64_t *)&v2->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v8 = mlcore::ItemPropertyEpisodeTypeDisplayName(void)::property;
  std::string::basic_string[abi:ne180100]<0>(&__str, "");
  std::string::operator=((std::string *)(v8 + 40), &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  v9 = mlcore::TypedEntityClass<mlcore::Item>::sharedPointer();
  v10 = mlcore::ItemPropertyEpisodeTypeDisplayName(void)::property;
  v11 = mediaplatform::Singleton<mlcore::ItemVideoTable>::sharedInstance();
  v12 = *(_QWORD *)v11;
  if (*(char *)(*(_QWORD *)v11 + 31) >= 0)
    v13 = *(unsigned __int8 *)(*(_QWORD *)v11 + 31);
  else
    v13 = *(_QWORD *)(*(_QWORD *)v11 + 16);
  v14 = &v21;
  std::string::basic_string[abi:ne180100]((uint64_t)&v21, v13 + 1);
  if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v14 = (std::string *)v21.__r_.__value_.__r.__words[0];
  if (v13)
  {
    v17 = *(char **)(v12 + 8);
    v16 = (char *)(v12 + 8);
    v15 = v17;
    if (v16[23] >= 0)
      v18 = v16;
    else
      v18 = v15;
    memmove(v14, v18, v13);
  }
  *(_WORD *)((char *)&v14->__r_.__value_.__l.__data_ + v13) = 46;
  v19 = std::string::append(&v21, "episodeTypeDisplayName");
  v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  __str.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  mlcore::EntityClass::setPropertyForName(v9, v10, &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
}

void sub_20A77D6AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyEpisodeSubSortOrder(void)::$_0 &&>>()
{
  uint64_t v0;
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  mlcore::ItemVideoTable **v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  std::string *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  std::string *v19;
  __int128 v20;
  std::string v21;
  std::string __p;
  char v23;
  _QWORD v24[2];

  v0 = operator new();
  v1 = (_QWORD *)mediaplatform::Singleton<mlcore::ItemVideoTable>::sharedInstance();
  v2 = (std::__shared_weak_count *)v1[1];
  v24[0] = *v1;
  v24[1] = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  v5 = (mlcore::ItemVideoTable **)mediaplatform::Singleton<mlcore::ItemVideoTable>::sharedInstance();
  mlcore::ItemVideoTable::episodeSubSortOrderColumn(*v5, (uint64_t)&__p);
  mlcore::DatabaseModelProperty<long long>::DatabaseModelProperty(v0, v24, (uint64_t)&__p);
  mlcore::ItemPropertyEpisodeSubSortOrder(void)::property = v0;
  if (v23 < 0)
    operator delete((void *)__p.__r_.__value_.__l.__size_);
  if (v2)
  {
    v6 = (unint64_t *)&v2->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v8 = mlcore::ItemPropertyEpisodeSubSortOrder(void)::property;
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  std::string::operator=((std::string *)(v8 + 40), &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v9 = mlcore::TypedEntityClass<mlcore::Item>::sharedPointer();
  v10 = mlcore::ItemPropertyEpisodeSubSortOrder(void)::property;
  v11 = mediaplatform::Singleton<mlcore::ItemVideoTable>::sharedInstance();
  v12 = *(_QWORD *)v11;
  if (*(char *)(*(_QWORD *)v11 + 31) >= 0)
    v13 = *(unsigned __int8 *)(*(_QWORD *)v11 + 31);
  else
    v13 = *(_QWORD *)(*(_QWORD *)v11 + 16);
  v14 = &v21;
  std::string::basic_string[abi:ne180100]((uint64_t)&v21, v13 + 1);
  if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v14 = (std::string *)v21.__r_.__value_.__r.__words[0];
  if (v13)
  {
    v17 = *(char **)(v12 + 8);
    v16 = (char *)(v12 + 8);
    v15 = v17;
    if (v16[23] >= 0)
      v18 = v16;
    else
      v18 = v15;
    memmove(v14, v18, v13);
  }
  *(_WORD *)((char *)&v14->__r_.__value_.__l.__data_ + v13) = 46;
  v19 = std::string::append(&v21, "episodeSubSortOrder");
  v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  __p.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  mlcore::EntityClass::setPropertyForName(v9, v10, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
}

void sub_20A77D934(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyStopTime(void)::$_0 &&>>()
{
  uint64_t v0;
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  mlcore::ItemPlaybackTable **v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  std::string *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  std::string *v19;
  __int128 v20;
  std::string v21;
  std::string __p;
  char v23;
  _QWORD v24[2];

  v0 = operator new();
  v1 = (_QWORD *)mediaplatform::Singleton<mlcore::ItemPlaybackTable>::sharedInstance();
  v2 = (std::__shared_weak_count *)v1[1];
  v24[0] = *v1;
  v24[1] = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  v5 = (mlcore::ItemPlaybackTable **)mediaplatform::Singleton<mlcore::ItemPlaybackTable>::sharedInstance();
  mlcore::ItemPlaybackTable::stopTimeColumn(*v5, (uint64_t)&__p);
  mlcore::DatabaseModelProperty<double>::DatabaseModelProperty(v0, v24, (uint64_t)&__p);
  mlcore::ItemPropertyStopTime(void)::property = v0;
  if (v23 < 0)
    operator delete((void *)__p.__r_.__value_.__l.__size_);
  if (v2)
  {
    v6 = (unint64_t *)&v2->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v8 = mlcore::ItemPropertyStopTime(void)::property;
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  std::string::operator=((std::string *)(v8 + 40), &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v9 = mlcore::TypedEntityClass<mlcore::Item>::sharedPointer();
  v10 = mlcore::ItemPropertyStopTime(void)::property;
  v11 = mediaplatform::Singleton<mlcore::ItemPlaybackTable>::sharedInstance();
  v12 = *(_QWORD *)v11;
  if (*(char *)(*(_QWORD *)v11 + 31) >= 0)
    v13 = *(unsigned __int8 *)(*(_QWORD *)v11 + 31);
  else
    v13 = *(_QWORD *)(*(_QWORD *)v11 + 16);
  v14 = &v21;
  std::string::basic_string[abi:ne180100]((uint64_t)&v21, v13 + 1);
  if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v14 = (std::string *)v21.__r_.__value_.__r.__words[0];
  if (v13)
  {
    v17 = *(char **)(v12 + 8);
    v16 = (char *)(v12 + 8);
    v15 = v17;
    if (v16[23] >= 0)
      v18 = v16;
    else
      v18 = v15;
    memmove(v14, v18, v13);
  }
  *(_WORD *)((char *)&v14->__r_.__value_.__l.__data_ + v13) = 46;
  v19 = std::string::append(&v21, "stopTime");
  v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  __p.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  mlcore::EntityClass::setPropertyForName(v9, v10, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
}

void sub_20A77DBC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyStartTime(void)::$_0 &&>>()
{
  uint64_t v0;
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  mlcore::ItemPlaybackTable **v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  std::string *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  std::string *v19;
  __int128 v20;
  std::string v21;
  std::string __p;
  char v23;
  _QWORD v24[2];

  v0 = operator new();
  v1 = (_QWORD *)mediaplatform::Singleton<mlcore::ItemPlaybackTable>::sharedInstance();
  v2 = (std::__shared_weak_count *)v1[1];
  v24[0] = *v1;
  v24[1] = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  v5 = (mlcore::ItemPlaybackTable **)mediaplatform::Singleton<mlcore::ItemPlaybackTable>::sharedInstance();
  mlcore::ItemPlaybackTable::startTimeColumn(*v5, (uint64_t)&__p);
  mlcore::DatabaseModelProperty<double>::DatabaseModelProperty(v0, v24, (uint64_t)&__p);
  mlcore::ItemPropertyStartTime(void)::property = v0;
  if (v23 < 0)
    operator delete((void *)__p.__r_.__value_.__l.__size_);
  if (v2)
  {
    v6 = (unint64_t *)&v2->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v8 = mlcore::ItemPropertyStartTime(void)::property;
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  std::string::operator=((std::string *)(v8 + 40), &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v9 = mlcore::TypedEntityClass<mlcore::Item>::sharedPointer();
  v10 = mlcore::ItemPropertyStartTime(void)::property;
  v11 = mediaplatform::Singleton<mlcore::ItemPlaybackTable>::sharedInstance();
  v12 = *(_QWORD *)v11;
  if (*(char *)(*(_QWORD *)v11 + 31) >= 0)
    v13 = *(unsigned __int8 *)(*(_QWORD *)v11 + 31);
  else
    v13 = *(_QWORD *)(*(_QWORD *)v11 + 16);
  v14 = &v21;
  std::string::basic_string[abi:ne180100]((uint64_t)&v21, v13 + 1);
  if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v14 = (std::string *)v21.__r_.__value_.__r.__words[0];
  if (v13)
  {
    v17 = *(char **)(v12 + 8);
    v16 = (char *)(v12 + 8);
    v15 = v17;
    if (v16[23] >= 0)
      v18 = v16;
    else
      v18 = v15;
    memmove(v14, v18, v13);
  }
  *(_WORD *)((char *)&v14->__r_.__value_.__l.__data_ + v13) = 46;
  v19 = std::string::append(&v21, "startTime");
  v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  __p.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  mlcore::EntityClass::setPropertyForName(v9, v10, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
}

void sub_20A77DE54(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyGaplessHeuristicInfo(void)::$_0 &&>>()
{
  uint64_t v0;
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  mlcore::ItemPlaybackTable **v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  std::string *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  std::string *v19;
  __int128 v20;
  std::string v21;
  std::string __p;
  char v23;
  _QWORD v24[2];

  v0 = operator new();
  v1 = (_QWORD *)mediaplatform::Singleton<mlcore::ItemPlaybackTable>::sharedInstance();
  v2 = (std::__shared_weak_count *)v1[1];
  v24[0] = *v1;
  v24[1] = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  v5 = (mlcore::ItemPlaybackTable **)mediaplatform::Singleton<mlcore::ItemPlaybackTable>::sharedInstance();
  mlcore::ItemPlaybackTable::gaplessHeuristicInfoColumn(*v5, (uint64_t)&__p);
  mlcore::DatabaseModelProperty<long long>::DatabaseModelProperty(v0, v24, (uint64_t)&__p);
  mlcore::ItemPropertyGaplessHeuristicInfo(void)::property = v0;
  if (v23 < 0)
    operator delete((void *)__p.__r_.__value_.__l.__size_);
  if (v2)
  {
    v6 = (unint64_t *)&v2->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v8 = mlcore::ItemPropertyGaplessHeuristicInfo(void)::property;
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  std::string::operator=((std::string *)(v8 + 40), &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v9 = mlcore::TypedEntityClass<mlcore::Item>::sharedPointer();
  v10 = mlcore::ItemPropertyGaplessHeuristicInfo(void)::property;
  v11 = mediaplatform::Singleton<mlcore::ItemPlaybackTable>::sharedInstance();
  v12 = *(_QWORD *)v11;
  if (*(char *)(*(_QWORD *)v11 + 31) >= 0)
    v13 = *(unsigned __int8 *)(*(_QWORD *)v11 + 31);
  else
    v13 = *(_QWORD *)(*(_QWORD *)v11 + 16);
  v14 = &v21;
  std::string::basic_string[abi:ne180100]((uint64_t)&v21, v13 + 1);
  if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v14 = (std::string *)v21.__r_.__value_.__r.__words[0];
  if (v13)
  {
    v17 = *(char **)(v12 + 8);
    v16 = (char *)(v12 + 8);
    v15 = v17;
    if (v16[23] >= 0)
      v18 = v16;
    else
      v18 = v15;
    memmove(v14, v18, v13);
  }
  *(_WORD *)((char *)&v14->__r_.__value_.__l.__data_ + v13) = 46;
  v19 = std::string::append(&v21, "gaplessHeuristicInfo");
  v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  __p.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  mlcore::EntityClass::setPropertyForName(v9, v10, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
}

void sub_20A77E0E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyGaplessEncodingDelay(void)::$_0 &&>>()
{
  uint64_t v0;
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  mlcore::ItemPlaybackTable **v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  std::string *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  std::string *v19;
  __int128 v20;
  std::string v21;
  std::string __p;
  char v23;
  _QWORD v24[2];

  v0 = operator new();
  v1 = (_QWORD *)mediaplatform::Singleton<mlcore::ItemPlaybackTable>::sharedInstance();
  v2 = (std::__shared_weak_count *)v1[1];
  v24[0] = *v1;
  v24[1] = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  v5 = (mlcore::ItemPlaybackTable **)mediaplatform::Singleton<mlcore::ItemPlaybackTable>::sharedInstance();
  mlcore::ItemPlaybackTable::gaplessEncodingDelayColumn(*v5, (uint64_t)&__p);
  mlcore::DatabaseModelProperty<long long>::DatabaseModelProperty(v0, v24, (uint64_t)&__p);
  mlcore::ItemPropertyGaplessEncodingDelay(void)::property = v0;
  if (v23 < 0)
    operator delete((void *)__p.__r_.__value_.__l.__size_);
  if (v2)
  {
    v6 = (unint64_t *)&v2->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v8 = mlcore::ItemPropertyGaplessEncodingDelay(void)::property;
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  std::string::operator=((std::string *)(v8 + 40), &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v9 = mlcore::TypedEntityClass<mlcore::Item>::sharedPointer();
  v10 = mlcore::ItemPropertyGaplessEncodingDelay(void)::property;
  v11 = mediaplatform::Singleton<mlcore::ItemPlaybackTable>::sharedInstance();
  v12 = *(_QWORD *)v11;
  if (*(char *)(*(_QWORD *)v11 + 31) >= 0)
    v13 = *(unsigned __int8 *)(*(_QWORD *)v11 + 31);
  else
    v13 = *(_QWORD *)(*(_QWORD *)v11 + 16);
  v14 = &v21;
  std::string::basic_string[abi:ne180100]((uint64_t)&v21, v13 + 1);
  if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v14 = (std::string *)v21.__r_.__value_.__r.__words[0];
  if (v13)
  {
    v17 = *(char **)(v12 + 8);
    v16 = (char *)(v12 + 8);
    v15 = v17;
    if (v16[23] >= 0)
      v18 = v16;
    else
      v18 = v15;
    memmove(v14, v18, v13);
  }
  *(_WORD *)((char *)&v14->__r_.__value_.__l.__data_ + v13) = 46;
  v19 = std::string::append(&v21, "gaplessEncodingDelay");
  v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  __p.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  mlcore::EntityClass::setPropertyForName(v9, v10, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
}

void sub_20A77E374(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyGaplessEncodingDrain(void)::$_0 &&>>()
{
  uint64_t v0;
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  mlcore::ItemPlaybackTable **v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  std::string *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  std::string *v19;
  __int128 v20;
  std::string v21;
  std::string __p;
  char v23;
  _QWORD v24[2];

  v0 = operator new();
  v1 = (_QWORD *)mediaplatform::Singleton<mlcore::ItemPlaybackTable>::sharedInstance();
  v2 = (std::__shared_weak_count *)v1[1];
  v24[0] = *v1;
  v24[1] = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  v5 = (mlcore::ItemPlaybackTable **)mediaplatform::Singleton<mlcore::ItemPlaybackTable>::sharedInstance();
  mlcore::ItemPlaybackTable::gaplessEncodingDrainColumn(*v5, (uint64_t)&__p);
  mlcore::DatabaseModelProperty<long long>::DatabaseModelProperty(v0, v24, (uint64_t)&__p);
  mlcore::ItemPropertyGaplessEncodingDrain(void)::property = v0;
  if (v23 < 0)
    operator delete((void *)__p.__r_.__value_.__l.__size_);
  if (v2)
  {
    v6 = (unint64_t *)&v2->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v8 = mlcore::ItemPropertyGaplessEncodingDrain(void)::property;
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  std::string::operator=((std::string *)(v8 + 40), &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v9 = mlcore::TypedEntityClass<mlcore::Item>::sharedPointer();
  v10 = mlcore::ItemPropertyGaplessEncodingDrain(void)::property;
  v11 = mediaplatform::Singleton<mlcore::ItemPlaybackTable>::sharedInstance();
  v12 = *(_QWORD *)v11;
  if (*(char *)(*(_QWORD *)v11 + 31) >= 0)
    v13 = *(unsigned __int8 *)(*(_QWORD *)v11 + 31);
  else
    v13 = *(_QWORD *)(*(_QWORD *)v11 + 16);
  v14 = &v21;
  std::string::basic_string[abi:ne180100]((uint64_t)&v21, v13 + 1);
  if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v14 = (std::string *)v21.__r_.__value_.__r.__words[0];
  if (v13)
  {
    v17 = *(char **)(v12 + 8);
    v16 = (char *)(v12 + 8);
    v15 = v17;
    if (v16[23] >= 0)
      v18 = v16;
    else
      v18 = v15;
    memmove(v14, v18, v13);
  }
  *(_WORD *)((char *)&v14->__r_.__value_.__l.__data_ + v13) = 46;
  v19 = std::string::append(&v21, "gaplessEncodingDrain");
  v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  __p.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  mlcore::EntityClass::setPropertyForName(v9, v10, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
}

void sub_20A77E604(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyGaplessLastFrameResync(void)::$_0 &&>>()
{
  uint64_t v0;
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  mlcore::ItemPlaybackTable **v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  std::string *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  std::string *v19;
  __int128 v20;
  std::string v21;
  std::string __p;
  char v23;
  _QWORD v24[2];

  v0 = operator new();
  v1 = (_QWORD *)mediaplatform::Singleton<mlcore::ItemPlaybackTable>::sharedInstance();
  v2 = (std::__shared_weak_count *)v1[1];
  v24[0] = *v1;
  v24[1] = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  v5 = (mlcore::ItemPlaybackTable **)mediaplatform::Singleton<mlcore::ItemPlaybackTable>::sharedInstance();
  mlcore::ItemPlaybackTable::gaplessLastFrameResyncColumn(*v5, (uint64_t)&__p);
  mlcore::DatabaseModelProperty<long long>::DatabaseModelProperty(v0, v24, (uint64_t)&__p);
  mlcore::ItemPropertyGaplessLastFrameResync(void)::property = v0;
  if (v23 < 0)
    operator delete((void *)__p.__r_.__value_.__l.__size_);
  if (v2)
  {
    v6 = (unint64_t *)&v2->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v8 = mlcore::ItemPropertyGaplessLastFrameResync(void)::property;
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  std::string::operator=((std::string *)(v8 + 40), &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v9 = mlcore::TypedEntityClass<mlcore::Item>::sharedPointer();
  v10 = mlcore::ItemPropertyGaplessLastFrameResync(void)::property;
  v11 = mediaplatform::Singleton<mlcore::ItemPlaybackTable>::sharedInstance();
  v12 = *(_QWORD *)v11;
  if (*(char *)(*(_QWORD *)v11 + 31) >= 0)
    v13 = *(unsigned __int8 *)(*(_QWORD *)v11 + 31);
  else
    v13 = *(_QWORD *)(*(_QWORD *)v11 + 16);
  v14 = &v21;
  std::string::basic_string[abi:ne180100]((uint64_t)&v21, v13 + 1);
  if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v14 = (std::string *)v21.__r_.__value_.__r.__words[0];
  if (v13)
  {
    v17 = *(char **)(v12 + 8);
    v16 = (char *)(v12 + 8);
    v15 = v17;
    if (v16[23] >= 0)
      v18 = v16;
    else
      v18 = v15;
    memmove(v14, v18, v13);
  }
  *(_WORD *)((char *)&v14->__r_.__value_.__l.__data_ + v13) = 46;
  v19 = std::string::append(&v21, "gaplessLastFrameResync");
  v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  __p.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  mlcore::EntityClass::setPropertyForName(v9, v10, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
}

void sub_20A77E894(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyDurationInSamples(void)::$_0 &&>>()
{
  uint64_t v0;
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  mlcore::ItemPlaybackTable **v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  std::string *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  std::string *v19;
  __int128 v20;
  std::string v21;
  std::string __p;
  char v23;
  _QWORD v24[2];

  v0 = operator new();
  v1 = (_QWORD *)mediaplatform::Singleton<mlcore::ItemPlaybackTable>::sharedInstance();
  v2 = (std::__shared_weak_count *)v1[1];
  v24[0] = *v1;
  v24[1] = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  v5 = (mlcore::ItemPlaybackTable **)mediaplatform::Singleton<mlcore::ItemPlaybackTable>::sharedInstance();
  mlcore::ItemPlaybackTable::durationColumn(*v5, (uint64_t)&__p);
  mlcore::DatabaseModelProperty<long long>::DatabaseModelProperty(v0, v24, (uint64_t)&__p);
  mlcore::ItemPropertyDurationInSamples(void)::property = v0;
  if (v23 < 0)
    operator delete((void *)__p.__r_.__value_.__l.__size_);
  if (v2)
  {
    v6 = (unint64_t *)&v2->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v8 = mlcore::ItemPropertyDurationInSamples(void)::property;
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  std::string::operator=((std::string *)(v8 + 40), &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v9 = mlcore::TypedEntityClass<mlcore::Item>::sharedPointer();
  v10 = mlcore::ItemPropertyDurationInSamples(void)::property;
  v11 = mediaplatform::Singleton<mlcore::ItemPlaybackTable>::sharedInstance();
  v12 = *(_QWORD *)v11;
  if (*(char *)(*(_QWORD *)v11 + 31) >= 0)
    v13 = *(unsigned __int8 *)(*(_QWORD *)v11 + 31);
  else
    v13 = *(_QWORD *)(*(_QWORD *)v11 + 16);
  v14 = &v21;
  std::string::basic_string[abi:ne180100]((uint64_t)&v21, v13 + 1);
  if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v14 = (std::string *)v21.__r_.__value_.__r.__words[0];
  if (v13)
  {
    v17 = *(char **)(v12 + 8);
    v16 = (char *)(v12 + 8);
    v15 = v17;
    if (v16[23] >= 0)
      v18 = v16;
    else
      v18 = v15;
    memmove(v14, v18, v13);
  }
  *(_WORD *)((char *)&v14->__r_.__value_.__l.__data_ + v13) = 46;
  v19 = std::string::append(&v21, "durationInSamples");
  v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  __p.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  mlcore::EntityClass::setPropertyForName(v9, v10, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
}

void sub_20A77EB24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

uint64_t mlcore::ItemPropertyGlobalID(mlcore *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&mlcore::ItemPropertyGlobalID(void)::once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&mlcore::ItemPropertyGlobalID(void)::once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyGlobalID(void)::$_0 &&>>);
  }
  return mlcore::ItemPropertyGlobalID(void)::property;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyGlobalID(void)::$_0 &&>>()
{
  uint64_t v0;
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  mlcore::ItemExtraTable **v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  std::string *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  std::string *v19;
  __int128 v20;
  std::string v21;
  std::string __p;
  char v23;
  _QWORD v24[2];

  v0 = operator new();
  v1 = (_QWORD *)mediaplatform::Singleton<mlcore::ItemExtraTable>::sharedInstance();
  v2 = (std::__shared_weak_count *)v1[1];
  v24[0] = *v1;
  v24[1] = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  v5 = (mlcore::ItemExtraTable **)mediaplatform::Singleton<mlcore::ItemExtraTable>::sharedInstance();
  mlcore::ItemExtraTable::geniusPersistentIDColumn(*v5, (uint64_t)&__p);
  mlcore::DatabaseModelProperty<long long>::DatabaseModelProperty(v0, v24, (uint64_t)&__p);
  mlcore::ItemPropertyGlobalID(void)::property = v0;
  if (v23 < 0)
    operator delete((void *)__p.__r_.__value_.__l.__size_);
  if (v2)
  {
    v6 = (unint64_t *)&v2->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v8 = mlcore::ItemPropertyGlobalID(void)::property;
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  std::string::operator=((std::string *)(v8 + 40), &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v9 = mlcore::TypedEntityClass<mlcore::Item>::sharedPointer();
  v10 = mlcore::ItemPropertyGlobalID(void)::property;
  v11 = mediaplatform::Singleton<mlcore::ItemExtraTable>::sharedInstance();
  v12 = *(_QWORD *)v11;
  if (*(char *)(*(_QWORD *)v11 + 31) >= 0)
    v13 = *(unsigned __int8 *)(*(_QWORD *)v11 + 31);
  else
    v13 = *(_QWORD *)(*(_QWORD *)v11 + 16);
  v14 = &v21;
  std::string::basic_string[abi:ne180100]((uint64_t)&v21, v13 + 1);
  if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v14 = (std::string *)v21.__r_.__value_.__r.__words[0];
  if (v13)
  {
    v17 = *(char **)(v12 + 8);
    v16 = (char *)(v12 + 8);
    v15 = v17;
    if (v16[23] >= 0)
      v18 = v16;
    else
      v18 = v15;
    memmove(v14, v18, v13);
  }
  *(_WORD *)((char *)&v14->__r_.__value_.__l.__data_ + v13) = 46;
  v19 = std::string::append(&v21, "globalID");
  v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  __p.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  mlcore::EntityClass::setPropertyForName(v9, v10, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
}

void sub_20A77EE10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

uint64_t mlcore::ItemPropertyStoreItemID(mlcore *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&mlcore::ItemPropertyStoreItemID(void)::once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&mlcore::ItemPropertyStoreItemID(void)::once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyStoreItemID(void)::$_0 &&>>);
  }
  return mlcore::ItemPropertyStoreItemID(void)::property;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyStoreItemID(void)::$_0 &&>>()
{
  uint64_t v0;
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  mlcore::ItemStoreTable **v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  std::string *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  std::string *v19;
  __int128 v20;
  std::string v21;
  std::string __p;
  char v23;
  _QWORD v24[2];

  v0 = operator new();
  v1 = (_QWORD *)mediaplatform::Singleton<mlcore::ItemStoreTable>::sharedInstance();
  v2 = (std::__shared_weak_count *)v1[1];
  v24[0] = *v1;
  v24[1] = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  v5 = (mlcore::ItemStoreTable **)mediaplatform::Singleton<mlcore::ItemStoreTable>::sharedInstance();
  mlcore::ItemStoreTable::storeItemIDColumn(*v5, (uint64_t)&__p);
  mlcore::DatabaseModelProperty<long long>::DatabaseModelProperty(v0, v24, (uint64_t)&__p);
  mlcore::ItemPropertyStoreItemID(void)::property = v0;
  if (v23 < 0)
    operator delete((void *)__p.__r_.__value_.__l.__size_);
  if (v2)
  {
    v6 = (unint64_t *)&v2->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v8 = mlcore::ItemPropertyStoreItemID(void)::property;
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  std::string::operator=((std::string *)(v8 + 40), &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v9 = mlcore::TypedEntityClass<mlcore::Item>::sharedPointer();
  v10 = mlcore::ItemPropertyStoreItemID(void)::property;
  v11 = mediaplatform::Singleton<mlcore::ItemStoreTable>::sharedInstance();
  v12 = *(_QWORD *)v11;
  if (*(char *)(*(_QWORD *)v11 + 31) >= 0)
    v13 = *(unsigned __int8 *)(*(_QWORD *)v11 + 31);
  else
    v13 = *(_QWORD *)(*(_QWORD *)v11 + 16);
  v14 = &v21;
  std::string::basic_string[abi:ne180100]((uint64_t)&v21, v13 + 1);
  if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v14 = (std::string *)v21.__r_.__value_.__r.__words[0];
  if (v13)
  {
    v17 = *(char **)(v12 + 8);
    v16 = (char *)(v12 + 8);
    v15 = v17;
    if (v16[23] >= 0)
      v18 = v16;
    else
      v18 = v15;
    memmove(v14, v18, v13);
  }
  *(_WORD *)((char *)&v14->__r_.__value_.__l.__data_ + v13) = 46;
  v19 = std::string::append(&v21, "storeItemID");
  v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  __p.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  mlcore::EntityClass::setPropertyForName(v9, v10, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
}

void sub_20A77F0FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyStoreCloudID(void)::$_0 &&>>()
{
  uint64_t v0;
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  mlcore::ItemStoreTable **v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  std::string *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  std::string *v19;
  __int128 v20;
  std::string v21;
  std::string __p;
  char v23;
  _QWORD v24[2];

  v0 = operator new();
  v1 = (_QWORD *)mediaplatform::Singleton<mlcore::ItemStoreTable>::sharedInstance();
  v2 = (std::__shared_weak_count *)v1[1];
  v24[0] = *v1;
  v24[1] = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  v5 = (mlcore::ItemStoreTable **)mediaplatform::Singleton<mlcore::ItemStoreTable>::sharedInstance();
  mlcore::ItemStoreTable::storeSagaIDColumn(*v5, (uint64_t)&__p);
  mlcore::DatabaseModelProperty<long long>::DatabaseModelProperty(v0, v24, (uint64_t)&__p);
  mlcore::ItemPropertyStoreCloudID(void)::property = v0;
  if (v23 < 0)
    operator delete((void *)__p.__r_.__value_.__l.__size_);
  if (v2)
  {
    v6 = (unint64_t *)&v2->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v8 = mlcore::ItemPropertyStoreCloudID(void)::property;
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  std::string::operator=((std::string *)(v8 + 40), &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v9 = mlcore::TypedEntityClass<mlcore::Item>::sharedPointer();
  v10 = mlcore::ItemPropertyStoreCloudID(void)::property;
  v11 = mediaplatform::Singleton<mlcore::ItemStoreTable>::sharedInstance();
  v12 = *(_QWORD *)v11;
  if (*(char *)(*(_QWORD *)v11 + 31) >= 0)
    v13 = *(unsigned __int8 *)(*(_QWORD *)v11 + 31);
  else
    v13 = *(_QWORD *)(*(_QWORD *)v11 + 16);
  v14 = &v21;
  std::string::basic_string[abi:ne180100]((uint64_t)&v21, v13 + 1);
  if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v14 = (std::string *)v21.__r_.__value_.__r.__words[0];
  if (v13)
  {
    v17 = *(char **)(v12 + 8);
    v16 = (char *)(v12 + 8);
    v15 = v17;
    if (v16[23] >= 0)
      v18 = v16;
    else
      v18 = v15;
    memmove(v14, v18, v13);
  }
  *(_WORD *)((char *)&v14->__r_.__value_.__l.__data_ + v13) = 46;
  v19 = std::string::append(&v21, "storeCloudID");
  v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  __p.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  mlcore::EntityClass::setPropertyForName(v9, v10, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
}

void sub_20A77F38C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyStoreCloudAlbumID(void)::$_0 &&>>()
{
  uint64_t v0;
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  mlcore::ItemStoreTable **v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  std::string *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  std::string *v19;
  __int128 v20;
  std::string v21;
  std::string __str;
  _QWORD v23[2];

  v0 = operator new();
  v1 = (_QWORD *)mediaplatform::Singleton<mlcore::ItemStoreTable>::sharedInstance();
  v2 = (std::__shared_weak_count *)v1[1];
  v23[0] = *v1;
  v23[1] = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  v5 = (mlcore::ItemStoreTable **)mediaplatform::Singleton<mlcore::ItemStoreTable>::sharedInstance();
  mlcore::ItemStoreTable::cloudAlbumIDColumn(*v5, (uint64_t)&__str);
  mlcore::DatabaseModelProperty<std::string>::DatabaseModelProperty(v0, v23, (uint64_t)&__str);
  mlcore::ItemPropertyStoreCloudAlbumID(void)::property = v0;
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&__str);
  if (v2)
  {
    v6 = (unint64_t *)&v2->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v8 = mlcore::ItemPropertyStoreCloudAlbumID(void)::property;
  std::string::basic_string[abi:ne180100]<0>(&__str, "");
  std::string::operator=((std::string *)(v8 + 40), &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  v9 = mlcore::TypedEntityClass<mlcore::Item>::sharedPointer();
  v10 = mlcore::ItemPropertyStoreCloudAlbumID(void)::property;
  v11 = mediaplatform::Singleton<mlcore::ItemStoreTable>::sharedInstance();
  v12 = *(_QWORD *)v11;
  if (*(char *)(*(_QWORD *)v11 + 31) >= 0)
    v13 = *(unsigned __int8 *)(*(_QWORD *)v11 + 31);
  else
    v13 = *(_QWORD *)(*(_QWORD *)v11 + 16);
  v14 = &v21;
  std::string::basic_string[abi:ne180100]((uint64_t)&v21, v13 + 1);
  if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v14 = (std::string *)v21.__r_.__value_.__r.__words[0];
  if (v13)
  {
    v17 = *(char **)(v12 + 8);
    v16 = (char *)(v12 + 8);
    v15 = v17;
    if (v16[23] >= 0)
      v18 = v16;
    else
      v18 = v15;
    memmove(v14, v18, v13);
  }
  *(_WORD *)((char *)&v14->__r_.__value_.__l.__data_ + v13) = 46;
  v19 = std::string::append(&v21, "cloudAlbumID");
  v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  __str.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  mlcore::EntityClass::setPropertyForName(v9, v10, &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
}

void sub_20A77F614(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyStoreCloudUniversalLibraryID(void)::$_0 &&>>()
{
  uint64_t v0;
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  mlcore::ItemStoreTable **v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  std::string *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  std::string *v19;
  __int128 v20;
  std::string v21;
  std::string __str;
  _QWORD v23[2];

  v0 = operator new();
  v1 = (_QWORD *)mediaplatform::Singleton<mlcore::ItemStoreTable>::sharedInstance();
  v2 = (std::__shared_weak_count *)v1[1];
  v23[0] = *v1;
  v23[1] = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  v5 = (mlcore::ItemStoreTable **)mediaplatform::Singleton<mlcore::ItemStoreTable>::sharedInstance();
  mlcore::ItemStoreTable::cloudUniversalLibraryIDColumn(*v5, (uint64_t)&__str);
  mlcore::DatabaseModelProperty<std::string>::DatabaseModelProperty(v0, v23, (uint64_t)&__str);
  mlcore::ItemPropertyStoreCloudUniversalLibraryID(void)::property = v0;
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&__str);
  if (v2)
  {
    v6 = (unint64_t *)&v2->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v8 = mlcore::ItemPropertyStoreCloudUniversalLibraryID(void)::property;
  std::string::basic_string[abi:ne180100]<0>(&__str, "");
  std::string::operator=((std::string *)(v8 + 40), &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  v9 = mlcore::TypedEntityClass<mlcore::Item>::sharedPointer();
  v10 = mlcore::ItemPropertyStoreCloudUniversalLibraryID(void)::property;
  v11 = mediaplatform::Singleton<mlcore::ItemStoreTable>::sharedInstance();
  v12 = *(_QWORD *)v11;
  if (*(char *)(*(_QWORD *)v11 + 31) >= 0)
    v13 = *(unsigned __int8 *)(*(_QWORD *)v11 + 31);
  else
    v13 = *(_QWORD *)(*(_QWORD *)v11 + 16);
  v14 = &v21;
  std::string::basic_string[abi:ne180100]((uint64_t)&v21, v13 + 1);
  if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v14 = (std::string *)v21.__r_.__value_.__r.__words[0];
  if (v13)
  {
    v17 = *(char **)(v12 + 8);
    v16 = (char *)(v12 + 8);
    v15 = v17;
    if (v16[23] >= 0)
      v18 = v16;
    else
      v18 = v15;
    memmove(v14, v18, v13);
  }
  *(_WORD *)((char *)&v14->__r_.__value_.__l.__data_ + v13) = 46;
  v19 = std::string::append(&v21, "cloudUniversalLibraryID");
  v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  __str.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  mlcore::EntityClass::setPropertyForName(v9, v10, &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
}

void sub_20A77F894(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyMatchRedownloadParameters(void)::$_0 &&>>()
{
  uint64_t v0;
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  mlcore::ItemStoreTable **v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  std::string *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  std::string *v19;
  __int128 v20;
  std::string v21;
  std::string __str;
  _QWORD v23[2];

  v0 = operator new();
  v1 = (_QWORD *)mediaplatform::Singleton<mlcore::ItemStoreTable>::sharedInstance();
  v2 = (std::__shared_weak_count *)v1[1];
  v23[0] = *v1;
  v23[1] = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  v5 = (mlcore::ItemStoreTable **)mediaplatform::Singleton<mlcore::ItemStoreTable>::sharedInstance();
  mlcore::ItemStoreTable::matchRedownloadParamsColumn(*v5, (uint64_t)&__str);
  mlcore::DatabaseModelProperty<std::string>::DatabaseModelProperty(v0, v23, (uint64_t)&__str);
  mlcore::ItemPropertyMatchRedownloadParameters(void)::property = v0;
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&__str);
  if (v2)
  {
    v6 = (unint64_t *)&v2->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v8 = mlcore::ItemPropertyMatchRedownloadParameters(void)::property;
  std::string::basic_string[abi:ne180100]<0>(&__str, "");
  std::string::operator=((std::string *)(v8 + 40), &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  v9 = mlcore::TypedEntityClass<mlcore::Item>::sharedPointer();
  v10 = mlcore::ItemPropertyMatchRedownloadParameters(void)::property;
  v11 = mediaplatform::Singleton<mlcore::ItemStoreTable>::sharedInstance();
  v12 = *(_QWORD *)v11;
  if (*(char *)(*(_QWORD *)v11 + 31) >= 0)
    v13 = *(unsigned __int8 *)(*(_QWORD *)v11 + 31);
  else
    v13 = *(_QWORD *)(*(_QWORD *)v11 + 16);
  v14 = &v21;
  std::string::basic_string[abi:ne180100]((uint64_t)&v21, v13 + 1);
  if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v14 = (std::string *)v21.__r_.__value_.__r.__words[0];
  if (v13)
  {
    v17 = *(char **)(v12 + 8);
    v16 = (char *)(v12 + 8);
    v15 = v17;
    if (v16[23] >= 0)
      v18 = v16;
    else
      v18 = v15;
    memmove(v14, v18, v13);
  }
  *(_WORD *)((char *)&v14->__r_.__value_.__l.__data_ + v13) = 46;
  v19 = std::string::append(&v21, "matchRedownloadParameters");
  v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  __str.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  mlcore::EntityClass::setPropertyForName(v9, v10, &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
}

void sub_20A77FB14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyStoreNeedsReporting(void)::$_0 &&>>()
{
  uint64_t v0;
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  mlcore::ItemStoreTable **v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  std::string *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  std::string *v19;
  __int128 v20;
  std::string v21;
  std::string __p;
  char v23;
  _QWORD v24[2];

  v0 = operator new();
  v1 = (_QWORD *)mediaplatform::Singleton<mlcore::ItemStoreTable>::sharedInstance();
  v2 = (std::__shared_weak_count *)v1[1];
  v24[0] = *v1;
  v24[1] = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  v5 = (mlcore::ItemStoreTable **)mediaplatform::Singleton<mlcore::ItemStoreTable>::sharedInstance();
  mlcore::ItemStoreTable::needsReportingColumn(*v5, (uint64_t)&__p);
  mlcore::DatabaseModelProperty<long long>::DatabaseModelProperty(v0, v24, (uint64_t)&__p);
  mlcore::ItemPropertyStoreNeedsReporting(void)::property = v0;
  if (v23 < 0)
    operator delete((void *)__p.__r_.__value_.__l.__size_);
  if (v2)
  {
    v6 = (unint64_t *)&v2->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v8 = mlcore::ItemPropertyStoreNeedsReporting(void)::property;
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  std::string::operator=((std::string *)(v8 + 40), &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v9 = mlcore::TypedEntityClass<mlcore::Item>::sharedPointer();
  v10 = mlcore::ItemPropertyStoreNeedsReporting(void)::property;
  v11 = mediaplatform::Singleton<mlcore::ItemStoreTable>::sharedInstance();
  v12 = *(_QWORD *)v11;
  if (*(char *)(*(_QWORD *)v11 + 31) >= 0)
    v13 = *(unsigned __int8 *)(*(_QWORD *)v11 + 31);
  else
    v13 = *(_QWORD *)(*(_QWORD *)v11 + 16);
  v14 = &v21;
  std::string::basic_string[abi:ne180100]((uint64_t)&v21, v13 + 1);
  if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v14 = (std::string *)v21.__r_.__value_.__r.__words[0];
  if (v13)
  {
    v17 = *(char **)(v12 + 8);
    v16 = (char *)(v12 + 8);
    v15 = v17;
    if (v16[23] >= 0)
      v18 = v16;
    else
      v18 = v15;
    memmove(v14, v18, v13);
  }
  *(_WORD *)((char *)&v14->__r_.__value_.__l.__data_ + v13) = 46;
  v19 = std::string::append(&v21, "storeNeedsReporting");
  v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  __p.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  mlcore::EntityClass::setPropertyForName(v9, v10, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
}

void sub_20A77FD9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyStorePlaybackEndpointType(void)::$_0 &&>>()
{
  uint64_t v0;
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  mlcore::ItemStoreTable **v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  std::string *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  std::string *v19;
  __int128 v20;
  std::string v21;
  std::string __p;
  char v23;
  _QWORD v24[2];

  v0 = operator new();
  v1 = (_QWORD *)mediaplatform::Singleton<mlcore::ItemStoreTable>::sharedInstance();
  v2 = (std::__shared_weak_count *)v1[1];
  v24[0] = *v1;
  v24[1] = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  v5 = (mlcore::ItemStoreTable **)mediaplatform::Singleton<mlcore::ItemStoreTable>::sharedInstance();
  mlcore::ItemStoreTable::playbackEndpointTypeColumn(*v5, (uint64_t)&__p);
  mlcore::DatabaseModelProperty<long long>::DatabaseModelProperty(v0, v24, (uint64_t)&__p);
  mlcore::ItemPropertyStorePlaybackEndpointType(void)::property = v0;
  if (v23 < 0)
    operator delete((void *)__p.__r_.__value_.__l.__size_);
  if (v2)
  {
    v6 = (unint64_t *)&v2->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v8 = mlcore::ItemPropertyStorePlaybackEndpointType(void)::property;
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  std::string::operator=((std::string *)(v8 + 40), &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v9 = mlcore::TypedEntityClass<mlcore::Item>::sharedPointer();
  v10 = mlcore::ItemPropertyStorePlaybackEndpointType(void)::property;
  v11 = mediaplatform::Singleton<mlcore::ItemStoreTable>::sharedInstance();
  v12 = *(_QWORD *)v11;
  if (*(char *)(*(_QWORD *)v11 + 31) >= 0)
    v13 = *(unsigned __int8 *)(*(_QWORD *)v11 + 31);
  else
    v13 = *(_QWORD *)(*(_QWORD *)v11 + 16);
  v14 = &v21;
  std::string::basic_string[abi:ne180100]((uint64_t)&v21, v13 + 1);
  if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v14 = (std::string *)v21.__r_.__value_.__r.__words[0];
  if (v13)
  {
    v17 = *(char **)(v12 + 8);
    v16 = (char *)(v12 + 8);
    v15 = v17;
    if (v16[23] >= 0)
      v18 = v16;
    else
      v18 = v15;
    memmove(v14, v18, v13);
  }
  *(_WORD *)((char *)&v14->__r_.__value_.__l.__data_ + v13) = 46;
  v19 = std::string::append(&v21, "storePlaybackEndpointType");
  v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  __p.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  mlcore::EntityClass::setPropertyForName(v9, v10, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
}

void sub_20A78002C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyStoreAccountID(void)::$_0 &&>>()
{
  uint64_t v0;
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  mlcore::ItemStoreTable **v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  std::string *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  std::string *v19;
  __int128 v20;
  std::string v21;
  std::string __p;
  char v23;
  _QWORD v24[2];

  v0 = operator new();
  v1 = (_QWORD *)mediaplatform::Singleton<mlcore::ItemStoreTable>::sharedInstance();
  v2 = (std::__shared_weak_count *)v1[1];
  v24[0] = *v1;
  v24[1] = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  v5 = (mlcore::ItemStoreTable **)mediaplatform::Singleton<mlcore::ItemStoreTable>::sharedInstance();
  mlcore::ItemStoreTable::accountIDColumn(*v5, (uint64_t)&__p);
  mlcore::DatabaseModelProperty<long long>::DatabaseModelProperty(v0, v24, (uint64_t)&__p);
  mlcore::ItemPropertyStoreAccountID(void)::property = v0;
  if (v23 < 0)
    operator delete((void *)__p.__r_.__value_.__l.__size_);
  if (v2)
  {
    v6 = (unint64_t *)&v2->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v8 = mlcore::ItemPropertyStoreAccountID(void)::property;
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  std::string::operator=((std::string *)(v8 + 40), &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v9 = mlcore::TypedEntityClass<mlcore::Item>::sharedPointer();
  v10 = mlcore::ItemPropertyStoreAccountID(void)::property;
  v11 = mediaplatform::Singleton<mlcore::ItemStoreTable>::sharedInstance();
  v12 = *(_QWORD *)v11;
  if (*(char *)(*(_QWORD *)v11 + 31) >= 0)
    v13 = *(unsigned __int8 *)(*(_QWORD *)v11 + 31);
  else
    v13 = *(_QWORD *)(*(_QWORD *)v11 + 16);
  v14 = &v21;
  std::string::basic_string[abi:ne180100]((uint64_t)&v21, v13 + 1);
  if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v14 = (std::string *)v21.__r_.__value_.__r.__words[0];
  if (v13)
  {
    v17 = *(char **)(v12 + 8);
    v16 = (char *)(v12 + 8);
    v15 = v17;
    if (v16[23] >= 0)
      v18 = v16;
    else
      v18 = v15;
    memmove(v14, v18, v13);
  }
  *(_WORD *)((char *)&v14->__r_.__value_.__l.__data_ + v13) = 46;
  v19 = std::string::append(&v21, "storeAccountID");
  v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  __p.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  mlcore::EntityClass::setPropertyForName(v9, v10, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
}

void sub_20A7802BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

uint64_t mlcore::ItemPropertyStorefrontID(mlcore *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&mlcore::ItemPropertyStorefrontID(void)::once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&mlcore::ItemPropertyStorefrontID(void)::once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyStorefrontID(void)::$_0 &&>>);
  }
  return mlcore::ItemPropertyStorefrontID(void)::property;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyStorefrontID(void)::$_0 &&>>()
{
  uint64_t v0;
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  mlcore::ItemStoreTable **v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  std::string *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  std::string *v19;
  __int128 v20;
  std::string v21;
  std::string __p;
  char v23;
  _QWORD v24[2];

  v0 = operator new();
  v1 = (_QWORD *)mediaplatform::Singleton<mlcore::ItemStoreTable>::sharedInstance();
  v2 = (std::__shared_weak_count *)v1[1];
  v24[0] = *v1;
  v24[1] = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  v5 = (mlcore::ItemStoreTable **)mediaplatform::Singleton<mlcore::ItemStoreTable>::sharedInstance();
  mlcore::ItemStoreTable::storefrontIDColumn(*v5, (uint64_t)&__p);
  mlcore::DatabaseModelProperty<long long>::DatabaseModelProperty(v0, v24, (uint64_t)&__p);
  mlcore::ItemPropertyStorefrontID(void)::property = v0;
  if (v23 < 0)
    operator delete((void *)__p.__r_.__value_.__l.__size_);
  if (v2)
  {
    v6 = (unint64_t *)&v2->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v8 = mlcore::ItemPropertyStorefrontID(void)::property;
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  std::string::operator=((std::string *)(v8 + 40), &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v9 = mlcore::TypedEntityClass<mlcore::Item>::sharedPointer();
  v10 = mlcore::ItemPropertyStorefrontID(void)::property;
  v11 = mediaplatform::Singleton<mlcore::ItemStoreTable>::sharedInstance();
  v12 = *(_QWORD *)v11;
  if (*(char *)(*(_QWORD *)v11 + 31) >= 0)
    v13 = *(unsigned __int8 *)(*(_QWORD *)v11 + 31);
  else
    v13 = *(_QWORD *)(*(_QWORD *)v11 + 16);
  v14 = &v21;
  std::string::basic_string[abi:ne180100]((uint64_t)&v21, v13 + 1);
  if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v14 = (std::string *)v21.__r_.__value_.__r.__words[0];
  if (v13)
  {
    v17 = *(char **)(v12 + 8);
    v16 = (char *)(v12 + 8);
    v15 = v17;
    if (v16[23] >= 0)
      v18 = v16;
    else
      v18 = v15;
    memmove(v14, v18, v13);
  }
  *(_WORD *)((char *)&v14->__r_.__value_.__l.__data_ + v13) = 46;
  v19 = std::string::append(&v21, "storefrontID");
  v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  __p.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  mlcore::EntityClass::setPropertyForName(v9, v10, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
}

void sub_20A7805A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

uint64_t mlcore::ItemPropertyIsUserDisabled(mlcore *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&mlcore::ItemPropertyIsUserDisabled(void)::once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&mlcore::ItemPropertyIsUserDisabled(void)::once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyIsUserDisabled(void)::$_0 &&>>);
  }
  return mlcore::ItemPropertyIsUserDisabled(void)::property;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyIsUserDisabled(void)::$_0 &&>>()
{
  uint64_t v0;
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  mlcore::ItemExtraTable **v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  std::string *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  std::string *v19;
  __int128 v20;
  std::string v21;
  std::string __p;
  char v23;
  _QWORD v24[2];

  v0 = operator new();
  v1 = (_QWORD *)mediaplatform::Singleton<mlcore::ItemExtraTable>::sharedInstance();
  v2 = (std::__shared_weak_count *)v1[1];
  v24[0] = *v1;
  v24[1] = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  v5 = (mlcore::ItemExtraTable **)mediaplatform::Singleton<mlcore::ItemExtraTable>::sharedInstance();
  mlcore::ItemExtraTable::isUserDisabledColumn(*v5, (uint64_t)&__p);
  mlcore::DatabaseModelProperty<int>::DatabaseModelProperty(v0, v24, (uint64_t)&__p);
  mlcore::ItemPropertyIsUserDisabled(void)::property = v0;
  if (v23 < 0)
    operator delete((void *)__p.__r_.__value_.__l.__size_);
  if (v2)
  {
    v6 = (unint64_t *)&v2->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v8 = mlcore::ItemPropertyIsUserDisabled(void)::property;
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  std::string::operator=((std::string *)(v8 + 40), &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v9 = mlcore::TypedEntityClass<mlcore::Item>::sharedPointer();
  v10 = mlcore::ItemPropertyIsUserDisabled(void)::property;
  v11 = mediaplatform::Singleton<mlcore::ItemExtraTable>::sharedInstance();
  v12 = *(_QWORD *)v11;
  if (*(char *)(*(_QWORD *)v11 + 31) >= 0)
    v13 = *(unsigned __int8 *)(*(_QWORD *)v11 + 31);
  else
    v13 = *(_QWORD *)(*(_QWORD *)v11 + 16);
  v14 = &v21;
  std::string::basic_string[abi:ne180100]((uint64_t)&v21, v13 + 1);
  if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v14 = (std::string *)v21.__r_.__value_.__r.__words[0];
  if (v13)
  {
    v17 = *(char **)(v12 + 8);
    v16 = (char *)(v12 + 8);
    v15 = v17;
    if (v16[23] >= 0)
      v18 = v16;
    else
      v18 = v15;
    memmove(v14, v18, v13);
  }
  *(_WORD *)((char *)&v14->__r_.__value_.__l.__data_ + v13) = 46;
  v19 = std::string::append(&v21, "isUserDisabled");
  v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  __p.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  mlcore::EntityClass::setPropertyForName(v9, v10, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
}

void sub_20A780894(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyStoreCloudStatus(void)::$_0 &&>>()
{
  uint64_t v0;
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  mlcore::ItemStoreTable **v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  std::string *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  std::string *v19;
  __int128 v20;
  std::string v21;
  std::string __p;
  char v23;
  _QWORD v24[2];

  v0 = operator new();
  v1 = (_QWORD *)mediaplatform::Singleton<mlcore::ItemStoreTable>::sharedInstance();
  v2 = (std::__shared_weak_count *)v1[1];
  v24[0] = *v1;
  v24[1] = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  v5 = (mlcore::ItemStoreTable **)mediaplatform::Singleton<mlcore::ItemStoreTable>::sharedInstance();
  mlcore::ItemStoreTable::cloudStatusColumn(*v5, (uint64_t)&__p);
  mlcore::DatabaseModelProperty<long long>::DatabaseModelProperty(v0, v24, (uint64_t)&__p);
  mlcore::ItemPropertyStoreCloudStatus(void)::property = v0;
  if (v23 < 0)
    operator delete((void *)__p.__r_.__value_.__l.__size_);
  if (v2)
  {
    v6 = (unint64_t *)&v2->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v8 = mlcore::ItemPropertyStoreCloudStatus(void)::property;
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  std::string::operator=((std::string *)(v8 + 40), &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v9 = mlcore::TypedEntityClass<mlcore::Item>::sharedPointer();
  v10 = mlcore::ItemPropertyStoreCloudStatus(void)::property;
  v11 = mediaplatform::Singleton<mlcore::ItemStoreTable>::sharedInstance();
  v12 = *(_QWORD *)v11;
  if (*(char *)(*(_QWORD *)v11 + 31) >= 0)
    v13 = *(unsigned __int8 *)(*(_QWORD *)v11 + 31);
  else
    v13 = *(_QWORD *)(*(_QWORD *)v11 + 16);
  v14 = &v21;
  std::string::basic_string[abi:ne180100]((uint64_t)&v21, v13 + 1);
  if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v14 = (std::string *)v21.__r_.__value_.__r.__words[0];
  if (v13)
  {
    v17 = *(char **)(v12 + 8);
    v16 = (char *)(v12 + 8);
    v15 = v17;
    if (v16[23] >= 0)
      v18 = v16;
    else
      v18 = v15;
    memmove(v14, v18, v13);
  }
  *(_WORD *)((char *)&v14->__r_.__value_.__l.__data_ + v13) = 46;
  v19 = std::string::append(&v21, "cloudStatus");
  v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  __p.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  mlcore::EntityClass::setPropertyForName(v9, v10, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
}

void sub_20A780B24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

uint64_t mlcore::ItemPropertyStoreXID(mlcore *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&mlcore::ItemPropertyStoreXID(void)::once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&mlcore::ItemPropertyStoreXID(void)::once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyStoreXID(void)::$_0 &&>>);
  }
  return mlcore::ItemPropertyStoreXID(void)::property;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyStoreXID(void)::$_0 &&>>()
{
  uint64_t v0;
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  mlcore::ItemStoreTable **v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  std::string *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  std::string *v19;
  __int128 v20;
  std::string v21;
  std::string __str;
  _QWORD v23[2];

  v0 = operator new();
  v1 = (_QWORD *)mediaplatform::Singleton<mlcore::ItemStoreTable>::sharedInstance();
  v2 = (std::__shared_weak_count *)v1[1];
  v23[0] = *v1;
  v23[1] = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  v5 = (mlcore::ItemStoreTable **)mediaplatform::Singleton<mlcore::ItemStoreTable>::sharedInstance();
  mlcore::ItemStoreTable::storeXidColumn(*v5, (uint64_t)&__str);
  mlcore::DatabaseModelProperty<std::string>::DatabaseModelProperty(v0, v23, (uint64_t)&__str);
  mlcore::ItemPropertyStoreXID(void)::property = v0;
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&__str);
  if (v2)
  {
    v6 = (unint64_t *)&v2->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v8 = mlcore::ItemPropertyStoreXID(void)::property;
  std::string::basic_string[abi:ne180100]<0>(&__str, "");
  std::string::operator=((std::string *)(v8 + 40), &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  v9 = mlcore::TypedEntityClass<mlcore::Item>::sharedPointer();
  v10 = mlcore::ItemPropertyStoreXID(void)::property;
  v11 = mediaplatform::Singleton<mlcore::ItemStoreTable>::sharedInstance();
  v12 = *(_QWORD *)v11;
  if (*(char *)(*(_QWORD *)v11 + 31) >= 0)
    v13 = *(unsigned __int8 *)(*(_QWORD *)v11 + 31);
  else
    v13 = *(_QWORD *)(*(_QWORD *)v11 + 16);
  v14 = &v21;
  std::string::basic_string[abi:ne180100]((uint64_t)&v21, v13 + 1);
  if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v14 = (std::string *)v21.__r_.__value_.__r.__words[0];
  if (v13)
  {
    v17 = *(char **)(v12 + 8);
    v16 = (char *)(v12 + 8);
    v15 = v17;
    if (v16[23] >= 0)
      v18 = v16;
    else
      v18 = v15;
    memmove(v14, v18, v13);
  }
  *(_WORD *)((char *)&v14->__r_.__value_.__l.__data_ + v13) = 46;
  v19 = std::string::append(&v21, "xid");
  v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  __str.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  mlcore::EntityClass::setPropertyForName(v9, v10, &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
}

void sub_20A780E08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

uint64_t mlcore::ItemPropertyStoreFlavor(mlcore *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&mlcore::ItemPropertyStoreFlavor(void)::once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&mlcore::ItemPropertyStoreFlavor(void)::once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyStoreFlavor(void)::$_0 &&>>);
  }
  return mlcore::ItemPropertyStoreFlavor(void)::property;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyStoreFlavor(void)::$_0 &&>>()
{
  uint64_t v0;
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  mlcore::ItemStoreTable **v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  std::string *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  std::string *v19;
  __int128 v20;
  std::string v21;
  std::string __str;
  _QWORD v23[2];

  v0 = operator new();
  v1 = (_QWORD *)mediaplatform::Singleton<mlcore::ItemStoreTable>::sharedInstance();
  v2 = (std::__shared_weak_count *)v1[1];
  v23[0] = *v1;
  v23[1] = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  v5 = (mlcore::ItemStoreTable **)mediaplatform::Singleton<mlcore::ItemStoreTable>::sharedInstance();
  mlcore::ItemStoreTable::storeFlavorColumn(*v5, (uint64_t)&__str);
  mlcore::DatabaseModelProperty<std::string>::DatabaseModelProperty(v0, v23, (uint64_t)&__str);
  mlcore::ItemPropertyStoreFlavor(void)::property = v0;
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&__str);
  if (v2)
  {
    v6 = (unint64_t *)&v2->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v8 = mlcore::ItemPropertyStoreFlavor(void)::property;
  std::string::basic_string[abi:ne180100]<0>(&__str, "");
  std::string::operator=((std::string *)(v8 + 40), &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  v9 = mlcore::TypedEntityClass<mlcore::Item>::sharedPointer();
  v10 = mlcore::ItemPropertyStoreFlavor(void)::property;
  v11 = mediaplatform::Singleton<mlcore::ItemStoreTable>::sharedInstance();
  v12 = *(_QWORD *)v11;
  if (*(char *)(*(_QWORD *)v11 + 31) >= 0)
    v13 = *(unsigned __int8 *)(*(_QWORD *)v11 + 31);
  else
    v13 = *(_QWORD *)(*(_QWORD *)v11 + 16);
  v14 = &v21;
  std::string::basic_string[abi:ne180100]((uint64_t)&v21, v13 + 1);
  if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v14 = (std::string *)v21.__r_.__value_.__r.__words[0];
  if (v13)
  {
    v17 = *(char **)(v12 + 8);
    v16 = (char *)(v12 + 8);
    v15 = v17;
    if (v16[23] >= 0)
      v18 = v16;
    else
      v18 = v15;
    memmove(v14, v18, v13);
  }
  *(_WORD *)((char *)&v14->__r_.__value_.__l.__data_ + v13) = 46;
  v19 = std::string::append(&v21, "storeFlavor");
  v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  __str.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  mlcore::EntityClass::setPropertyForName(v9, v10, &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
}

void sub_20A7810E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyIsArtistUploadedContent(void)::$_0 &&>>()
{
  uint64_t v0;
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  mlcore::ItemStoreTable **v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  std::string *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  std::string *v19;
  __int128 v20;
  std::string v21;
  std::string __p;
  char v23;
  _QWORD v24[2];

  v0 = operator new();
  v1 = (_QWORD *)mediaplatform::Singleton<mlcore::ItemStoreTable>::sharedInstance();
  v2 = (std::__shared_weak_count *)v1[1];
  v24[0] = *v1;
  v24[1] = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  v5 = (mlcore::ItemStoreTable **)mediaplatform::Singleton<mlcore::ItemStoreTable>::sharedInstance();
  mlcore::ItemStoreTable::isArtistUploadedContentColumn(*v5, (uint64_t)&__p);
  mlcore::DatabaseModelProperty<long long>::DatabaseModelProperty(v0, v24, (uint64_t)&__p);
  mlcore::ItemPropertyIsArtistUploadedContent(void)::property = v0;
  if (v23 < 0)
    operator delete((void *)__p.__r_.__value_.__l.__size_);
  if (v2)
  {
    v6 = (unint64_t *)&v2->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v8 = mlcore::ItemPropertyIsArtistUploadedContent(void)::property;
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  std::string::operator=((std::string *)(v8 + 40), &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v9 = mlcore::TypedEntityClass<mlcore::Item>::sharedPointer();
  v10 = mlcore::ItemPropertyIsArtistUploadedContent(void)::property;
  v11 = mediaplatform::Singleton<mlcore::ItemStoreTable>::sharedInstance();
  v12 = *(_QWORD *)v11;
  if (*(char *)(*(_QWORD *)v11 + 31) >= 0)
    v13 = *(unsigned __int8 *)(*(_QWORD *)v11 + 31);
  else
    v13 = *(_QWORD *)(*(_QWORD *)v11 + 16);
  v14 = &v21;
  std::string::basic_string[abi:ne180100]((uint64_t)&v21, v13 + 1);
  if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v14 = (std::string *)v21.__r_.__value_.__r.__words[0];
  if (v13)
  {
    v17 = *(char **)(v12 + 8);
    v16 = (char *)(v12 + 8);
    v15 = v17;
    if (v16[23] >= 0)
      v18 = v16;
    else
      v18 = v15;
    memmove(v14, v18, v13);
  }
  *(_WORD *)((char *)&v14->__r_.__value_.__l.__data_ + v13) = 46;
  v19 = std::string::append(&v21, "isArtistUploadedContent");
  v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  __p.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  mlcore::EntityClass::setPropertyForName(v9, v10, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
}

void sub_20A78136C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyIsProtected(void)::$_0 &&>>()
{
  uint64_t v0;
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  mlcore::ItemStoreTable **v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  std::string *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  std::string *v19;
  __int128 v20;
  std::string v21;
  std::string __p;
  char v23;
  _QWORD v24[2];

  v0 = operator new();
  v1 = (_QWORD *)mediaplatform::Singleton<mlcore::ItemStoreTable>::sharedInstance();
  v2 = (std::__shared_weak_count *)v1[1];
  v24[0] = *v1;
  v24[1] = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  v5 = (mlcore::ItemStoreTable **)mediaplatform::Singleton<mlcore::ItemStoreTable>::sharedInstance();
  mlcore::ItemStoreTable::isProtectedColumn(*v5, (uint64_t)&__p);
  mlcore::DatabaseModelProperty<long long>::DatabaseModelProperty(v0, v24, (uint64_t)&__p);
  mlcore::ItemPropertyIsProtected(void)::property = v0;
  if (v23 < 0)
    operator delete((void *)__p.__r_.__value_.__l.__size_);
  if (v2)
  {
    v6 = (unint64_t *)&v2->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v8 = mlcore::ItemPropertyIsProtected(void)::property;
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  std::string::operator=((std::string *)(v8 + 40), &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v9 = mlcore::TypedEntityClass<mlcore::Item>::sharedPointer();
  v10 = mlcore::ItemPropertyIsProtected(void)::property;
  v11 = mediaplatform::Singleton<mlcore::ItemStoreTable>::sharedInstance();
  v12 = *(_QWORD *)v11;
  if (*(char *)(*(_QWORD *)v11 + 31) >= 0)
    v13 = *(unsigned __int8 *)(*(_QWORD *)v11 + 31);
  else
    v13 = *(_QWORD *)(*(_QWORD *)v11 + 16);
  v14 = &v21;
  std::string::basic_string[abi:ne180100]((uint64_t)&v21, v13 + 1);
  if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v14 = (std::string *)v21.__r_.__value_.__r.__words[0];
  if (v13)
  {
    v17 = *(char **)(v12 + 8);
    v16 = (char *)(v12 + 8);
    v15 = v17;
    if (v16[23] >= 0)
      v18 = v16;
    else
      v18 = v15;
    memmove(v14, v18, v13);
  }
  *(_WORD *)((char *)&v14->__r_.__value_.__l.__data_ + v13) = 46;
  v19 = std::string::append(&v21, "isProtected");
  v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  __p.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  mlcore::EntityClass::setPropertyForName(v9, v10, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
}

void sub_20A7815FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyStoreExtendedLyricsAttribute(void)::$_0 &&>>()
{
  uint64_t v0;
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  mlcore::ItemStoreTable **v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  std::string *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  std::string *v19;
  __int128 v20;
  std::string v21;
  std::string __p;
  char v23;
  _QWORD v24[2];

  v0 = operator new();
  v1 = (_QWORD *)mediaplatform::Singleton<mlcore::ItemStoreTable>::sharedInstance();
  v2 = (std::__shared_weak_count *)v1[1];
  v24[0] = *v1;
  v24[1] = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  v5 = (mlcore::ItemStoreTable **)mediaplatform::Singleton<mlcore::ItemStoreTable>::sharedInstance();
  mlcore::ItemStoreTable::assetStoreExtendedLyricsAttributeColumn(*v5, (uint64_t)&__p);
  mlcore::DatabaseModelProperty<long long>::DatabaseModelProperty(v0, v24, (uint64_t)&__p);
  mlcore::ItemPropertyStoreExtendedLyricsAttribute(void)::property = v0;
  if (v23 < 0)
    operator delete((void *)__p.__r_.__value_.__l.__size_);
  if (v2)
  {
    v6 = (unint64_t *)&v2->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v8 = mlcore::ItemPropertyStoreExtendedLyricsAttribute(void)::property;
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  std::string::operator=((std::string *)(v8 + 40), &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v9 = mlcore::TypedEntityClass<mlcore::Item>::sharedPointer();
  v10 = mlcore::ItemPropertyStoreExtendedLyricsAttribute(void)::property;
  v11 = mediaplatform::Singleton<mlcore::ItemStoreTable>::sharedInstance();
  v12 = *(_QWORD *)v11;
  if (*(char *)(*(_QWORD *)v11 + 31) >= 0)
    v13 = *(unsigned __int8 *)(*(_QWORD *)v11 + 31);
  else
    v13 = *(_QWORD *)(*(_QWORD *)v11 + 16);
  v14 = &v21;
  std::string::basic_string[abi:ne180100]((uint64_t)&v21, v13 + 1);
  if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v14 = (std::string *)v21.__r_.__value_.__r.__words[0];
  if (v13)
  {
    v17 = *(char **)(v12 + 8);
    v16 = (char *)(v12 + 8);
    v15 = v17;
    if (v16[23] >= 0)
      v18 = v16;
    else
      v18 = v15;
    memmove(v14, v18, v13);
  }
  *(_WORD *)((char *)&v14->__r_.__value_.__l.__data_ + v13) = 46;
  v19 = std::string::append(&v21, "storeExtendedLyricsAttribute");
  v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  __p.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  mlcore::EntityClass::setPropertyForName(v9, v10, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
}

void sub_20A78188C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

uint64_t mlcore::ItemPropertyStoreExtendedPlaybackAttribute(mlcore *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&mlcore::ItemPropertyStoreExtendedPlaybackAttribute(void)::once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&mlcore::ItemPropertyStoreExtendedPlaybackAttribute(void)::once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyStoreExtendedPlaybackAttribute(void)::$_0 &&>>);
  }
  return mlcore::ItemPropertyStoreExtendedPlaybackAttribute(void)::property;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyStoreExtendedPlaybackAttribute(void)::$_0 &&>>()
{
  uint64_t v0;
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  mlcore::ItemStoreTable **v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  std::string *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  std::string *v19;
  __int128 v20;
  std::string v21;
  std::string __p;
  char v23;
  _QWORD v24[2];

  v0 = operator new();
  v1 = (_QWORD *)mediaplatform::Singleton<mlcore::ItemStoreTable>::sharedInstance();
  v2 = (std::__shared_weak_count *)v1[1];
  v24[0] = *v1;
  v24[1] = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  v5 = (mlcore::ItemStoreTable **)mediaplatform::Singleton<mlcore::ItemStoreTable>::sharedInstance();
  mlcore::ItemStoreTable::assetStoreExtendedPlaybackAttributeColumn(*v5, (uint64_t)&__p);
  mlcore::DatabaseModelProperty<long long>::DatabaseModelProperty(v0, v24, (uint64_t)&__p);
  mlcore::ItemPropertyStoreExtendedPlaybackAttribute(void)::property = v0;
  if (v23 < 0)
    operator delete((void *)__p.__r_.__value_.__l.__size_);
  if (v2)
  {
    v6 = (unint64_t *)&v2->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v8 = mlcore::ItemPropertyStoreExtendedPlaybackAttribute(void)::property;
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  std::string::operator=((std::string *)(v8 + 40), &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v9 = mlcore::TypedEntityClass<mlcore::Item>::sharedPointer();
  v10 = mlcore::ItemPropertyStoreExtendedPlaybackAttribute(void)::property;
  v11 = mediaplatform::Singleton<mlcore::ItemStoreTable>::sharedInstance();
  v12 = *(_QWORD *)v11;
  if (*(char *)(*(_QWORD *)v11 + 31) >= 0)
    v13 = *(unsigned __int8 *)(*(_QWORD *)v11 + 31);
  else
    v13 = *(_QWORD *)(*(_QWORD *)v11 + 16);
  v14 = &v21;
  std::string::basic_string[abi:ne180100]((uint64_t)&v21, v13 + 1);
  if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v14 = (std::string *)v21.__r_.__value_.__r.__words[0];
  if (v13)
  {
    v17 = *(char **)(v12 + 8);
    v16 = (char *)(v12 + 8);
    v15 = v17;
    if (v16[23] >= 0)
      v18 = v16;
    else
      v18 = v15;
    memmove(v14, v18, v13);
  }
  *(_WORD *)((char *)&v14->__r_.__value_.__l.__data_ + v13) = 46;
  v19 = std::string::append(&v21, "extendedPlaybackAttribute");
  v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  __p.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  mlcore::EntityClass::setPropertyForName(v9, v10, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
}

void sub_20A781B78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyHasNonPurgeableAsset(void)::$_0 &&>>()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  std::__shared_weak_count *v3;
  unint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  std::string __str;

  v0 = operator new();
  v1 = mlcore::ItemPropertyBaseLocationID((mlcore *)v0);
  v2 = (char *)operator new(0x48uLL);
  v3 = (std::__shared_weak_count *)v2;
  *(_OWORD *)(v2 + 8) = 0u;
  v4 = (unint64_t *)(v2 + 8);
  *(_QWORD *)v2 = &off_24C33CE88;
  *((_QWORD *)v2 + 4) = v1;
  *((_QWORD *)v2 + 3) = &unk_24C339CA8;
  *((_QWORD *)v2 + 5) = 0x400000000;
  *((_QWORD *)v2 + 6) = 250;
  *(_OWORD *)(v2 + 56) = 0u;
  *(_OWORD *)(v0 + 16) = 0u;
  *(_OWORD *)(v0 + 32) = 0u;
  *(_OWORD *)(v0 + 48) = 0u;
  *(_QWORD *)v0 = &off_24C3398B8;
  *(_QWORD *)(v0 + 64) = v2 + 24;
  *(_QWORD *)(v0 + 72) = v2;
  do
    v5 = __ldxr(v4);
  while (__stxr(v5 + 1, v4));
  mlcore::ItemPropertyHasNonPurgeableAsset(void)::property = v0;
  do
    v6 = __ldaxr(v4);
  while (__stlxr(v6 - 1, v4));
  if (!v6)
  {
    (*(void (**)(char *))(*(_QWORD *)v2 + 16))(v2);
    std::__shared_weak_count::__release_weak(v3);
  }
  v7 = mlcore::ItemPropertyHasNonPurgeableAsset(void)::property;
  std::string::basic_string[abi:ne180100]<0>(&__str, "has_non_purgeable_asset");
  std::string::operator=((std::string *)(v7 + 40), &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  v8 = mlcore::TypedEntityClass<mlcore::Item>::sharedPointer();
  v9 = mlcore::ItemPropertyHasNonPurgeableAsset(void)::property;
  std::string::basic_string[abi:ne180100]<0>(&__str, "hasNonPurgeableAsset");
  mlcore::EntityClass::setPropertyForName(v8, v9, &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
}

void sub_20A781D9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t mlcore::ItemPropertyIsPlayable(mlcore *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&mlcore::ItemPropertyIsPlayable(void)::once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&mlcore::ItemPropertyIsPlayable(void)::once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyIsPlayable(void)::$_0 &&>>);
  }
  return mlcore::ItemPropertyIsPlayable(void)::property;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyIsPlayable(void)::$_0 &&>>()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  __int128 v3;
  uint64_t v4;
  char *v5;
  __int128 v6;
  __int128 *v7;
  char v8;
  uint64_t v9;
  char v10;
  __int128 v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t i;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __int128 *v24;
  __int128 v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  __int128 **v28;
  char v29;
  _BYTE __str[32];
  uint64_t v31;

  v31 = *MEMORY[0x24BDAC8D0];
  v0 = operator new();
  v1 = mlcore::ItemPropertyBaseLocationID((mlcore *)v0);
  v2 = operator new(0x30uLL);
  v2[1] = 0;
  v2[2] = 0;
  *v2 = &off_24C33CA28;
  v2[4] = v1;
  *((_DWORD *)v2 + 10) = 0;
  v2[3] = &unk_24C337810;
  *(_QWORD *)&v3 = v2 + 3;
  *((_QWORD *)&v3 + 1) = v2;
  *(_OWORD *)__str = v3;
  v4 = mlcore::ItemPropertyRemoteLocationID((mlcore *)v2);
  v5 = (char *)operator new(0x30uLL);
  *(_OWORD *)(v5 + 8) = 0u;
  *(_QWORD *)v5 = &off_24C33CA28;
  *((_QWORD *)v5 + 4) = v4;
  *((_DWORD *)v5 + 10) = 0;
  *((_QWORD *)v5 + 3) = &unk_24C337810;
  *(_QWORD *)&v6 = v5 + 24;
  *((_QWORD *)&v6 + 1) = v5;
  *(_OWORD *)&__str[16] = v6;
  v24 = 0;
  v25 = 0u;
  v28 = &v24;
  v29 = 0;
  v7 = (__int128 *)operator new(0x20uLL);
  v8 = 0;
  v9 = 0;
  v24 = v7;
  *(_QWORD *)&v25 = v7;
  *((_QWORD *)&v25 + 1) = v7 + 2;
  do
  {
    v10 = v8;
    v11 = *(_OWORD *)&__str[16 * v9];
    *v7 = v11;
    if (*((_QWORD *)&v11 + 1))
    {
      v12 = (unint64_t *)(*((_QWORD *)&v11 + 1) + 8);
      do
        v13 = __ldxr(v12);
      while (__stxr(v13 + 1, v12));
    }
    ++v7;
    v8 = 1;
    v9 = 1;
  }
  while ((v10 & 1) == 0);
  *(_QWORD *)&v25 = v7;
  mlcore::CreateOrPredicate(&v24, &v26);
  *(_OWORD *)(v0 + 32) = 0u;
  *(_OWORD *)(v0 + 48) = 0u;
  *(_OWORD *)(v0 + 16) = 0u;
  *(_QWORD *)v0 = &off_24C3398B8;
  v14 = v27;
  *(_QWORD *)(v0 + 64) = v26;
  *(_QWORD *)(v0 + 72) = v14;
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldxr(p_shared_owners);
    while (__stxr(v16 + 1, p_shared_owners));
    v17 = v27;
    mlcore::ItemPropertyIsPlayable(void)::property = v0;
    if (v27)
    {
      v18 = (unint64_t *)&v27->__shared_owners_;
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v19 - 1, v18));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
    }
  }
  else
  {
    mlcore::ItemPropertyIsPlayable(void)::property = v0;
  }
  v28 = &v24;
  std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v28);
  for (i = 16; i != -16; i -= 16)
    std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)&__str[i]);
  v21 = mlcore::ItemPropertyIsPlayable(void)::property;
  std::string::basic_string[abi:ne180100]<0>(__str, "is_playable");
  std::string::operator=((std::string *)(v21 + 40), (const std::string *)__str);
  if ((__str[23] & 0x80000000) != 0)
    operator delete(*(void **)__str);
  v22 = mlcore::TypedEntityClass<mlcore::Item>::sharedPointer();
  v23 = mlcore::ItemPropertyIsPlayable(void)::property;
  std::string::basic_string[abi:ne180100]<0>(__str, "isPlayable");
  mlcore::EntityClass::setPropertyForName(v22, v23, (std::string *)__str);
  if ((__str[23] & 0x80000000) != 0)
    operator delete(*(void **)__str);
}

void sub_20A7820C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyIsStoreRedownloadable(void)::$_0 &&>>()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  __int128 v3;
  uint64_t v4;
  char *v5;
  __int128 v6;
  __int128 *v7;
  char v8;
  uint64_t v9;
  char v10;
  __int128 v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t i;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __int128 *v24;
  __int128 v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  __int128 **v28;
  char v29;
  _BYTE __str[32];
  uint64_t v31;

  v31 = *MEMORY[0x24BDAC8D0];
  v0 = operator new();
  v1 = mlcore::ItemPropertyRemoteLocationID((mlcore *)v0);
  v2 = (char *)operator new(0x48uLL);
  *(_OWORD *)(v2 + 8) = 0u;
  *(_QWORD *)v2 = &off_24C33CE88;
  *((_QWORD *)v2 + 4) = v1;
  *((_QWORD *)v2 + 5) = 0x400000000;
  *((_QWORD *)v2 + 3) = &unk_24C339CA8;
  *((_QWORD *)v2 + 6) = 50;
  *(_OWORD *)(v2 + 56) = 0u;
  *(_QWORD *)&v3 = v2 + 24;
  *((_QWORD *)&v3 + 1) = v2;
  *(_OWORD *)__str = v3;
  v4 = mlcore::ItemPropertyRemoteLocationID((mlcore *)v2);
  v5 = (char *)operator new(0x48uLL);
  *(_OWORD *)(v5 + 8) = 0u;
  *(_QWORD *)v5 = &off_24C33CE88;
  *((_QWORD *)v5 + 4) = v4;
  *((_QWORD *)v5 + 5) = 0x300000000;
  *((_QWORD *)v5 + 3) = &unk_24C339CA8;
  *((_QWORD *)v5 + 6) = 300;
  *(_OWORD *)(v5 + 56) = 0u;
  *(_QWORD *)&v6 = v5 + 24;
  *((_QWORD *)&v6 + 1) = v5;
  *(_OWORD *)&__str[16] = v6;
  v24 = 0;
  v25 = 0u;
  v28 = &v24;
  v29 = 0;
  v7 = (__int128 *)operator new(0x20uLL);
  v8 = 0;
  v9 = 0;
  v24 = v7;
  *(_QWORD *)&v25 = v7;
  *((_QWORD *)&v25 + 1) = v7 + 2;
  do
  {
    v10 = v8;
    v11 = *(_OWORD *)&__str[16 * v9];
    *v7 = v11;
    if (*((_QWORD *)&v11 + 1))
    {
      v12 = (unint64_t *)(*((_QWORD *)&v11 + 1) + 8);
      do
        v13 = __ldxr(v12);
      while (__stxr(v13 + 1, v12));
    }
    ++v7;
    v8 = 1;
    v9 = 1;
  }
  while ((v10 & 1) == 0);
  *(_QWORD *)&v25 = v7;
  mlcore::CreateAndPredicate(&v24, &v26);
  *(_OWORD *)(v0 + 32) = 0u;
  *(_OWORD *)(v0 + 48) = 0u;
  *(_OWORD *)(v0 + 16) = 0u;
  *(_QWORD *)v0 = &off_24C3398B8;
  v14 = v27;
  *(_QWORD *)(v0 + 64) = v26;
  *(_QWORD *)(v0 + 72) = v14;
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldxr(p_shared_owners);
    while (__stxr(v16 + 1, p_shared_owners));
    v17 = v27;
    mlcore::ItemPropertyIsStoreRedownloadable(void)::property = v0;
    if (v27)
    {
      v18 = (unint64_t *)&v27->__shared_owners_;
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v19 - 1, v18));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
    }
  }
  else
  {
    mlcore::ItemPropertyIsStoreRedownloadable(void)::property = v0;
  }
  v28 = &v24;
  std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v28);
  for (i = 16; i != -16; i -= 16)
    std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)&__str[i]);
  v21 = mlcore::ItemPropertyIsStoreRedownloadable(void)::property;
  std::string::basic_string[abi:ne180100]<0>(__str, "is_store_redownloadable");
  std::string::operator=((std::string *)(v21 + 40), (const std::string *)__str);
  if ((__str[23] & 0x80000000) != 0)
    operator delete(*(void **)__str);
  v22 = mlcore::TypedEntityClass<mlcore::Item>::sharedPointer();
  v23 = mlcore::ItemPropertyIsStoreRedownloadable(void)::property;
  std::string::basic_string[abi:ne180100]<0>(__str, "isStoreRedownloadable");
  mlcore::EntityClass::setPropertyForName(v22, v23, (std::string *)__str);
  if ((__str[23] & 0x80000000) != 0)
    operator delete(*(void **)__str);
}

void sub_20A782440(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyHasCloudSyncSource(void)::$_0 &&>>()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  __int128 v3;
  uint64_t v4;
  char *v5;
  __int128 v6;
  __int128 *v7;
  char v8;
  uint64_t v9;
  char v10;
  __int128 v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t i;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __int128 *v24;
  __int128 v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  __int128 **v28;
  char v29;
  _BYTE __str[32];
  uint64_t v31;

  v31 = *MEMORY[0x24BDAC8D0];
  v0 = operator new();
  v1 = mlcore::ItemPropertyRemoteLocationID((mlcore *)v0);
  v2 = (char *)operator new(0x48uLL);
  *(_OWORD *)(v2 + 8) = 0u;
  *(_QWORD *)v2 = &off_24C33CE88;
  *((_QWORD *)v2 + 4) = v1;
  *((_QWORD *)v2 + 5) = 0x200000000;
  *((_QWORD *)v2 + 3) = &unk_24C339CA8;
  *((_QWORD *)v2 + 6) = 50;
  *(_OWORD *)(v2 + 56) = 0u;
  *(_QWORD *)&v3 = v2 + 24;
  *((_QWORD *)&v3 + 1) = v2;
  *(_OWORD *)__str = v3;
  v4 = mlcore::ItemPropertyRemoteLocationID((mlcore *)v2);
  v5 = (char *)operator new(0x48uLL);
  *(_OWORD *)(v5 + 8) = 0u;
  *(_QWORD *)v5 = &off_24C33CE88;
  *((_QWORD *)v5 + 4) = v4;
  *((_QWORD *)v5 + 5) = 0x300000000;
  *((_QWORD *)v5 + 3) = &unk_24C339CA8;
  *((_QWORD *)v5 + 6) = 300;
  *(_OWORD *)(v5 + 56) = 0u;
  *(_QWORD *)&v6 = v5 + 24;
  *((_QWORD *)&v6 + 1) = v5;
  *(_OWORD *)&__str[16] = v6;
  v24 = 0;
  v25 = 0u;
  v28 = &v24;
  v29 = 0;
  v7 = (__int128 *)operator new(0x20uLL);
  v8 = 0;
  v9 = 0;
  v24 = v7;
  *(_QWORD *)&v25 = v7;
  *((_QWORD *)&v25 + 1) = v7 + 2;
  do
  {
    v10 = v8;
    v11 = *(_OWORD *)&__str[16 * v9];
    *v7 = v11;
    if (*((_QWORD *)&v11 + 1))
    {
      v12 = (unint64_t *)(*((_QWORD *)&v11 + 1) + 8);
      do
        v13 = __ldxr(v12);
      while (__stxr(v13 + 1, v12));
    }
    ++v7;
    v8 = 1;
    v9 = 1;
  }
  while ((v10 & 1) == 0);
  *(_QWORD *)&v25 = v7;
  mlcore::CreateAndPredicate(&v24, &v26);
  *(_OWORD *)(v0 + 32) = 0u;
  *(_OWORD *)(v0 + 48) = 0u;
  *(_OWORD *)(v0 + 16) = 0u;
  *(_QWORD *)v0 = &off_24C3398B8;
  v14 = v27;
  *(_QWORD *)(v0 + 64) = v26;
  *(_QWORD *)(v0 + 72) = v14;
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldxr(p_shared_owners);
    while (__stxr(v16 + 1, p_shared_owners));
    v17 = v27;
    mlcore::ItemPropertyHasCloudSyncSource(void)::property = v0;
    if (v27)
    {
      v18 = (unint64_t *)&v27->__shared_owners_;
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v19 - 1, v18));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
    }
  }
  else
  {
    mlcore::ItemPropertyHasCloudSyncSource(void)::property = v0;
  }
  v28 = &v24;
  std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v28);
  for (i = 16; i != -16; i -= 16)
    std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)&__str[i]);
  v21 = mlcore::ItemPropertyHasCloudSyncSource(void)::property;
  std::string::basic_string[abi:ne180100]<0>(__str, "has_cloud_sync_source");
  std::string::operator=((std::string *)(v21 + 40), (const std::string *)__str);
  if ((__str[23] & 0x80000000) != 0)
    operator delete(*(void **)__str);
  v22 = mlcore::TypedEntityClass<mlcore::Item>::sharedPointer();
  v23 = mlcore::ItemPropertyHasCloudSyncSource(void)::property;
  std::string::basic_string[abi:ne180100]<0>(__str, "hasCloudSyncSource");
  mlcore::EntityClass::setPropertyForName(v22, v23, (std::string *)__str);
  if ((__str[23] & 0x80000000) != 0)
    operator delete(*(void **)__str);
}

void sub_20A7827C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyHomeSharingAssetAvailable(void)::$_0 &&>>()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  std::__shared_weak_count *v3;
  unint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  std::string __str;

  v0 = operator new();
  v1 = mlcore::ItemPropertyRemoteLocationID((mlcore *)v0);
  v2 = (char *)operator new(0x48uLL);
  v3 = (std::__shared_weak_count *)v2;
  *(_OWORD *)(v2 + 8) = 0u;
  v4 = (unint64_t *)(v2 + 8);
  *(_QWORD *)v2 = &off_24C33CE88;
  *((_QWORD *)v2 + 4) = v1;
  *((_QWORD *)v2 + 5) = 0;
  *((_QWORD *)v2 + 3) = &unk_24C339CA8;
  *((_QWORD *)v2 + 6) = 300;
  *(_OWORD *)(v2 + 56) = 0u;
  *(_OWORD *)(v0 + 16) = 0u;
  *(_OWORD *)(v0 + 32) = 0u;
  *(_OWORD *)(v0 + 48) = 0u;
  *(_QWORD *)v0 = &off_24C3398B8;
  *(_QWORD *)(v0 + 64) = v2 + 24;
  *(_QWORD *)(v0 + 72) = v2;
  do
    v5 = __ldxr(v4);
  while (__stxr(v5 + 1, v4));
  mlcore::ItemPropertyHomeSharingAssetAvailable(void)::property = v0;
  do
    v6 = __ldaxr(v4);
  while (__stlxr(v6 - 1, v4));
  if (!v6)
  {
    (*(void (**)(char *))(*(_QWORD *)v2 + 16))(v2);
    std::__shared_weak_count::__release_weak(v3);
  }
  v7 = mlcore::ItemPropertyHomeSharingAssetAvailable(void)::property;
  std::string::basic_string[abi:ne180100]<0>(&__str, "home_sharing_asset_available");
  std::string::operator=((std::string *)(v7 + 40), &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  v8 = mlcore::TypedEntityClass<mlcore::Item>::sharedPointer();
  v9 = mlcore::ItemPropertyHomeSharingAssetAvailable(void)::property;
  std::string::basic_string[abi:ne180100]<0>(&__str, "homeSharingAssetAvailable");
  mlcore::EntityClass::setPropertyForName(v8, v9, &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
}

void sub_20A7829E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyHasStreamingAsset(void)::$_0 &&>>()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  __int128 v3;
  uint64_t v4;
  char *v5;
  __int128 v6;
  __int128 *v7;
  char v8;
  uint64_t v9;
  char v10;
  __int128 v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t i;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __int128 *v24;
  __int128 v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  __int128 **v28;
  char v29;
  _BYTE __str[32];
  uint64_t v31;

  v31 = *MEMORY[0x24BDAC8D0];
  v0 = operator new();
  v1 = mlcore::ItemPropertyBaseLocationID((mlcore *)v0);
  v2 = (char *)operator new(0x48uLL);
  *(_OWORD *)(v2 + 8) = 0u;
  *(_QWORD *)v2 = &off_24C33CE88;
  *((_QWORD *)v2 + 4) = v1;
  *((_QWORD *)v2 + 5) = 0x400000000;
  *((_QWORD *)v2 + 3) = &unk_24C339CA8;
  *((_QWORD *)v2 + 6) = 100;
  *(_OWORD *)(v2 + 56) = 0u;
  *(_QWORD *)&v3 = v2 + 24;
  *((_QWORD *)&v3 + 1) = v2;
  *(_OWORD *)__str = v3;
  v4 = mlcore::ItemPropertyBaseLocationID((mlcore *)v2);
  v5 = (char *)operator new(0x48uLL);
  *(_OWORD *)(v5 + 8) = 0u;
  *(_QWORD *)v5 = &off_24C33CE88;
  *((_QWORD *)v5 + 4) = v4;
  *((_QWORD *)v5 + 5) = 0x500000000;
  *((_QWORD *)v5 + 3) = &unk_24C339CA8;
  *((_QWORD *)v5 + 6) = 200;
  *(_OWORD *)(v5 + 56) = 0u;
  *(_QWORD *)&v6 = v5 + 24;
  *((_QWORD *)&v6 + 1) = v5;
  *(_OWORD *)&__str[16] = v6;
  v24 = 0;
  v25 = 0u;
  v28 = &v24;
  v29 = 0;
  v7 = (__int128 *)operator new(0x20uLL);
  v8 = 0;
  v9 = 0;
  v24 = v7;
  *(_QWORD *)&v25 = v7;
  *((_QWORD *)&v25 + 1) = v7 + 2;
  do
  {
    v10 = v8;
    v11 = *(_OWORD *)&__str[16 * v9];
    *v7 = v11;
    if (*((_QWORD *)&v11 + 1))
    {
      v12 = (unint64_t *)(*((_QWORD *)&v11 + 1) + 8);
      do
        v13 = __ldxr(v12);
      while (__stxr(v13 + 1, v12));
    }
    ++v7;
    v8 = 1;
    v9 = 1;
  }
  while ((v10 & 1) == 0);
  *(_QWORD *)&v25 = v7;
  mlcore::CreateAndPredicate(&v24, &v26);
  *(_OWORD *)(v0 + 32) = 0u;
  *(_OWORD *)(v0 + 48) = 0u;
  *(_OWORD *)(v0 + 16) = 0u;
  *(_QWORD *)v0 = &off_24C3398B8;
  v14 = v27;
  *(_QWORD *)(v0 + 64) = v26;
  *(_QWORD *)(v0 + 72) = v14;
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldxr(p_shared_owners);
    while (__stxr(v16 + 1, p_shared_owners));
    v17 = v27;
    mlcore::ItemPropertyHasStreamingAsset(void)::property = v0;
    if (v27)
    {
      v18 = (unint64_t *)&v27->__shared_owners_;
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v19 - 1, v18));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
    }
  }
  else
  {
    mlcore::ItemPropertyHasStreamingAsset(void)::property = v0;
  }
  v28 = &v24;
  std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v28);
  for (i = 16; i != -16; i -= 16)
    std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)&__str[i]);
  v21 = mlcore::ItemPropertyHasStreamingAsset(void)::property;
  std::string::basic_string[abi:ne180100]<0>(__str, "has_streaming_asset");
  std::string::operator=((std::string *)(v21 + 40), (const std::string *)__str);
  if ((__str[23] & 0x80000000) != 0)
    operator delete(*(void **)__str);
  v22 = mlcore::TypedEntityClass<mlcore::Item>::sharedPointer();
  v23 = mlcore::ItemPropertyHasStreamingAsset(void)::property;
  std::string::basic_string[abi:ne180100]<0>(__str, "hasStreamingAsset");
  mlcore::EntityClass::setPropertyForName(v22, v23, (std::string *)__str);
  if ((__str[23] & 0x80000000) != 0)
    operator delete(*(void **)__str);
}

void sub_20A782CE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyHasLoFiStreamingAsset(void)::$_0 &&>>()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  std::__shared_weak_count *v3;
  unint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  std::string __str;

  v0 = operator new();
  v1 = mlcore::ItemPropertyBaseLocationID((mlcore *)v0);
  v2 = (char *)operator new(0x48uLL);
  v3 = (std::__shared_weak_count *)v2;
  *(_OWORD *)(v2 + 8) = 0u;
  v4 = (unint64_t *)(v2 + 8);
  *(_QWORD *)v2 = &off_24C33CE88;
  *((_QWORD *)v2 + 4) = v1;
  *((_QWORD *)v2 + 5) = 0;
  *((_QWORD *)v2 + 3) = &unk_24C339CA8;
  *((_QWORD *)v2 + 6) = 100;
  *(_OWORD *)(v2 + 56) = 0u;
  *(_OWORD *)(v0 + 16) = 0u;
  *(_OWORD *)(v0 + 32) = 0u;
  *(_OWORD *)(v0 + 48) = 0u;
  *(_QWORD *)v0 = &off_24C3398B8;
  *(_QWORD *)(v0 + 64) = v2 + 24;
  *(_QWORD *)(v0 + 72) = v2;
  do
    v5 = __ldxr(v4);
  while (__stxr(v5 + 1, v4));
  mlcore::ItemPropertyHasLoFiStreamingAsset(void)::property = v0;
  do
    v6 = __ldaxr(v4);
  while (__stlxr(v6 - 1, v4));
  if (!v6)
  {
    (*(void (**)(char *))(*(_QWORD *)v2 + 16))(v2);
    std::__shared_weak_count::__release_weak(v3);
  }
  v7 = mlcore::ItemPropertyHasLoFiStreamingAsset(void)::property;
  std::string::basic_string[abi:ne180100]<0>(&__str, "has_lofi_streaming_asset");
  std::string::operator=((std::string *)(v7 + 40), &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  v8 = mlcore::TypedEntityClass<mlcore::Item>::sharedPointer();
  v9 = mlcore::ItemPropertyHasLoFiStreamingAsset(void)::property;
  std::string::basic_string[abi:ne180100]<0>(&__str, "hasLoFiStreamingAsset");
  mlcore::EntityClass::setPropertyForName(v8, v9, &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
}

void sub_20A782F04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t mlcore::ItemPropertyHasHiFiStreamingAsset(mlcore *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&mlcore::ItemPropertyHasHiFiStreamingAsset(void)::once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&mlcore::ItemPropertyHasHiFiStreamingAsset(void)::once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyHasHiFiStreamingAsset(void)::$_0 &&>>);
  }
  return mlcore::ItemPropertyHasHiFiStreamingAsset(void)::property;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyHasHiFiStreamingAsset(void)::$_0 &&>>()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  std::__shared_weak_count *v3;
  unint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  std::string __str;

  v0 = operator new();
  v1 = mlcore::ItemPropertyBaseLocationID((mlcore *)v0);
  v2 = (char *)operator new(0x48uLL);
  v3 = (std::__shared_weak_count *)v2;
  *(_OWORD *)(v2 + 8) = 0u;
  v4 = (unint64_t *)(v2 + 8);
  *(_QWORD *)v2 = &off_24C33CE88;
  *((_QWORD *)v2 + 4) = v1;
  *((_QWORD *)v2 + 5) = 0;
  *((_QWORD *)v2 + 3) = &unk_24C339CA8;
  *((_QWORD *)v2 + 6) = 200;
  *(_OWORD *)(v2 + 56) = 0u;
  *(_OWORD *)(v0 + 16) = 0u;
  *(_OWORD *)(v0 + 32) = 0u;
  *(_OWORD *)(v0 + 48) = 0u;
  *(_QWORD *)v0 = &off_24C3398B8;
  *(_QWORD *)(v0 + 64) = v2 + 24;
  *(_QWORD *)(v0 + 72) = v2;
  do
    v5 = __ldxr(v4);
  while (__stxr(v5 + 1, v4));
  mlcore::ItemPropertyHasHiFiStreamingAsset(void)::property = v0;
  do
    v6 = __ldaxr(v4);
  while (__stlxr(v6 - 1, v4));
  if (!v6)
  {
    (*(void (**)(char *))(*(_QWORD *)v2 + 16))(v2);
    std::__shared_weak_count::__release_weak(v3);
  }
  v7 = mlcore::ItemPropertyHasHiFiStreamingAsset(void)::property;
  std::string::basic_string[abi:ne180100]<0>(&__str, "has_hifi_streaming_asset");
  std::string::operator=((std::string *)(v7 + 40), &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  v8 = mlcore::TypedEntityClass<mlcore::Item>::sharedPointer();
  v9 = mlcore::ItemPropertyHasHiFiStreamingAsset(void)::property;
  std::string::basic_string[abi:ne180100]<0>(&__str, "hasHiFiStreamingAsset");
  mlcore::EntityClass::setPropertyForName(v8, v9, &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
}

void sub_20A783100(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t mlcore::ItemPropertyHasCloudLibraryID(mlcore *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&mlcore::ItemPropertyHasCloudLibraryID(void)::once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&mlcore::ItemPropertyHasCloudLibraryID(void)::once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyHasCloudLibraryID(void)::$_0 &&>>);
  }
  return mlcore::ItemPropertyHasCloudLibraryID(void)::property;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyHasCloudLibraryID(void)::$_0 &&>>()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  std::__shared_weak_count *v3;
  unint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  std::string __str;

  v0 = operator new();
  v1 = mlcore::ItemPropertyStoreCloudID((mlcore *)v0);
  v2 = (char *)operator new(0x48uLL);
  v3 = (std::__shared_weak_count *)v2;
  *(_OWORD *)(v2 + 8) = 0u;
  v4 = (unint64_t *)(v2 + 8);
  *(_QWORD *)v2 = &off_24C33CE88;
  *((_QWORD *)v2 + 4) = v1;
  *((_QWORD *)v2 + 5) = 0x100000000;
  *((_QWORD *)v2 + 3) = &unk_24C339CA8;
  *((_QWORD *)v2 + 6) = 0;
  *(_OWORD *)(v2 + 56) = 0u;
  *(_OWORD *)(v0 + 16) = 0u;
  *(_OWORD *)(v0 + 32) = 0u;
  *(_OWORD *)(v0 + 48) = 0u;
  *(_QWORD *)v0 = &off_24C3398B8;
  *(_QWORD *)(v0 + 64) = v2 + 24;
  *(_QWORD *)(v0 + 72) = v2;
  do
    v5 = __ldxr(v4);
  while (__stxr(v5 + 1, v4));
  mlcore::ItemPropertyHasCloudLibraryID(void)::property = v0;
  do
    v6 = __ldaxr(v4);
  while (__stlxr(v6 - 1, v4));
  if (!v6)
  {
    (*(void (**)(char *))(*(_QWORD *)v2 + 16))(v2);
    std::__shared_weak_count::__release_weak(v3);
  }
  v7 = mlcore::ItemPropertyHasCloudLibraryID(void)::property;
  std::string::basic_string[abi:ne180100]<0>(&__str, "has_cloud_library_id");
  std::string::operator=((std::string *)(v7 + 40), &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  v8 = mlcore::TypedEntityClass<mlcore::Item>::sharedPointer();
  v9 = mlcore::ItemPropertyHasCloudLibraryID(void)::property;
  std::string::basic_string[abi:ne180100]<0>(&__str, "hasCloudLibraryID");
  mlcore::EntityClass::setPropertyForName(v8, v9, &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
}

void sub_20A783304(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t mlcore::ItemPropertyEpisodeID(mlcore *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&mlcore::ItemPropertyEpisodeID(void)::once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&mlcore::ItemPropertyEpisodeID(void)::once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyEpisodeID(void)::$_0 &&>>);
  }
  return mlcore::ItemPropertyEpisodeID(void)::property;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyEpisodeID(void)::$_0 &&>>()
{
  uint64_t v0;
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  mlcore::ItemVideoTable **v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  std::string *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  std::string *v19;
  __int128 v20;
  std::string v21;
  std::string __str;
  _QWORD v23[2];

  v0 = operator new();
  v1 = (_QWORD *)mediaplatform::Singleton<mlcore::ItemVideoTable>::sharedInstance();
  v2 = (std::__shared_weak_count *)v1[1];
  v23[0] = *v1;
  v23[1] = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  v5 = (mlcore::ItemVideoTable **)mediaplatform::Singleton<mlcore::ItemVideoTable>::sharedInstance();
  mlcore::ItemVideoTable::episodeIDColumn(*v5, (uint64_t)&__str);
  mlcore::DatabaseModelProperty<std::string>::DatabaseModelProperty(v0, v23, (uint64_t)&__str);
  mlcore::ItemPropertyEpisodeID(void)::property = v0;
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&__str);
  if (v2)
  {
    v6 = (unint64_t *)&v2->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v8 = mlcore::ItemPropertyEpisodeID(void)::property;
  std::string::basic_string[abi:ne180100]<0>(&__str, "");
  std::string::operator=((std::string *)(v8 + 40), &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  v9 = mlcore::TypedEntityClass<mlcore::Item>::sharedPointer();
  v10 = mlcore::ItemPropertyEpisodeID(void)::property;
  v11 = mediaplatform::Singleton<mlcore::ItemVideoTable>::sharedInstance();
  v12 = *(_QWORD *)v11;
  if (*(char *)(*(_QWORD *)v11 + 31) >= 0)
    v13 = *(unsigned __int8 *)(*(_QWORD *)v11 + 31);
  else
    v13 = *(_QWORD *)(*(_QWORD *)v11 + 16);
  v14 = &v21;
  std::string::basic_string[abi:ne180100]((uint64_t)&v21, v13 + 1);
  if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v14 = (std::string *)v21.__r_.__value_.__r.__words[0];
  if (v13)
  {
    v17 = *(char **)(v12 + 8);
    v16 = (char *)(v12 + 8);
    v15 = v17;
    if (v16[23] >= 0)
      v18 = v16;
    else
      v18 = v15;
    memmove(v14, v18, v13);
  }
  *(_WORD *)((char *)&v14->__r_.__value_.__l.__data_ + v13) = 46;
  v19 = std::string::append(&v21, "episodeID");
  v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  __str.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  mlcore::EntityClass::setPropertyForName(v9, v10, &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
}

void sub_20A783570(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyEpisodeSortID(void)::$_0 &&>>()
{
  uint64_t v0;
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  mlcore::ItemTable **v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  std::string *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  std::string *v19;
  __int128 v20;
  std::string v21;
  std::string __p;
  char v23;
  _QWORD v24[2];

  v0 = operator new();
  v1 = (_QWORD *)mediaplatform::Singleton<mlcore::ItemTable>::sharedInstance();
  v2 = (std::__shared_weak_count *)v1[1];
  v24[0] = *v1;
  v24[1] = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  v5 = (mlcore::ItemTable **)mediaplatform::Singleton<mlcore::ItemTable>::sharedInstance();
  mlcore::ItemTable::episodeSortIDColumn(*v5, (uint64_t)&__p);
  mlcore::DatabaseModelProperty<int>::DatabaseModelProperty(v0, v24, (uint64_t)&__p);
  mlcore::ItemPropertyEpisodeSortID(void)::property = v0;
  if (v23 < 0)
    operator delete((void *)__p.__r_.__value_.__l.__size_);
  if (v2)
  {
    v6 = (unint64_t *)&v2->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v8 = mlcore::ItemPropertyEpisodeSortID(void)::property;
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  std::string::operator=((std::string *)(v8 + 40), &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v9 = mlcore::TypedEntityClass<mlcore::Item>::sharedPointer();
  v10 = mlcore::ItemPropertyEpisodeSortID(void)::property;
  v11 = mediaplatform::Singleton<mlcore::ItemTable>::sharedInstance();
  v12 = *(_QWORD *)v11;
  if (*(char *)(*(_QWORD *)v11 + 31) >= 0)
    v13 = *(unsigned __int8 *)(*(_QWORD *)v11 + 31);
  else
    v13 = *(_QWORD *)(*(_QWORD *)v11 + 16);
  v14 = &v21;
  std::string::basic_string[abi:ne180100]((uint64_t)&v21, v13 + 1);
  if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v14 = (std::string *)v21.__r_.__value_.__r.__words[0];
  if (v13)
  {
    v17 = *(char **)(v12 + 8);
    v16 = (char *)(v12 + 8);
    v15 = v17;
    if (v16[23] >= 0)
      v18 = v16;
    else
      v18 = v15;
    memmove(v14, v18, v13);
  }
  *(_WORD *)((char *)&v14->__r_.__value_.__l.__data_ + v13) = 46;
  v19 = std::string::append(&v21, "episodeSortID");
  v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  __p.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  mlcore::EntityClass::setPropertyForName(v9, v10, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
}

void sub_20A7837F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyDateAdded(void)::$_0 &&>>()
{
  uint64_t v0;
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  mlcore::ItemTable **v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  std::string *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  std::string *v19;
  __int128 v20;
  std::string v21;
  std::string __p;
  char v23;
  _QWORD v24[2];

  v0 = operator new();
  v1 = (_QWORD *)mediaplatform::Singleton<mlcore::ItemTable>::sharedInstance();
  v2 = (std::__shared_weak_count *)v1[1];
  v24[0] = *v1;
  v24[1] = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  v5 = (mlcore::ItemTable **)mediaplatform::Singleton<mlcore::ItemTable>::sharedInstance();
  mlcore::ItemTable::dateAddedColumn(*v5, (uint64_t)&__p);
  mlcore::DatabaseModelProperty<long long>::DatabaseModelProperty(v0, v24, (uint64_t)&__p);
  mlcore::ItemPropertyDateAdded(void)::property = v0;
  if (v23 < 0)
    operator delete((void *)__p.__r_.__value_.__l.__size_);
  if (v2)
  {
    v6 = (unint64_t *)&v2->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v8 = mlcore::ItemPropertyDateAdded(void)::property;
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  std::string::operator=((std::string *)(v8 + 40), &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v9 = mlcore::TypedEntityClass<mlcore::Item>::sharedPointer();
  v10 = mlcore::ItemPropertyDateAdded(void)::property;
  v11 = mediaplatform::Singleton<mlcore::ItemTable>::sharedInstance();
  v12 = *(_QWORD *)v11;
  if (*(char *)(*(_QWORD *)v11 + 31) >= 0)
    v13 = *(unsigned __int8 *)(*(_QWORD *)v11 + 31);
  else
    v13 = *(_QWORD *)(*(_QWORD *)v11 + 16);
  v14 = &v21;
  std::string::basic_string[abi:ne180100]((uint64_t)&v21, v13 + 1);
  if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v14 = (std::string *)v21.__r_.__value_.__r.__words[0];
  if (v13)
  {
    v17 = *(char **)(v12 + 8);
    v16 = (char *)(v12 + 8);
    v15 = v17;
    if (v16[23] >= 0)
      v18 = v16;
    else
      v18 = v15;
    memmove(v14, v18, v13);
  }
  *(_WORD *)((char *)&v14->__r_.__value_.__l.__data_ + v13) = 46;
  v19 = std::string::append(&v21, "dateAdded");
  v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  __p.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  mlcore::EntityClass::setPropertyForName(v9, v10, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
}

void sub_20A783A88(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

uint64_t mlcore::ItemPropertyDateModified(mlcore *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&mlcore::ItemPropertyDateModified(void)::once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&mlcore::ItemPropertyDateModified(void)::once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyDateModified(void)::$_0 &&>>);
  }
  return mlcore::ItemPropertyDateModified(void)::property;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyDateModified(void)::$_0 &&>>()
{
  uint64_t v0;
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  mlcore::ItemExtraTable **v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  std::string *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  std::string *v19;
  __int128 v20;
  std::string v21;
  std::string __p;
  char v23;
  _QWORD v24[2];

  v0 = operator new();
  v1 = (_QWORD *)mediaplatform::Singleton<mlcore::ItemExtraTable>::sharedInstance();
  v2 = (std::__shared_weak_count *)v1[1];
  v24[0] = *v1;
  v24[1] = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  v5 = (mlcore::ItemExtraTable **)mediaplatform::Singleton<mlcore::ItemExtraTable>::sharedInstance();
  mlcore::ItemExtraTable::dateModifiedColumn(*v5, (uint64_t)&__p);
  mlcore::DatabaseModelProperty<long long>::DatabaseModelProperty(v0, v24, (uint64_t)&__p);
  mlcore::ItemPropertyDateModified(void)::property = v0;
  if (v23 < 0)
    operator delete((void *)__p.__r_.__value_.__l.__size_);
  if (v2)
  {
    v6 = (unint64_t *)&v2->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v8 = mlcore::ItemPropertyDateModified(void)::property;
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  std::string::operator=((std::string *)(v8 + 40), &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v9 = mlcore::TypedEntityClass<mlcore::Item>::sharedPointer();
  v10 = mlcore::ItemPropertyDateModified(void)::property;
  v11 = mediaplatform::Singleton<mlcore::ItemExtraTable>::sharedInstance();
  v12 = *(_QWORD *)v11;
  if (*(char *)(*(_QWORD *)v11 + 31) >= 0)
    v13 = *(unsigned __int8 *)(*(_QWORD *)v11 + 31);
  else
    v13 = *(_QWORD *)(*(_QWORD *)v11 + 16);
  v14 = &v21;
  std::string::basic_string[abi:ne180100]((uint64_t)&v21, v13 + 1);
  if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v14 = (std::string *)v21.__r_.__value_.__r.__words[0];
  if (v13)
  {
    v17 = *(char **)(v12 + 8);
    v16 = (char *)(v12 + 8);
    v15 = v17;
    if (v16[23] >= 0)
      v18 = v16;
    else
      v18 = v15;
    memmove(v14, v18, v13);
  }
  *(_WORD *)((char *)&v14->__r_.__value_.__l.__data_ + v13) = 46;
  v19 = std::string::append(&v21, "dateModified");
  v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  __p.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  mlcore::EntityClass::setPropertyForName(v9, v10, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
}

void sub_20A783D74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyDateDownloaded(void)::$_0 &&>>()
{
  uint64_t v0;
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  mlcore::ItemTable **v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  std::string *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  std::string *v19;
  __int128 v20;
  std::string v21;
  std::string __p;
  char v23;
  _QWORD v24[2];

  v0 = operator new();
  v1 = (_QWORD *)mediaplatform::Singleton<mlcore::ItemTable>::sharedInstance();
  v2 = (std::__shared_weak_count *)v1[1];
  v24[0] = *v1;
  v24[1] = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  v5 = (mlcore::ItemTable **)mediaplatform::Singleton<mlcore::ItemTable>::sharedInstance();
  mlcore::ItemTable::dateDownloadedColumn(*v5, (uint64_t)&__p);
  mlcore::DatabaseModelProperty<long long>::DatabaseModelProperty(v0, v24, (uint64_t)&__p);
  mlcore::ItemPropertyDateDownloaded(void)::property = v0;
  if (v23 < 0)
    operator delete((void *)__p.__r_.__value_.__l.__size_);
  if (v2)
  {
    v6 = (unint64_t *)&v2->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v8 = mlcore::ItemPropertyDateDownloaded(void)::property;
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  std::string::operator=((std::string *)(v8 + 40), &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v9 = mlcore::TypedEntityClass<mlcore::Item>::sharedPointer();
  v10 = mlcore::ItemPropertyDateDownloaded(void)::property;
  v11 = mediaplatform::Singleton<mlcore::ItemTable>::sharedInstance();
  v12 = *(_QWORD *)v11;
  if (*(char *)(*(_QWORD *)v11 + 31) >= 0)
    v13 = *(unsigned __int8 *)(*(_QWORD *)v11 + 31);
  else
    v13 = *(_QWORD *)(*(_QWORD *)v11 + 16);
  v14 = &v21;
  std::string::basic_string[abi:ne180100]((uint64_t)&v21, v13 + 1);
  if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v14 = (std::string *)v21.__r_.__value_.__r.__words[0];
  if (v13)
  {
    v17 = *(char **)(v12 + 8);
    v16 = (char *)(v12 + 8);
    v15 = v17;
    if (v16[23] >= 0)
      v18 = v16;
    else
      v18 = v15;
    memmove(v14, v18, v13);
  }
  *(_WORD *)((char *)&v14->__r_.__value_.__l.__data_ + v13) = 46;
  v19 = std::string::append(&v21, "dateDownloaded");
  v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  __p.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  mlcore::EntityClass::setPropertyForName(v9, v10, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
}

void sub_20A784004(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

uint64_t mlcore::ItemPropertyEQPreset(mlcore *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&mlcore::ItemPropertyEQPreset(void)::once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&mlcore::ItemPropertyEQPreset(void)::once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyEQPreset(void)::$_0 &&>>);
  }
  return mlcore::ItemPropertyEQPreset(void)::property;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyEQPreset(void)::$_0 &&>>()
{
  uint64_t v0;
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  mlcore::ItemPlaybackTable **v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  std::string *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  std::string *v19;
  __int128 v20;
  std::string v21;
  std::string __str;
  _QWORD v23[2];

  v0 = operator new();
  v1 = (_QWORD *)mediaplatform::Singleton<mlcore::ItemPlaybackTable>::sharedInstance();
  v2 = (std::__shared_weak_count *)v1[1];
  v23[0] = *v1;
  v23[1] = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  v5 = (mlcore::ItemPlaybackTable **)mediaplatform::Singleton<mlcore::ItemPlaybackTable>::sharedInstance();
  mlcore::ItemPlaybackTable::EQPresetColumn(*v5, (uint64_t)&__str);
  mlcore::DatabaseModelProperty<std::string>::DatabaseModelProperty(v0, v23, (uint64_t)&__str);
  mlcore::ItemPropertyEQPreset(void)::property = v0;
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&__str);
  if (v2)
  {
    v6 = (unint64_t *)&v2->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v8 = mlcore::ItemPropertyEQPreset(void)::property;
  std::string::basic_string[abi:ne180100]<0>(&__str, "");
  std::string::operator=((std::string *)(v8 + 40), &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  v9 = mlcore::TypedEntityClass<mlcore::Item>::sharedPointer();
  v10 = mlcore::ItemPropertyEQPreset(void)::property;
  v11 = mediaplatform::Singleton<mlcore::ItemPlaybackTable>::sharedInstance();
  v12 = *(_QWORD *)v11;
  if (*(char *)(*(_QWORD *)v11 + 31) >= 0)
    v13 = *(unsigned __int8 *)(*(_QWORD *)v11 + 31);
  else
    v13 = *(_QWORD *)(*(_QWORD *)v11 + 16);
  v14 = &v21;
  std::string::basic_string[abi:ne180100]((uint64_t)&v21, v13 + 1);
  if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v14 = (std::string *)v21.__r_.__value_.__r.__words[0];
  if (v13)
  {
    v17 = *(char **)(v12 + 8);
    v16 = (char *)(v12 + 8);
    v15 = v17;
    if (v16[23] >= 0)
      v18 = v16;
    else
      v18 = v15;
    memmove(v14, v18, v13);
  }
  *(_WORD *)((char *)&v14->__r_.__value_.__l.__data_ + v13) = 46;
  v19 = std::string::append(&v21, "EQPreset");
  v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  __str.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  mlcore::EntityClass::setPropertyForName(v9, v10, &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
}

void sub_20A7842E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyGrouping(void)::$_0 &&>>()
{
  uint64_t v0;
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  mlcore::ItemExtraTable **v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  std::string *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  std::string *v19;
  __int128 v20;
  std::string v21;
  std::string __str;
  _QWORD v23[2];

  v0 = operator new();
  v1 = (_QWORD *)mediaplatform::Singleton<mlcore::ItemExtraTable>::sharedInstance();
  v2 = (std::__shared_weak_count *)v1[1];
  v23[0] = *v1;
  v23[1] = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  v5 = (mlcore::ItemExtraTable **)mediaplatform::Singleton<mlcore::ItemExtraTable>::sharedInstance();
  mlcore::ItemExtraTable::groupingColumn(*v5, (uint64_t)&__str);
  mlcore::DatabaseModelProperty<std::string>::DatabaseModelProperty(v0, v23, (uint64_t)&__str);
  mlcore::ItemPropertyGrouping(void)::property = v0;
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&__str);
  if (v2)
  {
    v6 = (unint64_t *)&v2->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v8 = mlcore::ItemPropertyGrouping(void)::property;
  std::string::basic_string[abi:ne180100]<0>(&__str, "");
  std::string::operator=((std::string *)(v8 + 40), &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  v9 = mlcore::TypedEntityClass<mlcore::Item>::sharedPointer();
  v10 = mlcore::ItemPropertyGrouping(void)::property;
  v11 = mediaplatform::Singleton<mlcore::ItemExtraTable>::sharedInstance();
  v12 = *(_QWORD *)v11;
  if (*(char *)(*(_QWORD *)v11 + 31) >= 0)
    v13 = *(unsigned __int8 *)(*(_QWORD *)v11 + 31);
  else
    v13 = *(_QWORD *)(*(_QWORD *)v11 + 16);
  v14 = &v21;
  std::string::basic_string[abi:ne180100]((uint64_t)&v21, v13 + 1);
  if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v14 = (std::string *)v21.__r_.__value_.__r.__words[0];
  if (v13)
  {
    v17 = *(char **)(v12 + 8);
    v16 = (char *)(v12 + 8);
    v15 = v17;
    if (v16[23] >= 0)
      v18 = v16;
    else
      v18 = v15;
    memmove(v14, v18, v13);
  }
  *(_WORD *)((char *)&v14->__r_.__value_.__l.__data_ + v13) = 46;
  v19 = std::string::append(&v21, "grouping");
  v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  __str.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  mlcore::EntityClass::setPropertyForName(v9, v10, &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
}

void sub_20A784568(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyStoreID(void)::$_0 &&>>()
{
  uint64_t v0;
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  mlcore::ItemStoreTable **v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  std::string *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  std::string *v19;
  __int128 v20;
  std::string v21;
  std::string __p;
  char v23;
  _QWORD v24[2];

  v0 = operator new();
  v1 = (_QWORD *)mediaplatform::Singleton<mlcore::ItemStoreTable>::sharedInstance();
  v2 = (std::__shared_weak_count *)v1[1];
  v24[0] = *v1;
  v24[1] = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  v5 = (mlcore::ItemStoreTable **)mediaplatform::Singleton<mlcore::ItemStoreTable>::sharedInstance();
  mlcore::ItemStoreTable::storeItemIDColumn(*v5, (uint64_t)&__p);
  mlcore::DatabaseModelProperty<long long>::DatabaseModelProperty(v0, v24, (uint64_t)&__p);
  mlcore::ItemPropertyStoreID(void)::property = v0;
  if (v23 < 0)
    operator delete((void *)__p.__r_.__value_.__l.__size_);
  if (v2)
  {
    v6 = (unint64_t *)&v2->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v8 = mlcore::ItemPropertyStoreID(void)::property;
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  std::string::operator=((std::string *)(v8 + 40), &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v9 = mlcore::TypedEntityClass<mlcore::Item>::sharedPointer();
  v10 = mlcore::ItemPropertyStoreID(void)::property;
  v11 = mediaplatform::Singleton<mlcore::ItemStoreTable>::sharedInstance();
  v12 = *(_QWORD *)v11;
  if (*(char *)(*(_QWORD *)v11 + 31) >= 0)
    v13 = *(unsigned __int8 *)(*(_QWORD *)v11 + 31);
  else
    v13 = *(_QWORD *)(*(_QWORD *)v11 + 16);
  v14 = &v21;
  std::string::basic_string[abi:ne180100]((uint64_t)&v21, v13 + 1);
  if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v14 = (std::string *)v21.__r_.__value_.__r.__words[0];
  if (v13)
  {
    v17 = *(char **)(v12 + 8);
    v16 = (char *)(v12 + 8);
    v15 = v17;
    if (v16[23] >= 0)
      v18 = v16;
    else
      v18 = v15;
    memmove(v14, v18, v13);
  }
  *(_WORD *)((char *)&v14->__r_.__value_.__l.__data_ + v13) = 46;
  v19 = std::string::append(&v21, "storeID");
  v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  __p.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  mlcore::EntityClass::setPropertyForName(v9, v10, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
}

void sub_20A7847F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyCloudAssetAvailable(void)::$_0 &&>>()
{
  uint64_t v0;
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  mlcore::ItemStoreTable **v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  std::string *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  std::string *v19;
  __int128 v20;
  std::string v21;
  std::string __p;
  char v23;
  _QWORD v24[2];

  v0 = operator new();
  v1 = (_QWORD *)mediaplatform::Singleton<mlcore::ItemStoreTable>::sharedInstance();
  v2 = (std::__shared_weak_count *)v1[1];
  v24[0] = *v1;
  v24[1] = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  v5 = (mlcore::ItemStoreTable **)mediaplatform::Singleton<mlcore::ItemStoreTable>::sharedInstance();
  mlcore::ItemStoreTable::cloudAssetAvailableColumn(*v5, (uint64_t)&__p);
  mlcore::DatabaseModelProperty<long long>::DatabaseModelProperty(v0, v24, (uint64_t)&__p);
  mlcore::ItemPropertyCloudAssetAvailable(void)::property = v0;
  if (v23 < 0)
    operator delete((void *)__p.__r_.__value_.__l.__size_);
  if (v2)
  {
    v6 = (unint64_t *)&v2->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v8 = mlcore::ItemPropertyCloudAssetAvailable(void)::property;
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  std::string::operator=((std::string *)(v8 + 40), &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v9 = mlcore::TypedEntityClass<mlcore::Item>::sharedPointer();
  v10 = mlcore::ItemPropertyCloudAssetAvailable(void)::property;
  v11 = mediaplatform::Singleton<mlcore::ItemStoreTable>::sharedInstance();
  v12 = *(_QWORD *)v11;
  if (*(char *)(*(_QWORD *)v11 + 31) >= 0)
    v13 = *(unsigned __int8 *)(*(_QWORD *)v11 + 31);
  else
    v13 = *(_QWORD *)(*(_QWORD *)v11 + 16);
  v14 = &v21;
  std::string::basic_string[abi:ne180100]((uint64_t)&v21, v13 + 1);
  if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v14 = (std::string *)v21.__r_.__value_.__r.__words[0];
  if (v13)
  {
    v17 = *(char **)(v12 + 8);
    v16 = (char *)(v12 + 8);
    v15 = v17;
    if (v16[23] >= 0)
      v18 = v16;
    else
      v18 = v15;
    memmove(v14, v18, v13);
  }
  *(_WORD *)((char *)&v14->__r_.__value_.__l.__data_ + v13) = 46;
  v19 = std::string::append(&v21, "cloudAssetAvailable");
  v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  __p.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  mlcore::EntityClass::setPropertyForName(v9, v10, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
}

void sub_20A784A80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyStorePlaylistID(void)::$_0 &&>>()
{
  uint64_t v0;
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  mlcore::ItemStoreTable **v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  std::string *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  std::string *v19;
  __int128 v20;
  std::string v21;
  std::string __p;
  char v23;
  _QWORD v24[2];

  v0 = operator new();
  v1 = (_QWORD *)mediaplatform::Singleton<mlcore::ItemStoreTable>::sharedInstance();
  v2 = (std::__shared_weak_count *)v1[1];
  v24[0] = *v1;
  v24[1] = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  v5 = (mlcore::ItemStoreTable **)mediaplatform::Singleton<mlcore::ItemStoreTable>::sharedInstance();
  mlcore::ItemStoreTable::storePlaylistIDColumn(*v5, (uint64_t)&__p);
  mlcore::DatabaseModelProperty<long long>::DatabaseModelProperty(v0, v24, (uint64_t)&__p);
  mlcore::ItemPropertyStorePlaylistID(void)::property = v0;
  if (v23 < 0)
    operator delete((void *)__p.__r_.__value_.__l.__size_);
  if (v2)
  {
    v6 = (unint64_t *)&v2->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v8 = mlcore::ItemPropertyStorePlaylistID(void)::property;
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  std::string::operator=((std::string *)(v8 + 40), &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v9 = mlcore::TypedEntityClass<mlcore::Item>::sharedPointer();
  v10 = mlcore::ItemPropertyStorePlaylistID(void)::property;
  v11 = mediaplatform::Singleton<mlcore::ItemStoreTable>::sharedInstance();
  v12 = *(_QWORD *)v11;
  if (*(char *)(*(_QWORD *)v11 + 31) >= 0)
    v13 = *(unsigned __int8 *)(*(_QWORD *)v11 + 31);
  else
    v13 = *(_QWORD *)(*(_QWORD *)v11 + 16);
  v14 = &v21;
  std::string::basic_string[abi:ne180100]((uint64_t)&v21, v13 + 1);
  if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v14 = (std::string *)v21.__r_.__value_.__r.__words[0];
  if (v13)
  {
    v17 = *(char **)(v12 + 8);
    v16 = (char *)(v12 + 8);
    v15 = v17;
    if (v16[23] >= 0)
      v18 = v16;
    else
      v18 = v15;
    memmove(v14, v18, v13);
  }
  *(_WORD *)((char *)&v14->__r_.__value_.__l.__data_ + v13) = 46;
  v19 = std::string::append(&v21, "storePlaylistID");
  v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  __p.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  mlcore::EntityClass::setPropertyForName(v9, v10, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
}

void sub_20A784D10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyHomeSharingID(void)::$_0 &&>>()
{
  uint64_t v0;
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  mlcore::ItemStoreTable **v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  std::string *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  std::string *v19;
  __int128 v20;
  std::string v21;
  std::string __p;
  char v23;
  _QWORD v24[2];

  v0 = operator new();
  v1 = (_QWORD *)mediaplatform::Singleton<mlcore::ItemStoreTable>::sharedInstance();
  v2 = (std::__shared_weak_count *)v1[1];
  v24[0] = *v1;
  v24[1] = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  v5 = (mlcore::ItemStoreTable **)mediaplatform::Singleton<mlcore::ItemStoreTable>::sharedInstance();
  mlcore::ItemStoreTable::homeSharingIDColumn(*v5, (uint64_t)&__p);
  mlcore::DatabaseModelProperty<long long>::DatabaseModelProperty(v0, v24, (uint64_t)&__p);
  mlcore::ItemPropertyHomeSharingID(void)::property = v0;
  if (v23 < 0)
    operator delete((void *)__p.__r_.__value_.__l.__size_);
  if (v2)
  {
    v6 = (unint64_t *)&v2->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v8 = mlcore::ItemPropertyHomeSharingID(void)::property;
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  std::string::operator=((std::string *)(v8 + 40), &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v9 = mlcore::TypedEntityClass<mlcore::Item>::sharedPointer();
  v10 = mlcore::ItemPropertyHomeSharingID(void)::property;
  v11 = mediaplatform::Singleton<mlcore::ItemStoreTable>::sharedInstance();
  v12 = *(_QWORD *)v11;
  if (*(char *)(*(_QWORD *)v11 + 31) >= 0)
    v13 = *(unsigned __int8 *)(*(_QWORD *)v11 + 31);
  else
    v13 = *(_QWORD *)(*(_QWORD *)v11 + 16);
  v14 = &v21;
  std::string::basic_string[abi:ne180100]((uint64_t)&v21, v13 + 1);
  if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v14 = (std::string *)v21.__r_.__value_.__r.__words[0];
  if (v13)
  {
    v17 = *(char **)(v12 + 8);
    v16 = (char *)(v12 + 8);
    v15 = v17;
    if (v16[23] >= 0)
      v18 = v16;
    else
      v18 = v15;
    memmove(v14, v18, v13);
  }
  *(_WORD *)((char *)&v14->__r_.__value_.__l.__data_ + v13) = 46;
  v19 = std::string::append(&v21, "homeSharingID");
  v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  __p.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  mlcore::EntityClass::setPropertyForName(v9, v10, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
}

void sub_20A784FA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyPodcastExternalGUID(void)::$_0 &&>>()
{
  uint64_t v0;
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  mlcore::ItemStoreTable **v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  std::string *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  std::string *v19;
  __int128 v20;
  std::string v21;
  std::string __str;
  _QWORD v23[2];

  v0 = operator new();
  v1 = (_QWORD *)mediaplatform::Singleton<mlcore::ItemStoreTable>::sharedInstance();
  v2 = (std::__shared_weak_count *)v1[1];
  v23[0] = *v1;
  v23[1] = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  v5 = (mlcore::ItemStoreTable **)mediaplatform::Singleton<mlcore::ItemStoreTable>::sharedInstance();
  mlcore::ItemStoreTable::externalGuidColumn(*v5, (uint64_t)&__str);
  mlcore::DatabaseModelProperty<std::string>::DatabaseModelProperty(v0, v23, (uint64_t)&__str);
  mlcore::ItemPropertyPodcastExternalGUID(void)::property = v0;
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&__str);
  if (v2)
  {
    v6 = (unint64_t *)&v2->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v8 = mlcore::ItemPropertyPodcastExternalGUID(void)::property;
  std::string::basic_string[abi:ne180100]<0>(&__str, "");
  std::string::operator=((std::string *)(v8 + 40), &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  v9 = mlcore::TypedEntityClass<mlcore::Item>::sharedPointer();
  v10 = mlcore::ItemPropertyPodcastExternalGUID(void)::property;
  v11 = mediaplatform::Singleton<mlcore::ItemStoreTable>::sharedInstance();
  v12 = *(_QWORD *)v11;
  if (*(char *)(*(_QWORD *)v11 + 31) >= 0)
    v13 = *(unsigned __int8 *)(*(_QWORD *)v11 + 31);
  else
    v13 = *(_QWORD *)(*(_QWORD *)v11 + 16);
  v14 = &v21;
  std::string::basic_string[abi:ne180100]((uint64_t)&v21, v13 + 1);
  if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v14 = (std::string *)v21.__r_.__value_.__r.__words[0];
  if (v13)
  {
    v17 = *(char **)(v12 + 8);
    v16 = (char *)(v12 + 8);
    v15 = v17;
    if (v16[23] >= 0)
      v18 = v16;
    else
      v18 = v15;
    memmove(v14, v18, v13);
  }
  *(_WORD *)((char *)&v14->__r_.__value_.__l.__data_ + v13) = 46;
  v19 = std::string::append(&v21, "podcastExternalGUID");
  v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  __str.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  mlcore::EntityClass::setPropertyForName(v9, v10, &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
}

void sub_20A785228(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

uint64_t mlcore::ItemPropertyHasAvailableArtwork(mlcore *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&mlcore::ItemPropertyHasAvailableArtwork(void)::once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&mlcore::ItemPropertyHasAvailableArtwork(void)::once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyHasAvailableArtwork(void)::$_0 &&>>);
  }
  return mlcore::ItemPropertyHasAvailableArtwork(void)::property;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyHasAvailableArtwork(void)::$_0 &&>>()
{
  uint64_t v0;
  uint64_t v1;
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  std::string __str;

  v0 = operator new();
  v1 = mlcore::ItemPropertyAvailableArtworkToken((mlcore *)v0);
  v2 = (std::__shared_weak_count *)operator new(0x30uLL);
  v3 = v2;
  v2->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  v2->__shared_weak_owners_ = 0;
  v2->__vftable = (std::__shared_weak_count_vtbl *)&off_24C33C7C0;
  v2[1].__shared_owners_ = v1;
  LOBYTE(v2[1].__shared_weak_owners_) = 0;
  v2[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_24C337060;
  *(_OWORD *)(v0 + 16) = 0u;
  *(_OWORD *)(v0 + 32) = 0u;
  *(_OWORD *)(v0 + 48) = 0u;
  *(_QWORD *)v0 = &off_24C3398B8;
  *(_QWORD *)(v0 + 64) = v2 + 1;
  *(_QWORD *)(v0 + 72) = v2;
  do
    v5 = __ldxr(p_shared_owners);
  while (__stxr(v5 + 1, p_shared_owners));
  mlcore::ItemPropertyHasAvailableArtwork(void)::property = v0;
  do
    v6 = __ldaxr(p_shared_owners);
  while (__stlxr(v6 - 1, p_shared_owners));
  if (!v6)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v3);
  }
  v7 = mlcore::ItemPropertyHasAvailableArtwork(void)::property;
  std::string::basic_string[abi:ne180100]<0>(&__str, "has_artwork");
  std::string::operator=((std::string *)(v7 + 40), &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  v8 = mlcore::TypedEntityClass<mlcore::Item>::sharedPointer();
  v9 = mlcore::ItemPropertyHasAvailableArtwork(void)::property;
  std::string::basic_string[abi:ne180100]<0>(&__str, "hasArtwork");
  mlcore::EntityClass::setPropertyForName(v8, v9, &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
}

void sub_20A785490(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_emplace<mlcore::NullPredicate<std::string>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C33C7C0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<mlcore::NullPredicate<std::string>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C33C7C0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x20BD27AFCLL);
}

uint64_t std::__shared_ptr_emplace<mlcore::NullPredicate<std::string>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyShowComposerAsArtist(void)::$_0 &&>>()
{
  uint64_t v0;
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  mlcore::ItemTable **v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  std::string *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  std::string *v19;
  __int128 v20;
  std::string v21;
  std::string __p;
  char v23;
  _QWORD v24[2];

  v0 = operator new();
  v1 = (_QWORD *)mediaplatform::Singleton<mlcore::ItemTable>::sharedInstance();
  v2 = (std::__shared_weak_count *)v1[1];
  v24[0] = *v1;
  v24[1] = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  v5 = (mlcore::ItemTable **)mediaplatform::Singleton<mlcore::ItemTable>::sharedInstance();
  mlcore::ItemTable::showComposerColumn(*v5, (uint64_t)&__p);
  mlcore::DatabaseModelProperty<int>::DatabaseModelProperty(v0, v24, (uint64_t)&__p);
  mlcore::ItemPropertyShowComposerAsArtist(void)::property = v0;
  if (v23 < 0)
    operator delete((void *)__p.__r_.__value_.__l.__size_);
  if (v2)
  {
    v6 = (unint64_t *)&v2->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v8 = mlcore::ItemPropertyShowComposerAsArtist(void)::property;
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  std::string::operator=((std::string *)(v8 + 40), &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v9 = mlcore::TypedEntityClass<mlcore::Item>::sharedPointer();
  v10 = mlcore::ItemPropertyShowComposerAsArtist(void)::property;
  v11 = mediaplatform::Singleton<mlcore::ItemTable>::sharedInstance();
  v12 = *(_QWORD *)v11;
  if (*(char *)(*(_QWORD *)v11 + 31) >= 0)
    v13 = *(unsigned __int8 *)(*(_QWORD *)v11 + 31);
  else
    v13 = *(_QWORD *)(*(_QWORD *)v11 + 16);
  v14 = &v21;
  std::string::basic_string[abi:ne180100]((uint64_t)&v21, v13 + 1);
  if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v14 = (std::string *)v21.__r_.__value_.__r.__words[0];
  if (v13)
  {
    v17 = *(char **)(v12 + 8);
    v16 = (char *)(v12 + 8);
    v15 = v17;
    if (v16[23] >= 0)
      v18 = v16;
    else
      v18 = v15;
    memmove(v14, v18, v13);
  }
  *(_WORD *)((char *)&v14->__r_.__value_.__l.__data_ + v13) = 46;
  v19 = std::string::append(&v21, "showComposerAsArtist");
  v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  __p.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  mlcore::EntityClass::setPropertyForName(v9, v10, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
}

void sub_20A7856F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyIsMusicShow(void)::$_0 &&>>()
{
  uint64_t v0;
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  mlcore::ItemTable **v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  std::string *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  std::string *v19;
  __int128 v20;
  std::string v21;
  std::string __p;
  char v23;
  _QWORD v24[2];

  v0 = operator new();
  v1 = (_QWORD *)mediaplatform::Singleton<mlcore::ItemTable>::sharedInstance();
  v2 = (std::__shared_weak_count *)v1[1];
  v24[0] = *v1;
  v24[1] = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  v5 = (mlcore::ItemTable **)mediaplatform::Singleton<mlcore::ItemTable>::sharedInstance();
  mlcore::ItemTable::isMusicShowColumn(*v5, (uint64_t)&__p);
  mlcore::DatabaseModelProperty<long long>::DatabaseModelProperty(v0, v24, (uint64_t)&__p);
  mlcore::ItemPropertyIsMusicShow(void)::property = v0;
  if (v23 < 0)
    operator delete((void *)__p.__r_.__value_.__l.__size_);
  if (v2)
  {
    v6 = (unint64_t *)&v2->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v8 = mlcore::ItemPropertyIsMusicShow(void)::property;
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  std::string::operator=((std::string *)(v8 + 40), &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v9 = mlcore::TypedEntityClass<mlcore::Item>::sharedPointer();
  v10 = mlcore::ItemPropertyIsMusicShow(void)::property;
  v11 = mediaplatform::Singleton<mlcore::ItemTable>::sharedInstance();
  v12 = *(_QWORD *)v11;
  if (*(char *)(*(_QWORD *)v11 + 31) >= 0)
    v13 = *(unsigned __int8 *)(*(_QWORD *)v11 + 31);
  else
    v13 = *(_QWORD *)(*(_QWORD *)v11 + 16);
  v14 = &v21;
  std::string::basic_string[abi:ne180100]((uint64_t)&v21, v13 + 1);
  if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v14 = (std::string *)v21.__r_.__value_.__r.__words[0];
  if (v13)
  {
    v17 = *(char **)(v12 + 8);
    v16 = (char *)(v12 + 8);
    v15 = v17;
    if (v16[23] >= 0)
      v18 = v16;
    else
      v18 = v15;
    memmove(v14, v18, v13);
  }
  *(_WORD *)((char *)&v14->__r_.__value_.__l.__data_ + v13) = 46;
  v19 = std::string::append(&v21, "isMusicShow");
  v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  __p.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  mlcore::EntityClass::setPropertyForName(v9, v10, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
}

void sub_20A785984(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyClassicalWork(void)::$_0 &&>>()
{
  uint64_t v0;
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  mlcore::ItemExtraTable **v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  std::string *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  std::string *v19;
  __int128 v20;
  std::string v21;
  std::string __str;
  _QWORD v23[2];

  v0 = operator new();
  v1 = (_QWORD *)mediaplatform::Singleton<mlcore::ItemExtraTable>::sharedInstance();
  v2 = (std::__shared_weak_count *)v1[1];
  v23[0] = *v1;
  v23[1] = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  v5 = (mlcore::ItemExtraTable **)mediaplatform::Singleton<mlcore::ItemExtraTable>::sharedInstance();
  mlcore::ItemExtraTable::classicalWorkColumn(*v5, (uint64_t)&__str);
  mlcore::DatabaseModelProperty<std::string>::DatabaseModelProperty(v0, v23, (uint64_t)&__str);
  mlcore::ItemPropertyClassicalWork(void)::property = v0;
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&__str);
  if (v2)
  {
    v6 = (unint64_t *)&v2->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v8 = mlcore::ItemPropertyClassicalWork(void)::property;
  std::string::basic_string[abi:ne180100]<0>(&__str, "");
  std::string::operator=((std::string *)(v8 + 40), &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  v9 = mlcore::TypedEntityClass<mlcore::Item>::sharedPointer();
  v10 = mlcore::ItemPropertyClassicalWork(void)::property;
  v11 = mediaplatform::Singleton<mlcore::ItemExtraTable>::sharedInstance();
  v12 = *(_QWORD *)v11;
  if (*(char *)(*(_QWORD *)v11 + 31) >= 0)
    v13 = *(unsigned __int8 *)(*(_QWORD *)v11 + 31);
  else
    v13 = *(_QWORD *)(*(_QWORD *)v11 + 16);
  v14 = &v21;
  std::string::basic_string[abi:ne180100]((uint64_t)&v21, v13 + 1);
  if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v14 = (std::string *)v21.__r_.__value_.__r.__words[0];
  if (v13)
  {
    v17 = *(char **)(v12 + 8);
    v16 = (char *)(v12 + 8);
    v15 = v17;
    if (v16[23] >= 0)
      v18 = v16;
    else
      v18 = v15;
    memmove(v14, v18, v13);
  }
  *(_WORD *)((char *)&v14->__r_.__value_.__l.__data_ + v13) = 46;
  v19 = std::string::append(&v21, "classicalWork");
  v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  __str.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  mlcore::EntityClass::setPropertyForName(v9, v10, &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
}

void sub_20A785C0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyClassicalMovement(void)::$_0 &&>>()
{
  uint64_t v0;
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  mlcore::ItemExtraTable **v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  std::string *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  std::string *v19;
  __int128 v20;
  std::string v21;
  std::string __str;
  _QWORD v23[2];

  v0 = operator new();
  v1 = (_QWORD *)mediaplatform::Singleton<mlcore::ItemExtraTable>::sharedInstance();
  v2 = (std::__shared_weak_count *)v1[1];
  v23[0] = *v1;
  v23[1] = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  v5 = (mlcore::ItemExtraTable **)mediaplatform::Singleton<mlcore::ItemExtraTable>::sharedInstance();
  mlcore::ItemExtraTable::classicalMovementColumn(*v5, (uint64_t)&__str);
  mlcore::DatabaseModelProperty<std::string>::DatabaseModelProperty(v0, v23, (uint64_t)&__str);
  mlcore::ItemPropertyClassicalMovement(void)::property = v0;
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&__str);
  if (v2)
  {
    v6 = (unint64_t *)&v2->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v8 = mlcore::ItemPropertyClassicalMovement(void)::property;
  std::string::basic_string[abi:ne180100]<0>(&__str, "");
  std::string::operator=((std::string *)(v8 + 40), &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  v9 = mlcore::TypedEntityClass<mlcore::Item>::sharedPointer();
  v10 = mlcore::ItemPropertyClassicalMovement(void)::property;
  v11 = mediaplatform::Singleton<mlcore::ItemExtraTable>::sharedInstance();
  v12 = *(_QWORD *)v11;
  if (*(char *)(*(_QWORD *)v11 + 31) >= 0)
    v13 = *(unsigned __int8 *)(*(_QWORD *)v11 + 31);
  else
    v13 = *(_QWORD *)(*(_QWORD *)v11 + 16);
  v14 = &v21;
  std::string::basic_string[abi:ne180100]((uint64_t)&v21, v13 + 1);
  if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v14 = (std::string *)v21.__r_.__value_.__r.__words[0];
  if (v13)
  {
    v17 = *(char **)(v12 + 8);
    v16 = (char *)(v12 + 8);
    v15 = v17;
    if (v16[23] >= 0)
      v18 = v16;
    else
      v18 = v15;
    memmove(v14, v18, v13);
  }
  *(_WORD *)((char *)&v14->__r_.__value_.__l.__data_ + v13) = 46;
  v19 = std::string::append(&v21, "classicalMovement");
  v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  __str.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  mlcore::EntityClass::setPropertyForName(v9, v10, &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
}

void sub_20A785E8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyClassicalMovementCount(void)::$_0 &&>>()
{
  uint64_t v0;
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  mlcore::ItemExtraTable **v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  std::string *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  std::string *v19;
  __int128 v20;
  std::string v21;
  std::string __p;
  char v23;
  _QWORD v24[2];

  v0 = operator new();
  v1 = (_QWORD *)mediaplatform::Singleton<mlcore::ItemExtraTable>::sharedInstance();
  v2 = (std::__shared_weak_count *)v1[1];
  v24[0] = *v1;
  v24[1] = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  v5 = (mlcore::ItemExtraTable **)mediaplatform::Singleton<mlcore::ItemExtraTable>::sharedInstance();
  mlcore::ItemExtraTable::classicalMovementCountColumn(*v5, (uint64_t)&__p);
  mlcore::DatabaseModelProperty<int>::DatabaseModelProperty(v0, v24, (uint64_t)&__p);
  mlcore::ItemPropertyClassicalMovementCount(void)::property = v0;
  if (v23 < 0)
    operator delete((void *)__p.__r_.__value_.__l.__size_);
  if (v2)
  {
    v6 = (unint64_t *)&v2->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v8 = mlcore::ItemPropertyClassicalMovementCount(void)::property;
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  std::string::operator=((std::string *)(v8 + 40), &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v9 = mlcore::TypedEntityClass<mlcore::Item>::sharedPointer();
  v10 = mlcore::ItemPropertyClassicalMovementCount(void)::property;
  v11 = mediaplatform::Singleton<mlcore::ItemExtraTable>::sharedInstance();
  v12 = *(_QWORD *)v11;
  if (*(char *)(*(_QWORD *)v11 + 31) >= 0)
    v13 = *(unsigned __int8 *)(*(_QWORD *)v11 + 31);
  else
    v13 = *(_QWORD *)(*(_QWORD *)v11 + 16);
  v14 = &v21;
  std::string::basic_string[abi:ne180100]((uint64_t)&v21, v13 + 1);
  if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v14 = (std::string *)v21.__r_.__value_.__r.__words[0];
  if (v13)
  {
    v17 = *(char **)(v12 + 8);
    v16 = (char *)(v12 + 8);
    v15 = v17;
    if (v16[23] >= 0)
      v18 = v16;
    else
      v18 = v15;
    memmove(v14, v18, v13);
  }
  *(_WORD *)((char *)&v14->__r_.__value_.__l.__data_ + v13) = 46;
  v19 = std::string::append(&v21, "classicalMovementCount");
  v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  __p.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  mlcore::EntityClass::setPropertyForName(v9, v10, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
}

void sub_20A786114(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyClassicalMovementNumber(void)::$_0 &&>>()
{
  uint64_t v0;
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  mlcore::ItemExtraTable **v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  std::string *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  std::string *v19;
  __int128 v20;
  std::string v21;
  std::string __p;
  char v23;
  _QWORD v24[2];

  v0 = operator new();
  v1 = (_QWORD *)mediaplatform::Singleton<mlcore::ItemExtraTable>::sharedInstance();
  v2 = (std::__shared_weak_count *)v1[1];
  v24[0] = *v1;
  v24[1] = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  v5 = (mlcore::ItemExtraTable **)mediaplatform::Singleton<mlcore::ItemExtraTable>::sharedInstance();
  mlcore::ItemExtraTable::classicalMovementNumberColumn(*v5, (uint64_t)&__p);
  mlcore::DatabaseModelProperty<int>::DatabaseModelProperty(v0, v24, (uint64_t)&__p);
  mlcore::ItemPropertyClassicalMovementNumber(void)::property = v0;
  if (v23 < 0)
    operator delete((void *)__p.__r_.__value_.__l.__size_);
  if (v2)
  {
    v6 = (unint64_t *)&v2->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v8 = mlcore::ItemPropertyClassicalMovementNumber(void)::property;
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  std::string::operator=((std::string *)(v8 + 40), &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v9 = mlcore::TypedEntityClass<mlcore::Item>::sharedPointer();
  v10 = mlcore::ItemPropertyClassicalMovementNumber(void)::property;
  v11 = mediaplatform::Singleton<mlcore::ItemExtraTable>::sharedInstance();
  v12 = *(_QWORD *)v11;
  if (*(char *)(*(_QWORD *)v11 + 31) >= 0)
    v13 = *(unsigned __int8 *)(*(_QWORD *)v11 + 31);
  else
    v13 = *(_QWORD *)(*(_QWORD *)v11 + 16);
  v14 = &v21;
  std::string::basic_string[abi:ne180100]((uint64_t)&v21, v13 + 1);
  if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v14 = (std::string *)v21.__r_.__value_.__r.__words[0];
  if (v13)
  {
    v17 = *(char **)(v12 + 8);
    v16 = (char *)(v12 + 8);
    v15 = v17;
    if (v16[23] >= 0)
      v18 = v16;
    else
      v18 = v15;
    memmove(v14, v18, v13);
  }
  *(_WORD *)((char *)&v14->__r_.__value_.__l.__data_ + v13) = 46;
  v19 = std::string::append(&v21, "classicalMovementNumber");
  v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  __p.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  mlcore::EntityClass::setPropertyForName(v9, v10, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
}

void sub_20A7863A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyCloudKVSKey(void)::$_0 &&>>()
{
  uint64_t v0;
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t *v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  std::string *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  std::string *v19;
  __int128 v20;
  std::string v21;
  std::string __str;
  _QWORD v23[2];

  v0 = operator new();
  v1 = (_QWORD *)mediaplatform::Singleton<mlcore::ItemKVSTable>::sharedInstance();
  v2 = (std::__shared_weak_count *)v1[1];
  v23[0] = *v1;
  v23[1] = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  v5 = (uint64_t *)mediaplatform::Singleton<mlcore::ItemKVSTable>::sharedInstance();
  mlcore::MediaTable<long long,std::string>::mediaColumnAtIndex<1ul>((uint64_t)&__str, *v5);
  mlcore::DatabaseModelProperty<std::string>::DatabaseModelProperty(v0, v23, (uint64_t)&__str);
  mlcore::ItemPropertyCloudKVSKey(void)::property = v0;
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&__str);
  if (v2)
  {
    v6 = (unint64_t *)&v2->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v8 = mlcore::ItemPropertyCloudKVSKey(void)::property;
  std::string::basic_string[abi:ne180100]<0>(&__str, "");
  std::string::operator=((std::string *)(v8 + 40), &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  v9 = mlcore::TypedEntityClass<mlcore::Item>::sharedPointer();
  v10 = mlcore::ItemPropertyCloudKVSKey(void)::property;
  v11 = mediaplatform::Singleton<mlcore::ItemKVSTable>::sharedInstance();
  v12 = *(_QWORD *)v11;
  if (*(char *)(*(_QWORD *)v11 + 31) >= 0)
    v13 = *(unsigned __int8 *)(*(_QWORD *)v11 + 31);
  else
    v13 = *(_QWORD *)(*(_QWORD *)v11 + 16);
  v14 = &v21;
  std::string::basic_string[abi:ne180100]((uint64_t)&v21, v13 + 1);
  if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v14 = (std::string *)v21.__r_.__value_.__r.__words[0];
  if (v13)
  {
    v17 = *(char **)(v12 + 8);
    v16 = (char *)(v12 + 8);
    v15 = v17;
    if (v16[23] >= 0)
      v18 = v16;
    else
      v18 = v15;
    memmove(v14, v18, v13);
  }
  *(_WORD *)((char *)&v14->__r_.__value_.__l.__data_ + v13) = 46;
  v19 = std::string::append(&v21, "cloudKVSKey");
  v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  __str.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  mlcore::EntityClass::setPropertyForName(v9, v10, &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
}

void sub_20A78662C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyHLSAudioCapability(void)::$_0 &&>>()
{
  uint64_t v0;
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  mlcore::ItemVideoTable **v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  std::string *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  std::string *v19;
  __int128 v20;
  std::string v21;
  std::string __p;
  char v23;
  _QWORD v24[2];

  v0 = operator new();
  v1 = (_QWORD *)mediaplatform::Singleton<mlcore::ItemVideoTable>::sharedInstance();
  v2 = (std::__shared_weak_count *)v1[1];
  v24[0] = *v1;
  v24[1] = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  v5 = (mlcore::ItemVideoTable **)mediaplatform::Singleton<mlcore::ItemVideoTable>::sharedInstance();
  mlcore::ItemVideoTable::hlsAudioCapability(*v5, (uint64_t)&__p);
  mlcore::DatabaseModelProperty<long long>::DatabaseModelProperty(v0, v24, (uint64_t)&__p);
  mlcore::ItemPropertyHLSAudioCapability(void)::property = v0;
  if (v23 < 0)
    operator delete((void *)__p.__r_.__value_.__l.__size_);
  if (v2)
  {
    v6 = (unint64_t *)&v2->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v8 = mlcore::ItemPropertyHLSAudioCapability(void)::property;
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  std::string::operator=((std::string *)(v8 + 40), &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v9 = mlcore::TypedEntityClass<mlcore::Item>::sharedPointer();
  v10 = mlcore::ItemPropertyHLSAudioCapability(void)::property;
  v11 = mediaplatform::Singleton<mlcore::ItemVideoTable>::sharedInstance();
  v12 = *(_QWORD *)v11;
  if (*(char *)(*(_QWORD *)v11 + 31) >= 0)
    v13 = *(unsigned __int8 *)(*(_QWORD *)v11 + 31);
  else
    v13 = *(_QWORD *)(*(_QWORD *)v11 + 16);
  v14 = &v21;
  std::string::basic_string[abi:ne180100]((uint64_t)&v21, v13 + 1);
  if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v14 = (std::string *)v21.__r_.__value_.__r.__words[0];
  if (v13)
  {
    v17 = *(char **)(v12 + 8);
    v16 = (char *)(v12 + 8);
    v15 = v17;
    if (v16[23] >= 0)
      v18 = v16;
    else
      v18 = v15;
    memmove(v14, v18, v13);
  }
  *(_WORD *)((char *)&v14->__r_.__value_.__l.__data_ + v13) = 46;
  v19 = std::string::append(&v21, "hlsAudioCapability");
  v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  __p.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  mlcore::EntityClass::setPropertyForName(v9, v10, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
}

void sub_20A7868B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyHLSAssetTraits(void)::$_0 &&>>()
{
  uint64_t v0;
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  mlcore::ItemVideoTable **v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  std::string *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  std::string *v19;
  __int128 v20;
  std::string v21;
  std::string __p;
  char v23;
  _QWORD v24[2];

  v0 = operator new();
  v1 = (_QWORD *)mediaplatform::Singleton<mlcore::ItemVideoTable>::sharedInstance();
  v2 = (std::__shared_weak_count *)v1[1];
  v24[0] = *v1;
  v24[1] = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  v5 = (mlcore::ItemVideoTable **)mediaplatform::Singleton<mlcore::ItemVideoTable>::sharedInstance();
  mlcore::ItemVideoTable::hlsAssetTraits(*v5, (uint64_t)&__p);
  mlcore::DatabaseModelProperty<long long>::DatabaseModelProperty(v0, v24, (uint64_t)&__p);
  mlcore::ItemPropertyHLSAssetTraits(void)::property = v0;
  if (v23 < 0)
    operator delete((void *)__p.__r_.__value_.__l.__size_);
  if (v2)
  {
    v6 = (unint64_t *)&v2->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v8 = mlcore::ItemPropertyHLSAssetTraits(void)::property;
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  std::string::operator=((std::string *)(v8 + 40), &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v9 = mlcore::TypedEntityClass<mlcore::Item>::sharedPointer();
  v10 = mlcore::ItemPropertyHLSAssetTraits(void)::property;
  v11 = mediaplatform::Singleton<mlcore::ItemVideoTable>::sharedInstance();
  v12 = *(_QWORD *)v11;
  if (*(char *)(*(_QWORD *)v11 + 31) >= 0)
    v13 = *(unsigned __int8 *)(*(_QWORD *)v11 + 31);
  else
    v13 = *(_QWORD *)(*(_QWORD *)v11 + 16);
  v14 = &v21;
  std::string::basic_string[abi:ne180100]((uint64_t)&v21, v13 + 1);
  if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v14 = (std::string *)v21.__r_.__value_.__r.__words[0];
  if (v13)
  {
    v17 = *(char **)(v12 + 8);
    v16 = (char *)(v12 + 8);
    v15 = v17;
    if (v16[23] >= 0)
      v18 = v16;
    else
      v18 = v15;
    memmove(v14, v18, v13);
  }
  *(_WORD *)((char *)&v14->__r_.__value_.__l.__data_ + v13) = 46;
  v19 = std::string::append(&v21, "hlsAssetTraits");
  v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  __p.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  mlcore::EntityClass::setPropertyForName(v9, v10, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
}

void sub_20A786B44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyHLSKeyServerURL(void)::$_0 &&>>()
{
  uint64_t v0;
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  mlcore::ItemVideoTable **v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  std::string *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  std::string *v19;
  __int128 v20;
  std::string v21;
  std::string __str;
  _QWORD v23[2];

  v0 = operator new();
  v1 = (_QWORD *)mediaplatform::Singleton<mlcore::ItemVideoTable>::sharedInstance();
  v2 = (std::__shared_weak_count *)v1[1];
  v23[0] = *v1;
  v23[1] = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  v5 = (mlcore::ItemVideoTable **)mediaplatform::Singleton<mlcore::ItemVideoTable>::sharedInstance();
  mlcore::ItemVideoTable::hlsKeyServerURL(*v5, (uint64_t)&__str);
  mlcore::DatabaseModelProperty<std::string>::DatabaseModelProperty(v0, v23, (uint64_t)&__str);
  mlcore::ItemPropertyHLSKeyServerURL(void)::property = v0;
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&__str);
  if (v2)
  {
    v6 = (unint64_t *)&v2->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v8 = mlcore::ItemPropertyHLSKeyServerURL(void)::property;
  std::string::basic_string[abi:ne180100]<0>(&__str, "");
  std::string::operator=((std::string *)(v8 + 40), &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  v9 = mlcore::TypedEntityClass<mlcore::Item>::sharedPointer();
  v10 = mlcore::ItemPropertyHLSKeyServerURL(void)::property;
  v11 = mediaplatform::Singleton<mlcore::ItemVideoTable>::sharedInstance();
  v12 = *(_QWORD *)v11;
  if (*(char *)(*(_QWORD *)v11 + 31) >= 0)
    v13 = *(unsigned __int8 *)(*(_QWORD *)v11 + 31);
  else
    v13 = *(_QWORD *)(*(_QWORD *)v11 + 16);
  v14 = &v21;
  std::string::basic_string[abi:ne180100]((uint64_t)&v21, v13 + 1);
  if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v14 = (std::string *)v21.__r_.__value_.__r.__words[0];
  if (v13)
  {
    v17 = *(char **)(v12 + 8);
    v16 = (char *)(v12 + 8);
    v15 = v17;
    if (v16[23] >= 0)
      v18 = v16;
    else
      v18 = v15;
    memmove(v14, v18, v13);
  }
  *(_WORD *)((char *)&v14->__r_.__value_.__l.__data_ + v13) = 46;
  v19 = std::string::append(&v21, "hlsKeyServerURL");
  v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  __str.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  mlcore::EntityClass::setPropertyForName(v9, v10, &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
}

void sub_20A786DCC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyHLSKeyServerProtocol(void)::$_0 &&>>()
{
  uint64_t v0;
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  mlcore::ItemVideoTable **v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  std::string *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  std::string *v19;
  __int128 v20;
  std::string v21;
  std::string __str;
  _QWORD v23[2];

  v0 = operator new();
  v1 = (_QWORD *)mediaplatform::Singleton<mlcore::ItemVideoTable>::sharedInstance();
  v2 = (std::__shared_weak_count *)v1[1];
  v23[0] = *v1;
  v23[1] = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  v5 = (mlcore::ItemVideoTable **)mediaplatform::Singleton<mlcore::ItemVideoTable>::sharedInstance();
  mlcore::ItemVideoTable::hlsKeyServerProtocol(*v5, (uint64_t)&__str);
  mlcore::DatabaseModelProperty<std::string>::DatabaseModelProperty(v0, v23, (uint64_t)&__str);
  mlcore::ItemPropertyHLSKeyServerProtocol(void)::property = v0;
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&__str);
  if (v2)
  {
    v6 = (unint64_t *)&v2->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v8 = mlcore::ItemPropertyHLSKeyServerProtocol(void)::property;
  std::string::basic_string[abi:ne180100]<0>(&__str, "");
  std::string::operator=((std::string *)(v8 + 40), &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  v9 = mlcore::TypedEntityClass<mlcore::Item>::sharedPointer();
  v10 = mlcore::ItemPropertyHLSKeyServerProtocol(void)::property;
  v11 = mediaplatform::Singleton<mlcore::ItemVideoTable>::sharedInstance();
  v12 = *(_QWORD *)v11;
  if (*(char *)(*(_QWORD *)v11 + 31) >= 0)
    v13 = *(unsigned __int8 *)(*(_QWORD *)v11 + 31);
  else
    v13 = *(_QWORD *)(*(_QWORD *)v11 + 16);
  v14 = &v21;
  std::string::basic_string[abi:ne180100]((uint64_t)&v21, v13 + 1);
  if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v14 = (std::string *)v21.__r_.__value_.__r.__words[0];
  if (v13)
  {
    v17 = *(char **)(v12 + 8);
    v16 = (char *)(v12 + 8);
    v15 = v17;
    if (v16[23] >= 0)
      v18 = v16;
    else
      v18 = v15;
    memmove(v14, v18, v13);
  }
  *(_WORD *)((char *)&v14->__r_.__value_.__l.__data_ + v13) = 46;
  v19 = std::string::append(&v21, "hlsKeyServerProtocol");
  v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  __str.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  mlcore::EntityClass::setPropertyForName(v9, v10, &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
}

void sub_20A78704C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyHLSKeyCertificateURL(void)::$_0 &&>>()
{
  uint64_t v0;
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  mlcore::ItemVideoTable **v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  std::string *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  std::string *v19;
  __int128 v20;
  std::string v21;
  std::string __str;
  _QWORD v23[2];

  v0 = operator new();
  v1 = (_QWORD *)mediaplatform::Singleton<mlcore::ItemVideoTable>::sharedInstance();
  v2 = (std::__shared_weak_count *)v1[1];
  v23[0] = *v1;
  v23[1] = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  v5 = (mlcore::ItemVideoTable **)mediaplatform::Singleton<mlcore::ItemVideoTable>::sharedInstance();
  mlcore::ItemVideoTable::hlsKeyCertificateURL(*v5, (uint64_t)&__str);
  mlcore::DatabaseModelProperty<std::string>::DatabaseModelProperty(v0, v23, (uint64_t)&__str);
  mlcore::ItemPropertyHLSKeyCertificateURL(void)::property = v0;
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&__str);
  if (v2)
  {
    v6 = (unint64_t *)&v2->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v8 = mlcore::ItemPropertyHLSKeyCertificateURL(void)::property;
  std::string::basic_string[abi:ne180100]<0>(&__str, "");
  std::string::operator=((std::string *)(v8 + 40), &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  v9 = mlcore::TypedEntityClass<mlcore::Item>::sharedPointer();
  v10 = mlcore::ItemPropertyHLSKeyCertificateURL(void)::property;
  v11 = mediaplatform::Singleton<mlcore::ItemVideoTable>::sharedInstance();
  v12 = *(_QWORD *)v11;
  if (*(char *)(*(_QWORD *)v11 + 31) >= 0)
    v13 = *(unsigned __int8 *)(*(_QWORD *)v11 + 31);
  else
    v13 = *(_QWORD *)(*(_QWORD *)v11 + 16);
  v14 = &v21;
  std::string::basic_string[abi:ne180100]((uint64_t)&v21, v13 + 1);
  if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v14 = (std::string *)v21.__r_.__value_.__r.__words[0];
  if (v13)
  {
    v17 = *(char **)(v12 + 8);
    v16 = (char *)(v12 + 8);
    v15 = v17;
    if (v16[23] >= 0)
      v18 = v16;
    else
      v18 = v15;
    memmove(v14, v18, v13);
  }
  *(_WORD *)((char *)&v14->__r_.__value_.__l.__data_ + v13) = 46;
  v19 = std::string::append(&v21, "hlsKeyCertificateURL");
  v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  __str.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  mlcore::EntityClass::setPropertyForName(v9, v10, &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
}

void sub_20A7872CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyIsMasteredForiTunes(void)::$_0 &&>>()
{
  uint64_t v0;
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  mlcore::ItemStoreTable **v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  std::string *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  std::string *v19;
  __int128 v20;
  std::string v21;
  std::string __p;
  char v23;
  _QWORD v24[2];

  v0 = operator new();
  v1 = (_QWORD *)mediaplatform::Singleton<mlcore::ItemStoreTable>::sharedInstance();
  v2 = (std::__shared_weak_count *)v1[1];
  v24[0] = *v1;
  v24[1] = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  v5 = (mlcore::ItemStoreTable **)mediaplatform::Singleton<mlcore::ItemStoreTable>::sharedInstance();
  mlcore::ItemStoreTable::isMasteredForItunesColumn(*v5, (uint64_t)&__p);
  mlcore::DatabaseModelProperty<int>::DatabaseModelProperty(v0, v24, (uint64_t)&__p);
  mlcore::ItemPropertyIsMasteredForiTunes(void)::property = v0;
  if (v23 < 0)
    operator delete((void *)__p.__r_.__value_.__l.__size_);
  if (v2)
  {
    v6 = (unint64_t *)&v2->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v8 = mlcore::ItemPropertyIsMasteredForiTunes(void)::property;
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  std::string::operator=((std::string *)(v8 + 40), &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v9 = mlcore::TypedEntityClass<mlcore::Item>::sharedPointer();
  v10 = mlcore::ItemPropertyIsMasteredForiTunes(void)::property;
  v11 = mediaplatform::Singleton<mlcore::ItemStoreTable>::sharedInstance();
  v12 = *(_QWORD *)v11;
  if (*(char *)(*(_QWORD *)v11 + 31) >= 0)
    v13 = *(unsigned __int8 *)(*(_QWORD *)v11 + 31);
  else
    v13 = *(_QWORD *)(*(_QWORD *)v11 + 16);
  v14 = &v21;
  std::string::basic_string[abi:ne180100]((uint64_t)&v21, v13 + 1);
  if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v14 = (std::string *)v21.__r_.__value_.__r.__words[0];
  if (v13)
  {
    v17 = *(char **)(v12 + 8);
    v16 = (char *)(v12 + 8);
    v15 = v17;
    if (v16[23] >= 0)
      v18 = v16;
    else
      v18 = v15;
    memmove(v14, v18, v13);
  }
  *(_WORD *)((char *)&v14->__r_.__value_.__l.__data_ + v13) = 46;
  v19 = std::string::append(&v21, "isMasteredForiTunes");
  v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  __p.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  mlcore::EntityClass::setPropertyForName(v9, v10, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
}

void sub_20A787554(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyAssetStoreItemID(void)::$_0 &&>>()
{
  uint64_t v0;
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  mlcore::ItemStoreTable **v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  std::string *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  std::string *v19;
  __int128 v20;
  std::string v21;
  std::string __p;
  char v23;
  _QWORD v24[2];

  v0 = operator new();
  v1 = (_QWORD *)mediaplatform::Singleton<mlcore::ItemStoreTable>::sharedInstance();
  v2 = (std::__shared_weak_count *)v1[1];
  v24[0] = *v1;
  v24[1] = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  v5 = (mlcore::ItemStoreTable **)mediaplatform::Singleton<mlcore::ItemStoreTable>::sharedInstance();
  mlcore::ItemStoreTable::assetStoreItemIDColumn(*v5, (uint64_t)&__p);
  mlcore::DatabaseModelProperty<long long>::DatabaseModelProperty(v0, v24, (uint64_t)&__p);
  mlcore::ItemPropertyAssetStoreItemID(void)::property = v0;
  if (v23 < 0)
    operator delete((void *)__p.__r_.__value_.__l.__size_);
  if (v2)
  {
    v6 = (unint64_t *)&v2->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v8 = mlcore::ItemPropertyAssetStoreItemID(void)::property;
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  std::string::operator=((std::string *)(v8 + 40), &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v9 = mlcore::TypedEntityClass<mlcore::Item>::sharedPointer();
  v10 = mlcore::ItemPropertyAssetStoreItemID(void)::property;
  v11 = mediaplatform::Singleton<mlcore::ItemStoreTable>::sharedInstance();
  v12 = *(_QWORD *)v11;
  if (*(char *)(*(_QWORD *)v11 + 31) >= 0)
    v13 = *(unsigned __int8 *)(*(_QWORD *)v11 + 31);
  else
    v13 = *(_QWORD *)(*(_QWORD *)v11 + 16);
  v14 = &v21;
  std::string::basic_string[abi:ne180100]((uint64_t)&v21, v13 + 1);
  if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v14 = (std::string *)v21.__r_.__value_.__r.__words[0];
  if (v13)
  {
    v17 = *(char **)(v12 + 8);
    v16 = (char *)(v12 + 8);
    v15 = v17;
    if (v16[23] >= 0)
      v18 = v16;
    else
      v18 = v15;
    memmove(v14, v18, v13);
  }
  *(_WORD *)((char *)&v14->__r_.__value_.__l.__data_ + v13) = 46;
  v19 = std::string::append(&v21, "assetStoreItemID");
  v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  __p.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  mlcore::EntityClass::setPropertyForName(v9, v10, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
}

void sub_20A7877E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyReportingStoreItemID(void)::$_0 &&>>()
{
  uint64_t v0;
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  mlcore::ItemStoreTable **v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  std::string *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  std::string *v19;
  __int128 v20;
  std::string v21;
  std::string __p;
  char v23;
  _QWORD v24[2];

  v0 = operator new();
  v1 = (_QWORD *)mediaplatform::Singleton<mlcore::ItemStoreTable>::sharedInstance();
  v2 = (std::__shared_weak_count *)v1[1];
  v24[0] = *v1;
  v24[1] = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  v5 = (mlcore::ItemStoreTable **)mediaplatform::Singleton<mlcore::ItemStoreTable>::sharedInstance();
  mlcore::ItemStoreTable::reportingStoreItemIDColumn(*v5, (uint64_t)&__p);
  mlcore::DatabaseModelProperty<long long>::DatabaseModelProperty(v0, v24, (uint64_t)&__p);
  mlcore::ItemPropertyReportingStoreItemID(void)::property = v0;
  if (v23 < 0)
    operator delete((void *)__p.__r_.__value_.__l.__size_);
  if (v2)
  {
    v6 = (unint64_t *)&v2->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v8 = mlcore::ItemPropertyReportingStoreItemID(void)::property;
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  std::string::operator=((std::string *)(v8 + 40), &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v9 = mlcore::TypedEntityClass<mlcore::Item>::sharedPointer();
  v10 = mlcore::ItemPropertyReportingStoreItemID(void)::property;
  v11 = mediaplatform::Singleton<mlcore::ItemStoreTable>::sharedInstance();
  v12 = *(_QWORD *)v11;
  if (*(char *)(*(_QWORD *)v11 + 31) >= 0)
    v13 = *(unsigned __int8 *)(*(_QWORD *)v11 + 31);
  else
    v13 = *(_QWORD *)(*(_QWORD *)v11 + 16);
  v14 = &v21;
  std::string::basic_string[abi:ne180100]((uint64_t)&v21, v13 + 1);
  if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v14 = (std::string *)v21.__r_.__value_.__r.__words[0];
  if (v13)
  {
    v17 = *(char **)(v12 + 8);
    v16 = (char *)(v12 + 8);
    v15 = v17;
    if (v16[23] >= 0)
      v18 = v16;
    else
      v18 = v15;
    memmove(v14, v18, v13);
  }
  *(_WORD *)((char *)&v14->__r_.__value_.__l.__data_ + v13) = 46;
  v19 = std::string::append(&v21, "reportingStoreItemID");
  v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  __p.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  mlcore::EntityClass::setPropertyForName(v9, v10, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
}

void sub_20A787A74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

uint64_t mlcore::ItemPropertyStoreCanonicalItemId(mlcore *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&mlcore::ItemPropertyStoreCanonicalItemId(void)::once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&mlcore::ItemPropertyStoreCanonicalItemId(void)::once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyStoreCanonicalItemId(void)::$_0 &&>>);
  }
  return mlcore::ItemPropertyStoreCanonicalItemId(void)::property;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyStoreCanonicalItemId(void)::$_0 &&>>()
{
  uint64_t v0;
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  mlcore::ItemStoreTable **v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  std::string *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  std::string *v19;
  __int128 v20;
  std::string v21;
  std::string __str;
  _QWORD v23[2];

  v0 = operator new();
  v1 = (_QWORD *)mediaplatform::Singleton<mlcore::ItemStoreTable>::sharedInstance();
  v2 = (std::__shared_weak_count *)v1[1];
  v23[0] = *v1;
  v23[1] = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  v5 = (mlcore::ItemStoreTable **)mediaplatform::Singleton<mlcore::ItemStoreTable>::sharedInstance();
  mlcore::ItemStoreTable::assetStoreCanonicalItemId(*v5, (uint64_t)&__str);
  mlcore::DatabaseModelProperty<std::string>::DatabaseModelProperty(v0, v23, (uint64_t)&__str);
  mlcore::ItemPropertyStoreCanonicalItemId(void)::property = v0;
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&__str);
  if (v2)
  {
    v6 = (unint64_t *)&v2->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v8 = mlcore::ItemPropertyStoreCanonicalItemId(void)::property;
  std::string::basic_string[abi:ne180100]<0>(&__str, "");
  std::string::operator=((std::string *)(v8 + 40), &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  v9 = mlcore::TypedEntityClass<mlcore::Item>::sharedPointer();
  v10 = mlcore::ItemPropertyStoreCanonicalItemId(void)::property;
  v11 = mediaplatform::Singleton<mlcore::ItemStoreTable>::sharedInstance();
  v12 = *(_QWORD *)v11;
  if (*(char *)(*(_QWORD *)v11 + 31) >= 0)
    v13 = *(unsigned __int8 *)(*(_QWORD *)v11 + 31);
  else
    v13 = *(_QWORD *)(*(_QWORD *)v11 + 16);
  v14 = &v21;
  std::string::basic_string[abi:ne180100]((uint64_t)&v21, v13 + 1);
  if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v14 = (std::string *)v21.__r_.__value_.__r.__words[0];
  if (v13)
  {
    v17 = *(char **)(v12 + 8);
    v16 = (char *)(v12 + 8);
    v15 = v17;
    if (v16[23] >= 0)
      v18 = v16;
    else
      v18 = v15;
    memmove(v14, v18, v13);
  }
  *(_WORD *)((char *)&v14->__r_.__value_.__l.__data_ + v13) = 46;
  v19 = std::string::append(&v21, "storeCanonicalID");
  v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  __str.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  mlcore::EntityClass::setPropertyForName(v9, v10, &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
}

void sub_20A787D58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

uint64_t mlcore::ItemPropertySeriesName(mlcore *this)
{
  mlcore *v1;
  uint64_t v2;
  uint64_t v4[2];

  v1 = (mlcore *)mlcore::ItemPropertyItemArtistPersistentID(this);
  v2 = mlcore::ItemArtistPropertySeriesName(v1);
  v4[0] = 0;
  v4[1] = 0;
  return mlcore::GetForeignProperty<std::string>((uint64_t)v1, v2, v4);
}

void sub_20A787E4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t mlcore::ItemPropertyUserAlbumRating(mlcore *this)
{
  mlcore *v1;
  uint64_t v2;
  uint64_t v4[2];

  v1 = (mlcore *)mlcore::ItemPropertyAlbumPersistentID(this);
  v2 = mlcore::AlbumPropertyUserRating(v1);
  v4[0] = 0;
  v4[1] = 0;
  return mlcore::GetForeignProperty<int>((uint64_t)v1, v2, v4);
}

void sub_20A787EA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t mlcore::ItemPropertyAlbumTitle(mlcore *this)
{
  mlcore *v1;
  uint64_t v2;
  uint64_t v4[2];

  v1 = (mlcore *)mlcore::ItemPropertyAlbumPersistentID(this);
  v2 = mlcore::AlbumPropertyTitle(v1);
  v4[0] = 0;
  v4[1] = 0;
  return mlcore::GetForeignProperty<std::string>((uint64_t)v1, v2, v4);
}

void sub_20A787EF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t mlcore::ItemPropertyAlbumSortTitle(mlcore *this)
{
  mlcore *v1;
  uint64_t v2;
  uint64_t v4[2];

  v1 = (mlcore *)mlcore::ItemPropertyAlbumPersistentID(this);
  v2 = mlcore::AlbumPropertySortTitle(v1);
  v4[0] = 0;
  v4[1] = 0;
  return mlcore::GetForeignProperty<std::string>((uint64_t)v1, v2, v4);
}

void sub_20A787F48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t mlcore::ItemPropertyAlbumSyncID(mlcore *this)
{
  mlcore *v1;
  uint64_t v2;
  uint64_t v4[2];

  v1 = (mlcore *)mlcore::ItemPropertyAlbumPersistentID(this);
  v2 = mlcore::AlbumPropertySyncID(v1);
  v4[0] = 0;
  v4[1] = 0;
  return mlcore::GetForeignProperty<long long>((uint64_t)v1, v2, v4);
}

void sub_20A787FA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t mlcore::ItemPropertyCategory(mlcore *this)
{
  mlcore *v1;
  uint64_t v2;
  uint64_t v4[2];

  v1 = (mlcore *)mlcore::ItemPropertyCategoryID(this);
  v2 = mlcore::CategoryPropertyCategory(v1);
  v4[0] = 0;
  v4[1] = 0;
  return mlcore::GetForeignProperty<std::string>((uint64_t)v1, v2, v4);
}

void sub_20A787FF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t mlcore::ItemPropertyArtistName(mlcore *this)
{
  mlcore *v1;
  uint64_t v2;
  uint64_t v4[2];

  v1 = (mlcore *)mlcore::ItemPropertyAlbumArtistPersistentID(this);
  v2 = mlcore::ArtistPropertyName(v1);
  v4[0] = 0;
  v4[1] = 0;
  return mlcore::GetForeignProperty<std::string>((uint64_t)v1, v2, v4);
}

void sub_20A788048(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t mlcore::ItemPropertyArtistSortName(mlcore *this)
{
  mlcore *v1;
  uint64_t v2;
  uint64_t v4[2];

  v1 = (mlcore *)mlcore::ItemPropertyAlbumArtistPersistentID(this);
  v2 = mlcore::ArtistPropertySortName(v1);
  v4[0] = 0;
  v4[1] = 0;
  return mlcore::GetForeignProperty<std::string>((uint64_t)v1, v2, v4);
}

void sub_20A78809C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t mlcore::ItemPropertyArtistStoreID(mlcore *this)
{
  mlcore *v1;
  uint64_t v2;
  uint64_t v4[2];

  v1 = (mlcore *)mlcore::ItemPropertyAlbumArtistPersistentID(this);
  v2 = mlcore::ArtistPropertyStoreID(v1);
  v4[0] = 0;
  v4[1] = 0;
  return mlcore::GetForeignProperty<long long>((uint64_t)v1, v2, v4);
}

void sub_20A7880F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t mlcore::ItemPropertyItemArtistName(mlcore *this)
{
  mlcore *v1;
  uint64_t v2;
  uint64_t v4[2];

  v1 = (mlcore *)mlcore::ItemPropertyItemArtistPersistentID(this);
  v2 = mlcore::ItemArtistPropertyName(v1);
  v4[0] = 0;
  v4[1] = 0;
  return mlcore::GetForeignProperty<std::string>((uint64_t)v1, v2, v4);
}

void sub_20A788144(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t mlcore::ItemPropertyItemArtistSortName(mlcore *this)
{
  mlcore *v1;
  uint64_t v2;
  uint64_t v4[2];

  v1 = (mlcore *)mlcore::ItemPropertyItemArtistPersistentID(this);
  v2 = mlcore::ItemArtistPropertySortName(v1);
  v4[0] = 0;
  v4[1] = 0;
  return mlcore::GetForeignProperty<std::string>((uint64_t)v1, v2, v4);
}

void sub_20A788198(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t mlcore::ItemPropertyComposerName(mlcore *this)
{
  mlcore *v1;
  uint64_t v2;
  uint64_t v4[2];

  v1 = (mlcore *)mlcore::ItemPropertyComposerPersistentID(this);
  v2 = mlcore::ComposerPropertyName(v1);
  v4[0] = 0;
  v4[1] = 0;
  return mlcore::GetForeignProperty<std::string>((uint64_t)v1, v2, v4);
}

void sub_20A7881EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t mlcore::ItemPropertyComposerSortName(mlcore *this)
{
  mlcore *v1;
  uint64_t v2;
  uint64_t v4[2];

  v1 = (mlcore *)mlcore::ItemPropertyComposerPersistentID(this);
  v2 = mlcore::ComposerPropertySortName(v1);
  v4[0] = 0;
  v4[1] = 0;
  return mlcore::GetForeignProperty<std::string>((uint64_t)v1, v2, v4);
}

void sub_20A788240(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t mlcore::ItemPropertyGenreName(mlcore *this)
{
  mlcore *v1;
  uint64_t v2;
  uint64_t v4[2];

  v1 = (mlcore *)mlcore::ItemPropertyGenrePersistentID(this);
  v2 = mlcore::GenrePropertyName(v1);
  v4[0] = 0;
  v4[1] = 0;
  return mlcore::GetForeignProperty<std::string>((uint64_t)v1, v2, v4);
}

void sub_20A788294(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ItemPropertyEffectiveArtworkType(void)::$_0 &&>>()
{
  mlcore *v0;
  uint64_t v1;
  char *v2;
  std::string *v3;
  std::__shared_weak_count *v4;
  unint64_t *v5;
  unint64_t v6;
  std::__shared_weak_count *size;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  unint64_t *v16;
  unint64_t v17;
  __int128 v18;
  mlcore *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  __int128 v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  std::__shared_weak_count *v46;
  std::string __str;
  int v48;
  __int128 v49;
  int v50;
  __int128 v51;
  uint64_t v52;
  std::__shared_weak_count *v53;
  __int128 v54;
  __int128 v55;
  uint64_t v56;
  __int128 v57;

  v0 = (mlcore *)operator new();
  v1 = mlcore::ItemPropertyMediaType(v0);
  v52 = 0;
  v53 = 0;
  (*(void (**)(std::string *__return_ptr, uint64_t, uint64_t *))(*(_QWORD *)v1 + 96))(&__str, v1, &v52);
  LODWORD(v51) = 13;
  v2 = (char *)operator new(0x40uLL);
  *((_QWORD *)v2 + 1) = 0;
  *((_QWORD *)v2 + 2) = 0;
  *(_QWORD *)v2 = &off_24C33BAD8;
  std::string::basic_string[abi:ne180100]<0>(&v55, "");
  *((_QWORD *)v2 + 3) = off_24C335BB0;
  *((_DWORD *)v2 + 8) = 512;
  v3 = (std::string *)(v2 + 40);
  if (SHIBYTE(v56) < 0)
  {
    std::string::__init_copy_ctor_external(v3, (const std::string::value_type *)v55, *((std::string::size_type *)&v55 + 1));
    if (SHIBYTE(v56) < 0)
      operator delete((void *)v55);
  }
  else
  {
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = v55;
    *((_QWORD *)v2 + 7) = v56;
  }
  *(_QWORD *)&v57 = v2 + 24;
  *((_QWORD *)&v57 + 1) = v2;
  std::allocate_shared[abi:ne180100]<mediaplatform::SQLBinaryExpression,std::allocator<mediaplatform::SQLBinaryExpression>,std::shared_ptr<mediaplatform::SQLExpression>,mediaplatform::SQLBinaryExpression::BinaryOperator,std::shared_ptr<mediaplatform::SQLColumnNameExpression>,void>(&v54, (__int128 *)&__str, (int *)&v51, &v57);
  v4 = (std::__shared_weak_count *)*((_QWORD *)&v57 + 1);
  if (*((_QWORD *)&v57 + 1))
  {
    v5 = (unint64_t *)(*((_QWORD *)&v57 + 1) + 8);
    do
      v6 = __ldaxr(v5);
    while (__stlxr(v6 - 1, v5));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  size = (std::__shared_weak_count *)__str.__r_.__value_.__l.__size_;
  if (__str.__r_.__value_.__l.__size_)
  {
    v8 = (unint64_t *)(__str.__r_.__value_.__l.__size_ + 8);
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
  }
  v10 = v53;
  if (v53)
  {
    p_shared_owners = (unint64_t *)&v53->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  v50 = 2;
  std::allocate_shared[abi:ne180100]<mediaplatform::SQLLiteralValue<int>,std::allocator<mediaplatform::SQLLiteralValue<int>>,int,void>(&v51, &v50);
  v48 = 1;
  std::allocate_shared[abi:ne180100]<mediaplatform::SQLLiteralValue<int>,std::allocator<mediaplatform::SQLLiteralValue<int>>,int,void>(&v49, &v48);
  v13 = operator new(0x60uLL);
  v14 = v13;
  v13[1] = 0;
  v13[2] = 0;
  *v13 = &off_24C33BD78;
  v15 = v13 + 3;
  v55 = v54;
  if (*((_QWORD *)&v54 + 1))
  {
    v16 = (unint64_t *)(*((_QWORD *)&v54 + 1) + 8);
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
  }
  v18 = v51;
  v51 = 0uLL;
  v46 = (std::__shared_weak_count *)*((_QWORD *)&v49 + 1);
  *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v18;
  v57 = v49;
  v49 = 0uLL;
  v19 = (mlcore *)mediaplatform::SQLCaseExpression::SQLCaseExpression(v13 + 3, &v55, &__str, &v57);
  if (v46)
  {
    v20 = (unint64_t *)&v46->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
      std::__shared_weak_count::__release_weak(v46);
    }
  }
  v22 = (std::__shared_weak_count *)__str.__r_.__value_.__l.__size_;
  if (__str.__r_.__value_.__l.__size_)
  {
    v23 = (unint64_t *)(__str.__r_.__value_.__l.__size_ + 8);
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  v25 = (std::__shared_weak_count *)*((_QWORD *)&v55 + 1);
  if (*((_QWORD *)&v55 + 1))
  {
    v26 = (unint64_t *)(*((_QWORD *)&v55 + 1) + 8);
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  *(_QWORD *)&v28 = v15;
  *((_QWORD *)&v28 + 1) = v14;
  v57 = v28;
  v29 = (std::__shared_weak_count *)*((_QWORD *)&v49 + 1);
  if (*((_QWORD *)&v49 + 1))
  {
    v30 = (unint64_t *)(*((_QWORD *)&v49 + 1) + 8);
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  v32 = (std::__shared_weak_count *)*((_QWORD *)&v51 + 1);
  if (*((_QWORD *)&v51 + 1))
  {
    v33 = (unint64_t *)(*((_QWORD *)&v51 + 1) + 8);
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }
  v35 = (std::__shared_weak_count *)*((_QWORD *)&v54 + 1);
  if (*((_QWORD *)&v54 + 1))
  {
    v36 = (unint64_t *)(*((_QWORD *)&v54 + 1) + 8);
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
    }
  }
  v38 = mlcore::ItemPropertyMediaType(v19);
  v39 = mlcore::TypedEntityClass<mlcore::Item>::sharedPointer();
  (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v38 + 104))(&v55, v38, v39);
  mlcore::ComplexProperty<int>::ComplexProperty((uint64_t)v0, &v57, (_QWORD **)&v55);
  mlcore::ItemPropertyEffectiveArtworkType(void)::property = (uint64_t)v0;
  __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v55;
  std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
  v40 = (std::__shared_weak_count *)*((_QWORD *)&v57 + 1);
  if (*((_QWORD *)&v57 + 1))
  {
    v41 = (unint64_t *)(*((_QWORD *)&v57 + 1) + 8);
    do
      v42 = __ldaxr(v41);
    while (__stlxr(v42 - 1, v41));
    if (!v42)
    {
      ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
      std::__shared_weak_count::__release_weak(v40);
    }
  }
  v43 = mlcore::ItemPropertyEffectiveArtworkType(void)::property;
  std::string::basic_string[abi:ne180100]<0>(&__str, "effective_artwork_type");
  std::string::operator=((std::string *)(v43 + 40), &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  v44 = mlcore::TypedEntityClass<mlcore::Item>::sharedPointer();
  v45 = mlcore::ItemPropertyEffectiveArtworkType(void)::property;
  std::string::basic_string[abi:ne180100]<0>(&__str, "effectiveArtworkType");
  mlcore::EntityClass::setPropertyForName(v44, v45, &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
}

void sub_20A788730(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, std::__shared_weak_count *a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,std::__shared_weak_count *a26)
{
  uint64_t v26;
  std::__shared_weak_count *v27;
  uint64_t v28;
  void *v30;
  unint64_t *p_shared_owners;
  unint64_t v32;
  unint64_t *v33;
  unint64_t v34;

  if (*(char *)(v28 - 49) < 0)
    operator delete(*(void **)(v28 - 72));
  std::__shared_weak_count::~__shared_weak_count(v27);
  operator delete(v30);
  if (a12)
  {
    p_shared_owners = (unint64_t *)&a12->__shared_owners_;
    do
      v32 = __ldaxr(p_shared_owners);
    while (__stlxr(v32 - 1, p_shared_owners));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))a12->__on_zero_shared)(a12);
      std::__shared_weak_count::__release_weak(a12);
    }
  }
  if (a26)
  {
    v33 = (unint64_t *)&a26->__shared_owners_;
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))a26->__on_zero_shared)(a26);
      std::__shared_weak_count::__release_weak(a26);
    }
  }
  MEMORY[0x20BD27AFC](v26, 0x10B3C40F6CDA669);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<mediaplatform::SQLCaseExpression>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C33BD78;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<mediaplatform::SQLCaseExpression>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C33BD78;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x20BD27AFCLL);
}

uint64_t std::__shared_ptr_emplace<mediaplatform::SQLCaseExpression>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void mlcore::Item::title(mlcore::Item *this@<X0>, std::string *a2@<X8>)
{
  char *v3;
  unint64_t v4;

  v3 = (char *)this + 8;
  v4 = mlcore::ItemPropertyTitle(this);
  mlcore::PropertyCacheBase<std::string,mediaplatform::Data>::valueForProperty(a2, (uint64_t)v3, v4);
}

void mlcore::Item::setTitle(mlcore *a1, uint64_t a2)
{
  std::string::size_type v3;
  std::string __p;

  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    __p = *(std::string *)a2;
  v3 = mlcore::ItemPropertyTitle(a1);
  mlcore::PropertyCacheBase<std::string,mediaplatform::Data>::setValueForProperty((uint64_t)a1 + 8, &__p, v3);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_20A788AB4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t mlcore::Item::fileSize(mlcore::Item *this)
{
  unint64_t v2;

  v2 = mlcore::ItemPropertyFileSize(this);
  return mlcore::Entity::valueForProperty<long long>((uint64_t)this, v2);
}

uint64_t mlcore::Entity::valueForProperty<long long>(uint64_t a1, unint64_t a2)
{
  uint64_t v3;
  std::runtime_error *exception;

  v3 = a1 + 8;
  if (!mlcore::PropertyCache::hasValueForProperty((_QWORD *)(a1 + 8), a2))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "faulting not implemented yet");
    __cxa_throw(exception, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
  }
  return mlcore::PropertyCacheBase<long long,int,double,std::string,mediaplatform::Data>::valueForProperty(v3, a2);
}

void sub_20A788B5C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

_QWORD *mlcore::Item::setFileSize(mlcore::Item *this, uint64_t a2)
{
  _QWORD *result;
  unint64_t v5;

  v5 = mlcore::ItemPropertyFileSize(this);
  result = std::__hash_table<std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>,std::__unordered_map_hasher<mlcore::ModelProperty<long long> *,std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>,std::hash<mlcore::ModelProperty<long long> *>,std::equal_to<mlcore::ModelProperty<long long> *>,true>,std::__unordered_map_equal<mlcore::ModelProperty<long long> *,std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>,std::equal_to<mlcore::ModelProperty<long long> *>,std::hash<mlcore::ModelProperty<long long> *>,true>,std::allocator<std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>>>::__emplace_unique_key_args<mlcore::ModelProperty<long long> *,std::piecewise_construct_t const&,std::tuple<mlcore::ModelProperty<long long> * const&>,std::tuple<>>((uint64_t)this + 176, v5, &v5);
  result[3] = a2;
  return result;
}

double mlcore::Item::totalTime(mlcore::Item *this)
{
  unint64_t v2;

  v2 = mlcore::ItemPropertyTotalTime(this);
  return mlcore::Entity::valueForProperty<double>((uint64_t)this, v2);
}

double mlcore::Entity::valueForProperty<double>(uint64_t a1, unint64_t a2)
{
  uint64_t v3;
  std::runtime_error *exception;

  v3 = a1 + 8;
  if (!mlcore::PropertyCache::hasValueForProperty((_QWORD *)(a1 + 8), a2))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "faulting not implemented yet");
    __cxa_throw(exception, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
  }
  return mlcore::PropertyCacheBase<double,std::string,mediaplatform::Data>::valueForProperty(v3, a2);
}

void sub_20A788C40(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

double *mlcore::Item::setTotalTime(mlcore::Item *this, double a2)
{
  double *result;
  unint64_t v5;

  v5 = mlcore::ItemPropertyTotalTime(this);
  result = (double *)std::__hash_table<std::__hash_value_type<mlcore::ModelProperty<double> *,double>,std::__unordered_map_hasher<mlcore::ModelProperty<double> *,std::__hash_value_type<mlcore::ModelProperty<double> *,double>,std::hash<mlcore::ModelProperty<double> *>,std::equal_to<mlcore::ModelProperty<double> *>,true>,std::__unordered_map_equal<mlcore::ModelProperty<double> *,std::__hash_value_type<mlcore::ModelProperty<double> *,double>,std::equal_to<mlcore::ModelProperty<double> *>,std::hash<mlcore::ModelProperty<double> *>,true>,std::allocator<std::__hash_value_type<mlcore::ModelProperty<double> *,double>>>::__emplace_unique_key_args<mlcore::ModelProperty<double> *,std::piecewise_construct_t const&,std::tuple<mlcore::ModelProperty<double> * const&>,std::tuple<>>((uint64_t)this + 96, v5, &v5);
  result[3] = a2;
  return result;
}

uint64_t mlcore::TypedEntityClass<mlcore::Item>::isCloudUpdatable()
{
  return 1;
}

uint64_t mlcore::TypedEntityClass<mlcore::Item>::representativeItemPersistentIDProperty()
{
  return 0;
}

uint64_t mlcore::TypedEntityClass<mlcore::Item>::trackForeignPersistentIDProperty()
{
  return 0;
}

uint64_t mlcore::TypedEntityClass<mlcore::Item>::trackForeignOrderingProperty()
{
  return 0;
}

_QWORD *mlcore::TypedEntityClass<mlcore::Item>::databaseTablesToDeleteFrom@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *result;

  v2 = *(_QWORD *)mediaplatform::Singleton<mlcore::ItemExtraTable>::sharedInstance();
  v3 = *(_QWORD *)mediaplatform::Singleton<mlcore::ItemStoreTable>::sharedInstance();
  v4 = *(_QWORD *)mediaplatform::Singleton<mlcore::ItemVideoTable>::sharedInstance();
  v5 = *(_QWORD *)mediaplatform::Singleton<mlcore::ItemPlaybackTable>::sharedInstance();
  v6 = *(_QWORD *)mediaplatform::Singleton<mlcore::ItemSearchTable>::sharedInstance();
  v7 = *(_QWORD *)mediaplatform::Singleton<mlcore::ItemKVSTable>::sharedInstance();
  v8 = *(_QWORD *)mediaplatform::Singleton<mlcore::ItemStatsTable>::sharedInstance();
  a1[1] = 0;
  a1[2] = 0;
  *a1 = 0;
  result = operator new(0x38uLL);
  a1[1] = result + 7;
  a1[2] = result + 7;
  *result = v2;
  result[1] = v3;
  result[2] = v4;
  result[3] = v5;
  result[4] = v6;
  result[5] = v7;
  result[6] = v8;
  *a1 = result;
  return result;
}

_QWORD *mlcore::TypedEntityClass<mlcore::Item>::databaseTablesToInsertInto@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *result;

  v2 = *(_QWORD *)mediaplatform::Singleton<mlcore::ItemExtraTable>::sharedInstance();
  v3 = *(_QWORD *)mediaplatform::Singleton<mlcore::ItemStoreTable>::sharedInstance();
  v4 = *(_QWORD *)mediaplatform::Singleton<mlcore::ItemVideoTable>::sharedInstance();
  v5 = *(_QWORD *)mediaplatform::Singleton<mlcore::ItemPlaybackTable>::sharedInstance();
  v6 = *(_QWORD *)mediaplatform::Singleton<mlcore::ItemSearchTable>::sharedInstance();
  v7 = *(_QWORD *)mediaplatform::Singleton<mlcore::ItemKVSTable>::sharedInstance();
  v8 = *(_QWORD *)mediaplatform::Singleton<mlcore::ItemStatsTable>::sharedInstance();
  a1[1] = 0;
  a1[2] = 0;
  *a1 = 0;
  result = operator new(0x38uLL);
  a1[1] = result + 7;
  a1[2] = result + 7;
  *result = v2;
  result[1] = v3;
  result[2] = v4;
  result[3] = v5;
  result[4] = v6;
  result[5] = v7;
  result[6] = v8;
  *a1 = result;
  return result;
}

mlcore::MLDatabasePropertiesTable *mlcore::MLDatabasePropertiesTable::MLDatabasePropertiesTable(mlcore::MLDatabasePropertiesTable *this)
{
  std::string *v2;
  int v3;
  std::string *v4;
  void *__p[2];
  char v7;
  _BYTE v8[8];
  std::string v9;
  int v10;
  char v11;
  std::string v12;
  void *v13[2];
  char v14;
  _BYTE v15[8];
  std::string v16;
  int v17;
  char v18;
  std::string v19;
  std::string v20;
  uint64_t (**v21)();
  std::string v22;
  int v23;
  char v24;
  std::string v25;
  uint64_t (**v26)();
  std::string v27;
  int v28;
  char v29;
  std::string v30;
  std::string v31;
  uint64_t (**v32)();
  std::string v33;
  int v34;
  char v35;
  std::string v36;
  uint64_t (**v37)();
  std::string v38;
  int v39;
  char v40;
  std::string v41;
  uint64_t (**v42)();
  std::string v43;
  int v44;
  char v45;
  std::string v46;

  std::string::basic_string[abi:ne180100]<0>(&v20, "_MLDatabaseProperties");
  std::string::basic_string[abi:ne180100]<0>(v13, "key");
  mlcore::MediaColumn<std::string>::MediaColumn((uint64_t)v15, (uint64_t)v13, 1);
  std::string::basic_string[abi:ne180100]<0>(__p, "value");
  mlcore::MediaColumn<std::string>::MediaColumn((uint64_t)v8, (uint64_t)__p, 0);
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v31, v20.__r_.__value_.__l.__data_, v20.__r_.__value_.__l.__size_);
  else
    v31 = v20;
  v26 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v27, v16.__r_.__value_.__l.__data_, v16.__r_.__value_.__l.__size_);
  else
    v27 = v16;
  v28 = v17;
  v26 = &off_24C335AB8;
  v29 = v18;
  if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v30, v19.__r_.__value_.__l.__data_, v19.__r_.__value_.__l.__size_);
  else
    v30 = v19;
  v21 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v22, v9.__r_.__value_.__l.__data_, v9.__r_.__value_.__l.__size_);
  else
    v22 = v9;
  v23 = v10;
  v21 = &off_24C335AB8;
  v24 = v11;
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v25, v12.__r_.__value_.__l.__data_, v12.__r_.__value_.__l.__size_);
  else
    v25 = v12;
  *(_QWORD *)this = &off_24C330F50;
  v2 = (std::string *)((char *)this + 8);
  v3 = SHIBYTE(v31.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v2, v31.__r_.__value_.__l.__data_, v31.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = *(_OWORD *)&v31.__r_.__value_.__l.__data_;
    *((_QWORD *)this + 3) = *((_QWORD *)&v31.__r_.__value_.__l + 2);
  }
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 6) = 0;
  *((_QWORD *)this + 7) = 0;
  *(_QWORD *)this = off_24C335360;
  *((_QWORD *)this + 8) = 0;
  *((_QWORD *)this + 9) = 0;
  v37 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v38, v27.__r_.__value_.__l.__data_, v27.__r_.__value_.__l.__size_);
  else
    v38 = v27;
  v39 = v28;
  v37 = &off_24C335AB8;
  v40 = v29;
  if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v41, v30.__r_.__value_.__l.__data_, v30.__r_.__value_.__l.__size_);
  else
    v41 = v30;
  v32 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v33, v22.__r_.__value_.__l.__data_, v22.__r_.__value_.__l.__size_);
  else
    v33 = v22;
  v34 = v23;
  v32 = &off_24C335AB8;
  v35 = v24;
  if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v36, v25.__r_.__value_.__l.__data_, v25.__r_.__value_.__l.__size_);
  else
    v36 = v25;
  v42 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v43, v33.__r_.__value_.__l.__data_, v33.__r_.__value_.__l.__size_);
  else
    v43 = v33;
  v44 = v34;
  v42 = &off_24C335AB8;
  v45 = v35;
  if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v46, v36.__r_.__value_.__l.__data_, v36.__r_.__value_.__l.__size_);
  else
    v46 = v36;
  mediaplatform::DatabaseColumnTuple<1ul,mediaplatform::DatabaseColumn<std::string>>::DatabaseColumnTuple((uint64_t)this + 80, (uint64_t)&v42);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v42);
  *((_QWORD *)this + 18) = off_24C335D90;
  if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 152), v38.__r_.__value_.__l.__data_, v38.__r_.__value_.__l.__size_);
  else
    *(std::string *)((char *)this + 152) = v38;
  *((_DWORD *)this + 44) = v39;
  *((_QWORD *)this + 18) = &off_24C335AB8;
  *((_BYTE *)this + 180) = v40;
  v4 = (std::string *)((char *)this + 184);
  if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v4, v41.__r_.__value_.__l.__data_, v41.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)&v41.__r_.__value_.__l.__data_;
    *((_QWORD *)this + 25) = *((_QWORD *)&v41.__r_.__value_.__l + 2);
  }
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v32);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v37);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v21);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v26);
  if (v3 < 0)
    operator delete(v31.__r_.__value_.__l.__data_);
  *(_QWORD *)this = off_24C335EC8;
  std::__tuple_leaf<0ul,mlcore::MediaColumn<std::string>,false>::__tuple_leaf[abi:ne180100]<mlcore::MediaColumn<std::string>&,void>((uint64_t)this + 208, (uint64_t)v15);
  std::__tuple_leaf<1ul,mlcore::MediaColumn<std::string>,false>::__tuple_leaf[abi:ne180100]<mlcore::MediaColumn<std::string>&,void>((uint64_t)this + 272, (uint64_t)v8);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)v8);
  if (v7 < 0)
    operator delete(__p[0]);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)v15);
  if (v14 < 0)
    operator delete(v13[0]);
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v20.__r_.__value_.__l.__data_);
  *(_QWORD *)this = off_24C33A518;
  return this;
}

void sub_20A78929C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43,uint64_t a44,void *a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,void *a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,void *__p,uint64_t a61,int a62,__int16 a63)
{
  char a65;
  uint64_t a67;
  uint64_t v67;
  uint64_t v68;
  void **v69;
  uint64_t v70;
  void **v71;
  uint64_t v72;

  *(_QWORD *)(v67 + 144) = v70;
  if (*(char *)(v67 + 175) < 0)
    operator delete(*v69);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(v68);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&a67);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(v72 - 224);
  if (*(char *)(v67 + 79) < 0)
    operator delete(*v71);
  mediaplatform::DatabaseTableBase::~DatabaseTableBase((void **)v67);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&a44);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&a52);
  if (a65 < 0)
    operator delete(__p);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&a16);
  if (a15 < 0)
    operator delete(a10);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&a30);
  if (a29 < 0)
    operator delete(a24);
  if (a43 < 0)
    operator delete(a38);
  _Unwind_Resume(a1);
}

void sub_20A789444()
{
  JUMPOUT(0x20A789404);
}

void sub_20A78944C()
{
  JUMPOUT(0x20A789414);
}

void sub_20A789454()
{
  JUMPOUT(0x20A78941CLL);
}

void sub_20A78945C()
{
  JUMPOUT(0x20A78942CLL);
}

void mlcore::MLDatabasePropertiesTable::~MLDatabasePropertiesTable(void **this)
{
  char *v2;

  *this = off_24C335EC8;
  v2 = (char *)(this + 26);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)(this + 34));
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)v2);
  *this = off_24C335360;
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)(this + 18));
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)(this + 10));
  if (*((char *)this + 79) < 0)
    operator delete(this[7]);
  mediaplatform::DatabaseTableBase::~DatabaseTableBase(this);
}

{
  char *v2;

  *this = off_24C335EC8;
  v2 = (char *)(this + 26);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)(this + 34));
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)v2);
  *this = off_24C335360;
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)(this + 18));
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)(this + 10));
  if (*((char *)this + 79) < 0)
    operator delete(this[7]);
  mediaplatform::DatabaseTableBase::~DatabaseTableBase(this);
  JUMPOUT(0x20BD27AFCLL);
}

uint64_t mediaplatform::DatabaseTable<std::string,std::string>::columnCount()
{
  return 2;
}

void mediaplatform::DatabaseTable<std::string,std::string>::columnNames(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  mediaplatform::ColumnNamesApplier::operator()<std::string>((uint64_t)a2, a1 + 144);
  mediaplatform::ColumnNamesApplier::operator()<std::string>((uint64_t)a2, a1 + 80);
}

void sub_20A7895A8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void mediaplatform::DatabaseTable<std::string,std::string>::targetColumnExpression(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  __int128 *v3;
  __int128 *v4[3];
  __int128 **v5;

  v3 = (__int128 *)(a1 + 8);
  (*(void (**)(__int128 **__return_ptr))(*(_QWORD *)a1 + 24))(v4);
  std::allocate_shared[abi:ne180100]<mediaplatform::SQLColumnNameExpression,std::allocator<mediaplatform::SQLColumnNameExpression>,std::string &,std::string const&,void>(a2, v4[0], v3);
  v5 = v4;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v5);
}

void sub_20A789620(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void mediaplatform::DatabaseTable<std::string,std::string>::~DatabaseTable(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = off_24C335360;
  v2 = a1 + 80;
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 144);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(v2);
  if (*(char *)(a1 + 79) < 0)
    operator delete(*(void **)(a1 + 56));
  mediaplatform::DatabaseTableBase::~DatabaseTableBase((void **)a1);
}

{
  uint64_t v2;

  *(_QWORD *)a1 = off_24C335360;
  v2 = a1 + 80;
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 144);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(v2);
  if (*(char *)(a1 + 79) < 0)
    operator delete(*(void **)(a1 + 56));
  mediaplatform::DatabaseTableBase::~DatabaseTableBase((void **)a1);
  JUMPOUT(0x20BD27AFCLL);
}

{
  uint64_t v2;

  *(_QWORD *)a1 = off_24C335360;
  v2 = a1 + 80;
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 144);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(v2);
  if (*(char *)(a1 + 79) < 0)
    operator delete(*(void **)(a1 + 56));
  mediaplatform::DatabaseTableBase::~DatabaseTableBase((void **)a1);
}

void mlcore::MediaTable<std::string,std::string>::~MediaTable(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = off_24C335EC8;
  v2 = a1 + 208;
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 272);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(v2);
  *(_QWORD *)a1 = off_24C335360;
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 144);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 80);
  if (*(char *)(a1 + 79) < 0)
    operator delete(*(void **)(a1 + 56));
  mediaplatform::DatabaseTableBase::~DatabaseTableBase((void **)a1);
}

{
  uint64_t v2;

  *(_QWORD *)a1 = off_24C335EC8;
  v2 = a1 + 208;
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 272);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(v2);
  *(_QWORD *)a1 = off_24C335360;
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 144);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 80);
  if (*(char *)(a1 + 79) < 0)
    operator delete(*(void **)(a1 + 56));
  mediaplatform::DatabaseTableBase::~DatabaseTableBase((void **)a1);
  JUMPOUT(0x20BD27AFCLL);
}

uint64_t std::__tuple_leaf<0ul,mlcore::MediaColumn<std::string>,false>::__tuple_leaf[abi:ne180100]<mlcore::MediaColumn<std::string>&,void>(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  std::string *v5;
  __int128 v6;

  *(_QWORD *)a1 = off_24C335D90;
  if (*(char *)(a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 8), *(const std::string::value_type **)(a2 + 8), *(_QWORD *)(a2 + 16));
  }
  else
  {
    v4 = *(_OWORD *)(a2 + 8);
    *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 8) = v4;
  }
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_QWORD *)a1 = &off_24C335AB8;
  *(_BYTE *)(a1 + 36) = *(_BYTE *)(a2 + 36);
  v5 = (std::string *)(a1 + 40);
  if (*(char *)(a2 + 63) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *(const std::string::value_type **)(a2 + 40), *(_QWORD *)(a2 + 48));
  }
  else
  {
    v6 = *(_OWORD *)(a2 + 40);
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
  *(_QWORD *)a1 = &off_24C336A60;
  return a1;
}

void sub_20A7898EC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  uint64_t v3;

  *(_QWORD *)v1 = v3;
  if (*(char *)(v1 + 31) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

void mlcore::MLDatabasePropertiesTable::keyColumn(mlcore::MLDatabasePropertiesTable *this@<X0>, uint64_t a2@<X8>)
{
  std::string *v4;
  std::string *v5;

  *(_QWORD *)a2 = off_24C335D90;
  v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 239) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 27), *((_QWORD *)this + 28));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 216);
    *(_QWORD *)(a2 + 24) = *((_QWORD *)this + 29);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 60);
  *(_QWORD *)a2 = &off_24C335AB8;
  *(_BYTE *)(a2 + 36) = *((_BYTE *)this + 244);
  v5 = (std::string *)(a2 + 40);
  if (*((char *)this + 271) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)this + 31), *((_QWORD *)this + 32));
  }
  else
  {
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 248);
    *(_QWORD *)(a2 + 56) = *((_QWORD *)this + 33);
  }
  *(_QWORD *)a2 = &off_24C336A60;
}

void sub_20A7899C8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  uint64_t v3;

  *(_QWORD *)v1 = v3;
  if (*(char *)(v1 + 31) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

void mlcore::MLDatabasePropertiesTable::valueColumn(mlcore::MLDatabasePropertiesTable *this@<X0>, uint64_t a2@<X8>)
{
  std::string *v4;
  std::string *v5;

  *(_QWORD *)a2 = off_24C335D90;
  v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 303) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 35), *((_QWORD *)this + 36));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 280);
    *(_QWORD *)(a2 + 24) = *((_QWORD *)this + 37);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 76);
  *(_QWORD *)a2 = &off_24C335AB8;
  *(_BYTE *)(a2 + 36) = *((_BYTE *)this + 308);
  v5 = (std::string *)(a2 + 40);
  if (*((char *)this + 335) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)this + 39), *((_QWORD *)this + 40));
  }
  else
  {
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 312);
    *(_QWORD *)(a2 + 56) = *((_QWORD *)this + 41);
  }
  *(_QWORD *)a2 = &off_24C336A60;
}

void sub_20A789AA0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  uint64_t v3;

  *(_QWORD *)v1 = v3;
  if (*(char *)(v1 + 31) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

void mediaplatform::SQLSelectCoreStatement::~SQLSelectCoreStatement(mediaplatform::SQLSelectCoreStatement *this)
{
  void **v2;
  void **v3;

  *(_QWORD *)this = &off_24C331378;
  v2 = (void **)((char *)this + 16);
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)this + 72);
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)this + 56);
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)this + 40);
  v3 = v2;
  std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__destroy_vector::operator()[abi:ne180100](&v3);
}

{
  void **v2;
  void **v3;

  *(_QWORD *)this = &off_24C331378;
  v2 = (void **)((char *)this + 16);
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)this + 72);
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)this + 56);
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)this + 40);
  v3 = v2;
  std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__destroy_vector::operator()[abi:ne180100](&v3);
  JUMPOUT(0x20BD27AFCLL);
}

uint64_t mediaplatform::SQLSelectCoreStatement::sql(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  const char *v6;
  uint64_t v7;
  void *p_p;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  void **v12;
  uint64_t v13;
  void **v14;
  uint64_t v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  void *v19[2];
  char v20;
  void *__p;
  std::__shared_weak_count *v22;
  unsigned __int8 v23;
  std::__shared_weak_count *v24;
  std::__shared_weak_count *v25;
  _QWORD v26[11];
  char v27;
  uint64_t v28;

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v26);
  v24 = 0;
  v25 = 0;
  if (a2)
  {
    (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)a2 + 16))(&__p, a2);
    v5 = (std::__shared_weak_count *)__p;
    v4 = v22;
  }
  else
  {
    v4 = (std::__shared_weak_count *)operator new(0x70uLL);
    v4->__shared_owners_ = 0;
    v4->__shared_weak_owners_ = 0;
    v4->__vftable = (std::__shared_weak_count_vtbl *)&off_24C33BF70;
    v5 = v4 + 1;
    *(_OWORD *)&v4[1].__shared_owners_ = 0u;
    v4[2].std::__shared_count = 0u;
    LODWORD(v4[2].__shared_weak_owners_) = 1065353216;
    v4[3].std::__shared_count = 0u;
    *(_OWORD *)&v4[3].__shared_weak_owners_ = 0u;
    LODWORD(v4[4].__shared_owners_) = 1065353216;
  }
  v24 = v5;
  v25 = v4;
  LODWORD(v5->__vftable) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)"SELECT ", 7);
  if (*(_BYTE *)(a1 + 8))
    v6 = "DISTINCT ";
  else
    v6 = "ALL ";
  if (*(_BYTE *)(a1 + 8))
    v7 = 9;
  else
    v7 = 4;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)v6, v7);
  std::string::basic_string[abi:ne180100]<0>(v19, ", ");
  mediaplatform::SQLStringWithStatementList<mediaplatform::SQLExpression>((uint64_t)&__p, (uint64_t **)(a1 + 16), a2, (uint64_t)v19);
  if ((v23 & 0x80u) == 0)
    p_p = &__p;
  else
    p_p = __p;
  if ((v23 & 0x80u) == 0)
    v9 = v23;
  else
    v9 = (uint64_t)v22;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)p_p, v9);
  if ((char)v23 < 0)
    operator delete(__p);
  if (v20 < 0)
    operator delete(v19[0]);
  LODWORD(v5->__vftable) = 1;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)" FROM ", 6);
  (*(void (**)(void **__return_ptr, _QWORD, uint64_t))(**(_QWORD **)(a1 + 40) + 16))(&__p, *(_QWORD *)(a1 + 40), a2);
  if ((v23 & 0x80u) == 0)
    v10 = &__p;
  else
    v10 = __p;
  if ((v23 & 0x80u) == 0)
    v11 = v23;
  else
    v11 = (uint64_t)v22;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)v10, v11);
  if ((char)v23 < 0)
    operator delete(__p);
  if (*(_QWORD *)(a1 + 56))
  {
    LODWORD(v5->__vftable) = 2;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)" WHERE ", 7);
    (*(void (**)(void **__return_ptr, _QWORD, uint64_t))(**(_QWORD **)(a1 + 56) + 16))(&__p, *(_QWORD *)(a1 + 56), a2);
    v12 = (v23 & 0x80u) == 0 ? &__p : (void **)__p;
    v13 = (v23 & 0x80u) == 0 ? v23 : (uint64_t)v22;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)v12, v13);
    if ((char)v23 < 0)
      operator delete(__p);
  }
  if (*(_QWORD *)(a1 + 72))
  {
    LODWORD(v5->__vftable) = 3;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)" GROUP BY ", 10);
    (*(void (**)(void **__return_ptr, _QWORD, uint64_t))(**(_QWORD **)(a1 + 72) + 16))(&__p, *(_QWORD *)(a1 + 72), a2);
    v14 = (v23 & 0x80u) == 0 ? &__p : (void **)__p;
    v15 = (v23 & 0x80u) == 0 ? v23 : (uint64_t)v22;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)v14, v15);
    if ((char)v23 < 0)
    {
      operator delete(__p);
      if (!a2)
        goto LABEL_47;
      goto LABEL_46;
    }
  }
  if (a2)
LABEL_46:
    (*(void (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2);
LABEL_47:
  std::stringbuf::str();
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v17 = __ldaxr(p_shared_owners);
    while (__stlxr(v17 - 1, p_shared_owners));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  v26[0] = *MEMORY[0x24BEDB800];
  *(_QWORD *)((char *)v26 + *(_QWORD *)(v26[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  v26[1] = MEMORY[0x24BEDB848] + 16;
  if (v27 < 0)
    operator delete((void *)v26[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x20BD27A84](&v28);
}

void sub_20A789EF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,uint64_t a23,char a24)
{
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)&a22);
  std::ostringstream::~ostringstream((uint64_t)&a24);
  _Unwind_Resume(a1);
}

uint64_t mediaplatform::SQLStringWithStatementList<mediaplatform::SQLExpression>(uint64_t a1, uint64_t **a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v7;
  uint64_t *v8;
  char v9;
  std::__shared_weak_count *v10;
  uint64_t v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  void **v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  void *__p[2];
  unsigned __int8 v23;
  uint64_t v24;
  std::__shared_weak_count *v25;
  _QWORD v26[11];
  char v27;
  uint64_t v28;

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v26);
  v7 = *a2;
  v8 = a2[1];
  if (*a2 != v8)
  {
    v9 = 1;
    do
    {
      v11 = *v7;
      v10 = (std::__shared_weak_count *)v7[1];
      v24 = *v7;
      v25 = v10;
      if (v10)
      {
        p_shared_owners = (unint64_t *)&v10->__shared_owners_;
        do
          v13 = __ldxr(p_shared_owners);
        while (__stxr(v13 + 1, p_shared_owners));
      }
      if ((v9 & 1) == 0)
      {
        v14 = *(char *)(a4 + 23);
        if (v14 >= 0)
          v15 = a4;
        else
          v15 = *(_QWORD *)a4;
        if (v14 >= 0)
          v16 = *(unsigned __int8 *)(a4 + 23);
        else
          v16 = *(_QWORD *)(a4 + 8);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, v15, v16);
      }
      (*(void (**)(void **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v11 + 16))(__p, v11, a3);
      if ((v23 & 0x80u) == 0)
        v17 = __p;
      else
        v17 = (void **)__p[0];
      if ((v23 & 0x80u) == 0)
        v18 = v23;
      else
        v18 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)v17, v18);
      if ((char)v23 < 0)
      {
        operator delete(__p[0]);
        if (v10)
        {
LABEL_24:
          v19 = (unint64_t *)&v10->__shared_owners_;
          do
            v20 = __ldaxr(v19);
          while (__stlxr(v20 - 1, v19));
          if (!v20)
          {
            ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
            std::__shared_weak_count::__release_weak(v10);
          }
        }
      }
      else if (v10)
      {
        goto LABEL_24;
      }
      v9 = 0;
      v7 += 2;
    }
    while (v7 != v8);
  }
  std::stringbuf::str();
  v26[0] = *MEMORY[0x24BEDB800];
  *(_QWORD *)((char *)v26 + *(_QWORD *)(v26[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  v26[1] = MEMORY[0x24BEDB848] + 16;
  if (v27 < 0)
    operator delete((void *)v26[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x20BD27A84](&v28);
}

void sub_20A78A124(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, char a17)
{
  std::ostringstream::~ostringstream((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<mediaplatform::SQLRenderingContext>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C33BF70;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<mediaplatform::SQLRenderingContext>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C33BF70;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x20BD27AFCLL);
}

void mediaplatform::SQLSelectStatement::~SQLSelectStatement(mediaplatform::SQLSelectStatement *this)
{
  char *v2;
  void **v3;

  *(_QWORD *)this = &off_24C331050;
  v2 = (char *)this + 8;
  v3 = (void **)((char *)this + 56);
  std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__destroy_vector::operator()[abi:ne180100](&v3);
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)this + 40);
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)this + 24);
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)v2);
}

{
  char *v2;
  void **v3;

  *(_QWORD *)this = &off_24C331050;
  v2 = (char *)this + 8;
  v3 = (void **)((char *)this + 56);
  std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__destroy_vector::operator()[abi:ne180100](&v3);
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)this + 40);
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)this + 24);
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)v2);
  JUMPOUT(0x20BD27AFCLL);
}

uint64_t mediaplatform::SQLSelectStatement::sql(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  void *p_p;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  void **v10;
  uint64_t v11;
  void **v12;
  uint64_t v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  void *v17[2];
  char v18;
  void *__p;
  std::__shared_weak_count *v20;
  unsigned __int8 v21;
  std::__shared_weak_count *v22;
  std::__shared_weak_count *v23;
  _QWORD v24[11];
  char v25;
  uint64_t v26;

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v24);
  v22 = 0;
  v23 = 0;
  if (a2)
  {
    (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)a2 + 16))(&__p, a2);
    v5 = (std::__shared_weak_count *)__p;
    v4 = v20;
  }
  else
  {
    v4 = (std::__shared_weak_count *)operator new(0x70uLL);
    v4->__shared_owners_ = 0;
    v4->__shared_weak_owners_ = 0;
    v4->__vftable = (std::__shared_weak_count_vtbl *)&off_24C33BF70;
    v5 = v4 + 1;
    *(_OWORD *)&v4[1].__shared_owners_ = 0u;
    v4[2].std::__shared_count = 0u;
    LODWORD(v4[2].__shared_weak_owners_) = 1065353216;
    v4[3].std::__shared_count = 0u;
    *(_OWORD *)&v4[3].__shared_weak_owners_ = 0u;
    LODWORD(v4[4].__shared_owners_) = 1065353216;
  }
  v22 = v5;
  v23 = v4;
  (*(void (**)(void **__return_ptr, _QWORD, uint64_t))(**(_QWORD **)(a1 + 8) + 16))(&__p, *(_QWORD *)(a1 + 8), a2);
  if ((v21 & 0x80u) == 0)
    p_p = &__p;
  else
    p_p = __p;
  if ((v21 & 0x80u) == 0)
    v7 = v21;
  else
    v7 = (uint64_t)v20;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)p_p, v7);
  if ((char)v21 < 0)
    operator delete(__p);
  if (*(_QWORD *)(a1 + 64) != *(_QWORD *)(a1 + 56))
  {
    LODWORD(v5->__vftable) = 4;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)" ORDER BY ", 10);
    std::string::basic_string[abi:ne180100]<0>(v17, ", ");
    mediaplatform::SQLStringWithStatementList<mediaplatform::SQLOrderingTerm>((uint64_t)&__p, (uint64_t **)(a1 + 56), a2, (uint64_t)v17);
    if ((v21 & 0x80u) == 0)
      v8 = &__p;
    else
      v8 = __p;
    if ((v21 & 0x80u) == 0)
      v9 = v21;
    else
      v9 = (uint64_t)v20;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)v8, v9);
    if ((char)v21 < 0)
      operator delete(__p);
    if (v18 < 0)
      operator delete(v17[0]);
  }
  if (*(_QWORD *)(a1 + 24))
  {
    LODWORD(v5->__vftable) = 5;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)" LIMIT ", 7);
    (*(void (**)(void **__return_ptr, _QWORD, uint64_t))(**(_QWORD **)(a1 + 24) + 16))(&__p, *(_QWORD *)(a1 + 24), a2);
    v10 = (v21 & 0x80u) == 0 ? &__p : (void **)__p;
    v11 = (v21 & 0x80u) == 0 ? v21 : (uint64_t)v20;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)v10, v11);
    if ((char)v21 < 0)
      operator delete(__p);
  }
  if (*(_QWORD *)(a1 + 40))
  {
    LODWORD(v5->__vftable) = 6;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)" OFFSET ", 8);
    (*(void (**)(void **__return_ptr, _QWORD, uint64_t))(**(_QWORD **)(a1 + 40) + 16))(&__p, *(_QWORD *)(a1 + 40), a2);
    v12 = (v21 & 0x80u) == 0 ? &__p : (void **)__p;
    v13 = (v21 & 0x80u) == 0 ? v21 : (uint64_t)v20;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)v12, v13);
    if ((char)v21 < 0)
    {
      operator delete(__p);
      if (!a2)
        goto LABEL_42;
      goto LABEL_41;
    }
  }
  if (a2)
LABEL_41:
    (*(void (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2);
LABEL_42:
  std::stringbuf::str();
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  v24[0] = *MEMORY[0x24BEDB800];
  *(_QWORD *)((char *)v24 + *(_QWORD *)(v24[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  v24[1] = MEMORY[0x24BEDB848] + 16;
  if (v25 < 0)
    operator delete((void *)v24[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x20BD27A84](&v26);
}

void sub_20A78A5A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,uint64_t a23,char a24)
{
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)&a22);
  std::ostringstream::~ostringstream((uint64_t)&a24);
  _Unwind_Resume(a1);
}

uint64_t mediaplatform::SQLStringWithStatementList<mediaplatform::SQLOrderingTerm>(uint64_t a1, uint64_t **a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v7;
  uint64_t *v8;
  char v9;
  std::__shared_weak_count *v10;
  uint64_t v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  void **v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  void *__p[2];
  unsigned __int8 v23;
  uint64_t v24;
  std::__shared_weak_count *v25;
  _QWORD v26[11];
  char v27;
  uint64_t v28;

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v26);
  v7 = *a2;
  v8 = a2[1];
  if (*a2 != v8)
  {
    v9 = 1;
    do
    {
      v11 = *v7;
      v10 = (std::__shared_weak_count *)v7[1];
      v24 = *v7;
      v25 = v10;
      if (v10)
      {
        p_shared_owners = (unint64_t *)&v10->__shared_owners_;
        do
          v13 = __ldxr(p_shared_owners);
        while (__stxr(v13 + 1, p_shared_owners));
      }
      if ((v9 & 1) == 0)
      {
        v14 = *(char *)(a4 + 23);
        if (v14 >= 0)
          v15 = a4;
        else
          v15 = *(_QWORD *)a4;
        if (v14 >= 0)
          v16 = *(unsigned __int8 *)(a4 + 23);
        else
          v16 = *(_QWORD *)(a4 + 8);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, v15, v16);
      }
      (*(void (**)(void **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v11 + 16))(__p, v11, a3);
      if ((v23 & 0x80u) == 0)
        v17 = __p;
      else
        v17 = (void **)__p[0];
      if ((v23 & 0x80u) == 0)
        v18 = v23;
      else
        v18 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)v17, v18);
      if ((char)v23 < 0)
      {
        operator delete(__p[0]);
        if (v10)
        {
LABEL_24:
          v19 = (unint64_t *)&v10->__shared_owners_;
          do
            v20 = __ldaxr(v19);
          while (__stlxr(v20 - 1, v19));
          if (!v20)
          {
            ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
            std::__shared_weak_count::__release_weak(v10);
          }
        }
      }
      else if (v10)
      {
        goto LABEL_24;
      }
      v9 = 0;
      v7 += 2;
    }
    while (v7 != v8);
  }
  std::stringbuf::str();
  v26[0] = *MEMORY[0x24BEDB800];
  *(_QWORD *)((char *)v26 + *(_QWORD *)(v26[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  v26[1] = MEMORY[0x24BEDB848] + 16;
  if (v27 < 0)
    operator delete((void *)v26[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x20BD27A84](&v28);
}

void sub_20A78A7D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, char a17)
{
  std::ostringstream::~ostringstream((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void mediaplatform::SQLCompoundSelectStatement::~SQLCompoundSelectStatement(mediaplatform::SQLCompoundSelectStatement *this)
{
  char *v2;
  void **v3;

  *(_QWORD *)this = &off_24C331470;
  v2 = (char *)this + 8;
  v3 = (void **)((char *)this + 80);
  std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__destroy_vector::operator()[abi:ne180100](&v3);
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)this + 64);
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)this + 48);
  v3 = (void **)((char *)this + 24);
  std::vector<mediaplatform::SQLCompoundSelectStatement::CompoundFragment>::__destroy_vector::operator()[abi:ne180100](&v3);
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)v2);
}

{
  char *v2;
  void **v3;

  *(_QWORD *)this = &off_24C331470;
  v2 = (char *)this + 8;
  v3 = (void **)((char *)this + 80);
  std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__destroy_vector::operator()[abi:ne180100](&v3);
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)this + 64);
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)this + 48);
  v3 = (void **)((char *)this + 24);
  std::vector<mediaplatform::SQLCompoundSelectStatement::CompoundFragment>::__destroy_vector::operator()[abi:ne180100](&v3);
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)v2);
  JUMPOUT(0x20BD27AFCLL);
}

uint64_t mediaplatform::SQLCompoundSelectStatement::sql(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  char *v5;
  void **v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int *i;
  uint64_t v10;
  std::__shared_weak_count *v11;
  void *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void **v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  void **v19;
  uint64_t v20;
  void **v21;
  void *v22;
  void **v23;
  void *v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  void *v29[2];
  unsigned __int8 v30;
  void *__p[2];
  std::__shared_weak_count *v32;
  __int128 v33;
  _QWORD v34[11];
  char v35;
  uint64_t v36;

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v34);
  v33 = 0uLL;
  if (a2)
  {
    (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)a2 + 16))(__p, a2);
    v4 = *(_OWORD *)__p;
  }
  else
  {
    v5 = (char *)operator new(0x70uLL);
    *((_QWORD *)v5 + 1) = 0;
    *((_QWORD *)v5 + 2) = 0;
    *(_QWORD *)v5 = &off_24C33BF70;
    *((_OWORD *)v5 + 2) = 0u;
    *((_OWORD *)v5 + 3) = 0u;
    *((_DWORD *)v5 + 16) = 1065353216;
    *(_OWORD *)(v5 + 72) = 0u;
    *(_OWORD *)(v5 + 88) = 0u;
    *((_DWORD *)v5 + 26) = 1065353216;
    *(_QWORD *)&v4 = v5 + 24;
    *((_QWORD *)&v4 + 1) = v5;
  }
  v33 = v4;
  (*(void (**)(void **__return_ptr, _QWORD, uint64_t))(**(_QWORD **)(a1 + 8) + 16))(__p, *(_QWORD *)(a1 + 8), a2);
  if (SHIBYTE(v32) >= 0)
    v6 = __p;
  else
    v6 = (void **)__p[0];
  if (SHIBYTE(v32) >= 0)
    v7 = HIBYTE(v32);
  else
    v7 = (uint64_t)__p[1];
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)v6, v7);
  if (SHIBYTE(v32) < 0)
    operator delete(__p[0]);
  v8 = *(unsigned int **)(a1 + 24);
  for (i = *(unsigned int **)(a1 + 32); v8 != i; v8 += 6)
  {
    v10 = *v8;
    LODWORD(__p[0]) = *v8;
    v12 = (void *)*((_QWORD *)v8 + 1);
    v11 = (std::__shared_weak_count *)*((_QWORD *)v8 + 2);
    __p[1] = v12;
    v32 = v11;
    if (v11)
    {
      p_shared_owners = (unint64_t *)&v11->__shared_owners_;
      do
        v14 = __ldxr(p_shared_owners);
      while (__stxr(v14 + 1, p_shared_owners));
    }
    if (v10 < 4)
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)(&off_24C33DA70)[v10], *(_QWORD *)&asc_20A9161C0[8 * v10]);
    (*(void (**)(void **__return_ptr, void *, uint64_t))(*(_QWORD *)v12 + 16))(v29, v12, a2);
    if ((v30 & 0x80u) == 0)
      v15 = v29;
    else
      v15 = (void **)v29[0];
    if ((v30 & 0x80u) == 0)
      v16 = v30;
    else
      v16 = (uint64_t)v29[1];
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)v15, v16);
    if ((char)v30 < 0)
    {
      operator delete(v29[0]);
      if (v11)
      {
LABEL_28:
        v17 = (unint64_t *)&v11->__shared_owners_;
        do
          v18 = __ldaxr(v17);
        while (__stlxr(v18 - 1, v17));
        if (!v18)
        {
          ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
          std::__shared_weak_count::__release_weak(v11);
        }
      }
    }
    else if (v11)
    {
      goto LABEL_28;
    }
  }
  if (*(_QWORD *)(a1 + 88) != *(_QWORD *)(a1 + 80))
  {
    *(_DWORD *)v33 = 4;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)" ORDER BY ", 10);
    std::string::basic_string[abi:ne180100]<0>(v29, ", ");
    mediaplatform::SQLStringWithStatementList<mediaplatform::SQLOrderingTerm>((uint64_t)__p, (uint64_t **)(a1 + 80), a2, (uint64_t)v29);
    if (SHIBYTE(v32) >= 0)
      v19 = __p;
    else
      v19 = (void **)__p[0];
    if (SHIBYTE(v32) >= 0)
      v20 = HIBYTE(v32);
    else
      v20 = (uint64_t)__p[1];
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)v19, v20);
    if (SHIBYTE(v32) < 0)
      operator delete(__p[0]);
    if ((char)v30 < 0)
      operator delete(v29[0]);
  }
  if (*(_QWORD *)(a1 + 48))
  {
    *(_DWORD *)v33 = 5;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)" LIMIT ", 7);
    (*(void (**)(void **__return_ptr, _QWORD, uint64_t))(**(_QWORD **)(a1 + 48) + 16))(__p, *(_QWORD *)(a1 + 48), a2);
    v21 = SHIBYTE(v32) >= 0 ? __p : (void **)__p[0];
    v22 = SHIBYTE(v32) >= 0 ? (void *)HIBYTE(v32) : __p[1];
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)v21, (uint64_t)v22);
    if (SHIBYTE(v32) < 0)
      operator delete(__p[0]);
  }
  if (*(_QWORD *)(a1 + 64))
  {
    *(_DWORD *)v33 = 6;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)" OFFSET ", 8);
    (*(void (**)(void **__return_ptr, _QWORD, uint64_t))(**(_QWORD **)(a1 + 64) + 16))(__p, *(_QWORD *)(a1 + 64), a2);
    v23 = SHIBYTE(v32) >= 0 ? __p : (void **)__p[0];
    v24 = SHIBYTE(v32) >= 0 ? (void *)HIBYTE(v32) : __p[1];
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)v23, (uint64_t)v24);
    if (SHIBYTE(v32) < 0)
    {
      operator delete(__p[0]);
      if (!a2)
        goto LABEL_63;
      goto LABEL_62;
    }
  }
  if (a2)
LABEL_62:
    (*(void (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2);
LABEL_63:
  std::stringbuf::str();
  v25 = (std::__shared_weak_count *)*((_QWORD *)&v33 + 1);
  if (*((_QWORD *)&v33 + 1))
  {
    v26 = (unint64_t *)(*((_QWORD *)&v33 + 1) + 8);
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  v34[0] = *MEMORY[0x24BEDB800];
  *(_QWORD *)((char *)v34 + *(_QWORD *)(v34[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  v34[1] = MEMORY[0x24BEDB848] + 16;
  if (v35 < 0)
    operator delete((void *)v34[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x20BD27A84](&v36);
}

void sub_20A78AD50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,char a23,uint64_t a24,char a25)
{
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)&a23);
  std::ostringstream::~ostringstream((uint64_t)&a25);
  _Unwind_Resume(a1);
}

void std::vector<mediaplatform::SQLCompoundSelectStatement::CompoundFragment>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;
  char *v6;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v6 = v4 - 24;
        std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)(v4 - 16));
        v4 = v6;
      }
      while (v6 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

double mediaplatform::SQLSelectCoreStatement::SQLSelectCoreStatement(mediaplatform::SQLSelectCoreStatement *this)
{
  double result;

  *(_QWORD *)this = &off_24C331378;
  *((_BYTE *)this + 8) = 0;
  result = 0.0;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_QWORD *)this + 10) = 0;
  return result;
}

{
  double result;

  *(_QWORD *)this = &off_24C331378;
  *((_BYTE *)this + 8) = 0;
  result = 0.0;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_QWORD *)this + 10) = 0;
  return result;
}

uint64_t mediaplatform::SQLSelectCoreStatement::SQLSelectCoreStatement(uint64_t a1, _QWORD **a2, _QWORD *a3)
{
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;

  *(_QWORD *)a1 = &off_24C331378;
  *(_BYTE *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__init_with_size[abi:ne180100]<std::shared_ptr<mediaplatform::SQLExpression const>*,std::shared_ptr<mediaplatform::SQLExpression const>*>((char *)(a1 + 16), *a2, a2[1], ((char *)a2[1] - (char *)*a2) >> 4);
  v5 = a3[1];
  *(_QWORD *)(a1 + 40) = *a3;
  *(_QWORD *)(a1 + 48) = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  return a1;
}

char *std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__init_with_size[abi:ne180100]<std::shared_ptr<mediaplatform::SQLExpression const>*,std::shared_ptr<mediaplatform::SQLExpression const>*>(char *result, _QWORD *a2, _QWORD *a3, unint64_t a4)
{
  char *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  if (a4)
  {
    v6 = result;
    result = std::vector<std::shared_ptr<mlcore::Predicate>>::__vallocate[abi:ne180100](result, a4);
    v7 = (_QWORD *)*((_QWORD *)v6 + 1);
    while (a2 != a3)
    {
      *v7 = *a2;
      v8 = a2[1];
      v7[1] = v8;
      if (v8)
      {
        v9 = (unint64_t *)(v8 + 8);
        do
          v10 = __ldxr(v9);
        while (__stxr(v10 + 1, v9));
      }
      a2 += 2;
      v7 += 2;
    }
    *((_QWORD *)v6 + 1) = v7;
  }
  return result;
}

void sub_20A78AFC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t mediaplatform::SQLSelectCoreStatement::SQLSelectCoreStatement(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;

  *(_QWORD *)a1 = &off_24C331378;
  v4 = *a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(*a2 + 8);
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__init_with_size[abi:ne180100]<std::shared_ptr<mediaplatform::SQLExpression const>*,std::shared_ptr<mediaplatform::SQLExpression const>*>((char *)(a1 + 16), *(_QWORD **)(v4 + 16), *(_QWORD **)(v4 + 24), (uint64_t)(*(_QWORD *)(v4 + 24) - *(_QWORD *)(v4 + 16)) >> 4);
  v5 = (_QWORD *)*a2;
  v6 = *(_QWORD *)(*a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(*a2 + 40);
  *(_QWORD *)(a1 + 48) = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
    v5 = (_QWORD *)*a2;
  }
  v9 = v5[8];
  *(_QWORD *)(a1 + 56) = v5[7];
  *(_QWORD *)(a1 + 64) = v9;
  if (v9)
  {
    v10 = (unint64_t *)(v9 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
    v5 = (_QWORD *)*a2;
  }
  v13 = v5[9];
  v12 = v5[10];
  *(_QWORD *)(a1 + 72) = v13;
  *(_QWORD *)(a1 + 80) = v12;
  if (v12)
  {
    v14 = (unint64_t *)(v12 + 8);
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  return a1;
}

uint64_t mediaplatform::SQLSelectCoreStatement::isDistinct(mediaplatform::SQLSelectCoreStatement *this)
{
  return *((unsigned __int8 *)this + 8);
}

uint64_t mediaplatform::SQLSelectCoreStatement::setIsDistinct(uint64_t this, char a2)
{
  *(_BYTE *)(this + 8) = a2;
  return this;
}

uint64_t mediaplatform::SQLSelectCoreStatement::resultColumns(mediaplatform::SQLSelectCoreStatement *this)
{
  return (uint64_t)this + 16;
}

uint64_t **mediaplatform::SQLSelectCoreStatement::setResultColumns(uint64_t a1, uint64_t **a2)
{
  uint64_t **result;

  result = (uint64_t **)(a1 + 16);
  if (result != a2)
    return (uint64_t **)std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__assign_with_size[abi:ne180100]<std::shared_ptr<mediaplatform::SQLExpression const>*,std::shared_ptr<mediaplatform::SQLExpression const>*>(result, *a2, a2[1], ((char *)a2[1] - (char *)*a2) >> 4);
  return result;
}

uint64_t std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__assign_with_size[abi:ne180100]<std::shared_ptr<mediaplatform::SQLExpression const>*,std::shared_ptr<mediaplatform::SQLExpression const>*>(_QWORD *a1, uint64_t *a2, uint64_t *a3, unint64_t a4)
{
  uint64_t *v6;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t result;
  uint64_t *v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v6 = a2;
  v8 = a1[2];
  v9 = (_QWORD *)*a1;
  if (a4 > (v8 - *a1) >> 4)
  {
    if (v9)
    {
      v10 = a1[1];
      v11 = v9;
      if ((_QWORD *)v10 != v9)
      {
        do
          v10 = std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100](v10 - 16);
        while ((_QWORD *)v10 != v9);
        v11 = (_QWORD *)*a1;
      }
      a1[1] = v9;
      operator delete(v11);
      v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (a4 >> 60)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v12 = v8 >> 3;
    if (v8 >> 3 <= a4)
      v12 = a4;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0)
      v13 = 0xFFFFFFFFFFFFFFFLL;
    else
      v13 = v12;
    result = (uint64_t)std::vector<std::shared_ptr<mlcore::Predicate>>::__vallocate[abi:ne180100](a1, v13);
    v15 = (uint64_t *)a1[1];
    while (v6 != a3)
    {
      v16 = v6[1];
      *v15 = *v6;
      v15[1] = v16;
      if (v16)
      {
        v17 = (unint64_t *)(v16 + 8);
        do
          v18 = __ldxr(v17);
        while (__stxr(v18 + 1, v17));
      }
      v6 += 2;
      v15 += 2;
    }
LABEL_29:
    a1[1] = v15;
    return result;
  }
  result = a1[1];
  v19 = (result - (uint64_t)v9) >> 4;
  if (v19 < a4)
  {
    v20 = &a2[2 * v19];
    if ((_QWORD *)result != v9)
    {
      do
      {
        v21 = *v6;
        v22 = v6[1];
        v6 += 2;
        result = (uint64_t)std::shared_ptr<mlcore::Predicate>::operator=[abi:ne180100](v9, v21, v22);
        v9 += 2;
      }
      while (v6 != v20);
      v9 = (_QWORD *)a1[1];
    }
    v15 = v9;
    if (v20 != a3)
    {
      v15 = v9;
      do
      {
        v23 = v20[1];
        *v15 = *v20;
        v15[1] = v23;
        if (v23)
        {
          v24 = (unint64_t *)(v23 + 8);
          do
            v25 = __ldxr(v24);
          while (__stxr(v25 + 1, v24));
        }
        v20 += 2;
        v15 += 2;
      }
      while (v20 != a3);
    }
    goto LABEL_29;
  }
  if (a2 != a3)
  {
    do
    {
      v26 = *v6;
      v27 = v6[1];
      v6 += 2;
      std::shared_ptr<mlcore::Predicate>::operator=[abi:ne180100](v9, v26, v27);
      v9 += 2;
    }
    while (v6 != a3);
    result = a1[1];
  }
  while ((_QWORD *)result != v9)
    result = std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100](result - 16);
  a1[1] = v9;
  return result;
}

uint64_t mediaplatform::SQLSelectCoreStatement::fromStatement@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(this + 48);
  *a2 = *(_QWORD *)(this + 40);
  a2[1] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return this;
}

_QWORD *mediaplatform::SQLSelectCoreStatement::setFromStatement(uint64_t a1, uint64_t *a2)
{
  return std::shared_ptr<mlcore::Predicate>::operator=[abi:ne180100]((_QWORD *)(a1 + 40), *a2, a2[1]);
}

uint64_t mediaplatform::SQLSelectCoreStatement::whereExpression@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(this + 64);
  *a2 = *(_QWORD *)(this + 56);
  a2[1] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return this;
}

_QWORD *mediaplatform::SQLSelectCoreStatement::setWhereExpression(uint64_t a1, uint64_t *a2)
{
  return std::shared_ptr<mlcore::Predicate>::operator=[abi:ne180100]((_QWORD *)(a1 + 56), *a2, a2[1]);
}

uint64_t mediaplatform::SQLSelectCoreStatement::groupingExpression@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(this + 80);
  *a2 = *(_QWORD *)(this + 72);
  a2[1] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return this;
}

_QWORD *mediaplatform::SQLSelectCoreStatement::setGroupingExpression(uint64_t a1, uint64_t *a2)
{
  return std::shared_ptr<mlcore::Predicate>::operator=[abi:ne180100]((_QWORD *)(a1 + 72), *a2, a2[1]);
}

mediaplatform::SQLSelectStatement *mediaplatform::SQLSelectStatement::SQLSelectStatement(mediaplatform::SQLSelectStatement *this)
{
  char *v2;

  *(_QWORD *)this = &off_24C331050;
  v2 = (char *)operator new(0x70uLL);
  *((_QWORD *)v2 + 1) = 0;
  *((_QWORD *)v2 + 2) = 0;
  *(_QWORD *)v2 = &off_24C33C088;
  v2[32] = 0;
  *(_OWORD *)(v2 + 40) = 0u;
  *(_OWORD *)(v2 + 56) = 0u;
  *(_OWORD *)(v2 + 72) = 0u;
  *(_OWORD *)(v2 + 88) = 0u;
  *((_QWORD *)v2 + 13) = 0;
  *((_QWORD *)this + 2) = v2;
  *((_QWORD *)v2 + 3) = &off_24C331378;
  *((_QWORD *)this + 1) = v2 + 24;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *((_QWORD *)this + 9) = 0;
  return this;
}

{
  char *v2;

  *(_QWORD *)this = &off_24C331050;
  v2 = (char *)operator new(0x70uLL);
  *((_QWORD *)v2 + 1) = 0;
  *((_QWORD *)v2 + 2) = 0;
  *(_QWORD *)v2 = &off_24C33C088;
  v2[32] = 0;
  *(_OWORD *)(v2 + 40) = 0u;
  *(_OWORD *)(v2 + 56) = 0u;
  *(_OWORD *)(v2 + 72) = 0u;
  *(_OWORD *)(v2 + 88) = 0u;
  *((_QWORD *)v2 + 13) = 0;
  *((_QWORD *)this + 2) = v2;
  *((_QWORD *)v2 + 3) = &off_24C331378;
  *((_QWORD *)this + 1) = v2 + 24;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *((_QWORD *)this + 9) = 0;
  return this;
}

void std::__shared_ptr_emplace<mediaplatform::SQLSelectCoreStatement>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C33C088;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<mediaplatform::SQLSelectCoreStatement>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C33C088;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x20BD27AFCLL);
}

uint64_t std::__shared_ptr_emplace<mediaplatform::SQLSelectCoreStatement>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t mediaplatform::SQLSelectStatement::SQLSelectStatement(uint64_t a1, _QWORD **a2, uint64_t a3)
{
  *(_QWORD *)a1 = &off_24C331050;
  std::allocate_shared[abi:ne180100]<mediaplatform::SQLSelectCoreStatement,std::allocator<mediaplatform::SQLSelectCoreStatement>,std::vector<std::shared_ptr<mediaplatform::SQLExpression const>> const&,std::shared_ptr<mediaplatform::SQLFromStatement const> &,void>((_QWORD *)(a1 + 8), a2, *(_QWORD *)a3, *(std::__shared_weak_count **)(a3 + 8));
  *(_QWORD *)(a1 + 72) = 0;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  return a1;
}

{
  *(_QWORD *)a1 = &off_24C331050;
  std::allocate_shared[abi:ne180100]<mediaplatform::SQLSelectCoreStatement,std::allocator<mediaplatform::SQLSelectCoreStatement>,std::vector<std::shared_ptr<mediaplatform::SQLExpression const>> const&,std::shared_ptr<mediaplatform::SQLFromStatement const> &,void>((_QWORD *)(a1 + 8), a2, *(_QWORD *)a3, *(std::__shared_weak_count **)(a3 + 8));
  *(_QWORD *)(a1 + 72) = 0;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  return a1;
}

void std::allocate_shared[abi:ne180100]<mediaplatform::SQLSelectCoreStatement,std::allocator<mediaplatform::SQLSelectCoreStatement>,std::vector<std::shared_ptr<mediaplatform::SQLExpression const>> const&,std::shared_ptr<mediaplatform::SQLFromStatement const> &,void>(_QWORD *a1, _QWORD **a2, uint64_t a3, std::__shared_weak_count *a4)
{
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  _QWORD v15[2];

  v8 = operator new(0x70uLL);
  v9 = v8;
  v8[1] = 0;
  v8[2] = 0;
  *v8 = &off_24C33C088;
  v10 = v8 + 3;
  v15[0] = a3;
  v15[1] = a4;
  if (a4)
  {
    p_shared_owners = (unint64_t *)&a4->__shared_owners_;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
  }
  mediaplatform::SQLSelectCoreStatement::SQLSelectCoreStatement((uint64_t)(v8 + 3), a2, v15);
  if (a4)
  {
    v13 = (unint64_t *)&a4->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))a4->__on_zero_shared)(a4);
      std::__shared_weak_count::__release_weak(a4);
    }
  }
  *a1 = v10;
  a1[1] = v9;
}

void sub_20A78B598(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__shared_weak_count *v9;
  void *v11;

  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::__shared_weak_count::~__shared_weak_count(v9);
  operator delete(v11);
  _Unwind_Resume(a1);
}

uint64_t mediaplatform::SQLSelectStatement::isDistinct(mediaplatform::SQLSelectStatement *this)
{
  return *(unsigned __int8 *)(*((_QWORD *)this + 1) + 8);
}

uint64_t mediaplatform::SQLSelectStatement::setIsDistinct(uint64_t this, char a2)
{
  *(_BYTE *)(*(_QWORD *)(this + 8) + 8) = a2;
  return this;
}

uint64_t mediaplatform::SQLSelectStatement::resultColumns(mediaplatform::SQLSelectStatement *this)
{
  return *((_QWORD *)this + 1) + 16;
}

uint64_t **mediaplatform::SQLSelectStatement::setResultColumns(uint64_t a1, uint64_t **a2)
{
  uint64_t **result;

  result = (uint64_t **)(*(_QWORD *)(a1 + 8) + 16);
  if (result != a2)
    return (uint64_t **)std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__assign_with_size[abi:ne180100]<std::shared_ptr<mediaplatform::SQLExpression const>*,std::shared_ptr<mediaplatform::SQLExpression const>*>(result, *a2, a2[1], ((char *)a2[1] - (char *)*a2) >> 4);
  return result;
}

uint64_t mediaplatform::SQLSelectStatement::fromStatement@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  v2 = *(_QWORD *)(this + 8);
  v4 = *(_QWORD *)(v2 + 40);
  v3 = *(_QWORD *)(v2 + 48);
  *a2 = v4;
  a2[1] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return this;
}

void mediaplatform::SQLSelectStatement::setFromStatement(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t *v8;
  unint64_t v9;

  v3 = *(_QWORD *)(a1 + 8);
  v4 = *a2;
  v5 = (std::__shared_weak_count *)a2[1];
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    std::shared_ptr<mlcore::Predicate>::operator=[abi:ne180100]((_QWORD *)(v3 + 40), v4, (uint64_t)v5);
    v8 = (unint64_t *)&v5->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  else
  {
    std::shared_ptr<mlcore::Predicate>::operator=[abi:ne180100]((_QWORD *)(v3 + 40), v4, 0);
  }
}

uint64_t mediaplatform::SQLSelectStatement::whereExpression@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  v2 = *(_QWORD *)(this + 8);
  v4 = *(_QWORD *)(v2 + 56);
  v3 = *(_QWORD *)(v2 + 64);
  *a2 = v4;
  a2[1] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return this;
}

void mediaplatform::SQLSelectStatement::setWhereExpression(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t *v8;
  unint64_t v9;

  v3 = *(_QWORD *)(a1 + 8);
  v4 = *a2;
  v5 = (std::__shared_weak_count *)a2[1];
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    std::shared_ptr<mlcore::Predicate>::operator=[abi:ne180100]((_QWORD *)(v3 + 56), v4, (uint64_t)v5);
    v8 = (unint64_t *)&v5->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  else
  {
    std::shared_ptr<mlcore::Predicate>::operator=[abi:ne180100]((_QWORD *)(v3 + 56), v4, 0);
  }
}

uint64_t mediaplatform::SQLSelectStatement::groupingExpression@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  v2 = *(_QWORD *)(this + 8);
  v4 = *(_QWORD *)(v2 + 72);
  v3 = *(_QWORD *)(v2 + 80);
  *a2 = v4;
  a2[1] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return this;
}

void mediaplatform::SQLSelectStatement::setGroupingExpression(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t *v8;
  unint64_t v9;

  v3 = *(_QWORD *)(a1 + 8);
  v4 = *a2;
  v5 = (std::__shared_weak_count *)a2[1];
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    std::shared_ptr<mlcore::Predicate>::operator=[abi:ne180100]((_QWORD *)(v3 + 72), v4, (uint64_t)v5);
    v8 = (unint64_t *)&v5->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  else
  {
    std::shared_ptr<mlcore::Predicate>::operator=[abi:ne180100]((_QWORD *)(v3 + 72), v4, 0);
  }
}

uint64_t mediaplatform::SQLSelectStatement::limitExpression@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(this + 32);
  *a2 = *(_QWORD *)(this + 24);
  a2[1] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return this;
}

_QWORD *mediaplatform::SQLSelectStatement::setLimitExpression(uint64_t a1, uint64_t *a2)
{
  return std::shared_ptr<mlcore::Predicate>::operator=[abi:ne180100]((_QWORD *)(a1 + 24), *a2, a2[1]);
}

uint64_t mediaplatform::SQLSelectStatement::offsetExpression@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(this + 48);
  *a2 = *(_QWORD *)(this + 40);
  a2[1] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return this;
}

_QWORD *mediaplatform::SQLSelectStatement::setOffsetExpression(uint64_t a1, uint64_t *a2)
{
  return std::shared_ptr<mlcore::Predicate>::operator=[abi:ne180100]((_QWORD *)(a1 + 40), *a2, a2[1]);
}

uint64_t mediaplatform::SQLSelectStatement::orderingTerms(mediaplatform::SQLSelectStatement *this)
{
  return (uint64_t)this + 56;
}

char *mediaplatform::SQLSelectStatement::setOrderingTerms(uint64_t a1, uint64_t **a2)
{
  char *result;

  result = (char *)(a1 + 56);
  if (result != (char *)a2)
    return std::vector<std::shared_ptr<mediaplatform::SQLOrderingTerm const>>::__assign_with_size[abi:ne180100]<std::shared_ptr<mediaplatform::SQLOrderingTerm const>*,std::shared_ptr<mediaplatform::SQLOrderingTerm const>*>((uint64_t)result, *a2, a2[1], ((char *)a2[1] - (char *)*a2) >> 4);
  return result;
}

char *std::vector<std::shared_ptr<mediaplatform::SQLOrderingTerm const>>::__assign_with_size[abi:ne180100]<std::shared_ptr<mediaplatform::SQLOrderingTerm const>*,std::shared_ptr<mediaplatform::SQLOrderingTerm const>*>(uint64_t a1, uint64_t *a2, uint64_t *a3, unint64_t a4)
{
  uint64_t *v6;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  char *result;
  uint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v6 = a2;
  v8 = *(_QWORD *)(a1 + 16);
  v9 = *(char **)a1;
  if (a4 <= (v8 - *(_QWORD *)a1) >> 4)
  {
    result = *(char **)(a1 + 8);
    v19 = (result - v9) >> 4;
    if (v19 >= a4)
    {
      if (a2 != a3)
      {
        do
        {
          v27 = *v6;
          v28 = v6[1];
          v6 += 2;
          std::shared_ptr<mlcore::Predicate>::operator=[abi:ne180100](v9, v27, v28);
          v9 += 16;
        }
        while (v6 != a3);
        result = *(char **)(a1 + 8);
      }
      while (result != v9)
        result = (char *)std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)(result - 16));
      *(_QWORD *)(a1 + 8) = v9;
    }
    else
    {
      v20 = &a2[2 * v19];
      if (result != v9)
      {
        do
        {
          v21 = *v6;
          v22 = v6[1];
          v6 += 2;
          result = (char *)std::shared_ptr<mlcore::Predicate>::operator=[abi:ne180100](v9, v21, v22);
          v9 += 16;
        }
        while (v6 != v20);
        v9 = *(char **)(a1 + 8);
      }
      v23 = v9;
      if (v20 != a3)
      {
        v23 = v9;
        do
        {
          v24 = v20[1];
          *v23 = *v20;
          v23[1] = v24;
          if (v24)
          {
            v25 = (unint64_t *)(v24 + 8);
            do
              v26 = __ldxr(v25);
            while (__stxr(v26 + 1, v25));
          }
          v20 += 2;
          v23 += 2;
        }
        while (v20 != a3);
      }
      *(_QWORD *)(a1 + 8) = v23;
    }
  }
  else
  {
    if (v9)
    {
      v10 = *(_QWORD *)(a1 + 8);
      v11 = v9;
      if ((char *)v10 != v9)
      {
        do
          v10 = std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100](v10 - 16);
        while ((char *)v10 != v9);
        v11 = *(char **)a1;
      }
      *(_QWORD *)(a1 + 8) = v9;
      operator delete(v11);
      v8 = 0;
      *(_QWORD *)a1 = 0;
      *(_QWORD *)(a1 + 8) = 0;
      *(_QWORD *)(a1 + 16) = 0;
    }
    if (a4 >> 60)
      goto LABEL_38;
    v12 = v8 >> 3;
    if (v8 >> 3 <= a4)
      v12 = a4;
    v13 = (unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0 ? 0xFFFFFFFFFFFFFFFLL : v12;
    if (v13 >> 60)
LABEL_38:
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<mediaplatform::DatabaseParameterBase>>>(v13);
    *(_QWORD *)a1 = result;
    *(_QWORD *)(a1 + 8) = result;
    *(_QWORD *)(a1 + 16) = &result[16 * v15];
    while (v6 != a3)
    {
      v16 = v6[1];
      *(_QWORD *)result = *v6;
      *((_QWORD *)result + 1) = v16;
      if (v16)
      {
        v17 = (unint64_t *)(v16 + 8);
        do
          v18 = __ldxr(v17);
        while (__stxr(v18 + 1, v17));
      }
      v6 += 2;
      result += 16;
    }
    *(_QWORD *)(a1 + 8) = result;
  }
  return result;
}

uint64_t mediaplatform::SQLSelectStatement::coreStatement@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(this + 16);
  *a2 = *(_QWORD *)(this + 8);
  a2[1] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return this;
}

uint64_t mediaplatform::SQLCompoundSelectStatement::SQLCompoundSelectStatement(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;

  *(_QWORD *)a1 = &off_24C331470;
  *(_QWORD *)(a1 + 8) = *a2;
  v4 = a2[1];
  *(_QWORD *)(a1 + 16) = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  v7 = *a3;
  v8 = a3[1];
  if (v8 != *a3)
  {
    v9 = 0xAAAAAAAAAAAAAAABLL * ((v8 - v7) >> 3);
    if (v9 >= 0xAAAAAAAAAAAAAABLL)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v10 = std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v9);
    *(_QWORD *)(a1 + 24) = v10;
    *(_QWORD *)(a1 + 32) = v10;
    *(_QWORD *)(a1 + 40) = &v10[3 * v11];
    do
    {
      *(_DWORD *)v10 = *(_DWORD *)v7;
      v10[1] = *(_QWORD *)(v7 + 8);
      v12 = *(_QWORD *)(v7 + 16);
      v10[2] = v12;
      if (v12)
      {
        v13 = (unint64_t *)(v12 + 8);
        do
          v14 = __ldxr(v13);
        while (__stxr(v14 + 1, v13));
      }
      v7 += 24;
      v10 += 3;
    }
    while (v7 != v8);
    *(_QWORD *)(a1 + 32) = v10;
  }
  *(_QWORD *)(a1 + 96) = 0;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  return a1;
}

void sub_20A78BC34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;

  std::vector<mediaplatform::SQLCompoundSelectStatement::CompoundFragment>::__destroy_vector::operator()[abi:ne180100](&a9);
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100](v9);
  _Unwind_Resume(a1);
}

uint64_t mediaplatform::SQLCompoundSelectStatement::limitExpression@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(this + 56);
  *a2 = *(_QWORD *)(this + 48);
  a2[1] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return this;
}

_QWORD *mediaplatform::SQLCompoundSelectStatement::setLimitExpression(uint64_t a1, uint64_t *a2)
{
  return std::shared_ptr<mlcore::Predicate>::operator=[abi:ne180100]((_QWORD *)(a1 + 48), *a2, a2[1]);
}

uint64_t mediaplatform::SQLCompoundSelectStatement::offsetExpression@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(this + 72);
  *a2 = *(_QWORD *)(this + 64);
  a2[1] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return this;
}

_QWORD *mediaplatform::SQLCompoundSelectStatement::setOffsetExpression(uint64_t a1, uint64_t *a2)
{
  return std::shared_ptr<mlcore::Predicate>::operator=[abi:ne180100]((_QWORD *)(a1 + 64), *a2, a2[1]);
}

uint64_t mediaplatform::SQLCompoundSelectStatement::orderingTerms(mediaplatform::SQLCompoundSelectStatement *this)
{
  return (uint64_t)this + 80;
}

char *mediaplatform::SQLCompoundSelectStatement::setOrderingTerms(uint64_t a1, uint64_t **a2)
{
  char *result;

  result = (char *)(a1 + 80);
  if (result != (char *)a2)
    return std::vector<std::shared_ptr<mediaplatform::SQLOrderingTerm const>>::__assign_with_size[abi:ne180100]<std::shared_ptr<mediaplatform::SQLOrderingTerm const>*,std::shared_ptr<mediaplatform::SQLOrderingTerm const>*>((uint64_t)result, *a2, a2[1], ((char *)a2[1] - (char *)*a2) >> 4);
  return result;
}

void mediaplatform::WorkQueue_Dispatch::~WorkQueue_Dispatch(mediaplatform::WorkQueue_Dispatch *this)
{
  *(_QWORD *)this = &off_24C3310C0;
  dispatch_release(*((dispatch_object_t *)this + 10));
  *((_QWORD *)this + 10) = 0;
  std::mutex::~mutex((std::mutex *)((char *)this + 8));
}

{
  *(_QWORD *)this = &off_24C3310C0;
  dispatch_release(*((dispatch_object_t *)this + 10));
  *((_QWORD *)this + 10) = 0;
  std::mutex::~mutex((std::mutex *)((char *)this + 8));
  JUMPOUT(0x20BD27AFCLL);
}

_QWORD *mediaplatform::WorkQueue_Dispatch::label@<X0>(dispatch_queue_t *this@<X0>, _QWORD *a2@<X8>)
{
  char *label;

  label = (char *)dispatch_queue_get_label(this[10]);
  return std::string::basic_string[abi:ne180100]<0>(a2, label);
}

void mediaplatform::WorkQueue_Dispatch::pause(mediaplatform::WorkQueue_Dispatch *this)
{
  std::mutex *v2;
  int v3;

  v2 = (std::mutex *)((char *)this + 8);
  std::mutex::lock((std::mutex *)((char *)this + 8));
  v3 = *((_DWORD *)this + 18);
  if (!v3)
  {
    dispatch_suspend(*((dispatch_object_t *)this + 10));
    v3 = *((_DWORD *)this + 18);
  }
  *((_DWORD *)this + 18) = v3 + 1;
  std::mutex::unlock(v2);
}

void mediaplatform::WorkQueue_Dispatch::resume(mediaplatform::WorkQueue_Dispatch *this)
{
  std::mutex *v2;
  int v3;

  v2 = (std::mutex *)((char *)this + 8);
  std::mutex::lock((std::mutex *)((char *)this + 8));
  v3 = *((_DWORD *)this + 18) - 1;
  *((_DWORD *)this + 18) = v3;
  if (!v3)
    dispatch_resume(*((dispatch_object_t *)this + 10));
  std::mutex::unlock(v2);
}

void mediaplatform::WorkQueue_Dispatch::invokeAsync(uint64_t a1, uint64_t a2)
{
  void *v4;

  v4 = (void *)operator new();
  std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100]((uint64_t)v4, a2);
  dispatch_async_f(*(dispatch_queue_t *)(a1 + 80), v4, (dispatch_function_t)mediaplatform::_AsyncDispatcher);
}

void sub_20A78BE8C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x20BD27AFC](v1, 0x1020C40A5B76CDFLL);
  _Unwind_Resume(a1);
}

void mediaplatform::WorkQueue_Dispatch::invokeSync(dispatch_queue_t *a1, void *a2)
{
  ((void (*)(dispatch_queue_t *))(*a1)[9].isa)(a1);
  dispatch_sync_f(a1[10], a2, (dispatch_function_t)mediaplatform::_SyncDispatcher);
}

void mediaplatform::WorkQueue_Dispatch::invokeAfter(uint64_t a1, uint64_t a2, double a3)
{
  void *v6;
  dispatch_time_t v7;

  v6 = (void *)operator new();
  std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100]((uint64_t)v6, a2);
  v7 = dispatch_time(0, (uint64_t)(a3 * 1000000000.0));
  dispatch_after_f(v7, *(dispatch_queue_t *)(a1 + 80), v6, (dispatch_function_t)mediaplatform::_AsyncDispatcher);
}

void sub_20A78BF6C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x20BD27AFC](v1, 0x1020C40A5B76CDFLL);
  _Unwind_Resume(a1);
}

void mediaplatform::WorkQueue_Dispatch::assertIsActiveQueue(dispatch_queue_t *this)
{
  dispatch_assert_queue_V2(this[10]);
}

void mediaplatform::WorkQueue_Dispatch::assertIsNotActiveQueue(dispatch_queue_t *this)
{
  dispatch_assert_queue_not_V2(this[10]);
}

uint64_t mediaplatform::WorkQueue_Dispatch::type(mediaplatform::WorkQueue_Dispatch *this)
{
  return *((unsigned int *)this + 22);
}

uint64_t mediaplatform::WorkQueue_Dispatch::maximumConcurrency(mediaplatform::WorkQueue_Dispatch *this)
{
  return 1;
}

uint64_t std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(_QWORD *)(a1 + 24) = a1;
      (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a2 + 24) + 24))(*(_QWORD *)(a2 + 24), a1);
    }
    else
    {
      *(_QWORD *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 16))(v3);
    }
  }
  else
  {
    *(_QWORD *)(a1 + 24) = 0;
  }
  return a1;
}

void mediaplatform::_AsyncDispatcher(mediaplatform *this, void *a2)
{
  uint64_t v3;
  mediaplatform *v4;
  uint64_t v5;

  v3 = *((_QWORD *)this + 3);
  if (!v3)
    std::__throw_bad_function_call[abi:ne180100]();
  (*(void (**)(uint64_t, void *))(*(_QWORD *)v3 + 48))(v3, a2);
  v4 = (mediaplatform *)*((_QWORD *)this + 3);
  if (v4 == this)
  {
    v5 = 4;
    v4 = this;
  }
  else
  {
    if (!v4)
      goto LABEL_9;
    v5 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v4 + 8 * v5))();
LABEL_9:
  JUMPOUT(0x20BD27AFCLL);
}

uint64_t mediaplatform::_SyncDispatcher(mediaplatform *this, void *a2)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 3);
  if (!v2)
    std::__throw_bad_function_call[abi:ne180100]();
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 48))(v2);
}

void mediaplatform::WorkQueue::sharedWorkQueue(char *a1@<X0>, int a2@<W1>, uint64_t *a3@<X8>)
{
  uint64_t v5;
  uint64_t **v6;
  uint64_t *v7;
  uint64_t *v8;
  unint64_t *v9;
  unint64_t v10;
  char *v11;
  const char *v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t **v16;
  uint64_t **v17;
  uint64_t *v18;
  uint64_t *v19;
  unint64_t *v20;
  unint64_t v21;
  char *v22;
  const char *v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  __int128 v27;

  if (!a2)
  {
    v5 = mediaplatform::WorkQueueManager::sharedInstance((mediaplatform::WorkQueueManager *)a1);
    std::mutex::lock((std::mutex *)v5);
    v17 = std::__tree<std::__value_type<std::string,std::shared_ptr<mediaplatform::WorkQueue>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<mediaplatform::WorkQueue>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<mediaplatform::WorkQueue>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(v5 + 64), a1, (uint64_t)a1);
    v18 = v17[7];
    *a3 = (uint64_t)v18;
    v19 = v17[8];
    a3[1] = (uint64_t)v19;
    if (v19)
    {
      v20 = (unint64_t *)(v19 + 1);
      do
        v21 = __ldxr(v20);
      while (__stxr(v21 + 1, v20));
    }
    if (v18)
      goto LABEL_30;
    v22 = (char *)operator new(0x78uLL);
    *((_QWORD *)v22 + 1) = 0;
    *((_QWORD *)v22 + 2) = 0;
    *(_QWORD *)v22 = &off_24C331950;
    *((_QWORD *)v22 + 3) = &off_24C3310C0;
    *((_QWORD *)v22 + 4) = 850045863;
    *(_OWORD *)(v22 + 40) = 0u;
    *(_OWORD *)(v22 + 56) = 0u;
    *(_OWORD *)(v22 + 72) = 0u;
    *(_OWORD *)(v22 + 84) = 0u;
    *((_DWORD *)v22 + 28) = 0;
    if (a1[23] >= 0)
      v23 = a1;
    else
      v23 = *(const char **)a1;
    *((_QWORD *)v22 + 13) = dispatch_queue_create(v23, 0);
    *(_QWORD *)&v27 = v22 + 24;
    *((_QWORD *)&v27 + 1) = v22;
    std::shared_ptr<mlcore::Predicate>::operator=[abi:ne180100]((uint64_t)a3, &v27);
    v24 = (std::__shared_weak_count *)*((_QWORD *)&v27 + 1);
    if (*((_QWORD *)&v27 + 1))
    {
      v25 = (unint64_t *)(*((_QWORD *)&v27 + 1) + 8);
      do
        v26 = __ldaxr(v25);
      while (__stlxr(v26 - 1, v25));
      if (!v26)
      {
        ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
        std::__shared_weak_count::__release_weak(v24);
      }
    }
    v16 = std::__tree<std::__value_type<std::string,std::shared_ptr<mediaplatform::WorkQueue>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<mediaplatform::WorkQueue>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<mediaplatform::WorkQueue>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(v5 + 64), a1, (uint64_t)a1);
    goto LABEL_29;
  }
  if (a2 == 1)
  {
    v5 = mediaplatform::WorkQueueManager::sharedInstance((mediaplatform::WorkQueueManager *)a1);
    std::mutex::lock((std::mutex *)v5);
    v6 = std::__tree<std::__value_type<std::string,std::shared_ptr<mediaplatform::WorkQueue>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<mediaplatform::WorkQueue>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<mediaplatform::WorkQueue>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(v5 + 88), a1, (uint64_t)a1);
    v7 = v6[7];
    *a3 = (uint64_t)v7;
    v8 = v6[8];
    a3[1] = (uint64_t)v8;
    if (v8)
    {
      v9 = (unint64_t *)(v8 + 1);
      do
        v10 = __ldxr(v9);
      while (__stxr(v10 + 1, v9));
    }
    if (v7)
      goto LABEL_30;
    v11 = (char *)operator new(0x78uLL);
    *((_QWORD *)v11 + 1) = 0;
    *((_QWORD *)v11 + 2) = 0;
    *(_QWORD *)v11 = &off_24C331950;
    *((_QWORD *)v11 + 3) = &off_24C3310C0;
    *((_QWORD *)v11 + 4) = 850045863;
    *(_OWORD *)(v11 + 40) = 0u;
    *(_OWORD *)(v11 + 56) = 0u;
    *(_OWORD *)(v11 + 72) = 0u;
    *(_OWORD *)(v11 + 84) = 0u;
    *((_DWORD *)v11 + 28) = 1;
    if (a1[23] >= 0)
      v12 = a1;
    else
      v12 = *(const char **)a1;
    *((_QWORD *)v11 + 13) = dispatch_queue_create(v12, MEMORY[0x24BDAC9C0]);
    *(_QWORD *)&v27 = v11 + 24;
    *((_QWORD *)&v27 + 1) = v11;
    std::shared_ptr<mlcore::Predicate>::operator=[abi:ne180100]((uint64_t)a3, &v27);
    v13 = (std::__shared_weak_count *)*((_QWORD *)&v27 + 1);
    if (*((_QWORD *)&v27 + 1))
    {
      v14 = (unint64_t *)(*((_QWORD *)&v27 + 1) + 8);
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 - 1, v14));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
    v16 = std::__tree<std::__value_type<std::string,std::shared_ptr<mediaplatform::WorkQueue>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<mediaplatform::WorkQueue>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<mediaplatform::WorkQueue>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(v5 + 88), a1, (uint64_t)a1);
LABEL_29:
    std::shared_ptr<mlcore::Predicate>::operator=[abi:ne180100](v16 + 7, *a3, a3[1]);
LABEL_30:
    std::mutex::unlock((std::mutex *)v5);
    return;
  }
  *a3 = 0;
  a3[1] = 0;
}

void sub_20A78C34C(_Unwind_Exception *a1)
{
  std::mutex *v1;
  uint64_t v2;

  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100](v2);
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t mediaplatform::WorkQueueManager::sharedInstance(mediaplatform::WorkQueueManager *this)
{
  unsigned __int8 v1;
  uint64_t v3;

  if ((v1 & 1) == 0
  {
    v3 = operator new();
    *(_QWORD *)v3 = 850045863;
    *(_OWORD *)(v3 + 8) = 0u;
    *(_OWORD *)(v3 + 24) = 0u;
    *(_OWORD *)(v3 + 40) = 0u;
    *(_QWORD *)(v3 + 72) = 0;
    *(_QWORD *)(v3 + 56) = 0;
    *(_QWORD *)(v3 + 64) = v3 + 72;
    *(_QWORD *)(v3 + 104) = 0;
    *(_QWORD *)(v3 + 96) = 0;
    *(_QWORD *)(v3 + 80) = 0;
    *(_QWORD *)(v3 + 88) = v3 + 96;
    mediaplatform::WorkQueueManager::sharedInstance(void)::__sharedInstance = v3;
  }
  return mediaplatform::WorkQueueManager::sharedInstance(void)::__sharedInstance;
}

void sub_20A78C424(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t **std::__tree<std::__value_type<std::string,std::shared_ptr<mediaplatform::WorkQueue>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<mediaplatform::WorkQueue>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<mediaplatform::WorkQueue>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, _QWORD *a2, uint64_t a3)
{
  uint64_t *v5;
  uint64_t v6;
  uint64_t **v7;
  uint64_t **v8;
  _QWORD *v10;
  _QWORD *v11;
  std::string *v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v16[2];
  char v17;

  v6 = (uint64_t)(a1 + 1);
  v5 = a1[1];
  v7 = a1 + 1;
  v8 = a1 + 1;
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        v7 = (uint64_t **)v5;
        v10 = v5 + 4;
        if (!std::less<std::string>::operator()[abi:ne180100](a2, v5 + 4))
          break;
        v5 = *v7;
        v8 = v7;
        if (!*v7)
          goto LABEL_7;
      }
      if (!std::less<std::string>::operator()[abi:ne180100](v10, a2))
        return v7;
      v8 = v7 + 1;
      v5 = v7[1];
      if (!v5)
        goto LABEL_7;
    }
  }
  else
  {
LABEL_7:
    v11 = operator new(0x48uLL);
    v16[0] = (uint64_t)v11;
    v16[1] = v6;
    v17 = 0;
    v12 = (std::string *)(v11 + 4);
    if (*(char *)(a3 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v12, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
    }
    else
    {
      *(_OWORD *)&v12->__r_.__value_.__l.__data_ = *(_OWORD *)a3;
      v11[6] = *(_QWORD *)(a3 + 16);
    }
    v11[7] = 0;
    v11[8] = 0;
    v17 = 1;
    *v11 = 0;
    v11[1] = 0;
    v11[2] = v7;
    *v8 = v11;
    v13 = (uint64_t *)**a1;
    v14 = v11;
    if (v13)
    {
      *a1 = v13;
      v14 = *v8;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v14);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
    v16[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::shared_ptr<mediaplatform::WorkQueue>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::shared_ptr<mediaplatform::WorkQueue>>,void *>>>>::reset[abi:ne180100](v16);
  }
  return (uint64_t **)v11;
}

void sub_20A78C568(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::shared_ptr<mediaplatform::WorkQueue>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::shared_ptr<mediaplatform::WorkQueue>>,void *>>>>::reset[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<mediaplatform::WorkQueue_Dispatch>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C331950;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<mediaplatform::WorkQueue_Dispatch>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C331950;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x20BD27AFCLL);
}

uint64_t std::__shared_ptr_emplace<mediaplatform::WorkQueue_Dispatch>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::shared_ptr<mediaplatform::WorkQueue>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::shared_ptr<mediaplatform::WorkQueue>>,void *>>>>::reset[abi:ne180100](uint64_t *a1)
{
  uint64_t v1;

  v1 = *a1;
  *a1 = 0;
  if (v1)
  {
    if (*((_BYTE *)a1 + 16))
    {
      std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100](v1 + 56);
      if (*(char *)(v1 + 55) < 0)
        operator delete(*(void **)(v1 + 32));
    }
    operator delete((void *)v1);
  }
}

uint64_t *std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(uint64_t *result, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *v4;
  _BYTE *v5;
  int v6;
  uint64_t v7;
  int v8;
  uint64_t **v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  *((_BYTE *)a2 + 24) = a2 == result;
  if (a2 != result)
  {
    do
    {
      v2 = (uint64_t *)a2[2];
      if (*((_BYTE *)v2 + 24))
        return result;
      v3 = (uint64_t *)v2[2];
      v4 = (uint64_t *)*v3;
      if ((uint64_t *)*v3 == v2)
      {
        v7 = v3[1];
        if (!v7 || (v8 = *(unsigned __int8 *)(v7 + 24), v5 = (_BYTE *)(v7 + 24), v8))
        {
          if ((uint64_t *)*v2 == a2)
          {
            v9 = (uint64_t **)a2[2];
          }
          else
          {
            v9 = (uint64_t **)v2[1];
            v10 = *v9;
            v2[1] = (uint64_t)*v9;
            if (v10)
            {
              v10[2] = (uint64_t)v2;
              v3 = (uint64_t *)v2[2];
            }
            v9[2] = v3;
            *(_QWORD *)(v2[2] + 8 * (*(_QWORD *)v2[2] != (_QWORD)v2)) = v9;
            *v9 = v2;
            v2[2] = (uint64_t)v9;
            v3 = v9[2];
            v2 = (uint64_t *)*v3;
          }
          *((_BYTE *)v9 + 24) = 1;
          *((_BYTE *)v3 + 24) = 0;
          v13 = v2[1];
          *v3 = v13;
          if (v13)
            *(_QWORD *)(v13 + 16) = v3;
          v2[2] = v3[2];
          *(_QWORD *)(v3[2] + 8 * (*(_QWORD *)v3[2] != (_QWORD)v3)) = v2;
          v2[1] = (uint64_t)v3;
          goto LABEL_27;
        }
      }
      else if (!v4 || (v6 = *((unsigned __int8 *)v4 + 24), v5 = v4 + 3, v6))
      {
        if ((uint64_t *)*v2 == a2)
        {
          v11 = a2[1];
          *v2 = v11;
          if (v11)
          {
            *(_QWORD *)(v11 + 16) = v2;
            v3 = (uint64_t *)v2[2];
          }
          a2[2] = (uint64_t)v3;
          *(_QWORD *)(v2[2] + 8 * (*(_QWORD *)v2[2] != (_QWORD)v2)) = a2;
          a2[1] = (uint64_t)v2;
          v2[2] = (uint64_t)a2;
          v3 = (uint64_t *)a2[2];
        }
        else
        {
          a2 = (uint64_t *)a2[2];
        }
        *((_BYTE *)a2 + 24) = 1;
        *((_BYTE *)v3 + 24) = 0;
        v2 = (uint64_t *)v3[1];
        v12 = *v2;
        v3[1] = *v2;
        if (v12)
          *(_QWORD *)(v12 + 16) = v3;
        v2[2] = v3[2];
        *(_QWORD *)(v3[2] + 8 * (*(_QWORD *)v3[2] != (_QWORD)v3)) = v2;
        *v2 = (uint64_t)v3;
LABEL_27:
        v3[2] = (uint64_t)v2;
        return result;
      }
      *((_BYTE *)v2 + 24) = 1;
      a2 = v3;
      *((_BYTE *)v3 + 24) = v3 == result;
      *v5 = 1;
    }
    while (v3 != result);
  }
  return result;
}

BOOL std::less<std::string>::operator()[abi:ne180100](_QWORD *a1, _QWORD *a2)
{
  int v2;
  int v3;
  size_t v4;
  size_t v5;
  size_t v6;
  int v7;

  v2 = *((char *)a2 + 23);
  v3 = *((char *)a1 + 23);
  if (v3 >= 0)
    v4 = *((unsigned __int8 *)a1 + 23);
  else
    v4 = a1[1];
  if (v3 < 0)
    a1 = (_QWORD *)*a1;
  if (v2 >= 0)
    v5 = *((unsigned __int8 *)a2 + 23);
  else
    v5 = a2[1];
  if (v2 < 0)
    a2 = (_QWORD *)*a2;
  if (v5 >= v4)
    v6 = v4;
  else
    v6 = v5;
  v7 = memcmp(a1, a2, v6);
  if (v7)
    return v7 < 0;
  else
    return v4 < v5;
}

void mediaplatform::WorkQueue::defaultConcurrentQueue(_QWORD *a1@<X8>)
{
  unsigned __int8 v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  _QWORD *v7;
  void *__p[2];
  char v9;

  if ((v3 & 1) == 0
  {
    v7 = (_QWORD *)operator new();
    std::string::basic_string[abi:ne180100]<0>(__p, "com.apple.mpl.default-concurrent-queue");
    mediaplatform::WorkQueue::makeWorkQueue((uint64_t)__p, 1, v7);
    if (v9 < 0)
      operator delete(__p[0]);
    mediaplatform::WorkQueue::defaultConcurrentQueue(void)::_concurrentQueue = (uint64_t)v7;
  }
  v4 = *(_QWORD *)(mediaplatform::WorkQueue::defaultConcurrentQueue(void)::_concurrentQueue + 8);
  *a1 = *(_QWORD *)mediaplatform::WorkQueue::defaultConcurrentQueue(void)::_concurrentQueue;
  a1[1] = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
}

void sub_20A78C8F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;

  if (a15 < 0)
    operator delete(__p);
  MEMORY[0x20BD27AFC](v15, 0x20C40A4A59CD2);
  _Unwind_Resume(a1);
}

dispatch_queue_t mediaplatform::WorkQueue::makeWorkQueue@<X0>(uint64_t a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  char *v6;
  const char *v7;
  NSObject *v8;
  dispatch_queue_t result;

  v6 = (char *)operator new(0x78uLL);
  *((_QWORD *)v6 + 1) = 0;
  *((_QWORD *)v6 + 2) = 0;
  *(_QWORD *)v6 = &off_24C331950;
  *((_QWORD *)v6 + 3) = &off_24C3310C0;
  *((_QWORD *)v6 + 4) = 850045863;
  *(_OWORD *)(v6 + 40) = 0u;
  *(_OWORD *)(v6 + 56) = 0u;
  *(_OWORD *)(v6 + 72) = 0u;
  *(_OWORD *)(v6 + 84) = 0u;
  *((_DWORD *)v6 + 28) = a2;
  if (*(char *)(a1 + 23) >= 0)
    v7 = (const char *)a1;
  else
    v7 = *(const char **)a1;
  if (a2 == 1)
    v8 = MEMORY[0x24BDAC9C0];
  else
    v8 = 0;
  result = dispatch_queue_create(v7, v8);
  *((_QWORD *)v6 + 13) = result;
  *a3 = v6 + 24;
  a3[1] = v6;
  return result;
}

mlcore::SourceTable *mlcore::SourceTable::SourceTable(mlcore::SourceTable *this)
{
  int v2;
  int v3;
  std::string *v4;
  int v5;
  int v6;
  int v7;
  int v8;
  void *v9;
  std::string *v10;
  int v11;
  std::string *v12;
  std::string *v13;
  int v14;
  std::string *v15;
  int v16;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  void *v27[2];
  char v28;
  void (**v29)(mediaplatform::DatabaseColumnBase *__hidden);
  std::string v30;
  int v31;
  uint64_t v32;
  int v33;
  void *v34[2];
  char v35;
  void (**v36)(mediaplatform::DatabaseColumnBase *__hidden);
  std::string v37;
  int v38;
  uint64_t v39;
  int v40;
  void *v41[2];
  char v42;
  _BYTE v43[8];
  std::string v44;
  int v45;
  char v46;
  std::string v47;
  void *v48[2];
  char v49;
  void (**v50)(mediaplatform::DatabaseColumnBase *__hidden);
  std::string v51;
  int v52;
  uint64_t v53;
  int v54;
  std::string v55;
  uint64_t (**v56)();
  std::string __p;
  int v58;
  uint64_t v59;
  int v60;
  uint64_t (**v61)();
  std::string v62;
  int v63;
  uint64_t v64;
  int v65;
  uint64_t (**v66)();
  std::string v67;
  int v68;
  char v69;
  std::string v70;
  uint64_t (**v71)();
  std::string __s;
  int v73;
  uint64_t v74;
  int v75;
  std::string v76;
  uint64_t (**v77)();
  std::string v78;
  int v79;
  uint64_t v80;
  int v81;
  uint64_t (**v82)();
  std::string v83;
  int v84;
  uint64_t v85;
  int v86;
  uint64_t (**v87)();
  std::string v88;
  int v89;
  char v90;
  std::string v91;
  uint64_t (**v92)();
  std::string v93;
  int v94;
  uint64_t v95;
  int v96;
  uint64_t (**v97)();
  std::string v98;
  int v99;
  uint64_t v100;
  int v101;
  uint64_t (**v102)();
  std::string v103;
  int v104;
  uint64_t v105;
  int v106;
  uint64_t (**v107)();
  std::string v108;
  int v109;
  char v110;
  std::string v111;
  void (**v112)(mediaplatform::DatabaseColumnBase *__hidden);
  std::string v113;
  int v114;
  uint64_t v115;
  int v116;
  uint64_t (**v117)();
  std::string v118;
  int v119;
  uint64_t v120;
  int v121;
  void (**v122)(mediaplatform::DatabaseColumnBase *__hidden);
  std::string v123;
  int v124;
  uint64_t v125;
  int v126;

  std::string::basic_string[abi:ne180100]<0>(&v55, "source");
  std::string::basic_string[abi:ne180100]<0>(v48, "source_pid");
  mlcore::MediaColumn<long long>::MediaColumn((uint64_t)&v50, (uint64_t)v48, 1);
  std::string::basic_string[abi:ne180100]<0>(v41, "source_name");
  mlcore::MediaColumn<std::string>::MediaColumn((uint64_t)v43, (uint64_t)v41, 0);
  std::string::basic_string[abi:ne180100]<0>(v34, "last_sync_date");
  mlcore::MediaColumn<long long>::MediaColumn((uint64_t)&v36, (uint64_t)v34);
  std::string::basic_string[abi:ne180100]<0>(v27, "last_sync_revision");
  mlcore::MediaColumn<long long>::MediaColumn((uint64_t)&v29, (uint64_t)v27);
  if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v76, v55.__r_.__value_.__l.__data_, v55.__r_.__value_.__l.__size_);
  else
    v76 = v55;
  if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&__s, v51.__r_.__value_.__l.__data_, v51.__r_.__value_.__l.__size_);
  else
    __s = v51;
  v71 = off_24C335B18;
  v74 = v53;
  v2 = v52;
  v73 = v52;
  v75 = v54;
  v66 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v67, v44.__r_.__value_.__l.__data_, v44.__r_.__value_.__l.__size_);
  else
    v67 = v44;
  v68 = v45;
  v66 = &off_24C335AB8;
  v69 = v46;
  if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v70, v47.__r_.__value_.__l.__data_, v47.__r_.__value_.__l.__size_);
  else
    v70 = v47;
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v62, v37.__r_.__value_.__l.__data_, v37.__r_.__value_.__l.__size_);
  else
    v62 = v37;
  v61 = off_24C335B18;
  v64 = v39;
  v26 = v38;
  v63 = v38;
  v65 = v40;
  if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&__p, v30.__r_.__value_.__l.__data_, v30.__r_.__value_.__l.__size_);
  else
    __p = v30;
  v3 = v31;
  v56 = off_24C335B18;
  v59 = v32;
  v58 = v31;
  v60 = v33;
  *(_QWORD *)this = &off_24C330F50;
  v4 = (std::string *)((char *)this + 8);
  v24 = SHIBYTE(v76.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v76.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v4, v76.__r_.__value_.__l.__data_, v76.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)&v76.__r_.__value_.__l.__data_;
    *((_QWORD *)this + 3) = *((_QWORD *)&v76.__r_.__value_.__l + 2);
  }
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 6) = 0;
  *((_QWORD *)this + 7) = 0;
  *(_QWORD *)this = off_24C3356E0;
  *((_QWORD *)this + 8) = 0;
  *((_QWORD *)this + 9) = 0;
  v5 = SHIBYTE(__s.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v93, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
  else
    v93 = __s;
  v92 = off_24C335B18;
  v95 = v74;
  v94 = v2;
  v96 = v75;
  v87 = (uint64_t (**)())off_24C335D90;
  v25 = v2;
  if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v88, v67.__r_.__value_.__l.__data_, v67.__r_.__value_.__l.__size_);
  else
    v88 = v67;
  v89 = v68;
  v87 = &off_24C335AB8;
  v90 = v69;
  if (SHIBYTE(v70.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v91, v70.__r_.__value_.__l.__data_, v70.__r_.__value_.__l.__size_);
  else
    v91 = v70;
  v6 = SHIBYTE(v62.__r_.__value_.__r.__words[2]);
  v22 = v5;
  if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v83, v62.__r_.__value_.__l.__data_, v62.__r_.__value_.__l.__size_);
  else
    v83 = v62;
  v82 = off_24C335B18;
  v85 = v64;
  v84 = v26;
  v86 = v65;
  v20 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
  v21 = v6;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v78, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  else
    v78 = __p;
  v77 = off_24C335B18;
  v80 = v59;
  v79 = v3;
  v81 = v60;
  v107 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v88.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v108, v88.__r_.__value_.__l.__data_, v88.__r_.__value_.__l.__size_);
  else
    v108 = v88;
  v109 = v89;
  v107 = &off_24C335AB8;
  v110 = v90;
  if (SHIBYTE(v91.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v111, v91.__r_.__value_.__l.__data_, v91.__r_.__value_.__l.__size_);
  else
    v111 = v91;
  v19 = SHIBYTE(v83.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v83.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v103, v83.__r_.__value_.__l.__data_, v83.__r_.__value_.__l.__size_);
  else
    v103 = v83;
  v102 = off_24C335B18;
  v105 = v64;
  v104 = v26;
  v106 = v65;
  v18 = SHIBYTE(v78.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v78.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v98, v78.__r_.__value_.__l.__data_, v78.__r_.__value_.__l.__size_);
  else
    v98 = v78;
  v97 = off_24C335B18;
  v100 = v59;
  v99 = v3;
  v101 = v60;
  v23 = SHIBYTE(v103.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v103.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v118, v103.__r_.__value_.__l.__data_, v103.__r_.__value_.__l.__size_);
  else
    v118 = v103;
  v117 = off_24C335B18;
  v120 = v64;
  v119 = v26;
  v121 = v65;
  v112 = off_24C335D90;
  v7 = SHIBYTE(v98.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v98.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v113, v98.__r_.__value_.__l.__data_, v98.__r_.__value_.__l.__size_);
  else
    v113 = v98;
  v115 = v59;
  v114 = v3;
  v116 = v60;
  v8 = SHIBYTE(v113.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v113.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v123, v113.__r_.__value_.__l.__data_, v113.__r_.__value_.__l.__size_);
  else
    v123 = v113;
  v125 = v59;
  v124 = v3;
  v126 = v60;
  *((_QWORD *)this + 10) = off_24C335D90;
  if (SHIBYTE(v123.__r_.__value_.__r.__words[2]) < 0)
  {
    v9 = (void *)v123.__r_.__value_.__r.__words[0];
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 88), v123.__r_.__value_.__l.__data_, v123.__r_.__value_.__l.__size_);
    *((_DWORD *)this + 28) = v3;
    *((_QWORD *)this + 10) = off_24C335B18;
    *(_QWORD *)((char *)this + 116) = v59;
    *((_DWORD *)this + 31) = v60;
    operator delete(v9);
  }
  else
  {
    *(std::string *)((char *)this + 88) = v123;
    *((_DWORD *)this + 28) = v3;
    *((_QWORD *)this + 10) = off_24C335B18;
    *(_QWORD *)((char *)this + 116) = v59;
    *((_DWORD *)this + 31) = v60;
    v122 = off_24C335D90;
  }
  *((_QWORD *)this + 16) = off_24C335D90;
  v10 = (std::string *)((char *)this + 136);
  v11 = SHIBYTE(v118.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v118.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v10, v118.__r_.__value_.__l.__data_, v118.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v10->__r_.__value_.__l.__data_ = *(_OWORD *)&v118.__r_.__value_.__l.__data_;
    *((_QWORD *)this + 19) = *((_QWORD *)&v118.__r_.__value_.__l + 2);
  }
  *((_DWORD *)this + 40) = v26;
  *((_QWORD *)this + 16) = off_24C335B18;
  *(_QWORD *)((char *)this + 164) = v64;
  *((_DWORD *)this + 43) = v65;
  v112 = off_24C335D90;
  if (v8 < 0)
    operator delete(v113.__r_.__value_.__l.__data_);
  if (v11 < 0)
    operator delete(v118.__r_.__value_.__l.__data_);
  *((_QWORD *)this + 22) = off_24C335D90;
  if (SHIBYTE(v108.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 184), v108.__r_.__value_.__l.__data_, v108.__r_.__value_.__l.__size_);
  else
    *(std::string *)((char *)this + 184) = v108;
  *((_DWORD *)this + 52) = v109;
  *((_QWORD *)this + 22) = &off_24C335AB8;
  *((_BYTE *)this + 212) = v110;
  v12 = (std::string *)((char *)this + 216);
  if (SHIBYTE(v111.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v12, v111.__r_.__value_.__l.__data_, v111.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v12->__r_.__value_.__l.__data_ = *(_OWORD *)&v111.__r_.__value_.__l.__data_;
    *((_QWORD *)this + 29) = *((_QWORD *)&v111.__r_.__value_.__l + 2);
  }
  if (v7 < 0)
    operator delete(v98.__r_.__value_.__l.__data_);
  if (v23 < 0)
    operator delete(v103.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v107);
  *((_QWORD *)this + 30) = off_24C335D90;
  v13 = (std::string *)((char *)this + 248);
  v14 = SHIBYTE(v93.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v93.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v13, v93.__r_.__value_.__l.__data_, v93.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v13->__r_.__value_.__l.__data_ = *(_OWORD *)&v93.__r_.__value_.__l.__data_;
    *((_QWORD *)this + 33) = *((_QWORD *)&v93.__r_.__value_.__l + 2);
  }
  *((_DWORD *)this + 68) = v25;
  *((_QWORD *)this + 30) = off_24C335B18;
  *(_QWORD *)((char *)this + 276) = v95;
  *((_DWORD *)this + 71) = v96;
  if (v18 < 0)
    operator delete(v78.__r_.__value_.__l.__data_);
  if (v19 < 0)
    operator delete(v83.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v87);
  if (v14 < 0)
    operator delete(v93.__r_.__value_.__l.__data_);
  v56 = (uint64_t (**)())off_24C335D90;
  if (v20 < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v61 = (uint64_t (**)())off_24C335D90;
  if (v21 < 0)
    operator delete(v62.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v66);
  v71 = (uint64_t (**)())off_24C335D90;
  if (v22 < 0)
    operator delete(__s.__r_.__value_.__l.__data_);
  if (v24 < 0)
    operator delete(v76.__r_.__value_.__l.__data_);
  *(_QWORD *)this = &off_24C336248;
  *((_QWORD *)this + 36) = off_24C335D90;
  if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 296), v51.__r_.__value_.__l.__data_, v51.__r_.__value_.__l.__size_);
  else
    *(std::string *)((char *)this + 296) = v51;
  *((_DWORD *)this + 80) = v52;
  *(_QWORD *)((char *)this + 324) = v53;
  *((_DWORD *)this + 83) = v54;
  *((_QWORD *)this + 36) = off_24C336AC0;
  std::__tuple_leaf<1ul,mlcore::MediaColumn<std::string>,false>::__tuple_leaf[abi:ne180100]<mlcore::MediaColumn<std::string>&,void>((uint64_t)this + 336, (uint64_t)v43);
  *((_QWORD *)this + 50) = off_24C335D90;
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external((std::string *)this + 17, v37.__r_.__value_.__l.__data_, v37.__r_.__value_.__l.__size_);
  else
    *((std::string *)this + 17) = v37;
  *((_DWORD *)this + 108) = v38;
  *(_QWORD *)((char *)this + 436) = v39;
  *((_DWORD *)this + 111) = v40;
  *((_QWORD *)this + 50) = off_24C336AC0;
  *((_QWORD *)this + 56) = off_24C335D90;
  v15 = (std::string *)((char *)this + 456);
  if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v15, v30.__r_.__value_.__l.__data_, v30.__r_.__value_.__l.__size_);
    v16 = SHIBYTE(v30.__r_.__value_.__r.__words[2]);
    *((_DWORD *)this + 120) = v31;
    *(_QWORD *)((char *)this + 484) = v32;
    *((_DWORD *)this + 123) = v33;
    *((_QWORD *)this + 56) = off_24C336AC0;
    v29 = off_24C335D90;
    if (v16 < 0)
      operator delete(v30.__r_.__value_.__l.__data_);
  }
  else
  {
    *(_OWORD *)&v15->__r_.__value_.__l.__data_ = *(_OWORD *)&v30.__r_.__value_.__l.__data_;
    *((_QWORD *)this + 59) = *((_QWORD *)&v30.__r_.__value_.__l + 2);
    *((_DWORD *)this + 120) = v31;
    *(_QWORD *)((char *)this + 484) = v32;
    *((_DWORD *)this + 123) = v33;
    *((_QWORD *)this + 56) = off_24C336AC0;
    v29 = off_24C335D90;
  }
  if (v28 < 0)
    operator delete(v27[0]);
  v36 = off_24C335D90;
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v37.__r_.__value_.__l.__data_);
  if (v35 < 0)
    operator delete(v34[0]);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)v43);
  if (v42 < 0)
    operator delete(v41[0]);
  v50 = off_24C335D90;
  if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v51.__r_.__value_.__l.__data_);
  if (v49 < 0)
    operator delete(v48[0]);
  if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v55.__r_.__value_.__l.__data_);
  *(_QWORD *)this = &off_24C336BD0;
  return this;
}

void sub_20A78D568(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42,uint64_t a43,void *a44,uint64_t a45,int a46,__int16 a47,char a48,char a49,uint64_t a50,uint64_t a51,void *a52,uint64_t a53,int a54,__int16 a55,char a56,char a57,char a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  void *a66;
  char a71;
  uint64_t a72;
  void *a73;
  char a74;
  void *a75;
  char a76;
  uint64_t v76;
  void **v77;
  uint64_t v78;
  void **v79;
  uint64_t v80;

  *(_QWORD *)(v76 + 400) = v80;
  if (*(char *)(v76 + 431) < 0)
    operator delete(*v79);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(v78);
  *(_QWORD *)(v76 + 288) = off_24C335D90;
  if (*(char *)(v76 + 319) < 0)
    operator delete(*v77);
  mediaplatform::DatabaseTable<long long,std::string,long long,long long>::~DatabaseTable(v76);
  if (a34 < 0)
    operator delete(__p);
  if (a27 < 0)
    operator delete(a22);
  if (a49 < 0)
    operator delete(a44);
  if (a42 < 0)
    operator delete(a37);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&a58);
  if (a57 < 0)
    operator delete(a52);
  a72 = (uint64_t)off_24C335D90;
  if (a74 < 0)
    operator delete(a73);
  if (a71 < 0)
    operator delete(a66);
  if (a76 < 0)
    operator delete(a75);
  _Unwind_Resume(a1);
}

void sub_20A78D8A8()
{
  JUMPOUT(0x20A78D810);
}

void sub_20A78D8B0()
{
  JUMPOUT(0x20A78D820);
}

void sub_20A78D8B8()
{
  JUMPOUT(0x20A78D83CLL);
}

void sub_20A78D8C0()
{
  JUMPOUT(0x20A78D84CLL);
}

void sub_20A78D8C8()
{
  JUMPOUT(0x20A78D854);
}

void sub_20A78D8D0()
{
  JUMPOUT(0x20A78D864);
}

void sub_20A78D8D8()
{
  JUMPOUT(0x20A78D880);
}

void sub_20A78D8E0()
{
  JUMPOUT(0x20A78D890);
}

void mlcore::SourceTable::~SourceTable(mlcore::SourceTable *this)
{
  mlcore::MediaTable<long long,std::string,long long,long long>::~MediaTable((uint64_t)this);
  JUMPOUT(0x20BD27AFCLL);
}

uint64_t mediaplatform::DatabaseTable<long long,std::string,long long,long long>::columnCount()
{
  return 4;
}

void mediaplatform::DatabaseTable<long long,std::string,long long,long long>::columnNames(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  mediaplatform::ColumnNamesApplier::operator()<long long>((uint64_t)a2, a1 + 240);
  mediaplatform::ColumnNamesApplier::operator()<std::string>((uint64_t)a2, a1 + 176);
  mediaplatform::ColumnNamesApplier::operator()<long long>((uint64_t)a2, a1 + 128);
  mediaplatform::ColumnNamesApplier::operator()<long long>((uint64_t)a2, a1 + 80);
}

void sub_20A78D978(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void mediaplatform::DatabaseTable<long long,std::string,long long,long long>::targetColumnExpression(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  __int128 *v3;
  __int128 *v4[3];
  __int128 **v5;

  v3 = (__int128 *)(a1 + 8);
  (*(void (**)(__int128 **__return_ptr))(*(_QWORD *)a1 + 24))(v4);
  std::allocate_shared[abi:ne180100]<mediaplatform::SQLColumnNameExpression,std::allocator<mediaplatform::SQLColumnNameExpression>,std::string &,std::string const&,void>(a2, v4[0], v3);
  v5 = v4;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v5);
}

void sub_20A78D9F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void mlcore::MediaTable<long long,std::string,long long,long long>::~MediaTable(uint64_t a1)
{
  *(_QWORD *)a1 = &off_24C336248;
  *(_QWORD *)(a1 + 448) = off_24C335D90;
  if (*(char *)(a1 + 479) < 0)
    operator delete(*(void **)(a1 + 456));
  *(_QWORD *)(a1 + 400) = off_24C335D90;
  if (*(char *)(a1 + 431) < 0)
    operator delete(*(void **)(a1 + 408));
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 336);
  *(_QWORD *)(a1 + 288) = off_24C335D90;
  if (*(char *)(a1 + 319) < 0)
    operator delete(*(void **)(a1 + 296));
  *(_QWORD *)a1 = off_24C3356E0;
  *(_QWORD *)(a1 + 240) = off_24C335D90;
  if (*(char *)(a1 + 271) < 0)
    operator delete(*(void **)(a1 + 248));
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 176);
  *(_QWORD *)(a1 + 128) = off_24C335D90;
  if (*(char *)(a1 + 159) < 0)
    operator delete(*(void **)(a1 + 136));
  *(_QWORD *)(a1 + 80) = off_24C335D90;
  if (*(char *)(a1 + 111) < 0)
    operator delete(*(void **)(a1 + 88));
  if (*(char *)(a1 + 79) < 0)
    operator delete(*(void **)(a1 + 56));
  mediaplatform::DatabaseTableBase::~DatabaseTableBase((void **)a1);
}

{
  mlcore::MediaTable<long long,std::string,long long,long long>::~MediaTable(a1);
  JUMPOUT(0x20BD27AFCLL);
}

void mediaplatform::DatabaseTable<long long,std::string,long long,long long>::~DatabaseTable(uint64_t a1)
{
  *(_QWORD *)a1 = off_24C3356E0;
  *(_QWORD *)(a1 + 240) = off_24C335D90;
  if (*(char *)(a1 + 271) < 0)
    operator delete(*(void **)(a1 + 248));
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 176);
  *(_QWORD *)(a1 + 128) = off_24C335D90;
  if (*(char *)(a1 + 159) < 0)
    operator delete(*(void **)(a1 + 136));
  *(_QWORD *)(a1 + 80) = off_24C335D90;
  if (*(char *)(a1 + 111) < 0)
    operator delete(*(void **)(a1 + 88));
  if (*(char *)(a1 + 79) < 0)
    operator delete(*(void **)(a1 + 56));
  mediaplatform::DatabaseTableBase::~DatabaseTableBase((void **)a1);
}

{
  *(_QWORD *)a1 = off_24C3356E0;
  *(_QWORD *)(a1 + 240) = off_24C335D90;
  if (*(char *)(a1 + 271) < 0)
    operator delete(*(void **)(a1 + 248));
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 176);
  *(_QWORD *)(a1 + 128) = off_24C335D90;
  if (*(char *)(a1 + 159) < 0)
    operator delete(*(void **)(a1 + 136));
  *(_QWORD *)(a1 + 80) = off_24C335D90;
  if (*(char *)(a1 + 111) < 0)
    operator delete(*(void **)(a1 + 88));
  if (*(char *)(a1 + 79) < 0)
    operator delete(*(void **)(a1 + 56));
  mediaplatform::DatabaseTableBase::~DatabaseTableBase((void **)a1);
  JUMPOUT(0x20BD27AFCLL);
}

{
  *(_QWORD *)a1 = off_24C3356E0;
  *(_QWORD *)(a1 + 240) = off_24C335D90;
  if (*(char *)(a1 + 271) < 0)
    operator delete(*(void **)(a1 + 248));
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 176);
  *(_QWORD *)(a1 + 128) = off_24C335D90;
  if (*(char *)(a1 + 159) < 0)
    operator delete(*(void **)(a1 + 136));
  *(_QWORD *)(a1 + 80) = off_24C335D90;
  if (*(char *)(a1 + 111) < 0)
    operator delete(*(void **)(a1 + 88));
  if (*(char *)(a1 + 79) < 0)
    operator delete(*(void **)(a1 + 56));
  mediaplatform::DatabaseTableBase::~DatabaseTableBase((void **)a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<1ul,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>>::~DatabaseColumnTuple(uint64_t a1)
{
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 96);
  *(_QWORD *)(a1 + 48) = off_24C335D90;
  if (*(char *)(a1 + 79) < 0)
    operator delete(*(void **)(a1 + 56));
  *(_QWORD *)a1 = off_24C335D90;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void mlcore::SourceTable::persistentIDColumn(mlcore::SourceTable *this@<X0>, uint64_t a2@<X8>)
{
  std::string *v4;

  *(_QWORD *)a2 = off_24C335D90;
  v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 319) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 37), *((_QWORD *)this + 38));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 296);
    *(_QWORD *)(a2 + 24) = *((_QWORD *)this + 39);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 80);
  *(_DWORD *)(a2 + 44) = *((_DWORD *)this + 83);
  *(_QWORD *)(a2 + 36) = *(_QWORD *)((char *)this + 324);
  *(_QWORD *)a2 = off_24C336AC0;
}

void mlcore::SourceTable::sourceNameColumn(mlcore::SourceTable *this@<X0>, uint64_t a2@<X8>)
{
  std::string *v4;
  std::string *v5;

  *(_QWORD *)a2 = off_24C335D90;
  v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 367) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 43), *((_QWORD *)this + 44));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 344);
    *(_QWORD *)(a2 + 24) = *((_QWORD *)this + 45);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 92);
  *(_QWORD *)a2 = &off_24C335AB8;
  *(_BYTE *)(a2 + 36) = *((_BYTE *)this + 372);
  v5 = (std::string *)(a2 + 40);
  if (*((char *)this + 399) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)this + 47), *((_QWORD *)this + 48));
  }
  else
  {
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 376);
    *(_QWORD *)(a2 + 56) = *((_QWORD *)this + 49);
  }
  *(_QWORD *)a2 = &off_24C336A60;
}

void sub_20A78DE48(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  uint64_t v3;

  *(_QWORD *)v1 = v3;
  if (*(char *)(v1 + 31) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

void mlcore::SourceTable::lastSyncDateColumn(mlcore::SourceTable *this@<X0>, uint64_t a2@<X8>)
{
  std::string *v4;

  *(_QWORD *)a2 = off_24C335D90;
  v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 431) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 51), *((_QWORD *)this + 52));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 408);
    *(_QWORD *)(a2 + 24) = *((_QWORD *)this + 53);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 108);
  *(_DWORD *)(a2 + 44) = *((_DWORD *)this + 111);
  *(_QWORD *)(a2 + 36) = *(_QWORD *)((char *)this + 436);
  *(_QWORD *)a2 = off_24C336AC0;
}

void mlcore::SourceTable::lastSyncRevisionColumn(mlcore::SourceTable *this@<X0>, uint64_t a2@<X8>)
{
  std::string *v4;

  *(_QWORD *)a2 = off_24C335D90;
  v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 479) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 57), *((_QWORD *)this + 58));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 456);
    *(_QWORD *)(a2 + 24) = *((_QWORD *)this + 59);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 120);
  *(_DWORD *)(a2 + 44) = *((_DWORD *)this + 123);
  *(_QWORD *)(a2 + 36) = *(_QWORD *)((char *)this + 484);
  *(_QWORD *)a2 = off_24C336AC0;
}

void mlcore::CloudKVSEntity::~CloudKVSEntity(mlcore::CloudKVSEntity *this)
{
  *(_QWORD *)this = off_24C33A860;
  mlcore::PropertyCacheBase<long long,int,double,std::string,mediaplatform::Data>::~PropertyCacheBase((_QWORD *)this + 1);
}

{
  *(_QWORD *)this = off_24C33A860;
  mlcore::PropertyCacheBase<long long,int,double,std::string,mediaplatform::Data>::~PropertyCacheBase((_QWORD *)this + 1);
  JUMPOUT(0x20BD27AFCLL);
}

double std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::TypedEntityClass<mlcore::CloudKVSEntity>::sharedPointer(void)::{lambda(void)#1} &&>>()
{
  uint64_t v0;
  double result;

  v0 = operator new();
  result = 0.0;
  *(_OWORD *)(v0 + 16) = 0u;
  *(_OWORD *)(v0 + 32) = 0u;
  *(_OWORD *)(v0 + 48) = 0u;
  *(_OWORD *)(v0 + 64) = 0u;
  *(_OWORD *)(v0 + 80) = 0u;
  *(_QWORD *)(v0 + 96) = 0;
  *(_DWORD *)(v0 + 104) = 1065353216;
  *(_OWORD *)(v0 + 112) = 0u;
  *(_OWORD *)(v0 + 128) = 0u;
  *(_DWORD *)(v0 + 144) = 1065353216;
  *(_QWORD *)v0 = &off_24C338660;
  *(_QWORD *)(v0 + 8) = 850045863;
  mlcore::TypedEntityClass<mlcore::CloudKVSEntity>::sharedPointer(void)::__sharedPointer = v0;
  return result;
}

void mlcore::TypedEntityClass<mlcore::CloudKVSEntity>::~TypedEntityClass(mlcore::EntityClass *a1)
{
  mlcore::EntityClass::~EntityClass(a1);
  JUMPOUT(0x20BD27AFCLL);
}

uint64_t mlcore::TypedEntityClass<mlcore::CloudKVSEntity>::description(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
}

__n128 mlcore::TypedEntityClass<mlcore::CloudKVSEntity>::create@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, __n128 *a4@<X8>)
{
  char *v8;
  uint64_t v9;
  unint64_t *v10;
  uint64_t v11;
  __n128 result;
  __n128 v13;
  unint64_t v14[3];
  unint64_t *v15;
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  v8 = (char *)operator new(0x100uLL);
  *((_QWORD *)v8 + 1) = 0;
  *((_QWORD *)v8 + 2) = 0;
  *(_QWORD *)v8 = &off_24C33C7F8;
  *(_OWORD *)(v8 + 40) = 0u;
  *(_OWORD *)(v8 + 56) = 0u;
  *((_DWORD *)v8 + 18) = 1065353216;
  *((_OWORD *)v8 + 5) = 0u;
  *((_OWORD *)v8 + 6) = 0u;
  *((_DWORD *)v8 + 28) = 1065353216;
  *(_OWORD *)(v8 + 120) = 0u;
  *(_OWORD *)(v8 + 136) = 0u;
  *((_DWORD *)v8 + 38) = 1065353216;
  *((_OWORD *)v8 + 10) = 0u;
  *((_OWORD *)v8 + 11) = 0u;
  *((_DWORD *)v8 + 48) = 1065353216;
  *(_OWORD *)(v8 + 216) = 0u;
  *((_DWORD *)v8 + 58) = 1065353216;
  *((_QWORD *)v8 + 30) = &unk_24C3371E8;
  *((_QWORD *)v8 + 31) = a2;
  *(_OWORD *)(v8 + 200) = 0u;
  v9 = (uint64_t)(v8 + 200);
  *((_QWORD *)v8 + 4) = &off_24C3371C0;
  *((_QWORD *)v8 + 3) = &off_24C337468;
  v13.n128_u64[0] = (unint64_t)(v8 + 24);
  v13.n128_u64[1] = (unint64_t)v8;
  v14[0] = (unint64_t)&off_24C33B140;
  v15 = v14;
  mlcore::PropertyCache::mergePropertiesFromCache((uint64_t)(v8 + 32), a3, (uint64_t)v14);
  v10 = v15;
  if (v15 == v14)
  {
    v11 = 4;
    v10 = v14;
    goto LABEL_5;
  }
  if (v15)
  {
    v11 = 5;
LABEL_5:
    (*(void (**)(void))(*v10 + 8 * v11))();
  }
  v14[0] = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 112))(a1);
  std::__hash_table<std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>,std::__unordered_map_hasher<mlcore::ModelProperty<long long> *,std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>,std::hash<mlcore::ModelProperty<long long> *>,std::equal_to<mlcore::ModelProperty<long long> *>,true>,std::__unordered_map_equal<mlcore::ModelProperty<long long> *,std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>,std::equal_to<mlcore::ModelProperty<long long> *>,std::hash<mlcore::ModelProperty<long long> *>,true>,std::allocator<std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>>>::__emplace_unique_key_args<mlcore::ModelProperty<long long> *,std::piecewise_construct_t const&,std::tuple<mlcore::ModelProperty<long long> * const&>,std::tuple<>>(v9, v14[0], v14)[3] = a2;
  result = v13;
  *a4 = v13;
  return result;
}

void sub_20A78E1E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15)
{
  char *v15;
  char *v17;
  uint64_t v18;

  v17 = a15;
  if (a15 == v15)
  {
    v18 = 4;
    v17 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v18 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v17 + 8 * v18))();
LABEL_6:
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t mlcore::TypedEntityClass<mlcore::CloudKVSEntity>::name(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
}

uint64_t mlcore::TypedEntityClass<mlcore::CloudKVSEntity>::entityType()
{
  return 0xFFFFFFFFLL;
}

BOOL mlcore::TypedEntityClass<mlcore::CloudKVSEntity>::isRevisionTrackable(uint64_t a1)
{
  return (*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1) != -1;
}

uint64_t mlcore::TypedEntityClass<mlcore::CloudKVSEntity>::isCloudUpdatable()
{
  return 0;
}

uint64_t mlcore::TypedEntityClass<mlcore::CloudKVSEntity>::databaseTable()
{
  return *(_QWORD *)mediaplatform::Singleton<mlcore::CloudKVSTable>::sharedInstance();
}

void mlcore::TypedEntityClass<mlcore::CloudKVSEntity>::databaseTablesToDeleteFrom(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

void mlcore::TypedEntityClass<mlcore::CloudKVSEntity>::databaseTablesToInsertInto(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

uint64_t mlcore::TypedEntityClass<mlcore::CloudKVSEntity>::persistentIDProperty()
{
  return 0;
}

uint64_t mlcore::TypedEntityClass<mlcore::CloudKVSEntity>::representativeItemPersistentIDProperty()
{
  return 0;
}

uint64_t mlcore::TypedEntityClass<mlcore::CloudKVSEntity>::trackForeignPersistentIDProperty()
{
  return 0;
}

uint64_t mlcore::TypedEntityClass<mlcore::CloudKVSEntity>::trackForeignOrderingProperty()
{
  return 0;
}

uint64_t mlcore::TypedEntityClass<mlcore::CloudKVSEntity>::sectionPropertyForOrderingProperty()
{
  return 0;
}

mlcore::CloudKVSTable *_ZNSt3__115allocate_sharedB8ne180100IN6mlcore13CloudKVSTableENS_9allocatorIS2_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(mlcore::CloudKVSTable **a1)
{
  _QWORD *v2;
  mlcore::CloudKVSTable *result;

  v2 = operator new(0x2C8uLL);
  v2[1] = 0;
  v2[2] = 0;
  *v2 = &off_24C33C6E0;
  result = mlcore::CloudKVSTable::CloudKVSTable((mlcore::CloudKVSTable *)(v2 + 3));
  *a1 = result;
  a1[1] = (mlcore::CloudKVSTable *)v2;
  return result;
}

void sub_20A78E308(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<mlcore::CloudKVSTable>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C33C6E0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<mlcore::CloudKVSTable>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C33C6E0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x20BD27AFCLL);
}

uint64_t std::__shared_ptr_emplace<mlcore::CloudKVSTable>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__shared_ptr_emplace<mlcore::CloudKVSEntity>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C33C7F8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<mlcore::CloudKVSEntity>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C33C7F8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x20BD27AFCLL);
}

uint64_t std::__shared_ptr_emplace<mlcore::CloudKVSEntity>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t mlcore::CloudKVSEntityPropertyKey(mlcore *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&mlcore::CloudKVSEntityPropertyKey(void)::once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&mlcore::CloudKVSEntityPropertyKey(void)::once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::CloudKVSEntityPropertyKey(void)::$_0 &&>>);
  }
  return mlcore::CloudKVSEntityPropertyKey(void)::property;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::CloudKVSEntityPropertyKey(void)::$_0 &&>>()
{
  uint64_t v0;
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  mlcore::CloudKVSTable **v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  std::string *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  std::string *v19;
  __int128 v20;
  std::string v21;
  std::string __str;
  _QWORD v23[2];

  v0 = operator new();
  v1 = (_QWORD *)mediaplatform::Singleton<mlcore::CloudKVSTable>::sharedInstance();
  v2 = (std::__shared_weak_count *)v1[1];
  v23[0] = *v1;
  v23[1] = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  v5 = (mlcore::CloudKVSTable **)mediaplatform::Singleton<mlcore::CloudKVSTable>::sharedInstance();
  mlcore::CloudKVSTable::keyColoumn(*v5, (uint64_t)&__str);
  mlcore::DatabaseModelProperty<std::string>::DatabaseModelProperty(v0, v23, (uint64_t)&__str);
  mlcore::CloudKVSEntityPropertyKey(void)::property = v0;
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&__str);
  if (v2)
  {
    v6 = (unint64_t *)&v2->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v8 = mlcore::CloudKVSEntityPropertyKey(void)::property;
  std::string::basic_string[abi:ne180100]<0>(&__str, "");
  std::string::operator=((std::string *)(v8 + 40), &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  v9 = mlcore::TypedEntityClass<mlcore::CloudKVSEntity>::sharedPointer();
  v10 = mlcore::CloudKVSEntityPropertyKey(void)::property;
  v11 = mediaplatform::Singleton<mlcore::CloudKVSTable>::sharedInstance();
  v12 = *(_QWORD *)v11;
  if (*(char *)(*(_QWORD *)v11 + 31) >= 0)
    v13 = *(unsigned __int8 *)(*(_QWORD *)v11 + 31);
  else
    v13 = *(_QWORD *)(*(_QWORD *)v11 + 16);
  v14 = &v21;
  std::string::basic_string[abi:ne180100]((uint64_t)&v21, v13 + 1);
  if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v14 = (std::string *)v21.__r_.__value_.__r.__words[0];
  if (v13)
  {
    v17 = *(char **)(v12 + 8);
    v16 = (char *)(v12 + 8);
    v15 = v17;
    if (v16[23] >= 0)
      v18 = v16;
    else
      v18 = v15;
    memmove(v14, v18, v13);
  }
  *(_WORD *)((char *)&v14->__r_.__value_.__l.__data_ + v13) = 46;
  v19 = std::string::append(&v21, "key");
  v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  __str.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  mlcore::EntityClass::setPropertyForName(v9, v10, &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
}

void sub_20A78E5E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::CloudKVSEntityPropertyPlayCount(void)::$_0 &&>>()
{
  uint64_t v0;
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  mlcore::CloudKVSTable **v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  std::string *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  std::string *v19;
  __int128 v20;
  std::string v21;
  std::string __p;
  char v23;
  _QWORD v24[2];

  v0 = operator new();
  v1 = (_QWORD *)mediaplatform::Singleton<mlcore::CloudKVSTable>::sharedInstance();
  v2 = (std::__shared_weak_count *)v1[1];
  v24[0] = *v1;
  v24[1] = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  v5 = (mlcore::CloudKVSTable **)mediaplatform::Singleton<mlcore::CloudKVSTable>::sharedInstance();
  mlcore::CloudKVSTable::playCountColumn(*v5, (uint64_t)&__p);
  mlcore::DatabaseModelProperty<long long>::DatabaseModelProperty(v0, v24, (uint64_t)&__p);
  mlcore::CloudKVSEntityPropertyPlayCount(void)::property = v0;
  if (v23 < 0)
    operator delete((void *)__p.__r_.__value_.__l.__size_);
  if (v2)
  {
    v6 = (unint64_t *)&v2->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v8 = mlcore::CloudKVSEntityPropertyPlayCount(void)::property;
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  std::string::operator=((std::string *)(v8 + 40), &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v9 = mlcore::TypedEntityClass<mlcore::CloudKVSEntity>::sharedPointer();
  v10 = mlcore::CloudKVSEntityPropertyPlayCount(void)::property;
  v11 = mediaplatform::Singleton<mlcore::CloudKVSTable>::sharedInstance();
  v12 = *(_QWORD *)v11;
  if (*(char *)(*(_QWORD *)v11 + 31) >= 0)
    v13 = *(unsigned __int8 *)(*(_QWORD *)v11 + 31);
  else
    v13 = *(_QWORD *)(*(_QWORD *)v11 + 16);
  v14 = &v21;
  std::string::basic_string[abi:ne180100]((uint64_t)&v21, v13 + 1);
  if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v14 = (std::string *)v21.__r_.__value_.__r.__words[0];
  if (v13)
  {
    v17 = *(char **)(v12 + 8);
    v16 = (char *)(v12 + 8);
    v15 = v17;
    if (v16[23] >= 0)
      v18 = v16;
    else
      v18 = v15;
    memmove(v14, v18, v13);
  }
  *(_WORD *)((char *)&v14->__r_.__value_.__l.__data_ + v13) = 46;
  v19 = std::string::append(&v21, "play_count_user");
  v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  __p.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  mlcore::EntityClass::setPropertyForName(v9, v10, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
}

void sub_20A78E870(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::CloudKVSEntityPropertyHasBeenPlayed(void)::$_0 &&>>()
{
  uint64_t v0;
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  mlcore::CloudKVSTable **v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  std::string *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  std::string *v19;
  __int128 v20;
  std::string v21;
  std::string __p;
  char v23;
  _QWORD v24[2];

  v0 = operator new();
  v1 = (_QWORD *)mediaplatform::Singleton<mlcore::CloudKVSTable>::sharedInstance();
  v2 = (std::__shared_weak_count *)v1[1];
  v24[0] = *v1;
  v24[1] = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  v5 = (mlcore::CloudKVSTable **)mediaplatform::Singleton<mlcore::CloudKVSTable>::sharedInstance();
  mlcore::CloudKVSTable::hasBeenPlayedColumn(*v5, (uint64_t)&__p);
  mlcore::DatabaseModelProperty<long long>::DatabaseModelProperty(v0, v24, (uint64_t)&__p);
  mlcore::CloudKVSEntityPropertyHasBeenPlayed(void)::property = v0;
  if (v23 < 0)
    operator delete((void *)__p.__r_.__value_.__l.__size_);
  if (v2)
  {
    v6 = (unint64_t *)&v2->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v8 = mlcore::CloudKVSEntityPropertyHasBeenPlayed(void)::property;
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  std::string::operator=((std::string *)(v8 + 40), &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v9 = mlcore::TypedEntityClass<mlcore::CloudKVSEntity>::sharedPointer();
  v10 = mlcore::CloudKVSEntityPropertyHasBeenPlayed(void)::property;
  v11 = mediaplatform::Singleton<mlcore::CloudKVSTable>::sharedInstance();
  v12 = *(_QWORD *)v11;
  if (*(char *)(*(_QWORD *)v11 + 31) >= 0)
    v13 = *(unsigned __int8 *)(*(_QWORD *)v11 + 31);
  else
    v13 = *(_QWORD *)(*(_QWORD *)v11 + 16);
  v14 = &v21;
  std::string::basic_string[abi:ne180100]((uint64_t)&v21, v13 + 1);
  if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v14 = (std::string *)v21.__r_.__value_.__r.__words[0];
  if (v13)
  {
    v17 = *(char **)(v12 + 8);
    v16 = (char *)(v12 + 8);
    v15 = v17;
    if (v16[23] >= 0)
      v18 = v16;
    else
      v18 = v15;
    memmove(v14, v18, v13);
  }
  *(_WORD *)((char *)&v14->__r_.__value_.__l.__data_ + v13) = 46;
  v19 = std::string::append(&v21, "has_been_played");
  v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  __p.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  mlcore::EntityClass::setPropertyForName(v9, v10, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
}

void sub_20A78EB00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::CloudKVSEntityPropertyBookmarkTime(void)::$_0 &&>>()
{
  uint64_t v0;
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  mlcore::CloudKVSTable **v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  std::string *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  std::string *v19;
  __int128 v20;
  std::string v21;
  std::string __p;
  char v23;
  _QWORD v24[2];

  v0 = operator new();
  v1 = (_QWORD *)mediaplatform::Singleton<mlcore::CloudKVSTable>::sharedInstance();
  v2 = (std::__shared_weak_count *)v1[1];
  v24[0] = *v1;
  v24[1] = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  v5 = (mlcore::CloudKVSTable **)mediaplatform::Singleton<mlcore::CloudKVSTable>::sharedInstance();
  mlcore::CloudKVSTable::bookmarkTimeColumn(*v5, (uint64_t)&__p);
  mlcore::DatabaseModelProperty<double>::DatabaseModelProperty(v0, v24, (uint64_t)&__p);
  mlcore::CloudKVSEntityPropertyBookmarkTime(void)::property = v0;
  if (v23 < 0)
    operator delete((void *)__p.__r_.__value_.__l.__size_);
  if (v2)
  {
    v6 = (unint64_t *)&v2->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v8 = mlcore::CloudKVSEntityPropertyBookmarkTime(void)::property;
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  std::string::operator=((std::string *)(v8 + 40), &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v9 = mlcore::TypedEntityClass<mlcore::CloudKVSEntity>::sharedPointer();
  v10 = mlcore::CloudKVSEntityPropertyBookmarkTime(void)::property;
  v11 = mediaplatform::Singleton<mlcore::CloudKVSTable>::sharedInstance();
  v12 = *(_QWORD *)v11;
  if (*(char *)(*(_QWORD *)v11 + 31) >= 0)
    v13 = *(unsigned __int8 *)(*(_QWORD *)v11 + 31);
  else
    v13 = *(_QWORD *)(*(_QWORD *)v11 + 16);
  v14 = &v21;
  std::string::basic_string[abi:ne180100]((uint64_t)&v21, v13 + 1);
  if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v14 = (std::string *)v21.__r_.__value_.__r.__words[0];
  if (v13)
  {
    v17 = *(char **)(v12 + 8);
    v16 = (char *)(v12 + 8);
    v15 = v17;
    if (v16[23] >= 0)
      v18 = v16;
    else
      v18 = v15;
    memmove(v14, v18, v13);
  }
  *(_WORD *)((char *)&v14->__r_.__value_.__l.__data_ + v13) = 46;
  v19 = std::string::append(&v21, "bookmark_time_ms");
  v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  __p.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  mlcore::EntityClass::setPropertyForName(v9, v10, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
}

void sub_20A78ED90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

uint64_t mlcore::CloudKVSEntityPropertyBookmarkSyncTimestamp(mlcore *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&mlcore::CloudKVSEntityPropertyBookmarkSyncTimestamp(void)::once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&mlcore::CloudKVSEntityPropertyBookmarkSyncTimestamp(void)::once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::CloudKVSEntityPropertyBookmarkSyncTimestamp(void)::$_0 &&>>);
  }
  return mlcore::CloudKVSEntityPropertyBookmarkSyncTimestamp(void)::property;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::CloudKVSEntityPropertyBookmarkSyncTimestamp(void)::$_0 &&>>()
{
  uint64_t v0;
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  mlcore::CloudKVSTable **v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  std::string *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  std::string *v19;
  __int128 v20;
  std::string v21;
  std::string __p;
  char v23;
  _QWORD v24[2];

  v0 = operator new();
  v1 = (_QWORD *)mediaplatform::Singleton<mlcore::CloudKVSTable>::sharedInstance();
  v2 = (std::__shared_weak_count *)v1[1];
  v24[0] = *v1;
  v24[1] = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  v5 = (mlcore::CloudKVSTable **)mediaplatform::Singleton<mlcore::CloudKVSTable>::sharedInstance();
  mlcore::CloudKVSTable::bookmarkSyncTimestampColumn(*v5, (uint64_t)&__p);
  mlcore::DatabaseModelProperty<long long>::DatabaseModelProperty(v0, v24, (uint64_t)&__p);
  mlcore::CloudKVSEntityPropertyBookmarkSyncTimestamp(void)::property = v0;
  if (v23 < 0)
    operator delete((void *)__p.__r_.__value_.__l.__size_);
  if (v2)
  {
    v6 = (unint64_t *)&v2->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v8 = mlcore::CloudKVSEntityPropertyBookmarkSyncTimestamp(void)::property;
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  std::string::operator=((std::string *)(v8 + 40), &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v9 = mlcore::TypedEntityClass<mlcore::CloudKVSEntity>::sharedPointer();
  v10 = mlcore::CloudKVSEntityPropertyBookmarkSyncTimestamp(void)::property;
  v11 = mediaplatform::Singleton<mlcore::CloudKVSTable>::sharedInstance();
  v12 = *(_QWORD *)v11;
  if (*(char *)(*(_QWORD *)v11 + 31) >= 0)
    v13 = *(unsigned __int8 *)(*(_QWORD *)v11 + 31);
  else
    v13 = *(_QWORD *)(*(_QWORD *)v11 + 16);
  v14 = &v21;
  std::string::basic_string[abi:ne180100]((uint64_t)&v21, v13 + 1);
  if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v14 = (std::string *)v21.__r_.__value_.__r.__words[0];
  if (v13)
  {
    v17 = *(char **)(v12 + 8);
    v16 = (char *)(v12 + 8);
    v15 = v17;
    if (v16[23] >= 0)
      v18 = v16;
    else
      v18 = v15;
    memmove(v14, v18, v13);
  }
  *(_WORD *)((char *)&v14->__r_.__value_.__l.__data_ + v13) = 46;
  v19 = std::string::append(&v21, "bookmark_sync_timestamp");
  v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  __p.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  mlcore::EntityClass::setPropertyForName(v9, v10, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
}

void sub_20A78F07C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

uint64_t mlcore::CloudKVSEntityPropertyBookmarkSyncRevision(mlcore *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&mlcore::CloudKVSEntityPropertyBookmarkSyncRevision(void)::once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&mlcore::CloudKVSEntityPropertyBookmarkSyncRevision(void)::once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::CloudKVSEntityPropertyBookmarkSyncRevision(void)::$_0 &&>>);
  }
  return mlcore::CloudKVSEntityPropertyBookmarkSyncRevision(void)::property;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::CloudKVSEntityPropertyBookmarkSyncRevision(void)::$_0 &&>>()
{
  uint64_t v0;
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  mlcore::CloudKVSTable **v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  std::string *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  std::string *v19;
  __int128 v20;
  std::string v21;
  std::string __p;
  char v23;
  _QWORD v24[2];

  v0 = operator new();
  v1 = (_QWORD *)mediaplatform::Singleton<mlcore::CloudKVSTable>::sharedInstance();
  v2 = (std::__shared_weak_count *)v1[1];
  v24[0] = *v1;
  v24[1] = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  v5 = (mlcore::CloudKVSTable **)mediaplatform::Singleton<mlcore::CloudKVSTable>::sharedInstance();
  mlcore::CloudKVSTable::bookmarkSyncRevisionColumn(*v5, (uint64_t)&__p);
  mlcore::DatabaseModelProperty<long long>::DatabaseModelProperty(v0, v24, (uint64_t)&__p);
  mlcore::CloudKVSEntityPropertyBookmarkSyncRevision(void)::property = v0;
  if (v23 < 0)
    operator delete((void *)__p.__r_.__value_.__l.__size_);
  if (v2)
  {
    v6 = (unint64_t *)&v2->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v8 = mlcore::CloudKVSEntityPropertyBookmarkSyncRevision(void)::property;
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  std::string::operator=((std::string *)(v8 + 40), &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v9 = mlcore::TypedEntityClass<mlcore::CloudKVSEntity>::sharedPointer();
  v10 = mlcore::CloudKVSEntityPropertyBookmarkSyncRevision(void)::property;
  v11 = mediaplatform::Singleton<mlcore::CloudKVSTable>::sharedInstance();
  v12 = *(_QWORD *)v11;
  if (*(char *)(*(_QWORD *)v11 + 31) >= 0)
    v13 = *(unsigned __int8 *)(*(_QWORD *)v11 + 31);
  else
    v13 = *(_QWORD *)(*(_QWORD *)v11 + 16);
  v14 = &v21;
  std::string::basic_string[abi:ne180100]((uint64_t)&v21, v13 + 1);
  if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v14 = (std::string *)v21.__r_.__value_.__r.__words[0];
  if (v13)
  {
    v17 = *(char **)(v12 + 8);
    v16 = (char *)(v12 + 8);
    v15 = v17;
    if (v16[23] >= 0)
      v18 = v16;
    else
      v18 = v15;
    memmove(v14, v18, v13);
  }
  *(_WORD *)((char *)&v14->__r_.__value_.__l.__data_ + v13) = 46;
  v19 = std::string::append(&v21, "bookmark_sync_revision");
  v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  __p.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  mlcore::EntityClass::setPropertyForName(v9, v10, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
}

void sub_20A78F368(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

void mlcore::CloudKVSEntity::key(mlcore::CloudKVSEntity *this@<X0>, std::string *a2@<X8>)
{
  unint64_t v4;

  v4 = mlcore::CloudKVSEntityPropertyKey(this);
  mlcore::Entity::valueForProperty<std::string>(a2, (uint64_t)this, v4);
}

void mlcore::CloudKVSEntity::setEntityKey(mlcore *a1, uint64_t a2)
{
  std::string::size_type v4;

  v4 = mlcore::CloudKVSEntityPropertyKey(a1);
  mlcore::Entity::setValueForProperty<std::string>((uint64_t)a1, a2, v4);
}

uint64_t mlcore::CloudKVSEntity::playCount(mlcore::CloudKVSEntity *this)
{
  unint64_t v2;

  v2 = mlcore::CloudKVSEntityPropertyPlayCount(this);
  return mlcore::Entity::valueForProperty<long long>((uint64_t)this, v2);
}

_QWORD *mlcore::CloudKVSEntity::setPlayCount(mlcore::CloudKVSEntity *this, uint64_t a2)
{
  _QWORD *result;
  unint64_t v5;

  v5 = mlcore::CloudKVSEntityPropertyPlayCount(this);
  result = std::__hash_table<std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>,std::__unordered_map_hasher<mlcore::ModelProperty<long long> *,std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>,std::hash<mlcore::ModelProperty<long long> *>,std::equal_to<mlcore::ModelProperty<long long> *>,true>,std::__unordered_map_equal<mlcore::ModelProperty<long long> *,std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>,std::equal_to<mlcore::ModelProperty<long long> *>,std::hash<mlcore::ModelProperty<long long> *>,true>,std::allocator<std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>>>::__emplace_unique_key_args<mlcore::ModelProperty<long long> *,std::piecewise_construct_t const&,std::tuple<mlcore::ModelProperty<long long> * const&>,std::tuple<>>((uint64_t)this + 176, v5, &v5);
  result[3] = a2;
  return result;
}

uint64_t mlcore::CloudKVSEntity::hasBeenPlayed(mlcore::CloudKVSEntity *this)
{
  unint64_t HasBeenPlayed;

  HasBeenPlayed = mlcore::CloudKVSEntityPropertyHasBeenPlayed(this);
  return mlcore::Entity::valueForProperty<long long>((uint64_t)this, HasBeenPlayed);
}

_QWORD *mlcore::CloudKVSEntity::setHasBeenPlayed(mlcore::CloudKVSEntity *this, uint64_t a2)
{
  _QWORD *result;
  unint64_t HasBeenPlayed;

  HasBeenPlayed = mlcore::CloudKVSEntityPropertyHasBeenPlayed(this);
  result = std::__hash_table<std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>,std::__unordered_map_hasher<mlcore::ModelProperty<long long> *,std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>,std::hash<mlcore::ModelProperty<long long> *>,std::equal_to<mlcore::ModelProperty<long long> *>,true>,std::__unordered_map_equal<mlcore::ModelProperty<long long> *,std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>,std::equal_to<mlcore::ModelProperty<long long> *>,std::hash<mlcore::ModelProperty<long long> *>,true>,std::allocator<std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>>>::__emplace_unique_key_args<mlcore::ModelProperty<long long> *,std::piecewise_construct_t const&,std::tuple<mlcore::ModelProperty<long long> * const&>,std::tuple<>>((uint64_t)this + 176, HasBeenPlayed, &HasBeenPlayed);
  result[3] = a2;
  return result;
}

double mlcore::CloudKVSEntity::bookmarkTime(mlcore::CloudKVSEntity *this)
{
  unint64_t v2;

  v2 = mlcore::CloudKVSEntityPropertyBookmarkTime(this);
  return mlcore::Entity::valueForProperty<double>((uint64_t)this, v2);
}

double *mlcore::CloudKVSEntity::setBookmarkTime(mlcore::CloudKVSEntity *this, double a2)
{
  double *result;
  unint64_t v5;

  v5 = mlcore::CloudKVSEntityPropertyBookmarkTime(this);
  result = (double *)std::__hash_table<std::__hash_value_type<mlcore::ModelProperty<double> *,double>,std::__unordered_map_hasher<mlcore::ModelProperty<double> *,std::__hash_value_type<mlcore::ModelProperty<double> *,double>,std::hash<mlcore::ModelProperty<double> *>,std::equal_to<mlcore::ModelProperty<double> *>,true>,std::__unordered_map_equal<mlcore::ModelProperty<double> *,std::__hash_value_type<mlcore::ModelProperty<double> *,double>,std::equal_to<mlcore::ModelProperty<double> *>,std::hash<mlcore::ModelProperty<double> *>,true>,std::allocator<std::__hash_value_type<mlcore::ModelProperty<double> *,double>>>::__emplace_unique_key_args<mlcore::ModelProperty<double> *,std::piecewise_construct_t const&,std::tuple<mlcore::ModelProperty<double> * const&>,std::tuple<>>((uint64_t)this + 96, v5, &v5);
  result[3] = a2;
  return result;
}

uint64_t mlcore::CloudKVSEntity::bookmarkSyncTimestamp(mlcore::CloudKVSEntity *this)
{
  unint64_t v2;

  v2 = mlcore::CloudKVSEntityPropertyBookmarkSyncTimestamp(this);
  return mlcore::Entity::valueForProperty<long long>((uint64_t)this, v2);
}

_QWORD *mlcore::CloudKVSEntity::setBookmarkSyncTimestamp(mlcore::CloudKVSEntity *this, uint64_t a2)
{
  _QWORD *result;
  unint64_t v5;

  v5 = mlcore::CloudKVSEntityPropertyBookmarkSyncTimestamp(this);
  result = std::__hash_table<std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>,std::__unordered_map_hasher<mlcore::ModelProperty<long long> *,std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>,std::hash<mlcore::ModelProperty<long long> *>,std::equal_to<mlcore::ModelProperty<long long> *>,true>,std::__unordered_map_equal<mlcore::ModelProperty<long long> *,std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>,std::equal_to<mlcore::ModelProperty<long long> *>,std::hash<mlcore::ModelProperty<long long> *>,true>,std::allocator<std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>>>::__emplace_unique_key_args<mlcore::ModelProperty<long long> *,std::piecewise_construct_t const&,std::tuple<mlcore::ModelProperty<long long> * const&>,std::tuple<>>((uint64_t)this + 176, v5, &v5);
  result[3] = a2;
  return result;
}

uint64_t mlcore::CloudKVSEntity::bookmarkSyncRevision(mlcore::CloudKVSEntity *this)
{
  unint64_t v2;

  v2 = mlcore::CloudKVSEntityPropertyBookmarkSyncRevision(this);
  return mlcore::Entity::valueForProperty<long long>((uint64_t)this, v2);
}

_QWORD *mlcore::CloudKVSEntity::setBookmarkSyncRevision(mlcore::CloudKVSEntity *this, uint64_t a2)
{
  _QWORD *result;
  unint64_t v5;

  v5 = mlcore::CloudKVSEntityPropertyBookmarkSyncRevision(this);
  result = std::__hash_table<std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>,std::__unordered_map_hasher<mlcore::ModelProperty<long long> *,std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>,std::hash<mlcore::ModelProperty<long long> *>,std::equal_to<mlcore::ModelProperty<long long> *>,true>,std::__unordered_map_equal<mlcore::ModelProperty<long long> *,std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>,std::equal_to<mlcore::ModelProperty<long long> *>,std::hash<mlcore::ModelProperty<long long> *>,true>,std::allocator<std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>>>::__emplace_unique_key_args<mlcore::ModelProperty<long long> *,std::piecewise_construct_t const&,std::tuple<mlcore::ModelProperty<long long> * const&>,std::tuple<>>((uint64_t)this + 176, v5, &v5);
  result[3] = a2;
  return result;
}

mlcore::ContainerSeedTable *mlcore::ContainerSeedTable::ContainerSeedTable(mlcore::ContainerSeedTable *this)
{
  int v2;
  uint64_t v3;
  std::string *v4;
  int v5;
  int v6;
  int v7;
  void *v8;
  std::string *v9;
  int v10;
  std::string *v11;
  int v12;
  int v13;
  std::string *v14;
  _BOOL4 v15;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  void *v24[2];
  char v25;
  void (**v26)(mediaplatform::DatabaseColumnBase *__hidden);
  std::string v27;
  int v28;
  uint64_t v29;
  void *v30[2];
  char v31;
  void (**v32)(mediaplatform::DatabaseColumnBase *__hidden);
  std::string v33;
  int v34;
  uint64_t v35;
  int v36;
  void *v37[2];
  char v38;
  void (**v39)(mediaplatform::DatabaseColumnBase *__hidden);
  std::string v40;
  int v41;
  uint64_t v42;
  int v43;
  std::string v44;
  uint64_t (**v45)();
  std::string v46;
  int v47;
  uint64_t v48;
  uint64_t (**v49)();
  std::string v50;
  int v51;
  uint64_t v52;
  int v53;
  uint64_t (**v54)();
  std::string v55;
  int v56;
  uint64_t v57;
  int v58;
  std::string v59;
  void (**v60)(mediaplatform::DatabaseColumnBase *__hidden);
  std::string __p;
  int v62;
  uint64_t v63;
  void (**v64)(mediaplatform::DatabaseColumnBase *__hidden);
  std::string __s;
  int v66;
  uint64_t v67;
  int v68;
  void (**v69)(mediaplatform::DatabaseColumnBase *__hidden);
  std::string v70;
  int v71;
  uint64_t v72;
  int v73;
  void (**v74)(mediaplatform::DatabaseColumnBase *__hidden);
  std::string v75;
  int v76;
  uint64_t v77;
  void (**v78)(mediaplatform::DatabaseColumnBase *__hidden);
  std::string v79;
  int v80;
  uint64_t v81;
  int v82;
  void (**v83)(mediaplatform::DatabaseColumnBase *__hidden);
  std::string v84;
  int v85;
  uint64_t v86;

  std::string::basic_string[abi:ne180100]<0>(&v44, "container_seed");
  std::string::basic_string[abi:ne180100]<0>(v37, "container_pid");
  mlcore::MediaColumn<long long>::MediaColumn((uint64_t)&v39, (uint64_t)v37, 1);
  std::string::basic_string[abi:ne180100]<0>(v30, "item_pid");
  mlcore::MediaColumn<long long>::MediaColumn((uint64_t)&v32, (uint64_t)v30);
  std::string::basic_string[abi:ne180100]<0>(v24, "seed_order");
  mlcore::MediaColumn<int>::MediaColumn((uint64_t)&v26, (uint64_t)v24, 0);
  if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v59, v44.__r_.__value_.__l.__data_, v44.__r_.__value_.__l.__size_);
  else
    v59 = v44;
  if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v55, v40.__r_.__value_.__l.__data_, v40.__r_.__value_.__l.__size_);
  else
    v55 = v40;
  v54 = off_24C335B18;
  v57 = v42;
  v22 = v41;
  v56 = v41;
  v58 = v43;
  if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v50, v33.__r_.__value_.__l.__data_, v33.__r_.__value_.__l.__size_);
  else
    v50 = v33;
  v49 = off_24C335B18;
  v52 = v35;
  v23 = v34;
  v51 = v34;
  v53 = v36;
  if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v46, v27.__r_.__value_.__l.__data_, v27.__r_.__value_.__l.__size_);
  else
    v46 = v27;
  v2 = v28;
  v47 = v28;
  v45 = off_24C335AF8;
  v3 = v29;
  v48 = v29;
  *(_QWORD *)this = &off_24C330F50;
  v4 = (std::string *)((char *)this + 8);
  v5 = SHIBYTE(v59.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v4, v59.__r_.__value_.__l.__data_, v59.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)&v59.__r_.__value_.__l.__data_;
    *((_QWORD *)this + 3) = *((_QWORD *)&v59.__r_.__value_.__l + 2);
  }
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 7) = 0;
  *((_QWORD *)this + 6) = 0;
  *(_QWORD *)this = off_24C3359B8;
  *((_QWORD *)this + 8) = 0;
  *((_QWORD *)this + 9) = 0;
  v69 = off_24C335D90;
  v19 = SHIBYTE(v55.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v70, v55.__r_.__value_.__l.__data_, v55.__r_.__value_.__l.__size_);
  else
    v70 = v55;
  v72 = v57;
  v71 = v22;
  v73 = v58;
  v64 = off_24C335D90;
  v6 = SHIBYTE(v50.__r_.__value_.__r.__words[2]);
  v18 = v5;
  if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&__s, v50.__r_.__value_.__l.__data_, v50.__r_.__value_.__l.__size_);
  else
    __s = v50;
  v67 = v52;
  v66 = v23;
  v68 = v53;
  v60 = off_24C335D90;
  v17 = SHIBYTE(v46.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&__p, v46.__r_.__value_.__l.__data_, v46.__r_.__value_.__l.__size_);
  else
    __p = v46;
  v62 = v2;
  v63 = v3;
  v78 = off_24C335D90;
  v21 = SHIBYTE(__s.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v79, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
  else
    v79 = __s;
  v81 = v52;
  v80 = v23;
  v82 = v53;
  v74 = off_24C335D90;
  v20 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v75, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  else
    v75 = __p;
  v76 = v2;
  v77 = v3;
  v7 = SHIBYTE(v75.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v75.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v84, v75.__r_.__value_.__l.__data_, v75.__r_.__value_.__l.__size_);
  else
    v84 = v75;
  v85 = v2;
  v86 = v3;
  *((_QWORD *)this + 10) = off_24C335D90;
  if (SHIBYTE(v84.__r_.__value_.__r.__words[2]) < 0)
  {
    v8 = (void *)v84.__r_.__value_.__r.__words[0];
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 88), v84.__r_.__value_.__l.__data_, v84.__r_.__value_.__l.__size_);
    *((_DWORD *)this + 28) = v2;
    *((_QWORD *)this + 10) = off_24C335AF8;
    *(_QWORD *)((char *)this + 116) = v3;
    operator delete(v8);
  }
  else
  {
    *(std::string *)((char *)this + 88) = v84;
    *((_DWORD *)this + 28) = v2;
    *((_QWORD *)this + 10) = off_24C335AF8;
    *(_QWORD *)((char *)this + 116) = v3;
    v83 = off_24C335D90;
  }
  *((_QWORD *)this + 16) = off_24C335D90;
  v9 = (std::string *)((char *)this + 136);
  v10 = SHIBYTE(v79.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v79.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v9, v79.__r_.__value_.__l.__data_, v79.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = *(_OWORD *)&v79.__r_.__value_.__l.__data_;
    *((_QWORD *)this + 19) = *((_QWORD *)&v79.__r_.__value_.__l + 2);
  }
  *((_DWORD *)this + 40) = v23;
  *((_QWORD *)this + 16) = off_24C335B18;
  *(_QWORD *)((char *)this + 164) = v52;
  *((_DWORD *)this + 43) = v53;
  if (v7 < 0)
  {
    operator delete(v75.__r_.__value_.__l.__data_);
    if ((v10 & 0x80000000) == 0)
      goto LABEL_42;
  }
  else if ((v10 & 0x80000000) == 0)
  {
    goto LABEL_42;
  }
  operator delete(v79.__r_.__value_.__l.__data_);
LABEL_42:
  *((_QWORD *)this + 22) = off_24C335D90;
  v11 = (std::string *)((char *)this + 184);
  v12 = SHIBYTE(v70.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v70.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v11, v70.__r_.__value_.__l.__data_, v70.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v11->__r_.__value_.__l.__data_ = *(_OWORD *)&v70.__r_.__value_.__l.__data_;
    *((_QWORD *)this + 25) = *((_QWORD *)&v70.__r_.__value_.__l + 2);
  }
  *((_DWORD *)this + 52) = v22;
  *((_QWORD *)this + 22) = off_24C335B18;
  *(_QWORD *)((char *)this + 212) = v72;
  *((_DWORD *)this + 55) = v73;
  if (v20 < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (v21 < 0)
  {
    operator delete(__s.__r_.__value_.__l.__data_);
    if ((v12 & 0x80000000) == 0)
      goto LABEL_51;
  }
  else if ((v12 & 0x80000000) == 0)
  {
    goto LABEL_51;
  }
  operator delete(v70.__r_.__value_.__l.__data_);
LABEL_51:
  v45 = (uint64_t (**)())off_24C335D90;
  if (v17 < 0)
    operator delete(v46.__r_.__value_.__l.__data_);
  v49 = (uint64_t (**)())off_24C335D90;
  if (v6 < 0)
    operator delete(v50.__r_.__value_.__l.__data_);
  if (v19 < 0)
  {
    operator delete(v55.__r_.__value_.__l.__data_);
    if ((v18 & 0x80000000) == 0)
      goto LABEL_57;
  }
  else if ((v18 & 0x80000000) == 0)
  {
    goto LABEL_57;
  }
  operator delete(v59.__r_.__value_.__l.__data_);
LABEL_57:
  *(_QWORD *)this = &off_24C336520;
  *((_QWORD *)this + 28) = off_24C335D90;
  if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 232), v40.__r_.__value_.__l.__data_, v40.__r_.__value_.__l.__size_);
  else
    *(std::string *)((char *)this + 232) = v40;
  v13 = v41;
  *((_QWORD *)this + 28) = off_24C336AC0;
  *((_DWORD *)this + 64) = v13;
  *(_QWORD *)((char *)this + 260) = v42;
  *((_DWORD *)this + 67) = v43;
  *((_QWORD *)this + 34) = off_24C335D90;
  if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 280), v33.__r_.__value_.__l.__data_, v33.__r_.__value_.__l.__size_);
  else
    *(std::string *)((char *)this + 280) = v33;
  *((_DWORD *)this + 76) = v34;
  *(_QWORD *)((char *)this + 308) = v35;
  *((_DWORD *)this + 79) = v36;
  *((_QWORD *)this + 34) = off_24C336AC0;
  *((_QWORD *)this + 40) = off_24C335D90;
  v14 = (std::string *)((char *)this + 328);
  if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v14, v27.__r_.__value_.__l.__data_, v27.__r_.__value_.__l.__size_);
    v15 = (v27.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0;
  }
  else
  {
    v15 = 0;
    *(_OWORD *)&v14->__r_.__value_.__l.__data_ = *(_OWORD *)&v27.__r_.__value_.__l.__data_;
    *((_QWORD *)this + 43) = *((_QWORD *)&v27.__r_.__value_.__l + 2);
  }
  *((_DWORD *)this + 88) = v28;
  *(_QWORD *)((char *)this + 356) = v29;
  *((_QWORD *)this + 40) = off_24C336AA0;
  v26 = off_24C335D90;
  if (v15)
    operator delete(v27.__r_.__value_.__l.__data_);
  if (v25 < 0)
    operator delete(v24[0]);
  v32 = off_24C335D90;
  if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v33.__r_.__value_.__l.__data_);
  if (v31 < 0)
    operator delete(v30[0]);
  v39 = off_24C335D90;
  if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v40.__r_.__value_.__l.__data_);
  if (v38 < 0)
    operator delete(v37[0]);
  if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v44.__r_.__value_.__l.__data_);
  *(_QWORD *)this = &off_24C339A70;
  return this;
}

void sub_20A78FE3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,uint64_t a40,void *a41,uint64_t a42,int a43,__int16 a44,char a45,char a46,uint64_t a47,uint64_t a48,void *a49,uint64_t a50,int a51,__int16 a52,char a53,char a54,uint64_t a55,void *a56,uint64_t a57,int a58,__int16 a59,char a60,char a61,uint64_t a62,uint64_t a63)
{
  void *a64;
  char a69;
  uint64_t v69;
  void **v70;
  void **v71;
  uint64_t v72;

  *(_QWORD *)(v69 + 272) = v72;
  if (*(char *)(v69 + 303) < 0)
    operator delete(*v71);
  *(_QWORD *)(v69 + 224) = off_24C335D90;
  if (*(char *)(v69 + 255) < 0)
    operator delete(*v70);
  mediaplatform::DatabaseTable<long long,long long,int>::~DatabaseTable((mediaplatform::DatabaseTableBase *)v69);
  if (a31 < 0)
    operator delete(__p);
  if (a24 < 0)
    operator delete(a19);
  if (a46 < 0)
    operator delete(a41);
  if (a39 < 0)
    operator delete(a34);
  if (a61 < 0)
    operator delete(a56);
  if (a54 < 0)
    operator delete(a49);
  if (a69 < 0)
    operator delete(a64);
  _Unwind_Resume(a1);
}

void sub_20A79007C()
{
  JUMPOUT(0x20A790028);
}

void sub_20A790084()
{
  JUMPOUT(0x20A790038);
}

void sub_20A79008C()
{
  JUMPOUT(0x20A790054);
}

void sub_20A790094()
{
  JUMPOUT(0x20A790064);
}

void mlcore::ContainerSeedTable::~ContainerSeedTable(mlcore::ContainerSeedTable *this)
{
  mlcore::MediaTable<long long,long long,int>::~MediaTable(this);
  JUMPOUT(0x20BD27AFCLL);
}

uint64_t mediaplatform::DatabaseTable<long long,long long,int>::columnCount()
{
  return 3;
}

void mediaplatform::DatabaseTable<long long,long long,int>::columnNames(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  mediaplatform::ColumnNamesApplier::operator()<long long>((uint64_t)a2, a1 + 176);
  mediaplatform::ColumnNamesApplier::operator()<long long>((uint64_t)a2, a1 + 128);
  mediaplatform::ColumnNamesApplier::operator()<int>((uint64_t)a2, a1 + 80);
}

void sub_20A790120(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void mediaplatform::DatabaseTable<long long,long long,int>::targetColumnExpression(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  __int128 *v3;
  __int128 *v4[3];
  __int128 **v5;

  v3 = (__int128 *)(a1 + 8);
  (*(void (**)(__int128 **__return_ptr))(*(_QWORD *)a1 + 24))(v4);
  std::allocate_shared[abi:ne180100]<mediaplatform::SQLColumnNameExpression,std::allocator<mediaplatform::SQLColumnNameExpression>,std::string &,std::string const&,void>(a2, v4[0], v3);
  v5 = v4;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v5);
}

void sub_20A790198(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void mlcore::MediaTable<long long,long long,int>::~MediaTable(mediaplatform::DatabaseTableBase *this)
{
  *(_QWORD *)this = &off_24C336520;
  *((_QWORD *)this + 40) = off_24C335D90;
  if (*((char *)this + 351) < 0)
    operator delete(*((void **)this + 41));
  *((_QWORD *)this + 34) = off_24C335D90;
  if (*((char *)this + 303) < 0)
    operator delete(*((void **)this + 35));
  *((_QWORD *)this + 28) = off_24C335D90;
  if (*((char *)this + 255) < 0)
    operator delete(*((void **)this + 29));
  *(_QWORD *)this = off_24C3359B8;
  *((_QWORD *)this + 22) = off_24C335D90;
  if (*((char *)this + 207) < 0)
    operator delete(*((void **)this + 23));
  *((_QWORD *)this + 16) = off_24C335D90;
  if (*((char *)this + 159) < 0)
    operator delete(*((void **)this + 17));
  *((_QWORD *)this + 10) = off_24C335D90;
  if (*((char *)this + 111) < 0)
    operator delete(*((void **)this + 11));
  if (*((char *)this + 79) < 0)
    operator delete(*((void **)this + 7));
  mediaplatform::DatabaseTableBase::~DatabaseTableBase((void **)this);
}

void mediaplatform::DatabaseTable<long long,long long,int>::~DatabaseTable(mediaplatform::DatabaseTableBase *this)
{
  *(_QWORD *)this = off_24C3359B8;
  *((_QWORD *)this + 22) = off_24C335D90;
  if (*((char *)this + 207) < 0)
    operator delete(*((void **)this + 23));
  *((_QWORD *)this + 16) = off_24C335D90;
  if (*((char *)this + 159) < 0)
    operator delete(*((void **)this + 17));
  *((_QWORD *)this + 10) = off_24C335D90;
  if (*((char *)this + 111) < 0)
    operator delete(*((void **)this + 11));
  if (*((char *)this + 79) < 0)
    operator delete(*((void **)this + 7));
  mediaplatform::DatabaseTableBase::~DatabaseTableBase((void **)this);
}

{
  *(_QWORD *)this = off_24C3359B8;
  *((_QWORD *)this + 22) = off_24C335D90;
  if (*((char *)this + 207) < 0)
    operator delete(*((void **)this + 23));
  *((_QWORD *)this + 16) = off_24C335D90;
  if (*((char *)this + 159) < 0)
    operator delete(*((void **)this + 17));
  *((_QWORD *)this + 10) = off_24C335D90;
  if (*((char *)this + 111) < 0)
    operator delete(*((void **)this + 11));
  if (*((char *)this + 79) < 0)
    operator delete(*((void **)this + 7));
  mediaplatform::DatabaseTableBase::~DatabaseTableBase((void **)this);
  JUMPOUT(0x20BD27AFCLL);
}

{
  *(_QWORD *)this = off_24C3359B8;
  *((_QWORD *)this + 22) = off_24C335D90;
  if (*((char *)this + 207) < 0)
    operator delete(*((void **)this + 23));
  *((_QWORD *)this + 16) = off_24C335D90;
  if (*((char *)this + 159) < 0)
    operator delete(*((void **)this + 17));
  *((_QWORD *)this + 10) = off_24C335D90;
  if (*((char *)this + 111) < 0)
    operator delete(*((void **)this + 11));
  if (*((char *)this + 79) < 0)
    operator delete(*((void **)this + 7));
  mediaplatform::DatabaseTableBase::~DatabaseTableBase((void **)this);
}

void mlcore::MediaTable<long long,long long,int>::~MediaTable(mediaplatform::DatabaseTableBase *a1)
{
  mlcore::MediaTable<long long,long long,int>::~MediaTable(a1);
  JUMPOUT(0x20BD27AFCLL);
}

void mlcore::ContainerSeedTable::persistentIDColumn(mlcore::ContainerSeedTable *this@<X0>, uint64_t a2@<X8>)
{
  std::string *v4;

  *(_QWORD *)a2 = off_24C335D90;
  v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 255) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 29), *((_QWORD *)this + 30));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 232);
    *(_QWORD *)(a2 + 24) = *((_QWORD *)this + 31);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 64);
  *(_DWORD *)(a2 + 44) = *((_DWORD *)this + 67);
  *(_QWORD *)(a2 + 36) = *(_QWORD *)((char *)this + 260);
  *(_QWORD *)a2 = off_24C336AC0;
}

void mlcore::ContainerSeedTable::itemPersistentIDColumn(mlcore::ContainerSeedTable *this@<X0>, uint64_t a2@<X8>)
{
  std::string *v4;

  *(_QWORD *)a2 = off_24C335D90;
  v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 303) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 35), *((_QWORD *)this + 36));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 280);
    *(_QWORD *)(a2 + 24) = *((_QWORD *)this + 37);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 76);
  *(_DWORD *)(a2 + 44) = *((_DWORD *)this + 79);
  *(_QWORD *)(a2 + 36) = *(_QWORD *)((char *)this + 308);
  *(_QWORD *)a2 = off_24C336AC0;
}

void mlcore::ContainerSeedTable::seedOrderColumn(mlcore::ContainerSeedTable *this@<X0>, uint64_t a2@<X8>)
{
  std::string *v4;

  *(_QWORD *)a2 = off_24C335D90;
  v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 351) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 41), *((_QWORD *)this + 42));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 328);
    *(_QWORD *)(a2 + 24) = *((_QWORD *)this + 43);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 88);
  *(_QWORD *)(a2 + 36) = *(_QWORD *)((char *)this + 356);
  *(_QWORD *)a2 = off_24C336AA0;
}

void mlcore::PodcastEpisode::~PodcastEpisode(mlcore::PodcastEpisode *this)
{
  *(_QWORD *)this = off_24C33A860;
  mlcore::PropertyCacheBase<long long,int,double,std::string,mediaplatform::Data>::~PropertyCacheBase((_QWORD *)this + 1);
}

{
  *(_QWORD *)this = off_24C33A860;
  mlcore::PropertyCacheBase<long long,int,double,std::string,mediaplatform::Data>::~PropertyCacheBase((_QWORD *)this + 1);
  JUMPOUT(0x20BD27AFCLL);
}

double std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::TypedEntityClass<mlcore::PodcastEpisode>::sharedPointer(void)::{lambda(void)#1} &&>>()
{
  uint64_t v0;
  double result;

  v0 = operator new();
  result = 0.0;
  *(_OWORD *)(v0 + 16) = 0u;
  *(_OWORD *)(v0 + 32) = 0u;
  *(_OWORD *)(v0 + 48) = 0u;
  *(_OWORD *)(v0 + 64) = 0u;
  *(_OWORD *)(v0 + 80) = 0u;
  *(_QWORD *)(v0 + 96) = 0;
  *(_DWORD *)(v0 + 104) = 1065353216;
  *(_OWORD *)(v0 + 112) = 0u;
  *(_OWORD *)(v0 + 128) = 0u;
  *(_DWORD *)(v0 + 144) = 1065353216;
  *(_QWORD *)v0 = &off_24C3387B0;
  *(_QWORD *)(v0 + 8) = 850045863;
  mlcore::TypedEntityClass<mlcore::PodcastEpisode>::sharedPointer(void)::__sharedPointer = v0;
  return result;
}

void mlcore::TypedEntityClass<mlcore::PodcastEpisode>::~TypedEntityClass(mlcore::EntityClass *a1)
{
  mlcore::EntityClass::~EntityClass(a1);
  JUMPOUT(0x20BD27AFCLL);
}

uint64_t mlcore::TypedEntityClass<mlcore::PodcastEpisode>::description(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
}

__n128 mlcore::TypedEntityClass<mlcore::PodcastEpisode>::create@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, __n128 *a4@<X8>)
{
  char *v8;
  uint64_t v9;
  unint64_t *v10;
  uint64_t v11;
  __n128 result;
  __n128 v13;
  unint64_t v14[3];
  unint64_t *v15;
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  v8 = (char *)operator new(0x100uLL);
  *((_QWORD *)v8 + 1) = 0;
  *((_QWORD *)v8 + 2) = 0;
  *(_QWORD *)v8 = &off_24C33C980;
  *(_OWORD *)(v8 + 40) = 0u;
  *(_OWORD *)(v8 + 56) = 0u;
  *((_DWORD *)v8 + 18) = 1065353216;
  *((_OWORD *)v8 + 5) = 0u;
  *((_OWORD *)v8 + 6) = 0u;
  *((_DWORD *)v8 + 28) = 1065353216;
  *(_OWORD *)(v8 + 120) = 0u;
  *(_OWORD *)(v8 + 136) = 0u;
  *((_DWORD *)v8 + 38) = 1065353216;
  *((_OWORD *)v8 + 10) = 0u;
  *((_OWORD *)v8 + 11) = 0u;
  *((_DWORD *)v8 + 48) = 1065353216;
  *(_OWORD *)(v8 + 216) = 0u;
  *((_DWORD *)v8 + 58) = 1065353216;
  *((_QWORD *)v8 + 30) = &unk_24C3371E8;
  *((_QWORD *)v8 + 31) = a2;
  *(_OWORD *)(v8 + 200) = 0u;
  v9 = (uint64_t)(v8 + 200);
  *((_QWORD *)v8 + 4) = &off_24C3371C0;
  *((_QWORD *)v8 + 3) = &off_24C337620;
  v13.n128_u64[0] = (unint64_t)(v8 + 24);
  v13.n128_u64[1] = (unint64_t)v8;
  v14[0] = (unint64_t)&off_24C33B140;
  v15 = v14;
  mlcore::PropertyCache::mergePropertiesFromCache((uint64_t)(v8 + 32), a3, (uint64_t)v14);
  v10 = v15;
  if (v15 == v14)
  {
    v11 = 4;
    v10 = v14;
    goto LABEL_5;
  }
  if (v15)
  {
    v11 = 5;
LABEL_5:
    (*(void (**)(void))(*v10 + 8 * v11))();
  }
  v14[0] = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 112))(a1);
  std::__hash_table<std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>,std::__unordered_map_hasher<mlcore::ModelProperty<long long> *,std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>,std::hash<mlcore::ModelProperty<long long> *>,std::equal_to<mlcore::ModelProperty<long long> *>,true>,std::__unordered_map_equal<mlcore::ModelProperty<long long> *,std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>,std::equal_to<mlcore::ModelProperty<long long> *>,std::hash<mlcore::ModelProperty<long long> *>,true>,std::allocator<std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>>>::__emplace_unique_key_args<mlcore::ModelProperty<long long> *,std::piecewise_construct_t const&,std::tuple<mlcore::ModelProperty<long long> * const&>,std::tuple<>>(v9, v14[0], v14)[3] = a2;
  result = v13;
  *a4 = v13;
  return result;
}

void sub_20A790830(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15)
{
  char *v15;
  char *v17;
  uint64_t v18;

  v17 = a15;
  if (a15 == v15)
  {
    v18 = 4;
    v17 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v18 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v17 + 8 * v18))();
LABEL_6:
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t mlcore::TypedEntityClass<mlcore::PodcastEpisode>::name(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
}

uint64_t mlcore::TypedEntityClass<mlcore::PodcastEpisode>::entityType()
{
  return 0;
}

BOOL mlcore::TypedEntityClass<mlcore::PodcastEpisode>::isRevisionTrackable(uint64_t a1)
{
  return (*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1) != -1;
}

uint64_t mlcore::TypedEntityClass<mlcore::PodcastEpisode>::isCloudUpdatable()
{
  return 1;
}

_QWORD *mlcore::TypedEntityClass<mlcore::PodcastEpisode>::databaseTablesToDeleteFrom@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *result;

  v2 = *(_QWORD *)mediaplatform::Singleton<mlcore::ItemExtraTable>::sharedInstance();
  v3 = *(_QWORD *)mediaplatform::Singleton<mlcore::ItemStoreTable>::sharedInstance();
  v4 = *(_QWORD *)mediaplatform::Singleton<mlcore::ItemVideoTable>::sharedInstance();
  v5 = *(_QWORD *)mediaplatform::Singleton<mlcore::ItemPlaybackTable>::sharedInstance();
  v6 = *(_QWORD *)mediaplatform::Singleton<mlcore::ItemSearchTable>::sharedInstance();
  v7 = *(_QWORD *)mediaplatform::Singleton<mlcore::ItemKVSTable>::sharedInstance();
  v8 = *(_QWORD *)mediaplatform::Singleton<mlcore::ItemStatsTable>::sharedInstance();
  a1[1] = 0;
  a1[2] = 0;
  *a1 = 0;
  result = operator new(0x38uLL);
  a1[1] = result + 7;
  a1[2] = result + 7;
  *result = v2;
  result[1] = v3;
  result[2] = v4;
  result[3] = v5;
  result[4] = v6;
  result[5] = v7;
  result[6] = v8;
  *a1 = result;
  return result;
}

_QWORD *mlcore::TypedEntityClass<mlcore::PodcastEpisode>::databaseTablesToInsertInto@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *result;

  v2 = *(_QWORD *)mediaplatform::Singleton<mlcore::ItemExtraTable>::sharedInstance();
  v3 = *(_QWORD *)mediaplatform::Singleton<mlcore::ItemStoreTable>::sharedInstance();
  v4 = *(_QWORD *)mediaplatform::Singleton<mlcore::ItemVideoTable>::sharedInstance();
  v5 = *(_QWORD *)mediaplatform::Singleton<mlcore::ItemPlaybackTable>::sharedInstance();
  v6 = *(_QWORD *)mediaplatform::Singleton<mlcore::ItemSearchTable>::sharedInstance();
  v7 = *(_QWORD *)mediaplatform::Singleton<mlcore::ItemKVSTable>::sharedInstance();
  v8 = *(_QWORD *)mediaplatform::Singleton<mlcore::ItemStatsTable>::sharedInstance();
  a1[1] = 0;
  a1[2] = 0;
  *a1 = 0;
  result = operator new(0x38uLL);
  a1[1] = result + 7;
  a1[2] = result + 7;
  *result = v2;
  result[1] = v3;
  result[2] = v4;
  result[3] = v5;
  result[4] = v6;
  result[5] = v7;
  result[6] = v8;
  *a1 = result;
  return result;
}

uint64_t mlcore::TypedEntityClass<mlcore::PodcastEpisode>::representativeItemPersistentIDProperty()
{
  return 0;
}

uint64_t mlcore::TypedEntityClass<mlcore::PodcastEpisode>::trackForeignPersistentIDProperty()
{
  return 0;
}

uint64_t mlcore::TypedEntityClass<mlcore::PodcastEpisode>::trackForeignOrderingProperty()
{
  return 0;
}

uint64_t mlcore::TypedEntityClass<mlcore::PodcastEpisode>::sectionPropertyForOrderingProperty(mlcore *a1, mlcore *a2)
{
  mlcore *v3;
  mlcore *v4;
  mlcore *v5;
  mlcore *v6;
  mlcore *v7;

  v3 = (mlcore *)mlcore::ItemPropertyTitleOrder(a1);
  if (v3 == a2)
    return mlcore::ItemPropertyTitleOrderSection(v3);
  v4 = (mlcore *)mlcore::ItemPropertyAlbumOrder(v3);
  if (v4 == a2)
    return mlcore::ItemPropertyAlbumOrderSection(v4);
  v5 = (mlcore *)mlcore::ItemPropertyArtistOrder(v4);
  if (v5 == a2)
    return mlcore::ItemPropertyArtistOrderSection(v5);
  v6 = (mlcore *)mlcore::ItemPropertyComposerOrder(v5);
  if (v6 == a2)
    return mlcore::ItemPropertyComposerOrderSection(v6);
  v7 = (mlcore *)mlcore::ItemPropertyGenreOrder(v6);
  if (v7 == a2)
    return mlcore::ItemPropertyGenreOrderSection(v7);
  else
    return 0;
}

void std::__shared_ptr_emplace<mlcore::PodcastEpisode>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C33C980;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<mlcore::PodcastEpisode>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C33C980;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x20BD27AFCLL);
}

uint64_t std::__shared_ptr_emplace<mlcore::PodcastEpisode>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

double mlcore::PodcastEpisode::PodcastEpisode(mlcore::PodcastEpisode *this, uint64_t a2)
{
  double result;

  result = 0.0;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_DWORD *)this + 12) = 1065353216;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *((_DWORD *)this + 22) = 1065353216;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_DWORD *)this + 32) = 1065353216;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 152) = 0u;
  *((_DWORD *)this + 42) = 1065353216;
  *((_OWORD *)this + 11) = 0u;
  *((_OWORD *)this + 12) = 0u;
  *((_DWORD *)this + 52) = 1065353216;
  *((_QWORD *)this + 27) = &unk_24C3371E8;
  *((_QWORD *)this + 28) = a2;
  *(_QWORD *)this = &off_24C337620;
  *((_QWORD *)this + 1) = &off_24C3371C0;
  return result;
}

{
  double result;

  result = 0.0;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_DWORD *)this + 12) = 1065353216;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *((_DWORD *)this + 22) = 1065353216;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_DWORD *)this + 32) = 1065353216;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 152) = 0u;
  *((_DWORD *)this + 42) = 1065353216;
  *((_OWORD *)this + 11) = 0u;
  *((_OWORD *)this + 12) = 0u;
  *((_DWORD *)this + 52) = 1065353216;
  *((_QWORD *)this + 27) = &unk_24C3371E8;
  *((_QWORD *)this + 28) = a2;
  *(_QWORD *)this = &off_24C337620;
  *((_QWORD *)this + 1) = &off_24C3371C0;
  return result;
}

void mlcore::Artist::~Artist(mlcore::Artist *this)
{
  *(_QWORD *)this = off_24C33A860;
  mlcore::PropertyCacheBase<long long,int,double,std::string,mediaplatform::Data>::~PropertyCacheBase((_QWORD *)this + 1);
}

{
  *(_QWORD *)this = off_24C33A860;
  mlcore::PropertyCacheBase<long long,int,double,std::string,mediaplatform::Data>::~PropertyCacheBase((_QWORD *)this + 1);
  JUMPOUT(0x20BD27AFCLL);
}

{
  *(_QWORD *)this = off_24C33A860;
  mlcore::PropertyCacheBase<long long,int,double,std::string,mediaplatform::Data>::~PropertyCacheBase((_QWORD *)this + 1);
}

double std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::TypedEntityClass<mlcore::Artist>::sharedPointer(void)::{lambda(void)#1} &&>>()
{
  uint64_t v0;
  double result;

  v0 = operator new();
  result = 0.0;
  *(_OWORD *)(v0 + 16) = 0u;
  *(_OWORD *)(v0 + 32) = 0u;
  *(_OWORD *)(v0 + 48) = 0u;
  *(_OWORD *)(v0 + 64) = 0u;
  *(_OWORD *)(v0 + 80) = 0u;
  *(_QWORD *)(v0 + 96) = 0;
  *(_DWORD *)(v0 + 104) = 1065353216;
  *(_OWORD *)(v0 + 112) = 0u;
  *(_OWORD *)(v0 + 128) = 0u;
  *(_DWORD *)(v0 + 144) = 1065353216;
  *(_QWORD *)v0 = &off_24C338E40;
  *(_QWORD *)(v0 + 8) = 850045863;
  mlcore::TypedEntityClass<mlcore::Artist>::sharedPointer(void)::__sharedPointer = v0;
  return result;
}

void mlcore::TypedEntityClass<mlcore::Artist>::~TypedEntityClass(mlcore::EntityClass *a1)
{
  mlcore::EntityClass::~EntityClass(a1);
  JUMPOUT(0x20BD27AFCLL);
}

uint64_t mlcore::TypedEntityClass<mlcore::Artist>::description(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
}

double mlcore::TypedEntityClass<mlcore::Artist>::create@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, _OWORD *a4@<X8>)
{
  double v8;
  unint64_t *v9;
  uint64_t v10;
  double result;
  double v12[3];
  unint64_t v13[3];
  unint64_t *v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  std::allocate_shared[abi:ne180100]<mlcore::Artist,std::allocator<mlcore::Artist>,long long &,void>(v12, a2);
  v8 = v12[0];
  v13[0] = (unint64_t)&off_24C33B140;
  v14 = v13;
  mlcore::PropertyCache::mergePropertiesFromCache(*(_QWORD *)&v12[0] + 8, a3, (uint64_t)v13);
  v9 = v14;
  if (v14 == v13)
  {
    v10 = 4;
    v9 = v13;
    goto LABEL_5;
  }
  if (v14)
  {
    v10 = 5;
LABEL_5:
    (*(void (**)(void))(*v9 + 8 * v10))();
  }
  v13[0] = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 112))(a1);
  std::__hash_table<std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>,std::__unordered_map_hasher<mlcore::ModelProperty<long long> *,std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>,std::hash<mlcore::ModelProperty<long long> *>,std::equal_to<mlcore::ModelProperty<long long> *>,true>,std::__unordered_map_equal<mlcore::ModelProperty<long long> *,std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>,std::equal_to<mlcore::ModelProperty<long long> *>,std::hash<mlcore::ModelProperty<long long> *>,true>,std::allocator<std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>>>::__emplace_unique_key_args<mlcore::ModelProperty<long long> *,std::piecewise_construct_t const&,std::tuple<mlcore::ModelProperty<long long> * const&>,std::tuple<>>(*(_QWORD *)&v8 + 176, v13[0], v13)[3] = a2;
  result = v12[0];
  *a4 = *(_OWORD *)v12;
  return result;
}

void sub_20A790DA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15)
{
  char *v15;
  char *v17;
  uint64_t v18;

  v17 = a15;
  if (a15 == v15)
  {
    v18 = 4;
    v17 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v18 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v17 + 8 * v18))();
LABEL_6:
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

BOOL mlcore::TypedEntityClass<mlcore::Artist>::isRevisionTrackable(uint64_t a1)
{
  return (*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1) != -1;
}

uint64_t mlcore::TypedEntityClass<mlcore::Artist>::isCloudUpdatable()
{
  return 0;
}

void mlcore::TypedEntityClass<mlcore::Artist>::databaseTablesToDeleteFrom(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

void mlcore::TypedEntityClass<mlcore::Artist>::databaseTablesToInsertInto(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ArtistPropertyOrderSection(void)::$_0 &&>>()
{
  uint64_t v0;
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  mlcore::AlbumArtistTable **v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  std::string *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  std::string *v19;
  __int128 v20;
  std::string v21;
  std::string __p;
  char v23;
  _QWORD v24[2];

  v0 = operator new();
  v1 = (_QWORD *)mediaplatform::Singleton<mlcore::AlbumArtistTable>::sharedInstance();
  v2 = (std::__shared_weak_count *)v1[1];
  v24[0] = *v1;
  v24[1] = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  v5 = (mlcore::AlbumArtistTable **)mediaplatform::Singleton<mlcore::AlbumArtistTable>::sharedInstance();
  mlcore::AlbumArtistTable::sortOrderSectionColumn(*v5, (uint64_t)&__p);
  mlcore::DatabaseModelProperty<int>::DatabaseModelProperty(v0, v24, (uint64_t)&__p);
  mlcore::ArtistPropertyOrderSection(void)::property = v0;
  if (v23 < 0)
    operator delete((void *)__p.__r_.__value_.__l.__size_);
  if (v2)
  {
    v6 = (unint64_t *)&v2->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v8 = mlcore::ArtistPropertyOrderSection(void)::property;
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  std::string::operator=((std::string *)(v8 + 40), &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v9 = mlcore::TypedEntityClass<mlcore::Artist>::sharedPointer();
  v10 = mlcore::ArtistPropertyOrderSection(void)::property;
  v11 = mediaplatform::Singleton<mlcore::AlbumArtistTable>::sharedInstance();
  v12 = *(_QWORD *)v11;
  if (*(char *)(*(_QWORD *)v11 + 31) >= 0)
    v13 = *(unsigned __int8 *)(*(_QWORD *)v11 + 31);
  else
    v13 = *(_QWORD *)(*(_QWORD *)v11 + 16);
  v14 = &v21;
  std::string::basic_string[abi:ne180100]((uint64_t)&v21, v13 + 1);
  if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v14 = (std::string *)v21.__r_.__value_.__r.__words[0];
  if (v13)
  {
    v17 = *(char **)(v12 + 8);
    v16 = (char *)(v12 + 8);
    v15 = v17;
    if (v16[23] >= 0)
      v18 = v16;
    else
      v18 = v15;
    memmove(v14, v18, v13);
  }
  *(_WORD *)((char *)&v14->__r_.__value_.__l.__data_ + v13) = 46;
  v19 = std::string::append(&v21, "sortOrderSection");
  v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  __p.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  mlcore::EntityClass::setPropertyForName(v9, v10, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
}

void sub_20A791018(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

mlcore::AlbumArtistTable *_ZNSt3__115allocate_sharedB8ne180100IN6mlcore16AlbumArtistTableENS_9allocatorIS2_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(mlcore::AlbumArtistTable **a1)
{
  _QWORD *v2;
  mlcore::AlbumArtistTable *result;

  v2 = operator new(0x868uLL);
  v2[1] = 0;
  v2[2] = 0;
  *v2 = &off_24C33CBB0;
  result = mlcore::AlbumArtistTable::AlbumArtistTable((mlcore::AlbumArtistTable *)(v2 + 3));
  *a1 = result;
  a1[1] = (mlcore::AlbumArtistTable *)v2;
  return result;
}

void sub_20A791114(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<mlcore::AlbumArtistTable>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C33CBB0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<mlcore::AlbumArtistTable>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C33CBB0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x20BD27AFCLL);
}

uint64_t std::__shared_ptr_emplace<mlcore::AlbumArtistTable>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ArtistPropertyHasName(void)::$_0 &&>>()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  std::__shared_weak_count *v3;
  unint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  std::string __str;

  v0 = operator new();
  v1 = mlcore::ArtistPropertyOrder((mlcore *)v0);
  v2 = (char *)operator new(0x48uLL);
  v3 = (std::__shared_weak_count *)v2;
  *(_OWORD *)(v2 + 8) = 0u;
  v4 = (unint64_t *)(v2 + 8);
  *(_QWORD *)v2 = &off_24C33CE88;
  *((_QWORD *)v2 + 4) = v1;
  *((_QWORD *)v2 + 5) = 0x100000000;
  *((_QWORD *)v2 + 3) = &unk_24C339CA8;
  *((_QWORD *)v2 + 6) = 0;
  *(_OWORD *)(v2 + 56) = 0u;
  *(_OWORD *)(v0 + 16) = 0u;
  *(_OWORD *)(v0 + 32) = 0u;
  *(_OWORD *)(v0 + 48) = 0u;
  *(_QWORD *)v0 = &off_24C3398B8;
  *(_QWORD *)(v0 + 64) = v2 + 24;
  *(_QWORD *)(v0 + 72) = v2;
  do
    v5 = __ldxr(v4);
  while (__stxr(v5 + 1, v4));
  mlcore::ArtistPropertyHasName(void)::property = v0;
  do
    v6 = __ldaxr(v4);
  while (__stlxr(v6 - 1, v4));
  if (!v6)
  {
    (*(void (**)(char *))(*(_QWORD *)v2 + 16))(v2);
    std::__shared_weak_count::__release_weak(v3);
  }
  v7 = mlcore::ArtistPropertyHasName(void)::property;
  std::string::basic_string[abi:ne180100]<0>(&__str, "has_name");
  std::string::operator=((std::string *)(v7 + 40), &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  v8 = mlcore::TypedEntityClass<mlcore::Artist>::sharedPointer();
  v9 = mlcore::ArtistPropertyHasName(void)::property;
  std::string::basic_string[abi:ne180100]<0>(&__str, "hasName");
  mlcore::EntityClass::setPropertyForName(v8, v9, &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
}

void sub_20A7912E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ArtistPropertyOrder(void)::$_0 &&>>()
{
  uint64_t v0;
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  mlcore::AlbumArtistTable **v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  std::string *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  std::string *v19;
  __int128 v20;
  std::string v21;
  std::string __p;
  char v23;
  _QWORD v24[2];

  v0 = operator new();
  v1 = (_QWORD *)mediaplatform::Singleton<mlcore::AlbumArtistTable>::sharedInstance();
  v2 = (std::__shared_weak_count *)v1[1];
  v24[0] = *v1;
  v24[1] = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  v5 = (mlcore::AlbumArtistTable **)mediaplatform::Singleton<mlcore::AlbumArtistTable>::sharedInstance();
  mlcore::AlbumArtistTable::sortOrderColumn(*v5, (uint64_t)&__p);
  mlcore::DatabaseModelProperty<long long>::DatabaseModelProperty(v0, v24, (uint64_t)&__p);
  mlcore::ArtistPropertyOrder(void)::property = v0;
  if (v23 < 0)
    operator delete((void *)__p.__r_.__value_.__l.__size_);
  if (v2)
  {
    v6 = (unint64_t *)&v2->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v8 = mlcore::ArtistPropertyOrder(void)::property;
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  std::string::operator=((std::string *)(v8 + 40), &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v9 = mlcore::TypedEntityClass<mlcore::Artist>::sharedPointer();
  v10 = mlcore::ArtistPropertyOrder(void)::property;
  v11 = mediaplatform::Singleton<mlcore::AlbumArtistTable>::sharedInstance();
  v12 = *(_QWORD *)v11;
  if (*(char *)(*(_QWORD *)v11 + 31) >= 0)
    v13 = *(unsigned __int8 *)(*(_QWORD *)v11 + 31);
  else
    v13 = *(_QWORD *)(*(_QWORD *)v11 + 16);
  v14 = &v21;
  std::string::basic_string[abi:ne180100]((uint64_t)&v21, v13 + 1);
  if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v14 = (std::string *)v21.__r_.__value_.__r.__words[0];
  if (v13)
  {
    v17 = *(char **)(v12 + 8);
    v16 = (char *)(v12 + 8);
    v15 = v17;
    if (v16[23] >= 0)
      v18 = v16;
    else
      v18 = v15;
    memmove(v14, v18, v13);
  }
  *(_WORD *)((char *)&v14->__r_.__value_.__l.__data_ + v13) = 46;
  v19 = std::string::append(&v21, "sortOrder");
  v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  __p.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  mlcore::EntityClass::setPropertyForName(v9, v10, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
}

void sub_20A7914F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ArtistPropertyRepresentativeItemPersistentID(void)::$_0 &&>>()
{
  uint64_t v0;
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  mlcore::AlbumArtistTable **v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  std::string *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  std::string *v19;
  __int128 v20;
  std::string v21;
  std::string __p;
  char v23;
  _QWORD v24[2];

  v0 = operator new();
  v1 = (_QWORD *)mediaplatform::Singleton<mlcore::AlbumArtistTable>::sharedInstance();
  v2 = (std::__shared_weak_count *)v1[1];
  v24[0] = *v1;
  v24[1] = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  v5 = (mlcore::AlbumArtistTable **)mediaplatform::Singleton<mlcore::AlbumArtistTable>::sharedInstance();
  mlcore::AlbumArtistTable::representativeItemPersistentIDColumn(*v5, (uint64_t)&__p);
  mlcore::DatabaseModelProperty<long long>::DatabaseModelProperty(v0, v24, (uint64_t)&__p);
  mlcore::ArtistPropertyRepresentativeItemPersistentID(void)::property = v0;
  if (v23 < 0)
    operator delete((void *)__p.__r_.__value_.__l.__size_);
  if (v2)
  {
    v6 = (unint64_t *)&v2->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v8 = mlcore::ArtistPropertyRepresentativeItemPersistentID(void)::property;
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  std::string::operator=((std::string *)(v8 + 40), &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v9 = mlcore::TypedEntityClass<mlcore::Artist>::sharedPointer();
  v10 = mlcore::ArtistPropertyRepresentativeItemPersistentID(void)::property;
  v11 = mediaplatform::Singleton<mlcore::AlbumArtistTable>::sharedInstance();
  v12 = *(_QWORD *)v11;
  if (*(char *)(*(_QWORD *)v11 + 31) >= 0)
    v13 = *(unsigned __int8 *)(*(_QWORD *)v11 + 31);
  else
    v13 = *(_QWORD *)(*(_QWORD *)v11 + 16);
  v14 = &v21;
  std::string::basic_string[abi:ne180100]((uint64_t)&v21, v13 + 1);
  if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v14 = (std::string *)v21.__r_.__value_.__r.__words[0];
  if (v13)
  {
    v17 = *(char **)(v12 + 8);
    v16 = (char *)(v12 + 8);
    v15 = v17;
    if (v16[23] >= 0)
      v18 = v16;
    else
      v18 = v15;
    memmove(v14, v18, v13);
  }
  *(_WORD *)((char *)&v14->__r_.__value_.__l.__data_ + v13) = 46;
  v19 = std::string::append(&v21, "representativeItem");
  v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  __p.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  mlcore::EntityClass::setPropertyForName(v9, v10, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
}

void sub_20A791788(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ArtistPropertyPersistentID(void)::$_0 &&>>()
{
  uint64_t v0;
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  mlcore::AlbumArtistTable **v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  std::string *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  std::string *v19;
  __int128 v20;
  std::string v21;
  std::string __p;
  char v23;
  _QWORD v24[2];

  v0 = operator new();
  v1 = (_QWORD *)mediaplatform::Singleton<mlcore::AlbumArtistTable>::sharedInstance();
  v2 = (std::__shared_weak_count *)v1[1];
  v24[0] = *v1;
  v24[1] = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  v5 = (mlcore::AlbumArtistTable **)mediaplatform::Singleton<mlcore::AlbumArtistTable>::sharedInstance();
  mlcore::AlbumArtistTable::persistentIDColumn(*v5, (uint64_t)&__p);
  mlcore::DatabaseModelProperty<long long>::DatabaseModelProperty(v0, v24, (uint64_t)&__p);
  mlcore::ArtistPropertyPersistentID(void)::property = v0;
  if (v23 < 0)
    operator delete((void *)__p.__r_.__value_.__l.__size_);
  if (v2)
  {
    v6 = (unint64_t *)&v2->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v8 = mlcore::ArtistPropertyPersistentID(void)::property;
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  std::string::operator=((std::string *)(v8 + 40), &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v9 = mlcore::TypedEntityClass<mlcore::Artist>::sharedPointer();
  v10 = mlcore::ArtistPropertyPersistentID(void)::property;
  v11 = mediaplatform::Singleton<mlcore::AlbumArtistTable>::sharedInstance();
  v12 = *(_QWORD *)v11;
  if (*(char *)(*(_QWORD *)v11 + 31) >= 0)
    v13 = *(unsigned __int8 *)(*(_QWORD *)v11 + 31);
  else
    v13 = *(_QWORD *)(*(_QWORD *)v11 + 16);
  v14 = &v21;
  std::string::basic_string[abi:ne180100]((uint64_t)&v21, v13 + 1);
  if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v14 = (std::string *)v21.__r_.__value_.__r.__words[0];
  if (v13)
  {
    v17 = *(char **)(v12 + 8);
    v16 = (char *)(v12 + 8);
    v15 = v17;
    if (v16[23] >= 0)
      v18 = v16;
    else
      v18 = v15;
    memmove(v14, v18, v13);
  }
  *(_WORD *)((char *)&v14->__r_.__value_.__l.__data_ + v13) = 46;
  v19 = std::string::append(&v21, "persistentID");
  v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  __p.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  mlcore::EntityClass::setPropertyForName(v9, v10, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
}

void sub_20A791A18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

char *std::allocate_shared[abi:ne180100]<mlcore::Artist,std::allocator<mlcore::Artist>,long long &,void>(_QWORD *a1, uint64_t a2)
{
  char *v4;
  char *result;

  v4 = (char *)operator new(0x100uLL);
  *((_QWORD *)v4 + 1) = 0;
  *((_QWORD *)v4 + 2) = 0;
  *(_QWORD *)v4 = &off_24C33D3C8;
  *(_OWORD *)(v4 + 40) = 0u;
  *(_OWORD *)(v4 + 56) = 0u;
  *((_DWORD *)v4 + 18) = 1065353216;
  *((_OWORD *)v4 + 5) = 0u;
  *((_OWORD *)v4 + 6) = 0u;
  *((_DWORD *)v4 + 28) = 1065353216;
  *(_OWORD *)(v4 + 120) = 0u;
  *(_OWORD *)(v4 + 136) = 0u;
  *((_DWORD *)v4 + 38) = 1065353216;
  *((_OWORD *)v4 + 10) = 0u;
  *((_OWORD *)v4 + 11) = 0u;
  *((_DWORD *)v4 + 48) = 1065353216;
  *(_OWORD *)(v4 + 200) = 0u;
  *(_OWORD *)(v4 + 216) = 0u;
  *((_DWORD *)v4 + 58) = 1065353216;
  *((_QWORD *)v4 + 4) = &off_24C3371C0;
  *((_QWORD *)v4 + 30) = &unk_24C3371E8;
  *((_QWORD *)v4 + 31) = a2;
  a1[1] = v4;
  *((_QWORD *)v4 + 3) = &off_24C33A810;
  result = v4 + 24;
  *a1 = result;
  return result;
}

void std::__shared_ptr_emplace<mlcore::Artist>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C33D3C8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<mlcore::Artist>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C33D3C8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x20BD27AFCLL);
}

uint64_t std::__shared_ptr_emplace<mlcore::Artist>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ArtistPropertyName(void)::$_0 &&>>()
{
  uint64_t v0;
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  mlcore::AlbumArtistTable **v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  std::string *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  std::string *v19;
  __int128 v20;
  std::string v21;
  std::string __str;
  _QWORD v23[2];

  v0 = operator new();
  v1 = (_QWORD *)mediaplatform::Singleton<mlcore::AlbumArtistTable>::sharedInstance();
  v2 = (std::__shared_weak_count *)v1[1];
  v23[0] = *v1;
  v23[1] = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  v5 = (mlcore::AlbumArtistTable **)mediaplatform::Singleton<mlcore::AlbumArtistTable>::sharedInstance();
  mlcore::AlbumArtistTable::nameColumn(*v5, (uint64_t)&__str);
  mlcore::DatabaseModelProperty<std::string>::DatabaseModelProperty(v0, v23, (uint64_t)&__str);
  mlcore::ArtistPropertyName(void)::property = v0;
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&__str);
  if (v2)
  {
    v6 = (unint64_t *)&v2->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v8 = mlcore::ArtistPropertyName(void)::property;
  std::string::basic_string[abi:ne180100]<0>(&__str, "");
  std::string::operator=((std::string *)(v8 + 40), &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  v9 = mlcore::TypedEntityClass<mlcore::Artist>::sharedPointer();
  v10 = mlcore::ArtistPropertyName(void)::property;
  v11 = mediaplatform::Singleton<mlcore::AlbumArtistTable>::sharedInstance();
  v12 = *(_QWORD *)v11;
  if (*(char *)(*(_QWORD *)v11 + 31) >= 0)
    v13 = *(unsigned __int8 *)(*(_QWORD *)v11 + 31);
  else
    v13 = *(_QWORD *)(*(_QWORD *)v11 + 16);
  v14 = &v21;
  std::string::basic_string[abi:ne180100]((uint64_t)&v21, v13 + 1);
  if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v14 = (std::string *)v21.__r_.__value_.__r.__words[0];
  if (v13)
  {
    v17 = *(char **)(v12 + 8);
    v16 = (char *)(v12 + 8);
    v15 = v17;
    if (v16[23] >= 0)
      v18 = v16;
    else
      v18 = v15;
    memmove(v14, v18, v13);
  }
  *(_WORD *)((char *)&v14->__r_.__value_.__l.__data_ + v13) = 46;
  v19 = std::string::append(&v21, "name");
  v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  __str.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  mlcore::EntityClass::setPropertyForName(v9, v10, &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
}

void sub_20A791D8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

uint64_t mlcore::ArtistPropertySortName(mlcore *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&mlcore::ArtistPropertySortName(void)::once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&mlcore::ArtistPropertySortName(void)::once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ArtistPropertySortName(void)::$_0 &&>>);
  }
  return mlcore::ArtistPropertySortName(void)::property;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ArtistPropertySortName(void)::$_0 &&>>()
{
  uint64_t v0;
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  mlcore::AlbumArtistTable **v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  std::string *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  std::string *v19;
  __int128 v20;
  std::string v21;
  std::string __str;
  _QWORD v23[2];

  v0 = operator new();
  v1 = (_QWORD *)mediaplatform::Singleton<mlcore::AlbumArtistTable>::sharedInstance();
  v2 = (std::__shared_weak_count *)v1[1];
  v23[0] = *v1;
  v23[1] = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  v5 = (mlcore::AlbumArtistTable **)mediaplatform::Singleton<mlcore::AlbumArtistTable>::sharedInstance();
  mlcore::AlbumArtistTable::sortNameColumn(*v5, (uint64_t)&__str);
  mlcore::DatabaseModelProperty<std::string>::DatabaseModelProperty(v0, v23, (uint64_t)&__str);
  mlcore::ArtistPropertySortName(void)::property = v0;
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&__str);
  if (v2)
  {
    v6 = (unint64_t *)&v2->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v8 = mlcore::ArtistPropertySortName(void)::property;
  std::string::basic_string[abi:ne180100]<0>(&__str, "");
  std::string::operator=((std::string *)(v8 + 40), &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  v9 = mlcore::TypedEntityClass<mlcore::Artist>::sharedPointer();
  v10 = mlcore::ArtistPropertySortName(void)::property;
  v11 = mediaplatform::Singleton<mlcore::AlbumArtistTable>::sharedInstance();
  v12 = *(_QWORD *)v11;
  if (*(char *)(*(_QWORD *)v11 + 31) >= 0)
    v13 = *(unsigned __int8 *)(*(_QWORD *)v11 + 31);
  else
    v13 = *(_QWORD *)(*(_QWORD *)v11 + 16);
  v14 = &v21;
  std::string::basic_string[abi:ne180100]((uint64_t)&v21, v13 + 1);
  if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v14 = (std::string *)v21.__r_.__value_.__r.__words[0];
  if (v13)
  {
    v17 = *(char **)(v12 + 8);
    v16 = (char *)(v12 + 8);
    v15 = v17;
    if (v16[23] >= 0)
      v18 = v16;
    else
      v18 = v15;
    memmove(v14, v18, v13);
  }
  *(_WORD *)((char *)&v14->__r_.__value_.__l.__data_ + v13) = 46;
  v19 = std::string::append(&v21, "sortName");
  v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  __str.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  mlcore::EntityClass::setPropertyForName(v9, v10, &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
}

void sub_20A792068(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ArtistPropertyGroupingKey(void)::$_0 &&>>()
{
  uint64_t v0;
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  mlcore::AlbumArtistTable **v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  std::string *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  std::string *v19;
  __int128 v20;
  std::string v21;
  std::string __str;
  _QWORD v23[2];

  v0 = operator new();
  v1 = (_QWORD *)mediaplatform::Singleton<mlcore::AlbumArtistTable>::sharedInstance();
  v2 = (std::__shared_weak_count *)v1[1];
  v23[0] = *v1;
  v23[1] = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  v5 = (mlcore::AlbumArtistTable **)mediaplatform::Singleton<mlcore::AlbumArtistTable>::sharedInstance();
  mlcore::AlbumArtistTable::groupingKeyColumn(*v5, (uint64_t)&__str);
  mlcore::DatabaseModelProperty<mediaplatform::Data>::DatabaseModelProperty(v0, v23, (uint64_t)&__str);
  mlcore::ArtistPropertyGroupingKey(void)::property = v0;
  mediaplatform::DatabaseColumn<mediaplatform::Data>::~DatabaseColumn((uint64_t)&__str);
  if (v2)
  {
    v6 = (unint64_t *)&v2->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v8 = mlcore::ArtistPropertyGroupingKey(void)::property;
  std::string::basic_string[abi:ne180100]<0>(&__str, "");
  std::string::operator=((std::string *)(v8 + 40), &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  v9 = mlcore::TypedEntityClass<mlcore::Artist>::sharedPointer();
  v10 = mlcore::ArtistPropertyGroupingKey(void)::property;
  v11 = mediaplatform::Singleton<mlcore::AlbumArtistTable>::sharedInstance();
  v12 = *(_QWORD *)v11;
  if (*(char *)(*(_QWORD *)v11 + 31) >= 0)
    v13 = *(unsigned __int8 *)(*(_QWORD *)v11 + 31);
  else
    v13 = *(_QWORD *)(*(_QWORD *)v11 + 16);
  v14 = &v21;
  std::string::basic_string[abi:ne180100]((uint64_t)&v21, v13 + 1);
  if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v14 = (std::string *)v21.__r_.__value_.__r.__words[0];
  if (v13)
  {
    v17 = *(char **)(v12 + 8);
    v16 = (char *)(v12 + 8);
    v15 = v17;
    if (v16[23] >= 0)
      v18 = v16;
    else
      v18 = v15;
    memmove(v14, v18, v13);
  }
  *(_WORD *)((char *)&v14->__r_.__value_.__l.__data_ + v13) = 46;
  v19 = std::string::append(&v21, "artistGroupingKey");
  v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  __str.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  mlcore::EntityClass::setPropertyForName(v9, v10, &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
}

void sub_20A7922E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ArtistPropertyStoreID(void)::$_0 &&>>()
{
  uint64_t v0;
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  mlcore::AlbumArtistTable **v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  std::string *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  std::string *v19;
  __int128 v20;
  std::string v21;
  std::string __p;
  char v23;
  _QWORD v24[2];

  v0 = operator new();
  v1 = (_QWORD *)mediaplatform::Singleton<mlcore::AlbumArtistTable>::sharedInstance();
  v2 = (std::__shared_weak_count *)v1[1];
  v24[0] = *v1;
  v24[1] = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  v5 = (mlcore::AlbumArtistTable **)mediaplatform::Singleton<mlcore::AlbumArtistTable>::sharedInstance();
  mlcore::AlbumArtistTable::storeIDColumn(*v5, (uint64_t)&__p);
  mlcore::DatabaseModelProperty<long long>::DatabaseModelProperty(v0, v24, (uint64_t)&__p);
  mlcore::ArtistPropertyStoreID(void)::property = v0;
  if (v23 < 0)
    operator delete((void *)__p.__r_.__value_.__l.__size_);
  if (v2)
  {
    v6 = (unint64_t *)&v2->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v8 = mlcore::ArtistPropertyStoreID(void)::property;
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  std::string::operator=((std::string *)(v8 + 40), &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v9 = mlcore::TypedEntityClass<mlcore::Artist>::sharedPointer();
  v10 = mlcore::ArtistPropertyStoreID(void)::property;
  v11 = mediaplatform::Singleton<mlcore::AlbumArtistTable>::sharedInstance();
  v12 = *(_QWORD *)v11;
  if (*(char *)(*(_QWORD *)v11 + 31) >= 0)
    v13 = *(unsigned __int8 *)(*(_QWORD *)v11 + 31);
  else
    v13 = *(_QWORD *)(*(_QWORD *)v11 + 16);
  v14 = &v21;
  std::string::basic_string[abi:ne180100]((uint64_t)&v21, v13 + 1);
  if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v14 = (std::string *)v21.__r_.__value_.__r.__words[0];
  if (v13)
  {
    v17 = *(char **)(v12 + 8);
    v16 = (char *)(v12 + 8);
    v15 = v17;
    if (v16[23] >= 0)
      v18 = v16;
    else
      v18 = v15;
    memmove(v14, v18, v13);
  }
  *(_WORD *)((char *)&v14->__r_.__value_.__l.__data_ + v13) = 46;
  v19 = std::string::append(&v21, "storeID");
  v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  __p.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  mlcore::EntityClass::setPropertyForName(v9, v10, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
}

void sub_20A792570(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ArtistPropertyClassicalExperienceAvailable(void)::$_0 &&>>()
{
  uint64_t v0;
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  mlcore::AlbumArtistTable **v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  std::string *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  std::string *v19;
  __int128 v20;
  std::string v21;
  std::string __p;
  char v23;
  _QWORD v24[2];

  v0 = operator new();
  v1 = (_QWORD *)mediaplatform::Singleton<mlcore::AlbumArtistTable>::sharedInstance();
  v2 = (std::__shared_weak_count *)v1[1];
  v24[0] = *v1;
  v24[1] = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  v5 = (mlcore::AlbumArtistTable **)mediaplatform::Singleton<mlcore::AlbumArtistTable>::sharedInstance();
  mlcore::AlbumArtistTable::classicalExperienceAvailableColumn(*v5, (uint64_t)&__p);
  mlcore::DatabaseModelProperty<int>::DatabaseModelProperty(v0, v24, (uint64_t)&__p);
  mlcore::ArtistPropertyClassicalExperienceAvailable(void)::property = v0;
  if (v23 < 0)
    operator delete((void *)__p.__r_.__value_.__l.__size_);
  if (v2)
  {
    v6 = (unint64_t *)&v2->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v8 = mlcore::ArtistPropertyClassicalExperienceAvailable(void)::property;
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  std::string::operator=((std::string *)(v8 + 40), &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v9 = mlcore::TypedEntityClass<mlcore::Artist>::sharedPointer();
  v10 = mlcore::ArtistPropertyClassicalExperienceAvailable(void)::property;
  v11 = mediaplatform::Singleton<mlcore::AlbumArtistTable>::sharedInstance();
  v12 = *(_QWORD *)v11;
  if (*(char *)(*(_QWORD *)v11 + 31) >= 0)
    v13 = *(unsigned __int8 *)(*(_QWORD *)v11 + 31);
  else
    v13 = *(_QWORD *)(*(_QWORD *)v11 + 16);
  v14 = &v21;
  std::string::basic_string[abi:ne180100]((uint64_t)&v21, v13 + 1);
  if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v14 = (std::string *)v21.__r_.__value_.__r.__words[0];
  if (v13)
  {
    v17 = *(char **)(v12 + 8);
    v16 = (char *)(v12 + 8);
    v15 = v17;
    if (v16[23] >= 0)
      v18 = v16;
    else
      v18 = v15;
    memmove(v14, v18, v13);
  }
  *(_WORD *)((char *)&v14->__r_.__value_.__l.__data_ + v13) = 46;
  v19 = std::string::append(&v21, "classicalExperienceAvailable");
  v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  __p.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  mlcore::EntityClass::setPropertyForName(v9, v10, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
}

void sub_20A792800(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ArtistPropertyLikedState(void)::$_0 &&>>()
{
  uint64_t v0;
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  mlcore::AlbumArtistTable **v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  std::string *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  std::string *v19;
  __int128 v20;
  std::string v21;
  std::string __p;
  char v23;
  _QWORD v24[2];

  v0 = operator new();
  v1 = (_QWORD *)mediaplatform::Singleton<mlcore::AlbumArtistTable>::sharedInstance();
  v2 = (std::__shared_weak_count *)v1[1];
  v24[0] = *v1;
  v24[1] = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  v5 = (mlcore::AlbumArtistTable **)mediaplatform::Singleton<mlcore::AlbumArtistTable>::sharedInstance();
  mlcore::AlbumArtistTable::likedStateColumn(*v5, (uint64_t)&__p);
  mlcore::DatabaseModelProperty<int>::DatabaseModelProperty(v0, v24, (uint64_t)&__p);
  mlcore::ArtistPropertyLikedState(void)::property = v0;
  if (v23 < 0)
    operator delete((void *)__p.__r_.__value_.__l.__size_);
  if (v2)
  {
    v6 = (unint64_t *)&v2->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v8 = mlcore::ArtistPropertyLikedState(void)::property;
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  std::string::operator=((std::string *)(v8 + 40), &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v9 = mlcore::TypedEntityClass<mlcore::Artist>::sharedPointer();
  v10 = mlcore::ArtistPropertyLikedState(void)::property;
  v11 = mediaplatform::Singleton<mlcore::AlbumArtistTable>::sharedInstance();
  v12 = *(_QWORD *)v11;
  if (*(char *)(*(_QWORD *)v11 + 31) >= 0)
    v13 = *(unsigned __int8 *)(*(_QWORD *)v11 + 31);
  else
    v13 = *(_QWORD *)(*(_QWORD *)v11 + 16);
  v14 = &v21;
  std::string::basic_string[abi:ne180100]((uint64_t)&v21, v13 + 1);
  if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v14 = (std::string *)v21.__r_.__value_.__r.__words[0];
  if (v13)
  {
    v17 = *(char **)(v12 + 8);
    v16 = (char *)(v12 + 8);
    v15 = v17;
    if (v16[23] >= 0)
      v18 = v16;
    else
      v18 = v15;
    memmove(v14, v18, v13);
  }
  *(_WORD *)((char *)&v14->__r_.__value_.__l.__data_ + v13) = 46;
  v19 = std::string::append(&v21, "likedState");
  v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  __p.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  mlcore::EntityClass::setPropertyForName(v9, v10, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
}

void sub_20A792A90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ArtistPropertyLikedStateChangedDate(void)::$_0 &&>>()
{
  uint64_t v0;
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  mlcore::AlbumArtistTable **v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  std::string *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  std::string *v19;
  __int128 v20;
  std::string v21;
  std::string __p;
  char v23;
  _QWORD v24[2];

  v0 = operator new();
  v1 = (_QWORD *)mediaplatform::Singleton<mlcore::AlbumArtistTable>::sharedInstance();
  v2 = (std::__shared_weak_count *)v1[1];
  v24[0] = *v1;
  v24[1] = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  v5 = (mlcore::AlbumArtistTable **)mediaplatform::Singleton<mlcore::AlbumArtistTable>::sharedInstance();
  mlcore::AlbumArtistTable::likedStateChangedDateColumn(*v5, (uint64_t)&__p);
  mlcore::DatabaseModelProperty<long long>::DatabaseModelProperty(v0, v24, (uint64_t)&__p);
  mlcore::ArtistPropertyLikedStateChangedDate(void)::property = v0;
  if (v23 < 0)
    operator delete((void *)__p.__r_.__value_.__l.__size_);
  if (v2)
  {
    v6 = (unint64_t *)&v2->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v8 = mlcore::ArtistPropertyLikedStateChangedDate(void)::property;
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  std::string::operator=((std::string *)(v8 + 40), &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v9 = mlcore::TypedEntityClass<mlcore::Artist>::sharedPointer();
  v10 = mlcore::ArtistPropertyLikedStateChangedDate(void)::property;
  v11 = mediaplatform::Singleton<mlcore::AlbumArtistTable>::sharedInstance();
  v12 = *(_QWORD *)v11;
  if (*(char *)(*(_QWORD *)v11 + 31) >= 0)
    v13 = *(unsigned __int8 *)(*(_QWORD *)v11 + 31);
  else
    v13 = *(_QWORD *)(*(_QWORD *)v11 + 16);
  v14 = &v21;
  std::string::basic_string[abi:ne180100]((uint64_t)&v21, v13 + 1);
  if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v14 = (std::string *)v21.__r_.__value_.__r.__words[0];
  if (v13)
  {
    v17 = *(char **)(v12 + 8);
    v16 = (char *)(v12 + 8);
    v15 = v17;
    if (v16[23] >= 0)
      v18 = v16;
    else
      v18 = v15;
    memmove(v14, v18, v13);
  }
  *(_WORD *)((char *)&v14->__r_.__value_.__l.__data_ + v13) = 46;
  v19 = std::string::append(&v21, "likedStateChangedDate");
  v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  __p.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  mlcore::EntityClass::setPropertyForName(v9, v10, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
}

void sub_20A792D20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ArtistPropertyCloudUniversalLibraryID(void)::$_0 &&>>()
{
  uint64_t v0;
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  mlcore::AlbumArtistTable **v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  std::string *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  std::string *v19;
  __int128 v20;
  std::string v21;
  std::string __str;
  _QWORD v23[2];

  v0 = operator new();
  v1 = (_QWORD *)mediaplatform::Singleton<mlcore::AlbumArtistTable>::sharedInstance();
  v2 = (std::__shared_weak_count *)v1[1];
  v23[0] = *v1;
  v23[1] = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  v5 = (mlcore::AlbumArtistTable **)mediaplatform::Singleton<mlcore::AlbumArtistTable>::sharedInstance();
  mlcore::AlbumArtistTable::cloudUniversalLibraryIDColumn(*v5, (uint64_t)&__str);
  mlcore::DatabaseModelProperty<std::string>::DatabaseModelProperty(v0, v23, (uint64_t)&__str);
  mlcore::ArtistPropertyCloudUniversalLibraryID(void)::property = v0;
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&__str);
  if (v2)
  {
    v6 = (unint64_t *)&v2->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v8 = mlcore::ArtistPropertyCloudUniversalLibraryID(void)::property;
  std::string::basic_string[abi:ne180100]<0>(&__str, "");
  std::string::operator=((std::string *)(v8 + 40), &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  v9 = mlcore::TypedEntityClass<mlcore::Artist>::sharedPointer();
  v10 = mlcore::ArtistPropertyCloudUniversalLibraryID(void)::property;
  v11 = mediaplatform::Singleton<mlcore::AlbumArtistTable>::sharedInstance();
  v12 = *(_QWORD *)v11;
  if (*(char *)(*(_QWORD *)v11 + 31) >= 0)
    v13 = *(unsigned __int8 *)(*(_QWORD *)v11 + 31);
  else
    v13 = *(_QWORD *)(*(_QWORD *)v11 + 16);
  v14 = &v21;
  std::string::basic_string[abi:ne180100]((uint64_t)&v21, v13 + 1);
  if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v14 = (std::string *)v21.__r_.__value_.__r.__words[0];
  if (v13)
  {
    v17 = *(char **)(v12 + 8);
    v16 = (char *)(v12 + 8);
    v15 = v17;
    if (v16[23] >= 0)
      v18 = v16;
    else
      v18 = v15;
    memmove(v14, v18, v13);
  }
  *(_WORD *)((char *)&v14->__r_.__value_.__l.__data_ + v13) = 46;
  v19 = std::string::append(&v21, "cloudUniversalLibraryID");
  v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  __str.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  mlcore::EntityClass::setPropertyForName(v9, v10, &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
}

void sub_20A792FA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ArtistPropertyItemCount(void)::$_0 &&>>()
{
  uint64_t v0;
  mlcore *v1;
  mlcore *v2;
  uint64_t v3;
  _QWORD *v4;
  __int128 v5;
  unint64_t *v6;
  unint64_t v7;
  unint64_t v8;
  std::__shared_weak_count *size;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  std::string __p;
  __int128 v18;

  v0 = operator new();
  v1 = (mlcore *)mlcore::TypedEntityClass<mlcore::Item>::sharedPointer();
  v2 = (mlcore *)mlcore::ItemPropertyAlbumArtistPersistentID(v1);
  v3 = mlcore::ArtistPropertyPersistentID(v2);
  v4 = operator new(0x38uLL);
  v4[1] = 0;
  v4[2] = 0;
  *v4 = &off_24C33D240;
  v4[4] = v2;
  v4[5] = 0;
  v4[3] = &off_24C33A5A8;
  v4[6] = v3;
  *(_QWORD *)&v18 = v4 + 3;
  *((_QWORD *)&v18 + 1) = v4;
  std::allocate_shared[abi:ne180100]<mlcore::AggregateFunctionQuery,std::allocator<mlcore::AggregateFunctionQuery>,mlcore::EntityClass *,mlcore::AggregateFunctionQuery::AggregateFunction,decltype(nullptr),std::shared_ptr<mlcore::ComparisonPropertyPredicate>,void>(&__p, (uint64_t)v1, 0, &v18);
  v5 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = 0uLL;
  *(_OWORD *)(v0 + 16) = 0u;
  *(_OWORD *)(v0 + 32) = 0u;
  *(_OWORD *)(v0 + 48) = 0u;
  *(_QWORD *)v0 = &off_24C337228;
  *(_OWORD *)(v0 + 64) = v5;
  if (*((_QWORD *)&v5 + 1))
  {
    v6 = (unint64_t *)(*((_QWORD *)&v5 + 1) + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
    mlcore::ArtistPropertyItemCount(void)::property = v0;
    do
      v8 = __ldaxr(v6);
    while (__stlxr(v8 - 1, v6));
    if (!v8)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v5 + 1) + 16))(*((_QWORD *)&v5 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v5 + 1));
    }
  }
  else
  {
    mlcore::ArtistPropertyItemCount(void)::property = v0;
  }
  size = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
  if (__p.__r_.__value_.__l.__size_)
  {
    v10 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
  }
  v12 = (std::__shared_weak_count *)*((_QWORD *)&v18 + 1);
  if (*((_QWORD *)&v18 + 1))
  {
    v13 = (unint64_t *)(*((_QWORD *)&v18 + 1) + 8);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  v15 = mlcore::TypedEntityClass<mlcore::Artist>::sharedPointer();
  v16 = mlcore::ArtistPropertyItemCount(void)::property;
  std::string::basic_string[abi:ne180100]<0>(&__p, "itemCount");
  mlcore::EntityClass::setPropertyForName(v15, v16, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_20A793224(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ArtistPropertyLibraryItemCount(void)::$_0 &&>>()
{
  uint64_t v0;
  mlcore *v1;
  mlcore *v2;
  uint64_t v3;
  mlcore *v4;
  __int128 v5;
  uint64_t v6;
  char *v7;
  __int128 v8;
  __int128 *v9;
  char v10;
  uint64_t v11;
  char v12;
  __int128 v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  uint64_t i;
  uint64_t v28;
  uint64_t v29;
  __int128 *v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  std::__shared_weak_count *v34;
  __int128 **v35;
  char v36;
  void *__p[2];
  __int128 v38;
  uint64_t v39;

  v39 = *MEMORY[0x24BDAC8D0];
  v0 = operator new();
  v1 = (mlcore *)mlcore::TypedEntityClass<mlcore::Item>::sharedPointer();
  v2 = (mlcore *)mlcore::ItemPropertyAlbumArtistPersistentID(v1);
  v3 = mlcore::ArtistPropertyPersistentID(v2);
  v4 = (mlcore *)operator new(0x38uLL);
  *((_QWORD *)v4 + 1) = 0;
  *((_QWORD *)v4 + 2) = 0;
  *(_QWORD *)v4 = &off_24C33D240;
  *((_QWORD *)v4 + 4) = v2;
  *((_QWORD *)v4 + 5) = 0;
  *((_QWORD *)v4 + 3) = &off_24C33A5A8;
  *((_QWORD *)v4 + 6) = v3;
  *(_QWORD *)&v5 = (char *)v4 + 24;
  *((_QWORD *)&v5 + 1) = v4;
  *(_OWORD *)__p = v5;
  v6 = mlcore::ItemPropertyInMyLibrary(v4);
  v7 = (char *)operator new(0x30uLL);
  *(_OWORD *)(v7 + 8) = 0u;
  *(_QWORD *)v7 = &off_24C33C9F0;
  *((_QWORD *)v7 + 4) = v6;
  *((_DWORD *)v7 + 10) = 0;
  *((_QWORD *)v7 + 3) = &unk_24C3377B8;
  *(_QWORD *)&v8 = v7 + 24;
  *((_QWORD *)&v8 + 1) = v7;
  v38 = v8;
  v30 = 0;
  v31 = 0u;
  v35 = &v30;
  v36 = 0;
  v9 = (__int128 *)operator new(0x20uLL);
  v10 = 0;
  v11 = 0;
  v30 = v9;
  *(_QWORD *)&v31 = v9;
  *((_QWORD *)&v31 + 1) = v9 + 2;
  do
  {
    v12 = v10;
    v13 = *(_OWORD *)&__p[2 * v11];
    *v9 = v13;
    if (*((_QWORD *)&v13 + 1))
    {
      v14 = (unint64_t *)(*((_QWORD *)&v13 + 1) + 8);
      do
        v15 = __ldxr(v14);
      while (__stxr(v15 + 1, v14));
    }
    ++v9;
    v10 = 1;
    v11 = 1;
  }
  while ((v12 & 1) == 0);
  *(_QWORD *)&v31 = v9;
  mlcore::CreateAndPredicate(&v30, &v32);
  std::allocate_shared[abi:ne180100]<mlcore::AggregateFunctionQuery,std::allocator<mlcore::AggregateFunctionQuery>,mlcore::EntityClass *,mlcore::AggregateFunctionQuery::AggregateFunction,decltype(nullptr),std::shared_ptr<mlcore::Predicate>,void>(&v33, (uint64_t)v1, 0, &v32);
  v16 = v33;
  v17 = v34;
  v33 = 0;
  v34 = 0;
  *(_OWORD *)(v0 + 16) = 0u;
  *(_OWORD *)(v0 + 32) = 0u;
  *(_OWORD *)(v0 + 48) = 0u;
  *(_QWORD *)v0 = &off_24C337228;
  *(_QWORD *)(v0 + 64) = v16;
  *(_QWORD *)(v0 + 72) = v17;
  if (v17)
  {
    p_shared_owners = (unint64_t *)&v17->__shared_owners_;
    do
      v19 = __ldxr(p_shared_owners);
    while (__stxr(v19 + 1, p_shared_owners));
    mlcore::ArtistPropertyLibraryItemCount(void)::property = v0;
    do
      v20 = __ldaxr(p_shared_owners);
    while (__stlxr(v20 - 1, p_shared_owners));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  else
  {
    mlcore::ArtistPropertyLibraryItemCount(void)::property = v0;
  }
  v21 = v34;
  if (v34)
  {
    v22 = (unint64_t *)&v34->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  v24 = (std::__shared_weak_count *)*((_QWORD *)&v32 + 1);
  if (*((_QWORD *)&v32 + 1))
  {
    v25 = (unint64_t *)(*((_QWORD *)&v32 + 1) + 8);
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  v35 = &v30;
  std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v35);
  for (i = 2; i != -2; i -= 2)
    std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)&__p[i]);
  v28 = mlcore::TypedEntityClass<mlcore::Artist>::sharedPointer();
  v29 = mlcore::ArtistPropertyLibraryItemCount(void)::property;
  std::string::basic_string[abi:ne180100]<0>(__p, "libraryItemCount");
  mlcore::EntityClass::setPropertyForName(v28, v29, (std::string *)__p);
  if (SBYTE7(v38) < 0)
    operator delete(__p[0]);
}

void sub_20A793598(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a24 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::allocate_shared[abi:ne180100]<mlcore::AggregateFunctionQuery,std::allocator<mlcore::AggregateFunctionQuery>,mlcore::EntityClass *,mlcore::AggregateFunctionQuery::AggregateFunction,decltype(nullptr),std::shared_ptr<mlcore::Predicate>,void>(_QWORD *a1, uint64_t a2, int a3, __int128 *a4)
{
  char *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  __int128 v12;

  v8 = (char *)operator new(0x60uLL);
  *(_OWORD *)(v8 + 8) = 0u;
  *(_QWORD *)v8 = &off_24C33D080;
  v12 = *a4;
  v11 = (std::__shared_weak_count *)*((_QWORD *)&v12 + 1);
  *a4 = 0u;
  mlcore::AggregateFunctionQuery::AggregateFunctionQuery((uint64_t)(v8 + 24), a2, a3, 0, (uint64_t *)&v12, 0);
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  *a1 = v8 + 24;
  a1[1] = v8;
}

void sub_20A79376C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  std::__shared_weak_count *v3;
  void *v5;
  va_list va;

  va_start(va, a3);
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::__shared_weak_count::~__shared_weak_count(v3);
  operator delete(v5);
  _Unwind_Resume(a1);
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ArtistPropertyAlbumCount(void)::$_0 &&>>()
{
  uint64_t v0;
  mlcore *v1;
  mlcore *v2;
  uint64_t v3;
  _QWORD *v4;
  __int128 v5;
  unint64_t *v6;
  unint64_t v7;
  unint64_t v8;
  std::__shared_weak_count *size;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  std::string __p;
  __int128 v18;

  v0 = operator new();
  v1 = (mlcore *)mlcore::TypedEntityClass<mlcore::Album>::sharedPointer();
  v2 = (mlcore *)mlcore::AlbumPropertyArtistPersistentID(v1);
  v3 = mlcore::ArtistPropertyPersistentID(v2);
  v4 = operator new(0x38uLL);
  v4[1] = 0;
  v4[2] = 0;
  *v4 = &off_24C33D240;
  v4[4] = v2;
  v4[5] = 0;
  v4[3] = &off_24C33A5A8;
  v4[6] = v3;
  *(_QWORD *)&v18 = v4 + 3;
  *((_QWORD *)&v18 + 1) = v4;
  std::allocate_shared[abi:ne180100]<mlcore::AggregateFunctionQuery,std::allocator<mlcore::AggregateFunctionQuery>,mlcore::EntityClass *,mlcore::AggregateFunctionQuery::AggregateFunction,decltype(nullptr),std::shared_ptr<mlcore::ComparisonPropertyPredicate>,void>(&__p, (uint64_t)v1, 0, &v18);
  v5 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = 0uLL;
  *(_OWORD *)(v0 + 16) = 0u;
  *(_OWORD *)(v0 + 32) = 0u;
  *(_OWORD *)(v0 + 48) = 0u;
  *(_QWORD *)v0 = &off_24C337228;
  *(_OWORD *)(v0 + 64) = v5;
  if (*((_QWORD *)&v5 + 1))
  {
    v6 = (unint64_t *)(*((_QWORD *)&v5 + 1) + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
    mlcore::ArtistPropertyAlbumCount(void)::property = v0;
    do
      v8 = __ldaxr(v6);
    while (__stlxr(v8 - 1, v6));
    if (!v8)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v5 + 1) + 16))(*((_QWORD *)&v5 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v5 + 1));
    }
  }
  else
  {
    mlcore::ArtistPropertyAlbumCount(void)::property = v0;
  }
  size = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
  if (__p.__r_.__value_.__l.__size_)
  {
    v10 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
  }
  v12 = (std::__shared_weak_count *)*((_QWORD *)&v18 + 1);
  if (*((_QWORD *)&v18 + 1))
  {
    v13 = (unint64_t *)(*((_QWORD *)&v18 + 1) + 8);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  v15 = mlcore::TypedEntityClass<mlcore::Artist>::sharedPointer();
  v16 = mlcore::ArtistPropertyAlbumCount(void)::property;
  std::string::basic_string[abi:ne180100]<0>(&__p, "albumCount");
  mlcore::EntityClass::setPropertyForName(v15, v16, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_20A793954(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ArtistPropertyLatestItemDateAdded(void)::$_0 &&>>()
{
  uint64_t v0;
  mlcore *v1;
  mlcore *v2;
  mlcore *v3;
  uint64_t v4;
  _QWORD *v5;
  __int128 v6;
  unint64_t *v7;
  unint64_t v8;
  unint64_t v9;
  std::__shared_weak_count *size;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  std::string __p;
  __int128 v19;

  v0 = operator new();
  v1 = (mlcore *)mlcore::TypedEntityClass<mlcore::Item>::sharedPointer();
  v2 = (mlcore *)mlcore::ItemPropertyDateAdded(v1);
  v3 = (mlcore *)mlcore::ItemPropertyAlbumArtistPersistentID(v2);
  v4 = mlcore::ArtistPropertyPersistentID(v3);
  v5 = operator new(0x38uLL);
  v5[1] = 0;
  v5[2] = 0;
  *v5 = &off_24C33D240;
  v5[4] = v3;
  v5[5] = 0;
  v5[3] = &off_24C33A5A8;
  v5[6] = v4;
  *(_QWORD *)&v19 = v5 + 3;
  *((_QWORD *)&v19 + 1) = v5;
  std::allocate_shared[abi:ne180100]<mlcore::AggregateFunctionQuery,std::allocator<mlcore::AggregateFunctionQuery>,mlcore::EntityClass *,mlcore::AggregateFunctionQuery::AggregateFunction,mlcore::ModelProperty<long long> *,std::shared_ptr<mlcore::ComparisonPropertyPredicate>,void>(&__p, (uint64_t)v1, 2, (uint64_t)v2, &v19);
  v6 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = 0uLL;
  *(_OWORD *)(v0 + 16) = 0u;
  *(_OWORD *)(v0 + 32) = 0u;
  *(_OWORD *)(v0 + 48) = 0u;
  *(_QWORD *)v0 = &off_24C337228;
  *(_OWORD *)(v0 + 64) = v6;
  if (*((_QWORD *)&v6 + 1))
  {
    v7 = (unint64_t *)(*((_QWORD *)&v6 + 1) + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
    mlcore::ArtistPropertyLatestItemDateAdded(void)::property = v0;
    do
      v9 = __ldaxr(v7);
    while (__stlxr(v9 - 1, v7));
    if (!v9)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v6 + 1) + 16))(*((_QWORD *)&v6 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v6 + 1));
    }
  }
  else
  {
    mlcore::ArtistPropertyLatestItemDateAdded(void)::property = v0;
  }
  size = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
  if (__p.__r_.__value_.__l.__size_)
  {
    v11 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
  }
  v13 = (std::__shared_weak_count *)*((_QWORD *)&v19 + 1);
  if (*((_QWORD *)&v19 + 1))
  {
    v14 = (unint64_t *)(*((_QWORD *)&v19 + 1) + 8);
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  v16 = mlcore::TypedEntityClass<mlcore::Artist>::sharedPointer();
  v17 = mlcore::ArtistPropertyLatestItemDateAdded(void)::property;
  std::string::basic_string[abi:ne180100]<0>(&__p, "latestItemDateAdded");
  mlcore::EntityClass::setPropertyForName(v16, v17, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_20A793BB4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

double mlcore::Artist::Artist(mlcore::Artist *this, uint64_t a2)
{
  double result;

  result = 0.0;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_DWORD *)this + 12) = 1065353216;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *((_DWORD *)this + 22) = 1065353216;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_DWORD *)this + 32) = 1065353216;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 152) = 0u;
  *((_DWORD *)this + 42) = 1065353216;
  *((_OWORD *)this + 11) = 0u;
  *((_OWORD *)this + 12) = 0u;
  *((_DWORD *)this + 52) = 1065353216;
  *((_QWORD *)this + 27) = &unk_24C3371E8;
  *((_QWORD *)this + 28) = a2;
  *(_QWORD *)this = &off_24C33A810;
  *((_QWORD *)this + 1) = &off_24C3371C0;
  return result;
}

{
  double result;

  result = 0.0;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_DWORD *)this + 12) = 1065353216;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *((_DWORD *)this + 22) = 1065353216;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_DWORD *)this + 32) = 1065353216;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 152) = 0u;
  *((_DWORD *)this + 42) = 1065353216;
  *((_OWORD *)this + 11) = 0u;
  *((_OWORD *)this + 12) = 0u;
  *((_DWORD *)this + 52) = 1065353216;
  *((_QWORD *)this + 27) = &unk_24C3371E8;
  *((_QWORD *)this + 28) = a2;
  *(_QWORD *)this = &off_24C33A810;
  *((_QWORD *)this + 1) = &off_24C3371C0;
  return result;
}

void mlcore::Artist::name(mlcore::Artist *this@<X0>, std::string *a2@<X8>)
{
  unint64_t v4;

  v4 = mlcore::ArtistPropertyName(this);
  mlcore::Entity::valueForProperty<std::string>(a2, (uint64_t)this, v4);
}

void mlcore::Artist::setName(mlcore *a1, uint64_t a2)
{
  std::string::size_type v4;

  v4 = mlcore::ArtistPropertyName(a1);
  mlcore::Entity::setValueForProperty<std::string>((uint64_t)a1, a2, v4);
}

void mlcore::Category::~Category(mlcore::Category *this)
{
  *(_QWORD *)this = off_24C33A860;
  mlcore::PropertyCacheBase<long long,int,double,std::string,mediaplatform::Data>::~PropertyCacheBase((_QWORD *)this + 1);
}

{
  *(_QWORD *)this = off_24C33A860;
  mlcore::PropertyCacheBase<long long,int,double,std::string,mediaplatform::Data>::~PropertyCacheBase((_QWORD *)this + 1);
  JUMPOUT(0x20BD27AFCLL);
}

uint64_t mlcore::TypedEntityClass<mlcore::Category>::sharedPointer()
{
  unint64_t v0;
  char v2;
  char **v3;
  char *v4;

  v0 = atomic_load(&mlcore::TypedEntityClass<mlcore::Category>::sharedPointer(void)::__once);
  if (v0 != -1)
  {
    v4 = &v2;
    v3 = &v4;
    std::__call_once(&mlcore::TypedEntityClass<mlcore::Category>::sharedPointer(void)::__once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::TypedEntityClass<mlcore::Category>::sharedPointer(void)::{lambda(void)#1} &&>>);
  }
  return mlcore::TypedEntityClass<mlcore::Category>::sharedPointer(void)::__sharedPointer;
}

double std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::TypedEntityClass<mlcore::Category>::sharedPointer(void)::{lambda(void)#1} &&>>()
{
  uint64_t v0;
  double result;

  v0 = operator new();
  result = 0.0;
  *(_OWORD *)(v0 + 16) = 0u;
  *(_OWORD *)(v0 + 32) = 0u;
  *(_OWORD *)(v0 + 48) = 0u;
  *(_OWORD *)(v0 + 64) = 0u;
  *(_OWORD *)(v0 + 80) = 0u;
  *(_QWORD *)(v0 + 96) = 0;
  *(_DWORD *)(v0 + 104) = 1065353216;
  *(_OWORD *)(v0 + 112) = 0u;
  *(_OWORD *)(v0 + 128) = 0u;
  *(_DWORD *)(v0 + 144) = 1065353216;
  *(_QWORD *)v0 = &off_24C3392D8;
  *(_QWORD *)(v0 + 8) = 850045863;
  mlcore::TypedEntityClass<mlcore::Category>::sharedPointer(void)::__sharedPointer = v0;
  return result;
}

void mlcore::TypedEntityClass<mlcore::Category>::~TypedEntityClass(mlcore::EntityClass *a1)
{
  mlcore::EntityClass::~EntityClass(a1);
  JUMPOUT(0x20BD27AFCLL);
}

uint64_t mlcore::TypedEntityClass<mlcore::Category>::description(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
}

__n128 mlcore::TypedEntityClass<mlcore::Category>::create@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, __n128 *a4@<X8>)
{
  char *v8;
  uint64_t v9;
  unint64_t *v10;
  uint64_t v11;
  __n128 result;
  __n128 v13;
  unint64_t v14[3];
  unint64_t *v15;
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  v8 = (char *)operator new(0x100uLL);
  *((_QWORD *)v8 + 1) = 0;
  *((_QWORD *)v8 + 2) = 0;
  *(_QWORD *)v8 = &off_24C33D550;
  *(_OWORD *)(v8 + 40) = 0u;
  *(_OWORD *)(v8 + 56) = 0u;
  *((_DWORD *)v8 + 18) = 1065353216;
  *((_OWORD *)v8 + 5) = 0u;
  *((_OWORD *)v8 + 6) = 0u;
  *((_DWORD *)v8 + 28) = 1065353216;
  *(_OWORD *)(v8 + 120) = 0u;
  *(_OWORD *)(v8 + 136) = 0u;
  *((_DWORD *)v8 + 38) = 1065353216;
  *((_OWORD *)v8 + 10) = 0u;
  *((_OWORD *)v8 + 11) = 0u;
  *((_DWORD *)v8 + 48) = 1065353216;
  *(_OWORD *)(v8 + 216) = 0u;
  *((_DWORD *)v8 + 58) = 1065353216;
  *((_QWORD *)v8 + 30) = &unk_24C3371E8;
  *((_QWORD *)v8 + 31) = a2;
  *(_OWORD *)(v8 + 200) = 0u;
  v9 = (uint64_t)(v8 + 200);
  *((_QWORD *)v8 + 4) = &off_24C3371C0;
  *((_QWORD *)v8 + 3) = &off_24C33AAA8;
  v13.n128_u64[0] = (unint64_t)(v8 + 24);
  v13.n128_u64[1] = (unint64_t)v8;
  v14[0] = (unint64_t)&off_24C33B140;
  v15 = v14;
  mlcore::PropertyCache::mergePropertiesFromCache((uint64_t)(v8 + 32), a3, (uint64_t)v14);
  v10 = v15;
  if (v15 == v14)
  {
    v11 = 4;
    v10 = v14;
    goto LABEL_5;
  }
  if (v15)
  {
    v11 = 5;
LABEL_5:
    (*(void (**)(void))(*v10 + 8 * v11))();
  }
  v14[0] = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 112))(a1);
  std::__hash_table<std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>,std::__unordered_map_hasher<mlcore::ModelProperty<long long> *,std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>,std::hash<mlcore::ModelProperty<long long> *>,std::equal_to<mlcore::ModelProperty<long long> *>,true>,std::__unordered_map_equal<mlcore::ModelProperty<long long> *,std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>,std::equal_to<mlcore::ModelProperty<long long> *>,std::hash<mlcore::ModelProperty<long long> *>,true>,std::allocator<std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>>>::__emplace_unique_key_args<mlcore::ModelProperty<long long> *,std::piecewise_construct_t const&,std::tuple<mlcore::ModelProperty<long long> * const&>,std::tuple<>>(v9, v14[0], v14)[3] = a2;
  result = v13;
  *a4 = v13;
  return result;
}

void sub_20A794058(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15)
{
  char *v15;
  char *v17;
  uint64_t v18;

  v17 = a15;
  if (a15 == v15)
  {
    v18 = 4;
    v17 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v18 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v17 + 8 * v18))();
LABEL_6:
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t mlcore::TypedEntityClass<mlcore::Category>::name(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
}

uint64_t mlcore::TypedEntityClass<mlcore::Category>::entityType()
{
  return 0xFFFFFFFFLL;
}

BOOL mlcore::TypedEntityClass<mlcore::Category>::isRevisionTrackable(uint64_t a1)
{
  return (*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1) != -1;
}

uint64_t mlcore::TypedEntityClass<mlcore::Category>::isCloudUpdatable()
{
  return 0;
}

uint64_t mlcore::TypedEntityClass<mlcore::Category>::databaseTable()
{
  return *(_QWORD *)mediaplatform::Singleton<mlcore::CategoryTable>::sharedInstance();
}

void mlcore::TypedEntityClass<mlcore::Category>::databaseTablesToDeleteFrom(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

void mlcore::TypedEntityClass<mlcore::Category>::databaseTablesToInsertInto(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

uint64_t mlcore::TypedEntityClass<mlcore::Category>::representativeItemPersistentIDProperty()
{
  return 0;
}

uint64_t mlcore::TypedEntityClass<mlcore::Category>::trackForeignPersistentIDProperty()
{
  return 0;
}

uint64_t mlcore::TypedEntityClass<mlcore::Category>::trackForeignOrderingProperty()
{
  return 0;
}

uint64_t mlcore::TypedEntityClass<mlcore::Category>::sectionPropertyForOrderingProperty()
{
  return 0;
}

uint64_t mlcore::CategoryPropertyPersistentID(mlcore *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&mlcore::CategoryPropertyPersistentID(void)::once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&mlcore::CategoryPropertyPersistentID(void)::once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::CategoryPropertyPersistentID(void)::$_0 &&>>);
  }
  return mlcore::CategoryPropertyPersistentID(void)::property;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::CategoryPropertyPersistentID(void)::$_0 &&>>()
{
  uint64_t v0;
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t *v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  std::string *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  std::string *v19;
  __int128 v20;
  std::string v21;
  std::string __p;
  char v23;
  _QWORD v24[2];

  v0 = operator new();
  v1 = (_QWORD *)mediaplatform::Singleton<mlcore::CategoryTable>::sharedInstance();
  v2 = (std::__shared_weak_count *)v1[1];
  v24[0] = *v1;
  v24[1] = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  v5 = (uint64_t *)mediaplatform::Singleton<mlcore::CategoryTable>::sharedInstance();
  mlcore::MediaTable<long long,std::string>::mediaColumnAtIndex<0ul>((uint64_t)&__p, *v5);
  mlcore::DatabaseModelProperty<long long>::DatabaseModelProperty(v0, v24, (uint64_t)&__p);
  mlcore::CategoryPropertyPersistentID(void)::property = v0;
  if (v23 < 0)
    operator delete((void *)__p.__r_.__value_.__l.__size_);
  if (v2)
  {
    v6 = (unint64_t *)&v2->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v8 = mlcore::CategoryPropertyPersistentID(void)::property;
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  std::string::operator=((std::string *)(v8 + 40), &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v9 = mlcore::TypedEntityClass<mlcore::Category>::sharedPointer();
  v10 = mlcore::CategoryPropertyPersistentID(void)::property;
  v11 = mediaplatform::Singleton<mlcore::CategoryTable>::sharedInstance();
  v12 = *(_QWORD *)v11;
  if (*(char *)(*(_QWORD *)v11 + 31) >= 0)
    v13 = *(unsigned __int8 *)(*(_QWORD *)v11 + 31);
  else
    v13 = *(_QWORD *)(*(_QWORD *)v11 + 16);
  v14 = &v21;
  std::string::basic_string[abi:ne180100]((uint64_t)&v21, v13 + 1);
  if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v14 = (std::string *)v21.__r_.__value_.__r.__words[0];
  if (v13)
  {
    v17 = *(char **)(v12 + 8);
    v16 = (char *)(v12 + 8);
    v15 = v17;
    if (v16[23] >= 0)
      v18 = v16;
    else
      v18 = v15;
    memmove(v14, v18, v13);
  }
  *(_WORD *)((char *)&v14->__r_.__value_.__l.__data_ + v13) = 46;
  v19 = std::string::append(&v21, "persistentID");
  v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  __p.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  mlcore::EntityClass::setPropertyForName(v9, v10, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
}

void sub_20A794364(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

uint64_t mediaplatform::Singleton<mlcore::CategoryTable>::sharedInstance()
{
  unsigned __int8 v0;
  mlcore::CategoryTable **v2;

  if ((v0 & 1) == 0
  {
    v2 = (mlcore::CategoryTable **)operator new();
    _ZNSt3__115allocate_sharedB8ne180100IN6mlcore13CategoryTableENS_9allocatorIS2_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(v2);
    mediaplatform::Singleton<mlcore::CategoryTable>::sharedInstance(void)::_sharedInstance = (uint64_t)v2;
  }
  return mediaplatform::Singleton<mlcore::CategoryTable>::sharedInstance(void)::_sharedInstance;
}

void sub_20A794494(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x20BD27AFC](v1, 0x20C40A4A59CD2);
  _Unwind_Resume(a1);
}

mlcore::CategoryTable *_ZNSt3__115allocate_sharedB8ne180100IN6mlcore13CategoryTableENS_9allocatorIS2_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(mlcore::CategoryTable **a1)
{
  _QWORD *v2;
  mlcore::CategoryTable *result;

  v2 = operator new(0x148uLL);
  v2[1] = 0;
  v2[2] = 0;
  *v2 = &off_24C33C6A8;
  result = mlcore::CategoryTable::CategoryTable((mlcore::CategoryTable *)(v2 + 3));
  *a1 = result;
  a1[1] = (mlcore::CategoryTable *)v2;
  return result;
}

void sub_20A79450C(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<mlcore::CategoryTable>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C33C6A8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<mlcore::CategoryTable>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C33C6A8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x20BD27AFCLL);
}

uint64_t std::__shared_ptr_emplace<mlcore::CategoryTable>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__shared_ptr_emplace<mlcore::Category>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C33D550;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<mlcore::Category>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C33D550;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x20BD27AFCLL);
}

uint64_t std::__shared_ptr_emplace<mlcore::Category>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t mlcore::CategoryPropertyCategory(mlcore *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&mlcore::CategoryPropertyCategory(void)::once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&mlcore::CategoryPropertyCategory(void)::once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::CategoryPropertyCategory(void)::$_0 &&>>);
  }
  return mlcore::CategoryPropertyCategory(void)::property;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::CategoryPropertyCategory(void)::$_0 &&>>()
{
  uint64_t v0;
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t *v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  std::string *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  std::string *v19;
  __int128 v20;
  std::string v21;
  std::string __str;
  _QWORD v23[2];

  v0 = operator new();
  v1 = (_QWORD *)mediaplatform::Singleton<mlcore::CategoryTable>::sharedInstance();
  v2 = (std::__shared_weak_count *)v1[1];
  v23[0] = *v1;
  v23[1] = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  v5 = (uint64_t *)mediaplatform::Singleton<mlcore::CategoryTable>::sharedInstance();
  mlcore::MediaTable<long long,std::string>::mediaColumnAtIndex<1ul>((uint64_t)&__str, *v5);
  mlcore::DatabaseModelProperty<std::string>::DatabaseModelProperty(v0, v23, (uint64_t)&__str);
  mlcore::CategoryPropertyCategory(void)::property = v0;
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&__str);
  if (v2)
  {
    v6 = (unint64_t *)&v2->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v8 = mlcore::CategoryPropertyCategory(void)::property;
  std::string::basic_string[abi:ne180100]<0>(&__str, "");
  std::string::operator=((std::string *)(v8 + 40), &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  v9 = mlcore::TypedEntityClass<mlcore::Category>::sharedPointer();
  v10 = mlcore::CategoryPropertyCategory(void)::property;
  v11 = mediaplatform::Singleton<mlcore::CategoryTable>::sharedInstance();
  v12 = *(_QWORD *)v11;
  if (*(char *)(*(_QWORD *)v11 + 31) >= 0)
    v13 = *(unsigned __int8 *)(*(_QWORD *)v11 + 31);
  else
    v13 = *(_QWORD *)(*(_QWORD *)v11 + 16);
  v14 = &v21;
  std::string::basic_string[abi:ne180100]((uint64_t)&v21, v13 + 1);
  if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v14 = (std::string *)v21.__r_.__value_.__r.__words[0];
  if (v13)
  {
    v17 = *(char **)(v12 + 8);
    v16 = (char *)(v12 + 8);
    v15 = v17;
    if (v16[23] >= 0)
      v18 = v16;
    else
      v18 = v15;
    memmove(v14, v18, v13);
  }
  *(_WORD *)((char *)&v14->__r_.__value_.__l.__data_ + v13) = 46;
  v19 = std::string::append(&v21, "category");
  v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  __str.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  mlcore::EntityClass::setPropertyForName(v9, v10, &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
}

void sub_20A7947EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

double mlcore::Category::Category(mlcore::Category *this, uint64_t a2)
{
  double result;

  result = 0.0;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_DWORD *)this + 12) = 1065353216;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *((_DWORD *)this + 22) = 1065353216;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_DWORD *)this + 32) = 1065353216;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 152) = 0u;
  *((_DWORD *)this + 42) = 1065353216;
  *((_OWORD *)this + 11) = 0u;
  *((_OWORD *)this + 12) = 0u;
  *((_DWORD *)this + 52) = 1065353216;
  *((_QWORD *)this + 27) = &unk_24C3371E8;
  *((_QWORD *)this + 28) = a2;
  *(_QWORD *)this = &off_24C33AAA8;
  *((_QWORD *)this + 1) = &off_24C3371C0;
  return result;
}

{
  double result;

  result = 0.0;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_DWORD *)this + 12) = 1065353216;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *((_DWORD *)this + 22) = 1065353216;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_DWORD *)this + 32) = 1065353216;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 152) = 0u;
  *((_DWORD *)this + 42) = 1065353216;
  *((_OWORD *)this + 11) = 0u;
  *((_OWORD *)this + 12) = 0u;
  *((_DWORD *)this + 52) = 1065353216;
  *((_QWORD *)this + 27) = &unk_24C3371E8;
  *((_QWORD *)this + 28) = a2;
  *(_QWORD *)this = &off_24C33AAA8;
  *((_QWORD *)this + 1) = &off_24C3371C0;
  return result;
}

void mlcore::Category::category(mlcore::Category *this@<X0>, std::string *a2@<X8>)
{
  unint64_t v4;

  v4 = mlcore::CategoryPropertyCategory(this);
  mlcore::Entity::valueForProperty<std::string>(a2, (uint64_t)this, v4);
}

void mlcore::Category::setCategory(mlcore *a1, uint64_t a2)
{
  std::string::size_type v4;

  v4 = mlcore::CategoryPropertyCategory(a1);
  mlcore::Entity::setValueForProperty<std::string>((uint64_t)a1, a2, v4);
}

double mediaplatform::FormatOptions::FormatOptions(mediaplatform::FormatOptions *this)
{
  double result;

  *(_QWORD *)this = 2;
  *((_QWORD *)this + 1) = 0;
  *((_BYTE *)this + 16) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_BYTE *)this + 32) = 0;
  *((_QWORD *)this + 5) = 0;
  *(_QWORD *)&result = 0x2B0000002B00;
  *((_DWORD *)this + 12) = 11008;
  *((_WORD *)this + 26) = 32;
  return result;
}

{
  double result;

  *(_QWORD *)this = 2;
  *((_QWORD *)this + 1) = 0;
  *((_BYTE *)this + 16) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_BYTE *)this + 32) = 0;
  *((_QWORD *)this + 5) = 0;
  *(_QWORD *)&result = 0x2B0000002B00;
  *((_DWORD *)this + 12) = 11008;
  *((_WORD *)this + 26) = 32;
  return result;
}

uint64_t mediaplatform::FormatOptions::FormatOptions(uint64_t this, const char **a2)
{
  _BYTE *v2;
  const char *v3;
  int v4;
  uint64_t v5;
  const char *v6;
  const char *v7;
  const char *v8;
  int v9;
  int v10;
  int v11;
  int v12;
  uint64_t v13;
  const char *v14;
  const char *v15;
  int v16;
  int v17;
  int v18;
  uint64_t v19;
  const char *v20;
  const char *v21;
  int v22;
  std::runtime_error *exception;

  *(_QWORD *)this = 2;
  *(_QWORD *)(this + 8) = 0;
  *(_BYTE *)(this + 16) = 0;
  *(_QWORD *)(this + 24) = 0;
  *(_BYTE *)(this + 32) = 0;
  *(_QWORD *)(this + 40) = 0;
  *(_DWORD *)(this + 48) = 11008;
  *(_WORD *)(this + 52) = 32;
  v2 = *a2;
  v3 = *a2 + 1;
  *a2 = v3;
  if (*v2 != 123)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Invalid format options string (must begin with '{').");
    goto LABEL_43;
  }
  v4 = *(unsigned __int8 *)v3;
  if ((v4 - 48) > 9)
  {
LABEL_50:
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Invalid format string- missing numeric value.");
    goto LABEL_43;
  }
  v5 = 0;
  v6 = v2 + 2;
  do
  {
    v7 = v6;
    *a2 = v6;
    v5 = (v4 - 48) + 10 * v5;
    v8 = v6 - 1;
    v4 = *(unsigned __int8 *)v6++;
  }
  while ((v4 - 58) >= 0xFFFFFFF6);
  *(_QWORD *)(this + 8) = v5;
  v9 = *(unsigned __int8 *)v7;
  if (v9 == 58)
  {
    while (1)
    {
      v8 = v7++;
      *a2 = v7;
      v10 = *((unsigned __int8 *)v8 + 1);
      if (v10 == 125)
        goto LABEL_7;
      if (!v8[1])
        goto LABEL_42;
      if ((char)v10 <= 97)
      {
        if ((char)v10 <= 75)
        {
          switch((char)v10)
          {
            case '&':
              *(_BYTE *)(this + 53) = 1;
              continue;
            case '\'':
            case '(':
            case ')':
            case '*':
            case '-':
            case '/':
              goto LABEL_49;
            case '+':
              *(_BYTE *)(this + 48) = 1;
              v7 = v8 + 2;
              *a2 = v8 + 2;
              v17 = *((unsigned __int8 *)v8 + 2);
              *(_BYTE *)(this + 49) = v17;
              if (v17)
                continue;
              exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
              std::runtime_error::runtime_error(exception, "Invalid format string (no positive number indicator character after +)");
              goto LABEL_43;
            case ',':
              continue;
            case '.':
              *(_BYTE *)(this + 32) = 1;
              *a2 = v8 + 2;
              v18 = *((unsigned __int8 *)v8 + 2);
              if ((v18 - 48) > 9)
                goto LABEL_50;
              v19 = 0;
              v20 = v8 + 3;
              do
              {
                *a2 = v20;
                v19 = (v18 - 48) + 10 * v19;
                v21 = v20++;
                v22 = *(unsigned __int8 *)v21;
                v7 = v21 - 1;
                v18 = v22;
              }
              while ((v22 - 58) >= 0xFFFFFFF6);
              *(_QWORD *)(this + 40) = v19;
              *a2 = v7;
              continue;
            case '0':
              *(_BYTE *)(this + 50) = 1;
              continue;
            default:
              if ((char)v10 == 67)
                goto LABEL_28;
              goto LABEL_49;
          }
        }
        switch((char)v10)
        {
          case 'P':
            goto LABEL_17;
          case 'Q':
          case 'S':
          case 'T':
          case 'U':
          case 'V':
            goto LABEL_49;
          case 'R':
            goto LABEL_22;
          case 'W':
            goto LABEL_23;
          case 'X':
            *(_BYTE *)(this + 51) = 1;
            goto LABEL_41;
          default:
            if ((char)v10 == 76)
              goto LABEL_30;
            goto LABEL_49;
        }
      }
      switch((char)v10)
      {
        case 'b':
          *(_DWORD *)(this + 4) = 3;
          continue;
        case 'c':
LABEL_28:
          *(_DWORD *)this = 1;
          continue;
        case 'd':
          *(_DWORD *)(this + 4) = 0;
          continue;
        case 'e':
        case 'f':
        case 'g':
        case 'h':
        case 'i':
        case 'j':
        case 'k':
        case 'm':
        case 'n':
        case 'q':
          goto LABEL_49;
        case 'l':
LABEL_30:
          *(_DWORD *)this = 0;
          continue;
        case 'o':
          *(_DWORD *)(this + 4) = 1;
          continue;
        case 'p':
LABEL_17:
          v7 = v8 + 2;
          *a2 = v8 + 2;
          v11 = *((unsigned __int8 *)v8 + 2);
          *(_BYTE *)(this + 52) = v11;
          if (v11)
            continue;
          exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(exception, "Invalid format string (no padding character after p)");
          goto LABEL_43;
        case 'r':
LABEL_22:
          *(_DWORD *)this = 2;
          continue;
        default:
          if ((char)v10 == 119)
          {
LABEL_23:
            *(_BYTE *)(this + 16) = 1;
            *a2 = v8 + 2;
            v12 = *((unsigned __int8 *)v8 + 2);
            if ((v12 - 48) > 9)
              goto LABEL_50;
            v13 = 0;
            v14 = v8 + 3;
            do
            {
              *a2 = v14;
              v13 = (v12 - 48) + 10 * v13;
              v15 = v14++;
              v16 = *(unsigned __int8 *)v15;
              v7 = v15 - 1;
              v12 = v16;
            }
            while ((v16 - 58) >= 0xFFFFFFF6);
            *(_QWORD *)(this + 24) = v13;
            *a2 = v7;
          }
          else
          {
            if ((char)v10 != 120)
            {
LABEL_49:
              exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
              std::runtime_error::runtime_error(exception, "Invalid format string (unexpected formatting specifier)");
              goto LABEL_43;
            }
LABEL_41:
            *(_DWORD *)(this + 4) = 2;
          }
          break;
      }
    }
  }
  if (v9 != 125)
  {
    if (*v7)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Invalid format options string (no : separator after index).");
    }
    else
    {
LABEL_42:
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Invalid format options string (no terminating } found).");
    }
LABEL_43:
    __cxa_throw(exception, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
  }
LABEL_7:
  *a2 = v8 + 2;
  return this;
}

{
  _BYTE *v2;
  const char *v3;
  int v4;
  uint64_t v5;
  const char *v6;
  const char *v7;
  const char *v8;
  int v9;
  int v10;
  int v11;
  int v12;
  uint64_t v13;
  const char *v14;
  const char *v15;
  int v16;
  int v17;
  int v18;
  uint64_t v19;
  const char *v20;
  const char *v21;
  int v22;
  std::runtime_error *exception;

  *(_QWORD *)this = 2;
  *(_QWORD *)(this + 8) = 0;
  *(_BYTE *)(this + 16) = 0;
  *(_QWORD *)(this + 24) = 0;
  *(_BYTE *)(this + 32) = 0;
  *(_QWORD *)(this + 40) = 0;
  *(_DWORD *)(this + 48) = 11008;
  *(_WORD *)(this + 52) = 32;
  v2 = *a2;
  v3 = *a2 + 1;
  *a2 = v3;
  if (*v2 != 123)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Invalid format options string (must begin with '{').");
    goto LABEL_43;
  }
  v4 = *(unsigned __int8 *)v3;
  if ((v4 - 48) > 9)
  {
LABEL_50:
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Invalid format string- missing numeric value.");
    goto LABEL_43;
  }
  v5 = 0;
  v6 = v2 + 2;
  do
  {
    v7 = v6;
    *a2 = v6;
    v5 = (v4 - 48) + 10 * v5;
    v8 = v6 - 1;
    v4 = *(unsigned __int8 *)v6++;
  }
  while ((v4 - 58) >= 0xFFFFFFF6);
  *(_QWORD *)(this + 8) = v5;
  v9 = *(unsigned __int8 *)v7;
  if (v9 == 58)
  {
    while (1)
    {
      v8 = v7++;
      *a2 = v7;
      v10 = *((unsigned __int8 *)v8 + 1);
      if (v10 == 125)
        goto LABEL_7;
      if (!v8[1])
        goto LABEL_42;
      if ((char)v10 <= 97)
      {
        if ((char)v10 <= 75)
        {
          switch((char)v10)
          {
            case '&':
              *(_BYTE *)(this + 53) = 1;
              continue;
            case '\'':
            case '(':
            case ')':
            case '*':
            case '-':
            case '/':
              goto LABEL_49;
            case '+':
              *(_BYTE *)(this + 48) = 1;
              v7 = v8 + 2;
              *a2 = v8 + 2;
              v17 = *((unsigned __int8 *)v8 + 2);
              *(_BYTE *)(this + 49) = v17;
              if (v17)
                continue;
              exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
              std::runtime_error::runtime_error(exception, "Invalid format string (no positive number indicator character after +)");
              goto LABEL_43;
            case ',':
              continue;
            case '.':
              *(_BYTE *)(this + 32) = 1;
              *a2 = v8 + 2;
              v18 = *((unsigned __int8 *)v8 + 2);
              if ((v18 - 48) > 9)
                goto LABEL_50;
              v19 = 0;
              v20 = v8 + 3;
              do
              {
                *a2 = v20;
                v19 = (v18 - 48) + 10 * v19;
                v21 = v20++;
                v22 = *(unsigned __int8 *)v21;
                v7 = v21 - 1;
                v18 = v22;
              }
              while ((v22 - 58) >= 0xFFFFFFF6);
              *(_QWORD *)(this + 40) = v19;
              *a2 = v7;
              continue;
            case '0':
              *(_BYTE *)(this + 50) = 1;
              continue;
            default:
              if ((char)v10 == 67)
                goto LABEL_28;
              goto LABEL_49;
          }
        }
        switch((char)v10)
        {
          case 'P':
            goto LABEL_17;
          case 'Q':
          case 'S':
          case 'T':
          case 'U':
          case 'V':
            goto LABEL_49;
          case 'R':
            goto LABEL_22;
          case 'W':
            goto LABEL_23;
          case 'X':
            *(_BYTE *)(this + 51) = 1;
            goto LABEL_41;
          default:
            if ((char)v10 == 76)
              goto LABEL_30;
            goto LABEL_49;
        }
      }
      switch((char)v10)
      {
        case 'b':
          *(_DWORD *)(this + 4) = 3;
          continue;
        case 'c':
LABEL_28:
          *(_DWORD *)this = 1;
          continue;
        case 'd':
          *(_DWORD *)(this + 4) = 0;
          continue;
        case 'e':
        case 'f':
        case 'g':
        case 'h':
        case 'i':
        case 'j':
        case 'k':
        case 'm':
        case 'n':
        case 'q':
          goto LABEL_49;
        case 'l':
LABEL_30:
          *(_DWORD *)this = 0;
          continue;
        case 'o':
          *(_DWORD *)(this + 4) = 1;
          continue;
        case 'p':
LABEL_17:
          v7 = v8 + 2;
          *a2 = v8 + 2;
          v11 = *((unsigned __int8 *)v8 + 2);
          *(_BYTE *)(this + 52) = v11;
          if (v11)
            continue;
          exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(exception, "Invalid format string (no padding character after p)");
          goto LABEL_43;
        case 'r':
LABEL_22:
          *(_DWORD *)this = 2;
          continue;
        default:
          if ((char)v10 == 119)
          {
LABEL_23:
            *(_BYTE *)(this + 16) = 1;
            *a2 = v8 + 2;
            v12 = *((unsigned __int8 *)v8 + 2);
            if ((v12 - 48) > 9)
              goto LABEL_50;
            v13 = 0;
            v14 = v8 + 3;
            do
            {
              *a2 = v14;
              v13 = (v12 - 48) + 10 * v13;
              v15 = v14++;
              v16 = *(unsigned __int8 *)v15;
              v7 = v15 - 1;
              v12 = v16;
            }
            while ((v16 - 58) >= 0xFFFFFFF6);
            *(_QWORD *)(this + 24) = v13;
            *a2 = v7;
          }
          else
          {
            if ((char)v10 != 120)
            {
LABEL_49:
              exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
              std::runtime_error::runtime_error(exception, "Invalid format string (unexpected formatting specifier)");
              goto LABEL_43;
            }
LABEL_41:
            *(_DWORD *)(this + 4) = 2;
          }
          break;
      }
    }
  }
  if (v9 != 125)
  {
    if (*v7)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Invalid format options string (no : separator after index).");
    }
    else
    {
LABEL_42:
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Invalid format options string (no terminating } found).");
    }
LABEL_43:
    __cxa_throw(exception, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
  }
LABEL_7:
  *a2 = v8 + 2;
  return this;
}

void sub_20A794E08(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20A79522C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::string *mediaplatform::CopyFormatSectionToResult(std::string *__s, std::string *this, std::string::size_type __pos, std::string::size_type __n1, int a5)
{
  std::string *v6;
  int v7;
  int v8;
  std::string *v9;

  v6 = __s;
  if (a5)
  {
    while (1)
    {
      v7 = v6->__r_.__value_.__s.__data_[0];
      if (v7 == 123)
      {
        v8 = v6->__r_.__value_.__s.__data_[1];
        v6 = (std::string *)((char *)v6 + 1);
        LOBYTE(v7) = v8;
        if (v8 != 123)
          return __s;
      }
      else if (!v6->__r_.__value_.__s.__data_[0])
      {
        return __s;
      }
      v9 = (std::string *)this->__r_.__value_.__r.__words[0];
      if ((this->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v9 = this;
      v9->__r_.__value_.__s.__data_[__pos++] = v7;
      v6 = (std::string *)((char *)v6 + 1);
    }
  }
  return std::string::replace(this, __pos, __n1, (const std::string::value_type *)__s, __n1);
}

void mediaplatform::FormatPointerImplementation(uint64_t a1@<X0>, uint64_t a2@<X1>, std::string *a3@<X8>)
{
  uint64_t v3;
  _QWORD v4[2];

  v3 = a2;
  v4[0] = &v3;
  v4[1] = a1;
  a3->__r_.__value_.__l.__size_ = 0;
  a3->__r_.__value_.__r.__words[2] = 0;
  a3->__r_.__value_.__r.__words[0] = 0;
  mediaplatform::FormatImplementation<std::string,unsigned long>((std::string *)"<{0}: {1:x}>", a3, 0, (uint64_t)v4);
}

void sub_20A795318(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void mediaplatform::FormatImplementation<std::string,unsigned long>(std::string *a1, std::string *a2, std::string::size_type a3, uint64_t a4)
{
  char v8;
  std::string *v9;
  std::string::size_type v10;
  int v11;
  char *v12;
  unint64_t v13;
  unint64_t *v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  char *v20;
  _BYTE *v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char *v27;
  uint64_t v28;
  char *v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  char *v36;
  uint64_t v37;
  char *v38;
  int v39;
  uint64_t v40;
  char *v41;
  char *v42;
  unsigned __int8 *v43;
  int v44;
  std::runtime_error *exception;
  unint64_t v46;
  uint64_t v47;
  __int128 v48;
  __int128 v49;
  uint64_t v50;
  char *v51;
  unint64_t *v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  uint64_t v56;
  uint64_t v57;
  char v58;
  uint64_t v59;

  v8 = 0;
  v59 = *MEMORY[0x24BDAC8D0];
  v9 = a1;
  v10 = a3;
  while (v9->__r_.__value_.__s.__data_[0] != 123)
  {
    if (!v9->__r_.__value_.__s.__data_[0])
    {
      std::string::resize(a2, v10, 0);
      if (v10 != a3)
        mediaplatform::CopyFormatSectionToResult(a1, a2, a3, v10 - a3, v8 & 1);
      return;
    }
LABEL_7:
    ++v10;
    v9 = (std::string *)((char *)v9 + 1);
  }
  v11 = v9->__r_.__value_.__s.__data_[1];
  if (v11 == 123)
  {
    v8 = 1;
    v9 = (std::string *)((char *)v9 + 1);
    goto LABEL_7;
  }
  if (v11 == 42)
  {
    v51 = &v9->__r_.__value_.__s.__data_[2];
    v39 = v9->__r_.__value_.__s.__data_[2];
    if ((v39 - 48) > 9)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Invalid format string- missing numeric value.");
    }
    else
    {
      v40 = 0;
      v41 = &v9->__r_.__value_.__s.__data_[3];
      do
      {
        v42 = v41;
        v51 = v41;
        v40 = (v39 - 48) + 10 * v40;
        ++v41;
        v44 = *v42;
        v43 = (unsigned __int8 *)(v42 - 1);
        v39 = v44;
      }
      while ((v44 - 58) >= 0xFFFFFFF6);
      v51 = (char *)(v43 + 2);
      if (*(v41 - 1) == 125)
        mediaplatform::FormatterParameters<0ul,std::string,unsigned long>::formatOptionsAtIndex<std::string,unsigned long>(v40);
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Invalid format options reference: Must be of form {*<index>} but no trailing '}' found.");
    }
    __cxa_throw(exception, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
  }
  v51 = (char *)v9;
  mediaplatform::FormatOptions::FormatOptions((uint64_t)&v46, (const char **)&v51);
  v12 = v51;
  if (v47)
  {
    if (v47 != 1)
      mediaplatform::FormatterParameters<2ul>::formatParameterAtIndex<mediaplatform::FormatterParameters<0ul,std::string,unsigned long>>();
    v13 = **(_QWORD **)a4;
    v14 = &v46;
    v52 = &v46;
    v57 = 0;
    v58 = 1;
    switch(HIDWORD(v46))
    {
      case 0:
        v15 = 71;
        do
        {
          *((_BYTE *)&v52 + v15--) = (v13 % 0xA) | 0x30;
          v16 = v13 >= 0xA;
          v13 /= 0xAuLL;
        }
        while (v16);
        goto LABEL_38;
      case 1:
        v15 = 71;
        do
        {
          *((_BYTE *)&v52 + v15--) = v13 & 7 | 0x30;
          v16 = v13 >= 8;
          v13 >>= 3;
        }
        while (v16);
        goto LABEL_38;
      case 2:
        v21 = &mediaplatform::TypeFormatterUpperHexMapping;
        if (!BYTE3(v50))
          v21 = &mediaplatform::TypeFormatterLowerHexMapping;
        v15 = 71;
        do
        {
          *((_BYTE *)&v52 + v15--) = v21[v13 & 0xF];
          v16 = v13 >= 0x10;
          v13 >>= 4;
        }
        while (v16);
        goto LABEL_38;
      case 3:
        v15 = 71;
        do
        {
          *((_BYTE *)&v52 + v15--) = v13 & 1 | 0x30;
          v16 = v13 >= 2;
          v13 >>= 1;
        }
        while (v16);
LABEL_38:
        v22 = v15 - 7;
        v57 = v15 - 7;
        v14 = v52;
        v23 = v58 == 0;
        if (!v58)
          goto LABEL_42;
        goto LABEL_41;
      default:
        v23 = 0;
        v22 = 0;
LABEL_41:
        if (*((_BYTE *)v14 + 48))
LABEL_42:
          v24 = 65;
        else
          v24 = 64;
        v25 = v24 - v22;
        if (*((_BYTE *)v14 + 50) && v25 <= v14[3])
          v25 = v14[3];
        v26 = *((_QWORD *)&v48 + 1);
        if (*((_QWORD *)&v48 + 1) <= v25)
          v26 = v25;
        if ((_BYTE)v48)
          v25 = v26;
        mediaplatform::FormatImplementation<std::string,unsigned long>(v12, a2, v25 + v10, a4);
        if ((a2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v27 = (char *)a2;
        else
          v27 = (char *)a2->__r_.__value_.__r.__words[0];
        if (v23 || *((_BYTE *)v14 + 48))
          v28 = 65;
        else
          v28 = 64;
        v29 = &v27[v10];
        v30 = v28 - v22;
        if (*((_BYTE *)v14 + 50) && v30 <= v14[3])
          v30 = v14[3];
        if (!(_BYTE)v48)
          goto LABEL_67;
        v31 = *((_QWORD *)&v48 + 1);
        v32 = *((_QWORD *)&v48 + 1) - v30;
        if (*((_QWORD *)&v48 + 1) <= v30)
          goto LABEL_67;
        if ((_DWORD)v46)
        {
          if ((_DWORD)v46 == 1)
          {
            v33 = v32 >> 1;
            if (v32 >= 2)
            {
              if (v33 <= 1)
                v34 = 1;
              else
                v34 = v32 >> 1;
              do
              {
                *v29++ = BYTE4(v50);
                --v34;
              }
              while (v34);
            }
            mediaplatform::TypeFormatter<long long,void>::formatAtLocation<std::__wrap_iter<char *>>((char *)&v52, v29);
            if (v32 != v33)
            {
              v35 = v32 - (v32 >> 1);
              v36 = &v29[v30];
              if (v35 <= 1)
                v35 = 1;
              v37 = -(uint64_t)v35;
              do
              {
                *v36++ = BYTE4(v50);
                v16 = __CFADD__(v37++, 1);
              }
              while (!v16);
            }
          }
          else if ((_DWORD)v46 == 2)
          {
            if (*((_QWORD *)&v48 + 1) != v30)
            {
              do
              {
                *v29++ = BYTE4(v50);
                --v32;
              }
              while (v32);
            }
LABEL_67:
            mediaplatform::TypeFormatter<long long,void>::formatAtLocation<std::__wrap_iter<char *>>((char *)&v52, v29);
          }
        }
        else
        {
          mediaplatform::TypeFormatter<long long,void>::formatAtLocation<std::__wrap_iter<char *>>((char *)&v52, &v27[v10]);
          if (v31 != v30)
          {
            v38 = &v27[v30];
            do
            {
              v38[v10] = BYTE4(v50);
              ++v38;
              --v32;
            }
            while (v32);
          }
        }
        break;
    }
  }
  else
  {
    v17 = *(_QWORD *)(a4 + 8);
    v52 = (unint64_t *)v17;
    v53 = v46;
    v54 = v48;
    v55 = v49;
    v56 = v50;
    if (*(char *)(v17 + 23) < 0)
      v18 = *(_QWORD *)(v17 + 8);
    else
      v18 = *(unsigned __int8 *)(v17 + 23);
    v19 = *((_QWORD *)&v48 + 1);
    if (*((_QWORD *)&v48 + 1) <= v18)
      v19 = v18;
    if ((_BYTE)v48)
      v18 = v19;
    mediaplatform::FormatImplementation<std::string,unsigned long>(v51, a2, v18 + v10, a4);
    if ((a2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v20 = (char *)a2;
    else
      v20 = (char *)a2->__r_.__value_.__r.__words[0];
    mediaplatform::FormatOptions::justifyNativeValueOfLength<std::__wrap_iter<char *>,std::string>(&v46, &v20[v10], (uint64_t)&v52);
  }
  if (v10 != a3)
    mediaplatform::CopyFormatSectionToResult(a1, a2, a3, v10 - a3, v8 & 1);
}

void sub_20A79588C(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void mediaplatform::FormatterParameters<0ul,std::string,unsigned long>::formatOptionsAtIndex<std::string,unsigned long>(uint64_t a1)
{
  std::runtime_error *exception;

  if (!a1)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Requested parameter is not an FormatOptions instance.");
    __cxa_throw(exception, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
  }
  mediaplatform::FormatterParameters<1ul,unsigned long>::formatOptionsAtIndex<std::string,unsigned long>(a1);
}

void sub_20A7958F0(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void mediaplatform::FormatterParameters<2ul>::formatParameterAtIndex<mediaplatform::FormatterParameters<0ul,std::string,unsigned long>>()
{
  std::runtime_error *exception;

  exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
  std::runtime_error::runtime_error(exception, "Parameter index out of bounds.");
  __cxa_throw(exception, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
}

void sub_20A795940(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void mediaplatform::FormatterParameters<1ul,unsigned long>::formatOptionsAtIndex<std::string,unsigned long>(uint64_t a1)
{
  std::runtime_error *exception;

  if (a1 == 1)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Requested parameter is not an FormatOptions instance.");
    __cxa_throw(exception, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
  }
  mediaplatform::FormatterParameters<2ul>::formatOptionsAtIndex<std::string,unsigned long>();
}

void sub_20A79599C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void mediaplatform::FormatterParameters<2ul>::formatOptionsAtIndex<std::string,unsigned long>()
{
  std::runtime_error *exception;

  exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
  std::runtime_error::runtime_error(exception, "Parameter index out of bounds.");
  __cxa_throw(exception, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
}

void sub_20A7959EC(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void mlcore::Artwork::~Artwork(mlcore::Artwork *this)
{
  *(_QWORD *)this = off_24C33A860;
  mlcore::PropertyCacheBase<long long,int,double,std::string,mediaplatform::Data>::~PropertyCacheBase((_QWORD *)this + 1);
}

{
  *(_QWORD *)this = off_24C33A860;
  mlcore::PropertyCacheBase<long long,int,double,std::string,mediaplatform::Data>::~PropertyCacheBase((_QWORD *)this + 1);
  JUMPOUT(0x20BD27AFCLL);
}

uint64_t mlcore::TypedEntityClass<mlcore::Artwork>::sharedPointer()
{
  unint64_t v0;
  char v2;
  char **v3;
  char *v4;

  v0 = atomic_load(&mlcore::TypedEntityClass<mlcore::Artwork>::sharedPointer(void)::__once);
  if (v0 != -1)
  {
    v4 = &v2;
    v3 = &v4;
    std::__call_once(&mlcore::TypedEntityClass<mlcore::Artwork>::sharedPointer(void)::__once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::TypedEntityClass<mlcore::Artwork>::sharedPointer(void)::{lambda(void)#1} &&>>);
  }
  return mlcore::TypedEntityClass<mlcore::Artwork>::sharedPointer(void)::__sharedPointer;
}

double std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::TypedEntityClass<mlcore::Artwork>::sharedPointer(void)::{lambda(void)#1} &&>>()
{
  uint64_t v0;
  double result;

  v0 = operator new();
  result = 0.0;
  *(_OWORD *)(v0 + 16) = 0u;
  *(_OWORD *)(v0 + 32) = 0u;
  *(_OWORD *)(v0 + 48) = 0u;
  *(_OWORD *)(v0 + 64) = 0u;
  *(_OWORD *)(v0 + 80) = 0u;
  *(_QWORD *)(v0 + 96) = 0;
  *(_DWORD *)(v0 + 104) = 1065353216;
  *(_OWORD *)(v0 + 112) = 0u;
  *(_OWORD *)(v0 + 128) = 0u;
  *(_DWORD *)(v0 + 144) = 1065353216;
  *(_QWORD *)v0 = &off_24C339188;
  *(_QWORD *)(v0 + 8) = 850045863;
  mlcore::TypedEntityClass<mlcore::Artwork>::sharedPointer(void)::__sharedPointer = v0;
  return result;
}

void mlcore::TypedEntityClass<mlcore::Artwork>::~TypedEntityClass(mlcore::EntityClass *a1)
{
  mlcore::EntityClass::~EntityClass(a1);
  JUMPOUT(0x20BD27AFCLL);
}

uint64_t mlcore::TypedEntityClass<mlcore::Artwork>::description(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
}

__n128 mlcore::TypedEntityClass<mlcore::Artwork>::create@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, __n128 *a4@<X8>)
{
  char *v8;
  uint64_t v9;
  unint64_t *v10;
  uint64_t v11;
  __n128 result;
  __n128 v13;
  unint64_t v14[3];
  unint64_t *v15;
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  v8 = (char *)operator new(0x100uLL);
  *((_QWORD *)v8 + 1) = 0;
  *((_QWORD *)v8 + 2) = 0;
  *(_QWORD *)v8 = &off_24C33D4E0;
  *(_OWORD *)(v8 + 40) = 0u;
  *(_OWORD *)(v8 + 56) = 0u;
  *((_DWORD *)v8 + 18) = 1065353216;
  *((_OWORD *)v8 + 5) = 0u;
  *((_OWORD *)v8 + 6) = 0u;
  *((_DWORD *)v8 + 28) = 1065353216;
  *(_OWORD *)(v8 + 120) = 0u;
  *(_OWORD *)(v8 + 136) = 0u;
  *((_DWORD *)v8 + 38) = 1065353216;
  *((_OWORD *)v8 + 10) = 0u;
  *((_OWORD *)v8 + 11) = 0u;
  *((_DWORD *)v8 + 48) = 1065353216;
  *(_OWORD *)(v8 + 216) = 0u;
  *((_DWORD *)v8 + 58) = 1065353216;
  *((_QWORD *)v8 + 30) = &unk_24C3371E8;
  *((_QWORD *)v8 + 31) = a2;
  *(_OWORD *)(v8 + 200) = 0u;
  v9 = (uint64_t)(v8 + 200);
  *((_QWORD *)v8 + 4) = &off_24C3371C0;
  *((_QWORD *)v8 + 3) = &off_24C33A9F0;
  v13.n128_u64[0] = (unint64_t)(v8 + 24);
  v13.n128_u64[1] = (unint64_t)v8;
  v14[0] = (unint64_t)&off_24C33B140;
  v15 = v14;
  mlcore::PropertyCache::mergePropertiesFromCache((uint64_t)(v8 + 32), a3, (uint64_t)v14);
  v10 = v15;
  if (v15 == v14)
  {
    v11 = 4;
    v10 = v14;
    goto LABEL_5;
  }
  if (v15)
  {
    v11 = 5;
LABEL_5:
    (*(void (**)(void))(*v10 + 8 * v11))();
  }
  v14[0] = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 112))(a1);
  std::__hash_table<std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>,std::__unordered_map_hasher<mlcore::ModelProperty<long long> *,std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>,std::hash<mlcore::ModelProperty<long long> *>,std::equal_to<mlcore::ModelProperty<long long> *>,true>,std::__unordered_map_equal<mlcore::ModelProperty<long long> *,std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>,std::equal_to<mlcore::ModelProperty<long long> *>,std::hash<mlcore::ModelProperty<long long> *>,true>,std::allocator<std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>>>::__emplace_unique_key_args<mlcore::ModelProperty<long long> *,std::piecewise_construct_t const&,std::tuple<mlcore::ModelProperty<long long> * const&>,std::tuple<>>(v9, v14[0], v14)[3] = a2;
  result = v13;
  *a4 = v13;
  return result;
}

void sub_20A795CDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15)
{
  char *v15;
  char *v17;
  uint64_t v18;

  v17 = a15;
  if (a15 == v15)
  {
    v18 = 4;
    v17 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v18 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v17 + 8 * v18))();
LABEL_6:
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t mlcore::TypedEntityClass<mlcore::Artwork>::name(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
}

uint64_t mlcore::TypedEntityClass<mlcore::Artwork>::entityType()
{
  return 0xFFFFFFFFLL;
}

BOOL mlcore::TypedEntityClass<mlcore::Artwork>::isRevisionTrackable(uint64_t a1)
{
  return (*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1) != -1;
}

uint64_t mlcore::TypedEntityClass<mlcore::Artwork>::isCloudUpdatable()
{
  return 0;
}

uint64_t mlcore::TypedEntityClass<mlcore::Artwork>::databaseTable()
{
  return *(_QWORD *)mediaplatform::Singleton<mlcore::ArtworkTable>::sharedInstance();
}

void mlcore::TypedEntityClass<mlcore::Artwork>::databaseTablesToDeleteFrom(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

void mlcore::TypedEntityClass<mlcore::Artwork>::databaseTablesToInsertInto(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

uint64_t mlcore::TypedEntityClass<mlcore::Artwork>::persistentIDProperty()
{
  return 0;
}

uint64_t mlcore::TypedEntityClass<mlcore::Artwork>::representativeItemPersistentIDProperty()
{
  return 0;
}

uint64_t mlcore::TypedEntityClass<mlcore::Artwork>::trackForeignPersistentIDProperty()
{
  return 0;
}

uint64_t mlcore::TypedEntityClass<mlcore::Artwork>::trackForeignOrderingProperty()
{
  return 0;
}

uint64_t mlcore::TypedEntityClass<mlcore::Artwork>::sectionPropertyForOrderingProperty()
{
  return 0;
}

uint64_t mediaplatform::Singleton<mlcore::ArtworkTable>::sharedInstance()
{
  unsigned __int8 v0;
  mlcore::ArtworkTable **v2;

  if ((v0 & 1) == 0
  {
    v2 = (mlcore::ArtworkTable **)operator new();
    _ZNSt3__115allocate_sharedB8ne180100IN6mlcore12ArtworkTableENS_9allocatorIS2_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(v2);
    mediaplatform::Singleton<mlcore::ArtworkTable>::sharedInstance(void)::_sharedInstance = (uint64_t)v2;
  }
  return mediaplatform::Singleton<mlcore::ArtworkTable>::sharedInstance(void)::_sharedInstance;
}

void sub_20A795E30(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x20BD27AFC](v1, 0x20C40A4A59CD2);
  _Unwind_Resume(a1);
}

mlcore::ArtworkTable *_ZNSt3__115allocate_sharedB8ne180100IN6mlcore12ArtworkTableENS_9allocatorIS2_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(mlcore::ArtworkTable **a1)
{
  _QWORD *v2;
  mlcore::ArtworkTable *result;

  v2 = operator new(0x2C8uLL);
  v2[1] = 0;
  v2[2] = 0;
  *v2 = &off_24C33C4E8;
  result = mlcore::ArtworkTable::ArtworkTable((mlcore::ArtworkTable *)(v2 + 3));
  *a1 = result;
  a1[1] = (mlcore::ArtworkTable *)v2;
  return result;
}

void sub_20A795EA8(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<mlcore::ArtworkTable>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C33C4E8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<mlcore::ArtworkTable>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C33C4E8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x20BD27AFCLL);
}

uint64_t std::__shared_ptr_emplace<mlcore::ArtworkTable>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__shared_ptr_emplace<mlcore::Artwork>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C33D4E0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<mlcore::Artwork>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C33D4E0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x20BD27AFCLL);
}

uint64_t std::__shared_ptr_emplace<mlcore::Artwork>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t mlcore::ArtworkPropertyToken(mlcore *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&mlcore::ArtworkPropertyToken(void)::once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&mlcore::ArtworkPropertyToken(void)::once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ArtworkPropertyToken(void)::$_0 &&>>);
  }
  return mlcore::ArtworkPropertyToken(void)::property;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ArtworkPropertyToken(void)::$_0 &&>>()
{
  uint64_t v0;
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  mlcore::ArtworkTable **v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  std::string *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  std::string *v19;
  __int128 v20;
  std::string v21;
  std::string __str;
  _QWORD v23[2];

  v0 = operator new();
  v1 = (_QWORD *)mediaplatform::Singleton<mlcore::ArtworkTable>::sharedInstance();
  v2 = (std::__shared_weak_count *)v1[1];
  v23[0] = *v1;
  v23[1] = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  v5 = (mlcore::ArtworkTable **)mediaplatform::Singleton<mlcore::ArtworkTable>::sharedInstance();
  mlcore::ArtworkTable::artworkTokenColumn(*v5, (uint64_t)&__str);
  mlcore::DatabaseModelProperty<std::string>::DatabaseModelProperty(v0, v23, (uint64_t)&__str);
  mlcore::ArtworkPropertyToken(void)::property = v0;
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&__str);
  if (v2)
  {
    v6 = (unint64_t *)&v2->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v8 = mlcore::ArtworkPropertyToken(void)::property;
  std::string::basic_string[abi:ne180100]<0>(&__str, "");
  std::string::operator=((std::string *)(v8 + 40), &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  v9 = mlcore::TypedEntityClass<mlcore::Artwork>::sharedPointer();
  v10 = mlcore::ArtworkPropertyToken(void)::property;
  v11 = mediaplatform::Singleton<mlcore::ArtworkTable>::sharedInstance();
  v12 = *(_QWORD *)v11;
  if (*(char *)(*(_QWORD *)v11 + 31) >= 0)
    v13 = *(unsigned __int8 *)(*(_QWORD *)v11 + 31);
  else
    v13 = *(_QWORD *)(*(_QWORD *)v11 + 16);
  v14 = &v21;
  std::string::basic_string[abi:ne180100]((uint64_t)&v21, v13 + 1);
  if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v14 = (std::string *)v21.__r_.__value_.__r.__words[0];
  if (v13)
  {
    v17 = *(char **)(v12 + 8);
    v16 = (char *)(v12 + 8);
    v15 = v17;
    if (v16[23] >= 0)
      v18 = v16;
    else
      v18 = v15;
    memmove(v14, v18, v13);
  }
  *(_WORD *)((char *)&v14->__r_.__value_.__l.__data_ + v13) = 46;
  v19 = std::string::append(&v21, "token");
  v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  __str.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  mlcore::EntityClass::setPropertyForName(v9, v10, &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
}

void sub_20A796188(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

uint64_t mlcore::ArtworkPropertyType(mlcore *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&mlcore::ArtworkPropertyType(void)::once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&mlcore::ArtworkPropertyType(void)::once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ArtworkPropertyType(void)::$_0 &&>>);
  }
  return mlcore::ArtworkPropertyType(void)::property;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ArtworkPropertyType(void)::$_0 &&>>()
{
  uint64_t v0;
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  mlcore::ArtworkTable **v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  std::string *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  std::string *v19;
  __int128 v20;
  std::string v21;
  std::string __p;
  char v23;
  _QWORD v24[2];

  v0 = operator new();
  v1 = (_QWORD *)mediaplatform::Singleton<mlcore::ArtworkTable>::sharedInstance();
  v2 = (std::__shared_weak_count *)v1[1];
  v24[0] = *v1;
  v24[1] = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  v5 = (mlcore::ArtworkTable **)mediaplatform::Singleton<mlcore::ArtworkTable>::sharedInstance();
  mlcore::ArtworkTable::artworkTypeColumn(*v5, (uint64_t)&__p);
  mlcore::DatabaseModelProperty<int>::DatabaseModelProperty(v0, v24, (uint64_t)&__p);
  mlcore::ArtworkPropertyType(void)::property = v0;
  if (v23 < 0)
    operator delete((void *)__p.__r_.__value_.__l.__size_);
  if (v2)
  {
    v6 = (unint64_t *)&v2->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v8 = mlcore::ArtworkPropertyType(void)::property;
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  std::string::operator=((std::string *)(v8 + 40), &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v9 = mlcore::TypedEntityClass<mlcore::Artwork>::sharedPointer();
  v10 = mlcore::ArtworkPropertyType(void)::property;
  v11 = mediaplatform::Singleton<mlcore::ArtworkTable>::sharedInstance();
  v12 = *(_QWORD *)v11;
  if (*(char *)(*(_QWORD *)v11 + 31) >= 0)
    v13 = *(unsigned __int8 *)(*(_QWORD *)v11 + 31);
  else
    v13 = *(_QWORD *)(*(_QWORD *)v11 + 16);
  v14 = &v21;
  std::string::basic_string[abi:ne180100]((uint64_t)&v21, v13 + 1);
  if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v14 = (std::string *)v21.__r_.__value_.__r.__words[0];
  if (v13)
  {
    v17 = *(char **)(v12 + 8);
    v16 = (char *)(v12 + 8);
    v15 = v17;
    if (v16[23] >= 0)
      v18 = v16;
    else
      v18 = v15;
    memmove(v14, v18, v13);
  }
  *(_WORD *)((char *)&v14->__r_.__value_.__l.__data_ + v13) = 46;
  v19 = std::string::append(&v21, "type");
  v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  __p.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  mlcore::EntityClass::setPropertyForName(v9, v10, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
}

void sub_20A79646C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

uint64_t mlcore::ArtworkPropertySourceType(mlcore *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&mlcore::ArtworkPropertySourceType(void)::once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&mlcore::ArtworkPropertySourceType(void)::once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ArtworkPropertySourceType(void)::$_0 &&>>);
  }
  return mlcore::ArtworkPropertySourceType(void)::property;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ArtworkPropertySourceType(void)::$_0 &&>>()
{
  uint64_t v0;
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  mlcore::ArtworkTable **v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  std::string *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  std::string *v19;
  __int128 v20;
  std::string v21;
  std::string __p;
  char v23;
  _QWORD v24[2];

  v0 = operator new();
  v1 = (_QWORD *)mediaplatform::Singleton<mlcore::ArtworkTable>::sharedInstance();
  v2 = (std::__shared_weak_count *)v1[1];
  v24[0] = *v1;
  v24[1] = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  v5 = (mlcore::ArtworkTable **)mediaplatform::Singleton<mlcore::ArtworkTable>::sharedInstance();
  mlcore::ArtworkTable::artworkSourceTypeColumn(*v5, (uint64_t)&__p);
  mlcore::DatabaseModelProperty<int>::DatabaseModelProperty(v0, v24, (uint64_t)&__p);
  mlcore::ArtworkPropertySourceType(void)::property = v0;
  if (v23 < 0)
    operator delete((void *)__p.__r_.__value_.__l.__size_);
  if (v2)
  {
    v6 = (unint64_t *)&v2->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v8 = mlcore::ArtworkPropertySourceType(void)::property;
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  std::string::operator=((std::string *)(v8 + 40), &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v9 = mlcore::TypedEntityClass<mlcore::Artwork>::sharedPointer();
  v10 = mlcore::ArtworkPropertySourceType(void)::property;
  v11 = mediaplatform::Singleton<mlcore::ArtworkTable>::sharedInstance();
  v12 = *(_QWORD *)v11;
  if (*(char *)(*(_QWORD *)v11 + 31) >= 0)
    v13 = *(unsigned __int8 *)(*(_QWORD *)v11 + 31);
  else
    v13 = *(_QWORD *)(*(_QWORD *)v11 + 16);
  v14 = &v21;
  std::string::basic_string[abi:ne180100]((uint64_t)&v21, v13 + 1);
  if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v14 = (std::string *)v21.__r_.__value_.__r.__words[0];
  if (v13)
  {
    v17 = *(char **)(v12 + 8);
    v16 = (char *)(v12 + 8);
    v15 = v17;
    if (v16[23] >= 0)
      v18 = v16;
    else
      v18 = v15;
    memmove(v14, v18, v13);
  }
  *(_WORD *)((char *)&v14->__r_.__value_.__l.__data_ + v13) = 46;
  v19 = std::string::append(&v21, "sourceType");
  v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  __p.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  mlcore::EntityClass::setPropertyForName(v9, v10, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
}

void sub_20A796758(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

uint64_t mlcore::ArtworkPropertyRelativePath(mlcore *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&mlcore::ArtworkPropertyRelativePath(void)::once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&mlcore::ArtworkPropertyRelativePath(void)::once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ArtworkPropertyRelativePath(void)::$_0 &&>>);
  }
  return mlcore::ArtworkPropertyRelativePath(void)::property;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::ArtworkPropertyRelativePath(void)::$_0 &&>>()
{
  uint64_t v0;
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  mlcore::ArtworkTable **v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  std::string *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  std::string *v19;
  __int128 v20;
  std::string v21;
  std::string __str;
  _QWORD v23[2];

  v0 = operator new();
  v1 = (_QWORD *)mediaplatform::Singleton<mlcore::ArtworkTable>::sharedInstance();
  v2 = (std::__shared_weak_count *)v1[1];
  v23[0] = *v1;
  v23[1] = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  v5 = (mlcore::ArtworkTable **)mediaplatform::Singleton<mlcore::ArtworkTable>::sharedInstance();
  mlcore::ArtworkTable::relativePathColumn(*v5, (uint64_t)&__str);
  mlcore::DatabaseModelProperty<std::string>::DatabaseModelProperty(v0, v23, (uint64_t)&__str);
  mlcore::ArtworkPropertyRelativePath(void)::property = v0;
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&__str);
  if (v2)
  {
    v6 = (unint64_t *)&v2->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v8 = mlcore::ArtworkPropertyRelativePath(void)::property;
  std::string::basic_string[abi:ne180100]<0>(&__str, "");
  std::string::operator=((std::string *)(v8 + 40), &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  v9 = mlcore::TypedEntityClass<mlcore::Artwork>::sharedPointer();
  v10 = mlcore::ArtworkPropertyRelativePath(void)::property;
  v11 = mediaplatform::Singleton<mlcore::ArtworkTable>::sharedInstance();
  v12 = *(_QWORD *)v11;
  if (*(char *)(*(_QWORD *)v11 + 31) >= 0)
    v13 = *(unsigned __int8 *)(*(_QWORD *)v11 + 31);
  else
    v13 = *(_QWORD *)(*(_QWORD *)v11 + 16);
  v14 = &v21;
  std::string::basic_string[abi:ne180100]((uint64_t)&v21, v13 + 1);
  if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v14 = (std::string *)v21.__r_.__value_.__r.__words[0];
  if (v13)
  {
    v17 = *(char **)(v12 + 8);
    v16 = (char *)(v12 + 8);
    v15 = v17;
    if (v16[23] >= 0)
      v18 = v16;
    else
      v18 = v15;
    memmove(v14, v18, v13);
  }
  *(_WORD *)((char *)&v14->__r_.__value_.__l.__data_ + v13) = 46;
  v19 = std::string::append(&v21, "relativePath");
  v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  __str.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  mlcore::EntityClass::setPropertyForName(v9, v10, &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
}

void sub_20A796A3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

void mlcore::Artwork::artworkToken(mlcore::Artwork *this@<X0>, std::string *a2@<X8>)
{
  unint64_t v4;

  v4 = mlcore::ArtworkPropertyToken(this);
  mlcore::Entity::valueForProperty<std::string>(a2, (uint64_t)this, v4);
}

void mlcore::Artwork::setArtworkToken(mlcore *a1, uint64_t a2)
{
  std::string::size_type v4;

  v4 = mlcore::ArtworkPropertyToken(a1);
  mlcore::Entity::setValueForProperty<std::string>((uint64_t)a1, a2, v4);
}

uint64_t mlcore::Artwork::artworkType(mlcore::Artwork *this)
{
  unint64_t v2;

  v2 = mlcore::ArtworkPropertyType(this);
  return mlcore::Entity::valueForProperty<int>((uint64_t)this, v2);
}

_QWORD *mlcore::Artwork::setArtworkType(mlcore *a1, int a2)
{
  _QWORD *result;
  unint64_t v5;

  v5 = mlcore::ArtworkPropertyType(a1);
  result = std::__hash_table<std::__hash_value_type<mlcore::ModelProperty<int> *,int>,std::__unordered_map_hasher<mlcore::ModelProperty<int> *,std::__hash_value_type<mlcore::ModelProperty<int> *,int>,std::hash<mlcore::ModelProperty<int> *>,std::equal_to<mlcore::ModelProperty<int> *>,true>,std::__unordered_map_equal<mlcore::ModelProperty<int> *,std::__hash_value_type<mlcore::ModelProperty<int> *,int>,std::equal_to<mlcore::ModelProperty<int> *>,std::hash<mlcore::ModelProperty<int> *>,true>,std::allocator<std::__hash_value_type<mlcore::ModelProperty<int> *,int>>>::__emplace_unique_key_args<mlcore::ModelProperty<int> *,std::piecewise_construct_t const&,std::tuple<mlcore::ModelProperty<int> * const&>,std::tuple<>>((uint64_t)a1 + 136, v5, &v5);
  *((_DWORD *)result + 6) = a2;
  return result;
}

uint64_t mlcore::Artwork::artworkSourceType(mlcore::Artwork *this)
{
  unint64_t v2;

  v2 = mlcore::ArtworkPropertySourceType(this);
  return mlcore::Entity::valueForProperty<int>((uint64_t)this, v2);
}

_QWORD *mlcore::Artwork::setArtworkSourceType(mlcore *a1, int a2)
{
  _QWORD *result;
  unint64_t v5;

  v5 = mlcore::ArtworkPropertySourceType(a1);
  result = std::__hash_table<std::__hash_value_type<mlcore::ModelProperty<int> *,int>,std::__unordered_map_hasher<mlcore::ModelProperty<int> *,std::__hash_value_type<mlcore::ModelProperty<int> *,int>,std::hash<mlcore::ModelProperty<int> *>,std::equal_to<mlcore::ModelProperty<int> *>,true>,std::__unordered_map_equal<mlcore::ModelProperty<int> *,std::__hash_value_type<mlcore::ModelProperty<int> *,int>,std::equal_to<mlcore::ModelProperty<int> *>,std::hash<mlcore::ModelProperty<int> *>,true>,std::allocator<std::__hash_value_type<mlcore::ModelProperty<int> *,int>>>::__emplace_unique_key_args<mlcore::ModelProperty<int> *,std::piecewise_construct_t const&,std::tuple<mlcore::ModelProperty<int> * const&>,std::tuple<>>((uint64_t)a1 + 136, v5, &v5);
  *((_DWORD *)result + 6) = a2;
  return result;
}

void mlcore::Artwork::relativePath(mlcore::Artwork *this@<X0>, std::string *a2@<X8>)
{
  unint64_t v4;

  v4 = mlcore::ArtworkPropertyRelativePath(this);
  mlcore::Entity::valueForProperty<std::string>(a2, (uint64_t)this, v4);
}

void mlcore::Artwork::setRelativePath(mlcore *a1, uint64_t a2)
{
  std::string::size_type v4;

  v4 = mlcore::ArtworkPropertyRelativePath(a1);
  mlcore::Entity::setValueForProperty<std::string>((uint64_t)a1, a2, v4);
}

uint64_t mlcore::Artwork::sourceTypeFromTrackSource(int a1)
{
  if ((a1 - 1) >= 5)
    return 0;
  else
    return (100 * (a1 - 1) + 200);
}

void mediaplatform::DBCPSubpool::~DBCPSubpool(mediaplatform::DBCPSubpool *this)
{
  mediaplatform::DBCPSubpool::~DBCPSubpool(this);
  JUMPOUT(0x20BD27AFCLL);
}

{
  mediaplatform::DBCPSubpool *v2;
  uint64_t v3;
  mediaplatform::DBCPSubpool *v4;
  uint64_t v5;
  mediaplatform::DBCPSubpool *v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  void **v9;

  *(_QWORD *)this = &off_24C330C40;
  std::__tree<std::shared_ptr<mediaplatform::DatabaseConnection>>::destroy(*((_QWORD **)this + 28));
  std::__tree<std::shared_ptr<mediaplatform::DatabaseConnection>>::destroy(*((_QWORD **)this + 25));
  v2 = (mediaplatform::DBCPSubpool *)*((_QWORD *)this + 23);
  if (v2 == (mediaplatform::DBCPSubpool *)((char *)this + 160))
  {
    v3 = 4;
    v2 = (mediaplatform::DBCPSubpool *)((char *)this + 160);
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v2 + 8 * v3))();
LABEL_6:
  v4 = (mediaplatform::DBCPSubpool *)*((_QWORD *)this + 19);
  if (v4 == (mediaplatform::DBCPSubpool *)((char *)this + 128))
  {
    v5 = 4;
    v4 = (mediaplatform::DBCPSubpool *)((char *)this + 128);
  }
  else
  {
    if (!v4)
      goto LABEL_11;
    v5 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v4 + 8 * v5))();
LABEL_11:
  v6 = (mediaplatform::DBCPSubpool *)*((_QWORD *)this + 15);
  if (v6 == (mediaplatform::DBCPSubpool *)((char *)this + 96))
  {
    v7 = 4;
    v6 = (mediaplatform::DBCPSubpool *)((char *)this + 96);
  }
  else
  {
    if (!v6)
      goto LABEL_16;
    v7 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v6 + 8 * v7))();
LABEL_16:
  dispatch_release(*((dispatch_object_t *)this + 11));
  *((_QWORD *)this + 5) = &off_24C331570;
  v9 = (void **)((char *)this + 48);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v9);
  *(_QWORD *)this = &off_24C331440;
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)this + 24);
  v8 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v8)
    std::__shared_weak_count::__release_weak(v8);
}

uint64_t mediaplatform::WorkQueueDispatchTarget::targetQueue@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(this + 32);
  *a2 = *(_QWORD *)(this + 24);
  a2[1] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return this;
}

{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(this + 32);
  *a2 = *(_QWORD *)(this + 24);
  a2[1] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return this;
}

void std::__tree<std::shared_ptr<mediaplatform::DatabaseConnection>>::destroy(_QWORD *a1)
{
  if (a1)
  {
    std::__tree<std::shared_ptr<mediaplatform::DatabaseConnection>>::destroy(*a1);
    std::__tree<std::shared_ptr<mediaplatform::DatabaseConnection>>::destroy(a1[1]);
    std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 4));
    operator delete(a1);
  }
}

void mediaplatform::WorkQueueDispatchTarget::~WorkQueueDispatchTarget(mediaplatform::WorkQueueDispatchTarget *this)
{
  std::__shared_weak_count *v2;

  *(_QWORD *)this = &off_24C331440;
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)this + 24);
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
}

{
  std::__shared_weak_count *v2;

  *(_QWORD *)this = &off_24C331440;
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)this + 24);
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  JUMPOUT(0x20BD27AFCLL);
}

void mediaplatform::DefaultConnectionAllocator(mediaplatform *this@<X0>, const mediaplatform::FilePath *a2@<X1>, _QWORD *a3@<X8>)
{
  char v3;
  _QWORD *v6;
  std::string __p;

  v3 = (char)a2;
  v6 = operator new(0x158uLL);
  v6[1] = 0;
  v6[2] = 0;
  *v6 = &off_24C3318E0;
  mediaplatform::FilePath::str(this, (uint64_t)&__p);
  mediaplatform::DatabaseConnection::DatabaseConnection((uint64_t)(v6 + 3), &__p, v3);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  *a3 = v6 + 3;
  a3[1] = v6;
}

void sub_20A796F7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  std::__shared_weak_count *v15;
  void *v17;

  if (a15 < 0)
    operator delete(__p);
  std::__shared_weak_count::~__shared_weak_count(v15);
  operator delete(v17);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<mediaplatform::DatabaseConnection>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C3318E0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<mediaplatform::DatabaseConnection>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C3318E0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x20BD27AFCLL);
}

void std::__shared_ptr_emplace<mediaplatform::DatabaseConnection>::__on_zero_shared(uint64_t a1)
{
  mediaplatform::DatabaseConnection::~DatabaseConnection((mediaplatform::DatabaseConnection *)(a1 + 24));
}

uint64_t mediaplatform::DatabaseConnectionPool::DatabaseConnectionPool(uint64_t a1, uint64_t a2, std::__shared_weak_count_vtbl *a3, std::__shared_weak_count_vtbl *a4, uint64_t a5)
{
  uint64_t v8;
  std::__shared_weak_count_vtbl *v10;
  std::__shared_weak_count_vtbl *v11;
  char v12[8];

  v10 = a4;
  v11 = a3;
  *(_QWORD *)a1 = &off_24C331570;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)(a1 + 8), *(__int128 **)(a2 + 8), *(__int128 **)(a2 + 16), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 16) - *(_QWORD *)(a2 + 8)) >> 3));
  v8 = *(_QWORD *)(a5 + 24);
  if (v8)
  {
    if (v8 == a5)
    {
      *(_QWORD *)(a1 + 56) = a1 + 32;
      (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a5 + 24) + 24))(*(_QWORD *)(a5 + 24), a1 + 32);
      goto LABEL_6;
    }
    v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8);
  }
  *(_QWORD *)(a1 + 56) = v8;
LABEL_6:
  v12[0] = 1;
  std::allocate_shared[abi:ne180100]<mediaplatform::DBCPSubpool,std::allocator<mediaplatform::DBCPSubpool>,mediaplatform::FilePath &,unsigned long &,BOOL,void>((std::__shared_weak_count **)(a1 + 64), *(__int128 **)(a2 + 8), *(__int128 **)(a2 + 16), &v11, v12);
  v12[0] = 0;
  std::allocate_shared[abi:ne180100]<mediaplatform::DBCPSubpool,std::allocator<mediaplatform::DBCPSubpool>,mediaplatform::FilePath &,unsigned long &,BOOL,void>((std::__shared_weak_count **)(a1 + 80), *(__int128 **)(a2 + 8), *(__int128 **)(a2 + 16), &v10, v12);
  return a1;
}

void sub_20A7970F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  _QWORD *v4;
  uint64_t v5;
  va_list va;

  va_start(va, a4);
  *v4 = v5;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

std::string *std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(std::string *result, __int128 *a2, __int128 *a3, unint64_t a4)
{
  std::string *v6;

  if (a4)
  {
    v6 = result;
    std::vector<mlcore::SortDescriptor>::__vallocate[abi:ne180100](result, a4);
    result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string*,std::string*,std::string*>((uint64_t)&v6->__r_.__value_.__r.__words[2], a2, a3, (std::string *)v6->__r_.__value_.__l.__size_);
    v6->__r_.__value_.__l.__size_ = (std::string::size_type)result;
  }
  return result;
}

void sub_20A7971B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void std::allocate_shared[abi:ne180100]<mediaplatform::DBCPSubpool,std::allocator<mediaplatform::DBCPSubpool>,mediaplatform::FilePath &,unsigned long &,BOOL,void>(std::__shared_weak_count **a1, __int128 *a2, __int128 *a3, std::__shared_weak_count_vtbl **a4, char *a5)
{
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  std::__shared_weak_count *v12;
  std::__shared_weak_count_vtbl *v13;
  char v14;
  char *v15;
  std::__shared_weak_count_vtbl *v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t v20;
  std::__shared_weak_count *shared_weak_owners;
  unint64_t v22;
  unint64_t *p_shared_weak_owners;
  unint64_t v24;
  unint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t v28;
  std::string v29;
  void *__p[2];
  char v31;
  _QWORD v32[2];

  v10 = (std::__shared_weak_count *)operator new(0x108uLL);
  *(_OWORD *)&v10->__shared_owners_ = 0u;
  p_shared_owners = (unint64_t *)&v10->__shared_owners_;
  v10->__vftable = (std::__shared_weak_count_vtbl *)&off_24C331870;
  v12 = v10 + 1;
  memset(&v29, 0, sizeof(v29));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v29, a2, a3, 0xAAAAAAAAAAAAAAABLL * (((char *)a3 - (char *)a2) >> 3));
  v13 = *a4;
  v14 = *a5;
  if (*a5)
    v15 = "DBCPSubpool RO";
  else
    v15 = "DBCPSubpool RW";
  std::string::basic_string[abi:ne180100]<0>(__p, v15);
  mediaplatform::WorkQueue::makeWorkQueue((uint64_t)__p, 0, v32);
  v10[1].__vftable = (std::__shared_weak_count_vtbl *)&off_24C331440;
  v10[1].__shared_owners_ = 0;
  v16 = (std::__shared_weak_count_vtbl *)v32[0];
  v17 = (std::__shared_weak_count *)v32[1];
  v10[1].__shared_weak_owners_ = 0;
  v10[2].__vftable = v16;
  v10[2].__shared_owners_ = (uint64_t)v17;
  if (v17)
  {
    v18 = (unint64_t *)&v17->__shared_owners_;
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
    do
      v20 = __ldaxr(v18);
    while (__stlxr(v20 - 1, v18));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  if (v31 < 0)
    operator delete(__p[0]);
  v10[3].__vftable = 0;
  v10[1].__vftable = (std::__shared_weak_count_vtbl *)&off_24C330C40;
  v10[2].__shared_weak_owners_ = (uint64_t)&off_24C331570;
  v10[3].__shared_owners_ = 0;
  v10[3].__shared_weak_owners_ = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)&v10[3], (__int128 *)v29.__r_.__value_.__l.__data_, (__int128 *)v29.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v29.__r_.__value_.__l.__size_ - v29.__r_.__value_.__r.__words[0]) >> 3));
  v10[4].__vftable = v13;
  LOBYTE(v10[4].__shared_owners_) = v14;
  v10[4].__shared_weak_owners_ = (uint64_t)dispatch_semaphore_create((int)v13);
  v10[6].__vftable = 0;
  v10[7].__shared_owners_ = 0;
  v10[9].__shared_owners_ = 0;
  v10[8].__shared_weak_owners_ = 0;
  v10[9].__vftable = (std::__shared_weak_count_vtbl *)&v10[9].__shared_owners_;
  v10[10].__shared_weak_owners_ = 0;
  v10[10].__shared_owners_ = 0;
  v10[9].__shared_weak_owners_ = 0;
  v10[10].__vftable = (std::__shared_weak_count_vtbl *)&v10[10].__shared_owners_;
  __p[0] = &v29;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  *a1 = v12;
  a1[1] = v10;
  shared_weak_owners = (std::__shared_weak_count *)v10[1].__shared_weak_owners_;
  if (shared_weak_owners)
  {
    if (shared_weak_owners->__shared_owners_ != -1)
      return;
    do
      v22 = __ldxr(p_shared_owners);
    while (__stxr(v22 + 1, p_shared_owners));
    p_shared_weak_owners = (unint64_t *)&v10->__shared_weak_owners_;
    do
      v24 = __ldxr(p_shared_weak_owners);
    while (__stxr(v24 + 1, p_shared_weak_owners));
    v10[1].__shared_owners_ = (uint64_t)v12;
    v10[1].__shared_weak_owners_ = (uint64_t)v10;
    std::__shared_weak_count::__release_weak(shared_weak_owners);
  }
  else
  {
    do
      v25 = __ldxr(p_shared_owners);
    while (__stxr(v25 + 1, p_shared_owners));
    v26 = (unint64_t *)&v10->__shared_weak_owners_;
    do
      v27 = __ldxr(v26);
    while (__stxr(v27 + 1, v26));
    v10[1].__shared_owners_ = (uint64_t)v12;
    v10[1].__shared_weak_owners_ = (uint64_t)v10;
  }
  do
    v28 = __ldaxr(p_shared_owners);
  while (__stlxr(v28 - 1, p_shared_owners));
  if (!v28)
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
}

void sub_20A79746C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  std::__shared_weak_count *v19;
  mediaplatform::SerialDispatchTarget *v20;
  void *v22;

  mediaplatform::SerialDispatchTarget::~SerialDispatchTarget(v20);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a13);
  std::__shared_weak_count::~__shared_weak_count(v19);
  operator delete(v22);
  _Unwind_Resume(a1);
}

void mediaplatform::SerialDispatchTarget::~SerialDispatchTarget(mediaplatform::SerialDispatchTarget *this)
{
  std::__shared_weak_count *v2;

  *(_QWORD *)this = &off_24C331440;
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)this + 24);
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
}

void std::__shared_ptr_emplace<mediaplatform::DBCPSubpool>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C331870;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<mediaplatform::DBCPSubpool>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C331870;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x20BD27AFCLL);
}

uint64_t std::__shared_ptr_emplace<mediaplatform::DBCPSubpool>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

std::string *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string*,std::string*,std::string*>(uint64_t a1, __int128 *a2, __int128 *a3, std::string *this)
{
  std::string *v4;
  __int128 *v6;
  __int128 v7;
  _QWORD v9[3];
  char v10;
  std::string *v11;
  std::string *v12;

  v4 = this;
  v11 = this;
  v12 = this;
  v9[0] = a1;
  v9[1] = &v11;
  v9[2] = &v12;
  v10 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      if (*((char *)v6 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)v6, *((_QWORD *)v6 + 1));
        v4 = v12;
      }
      else
      {
        v7 = *v6;
        v4->__r_.__value_.__r.__words[2] = *((_QWORD *)v6 + 2);
        *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v7;
      }
      v6 = (__int128 *)((char *)v6 + 24);
      v12 = ++v4;
    }
    while (v6 != a3);
  }
  v10 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v9);
  return v4;
}

void sub_20A7975F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void mediaplatform::DatabaseConnectionPool::~DatabaseConnectionPool(mediaplatform::DatabaseConnectionPool *this)
{
  mediaplatform::DatabaseConnectionPool *v2;
  uint64_t v3;
  void **v4;

  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)this + 80);
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)this + 64);
  v2 = (mediaplatform::DatabaseConnectionPool *)*((_QWORD *)this + 7);
  if (v2 == (mediaplatform::DatabaseConnectionPool *)((char *)this + 32))
  {
    v3 = 4;
    v2 = (mediaplatform::DatabaseConnectionPool *)((char *)this + 32);
    goto LABEL_5;
  }
  if (v2)
  {
    v3 = 5;
LABEL_5:
    (*(void (**)(void))(*(_QWORD *)v2 + 8 * v3))();
  }
  *(_QWORD *)this = &off_24C331570;
  v4 = (void **)((char *)this + 8);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v4);
}

uint64_t mediaplatform::DatabaseConnectionPool::maxConcurrentReadersCount(mediaplatform::DatabaseConnectionPool *this)
{
  return *(_QWORD *)(*((_QWORD *)this + 8) + 72);
}

uint64_t mediaplatform::DatabaseConnectionPool::maxConcurrentWritersCount(mediaplatform::DatabaseConnectionPool *this)
{
  return *(_QWORD *)(*((_QWORD *)this + 10) + 72);
}

uint64_t mediaplatform::DatabaseConnectionPool::delegateCallbacks(mediaplatform::DatabaseConnectionPool *this)
{
  return *((_QWORD *)this + 10) + 96;
}

void mediaplatform::DatabaseConnectionPool::setDelegateCallbacks(mediaplatform::DBCPSubpool **this, const mediaplatform::DatabaseConnectionCallbacks *a2)
{
  mediaplatform::DBCPSubpool::setDelegateCallbacks(this[10], a2);
  mediaplatform::DBCPSubpool::setDelegateCallbacks(this[8], a2);
}

void mediaplatform::DBCPSubpool::setDelegateCallbacks(mediaplatform::DBCPSubpool *this, const mediaplatform::DatabaseConnectionCallbacks *a2)
{
  _QWORD *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  _QWORD v11[3];
  _QWORD *v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  std::function<void ()(mediaplatform::DatabaseConnection &)>::operator=((_QWORD *)this + 12, a2);
  std::function<void ()(mediaplatform::DatabaseConnection &)>::operator=((_QWORD *)this + 16, (_QWORD *)a2 + 4);
  std::function<void ()(mediaplatform::DatabaseConnection &)>::operator=((_QWORD *)this + 20, (_QWORD *)a2 + 8);
  (*(void (**)(uint64_t *__return_ptr, mediaplatform::DBCPSubpool *))(*(_QWORD *)this + 24))(&v9, this);
  v11[0] = &off_24C331710;
  v11[1] = this;
  v11[2] = a2;
  v12 = v11;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v9 + 48))(v9, v11);
  v4 = v12;
  if (v12 == v11)
  {
    v5 = 4;
    v4 = v11;
  }
  else
  {
    if (!v12)
      goto LABEL_6;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_6:
  v6 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_20A797800(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, char a12, uint64_t a13, uint64_t a14, char *a15)
{
  char *v15;
  char *v17;
  uint64_t v18;
  unint64_t *p_shared_owners;
  unint64_t v20;

  v17 = a15;
  if (a15 == v15)
  {
    v18 = 4;
    v17 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v18 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v17 + 8 * v18))();
LABEL_6:
  if (a11)
  {
    p_shared_owners = (unint64_t *)&a11->__shared_owners_;
    do
      v20 = __ldaxr(p_shared_owners);
    while (__stlxr(v20 - 1, p_shared_owners));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))a11->__on_zero_shared)(a11);
      std::__shared_weak_count::__release_weak(a11);
    }
  }
  _Unwind_Resume(exception_object);
}

_QWORD *std::function<void ()(mediaplatform::DatabaseConnection &)>::operator=(_QWORD *a1, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD v9[3];
  _QWORD *v10;
  _QWORD v11[4];

  v11[3] = *MEMORY[0x24BDAC8D0];
  v3 = (_QWORD *)a2[3];
  if (v3)
  {
    if (v3 == a2)
    {
      v10 = v9;
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, v9);
    }
    else
    {
      v10 = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v3 + 16))(v3);
    }
  }
  else
  {
    v10 = 0;
  }
  if (v9 != a1)
  {
    v4 = v10;
    v5 = (_QWORD *)a1[3];
    if (v10 == v9)
    {
      if (v5 == a1)
      {
        (*(void (**)(_QWORD *, _QWORD *))(v9[0] + 24))(v9, v11);
        (*(void (**)(_QWORD *))(*v10 + 32))(v10);
        v10 = 0;
        (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)a1[3] + 24))(a1[3], v9);
        (*(void (**)(_QWORD))(*(_QWORD *)a1[3] + 32))(a1[3]);
        a1[3] = 0;
        v10 = v9;
        (*(void (**)(_QWORD *, _QWORD *))(v11[0] + 24))(v11, a1);
        (*(void (**)(_QWORD *))(v11[0] + 32))(v11);
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *))(v9[0] + 24))(v9, a1);
        (*(void (**)(_QWORD *))(*v10 + 32))(v10);
        v10 = (_QWORD *)a1[3];
      }
      a1[3] = a1;
    }
    else if (v5 == a1)
    {
      (*(void (**)(_QWORD *, _QWORD *))(*a1 + 24))(a1, v9);
      (*(void (**)(_QWORD))(*(_QWORD *)a1[3] + 32))(a1[3]);
      a1[3] = v10;
      v10 = v9;
    }
    else
    {
      v10 = (_QWORD *)a1[3];
      a1[3] = v4;
    }
  }
  v6 = v10;
  if (v10 == v9)
  {
    v7 = 4;
    v6 = v9;
    goto LABEL_19;
  }
  if (v10)
  {
    v7 = 5;
LABEL_19:
    (*(void (**)(void))(*v6 + 8 * v7))();
  }
  return a1;
}

void sub_20A797A70(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

void std::__function::__func<void mediaplatform::DispatchTarget::invokeSync<mediaplatform::DBCPSubpool::setDelegateCallbacks(mediaplatform::DatabaseConnectionCallbacks const&)::$_0>(mediaplatform::DBCPSubpool::setDelegateCallbacks(mediaplatform::DatabaseConnectionCallbacks const&)::$_0)::{lambda(void)#1},std::allocator<void mediaplatform::DispatchTarget::invokeSync<mediaplatform::DBCPSubpool::setDelegateCallbacks(mediaplatform::DatabaseConnectionCallbacks const&)::$_0>(mediaplatform::DBCPSubpool::setDelegateCallbacks(mediaplatform::DatabaseConnectionCallbacks const&)::$_0)::{lambda(void)#1}>,void ()(void)>::~__func()
{
  JUMPOUT(0x20BD27AFCLL);
}

__n128 std::__function::__func<void mediaplatform::DispatchTarget::invokeSync<mediaplatform::DBCPSubpool::setDelegateCallbacks(mediaplatform::DatabaseConnectionCallbacks const&)::$_0>(mediaplatform::DBCPSubpool::setDelegateCallbacks(mediaplatform::DatabaseConnectionCallbacks const&)::$_0)::{lambda(void)#1},std::allocator<void mediaplatform::DispatchTarget::invokeSync<mediaplatform::DBCPSubpool::setDelegateCallbacks(mediaplatform::DatabaseConnectionCallbacks const&)::$_0>(mediaplatform::DBCPSubpool::setDelegateCallbacks(mediaplatform::DatabaseConnectionCallbacks const&)::$_0)::{lambda(void)#1}>,void ()(void)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_24C331710;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<void mediaplatform::DispatchTarget::invokeSync<mediaplatform::DBCPSubpool::setDelegateCallbacks(mediaplatform::DatabaseConnectionCallbacks const&)::$_0>(mediaplatform::DBCPSubpool::setDelegateCallbacks(mediaplatform::DatabaseConnectionCallbacks const&)::$_0)::{lambda(void)#1},std::allocator<void mediaplatform::DispatchTarget::invokeSync<mediaplatform::DBCPSubpool::setDelegateCallbacks(mediaplatform::DatabaseConnectionCallbacks const&)::$_0>(mediaplatform::DBCPSubpool::setDelegateCallbacks(mediaplatform::DatabaseConnectionCallbacks const&)::$_0)::{lambda(void)#1}>,void ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24C331710;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<void mediaplatform::DispatchTarget::invokeSync<mediaplatform::DBCPSubpool::setDelegateCallbacks(mediaplatform::DatabaseConnectionCallbacks const&)::$_0>(mediaplatform::DBCPSubpool::setDelegateCallbacks(mediaplatform::DatabaseConnectionCallbacks const&)::$_0)::{lambda(void)#1},std::allocator<void mediaplatform::DispatchTarget::invokeSync<mediaplatform::DBCPSubpool::setDelegateCallbacks(mediaplatform::DatabaseConnectionCallbacks const&)::$_0>(mediaplatform::DBCPSubpool::setDelegateCallbacks(mediaplatform::DatabaseConnectionCallbacks const&)::$_0)::{lambda(void)#1}>,void ()(void)>::operator()(uint64_t a1)
{
  _QWORD *v2;
  mediaplatform::DatabaseConnection *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  _QWORD *v9;
  _QWORD **v10;
  BOOL v11;
  _QWORD **v12;
  _QWORD *v13[2];

  mediaplatform::UnionSets<std::shared_ptr<mediaplatform::DatabaseConnection>>(&v12, *(_QWORD *)(a1 + 8) + 192, *(_QWORD *)(a1 + 8) + 216);
  v2 = v12;
  if (v12 != v13)
  {
    do
    {
      v3 = (mediaplatform::DatabaseConnection *)v2[4];
      v4 = (std::__shared_weak_count *)v2[5];
      if (v4)
      {
        p_shared_owners = (unint64_t *)&v4->__shared_owners_;
        do
          v6 = __ldxr(p_shared_owners);
        while (__stxr(v6 + 1, p_shared_owners));
      }
      mediaplatform::DatabaseConnection::setDelegateCallbacks(v3, *(const mediaplatform::DatabaseConnectionCallbacks **)(a1 + 16));
      if (v4)
      {
        v7 = (unint64_t *)&v4->__shared_owners_;
        do
          v8 = __ldaxr(v7);
        while (__stlxr(v8 - 1, v7));
        if (!v8)
        {
          ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
          std::__shared_weak_count::__release_weak(v4);
        }
      }
      v9 = (_QWORD *)v2[1];
      if (v9)
      {
        do
        {
          v10 = (_QWORD **)v9;
          v9 = (_QWORD *)*v9;
        }
        while (v9);
      }
      else
      {
        do
        {
          v10 = (_QWORD **)v2[2];
          v11 = *v10 == v2;
          v2 = v10;
        }
        while (!v11);
      }
      v2 = v10;
    }
    while (v10 != v13);
  }
  std::__tree<std::shared_ptr<mediaplatform::DatabaseConnection>>::destroy(v13[0]);
}

void sub_20A797BD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, _QWORD *a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  std::__tree<std::shared_ptr<mediaplatform::DatabaseConnection>>::destroy(a11);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<void mediaplatform::DispatchTarget::invokeSync<mediaplatform::DBCPSubpool::setDelegateCallbacks(mediaplatform::DatabaseConnectionCallbacks const&)::$_0>(mediaplatform::DBCPSubpool::setDelegateCallbacks(mediaplatform::DatabaseConnectionCallbacks const&)::$_0)::{lambda(void)#1},std::allocator<void mediaplatform::DispatchTarget::invokeSync<mediaplatform::DBCPSubpool::setDelegateCallbacks(mediaplatform::DatabaseConnectionCallbacks const&)::$_0>(mediaplatform::DBCPSubpool::setDelegateCallbacks(mediaplatform::DatabaseConnectionCallbacks const&)::$_0)::{lambda(void)#1}>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN13mediaplatform14DispatchTarget10invokeSyncIZNS_11DBCPSubpool20setDelegateCallbacksERKNS_27DatabaseConnectionCallbacksEE3$_0EEvT_EUlvE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void mediaplatform::DispatchTarget::invokeSync<mediaplatform::DBCPSubpool::setDelegateCallbacks(mediaplatform::DatabaseConnectionCallbacks const&)::$_0>(mediaplatform::DBCPSubpool::setDelegateCallbacks(mediaplatform::DatabaseConnectionCallbacks const&)::$_0)::{lambda(void)#1},std::allocator<void mediaplatform::DispatchTarget::invokeSync<mediaplatform::DBCPSubpool::setDelegateCallbacks(mediaplatform::DatabaseConnectionCallbacks const&)::$_0>(mediaplatform::DBCPSubpool::setDelegateCallbacks(mediaplatform::DatabaseConnectionCallbacks const&)::$_0)::{lambda(void)#1}>,void ()(void)>::target_type()
{
}

void mediaplatform::UnionSets<std::shared_ptr<mediaplatform::DatabaseConnection>>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = a1 + 1;
  std::set<std::shared_ptr<mediaplatform::DatabaseConnection>>::insert[abi:ne180100]<std::__tree_const_iterator<std::shared_ptr<mediaplatform::DatabaseConnection>,std::__tree_node<std::shared_ptr<mediaplatform::DatabaseConnection>,void *> *,long>>((uint64_t)a1, *(_QWORD **)a2, (_QWORD *)(a2 + 8));
  std::set<std::shared_ptr<mediaplatform::DatabaseConnection>>::insert[abi:ne180100]<std::__tree_const_iterator<std::shared_ptr<mediaplatform::DatabaseConnection>,std::__tree_node<std::shared_ptr<mediaplatform::DatabaseConnection>,void *> *,long>>((uint64_t)a1, *(_QWORD **)a3, (_QWORD *)(a3 + 8));
}

void sub_20A797CB8(_Unwind_Exception *a1)
{
  _QWORD **v1;

  std::__tree<std::shared_ptr<mediaplatform::DatabaseConnection>>::destroy(*v1);
  _Unwind_Resume(a1);
}

void std::set<std::shared_ptr<mediaplatform::DatabaseConnection>>::insert[abi:ne180100]<std::__tree_const_iterator<std::shared_ptr<mediaplatform::DatabaseConnection>,std::__tree_node<std::shared_ptr<mediaplatform::DatabaseConnection>,void *> *,long>>(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v6;
  _QWORD *v8;
  uint64_t *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  BOOL v13;
  unint64_t v14;
  uint64_t **v15;
  uint64_t **v16;
  uint64_t *v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  unint64_t v23;
  _QWORD v24[2];
  char v25;
  uint64_t v26;
  uint64_t v27;

  if (a2 != a3)
  {
    v26 = v3;
    v27 = v4;
    v6 = a2;
    v8 = (_QWORD *)(a1 + 8);
    do
    {
      v9 = *(uint64_t **)(a1 + 8);
      v10 = v8;
      if (*(_QWORD **)a1 == v8)
        goto LABEL_9;
      v11 = *(_QWORD **)(a1 + 8);
      v12 = v8;
      if (v9)
      {
        do
        {
          v10 = v11;
          v11 = (_QWORD *)v11[1];
        }
        while (v11);
      }
      else
      {
        do
        {
          v10 = (_QWORD *)v12[2];
          v13 = *v10 == (_QWORD)v12;
          v12 = v10;
        }
        while (v13);
      }
      v14 = v6[4];
      if (v10[4] < v14)
      {
LABEL_9:
        if (v9)
          v15 = (uint64_t **)v10;
        else
          v15 = (uint64_t **)v8;
        if (v9)
          v16 = (uint64_t **)(v10 + 1);
        else
          v16 = (uint64_t **)v8;
      }
      else
      {
        v15 = (uint64_t **)v8;
        v16 = (uint64_t **)v8;
        if (v9)
        {
          v16 = (uint64_t **)v8;
          while (1)
          {
            while (1)
            {
              v15 = (uint64_t **)v9;
              v23 = v9[4];
              if (v14 >= v23)
                break;
              v9 = *v15;
              v16 = v15;
              if (!*v15)
                goto LABEL_16;
            }
            if (v23 >= v14)
              break;
            v16 = v15 + 1;
            v9 = v15[1];
            if (!v9)
              goto LABEL_16;
          }
        }
      }
      if (!*v16)
      {
LABEL_16:
        v17 = (uint64_t *)operator new(0x30uLL);
        v24[1] = v8;
        v17[4] = v6[4];
        v18 = v6[5];
        v17[5] = v18;
        if (v18)
        {
          v19 = (unint64_t *)(v18 + 8);
          do
            v20 = __ldxr(v19);
          while (__stxr(v20 + 1, v19));
        }
        v25 = 1;
        std::__tree<std::shared_ptr<mediaplatform::DatabaseConnection>>::__insert_node_at((uint64_t **)a1, (uint64_t)v15, v16, v17);
        v24[0] = 0;
        std::unique_ptr<std::__tree_node<std::shared_ptr<mediaplatform::DatabaseConnection>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::shared_ptr<mediaplatform::DatabaseConnection>,void *>>>>::reset[abi:ne180100]((uint64_t)v24);
      }
      v21 = (_QWORD *)v6[1];
      if (v21)
      {
        do
        {
          v22 = v21;
          v21 = (_QWORD *)*v21;
        }
        while (v21);
      }
      else
      {
        do
        {
          v22 = (_QWORD *)v6[2];
          v13 = *v22 == (_QWORD)v6;
          v6 = v22;
        }
        while (!v13);
      }
      v6 = v22;
    }
    while (v22 != a3);
  }
}

uint64_t *std::__tree<std::shared_ptr<mediaplatform::DatabaseConnection>>::__insert_node_at(uint64_t **a1, uint64_t a2, uint64_t **a3, uint64_t *a4)
{
  uint64_t *v5;
  uint64_t *result;

  *a4 = 0;
  a4[1] = 0;
  a4[2] = a2;
  *a3 = a4;
  v5 = (uint64_t *)**a1;
  if (v5)
  {
    *a1 = v5;
    a4 = *a3;
  }
  result = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], a4);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return result;
}

void std::unique_ptr<std::__tree_node<std::shared_ptr<mediaplatform::DatabaseConnection>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::shared_ptr<mediaplatform::DatabaseConnection>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  void *v1;

  v1 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v1)
  {
    if (*(_BYTE *)(a1 + 16))
      std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)v1 + 32);
    operator delete(v1);
  }
}

void mediaplatform::DatabaseConnectionPool::readerConnection(mediaplatform::DatabaseConnectionPool *this@<X0>, _QWORD *a2@<X8>)
{
  mediaplatform::DatabaseConnectionPool::_checkoutConnection(this, 1, a2);
}

void mediaplatform::DatabaseConnectionPool::_checkoutConnection(mediaplatform::DatabaseConnectionPool *this@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  char *v5;
  uint64_t v6;
  dispatch_semaphore_t *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  dispatch_semaphore_t *v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  char *v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  _QWORD *v25;
  char *v26;
  uint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  uint64_t v34;
  std::__shared_weak_count *v35;
  dispatch_semaphore_t *v36;
  std::__shared_weak_count *v37;
  dispatch_semaphore_t *v38;
  std::__shared_weak_count *v39;
  uint64_t v40;
  uint64_t v41;
  _BYTE v42[24];
  _BYTE *v43;
  uint64_t v44;

  v44 = *MEMORY[0x24BDAC8D0];
  v5 = (char *)this + 64;
  v6 = 80;
  if (a2)
    v6 = 64;
  else
    v5 = (char *)this + 80;
  v7 = *(dispatch_semaphore_t **)((char *)this + v6);
  v8 = (std::__shared_weak_count *)*((_QWORD *)v5 + 1);
  v36 = v7;
  v37 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  dispatch_semaphore_wait(v7[11], 0xFFFFFFFFFFFFFFFFLL);
  v34 = 0;
  v35 = 0;
  ((void (*)(dispatch_semaphore_t **__return_ptr, dispatch_semaphore_t *))(*v7)[3].isa)(&v38, v7);
  v11 = v38;
  v12 = operator new(0x20uLL);
  *v12 = &off_24C331660;
  v12[1] = v7;
  v12[2] = &v34;
  v12[3] = (char *)this + 32;
  v43 = v12;
  ((void (*)(dispatch_semaphore_t *, _BYTE *))(*v11)[6].isa)(v11, v42);
  v13 = v43;
  if (v43 == v42)
  {
    v14 = 4;
    v13 = v42;
    goto LABEL_11;
  }
  if (v43)
  {
    v14 = 5;
LABEL_11:
    (*(void (**)(void))(*v13 + 8 * v14))();
  }
  v15 = v39;
  if (v39)
  {
    v16 = (unint64_t *)&v39->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  v18 = (char *)operator new(0x48uLL);
  *((_QWORD *)v18 + 1) = 0;
  *((_QWORD *)v18 + 2) = 0;
  *(_QWORD *)v18 = &off_24C3319F8;
  *(_OWORD *)(v18 + 40) = 0u;
  *(_OWORD *)(v18 + 56) = 0u;
  *(_OWORD *)(v18 + 24) = 0u;
  *a3 = v18 + 24;
  a3[1] = v18;
  std::shared_ptr<mlcore::Predicate>::operator=[abi:ne180100]((_QWORD *)v18 + 3, v34, (uint64_t)v35);
  if (v8)
  {
    v19 = (unint64_t *)&v8->__shared_owners_;
    do
      v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
  }
  v22 = v34;
  v21 = (uint64_t)v35;
  if (v35)
  {
    v23 = (unint64_t *)&v35->__shared_owners_;
    do
      v24 = __ldxr(v23);
    while (__stxr(v24 + 1, v23));
  }
  v38 = v7;
  v39 = v8;
  v40 = v22;
  v41 = v21;
  v25 = operator new(0x28uLL);
  *v25 = &off_24C331818;
  v25[1] = v7;
  v25[2] = v8;
  v25[3] = v22;
  v25[4] = v21;
  v43 = v25;
  v26 = (char *)*((_QWORD *)v18 + 8);
  if (v26 == v18 + 40)
  {
    v26 = v42;
    (*(void (**)(char *, _BYTE *))(*((_QWORD *)v18 + 5) + 24))(v18 + 40, v42);
    (*(void (**)(_QWORD))(**((_QWORD **)v18 + 8) + 32))(*((_QWORD *)v18 + 8));
    *((_QWORD *)v18 + 8) = v43;
    v43 = v42;
    v27 = 4;
    goto LABEL_29;
  }
  v43 = (_BYTE *)*((_QWORD *)v18 + 8);
  *((_QWORD *)v18 + 8) = v25;
  if (v26 == v42)
  {
    v27 = 4;
    v26 = v42;
    goto LABEL_29;
  }
  if (v26)
  {
    v27 = 5;
LABEL_29:
    (*(void (**)(char *))(*(_QWORD *)v26 + 8 * v27))(v26);
  }
  v28 = v35;
  if (v35)
  {
    v29 = (unint64_t *)&v35->__shared_owners_;
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  v31 = v37;
  if (v37)
  {
    v32 = (unint64_t *)&v37->__shared_owners_;
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
}

void sub_20A79821C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, char a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

_QWORD *std::__function::__func<mediaplatform::DatabaseConnectionPool::_checkoutConnection(BOOL)::$_0,std::allocator<mediaplatform::DatabaseConnectionPool::_checkoutConnection(BOOL)::$_0>,void ()(void)>::~__func(_QWORD *a1)
{
  *a1 = &off_24C331818;
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 3));
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  return a1;
}

void std::__function::__func<mediaplatform::DatabaseConnectionPool::_checkoutConnection(BOOL)::$_0,std::allocator<mediaplatform::DatabaseConnectionPool::_checkoutConnection(BOOL)::$_0>,void ()(void)>::~__func(_QWORD *a1)
{
  *a1 = &off_24C331818;
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 3));
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  JUMPOUT(0x20BD27AFCLL);
}

_QWORD *std::__function::__func<mediaplatform::DatabaseConnectionPool::_checkoutConnection(BOOL)::$_0,std::allocator<mediaplatform::DatabaseConnectionPool::_checkoutConnection(BOOL)::$_0>,void ()(void)>::__clone(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;

  result = operator new(0x28uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24C331818;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = a1[4];
  result[3] = a1[3];
  result[4] = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  return result;
}

_QWORD *std::__function::__func<mediaplatform::DatabaseConnectionPool::_checkoutConnection(BOOL)::$_0,std::allocator<mediaplatform::DatabaseConnectionPool::_checkoutConnection(BOOL)::$_0>,void ()(void)>::__clone(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24C331818;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = result[4];
  a2[3] = result[3];
  a2[4] = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  return result;
}

uint64_t std::__function::__func<mediaplatform::DatabaseConnectionPool::_checkoutConnection(BOOL)::$_0,std::allocator<mediaplatform::DatabaseConnectionPool::_checkoutConnection(BOOL)::$_0>,void ()(void)>::destroy(uint64_t a1)
{
  uint64_t v1;

  v1 = a1 + 8;
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100](a1 + 24);
  return std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100](v1);
}

void std::__function::__func<mediaplatform::DatabaseConnectionPool::_checkoutConnection(BOOL)::$_0,std::allocator<mediaplatform::DatabaseConnectionPool::_checkoutConnection(BOOL)::$_0>,void ()(void)>::destroy_deallocate(void *a1)
{
  uint64_t v2;

  v2 = (uint64_t)a1 + 8;
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 24);
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100](v2);
  operator delete(a1);
}

void std::__function::__func<mediaplatform::DatabaseConnectionPool::_checkoutConnection(BOOL)::$_0,std::allocator<mediaplatform::DatabaseConnectionPool::_checkoutConnection(BOOL)::$_0>,void ()(void)>::operator()(_QWORD *a1)
{
  dispatch_semaphore_t *v1;
  std::__shared_weak_count *v2;
  uint64_t v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  _BYTE v24[24];
  _BYTE *v25;
  uint64_t v26;

  v26 = *MEMORY[0x24BDAC8D0];
  v1 = (dispatch_semaphore_t *)a1[1];
  v3 = a1[3];
  v2 = (std::__shared_weak_count *)a1[4];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
    v21 = v2;
    v6 = (unint64_t *)&v2->__shared_owners_;
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  else
  {
    v21 = 0;
  }
  ((void (*)(uint64_t *__return_ptr, dispatch_semaphore_t *))(*v1)[3].isa)(&v22, v1);
  v8 = v22;
  if (v2)
  {
    v9 = (unint64_t *)&v2->__shared_owners_;
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  v25 = 0;
  v11 = operator new(0x20uLL);
  *v11 = &off_24C331608;
  v11[1] = v1;
  v11[2] = v3;
  v11[3] = v2;
  v25 = v11;
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v8 + 48))(v8, v24);
  v12 = v25;
  if (v25 == v24)
  {
    v13 = 4;
    v12 = v24;
    goto LABEL_15;
  }
  if (v25)
  {
    v13 = 5;
LABEL_15:
    (*(void (**)(void))(*v12 + 8 * v13))();
  }
  v14 = v23;
  if (v23)
  {
    v15 = (unint64_t *)&v23->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (v21)
  {
    v17 = (unint64_t *)&v21->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  dispatch_semaphore_signal(v1[11]);
  if (v2)
  {
    v19 = (unint64_t *)&v2->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
}

void sub_20A798698(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,char *a21)
{
  uint64_t v21;
  uint64_t v22;
  char *v24;
  uint64_t v25;

  if (!a2)
    _Unwind_Resume(exception_object);
  v24 = a21;
  if (a21 == &a18)
  {
    v25 = 4;
    v24 = &a18;
  }
  else
  {
    if (!a21)
      goto LABEL_7;
    v25 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v24 + 8 * v25))();
LABEL_7:
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100](v22);
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100](v21);
  __cxa_begin_catch(exception_object);
  __cxa_rethrow();
}

uint64_t std::__function::__func<mediaplatform::DatabaseConnectionPool::_checkoutConnection(BOOL)::$_0,std::allocator<mediaplatform::DatabaseConnectionPool::_checkoutConnection(BOOL)::$_0>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN13mediaplatform22DatabaseConnectionPool19_checkoutConnectionEbE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<mediaplatform::DatabaseConnectionPool::_checkoutConnection(BOOL)::$_0,std::allocator<mediaplatform::DatabaseConnectionPool::_checkoutConnection(BOOL)::$_0>,void ()(void)>::target_type()
{
}

_QWORD *std::__function::__func<void mediaplatform::DispatchTarget::invokeSync<mediaplatform::DBCPSubpool::checkinConnection(std::shared_ptr<mediaplatform::DatabaseConnection>)::$_0>(mediaplatform::DBCPSubpool::checkinConnection(std::shared_ptr<mediaplatform::DatabaseConnection>)::$_0)::{lambda(void)#1},std::allocator<void mediaplatform::DispatchTarget::invokeSync<mediaplatform::DBCPSubpool::checkinConnection(std::shared_ptr<mediaplatform::DatabaseConnection>)::$_0>(mediaplatform::DBCPSubpool::checkinConnection(std::shared_ptr<mediaplatform::DatabaseConnection>)::$_0)::{lambda(void)#1}>,void ()(void)>::~__func(_QWORD *a1)
{
  *a1 = &off_24C331608;
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 2));
  return a1;
}

void std::__function::__func<void mediaplatform::DispatchTarget::invokeSync<mediaplatform::DBCPSubpool::checkinConnection(std::shared_ptr<mediaplatform::DatabaseConnection>)::$_0>(mediaplatform::DBCPSubpool::checkinConnection(std::shared_ptr<mediaplatform::DatabaseConnection>)::$_0)::{lambda(void)#1},std::allocator<void mediaplatform::DispatchTarget::invokeSync<mediaplatform::DBCPSubpool::checkinConnection(std::shared_ptr<mediaplatform::DatabaseConnection>)::$_0>(mediaplatform::DBCPSubpool::checkinConnection(std::shared_ptr<mediaplatform::DatabaseConnection>)::$_0)::{lambda(void)#1}>,void ()(void)>::~__func(_QWORD *a1)
{
  *a1 = &off_24C331608;
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 2));
  JUMPOUT(0x20BD27AFCLL);
}

char *std::__function::__func<void mediaplatform::DispatchTarget::invokeSync<mediaplatform::DBCPSubpool::checkinConnection(std::shared_ptr<mediaplatform::DatabaseConnection>)::$_0>(mediaplatform::DBCPSubpool::checkinConnection(std::shared_ptr<mediaplatform::DatabaseConnection>)::$_0)::{lambda(void)#1},std::allocator<void mediaplatform::DispatchTarget::invokeSync<mediaplatform::DBCPSubpool::checkinConnection(std::shared_ptr<mediaplatform::DatabaseConnection>)::$_0>(mediaplatform::DBCPSubpool::checkinConnection(std::shared_ptr<mediaplatform::DatabaseConnection>)::$_0)::{lambda(void)#1}>,void ()(void)>::__clone(uint64_t a1)
{
  char *result;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  result = (char *)operator new(0x20uLL);
  *(_QWORD *)result = &off_24C331608;
  *(_OWORD *)(result + 8) = *(_OWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 24);
  *((_QWORD *)result + 3) = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

uint64_t std::__function::__func<void mediaplatform::DispatchTarget::invokeSync<mediaplatform::DBCPSubpool::checkinConnection(std::shared_ptr<mediaplatform::DatabaseConnection>)::$_0>(mediaplatform::DBCPSubpool::checkinConnection(std::shared_ptr<mediaplatform::DatabaseConnection>)::$_0)::{lambda(void)#1},std::allocator<void mediaplatform::DispatchTarget::invokeSync<mediaplatform::DBCPSubpool::checkinConnection(std::shared_ptr<mediaplatform::DatabaseConnection>)::$_0>(mediaplatform::DBCPSubpool::checkinConnection(std::shared_ptr<mediaplatform::DatabaseConnection>)::$_0)::{lambda(void)#1}>,void ()(void)>::__clone(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  *(_QWORD *)a2 = &off_24C331608;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 24);
  *(_QWORD *)(a2 + 24) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

uint64_t std::__function::__func<void mediaplatform::DispatchTarget::invokeSync<mediaplatform::DBCPSubpool::checkinConnection(std::shared_ptr<mediaplatform::DatabaseConnection>)::$_0>(mediaplatform::DBCPSubpool::checkinConnection(std::shared_ptr<mediaplatform::DatabaseConnection>)::$_0)::{lambda(void)#1},std::allocator<void mediaplatform::DispatchTarget::invokeSync<mediaplatform::DBCPSubpool::checkinConnection(std::shared_ptr<mediaplatform::DatabaseConnection>)::$_0>(mediaplatform::DBCPSubpool::checkinConnection(std::shared_ptr<mediaplatform::DatabaseConnection>)::$_0)::{lambda(void)#1}>,void ()(void)>::destroy(uint64_t a1)
{
  return std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100](a1 + 16);
}

void std::__function::__func<void mediaplatform::DispatchTarget::invokeSync<mediaplatform::DBCPSubpool::checkinConnection(std::shared_ptr<mediaplatform::DatabaseConnection>)::$_0>(mediaplatform::DBCPSubpool::checkinConnection(std::shared_ptr<mediaplatform::DatabaseConnection>)::$_0)::{lambda(void)#1},std::allocator<void mediaplatform::DispatchTarget::invokeSync<mediaplatform::DBCPSubpool::checkinConnection(std::shared_ptr<mediaplatform::DatabaseConnection>)::$_0>(mediaplatform::DBCPSubpool::checkinConnection(std::shared_ptr<mediaplatform::DatabaseConnection>)::$_0)::{lambda(void)#1}>,void ()(void)>::destroy_deallocate(void *a1)
{
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 16);
  operator delete(a1);
}

void std::__function::__func<void mediaplatform::DispatchTarget::invokeSync<mediaplatform::DBCPSubpool::checkinConnection(std::shared_ptr<mediaplatform::DatabaseConnection>)::$_0>(mediaplatform::DBCPSubpool::checkinConnection(std::shared_ptr<mediaplatform::DatabaseConnection>)::$_0)::{lambda(void)#1},std::allocator<void mediaplatform::DispatchTarget::invokeSync<mediaplatform::DBCPSubpool::checkinConnection(std::shared_ptr<mediaplatform::DatabaseConnection>)::$_0>(mediaplatform::DBCPSubpool::checkinConnection(std::shared_ptr<mediaplatform::DatabaseConnection>)::$_0)::{lambda(void)#1}>,void ()(void)>::operator()(_QWORD *a1)
{
  uint64_t v1;
  _QWORD *v2;
  unint64_t v4;
  uint64_t *v5;
  unint64_t v6;
  BOOL v7;
  _QWORD *v8;

  v1 = a1[1];
  v2 = *(_QWORD **)(v1 + 224);
  if (!v2)
    goto LABEL_12;
  v4 = a1[2];
  v5 = (uint64_t *)(v1 + 224);
  do
  {
    v6 = v2[4];
    v7 = v6 >= v4;
    if (v6 >= v4)
      v8 = v2;
    else
      v8 = v2 + 1;
    if (v7)
      v5 = v2;
    v2 = (_QWORD *)*v8;
  }
  while (*v8);
  if (v5 == (uint64_t *)(v1 + 224) || v4 < v5[4])
LABEL_12:
    __assert_rtn("operator()", "DatabaseConnectionPool.cpp", 200, "connectionItr != _busyConnections.end()");
  std::__tree<std::shared_ptr<mediaplatform::DatabaseConnection>>::__remove_node_pointer((uint64_t **)(v1 + 216), v5);
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)(v5 + 4));
  operator delete(v5);
  std::__tree<std::shared_ptr<mediaplatform::DatabaseConnection>>::__emplace_unique_key_args<std::shared_ptr<mediaplatform::DatabaseConnection>,std::shared_ptr<mediaplatform::DatabaseConnection> const&>((uint64_t **)(v1 + 192), a1[2], a1[2], a1[3]);
}

uint64_t std::__function::__func<void mediaplatform::DispatchTarget::invokeSync<mediaplatform::DBCPSubpool::checkinConnection(std::shared_ptr<mediaplatform::DatabaseConnection>)::$_0>(mediaplatform::DBCPSubpool::checkinConnection(std::shared_ptr<mediaplatform::DatabaseConnection>)::$_0)::{lambda(void)#1},std::allocator<void mediaplatform::DispatchTarget::invokeSync<mediaplatform::DBCPSubpool::checkinConnection(std::shared_ptr<mediaplatform::DatabaseConnection>)::$_0>(mediaplatform::DBCPSubpool::checkinConnection(std::shared_ptr<mediaplatform::DatabaseConnection>)::$_0)::{lambda(void)#1}>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN13mediaplatform14DispatchTarget10invokeSyncIZNS_11DBCPSubpool17checkinConnectionENSt3__110shared_ptrINS_18DatabaseConnectionEEEE3$_0EEvT_EUlvE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void mediaplatform::DispatchTarget::invokeSync<mediaplatform::DBCPSubpool::checkinConnection(std::shared_ptr<mediaplatform::DatabaseConnection>)::$_0>(mediaplatform::DBCPSubpool::checkinConnection(std::shared_ptr<mediaplatform::DatabaseConnection>)::$_0)::{lambda(void)#1},std::allocator<void mediaplatform::DispatchTarget::invokeSync<mediaplatform::DBCPSubpool::checkinConnection(std::shared_ptr<mediaplatform::DatabaseConnection>)::$_0>(mediaplatform::DBCPSubpool::checkinConnection(std::shared_ptr<mediaplatform::DatabaseConnection>)::$_0)::{lambda(void)#1}>,void ()(void)>::target_type()
{
}

uint64_t **std::__tree<std::shared_ptr<mediaplatform::DatabaseConnection>>::__remove_node_pointer(uint64_t **result, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t *v8;
  int v9;
  uint64_t **v10;
  uint64_t *v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t *v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v2 = (uint64_t *)a2[1];
  if (v2)
  {
    do
    {
      v3 = v2;
      v2 = (uint64_t *)*v2;
    }
    while (v2);
  }
  else
  {
    v4 = a2;
    do
    {
      v3 = (uint64_t *)v4[2];
      v25 = *v3 == (_QWORD)v4;
      v4 = v3;
    }
    while (!v25);
  }
  if (*result == a2)
    *result = v3;
  v5 = result[1];
  result[2] = (uint64_t *)((char *)result[2] - 1);
  v6 = *a2;
  v7 = a2;
  if (*a2)
  {
    v8 = (uint64_t *)a2[1];
    if (!v8)
    {
      v7 = a2;
      goto LABEL_15;
    }
    do
    {
      v7 = v8;
      v8 = (uint64_t *)*v8;
    }
    while (v8);
  }
  v6 = v7[1];
  if (v6)
  {
LABEL_15:
    v9 = 0;
    *(_QWORD *)(v6 + 16) = v7[2];
    goto LABEL_16;
  }
  v9 = 1;
LABEL_16:
  v10 = (uint64_t **)v7[2];
  v11 = *v10;
  if (*v10 == v7)
  {
    *v10 = (uint64_t *)v6;
    if (v7 == v5)
    {
      v11 = 0;
      v5 = (uint64_t *)v6;
    }
    else
    {
      v11 = v10[1];
    }
  }
  else
  {
    v10[1] = (uint64_t *)v6;
  }
  v12 = *((unsigned __int8 *)v7 + 24);
  if (v7 != a2)
  {
    v13 = a2[2];
    v7[2] = v13;
    *(_QWORD *)(v13 + 8 * (*(_QWORD *)a2[2] != (_QWORD)a2)) = v7;
    v15 = *a2;
    v14 = a2[1];
    *(_QWORD *)(v15 + 16) = v7;
    *v7 = v15;
    v7[1] = v14;
    if (v14)
      *(_QWORD *)(v14 + 16) = v7;
    *((_BYTE *)v7 + 24) = *((_BYTE *)a2 + 24);
    if (v5 == a2)
      v5 = v7;
  }
  if (!v12 || !v5)
    return result;
  if (!v9)
  {
    *(_BYTE *)(v6 + 24) = 1;
    return result;
  }
  while (1)
  {
    v16 = v11[2];
    if (*(uint64_t **)v16 != v11)
      break;
    if (!*((_BYTE *)v11 + 24))
    {
      *((_BYTE *)v11 + 24) = 1;
      *(_BYTE *)(v16 + 24) = 0;
      v22 = v11[1];
      *(_QWORD *)v16 = v22;
      if (v22)
        *(_QWORD *)(v22 + 16) = v16;
      v11[2] = *(_QWORD *)(v16 + 16);
      *(_QWORD *)(*(_QWORD *)(v16 + 16) + 8 * (**(_QWORD **)(v16 + 16) != v16)) = v11;
      v11[1] = v16;
      *(_QWORD *)(v16 + 16) = v11;
      if (v5 == (uint64_t *)v16)
        v5 = v11;
      v11 = *(uint64_t **)v16;
    }
    v23 = (_QWORD *)*v11;
    if (*v11 && !*((_BYTE *)v23 + 24))
      goto LABEL_76;
    v24 = (uint64_t *)v11[1];
    if (v24 && !*((_BYTE *)v24 + 24))
    {
      if (v23 && !*((_BYTE *)v23 + 24))
      {
LABEL_76:
        v24 = v11;
      }
      else
      {
        *((_BYTE *)v24 + 24) = 1;
        *((_BYTE *)v11 + 24) = 0;
        v30 = *v24;
        v11[1] = *v24;
        if (v30)
          *(_QWORD *)(v30 + 16) = v11;
        v24[2] = v11[2];
        *(_QWORD *)(v11[2] + 8 * (*(_QWORD *)v11[2] != (_QWORD)v11)) = v24;
        *v24 = (uint64_t)v11;
        v11[2] = (uint64_t)v24;
        v23 = v11;
      }
      v27 = v24[2];
      *((_BYTE *)v24 + 24) = *(_BYTE *)(v27 + 24);
      *(_BYTE *)(v27 + 24) = 1;
      *((_BYTE *)v23 + 24) = 1;
      v28 = *(uint64_t **)v27;
      v31 = *(_QWORD *)(*(_QWORD *)v27 + 8);
      *(_QWORD *)v27 = v31;
      if (v31)
        *(_QWORD *)(v31 + 16) = v27;
      v28[2] = *(_QWORD *)(v27 + 16);
      *(_QWORD *)(*(_QWORD *)(v27 + 16) + 8 * (**(_QWORD **)(v27 + 16) != v27)) = v28;
      v28[1] = v27;
      goto LABEL_80;
    }
    *((_BYTE *)v11 + 24) = 0;
    v21 = (uint64_t *)v11[2];
    if (*((_BYTE *)v21 + 24))
      v25 = v21 == v5;
    else
      v25 = 1;
    if (v25)
      goto LABEL_61;
LABEL_57:
    v11 = *(uint64_t **)(v21[2] + 8 * (*(_QWORD *)v21[2] == (_QWORD)v21));
  }
  if (!*((_BYTE *)v11 + 24))
  {
    *((_BYTE *)v11 + 24) = 1;
    *(_BYTE *)(v16 + 24) = 0;
    v17 = *(uint64_t **)(v16 + 8);
    v18 = *v17;
    *(_QWORD *)(v16 + 8) = *v17;
    if (v18)
      *(_QWORD *)(v18 + 16) = v16;
    v17[2] = *(_QWORD *)(v16 + 16);
    *(_QWORD *)(*(_QWORD *)(v16 + 16) + 8 * (**(_QWORD **)(v16 + 16) != v16)) = v17;
    *v17 = v16;
    *(_QWORD *)(v16 + 16) = v17;
    if (v5 == (uint64_t *)*v11)
      v5 = v11;
    v11 = *(uint64_t **)(*v11 + 8);
  }
  v19 = (_QWORD *)*v11;
  if (!*v11 || *((_BYTE *)v19 + 24))
  {
    v20 = (uint64_t *)v11[1];
    if (v20 && !*((_BYTE *)v20 + 24))
      goto LABEL_67;
    *((_BYTE *)v11 + 24) = 0;
    v21 = (uint64_t *)v11[2];
    if (v21 == v5)
    {
      v21 = v5;
LABEL_61:
      *((_BYTE *)v21 + 24) = 1;
      return result;
    }
    if (!*((_BYTE *)v21 + 24))
      goto LABEL_61;
    goto LABEL_57;
  }
  v20 = (uint64_t *)v11[1];
  if (v20 && !*((_BYTE *)v20 + 24))
  {
LABEL_67:
    v19 = v11;
  }
  else
  {
    *((_BYTE *)v19 + 24) = 1;
    *((_BYTE *)v11 + 24) = 0;
    v26 = v19[1];
    *v11 = v26;
    if (v26)
      *(_QWORD *)(v26 + 16) = v11;
    v19[2] = v11[2];
    *(_QWORD *)(v11[2] + 8 * (*(_QWORD *)v11[2] != (_QWORD)v11)) = v19;
    v19[1] = v11;
    v11[2] = (uint64_t)v19;
    v20 = v11;
  }
  v27 = v19[2];
  *((_BYTE *)v19 + 24) = *(_BYTE *)(v27 + 24);
  *(_BYTE *)(v27 + 24) = 1;
  *((_BYTE *)v20 + 24) = 1;
  v28 = *(uint64_t **)(v27 + 8);
  v29 = *v28;
  *(_QWORD *)(v27 + 8) = *v28;
  if (v29)
    *(_QWORD *)(v29 + 16) = v27;
  v28[2] = *(_QWORD *)(v27 + 16);
  *(_QWORD *)(*(_QWORD *)(v27 + 16) + 8 * (**(_QWORD **)(v27 + 16) != v27)) = v28;
  *v28 = v27;
LABEL_80:
  *(_QWORD *)(v27 + 16) = v28;
  return result;
}

void std::__tree<std::shared_ptr<mediaplatform::DatabaseConnection>>::__emplace_unique_key_args<std::shared_ptr<mediaplatform::DatabaseConnection>,std::shared_ptr<mediaplatform::DatabaseConnection> const&>(uint64_t **a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v7;
  uint64_t **v8;
  uint64_t **v9;
  uint64_t **v10;
  unint64_t v11;
  uint64_t *v12;
  unint64_t *v13;
  unint64_t v14;
  _QWORD v15[2];
  char v16;

  v8 = a1 + 1;
  v7 = a1[1];
  v9 = a1 + 1;
  v10 = a1 + 1;
  if (v7)
  {
    while (1)
    {
      while (1)
      {
        v10 = (uint64_t **)v7;
        v11 = v7[4];
        if (v11 <= a2)
          break;
        v7 = *v10;
        v9 = v10;
        if (!*v10)
          goto LABEL_8;
      }
      if (v11 >= a2)
        break;
      v7 = v10[1];
      if (!v7)
      {
        v9 = v10 + 1;
        goto LABEL_8;
      }
    }
  }
  else
  {
LABEL_8:
    v12 = (uint64_t *)operator new(0x30uLL);
    v15[1] = v8;
    v12[4] = a3;
    v12[5] = a4;
    if (a4)
    {
      v13 = (unint64_t *)(a4 + 8);
      do
        v14 = __ldxr(v13);
      while (__stxr(v14 + 1, v13));
    }
    v16 = 1;
    std::__tree<std::shared_ptr<mediaplatform::DatabaseConnection>>::__insert_node_at(a1, (uint64_t)v10, v9, v12);
    v15[0] = 0;
    std::unique_ptr<std::__tree_node<std::shared_ptr<mediaplatform::DatabaseConnection>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::shared_ptr<mediaplatform::DatabaseConnection>,void *>>>>::reset[abi:ne180100]((uint64_t)v15);
  }
}

void std::__shared_ptr_emplace<mediaplatform::DatabaseConnectionPoolCheckout>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C3319F8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<mediaplatform::DatabaseConnectionPoolCheckout>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C3319F8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x20BD27AFCLL);
}

void std::__shared_ptr_emplace<mediaplatform::DatabaseConnectionPoolCheckout>::__on_zero_shared(uint64_t a1)
{
  mediaplatform::DatabaseConnectionPoolCheckout::~DatabaseConnectionPoolCheckout((mediaplatform::DatabaseConnectionPoolCheckout *)(a1 + 24));
}

void mediaplatform::DatabaseConnectionPoolCheckout::~DatabaseConnectionPoolCheckout(mediaplatform::DatabaseConnectionPoolCheckout *this)
{
  uint64_t v2;
  mediaplatform::DatabaseConnectionPoolCheckout *v3;
  uint64_t v4;

  v2 = *((_QWORD *)this + 5);
  if (v2)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 48))(v2);
    v3 = (mediaplatform::DatabaseConnectionPoolCheckout *)*((_QWORD *)this + 5);
    if (v3 == (mediaplatform::DatabaseConnectionPoolCheckout *)((char *)this + 16))
    {
      v4 = 4;
      v3 = (mediaplatform::DatabaseConnectionPoolCheckout *)((char *)this + 16);
      goto LABEL_6;
    }
    if (v3)
    {
      v4 = 5;
LABEL_6:
      (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
    }
  }
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)this);
}

void std::__function::__func<void mediaplatform::DispatchTarget::invokeSync<mediaplatform::DBCPSubpool::checkoutConnection(std::function<std::shared_ptr<mediaplatform::DatabaseConnection> ()(mediaplatform::FilePath const&,BOOL)> const&)::$_0>(mediaplatform::DBCPSubpool::checkoutConnection(std::function<std::shared_ptr<mediaplatform::DatabaseConnection> ()(mediaplatform::FilePath const&,BOOL)> const&)::$_0)::{lambda(void)#1},std::allocator<void mediaplatform::DispatchTarget::invokeSync<mediaplatform::DBCPSubpool::checkoutConnection(std::function<std::shared_ptr<mediaplatform::DatabaseConnection> ()(mediaplatform::FilePath const&,BOOL)> const&)::$_0>(mediaplatform::DBCPSubpool::checkoutConnection(std::function<std::shared_ptr<mediaplatform::DatabaseConnection> ()(mediaplatform::FilePath const&,BOOL)> const&)::$_0)::{lambda(void)#1}>,void ()(void)>::~__func()
{
  JUMPOUT(0x20BD27AFCLL);
}

__n128 std::__function::__func<void mediaplatform::DispatchTarget::invokeSync<mediaplatform::DBCPSubpool::checkoutConnection(std::function<std::shared_ptr<mediaplatform::DatabaseConnection> ()(mediaplatform::FilePath const&,BOOL)> const&)::$_0>(mediaplatform::DBCPSubpool::checkoutConnection(std::function<std::shared_ptr<mediaplatform::DatabaseConnection> ()(mediaplatform::FilePath const&,BOOL)> const&)::$_0)::{lambda(void)#1},std::allocator<void mediaplatform::DispatchTarget::invokeSync<mediaplatform::DBCPSubpool::checkoutConnection(std::function<std::shared_ptr<mediaplatform::DatabaseConnection> ()(mediaplatform::FilePath const&,BOOL)> const&)::$_0>(mediaplatform::DBCPSubpool::checkoutConnection(std::function<std::shared_ptr<mediaplatform::DatabaseConnection> ()(mediaplatform::FilePath const&,BOOL)> const&)::$_0)::{lambda(void)#1}>,void ()(void)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_24C331660;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 std::__function::__func<void mediaplatform::DispatchTarget::invokeSync<mediaplatform::DBCPSubpool::checkoutConnection(std::function<std::shared_ptr<mediaplatform::DatabaseConnection> ()(mediaplatform::FilePath const&,BOOL)> const&)::$_0>(mediaplatform::DBCPSubpool::checkoutConnection(std::function<std::shared_ptr<mediaplatform::DatabaseConnection> ()(mediaplatform::FilePath const&,BOOL)> const&)::$_0)::{lambda(void)#1},std::allocator<void mediaplatform::DispatchTarget::invokeSync<mediaplatform::DBCPSubpool::checkoutConnection(std::function<std::shared_ptr<mediaplatform::DatabaseConnection> ()(mediaplatform::FilePath const&,BOOL)> const&)::$_0>(mediaplatform::DBCPSubpool::checkoutConnection(std::function<std::shared_ptr<mediaplatform::DatabaseConnection> ()(mediaplatform::FilePath const&,BOOL)> const&)::$_0)::{lambda(void)#1}>,void ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24C331660;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<void mediaplatform::DispatchTarget::invokeSync<mediaplatform::DBCPSubpool::checkoutConnection(std::function<std::shared_ptr<mediaplatform::DatabaseConnection> ()(mediaplatform::FilePath const&,BOOL)> const&)::$_0>(mediaplatform::DBCPSubpool::checkoutConnection(std::function<std::shared_ptr<mediaplatform::DatabaseConnection> ()(mediaplatform::FilePath const&,BOOL)> const&)::$_0)::{lambda(void)#1},std::allocator<void mediaplatform::DispatchTarget::invokeSync<mediaplatform::DBCPSubpool::checkoutConnection(std::function<std::shared_ptr<mediaplatform::DatabaseConnection> ()(mediaplatform::FilePath const&,BOOL)> const&)::$_0>(mediaplatform::DBCPSubpool::checkoutConnection(std::function<std::shared_ptr<mediaplatform::DatabaseConnection> ()(mediaplatform::FilePath const&,BOOL)> const&)::$_0)::{lambda(void)#1}>,void ()(void)>::operator()(uint64_t a1)
{
  uint64_t v2;
  uint64_t **v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  __int128 v15;
  char v16;

  v2 = *(_QWORD *)(a1 + 8);
  if (*(_QWORD *)(v2 + 208))
  {
    v4 = *(uint64_t **)(v2 + 192);
    v3 = (uint64_t **)(v2 + 192);
    std::shared_ptr<mlcore::Predicate>::operator=[abi:ne180100](*(_QWORD **)(a1 + 16), v4[4], v4[5]);
    std::__tree<std::shared_ptr<mediaplatform::DatabaseConnection>>::__remove_node_pointer(v3, v4);
    std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)(v4 + 4));
    operator delete(v4);
    std::__tree<std::shared_ptr<mediaplatform::DatabaseConnection>>::__emplace_unique_key_args<std::shared_ptr<mediaplatform::DatabaseConnection>,std::shared_ptr<mediaplatform::DatabaseConnection> const&>(v3 + 3, **(_QWORD **)(a1 + 16), **(_QWORD **)(a1 + 16), *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8));
  }
  else
  {
    v5 = *(_QWORD *)(a1 + 24);
    v16 = *(_BYTE *)(v2 + 80);
    v6 = *(_QWORD *)(v5 + 24);
    if (!v6)
      std::__throw_bad_function_call[abi:ne180100]();
    (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t, char *))(*(_QWORD *)v6 + 48))(&v15, v6, v2 + 40, &v16);
    v7 = *(_QWORD *)(a1 + 16);
    v8 = v15;
    v15 = 0uLL;
    v9 = *(std::__shared_weak_count **)(v7 + 8);
    *(_OWORD *)v7 = v8;
    if (v9)
    {
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
    v12 = (std::__shared_weak_count *)*((_QWORD *)&v15 + 1);
    if (*((_QWORD *)&v15 + 1))
    {
      v13 = (unint64_t *)(*((_QWORD *)&v15 + 1) + 8);
      do
        v14 = __ldaxr(v13);
      while (__stlxr(v14 - 1, v13));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
    mediaplatform::DatabaseConnection::setDelegateCallbacks(**(mediaplatform::DatabaseConnection ***)(a1 + 16), (const mediaplatform::DatabaseConnectionCallbacks *)(v2 + 96));
    std::__tree<std::shared_ptr<mediaplatform::DatabaseConnection>>::__emplace_unique_key_args<std::shared_ptr<mediaplatform::DatabaseConnection>,std::shared_ptr<mediaplatform::DatabaseConnection> const&>((uint64_t **)(v2 + 216), **(_QWORD **)(a1 + 16), **(_QWORD **)(a1 + 16), *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8));
  }
}

uint64_t std::__function::__func<void mediaplatform::DispatchTarget::invokeSync<mediaplatform::DBCPSubpool::checkoutConnection(std::function<std::shared_ptr<mediaplatform::DatabaseConnection> ()(mediaplatform::FilePath const&,BOOL)> const&)::$_0>(mediaplatform::DBCPSubpool::checkoutConnection(std::function<std::shared_ptr<mediaplatform::DatabaseConnection> ()(mediaplatform::FilePath const&,BOOL)> const&)::$_0)::{lambda(void)#1},std::allocator<void mediaplatform::DispatchTarget::invokeSync<mediaplatform::DBCPSubpool::checkoutConnection(std::function<std::shared_ptr<mediaplatform::DatabaseConnection> ()(mediaplatform::FilePath const&,BOOL)> const&)::$_0>(mediaplatform::DBCPSubpool::checkoutConnection(std::function<std::shared_ptr<mediaplatform::DatabaseConnection> ()(mediaplatform::FilePath const&,BOOL)> const&)::$_0)::{lambda(void)#1}>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN13mediaplatform14DispatchTarget10invokeSyncIZNS_11DBCPSubpool18checkoutConnectionERKNSt3__18functionIFNS3_10shared_ptrINS_18DatabaseConnectionEEERKNS_8FilePathEbEEEE3$_0EEvT_EUlvE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void mediaplatform::DispatchTarget::invokeSync<mediaplatform::DBCPSubpool::checkoutConnection(std::function<std::shared_ptr<mediaplatform::DatabaseConnection> ()(mediaplatform::FilePath const&,BOOL)> const&)::$_0>(mediaplatform::DBCPSubpool::checkoutConnection(std::function<std::shared_ptr<mediaplatform::DatabaseConnection> ()(mediaplatform::FilePath const&,BOOL)> const&)::$_0)::{lambda(void)#1},std::allocator<void mediaplatform::DispatchTarget::invokeSync<mediaplatform::DBCPSubpool::checkoutConnection(std::function<std::shared_ptr<mediaplatform::DatabaseConnection> ()(mediaplatform::FilePath const&,BOOL)> const&)::$_0>(mediaplatform::DBCPSubpool::checkoutConnection(std::function<std::shared_ptr<mediaplatform::DatabaseConnection> ()(mediaplatform::FilePath const&,BOOL)> const&)::$_0)::{lambda(void)#1}>,void ()(void)>::target_type()
{
}

void mediaplatform::DatabaseConnectionPool::writerConnection(mediaplatform::DatabaseConnectionPool *this@<X0>, _QWORD *a2@<X8>)
{
  mediaplatform::DatabaseConnectionPool::_checkoutConnection(this, 0, a2);
}

void mediaplatform::DatabaseConnectionPool::closeAllConnections(mediaplatform::DBCPSubpool **this)
{
  mediaplatform::DBCPSubpool::closeAllConnections(this[8]);
  mediaplatform::DBCPSubpool::closeAllConnections(this[10]);
}

void mediaplatform::DBCPSubpool::closeAllConnections(mediaplatform::DBCPSubpool *this)
{
  _QWORD *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  _QWORD v9[3];
  _QWORD *v10;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)this + 24))(&v7);
  v9[0] = &off_24C3316B8;
  v9[1] = this;
  v10 = v9;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v7 + 48))(v7, v9);
  v2 = v10;
  if (v10 == v9)
  {
    v3 = 4;
    v2 = v9;
  }
  else
  {
    if (!v10)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  v4 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

void sub_20A799270(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, char a12, uint64_t a13, uint64_t a14, char *a15)
{
  char *v15;
  char *v17;
  uint64_t v18;
  unint64_t *p_shared_owners;
  unint64_t v20;

  v17 = a15;
  if (a15 == v15)
  {
    v18 = 4;
    v17 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v18 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v17 + 8 * v18))();
LABEL_6:
  if (a11)
  {
    p_shared_owners = (unint64_t *)&a11->__shared_owners_;
    do
      v20 = __ldaxr(p_shared_owners);
    while (__stlxr(v20 - 1, p_shared_owners));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))a11->__on_zero_shared)(a11);
      std::__shared_weak_count::__release_weak(a11);
    }
  }
  _Unwind_Resume(exception_object);
}

void std::__function::__func<void mediaplatform::DispatchTarget::invokeSync<mediaplatform::DBCPSubpool::closeAllConnections(void)::$_0>(mediaplatform::DBCPSubpool::closeAllConnections(void)::$_0)::{lambda(void)#1},std::allocator<void mediaplatform::DispatchTarget::invokeSync<mediaplatform::DBCPSubpool::closeAllConnections(void)::$_0>(mediaplatform::DBCPSubpool::closeAllConnections(void)::$_0)::{lambda(void)#1}>,void ()(void)>::~__func()
{
  JUMPOUT(0x20BD27AFCLL);
}

_QWORD *std::__function::__func<void mediaplatform::DispatchTarget::invokeSync<mediaplatform::DBCPSubpool::closeAllConnections(void)::$_0>(mediaplatform::DBCPSubpool::closeAllConnections(void)::$_0)::{lambda(void)#1},std::allocator<void mediaplatform::DispatchTarget::invokeSync<mediaplatform::DBCPSubpool::closeAllConnections(void)::$_0>(mediaplatform::DBCPSubpool::closeAllConnections(void)::$_0)::{lambda(void)#1}>,void ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24C3316B8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<void mediaplatform::DispatchTarget::invokeSync<mediaplatform::DBCPSubpool::closeAllConnections(void)::$_0>(mediaplatform::DBCPSubpool::closeAllConnections(void)::$_0)::{lambda(void)#1},std::allocator<void mediaplatform::DispatchTarget::invokeSync<mediaplatform::DBCPSubpool::closeAllConnections(void)::$_0>(mediaplatform::DBCPSubpool::closeAllConnections(void)::$_0)::{lambda(void)#1}>,void ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24C3316B8;
  a2[1] = v2;
  return result;
}

void std::__function::__func<void mediaplatform::DispatchTarget::invokeSync<mediaplatform::DBCPSubpool::closeAllConnections(void)::$_0>(mediaplatform::DBCPSubpool::closeAllConnections(void)::$_0)::{lambda(void)#1},std::allocator<void mediaplatform::DispatchTarget::invokeSync<mediaplatform::DBCPSubpool::closeAllConnections(void)::$_0>(mediaplatform::DBCPSubpool::closeAllConnections(void)::$_0)::{lambda(void)#1}>,void ()(void)>::operator()(uint64_t a1)
{
  _QWORD *v1;
  mediaplatform::DatabaseConnection *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  _QWORD *v8;
  _QWORD **v9;
  BOOL v10;
  _QWORD **v11;
  _QWORD *v12[2];

  mediaplatform::UnionSets<std::shared_ptr<mediaplatform::DatabaseConnection>>(&v11, *(_QWORD *)(a1 + 8) + 192, *(_QWORD *)(a1 + 8) + 216);
  v1 = v11;
  if (v11 != v12)
  {
    do
    {
      v2 = (mediaplatform::DatabaseConnection *)v1[4];
      v3 = (std::__shared_weak_count *)v1[5];
      if (v3)
      {
        p_shared_owners = (unint64_t *)&v3->__shared_owners_;
        do
          v5 = __ldxr(p_shared_owners);
        while (__stxr(v5 + 1, p_shared_owners));
      }
      mediaplatform::DatabaseConnection::close(v2);
      if (v3)
      {
        v6 = (unint64_t *)&v3->__shared_owners_;
        do
          v7 = __ldaxr(v6);
        while (__stlxr(v7 - 1, v6));
        if (!v7)
        {
          ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
          std::__shared_weak_count::__release_weak(v3);
        }
      }
      v8 = (_QWORD *)v1[1];
      if (v8)
      {
        do
        {
          v9 = (_QWORD **)v8;
          v8 = (_QWORD *)*v8;
        }
        while (v8);
      }
      else
      {
        do
        {
          v9 = (_QWORD **)v1[2];
          v10 = *v9 == v1;
          v1 = v9;
        }
        while (!v10);
      }
      v1 = v9;
    }
    while (v9 != v12);
  }
  std::__tree<std::shared_ptr<mediaplatform::DatabaseConnection>>::destroy(v12[0]);
}

void sub_20A799434(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, _QWORD *a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  std::__tree<std::shared_ptr<mediaplatform::DatabaseConnection>>::destroy(a11);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<void mediaplatform::DispatchTarget::invokeSync<mediaplatform::DBCPSubpool::closeAllConnections(void)::$_0>(mediaplatform::DBCPSubpool::closeAllConnections(void)::$_0)::{lambda(void)#1},std::allocator<void mediaplatform::DispatchTarget::invokeSync<mediaplatform::DBCPSubpool::closeAllConnections(void)::$_0>(mediaplatform::DBCPSubpool::closeAllConnections(void)::$_0)::{lambda(void)#1}>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN13mediaplatform14DispatchTarget10invokeSyncIZNS_11DBCPSubpool19closeAllConnectionsEvE3$_0EEvT_EUlvE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void mediaplatform::DispatchTarget::invokeSync<mediaplatform::DBCPSubpool::closeAllConnections(void)::$_0>(mediaplatform::DBCPSubpool::closeAllConnections(void)::$_0)::{lambda(void)#1},std::allocator<void mediaplatform::DispatchTarget::invokeSync<mediaplatform::DBCPSubpool::closeAllConnections(void)::$_0>(mediaplatform::DBCPSubpool::closeAllConnections(void)::$_0)::{lambda(void)#1}>,void ()(void)>::target_type()
{
}

void mlcore::DeviceLibrary::~DeviceLibrary(mlcore::DeviceLibrary *this)
{
  mlcore::DeviceLibrary::~DeviceLibrary(this);
  JUMPOUT(0x20BD27AFCLL);
}

{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  void **v5;

  *(_QWORD *)this = &off_24C336FE0;
  v2 = (_QWORD *)*((_QWORD *)this + 23);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = (void *)*((_QWORD *)this + 21);
  *((_QWORD *)this + 21) = 0;
  if (v4)
    operator delete(v4);
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)this + 152);
  *(_QWORD *)this = &off_24C33AA40;
  v5 = (void **)((char *)this + 128);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v5);
  *((_QWORD *)this + 12) = &off_24C331570;
  v5 = (void **)((char *)this + 104);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v5);
  *((_QWORD *)this + 8) = &off_24C331570;
  v5 = (void **)((char *)this + 72);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v5);
  *((_QWORD *)this + 4) = &off_24C331570;
  v5 = (void **)((char *)this + 40);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v5);
  if (*((char *)this + 31) < 0)
    operator delete(*((void **)this + 1));
}

void mlcore::Library::~Library(mlcore::Library *this)
{
  void **v2;

  *(_QWORD *)this = &off_24C33AA40;
  v2 = (void **)((char *)this + 128);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  *((_QWORD *)this + 12) = &off_24C331570;
  v2 = (void **)((char *)this + 104);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  *((_QWORD *)this + 8) = &off_24C331570;
  v2 = (void **)((char *)this + 72);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  *((_QWORD *)this + 4) = &off_24C331570;
  v2 = (void **)((char *)this + 40);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*((char *)this + 31) < 0)
    operator delete(*((void **)this + 1));
}

void std::__shared_ptr_emplace<mlcore::LocalLibrary>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C33C600;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<mlcore::LocalLibrary>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C33C600;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x20BD27AFCLL);
}

uint64_t std::__shared_ptr_emplace<mlcore::LocalLibrary>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 8))(a1 + 24);
}

uint64_t mlcore::DeviceLibrary::localLibrary@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(this + 160);
  *a2 = *(_QWORD *)(this + 152);
  a2[1] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return this;
}

uint64_t mlcore::DeviceLibrary::expectedEntityQuerySize(mlcore::DeviceLibrary *this, mlcore::EntityClass *a2)
{
  char *v2;

  v2 = (char *)this + 184;
  while (1)
  {
    v2 = *(char **)v2;
    if (!v2)
      break;
    if (*((mlcore::EntityClass **)v2 + 2) == a2)
      return *((_QWORD *)v2 + 3);
  }
  return 0;
}

void mlcore::TVShow::~TVShow(mlcore::TVShow *this)
{
  *(_QWORD *)this = off_24C33A860;
  mlcore::PropertyCacheBase<long long,int,double,std::string,mediaplatform::Data>::~PropertyCacheBase((_QWORD *)this + 1);
}

{
  *(_QWORD *)this = off_24C33A860;
  mlcore::PropertyCacheBase<long long,int,double,std::string,mediaplatform::Data>::~PropertyCacheBase((_QWORD *)this + 1);
  JUMPOUT(0x20BD27AFCLL);
}

{
  *(_QWORD *)this = off_24C33A860;
  mlcore::PropertyCacheBase<long long,int,double,std::string,mediaplatform::Data>::~PropertyCacheBase((_QWORD *)this + 1);
}

double std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::TypedEntityClass<mlcore::TVShow>::sharedPointer(void)::{lambda(void)#1} &&>>()
{
  uint64_t v0;
  double result;

  v0 = operator new();
  result = 0.0;
  *(_OWORD *)(v0 + 16) = 0u;
  *(_OWORD *)(v0 + 32) = 0u;
  *(_OWORD *)(v0 + 48) = 0u;
  *(_OWORD *)(v0 + 64) = 0u;
  *(_OWORD *)(v0 + 80) = 0u;
  *(_QWORD *)(v0 + 96) = 0;
  *(_DWORD *)(v0 + 104) = 1065353216;
  *(_OWORD *)(v0 + 112) = 0u;
  *(_OWORD *)(v0 + 128) = 0u;
  *(_DWORD *)(v0 + 144) = 1065353216;
  *(_QWORD *)v0 = &off_24C339038;
  *(_QWORD *)(v0 + 8) = 850045863;
  mlcore::TypedEntityClass<mlcore::TVShow>::sharedPointer(void)::__sharedPointer = v0;
  return result;
}

void mlcore::TypedEntityClass<mlcore::TVShow>::~TypedEntityClass(mlcore::EntityClass *a1)
{
  mlcore::EntityClass::~EntityClass(a1);
  JUMPOUT(0x20BD27AFCLL);
}

uint64_t mlcore::TypedEntityClass<mlcore::TVShow>::description(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
}

__n128 mlcore::TypedEntityClass<mlcore::TVShow>::create@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, __n128 *a4@<X8>)
{
  char *v8;
  uint64_t v9;
  unint64_t *v10;
  uint64_t v11;
  __n128 result;
  __n128 v13;
  unint64_t v14[3];
  unint64_t *v15;
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  v8 = (char *)operator new(0x100uLL);
  *((_QWORD *)v8 + 1) = 0;
  *((_QWORD *)v8 + 2) = 0;
  *(_QWORD *)v8 = &off_24C33D470;
  *(_OWORD *)(v8 + 40) = 0u;
  *(_OWORD *)(v8 + 56) = 0u;
  *((_DWORD *)v8 + 18) = 1065353216;
  *((_OWORD *)v8 + 5) = 0u;
  *((_OWORD *)v8 + 6) = 0u;
  *((_DWORD *)v8 + 28) = 1065353216;
  *(_OWORD *)(v8 + 120) = 0u;
  *(_OWORD *)(v8 + 136) = 0u;
  *((_DWORD *)v8 + 38) = 1065353216;
  *((_OWORD *)v8 + 10) = 0u;
  *((_OWORD *)v8 + 11) = 0u;
  *((_DWORD *)v8 + 48) = 1065353216;
  *(_OWORD *)(v8 + 216) = 0u;
  *((_DWORD *)v8 + 58) = 1065353216;
  *((_QWORD *)v8 + 30) = &unk_24C3371E8;
  *((_QWORD *)v8 + 31) = a2;
  *(_OWORD *)(v8 + 200) = 0u;
  v9 = (uint64_t)(v8 + 200);
  *((_QWORD *)v8 + 4) = &off_24C3371C0;
  *((_QWORD *)v8 + 3) = &off_24C33A950;
  v13.n128_u64[0] = (unint64_t)(v8 + 24);
  v13.n128_u64[1] = (unint64_t)v8;
  v14[0] = (unint64_t)&off_24C33B140;
  v15 = v14;
  mlcore::PropertyCache::mergePropertiesFromCache((uint64_t)(v8 + 32), a3, (uint64_t)v14);
  v10 = v15;
  if (v15 == v14)
  {
    v11 = 4;
    v10 = v14;
    goto LABEL_5;
  }
  if (v15)
  {
    v11 = 5;
LABEL_5:
    (*(void (**)(void))(*v10 + 8 * v11))();
  }
  v14[0] = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 112))(a1);
  std::__hash_table<std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>,std::__unordered_map_hasher<mlcore::ModelProperty<long long> *,std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>,std::hash<mlcore::ModelProperty<long long> *>,std::equal_to<mlcore::ModelProperty<long long> *>,true>,std::__unordered_map_equal<mlcore::ModelProperty<long long> *,std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>,std::equal_to<mlcore::ModelProperty<long long> *>,std::hash<mlcore::ModelProperty<long long> *>,true>,std::allocator<std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>>>::__emplace_unique_key_args<mlcore::ModelProperty<long long> *,std::piecewise_construct_t const&,std::tuple<mlcore::ModelProperty<long long> * const&>,std::tuple<>>(v9, v14[0], v14)[3] = a2;
  result = v13;
  *a4 = v13;
  return result;
}

void sub_20A799978(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15)
{
  char *v15;
  char *v17;
  uint64_t v18;

  v17 = a15;
  if (a15 == v15)
  {
    v18 = 4;
    v17 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v18 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v17 + 8 * v18))();
LABEL_6:
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t mlcore::TypedEntityClass<mlcore::TVShow>::name(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
}

BOOL mlcore::TypedEntityClass<mlcore::TVShow>::isRevisionTrackable(uint64_t a1)
{
  return (*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1) != -1;
}

uint64_t mlcore::TypedEntityClass<mlcore::TVShow>::isCloudUpdatable()
{
  return 0;
}

void mlcore::TypedEntityClass<mlcore::TVShow>::databaseTablesToDeleteFrom(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

void mlcore::TypedEntityClass<mlcore::TVShow>::databaseTablesToInsertInto(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

uint64_t mlcore::TypedEntityClass<mlcore::TVShow>::sectionPropertyForOrderingProperty(mlcore *a1, mlcore *a2)
{
  mlcore *v3;

  v3 = (mlcore *)mlcore::ItemArtistPropertyOrder(a1);
  if (v3 == a2)
    return mlcore::ItemArtistPropertyOrderSection(v3);
  else
    return 0;
}

mlcore::ItemArtistTable *_ZNSt3__115allocate_sharedB8ne180100IN6mlcore15ItemArtistTableENS_9allocatorIS2_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(mlcore::ItemArtistTable **a1)
{
  _QWORD *v2;
  mlcore::ItemArtistTable *result;

  v2 = operator new(0x768uLL);
  v2[1] = 0;
  v2[2] = 0;
  *v2 = &off_24C33CA98;
  result = mlcore::ItemArtistTable::ItemArtistTable((mlcore::ItemArtistTable *)(v2 + 3));
  *a1 = result;
  a1[1] = (mlcore::ItemArtistTable *)v2;
  return result;
}

void sub_20A799A94(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<mlcore::ItemArtistTable>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C33CA98;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<mlcore::ItemArtistTable>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C33CA98;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x20BD27AFCLL);
}

uint64_t std::__shared_ptr_emplace<mlcore::ItemArtistTable>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__shared_ptr_emplace<mlcore::TVShow>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C33D470;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<mlcore::TVShow>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C33D470;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x20BD27AFCLL);
}

uint64_t std::__shared_ptr_emplace<mlcore::TVShow>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::TVShowPropertyEpisodeCount(void)::$_0 &&>>()
{
  uint64_t v0;
  mlcore *v1;
  mlcore *v2;
  uint64_t v3;
  _QWORD *v4;
  __int128 v5;
  unint64_t *v6;
  unint64_t v7;
  unint64_t v8;
  std::__shared_weak_count *size;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  std::string __p;
  __int128 v18;

  v0 = operator new();
  v1 = (mlcore *)mlcore::TypedEntityClass<mlcore::TVEpisode>::sharedPointer();
  v2 = (mlcore *)mlcore::ItemPropertyItemArtistPersistentID(v1);
  v3 = mlcore::ItemArtistPropertyPersistentID(v2);
  v4 = operator new(0x38uLL);
  v4[1] = 0;
  v4[2] = 0;
  *v4 = &off_24C33D240;
  v4[4] = v2;
  v4[5] = 0;
  v4[3] = &off_24C33A5A8;
  v4[6] = v3;
  *(_QWORD *)&v18 = v4 + 3;
  *((_QWORD *)&v18 + 1) = v4;
  std::allocate_shared[abi:ne180100]<mlcore::AggregateFunctionQuery,std::allocator<mlcore::AggregateFunctionQuery>,mlcore::EntityClass *,mlcore::AggregateFunctionQuery::AggregateFunction,decltype(nullptr),std::shared_ptr<mlcore::ComparisonPropertyPredicate>,void>(&__p, (uint64_t)v1, 0, &v18);
  v5 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = 0uLL;
  *(_OWORD *)(v0 + 16) = 0u;
  *(_OWORD *)(v0 + 32) = 0u;
  *(_OWORD *)(v0 + 48) = 0u;
  *(_QWORD *)v0 = &off_24C337228;
  *(_OWORD *)(v0 + 64) = v5;
  if (*((_QWORD *)&v5 + 1))
  {
    v6 = (unint64_t *)(*((_QWORD *)&v5 + 1) + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
    mlcore::TVShowPropertyEpisodeCount(void)::property = v0;
    do
      v8 = __ldaxr(v6);
    while (__stlxr(v8 - 1, v6));
    if (!v8)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v5 + 1) + 16))(*((_QWORD *)&v5 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v5 + 1));
    }
  }
  else
  {
    mlcore::TVShowPropertyEpisodeCount(void)::property = v0;
  }
  size = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
  if (__p.__r_.__value_.__l.__size_)
  {
    v10 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
  }
  v12 = (std::__shared_weak_count *)*((_QWORD *)&v18 + 1);
  if (*((_QWORD *)&v18 + 1))
  {
    v13 = (unint64_t *)(*((_QWORD *)&v18 + 1) + 8);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  v15 = mlcore::TypedEntityClass<mlcore::Artist>::sharedPointer();
  v16 = mlcore::TVShowPropertyEpisodeCount(void)::property;
  std::string::basic_string[abi:ne180100]<0>(&__p, "episodeCount");
  mlcore::EntityClass::setPropertyForName(v15, v16, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_20A799D14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::TVShowPropertyHasSeriesName(void)::$_0 &&>>()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  std::__shared_weak_count *v3;
  unint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  std::string __str;

  v0 = operator new();
  v1 = mlcore::TVShowPropertySeriesOrder((mlcore *)v0);
  v2 = (char *)operator new(0x48uLL);
  v3 = (std::__shared_weak_count *)v2;
  *(_OWORD *)(v2 + 8) = 0u;
  v4 = (unint64_t *)(v2 + 8);
  *(_QWORD *)v2 = &off_24C33CE88;
  *((_QWORD *)v2 + 4) = v1;
  *((_QWORD *)v2 + 5) = 0x100000000;
  *((_QWORD *)v2 + 3) = &unk_24C339CA8;
  *((_QWORD *)v2 + 6) = 0;
  *(_OWORD *)(v2 + 56) = 0u;
  *(_OWORD *)(v0 + 16) = 0u;
  *(_OWORD *)(v0 + 32) = 0u;
  *(_OWORD *)(v0 + 48) = 0u;
  *(_QWORD *)v0 = &off_24C3398B8;
  *(_QWORD *)(v0 + 64) = v2 + 24;
  *(_QWORD *)(v0 + 72) = v2;
  do
    v5 = __ldxr(v4);
  while (__stxr(v5 + 1, v4));
  mlcore::TVShowPropertyHasSeriesName(void)::property = v0;
  do
    v6 = __ldaxr(v4);
  while (__stlxr(v6 - 1, v4));
  if (!v6)
  {
    (*(void (**)(char *))(*(_QWORD *)v2 + 16))(v2);
    std::__shared_weak_count::__release_weak(v3);
  }
  v7 = mlcore::TVShowPropertyHasSeriesName(void)::property;
  std::string::basic_string[abi:ne180100]<0>(&__str, "has_series_name");
  std::string::operator=((std::string *)(v7 + 40), &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  v8 = mlcore::TypedEntityClass<mlcore::ItemArtist>::sharedPointer();
  v9 = mlcore::TVShowPropertyHasSeriesName(void)::property;
  std::string::basic_string[abi:ne180100]<0>(&__str, "hasSeriesName");
  mlcore::EntityClass::setPropertyForName(v8, v9, &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
}

void sub_20A799EFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

double std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::TypedEntityClass<mlcore::ItemArtist>::sharedPointer(void)::{lambda(void)#1} &&>>()
{
  uint64_t v0;
  double result;

  v0 = operator new();
  result = 0.0;
  *(_OWORD *)(v0 + 16) = 0u;
  *(_OWORD *)(v0 + 32) = 0u;
  *(_OWORD *)(v0 + 48) = 0u;
  *(_OWORD *)(v0 + 64) = 0u;
  *(_OWORD *)(v0 + 80) = 0u;
  *(_QWORD *)(v0 + 96) = 0;
  *(_DWORD *)(v0 + 104) = 1065353216;
  *(_OWORD *)(v0 + 112) = 0u;
  *(_OWORD *)(v0 + 128) = 0u;
  *(_DWORD *)(v0 + 144) = 1065353216;
  *(_QWORD *)v0 = &off_24C338318;
  *(_QWORD *)(v0 + 8) = 850045863;
  mlcore::TypedEntityClass<mlcore::ItemArtist>::sharedPointer(void)::__sharedPointer = v0;
  return result;
}

void mlcore::TypedEntityClass<mlcore::ItemArtist>::~TypedEntityClass(mlcore::EntityClass *a1)
{
  mlcore::EntityClass::~EntityClass(a1);
  JUMPOUT(0x20BD27AFCLL);
}

uint64_t mlcore::TypedEntityClass<mlcore::ItemArtist>::description(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
}

double mlcore::TypedEntityClass<mlcore::ItemArtist>::create@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, _OWORD *a4@<X8>)
{
  double v8;
  unint64_t *v9;
  uint64_t v10;
  double result;
  double v12[3];
  unint64_t v13[3];
  unint64_t *v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  std::allocate_shared[abi:ne180100]<mlcore::ItemArtist,std::allocator<mlcore::ItemArtist>,long long &,void>(v12, a2);
  v8 = v12[0];
  v13[0] = (unint64_t)&off_24C33B140;
  v14 = v13;
  mlcore::PropertyCache::mergePropertiesFromCache(*(_QWORD *)&v12[0] + 8, a3, (uint64_t)v13);
  v9 = v14;
  if (v14 == v13)
  {
    v10 = 4;
    v9 = v13;
    goto LABEL_5;
  }
  if (v14)
  {
    v10 = 5;
LABEL_5:
    (*(void (**)(void))(*v9 + 8 * v10))();
  }
  v13[0] = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 112))(a1);
  std::__hash_table<std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>,std::__unordered_map_hasher<mlcore::ModelProperty<long long> *,std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>,std::hash<mlcore::ModelProperty<long long> *>,std::equal_to<mlcore::ModelProperty<long long> *>,true>,std::__unordered_map_equal<mlcore::ModelProperty<long long> *,std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>,std::equal_to<mlcore::ModelProperty<long long> *>,std::hash<mlcore::ModelProperty<long long> *>,true>,std::allocator<std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>>>::__emplace_unique_key_args<mlcore::ModelProperty<long long> *,std::piecewise_construct_t const&,std::tuple<mlcore::ModelProperty<long long> * const&>,std::tuple<>>(*(_QWORD *)&v8 + 176, v13[0], v13)[3] = a2;
  result = v12[0];
  *a4 = *(_OWORD *)v12;
  return result;
}

void sub_20A79A0D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15)
{
  char *v15;
  char *v17;
  uint64_t v18;

  v17 = a15;
  if (a15 == v15)
  {
    v18 = 4;
    v17 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v18 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v17 + 8 * v18))();
LABEL_6:
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t mlcore::TypedEntityClass<mlcore::ItemArtist>::name(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
}

BOOL mlcore::TypedEntityClass<mlcore::ItemArtist>::isRevisionTrackable(uint64_t a1)
{
  return (*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1) != -1;
}

char *std::allocate_shared[abi:ne180100]<mlcore::ItemArtist,std::allocator<mlcore::ItemArtist>,long long &,void>(_QWORD *a1, uint64_t a2)
{
  char *v4;
  char *result;

  v4 = (char *)operator new(0x100uLL);
  *((_QWORD *)v4 + 1) = 0;
  *((_QWORD *)v4 + 2) = 0;
  *(_QWORD *)v4 = &off_24C33C248;
  *(_OWORD *)(v4 + 40) = 0u;
  *(_OWORD *)(v4 + 56) = 0u;
  *((_DWORD *)v4 + 18) = 1065353216;
  *((_OWORD *)v4 + 5) = 0u;
  *((_OWORD *)v4 + 6) = 0u;
  *((_DWORD *)v4 + 28) = 1065353216;
  *(_OWORD *)(v4 + 120) = 0u;
  *(_OWORD *)(v4 + 136) = 0u;
  *((_DWORD *)v4 + 38) = 1065353216;
  *((_OWORD *)v4 + 10) = 0u;
  *((_OWORD *)v4 + 11) = 0u;
  *((_DWORD *)v4 + 48) = 1065353216;
  *(_OWORD *)(v4 + 200) = 0u;
  *(_OWORD *)(v4 + 216) = 0u;
  *((_DWORD *)v4 + 58) = 1065353216;
  *((_QWORD *)v4 + 4) = &off_24C3371C0;
  *((_QWORD *)v4 + 30) = &unk_24C3371E8;
  *((_QWORD *)v4 + 31) = a2;
  a1[1] = v4;
  *((_QWORD *)v4 + 3) = &off_24C335E20;
  result = v4 + 24;
  *a1 = result;
  return result;
}

void std::__shared_ptr_emplace<mlcore::ItemArtist>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C33C248;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<mlcore::ItemArtist>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C33C248;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x20BD27AFCLL);
}

uint64_t std::__shared_ptr_emplace<mlcore::ItemArtist>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t mlcore::TVShowPropertySeriesOrderSection(mlcore *this)
{
  mlcore *v1;
  uint64_t v2;
  uint64_t v4[2];

  v1 = (mlcore *)mlcore::ItemArtistPropertyRepresentativeItemPersistentID(this);
  v2 = mlcore::ItemPropertySeriesNameOrderSection(v1);
  v4[0] = 0;
  v4[1] = 0;
  return mlcore::GetForeignProperty<int>((uint64_t)v1, v2, v4);
}

void sub_20A79A280(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

double mlcore::TVShow::TVShow(mlcore::TVShow *this, uint64_t a2)
{
  double result;

  result = 0.0;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_DWORD *)this + 12) = 1065353216;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *((_DWORD *)this + 22) = 1065353216;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_DWORD *)this + 32) = 1065353216;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 152) = 0u;
  *((_DWORD *)this + 42) = 1065353216;
  *((_OWORD *)this + 11) = 0u;
  *((_OWORD *)this + 12) = 0u;
  *((_DWORD *)this + 52) = 1065353216;
  *((_QWORD *)this + 27) = &unk_24C3371E8;
  *((_QWORD *)this + 28) = a2;
  *(_QWORD *)this = &off_24C33A950;
  *((_QWORD *)this + 1) = &off_24C3371C0;
  return result;
}

{
  double result;

  result = 0.0;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_DWORD *)this + 12) = 1065353216;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *((_DWORD *)this + 22) = 1065353216;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_DWORD *)this + 32) = 1065353216;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 152) = 0u;
  *((_DWORD *)this + 42) = 1065353216;
  *((_OWORD *)this + 11) = 0u;
  *((_OWORD *)this + 12) = 0u;
  *((_DWORD *)this + 52) = 1065353216;
  *((_QWORD *)this + 27) = &unk_24C3371E8;
  *((_QWORD *)this + 28) = a2;
  *(_QWORD *)this = &off_24C33A950;
  *((_QWORD *)this + 1) = &off_24C3371C0;
  return result;
}

void sub_20A79A470(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p)
{
  void *v9;
  int v10;

  operator delete(v9);
  if (v10 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t mlcore::MediaColumn<double>::MediaColumn(uint64_t a1, uint64_t a2)
{
  int v3;
  std::string *v4;
  std::string __p;
  std::string v7;

  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    __p = *(std::string *)a2;
  v3 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v7, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  else
    v7 = __p;
  *(_QWORD *)a1 = off_24C335D90;
  v4 = (std::string *)(a1 + 8);
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v4, v7.__r_.__value_.__l.__data_, v7.__r_.__value_.__l.__size_);
    *(_DWORD *)(a1 + 32) = 16;
    operator delete(v7.__r_.__value_.__l.__data_);
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)&v7.__r_.__value_.__l.__data_;
    *(_QWORD *)(a1 + 24) = *((_QWORD *)&v7.__r_.__value_.__l + 2);
    *(_DWORD *)(a1 + 32) = 16;
  }
  *(_QWORD *)a1 = off_24C335AD8;
  *(_BYTE *)(a1 + 36) = 1;
  *(_QWORD *)(a1 + 40) = 0;
  if (v3 < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  *(_QWORD *)a1 = off_24C336A80;
  return a1;
}

void sub_20A79A59C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p)
{
  void *v9;
  int v10;

  operator delete(v9);
  if (v10 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void mlcore::ItemPlaybackTable::~ItemPlaybackTable(mlcore::ItemPlaybackTable *this)
{
  *(_QWORD *)this = off_24C3363D0;
  std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul,3ul,4ul,5ul,6ul,7ul,8ul,9ul,10ul,11ul,12ul,13ul,14ul,15ul,16ul,17ul,18ul,19ul,20ul>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<double>,mlcore::MediaColumn<double>,mlcore::MediaColumn<double>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>>::~__tuple_impl((uint64_t)this + 1136);
  *(_QWORD *)this = off_24C335868;
  *((_QWORD *)this + 136) = off_24C335D90;
  if (*((char *)this + 1119) < 0)
    operator delete(*((void **)this + 137));
  *((_QWORD *)this + 130) = off_24C335D90;
  if (*((char *)this + 1071) < 0)
    operator delete(*((void **)this + 131));
  mediaplatform::DatabaseColumnTuple<2ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<double>,mediaplatform::DatabaseColumn<double>,mediaplatform::DatabaseColumn<double>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple((uint64_t)this + 80);
  if (*((char *)this + 79) < 0)
    operator delete(*((void **)this + 7));
  mediaplatform::DatabaseTableBase::~DatabaseTableBase((void **)this);
}

{
  *(_QWORD *)this = off_24C3363D0;
  std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul,3ul,4ul,5ul,6ul,7ul,8ul,9ul,10ul,11ul,12ul,13ul,14ul,15ul,16ul,17ul,18ul,19ul,20ul>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<double>,mlcore::MediaColumn<double>,mlcore::MediaColumn<double>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>>::~__tuple_impl((uint64_t)this + 1136);
  *(_QWORD *)this = off_24C335868;
  *((_QWORD *)this + 136) = off_24C335D90;
  if (*((char *)this + 1119) < 0)
    operator delete(*((void **)this + 137));
  *((_QWORD *)this + 130) = off_24C335D90;
  if (*((char *)this + 1071) < 0)
    operator delete(*((void **)this + 131));
  mediaplatform::DatabaseColumnTuple<2ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<double>,mediaplatform::DatabaseColumn<double>,mediaplatform::DatabaseColumn<double>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple((uint64_t)this + 80);
  if (*((char *)this + 79) < 0)
    operator delete(*((void **)this + 7));
  mediaplatform::DatabaseTableBase::~DatabaseTableBase((void **)this);
  JUMPOUT(0x20BD27AFCLL);
}

uint64_t mediaplatform::DatabaseTable<long long,int,int,int,int,int,std::string,long long,std::string,std::string,long long,long long,long long,long long,int,int,double,double,double,int,int>::columnCount()
{
  return 21;
}

void mediaplatform::DatabaseTable<long long,int,int,int,int,int,std::string,long long,std::string,std::string,long long,long long,long long,long long,int,int,double,double,double,int,int>::columnNames(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  mediaplatform::ColumnNamesApplier::operator()<long long>((uint64_t)a2, a1 + 1088);
  mediaplatform::ColumnNamesApplier::operator()<int>((uint64_t)a2, a1 + 1040);
  mediaplatform::ColumnNamesApplier::operator()<int>((uint64_t)a2, a1 + 992);
  mediaplatform::ColumnNamesApplier::operator()<int>((uint64_t)a2, a1 + 944);
  mediaplatform::ColumnNamesApplier::operator()<int>((uint64_t)a2, a1 + 896);
  mediaplatform::ColumnNamesApplier::operator()<int>((uint64_t)a2, a1 + 848);
  mediaplatform::ColumnNamesApplier::operator()<std::string>((uint64_t)a2, a1 + 784);
  mediaplatform::ColumnNamesApplier::operator()<long long>((uint64_t)a2, a1 + 736);
  mediaplatform::ColumnNamesApplier::operator()<std::string>((uint64_t)a2, a1 + 672);
  mediaplatform::ColumnNamesApplier::operator()<std::string>((uint64_t)a2, a1 + 608);
  mediaplatform::ColumnNamesApplier::operator()<long long>((uint64_t)a2, a1 + 560);
  mediaplatform::ColumnNamesApplier::operator()<long long>((uint64_t)a2, a1 + 512);
  mediaplatform::ColumnNamesApplier::operator()<long long>((uint64_t)a2, a1 + 464);
  mediaplatform::ColumnNamesApplier::operator()<long long>((uint64_t)a2, a1 + 416);
  mediaplatform::ColumnNamesApplier::operator()<int>((uint64_t)a2, a1 + 368);
  mediaplatform::ColumnNamesApplier::operator()<int>((uint64_t)a2, a1 + 320);
  mediaplatform::ColumnNamesApplier::operator()<double>((uint64_t)a2, a1 + 272);
  mediaplatform::ColumnNamesApplier::operator()<double>((uint64_t)a2, a1 + 224);
  mediaplatform::ColumnNamesApplier::operator()<double>((uint64_t)a2, a1 + 176);
  mediaplatform::ColumnNamesApplier::operator()<int>((uint64_t)a2, a1 + 128);
  mediaplatform::ColumnNamesApplier::operator()<int>((uint64_t)a2, a1 + 80);
}

void sub_20A79A834(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void mediaplatform::DatabaseTable<long long,int,int,int,int,int,std::string,long long,std::string,std::string,long long,long long,long long,long long,int,int,double,double,double,int,int>::targetColumnExpression(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  __int128 *v3;
  __int128 *v4[3];
  __int128 **v5;

  v3 = (__int128 *)(a1 + 8);
  (*(void (**)(__int128 **__return_ptr))(*(_QWORD *)a1 + 24))(v4);
  std::allocate_shared[abi:ne180100]<mediaplatform::SQLColumnNameExpression,std::allocator<mediaplatform::SQLColumnNameExpression>,std::string &,std::string const&,void>(a2, v4[0], v3);
  v5 = v4;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v5);
}

void sub_20A79A8AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul,3ul,4ul,5ul,6ul,7ul,8ul,9ul,10ul,11ul,12ul,13ul,14ul,15ul,16ul,17ul,18ul,19ul,20ul>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<double>,mlcore::MediaColumn<double>,mlcore::MediaColumn<double>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>>::~__tuple_impl(uint64_t a1)
{
  *(_QWORD *)(a1 + 1008) = off_24C335D90;
  if (*(char *)(a1 + 1039) < 0)
    operator delete(*(void **)(a1 + 1016));
  *(_QWORD *)(a1 + 960) = off_24C335D90;
  if (*(char *)(a1 + 991) < 0)
    operator delete(*(void **)(a1 + 968));
  *(_QWORD *)(a1 + 912) = off_24C335D90;
  if (*(char *)(a1 + 943) < 0)
    operator delete(*(void **)(a1 + 920));
  *(_QWORD *)(a1 + 864) = off_24C335D90;
  if (*(char *)(a1 + 895) < 0)
    operator delete(*(void **)(a1 + 872));
  *(_QWORD *)(a1 + 816) = off_24C335D90;
  if (*(char *)(a1 + 847) < 0)
    operator delete(*(void **)(a1 + 824));
  *(_QWORD *)(a1 + 768) = off_24C335D90;
  if (*(char *)(a1 + 799) < 0)
    operator delete(*(void **)(a1 + 776));
  *(_QWORD *)(a1 + 720) = off_24C335D90;
  if (*(char *)(a1 + 751) < 0)
    operator delete(*(void **)(a1 + 728));
  *(_QWORD *)(a1 + 672) = off_24C335D90;
  if (*(char *)(a1 + 703) < 0)
    operator delete(*(void **)(a1 + 680));
  *(_QWORD *)(a1 + 624) = off_24C335D90;
  if (*(char *)(a1 + 655) < 0)
    operator delete(*(void **)(a1 + 632));
  *(_QWORD *)(a1 + 576) = off_24C335D90;
  if (*(char *)(a1 + 607) < 0)
    operator delete(*(void **)(a1 + 584));
  *(_QWORD *)(a1 + 528) = off_24C335D90;
  if (*(char *)(a1 + 559) < 0)
    operator delete(*(void **)(a1 + 536));
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 464);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 400);
  *(_QWORD *)(a1 + 352) = off_24C335D90;
  if (*(char *)(a1 + 383) < 0)
    operator delete(*(void **)(a1 + 360));
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 288);
  *(_QWORD *)(a1 + 240) = off_24C335D90;
  if (*(char *)(a1 + 271) < 0)
    operator delete(*(void **)(a1 + 248));
  *(_QWORD *)(a1 + 192) = off_24C335D90;
  if (*(char *)(a1 + 223) < 0)
    operator delete(*(void **)(a1 + 200));
  *(_QWORD *)(a1 + 144) = off_24C335D90;
  if (*(char *)(a1 + 175) < 0)
    operator delete(*(void **)(a1 + 152));
  *(_QWORD *)(a1 + 96) = off_24C335D90;
  if (*(char *)(a1 + 127) < 0)
    operator delete(*(void **)(a1 + 104));
  *(_QWORD *)(a1 + 48) = off_24C335D90;
  if (*(char *)(a1 + 79) < 0)
    operator delete(*(void **)(a1 + 56));
  *(_QWORD *)a1 = off_24C335D90;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

uint64_t mediaplatform::DatabaseColumnTuple<2ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<double>,mediaplatform::DatabaseColumn<double>,mediaplatform::DatabaseColumn<double>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(uint64_t a1)
{
  *(_QWORD *)(a1 + 912) = off_24C335D90;
  if (*(char *)(a1 + 943) < 0)
    operator delete(*(void **)(a1 + 920));
  *(_QWORD *)(a1 + 864) = off_24C335D90;
  if (*(char *)(a1 + 895) < 0)
    operator delete(*(void **)(a1 + 872));
  *(_QWORD *)(a1 + 816) = off_24C335D90;
  if (*(char *)(a1 + 847) < 0)
    operator delete(*(void **)(a1 + 824));
  *(_QWORD *)(a1 + 768) = off_24C335D90;
  if (*(char *)(a1 + 799) < 0)
    operator delete(*(void **)(a1 + 776));
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 704);
  *(_QWORD *)(a1 + 656) = off_24C335D90;
  if (*(char *)(a1 + 687) < 0)
    operator delete(*(void **)(a1 + 664));
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 592);
  return mediaplatform::DatabaseColumnTuple<9ul,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<double>,mediaplatform::DatabaseColumn<double>,mediaplatform::DatabaseColumn<double>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<9ul,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<double>,mediaplatform::DatabaseColumn<double>,mediaplatform::DatabaseColumn<double>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(uint64_t a1)
{
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 528);
  *(_QWORD *)(a1 + 480) = off_24C335D90;
  if (*(char *)(a1 + 511) < 0)
    operator delete(*(void **)(a1 + 488));
  *(_QWORD *)(a1 + 432) = off_24C335D90;
  if (*(char *)(a1 + 463) < 0)
    operator delete(*(void **)(a1 + 440));
  *(_QWORD *)(a1 + 384) = off_24C335D90;
  if (*(char *)(a1 + 415) < 0)
    operator delete(*(void **)(a1 + 392));
  *(_QWORD *)(a1 + 336) = off_24C335D90;
  if (*(char *)(a1 + 367) < 0)
    operator delete(*(void **)(a1 + 344));
  *(_QWORD *)(a1 + 288) = off_24C335D90;
  if (*(char *)(a1 + 319) < 0)
    operator delete(*(void **)(a1 + 296));
  return std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul,3ul,4ul,5ul>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>>::~__tuple_impl(a1);
}

void mediaplatform::DatabaseTable<long long,int,int,int,int,int,std::string,long long,std::string,std::string,long long,long long,long long,long long,int,int,double,double,double,int,int>::~DatabaseTable(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = off_24C335868;
  v2 = a1 + 80;
  *(_QWORD *)(a1 + 1088) = off_24C335D90;
  if (*(char *)(a1 + 1119) < 0)
    operator delete(*(void **)(a1 + 1096));
  *(_QWORD *)(a1 + 1040) = off_24C335D90;
  if (*(char *)(a1 + 1071) < 0)
    operator delete(*(void **)(a1 + 1048));
  mediaplatform::DatabaseColumnTuple<2ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<double>,mediaplatform::DatabaseColumn<double>,mediaplatform::DatabaseColumn<double>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(v2);
  if (*(char *)(a1 + 79) < 0)
    operator delete(*(void **)(a1 + 56));
  mediaplatform::DatabaseTableBase::~DatabaseTableBase((void **)a1);
}

{
  uint64_t v2;

  *(_QWORD *)a1 = off_24C335868;
  v2 = a1 + 80;
  *(_QWORD *)(a1 + 1088) = off_24C335D90;
  if (*(char *)(a1 + 1119) < 0)
    operator delete(*(void **)(a1 + 1096));
  *(_QWORD *)(a1 + 1040) = off_24C335D90;
  if (*(char *)(a1 + 1071) < 0)
    operator delete(*(void **)(a1 + 1048));
  mediaplatform::DatabaseColumnTuple<2ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<double>,mediaplatform::DatabaseColumn<double>,mediaplatform::DatabaseColumn<double>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(v2);
  if (*(char *)(a1 + 79) < 0)
    operator delete(*(void **)(a1 + 56));
  mediaplatform::DatabaseTableBase::~DatabaseTableBase((void **)a1);
  JUMPOUT(0x20BD27AFCLL);
}

{
  uint64_t v2;

  *(_QWORD *)a1 = off_24C335868;
  v2 = a1 + 80;
  *(_QWORD *)(a1 + 1088) = off_24C335D90;
  if (*(char *)(a1 + 1119) < 0)
    operator delete(*(void **)(a1 + 1096));
  *(_QWORD *)(a1 + 1040) = off_24C335D90;
  if (*(char *)(a1 + 1071) < 0)
    operator delete(*(void **)(a1 + 1048));
  mediaplatform::DatabaseColumnTuple<2ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<double>,mediaplatform::DatabaseColumn<double>,mediaplatform::DatabaseColumn<double>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(v2);
  if (*(char *)(a1 + 79) < 0)
    operator delete(*(void **)(a1 + 56));
  mediaplatform::DatabaseTableBase::~DatabaseTableBase((void **)a1);
}

void mlcore::MediaTable<long long,int,int,int,int,int,std::string,long long,std::string,std::string,long long,long long,long long,long long,int,int,double,double,double,int,int>::~MediaTable(uint64_t a1)
{
  *(_QWORD *)a1 = off_24C3363D0;
  std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul,3ul,4ul,5ul,6ul,7ul,8ul,9ul,10ul,11ul,12ul,13ul,14ul,15ul,16ul,17ul,18ul,19ul,20ul>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<double>,mlcore::MediaColumn<double>,mlcore::MediaColumn<double>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>>::~__tuple_impl(a1 + 1136);
  *(_QWORD *)a1 = off_24C335868;
  *(_QWORD *)(a1 + 1088) = off_24C335D90;
  if (*(char *)(a1 + 1119) < 0)
    operator delete(*(void **)(a1 + 1096));
  *(_QWORD *)(a1 + 1040) = off_24C335D90;
  if (*(char *)(a1 + 1071) < 0)
    operator delete(*(void **)(a1 + 1048));
  mediaplatform::DatabaseColumnTuple<2ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<double>,mediaplatform::DatabaseColumn<double>,mediaplatform::DatabaseColumn<double>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(a1 + 80);
  if (*(char *)(a1 + 79) < 0)
    operator delete(*(void **)(a1 + 56));
  mediaplatform::DatabaseTableBase::~DatabaseTableBase((void **)a1);
}

{
  *(_QWORD *)a1 = off_24C3363D0;
  std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul,3ul,4ul,5ul,6ul,7ul,8ul,9ul,10ul,11ul,12ul,13ul,14ul,15ul,16ul,17ul,18ul,19ul,20ul>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<double>,mlcore::MediaColumn<double>,mlcore::MediaColumn<double>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>>::~__tuple_impl(a1 + 1136);
  *(_QWORD *)a1 = off_24C335868;
  *(_QWORD *)(a1 + 1088) = off_24C335D90;
  if (*(char *)(a1 + 1119) < 0)
    operator delete(*(void **)(a1 + 1096));
  *(_QWORD *)(a1 + 1040) = off_24C335D90;
  if (*(char *)(a1 + 1071) < 0)
    operator delete(*(void **)(a1 + 1048));
  mediaplatform::DatabaseColumnTuple<2ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<double>,mediaplatform::DatabaseColumn<double>,mediaplatform::DatabaseColumn<double>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(a1 + 80);
  if (*(char *)(a1 + 79) < 0)
    operator delete(*(void **)(a1 + 56));
  mediaplatform::DatabaseTableBase::~DatabaseTableBase((void **)a1);
  JUMPOUT(0x20BD27AFCLL);
}

uint64_t std::__tuple_leaf<6ul,mlcore::MediaColumn<std::string>,false>::__tuple_leaf[abi:ne180100]<mlcore::MediaColumn<std::string>&,void>(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  std::string *v5;
  __int128 v6;

  *(_QWORD *)a1 = off_24C335D90;
  if (*(char *)(a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 8), *(const std::string::value_type **)(a2 + 8), *(_QWORD *)(a2 + 16));
  }
  else
  {
    v4 = *(_OWORD *)(a2 + 8);
    *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 8) = v4;
  }
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_QWORD *)a1 = &off_24C335AB8;
  *(_BYTE *)(a1 + 36) = *(_BYTE *)(a2 + 36);
  v5 = (std::string *)(a1 + 40);
  if (*(char *)(a2 + 63) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *(const std::string::value_type **)(a2 + 40), *(_QWORD *)(a2 + 48));
  }
  else
  {
    v6 = *(_OWORD *)(a2 + 40);
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
  *(_QWORD *)a1 = &off_24C336A60;
  return a1;
}

void sub_20A79AF28(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  uint64_t v3;

  *(_QWORD *)v1 = v3;
  if (*(char *)(v1 + 31) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

uint64_t std::__tuple_leaf<8ul,mlcore::MediaColumn<std::string>,false>::__tuple_leaf[abi:ne180100]<mlcore::MediaColumn<std::string>&,void>(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  std::string *v5;
  __int128 v6;

  *(_QWORD *)a1 = off_24C335D90;
  if (*(char *)(a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 8), *(const std::string::value_type **)(a2 + 8), *(_QWORD *)(a2 + 16));
  }
  else
  {
    v4 = *(_OWORD *)(a2 + 8);
    *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 8) = v4;
  }
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_QWORD *)a1 = &off_24C335AB8;
  *(_BYTE *)(a1 + 36) = *(_BYTE *)(a2 + 36);
  v5 = (std::string *)(a1 + 40);
  if (*(char *)(a2 + 63) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *(const std::string::value_type **)(a2 + 40), *(_QWORD *)(a2 + 48));
  }
  else
  {
    v6 = *(_OWORD *)(a2 + 40);
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
  *(_QWORD *)a1 = &off_24C336A60;
  return a1;
}

void sub_20A79B004(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  uint64_t v3;

  *(_QWORD *)v1 = v3;
  if (*(char *)(v1 + 31) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

uint64_t mediaplatform::DatabaseColumnTuple<1ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<double>,mediaplatform::DatabaseColumn<double>,mediaplatform::DatabaseColumn<double>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(uint64_t a1)
{
  *(_QWORD *)(a1 + 960) = off_24C335D90;
  if (*(char *)(a1 + 991) < 0)
    operator delete(*(void **)(a1 + 968));
  return mediaplatform::DatabaseColumnTuple<2ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<double>,mediaplatform::DatabaseColumn<double>,mediaplatform::DatabaseColumn<double>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<3ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<double>,mediaplatform::DatabaseColumn<double>,mediaplatform::DatabaseColumn<double>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(uint64_t a1)
{
  *(_QWORD *)(a1 + 864) = off_24C335D90;
  if (*(char *)(a1 + 895) < 0)
    operator delete(*(void **)(a1 + 872));
  *(_QWORD *)(a1 + 816) = off_24C335D90;
  if (*(char *)(a1 + 847) < 0)
    operator delete(*(void **)(a1 + 824));
  *(_QWORD *)(a1 + 768) = off_24C335D90;
  if (*(char *)(a1 + 799) < 0)
    operator delete(*(void **)(a1 + 776));
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 704);
  *(_QWORD *)(a1 + 656) = off_24C335D90;
  if (*(char *)(a1 + 687) < 0)
    operator delete(*(void **)(a1 + 664));
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 592);
  return mediaplatform::DatabaseColumnTuple<9ul,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<double>,mediaplatform::DatabaseColumn<double>,mediaplatform::DatabaseColumn<double>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<4ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<double>,mediaplatform::DatabaseColumn<double>,mediaplatform::DatabaseColumn<double>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(uint64_t a1)
{
  *(_QWORD *)(a1 + 816) = off_24C335D90;
  if (*(char *)(a1 + 847) < 0)
    operator delete(*(void **)(a1 + 824));
  *(_QWORD *)(a1 + 768) = off_24C335D90;
  if (*(char *)(a1 + 799) < 0)
    operator delete(*(void **)(a1 + 776));
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 704);
  *(_QWORD *)(a1 + 656) = off_24C335D90;
  if (*(char *)(a1 + 687) < 0)
    operator delete(*(void **)(a1 + 664));
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 592);
  return mediaplatform::DatabaseColumnTuple<9ul,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<double>,mediaplatform::DatabaseColumn<double>,mediaplatform::DatabaseColumn<double>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<5ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<double>,mediaplatform::DatabaseColumn<double>,mediaplatform::DatabaseColumn<double>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(uint64_t a1)
{
  *(_QWORD *)(a1 + 768) = off_24C335D90;
  if (*(char *)(a1 + 799) < 0)
    operator delete(*(void **)(a1 + 776));
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 704);
  *(_QWORD *)(a1 + 656) = off_24C335D90;
  if (*(char *)(a1 + 687) < 0)
    operator delete(*(void **)(a1 + 664));
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 592);
  return mediaplatform::DatabaseColumnTuple<9ul,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<double>,mediaplatform::DatabaseColumn<double>,mediaplatform::DatabaseColumn<double>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<6ul,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<double>,mediaplatform::DatabaseColumn<double>,mediaplatform::DatabaseColumn<double>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(uint64_t a1)
{
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 704);
  *(_QWORD *)(a1 + 656) = off_24C335D90;
  if (*(char *)(a1 + 687) < 0)
    operator delete(*(void **)(a1 + 664));
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 592);
  return mediaplatform::DatabaseColumnTuple<9ul,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<double>,mediaplatform::DatabaseColumn<double>,mediaplatform::DatabaseColumn<double>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<7ul,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<double>,mediaplatform::DatabaseColumn<double>,mediaplatform::DatabaseColumn<double>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(uint64_t a1)
{
  *(_QWORD *)(a1 + 656) = off_24C335D90;
  if (*(char *)(a1 + 687) < 0)
    operator delete(*(void **)(a1 + 664));
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 592);
  return mediaplatform::DatabaseColumnTuple<9ul,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<double>,mediaplatform::DatabaseColumn<double>,mediaplatform::DatabaseColumn<double>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<10ul,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<double>,mediaplatform::DatabaseColumn<double>,mediaplatform::DatabaseColumn<double>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(uint64_t a1)
{
  *(_QWORD *)(a1 + 480) = off_24C335D90;
  if (*(char *)(a1 + 511) < 0)
    operator delete(*(void **)(a1 + 488));
  *(_QWORD *)(a1 + 432) = off_24C335D90;
  if (*(char *)(a1 + 463) < 0)
    operator delete(*(void **)(a1 + 440));
  *(_QWORD *)(a1 + 384) = off_24C335D90;
  if (*(char *)(a1 + 415) < 0)
    operator delete(*(void **)(a1 + 392));
  *(_QWORD *)(a1 + 336) = off_24C335D90;
  if (*(char *)(a1 + 367) < 0)
    operator delete(*(void **)(a1 + 344));
  *(_QWORD *)(a1 + 288) = off_24C335D90;
  if (*(char *)(a1 + 319) < 0)
    operator delete(*(void **)(a1 + 296));
  return std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul,3ul,4ul,5ul>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>>::~__tuple_impl(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<11ul,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<double>,mediaplatform::DatabaseColumn<double>,mediaplatform::DatabaseColumn<double>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(uint64_t a1)
{
  *(_QWORD *)(a1 + 432) = off_24C335D90;
  if (*(char *)(a1 + 463) < 0)
    operator delete(*(void **)(a1 + 440));
  *(_QWORD *)(a1 + 384) = off_24C335D90;
  if (*(char *)(a1 + 415) < 0)
    operator delete(*(void **)(a1 + 392));
  *(_QWORD *)(a1 + 336) = off_24C335D90;
  if (*(char *)(a1 + 367) < 0)
    operator delete(*(void **)(a1 + 344));
  *(_QWORD *)(a1 + 288) = off_24C335D90;
  if (*(char *)(a1 + 319) < 0)
    operator delete(*(void **)(a1 + 296));
  return std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul,3ul,4ul,5ul>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>>::~__tuple_impl(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<12ul,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<double>,mediaplatform::DatabaseColumn<double>,mediaplatform::DatabaseColumn<double>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(uint64_t a1)
{
  *(_QWORD *)(a1 + 384) = off_24C335D90;
  if (*(char *)(a1 + 415) < 0)
    operator delete(*(void **)(a1 + 392));
  *(_QWORD *)(a1 + 336) = off_24C335D90;
  if (*(char *)(a1 + 367) < 0)
    operator delete(*(void **)(a1 + 344));
  *(_QWORD *)(a1 + 288) = off_24C335D90;
  if (*(char *)(a1 + 319) < 0)
    operator delete(*(void **)(a1 + 296));
  return std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul,3ul,4ul,5ul>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>>::~__tuple_impl(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<13ul,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<double>,mediaplatform::DatabaseColumn<double>,mediaplatform::DatabaseColumn<double>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(uint64_t a1)
{
  *(_QWORD *)(a1 + 336) = off_24C335D90;
  if (*(char *)(a1 + 367) < 0)
    operator delete(*(void **)(a1 + 344));
  *(_QWORD *)(a1 + 288) = off_24C335D90;
  if (*(char *)(a1 + 319) < 0)
    operator delete(*(void **)(a1 + 296));
  return std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul,3ul,4ul,5ul>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>>::~__tuple_impl(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<14ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<double>,mediaplatform::DatabaseColumn<double>,mediaplatform::DatabaseColumn<double>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(uint64_t a1)
{
  *(_QWORD *)(a1 + 288) = off_24C335D90;
  if (*(char *)(a1 + 319) < 0)
    operator delete(*(void **)(a1 + 296));
  return std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul,3ul,4ul,5ul>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>>::~__tuple_impl(a1);
}

void mlcore::ItemPlaybackTable::persistentIDColumn(mlcore::ItemPlaybackTable *this@<X0>, uint64_t a2@<X8>)
{
  std::string *v4;

  *(_QWORD *)a2 = off_24C335D90;
  v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 1167) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 143), *((_QWORD *)this + 144));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 1144);
    *(_QWORD *)(a2 + 24) = *((_QWORD *)this + 145);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 292);
  *(_DWORD *)(a2 + 44) = *((_DWORD *)this + 295);
  *(_QWORD *)(a2 + 36) = *(_QWORD *)((char *)this + 1172);
  *(_QWORD *)a2 = off_24C336AC0;
}

void mlcore::ItemPlaybackTable::audioFormatColumn(mlcore::ItemPlaybackTable *this@<X0>, uint64_t a2@<X8>)
{
  std::string *v4;

  *(_QWORD *)a2 = off_24C335D90;
  v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 1215) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 149), *((_QWORD *)this + 150));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 1192);
    *(_QWORD *)(a2 + 24) = *((_QWORD *)this + 151);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 304);
  *(_QWORD *)(a2 + 36) = *(_QWORD *)((char *)this + 1220);
  *(_QWORD *)a2 = off_24C336AA0;
}

void mlcore::ItemPlaybackTable::bitrateColumn(mlcore::ItemPlaybackTable *this@<X0>, uint64_t a2@<X8>)
{
  std::string *v4;

  *(_QWORD *)a2 = off_24C335D90;
  v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 1263) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 155), *((_QWORD *)this + 156));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 1240);
    *(_QWORD *)(a2 + 24) = *((_QWORD *)this + 157);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 316);
  *(_QWORD *)(a2 + 36) = *(_QWORD *)((char *)this + 1268);
  *(_QWORD *)a2 = off_24C336AA0;
}

void mlcore::ItemPlaybackTable::codecTypeColumn(mlcore::ItemPlaybackTable *this@<X0>, uint64_t a2@<X8>)
{
  std::string *v4;

  *(_QWORD *)a2 = off_24C335D90;
  v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 1311) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 161), *((_QWORD *)this + 162));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 1288);
    *(_QWORD *)(a2 + 24) = *((_QWORD *)this + 163);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 328);
  *(_QWORD *)(a2 + 36) = *(_QWORD *)((char *)this + 1316);
  *(_QWORD *)a2 = off_24C336AA0;
}

void mlcore::ItemPlaybackTable::codecSubtypeColumn(mlcore::ItemPlaybackTable *this@<X0>, uint64_t a2@<X8>)
{
  std::string *v4;

  *(_QWORD *)a2 = off_24C335D90;
  v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 1359) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 167), *((_QWORD *)this + 168));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 1336);
    *(_QWORD *)(a2 + 24) = *((_QWORD *)this + 169);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 340);
  *(_QWORD *)(a2 + 36) = *(_QWORD *)((char *)this + 1364);
  *(_QWORD *)a2 = off_24C336AA0;
}

void mlcore::ItemPlaybackTable::dataKindColumn(mlcore::ItemPlaybackTable *this@<X0>, uint64_t a2@<X8>)
{
  std::string *v4;

  *(_QWORD *)a2 = off_24C335D90;
  v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 1407) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 173), *((_QWORD *)this + 174));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 1384);
    *(_QWORD *)(a2 + 24) = *((_QWORD *)this + 175);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 352);
  *(_QWORD *)(a2 + 36) = *(_QWORD *)((char *)this + 1412);
  *(_QWORD *)a2 = off_24C336AA0;
}

void mlcore::ItemPlaybackTable::dataURLColumn(mlcore::ItemPlaybackTable *this@<X0>, uint64_t a2@<X8>)
{
  std::string *v4;
  std::string *v5;

  *(_QWORD *)a2 = off_24C335D90;
  v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 1455) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 179), *((_QWORD *)this + 180));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 1432);
    *(_QWORD *)(a2 + 24) = *((_QWORD *)this + 181);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 364);
  *(_QWORD *)a2 = &off_24C335AB8;
  *(_BYTE *)(a2 + 36) = *((_BYTE *)this + 1460);
  v5 = (std::string *)(a2 + 40);
  if (*((char *)this + 1487) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)this + 183), *((_QWORD *)this + 184));
  }
  else
  {
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 1464);
    *(_QWORD *)(a2 + 56) = *((_QWORD *)this + 185);
  }
  *(_QWORD *)a2 = &off_24C336A60;
}

void sub_20A79B7F4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  uint64_t v3;

  *(_QWORD *)v1 = v3;
  if (*(char *)(v1 + 31) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

void mlcore::ItemPlaybackTable::durationColumn(mlcore::ItemPlaybackTable *this@<X0>, uint64_t a2@<X8>)
{
  std::string *v4;

  *(_QWORD *)a2 = off_24C335D90;
  v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 1519) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 187), *((_QWORD *)this + 188));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 1496);
    *(_QWORD *)(a2 + 24) = *((_QWORD *)this + 189);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 380);
  *(_DWORD *)(a2 + 44) = *((_DWORD *)this + 383);
  *(_QWORD *)(a2 + 36) = *(_QWORD *)((char *)this + 1524);
  *(_QWORD *)a2 = off_24C336AC0;
}

void mlcore::ItemPlaybackTable::EQPresetColumn(mlcore::ItemPlaybackTable *this@<X0>, uint64_t a2@<X8>)
{
  std::string *v4;
  std::string *v5;

  *(_QWORD *)a2 = off_24C335D90;
  v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 1567) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 193), *((_QWORD *)this + 194));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 1544);
    *(_QWORD *)(a2 + 24) = *((_QWORD *)this + 195);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 392);
  *(_QWORD *)a2 = &off_24C335AB8;
  *(_BYTE *)(a2 + 36) = *((_BYTE *)this + 1572);
  v5 = (std::string *)(a2 + 40);
  if (*((char *)this + 1599) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)this + 197), *((_QWORD *)this + 198));
  }
  else
  {
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 1576);
    *(_QWORD *)(a2 + 56) = *((_QWORD *)this + 199);
  }
  *(_QWORD *)a2 = &off_24C336A60;
}

void sub_20A79B958(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  uint64_t v3;

  *(_QWORD *)v1 = v3;
  if (*(char *)(v1 + 31) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

void mlcore::ItemPlaybackTable::formatColumn(mlcore::ItemPlaybackTable *this@<X0>, uint64_t a2@<X8>)
{
  std::string *v4;
  std::string *v5;

  *(_QWORD *)a2 = off_24C335D90;
  v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 1631) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 201), *((_QWORD *)this + 202));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 1608);
    *(_QWORD *)(a2 + 24) = *((_QWORD *)this + 203);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 408);
  *(_QWORD *)a2 = &off_24C335AB8;
  *(_BYTE *)(a2 + 36) = *((_BYTE *)this + 1636);
  v5 = (std::string *)(a2 + 40);
  if (*((char *)this + 1663) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)this + 205), *((_QWORD *)this + 206));
  }
  else
  {
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 1640);
    *(_QWORD *)(a2 + 56) = *((_QWORD *)this + 207);
  }
  *(_QWORD *)a2 = &off_24C336A60;
}

void sub_20A79BA38(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  uint64_t v3;

  *(_QWORD *)v1 = v3;
  if (*(char *)(v1 + 31) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

void mlcore::ItemPlaybackTable::gaplessHeuristicInfoColumn(mlcore::ItemPlaybackTable *this@<X0>, uint64_t a2@<X8>)
{
  std::string *v4;

  *(_QWORD *)a2 = off_24C335D90;
  v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 1695) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 209), *((_QWORD *)this + 210));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 1672);
    *(_QWORD *)(a2 + 24) = *((_QWORD *)this + 211);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 424);
  *(_DWORD *)(a2 + 44) = *((_DWORD *)this + 427);
  *(_QWORD *)(a2 + 36) = *(_QWORD *)((char *)this + 1700);
  *(_QWORD *)a2 = off_24C336AC0;
}

void mlcore::ItemPlaybackTable::gaplessEncodingDelayColumn(mlcore::ItemPlaybackTable *this@<X0>, uint64_t a2@<X8>)
{
  std::string *v4;

  *(_QWORD *)a2 = off_24C335D90;
  v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 1743) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 215), *((_QWORD *)this + 216));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 1720);
    *(_QWORD *)(a2 + 24) = *((_QWORD *)this + 217);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 436);
  *(_DWORD *)(a2 + 44) = *((_DWORD *)this + 439);
  *(_QWORD *)(a2 + 36) = *(_QWORD *)((char *)this + 1748);
  *(_QWORD *)a2 = off_24C336AC0;
}

void mlcore::ItemPlaybackTable::gaplessEncodingDrainColumn(mlcore::ItemPlaybackTable *this@<X0>, uint64_t a2@<X8>)
{
  std::string *v4;

  *(_QWORD *)a2 = off_24C335D90;
  v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 1791) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 221), *((_QWORD *)this + 222));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 1768);
    *(_QWORD *)(a2 + 24) = *((_QWORD *)this + 223);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 448);
  *(_DWORD *)(a2 + 44) = *((_DWORD *)this + 451);
  *(_QWORD *)(a2 + 36) = *(_QWORD *)((char *)this + 1796);
  *(_QWORD *)a2 = off_24C336AC0;
}

void mlcore::ItemPlaybackTable::gaplessLastFrameResyncColumn(mlcore::ItemPlaybackTable *this@<X0>, uint64_t a2@<X8>)
{
  std::string *v4;

  *(_QWORD *)a2 = off_24C335D90;
  v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 1839) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 227), *((_QWORD *)this + 228));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 1816);
    *(_QWORD *)(a2 + 24) = *((_QWORD *)this + 229);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 460);
  *(_DWORD *)(a2 + 44) = *((_DWORD *)this + 463);
  *(_QWORD *)(a2 + 36) = *(_QWORD *)((char *)this + 1844);
  *(_QWORD *)a2 = off_24C336AC0;
}

void mlcore::ItemPlaybackTable::hasVideoColumn(mlcore::ItemPlaybackTable *this@<X0>, uint64_t a2@<X8>)
{
  std::string *v4;

  *(_QWORD *)a2 = off_24C335D90;
  v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 1887) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 233), *((_QWORD *)this + 234));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 1864);
    *(_QWORD *)(a2 + 24) = *((_QWORD *)this + 235);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 472);
  *(_QWORD *)(a2 + 36) = *(_QWORD *)((char *)this + 1892);
  *(_QWORD *)a2 = off_24C336AA0;
}

void mlcore::ItemPlaybackTable::relativeVolumeColumn(mlcore::ItemPlaybackTable *this@<X0>, uint64_t a2@<X8>)
{
  std::string *v4;

  *(_QWORD *)a2 = off_24C335D90;
  v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 1935) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 239), *((_QWORD *)this + 240));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 1912);
    *(_QWORD *)(a2 + 24) = *((_QWORD *)this + 241);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 484);
  *(_QWORD *)(a2 + 36) = *(_QWORD *)((char *)this + 1940);
  *(_QWORD *)a2 = off_24C336AA0;
}

void mlcore::ItemPlaybackTable::sampleRateColumn(mlcore::ItemPlaybackTable *this@<X0>, uint64_t a2@<X8>)
{
  std::string *v4;

  *(_QWORD *)a2 = off_24C335D90;
  v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 1983) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 245), *((_QWORD *)this + 246));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 1960);
    *(_QWORD *)(a2 + 24) = *((_QWORD *)this + 247);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 496);
  *(_DWORD *)(a2 + 44) = *((_DWORD *)this + 499);
  *(_QWORD *)(a2 + 36) = *(_QWORD *)((char *)this + 1988);
  *(_QWORD *)a2 = off_24C336A80;
}

void mlcore::ItemPlaybackTable::startTimeColumn(mlcore::ItemPlaybackTable *this@<X0>, uint64_t a2@<X8>)
{
  std::string *v4;

  *(_QWORD *)a2 = off_24C335D90;
  v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 2031) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 251), *((_QWORD *)this + 252));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 2008);
    *(_QWORD *)(a2 + 24) = *((_QWORD *)this + 253);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 508);
  *(_DWORD *)(a2 + 44) = *((_DWORD *)this + 511);
  *(_QWORD *)(a2 + 36) = *(_QWORD *)((char *)this + 2036);
  *(_QWORD *)a2 = off_24C336A80;
}

void mlcore::ItemPlaybackTable::stopTimeColumn(mlcore::ItemPlaybackTable *this@<X0>, uint64_t a2@<X8>)
{
  std::string *v4;

  *(_QWORD *)a2 = off_24C335D90;
  v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 2079) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 257), *((_QWORD *)this + 258));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 2056);
    *(_QWORD *)(a2 + 24) = *((_QWORD *)this + 259);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 520);
  *(_DWORD *)(a2 + 44) = *((_DWORD *)this + 523);
  *(_QWORD *)(a2 + 36) = *(_QWORD *)((char *)this + 2084);
  *(_QWORD *)a2 = off_24C336A80;
}

void mlcore::ItemPlaybackTable::volumeNormalizationEnergyColumn(mlcore::ItemPlaybackTable *this@<X0>, uint64_t a2@<X8>)
{
  std::string *v4;

  *(_QWORD *)a2 = off_24C335D90;
  v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 2127) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 263), *((_QWORD *)this + 264));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 2104);
    *(_QWORD *)(a2 + 24) = *((_QWORD *)this + 265);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 532);
  *(_QWORD *)(a2 + 36) = *(_QWORD *)((char *)this + 2132);
  *(_QWORD *)a2 = off_24C336AA0;
}

void mlcore::ItemPlaybackTable::progressionDirectionColumn(mlcore::ItemPlaybackTable *this@<X0>, uint64_t a2@<X8>)
{
  std::string *v4;

  *(_QWORD *)a2 = off_24C335D90;
  v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 2175) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 269), *((_QWORD *)this + 270));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 2152);
    *(_QWORD *)(a2 + 24) = *((_QWORD *)this + 271);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 544);
  *(_QWORD *)(a2 + 36) = *(_QWORD *)((char *)this + 2180);
  *(_QWORD *)a2 = off_24C336AA0;
}

void mlcore::Source::~Source(mlcore::Source *this)
{
  *(_QWORD *)this = off_24C33A860;
  mlcore::PropertyCacheBase<long long,int,double,std::string,mediaplatform::Data>::~PropertyCacheBase((_QWORD *)this + 1);
}

{
  *(_QWORD *)this = off_24C33A860;
  mlcore::PropertyCacheBase<long long,int,double,std::string,mediaplatform::Data>::~PropertyCacheBase((_QWORD *)this + 1);
  JUMPOUT(0x20BD27AFCLL);
}

uint64_t mlcore::TypedEntityClass<mlcore::Source>::sharedPointer()
{
  unint64_t v0;
  char v2;
  char **v3;
  char *v4;

  v0 = atomic_load(&mlcore::TypedEntityClass<mlcore::Source>::sharedPointer(void)::__once);
  if (v0 != -1)
  {
    v4 = &v2;
    v3 = &v4;
    std::__call_once(&mlcore::TypedEntityClass<mlcore::Source>::sharedPointer(void)::__once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::TypedEntityClass<mlcore::Source>::sharedPointer(void)::{lambda(void)#1} &&>>);
  }
  return mlcore::TypedEntityClass<mlcore::Source>::sharedPointer(void)::__sharedPointer;
}

double std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::TypedEntityClass<mlcore::Source>::sharedPointer(void)::{lambda(void)#1} &&>>()
{
  uint64_t v0;
  double result;

  v0 = operator new();
  result = 0.0;
  *(_OWORD *)(v0 + 16) = 0u;
  *(_OWORD *)(v0 + 32) = 0u;
  *(_OWORD *)(v0 + 48) = 0u;
  *(_OWORD *)(v0 + 64) = 0u;
  *(_OWORD *)(v0 + 80) = 0u;
  *(_QWORD *)(v0 + 96) = 0;
  *(_DWORD *)(v0 + 104) = 1065353216;
  *(_OWORD *)(v0 + 112) = 0u;
  *(_OWORD *)(v0 + 128) = 0u;
  *(_DWORD *)(v0 + 144) = 1065353216;
  *(_QWORD *)v0 = &off_24C338F90;
  *(_QWORD *)(v0 + 8) = 850045863;
  mlcore::TypedEntityClass<mlcore::Source>::sharedPointer(void)::__sharedPointer = v0;
  return result;
}

void mlcore::TypedEntityClass<mlcore::Source>::~TypedEntityClass(mlcore::EntityClass *a1)
{
  mlcore::EntityClass::~EntityClass(a1);
  JUMPOUT(0x20BD27AFCLL);
}

uint64_t mlcore::TypedEntityClass<mlcore::Source>::description(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
}

__n128 mlcore::TypedEntityClass<mlcore::Source>::create@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, __n128 *a4@<X8>)
{
  char *v8;
  uint64_t v9;
  unint64_t *v10;
  uint64_t v11;
  __n128 result;
  __n128 v13;
  unint64_t v14[3];
  unint64_t *v15;
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  v8 = (char *)operator new(0x100uLL);
  *((_QWORD *)v8 + 1) = 0;
  *((_QWORD *)v8 + 2) = 0;
  *(_QWORD *)v8 = &off_24C33D438;
  *(_OWORD *)(v8 + 40) = 0u;
  *(_OWORD *)(v8 + 56) = 0u;
  *((_DWORD *)v8 + 18) = 1065353216;
  *((_OWORD *)v8 + 5) = 0u;
  *((_OWORD *)v8 + 6) = 0u;
  *((_DWORD *)v8 + 28) = 1065353216;
  *(_OWORD *)(v8 + 120) = 0u;
  *(_OWORD *)(v8 + 136) = 0u;
  *((_DWORD *)v8 + 38) = 1065353216;
  *((_OWORD *)v8 + 10) = 0u;
  *((_OWORD *)v8 + 11) = 0u;
  *((_DWORD *)v8 + 48) = 1065353216;
  *(_OWORD *)(v8 + 216) = 0u;
  *((_DWORD *)v8 + 58) = 1065353216;
  *((_QWORD *)v8 + 30) = &unk_24C3371E8;
  *((_QWORD *)v8 + 31) = a2;
  *(_OWORD *)(v8 + 200) = 0u;
  v9 = (uint64_t)(v8 + 200);
  *((_QWORD *)v8 + 4) = &off_24C3371C0;
  *((_QWORD *)v8 + 3) = &off_24C33A900;
  v13.n128_u64[0] = (unint64_t)(v8 + 24);
  v13.n128_u64[1] = (unint64_t)v8;
  v14[0] = (unint64_t)&off_24C33B140;
  v15 = v14;
  mlcore::PropertyCache::mergePropertiesFromCache((uint64_t)(v8 + 32), a3, (uint64_t)v14);
  v10 = v15;
  if (v15 == v14)
  {
    v11 = 4;
    v10 = v14;
    goto LABEL_5;
  }
  if (v15)
  {
    v11 = 5;
LABEL_5:
    (*(void (**)(void))(*v10 + 8 * v11))();
  }
  v14[0] = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 112))(a1);
  std::__hash_table<std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>,std::__unordered_map_hasher<mlcore::ModelProperty<long long> *,std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>,std::hash<mlcore::ModelProperty<long long> *>,std::equal_to<mlcore::ModelProperty<long long> *>,true>,std::__unordered_map_equal<mlcore::ModelProperty<long long> *,std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>,std::equal_to<mlcore::ModelProperty<long long> *>,std::hash<mlcore::ModelProperty<long long> *>,true>,std::allocator<std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>>>::__emplace_unique_key_args<mlcore::ModelProperty<long long> *,std::piecewise_construct_t const&,std::tuple<mlcore::ModelProperty<long long> * const&>,std::tuple<>>(v9, v14[0], v14)[3] = a2;
  result = v13;
  *a4 = v13;
  return result;
}

void sub_20A79C2C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15)
{
  char *v15;
  char *v17;
  uint64_t v18;

  v17 = a15;
  if (a15 == v15)
  {
    v18 = 4;
    v17 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v18 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v17 + 8 * v18))();
LABEL_6:
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t mlcore::TypedEntityClass<mlcore::Source>::name(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
}

uint64_t mlcore::TypedEntityClass<mlcore::Source>::entityType()
{
  return 0xFFFFFFFFLL;
}

BOOL mlcore::TypedEntityClass<mlcore::Source>::isRevisionTrackable(uint64_t a1)
{
  return (*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1) != -1;
}

uint64_t mlcore::TypedEntityClass<mlcore::Source>::isCloudUpdatable()
{
  return 0;
}

uint64_t mlcore::TypedEntityClass<mlcore::Source>::databaseTable()
{
  return *(_QWORD *)mediaplatform::Singleton<mlcore::SourceTable>::sharedInstance();
}

void mlcore::TypedEntityClass<mlcore::Source>::databaseTablesToDeleteFrom(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

void mlcore::TypedEntityClass<mlcore::Source>::databaseTablesToInsertInto(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

uint64_t mlcore::TypedEntityClass<mlcore::Source>::representativeItemPersistentIDProperty()
{
  return 0;
}

uint64_t mlcore::TypedEntityClass<mlcore::Source>::trackForeignPersistentIDProperty()
{
  return 0;
}

uint64_t mlcore::TypedEntityClass<mlcore::Source>::trackForeignOrderingProperty()
{
  return 0;
}

uint64_t mlcore::TypedEntityClass<mlcore::Source>::sectionPropertyForOrderingProperty()
{
  return 0;
}

uint64_t mlcore::SourcePropertyPersistentID(mlcore *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&mlcore::SourcePropertyPersistentID(void)::once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&mlcore::SourcePropertyPersistentID(void)::once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::SourcePropertyPersistentID(void)::$_0 &&>>);
  }
  return mlcore::SourcePropertyPersistentID(void)::property;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::SourcePropertyPersistentID(void)::$_0 &&>>()
{
  uint64_t v0;
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  mlcore::SourceTable **v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  std::string *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  std::string *v19;
  __int128 v20;
  std::string v21;
  std::string __p;
  char v23;
  _QWORD v24[2];

  v0 = operator new();
  v1 = (_QWORD *)mediaplatform::Singleton<mlcore::SourceTable>::sharedInstance();
  v2 = (std::__shared_weak_count *)v1[1];
  v24[0] = *v1;
  v24[1] = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  v5 = (mlcore::SourceTable **)mediaplatform::Singleton<mlcore::SourceTable>::sharedInstance();
  mlcore::SourceTable::persistentIDColumn(*v5, (uint64_t)&__p);
  mlcore::DatabaseModelProperty<long long>::DatabaseModelProperty(v0, v24, (uint64_t)&__p);
  mlcore::SourcePropertyPersistentID(void)::property = v0;
  if (v23 < 0)
    operator delete((void *)__p.__r_.__value_.__l.__size_);
  if (v2)
  {
    v6 = (unint64_t *)&v2->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v8 = mlcore::SourcePropertyPersistentID(void)::property;
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  std::string::operator=((std::string *)(v8 + 40), &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v9 = mlcore::TypedEntityClass<mlcore::Source>::sharedPointer();
  v10 = mlcore::SourcePropertyPersistentID(void)::property;
  v11 = mediaplatform::Singleton<mlcore::SourceTable>::sharedInstance();
  v12 = *(_QWORD *)v11;
  if (*(char *)(*(_QWORD *)v11 + 31) >= 0)
    v13 = *(unsigned __int8 *)(*(_QWORD *)v11 + 31);
  else
    v13 = *(_QWORD *)(*(_QWORD *)v11 + 16);
  v14 = &v21;
  std::string::basic_string[abi:ne180100]((uint64_t)&v21, v13 + 1);
  if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v14 = (std::string *)v21.__r_.__value_.__r.__words[0];
  if (v13)
  {
    v17 = *(char **)(v12 + 8);
    v16 = (char *)(v12 + 8);
    v15 = v17;
    if (v16[23] >= 0)
      v18 = v16;
    else
      v18 = v15;
    memmove(v14, v18, v13);
  }
  *(_WORD *)((char *)&v14->__r_.__value_.__l.__data_ + v13) = 46;
  v19 = std::string::append(&v21, "persistentID");
  v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  __p.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  mlcore::EntityClass::setPropertyForName(v9, v10, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
}

void sub_20A79C5CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

uint64_t mediaplatform::Singleton<mlcore::SourceTable>::sharedInstance()
{
  unsigned __int8 v0;
  mlcore::SourceTable **v2;

  if ((v0 & 1) == 0
  {
    v2 = (mlcore::SourceTable **)operator new();
    _ZNSt3__115allocate_sharedB8ne180100IN6mlcore11SourceTableENS_9allocatorIS2_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(v2);
    mediaplatform::Singleton<mlcore::SourceTable>::sharedInstance(void)::_sharedInstance = (uint64_t)v2;
  }
  return mediaplatform::Singleton<mlcore::SourceTable>::sharedInstance(void)::_sharedInstance;
}

void sub_20A79C6FC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x20BD27AFC](v1, 0x20C40A4A59CD2);
  _Unwind_Resume(a1);
}

mlcore::SourceTable *_ZNSt3__115allocate_sharedB8ne180100IN6mlcore11SourceTableENS_9allocatorIS2_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(mlcore::SourceTable **a1)
{
  _QWORD *v2;
  mlcore::SourceTable *result;

  v2 = operator new(0x208uLL);
  v2[1] = 0;
  v2[2] = 0;
  *v2 = &off_24C33C408;
  result = mlcore::SourceTable::SourceTable((mlcore::SourceTable *)(v2 + 3));
  *a1 = result;
  a1[1] = (mlcore::SourceTable *)v2;
  return result;
}

void sub_20A79C774(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<mlcore::SourceTable>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C33C408;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<mlcore::SourceTable>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C33C408;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x20BD27AFCLL);
}

uint64_t std::__shared_ptr_emplace<mlcore::SourceTable>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__shared_ptr_emplace<mlcore::Source>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C33D438;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<mlcore::Source>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C33D438;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x20BD27AFCLL);
}

uint64_t std::__shared_ptr_emplace<mlcore::Source>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t mlcore::SourcePropertyName(mlcore *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&mlcore::SourcePropertyName(void)::once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&mlcore::SourcePropertyName(void)::once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::SourcePropertyName(void)::$_0 &&>>);
  }
  return mlcore::SourcePropertyName(void)::property;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::SourcePropertyName(void)::$_0 &&>>()
{
  uint64_t v0;
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  mlcore::SourceTable **v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  std::string *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  std::string *v19;
  __int128 v20;
  std::string v21;
  std::string __str;
  _QWORD v23[2];

  v0 = operator new();
  v1 = (_QWORD *)mediaplatform::Singleton<mlcore::SourceTable>::sharedInstance();
  v2 = (std::__shared_weak_count *)v1[1];
  v23[0] = *v1;
  v23[1] = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  v5 = (mlcore::SourceTable **)mediaplatform::Singleton<mlcore::SourceTable>::sharedInstance();
  mlcore::SourceTable::sourceNameColumn(*v5, (uint64_t)&__str);
  mlcore::DatabaseModelProperty<std::string>::DatabaseModelProperty(v0, v23, (uint64_t)&__str);
  mlcore::SourcePropertyName(void)::property = v0;
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&__str);
  if (v2)
  {
    v6 = (unint64_t *)&v2->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v8 = mlcore::SourcePropertyName(void)::property;
  std::string::basic_string[abi:ne180100]<0>(&__str, "");
  std::string::operator=((std::string *)(v8 + 40), &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  v9 = mlcore::TypedEntityClass<mlcore::Source>::sharedPointer();
  v10 = mlcore::SourcePropertyName(void)::property;
  v11 = mediaplatform::Singleton<mlcore::SourceTable>::sharedInstance();
  v12 = *(_QWORD *)v11;
  if (*(char *)(*(_QWORD *)v11 + 31) >= 0)
    v13 = *(unsigned __int8 *)(*(_QWORD *)v11 + 31);
  else
    v13 = *(_QWORD *)(*(_QWORD *)v11 + 16);
  v14 = &v21;
  std::string::basic_string[abi:ne180100]((uint64_t)&v21, v13 + 1);
  if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v14 = (std::string *)v21.__r_.__value_.__r.__words[0];
  if (v13)
  {
    v17 = *(char **)(v12 + 8);
    v16 = (char *)(v12 + 8);
    v15 = v17;
    if (v16[23] >= 0)
      v18 = v16;
    else
      v18 = v15;
    memmove(v14, v18, v13);
  }
  *(_WORD *)((char *)&v14->__r_.__value_.__l.__data_ + v13) = 46;
  v19 = std::string::append(&v21, "name");
  v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  __str.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  mlcore::EntityClass::setPropertyForName(v9, v10, &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
}

void sub_20A79CA54(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

uint64_t mlcore::SourcePropertyLastSyncDate(mlcore *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&mlcore::SourcePropertyLastSyncDate(void)::once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&mlcore::SourcePropertyLastSyncDate(void)::once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::SourcePropertyLastSyncDate(void)::$_0 &&>>);
  }
  return mlcore::SourcePropertyLastSyncDate(void)::property;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::SourcePropertyLastSyncDate(void)::$_0 &&>>()
{
  uint64_t v0;
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  mlcore::SourceTable **v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  std::string *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  std::string *v19;
  __int128 v20;
  std::string v21;
  std::string __p;
  char v23;
  _QWORD v24[2];

  v0 = operator new();
  v1 = (_QWORD *)mediaplatform::Singleton<mlcore::SourceTable>::sharedInstance();
  v2 = (std::__shared_weak_count *)v1[1];
  v24[0] = *v1;
  v24[1] = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  v5 = (mlcore::SourceTable **)mediaplatform::Singleton<mlcore::SourceTable>::sharedInstance();
  mlcore::SourceTable::lastSyncDateColumn(*v5, (uint64_t)&__p);
  mlcore::DatabaseModelProperty<long long>::DatabaseModelProperty(v0, v24, (uint64_t)&__p);
  mlcore::SourcePropertyLastSyncDate(void)::property = v0;
  if (v23 < 0)
    operator delete((void *)__p.__r_.__value_.__l.__size_);
  if (v2)
  {
    v6 = (unint64_t *)&v2->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v8 = mlcore::SourcePropertyLastSyncDate(void)::property;
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  std::string::operator=((std::string *)(v8 + 40), &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v9 = mlcore::TypedEntityClass<mlcore::Source>::sharedPointer();
  v10 = mlcore::SourcePropertyLastSyncDate(void)::property;
  v11 = mediaplatform::Singleton<mlcore::SourceTable>::sharedInstance();
  v12 = *(_QWORD *)v11;
  if (*(char *)(*(_QWORD *)v11 + 31) >= 0)
    v13 = *(unsigned __int8 *)(*(_QWORD *)v11 + 31);
  else
    v13 = *(_QWORD *)(*(_QWORD *)v11 + 16);
  v14 = &v21;
  std::string::basic_string[abi:ne180100]((uint64_t)&v21, v13 + 1);
  if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v14 = (std::string *)v21.__r_.__value_.__r.__words[0];
  if (v13)
  {
    v17 = *(char **)(v12 + 8);
    v16 = (char *)(v12 + 8);
    v15 = v17;
    if (v16[23] >= 0)
      v18 = v16;
    else
      v18 = v15;
    memmove(v14, v18, v13);
  }
  *(_WORD *)((char *)&v14->__r_.__value_.__l.__data_ + v13) = 46;
  v19 = std::string::append(&v21, "lastSyncDate");
  v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  __p.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  mlcore::EntityClass::setPropertyForName(v9, v10, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
}

void sub_20A79CD38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

uint64_t mlcore::SourcePropertyLastSyncRevision(mlcore *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&mlcore::SourcePropertyLastSyncRevision(void)::once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&mlcore::SourcePropertyLastSyncRevision(void)::once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::SourcePropertyLastSyncRevision(void)::$_0 &&>>);
  }
  return mlcore::SourcePropertyLastSyncRevision(void)::property;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::SourcePropertyLastSyncRevision(void)::$_0 &&>>()
{
  uint64_t v0;
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  mlcore::SourceTable **v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  std::string *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  std::string *v19;
  __int128 v20;
  std::string v21;
  std::string __p;
  char v23;
  _QWORD v24[2];

  v0 = operator new();
  v1 = (_QWORD *)mediaplatform::Singleton<mlcore::SourceTable>::sharedInstance();
  v2 = (std::__shared_weak_count *)v1[1];
  v24[0] = *v1;
  v24[1] = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  v5 = (mlcore::SourceTable **)mediaplatform::Singleton<mlcore::SourceTable>::sharedInstance();
  mlcore::SourceTable::lastSyncRevisionColumn(*v5, (uint64_t)&__p);
  mlcore::DatabaseModelProperty<long long>::DatabaseModelProperty(v0, v24, (uint64_t)&__p);
  mlcore::SourcePropertyLastSyncRevision(void)::property = v0;
  if (v23 < 0)
    operator delete((void *)__p.__r_.__value_.__l.__size_);
  if (v2)
  {
    v6 = (unint64_t *)&v2->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v8 = mlcore::SourcePropertyLastSyncRevision(void)::property;
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  std::string::operator=((std::string *)(v8 + 40), &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v9 = mlcore::TypedEntityClass<mlcore::Source>::sharedPointer();
  v10 = mlcore::SourcePropertyLastSyncRevision(void)::property;
  v11 = mediaplatform::Singleton<mlcore::SourceTable>::sharedInstance();
  v12 = *(_QWORD *)v11;
  if (*(char *)(*(_QWORD *)v11 + 31) >= 0)
    v13 = *(unsigned __int8 *)(*(_QWORD *)v11 + 31);
  else
    v13 = *(_QWORD *)(*(_QWORD *)v11 + 16);
  v14 = &v21;
  std::string::basic_string[abi:ne180100]((uint64_t)&v21, v13 + 1);
  if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v14 = (std::string *)v21.__r_.__value_.__r.__words[0];
  if (v13)
  {
    v17 = *(char **)(v12 + 8);
    v16 = (char *)(v12 + 8);
    v15 = v17;
    if (v16[23] >= 0)
      v18 = v16;
    else
      v18 = v15;
    memmove(v14, v18, v13);
  }
  *(_WORD *)((char *)&v14->__r_.__value_.__l.__data_ + v13) = 46;
  v19 = std::string::append(&v21, "lastSyncRevision");
  v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  __p.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  mlcore::EntityClass::setPropertyForName(v9, v10, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
}

void sub_20A79D024(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

double mlcore::Source::Source(mlcore::Source *this, uint64_t a2)
{
  double result;

  result = 0.0;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_DWORD *)this + 12) = 1065353216;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *((_DWORD *)this + 22) = 1065353216;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_DWORD *)this + 32) = 1065353216;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 152) = 0u;
  *((_DWORD *)this + 42) = 1065353216;
  *((_OWORD *)this + 11) = 0u;
  *((_OWORD *)this + 12) = 0u;
  *((_DWORD *)this + 52) = 1065353216;
  *((_QWORD *)this + 27) = &unk_24C3371E8;
  *((_QWORD *)this + 28) = a2;
  *(_QWORD *)this = &off_24C33A900;
  *((_QWORD *)this + 1) = &off_24C3371C0;
  return result;
}

{
  double result;

  result = 0.0;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_DWORD *)this + 12) = 1065353216;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *((_DWORD *)this + 22) = 1065353216;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_DWORD *)this + 32) = 1065353216;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 152) = 0u;
  *((_DWORD *)this + 42) = 1065353216;
  *((_OWORD *)this + 11) = 0u;
  *((_OWORD *)this + 12) = 0u;
  *((_DWORD *)this + 52) = 1065353216;
  *((_QWORD *)this + 27) = &unk_24C3371E8;
  *((_QWORD *)this + 28) = a2;
  *(_QWORD *)this = &off_24C33A900;
  *((_QWORD *)this + 1) = &off_24C3371C0;
  return result;
}

double mlcore::Source::Source(uint64_t a1, unsigned int a2)
{
  double result;

  result = 0.0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_DWORD *)(a1 + 48) = 1065353216;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_DWORD *)(a1 + 88) = 1065353216;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_DWORD *)(a1 + 128) = 1065353216;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_DWORD *)(a1 + 168) = 1065353216;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_DWORD *)(a1 + 208) = 1065353216;
  *(_QWORD *)(a1 + 216) = &unk_24C3371E8;
  *(_QWORD *)(a1 + 224) = a2;
  *(_QWORD *)a1 = &off_24C33A900;
  *(_QWORD *)(a1 + 8) = &off_24C3371C0;
  return result;
}

{
  double result;

  result = 0.0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_DWORD *)(a1 + 48) = 1065353216;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_DWORD *)(a1 + 88) = 1065353216;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_DWORD *)(a1 + 128) = 1065353216;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_DWORD *)(a1 + 168) = 1065353216;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_DWORD *)(a1 + 208) = 1065353216;
  *(_QWORD *)(a1 + 216) = &unk_24C3371E8;
  *(_QWORD *)(a1 + 224) = a2;
  *(_QWORD *)a1 = &off_24C33A900;
  *(_QWORD *)(a1 + 8) = &off_24C3371C0;
  return result;
}

void mlcore::Source::name(mlcore::Source *this@<X0>, std::string *a2@<X8>)
{
  unint64_t v4;

  v4 = mlcore::SourcePropertyName(this);
  mlcore::Entity::valueForProperty<std::string>(a2, (uint64_t)this, v4);
}

void mlcore::Source::setName(mlcore *a1, uint64_t a2)
{
  std::string::size_type v4;

  v4 = mlcore::SourcePropertyName(a1);
  mlcore::Entity::setValueForProperty<std::string>((uint64_t)a1, a2, v4);
}

uint64_t mlcore::Source::lastSyncDate(mlcore::Source *this)
{
  unint64_t SyncDate;

  SyncDate = mlcore::SourcePropertyLastSyncDate(this);
  return mlcore::Entity::valueForProperty<long long>((uint64_t)this, SyncDate);
}

_QWORD *mlcore::Source::setLastSyncDate(mlcore::Source *this, uint64_t a2)
{
  _QWORD *result;
  unint64_t SyncDate;

  SyncDate = mlcore::SourcePropertyLastSyncDate(this);
  result = std::__hash_table<std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>,std::__unordered_map_hasher<mlcore::ModelProperty<long long> *,std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>,std::hash<mlcore::ModelProperty<long long> *>,std::equal_to<mlcore::ModelProperty<long long> *>,true>,std::__unordered_map_equal<mlcore::ModelProperty<long long> *,std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>,std::equal_to<mlcore::ModelProperty<long long> *>,std::hash<mlcore::ModelProperty<long long> *>,true>,std::allocator<std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>>>::__emplace_unique_key_args<mlcore::ModelProperty<long long> *,std::piecewise_construct_t const&,std::tuple<mlcore::ModelProperty<long long> * const&>,std::tuple<>>((uint64_t)this + 176, SyncDate, &SyncDate);
  result[3] = a2;
  return result;
}

uint64_t mlcore::Source::lastSyncRevision(mlcore::Source *this)
{
  unint64_t SyncRevision;

  SyncRevision = mlcore::SourcePropertyLastSyncRevision(this);
  return mlcore::Entity::valueForProperty<long long>((uint64_t)this, SyncRevision);
}

_QWORD *mlcore::Source::setLastSyncRevision(mlcore::Source *this, uint64_t a2)
{
  _QWORD *result;
  unint64_t SyncRevision;

  SyncRevision = mlcore::SourcePropertyLastSyncRevision(this);
  result = std::__hash_table<std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>,std::__unordered_map_hasher<mlcore::ModelProperty<long long> *,std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>,std::hash<mlcore::ModelProperty<long long> *>,std::equal_to<mlcore::ModelProperty<long long> *>,true>,std::__unordered_map_equal<mlcore::ModelProperty<long long> *,std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>,std::equal_to<mlcore::ModelProperty<long long> *>,std::hash<mlcore::ModelProperty<long long> *>,true>,std::allocator<std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>>>::__emplace_unique_key_args<mlcore::ModelProperty<long long> *,std::piecewise_construct_t const&,std::tuple<mlcore::ModelProperty<long long> * const&>,std::tuple<>>((uint64_t)this + 176, SyncRevision, &SyncRevision);
  result[3] = a2;
  return result;
}

void mlcore::PersonTable::~PersonTable(mlcore::PersonTable *this)
{
  *(_QWORD *)this = off_24C3361A0;
  *((_QWORD *)this + 108) = off_24C335D90;
  if (*((char *)this + 895) < 0)
    operator delete(*((void **)this + 109));
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)this + 800);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)this + 736);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)this + 672);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)this + 608);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)this + 544);
  *((_QWORD *)this + 62) = off_24C335D90;
  if (*((char *)this + 527) < 0)
    operator delete(*((void **)this + 63));
  mediaplatform::DatabaseTable<long long,std::string,std::string,std::string,std::string,std::string,int>::~DatabaseTable((uint64_t)this);
}

{
  *(_QWORD *)this = off_24C3361A0;
  *((_QWORD *)this + 108) = off_24C335D90;
  if (*((char *)this + 895) < 0)
    operator delete(*((void **)this + 109));
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)this + 800);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)this + 736);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)this + 672);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)this + 608);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)this + 544);
  *((_QWORD *)this + 62) = off_24C335D90;
  if (*((char *)this + 527) < 0)
    operator delete(*((void **)this + 63));
  mediaplatform::DatabaseTable<long long,std::string,std::string,std::string,std::string,std::string,int>::~DatabaseTable((uint64_t)this);
  JUMPOUT(0x20BD27AFCLL);
}

uint64_t mediaplatform::DatabaseTable<long long,std::string,std::string,std::string,std::string,std::string,int>::columnCount()
{
  return 7;
}

void mediaplatform::DatabaseTable<long long,std::string,std::string,std::string,std::string,std::string,int>::columnNames(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  mediaplatform::ColumnNamesApplier::operator()<long long>((uint64_t)a2, a1 + 448);
  mediaplatform::ColumnNamesApplier::operator()<std::string>((uint64_t)a2, a1 + 384);
  mediaplatform::ColumnNamesApplier::operator()<std::string>((uint64_t)a2, a1 + 320);
  mediaplatform::ColumnNamesApplier::operator()<std::string>((uint64_t)a2, a1 + 256);
  mediaplatform::ColumnNamesApplier::operator()<std::string>((uint64_t)a2, a1 + 192);
  mediaplatform::ColumnNamesApplier::operator()<std::string>((uint64_t)a2, a1 + 128);
  mediaplatform::ColumnNamesApplier::operator()<int>((uint64_t)a2, a1 + 80);
}

void sub_20A79D52C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void mediaplatform::DatabaseTable<long long,std::string,std::string,std::string,std::string,std::string,int>::targetColumnExpression(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  __int128 *v3;
  __int128 *v4[3];
  __int128 **v5;

  v3 = (__int128 *)(a1 + 8);
  (*(void (**)(__int128 **__return_ptr))(*(_QWORD *)a1 + 24))(v4);
  std::allocate_shared[abi:ne180100]<mediaplatform::SQLColumnNameExpression,std::allocator<mediaplatform::SQLColumnNameExpression>,std::string &,std::string const&,void>(a2, v4[0], v3);
  v5 = v4;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v5);
}

void sub_20A79D5A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void mediaplatform::DatabaseTable<long long,std::string,std::string,std::string,std::string,std::string,int>::~DatabaseTable(uint64_t a1)
{
  *(_QWORD *)a1 = &off_24C335638;
  *(_QWORD *)(a1 + 448) = off_24C335D90;
  if (*(char *)(a1 + 479) < 0)
    operator delete(*(void **)(a1 + 456));
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 384);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 320);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 256);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 192);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 128);
  *(_QWORD *)(a1 + 80) = off_24C335D90;
  if (*(char *)(a1 + 111) < 0)
    operator delete(*(void **)(a1 + 88));
  if (*(char *)(a1 + 79) < 0)
    operator delete(*(void **)(a1 + 56));
  mediaplatform::DatabaseTableBase::~DatabaseTableBase((void **)a1);
}

{
  mediaplatform::DatabaseTable<long long,std::string,std::string,std::string,std::string,std::string,int>::~DatabaseTable(a1);
  JUMPOUT(0x20BD27AFCLL);
}

void mlcore::MediaTable<long long,std::string,std::string,std::string,std::string,std::string,int>::~MediaTable(uint64_t a1)
{
  *(_QWORD *)a1 = off_24C3361A0;
  *(_QWORD *)(a1 + 864) = off_24C335D90;
  if (*(char *)(a1 + 895) < 0)
    operator delete(*(void **)(a1 + 872));
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 800);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 736);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 672);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 608);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 544);
  *(_QWORD *)(a1 + 496) = off_24C335D90;
  if (*(char *)(a1 + 527) < 0)
    operator delete(*(void **)(a1 + 504));
  mediaplatform::DatabaseTable<long long,std::string,std::string,std::string,std::string,std::string,int>::~DatabaseTable(a1);
}

{
  *(_QWORD *)a1 = off_24C3361A0;
  *(_QWORD *)(a1 + 864) = off_24C335D90;
  if (*(char *)(a1 + 895) < 0)
    operator delete(*(void **)(a1 + 872));
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 800);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 736);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 672);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 608);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 544);
  *(_QWORD *)(a1 + 496) = off_24C335D90;
  if (*(char *)(a1 + 527) < 0)
    operator delete(*(void **)(a1 + 504));
  mediaplatform::DatabaseTable<long long,std::string,std::string,std::string,std::string,std::string,int>::~DatabaseTable(a1);
  JUMPOUT(0x20BD27AFCLL);
}

uint64_t std::__tuple_leaf<3ul,mlcore::MediaColumn<std::string>,false>::__tuple_leaf[abi:ne180100]<mlcore::MediaColumn<std::string>&,void>(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  std::string *v5;
  __int128 v6;

  *(_QWORD *)a1 = off_24C335D90;
  if (*(char *)(a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 8), *(const std::string::value_type **)(a2 + 8), *(_QWORD *)(a2 + 16));
  }
  else
  {
    v4 = *(_OWORD *)(a2 + 8);
    *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 8) = v4;
  }
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_QWORD *)a1 = &off_24C335AB8;
  *(_BYTE *)(a1 + 36) = *(_BYTE *)(a2 + 36);
  v5 = (std::string *)(a1 + 40);
  if (*(char *)(a2 + 63) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *(const std::string::value_type **)(a2 + 40), *(_QWORD *)(a2 + 48));
  }
  else
  {
    v6 = *(_OWORD *)(a2 + 40);
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
  *(_QWORD *)a1 = &off_24C336A60;
  return a1;
}

void sub_20A79D850(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  uint64_t v3;

  *(_QWORD *)v1 = v3;
  if (*(char *)(v1 + 31) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

uint64_t std::__tuple_leaf<4ul,mlcore::MediaColumn<std::string>,false>::__tuple_leaf[abi:ne180100]<mlcore::MediaColumn<std::string>&,void>(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  std::string *v5;
  __int128 v6;

  *(_QWORD *)a1 = off_24C335D90;
  if (*(char *)(a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 8), *(const std::string::value_type **)(a2 + 8), *(_QWORD *)(a2 + 16));
  }
  else
  {
    v4 = *(_OWORD *)(a2 + 8);
    *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 8) = v4;
  }
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_QWORD *)a1 = &off_24C335AB8;
  *(_BYTE *)(a1 + 36) = *(_BYTE *)(a2 + 36);
  v5 = (std::string *)(a1 + 40);
  if (*(char *)(a2 + 63) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *(const std::string::value_type **)(a2 + 40), *(_QWORD *)(a2 + 48));
  }
  else
  {
    v6 = *(_OWORD *)(a2 + 40);
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
  *(_QWORD *)a1 = &off_24C336A60;
  return a1;
}

void sub_20A79D92C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  uint64_t v3;

  *(_QWORD *)v1 = v3;
  if (*(char *)(v1 + 31) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

uint64_t std::__tuple_leaf<5ul,mlcore::MediaColumn<std::string>,false>::__tuple_leaf[abi:ne180100]<mlcore::MediaColumn<std::string>&,void>(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  std::string *v5;
  __int128 v6;

  *(_QWORD *)a1 = off_24C335D90;
  if (*(char *)(a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 8), *(const std::string::value_type **)(a2 + 8), *(_QWORD *)(a2 + 16));
  }
  else
  {
    v4 = *(_OWORD *)(a2 + 8);
    *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 8) = v4;
  }
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_QWORD *)a1 = &off_24C335AB8;
  *(_BYTE *)(a1 + 36) = *(_BYTE *)(a2 + 36);
  v5 = (std::string *)(a1 + 40);
  if (*(char *)(a2 + 63) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *(const std::string::value_type **)(a2 + 40), *(_QWORD *)(a2 + 48));
  }
  else
  {
    v6 = *(_OWORD *)(a2 + 40);
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
  *(_QWORD *)a1 = &off_24C336A60;
  return a1;
}

void sub_20A79DA08(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  uint64_t v3;

  *(_QWORD *)v1 = v3;
  if (*(char *)(v1 + 31) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

uint64_t mediaplatform::DatabaseColumnTuple<1ul,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(uint64_t a1)
{
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 304);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 240);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 176);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 112);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 48);
  *(_QWORD *)a1 = off_24C335D90;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

uint64_t mediaplatform::DatabaseColumnTuple<2ul,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(uint64_t a1)
{
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 240);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 176);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 112);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 48);
  *(_QWORD *)a1 = off_24C335D90;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

uint64_t mediaplatform::DatabaseColumnTuple<3ul,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(uint64_t a1)
{
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 176);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 112);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 48);
  *(_QWORD *)a1 = off_24C335D90;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

uint64_t mediaplatform::DatabaseColumnTuple<4ul,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(uint64_t a1)
{
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 112);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 48);
  *(_QWORD *)a1 = off_24C335D90;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

uint64_t mediaplatform::DatabaseColumnTuple<5ul,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(uint64_t a1)
{
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 48);
  *(_QWORD *)a1 = off_24C335D90;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void mlcore::PersonTable::persistentIDColumn(mlcore::PersonTable *this@<X0>, uint64_t a2@<X8>)
{
  std::string *v4;

  *(_QWORD *)a2 = off_24C335D90;
  v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 527) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 63), *((_QWORD *)this + 64));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 504);
    *(_QWORD *)(a2 + 24) = *((_QWORD *)this + 65);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 132);
  *(_DWORD *)(a2 + 44) = *((_DWORD *)this + 135);
  *(_QWORD *)(a2 + 36) = *(_QWORD *)((char *)this + 532);
  *(_QWORD *)a2 = off_24C336AC0;
}

void mlcore::PersonTable::cloudIdentifierColumn(mlcore::PersonTable *this@<X0>, uint64_t a2@<X8>)
{
  std::string *v4;
  std::string *v5;

  *(_QWORD *)a2 = off_24C335D90;
  v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 575) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 69), *((_QWORD *)this + 70));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 552);
    *(_QWORD *)(a2 + 24) = *((_QWORD *)this + 71);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 144);
  *(_QWORD *)a2 = &off_24C335AB8;
  *(_BYTE *)(a2 + 36) = *((_BYTE *)this + 580);
  v5 = (std::string *)(a2 + 40);
  if (*((char *)this + 607) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)this + 73), *((_QWORD *)this + 74));
  }
  else
  {
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 584);
    *(_QWORD *)(a2 + 56) = *((_QWORD *)this + 75);
  }
  *(_QWORD *)a2 = &off_24C336A60;
}

void sub_20A79DD10(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  uint64_t v3;

  *(_QWORD *)v1 = v3;
  if (*(char *)(v1 + 31) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

void mlcore::PersonTable::handleColumn(mlcore::PersonTable *this@<X0>, uint64_t a2@<X8>)
{
  std::string *v4;
  std::string *v5;

  *(_QWORD *)a2 = off_24C335D90;
  v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 639) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 77), *((_QWORD *)this + 78));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 616);
    *(_QWORD *)(a2 + 24) = *((_QWORD *)this + 79);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 160);
  *(_QWORD *)a2 = &off_24C335AB8;
  *(_BYTE *)(a2 + 36) = *((_BYTE *)this + 644);
  v5 = (std::string *)(a2 + 40);
  if (*((char *)this + 671) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)this + 81), *((_QWORD *)this + 82));
  }
  else
  {
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 648);
    *(_QWORD *)(a2 + 56) = *((_QWORD *)this + 83);
  }
  *(_QWORD *)a2 = &off_24C336A60;
}

void sub_20A79DDF0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  uint64_t v3;

  *(_QWORD *)v1 = v3;
  if (*(char *)(v1 + 31) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

void mlcore::PersonTable::nameColumn(mlcore::PersonTable *this@<X0>, uint64_t a2@<X8>)
{
  std::string *v4;
  std::string *v5;

  *(_QWORD *)a2 = off_24C335D90;
  v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 703) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 85), *((_QWORD *)this + 86));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 680);
    *(_QWORD *)(a2 + 24) = *((_QWORD *)this + 87);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 176);
  *(_QWORD *)a2 = &off_24C335AB8;
  *(_BYTE *)(a2 + 36) = *((_BYTE *)this + 708);
  v5 = (std::string *)(a2 + 40);
  if (*((char *)this + 735) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)this + 89), *((_QWORD *)this + 90));
  }
  else
  {
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 712);
    *(_QWORD *)(a2 + 56) = *((_QWORD *)this + 91);
  }
  *(_QWORD *)a2 = &off_24C336A60;
}

void sub_20A79DED0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  uint64_t v3;

  *(_QWORD *)v1 = v3;
  if (*(char *)(v1 + 31) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

void mlcore::PersonTable::imageURLColumn(mlcore::PersonTable *this@<X0>, uint64_t a2@<X8>)
{
  std::string *v4;
  std::string *v5;

  *(_QWORD *)a2 = off_24C335D90;
  v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 767) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 93), *((_QWORD *)this + 94));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 744);
    *(_QWORD *)(a2 + 24) = *((_QWORD *)this + 95);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 192);
  *(_QWORD *)a2 = &off_24C335AB8;
  *(_BYTE *)(a2 + 36) = *((_BYTE *)this + 772);
  v5 = (std::string *)(a2 + 40);
  if (*((char *)this + 799) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)this + 97), *((_QWORD *)this + 98));
  }
  else
  {
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 776);
    *(_QWORD *)(a2 + 56) = *((_QWORD *)this + 99);
  }
  *(_QWORD *)a2 = &off_24C336A60;
}

void sub_20A79DFB0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  uint64_t v3;

  *(_QWORD *)v1 = v3;
  if (*(char *)(v1 + 31) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

void mlcore::PersonTable::imageTokenColumn(mlcore::PersonTable *this@<X0>, uint64_t a2@<X8>)
{
  std::string *v4;
  std::string *v5;

  *(_QWORD *)a2 = off_24C335D90;
  v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 831) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 101), *((_QWORD *)this + 102));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 808);
    *(_QWORD *)(a2 + 24) = *((_QWORD *)this + 103);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 208);
  *(_QWORD *)a2 = &off_24C335AB8;
  *(_BYTE *)(a2 + 36) = *((_BYTE *)this + 836);
  v5 = (std::string *)(a2 + 40);
  if (*((char *)this + 863) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)this + 105), *((_QWORD *)this + 106));
  }
  else
  {
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 840);
    *(_QWORD *)(a2 + 56) = *((_QWORD *)this + 107);
  }
  *(_QWORD *)a2 = &off_24C336A60;
}

void sub_20A79E090(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  uint64_t v3;

  *(_QWORD *)v1 = v3;
  if (*(char *)(v1 + 31) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

void mlcore::PersonTable::lightweightProfileColumn(mlcore::PersonTable *this@<X0>, uint64_t a2@<X8>)
{
  std::string *v4;

  *(_QWORD *)a2 = off_24C335D90;
  v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 895) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 109), *((_QWORD *)this + 110));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 872);
    *(_QWORD *)(a2 + 24) = *((_QWORD *)this + 111);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 224);
  *(_QWORD *)(a2 + 36) = *(_QWORD *)((char *)this + 900);
  *(_QWORD *)a2 = off_24C336AA0;
}

void std::__shared_ptr_emplace<mlcore::SQLRenderer>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C33C3D0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<mlcore::SQLRenderer>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C33C3D0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x20BD27AFCLL);
}

_QWORD *std::vector<mlcore::ModelPropertyBase *>::__init_with_size[abi:ne180100]<mlcore::ModelPropertyBase **,mlcore::ModelPropertyBase **>(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<mlcore::ModelPropertyBase *>::__vallocate[abi:ne180100](result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_20A79E1EC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<mlcore::PropertyCache>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;
  char *v6;
  char *v7;
  void (**v8)(char *);
  BOOL v9;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      v6 = v4 - 216;
      v7 = v4 - 216;
      do
      {
        v8 = *(void (***)(char *))v7;
        v7 -= 216;
        (*v8)(v6);
        v9 = v6 == v2;
        v6 = v7;
      }
      while (!v9);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t std::vector<mlcore::PropertyCache>::__init_with_size[abi:ne180100]<mlcore::PropertyCache*,mlcore::PropertyCache*>(uint64_t result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  if (a4)
  {
    if (a4 >= 0x12F684BDA12F685)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v6 = (_QWORD *)result;
    result = (uint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<mlcore::PropertyCache>>(a4);
    v7 = result;
    *v6 = result;
    v6[1] = result;
    v6[2] = result + 216 * v8;
    if (a2 != a3)
    {
      v9 = 0;
      do
      {
        v10 = (_QWORD *)(v7 + v9);
        result = mlcore::PropertyCacheBase<long long,int,double,std::string,mediaplatform::Data>::PropertyCacheBase(v7 + v9, a2 + v9);
        *v10 = &off_24C3371C0;
        v10[26] = &unk_24C3371E8;
        v9 += 216;
      }
      while (a2 + v9 != a3);
      v7 += v9;
    }
    v6[1] = v7;
  }
  return result;
}

void sub_20A79E368(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<mlcore::PropertyCache>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<mlcore::PropertyCache>>(unint64_t a1)
{
  if (a1 >= 0x12F684BDA12F685)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(216 * a1);
}

void std::__shared_ptr_emplace<mlcore::PropertiesQueryResult>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C33D048;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<mlcore::PropertiesQueryResult>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C33D048;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x20BD27AFCLL);
}

void std::__function::__func<mlcore::PropertiesQuery::_perform(std::shared_ptr<mlcore::Transaction>,std::function<void ()(std::shared_ptr<mlcore::QueryResult>)>)::$_0,std::allocator<mlcore::PropertiesQuery::_perform(std::shared_ptr<mlcore::Transaction>,std::function<void ()(std::shared_ptr<mlcore::QueryResult>)>)::$_0>,void ()(mediaplatform::DatabaseResultList,BOOL &)>::~__func()
{
  JUMPOUT(0x20BD27AFCLL);
}

__n128 std::__function::__func<mlcore::PropertiesQuery::_perform(std::shared_ptr<mlcore::Transaction>,std::function<void ()(std::shared_ptr<mlcore::QueryResult>)>)::$_0,std::allocator<mlcore::PropertiesQuery::_perform(std::shared_ptr<mlcore::Transaction>,std::function<void ()(std::shared_ptr<mlcore::QueryResult>)>)::$_0>,void ()(mediaplatform::DatabaseResultList,BOOL &)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_24C33B2A0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<mlcore::PropertiesQuery::_perform(std::shared_ptr<mlcore::Transaction>,std::function<void ()(std::shared_ptr<mlcore::QueryResult>)>)::$_0,std::allocator<mlcore::PropertiesQuery::_perform(std::shared_ptr<mlcore::Transaction>,std::function<void ()(std::shared_ptr<mlcore::QueryResult>)>)::$_0>,void ()(mediaplatform::DatabaseResultList,BOOL &)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN6mlcore15PropertiesQuery8_performENSt3__110shared_ptrINS_11TransactionEEENS1_8functionIFvNS2_INS_11QueryResultEEEEEEE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<mlcore::PropertiesQuery::_perform(std::shared_ptr<mlcore::Transaction>,std::function<void ()(std::shared_ptr<mlcore::QueryResult>)>)::$_0,std::allocator<mlcore::PropertiesQuery::_perform(std::shared_ptr<mlcore::Transaction>,std::function<void ()(std::shared_ptr<mlcore::QueryResult>)>)::$_0>,void ()(mediaplatform::DatabaseResultList,BOOL &)>::target_type()
{
}

uint64_t std::vector<mlcore::PropertyCache>::__push_back_slow_path<mlcore::PropertyCache const&>(uint64_t *a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  char *v9;
  _QWORD *v10;
  uint64_t v11;
  char *v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t *v17;

  v2 = 0x84BDA12F684BDA13 * ((a1[1] - *a1) >> 3);
  v3 = v2 + 1;
  if (v2 + 1 > 0x12F684BDA12F684)
    std::vector<std::string>::__throw_length_error[abi:ne180100]();
  v6 = a1 + 2;
  if (0x97B425ED097B426 * ((a1[2] - *a1) >> 3) > v3)
    v3 = 0x97B425ED097B426 * ((a1[2] - *a1) >> 3);
  if (0x84BDA12F684BDA13 * ((a1[2] - *a1) >> 3) >= 0x97B425ED097B42)
    v7 = 0x12F684BDA12F684;
  else
    v7 = v3;
  v17 = v6;
  if (v7)
  {
    v9 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<mlcore::PropertyCache>>(v7);
  }
  else
  {
    v9 = 0;
    v8 = 0;
  }
  v13 = v9;
  v14 = &v9[216 * v2];
  v15 = (uint64_t)v14;
  v16 = &v9[216 * v8];
  v10 = (_QWORD *)mlcore::PropertyCacheBase<long long,int,double,std::string,mediaplatform::Data>::PropertyCacheBase((uint64_t)v14, a2);
  *v10 = &off_24C3371C0;
  v10[26] = &unk_24C3371E8;
  v15 += 216;
  std::vector<mlcore::PropertyCache>::__swap_out_circular_buffer(a1, &v13);
  v11 = a1[1];
  std::__split_buffer<mlcore::PropertyCache>::~__split_buffer((uint64_t)&v13);
  return v11;
}

void sub_20A79E640(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<mlcore::PropertyCache>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *mlcore::PropertyCacheBase<mediaplatform::Data>::~PropertyCacheBase(_QWORD *a1)
{
  *a1 = &off_24C339940;
  std::__hash_table<std::__hash_value_type<mlcore::ModelProperty<mediaplatform::Data> *,mediaplatform::Data>,std::__unordered_map_hasher<mlcore::ModelProperty<mediaplatform::Data> *,std::__hash_value_type<mlcore::ModelProperty<mediaplatform::Data> *,mediaplatform::Data>,std::hash<mlcore::ModelProperty<mediaplatform::Data> *>,std::equal_to<mlcore::ModelProperty<mediaplatform::Data> *>,true>,std::__unordered_map_equal<mlcore::ModelProperty<mediaplatform::Data> *,std::__hash_value_type<mlcore::ModelProperty<mediaplatform::Data> *,mediaplatform::Data>,std::equal_to<mlcore::ModelProperty<mediaplatform::Data> *>,std::hash<mlcore::ModelProperty<mediaplatform::Data> *>,true>,std::allocator<std::__hash_value_type<mlcore::ModelProperty<mediaplatform::Data> *,mediaplatform::Data>>>::~__hash_table((uint64_t)(a1 + 1));
  return a1;
}

void mlcore::PropertyCacheBase<mediaplatform::Data>::~PropertyCacheBase(_QWORD *a1)
{
  *a1 = &off_24C339940;
  std::__hash_table<std::__hash_value_type<mlcore::ModelProperty<mediaplatform::Data> *,mediaplatform::Data>,std::__unordered_map_hasher<mlcore::ModelProperty<mediaplatform::Data> *,std::__hash_value_type<mlcore::ModelProperty<mediaplatform::Data> *,mediaplatform::Data>,std::hash<mlcore::ModelProperty<mediaplatform::Data> *>,std::equal_to<mlcore::ModelProperty<mediaplatform::Data> *>,true>,std::__unordered_map_equal<mlcore::ModelProperty<mediaplatform::Data> *,std::__hash_value_type<mlcore::ModelProperty<mediaplatform::Data> *,mediaplatform::Data>,std::equal_to<mlcore::ModelProperty<mediaplatform::Data> *>,std::hash<mlcore::ModelProperty<mediaplatform::Data> *>,true>,std::allocator<std::__hash_value_type<mlcore::ModelProperty<mediaplatform::Data> *,mediaplatform::Data>>>::~__hash_table((uint64_t)(a1 + 1));
  JUMPOUT(0x20BD27AFCLL);
}

_QWORD *mlcore::PropertyCacheBase<std::string,mediaplatform::Data>::~PropertyCacheBase(_QWORD *a1)
{
  *a1 = &off_24C339960;
  std::__hash_table<std::__hash_value_type<mlcore::ModelProperty<std::string> *,std::string>,std::__unordered_map_hasher<mlcore::ModelProperty<std::string> *,std::__hash_value_type<mlcore::ModelProperty<std::string> *,std::string>,std::hash<mlcore::ModelProperty<std::string> *>,std::equal_to<mlcore::ModelProperty<std::string> *>,true>,std::__unordered_map_equal<mlcore::ModelProperty<std::string> *,std::__hash_value_type<mlcore::ModelProperty<std::string> *,std::string>,std::equal_to<mlcore::ModelProperty<std::string> *>,std::hash<mlcore::ModelProperty<std::string> *>,true>,std::allocator<std::__hash_value_type<mlcore::ModelProperty<std::string> *,std::string>>>::~__hash_table((uint64_t)(a1 + 6));
  *a1 = &off_24C339940;
  std::__hash_table<std::__hash_value_type<mlcore::ModelProperty<mediaplatform::Data> *,mediaplatform::Data>,std::__unordered_map_hasher<mlcore::ModelProperty<mediaplatform::Data> *,std::__hash_value_type<mlcore::ModelProperty<mediaplatform::Data> *,mediaplatform::Data>,std::hash<mlcore::ModelProperty<mediaplatform::Data> *>,std::equal_to<mlcore::ModelProperty<mediaplatform::Data> *>,true>,std::__unordered_map_equal<mlcore::ModelProperty<mediaplatform::Data> *,std::__hash_value_type<mlcore::ModelProperty<mediaplatform::Data> *,mediaplatform::Data>,std::equal_to<mlcore::ModelProperty<mediaplatform::Data> *>,std::hash<mlcore::ModelProperty<mediaplatform::Data> *>,true>,std::allocator<std::__hash_value_type<mlcore::ModelProperty<mediaplatform::Data> *,mediaplatform::Data>>>::~__hash_table((uint64_t)(a1 + 1));
  return a1;
}

{
  *a1 = &off_24C339960;
  std::__hash_table<std::__hash_value_type<mlcore::ModelProperty<std::string> *,std::string>,std::__unordered_map_hasher<mlcore::ModelProperty<std::string> *,std::__hash_value_type<mlcore::ModelProperty<std::string> *,std::string>,std::hash<mlcore::ModelProperty<std::string> *>,std::equal_to<mlcore::ModelProperty<std::string> *>,true>,std::__unordered_map_equal<mlcore::ModelProperty<std::string> *,std::__hash_value_type<mlcore::ModelProperty<std::string> *,std::string>,std::equal_to<mlcore::ModelProperty<std::string> *>,std::hash<mlcore::ModelProperty<std::string> *>,true>,std::allocator<std::__hash_value_type<mlcore::ModelProperty<std::string> *,std::string>>>::~__hash_table((uint64_t)(a1 + 6));
  *a1 = &off_24C339940;
  std::__hash_table<std::__hash_value_type<mlcore::ModelProperty<mediaplatform::Data> *,mediaplatform::Data>,std::__unordered_map_hasher<mlcore::ModelProperty<mediaplatform::Data> *,std::__hash_value_type<mlcore::ModelProperty<mediaplatform::Data> *,mediaplatform::Data>,std::hash<mlcore::ModelProperty<mediaplatform::Data> *>,std::equal_to<mlcore::ModelProperty<mediaplatform::Data> *>,true>,std::__unordered_map_equal<mlcore::ModelProperty<mediaplatform::Data> *,std::__hash_value_type<mlcore::ModelProperty<mediaplatform::Data> *,mediaplatform::Data>,std::equal_to<mlcore::ModelProperty<mediaplatform::Data> *>,std::hash<mlcore::ModelProperty<mediaplatform::Data> *>,true>,std::allocator<std::__hash_value_type<mlcore::ModelProperty<mediaplatform::Data> *,mediaplatform::Data>>>::~__hash_table((uint64_t)(a1 + 1));
  return a1;
}

void mlcore::PropertyCacheBase<std::string,mediaplatform::Data>::~PropertyCacheBase(_QWORD *a1)
{
  *a1 = &off_24C339960;
  std::__hash_table<std::__hash_value_type<mlcore::ModelProperty<std::string> *,std::string>,std::__unordered_map_hasher<mlcore::ModelProperty<std::string> *,std::__hash_value_type<mlcore::ModelProperty<std::string> *,std::string>,std::hash<mlcore::ModelProperty<std::string> *>,std::equal_to<mlcore::ModelProperty<std::string> *>,true>,std::__unordered_map_equal<mlcore::ModelProperty<std::string> *,std::__hash_value_type<mlcore::ModelProperty<std::string> *,std::string>,std::equal_to<mlcore::ModelProperty<std::string> *>,std::hash<mlcore::ModelProperty<std::string> *>,true>,std::allocator<std::__hash_value_type<mlcore::ModelProperty<std::string> *,std::string>>>::~__hash_table((uint64_t)(a1 + 6));
  *a1 = &off_24C339940;
  std::__hash_table<std::__hash_value_type<mlcore::ModelProperty<mediaplatform::Data> *,mediaplatform::Data>,std::__unordered_map_hasher<mlcore::ModelProperty<mediaplatform::Data> *,std::__hash_value_type<mlcore::ModelProperty<mediaplatform::Data> *,mediaplatform::Data>,std::hash<mlcore::ModelProperty<mediaplatform::Data> *>,std::equal_to<mlcore::ModelProperty<mediaplatform::Data> *>,true>,std::__unordered_map_equal<mlcore::ModelProperty<mediaplatform::Data> *,std::__hash_value_type<mlcore::ModelProperty<mediaplatform::Data> *,mediaplatform::Data>,std::equal_to<mlcore::ModelProperty<mediaplatform::Data> *>,std::hash<mlcore::ModelProperty<mediaplatform::Data> *>,true>,std::allocator<std::__hash_value_type<mlcore::ModelProperty<mediaplatform::Data> *,mediaplatform::Data>>>::~__hash_table((uint64_t)(a1 + 1));
  JUMPOUT(0x20BD27AFCLL);
}

void mlcore::PropertyCacheBase<double,std::string,mediaplatform::Data>::~PropertyCacheBase(_QWORD *a1)
{
  mlcore::PropertyCacheBase<double,std::string,mediaplatform::Data>::~PropertyCacheBase(a1);
  JUMPOUT(0x20BD27AFCLL);
}

_QWORD *mlcore::PropertyCacheBase<int,double,std::string,mediaplatform::Data>::~PropertyCacheBase(_QWORD *a1)
{
  *a1 = &off_24C3399A0;
  std::__hash_table<mlcore::ModelPropertyBase *,std::hash<mlcore::ModelPropertyBase *>,std::equal_to<mlcore::ModelPropertyBase *>,std::allocator<mlcore::ModelPropertyBase *>>::~__hash_table((uint64_t)(a1 + 16));
  return mlcore::PropertyCacheBase<double,std::string,mediaplatform::Data>::~PropertyCacheBase(a1);
}

void mlcore::PropertyCacheBase<int,double,std::string,mediaplatform::Data>::~PropertyCacheBase(_QWORD *a1)
{
  *a1 = &off_24C3399A0;
  std::__hash_table<mlcore::ModelPropertyBase *,std::hash<mlcore::ModelPropertyBase *>,std::equal_to<mlcore::ModelPropertyBase *>,std::allocator<mlcore::ModelPropertyBase *>>::~__hash_table((uint64_t)(a1 + 16));
  mlcore::PropertyCacheBase<double,std::string,mediaplatform::Data>::~PropertyCacheBase(a1);
  JUMPOUT(0x20BD27AFCLL);
}

void mlcore::PropertyCacheBase<long long,int,double,std::string,mediaplatform::Data>::~PropertyCacheBase(_QWORD *a1)
{
  mlcore::PropertyCacheBase<long long,int,double,std::string,mediaplatform::Data>::~PropertyCacheBase(a1);
  JUMPOUT(0x20BD27AFCLL);
}

char *std::vector<mlcore::ModelPropertyBase *>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >> 61)
    std::vector<std::string>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<mlcore::ModelPropertyBase *>>(a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[8 * v4];
  return result;
}

uint64_t mlcore::PropertiesQuery::sortDescriptors(mlcore::PropertiesQuery *this)
{
  return (uint64_t)this + 56;
}

uint64_t mlcore::PropertiesQuery::propertiesToFetch(mlcore::PropertiesQuery *this)
{
  return (uint64_t)this + 80;
}

char *std::vector<mlcore::ModelPropertyBase *>::__assign_with_size[abi:ne180100]<mlcore::ModelPropertyBase **,mlcore::ModelPropertyBase **>(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  void **v12;
  char *v13;
  _BYTE *v14;
  unint64_t v15;
  char *v16;
  size_t v17;
  void *v18;
  char *v19;

  v7 = result;
  v8 = *((_QWORD *)result + 2);
  v9 = *(char **)result;
  if (a4 > (v8 - *(_QWORD *)result) >> 3)
  {
    if (v9)
    {
      *((_QWORD *)result + 1) = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 >> 61)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v10 = v8 >> 2;
    if (v8 >> 2 <= a4)
      v10 = a4;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v11 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    result = std::vector<mlcore::ModelPropertyBase *>::__vallocate[abi:ne180100](v7, v11);
    v13 = (char *)v7[1];
    v12 = (void **)(v7 + 1);
    v9 = v13;
LABEL_16:
    v17 = a3 - (_QWORD)__src;
    if (v17)
    {
      v18 = v9;
      v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  v12 = (void **)(result + 8);
  v14 = (_BYTE *)*((_QWORD *)result + 1);
  v15 = (v14 - v9) >> 3;
  if (v15 >= a4)
    goto LABEL_16;
  v16 = &__src[8 * v15];
  if (v14 != v9)
  {
    result = (char *)memmove(*(void **)result, __src, v14 - v9);
    v9 = (char *)*v12;
  }
  v17 = a3 - (_QWORD)v16;
  if (v17)
  {
    v18 = v9;
    v19 = v16;
LABEL_18:
    result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  *v12 = &v9[v17];
  return result;
}

uint64_t mlcore::PropertiesQuery::setIsDistinct(uint64_t this, char a2)
{
  *(_BYTE *)(this + 48) = a2;
  return this;
}

uint64_t mlcore::PropertiesQuery::isDistict(mlcore::PropertiesQuery *this)
{
  return *((unsigned __int8 *)this + 48);
}

uint64_t mlcore::PropertiesQueryResult::allResults(mlcore::PropertiesQueryResult *this)
{
  return (uint64_t)this + 160;
}

void mlcore::Person::~Person(mlcore::Person *this)
{
  *(_QWORD *)this = off_24C33A860;
  mlcore::PropertyCacheBase<long long,int,double,std::string,mediaplatform::Data>::~PropertyCacheBase((_QWORD *)this + 1);
}

{
  *(_QWORD *)this = off_24C33A860;
  mlcore::PropertyCacheBase<long long,int,double,std::string,mediaplatform::Data>::~PropertyCacheBase((_QWORD *)this + 1);
  JUMPOUT(0x20BD27AFCLL);
}

double std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::TypedEntityClass<mlcore::Person>::sharedPointer(void)::{lambda(void)#1} &&>>()
{
  uint64_t v0;
  double result;

  v0 = operator new();
  result = 0.0;
  *(_OWORD *)(v0 + 16) = 0u;
  *(_OWORD *)(v0 + 32) = 0u;
  *(_OWORD *)(v0 + 48) = 0u;
  *(_OWORD *)(v0 + 64) = 0u;
  *(_OWORD *)(v0 + 80) = 0u;
  *(_QWORD *)(v0 + 96) = 0;
  *(_DWORD *)(v0 + 104) = 1065353216;
  *(_OWORD *)(v0 + 112) = 0u;
  *(_OWORD *)(v0 + 128) = 0u;
  *(_DWORD *)(v0 + 144) = 1065353216;
  *(_QWORD *)v0 = &off_24C338EE8;
  *(_QWORD *)(v0 + 8) = 850045863;
  mlcore::TypedEntityClass<mlcore::Person>::sharedPointer(void)::__sharedPointer = v0;
  return result;
}

void mlcore::TypedEntityClass<mlcore::Person>::~TypedEntityClass(mlcore::EntityClass *a1)
{
  mlcore::EntityClass::~EntityClass(a1);
  JUMPOUT(0x20BD27AFCLL);
}

uint64_t mlcore::TypedEntityClass<mlcore::Person>::description(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
}

__n128 mlcore::TypedEntityClass<mlcore::Person>::create@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, __n128 *a4@<X8>)
{
  char *v8;
  uint64_t v9;
  unint64_t *v10;
  uint64_t v11;
  __n128 result;
  __n128 v13;
  unint64_t v14[3];
  unint64_t *v15;
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  v8 = (char *)operator new(0x100uLL);
  *((_QWORD *)v8 + 1) = 0;
  *((_QWORD *)v8 + 2) = 0;
  *(_QWORD *)v8 = &off_24C33D400;
  *(_OWORD *)(v8 + 40) = 0u;
  *(_OWORD *)(v8 + 56) = 0u;
  *((_DWORD *)v8 + 18) = 1065353216;
  *((_OWORD *)v8 + 5) = 0u;
  *((_OWORD *)v8 + 6) = 0u;
  *((_DWORD *)v8 + 28) = 1065353216;
  *(_OWORD *)(v8 + 120) = 0u;
  *(_OWORD *)(v8 + 136) = 0u;
  *((_DWORD *)v8 + 38) = 1065353216;
  *((_OWORD *)v8 + 10) = 0u;
  *((_OWORD *)v8 + 11) = 0u;
  *((_DWORD *)v8 + 48) = 1065353216;
  *(_OWORD *)(v8 + 216) = 0u;
  *((_DWORD *)v8 + 58) = 1065353216;
  *((_QWORD *)v8 + 30) = &unk_24C3371E8;
  *((_QWORD *)v8 + 31) = a2;
  *(_OWORD *)(v8 + 200) = 0u;
  v9 = (uint64_t)(v8 + 200);
  *((_QWORD *)v8 + 4) = &off_24C3371C0;
  *((_QWORD *)v8 + 3) = &off_24C33A8B0;
  v13.n128_u64[0] = (unint64_t)(v8 + 24);
  v13.n128_u64[1] = (unint64_t)v8;
  v14[0] = (unint64_t)&off_24C33B140;
  v15 = v14;
  mlcore::PropertyCache::mergePropertiesFromCache((uint64_t)(v8 + 32), a3, (uint64_t)v14);
  v10 = v15;
  if (v15 == v14)
  {
    v11 = 4;
    v10 = v14;
    goto LABEL_5;
  }
  if (v15)
  {
    v11 = 5;
LABEL_5:
    (*(void (**)(void))(*v10 + 8 * v11))();
  }
  v14[0] = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 112))(a1);
  std::__hash_table<std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>,std::__unordered_map_hasher<mlcore::ModelProperty<long long> *,std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>,std::hash<mlcore::ModelProperty<long long> *>,std::equal_to<mlcore::ModelProperty<long long> *>,true>,std::__unordered_map_equal<mlcore::ModelProperty<long long> *,std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>,std::equal_to<mlcore::ModelProperty<long long> *>,std::hash<mlcore::ModelProperty<long long> *>,true>,std::allocator<std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>>>::__emplace_unique_key_args<mlcore::ModelProperty<long long> *,std::piecewise_construct_t const&,std::tuple<mlcore::ModelProperty<long long> * const&>,std::tuple<>>(v9, v14[0], v14)[3] = a2;
  result = v13;
  *a4 = v13;
  return result;
}

void sub_20A79EC0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15)
{
  char *v15;
  char *v17;
  uint64_t v18;

  v17 = a15;
  if (a15 == v15)
  {
    v18 = 4;
    v17 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v18 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v17 + 8 * v18))();
LABEL_6:
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t mlcore::TypedEntityClass<mlcore::Person>::name(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
}

uint64_t mlcore::TypedEntityClass<mlcore::Person>::entityType()
{
  return 10;
}

BOOL mlcore::TypedEntityClass<mlcore::Person>::isRevisionTrackable(uint64_t a1)
{
  return (*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1) != -1;
}

uint64_t mlcore::TypedEntityClass<mlcore::Person>::isCloudUpdatable()
{
  return 0;
}

void mlcore::TypedEntityClass<mlcore::Person>::databaseTablesToDeleteFrom(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

void mlcore::TypedEntityClass<mlcore::Person>::databaseTablesToInsertInto(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

uint64_t mlcore::TypedEntityClass<mlcore::Person>::representativeItemPersistentIDProperty()
{
  return 0;
}

uint64_t mlcore::TypedEntityClass<mlcore::Person>::trackForeignPersistentIDProperty()
{
  return 0;
}

uint64_t mlcore::TypedEntityClass<mlcore::Person>::trackForeignOrderingProperty()
{
  return 0;
}

uint64_t mlcore::TypedEntityClass<mlcore::Person>::sectionPropertyForOrderingProperty()
{
  return 0;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::PersonPropertyPersistentID(void)::$_0 &&>>()
{
  uint64_t v0;
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  mlcore::PersonTable **v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  std::string *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  std::string *v19;
  __int128 v20;
  std::string v21;
  std::string __p;
  char v23;
  _QWORD v24[2];

  v0 = operator new();
  v1 = (_QWORD *)mediaplatform::Singleton<mlcore::PersonTable>::sharedInstance();
  v2 = (std::__shared_weak_count *)v1[1];
  v24[0] = *v1;
  v24[1] = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  v5 = (mlcore::PersonTable **)mediaplatform::Singleton<mlcore::PersonTable>::sharedInstance();
  mlcore::PersonTable::persistentIDColumn(*v5, (uint64_t)&__p);
  mlcore::DatabaseModelProperty<long long>::DatabaseModelProperty(v0, v24, (uint64_t)&__p);
  mlcore::PersonPropertyPersistentID(void)::property = v0;
  if (v23 < 0)
    operator delete((void *)__p.__r_.__value_.__l.__size_);
  if (v2)
  {
    v6 = (unint64_t *)&v2->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v8 = mlcore::PersonPropertyPersistentID(void)::property;
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  std::string::operator=((std::string *)(v8 + 40), &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v9 = mlcore::TypedEntityClass<mlcore::Person>::sharedPointer();
  v10 = mlcore::PersonPropertyPersistentID(void)::property;
  v11 = mediaplatform::Singleton<mlcore::PersonTable>::sharedInstance();
  v12 = *(_QWORD *)v11;
  if (*(char *)(*(_QWORD *)v11 + 31) >= 0)
    v13 = *(unsigned __int8 *)(*(_QWORD *)v11 + 31);
  else
    v13 = *(_QWORD *)(*(_QWORD *)v11 + 16);
  v14 = &v21;
  std::string::basic_string[abi:ne180100]((uint64_t)&v21, v13 + 1);
  if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v14 = (std::string *)v21.__r_.__value_.__r.__words[0];
  if (v13)
  {
    v17 = *(char **)(v12 + 8);
    v16 = (char *)(v12 + 8);
    v15 = v17;
    if (v16[23] >= 0)
      v18 = v16;
    else
      v18 = v15;
    memmove(v14, v18, v13);
  }
  *(_WORD *)((char *)&v14->__r_.__value_.__l.__data_ + v13) = 46;
  v19 = std::string::append(&v21, "person_pid");
  v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  __p.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  mlcore::EntityClass::setPropertyForName(v9, v10, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
}

void sub_20A79EEA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

mlcore::PersonTable *_ZNSt3__115allocate_sharedB8ne180100IN6mlcore11PersonTableENS_9allocatorIS2_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(mlcore::PersonTable **a1)
{
  _QWORD *v2;
  mlcore::PersonTable *result;

  v2 = operator new(0x3A8uLL);
  v2[1] = 0;
  v2[2] = 0;
  *v2 = &off_24C33C398;
  result = mlcore::PersonTable::PersonTable((mlcore::PersonTable *)(v2 + 3));
  *a1 = result;
  a1[1] = (mlcore::PersonTable *)v2;
  return result;
}

void sub_20A79EFA0(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<mlcore::PersonTable>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C33C398;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<mlcore::PersonTable>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C33C398;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x20BD27AFCLL);
}

uint64_t std::__shared_ptr_emplace<mlcore::PersonTable>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__shared_ptr_emplace<mlcore::Person>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C33D400;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<mlcore::Person>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C33D400;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x20BD27AFCLL);
}

uint64_t std::__shared_ptr_emplace<mlcore::Person>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::PersonPropertyCloudIdentifier(void)::$_0 &&>>()
{
  uint64_t v0;
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  mlcore::PersonTable **v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  std::string *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  std::string *v19;
  __int128 v20;
  std::string v21;
  std::string __str;
  _QWORD v23[2];

  v0 = operator new();
  v1 = (_QWORD *)mediaplatform::Singleton<mlcore::PersonTable>::sharedInstance();
  v2 = (std::__shared_weak_count *)v1[1];
  v23[0] = *v1;
  v23[1] = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  v5 = (mlcore::PersonTable **)mediaplatform::Singleton<mlcore::PersonTable>::sharedInstance();
  mlcore::PersonTable::cloudIdentifierColumn(*v5, (uint64_t)&__str);
  mlcore::DatabaseModelProperty<std::string>::DatabaseModelProperty(v0, v23, (uint64_t)&__str);
  mlcore::PersonPropertyCloudIdentifier(void)::property = v0;
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&__str);
  if (v2)
  {
    v6 = (unint64_t *)&v2->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v8 = mlcore::PersonPropertyCloudIdentifier(void)::property;
  std::string::basic_string[abi:ne180100]<0>(&__str, "");
  std::string::operator=((std::string *)(v8 + 40), &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  v9 = mlcore::TypedEntityClass<mlcore::Person>::sharedPointer();
  v10 = mlcore::PersonPropertyCloudIdentifier(void)::property;
  v11 = mediaplatform::Singleton<mlcore::PersonTable>::sharedInstance();
  v12 = *(_QWORD *)v11;
  if (*(char *)(*(_QWORD *)v11 + 31) >= 0)
    v13 = *(unsigned __int8 *)(*(_QWORD *)v11 + 31);
  else
    v13 = *(_QWORD *)(*(_QWORD *)v11 + 16);
  v14 = &v21;
  std::string::basic_string[abi:ne180100]((uint64_t)&v21, v13 + 1);
  if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v14 = (std::string *)v21.__r_.__value_.__r.__words[0];
  if (v13)
  {
    v17 = *(char **)(v12 + 8);
    v16 = (char *)(v12 + 8);
    v15 = v17;
    if (v16[23] >= 0)
      v18 = v16;
    else
      v18 = v15;
    memmove(v14, v18, v13);
  }
  *(_WORD *)((char *)&v14->__r_.__value_.__l.__data_ + v13) = 46;
  v19 = std::string::append(&v21, "cloud_id");
  v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  __str.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  mlcore::EntityClass::setPropertyForName(v9, v10, &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
}

void sub_20A79F224(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::PersonPropertyHandle(void)::$_0 &&>>()
{
  uint64_t v0;
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  mlcore::PersonTable **v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  std::string *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  std::string *v19;
  __int128 v20;
  std::string v21;
  std::string __str;
  _QWORD v23[2];

  v0 = operator new();
  v1 = (_QWORD *)mediaplatform::Singleton<mlcore::PersonTable>::sharedInstance();
  v2 = (std::__shared_weak_count *)v1[1];
  v23[0] = *v1;
  v23[1] = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  v5 = (mlcore::PersonTable **)mediaplatform::Singleton<mlcore::PersonTable>::sharedInstance();
  mlcore::PersonTable::handleColumn(*v5, (uint64_t)&__str);
  mlcore::DatabaseModelProperty<std::string>::DatabaseModelProperty(v0, v23, (uint64_t)&__str);
  mlcore::PersonPropertyHandle(void)::property = v0;
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&__str);
  if (v2)
  {
    v6 = (unint64_t *)&v2->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v8 = mlcore::PersonPropertyHandle(void)::property;
  std::string::basic_string[abi:ne180100]<0>(&__str, "");
  std::string::operator=((std::string *)(v8 + 40), &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  v9 = mlcore::TypedEntityClass<mlcore::Person>::sharedPointer();
  v10 = mlcore::PersonPropertyHandle(void)::property;
  v11 = mediaplatform::Singleton<mlcore::PersonTable>::sharedInstance();
  v12 = *(_QWORD *)v11;
  if (*(char *)(*(_QWORD *)v11 + 31) >= 0)
    v13 = *(unsigned __int8 *)(*(_QWORD *)v11 + 31);
  else
    v13 = *(_QWORD *)(*(_QWORD *)v11 + 16);
  v14 = &v21;
  std::string::basic_string[abi:ne180100]((uint64_t)&v21, v13 + 1);
  if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v14 = (std::string *)v21.__r_.__value_.__r.__words[0];
  if (v13)
  {
    v17 = *(char **)(v12 + 8);
    v16 = (char *)(v12 + 8);
    v15 = v17;
    if (v16[23] >= 0)
      v18 = v16;
    else
      v18 = v15;
    memmove(v14, v18, v13);
  }
  *(_WORD *)((char *)&v14->__r_.__value_.__l.__data_ + v13) = 46;
  v19 = std::string::append(&v21, "handle");
  v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  __str.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  mlcore::EntityClass::setPropertyForName(v9, v10, &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
}

void sub_20A79F4A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::PersonPropertyName(void)::$_0 &&>>()
{
  uint64_t v0;
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  mlcore::PersonTable **v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  std::string *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  std::string *v19;
  __int128 v20;
  std::string v21;
  std::string __str;
  _QWORD v23[2];

  v0 = operator new();
  v1 = (_QWORD *)mediaplatform::Singleton<mlcore::PersonTable>::sharedInstance();
  v2 = (std::__shared_weak_count *)v1[1];
  v23[0] = *v1;
  v23[1] = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  v5 = (mlcore::PersonTable **)mediaplatform::Singleton<mlcore::PersonTable>::sharedInstance();
  mlcore::PersonTable::nameColumn(*v5, (uint64_t)&__str);
  mlcore::DatabaseModelProperty<std::string>::DatabaseModelProperty(v0, v23, (uint64_t)&__str);
  mlcore::PersonPropertyName(void)::property = v0;
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&__str);
  if (v2)
  {
    v6 = (unint64_t *)&v2->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v8 = mlcore::PersonPropertyName(void)::property;
  std::string::basic_string[abi:ne180100]<0>(&__str, "");
  std::string::operator=((std::string *)(v8 + 40), &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  v9 = mlcore::TypedEntityClass<mlcore::Person>::sharedPointer();
  v10 = mlcore::PersonPropertyName(void)::property;
  v11 = mediaplatform::Singleton<mlcore::PersonTable>::sharedInstance();
  v12 = *(_QWORD *)v11;
  if (*(char *)(*(_QWORD *)v11 + 31) >= 0)
    v13 = *(unsigned __int8 *)(*(_QWORD *)v11 + 31);
  else
    v13 = *(_QWORD *)(*(_QWORD *)v11 + 16);
  v14 = &v21;
  std::string::basic_string[abi:ne180100]((uint64_t)&v21, v13 + 1);
  if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v14 = (std::string *)v21.__r_.__value_.__r.__words[0];
  if (v13)
  {
    v17 = *(char **)(v12 + 8);
    v16 = (char *)(v12 + 8);
    v15 = v17;
    if (v16[23] >= 0)
      v18 = v16;
    else
      v18 = v15;
    memmove(v14, v18, v13);
  }
  *(_WORD *)((char *)&v14->__r_.__value_.__l.__data_ + v13) = 46;
  v19 = std::string::append(&v21, "name");
  v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  __str.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  mlcore::EntityClass::setPropertyForName(v9, v10, &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
}

void sub_20A79F724(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::PersonPropertyImageURL(void)::$_0 &&>>()
{
  uint64_t v0;
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  mlcore::PersonTable **v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  std::string *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  std::string *v19;
  __int128 v20;
  std::string v21;
  std::string __str;
  _QWORD v23[2];

  v0 = operator new();
  v1 = (_QWORD *)mediaplatform::Singleton<mlcore::PersonTable>::sharedInstance();
  v2 = (std::__shared_weak_count *)v1[1];
  v23[0] = *v1;
  v23[1] = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  v5 = (mlcore::PersonTable **)mediaplatform::Singleton<mlcore::PersonTable>::sharedInstance();
  mlcore::PersonTable::imageURLColumn(*v5, (uint64_t)&__str);
  mlcore::DatabaseModelProperty<std::string>::DatabaseModelProperty(v0, v23, (uint64_t)&__str);
  mlcore::PersonPropertyImageURL(void)::property = v0;
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&__str);
  if (v2)
  {
    v6 = (unint64_t *)&v2->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v8 = mlcore::PersonPropertyImageURL(void)::property;
  std::string::basic_string[abi:ne180100]<0>(&__str, "");
  std::string::operator=((std::string *)(v8 + 40), &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  v9 = mlcore::TypedEntityClass<mlcore::Person>::sharedPointer();
  v10 = mlcore::PersonPropertyImageURL(void)::property;
  v11 = mediaplatform::Singleton<mlcore::PersonTable>::sharedInstance();
  v12 = *(_QWORD *)v11;
  if (*(char *)(*(_QWORD *)v11 + 31) >= 0)
    v13 = *(unsigned __int8 *)(*(_QWORD *)v11 + 31);
  else
    v13 = *(_QWORD *)(*(_QWORD *)v11 + 16);
  v14 = &v21;
  std::string::basic_string[abi:ne180100]((uint64_t)&v21, v13 + 1);
  if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v14 = (std::string *)v21.__r_.__value_.__r.__words[0];
  if (v13)
  {
    v17 = *(char **)(v12 + 8);
    v16 = (char *)(v12 + 8);
    v15 = v17;
    if (v16[23] >= 0)
      v18 = v16;
    else
      v18 = v15;
    memmove(v14, v18, v13);
  }
  *(_WORD *)((char *)&v14->__r_.__value_.__l.__data_ + v13) = 46;
  v19 = std::string::append(&v21, "image_url");
  v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  __str.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  mlcore::EntityClass::setPropertyForName(v9, v10, &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
}

void sub_20A79F9A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

uint64_t mlcore::PersonPropertyImageToken(mlcore *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&mlcore::PersonPropertyImageToken(void)::once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&mlcore::PersonPropertyImageToken(void)::once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::PersonPropertyImageToken(void)::$_0 &&>>);
  }
  return mlcore::PersonPropertyImageToken(void)::property;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::PersonPropertyImageToken(void)::$_0 &&>>()
{
  uint64_t v0;
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  mlcore::PersonTable **v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  std::string *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  std::string *v19;
  __int128 v20;
  std::string v21;
  std::string __str;
  _QWORD v23[2];

  v0 = operator new();
  v1 = (_QWORD *)mediaplatform::Singleton<mlcore::PersonTable>::sharedInstance();
  v2 = (std::__shared_weak_count *)v1[1];
  v23[0] = *v1;
  v23[1] = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  v5 = (mlcore::PersonTable **)mediaplatform::Singleton<mlcore::PersonTable>::sharedInstance();
  mlcore::PersonTable::imageTokenColumn(*v5, (uint64_t)&__str);
  mlcore::DatabaseModelProperty<std::string>::DatabaseModelProperty(v0, v23, (uint64_t)&__str);
  mlcore::PersonPropertyImageToken(void)::property = v0;
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&__str);
  if (v2)
  {
    v6 = (unint64_t *)&v2->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v8 = mlcore::PersonPropertyImageToken(void)::property;
  std::string::basic_string[abi:ne180100]<0>(&__str, "");
  std::string::operator=((std::string *)(v8 + 40), &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  v9 = mlcore::TypedEntityClass<mlcore::Person>::sharedPointer();
  v10 = mlcore::PersonPropertyImageToken(void)::property;
  v11 = mediaplatform::Singleton<mlcore::PersonTable>::sharedInstance();
  v12 = *(_QWORD *)v11;
  if (*(char *)(*(_QWORD *)v11 + 31) >= 0)
    v13 = *(unsigned __int8 *)(*(_QWORD *)v11 + 31);
  else
    v13 = *(_QWORD *)(*(_QWORD *)v11 + 16);
  v14 = &v21;
  std::string::basic_string[abi:ne180100]((uint64_t)&v21, v13 + 1);
  if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v14 = (std::string *)v21.__r_.__value_.__r.__words[0];
  if (v13)
  {
    v17 = *(char **)(v12 + 8);
    v16 = (char *)(v12 + 8);
    v15 = v17;
    if (v16[23] >= 0)
      v18 = v16;
    else
      v18 = v15;
    memmove(v14, v18, v13);
  }
  *(_WORD *)((char *)&v14->__r_.__value_.__l.__data_ + v13) = 46;
  v19 = std::string::append(&v21, "image_token");
  v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  __str.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  mlcore::EntityClass::setPropertyForName(v9, v10, &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
}

void sub_20A79FC80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<mlcore::PersonPropertyHasLightweightProfile(void)::$_0 &&>>()
{
  uint64_t v0;
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  mlcore::PersonTable **v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  std::string *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  std::string *v19;
  __int128 v20;
  std::string v21;
  std::string __p;
  char v23;
  _QWORD v24[2];

  v0 = operator new();
  v1 = (_QWORD *)mediaplatform::Singleton<mlcore::PersonTable>::sharedInstance();
  v2 = (std::__shared_weak_count *)v1[1];
  v24[0] = *v1;
  v24[1] = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  v5 = (mlcore::PersonTable **)mediaplatform::Singleton<mlcore::PersonTable>::sharedInstance();
  mlcore::PersonTable::lightweightProfileColumn(*v5, (uint64_t)&__p);
  mlcore::DatabaseModelProperty<int>::DatabaseModelProperty(v0, v24, (uint64_t)&__p);
  mlcore::PersonPropertyHasLightweightProfile(void)::property = v0;
  if (v23 < 0)
    operator delete((void *)__p.__r_.__value_.__l.__size_);
  if (v2)
  {
    v6 = (unint64_t *)&v2->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v8 = mlcore::PersonPropertyHasLightweightProfile(void)::property;
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  std::string::operator=((std::string *)(v8 + 40), &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v9 = mlcore::TypedEntityClass<mlcore::Person>::sharedPointer();
  v10 = mlcore::PersonPropertyHasLightweightProfile(void)::property;
  v11 = mediaplatform::Singleton<mlcore::PersonTable>::sharedInstance();
  v12 = *(_QWORD *)v11;
  if (*(char *)(*(_QWORD *)v11 + 31) >= 0)
    v13 = *(unsigned __int8 *)(*(_QWORD *)v11 + 31);
  else
    v13 = *(_QWORD *)(*(_QWORD *)v11 + 16);
  v14 = &v21;
  std::string::basic_string[abi:ne180100]((uint64_t)&v21, v13 + 1);
  if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v14 = (std::string *)v21.__r_.__value_.__r.__words[0];
  if (v13)
  {
    v17 = *(char **)(v12 + 8);
    v16 = (char *)(v12 + 8);
    v15 = v17;
    if (v16[23] >= 0)
      v18 = v16;
    else
      v18 = v15;
    memmove(v14, v18, v13);
  }
  *(_WORD *)((char *)&v14->__r_.__value_.__l.__data_ + v13) = 46;
  v19 = std::string::append(&v21, "lightweight_profile");
  v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  __p.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  mlcore::EntityClass::setPropertyForName(v9, v10, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
}

void sub_20A79FF08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

void mlcore::Person::cloudIdentifier(mlcore::Person *this@<X0>, std::string *a2@<X8>)
{
  unint64_t v4;

  v4 = mlcore::PersonPropertyCloudIdentifier(this);
  mlcore::Entity::valueForProperty<std::string>(a2, (uint64_t)this, v4);
}

void mlcore::Person::setCloudIdentifier(mlcore *a1, uint64_t a2)
{
  std::string::size_type v4;

  v4 = mlcore::PersonPropertyCloudIdentifier(a1);
  mlcore::Entity::setValueForProperty<std::string>((uint64_t)a1, a2, v4);
}

void mlcore::Person::handle(mlcore::Person *this@<X0>, std::string *a2@<X8>)
{
  unint64_t v4;

  v4 = mlcore::PersonPropertyHandle(this);
  mlcore::Entity::valueForProperty<std::string>(a2, (uint64_t)this, v4);
}

void mlcore::Person::setHandle(mlcore *a1, uint64_t a2)
{
  std::string::size_type v4;

  v4 = mlcore::PersonPropertyHandle(a1);
  mlcore::Entity::setValueForProperty<std::string>((uint64_t)a1, a2, v4);
}

void mlcore::Person::name(mlcore::Person *this@<X0>, std::string *a2@<X8>)
{
  unint64_t v4;

  v4 = mlcore::PersonPropertyName(this);
  mlcore::Entity::valueForProperty<std::string>(a2, (uint64_t)this, v4);
}

void mlcore::Person::setName(mlcore *a1, uint64_t a2)
{
  std::string::size_type v4;

  v4 = mlcore::PersonPropertyName(a1);
  mlcore::Entity::setValueForProperty<std::string>((uint64_t)a1, a2, v4);
}

void mlcore::Person::imageURL(mlcore::Person *this@<X0>, std::string *a2@<X8>)
{
  unint64_t v4;

  v4 = mlcore::PersonPropertyImageURL(this);
  mlcore::Entity::valueForProperty<std::string>(a2, (uint64_t)this, v4);
}

void mlcore::Person::setImageURL(mlcore *a1, uint64_t a2)
{
  std::string::size_type v4;

  v4 = mlcore::PersonPropertyImageURL(a1);
  mlcore::Entity::setValueForProperty<std::string>((uint64_t)a1, a2, v4);
}

void mlcore::Person::imageToken(mlcore::Person *this@<X0>, std::string *a2@<X8>)
{
  unint64_t v4;

  v4 = mlcore::PersonPropertyImageToken(this);
  mlcore::Entity::valueForProperty<std::string>(a2, (uint64_t)this, v4);
}

void mlcore::Person::setImageToken(mlcore *a1, uint64_t a2)
{
  std::string::size_type v4;

  v4 = mlcore::PersonPropertyImageToken(a1);
  mlcore::Entity::setValueForProperty<std::string>((uint64_t)a1, a2, v4);
}

uint64_t mlcore::Person::hasLightweightProfile(mlcore::Person *this)
{
  unint64_t HasLightweightProfile;

  HasLightweightProfile = mlcore::PersonPropertyHasLightweightProfile(this);
  return mlcore::Entity::valueForProperty<int>((uint64_t)this, HasLightweightProfile);
}

_QWORD *mlcore::Person::setHasLightweightProfile(mlcore::Person *this, int a2)
{
  _QWORD *result;
  unint64_t HasLightweightProfile;

  HasLightweightProfile = mlcore::PersonPropertyHasLightweightProfile(this);
  result = std::__hash_table<std::__hash_value_type<mlcore::ModelProperty<int> *,int>,std::__unordered_map_hasher<mlcore::ModelProperty<int> *,std::__hash_value_type<mlcore::ModelProperty<int> *,int>,std::hash<mlcore::ModelProperty<int> *>,std::equal_to<mlcore::ModelProperty<int> *>,true>,std::__unordered_map_equal<mlcore::ModelProperty<int> *,std::__hash_value_type<mlcore::ModelProperty<int> *,int>,std::equal_to<mlcore::ModelProperty<int> *>,std::hash<mlcore::ModelProperty<int> *>,true>,std::allocator<std::__hash_value_type<mlcore::ModelProperty<int> *,int>>>::__emplace_unique_key_args<mlcore::ModelProperty<int> *,std::piecewise_construct_t const&,std::tuple<mlcore::ModelProperty<int> * const&>,std::tuple<>>((uint64_t)this + 136, HasLightweightProfile, &HasLightweightProfile);
  *((_DWORD *)result + 6) = a2;
  return result;
}

uint64_t mlcore::MediaError::what(mlcore::MediaError *this)
{
  uint64_t result;

  result = (uint64_t)this + 128;
  if (*((char *)this + 151) < 0)
    return *(_QWORD *)result;
  return result;
}

void mlcore::MediaError::toString(mlcore::MediaError *this@<X0>, std::string *a2@<X8>)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  void *__p[2];
  char v9;

  v5 = mlcore::__category(this);
  (*(void (**)(void **__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v5 + 48))(__p, v5, *((unsigned int *)this + 2));
  v7 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)this - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL;
  v6 = *((_DWORD *)this + 2);
  mediaplatform::FormatString<char const*,int,std::string,std::string>(a2, (std::string *)"<{0}: ({1}) {2} \"{3}\">", (uint64_t)&v7, (uint64_t)&v6, (uint64_t)__p, (uint64_t)this + 40);
  if (v9 < 0)
    operator delete(__p[0]);
}

void sub_20A7A0328(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void `non-virtual thunk to'mlcore::MediaError::~MediaError(std::exception *this)
{
  std::exception *v2;

  this[-3].__vftable = (std::exception_vtbl *)off_24C335E70;
  v2 = this - 3;
  this->__vftable = (std::exception_vtbl *)&unk_24C335EA0;
  if (SHIBYTE(this[15].__vftable) < 0)
    operator delete(this[13].__vftable);
  mediaplatform::PlatformErrorCondition::~PlatformErrorCondition(this + 5);
  if (SHIBYTE(this[4].__vftable) < 0)
    operator delete(this[2].__vftable);
  std::exception::~exception(v2);
}

{
  std::exception *v2;

  this[-3].__vftable = (std::exception_vtbl *)off_24C335E70;
  v2 = this - 3;
  this->__vftable = (std::exception_vtbl *)&unk_24C335EA0;
  if (SHIBYTE(this[15].__vftable) < 0)
    operator delete(this[13].__vftable);
  mediaplatform::PlatformErrorCondition::~PlatformErrorCondition(this + 5);
  if (SHIBYTE(this[4].__vftable) < 0)
    operator delete(this[2].__vftable);
  std::exception::~exception(v2);
  JUMPOUT(0x20BD27AFCLL);
}

void `non-virtual thunk to'mlcore::MediaError::toString(mlcore::MediaError *this@<X0>, std::string *a2@<X8>)
{
  mlcore::MediaError::toString((mlcore::MediaError *)((char *)this - 24), a2);
}

void mediaplatform::FormatString<char const*,int,std::string,std::string>(std::string *a1, std::string *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD v6[4];

  v6[0] = a6;
  v6[1] = a5;
  v6[2] = a4;
  v6[3] = a3;
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  a1->__r_.__value_.__r.__words[0] = 0;
  mediaplatform::FormatImplementation<char const*,int,std::string,std::string>(a2, a1, 0, (uint64_t)v6);
}

void sub_20A7A0468(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void mediaplatform::FormatImplementation<char const*,int,std::string,std::string>(std::string *a1, std::string *a2, std::string::size_type a3, uint64_t a4)
{
  char v8;
  char *v9;
  std::string::size_type i;
  int v11;
  char *v12;
  const char *v13;
  const char *v14;
  const char *v15;
  std::string *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char *v27;
  int v28;
  uint64_t v29;
  char *v30;
  char *v31;
  unsigned __int8 *v32;
  int v33;
  std::runtime_error *exception;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  _BYTE v41[56];
  uint64_t v42;
  uint64_t v43;

  v8 = 0;
  v43 = *MEMORY[0x24BDAC8D0];
  v9 = (char *)a1;
  for (i = a3; ; ++i)
  {
    v39 = v9;
    if (*v9 == 123)
      break;
    if (!*v9)
    {
      std::string::resize(a2, i, 0);
      if (i != a3)
        mediaplatform::CopyFormatSectionToResult(a1, a2, a3, i - a3, v8 & 1);
      return;
    }
LABEL_7:
    ++v9;
  }
  v11 = v9[1];
  if (v11 == 123)
  {
    v39 = v9 + 1;
    v8 = 1;
    ++v9;
    goto LABEL_7;
  }
  if (v11 == 42)
  {
    v39 = v9 + 2;
    v28 = v9[2];
    if ((v28 - 48) > 9)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Invalid format string- missing numeric value.");
    }
    else
    {
      v29 = 0;
      v30 = v9 + 3;
      do
      {
        v31 = v30;
        v39 = v30;
        v29 = (v28 - 48) + 10 * v29;
        ++v30;
        v33 = *v31;
        v32 = (unsigned __int8 *)(v31 - 1);
        v28 = v33;
      }
      while ((v33 - 58) >= 0xFFFFFFF6);
      v39 = (char *)(v32 + 2);
      if (*(v30 - 1) == 125)
        mediaplatform::FormatterParameters<0ul,char const*,int,std::string,std::string>::formatOptionsAtIndex<char const*,int,std::string,std::string>(v29);
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Invalid format options reference: Must be of form {*<index>} but no trailing '}' found.");
    }
    __cxa_throw(exception, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
  }
  mediaplatform::FormatOptions::FormatOptions((uint64_t)&v35, (const char **)&v39);
  v12 = v39;
  switch(*((_QWORD *)&v35 + 1))
  {
    case 0:
      v13 = **(const char ***)(a4 + 24);
      v40 = (uint64_t)v13;
      if (v13)
        v13 = (const char *)strlen(v13);
      *(_QWORD *)v41 = v13;
      *(_OWORD *)&v41[8] = v35;
      *(_OWORD *)&v41[24] = v36;
      *(_OWORD *)&v41[40] = v37;
      v42 = v38;
      v14 = (const char *)*((_QWORD *)&v36 + 1);
      if (*((_QWORD *)&v36 + 1) <= (unint64_t)v13)
        v14 = v13;
      if ((_BYTE)v36)
        v15 = v14;
      else
        v15 = v13;
      mediaplatform::FormatImplementation<char const*,int,std::string,std::string>(v39, a2, &v15[i], a4);
      if ((a2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v16 = a2;
      else
        v16 = (std::string *)a2->__r_.__value_.__r.__words[0];
      mediaplatform::FormatOptions::justifyNativeValueOfLength<std::__wrap_iter<char *>,char const*>(&v35, (_BYTE *)v16 + i, (uint64_t)&v40);
      goto LABEL_58;
    case 1:
      mediaplatform::TypeFormatter<int,void>::TypeFormatter((uint64_t)&v40, **(_DWORD **)(a4 + 16), (uint64_t)&v35);
      if (v41[40] && !*(_BYTE *)(v40 + 48))
        v20 = 32;
      else
        v20 = 33;
      v24 = v20 - *(_QWORD *)&v41[32];
      if (*(_BYTE *)(v40 + 50) && v24 <= *(_QWORD *)(v40 + 24))
        v24 = *(_QWORD *)(v40 + 24);
      v25 = *((_QWORD *)&v36 + 1);
      if (*((_QWORD *)&v36 + 1) <= v24)
        v25 = v24;
      if ((_BYTE)v36)
        v26 = v25;
      else
        v26 = v24;
      mediaplatform::FormatImplementation<char const*,int,std::string,std::string>(v12, a2, v26 + i, a4);
      if ((a2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v27 = (char *)a2;
      else
        v27 = (char *)a2->__r_.__value_.__r.__words[0];
      mediaplatform::FormatOptions::justifyNativeValueOfLength<std::__wrap_iter<char *>,int>((char *)&v35, &v27[i], &v40);
      goto LABEL_58;
    case 2:
      v17 = *(_QWORD *)(a4 + 8);
      v40 = v17;
      *(_OWORD *)v41 = v35;
      *(_OWORD *)&v41[16] = v36;
      *(_OWORD *)&v41[32] = v37;
      *(_QWORD *)&v41[48] = v38;
      if (*(char *)(v17 + 23) < 0)
        v18 = *(_QWORD *)(v17 + 8);
      else
        v18 = *(unsigned __int8 *)(v17 + 23);
      v21 = *((_QWORD *)&v36 + 1);
      if (*((_QWORD *)&v36 + 1) <= v18)
        v21 = v18;
      if ((_BYTE)v36)
        v18 = v21;
      goto LABEL_41;
    case 3:
      v19 = *(_QWORD *)a4;
      v40 = v19;
      *(_OWORD *)v41 = v35;
      *(_OWORD *)&v41[16] = v36;
      *(_OWORD *)&v41[32] = v37;
      *(_QWORD *)&v41[48] = v38;
      if (*(char *)(v19 + 23) < 0)
        v18 = *(_QWORD *)(v19 + 8);
      else
        v18 = *(unsigned __int8 *)(v19 + 23);
      v22 = *((_QWORD *)&v36 + 1);
      if (*((_QWORD *)&v36 + 1) <= v18)
        v22 = v18;
      if ((_BYTE)v36)
        v18 = v22;
LABEL_41:
      mediaplatform::FormatImplementation<char const*,int,std::string,std::string>(v39, a2, v18 + i, a4);
      if ((a2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v23 = (char *)a2;
      else
        v23 = (char *)a2->__r_.__value_.__r.__words[0];
      mediaplatform::FormatOptions::justifyNativeValueOfLength<std::__wrap_iter<char *>,std::string>(&v35, &v23[i], (uint64_t)&v40);
LABEL_58:
      if (i != a3)
        mediaplatform::CopyFormatSectionToResult(a1, a2, a3, i - a3, v8 & 1);
      break;
    default:
      mediaplatform::FormatterParameters<4ul>::formatParameterAtIndex<mediaplatform::FormatterParameters<0ul,char const*,int,std::string,std::string>>();
  }
}

void sub_20A7A08B8(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void mediaplatform::FormatterParameters<0ul,char const*,int,std::string,std::string>::formatOptionsAtIndex<char const*,int,std::string,std::string>(uint64_t a1)
{
  std::runtime_error *exception;

  if (!a1)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Requested parameter is not an FormatOptions instance.");
    __cxa_throw(exception, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
  }
  mediaplatform::FormatterParameters<1ul,int,std::string,std::string>::formatOptionsAtIndex<char const*,int,std::string,std::string>(a1);
}

void sub_20A7A091C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

_BYTE *mediaplatform::FormatOptions::justifyNativeValueOfLength<std::__wrap_iter<char *>,char const*>(_BYTE *result, _BYTE *__dst, uint64_t a3)
{
  _BYTE *v3;
  size_t v4;
  size_t v5;
  _BYTE *v6;
  unint64_t v7;
  unint64_t v8;
  int v9;
  _BYTE *v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  _BYTE *v14;
  uint64_t v15;

  v3 = __dst;
  v4 = *(_QWORD *)(a3 + 8);
  v5 = v4;
  if (!result[16] || (v6 = result, v7 = *((_QWORD *)result + 3), v8 = v7 - v4, v7 <= v4))
  {
LABEL_9:
    if (v5)
      return memmove(v3, *(const void **)a3, v5);
    return result;
  }
  v9 = *(_DWORD *)result;
  if (*(_DWORD *)result)
  {
    if (v9 != 1)
    {
      if (v9 != 2)
        return result;
      if (v7 != v4)
      {
        do
        {
          *v3++ = result[52];
          --v8;
        }
        while (v8);
        v5 = *(_QWORD *)(a3 + 8);
      }
      goto LABEL_9;
    }
    v11 = v8 >> 1;
    if (v8 >= 2)
    {
      if (v11 <= 1)
        v12 = 1;
      else
        v12 = v8 >> 1;
      do
      {
        *v3++ = result[52];
        --v12;
      }
      while (v12);
      v5 = *(_QWORD *)(a3 + 8);
    }
    if (v5)
      result = memmove(v3, *(const void **)a3, v5);
    if (v8 != v11)
    {
      v13 = v8 - (v8 >> 1);
      v14 = &v3[v4];
      if (v13 <= 1)
        v13 = 1;
      v15 = -(uint64_t)v13;
      do
        *v14++ = v6[52];
      while (!__CFADD__(v15++, 1));
    }
  }
  else
  {
    if (v4)
      result = memmove(__dst, *(const void **)a3, *(_QWORD *)(a3 + 8));
    if (v7 != v4)
    {
      v10 = &v3[v4];
      do
      {
        *v10++ = v6[52];
        --v8;
      }
      while (v8);
    }
  }
  return result;
}

void mediaplatform::FormatterParameters<4ul>::formatParameterAtIndex<mediaplatform::FormatterParameters<0ul,char const*,int,std::string,std::string>>()
{
  std::runtime_error *exception;

  exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
  std::runtime_error::runtime_error(exception, "Parameter index out of bounds.");
  __cxa_throw(exception, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
}

void sub_20A7A0AAC(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void mediaplatform::FormatterParameters<1ul,int,std::string,std::string>::formatOptionsAtIndex<char const*,int,std::string,std::string>(uint64_t a1)
{
  std::runtime_error *exception;

  if (a1 == 1)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Requested parameter is not an FormatOptions instance.");
    __cxa_throw(exception, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
  }
  mediaplatform::FormatterParameters<2ul,std::string,std::string>::formatOptionsAtIndex<char const*,int,std::string,std::string>(a1);
}

void sub_20A7A0B08(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void mediaplatform::FormatterParameters<2ul,std::string,std::string>::formatOptionsAtIndex<char const*,int,std::string,std::string>(uint64_t a1)
{
  std::runtime_error *exception;

  if (a1 == 2)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Requested parameter is not an FormatOptions instance.");
    __cxa_throw(exception, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
  }
  mediaplatform::FormatterParameters<3ul,std::string>::formatOptionsAtIndex<char const*,int,std::string,std::string>(a1);
}

void sub_20A7A0B64(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void mediaplatform::FormatterParameters<3ul,std::string>::formatOptionsAtIndex<char const*,int,std::string,std::string>(uint64_t a1)
{
  std::runtime_error *exception;

  if (a1 == 3)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Requested parameter is not an FormatOptions instance.");
    __cxa_throw(exception, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
  }
  mediaplatform::FormatterParameters<4ul>::formatOptionsAtIndex<char const*,int,std::string,std::string>();
}

void sub_20A7A0BC0(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void mediaplatform::FormatterParameters<4ul>::formatOptionsAtIndex<char const*,int,std::string,std::string>()
{
  std::runtime_error *exception;

  exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
  std::runtime_error::runtime_error(exception, "Parameter index out of bounds.");
  __cxa_throw(exception, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
}

void sub_20A7A0C10(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void mlcore::MediaErrorCategory::~MediaErrorCategory(std::error_category *this)
{
  std::error_category::~error_category(this);
  JUMPOUT(0x20BD27AFCLL);
}

const char *mlcore::MediaErrorCategory::name(mlcore::MediaErrorCategory *this)
{
  return "MediaLibrary";
}

mlcore::MediaError *mlcore::MediaError::MediaError(mlcore::MediaError *this, const mediaplatform::PlatformErrorCondition *a2)
{
  uint64_t v4;
  mlcore *v5;
  uint64_t v6;
  std::string v8;

  v4 = mlcore::__category(this);
  *((_DWORD *)this + 2) = 3;
  *(_QWORD *)this = off_24C335E70;
  *((_QWORD *)this + 2) = v4;
  *((_QWORD *)this + 3) = &unk_24C335EA0;
  *((_DWORD *)this + 8) = 3;
  std::error_condition::message(&v8, (const std::error_condition *)((char *)a2 + 8));
  mediaplatform::FormatString<std::string,std::string>((std::string *)((char *)this + 40), (std::string *)"Platform error. {0} {1}", (uint64_t)&v8, (uint64_t)a2 + 40);
  if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v8.__r_.__value_.__l.__data_);
  v5 = mediaplatform::PlatformErrorCondition::PlatformErrorCondition((mlcore::MediaError *)((char *)this + 64), a2);
  v6 = mlcore::__category(v5);
  (*(void (**)(std::string *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v6 + 48))(&v8, v6, 3);
  mediaplatform::FormatString<std::string,std::string>((std::string *)((char *)this + 128), (std::string *)"{0} {1}", (uint64_t)&v8, (uint64_t)a2 + 40);
  if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v8.__r_.__value_.__l.__data_);
  return this;
}

void sub_20A7A0D48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;
  void **v16;
  std::exception *v17;

  if (a15 < 0)
    operator delete(__p);
  mediaplatform::PlatformErrorCondition::~PlatformErrorCondition(v17);
  if (*(char *)(v15 + 63) < 0)
    operator delete(*v16);
  std::exception::~exception((std::exception *)v15);
  _Unwind_Resume(a1);
}

uint64_t std::vector<mlcore::LocalizedSectionHeader>::__init_with_size[abi:ne180100]<mlcore::LocalizedSectionHeader*,mlcore::LocalizedSectionHeader*>(uint64_t result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  char *v10;
  std::string *v11;
  _QWORD v12[3];
  char v13;
  char *v14;
  char *v15;

  if (a4)
  {
    if (a4 >= 0x492492492492493)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v6 = (_QWORD *)result;
    v7 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<mlcore::LocalizedSectionHeader>>(a4);
    v8 = v7;
    *v6 = v7;
    v6[1] = v7;
    v6[2] = &v7[56 * v9];
    v14 = v7;
    v15 = v7;
    v12[0] = v6 + 2;
    v12[1] = &v14;
    v12[2] = &v15;
    v13 = 0;
    if (a2 != a3)
    {
      v10 = v7;
      do
      {
        *(_QWORD *)v10 = *(_QWORD *)a2;
        *((_QWORD *)v10 + 1) = 0;
        *((_QWORD *)v10 + 2) = 0;
        *((_QWORD *)v10 + 3) = 0;
        std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)(v10 + 8), *(__int128 **)(a2 + 8), *(__int128 **)(a2 + 16), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 16) - *(_QWORD *)(a2 + 8)) >> 3));
        *((_QWORD *)v10 + 4) = 0;
        *((_QWORD *)v10 + 5) = 0;
        v11 = (std::string *)(v10 + 32);
        v11->__r_.__value_.__r.__words[2] = 0;
        std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v11, *(__int128 **)(a2 + 32), *(__int128 **)(a2 + 40), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 40) - *(_QWORD *)(a2 + 32)) >> 3));
        v10 = v15 + 56;
        v15 += 56;
        a2 += 56;
      }
      while (a2 != a3);
      v8 = v10;
    }
    v13 = 1;
    result = std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<mlcore::LocalizedSectionHeader>,mlcore::LocalizedSectionHeader*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
    v6[1] = v8;
  }
  return result;
}

void sub_20A7A0F10(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::vector<mlcore::LocalizedSectionHeader>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void std::vector<mlcore::LocalizedSectionHeader>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    std::vector<mlcore::LocalizedSectionHeader>::__base_destruct_at_end[abi:ne180100]((uint64_t)v2, (uint64_t)*v2);
    operator delete(**a1);
  }
}

_QWORD *std::shared_ptr<std::vector<mlcore::PropertyCache>>::shared_ptr[abi:ne180100]<std::vector<mlcore::PropertyCache>,void>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  void **v6;

  *a1 = a2;
  v4 = (_QWORD *)operator new();
  *v4 = &off_24C33D908;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  v6 = 0;
  std::unique_ptr<std::vector<mlcore::PropertyCache>>::reset[abi:ne180100](&v6);
  return a1;
}

void sub_20A7A0FF8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::vector<mlcore::PropertyCache>>::reset[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

__n128 std::vector<mlcore::Section>::__construct_one_at_end[abi:ne180100]<mlcore::Section const&>(uint64_t a1, __int128 *a2)
{
  uint64_t v4;
  __int128 v5;
  __n128 result;

  v4 = *(_QWORD *)(a1 + 8);
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(*(std::string **)(a1 + 8), *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v5 = *a2;
    *(_QWORD *)(v4 + 16) = *((_QWORD *)a2 + 2);
    *(_OWORD *)v4 = v5;
  }
  result = *(__n128 *)((char *)a2 + 24);
  *(_DWORD *)(v4 + 40) = *((_DWORD *)a2 + 10);
  *(__n128 *)(v4 + 24) = result;
  *(_QWORD *)(a1 + 8) = v4 + 48;
  return result;
}

void sub_20A7A1078(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<mlcore::Section>::__push_back_slow_path<mlcore::Section const&>(uint64_t a1, __int128 *a2)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  char *v9;
  std::string *v10;
  __int128 v11;
  char *v12;
  __int128 v13;
  uint64_t v14;
  _QWORD v16[2];
  std::string *v17;
  char *v18;
  uint64_t v19;

  v2 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 4);
  v3 = v2 + 1;
  if (v2 + 1 > 0x555555555555555)
    std::vector<std::string>::__throw_length_error[abi:ne180100]();
  v6 = a1 + 16;
  if (0x5555555555555556 * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 4) > v3)
    v3 = 0x5555555555555556 * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 4);
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 4) >= 0x2AAAAAAAAAAAAAALL)
    v7 = 0x555555555555555;
  else
    v7 = v3;
  v19 = v6;
  if (v7)
  {
    v9 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<mlcore::Section>>(v7);
  }
  else
  {
    v9 = 0;
    v8 = 0;
  }
  v10 = (std::string *)&v9[48 * v2];
  v16[0] = v9;
  v16[1] = v10;
  v17 = v10;
  v18 = &v9[48 * v8];
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v10, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
    v10 = v17;
  }
  else
  {
    v11 = *a2;
    v10->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&v10->__r_.__value_.__l.__data_ = v11;
  }
  v12 = &v9[48 * v2];
  v13 = *(__int128 *)((char *)a2 + 24);
  *((_DWORD *)v12 + 10) = *((_DWORD *)a2 + 10);
  *(_OWORD *)(v12 + 24) = v13;
  v17 = v10 + 2;
  std::vector<mlcore::Section>::__swap_out_circular_buffer((const std::string::value_type ***)a1, v16);
  v14 = *(_QWORD *)(a1 + 8);
  std::__split_buffer<mlcore::Section>::~__split_buffer((uint64_t)v16);
  return v14;
}

void sub_20A7A11A4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<mlcore::Section>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::allocate_shared[abi:ne180100]<mlcore::EntityCache,std::allocator<mlcore::EntityCache>,std::shared_ptr<mlcore::Transaction> &,void>(_QWORD *a1, uint64_t a2, std::__shared_weak_count *a3)
{
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  _QWORD v13[2];

  v6 = operator new(0xF0uLL);
  v7 = v6;
  v6[1] = 0;
  v6[2] = 0;
  *v6 = &off_24C33C280;
  v8 = v6 + 3;
  v13[0] = a2;
  v13[1] = a3;
  if (a3)
  {
    p_shared_owners = (unint64_t *)&a3->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  mlcore::EntityCache::EntityCache((uint64_t)(v6 + 3), v13);
  if (a3)
  {
    v11 = (unint64_t *)&a3->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))a3->__on_zero_shared)(a3);
      std::__shared_weak_count::__release_weak(a3);
    }
  }
  *a1 = v8;
  a1[1] = v7;
}

void sub_20A7A1274(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__shared_weak_count *v9;
  void *v11;

  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::__shared_weak_count::~__shared_weak_count(v9);
  operator delete(v11);
  _Unwind_Resume(a1);
}

void mlcore::LocalizedSectionsInfo::~LocalizedSectionsInfo(void **this)
{
  void **v2;

  if (*((char *)this + 71) < 0)
    operator delete(this[6]);
  v2 = this + 3;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  v2 = this;
  std::vector<mlcore::LocalizedSectionHeader>::__destroy_vector::operator()[abi:ne180100](&v2);
}

void std::__shared_ptr_emplace<std::vector<mlcore::Section>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C33D6D8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<std::vector<mlcore::Section>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C33D6D8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x20BD27AFCLL);
}

void std::__shared_ptr_emplace<std::vector<mlcore::Section>>::__on_zero_shared(uint64_t a1)
{
  void **v1;

  v1 = (void **)(a1 + 24);
  std::vector<mlcore::Section>::__destroy_vector::operator()[abi:ne180100](&v1);
}

void std::vector<mlcore::Section>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void **v2;
  void **v4;
  void *v5;

  v1 = *a1;
  v2 = (void **)**a1;
  if (v2)
  {
    v4 = (void **)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        if (*((char *)v4 - 25) < 0)
          operator delete(*(v4 - 6));
        v4 -= 6;
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::__shared_ptr_emplace<mlcore::EntityCache>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C33C280;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<mlcore::EntityCache>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C33C280;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x20BD27AFCLL);
}

void std::__shared_ptr_emplace<mlcore::EntityQueryResult>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C33CD38;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<mlcore::EntityQueryResult>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C33CD38;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x20BD27AFCLL);
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<mlcore::Section>>(unint64_t a1)
{
  if (a1 >= 0x555555555555556)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(48 * a1);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<mlcore::Section>,std::reverse_iterator<mlcore::Section*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  uint64_t v3;
  uint64_t v4;

  if (!*(_BYTE *)(a1 + 24))
  {
    v3 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
    v4 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
    while (v3 != v4)
    {
      if (*(char *)(v3 + 23) < 0)
        operator delete(*(void **)v3);
      v3 += 48;
    }
  }
  return a1;
}

void std::__function::__func<mlcore::EntityQuery::_perform(std::shared_ptr<mlcore::Transaction>,std::function<void ()(std::shared_ptr<mlcore::QueryResult>)>)::$_0,std::allocator<mlcore::EntityQuery::_perform(std::shared_ptr<mlcore::Transaction>,std::function<void ()(std::shared_ptr<mlcore::QueryResult>)>)::$_0>,void ()(mediaplatform::DatabaseResultList,BOOL &)>::~__func()
{
  JUMPOUT(0x20BD27AFCLL);
}

__n128 std::__function::__func<mlcore::EntityQuery::_perform(std::shared_ptr<mlcore::Transaction>,std::function<void ()(std::shared_ptr<mlcore::QueryResult>)>)::$_0,std::allocator<mlcore::EntityQuery::_perform(std::shared_ptr<mlcore::Transaction>,std::function<void ()(std::shared_ptr<mlcore::QueryResult>)>)::$_0>,void ()(mediaplatform::DatabaseResultList,BOOL &)>::__clone(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __n128 result;
  __int128 v4;
  __int128 v5;

  *(_QWORD *)a2 = &off_24C33AD78;
  v2 = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  result = *(__n128 *)(a1 + 40);
  v4 = *(_OWORD *)(a1 + 56);
  v5 = *(_OWORD *)(a1 + 72);
  *(_OWORD *)(a2 + 88) = *(_OWORD *)(a1 + 88);
  *(_OWORD *)(a2 + 72) = v5;
  *(_OWORD *)(a2 + 56) = v4;
  *(__n128 *)(a2 + 40) = result;
  return result;
}

uint64_t std::__function::__func<mlcore::EntityQuery::_perform(std::shared_ptr<mlcore::Transaction>,std::function<void ()(std::shared_ptr<mlcore::QueryResult>)>)::$_0,std::allocator<mlcore::EntityQuery::_perform(std::shared_ptr<mlcore::Transaction>,std::function<void ()(std::shared_ptr<mlcore::QueryResult>)>)::$_0>,void ()(mediaplatform::DatabaseResultList,BOOL &)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN6mlcore11EntityQuery8_performENSt3__110shared_ptrINS_11TransactionEEENS1_8functionIFvNS2_INS_11QueryResultEEEEEEE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<mlcore::EntityQuery::_perform(std::shared_ptr<mlcore::Transaction>,std::function<void ()(std::shared_ptr<mlcore::QueryResult>)>)::$_0,std::allocator<mlcore::EntityQuery::_perform(std::shared_ptr<mlcore::Transaction>,std::function<void ()(std::shared_ptr<mlcore::QueryResult>)>)::$_0>,void ()(mediaplatform::DatabaseResultList,BOOL &)>::target_type()
{
}

void ***std::unique_ptr<std::vector<mlcore::Section>>::reset[abi:ne180100](void ***result)
{
  void **v1;
  void **v2;

  v1 = *result;
  *result = 0;
  if (v1)
  {
    v2 = v1;
    std::vector<mlcore::Section>::__destroy_vector::operator()[abi:ne180100](&v2);
    JUMPOUT(0x20BD27AFCLL);
  }
  return result;
}

void std::__shared_ptr_pointer<std::vector<mlcore::Section> *,std::shared_ptr<std::vector<mlcore::Section>>::__shared_ptr_default_delete<std::vector<mlcore::Section>,std::vector<mlcore::Section>>,std::allocator<std::vector<mlcore::Section>>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x20BD27AFCLL);
}

uint64_t std::__shared_ptr_pointer<std::vector<mlcore::Section> *,std::shared_ptr<std::vector<mlcore::Section>>::__shared_ptr_default_delete<std::vector<mlcore::Section>,std::vector<mlcore::Section>>,std::allocator<std::vector<mlcore::Section>>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), 0x800000020A9178E7))
    return a1 + 24;
  else
    return 0;
}

void **std::default_delete<std::vector<mlcore::Section>>::operator()[abi:ne180100](void **result)
{
  void **v1;

  if (result)
  {
    v1 = result;
    std::vector<mlcore::Section>::__destroy_vector::operator()[abi:ne180100](&v1);
    JUMPOUT(0x20BD27AFCLL);
  }
  return result;
}

void ***std::unique_ptr<std::vector<mlcore::PropertyCache>>::reset[abi:ne180100](void ***result)
{
  void **v1;
  void **v2;

  v1 = *result;
  *result = 0;
  if (v1)
  {
    v2 = v1;
    std::vector<mlcore::PropertyCache>::__destroy_vector::operator()[abi:ne180100](&v2);
    JUMPOUT(0x20BD27AFCLL);
  }
  return result;
}

void std::__shared_ptr_pointer<std::vector<mlcore::PropertyCache> *,std::shared_ptr<std::vector<mlcore::PropertyCache>>::__shared_ptr_default_delete<std::vector<mlcore::PropertyCache>,std::vector<mlcore::PropertyCache>>,std::allocator<std::vector<mlcore::PropertyCache>>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x20BD27AFCLL);
}

uint64_t std::__shared_ptr_pointer<std::vector<mlcore::PropertyCache> *,std::shared_ptr<std::vector<mlcore::PropertyCache>>::__shared_ptr_default_delete<std::vector<mlcore::PropertyCache>,std::vector<mlcore::PropertyCache>>,std::allocator<std::vector<mlcore::PropertyCache>>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), 0x800000020A91F8CELL))
    return a1 + 24;
  else
    return 0;
}

void std::vector<std::string>::__move_range(std::vector<std::string> *this, std::vector<std::string>::pointer __from_s, std::vector<std::string>::pointer __from_e, std::vector<std::string>::pointer __to)
{
  std::string *end;
  char *v6;
  std::string *v7;
  __int128 v8;
  std::string *v9;
  uint64_t v10;
  __int128 *v11;
  __int128 v12;

  end = this->__end_;
  v6 = (char *)__from_s + (char *)end - (char *)__to;
  v7 = end;
  while (v6 < (char *)__from_e)
  {
    v8 = *(_OWORD *)v6;
    v7->__r_.__value_.__r.__words[2] = *((_QWORD *)v6 + 2);
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v8;
    ++v7;
    *((_QWORD *)v6 + 1) = 0;
    *((_QWORD *)v6 + 2) = 0;
    *(_QWORD *)v6 = 0;
    v6 += 24;
  }
  this->__end_ = v7;
  if (end != __to)
  {
    v9 = end - 1;
    v10 = 8 * (((char *)end - (char *)__to) >> 3);
    do
    {
      if (SHIBYTE(v9->__r_.__value_.__r.__words[2]) < 0)
        operator delete(v9->__r_.__value_.__l.__data_);
      v11 = (__int128 *)((char *)&__from_s[-1] + v10);
      v12 = *v11;
      v9->__r_.__value_.__r.__words[2] = __from_s->__r_.__value_.__r.__words[(unint64_t)v10 / 8 - 1];
      *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v12;
      --v9;
      __from_s->__r_.__value_.__s.__data_[v10 - 1] = 0;
      *(_BYTE *)v11 = 0;
      v10 -= 24;
    }
    while (v10);
  }
}

void std::__shared_ptr_emplace<std::vector<std::string>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C33D710;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<std::vector<std::string>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C33D710;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x20BD27AFCLL);
}

void std::vector<mlcore::LocalizedSectionHeader>::__base_destruct_at_end[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t i;
  void **v5;

  for (i = *(_QWORD *)(a1 + 8); i != a2; i -= 56)
  {
    v5 = (void **)(i - 24);
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v5);
    v5 = (void **)(i - 48);
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v5);
  }
  *(_QWORD *)(a1 + 8) = a2;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<mlcore::LocalizedSectionHeader>,mlcore::LocalizedSectionHeader*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t i;
  void **v7;

  if (!*(_BYTE *)(a1 + 24))
  {
    v3 = *(uint64_t **)(a1 + 8);
    v2 = *(uint64_t **)(a1 + 16);
    v4 = *v2;
    for (i = *v3; v4 != i; v4 -= 56)
    {
      v7 = (void **)(v4 - 24);
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v7);
      v7 = (void **)(v4 - 48);
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v7);
    }
  }
  return a1;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<mlcore::LocalizedSectionHeader>>(unint64_t a1)
{
  if (a1 >= 0x492492492492493)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(56 * a1);
}

_QWORD *std::vector<mlcore::SortDescriptor>::vector[abi:ne180100](_QWORD *a1, uint64_t a2, unint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a3)
  {
    std::vector<mlcore::SortDescriptor>::__vallocate[abi:ne180100](a1, a3);
    v6 = a1[1];
    v7 = 24 * a3;
    v8 = (uint64_t *)(a2 + 8);
    do
    {
      *(_QWORD *)v6 = &off_24C337670;
      v9 = *v8;
      *(_DWORD *)(v6 + 16) = *((_DWORD *)v8 + 2);
      *(_QWORD *)(v6 + 8) = v9;
      v6 += 24;
      v8 += 3;
      v7 -= 24;
    }
    while (v7);
    a1[1] = v6;
  }
  return a1;
}

void sub_20A7A1A90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<mlcore::SortDescriptor>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void std::allocate_shared[abi:ne180100]<mlcore::EntityQuery,std::allocator<mlcore::EntityQuery>,mlcore::EntityClass *,std::shared_ptr<mlcore::Predicate> &,void>(_QWORD *a1, uint64_t a2, uint64_t a3, std::__shared_weak_count *a4)
{
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15[2];

  v8 = operator new(0x98uLL);
  v9 = v8;
  v8[1] = 0;
  v8[2] = 0;
  *v8 = &off_24C33C2B8;
  v10 = v8 + 3;
  v15[0] = a3;
  v15[1] = (uint64_t)a4;
  if (a4)
  {
    p_shared_owners = (unint64_t *)&a4->__shared_owners_;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
  }
  mlcore::EntityQuery::EntityQuery(v8 + 3, a2, v15);
  if (a4)
  {
    v13 = (unint64_t *)&a4->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))a4->__on_zero_shared)(a4);
      std::__shared_weak_count::__release_weak(a4);
    }
  }
  *a1 = v10;
  a1[1] = v9;
}

void sub_20A7A1B68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__shared_weak_count *v9;
  void *v11;

  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::__shared_weak_count::~__shared_weak_count(v9);
  operator delete(v11);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<mlcore::EntityQuery>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C33C2B8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<mlcore::EntityQuery>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C33C2B8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x20BD27AFCLL);
}

void mlcore::EntityQuery::songsByAlbumQuery(mlcore *a1@<X0>, char **a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t *v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  __int128 *v11;
  char v12;
  uint64_t v13;
  char v14;
  __int128 v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  uint64_t i;
  mlcore *v22;
  char *v23;
  mlcore *v24;
  mlcore *v25;
  mlcore *v26;
  mlcore *HasTrackNumber;
  mlcore *v28;
  uint64_t v29;
  void **v30;
  uint64_t v31;
  void **v32;
  void *v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  __int128 **v37;
  void **v38;
  void **v39;
  __int128 *v40;
  __int128 *v41;
  __int128 *v42;
  uint64_t v43;
  uint64_t v44;
  void ***v45;
  std::__shared_weak_count *v46;
  uint64_t v47;
  mlcore *v48;
  uint64_t v49;
  void (**v50)(mlcore::SortDescriptor *__hidden);
  mlcore *v51;
  int v52;
  void (**v53)(mlcore::SortDescriptor *__hidden);
  mlcore *v54;
  int v55;
  void (**v56)(mlcore::SortDescriptor *__hidden);
  mlcore *v57;
  int v58;
  void (**v59)(mlcore::SortDescriptor *__hidden);
  mlcore *v60;
  int v61;
  void (**v62)(mlcore::SortDescriptor *__hidden);
  uint64_t v63;
  int v64;
  uint64_t v65;

  v65 = *MEMORY[0x24BDAC8D0];
  v4 = mlcore::ItemPropertyMediaType(a1);
  v47 = 0x40800000008;
  mlcore::CreateInPredicate<int>(&v43, v4, (int *)&v47, 2);
  v5 = mlcore::TypedEntityClass<mlcore::Item>::sharedPointer();
  v6 = (unint64_t *)*((_QWORD *)a1 + 1);
  v47 = *(_QWORD *)a1;
  v48 = (mlcore *)v6;
  if (v6)
  {
    v7 = v6 + 1;
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v49 = v43;
  v50 = (void (**)(mlcore::SortDescriptor *__hidden))v44;
  if (v44)
  {
    v9 = (unint64_t *)(v44 + 8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  v40 = 0;
  v41 = 0;
  v42 = 0;
  v37 = &v40;
  LOBYTE(v38) = 0;
  v11 = (__int128 *)operator new(0x20uLL);
  v12 = 0;
  v13 = 0;
  v40 = v11;
  v41 = v11;
  v42 = v11 + 2;
  do
  {
    v14 = v12;
    v15 = *((_OWORD *)&v47 + v13);
    *v11 = v15;
    if (*((_QWORD *)&v15 + 1))
    {
      v16 = (unint64_t *)(*((_QWORD *)&v15 + 1) + 8);
      do
        v17 = __ldxr(v16);
      while (__stxr(v17 + 1, v16));
    }
    ++v11;
    v12 = 1;
    v13 = 1;
  }
  while ((v14 & 1) == 0);
  v41 = v11;
  mlcore::CreateAndPredicate(&v40, &v45);
  std::allocate_shared[abi:ne180100]<mlcore::EntityQuery,std::allocator<mlcore::EntityQuery>,mlcore::EntityClass *,std::shared_ptr<mlcore::Predicate>,void>(a2, v5, (uint64_t *)&v45);
  v18 = v46;
  if (v46)
  {
    p_shared_owners = (unint64_t *)&v46->__shared_owners_;
    do
      v20 = __ldaxr(p_shared_owners);
    while (__stlxr(v20 - 1, p_shared_owners));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  v37 = &v40;
  std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v37);
  for (i = 16; i != -16; i -= 16)
    v22 = (mlcore *)std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)&v47 + i);
  v23 = *a2;
  v24 = (mlcore *)mlcore::ItemPropertyAlbumOrder(v22);
  v47 = (uint64_t)&off_24C337670;
  v48 = v24;
  LODWORD(v49) = 0;
  v25 = (mlcore *)mlcore::ItemPropertyAlbumPersistentID(v24);
  v50 = &off_24C337670;
  v51 = v25;
  v52 = 0;
  v26 = (mlcore *)mlcore::ItemPropertyDiscNumber(v25);
  v53 = &off_24C337670;
  v54 = v26;
  v55 = 0;
  HasTrackNumber = (mlcore *)mlcore::ItemPropertyHasTrackNumber(v26);
  v56 = &off_24C337670;
  v57 = HasTrackNumber;
  v58 = 1;
  v28 = (mlcore *)mlcore::ItemPropertyTrackNumber(HasTrackNumber);
  v59 = &off_24C337670;
  v60 = v28;
  v61 = 0;
  v29 = mlcore::ItemPropertyTitleOrder(v28);
  v62 = &off_24C337670;
  v63 = v29;
  v64 = 0;
  v38 = 0;
  v39 = 0;
  v37 = 0;
  v45 = (void ***)&v37;
  LOBYTE(v46) = 0;
  v30 = (void **)operator new(0x90uLL);
  v31 = 0;
  v37 = (__int128 **)v30;
  v39 = v30 + 18;
  do
  {
    v32 = &v30[v31];
    v33 = *(void **)((char *)&v47 + v31 * 8 + 8);
    *v32 = &off_24C337670;
    v32[1] = v33;
    *((_DWORD *)v32 + 4) = *(_DWORD *)((char *)&v49 + v31 * 8);
    v31 += 3;
  }
  while (v31 != 18);
  v38 = v30 + 18;
  mlcore::PropertiesQuery::setSortDescriptors(v23, (char *)&v37);
  v45 = (void ***)&v37;
  std::vector<mlcore::SortDescriptor>::__destroy_vector::operator()[abi:ne180100]((void ***)&v45);
  v34 = (std::__shared_weak_count *)v44;
  if (v44)
  {
    v35 = (unint64_t *)(v44 + 8);
    do
      v36 = __ldaxr(v35);
    while (__stlxr(v36 - 1, v35));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
  }
}

void sub_20A7A1E88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  uint64_t v8;
  uint64_t v10;
  va_list va;
  uint64_t v12;
  va_list va1;

  va_start(va1, a8);
  va_start(va, a8);
  v10 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  std::vector<mlcore::SortDescriptor>::__destroy_vector::operator()[abi:ne180100]((void ***)va1);
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100](v8);
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::allocate_shared[abi:ne180100]<mlcore::EntityQuery,std::allocator<mlcore::EntityQuery>,mlcore::EntityClass *,std::shared_ptr<mlcore::Predicate>,void>(_QWORD *a1, uint64_t a2, uint64_t *a3)
{
  char *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  uint64_t v10[2];

  v6 = (char *)operator new(0x98uLL);
  *(_OWORD *)(v6 + 8) = 0u;
  *(_QWORD *)v6 = &off_24C33C2B8;
  v7 = (std::__shared_weak_count *)a3[1];
  v10[0] = *a3;
  v10[1] = (uint64_t)v7;
  *(_OWORD *)a3 = 0u;
  mlcore::EntityQuery::EntityQuery((_QWORD *)v6 + 3, a2, v10);
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  *a1 = v6 + 24;
  a1[1] = v6;
}

void sub_20A7A1FD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__shared_weak_count *v9;
  void *v11;

  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::__shared_weak_count::~__shared_weak_count(v9);
  operator delete(v11);
  _Unwind_Resume(a1);
}

void mlcore::EntityQuery::songsByAlbumForArtistQuery(mlcore *a1@<X0>, char **a2@<X8>)
{
  uint64_t v4;
  std::__shared_weak_count_vtbl *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  _QWORD v9[2];

  v4 = mlcore::ItemPropertyAlbumArtistPersistentID(a1);
  v5 = *(std::__shared_weak_count_vtbl **)(*(_QWORD *)a1 + 224);
  v6 = (std::__shared_weak_count *)operator new(0x48uLL);
  *(_OWORD *)&v6->__shared_owners_ = 0u;
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  v6->__vftable = (std::__shared_weak_count_vtbl *)&off_24C33CE88;
  v6[1].__shared_owners_ = v4;
  v6[1].__shared_weak_owners_ = 0;
  v6[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_24C339CA8;
  v6[2].__vftable = v5;
  *(_OWORD *)&v6[2].__shared_owners_ = 0u;
  v9[0] = v6 + 1;
  v9[1] = v6;
  mlcore::EntityQuery::songsByAlbumQuery((mlcore *)v9, a2);
  do
    v8 = __ldaxr(p_shared_owners);
  while (__stlxr(v8 - 1, p_shared_owners));
  if (!v8)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
}

void sub_20A7A210C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void mlcore::EntityQuery::albumsForArtistQuery(mlcore *a1@<X0>, uint64_t *a2@<X1>, char **a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  _QWORD v23[2];
  char *v24;
  std::__shared_weak_count *v25;
  char *v26;
  std::__shared_weak_count *v27;

  v6 = mlcore::ItemPropertyAlbumArtistPersistentID(a1);
  v7 = *(_QWORD *)(*(_QWORD *)a1 + 224);
  v8 = (char *)operator new(0x48uLL);
  *(_QWORD *)v8 = &off_24C33CE88;
  *((_QWORD *)v8 + 4) = v6;
  *((_QWORD *)v8 + 5) = 0;
  *((_QWORD *)v8 + 3) = &unk_24C339CA8;
  *((_QWORD *)v8 + 6) = v7;
  *(_OWORD *)(v8 + 56) = 0u;
  v26 = v8 + 24;
  v27 = (std::__shared_weak_count *)v8;
  v24 = v8 + 24;
  v25 = (std::__shared_weak_count *)v8;
  *(_OWORD *)(v8 + 8) = 0u;
  v9 = (unint64_t *)(v8 + 8);
  do
    v10 = __ldxr(v9);
  while (__stxr(v10 + 1, v9));
  v11 = *a2;
  v12 = (std::__shared_weak_count *)a2[1];
  v23[0] = v11;
  v23[1] = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldxr(p_shared_owners);
    while (__stxr(v14 + 1, p_shared_owners));
  }
  mlcore::EntityQuery::albumsForArtistQueryWithPredicate((mlcore *)&v24, (uint64_t)v23, a3);
  if (v12)
  {
    v15 = (unint64_t *)&v12->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  v17 = v25;
  if (v25)
  {
    v18 = (unint64_t *)&v25->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  v20 = v27;
  if (v27)
  {
    v21 = (unint64_t *)&v27->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
}

void sub_20A7A22A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13)
{
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  _Unwind_Resume(a1);
}

void mlcore::EntityQuery::albumsForArtistQueryWithPredicate(mlcore *a1@<X0>, uint64_t a2@<X1>, char **a3@<X8>)
{
  mlcore *v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  uint64_t v10;
  unint64_t *v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  __int128 *v15;
  char v16;
  uint64_t v17;
  char v18;
  __int128 v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  uint64_t i;
  uint64_t v26;
  unint64_t *v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  __int128 *v32;
  char v33;
  uint64_t v34;
  char v35;
  __int128 v36;
  unint64_t *v37;
  unint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  uint64_t j;
  mlcore *v43;
  char *v44;
  mlcore *HasTitle;
  mlcore *v46;
  uint64_t v47;
  void **v48;
  uint64_t v49;
  void **v50;
  void (**v51)(mlcore::SortDescriptor *__hidden);
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  std::__shared_weak_count *v55;
  uint64_t *v56;
  unint64_t v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  __int128 **v61;
  void **v62;
  void **v63;
  __int128 *v64;
  __int128 *v65;
  __int128 *v66;
  _QWORD *v67;
  uint64_t v68;
  __int128 *v69;
  __int128 *v70;
  __int128 *v71;
  uint64_t v72;
  std::__shared_weak_count *v73;
  _QWORD *v74;
  std::__shared_weak_count *v75;
  __int128 v76;
  void (**v77)(mlcore::SortDescriptor *__hidden);
  mlcore *v78;
  _QWORD *v79;
  void (**v80)(mlcore::SortDescriptor *__hidden);
  mlcore *v81;
  int v82;
  void (**v83)(mlcore::SortDescriptor *__hidden);
  uint64_t v84;
  int v85;
  uint64_t v86;

  v86 = *MEMORY[0x24BDAC8D0];
  v6 = (mlcore *)mlcore::AlbumPropertyPersistentID(a1);
  v7 = mlcore::ItemPropertyAlbumPersistentID(v6);
  v8 = (std::__shared_weak_count *)operator new(0x38uLL);
  v8->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v8->__shared_owners_;
  v8->__shared_weak_owners_ = 0;
  v8->__vftable = (std::__shared_weak_count_vtbl *)&off_24C33D240;
  v8[1].__vftable = (std::__shared_weak_count_vtbl *)&off_24C33A5A8;
  v8[1].__shared_owners_ = (uint64_t)v6;
  v8[1].__shared_weak_owners_ = 0;
  v8[2].__vftable = (std::__shared_weak_count_vtbl *)v7;
  v74 = &v8[1].__vftable;
  v75 = v8;
  v10 = mlcore::TypedEntityClass<mlcore::Item>::sharedPointer();
  v11 = (unint64_t *)*((_QWORD *)a1 + 1);
  v77 = *(void (***)(mlcore::SortDescriptor *__hidden))a1;
  v78 = (mlcore *)v11;
  if (v11)
  {
    v12 = v11 + 1;
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  v79 = &v8[1].__vftable;
  v80 = (void (**)(mlcore::SortDescriptor *__hidden))v8;
  do
    v14 = __ldxr(p_shared_owners);
  while (__stxr(v14 + 1, p_shared_owners));
  v69 = 0;
  v70 = 0;
  v71 = 0;
  v61 = &v69;
  LOBYTE(v62) = 0;
  v15 = (__int128 *)operator new(0x20uLL);
  v16 = 0;
  v17 = 0;
  v69 = v15;
  v70 = v15;
  v71 = v15 + 2;
  do
  {
    v18 = v16;
    v19 = *(_OWORD *)&(&v77)[2 * v17];
    *v15 = v19;
    if (*((_QWORD *)&v19 + 1))
    {
      v20 = (unint64_t *)(*((_QWORD *)&v19 + 1) + 8);
      do
        v21 = __ldxr(v20);
      while (__stxr(v21 + 1, v20));
    }
    ++v15;
    v16 = 1;
    v17 = 1;
  }
  while ((v18 & 1) == 0);
  v70 = v15;
  mlcore::CreateAndPredicate(&v69, &v76);
  std::allocate_shared[abi:ne180100]<mlcore::Query,std::allocator<mlcore::Query>,mlcore::EntityClass *,std::shared_ptr<mlcore::Predicate>,void>(&v72, v10, &v76);
  v22 = (std::__shared_weak_count *)*((_QWORD *)&v76 + 1);
  if (*((_QWORD *)&v76 + 1))
  {
    v23 = (unint64_t *)(*((_QWORD *)&v76 + 1) + 8);
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  v61 = &v69;
  std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v61);
  for (i = 2; i != -2; i -= 2)
    std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)&(&v77)[i]);
  std::allocate_shared[abi:ne180100]<mlcore::ExistsPredicate,std::allocator<mlcore::ExistsPredicate>,std::shared_ptr<mlcore::Query> &,void>(&v67, v72, v73);
  v26 = mlcore::TypedEntityClass<mlcore::Album>::sharedPointer();
  v27 = *(unint64_t **)(a2 + 8);
  v77 = *(void (***)(mlcore::SortDescriptor *__hidden))a2;
  v78 = (mlcore *)v27;
  if (v27)
  {
    v28 = v27 + 1;
    do
      v29 = __ldxr(v28);
    while (__stxr(v29 + 1, v28));
  }
  v79 = v67;
  v80 = (void (**)(mlcore::SortDescriptor *__hidden))v68;
  if (v68)
  {
    v30 = (unint64_t *)(v68 + 8);
    do
      v31 = __ldxr(v30);
    while (__stxr(v31 + 1, v30));
  }
  v64 = 0;
  v65 = 0;
  v66 = 0;
  v61 = &v64;
  LOBYTE(v62) = 0;
  v32 = (__int128 *)operator new(0x20uLL);
  v33 = 0;
  v34 = 0;
  v64 = v32;
  v65 = v32;
  v66 = v32 + 2;
  do
  {
    v35 = v33;
    v36 = *(_OWORD *)&(&v77)[2 * v34];
    *v32 = v36;
    if (*((_QWORD *)&v36 + 1))
    {
      v37 = (unint64_t *)(*((_QWORD *)&v36 + 1) + 8);
      do
        v38 = __ldxr(v37);
      while (__stxr(v38 + 1, v37));
    }
    ++v32;
    v33 = 1;
    v34 = 1;
  }
  while ((v35 & 1) == 0);
  v65 = v32;
  mlcore::CreateAndPredicate(&v64, &v76);
  std::allocate_shared[abi:ne180100]<mlcore::EntityQuery,std::allocator<mlcore::EntityQuery>,mlcore::EntityClass *,std::shared_ptr<mlcore::Predicate>,void>(a3, v26, (uint64_t *)&v76);
  v39 = (std::__shared_weak_count *)*((_QWORD *)&v76 + 1);
  if (*((_QWORD *)&v76 + 1))
  {
    v40 = (unint64_t *)(*((_QWORD *)&v76 + 1) + 8);
    do
      v41 = __ldaxr(v40);
    while (__stlxr(v41 - 1, v40));
    if (!v41)
    {
      ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
      std::__shared_weak_count::__release_weak(v39);
    }
  }
  v61 = &v64;
  std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v61);
  for (j = 2; j != -2; j -= 2)
    v43 = (mlcore *)std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)&(&v77)[j]);
  v44 = *a3;
  HasTitle = (mlcore *)mlcore::AlbumPropertyHasTitle(v43);
  v77 = &off_24C337670;
  v78 = HasTitle;
  LODWORD(v79) = 1;
  v46 = (mlcore *)mlcore::AlbumPropertyOrder(HasTitle);
  v80 = &off_24C337670;
  v81 = v46;
  v82 = 0;
  v47 = mlcore::AlbumPropertyPersistentID(v46);
  v83 = &off_24C337670;
  v84 = v47;
  v85 = 0;
  v62 = 0;
  v63 = 0;
  v61 = 0;
  *(_QWORD *)&v76 = &v61;
  BYTE8(v76) = 0;
  v48 = (void **)operator new(0x48uLL);
  v49 = 0;
  v61 = (__int128 **)v48;
  v63 = v48 + 9;
  do
  {
    v50 = &v48[v49];
    v51 = (&v77)[v49 + 1];
    *v50 = &off_24C337670;
    v50[1] = v51;
    *((_DWORD *)v50 + 4) = (&v79)[v49];
    v49 += 3;
  }
  while (v49 != 9);
  v62 = v48 + 9;
  mlcore::PropertiesQuery::setSortDescriptors(v44, (char *)&v61);
  *(_QWORD *)&v76 = &v61;
  std::vector<mlcore::SortDescriptor>::__destroy_vector::operator()[abi:ne180100]((void ***)&v76);
  v52 = (std::__shared_weak_count *)v68;
  if (v68)
  {
    v53 = (unint64_t *)(v68 + 8);
    do
      v54 = __ldaxr(v53);
    while (__stlxr(v54 - 1, v53));
    if (!v54)
    {
      ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
      std::__shared_weak_count::__release_weak(v52);
    }
  }
  v55 = v73;
  if (v73)
  {
    v56 = &v73->__shared_owners_;
    do
      v57 = __ldaxr((unint64_t *)v56);
    while (__stlxr(v57 - 1, (unint64_t *)v56));
    if (!v57)
    {
      ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
      std::__shared_weak_count::__release_weak(v55);
    }
  }
  v58 = v75;
  if (v75)
  {
    v59 = (unint64_t *)&v75->__shared_owners_;
    do
      v60 = __ldaxr(v59);
    while (__stlxr(v60 - 1, v59));
    if (!v60)
    {
      ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
      std::__shared_weak_count::__release_weak(v58);
    }
  }
}

void sub_20A7A2754(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  uint64_t v8;
  uint64_t v10;
  va_list va;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  va_list va1;
  uint64_t v18;
  uint64_t v19;
  va_list va2;
  uint64_t v21;
  va_list va3;

  va_start(va3, a8);
  va_start(va2, a8);
  va_start(va1, a8);
  va_start(va, a8);
  v10 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v16 = va_arg(va2, _QWORD);
  v18 = va_arg(va2, _QWORD);
  va_copy(va3, va2);
  v19 = va_arg(va3, _QWORD);
  v21 = va_arg(va3, _QWORD);
  std::vector<mlcore::SortDescriptor>::__destroy_vector::operator()[abi:ne180100]((void ***)va3);
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100](v8);
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)va2);
  _Unwind_Resume(a1);
}

void std::allocate_shared[abi:ne180100]<mlcore::Query,std::allocator<mlcore::Query>,mlcore::EntityClass *,std::shared_ptr<mlcore::Predicate>,void>(_QWORD *a1, uint64_t a2, __int128 *a3)
{
  char *v6;
  __int128 v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t v11;

  v6 = (char *)operator new(0x38uLL);
  *(_OWORD *)(v6 + 8) = 0u;
  *(_QWORD *)v6 = &off_24C33D390;
  *((_QWORD *)v6 + 3) = &off_24C33A798;
  v7 = *a3;
  *a3 = 0u;
  *((_QWORD *)v6 + 4) = a2;
  *(_OWORD *)(v6 + 40) = v7;
  v8 = (std::__shared_weak_count *)*((_QWORD *)&v7 + 1);
  if (*((_QWORD *)&v7 + 1))
  {
    v9 = (unint64_t *)(*((_QWORD *)&v7 + 1) + 8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
    do
      v11 = __ldaxr(v9);
    while (__stlxr(v11 - 1, v9));
    if (!v11)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v7 + 1) + 16))(*((_QWORD *)&v7 + 1));
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  *a1 = v6 + 24;
  a1[1] = v6;
}

void std::allocate_shared[abi:ne180100]<mlcore::ExistsPredicate,std::allocator<mlcore::ExistsPredicate>,std::shared_ptr<mlcore::Query> &,void>(_QWORD *a1, uint64_t a2, std::__shared_weak_count *a3)
{
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;

  v6 = operator new(0x30uLL);
  v7 = v6;
  v6[1] = 0;
  v6[2] = 0;
  *v6 = &off_24C33CA60;
  v8 = v6 + 3;
  if (a3)
  {
    p_shared_owners = (unint64_t *)&a3->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
    v6[3] = &off_24C337B10;
    v6[4] = a2;
    v6[5] = a3;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))a3->__on_zero_shared)(a3);
      std::__shared_weak_count::__release_weak(a3);
    }
  }
  else
  {
    v6[3] = &off_24C337B10;
    v6[4] = a2;
    v6[5] = 0;
  }
  *a1 = v8;
  a1[1] = v7;
}

void std::__shared_ptr_emplace<mlcore::ExistsPredicate>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C33CA60;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<mlcore::ExistsPredicate>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C33CA60;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x20BD27AFCLL);
}

void std::__shared_ptr_emplace<mlcore::Query>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C33D390;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<mlcore::Query>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C33D390;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x20BD27AFCLL);
}

void mlcore::EntityQuery::albumsForComposerQuery(mlcore *a1@<X0>, uint64_t a2@<X1>, char **a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  unint64_t *v8;
  mlcore *v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t *v12;
  uint64_t v13;
  char *v14;
  unint64_t *v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  __int128 *v20;
  uint64_t v21;
  __int128 v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  uint64_t i;
  uint64_t v29;
  unint64_t *v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t *v33;
  unint64_t v34;
  __int128 *v35;
  char v36;
  uint64_t v37;
  char v38;
  __int128 v39;
  unint64_t *v40;
  unint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  uint64_t j;
  mlcore *v46;
  char *v47;
  mlcore *HasTitle;
  mlcore *v49;
  uint64_t v50;
  void **v51;
  uint64_t v52;
  void **v53;
  void (**v54)(mlcore::SortDescriptor *__hidden);
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  std::__shared_weak_count *v58;
  uint64_t *p_shared_owners;
  unint64_t v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  char **v71;
  __int128 **v72;
  void **v73;
  void **v74;
  __int128 *v75;
  __int128 *v76;
  __int128 *v77;
  _QWORD *v78;
  uint64_t v79;
  __int128 *v80;
  __int128 *v81;
  __int128 *v82;
  uint64_t v83;
  std::__shared_weak_count *v84;
  char *v85;
  std::__shared_weak_count *v86;
  _QWORD *v87;
  std::__shared_weak_count *v88;
  char *v89;
  std::__shared_weak_count *v90;
  __int128 v91;
  void (**v92)(mlcore::SortDescriptor *__hidden);
  mlcore *v93;
  _QWORD *v94;
  void (**v95)(mlcore::SortDescriptor *__hidden);
  mlcore *v96;
  char *v97;
  void (**v98)(mlcore::SortDescriptor *__hidden);
  uint64_t v99;
  int v100;
  uint64_t v101;

  v101 = *MEMORY[0x24BDAC8D0];
  v5 = mlcore::ItemPropertyComposerPersistentID(a1);
  v6 = *(_QWORD *)(*(_QWORD *)a1 + 224);
  v7 = (char *)operator new(0x48uLL);
  *(_OWORD *)(v7 + 8) = 0u;
  v8 = (unint64_t *)(v7 + 8);
  *(_QWORD *)v7 = &off_24C33CE88;
  *((_QWORD *)v7 + 3) = &unk_24C339CA8;
  *((_QWORD *)v7 + 4) = v5;
  *((_QWORD *)v7 + 5) = 0;
  *((_QWORD *)v7 + 6) = v6;
  *(_OWORD *)(v7 + 56) = 0u;
  v89 = v7 + 24;
  v90 = (std::__shared_weak_count *)v7;
  v9 = (mlcore *)mlcore::AlbumPropertyPersistentID((mlcore *)v7);
  v71 = a3;
  v10 = mlcore::ItemPropertyAlbumPersistentID(v9);
  v11 = (unint64_t *)operator new(0x38uLL);
  v11[1] = 0;
  v12 = v11 + 1;
  v11[2] = 0;
  *v11 = (unint64_t)&off_24C33D240;
  v11[3] = (unint64_t)&off_24C33A5A8;
  v11[4] = (unint64_t)v9;
  v11[5] = 0;
  v11[6] = v10;
  v87 = v11 + 3;
  v88 = (std::__shared_weak_count *)v11;
  v13 = mlcore::AlbumPropertyOrder((mlcore *)v11);
  v14 = (char *)operator new(0x48uLL);
  *(_OWORD *)(v14 + 8) = 0u;
  v15 = (unint64_t *)(v14 + 8);
  *(_QWORD *)v14 = &off_24C33CE88;
  *((_QWORD *)v14 + 3) = &unk_24C339CA8;
  *((_QWORD *)v14 + 4) = v13;
  *((_QWORD *)v14 + 5) = 0x100000000;
  *((_QWORD *)v14 + 6) = 0;
  *(_OWORD *)(v14 + 56) = 0u;
  v85 = v14 + 24;
  v86 = (std::__shared_weak_count *)v14;
  v16 = mlcore::TypedEntityClass<mlcore::Item>::sharedPointer();
  v92 = (void (**)(mlcore::SortDescriptor *__hidden))(v7 + 24);
  v93 = (mlcore *)v7;
  do
    v17 = __ldxr(v8);
  while (__stxr(v17 + 1, v8));
  v94 = v11 + 3;
  v95 = (void (**)(mlcore::SortDescriptor *__hidden))v11;
  do
    v18 = __ldxr(v12);
  while (__stxr(v18 + 1, v12));
  v96 = (mlcore *)(v14 + 24);
  v97 = v14;
  do
    v19 = __ldxr(v15);
  while (__stxr(v19 + 1, v15));
  v80 = 0;
  v81 = 0;
  v82 = 0;
  v72 = &v80;
  LOBYTE(v73) = 0;
  v20 = (__int128 *)operator new(0x30uLL);
  v21 = 0;
  v80 = v20;
  v81 = v20;
  v82 = v20 + 3;
  do
  {
    v22 = *(_OWORD *)&(&v92)[2 * v21];
    *v20 = v22;
    if (*((_QWORD *)&v22 + 1))
    {
      v23 = (unint64_t *)(*((_QWORD *)&v22 + 1) + 8);
      do
        v24 = __ldxr(v23);
      while (__stxr(v24 + 1, v23));
    }
    ++v21;
    ++v20;
  }
  while (v21 != 3);
  v81 = v20;
  mlcore::CreateAndPredicate(&v80, &v91);
  std::allocate_shared[abi:ne180100]<mlcore::Query,std::allocator<mlcore::Query>,mlcore::EntityClass *,std::shared_ptr<mlcore::Predicate>,void>(&v83, v16, &v91);
  v25 = (std::__shared_weak_count *)*((_QWORD *)&v91 + 1);
  if (*((_QWORD *)&v91 + 1))
  {
    v26 = (unint64_t *)(*((_QWORD *)&v91 + 1) + 8);
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  v72 = &v80;
  std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v72);
  for (i = 4; i != -2; i -= 2)
    std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)&(&v92)[i]);
  std::allocate_shared[abi:ne180100]<mlcore::ExistsPredicate,std::allocator<mlcore::ExistsPredicate>,std::shared_ptr<mlcore::Query> &,void>(&v78, v83, v84);
  v29 = mlcore::TypedEntityClass<mlcore::Album>::sharedPointer();
  v30 = *(unint64_t **)(a2 + 8);
  v92 = *(void (***)(mlcore::SortDescriptor *__hidden))a2;
  v93 = (mlcore *)v30;
  if (v30)
  {
    v31 = v30 + 1;
    do
      v32 = __ldxr(v31);
    while (__stxr(v32 + 1, v31));
  }
  v94 = v78;
  v95 = (void (**)(mlcore::SortDescriptor *__hidden))v79;
  if (v79)
  {
    v33 = (unint64_t *)(v79 + 8);
    do
      v34 = __ldxr(v33);
    while (__stxr(v34 + 1, v33));
  }
  v75 = 0;
  v76 = 0;
  v77 = 0;
  v72 = &v75;
  LOBYTE(v73) = 0;
  v35 = (__int128 *)operator new(0x20uLL);
  v36 = 0;
  v37 = 0;
  v75 = v35;
  v76 = v35;
  v77 = v35 + 2;
  do
  {
    v38 = v36;
    v39 = *(_OWORD *)&(&v92)[2 * v37];
    *v35 = v39;
    if (*((_QWORD *)&v39 + 1))
    {
      v40 = (unint64_t *)(*((_QWORD *)&v39 + 1) + 8);
      do
        v41 = __ldxr(v40);
      while (__stxr(v41 + 1, v40));
    }
    ++v35;
    v36 = 1;
    v37 = 1;
  }
  while ((v38 & 1) == 0);
  v76 = v35;
  mlcore::CreateAndPredicate(&v75, &v91);
  std::allocate_shared[abi:ne180100]<mlcore::EntityQuery,std::allocator<mlcore::EntityQuery>,mlcore::EntityClass *,std::shared_ptr<mlcore::Predicate>,void>(v71, v29, (uint64_t *)&v91);
  v42 = (std::__shared_weak_count *)*((_QWORD *)&v91 + 1);
  if (*((_QWORD *)&v91 + 1))
  {
    v43 = (unint64_t *)(*((_QWORD *)&v91 + 1) + 8);
    do
      v44 = __ldaxr(v43);
    while (__stlxr(v44 - 1, v43));
    if (!v44)
    {
      ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
      std::__shared_weak_count::__release_weak(v42);
    }
  }
  v72 = &v75;
  std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v72);
  for (j = 2; j != -2; j -= 2)
    v46 = (mlcore *)std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)&(&v92)[j]);
  v47 = *v71;
  HasTitle = (mlcore *)mlcore::AlbumPropertyHasTitle(v46);
  v92 = &off_24C337670;
  v93 = HasTitle;
  LODWORD(v94) = 1;
  v49 = (mlcore *)mlcore::AlbumPropertyOrder(HasTitle);
  v95 = &off_24C337670;
  v96 = v49;
  LODWORD(v97) = 0;
  v50 = mlcore::AlbumPropertyPersistentID(v49);
  v98 = &off_24C337670;
  v99 = v50;
  v100 = 0;
  v73 = 0;
  v74 = 0;
  v72 = 0;
  *(_QWORD *)&v91 = &v72;
  BYTE8(v91) = 0;
  v51 = (void **)operator new(0x48uLL);
  v52 = 0;
  v72 = (__int128 **)v51;
  v74 = v51 + 9;
  do
  {
    v53 = &v51[v52];
    v54 = (&v92)[v52 + 1];
    *v53 = &off_24C337670;
    v53[1] = v54;
    *((_DWORD *)v53 + 4) = (&v94)[v52];
    v52 += 3;
  }
  while (v52 != 9);
  v73 = v51 + 9;
  mlcore::PropertiesQuery::setSortDescriptors(v47, (char *)&v72);
  *(_QWORD *)&v91 = &v72;
  std::vector<mlcore::SortDescriptor>::__destroy_vector::operator()[abi:ne180100]((void ***)&v91);
  v55 = (std::__shared_weak_count *)v79;
  if (v79)
  {
    v56 = (unint64_t *)(v79 + 8);
    do
      v57 = __ldaxr(v56);
    while (__stlxr(v57 - 1, v56));
    if (!v57)
    {
      ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
      std::__shared_weak_count::__release_weak(v55);
    }
  }
  v58 = v84;
  if (v84)
  {
    p_shared_owners = &v84->__shared_owners_;
    do
      v60 = __ldaxr((unint64_t *)p_shared_owners);
    while (__stlxr(v60 - 1, (unint64_t *)p_shared_owners));
    if (!v60)
    {
      ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
      std::__shared_weak_count::__release_weak(v58);
    }
  }
  v61 = v86;
  if (v86)
  {
    v62 = (unint64_t *)&v86->__shared_owners_;
    do
      v63 = __ldaxr(v62);
    while (__stlxr(v63 - 1, v62));
    if (!v63)
    {
      ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
      std::__shared_weak_count::__release_weak(v61);
    }
  }
  v64 = v88;
  if (v88)
  {
    v65 = (unint64_t *)&v88->__shared_owners_;
    do
      v66 = __ldaxr(v65);
    while (__stlxr(v66 - 1, v65));
    if (!v66)
    {
      ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
      std::__shared_weak_count::__release_weak(v64);
    }
  }
  v67 = v90;
  if (v90)
  {
    v68 = (unint64_t *)&v90->__shared_owners_;
    do
      v69 = __ldaxr(v68);
    while (__stlxr(v69 - 1, v68));
    if (!v69)
    {
      ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
      std::__shared_weak_count::__release_weak(v67);
    }
  }
}

void sub_20A7A3014(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,char a24,uint64_t a25,char a26,uint64_t a27,char a28,uint64_t a29,void **a30)
{
  std::vector<mlcore::SortDescriptor>::__destroy_vector::operator()[abi:ne180100](&a30);
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100](a10);
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)&a22);
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)&a24);
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)&a26);
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)&a28);
  _Unwind_Resume(a1);
}

void mlcore::EntityQuery::albumsForGenreQuery(mlcore *a1@<X0>, uint64_t a2@<X1>, char **a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  unint64_t *v8;
  mlcore *v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t *v12;
  uint64_t v13;
  char *v14;
  unint64_t *v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  __int128 *v20;
  uint64_t v21;
  __int128 v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  uint64_t i;
  uint64_t v29;
  unint64_t *v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t *v33;
  unint64_t v34;
  __int128 *v35;
  char v36;
  uint64_t v37;
  char v38;
  __int128 v39;
  unint64_t *v40;
  unint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  uint64_t j;
  mlcore *v46;
  char *v47;
  mlcore *HasTitle;
  mlcore *v49;
  uint64_t v50;
  void **v51;
  uint64_t v52;
  void **v53;
  void (**v54)(mlcore::SortDescriptor *__hidden);
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  std::__shared_weak_count *v58;
  uint64_t *p_shared_owners;
  unint64_t v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  char **v71;
  __int128 **v72;
  void **v73;
  void **v74;
  __int128 *v75;
  __int128 *v76;
  __int128 *v77;
  _QWORD *v78;
  uint64_t v79;
  __int128 *v80;
  __int128 *v81;
  __int128 *v82;
  uint64_t v83;
  std::__shared_weak_count *v84;
  char *v85;
  std::__shared_weak_count *v86;
  _QWORD *v87;
  std::__shared_weak_count *v88;
  char *v89;
  std::__shared_weak_count *v90;
  __int128 v91;
  void (**v92)(mlcore::SortDescriptor *__hidden);
  mlcore *v93;
  _QWORD *v94;
  void (**v95)(mlcore::SortDescriptor *__hidden);
  mlcore *v96;
  char *v97;
  void (**v98)(mlcore::SortDescriptor *__hidden);
  uint64_t v99;
  int v100;
  uint64_t v101;

  v101 = *MEMORY[0x24BDAC8D0];
  v5 = mlcore::ItemPropertyGenrePersistentID(a1);
  v6 = *(_QWORD *)(*(_QWORD *)a1 + 224);
  v7 = (char *)operator new(0x48uLL);
  *(_OWORD *)(v7 + 8) = 0u;
  v8 = (unint64_t *)(v7 + 8);
  *(_QWORD *)v7 = &off_24C33CE88;
  *((_QWORD *)v7 + 3) = &unk_24C339CA8;
  *((_QWORD *)v7 + 4) = v5;
  *((_QWORD *)v7 + 5) = 0;
  *((_QWORD *)v7 + 6) = v6;
  *(_OWORD *)(v7 + 56) = 0u;
  v89 = v7 + 24;
  v90 = (std::__shared_weak_count *)v7;
  v9 = (mlcore *)mlcore::AlbumPropertyPersistentID((mlcore *)v7);
  v71 = a3;
  v10 = mlcore::ItemPropertyAlbumPersistentID(v9);
  v11 = (unint64_t *)operator new(0x38uLL);
  v11[1] = 0;
  v12 = v11 + 1;
  v11[2] = 0;
  *v11 = (unint64_t)&off_24C33D240;
  v11[3] = (unint64_t)&off_24C33A5A8;
  v11[4] = (unint64_t)v9;
  v11[5] = 0;
  v11[6] = v10;
  v87 = v11 + 3;
  v88 = (std::__shared_weak_count *)v11;
  v13 = mlcore::AlbumPropertyOrder((mlcore *)v11);
  v14 = (char *)operator new(0x48uLL);
  *(_OWORD *)(v14 + 8) = 0u;
  v15 = (unint64_t *)(v14 + 8);
  *(_QWORD *)v14 = &off_24C33CE88;
  *((_QWORD *)v14 + 3) = &unk_24C339CA8;
  *((_QWORD *)v14 + 4) = v13;
  *((_QWORD *)v14 + 5) = 0x100000000;
  *((_QWORD *)v14 + 6) = 0;
  *(_OWORD *)(v14 + 56) = 0u;
  v85 = v14 + 24;
  v86 = (std::__shared_weak_count *)v14;
  v16 = mlcore::TypedEntityClass<mlcore::Item>::sharedPointer();
  v92 = (void (**)(mlcore::SortDescriptor *__hidden))(v7 + 24);
  v93 = (mlcore *)v7;
  do
    v17 = __ldxr(v8);
  while (__stxr(v17 + 1, v8));
  v94 = v11 + 3;
  v95 = (void (**)(mlcore::SortDescriptor *__hidden))v11;
  do
    v18 = __ldxr(v12);
  while (__stxr(v18 + 1, v12));
  v96 = (mlcore *)(v14 + 24);
  v97 = v14;
  do
    v19 = __ldxr(v15);
  while (__stxr(v19 + 1, v15));
  v80 = 0;
  v81 = 0;
  v82 = 0;
  v72 = &v80;
  LOBYTE(v73) = 0;
  v20 = (__int128 *)operator new(0x30uLL);
  v21 = 0;
  v80 = v20;
  v81 = v20;
  v82 = v20 + 3;
  do
  {
    v22 = *(_OWORD *)&(&v92)[2 * v21];
    *v20 = v22;
    if (*((_QWORD *)&v22 + 1))
    {
      v23 = (unint64_t *)(*((_QWORD *)&v22 + 1) + 8);
      do
        v24 = __ldxr(v23);
      while (__stxr(v24 + 1, v23));
    }
    ++v21;
    ++v20;
  }
  while (v21 != 3);
  v81 = v20;
  mlcore::CreateAndPredicate(&v80, &v91);
  std::allocate_shared[abi:ne180100]<mlcore::Query,std::allocator<mlcore::Query>,mlcore::EntityClass *,std::shared_ptr<mlcore::Predicate>,void>(&v83, v16, &v91);
  v25 = (std::__shared_weak_count *)*((_QWORD *)&v91 + 1);
  if (*((_QWORD *)&v91 + 1))
  {
    v26 = (unint64_t *)(*((_QWORD *)&v91 + 1) + 8);
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  v72 = &v80;
  std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v72);
  for (i = 4; i != -2; i -= 2)
    std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)&(&v92)[i]);
  std::allocate_shared[abi:ne180100]<mlcore::ExistsPredicate,std::allocator<mlcore::ExistsPredicate>,std::shared_ptr<mlcore::Query> &,void>(&v78, v83, v84);
  v29 = mlcore::TypedEntityClass<mlcore::Album>::sharedPointer();
  v30 = *(unint64_t **)(a2 + 8);
  v92 = *(void (***)(mlcore::SortDescriptor *__hidden))a2;
  v93 = (mlcore *)v30;
  if (v30)
  {
    v31 = v30 + 1;
    do
      v32 = __ldxr(v31);
    while (__stxr(v32 + 1, v31));
  }
  v94 = v78;
  v95 = (void (**)(mlcore::SortDescriptor *__hidden))v79;
  if (v79)
  {
    v33 = (unint64_t *)(v79 + 8);
    do
      v34 = __ldxr(v33);
    while (__stxr(v34 + 1, v33));
  }
  v75 = 0;
  v76 = 0;
  v77 = 0;
  v72 = &v75;
  LOBYTE(v73) = 0;
  v35 = (__int128 *)operator new(0x20uLL);
  v36 = 0;
  v37 = 0;
  v75 = v35;
  v76 = v35;
  v77 = v35 + 2;
  do
  {
    v38 = v36;
    v39 = *(_OWORD *)&(&v92)[2 * v37];
    *v35 = v39;
    if (*((_QWORD *)&v39 + 1))
    {
      v40 = (unint64_t *)(*((_QWORD *)&v39 + 1) + 8);
      do
        v41 = __ldxr(v40);
      while (__stxr(v41 + 1, v40));
    }
    ++v35;
    v36 = 1;
    v37 = 1;
  }
  while ((v38 & 1) == 0);
  v76 = v35;
  mlcore::CreateAndPredicate(&v75, &v91);
  std::allocate_shared[abi:ne180100]<mlcore::EntityQuery,std::allocator<mlcore::EntityQuery>,mlcore::EntityClass *,std::shared_ptr<mlcore::Predicate>,void>(v71, v29, (uint64_t *)&v91);
  v42 = (std::__shared_weak_count *)*((_QWORD *)&v91 + 1);
  if (*((_QWORD *)&v91 + 1))
  {
    v43 = (unint64_t *)(*((_QWORD *)&v91 + 1) + 8);
    do
      v44 = __ldaxr(v43);
    while (__stlxr(v44 - 1, v43));
    if (!v44)
    {
      ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
      std::__shared_weak_count::__release_weak(v42);
    }
  }
  v72 = &v75;
  std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v72);
  for (j = 2; j != -2; j -= 2)
    v46 = (mlcore *)std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)&(&v92)[j]);
  v47 = *v71;
  HasTitle = (mlcore *)mlcore::AlbumPropertyHasTitle(v46);
  v92 = &off_24C337670;
  v93 = HasTitle;
  LODWORD(v94) = 1;
  v49 = (mlcore *)mlcore::AlbumPropertyOrder(HasTitle);
  v95 = &off_24C337670;
  v96 = v49;
  LODWORD(v97) = 0;
  v50 = mlcore::AlbumPropertyPersistentID(v49);
  v98 = &off_24C337670;
  v99 = v50;
  v100 = 0;
  v73 = 0;
  v74 = 0;
  v72 = 0;
  *(_QWORD *)&v91 = &v72;
  BYTE8(v91) = 0;
  v51 = (void **)operator new(0x48uLL);
  v52 = 0;
  v72 = (__int128 **)v51;
  v74 = v51 + 9;
  do
  {
    v53 = &v51[v52];
    v54 = (&v92)[v52 + 1];
    *v53 = &off_24C337670;
    v53[1] = v54;
    *((_DWORD *)v53 + 4) = (&v94)[v52];
    v52 += 3;
  }
  while (v52 != 9);
  v73 = v51 + 9;
  mlcore::PropertiesQuery::setSortDescriptors(v47, (char *)&v72);
  *(_QWORD *)&v91 = &v72;
  std::vector<mlcore::SortDescriptor>::__destroy_vector::operator()[abi:ne180100]((void ***)&v91);
  v55 = (std::__shared_weak_count *)v79;
  if (v79)
  {
    v56 = (unint64_t *)(v79 + 8);
    do
      v57 = __ldaxr(v56);
    while (__stlxr(v57 - 1, v56));
    if (!v57)
    {
      ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
      std::__shared_weak_count::__release_weak(v55);
    }
  }
  v58 = v84;
  if (v84)
  {
    p_shared_owners = &v84->__shared_owners_;
    do
      v60 = __ldaxr((unint64_t *)p_shared_owners);
    while (__stlxr(v60 - 1, (unint64_t *)p_shared_owners));
    if (!v60)
    {
      ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
      std::__shared_weak_count::__release_weak(v58);
    }
  }
  v61 = v86;
  if (v86)
  {
    v62 = (unint64_t *)&v86->__shared_owners_;
    do
      v63 = __ldaxr(v62);
    while (__stlxr(v63 - 1, v62));
    if (!v63)
    {
      ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
      std::__shared_weak_count::__release_weak(v61);
    }
  }
  v64 = v88;
  if (v88)
  {
    v65 = (unint64_t *)&v88->__shared_owners_;
    do
      v66 = __ldaxr(v65);
    while (__stlxr(v66 - 1, v65));
    if (!v66)
    {
      ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
      std::__shared_weak_count::__release_weak(v64);
    }
  }
  v67 = v90;
  if (v90)
  {
    v68 = (unint64_t *)&v90->__shared_owners_;
    do
      v69 = __ldaxr(v68);
    while (__stlxr(v69 - 1, v68));
    if (!v69)
    {
      ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
      std::__shared_weak_count::__release_weak(v67);
    }
  }
}

void sub_20A7A36EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,char a24,uint64_t a25,char a26,uint64_t a27,char a28,uint64_t a29,void **a30)
{
  std::vector<mlcore::SortDescriptor>::__destroy_vector::operator()[abi:ne180100](&a30);
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100](a10);
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)&a22);
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)&a24);
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)&a26);
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)&a28);
  _Unwind_Resume(a1);
}

void mlcore::EntityQuery::musicVideosQuery(mlcore *a1@<X0>, char **a2@<X8>)
{
  uint64_t v4;
  mlcore *v5;
  uint64_t v6;
  char *v7;
  unint64_t *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  __int128 *v15;
  uint64_t v16;
  __int128 v17;
  unint64_t *v18;
  unint64_t v19;
  __int128 v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  uint64_t i;
  unint64_t *v28;
  unint64_t v29;
  unint64_t v30;
  __int128 *v31;
  char v32;
  uint64_t v33;
  char v34;
  __int128 v35;
  unint64_t *v36;
  unint64_t v37;
  __int128 v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  uint64_t j;
  uint64_t v46;
  std::__shared_weak_count *v47;
  char *v48;
  mlcore *v49;
  char *v50;
  unint64_t *v51;
  unint64_t v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  __int128 *v59;
  __int128 *v60;
  __int128 *v61;
  __int128 *v62;
  __int128 *v63;
  __int128 *v64;
  __int128 v65;
  __int128 v66;
  char *v67;
  std::__shared_weak_count *v68;
  uint64_t v69;
  std::__shared_weak_count *v70;
  __int128 **v71;
  char v72;
  uint64_t v73;
  std::__shared_weak_count *v74;
  uint64_t v75;
  std::__shared_weak_count *v76;
  char *v77;
  char *v78;
  uint64_t v79;

  v79 = *MEMORY[0x24BDAC8D0];
  v4 = mlcore::ItemPropertyMediaType(a1);
  LODWORD(v73) = 1032;
  v5 = (mlcore *)mlcore::CreateInPredicate<int>(&v69, v4, (int *)&v73, 1);
  v6 = mlcore::ItemPropertyTitleOrder(v5);
  v7 = (char *)operator new(0x48uLL);
  *(_OWORD *)(v7 + 8) = 0u;
  v8 = (unint64_t *)(v7 + 8);
  *(_QWORD *)v7 = &off_24C33CE88;
  *((_QWORD *)v7 + 3) = &unk_24C339CA8;
  *((_QWORD *)v7 + 4) = v6;
  *((_QWORD *)v7 + 5) = 0x100000000;
  *((_QWORD *)v7 + 6) = 0;
  *(_OWORD *)(v7 + 56) = 0u;
  v67 = v7 + 24;
  v68 = (std::__shared_weak_count *)v7;
  v66 = 0u;
  if (*(_QWORD *)a1)
  {
    v9 = (std::__shared_weak_count *)*((_QWORD *)a1 + 1);
    v73 = *(_QWORD *)a1;
    v74 = v9;
    if (v9)
    {
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v11 = __ldxr(p_shared_owners);
      while (__stxr(v11 + 1, p_shared_owners));
    }
    v75 = v69;
    v76 = v70;
    if (v70)
    {
      v12 = (unint64_t *)&v70->__shared_owners_;
      do
        v13 = __ldxr(v12);
      while (__stxr(v13 + 1, v12));
    }
    v77 = v7 + 24;
    v78 = v7;
    do
      v14 = __ldxr(v8);
    while (__stxr(v14 + 1, v8));
    v62 = 0;
    v63 = 0;
    v64 = 0;
    v71 = &v62;
    v72 = 0;
    v15 = (__int128 *)operator new(0x30uLL);
    v16 = 0;
    v62 = v15;
    v63 = v15;
    v64 = v15 + 3;
    do
    {
      v17 = *((_OWORD *)&v73 + v16);
      *v15 = v17;
      if (*((_QWORD *)&v17 + 1))
      {
        v18 = (unint64_t *)(*((_QWORD *)&v17 + 1) + 8);
        do
          v19 = __ldxr(v18);
        while (__stxr(v19 + 1, v18));
      }
      ++v16;
      ++v15;
    }
    while (v16 != 3);
    v63 = v15;
    mlcore::CreateAndPredicate(&v62, &v65);
    v20 = v65;
    v65 = 0uLL;
    v21 = (std::__shared_weak_count *)*((_QWORD *)&v66 + 1);
    v66 = v20;
    if (v21)
    {
      v22 = (unint64_t *)&v21->__shared_owners_;
      do
        v23 = __ldaxr(v22);
      while (__stlxr(v23 - 1, v22));
      if (!v23)
      {
        ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
        std::__shared_weak_count::__release_weak(v21);
      }
    }
    v24 = (std::__shared_weak_count *)*((_QWORD *)&v65 + 1);
    if (*((_QWORD *)&v65 + 1))
    {
      v25 = (unint64_t *)(*((_QWORD *)&v65 + 1) + 8);
      do
        v26 = __ldaxr(v25);
      while (__stlxr(v26 - 1, v25));
      if (!v26)
      {
        ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
        std::__shared_weak_count::__release_weak(v24);
      }
    }
    v71 = &v62;
    std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v71);
    for (i = 32; i != -16; i -= 16)
      std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)&v73 + i);
  }
  else
  {
    v73 = v69;
    v74 = v70;
    if (v70)
    {
      v28 = (unint64_t *)&v70->__shared_owners_;
      do
        v29 = __ldxr(v28);
      while (__stxr(v29 + 1, v28));
    }
    v75 = (uint64_t)(v7 + 24);
    v76 = (std::__shared_weak_count *)v7;
    do
      v30 = __ldxr(v8);
    while (__stxr(v30 + 1, v8));
    v59 = 0;
    v60 = 0;
    v61 = 0;
    v71 = &v59;
    v72 = 0;
    v31 = (__int128 *)operator new(0x20uLL);
    v32 = 0;
    v33 = 0;
    v59 = v31;
    v60 = v31;
    v61 = v31 + 2;
    do
    {
      v34 = v32;
      v35 = *((_OWORD *)&v73 + v33);
      *v31 = v35;
      if (*((_QWORD *)&v35 + 1))
      {
        v36 = (unint64_t *)(*((_QWORD *)&v35 + 1) + 8);
        do
          v37 = __ldxr(v36);
        while (__stxr(v37 + 1, v36));
      }
      ++v31;
      v32 = 1;
      v33 = 1;
    }
    while ((v34 & 1) == 0);
    v60 = v31;
    mlcore::CreateAndPredicate(&v59, &v65);
    v38 = v65;
    v65 = 0uLL;
    v39 = (std::__shared_weak_count *)*((_QWORD *)&v66 + 1);
    v66 = v38;
    if (v39)
    {
      v40 = (unint64_t *)&v39->__shared_owners_;
      do
        v41 = __ldaxr(v40);
      while (__stlxr(v41 - 1, v40));
      if (!v41)
      {
        ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
        std::__shared_weak_count::__release_weak(v39);
      }
    }
    v42 = (std::__shared_weak_count *)*((_QWORD *)&v65 + 1);
    if (*((_QWORD *)&v65 + 1))
    {
      v43 = (unint64_t *)(*((_QWORD *)&v65 + 1) + 8);
      do
        v44 = __ldaxr(v43);
      while (__stlxr(v44 - 1, v43));
      if (!v44)
      {
        ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
        std::__shared_weak_count::__release_weak(v42);
      }
    }
    v71 = &v59;
    std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v71);
    for (j = 16; j != -16; j -= 16)
      std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)&v73 + j);
  }
  v46 = mlcore::TypedEntityClass<mlcore::Item>::sharedPointer();
  v47 = (std::__shared_weak_count *)*((_QWORD *)&v66 + 1);
  std::allocate_shared[abi:ne180100]<mlcore::EntityQuery,std::allocator<mlcore::EntityQuery>,mlcore::EntityClass *,std::shared_ptr<mlcore::Predicate> &,void>(a2, v46, v66, *((std::__shared_weak_count **)&v66 + 1));
  v48 = *a2;
  v50 = (char *)mlcore::StandardSongSortDescriptors(v49);
  mlcore::PropertiesQuery::setSortDescriptors(v48, v50);
  if (v47)
  {
    v51 = (unint64_t *)&v47->__shared_owners_;
    do
      v52 = __ldaxr(v51);
    while (__stlxr(v52 - 1, v51));
    if (!v52)
    {
      ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
      std::__shared_weak_count::__release_weak(v47);
    }
  }
  v53 = v68;
  if (v68)
  {
    v54 = (unint64_t *)&v68->__shared_owners_;
    do
      v55 = __ldaxr(v54);
    while (__stlxr(v55 - 1, v54));
    if (!v55)
    {
      ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
      std::__shared_weak_count::__release_weak(v53);
    }
  }
  v56 = v70;
  if (v70)
  {
    v57 = (unint64_t *)&v70->__shared_owners_;
    do
      v58 = __ldaxr(v57);
    while (__stlxr(v58 - 1, v57));
    if (!v58)
    {
      ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
      std::__shared_weak_count::__release_weak(v56);
    }
  }
}

void sub_20A7A3C94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t i;
  uint64_t v13;
  va_list va;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  va_list va1;
  uint64_t v19;
  va_list va2;

  va_start(va2, a9);
  va_start(va1, a9);
  va_start(va, a9);
  v13 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v17 = va_arg(va2, _QWORD);
  v19 = va_arg(va2, _QWORD);
  *(_QWORD *)(v10 - 104) = v9;
  std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v10 - 104));
  for (i = 16; i != -16; i -= 16)
    std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100](v10 - 88 + i);
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)va2);
  _Unwind_Resume(a1);
}

void mlcore::EntityQuery::playlistsForFolderQuery(mlcore *a1@<X0>, __int128 *a2@<X1>, char **a3@<X8>)
{
  uint64_t IsHidden;
  char *v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  _OWORD *v12;
  char v13;
  uint64_t v14;
  char v15;
  __int128 v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t i;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  _OWORD *v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  char *v34;
  uint64_t v35;
  char *v36;
  __int128 v37;
  unint64_t *v38;
  unint64_t v39;
  _QWORD *v40;
  _QWORD *v41;
  char *v42;
  __int128 v43;
  int64x2_t v44;
  uint64_t v45;
  uint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  char *v50;
  mlcore *v51;
  void **v52;
  uint64_t v53;
  void **v54;
  void *v55;
  __int128 **v56;
  void **v57;
  void **v58;
  __int128 *v59[3];
  __int128 v60;
  _OWORD v61[2];
  __int128 v62;
  _BYTE v63[32];
  mlcore *IsFolder;
  int v65;
  mlcore *IsSmart;
  int v67;
  mlcore *IsGenius;
  int v69;
  mlcore *IsOwner;
  int v71;
  mlcore *IsPersonalMix;
  int v73;
  mlcore *IsSubscribed;
  int v75;
  uint64_t v76;
  int v77;
  uint64_t v78;

  v78 = *MEMORY[0x24BDAC8D0];
  IsHidden = mlcore::PlaylistPropertyIsHidden(a1);
  v7 = (char *)operator new(0x30uLL);
  *(_OWORD *)(v7 + 8) = 0u;
  *(_QWORD *)v7 = &off_24C33C9F0;
  *((_QWORD *)v7 + 4) = IsHidden;
  *((_QWORD *)v7 + 3) = &unk_24C3377B8;
  *((_DWORD *)v7 + 10) = 1;
  *(_QWORD *)&v62 = v7 + 24;
  *((_QWORD *)&v62 + 1) = v7;
  v8 = v62;
  v62 = 0u;
  *(_OWORD *)v63 = v8;
  v9 = mlcore::PlaylistPropertyParentPersistentID((mlcore *)v7);
  v10 = *(_QWORD *)(*(_QWORD *)a1 + 224);
  v11 = (char *)operator new(0x48uLL);
  *(_OWORD *)(v11 + 8) = 0u;
  *(_QWORD *)v11 = &off_24C33CE88;
  *((_QWORD *)v11 + 4) = v9;
  *((_QWORD *)v11 + 5) = 0;
  *((_QWORD *)v11 + 3) = &unk_24C339CA8;
  *((_QWORD *)v11 + 6) = v10;
  *(_OWORD *)(v11 + 56) = 0u;
  *(_QWORD *)&v60 = v11 + 24;
  *((_QWORD *)&v60 + 1) = v11;
  *(_OWORD *)&v63[16] = v60;
  v60 = 0u;
  memset(v61, 0, 24);
  v56 = (__int128 **)v61;
  LOBYTE(v57) = 0;
  v12 = operator new(0x20uLL);
  v13 = 0;
  v14 = 0;
  *(_QWORD *)&v61[0] = v12;
  *((_QWORD *)&v61[0] + 1) = v12;
  *(_QWORD *)&v61[1] = v12 + 2;
  do
  {
    v15 = v13;
    v16 = *(_OWORD *)&v63[16 * v14];
    *v12 = v16;
    if (*((_QWORD *)&v16 + 1))
    {
      v17 = (unint64_t *)(*((_QWORD *)&v16 + 1) + 8);
      do
        v18 = __ldxr(v17);
      while (__stxr(v18 + 1, v17));
    }
    ++v12;
    v13 = 1;
    v14 = 1;
  }
  while ((v15 & 1) == 0);
  *((_QWORD *)&v61[0] + 1) = v12;
  for (i = 16; i != -16; i -= 16)
    std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)&v63[i]);
  if (*((_QWORD *)&v60 + 1))
  {
    v20 = (unint64_t *)(*((_QWORD *)&v60 + 1) + 8);
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v60 + 1) + 16))(*((_QWORD *)&v60 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v60 + 1));
    }
  }
  v22 = (std::__shared_weak_count *)*((_QWORD *)&v62 + 1);
  if (*((_QWORD *)&v62 + 1))
  {
    v23 = (unint64_t *)(*((_QWORD *)&v62 + 1) + 8);
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  if (*(_QWORD *)a2)
  {
    v25 = *((_QWORD *)&v61[0] + 1);
    if (*((_QWORD *)&v61[0] + 1) >= *(_QWORD *)&v61[1])
    {
      v30 = (uint64_t)(*((_QWORD *)&v61[0] + 1) - *(_QWORD *)&v61[0]) >> 4;
      v31 = v30 + 1;
      if ((unint64_t)(v30 + 1) >> 60)
        std::vector<std::string>::__throw_length_error[abi:ne180100]();
      v32 = *(_QWORD *)&v61[1] - *(_QWORD *)&v61[0];
      if ((uint64_t)(*(_QWORD *)&v61[1] - *(_QWORD *)&v61[0]) >> 3 > v31)
        v31 = v32 >> 3;
      if ((unint64_t)v32 >= 0x7FFFFFFFFFFFFFF0)
        v33 = 0xFFFFFFFFFFFFFFFLL;
      else
        v33 = v31;
      IsFolder = (mlcore *)&v61[1];
      v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<mediaplatform::DatabaseParameterBase>>>(v33);
      v36 = &v34[16 * v30];
      v37 = *a2;
      *(_OWORD *)v36 = *a2;
      if (*((_QWORD *)&v37 + 1))
      {
        v38 = (unint64_t *)(*((_QWORD *)&v37 + 1) + 8);
        do
          v39 = __ldxr(v38);
        while (__stxr(v39 + 1, v38));
      }
      v40 = (_QWORD *)*((_QWORD *)&v61[0] + 1);
      v41 = *(_QWORD **)&v61[0];
      if (*((_QWORD *)&v61[0] + 1) == *(_QWORD *)&v61[0])
      {
        v44 = vdupq_n_s64(*((unint64_t *)&v61[0] + 1));
        v42 = &v34[16 * v30];
      }
      else
      {
        v42 = &v34[16 * v30];
        do
        {
          v43 = *((_OWORD *)v40 - 1);
          v40 -= 2;
          *((_OWORD *)v42 - 1) = v43;
          v42 -= 16;
          *v40 = 0;
          v40[1] = 0;
        }
        while (v40 != v41);
        v44 = (int64x2_t)v61[0];
      }
      v29 = v36 + 16;
      *(_QWORD *)&v61[0] = v42;
      *((_QWORD *)&v61[0] + 1) = v36 + 16;
      *(int64x2_t *)&v63[8] = v44;
      v45 = *(_QWORD *)&v61[1];
      *(_QWORD *)&v61[1] = &v34[16 * v35];
      *(_QWORD *)&v63[24] = v45;
      *(_QWORD *)v63 = v44.i64[0];
      std::__split_buffer<std::shared_ptr<mediaplatform::SQLExpression const>>::~__split_buffer((uint64_t)v63);
    }
    else
    {
      **((_QWORD **)&v61[0] + 1) = *(_QWORD *)a2;
      v26 = *((_QWORD *)a2 + 1);
      *(_QWORD *)(v25 + 8) = v26;
      if (v26)
      {
        v27 = (unint64_t *)(v26 + 8);
        do
          v28 = __ldxr(v27);
        while (__stxr(v28 + 1, v27));
      }
      v29 = (_OWORD *)(v25 + 16);
    }
    *((_QWORD *)&v61[0] + 1) = v29;
  }
  v46 = mlcore::TypedEntityClass<mlcore::Playlist>::sharedPointer();
  memset(v59, 0, sizeof(v59));
  std::vector<std::shared_ptr<mlcore::Predicate>>::__init_with_size[abi:ne180100]<std::shared_ptr<mlcore::Predicate>*,std::shared_ptr<mlcore::Predicate>*>((char *)v59, *(_QWORD **)&v61[0], *((_QWORD **)&v61[0] + 1), (uint64_t)(*((_QWORD *)&v61[0] + 1) - *(_QWORD *)&v61[0]) >> 4);
  mlcore::CreateAndPredicate(v59, v63);
  std::allocate_shared[abi:ne180100]<mlcore::EntityQuery,std::allocator<mlcore::EntityQuery>,mlcore::EntityClass *,std::shared_ptr<mlcore::Predicate>,void>(a3, v46, (uint64_t *)v63);
  v47 = *(std::__shared_weak_count **)&v63[8];
  if (*(_QWORD *)&v63[8])
  {
    v48 = (unint64_t *)(*(_QWORD *)&v63[8] + 8);
    do
      v49 = __ldaxr(v48);
    while (__stlxr(v49 - 1, v48));
    if (!v49)
    {
      ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
      std::__shared_weak_count::__release_weak(v47);
    }
  }
  v56 = v59;
  std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v56);
  v50 = *a3;
  *(_QWORD *)&v63[8] = mlcore::PlaylistPropertyIsFavoritedSongs(v51);
  *(_DWORD *)&v63[16] = 1;
  IsFolder = (mlcore *)mlcore::PlaylistPropertySmartIsFolder(*(mlcore **)&v63[8]);
  v65 = 1;
  IsSmart = (mlcore *)mlcore::PlaylistPropertyIsSmart(IsFolder);
  v67 = 1;
  IsGenius = (mlcore *)mlcore::PlaylistPropertySmartIsGenius(IsSmart);
  v69 = 1;
  IsOwner = (mlcore *)mlcore::PlaylistPropertyIsOwner(IsGenius);
  v71 = 1;
  IsPersonalMix = (mlcore *)mlcore::PlaylistCategoryTypeIsPersonalMix(IsOwner);
  v73 = 1;
  IsSubscribed = (mlcore *)mlcore::PlaylistPropertyIsSubscribed(IsPersonalMix);
  v75 = 1;
  v76 = mlcore::PlaylistPropertyNameOrder(IsSubscribed);
  v77 = 0;
  v57 = 0;
  v58 = 0;
  v56 = 0;
  *(_QWORD *)&v62 = &v56;
  BYTE8(v62) = 0;
  v52 = (void **)operator new(0xC0uLL);
  v53 = 0;
  v56 = (__int128 **)v52;
  v58 = v52 + 24;
  do
  {
    v54 = &v52[v53];
    v55 = *(void **)&v63[v53 * 8 + 8];
    *v54 = &off_24C337670;
    v54[1] = v55;
    *((_DWORD *)v54 + 4) = *(_DWORD *)&v63[v53 * 8 + 16];
    v53 += 3;
  }
  while (v53 != 24);
  v57 = v52 + 24;
  mlcore::PropertiesQuery::setSortDescriptors(v50, (char *)&v56);
  *(_QWORD *)&v62 = &v56;
  std::vector<mlcore::SortDescriptor>::__destroy_vector::operator()[abi:ne180100]((void ***)&v62);
  *(_QWORD *)v63 = v61;
  std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__destroy_vector::operator()[abi:ne180100]((void ***)v63);
}

void sub_20A7A41F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  a9 = (void **)&a17;
  std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

__n128 mlcore::EntityQuery::playlistItemsQuery@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, __n128 *a3@<X8>)
{
  uint64_t v5;
  _QWORD *v6;
  char *v7;
  mlcore *v8;
  uint64_t v9;
  _QWORD *v10;
  __n128 result;
  __n128 v12;
  std::string *v13;
  char v14;
  std::string v15;

  v5 = *(_QWORD *)(*(_QWORD *)a1 + 224);
  v6 = operator new(0xD0uLL);
  v6[1] = 0;
  v6[2] = 0;
  *v6 = &off_24C33D0F0;
  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&v15, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    v15 = *(std::string *)a2;
  v7 = (char *)(v6 + 3);
  v8 = (mlcore *)mlcore::PlaylistItemEntityQuery::PlaylistItemEntityQuery((uint64_t)(v6 + 3), v5, (__int128 *)&v15);
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v15.__r_.__value_.__l.__data_);
  v12.n128_u64[0] = (unint64_t)(v6 + 3);
  v12.n128_u64[1] = (unint64_t)v6;
  v9 = mlcore::PlaylistItemPropertyPosition(v8);
  memset(&v15, 0, sizeof(v15));
  v14 = 0;
  v10 = operator new(0x18uLL);
  v15.__r_.__value_.__l.__size_ = (std::string::size_type)(v10 + 3);
  v15.__r_.__value_.__r.__words[2] = (std::string::size_type)(v10 + 3);
  *v10 = &off_24C337670;
  v10[1] = v9;
  *((_DWORD *)v10 + 4) = 0;
  v15.__r_.__value_.__r.__words[0] = (std::string::size_type)v10;
  mlcore::PropertiesQuery::setSortDescriptors(v7, (char *)&v15);
  v13 = &v15;
  std::vector<mlcore::SortDescriptor>::__destroy_vector::operator()[abi:ne180100]((void ***)&v13);
  result = v12;
  *a3 = v12;
  return result;
}

void sub_20A7A43D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  std::__shared_weak_count *v18;
  void *v20;

  std::__shared_weak_count::~__shared_weak_count(v18);
  operator delete(v20);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<mlcore::PlaylistItemEntityQuery>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C33D0F0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<mlcore::PlaylistItemEntityQuery>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C33D0F0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x20BD27AFCLL);
}

uint64_t std::__shared_ptr_emplace<mlcore::PlaylistItemEntityQuery>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void mlcore::EntityQuery::tvEpisodesQuery(mlcore *a1@<X0>, char **a2@<X8>)
{
  uint64_t v4;
  char *v5;
  unint64_t *v6;
  uint64_t v7;
  char *v8;
  unint64_t *v9;
  unint64_t *v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  __int128 *v15;
  uint64_t v16;
  __int128 v17;
  unint64_t *v18;
  unint64_t v19;
  __int128 v20;
  std::__shared_weak_count *v21;
  unint64_t *p_shared_owners;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  uint64_t i;
  unint64_t v28;
  unint64_t v29;
  __int128 *v30;
  char v31;
  uint64_t v32;
  char v33;
  __int128 v34;
  unint64_t *v35;
  unint64_t v36;
  __int128 v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  uint64_t j;
  uint64_t v45;
  char *v46;
  unsigned __int8 v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  mlcore *v57;
  mlcore *v58;
  mlcore *v59;
  mlcore *v60;
  mlcore *v61;
  mlcore *v62;
  mlcore *v63;
  uint64_t v64;
  __int128 *v65;
  __int128 *v66;
  __int128 *v67;
  __int128 *v68;
  __int128 *v69;
  __int128 *v70;
  __int128 v71;
  __int128 v72;
  char *v73;
  std::__shared_weak_count *v74;
  char *v75;
  std::__shared_weak_count *v76;
  __int128 **v77;
  char v78;
  void (**v79)(mlcore::SortDescriptor *__hidden);
  mlcore *v80;
  char *v81;
  void (**v82)(mlcore::SortDescriptor *__hidden);
  mlcore *v83;
  char *v84;
  void (**v85)(mlcore::SortDescriptor *__hidden);
  mlcore *v86;
  int v87;
  void (**v88)(mlcore::SortDescriptor *__hidden);
  mlcore *v89;
  int v90;
  void (**v91)(mlcore::SortDescriptor *__hidden);
  mlcore *v92;
  int v93;
  void (**v94)(mlcore::SortDescriptor *__hidden);
  mlcore *v95;
  int v96;
  void (**v97)(mlcore::SortDescriptor *__hidden);
  uint64_t v98;
  int v99;
  uint64_t v100;

  v100 = *MEMORY[0x24BDAC8D0];
  v4 = mlcore::ItemPropertyMediaType(a1);
  v5 = (char *)operator new(0x48uLL);
  *(_OWORD *)(v5 + 8) = 0u;
  v6 = (unint64_t *)(v5 + 8);
  *(_QWORD *)v5 = &off_24C33CE50;
  *((_QWORD *)v5 + 3) = &unk_24C339C50;
  *((_QWORD *)v5 + 4) = v4;
  *((_QWORD *)v5 + 5) = 0;
  *((_DWORD *)v5 + 12) = 512;
  *(_OWORD *)(v5 + 56) = 0u;
  v75 = v5 + 24;
  v76 = (std::__shared_weak_count *)v5;
  v7 = mlcore::ItemPropertyTitleOrder((mlcore *)v5);
  v8 = (char *)operator new(0x48uLL);
  *(_OWORD *)(v8 + 8) = 0u;
  v9 = (unint64_t *)(v8 + 8);
  *(_QWORD *)v8 = &off_24C33CE88;
  *((_QWORD *)v8 + 3) = &unk_24C339CA8;
  *((_QWORD *)v8 + 4) = v7;
  *((_QWORD *)v8 + 5) = 0x100000000;
  *((_QWORD *)v8 + 6) = 0;
  *(_OWORD *)(v8 + 56) = 0u;
  v73 = v8 + 24;
  v74 = (std::__shared_weak_count *)v8;
  v72 = 0u;
  if (*(_QWORD *)a1)
  {
    v10 = (unint64_t *)*((_QWORD *)a1 + 1);
    v79 = *(void (***)(mlcore::SortDescriptor *__hidden))a1;
    v80 = (mlcore *)v10;
    if (v10)
    {
      v11 = v10 + 1;
      do
        v12 = __ldxr(v11);
      while (__stxr(v12 + 1, v11));
    }
    v81 = v5 + 24;
    v82 = (void (**)(mlcore::SortDescriptor *__hidden))v5;
    do
      v13 = __ldxr(v6);
    while (__stxr(v13 + 1, v6));
    v83 = (mlcore *)(v8 + 24);
    v84 = v8;
    do
      v14 = __ldxr(v9);
    while (__stxr(v14 + 1, v9));
    v68 = 0;
    v69 = 0;
    v70 = 0;
    v77 = &v68;
    v78 = 0;
    v15 = (__int128 *)operator new(0x30uLL);
    v16 = 0;
    v68 = v15;
    v69 = v15;
    v70 = v15 + 3;
    do
    {
      v17 = *(_OWORD *)&(&v79)[2 * v16];
      *v15 = v17;
      if (*((_QWORD *)&v17 + 1))
      {
        v18 = (unint64_t *)(*((_QWORD *)&v17 + 1) + 8);
        do
          v19 = __ldxr(v18);
        while (__stxr(v19 + 1, v18));
      }
      ++v16;
      ++v15;
    }
    while (v16 != 3);
    v69 = v15;
    mlcore::CreateAndPredicate(&v68, &v71);
    v20 = v71;
    v71 = 0uLL;
    v21 = (std::__shared_weak_count *)*((_QWORD *)&v72 + 1);
    v72 = v20;
    if (v21)
    {
      p_shared_owners = (unint64_t *)&v21->__shared_owners_;
      do
        v23 = __ldaxr(p_shared_owners);
      while (__stlxr(v23 - 1, p_shared_owners));
      if (!v23)
      {
        ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
        std::__shared_weak_count::__release_weak(v21);
      }
    }
    v24 = (std::__shared_weak_count *)*((_QWORD *)&v71 + 1);
    if (*((_QWORD *)&v71 + 1))
    {
      v25 = (unint64_t *)(*((_QWORD *)&v71 + 1) + 8);
      do
        v26 = __ldaxr(v25);
      while (__stlxr(v26 - 1, v25));
      if (!v26)
      {
        ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
        std::__shared_weak_count::__release_weak(v24);
      }
    }
    v77 = &v68;
    std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v77);
    for (i = 4; i != -2; i -= 2)
      std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)&(&v79)[i]);
  }
  else
  {
    v79 = (void (**)(mlcore::SortDescriptor *__hidden))(v5 + 24);
    v80 = (mlcore *)v5;
    do
      v28 = __ldxr(v6);
    while (__stxr(v28 + 1, v6));
    v81 = v8 + 24;
    v82 = (void (**)(mlcore::SortDescriptor *__hidden))v8;
    do
      v29 = __ldxr(v9);
    while (__stxr(v29 + 1, v9));
    v65 = 0;
    v66 = 0;
    v67 = 0;
    v77 = &v65;
    v78 = 0;
    v30 = (__int128 *)operator new(0x20uLL);
    v31 = 0;
    v32 = 0;
    v65 = v30;
    v66 = v30;
    v67 = v30 + 2;
    do
    {
      v33 = v31;
      v34 = *(_OWORD *)&(&v79)[2 * v32];
      *v30 = v34;
      if (*((_QWORD *)&v34 + 1))
      {
        v35 = (unint64_t *)(*((_QWORD *)&v34 + 1) + 8);
        do
          v36 = __ldxr(v35);
        while (__stxr(v36 + 1, v35));
      }
      ++v30;
      v31 = 1;
      v32 = 1;
    }
    while ((v33 & 1) == 0);
    v66 = v30;
    mlcore::CreateAndPredicate(&v65, &v71);
    v37 = v71;
    v71 = 0uLL;
    v38 = (std::__shared_weak_count *)*((_QWORD *)&v72 + 1);
    v72 = v37;
    if (v38)
    {
      v39 = (unint64_t *)&v38->__shared_owners_;
      do
        v40 = __ldaxr(v39);
      while (__stlxr(v40 - 1, v39));
      if (!v40)
      {
        ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
        std::__shared_weak_count::__release_weak(v38);
      }
    }
    v41 = (std::__shared_weak_count *)*((_QWORD *)&v71 + 1);
    if (*((_QWORD *)&v71 + 1))
    {
      v42 = (unint64_t *)(*((_QWORD *)&v71 + 1) + 8);
      do
        v43 = __ldaxr(v42);
      while (__stlxr(v43 - 1, v42));
      if (!v43)
      {
        ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
        std::__shared_weak_count::__release_weak(v41);
      }
    }
    v77 = &v65;
    std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v77);
    for (j = 2; j != -2; j -= 2)
      std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)&(&v79)[j]);
  }
  v45 = mlcore::TypedEntityClass<mlcore::TVEpisode>::sharedPointer();
  std::allocate_shared[abi:ne180100]<mlcore::EntityQuery,std::allocator<mlcore::EntityQuery>,mlcore::EntityClass *,std::shared_ptr<mlcore::Predicate> &,void>(a2, v45, v72, *((std::__shared_weak_count **)&v72 + 1));
  v46 = *a2;
  if ((v47 & 1) == 0
  {
    v57 = (mlcore *)operator new();
    v58 = (mlcore *)mlcore::ItemPropertySeriesNameOrder(v57);
    v79 = &off_24C337670;
    v80 = v58;
    LODWORD(v81) = 0;
    v59 = (mlcore *)mlcore::ItemPropertyItemArtistPersistentID(v58);
    v82 = &off_24C337670;
    v83 = v59;
    LODWORD(v84) = 0;
    v60 = (mlcore *)mlcore::ItemPropertySeasonNumber(v59);
    v85 = &off_24C337670;
    v86 = v60;
    v87 = 0;
    v61 = (mlcore *)mlcore::ItemPropertyAlbumOrder(v60);
    v88 = &off_24C337670;
    v89 = v61;
    v90 = 0;
    v62 = (mlcore *)mlcore::ItemPropertyEpisodeSortID(v61);
    v91 = &off_24C337670;
    v92 = v62;
    v93 = 0;
    v63 = (mlcore *)mlcore::ItemPropertyTrackNumber(v62);
    v94 = &off_24C337670;
    v95 = v63;
    v96 = 0;
    v64 = mlcore::ItemPropertyTitleOrder(v63);
    v97 = &off_24C337670;
    v98 = v64;
    v99 = 0;
    std::vector<mlcore::SortDescriptor>::vector[abi:ne180100](v57, (uint64_t)&v79, 7uLL);
    mlcore::StandardTVEpisodeSortDescriptors(void)::sortDescriptors = (uint64_t)v57;
  }
  mlcore::PropertiesQuery::setSortDescriptors(v46, (char *)mlcore::StandardTVEpisodeSortDescriptors(void)::sortDescriptors);
  v48 = (std::__shared_weak_count *)*((_QWORD *)&v72 + 1);
  if (*((_QWORD *)&v72 + 1))
  {
    v49 = (unint64_t *)(*((_QWORD *)&v72 + 1) + 8);
    do
      v50 = __ldaxr(v49);
    while (__stlxr(v50 - 1, v49));
    if (!v50)
    {
      ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
      std::__shared_weak_count::__release_weak(v48);
    }
  }
  v51 = v74;
  if (v74)
  {
    v52 = (unint64_t *)&v74->__shared_owners_;
    do
      v53 = __ldaxr(v52);
    while (__stlxr(v53 - 1, v52));
    if (!v53)
    {
      ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
      std::__shared_weak_count::__release_weak(v51);
    }
  }
  v54 = v76;
  if (v76)
  {
    v55 = (unint64_t *)&v76->__shared_owners_;
    do
      v56 = __ldaxr(v55);
    while (__stlxr(v56 - 1, v55));
    if (!v56)
    {
      ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
      std::__shared_weak_count::__release_weak(v54);
    }
  }
}

void sub_20A7A49F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  va_list va;
  uint64_t v14;
  uint64_t v15;
  va_list va1;
  uint64_t v17;
  va_list va2;

  va_start(va2, a9);
  va_start(va1, a9);
  va_start(va, a9);
  v12 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v15 = va_arg(va2, _QWORD);
  v17 = va_arg(va2, _QWORD);
  MEMORY[0x20BD27AFC](v10, 0x20C40960023A9);
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100](v9);
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)va2);
  _Unwind_Resume(a1);
}

void mlcore::EntityQuery::tvSeasonsForShowQuery(mlcore *a1@<X0>, _QWORD *a2@<X1>, char **a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  unint64_t *v9;
  mlcore *v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  __int128 *v17;
  char v18;
  uint64_t v19;
  char v20;
  __int128 v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  uint64_t i;
  uint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  __int128 *v34;
  char v35;
  uint64_t v36;
  char v37;
  __int128 v38;
  unint64_t *v39;
  unint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  uint64_t j;
  mlcore *v45;
  char *v46;
  mlcore *HasTitle;
  mlcore *v48;
  uint64_t v49;
  void **v50;
  uint64_t v51;
  void **v52;
  void (**v53)(mlcore::SortDescriptor *__hidden);
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  std::__shared_weak_count *v57;
  uint64_t *v58;
  unint64_t v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  __int128 **v66;
  void **v67;
  void **v68;
  __int128 *v69;
  __int128 *v70;
  __int128 *v71;
  void (**v72)(mlcore::SortDescriptor *__hidden);
  std::__shared_weak_count *v73;
  __int128 *v74;
  __int128 *v75;
  __int128 *v76;
  uint64_t v77;
  std::__shared_weak_count *v78;
  _QWORD *v79;
  std::__shared_weak_count *v80;
  char *v81;
  std::__shared_weak_count *v82;
  __int128 v83;
  void (**v84)(mlcore::SortDescriptor *__hidden);
  mlcore *v85;
  _QWORD *v86;
  void (**v87)(mlcore::SortDescriptor *__hidden);
  mlcore *v88;
  int v89;
  void (**v90)(mlcore::SortDescriptor *__hidden);
  uint64_t v91;
  int v92;
  uint64_t v93;

  v93 = *MEMORY[0x24BDAC8D0];
  v6 = mlcore::ItemPropertyItemArtistPersistentID(a1);
  v7 = *(_QWORD *)(*(_QWORD *)a1 + 224);
  v8 = (char *)operator new(0x48uLL);
  *(_OWORD *)(v8 + 8) = 0u;
  v9 = (unint64_t *)(v8 + 8);
  *(_QWORD *)v8 = &off_24C33CE88;
  *((_QWORD *)v8 + 3) = &unk_24C339CA8;
  *((_QWORD *)v8 + 4) = v6;
  *((_QWORD *)v8 + 5) = 0;
  *((_QWORD *)v8 + 6) = v7;
  *(_OWORD *)(v8 + 56) = 0u;
  v81 = v8 + 24;
  v82 = (std::__shared_weak_count *)v8;
  v10 = (mlcore *)mlcore::AlbumPropertyPersistentID((mlcore *)v8);
  v11 = mlcore::ItemPropertyAlbumPersistentID(v10);
  v12 = (std::__shared_weak_count *)operator new(0x38uLL);
  v12->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v12->__shared_owners_;
  v12->__shared_weak_owners_ = 0;
  v12->__vftable = (std::__shared_weak_count_vtbl *)&off_24C33D240;
  v12[1].__vftable = (std::__shared_weak_count_vtbl *)&off_24C33A5A8;
  v12[1].__shared_owners_ = (uint64_t)v10;
  v12[1].__shared_weak_owners_ = 0;
  v12[2].__vftable = (std::__shared_weak_count_vtbl *)v11;
  v79 = &v12[1].__vftable;
  v80 = v12;
  v14 = mlcore::TypedEntityClass<mlcore::TVEpisode>::sharedPointer();
  v84 = (void (**)(mlcore::SortDescriptor *__hidden))(v8 + 24);
  v85 = (mlcore *)v8;
  do
    v15 = __ldxr(v9);
  while (__stxr(v15 + 1, v9));
  v86 = &v12[1].__vftable;
  v87 = (void (**)(mlcore::SortDescriptor *__hidden))v12;
  do
    v16 = __ldxr(p_shared_owners);
  while (__stxr(v16 + 1, p_shared_owners));
  v74 = 0;
  v75 = 0;
  v76 = 0;
  v66 = &v74;
  LOBYTE(v67) = 0;
  v17 = (__int128 *)operator new(0x20uLL);
  v18 = 0;
  v19 = 0;
  v74 = v17;
  v75 = v17;
  v76 = v17 + 2;
  do
  {
    v20 = v18;
    v21 = *(_OWORD *)&(&v84)[2 * v19];
    *v17 = v21;
    if (*((_QWORD *)&v21 + 1))
    {
      v22 = (unint64_t *)(*((_QWORD *)&v21 + 1) + 8);
      do
        v23 = __ldxr(v22);
      while (__stxr(v23 + 1, v22));
    }
    ++v17;
    v18 = 1;
    v19 = 1;
  }
  while ((v20 & 1) == 0);
  v75 = v17;
  mlcore::CreateAndPredicate(&v74, &v83);
  std::allocate_shared[abi:ne180100]<mlcore::Query,std::allocator<mlcore::Query>,mlcore::EntityClass *,std::shared_ptr<mlcore::Predicate>,void>(&v77, v14, &v83);
  v24 = (std::__shared_weak_count *)*((_QWORD *)&v83 + 1);
  if (*((_QWORD *)&v83 + 1))
  {
    v25 = (unint64_t *)(*((_QWORD *)&v83 + 1) + 8);
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  v66 = &v74;
  std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v66);
  for (i = 2; i != -2; i -= 2)
    std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)&(&v84)[i]);
  std::allocate_shared[abi:ne180100]<mlcore::ExistsPredicate,std::allocator<mlcore::ExistsPredicate>,std::shared_ptr<mlcore::Query> &,void>(&v72, v77, v78);
  v28 = mlcore::TypedEntityClass<mlcore::TVSeason>::sharedPointer();
  v84 = v72;
  v85 = (mlcore *)v73;
  if (v73)
  {
    v29 = (unint64_t *)&v73->__shared_owners_;
    do
      v30 = __ldxr(v29);
    while (__stxr(v30 + 1, v29));
  }
  v31 = a2[1];
  v86 = (_QWORD *)*a2;
  v87 = (void (**)(mlcore::SortDescriptor *__hidden))v31;
  if (v31)
  {
    v32 = (unint64_t *)(v31 + 8);
    do
      v33 = __ldxr(v32);
    while (__stxr(v33 + 1, v32));
  }
  v69 = 0;
  v70 = 0;
  v71 = 0;
  v66 = &v69;
  LOBYTE(v67) = 0;
  v34 = (__int128 *)operator new(0x20uLL);
  v35 = 0;
  v36 = 0;
  v69 = v34;
  v70 = v34;
  v71 = v34 + 2;
  do
  {
    v37 = v35;
    v38 = *(_OWORD *)&(&v84)[2 * v36];
    *v34 = v38;
    if (*((_QWORD *)&v38 + 1))
    {
      v39 = (unint64_t *)(*((_QWORD *)&v38 + 1) + 8);
      do
        v40 = __ldxr(v39);
      while (__stxr(v40 + 1, v39));
    }
    ++v34;
    v35 = 1;
    v36 = 1;
  }
  while ((v37 & 1) == 0);
  v70 = v34;
  mlcore::CreateAndPredicate(&v69, &v83);
  std::allocate_shared[abi:ne180100]<mlcore::EntityQuery,std::allocator<mlcore::EntityQuery>,mlcore::EntityClass *,std::shared_ptr<mlcore::Predicate>,void>(a3, v28, (uint64_t *)&v83);
  v41 = (std::__shared_weak_count *)*((_QWORD *)&v83 + 1);
  if (*((_QWORD *)&v83 + 1))
  {
    v42 = (unint64_t *)(*((_QWORD *)&v83 + 1) + 8);
    do
      v43 = __ldaxr(v42);
    while (__stlxr(v43 - 1, v42));
    if (!v43)
    {
      ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
      std::__shared_weak_count::__release_weak(v41);
    }
  }
  v66 = &v69;
  std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v66);
  for (j = 2; j != -2; j -= 2)
    v45 = (mlcore *)std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)&(&v84)[j]);
  v46 = *a3;
  HasTitle = (mlcore *)mlcore::AlbumPropertyHasTitle(v45);
  v84 = &off_24C337670;
  v85 = HasTitle;
  LODWORD(v86) = 1;
  v48 = (mlcore *)mlcore::AlbumPropertyOrder(HasTitle);
  v87 = &off_24C337670;
  v88 = v48;
  v89 = 0;
  v49 = mlcore::AlbumPropertyPersistentID(v48);
  v90 = &off_24C337670;
  v91 = v49;
  v92 = 0;
  v67 = 0;
  v68 = 0;
  v66 = 0;
  *(_QWORD *)&v83 = &v66;
  BYTE8(v83) = 0;
  v50 = (void **)operator new(0x48uLL);
  v51 = 0;
  v66 = (__int128 **)v50;
  v68 = v50 + 9;
  do
  {
    v52 = &v50[v51];
    v53 = (&v84)[v51 + 1];
    *v52 = &off_24C337670;
    v52[1] = v53;
    *((_DWORD *)v52 + 4) = (&v86)[v51];
    v51 += 3;
  }
  while (v51 != 9);
  v67 = v50 + 9;
  mlcore::PropertiesQuery::setSortDescriptors(v46, (char *)&v66);
  *(_QWORD *)&v83 = &v66;
  std::vector<mlcore::SortDescriptor>::__destroy_vector::operator()[abi:ne180100]((void ***)&v83);
  v54 = v73;
  if (v73)
  {
    v55 = (unint64_t *)&v73->__shared_owners_;
    do
      v56 = __ldaxr(v55);
    while (__stlxr(v56 - 1, v55));
    if (!v56)
    {
      ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
      std::__shared_weak_count::__release_weak(v54);
    }
  }
  v57 = v78;
  if (v78)
  {
    v58 = &v78->__shared_owners_;
    do
      v59 = __ldaxr((unint64_t *)v58);
    while (__stlxr(v59 - 1, (unint64_t *)v58));
    if (!v59)
    {
      ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
      std::__shared_weak_count::__release_weak(v57);
    }
  }
  v60 = v80;
  if (v80)
  {
    v61 = (unint64_t *)&v80->__shared_owners_;
    do
      v62 = __ldaxr(v61);
    while (__stlxr(v62 - 1, v61));
    if (!v62)
    {
      ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
      std::__shared_weak_count::__release_weak(v60);
    }
  }
  v63 = v82;
  if (v82)
  {
    v64 = (unint64_t *)&v82->__shared_owners_;
    do
      v65 = __ldaxr(v64);
    while (__stlxr(v65 - 1, v64));
    if (!v65)
    {
      ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
      std::__shared_weak_count::__release_weak(v63);
    }
  }
}

void sub_20A7A4FEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,char a22,uint64_t a23,char a24,uint64_t a25,void **a26)
{
  uint64_t v26;

  std::vector<mlcore::SortDescriptor>::__destroy_vector::operator()[abi:ne180100](&a26);
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100](v26);
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)&a20);
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)&a22);
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)&a24);
  _Unwind_Resume(a1);
}

void mlcore::EntityQuery::podcastsQuery(uint64_t a1@<X0>, char **a2@<X8>)
{
  uint64_t v4;
  char *v5;
  mlcore *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  char **v14;
  char v15;
  _BYTE v16[8];
  mlcore *v17;
  _DWORD v18[4];
  uint64_t v19;
  int v20;
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  v4 = mlcore::TypedEntityClass<mlcore::Podcast>::sharedPointer();
  std::allocate_shared[abi:ne180100]<mlcore::EntityQuery,std::allocator<mlcore::EntityQuery>,mlcore::EntityClass *,std::shared_ptr<mlcore::Predicate> &,void>(a2, v4, *(_QWORD *)a1, *(std::__shared_weak_count **)(a1 + 8));
  v5 = *a2;
  v17 = (mlcore *)mlcore::AlbumPropertyOrder(v6);
  v18[0] = 0;
  v19 = mlcore::AlbumPropertyPersistentID(v17);
  v20 = 0;
  v12 = 0;
  v13 = 0;
  v11 = 0;
  v14 = &v11;
  v15 = 0;
  v7 = (char *)operator new(0x30uLL);
  v8 = 0;
  v11 = v7;
  v13 = v7 + 48;
  do
  {
    v9 = &v7[v8 * 4];
    v10 = *(_QWORD *)&v16[v8 * 4 + 8];
    *(_QWORD *)v9 = &off_24C337670;
    *((_QWORD *)v9 + 1) = v10;
    *((_DWORD *)v9 + 4) = v18[v8];
    v8 += 6;
  }
  while (v8 != 12);
  v12 = v7 + 48;
  mlcore::PropertiesQuery::setSortDescriptors(v5, (char *)&v11);
  v14 = &v11;
  std::vector<mlcore::SortDescriptor>::__destroy_vector::operator()[abi:ne180100]((void ***)&v14);
}

void sub_20A7A5208(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v4;
  va_list va;

  va_start(va, a4);
  std::vector<mlcore::SortDescriptor>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100](v4);
  _Unwind_Resume(a1);
}

void mlcore::EntityQuery::podcastEpisodesQuery(mlcore *a1@<X0>, char **a2@<X8>)
{
  uint64_t v4;
  mlcore *v5;
  uint64_t v6;
  char *v7;
  unint64_t *v8;
  unint64_t *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  __int128 *v15;
  uint64_t v16;
  __int128 v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t i;
  uint64_t v21;
  char *v22;
  unsigned __int8 v23;
  std::__shared_weak_count *v24;
  uint64_t *p_shared_owners;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  mlcore *v33;
  mlcore *v34;
  mlcore *v35;
  uint64_t v36;
  __int128 *v37;
  __int128 *v38;
  __int128 *v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  char *v42;
  std::__shared_weak_count *v43;
  uint64_t v44;
  uint64_t v45;
  __int128 **v46;
  char v47;
  uint64_t v48;
  mlcore *v49;
  uint64_t v50;
  void (**v51)(mlcore::SortDescriptor *__hidden);
  mlcore *v52;
  char *v53;
  void (**v54)(mlcore::SortDescriptor *__hidden);
  uint64_t v55;
  int v56;
  uint64_t v57;

  v57 = *MEMORY[0x24BDAC8D0];
  v4 = mlcore::ItemPropertyMediaType(a1);
  v48 = 0x10000000004;
  v5 = (mlcore *)mlcore::CreateInPredicate<int>(&v44, v4, (int *)&v48, 2);
  v6 = mlcore::ItemPropertyTitleOrder(v5);
  v7 = (char *)operator new(0x48uLL);
  *(_OWORD *)(v7 + 8) = 0u;
  v8 = (unint64_t *)(v7 + 8);
  *(_QWORD *)v7 = &off_24C33CE88;
  *((_QWORD *)v7 + 3) = &unk_24C339CA8;
  *((_QWORD *)v7 + 4) = v6;
  *((_QWORD *)v7 + 5) = 0x100000000;
  *((_QWORD *)v7 + 6) = 0;
  *(_OWORD *)(v7 + 56) = 0u;
  v42 = v7 + 24;
  v43 = (std::__shared_weak_count *)v7;
  v9 = (unint64_t *)*((_QWORD *)a1 + 1);
  v48 = *(_QWORD *)a1;
  v49 = (mlcore *)v9;
  if (v9)
  {
    v10 = v9 + 1;
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  v50 = v44;
  v51 = (void (**)(mlcore::SortDescriptor *__hidden))v45;
  if (v45)
  {
    v12 = (unint64_t *)(v45 + 8);
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  v52 = (mlcore *)(v7 + 24);
  v53 = v7;
  do
    v14 = __ldxr(v8);
  while (__stxr(v14 + 1, v8));
  v37 = 0;
  v38 = 0;
  v39 = 0;
  v46 = &v37;
  v47 = 0;
  v15 = (__int128 *)operator new(0x30uLL);
  v16 = 0;
  v37 = v15;
  v38 = v15;
  v39 = v15 + 3;
  do
  {
    v17 = *((_OWORD *)&v48 + v16);
    *v15 = v17;
    if (*((_QWORD *)&v17 + 1))
    {
      v18 = (unint64_t *)(*((_QWORD *)&v17 + 1) + 8);
      do
        v19 = __ldxr(v18);
      while (__stxr(v19 + 1, v18));
    }
    ++v16;
    ++v15;
  }
  while (v16 != 3);
  v38 = v15;
  mlcore::CreateAndPredicate(&v37, &v40);
  v46 = &v37;
  std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v46);
  for (i = 32; i != -16; i -= 16)
    std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)&v48 + i);
  v21 = mlcore::TypedEntityClass<mlcore::PodcastEpisode>::sharedPointer();
  std::allocate_shared[abi:ne180100]<mlcore::EntityQuery,std::allocator<mlcore::EntityQuery>,mlcore::EntityClass *,std::shared_ptr<mlcore::Predicate> &,void>(a2, v21, v40, v41);
  v22 = *a2;
  if ((v23 & 1) == 0
  {
    v33 = (mlcore *)operator new();
    v34 = (mlcore *)mlcore::ItemPropertyDateReleased(v33);
    v48 = (uint64_t)&off_24C337670;
    v49 = v34;
    LODWORD(v50) = 0;
    v35 = (mlcore *)mlcore::ItemPropertyTrackNumber(v34);
    v51 = &off_24C337670;
    v52 = v35;
    LODWORD(v53) = 0;
    v36 = mlcore::ItemPropertyTitleOrder(v35);
    v54 = &off_24C337670;
    v55 = v36;
    v56 = 0;
    std::vector<mlcore::SortDescriptor>::vector[abi:ne180100](v33, (uint64_t)&v48, 3uLL);
    mlcore::StandardPodcastEpisodeSortDescriptors(void)::sortDescriptors = (uint64_t)v33;
  }
  mlcore::PropertiesQuery::setSortDescriptors(v22, (char *)mlcore::StandardPodcastEpisodeSortDescriptors(void)::sortDescriptors);
  v24 = v41;
  if (v41)
  {
    p_shared_owners = &v41->__shared_owners_;
    do
      v26 = __ldaxr((unint64_t *)p_shared_owners);
    while (__stlxr(v26 - 1, (unint64_t *)p_shared_owners));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  v27 = v43;
  if (v43)
  {
    v28 = (unint64_t *)&v43->__shared_owners_;
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  v30 = (std::__shared_weak_count *)v45;
  if (v45)
  {
    v31 = (unint64_t *)(v45 + 8);
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }
}

void sub_20A7A556C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  va_list va;
  uint64_t v10;
  uint64_t v11;
  va_list va1;
  uint64_t v13;
  va_list va2;

  va_start(va2, a5);
  va_start(va1, a5);
  va_start(va, a5);
  v8 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v11 = va_arg(va2, _QWORD);
  v13 = va_arg(va2, _QWORD);
  MEMORY[0x20BD27AFC](v6, 0x20C40960023A9);
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100](v5);
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)va2);
  _Unwind_Resume(a1);
}

uint64_t mlcore::EntityQuery::identityPropertiesToFetch(mlcore::EntityQuery *this)
{
  return (uint64_t)this + 104;
}

void std::vector<mlcore::PropertyCache>::__throw_out_of_range[abi:ne180100]()
{
  std::__throw_out_of_range[abi:ne180100]("vector");
}

uint64_t mlcore::EntityQueryResult::idEntityAtIndex(mlcore::EntityQueryResult *this, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = (*(uint64_t (**)(mlcore::EntityQueryResult *))(*(_QWORD *)this + 16))(this);
  v5 = mlcore::EntityQueryResult::persistentIDAtIndex(this, a2);
  v6 = **((_QWORD **)this + 23);
  if (0x84BDA12F684BDA13 * ((*(_QWORD *)(*((_QWORD *)this + 23) + 8) - v6) >> 3) <= a2)
    std::vector<mlcore::PropertyCache>::__throw_out_of_range[abi:ne180100]();
  return (*(uint64_t (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v4 + 48))(v4, v5, v6 + 216 * a2);
}

void mlcore::EntityQueryResult::allEntities(mlcore::EntityQueryResult *this@<X0>, char **a2@<X8>)
{
  unint64_t v4;
  unint64_t v5;
  char *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  __int128 v17;
  int64x2_t v18;
  char *v19;
  char *v20;
  __int128 v21;
  uint64_t v22;
  int64x2_t v23;
  char *v24;
  _QWORD *v25;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  if (*(_QWORD *)(*((_QWORD *)this + 23) + 8) != **((_QWORD **)this + 23))
  {
    v4 = 0;
    do
    {
      mlcore::EntityQueryResult::entityAtIndex(this, v4);
      v6 = a2[1];
      v5 = (unint64_t)a2[2];
      if ((unint64_t)v6 >= v5)
      {
        v7 = (v6 - *a2) >> 4;
        v8 = v7 + 1;
        if ((unint64_t)(v7 + 1) >> 60)
          std::vector<std::string>::__throw_length_error[abi:ne180100]();
        v9 = v5 - (_QWORD)*a2;
        if (v9 >> 3 > v8)
          v8 = v9 >> 3;
        if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0)
          v10 = 0xFFFFFFFFFFFFFFFLL;
        else
          v10 = v8;
        v25 = a2 + 2;
        v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<mediaplatform::DatabaseParameterBase>>>(v10);
        v13 = &v11[16 * v7];
        *(_OWORD *)v13 = v21;
        v21 = 0uLL;
        v15 = *a2;
        v14 = a2[1];
        if (v14 == *a2)
        {
          v18 = vdupq_n_s64((unint64_t)v14);
          v16 = &v11[16 * v7];
        }
        else
        {
          v16 = &v11[16 * v7];
          do
          {
            v17 = *((_OWORD *)v14 - 1);
            v14 -= 16;
            *((_OWORD *)v16 - 1) = v17;
            v16 -= 16;
            *(_QWORD *)v14 = 0;
            *((_QWORD *)v14 + 1) = 0;
          }
          while (v14 != v15);
          v18 = *(int64x2_t *)a2;
        }
        v19 = v13 + 16;
        *a2 = v16;
        a2[1] = v13 + 16;
        v23 = v18;
        v20 = a2[2];
        a2[2] = &v11[16 * v12];
        v24 = v20;
        v22 = v18.i64[0];
        std::__split_buffer<std::shared_ptr<mediaplatform::SQLExpression const>>::~__split_buffer((uint64_t)&v22);
        a2[1] = v19;
      }
      else
      {
        *(_OWORD *)v6 = v21;
        a2[1] = v6 + 16;
      }
      ++v4;
    }
    while (v4 < 0x84BDA12F684BDA13
               * ((uint64_t)(*(_QWORD *)(*((_QWORD *)this + 23) + 8) - **((_QWORD **)this + 23)) >> 3));
  }
}

void sub_20A7A5890(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::vector<std::shared_ptr<mediaplatform::SQLExpression const>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

char *mlcore::EntityQueryResult::localizedSectionIndices(mlcore::EntityQueryResult *this)
{
  char *v1;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  char *v12;
  __int128 v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v18;
  std::__shared_weak_count *v19;
  void **v20[2];
  std::string v21;

  v1 = (char *)this + 216;
  if (!*((_QWORD *)this + 27))
  {
    mlcore::DeviceLibraryView::library(*((mlcore::DeviceLibraryView **)this + 20), &v18);
    v3 = *(_QWORD *)(v18 + 152);
    v4 = *(std::__shared_weak_count **)(v18 + 160);
    v20[0] = (void **)v3;
    v20[1] = (void **)&v4->__vftable;
    if (v4)
    {
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v6 = __ldxr(p_shared_owners);
      while (__stxr(v6 + 1, p_shared_owners));
    }
    memset(&v21, 0, sizeof(v21));
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v21, *(__int128 **)(v3 + 304), *(__int128 **)(v3 + 312), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v3 + 312) - *(_QWORD *)(v3 + 304)) >> 3));
    if (v4)
    {
      v7 = (unint64_t *)&v4->__shared_owners_;
      do
        v8 = __ldaxr(v7);
      while (__stlxr(v8 - 1, v7));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
    v9 = v19;
    if (v19)
    {
      v10 = (unint64_t *)&v19->__shared_owners_;
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 - 1, v10));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
    v12 = (char *)operator new(0x30uLL);
    *(_OWORD *)(v12 + 8) = 0u;
    *(_QWORD *)v12 = &off_24C33D710;
    *((_QWORD *)v12 + 3) = 0;
    *((_OWORD *)v12 + 2) = 0u;
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)v12 + 1, (__int128 *)v21.__r_.__value_.__l.__data_, (__int128 *)v21.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v21.__r_.__value_.__l.__size_ - v21.__r_.__value_.__r.__words[0]) >> 3));
    *(_QWORD *)&v13 = v12 + 24;
    *((_QWORD *)&v13 + 1) = v12;
    v14 = (std::__shared_weak_count *)*((_QWORD *)this + 28);
    *(_OWORD *)((char *)this + 216) = v13;
    if (v14)
    {
      v15 = (unint64_t *)&v14->__shared_owners_;
      do
        v16 = __ldaxr(v15);
      while (__stlxr(v16 - 1, v15));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
    v20[0] = (void **)&v21;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v20);
  }
  return v1;
}

void sub_20A7A5A5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char *a12, uint64_t a13, char a14)
{
  std::__shared_weak_count *v14;
  void *v16;

  std::__shared_weak_count::~__shared_weak_count(v14);
  operator delete(v16);
  a12 = &a14;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  _Unwind_Resume(a1);
}

mlcore::DeviceLibraryView *mlcore::EntityQueryResult::optionalLocalizedSectionIndicesRange(mlcore::DeviceLibraryView **this)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v13;
  std::__shared_weak_count *v14;
  void **v15[2];
  std::string v16;

  if (!this[30])
  {
    mlcore::DeviceLibraryView::library(this[20], &v13);
    v2 = *(_QWORD *)(v13 + 152);
    v3 = *(std::__shared_weak_count **)(v13 + 160);
    v15[0] = (void **)v2;
    v15[1] = (void **)&v3->__vftable;
    if (v3)
    {
      p_shared_owners = (unint64_t *)&v3->__shared_owners_;
      do
        v5 = __ldxr(p_shared_owners);
      while (__stxr(v5 + 1, p_shared_owners));
    }
    memset(&v16, 0, sizeof(v16));
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v16, *(__int128 **)(v2 + 304), *(__int128 **)(v2 + 312), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v2 + 312) - *(_QWORD *)(v2 + 304)) >> 3));
    if (v3)
    {
      v6 = (unint64_t *)&v3->__shared_owners_;
      do
        v7 = __ldaxr(v6);
      while (__stlxr(v7 - 1, v6));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
      }
    }
    v8 = v14;
    if (v14)
    {
      v9 = (unint64_t *)&v14->__shared_owners_;
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 - 1, v9));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
    v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v16.__r_.__value_.__l.__size_ - v16.__r_.__value_.__r.__words[0]) >> 3);
    if (v11 >= 3)
    {
      this[29] = (mlcore::DeviceLibraryView *)1;
      this[30] = (mlcore::DeviceLibraryView *)(v11 - 2);
    }
    v15[0] = (void **)&v16;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v15);
  }
  return this[29];
}

void sub_20A7A5BD8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  std::shared_ptr<mlcore::Predicate>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t mlcore::EntityQueryResult::entityRevision(mlcore::EntityQueryResult *this)
{
  return *((_QWORD *)this + 31);
}

uint64_t mlcore::EntityQueryResult::EntityQueryResult(uint64_t a1, uint64_t a2)
{
  std::exception v5;
  __int128 v6;
  void *v7;
  int v8;
  std::string v9;
  std::exception v10[8];
  std::string __p;

  v6 = *(_OWORD *)(a2 + 8);
  v5.__vftable = (std::exception_vtbl *)off_24C335E70;
  v7 = &unk_24C335EA0;
  v8 = *(_DWORD *)(a2 + 32);
  if (*(char *)(a2 + 63) < 0)
    std::string::__init_copy_ctor_external(&v9, *(const std::string::value_type **)(a2 + 40), *(_QWORD *)(a2 + 48));
  else
    v9 = *(std::string *)(a2 + 40);
  mediaplatform::PlatformErrorCondition::PlatformErrorCondition((mediaplatform::PlatformErrorCondition *)v10, (const mediaplatform::PlatformErrorCondition *)(a2 + 64));
  if (*(char *)(a2 + 151) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(a2 + 128), *(_QWORD *)(a2 + 136));
  else
    __p = *(std::string *)(a2 + 128);
  mlcore::QueryResult::QueryResult(a1, (uint64_t)&v5);
  v5.__vftable = (std::exception_vtbl *)off_24C335E70;
  v7 = &unk_24C335EA0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  mediaplatform::PlatformErrorCondition::~PlatformErrorCondition(v10);
  if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v9.__r_.__value_.__l.__data_);
  std::exception::~exception(&v5);
  *(_QWORD *)a1 = &off_24C339748;
  *(_QWORD *)(a1 + 160) = 0;
  *(_QWORD *)(a1 + 168) = 0;
  *(_QWORD *)(a1 + 256) = 0;
  *(_QWORD *)(a1 + 264) = 0;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  return a1;
}

void sub_20A7A5D38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  std::exception *v20;

  mediaplatform::PlatformErrorCondition::~PlatformErrorCondition(v20);
  if (a20 < 0)
    operator delete(__p);
  std::exception::~exception(&a10);
  _Unwind_Resume(a1);
}

mlcore::DBInfoTable *mlcore::DBInfoTable::DBInfoTable(mlcore::DBInfoTable *this)
{
  void *__p[2];
  char v4;
  _BYTE v5[80];
  void *v6[2];
  char v7;
  _BYTE v8[80];
  void *v9[2];
  char v10;
  _BYTE v11[64];
  void *v12[2];
  char v13;
  _QWORD v14[3];
  char v15;
  void *v16[2];
  char v17;
  _QWORD v18[3];
  char v19;
  void *v20[2];
  char v21;
  _BYTE v22[64];
  void *v23[2];
  char v24;
  _QWORD v25[3];
  char v26;
  void *v27[2];
  char v28;
  _QWORD v29[3];
  char v30;
  void *v31[2];
  char v32;

  std::string::basic_string[abi:ne180100]<0>(v31, "db_info");
  std::string::basic_string[abi:ne180100]<0>(v27, "db_pid");
  mlcore::MediaColumn<long long>::MediaColumn((uint64_t)v29, (uint64_t)v27, 1);
  std::string::basic_string[abi:ne180100]<0>(v23, "primary_container_pid");
  mlcore::MediaColumn<long long>::MediaColumn((uint64_t)v25, (uint64_t)v23, 0);
  std::string::basic_string[abi:ne180100]<0>(v20, "media_folder_url");
  mlcore::MediaColumn<std::string>::MediaColumn((uint64_t)v22, (uint64_t)v20, 0);
  std::string::basic_string[abi:ne180100]<0>(v16, "audio_language");
  mlcore::MediaColumn<int>::MediaColumn((uint64_t)v18, (uint64_t)v16, 0);
  std::string::basic_string[abi:ne180100]<0>(v12, "subtitle_language");
  mlcore::MediaColumn<int>::MediaColumn((uint64_t)v14, (uint64_t)v12, 0);
  std::string::basic_string[abi:ne180100]<0>(v9, "genius_cuid");
  mlcore::MediaColumn<std::string>::MediaColumn((uint64_t)v11, (uint64_t)v9, 0);
  std::string::basic_string[abi:ne180100]<0>(v6, "bib");
  mlcore::MediaColumn<mediaplatform::Data>::MediaColumn((uint64_t)v8, (uint64_t)v6);
  std::string::basic_string[abi:ne180100]<0>(__p, "rib");
  mlcore::MediaColumn<mediaplatform::Data>::MediaColumn((uint64_t)v5, (uint64_t)__p);
  mlcore::MediaTable<long long,long long,std::string,int,int,std::string,mediaplatform::Data,mediaplatform::Data>::MediaTable((uint64_t)this, (uint64_t)v31, (uint64_t)v29, (uint64_t)v25, (uint64_t)v22, (uint64_t)v18, (uint64_t)v14, (uint64_t)v11, (uint64_t)v8, (uint64_t)v5);
  mediaplatform::DatabaseColumn<mediaplatform::Data>::~DatabaseColumn((uint64_t)v5);
  if (v4 < 0)
    operator delete(__p[0]);
  mediaplatform::DatabaseColumn<mediaplatform::Data>::~DatabaseColumn((uint64_t)v8);
  if (v7 < 0)
    operator delete(v6[0]);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)v11);
  if (v10 < 0)
    operator delete(v9[0]);
  v14[0] = off_24C335D90;
  if (v15 < 0)
    operator delete((void *)v14[1]);
  if (v13 < 0)
    operator delete(v12[0]);
  v18[0] = off_24C335D90;
  if (v19 < 0)
    operator delete((void *)v18[1]);
  if (v17 < 0)
    operator delete(v16[0]);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)v22);
  if (v21 < 0)
    operator delete(v20[0]);
  v25[0] = off_24C335D90;
  if (v26 < 0)
    operator delete((void *)v25[1]);
  if (v24 < 0)
    operator delete(v23[0]);
  v29[0] = off_24C335D90;
  if (v30 < 0)
    operator delete((void *)v29[1]);
  if (v28 < 0)
    operator delete(v27[0]);
  if (v32 < 0)
    operator delete(v31[0]);
  *(_QWORD *)this = off_24C336688;
  return this;
}

void sub_20A7A6004(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,void *a44,uint64_t a45,int a46,__int16 a47,char a48,char a49,char a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,void *a58,uint64_t a59,int a60,__int16 a61,char a62,char a63)
{
  uint64_t a64;
  void *a65;
  char a70;
  void *a72;
  char a73;
  uint64_t a74;
  void *a75;
  char a76;
  void *a77;
  char a78;
  char a79;
  uint64_t v79;

  mediaplatform::DatabaseColumn<mediaplatform::Data>::~DatabaseColumn((uint64_t)&a18);
  if (a17 < 0)
    operator delete(__p);
  mediaplatform::DatabaseColumn<mediaplatform::Data>::~DatabaseColumn((uint64_t)&a34);
  if (a33 < 0)
    operator delete(a28);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&a50);
  if (a49 < 0)
    operator delete(a44);
  a64 = (uint64_t)off_24C335D90;
  if (a70 < 0)
    operator delete(a65);
  if (a63 < 0)
    operator delete(a58);
  a74 = (uint64_t)off_24C335D90;
  if (a76 < 0)
    operator delete(a75);
  if (a73 < 0)
    operator delete(a72);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&a79);
  if (a78 < 0)
    operator delete(a77);
  *(_QWORD *)(v79 - 176) = off_24C335D90;
  if (*(char *)(v79 - 145) < 0)
    operator delete(*(void **)(v79 - 168));
  if (*(char *)(v79 - 177) < 0)
    operator delete(*(void **)(v79 - 200));
  *(_QWORD *)(v79 - 104) = off_24C335D90;
  if (*(char *)(v79 - 73) < 0)
    operator delete(*(void **)(v79 - 96));
  if (*(char *)(v79 - 105) < 0)
    operator delete(*(void **)(v79 - 128));
  if (*(char *)(v79 - 33) < 0)
    operator delete(*(void **)(v79 - 56));
  _Unwind_Resume(a1);
}

void sub_20A7A6170()
{
  JUMPOUT(0x20A7A60D8);
}

void sub_20A7A6178()
{
  JUMPOUT(0x20A7A60E8);
}

void sub_20A7A6180()
{
  JUMPOUT(0x20A7A60F0);
}

void sub_20A7A6188()
{
  JUMPOUT(0x20A7A6100);
}

void sub_20A7A6190()
{
  JUMPOUT(0x20A7A611CLL);
}

void sub_20A7A6198()
{
  JUMPOUT(0x20A7A612CLL);
}

void sub_20A7A61A0()
{
  JUMPOUT(0x20A7A6148);
}

void sub_20A7A61A8()
{
  JUMPOUT(0x20A7A6158);
}

uint64_t mlcore::MediaTable<long long,long long,std::string,int,int,std::string,mediaplatform::Data,mediaplatform::Data>::MediaTable(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  int v17;
  int v18;
  int v19;
  int v20;
  const void *v21;
  size_t v22;
  void *v23;
  const void *v24;
  size_t v25;
  void *v26;
  std::string *v27;
  const void *v28;
  size_t v29;
  void *v30;
  const void *v31;
  size_t v32;
  void *v33;
  const void *v34;
  size_t v35;
  void *v36;
  const void *v37;
  size_t v38;
  void *v39;
  int v40;
  const void *v41;
  size_t v42;
  void *v43;
  const void *v44;
  size_t v45;
  void *v46;
  const void *v47;
  size_t v48;
  void *v49;
  const void *v50;
  size_t v51;
  void *v52;
  const void *v53;
  size_t v54;
  void *v55;
  const void *v56;
  size_t v57;
  void *v58;
  const void *v59;
  size_t v60;
  void *v61;
  const void *v62;
  size_t v63;
  void *v64;
  const void *v65;
  size_t v66;
  void *v67;
  const void *v68;
  size_t v69;
  void *v70;
  size_t v71;
  void *v72;
  std::string *v73;
  std::string *v74;
  int v75;
  std::string *v76;
  int v77;
  std::string *v78;
  std::string *v79;
  int v80;
  std::string *v81;
  int v82;
  __int128 v83;
  __int128 v84;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  int v92;
  int v93;
  int v94;
  int v95;
  int v96;
  int v97;
  uint64_t v98;
  int v99;
  uint64_t v100;
  int v101;
  uint64_t (**v102)();
  std::string v103;
  int v104;
  char v105;
  void (**v106)(mediaplatform::Data *__hidden);
  size_t v107;
  size_t v108;
  const void *v109;
  char v110;
  uint64_t (**v111)();
  std::string v112;
  int v113;
  char v114;
  void (**v115)(mediaplatform::Data *__hidden);
  size_t v116;
  size_t v117;
  const void *v118;
  char v119;
  uint64_t (**v120)();
  std::string v121;
  int v122;
  char v123;
  std::string v124;
  uint64_t (**v125)();
  std::string __p;
  int v127;
  uint64_t v128;
  uint64_t (**v129)();
  std::string v130;
  int v131;
  uint64_t v132;
  uint64_t (**v133)();
  std::string v134;
  int v135;
  char v136;
  std::string v137;
  uint64_t (**v138)();
  std::string v139;
  int v140;
  uint64_t v141;
  int v142;
  uint64_t (**v143)();
  std::string __s;
  int v145;
  uint64_t v146;
  int v147;
  std::string v148;
  uint64_t (**v149)();
  std::string v150;
  int v151;
  char v152;
  void (**v153)(mediaplatform::Data *__hidden);
  size_t v154;
  size_t v155;
  const void *v156;
  char v157;
  uint64_t (**v158)();
  std::string v159;
  int v160;
  char v161;
  void (**v162)(mediaplatform::Data *__hidden);
  size_t v163;
  size_t v164;
  const void *v165;
  char v166;
  uint64_t (**v167)();
  std::string v168;
  int v169;
  char v170;
  std::string v171;
  uint64_t (**v172)();
  std::string v173;
  int v174;
  uint64_t v175;
  uint64_t (**v176)();
  std::string v177;
  int v178;
  uint64_t v179;
  uint64_t (**v180)();
  std::string v181;
  int v182;
  char v183;
  std::string v184;
  uint64_t (**v185)();
  std::string v186;
  int v187;
  uint64_t v188;
  int v189;
  uint64_t (**v190)();
  std::string v191;
  int v192;
  uint64_t v193;
  int v194;
  uint64_t (**v195)();
  std::string v196;
  int v197;
  char v198;
  void (**v199)(mediaplatform::Data *__hidden);
  size_t v200;
  size_t v201;
  const void *v202;
  char v203;
  uint64_t (**v204)();
  std::string v205;
  int v206;
  char v207;
  void (**v208)(mediaplatform::Data *__hidden);
  size_t v209;
  size_t v210;
  const void *v211;
  char v212;
  uint64_t (**v213)();
  std::string v214;
  int v215;
  char v216;
  std::string v217;
  uint64_t (**v218)();
  std::string v219;
  int v220;
  uint64_t v221;
  uint64_t (**v222)();
  std::string v223;
  int v224;
  uint64_t v225;
  uint64_t (**v226)();
  std::string v227;
  int v228;
  char v229;
  std::string v230;
  uint64_t (**v231)();
  std::string v232;
  int v233;
  uint64_t v234;
  int v235;
  uint64_t (**v236)();
  std::string v237;
  int v238;
  char v239;
  void (**v240)(mediaplatform::Data *__hidden);
  size_t v241;
  size_t v242;
  const void *v243;
  char v244;
  uint64_t (**v245)();
  std::string v246;
  int v247;
  char v248;
  void (**v249)(mediaplatform::Data *__hidden);
  size_t v250;
  size_t v251;
  const void *v252;
  char v253;
  uint64_t (**v254)();
  std::string v255;
  int v256;
  char v257;
  std::string v258;
  uint64_t (**v259)();
  std::string v260;
  int v261;
  uint64_t v262;
  uint64_t (**v263)();
  std::string v264;
  int v265;
  uint64_t v266;
  uint64_t (**v267)();
  std::string v268;
  int v269;
  char v270;
  std::string v271;
  uint64_t (**v272)();
  std::string v273;
  int v274;
  char v275;
  void (**v276)(mediaplatform::Data *__hidden);
  size_t v277;
  size_t v278;
  const void *v279;
  char v280;
  uint64_t (**v281)();
  std::string v282;
  int v283;
  char v284;
  void (**v285)(mediaplatform::Data *__hidden);
  size_t v286;
  size_t v287;
  const void *v288;
  char v289;
  uint64_t (**v290)();
  std::string v291;
  int v292;
  char v293;
  std::string v294;
  uint64_t (**v295)();
  std::string v296;
  int v297;
  uint64_t v298;
  uint64_t (**v299)();
  std::string v300;
  int v301;
  uint64_t v302;
  uint64_t (**v303)();
  std::string v304;
  int v305;
  char v306;
  void (**v307)(mediaplatform::Data *__hidden);
  size_t v308;
  size_t v309;
  const void *v310;
  char v311;
  uint64_t (**v312)();
  std::string v313;
  int v314;
  char v315;
  void (**v316)(mediaplatform::Data *__hidden);
  size_t v317;
  size_t v318;
  const void *v319;
  char v320;
  uint64_t (**v321)();
  std::string v322;
  int v323;
  char v324;
  std::string v325;
  uint64_t (**v326)();
  std::string v327;
  int v328;
  uint64_t v329;
  uint64_t (**v330)();
  std::string v331;
  int v332;
  char v333;
  void (**v334)(mediaplatform::Data *__hidden);
  size_t v335;
  size_t v336;
  const void *v337;
  char v338;
  uint64_t (**v339)();
  std::string v340;
  int v341;
  char v342;
  void (**v343)(mediaplatform::Data *__hidden);
  size_t v344;
  size_t v345;
  const void *v346;
  char v347;
  uint64_t (**v348)();
  std::string v349;
  int v350;
  char v351;
  std::string v352;
  uint64_t (**v353)();
  std::string v354;
  int v355;
  char v356;
  void (**v357)(mediaplatform::Data *__hidden);
  size_t v358;
  size_t v359;
  void *v360;
  char v361;
  uint64_t (**v362)();
  std::string v363;
  int v364;
  char v365;
  _QWORD v366[4];
  char v367;
  uint64_t (**v368)();
  std::string v369;
  int v370;
  char v371;
  _QWORD v372[4];
  char v373;

  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&v148, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    v148 = *(std::string *)a2;
  if (*(char *)(a3 + 31) < 0)
    std::string::__init_copy_ctor_external(&__s, *(const std::string::value_type **)(a3 + 8), *(_QWORD *)(a3 + 16));
  else
    __s = *(std::string *)(a3 + 8);
  v17 = *(_DWORD *)(a3 + 32);
  v143 = off_24C335B18;
  v146 = *(_QWORD *)(a3 + 36);
  v90 = a3;
  v18 = *(_DWORD *)(a3 + 44);
  v145 = v17;
  v147 = v18;
  if (*(char *)(a4 + 31) < 0)
    std::string::__init_copy_ctor_external(&v139, *(const std::string::value_type **)(a4 + 8), *(_QWORD *)(a4 + 16));
  else
    v139 = *(std::string *)(a4 + 8);
  v19 = *(_DWORD *)(a4 + 32);
  v138 = off_24C335B18;
  v141 = *(_QWORD *)(a4 + 36);
  v91 = a4;
  v20 = *(_DWORD *)(a4 + 44);
  v96 = v19;
  v140 = v19;
  v142 = v20;
  v133 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a5 + 31) < 0)
    std::string::__init_copy_ctor_external(&v134, *(const std::string::value_type **)(a5 + 8), *(_QWORD *)(a5 + 16));
  else
    v134 = *(std::string *)(a5 + 8);
  v135 = *(_DWORD *)(a5 + 32);
  v133 = &off_24C335AB8;
  v136 = *(_BYTE *)(a5 + 36);
  if (*(char *)(a5 + 63) < 0)
    std::string::__init_copy_ctor_external(&v137, *(const std::string::value_type **)(a5 + 40), *(_QWORD *)(a5 + 48));
  else
    v137 = *(std::string *)(a5 + 40);
  if (*(char *)(a6 + 31) < 0)
    std::string::__init_copy_ctor_external(&v130, *(const std::string::value_type **)(a6 + 8), *(_QWORD *)(a6 + 16));
  else
    v130 = *(std::string *)(a6 + 8);
  v99 = *(_DWORD *)(a6 + 32);
  v131 = v99;
  v129 = off_24C335AF8;
  v98 = *(_QWORD *)(a6 + 36);
  v132 = v98;
  if (*(char *)(a7 + 31) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(a7 + 8), *(_QWORD *)(a7 + 16));
  else
    __p = *(std::string *)(a7 + 8);
  v101 = *(_DWORD *)(a7 + 32);
  v127 = v101;
  v125 = off_24C335AF8;
  v100 = *(_QWORD *)(a7 + 36);
  v128 = v100;
  v120 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a8 + 31) < 0)
    std::string::__init_copy_ctor_external(&v121, *(const std::string::value_type **)(a8 + 8), *(_QWORD *)(a8 + 16));
  else
    v121 = *(std::string *)(a8 + 8);
  v122 = *(_DWORD *)(a8 + 32);
  v120 = &off_24C335AB8;
  v123 = *(_BYTE *)(a8 + 36);
  if (*(char *)(a8 + 63) < 0)
    std::string::__init_copy_ctor_external(&v124, *(const std::string::value_type **)(a8 + 40), *(_QWORD *)(a8 + 48));
  else
    v124 = *(std::string *)(a8 + 40);
  v111 = (uint64_t (**)())off_24C335D90;
  v89 = a5;
  if (*(char *)(a9 + 31) < 0)
    std::string::__init_copy_ctor_external(&v112, *(const std::string::value_type **)(a9 + 8), *(_QWORD *)(a9 + 16));
  else
    v112 = *(std::string *)(a9 + 8);
  v113 = *(_DWORD *)(a9 + 32);
  v111 = &off_24C335A98;
  v114 = *(_BYTE *)(a9 + 36);
  v21 = *(const void **)(a9 + 64);
  v22 = *(_QWORD *)(a9 + 48);
  v115 = &off_24C331510;
  v116 = v22;
  v117 = v22;
  if (v22)
    v23 = (void *)operator new[]();
  else
    v23 = 0;
  v118 = v23;
  v119 = 1;
  if (v21)
    memcpy(v23, v21, v22);
  else
    bzero(v23, v22);
  v102 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a10 + 31) < 0)
    std::string::__init_copy_ctor_external(&v103, *(const std::string::value_type **)(a10 + 8), *(_QWORD *)(a10 + 16));
  else
    v103 = *(std::string *)(a10 + 8);
  v104 = *(_DWORD *)(a10 + 32);
  v102 = &off_24C335A98;
  v105 = *(_BYTE *)(a10 + 36);
  v24 = *(const void **)(a10 + 64);
  v25 = *(_QWORD *)(a10 + 48);
  v106 = &off_24C331510;
  v107 = v25;
  v108 = v25;
  if (v25)
    v26 = (void *)operator new[]();
  else
    v26 = 0;
  v109 = v26;
  v110 = 1;
  if (v24)
    memcpy(v26, v24, v25);
  else
    bzero(v26, v25);
  *(_QWORD *)a1 = &off_24C330F50;
  v27 = (std::string *)(a1 + 8);
  v86 = a8;
  v87 = a7;
  v88 = a6;
  if (SHIBYTE(v148.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v27, v148.__r_.__value_.__l.__data_, v148.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v27->__r_.__value_.__l.__data_ = *(_OWORD *)&v148.__r_.__value_.__l.__data_;
    *(_QWORD *)(a1 + 24) = *((_QWORD *)&v148.__r_.__value_.__l + 2);
  }
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)a1 = off_24C335948;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v191, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
  else
    v191 = __s;
  v190 = off_24C335B18;
  v193 = v146;
  v192 = v17;
  v194 = v147;
  if (SHIBYTE(v139.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v186, v139.__r_.__value_.__l.__data_, v139.__r_.__value_.__l.__size_);
  else
    v186 = v139;
  v185 = off_24C335B18;
  v188 = v141;
  v187 = v96;
  v189 = v142;
  v180 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v134.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v181, v134.__r_.__value_.__l.__data_, v134.__r_.__value_.__l.__size_);
  else
    v181 = v134;
  v182 = v135;
  v180 = &off_24C335AB8;
  v183 = v136;
  if (SHIBYTE(v137.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v184, v137.__r_.__value_.__l.__data_, v137.__r_.__value_.__l.__size_);
  else
    v184 = v137;
  if (SHIBYTE(v130.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v177, v130.__r_.__value_.__l.__data_, v130.__r_.__value_.__l.__size_);
  else
    v177 = v130;
  v178 = v99;
  v176 = off_24C335AF8;
  v179 = v98;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v173, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  else
    v173 = __p;
  v174 = v101;
  v172 = off_24C335AF8;
  v175 = v100;
  v167 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v121.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v168, v121.__r_.__value_.__l.__data_, v121.__r_.__value_.__l.__size_);
  else
    v168 = v121;
  v169 = v122;
  v167 = &off_24C335AB8;
  v170 = v123;
  if (SHIBYTE(v124.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v171, v124.__r_.__value_.__l.__data_, v124.__r_.__value_.__l.__size_);
  else
    v171 = v124;
  v158 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v112.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v159, v112.__r_.__value_.__l.__data_, v112.__r_.__value_.__l.__size_);
  else
    v159 = v112;
  v160 = v113;
  v158 = &off_24C335A98;
  v161 = v114;
  v28 = v118;
  v29 = v116;
  v162 = &off_24C331510;
  v163 = v116;
  v164 = v116;
  if (v116)
    v30 = (void *)operator new[]();
  else
    v30 = 0;
  v165 = v30;
  v166 = 1;
  if (v28)
    memcpy(v30, v28, v29);
  else
    bzero(v30, v29);
  v149 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v103.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v150, v103.__r_.__value_.__l.__data_, v103.__r_.__value_.__l.__size_);
  else
    v150 = v103;
  v151 = v104;
  v149 = &off_24C335A98;
  v152 = v105;
  v31 = v109;
  v32 = v107;
  v153 = &off_24C331510;
  v154 = v107;
  v155 = v107;
  if (v107)
    v33 = (void *)operator new[]();
  else
    v33 = 0;
  v156 = v33;
  v157 = 1;
  if (v31)
    memcpy(v33, v31, v32);
  else
    bzero(v33, v32);
  if (SHIBYTE(v186.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v232, v186.__r_.__value_.__l.__data_, v186.__r_.__value_.__l.__size_);
  else
    v232 = v186;
  v231 = off_24C335B18;
  v234 = v188;
  v233 = v96;
  v235 = v189;
  v226 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v181.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v227, v181.__r_.__value_.__l.__data_, v181.__r_.__value_.__l.__size_);
  else
    v227 = v181;
  v228 = v182;
  v226 = &off_24C335AB8;
  v229 = v183;
  if (SHIBYTE(v184.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v230, v184.__r_.__value_.__l.__data_, v184.__r_.__value_.__l.__size_);
  else
    v230 = v184;
  if (SHIBYTE(v177.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v223, v177.__r_.__value_.__l.__data_, v177.__r_.__value_.__l.__size_);
  else
    v223 = v177;
  v224 = v99;
  v222 = off_24C335AF8;
  v225 = v98;
  if (SHIBYTE(v173.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v219, v173.__r_.__value_.__l.__data_, v173.__r_.__value_.__l.__size_);
  else
    v219 = v173;
  v220 = v101;
  v218 = off_24C335AF8;
  v221 = v100;
  v213 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v168.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v214, v168.__r_.__value_.__l.__data_, v168.__r_.__value_.__l.__size_);
  else
    v214 = v168;
  v215 = v169;
  v213 = &off_24C335AB8;
  v216 = v170;
  if (SHIBYTE(v171.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v217, v171.__r_.__value_.__l.__data_, v171.__r_.__value_.__l.__size_);
  else
    v217 = v171;
  v204 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v159.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v205, v159.__r_.__value_.__l.__data_, v159.__r_.__value_.__l.__size_);
  else
    v205 = v159;
  v206 = v160;
  v204 = &off_24C335A98;
  v207 = v161;
  v34 = v165;
  v35 = v163;
  v208 = &off_24C331510;
  v209 = v163;
  v210 = v163;
  if (v163)
    v36 = (void *)operator new[]();
  else
    v36 = 0;
  v211 = v36;
  v212 = 1;
  if (v34)
    memcpy(v36, v34, v35);
  else
    bzero(v36, v35);
  v195 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v150.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v196, v150.__r_.__value_.__l.__data_, v150.__r_.__value_.__l.__size_);
  else
    v196 = v150;
  v197 = v151;
  v195 = &off_24C335A98;
  v198 = v152;
  v37 = v156;
  v38 = v154;
  v199 = &off_24C331510;
  v200 = v154;
  v201 = v154;
  if (v154)
    v39 = (void *)operator new[]();
  else
    v39 = 0;
  v202 = v39;
  v203 = 1;
  if (v37)
    memcpy(v39, v37, v38);
  else
    bzero(v39, v38);
  v267 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v227.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v268, v227.__r_.__value_.__l.__data_, v227.__r_.__value_.__l.__size_);
  else
    v268 = v227;
  v269 = v228;
  v267 = &off_24C335AB8;
  v270 = v229;
  if (SHIBYTE(v230.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v271, v230.__r_.__value_.__l.__data_, v230.__r_.__value_.__l.__size_);
  else
    v271 = v230;
  v40 = SHIBYTE(v223.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v223.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v264, v223.__r_.__value_.__l.__data_, v223.__r_.__value_.__l.__size_);
  else
    v264 = v223;
  v265 = v99;
  v263 = off_24C335AF8;
  v266 = v98;
  v97 = SHIBYTE(v219.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v219.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v260, v219.__r_.__value_.__l.__data_, v219.__r_.__value_.__l.__size_);
  else
    v260 = v219;
  v261 = v101;
  v259 = off_24C335AF8;
  v262 = v100;
  v254 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v214.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v255, v214.__r_.__value_.__l.__data_, v214.__r_.__value_.__l.__size_);
  else
    v255 = v214;
  v256 = v215;
  v254 = &off_24C335AB8;
  v257 = v216;
  if (SHIBYTE(v217.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v258, v217.__r_.__value_.__l.__data_, v217.__r_.__value_.__l.__size_);
  else
    v258 = v217;
  v245 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v205.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v246, v205.__r_.__value_.__l.__data_, v205.__r_.__value_.__l.__size_);
  else
    v246 = v205;
  v247 = v206;
  v245 = &off_24C335A98;
  v248 = v207;
  v41 = v211;
  v42 = v209;
  v249 = &off_24C331510;
  v250 = v209;
  v251 = v209;
  if (v209)
    v43 = (void *)operator new[]();
  else
    v43 = 0;
  v252 = v43;
  v253 = 1;
  if (v41)
    memcpy(v43, v41, v42);
  else
    bzero(v43, v42);
  v236 = (uint64_t (**)())off_24C335D90;
  v95 = v40;
  if (SHIBYTE(v196.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v237, v196.__r_.__value_.__l.__data_, v196.__r_.__value_.__l.__size_);
  else
    v237 = v196;
  v238 = v197;
  v236 = &off_24C335A98;
  v239 = v198;
  v44 = v202;
  v45 = v200;
  v240 = &off_24C331510;
  v241 = v200;
  v242 = v200;
  if (v200)
    v46 = (void *)operator new[]();
  else
    v46 = 0;
  v243 = v46;
  v244 = 1;
  if (v44)
    memcpy(v46, v44, v45);
  else
    bzero(v46, v45);
  v94 = SHIBYTE(v264.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v264.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v300, v264.__r_.__value_.__l.__data_, v264.__r_.__value_.__l.__size_);
  else
    v300 = v264;
  v301 = v99;
  v299 = off_24C335AF8;
  v302 = v98;
  v93 = SHIBYTE(v260.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v260.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v296, v260.__r_.__value_.__l.__data_, v260.__r_.__value_.__l.__size_);
  else
    v296 = v260;
  v297 = v101;
  v295 = off_24C335AF8;
  v298 = v100;
  v290 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v255.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v291, v255.__r_.__value_.__l.__data_, v255.__r_.__value_.__l.__size_);
  else
    v291 = v255;
  v292 = v256;
  v290 = &off_24C335AB8;
  v293 = v257;
  if (SHIBYTE(v258.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v294, v258.__r_.__value_.__l.__data_, v258.__r_.__value_.__l.__size_);
  else
    v294 = v258;
  v281 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v246.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v282, v246.__r_.__value_.__l.__data_, v246.__r_.__value_.__l.__size_);
  else
    v282 = v246;
  v283 = v247;
  v281 = &off_24C335A98;
  v284 = v248;
  v47 = v252;
  v48 = v250;
  v285 = &off_24C331510;
  v286 = v250;
  v287 = v250;
  if (v250)
    v49 = (void *)operator new[]();
  else
    v49 = 0;
  v288 = v49;
  v289 = 1;
  if (v47)
    memcpy(v49, v47, v48);
  else
    bzero(v49, v48);
  v272 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v237.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v273, v237.__r_.__value_.__l.__data_, v237.__r_.__value_.__l.__size_);
  else
    v273 = v237;
  v274 = v238;
  v272 = &off_24C335A98;
  v275 = v239;
  v50 = v243;
  v51 = v241;
  v276 = &off_24C331510;
  v277 = v241;
  v278 = v241;
  if (v241)
    v52 = (void *)operator new[]();
  else
    v52 = 0;
  v279 = v52;
  v280 = 1;
  if (v50)
    memcpy(v52, v50, v51);
  else
    bzero(v52, v51);
  v92 = SHIBYTE(v296.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v296.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v327, v296.__r_.__value_.__l.__data_, v296.__r_.__value_.__l.__size_);
  else
    v327 = v296;
  v328 = v101;
  v326 = off_24C335AF8;
  v329 = v100;
  v321 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v291.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v322, v291.__r_.__value_.__l.__data_, v291.__r_.__value_.__l.__size_);
  else
    v322 = v291;
  v323 = v292;
  v321 = &off_24C335AB8;
  v324 = v293;
  if (SHIBYTE(v294.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v325, v294.__r_.__value_.__l.__data_, v294.__r_.__value_.__l.__size_);
  else
    v325 = v294;
  v312 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v282.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v313, v282.__r_.__value_.__l.__data_, v282.__r_.__value_.__l.__size_);
  else
    v313 = v282;
  v314 = v283;
  v312 = &off_24C335A98;
  v315 = v284;
  v53 = v288;
  v54 = v286;
  v316 = &off_24C331510;
  v317 = v286;
  v318 = v286;
  if (v286)
    v55 = (void *)operator new[]();
  else
    v55 = 0;
  v319 = v55;
  v320 = 1;
  if (v53)
    memcpy(v55, v53, v54);
  else
    bzero(v55, v54);
  v303 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v273.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v304, v273.__r_.__value_.__l.__data_, v273.__r_.__value_.__l.__size_);
  else
    v304 = v273;
  v305 = v274;
  v303 = &off_24C335A98;
  v306 = v275;
  v56 = v279;
  v57 = v277;
  v307 = &off_24C331510;
  v308 = v277;
  v309 = v277;
  if (v277)
    v58 = (void *)operator new[]();
  else
    v58 = 0;
  v310 = v58;
  v311 = 1;
  if (v56)
    memcpy(v58, v56, v57);
  else
    bzero(v58, v57);
  v348 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v322.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v349, v322.__r_.__value_.__l.__data_, v322.__r_.__value_.__l.__size_);
  else
    v349 = v322;
  v350 = v323;
  v348 = &off_24C335AB8;
  v351 = v324;
  if (SHIBYTE(v325.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v352, v325.__r_.__value_.__l.__data_, v325.__r_.__value_.__l.__size_);
  else
    v352 = v325;
  v339 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v313.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v340, v313.__r_.__value_.__l.__data_, v313.__r_.__value_.__l.__size_);
  else
    v340 = v313;
  v341 = v314;
  v339 = &off_24C335A98;
  v342 = v315;
  v59 = v319;
  v60 = v317;
  v343 = &off_24C331510;
  v344 = v317;
  v345 = v317;
  if (v317)
    v61 = (void *)operator new[]();
  else
    v61 = 0;
  v346 = v61;
  v347 = 1;
  if (v59)
    memcpy(v61, v59, v60);
  else
    bzero(v61, v60);
  v330 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v304.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v331, v304.__r_.__value_.__l.__data_, v304.__r_.__value_.__l.__size_);
  else
    v331 = v304;
  v332 = v305;
  v330 = &off_24C335A98;
  v333 = v306;
  v62 = v310;
  v63 = v308;
  v334 = &off_24C331510;
  v335 = v308;
  v336 = v308;
  if (v308)
    v64 = (void *)operator new[]();
  else
    v64 = 0;
  v337 = v64;
  v338 = 1;
  if (v62)
    memcpy(v64, v62, v63);
  else
    bzero(v64, v63);
  v362 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v340.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v363, v340.__r_.__value_.__l.__data_, v340.__r_.__value_.__l.__size_);
  else
    v363 = v340;
  v364 = v341;
  v362 = &off_24C335A98;
  v365 = v342;
  v65 = v346;
  v66 = v344;
  v366[0] = &off_24C331510;
  v366[1] = v344;
  v366[2] = v344;
  if (v344)
    v67 = (void *)operator new[]();
  else
    v67 = 0;
  v366[3] = v67;
  v367 = 1;
  if (v65)
    memcpy(v67, v65, v66);
  else
    bzero(v67, v66);
  v353 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v331.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v354, v331.__r_.__value_.__l.__data_, v331.__r_.__value_.__l.__size_);
  else
    v354 = v331;
  v355 = v332;
  v353 = &off_24C335A98;
  v356 = v333;
  v68 = v337;
  v69 = v335;
  v357 = &off_24C331510;
  v358 = v335;
  v359 = v335;
  if (v335)
    v70 = (void *)operator new[]();
  else
    v70 = 0;
  v360 = v70;
  v361 = 1;
  if (v68)
    memcpy(v70, v68, v69);
  else
    bzero(v70, v69);
  v368 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v354.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(&v369, v354.__r_.__value_.__l.__data_, v354.__r_.__value_.__l.__size_);
    v70 = v360;
  }
  else
  {
    v369 = v354;
  }
  v370 = v355;
  v368 = &off_24C335A98;
  v371 = v356;
  v71 = v358;
  v372[0] = &off_24C331510;
  v372[1] = v358;
  v372[2] = v358;
  if (v358)
    v72 = (void *)operator new[]();
  else
    v72 = 0;
  v372[3] = v72;
  v373 = 1;
  if (v70)
    memcpy(v72, v70, v71);
  else
    bzero(v72, v71);
  *(_QWORD *)(a1 + 80) = off_24C335D90;
  if (SHIBYTE(v369.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external((std::string *)(a1 + 88), v369.__r_.__value_.__l.__data_, v369.__r_.__value_.__l.__size_);
  else
    *(std::string *)(a1 + 88) = v369;
  *(_DWORD *)(a1 + 112) = v370;
  *(_QWORD *)(a1 + 80) = &off_24C335A98;
  *(_BYTE *)(a1 + 116) = v371;
  mediaplatform::Data::Data((mediaplatform::Data *)(a1 + 120), (const mediaplatform::Data *)v372);
  mediaplatform::DatabaseColumn<mediaplatform::Data>::~DatabaseColumn((uint64_t)&v368);
  *(_QWORD *)(a1 + 160) = off_24C335D90;
  if (SHIBYTE(v363.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external((std::string *)(a1 + 168), v363.__r_.__value_.__l.__data_, v363.__r_.__value_.__l.__size_);
  else
    *(std::string *)(a1 + 168) = v363;
  *(_DWORD *)(a1 + 192) = v364;
  *(_QWORD *)(a1 + 160) = &off_24C335A98;
  *(_BYTE *)(a1 + 196) = v365;
  mediaplatform::Data::Data((mediaplatform::Data *)(a1 + 200), (const mediaplatform::Data *)v366);
  mediaplatform::DatabaseColumn<mediaplatform::Data>::~DatabaseColumn((uint64_t)&v353);
  mediaplatform::DatabaseColumn<mediaplatform::Data>::~DatabaseColumn((uint64_t)&v362);
  *(_QWORD *)(a1 + 240) = off_24C335D90;
  if (SHIBYTE(v349.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external((std::string *)(a1 + 248), v349.__r_.__value_.__l.__data_, v349.__r_.__value_.__l.__size_);
  else
    *(std::string *)(a1 + 248) = v349;
  *(_DWORD *)(a1 + 272) = v350;
  *(_QWORD *)(a1 + 240) = &off_24C335AB8;
  *(_BYTE *)(a1 + 276) = v351;
  v73 = (std::string *)(a1 + 280);
  if (SHIBYTE(v352.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v73, v352.__r_.__value_.__l.__data_, v352.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v73->__r_.__value_.__l.__data_ = *(_OWORD *)&v352.__r_.__value_.__l.__data_;
    *(_QWORD *)(a1 + 296) = *((_QWORD *)&v352.__r_.__value_.__l + 2);
  }
  mediaplatform::DatabaseColumn<mediaplatform::Data>::~DatabaseColumn((uint64_t)&v330);
  mediaplatform::DatabaseColumn<mediaplatform::Data>::~DatabaseColumn((uint64_t)&v339);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v348);
  *(_QWORD *)(a1 + 304) = off_24C335D90;
  v74 = (std::string *)(a1 + 312);
  v75 = SHIBYTE(v327.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v327.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v74, v327.__r_.__value_.__l.__data_, v327.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v74->__r_.__value_.__l.__data_ = *(_OWORD *)&v327.__r_.__value_.__l.__data_;
    *(_QWORD *)(a1 + 328) = *((_QWORD *)&v327.__r_.__value_.__l + 2);
  }
  *(_DWORD *)(a1 + 336) = v101;
  *(_QWORD *)(a1 + 304) = off_24C335AF8;
  *(_QWORD *)(a1 + 340) = v100;
  mediaplatform::DatabaseColumn<mediaplatform::Data>::~DatabaseColumn((uint64_t)&v303);
  mediaplatform::DatabaseColumn<mediaplatform::Data>::~DatabaseColumn((uint64_t)&v312);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v321);
  if (v75 < 0)
    operator delete(v327.__r_.__value_.__l.__data_);
  *(_QWORD *)(a1 + 352) = off_24C335D90;
  v76 = (std::string *)(a1 + 360);
  v77 = SHIBYTE(v300.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v300.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v76, v300.__r_.__value_.__l.__data_, v300.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v76->__r_.__value_.__l.__data_ = *(_OWORD *)&v300.__r_.__value_.__l.__data_;
    *(_QWORD *)(a1 + 376) = *((_QWORD *)&v300.__r_.__value_.__l + 2);
  }
  *(_DWORD *)(a1 + 384) = v99;
  *(_QWORD *)(a1 + 352) = off_24C335AF8;
  *(_QWORD *)(a1 + 388) = v98;
  mediaplatform::DatabaseColumn<mediaplatform::Data>::~DatabaseColumn((uint64_t)&v272);
  mediaplatform::DatabaseColumn<mediaplatform::Data>::~DatabaseColumn((uint64_t)&v281);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v290);
  v295 = (uint64_t (**)())off_24C335D90;
  if (v92 < 0)
  {
    operator delete(v296.__r_.__value_.__l.__data_);
    if ((v77 & 0x80000000) == 0)
      goto LABEL_296;
  }
  else if ((v77 & 0x80000000) == 0)
  {
    goto LABEL_296;
  }
  operator delete(v300.__r_.__value_.__l.__data_);
LABEL_296:
  *(_QWORD *)(a1 + 400) = off_24C335D90;
  if (SHIBYTE(v268.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external((std::string *)(a1 + 408), v268.__r_.__value_.__l.__data_, v268.__r_.__value_.__l.__size_);
  else
    *(std::string *)(a1 + 408) = v268;
  *(_DWORD *)(a1 + 432) = v269;
  *(_QWORD *)(a1 + 400) = &off_24C335AB8;
  *(_BYTE *)(a1 + 436) = v270;
  v78 = (std::string *)(a1 + 440);
  if (SHIBYTE(v271.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v78, v271.__r_.__value_.__l.__data_, v271.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v78->__r_.__value_.__l.__data_ = *(_OWORD *)&v271.__r_.__value_.__l.__data_;
    *(_QWORD *)(a1 + 456) = *((_QWORD *)&v271.__r_.__value_.__l + 2);
  }
  mediaplatform::DatabaseColumn<mediaplatform::Data>::~DatabaseColumn((uint64_t)&v236);
  mediaplatform::DatabaseColumn<mediaplatform::Data>::~DatabaseColumn((uint64_t)&v245);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v254);
  if (v93 < 0)
    operator delete(v260.__r_.__value_.__l.__data_);
  if (v94 < 0)
    operator delete(v264.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v267);
  *(_QWORD *)(a1 + 464) = off_24C335D90;
  v79 = (std::string *)(a1 + 472);
  v80 = SHIBYTE(v232.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v232.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v79, v232.__r_.__value_.__l.__data_, v232.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v79->__r_.__value_.__l.__data_ = *(_OWORD *)&v232.__r_.__value_.__l.__data_;
    *(_QWORD *)(a1 + 488) = *((_QWORD *)&v232.__r_.__value_.__l + 2);
  }
  *(_DWORD *)(a1 + 496) = v233;
  *(_QWORD *)(a1 + 464) = off_24C335B18;
  *(_QWORD *)(a1 + 500) = v234;
  *(_DWORD *)(a1 + 508) = v235;
  mediaplatform::DatabaseColumn<mediaplatform::Data>::~DatabaseColumn((uint64_t)&v195);
  mediaplatform::DatabaseColumn<mediaplatform::Data>::~DatabaseColumn((uint64_t)&v204);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v213);
  if (v97 < 0)
  {
    operator delete(v219.__r_.__value_.__l.__data_);
    if ((v95 & 0x80000000) == 0)
      goto LABEL_313;
  }
  else if ((v95 & 0x80000000) == 0)
  {
    goto LABEL_313;
  }
  operator delete(v223.__r_.__value_.__l.__data_);
LABEL_313:
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v226);
  if (v80 < 0)
    operator delete(v232.__r_.__value_.__l.__data_);
  *(_QWORD *)(a1 + 512) = off_24C335D90;
  v81 = (std::string *)(a1 + 520);
  v82 = SHIBYTE(v191.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v191.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v81, v191.__r_.__value_.__l.__data_, v191.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v81->__r_.__value_.__l.__data_ = *(_OWORD *)&v191.__r_.__value_.__l.__data_;
    *(_QWORD *)(a1 + 536) = *((_QWORD *)&v191.__r_.__value_.__l + 2);
  }
  *(_DWORD *)(a1 + 544) = v192;
  *(_QWORD *)(a1 + 512) = off_24C335B18;
  *(_QWORD *)(a1 + 548) = v193;
  *(_DWORD *)(a1 + 556) = v194;
  mediaplatform::DatabaseColumn<mediaplatform::Data>::~DatabaseColumn((uint64_t)&v149);
  mediaplatform::DatabaseColumn<mediaplatform::Data>::~DatabaseColumn((uint64_t)&v158);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v167);
  if (SHIBYTE(v173.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v173.__r_.__value_.__l.__data_);
  if (SHIBYTE(v177.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v177.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v180);
  if (SHIBYTE(v186.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v186.__r_.__value_.__l.__data_);
    if ((v82 & 0x80000000) == 0)
      goto LABEL_326;
  }
  else if ((v82 & 0x80000000) == 0)
  {
    goto LABEL_326;
  }
  operator delete(v191.__r_.__value_.__l.__data_);
LABEL_326:
  mediaplatform::DatabaseColumn<mediaplatform::Data>::~DatabaseColumn((uint64_t)&v102);
  mediaplatform::DatabaseColumn<mediaplatform::Data>::~DatabaseColumn((uint64_t)&v111);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v120);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v130.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v130.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v133);
  if (SHIBYTE(v139.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v139.__r_.__value_.__l.__data_);
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__s.__r_.__value_.__l.__data_);
  if (SHIBYTE(v148.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v148.__r_.__value_.__l.__data_);
  *(_QWORD *)a1 = off_24C3364B0;
  std::__tuple_leaf<0ul,mlcore::MediaColumn<long long>,false>::__tuple_leaf[abi:ne180100]<mlcore::MediaColumn<long long>&,void>(a1 + 560, v90);
  std::__tuple_leaf<0ul,mlcore::MediaColumn<long long>,false>::__tuple_leaf[abi:ne180100]<mlcore::MediaColumn<long long>&,void>(a1 + 608, v91);
  std::__tuple_leaf<2ul,mlcore::MediaColumn<std::string>,false>::__tuple_leaf[abi:ne180100]<mlcore::MediaColumn<std::string>&,void>(a1 + 656, v89);
  std::__tuple_leaf<3ul,mlcore::MediaColumn<int>,false>::__tuple_leaf[abi:ne180100]<mlcore::MediaColumn<int>&,void>(a1 + 720, v88);
  std::__tuple_leaf<3ul,mlcore::MediaColumn<int>,false>::__tuple_leaf[abi:ne180100]<mlcore::MediaColumn<int>&,void>(a1 + 768, v87);
  std::__tuple_leaf<5ul,mlcore::MediaColumn<std::string>,false>::__tuple_leaf[abi:ne180100]<mlcore::MediaColumn<std::string>&,void>(a1 + 816, v86);
  *(_QWORD *)(a1 + 880) = off_24C335D90;
  if (*(char *)(a9 + 31) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 888), *(const std::string::value_type **)(a9 + 8), *(_QWORD *)(a9 + 16));
  }
  else
  {
    v83 = *(_OWORD *)(a9 + 8);
    *(_QWORD *)(a1 + 904) = *(_QWORD *)(a9 + 24);
    *(_OWORD *)(a1 + 888) = v83;
  }
  *(_DWORD *)(a1 + 912) = *(_DWORD *)(a9 + 32);
  *(_QWORD *)(a1 + 880) = &off_24C335A98;
  *(_BYTE *)(a1 + 916) = *(_BYTE *)(a9 + 36);
  mediaplatform::Data::Data((mediaplatform::Data *)(a1 + 920), (const mediaplatform::Data *)(a9 + 40));
  *(_QWORD *)(a1 + 880) = &off_24C336A40;
  *(_QWORD *)(a1 + 960) = off_24C335D90;
  if (*(char *)(a10 + 31) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 968), *(const std::string::value_type **)(a10 + 8), *(_QWORD *)(a10 + 16));
  }
  else
  {
    v84 = *(_OWORD *)(a10 + 8);
    *(_QWORD *)(a1 + 984) = *(_QWORD *)(a10 + 24);
    *(_OWORD *)(a1 + 968) = v84;
  }
  *(_DWORD *)(a1 + 992) = *(_DWORD *)(a10 + 32);
  *(_QWORD *)(a1 + 960) = &off_24C335A98;
  *(_BYTE *)(a1 + 996) = *(_BYTE *)(a10 + 36);
  mediaplatform::Data::Data((mediaplatform::Data *)(a1 + 1000), (const mediaplatform::Data *)(a10 + 40));
  *(_QWORD *)(a1 + 960) = &off_24C336A40;
  return a1;
}

void sub_20A7A81AC(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  mediaplatform::DatabaseColumn<mediaplatform::Data>::~DatabaseColumn(v1 + 880);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(v3);
  *(_QWORD *)(v1 + 768) = off_24C335D90;
  if (*(char *)(v1 + 799) < 0)
    operator delete(*(void **)(v1 + 776));
  *(_QWORD *)(v1 + 720) = off_24C335D90;
  if (*(char *)(v1 + 751) < 0)
    operator delete(*(void **)(v1 + 728));
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(v2);
  *(_QWORD *)(v1 + 608) = off_24C335D90;
  if (*(char *)(v1 + 639) < 0)
    operator delete(*(void **)(v1 + 616));
  *(_QWORD *)(v1 + 560) = off_24C335D90;
  if (*(char *)(v1 + 591) < 0)
    operator delete(*(void **)(v1 + 568));
  mediaplatform::DatabaseTable<long long,long long,std::string,int,int,std::string,mediaplatform::Data,mediaplatform::Data>::~DatabaseTable(v1);
  _Unwind_Resume(a1);
}

void mlcore::DBInfoTable::~DBInfoTable(void **this)
{
  *this = off_24C3364B0;
  std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul,3ul,4ul,5ul,6ul,7ul>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<mediaplatform::Data>,mlcore::MediaColumn<mediaplatform::Data>>::~__tuple_impl((uint64_t)(this + 70));
  *this = off_24C335948;
  mediaplatform::DatabaseColumnTuple<0ul,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<mediaplatform::Data>>::~DatabaseColumnTuple((uint64_t)(this + 10));
  if (*((char *)this + 79) < 0)
    operator delete(this[7]);
  mediaplatform::DatabaseTableBase::~DatabaseTableBase(this);
}

{
  *this = off_24C3364B0;
  std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul,3ul,4ul,5ul,6ul,7ul>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<mediaplatform::Data>,mlcore::MediaColumn<mediaplatform::Data>>::~__tuple_impl((uint64_t)(this + 70));
  *this = off_24C335948;
  mediaplatform::DatabaseColumnTuple<0ul,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<mediaplatform::Data>>::~DatabaseColumnTuple((uint64_t)(this + 10));
  if (*((char *)this + 79) < 0)
    operator delete(this[7]);
  mediaplatform::DatabaseTableBase::~DatabaseTableBase(this);
  JUMPOUT(0x20BD27AFCLL);
}

uint64_t mediaplatform::DatabaseTable<long long,long long,std::string,int,int,std::string,mediaplatform::Data,mediaplatform::Data>::columnCount()
{
  return 8;
}

void mediaplatform::DatabaseTable<long long,long long,std::string,int,int,std::string,mediaplatform::Data,mediaplatform::Data>::columnNames(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  mediaplatform::ColumnNamesApplier::operator()<long long>((uint64_t)a2, a1 + 512);
  mediaplatform::ColumnNamesApplier::operator()<long long>((uint64_t)a2, a1 + 464);
  mediaplatform::ColumnNamesApplier::operator()<std::string>((uint64_t)a2, a1 + 400);
  mediaplatform::ColumnNamesApplier::operator()<int>((uint64_t)a2, a1 + 352);
  mediaplatform::ColumnNamesApplier::operator()<int>((uint64_t)a2, a1 + 304);
  mediaplatform::ColumnNamesApplier::operator()<std::string>((uint64_t)a2, a1 + 240);
  mediaplatform::ColumnNamesApplier::operator()<mediaplatform::Data>((uint64_t)a2, a1 + 160);
  mediaplatform::ColumnNamesApplier::operator()<mediaplatform::Data>((uint64_t)a2, a1 + 80);
}

void sub_20A7A8BE8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void mediaplatform::DatabaseTable<long long,long long,std::string,int,int,std::string,mediaplatform::Data,mediaplatform::Data>::targetColumnExpression(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  __int128 *v3;
  __int128 *v4[3];
  __int128 **v5;

  v3 = (__int128 *)(a1 + 8);
  (*(void (**)(__int128 **__return_ptr))(*(_QWORD *)a1 + 24))(v4);
  std::allocate_shared[abi:ne180100]<mediaplatform::SQLColumnNameExpression,std::allocator<mediaplatform::SQLColumnNameExpression>,std::string &,std::string const&,void>(a2, v4[0], v3);
  v5 = v4;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v5);
}

void sub_20A7A8C60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul,3ul,4ul,5ul,6ul,7ul>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<mediaplatform::Data>,mlcore::MediaColumn<mediaplatform::Data>>::~__tuple_impl(uint64_t a1)
{
  mediaplatform::DatabaseColumn<mediaplatform::Data>::~DatabaseColumn(a1 + 400);
  mediaplatform::DatabaseColumn<mediaplatform::Data>::~DatabaseColumn(a1 + 320);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 256);
  *(_QWORD *)(a1 + 208) = off_24C335D90;
  if (*(char *)(a1 + 239) < 0)
    operator delete(*(void **)(a1 + 216));
  *(_QWORD *)(a1 + 160) = off_24C335D90;
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 96);
  *(_QWORD *)(a1 + 48) = off_24C335D90;
  if (*(char *)(a1 + 79) < 0)
    operator delete(*(void **)(a1 + 56));
  *(_QWORD *)a1 = off_24C335D90;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

uint64_t mediaplatform::DatabaseColumnTuple<0ul,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<mediaplatform::Data>>::~DatabaseColumnTuple(uint64_t a1)
{
  *(_QWORD *)(a1 + 432) = off_24C335D90;
  if (*(char *)(a1 + 463) < 0)
    operator delete(*(void **)(a1 + 440));
  *(_QWORD *)(a1 + 384) = off_24C335D90;
  if (*(char *)(a1 + 415) < 0)
    operator delete(*(void **)(a1 + 392));
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 320);
  *(_QWORD *)(a1 + 272) = off_24C335D90;
  if (*(char *)(a1 + 303) < 0)
    operator delete(*(void **)(a1 + 280));
  *(_QWORD *)(a1 + 224) = off_24C335D90;
  if (*(char *)(a1 + 255) < 0)
    operator delete(*(void **)(a1 + 232));
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 160);
  mediaplatform::DatabaseColumn<mediaplatform::Data>::~DatabaseColumn(a1 + 80);
  return mediaplatform::DatabaseColumn<mediaplatform::Data>::~DatabaseColumn(a1);
}

void mediaplatform::DatabaseTable<long long,long long,std::string,int,int,std::string,mediaplatform::Data,mediaplatform::Data>::~DatabaseTable(uint64_t a1)
{
  *(_QWORD *)a1 = off_24C335948;
  mediaplatform::DatabaseColumnTuple<0ul,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<mediaplatform::Data>>::~DatabaseColumnTuple(a1 + 80);
  if (*(char *)(a1 + 79) < 0)
    operator delete(*(void **)(a1 + 56));
  mediaplatform::DatabaseTableBase::~DatabaseTableBase((void **)a1);
}

{
  *(_QWORD *)a1 = off_24C335948;
  mediaplatform::DatabaseColumnTuple<0ul,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<mediaplatform::Data>>::~DatabaseColumnTuple(a1 + 80);
  if (*(char *)(a1 + 79) < 0)
    operator delete(*(void **)(a1 + 56));
  mediaplatform::DatabaseTableBase::~DatabaseTableBase((void **)a1);
  JUMPOUT(0x20BD27AFCLL);
}

{
  *(_QWORD *)a1 = off_24C335948;
  mediaplatform::DatabaseColumnTuple<0ul,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<mediaplatform::Data>>::~DatabaseColumnTuple(a1 + 80);
  if (*(char *)(a1 + 79) < 0)
    operator delete(*(void **)(a1 + 56));
  mediaplatform::DatabaseTableBase::~DatabaseTableBase((void **)a1);
}

void mlcore::MediaTable<long long,long long,std::string,int,int,std::string,mediaplatform::Data,mediaplatform::Data>::~MediaTable(uint64_t a1)
{
  *(_QWORD *)a1 = off_24C3364B0;
  std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul,3ul,4ul,5ul,6ul,7ul>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<mediaplatform::Data>,mlcore::MediaColumn<mediaplatform::Data>>::~__tuple_impl(a1 + 560);
  *(_QWORD *)a1 = off_24C335948;
  mediaplatform::DatabaseColumnTuple<0ul,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<mediaplatform::Data>>::~DatabaseColumnTuple(a1 + 80);
  if (*(char *)(a1 + 79) < 0)
    operator delete(*(void **)(a1 + 56));
  mediaplatform::DatabaseTableBase::~DatabaseTableBase((void **)a1);
}

{
  *(_QWORD *)a1 = off_24C3364B0;
  std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul,3ul,4ul,5ul,6ul,7ul>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<mediaplatform::Data>,mlcore::MediaColumn<mediaplatform::Data>>::~__tuple_impl(a1 + 560);
  *(_QWORD *)a1 = off_24C335948;
  mediaplatform::DatabaseColumnTuple<0ul,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<mediaplatform::Data>>::~DatabaseColumnTuple(a1 + 80);
  if (*(char *)(a1 + 79) < 0)
    operator delete(*(void **)(a1 + 56));
  mediaplatform::DatabaseTableBase::~DatabaseTableBase((void **)a1);
  JUMPOUT(0x20BD27AFCLL);
}

uint64_t mediaplatform::DatabaseColumnTuple<1ul,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<mediaplatform::Data>>::~DatabaseColumnTuple(uint64_t a1)
{
  *(_QWORD *)(a1 + 384) = off_24C335D90;
  if (*(char *)(a1 + 415) < 0)
    operator delete(*(void **)(a1 + 392));
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 320);
  *(_QWORD *)(a1 + 272) = off_24C335D90;
  if (*(char *)(a1 + 303) < 0)
    operator delete(*(void **)(a1 + 280));
  *(_QWORD *)(a1 + 224) = off_24C335D90;
  if (*(char *)(a1 + 255) < 0)
    operator delete(*(void **)(a1 + 232));
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 160);
  mediaplatform::DatabaseColumn<mediaplatform::Data>::~DatabaseColumn(a1 + 80);
  return mediaplatform::DatabaseColumn<mediaplatform::Data>::~DatabaseColumn(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<2ul,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<mediaplatform::Data>>::~DatabaseColumnTuple(uint64_t a1)
{
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 320);
  *(_QWORD *)(a1 + 272) = off_24C335D90;
  if (*(char *)(a1 + 303) < 0)
    operator delete(*(void **)(a1 + 280));
  *(_QWORD *)(a1 + 224) = off_24C335D90;
  if (*(char *)(a1 + 255) < 0)
    operator delete(*(void **)(a1 + 232));
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 160);
  mediaplatform::DatabaseColumn<mediaplatform::Data>::~DatabaseColumn(a1 + 80);
  return mediaplatform::DatabaseColumn<mediaplatform::Data>::~DatabaseColumn(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<3ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<mediaplatform::Data>>::~DatabaseColumnTuple(uint64_t a1)
{
  *(_QWORD *)(a1 + 272) = off_24C335D90;
  if (*(char *)(a1 + 303) < 0)
    operator delete(*(void **)(a1 + 280));
  *(_QWORD *)(a1 + 224) = off_24C335D90;
  if (*(char *)(a1 + 255) < 0)
    operator delete(*(void **)(a1 + 232));
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 160);
  mediaplatform::DatabaseColumn<mediaplatform::Data>::~DatabaseColumn(a1 + 80);
  return mediaplatform::DatabaseColumn<mediaplatform::Data>::~DatabaseColumn(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<4ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<mediaplatform::Data>>::~DatabaseColumnTuple(uint64_t a1)
{
  *(_QWORD *)(a1 + 224) = off_24C335D90;
  if (*(char *)(a1 + 255) < 0)
    operator delete(*(void **)(a1 + 232));
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 160);
  mediaplatform::DatabaseColumn<mediaplatform::Data>::~DatabaseColumn(a1 + 80);
  return mediaplatform::DatabaseColumn<mediaplatform::Data>::~DatabaseColumn(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<5ul,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<mediaplatform::Data>>::~DatabaseColumnTuple(uint64_t a1)
{
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 160);
  mediaplatform::DatabaseColumn<mediaplatform::Data>::~DatabaseColumn(a1 + 80);
  return mediaplatform::DatabaseColumn<mediaplatform::Data>::~DatabaseColumn(a1);
}

void mlcore::DBInfoTable::persistentIDColumn(mlcore::DBInfoTable *this@<X0>, uint64_t a2@<X8>)
{
  std::string *v4;

  *(_QWORD *)a2 = off_24C335D90;
  v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 591) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 71), *((_QWORD *)this + 72));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 568);
    *(_QWORD *)(a2 + 24) = *((_QWORD *)this + 73);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 148);
  *(_DWORD *)(a2 + 44) = *((_DWORD *)this + 151);
  *(_QWORD *)(a2 + 36) = *(_QWORD *)((char *)this + 596);
  *(_QWORD *)a2 = off_24C336AC0;
}

void mlcore::DBInfoTable::primaryContainerPersistentIDColumn(mlcore::DBInfoTable *this@<X0>, uint64_t a2@<X8>)
{
  std::string *v4;

  *(_QWORD *)a2 = off_24C335D90;
  v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 639) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 77), *((_QWORD *)this + 78));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 616);
    *(_QWORD *)(a2 + 24) = *((_QWORD *)this + 79);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 160);
  *(_DWORD *)(a2 + 44) = *((_DWORD *)this + 163);
  *(_QWORD *)(a2 + 36) = *(_QWORD *)((char *)this + 644);
  *(_QWORD *)a2 = off_24C336AC0;
}

void mlcore::DBInfoTable::mediaFolderURLColumn(mlcore::DBInfoTable *this@<X0>, uint64_t a2@<X8>)
{
  std::string *v4;
  std::string *v5;

  *(_QWORD *)a2 = off_24C335D90;
  v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 687) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 83), *((_QWORD *)this + 84));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 664);
    *(_QWORD *)(a2 + 24) = *((_QWORD *)this + 85);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 172);
  *(_QWORD *)a2 = &off_24C335AB8;
  *(_BYTE *)(a2 + 36) = *((_BYTE *)this + 692);
  v5 = (std::string *)(a2 + 40);
  if (*((char *)this + 719) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)this + 87), *((_QWORD *)this + 88));
  }
  else
  {
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 696);
    *(_QWORD *)(a2 + 56) = *((_QWORD *)this + 89);
  }
  *(_QWORD *)a2 = &off_24C336A60;
}

void sub_20A7A92C4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  uint64_t v3;

  *(_QWORD *)v1 = v3;
  if (*(char *)(v1 + 31) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

void mlcore::DBInfoTable::audioLanguageColumn(mlcore::DBInfoTable *this@<X0>, uint64_t a2@<X8>)
{
  std::string *v4;

  *(_QWORD *)a2 = off_24C335D90;
  v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 751) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 91), *((_QWORD *)this + 92));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 728);
    *(_QWORD *)(a2 + 24) = *((_QWORD *)this + 93);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 188);
  *(_QWORD *)(a2 + 36) = *(_QWORD *)((char *)this + 756);
  *(_QWORD *)a2 = off_24C336AA0;
}

void mlcore::DBInfoTable::subtitleLanguageColumn(mlcore::DBInfoTable *this@<X0>, uint64_t a2@<X8>)
{
  std::string *v4;

  *(_QWORD *)a2 = off_24C335D90;
  v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 799) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 97), *((_QWORD *)this + 98));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 776);
    *(_QWORD *)(a2 + 24) = *((_QWORD *)this + 99);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 200);
  *(_QWORD *)(a2 + 36) = *(_QWORD *)((char *)this + 804);
  *(_QWORD *)a2 = off_24C336AA0;
}

void mlcore::DBInfoTable::geniusCUIDColumn(mlcore::DBInfoTable *this@<X0>, uint64_t a2@<X8>)
{
  std::string *v4;
  std::string *v5;

  *(_QWORD *)a2 = off_24C335D90;
  v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 847) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 103), *((_QWORD *)this + 104));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 824);
    *(_QWORD *)(a2 + 24) = *((_QWORD *)this + 105);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 212);
  *(_QWORD *)a2 = &off_24C335AB8;
  *(_BYTE *)(a2 + 36) = *((_BYTE *)this + 852);
  v5 = (std::string *)(a2 + 40);
  if (*((char *)this + 879) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)this + 107), *((_QWORD *)this + 108));
  }
  else
  {
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 856);
    *(_QWORD *)(a2 + 56) = *((_QWORD *)this + 109);
  }
  *(_QWORD *)a2 = &off_24C336A60;
}

void sub_20A7A949C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  uint64_t v3;

  *(_QWORD *)v1 = v3;
  if (*(char *)(v1 + 31) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

mediaplatform::Data *mlcore::DBInfoTable::BIBColumn@<X0>(mlcore::DBInfoTable *this@<X0>, uint64_t a2@<X8>)
{
  std::string *v4;
  mediaplatform::Data *result;

  *(_QWORD *)a2 = off_24C335D90;
  v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 911) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 111), *((_QWORD *)this + 112));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 888);
    *(_QWORD *)(a2 + 24) = *((_QWORD *)this + 113);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 228);
  *(_QWORD *)a2 = &off_24C335A98;
  *(_BYTE *)(a2 + 36) = *((_BYTE *)this + 916);
  result = mediaplatform::Data::Data((mediaplatform::Data *)(a2 + 40), (mlcore::DBInfoTable *)((char *)this + 920));
  *(_QWORD *)a2 = &off_24C336A40;
  return result;
}

void sub_20A7A9558(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  uint64_t v3;

  *(_QWORD *)v1 = v3;
  if (*(char *)(v1 + 31) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

mediaplatform::Data *mlcore::DBInfoTable::RIBColumn@<X0>(mlcore::DBInfoTable *this@<X0>, uint64_t a2@<X8>)
{
  std::string *v4;
  mediaplatform::Data *result;

  *(_QWORD *)a2 = off_24C335D90;
  v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 991) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 121), *((_QWORD *)this + 122));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 968);
    *(_QWORD *)(a2 + 24) = *((_QWORD *)this + 123);
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 248);
  *(_QWORD *)a2 = &off_24C335A98;
  *(_BYTE *)(a2 + 36) = *((_BYTE *)this + 996);
  result = mediaplatform::Data::Data((mediaplatform::Data *)(a2 + 40), (mlcore::DBInfoTable *)((char *)this + 1000));
  *(_QWORD *)a2 = &off_24C336A40;
  return result;
}

void sub_20A7A9614(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  uint64_t v3;

  *(_QWORD *)v1 = v3;
  if (*(char *)(v1 + 31) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

uint64_t mlcore::MediaTable<long long,int,long long,long long,long long,std::string,long long,int,int,long long,int,int,int,int,std::string,int,int,int,int,int,int,int,int,int,int,int,int,long long,int,mediaplatform::Data,int,int,int,int,int,int,std::string,int,int,int,int,int,long long,long long,int,std::string,std::string,int,int,int,int,long long,std::string,std::string,long long,long long,int,int,int,int,int,int,int,std::string,std::string,std::string,int,long long,int,std::string,long long,std::string,std::string,int,long long,int,std::string,int,long long,int,int,int,std::string,std::string,long long,int,int>::MediaTable(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t a64;
  uint64_t a65;
  uint64_t a66;
  uint64_t a67;
  uint64_t a68;
  uint64_t a69;
  uint64_t a70;
  uint64_t a71;
  uint64_t a72;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  int v87;
  int v88;
  int v89;
  int v90;
  int v91;
  int v92;
  int v93;
  int v94;
  uint64_t v95;
  uint64_t v96;
  int v97;
  int v98;
  uint64_t v99;
  int v100;
  int v101;
  uint64_t v102;
  _OWORD *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t *v110;
  int v111;
  const void *v112;
  size_t v113;
  void *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  _OWORD *v119;
  uint64_t v120;
  _OWORD *v121;
  uint64_t v122;
  uint64_t *v123;
  int v124;
  uint64_t v125;
  int v126;
  uint64_t v127;
  uint64_t v128;
  int v129;
  int v130;
  uint64_t v131;
  uint64_t v132;
  int v133;
  int v134;
  int v135;
  int v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t *v139;
  int v140;
  uint64_t v141;
  _OWORD *v142;
  unint64_t v143;
  uint64_t v144;
  unint64_t v145;
  unint64_t v146;
  int v147;
  _OWORD *v148;
  _OWORD *v149;
  unint64_t v150;
  _OWORD *v151;
  unint64_t v152;
  unint64_t v153;
  uint64_t v154;
  unint64_t v155;
  unint64_t v156;
  int v157;
  unint64_t v158;
  unint64_t v159;
  _OWORD *v160;
  unint64_t v161;
  unint64_t v162;
  uint64_t v163;
  unint64_t v164;
  unint64_t v165;
  int v166;
  unint64_t v167;
  unint64_t v168;
  unint64_t v169;
  unint64_t v170;
  _OWORD *v171;
  _OWORD *v172;
  unint64_t v173;
  uint64_t v174;
  unint64_t v175;
  int v176;
  unint64_t v177;
  unint64_t v178;
  std::string *v179;
  __int128 v180;
  __int128 v181;
  std::string *v182;
  __int128 v183;
  __int128 v184;
  std::string *v185;
  __int128 v186;
  std::string *v187;
  __int128 v188;
  std::string *v189;
  __int128 v190;
  std::string *v191;
  __int128 v192;
  std::string *v193;
  uint64_t v194;
  __int128 v195;
  std::string *v196;
  __int128 v197;
  uint64_t v198;
  __int128 v199;
  uint64_t v200;
  __int128 v201;
  uint64_t v202;
  std::string *v203;
  __int128 v204;
  __int128 v205;
  std::string *v206;
  __int128 v207;
  std::string *v208;
  __int128 v209;
  std::string *v210;
  uint64_t v211;
  __int128 v212;
  std::string *v213;
  __int128 v214;
  std::string *v215;
  __int128 v216;
  std::string *v217;
  __int128 v218;
  uint64_t v219;
  __int128 v220;
  std::string *v221;
  __int128 v222;
  std::string *v223;
  uint64_t v224;
  __int128 v225;
  std::string *v226;
  uint64_t v227;
  __int128 v228;
  uint64_t v229;
  __int128 v230;
  uint64_t v231;
  __int128 v232;
  uint64_t v233;
  std::string *v234;
  __int128 v235;
  __int128 v236;
  std::string *v237;
  __int128 *v238;
  __int128 v239;
  __int128 v240;
  std::string *v241;
  __int128 v242;
  std::string *v243;
  __int128 v244;
  uint64_t v245;
  __int128 v246;
  uint64_t v247;
  __int128 v248;
  std::string *v249;
  __int128 v250;
  std::string *v251;
  __int128 v252;
  std::string *v253;
  __int128 v254;
  std::string *v255;
  __int128 v256;
  std::string *v257;
  __int128 v258;
  std::string *v259;
  __int128 v260;
  __int128 v261;
  std::string *v262;
  __int128 v263;
  __int128 v264;
  std::string *v265;
  __int128 v266;
  __int128 v267;
  std::string *v268;
  __int128 v269;
  __int128 v270;
  std::string *v271;
  __int128 v272;
  __int128 *v273;
  __int128 v274;
  uint64_t v275;
  __int128 v276;
  uint64_t v277;
  std::string *v278;
  __int128 v279;
  uint64_t v280;
  __int128 v281;
  std::string *v282;
  __int128 v283;
  unint64_t v284;
  __int128 v285;
  uint64_t v286;
  unint64_t v287;
  __int128 v288;
  std::string *v289;
  __int128 v290;
  __int128 v291;
  std::string *v292;
  __int128 v293;
  __int128 v294;
  std::string *v295;
  unint64_t v296;
  __int128 v297;
  uint64_t v298;
  std::string *v299;
  __int128 v300;
  unint64_t v301;
  __int128 v302;
  std::string *v303;
  __int128 v304;
  std::string *v305;
  __int128 v306;
  std::string *v307;
  unint64_t v308;
  __int128 v309;
  uint64_t v310;
  std::string *v311;
  __int128 v312;
  __int128 v313;
  unint64_t v314;
  __int128 v315;
  __int128 v316;
  std::string *v317;
  __int128 v318;
  __int128 v319;
  std::string *v320;
  __int128 v321;
  __int128 v322;
  uint64_t v323;
  unint64_t v324;
  __int128 v325;
  std::string *v326;
  unint64_t v327;
  __int128 v328;
  unint64_t v330;
  _OWORD *v331;
  unint64_t v332;
  unint64_t v333;
  _OWORD *v334;
  unint64_t v335;
  unint64_t v336;
  _OWORD *v337;
  unint64_t v338;
  _OWORD *v339;
  unint64_t v340;
  _OWORD *v341;
  _OWORD *v342;
  __int128 *v343;
  _OWORD *v344;
  _OWORD *v345;
  unint64_t v346;
  unint64_t v347;
  unint64_t v348;
  unint64_t v349;
  unint64_t v350;
  unint64_t v351;
  unint64_t v352;
  unint64_t v353;
  unint64_t v354;
  unint64_t v355;
  unint64_t v356;
  unint64_t v357;
  unint64_t v358;
  unint64_t v359;
  uint64_t *v360;
  unint64_t v361;
  uint64_t v362;
  uint64_t *v363;
  _OWORD *v364;
  uint64_t *v365;
  uint64_t v366;
  uint64_t v367;
  uint64_t v368;
  uint64_t v369;
  uint64_t v370;
  uint64_t v371;
  uint64_t v372;
  uint64_t v373;
  uint64_t v374;
  uint64_t v375;
  unint64_t v376;
  uint64_t v377;
  unint64_t v378;
  unint64_t v379;
  unint64_t v380;
  unint64_t v381;
  unint64_t v382;
  unint64_t v383;
  unint64_t v384;
  std::string __p;
  int v386;
  uint64_t v387;
  uint64_t (**v388)();
  std::string v389;
  int v390;
  uint64_t v391;
  uint64_t (**v392)();
  std::string v393;
  int v394;
  uint64_t v395;
  int v396;
  uint64_t (**v397)();
  std::string v398;
  int v399;
  char v400;
  std::string v401;
  uint64_t (**v402)();
  std::string v403;
  int v404;
  char v405;
  std::string v406;
  uint64_t (**v407)();
  std::string v408;
  int v409;
  uint64_t v410;
  uint64_t (**v411)();
  std::string v412;
  int v413;
  uint64_t v414;
  uint64_t (**v415)();
  std::string v416;
  int v417;
  uint64_t v418;
  uint64_t (**v419)();
  std::string v420;
  int v421;
  uint64_t v422;
  int v423;
  uint64_t (**v424)();
  std::string v425;
  int v426;
  uint64_t v427;
  uint64_t (**v428)();
  std::string v429;
  int v430;
  char v431;
  std::string v432;
  uint64_t (**v433)();
  std::string v434;
  int v435;
  uint64_t v436;
  uint64_t (**v437)();
  std::string v438;
  int v439;
  uint64_t v440;
  int v441;
  uint64_t (**v442)();
  std::string v443;
  int v444;
  uint64_t v445;
  uint64_t (**v446)();
  std::string v447;
  int v448;
  char v449;
  std::string v450;
  uint64_t (**v451)();
  std::string v452;
  int v453;
  char v454;
  std::string v455;
  uint64_t (**v456)();
  std::string v457;
  int v458;
  uint64_t v459;
  int v460;
  uint64_t (**v461)();
  std::string v462;
  int v463;
  char v464;
  std::string v465;
  uint64_t (**v466)();
  std::string v467;
  int v468;
  uint64_t v469;
  uint64_t (**v470)();
  std::string v471;
  int v472;
  uint64_t v473;
  int v474;
  uint64_t (**v475)();
  std::string v476;
  int v477;
  uint64_t v478;
  uint64_t (**v479)();
  std::string v480;
  int v481;
  char v482;
  std::string v483;
  uint64_t (**v484)();
  std::string v485;
  int v486;
  char v487;
  std::string v488;
  uint64_t (**v489)();
  std::string v490;
  int v491;
  char v492;
  std::string v493;
  uint64_t (**v494)();
  std::string v495;
  int v496;
  uint64_t v497;
  uint64_t (**v498)();
  std::string v499;
  int v500;
  uint64_t v501;
  uint64_t (**v502)();
  std::string v503;
  int v504;
  uint64_t v505;
  uint64_t (**v506)();
  std::string v507;
  int v508;
  uint64_t v509;
  uint64_t (**v510)();
  std::string v511;
  int v512;
  uint64_t v513;
  uint64_t (**v514)();
  std::string v515;
  int v516;
  uint64_t v517;
  uint64_t (**v518)();
  std::string v519;
  int v520;
  uint64_t v521;
  uint64_t (**v522)();
  std::string v523;
  int v524;
  uint64_t v525;
  int v526;
  uint64_t (**v527)();
  std::string v528;
  int v529;
  uint64_t v530;
  int v531;
  uint64_t (**v532)();
  std::string v533;
  int v534;
  char v535;
  std::string v536;
  uint64_t (**v537)();
  std::string v538;
  int v539;
  char v540;
  std::string v541;
  uint64_t (**v542)();
  std::string v543;
  int v544;
  uint64_t v545;
  int v546;
  uint64_t (**v547)();
  std::string v548;
  int v549;
  uint64_t v550;
  uint64_t (**v551)();
  std::string v552;
  int v553;
  uint64_t v554;
  uint64_t (**v555)();
  std::string v556;
  int v557;
  uint64_t v558;
  uint64_t (**v559)();
  std::string v560;
  int v561;
  uint64_t v562;
  uint64_t (**v563)();
  std::string v564;
  int v565;
  char v566;
  std::string v567;
  uint64_t (**v568)();
  std::string v569;
  int v570;
  char v571;
  std::string v572;
  uint64_t (**v573)();
  std::string v574;
  int v575;
  uint64_t v576;
  uint64_t (**v577)();
  std::string v578;
  int v579;
  uint64_t v580;
  int v581;
  uint64_t (**v582)();
  std::string v583;
  int v584;
  uint64_t v585;
  int v586;
  uint64_t (**v587)();
  std::string v588;
  int v589;
  uint64_t v590;
  uint64_t (**v591)();
  std::string v592;
  int v593;
  uint64_t v594;
  uint64_t (**v595)();
  std::string v596;
  int v597;
  uint64_t v598;
  uint64_t (**v599)();
  std::string v600;
  int v601;
  uint64_t v602;
  uint64_t (**v603)();
  std::string v604;
  int v605;
  uint64_t v606;
  uint64_t (**v607)();
  std::string v608;
  int v609;
  char v610;
  std::string v611;
  uint64_t (**v612)();
  std::string v613;
  int v614;
  uint64_t v615;
  uint64_t (**v616)();
  std::string v617;
  int v618;
  uint64_t v619;
  uint64_t (**v620)();
  std::string v621;
  int v622;
  uint64_t v623;
  uint64_t (**v624)();
  std::string v625;
  int v626;
  uint64_t v627;
  uint64_t (**v628)();
  std::string v629;
  int v630;
  uint64_t v631;
  uint64_t (**v632)();
  std::string v633;
  int v634;
  uint64_t v635;
  uint64_t (**v636)();
  std::string v637;
  int v638;
  char v639;
  void (**v640)(mediaplatform::Data *__hidden);
  size_t v641;
  size_t v642;
  void *v643;
  char v644;
  uint64_t (**v645)();
  std::string v646;
  int v647;
  uint64_t v648;
  uint64_t (**v649)();
  std::string v650;
  int v651;
  uint64_t v652;
  int v653;
  uint64_t (**v654)();
  std::string v655;
  int v656;
  uint64_t v657;
  uint64_t (**v658)();
  std::string v659;
  int v660;
  uint64_t v661;
  uint64_t (**v662)();
  std::string v663;
  int v664;
  uint64_t v665;
  uint64_t (**v666)();
  std::string v667;
  int v668;
  uint64_t v669;
  uint64_t (**v670)();
  std::string v671;
  int v672;
  uint64_t v673;
  uint64_t (**v674)();
  std::string v675;
  int v676;
  uint64_t v677;
  uint64_t (**v678)();
  std::string v679;
  int v680;
  uint64_t v681;
  uint64_t (**v682)();
  std::string v683;
  int v684;
  uint64_t v685;
  uint64_t (**v686)();
  std::string v687;
  int v688;
  uint64_t v689;
  uint64_t (**v690)();
  std::string v691;
  int v692;
  uint64_t v693;
  uint64_t (**v694)();
  std::string v695;
  int v696;
  uint64_t v697;
  uint64_t (**v698)();
  std::string v699;
  int v700;
  uint64_t v701;
  uint64_t (**v702)();
  std::string v703;
  int v704;
  char v705;
  std::string v706;
  uint64_t (**v707)();
  std::string v708;
  int v709;
  uint64_t v710;
  uint64_t (**v711)();
  std::string v712;
  int v713;
  uint64_t v714;
  uint64_t (**v715)();
  std::string v716;
  int v717;
  uint64_t v718;
  uint64_t (**v719)();
  std::string v720;
  int v721;
  uint64_t v722;
  uint64_t (**v723)();
  std::string v724;
  int v725;
  uint64_t v726;
  int v727;
  uint64_t (**v728)();
  std::string v729;
  int v730;
  uint64_t v731;
  uint64_t (**v732)();
  std::string v733;
  int v734;
  uint64_t v735;
  uint64_t (**v736)();
  std::string v737;
  int v738;
  uint64_t v739;
  int v740;
  uint64_t (**v741)();
  std::string v742;
  int v743;
  char v744;
  std::string v745;
  uint64_t (**v746)();
  std::string v747;
  int v748;
  uint64_t v749;
  int v750;
  uint64_t (**v751)();
  std::string v752;
  int v753;
  uint64_t v754;
  int v755;
  uint64_t (**v756)();
  std::string v757;
  int v758;
  uint64_t v759;
  int v760;
  uint64_t (**v761)();
  std::string v762;
  int v763;
  uint64_t v764;
  uint64_t (**v765)();
  std::string v766;
  int v767;
  uint64_t v768;
  int v769;
  std::string v770;

  v72 = MEMORY[0x24BDAC7A8](a1);
  v75 = v74;
  v77 = v76;
  v79 = v78;
  v81 = v80;
  v83 = v82;
  v85 = v84;
  v86 = v72;
  if (*(char *)(v73 + 23) < 0)
    std::string::__init_copy_ctor_external(&v770, *(const std::string::value_type **)v73, *(_QWORD *)(v73 + 8));
  else
    v770 = *(std::string *)v73;
  if (*(char *)(v85 + 31) < 0)
    std::string::__init_copy_ctor_external(&v766, *(const std::string::value_type **)(v85 + 8), *(_QWORD *)(v85 + 16));
  else
    v766 = *(std::string *)(v85 + 8);
  v87 = *(_DWORD *)(v85 + 32);
  v765 = off_24C335B18;
  v768 = *(_QWORD *)(v85 + 36);
  v88 = *(_DWORD *)(v85 + 44);
  v767 = v87;
  v769 = v88;
  if (*(char *)(v83 + 31) < 0)
    std::string::__init_copy_ctor_external(&v762, *(const std::string::value_type **)(v83 + 8), *(_QWORD *)(v83 + 16));
  else
    v762 = *(std::string *)(v83 + 8);
  v763 = *(_DWORD *)(v83 + 32);
  v761 = off_24C335AF8;
  v764 = *(_QWORD *)(v83 + 36);
  if (*(char *)(v81 + 31) < 0)
    std::string::__init_copy_ctor_external(&v757, *(const std::string::value_type **)(v81 + 8), *(_QWORD *)(v81 + 16));
  else
    v757 = *(std::string *)(v81 + 8);
  v89 = *(_DWORD *)(v81 + 32);
  v756 = off_24C335B18;
  v759 = *(_QWORD *)(v81 + 36);
  v90 = *(_DWORD *)(v81 + 44);
  v758 = v89;
  v760 = v90;
  if (*(char *)(v79 + 31) < 0)
    std::string::__init_copy_ctor_external(&v752, *(const std::string::value_type **)(v79 + 8), *(_QWORD *)(v79 + 16));
  else
    v752 = *(std::string *)(v79 + 8);
  v91 = *(_DWORD *)(v79 + 32);
  v751 = off_24C335B18;
  v754 = *(_QWORD *)(v79 + 36);
  v92 = *(_DWORD *)(v79 + 44);
  v753 = v91;
  v755 = v92;
  if (*(char *)(v77 + 31) < 0)
    std::string::__init_copy_ctor_external(&v747, *(const std::string::value_type **)(v77 + 8), *(_QWORD *)(v77 + 16));
  else
    v747 = *(std::string *)(v77 + 8);
  v93 = *(_DWORD *)(v77 + 32);
  v746 = off_24C335B18;
  v749 = *(_QWORD *)(v77 + 36);
  v94 = *(_DWORD *)(v77 + 44);
  v748 = v93;
  v750 = v94;
  v741 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(v75 + 31) < 0)
    std::string::__init_copy_ctor_external(&v742, *(const std::string::value_type **)(v75 + 8), *(_QWORD *)(v75 + 16));
  else
    v742 = *(std::string *)(v75 + 8);
  v743 = *(_DWORD *)(v75 + 32);
  v741 = &off_24C335AB8;
  v744 = *(_BYTE *)(v75 + 36);
  if (*(char *)(v75 + 63) < 0)
    std::string::__init_copy_ctor_external(&v745, *(const std::string::value_type **)(v75 + 40), *(_QWORD *)(v75 + 48));
  else
    v745 = *(std::string *)(v75 + 40);
  v95 = a9;
  if (*(char *)(a9 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(&v737, *(const std::string::value_type **)(a9 + 8), *(_QWORD *)(a9 + 16));
    v95 = a9;
  }
  else
  {
    v737 = *(std::string *)(a9 + 8);
  }
  v96 = a10;
  v97 = *(_DWORD *)(v95 + 32);
  v736 = off_24C335B18;
  v739 = *(_QWORD *)(v95 + 36);
  v372 = v95;
  v98 = *(_DWORD *)(v95 + 44);
  v738 = v97;
  v740 = v98;
  if (*(char *)(a10 + 31) < 0)
    std::string::__init_copy_ctor_external(&v733, *(const std::string::value_type **)(a10 + 8), *(_QWORD *)(a10 + 16));
  else
    v733 = *(std::string *)(a10 + 8);
  v374 = v79;
  v99 = a11;
  v734 = *(_DWORD *)(a10 + 32);
  v732 = off_24C335AF8;
  v735 = *(_QWORD *)(a10 + 36);
  if (*(char *)(a11 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(&v729, *(const std::string::value_type **)(a11 + 8), *(_QWORD *)(a11 + 16));
    v99 = a11;
    v96 = a10;
  }
  else
  {
    v729 = *(std::string *)(a11 + 8);
  }
  v730 = *(_DWORD *)(v99 + 32);
  v728 = off_24C335AF8;
  v370 = v99;
  v731 = *(_QWORD *)(v99 + 36);
  v375 = v83;
  if (*(char *)(a12 + 31) < 0)
    std::string::__init_copy_ctor_external(&v724, *(const std::string::value_type **)(a12 + 8), *(_QWORD *)(a12 + 16));
  else
    v724 = *(std::string *)(a12 + 8);
  v100 = *(_DWORD *)(a12 + 32);
  v723 = off_24C335B18;
  v726 = *(_QWORD *)(a12 + 36);
  v101 = *(_DWORD *)(a12 + 44);
  v725 = v100;
  v727 = v101;
  if (*(char *)(a13 + 31) < 0)
    std::string::__init_copy_ctor_external(&v720, *(const std::string::value_type **)(a13 + 8), *(_QWORD *)(a13 + 16));
  else
    v720 = *(std::string *)(a13 + 8);
  v721 = *(_DWORD *)(a13 + 32);
  v719 = off_24C335AF8;
  v722 = *(_QWORD *)(a13 + 36);
  if (*(char *)(a14 + 31) < 0)
    std::string::__init_copy_ctor_external(&v716, *(const std::string::value_type **)(a14 + 8), *(_QWORD *)(a14 + 16));
  else
    v716 = *(std::string *)(a14 + 8);
  v717 = *(_DWORD *)(a14 + 32);
  v715 = off_24C335AF8;
  v718 = *(_QWORD *)(a14 + 36);
  if (*(char *)(a15 + 31) < 0)
    std::string::__init_copy_ctor_external(&v712, *(const std::string::value_type **)(a15 + 8), *(_QWORD *)(a15 + 16));
  else
    v712 = *(std::string *)(a15 + 8);
  v713 = *(_DWORD *)(a15 + 32);
  v711 = off_24C335AF8;
  v714 = *(_QWORD *)(a15 + 36);
  if (*(char *)(a16 + 31) < 0)
  {
    v102 = a16;
    std::string::__init_copy_ctor_external(&v708, *(const std::string::value_type **)(a16 + 8), *(_QWORD *)(a16 + 16));
  }
  else
  {
    v708 = *(std::string *)(a16 + 8);
    v102 = a16;
  }
  v709 = *(_DWORD *)(v102 + 32);
  v707 = off_24C335AF8;
  v367 = v102;
  v710 = *(_QWORD *)(v102 + 36);
  v702 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a17 + 31) < 0)
    std::string::__init_copy_ctor_external(&v703, *(const std::string::value_type **)(a17 + 8), *(_QWORD *)(a17 + 16));
  else
    v703 = *(std::string *)(a17 + 8);
  v704 = *(_DWORD *)(a17 + 32);
  v702 = &off_24C335AB8;
  v705 = *(_BYTE *)(a17 + 36);
  v371 = v77;
  if (*(char *)(a17 + 63) < 0)
    std::string::__init_copy_ctor_external(&v706, *(const std::string::value_type **)(a17 + 40), *(_QWORD *)(a17 + 48));
  else
    v706 = *(std::string *)(a17 + 40);
  if (*(char *)(a18 + 31) < 0)
    std::string::__init_copy_ctor_external(&v699, *(const std::string::value_type **)(a18 + 8), *(_QWORD *)(a18 + 16));
  else
    v699 = *(std::string *)(a18 + 8);
  v700 = *(_DWORD *)(a18 + 32);
  v698 = off_24C335AF8;
  v701 = *(_QWORD *)(a18 + 36);
  if (*(char *)(a19 + 31) < 0)
    std::string::__init_copy_ctor_external(&v695, *(const std::string::value_type **)(a19 + 8), *(_QWORD *)(a19 + 16));
  else
    v695 = *(std::string *)(a19 + 8);
  v696 = *(_DWORD *)(a19 + 32);
  v694 = off_24C335AF8;
  v697 = *(_QWORD *)(a19 + 36);
  v373 = v96;
  if (*(char *)(a20 + 31) < 0)
    std::string::__init_copy_ctor_external(&v691, *(const std::string::value_type **)(a20 + 8), *(_QWORD *)(a20 + 16));
  else
    v691 = *(std::string *)(a20 + 8);
  v692 = *(_DWORD *)(a20 + 32);
  v690 = off_24C335AF8;
  v693 = *(_QWORD *)(a20 + 36);
  if (*(char *)(a21 + 31) < 0)
    std::string::__init_copy_ctor_external(&v687, *(const std::string::value_type **)(a21 + 8), *(_QWORD *)(a21 + 16));
  else
    v687 = *(std::string *)(a21 + 8);
  v688 = *(_DWORD *)(a21 + 32);
  v686 = off_24C335AF8;
  v689 = *(_QWORD *)(a21 + 36);
  if (*(char *)(a22 + 31) < 0)
    std::string::__init_copy_ctor_external(&v683, *(const std::string::value_type **)(a22 + 8), *(_QWORD *)(a22 + 16));
  else
    v683 = *(std::string *)(a22 + 8);
  v684 = *(_DWORD *)(a22 + 32);
  v682 = off_24C335AF8;
  v685 = *(_QWORD *)(a22 + 36);
  v103 = (_OWORD *)(a23 + 8);
  v369 = v75;
  if (*(char *)(a23 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(&v679, *(const std::string::value_type **)(a23 + 8), *(_QWORD *)(a23 + 16));
    v103 = (_OWORD *)(a23 + 8);
  }
  else
  {
    *(_OWORD *)&v679.__r_.__value_.__l.__data_ = *v103;
    v679.__r_.__value_.__r.__words[2] = *(_QWORD *)(a23 + 24);
  }
  v344 = v103;
  v680 = *(_DWORD *)(a23 + 32);
  v678 = off_24C335AF8;
  v681 = *(_QWORD *)(a23 + 36);
  if (*(char *)(a24 + 31) < 0)
    std::string::__init_copy_ctor_external(&v675, *(const std::string::value_type **)(a24 + 8), *(_QWORD *)(a24 + 16));
  else
    v675 = *(std::string *)(a24 + 8);
  v104 = a25;
  v676 = *(_DWORD *)(a24 + 32);
  v674 = off_24C335AF8;
  v677 = *(_QWORD *)(a24 + 36);
  if (*(char *)(a25 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(&v671, *(const std::string::value_type **)(a25 + 8), *(_QWORD *)(a25 + 16));
    v104 = a25;
  }
  else
  {
    v671 = *(std::string *)(a25 + 8);
  }
  v672 = *(_DWORD *)(v104 + 32);
  v670 = off_24C335AF8;
  v366 = v104;
  v673 = *(_QWORD *)(v104 + 36);
  if (*(char *)(a26 + 31) < 0)
    std::string::__init_copy_ctor_external(&v667, *(const std::string::value_type **)(a26 + 8), *(_QWORD *)(a26 + 16));
  else
    v667 = *(std::string *)(a26 + 8);
  v105 = a27;
  v668 = *(_DWORD *)(a26 + 32);
  v666 = off_24C335AF8;
  v669 = *(_QWORD *)(a26 + 36);
  if (*(char *)(a27 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(&v663, *(const std::string::value_type **)(a27 + 8), *(_QWORD *)(a27 + 16));
    v105 = a27;
  }
  else
  {
    v663 = *(std::string *)(a27 + 8);
  }
  v664 = *(_DWORD *)(v105 + 32);
  v662 = off_24C335AF8;
  v665 = *(_QWORD *)(v105 + 36);
  if (*(char *)(a28 + 31) < 0)
    std::string::__init_copy_ctor_external(&v659, *(const std::string::value_type **)(a28 + 8), *(_QWORD *)(a28 + 16));
  else
    v659 = *(std::string *)(a28 + 8);
  v106 = a29;
  v660 = *(_DWORD *)(a28 + 32);
  v658 = off_24C335AF8;
  v661 = *(_QWORD *)(a28 + 36);
  if (*(char *)(a29 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(&v655, *(const std::string::value_type **)(a29 + 8), *(_QWORD *)(a29 + 16));
    v106 = a29;
  }
  else
  {
    v655 = *(std::string *)(a29 + 8);
  }
  v656 = *(_DWORD *)(v106 + 32);
  v654 = off_24C335AF8;
  v107 = *(_QWORD *)(v106 + 36);
  v108 = a30;
  v657 = v107;
  if (*(char *)(a30 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(&v650, *(const std::string::value_type **)(a30 + 8), *(_QWORD *)(a30 + 16));
    v108 = a30;
  }
  else
  {
    v650 = *(std::string *)(a30 + 8);
  }
  v110 = (uint64_t *)(v108 + 36);
  v109 = *(_QWORD *)(v108 + 36);
  v111 = *(_DWORD *)(v108 + 32);
  v649 = off_24C335B18;
  v652 = v109;
  v365 = v110;
  LODWORD(v109) = *((_DWORD *)v110 + 2);
  v651 = v111;
  v653 = v109;
  if (*(char *)(a31 + 31) < 0)
    std::string::__init_copy_ctor_external(&v646, *(const std::string::value_type **)(a31 + 8), *(_QWORD *)(a31 + 16));
  else
    v646 = *(std::string *)(a31 + 8);
  v647 = *(_DWORD *)(a31 + 32);
  v645 = off_24C335AF8;
  v648 = *(_QWORD *)(a31 + 36);
  v636 = (uint64_t (**)())off_24C335D90;
  v368 = v81;
  if (*(char *)(a32 + 31) < 0)
    std::string::__init_copy_ctor_external(&v637, *(const std::string::value_type **)(a32 + 8), *(_QWORD *)(a32 + 16));
  else
    v637 = *(std::string *)(a32 + 8);
  v638 = *(_DWORD *)(a32 + 32);
  v636 = &off_24C335A98;
  v639 = *(_BYTE *)(a32 + 36);
  v112 = *(const void **)(a32 + 64);
  v113 = *(_QWORD *)(a32 + 48);
  v640 = &off_24C331510;
  v641 = v113;
  v642 = v113;
  if (v113)
    v114 = (void *)operator new[]();
  else
    v114 = 0;
  v643 = v114;
  v644 = 1;
  if (v112)
    memcpy(v114, v112, v113);
  else
    bzero(v114, v113);
  v632 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a33 + 31) < 0)
    std::string::__init_copy_ctor_external(&v633, *(const std::string::value_type **)(a33 + 8), *(_QWORD *)(a33 + 16));
  else
    v633 = *(std::string *)(a33 + 8);
  v634 = *(_DWORD *)(a33 + 32);
  v632 = off_24C335AF8;
  v635 = *(_QWORD *)(a33 + 36);
  v628 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a34 + 31) < 0)
    std::string::__init_copy_ctor_external(&v629, *(const std::string::value_type **)(a34 + 8), *(_QWORD *)(a34 + 16));
  else
    v629 = *(std::string *)(a34 + 8);
  v115 = a35;
  v630 = *(_DWORD *)(a34 + 32);
  v628 = off_24C335AF8;
  v631 = *(_QWORD *)(a34 + 36);
  v624 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a35 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(&v625, *(const std::string::value_type **)(a35 + 8), *(_QWORD *)(a35 + 16));
    v115 = a35;
  }
  else
  {
    v625 = *(std::string *)(a35 + 8);
  }
  v626 = *(_DWORD *)(v115 + 32);
  v624 = off_24C335AF8;
  v627 = *(_QWORD *)(v115 + 36);
  v620 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a36 + 31) < 0)
    std::string::__init_copy_ctor_external(&v621, *(const std::string::value_type **)(a36 + 8), *(_QWORD *)(a36 + 16));
  else
    v621 = *(std::string *)(a36 + 8);
  v622 = *(_DWORD *)(a36 + 32);
  v620 = off_24C335AF8;
  v623 = *(_QWORD *)(a36 + 36);
  v616 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a37 + 31) < 0)
    std::string::__init_copy_ctor_external(&v617, *(const std::string::value_type **)(a37 + 8), *(_QWORD *)(a37 + 16));
  else
    v617 = *(std::string *)(a37 + 8);
  v618 = *(_DWORD *)(a37 + 32);
  v616 = off_24C335AF8;
  v619 = *(_QWORD *)(a37 + 36);
  v612 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a38 + 31) < 0)
    std::string::__init_copy_ctor_external(&v613, *(const std::string::value_type **)(a38 + 8), *(_QWORD *)(a38 + 16));
  else
    v613 = *(std::string *)(a38 + 8);
  v614 = *(_DWORD *)(a38 + 32);
  v612 = off_24C335AF8;
  v615 = *(_QWORD *)(a38 + 36);
  v607 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a39 + 31) < 0)
    std::string::__init_copy_ctor_external(&v608, *(const std::string::value_type **)(a39 + 8), *(_QWORD *)(a39 + 16));
  else
    v608 = *(std::string *)(a39 + 8);
  v609 = *(_DWORD *)(a39 + 32);
  v607 = &off_24C335AB8;
  v610 = *(_BYTE *)(a39 + 36);
  if (*(char *)(a39 + 63) < 0)
    std::string::__init_copy_ctor_external(&v611, *(const std::string::value_type **)(a39 + 40), *(_QWORD *)(a39 + 48));
  else
    v611 = *(std::string *)(a39 + 40);
  v116 = a40;
  v603 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a40 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(&v604, *(const std::string::value_type **)(a40 + 8), *(_QWORD *)(a40 + 16));
    v116 = a40;
  }
  else
  {
    v604 = *(std::string *)(a40 + 8);
  }
  v605 = *(_DWORD *)(v116 + 32);
  v603 = off_24C335AF8;
  v606 = *(_QWORD *)(v116 + 36);
  v599 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a41 + 31) < 0)
    std::string::__init_copy_ctor_external(&v600, *(const std::string::value_type **)(a41 + 8), *(_QWORD *)(a41 + 16));
  else
    v600 = *(std::string *)(a41 + 8);
  v601 = *(_DWORD *)(a41 + 32);
  v599 = off_24C335AF8;
  v602 = *(_QWORD *)(a41 + 36);
  v595 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a42 + 31) < 0)
  {
    v117 = a42;
    std::string::__init_copy_ctor_external(&v596, *(const std::string::value_type **)(a42 + 8), *(_QWORD *)(a42 + 16));
  }
  else
  {
    v596 = *(std::string *)(a42 + 8);
    v117 = a42;
  }
  v118 = a43;
  v597 = *(_DWORD *)(v117 + 32);
  v595 = off_24C335AF8;
  v377 = v117;
  v598 = *(_QWORD *)(v117 + 36);
  v591 = (uint64_t (**)())off_24C335D90;
  v119 = (_OWORD *)(a43 + 8);
  if (*(char *)(a43 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(&v592, *(const std::string::value_type **)(a43 + 8), *(_QWORD *)(a43 + 16));
    v118 = a43;
  }
  else
  {
    *(_OWORD *)&v592.__r_.__value_.__l.__data_ = *v119;
    v592.__r_.__value_.__r.__words[2] = *(_QWORD *)(a43 + 24);
  }
  v593 = *(_DWORD *)(v118 + 32);
  v591 = off_24C335AF8;
  v594 = *(_QWORD *)(v118 + 36);
  v587 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a44 + 31) < 0)
    std::string::__init_copy_ctor_external(&v588, *(const std::string::value_type **)(a44 + 8), *(_QWORD *)(a44 + 16));
  else
    v588 = *(std::string *)(a44 + 8);
  v120 = a45;
  v589 = *(_DWORD *)(a44 + 32);
  v587 = off_24C335AF8;
  v590 = *(_QWORD *)(a44 + 36);
  v582 = (uint64_t (**)())off_24C335D90;
  v121 = (_OWORD *)(a45 + 8);
  if (*(char *)(a45 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(&v583, *(const std::string::value_type **)(a45 + 8), *(_QWORD *)(a45 + 16));
    v121 = (_OWORD *)(a45 + 8);
    v120 = a45;
  }
  else
  {
    *(_OWORD *)&v583.__r_.__value_.__l.__data_ = *v121;
    v583.__r_.__value_.__r.__words[2] = *(_QWORD *)(a45 + 24);
  }
  v364 = v121;
  v123 = (uint64_t *)(v120 + 36);
  v122 = *(_QWORD *)(v120 + 36);
  v124 = *(_DWORD *)(v120 + 32);
  v582 = off_24C335B18;
  v585 = v122;
  v363 = v123;
  LODWORD(v122) = *((_DWORD *)v123 + 2);
  v584 = v124;
  v586 = v122;
  v577 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a46 + 31) < 0)
    std::string::__init_copy_ctor_external(&v578, *(const std::string::value_type **)(a46 + 8), *(_QWORD *)(a46 + 16));
  else
    v578 = *(std::string *)(a46 + 8);
  v125 = *(_QWORD *)(a46 + 36);
  v126 = *(_DWORD *)(a46 + 32);
  v577 = off_24C335B18;
  v580 = v125;
  LODWORD(v125) = *(_DWORD *)(a46 + 44);
  v579 = v126;
  v581 = v125;
  v573 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a47 + 31) < 0)
    std::string::__init_copy_ctor_external(&v574, *(const std::string::value_type **)(a47 + 8), *(_QWORD *)(a47 + 16));
  else
    v574 = *(std::string *)(a47 + 8);
  v575 = *(_DWORD *)(a47 + 32);
  v573 = off_24C335AF8;
  v576 = *(_QWORD *)(a47 + 36);
  v568 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a48 + 31) < 0)
    std::string::__init_copy_ctor_external(&v569, *(const std::string::value_type **)(a48 + 8), *(_QWORD *)(a48 + 16));
  else
    v569 = *(std::string *)(a48 + 8);
  v570 = *(_DWORD *)(a48 + 32);
  v568 = &off_24C335AB8;
  v571 = *(_BYTE *)(a48 + 36);
  if (*(char *)(a48 + 63) < 0)
    std::string::__init_copy_ctor_external(&v572, *(const std::string::value_type **)(a48 + 40), *(_QWORD *)(a48 + 48));
  else
    v572 = *(std::string *)(a48 + 40);
  v563 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a49 + 31) < 0)
    std::string::__init_copy_ctor_external(&v564, *(const std::string::value_type **)(a49 + 8), *(_QWORD *)(a49 + 16));
  else
    v564 = *(std::string *)(a49 + 8);
  v565 = *(_DWORD *)(a49 + 32);
  v563 = &off_24C335AB8;
  v566 = *(_BYTE *)(a49 + 36);
  if (*(char *)(a49 + 63) < 0)
    std::string::__init_copy_ctor_external(&v567, *(const std::string::value_type **)(a49 + 40), *(_QWORD *)(a49 + 48));
  else
    v567 = *(std::string *)(a49 + 40);
  v559 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a50 + 31) < 0)
    std::string::__init_copy_ctor_external(&v560, *(const std::string::value_type **)(a50 + 8), *(_QWORD *)(a50 + 16));
  else
    v560 = *(std::string *)(a50 + 8);
  v561 = *(_DWORD *)(a50 + 32);
  v559 = off_24C335AF8;
  v562 = *(_QWORD *)(a50 + 36);
  v555 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a51 + 31) < 0)
    std::string::__init_copy_ctor_external(&v556, *(const std::string::value_type **)(a51 + 8), *(_QWORD *)(a51 + 16));
  else
    v556 = *(std::string *)(a51 + 8);
  v557 = *(_DWORD *)(a51 + 32);
  v555 = off_24C335AF8;
  v558 = *(_QWORD *)(a51 + 36);
  v551 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a52 + 31) < 0)
  {
    v127 = a52;
    std::string::__init_copy_ctor_external(&v552, *(const std::string::value_type **)(a52 + 8), *(_QWORD *)(a52 + 16));
  }
  else
  {
    v552 = *(std::string *)(a52 + 8);
    v127 = a52;
  }
  v128 = a53;
  v553 = *(_DWORD *)(v127 + 32);
  v551 = off_24C335AF8;
  v554 = *(_QWORD *)(v127 + 36);
  v547 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a53 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(&v548, *(const std::string::value_type **)(a53 + 8), *(_QWORD *)(a53 + 16));
    v128 = a53;
  }
  else
  {
    v548 = *(std::string *)(a53 + 8);
  }
  v549 = *(_DWORD *)(v128 + 32);
  v547 = off_24C335AF8;
  v550 = *(_QWORD *)(v128 + 36);
  v542 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a54 + 31) < 0)
    std::string::__init_copy_ctor_external(&v543, *(const std::string::value_type **)(a54 + 8), *(_QWORD *)(a54 + 16));
  else
    v543 = *(std::string *)(a54 + 8);
  v129 = *(_DWORD *)(a54 + 32);
  v542 = off_24C335B18;
  v545 = *(_QWORD *)(a54 + 36);
  v130 = *(_DWORD *)(a54 + 44);
  v544 = v129;
  v546 = v130;
  v537 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a55 + 31) < 0)
    std::string::__init_copy_ctor_external(&v538, *(const std::string::value_type **)(a55 + 8), *(_QWORD *)(a55 + 16));
  else
    v538 = *(std::string *)(a55 + 8);
  v539 = *(_DWORD *)(a55 + 32);
  v537 = &off_24C335AB8;
  v540 = *(_BYTE *)(a55 + 36);
  if (*(char *)(a55 + 63) < 0)
    std::string::__init_copy_ctor_external(&v541, *(const std::string::value_type **)(a55 + 40), *(_QWORD *)(a55 + 48));
  else
    v541 = *(std::string *)(a55 + 40);
  v131 = a56;
  v532 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a56 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(&v533, *(const std::string::value_type **)(a56 + 8), *(_QWORD *)(a56 + 16));
    v131 = a56;
  }
  else
  {
    v533 = *(std::string *)(a56 + 8);
  }
  v534 = *(_DWORD *)(v131 + 32);
  v532 = &off_24C335AB8;
  v535 = *(_BYTE *)(v131 + 36);
  v343 = (__int128 *)(v131 + 40);
  if (*(char *)(v131 + 63) < 0)
    std::string::__init_copy_ctor_external(&v536, *(const std::string::value_type **)(v131 + 40), *(_QWORD *)(v131 + 48));
  else
    v536 = *(std::string *)(v131 + 40);
  v132 = a57;
  v527 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a57 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(&v528, *(const std::string::value_type **)(a57 + 8), *(_QWORD *)(a57 + 16));
    v132 = a57;
  }
  else
  {
    v528 = *(std::string *)(a57 + 8);
  }
  v133 = *(_DWORD *)(v132 + 32);
  v527 = off_24C335B18;
  v530 = *(_QWORD *)(v132 + 36);
  v362 = v132;
  v134 = *(_DWORD *)(v132 + 44);
  v529 = v133;
  v531 = v134;
  v522 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a58 + 31) < 0)
    std::string::__init_copy_ctor_external(&v523, *(const std::string::value_type **)(a58 + 8), *(_QWORD *)(a58 + 16));
  else
    v523 = *(std::string *)(a58 + 8);
  v135 = *(_DWORD *)(a58 + 32);
  v522 = off_24C335B18;
  v525 = *(_QWORD *)(a58 + 36);
  v136 = *(_DWORD *)(a58 + 44);
  v524 = v135;
  v526 = v136;
  v518 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a59 + 31) < 0)
    std::string::__init_copy_ctor_external(&v519, *(const std::string::value_type **)(a59 + 8), *(_QWORD *)(a59 + 16));
  else
    v519 = *(std::string *)(a59 + 8);
  v520 = *(_DWORD *)(a59 + 32);
  v518 = off_24C335AF8;
  v521 = *(_QWORD *)(a59 + 36);
  v514 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a60 + 31) < 0)
    std::string::__init_copy_ctor_external(&v515, *(const std::string::value_type **)(a60 + 8), *(_QWORD *)(a60 + 16));
  else
    v515 = *(std::string *)(a60 + 8);
  v516 = *(_DWORD *)(a60 + 32);
  v514 = off_24C335AF8;
  v517 = *(_QWORD *)(a60 + 36);
  v510 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a61 + 31) < 0)
    std::string::__init_copy_ctor_external(&v511, *(const std::string::value_type **)(a61 + 8), *(_QWORD *)(a61 + 16));
  else
    v511 = *(std::string *)(a61 + 8);
  v512 = *(_DWORD *)(a61 + 32);
  v510 = off_24C335AF8;
  v513 = *(_QWORD *)(a61 + 36);
  v506 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a62 + 31) < 0)
    std::string::__init_copy_ctor_external(&v507, *(const std::string::value_type **)(a62 + 8), *(_QWORD *)(a62 + 16));
  else
    v507 = *(std::string *)(a62 + 8);
  v508 = *(_DWORD *)(a62 + 32);
  v506 = off_24C335AF8;
  v509 = *(_QWORD *)(a62 + 36);
  v502 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a63 + 31) < 0)
    std::string::__init_copy_ctor_external(&v503, *(const std::string::value_type **)(a63 + 8), *(_QWORD *)(a63 + 16));
  else
    v503 = *(std::string *)(a63 + 8);
  v504 = *(_DWORD *)(a63 + 32);
  v502 = off_24C335AF8;
  v505 = *(_QWORD *)(a63 + 36);
  v498 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a64 + 31) < 0)
    std::string::__init_copy_ctor_external(&v499, *(const std::string::value_type **)(a64 + 8), *(_QWORD *)(a64 + 16));
  else
    v499 = *(std::string *)(a64 + 8);
  v500 = *(_DWORD *)(a64 + 32);
  v498 = off_24C335AF8;
  v501 = *(_QWORD *)(a64 + 36);
  v494 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a65 + 31) < 0)
    std::string::__init_copy_ctor_external(&v495, *(const std::string::value_type **)(a65 + 8), *(_QWORD *)(a65 + 16));
  else
    v495 = *(std::string *)(a65 + 8);
  v496 = *(_DWORD *)(a65 + 32);
  v494 = off_24C335AF8;
  v497 = *(_QWORD *)(a65 + 36);
  v489 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a66 + 31) < 0)
    std::string::__init_copy_ctor_external(&v490, *(const std::string::value_type **)(a66 + 8), *(_QWORD *)(a66 + 16));
  else
    v490 = *(std::string *)(a66 + 8);
  v491 = *(_DWORD *)(a66 + 32);
  v489 = &off_24C335AB8;
  v492 = *(_BYTE *)(a66 + 36);
  if (*(char *)(a66 + 63) < 0)
    std::string::__init_copy_ctor_external(&v493, *(const std::string::value_type **)(a66 + 40), *(_QWORD *)(a66 + 48));
  else
    v493 = *(std::string *)(a66 + 40);
  v484 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a67 + 31) < 0)
    std::string::__init_copy_ctor_external(&v485, *(const std::string::value_type **)(a67 + 8), *(_QWORD *)(a67 + 16));
  else
    v485 = *(std::string *)(a67 + 8);
  v486 = *(_DWORD *)(a67 + 32);
  v484 = &off_24C335AB8;
  v487 = *(_BYTE *)(a67 + 36);
  if (*(char *)(a67 + 63) < 0)
    std::string::__init_copy_ctor_external(&v488, *(const std::string::value_type **)(a67 + 40), *(_QWORD *)(a67 + 48));
  else
    v488 = *(std::string *)(a67 + 40);
  v479 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a68 + 31) < 0)
    std::string::__init_copy_ctor_external(&v480, *(const std::string::value_type **)(a68 + 8), *(_QWORD *)(a68 + 16));
  else
    v480 = *(std::string *)(a68 + 8);
  v481 = *(_DWORD *)(a68 + 32);
  v479 = &off_24C335AB8;
  v482 = *(_BYTE *)(a68 + 36);
  if (*(char *)(a68 + 63) < 0)
    std::string::__init_copy_ctor_external(&v483, *(const std::string::value_type **)(a68 + 40), *(_QWORD *)(a68 + 48));
  else
    v483 = *(std::string *)(a68 + 40);
  v475 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a69 + 31) < 0)
    std::string::__init_copy_ctor_external(&v476, *(const std::string::value_type **)(a69 + 8), *(_QWORD *)(a69 + 16));
  else
    v476 = *(std::string *)(a69 + 8);
  v137 = a70;
  v477 = *(_DWORD *)(a69 + 32);
  v475 = off_24C335AF8;
  v478 = *(_QWORD *)(a69 + 36);
  v470 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a70 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(&v471, *(const std::string::value_type **)(a70 + 8), *(_QWORD *)(a70 + 16));
    v137 = a70;
  }
  else
  {
    v471 = *(std::string *)(a70 + 8);
  }
  v139 = (uint64_t *)(v137 + 36);
  v138 = *(_QWORD *)(v137 + 36);
  v140 = *(_DWORD *)(v137 + 32);
  v470 = off_24C335B18;
  v473 = v138;
  v360 = v139;
  LODWORD(v138) = *((_DWORD *)v139 + 2);
  v472 = v140;
  v474 = v138;
  v466 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a71 + 31) < 0)
    std::string::__init_copy_ctor_external(&v467, *(const std::string::value_type **)(a71 + 8), *(_QWORD *)(a71 + 16));
  else
    v467 = *(std::string *)(a71 + 8);
  v141 = a72;
  v468 = *(_DWORD *)(a71 + 32);
  v466 = off_24C335AF8;
  v469 = *(_QWORD *)(a71 + 36);
  v461 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a72 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(&v462, *(const std::string::value_type **)(a72 + 8), *(_QWORD *)(a72 + 16));
    v141 = a72;
  }
  else
  {
    v462 = *(std::string *)(a72 + 8);
  }
  v463 = *(_DWORD *)(v141 + 32);
  v461 = &off_24C335AB8;
  v464 = *(_BYTE *)(v141 + 36);
  v142 = (_OWORD *)(v141 + 40);
  if (*(char *)(v141 + 63) < 0)
  {
    std::string::__init_copy_ctor_external(&v465, *(const std::string::value_type **)(v141 + 40), *(_QWORD *)(v141 + 48));
  }
  else
  {
    *(_OWORD *)&v465.__r_.__value_.__l.__data_ = *v142;
    v465.__r_.__value_.__r.__words[2] = *(_QWORD *)(v141 + 56);
  }
  v143 = STACK[0x1BE0];
  v456 = (uint64_t (**)())off_24C335D90;
  v384 = v143;
  v342 = v142;
  v358 = v143 + 8;
  if (*(char *)(v143 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(&v457, *(const std::string::value_type **)(v143 + 8), *(_QWORD *)(v143 + 16));
    v143 = v384;
  }
  else
  {
    v457 = *(std::string *)(v143 + 8);
  }
  v145 = v143 + 36;
  v144 = *(_QWORD *)(v143 + 36);
  v146 = STACK[0x1BE8];
  v147 = *(_DWORD *)(v143 + 32);
  v456 = off_24C335B18;
  v459 = v144;
  v357 = v145;
  LODWORD(v144) = *(_DWORD *)(v145 + 8);
  v458 = v147;
  v460 = v144;
  v451 = (uint64_t (**)())off_24C335D90;
  v148 = (_OWORD *)(v146 + 8);
  if (*(char *)(v146 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(&v452, *(const std::string::value_type **)(v146 + 8), *(_QWORD *)(v146 + 16));
  }
  else
  {
    *(_OWORD *)&v452.__r_.__value_.__l.__data_ = *v148;
    v452.__r_.__value_.__r.__words[2] = *(_QWORD *)(v146 + 24);
  }
  v453 = *(_DWORD *)(v146 + 32);
  v451 = &off_24C335AB8;
  v454 = *(_BYTE *)(v146 + 36);
  v149 = (_OWORD *)(v146 + 40);
  v376 = v146;
  if (*(char *)(v146 + 63) < 0)
  {
    std::string::__init_copy_ctor_external(&v455, *(const std::string::value_type **)(v146 + 40), *(_QWORD *)(v146 + 48));
  }
  else
  {
    *(_OWORD *)&v455.__r_.__value_.__l.__data_ = *v149;
    v455.__r_.__value_.__r.__words[2] = *(_QWORD *)(v146 + 56);
  }
  v150 = STACK[0x1BF0];
  v446 = (uint64_t (**)())off_24C335D90;
  v340 = v150 + 8;
  v341 = v148;
  if (*(char *)(v150 + 31) < 0)
    std::string::__init_copy_ctor_external(&v447, *(const std::string::value_type **)(v150 + 8), *(_QWORD *)(v150 + 16));
  else
    v447 = *(std::string *)(v150 + 8);
  v448 = *(_DWORD *)(v150 + 32);
  v446 = &off_24C335AB8;
  v449 = *(_BYTE *)(v150 + 36);
  v151 = (_OWORD *)(v150 + 40);
  v356 = v150;
  if (*(char *)(v150 + 63) < 0)
  {
    std::string::__init_copy_ctor_external(&v450, *(const std::string::value_type **)(v150 + 40), *(_QWORD *)(v150 + 48));
  }
  else
  {
    *(_OWORD *)&v450.__r_.__value_.__l.__data_ = *v151;
    v450.__r_.__value_.__r.__words[2] = *(_QWORD *)(v150 + 56);
  }
  v152 = STACK[0x1BF8];
  v442 = (uint64_t (**)())off_24C335D90;
  v338 = v152 + 8;
  v339 = v149;
  if (*(char *)(v152 + 31) < 0)
    std::string::__init_copy_ctor_external(&v443, *(const std::string::value_type **)(v152 + 8), *(_QWORD *)(v152 + 16));
  else
    v443 = *(std::string *)(v152 + 8);
  v153 = STACK[0x1C00];
  v444 = *(_DWORD *)(v152 + 32);
  v442 = off_24C335AF8;
  v445 = *(_QWORD *)(v152 + 36);
  v437 = (uint64_t (**)())off_24C335D90;
  v383 = v153;
  v359 = v152;
  v337 = v151;
  v355 = v153 + 8;
  if (*(char *)(v153 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(&v438, *(const std::string::value_type **)(v153 + 8), *(_QWORD *)(v153 + 16));
    v153 = v383;
  }
  else
  {
    v438 = *(std::string *)(v153 + 8);
  }
  v155 = v153 + 36;
  v154 = *(_QWORD *)(v153 + 36);
  v156 = STACK[0x1C08];
  v157 = *(_DWORD *)(v153 + 32);
  v437 = off_24C335B18;
  v440 = v154;
  v354 = v155;
  LODWORD(v154) = *(_DWORD *)(v155 + 8);
  v439 = v157;
  v441 = v154;
  v433 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(v156 + 31) < 0)
    std::string::__init_copy_ctor_external(&v434, *(const std::string::value_type **)(v156 + 8), *(_QWORD *)(v156 + 16));
  else
    v434 = *(std::string *)(v156 + 8);
  v158 = STACK[0x1C10];
  v435 = *(_DWORD *)(v156 + 32);
  v433 = off_24C335AF8;
  v436 = *(_QWORD *)(v156 + 36);
  v428 = (uint64_t (**)())off_24C335D90;
  v159 = v158 + 8;
  v382 = v158;
  v336 = v156 + 8;
  if (*(char *)(v158 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(&v429, *(const std::string::value_type **)(v158 + 8), *(_QWORD *)(v158 + 16));
    v158 = v382;
  }
  else
  {
    *(_OWORD *)&v429.__r_.__value_.__l.__data_ = *(_OWORD *)v159;
    v429.__r_.__value_.__r.__words[2] = *(_QWORD *)(v158 + 24);
  }
  v430 = *(_DWORD *)(v158 + 32);
  v428 = &off_24C335AB8;
  v431 = *(_BYTE *)(v158 + 36);
  v160 = (_OWORD *)(v158 + 40);
  if (*(char *)(v158 + 63) < 0)
  {
    std::string::__init_copy_ctor_external(&v432, *(const std::string::value_type **)(v158 + 40), *(_QWORD *)(v158 + 48));
  }
  else
  {
    *(_OWORD *)&v432.__r_.__value_.__l.__data_ = *v160;
    v432.__r_.__value_.__r.__words[2] = *(_QWORD *)(v158 + 56);
  }
  v161 = STACK[0x1C18];
  v424 = (uint64_t (**)())off_24C335D90;
  v335 = v161 + 8;
  if (*(char *)(v161 + 31) < 0)
    std::string::__init_copy_ctor_external(&v425, *(const std::string::value_type **)(v161 + 8), *(_QWORD *)(v161 + 16));
  else
    v425 = *(std::string *)(v161 + 8);
  v162 = STACK[0x1C20];
  v426 = *(_DWORD *)(v161 + 32);
  v424 = off_24C335AF8;
  v427 = *(_QWORD *)(v161 + 36);
  v419 = (uint64_t (**)())off_24C335D90;
  v381 = v162;
  v350 = v161;
  v334 = v160;
  v352 = v162 + 8;
  if (*(char *)(v162 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(&v420, *(const std::string::value_type **)(v162 + 8), *(_QWORD *)(v162 + 16));
    v162 = v381;
  }
  else
  {
    v420 = *(std::string *)(v162 + 8);
  }
  v164 = v162 + 36;
  v163 = *(_QWORD *)(v162 + 36);
  v165 = STACK[0x1C28];
  v166 = *(_DWORD *)(v162 + 32);
  v419 = off_24C335B18;
  v422 = v163;
  v349 = v164;
  LODWORD(v163) = *(_DWORD *)(v164 + 8);
  v421 = v166;
  v423 = v163;
  v415 = (uint64_t (**)())off_24C335D90;
  v351 = v156;
  if (*(char *)(v165 + 31) < 0)
    std::string::__init_copy_ctor_external(&v416, *(const std::string::value_type **)(v165 + 8), *(_QWORD *)(v165 + 16));
  else
    v416 = *(std::string *)(v165 + 8);
  v167 = STACK[0x1C30];
  v417 = *(_DWORD *)(v165 + 32);
  v415 = off_24C335AF8;
  v418 = *(_QWORD *)(v165 + 36);
  v411 = (uint64_t (**)())off_24C335D90;
  v348 = v165;
  v353 = v167 + 8;
  v333 = v165 + 8;
  if (*(char *)(v167 + 31) < 0)
    std::string::__init_copy_ctor_external(&v412, *(const std::string::value_type **)(v167 + 8), *(_QWORD *)(v167 + 16));
  else
    v412 = *(std::string *)(v167 + 8);
  v168 = STACK[0x1C38];
  v413 = *(_DWORD *)(v167 + 32);
  v411 = off_24C335AF8;
  v414 = *(_QWORD *)(v167 + 36);
  v407 = (uint64_t (**)())off_24C335D90;
  v347 = v167;
  if (*(char *)(v168 + 31) < 0)
    std::string::__init_copy_ctor_external(&v408, *(const std::string::value_type **)(v168 + 8), *(_QWORD *)(v168 + 16));
  else
    v408 = *(std::string *)(v168 + 8);
  v169 = STACK[0x1C40];
  v409 = *(_DWORD *)(v168 + 32);
  v407 = off_24C335AF8;
  v410 = *(_QWORD *)(v168 + 36);
  v402 = (uint64_t (**)())off_24C335D90;
  v332 = v169 + 8;
  if (*(char *)(v169 + 31) < 0)
    std::string::__init_copy_ctor_external(&v403, *(const std::string::value_type **)(v169 + 8), *(_QWORD *)(v169 + 16));
  else
    v403 = *(std::string *)(v169 + 8);
  v404 = *(_DWORD *)(v169 + 32);
  v402 = &off_24C335AB8;
  v405 = *(_BYTE *)(v169 + 36);
  v378 = v169 + 40;
  v361 = v169;
  if (*(char *)(v169 + 63) < 0)
    std::string::__init_copy_ctor_external(&v406, *(const std::string::value_type **)(v169 + 40), *(_QWORD *)(v169 + 48));
  else
    v406 = *(std::string *)(v169 + 40);
  v170 = STACK[0x1C48];
  v397 = (uint64_t (**)())off_24C335D90;
  v171 = (_OWORD *)(v170 + 8);
  if (*(char *)(v170 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(&v398, *(const std::string::value_type **)(v170 + 8), *(_QWORD *)(v170 + 16));
    v171 = (_OWORD *)(v170 + 8);
  }
  else
  {
    *(_OWORD *)&v398.__r_.__value_.__l.__data_ = *v171;
    v398.__r_.__value_.__r.__words[2] = *(_QWORD *)(v170 + 24);
  }
  v345 = v171;
  v399 = *(_DWORD *)(v170 + 32);
  v397 = &off_24C335AB8;
  v400 = *(_BYTE *)(v170 + 36);
  v172 = (_OWORD *)(v170 + 40);
  v346 = v170;
  if (*(char *)(v170 + 63) < 0)
  {
    std::string::__init_copy_ctor_external(&v401, *(const std::string::value_type **)(v170 + 40), *(_QWORD *)(v170 + 48));
  }
  else
  {
    *(_OWORD *)&v401.__r_.__value_.__l.__data_ = *v172;
    v401.__r_.__value_.__r.__words[2] = *(_QWORD *)(v170 + 56);
  }
  v173 = STACK[0x1C50];
  v392 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(v173 + 31) < 0)
    std::string::__init_copy_ctor_external(&v393, *(const std::string::value_type **)(v173 + 8), *(_QWORD *)(v173 + 16));
  else
    v393 = *(std::string *)(v173 + 8);
  v174 = *(_QWORD *)(v173 + 36);
  v175 = STACK[0x1C58];
  v176 = *(_DWORD *)(v173 + 32);
  v392 = off_24C335B18;
  v395 = v174;
  LODWORD(v174) = *(_DWORD *)(v173 + 44);
  v394 = v176;
  v396 = v174;
  v388 = (uint64_t (**)())off_24C335D90;
  v380 = v175;
  v330 = v175 + 8;
  v331 = v172;
  if (*(char *)(v175 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(&v389, *(const std::string::value_type **)(v175 + 8), *(_QWORD *)(v175 + 16));
    v175 = v380;
  }
  else
  {
    v389 = *(std::string *)(v175 + 8);
  }
  v177 = STACK[0x1C60];
  v390 = *(_DWORD *)(v175 + 32);
  v388 = off_24C335AF8;
  v391 = *(_QWORD *)(v175 + 36);
  v178 = v177 + 8;
  v379 = v177;
  if (*(char *)(v177 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(v177 + 8), *(_QWORD *)(v177 + 16));
    v177 = v379;
  }
  else
  {
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = *(_OWORD *)v178;
    __p.__r_.__value_.__r.__words[2] = *(_QWORD *)(v177 + 24);
  }
  v386 = *(_DWORD *)(v177 + 32);
  v387 = *(_QWORD *)(v177 + 36);
  mediaplatform::DatabaseTable<long long,int,long long,long long,long long,std::string,long long,int,int,long long,int,int,int,int,std::string,int,int,int,int,int,int,int,int,int,int,int,int,long long,int,mediaplatform::Data,int,int,int,int,int,int,std::string,int,int,int,int,int,long long,long long,int,std::string,std::string,int,int,int,int,long long,std::string,std::string,long long,long long,int,int,int,int,int,int,int,std::string,std::string,std::string,int,long long,int,std::string,long long,std::string,std::string,int,long long,int,std::string,int,long long,int,int,int,std::string,std::string,long long,int,int>::DatabaseTable(v86, (uint64_t)&v770, (uint64_t)&v765, (uint64_t)&v761, (uint64_t)&v756, (uint64_t)&v751, (uint64_t)&v746, (uint64_t)&v741, (uint64_t)&v736, (uint64_t)&v732, (uint64_t)&v728, (uint64_t)&v723, (uint64_t)&v719, (uint64_t)&v715, (uint64_t)&v711, (uint64_t)&v707, (uint64_t)&v702, (uint64_t)&v698, (uint64_t)&v694,
    (uint64_t)&v690,
    (uint64_t)&v686,
    (uint64_t)&v682,
    (uint64_t)&v678,
    (uint64_t)&v674,
    (uint64_t)&v670,
    (uint64_t)&v666,
    (uint64_t)&v662,
    (uint64_t)&v658,
    (uint64_t)&v654,
    (uint64_t)&v649,
    (uint64_t)&v645,
    (uint64_t)&v636,
    (uint64_t)&v632,
    (uint64_t)&v628,
    (uint64_t)&v624,
    (uint64_t)&v620,
    (uint64_t)&v616,
    (uint64_t)&v612,
    (uint64_t)&v607,
    (uint64_t)&v603,
    (uint64_t)&v599,
    (uint64_t)&v595,
    (uint64_t)&v591,
    (uint64_t)&v587,
    (uint64_t)&v582,
    (uint64_t)&v577,
    (uint64_t)&v573,
    (uint64_t)&v568,
    (uint64_t)&v563,
    (uint64_t)&v559,
    (uint64_t)&v555,
    (uint64_t)&v551,
    (uint64_t)&v547,
    (uint64_t)&v542,
    (uint64_t)&v537,
    (uint64_t)&v532,
    (uint64_t)&v527,
    (uint64_t)&v522,
    (uint64_t)&v518,
    (uint64_t)&v514,
    (uint64_t)&v510,
    (uint64_t)&v506,
    (uint64_t)&v502);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v388 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v389.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v389.__r_.__value_.__l.__data_);
  v392 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v393.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v393.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v397);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v402);
  v407 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v408.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v408.__r_.__value_.__l.__data_);
  v411 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v412.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v412.__r_.__value_.__l.__data_);
  v415 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v416.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v416.__r_.__value_.__l.__data_);
  v419 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v420.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v420.__r_.__value_.__l.__data_);
  v424 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v425.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v425.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v428);
  v433 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v434.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v434.__r_.__value_.__l.__data_);
  v437 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v438.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v438.__r_.__value_.__l.__data_);
  v442 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v443.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v443.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v446);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v451);
  v456 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v457.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v457.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v461);
  v466 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v467.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v467.__r_.__value_.__l.__data_);
  v470 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v471.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v471.__r_.__value_.__l.__data_);
  v475 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v476.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v476.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v479);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v484);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v489);
  v494 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v495.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v495.__r_.__value_.__l.__data_);
  v498 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v499.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v499.__r_.__value_.__l.__data_);
  v502 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v503.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v503.__r_.__value_.__l.__data_);
  v506 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v507.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v507.__r_.__value_.__l.__data_);
  v510 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v511.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v511.__r_.__value_.__l.__data_);
  v514 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v515.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v515.__r_.__value_.__l.__data_);
  v518 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v519.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v519.__r_.__value_.__l.__data_);
  v522 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v523.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v523.__r_.__value_.__l.__data_);
  v527 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v528.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v528.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v532);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v537);
  v542 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v543.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v543.__r_.__value_.__l.__data_);
  v547 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v548.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v548.__r_.__value_.__l.__data_);
  v551 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v552.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v552.__r_.__value_.__l.__data_);
  v555 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v556.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v556.__r_.__value_.__l.__data_);
  v559 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v560.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v560.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v563);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v568);
  v573 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v574.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v574.__r_.__value_.__l.__data_);
  v577 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v578.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v578.__r_.__value_.__l.__data_);
  v582 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v583.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v583.__r_.__value_.__l.__data_);
  v587 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v588.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v588.__r_.__value_.__l.__data_);
  v591 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v592.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v592.__r_.__value_.__l.__data_);
  v595 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v596.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v596.__r_.__value_.__l.__data_);
  v599 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v600.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v600.__r_.__value_.__l.__data_);
  v603 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v604.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v604.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v607);
  v612 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v613.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v613.__r_.__value_.__l.__data_);
  v616 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v617.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v617.__r_.__value_.__l.__data_);
  v620 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v621.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v621.__r_.__value_.__l.__data_);
  v624 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v625.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v625.__r_.__value_.__l.__data_);
  v628 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v629.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v629.__r_.__value_.__l.__data_);
  v632 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v633.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v633.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<mediaplatform::Data>::~DatabaseColumn((uint64_t)&v636);
  v645 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v646.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v646.__r_.__value_.__l.__data_);
  v649 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v650.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v650.__r_.__value_.__l.__data_);
  v654 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v655.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v655.__r_.__value_.__l.__data_);
  v658 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v659.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v659.__r_.__value_.__l.__data_);
  v662 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v663.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v663.__r_.__value_.__l.__data_);
  v666 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v667.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v667.__r_.__value_.__l.__data_);
  v670 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v671.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v671.__r_.__value_.__l.__data_);
  v674 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v675.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v675.__r_.__value_.__l.__data_);
  v678 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v679.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v679.__r_.__value_.__l.__data_);
  v682 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v683.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v683.__r_.__value_.__l.__data_);
  v686 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v687.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v687.__r_.__value_.__l.__data_);
  v690 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v691.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v691.__r_.__value_.__l.__data_);
  v694 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v695.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v695.__r_.__value_.__l.__data_);
  v698 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v699.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v699.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v702);
  v707 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v708.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v708.__r_.__value_.__l.__data_);
  v711 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v712.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v712.__r_.__value_.__l.__data_);
  v715 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v716.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v716.__r_.__value_.__l.__data_);
  v719 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v720.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v720.__r_.__value_.__l.__data_);
  v723 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v724.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v724.__r_.__value_.__l.__data_);
  v728 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v729.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v729.__r_.__value_.__l.__data_);
  v732 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v733.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v733.__r_.__value_.__l.__data_);
  v736 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v737.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v737.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v741);
  v746 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v747.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v747.__r_.__value_.__l.__data_);
  v751 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v752.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v752.__r_.__value_.__l.__data_);
  v756 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v757.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v757.__r_.__value_.__l.__data_);
  v761 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v762.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v762.__r_.__value_.__l.__data_);
  v765 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v766.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v766.__r_.__value_.__l.__data_);
  if (SHIBYTE(v770.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v770.__r_.__value_.__l.__data_);
  *(_QWORD *)v86 = &off_24C336440;
  std::__tuple_leaf<0ul,mlcore::MediaColumn<long long>,false>::__tuple_leaf[abi:ne180100]<mlcore::MediaColumn<long long>&,void>(v86 + 4544, v85);
  std::__tuple_leaf<3ul,mlcore::MediaColumn<int>,false>::__tuple_leaf[abi:ne180100]<mlcore::MediaColumn<int>&,void>(v86 + 4592, v375);
  std::__tuple_leaf<0ul,mlcore::MediaColumn<long long>,false>::__tuple_leaf[abi:ne180100]<mlcore::MediaColumn<long long>&,void>(v86 + 4640, v368);
  std::__tuple_leaf<0ul,mlcore::MediaColumn<long long>,false>::__tuple_leaf[abi:ne180100]<mlcore::MediaColumn<long long>&,void>(v86 + 4688, v374);
  std::__tuple_leaf<0ul,mlcore::MediaColumn<long long>,false>::__tuple_leaf[abi:ne180100]<mlcore::MediaColumn<long long>&,void>(v86 + 4736, v371);
  std::__tuple_leaf<5ul,mlcore::MediaColumn<std::string>,false>::__tuple_leaf[abi:ne180100]<mlcore::MediaColumn<std::string>&,void>(v86 + 4784, v369);
  std::__tuple_leaf<0ul,mlcore::MediaColumn<long long>,false>::__tuple_leaf[abi:ne180100]<mlcore::MediaColumn<long long>&,void>(v86 + 4848, v372);
  std::__tuple_leaf<3ul,mlcore::MediaColumn<int>,false>::__tuple_leaf[abi:ne180100]<mlcore::MediaColumn<int>&,void>(v86 + 4896, v373);
  std::__tuple_leaf<3ul,mlcore::MediaColumn<int>,false>::__tuple_leaf[abi:ne180100]<mlcore::MediaColumn<int>&,void>(v86 + 4944, v370);
  std::__tuple_leaf<0ul,mlcore::MediaColumn<long long>,false>::__tuple_leaf[abi:ne180100]<mlcore::MediaColumn<long long>&,void>(v86 + 4992, a12);
  *(_QWORD *)(v86 + 5040) = off_24C335D90;
  v179 = (std::string *)(v86 + 5048);
  if (*(char *)(a13 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v179, *(const std::string::value_type **)(a13 + 8), *(_QWORD *)(a13 + 16));
  }
  else
  {
    v180 = *(_OWORD *)(a13 + 8);
    *(_QWORD *)(v86 + 5064) = *(_QWORD *)(a13 + 24);
    *(_OWORD *)&v179->__r_.__value_.__l.__data_ = v180;
  }
  *(_DWORD *)(v86 + 5072) = *(_DWORD *)(a13 + 32);
  *(_QWORD *)(v86 + 5040) = off_24C335AF8;
  *(_QWORD *)(v86 + 5076) = *(_QWORD *)(a13 + 36);
  *(_QWORD *)(v86 + 5040) = off_24C336AA0;
  std::__tuple_leaf<3ul,mlcore::MediaColumn<int>,false>::__tuple_leaf[abi:ne180100]<mlcore::MediaColumn<int>&,void>(v86 + 5088, a14);
  std::__tuple_leaf<3ul,mlcore::MediaColumn<int>,false>::__tuple_leaf[abi:ne180100]<mlcore::MediaColumn<int>&,void>(v86 + 5136, a15);
  std::__tuple_leaf<3ul,mlcore::MediaColumn<int>,false>::__tuple_leaf[abi:ne180100]<mlcore::MediaColumn<int>&,void>(v86 + 5184, v367);
  *(_QWORD *)(v86 + 5232) = off_24C335D90;
  if (*(char *)(a17 + 31) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(v86 + 5240), *(const std::string::value_type **)(a17 + 8), *(_QWORD *)(a17 + 16));
  }
  else
  {
    v181 = *(_OWORD *)(a17 + 8);
    *(_QWORD *)(v86 + 5256) = *(_QWORD *)(a17 + 24);
    *(_OWORD *)(v86 + 5240) = v181;
  }
  *(_DWORD *)(v86 + 5264) = *(_DWORD *)(a17 + 32);
  *(_QWORD *)(v86 + 5232) = &off_24C335AB8;
  *(_BYTE *)(v86 + 5268) = *(_BYTE *)(a17 + 36);
  v182 = (std::string *)(v86 + 5272);
  if (*(char *)(a17 + 63) < 0)
  {
    std::string::__init_copy_ctor_external(v182, *(const std::string::value_type **)(a17 + 40), *(_QWORD *)(a17 + 48));
  }
  else
  {
    v183 = *(_OWORD *)(a17 + 40);
    *(_QWORD *)(v86 + 5288) = *(_QWORD *)(a17 + 56);
    *(_OWORD *)&v182->__r_.__value_.__l.__data_ = v183;
  }
  *(_QWORD *)(v86 + 5232) = &off_24C336A60;
  std::__tuple_leaf<3ul,mlcore::MediaColumn<int>,false>::__tuple_leaf[abi:ne180100]<mlcore::MediaColumn<int>&,void>(v86 + 5296, a18);
  std::__tuple_leaf<3ul,mlcore::MediaColumn<int>,false>::__tuple_leaf[abi:ne180100]<mlcore::MediaColumn<int>&,void>(v86 + 5344, a19);
  *(_QWORD *)(v86 + 5392) = off_24C335D90;
  if (*(char *)(a20 + 31) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(v86 + 5400), *(const std::string::value_type **)(a20 + 8), *(_QWORD *)(a20 + 16));
  }
  else
  {
    v184 = *(_OWORD *)(a20 + 8);
    *(_QWORD *)(v86 + 5416) = *(_QWORD *)(a20 + 24);
    *(_OWORD *)(v86 + 5400) = v184;
  }
  *(_DWORD *)(v86 + 5424) = *(_DWORD *)(a20 + 32);
  *(_QWORD *)(v86 + 5392) = off_24C335AF8;
  *(_QWORD *)(v86 + 5428) = *(_QWORD *)(a20 + 36);
  *(_QWORD *)(v86 + 5392) = off_24C336AA0;
  std::__tuple_leaf<3ul,mlcore::MediaColumn<int>,false>::__tuple_leaf[abi:ne180100]<mlcore::MediaColumn<int>&,void>(v86 + 5440, a21);
  *(_QWORD *)(v86 + 5488) = off_24C335D90;
  v185 = (std::string *)(v86 + 5496);
  if (*(char *)(a22 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v185, *(const std::string::value_type **)(a22 + 8), *(_QWORD *)(a22 + 16));
  }
  else
  {
    v186 = *(_OWORD *)(a22 + 8);
    *(_QWORD *)(v86 + 5512) = *(_QWORD *)(a22 + 24);
    *(_OWORD *)&v185->__r_.__value_.__l.__data_ = v186;
  }
  *(_DWORD *)(v86 + 5520) = *(_DWORD *)(a22 + 32);
  *(_QWORD *)(v86 + 5488) = off_24C335AF8;
  *(_QWORD *)(v86 + 5524) = *(_QWORD *)(a22 + 36);
  *(_QWORD *)(v86 + 5488) = off_24C336AA0;
  *(_QWORD *)(v86 + 5536) = off_24C335D90;
  v187 = (std::string *)(v86 + 5544);
  if (*(char *)(a23 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v187, *(const std::string::value_type **)(a23 + 8), *(_QWORD *)(a23 + 16));
  }
  else
  {
    v188 = *v344;
    *(_QWORD *)(v86 + 5560) = *((_QWORD *)v344 + 2);
    *(_OWORD *)&v187->__r_.__value_.__l.__data_ = v188;
  }
  *(_DWORD *)(v86 + 5568) = *(_DWORD *)(a23 + 32);
  *(_QWORD *)(v86 + 5536) = off_24C335AF8;
  *(_QWORD *)(v86 + 5572) = *(_QWORD *)(a23 + 36);
  *(_QWORD *)(v86 + 5536) = off_24C336AA0;
  *(_QWORD *)(v86 + 5584) = off_24C335D90;
  v189 = (std::string *)(v86 + 5592);
  if (*(char *)(a24 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v189, *(const std::string::value_type **)(a24 + 8), *(_QWORD *)(a24 + 16));
  }
  else
  {
    v190 = *(_OWORD *)(a24 + 8);
    *(_QWORD *)(v86 + 5608) = *(_QWORD *)(a24 + 24);
    *(_OWORD *)&v189->__r_.__value_.__l.__data_ = v190;
  }
  *(_DWORD *)(v86 + 5616) = *(_DWORD *)(a24 + 32);
  *(_QWORD *)(v86 + 5584) = off_24C335AF8;
  *(_QWORD *)(v86 + 5620) = *(_QWORD *)(a24 + 36);
  *(_QWORD *)(v86 + 5584) = off_24C336AA0;
  std::__tuple_leaf<3ul,mlcore::MediaColumn<int>,false>::__tuple_leaf[abi:ne180100]<mlcore::MediaColumn<int>&,void>(v86 + 5632, v366);
  *(_QWORD *)(v86 + 5680) = off_24C335D90;
  v191 = (std::string *)(v86 + 5688);
  if (*(char *)(a26 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v191, *(const std::string::value_type **)(a26 + 8), *(_QWORD *)(a26 + 16));
  }
  else
  {
    v192 = *(_OWORD *)(a26 + 8);
    *(_QWORD *)(v86 + 5704) = *(_QWORD *)(a26 + 24);
    *(_OWORD *)&v191->__r_.__value_.__l.__data_ = v192;
  }
  *(_DWORD *)(v86 + 5712) = *(_DWORD *)(a26 + 32);
  *(_QWORD *)(v86 + 5680) = off_24C335AF8;
  *(_QWORD *)(v86 + 5716) = *(_QWORD *)(a26 + 36);
  *(_QWORD *)(v86 + 5680) = off_24C336AA0;
  *(_QWORD *)(v86 + 5728) = off_24C335D90;
  v193 = (std::string *)(v86 + 5736);
  v194 = a27;
  if (*(char *)(a27 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v193, *(const std::string::value_type **)(a27 + 8), *(_QWORD *)(a27 + 16));
    v194 = a27;
  }
  else
  {
    v195 = *(_OWORD *)(a27 + 8);
    *(_QWORD *)(v86 + 5752) = *(_QWORD *)(a27 + 24);
    *(_OWORD *)&v193->__r_.__value_.__l.__data_ = v195;
  }
  *(_DWORD *)(v86 + 5760) = *(_DWORD *)(v194 + 32);
  *(_QWORD *)(v86 + 5728) = off_24C335AF8;
  *(_QWORD *)(v86 + 5764) = *(_QWORD *)(v194 + 36);
  *(_QWORD *)(v86 + 5728) = off_24C336AA0;
  *(_QWORD *)(v86 + 5776) = off_24C335D90;
  v196 = (std::string *)(v86 + 5784);
  if (*(char *)(a28 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v196, *(const std::string::value_type **)(a28 + 8), *(_QWORD *)(a28 + 16));
  }
  else
  {
    v197 = *(_OWORD *)(a28 + 8);
    *(_QWORD *)(v86 + 5800) = *(_QWORD *)(a28 + 24);
    *(_OWORD *)&v196->__r_.__value_.__l.__data_ = v197;
  }
  *(_DWORD *)(v86 + 5808) = *(_DWORD *)(a28 + 32);
  *(_QWORD *)(v86 + 5776) = off_24C335AF8;
  *(_QWORD *)(v86 + 5812) = *(_QWORD *)(a28 + 36);
  *(_QWORD *)(v86 + 5776) = off_24C336AA0;
  *(_QWORD *)(v86 + 5824) = off_24C335D90;
  v198 = a29;
  if (*(char *)(a29 + 31) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(v86 + 5832), *(const std::string::value_type **)(a29 + 8), *(_QWORD *)(a29 + 16));
    v198 = a29;
  }
  else
  {
    v199 = *(_OWORD *)(a29 + 8);
    *(_QWORD *)(v86 + 5848) = *(_QWORD *)(a29 + 24);
    *(_OWORD *)(v86 + 5832) = v199;
  }
  *(_DWORD *)(v86 + 5856) = *(_DWORD *)(v198 + 32);
  *(_QWORD *)(v86 + 5824) = off_24C335AF8;
  *(_QWORD *)(v86 + 5860) = *(_QWORD *)(v198 + 36);
  *(_QWORD *)(v86 + 5824) = off_24C336AA0;
  *(_QWORD *)(v86 + 5872) = off_24C335D90;
  v200 = a30;
  if (*(char *)(a30 + 31) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(v86 + 5880), *(const std::string::value_type **)(a30 + 8), *(_QWORD *)(a30 + 16));
    v200 = a30;
  }
  else
  {
    v201 = *(_OWORD *)(a30 + 8);
    *(_QWORD *)(v86 + 5896) = *(_QWORD *)(a30 + 24);
    *(_OWORD *)(v86 + 5880) = v201;
  }
  *(_DWORD *)(v86 + 5904) = *(_DWORD *)(v200 + 32);
  *(_QWORD *)(v86 + 5872) = off_24C335B18;
  v202 = *v365;
  *(_DWORD *)(v86 + 5916) = *((_DWORD *)v365 + 2);
  *(_QWORD *)(v86 + 5908) = v202;
  *(_QWORD *)(v86 + 5872) = off_24C336AC0;
  *(_QWORD *)(v86 + 5920) = off_24C335D90;
  v203 = (std::string *)(v86 + 5928);
  if (*(char *)(a31 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v203, *(const std::string::value_type **)(a31 + 8), *(_QWORD *)(a31 + 16));
  }
  else
  {
    v204 = *(_OWORD *)(a31 + 8);
    *(_QWORD *)(v86 + 5944) = *(_QWORD *)(a31 + 24);
    *(_OWORD *)&v203->__r_.__value_.__l.__data_ = v204;
  }
  *(_DWORD *)(v86 + 5952) = *(_DWORD *)(a31 + 32);
  *(_QWORD *)(v86 + 5920) = off_24C335AF8;
  *(_QWORD *)(v86 + 5956) = *(_QWORD *)(a31 + 36);
  *(_QWORD *)(v86 + 5920) = off_24C336AA0;
  *(_QWORD *)(v86 + 5968) = off_24C335D90;
  if (*(char *)(a32 + 31) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(v86 + 5976), *(const std::string::value_type **)(a32 + 8), *(_QWORD *)(a32 + 16));
  }
  else
  {
    v205 = *(_OWORD *)(a32 + 8);
    *(_QWORD *)(v86 + 5992) = *(_QWORD *)(a32 + 24);
    *(_OWORD *)(v86 + 5976) = v205;
  }
  *(_DWORD *)(v86 + 6000) = *(_DWORD *)(a32 + 32);
  *(_QWORD *)(v86 + 5968) = &off_24C335A98;
  *(_BYTE *)(v86 + 6004) = *(_BYTE *)(a32 + 36);
  mediaplatform::Data::Data((mediaplatform::Data *)(v86 + 6008), (const mediaplatform::Data *)(a32 + 40));
  *(_QWORD *)(v86 + 5968) = &off_24C336A40;
  *(_QWORD *)(v86 + 6048) = off_24C335D90;
  v206 = (std::string *)(v86 + 6056);
  if (*(char *)(a33 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v206, *(const std::string::value_type **)(a33 + 8), *(_QWORD *)(a33 + 16));
  }
  else
  {
    v207 = *(_OWORD *)(a33 + 8);
    *(_QWORD *)(v86 + 6072) = *(_QWORD *)(a33 + 24);
    *(_OWORD *)&v206->__r_.__value_.__l.__data_ = v207;
  }
  *(_DWORD *)(v86 + 6080) = *(_DWORD *)(a33 + 32);
  *(_QWORD *)(v86 + 6048) = off_24C335AF8;
  *(_QWORD *)(v86 + 6084) = *(_QWORD *)(a33 + 36);
  *(_QWORD *)(v86 + 6048) = off_24C336AA0;
  *(_QWORD *)(v86 + 6096) = off_24C335D90;
  v208 = (std::string *)(v86 + 6104);
  if (*(char *)(a34 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v208, *(const std::string::value_type **)(a34 + 8), *(_QWORD *)(a34 + 16));
  }
  else
  {
    v209 = *(_OWORD *)(a34 + 8);
    *(_QWORD *)(v86 + 6120) = *(_QWORD *)(a34 + 24);
    *(_OWORD *)&v208->__r_.__value_.__l.__data_ = v209;
  }
  *(_DWORD *)(v86 + 6128) = *(_DWORD *)(a34 + 32);
  *(_QWORD *)(v86 + 6096) = off_24C335AF8;
  *(_QWORD *)(v86 + 6132) = *(_QWORD *)(a34 + 36);
  *(_QWORD *)(v86 + 6096) = off_24C336AA0;
  *(_QWORD *)(v86 + 6144) = off_24C335D90;
  v210 = (std::string *)(v86 + 6152);
  v211 = a35;
  if (*(char *)(a35 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v210, *(const std::string::value_type **)(a35 + 8), *(_QWORD *)(a35 + 16));
    v211 = a35;
  }
  else
  {
    v212 = *(_OWORD *)(a35 + 8);
    *(_QWORD *)(v86 + 6168) = *(_QWORD *)(a35 + 24);
    *(_OWORD *)&v210->__r_.__value_.__l.__data_ = v212;
  }
  *(_DWORD *)(v86 + 6176) = *(_DWORD *)(v211 + 32);
  *(_QWORD *)(v86 + 6144) = off_24C335AF8;
  *(_QWORD *)(v86 + 6180) = *(_QWORD *)(v211 + 36);
  *(_QWORD *)(v86 + 6144) = off_24C336AA0;
  *(_QWORD *)(v86 + 6192) = off_24C335D90;
  v213 = (std::string *)(v86 + 6200);
  if (*(char *)(a36 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v213, *(const std::string::value_type **)(a36 + 8), *(_QWORD *)(a36 + 16));
  }
  else
  {
    v214 = *(_OWORD *)(a36 + 8);
    *(_QWORD *)(v86 + 6216) = *(_QWORD *)(a36 + 24);
    *(_OWORD *)&v213->__r_.__value_.__l.__data_ = v214;
  }
  *(_DWORD *)(v86 + 6224) = *(_DWORD *)(a36 + 32);
  *(_QWORD *)(v86 + 6192) = off_24C335AF8;
  *(_QWORD *)(v86 + 6228) = *(_QWORD *)(a36 + 36);
  *(_QWORD *)(v86 + 6192) = off_24C336AA0;
  *(_QWORD *)(v86 + 6240) = off_24C335D90;
  v215 = (std::string *)(v86 + 6248);
  if (*(char *)(a37 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v215, *(const std::string::value_type **)(a37 + 8), *(_QWORD *)(a37 + 16));
  }
  else
  {
    v216 = *(_OWORD *)(a37 + 8);
    *(_QWORD *)(v86 + 6264) = *(_QWORD *)(a37 + 24);
    *(_OWORD *)&v215->__r_.__value_.__l.__data_ = v216;
  }
  *(_DWORD *)(v86 + 6272) = *(_DWORD *)(a37 + 32);
  *(_QWORD *)(v86 + 6240) = off_24C335AF8;
  *(_QWORD *)(v86 + 6276) = *(_QWORD *)(a37 + 36);
  *(_QWORD *)(v86 + 6240) = off_24C336AA0;
  *(_QWORD *)(v86 + 6288) = off_24C335D90;
  v217 = (std::string *)(v86 + 6296);
  if (*(char *)(a38 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v217, *(const std::string::value_type **)(a38 + 8), *(_QWORD *)(a38 + 16));
  }
  else
  {
    v218 = *(_OWORD *)(a38 + 8);
    *(_QWORD *)(v86 + 6312) = *(_QWORD *)(a38 + 24);
    *(_OWORD *)&v217->__r_.__value_.__l.__data_ = v218;
  }
  *(_DWORD *)(v86 + 6320) = *(_DWORD *)(a38 + 32);
  *(_QWORD *)(v86 + 6288) = off_24C335AF8;
  *(_QWORD *)(v86 + 6324) = *(_QWORD *)(a38 + 36);
  *(_QWORD *)(v86 + 6288) = off_24C336AA0;
  std::__tuple_leaf<36ul,mlcore::MediaColumn<std::string>,false>::__tuple_leaf[abi:ne180100]<mlcore::MediaColumn<std::string>&,void>(v86 + 6336, a39);
  *(_QWORD *)(v86 + 6400) = off_24C335D90;
  v219 = a40;
  if (*(char *)(a40 + 31) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(v86 + 6408), *(const std::string::value_type **)(a40 + 8), *(_QWORD *)(a40 + 16));
    v219 = a40;
  }
  else
  {
    v220 = *(_OWORD *)(a40 + 8);
    *(_QWORD *)(v86 + 6424) = *(_QWORD *)(a40 + 24);
    *(_OWORD *)(v86 + 6408) = v220;
  }
  *(_DWORD *)(v86 + 6432) = *(_DWORD *)(v219 + 32);
  *(_QWORD *)(v86 + 6400) = off_24C335AF8;
  *(_QWORD *)(v86 + 6436) = *(_QWORD *)(v219 + 36);
  *(_QWORD *)(v86 + 6400) = off_24C336AA0;
  *(_QWORD *)(v86 + 6448) = off_24C335D90;
  v221 = (std::string *)(v86 + 6456);
  if (*(char *)(a41 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v221, *(const std::string::value_type **)(a41 + 8), *(_QWORD *)(a41 + 16));
  }
  else
  {
    v222 = *(_OWORD *)(a41 + 8);
    *(_QWORD *)(v86 + 6472) = *(_QWORD *)(a41 + 24);
    *(_OWORD *)&v221->__r_.__value_.__l.__data_ = v222;
  }
  *(_DWORD *)(v86 + 6480) = *(_DWORD *)(a41 + 32);
  *(_QWORD *)(v86 + 6448) = off_24C335AF8;
  *(_QWORD *)(v86 + 6484) = *(_QWORD *)(a41 + 36);
  *(_QWORD *)(v86 + 6448) = off_24C336AA0;
  *(_QWORD *)(v86 + 6496) = off_24C335D90;
  v223 = (std::string *)(v86 + 6504);
  v224 = v377;
  if (*(char *)(v377 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v223, *(const std::string::value_type **)(v377 + 8), *(_QWORD *)(v377 + 16));
    v224 = v377;
  }
  else
  {
    v225 = *(_OWORD *)(a42 + 8);
    *(_QWORD *)(v86 + 6520) = *(_QWORD *)(a42 + 24);
    *(_OWORD *)&v223->__r_.__value_.__l.__data_ = v225;
  }
  *(_DWORD *)(v86 + 6528) = *(_DWORD *)(v224 + 32);
  *(_QWORD *)(v86 + 6496) = off_24C335AF8;
  *(_QWORD *)(v86 + 6532) = *(_QWORD *)(v224 + 36);
  *(_QWORD *)(v86 + 6496) = off_24C336AA0;
  *(_QWORD *)(v86 + 6544) = off_24C335D90;
  v226 = (std::string *)(v86 + 6552);
  v227 = a43;
  if (*(char *)(a43 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v226, *(const std::string::value_type **)(a43 + 8), *(_QWORD *)(a43 + 16));
    v227 = a43;
  }
  else
  {
    v228 = *v119;
    *(_QWORD *)(v86 + 6568) = *(_QWORD *)(a43 + 24);
    *(_OWORD *)&v226->__r_.__value_.__l.__data_ = v228;
  }
  *(_DWORD *)(v86 + 6576) = *(_DWORD *)(v227 + 32);
  *(_QWORD *)(v86 + 6544) = off_24C335AF8;
  *(_QWORD *)(v86 + 6580) = *(_QWORD *)(v227 + 36);
  *(_QWORD *)(v86 + 6544) = off_24C336AA0;
  std::__tuple_leaf<3ul,mlcore::MediaColumn<int>,false>::__tuple_leaf[abi:ne180100]<mlcore::MediaColumn<int>&,void>(v86 + 6592, a44);
  *(_QWORD *)(v86 + 6640) = off_24C335D90;
  v229 = a45;
  if (*(char *)(a45 + 31) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(v86 + 6648), *(const std::string::value_type **)(a45 + 8), *(_QWORD *)(a45 + 16));
    v229 = a45;
  }
  else
  {
    v230 = *v364;
    *(_QWORD *)(v86 + 6664) = *((_QWORD *)v364 + 2);
    *(_OWORD *)(v86 + 6648) = v230;
  }
  *(_DWORD *)(v86 + 6672) = *(_DWORD *)(v229 + 32);
  *(_QWORD *)(v86 + 6640) = off_24C335B18;
  v231 = *v363;
  *(_DWORD *)(v86 + 6684) = *((_DWORD *)v363 + 2);
  *(_QWORD *)(v86 + 6676) = v231;
  *(_QWORD *)(v86 + 6640) = off_24C336AC0;
  *(_QWORD *)(v86 + 6688) = off_24C335D90;
  if (*(char *)(a46 + 31) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(v86 + 6696), *(const std::string::value_type **)(a46 + 8), *(_QWORD *)(a46 + 16));
  }
  else
  {
    v232 = *(_OWORD *)(a46 + 8);
    *(_QWORD *)(v86 + 6712) = *(_QWORD *)(a46 + 24);
    *(_OWORD *)(v86 + 6696) = v232;
  }
  *(_DWORD *)(v86 + 6720) = *(_DWORD *)(a46 + 32);
  *(_QWORD *)(v86 + 6688) = off_24C335B18;
  v233 = *(_QWORD *)(a46 + 36);
  *(_DWORD *)(v86 + 6732) = *(_DWORD *)(a46 + 44);
  *(_QWORD *)(v86 + 6724) = v233;
  *(_QWORD *)(v86 + 6688) = off_24C336AC0;
  *(_QWORD *)(v86 + 6736) = off_24C335D90;
  v234 = (std::string *)(v86 + 6744);
  if (*(char *)(a47 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v234, *(const std::string::value_type **)(a47 + 8), *(_QWORD *)(a47 + 16));
  }
  else
  {
    v235 = *(_OWORD *)(a47 + 8);
    *(_QWORD *)(v86 + 6760) = *(_QWORD *)(a47 + 24);
    *(_OWORD *)&v234->__r_.__value_.__l.__data_ = v235;
  }
  *(_DWORD *)(v86 + 6768) = *(_DWORD *)(a47 + 32);
  *(_QWORD *)(v86 + 6736) = off_24C335AF8;
  *(_QWORD *)(v86 + 6772) = *(_QWORD *)(a47 + 36);
  *(_QWORD *)(v86 + 6736) = off_24C336AA0;
  *(_QWORD *)(v86 + 6784) = off_24C335D90;
  if (*(char *)(a48 + 31) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(v86 + 6792), *(const std::string::value_type **)(a48 + 8), *(_QWORD *)(a48 + 16));
  }
  else
  {
    v236 = *(_OWORD *)(a48 + 8);
    *(_QWORD *)(v86 + 6808) = *(_QWORD *)(a48 + 24);
    *(_OWORD *)(v86 + 6792) = v236;
  }
  *(_DWORD *)(v86 + 6816) = *(_DWORD *)(a48 + 32);
  *(_QWORD *)(v86 + 6784) = &off_24C335AB8;
  *(_BYTE *)(v86 + 6820) = *(_BYTE *)(a48 + 36);
  v237 = (std::string *)(v86 + 6824);
  v238 = (__int128 *)(a49 + 8);
  if (*(char *)(a48 + 63) < 0)
  {
    std::string::__init_copy_ctor_external(v237, *(const std::string::value_type **)(a48 + 40), *(_QWORD *)(a48 + 48));
    v238 = (__int128 *)(a49 + 8);
  }
  else
  {
    v239 = *(_OWORD *)(a48 + 40);
    *(_QWORD *)(v86 + 6840) = *(_QWORD *)(a48 + 56);
    *(_OWORD *)&v237->__r_.__value_.__l.__data_ = v239;
  }
  *(_QWORD *)(v86 + 6784) = &off_24C336A60;
  *(_QWORD *)(v86 + 6848) = off_24C335D90;
  if (*(char *)(a49 + 31) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(v86 + 6856), *(const std::string::value_type **)(a49 + 8), *(_QWORD *)(a49 + 16));
  }
  else
  {
    v240 = *v238;
    *(_QWORD *)(v86 + 6872) = *((_QWORD *)v238 + 2);
    *(_OWORD *)(v86 + 6856) = v240;
  }
  *(_DWORD *)(v86 + 6880) = *(_DWORD *)(a49 + 32);
  *(_QWORD *)(v86 + 6848) = &off_24C335AB8;
  *(_BYTE *)(v86 + 6884) = *(_BYTE *)(a49 + 36);
  v241 = (std::string *)(v86 + 6888);
  if (*(char *)(a49 + 63) < 0)
  {
    std::string::__init_copy_ctor_external(v241, *(const std::string::value_type **)(a49 + 40), *(_QWORD *)(a49 + 48));
  }
  else
  {
    v242 = *(_OWORD *)(a49 + 40);
    *(_QWORD *)(v86 + 6904) = *(_QWORD *)(a49 + 56);
    *(_OWORD *)&v241->__r_.__value_.__l.__data_ = v242;
  }
  *(_QWORD *)(v86 + 6848) = &off_24C336A60;
  *(_QWORD *)(v86 + 6912) = off_24C335D90;
  v243 = (std::string *)(v86 + 6920);
  if (*(char *)(a50 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v243, *(const std::string::value_type **)(a50 + 8), *(_QWORD *)(a50 + 16));
  }
  else
  {
    v244 = *(_OWORD *)(a50 + 8);
    *(_QWORD *)(v86 + 6936) = *(_QWORD *)(a50 + 24);
    *(_OWORD *)&v243->__r_.__value_.__l.__data_ = v244;
  }
  *(_DWORD *)(v86 + 6944) = *(_DWORD *)(a50 + 32);
  *(_QWORD *)(v86 + 6912) = off_24C335AF8;
  *(_QWORD *)(v86 + 6948) = *(_QWORD *)(a50 + 36);
  *(_QWORD *)(v86 + 6912) = off_24C336AA0;
  std::__tuple_leaf<3ul,mlcore::MediaColumn<int>,false>::__tuple_leaf[abi:ne180100]<mlcore::MediaColumn<int>&,void>(v86 + 6960, a51);
  std::__tuple_leaf<3ul,mlcore::MediaColumn<int>,false>::__tuple_leaf[abi:ne180100]<mlcore::MediaColumn<int>&,void>(v86 + 7008, v127);
  *(_QWORD *)(v86 + 7056) = off_24C335D90;
  v245 = a53;
  if (*(char *)(a53 + 31) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(v86 + 7064), *(const std::string::value_type **)(a53 + 8), *(_QWORD *)(a53 + 16));
    v245 = a53;
  }
  else
  {
    v246 = *(_OWORD *)(a53 + 8);
    *(_QWORD *)(v86 + 7080) = *(_QWORD *)(a53 + 24);
    *(_OWORD *)(v86 + 7064) = v246;
  }
  *(_DWORD *)(v86 + 7088) = *(_DWORD *)(v245 + 32);
  *(_QWORD *)(v86 + 7056) = off_24C335AF8;
  *(_QWORD *)(v86 + 7092) = *(_QWORD *)(v245 + 36);
  *(_QWORD *)(v86 + 7056) = off_24C336AA0;
  std::__tuple_leaf<0ul,mlcore::MediaColumn<long long>,false>::__tuple_leaf[abi:ne180100]<mlcore::MediaColumn<long long>&,void>(v86 + 7104, a54);
  std::__tuple_leaf<52ul,mlcore::MediaColumn<std::string>,false>::__tuple_leaf[abi:ne180100]<mlcore::MediaColumn<std::string>&,void>(v86 + 7152, a55);
  *(_QWORD *)(v86 + 7216) = off_24C335D90;
  v247 = a56;
  if (*(char *)(a56 + 31) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(v86 + 7224), *(const std::string::value_type **)(a56 + 8), *(_QWORD *)(a56 + 16));
    v247 = a56;
  }
  else
  {
    v248 = *(_OWORD *)(a56 + 8);
    *(_QWORD *)(v86 + 7240) = *(_QWORD *)(a56 + 24);
    *(_OWORD *)(v86 + 7224) = v248;
  }
  *(_DWORD *)(v86 + 7248) = *(_DWORD *)(v247 + 32);
  *(_QWORD *)(v86 + 7216) = &off_24C335AB8;
  *(_BYTE *)(v86 + 7252) = *(_BYTE *)(v247 + 36);
  v249 = (std::string *)(v86 + 7256);
  if (*(char *)(v247 + 63) < 0)
  {
    std::string::__init_copy_ctor_external(v249, *(const std::string::value_type **)(v247 + 40), *(_QWORD *)(v247 + 48));
  }
  else
  {
    v250 = *v343;
    *(_QWORD *)(v86 + 7272) = *((_QWORD *)v343 + 2);
    *(_OWORD *)&v249->__r_.__value_.__l.__data_ = v250;
  }
  *(_QWORD *)(v86 + 7216) = &off_24C336A60;
  std::__tuple_leaf<0ul,mlcore::MediaColumn<long long>,false>::__tuple_leaf[abi:ne180100]<mlcore::MediaColumn<long long>&,void>(v86 + 7280, v362);
  std::__tuple_leaf<0ul,mlcore::MediaColumn<long long>,false>::__tuple_leaf[abi:ne180100]<mlcore::MediaColumn<long long>&,void>(v86 + 7328, a58);
  *(_QWORD *)(v86 + 7376) = off_24C335D90;
  v251 = (std::string *)(v86 + 7384);
  if (*(char *)(a59 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v251, *(const std::string::value_type **)(a59 + 8), *(_QWORD *)(a59 + 16));
  }
  else
  {
    v252 = *(_OWORD *)(a59 + 8);
    *(_QWORD *)(v86 + 7400) = *(_QWORD *)(a59 + 24);
    *(_OWORD *)&v251->__r_.__value_.__l.__data_ = v252;
  }
  *(_DWORD *)(v86 + 7408) = *(_DWORD *)(a59 + 32);
  *(_QWORD *)(v86 + 7376) = off_24C335AF8;
  *(_QWORD *)(v86 + 7412) = *(_QWORD *)(a59 + 36);
  *(_QWORD *)(v86 + 7376) = off_24C336AA0;
  *(_QWORD *)(v86 + 7424) = off_24C335D90;
  v253 = (std::string *)(v86 + 7432);
  if (*(char *)(a60 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v253, *(const std::string::value_type **)(a60 + 8), *(_QWORD *)(a60 + 16));
  }
  else
  {
    v254 = *(_OWORD *)(a60 + 8);
    *(_QWORD *)(v86 + 7448) = *(_QWORD *)(a60 + 24);
    *(_OWORD *)&v253->__r_.__value_.__l.__data_ = v254;
  }
  *(_DWORD *)(v86 + 7456) = *(_DWORD *)(a60 + 32);
  *(_QWORD *)(v86 + 7424) = off_24C335AF8;
  *(_QWORD *)(v86 + 7460) = *(_QWORD *)(a60 + 36);
  *(_QWORD *)(v86 + 7424) = off_24C336AA0;
  *(_QWORD *)(v86 + 7472) = off_24C335D90;
  v255 = (std::string *)(v86 + 7480);
  if (*(char *)(a61 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v255, *(const std::string::value_type **)(a61 + 8), *(_QWORD *)(a61 + 16));
  }
  else
  {
    v256 = *(_OWORD *)(a61 + 8);
    *(_QWORD *)(v86 + 7496) = *(_QWORD *)(a61 + 24);
    *(_OWORD *)&v255->__r_.__value_.__l.__data_ = v256;
  }
  *(_DWORD *)(v86 + 7504) = *(_DWORD *)(a61 + 32);
  *(_QWORD *)(v86 + 7472) = off_24C335AF8;
  *(_QWORD *)(v86 + 7508) = *(_QWORD *)(a61 + 36);
  *(_QWORD *)(v86 + 7472) = off_24C336AA0;
  *(_QWORD *)(v86 + 7520) = off_24C335D90;
  v257 = (std::string *)(v86 + 7528);
  if (*(char *)(a62 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v257, *(const std::string::value_type **)(a62 + 8), *(_QWORD *)(a62 + 16));
  }
  else
  {
    v258 = *(_OWORD *)(a62 + 8);
    *(_QWORD *)(v86 + 7544) = *(_QWORD *)(a62 + 24);
    *(_OWORD *)&v257->__r_.__value_.__l.__data_ = v258;
  }
  *(_DWORD *)(v86 + 7552) = *(_DWORD *)(a62 + 32);
  *(_QWORD *)(v86 + 7520) = off_24C335AF8;
  *(_QWORD *)(v86 + 7556) = *(_QWORD *)(a62 + 36);
  *(_QWORD *)(v86 + 7520) = off_24C336AA0;
  *(_QWORD *)(v86 + 7568) = off_24C335D90;
  v259 = (std::string *)(v86 + 7576);
  if (*(char *)(a63 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v259, *(const std::string::value_type **)(a63 + 8), *(_QWORD *)(a63 + 16));
  }
  else
  {
    v260 = *(_OWORD *)(a63 + 8);
    *(_QWORD *)(v86 + 7592) = *(_QWORD *)(a63 + 24);
    *(_OWORD *)&v259->__r_.__value_.__l.__data_ = v260;
  }
  *(_DWORD *)(v86 + 7600) = *(_DWORD *)(a63 + 32);
  *(_QWORD *)(v86 + 7568) = off_24C335AF8;
  *(_QWORD *)(v86 + 7604) = *(_QWORD *)(a63 + 36);
  *(_QWORD *)(v86 + 7568) = off_24C336AA0;
  *(_QWORD *)(v86 + 7616) = off_24C335D90;
  if (*(char *)(a64 + 31) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(v86 + 7624), *(const std::string::value_type **)(a64 + 8), *(_QWORD *)(a64 + 16));
  }
  else
  {
    v261 = *(_OWORD *)(a64 + 8);
    *(_QWORD *)(v86 + 7640) = *(_QWORD *)(a64 + 24);
    *(_OWORD *)(v86 + 7624) = v261;
  }
  *(_DWORD *)(v86 + 7648) = *(_DWORD *)(a64 + 32);
  *(_QWORD *)(v86 + 7616) = off_24C335AF8;
  *(_QWORD *)(v86 + 7652) = *(_QWORD *)(a64 + 36);
  *(_QWORD *)(v86 + 7616) = off_24C336AA0;
  *(_QWORD *)(v86 + 7664) = off_24C335D90;
  v262 = (std::string *)(v86 + 7672);
  if (*(char *)(a65 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v262, *(const std::string::value_type **)(a65 + 8), *(_QWORD *)(a65 + 16));
  }
  else
  {
    v263 = *(_OWORD *)(a65 + 8);
    *(_QWORD *)(v86 + 7688) = *(_QWORD *)(a65 + 24);
    *(_OWORD *)&v262->__r_.__value_.__l.__data_ = v263;
  }
  *(_DWORD *)(v86 + 7696) = *(_DWORD *)(a65 + 32);
  *(_QWORD *)(v86 + 7664) = off_24C335AF8;
  *(_QWORD *)(v86 + 7700) = *(_QWORD *)(a65 + 36);
  *(_QWORD *)(v86 + 7664) = off_24C336AA0;
  *(_QWORD *)(v86 + 7712) = off_24C335D90;
  if (*(char *)(a66 + 31) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(v86 + 7720), *(const std::string::value_type **)(a66 + 8), *(_QWORD *)(a66 + 16));
  }
  else
  {
    v264 = *(_OWORD *)(a66 + 8);
    *(_QWORD *)(v86 + 7736) = *(_QWORD *)(a66 + 24);
    *(_OWORD *)(v86 + 7720) = v264;
  }
  *(_DWORD *)(v86 + 7744) = *(_DWORD *)(a66 + 32);
  *(_QWORD *)(v86 + 7712) = &off_24C335AB8;
  *(_BYTE *)(v86 + 7748) = *(_BYTE *)(a66 + 36);
  v265 = (std::string *)(v86 + 7752);
  if (*(char *)(a66 + 63) < 0)
  {
    std::string::__init_copy_ctor_external(v265, *(const std::string::value_type **)(a66 + 40), *(_QWORD *)(a66 + 48));
  }
  else
  {
    v266 = *(_OWORD *)(a66 + 40);
    *(_QWORD *)(v86 + 7768) = *(_QWORD *)(a66 + 56);
    *(_OWORD *)&v265->__r_.__value_.__l.__data_ = v266;
  }
  *(_QWORD *)(v86 + 7712) = &off_24C336A60;
  *(_QWORD *)(v86 + 7776) = off_24C335D90;
  if (*(char *)(a67 + 31) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(v86 + 7784), *(const std::string::value_type **)(a67 + 8), *(_QWORD *)(a67 + 16));
  }
  else
  {
    v267 = *(_OWORD *)(a67 + 8);
    *(_QWORD *)(v86 + 7800) = *(_QWORD *)(a67 + 24);
    *(_OWORD *)(v86 + 7784) = v267;
  }
  *(_DWORD *)(v86 + 7808) = *(_DWORD *)(a67 + 32);
  *(_QWORD *)(v86 + 7776) = &off_24C335AB8;
  *(_BYTE *)(v86 + 7812) = *(_BYTE *)(a67 + 36);
  v268 = (std::string *)(v86 + 7816);
  if (*(char *)(a67 + 63) < 0)
  {
    std::string::__init_copy_ctor_external(v268, *(const std::string::value_type **)(a67 + 40), *(_QWORD *)(a67 + 48));
  }
  else
  {
    v269 = *(_OWORD *)(a67 + 40);
    *(_QWORD *)(v86 + 7832) = *(_QWORD *)(a67 + 56);
    *(_OWORD *)&v268->__r_.__value_.__l.__data_ = v269;
  }
  *(_QWORD *)(v86 + 7776) = &off_24C336A60;
  *(_QWORD *)(v86 + 7840) = off_24C335D90;
  if (*(char *)(a68 + 31) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(v86 + 7848), *(const std::string::value_type **)(a68 + 8), *(_QWORD *)(a68 + 16));
  }
  else
  {
    v270 = *(_OWORD *)(a68 + 8);
    *(_QWORD *)(v86 + 7864) = *(_QWORD *)(a68 + 24);
    *(_OWORD *)(v86 + 7848) = v270;
  }
  *(_DWORD *)(v86 + 7872) = *(_DWORD *)(a68 + 32);
  *(_QWORD *)(v86 + 7840) = &off_24C335AB8;
  *(_BYTE *)(v86 + 7876) = *(_BYTE *)(a68 + 36);
  v271 = (std::string *)(v86 + 7880);
  if (*(char *)(a68 + 63) < 0)
  {
    std::string::__init_copy_ctor_external(v271, *(const std::string::value_type **)(a68 + 40), *(_QWORD *)(a68 + 48));
  }
  else
  {
    v272 = *(_OWORD *)(a68 + 40);
    *(_QWORD *)(v86 + 7896) = *(_QWORD *)(a68 + 56);
    *(_OWORD *)&v271->__r_.__value_.__l.__data_ = v272;
  }
  *(_QWORD *)(v86 + 7840) = &off_24C336A60;
  *(_QWORD *)(v86 + 7904) = off_24C335D90;
  v273 = (__int128 *)(a70 + 8);
  if (*(char *)(a69 + 31) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(v86 + 7912), *(const std::string::value_type **)(a69 + 8), *(_QWORD *)(a69 + 16));
    v273 = (__int128 *)(a70 + 8);
  }
  else
  {
    v274 = *(_OWORD *)(a69 + 8);
    *(_QWORD *)(v86 + 7928) = *(_QWORD *)(a69 + 24);
    *(_OWORD *)(v86 + 7912) = v274;
  }
  *(_DWORD *)(v86 + 7936) = *(_DWORD *)(a69 + 32);
  *(_QWORD *)(v86 + 7904) = off_24C335AF8;
  *(_QWORD *)(v86 + 7940) = *(_QWORD *)(a69 + 36);
  *(_QWORD *)(v86 + 7904) = off_24C336AA0;
  *(_QWORD *)(v86 + 7952) = off_24C335D90;
  v275 = a70;
  if (*(char *)(a70 + 31) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(v86 + 7960), *(const std::string::value_type **)(a70 + 8), *(_QWORD *)(a70 + 16));
    v275 = a70;
  }
  else
  {
    v276 = *v273;
    *(_QWORD *)(v86 + 7976) = *((_QWORD *)v273 + 2);
    *(_OWORD *)(v86 + 7960) = v276;
  }
  *(_DWORD *)(v86 + 7984) = *(_DWORD *)(v275 + 32);
  *(_QWORD *)(v86 + 7952) = off_24C335B18;
  v277 = *v360;
  *(_DWORD *)(v86 + 7996) = *((_DWORD *)v360 + 2);
  *(_QWORD *)(v86 + 7988) = v277;
  *(_QWORD *)(v86 + 7952) = off_24C336AC0;
  *(_QWORD *)(v86 + 8000) = off_24C335D90;
  v278 = (std::string *)(v86 + 8008);
  if (*(char *)(a71 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v278, *(const std::string::value_type **)(a71 + 8), *(_QWORD *)(a71 + 16));
  }
  else
  {
    v279 = *(_OWORD *)(a71 + 8);
    *(_QWORD *)(v86 + 8024) = *(_QWORD *)(a71 + 24);
    *(_OWORD *)&v278->__r_.__value_.__l.__data_ = v279;
  }
  *(_DWORD *)(v86 + 8032) = *(_DWORD *)(a71 + 32);
  *(_QWORD *)(v86 + 8000) = off_24C335AF8;
  *(_QWORD *)(v86 + 8036) = *(_QWORD *)(a71 + 36);
  *(_QWORD *)(v86 + 8000) = off_24C336AA0;
  *(_QWORD *)(v86 + 8048) = off_24C335D90;
  v280 = a72;
  if (*(char *)(a72 + 31) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(v86 + 8056), *(const std::string::value_type **)(a72 + 8), *(_QWORD *)(a72 + 16));
    v280 = a72;
  }
  else
  {
    v281 = *(_OWORD *)(a72 + 8);
    *(_QWORD *)(v86 + 8072) = *(_QWORD *)(a72 + 24);
    *(_OWORD *)(v86 + 8056) = v281;
  }
  *(_DWORD *)(v86 + 8080) = *(_DWORD *)(v280 + 32);
  *(_QWORD *)(v86 + 8048) = &off_24C335AB8;
  *(_BYTE *)(v86 + 8084) = *(_BYTE *)(v280 + 36);
  v282 = (std::string *)(v86 + 8088);
  if (*(char *)(v280 + 63) < 0)
  {
    std::string::__init_copy_ctor_external(v282, *(const std::string::value_type **)(v280 + 40), *(_QWORD *)(v280 + 48));
  }
  else
  {
    v283 = *v342;
    *(_QWORD *)(v86 + 8104) = *((_QWORD *)v342 + 2);
    *(_OWORD *)&v282->__r_.__value_.__l.__data_ = v283;
  }
  *(_QWORD *)(v86 + 8048) = &off_24C336A60;
  *(_QWORD *)(v86 + 8112) = off_24C335D90;
  v284 = v384;
  if (*(char *)(v384 + 31) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(v86 + 8120), *(const std::string::value_type **)(v384 + 8), *(_QWORD *)(v384 + 16));
    v284 = v384;
  }
  else
  {
    v285 = *(_OWORD *)v358;
    *(_QWORD *)(v86 + 8136) = *(_QWORD *)(v358 + 16);
    *(_OWORD *)(v86 + 8120) = v285;
  }
  *(_DWORD *)(v86 + 8144) = *(_DWORD *)(v284 + 32);
  *(_QWORD *)(v86 + 8112) = off_24C335B18;
  v286 = *(_QWORD *)v357;
  *(_DWORD *)(v86 + 8156) = *(_DWORD *)(v357 + 8);
  *(_QWORD *)(v86 + 8148) = v286;
  *(_QWORD *)(v86 + 8112) = off_24C336AC0;
  *(_QWORD *)(v86 + 8160) = off_24C335D90;
  v287 = v376;
  if (*(char *)(v376 + 31) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(v86 + 8168), *(const std::string::value_type **)(v376 + 8), *(_QWORD *)(v376 + 16));
    v287 = v376;
  }
  else
  {
    v288 = *v341;
    *(_QWORD *)(v86 + 8184) = *((_QWORD *)v341 + 2);
    *(_OWORD *)(v86 + 8168) = v288;
  }
  *(_DWORD *)(v86 + 0x2000) = *(_DWORD *)(v287 + 32);
  *(_QWORD *)(v86 + 8160) = &off_24C335AB8;
  *(_BYTE *)(v86 + 8196) = *(_BYTE *)(v287 + 36);
  v289 = (std::string *)(v86 + 8200);
  if (*(char *)(v287 + 63) < 0)
  {
    std::string::__init_copy_ctor_external(v289, *(const std::string::value_type **)(v287 + 40), *(_QWORD *)(v287 + 48));
  }
  else
  {
    v290 = *v339;
    *(_QWORD *)(v86 + 8216) = *((_QWORD *)v339 + 2);
    *(_OWORD *)&v289->__r_.__value_.__l.__data_ = v290;
  }
  *(_QWORD *)(v86 + 8160) = &off_24C336A60;
  *(_QWORD *)(v86 + 8224) = off_24C335D90;
  if (*(char *)(v356 + 31) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(v86 + 8232), *(const std::string::value_type **)(v356 + 8), *(_QWORD *)(v356 + 16));
  }
  else
  {
    v291 = *(_OWORD *)v340;
    *(_QWORD *)(v86 + 8248) = *(_QWORD *)(v340 + 16);
    *(_OWORD *)(v86 + 8232) = v291;
  }
  *(_DWORD *)(v86 + 8256) = *(_DWORD *)(v356 + 32);
  *(_QWORD *)(v86 + 8224) = &off_24C335AB8;
  *(_BYTE *)(v86 + 8260) = *(_BYTE *)(v356 + 36);
  v292 = (std::string *)(v86 + 8264);
  if (*(char *)(v356 + 63) < 0)
  {
    std::string::__init_copy_ctor_external(v292, *(const std::string::value_type **)(v356 + 40), *(_QWORD *)(v356 + 48));
  }
  else
  {
    v293 = *v337;
    *(_QWORD *)(v86 + 8280) = *((_QWORD *)v337 + 2);
    *(_OWORD *)&v292->__r_.__value_.__l.__data_ = v293;
  }
  *(_QWORD *)(v86 + 8224) = &off_24C336A60;
  *(_QWORD *)(v86 + 8288) = off_24C335D90;
  if (*(char *)(v359 + 31) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(v86 + 8296), *(const std::string::value_type **)(v359 + 8), *(_QWORD *)(v359 + 16));
  }
  else
  {
    v294 = *(_OWORD *)v338;
    *(_QWORD *)(v86 + 8312) = *(_QWORD *)(v338 + 16);
    *(_OWORD *)(v86 + 8296) = v294;
  }
  *(_DWORD *)(v86 + 8320) = *(_DWORD *)(v359 + 32);
  *(_QWORD *)(v86 + 8288) = off_24C335AF8;
  *(_QWORD *)(v86 + 8324) = *(_QWORD *)(v359 + 36);
  *(_QWORD *)(v86 + 8288) = off_24C336AA0;
  *(_QWORD *)(v86 + 8336) = off_24C335D90;
  v295 = (std::string *)(v86 + 8344);
  v296 = v383;
  if (*(char *)(v383 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v295, *(const std::string::value_type **)(v383 + 8), *(_QWORD *)(v383 + 16));
    v296 = v383;
  }
  else
  {
    v297 = *(_OWORD *)v355;
    *(_QWORD *)(v86 + 8360) = *(_QWORD *)(v355 + 16);
    *(_OWORD *)&v295->__r_.__value_.__l.__data_ = v297;
  }
  *(_DWORD *)(v86 + 8368) = *(_DWORD *)(v296 + 32);
  *(_QWORD *)(v86 + 8336) = off_24C335B18;
  v298 = *(_QWORD *)v354;
  *(_DWORD *)(v86 + 8380) = *(_DWORD *)(v354 + 8);
  *(_QWORD *)(v86 + 8372) = v298;
  *(_QWORD *)(v86 + 8336) = off_24C336AC0;
  *(_QWORD *)(v86 + 8384) = off_24C335D90;
  v299 = (std::string *)(v86 + 8392);
  if (*(char *)(v351 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v299, *(const std::string::value_type **)(v351 + 8), *(_QWORD *)(v351 + 16));
  }
  else
  {
    v300 = *(_OWORD *)v336;
    *(_QWORD *)(v86 + 8408) = *(_QWORD *)(v336 + 16);
    *(_OWORD *)&v299->__r_.__value_.__l.__data_ = v300;
  }
  *(_DWORD *)(v86 + 8416) = *(_DWORD *)(v351 + 32);
  *(_QWORD *)(v86 + 8384) = off_24C335AF8;
  *(_QWORD *)(v86 + 8420) = *(_QWORD *)(v351 + 36);
  *(_QWORD *)(v86 + 8384) = off_24C336AA0;
  *(_QWORD *)(v86 + 8432) = off_24C335D90;
  v301 = v382;
  if (*(char *)(v382 + 31) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(v86 + 8440), *(const std::string::value_type **)(v382 + 8), *(_QWORD *)(v382 + 16));
    v301 = v382;
  }
  else
  {
    v302 = *(_OWORD *)v159;
    *(_QWORD *)(v86 + 8456) = *(_QWORD *)(v159 + 16);
    *(_OWORD *)(v86 + 8440) = v302;
  }
  *(_DWORD *)(v86 + 8464) = *(_DWORD *)(v301 + 32);
  *(_QWORD *)(v86 + 8432) = &off_24C335AB8;
  *(_BYTE *)(v86 + 8468) = *(_BYTE *)(v301 + 36);
  v303 = (std::string *)(v86 + 8472);
  if (*(char *)(v301 + 63) < 0)
  {
    std::string::__init_copy_ctor_external(v303, *(const std::string::value_type **)(v301 + 40), *(_QWORD *)(v301 + 48));
  }
  else
  {
    v304 = *v334;
    *(_QWORD *)(v86 + 8488) = *((_QWORD *)v334 + 2);
    *(_OWORD *)&v303->__r_.__value_.__l.__data_ = v304;
  }
  *(_QWORD *)(v86 + 8432) = &off_24C336A60;
  *(_QWORD *)(v86 + 8496) = off_24C335D90;
  v305 = (std::string *)(v86 + 8504);
  if (*(char *)(v350 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v305, *(const std::string::value_type **)(v350 + 8), *(_QWORD *)(v350 + 16));
  }
  else
  {
    v306 = *(_OWORD *)v335;
    *(_QWORD *)(v86 + 8520) = *(_QWORD *)(v335 + 16);
    *(_OWORD *)&v305->__r_.__value_.__l.__data_ = v306;
  }
  *(_DWORD *)(v86 + 8528) = *(_DWORD *)(v350 + 32);
  *(_QWORD *)(v86 + 8496) = off_24C335AF8;
  *(_QWORD *)(v86 + 8532) = *(_QWORD *)(v350 + 36);
  *(_QWORD *)(v86 + 8496) = off_24C336AA0;
  *(_QWORD *)(v86 + 8544) = off_24C335D90;
  v307 = (std::string *)(v86 + 8552);
  v308 = v381;
  if (*(char *)(v381 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v307, *(const std::string::value_type **)(v381 + 8), *(_QWORD *)(v381 + 16));
    v308 = v381;
  }
  else
  {
    v309 = *(_OWORD *)v352;
    *(_QWORD *)(v86 + 8568) = *(_QWORD *)(v352 + 16);
    *(_OWORD *)&v307->__r_.__value_.__l.__data_ = v309;
  }
  *(_DWORD *)(v86 + 8576) = *(_DWORD *)(v308 + 32);
  *(_QWORD *)(v86 + 8544) = off_24C335B18;
  v310 = *(_QWORD *)v349;
  *(_DWORD *)(v86 + 8588) = *(_DWORD *)(v349 + 8);
  *(_QWORD *)(v86 + 8580) = v310;
  *(_QWORD *)(v86 + 8544) = off_24C336AC0;
  *(_QWORD *)(v86 + 8592) = off_24C335D90;
  v311 = (std::string *)(v86 + 8600);
  if (*(char *)(v348 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v311, *(const std::string::value_type **)(v348 + 8), *(_QWORD *)(v348 + 16));
  }
  else
  {
    v312 = *(_OWORD *)v333;
    *(_QWORD *)(v86 + 8616) = *(_QWORD *)(v333 + 16);
    *(_OWORD *)&v311->__r_.__value_.__l.__data_ = v312;
  }
  *(_DWORD *)(v86 + 8624) = *(_DWORD *)(v348 + 32);
  *(_QWORD *)(v86 + 8592) = off_24C335AF8;
  *(_QWORD *)(v86 + 8628) = *(_QWORD *)(v348 + 36);
  *(_QWORD *)(v86 + 8592) = off_24C336AA0;
  *(_QWORD *)(v86 + 8640) = off_24C335D90;
  if (*(char *)(v347 + 31) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(v86 + 8648), *(const std::string::value_type **)(v347 + 8), *(_QWORD *)(v347 + 16));
  }
  else
  {
    v313 = *(_OWORD *)v353;
    *(_QWORD *)(v86 + 8664) = *(_QWORD *)(v353 + 16);
    *(_OWORD *)(v86 + 8648) = v313;
  }
  *(_DWORD *)(v86 + 8672) = *(_DWORD *)(v347 + 32);
  *(_QWORD *)(v86 + 8640) = off_24C335AF8;
  *(_QWORD *)(v86 + 8676) = *(_QWORD *)(v347 + 36);
  *(_QWORD *)(v86 + 8640) = off_24C336AA0;
  *(_QWORD *)(v86 + 8688) = off_24C335D90;
  v314 = v378;
  if (*(char *)(v168 + 31) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(v86 + 8696), *(const std::string::value_type **)(v168 + 8), *(_QWORD *)(v168 + 16));
    v314 = v378;
  }
  else
  {
    v315 = *(_OWORD *)(v168 + 8);
    *(_QWORD *)(v86 + 8712) = *(_QWORD *)(v168 + 24);
    *(_OWORD *)(v86 + 8696) = v315;
  }
  *(_DWORD *)(v86 + 8720) = *(_DWORD *)(v168 + 32);
  *(_QWORD *)(v86 + 8688) = off_24C335AF8;
  *(_QWORD *)(v86 + 8724) = *(_QWORD *)(v168 + 36);
  *(_QWORD *)(v86 + 8688) = off_24C336AA0;
  *(_QWORD *)(v86 + 8736) = off_24C335D90;
  if (*(char *)(v361 + 31) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(v86 + 8744), *(const std::string::value_type **)(v361 + 8), *(_QWORD *)(v361 + 16));
    v314 = v378;
  }
  else
  {
    v316 = *(_OWORD *)v332;
    *(_QWORD *)(v86 + 8760) = *(_QWORD *)(v332 + 16);
    *(_OWORD *)(v86 + 8744) = v316;
  }
  *(_DWORD *)(v86 + 8768) = *(_DWORD *)(v361 + 32);
  *(_QWORD *)(v86 + 8736) = &off_24C335AB8;
  *(_BYTE *)(v86 + 8772) = *(_BYTE *)(v361 + 36);
  v317 = (std::string *)(v86 + 8776);
  if (*(char *)(v361 + 63) < 0)
  {
    std::string::__init_copy_ctor_external(v317, *(const std::string::value_type **)(v361 + 40), *(_QWORD *)(v361 + 48));
  }
  else
  {
    v318 = *(_OWORD *)v314;
    *(_QWORD *)(v86 + 8792) = *(_QWORD *)(v314 + 16);
    *(_OWORD *)&v317->__r_.__value_.__l.__data_ = v318;
  }
  *(_QWORD *)(v86 + 8736) = &off_24C336A60;
  *(_QWORD *)(v86 + 8800) = off_24C335D90;
  if (*(char *)(v346 + 31) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(v86 + 8808), *(const std::string::value_type **)(v346 + 8), *(_QWORD *)(v346 + 16));
  }
  else
  {
    v319 = *v345;
    *(_QWORD *)(v86 + 8824) = *((_QWORD *)v345 + 2);
    *(_OWORD *)(v86 + 8808) = v319;
  }
  *(_DWORD *)(v86 + 8832) = *(_DWORD *)(v346 + 32);
  *(_QWORD *)(v86 + 8800) = &off_24C335AB8;
  *(_BYTE *)(v86 + 8836) = *(_BYTE *)(v346 + 36);
  v320 = (std::string *)(v86 + 8840);
  if (*(char *)(v346 + 63) < 0)
  {
    std::string::__init_copy_ctor_external(v320, *(const std::string::value_type **)(v346 + 40), *(_QWORD *)(v346 + 48));
  }
  else
  {
    v321 = *v331;
    *(_QWORD *)(v86 + 8856) = *((_QWORD *)v331 + 2);
    *(_OWORD *)&v320->__r_.__value_.__l.__data_ = v321;
  }
  *(_QWORD *)(v86 + 8800) = &off_24C336A60;
  *(_QWORD *)(v86 + 8864) = off_24C335D90;
  if (*(char *)(v173 + 31) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(v86 + 8872), *(const std::string::value_type **)(v173 + 8), *(_QWORD *)(v173 + 16));
  }
  else
  {
    v322 = *(_OWORD *)(v173 + 8);
    *(_QWORD *)(v86 + 8888) = *(_QWORD *)(v173 + 24);
    *(_OWORD *)(v86 + 8872) = v322;
  }
  *(_DWORD *)(v86 + 8896) = *(_DWORD *)(v173 + 32);
  *(_QWORD *)(v86 + 8864) = off_24C335B18;
  v323 = *(_QWORD *)(v173 + 36);
  *(_DWORD *)(v86 + 8908) = *(_DWORD *)(v173 + 44);
  *(_QWORD *)(v86 + 8900) = v323;
  *(_QWORD *)(v86 + 8864) = off_24C336AC0;
  *(_QWORD *)(v86 + 8912) = off_24C335D90;
  v324 = v380;
  if (*(char *)(v380 + 31) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(v86 + 8920), *(const std::string::value_type **)(v380 + 8), *(_QWORD *)(v380 + 16));
    v324 = v380;
  }
  else
  {
    v325 = *(_OWORD *)v330;
    *(_QWORD *)(v86 + 8936) = *(_QWORD *)(v330 + 16);
    *(_OWORD *)(v86 + 8920) = v325;
  }
  *(_DWORD *)(v86 + 8944) = *(_DWORD *)(v324 + 32);
  *(_QWORD *)(v86 + 8912) = off_24C335AF8;
  *(_QWORD *)(v86 + 8948) = *(_QWORD *)(v324 + 36);
  *(_QWORD *)(v86 + 8912) = off_24C336AA0;
  *(_QWORD *)(v86 + 8960) = off_24C335D90;
  v326 = (std::string *)(v86 + 8968);
  v327 = v379;
  if (*(char *)(v379 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v326, *(const std::string::value_type **)(v379 + 8), *(_QWORD *)(v379 + 16));
    v327 = v379;
  }
  else
  {
    v328 = *(_OWORD *)v178;
    *(_QWORD *)(v86 + 8984) = *(_QWORD *)(v178 + 16);
    *(_OWORD *)&v326->__r_.__value_.__l.__data_ = v328;
  }
  *(_DWORD *)(v86 + 8992) = *(_DWORD *)(v327 + 32);
  *(_QWORD *)(v86 + 8960) = off_24C335AF8;
  *(_QWORD *)(v86 + 8996) = *(_QWORD *)(v327 + 36);
  *(_QWORD *)(v86 + 8960) = off_24C336AA0;
  return v86;
}

void sub_20A7AE020(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;
  char *v3;
  void **v4;
  void **v5;
  void **v6;
  uint64_t v7;
  char *v8;

  *(_QWORD *)(v1 + 8912) = v7;
  if (v3[272] < 0)
    operator delete(*v2);
  *(_QWORD *)(v1 + 8864) = v7;
  if (v3[224] < 0)
    operator delete(*v5);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(v1 + 8800);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(v1 + 8736);
  *(_QWORD *)(v1 + 8688) = v7;
  if (v3[48] < 0)
    operator delete(*v4);
  *(_QWORD *)(v1 + 8640) = v7;
  if (*v3 < 0)
    operator delete(*v6);
  *(_QWORD *)(v1 + 8592) = v7;
  if (v8[4048] < 0)
    operator delete(*(void **)STACK[0x760]);
  *(_QWORD *)(v1 + 8544) = v7;
  if (v8[4000] < 0)
    operator delete(*(void **)STACK[0x658]);
  *(_QWORD *)(v1 + 8496) = v7;
  if (v8[3952] < 0)
    operator delete(*(void **)STACK[0x768]);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(v1 + 8432);
  *(_QWORD *)(v1 + 8384) = v7;
  if (v8[3840] < 0)
    operator delete(*(void **)STACK[0x770]);
  *(_QWORD *)(v1 + 8336) = v7;
  if (v8[3792] < 0)
    operator delete(*(void **)STACK[0x738]);
  *(_QWORD *)(v1 + 8288) = v7;
  if (v8[3744] < 0)
    operator delete(*(void **)STACK[0x778]);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(v1 + 8224);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(v1 + 8160);
  *(_QWORD *)(v1 + 8112) = v7;
  if (v8[3568] < 0)
    operator delete(*(void **)STACK[0x780]);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(v1 + 8048);
  *(_QWORD *)(v1 + 8000) = v7;
  if (v8[3456] < 0)
    operator delete(*(void **)STACK[0x788]);
  *(_QWORD *)(v1 + 7952) = v7;
  if (v8[3408] < 0)
    operator delete(*(void **)STACK[0x660]);
  *(_QWORD *)(v1 + 7904) = v7;
  if (v8[3360] < 0)
    operator delete(*(void **)STACK[0x668]);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(v1 + 7840);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(v1 + 7776);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(v1 + 7712);
  *(_QWORD *)(v1 + 7664) = v7;
  if (v8[3120] < 0)
    operator delete(*(void **)STACK[0x670]);
  *(_QWORD *)(v1 + 7616) = v7;
  if (v8[3072] < 0)
    operator delete(*(void **)STACK[0x678]);
  *(_QWORD *)(v1 + 7568) = v7;
  if (v8[3024] < 0)
    operator delete(*(void **)STACK[0x680]);
  *(_QWORD *)(v1 + 7520) = v7;
  if (v8[2976] < 0)
    operator delete(*(void **)STACK[0x688]);
  *(_QWORD *)(v1 + 7472) = v7;
  if (v8[2928] < 0)
    operator delete(*(void **)STACK[0x690]);
  *(_QWORD *)(v1 + 7424) = v7;
  if (v8[2880] < 0)
    operator delete(*(void **)STACK[0x698]);
  *(_QWORD *)(v1 + 7376) = v7;
  if (v8[2832] < 0)
    operator delete(*(void **)STACK[0x790]);
  *(_QWORD *)(v1 + 7328) = v7;
  if (v8[2784] < 0)
    operator delete(*(void **)(v1 + 7336));
  *(_QWORD *)(v1 + 7280) = v7;
  if (v8[2736] < 0)
    operator delete(*(void **)(v1 + 7288));
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(v1 + 7216);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(STACK[0x798]);
  *(_QWORD *)(v1 + 7104) = v7;
  if (v8[2560] < 0)
    operator delete(*(void **)(v1 + 7112));
  *(_QWORD *)(v1 + 7056) = v7;
  if (v8[2512] < 0)
    operator delete(*(void **)STACK[0x6A0]);
  *(_QWORD *)(v1 + 7008) = v7;
  if (v8[2464] < 0)
    operator delete(*(void **)(v1 + 7016));
  *(_QWORD *)(v1 + 6960) = v7;
  if (v8[2416] < 0)
    operator delete(*(void **)(v1 + 6968));
  *(_QWORD *)(v1 + 6912) = v7;
  if (v8[2368] < 0)
    operator delete(*(void **)STACK[0x6A8]);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(v1 + 6848);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(v1 + 6784);
  *(_QWORD *)(v1 + 6736) = v7;
  if (v8[2192] < 0)
    operator delete(*(void **)STACK[0x6B0]);
  *(_QWORD *)(v1 + 6688) = v7;
  if (v8[2144] < 0)
    operator delete(*(void **)STACK[0x7A0]);
  *(_QWORD *)(v1 + 6640) = v7;
  if (v8[2096] < 0)
    operator delete(*(void **)STACK[0x7A8]);
  *(_QWORD *)(v1 + 6592) = v7;
  if (v8[2048] < 0)
    operator delete(*(void **)(v1 + 6600));
  *(_QWORD *)(v1 + 6544) = v7;
  if (v8[2000] < 0)
    operator delete(*(void **)STACK[0x740]);
  *(_QWORD *)(v1 + 6496) = v7;
  if (v8[1952] < 0)
    operator delete(*(void **)STACK[0x6B8]);
  *(_QWORD *)(v1 + 6448) = v7;
  if (v8[1904] < 0)
    operator delete(*(void **)STACK[0x7B0]);
  *(_QWORD *)(v1 + 6400) = v7;
  if (v8[1856] < 0)
    operator delete(*(void **)STACK[0x6C0]);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(STACK[0x7D8]);
  *(_QWORD *)(v1 + 6288) = v7;
  if (v8[1744] < 0)
    operator delete(*(void **)STACK[0x6C8]);
  *(_QWORD *)(v1 + 6240) = v7;
  if (v8[1696] < 0)
    operator delete(*(void **)STACK[0x6D0]);
  *(_QWORD *)(v1 + 6192) = v7;
  if (v8[1648] < 0)
    operator delete(*(void **)STACK[0x7B8]);
  *(_QWORD *)(v1 + 6144) = v7;
  if (v8[1600] < 0)
    operator delete(*(void **)STACK[0x6D8]);
  *(_QWORD *)(v1 + 6096) = v7;
  if (v8[1552] < 0)
    operator delete(*(void **)STACK[0x6E0]);
  *(_QWORD *)(v1 + 6048) = v7;
  if (v8[1504] < 0)
    operator delete(*(void **)STACK[0x6E8]);
  mediaplatform::DatabaseColumn<mediaplatform::Data>::~DatabaseColumn(v1 + 5968);
  *(_QWORD *)(v1 + 5920) = v7;
  if (v8[1376] < 0)
    operator delete(*(void **)STACK[0x7C0]);
  *(_QWORD *)(v1 + 5872) = v7;
  if (v8[1328] < 0)
    operator delete(*(void **)STACK[0x7C8]);
  *(_QWORD *)(v1 + 5824) = v7;
  if (v8[1280] < 0)
    operator delete(*(void **)STACK[0x6F0]);
  *(_QWORD *)(v1 + 5776) = v7;
  if (v8[1232] < 0)
    operator delete(*(void **)STACK[0x7D0]);
  *(_QWORD *)(v1 + 5728) = v7;
  if (v8[1184] < 0)
    operator delete(*(void **)STACK[0x6F8]);
  *(_QWORD *)(v1 + 5680) = v7;
  if (v8[1136] < 0)
    operator delete(*(void **)STACK[0x700]);
  *(_QWORD *)(v1 + 5632) = v7;
  if (v8[1088] < 0)
    operator delete(*(void **)(v1 + 5640));
  *(_QWORD *)(v1 + 5584) = v7;
  if (v8[1040] < 0)
    operator delete(*(void **)STACK[0x708]);
  *(_QWORD *)(v1 + 5536) = v7;
  if (v8[992] < 0)
    operator delete(*(void **)STACK[0x710]);
  *(_QWORD *)(v1 + 5488) = v7;
  if (v8[944] < 0)
    operator delete(*(void **)STACK[0x718]);
  *(_QWORD *)(v1 + 5440) = v7;
  if (v8[896] < 0)
    operator delete(*(void **)(v1 + 5448));
  *(_QWORD *)(v1 + 5392) = v7;
  if (v8[848] < 0)
    operator delete(*(void **)STACK[0x728]);
  *(_QWORD *)(v1 + 5344) = v7;
  if (v8[800] < 0)
    operator delete(*(void **)(v1 + 5352));
  *(_QWORD *)(v1 + 5296) = v7;
  if (v8[752] < 0)
    operator delete(*(void **)(v1 + 5304));
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(v1 + 5232);
  *(_QWORD *)(v1 + 5184) = v7;
  if (v8[640] < 0)
    operator delete(*(void **)(v1 + 5192));
  *(_QWORD *)(v1 + 5136) = v7;
  if (v8[592] < 0)
    operator delete(*(void **)(v1 + 5144));
  *(_QWORD *)(v1 + 5088) = v7;
  if (v8[544] < 0)
    operator delete(*(void **)(v1 + 5096));
  *(_QWORD *)(v1 + 5040) = v7;
  if (v8[496] < 0)
    operator delete(*(void **)STACK[0x720]);
  *(_QWORD *)(v1 + 4992) = v7;
  if (v8[448] < 0)
    operator delete(*(void **)(v1 + 5000));
  *(_QWORD *)(v1 + 4944) = v7;
  if (v8[400] < 0)
    operator delete(*(void **)(v1 + 4952));
  *(_QWORD *)(v1 + 4896) = v7;
  if (v8[352] < 0)
    operator delete(*(void **)(v1 + 4904));
  *(_QWORD *)(v1 + 4848) = v7;
  if (v8[304] < 0)
    operator delete(*(void **)(v1 + 4856));
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(STACK[0x730]);
  *(_QWORD *)(v1 + 4736) = v7;
  if (v8[192] < 0)
    operator delete(*(void **)(v1 + 4744));
  *(_QWORD *)(v1 + 4688) = v7;
  if (v8[144] < 0)
    operator delete(*(void **)(v1 + 4696));
  *(_QWORD *)(v1 + 4640) = v7;
  if (v8[96] < 0)
    operator delete(*(void **)(v1 + 4648));
  *(_QWORD *)(v1 + 4592) = v7;
  if (v8[48] < 0)
    operator delete(*(void **)(v1 + 4600));
  *(_QWORD *)(v1 + 4544) = v7;
  if (*v8 < 0)
    operator delete(*(void **)(v1 + 4552));
  mediaplatform::DatabaseTable<long long,int,long long,long long,long long,std::string,long long,int,int,long long,int,int,int,int,std::string,int,int,int,int,int,int,int,int,int,int,int,int,long long,int,mediaplatform::Data,int,int,int,int,int,int,std::string,int,int,int,int,int,long long,long long,int,std::string,std::string,int,int,int,int,long long,std::string,std::string,long long,long long,int,int,int,int,int,int,int,std::string,std::string,std::string,int,long long,int,std::string,long long,std::string,std::string,int,long long,int,std::string,int,long long,int,int,int,std::string,std::string,long long,int,int>::~DatabaseTable(v1);
  _Unwind_Resume(a1);
}

void mlcore::ContainerTable::~ContainerTable(mlcore::ContainerTable *this)
{
  *(_QWORD *)this = &off_24C336440;
  std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul,3ul,4ul,5ul,6ul,7ul,8ul,9ul,10ul,11ul,12ul,13ul,14ul,15ul,16ul,17ul,18ul,19ul,20ul,21ul,22ul,23ul,24ul,25ul,26ul,27ul,28ul,29ul,30ul,31ul,32ul,33ul,34ul,35ul,36ul,37ul,38ul,39ul,40ul,41ul,42ul,43ul,44ul,45ul,46ul,47ul,48ul,49ul,50ul,51ul,52ul,53ul,54ul,55ul,56ul,57ul,58ul,59ul,60ul,61ul,62ul,63ul,64ul,65ul,66ul,67ul,68ul,69ul,70ul,71ul,72ul,73ul,74ul,75ul,76ul,77ul,78ul,79ul,80ul,81ul,82ul,83ul,84ul,85ul,86ul>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<int>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<int>,mlcore::MediaColumn<mediaplatform::Data>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<int>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<int>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<int>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<int>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<int>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<int>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>>::~__tuple_impl((uint64_t)this + 4544);
  mediaplatform::DatabaseTable<long long,int,long long,long long,long long,std::string,long long,int,int,long long,int,int,int,int,std::string,int,int,int,int,int,int,int,int,int,int,int,int,long long,int,mediaplatform::Data,int,int,int,int,int,int,std::string,int,int,int,int,int,long long,long long,int,std::string,std::string,int,int,int,int,long long,std::string,std::string,long long,long long,int,int,int,int,int,int,int,std::string,std::string,std::string,int,long long,int,std::string,long long,std::string,std::string,int,long long,int,std::string,int,long long,int,int,int,std::string,std::string,long long,int,int>::~DatabaseTable((uint64_t)this);
}

{
  *(_QWORD *)this = &off_24C336440;
  std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul,3ul,4ul,5ul,6ul,7ul,8ul,9ul,10ul,11ul,12ul,13ul,14ul,15ul,16ul,17ul,18ul,19ul,20ul,21ul,22ul,23ul,24ul,25ul,26ul,27ul,28ul,29ul,30ul,31ul,32ul,33ul,34ul,35ul,36ul,37ul,38ul,39ul,40ul,41ul,42ul,43ul,44ul,45ul,46ul,47ul,48ul,49ul,50ul,51ul,52ul,53ul,54ul,55ul,56ul,57ul,58ul,59ul,60ul,61ul,62ul,63ul,64ul,65ul,66ul,67ul,68ul,69ul,70ul,71ul,72ul,73ul,74ul,75ul,76ul,77ul,78ul,79ul,80ul,81ul,82ul,83ul,84ul,85ul,86ul>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<int>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<int>,mlcore::MediaColumn<mediaplatform::Data>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<int>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<int>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<int>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<int>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<int>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<int>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>>::~__tuple_impl((uint64_t)this + 4544);
  mediaplatform::DatabaseTable<long long,int,long long,long long,long long,std::string,long long,int,int,long long,int,int,int,int,std::string,int,int,int,int,int,int,int,int,int,int,int,int,long long,int,mediaplatform::Data,int,int,int,int,int,int,std::string,int,int,int,int,int,long long,long long,int,std::string,std::string,int,int,int,int,long long,std::string,std::string,long long,long long,int,int,int,int,int,int,int,std::string,std::string,std::string,int,long long,int,std::string,long long,std::string,std::string,int,long long,int,std::string,int,long long,int,int,int,std::string,std::string,long long,int,int>::~DatabaseTable((uint64_t)this);
  JUMPOUT(0x20BD27AFCLL);
}

uint64_t mediaplatform::DatabaseTable<long long,int,long long,long long,long long,std::string,long long,int,int,long long,int,int,int,int,std::string,int,int,int,int,int,int,int,int,int,int,int,int,long long,int,mediaplatform::Data,int,int,int,int,int,int,std::string,int,int,int,int,int,long long,long long,int,std::string,std::string,int,int,int,int,long long,std::string,std::string,long long,long long,int,int,int,int,int,int,int,std::string,std::string,std::string,int,long long,int,std::string,long long,std::string,std::string,int,long long,int,std::string,int,long long,int,int,int,std::string,std::string,long long,int,int>::columnCount()
{
  return 87;
}

void mediaplatform::DatabaseTable<long long,int,long long,long long,long long,std::string,long long,int,int,long long,int,int,int,int,std::string,int,int,int,int,int,int,int,int,int,int,int,int,long long,int,mediaplatform::Data,int,int,int,int,int,int,std::string,int,int,int,int,int,long long,long long,int,std::string,std::string,int,int,int,int,long long,std::string,std::string,long long,long long,int,int,int,int,int,int,int,std::string,std::string,std::string,int,long long,int,std::string,long long,std::string,std::string,int,long long,int,std::string,int,long long,int,int,int,std::string,std::string,long long,int,int>::targetColumnExpression(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  __int128 *v3;
  __int128 *v4[3];
  __int128 **v5;

  v3 = (__int128 *)(a1 + 8);
  (*(void (**)(__int128 **__return_ptr))(*(_QWORD *)a1 + 24))(v4);
  std::allocate_shared[abi:ne180100]<mediaplatform::SQLColumnNameExpression,std::allocator<mediaplatform::SQLColumnNameExpression>,std::string &,std::string const&,void>(a2, v4[0], v3);
  v5 = v4;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v5);
}

void sub_20A7AF774(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul,3ul,4ul,5ul,6ul,7ul,8ul,9ul,10ul,11ul,12ul,13ul,14ul,15ul,16ul,17ul,18ul,19ul,20ul,21ul,22ul,23ul,24ul,25ul,26ul,27ul,28ul,29ul,30ul,31ul,32ul,33ul,34ul,35ul,36ul,37ul,38ul,39ul,40ul,41ul,42ul,43ul,44ul,45ul,46ul,47ul,48ul,49ul,50ul,51ul,52ul,53ul,54ul,55ul,56ul,57ul,58ul,59ul,60ul,61ul,62ul,63ul,64ul,65ul,66ul,67ul,68ul,69ul,70ul,71ul,72ul,73ul,74ul,75ul,76ul,77ul,78ul,79ul,80ul,81ul,82ul,83ul,84ul,85ul,86ul>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<int>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<int>,mlcore::MediaColumn<mediaplatform::Data>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<int>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<int>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<int>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<int>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<int>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<int>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>>::~__tuple_impl(uint64_t a1)
{
  char *v2;

  v2 = (char *)(a1 + 4127);
  *(_QWORD *)(a1 + 4416) = off_24C335D90;
  if (*(char *)(a1 + 4447) < 0)
    operator delete(*(void **)(a1 + 4424));
  *(_QWORD *)(a1 + 4368) = off_24C335D90;
  if (v2[272] < 0)
    operator delete(*(void **)(a1 + 4376));
  *(_QWORD *)(a1 + 4320) = off_24C335D90;
  if (v2[224] < 0)
    operator delete(*(void **)(a1 + 4328));
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 4256);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 4192);
  *(_QWORD *)(a1 + 4144) = off_24C335D90;
  if (v2[48] < 0)
    operator delete(*(void **)(a1 + 4152));
  *(_QWORD *)(a1 + 4096) = off_24C335D90;
  if (*v2 < 0)
    operator delete(*(void **)(a1 + 4104));
  *(_QWORD *)(a1 + 4048) = off_24C335D90;
  if (*(char *)(a1 + 4079) < 0)
    operator delete(*(void **)(a1 + 4056));
  *(_QWORD *)(a1 + 4000) = off_24C335D90;
  if (*(char *)(a1 + 4031) < 0)
    operator delete(*(void **)(a1 + 4008));
  *(_QWORD *)(a1 + 3952) = off_24C335D90;
  if (*(char *)(a1 + 3983) < 0)
    operator delete(*(void **)(a1 + 3960));
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 3888);
  *(_QWORD *)(a1 + 3840) = off_24C335D90;
  if (*(char *)(a1 + 3871) < 0)
    operator delete(*(void **)(a1 + 3848));
  *(_QWORD *)(a1 + 3792) = off_24C335D90;
  if (*(char *)(a1 + 3823) < 0)
    operator delete(*(void **)(a1 + 3800));
  *(_QWORD *)(a1 + 3744) = off_24C335D90;
  if (*(char *)(a1 + 3775) < 0)
    operator delete(*(void **)(a1 + 3752));
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 3680);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 3616);
  *(_QWORD *)(a1 + 3568) = off_24C335D90;
  if (*(char *)(a1 + 3599) < 0)
    operator delete(*(void **)(a1 + 3576));
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 3504);
  *(_QWORD *)(a1 + 3456) = off_24C335D90;
  if (*(char *)(a1 + 3487) < 0)
    operator delete(*(void **)(a1 + 3464));
  *(_QWORD *)(a1 + 3408) = off_24C335D90;
  if (*(char *)(a1 + 3439) < 0)
    operator delete(*(void **)(a1 + 3416));
  *(_QWORD *)(a1 + 3360) = off_24C335D90;
  if (*(char *)(a1 + 3391) < 0)
    operator delete(*(void **)(a1 + 3368));
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 3296);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 3232);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 3168);
  *(_QWORD *)(a1 + 3120) = off_24C335D90;
  if (*(char *)(a1 + 3151) < 0)
    operator delete(*(void **)(a1 + 3128));
  *(_QWORD *)(a1 + 3072) = off_24C335D90;
  if (*(char *)(a1 + 3103) < 0)
    operator delete(*(void **)(a1 + 3080));
  *(_QWORD *)(a1 + 3024) = off_24C335D90;
  if (*(char *)(a1 + 3055) < 0)
    operator delete(*(void **)(a1 + 3032));
  *(_QWORD *)(a1 + 2976) = off_24C335D90;
  if (*(char *)(a1 + 3007) < 0)
    operator delete(*(void **)(a1 + 2984));
  *(_QWORD *)(a1 + 2928) = off_24C335D90;
  if (*(char *)(a1 + 2959) < 0)
    operator delete(*(void **)(a1 + 2936));
  *(_QWORD *)(a1 + 2880) = off_24C335D90;
  if (*(char *)(a1 + 2911) < 0)
    operator delete(*(void **)(a1 + 2888));
  *(_QWORD *)(a1 + 2832) = off_24C335D90;
  if (*(char *)(a1 + 2863) < 0)
    operator delete(*(void **)(a1 + 2840));
  *(_QWORD *)(a1 + 2784) = off_24C335D90;
  if (*(char *)(a1 + 2815) < 0)
    operator delete(*(void **)(a1 + 2792));
  *(_QWORD *)(a1 + 2736) = off_24C335D90;
  if (*(char *)(a1 + 2767) < 0)
    operator delete(*(void **)(a1 + 2744));
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 2672);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 2608);
  *(_QWORD *)(a1 + 2560) = off_24C335D90;
  if (*(char *)(a1 + 2591) < 0)
    operator delete(*(void **)(a1 + 2568));
  *(_QWORD *)(a1 + 2512) = off_24C335D90;
  if (*(char *)(a1 + 2543) < 0)
    operator delete(*(void **)(a1 + 2520));
  *(_QWORD *)(a1 + 2464) = off_24C335D90;
  if (*(char *)(a1 + 2495) < 0)
    operator delete(*(void **)(a1 + 2472));
  *(_QWORD *)(a1 + 2416) = off_24C335D90;
  if (*(char *)(a1 + 2447) < 0)
    operator delete(*(void **)(a1 + 2424));
  *(_QWORD *)(a1 + 2368) = off_24C335D90;
  if (*(char *)(a1 + 2399) < 0)
    operator delete(*(void **)(a1 + 2376));
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 2304);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 2240);
  *(_QWORD *)(a1 + 2192) = off_24C335D90;
  if (*(char *)(a1 + 2223) < 0)
    operator delete(*(void **)(a1 + 2200));
  *(_QWORD *)(a1 + 2144) = off_24C335D90;
  if (*(char *)(a1 + 2175) < 0)
    operator delete(*(void **)(a1 + 2152));
  *(_QWORD *)(a1 + 2096) = off_24C335D90;
  if (*(char *)(a1 + 2127) < 0)
    operator delete(*(void **)(a1 + 2104));
  *(_QWORD *)(a1 + 2048) = off_24C335D90;
  if (*(char *)(a1 + 2079) < 0)
    operator delete(*(void **)(a1 + 2056));
  *(_QWORD *)(a1 + 2000) = off_24C335D90;
  if (*(char *)(a1 + 2031) < 0)
    operator delete(*(void **)(a1 + 2008));
  *(_QWORD *)(a1 + 1952) = off_24C335D90;
  if (*(char *)(a1 + 1983) < 0)
    operator delete(*(void **)(a1 + 1960));
  *(_QWORD *)(a1 + 1904) = off_24C335D90;
  if (*(char *)(a1 + 1935) < 0)
    operator delete(*(void **)(a1 + 1912));
  *(_QWORD *)(a1 + 1856) = off_24C335D90;
  if (*(char *)(a1 + 1887) < 0)
    operator delete(*(void **)(a1 + 1864));
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 1792);
  *(_QWORD *)(a1 + 1744) = off_24C335D90;
  if (*(char *)(a1 + 1775) < 0)
    operator delete(*(void **)(a1 + 1752));
  *(_QWORD *)(a1 + 1696) = off_24C335D90;
  if (*(char *)(a1 + 1727) < 0)
    operator delete(*(void **)(a1 + 1704));
  *(_QWORD *)(a1 + 1648) = off_24C335D90;
  if (*(char *)(a1 + 1679) < 0)
    operator delete(*(void **)(a1 + 1656));
  *(_QWORD *)(a1 + 1600) = off_24C335D90;
  if (*(char *)(a1 + 1631) < 0)
    operator delete(*(void **)(a1 + 1608));
  *(_QWORD *)(a1 + 1552) = off_24C335D90;
  if (*(char *)(a1 + 1583) < 0)
    operator delete(*(void **)(a1 + 1560));
  *(_QWORD *)(a1 + 1504) = off_24C335D90;
  if (*(char *)(a1 + 1535) < 0)
    operator delete(*(void **)(a1 + 1512));
  mediaplatform::DatabaseColumn<mediaplatform::Data>::~DatabaseColumn(a1 + 1424);
  *(_QWORD *)(a1 + 1376) = off_24C335D90;
  if (*(char *)(a1 + 1407) < 0)
    operator delete(*(void **)(a1 + 1384));
  *(_QWORD *)(a1 + 1328) = off_24C335D90;
  if (*(char *)(a1 + 1359) < 0)
    operator delete(*(void **)(a1 + 1336));
  *(_QWORD *)(a1 + 1280) = off_24C335D90;
  if (*(char *)(a1 + 1311) < 0)
    operator delete(*(void **)(a1 + 1288));
  *(_QWORD *)(a1 + 1232) = off_24C335D90;
  if (*(char *)(a1 + 1263) < 0)
    operator delete(*(void **)(a1 + 1240));
  *(_QWORD *)(a1 + 1184) = off_24C335D90;
  if (*(char *)(a1 + 1215) < 0)
    operator delete(*(void **)(a1 + 1192));
  *(_QWORD *)(a1 + 1136) = off_24C335D90;
  if (*(char *)(a1 + 1167) < 0)
    operator delete(*(void **)(a1 + 1144));
  *(_QWORD *)(a1 + 1088) = off_24C335D90;
  if (*(char *)(a1 + 1119) < 0)
    operator delete(*(void **)(a1 + 1096));
  *(_QWORD *)(a1 + 1040) = off_24C335D90;
  if (*(char *)(a1 + 1071) < 0)
    operator delete(*(void **)(a1 + 1048));
  *(_QWORD *)(a1 + 992) = off_24C335D90;
  if (*(char *)(a1 + 1023) < 0)
    operator delete(*(void **)(a1 + 1000));
  *(_QWORD *)(a1 + 944) = off_24C335D90;
  if (*(char *)(a1 + 975) < 0)
    operator delete(*(void **)(a1 + 952));
  *(_QWORD *)(a1 + 896) = off_24C335D90;
  if (*(char *)(a1 + 927) < 0)
    operator delete(*(void **)(a1 + 904));
  *(_QWORD *)(a1 + 848) = off_24C335D90;
  if (*(char *)(a1 + 879) < 0)
    operator delete(*(void **)(a1 + 856));
  *(_QWORD *)(a1 + 800) = off_24C335D90;
  if (*(char *)(a1 + 831) < 0)
    operator delete(*(void **)(a1 + 808));
  *(_QWORD *)(a1 + 752) = off_24C335D90;
  if (*(char *)(a1 + 783) < 0)
    operator delete(*(void **)(a1 + 760));
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 688);
  *(_QWORD *)(a1 + 640) = off_24C335D90;
  if (*(char *)(a1 + 671) < 0)
    operator delete(*(void **)(a1 + 648));
  *(_QWORD *)(a1 + 592) = off_24C335D90;
  if (*(char *)(a1 + 623) < 0)
    operator delete(*(void **)(a1 + 600));
  *(_QWORD *)(a1 + 544) = off_24C335D90;
  if (*(char *)(a1 + 575) < 0)
    operator delete(*(void **)(a1 + 552));
  *(_QWORD *)(a1 + 496) = off_24C335D90;
  if (*(char *)(a1 + 527) < 0)
    operator delete(*(void **)(a1 + 504));
  *(_QWORD *)(a1 + 448) = off_24C335D90;
  if (*(char *)(a1 + 479) < 0)
    operator delete(*(void **)(a1 + 456));
  *(_QWORD *)(a1 + 400) = off_24C335D90;
  if (*(char *)(a1 + 431) < 0)
    operator delete(*(void **)(a1 + 408));
  *(_QWORD *)(a1 + 352) = off_24C335D90;
  if (*(char *)(a1 + 383) < 0)
    operator delete(*(void **)(a1 + 360));
  *(_QWORD *)(a1 + 304) = off_24C335D90;
  if (*(char *)(a1 + 335) < 0)
    operator delete(*(void **)(a1 + 312));
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 240);
  *(_QWORD *)(a1 + 192) = off_24C335D90;
  if (*(char *)(a1 + 223) < 0)
    operator delete(*(void **)(a1 + 200));
  *(_QWORD *)(a1 + 144) = off_24C335D90;
  if (*(char *)(a1 + 175) < 0)
    operator delete(*(void **)(a1 + 152));
  *(_QWORD *)(a1 + 96) = off_24C335D90;
  if (*(char *)(a1 + 127) < 0)
    operator delete(*(void **)(a1 + 104));
  *(_QWORD *)(a1 + 48) = off_24C335D90;
  if (*(char *)(a1 + 79) < 0)
    operator delete(*(void **)(a1 + 56));
  *(_QWORD *)a1 = off_24C335D90;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void mediaplatform::DatabaseTable<long long,int,long long,long long,long long,std::string,long long,int,int,long long,int,int,int,int,std::string,int,int,int,int,int,int,int,int,int,int,int,int,long long,int,mediaplatform::Data,int,int,int,int,int,int,std::string,int,int,int,int,int,long long,long long,int,std::string,std::string,int,int,int,int,long long,std::string,std::string,long long,long long,int,int,int,int,int,int,int,std::string,std::string,std::string,int,long long,int,std::string,long long,std::string,std::string,int,long long,int,std::string,int,long long,int,int,int,std::string,std::string,long long,int,int>::~DatabaseTable(uint64_t a1)
{
  char *v2;

  v2 = (char *)(a1 + 4383);
  *(_QWORD *)a1 = &off_24C3358D8;
  *(_QWORD *)(a1 + 4496) = off_24C335D90;
  if (*(char *)(a1 + 4527) < 0)
    operator delete(*(void **)(a1 + 4504));
  *(_QWORD *)(a1 + 4448) = off_24C335D90;
  if (v2[96] < 0)
    operator delete(*(void **)(a1 + 4456));
  *(_QWORD *)(a1 + 4400) = off_24C335D90;
  if (v2[48] < 0)
    operator delete(*(void **)(a1 + 4408));
  *(_QWORD *)(a1 + 4352) = off_24C335D90;
  if (*v2 < 0)
    operator delete(*(void **)(a1 + 4360));
  mediaplatform::DatabaseColumnTuple<4ul,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(a1 + 80);
  if (*(char *)(a1 + 79) < 0)
    operator delete(*(void **)(a1 + 56));
  mediaplatform::DatabaseTableBase::~DatabaseTableBase((void **)a1);
}

{
  mediaplatform::DatabaseTable<long long,int,long long,long long,long long,std::string,long long,int,int,long long,int,int,int,int,std::string,int,int,int,int,int,int,int,int,int,int,int,int,long long,int,mediaplatform::Data,int,int,int,int,int,int,std::string,int,int,int,int,int,long long,long long,int,std::string,std::string,int,int,int,int,long long,std::string,std::string,long long,long long,int,int,int,int,int,int,int,std::string,std::string,std::string,int,long long,int,std::string,long long,std::string,std::string,int,long long,int,std::string,int,long long,int,int,int,std::string,std::string,long long,int,int>::~DatabaseTable(a1);
  JUMPOUT(0x20BD27AFCLL);
}

uint64_t mediaplatform::DatabaseColumnTuple<4ul,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(uint64_t a1)
{
  char *v2;

  v2 = (char *)(a1 + 4143);
  *(_QWORD *)(a1 + 4224) = off_24C335D90;
  if (*(char *)(a1 + 4255) < 0)
    operator delete(*(void **)(a1 + 4232));
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 4160);
  *(_QWORD *)(a1 + 4112) = off_24C335D90;
  if (*v2 < 0)
    operator delete(*(void **)(a1 + 4120));
  *(_QWORD *)(a1 + 4064) = off_24C335D90;
  if (*(char *)(a1 + 4095) < 0)
    operator delete(*(void **)(a1 + 4072));
  *(_QWORD *)(a1 + 4016) = off_24C335D90;
  if (*(char *)(a1 + 4047) < 0)
    operator delete(*(void **)(a1 + 4024));
  *(_QWORD *)(a1 + 3968) = off_24C335D90;
  if (*(char *)(a1 + 3999) < 0)
    operator delete(*(void **)(a1 + 3976));
  return mediaplatform::DatabaseColumnTuple<10ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<10ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(uint64_t a1)
{
  *(_QWORD *)(a1 + 3920) = off_24C335D90;
  if (*(char *)(a1 + 3951) < 0)
    operator delete(*(void **)(a1 + 3928));
  *(_QWORD *)(a1 + 3872) = off_24C335D90;
  if (*(char *)(a1 + 3903) < 0)
    operator delete(*(void **)(a1 + 3880));
  *(_QWORD *)(a1 + 3824) = off_24C335D90;
  if (*(char *)(a1 + 3855) < 0)
    operator delete(*(void **)(a1 + 3832));
  *(_QWORD *)(a1 + 3776) = off_24C335D90;
  if (*(char *)(a1 + 3807) < 0)
    operator delete(*(void **)(a1 + 3784));
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 3712);
  *(_QWORD *)(a1 + 3664) = off_24C335D90;
  if (*(char *)(a1 + 3695) < 0)
    operator delete(*(void **)(a1 + 3672));
  return mediaplatform::DatabaseColumnTuple<16ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<16ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(uint64_t a1)
{
  *(_QWORD *)(a1 + 3616) = off_24C335D90;
  if (*(char *)(a1 + 3647) < 0)
    operator delete(*(void **)(a1 + 3624));
  *(_QWORD *)(a1 + 3568) = off_24C335D90;
  if (*(char *)(a1 + 3599) < 0)
    operator delete(*(void **)(a1 + 3576));
  *(_QWORD *)(a1 + 3520) = off_24C335D90;
  if (*(char *)(a1 + 3551) < 0)
    operator delete(*(void **)(a1 + 3528));
  *(_QWORD *)(a1 + 3472) = off_24C335D90;
  if (*(char *)(a1 + 3503) < 0)
    operator delete(*(void **)(a1 + 3480));
  *(_QWORD *)(a1 + 3424) = off_24C335D90;
  if (*(char *)(a1 + 3455) < 0)
    operator delete(*(void **)(a1 + 3432));
  *(_QWORD *)(a1 + 3376) = off_24C335D90;
  if (*(char *)(a1 + 3407) < 0)
    operator delete(*(void **)(a1 + 3384));
  return mediaplatform::DatabaseColumnTuple<22ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<22ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(uint64_t a1)
{
  *(_QWORD *)(a1 + 3328) = off_24C335D90;
  if (*(char *)(a1 + 3359) < 0)
    operator delete(*(void **)(a1 + 3336));
  *(_QWORD *)(a1 + 3280) = off_24C335D90;
  if (*(char *)(a1 + 3311) < 0)
    operator delete(*(void **)(a1 + 3288));
  *(_QWORD *)(a1 + 3232) = off_24C335D90;
  if (*(char *)(a1 + 3263) < 0)
    operator delete(*(void **)(a1 + 3240));
  *(_QWORD *)(a1 + 3184) = off_24C335D90;
  if (*(char *)(a1 + 3215) < 0)
    operator delete(*(void **)(a1 + 3192));
  *(_QWORD *)(a1 + 3136) = off_24C335D90;
  if (*(char *)(a1 + 3167) < 0)
    operator delete(*(void **)(a1 + 3144));
  *(_QWORD *)(a1 + 3088) = off_24C335D90;
  if (*(char *)(a1 + 3119) < 0)
    operator delete(*(void **)(a1 + 3096));
  return mediaplatform::DatabaseColumnTuple<28ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<28ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(uint64_t a1)
{
  *(_QWORD *)(a1 + 3040) = off_24C335D90;
  if (*(char *)(a1 + 3071) < 0)
    operator delete(*(void **)(a1 + 3048));
  mediaplatform::DatabaseColumn<mediaplatform::Data>::~DatabaseColumn(a1 + 2960);
  *(_QWORD *)(a1 + 2912) = off_24C335D90;
  if (*(char *)(a1 + 2943) < 0)
    operator delete(*(void **)(a1 + 2920));
  *(_QWORD *)(a1 + 2864) = off_24C335D90;
  if (*(char *)(a1 + 2895) < 0)
    operator delete(*(void **)(a1 + 2872));
  *(_QWORD *)(a1 + 2816) = off_24C335D90;
  if (*(char *)(a1 + 2847) < 0)
    operator delete(*(void **)(a1 + 2824));
  *(_QWORD *)(a1 + 2768) = off_24C335D90;
  if (*(char *)(a1 + 2799) < 0)
    operator delete(*(void **)(a1 + 2776));
  return mediaplatform::DatabaseColumnTuple<34ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<34ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(uint64_t a1)
{
  *(_QWORD *)(a1 + 2720) = off_24C335D90;
  if (*(char *)(a1 + 2751) < 0)
    operator delete(*(void **)(a1 + 2728));
  *(_QWORD *)(a1 + 2672) = off_24C335D90;
  if (*(char *)(a1 + 2703) < 0)
    operator delete(*(void **)(a1 + 2680));
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 2608);
  *(_QWORD *)(a1 + 2560) = off_24C335D90;
  if (*(char *)(a1 + 2591) < 0)
    operator delete(*(void **)(a1 + 2568));
  *(_QWORD *)(a1 + 2512) = off_24C335D90;
  if (*(char *)(a1 + 2543) < 0)
    operator delete(*(void **)(a1 + 2520));
  *(_QWORD *)(a1 + 2464) = off_24C335D90;
  if (*(char *)(a1 + 2495) < 0)
    operator delete(*(void **)(a1 + 2472));
  return mediaplatform::DatabaseColumnTuple<40ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<40ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(uint64_t a1)
{
  *(_QWORD *)(a1 + 2416) = off_24C335D90;
  if (*(char *)(a1 + 2447) < 0)
    operator delete(*(void **)(a1 + 2424));
  *(_QWORD *)(a1 + 2368) = off_24C335D90;
  if (*(char *)(a1 + 2399) < 0)
    operator delete(*(void **)(a1 + 2376));
  *(_QWORD *)(a1 + 2320) = off_24C335D90;
  if (*(char *)(a1 + 2351) < 0)
    operator delete(*(void **)(a1 + 2328));
  *(_QWORD *)(a1 + 2272) = off_24C335D90;
  if (*(char *)(a1 + 2303) < 0)
    operator delete(*(void **)(a1 + 2280));
  *(_QWORD *)(a1 + 2224) = off_24C335D90;
  if (*(char *)(a1 + 2255) < 0)
    operator delete(*(void **)(a1 + 2232));
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 2160);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 2096);
  return mediaplatform::DatabaseColumnTuple<47ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<47ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(uint64_t a1)
{
  *(_QWORD *)(a1 + 2048) = off_24C335D90;
  if (*(char *)(a1 + 2079) < 0)
    operator delete(*(void **)(a1 + 2056));
  *(_QWORD *)(a1 + 2000) = off_24C335D90;
  if (*(char *)(a1 + 2031) < 0)
    operator delete(*(void **)(a1 + 2008));
  *(_QWORD *)(a1 + 1952) = off_24C335D90;
  if (*(char *)(a1 + 1983) < 0)
    operator delete(*(void **)(a1 + 1960));
  *(_QWORD *)(a1 + 1904) = off_24C335D90;
  if (*(char *)(a1 + 1935) < 0)
    operator delete(*(void **)(a1 + 1912));
  *(_QWORD *)(a1 + 1856) = off_24C335D90;
  if (*(char *)(a1 + 1887) < 0)
    operator delete(*(void **)(a1 + 1864));
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 1792);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 1728);
  return mediaplatform::DatabaseColumnTuple<54ul,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<54ul,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(uint64_t a1)
{
  *(_QWORD *)(a1 + 1680) = off_24C335D90;
  if (*(char *)(a1 + 1711) < 0)
    operator delete(*(void **)(a1 + 1688));
  *(_QWORD *)(a1 + 1632) = off_24C335D90;
  if (*(char *)(a1 + 1663) < 0)
    operator delete(*(void **)(a1 + 1640));
  *(_QWORD *)(a1 + 1584) = off_24C335D90;
  if (*(char *)(a1 + 1615) < 0)
    operator delete(*(void **)(a1 + 1592));
  *(_QWORD *)(a1 + 1536) = off_24C335D90;
  if (*(char *)(a1 + 1567) < 0)
    operator delete(*(void **)(a1 + 1544));
  *(_QWORD *)(a1 + 1488) = off_24C335D90;
  if (*(char *)(a1 + 1519) < 0)
    operator delete(*(void **)(a1 + 1496));
  *(_QWORD *)(a1 + 1440) = off_24C335D90;
  if (*(char *)(a1 + 1471) < 0)
    operator delete(*(void **)(a1 + 1448));
  return mediaplatform::DatabaseColumnTuple<60ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<60ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(uint64_t a1)
{
  *(_QWORD *)(a1 + 1392) = off_24C335D90;
  if (*(char *)(a1 + 1423) < 0)
    operator delete(*(void **)(a1 + 1400));
  *(_QWORD *)(a1 + 1344) = off_24C335D90;
  if (*(char *)(a1 + 1375) < 0)
    operator delete(*(void **)(a1 + 1352));
  *(_QWORD *)(a1 + 1296) = off_24C335D90;
  if (*(char *)(a1 + 1327) < 0)
    operator delete(*(void **)(a1 + 1304));
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 1232);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 1168);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 1104);
  *(_QWORD *)(a1 + 1056) = off_24C335D90;
  if (*(char *)(a1 + 1087) < 0)
    operator delete(*(void **)(a1 + 1064));
  return mediaplatform::DatabaseColumnTuple<67ul,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<67ul,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(uint64_t a1)
{
  *(_QWORD *)(a1 + 1008) = off_24C335D90;
  if (*(char *)(a1 + 1039) < 0)
    operator delete(*(void **)(a1 + 1016));
  *(_QWORD *)(a1 + 960) = off_24C335D90;
  if (*(char *)(a1 + 991) < 0)
    operator delete(*(void **)(a1 + 968));
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 896);
  *(_QWORD *)(a1 + 848) = off_24C335D90;
  if (*(char *)(a1 + 879) < 0)
    operator delete(*(void **)(a1 + 856));
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 784);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 720);
  *(_QWORD *)(a1 + 672) = off_24C335D90;
  if (*(char *)(a1 + 703) < 0)
    operator delete(*(void **)(a1 + 680));
  return mediaplatform::DatabaseColumnTuple<74ul,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<74ul,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(uint64_t a1)
{
  *(_QWORD *)(a1 + 624) = off_24C335D90;
  if (*(char *)(a1 + 655) < 0)
    operator delete(*(void **)(a1 + 632));
  *(_QWORD *)(a1 + 576) = off_24C335D90;
  if (*(char *)(a1 + 607) < 0)
    operator delete(*(void **)(a1 + 584));
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 512);
  *(_QWORD *)(a1 + 464) = off_24C335D90;
  if (*(char *)(a1 + 495) < 0)
    operator delete(*(void **)(a1 + 472));
  *(_QWORD *)(a1 + 416) = off_24C335D90;
  if (*(char *)(a1 + 447) < 0)
    operator delete(*(void **)(a1 + 424));
  *(_QWORD *)(a1 + 368) = off_24C335D90;
  if (*(char *)(a1 + 399) < 0)
    operator delete(*(void **)(a1 + 376));
  return mediaplatform::DatabaseColumnTuple<80ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<80ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(uint64_t a1)
{
  *(_QWORD *)(a1 + 320) = off_24C335D90;
  if (*(char *)(a1 + 351) < 0)
    operator delete(*(void **)(a1 + 328));
  *(_QWORD *)(a1 + 272) = off_24C335D90;
  if (*(char *)(a1 + 303) < 0)
    operator delete(*(void **)(a1 + 280));
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 208);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 144);
  *(_QWORD *)(a1 + 96) = off_24C335D90;
  if (*(char *)(a1 + 127) < 0)
    operator delete(*(void **)(a1 + 104));
  *(_QWORD *)(a1 + 48) = off_24C335D90;
  if (*(char *)(a1 + 79) < 0)
    operator delete(*(void **)(a1 + 56));
  *(_QWORD *)a1 = off_24C335D90;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void mlcore::MediaTable<long long,int,long long,long long,long long,std::string,long long,int,int,long long,int,int,int,int,std::string,int,int,int,int,int,int,int,int,int,int,int,int,long long,int,mediaplatform::Data,int,int,int,int,int,int,std::string,int,int,int,int,int,long long,long long,int,std::string,std::string,int,int,int,int,long long,std::string,std::string,long long,long long,int,int,int,int,int,int,int,std::string,std::string,std::string,int,long long,int,std::string,long long,std::string,std::string,int,long long,int,std::string,int,long long,int,int,int,std::string,std::string,long long,int,int>::~MediaTable(_QWORD *a1)
{
  *a1 = &off_24C336440;
  std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul,3ul,4ul,5ul,6ul,7ul,8ul,9ul,10ul,11ul,12ul,13ul,14ul,15ul,16ul,17ul,18ul,19ul,20ul,21ul,22ul,23ul,24ul,25ul,26ul,27ul,28ul,29ul,30ul,31ul,32ul,33ul,34ul,35ul,36ul,37ul,38ul,39ul,40ul,41ul,42ul,43ul,44ul,45ul,46ul,47ul,48ul,49ul,50ul,51ul,52ul,53ul,54ul,55ul,56ul,57ul,58ul,59ul,60ul,61ul,62ul,63ul,64ul,65ul,66ul,67ul,68ul,69ul,70ul,71ul,72ul,73ul,74ul,75ul,76ul,77ul,78ul,79ul,80ul,81ul,82ul,83ul,84ul,85ul,86ul>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<int>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<int>,mlcore::MediaColumn<mediaplatform::Data>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<int>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<int>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<int>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<int>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<int>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<int>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>>::~__tuple_impl((uint64_t)(a1 + 568));
  mediaplatform::DatabaseTable<long long,int,long long,long long,long long,std::string,long long,int,int,long long,int,int,int,int,std::string,int,int,int,int,int,int,int,int,int,int,int,int,long long,int,mediaplatform::Data,int,int,int,int,int,int,std::string,int,int,int,int,int,long long,long long,int,std::string,std::string,int,int,int,int,long long,std::string,std::string,long long,long long,int,int,int,int,int,int,int,std::string,std::string,std::string,int,long long,int,std::string,long long,std::string,std::string,int,long long,int,std::string,int,long long,int,int,int,std::string,std::string,long long,int,int>::~DatabaseTable((uint64_t)a1);
}

{
  *a1 = &off_24C336440;
  std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul,3ul,4ul,5ul,6ul,7ul,8ul,9ul,10ul,11ul,12ul,13ul,14ul,15ul,16ul,17ul,18ul,19ul,20ul,21ul,22ul,23ul,24ul,25ul,26ul,27ul,28ul,29ul,30ul,31ul,32ul,33ul,34ul,35ul,36ul,37ul,38ul,39ul,40ul,41ul,42ul,43ul,44ul,45ul,46ul,47ul,48ul,49ul,50ul,51ul,52ul,53ul,54ul,55ul,56ul,57ul,58ul,59ul,60ul,61ul,62ul,63ul,64ul,65ul,66ul,67ul,68ul,69ul,70ul,71ul,72ul,73ul,74ul,75ul,76ul,77ul,78ul,79ul,80ul,81ul,82ul,83ul,84ul,85ul,86ul>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<int>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<int>,mlcore::MediaColumn<mediaplatform::Data>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<int>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<int>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<int>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<int>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<int>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<int>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<std::string>,mlcore::MediaColumn<long long>,mlcore::MediaColumn<int>,mlcore::MediaColumn<int>>::~__tuple_impl((uint64_t)(a1 + 568));
  mediaplatform::DatabaseTable<long long,int,long long,long long,long long,std::string,long long,int,int,long long,int,int,int,int,std::string,int,int,int,int,int,int,int,int,int,int,int,int,long long,int,mediaplatform::Data,int,int,int,int,int,int,std::string,int,int,int,int,int,long long,long long,int,std::string,std::string,int,int,int,int,long long,std::string,std::string,long long,long long,int,int,int,int,int,int,int,std::string,std::string,std::string,int,long long,int,std::string,long long,std::string,std::string,int,long long,int,std::string,int,long long,int,int,int,std::string,std::string,long long,int,int>::~DatabaseTable((uint64_t)a1);
  JUMPOUT(0x20BD27AFCLL);
}

uint64_t std::__tuple_leaf<36ul,mlcore::MediaColumn<std::string>,false>::__tuple_leaf[abi:ne180100]<mlcore::MediaColumn<std::string>&,void>(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  std::string *v5;
  __int128 v6;

  *(_QWORD *)a1 = off_24C335D90;
  if (*(char *)(a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 8), *(const std::string::value_type **)(a2 + 8), *(_QWORD *)(a2 + 16));
  }
  else
  {
    v4 = *(_OWORD *)(a2 + 8);
    *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 8) = v4;
  }
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_QWORD *)a1 = &off_24C335AB8;
  *(_BYTE *)(a1 + 36) = *(_BYTE *)(a2 + 36);
  v5 = (std::string *)(a1 + 40);
  if (*(char *)(a2 + 63) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *(const std::string::value_type **)(a2 + 40), *(_QWORD *)(a2 + 48));
  }
  else
  {
    v6 = *(_OWORD *)(a2 + 40);
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
  *(_QWORD *)a1 = &off_24C336A60;
  return a1;
}

void sub_20A7B07B0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  uint64_t v3;

  *(_QWORD *)v1 = v3;
  if (*(char *)(v1 + 31) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

uint64_t std::__tuple_leaf<52ul,mlcore::MediaColumn<std::string>,false>::__tuple_leaf[abi:ne180100]<mlcore::MediaColumn<std::string>&,void>(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  std::string *v5;
  __int128 v6;

  *(_QWORD *)a1 = off_24C335D90;
  if (*(char *)(a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 8), *(const std::string::value_type **)(a2 + 8), *(_QWORD *)(a2 + 16));
  }
  else
  {
    v4 = *(_OWORD *)(a2 + 8);
    *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 8) = v4;
  }
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_QWORD *)a1 = &off_24C335AB8;
  *(_BYTE *)(a1 + 36) = *(_BYTE *)(a2 + 36);
  v5 = (std::string *)(a1 + 40);
  if (*(char *)(a2 + 63) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *(const std::string::value_type **)(a2 + 40), *(_QWORD *)(a2 + 48));
  }
  else
  {
    v6 = *(_OWORD *)(a2 + 40);
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
  *(_QWORD *)a1 = &off_24C336A60;
  return a1;
}

void sub_20A7B088C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  uint64_t v3;

  *(_QWORD *)v1 = v3;
  if (*(char *)(v1 + 31) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

uint64_t mediaplatform::DatabaseColumnTuple<1ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(uint64_t a1)
{
  char *v2;

  v2 = (char *)(a1 + 4303);
  *(_QWORD *)(a1 + 4368) = off_24C335D90;
  if (*(char *)(a1 + 4399) < 0)
    operator delete(*(void **)(a1 + 4376));
  *(_QWORD *)(a1 + 4320) = off_24C335D90;
  if (v2[48] < 0)
    operator delete(*(void **)(a1 + 4328));
  *(_QWORD *)(a1 + 4272) = off_24C335D90;
  if (*v2 < 0)
    operator delete(*(void **)(a1 + 4280));
  return mediaplatform::DatabaseColumnTuple<4ul,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<2ul,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(uint64_t a1)
{
  char *v2;

  v2 = (char *)(a1 + 4303);
  *(_QWORD *)(a1 + 4320) = off_24C335D90;
  if (*(char *)(a1 + 4351) < 0)
    operator delete(*(void **)(a1 + 4328));
  *(_QWORD *)(a1 + 4272) = off_24C335D90;
  if (*v2 < 0)
    operator delete(*(void **)(a1 + 4280));
  return mediaplatform::DatabaseColumnTuple<4ul,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<3ul,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(uint64_t a1)
{
  *(_QWORD *)(a1 + 4272) = off_24C335D90;
  if (*(char *)(a1 + 4303) < 0)
    operator delete(*(void **)(a1 + 4280));
  return mediaplatform::DatabaseColumnTuple<4ul,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<5ul,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(uint64_t a1)
{
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 4160);
  *(_QWORD *)(a1 + 4112) = off_24C335D90;
  if (*(char *)(a1 + 4143) < 0)
    operator delete(*(void **)(a1 + 4120));
  *(_QWORD *)(a1 + 4064) = off_24C335D90;
  if (*(char *)(a1 + 4095) < 0)
    operator delete(*(void **)(a1 + 4072));
  *(_QWORD *)(a1 + 4016) = off_24C335D90;
  if (*(char *)(a1 + 4047) < 0)
    operator delete(*(void **)(a1 + 4024));
  *(_QWORD *)(a1 + 3968) = off_24C335D90;
  if (*(char *)(a1 + 3999) < 0)
    operator delete(*(void **)(a1 + 3976));
  return mediaplatform::DatabaseColumnTuple<10ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<6ul,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(uint64_t a1)
{
  *(_QWORD *)(a1 + 4112) = off_24C335D90;
  if (*(char *)(a1 + 4143) < 0)
    operator delete(*(void **)(a1 + 4120));
  *(_QWORD *)(a1 + 4064) = off_24C335D90;
  if (*(char *)(a1 + 4095) < 0)
    operator delete(*(void **)(a1 + 4072));
  *(_QWORD *)(a1 + 4016) = off_24C335D90;
  if (*(char *)(a1 + 4047) < 0)
    operator delete(*(void **)(a1 + 4024));
  *(_QWORD *)(a1 + 3968) = off_24C335D90;
  if (*(char *)(a1 + 3999) < 0)
    operator delete(*(void **)(a1 + 3976));
  return mediaplatform::DatabaseColumnTuple<10ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<7ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(uint64_t a1)
{
  *(_QWORD *)(a1 + 4064) = off_24C335D90;
  if (*(char *)(a1 + 4095) < 0)
    operator delete(*(void **)(a1 + 4072));
  *(_QWORD *)(a1 + 4016) = off_24C335D90;
  if (*(char *)(a1 + 4047) < 0)
    operator delete(*(void **)(a1 + 4024));
  *(_QWORD *)(a1 + 3968) = off_24C335D90;
  if (*(char *)(a1 + 3999) < 0)
    operator delete(*(void **)(a1 + 3976));
  return mediaplatform::DatabaseColumnTuple<10ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<8ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(uint64_t a1)
{
  *(_QWORD *)(a1 + 4016) = off_24C335D90;
  if (*(char *)(a1 + 4047) < 0)
    operator delete(*(void **)(a1 + 4024));
  *(_QWORD *)(a1 + 3968) = off_24C335D90;
  if (*(char *)(a1 + 3999) < 0)
    operator delete(*(void **)(a1 + 3976));
  return mediaplatform::DatabaseColumnTuple<10ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<9ul,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(uint64_t a1)
{
  *(_QWORD *)(a1 + 3968) = off_24C335D90;
  if (*(char *)(a1 + 3999) < 0)
    operator delete(*(void **)(a1 + 3976));
  return mediaplatform::DatabaseColumnTuple<10ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<11ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(uint64_t a1)
{
  *(_QWORD *)(a1 + 3872) = off_24C335D90;
  if (*(char *)(a1 + 3903) < 0)
    operator delete(*(void **)(a1 + 3880));
  *(_QWORD *)(a1 + 3824) = off_24C335D90;
  if (*(char *)(a1 + 3855) < 0)
    operator delete(*(void **)(a1 + 3832));
  *(_QWORD *)(a1 + 3776) = off_24C335D90;
  if (*(char *)(a1 + 3807) < 0)
    operator delete(*(void **)(a1 + 3784));
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 3712);
  *(_QWORD *)(a1 + 3664) = off_24C335D90;
  if (*(char *)(a1 + 3695) < 0)
    operator delete(*(void **)(a1 + 3672));
  return mediaplatform::DatabaseColumnTuple<16ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<12ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(uint64_t a1)
{
  *(_QWORD *)(a1 + 3824) = off_24C335D90;
  if (*(char *)(a1 + 3855) < 0)
    operator delete(*(void **)(a1 + 3832));
  *(_QWORD *)(a1 + 3776) = off_24C335D90;
  if (*(char *)(a1 + 3807) < 0)
    operator delete(*(void **)(a1 + 3784));
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 3712);
  *(_QWORD *)(a1 + 3664) = off_24C335D90;
  if (*(char *)(a1 + 3695) < 0)
    operator delete(*(void **)(a1 + 3672));
  return mediaplatform::DatabaseColumnTuple<16ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<13ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(uint64_t a1)
{
  *(_QWORD *)(a1 + 3776) = off_24C335D90;
  if (*(char *)(a1 + 3807) < 0)
    operator delete(*(void **)(a1 + 3784));
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 3712);
  *(_QWORD *)(a1 + 3664) = off_24C335D90;
  if (*(char *)(a1 + 3695) < 0)
    operator delete(*(void **)(a1 + 3672));
  return mediaplatform::DatabaseColumnTuple<16ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<14ul,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(uint64_t a1)
{
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 3712);
  *(_QWORD *)(a1 + 3664) = off_24C335D90;
  if (*(char *)(a1 + 3695) < 0)
    operator delete(*(void **)(a1 + 3672));
  return mediaplatform::DatabaseColumnTuple<16ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<15ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(uint64_t a1)
{
  *(_QWORD *)(a1 + 3664) = off_24C335D90;
  if (*(char *)(a1 + 3695) < 0)
    operator delete(*(void **)(a1 + 3672));
  return mediaplatform::DatabaseColumnTuple<16ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<17ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(uint64_t a1)
{
  *(_QWORD *)(a1 + 3568) = off_24C335D90;
  if (*(char *)(a1 + 3599) < 0)
    operator delete(*(void **)(a1 + 3576));
  *(_QWORD *)(a1 + 3520) = off_24C335D90;
  if (*(char *)(a1 + 3551) < 0)
    operator delete(*(void **)(a1 + 3528));
  *(_QWORD *)(a1 + 3472) = off_24C335D90;
  if (*(char *)(a1 + 3503) < 0)
    operator delete(*(void **)(a1 + 3480));
  *(_QWORD *)(a1 + 3424) = off_24C335D90;
  if (*(char *)(a1 + 3455) < 0)
    operator delete(*(void **)(a1 + 3432));
  *(_QWORD *)(a1 + 3376) = off_24C335D90;
  if (*(char *)(a1 + 3407) < 0)
    operator delete(*(void **)(a1 + 3384));
  return mediaplatform::DatabaseColumnTuple<22ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<18ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(uint64_t a1)
{
  *(_QWORD *)(a1 + 3520) = off_24C335D90;
  if (*(char *)(a1 + 3551) < 0)
    operator delete(*(void **)(a1 + 3528));
  *(_QWORD *)(a1 + 3472) = off_24C335D90;
  if (*(char *)(a1 + 3503) < 0)
    operator delete(*(void **)(a1 + 3480));
  *(_QWORD *)(a1 + 3424) = off_24C335D90;
  if (*(char *)(a1 + 3455) < 0)
    operator delete(*(void **)(a1 + 3432));
  *(_QWORD *)(a1 + 3376) = off_24C335D90;
  if (*(char *)(a1 + 3407) < 0)
    operator delete(*(void **)(a1 + 3384));
  return mediaplatform::DatabaseColumnTuple<22ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<19ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(uint64_t a1)
{
  *(_QWORD *)(a1 + 3472) = off_24C335D90;
  if (*(char *)(a1 + 3503) < 0)
    operator delete(*(void **)(a1 + 3480));
  *(_QWORD *)(a1 + 3424) = off_24C335D90;
  if (*(char *)(a1 + 3455) < 0)
    operator delete(*(void **)(a1 + 3432));
  *(_QWORD *)(a1 + 3376) = off_24C335D90;
  if (*(char *)(a1 + 3407) < 0)
    operator delete(*(void **)(a1 + 3384));
  return mediaplatform::DatabaseColumnTuple<22ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<20ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(uint64_t a1)
{
  *(_QWORD *)(a1 + 3424) = off_24C335D90;
  if (*(char *)(a1 + 3455) < 0)
    operator delete(*(void **)(a1 + 3432));
  *(_QWORD *)(a1 + 3376) = off_24C335D90;
  if (*(char *)(a1 + 3407) < 0)
    operator delete(*(void **)(a1 + 3384));
  return mediaplatform::DatabaseColumnTuple<22ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<21ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(uint64_t a1)
{
  *(_QWORD *)(a1 + 3376) = off_24C335D90;
  if (*(char *)(a1 + 3407) < 0)
    operator delete(*(void **)(a1 + 3384));
  return mediaplatform::DatabaseColumnTuple<22ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<23ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(uint64_t a1)
{
  *(_QWORD *)(a1 + 3280) = off_24C335D90;
  if (*(char *)(a1 + 3311) < 0)
    operator delete(*(void **)(a1 + 3288));
  *(_QWORD *)(a1 + 3232) = off_24C335D90;
  if (*(char *)(a1 + 3263) < 0)
    operator delete(*(void **)(a1 + 3240));
  *(_QWORD *)(a1 + 3184) = off_24C335D90;
  if (*(char *)(a1 + 3215) < 0)
    operator delete(*(void **)(a1 + 3192));
  *(_QWORD *)(a1 + 3136) = off_24C335D90;
  if (*(char *)(a1 + 3167) < 0)
    operator delete(*(void **)(a1 + 3144));
  *(_QWORD *)(a1 + 3088) = off_24C335D90;
  if (*(char *)(a1 + 3119) < 0)
    operator delete(*(void **)(a1 + 3096));
  return mediaplatform::DatabaseColumnTuple<28ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<24ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(uint64_t a1)
{
  *(_QWORD *)(a1 + 3232) = off_24C335D90;
  if (*(char *)(a1 + 3263) < 0)
    operator delete(*(void **)(a1 + 3240));
  *(_QWORD *)(a1 + 3184) = off_24C335D90;
  if (*(char *)(a1 + 3215) < 0)
    operator delete(*(void **)(a1 + 3192));
  *(_QWORD *)(a1 + 3136) = off_24C335D90;
  if (*(char *)(a1 + 3167) < 0)
    operator delete(*(void **)(a1 + 3144));
  *(_QWORD *)(a1 + 3088) = off_24C335D90;
  if (*(char *)(a1 + 3119) < 0)
    operator delete(*(void **)(a1 + 3096));
  return mediaplatform::DatabaseColumnTuple<28ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<25ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::DatabaseColumnTuple(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  int v78;
  int v79;
  const void *v80;
  size_t v81;
  void *v82;
  int v83;
  int v84;
  int v85;
  int v86;
  int v87;
  int v88;
  int v89;
  int v90;
  int v91;
  int v92;
  int v93;
  int v94;
  int v95;
  int v96;
  int v97;
  int v98;
  int v99;
  int v100;
  int v101;
  int v102;
  const void *v103;
  size_t v104;
  void *v105;
  int v106;
  int v107;
  int v108;
  int v109;
  int v110;
  int v111;
  int v112;
  int v113;
  std::string *v114;
  int v115;
  std::string *v116;
  __int128 v117;
  uint64_t result;
  int v119;
  uint64_t v120;
  int v121;
  int v122;
  int v123;
  int v124;
  int v125;
  int v126;
  int v127;
  uint64_t v128;
  std::string v129;
  int v130;
  uint64_t v131;
  uint64_t (**v132)();
  std::string v133;
  int v134;
  uint64_t v135;
  uint64_t (**v136)();
  std::string v137;
  int v138;
  uint64_t v139;
  int v140;
  uint64_t (**v141)();
  std::string v142;
  int v143;
  char v144;
  std::string v145;
  uint64_t (**v146)();
  std::string v147;
  int v148;
  char v149;
  std::string v150;
  uint64_t (**v151)();
  std::string v152;
  int v153;
  uint64_t v154;
  uint64_t (**v155)();
  std::string v156;
  int v157;
  uint64_t v158;
  uint64_t (**v159)();
  std::string v160;
  int v161;
  uint64_t v162;
  uint64_t (**v163)();
  std::string v164;
  int v165;
  uint64_t v166;
  int v167;
  uint64_t (**v168)();
  std::string v169;
  int v170;
  uint64_t v171;
  uint64_t (**v172)();
  std::string v173;
  int v174;
  char v175;
  std::string v176;
  uint64_t (**v177)();
  std::string v178;
  int v179;
  uint64_t v180;
  uint64_t (**v181)();
  std::string v182;
  int v183;
  uint64_t v184;
  int v185;
  uint64_t (**v186)();
  std::string v187;
  int v188;
  uint64_t v189;
  uint64_t (**v190)();
  std::string v191;
  int v192;
  char v193;
  std::string v194;
  uint64_t (**v195)();
  std::string v196;
  int v197;
  char v198;
  std::string v199;
  uint64_t (**v200)();
  std::string v201;
  int v202;
  uint64_t v203;
  int v204;
  uint64_t (**v205)();
  std::string v206;
  int v207;
  char v208;
  std::string v209;
  uint64_t (**v210)();
  std::string v211;
  int v212;
  uint64_t v213;
  uint64_t (**v214)();
  std::string v215;
  int v216;
  uint64_t v217;
  int v218;
  uint64_t (**v219)();
  std::string v220;
  int v221;
  uint64_t v222;
  uint64_t (**v223)();
  std::string v224;
  int v225;
  char v226;
  std::string v227;
  uint64_t (**v228)();
  std::string v229;
  int v230;
  char v231;
  std::string v232;
  uint64_t (**v233)();
  std::string v234;
  int v235;
  char v236;
  std::string v237;
  uint64_t (**v238)();
  std::string v239;
  int v240;
  uint64_t v241;
  uint64_t (**v242)();
  std::string v243;
  int v244;
  uint64_t v245;
  uint64_t (**v246)();
  std::string v247;
  int v248;
  uint64_t v249;
  uint64_t (**v250)();
  std::string v251;
  int v252;
  uint64_t v253;
  uint64_t (**v254)();
  std::string v255;
  int v256;
  uint64_t v257;
  uint64_t (**v258)();
  std::string v259;
  int v260;
  uint64_t v261;
  uint64_t (**v262)();
  std::string v263;
  int v264;
  uint64_t v265;
  uint64_t (**v266)();
  std::string v267;
  int v268;
  uint64_t v269;
  int v270;
  uint64_t (**v271)();
  std::string v272;
  int v273;
  uint64_t v274;
  int v275;
  uint64_t (**v276)();
  std::string v277;
  int v278;
  char v279;
  std::string v280;
  uint64_t (**v281)();
  std::string v282;
  int v283;
  char v284;
  std::string v285;
  uint64_t (**v286)();
  std::string v287;
  int v288;
  uint64_t v289;
  int v290;
  uint64_t (**v291)();
  std::string v292;
  int v293;
  uint64_t v294;
  uint64_t (**v295)();
  std::string v296;
  int v297;
  uint64_t v298;
  uint64_t (**v299)();
  std::string v300;
  int v301;
  uint64_t v302;
  uint64_t (**v303)();
  std::string v304;
  int v305;
  uint64_t v306;
  uint64_t (**v307)();
  std::string v308;
  int v309;
  char v310;
  std::string v311;
  uint64_t (**v312)();
  std::string v313;
  int v314;
  char v315;
  std::string v316;
  uint64_t (**v317)();
  std::string v318;
  int v319;
  uint64_t v320;
  uint64_t (**v321)();
  std::string v322;
  int v323;
  uint64_t v324;
  int v325;
  uint64_t (**v326)();
  std::string v327;
  int v328;
  uint64_t v329;
  int v330;
  uint64_t (**v331)();
  std::string v332;
  int v333;
  uint64_t v334;
  uint64_t (**v335)();
  std::string v336;
  int v337;
  uint64_t v338;
  uint64_t (**v339)();
  std::string v340;
  int v341;
  uint64_t v342;
  uint64_t (**v343)();
  std::string v344;
  int v345;
  uint64_t v346;
  uint64_t (**v347)();
  std::string v348;
  int v349;
  uint64_t v350;
  uint64_t (**v351)();
  std::string v352;
  int v353;
  char v354;
  std::string v355;
  uint64_t (**v356)();
  std::string v357;
  int v358;
  uint64_t v359;
  uint64_t (**v360)();
  std::string v361;
  int v362;
  uint64_t v363;
  uint64_t (**v364)();
  std::string v365;
  int v366;
  uint64_t v367;
  uint64_t (**v368)();
  std::string v369;
  int v370;
  uint64_t v371;
  uint64_t (**v372)();
  std::string v373;
  int v374;
  uint64_t v375;
  uint64_t (**v376)();
  std::string v377;
  int v378;
  uint64_t v379;
  uint64_t (**v380)();
  std::string v381;
  int v382;
  char v383;
  void (**v384)(mediaplatform::Data *__hidden);
  size_t v385;
  size_t v386;
  const void *v387;
  char v388;
  uint64_t (**v389)();
  std::string v390;
  int v391;
  uint64_t v392;
  uint64_t (**v393)();
  std::string __s;
  int v395;
  uint64_t v396;
  int v397;
  uint64_t (**v398)();
  std::string v399;
  int v400;
  uint64_t v401;
  uint64_t (**v402)();
  std::string __p;
  int v404;
  uint64_t v405;
  uint64_t (**v406)();
  std::string v407;
  int v408;
  uint64_t v409;
  uint64_t (**v410)();
  std::string v411;
  int v412;
  uint64_t v413;
  int v414;
  uint64_t (**v415)();
  std::string v416;
  int v417;
  char v418;
  std::string v419;
  uint64_t (**v420)();
  std::string v421;
  int v422;
  char v423;
  std::string v424;
  uint64_t (**v425)();
  std::string v426;
  int v427;
  uint64_t v428;
  uint64_t (**v429)();
  std::string v430;
  int v431;
  uint64_t v432;
  uint64_t (**v433)();
  std::string v434;
  int v435;
  uint64_t v436;
  uint64_t (**v437)();
  std::string v438;
  int v439;
  uint64_t v440;
  int v441;
  uint64_t (**v442)();
  std::string v443;
  int v444;
  uint64_t v445;
  uint64_t (**v446)();
  std::string v447;
  int v448;
  char v449;
  std::string v450;
  uint64_t (**v451)();
  std::string v452;
  int v453;
  uint64_t v454;
  uint64_t (**v455)();
  std::string v456;
  int v457;
  uint64_t v458;
  int v459;
  uint64_t (**v460)();
  std::string v461;
  int v462;
  uint64_t v463;
  uint64_t (**v464)();
  std::string v465;
  int v466;
  char v467;
  std::string v468;
  uint64_t (**v469)();
  std::string v470;
  int v471;
  char v472;
  std::string v473;
  uint64_t (**v474)();
  std::string v475;
  int v476;
  uint64_t v477;
  int v478;
  uint64_t (**v479)();
  std::string v480;
  int v481;
  char v482;
  std::string v483;
  uint64_t (**v484)();
  std::string v485;
  int v486;
  uint64_t v487;
  uint64_t (**v488)();
  std::string v489;
  int v490;
  uint64_t v491;
  int v492;
  uint64_t (**v493)();
  std::string v494;
  int v495;
  uint64_t v496;
  uint64_t (**v497)();
  std::string v498;
  int v499;
  char v500;
  std::string v501;
  uint64_t (**v502)();
  std::string v503;
  int v504;
  char v505;
  std::string v506;
  uint64_t (**v507)();
  std::string v508;
  int v509;
  char v510;
  std::string v511;
  uint64_t (**v512)();
  std::string v513;
  int v514;
  uint64_t v515;
  uint64_t (**v516)();
  std::string v517;
  int v518;
  uint64_t v519;
  uint64_t (**v520)();
  std::string v521;
  int v522;
  uint64_t v523;
  uint64_t (**v524)();
  std::string v525;
  int v526;
  uint64_t v527;
  uint64_t (**v528)();
  std::string v529;
  int v530;
  uint64_t v531;
  uint64_t (**v532)();
  std::string v533;
  int v534;
  uint64_t v535;
  uint64_t (**v536)();
  std::string v537;
  int v538;
  uint64_t v539;
  uint64_t (**v540)();
  std::string v541;
  int v542;
  uint64_t v543;
  int v544;
  uint64_t (**v545)();
  std::string v546;
  int v547;
  uint64_t v548;
  int v549;
  uint64_t (**v550)();
  std::string v551;
  int v552;
  char v553;
  std::string v554;
  uint64_t (**v555)();
  std::string v556;
  int v557;
  char v558;
  std::string v559;
  uint64_t (**v560)();
  std::string v561;
  int v562;
  uint64_t v563;
  int v564;
  uint64_t (**v565)();
  std::string v566;
  int v567;
  uint64_t v568;
  uint64_t (**v569)();
  std::string v570;
  int v571;
  uint64_t v572;
  uint64_t (**v573)();
  std::string v574;
  int v575;
  uint64_t v576;
  uint64_t (**v577)();
  std::string v578;
  int v579;
  uint64_t v580;
  uint64_t (**v581)();
  std::string v582;
  int v583;
  char v584;
  std::string v585;
  uint64_t (**v586)();
  std::string v587;
  int v588;
  char v589;
  std::string v590;
  uint64_t (**v591)();
  std::string v592;
  int v593;
  uint64_t v594;
  uint64_t (**v595)();
  std::string v596;
  int v597;
  uint64_t v598;
  int v599;
  uint64_t (**v600)();
  std::string v601;
  int v602;
  uint64_t v603;
  int v604;
  uint64_t (**v605)();
  std::string v606;
  int v607;
  uint64_t v608;
  uint64_t (**v609)();
  std::string v610;
  int v611;
  uint64_t v612;
  uint64_t (**v613)();
  std::string v614;
  int v615;
  uint64_t v616;
  uint64_t (**v617)();
  std::string v618;
  int v619;
  uint64_t v620;
  uint64_t (**v621)();
  std::string v622;
  int v623;
  uint64_t v624;
  uint64_t (**v625)();
  std::string v626;
  int v627;
  char v628;
  std::string v629;
  uint64_t (**v630)();
  std::string v631;
  int v632;
  uint64_t v633;
  uint64_t (**v634)();
  std::string v635;
  int v636;
  uint64_t v637;
  uint64_t (**v638)();
  std::string v639;
  int v640;
  uint64_t v641;
  uint64_t (**v642)();
  std::string v643;
  int v644;
  uint64_t v645;
  uint64_t (**v646)();
  std::string v647;
  int v648;
  uint64_t v649;
  uint64_t (**v650)();
  std::string v651;
  int v652;
  uint64_t v653;
  uint64_t (**v654)();
  std::string v655;
  int v656;
  char v657;
  void (**v658)(mediaplatform::Data *__hidden);
  size_t v659;
  size_t v660;
  void *v661;
  char v662;
  uint64_t (**v663)();
  std::string v664;
  int v665;
  uint64_t v666;
  uint64_t (**v667)();
  std::string v668;
  int v669;
  uint64_t v670;
  int v671;

  v63 = MEMORY[0x24BDAC7A8](a1);
  v66 = v65;
  v68 = v67;
  v70 = v69;
  v72 = v71;
  v74 = v73;
  v75 = v64;
  v77 = v76;
  v128 = v63;
  if (*(char *)(v64 + 31) < 0)
    std::string::__init_copy_ctor_external(&v399, *(const std::string::value_type **)(v64 + 8), *(_QWORD *)(v64 + 16));
  else
    v399 = *(std::string *)(v64 + 8);
  v400 = *(_DWORD *)(v75 + 32);
  v398 = off_24C335AF8;
  v401 = *(_QWORD *)(v75 + 36);
  if (*(char *)(v74 + 31) < 0)
    std::string::__init_copy_ctor_external(&__s, *(const std::string::value_type **)(v74 + 8), *(_QWORD *)(v74 + 16));
  else
    __s = *(std::string *)(v74 + 8);
  v78 = *(_DWORD *)(v74 + 32);
  v393 = off_24C335B18;
  v396 = *(_QWORD *)(v74 + 36);
  v79 = *(_DWORD *)(v74 + 44);
  v395 = v78;
  v397 = v79;
  if (*(char *)(v72 + 31) < 0)
    std::string::__init_copy_ctor_external(&v390, *(const std::string::value_type **)(v72 + 8), *(_QWORD *)(v72 + 16));
  else
    v390 = *(std::string *)(v72 + 8);
  v391 = *(_DWORD *)(v72 + 32);
  v389 = off_24C335AF8;
  v392 = *(_QWORD *)(v72 + 36);
  v380 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(v70 + 31) < 0)
    std::string::__init_copy_ctor_external(&v381, *(const std::string::value_type **)(v70 + 8), *(_QWORD *)(v70 + 16));
  else
    v381 = *(std::string *)(v70 + 8);
  v382 = *(_DWORD *)(v70 + 32);
  v380 = &off_24C335A98;
  v383 = *(_BYTE *)(v70 + 36);
  v80 = *(const void **)(v70 + 64);
  v81 = *(_QWORD *)(v70 + 48);
  v384 = &off_24C331510;
  v385 = v81;
  v386 = v81;
  if (v81)
    v82 = (void *)operator new[]();
  else
    v82 = 0;
  v387 = v82;
  v388 = 1;
  if (v80)
    memcpy(v82, v80, v81);
  else
    bzero(v82, v81);
  if (*(char *)(v68 + 31) < 0)
    std::string::__init_copy_ctor_external(&v377, *(const std::string::value_type **)(v68 + 8), *(_QWORD *)(v68 + 16));
  else
    v377 = *(std::string *)(v68 + 8);
  v378 = *(_DWORD *)(v68 + 32);
  v376 = off_24C335AF8;
  v379 = *(_QWORD *)(v68 + 36);
  v120 = v77;
  if (*(char *)(v66 + 31) < 0)
    std::string::__init_copy_ctor_external(&v373, *(const std::string::value_type **)(v66 + 8), *(_QWORD *)(v66 + 16));
  else
    v373 = *(std::string *)(v66 + 8);
  v374 = *(_DWORD *)(v66 + 32);
  v372 = off_24C335AF8;
  v375 = *(_QWORD *)(v66 + 36);
  if (*(char *)(a9 + 31) < 0)
    std::string::__init_copy_ctor_external(&v369, *(const std::string::value_type **)(a9 + 8), *(_QWORD *)(a9 + 16));
  else
    v369 = *(std::string *)(a9 + 8);
  v370 = *(_DWORD *)(a9 + 32);
  v368 = off_24C335AF8;
  v371 = *(_QWORD *)(a9 + 36);
  if (*(char *)(a10 + 31) < 0)
    std::string::__init_copy_ctor_external(&v365, *(const std::string::value_type **)(a10 + 8), *(_QWORD *)(a10 + 16));
  else
    v365 = *(std::string *)(a10 + 8);
  v366 = *(_DWORD *)(a10 + 32);
  v364 = off_24C335AF8;
  v367 = *(_QWORD *)(a10 + 36);
  if (*(char *)(a11 + 31) < 0)
    std::string::__init_copy_ctor_external(&v361, *(const std::string::value_type **)(a11 + 8), *(_QWORD *)(a11 + 16));
  else
    v361 = *(std::string *)(a11 + 8);
  v362 = *(_DWORD *)(a11 + 32);
  v360 = off_24C335AF8;
  v363 = *(_QWORD *)(a11 + 36);
  if (*(char *)(a12 + 31) < 0)
    std::string::__init_copy_ctor_external(&v357, *(const std::string::value_type **)(a12 + 8), *(_QWORD *)(a12 + 16));
  else
    v357 = *(std::string *)(a12 + 8);
  v358 = *(_DWORD *)(a12 + 32);
  v356 = off_24C335AF8;
  v359 = *(_QWORD *)(a12 + 36);
  v351 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a13 + 31) < 0)
    std::string::__init_copy_ctor_external(&v352, *(const std::string::value_type **)(a13 + 8), *(_QWORD *)(a13 + 16));
  else
    v352 = *(std::string *)(a13 + 8);
  v353 = *(_DWORD *)(a13 + 32);
  v351 = &off_24C335AB8;
  v354 = *(_BYTE *)(a13 + 36);
  if (*(char *)(a13 + 63) < 0)
    std::string::__init_copy_ctor_external(&v355, *(const std::string::value_type **)(a13 + 40), *(_QWORD *)(a13 + 48));
  else
    v355 = *(std::string *)(a13 + 40);
  if (*(char *)(a14 + 31) < 0)
    std::string::__init_copy_ctor_external(&v348, *(const std::string::value_type **)(a14 + 8), *(_QWORD *)(a14 + 16));
  else
    v348 = *(std::string *)(a14 + 8);
  v349 = *(_DWORD *)(a14 + 32);
  v347 = off_24C335AF8;
  v350 = *(_QWORD *)(a14 + 36);
  if (*(char *)(a15 + 31) < 0)
    std::string::__init_copy_ctor_external(&v344, *(const std::string::value_type **)(a15 + 8), *(_QWORD *)(a15 + 16));
  else
    v344 = *(std::string *)(a15 + 8);
  v345 = *(_DWORD *)(a15 + 32);
  v343 = off_24C335AF8;
  v346 = *(_QWORD *)(a15 + 36);
  if (*(char *)(a16 + 31) < 0)
    std::string::__init_copy_ctor_external(&v340, *(const std::string::value_type **)(a16 + 8), *(_QWORD *)(a16 + 16));
  else
    v340 = *(std::string *)(a16 + 8);
  v341 = *(_DWORD *)(a16 + 32);
  v339 = off_24C335AF8;
  v342 = *(_QWORD *)(a16 + 36);
  if (*(char *)(a17 + 31) < 0)
    std::string::__init_copy_ctor_external(&v336, *(const std::string::value_type **)(a17 + 8), *(_QWORD *)(a17 + 16));
  else
    v336 = *(std::string *)(a17 + 8);
  v337 = *(_DWORD *)(a17 + 32);
  v335 = off_24C335AF8;
  v338 = *(_QWORD *)(a17 + 36);
  if (*(char *)(a18 + 31) < 0)
    std::string::__init_copy_ctor_external(&v332, *(const std::string::value_type **)(a18 + 8), *(_QWORD *)(a18 + 16));
  else
    v332 = *(std::string *)(a18 + 8);
  v333 = *(_DWORD *)(a18 + 32);
  v331 = off_24C335AF8;
  v334 = *(_QWORD *)(a18 + 36);
  if (*(char *)(a19 + 31) < 0)
    std::string::__init_copy_ctor_external(&v327, *(const std::string::value_type **)(a19 + 8), *(_QWORD *)(a19 + 16));
  else
    v327 = *(std::string *)(a19 + 8);
  v83 = *(_DWORD *)(a19 + 32);
  v326 = off_24C335B18;
  v329 = *(_QWORD *)(a19 + 36);
  v84 = *(_DWORD *)(a19 + 44);
  v328 = v83;
  v330 = v84;
  if (*(char *)(a20 + 31) < 0)
    std::string::__init_copy_ctor_external(&v322, *(const std::string::value_type **)(a20 + 8), *(_QWORD *)(a20 + 16));
  else
    v322 = *(std::string *)(a20 + 8);
  v85 = *(_DWORD *)(a20 + 32);
  v321 = off_24C335B18;
  v324 = *(_QWORD *)(a20 + 36);
  v86 = *(_DWORD *)(a20 + 44);
  v323 = v85;
  v325 = v86;
  if (*(char *)(a21 + 31) < 0)
    std::string::__init_copy_ctor_external(&v318, *(const std::string::value_type **)(a21 + 8), *(_QWORD *)(a21 + 16));
  else
    v318 = *(std::string *)(a21 + 8);
  v319 = *(_DWORD *)(a21 + 32);
  v317 = off_24C335AF8;
  v320 = *(_QWORD *)(a21 + 36);
  v312 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a22 + 31) < 0)
    std::string::__init_copy_ctor_external(&v313, *(const std::string::value_type **)(a22 + 8), *(_QWORD *)(a22 + 16));
  else
    v313 = *(std::string *)(a22 + 8);
  v314 = *(_DWORD *)(a22 + 32);
  v312 = &off_24C335AB8;
  v315 = *(_BYTE *)(a22 + 36);
  if (*(char *)(a22 + 63) < 0)
    std::string::__init_copy_ctor_external(&v316, *(const std::string::value_type **)(a22 + 40), *(_QWORD *)(a22 + 48));
  else
    v316 = *(std::string *)(a22 + 40);
  v307 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a23 + 31) < 0)
    std::string::__init_copy_ctor_external(&v308, *(const std::string::value_type **)(a23 + 8), *(_QWORD *)(a23 + 16));
  else
    v308 = *(std::string *)(a23 + 8);
  v309 = *(_DWORD *)(a23 + 32);
  v307 = &off_24C335AB8;
  v310 = *(_BYTE *)(a23 + 36);
  if (*(char *)(a23 + 63) < 0)
    std::string::__init_copy_ctor_external(&v311, *(const std::string::value_type **)(a23 + 40), *(_QWORD *)(a23 + 48));
  else
    v311 = *(std::string *)(a23 + 40);
  if (*(char *)(a24 + 31) < 0)
    std::string::__init_copy_ctor_external(&v304, *(const std::string::value_type **)(a24 + 8), *(_QWORD *)(a24 + 16));
  else
    v304 = *(std::string *)(a24 + 8);
  v305 = *(_DWORD *)(a24 + 32);
  v303 = off_24C335AF8;
  v306 = *(_QWORD *)(a24 + 36);
  if (*(char *)(a25 + 31) < 0)
    std::string::__init_copy_ctor_external(&v300, *(const std::string::value_type **)(a25 + 8), *(_QWORD *)(a25 + 16));
  else
    v300 = *(std::string *)(a25 + 8);
  v301 = *(_DWORD *)(a25 + 32);
  v299 = off_24C335AF8;
  v302 = *(_QWORD *)(a25 + 36);
  if (*(char *)(a26 + 31) < 0)
    std::string::__init_copy_ctor_external(&v296, *(const std::string::value_type **)(a26 + 8), *(_QWORD *)(a26 + 16));
  else
    v296 = *(std::string *)(a26 + 8);
  v297 = *(_DWORD *)(a26 + 32);
  v295 = off_24C335AF8;
  v298 = *(_QWORD *)(a26 + 36);
  if (*(char *)(a27 + 31) < 0)
    std::string::__init_copy_ctor_external(&v292, *(const std::string::value_type **)(a27 + 8), *(_QWORD *)(a27 + 16));
  else
    v292 = *(std::string *)(a27 + 8);
  v293 = *(_DWORD *)(a27 + 32);
  v291 = off_24C335AF8;
  v294 = *(_QWORD *)(a27 + 36);
  if (*(char *)(a28 + 31) < 0)
    std::string::__init_copy_ctor_external(&v287, *(const std::string::value_type **)(a28 + 8), *(_QWORD *)(a28 + 16));
  else
    v287 = *(std::string *)(a28 + 8);
  v87 = *(_DWORD *)(a28 + 32);
  v286 = off_24C335B18;
  v289 = *(_QWORD *)(a28 + 36);
  v88 = *(_DWORD *)(a28 + 44);
  v288 = v87;
  v290 = v88;
  v281 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a29 + 31) < 0)
    std::string::__init_copy_ctor_external(&v282, *(const std::string::value_type **)(a29 + 8), *(_QWORD *)(a29 + 16));
  else
    v282 = *(std::string *)(a29 + 8);
  v283 = *(_DWORD *)(a29 + 32);
  v281 = &off_24C335AB8;
  v284 = *(_BYTE *)(a29 + 36);
  if (*(char *)(a29 + 63) < 0)
    std::string::__init_copy_ctor_external(&v285, *(const std::string::value_type **)(a29 + 40), *(_QWORD *)(a29 + 48));
  else
    v285 = *(std::string *)(a29 + 40);
  v276 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a30 + 31) < 0)
    std::string::__init_copy_ctor_external(&v277, *(const std::string::value_type **)(a30 + 8), *(_QWORD *)(a30 + 16));
  else
    v277 = *(std::string *)(a30 + 8);
  v278 = *(_DWORD *)(a30 + 32);
  v276 = &off_24C335AB8;
  v279 = *(_BYTE *)(a30 + 36);
  if (*(char *)(a30 + 63) < 0)
    std::string::__init_copy_ctor_external(&v280, *(const std::string::value_type **)(a30 + 40), *(_QWORD *)(a30 + 48));
  else
    v280 = *(std::string *)(a30 + 40);
  if (*(char *)(a31 + 31) < 0)
    std::string::__init_copy_ctor_external(&v272, *(const std::string::value_type **)(a31 + 8), *(_QWORD *)(a31 + 16));
  else
    v272 = *(std::string *)(a31 + 8);
  v89 = *(_DWORD *)(a31 + 32);
  v271 = off_24C335B18;
  v274 = *(_QWORD *)(a31 + 36);
  v90 = *(_DWORD *)(a31 + 44);
  v273 = v89;
  v275 = v90;
  if (*(char *)(a32 + 31) < 0)
    std::string::__init_copy_ctor_external(&v267, *(const std::string::value_type **)(a32 + 8), *(_QWORD *)(a32 + 16));
  else
    v267 = *(std::string *)(a32 + 8);
  v91 = *(_DWORD *)(a32 + 32);
  v266 = off_24C335B18;
  v269 = *(_QWORD *)(a32 + 36);
  v92 = *(_DWORD *)(a32 + 44);
  v268 = v91;
  v270 = v92;
  if (*(char *)(a33 + 31) < 0)
    std::string::__init_copy_ctor_external(&v263, *(const std::string::value_type **)(a33 + 8), *(_QWORD *)(a33 + 16));
  else
    v263 = *(std::string *)(a33 + 8);
  v264 = *(_DWORD *)(a33 + 32);
  v262 = off_24C335AF8;
  v265 = *(_QWORD *)(a33 + 36);
  if (*(char *)(a34 + 31) < 0)
    std::string::__init_copy_ctor_external(&v259, *(const std::string::value_type **)(a34 + 8), *(_QWORD *)(a34 + 16));
  else
    v259 = *(std::string *)(a34 + 8);
  v260 = *(_DWORD *)(a34 + 32);
  v258 = off_24C335AF8;
  v261 = *(_QWORD *)(a34 + 36);
  v254 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a35 + 31) < 0)
    std::string::__init_copy_ctor_external(&v255, *(const std::string::value_type **)(a35 + 8), *(_QWORD *)(a35 + 16));
  else
    v255 = *(std::string *)(a35 + 8);
  v256 = *(_DWORD *)(a35 + 32);
  v254 = off_24C335AF8;
  v257 = *(_QWORD *)(a35 + 36);
  v250 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a36 + 31) < 0)
    std::string::__init_copy_ctor_external(&v251, *(const std::string::value_type **)(a36 + 8), *(_QWORD *)(a36 + 16));
  else
    v251 = *(std::string *)(a36 + 8);
  v252 = *(_DWORD *)(a36 + 32);
  v250 = off_24C335AF8;
  v253 = *(_QWORD *)(a36 + 36);
  v246 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a37 + 31) < 0)
    std::string::__init_copy_ctor_external(&v247, *(const std::string::value_type **)(a37 + 8), *(_QWORD *)(a37 + 16));
  else
    v247 = *(std::string *)(a37 + 8);
  v248 = *(_DWORD *)(a37 + 32);
  v246 = off_24C335AF8;
  v249 = *(_QWORD *)(a37 + 36);
  v242 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a38 + 31) < 0)
    std::string::__init_copy_ctor_external(&v243, *(const std::string::value_type **)(a38 + 8), *(_QWORD *)(a38 + 16));
  else
    v243 = *(std::string *)(a38 + 8);
  v244 = *(_DWORD *)(a38 + 32);
  v242 = off_24C335AF8;
  v245 = *(_QWORD *)(a38 + 36);
  v238 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a39 + 31) < 0)
    std::string::__init_copy_ctor_external(&v239, *(const std::string::value_type **)(a39 + 8), *(_QWORD *)(a39 + 16));
  else
    v239 = *(std::string *)(a39 + 8);
  v240 = *(_DWORD *)(a39 + 32);
  v238 = off_24C335AF8;
  v241 = *(_QWORD *)(a39 + 36);
  v233 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a40 + 31) < 0)
    std::string::__init_copy_ctor_external(&v234, *(const std::string::value_type **)(a40 + 8), *(_QWORD *)(a40 + 16));
  else
    v234 = *(std::string *)(a40 + 8);
  v235 = *(_DWORD *)(a40 + 32);
  v233 = &off_24C335AB8;
  v236 = *(_BYTE *)(a40 + 36);
  if (*(char *)(a40 + 63) < 0)
    std::string::__init_copy_ctor_external(&v237, *(const std::string::value_type **)(a40 + 40), *(_QWORD *)(a40 + 48));
  else
    v237 = *(std::string *)(a40 + 40);
  v228 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a41 + 31) < 0)
    std::string::__init_copy_ctor_external(&v229, *(const std::string::value_type **)(a41 + 8), *(_QWORD *)(a41 + 16));
  else
    v229 = *(std::string *)(a41 + 8);
  v230 = *(_DWORD *)(a41 + 32);
  v228 = &off_24C335AB8;
  v231 = *(_BYTE *)(a41 + 36);
  if (*(char *)(a41 + 63) < 0)
    std::string::__init_copy_ctor_external(&v232, *(const std::string::value_type **)(a41 + 40), *(_QWORD *)(a41 + 48));
  else
    v232 = *(std::string *)(a41 + 40);
  v223 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a42 + 31) < 0)
    std::string::__init_copy_ctor_external(&v224, *(const std::string::value_type **)(a42 + 8), *(_QWORD *)(a42 + 16));
  else
    v224 = *(std::string *)(a42 + 8);
  v225 = *(_DWORD *)(a42 + 32);
  v223 = &off_24C335AB8;
  v226 = *(_BYTE *)(a42 + 36);
  if (*(char *)(a42 + 63) < 0)
    std::string::__init_copy_ctor_external(&v227, *(const std::string::value_type **)(a42 + 40), *(_QWORD *)(a42 + 48));
  else
    v227 = *(std::string *)(a42 + 40);
  v219 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a43 + 31) < 0)
    std::string::__init_copy_ctor_external(&v220, *(const std::string::value_type **)(a43 + 8), *(_QWORD *)(a43 + 16));
  else
    v220 = *(std::string *)(a43 + 8);
  v221 = *(_DWORD *)(a43 + 32);
  v219 = off_24C335AF8;
  v222 = *(_QWORD *)(a43 + 36);
  v214 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a44 + 31) < 0)
    std::string::__init_copy_ctor_external(&v215, *(const std::string::value_type **)(a44 + 8), *(_QWORD *)(a44 + 16));
  else
    v215 = *(std::string *)(a44 + 8);
  v93 = *(_DWORD *)(a44 + 32);
  v214 = off_24C335B18;
  v217 = *(_QWORD *)(a44 + 36);
  v94 = *(_DWORD *)(a44 + 44);
  v216 = v93;
  v218 = v94;
  v210 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a45 + 31) < 0)
    std::string::__init_copy_ctor_external(&v211, *(const std::string::value_type **)(a45 + 8), *(_QWORD *)(a45 + 16));
  else
    v211 = *(std::string *)(a45 + 8);
  v212 = *(_DWORD *)(a45 + 32);
  v210 = off_24C335AF8;
  v213 = *(_QWORD *)(a45 + 36);
  v205 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a46 + 31) < 0)
    std::string::__init_copy_ctor_external(&v206, *(const std::string::value_type **)(a46 + 8), *(_QWORD *)(a46 + 16));
  else
    v206 = *(std::string *)(a46 + 8);
  v207 = *(_DWORD *)(a46 + 32);
  v205 = &off_24C335AB8;
  v208 = *(_BYTE *)(a46 + 36);
  if (*(char *)(a46 + 63) < 0)
    std::string::__init_copy_ctor_external(&v209, *(const std::string::value_type **)(a46 + 40), *(_QWORD *)(a46 + 48));
  else
    v209 = *(std::string *)(a46 + 40);
  v200 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a47 + 31) < 0)
    std::string::__init_copy_ctor_external(&v201, *(const std::string::value_type **)(a47 + 8), *(_QWORD *)(a47 + 16));
  else
    v201 = *(std::string *)(a47 + 8);
  v95 = *(_DWORD *)(a47 + 32);
  v200 = off_24C335B18;
  v203 = *(_QWORD *)(a47 + 36);
  v96 = *(_DWORD *)(a47 + 44);
  v202 = v95;
  v204 = v96;
  v195 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a48 + 31) < 0)
    std::string::__init_copy_ctor_external(&v196, *(const std::string::value_type **)(a48 + 8), *(_QWORD *)(a48 + 16));
  else
    v196 = *(std::string *)(a48 + 8);
  v197 = *(_DWORD *)(a48 + 32);
  v195 = &off_24C335AB8;
  v198 = *(_BYTE *)(a48 + 36);
  if (*(char *)(a48 + 63) < 0)
    std::string::__init_copy_ctor_external(&v199, *(const std::string::value_type **)(a48 + 40), *(_QWORD *)(a48 + 48));
  else
    v199 = *(std::string *)(a48 + 40);
  v190 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a49 + 31) < 0)
    std::string::__init_copy_ctor_external(&v191, *(const std::string::value_type **)(a49 + 8), *(_QWORD *)(a49 + 16));
  else
    v191 = *(std::string *)(a49 + 8);
  v192 = *(_DWORD *)(a49 + 32);
  v190 = &off_24C335AB8;
  v193 = *(_BYTE *)(a49 + 36);
  if (*(char *)(a49 + 63) < 0)
    std::string::__init_copy_ctor_external(&v194, *(const std::string::value_type **)(a49 + 40), *(_QWORD *)(a49 + 48));
  else
    v194 = *(std::string *)(a49 + 40);
  v186 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a50 + 31) < 0)
    std::string::__init_copy_ctor_external(&v187, *(const std::string::value_type **)(a50 + 8), *(_QWORD *)(a50 + 16));
  else
    v187 = *(std::string *)(a50 + 8);
  v188 = *(_DWORD *)(a50 + 32);
  v186 = off_24C335AF8;
  v189 = *(_QWORD *)(a50 + 36);
  v181 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a51 + 31) < 0)
    std::string::__init_copy_ctor_external(&v182, *(const std::string::value_type **)(a51 + 8), *(_QWORD *)(a51 + 16));
  else
    v182 = *(std::string *)(a51 + 8);
  v97 = *(_DWORD *)(a51 + 32);
  v181 = off_24C335B18;
  v184 = *(_QWORD *)(a51 + 36);
  v98 = *(_DWORD *)(a51 + 44);
  v183 = v97;
  v185 = v98;
  v177 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a52 + 31) < 0)
    std::string::__init_copy_ctor_external(&v178, *(const std::string::value_type **)(a52 + 8), *(_QWORD *)(a52 + 16));
  else
    v178 = *(std::string *)(a52 + 8);
  v179 = *(_DWORD *)(a52 + 32);
  v177 = off_24C335AF8;
  v180 = *(_QWORD *)(a52 + 36);
  v172 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a53 + 31) < 0)
    std::string::__init_copy_ctor_external(&v173, *(const std::string::value_type **)(a53 + 8), *(_QWORD *)(a53 + 16));
  else
    v173 = *(std::string *)(a53 + 8);
  v174 = *(_DWORD *)(a53 + 32);
  v172 = &off_24C335AB8;
  v175 = *(_BYTE *)(a53 + 36);
  if (*(char *)(a53 + 63) < 0)
    std::string::__init_copy_ctor_external(&v176, *(const std::string::value_type **)(a53 + 40), *(_QWORD *)(a53 + 48));
  else
    v176 = *(std::string *)(a53 + 40);
  v168 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a54 + 31) < 0)
    std::string::__init_copy_ctor_external(&v169, *(const std::string::value_type **)(a54 + 8), *(_QWORD *)(a54 + 16));
  else
    v169 = *(std::string *)(a54 + 8);
  v170 = *(_DWORD *)(a54 + 32);
  v168 = off_24C335AF8;
  v171 = *(_QWORD *)(a54 + 36);
  v163 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a55 + 31) < 0)
    std::string::__init_copy_ctor_external(&v164, *(const std::string::value_type **)(a55 + 8), *(_QWORD *)(a55 + 16));
  else
    v164 = *(std::string *)(a55 + 8);
  v99 = *(_DWORD *)(a55 + 32);
  v163 = off_24C335B18;
  v166 = *(_QWORD *)(a55 + 36);
  v100 = *(_DWORD *)(a55 + 44);
  v165 = v99;
  v167 = v100;
  v159 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a56 + 31) < 0)
    std::string::__init_copy_ctor_external(&v160, *(const std::string::value_type **)(a56 + 8), *(_QWORD *)(a56 + 16));
  else
    v160 = *(std::string *)(a56 + 8);
  v161 = *(_DWORD *)(a56 + 32);
  v159 = off_24C335AF8;
  v162 = *(_QWORD *)(a56 + 36);
  v155 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a57 + 31) < 0)
    std::string::__init_copy_ctor_external(&v156, *(const std::string::value_type **)(a57 + 8), *(_QWORD *)(a57 + 16));
  else
    v156 = *(std::string *)(a57 + 8);
  v157 = *(_DWORD *)(a57 + 32);
  v155 = off_24C335AF8;
  v158 = *(_QWORD *)(a57 + 36);
  v151 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a58 + 31) < 0)
    std::string::__init_copy_ctor_external(&v152, *(const std::string::value_type **)(a58 + 8), *(_QWORD *)(a58 + 16));
  else
    v152 = *(std::string *)(a58 + 8);
  v153 = *(_DWORD *)(a58 + 32);
  v151 = off_24C335AF8;
  v154 = *(_QWORD *)(a58 + 36);
  v146 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a59 + 31) < 0)
    std::string::__init_copy_ctor_external(&v147, *(const std::string::value_type **)(a59 + 8), *(_QWORD *)(a59 + 16));
  else
    v147 = *(std::string *)(a59 + 8);
  v148 = *(_DWORD *)(a59 + 32);
  v146 = &off_24C335AB8;
  v149 = *(_BYTE *)(a59 + 36);
  if (*(char *)(a59 + 63) < 0)
    std::string::__init_copy_ctor_external(&v150, *(const std::string::value_type **)(a59 + 40), *(_QWORD *)(a59 + 48));
  else
    v150 = *(std::string *)(a59 + 40);
  v141 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a60 + 31) < 0)
    std::string::__init_copy_ctor_external(&v142, *(const std::string::value_type **)(a60 + 8), *(_QWORD *)(a60 + 16));
  else
    v142 = *(std::string *)(a60 + 8);
  v143 = *(_DWORD *)(a60 + 32);
  v141 = &off_24C335AB8;
  v144 = *(_BYTE *)(a60 + 36);
  if (*(char *)(a60 + 63) < 0)
    std::string::__init_copy_ctor_external(&v145, *(const std::string::value_type **)(a60 + 40), *(_QWORD *)(a60 + 48));
  else
    v145 = *(std::string *)(a60 + 40);
  v136 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a61 + 31) < 0)
    std::string::__init_copy_ctor_external(&v137, *(const std::string::value_type **)(a61 + 8), *(_QWORD *)(a61 + 16));
  else
    v137 = *(std::string *)(a61 + 8);
  v101 = *(_DWORD *)(a61 + 32);
  v136 = off_24C335B18;
  v139 = *(_QWORD *)(a61 + 36);
  v102 = *(_DWORD *)(a61 + 44);
  v138 = v101;
  v140 = v102;
  v132 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a62 + 31) < 0)
    std::string::__init_copy_ctor_external(&v133, *(const std::string::value_type **)(a62 + 8), *(_QWORD *)(a62 + 16));
  else
    v133 = *(std::string *)(a62 + 8);
  v134 = *(_DWORD *)(a62 + 32);
  v132 = off_24C335AF8;
  v135 = *(_QWORD *)(a62 + 36);
  if (*(char *)(a63 + 31) < 0)
    std::string::__init_copy_ctor_external(&v129, *(const std::string::value_type **)(a63 + 8), *(_QWORD *)(a63 + 16));
  else
    v129 = *(std::string *)(a63 + 8);
  v130 = *(_DWORD *)(a63 + 32);
  v131 = *(_QWORD *)(a63 + 36);
  v667 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v668, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
  else
    v668 = __s;
  v667 = off_24C335B18;
  v670 = v396;
  v669 = v395;
  v671 = v397;
  v663 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v390.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v664, v390.__r_.__value_.__l.__data_, v390.__r_.__value_.__l.__size_);
  else
    v664 = v390;
  v665 = v391;
  v663 = off_24C335AF8;
  v666 = v392;
  v654 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v381.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v655, v381.__r_.__value_.__l.__data_, v381.__r_.__value_.__l.__size_);
  else
    v655 = v381;
  v656 = v382;
  v654 = &off_24C335A98;
  v657 = v383;
  v103 = v387;
  v104 = v385;
  v658 = &off_24C331510;
  v659 = v385;
  v660 = v385;
  if (v385)
    v105 = (void *)operator new[]();
  else
    v105 = 0;
  v661 = v105;
  v662 = 1;
  if (v103)
    memcpy(v105, v103, v104);
  else
    bzero(v105, v104);
  v650 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v377.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v651, v377.__r_.__value_.__l.__data_, v377.__r_.__value_.__l.__size_);
  else
    v651 = v377;
  v652 = v378;
  v650 = off_24C335AF8;
  v653 = v379;
  v646 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v373.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v647, v373.__r_.__value_.__l.__data_, v373.__r_.__value_.__l.__size_);
  else
    v647 = v373;
  v648 = v374;
  v646 = off_24C335AF8;
  v649 = v375;
  v642 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v369.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v643, v369.__r_.__value_.__l.__data_, v369.__r_.__value_.__l.__size_);
  else
    v643 = v369;
  v644 = v370;
  v642 = off_24C335AF8;
  v645 = v371;
  v638 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v365.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v639, v365.__r_.__value_.__l.__data_, v365.__r_.__value_.__l.__size_);
  else
    v639 = v365;
  v640 = v366;
  v638 = off_24C335AF8;
  v641 = v367;
  v634 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v361.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v635, v361.__r_.__value_.__l.__data_, v361.__r_.__value_.__l.__size_);
  else
    v635 = v361;
  v636 = v362;
  v634 = off_24C335AF8;
  v637 = v363;
  v630 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v357.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v631, v357.__r_.__value_.__l.__data_, v357.__r_.__value_.__l.__size_);
  else
    v631 = v357;
  v632 = v358;
  v630 = off_24C335AF8;
  v633 = v359;
  v625 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v352.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v626, v352.__r_.__value_.__l.__data_, v352.__r_.__value_.__l.__size_);
  else
    v626 = v352;
  v627 = v353;
  v625 = &off_24C335AB8;
  v628 = v354;
  if (SHIBYTE(v355.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v629, v355.__r_.__value_.__l.__data_, v355.__r_.__value_.__l.__size_);
  else
    v629 = v355;
  v621 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v348.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v622, v348.__r_.__value_.__l.__data_, v348.__r_.__value_.__l.__size_);
  else
    v622 = v348;
  v623 = v349;
  v621 = off_24C335AF8;
  v624 = v350;
  v617 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v344.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v618, v344.__r_.__value_.__l.__data_, v344.__r_.__value_.__l.__size_);
  else
    v618 = v344;
  v619 = v345;
  v617 = off_24C335AF8;
  v620 = v346;
  v613 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v340.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v614, v340.__r_.__value_.__l.__data_, v340.__r_.__value_.__l.__size_);
  else
    v614 = v340;
  v615 = v341;
  v613 = off_24C335AF8;
  v616 = v342;
  v609 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v336.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v610, v336.__r_.__value_.__l.__data_, v336.__r_.__value_.__l.__size_);
  else
    v610 = v336;
  v611 = v337;
  v609 = off_24C335AF8;
  v612 = v338;
  v605 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v332.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v606, v332.__r_.__value_.__l.__data_, v332.__r_.__value_.__l.__size_);
  else
    v606 = v332;
  v607 = v333;
  v605 = off_24C335AF8;
  v608 = v334;
  v600 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v327.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v601, v327.__r_.__value_.__l.__data_, v327.__r_.__value_.__l.__size_);
  else
    v601 = v327;
  v600 = off_24C335B18;
  v603 = v329;
  v602 = v328;
  v604 = v330;
  v595 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v322.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v596, v322.__r_.__value_.__l.__data_, v322.__r_.__value_.__l.__size_);
  else
    v596 = v322;
  v595 = off_24C335B18;
  v598 = v324;
  v597 = v323;
  v599 = v325;
  v591 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v318.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v592, v318.__r_.__value_.__l.__data_, v318.__r_.__value_.__l.__size_);
  else
    v592 = v318;
  v593 = v319;
  v591 = off_24C335AF8;
  v594 = v320;
  v586 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v313.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v587, v313.__r_.__value_.__l.__data_, v313.__r_.__value_.__l.__size_);
  else
    v587 = v313;
  v588 = v314;
  v586 = &off_24C335AB8;
  v589 = v315;
  if (SHIBYTE(v316.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v590, v316.__r_.__value_.__l.__data_, v316.__r_.__value_.__l.__size_);
  else
    v590 = v316;
  v581 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v308.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v582, v308.__r_.__value_.__l.__data_, v308.__r_.__value_.__l.__size_);
  else
    v582 = v308;
  v583 = v309;
  v581 = &off_24C335AB8;
  v584 = v310;
  if (SHIBYTE(v311.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v585, v311.__r_.__value_.__l.__data_, v311.__r_.__value_.__l.__size_);
  else
    v585 = v311;
  v577 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v304.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v578, v304.__r_.__value_.__l.__data_, v304.__r_.__value_.__l.__size_);
  else
    v578 = v304;
  v579 = v305;
  v577 = off_24C335AF8;
  v580 = v306;
  v573 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v300.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v574, v300.__r_.__value_.__l.__data_, v300.__r_.__value_.__l.__size_);
  else
    v574 = v300;
  v575 = v301;
  v573 = off_24C335AF8;
  v576 = v302;
  v569 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v296.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v570, v296.__r_.__value_.__l.__data_, v296.__r_.__value_.__l.__size_);
  else
    v570 = v296;
  v571 = v297;
  v569 = off_24C335AF8;
  v572 = v298;
  v565 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v292.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v566, v292.__r_.__value_.__l.__data_, v292.__r_.__value_.__l.__size_);
  else
    v566 = v292;
  v567 = v293;
  v565 = off_24C335AF8;
  v568 = v294;
  v560 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v287.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v561, v287.__r_.__value_.__l.__data_, v287.__r_.__value_.__l.__size_);
  else
    v561 = v287;
  v560 = off_24C335B18;
  v563 = v289;
  v562 = v288;
  v564 = v290;
  v555 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v282.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v556, v282.__r_.__value_.__l.__data_, v282.__r_.__value_.__l.__size_);
  else
    v556 = v282;
  v557 = v283;
  v555 = &off_24C335AB8;
  v558 = v284;
  if (SHIBYTE(v285.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v559, v285.__r_.__value_.__l.__data_, v285.__r_.__value_.__l.__size_);
  else
    v559 = v285;
  v550 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v277.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v551, v277.__r_.__value_.__l.__data_, v277.__r_.__value_.__l.__size_);
  else
    v551 = v277;
  v552 = v278;
  v550 = &off_24C335AB8;
  v553 = v279;
  if (SHIBYTE(v280.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v554, v280.__r_.__value_.__l.__data_, v280.__r_.__value_.__l.__size_);
  else
    v554 = v280;
  v545 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v272.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v546, v272.__r_.__value_.__l.__data_, v272.__r_.__value_.__l.__size_);
  else
    v546 = v272;
  v545 = off_24C335B18;
  v548 = v274;
  v547 = v273;
  v549 = v275;
  v540 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v267.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v541, v267.__r_.__value_.__l.__data_, v267.__r_.__value_.__l.__size_);
  else
    v541 = v267;
  v540 = off_24C335B18;
  v543 = v269;
  v542 = v268;
  v544 = v270;
  v536 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v263.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v537, v263.__r_.__value_.__l.__data_, v263.__r_.__value_.__l.__size_);
  else
    v537 = v263;
  v538 = v264;
  v536 = off_24C335AF8;
  v539 = v265;
  v532 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v259.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v533, v259.__r_.__value_.__l.__data_, v259.__r_.__value_.__l.__size_);
  else
    v533 = v259;
  v534 = v260;
  v532 = off_24C335AF8;
  v535 = v261;
  v528 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v255.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v529, v255.__r_.__value_.__l.__data_, v255.__r_.__value_.__l.__size_);
  else
    v529 = v255;
  v530 = v256;
  v528 = off_24C335AF8;
  v531 = v257;
  v524 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v251.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v525, v251.__r_.__value_.__l.__data_, v251.__r_.__value_.__l.__size_);
  else
    v525 = v251;
  v526 = v252;
  v524 = off_24C335AF8;
  v527 = v253;
  v520 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v247.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v521, v247.__r_.__value_.__l.__data_, v247.__r_.__value_.__l.__size_);
  else
    v521 = v247;
  v522 = v248;
  v520 = off_24C335AF8;
  v523 = v249;
  v516 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v243.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v517, v243.__r_.__value_.__l.__data_, v243.__r_.__value_.__l.__size_);
  else
    v517 = v243;
  v518 = v244;
  v516 = off_24C335AF8;
  v519 = v245;
  v512 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v239.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v513, v239.__r_.__value_.__l.__data_, v239.__r_.__value_.__l.__size_);
  else
    v513 = v239;
  v514 = v240;
  v512 = off_24C335AF8;
  v515 = v241;
  v507 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v234.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v508, v234.__r_.__value_.__l.__data_, v234.__r_.__value_.__l.__size_);
  else
    v508 = v234;
  v509 = v235;
  v507 = &off_24C335AB8;
  v510 = v236;
  if (SHIBYTE(v237.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v511, v237.__r_.__value_.__l.__data_, v237.__r_.__value_.__l.__size_);
  else
    v511 = v237;
  v502 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v229.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v503, v229.__r_.__value_.__l.__data_, v229.__r_.__value_.__l.__size_);
  else
    v503 = v229;
  v504 = v230;
  v502 = &off_24C335AB8;
  v505 = v231;
  if (SHIBYTE(v232.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v506, v232.__r_.__value_.__l.__data_, v232.__r_.__value_.__l.__size_);
  else
    v506 = v232;
  v497 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v224.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v498, v224.__r_.__value_.__l.__data_, v224.__r_.__value_.__l.__size_);
  else
    v498 = v224;
  v499 = v225;
  v497 = &off_24C335AB8;
  v500 = v226;
  if (SHIBYTE(v227.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v501, v227.__r_.__value_.__l.__data_, v227.__r_.__value_.__l.__size_);
  else
    v501 = v227;
  v493 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v220.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v494, v220.__r_.__value_.__l.__data_, v220.__r_.__value_.__l.__size_);
  else
    v494 = v220;
  v495 = v221;
  v493 = off_24C335AF8;
  v496 = v222;
  v488 = (uint64_t (**)())off_24C335D90;
  v126 = SHIBYTE(v215.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v215.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v489, v215.__r_.__value_.__l.__data_, v215.__r_.__value_.__l.__size_);
  else
    v489 = v215;
  v488 = off_24C335B18;
  v491 = v217;
  v490 = v216;
  v492 = v218;
  v484 = (uint64_t (**)())off_24C335D90;
  v106 = SHIBYTE(v211.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v211.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v485, v211.__r_.__value_.__l.__data_, v211.__r_.__value_.__l.__size_);
  else
    v485 = v211;
  v486 = v212;
  v484 = off_24C335AF8;
  v487 = v213;
  v479 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v206.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v480, v206.__r_.__value_.__l.__data_, v206.__r_.__value_.__l.__size_);
  else
    v480 = v206;
  v481 = v207;
  v479 = &off_24C335AB8;
  v482 = v208;
  if (SHIBYTE(v209.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v483, v209.__r_.__value_.__l.__data_, v209.__r_.__value_.__l.__size_);
  else
    v483 = v209;
  v474 = (uint64_t (**)())off_24C335D90;
  v127 = SHIBYTE(v201.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v201.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v475, v201.__r_.__value_.__l.__data_, v201.__r_.__value_.__l.__size_);
  else
    v475 = v201;
  v474 = off_24C335B18;
  v477 = v203;
  v476 = v202;
  v478 = v204;
  v469 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v196.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v470, v196.__r_.__value_.__l.__data_, v196.__r_.__value_.__l.__size_);
  else
    v470 = v196;
  v471 = v197;
  v469 = &off_24C335AB8;
  v472 = v198;
  if (SHIBYTE(v199.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v473, v199.__r_.__value_.__l.__data_, v199.__r_.__value_.__l.__size_);
  else
    v473 = v199;
  v464 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v191.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v465, v191.__r_.__value_.__l.__data_, v191.__r_.__value_.__l.__size_);
  else
    v465 = v191;
  v466 = v192;
  v464 = &off_24C335AB8;
  v467 = v193;
  if (SHIBYTE(v194.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v468, v194.__r_.__value_.__l.__data_, v194.__r_.__value_.__l.__size_);
  else
    v468 = v194;
  v460 = (uint64_t (**)())off_24C335D90;
  v125 = SHIBYTE(v187.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v187.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v461, v187.__r_.__value_.__l.__data_, v187.__r_.__value_.__l.__size_);
  else
    v461 = v187;
  v462 = v188;
  v460 = off_24C335AF8;
  v463 = v189;
  v455 = (uint64_t (**)())off_24C335D90;
  v124 = SHIBYTE(v182.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v182.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v456, v182.__r_.__value_.__l.__data_, v182.__r_.__value_.__l.__size_);
  else
    v456 = v182;
  v455 = off_24C335B18;
  v458 = v184;
  v457 = v183;
  v459 = v185;
  v451 = (uint64_t (**)())off_24C335D90;
  v123 = SHIBYTE(v178.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v178.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v452, v178.__r_.__value_.__l.__data_, v178.__r_.__value_.__l.__size_);
  else
    v452 = v178;
  v453 = v179;
  v451 = off_24C335AF8;
  v454 = v180;
  v446 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v173.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v447, v173.__r_.__value_.__l.__data_, v173.__r_.__value_.__l.__size_);
  else
    v447 = v173;
  v448 = v174;
  v446 = &off_24C335AB8;
  v449 = v175;
  if (SHIBYTE(v176.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v450, v176.__r_.__value_.__l.__data_, v176.__r_.__value_.__l.__size_);
  else
    v450 = v176;
  v442 = (uint64_t (**)())off_24C335D90;
  v107 = SHIBYTE(v169.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v169.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v443, v169.__r_.__value_.__l.__data_, v169.__r_.__value_.__l.__size_);
  else
    v443 = v169;
  v444 = v170;
  v442 = off_24C335AF8;
  v445 = v171;
  v437 = (uint64_t (**)())off_24C335D90;
  v122 = SHIBYTE(v164.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v164.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v438, v164.__r_.__value_.__l.__data_, v164.__r_.__value_.__l.__size_);
  else
    v438 = v164;
  v437 = off_24C335B18;
  v440 = v166;
  v439 = v165;
  v441 = v167;
  v433 = (uint64_t (**)())off_24C335D90;
  v108 = SHIBYTE(v160.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v160.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v434, v160.__r_.__value_.__l.__data_, v160.__r_.__value_.__l.__size_);
  else
    v434 = v160;
  v435 = v161;
  v433 = off_24C335AF8;
  v436 = v162;
  v429 = (uint64_t (**)())off_24C335D90;
  v109 = SHIBYTE(v156.__r_.__value_.__r.__words[2]);
  v121 = v107;
  if (SHIBYTE(v156.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v430, v156.__r_.__value_.__l.__data_, v156.__r_.__value_.__l.__size_);
  else
    v430 = v156;
  v431 = v157;
  v429 = off_24C335AF8;
  v432 = v158;
  v425 = (uint64_t (**)())off_24C335D90;
  v110 = SHIBYTE(v152.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v152.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v426, v152.__r_.__value_.__l.__data_, v152.__r_.__value_.__l.__size_);
  else
    v426 = v152;
  v427 = v153;
  v425 = off_24C335AF8;
  v428 = v154;
  v420 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v147.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v421, v147.__r_.__value_.__l.__data_, v147.__r_.__value_.__l.__size_);
  else
    v421 = v147;
  v422 = v148;
  v420 = &off_24C335AB8;
  v423 = v149;
  if (SHIBYTE(v150.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v424, v150.__r_.__value_.__l.__data_, v150.__r_.__value_.__l.__size_);
  else
    v424 = v150;
  v415 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v142.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v416, v142.__r_.__value_.__l.__data_, v142.__r_.__value_.__l.__size_);
  else
    v416 = v142;
  v417 = v143;
  v415 = &off_24C335AB8;
  v418 = v144;
  if (SHIBYTE(v145.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v419, v145.__r_.__value_.__l.__data_, v145.__r_.__value_.__l.__size_);
  else
    v419 = v145;
  v410 = (uint64_t (**)())off_24C335D90;
  v111 = SHIBYTE(v137.__r_.__value_.__r.__words[2]);
  v119 = v106;
  if (SHIBYTE(v137.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v411, v137.__r_.__value_.__l.__data_, v137.__r_.__value_.__l.__size_);
  else
    v411 = v137;
  v410 = off_24C335B18;
  v413 = v139;
  v412 = v138;
  v414 = v140;
  v406 = (uint64_t (**)())off_24C335D90;
  v112 = SHIBYTE(v133.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v133.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v407, v133.__r_.__value_.__l.__data_, v133.__r_.__value_.__l.__size_);
  else
    v407 = v133;
  v408 = v134;
  v406 = off_24C335AF8;
  v409 = v135;
  v402 = (uint64_t (**)())off_24C335D90;
  v113 = SHIBYTE(v129.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v129.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&__p, v129.__r_.__value_.__l.__data_, v129.__r_.__value_.__l.__size_);
  else
    __p = v129;
  v404 = v130;
  v402 = off_24C335AF8;
  v405 = v131;
  mediaplatform::DatabaseColumnTuple<27ul,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::DatabaseColumnTuple(v128, (uint64_t)&v667, (uint64_t)&v663, (uint64_t)&v654, (uint64_t)&v650, (uint64_t)&v646, (uint64_t)&v642, (uint64_t)&v638, (uint64_t)&v634, (uint64_t)&v630, (uint64_t)&v625, (uint64_t)&v621, (uint64_t)&v617, (uint64_t)&v613, (uint64_t)&v609, (uint64_t)&v605, (uint64_t)&v600, (uint64_t)&v595, (uint64_t)&v591,
    (uint64_t)&v586,
    (uint64_t)&v581,
    (uint64_t)&v577,
    (uint64_t)&v573,
    (uint64_t)&v569,
    (uint64_t)&v565,
    (uint64_t)&v560,
    (uint64_t)&v555,
    (uint64_t)&v550,
    (uint64_t)&v545,
    (uint64_t)&v540,
    (uint64_t)&v536,
    (uint64_t)&v532,
    (uint64_t)&v528,
    (uint64_t)&v524,
    (uint64_t)&v520,
    (uint64_t)&v516,
    (uint64_t)&v512,
    (uint64_t)&v507,
    (uint64_t)&v502,
    (uint64_t)&v497,
    (uint64_t)&v493,
    (uint64_t)&v488,
    (uint64_t)&v484,
    (uint64_t)&v479,
    (uint64_t)&v474,
    (uint64_t)&v469,
    (uint64_t)&v464,
    (uint64_t)&v460,
    (uint64_t)&v455,
    (uint64_t)&v451,
    (uint64_t)&v446,
    (uint64_t)&v442,
    (uint64_t)&v437,
    (uint64_t)&v433,
    (uint64_t)&v429,
    (uint64_t)&v425,
    (uint64_t)&v420,
    (uint64_t)&v415,
    (uint64_t)&v410,
    (uint64_t)&v406,
    (uint64_t)&v402);
  v402 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v406 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v407.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v407.__r_.__value_.__l.__data_);
  v410 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v411.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v411.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v415);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v420);
  v425 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v426.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v426.__r_.__value_.__l.__data_);
  v429 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v430.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v430.__r_.__value_.__l.__data_);
  v433 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v434.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v434.__r_.__value_.__l.__data_);
  v437 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v438.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v438.__r_.__value_.__l.__data_);
  v442 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v443.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v443.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v446);
  v451 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v452.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v452.__r_.__value_.__l.__data_);
  v455 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v456.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v456.__r_.__value_.__l.__data_);
  v460 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v461.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v461.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v464);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v469);
  v474 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v475.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v475.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v479);
  v484 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v485.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v485.__r_.__value_.__l.__data_);
  v488 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v489.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v489.__r_.__value_.__l.__data_);
  v493 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v494.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v494.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v497);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v502);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v507);
  v512 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v513.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v513.__r_.__value_.__l.__data_);
  v516 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v517.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v517.__r_.__value_.__l.__data_);
  v520 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v521.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v521.__r_.__value_.__l.__data_);
  v524 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v525.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v525.__r_.__value_.__l.__data_);
  v528 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v529.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v529.__r_.__value_.__l.__data_);
  v532 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v533.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v533.__r_.__value_.__l.__data_);
  v536 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v537.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v537.__r_.__value_.__l.__data_);
  v540 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v541.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v541.__r_.__value_.__l.__data_);
  v545 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v546.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v546.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v550);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v555);
  v560 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v561.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v561.__r_.__value_.__l.__data_);
  v565 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v566.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v566.__r_.__value_.__l.__data_);
  v569 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v570.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v570.__r_.__value_.__l.__data_);
  v573 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v574.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v574.__r_.__value_.__l.__data_);
  v577 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v578.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v578.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v581);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v586);
  v591 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v592.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v592.__r_.__value_.__l.__data_);
  v595 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v596.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v596.__r_.__value_.__l.__data_);
  v600 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v601.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v601.__r_.__value_.__l.__data_);
  v605 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v606.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v606.__r_.__value_.__l.__data_);
  v609 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v610.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v610.__r_.__value_.__l.__data_);
  v613 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v614.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v614.__r_.__value_.__l.__data_);
  v617 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v618.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v618.__r_.__value_.__l.__data_);
  v621 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v622.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v622.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v625);
  v630 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v631.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v631.__r_.__value_.__l.__data_);
  v634 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v635.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v635.__r_.__value_.__l.__data_);
  v638 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v639.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v639.__r_.__value_.__l.__data_);
  v642 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v643.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v643.__r_.__value_.__l.__data_);
  v646 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v647.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v647.__r_.__value_.__l.__data_);
  v650 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v651.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v651.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<mediaplatform::Data>::~DatabaseColumn((uint64_t)&v654);
  v663 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v664.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v664.__r_.__value_.__l.__data_);
  v667 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v668.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v668.__r_.__value_.__l.__data_);
  *(_QWORD *)(v128 + 3136) = off_24C335D90;
  v114 = (std::string *)(v128 + 3144);
  v115 = SHIBYTE(v399.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v399.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v114, v399.__r_.__value_.__l.__data_, v399.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v114->__r_.__value_.__l.__data_ = *(_OWORD *)&v399.__r_.__value_.__l.__data_;
    *(_QWORD *)(v128 + 3160) = *((_QWORD *)&v399.__r_.__value_.__l + 2);
  }
  *(_DWORD *)(v128 + 3168) = v400;
  *(_QWORD *)(v128 + 3136) = off_24C335AF8;
  *(_QWORD *)(v128 + 3172) = v401;
  if (v113 < 0)
    operator delete(v129.__r_.__value_.__l.__data_);
  v132 = (uint64_t (**)())off_24C335D90;
  if (v112 < 0)
    operator delete(v133.__r_.__value_.__l.__data_);
  v136 = (uint64_t (**)())off_24C335D90;
  if (v111 < 0)
    operator delete(v137.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v141);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v146);
  v151 = (uint64_t (**)())off_24C335D90;
  if (v110 < 0)
    operator delete(v152.__r_.__value_.__l.__data_);
  v155 = (uint64_t (**)())off_24C335D90;
  if (v109 < 0)
    operator delete(v156.__r_.__value_.__l.__data_);
  v159 = (uint64_t (**)())off_24C335D90;
  if (v108 < 0)
    operator delete(v160.__r_.__value_.__l.__data_);
  v163 = (uint64_t (**)())off_24C335D90;
  if (v122 < 0)
    operator delete(v164.__r_.__value_.__l.__data_);
  v168 = (uint64_t (**)())off_24C335D90;
  if (v121 < 0)
    operator delete(v169.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v172);
  v177 = (uint64_t (**)())off_24C335D90;
  if (v123 < 0)
    operator delete(v178.__r_.__value_.__l.__data_);
  v181 = (uint64_t (**)())off_24C335D90;
  if (v124 < 0)
    operator delete(v182.__r_.__value_.__l.__data_);
  v186 = (uint64_t (**)())off_24C335D90;
  if (v125 < 0)
    operator delete(v187.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v190);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v195);
  v200 = (uint64_t (**)())off_24C335D90;
  if (v127 < 0)
    operator delete(v201.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v205);
  v210 = (uint64_t (**)())off_24C335D90;
  if (v119 < 0)
    operator delete(v211.__r_.__value_.__l.__data_);
  v214 = (uint64_t (**)())off_24C335D90;
  if (v126 < 0)
    operator delete(v215.__r_.__value_.__l.__data_);
  v219 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v220.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v220.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v223);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v228);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v233);
  v238 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v239.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v239.__r_.__value_.__l.__data_);
  v242 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v243.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v243.__r_.__value_.__l.__data_);
  v246 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v247.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v247.__r_.__value_.__l.__data_);
  v250 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v251.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v251.__r_.__value_.__l.__data_);
  v254 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v255.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v255.__r_.__value_.__l.__data_);
  v258 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v259.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v259.__r_.__value_.__l.__data_);
  v262 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v263.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v263.__r_.__value_.__l.__data_);
  v266 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v267.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v267.__r_.__value_.__l.__data_);
  v271 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v272.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v272.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v276);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v281);
  if (SHIBYTE(v287.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v287.__r_.__value_.__l.__data_);
  if (SHIBYTE(v292.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v292.__r_.__value_.__l.__data_);
  if (SHIBYTE(v296.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v296.__r_.__value_.__l.__data_);
  if (SHIBYTE(v300.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v300.__r_.__value_.__l.__data_);
  if (SHIBYTE(v304.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v304.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v307);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v312);
  if (SHIBYTE(v318.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v318.__r_.__value_.__l.__data_);
  if (SHIBYTE(v322.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v322.__r_.__value_.__l.__data_);
  if (SHIBYTE(v327.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v327.__r_.__value_.__l.__data_);
  if (SHIBYTE(v332.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v332.__r_.__value_.__l.__data_);
  if (SHIBYTE(v336.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v336.__r_.__value_.__l.__data_);
  if (SHIBYTE(v340.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v340.__r_.__value_.__l.__data_);
  if (SHIBYTE(v344.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v344.__r_.__value_.__l.__data_);
  if (SHIBYTE(v348.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v348.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v351);
  if (SHIBYTE(v357.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v357.__r_.__value_.__l.__data_);
  if (SHIBYTE(v361.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v361.__r_.__value_.__l.__data_);
  if (SHIBYTE(v365.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v365.__r_.__value_.__l.__data_);
  if (SHIBYTE(v369.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v369.__r_.__value_.__l.__data_);
  if (SHIBYTE(v373.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v373.__r_.__value_.__l.__data_);
  if (SHIBYTE(v377.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v377.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<mediaplatform::Data>::~DatabaseColumn((uint64_t)&v380);
  if (SHIBYTE(v390.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v390.__r_.__value_.__l.__data_);
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__s.__r_.__value_.__l.__data_);
    if ((v115 & 0x80000000) == 0)
      goto LABEL_643;
  }
  else if ((v115 & 0x80000000) == 0)
  {
    goto LABEL_643;
  }
  operator delete(v399.__r_.__value_.__l.__data_);
LABEL_643:
  *(_QWORD *)(v128 + 3184) = off_24C335D90;
  v116 = (std::string *)(v128 + 3192);
  if (*(char *)(v120 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v116, *(const std::string::value_type **)(v120 + 8), *(_QWORD *)(v120 + 16));
  }
  else
  {
    v117 = *(_OWORD *)(v120 + 8);
    *(_QWORD *)(v128 + 3208) = *(_QWORD *)(v120 + 24);
    *(_OWORD *)&v116->__r_.__value_.__l.__data_ = v117;
  }
  result = v128;
  *(_DWORD *)(v128 + 3216) = *(_DWORD *)(v120 + 32);
  *(_QWORD *)(v128 + 3184) = off_24C335AF8;
  *(_QWORD *)(v128 + 3220) = *(_QWORD *)(v120 + 36);
  return result;
}

void sub_20A7B4C0C(_Unwind_Exception *a1)
{
  mediaplatform::DatabaseColumnTuple<26ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(STACK[0x400]);
  _Unwind_Resume(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<25ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(uint64_t a1)
{
  *(_QWORD *)(a1 + 3184) = off_24C335D90;
  if (*(char *)(a1 + 3215) < 0)
    operator delete(*(void **)(a1 + 3192));
  *(_QWORD *)(a1 + 3136) = off_24C335D90;
  if (*(char *)(a1 + 3167) < 0)
    operator delete(*(void **)(a1 + 3144));
  *(_QWORD *)(a1 + 3088) = off_24C335D90;
  if (*(char *)(a1 + 3119) < 0)
    operator delete(*(void **)(a1 + 3096));
  return mediaplatform::DatabaseColumnTuple<28ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<26ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(uint64_t a1)
{
  *(_QWORD *)(a1 + 3136) = off_24C335D90;
  if (*(char *)(a1 + 3167) < 0)
    operator delete(*(void **)(a1 + 3144));
  *(_QWORD *)(a1 + 3088) = off_24C335D90;
  if (*(char *)(a1 + 3119) < 0)
    operator delete(*(void **)(a1 + 3096));
  return mediaplatform::DatabaseColumnTuple<28ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<27ul,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::DatabaseColumnTuple(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61)
{
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  const void *v75;
  size_t v76;
  void *v77;
  int v78;
  int v79;
  int v80;
  int v81;
  int v82;
  int v83;
  int v84;
  int v85;
  int v86;
  int v87;
  int v88;
  int v89;
  int v90;
  int v91;
  int v92;
  int v93;
  int v94;
  int v95;
  int v96;
  int v97;
  const void *v98;
  size_t v99;
  void *v100;
  int v101;
  int v102;
  int v103;
  int v104;
  int v105;
  int v106;
  int v107;
  int v108;
  int v109;
  int v110;
  int v111;
  std::string *v112;
  int v113;
  std::string *v114;
  __int128 v115;
  uint64_t result;
  uint64_t v117;
  uint64_t v118;
  int v119;
  int v120;
  int v121;
  int v122;
  int v123;
  int v124;
  int v125;
  int v126;
  uint64_t v127;
  std::string v128;
  int v129;
  uint64_t v130;
  uint64_t (**v131)();
  std::string v132;
  int v133;
  uint64_t v134;
  uint64_t (**v135)();
  std::string v136;
  int v137;
  uint64_t v138;
  int v139;
  uint64_t (**v140)();
  std::string v141;
  int v142;
  char v143;
  std::string v144;
  uint64_t (**v145)();
  std::string v146;
  int v147;
  char v148;
  std::string v149;
  uint64_t (**v150)();
  std::string v151;
  int v152;
  uint64_t v153;
  uint64_t (**v154)();
  std::string v155;
  int v156;
  uint64_t v157;
  uint64_t (**v158)();
  std::string v159;
  int v160;
  uint64_t v161;
  uint64_t (**v162)();
  std::string v163;
  int v164;
  uint64_t v165;
  int v166;
  uint64_t (**v167)();
  std::string v168;
  int v169;
  uint64_t v170;
  uint64_t (**v171)();
  std::string v172;
  int v173;
  char v174;
  std::string v175;
  uint64_t (**v176)();
  std::string v177;
  int v178;
  uint64_t v179;
  uint64_t (**v180)();
  std::string v181;
  int v182;
  uint64_t v183;
  int v184;
  uint64_t (**v185)();
  std::string v186;
  int v187;
  uint64_t v188;
  uint64_t (**v189)();
  std::string v190;
  int v191;
  char v192;
  std::string v193;
  uint64_t (**v194)();
  std::string v195;
  int v196;
  char v197;
  std::string v198;
  uint64_t (**v199)();
  std::string v200;
  int v201;
  uint64_t v202;
  int v203;
  uint64_t (**v204)();
  std::string v205;
  int v206;
  char v207;
  std::string v208;
  uint64_t (**v209)();
  std::string v210;
  int v211;
  uint64_t v212;
  uint64_t (**v213)();
  std::string v214;
  int v215;
  uint64_t v216;
  int v217;
  uint64_t (**v218)();
  std::string v219;
  int v220;
  uint64_t v221;
  uint64_t (**v222)();
  std::string v223;
  int v224;
  char v225;
  std::string v226;
  uint64_t (**v227)();
  std::string v228;
  int v229;
  char v230;
  std::string v231;
  uint64_t (**v232)();
  std::string v233;
  int v234;
  char v235;
  std::string v236;
  uint64_t (**v237)();
  std::string v238;
  int v239;
  uint64_t v240;
  uint64_t (**v241)();
  std::string v242;
  int v243;
  uint64_t v244;
  uint64_t (**v245)();
  std::string v246;
  int v247;
  uint64_t v248;
  uint64_t (**v249)();
  std::string v250;
  int v251;
  uint64_t v252;
  uint64_t (**v253)();
  std::string v254;
  int v255;
  uint64_t v256;
  uint64_t (**v257)();
  std::string v258;
  int v259;
  uint64_t v260;
  uint64_t (**v261)();
  std::string v262;
  int v263;
  uint64_t v264;
  uint64_t (**v265)();
  std::string v266;
  int v267;
  uint64_t v268;
  int v269;
  uint64_t (**v270)();
  std::string v271;
  int v272;
  uint64_t v273;
  int v274;
  uint64_t (**v275)();
  std::string v276;
  int v277;
  char v278;
  std::string v279;
  uint64_t (**v280)();
  std::string v281;
  int v282;
  char v283;
  std::string v284;
  uint64_t (**v285)();
  std::string v286;
  int v287;
  uint64_t v288;
  int v289;
  uint64_t (**v290)();
  std::string v291;
  int v292;
  uint64_t v293;
  uint64_t (**v294)();
  std::string v295;
  int v296;
  uint64_t v297;
  uint64_t (**v298)();
  std::string v299;
  int v300;
  uint64_t v301;
  uint64_t (**v302)();
  std::string v303;
  int v304;
  uint64_t v305;
  uint64_t (**v306)();
  std::string v307;
  int v308;
  char v309;
  std::string v310;
  uint64_t (**v311)();
  std::string v312;
  int v313;
  char v314;
  std::string v315;
  uint64_t (**v316)();
  std::string v317;
  int v318;
  uint64_t v319;
  uint64_t (**v320)();
  std::string v321;
  int v322;
  uint64_t v323;
  int v324;
  uint64_t (**v325)();
  std::string v326;
  int v327;
  uint64_t v328;
  int v329;
  uint64_t (**v330)();
  std::string v331;
  int v332;
  uint64_t v333;
  uint64_t (**v334)();
  std::string v335;
  int v336;
  uint64_t v337;
  uint64_t (**v338)();
  std::string v339;
  int v340;
  uint64_t v341;
  uint64_t (**v342)();
  std::string v343;
  int v344;
  uint64_t v345;
  uint64_t (**v346)();
  std::string v347;
  int v348;
  uint64_t v349;
  uint64_t (**v350)();
  std::string v351;
  int v352;
  char v353;
  std::string v354;
  uint64_t (**v355)();
  std::string v356;
  int v357;
  uint64_t v358;
  uint64_t (**v359)();
  std::string v360;
  int v361;
  uint64_t v362;
  uint64_t (**v363)();
  std::string v364;
  int v365;
  uint64_t v366;
  uint64_t (**v367)();
  std::string v368;
  int v369;
  uint64_t v370;
  uint64_t (**v371)();
  std::string v372;
  int v373;
  uint64_t v374;
  uint64_t (**v375)();
  std::string v376;
  int v377;
  uint64_t v378;
  uint64_t (**v379)();
  std::string __s;
  int v381;
  char v382;
  void (**v383)(mediaplatform::Data *__hidden);
  size_t v384;
  size_t v385;
  const void *v386;
  char v387;
  uint64_t (**v388)();
  std::string v389;
  int v390;
  uint64_t v391;
  uint64_t (**v392)();
  std::string __p;
  int v394;
  uint64_t v395;
  uint64_t (**v396)();
  std::string v397;
  int v398;
  uint64_t v399;
  uint64_t (**v400)();
  std::string v401;
  int v402;
  uint64_t v403;
  int v404;
  uint64_t (**v405)();
  std::string v406;
  int v407;
  char v408;
  std::string v409;
  uint64_t (**v410)();
  std::string v411;
  int v412;
  char v413;
  std::string v414;
  uint64_t (**v415)();
  std::string v416;
  int v417;
  uint64_t v418;
  uint64_t (**v419)();
  std::string v420;
  int v421;
  uint64_t v422;
  uint64_t (**v423)();
  std::string v424;
  int v425;
  uint64_t v426;
  uint64_t (**v427)();
  std::string v428;
  int v429;
  uint64_t v430;
  int v431;
  uint64_t (**v432)();
  std::string v433;
  int v434;
  uint64_t v435;
  uint64_t (**v436)();
  std::string v437;
  int v438;
  char v439;
  std::string v440;
  uint64_t (**v441)();
  std::string v442;
  int v443;
  uint64_t v444;
  uint64_t (**v445)();
  std::string v446;
  int v447;
  uint64_t v448;
  int v449;
  uint64_t (**v450)();
  std::string v451;
  int v452;
  uint64_t v453;
  uint64_t (**v454)();
  std::string v455;
  int v456;
  char v457;
  std::string v458;
  uint64_t (**v459)();
  std::string v460;
  int v461;
  char v462;
  std::string v463;
  uint64_t (**v464)();
  std::string v465;
  int v466;
  uint64_t v467;
  int v468;
  uint64_t (**v469)();
  std::string v470;
  int v471;
  char v472;
  std::string v473;
  uint64_t (**v474)();
  std::string v475;
  int v476;
  uint64_t v477;
  uint64_t (**v478)();
  std::string v479;
  int v480;
  uint64_t v481;
  int v482;
  uint64_t (**v483)();
  std::string v484;
  int v485;
  uint64_t v486;
  uint64_t (**v487)();
  std::string v488;
  int v489;
  char v490;
  std::string v491;
  uint64_t (**v492)();
  std::string v493;
  int v494;
  char v495;
  std::string v496;
  uint64_t (**v497)();
  std::string v498;
  int v499;
  char v500;
  std::string v501;
  uint64_t (**v502)();
  std::string v503;
  int v504;
  uint64_t v505;
  uint64_t (**v506)();
  std::string v507;
  int v508;
  uint64_t v509;
  uint64_t (**v510)();
  std::string v511;
  int v512;
  uint64_t v513;
  uint64_t (**v514)();
  std::string v515;
  int v516;
  uint64_t v517;
  uint64_t (**v518)();
  std::string v519;
  int v520;
  uint64_t v521;
  uint64_t (**v522)();
  std::string v523;
  int v524;
  uint64_t v525;
  uint64_t (**v526)();
  std::string v527;
  int v528;
  uint64_t v529;
  uint64_t (**v530)();
  std::string v531;
  int v532;
  uint64_t v533;
  int v534;
  uint64_t (**v535)();
  std::string v536;
  int v537;
  uint64_t v538;
  int v539;
  uint64_t (**v540)();
  std::string v541;
  int v542;
  char v543;
  std::string v544;
  uint64_t (**v545)();
  std::string v546;
  int v547;
  char v548;
  std::string v549;
  uint64_t (**v550)();
  std::string v551;
  int v552;
  uint64_t v553;
  int v554;
  uint64_t (**v555)();
  std::string v556;
  int v557;
  uint64_t v558;
  uint64_t (**v559)();
  std::string v560;
  int v561;
  uint64_t v562;
  uint64_t (**v563)();
  std::string v564;
  int v565;
  uint64_t v566;
  uint64_t (**v567)();
  std::string v568;
  int v569;
  uint64_t v570;
  uint64_t (**v571)();
  std::string v572;
  int v573;
  char v574;
  std::string v575;
  uint64_t (**v576)();
  std::string v577;
  int v578;
  char v579;
  std::string v580;
  uint64_t (**v581)();
  std::string v582;
  int v583;
  uint64_t v584;
  uint64_t (**v585)();
  std::string v586;
  int v587;
  uint64_t v588;
  int v589;
  uint64_t (**v590)();
  std::string v591;
  int v592;
  uint64_t v593;
  int v594;
  uint64_t (**v595)();
  std::string v596;
  int v597;
  uint64_t v598;
  uint64_t (**v599)();
  std::string v600;
  int v601;
  uint64_t v602;
  uint64_t (**v603)();
  std::string v604;
  int v605;
  uint64_t v606;
  uint64_t (**v607)();
  std::string v608;
  int v609;
  uint64_t v610;
  uint64_t (**v611)();
  std::string v612;
  int v613;
  uint64_t v614;
  uint64_t (**v615)();
  std::string v616;
  int v617;
  char v618;
  std::string v619;
  uint64_t (**v620)();
  std::string v621;
  int v622;
  uint64_t v623;
  uint64_t (**v624)();
  std::string v625;
  int v626;
  uint64_t v627;
  uint64_t (**v628)();
  std::string v629;
  int v630;
  uint64_t v631;
  uint64_t (**v632)();
  std::string v633;
  int v634;
  uint64_t v635;
  uint64_t (**v636)();
  std::string v637;
  int v638;
  uint64_t v639;
  uint64_t (**v640)();
  std::string v641;
  int v642;
  uint64_t v643;
  uint64_t (**v644)();
  std::string v645;
  int v646;
  char v647;
  void (**v648)(mediaplatform::Data *__hidden);
  size_t v649;
  size_t v650;
  void *v651;
  char v652;

  v61 = MEMORY[0x24BDAC7A8](a1);
  v64 = v63;
  v66 = v65;
  v68 = v67;
  v70 = v69;
  v72 = v71;
  v73 = v62;
  v118 = v74;
  v127 = v61;
  if (*(char *)(v62 + 31) < 0)
    std::string::__init_copy_ctor_external(&v389, *(const std::string::value_type **)(v62 + 8), *(_QWORD *)(v62 + 16));
  else
    v389 = *(std::string *)(v62 + 8);
  v390 = *(_DWORD *)(v73 + 32);
  v388 = off_24C335AF8;
  v391 = *(_QWORD *)(v73 + 36);
  v379 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(v72 + 31) < 0)
    std::string::__init_copy_ctor_external(&__s, *(const std::string::value_type **)(v72 + 8), *(_QWORD *)(v72 + 16));
  else
    __s = *(std::string *)(v72 + 8);
  v381 = *(_DWORD *)(v72 + 32);
  v379 = &off_24C335A98;
  v382 = *(_BYTE *)(v72 + 36);
  v75 = *(const void **)(v72 + 64);
  v76 = *(_QWORD *)(v72 + 48);
  v383 = &off_24C331510;
  v384 = v76;
  v385 = v76;
  if (v76)
    v77 = (void *)operator new[]();
  else
    v77 = 0;
  v386 = v77;
  v387 = 1;
  if (v75)
    memcpy(v77, v75, v76);
  else
    bzero(v77, v76);
  if (*(char *)(v70 + 31) < 0)
    std::string::__init_copy_ctor_external(&v376, *(const std::string::value_type **)(v70 + 8), *(_QWORD *)(v70 + 16));
  else
    v376 = *(std::string *)(v70 + 8);
  v377 = *(_DWORD *)(v70 + 32);
  v375 = off_24C335AF8;
  v378 = *(_QWORD *)(v70 + 36);
  if (*(char *)(v68 + 31) < 0)
    std::string::__init_copy_ctor_external(&v372, *(const std::string::value_type **)(v68 + 8), *(_QWORD *)(v68 + 16));
  else
    v372 = *(std::string *)(v68 + 8);
  v373 = *(_DWORD *)(v68 + 32);
  v371 = off_24C335AF8;
  v374 = *(_QWORD *)(v68 + 36);
  if (*(char *)(v66 + 31) < 0)
    std::string::__init_copy_ctor_external(&v368, *(const std::string::value_type **)(v66 + 8), *(_QWORD *)(v66 + 16));
  else
    v368 = *(std::string *)(v66 + 8);
  v369 = *(_DWORD *)(v66 + 32);
  v367 = off_24C335AF8;
  v370 = *(_QWORD *)(v66 + 36);
  if (*(char *)(v64 + 31) < 0)
    std::string::__init_copy_ctor_external(&v364, *(const std::string::value_type **)(v64 + 8), *(_QWORD *)(v64 + 16));
  else
    v364 = *(std::string *)(v64 + 8);
  v365 = *(_DWORD *)(v64 + 32);
  v363 = off_24C335AF8;
  v366 = *(_QWORD *)(v64 + 36);
  if (*(char *)(a9 + 31) < 0)
    std::string::__init_copy_ctor_external(&v360, *(const std::string::value_type **)(a9 + 8), *(_QWORD *)(a9 + 16));
  else
    v360 = *(std::string *)(a9 + 8);
  v361 = *(_DWORD *)(a9 + 32);
  v359 = off_24C335AF8;
  v362 = *(_QWORD *)(a9 + 36);
  if (*(char *)(a10 + 31) < 0)
    std::string::__init_copy_ctor_external(&v356, *(const std::string::value_type **)(a10 + 8), *(_QWORD *)(a10 + 16));
  else
    v356 = *(std::string *)(a10 + 8);
  v357 = *(_DWORD *)(a10 + 32);
  v355 = off_24C335AF8;
  v358 = *(_QWORD *)(a10 + 36);
  v350 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a11 + 31) < 0)
    std::string::__init_copy_ctor_external(&v351, *(const std::string::value_type **)(a11 + 8), *(_QWORD *)(a11 + 16));
  else
    v351 = *(std::string *)(a11 + 8);
  v352 = *(_DWORD *)(a11 + 32);
  v350 = &off_24C335AB8;
  v353 = *(_BYTE *)(a11 + 36);
  if (*(char *)(a11 + 63) < 0)
    std::string::__init_copy_ctor_external(&v354, *(const std::string::value_type **)(a11 + 40), *(_QWORD *)(a11 + 48));
  else
    v354 = *(std::string *)(a11 + 40);
  if (*(char *)(a12 + 31) < 0)
    std::string::__init_copy_ctor_external(&v347, *(const std::string::value_type **)(a12 + 8), *(_QWORD *)(a12 + 16));
  else
    v347 = *(std::string *)(a12 + 8);
  v348 = *(_DWORD *)(a12 + 32);
  v346 = off_24C335AF8;
  v349 = *(_QWORD *)(a12 + 36);
  if (*(char *)(a13 + 31) < 0)
    std::string::__init_copy_ctor_external(&v343, *(const std::string::value_type **)(a13 + 8), *(_QWORD *)(a13 + 16));
  else
    v343 = *(std::string *)(a13 + 8);
  v344 = *(_DWORD *)(a13 + 32);
  v342 = off_24C335AF8;
  v345 = *(_QWORD *)(a13 + 36);
  if (*(char *)(a14 + 31) < 0)
    std::string::__init_copy_ctor_external(&v339, *(const std::string::value_type **)(a14 + 8), *(_QWORD *)(a14 + 16));
  else
    v339 = *(std::string *)(a14 + 8);
  v340 = *(_DWORD *)(a14 + 32);
  v338 = off_24C335AF8;
  v341 = *(_QWORD *)(a14 + 36);
  if (*(char *)(a15 + 31) < 0)
    std::string::__init_copy_ctor_external(&v335, *(const std::string::value_type **)(a15 + 8), *(_QWORD *)(a15 + 16));
  else
    v335 = *(std::string *)(a15 + 8);
  v336 = *(_DWORD *)(a15 + 32);
  v334 = off_24C335AF8;
  v337 = *(_QWORD *)(a15 + 36);
  if (*(char *)(a16 + 31) < 0)
    std::string::__init_copy_ctor_external(&v331, *(const std::string::value_type **)(a16 + 8), *(_QWORD *)(a16 + 16));
  else
    v331 = *(std::string *)(a16 + 8);
  v332 = *(_DWORD *)(a16 + 32);
  v330 = off_24C335AF8;
  v333 = *(_QWORD *)(a16 + 36);
  if (*(char *)(a17 + 31) < 0)
    std::string::__init_copy_ctor_external(&v326, *(const std::string::value_type **)(a17 + 8), *(_QWORD *)(a17 + 16));
  else
    v326 = *(std::string *)(a17 + 8);
  v78 = *(_DWORD *)(a17 + 32);
  v325 = off_24C335B18;
  v328 = *(_QWORD *)(a17 + 36);
  v79 = *(_DWORD *)(a17 + 44);
  v327 = v78;
  v329 = v79;
  if (*(char *)(a18 + 31) < 0)
    std::string::__init_copy_ctor_external(&v321, *(const std::string::value_type **)(a18 + 8), *(_QWORD *)(a18 + 16));
  else
    v321 = *(std::string *)(a18 + 8);
  v80 = *(_DWORD *)(a18 + 32);
  v320 = off_24C335B18;
  v323 = *(_QWORD *)(a18 + 36);
  v81 = *(_DWORD *)(a18 + 44);
  v322 = v80;
  v324 = v81;
  if (*(char *)(a19 + 31) < 0)
    std::string::__init_copy_ctor_external(&v317, *(const std::string::value_type **)(a19 + 8), *(_QWORD *)(a19 + 16));
  else
    v317 = *(std::string *)(a19 + 8);
  v318 = *(_DWORD *)(a19 + 32);
  v316 = off_24C335AF8;
  v319 = *(_QWORD *)(a19 + 36);
  v311 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a20 + 31) < 0)
    std::string::__init_copy_ctor_external(&v312, *(const std::string::value_type **)(a20 + 8), *(_QWORD *)(a20 + 16));
  else
    v312 = *(std::string *)(a20 + 8);
  v313 = *(_DWORD *)(a20 + 32);
  v311 = &off_24C335AB8;
  v314 = *(_BYTE *)(a20 + 36);
  if (*(char *)(a20 + 63) < 0)
    std::string::__init_copy_ctor_external(&v315, *(const std::string::value_type **)(a20 + 40), *(_QWORD *)(a20 + 48));
  else
    v315 = *(std::string *)(a20 + 40);
  v306 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a21 + 31) < 0)
    std::string::__init_copy_ctor_external(&v307, *(const std::string::value_type **)(a21 + 8), *(_QWORD *)(a21 + 16));
  else
    v307 = *(std::string *)(a21 + 8);
  v308 = *(_DWORD *)(a21 + 32);
  v306 = &off_24C335AB8;
  v309 = *(_BYTE *)(a21 + 36);
  if (*(char *)(a21 + 63) < 0)
    std::string::__init_copy_ctor_external(&v310, *(const std::string::value_type **)(a21 + 40), *(_QWORD *)(a21 + 48));
  else
    v310 = *(std::string *)(a21 + 40);
  if (*(char *)(a22 + 31) < 0)
    std::string::__init_copy_ctor_external(&v303, *(const std::string::value_type **)(a22 + 8), *(_QWORD *)(a22 + 16));
  else
    v303 = *(std::string *)(a22 + 8);
  v304 = *(_DWORD *)(a22 + 32);
  v302 = off_24C335AF8;
  v305 = *(_QWORD *)(a22 + 36);
  if (*(char *)(a23 + 31) < 0)
    std::string::__init_copy_ctor_external(&v299, *(const std::string::value_type **)(a23 + 8), *(_QWORD *)(a23 + 16));
  else
    v299 = *(std::string *)(a23 + 8);
  v300 = *(_DWORD *)(a23 + 32);
  v298 = off_24C335AF8;
  v301 = *(_QWORD *)(a23 + 36);
  if (*(char *)(a24 + 31) < 0)
    std::string::__init_copy_ctor_external(&v295, *(const std::string::value_type **)(a24 + 8), *(_QWORD *)(a24 + 16));
  else
    v295 = *(std::string *)(a24 + 8);
  v296 = *(_DWORD *)(a24 + 32);
  v294 = off_24C335AF8;
  v297 = *(_QWORD *)(a24 + 36);
  if (*(char *)(a25 + 31) < 0)
    std::string::__init_copy_ctor_external(&v291, *(const std::string::value_type **)(a25 + 8), *(_QWORD *)(a25 + 16));
  else
    v291 = *(std::string *)(a25 + 8);
  v292 = *(_DWORD *)(a25 + 32);
  v290 = off_24C335AF8;
  v293 = *(_QWORD *)(a25 + 36);
  if (*(char *)(a26 + 31) < 0)
    std::string::__init_copy_ctor_external(&v286, *(const std::string::value_type **)(a26 + 8), *(_QWORD *)(a26 + 16));
  else
    v286 = *(std::string *)(a26 + 8);
  v82 = *(_DWORD *)(a26 + 32);
  v285 = off_24C335B18;
  v288 = *(_QWORD *)(a26 + 36);
  v83 = *(_DWORD *)(a26 + 44);
  v287 = v82;
  v289 = v83;
  v280 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a27 + 31) < 0)
    std::string::__init_copy_ctor_external(&v281, *(const std::string::value_type **)(a27 + 8), *(_QWORD *)(a27 + 16));
  else
    v281 = *(std::string *)(a27 + 8);
  v282 = *(_DWORD *)(a27 + 32);
  v280 = &off_24C335AB8;
  v283 = *(_BYTE *)(a27 + 36);
  if (*(char *)(a27 + 63) < 0)
    std::string::__init_copy_ctor_external(&v284, *(const std::string::value_type **)(a27 + 40), *(_QWORD *)(a27 + 48));
  else
    v284 = *(std::string *)(a27 + 40);
  v275 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a28 + 31) < 0)
    std::string::__init_copy_ctor_external(&v276, *(const std::string::value_type **)(a28 + 8), *(_QWORD *)(a28 + 16));
  else
    v276 = *(std::string *)(a28 + 8);
  v277 = *(_DWORD *)(a28 + 32);
  v275 = &off_24C335AB8;
  v278 = *(_BYTE *)(a28 + 36);
  if (*(char *)(a28 + 63) < 0)
    std::string::__init_copy_ctor_external(&v279, *(const std::string::value_type **)(a28 + 40), *(_QWORD *)(a28 + 48));
  else
    v279 = *(std::string *)(a28 + 40);
  if (*(char *)(a29 + 31) < 0)
    std::string::__init_copy_ctor_external(&v271, *(const std::string::value_type **)(a29 + 8), *(_QWORD *)(a29 + 16));
  else
    v271 = *(std::string *)(a29 + 8);
  v84 = *(_DWORD *)(a29 + 32);
  v270 = off_24C335B18;
  v273 = *(_QWORD *)(a29 + 36);
  v85 = *(_DWORD *)(a29 + 44);
  v272 = v84;
  v274 = v85;
  if (*(char *)(a30 + 31) < 0)
    std::string::__init_copy_ctor_external(&v266, *(const std::string::value_type **)(a30 + 8), *(_QWORD *)(a30 + 16));
  else
    v266 = *(std::string *)(a30 + 8);
  v86 = *(_DWORD *)(a30 + 32);
  v265 = off_24C335B18;
  v268 = *(_QWORD *)(a30 + 36);
  v87 = *(_DWORD *)(a30 + 44);
  v267 = v86;
  v269 = v87;
  if (*(char *)(a31 + 31) < 0)
    std::string::__init_copy_ctor_external(&v262, *(const std::string::value_type **)(a31 + 8), *(_QWORD *)(a31 + 16));
  else
    v262 = *(std::string *)(a31 + 8);
  v263 = *(_DWORD *)(a31 + 32);
  v261 = off_24C335AF8;
  v264 = *(_QWORD *)(a31 + 36);
  if (*(char *)(a32 + 31) < 0)
    std::string::__init_copy_ctor_external(&v258, *(const std::string::value_type **)(a32 + 8), *(_QWORD *)(a32 + 16));
  else
    v258 = *(std::string *)(a32 + 8);
  v259 = *(_DWORD *)(a32 + 32);
  v257 = off_24C335AF8;
  v260 = *(_QWORD *)(a32 + 36);
  if (*(char *)(a33 + 31) < 0)
    std::string::__init_copy_ctor_external(&v254, *(const std::string::value_type **)(a33 + 8), *(_QWORD *)(a33 + 16));
  else
    v254 = *(std::string *)(a33 + 8);
  v255 = *(_DWORD *)(a33 + 32);
  v253 = off_24C335AF8;
  v256 = *(_QWORD *)(a33 + 36);
  if (*(char *)(a34 + 31) < 0)
    std::string::__init_copy_ctor_external(&v250, *(const std::string::value_type **)(a34 + 8), *(_QWORD *)(a34 + 16));
  else
    v250 = *(std::string *)(a34 + 8);
  v251 = *(_DWORD *)(a34 + 32);
  v249 = off_24C335AF8;
  v252 = *(_QWORD *)(a34 + 36);
  v245 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a35 + 31) < 0)
    std::string::__init_copy_ctor_external(&v246, *(const std::string::value_type **)(a35 + 8), *(_QWORD *)(a35 + 16));
  else
    v246 = *(std::string *)(a35 + 8);
  v247 = *(_DWORD *)(a35 + 32);
  v245 = off_24C335AF8;
  v248 = *(_QWORD *)(a35 + 36);
  v241 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a36 + 31) < 0)
    std::string::__init_copy_ctor_external(&v242, *(const std::string::value_type **)(a36 + 8), *(_QWORD *)(a36 + 16));
  else
    v242 = *(std::string *)(a36 + 8);
  v243 = *(_DWORD *)(a36 + 32);
  v241 = off_24C335AF8;
  v244 = *(_QWORD *)(a36 + 36);
  v237 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a37 + 31) < 0)
    std::string::__init_copy_ctor_external(&v238, *(const std::string::value_type **)(a37 + 8), *(_QWORD *)(a37 + 16));
  else
    v238 = *(std::string *)(a37 + 8);
  v239 = *(_DWORD *)(a37 + 32);
  v237 = off_24C335AF8;
  v240 = *(_QWORD *)(a37 + 36);
  v232 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a38 + 31) < 0)
    std::string::__init_copy_ctor_external(&v233, *(const std::string::value_type **)(a38 + 8), *(_QWORD *)(a38 + 16));
  else
    v233 = *(std::string *)(a38 + 8);
  v234 = *(_DWORD *)(a38 + 32);
  v232 = &off_24C335AB8;
  v235 = *(_BYTE *)(a38 + 36);
  if (*(char *)(a38 + 63) < 0)
    std::string::__init_copy_ctor_external(&v236, *(const std::string::value_type **)(a38 + 40), *(_QWORD *)(a38 + 48));
  else
    v236 = *(std::string *)(a38 + 40);
  v227 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a39 + 31) < 0)
    std::string::__init_copy_ctor_external(&v228, *(const std::string::value_type **)(a39 + 8), *(_QWORD *)(a39 + 16));
  else
    v228 = *(std::string *)(a39 + 8);
  v229 = *(_DWORD *)(a39 + 32);
  v227 = &off_24C335AB8;
  v230 = *(_BYTE *)(a39 + 36);
  if (*(char *)(a39 + 63) < 0)
    std::string::__init_copy_ctor_external(&v231, *(const std::string::value_type **)(a39 + 40), *(_QWORD *)(a39 + 48));
  else
    v231 = *(std::string *)(a39 + 40);
  v222 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a40 + 31) < 0)
    std::string::__init_copy_ctor_external(&v223, *(const std::string::value_type **)(a40 + 8), *(_QWORD *)(a40 + 16));
  else
    v223 = *(std::string *)(a40 + 8);
  v224 = *(_DWORD *)(a40 + 32);
  v222 = &off_24C335AB8;
  v225 = *(_BYTE *)(a40 + 36);
  if (*(char *)(a40 + 63) < 0)
    std::string::__init_copy_ctor_external(&v226, *(const std::string::value_type **)(a40 + 40), *(_QWORD *)(a40 + 48));
  else
    v226 = *(std::string *)(a40 + 40);
  v218 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a41 + 31) < 0)
    std::string::__init_copy_ctor_external(&v219, *(const std::string::value_type **)(a41 + 8), *(_QWORD *)(a41 + 16));
  else
    v219 = *(std::string *)(a41 + 8);
  v220 = *(_DWORD *)(a41 + 32);
  v218 = off_24C335AF8;
  v221 = *(_QWORD *)(a41 + 36);
  v213 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a42 + 31) < 0)
    std::string::__init_copy_ctor_external(&v214, *(const std::string::value_type **)(a42 + 8), *(_QWORD *)(a42 + 16));
  else
    v214 = *(std::string *)(a42 + 8);
  v88 = *(_DWORD *)(a42 + 32);
  v213 = off_24C335B18;
  v216 = *(_QWORD *)(a42 + 36);
  v89 = *(_DWORD *)(a42 + 44);
  v215 = v88;
  v217 = v89;
  v209 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a43 + 31) < 0)
    std::string::__init_copy_ctor_external(&v210, *(const std::string::value_type **)(a43 + 8), *(_QWORD *)(a43 + 16));
  else
    v210 = *(std::string *)(a43 + 8);
  v211 = *(_DWORD *)(a43 + 32);
  v209 = off_24C335AF8;
  v212 = *(_QWORD *)(a43 + 36);
  v204 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a44 + 31) < 0)
    std::string::__init_copy_ctor_external(&v205, *(const std::string::value_type **)(a44 + 8), *(_QWORD *)(a44 + 16));
  else
    v205 = *(std::string *)(a44 + 8);
  v206 = *(_DWORD *)(a44 + 32);
  v204 = &off_24C335AB8;
  v207 = *(_BYTE *)(a44 + 36);
  if (*(char *)(a44 + 63) < 0)
    std::string::__init_copy_ctor_external(&v208, *(const std::string::value_type **)(a44 + 40), *(_QWORD *)(a44 + 48));
  else
    v208 = *(std::string *)(a44 + 40);
  v199 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a45 + 31) < 0)
    std::string::__init_copy_ctor_external(&v200, *(const std::string::value_type **)(a45 + 8), *(_QWORD *)(a45 + 16));
  else
    v200 = *(std::string *)(a45 + 8);
  v90 = *(_DWORD *)(a45 + 32);
  v199 = off_24C335B18;
  v202 = *(_QWORD *)(a45 + 36);
  v91 = *(_DWORD *)(a45 + 44);
  v201 = v90;
  v203 = v91;
  v194 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a46 + 31) < 0)
    std::string::__init_copy_ctor_external(&v195, *(const std::string::value_type **)(a46 + 8), *(_QWORD *)(a46 + 16));
  else
    v195 = *(std::string *)(a46 + 8);
  v196 = *(_DWORD *)(a46 + 32);
  v194 = &off_24C335AB8;
  v197 = *(_BYTE *)(a46 + 36);
  if (*(char *)(a46 + 63) < 0)
    std::string::__init_copy_ctor_external(&v198, *(const std::string::value_type **)(a46 + 40), *(_QWORD *)(a46 + 48));
  else
    v198 = *(std::string *)(a46 + 40);
  v189 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a47 + 31) < 0)
    std::string::__init_copy_ctor_external(&v190, *(const std::string::value_type **)(a47 + 8), *(_QWORD *)(a47 + 16));
  else
    v190 = *(std::string *)(a47 + 8);
  v191 = *(_DWORD *)(a47 + 32);
  v189 = &off_24C335AB8;
  v192 = *(_BYTE *)(a47 + 36);
  if (*(char *)(a47 + 63) < 0)
    std::string::__init_copy_ctor_external(&v193, *(const std::string::value_type **)(a47 + 40), *(_QWORD *)(a47 + 48));
  else
    v193 = *(std::string *)(a47 + 40);
  v185 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a48 + 31) < 0)
    std::string::__init_copy_ctor_external(&v186, *(const std::string::value_type **)(a48 + 8), *(_QWORD *)(a48 + 16));
  else
    v186 = *(std::string *)(a48 + 8);
  v187 = *(_DWORD *)(a48 + 32);
  v185 = off_24C335AF8;
  v188 = *(_QWORD *)(a48 + 36);
  v180 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a49 + 31) < 0)
    std::string::__init_copy_ctor_external(&v181, *(const std::string::value_type **)(a49 + 8), *(_QWORD *)(a49 + 16));
  else
    v181 = *(std::string *)(a49 + 8);
  v92 = *(_DWORD *)(a49 + 32);
  v180 = off_24C335B18;
  v183 = *(_QWORD *)(a49 + 36);
  v93 = *(_DWORD *)(a49 + 44);
  v182 = v92;
  v184 = v93;
  v176 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a50 + 31) < 0)
    std::string::__init_copy_ctor_external(&v177, *(const std::string::value_type **)(a50 + 8), *(_QWORD *)(a50 + 16));
  else
    v177 = *(std::string *)(a50 + 8);
  v178 = *(_DWORD *)(a50 + 32);
  v176 = off_24C335AF8;
  v179 = *(_QWORD *)(a50 + 36);
  v171 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a51 + 31) < 0)
    std::string::__init_copy_ctor_external(&v172, *(const std::string::value_type **)(a51 + 8), *(_QWORD *)(a51 + 16));
  else
    v172 = *(std::string *)(a51 + 8);
  v173 = *(_DWORD *)(a51 + 32);
  v171 = &off_24C335AB8;
  v174 = *(_BYTE *)(a51 + 36);
  if (*(char *)(a51 + 63) < 0)
    std::string::__init_copy_ctor_external(&v175, *(const std::string::value_type **)(a51 + 40), *(_QWORD *)(a51 + 48));
  else
    v175 = *(std::string *)(a51 + 40);
  v167 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a52 + 31) < 0)
    std::string::__init_copy_ctor_external(&v168, *(const std::string::value_type **)(a52 + 8), *(_QWORD *)(a52 + 16));
  else
    v168 = *(std::string *)(a52 + 8);
  v169 = *(_DWORD *)(a52 + 32);
  v167 = off_24C335AF8;
  v170 = *(_QWORD *)(a52 + 36);
  v162 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a53 + 31) < 0)
    std::string::__init_copy_ctor_external(&v163, *(const std::string::value_type **)(a53 + 8), *(_QWORD *)(a53 + 16));
  else
    v163 = *(std::string *)(a53 + 8);
  v94 = *(_DWORD *)(a53 + 32);
  v162 = off_24C335B18;
  v165 = *(_QWORD *)(a53 + 36);
  v95 = *(_DWORD *)(a53 + 44);
  v164 = v94;
  v166 = v95;
  v158 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a54 + 31) < 0)
    std::string::__init_copy_ctor_external(&v159, *(const std::string::value_type **)(a54 + 8), *(_QWORD *)(a54 + 16));
  else
    v159 = *(std::string *)(a54 + 8);
  v160 = *(_DWORD *)(a54 + 32);
  v158 = off_24C335AF8;
  v161 = *(_QWORD *)(a54 + 36);
  v154 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a55 + 31) < 0)
    std::string::__init_copy_ctor_external(&v155, *(const std::string::value_type **)(a55 + 8), *(_QWORD *)(a55 + 16));
  else
    v155 = *(std::string *)(a55 + 8);
  v156 = *(_DWORD *)(a55 + 32);
  v154 = off_24C335AF8;
  v157 = *(_QWORD *)(a55 + 36);
  v150 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a56 + 31) < 0)
    std::string::__init_copy_ctor_external(&v151, *(const std::string::value_type **)(a56 + 8), *(_QWORD *)(a56 + 16));
  else
    v151 = *(std::string *)(a56 + 8);
  v152 = *(_DWORD *)(a56 + 32);
  v150 = off_24C335AF8;
  v153 = *(_QWORD *)(a56 + 36);
  v145 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a57 + 31) < 0)
    std::string::__init_copy_ctor_external(&v146, *(const std::string::value_type **)(a57 + 8), *(_QWORD *)(a57 + 16));
  else
    v146 = *(std::string *)(a57 + 8);
  v147 = *(_DWORD *)(a57 + 32);
  v145 = &off_24C335AB8;
  v148 = *(_BYTE *)(a57 + 36);
  if (*(char *)(a57 + 63) < 0)
    std::string::__init_copy_ctor_external(&v149, *(const std::string::value_type **)(a57 + 40), *(_QWORD *)(a57 + 48));
  else
    v149 = *(std::string *)(a57 + 40);
  v140 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a58 + 31) < 0)
    std::string::__init_copy_ctor_external(&v141, *(const std::string::value_type **)(a58 + 8), *(_QWORD *)(a58 + 16));
  else
    v141 = *(std::string *)(a58 + 8);
  v142 = *(_DWORD *)(a58 + 32);
  v140 = &off_24C335AB8;
  v143 = *(_BYTE *)(a58 + 36);
  if (*(char *)(a58 + 63) < 0)
    std::string::__init_copy_ctor_external(&v144, *(const std::string::value_type **)(a58 + 40), *(_QWORD *)(a58 + 48));
  else
    v144 = *(std::string *)(a58 + 40);
  v135 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a59 + 31) < 0)
    std::string::__init_copy_ctor_external(&v136, *(const std::string::value_type **)(a59 + 8), *(_QWORD *)(a59 + 16));
  else
    v136 = *(std::string *)(a59 + 8);
  v96 = *(_DWORD *)(a59 + 32);
  v135 = off_24C335B18;
  v138 = *(_QWORD *)(a59 + 36);
  v97 = *(_DWORD *)(a59 + 44);
  v137 = v96;
  v139 = v97;
  v131 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a60 + 31) < 0)
    std::string::__init_copy_ctor_external(&v132, *(const std::string::value_type **)(a60 + 8), *(_QWORD *)(a60 + 16));
  else
    v132 = *(std::string *)(a60 + 8);
  v133 = *(_DWORD *)(a60 + 32);
  v131 = off_24C335AF8;
  v134 = *(_QWORD *)(a60 + 36);
  if (*(char *)(a61 + 31) < 0)
    std::string::__init_copy_ctor_external(&v128, *(const std::string::value_type **)(a61 + 8), *(_QWORD *)(a61 + 16));
  else
    v128 = *(std::string *)(a61 + 8);
  v129 = *(_DWORD *)(a61 + 32);
  v130 = *(_QWORD *)(a61 + 36);
  v644 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v645, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
  else
    v645 = __s;
  v646 = v381;
  v644 = &off_24C335A98;
  v647 = v382;
  v98 = v386;
  v99 = v384;
  v648 = &off_24C331510;
  v649 = v384;
  v650 = v384;
  if (v384)
    v100 = (void *)operator new[]();
  else
    v100 = 0;
  v651 = v100;
  v652 = 1;
  if (v98)
    memcpy(v100, v98, v99);
  else
    bzero(v100, v99);
  v640 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v376.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v641, v376.__r_.__value_.__l.__data_, v376.__r_.__value_.__l.__size_);
  else
    v641 = v376;
  v642 = v377;
  v640 = off_24C335AF8;
  v643 = v378;
  v636 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v372.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v637, v372.__r_.__value_.__l.__data_, v372.__r_.__value_.__l.__size_);
  else
    v637 = v372;
  v638 = v373;
  v636 = off_24C335AF8;
  v639 = v374;
  v632 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v368.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v633, v368.__r_.__value_.__l.__data_, v368.__r_.__value_.__l.__size_);
  else
    v633 = v368;
  v634 = v369;
  v632 = off_24C335AF8;
  v635 = v370;
  v628 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v364.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v629, v364.__r_.__value_.__l.__data_, v364.__r_.__value_.__l.__size_);
  else
    v629 = v364;
  v630 = v365;
  v628 = off_24C335AF8;
  v631 = v366;
  v624 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v360.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v625, v360.__r_.__value_.__l.__data_, v360.__r_.__value_.__l.__size_);
  else
    v625 = v360;
  v626 = v361;
  v624 = off_24C335AF8;
  v627 = v362;
  v620 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v356.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v621, v356.__r_.__value_.__l.__data_, v356.__r_.__value_.__l.__size_);
  else
    v621 = v356;
  v622 = v357;
  v620 = off_24C335AF8;
  v623 = v358;
  v615 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v351.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v616, v351.__r_.__value_.__l.__data_, v351.__r_.__value_.__l.__size_);
  else
    v616 = v351;
  v617 = v352;
  v615 = &off_24C335AB8;
  v618 = v353;
  if (SHIBYTE(v354.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v619, v354.__r_.__value_.__l.__data_, v354.__r_.__value_.__l.__size_);
  else
    v619 = v354;
  v611 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v347.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v612, v347.__r_.__value_.__l.__data_, v347.__r_.__value_.__l.__size_);
  else
    v612 = v347;
  v613 = v348;
  v611 = off_24C335AF8;
  v614 = v349;
  v607 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v343.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v608, v343.__r_.__value_.__l.__data_, v343.__r_.__value_.__l.__size_);
  else
    v608 = v343;
  v609 = v344;
  v607 = off_24C335AF8;
  v610 = v345;
  v603 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v339.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v604, v339.__r_.__value_.__l.__data_, v339.__r_.__value_.__l.__size_);
  else
    v604 = v339;
  v605 = v340;
  v603 = off_24C335AF8;
  v606 = v341;
  v599 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v335.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v600, v335.__r_.__value_.__l.__data_, v335.__r_.__value_.__l.__size_);
  else
    v600 = v335;
  v601 = v336;
  v599 = off_24C335AF8;
  v602 = v337;
  v595 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v331.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v596, v331.__r_.__value_.__l.__data_, v331.__r_.__value_.__l.__size_);
  else
    v596 = v331;
  v597 = v332;
  v595 = off_24C335AF8;
  v598 = v333;
  v590 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v326.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v591, v326.__r_.__value_.__l.__data_, v326.__r_.__value_.__l.__size_);
  else
    v591 = v326;
  v590 = off_24C335B18;
  v593 = v328;
  v592 = v327;
  v594 = v329;
  v585 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v321.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v586, v321.__r_.__value_.__l.__data_, v321.__r_.__value_.__l.__size_);
  else
    v586 = v321;
  v585 = off_24C335B18;
  v588 = v323;
  v587 = v322;
  v589 = v324;
  v581 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v317.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v582, v317.__r_.__value_.__l.__data_, v317.__r_.__value_.__l.__size_);
  else
    v582 = v317;
  v583 = v318;
  v581 = off_24C335AF8;
  v584 = v319;
  v576 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v312.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v577, v312.__r_.__value_.__l.__data_, v312.__r_.__value_.__l.__size_);
  else
    v577 = v312;
  v578 = v313;
  v576 = &off_24C335AB8;
  v579 = v314;
  if (SHIBYTE(v315.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v580, v315.__r_.__value_.__l.__data_, v315.__r_.__value_.__l.__size_);
  else
    v580 = v315;
  v571 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v307.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v572, v307.__r_.__value_.__l.__data_, v307.__r_.__value_.__l.__size_);
  else
    v572 = v307;
  v573 = v308;
  v571 = &off_24C335AB8;
  v574 = v309;
  if (SHIBYTE(v310.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v575, v310.__r_.__value_.__l.__data_, v310.__r_.__value_.__l.__size_);
  else
    v575 = v310;
  v567 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v303.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v568, v303.__r_.__value_.__l.__data_, v303.__r_.__value_.__l.__size_);
  else
    v568 = v303;
  v569 = v304;
  v567 = off_24C335AF8;
  v570 = v305;
  v563 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v299.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v564, v299.__r_.__value_.__l.__data_, v299.__r_.__value_.__l.__size_);
  else
    v564 = v299;
  v565 = v300;
  v563 = off_24C335AF8;
  v566 = v301;
  v559 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v295.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v560, v295.__r_.__value_.__l.__data_, v295.__r_.__value_.__l.__size_);
  else
    v560 = v295;
  v561 = v296;
  v559 = off_24C335AF8;
  v562 = v297;
  v555 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v291.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v556, v291.__r_.__value_.__l.__data_, v291.__r_.__value_.__l.__size_);
  else
    v556 = v291;
  v557 = v292;
  v555 = off_24C335AF8;
  v558 = v293;
  v550 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v286.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v551, v286.__r_.__value_.__l.__data_, v286.__r_.__value_.__l.__size_);
  else
    v551 = v286;
  v550 = off_24C335B18;
  v553 = v288;
  v552 = v287;
  v554 = v289;
  v545 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v281.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v546, v281.__r_.__value_.__l.__data_, v281.__r_.__value_.__l.__size_);
  else
    v546 = v281;
  v547 = v282;
  v545 = &off_24C335AB8;
  v548 = v283;
  if (SHIBYTE(v284.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v549, v284.__r_.__value_.__l.__data_, v284.__r_.__value_.__l.__size_);
  else
    v549 = v284;
  v540 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v276.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v541, v276.__r_.__value_.__l.__data_, v276.__r_.__value_.__l.__size_);
  else
    v541 = v276;
  v542 = v277;
  v540 = &off_24C335AB8;
  v543 = v278;
  if (SHIBYTE(v279.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v544, v279.__r_.__value_.__l.__data_, v279.__r_.__value_.__l.__size_);
  else
    v544 = v279;
  v535 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v271.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v536, v271.__r_.__value_.__l.__data_, v271.__r_.__value_.__l.__size_);
  else
    v536 = v271;
  v535 = off_24C335B18;
  v538 = v273;
  v537 = v272;
  v539 = v274;
  v530 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v266.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v531, v266.__r_.__value_.__l.__data_, v266.__r_.__value_.__l.__size_);
  else
    v531 = v266;
  v530 = off_24C335B18;
  v533 = v268;
  v532 = v267;
  v534 = v269;
  v526 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v262.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v527, v262.__r_.__value_.__l.__data_, v262.__r_.__value_.__l.__size_);
  else
    v527 = v262;
  v528 = v263;
  v526 = off_24C335AF8;
  v529 = v264;
  v522 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v258.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v523, v258.__r_.__value_.__l.__data_, v258.__r_.__value_.__l.__size_);
  else
    v523 = v258;
  v524 = v259;
  v522 = off_24C335AF8;
  v525 = v260;
  v518 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v254.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v519, v254.__r_.__value_.__l.__data_, v254.__r_.__value_.__l.__size_);
  else
    v519 = v254;
  v520 = v255;
  v518 = off_24C335AF8;
  v521 = v256;
  v514 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v250.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v515, v250.__r_.__value_.__l.__data_, v250.__r_.__value_.__l.__size_);
  else
    v515 = v250;
  v516 = v251;
  v514 = off_24C335AF8;
  v517 = v252;
  v510 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v246.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v511, v246.__r_.__value_.__l.__data_, v246.__r_.__value_.__l.__size_);
  else
    v511 = v246;
  v512 = v247;
  v510 = off_24C335AF8;
  v513 = v248;
  v506 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v242.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v507, v242.__r_.__value_.__l.__data_, v242.__r_.__value_.__l.__size_);
  else
    v507 = v242;
  v508 = v243;
  v506 = off_24C335AF8;
  v509 = v244;
  v502 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v238.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v503, v238.__r_.__value_.__l.__data_, v238.__r_.__value_.__l.__size_);
  else
    v503 = v238;
  v504 = v239;
  v502 = off_24C335AF8;
  v505 = v240;
  v497 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v233.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v498, v233.__r_.__value_.__l.__data_, v233.__r_.__value_.__l.__size_);
  else
    v498 = v233;
  v499 = v234;
  v497 = &off_24C335AB8;
  v500 = v235;
  if (SHIBYTE(v236.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v501, v236.__r_.__value_.__l.__data_, v236.__r_.__value_.__l.__size_);
  else
    v501 = v236;
  v492 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v228.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v493, v228.__r_.__value_.__l.__data_, v228.__r_.__value_.__l.__size_);
  else
    v493 = v228;
  v494 = v229;
  v492 = &off_24C335AB8;
  v495 = v230;
  if (SHIBYTE(v231.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v496, v231.__r_.__value_.__l.__data_, v231.__r_.__value_.__l.__size_);
  else
    v496 = v231;
  v487 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v223.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v488, v223.__r_.__value_.__l.__data_, v223.__r_.__value_.__l.__size_);
  else
    v488 = v223;
  v489 = v224;
  v487 = &off_24C335AB8;
  v490 = v225;
  if (SHIBYTE(v226.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v491, v226.__r_.__value_.__l.__data_, v226.__r_.__value_.__l.__size_);
  else
    v491 = v226;
  v483 = (uint64_t (**)())off_24C335D90;
  v101 = SHIBYTE(v219.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v219.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v484, v219.__r_.__value_.__l.__data_, v219.__r_.__value_.__l.__size_);
  else
    v484 = v219;
  v485 = v220;
  v483 = off_24C335AF8;
  v486 = v221;
  v478 = (uint64_t (**)())off_24C335D90;
  v102 = SHIBYTE(v214.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v214.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v479, v214.__r_.__value_.__l.__data_, v214.__r_.__value_.__l.__size_);
  else
    v479 = v214;
  v478 = off_24C335B18;
  v481 = v216;
  v480 = v215;
  v482 = v217;
  v474 = (uint64_t (**)())off_24C335D90;
  v103 = SHIBYTE(v210.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v210.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v475, v210.__r_.__value_.__l.__data_, v210.__r_.__value_.__l.__size_);
  else
    v475 = v210;
  v476 = v211;
  v474 = off_24C335AF8;
  v477 = v212;
  v469 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v205.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v470, v205.__r_.__value_.__l.__data_, v205.__r_.__value_.__l.__size_);
  else
    v470 = v205;
  v471 = v206;
  v469 = &off_24C335AB8;
  v472 = v207;
  if (SHIBYTE(v208.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v473, v208.__r_.__value_.__l.__data_, v208.__r_.__value_.__l.__size_);
  else
    v473 = v208;
  v464 = (uint64_t (**)())off_24C335D90;
  v126 = SHIBYTE(v200.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v200.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v465, v200.__r_.__value_.__l.__data_, v200.__r_.__value_.__l.__size_);
  else
    v465 = v200;
  v464 = off_24C335B18;
  v467 = v202;
  v466 = v201;
  v468 = v203;
  v459 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v195.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v460, v195.__r_.__value_.__l.__data_, v195.__r_.__value_.__l.__size_);
  else
    v460 = v195;
  v461 = v196;
  v459 = &off_24C335AB8;
  v462 = v197;
  if (SHIBYTE(v198.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v463, v198.__r_.__value_.__l.__data_, v198.__r_.__value_.__l.__size_);
  else
    v463 = v198;
  v454 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v190.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v455, v190.__r_.__value_.__l.__data_, v190.__r_.__value_.__l.__size_);
  else
    v455 = v190;
  v456 = v191;
  v454 = &off_24C335AB8;
  v457 = v192;
  if (SHIBYTE(v193.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v458, v193.__r_.__value_.__l.__data_, v193.__r_.__value_.__l.__size_);
  else
    v458 = v193;
  v450 = (uint64_t (**)())off_24C335D90;
  v125 = SHIBYTE(v186.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v186.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v451, v186.__r_.__value_.__l.__data_, v186.__r_.__value_.__l.__size_);
  else
    v451 = v186;
  v452 = v187;
  v450 = off_24C335AF8;
  v453 = v188;
  v445 = (uint64_t (**)())off_24C335D90;
  v124 = SHIBYTE(v181.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v181.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v446, v181.__r_.__value_.__l.__data_, v181.__r_.__value_.__l.__size_);
  else
    v446 = v181;
  v445 = off_24C335B18;
  v448 = v183;
  v447 = v182;
  v449 = v184;
  v441 = (uint64_t (**)())off_24C335D90;
  v123 = SHIBYTE(v177.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v177.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v442, v177.__r_.__value_.__l.__data_, v177.__r_.__value_.__l.__size_);
  else
    v442 = v177;
  v443 = v178;
  v441 = off_24C335AF8;
  v444 = v179;
  v436 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v172.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v437, v172.__r_.__value_.__l.__data_, v172.__r_.__value_.__l.__size_);
  else
    v437 = v172;
  v438 = v173;
  v436 = &off_24C335AB8;
  v439 = v174;
  if (SHIBYTE(v175.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v440, v175.__r_.__value_.__l.__data_, v175.__r_.__value_.__l.__size_);
  else
    v440 = v175;
  v432 = (uint64_t (**)())off_24C335D90;
  v104 = SHIBYTE(v168.__r_.__value_.__r.__words[2]);
  v122 = v102;
  v121 = v103;
  if (SHIBYTE(v168.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v433, v168.__r_.__value_.__l.__data_, v168.__r_.__value_.__l.__size_);
  else
    v433 = v168;
  v434 = v169;
  v432 = off_24C335AF8;
  v435 = v170;
  v427 = (uint64_t (**)())off_24C335D90;
  v105 = SHIBYTE(v163.__r_.__value_.__r.__words[2]);
  v120 = v101;
  if (SHIBYTE(v163.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v428, v163.__r_.__value_.__l.__data_, v163.__r_.__value_.__l.__size_);
  else
    v428 = v163;
  v427 = off_24C335B18;
  v430 = v165;
  v429 = v164;
  v431 = v166;
  v423 = (uint64_t (**)())off_24C335D90;
  v106 = SHIBYTE(v159.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v159.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v424, v159.__r_.__value_.__l.__data_, v159.__r_.__value_.__l.__size_);
  else
    v424 = v159;
  v425 = v160;
  v423 = off_24C335AF8;
  v426 = v161;
  v419 = (uint64_t (**)())off_24C335D90;
  v107 = SHIBYTE(v155.__r_.__value_.__r.__words[2]);
  v119 = v104;
  if (SHIBYTE(v155.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v420, v155.__r_.__value_.__l.__data_, v155.__r_.__value_.__l.__size_);
  else
    v420 = v155;
  v421 = v156;
  v419 = off_24C335AF8;
  v422 = v157;
  v415 = (uint64_t (**)())off_24C335D90;
  v108 = SHIBYTE(v151.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v151.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v416, v151.__r_.__value_.__l.__data_, v151.__r_.__value_.__l.__size_);
  else
    v416 = v151;
  v417 = v152;
  v415 = off_24C335AF8;
  v418 = v153;
  v410 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v146.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v411, v146.__r_.__value_.__l.__data_, v146.__r_.__value_.__l.__size_);
  else
    v411 = v146;
  v412 = v147;
  v410 = &off_24C335AB8;
  v413 = v148;
  if (SHIBYTE(v149.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v414, v149.__r_.__value_.__l.__data_, v149.__r_.__value_.__l.__size_);
  else
    v414 = v149;
  v405 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v141.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v406, v141.__r_.__value_.__l.__data_, v141.__r_.__value_.__l.__size_);
  else
    v406 = v141;
  v407 = v142;
  v405 = &off_24C335AB8;
  v408 = v143;
  if (SHIBYTE(v144.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v409, v144.__r_.__value_.__l.__data_, v144.__r_.__value_.__l.__size_);
  else
    v409 = v144;
  v400 = (uint64_t (**)())off_24C335D90;
  v109 = SHIBYTE(v136.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v136.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v401, v136.__r_.__value_.__l.__data_, v136.__r_.__value_.__l.__size_);
  else
    v401 = v136;
  v400 = off_24C335B18;
  v403 = v138;
  v402 = v137;
  v404 = v139;
  v396 = (uint64_t (**)())off_24C335D90;
  v110 = SHIBYTE(v132.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v132.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v397, v132.__r_.__value_.__l.__data_, v132.__r_.__value_.__l.__size_);
  else
    v397 = v132;
  v398 = v133;
  v396 = off_24C335AF8;
  v399 = v134;
  v392 = (uint64_t (**)())off_24C335D90;
  v111 = SHIBYTE(v128.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v128.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&__p, v128.__r_.__value_.__l.__data_, v128.__r_.__value_.__l.__size_);
  else
    __p = v128;
  v394 = v129;
  v392 = off_24C335AF8;
  v395 = v130;
  mediaplatform::DatabaseColumnTuple<29ul,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::DatabaseColumnTuple(v127, (uint64_t)&v644, (uint64_t)&v640, (uint64_t)&v636, (uint64_t)&v632, (uint64_t)&v628, (uint64_t)&v624, (uint64_t)&v620, (uint64_t)&v615, (uint64_t)&v611, (uint64_t)&v607, (uint64_t)&v603, (uint64_t)&v599, (uint64_t)&v595, (uint64_t)&v590, (uint64_t)&v585, (uint64_t)&v581, (uint64_t)&v576, (uint64_t)&v571,
    (uint64_t)&v567,
    (uint64_t)&v563,
    (uint64_t)&v559,
    (uint64_t)&v555,
    (uint64_t)&v550,
    (uint64_t)&v545,
    (uint64_t)&v540,
    (uint64_t)&v535,
    (uint64_t)&v530,
    (uint64_t)&v526,
    (uint64_t)&v522,
    (uint64_t)&v518,
    (uint64_t)&v514,
    (uint64_t)&v510,
    (uint64_t)&v506,
    (uint64_t)&v502,
    (uint64_t)&v497,
    (uint64_t)&v492,
    (uint64_t)&v487,
    (uint64_t)&v483,
    (uint64_t)&v478,
    (uint64_t)&v474,
    (uint64_t)&v469,
    (uint64_t)&v464,
    (uint64_t)&v459,
    (uint64_t)&v454,
    (uint64_t)&v450,
    (uint64_t)&v445,
    (uint64_t)&v441,
    (uint64_t)&v436,
    (uint64_t)&v432,
    (uint64_t)&v427,
    (uint64_t)&v423,
    (uint64_t)&v419,
    (uint64_t)&v415,
    (uint64_t)&v410,
    (uint64_t)&v405,
    (uint64_t)&v400,
    (uint64_t)&v396,
    (uint64_t)&v392);
  v392 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v396 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v397.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v397.__r_.__value_.__l.__data_);
  v400 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v401.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v401.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v405);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v410);
  v415 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v416.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v416.__r_.__value_.__l.__data_);
  v419 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v420.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v420.__r_.__value_.__l.__data_);
  v423 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v424.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v424.__r_.__value_.__l.__data_);
  v427 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v428.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v428.__r_.__value_.__l.__data_);
  v432 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v433.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v433.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v436);
  v441 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v442.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v442.__r_.__value_.__l.__data_);
  v445 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v446.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v446.__r_.__value_.__l.__data_);
  v450 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v451.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v451.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v454);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v459);
  v464 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v465.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v465.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v469);
  v474 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v475.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v475.__r_.__value_.__l.__data_);
  v478 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v479.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v479.__r_.__value_.__l.__data_);
  v483 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v484.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v484.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v487);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v492);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v497);
  v502 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v503.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v503.__r_.__value_.__l.__data_);
  v506 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v507.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v507.__r_.__value_.__l.__data_);
  v510 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v511.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v511.__r_.__value_.__l.__data_);
  v514 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v515.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v515.__r_.__value_.__l.__data_);
  v518 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v519.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v519.__r_.__value_.__l.__data_);
  v522 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v523.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v523.__r_.__value_.__l.__data_);
  v526 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v527.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v527.__r_.__value_.__l.__data_);
  v530 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v531.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v531.__r_.__value_.__l.__data_);
  v535 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v536.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v536.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v540);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v545);
  v550 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v551.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v551.__r_.__value_.__l.__data_);
  v555 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v556.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v556.__r_.__value_.__l.__data_);
  v559 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v560.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v560.__r_.__value_.__l.__data_);
  v563 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v564.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v564.__r_.__value_.__l.__data_);
  v567 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v568.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v568.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v571);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v576);
  v581 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v582.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v582.__r_.__value_.__l.__data_);
  v585 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v586.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v586.__r_.__value_.__l.__data_);
  v590 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v591.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v591.__r_.__value_.__l.__data_);
  v595 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v596.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v596.__r_.__value_.__l.__data_);
  v599 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v600.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v600.__r_.__value_.__l.__data_);
  v603 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v604.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v604.__r_.__value_.__l.__data_);
  v607 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v608.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v608.__r_.__value_.__l.__data_);
  v611 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v612.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v612.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v615);
  v620 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v621.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v621.__r_.__value_.__l.__data_);
  v624 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v625.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v625.__r_.__value_.__l.__data_);
  v628 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v629.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v629.__r_.__value_.__l.__data_);
  v632 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v633.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v633.__r_.__value_.__l.__data_);
  v636 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v637.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v637.__r_.__value_.__l.__data_);
  v640 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v641.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v641.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<mediaplatform::Data>::~DatabaseColumn((uint64_t)&v644);
  *(_QWORD *)(v127 + 3040) = off_24C335D90;
  v112 = (std::string *)(v127 + 3048);
  v113 = SHIBYTE(v389.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v389.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v112, v389.__r_.__value_.__l.__data_, v389.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v112->__r_.__value_.__l.__data_ = *(_OWORD *)&v389.__r_.__value_.__l.__data_;
    *(_QWORD *)(v127 + 3064) = *((_QWORD *)&v389.__r_.__value_.__l + 2);
  }
  *(_DWORD *)(v127 + 3072) = v390;
  *(_QWORD *)(v127 + 3040) = off_24C335AF8;
  *(_QWORD *)(v127 + 3076) = v391;
  if (v111 < 0)
    operator delete(v128.__r_.__value_.__l.__data_);
  v131 = (uint64_t (**)())off_24C335D90;
  if (v110 < 0)
    operator delete(v132.__r_.__value_.__l.__data_);
  v135 = (uint64_t (**)())off_24C335D90;
  if (v109 < 0)
    operator delete(v136.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v140);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v145);
  v150 = (uint64_t (**)())off_24C335D90;
  if (v108 < 0)
    operator delete(v151.__r_.__value_.__l.__data_);
  v154 = (uint64_t (**)())off_24C335D90;
  if (v107 < 0)
    operator delete(v155.__r_.__value_.__l.__data_);
  v158 = (uint64_t (**)())off_24C335D90;
  if (v106 < 0)
    operator delete(v159.__r_.__value_.__l.__data_);
  v162 = (uint64_t (**)())off_24C335D90;
  if (v105 < 0)
    operator delete(v163.__r_.__value_.__l.__data_);
  v167 = (uint64_t (**)())off_24C335D90;
  if (v119 < 0)
    operator delete(v168.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v171);
  v176 = (uint64_t (**)())off_24C335D90;
  if (v123 < 0)
    operator delete(v177.__r_.__value_.__l.__data_);
  v180 = (uint64_t (**)())off_24C335D90;
  if (v124 < 0)
    operator delete(v181.__r_.__value_.__l.__data_);
  v185 = (uint64_t (**)())off_24C335D90;
  if (v125 < 0)
    operator delete(v186.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v189);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v194);
  v199 = (uint64_t (**)())off_24C335D90;
  if (v126 < 0)
    operator delete(v200.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v204);
  v209 = (uint64_t (**)())off_24C335D90;
  if (v121 < 0)
    operator delete(v210.__r_.__value_.__l.__data_);
  v213 = (uint64_t (**)())off_24C335D90;
  if (v122 < 0)
    operator delete(v214.__r_.__value_.__l.__data_);
  v218 = (uint64_t (**)())off_24C335D90;
  if (v120 < 0)
    operator delete(v219.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v222);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v227);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v232);
  v237 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v238.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v238.__r_.__value_.__l.__data_);
  v241 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v242.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v242.__r_.__value_.__l.__data_);
  v245 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v246.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v246.__r_.__value_.__l.__data_);
  v249 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v250.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v250.__r_.__value_.__l.__data_);
  v253 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v254.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v254.__r_.__value_.__l.__data_);
  v257 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v258.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v258.__r_.__value_.__l.__data_);
  v261 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v262.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v262.__r_.__value_.__l.__data_);
  v265 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v266.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v266.__r_.__value_.__l.__data_);
  if (SHIBYTE(v271.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v271.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v275);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v280);
  if (SHIBYTE(v286.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v286.__r_.__value_.__l.__data_);
  if (SHIBYTE(v291.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v291.__r_.__value_.__l.__data_);
  if (SHIBYTE(v295.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v295.__r_.__value_.__l.__data_);
  if (SHIBYTE(v299.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v299.__r_.__value_.__l.__data_);
  if (SHIBYTE(v303.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v303.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v306);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v311);
  if (SHIBYTE(v317.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v317.__r_.__value_.__l.__data_);
  if (SHIBYTE(v321.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v321.__r_.__value_.__l.__data_);
  if (SHIBYTE(v326.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v326.__r_.__value_.__l.__data_);
  if (SHIBYTE(v331.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v331.__r_.__value_.__l.__data_);
  if (SHIBYTE(v335.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v335.__r_.__value_.__l.__data_);
  if (SHIBYTE(v339.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v339.__r_.__value_.__l.__data_);
  if (SHIBYTE(v343.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v343.__r_.__value_.__l.__data_);
  if (SHIBYTE(v347.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v347.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v350);
  if (SHIBYTE(v356.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v356.__r_.__value_.__l.__data_);
  if (SHIBYTE(v360.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v360.__r_.__value_.__l.__data_);
  if (SHIBYTE(v364.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v364.__r_.__value_.__l.__data_);
  if (SHIBYTE(v368.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v368.__r_.__value_.__l.__data_);
  if (SHIBYTE(v372.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v372.__r_.__value_.__l.__data_);
  if (SHIBYTE(v376.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v376.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<mediaplatform::Data>::~DatabaseColumn((uint64_t)&v379);
  if (v113 < 0)
    operator delete(v389.__r_.__value_.__l.__data_);
  *(_QWORD *)(v127 + 3088) = off_24C335D90;
  v114 = (std::string *)(v127 + 3096);
  if (*(char *)(v118 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v114, *(const std::string::value_type **)(v118 + 8), *(_QWORD *)(v118 + 16));
  }
  else
  {
    v115 = *(_OWORD *)(v118 + 8);
    *(_QWORD *)(v127 + 3112) = *(_QWORD *)(v118 + 24);
    *(_OWORD *)&v114->__r_.__value_.__l.__data_ = v115;
  }
  result = v127;
  *(_DWORD *)(v127 + 3120) = *(_DWORD *)(v118 + 32);
  *(_QWORD *)(v127 + 3088) = off_24C335B18;
  v117 = *(_QWORD *)(v118 + 36);
  *(_DWORD *)(v127 + 3132) = *(_DWORD *)(v118 + 44);
  *(_QWORD *)(v127 + 3124) = v117;
  return result;
}

void sub_20A7B9748(_Unwind_Exception *a1)
{
  mediaplatform::DatabaseColumnTuple<28ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(STACK[0x3E0]);
  _Unwind_Resume(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<27ul,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(uint64_t a1)
{
  *(_QWORD *)(a1 + 3088) = off_24C335D90;
  if (*(char *)(a1 + 3119) < 0)
    operator delete(*(void **)(a1 + 3096));
  return mediaplatform::DatabaseColumnTuple<28ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<29ul,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::DatabaseColumnTuple(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59)
{
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  int v74;
  int v75;
  int v76;
  int v77;
  int v78;
  int v79;
  int v80;
  int v81;
  int v82;
  int v83;
  int v84;
  int v85;
  int v86;
  int v87;
  int v88;
  int v89;
  int v90;
  int v91;
  int v92;
  int v93;
  int v94;
  int v95;
  int v96;
  int v97;
  int v98;
  int v99;
  int v100;
  int v101;
  int v102;
  int v103;
  std::string *v104;
  int v105;
  __int128 v106;
  uint64_t v108;
  int v109;
  uint64_t v110;
  int v111;
  int v112;
  int v113;
  int v114;
  int v115;
  int v116;
  int v117;
  int v118;
  std::string v119;
  int v120;
  uint64_t v121;
  uint64_t (**v122)();
  std::string v123;
  int v124;
  uint64_t v125;
  uint64_t (**v126)();
  std::string v127;
  int v128;
  uint64_t v129;
  int v130;
  uint64_t (**v131)();
  std::string v132;
  int v133;
  char v134;
  std::string v135;
  uint64_t (**v136)();
  std::string v137;
  int v138;
  char v139;
  std::string v140;
  uint64_t (**v141)();
  std::string v142;
  int v143;
  uint64_t v144;
  uint64_t (**v145)();
  std::string v146;
  int v147;
  uint64_t v148;
  uint64_t (**v149)();
  std::string v150;
  int v151;
  uint64_t v152;
  uint64_t (**v153)();
  std::string v154;
  int v155;
  uint64_t v156;
  int v157;
  uint64_t (**v158)();
  std::string v159;
  int v160;
  uint64_t v161;
  uint64_t (**v162)();
  std::string v163;
  int v164;
  char v165;
  std::string v166;
  uint64_t (**v167)();
  std::string v168;
  int v169;
  uint64_t v170;
  uint64_t (**v171)();
  std::string v172;
  int v173;
  uint64_t v174;
  int v175;
  uint64_t (**v176)();
  std::string v177;
  int v178;
  uint64_t v179;
  uint64_t (**v180)();
  std::string v181;
  int v182;
  char v183;
  std::string v184;
  uint64_t (**v185)();
  std::string v186;
  int v187;
  char v188;
  std::string v189;
  uint64_t (**v190)();
  std::string v191;
  int v192;
  uint64_t v193;
  int v194;
  uint64_t (**v195)();
  std::string v196;
  int v197;
  char v198;
  std::string v199;
  uint64_t (**v200)();
  std::string v201;
  int v202;
  uint64_t v203;
  uint64_t (**v204)();
  std::string v205;
  int v206;
  uint64_t v207;
  int v208;
  uint64_t (**v209)();
  std::string v210;
  int v211;
  uint64_t v212;
  uint64_t (**v213)();
  std::string v214;
  int v215;
  char v216;
  std::string v217;
  uint64_t (**v218)();
  std::string v219;
  int v220;
  char v221;
  std::string v222;
  uint64_t (**v223)();
  std::string v224;
  int v225;
  char v226;
  std::string v227;
  uint64_t (**v228)();
  std::string v229;
  int v230;
  uint64_t v231;
  uint64_t (**v232)();
  std::string v233;
  int v234;
  uint64_t v235;
  uint64_t (**v236)();
  std::string v237;
  int v238;
  uint64_t v239;
  uint64_t (**v240)();
  std::string v241;
  int v242;
  uint64_t v243;
  uint64_t (**v244)();
  std::string v245;
  int v246;
  uint64_t v247;
  uint64_t (**v248)();
  std::string v249;
  int v250;
  uint64_t v251;
  uint64_t (**v252)();
  std::string v253;
  int v254;
  uint64_t v255;
  uint64_t (**v256)();
  std::string v257;
  int v258;
  uint64_t v259;
  int v260;
  uint64_t (**v261)();
  std::string v262;
  int v263;
  uint64_t v264;
  int v265;
  uint64_t (**v266)();
  std::string v267;
  int v268;
  char v269;
  std::string v270;
  uint64_t (**v271)();
  std::string v272;
  int v273;
  char v274;
  std::string v275;
  uint64_t (**v276)();
  std::string v277;
  int v278;
  uint64_t v279;
  int v280;
  uint64_t (**v281)();
  std::string v282;
  int v283;
  uint64_t v284;
  uint64_t (**v285)();
  std::string v286;
  int v287;
  uint64_t v288;
  uint64_t (**v289)();
  std::string v290;
  int v291;
  uint64_t v292;
  uint64_t (**v293)();
  std::string v294;
  int v295;
  uint64_t v296;
  uint64_t (**v297)();
  std::string v298;
  int v299;
  char v300;
  std::string v301;
  uint64_t (**v302)();
  std::string v303;
  int v304;
  char v305;
  std::string v306;
  uint64_t (**v307)();
  std::string v308;
  int v309;
  uint64_t v310;
  uint64_t (**v311)();
  std::string v312;
  int v313;
  uint64_t v314;
  int v315;
  uint64_t (**v316)();
  std::string v317;
  int v318;
  uint64_t v319;
  int v320;
  uint64_t (**v321)();
  std::string v322;
  int v323;
  uint64_t v324;
  uint64_t (**v325)();
  std::string v326;
  int v327;
  uint64_t v328;
  uint64_t (**v329)();
  std::string v330;
  int v331;
  uint64_t v332;
  uint64_t (**v333)();
  std::string v334;
  int v335;
  uint64_t v336;
  uint64_t (**v337)();
  std::string v338;
  int v339;
  uint64_t v340;
  uint64_t (**v341)();
  std::string v342;
  int v343;
  char v344;
  std::string v345;
  uint64_t (**v346)();
  std::string v347;
  int v348;
  uint64_t v349;
  uint64_t (**v350)();
  std::string v351;
  int v352;
  uint64_t v353;
  uint64_t (**v354)();
  std::string v355;
  int v356;
  uint64_t v357;
  uint64_t (**v358)();
  std::string v359;
  int v360;
  uint64_t v361;
  uint64_t (**v362)();
  std::string __s;
  int v364;
  uint64_t v365;
  uint64_t (**v366)();
  std::string v367;
  int v368;
  uint64_t v369;
  uint64_t (**v370)();
  std::string __p;
  int v372;
  uint64_t v373;
  uint64_t (**v374)();
  std::string v375;
  int v376;
  uint64_t v377;
  uint64_t (**v378)();
  std::string v379;
  int v380;
  uint64_t v381;
  int v382;
  uint64_t (**v383)();
  std::string v384;
  int v385;
  char v386;
  std::string v387;
  uint64_t (**v388)();
  std::string v389;
  int v390;
  char v391;
  std::string v392;
  uint64_t (**v393)();
  std::string v394;
  int v395;
  uint64_t v396;
  uint64_t (**v397)();
  std::string v398;
  int v399;
  uint64_t v400;
  uint64_t (**v401)();
  std::string v402;
  int v403;
  uint64_t v404;
  uint64_t (**v405)();
  std::string v406;
  int v407;
  uint64_t v408;
  int v409;
  uint64_t (**v410)();
  std::string v411;
  int v412;
  uint64_t v413;
  uint64_t (**v414)();
  std::string v415;
  int v416;
  char v417;
  std::string v418;
  uint64_t (**v419)();
  std::string v420;
  int v421;
  uint64_t v422;
  uint64_t (**v423)();
  std::string v424;
  int v425;
  uint64_t v426;
  int v427;
  uint64_t (**v428)();
  std::string v429;
  int v430;
  uint64_t v431;
  uint64_t (**v432)();
  std::string v433;
  int v434;
  char v435;
  std::string v436;
  uint64_t (**v437)();
  std::string v438;
  int v439;
  char v440;
  std::string v441;
  uint64_t (**v442)();
  std::string v443;
  int v444;
  uint64_t v445;
  int v446;
  uint64_t (**v447)();
  std::string v448;
  int v449;
  char v450;
  std::string v451;
  uint64_t (**v452)();
  std::string v453;
  int v454;
  uint64_t v455;
  uint64_t (**v456)();
  std::string v457;
  int v458;
  uint64_t v459;
  int v460;
  uint64_t (**v461)();
  std::string v462;
  int v463;
  uint64_t v464;
  uint64_t (**v465)();
  std::string v466;
  int v467;
  char v468;
  std::string v469;
  uint64_t (**v470)();
  std::string v471;
  int v472;
  char v473;
  std::string v474;
  uint64_t (**v475)();
  std::string v476;
  int v477;
  char v478;
  std::string v479;
  uint64_t (**v480)();
  std::string v481;
  int v482;
  uint64_t v483;
  uint64_t (**v484)();
  std::string v485;
  int v486;
  uint64_t v487;
  uint64_t (**v488)();
  std::string v489;
  int v490;
  uint64_t v491;
  uint64_t (**v492)();
  std::string v493;
  int v494;
  uint64_t v495;
  uint64_t (**v496)();
  std::string v497;
  int v498;
  uint64_t v499;
  uint64_t (**v500)();
  std::string v501;
  int v502;
  uint64_t v503;
  uint64_t (**v504)();
  std::string v505;
  int v506;
  uint64_t v507;
  uint64_t (**v508)();
  std::string v509;
  int v510;
  uint64_t v511;
  int v512;
  uint64_t (**v513)();
  std::string v514;
  int v515;
  uint64_t v516;
  int v517;
  uint64_t (**v518)();
  std::string v519;
  int v520;
  char v521;
  std::string v522;
  uint64_t (**v523)();
  std::string v524;
  int v525;
  char v526;
  std::string v527;
  uint64_t (**v528)();
  std::string v529;
  int v530;
  uint64_t v531;
  int v532;
  uint64_t (**v533)();
  std::string v534;
  int v535;
  uint64_t v536;
  uint64_t (**v537)();
  std::string v538;
  int v539;
  uint64_t v540;
  uint64_t (**v541)();
  std::string v542;
  int v543;
  uint64_t v544;
  uint64_t (**v545)();
  std::string v546;
  int v547;
  uint64_t v548;
  uint64_t (**v549)();
  std::string v550;
  int v551;
  char v552;
  std::string v553;
  uint64_t (**v554)();
  std::string v555;
  int v556;
  char v557;
  std::string v558;
  uint64_t (**v559)();
  std::string v560;
  int v561;
  uint64_t v562;
  uint64_t (**v563)();
  std::string v564;
  int v565;
  uint64_t v566;
  int v567;
  uint64_t (**v568)();
  std::string v569;
  int v570;
  uint64_t v571;
  int v572;
  uint64_t (**v573)();
  std::string v574;
  int v575;
  uint64_t v576;
  uint64_t (**v577)();
  std::string v578;
  int v579;
  uint64_t v580;
  uint64_t (**v581)();
  std::string v582;
  int v583;
  uint64_t v584;
  uint64_t (**v585)();
  std::string v586;
  int v587;
  uint64_t v588;
  uint64_t (**v589)();
  std::string v590;
  int v591;
  uint64_t v592;
  uint64_t (**v593)();
  std::string v594;
  int v595;
  char v596;
  std::string v597;
  uint64_t (**v598)();
  std::string v599;
  int v600;
  uint64_t v601;
  uint64_t (**v602)();
  std::string v603;
  int v604;
  uint64_t v605;
  uint64_t (**v606)();
  std::string v607;
  int v608;
  uint64_t v609;
  uint64_t (**v610)();
  std::string v611;
  int v612;
  uint64_t v613;
  uint64_t (**v614)();
  std::string v615;
  int v616;
  uint64_t v617;

  v59 = MEMORY[0x24BDAC7A8](a1);
  v62 = v61;
  v64 = v63;
  v66 = v65;
  v68 = v67;
  v70 = v69;
  v71 = v60;
  v73 = v72;
  v110 = v59;
  if (*(char *)(v60 + 31) < 0)
    std::string::__init_copy_ctor_external(&v367, *(const std::string::value_type **)(v60 + 8), *(_QWORD *)(v60 + 16));
  else
    v367 = *(std::string *)(v60 + 8);
  v368 = *(_DWORD *)(v71 + 32);
  v366 = off_24C335AF8;
  v369 = *(_QWORD *)(v71 + 36);
  if (*(char *)(v70 + 31) < 0)
    std::string::__init_copy_ctor_external(&__s, *(const std::string::value_type **)(v70 + 8), *(_QWORD *)(v70 + 16));
  else
    __s = *(std::string *)(v70 + 8);
  v364 = *(_DWORD *)(v70 + 32);
  v362 = off_24C335AF8;
  v365 = *(_QWORD *)(v70 + 36);
  if (*(char *)(v68 + 31) < 0)
    std::string::__init_copy_ctor_external(&v359, *(const std::string::value_type **)(v68 + 8), *(_QWORD *)(v68 + 16));
  else
    v359 = *(std::string *)(v68 + 8);
  v360 = *(_DWORD *)(v68 + 32);
  v358 = off_24C335AF8;
  v361 = *(_QWORD *)(v68 + 36);
  if (*(char *)(v66 + 31) < 0)
    std::string::__init_copy_ctor_external(&v355, *(const std::string::value_type **)(v66 + 8), *(_QWORD *)(v66 + 16));
  else
    v355 = *(std::string *)(v66 + 8);
  v356 = *(_DWORD *)(v66 + 32);
  v354 = off_24C335AF8;
  v357 = *(_QWORD *)(v66 + 36);
  if (*(char *)(v64 + 31) < 0)
    std::string::__init_copy_ctor_external(&v351, *(const std::string::value_type **)(v64 + 8), *(_QWORD *)(v64 + 16));
  else
    v351 = *(std::string *)(v64 + 8);
  v352 = *(_DWORD *)(v64 + 32);
  v350 = off_24C335AF8;
  v353 = *(_QWORD *)(v64 + 36);
  if (*(char *)(v62 + 31) < 0)
    std::string::__init_copy_ctor_external(&v347, *(const std::string::value_type **)(v62 + 8), *(_QWORD *)(v62 + 16));
  else
    v347 = *(std::string *)(v62 + 8);
  v348 = *(_DWORD *)(v62 + 32);
  v346 = off_24C335AF8;
  v349 = *(_QWORD *)(v62 + 36);
  v341 = (uint64_t (**)())off_24C335D90;
  v108 = v73;
  if (*(char *)(a9 + 31) < 0)
    std::string::__init_copy_ctor_external(&v342, *(const std::string::value_type **)(a9 + 8), *(_QWORD *)(a9 + 16));
  else
    v342 = *(std::string *)(a9 + 8);
  v343 = *(_DWORD *)(a9 + 32);
  v341 = &off_24C335AB8;
  v344 = *(_BYTE *)(a9 + 36);
  if (*(char *)(a9 + 63) < 0)
    std::string::__init_copy_ctor_external(&v345, *(const std::string::value_type **)(a9 + 40), *(_QWORD *)(a9 + 48));
  else
    v345 = *(std::string *)(a9 + 40);
  if (*(char *)(a10 + 31) < 0)
    std::string::__init_copy_ctor_external(&v338, *(const std::string::value_type **)(a10 + 8), *(_QWORD *)(a10 + 16));
  else
    v338 = *(std::string *)(a10 + 8);
  v339 = *(_DWORD *)(a10 + 32);
  v337 = off_24C335AF8;
  v340 = *(_QWORD *)(a10 + 36);
  if (*(char *)(a11 + 31) < 0)
    std::string::__init_copy_ctor_external(&v334, *(const std::string::value_type **)(a11 + 8), *(_QWORD *)(a11 + 16));
  else
    v334 = *(std::string *)(a11 + 8);
  v335 = *(_DWORD *)(a11 + 32);
  v333 = off_24C335AF8;
  v336 = *(_QWORD *)(a11 + 36);
  if (*(char *)(a12 + 31) < 0)
    std::string::__init_copy_ctor_external(&v330, *(const std::string::value_type **)(a12 + 8), *(_QWORD *)(a12 + 16));
  else
    v330 = *(std::string *)(a12 + 8);
  v331 = *(_DWORD *)(a12 + 32);
  v329 = off_24C335AF8;
  v332 = *(_QWORD *)(a12 + 36);
  if (*(char *)(a13 + 31) < 0)
    std::string::__init_copy_ctor_external(&v326, *(const std::string::value_type **)(a13 + 8), *(_QWORD *)(a13 + 16));
  else
    v326 = *(std::string *)(a13 + 8);
  v327 = *(_DWORD *)(a13 + 32);
  v325 = off_24C335AF8;
  v328 = *(_QWORD *)(a13 + 36);
  if (*(char *)(a14 + 31) < 0)
    std::string::__init_copy_ctor_external(&v322, *(const std::string::value_type **)(a14 + 8), *(_QWORD *)(a14 + 16));
  else
    v322 = *(std::string *)(a14 + 8);
  v323 = *(_DWORD *)(a14 + 32);
  v321 = off_24C335AF8;
  v324 = *(_QWORD *)(a14 + 36);
  if (*(char *)(a15 + 31) < 0)
    std::string::__init_copy_ctor_external(&v317, *(const std::string::value_type **)(a15 + 8), *(_QWORD *)(a15 + 16));
  else
    v317 = *(std::string *)(a15 + 8);
  v74 = *(_DWORD *)(a15 + 32);
  v316 = off_24C335B18;
  v319 = *(_QWORD *)(a15 + 36);
  v75 = *(_DWORD *)(a15 + 44);
  v318 = v74;
  v320 = v75;
  if (*(char *)(a16 + 31) < 0)
    std::string::__init_copy_ctor_external(&v312, *(const std::string::value_type **)(a16 + 8), *(_QWORD *)(a16 + 16));
  else
    v312 = *(std::string *)(a16 + 8);
  v76 = *(_DWORD *)(a16 + 32);
  v311 = off_24C335B18;
  v314 = *(_QWORD *)(a16 + 36);
  v77 = *(_DWORD *)(a16 + 44);
  v313 = v76;
  v315 = v77;
  if (*(char *)(a17 + 31) < 0)
    std::string::__init_copy_ctor_external(&v308, *(const std::string::value_type **)(a17 + 8), *(_QWORD *)(a17 + 16));
  else
    v308 = *(std::string *)(a17 + 8);
  v309 = *(_DWORD *)(a17 + 32);
  v307 = off_24C335AF8;
  v310 = *(_QWORD *)(a17 + 36);
  v302 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a18 + 31) < 0)
    std::string::__init_copy_ctor_external(&v303, *(const std::string::value_type **)(a18 + 8), *(_QWORD *)(a18 + 16));
  else
    v303 = *(std::string *)(a18 + 8);
  v304 = *(_DWORD *)(a18 + 32);
  v302 = &off_24C335AB8;
  v305 = *(_BYTE *)(a18 + 36);
  if (*(char *)(a18 + 63) < 0)
    std::string::__init_copy_ctor_external(&v306, *(const std::string::value_type **)(a18 + 40), *(_QWORD *)(a18 + 48));
  else
    v306 = *(std::string *)(a18 + 40);
  v297 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a19 + 31) < 0)
    std::string::__init_copy_ctor_external(&v298, *(const std::string::value_type **)(a19 + 8), *(_QWORD *)(a19 + 16));
  else
    v298 = *(std::string *)(a19 + 8);
  v299 = *(_DWORD *)(a19 + 32);
  v297 = &off_24C335AB8;
  v300 = *(_BYTE *)(a19 + 36);
  if (*(char *)(a19 + 63) < 0)
    std::string::__init_copy_ctor_external(&v301, *(const std::string::value_type **)(a19 + 40), *(_QWORD *)(a19 + 48));
  else
    v301 = *(std::string *)(a19 + 40);
  if (*(char *)(a20 + 31) < 0)
    std::string::__init_copy_ctor_external(&v294, *(const std::string::value_type **)(a20 + 8), *(_QWORD *)(a20 + 16));
  else
    v294 = *(std::string *)(a20 + 8);
  v295 = *(_DWORD *)(a20 + 32);
  v293 = off_24C335AF8;
  v296 = *(_QWORD *)(a20 + 36);
  if (*(char *)(a21 + 31) < 0)
    std::string::__init_copy_ctor_external(&v290, *(const std::string::value_type **)(a21 + 8), *(_QWORD *)(a21 + 16));
  else
    v290 = *(std::string *)(a21 + 8);
  v291 = *(_DWORD *)(a21 + 32);
  v289 = off_24C335AF8;
  v292 = *(_QWORD *)(a21 + 36);
  if (*(char *)(a22 + 31) < 0)
    std::string::__init_copy_ctor_external(&v286, *(const std::string::value_type **)(a22 + 8), *(_QWORD *)(a22 + 16));
  else
    v286 = *(std::string *)(a22 + 8);
  v287 = *(_DWORD *)(a22 + 32);
  v285 = off_24C335AF8;
  v288 = *(_QWORD *)(a22 + 36);
  if (*(char *)(a23 + 31) < 0)
    std::string::__init_copy_ctor_external(&v282, *(const std::string::value_type **)(a23 + 8), *(_QWORD *)(a23 + 16));
  else
    v282 = *(std::string *)(a23 + 8);
  v283 = *(_DWORD *)(a23 + 32);
  v281 = off_24C335AF8;
  v284 = *(_QWORD *)(a23 + 36);
  if (*(char *)(a24 + 31) < 0)
    std::string::__init_copy_ctor_external(&v277, *(const std::string::value_type **)(a24 + 8), *(_QWORD *)(a24 + 16));
  else
    v277 = *(std::string *)(a24 + 8);
  v78 = *(_DWORD *)(a24 + 32);
  v276 = off_24C335B18;
  v279 = *(_QWORD *)(a24 + 36);
  v79 = *(_DWORD *)(a24 + 44);
  v278 = v78;
  v280 = v79;
  v271 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a25 + 31) < 0)
    std::string::__init_copy_ctor_external(&v272, *(const std::string::value_type **)(a25 + 8), *(_QWORD *)(a25 + 16));
  else
    v272 = *(std::string *)(a25 + 8);
  v273 = *(_DWORD *)(a25 + 32);
  v271 = &off_24C335AB8;
  v274 = *(_BYTE *)(a25 + 36);
  if (*(char *)(a25 + 63) < 0)
    std::string::__init_copy_ctor_external(&v275, *(const std::string::value_type **)(a25 + 40), *(_QWORD *)(a25 + 48));
  else
    v275 = *(std::string *)(a25 + 40);
  v266 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a26 + 31) < 0)
    std::string::__init_copy_ctor_external(&v267, *(const std::string::value_type **)(a26 + 8), *(_QWORD *)(a26 + 16));
  else
    v267 = *(std::string *)(a26 + 8);
  v268 = *(_DWORD *)(a26 + 32);
  v266 = &off_24C335AB8;
  v269 = *(_BYTE *)(a26 + 36);
  if (*(char *)(a26 + 63) < 0)
    std::string::__init_copy_ctor_external(&v270, *(const std::string::value_type **)(a26 + 40), *(_QWORD *)(a26 + 48));
  else
    v270 = *(std::string *)(a26 + 40);
  if (*(char *)(a27 + 31) < 0)
    std::string::__init_copy_ctor_external(&v262, *(const std::string::value_type **)(a27 + 8), *(_QWORD *)(a27 + 16));
  else
    v262 = *(std::string *)(a27 + 8);
  v80 = *(_DWORD *)(a27 + 32);
  v261 = off_24C335B18;
  v264 = *(_QWORD *)(a27 + 36);
  v81 = *(_DWORD *)(a27 + 44);
  v263 = v80;
  v265 = v81;
  if (*(char *)(a28 + 31) < 0)
    std::string::__init_copy_ctor_external(&v257, *(const std::string::value_type **)(a28 + 8), *(_QWORD *)(a28 + 16));
  else
    v257 = *(std::string *)(a28 + 8);
  v82 = *(_DWORD *)(a28 + 32);
  v256 = off_24C335B18;
  v259 = *(_QWORD *)(a28 + 36);
  v83 = *(_DWORD *)(a28 + 44);
  v258 = v82;
  v260 = v83;
  if (*(char *)(a29 + 31) < 0)
    std::string::__init_copy_ctor_external(&v253, *(const std::string::value_type **)(a29 + 8), *(_QWORD *)(a29 + 16));
  else
    v253 = *(std::string *)(a29 + 8);
  v254 = *(_DWORD *)(a29 + 32);
  v252 = off_24C335AF8;
  v255 = *(_QWORD *)(a29 + 36);
  if (*(char *)(a30 + 31) < 0)
    std::string::__init_copy_ctor_external(&v249, *(const std::string::value_type **)(a30 + 8), *(_QWORD *)(a30 + 16));
  else
    v249 = *(std::string *)(a30 + 8);
  v250 = *(_DWORD *)(a30 + 32);
  v248 = off_24C335AF8;
  v251 = *(_QWORD *)(a30 + 36);
  if (*(char *)(a31 + 31) < 0)
    std::string::__init_copy_ctor_external(&v245, *(const std::string::value_type **)(a31 + 8), *(_QWORD *)(a31 + 16));
  else
    v245 = *(std::string *)(a31 + 8);
  v246 = *(_DWORD *)(a31 + 32);
  v244 = off_24C335AF8;
  v247 = *(_QWORD *)(a31 + 36);
  if (*(char *)(a32 + 31) < 0)
    std::string::__init_copy_ctor_external(&v241, *(const std::string::value_type **)(a32 + 8), *(_QWORD *)(a32 + 16));
  else
    v241 = *(std::string *)(a32 + 8);
  v242 = *(_DWORD *)(a32 + 32);
  v240 = off_24C335AF8;
  v243 = *(_QWORD *)(a32 + 36);
  if (*(char *)(a33 + 31) < 0)
    std::string::__init_copy_ctor_external(&v237, *(const std::string::value_type **)(a33 + 8), *(_QWORD *)(a33 + 16));
  else
    v237 = *(std::string *)(a33 + 8);
  v238 = *(_DWORD *)(a33 + 32);
  v236 = off_24C335AF8;
  v239 = *(_QWORD *)(a33 + 36);
  if (*(char *)(a34 + 31) < 0)
    std::string::__init_copy_ctor_external(&v233, *(const std::string::value_type **)(a34 + 8), *(_QWORD *)(a34 + 16));
  else
    v233 = *(std::string *)(a34 + 8);
  v234 = *(_DWORD *)(a34 + 32);
  v232 = off_24C335AF8;
  v235 = *(_QWORD *)(a34 + 36);
  v228 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a35 + 31) < 0)
    std::string::__init_copy_ctor_external(&v229, *(const std::string::value_type **)(a35 + 8), *(_QWORD *)(a35 + 16));
  else
    v229 = *(std::string *)(a35 + 8);
  v230 = *(_DWORD *)(a35 + 32);
  v228 = off_24C335AF8;
  v231 = *(_QWORD *)(a35 + 36);
  v223 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a36 + 31) < 0)
    std::string::__init_copy_ctor_external(&v224, *(const std::string::value_type **)(a36 + 8), *(_QWORD *)(a36 + 16));
  else
    v224 = *(std::string *)(a36 + 8);
  v225 = *(_DWORD *)(a36 + 32);
  v223 = &off_24C335AB8;
  v226 = *(_BYTE *)(a36 + 36);
  if (*(char *)(a36 + 63) < 0)
    std::string::__init_copy_ctor_external(&v227, *(const std::string::value_type **)(a36 + 40), *(_QWORD *)(a36 + 48));
  else
    v227 = *(std::string *)(a36 + 40);
  v218 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a37 + 31) < 0)
    std::string::__init_copy_ctor_external(&v219, *(const std::string::value_type **)(a37 + 8), *(_QWORD *)(a37 + 16));
  else
    v219 = *(std::string *)(a37 + 8);
  v220 = *(_DWORD *)(a37 + 32);
  v218 = &off_24C335AB8;
  v221 = *(_BYTE *)(a37 + 36);
  if (*(char *)(a37 + 63) < 0)
    std::string::__init_copy_ctor_external(&v222, *(const std::string::value_type **)(a37 + 40), *(_QWORD *)(a37 + 48));
  else
    v222 = *(std::string *)(a37 + 40);
  v213 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a38 + 31) < 0)
    std::string::__init_copy_ctor_external(&v214, *(const std::string::value_type **)(a38 + 8), *(_QWORD *)(a38 + 16));
  else
    v214 = *(std::string *)(a38 + 8);
  v215 = *(_DWORD *)(a38 + 32);
  v213 = &off_24C335AB8;
  v216 = *(_BYTE *)(a38 + 36);
  if (*(char *)(a38 + 63) < 0)
    std::string::__init_copy_ctor_external(&v217, *(const std::string::value_type **)(a38 + 40), *(_QWORD *)(a38 + 48));
  else
    v217 = *(std::string *)(a38 + 40);
  v209 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a39 + 31) < 0)
    std::string::__init_copy_ctor_external(&v210, *(const std::string::value_type **)(a39 + 8), *(_QWORD *)(a39 + 16));
  else
    v210 = *(std::string *)(a39 + 8);
  v211 = *(_DWORD *)(a39 + 32);
  v209 = off_24C335AF8;
  v212 = *(_QWORD *)(a39 + 36);
  v204 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a40 + 31) < 0)
    std::string::__init_copy_ctor_external(&v205, *(const std::string::value_type **)(a40 + 8), *(_QWORD *)(a40 + 16));
  else
    v205 = *(std::string *)(a40 + 8);
  v84 = *(_DWORD *)(a40 + 32);
  v204 = off_24C335B18;
  v207 = *(_QWORD *)(a40 + 36);
  v85 = *(_DWORD *)(a40 + 44);
  v206 = v84;
  v208 = v85;
  v200 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a41 + 31) < 0)
    std::string::__init_copy_ctor_external(&v201, *(const std::string::value_type **)(a41 + 8), *(_QWORD *)(a41 + 16));
  else
    v201 = *(std::string *)(a41 + 8);
  v202 = *(_DWORD *)(a41 + 32);
  v200 = off_24C335AF8;
  v203 = *(_QWORD *)(a41 + 36);
  v195 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a42 + 31) < 0)
    std::string::__init_copy_ctor_external(&v196, *(const std::string::value_type **)(a42 + 8), *(_QWORD *)(a42 + 16));
  else
    v196 = *(std::string *)(a42 + 8);
  v197 = *(_DWORD *)(a42 + 32);
  v195 = &off_24C335AB8;
  v198 = *(_BYTE *)(a42 + 36);
  if (*(char *)(a42 + 63) < 0)
    std::string::__init_copy_ctor_external(&v199, *(const std::string::value_type **)(a42 + 40), *(_QWORD *)(a42 + 48));
  else
    v199 = *(std::string *)(a42 + 40);
  v190 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a43 + 31) < 0)
    std::string::__init_copy_ctor_external(&v191, *(const std::string::value_type **)(a43 + 8), *(_QWORD *)(a43 + 16));
  else
    v191 = *(std::string *)(a43 + 8);
  v86 = *(_DWORD *)(a43 + 32);
  v190 = off_24C335B18;
  v193 = *(_QWORD *)(a43 + 36);
  v87 = *(_DWORD *)(a43 + 44);
  v192 = v86;
  v194 = v87;
  v185 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a44 + 31) < 0)
    std::string::__init_copy_ctor_external(&v186, *(const std::string::value_type **)(a44 + 8), *(_QWORD *)(a44 + 16));
  else
    v186 = *(std::string *)(a44 + 8);
  v187 = *(_DWORD *)(a44 + 32);
  v185 = &off_24C335AB8;
  v188 = *(_BYTE *)(a44 + 36);
  if (*(char *)(a44 + 63) < 0)
    std::string::__init_copy_ctor_external(&v189, *(const std::string::value_type **)(a44 + 40), *(_QWORD *)(a44 + 48));
  else
    v189 = *(std::string *)(a44 + 40);
  v180 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a45 + 31) < 0)
    std::string::__init_copy_ctor_external(&v181, *(const std::string::value_type **)(a45 + 8), *(_QWORD *)(a45 + 16));
  else
    v181 = *(std::string *)(a45 + 8);
  v182 = *(_DWORD *)(a45 + 32);
  v180 = &off_24C335AB8;
  v183 = *(_BYTE *)(a45 + 36);
  if (*(char *)(a45 + 63) < 0)
    std::string::__init_copy_ctor_external(&v184, *(const std::string::value_type **)(a45 + 40), *(_QWORD *)(a45 + 48));
  else
    v184 = *(std::string *)(a45 + 40);
  v176 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a46 + 31) < 0)
    std::string::__init_copy_ctor_external(&v177, *(const std::string::value_type **)(a46 + 8), *(_QWORD *)(a46 + 16));
  else
    v177 = *(std::string *)(a46 + 8);
  v178 = *(_DWORD *)(a46 + 32);
  v176 = off_24C335AF8;
  v179 = *(_QWORD *)(a46 + 36);
  v171 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a47 + 31) < 0)
    std::string::__init_copy_ctor_external(&v172, *(const std::string::value_type **)(a47 + 8), *(_QWORD *)(a47 + 16));
  else
    v172 = *(std::string *)(a47 + 8);
  v88 = *(_DWORD *)(a47 + 32);
  v171 = off_24C335B18;
  v174 = *(_QWORD *)(a47 + 36);
  v89 = *(_DWORD *)(a47 + 44);
  v173 = v88;
  v175 = v89;
  v167 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a48 + 31) < 0)
    std::string::__init_copy_ctor_external(&v168, *(const std::string::value_type **)(a48 + 8), *(_QWORD *)(a48 + 16));
  else
    v168 = *(std::string *)(a48 + 8);
  v169 = *(_DWORD *)(a48 + 32);
  v167 = off_24C335AF8;
  v170 = *(_QWORD *)(a48 + 36);
  v162 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a49 + 31) < 0)
    std::string::__init_copy_ctor_external(&v163, *(const std::string::value_type **)(a49 + 8), *(_QWORD *)(a49 + 16));
  else
    v163 = *(std::string *)(a49 + 8);
  v164 = *(_DWORD *)(a49 + 32);
  v162 = &off_24C335AB8;
  v165 = *(_BYTE *)(a49 + 36);
  if (*(char *)(a49 + 63) < 0)
    std::string::__init_copy_ctor_external(&v166, *(const std::string::value_type **)(a49 + 40), *(_QWORD *)(a49 + 48));
  else
    v166 = *(std::string *)(a49 + 40);
  v158 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a50 + 31) < 0)
    std::string::__init_copy_ctor_external(&v159, *(const std::string::value_type **)(a50 + 8), *(_QWORD *)(a50 + 16));
  else
    v159 = *(std::string *)(a50 + 8);
  v160 = *(_DWORD *)(a50 + 32);
  v158 = off_24C335AF8;
  v161 = *(_QWORD *)(a50 + 36);
  v153 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a51 + 31) < 0)
    std::string::__init_copy_ctor_external(&v154, *(const std::string::value_type **)(a51 + 8), *(_QWORD *)(a51 + 16));
  else
    v154 = *(std::string *)(a51 + 8);
  v90 = *(_DWORD *)(a51 + 32);
  v153 = off_24C335B18;
  v156 = *(_QWORD *)(a51 + 36);
  v91 = *(_DWORD *)(a51 + 44);
  v155 = v90;
  v157 = v91;
  v149 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a52 + 31) < 0)
    std::string::__init_copy_ctor_external(&v150, *(const std::string::value_type **)(a52 + 8), *(_QWORD *)(a52 + 16));
  else
    v150 = *(std::string *)(a52 + 8);
  v151 = *(_DWORD *)(a52 + 32);
  v149 = off_24C335AF8;
  v152 = *(_QWORD *)(a52 + 36);
  v145 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a53 + 31) < 0)
    std::string::__init_copy_ctor_external(&v146, *(const std::string::value_type **)(a53 + 8), *(_QWORD *)(a53 + 16));
  else
    v146 = *(std::string *)(a53 + 8);
  v147 = *(_DWORD *)(a53 + 32);
  v145 = off_24C335AF8;
  v148 = *(_QWORD *)(a53 + 36);
  v141 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a54 + 31) < 0)
    std::string::__init_copy_ctor_external(&v142, *(const std::string::value_type **)(a54 + 8), *(_QWORD *)(a54 + 16));
  else
    v142 = *(std::string *)(a54 + 8);
  v143 = *(_DWORD *)(a54 + 32);
  v141 = off_24C335AF8;
  v144 = *(_QWORD *)(a54 + 36);
  v136 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a55 + 31) < 0)
    std::string::__init_copy_ctor_external(&v137, *(const std::string::value_type **)(a55 + 8), *(_QWORD *)(a55 + 16));
  else
    v137 = *(std::string *)(a55 + 8);
  v138 = *(_DWORD *)(a55 + 32);
  v136 = &off_24C335AB8;
  v139 = *(_BYTE *)(a55 + 36);
  if (*(char *)(a55 + 63) < 0)
    std::string::__init_copy_ctor_external(&v140, *(const std::string::value_type **)(a55 + 40), *(_QWORD *)(a55 + 48));
  else
    v140 = *(std::string *)(a55 + 40);
  v131 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a56 + 31) < 0)
    std::string::__init_copy_ctor_external(&v132, *(const std::string::value_type **)(a56 + 8), *(_QWORD *)(a56 + 16));
  else
    v132 = *(std::string *)(a56 + 8);
  v133 = *(_DWORD *)(a56 + 32);
  v131 = &off_24C335AB8;
  v134 = *(_BYTE *)(a56 + 36);
  if (*(char *)(a56 + 63) < 0)
    std::string::__init_copy_ctor_external(&v135, *(const std::string::value_type **)(a56 + 40), *(_QWORD *)(a56 + 48));
  else
    v135 = *(std::string *)(a56 + 40);
  v126 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a57 + 31) < 0)
    std::string::__init_copy_ctor_external(&v127, *(const std::string::value_type **)(a57 + 8), *(_QWORD *)(a57 + 16));
  else
    v127 = *(std::string *)(a57 + 8);
  v92 = *(_DWORD *)(a57 + 32);
  v126 = off_24C335B18;
  v129 = *(_QWORD *)(a57 + 36);
  v93 = *(_DWORD *)(a57 + 44);
  v128 = v92;
  v130 = v93;
  v122 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a58 + 31) < 0)
    std::string::__init_copy_ctor_external(&v123, *(const std::string::value_type **)(a58 + 8), *(_QWORD *)(a58 + 16));
  else
    v123 = *(std::string *)(a58 + 8);
  v124 = *(_DWORD *)(a58 + 32);
  v122 = off_24C335AF8;
  v125 = *(_QWORD *)(a58 + 36);
  if (*(char *)(a59 + 31) < 0)
    std::string::__init_copy_ctor_external(&v119, *(const std::string::value_type **)(a59 + 8), *(_QWORD *)(a59 + 16));
  else
    v119 = *(std::string *)(a59 + 8);
  v120 = *(_DWORD *)(a59 + 32);
  v121 = *(_QWORD *)(a59 + 36);
  v614 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v615, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
  else
    v615 = __s;
  v616 = v364;
  v614 = off_24C335AF8;
  v617 = v365;
  v610 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v359.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v611, v359.__r_.__value_.__l.__data_, v359.__r_.__value_.__l.__size_);
  else
    v611 = v359;
  v612 = v360;
  v610 = off_24C335AF8;
  v613 = v361;
  v606 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v355.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v607, v355.__r_.__value_.__l.__data_, v355.__r_.__value_.__l.__size_);
  else
    v607 = v355;
  v608 = v356;
  v606 = off_24C335AF8;
  v609 = v357;
  v602 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v351.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v603, v351.__r_.__value_.__l.__data_, v351.__r_.__value_.__l.__size_);
  else
    v603 = v351;
  v604 = v352;
  v602 = off_24C335AF8;
  v605 = v353;
  v598 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v347.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v599, v347.__r_.__value_.__l.__data_, v347.__r_.__value_.__l.__size_);
  else
    v599 = v347;
  v600 = v348;
  v598 = off_24C335AF8;
  v601 = v349;
  v593 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v342.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v594, v342.__r_.__value_.__l.__data_, v342.__r_.__value_.__l.__size_);
  else
    v594 = v342;
  v595 = v343;
  v593 = &off_24C335AB8;
  v596 = v344;
  if (SHIBYTE(v345.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v597, v345.__r_.__value_.__l.__data_, v345.__r_.__value_.__l.__size_);
  else
    v597 = v345;
  v589 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v338.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v590, v338.__r_.__value_.__l.__data_, v338.__r_.__value_.__l.__size_);
  else
    v590 = v338;
  v591 = v339;
  v589 = off_24C335AF8;
  v592 = v340;
  v585 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v334.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v586, v334.__r_.__value_.__l.__data_, v334.__r_.__value_.__l.__size_);
  else
    v586 = v334;
  v587 = v335;
  v585 = off_24C335AF8;
  v588 = v336;
  v581 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v330.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v582, v330.__r_.__value_.__l.__data_, v330.__r_.__value_.__l.__size_);
  else
    v582 = v330;
  v583 = v331;
  v581 = off_24C335AF8;
  v584 = v332;
  v577 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v326.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v578, v326.__r_.__value_.__l.__data_, v326.__r_.__value_.__l.__size_);
  else
    v578 = v326;
  v579 = v327;
  v577 = off_24C335AF8;
  v580 = v328;
  v573 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v322.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v574, v322.__r_.__value_.__l.__data_, v322.__r_.__value_.__l.__size_);
  else
    v574 = v322;
  v575 = v323;
  v573 = off_24C335AF8;
  v576 = v324;
  v568 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v317.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v569, v317.__r_.__value_.__l.__data_, v317.__r_.__value_.__l.__size_);
  else
    v569 = v317;
  v568 = off_24C335B18;
  v571 = v319;
  v570 = v318;
  v572 = v320;
  v563 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v312.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v564, v312.__r_.__value_.__l.__data_, v312.__r_.__value_.__l.__size_);
  else
    v564 = v312;
  v563 = off_24C335B18;
  v566 = v314;
  v565 = v313;
  v567 = v315;
  v559 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v308.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v560, v308.__r_.__value_.__l.__data_, v308.__r_.__value_.__l.__size_);
  else
    v560 = v308;
  v561 = v309;
  v559 = off_24C335AF8;
  v562 = v310;
  v554 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v303.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v555, v303.__r_.__value_.__l.__data_, v303.__r_.__value_.__l.__size_);
  else
    v555 = v303;
  v556 = v304;
  v554 = &off_24C335AB8;
  v557 = v305;
  if (SHIBYTE(v306.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v558, v306.__r_.__value_.__l.__data_, v306.__r_.__value_.__l.__size_);
  else
    v558 = v306;
  v549 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v298.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v550, v298.__r_.__value_.__l.__data_, v298.__r_.__value_.__l.__size_);
  else
    v550 = v298;
  v551 = v299;
  v549 = &off_24C335AB8;
  v552 = v300;
  if (SHIBYTE(v301.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v553, v301.__r_.__value_.__l.__data_, v301.__r_.__value_.__l.__size_);
  else
    v553 = v301;
  v545 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v294.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v546, v294.__r_.__value_.__l.__data_, v294.__r_.__value_.__l.__size_);
  else
    v546 = v294;
  v547 = v295;
  v545 = off_24C335AF8;
  v548 = v296;
  v541 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v290.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v542, v290.__r_.__value_.__l.__data_, v290.__r_.__value_.__l.__size_);
  else
    v542 = v290;
  v543 = v291;
  v541 = off_24C335AF8;
  v544 = v292;
  v537 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v286.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v538, v286.__r_.__value_.__l.__data_, v286.__r_.__value_.__l.__size_);
  else
    v538 = v286;
  v539 = v287;
  v537 = off_24C335AF8;
  v540 = v288;
  v533 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v282.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v534, v282.__r_.__value_.__l.__data_, v282.__r_.__value_.__l.__size_);
  else
    v534 = v282;
  v535 = v283;
  v533 = off_24C335AF8;
  v536 = v284;
  v528 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v277.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v529, v277.__r_.__value_.__l.__data_, v277.__r_.__value_.__l.__size_);
  else
    v529 = v277;
  v528 = off_24C335B18;
  v531 = v279;
  v530 = v278;
  v532 = v280;
  v523 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v272.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v524, v272.__r_.__value_.__l.__data_, v272.__r_.__value_.__l.__size_);
  else
    v524 = v272;
  v525 = v273;
  v523 = &off_24C335AB8;
  v526 = v274;
  if (SHIBYTE(v275.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v527, v275.__r_.__value_.__l.__data_, v275.__r_.__value_.__l.__size_);
  else
    v527 = v275;
  v518 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v267.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v519, v267.__r_.__value_.__l.__data_, v267.__r_.__value_.__l.__size_);
  else
    v519 = v267;
  v520 = v268;
  v518 = &off_24C335AB8;
  v521 = v269;
  if (SHIBYTE(v270.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v522, v270.__r_.__value_.__l.__data_, v270.__r_.__value_.__l.__size_);
  else
    v522 = v270;
  v513 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v262.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v514, v262.__r_.__value_.__l.__data_, v262.__r_.__value_.__l.__size_);
  else
    v514 = v262;
  v513 = off_24C335B18;
  v516 = v264;
  v515 = v263;
  v517 = v265;
  v508 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v257.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v509, v257.__r_.__value_.__l.__data_, v257.__r_.__value_.__l.__size_);
  else
    v509 = v257;
  v508 = off_24C335B18;
  v511 = v259;
  v510 = v258;
  v512 = v260;
  v504 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v253.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v505, v253.__r_.__value_.__l.__data_, v253.__r_.__value_.__l.__size_);
  else
    v505 = v253;
  v506 = v254;
  v504 = off_24C335AF8;
  v507 = v255;
  v500 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v249.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v501, v249.__r_.__value_.__l.__data_, v249.__r_.__value_.__l.__size_);
  else
    v501 = v249;
  v502 = v250;
  v500 = off_24C335AF8;
  v503 = v251;
  v496 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v245.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v497, v245.__r_.__value_.__l.__data_, v245.__r_.__value_.__l.__size_);
  else
    v497 = v245;
  v498 = v246;
  v496 = off_24C335AF8;
  v499 = v247;
  v492 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v241.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v493, v241.__r_.__value_.__l.__data_, v241.__r_.__value_.__l.__size_);
  else
    v493 = v241;
  v494 = v242;
  v492 = off_24C335AF8;
  v495 = v243;
  v488 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v237.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v489, v237.__r_.__value_.__l.__data_, v237.__r_.__value_.__l.__size_);
  else
    v489 = v237;
  v490 = v238;
  v488 = off_24C335AF8;
  v491 = v239;
  v484 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v233.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v485, v233.__r_.__value_.__l.__data_, v233.__r_.__value_.__l.__size_);
  else
    v485 = v233;
  v486 = v234;
  v484 = off_24C335AF8;
  v487 = v235;
  v480 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v229.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v481, v229.__r_.__value_.__l.__data_, v229.__r_.__value_.__l.__size_);
  else
    v481 = v229;
  v482 = v230;
  v480 = off_24C335AF8;
  v483 = v231;
  v475 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v224.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v476, v224.__r_.__value_.__l.__data_, v224.__r_.__value_.__l.__size_);
  else
    v476 = v224;
  v477 = v225;
  v475 = &off_24C335AB8;
  v478 = v226;
  if (SHIBYTE(v227.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v479, v227.__r_.__value_.__l.__data_, v227.__r_.__value_.__l.__size_);
  else
    v479 = v227;
  v470 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v219.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v471, v219.__r_.__value_.__l.__data_, v219.__r_.__value_.__l.__size_);
  else
    v471 = v219;
  v472 = v220;
  v470 = &off_24C335AB8;
  v473 = v221;
  if (SHIBYTE(v222.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v474, v222.__r_.__value_.__l.__data_, v222.__r_.__value_.__l.__size_);
  else
    v474 = v222;
  v465 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v214.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v466, v214.__r_.__value_.__l.__data_, v214.__r_.__value_.__l.__size_);
  else
    v466 = v214;
  v467 = v215;
  v465 = &off_24C335AB8;
  v468 = v216;
  if (SHIBYTE(v217.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v469, v217.__r_.__value_.__l.__data_, v217.__r_.__value_.__l.__size_);
  else
    v469 = v217;
  v461 = (uint64_t (**)())off_24C335D90;
  v94 = SHIBYTE(v210.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v210.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v462, v210.__r_.__value_.__l.__data_, v210.__r_.__value_.__l.__size_);
  else
    v462 = v210;
  v463 = v211;
  v461 = off_24C335AF8;
  v464 = v212;
  v456 = (uint64_t (**)())off_24C335D90;
  v95 = SHIBYTE(v205.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v205.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v457, v205.__r_.__value_.__l.__data_, v205.__r_.__value_.__l.__size_);
  else
    v457 = v205;
  v456 = off_24C335B18;
  v459 = v207;
  v458 = v206;
  v460 = v208;
  v452 = (uint64_t (**)())off_24C335D90;
  v96 = SHIBYTE(v201.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v201.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v453, v201.__r_.__value_.__l.__data_, v201.__r_.__value_.__l.__size_);
  else
    v453 = v201;
  v454 = v202;
  v452 = off_24C335AF8;
  v455 = v203;
  v447 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v196.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v448, v196.__r_.__value_.__l.__data_, v196.__r_.__value_.__l.__size_);
  else
    v448 = v196;
  v449 = v197;
  v447 = &off_24C335AB8;
  v450 = v198;
  if (SHIBYTE(v199.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v451, v199.__r_.__value_.__l.__data_, v199.__r_.__value_.__l.__size_);
  else
    v451 = v199;
  v442 = (uint64_t (**)())off_24C335D90;
  v118 = SHIBYTE(v191.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v191.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v443, v191.__r_.__value_.__l.__data_, v191.__r_.__value_.__l.__size_);
  else
    v443 = v191;
  v442 = off_24C335B18;
  v445 = v193;
  v444 = v192;
  v446 = v194;
  v437 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v186.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v438, v186.__r_.__value_.__l.__data_, v186.__r_.__value_.__l.__size_);
  else
    v438 = v186;
  v117 = v96;
  v439 = v187;
  v437 = &off_24C335AB8;
  v440 = v188;
  if (SHIBYTE(v189.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v441, v189.__r_.__value_.__l.__data_, v189.__r_.__value_.__l.__size_);
  else
    v441 = v189;
  v432 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v181.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v433, v181.__r_.__value_.__l.__data_, v181.__r_.__value_.__l.__size_);
  else
    v433 = v181;
  v434 = v182;
  v432 = &off_24C335AB8;
  v435 = v183;
  if (SHIBYTE(v184.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v436, v184.__r_.__value_.__l.__data_, v184.__r_.__value_.__l.__size_);
  else
    v436 = v184;
  v428 = (uint64_t (**)())off_24C335D90;
  v97 = SHIBYTE(v177.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v177.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v429, v177.__r_.__value_.__l.__data_, v177.__r_.__value_.__l.__size_);
  else
    v429 = v177;
  v430 = v178;
  v428 = off_24C335AF8;
  v431 = v179;
  v423 = (uint64_t (**)())off_24C335D90;
  v116 = SHIBYTE(v172.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v172.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v424, v172.__r_.__value_.__l.__data_, v172.__r_.__value_.__l.__size_);
  else
    v424 = v172;
  v423 = off_24C335B18;
  v426 = v174;
  v425 = v173;
  v427 = v175;
  v419 = (uint64_t (**)())off_24C335D90;
  v115 = SHIBYTE(v168.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v168.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v420, v168.__r_.__value_.__l.__data_, v168.__r_.__value_.__l.__size_);
  else
    v420 = v168;
  v421 = v169;
  v419 = off_24C335AF8;
  v422 = v170;
  v414 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v163.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v415, v163.__r_.__value_.__l.__data_, v163.__r_.__value_.__l.__size_);
  else
    v415 = v163;
  v416 = v164;
  v414 = &off_24C335AB8;
  v417 = v165;
  if (SHIBYTE(v166.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v418, v166.__r_.__value_.__l.__data_, v166.__r_.__value_.__l.__size_);
  else
    v418 = v166;
  v410 = (uint64_t (**)())off_24C335D90;
  v113 = SHIBYTE(v159.__r_.__value_.__r.__words[2]);
  v114 = v97;
  if (SHIBYTE(v159.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v411, v159.__r_.__value_.__l.__data_, v159.__r_.__value_.__l.__size_);
  else
    v411 = v159;
  v412 = v160;
  v410 = off_24C335AF8;
  v413 = v161;
  v405 = (uint64_t (**)())off_24C335D90;
  v112 = SHIBYTE(v154.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v154.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v406, v154.__r_.__value_.__l.__data_, v154.__r_.__value_.__l.__size_);
  else
    v406 = v154;
  v405 = off_24C335B18;
  v408 = v156;
  v407 = v155;
  v409 = v157;
  v401 = (uint64_t (**)())off_24C335D90;
  v98 = SHIBYTE(v150.__r_.__value_.__r.__words[2]);
  v111 = v95;
  if (SHIBYTE(v150.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v402, v150.__r_.__value_.__l.__data_, v150.__r_.__value_.__l.__size_);
  else
    v402 = v150;
  v403 = v151;
  v401 = off_24C335AF8;
  v404 = v152;
  v397 = (uint64_t (**)())off_24C335D90;
  v99 = SHIBYTE(v146.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v146.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v398, v146.__r_.__value_.__l.__data_, v146.__r_.__value_.__l.__size_);
  else
    v398 = v146;
  v399 = v147;
  v397 = off_24C335AF8;
  v400 = v148;
  v393 = (uint64_t (**)())off_24C335D90;
  v100 = SHIBYTE(v142.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v142.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v394, v142.__r_.__value_.__l.__data_, v142.__r_.__value_.__l.__size_);
  else
    v394 = v142;
  v395 = v143;
  v393 = off_24C335AF8;
  v396 = v144;
  v388 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v137.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v389, v137.__r_.__value_.__l.__data_, v137.__r_.__value_.__l.__size_);
  else
    v389 = v137;
  v390 = v138;
  v388 = &off_24C335AB8;
  v391 = v139;
  if (SHIBYTE(v140.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v392, v140.__r_.__value_.__l.__data_, v140.__r_.__value_.__l.__size_);
  else
    v392 = v140;
  v383 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v132.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v384, v132.__r_.__value_.__l.__data_, v132.__r_.__value_.__l.__size_);
  else
    v384 = v132;
  v385 = v133;
  v383 = &off_24C335AB8;
  v386 = v134;
  if (SHIBYTE(v135.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v387, v135.__r_.__value_.__l.__data_, v135.__r_.__value_.__l.__size_);
  else
    v387 = v135;
  v378 = (uint64_t (**)())off_24C335D90;
  v101 = SHIBYTE(v127.__r_.__value_.__r.__words[2]);
  v109 = v98;
  if (SHIBYTE(v127.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v379, v127.__r_.__value_.__l.__data_, v127.__r_.__value_.__l.__size_);
  else
    v379 = v127;
  v378 = off_24C335B18;
  v381 = v129;
  v380 = v128;
  v382 = v130;
  v374 = (uint64_t (**)())off_24C335D90;
  v102 = SHIBYTE(v123.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v123.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v375, v123.__r_.__value_.__l.__data_, v123.__r_.__value_.__l.__size_);
  else
    v375 = v123;
  v376 = v124;
  v374 = off_24C335AF8;
  v377 = v125;
  v370 = (uint64_t (**)())off_24C335D90;
  v103 = SHIBYTE(v119.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v119.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&__p, v119.__r_.__value_.__l.__data_, v119.__r_.__value_.__l.__size_);
  else
    __p = v119;
  v372 = v120;
  v370 = off_24C335AF8;
  v373 = v121;
  mediaplatform::DatabaseColumnTuple<31ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::DatabaseColumnTuple(v110, (uint64_t)&v614, (uint64_t)&v610, (uint64_t)&v606, (uint64_t)&v602, (uint64_t)&v598, (uint64_t)&v593, (uint64_t)&v589, (uint64_t)&v585, (uint64_t)&v581, (uint64_t)&v577, (uint64_t)&v573, (uint64_t)&v568, (uint64_t)&v563, (uint64_t)&v559, (uint64_t)&v554, (uint64_t)&v549, (uint64_t)&v545, (uint64_t)&v541,
    (uint64_t)&v537,
    (uint64_t)&v533,
    (uint64_t)&v528,
    (uint64_t)&v523,
    (uint64_t)&v518,
    (uint64_t)&v513,
    (uint64_t)&v508,
    (uint64_t)&v504,
    (uint64_t)&v500,
    (uint64_t)&v496,
    (uint64_t)&v492,
    (uint64_t)&v488,
    (uint64_t)&v484,
    (uint64_t)&v480,
    (uint64_t)&v475,
    (uint64_t)&v470,
    (uint64_t)&v465,
    (uint64_t)&v461,
    (uint64_t)&v456,
    (uint64_t)&v452,
    (uint64_t)&v447,
    (uint64_t)&v442,
    (uint64_t)&v437,
    (uint64_t)&v432,
    (uint64_t)&v428,
    (uint64_t)&v423,
    (uint64_t)&v419,
    (uint64_t)&v414,
    (uint64_t)&v410,
    (uint64_t)&v405,
    (uint64_t)&v401,
    (uint64_t)&v397,
    (uint64_t)&v393,
    (uint64_t)&v388,
    (uint64_t)&v383,
    (uint64_t)&v378,
    (uint64_t)&v374,
    (uint64_t)&v370);
  v370 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v374 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v375.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v375.__r_.__value_.__l.__data_);
  v378 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v379.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v379.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v383);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v388);
  v393 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v394.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v394.__r_.__value_.__l.__data_);
  v397 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v398.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v398.__r_.__value_.__l.__data_);
  v401 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v402.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v402.__r_.__value_.__l.__data_);
  v405 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v406.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v406.__r_.__value_.__l.__data_);
  v410 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v411.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v411.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v414);
  v419 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v420.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v420.__r_.__value_.__l.__data_);
  v423 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v424.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v424.__r_.__value_.__l.__data_);
  v428 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v429.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v429.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v432);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v437);
  v442 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v443.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v443.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v447);
  v452 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v453.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v453.__r_.__value_.__l.__data_);
  v456 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v457.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v457.__r_.__value_.__l.__data_);
  v461 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v462.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v462.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v465);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v470);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v475);
  v480 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v481.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v481.__r_.__value_.__l.__data_);
  v484 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v485.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v485.__r_.__value_.__l.__data_);
  v488 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v489.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v489.__r_.__value_.__l.__data_);
  v492 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v493.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v493.__r_.__value_.__l.__data_);
  v496 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v497.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v497.__r_.__value_.__l.__data_);
  v500 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v501.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v501.__r_.__value_.__l.__data_);
  v504 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v505.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v505.__r_.__value_.__l.__data_);
  v508 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v509.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v509.__r_.__value_.__l.__data_);
  v513 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v514.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v514.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v518);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v523);
  v528 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v529.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v529.__r_.__value_.__l.__data_);
  v533 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v534.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v534.__r_.__value_.__l.__data_);
  v537 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v538.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v538.__r_.__value_.__l.__data_);
  v541 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v542.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v542.__r_.__value_.__l.__data_);
  v545 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v546.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v546.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v549);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v554);
  v559 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v560.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v560.__r_.__value_.__l.__data_);
  v563 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v564.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v564.__r_.__value_.__l.__data_);
  v568 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v569.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v569.__r_.__value_.__l.__data_);
  v573 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v574.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v574.__r_.__value_.__l.__data_);
  v577 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v578.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v578.__r_.__value_.__l.__data_);
  v581 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v582.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v582.__r_.__value_.__l.__data_);
  v585 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v586.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v586.__r_.__value_.__l.__data_);
  v589 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v590.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v590.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v593);
  v598 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v599.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v599.__r_.__value_.__l.__data_);
  v602 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v603.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v603.__r_.__value_.__l.__data_);
  v606 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v607.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v607.__r_.__value_.__l.__data_);
  v610 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v611.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v611.__r_.__value_.__l.__data_);
  v614 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v615.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v615.__r_.__value_.__l.__data_);
  *(_QWORD *)(v110 + 2912) = off_24C335D90;
  v104 = (std::string *)(v110 + 2920);
  v105 = SHIBYTE(v367.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v367.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v104, v367.__r_.__value_.__l.__data_, v367.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v104->__r_.__value_.__l.__data_ = *(_OWORD *)&v367.__r_.__value_.__l.__data_;
    *(_QWORD *)(v110 + 2936) = *((_QWORD *)&v367.__r_.__value_.__l + 2);
  }
  *(_DWORD *)(v110 + 2944) = v368;
  *(_QWORD *)(v110 + 2912) = off_24C335AF8;
  *(_QWORD *)(v110 + 2948) = v369;
  if (v103 < 0)
    operator delete(v119.__r_.__value_.__l.__data_);
  v122 = (uint64_t (**)())off_24C335D90;
  if (v102 < 0)
    operator delete(v123.__r_.__value_.__l.__data_);
  v126 = (uint64_t (**)())off_24C335D90;
  if (v101 < 0)
    operator delete(v127.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v131);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v136);
  v141 = (uint64_t (**)())off_24C335D90;
  if (v100 < 0)
    operator delete(v142.__r_.__value_.__l.__data_);
  v145 = (uint64_t (**)())off_24C335D90;
  if (v99 < 0)
    operator delete(v146.__r_.__value_.__l.__data_);
  v149 = (uint64_t (**)())off_24C335D90;
  if (v109 < 0)
    operator delete(v150.__r_.__value_.__l.__data_);
  v153 = (uint64_t (**)())off_24C335D90;
  if (v112 < 0)
    operator delete(v154.__r_.__value_.__l.__data_);
  v158 = (uint64_t (**)())off_24C335D90;
  if (v113 < 0)
    operator delete(v159.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v162);
  v167 = (uint64_t (**)())off_24C335D90;
  if (v115 < 0)
    operator delete(v168.__r_.__value_.__l.__data_);
  v171 = (uint64_t (**)())off_24C335D90;
  if (v116 < 0)
    operator delete(v172.__r_.__value_.__l.__data_);
  v176 = (uint64_t (**)())off_24C335D90;
  if (v114 < 0)
    operator delete(v177.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v180);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v185);
  v190 = (uint64_t (**)())off_24C335D90;
  if (v118 < 0)
    operator delete(v191.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v195);
  v200 = (uint64_t (**)())off_24C335D90;
  if (v117 < 0)
    operator delete(v201.__r_.__value_.__l.__data_);
  v204 = (uint64_t (**)())off_24C335D90;
  if (v111 < 0)
    operator delete(v205.__r_.__value_.__l.__data_);
  v209 = (uint64_t (**)())off_24C335D90;
  if (v94 < 0)
    operator delete(v210.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v213);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v218);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v223);
  v228 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v229.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v229.__r_.__value_.__l.__data_);
  v232 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v233.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v233.__r_.__value_.__l.__data_);
  v236 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v237.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v237.__r_.__value_.__l.__data_);
  v240 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v241.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v241.__r_.__value_.__l.__data_);
  v244 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v245.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v245.__r_.__value_.__l.__data_);
  v248 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v249.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v249.__r_.__value_.__l.__data_);
  v252 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v253.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v253.__r_.__value_.__l.__data_);
  v256 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v257.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v257.__r_.__value_.__l.__data_);
  if (SHIBYTE(v262.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v262.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v266);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v271);
  if (SHIBYTE(v277.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v277.__r_.__value_.__l.__data_);
  if (SHIBYTE(v282.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v282.__r_.__value_.__l.__data_);
  if (SHIBYTE(v286.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v286.__r_.__value_.__l.__data_);
  if (SHIBYTE(v290.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v290.__r_.__value_.__l.__data_);
  if (SHIBYTE(v294.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v294.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v297);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v302);
  if (SHIBYTE(v308.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v308.__r_.__value_.__l.__data_);
  if (SHIBYTE(v312.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v312.__r_.__value_.__l.__data_);
  if (SHIBYTE(v317.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v317.__r_.__value_.__l.__data_);
  if (SHIBYTE(v322.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v322.__r_.__value_.__l.__data_);
  if (SHIBYTE(v326.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v326.__r_.__value_.__l.__data_);
  if (SHIBYTE(v330.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v330.__r_.__value_.__l.__data_);
  if (SHIBYTE(v334.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v334.__r_.__value_.__l.__data_);
  if (SHIBYTE(v338.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v338.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v341);
  if (SHIBYTE(v347.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v347.__r_.__value_.__l.__data_);
  if (SHIBYTE(v351.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v351.__r_.__value_.__l.__data_);
  if (SHIBYTE(v355.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v355.__r_.__value_.__l.__data_);
  if (SHIBYTE(v359.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v359.__r_.__value_.__l.__data_);
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__s.__r_.__value_.__l.__data_);
    if ((v105 & 0x80000000) == 0)
      goto LABEL_595;
  }
  else if ((v105 & 0x80000000) == 0)
  {
    goto LABEL_595;
  }
  operator delete(v367.__r_.__value_.__l.__data_);
LABEL_595:
  *(_QWORD *)(v110 + 2960) = off_24C335D90;
  if (*(char *)(v108 + 31) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(v110 + 2968), *(const std::string::value_type **)(v108 + 8), *(_QWORD *)(v108 + 16));
  }
  else
  {
    v106 = *(_OWORD *)(v108 + 8);
    *(_QWORD *)(v110 + 2984) = *(_QWORD *)(v108 + 24);
    *(_OWORD *)(v110 + 2968) = v106;
  }
  *(_DWORD *)(v110 + 2992) = *(_DWORD *)(v108 + 32);
  *(_QWORD *)(v110 + 2960) = &off_24C335A98;
  *(_BYTE *)(v110 + 2996) = *(_BYTE *)(v108 + 36);
  mediaplatform::Data::Data((mediaplatform::Data *)(v110 + 3000), (const mediaplatform::Data *)(v108 + 40));
  return v110;
}

void sub_20A7BDDD8(_Unwind_Exception *a1)
{
  mediaplatform::DatabaseColumnTuple<30ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(STACK[0x380]);
  _Unwind_Resume(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<29ul,mediaplatform::DatabaseColumn<mediaplatform::Data>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(uint64_t a1)
{
  mediaplatform::DatabaseColumn<mediaplatform::Data>::~DatabaseColumn(a1 + 2960);
  *(_QWORD *)(a1 + 2912) = off_24C335D90;
  if (*(char *)(a1 + 2943) < 0)
    operator delete(*(void **)(a1 + 2920));
  *(_QWORD *)(a1 + 2864) = off_24C335D90;
  if (*(char *)(a1 + 2895) < 0)
    operator delete(*(void **)(a1 + 2872));
  *(_QWORD *)(a1 + 2816) = off_24C335D90;
  if (*(char *)(a1 + 2847) < 0)
    operator delete(*(void **)(a1 + 2824));
  *(_QWORD *)(a1 + 2768) = off_24C335D90;
  if (*(char *)(a1 + 2799) < 0)
    operator delete(*(void **)(a1 + 2776));
  return mediaplatform::DatabaseColumnTuple<34ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<30ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(uint64_t a1)
{
  *(_QWORD *)(a1 + 2912) = off_24C335D90;
  if (*(char *)(a1 + 2943) < 0)
    operator delete(*(void **)(a1 + 2920));
  *(_QWORD *)(a1 + 2864) = off_24C335D90;
  if (*(char *)(a1 + 2895) < 0)
    operator delete(*(void **)(a1 + 2872));
  *(_QWORD *)(a1 + 2816) = off_24C335D90;
  if (*(char *)(a1 + 2847) < 0)
    operator delete(*(void **)(a1 + 2824));
  *(_QWORD *)(a1 + 2768) = off_24C335D90;
  if (*(char *)(a1 + 2799) < 0)
    operator delete(*(void **)(a1 + 2776));
  return mediaplatform::DatabaseColumnTuple<34ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<31ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::DatabaseColumnTuple(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57)
{
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  int v73;
  int v74;
  int v75;
  int v76;
  int v77;
  int v78;
  int v79;
  int v80;
  int v81;
  int v82;
  int v83;
  int v84;
  int v85;
  int v86;
  int v87;
  int v88;
  int v89;
  int v90;
  int v91;
  int v92;
  int v93;
  int v94;
  int v95;
  int v96;
  int v97;
  int v98;
  int v99;
  int v100;
  int v101;
  int v102;
  int v103;
  std::string *v104;
  int v105;
  std::string *v106;
  __int128 v107;
  uint64_t v109;
  int v110;
  int v111;
  int v112;
  int v113;
  int v114;
  int v115;
  int v116;
  int v117;
  int v118;
  uint64_t v119;
  std::string v120;
  int v121;
  uint64_t v122;
  uint64_t (**v123)();
  std::string v124;
  int v125;
  uint64_t v126;
  uint64_t (**v127)();
  std::string v128;
  int v129;
  uint64_t v130;
  int v131;
  uint64_t (**v132)();
  std::string v133;
  int v134;
  char v135;
  std::string v136;
  uint64_t (**v137)();
  std::string v138;
  int v139;
  char v140;
  std::string v141;
  uint64_t (**v142)();
  std::string v143;
  int v144;
  uint64_t v145;
  uint64_t (**v146)();
  std::string v147;
  int v148;
  uint64_t v149;
  uint64_t (**v150)();
  std::string v151;
  int v152;
  uint64_t v153;
  uint64_t (**v154)();
  std::string v155;
  int v156;
  uint64_t v157;
  int v158;
  uint64_t (**v159)();
  std::string v160;
  int v161;
  uint64_t v162;
  uint64_t (**v163)();
  std::string v164;
  int v165;
  char v166;
  std::string v167;
  uint64_t (**v168)();
  std::string v169;
  int v170;
  uint64_t v171;
  uint64_t (**v172)();
  std::string v173;
  int v174;
  uint64_t v175;
  int v176;
  uint64_t (**v177)();
  std::string v178;
  int v179;
  uint64_t v180;
  uint64_t (**v181)();
  std::string v182;
  int v183;
  char v184;
  std::string v185;
  uint64_t (**v186)();
  std::string v187;
  int v188;
  char v189;
  std::string v190;
  uint64_t (**v191)();
  std::string v192;
  int v193;
  uint64_t v194;
  int v195;
  uint64_t (**v196)();
  std::string v197;
  int v198;
  char v199;
  std::string v200;
  uint64_t (**v201)();
  std::string v202;
  int v203;
  uint64_t v204;
  uint64_t (**v205)();
  std::string v206;
  int v207;
  uint64_t v208;
  int v209;
  uint64_t (**v210)();
  std::string v211;
  int v212;
  uint64_t v213;
  uint64_t (**v214)();
  std::string v215;
  int v216;
  char v217;
  std::string v218;
  uint64_t (**v219)();
  std::string v220;
  int v221;
  char v222;
  std::string v223;
  uint64_t (**v224)();
  std::string v225;
  int v226;
  char v227;
  std::string v228;
  uint64_t (**v229)();
  std::string v230;
  int v231;
  uint64_t v232;
  uint64_t (**v233)();
  std::string v234;
  int v235;
  uint64_t v236;
  uint64_t (**v237)();
  std::string v238;
  int v239;
  uint64_t v240;
  uint64_t (**v241)();
  std::string v242;
  int v243;
  uint64_t v244;
  uint64_t (**v245)();
  std::string v246;
  int v247;
  uint64_t v248;
  uint64_t (**v249)();
  std::string v250;
  int v251;
  uint64_t v252;
  uint64_t (**v253)();
  std::string v254;
  int v255;
  uint64_t v256;
  uint64_t (**v257)();
  std::string v258;
  int v259;
  uint64_t v260;
  int v261;
  uint64_t (**v262)();
  std::string v263;
  int v264;
  uint64_t v265;
  int v266;
  uint64_t (**v267)();
  std::string v268;
  int v269;
  char v270;
  std::string v271;
  uint64_t (**v272)();
  std::string v273;
  int v274;
  char v275;
  std::string v276;
  uint64_t (**v277)();
  std::string v278;
  int v279;
  uint64_t v280;
  int v281;
  uint64_t (**v282)();
  std::string v283;
  int v284;
  uint64_t v285;
  uint64_t (**v286)();
  std::string v287;
  int v288;
  uint64_t v289;
  uint64_t (**v290)();
  std::string v291;
  int v292;
  uint64_t v293;
  uint64_t (**v294)();
  std::string v295;
  int v296;
  uint64_t v297;
  uint64_t (**v298)();
  std::string v299;
  int v300;
  char v301;
  std::string v302;
  uint64_t (**v303)();
  std::string v304;
  int v305;
  char v306;
  std::string v307;
  uint64_t (**v308)();
  std::string v309;
  int v310;
  uint64_t v311;
  uint64_t (**v312)();
  std::string v313;
  int v314;
  uint64_t v315;
  int v316;
  uint64_t (**v317)();
  std::string v318;
  int v319;
  uint64_t v320;
  int v321;
  uint64_t (**v322)();
  std::string v323;
  int v324;
  uint64_t v325;
  uint64_t (**v326)();
  std::string v327;
  int v328;
  uint64_t v329;
  uint64_t (**v330)();
  std::string v331;
  int v332;
  uint64_t v333;
  uint64_t (**v334)();
  std::string v335;
  int v336;
  uint64_t v337;
  uint64_t (**v338)();
  std::string v339;
  int v340;
  uint64_t v341;
  uint64_t (**v342)();
  std::string v343;
  int v344;
  char v345;
  std::string v346;
  uint64_t (**v347)();
  std::string v348;
  int v349;
  uint64_t v350;
  uint64_t (**v351)();
  std::string v352;
  int v353;
  uint64_t v354;
  uint64_t (**v355)();
  std::string __s;
  int v357;
  uint64_t v358;
  uint64_t (**v359)();
  std::string v360;
  int v361;
  uint64_t v362;
  uint64_t (**v363)();
  std::string __p;
  int v365;
  uint64_t v366;
  uint64_t (**v367)();
  std::string v368;
  int v369;
  uint64_t v370;
  uint64_t (**v371)();
  std::string v372;
  int v373;
  uint64_t v374;
  int v375;
  uint64_t (**v376)();
  std::string v377;
  int v378;
  char v379;
  std::string v380;
  uint64_t (**v381)();
  std::string v382;
  int v383;
  char v384;
  std::string v385;
  uint64_t (**v386)();
  std::string v387;
  int v388;
  uint64_t v389;
  uint64_t (**v390)();
  std::string v391;
  int v392;
  uint64_t v393;
  uint64_t (**v394)();
  std::string v395;
  int v396;
  uint64_t v397;
  uint64_t (**v398)();
  std::string v399;
  int v400;
  uint64_t v401;
  int v402;
  uint64_t (**v403)();
  std::string v404;
  int v405;
  uint64_t v406;
  uint64_t (**v407)();
  std::string v408;
  int v409;
  char v410;
  std::string v411;
  uint64_t (**v412)();
  std::string v413;
  int v414;
  uint64_t v415;
  uint64_t (**v416)();
  std::string v417;
  int v418;
  uint64_t v419;
  int v420;
  uint64_t (**v421)();
  std::string v422;
  int v423;
  uint64_t v424;
  uint64_t (**v425)();
  std::string v426;
  int v427;
  char v428;
  std::string v429;
  uint64_t (**v430)();
  std::string v431;
  int v432;
  char v433;
  std::string v434;
  uint64_t (**v435)();
  std::string v436;
  int v437;
  uint64_t v438;
  int v439;
  uint64_t (**v440)();
  std::string v441;
  int v442;
  char v443;
  std::string v444;
  uint64_t (**v445)();
  std::string v446;
  int v447;
  uint64_t v448;
  uint64_t (**v449)();
  std::string v450;
  int v451;
  uint64_t v452;
  int v453;
  uint64_t (**v454)();
  std::string v455;
  int v456;
  uint64_t v457;
  uint64_t (**v458)();
  std::string v459;
  int v460;
  char v461;
  std::string v462;
  uint64_t (**v463)();
  std::string v464;
  int v465;
  char v466;
  std::string v467;
  uint64_t (**v468)();
  std::string v469;
  int v470;
  char v471;
  std::string v472;
  uint64_t (**v473)();
  std::string v474;
  int v475;
  uint64_t v476;
  uint64_t (**v477)();
  std::string v478;
  int v479;
  uint64_t v480;
  uint64_t (**v481)();
  std::string v482;
  int v483;
  uint64_t v484;
  uint64_t (**v485)();
  std::string v486;
  int v487;
  uint64_t v488;
  uint64_t (**v489)();
  std::string v490;
  int v491;
  uint64_t v492;
  uint64_t (**v493)();
  std::string v494;
  int v495;
  uint64_t v496;
  uint64_t (**v497)();
  std::string v498;
  int v499;
  uint64_t v500;
  uint64_t (**v501)();
  std::string v502;
  int v503;
  uint64_t v504;
  int v505;
  uint64_t (**v506)();
  std::string v507;
  int v508;
  uint64_t v509;
  int v510;
  uint64_t (**v511)();
  std::string v512;
  int v513;
  char v514;
  std::string v515;
  uint64_t (**v516)();
  std::string v517;
  int v518;
  char v519;
  std::string v520;
  uint64_t (**v521)();
  std::string v522;
  int v523;
  uint64_t v524;
  int v525;
  uint64_t (**v526)();
  std::string v527;
  int v528;
  uint64_t v529;
  uint64_t (**v530)();
  std::string v531;
  int v532;
  uint64_t v533;
  uint64_t (**v534)();
  std::string v535;
  int v536;
  uint64_t v537;
  uint64_t (**v538)();
  std::string v539;
  int v540;
  uint64_t v541;
  uint64_t (**v542)();
  std::string v543;
  int v544;
  char v545;
  std::string v546;
  uint64_t (**v547)();
  std::string v548;
  int v549;
  char v550;
  std::string v551;
  uint64_t (**v552)();
  std::string v553;
  int v554;
  uint64_t v555;
  uint64_t (**v556)();
  std::string v557;
  int v558;
  uint64_t v559;
  int v560;
  uint64_t (**v561)();
  std::string v562;
  int v563;
  uint64_t v564;
  int v565;
  uint64_t (**v566)();
  std::string v567;
  int v568;
  uint64_t v569;
  uint64_t (**v570)();
  std::string v571;
  int v572;
  uint64_t v573;
  uint64_t (**v574)();
  std::string v575;
  int v576;
  uint64_t v577;
  uint64_t (**v578)();
  std::string v579;
  int v580;
  uint64_t v581;
  uint64_t (**v582)();
  std::string v583;
  int v584;
  uint64_t v585;
  uint64_t (**v586)();
  std::string v587;
  int v588;
  char v589;
  std::string v590;
  uint64_t (**v591)();
  std::string v592;
  int v593;
  uint64_t v594;
  uint64_t (**v595)();
  std::string v596;
  int v597;
  uint64_t v598;
  uint64_t (**v599)();
  std::string v600;
  int v601;
  uint64_t v602;

  v57 = MEMORY[0x24BDAC7A8](a1);
  v60 = v59;
  v62 = v61;
  v64 = v63;
  v66 = v65;
  v68 = v67;
  v69 = v58;
  v71 = v70;
  v72 = v57;
  if (*(char *)(v58 + 31) < 0)
    std::string::__init_copy_ctor_external(&v360, *(const std::string::value_type **)(v58 + 8), *(_QWORD *)(v58 + 16));
  else
    v360 = *(std::string *)(v58 + 8);
  v361 = *(_DWORD *)(v69 + 32);
  v359 = off_24C335AF8;
  v362 = *(_QWORD *)(v69 + 36);
  if (*(char *)(v68 + 31) < 0)
    std::string::__init_copy_ctor_external(&__s, *(const std::string::value_type **)(v68 + 8), *(_QWORD *)(v68 + 16));
  else
    __s = *(std::string *)(v68 + 8);
  v357 = *(_DWORD *)(v68 + 32);
  v355 = off_24C335AF8;
  v358 = *(_QWORD *)(v68 + 36);
  if (*(char *)(v66 + 31) < 0)
    std::string::__init_copy_ctor_external(&v352, *(const std::string::value_type **)(v66 + 8), *(_QWORD *)(v66 + 16));
  else
    v352 = *(std::string *)(v66 + 8);
  v353 = *(_DWORD *)(v66 + 32);
  v351 = off_24C335AF8;
  v354 = *(_QWORD *)(v66 + 36);
  if (*(char *)(v64 + 31) < 0)
    std::string::__init_copy_ctor_external(&v348, *(const std::string::value_type **)(v64 + 8), *(_QWORD *)(v64 + 16));
  else
    v348 = *(std::string *)(v64 + 8);
  v349 = *(_DWORD *)(v64 + 32);
  v347 = off_24C335AF8;
  v350 = *(_QWORD *)(v64 + 36);
  v342 = (uint64_t (**)())off_24C335D90;
  v109 = v71;
  if (*(char *)(v62 + 31) < 0)
    std::string::__init_copy_ctor_external(&v343, *(const std::string::value_type **)(v62 + 8), *(_QWORD *)(v62 + 16));
  else
    v343 = *(std::string *)(v62 + 8);
  v344 = *(_DWORD *)(v62 + 32);
  v342 = &off_24C335AB8;
  v345 = *(_BYTE *)(v62 + 36);
  if (*(char *)(v62 + 63) < 0)
    std::string::__init_copy_ctor_external(&v346, *(const std::string::value_type **)(v62 + 40), *(_QWORD *)(v62 + 48));
  else
    v346 = *(std::string *)(v62 + 40);
  v119 = v72;
  if (*(char *)(v60 + 31) < 0)
    std::string::__init_copy_ctor_external(&v339, *(const std::string::value_type **)(v60 + 8), *(_QWORD *)(v60 + 16));
  else
    v339 = *(std::string *)(v60 + 8);
  v340 = *(_DWORD *)(v60 + 32);
  v338 = off_24C335AF8;
  v341 = *(_QWORD *)(v60 + 36);
  if (*(char *)(a9 + 31) < 0)
    std::string::__init_copy_ctor_external(&v335, *(const std::string::value_type **)(a9 + 8), *(_QWORD *)(a9 + 16));
  else
    v335 = *(std::string *)(a9 + 8);
  v336 = *(_DWORD *)(a9 + 32);
  v334 = off_24C335AF8;
  v337 = *(_QWORD *)(a9 + 36);
  if (*(char *)(a10 + 31) < 0)
    std::string::__init_copy_ctor_external(&v331, *(const std::string::value_type **)(a10 + 8), *(_QWORD *)(a10 + 16));
  else
    v331 = *(std::string *)(a10 + 8);
  v332 = *(_DWORD *)(a10 + 32);
  v330 = off_24C335AF8;
  v333 = *(_QWORD *)(a10 + 36);
  if (*(char *)(a11 + 31) < 0)
    std::string::__init_copy_ctor_external(&v327, *(const std::string::value_type **)(a11 + 8), *(_QWORD *)(a11 + 16));
  else
    v327 = *(std::string *)(a11 + 8);
  v328 = *(_DWORD *)(a11 + 32);
  v326 = off_24C335AF8;
  v329 = *(_QWORD *)(a11 + 36);
  if (*(char *)(a12 + 31) < 0)
    std::string::__init_copy_ctor_external(&v323, *(const std::string::value_type **)(a12 + 8), *(_QWORD *)(a12 + 16));
  else
    v323 = *(std::string *)(a12 + 8);
  v324 = *(_DWORD *)(a12 + 32);
  v322 = off_24C335AF8;
  v325 = *(_QWORD *)(a12 + 36);
  if (*(char *)(a13 + 31) < 0)
    std::string::__init_copy_ctor_external(&v318, *(const std::string::value_type **)(a13 + 8), *(_QWORD *)(a13 + 16));
  else
    v318 = *(std::string *)(a13 + 8);
  v73 = *(_DWORD *)(a13 + 32);
  v317 = off_24C335B18;
  v320 = *(_QWORD *)(a13 + 36);
  v74 = *(_DWORD *)(a13 + 44);
  v319 = v73;
  v321 = v74;
  if (*(char *)(a14 + 31) < 0)
    std::string::__init_copy_ctor_external(&v313, *(const std::string::value_type **)(a14 + 8), *(_QWORD *)(a14 + 16));
  else
    v313 = *(std::string *)(a14 + 8);
  v75 = *(_DWORD *)(a14 + 32);
  v312 = off_24C335B18;
  v315 = *(_QWORD *)(a14 + 36);
  v76 = *(_DWORD *)(a14 + 44);
  v314 = v75;
  v316 = v76;
  if (*(char *)(a15 + 31) < 0)
    std::string::__init_copy_ctor_external(&v309, *(const std::string::value_type **)(a15 + 8), *(_QWORD *)(a15 + 16));
  else
    v309 = *(std::string *)(a15 + 8);
  v310 = *(_DWORD *)(a15 + 32);
  v308 = off_24C335AF8;
  v311 = *(_QWORD *)(a15 + 36);
  v303 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a16 + 31) < 0)
    std::string::__init_copy_ctor_external(&v304, *(const std::string::value_type **)(a16 + 8), *(_QWORD *)(a16 + 16));
  else
    v304 = *(std::string *)(a16 + 8);
  v305 = *(_DWORD *)(a16 + 32);
  v303 = &off_24C335AB8;
  v306 = *(_BYTE *)(a16 + 36);
  if (*(char *)(a16 + 63) < 0)
    std::string::__init_copy_ctor_external(&v307, *(const std::string::value_type **)(a16 + 40), *(_QWORD *)(a16 + 48));
  else
    v307 = *(std::string *)(a16 + 40);
  v298 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a17 + 31) < 0)
    std::string::__init_copy_ctor_external(&v299, *(const std::string::value_type **)(a17 + 8), *(_QWORD *)(a17 + 16));
  else
    v299 = *(std::string *)(a17 + 8);
  v300 = *(_DWORD *)(a17 + 32);
  v298 = &off_24C335AB8;
  v301 = *(_BYTE *)(a17 + 36);
  if (*(char *)(a17 + 63) < 0)
    std::string::__init_copy_ctor_external(&v302, *(const std::string::value_type **)(a17 + 40), *(_QWORD *)(a17 + 48));
  else
    v302 = *(std::string *)(a17 + 40);
  if (*(char *)(a18 + 31) < 0)
    std::string::__init_copy_ctor_external(&v295, *(const std::string::value_type **)(a18 + 8), *(_QWORD *)(a18 + 16));
  else
    v295 = *(std::string *)(a18 + 8);
  v296 = *(_DWORD *)(a18 + 32);
  v294 = off_24C335AF8;
  v297 = *(_QWORD *)(a18 + 36);
  if (*(char *)(a19 + 31) < 0)
    std::string::__init_copy_ctor_external(&v291, *(const std::string::value_type **)(a19 + 8), *(_QWORD *)(a19 + 16));
  else
    v291 = *(std::string *)(a19 + 8);
  v292 = *(_DWORD *)(a19 + 32);
  v290 = off_24C335AF8;
  v293 = *(_QWORD *)(a19 + 36);
  if (*(char *)(a20 + 31) < 0)
    std::string::__init_copy_ctor_external(&v287, *(const std::string::value_type **)(a20 + 8), *(_QWORD *)(a20 + 16));
  else
    v287 = *(std::string *)(a20 + 8);
  v288 = *(_DWORD *)(a20 + 32);
  v286 = off_24C335AF8;
  v289 = *(_QWORD *)(a20 + 36);
  if (*(char *)(a21 + 31) < 0)
    std::string::__init_copy_ctor_external(&v283, *(const std::string::value_type **)(a21 + 8), *(_QWORD *)(a21 + 16));
  else
    v283 = *(std::string *)(a21 + 8);
  v284 = *(_DWORD *)(a21 + 32);
  v282 = off_24C335AF8;
  v285 = *(_QWORD *)(a21 + 36);
  if (*(char *)(a22 + 31) < 0)
    std::string::__init_copy_ctor_external(&v278, *(const std::string::value_type **)(a22 + 8), *(_QWORD *)(a22 + 16));
  else
    v278 = *(std::string *)(a22 + 8);
  v77 = *(_DWORD *)(a22 + 32);
  v277 = off_24C335B18;
  v280 = *(_QWORD *)(a22 + 36);
  v78 = *(_DWORD *)(a22 + 44);
  v279 = v77;
  v281 = v78;
  v272 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a23 + 31) < 0)
    std::string::__init_copy_ctor_external(&v273, *(const std::string::value_type **)(a23 + 8), *(_QWORD *)(a23 + 16));
  else
    v273 = *(std::string *)(a23 + 8);
  v274 = *(_DWORD *)(a23 + 32);
  v272 = &off_24C335AB8;
  v275 = *(_BYTE *)(a23 + 36);
  if (*(char *)(a23 + 63) < 0)
    std::string::__init_copy_ctor_external(&v276, *(const std::string::value_type **)(a23 + 40), *(_QWORD *)(a23 + 48));
  else
    v276 = *(std::string *)(a23 + 40);
  v267 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a24 + 31) < 0)
    std::string::__init_copy_ctor_external(&v268, *(const std::string::value_type **)(a24 + 8), *(_QWORD *)(a24 + 16));
  else
    v268 = *(std::string *)(a24 + 8);
  v269 = *(_DWORD *)(a24 + 32);
  v267 = &off_24C335AB8;
  v270 = *(_BYTE *)(a24 + 36);
  if (*(char *)(a24 + 63) < 0)
    std::string::__init_copy_ctor_external(&v271, *(const std::string::value_type **)(a24 + 40), *(_QWORD *)(a24 + 48));
  else
    v271 = *(std::string *)(a24 + 40);
  if (*(char *)(a25 + 31) < 0)
    std::string::__init_copy_ctor_external(&v263, *(const std::string::value_type **)(a25 + 8), *(_QWORD *)(a25 + 16));
  else
    v263 = *(std::string *)(a25 + 8);
  v79 = *(_DWORD *)(a25 + 32);
  v262 = off_24C335B18;
  v265 = *(_QWORD *)(a25 + 36);
  v80 = *(_DWORD *)(a25 + 44);
  v264 = v79;
  v266 = v80;
  if (*(char *)(a26 + 31) < 0)
    std::string::__init_copy_ctor_external(&v258, *(const std::string::value_type **)(a26 + 8), *(_QWORD *)(a26 + 16));
  else
    v258 = *(std::string *)(a26 + 8);
  v81 = *(_DWORD *)(a26 + 32);
  v257 = off_24C335B18;
  v260 = *(_QWORD *)(a26 + 36);
  v82 = *(_DWORD *)(a26 + 44);
  v259 = v81;
  v261 = v82;
  if (*(char *)(a27 + 31) < 0)
    std::string::__init_copy_ctor_external(&v254, *(const std::string::value_type **)(a27 + 8), *(_QWORD *)(a27 + 16));
  else
    v254 = *(std::string *)(a27 + 8);
  v255 = *(_DWORD *)(a27 + 32);
  v253 = off_24C335AF8;
  v256 = *(_QWORD *)(a27 + 36);
  if (*(char *)(a28 + 31) < 0)
    std::string::__init_copy_ctor_external(&v250, *(const std::string::value_type **)(a28 + 8), *(_QWORD *)(a28 + 16));
  else
    v250 = *(std::string *)(a28 + 8);
  v251 = *(_DWORD *)(a28 + 32);
  v249 = off_24C335AF8;
  v252 = *(_QWORD *)(a28 + 36);
  if (*(char *)(a29 + 31) < 0)
    std::string::__init_copy_ctor_external(&v246, *(const std::string::value_type **)(a29 + 8), *(_QWORD *)(a29 + 16));
  else
    v246 = *(std::string *)(a29 + 8);
  v247 = *(_DWORD *)(a29 + 32);
  v245 = off_24C335AF8;
  v248 = *(_QWORD *)(a29 + 36);
  if (*(char *)(a30 + 31) < 0)
    std::string::__init_copy_ctor_external(&v242, *(const std::string::value_type **)(a30 + 8), *(_QWORD *)(a30 + 16));
  else
    v242 = *(std::string *)(a30 + 8);
  v243 = *(_DWORD *)(a30 + 32);
  v241 = off_24C335AF8;
  v244 = *(_QWORD *)(a30 + 36);
  if (*(char *)(a31 + 31) < 0)
    std::string::__init_copy_ctor_external(&v238, *(const std::string::value_type **)(a31 + 8), *(_QWORD *)(a31 + 16));
  else
    v238 = *(std::string *)(a31 + 8);
  v239 = *(_DWORD *)(a31 + 32);
  v237 = off_24C335AF8;
  v240 = *(_QWORD *)(a31 + 36);
  if (*(char *)(a32 + 31) < 0)
    std::string::__init_copy_ctor_external(&v234, *(const std::string::value_type **)(a32 + 8), *(_QWORD *)(a32 + 16));
  else
    v234 = *(std::string *)(a32 + 8);
  v235 = *(_DWORD *)(a32 + 32);
  v233 = off_24C335AF8;
  v236 = *(_QWORD *)(a32 + 36);
  if (*(char *)(a33 + 31) < 0)
    std::string::__init_copy_ctor_external(&v230, *(const std::string::value_type **)(a33 + 8), *(_QWORD *)(a33 + 16));
  else
    v230 = *(std::string *)(a33 + 8);
  v231 = *(_DWORD *)(a33 + 32);
  v229 = off_24C335AF8;
  v232 = *(_QWORD *)(a33 + 36);
  v224 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a34 + 31) < 0)
    std::string::__init_copy_ctor_external(&v225, *(const std::string::value_type **)(a34 + 8), *(_QWORD *)(a34 + 16));
  else
    v225 = *(std::string *)(a34 + 8);
  v226 = *(_DWORD *)(a34 + 32);
  v224 = &off_24C335AB8;
  v227 = *(_BYTE *)(a34 + 36);
  if (*(char *)(a34 + 63) < 0)
    std::string::__init_copy_ctor_external(&v228, *(const std::string::value_type **)(a34 + 40), *(_QWORD *)(a34 + 48));
  else
    v228 = *(std::string *)(a34 + 40);
  v219 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a35 + 31) < 0)
    std::string::__init_copy_ctor_external(&v220, *(const std::string::value_type **)(a35 + 8), *(_QWORD *)(a35 + 16));
  else
    v220 = *(std::string *)(a35 + 8);
  v221 = *(_DWORD *)(a35 + 32);
  v219 = &off_24C335AB8;
  v222 = *(_BYTE *)(a35 + 36);
  if (*(char *)(a35 + 63) < 0)
    std::string::__init_copy_ctor_external(&v223, *(const std::string::value_type **)(a35 + 40), *(_QWORD *)(a35 + 48));
  else
    v223 = *(std::string *)(a35 + 40);
  v214 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a36 + 31) < 0)
    std::string::__init_copy_ctor_external(&v215, *(const std::string::value_type **)(a36 + 8), *(_QWORD *)(a36 + 16));
  else
    v215 = *(std::string *)(a36 + 8);
  v216 = *(_DWORD *)(a36 + 32);
  v214 = &off_24C335AB8;
  v217 = *(_BYTE *)(a36 + 36);
  if (*(char *)(a36 + 63) < 0)
    std::string::__init_copy_ctor_external(&v218, *(const std::string::value_type **)(a36 + 40), *(_QWORD *)(a36 + 48));
  else
    v218 = *(std::string *)(a36 + 40);
  v210 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a37 + 31) < 0)
    std::string::__init_copy_ctor_external(&v211, *(const std::string::value_type **)(a37 + 8), *(_QWORD *)(a37 + 16));
  else
    v211 = *(std::string *)(a37 + 8);
  v212 = *(_DWORD *)(a37 + 32);
  v210 = off_24C335AF8;
  v213 = *(_QWORD *)(a37 + 36);
  v205 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a38 + 31) < 0)
    std::string::__init_copy_ctor_external(&v206, *(const std::string::value_type **)(a38 + 8), *(_QWORD *)(a38 + 16));
  else
    v206 = *(std::string *)(a38 + 8);
  v83 = *(_DWORD *)(a38 + 32);
  v205 = off_24C335B18;
  v208 = *(_QWORD *)(a38 + 36);
  v84 = *(_DWORD *)(a38 + 44);
  v207 = v83;
  v209 = v84;
  v201 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a39 + 31) < 0)
    std::string::__init_copy_ctor_external(&v202, *(const std::string::value_type **)(a39 + 8), *(_QWORD *)(a39 + 16));
  else
    v202 = *(std::string *)(a39 + 8);
  v203 = *(_DWORD *)(a39 + 32);
  v201 = off_24C335AF8;
  v204 = *(_QWORD *)(a39 + 36);
  v196 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a40 + 31) < 0)
    std::string::__init_copy_ctor_external(&v197, *(const std::string::value_type **)(a40 + 8), *(_QWORD *)(a40 + 16));
  else
    v197 = *(std::string *)(a40 + 8);
  v198 = *(_DWORD *)(a40 + 32);
  v196 = &off_24C335AB8;
  v199 = *(_BYTE *)(a40 + 36);
  if (*(char *)(a40 + 63) < 0)
    std::string::__init_copy_ctor_external(&v200, *(const std::string::value_type **)(a40 + 40), *(_QWORD *)(a40 + 48));
  else
    v200 = *(std::string *)(a40 + 40);
  v191 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a41 + 31) < 0)
    std::string::__init_copy_ctor_external(&v192, *(const std::string::value_type **)(a41 + 8), *(_QWORD *)(a41 + 16));
  else
    v192 = *(std::string *)(a41 + 8);
  v85 = *(_DWORD *)(a41 + 32);
  v191 = off_24C335B18;
  v194 = *(_QWORD *)(a41 + 36);
  v86 = *(_DWORD *)(a41 + 44);
  v193 = v85;
  v195 = v86;
  v186 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a42 + 31) < 0)
    std::string::__init_copy_ctor_external(&v187, *(const std::string::value_type **)(a42 + 8), *(_QWORD *)(a42 + 16));
  else
    v187 = *(std::string *)(a42 + 8);
  v188 = *(_DWORD *)(a42 + 32);
  v186 = &off_24C335AB8;
  v189 = *(_BYTE *)(a42 + 36);
  if (*(char *)(a42 + 63) < 0)
    std::string::__init_copy_ctor_external(&v190, *(const std::string::value_type **)(a42 + 40), *(_QWORD *)(a42 + 48));
  else
    v190 = *(std::string *)(a42 + 40);
  v181 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a43 + 31) < 0)
    std::string::__init_copy_ctor_external(&v182, *(const std::string::value_type **)(a43 + 8), *(_QWORD *)(a43 + 16));
  else
    v182 = *(std::string *)(a43 + 8);
  v183 = *(_DWORD *)(a43 + 32);
  v181 = &off_24C335AB8;
  v184 = *(_BYTE *)(a43 + 36);
  if (*(char *)(a43 + 63) < 0)
    std::string::__init_copy_ctor_external(&v185, *(const std::string::value_type **)(a43 + 40), *(_QWORD *)(a43 + 48));
  else
    v185 = *(std::string *)(a43 + 40);
  v177 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a44 + 31) < 0)
    std::string::__init_copy_ctor_external(&v178, *(const std::string::value_type **)(a44 + 8), *(_QWORD *)(a44 + 16));
  else
    v178 = *(std::string *)(a44 + 8);
  v179 = *(_DWORD *)(a44 + 32);
  v177 = off_24C335AF8;
  v180 = *(_QWORD *)(a44 + 36);
  v172 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a45 + 31) < 0)
    std::string::__init_copy_ctor_external(&v173, *(const std::string::value_type **)(a45 + 8), *(_QWORD *)(a45 + 16));
  else
    v173 = *(std::string *)(a45 + 8);
  v87 = *(_DWORD *)(a45 + 32);
  v172 = off_24C335B18;
  v175 = *(_QWORD *)(a45 + 36);
  v88 = *(_DWORD *)(a45 + 44);
  v174 = v87;
  v176 = v88;
  v168 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a46 + 31) < 0)
    std::string::__init_copy_ctor_external(&v169, *(const std::string::value_type **)(a46 + 8), *(_QWORD *)(a46 + 16));
  else
    v169 = *(std::string *)(a46 + 8);
  v170 = *(_DWORD *)(a46 + 32);
  v168 = off_24C335AF8;
  v171 = *(_QWORD *)(a46 + 36);
  v163 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a47 + 31) < 0)
    std::string::__init_copy_ctor_external(&v164, *(const std::string::value_type **)(a47 + 8), *(_QWORD *)(a47 + 16));
  else
    v164 = *(std::string *)(a47 + 8);
  v165 = *(_DWORD *)(a47 + 32);
  v163 = &off_24C335AB8;
  v166 = *(_BYTE *)(a47 + 36);
  if (*(char *)(a47 + 63) < 0)
    std::string::__init_copy_ctor_external(&v167, *(const std::string::value_type **)(a47 + 40), *(_QWORD *)(a47 + 48));
  else
    v167 = *(std::string *)(a47 + 40);
  v159 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a48 + 31) < 0)
    std::string::__init_copy_ctor_external(&v160, *(const std::string::value_type **)(a48 + 8), *(_QWORD *)(a48 + 16));
  else
    v160 = *(std::string *)(a48 + 8);
  v161 = *(_DWORD *)(a48 + 32);
  v159 = off_24C335AF8;
  v162 = *(_QWORD *)(a48 + 36);
  v154 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a49 + 31) < 0)
    std::string::__init_copy_ctor_external(&v155, *(const std::string::value_type **)(a49 + 8), *(_QWORD *)(a49 + 16));
  else
    v155 = *(std::string *)(a49 + 8);
  v89 = *(_DWORD *)(a49 + 32);
  v154 = off_24C335B18;
  v157 = *(_QWORD *)(a49 + 36);
  v90 = *(_DWORD *)(a49 + 44);
  v156 = v89;
  v158 = v90;
  v150 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a50 + 31) < 0)
    std::string::__init_copy_ctor_external(&v151, *(const std::string::value_type **)(a50 + 8), *(_QWORD *)(a50 + 16));
  else
    v151 = *(std::string *)(a50 + 8);
  v152 = *(_DWORD *)(a50 + 32);
  v150 = off_24C335AF8;
  v153 = *(_QWORD *)(a50 + 36);
  v146 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a51 + 31) < 0)
    std::string::__init_copy_ctor_external(&v147, *(const std::string::value_type **)(a51 + 8), *(_QWORD *)(a51 + 16));
  else
    v147 = *(std::string *)(a51 + 8);
  v148 = *(_DWORD *)(a51 + 32);
  v146 = off_24C335AF8;
  v149 = *(_QWORD *)(a51 + 36);
  v142 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a52 + 31) < 0)
    std::string::__init_copy_ctor_external(&v143, *(const std::string::value_type **)(a52 + 8), *(_QWORD *)(a52 + 16));
  else
    v143 = *(std::string *)(a52 + 8);
  v144 = *(_DWORD *)(a52 + 32);
  v142 = off_24C335AF8;
  v145 = *(_QWORD *)(a52 + 36);
  v137 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a53 + 31) < 0)
    std::string::__init_copy_ctor_external(&v138, *(const std::string::value_type **)(a53 + 8), *(_QWORD *)(a53 + 16));
  else
    v138 = *(std::string *)(a53 + 8);
  v139 = *(_DWORD *)(a53 + 32);
  v137 = &off_24C335AB8;
  v140 = *(_BYTE *)(a53 + 36);
  if (*(char *)(a53 + 63) < 0)
    std::string::__init_copy_ctor_external(&v141, *(const std::string::value_type **)(a53 + 40), *(_QWORD *)(a53 + 48));
  else
    v141 = *(std::string *)(a53 + 40);
  v132 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a54 + 31) < 0)
    std::string::__init_copy_ctor_external(&v133, *(const std::string::value_type **)(a54 + 8), *(_QWORD *)(a54 + 16));
  else
    v133 = *(std::string *)(a54 + 8);
  v134 = *(_DWORD *)(a54 + 32);
  v132 = &off_24C335AB8;
  v135 = *(_BYTE *)(a54 + 36);
  if (*(char *)(a54 + 63) < 0)
    std::string::__init_copy_ctor_external(&v136, *(const std::string::value_type **)(a54 + 40), *(_QWORD *)(a54 + 48));
  else
    v136 = *(std::string *)(a54 + 40);
  v127 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a55 + 31) < 0)
    std::string::__init_copy_ctor_external(&v128, *(const std::string::value_type **)(a55 + 8), *(_QWORD *)(a55 + 16));
  else
    v128 = *(std::string *)(a55 + 8);
  v91 = *(_DWORD *)(a55 + 32);
  v127 = off_24C335B18;
  v130 = *(_QWORD *)(a55 + 36);
  v92 = *(_DWORD *)(a55 + 44);
  v129 = v91;
  v131 = v92;
  v123 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a56 + 31) < 0)
    std::string::__init_copy_ctor_external(&v124, *(const std::string::value_type **)(a56 + 8), *(_QWORD *)(a56 + 16));
  else
    v124 = *(std::string *)(a56 + 8);
  v125 = *(_DWORD *)(a56 + 32);
  v123 = off_24C335AF8;
  v126 = *(_QWORD *)(a56 + 36);
  if (*(char *)(a57 + 31) < 0)
    std::string::__init_copy_ctor_external(&v120, *(const std::string::value_type **)(a57 + 8), *(_QWORD *)(a57 + 16));
  else
    v120 = *(std::string *)(a57 + 8);
  v121 = *(_DWORD *)(a57 + 32);
  v122 = *(_QWORD *)(a57 + 36);
  v599 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v600, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
  else
    v600 = __s;
  v601 = v357;
  v599 = off_24C335AF8;
  v602 = v358;
  v595 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v352.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v596, v352.__r_.__value_.__l.__data_, v352.__r_.__value_.__l.__size_);
  else
    v596 = v352;
  v597 = v353;
  v595 = off_24C335AF8;
  v598 = v354;
  v591 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v348.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v592, v348.__r_.__value_.__l.__data_, v348.__r_.__value_.__l.__size_);
  else
    v592 = v348;
  v593 = v349;
  v591 = off_24C335AF8;
  v594 = v350;
  v586 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v343.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v587, v343.__r_.__value_.__l.__data_, v343.__r_.__value_.__l.__size_);
  else
    v587 = v343;
  v588 = v344;
  v586 = &off_24C335AB8;
  v589 = v345;
  if (SHIBYTE(v346.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v590, v346.__r_.__value_.__l.__data_, v346.__r_.__value_.__l.__size_);
  else
    v590 = v346;
  v582 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v339.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v583, v339.__r_.__value_.__l.__data_, v339.__r_.__value_.__l.__size_);
  else
    v583 = v339;
  v584 = v340;
  v582 = off_24C335AF8;
  v585 = v341;
  v578 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v335.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v579, v335.__r_.__value_.__l.__data_, v335.__r_.__value_.__l.__size_);
  else
    v579 = v335;
  v580 = v336;
  v578 = off_24C335AF8;
  v581 = v337;
  v574 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v331.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v575, v331.__r_.__value_.__l.__data_, v331.__r_.__value_.__l.__size_);
  else
    v575 = v331;
  v576 = v332;
  v574 = off_24C335AF8;
  v577 = v333;
  v570 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v327.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v571, v327.__r_.__value_.__l.__data_, v327.__r_.__value_.__l.__size_);
  else
    v571 = v327;
  v572 = v328;
  v570 = off_24C335AF8;
  v573 = v329;
  v566 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v323.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v567, v323.__r_.__value_.__l.__data_, v323.__r_.__value_.__l.__size_);
  else
    v567 = v323;
  v568 = v324;
  v566 = off_24C335AF8;
  v569 = v325;
  v561 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v318.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v562, v318.__r_.__value_.__l.__data_, v318.__r_.__value_.__l.__size_);
  else
    v562 = v318;
  v561 = off_24C335B18;
  v564 = v320;
  v563 = v319;
  v565 = v321;
  v556 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v313.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v557, v313.__r_.__value_.__l.__data_, v313.__r_.__value_.__l.__size_);
  else
    v557 = v313;
  v556 = off_24C335B18;
  v559 = v315;
  v558 = v314;
  v560 = v316;
  v552 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v309.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v553, v309.__r_.__value_.__l.__data_, v309.__r_.__value_.__l.__size_);
  else
    v553 = v309;
  v554 = v310;
  v552 = off_24C335AF8;
  v555 = v311;
  v547 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v304.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v548, v304.__r_.__value_.__l.__data_, v304.__r_.__value_.__l.__size_);
  else
    v548 = v304;
  v549 = v305;
  v547 = &off_24C335AB8;
  v550 = v306;
  if (SHIBYTE(v307.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v551, v307.__r_.__value_.__l.__data_, v307.__r_.__value_.__l.__size_);
  else
    v551 = v307;
  v542 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v299.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v543, v299.__r_.__value_.__l.__data_, v299.__r_.__value_.__l.__size_);
  else
    v543 = v299;
  v544 = v300;
  v542 = &off_24C335AB8;
  v545 = v301;
  if (SHIBYTE(v302.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v546, v302.__r_.__value_.__l.__data_, v302.__r_.__value_.__l.__size_);
  else
    v546 = v302;
  v538 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v295.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v539, v295.__r_.__value_.__l.__data_, v295.__r_.__value_.__l.__size_);
  else
    v539 = v295;
  v540 = v296;
  v538 = off_24C335AF8;
  v541 = v297;
  v534 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v291.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v535, v291.__r_.__value_.__l.__data_, v291.__r_.__value_.__l.__size_);
  else
    v535 = v291;
  v536 = v292;
  v534 = off_24C335AF8;
  v537 = v293;
  v530 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v287.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v531, v287.__r_.__value_.__l.__data_, v287.__r_.__value_.__l.__size_);
  else
    v531 = v287;
  v532 = v288;
  v530 = off_24C335AF8;
  v533 = v289;
  v526 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v283.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v527, v283.__r_.__value_.__l.__data_, v283.__r_.__value_.__l.__size_);
  else
    v527 = v283;
  v528 = v284;
  v526 = off_24C335AF8;
  v529 = v285;
  v521 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v278.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v522, v278.__r_.__value_.__l.__data_, v278.__r_.__value_.__l.__size_);
  else
    v522 = v278;
  v521 = off_24C335B18;
  v524 = v280;
  v523 = v279;
  v525 = v281;
  v516 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v273.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v517, v273.__r_.__value_.__l.__data_, v273.__r_.__value_.__l.__size_);
  else
    v517 = v273;
  v518 = v274;
  v516 = &off_24C335AB8;
  v519 = v275;
  if (SHIBYTE(v276.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v520, v276.__r_.__value_.__l.__data_, v276.__r_.__value_.__l.__size_);
  else
    v520 = v276;
  v511 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v268.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v512, v268.__r_.__value_.__l.__data_, v268.__r_.__value_.__l.__size_);
  else
    v512 = v268;
  v513 = v269;
  v511 = &off_24C335AB8;
  v514 = v270;
  if (SHIBYTE(v271.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v515, v271.__r_.__value_.__l.__data_, v271.__r_.__value_.__l.__size_);
  else
    v515 = v271;
  v506 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v263.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v507, v263.__r_.__value_.__l.__data_, v263.__r_.__value_.__l.__size_);
  else
    v507 = v263;
  v506 = off_24C335B18;
  v509 = v265;
  v508 = v264;
  v510 = v266;
  v501 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v258.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v502, v258.__r_.__value_.__l.__data_, v258.__r_.__value_.__l.__size_);
  else
    v502 = v258;
  v501 = off_24C335B18;
  v504 = v260;
  v503 = v259;
  v505 = v261;
  v497 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v254.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v498, v254.__r_.__value_.__l.__data_, v254.__r_.__value_.__l.__size_);
  else
    v498 = v254;
  v499 = v255;
  v497 = off_24C335AF8;
  v500 = v256;
  v493 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v250.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v494, v250.__r_.__value_.__l.__data_, v250.__r_.__value_.__l.__size_);
  else
    v494 = v250;
  v495 = v251;
  v493 = off_24C335AF8;
  v496 = v252;
  v489 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v246.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v490, v246.__r_.__value_.__l.__data_, v246.__r_.__value_.__l.__size_);
  else
    v490 = v246;
  v491 = v247;
  v489 = off_24C335AF8;
  v492 = v248;
  v485 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v242.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v486, v242.__r_.__value_.__l.__data_, v242.__r_.__value_.__l.__size_);
  else
    v486 = v242;
  v487 = v243;
  v485 = off_24C335AF8;
  v488 = v244;
  v481 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v238.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v482, v238.__r_.__value_.__l.__data_, v238.__r_.__value_.__l.__size_);
  else
    v482 = v238;
  v483 = v239;
  v481 = off_24C335AF8;
  v484 = v240;
  v477 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v234.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v478, v234.__r_.__value_.__l.__data_, v234.__r_.__value_.__l.__size_);
  else
    v478 = v234;
  v479 = v235;
  v477 = off_24C335AF8;
  v480 = v236;
  v473 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v230.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v474, v230.__r_.__value_.__l.__data_, v230.__r_.__value_.__l.__size_);
  else
    v474 = v230;
  v475 = v231;
  v473 = off_24C335AF8;
  v476 = v232;
  v468 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v225.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v469, v225.__r_.__value_.__l.__data_, v225.__r_.__value_.__l.__size_);
  else
    v469 = v225;
  v470 = v226;
  v468 = &off_24C335AB8;
  v471 = v227;
  if (SHIBYTE(v228.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v472, v228.__r_.__value_.__l.__data_, v228.__r_.__value_.__l.__size_);
  else
    v472 = v228;
  v463 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v220.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v464, v220.__r_.__value_.__l.__data_, v220.__r_.__value_.__l.__size_);
  else
    v464 = v220;
  v465 = v221;
  v463 = &off_24C335AB8;
  v466 = v222;
  if (SHIBYTE(v223.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v467, v223.__r_.__value_.__l.__data_, v223.__r_.__value_.__l.__size_);
  else
    v467 = v223;
  v458 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v215.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v459, v215.__r_.__value_.__l.__data_, v215.__r_.__value_.__l.__size_);
  else
    v459 = v215;
  v460 = v216;
  v458 = &off_24C335AB8;
  v461 = v217;
  if (SHIBYTE(v218.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v462, v218.__r_.__value_.__l.__data_, v218.__r_.__value_.__l.__size_);
  else
    v462 = v218;
  v454 = (uint64_t (**)())off_24C335D90;
  v93 = SHIBYTE(v211.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v211.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v455, v211.__r_.__value_.__l.__data_, v211.__r_.__value_.__l.__size_);
  else
    v455 = v211;
  v456 = v212;
  v454 = off_24C335AF8;
  v457 = v213;
  v449 = (uint64_t (**)())off_24C335D90;
  v94 = SHIBYTE(v206.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v206.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v450, v206.__r_.__value_.__l.__data_, v206.__r_.__value_.__l.__size_);
  else
    v450 = v206;
  v449 = off_24C335B18;
  v452 = v208;
  v451 = v207;
  v453 = v209;
  v445 = (uint64_t (**)())off_24C335D90;
  v118 = SHIBYTE(v202.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v202.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v446, v202.__r_.__value_.__l.__data_, v202.__r_.__value_.__l.__size_);
  else
    v446 = v202;
  v117 = v94;
  v447 = v203;
  v445 = off_24C335AF8;
  v448 = v204;
  v440 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v197.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v441, v197.__r_.__value_.__l.__data_, v197.__r_.__value_.__l.__size_);
  else
    v441 = v197;
  v442 = v198;
  v440 = &off_24C335AB8;
  v443 = v199;
  if (SHIBYTE(v200.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v444, v200.__r_.__value_.__l.__data_, v200.__r_.__value_.__l.__size_);
  else
    v444 = v200;
  v435 = (uint64_t (**)())off_24C335D90;
  v95 = SHIBYTE(v192.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v192.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v436, v192.__r_.__value_.__l.__data_, v192.__r_.__value_.__l.__size_);
  else
    v436 = v192;
  v435 = off_24C335B18;
  v438 = v194;
  v437 = v193;
  v439 = v195;
  v430 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v187.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v431, v187.__r_.__value_.__l.__data_, v187.__r_.__value_.__l.__size_);
  else
    v431 = v187;
  v116 = v95;
  v432 = v188;
  v430 = &off_24C335AB8;
  v433 = v189;
  if (SHIBYTE(v190.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v434, v190.__r_.__value_.__l.__data_, v190.__r_.__value_.__l.__size_);
  else
    v434 = v190;
  v425 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v182.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v426, v182.__r_.__value_.__l.__data_, v182.__r_.__value_.__l.__size_);
  else
    v426 = v182;
  v427 = v183;
  v425 = &off_24C335AB8;
  v428 = v184;
  if (SHIBYTE(v185.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v429, v185.__r_.__value_.__l.__data_, v185.__r_.__value_.__l.__size_);
  else
    v429 = v185;
  v421 = (uint64_t (**)())off_24C335D90;
  v96 = SHIBYTE(v178.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v178.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v422, v178.__r_.__value_.__l.__data_, v178.__r_.__value_.__l.__size_);
  else
    v422 = v178;
  v423 = v179;
  v421 = off_24C335AF8;
  v424 = v180;
  v416 = (uint64_t (**)())off_24C335D90;
  v115 = SHIBYTE(v173.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v173.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v417, v173.__r_.__value_.__l.__data_, v173.__r_.__value_.__l.__size_);
  else
    v417 = v173;
  v416 = off_24C335B18;
  v419 = v175;
  v418 = v174;
  v420 = v176;
  v412 = (uint64_t (**)())off_24C335D90;
  v114 = SHIBYTE(v169.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v169.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v413, v169.__r_.__value_.__l.__data_, v169.__r_.__value_.__l.__size_);
  else
    v413 = v169;
  v414 = v170;
  v412 = off_24C335AF8;
  v415 = v171;
  v407 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v164.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v408, v164.__r_.__value_.__l.__data_, v164.__r_.__value_.__l.__size_);
  else
    v408 = v164;
  v409 = v165;
  v407 = &off_24C335AB8;
  v410 = v166;
  if (SHIBYTE(v167.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v411, v167.__r_.__value_.__l.__data_, v167.__r_.__value_.__l.__size_);
  else
    v411 = v167;
  v403 = (uint64_t (**)())off_24C335D90;
  v97 = SHIBYTE(v160.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v160.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v404, v160.__r_.__value_.__l.__data_, v160.__r_.__value_.__l.__size_);
  else
    v404 = v160;
  v405 = v161;
  v403 = off_24C335AF8;
  v406 = v162;
  v398 = (uint64_t (**)())off_24C335D90;
  v112 = SHIBYTE(v155.__r_.__value_.__r.__words[2]);
  v113 = v96;
  if (SHIBYTE(v155.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v399, v155.__r_.__value_.__l.__data_, v155.__r_.__value_.__l.__size_);
  else
    v399 = v155;
  v398 = off_24C335B18;
  v401 = v157;
  v400 = v156;
  v402 = v158;
  v394 = (uint64_t (**)())off_24C335D90;
  v98 = SHIBYTE(v151.__r_.__value_.__r.__words[2]);
  v111 = v93;
  if (SHIBYTE(v151.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v395, v151.__r_.__value_.__l.__data_, v151.__r_.__value_.__l.__size_);
  else
    v395 = v151;
  v396 = v152;
  v394 = off_24C335AF8;
  v397 = v153;
  v390 = (uint64_t (**)())off_24C335D90;
  v99 = SHIBYTE(v147.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v147.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v391, v147.__r_.__value_.__l.__data_, v147.__r_.__value_.__l.__size_);
  else
    v391 = v147;
  v392 = v148;
  v390 = off_24C335AF8;
  v393 = v149;
  v386 = (uint64_t (**)())off_24C335D90;
  v100 = SHIBYTE(v143.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v143.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v387, v143.__r_.__value_.__l.__data_, v143.__r_.__value_.__l.__size_);
  else
    v387 = v143;
  v388 = v144;
  v386 = off_24C335AF8;
  v389 = v145;
  v381 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v138.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v382, v138.__r_.__value_.__l.__data_, v138.__r_.__value_.__l.__size_);
  else
    v382 = v138;
  v383 = v139;
  v381 = &off_24C335AB8;
  v384 = v140;
  if (SHIBYTE(v141.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v385, v141.__r_.__value_.__l.__data_, v141.__r_.__value_.__l.__size_);
  else
    v385 = v141;
  v376 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v133.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v377, v133.__r_.__value_.__l.__data_, v133.__r_.__value_.__l.__size_);
  else
    v377 = v133;
  v378 = v134;
  v376 = &off_24C335AB8;
  v379 = v135;
  if (SHIBYTE(v136.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v380, v136.__r_.__value_.__l.__data_, v136.__r_.__value_.__l.__size_);
  else
    v380 = v136;
  v371 = (uint64_t (**)())off_24C335D90;
  v101 = SHIBYTE(v128.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v128.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v372, v128.__r_.__value_.__l.__data_, v128.__r_.__value_.__l.__size_);
  else
    v372 = v128;
  v371 = off_24C335B18;
  v374 = v130;
  v373 = v129;
  v375 = v131;
  v367 = (uint64_t (**)())off_24C335D90;
  v102 = SHIBYTE(v124.__r_.__value_.__r.__words[2]);
  v110 = v97;
  if (SHIBYTE(v124.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v368, v124.__r_.__value_.__l.__data_, v124.__r_.__value_.__l.__size_);
  else
    v368 = v124;
  v369 = v125;
  v367 = off_24C335AF8;
  v370 = v126;
  v363 = (uint64_t (**)())off_24C335D90;
  v103 = SHIBYTE(v120.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v120.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&__p, v120.__r_.__value_.__l.__data_, v120.__r_.__value_.__l.__size_);
  else
    __p = v120;
  v365 = v121;
  v363 = off_24C335AF8;
  v366 = v122;
  mediaplatform::DatabaseColumnTuple<33ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::DatabaseColumnTuple(v72, (uint64_t)&v599, (uint64_t)&v595, (uint64_t)&v591, (uint64_t)&v586, (uint64_t)&v582, (uint64_t)&v578, (uint64_t)&v574, (uint64_t)&v570, (uint64_t)&v566, (uint64_t)&v561, (uint64_t)&v556, (uint64_t)&v552, (uint64_t)&v547, (uint64_t)&v542, (uint64_t)&v538, (uint64_t)&v534, (uint64_t)&v530, (uint64_t)&v526,
    (uint64_t)&v521,
    (uint64_t)&v516,
    (uint64_t)&v511,
    (uint64_t)&v506,
    (uint64_t)&v501,
    (uint64_t)&v497,
    (uint64_t)&v493,
    (uint64_t)&v489,
    (uint64_t)&v485,
    (uint64_t)&v481,
    (uint64_t)&v477,
    (uint64_t)&v473,
    (uint64_t)&v468,
    (uint64_t)&v463,
    (uint64_t)&v458,
    (uint64_t)&v454,
    (uint64_t)&v449,
    (uint64_t)&v445,
    (uint64_t)&v440,
    (uint64_t)&v435,
    (uint64_t)&v430,
    (uint64_t)&v425,
    (uint64_t)&v421,
    (uint64_t)&v416,
    (uint64_t)&v412,
    (uint64_t)&v407,
    (uint64_t)&v403,
    (uint64_t)&v398,
    (uint64_t)&v394,
    (uint64_t)&v390,
    (uint64_t)&v386,
    (uint64_t)&v381,
    (uint64_t)&v376,
    (uint64_t)&v371,
    (uint64_t)&v367,
    (uint64_t)&v363);
  v363 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v367 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v368.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v368.__r_.__value_.__l.__data_);
  v371 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v372.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v372.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v376);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v381);
  v386 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v387.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v387.__r_.__value_.__l.__data_);
  v390 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v391.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v391.__r_.__value_.__l.__data_);
  v394 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v395.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v395.__r_.__value_.__l.__data_);
  v398 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v399.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v399.__r_.__value_.__l.__data_);
  v403 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v404.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v404.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v407);
  v412 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v413.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v413.__r_.__value_.__l.__data_);
  v416 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v417.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v417.__r_.__value_.__l.__data_);
  v421 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v422.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v422.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v425);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v430);
  v435 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v436.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v436.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v440);
  v445 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v446.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v446.__r_.__value_.__l.__data_);
  v449 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v450.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v450.__r_.__value_.__l.__data_);
  v454 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v455.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v455.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v458);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v463);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v468);
  v473 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v474.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v474.__r_.__value_.__l.__data_);
  v477 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v478.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v478.__r_.__value_.__l.__data_);
  v481 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v482.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v482.__r_.__value_.__l.__data_);
  v485 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v486.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v486.__r_.__value_.__l.__data_);
  v489 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v490.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v490.__r_.__value_.__l.__data_);
  v493 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v494.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v494.__r_.__value_.__l.__data_);
  v497 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v498.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v498.__r_.__value_.__l.__data_);
  v501 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v502.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v502.__r_.__value_.__l.__data_);
  v506 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v507.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v507.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v511);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v516);
  v521 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v522.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v522.__r_.__value_.__l.__data_);
  v526 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v527.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v527.__r_.__value_.__l.__data_);
  v530 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v531.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v531.__r_.__value_.__l.__data_);
  v534 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v535.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v535.__r_.__value_.__l.__data_);
  v538 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v539.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v539.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v542);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v547);
  v552 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v553.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v553.__r_.__value_.__l.__data_);
  v556 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v557.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v557.__r_.__value_.__l.__data_);
  v561 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v562.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v562.__r_.__value_.__l.__data_);
  v566 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v567.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v567.__r_.__value_.__l.__data_);
  v570 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v571.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v571.__r_.__value_.__l.__data_);
  v574 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v575.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v575.__r_.__value_.__l.__data_);
  v578 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v579.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v579.__r_.__value_.__l.__data_);
  v582 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v583.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v583.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v586);
  v591 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v592.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v592.__r_.__value_.__l.__data_);
  v595 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v596.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v596.__r_.__value_.__l.__data_);
  v599 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v600.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v600.__r_.__value_.__l.__data_);
  *(_QWORD *)(v72 + 2816) = off_24C335D90;
  v104 = (std::string *)(v72 + 2824);
  v105 = SHIBYTE(v360.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v360.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v104, v360.__r_.__value_.__l.__data_, v360.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v104->__r_.__value_.__l.__data_ = *(_OWORD *)&v360.__r_.__value_.__l.__data_;
    *(_QWORD *)(v119 + 2840) = *((_QWORD *)&v360.__r_.__value_.__l + 2);
  }
  *(_DWORD *)(v119 + 2848) = v361;
  *(_QWORD *)(v119 + 2816) = off_24C335AF8;
  *(_QWORD *)(v119 + 2852) = v362;
  if (v103 < 0)
    operator delete(v120.__r_.__value_.__l.__data_);
  v123 = (uint64_t (**)())off_24C335D90;
  if (v102 < 0)
    operator delete(v124.__r_.__value_.__l.__data_);
  v127 = (uint64_t (**)())off_24C335D90;
  if (v101 < 0)
    operator delete(v128.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v132);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v137);
  v142 = (uint64_t (**)())off_24C335D90;
  if (v100 < 0)
    operator delete(v143.__r_.__value_.__l.__data_);
  v146 = (uint64_t (**)())off_24C335D90;
  if (v99 < 0)
    operator delete(v147.__r_.__value_.__l.__data_);
  v150 = (uint64_t (**)())off_24C335D90;
  if (v98 < 0)
    operator delete(v151.__r_.__value_.__l.__data_);
  v154 = (uint64_t (**)())off_24C335D90;
  if (v112 < 0)
    operator delete(v155.__r_.__value_.__l.__data_);
  v159 = (uint64_t (**)())off_24C335D90;
  if (v110 < 0)
    operator delete(v160.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v163);
  v168 = (uint64_t (**)())off_24C335D90;
  if (v114 < 0)
    operator delete(v169.__r_.__value_.__l.__data_);
  v172 = (uint64_t (**)())off_24C335D90;
  if (v115 < 0)
    operator delete(v173.__r_.__value_.__l.__data_);
  v177 = (uint64_t (**)())off_24C335D90;
  if (v113 < 0)
    operator delete(v178.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v181);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v186);
  v191 = (uint64_t (**)())off_24C335D90;
  if (v116 < 0)
    operator delete(v192.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v196);
  v201 = (uint64_t (**)())off_24C335D90;
  if (v118 < 0)
    operator delete(v202.__r_.__value_.__l.__data_);
  v205 = (uint64_t (**)())off_24C335D90;
  if (v117 < 0)
    operator delete(v206.__r_.__value_.__l.__data_);
  v210 = (uint64_t (**)())off_24C335D90;
  if (v111 < 0)
    operator delete(v211.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v214);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v219);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v224);
  v229 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v230.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v230.__r_.__value_.__l.__data_);
  v233 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v234.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v234.__r_.__value_.__l.__data_);
  v237 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v238.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v238.__r_.__value_.__l.__data_);
  v241 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v242.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v242.__r_.__value_.__l.__data_);
  v245 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v246.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v246.__r_.__value_.__l.__data_);
  if (SHIBYTE(v250.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v250.__r_.__value_.__l.__data_);
  if (SHIBYTE(v254.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v254.__r_.__value_.__l.__data_);
  if (SHIBYTE(v258.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v258.__r_.__value_.__l.__data_);
  if (SHIBYTE(v263.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v263.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v267);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v272);
  if (SHIBYTE(v278.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v278.__r_.__value_.__l.__data_);
  if (SHIBYTE(v283.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v283.__r_.__value_.__l.__data_);
  if (SHIBYTE(v287.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v287.__r_.__value_.__l.__data_);
  if (SHIBYTE(v291.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v291.__r_.__value_.__l.__data_);
  if (SHIBYTE(v295.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v295.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v298);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v303);
  if (SHIBYTE(v309.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v309.__r_.__value_.__l.__data_);
  if (SHIBYTE(v313.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v313.__r_.__value_.__l.__data_);
  if (SHIBYTE(v318.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v318.__r_.__value_.__l.__data_);
  if (SHIBYTE(v323.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v323.__r_.__value_.__l.__data_);
  if (SHIBYTE(v327.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v327.__r_.__value_.__l.__data_);
  if (SHIBYTE(v331.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v331.__r_.__value_.__l.__data_);
  if (SHIBYTE(v335.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v335.__r_.__value_.__l.__data_);
  if (SHIBYTE(v339.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v339.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v342);
  if (SHIBYTE(v348.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v348.__r_.__value_.__l.__data_);
  if (SHIBYTE(v352.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v352.__r_.__value_.__l.__data_);
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__s.__r_.__value_.__l.__data_);
    if ((v105 & 0x80000000) == 0)
      goto LABEL_575;
  }
  else if ((v105 & 0x80000000) == 0)
  {
    goto LABEL_575;
  }
  operator delete(v360.__r_.__value_.__l.__data_);
LABEL_575:
  *(_QWORD *)(v119 + 2864) = off_24C335D90;
  v106 = (std::string *)(v119 + 2872);
  if (*(char *)(v109 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v106, *(const std::string::value_type **)(v109 + 8), *(_QWORD *)(v109 + 16));
  }
  else
  {
    v107 = *(_OWORD *)(v109 + 8);
    *(_QWORD *)(v119 + 2888) = *(_QWORD *)(v109 + 24);
    *(_OWORD *)&v106->__r_.__value_.__l.__data_ = v107;
  }
  *(_DWORD *)(v119 + 2896) = *(_DWORD *)(v109 + 32);
  *(_QWORD *)(v119 + 2864) = off_24C335AF8;
  *(_QWORD *)(v119 + 2900) = *(_QWORD *)(v109 + 36);
  return v119;
}

void sub_20A7C22C0(_Unwind_Exception *a1)
{
  uint64_t v1;

  mediaplatform::DatabaseColumnTuple<32ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(v1);
  _Unwind_Resume(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<31ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(uint64_t a1)
{
  *(_QWORD *)(a1 + 2864) = off_24C335D90;
  if (*(char *)(a1 + 2895) < 0)
    operator delete(*(void **)(a1 + 2872));
  *(_QWORD *)(a1 + 2816) = off_24C335D90;
  if (*(char *)(a1 + 2847) < 0)
    operator delete(*(void **)(a1 + 2824));
  *(_QWORD *)(a1 + 2768) = off_24C335D90;
  if (*(char *)(a1 + 2799) < 0)
    operator delete(*(void **)(a1 + 2776));
  return mediaplatform::DatabaseColumnTuple<34ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<32ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(uint64_t a1)
{
  *(_QWORD *)(a1 + 2816) = off_24C335D90;
  if (*(char *)(a1 + 2847) < 0)
    operator delete(*(void **)(a1 + 2824));
  *(_QWORD *)(a1 + 2768) = off_24C335D90;
  if (*(char *)(a1 + 2799) < 0)
    operator delete(*(void **)(a1 + 2776));
  return mediaplatform::DatabaseColumnTuple<34ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<33ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::DatabaseColumnTuple(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55)
{
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  int v70;
  int v71;
  int v72;
  int v73;
  int v74;
  int v75;
  int v76;
  int v77;
  int v78;
  int v79;
  int v80;
  int v81;
  uint64_t v82;
  int v83;
  int v84;
  int v85;
  int v86;
  int v87;
  int v88;
  int v89;
  int v90;
  int v91;
  int v92;
  int v93;
  int v94;
  uint64_t v95;
  int v96;
  int v97;
  int v98;
  int v99;
  int v100;
  int v101;
  int v102;
  int v103;
  int v104;
  int v105;
  int v106;
  int v107;
  std::string *v108;
  int v109;
  std::string *v110;
  __int128 v111;
  uint64_t result;
  int v113;
  uint64_t v114;
  int v115;
  int v116;
  uint64_t v117;
  int v118;
  uint64_t v119;
  int v120;
  uint64_t v121;
  int v122;
  int v123;
  uint64_t v124;
  int v125;
  uint64_t v126;
  int v127;
  int v128;
  uint64_t v129;
  int v130;
  int v131;
  uint64_t v132;
  int v133;
  int v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  int v138;
  uint64_t v139;
  uint64_t v140;
  int v141;
  uint64_t v142;
  uint64_t v143;
  int v144;
  uint64_t v145;
  int v146;
  int v147;
  uint64_t v148;
  int v149;
  int v150;
  int v151;
  int v152;
  int v153;
  uint64_t v154;
  uint64_t v155;
  int v156;
  uint64_t v157;
  int v158;
  uint64_t v159;
  int v160;
  uint64_t v161;
  int v162;
  int v163;
  uint64_t v164;
  int v165;
  uint64_t v166;
  int v167;
  uint64_t v168;
  int v169;
  int v170;
  uint64_t v171;
  int v172;
  int v173;
  int v174;
  int v175;
  uint64_t v176;
  int v177;
  int v178;
  int v179;
  int v180;
  int v181;
  uint64_t v182;
  int v183;
  int v184;
  uint64_t v185;
  std::string v186;
  int v187;
  uint64_t v188;
  uint64_t (**v189)();
  std::string v190;
  int v191;
  uint64_t v192;
  uint64_t (**v193)();
  std::string v194;
  int v195;
  uint64_t v196;
  int v197;
  uint64_t (**v198)();
  std::string v199;
  int v200;
  char v201;
  std::string v202;
  uint64_t (**v203)();
  std::string v204;
  int v205;
  char v206;
  std::string v207;
  uint64_t (**v208)();
  std::string v209;
  int v210;
  uint64_t v211;
  uint64_t (**v212)();
  std::string v213;
  int v214;
  uint64_t v215;
  uint64_t (**v216)();
  std::string v217;
  int v218;
  uint64_t v219;
  uint64_t (**v220)();
  std::string v221;
  int v222;
  uint64_t v223;
  int v224;
  uint64_t (**v225)();
  std::string v226;
  int v227;
  uint64_t v228;
  uint64_t (**v229)();
  std::string v230;
  int v231;
  char v232;
  std::string v233;
  uint64_t (**v234)();
  std::string v235;
  int v236;
  uint64_t v237;
  uint64_t (**v238)();
  std::string v239;
  int v240;
  uint64_t v241;
  int v242;
  uint64_t (**v243)();
  std::string v244;
  int v245;
  uint64_t v246;
  uint64_t (**v247)();
  std::string v248;
  int v249;
  char v250;
  std::string v251;
  uint64_t (**v252)();
  std::string v253;
  int v254;
  char v255;
  std::string v256;
  uint64_t (**v257)();
  std::string v258;
  int v259;
  uint64_t v260;
  int v261;
  uint64_t (**v262)();
  std::string v263;
  int v264;
  char v265;
  std::string v266;
  uint64_t (**v267)();
  std::string v268;
  int v269;
  uint64_t v270;
  uint64_t (**v271)();
  std::string v272;
  int v273;
  uint64_t v274;
  int v275;
  uint64_t (**v276)();
  std::string v277;
  int v278;
  uint64_t v279;
  uint64_t (**v280)();
  std::string v281;
  int v282;
  char v283;
  std::string v284;
  uint64_t (**v285)();
  std::string v286;
  int v287;
  char v288;
  std::string v289;
  uint64_t (**v290)();
  std::string v291;
  int v292;
  char v293;
  std::string v294;
  uint64_t (**v295)();
  std::string v296;
  int v297;
  uint64_t v298;
  uint64_t (**v299)();
  std::string v300;
  int v301;
  uint64_t v302;
  uint64_t (**v303)();
  std::string v304;
  int v305;
  uint64_t v306;
  uint64_t (**v307)();
  std::string v308;
  int v309;
  uint64_t v310;
  uint64_t (**v311)();
  std::string v312;
  int v313;
  uint64_t v314;
  uint64_t (**v315)();
  std::string v316;
  int v317;
  uint64_t v318;
  uint64_t (**v319)();
  std::string v320;
  int v321;
  uint64_t v322;
  uint64_t (**v323)();
  std::string v324;
  int v325;
  uint64_t v326;
  int v327;
  uint64_t (**v328)();
  std::string v329;
  int v330;
  uint64_t v331;
  int v332;
  uint64_t (**v333)();
  std::string v334;
  int v335;
  char v336;
  std::string v337;
  uint64_t (**v338)();
  std::string v339;
  int v340;
  char v341;
  std::string v342;
  uint64_t (**v343)();
  std::string v344;
  int v345;
  uint64_t v346;
  int v347;
  uint64_t (**v348)();
  std::string v349;
  int v350;
  uint64_t v351;
  uint64_t (**v352)();
  std::string v353;
  int v354;
  uint64_t v355;
  uint64_t (**v356)();
  std::string v357;
  int v358;
  uint64_t v359;
  uint64_t (**v360)();
  std::string v361;
  int v362;
  uint64_t v363;
  uint64_t (**v364)();
  std::string v365;
  int v366;
  char v367;
  std::string v368;
  uint64_t (**v369)();
  std::string v370;
  int v371;
  char v372;
  std::string v373;
  uint64_t (**v374)();
  std::string v375;
  int v376;
  uint64_t v377;
  uint64_t (**v378)();
  std::string v379;
  int v380;
  uint64_t v381;
  int v382;
  uint64_t (**v383)();
  std::string v384;
  int v385;
  uint64_t v386;
  int v387;
  uint64_t (**v388)();
  std::string v389;
  int v390;
  uint64_t v391;
  uint64_t (**v392)();
  std::string v393;
  int v394;
  uint64_t v395;
  uint64_t (**v396)();
  std::string v397;
  int v398;
  uint64_t v399;
  uint64_t (**v400)();
  std::string v401;
  int v402;
  uint64_t v403;
  uint64_t (**v404)();
  std::string v405;
  int v406;
  uint64_t v407;
  uint64_t (**v408)();
  std::string v409;
  int v410;
  char v411;
  std::string v412;
  uint64_t (**v413)();
  std::string __s;
  int v415;
  uint64_t v416;
  uint64_t (**v417)();
  std::string v418;
  int v419;
  uint64_t v420;
  uint64_t (**v421)();
  std::string __p;
  int v423;
  uint64_t v424;
  uint64_t (**v425)();
  std::string v426;
  int v427;
  uint64_t v428;
  uint64_t (**v429)();
  std::string v430;
  int v431;
  uint64_t v432;
  int v433;
  uint64_t (**v434)();
  std::string v435;
  int v436;
  char v437;
  std::string v438;
  uint64_t (**v439)();
  std::string v440;
  int v441;
  char v442;
  std::string v443;
  uint64_t (**v444)();
  std::string v445;
  int v446;
  uint64_t v447;
  uint64_t (**v448)();
  std::string v449;
  int v450;
  uint64_t v451;
  uint64_t (**v452)();
  std::string v453;
  int v454;
  uint64_t v455;
  uint64_t (**v456)();
  std::string v457;
  int v458;
  uint64_t v459;
  int v460;
  uint64_t (**v461)();
  std::string v462;
  int v463;
  uint64_t v464;
  uint64_t (**v465)();
  std::string v466;
  int v467;
  char v468;
  std::string v469;
  uint64_t (**v470)();
  std::string v471;
  int v472;
  uint64_t v473;
  uint64_t (**v474)();
  std::string v475;
  int v476;
  uint64_t v477;
  int v478;
  uint64_t (**v479)();
  std::string v480;
  int v481;
  uint64_t v482;
  uint64_t (**v483)();
  std::string v484;
  int v485;
  char v486;
  std::string v487;
  uint64_t (**v488)();
  std::string v489;
  int v490;
  char v491;
  std::string v492;
  uint64_t (**v493)();
  std::string v494;
  int v495;
  uint64_t v496;
  int v497;
  uint64_t (**v498)();
  std::string v499;
  int v500;
  char v501;
  std::string v502;
  uint64_t (**v503)();
  std::string v504;
  int v505;
  uint64_t v506;
  uint64_t (**v507)();
  std::string v508;
  int v509;
  uint64_t v510;
  int v511;
  uint64_t (**v512)();
  std::string v513;
  int v514;
  uint64_t v515;
  uint64_t (**v516)();
  std::string v517;
  int v518;
  char v519;
  std::string v520;
  uint64_t (**v521)();
  std::string v522;
  int v523;
  char v524;
  std::string v525;
  uint64_t (**v526)();
  std::string v527;
  int v528;
  char v529;
  std::string v530;
  uint64_t (**v531)();
  std::string v532;
  int v533;
  uint64_t v534;
  uint64_t (**v535)();
  std::string v536;
  int v537;
  uint64_t v538;
  uint64_t (**v539)();
  std::string v540;
  int v541;
  uint64_t v542;
  uint64_t (**v543)();
  std::string v544;
  int v545;
  uint64_t v546;
  uint64_t (**v547)();
  std::string v548;
  int v549;
  uint64_t v550;
  uint64_t (**v551)();
  std::string v552;
  int v553;
  uint64_t v554;
  uint64_t (**v555)();
  std::string v556;
  int v557;
  uint64_t v558;
  uint64_t (**v559)();
  std::string v560;
  int v561;
  uint64_t v562;
  int v563;
  uint64_t (**v564)();
  std::string v565;
  int v566;
  uint64_t v567;
  int v568;
  uint64_t (**v569)();
  std::string v570;
  int v571;
  char v572;
  std::string v573;
  uint64_t (**v574)();
  std::string v575;
  int v576;
  char v577;
  std::string v578;
  uint64_t (**v579)();
  std::string v580;
  int v581;
  uint64_t v582;
  int v583;
  uint64_t (**v584)();
  std::string v585;
  int v586;
  uint64_t v587;
  uint64_t (**v588)();
  std::string v589;
  int v590;
  uint64_t v591;
  uint64_t (**v592)();
  std::string v593;
  int v594;
  uint64_t v595;
  uint64_t (**v596)();
  std::string v597;
  int v598;
  uint64_t v599;
  uint64_t (**v600)();
  std::string v601;
  int v602;
  char v603;
  std::string v604;
  uint64_t (**v605)();
  std::string v606;
  int v607;
  char v608;
  std::string v609;
  uint64_t (**v610)();
  std::string v611;
  int v612;
  uint64_t v613;
  uint64_t (**v614)();
  std::string v615;
  int v616;
  uint64_t v617;
  int v618;
  uint64_t (**v619)();
  std::string v620;
  int v621;
  uint64_t v622;
  int v623;
  uint64_t (**v624)();
  std::string v625;
  int v626;
  uint64_t v627;
  uint64_t (**v628)();
  std::string v629;
  int v630;
  uint64_t v631;
  uint64_t (**v632)();
  std::string v633;
  int v634;
  uint64_t v635;
  uint64_t (**v636)();
  std::string v637;
  int v638;
  uint64_t v639;
  uint64_t (**v640)();
  std::string v641;
  int v642;
  uint64_t v643;
  uint64_t (**v644)();
  std::string v645;
  int v646;
  char v647;
  std::string v648;
  uint64_t (**v649)();
  std::string v650;
  int v651;
  uint64_t v652;

  v55 = MEMORY[0x24BDAC7A8](a1);
  v58 = v57;
  v60 = v59;
  v62 = v61;
  v64 = v63;
  v66 = v65;
  v67 = v56;
  v69 = v68;
  v185 = v55;
  if (*(char *)(v56 + 31) < 0)
    std::string::__init_copy_ctor_external(&v418, *(const std::string::value_type **)(v56 + 8), *(_QWORD *)(v56 + 16));
  else
    v418 = *(std::string *)(v56 + 8);
  v419 = *(_DWORD *)(v67 + 32);
  v417 = off_24C335AF8;
  v420 = *(_QWORD *)(v67 + 36);
  if (*(char *)(v66 + 31) < 0)
    std::string::__init_copy_ctor_external(&__s, *(const std::string::value_type **)(v66 + 8), *(_QWORD *)(v66 + 16));
  else
    __s = *(std::string *)(v66 + 8);
  v184 = *(_DWORD *)(v66 + 32);
  v415 = v184;
  v413 = off_24C335AF8;
  v182 = *(_QWORD *)(v66 + 36);
  v416 = v182;
  v408 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(v64 + 31) < 0)
    std::string::__init_copy_ctor_external(&v409, *(const std::string::value_type **)(v64 + 8), *(_QWORD *)(v64 + 16));
  else
    v409 = *(std::string *)(v64 + 8);
  v410 = *(_DWORD *)(v64 + 32);
  v408 = &off_24C335AB8;
  v411 = *(_BYTE *)(v64 + 36);
  if (*(char *)(v64 + 63) < 0)
    std::string::__init_copy_ctor_external(&v412, *(const std::string::value_type **)(v64 + 40), *(_QWORD *)(v64 + 48));
  else
    v412 = *(std::string *)(v64 + 40);
  if (*(char *)(v62 + 31) < 0)
    std::string::__init_copy_ctor_external(&v405, *(const std::string::value_type **)(v62 + 8), *(_QWORD *)(v62 + 16));
  else
    v405 = *(std::string *)(v62 + 8);
  v178 = *(_DWORD *)(v62 + 32);
  v406 = v178;
  v404 = off_24C335AF8;
  v176 = *(_QWORD *)(v62 + 36);
  v407 = v176;
  if (*(char *)(v60 + 31) < 0)
    std::string::__init_copy_ctor_external(&v401, *(const std::string::value_type **)(v60 + 8), *(_QWORD *)(v60 + 16));
  else
    v401 = *(std::string *)(v60 + 8);
  v173 = *(_DWORD *)(v60 + 32);
  v402 = v173;
  v400 = off_24C335AF8;
  v171 = *(_QWORD *)(v60 + 36);
  v403 = v171;
  if (*(char *)(v58 + 31) < 0)
    std::string::__init_copy_ctor_external(&v397, *(const std::string::value_type **)(v58 + 8), *(_QWORD *)(v58 + 16));
  else
    v397 = *(std::string *)(v58 + 8);
  v170 = *(_DWORD *)(v58 + 32);
  v398 = v170;
  v396 = off_24C335AF8;
  v168 = *(_QWORD *)(v58 + 36);
  v399 = v168;
  if (*(char *)(a9 + 31) < 0)
    std::string::__init_copy_ctor_external(&v393, *(const std::string::value_type **)(a9 + 8), *(_QWORD *)(a9 + 16));
  else
    v393 = *(std::string *)(a9 + 8);
  v167 = *(_DWORD *)(a9 + 32);
  v394 = v167;
  v392 = off_24C335AF8;
  v166 = *(_QWORD *)(a9 + 36);
  v395 = v166;
  if (*(char *)(a10 + 31) < 0)
    std::string::__init_copy_ctor_external(&v389, *(const std::string::value_type **)(a10 + 8), *(_QWORD *)(a10 + 16));
  else
    v389 = *(std::string *)(a10 + 8);
  v165 = *(_DWORD *)(a10 + 32);
  v390 = v165;
  v388 = off_24C335AF8;
  v164 = *(_QWORD *)(a10 + 36);
  v391 = v164;
  if (*(char *)(a11 + 31) < 0)
    std::string::__init_copy_ctor_external(&v384, *(const std::string::value_type **)(a11 + 8), *(_QWORD *)(a11 + 16));
  else
    v384 = *(std::string *)(a11 + 8);
  v70 = *(_DWORD *)(a11 + 32);
  v383 = off_24C335B18;
  v386 = *(_QWORD *)(a11 + 36);
  v71 = *(_DWORD *)(a11 + 44);
  v163 = v70;
  v385 = v70;
  v387 = v71;
  if (*(char *)(a12 + 31) < 0)
    std::string::__init_copy_ctor_external(&v379, *(const std::string::value_type **)(a12 + 8), *(_QWORD *)(a12 + 16));
  else
    v379 = *(std::string *)(a12 + 8);
  v72 = *(_DWORD *)(a12 + 32);
  v378 = off_24C335B18;
  v381 = *(_QWORD *)(a12 + 36);
  v73 = *(_DWORD *)(a12 + 44);
  v162 = v72;
  v380 = v72;
  v382 = v73;
  v136 = v69;
  if (*(char *)(a13 + 31) < 0)
    std::string::__init_copy_ctor_external(&v375, *(const std::string::value_type **)(a13 + 8), *(_QWORD *)(a13 + 16));
  else
    v375 = *(std::string *)(a13 + 8);
  v74 = *(_DWORD *)(a13 + 32);
  v376 = v74;
  v374 = off_24C335AF8;
  v161 = *(_QWORD *)(a13 + 36);
  v377 = v161;
  v369 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a14 + 31) < 0)
    std::string::__init_copy_ctor_external(&v370, *(const std::string::value_type **)(a14 + 8), *(_QWORD *)(a14 + 16));
  else
    v370 = *(std::string *)(a14 + 8);
  v371 = *(_DWORD *)(a14 + 32);
  v369 = &off_24C335AB8;
  v372 = *(_BYTE *)(a14 + 36);
  if (*(char *)(a14 + 63) < 0)
    std::string::__init_copy_ctor_external(&v373, *(const std::string::value_type **)(a14 + 40), *(_QWORD *)(a14 + 48));
  else
    v373 = *(std::string *)(a14 + 40);
  v364 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a15 + 31) < 0)
    std::string::__init_copy_ctor_external(&v365, *(const std::string::value_type **)(a15 + 8), *(_QWORD *)(a15 + 16));
  else
    v365 = *(std::string *)(a15 + 8);
  v366 = *(_DWORD *)(a15 + 32);
  v364 = &off_24C335AB8;
  v367 = *(_BYTE *)(a15 + 36);
  if (*(char *)(a15 + 63) < 0)
    std::string::__init_copy_ctor_external(&v368, *(const std::string::value_type **)(a15 + 40), *(_QWORD *)(a15 + 48));
  else
    v368 = *(std::string *)(a15 + 40);
  if (*(char *)(a16 + 31) < 0)
    std::string::__init_copy_ctor_external(&v361, *(const std::string::value_type **)(a16 + 8), *(_QWORD *)(a16 + 16));
  else
    v361 = *(std::string *)(a16 + 8);
  v160 = *(_DWORD *)(a16 + 32);
  v362 = v160;
  v360 = off_24C335AF8;
  v159 = *(_QWORD *)(a16 + 36);
  v363 = v159;
  if (*(char *)(a17 + 31) < 0)
    std::string::__init_copy_ctor_external(&v357, *(const std::string::value_type **)(a17 + 8), *(_QWORD *)(a17 + 16));
  else
    v357 = *(std::string *)(a17 + 8);
  v158 = *(_DWORD *)(a17 + 32);
  v358 = v158;
  v356 = off_24C335AF8;
  v157 = *(_QWORD *)(a17 + 36);
  v359 = v157;
  if (*(char *)(a18 + 31) < 0)
    std::string::__init_copy_ctor_external(&v353, *(const std::string::value_type **)(a18 + 8), *(_QWORD *)(a18 + 16));
  else
    v353 = *(std::string *)(a18 + 8);
  v156 = *(_DWORD *)(a18 + 32);
  v354 = v156;
  v352 = off_24C335AF8;
  v155 = *(_QWORD *)(a18 + 36);
  v355 = v155;
  if (*(char *)(a19 + 31) < 0)
    std::string::__init_copy_ctor_external(&v349, *(const std::string::value_type **)(a19 + 8), *(_QWORD *)(a19 + 16));
  else
    v349 = *(std::string *)(a19 + 8);
  v75 = *(_DWORD *)(a19 + 32);
  v350 = v75;
  v348 = off_24C335AF8;
  v154 = *(_QWORD *)(a19 + 36);
  v351 = v154;
  if (*(char *)(a20 + 31) < 0)
    std::string::__init_copy_ctor_external(&v344, *(const std::string::value_type **)(a20 + 8), *(_QWORD *)(a20 + 16));
  else
    v344 = *(std::string *)(a20 + 8);
  v76 = *(_DWORD *)(a20 + 32);
  v343 = off_24C335B18;
  v346 = *(_QWORD *)(a20 + 36);
  v77 = *(_DWORD *)(a20 + 44);
  v153 = v76;
  v345 = v76;
  v347 = v77;
  v338 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a21 + 31) < 0)
    std::string::__init_copy_ctor_external(&v339, *(const std::string::value_type **)(a21 + 8), *(_QWORD *)(a21 + 16));
  else
    v339 = *(std::string *)(a21 + 8);
  v340 = *(_DWORD *)(a21 + 32);
  v338 = &off_24C335AB8;
  v341 = *(_BYTE *)(a21 + 36);
  if (*(char *)(a21 + 63) < 0)
    std::string::__init_copy_ctor_external(&v342, *(const std::string::value_type **)(a21 + 40), *(_QWORD *)(a21 + 48));
  else
    v342 = *(std::string *)(a21 + 40);
  v333 = (uint64_t (**)())off_24C335D90;
  v152 = v75;
  if (*(char *)(a22 + 31) < 0)
    std::string::__init_copy_ctor_external(&v334, *(const std::string::value_type **)(a22 + 8), *(_QWORD *)(a22 + 16));
  else
    v334 = *(std::string *)(a22 + 8);
  v335 = *(_DWORD *)(a22 + 32);
  v333 = &off_24C335AB8;
  v336 = *(_BYTE *)(a22 + 36);
  if (*(char *)(a22 + 63) < 0)
    std::string::__init_copy_ctor_external(&v337, *(const std::string::value_type **)(a22 + 40), *(_QWORD *)(a22 + 48));
  else
    v337 = *(std::string *)(a22 + 40);
  if (*(char *)(a23 + 31) < 0)
    std::string::__init_copy_ctor_external(&v329, *(const std::string::value_type **)(a23 + 8), *(_QWORD *)(a23 + 16));
  else
    v329 = *(std::string *)(a23 + 8);
  v78 = *(_DWORD *)(a23 + 32);
  v328 = off_24C335B18;
  v331 = *(_QWORD *)(a23 + 36);
  v79 = *(_DWORD *)(a23 + 44);
  v151 = v78;
  v330 = v78;
  v332 = v79;
  if (*(char *)(a24 + 31) < 0)
    std::string::__init_copy_ctor_external(&v324, *(const std::string::value_type **)(a24 + 8), *(_QWORD *)(a24 + 16));
  else
    v324 = *(std::string *)(a24 + 8);
  v80 = *(_DWORD *)(a24 + 32);
  v323 = off_24C335B18;
  v326 = *(_QWORD *)(a24 + 36);
  v81 = *(_DWORD *)(a24 + 44);
  v150 = v80;
  v325 = v80;
  v327 = v81;
  if (*(char *)(a25 + 31) < 0)
    std::string::__init_copy_ctor_external(&v320, *(const std::string::value_type **)(a25 + 8), *(_QWORD *)(a25 + 16));
  else
    v320 = *(std::string *)(a25 + 8);
  v149 = *(_DWORD *)(a25 + 32);
  v321 = v149;
  v319 = off_24C335AF8;
  v148 = *(_QWORD *)(a25 + 36);
  v322 = v148;
  if (*(char *)(a26 + 31) < 0)
    std::string::__init_copy_ctor_external(&v316, *(const std::string::value_type **)(a26 + 8), *(_QWORD *)(a26 + 16));
  else
    v316 = *(std::string *)(a26 + 8);
  v147 = *(_DWORD *)(a26 + 32);
  v317 = v147;
  v315 = off_24C335AF8;
  v82 = *(_QWORD *)(a26 + 36);
  v318 = v82;
  if (*(char *)(a27 + 31) < 0)
    std::string::__init_copy_ctor_external(&v312, *(const std::string::value_type **)(a27 + 8), *(_QWORD *)(a27 + 16));
  else
    v312 = *(std::string *)(a27 + 8);
  v146 = *(_DWORD *)(a27 + 32);
  v313 = v146;
  v311 = off_24C335AF8;
  v145 = *(_QWORD *)(a27 + 36);
  v314 = v145;
  if (*(char *)(a28 + 31) < 0)
    std::string::__init_copy_ctor_external(&v308, *(const std::string::value_type **)(a28 + 8), *(_QWORD *)(a28 + 16));
  else
    v308 = *(std::string *)(a28 + 8);
  v144 = *(_DWORD *)(a28 + 32);
  v309 = v144;
  v307 = off_24C335AF8;
  v143 = *(_QWORD *)(a28 + 36);
  v310 = v143;
  if (*(char *)(a29 + 31) < 0)
    std::string::__init_copy_ctor_external(&v304, *(const std::string::value_type **)(a29 + 8), *(_QWORD *)(a29 + 16));
  else
    v304 = *(std::string *)(a29 + 8);
  v83 = *(_DWORD *)(a29 + 32);
  v305 = v83;
  v303 = off_24C335AF8;
  v142 = *(_QWORD *)(a29 + 36);
  v306 = v142;
  if (*(char *)(a30 + 31) < 0)
    std::string::__init_copy_ctor_external(&v300, *(const std::string::value_type **)(a30 + 8), *(_QWORD *)(a30 + 16));
  else
    v300 = *(std::string *)(a30 + 8);
  v141 = *(_DWORD *)(a30 + 32);
  v301 = v141;
  v299 = off_24C335AF8;
  v140 = *(_QWORD *)(a30 + 36);
  v302 = v140;
  if (*(char *)(a31 + 31) < 0)
    std::string::__init_copy_ctor_external(&v296, *(const std::string::value_type **)(a31 + 8), *(_QWORD *)(a31 + 16));
  else
    v296 = *(std::string *)(a31 + 8);
  v138 = *(_DWORD *)(a31 + 32);
  v297 = v138;
  v295 = off_24C335AF8;
  v137 = *(_QWORD *)(a31 + 36);
  v298 = v137;
  v290 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a32 + 31) < 0)
    std::string::__init_copy_ctor_external(&v291, *(const std::string::value_type **)(a32 + 8), *(_QWORD *)(a32 + 16));
  else
    v291 = *(std::string *)(a32 + 8);
  v292 = *(_DWORD *)(a32 + 32);
  v290 = &off_24C335AB8;
  v293 = *(_BYTE *)(a32 + 36);
  if (*(char *)(a32 + 63) < 0)
    std::string::__init_copy_ctor_external(&v294, *(const std::string::value_type **)(a32 + 40), *(_QWORD *)(a32 + 48));
  else
    v294 = *(std::string *)(a32 + 40);
  v285 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a33 + 31) < 0)
    std::string::__init_copy_ctor_external(&v286, *(const std::string::value_type **)(a33 + 8), *(_QWORD *)(a33 + 16));
  else
    v286 = *(std::string *)(a33 + 8);
  v287 = *(_DWORD *)(a33 + 32);
  v285 = &off_24C335AB8;
  v288 = *(_BYTE *)(a33 + 36);
  if (*(char *)(a33 + 63) < 0)
    std::string::__init_copy_ctor_external(&v289, *(const std::string::value_type **)(a33 + 40), *(_QWORD *)(a33 + 48));
  else
    v289 = *(std::string *)(a33 + 40);
  v280 = (uint64_t (**)())off_24C335D90;
  v139 = v82;
  if (*(char *)(a34 + 31) < 0)
    std::string::__init_copy_ctor_external(&v281, *(const std::string::value_type **)(a34 + 8), *(_QWORD *)(a34 + 16));
  else
    v281 = *(std::string *)(a34 + 8);
  v282 = *(_DWORD *)(a34 + 32);
  v280 = &off_24C335AB8;
  v283 = *(_BYTE *)(a34 + 36);
  if (*(char *)(a34 + 63) < 0)
    std::string::__init_copy_ctor_external(&v284, *(const std::string::value_type **)(a34 + 40), *(_QWORD *)(a34 + 48));
  else
    v284 = *(std::string *)(a34 + 40);
  if (*(char *)(a35 + 31) < 0)
    std::string::__init_copy_ctor_external(&v277, *(const std::string::value_type **)(a35 + 8), *(_QWORD *)(a35 + 16));
  else
    v277 = *(std::string *)(a35 + 8);
  v84 = *(_DWORD *)(a35 + 32);
  v278 = v84;
  v276 = off_24C335AF8;
  v135 = *(_QWORD *)(a35 + 36);
  v279 = v135;
  v271 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a36 + 31) < 0)
    std::string::__init_copy_ctor_external(&v272, *(const std::string::value_type **)(a36 + 8), *(_QWORD *)(a36 + 16));
  else
    v272 = *(std::string *)(a36 + 8);
  v85 = *(_DWORD *)(a36 + 32);
  v271 = off_24C335B18;
  v274 = *(_QWORD *)(a36 + 36);
  v86 = *(_DWORD *)(a36 + 44);
  v134 = v85;
  v273 = v85;
  v275 = v86;
  v267 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a37 + 31) < 0)
    std::string::__init_copy_ctor_external(&v268, *(const std::string::value_type **)(a37 + 8), *(_QWORD *)(a37 + 16));
  else
    v268 = *(std::string *)(a37 + 8);
  v133 = *(_DWORD *)(a37 + 32);
  v269 = v133;
  v267 = off_24C335AF8;
  v132 = *(_QWORD *)(a37 + 36);
  v270 = v132;
  v262 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a38 + 31) < 0)
    std::string::__init_copy_ctor_external(&v263, *(const std::string::value_type **)(a38 + 8), *(_QWORD *)(a38 + 16));
  else
    v263 = *(std::string *)(a38 + 8);
  v264 = *(_DWORD *)(a38 + 32);
  v262 = &off_24C335AB8;
  v265 = *(_BYTE *)(a38 + 36);
  if (*(char *)(a38 + 63) < 0)
    std::string::__init_copy_ctor_external(&v266, *(const std::string::value_type **)(a38 + 40), *(_QWORD *)(a38 + 48));
  else
    v266 = *(std::string *)(a38 + 40);
  v257 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a39 + 31) < 0)
    std::string::__init_copy_ctor_external(&v258, *(const std::string::value_type **)(a39 + 8), *(_QWORD *)(a39 + 16));
  else
    v258 = *(std::string *)(a39 + 8);
  v87 = *(_DWORD *)(a39 + 32);
  v257 = off_24C335B18;
  v260 = *(_QWORD *)(a39 + 36);
  v88 = *(_DWORD *)(a39 + 44);
  v131 = v87;
  v259 = v87;
  v261 = v88;
  v252 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a40 + 31) < 0)
    std::string::__init_copy_ctor_external(&v253, *(const std::string::value_type **)(a40 + 8), *(_QWORD *)(a40 + 16));
  else
    v253 = *(std::string *)(a40 + 8);
  v254 = *(_DWORD *)(a40 + 32);
  v252 = &off_24C335AB8;
  v255 = *(_BYTE *)(a40 + 36);
  if (*(char *)(a40 + 63) < 0)
    std::string::__init_copy_ctor_external(&v256, *(const std::string::value_type **)(a40 + 40), *(_QWORD *)(a40 + 48));
  else
    v256 = *(std::string *)(a40 + 40);
  v247 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a41 + 31) < 0)
    std::string::__init_copy_ctor_external(&v248, *(const std::string::value_type **)(a41 + 8), *(_QWORD *)(a41 + 16));
  else
    v248 = *(std::string *)(a41 + 8);
  v249 = *(_DWORD *)(a41 + 32);
  v247 = &off_24C335AB8;
  v250 = *(_BYTE *)(a41 + 36);
  if (*(char *)(a41 + 63) < 0)
    std::string::__init_copy_ctor_external(&v251, *(const std::string::value_type **)(a41 + 40), *(_QWORD *)(a41 + 48));
  else
    v251 = *(std::string *)(a41 + 40);
  v243 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a42 + 31) < 0)
    std::string::__init_copy_ctor_external(&v244, *(const std::string::value_type **)(a42 + 8), *(_QWORD *)(a42 + 16));
  else
    v244 = *(std::string *)(a42 + 8);
  v130 = *(_DWORD *)(a42 + 32);
  v245 = v130;
  v243 = off_24C335AF8;
  v129 = *(_QWORD *)(a42 + 36);
  v246 = v129;
  v238 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a43 + 31) < 0)
    std::string::__init_copy_ctor_external(&v239, *(const std::string::value_type **)(a43 + 8), *(_QWORD *)(a43 + 16));
  else
    v239 = *(std::string *)(a43 + 8);
  v89 = *(_DWORD *)(a43 + 32);
  v238 = off_24C335B18;
  v241 = *(_QWORD *)(a43 + 36);
  v90 = *(_DWORD *)(a43 + 44);
  v128 = v89;
  v240 = v89;
  v242 = v90;
  v234 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a44 + 31) < 0)
    std::string::__init_copy_ctor_external(&v235, *(const std::string::value_type **)(a44 + 8), *(_QWORD *)(a44 + 16));
  else
    v235 = *(std::string *)(a44 + 8);
  v127 = *(_DWORD *)(a44 + 32);
  v236 = v127;
  v234 = off_24C335AF8;
  v126 = *(_QWORD *)(a44 + 36);
  v237 = v126;
  v229 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a45 + 31) < 0)
    std::string::__init_copy_ctor_external(&v230, *(const std::string::value_type **)(a45 + 8), *(_QWORD *)(a45 + 16));
  else
    v230 = *(std::string *)(a45 + 8);
  v231 = *(_DWORD *)(a45 + 32);
  v229 = &off_24C335AB8;
  v232 = *(_BYTE *)(a45 + 36);
  if (*(char *)(a45 + 63) < 0)
    std::string::__init_copy_ctor_external(&v233, *(const std::string::value_type **)(a45 + 40), *(_QWORD *)(a45 + 48));
  else
    v233 = *(std::string *)(a45 + 40);
  v225 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a46 + 31) < 0)
    std::string::__init_copy_ctor_external(&v226, *(const std::string::value_type **)(a46 + 8), *(_QWORD *)(a46 + 16));
  else
    v226 = *(std::string *)(a46 + 8);
  v125 = *(_DWORD *)(a46 + 32);
  v227 = v125;
  v225 = off_24C335AF8;
  v124 = *(_QWORD *)(a46 + 36);
  v228 = v124;
  v220 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a47 + 31) < 0)
    std::string::__init_copy_ctor_external(&v221, *(const std::string::value_type **)(a47 + 8), *(_QWORD *)(a47 + 16));
  else
    v221 = *(std::string *)(a47 + 8);
  v91 = *(_DWORD *)(a47 + 32);
  v220 = off_24C335B18;
  v223 = *(_QWORD *)(a47 + 36);
  v92 = *(_DWORD *)(a47 + 44);
  v123 = v91;
  v222 = v91;
  v224 = v92;
  v216 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a48 + 31) < 0)
    std::string::__init_copy_ctor_external(&v217, *(const std::string::value_type **)(a48 + 8), *(_QWORD *)(a48 + 16));
  else
    v217 = *(std::string *)(a48 + 8);
  v122 = *(_DWORD *)(a48 + 32);
  v218 = v122;
  v216 = off_24C335AF8;
  v121 = *(_QWORD *)(a48 + 36);
  v219 = v121;
  v212 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a49 + 31) < 0)
    std::string::__init_copy_ctor_external(&v213, *(const std::string::value_type **)(a49 + 8), *(_QWORD *)(a49 + 16));
  else
    v213 = *(std::string *)(a49 + 8);
  v120 = *(_DWORD *)(a49 + 32);
  v214 = v120;
  v212 = off_24C335AF8;
  v119 = *(_QWORD *)(a49 + 36);
  v215 = v119;
  v208 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a50 + 31) < 0)
    std::string::__init_copy_ctor_external(&v209, *(const std::string::value_type **)(a50 + 8), *(_QWORD *)(a50 + 16));
  else
    v209 = *(std::string *)(a50 + 8);
  v118 = *(_DWORD *)(a50 + 32);
  v210 = v118;
  v208 = off_24C335AF8;
  v117 = *(_QWORD *)(a50 + 36);
  v211 = v117;
  v203 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a51 + 31) < 0)
    std::string::__init_copy_ctor_external(&v204, *(const std::string::value_type **)(a51 + 8), *(_QWORD *)(a51 + 16));
  else
    v204 = *(std::string *)(a51 + 8);
  v205 = *(_DWORD *)(a51 + 32);
  v203 = &off_24C335AB8;
  v206 = *(_BYTE *)(a51 + 36);
  if (*(char *)(a51 + 63) < 0)
    std::string::__init_copy_ctor_external(&v207, *(const std::string::value_type **)(a51 + 40), *(_QWORD *)(a51 + 48));
  else
    v207 = *(std::string *)(a51 + 40);
  v198 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a52 + 31) < 0)
    std::string::__init_copy_ctor_external(&v199, *(const std::string::value_type **)(a52 + 8), *(_QWORD *)(a52 + 16));
  else
    v199 = *(std::string *)(a52 + 8);
  v200 = *(_DWORD *)(a52 + 32);
  v198 = &off_24C335AB8;
  v201 = *(_BYTE *)(a52 + 36);
  if (*(char *)(a52 + 63) < 0)
    std::string::__init_copy_ctor_external(&v202, *(const std::string::value_type **)(a52 + 40), *(_QWORD *)(a52 + 48));
  else
    v202 = *(std::string *)(a52 + 40);
  v193 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a53 + 31) < 0)
    std::string::__init_copy_ctor_external(&v194, *(const std::string::value_type **)(a53 + 8), *(_QWORD *)(a53 + 16));
  else
    v194 = *(std::string *)(a53 + 8);
  v93 = *(_DWORD *)(a53 + 32);
  v193 = off_24C335B18;
  v196 = *(_QWORD *)(a53 + 36);
  v94 = *(_DWORD *)(a53 + 44);
  v116 = v93;
  v195 = v93;
  v197 = v94;
  v189 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a54 + 31) < 0)
    std::string::__init_copy_ctor_external(&v190, *(const std::string::value_type **)(a54 + 8), *(_QWORD *)(a54 + 16));
  else
    v190 = *(std::string *)(a54 + 8);
  v115 = *(_DWORD *)(a54 + 32);
  v191 = v115;
  v189 = off_24C335AF8;
  v114 = *(_QWORD *)(a54 + 36);
  v192 = v114;
  if (*(char *)(a55 + 31) < 0)
    std::string::__init_copy_ctor_external(&v186, *(const std::string::value_type **)(a55 + 8), *(_QWORD *)(a55 + 16));
  else
    v186 = *(std::string *)(a55 + 8);
  v113 = *(_DWORD *)(a55 + 32);
  v187 = v113;
  v95 = *(_QWORD *)(a55 + 36);
  v188 = v95;
  v649 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v650, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
  else
    v650 = __s;
  v651 = v184;
  v649 = off_24C335AF8;
  v652 = v182;
  v644 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v409.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v645, v409.__r_.__value_.__l.__data_, v409.__r_.__value_.__l.__size_);
  else
    v645 = v409;
  v646 = v410;
  v644 = &off_24C335AB8;
  v647 = v411;
  if (SHIBYTE(v412.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v648, v412.__r_.__value_.__l.__data_, v412.__r_.__value_.__l.__size_);
  else
    v648 = v412;
  v640 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v405.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v641, v405.__r_.__value_.__l.__data_, v405.__r_.__value_.__l.__size_);
  else
    v641 = v405;
  v642 = v178;
  v640 = off_24C335AF8;
  v643 = v176;
  v636 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v401.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v637, v401.__r_.__value_.__l.__data_, v401.__r_.__value_.__l.__size_);
  else
    v637 = v401;
  v638 = v173;
  v636 = off_24C335AF8;
  v639 = v171;
  v632 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v397.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v633, v397.__r_.__value_.__l.__data_, v397.__r_.__value_.__l.__size_);
  else
    v633 = v397;
  v634 = v170;
  v632 = off_24C335AF8;
  v635 = v168;
  v628 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v393.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v629, v393.__r_.__value_.__l.__data_, v393.__r_.__value_.__l.__size_);
  else
    v629 = v393;
  v630 = v167;
  v628 = off_24C335AF8;
  v631 = v166;
  v624 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v389.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v625, v389.__r_.__value_.__l.__data_, v389.__r_.__value_.__l.__size_);
  else
    v625 = v389;
  v626 = v165;
  v624 = off_24C335AF8;
  v627 = v164;
  v619 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v384.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v620, v384.__r_.__value_.__l.__data_, v384.__r_.__value_.__l.__size_);
  else
    v620 = v384;
  v619 = off_24C335B18;
  v622 = v386;
  v621 = v163;
  v623 = v387;
  v614 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v379.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v615, v379.__r_.__value_.__l.__data_, v379.__r_.__value_.__l.__size_);
  else
    v615 = v379;
  v614 = off_24C335B18;
  v617 = v381;
  v616 = v162;
  v618 = v382;
  v610 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v375.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v611, v375.__r_.__value_.__l.__data_, v375.__r_.__value_.__l.__size_);
  else
    v611 = v375;
  v612 = v74;
  v610 = off_24C335AF8;
  v613 = v161;
  v605 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v370.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v606, v370.__r_.__value_.__l.__data_, v370.__r_.__value_.__l.__size_);
  else
    v606 = v370;
  v607 = v371;
  v605 = &off_24C335AB8;
  v608 = v372;
  if (SHIBYTE(v373.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v609, v373.__r_.__value_.__l.__data_, v373.__r_.__value_.__l.__size_);
  else
    v609 = v373;
  v600 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v365.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v601, v365.__r_.__value_.__l.__data_, v365.__r_.__value_.__l.__size_);
  else
    v601 = v365;
  v602 = v366;
  v600 = &off_24C335AB8;
  v603 = v367;
  if (SHIBYTE(v368.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v604, v368.__r_.__value_.__l.__data_, v368.__r_.__value_.__l.__size_);
  else
    v604 = v368;
  v596 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v361.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v597, v361.__r_.__value_.__l.__data_, v361.__r_.__value_.__l.__size_);
  else
    v597 = v361;
  v598 = v160;
  v596 = off_24C335AF8;
  v599 = v159;
  v592 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v357.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v593, v357.__r_.__value_.__l.__data_, v357.__r_.__value_.__l.__size_);
  else
    v593 = v357;
  v594 = v158;
  v592 = off_24C335AF8;
  v595 = v157;
  v588 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v353.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v589, v353.__r_.__value_.__l.__data_, v353.__r_.__value_.__l.__size_);
  else
    v589 = v353;
  v590 = v156;
  v588 = off_24C335AF8;
  v591 = v155;
  v584 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v349.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v585, v349.__r_.__value_.__l.__data_, v349.__r_.__value_.__l.__size_);
  else
    v585 = v349;
  v586 = v152;
  v584 = off_24C335AF8;
  v587 = v154;
  v579 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v344.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v580, v344.__r_.__value_.__l.__data_, v344.__r_.__value_.__l.__size_);
  else
    v580 = v344;
  v579 = off_24C335B18;
  v582 = v346;
  v581 = v153;
  v583 = v347;
  v574 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v339.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v575, v339.__r_.__value_.__l.__data_, v339.__r_.__value_.__l.__size_);
  else
    v575 = v339;
  v576 = v340;
  v574 = &off_24C335AB8;
  v577 = v341;
  if (SHIBYTE(v342.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v578, v342.__r_.__value_.__l.__data_, v342.__r_.__value_.__l.__size_);
  else
    v578 = v342;
  v569 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v334.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v570, v334.__r_.__value_.__l.__data_, v334.__r_.__value_.__l.__size_);
  else
    v570 = v334;
  v571 = v335;
  v569 = &off_24C335AB8;
  v572 = v336;
  if (SHIBYTE(v337.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v573, v337.__r_.__value_.__l.__data_, v337.__r_.__value_.__l.__size_);
  else
    v573 = v337;
  v564 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v329.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v565, v329.__r_.__value_.__l.__data_, v329.__r_.__value_.__l.__size_);
  else
    v565 = v329;
  v564 = off_24C335B18;
  v567 = v331;
  v566 = v151;
  v568 = v332;
  v559 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v324.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v560, v324.__r_.__value_.__l.__data_, v324.__r_.__value_.__l.__size_);
  else
    v560 = v324;
  v559 = off_24C335B18;
  v562 = v326;
  v561 = v150;
  v563 = v327;
  v555 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v320.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v556, v320.__r_.__value_.__l.__data_, v320.__r_.__value_.__l.__size_);
  else
    v556 = v320;
  v557 = v149;
  v555 = off_24C335AF8;
  v558 = v148;
  v551 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v316.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v552, v316.__r_.__value_.__l.__data_, v316.__r_.__value_.__l.__size_);
  else
    v552 = v316;
  v553 = v147;
  v551 = off_24C335AF8;
  v554 = v139;
  v547 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v312.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v548, v312.__r_.__value_.__l.__data_, v312.__r_.__value_.__l.__size_);
  else
    v548 = v312;
  v549 = v146;
  v547 = off_24C335AF8;
  v550 = v145;
  v543 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v308.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v544, v308.__r_.__value_.__l.__data_, v308.__r_.__value_.__l.__size_);
  else
    v544 = v308;
  v545 = v144;
  v543 = off_24C335AF8;
  v546 = v143;
  v539 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v304.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v540, v304.__r_.__value_.__l.__data_, v304.__r_.__value_.__l.__size_);
  else
    v540 = v304;
  v541 = v83;
  v539 = off_24C335AF8;
  v542 = v142;
  v535 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v300.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v536, v300.__r_.__value_.__l.__data_, v300.__r_.__value_.__l.__size_);
  else
    v536 = v300;
  v537 = v141;
  v535 = off_24C335AF8;
  v538 = v140;
  v531 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v296.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v532, v296.__r_.__value_.__l.__data_, v296.__r_.__value_.__l.__size_);
  else
    v532 = v296;
  v533 = v138;
  v531 = off_24C335AF8;
  v534 = v137;
  v526 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v291.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v527, v291.__r_.__value_.__l.__data_, v291.__r_.__value_.__l.__size_);
  else
    v527 = v291;
  v528 = v292;
  v526 = &off_24C335AB8;
  v529 = v293;
  if (SHIBYTE(v294.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v530, v294.__r_.__value_.__l.__data_, v294.__r_.__value_.__l.__size_);
  else
    v530 = v294;
  v521 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v286.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v522, v286.__r_.__value_.__l.__data_, v286.__r_.__value_.__l.__size_);
  else
    v522 = v286;
  v523 = v287;
  v521 = &off_24C335AB8;
  v524 = v288;
  if (SHIBYTE(v289.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v525, v289.__r_.__value_.__l.__data_, v289.__r_.__value_.__l.__size_);
  else
    v525 = v289;
  v516 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v281.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v517, v281.__r_.__value_.__l.__data_, v281.__r_.__value_.__l.__size_);
  else
    v517 = v281;
  v518 = v282;
  v516 = &off_24C335AB8;
  v519 = v283;
  if (SHIBYTE(v284.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v520, v284.__r_.__value_.__l.__data_, v284.__r_.__value_.__l.__size_);
  else
    v520 = v284;
  v512 = (uint64_t (**)())off_24C335D90;
  v96 = SHIBYTE(v277.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v277.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v513, v277.__r_.__value_.__l.__data_, v277.__r_.__value_.__l.__size_);
  else
    v513 = v277;
  v183 = v96;
  v514 = v84;
  v512 = off_24C335AF8;
  v515 = v135;
  v507 = (uint64_t (**)())off_24C335D90;
  v181 = SHIBYTE(v272.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v272.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v508, v272.__r_.__value_.__l.__data_, v272.__r_.__value_.__l.__size_);
  else
    v508 = v272;
  v507 = off_24C335B18;
  v510 = v274;
  v509 = v134;
  v511 = v275;
  v503 = (uint64_t (**)())off_24C335D90;
  v180 = SHIBYTE(v268.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v268.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v504, v268.__r_.__value_.__l.__data_, v268.__r_.__value_.__l.__size_);
  else
    v504 = v268;
  v505 = v133;
  v503 = off_24C335AF8;
  v506 = v132;
  v498 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v263.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v499, v263.__r_.__value_.__l.__data_, v263.__r_.__value_.__l.__size_);
  else
    v499 = v263;
  v500 = v264;
  v498 = &off_24C335AB8;
  v501 = v265;
  if (SHIBYTE(v266.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v502, v266.__r_.__value_.__l.__data_, v266.__r_.__value_.__l.__size_);
  else
    v502 = v266;
  v493 = (uint64_t (**)())off_24C335D90;
  v97 = SHIBYTE(v258.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v258.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v494, v258.__r_.__value_.__l.__data_, v258.__r_.__value_.__l.__size_);
  else
    v494 = v258;
  v493 = off_24C335B18;
  v496 = v260;
  v495 = v131;
  v497 = v261;
  v488 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v253.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v489, v253.__r_.__value_.__l.__data_, v253.__r_.__value_.__l.__size_);
  else
    v489 = v253;
  v490 = v254;
  v488 = &off_24C335AB8;
  v491 = v255;
  if (SHIBYTE(v256.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v492, v256.__r_.__value_.__l.__data_, v256.__r_.__value_.__l.__size_);
  else
    v492 = v256;
  v483 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v248.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v484, v248.__r_.__value_.__l.__data_, v248.__r_.__value_.__l.__size_);
  else
    v484 = v248;
  v179 = v97;
  v485 = v249;
  v483 = &off_24C335AB8;
  v486 = v250;
  if (SHIBYTE(v251.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v487, v251.__r_.__value_.__l.__data_, v251.__r_.__value_.__l.__size_);
  else
    v487 = v251;
  v479 = (uint64_t (**)())off_24C335D90;
  v98 = SHIBYTE(v244.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v244.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v480, v244.__r_.__value_.__l.__data_, v244.__r_.__value_.__l.__size_);
  else
    v480 = v244;
  v481 = v130;
  v479 = off_24C335AF8;
  v482 = v129;
  v474 = (uint64_t (**)())off_24C335D90;
  v177 = SHIBYTE(v239.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v239.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v475, v239.__r_.__value_.__l.__data_, v239.__r_.__value_.__l.__size_);
  else
    v475 = v239;
  v474 = off_24C335B18;
  v477 = v241;
  v476 = v128;
  v478 = v242;
  v470 = (uint64_t (**)())off_24C335D90;
  v99 = SHIBYTE(v235.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v235.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v471, v235.__r_.__value_.__l.__data_, v235.__r_.__value_.__l.__size_);
  else
    v471 = v235;
  v472 = v127;
  v470 = off_24C335AF8;
  v473 = v126;
  v465 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v230.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v466, v230.__r_.__value_.__l.__data_, v230.__r_.__value_.__l.__size_);
  else
    v466 = v230;
  v467 = v231;
  v465 = &off_24C335AB8;
  v468 = v232;
  if (SHIBYTE(v233.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v469, v233.__r_.__value_.__l.__data_, v233.__r_.__value_.__l.__size_);
  else
    v469 = v233;
  v175 = v99;
  v461 = (uint64_t (**)())off_24C335D90;
  v100 = SHIBYTE(v226.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v226.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v462, v226.__r_.__value_.__l.__data_, v226.__r_.__value_.__l.__size_);
  else
    v462 = v226;
  v463 = v125;
  v461 = off_24C335AF8;
  v464 = v124;
  v456 = (uint64_t (**)())off_24C335D90;
  v101 = SHIBYTE(v221.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v221.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v457, v221.__r_.__value_.__l.__data_, v221.__r_.__value_.__l.__size_);
  else
    v457 = v221;
  v456 = off_24C335B18;
  v459 = v223;
  v458 = v123;
  v460 = v224;
  v452 = (uint64_t (**)())off_24C335D90;
  v102 = SHIBYTE(v217.__r_.__value_.__r.__words[2]);
  v174 = v101;
  if (SHIBYTE(v217.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v453, v217.__r_.__value_.__l.__data_, v217.__r_.__value_.__l.__size_);
  else
    v453 = v217;
  v454 = v122;
  v452 = off_24C335AF8;
  v455 = v121;
  v448 = (uint64_t (**)())off_24C335D90;
  v103 = SHIBYTE(v213.__r_.__value_.__r.__words[2]);
  v172 = v98;
  if (SHIBYTE(v213.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v449, v213.__r_.__value_.__l.__data_, v213.__r_.__value_.__l.__size_);
  else
    v449 = v213;
  v450 = v120;
  v448 = off_24C335AF8;
  v451 = v119;
  v444 = (uint64_t (**)())off_24C335D90;
  v104 = SHIBYTE(v209.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v209.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v445, v209.__r_.__value_.__l.__data_, v209.__r_.__value_.__l.__size_);
  else
    v445 = v209;
  v446 = v118;
  v444 = off_24C335AF8;
  v447 = v117;
  v439 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v204.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v440, v204.__r_.__value_.__l.__data_, v204.__r_.__value_.__l.__size_);
  else
    v440 = v204;
  v441 = v205;
  v439 = &off_24C335AB8;
  v442 = v206;
  if (SHIBYTE(v207.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v443, v207.__r_.__value_.__l.__data_, v207.__r_.__value_.__l.__size_);
  else
    v443 = v207;
  v434 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v199.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v435, v199.__r_.__value_.__l.__data_, v199.__r_.__value_.__l.__size_);
  else
    v435 = v199;
  v436 = v200;
  v434 = &off_24C335AB8;
  v437 = v201;
  if (SHIBYTE(v202.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v438, v202.__r_.__value_.__l.__data_, v202.__r_.__value_.__l.__size_);
  else
    v438 = v202;
  v429 = (uint64_t (**)())off_24C335D90;
  v105 = SHIBYTE(v194.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v194.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v430, v194.__r_.__value_.__l.__data_, v194.__r_.__value_.__l.__size_);
  else
    v430 = v194;
  v429 = off_24C335B18;
  v432 = v196;
  v431 = v116;
  v433 = v197;
  v425 = (uint64_t (**)())off_24C335D90;
  v106 = SHIBYTE(v190.__r_.__value_.__r.__words[2]);
  v169 = v102;
  if (SHIBYTE(v190.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v426, v190.__r_.__value_.__l.__data_, v190.__r_.__value_.__l.__size_);
  else
    v426 = v190;
  v427 = v115;
  v425 = off_24C335AF8;
  v428 = v114;
  v421 = (uint64_t (**)())off_24C335D90;
  v107 = SHIBYTE(v186.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v186.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&__p, v186.__r_.__value_.__l.__data_, v186.__r_.__value_.__l.__size_);
  else
    __p = v186;
  v423 = v113;
  v421 = off_24C335AF8;
  v424 = v95;
  mediaplatform::DatabaseColumnTuple<35ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::DatabaseColumnTuple(v185, (uint64_t)&v649, (uint64_t)&v644, (uint64_t)&v640, (uint64_t)&v636, (uint64_t)&v632, (uint64_t)&v628, (uint64_t)&v624, (uint64_t)&v619, (uint64_t)&v614, (uint64_t)&v610, (uint64_t)&v605, (uint64_t)&v600, (uint64_t)&v596, (uint64_t)&v592, (uint64_t)&v588, (uint64_t)&v584, (uint64_t)&v579, (uint64_t)&v574,
    (uint64_t)&v569,
    (uint64_t)&v564,
    (uint64_t)&v559,
    (uint64_t)&v555,
    (uint64_t)&v551,
    (uint64_t)&v547,
    (uint64_t)&v543,
    (uint64_t)&v539,
    (uint64_t)&v535,
    (uint64_t)&v531,
    (uint64_t)&v526,
    (uint64_t)&v521,
    (uint64_t)&v516,
    (uint64_t)&v512,
    (uint64_t)&v507,
    (uint64_t)&v503,
    (uint64_t)&v498,
    (uint64_t)&v493,
    (uint64_t)&v488,
    (uint64_t)&v483,
    (uint64_t)&v479,
    (uint64_t)&v474,
    (uint64_t)&v470,
    (uint64_t)&v465,
    (uint64_t)&v461,
    (uint64_t)&v456,
    (uint64_t)&v452,
    (uint64_t)&v448,
    (uint64_t)&v444,
    (uint64_t)&v439,
    (uint64_t)&v434,
    (uint64_t)&v429,
    (uint64_t)&v425,
    (uint64_t)&v421);
  v421 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v425 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v426.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v426.__r_.__value_.__l.__data_);
  v429 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v430.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v430.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v434);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v439);
  v444 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v445.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v445.__r_.__value_.__l.__data_);
  v448 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v449.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v449.__r_.__value_.__l.__data_);
  v452 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v453.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v453.__r_.__value_.__l.__data_);
  v456 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v457.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v457.__r_.__value_.__l.__data_);
  v461 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v462.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v462.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v465);
  v470 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v471.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v471.__r_.__value_.__l.__data_);
  v474 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v475.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v475.__r_.__value_.__l.__data_);
  v479 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v480.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v480.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v483);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v488);
  v493 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v494.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v494.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v498);
  v503 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v504.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v504.__r_.__value_.__l.__data_);
  v507 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v508.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v508.__r_.__value_.__l.__data_);
  v512 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v513.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v513.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v516);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v521);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v526);
  v531 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v532.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v532.__r_.__value_.__l.__data_);
  v535 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v536.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v536.__r_.__value_.__l.__data_);
  v539 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v540.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v540.__r_.__value_.__l.__data_);
  v543 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v544.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v544.__r_.__value_.__l.__data_);
  v547 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v548.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v548.__r_.__value_.__l.__data_);
  v551 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v552.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v552.__r_.__value_.__l.__data_);
  v555 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v556.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v556.__r_.__value_.__l.__data_);
  v559 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v560.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v560.__r_.__value_.__l.__data_);
  v564 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v565.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v565.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v569);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v574);
  v579 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v580.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v580.__r_.__value_.__l.__data_);
  v584 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v585.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v585.__r_.__value_.__l.__data_);
  v588 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v589.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v589.__r_.__value_.__l.__data_);
  v592 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v593.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v593.__r_.__value_.__l.__data_);
  v596 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v597.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v597.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v600);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v605);
  v610 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v611.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v611.__r_.__value_.__l.__data_);
  v614 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v615.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v615.__r_.__value_.__l.__data_);
  v619 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v620.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v620.__r_.__value_.__l.__data_);
  v624 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v625.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v625.__r_.__value_.__l.__data_);
  v628 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v629.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v629.__r_.__value_.__l.__data_);
  v632 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v633.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v633.__r_.__value_.__l.__data_);
  v636 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v637.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v637.__r_.__value_.__l.__data_);
  v640 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v641.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v641.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v644);
  v649 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v650.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v650.__r_.__value_.__l.__data_);
  *(_QWORD *)(v185 + 2720) = off_24C335D90;
  v108 = (std::string *)(v185 + 2728);
  v109 = SHIBYTE(v418.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v418.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v108, v418.__r_.__value_.__l.__data_, v418.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v108->__r_.__value_.__l.__data_ = *(_OWORD *)&v418.__r_.__value_.__l.__data_;
    *(_QWORD *)(v185 + 2744) = *((_QWORD *)&v418.__r_.__value_.__l + 2);
  }
  *(_DWORD *)(v185 + 2752) = v419;
  *(_QWORD *)(v185 + 2720) = off_24C335AF8;
  *(_QWORD *)(v185 + 2756) = v420;
  if (v107 < 0)
    operator delete(v186.__r_.__value_.__l.__data_);
  v189 = (uint64_t (**)())off_24C335D90;
  if (v106 < 0)
    operator delete(v190.__r_.__value_.__l.__data_);
  v193 = (uint64_t (**)())off_24C335D90;
  if (v105 < 0)
    operator delete(v194.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v198);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v203);
  v208 = (uint64_t (**)())off_24C335D90;
  if (v104 < 0)
    operator delete(v209.__r_.__value_.__l.__data_);
  v212 = (uint64_t (**)())off_24C335D90;
  if (v103 < 0)
    operator delete(v213.__r_.__value_.__l.__data_);
  v216 = (uint64_t (**)())off_24C335D90;
  if (v169 < 0)
    operator delete(v217.__r_.__value_.__l.__data_);
  v220 = (uint64_t (**)())off_24C335D90;
  if (v174 < 0)
    operator delete(v221.__r_.__value_.__l.__data_);
  v225 = (uint64_t (**)())off_24C335D90;
  if (v100 < 0)
    operator delete(v226.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v229);
  v234 = (uint64_t (**)())off_24C335D90;
  if (v175 < 0)
    operator delete(v235.__r_.__value_.__l.__data_);
  v238 = (uint64_t (**)())off_24C335D90;
  if (v177 < 0)
    operator delete(v239.__r_.__value_.__l.__data_);
  v243 = (uint64_t (**)())off_24C335D90;
  if (v172 < 0)
    operator delete(v244.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v247);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v252);
  v257 = (uint64_t (**)())off_24C335D90;
  if (v179 < 0)
    operator delete(v258.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v262);
  v267 = (uint64_t (**)())off_24C335D90;
  if (v180 < 0)
    operator delete(v268.__r_.__value_.__l.__data_);
  v271 = (uint64_t (**)())off_24C335D90;
  if (v181 < 0)
    operator delete(v272.__r_.__value_.__l.__data_);
  v276 = (uint64_t (**)())off_24C335D90;
  if (v183 < 0)
    operator delete(v277.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v280);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v285);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v290);
  v295 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v296.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v296.__r_.__value_.__l.__data_);
  v299 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v300.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v300.__r_.__value_.__l.__data_);
  v303 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v304.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v304.__r_.__value_.__l.__data_);
  if (SHIBYTE(v308.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v308.__r_.__value_.__l.__data_);
  if (SHIBYTE(v312.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v312.__r_.__value_.__l.__data_);
  if (SHIBYTE(v316.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v316.__r_.__value_.__l.__data_);
  if (SHIBYTE(v320.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v320.__r_.__value_.__l.__data_);
  if (SHIBYTE(v324.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v324.__r_.__value_.__l.__data_);
  if (SHIBYTE(v329.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v329.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v333);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v338);
  if (SHIBYTE(v344.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v344.__r_.__value_.__l.__data_);
  if (SHIBYTE(v349.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v349.__r_.__value_.__l.__data_);
  if (SHIBYTE(v353.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v353.__r_.__value_.__l.__data_);
  if (SHIBYTE(v357.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v357.__r_.__value_.__l.__data_);
  if (SHIBYTE(v361.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v361.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v364);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v369);
  if (SHIBYTE(v375.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v375.__r_.__value_.__l.__data_);
  if (SHIBYTE(v379.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v379.__r_.__value_.__l.__data_);
  if (SHIBYTE(v384.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v384.__r_.__value_.__l.__data_);
  if (SHIBYTE(v389.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v389.__r_.__value_.__l.__data_);
  if (SHIBYTE(v393.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v393.__r_.__value_.__l.__data_);
  if (SHIBYTE(v397.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v397.__r_.__value_.__l.__data_);
  if (SHIBYTE(v401.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v401.__r_.__value_.__l.__data_);
  if (SHIBYTE(v405.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v405.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v408);
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__s.__r_.__value_.__l.__data_);
    if ((v109 & 0x80000000) == 0)
      goto LABEL_555;
  }
  else if ((v109 & 0x80000000) == 0)
  {
    goto LABEL_555;
  }
  operator delete(v418.__r_.__value_.__l.__data_);
LABEL_555:
  *(_QWORD *)(v185 + 2768) = off_24C335D90;
  v110 = (std::string *)(v185 + 2776);
  if (*(char *)(v136 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v110, *(const std::string::value_type **)(v136 + 8), *(_QWORD *)(v136 + 16));
  }
  else
  {
    v111 = *(_OWORD *)(v136 + 8);
    *(_QWORD *)(v185 + 2792) = *(_QWORD *)(v136 + 24);
    *(_OWORD *)&v110->__r_.__value_.__l.__data_ = v111;
  }
  result = v185;
  *(_DWORD *)(v185 + 2800) = *(_DWORD *)(v136 + 32);
  *(_QWORD *)(v185 + 2768) = off_24C335AF8;
  *(_QWORD *)(v185 + 2804) = *(_QWORD *)(v136 + 36);
  return result;
}

void sub_20A7C6AC4(_Unwind_Exception *a1)
{
  mediaplatform::DatabaseColumnTuple<34ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(STACK[0x540]);
  _Unwind_Resume(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<33ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(uint64_t a1)
{
  *(_QWORD *)(a1 + 2768) = off_24C335D90;
  if (*(char *)(a1 + 2799) < 0)
    operator delete(*(void **)(a1 + 2776));
  return mediaplatform::DatabaseColumnTuple<34ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<35ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::DatabaseColumnTuple(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53)
{
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  int v68;
  int v69;
  int v70;
  int v71;
  uint64_t v72;
  int v73;
  int v74;
  int v75;
  int v76;
  int v77;
  int v78;
  uint64_t v79;
  int v80;
  int v81;
  int v82;
  int v83;
  int v84;
  int v85;
  uint64_t v86;
  int v87;
  int v88;
  uint64_t v89;
  int v90;
  int v91;
  int v92;
  int v93;
  int v94;
  int v95;
  int v96;
  int v97;
  int v98;
  int v99;
  std::string *v100;
  std::string *v101;
  std::string *v102;
  __int128 v103;
  uint64_t result;
  uint64_t v105;
  int v106;
  uint64_t v107;
  int v108;
  int v109;
  uint64_t v110;
  int v111;
  uint64_t v112;
  int v113;
  uint64_t v114;
  int v115;
  int v116;
  uint64_t v117;
  int v118;
  int v119;
  int v120;
  uint64_t v121;
  int v122;
  int v123;
  uint64_t v124;
  int v125;
  int v126;
  uint64_t v127;
  int v128;
  uint64_t v129;
  uint64_t v130;
  int v131;
  uint64_t v132;
  int v133;
  uint64_t v134;
  int v135;
  uint64_t v136;
  int v137;
  uint64_t v138;
  int v139;
  uint64_t v140;
  int v141;
  uint64_t v142;
  int v143;
  int v144;
  int v145;
  int v146;
  int v147;
  uint64_t v148;
  int v149;
  uint64_t v150;
  int v151;
  uint64_t v152;
  int v153;
  uint64_t v154;
  int v155;
  int v156;
  int v157;
  uint64_t v158;
  int v159;
  uint64_t v160;
  int v161;
  int v162;
  uint64_t v163;
  int v164;
  int v165;
  int v166;
  int v167;
  uint64_t v168;
  int v169;
  int v170;
  int v171;
  int v172;
  uint64_t v173;
  int v174;
  int v175;
  int v176;
  uint64_t v177;
  std::string v178;
  int v179;
  uint64_t v180;
  uint64_t (**v181)();
  std::string v182;
  int v183;
  uint64_t v184;
  uint64_t (**v185)();
  std::string v186;
  int v187;
  uint64_t v188;
  int v189;
  uint64_t (**v190)();
  std::string v191;
  int v192;
  char v193;
  std::string v194;
  uint64_t (**v195)();
  std::string v196;
  int v197;
  char v198;
  std::string v199;
  uint64_t (**v200)();
  std::string v201;
  int v202;
  uint64_t v203;
  uint64_t (**v204)();
  std::string v205;
  int v206;
  uint64_t v207;
  uint64_t (**v208)();
  std::string v209;
  int v210;
  uint64_t v211;
  uint64_t (**v212)();
  std::string v213;
  int v214;
  uint64_t v215;
  int v216;
  uint64_t (**v217)();
  std::string v218;
  int v219;
  uint64_t v220;
  uint64_t (**v221)();
  std::string v222;
  int v223;
  char v224;
  std::string v225;
  uint64_t (**v226)();
  std::string v227;
  int v228;
  uint64_t v229;
  uint64_t (**v230)();
  std::string v231;
  int v232;
  uint64_t v233;
  int v234;
  uint64_t (**v235)();
  std::string v236;
  int v237;
  uint64_t v238;
  uint64_t (**v239)();
  std::string v240;
  int v241;
  char v242;
  std::string v243;
  uint64_t (**v244)();
  std::string v245;
  int v246;
  char v247;
  std::string v248;
  uint64_t (**v249)();
  std::string v250;
  int v251;
  uint64_t v252;
  int v253;
  uint64_t (**v254)();
  std::string v255;
  int v256;
  char v257;
  std::string v258;
  uint64_t (**v259)();
  std::string v260;
  int v261;
  uint64_t v262;
  uint64_t (**v263)();
  std::string v264;
  int v265;
  uint64_t v266;
  int v267;
  uint64_t (**v268)();
  std::string v269;
  int v270;
  uint64_t v271;
  uint64_t (**v272)();
  std::string v273;
  int v274;
  char v275;
  std::string v276;
  uint64_t (**v277)();
  std::string v278;
  int v279;
  char v280;
  std::string v281;
  uint64_t (**v282)();
  std::string v283;
  int v284;
  char v285;
  std::string v286;
  uint64_t (**v287)();
  std::string v288;
  int v289;
  uint64_t v290;
  uint64_t (**v291)();
  std::string v292;
  int v293;
  uint64_t v294;
  uint64_t (**v295)();
  std::string v296;
  int v297;
  uint64_t v298;
  uint64_t (**v299)();
  std::string v300;
  int v301;
  uint64_t v302;
  uint64_t (**v303)();
  std::string v304;
  int v305;
  uint64_t v306;
  uint64_t (**v307)();
  std::string v308;
  int v309;
  uint64_t v310;
  uint64_t (**v311)();
  std::string v312;
  int v313;
  uint64_t v314;
  uint64_t (**v315)();
  std::string v316;
  int v317;
  uint64_t v318;
  int v319;
  uint64_t (**v320)();
  std::string v321;
  int v322;
  uint64_t v323;
  int v324;
  uint64_t (**v325)();
  std::string v326;
  int v327;
  char v328;
  std::string v329;
  uint64_t (**v330)();
  std::string v331;
  int v332;
  char v333;
  std::string v334;
  uint64_t (**v335)();
  std::string v336;
  int v337;
  uint64_t v338;
  int v339;
  uint64_t (**v340)();
  std::string v341;
  int v342;
  uint64_t v343;
  uint64_t (**v344)();
  std::string v345;
  int v346;
  uint64_t v347;
  uint64_t (**v348)();
  std::string v349;
  int v350;
  uint64_t v351;
  uint64_t (**v352)();
  std::string v353;
  int v354;
  uint64_t v355;
  uint64_t (**v356)();
  std::string v357;
  int v358;
  char v359;
  std::string v360;
  uint64_t (**v361)();
  std::string v362;
  int v363;
  char v364;
  std::string v365;
  uint64_t (**v366)();
  std::string v367;
  int v368;
  uint64_t v369;
  uint64_t (**v370)();
  std::string v371;
  int v372;
  uint64_t v373;
  int v374;
  uint64_t (**v375)();
  std::string v376;
  int v377;
  uint64_t v378;
  int v379;
  uint64_t (**v380)();
  std::string v381;
  int v382;
  uint64_t v383;
  uint64_t (**v384)();
  std::string v385;
  int v386;
  uint64_t v387;
  uint64_t (**v388)();
  std::string v389;
  int v390;
  uint64_t v391;
  uint64_t (**v392)();
  std::string v393;
  int v394;
  uint64_t v395;
  uint64_t (**v396)();
  std::string __s;
  int v398;
  uint64_t v399;
  uint64_t (**v400)();
  std::string v401;
  int v402;
  char v403;
  std::string v404;
  uint64_t (**v405)();
  std::string __p;
  int v407;
  uint64_t v408;
  uint64_t (**v409)();
  std::string v410;
  int v411;
  uint64_t v412;
  uint64_t (**v413)();
  std::string v414;
  int v415;
  uint64_t v416;
  int v417;
  uint64_t (**v418)();
  std::string v419;
  int v420;
  char v421;
  std::string v422;
  uint64_t (**v423)();
  std::string v424;
  int v425;
  char v426;
  std::string v427;
  uint64_t (**v428)();
  std::string v429;
  int v430;
  uint64_t v431;
  uint64_t (**v432)();
  std::string v433;
  int v434;
  uint64_t v435;
  uint64_t (**v436)();
  std::string v437;
  int v438;
  uint64_t v439;
  uint64_t (**v440)();
  std::string v441;
  int v442;
  uint64_t v443;
  int v444;
  uint64_t (**v445)();
  std::string v446;
  int v447;
  uint64_t v448;
  uint64_t (**v449)();
  std::string v450;
  int v451;
  char v452;
  std::string v453;
  uint64_t (**v454)();
  std::string v455;
  int v456;
  uint64_t v457;
  uint64_t (**v458)();
  std::string v459;
  int v460;
  uint64_t v461;
  int v462;
  uint64_t (**v463)();
  std::string v464;
  int v465;
  uint64_t v466;
  uint64_t (**v467)();
  std::string v468;
  int v469;
  char v470;
  std::string v471;
  uint64_t (**v472)();
  std::string v473;
  int v474;
  char v475;
  std::string v476;
  uint64_t (**v477)();
  std::string v478;
  int v479;
  uint64_t v480;
  int v481;
  uint64_t (**v482)();
  std::string v483;
  int v484;
  char v485;
  std::string v486;
  uint64_t (**v487)();
  std::string v488;
  int v489;
  uint64_t v490;
  uint64_t (**v491)();
  std::string v492;
  int v493;
  uint64_t v494;
  int v495;
  uint64_t (**v496)();
  std::string v497;
  int v498;
  uint64_t v499;
  uint64_t (**v500)();
  std::string v501;
  int v502;
  char v503;
  std::string v504;
  uint64_t (**v505)();
  std::string v506;
  int v507;
  char v508;
  std::string v509;
  uint64_t (**v510)();
  std::string v511;
  int v512;
  char v513;
  std::string v514;
  uint64_t (**v515)();
  std::string v516;
  int v517;
  uint64_t v518;
  uint64_t (**v519)();
  std::string v520;
  int v521;
  uint64_t v522;
  uint64_t (**v523)();
  std::string v524;
  int v525;
  uint64_t v526;
  uint64_t (**v527)();
  std::string v528;
  int v529;
  uint64_t v530;
  uint64_t (**v531)();
  std::string v532;
  int v533;
  uint64_t v534;
  uint64_t (**v535)();
  std::string v536;
  int v537;
  uint64_t v538;
  uint64_t (**v539)();
  std::string v540;
  int v541;
  uint64_t v542;
  uint64_t (**v543)();
  std::string v544;
  int v545;
  uint64_t v546;
  int v547;
  uint64_t (**v548)();
  std::string v549;
  int v550;
  uint64_t v551;
  int v552;
  uint64_t (**v553)();
  std::string v554;
  int v555;
  char v556;
  std::string v557;
  uint64_t (**v558)();
  std::string v559;
  int v560;
  char v561;
  std::string v562;
  uint64_t (**v563)();
  std::string v564;
  int v565;
  uint64_t v566;
  int v567;
  uint64_t (**v568)();
  std::string v569;
  int v570;
  uint64_t v571;
  uint64_t (**v572)();
  std::string v573;
  int v574;
  uint64_t v575;
  uint64_t (**v576)();
  std::string v577;
  int v578;
  uint64_t v579;
  uint64_t (**v580)();
  std::string v581;
  int v582;
  uint64_t v583;
  uint64_t (**v584)();
  std::string v585;
  int v586;
  char v587;
  std::string v588;
  uint64_t (**v589)();
  std::string v590;
  int v591;
  char v592;
  std::string v593;
  uint64_t (**v594)();
  std::string v595;
  int v596;
  uint64_t v597;
  uint64_t (**v598)();
  std::string v599;
  int v600;
  uint64_t v601;
  int v602;
  uint64_t (**v603)();
  std::string v604;
  int v605;
  uint64_t v606;
  int v607;
  uint64_t (**v608)();
  std::string v609;
  int v610;
  uint64_t v611;
  uint64_t (**v612)();
  std::string v613;
  int v614;
  uint64_t v615;
  uint64_t (**v616)();
  std::string v617;
  int v618;
  uint64_t v619;
  uint64_t (**v620)();
  std::string v621;
  int v622;
  uint64_t v623;
  uint64_t (**v624)();
  std::string v625;
  int v626;
  uint64_t v627;

  v53 = MEMORY[0x24BDAC7A8](a1);
  v56 = v55;
  v58 = v57;
  v60 = v59;
  v62 = v61;
  v64 = v63;
  v65 = v54;
  v67 = v66;
  v177 = v53;
  v400 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(v54 + 31) < 0)
    std::string::__init_copy_ctor_external(&v401, *(const std::string::value_type **)(v54 + 8), *(_QWORD *)(v54 + 16));
  else
    v401 = *(std::string *)(v54 + 8);
  v402 = *(_DWORD *)(v65 + 32);
  v400 = &off_24C335AB8;
  v403 = *(_BYTE *)(v65 + 36);
  if (*(char *)(v65 + 63) < 0)
    std::string::__init_copy_ctor_external(&v404, *(const std::string::value_type **)(v65 + 40), *(_QWORD *)(v65 + 48));
  else
    v404 = *(std::string *)(v65 + 40);
  if (*(char *)(v64 + 31) < 0)
    std::string::__init_copy_ctor_external(&__s, *(const std::string::value_type **)(v64 + 8), *(_QWORD *)(v64 + 16));
  else
    __s = *(std::string *)(v64 + 8);
  v175 = *(_DWORD *)(v64 + 32);
  v398 = v175;
  v396 = off_24C335AF8;
  v173 = *(_QWORD *)(v64 + 36);
  v399 = v173;
  if (*(char *)(v62 + 31) < 0)
    std::string::__init_copy_ctor_external(&v393, *(const std::string::value_type **)(v62 + 8), *(_QWORD *)(v62 + 16));
  else
    v393 = *(std::string *)(v62 + 8);
  v170 = *(_DWORD *)(v62 + 32);
  v394 = v170;
  v392 = off_24C335AF8;
  v168 = *(_QWORD *)(v62 + 36);
  v395 = v168;
  if (*(char *)(v60 + 31) < 0)
    std::string::__init_copy_ctor_external(&v389, *(const std::string::value_type **)(v60 + 8), *(_QWORD *)(v60 + 16));
  else
    v389 = *(std::string *)(v60 + 8);
  v165 = *(_DWORD *)(v60 + 32);
  v390 = v165;
  v388 = off_24C335AF8;
  v163 = *(_QWORD *)(v60 + 36);
  v391 = v163;
  v129 = v67;
  if (*(char *)(v58 + 31) < 0)
    std::string::__init_copy_ctor_external(&v385, *(const std::string::value_type **)(v58 + 8), *(_QWORD *)(v58 + 16));
  else
    v385 = *(std::string *)(v58 + 8);
  v161 = *(_DWORD *)(v58 + 32);
  v386 = v161;
  v384 = off_24C335AF8;
  v160 = *(_QWORD *)(v58 + 36);
  v387 = v160;
  if (*(char *)(v56 + 31) < 0)
    std::string::__init_copy_ctor_external(&v381, *(const std::string::value_type **)(v56 + 8), *(_QWORD *)(v56 + 16));
  else
    v381 = *(std::string *)(v56 + 8);
  v159 = *(_DWORD *)(v56 + 32);
  v382 = v159;
  v380 = off_24C335AF8;
  v158 = *(_QWORD *)(v56 + 36);
  v383 = v158;
  if (*(char *)(a9 + 31) < 0)
    std::string::__init_copy_ctor_external(&v376, *(const std::string::value_type **)(a9 + 8), *(_QWORD *)(a9 + 16));
  else
    v376 = *(std::string *)(a9 + 8);
  v68 = *(_DWORD *)(a9 + 32);
  v375 = off_24C335B18;
  v378 = *(_QWORD *)(a9 + 36);
  v69 = *(_DWORD *)(a9 + 44);
  v157 = v68;
  v377 = v68;
  v379 = v69;
  if (*(char *)(a10 + 31) < 0)
    std::string::__init_copy_ctor_external(&v371, *(const std::string::value_type **)(a10 + 8), *(_QWORD *)(a10 + 16));
  else
    v371 = *(std::string *)(a10 + 8);
  v70 = *(_DWORD *)(a10 + 32);
  v370 = off_24C335B18;
  v373 = *(_QWORD *)(a10 + 36);
  v71 = *(_DWORD *)(a10 + 44);
  v156 = v70;
  v372 = v70;
  v374 = v71;
  if (*(char *)(a11 + 31) < 0)
    std::string::__init_copy_ctor_external(&v367, *(const std::string::value_type **)(a11 + 8), *(_QWORD *)(a11 + 16));
  else
    v367 = *(std::string *)(a11 + 8);
  v155 = *(_DWORD *)(a11 + 32);
  v368 = v155;
  v366 = off_24C335AF8;
  v154 = *(_QWORD *)(a11 + 36);
  v369 = v154;
  v361 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a12 + 31) < 0)
    std::string::__init_copy_ctor_external(&v362, *(const std::string::value_type **)(a12 + 8), *(_QWORD *)(a12 + 16));
  else
    v362 = *(std::string *)(a12 + 8);
  v363 = *(_DWORD *)(a12 + 32);
  v361 = &off_24C335AB8;
  v364 = *(_BYTE *)(a12 + 36);
  if (*(char *)(a12 + 63) < 0)
    std::string::__init_copy_ctor_external(&v365, *(const std::string::value_type **)(a12 + 40), *(_QWORD *)(a12 + 48));
  else
    v365 = *(std::string *)(a12 + 40);
  v356 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a13 + 31) < 0)
    std::string::__init_copy_ctor_external(&v357, *(const std::string::value_type **)(a13 + 8), *(_QWORD *)(a13 + 16));
  else
    v357 = *(std::string *)(a13 + 8);
  v358 = *(_DWORD *)(a13 + 32);
  v356 = &off_24C335AB8;
  v359 = *(_BYTE *)(a13 + 36);
  if (*(char *)(a13 + 63) < 0)
    std::string::__init_copy_ctor_external(&v360, *(const std::string::value_type **)(a13 + 40), *(_QWORD *)(a13 + 48));
  else
    v360 = *(std::string *)(a13 + 40);
  if (*(char *)(a14 + 31) < 0)
    std::string::__init_copy_ctor_external(&v353, *(const std::string::value_type **)(a14 + 8), *(_QWORD *)(a14 + 16));
  else
    v353 = *(std::string *)(a14 + 8);
  v153 = *(_DWORD *)(a14 + 32);
  v354 = v153;
  v352 = off_24C335AF8;
  v152 = *(_QWORD *)(a14 + 36);
  v355 = v152;
  if (*(char *)(a15 + 31) < 0)
    std::string::__init_copy_ctor_external(&v349, *(const std::string::value_type **)(a15 + 8), *(_QWORD *)(a15 + 16));
  else
    v349 = *(std::string *)(a15 + 8);
  v151 = *(_DWORD *)(a15 + 32);
  v350 = v151;
  v348 = off_24C335AF8;
  v150 = *(_QWORD *)(a15 + 36);
  v351 = v150;
  if (*(char *)(a16 + 31) < 0)
    std::string::__init_copy_ctor_external(&v345, *(const std::string::value_type **)(a16 + 8), *(_QWORD *)(a16 + 16));
  else
    v345 = *(std::string *)(a16 + 8);
  v149 = *(_DWORD *)(a16 + 32);
  v346 = v149;
  v344 = off_24C335AF8;
  v148 = *(_QWORD *)(a16 + 36);
  v347 = v148;
  if (*(char *)(a17 + 31) < 0)
    std::string::__init_copy_ctor_external(&v341, *(const std::string::value_type **)(a17 + 8), *(_QWORD *)(a17 + 16));
  else
    v341 = *(std::string *)(a17 + 8);
  v147 = *(_DWORD *)(a17 + 32);
  v342 = v147;
  v340 = off_24C335AF8;
  v72 = *(_QWORD *)(a17 + 36);
  v343 = v72;
  if (*(char *)(a18 + 31) < 0)
    std::string::__init_copy_ctor_external(&v336, *(const std::string::value_type **)(a18 + 8), *(_QWORD *)(a18 + 16));
  else
    v336 = *(std::string *)(a18 + 8);
  v73 = *(_DWORD *)(a18 + 32);
  v335 = off_24C335B18;
  v338 = *(_QWORD *)(a18 + 36);
  v74 = *(_DWORD *)(a18 + 44);
  v146 = v73;
  v337 = v73;
  v339 = v74;
  v330 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a19 + 31) < 0)
    std::string::__init_copy_ctor_external(&v331, *(const std::string::value_type **)(a19 + 8), *(_QWORD *)(a19 + 16));
  else
    v331 = *(std::string *)(a19 + 8);
  v332 = *(_DWORD *)(a19 + 32);
  v330 = &off_24C335AB8;
  v333 = *(_BYTE *)(a19 + 36);
  if (*(char *)(a19 + 63) < 0)
    std::string::__init_copy_ctor_external(&v334, *(const std::string::value_type **)(a19 + 40), *(_QWORD *)(a19 + 48));
  else
    v334 = *(std::string *)(a19 + 40);
  v325 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a20 + 31) < 0)
    std::string::__init_copy_ctor_external(&v326, *(const std::string::value_type **)(a20 + 8), *(_QWORD *)(a20 + 16));
  else
    v326 = *(std::string *)(a20 + 8);
  v327 = *(_DWORD *)(a20 + 32);
  v325 = &off_24C335AB8;
  v328 = *(_BYTE *)(a20 + 36);
  if (*(char *)(a20 + 63) < 0)
    std::string::__init_copy_ctor_external(&v329, *(const std::string::value_type **)(a20 + 40), *(_QWORD *)(a20 + 48));
  else
    v329 = *(std::string *)(a20 + 40);
  if (*(char *)(a21 + 31) < 0)
    std::string::__init_copy_ctor_external(&v321, *(const std::string::value_type **)(a21 + 8), *(_QWORD *)(a21 + 16));
  else
    v321 = *(std::string *)(a21 + 8);
  v75 = *(_DWORD *)(a21 + 32);
  v320 = off_24C335B18;
  v323 = *(_QWORD *)(a21 + 36);
  v76 = *(_DWORD *)(a21 + 44);
  v145 = v75;
  v322 = v75;
  v324 = v76;
  if (*(char *)(a22 + 31) < 0)
    std::string::__init_copy_ctor_external(&v316, *(const std::string::value_type **)(a22 + 8), *(_QWORD *)(a22 + 16));
  else
    v316 = *(std::string *)(a22 + 8);
  v77 = *(_DWORD *)(a22 + 32);
  v315 = off_24C335B18;
  v318 = *(_QWORD *)(a22 + 36);
  v78 = *(_DWORD *)(a22 + 44);
  v144 = v77;
  v317 = v77;
  v319 = v78;
  if (*(char *)(a23 + 31) < 0)
    std::string::__init_copy_ctor_external(&v312, *(const std::string::value_type **)(a23 + 8), *(_QWORD *)(a23 + 16));
  else
    v312 = *(std::string *)(a23 + 8);
  v143 = *(_DWORD *)(a23 + 32);
  v313 = v143;
  v311 = off_24C335AF8;
  v142 = *(_QWORD *)(a23 + 36);
  v314 = v142;
  if (*(char *)(a24 + 31) < 0)
    std::string::__init_copy_ctor_external(&v308, *(const std::string::value_type **)(a24 + 8), *(_QWORD *)(a24 + 16));
  else
    v308 = *(std::string *)(a24 + 8);
  v141 = *(_DWORD *)(a24 + 32);
  v309 = v141;
  v307 = off_24C335AF8;
  v79 = *(_QWORD *)(a24 + 36);
  v310 = v79;
  if (*(char *)(a25 + 31) < 0)
    std::string::__init_copy_ctor_external(&v304, *(const std::string::value_type **)(a25 + 8), *(_QWORD *)(a25 + 16));
  else
    v304 = *(std::string *)(a25 + 8);
  v139 = *(_DWORD *)(a25 + 32);
  v305 = v139;
  v303 = off_24C335AF8;
  v138 = *(_QWORD *)(a25 + 36);
  v306 = v138;
  if (*(char *)(a26 + 31) < 0)
    std::string::__init_copy_ctor_external(&v300, *(const std::string::value_type **)(a26 + 8), *(_QWORD *)(a26 + 16));
  else
    v300 = *(std::string *)(a26 + 8);
  v137 = *(_DWORD *)(a26 + 32);
  v301 = v137;
  v299 = off_24C335AF8;
  v136 = *(_QWORD *)(a26 + 36);
  v302 = v136;
  if (*(char *)(a27 + 31) < 0)
    std::string::__init_copy_ctor_external(&v296, *(const std::string::value_type **)(a27 + 8), *(_QWORD *)(a27 + 16));
  else
    v296 = *(std::string *)(a27 + 8);
  v135 = *(_DWORD *)(a27 + 32);
  v297 = v135;
  v295 = off_24C335AF8;
  v134 = *(_QWORD *)(a27 + 36);
  v298 = v134;
  if (*(char *)(a28 + 31) < 0)
    std::string::__init_copy_ctor_external(&v292, *(const std::string::value_type **)(a28 + 8), *(_QWORD *)(a28 + 16));
  else
    v292 = *(std::string *)(a28 + 8);
  v133 = *(_DWORD *)(a28 + 32);
  v293 = v133;
  v291 = off_24C335AF8;
  v132 = *(_QWORD *)(a28 + 36);
  v294 = v132;
  if (*(char *)(a29 + 31) < 0)
    std::string::__init_copy_ctor_external(&v288, *(const std::string::value_type **)(a29 + 8), *(_QWORD *)(a29 + 16));
  else
    v288 = *(std::string *)(a29 + 8);
  v131 = *(_DWORD *)(a29 + 32);
  v289 = v131;
  v287 = off_24C335AF8;
  v130 = *(_QWORD *)(a29 + 36);
  v290 = v130;
  v282 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a30 + 31) < 0)
    std::string::__init_copy_ctor_external(&v283, *(const std::string::value_type **)(a30 + 8), *(_QWORD *)(a30 + 16));
  else
    v283 = *(std::string *)(a30 + 8);
  v284 = *(_DWORD *)(a30 + 32);
  v282 = &off_24C335AB8;
  v285 = *(_BYTE *)(a30 + 36);
  if (*(char *)(a30 + 63) < 0)
    std::string::__init_copy_ctor_external(&v286, *(const std::string::value_type **)(a30 + 40), *(_QWORD *)(a30 + 48));
  else
    v286 = *(std::string *)(a30 + 40);
  v277 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a31 + 31) < 0)
    std::string::__init_copy_ctor_external(&v278, *(const std::string::value_type **)(a31 + 8), *(_QWORD *)(a31 + 16));
  else
    v278 = *(std::string *)(a31 + 8);
  v279 = *(_DWORD *)(a31 + 32);
  v277 = &off_24C335AB8;
  v280 = *(_BYTE *)(a31 + 36);
  if (*(char *)(a31 + 63) < 0)
    std::string::__init_copy_ctor_external(&v281, *(const std::string::value_type **)(a31 + 40), *(_QWORD *)(a31 + 48));
  else
    v281 = *(std::string *)(a31 + 40);
  v272 = (uint64_t (**)())off_24C335D90;
  v140 = v72;
  if (*(char *)(a32 + 31) < 0)
    std::string::__init_copy_ctor_external(&v273, *(const std::string::value_type **)(a32 + 8), *(_QWORD *)(a32 + 16));
  else
    v273 = *(std::string *)(a32 + 8);
  v274 = *(_DWORD *)(a32 + 32);
  v272 = &off_24C335AB8;
  v275 = *(_BYTE *)(a32 + 36);
  if (*(char *)(a32 + 63) < 0)
    std::string::__init_copy_ctor_external(&v276, *(const std::string::value_type **)(a32 + 40), *(_QWORD *)(a32 + 48));
  else
    v276 = *(std::string *)(a32 + 40);
  if (*(char *)(a33 + 31) < 0)
    std::string::__init_copy_ctor_external(&v269, *(const std::string::value_type **)(a33 + 8), *(_QWORD *)(a33 + 16));
  else
    v269 = *(std::string *)(a33 + 8);
  v128 = *(_DWORD *)(a33 + 32);
  v270 = v128;
  v268 = off_24C335AF8;
  v127 = *(_QWORD *)(a33 + 36);
  v271 = v127;
  if (*(char *)(a34 + 31) < 0)
    std::string::__init_copy_ctor_external(&v264, *(const std::string::value_type **)(a34 + 8), *(_QWORD *)(a34 + 16));
  else
    v264 = *(std::string *)(a34 + 8);
  v80 = *(_DWORD *)(a34 + 32);
  v263 = off_24C335B18;
  v266 = *(_QWORD *)(a34 + 36);
  v81 = *(_DWORD *)(a34 + 44);
  v126 = v80;
  v265 = v80;
  v267 = v81;
  if (*(char *)(a35 + 31) < 0)
    std::string::__init_copy_ctor_external(&v260, *(const std::string::value_type **)(a35 + 8), *(_QWORD *)(a35 + 16));
  else
    v260 = *(std::string *)(a35 + 8);
  v125 = *(_DWORD *)(a35 + 32);
  v261 = v125;
  v259 = off_24C335AF8;
  v124 = *(_QWORD *)(a35 + 36);
  v262 = v124;
  v254 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a36 + 31) < 0)
    std::string::__init_copy_ctor_external(&v255, *(const std::string::value_type **)(a36 + 8), *(_QWORD *)(a36 + 16));
  else
    v255 = *(std::string *)(a36 + 8);
  v256 = *(_DWORD *)(a36 + 32);
  v254 = &off_24C335AB8;
  v257 = *(_BYTE *)(a36 + 36);
  if (*(char *)(a36 + 63) < 0)
    std::string::__init_copy_ctor_external(&v258, *(const std::string::value_type **)(a36 + 40), *(_QWORD *)(a36 + 48));
  else
    v258 = *(std::string *)(a36 + 40);
  v249 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a37 + 31) < 0)
    std::string::__init_copy_ctor_external(&v250, *(const std::string::value_type **)(a37 + 8), *(_QWORD *)(a37 + 16));
  else
    v250 = *(std::string *)(a37 + 8);
  v82 = *(_DWORD *)(a37 + 32);
  v249 = off_24C335B18;
  v252 = *(_QWORD *)(a37 + 36);
  v83 = *(_DWORD *)(a37 + 44);
  v123 = v82;
  v251 = v82;
  v253 = v83;
  v244 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a38 + 31) < 0)
    std::string::__init_copy_ctor_external(&v245, *(const std::string::value_type **)(a38 + 8), *(_QWORD *)(a38 + 16));
  else
    v245 = *(std::string *)(a38 + 8);
  v246 = *(_DWORD *)(a38 + 32);
  v244 = &off_24C335AB8;
  v247 = *(_BYTE *)(a38 + 36);
  if (*(char *)(a38 + 63) < 0)
    std::string::__init_copy_ctor_external(&v248, *(const std::string::value_type **)(a38 + 40), *(_QWORD *)(a38 + 48));
  else
    v248 = *(std::string *)(a38 + 40);
  v239 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a39 + 31) < 0)
    std::string::__init_copy_ctor_external(&v240, *(const std::string::value_type **)(a39 + 8), *(_QWORD *)(a39 + 16));
  else
    v240 = *(std::string *)(a39 + 8);
  v241 = *(_DWORD *)(a39 + 32);
  v239 = &off_24C335AB8;
  v242 = *(_BYTE *)(a39 + 36);
  if (*(char *)(a39 + 63) < 0)
    std::string::__init_copy_ctor_external(&v243, *(const std::string::value_type **)(a39 + 40), *(_QWORD *)(a39 + 48));
  else
    v243 = *(std::string *)(a39 + 40);
  v235 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a40 + 31) < 0)
    std::string::__init_copy_ctor_external(&v236, *(const std::string::value_type **)(a40 + 8), *(_QWORD *)(a40 + 16));
  else
    v236 = *(std::string *)(a40 + 8);
  v122 = *(_DWORD *)(a40 + 32);
  v237 = v122;
  v235 = off_24C335AF8;
  v121 = *(_QWORD *)(a40 + 36);
  v238 = v121;
  v230 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a41 + 31) < 0)
    std::string::__init_copy_ctor_external(&v231, *(const std::string::value_type **)(a41 + 8), *(_QWORD *)(a41 + 16));
  else
    v231 = *(std::string *)(a41 + 8);
  v84 = *(_DWORD *)(a41 + 32);
  v230 = off_24C335B18;
  v233 = *(_QWORD *)(a41 + 36);
  v85 = *(_DWORD *)(a41 + 44);
  v120 = v84;
  v232 = v84;
  v234 = v85;
  v226 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a42 + 31) < 0)
    std::string::__init_copy_ctor_external(&v227, *(const std::string::value_type **)(a42 + 8), *(_QWORD *)(a42 + 16));
  else
    v227 = *(std::string *)(a42 + 8);
  v119 = *(_DWORD *)(a42 + 32);
  v228 = v119;
  v226 = off_24C335AF8;
  v86 = *(_QWORD *)(a42 + 36);
  v229 = v86;
  v221 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a43 + 31) < 0)
    std::string::__init_copy_ctor_external(&v222, *(const std::string::value_type **)(a43 + 8), *(_QWORD *)(a43 + 16));
  else
    v222 = *(std::string *)(a43 + 8);
  v223 = *(_DWORD *)(a43 + 32);
  v221 = &off_24C335AB8;
  v224 = *(_BYTE *)(a43 + 36);
  if (*(char *)(a43 + 63) < 0)
    std::string::__init_copy_ctor_external(&v225, *(const std::string::value_type **)(a43 + 40), *(_QWORD *)(a43 + 48));
  else
    v225 = *(std::string *)(a43 + 40);
  v217 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a44 + 31) < 0)
    std::string::__init_copy_ctor_external(&v218, *(const std::string::value_type **)(a44 + 8), *(_QWORD *)(a44 + 16));
  else
    v218 = *(std::string *)(a44 + 8);
  v118 = *(_DWORD *)(a44 + 32);
  v219 = v118;
  v217 = off_24C335AF8;
  v117 = *(_QWORD *)(a44 + 36);
  v220 = v117;
  v212 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a45 + 31) < 0)
    std::string::__init_copy_ctor_external(&v213, *(const std::string::value_type **)(a45 + 8), *(_QWORD *)(a45 + 16));
  else
    v213 = *(std::string *)(a45 + 8);
  v87 = *(_DWORD *)(a45 + 32);
  v212 = off_24C335B18;
  v215 = *(_QWORD *)(a45 + 36);
  v88 = *(_DWORD *)(a45 + 44);
  v116 = v87;
  v214 = v87;
  v216 = v88;
  v208 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a46 + 31) < 0)
    std::string::__init_copy_ctor_external(&v209, *(const std::string::value_type **)(a46 + 8), *(_QWORD *)(a46 + 16));
  else
    v209 = *(std::string *)(a46 + 8);
  v115 = *(_DWORD *)(a46 + 32);
  v210 = v115;
  v208 = off_24C335AF8;
  v114 = *(_QWORD *)(a46 + 36);
  v211 = v114;
  v204 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a47 + 31) < 0)
    std::string::__init_copy_ctor_external(&v205, *(const std::string::value_type **)(a47 + 8), *(_QWORD *)(a47 + 16));
  else
    v205 = *(std::string *)(a47 + 8);
  v113 = *(_DWORD *)(a47 + 32);
  v206 = v113;
  v204 = off_24C335AF8;
  v112 = *(_QWORD *)(a47 + 36);
  v207 = v112;
  v200 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a48 + 31) < 0)
    std::string::__init_copy_ctor_external(&v201, *(const std::string::value_type **)(a48 + 8), *(_QWORD *)(a48 + 16));
  else
    v201 = *(std::string *)(a48 + 8);
  v111 = *(_DWORD *)(a48 + 32);
  v202 = v111;
  v200 = off_24C335AF8;
  v89 = *(_QWORD *)(a48 + 36);
  v203 = v89;
  v195 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a49 + 31) < 0)
    std::string::__init_copy_ctor_external(&v196, *(const std::string::value_type **)(a49 + 8), *(_QWORD *)(a49 + 16));
  else
    v196 = *(std::string *)(a49 + 8);
  v197 = *(_DWORD *)(a49 + 32);
  v195 = &off_24C335AB8;
  v198 = *(_BYTE *)(a49 + 36);
  if (*(char *)(a49 + 63) < 0)
    std::string::__init_copy_ctor_external(&v199, *(const std::string::value_type **)(a49 + 40), *(_QWORD *)(a49 + 48));
  else
    v199 = *(std::string *)(a49 + 40);
  v110 = v89;
  v190 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a50 + 31) < 0)
    std::string::__init_copy_ctor_external(&v191, *(const std::string::value_type **)(a50 + 8), *(_QWORD *)(a50 + 16));
  else
    v191 = *(std::string *)(a50 + 8);
  v192 = *(_DWORD *)(a50 + 32);
  v190 = &off_24C335AB8;
  v193 = *(_BYTE *)(a50 + 36);
  if (*(char *)(a50 + 63) < 0)
    std::string::__init_copy_ctor_external(&v194, *(const std::string::value_type **)(a50 + 40), *(_QWORD *)(a50 + 48));
  else
    v194 = *(std::string *)(a50 + 40);
  v185 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a51 + 31) < 0)
    std::string::__init_copy_ctor_external(&v186, *(const std::string::value_type **)(a51 + 8), *(_QWORD *)(a51 + 16));
  else
    v186 = *(std::string *)(a51 + 8);
  v90 = *(_DWORD *)(a51 + 32);
  v185 = off_24C335B18;
  v188 = *(_QWORD *)(a51 + 36);
  v91 = *(_DWORD *)(a51 + 44);
  v109 = v90;
  v187 = v90;
  v189 = v91;
  v181 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a52 + 31) < 0)
    std::string::__init_copy_ctor_external(&v182, *(const std::string::value_type **)(a52 + 8), *(_QWORD *)(a52 + 16));
  else
    v182 = *(std::string *)(a52 + 8);
  v108 = *(_DWORD *)(a52 + 32);
  v183 = v108;
  v181 = off_24C335AF8;
  v107 = *(_QWORD *)(a52 + 36);
  v184 = v107;
  if (*(char *)(a53 + 31) < 0)
    std::string::__init_copy_ctor_external(&v178, *(const std::string::value_type **)(a53 + 8), *(_QWORD *)(a53 + 16));
  else
    v178 = *(std::string *)(a53 + 8);
  v106 = *(_DWORD *)(a53 + 32);
  v179 = v106;
  v105 = *(_QWORD *)(a53 + 36);
  v180 = v105;
  v624 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v625, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
  else
    v625 = __s;
  v626 = v175;
  v624 = off_24C335AF8;
  v627 = v173;
  v620 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v393.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v621, v393.__r_.__value_.__l.__data_, v393.__r_.__value_.__l.__size_);
  else
    v621 = v393;
  v622 = v170;
  v620 = off_24C335AF8;
  v623 = v168;
  v616 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v389.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v617, v389.__r_.__value_.__l.__data_, v389.__r_.__value_.__l.__size_);
  else
    v617 = v389;
  v618 = v165;
  v616 = off_24C335AF8;
  v619 = v163;
  v612 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v385.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v613, v385.__r_.__value_.__l.__data_, v385.__r_.__value_.__l.__size_);
  else
    v613 = v385;
  v614 = v161;
  v612 = off_24C335AF8;
  v615 = v160;
  v608 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v381.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v609, v381.__r_.__value_.__l.__data_, v381.__r_.__value_.__l.__size_);
  else
    v609 = v381;
  v610 = v159;
  v608 = off_24C335AF8;
  v611 = v158;
  v603 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v376.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v604, v376.__r_.__value_.__l.__data_, v376.__r_.__value_.__l.__size_);
  else
    v604 = v376;
  v603 = off_24C335B18;
  v606 = v378;
  v605 = v157;
  v607 = v379;
  v598 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v371.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v599, v371.__r_.__value_.__l.__data_, v371.__r_.__value_.__l.__size_);
  else
    v599 = v371;
  v598 = off_24C335B18;
  v601 = v373;
  v600 = v156;
  v602 = v374;
  v594 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v367.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v595, v367.__r_.__value_.__l.__data_, v367.__r_.__value_.__l.__size_);
  else
    v595 = v367;
  v596 = v155;
  v594 = off_24C335AF8;
  v597 = v154;
  v589 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v362.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v590, v362.__r_.__value_.__l.__data_, v362.__r_.__value_.__l.__size_);
  else
    v590 = v362;
  v591 = v363;
  v589 = &off_24C335AB8;
  v592 = v364;
  if (SHIBYTE(v365.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v593, v365.__r_.__value_.__l.__data_, v365.__r_.__value_.__l.__size_);
  else
    v593 = v365;
  v584 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v357.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v585, v357.__r_.__value_.__l.__data_, v357.__r_.__value_.__l.__size_);
  else
    v585 = v357;
  v586 = v358;
  v584 = &off_24C335AB8;
  v587 = v359;
  if (SHIBYTE(v360.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v588, v360.__r_.__value_.__l.__data_, v360.__r_.__value_.__l.__size_);
  else
    v588 = v360;
  v580 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v353.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v581, v353.__r_.__value_.__l.__data_, v353.__r_.__value_.__l.__size_);
  else
    v581 = v353;
  v582 = v153;
  v580 = off_24C335AF8;
  v583 = v152;
  v576 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v349.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v577, v349.__r_.__value_.__l.__data_, v349.__r_.__value_.__l.__size_);
  else
    v577 = v349;
  v578 = v151;
  v576 = off_24C335AF8;
  v579 = v150;
  v572 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v345.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v573, v345.__r_.__value_.__l.__data_, v345.__r_.__value_.__l.__size_);
  else
    v573 = v345;
  v574 = v149;
  v572 = off_24C335AF8;
  v575 = v148;
  v568 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v341.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v569, v341.__r_.__value_.__l.__data_, v341.__r_.__value_.__l.__size_);
  else
    v569 = v341;
  v570 = v147;
  v568 = off_24C335AF8;
  v571 = v140;
  v563 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v336.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v564, v336.__r_.__value_.__l.__data_, v336.__r_.__value_.__l.__size_);
  else
    v564 = v336;
  v563 = off_24C335B18;
  v566 = v338;
  v565 = v146;
  v567 = v339;
  v558 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v331.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v559, v331.__r_.__value_.__l.__data_, v331.__r_.__value_.__l.__size_);
  else
    v559 = v331;
  v560 = v332;
  v558 = &off_24C335AB8;
  v561 = v333;
  if (SHIBYTE(v334.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v562, v334.__r_.__value_.__l.__data_, v334.__r_.__value_.__l.__size_);
  else
    v562 = v334;
  v553 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v326.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v554, v326.__r_.__value_.__l.__data_, v326.__r_.__value_.__l.__size_);
  else
    v554 = v326;
  v555 = v327;
  v553 = &off_24C335AB8;
  v556 = v328;
  if (SHIBYTE(v329.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v557, v329.__r_.__value_.__l.__data_, v329.__r_.__value_.__l.__size_);
  else
    v557 = v329;
  v548 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v321.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v549, v321.__r_.__value_.__l.__data_, v321.__r_.__value_.__l.__size_);
  else
    v549 = v321;
  v548 = off_24C335B18;
  v551 = v323;
  v550 = v145;
  v552 = v324;
  v543 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v316.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v544, v316.__r_.__value_.__l.__data_, v316.__r_.__value_.__l.__size_);
  else
    v544 = v316;
  v543 = off_24C335B18;
  v546 = v318;
  v545 = v144;
  v547 = v319;
  v539 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v312.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v540, v312.__r_.__value_.__l.__data_, v312.__r_.__value_.__l.__size_);
  else
    v540 = v312;
  v541 = v143;
  v539 = off_24C335AF8;
  v542 = v142;
  v535 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v308.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v536, v308.__r_.__value_.__l.__data_, v308.__r_.__value_.__l.__size_);
  else
    v536 = v308;
  v537 = v141;
  v535 = off_24C335AF8;
  v538 = v79;
  v531 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v304.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v532, v304.__r_.__value_.__l.__data_, v304.__r_.__value_.__l.__size_);
  else
    v532 = v304;
  v533 = v139;
  v531 = off_24C335AF8;
  v534 = v138;
  v527 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v300.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v528, v300.__r_.__value_.__l.__data_, v300.__r_.__value_.__l.__size_);
  else
    v528 = v300;
  v529 = v137;
  v527 = off_24C335AF8;
  v530 = v136;
  v523 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v296.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v524, v296.__r_.__value_.__l.__data_, v296.__r_.__value_.__l.__size_);
  else
    v524 = v296;
  v525 = v135;
  v523 = off_24C335AF8;
  v526 = v134;
  v519 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v292.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v520, v292.__r_.__value_.__l.__data_, v292.__r_.__value_.__l.__size_);
  else
    v520 = v292;
  v521 = v133;
  v519 = off_24C335AF8;
  v522 = v132;
  v515 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v288.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v516, v288.__r_.__value_.__l.__data_, v288.__r_.__value_.__l.__size_);
  else
    v516 = v288;
  v517 = v131;
  v515 = off_24C335AF8;
  v518 = v130;
  v510 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v283.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v511, v283.__r_.__value_.__l.__data_, v283.__r_.__value_.__l.__size_);
  else
    v511 = v283;
  v512 = v284;
  v510 = &off_24C335AB8;
  v513 = v285;
  if (SHIBYTE(v286.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v514, v286.__r_.__value_.__l.__data_, v286.__r_.__value_.__l.__size_);
  else
    v514 = v286;
  v505 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v278.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v506, v278.__r_.__value_.__l.__data_, v278.__r_.__value_.__l.__size_);
  else
    v506 = v278;
  v507 = v279;
  v505 = &off_24C335AB8;
  v508 = v280;
  if (SHIBYTE(v281.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v509, v281.__r_.__value_.__l.__data_, v281.__r_.__value_.__l.__size_);
  else
    v509 = v281;
  v500 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v273.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v501, v273.__r_.__value_.__l.__data_, v273.__r_.__value_.__l.__size_);
  else
    v501 = v273;
  v502 = v274;
  v500 = &off_24C335AB8;
  v503 = v275;
  if (SHIBYTE(v276.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v504, v276.__r_.__value_.__l.__data_, v276.__r_.__value_.__l.__size_);
  else
    v504 = v276;
  v496 = (uint64_t (**)())off_24C335D90;
  v92 = SHIBYTE(v269.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v269.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v497, v269.__r_.__value_.__l.__data_, v269.__r_.__value_.__l.__size_);
  else
    v497 = v269;
  v498 = v128;
  v496 = off_24C335AF8;
  v499 = v127;
  v491 = (uint64_t (**)())off_24C335D90;
  v176 = SHIBYTE(v264.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v264.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v492, v264.__r_.__value_.__l.__data_, v264.__r_.__value_.__l.__size_);
  else
    v492 = v264;
  v491 = off_24C335B18;
  v494 = v266;
  v493 = v126;
  v495 = v267;
  v487 = (uint64_t (**)())off_24C335D90;
  v174 = SHIBYTE(v260.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v260.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v488, v260.__r_.__value_.__l.__data_, v260.__r_.__value_.__l.__size_);
  else
    v488 = v260;
  v489 = v125;
  v487 = off_24C335AF8;
  v490 = v124;
  v482 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v255.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v483, v255.__r_.__value_.__l.__data_, v255.__r_.__value_.__l.__size_);
  else
    v483 = v255;
  v484 = v256;
  v482 = &off_24C335AB8;
  v485 = v257;
  if (SHIBYTE(v258.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v486, v258.__r_.__value_.__l.__data_, v258.__r_.__value_.__l.__size_);
  else
    v486 = v258;
  v477 = (uint64_t (**)())off_24C335D90;
  v172 = SHIBYTE(v250.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v250.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v478, v250.__r_.__value_.__l.__data_, v250.__r_.__value_.__l.__size_);
  else
    v478 = v250;
  v477 = off_24C335B18;
  v480 = v252;
  v479 = v123;
  v481 = v253;
  v472 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v245.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v473, v245.__r_.__value_.__l.__data_, v245.__r_.__value_.__l.__size_);
  else
    v473 = v245;
  v474 = v246;
  v472 = &off_24C335AB8;
  v475 = v247;
  if (SHIBYTE(v248.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v476, v248.__r_.__value_.__l.__data_, v248.__r_.__value_.__l.__size_);
  else
    v476 = v248;
  v467 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v240.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v468, v240.__r_.__value_.__l.__data_, v240.__r_.__value_.__l.__size_);
  else
    v468 = v240;
  v469 = v241;
  v467 = &off_24C335AB8;
  v470 = v242;
  if (SHIBYTE(v243.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v471, v243.__r_.__value_.__l.__data_, v243.__r_.__value_.__l.__size_);
  else
    v471 = v243;
  v463 = (uint64_t (**)())off_24C335D90;
  v93 = SHIBYTE(v236.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v236.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v464, v236.__r_.__value_.__l.__data_, v236.__r_.__value_.__l.__size_);
  else
    v464 = v236;
  v465 = v122;
  v463 = off_24C335AF8;
  v466 = v121;
  v458 = (uint64_t (**)())off_24C335D90;
  v171 = SHIBYTE(v231.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v231.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v459, v231.__r_.__value_.__l.__data_, v231.__r_.__value_.__l.__size_);
  else
    v459 = v231;
  v458 = off_24C335B18;
  v461 = v233;
  v460 = v120;
  v462 = v234;
  v454 = (uint64_t (**)())off_24C335D90;
  v169 = SHIBYTE(v227.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v227.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v455, v227.__r_.__value_.__l.__data_, v227.__r_.__value_.__l.__size_);
  else
    v455 = v227;
  v456 = v119;
  v454 = off_24C335AF8;
  v457 = v86;
  v449 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v222.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v450, v222.__r_.__value_.__l.__data_, v222.__r_.__value_.__l.__size_);
  else
    v450 = v222;
  v451 = v223;
  v449 = &off_24C335AB8;
  v452 = v224;
  if (SHIBYTE(v225.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v453, v225.__r_.__value_.__l.__data_, v225.__r_.__value_.__l.__size_);
  else
    v453 = v225;
  v445 = (uint64_t (**)())off_24C335D90;
  v167 = SHIBYTE(v218.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v218.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v446, v218.__r_.__value_.__l.__data_, v218.__r_.__value_.__l.__size_);
  else
    v446 = v218;
  v447 = v118;
  v445 = off_24C335AF8;
  v448 = v117;
  v440 = (uint64_t (**)())off_24C335D90;
  v164 = SHIBYTE(v213.__r_.__value_.__r.__words[2]);
  v166 = v92;
  if (SHIBYTE(v213.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v441, v213.__r_.__value_.__l.__data_, v213.__r_.__value_.__l.__size_);
  else
    v441 = v213;
  v440 = off_24C335B18;
  v443 = v215;
  v442 = v116;
  v444 = v216;
  v436 = (uint64_t (**)())off_24C335D90;
  v94 = SHIBYTE(v209.__r_.__value_.__r.__words[2]);
  v162 = v93;
  if (SHIBYTE(v209.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v437, v209.__r_.__value_.__l.__data_, v209.__r_.__value_.__l.__size_);
  else
    v437 = v209;
  v438 = v115;
  v436 = off_24C335AF8;
  v439 = v114;
  v432 = (uint64_t (**)())off_24C335D90;
  v95 = SHIBYTE(v205.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v205.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v433, v205.__r_.__value_.__l.__data_, v205.__r_.__value_.__l.__size_);
  else
    v433 = v205;
  v434 = v113;
  v432 = off_24C335AF8;
  v435 = v112;
  v428 = (uint64_t (**)())off_24C335D90;
  v96 = SHIBYTE(v201.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v201.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v429, v201.__r_.__value_.__l.__data_, v201.__r_.__value_.__l.__size_);
  else
    v429 = v201;
  v430 = v111;
  v428 = off_24C335AF8;
  v431 = v110;
  v423 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v196.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v424, v196.__r_.__value_.__l.__data_, v196.__r_.__value_.__l.__size_);
  else
    v424 = v196;
  v425 = v197;
  v423 = &off_24C335AB8;
  v426 = v198;
  if (SHIBYTE(v199.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v427, v199.__r_.__value_.__l.__data_, v199.__r_.__value_.__l.__size_);
  else
    v427 = v199;
  v418 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v191.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v419, v191.__r_.__value_.__l.__data_, v191.__r_.__value_.__l.__size_);
  else
    v419 = v191;
  v420 = v192;
  v418 = &off_24C335AB8;
  v421 = v193;
  if (SHIBYTE(v194.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v422, v194.__r_.__value_.__l.__data_, v194.__r_.__value_.__l.__size_);
  else
    v422 = v194;
  v413 = (uint64_t (**)())off_24C335D90;
  v97 = SHIBYTE(v186.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v186.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v414, v186.__r_.__value_.__l.__data_, v186.__r_.__value_.__l.__size_);
  else
    v414 = v186;
  v413 = off_24C335B18;
  v416 = v188;
  v415 = v109;
  v417 = v189;
  v409 = (uint64_t (**)())off_24C335D90;
  v98 = SHIBYTE(v182.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v182.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v410, v182.__r_.__value_.__l.__data_, v182.__r_.__value_.__l.__size_);
  else
    v410 = v182;
  v411 = v108;
  v409 = off_24C335AF8;
  v412 = v107;
  v405 = (uint64_t (**)())off_24C335D90;
  v99 = SHIBYTE(v178.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v178.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&__p, v178.__r_.__value_.__l.__data_, v178.__r_.__value_.__l.__size_);
  else
    __p = v178;
  v407 = v106;
  v405 = off_24C335AF8;
  v408 = v105;
  mediaplatform::DatabaseColumnTuple<37ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::DatabaseColumnTuple(v177, (uint64_t)&v624, (uint64_t)&v620, (uint64_t)&v616, (uint64_t)&v612, (uint64_t)&v608, (uint64_t)&v603, (uint64_t)&v598, (uint64_t)&v594, (uint64_t)&v589, (uint64_t)&v584, (uint64_t)&v580, (uint64_t)&v576, (uint64_t)&v572, (uint64_t)&v568, (uint64_t)&v563, (uint64_t)&v558, (uint64_t)&v553, (uint64_t)&v548,
    (uint64_t)&v543,
    (uint64_t)&v539,
    (uint64_t)&v535,
    (uint64_t)&v531,
    (uint64_t)&v527,
    (uint64_t)&v523,
    (uint64_t)&v519,
    (uint64_t)&v515,
    (uint64_t)&v510,
    (uint64_t)&v505,
    (uint64_t)&v500,
    (uint64_t)&v496,
    (uint64_t)&v491,
    (uint64_t)&v487,
    (uint64_t)&v482,
    (uint64_t)&v477,
    (uint64_t)&v472,
    (uint64_t)&v467,
    (uint64_t)&v463,
    (uint64_t)&v458,
    (uint64_t)&v454,
    (uint64_t)&v449,
    (uint64_t)&v445,
    (uint64_t)&v440,
    (uint64_t)&v436,
    (uint64_t)&v432,
    (uint64_t)&v428,
    (uint64_t)&v423,
    (uint64_t)&v418,
    (uint64_t)&v413,
    (uint64_t)&v409,
    (uint64_t)&v405);
  v405 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v409 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v410.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v410.__r_.__value_.__l.__data_);
  v413 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v414.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v414.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v418);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v423);
  v428 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v429.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v429.__r_.__value_.__l.__data_);
  v432 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v433.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v433.__r_.__value_.__l.__data_);
  v436 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v437.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v437.__r_.__value_.__l.__data_);
  v440 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v441.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v441.__r_.__value_.__l.__data_);
  v445 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v446.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v446.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v449);
  v454 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v455.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v455.__r_.__value_.__l.__data_);
  v458 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v459.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v459.__r_.__value_.__l.__data_);
  v463 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v464.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v464.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v467);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v472);
  v477 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v478.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v478.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v482);
  v487 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v488.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v488.__r_.__value_.__l.__data_);
  v491 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v492.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v492.__r_.__value_.__l.__data_);
  v496 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v497.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v497.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v500);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v505);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v510);
  v515 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v516.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v516.__r_.__value_.__l.__data_);
  v519 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v520.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v520.__r_.__value_.__l.__data_);
  v523 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v524.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v524.__r_.__value_.__l.__data_);
  v527 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v528.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v528.__r_.__value_.__l.__data_);
  v531 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v532.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v532.__r_.__value_.__l.__data_);
  v535 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v536.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v536.__r_.__value_.__l.__data_);
  v539 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v540.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v540.__r_.__value_.__l.__data_);
  v543 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v544.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v544.__r_.__value_.__l.__data_);
  v548 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v549.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v549.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v553);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v558);
  v563 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v564.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v564.__r_.__value_.__l.__data_);
  v568 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v569.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v569.__r_.__value_.__l.__data_);
  v572 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v573.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v573.__r_.__value_.__l.__data_);
  v576 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v577.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v577.__r_.__value_.__l.__data_);
  v580 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v581.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v581.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v584);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v589);
  v594 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v595.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v595.__r_.__value_.__l.__data_);
  v598 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v599.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v599.__r_.__value_.__l.__data_);
  v603 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v604.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v604.__r_.__value_.__l.__data_);
  v608 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v609.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v609.__r_.__value_.__l.__data_);
  v612 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v613.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v613.__r_.__value_.__l.__data_);
  v616 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v617.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v617.__r_.__value_.__l.__data_);
  v620 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v621.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v621.__r_.__value_.__l.__data_);
  v624 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v625.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v625.__r_.__value_.__l.__data_);
  *(_QWORD *)(v177 + 2608) = off_24C335D90;
  v100 = (std::string *)(v177 + 2616);
  if (SHIBYTE(v401.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v100, v401.__r_.__value_.__l.__data_, v401.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v100->__r_.__value_.__l.__data_ = *(_OWORD *)&v401.__r_.__value_.__l.__data_;
    *(_QWORD *)(v177 + 2632) = *((_QWORD *)&v401.__r_.__value_.__l + 2);
  }
  *(_DWORD *)(v177 + 2640) = v402;
  *(_QWORD *)(v177 + 2608) = &off_24C335AB8;
  *(_BYTE *)(v177 + 2644) = v403;
  v101 = (std::string *)(v177 + 2648);
  if (SHIBYTE(v404.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v101, v404.__r_.__value_.__l.__data_, v404.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v101->__r_.__value_.__l.__data_ = *(_OWORD *)&v404.__r_.__value_.__l.__data_;
    *(_QWORD *)(v177 + 2664) = *((_QWORD *)&v404.__r_.__value_.__l + 2);
  }
  if (v99 < 0)
    operator delete(v178.__r_.__value_.__l.__data_);
  v181 = (uint64_t (**)())off_24C335D90;
  if (v98 < 0)
    operator delete(v182.__r_.__value_.__l.__data_);
  v185 = (uint64_t (**)())off_24C335D90;
  if (v97 < 0)
    operator delete(v186.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v190);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v195);
  v200 = (uint64_t (**)())off_24C335D90;
  if (v96 < 0)
    operator delete(v201.__r_.__value_.__l.__data_);
  v204 = (uint64_t (**)())off_24C335D90;
  if (v95 < 0)
    operator delete(v205.__r_.__value_.__l.__data_);
  v208 = (uint64_t (**)())off_24C335D90;
  if (v94 < 0)
    operator delete(v209.__r_.__value_.__l.__data_);
  v212 = (uint64_t (**)())off_24C335D90;
  if (v164 < 0)
    operator delete(v213.__r_.__value_.__l.__data_);
  v217 = (uint64_t (**)())off_24C335D90;
  if (v167 < 0)
    operator delete(v218.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v221);
  v226 = (uint64_t (**)())off_24C335D90;
  if (v169 < 0)
    operator delete(v227.__r_.__value_.__l.__data_);
  v230 = (uint64_t (**)())off_24C335D90;
  if (v171 < 0)
    operator delete(v231.__r_.__value_.__l.__data_);
  v235 = (uint64_t (**)())off_24C335D90;
  if (v162 < 0)
    operator delete(v236.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v239);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v244);
  v249 = (uint64_t (**)())off_24C335D90;
  if (v172 < 0)
    operator delete(v250.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v254);
  v259 = (uint64_t (**)())off_24C335D90;
  if (v174 < 0)
    operator delete(v260.__r_.__value_.__l.__data_);
  v263 = (uint64_t (**)())off_24C335D90;
  if (v176 < 0)
    operator delete(v264.__r_.__value_.__l.__data_);
  v268 = (uint64_t (**)())off_24C335D90;
  if (v166 < 0)
    operator delete(v269.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v272);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v277);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v282);
  v287 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v288.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v288.__r_.__value_.__l.__data_);
  if (SHIBYTE(v292.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v292.__r_.__value_.__l.__data_);
  if (SHIBYTE(v296.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v296.__r_.__value_.__l.__data_);
  if (SHIBYTE(v300.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v300.__r_.__value_.__l.__data_);
  if (SHIBYTE(v304.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v304.__r_.__value_.__l.__data_);
  if (SHIBYTE(v308.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v308.__r_.__value_.__l.__data_);
  if (SHIBYTE(v312.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v312.__r_.__value_.__l.__data_);
  if (SHIBYTE(v316.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v316.__r_.__value_.__l.__data_);
  if (SHIBYTE(v321.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v321.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v325);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v330);
  if (SHIBYTE(v336.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v336.__r_.__value_.__l.__data_);
  if (SHIBYTE(v341.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v341.__r_.__value_.__l.__data_);
  if (SHIBYTE(v345.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v345.__r_.__value_.__l.__data_);
  if (SHIBYTE(v349.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v349.__r_.__value_.__l.__data_);
  if (SHIBYTE(v353.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v353.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v356);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v361);
  if (SHIBYTE(v367.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v367.__r_.__value_.__l.__data_);
  if (SHIBYTE(v371.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v371.__r_.__value_.__l.__data_);
  if (SHIBYTE(v376.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v376.__r_.__value_.__l.__data_);
  if (SHIBYTE(v381.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v381.__r_.__value_.__l.__data_);
  if (SHIBYTE(v385.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v385.__r_.__value_.__l.__data_);
  if (SHIBYTE(v389.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v389.__r_.__value_.__l.__data_);
  if (SHIBYTE(v393.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v393.__r_.__value_.__l.__data_);
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__s.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v400);
  *(_QWORD *)(v177 + 2672) = off_24C335D90;
  v102 = (std::string *)(v177 + 2680);
  if (*(char *)(v129 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v102, *(const std::string::value_type **)(v129 + 8), *(_QWORD *)(v129 + 16));
  }
  else
  {
    v103 = *(_OWORD *)(v129 + 8);
    *(_QWORD *)(v177 + 2696) = *(_QWORD *)(v129 + 24);
    *(_OWORD *)&v102->__r_.__value_.__l.__data_ = v103;
  }
  result = v177;
  *(_DWORD *)(v177 + 2704) = *(_DWORD *)(v129 + 32);
  *(_QWORD *)(v177 + 2672) = off_24C335AF8;
  *(_QWORD *)(v177 + 2708) = *(_QWORD *)(v129 + 36);
  return result;
}

void sub_20A7CAE74(_Unwind_Exception *a1)
{
  mediaplatform::DatabaseColumnTuple<36ul,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(STACK[0x520]);
  _Unwind_Resume(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<35ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(uint64_t a1)
{
  *(_QWORD *)(a1 + 2672) = off_24C335D90;
  if (*(char *)(a1 + 2703) < 0)
    operator delete(*(void **)(a1 + 2680));
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 2608);
  *(_QWORD *)(a1 + 2560) = off_24C335D90;
  if (*(char *)(a1 + 2591) < 0)
    operator delete(*(void **)(a1 + 2568));
  *(_QWORD *)(a1 + 2512) = off_24C335D90;
  if (*(char *)(a1 + 2543) < 0)
    operator delete(*(void **)(a1 + 2520));
  *(_QWORD *)(a1 + 2464) = off_24C335D90;
  if (*(char *)(a1 + 2495) < 0)
    operator delete(*(void **)(a1 + 2472));
  return mediaplatform::DatabaseColumnTuple<40ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<36ul,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(uint64_t a1)
{
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 2608);
  *(_QWORD *)(a1 + 2560) = off_24C335D90;
  if (*(char *)(a1 + 2591) < 0)
    operator delete(*(void **)(a1 + 2568));
  *(_QWORD *)(a1 + 2512) = off_24C335D90;
  if (*(char *)(a1 + 2543) < 0)
    operator delete(*(void **)(a1 + 2520));
  *(_QWORD *)(a1 + 2464) = off_24C335D90;
  if (*(char *)(a1 + 2495) < 0)
    operator delete(*(void **)(a1 + 2472));
  return mediaplatform::DatabaseColumnTuple<40ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<37ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::DatabaseColumnTuple(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51)
{
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  int v66;
  int v67;
  int v68;
  int v69;
  uint64_t v70;
  int v71;
  int v72;
  int v73;
  int v74;
  int v75;
  int v76;
  int v77;
  uint64_t v78;
  int v79;
  int v80;
  int v81;
  int v82;
  int v83;
  int v84;
  int v85;
  int v86;
  int v87;
  int v88;
  int v89;
  uint64_t v90;
  int v91;
  int v92;
  int v93;
  int v94;
  int v95;
  int v96;
  int v97;
  std::string *v98;
  int v99;
  std::string *v100;
  __int128 v101;
  uint64_t result;
  uint64_t v103;
  int v104;
  uint64_t v105;
  int v106;
  int v107;
  uint64_t v108;
  int v109;
  uint64_t v110;
  int v111;
  uint64_t v112;
  int v113;
  int v114;
  uint64_t v115;
  int v116;
  uint64_t v117;
  int v118;
  int v119;
  uint64_t v120;
  int v121;
  uint64_t v122;
  int v123;
  uint64_t v124;
  int v125;
  int v126;
  uint64_t v127;
  uint64_t v128;
  int v129;
  uint64_t v130;
  int v131;
  int v132;
  uint64_t v133;
  int v134;
  uint64_t v135;
  int v136;
  uint64_t v137;
  int v138;
  uint64_t v139;
  int v140;
  int v141;
  int v142;
  int v143;
  int v144;
  uint64_t v145;
  uint64_t v146;
  int v147;
  uint64_t v148;
  int v149;
  uint64_t v150;
  int v151;
  int v152;
  int v153;
  int v154;
  int v155;
  int v156;
  int v157;
  uint64_t v158;
  int v159;
  int v160;
  int v161;
  uint64_t v162;
  int v163;
  int v164;
  int v165;
  uint64_t v166;
  int v167;
  int v168;
  int v169;
  uint64_t v170;
  std::string v171;
  int v172;
  uint64_t v173;
  uint64_t (**v174)();
  std::string v175;
  int v176;
  uint64_t v177;
  uint64_t (**v178)();
  std::string v179;
  int v180;
  uint64_t v181;
  int v182;
  uint64_t (**v183)();
  std::string v184;
  int v185;
  char v186;
  std::string v187;
  uint64_t (**v188)();
  std::string v189;
  int v190;
  char v191;
  std::string v192;
  uint64_t (**v193)();
  std::string v194;
  int v195;
  uint64_t v196;
  uint64_t (**v197)();
  std::string v198;
  int v199;
  uint64_t v200;
  uint64_t (**v201)();
  std::string v202;
  int v203;
  uint64_t v204;
  uint64_t (**v205)();
  std::string v206;
  int v207;
  uint64_t v208;
  int v209;
  uint64_t (**v210)();
  std::string v211;
  int v212;
  uint64_t v213;
  uint64_t (**v214)();
  std::string v215;
  int v216;
  char v217;
  std::string v218;
  uint64_t (**v219)();
  std::string v220;
  int v221;
  uint64_t v222;
  uint64_t (**v223)();
  std::string v224;
  int v225;
  uint64_t v226;
  int v227;
  uint64_t (**v228)();
  std::string v229;
  int v230;
  uint64_t v231;
  uint64_t (**v232)();
  std::string v233;
  int v234;
  char v235;
  std::string v236;
  uint64_t (**v237)();
  std::string v238;
  int v239;
  char v240;
  std::string v241;
  uint64_t (**v242)();
  std::string v243;
  int v244;
  uint64_t v245;
  int v246;
  uint64_t (**v247)();
  std::string v248;
  int v249;
  char v250;
  std::string v251;
  uint64_t (**v252)();
  std::string v253;
  int v254;
  uint64_t v255;
  uint64_t (**v256)();
  std::string v257;
  int v258;
  uint64_t v259;
  int v260;
  uint64_t (**v261)();
  std::string v262;
  int v263;
  uint64_t v264;
  uint64_t (**v265)();
  std::string v266;
  int v267;
  char v268;
  std::string v269;
  uint64_t (**v270)();
  std::string v271;
  int v272;
  char v273;
  std::string v274;
  uint64_t (**v275)();
  std::string v276;
  int v277;
  char v278;
  std::string v279;
  uint64_t (**v280)();
  std::string v281;
  int v282;
  uint64_t v283;
  uint64_t (**v284)();
  std::string v285;
  int v286;
  uint64_t v287;
  uint64_t (**v288)();
  std::string v289;
  int v290;
  uint64_t v291;
  uint64_t (**v292)();
  std::string v293;
  int v294;
  uint64_t v295;
  uint64_t (**v296)();
  std::string v297;
  int v298;
  uint64_t v299;
  uint64_t (**v300)();
  std::string v301;
  int v302;
  uint64_t v303;
  uint64_t (**v304)();
  std::string v305;
  int v306;
  uint64_t v307;
  uint64_t (**v308)();
  std::string v309;
  int v310;
  uint64_t v311;
  int v312;
  uint64_t (**v313)();
  std::string v314;
  int v315;
  uint64_t v316;
  int v317;
  uint64_t (**v318)();
  std::string v319;
  int v320;
  char v321;
  std::string v322;
  uint64_t (**v323)();
  std::string v324;
  int v325;
  char v326;
  std::string v327;
  uint64_t (**v328)();
  std::string v329;
  int v330;
  uint64_t v331;
  int v332;
  uint64_t (**v333)();
  std::string v334;
  int v335;
  uint64_t v336;
  uint64_t (**v337)();
  std::string v338;
  int v339;
  uint64_t v340;
  uint64_t (**v341)();
  std::string v342;
  int v343;
  uint64_t v344;
  uint64_t (**v345)();
  std::string v346;
  int v347;
  uint64_t v348;
  uint64_t (**v349)();
  std::string v350;
  int v351;
  char v352;
  std::string v353;
  uint64_t (**v354)();
  std::string v355;
  int v356;
  char v357;
  std::string v358;
  uint64_t (**v359)();
  std::string v360;
  int v361;
  uint64_t v362;
  uint64_t (**v363)();
  std::string v364;
  int v365;
  uint64_t v366;
  int v367;
  uint64_t (**v368)();
  std::string v369;
  int v370;
  uint64_t v371;
  int v372;
  uint64_t (**v373)();
  std::string v374;
  int v375;
  uint64_t v376;
  uint64_t (**v377)();
  std::string v378;
  int v379;
  uint64_t v380;
  uint64_t (**v381)();
  std::string __s;
  int v383;
  uint64_t v384;
  uint64_t (**v385)();
  std::string v386;
  int v387;
  uint64_t v388;
  uint64_t (**v389)();
  std::string __p;
  int v391;
  uint64_t v392;
  uint64_t (**v393)();
  std::string v394;
  int v395;
  uint64_t v396;
  uint64_t (**v397)();
  std::string v398;
  int v399;
  uint64_t v400;
  int v401;
  uint64_t (**v402)();
  std::string v403;
  int v404;
  char v405;
  std::string v406;
  uint64_t (**v407)();
  std::string v408;
  int v409;
  char v410;
  std::string v411;
  uint64_t (**v412)();
  std::string v413;
  int v414;
  uint64_t v415;
  uint64_t (**v416)();
  std::string v417;
  int v418;
  uint64_t v419;
  uint64_t (**v420)();
  std::string v421;
  int v422;
  uint64_t v423;
  uint64_t (**v424)();
  std::string v425;
  int v426;
  uint64_t v427;
  int v428;
  uint64_t (**v429)();
  std::string v430;
  int v431;
  uint64_t v432;
  uint64_t (**v433)();
  std::string v434;
  int v435;
  char v436;
  std::string v437;
  uint64_t (**v438)();
  std::string v439;
  int v440;
  uint64_t v441;
  uint64_t (**v442)();
  std::string v443;
  int v444;
  uint64_t v445;
  int v446;
  uint64_t (**v447)();
  std::string v448;
  int v449;
  uint64_t v450;
  uint64_t (**v451)();
  std::string v452;
  int v453;
  char v454;
  std::string v455;
  uint64_t (**v456)();
  std::string v457;
  int v458;
  char v459;
  std::string v460;
  uint64_t (**v461)();
  std::string v462;
  int v463;
  uint64_t v464;
  int v465;
  uint64_t (**v466)();
  std::string v467;
  int v468;
  char v469;
  std::string v470;
  uint64_t (**v471)();
  std::string v472;
  int v473;
  uint64_t v474;
  uint64_t (**v475)();
  std::string v476;
  int v477;
  uint64_t v478;
  int v479;
  uint64_t (**v480)();
  std::string v481;
  int v482;
  uint64_t v483;
  uint64_t (**v484)();
  std::string v485;
  int v486;
  char v487;
  std::string v488;
  uint64_t (**v489)();
  std::string v490;
  int v491;
  char v492;
  std::string v493;
  uint64_t (**v494)();
  std::string v495;
  int v496;
  char v497;
  std::string v498;
  uint64_t (**v499)();
  std::string v500;
  int v501;
  uint64_t v502;
  uint64_t (**v503)();
  std::string v504;
  int v505;
  uint64_t v506;
  uint64_t (**v507)();
  std::string v508;
  int v509;
  uint64_t v510;
  uint64_t (**v511)();
  std::string v512;
  int v513;
  uint64_t v514;
  uint64_t (**v515)();
  std::string v516;
  int v517;
  uint64_t v518;
  uint64_t (**v519)();
  std::string v520;
  int v521;
  uint64_t v522;
  uint64_t (**v523)();
  std::string v524;
  int v525;
  uint64_t v526;
  uint64_t (**v527)();
  std::string v528;
  int v529;
  uint64_t v530;
  int v531;
  uint64_t (**v532)();
  std::string v533;
  int v534;
  uint64_t v535;
  int v536;
  uint64_t (**v537)();
  std::string v538;
  int v539;
  char v540;
  std::string v541;
  uint64_t (**v542)();
  std::string v543;
  int v544;
  char v545;
  std::string v546;
  uint64_t (**v547)();
  std::string v548;
  int v549;
  uint64_t v550;
  int v551;
  uint64_t (**v552)();
  std::string v553;
  int v554;
  uint64_t v555;
  uint64_t (**v556)();
  std::string v557;
  int v558;
  uint64_t v559;
  uint64_t (**v560)();
  std::string v561;
  int v562;
  uint64_t v563;
  uint64_t (**v564)();
  std::string v565;
  int v566;
  uint64_t v567;
  uint64_t (**v568)();
  std::string v569;
  int v570;
  char v571;
  std::string v572;
  uint64_t (**v573)();
  std::string v574;
  int v575;
  char v576;
  std::string v577;
  uint64_t (**v578)();
  std::string v579;
  int v580;
  uint64_t v581;
  uint64_t (**v582)();
  std::string v583;
  int v584;
  uint64_t v585;
  int v586;
  uint64_t (**v587)();
  std::string v588;
  int v589;
  uint64_t v590;
  int v591;
  uint64_t (**v592)();
  std::string v593;
  int v594;
  uint64_t v595;
  uint64_t (**v596)();
  std::string v597;
  int v598;
  uint64_t v599;
  uint64_t (**v600)();
  std::string v601;
  int v602;
  uint64_t v603;

  v51 = MEMORY[0x24BDAC7A8](a1);
  v54 = v53;
  v56 = v55;
  v58 = v57;
  v60 = v59;
  v62 = v61;
  v63 = v52;
  v65 = v64;
  v170 = v51;
  if (*(char *)(v52 + 31) < 0)
    std::string::__init_copy_ctor_external(&v386, *(const std::string::value_type **)(v52 + 8), *(_QWORD *)(v52 + 16));
  else
    v386 = *(std::string *)(v52 + 8);
  v387 = *(_DWORD *)(v63 + 32);
  v385 = off_24C335AF8;
  v388 = *(_QWORD *)(v63 + 36);
  if (*(char *)(v62 + 31) < 0)
    std::string::__init_copy_ctor_external(&__s, *(const std::string::value_type **)(v62 + 8), *(_QWORD *)(v62 + 16));
  else
    __s = *(std::string *)(v62 + 8);
  v168 = *(_DWORD *)(v62 + 32);
  v383 = v168;
  v381 = off_24C335AF8;
  v166 = *(_QWORD *)(v62 + 36);
  v384 = v166;
  if (*(char *)(v60 + 31) < 0)
    std::string::__init_copy_ctor_external(&v378, *(const std::string::value_type **)(v60 + 8), *(_QWORD *)(v60 + 16));
  else
    v378 = *(std::string *)(v60 + 8);
  v164 = *(_DWORD *)(v60 + 32);
  v379 = v164;
  v377 = off_24C335AF8;
  v162 = *(_QWORD *)(v60 + 36);
  v380 = v162;
  if (*(char *)(v58 + 31) < 0)
    std::string::__init_copy_ctor_external(&v374, *(const std::string::value_type **)(v58 + 8), *(_QWORD *)(v58 + 16));
  else
    v374 = *(std::string *)(v58 + 8);
  v160 = *(_DWORD *)(v58 + 32);
  v375 = v160;
  v373 = off_24C335AF8;
  v158 = *(_QWORD *)(v58 + 36);
  v376 = v158;
  if (*(char *)(v56 + 31) < 0)
    std::string::__init_copy_ctor_external(&v369, *(const std::string::value_type **)(v56 + 8), *(_QWORD *)(v56 + 16));
  else
    v369 = *(std::string *)(v56 + 8);
  v66 = *(_DWORD *)(v56 + 32);
  v368 = off_24C335B18;
  v371 = *(_QWORD *)(v56 + 36);
  v67 = *(_DWORD *)(v56 + 44);
  v156 = v66;
  v370 = v66;
  v372 = v67;
  if (*(char *)(v54 + 31) < 0)
    std::string::__init_copy_ctor_external(&v364, *(const std::string::value_type **)(v54 + 8), *(_QWORD *)(v54 + 16));
  else
    v364 = *(std::string *)(v54 + 8);
  v68 = *(_DWORD *)(v54 + 32);
  v363 = off_24C335B18;
  v366 = *(_QWORD *)(v54 + 36);
  v69 = *(_DWORD *)(v54 + 44);
  v153 = v68;
  v365 = v68;
  v367 = v69;
  if (*(char *)(a9 + 31) < 0)
    std::string::__init_copy_ctor_external(&v360, *(const std::string::value_type **)(a9 + 8), *(_QWORD *)(a9 + 16));
  else
    v360 = *(std::string *)(a9 + 8);
  v152 = *(_DWORD *)(a9 + 32);
  v361 = v152;
  v359 = off_24C335AF8;
  v70 = *(_QWORD *)(a9 + 36);
  v362 = v70;
  v354 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a10 + 31) < 0)
    std::string::__init_copy_ctor_external(&v355, *(const std::string::value_type **)(a10 + 8), *(_QWORD *)(a10 + 16));
  else
    v355 = *(std::string *)(a10 + 8);
  v356 = *(_DWORD *)(a10 + 32);
  v354 = &off_24C335AB8;
  v357 = *(_BYTE *)(a10 + 36);
  if (*(char *)(a10 + 63) < 0)
    std::string::__init_copy_ctor_external(&v358, *(const std::string::value_type **)(a10 + 40), *(_QWORD *)(a10 + 48));
  else
    v358 = *(std::string *)(a10 + 40);
  v349 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a11 + 31) < 0)
    std::string::__init_copy_ctor_external(&v350, *(const std::string::value_type **)(a11 + 8), *(_QWORD *)(a11 + 16));
  else
    v350 = *(std::string *)(a11 + 8);
  v351 = *(_DWORD *)(a11 + 32);
  v349 = &off_24C335AB8;
  v352 = *(_BYTE *)(a11 + 36);
  if (*(char *)(a11 + 63) < 0)
    std::string::__init_copy_ctor_external(&v353, *(const std::string::value_type **)(a11 + 40), *(_QWORD *)(a11 + 48));
  else
    v353 = *(std::string *)(a11 + 40);
  if (*(char *)(a12 + 31) < 0)
    std::string::__init_copy_ctor_external(&v346, *(const std::string::value_type **)(a12 + 8), *(_QWORD *)(a12 + 16));
  else
    v346 = *(std::string *)(a12 + 8);
  v151 = *(_DWORD *)(a12 + 32);
  v347 = v151;
  v345 = off_24C335AF8;
  v150 = *(_QWORD *)(a12 + 36);
  v348 = v150;
  if (*(char *)(a13 + 31) < 0)
    std::string::__init_copy_ctor_external(&v342, *(const std::string::value_type **)(a13 + 8), *(_QWORD *)(a13 + 16));
  else
    v342 = *(std::string *)(a13 + 8);
  v149 = *(_DWORD *)(a13 + 32);
  v343 = v149;
  v341 = off_24C335AF8;
  v148 = *(_QWORD *)(a13 + 36);
  v344 = v148;
  if (*(char *)(a14 + 31) < 0)
    std::string::__init_copy_ctor_external(&v338, *(const std::string::value_type **)(a14 + 8), *(_QWORD *)(a14 + 16));
  else
    v338 = *(std::string *)(a14 + 8);
  v147 = *(_DWORD *)(a14 + 32);
  v339 = v147;
  v337 = off_24C335AF8;
  v146 = *(_QWORD *)(a14 + 36);
  v340 = v146;
  if (*(char *)(a15 + 31) < 0)
    std::string::__init_copy_ctor_external(&v334, *(const std::string::value_type **)(a15 + 8), *(_QWORD *)(a15 + 16));
  else
    v334 = *(std::string *)(a15 + 8);
  v71 = *(_DWORD *)(a15 + 32);
  v335 = v71;
  v333 = off_24C335AF8;
  v145 = *(_QWORD *)(a15 + 36);
  v336 = v145;
  if (*(char *)(a16 + 31) < 0)
    std::string::__init_copy_ctor_external(&v329, *(const std::string::value_type **)(a16 + 8), *(_QWORD *)(a16 + 16));
  else
    v329 = *(std::string *)(a16 + 8);
  v72 = *(_DWORD *)(a16 + 32);
  v328 = off_24C335B18;
  v331 = *(_QWORD *)(a16 + 36);
  v73 = *(_DWORD *)(a16 + 44);
  v144 = v72;
  v330 = v72;
  v332 = v73;
  v323 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a17 + 31) < 0)
    std::string::__init_copy_ctor_external(&v324, *(const std::string::value_type **)(a17 + 8), *(_QWORD *)(a17 + 16));
  else
    v324 = *(std::string *)(a17 + 8);
  v325 = *(_DWORD *)(a17 + 32);
  v323 = &off_24C335AB8;
  v326 = *(_BYTE *)(a17 + 36);
  if (*(char *)(a17 + 63) < 0)
    std::string::__init_copy_ctor_external(&v327, *(const std::string::value_type **)(a17 + 40), *(_QWORD *)(a17 + 48));
  else
    v327 = *(std::string *)(a17 + 40);
  v318 = (uint64_t (**)())off_24C335D90;
  v143 = v71;
  if (*(char *)(a18 + 31) < 0)
    std::string::__init_copy_ctor_external(&v319, *(const std::string::value_type **)(a18 + 8), *(_QWORD *)(a18 + 16));
  else
    v319 = *(std::string *)(a18 + 8);
  v320 = *(_DWORD *)(a18 + 32);
  v318 = &off_24C335AB8;
  v321 = *(_BYTE *)(a18 + 36);
  if (*(char *)(a18 + 63) < 0)
    std::string::__init_copy_ctor_external(&v322, *(const std::string::value_type **)(a18 + 40), *(_QWORD *)(a18 + 48));
  else
    v322 = *(std::string *)(a18 + 40);
  if (*(char *)(a19 + 31) < 0)
    std::string::__init_copy_ctor_external(&v314, *(const std::string::value_type **)(a19 + 8), *(_QWORD *)(a19 + 16));
  else
    v314 = *(std::string *)(a19 + 8);
  v74 = *(_DWORD *)(a19 + 32);
  v313 = off_24C335B18;
  v316 = *(_QWORD *)(a19 + 36);
  v75 = *(_DWORD *)(a19 + 44);
  v142 = v74;
  v315 = v74;
  v317 = v75;
  if (*(char *)(a20 + 31) < 0)
    std::string::__init_copy_ctor_external(&v309, *(const std::string::value_type **)(a20 + 8), *(_QWORD *)(a20 + 16));
  else
    v309 = *(std::string *)(a20 + 8);
  v76 = *(_DWORD *)(a20 + 32);
  v308 = off_24C335B18;
  v311 = *(_QWORD *)(a20 + 36);
  v77 = *(_DWORD *)(a20 + 44);
  v141 = v76;
  v310 = v76;
  v312 = v77;
  v122 = v65;
  if (*(char *)(a21 + 31) < 0)
    std::string::__init_copy_ctor_external(&v305, *(const std::string::value_type **)(a21 + 8), *(_QWORD *)(a21 + 16));
  else
    v305 = *(std::string *)(a21 + 8);
  v140 = *(_DWORD *)(a21 + 32);
  v306 = v140;
  v304 = off_24C335AF8;
  v139 = *(_QWORD *)(a21 + 36);
  v307 = v139;
  if (*(char *)(a22 + 31) < 0)
    std::string::__init_copy_ctor_external(&v301, *(const std::string::value_type **)(a22 + 8), *(_QWORD *)(a22 + 16));
  else
    v301 = *(std::string *)(a22 + 8);
  v138 = *(_DWORD *)(a22 + 32);
  v302 = v138;
  v300 = off_24C335AF8;
  v137 = *(_QWORD *)(a22 + 36);
  v303 = v137;
  if (*(char *)(a23 + 31) < 0)
    std::string::__init_copy_ctor_external(&v297, *(const std::string::value_type **)(a23 + 8), *(_QWORD *)(a23 + 16));
  else
    v297 = *(std::string *)(a23 + 8);
  v136 = *(_DWORD *)(a23 + 32);
  v298 = v136;
  v296 = off_24C335AF8;
  v135 = *(_QWORD *)(a23 + 36);
  v299 = v135;
  if (*(char *)(a24 + 31) < 0)
    std::string::__init_copy_ctor_external(&v293, *(const std::string::value_type **)(a24 + 8), *(_QWORD *)(a24 + 16));
  else
    v293 = *(std::string *)(a24 + 8);
  v134 = *(_DWORD *)(a24 + 32);
  v294 = v134;
  v292 = off_24C335AF8;
  v133 = *(_QWORD *)(a24 + 36);
  v295 = v133;
  if (*(char *)(a25 + 31) < 0)
    std::string::__init_copy_ctor_external(&v289, *(const std::string::value_type **)(a25 + 8), *(_QWORD *)(a25 + 16));
  else
    v289 = *(std::string *)(a25 + 8);
  v132 = *(_DWORD *)(a25 + 32);
  v290 = v132;
  v288 = off_24C335AF8;
  v78 = *(_QWORD *)(a25 + 36);
  v291 = v78;
  if (*(char *)(a26 + 31) < 0)
    std::string::__init_copy_ctor_external(&v285, *(const std::string::value_type **)(a26 + 8), *(_QWORD *)(a26 + 16));
  else
    v285 = *(std::string *)(a26 + 8);
  v131 = *(_DWORD *)(a26 + 32);
  v286 = v131;
  v284 = off_24C335AF8;
  v130 = *(_QWORD *)(a26 + 36);
  v287 = v130;
  if (*(char *)(a27 + 31) < 0)
    std::string::__init_copy_ctor_external(&v281, *(const std::string::value_type **)(a27 + 8), *(_QWORD *)(a27 + 16));
  else
    v281 = *(std::string *)(a27 + 8);
  v129 = *(_DWORD *)(a27 + 32);
  v282 = v129;
  v280 = off_24C335AF8;
  v128 = *(_QWORD *)(a27 + 36);
  v283 = v128;
  v275 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a28 + 31) < 0)
    std::string::__init_copy_ctor_external(&v276, *(const std::string::value_type **)(a28 + 8), *(_QWORD *)(a28 + 16));
  else
    v276 = *(std::string *)(a28 + 8);
  v277 = *(_DWORD *)(a28 + 32);
  v275 = &off_24C335AB8;
  v278 = *(_BYTE *)(a28 + 36);
  if (*(char *)(a28 + 63) < 0)
    std::string::__init_copy_ctor_external(&v279, *(const std::string::value_type **)(a28 + 40), *(_QWORD *)(a28 + 48));
  else
    v279 = *(std::string *)(a28 + 40);
  v270 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a29 + 31) < 0)
    std::string::__init_copy_ctor_external(&v271, *(const std::string::value_type **)(a29 + 8), *(_QWORD *)(a29 + 16));
  else
    v271 = *(std::string *)(a29 + 8);
  v272 = *(_DWORD *)(a29 + 32);
  v270 = &off_24C335AB8;
  v273 = *(_BYTE *)(a29 + 36);
  if (*(char *)(a29 + 63) < 0)
    std::string::__init_copy_ctor_external(&v274, *(const std::string::value_type **)(a29 + 40), *(_QWORD *)(a29 + 48));
  else
    v274 = *(std::string *)(a29 + 40);
  v265 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a30 + 31) < 0)
    std::string::__init_copy_ctor_external(&v266, *(const std::string::value_type **)(a30 + 8), *(_QWORD *)(a30 + 16));
  else
    v266 = *(std::string *)(a30 + 8);
  v267 = *(_DWORD *)(a30 + 32);
  v265 = &off_24C335AB8;
  v268 = *(_BYTE *)(a30 + 36);
  if (*(char *)(a30 + 63) < 0)
    std::string::__init_copy_ctor_external(&v269, *(const std::string::value_type **)(a30 + 40), *(_QWORD *)(a30 + 48));
  else
    v269 = *(std::string *)(a30 + 40);
  if (*(char *)(a31 + 31) < 0)
    std::string::__init_copy_ctor_external(&v262, *(const std::string::value_type **)(a31 + 8), *(_QWORD *)(a31 + 16));
  else
    v262 = *(std::string *)(a31 + 8);
  v79 = *(_DWORD *)(a31 + 32);
  v263 = v79;
  v261 = off_24C335AF8;
  v127 = *(_QWORD *)(a31 + 36);
  v264 = v127;
  if (*(char *)(a32 + 31) < 0)
    std::string::__init_copy_ctor_external(&v257, *(const std::string::value_type **)(a32 + 8), *(_QWORD *)(a32 + 16));
  else
    v257 = *(std::string *)(a32 + 8);
  v80 = *(_DWORD *)(a32 + 32);
  v256 = off_24C335B18;
  v259 = *(_QWORD *)(a32 + 36);
  v81 = *(_DWORD *)(a32 + 44);
  v126 = v80;
  v258 = v80;
  v260 = v81;
  if (*(char *)(a33 + 31) < 0)
    std::string::__init_copy_ctor_external(&v253, *(const std::string::value_type **)(a33 + 8), *(_QWORD *)(a33 + 16));
  else
    v253 = *(std::string *)(a33 + 8);
  v125 = *(_DWORD *)(a33 + 32);
  v254 = v125;
  v252 = off_24C335AF8;
  v124 = *(_QWORD *)(a33 + 36);
  v255 = v124;
  v247 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a34 + 31) < 0)
    std::string::__init_copy_ctor_external(&v248, *(const std::string::value_type **)(a34 + 8), *(_QWORD *)(a34 + 16));
  else
    v248 = *(std::string *)(a34 + 8);
  v249 = *(_DWORD *)(a34 + 32);
  v247 = &off_24C335AB8;
  v250 = *(_BYTE *)(a34 + 36);
  if (*(char *)(a34 + 63) < 0)
    std::string::__init_copy_ctor_external(&v251, *(const std::string::value_type **)(a34 + 40), *(_QWORD *)(a34 + 48));
  else
    v251 = *(std::string *)(a34 + 40);
  if (*(char *)(a35 + 31) < 0)
    std::string::__init_copy_ctor_external(&v243, *(const std::string::value_type **)(a35 + 8), *(_QWORD *)(a35 + 16));
  else
    v243 = *(std::string *)(a35 + 8);
  v82 = *(_DWORD *)(a35 + 32);
  v242 = off_24C335B18;
  v245 = *(_QWORD *)(a35 + 36);
  v83 = *(_DWORD *)(a35 + 44);
  v123 = v82;
  v244 = v82;
  v246 = v83;
  v237 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a36 + 31) < 0)
    std::string::__init_copy_ctor_external(&v238, *(const std::string::value_type **)(a36 + 8), *(_QWORD *)(a36 + 16));
  else
    v238 = *(std::string *)(a36 + 8);
  v239 = *(_DWORD *)(a36 + 32);
  v237 = &off_24C335AB8;
  v240 = *(_BYTE *)(a36 + 36);
  if (*(char *)(a36 + 63) < 0)
    std::string::__init_copy_ctor_external(&v241, *(const std::string::value_type **)(a36 + 40), *(_QWORD *)(a36 + 48));
  else
    v241 = *(std::string *)(a36 + 40);
  v232 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a37 + 31) < 0)
    std::string::__init_copy_ctor_external(&v233, *(const std::string::value_type **)(a37 + 8), *(_QWORD *)(a37 + 16));
  else
    v233 = *(std::string *)(a37 + 8);
  v234 = *(_DWORD *)(a37 + 32);
  v232 = &off_24C335AB8;
  v235 = *(_BYTE *)(a37 + 36);
  if (*(char *)(a37 + 63) < 0)
    std::string::__init_copy_ctor_external(&v236, *(const std::string::value_type **)(a37 + 40), *(_QWORD *)(a37 + 48));
  else
    v236 = *(std::string *)(a37 + 40);
  v228 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a38 + 31) < 0)
    std::string::__init_copy_ctor_external(&v229, *(const std::string::value_type **)(a38 + 8), *(_QWORD *)(a38 + 16));
  else
    v229 = *(std::string *)(a38 + 8);
  v121 = *(_DWORD *)(a38 + 32);
  v230 = v121;
  v228 = off_24C335AF8;
  v120 = *(_QWORD *)(a38 + 36);
  v231 = v120;
  v223 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a39 + 31) < 0)
    std::string::__init_copy_ctor_external(&v224, *(const std::string::value_type **)(a39 + 8), *(_QWORD *)(a39 + 16));
  else
    v224 = *(std::string *)(a39 + 8);
  v84 = *(_DWORD *)(a39 + 32);
  v223 = off_24C335B18;
  v226 = *(_QWORD *)(a39 + 36);
  v85 = *(_DWORD *)(a39 + 44);
  v119 = v84;
  v225 = v84;
  v227 = v85;
  v219 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a40 + 31) < 0)
    std::string::__init_copy_ctor_external(&v220, *(const std::string::value_type **)(a40 + 8), *(_QWORD *)(a40 + 16));
  else
    v220 = *(std::string *)(a40 + 8);
  v118 = *(_DWORD *)(a40 + 32);
  v221 = v118;
  v219 = off_24C335AF8;
  v117 = *(_QWORD *)(a40 + 36);
  v222 = v117;
  v214 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a41 + 31) < 0)
    std::string::__init_copy_ctor_external(&v215, *(const std::string::value_type **)(a41 + 8), *(_QWORD *)(a41 + 16));
  else
    v215 = *(std::string *)(a41 + 8);
  v216 = *(_DWORD *)(a41 + 32);
  v214 = &off_24C335AB8;
  v217 = *(_BYTE *)(a41 + 36);
  if (*(char *)(a41 + 63) < 0)
    std::string::__init_copy_ctor_external(&v218, *(const std::string::value_type **)(a41 + 40), *(_QWORD *)(a41 + 48));
  else
    v218 = *(std::string *)(a41 + 40);
  v210 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a42 + 31) < 0)
    std::string::__init_copy_ctor_external(&v211, *(const std::string::value_type **)(a42 + 8), *(_QWORD *)(a42 + 16));
  else
    v211 = *(std::string *)(a42 + 8);
  v116 = *(_DWORD *)(a42 + 32);
  v212 = v116;
  v210 = off_24C335AF8;
  v115 = *(_QWORD *)(a42 + 36);
  v213 = v115;
  v205 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a43 + 31) < 0)
    std::string::__init_copy_ctor_external(&v206, *(const std::string::value_type **)(a43 + 8), *(_QWORD *)(a43 + 16));
  else
    v206 = *(std::string *)(a43 + 8);
  v86 = *(_DWORD *)(a43 + 32);
  v205 = off_24C335B18;
  v208 = *(_QWORD *)(a43 + 36);
  v87 = *(_DWORD *)(a43 + 44);
  v114 = v86;
  v207 = v86;
  v209 = v87;
  v201 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a44 + 31) < 0)
    std::string::__init_copy_ctor_external(&v202, *(const std::string::value_type **)(a44 + 8), *(_QWORD *)(a44 + 16));
  else
    v202 = *(std::string *)(a44 + 8);
  v113 = *(_DWORD *)(a44 + 32);
  v203 = v113;
  v201 = off_24C335AF8;
  v112 = *(_QWORD *)(a44 + 36);
  v204 = v112;
  v197 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a45 + 31) < 0)
    std::string::__init_copy_ctor_external(&v198, *(const std::string::value_type **)(a45 + 8), *(_QWORD *)(a45 + 16));
  else
    v198 = *(std::string *)(a45 + 8);
  v111 = *(_DWORD *)(a45 + 32);
  v199 = v111;
  v197 = off_24C335AF8;
  v110 = *(_QWORD *)(a45 + 36);
  v200 = v110;
  v193 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a46 + 31) < 0)
    std::string::__init_copy_ctor_external(&v194, *(const std::string::value_type **)(a46 + 8), *(_QWORD *)(a46 + 16));
  else
    v194 = *(std::string *)(a46 + 8);
  v109 = *(_DWORD *)(a46 + 32);
  v195 = v109;
  v193 = off_24C335AF8;
  v108 = *(_QWORD *)(a46 + 36);
  v196 = v108;
  v188 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a47 + 31) < 0)
    std::string::__init_copy_ctor_external(&v189, *(const std::string::value_type **)(a47 + 8), *(_QWORD *)(a47 + 16));
  else
    v189 = *(std::string *)(a47 + 8);
  v190 = *(_DWORD *)(a47 + 32);
  v188 = &off_24C335AB8;
  v191 = *(_BYTE *)(a47 + 36);
  if (*(char *)(a47 + 63) < 0)
    std::string::__init_copy_ctor_external(&v192, *(const std::string::value_type **)(a47 + 40), *(_QWORD *)(a47 + 48));
  else
    v192 = *(std::string *)(a47 + 40);
  v183 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a48 + 31) < 0)
    std::string::__init_copy_ctor_external(&v184, *(const std::string::value_type **)(a48 + 8), *(_QWORD *)(a48 + 16));
  else
    v184 = *(std::string *)(a48 + 8);
  v185 = *(_DWORD *)(a48 + 32);
  v183 = &off_24C335AB8;
  v186 = *(_BYTE *)(a48 + 36);
  if (*(char *)(a48 + 63) < 0)
    std::string::__init_copy_ctor_external(&v187, *(const std::string::value_type **)(a48 + 40), *(_QWORD *)(a48 + 48));
  else
    v187 = *(std::string *)(a48 + 40);
  v178 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a49 + 31) < 0)
    std::string::__init_copy_ctor_external(&v179, *(const std::string::value_type **)(a49 + 8), *(_QWORD *)(a49 + 16));
  else
    v179 = *(std::string *)(a49 + 8);
  v88 = *(_DWORD *)(a49 + 32);
  v178 = off_24C335B18;
  v181 = *(_QWORD *)(a49 + 36);
  v89 = *(_DWORD *)(a49 + 44);
  v107 = v88;
  v180 = v88;
  v182 = v89;
  v174 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a50 + 31) < 0)
    std::string::__init_copy_ctor_external(&v175, *(const std::string::value_type **)(a50 + 8), *(_QWORD *)(a50 + 16));
  else
    v175 = *(std::string *)(a50 + 8);
  v106 = *(_DWORD *)(a50 + 32);
  v176 = v106;
  v174 = off_24C335AF8;
  v105 = *(_QWORD *)(a50 + 36);
  v177 = v105;
  if (*(char *)(a51 + 31) < 0)
    std::string::__init_copy_ctor_external(&v171, *(const std::string::value_type **)(a51 + 8), *(_QWORD *)(a51 + 16));
  else
    v171 = *(std::string *)(a51 + 8);
  v104 = *(_DWORD *)(a51 + 32);
  v172 = v104;
  v90 = *(_QWORD *)(a51 + 36);
  v173 = v90;
  v600 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v601, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
  else
    v601 = __s;
  v602 = v168;
  v600 = off_24C335AF8;
  v603 = v166;
  v596 = (uint64_t (**)())off_24C335D90;
  v103 = v90;
  if (SHIBYTE(v378.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v597, v378.__r_.__value_.__l.__data_, v378.__r_.__value_.__l.__size_);
  else
    v597 = v378;
  v598 = v164;
  v596 = off_24C335AF8;
  v599 = v162;
  v592 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v374.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v593, v374.__r_.__value_.__l.__data_, v374.__r_.__value_.__l.__size_);
  else
    v593 = v374;
  v594 = v160;
  v592 = off_24C335AF8;
  v595 = v158;
  v587 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v369.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v588, v369.__r_.__value_.__l.__data_, v369.__r_.__value_.__l.__size_);
  else
    v588 = v369;
  v587 = off_24C335B18;
  v590 = v371;
  v589 = v156;
  v591 = v372;
  v582 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v364.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v583, v364.__r_.__value_.__l.__data_, v364.__r_.__value_.__l.__size_);
  else
    v583 = v364;
  v582 = off_24C335B18;
  v585 = v366;
  v584 = v153;
  v586 = v367;
  v578 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v360.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v579, v360.__r_.__value_.__l.__data_, v360.__r_.__value_.__l.__size_);
  else
    v579 = v360;
  v580 = v152;
  v578 = off_24C335AF8;
  v581 = v70;
  v573 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v355.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v574, v355.__r_.__value_.__l.__data_, v355.__r_.__value_.__l.__size_);
  else
    v574 = v355;
  v575 = v356;
  v573 = &off_24C335AB8;
  v576 = v357;
  if (SHIBYTE(v358.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v577, v358.__r_.__value_.__l.__data_, v358.__r_.__value_.__l.__size_);
  else
    v577 = v358;
  v568 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v350.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v569, v350.__r_.__value_.__l.__data_, v350.__r_.__value_.__l.__size_);
  else
    v569 = v350;
  v570 = v351;
  v568 = &off_24C335AB8;
  v571 = v352;
  if (SHIBYTE(v353.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v572, v353.__r_.__value_.__l.__data_, v353.__r_.__value_.__l.__size_);
  else
    v572 = v353;
  v564 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v346.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v565, v346.__r_.__value_.__l.__data_, v346.__r_.__value_.__l.__size_);
  else
    v565 = v346;
  v566 = v151;
  v564 = off_24C335AF8;
  v567 = v150;
  v560 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v342.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v561, v342.__r_.__value_.__l.__data_, v342.__r_.__value_.__l.__size_);
  else
    v561 = v342;
  v562 = v149;
  v560 = off_24C335AF8;
  v563 = v148;
  v556 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v338.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v557, v338.__r_.__value_.__l.__data_, v338.__r_.__value_.__l.__size_);
  else
    v557 = v338;
  v558 = v147;
  v556 = off_24C335AF8;
  v559 = v146;
  v552 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v334.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v553, v334.__r_.__value_.__l.__data_, v334.__r_.__value_.__l.__size_);
  else
    v553 = v334;
  v554 = v143;
  v552 = off_24C335AF8;
  v555 = v145;
  v547 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v329.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v548, v329.__r_.__value_.__l.__data_, v329.__r_.__value_.__l.__size_);
  else
    v548 = v329;
  v547 = off_24C335B18;
  v550 = v331;
  v549 = v144;
  v551 = v332;
  v542 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v324.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v543, v324.__r_.__value_.__l.__data_, v324.__r_.__value_.__l.__size_);
  else
    v543 = v324;
  v544 = v325;
  v542 = &off_24C335AB8;
  v545 = v326;
  if (SHIBYTE(v327.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v546, v327.__r_.__value_.__l.__data_, v327.__r_.__value_.__l.__size_);
  else
    v546 = v327;
  v537 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v319.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v538, v319.__r_.__value_.__l.__data_, v319.__r_.__value_.__l.__size_);
  else
    v538 = v319;
  v539 = v320;
  v537 = &off_24C335AB8;
  v540 = v321;
  if (SHIBYTE(v322.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v541, v322.__r_.__value_.__l.__data_, v322.__r_.__value_.__l.__size_);
  else
    v541 = v322;
  v532 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v314.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v533, v314.__r_.__value_.__l.__data_, v314.__r_.__value_.__l.__size_);
  else
    v533 = v314;
  v532 = off_24C335B18;
  v535 = v316;
  v534 = v142;
  v536 = v317;
  v527 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v309.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v528, v309.__r_.__value_.__l.__data_, v309.__r_.__value_.__l.__size_);
  else
    v528 = v309;
  v527 = off_24C335B18;
  v530 = v311;
  v529 = v141;
  v531 = v312;
  v523 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v305.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v524, v305.__r_.__value_.__l.__data_, v305.__r_.__value_.__l.__size_);
  else
    v524 = v305;
  v525 = v140;
  v523 = off_24C335AF8;
  v526 = v139;
  v519 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v301.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v520, v301.__r_.__value_.__l.__data_, v301.__r_.__value_.__l.__size_);
  else
    v520 = v301;
  v521 = v138;
  v519 = off_24C335AF8;
  v522 = v137;
  v515 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v297.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v516, v297.__r_.__value_.__l.__data_, v297.__r_.__value_.__l.__size_);
  else
    v516 = v297;
  v517 = v136;
  v515 = off_24C335AF8;
  v518 = v135;
  v511 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v293.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v512, v293.__r_.__value_.__l.__data_, v293.__r_.__value_.__l.__size_);
  else
    v512 = v293;
  v513 = v134;
  v511 = off_24C335AF8;
  v514 = v133;
  v507 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v289.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v508, v289.__r_.__value_.__l.__data_, v289.__r_.__value_.__l.__size_);
  else
    v508 = v289;
  v509 = v132;
  v507 = off_24C335AF8;
  v510 = v78;
  v503 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v285.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v504, v285.__r_.__value_.__l.__data_, v285.__r_.__value_.__l.__size_);
  else
    v504 = v285;
  v505 = v131;
  v503 = off_24C335AF8;
  v506 = v130;
  v499 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v281.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v500, v281.__r_.__value_.__l.__data_, v281.__r_.__value_.__l.__size_);
  else
    v500 = v281;
  v501 = v129;
  v499 = off_24C335AF8;
  v502 = v128;
  v494 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v276.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v495, v276.__r_.__value_.__l.__data_, v276.__r_.__value_.__l.__size_);
  else
    v495 = v276;
  v496 = v277;
  v494 = &off_24C335AB8;
  v497 = v278;
  if (SHIBYTE(v279.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v498, v279.__r_.__value_.__l.__data_, v279.__r_.__value_.__l.__size_);
  else
    v498 = v279;
  v489 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v271.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v490, v271.__r_.__value_.__l.__data_, v271.__r_.__value_.__l.__size_);
  else
    v490 = v271;
  v491 = v272;
  v489 = &off_24C335AB8;
  v492 = v273;
  if (SHIBYTE(v274.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v493, v274.__r_.__value_.__l.__data_, v274.__r_.__value_.__l.__size_);
  else
    v493 = v274;
  v484 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v266.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v485, v266.__r_.__value_.__l.__data_, v266.__r_.__value_.__l.__size_);
  else
    v485 = v266;
  v486 = v267;
  v484 = &off_24C335AB8;
  v487 = v268;
  if (SHIBYTE(v269.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v488, v269.__r_.__value_.__l.__data_, v269.__r_.__value_.__l.__size_);
  else
    v488 = v269;
  v480 = (uint64_t (**)())off_24C335D90;
  v91 = SHIBYTE(v262.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v262.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v481, v262.__r_.__value_.__l.__data_, v262.__r_.__value_.__l.__size_);
  else
    v481 = v262;
  v482 = v79;
  v480 = off_24C335AF8;
  v483 = v127;
  v475 = (uint64_t (**)())off_24C335D90;
  v169 = SHIBYTE(v257.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v257.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v476, v257.__r_.__value_.__l.__data_, v257.__r_.__value_.__l.__size_);
  else
    v476 = v257;
  v475 = off_24C335B18;
  v478 = v259;
  v477 = v126;
  v479 = v260;
  v471 = (uint64_t (**)())off_24C335D90;
  v167 = SHIBYTE(v253.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v253.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v472, v253.__r_.__value_.__l.__data_, v253.__r_.__value_.__l.__size_);
  else
    v472 = v253;
  v473 = v125;
  v471 = off_24C335AF8;
  v474 = v124;
  v466 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v248.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v467, v248.__r_.__value_.__l.__data_, v248.__r_.__value_.__l.__size_);
  else
    v467 = v248;
  v468 = v249;
  v466 = &off_24C335AB8;
  v469 = v250;
  if (SHIBYTE(v251.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v470, v251.__r_.__value_.__l.__data_, v251.__r_.__value_.__l.__size_);
  else
    v470 = v251;
  v461 = (uint64_t (**)())off_24C335D90;
  v165 = SHIBYTE(v243.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v243.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v462, v243.__r_.__value_.__l.__data_, v243.__r_.__value_.__l.__size_);
  else
    v462 = v243;
  v461 = off_24C335B18;
  v464 = v245;
  v463 = v123;
  v465 = v246;
  v456 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v238.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v457, v238.__r_.__value_.__l.__data_, v238.__r_.__value_.__l.__size_);
  else
    v457 = v238;
  v458 = v239;
  v456 = &off_24C335AB8;
  v459 = v240;
  if (SHIBYTE(v241.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v460, v241.__r_.__value_.__l.__data_, v241.__r_.__value_.__l.__size_);
  else
    v460 = v241;
  v451 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v233.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v452, v233.__r_.__value_.__l.__data_, v233.__r_.__value_.__l.__size_);
  else
    v452 = v233;
  v453 = v234;
  v451 = &off_24C335AB8;
  v454 = v235;
  if (SHIBYTE(v236.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v455, v236.__r_.__value_.__l.__data_, v236.__r_.__value_.__l.__size_);
  else
    v455 = v236;
  v447 = (uint64_t (**)())off_24C335D90;
  v163 = SHIBYTE(v229.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v229.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v448, v229.__r_.__value_.__l.__data_, v229.__r_.__value_.__l.__size_);
  else
    v448 = v229;
  v449 = v121;
  v447 = off_24C335AF8;
  v450 = v120;
  v442 = (uint64_t (**)())off_24C335D90;
  v161 = SHIBYTE(v224.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v224.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v443, v224.__r_.__value_.__l.__data_, v224.__r_.__value_.__l.__size_);
  else
    v443 = v224;
  v442 = off_24C335B18;
  v445 = v226;
  v444 = v119;
  v446 = v227;
  v438 = (uint64_t (**)())off_24C335D90;
  v159 = SHIBYTE(v220.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v220.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v439, v220.__r_.__value_.__l.__data_, v220.__r_.__value_.__l.__size_);
  else
    v439 = v220;
  v440 = v118;
  v438 = off_24C335AF8;
  v441 = v117;
  v433 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v215.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v434, v215.__r_.__value_.__l.__data_, v215.__r_.__value_.__l.__size_);
  else
    v434 = v215;
  v435 = v216;
  v433 = &off_24C335AB8;
  v436 = v217;
  if (SHIBYTE(v218.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v437, v218.__r_.__value_.__l.__data_, v218.__r_.__value_.__l.__size_);
  else
    v437 = v218;
  v429 = (uint64_t (**)())off_24C335D90;
  v157 = SHIBYTE(v211.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v211.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v430, v211.__r_.__value_.__l.__data_, v211.__r_.__value_.__l.__size_);
  else
    v430 = v211;
  v431 = v116;
  v429 = off_24C335AF8;
  v432 = v115;
  v424 = (uint64_t (**)())off_24C335D90;
  v92 = SHIBYTE(v206.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v206.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v425, v206.__r_.__value_.__l.__data_, v206.__r_.__value_.__l.__size_);
  else
    v425 = v206;
  v424 = off_24C335B18;
  v427 = v208;
  v426 = v114;
  v428 = v209;
  v420 = (uint64_t (**)())off_24C335D90;
  v154 = SHIBYTE(v202.__r_.__value_.__r.__words[2]);
  v155 = v92;
  if (SHIBYTE(v202.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v421, v202.__r_.__value_.__l.__data_, v202.__r_.__value_.__l.__size_);
  else
    v421 = v202;
  v422 = v113;
  v420 = off_24C335AF8;
  v423 = v112;
  v416 = (uint64_t (**)())off_24C335D90;
  v93 = SHIBYTE(v198.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v198.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v417, v198.__r_.__value_.__l.__data_, v198.__r_.__value_.__l.__size_);
  else
    v417 = v198;
  v418 = v111;
  v416 = off_24C335AF8;
  v419 = v110;
  v412 = (uint64_t (**)())off_24C335D90;
  v94 = SHIBYTE(v194.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v194.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v413, v194.__r_.__value_.__l.__data_, v194.__r_.__value_.__l.__size_);
  else
    v413 = v194;
  v414 = v109;
  v412 = off_24C335AF8;
  v415 = v108;
  v407 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v189.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v408, v189.__r_.__value_.__l.__data_, v189.__r_.__value_.__l.__size_);
  else
    v408 = v189;
  v409 = v190;
  v407 = &off_24C335AB8;
  v410 = v191;
  if (SHIBYTE(v192.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v411, v192.__r_.__value_.__l.__data_, v192.__r_.__value_.__l.__size_);
  else
    v411 = v192;
  v402 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v184.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v403, v184.__r_.__value_.__l.__data_, v184.__r_.__value_.__l.__size_);
  else
    v403 = v184;
  v404 = v185;
  v402 = &off_24C335AB8;
  v405 = v186;
  if (SHIBYTE(v187.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v406, v187.__r_.__value_.__l.__data_, v187.__r_.__value_.__l.__size_);
  else
    v406 = v187;
  v397 = (uint64_t (**)())off_24C335D90;
  v95 = SHIBYTE(v179.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v179.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v398, v179.__r_.__value_.__l.__data_, v179.__r_.__value_.__l.__size_);
  else
    v398 = v179;
  v397 = off_24C335B18;
  v400 = v181;
  v399 = v107;
  v401 = v182;
  v393 = (uint64_t (**)())off_24C335D90;
  v96 = SHIBYTE(v175.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v175.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v394, v175.__r_.__value_.__l.__data_, v175.__r_.__value_.__l.__size_);
  else
    v394 = v175;
  v395 = v106;
  v393 = off_24C335AF8;
  v396 = v105;
  v389 = (uint64_t (**)())off_24C335D90;
  v97 = SHIBYTE(v171.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v171.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&__p, v171.__r_.__value_.__l.__data_, v171.__r_.__value_.__l.__size_);
  else
    __p = v171;
  v391 = v104;
  v389 = off_24C335AF8;
  v392 = v103;
  mediaplatform::DatabaseColumnTuple<39ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::DatabaseColumnTuple(v170, (uint64_t)&v600, (uint64_t)&v596, (uint64_t)&v592, (uint64_t)&v587, (uint64_t)&v582, (uint64_t)&v578, (uint64_t)&v573, (uint64_t)&v568, (uint64_t)&v564, (uint64_t)&v560, (uint64_t)&v556, (uint64_t)&v552, (uint64_t)&v547, (uint64_t)&v542, (uint64_t)&v537, (uint64_t)&v532, (uint64_t)&v527, (uint64_t)&v523,
    (uint64_t)&v519,
    (uint64_t)&v515,
    (uint64_t)&v511,
    (uint64_t)&v507,
    (uint64_t)&v503,
    (uint64_t)&v499,
    (uint64_t)&v494,
    (uint64_t)&v489,
    (uint64_t)&v484,
    (uint64_t)&v480,
    (uint64_t)&v475,
    (uint64_t)&v471,
    (uint64_t)&v466,
    (uint64_t)&v461,
    (uint64_t)&v456,
    (uint64_t)&v451,
    (uint64_t)&v447,
    (uint64_t)&v442,
    (uint64_t)&v438,
    (uint64_t)&v433,
    (uint64_t)&v429,
    (uint64_t)&v424,
    (uint64_t)&v420,
    (uint64_t)&v416,
    (uint64_t)&v412,
    (uint64_t)&v407,
    (uint64_t)&v402,
    (uint64_t)&v397,
    (uint64_t)&v393,
    (uint64_t)&v389);
  v389 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v393 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v394.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v394.__r_.__value_.__l.__data_);
  v397 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v398.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v398.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v402);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v407);
  v412 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v413.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v413.__r_.__value_.__l.__data_);
  v416 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v417.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v417.__r_.__value_.__l.__data_);
  v420 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v421.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v421.__r_.__value_.__l.__data_);
  v424 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v425.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v425.__r_.__value_.__l.__data_);
  v429 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v430.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v430.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v433);
  v438 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v439.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v439.__r_.__value_.__l.__data_);
  v442 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v443.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v443.__r_.__value_.__l.__data_);
  v447 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v448.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v448.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v451);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v456);
  v461 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v462.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v462.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v466);
  v471 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v472.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v472.__r_.__value_.__l.__data_);
  v475 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v476.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v476.__r_.__value_.__l.__data_);
  v480 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v481.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v481.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v484);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v489);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v494);
  v499 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v500.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v500.__r_.__value_.__l.__data_);
  v503 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v504.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v504.__r_.__value_.__l.__data_);
  v507 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v508.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v508.__r_.__value_.__l.__data_);
  v511 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v512.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v512.__r_.__value_.__l.__data_);
  v515 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v516.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v516.__r_.__value_.__l.__data_);
  v519 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v520.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v520.__r_.__value_.__l.__data_);
  v523 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v524.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v524.__r_.__value_.__l.__data_);
  v527 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v528.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v528.__r_.__value_.__l.__data_);
  v532 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v533.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v533.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v537);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v542);
  v547 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v548.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v548.__r_.__value_.__l.__data_);
  v552 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v553.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v553.__r_.__value_.__l.__data_);
  v556 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v557.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v557.__r_.__value_.__l.__data_);
  v560 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v561.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v561.__r_.__value_.__l.__data_);
  v564 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v565.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v565.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v568);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v573);
  v578 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v579.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v579.__r_.__value_.__l.__data_);
  v582 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v583.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v583.__r_.__value_.__l.__data_);
  v587 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v588.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v588.__r_.__value_.__l.__data_);
  v592 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v593.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v593.__r_.__value_.__l.__data_);
  v596 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v597.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v597.__r_.__value_.__l.__data_);
  v600 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v601.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v601.__r_.__value_.__l.__data_);
  *(_QWORD *)(v170 + 2512) = off_24C335D90;
  v98 = (std::string *)(v170 + 2520);
  v99 = SHIBYTE(v386.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v386.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v98, v386.__r_.__value_.__l.__data_, v386.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v98->__r_.__value_.__l.__data_ = *(_OWORD *)&v386.__r_.__value_.__l.__data_;
    *(_QWORD *)(v170 + 2536) = *((_QWORD *)&v386.__r_.__value_.__l + 2);
  }
  *(_DWORD *)(v170 + 2544) = v387;
  *(_QWORD *)(v170 + 2512) = off_24C335AF8;
  *(_QWORD *)(v170 + 2548) = v388;
  if (v97 < 0)
    operator delete(v171.__r_.__value_.__l.__data_);
  v174 = (uint64_t (**)())off_24C335D90;
  if (v96 < 0)
    operator delete(v175.__r_.__value_.__l.__data_);
  v178 = (uint64_t (**)())off_24C335D90;
  if (v95 < 0)
    operator delete(v179.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v183);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v188);
  v193 = (uint64_t (**)())off_24C335D90;
  if (v94 < 0)
    operator delete(v194.__r_.__value_.__l.__data_);
  v197 = (uint64_t (**)())off_24C335D90;
  if (v93 < 0)
    operator delete(v198.__r_.__value_.__l.__data_);
  v201 = (uint64_t (**)())off_24C335D90;
  if (v154 < 0)
    operator delete(v202.__r_.__value_.__l.__data_);
  v205 = (uint64_t (**)())off_24C335D90;
  if (v155 < 0)
    operator delete(v206.__r_.__value_.__l.__data_);
  v210 = (uint64_t (**)())off_24C335D90;
  if (v157 < 0)
    operator delete(v211.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v214);
  v219 = (uint64_t (**)())off_24C335D90;
  if (v159 < 0)
    operator delete(v220.__r_.__value_.__l.__data_);
  v223 = (uint64_t (**)())off_24C335D90;
  if (v161 < 0)
    operator delete(v224.__r_.__value_.__l.__data_);
  v228 = (uint64_t (**)())off_24C335D90;
  if (v163 < 0)
    operator delete(v229.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v232);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v237);
  v242 = (uint64_t (**)())off_24C335D90;
  if (v165 < 0)
    operator delete(v243.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v247);
  v252 = (uint64_t (**)())off_24C335D90;
  if (v167 < 0)
    operator delete(v253.__r_.__value_.__l.__data_);
  v256 = (uint64_t (**)())off_24C335D90;
  if (v169 < 0)
    operator delete(v257.__r_.__value_.__l.__data_);
  v261 = (uint64_t (**)())off_24C335D90;
  if (v91 < 0)
    operator delete(v262.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v265);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v270);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v275);
  if (SHIBYTE(v281.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v281.__r_.__value_.__l.__data_);
  if (SHIBYTE(v285.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v285.__r_.__value_.__l.__data_);
  if (SHIBYTE(v289.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v289.__r_.__value_.__l.__data_);
  if (SHIBYTE(v293.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v293.__r_.__value_.__l.__data_);
  if (SHIBYTE(v297.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v297.__r_.__value_.__l.__data_);
  if (SHIBYTE(v301.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v301.__r_.__value_.__l.__data_);
  if (SHIBYTE(v305.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v305.__r_.__value_.__l.__data_);
  if (SHIBYTE(v309.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v309.__r_.__value_.__l.__data_);
  if (SHIBYTE(v314.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v314.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v318);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v323);
  if (SHIBYTE(v329.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v329.__r_.__value_.__l.__data_);
  if (SHIBYTE(v334.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v334.__r_.__value_.__l.__data_);
  if (SHIBYTE(v338.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v338.__r_.__value_.__l.__data_);
  if (SHIBYTE(v342.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v342.__r_.__value_.__l.__data_);
  if (SHIBYTE(v346.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v346.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v349);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v354);
  if (SHIBYTE(v360.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v360.__r_.__value_.__l.__data_);
  if (SHIBYTE(v364.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v364.__r_.__value_.__l.__data_);
  if (SHIBYTE(v369.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v369.__r_.__value_.__l.__data_);
  if (SHIBYTE(v374.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v374.__r_.__value_.__l.__data_);
  if (SHIBYTE(v378.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v378.__r_.__value_.__l.__data_);
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__s.__r_.__value_.__l.__data_);
    if ((v99 & 0x80000000) == 0)
      goto LABEL_513;
  }
  else if ((v99 & 0x80000000) == 0)
  {
    goto LABEL_513;
  }
  operator delete(v386.__r_.__value_.__l.__data_);
LABEL_513:
  *(_QWORD *)(v170 + 2560) = off_24C335D90;
  v100 = (std::string *)(v170 + 2568);
  if (*(char *)(v122 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v100, *(const std::string::value_type **)(v122 + 8), *(_QWORD *)(v122 + 16));
  }
  else
  {
    v101 = *(_OWORD *)(v122 + 8);
    *(_QWORD *)(v170 + 2584) = *(_QWORD *)(v122 + 24);
    *(_OWORD *)&v100->__r_.__value_.__l.__data_ = v101;
  }
  result = v170;
  *(_DWORD *)(v170 + 2592) = *(_DWORD *)(v122 + 32);
  *(_QWORD *)(v170 + 2560) = off_24C335AF8;
  *(_QWORD *)(v170 + 2596) = *(_QWORD *)(v122 + 36);
  return result;
}

void sub_20A7CED44(_Unwind_Exception *a1)
{
  mediaplatform::DatabaseColumnTuple<38ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(STACK[0x4F0]);
  _Unwind_Resume(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<37ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(uint64_t a1)
{
  *(_QWORD *)(a1 + 2560) = off_24C335D90;
  if (*(char *)(a1 + 2591) < 0)
    operator delete(*(void **)(a1 + 2568));
  *(_QWORD *)(a1 + 2512) = off_24C335D90;
  if (*(char *)(a1 + 2543) < 0)
    operator delete(*(void **)(a1 + 2520));
  *(_QWORD *)(a1 + 2464) = off_24C335D90;
  if (*(char *)(a1 + 2495) < 0)
    operator delete(*(void **)(a1 + 2472));
  return mediaplatform::DatabaseColumnTuple<40ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<38ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(uint64_t a1)
{
  *(_QWORD *)(a1 + 2512) = off_24C335D90;
  if (*(char *)(a1 + 2543) < 0)
    operator delete(*(void **)(a1 + 2520));
  *(_QWORD *)(a1 + 2464) = off_24C335D90;
  if (*(char *)(a1 + 2495) < 0)
    operator delete(*(void **)(a1 + 2472));
  return mediaplatform::DatabaseColumnTuple<40ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<39ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::DatabaseColumnTuple(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49)
{
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  int v63;
  int v64;
  int v65;
  int v66;
  int v67;
  uint64_t v68;
  int v69;
  int v70;
  int v71;
  int v72;
  int v73;
  int v74;
  int v75;
  int v76;
  int v77;
  int v78;
  int v79;
  int v80;
  uint64_t v81;
  int v82;
  int v83;
  uint64_t v84;
  int v85;
  int v86;
  uint64_t v87;
  int v88;
  int v89;
  int v90;
  int v91;
  int v92;
  int v93;
  int v94;
  int v95;
  int v96;
  std::string *v97;
  int v98;
  std::string *v99;
  __int128 v100;
  uint64_t v102;
  uint64_t v103;
  int v104;
  int v105;
  int v106;
  uint64_t v107;
  int v108;
  uint64_t v109;
  int v110;
  int v111;
  uint64_t v112;
  int v113;
  int v114;
  int v115;
  uint64_t v116;
  int v117;
  int v118;
  uint64_t v119;
  int v120;
  int v121;
  uint64_t v122;
  int v123;
  uint64_t v124;
  uint64_t v125;
  int v126;
  uint64_t v127;
  int v128;
  uint64_t v129;
  int v130;
  uint64_t v131;
  int v132;
  uint64_t v133;
  int v134;
  uint64_t v135;
  int v136;
  uint64_t v137;
  int v138;
  int v139;
  int v140;
  int v141;
  uint64_t v142;
  int v143;
  uint64_t v144;
  int v145;
  int v146;
  uint64_t v147;
  int v148;
  int v149;
  int v150;
  int v151;
  uint64_t v152;
  int v153;
  int v154;
  int v155;
  int v156;
  int v157;
  int v158;
  int v159;
  uint64_t v160;
  int v161;
  int v162;
  int v163;
  uint64_t v164;
  int v165;
  std::string v166;
  int v167;
  uint64_t v168;
  uint64_t (**v169)();
  std::string v170;
  int v171;
  uint64_t v172;
  uint64_t (**v173)();
  std::string v174;
  int v175;
  uint64_t v176;
  int v177;
  uint64_t (**v178)();
  std::string v179;
  int v180;
  char v181;
  std::string v182;
  uint64_t (**v183)();
  std::string v184;
  int v185;
  char v186;
  std::string v187;
  uint64_t (**v188)();
  std::string v189;
  int v190;
  uint64_t v191;
  uint64_t (**v192)();
  std::string v193;
  int v194;
  uint64_t v195;
  uint64_t (**v196)();
  std::string v197;
  int v198;
  uint64_t v199;
  uint64_t (**v200)();
  std::string v201;
  int v202;
  uint64_t v203;
  int v204;
  uint64_t (**v205)();
  std::string v206;
  int v207;
  uint64_t v208;
  uint64_t (**v209)();
  std::string v210;
  int v211;
  char v212;
  std::string v213;
  uint64_t (**v214)();
  std::string v215;
  int v216;
  uint64_t v217;
  uint64_t (**v218)();
  std::string v219;
  int v220;
  uint64_t v221;
  int v222;
  uint64_t (**v223)();
  std::string v224;
  int v225;
  uint64_t v226;
  uint64_t (**v227)();
  std::string v228;
  int v229;
  char v230;
  std::string v231;
  uint64_t (**v232)();
  std::string v233;
  int v234;
  char v235;
  std::string v236;
  uint64_t (**v237)();
  std::string v238;
  int v239;
  uint64_t v240;
  int v241;
  uint64_t (**v242)();
  std::string v243;
  int v244;
  char v245;
  std::string v246;
  uint64_t (**v247)();
  std::string v248;
  int v249;
  uint64_t v250;
  uint64_t (**v251)();
  std::string v252;
  int v253;
  uint64_t v254;
  int v255;
  uint64_t (**v256)();
  std::string v257;
  int v258;
  uint64_t v259;
  uint64_t (**v260)();
  std::string v261;
  int v262;
  char v263;
  std::string v264;
  uint64_t (**v265)();
  std::string v266;
  int v267;
  char v268;
  std::string v269;
  uint64_t (**v270)();
  std::string v271;
  int v272;
  char v273;
  std::string v274;
  uint64_t (**v275)();
  std::string v276;
  int v277;
  uint64_t v278;
  uint64_t (**v279)();
  std::string v280;
  int v281;
  uint64_t v282;
  uint64_t (**v283)();
  std::string v284;
  int v285;
  uint64_t v286;
  uint64_t (**v287)();
  std::string v288;
  int v289;
  uint64_t v290;
  uint64_t (**v291)();
  std::string v292;
  int v293;
  uint64_t v294;
  uint64_t (**v295)();
  std::string v296;
  int v297;
  uint64_t v298;
  uint64_t (**v299)();
  std::string v300;
  int v301;
  uint64_t v302;
  uint64_t (**v303)();
  std::string v304;
  int v305;
  uint64_t v306;
  int v307;
  uint64_t (**v308)();
  std::string v309;
  int v310;
  uint64_t v311;
  int v312;
  uint64_t (**v313)();
  std::string v314;
  int v315;
  char v316;
  std::string v317;
  uint64_t (**v318)();
  std::string v319;
  int v320;
  char v321;
  std::string v322;
  uint64_t (**v323)();
  std::string v324;
  int v325;
  uint64_t v326;
  int v327;
  uint64_t (**v328)();
  std::string v329;
  int v330;
  uint64_t v331;
  uint64_t (**v332)();
  std::string v333;
  int v334;
  uint64_t v335;
  uint64_t (**v336)();
  std::string v337;
  int v338;
  uint64_t v339;
  uint64_t (**v340)();
  std::string v341;
  int v342;
  uint64_t v343;
  uint64_t (**v344)();
  std::string v345;
  int v346;
  char v347;
  std::string v348;
  uint64_t (**v349)();
  std::string v350;
  int v351;
  char v352;
  std::string v353;
  uint64_t (**v354)();
  std::string v355;
  int v356;
  uint64_t v357;
  uint64_t (**v358)();
  std::string v359;
  int v360;
  uint64_t v361;
  int v362;
  uint64_t (**v363)();
  std::string v364;
  int v365;
  uint64_t v366;
  int v367;
  uint64_t (**v368)();
  std::string __s;
  int v370;
  uint64_t v371;
  uint64_t (**v372)();
  std::string v373;
  int v374;
  uint64_t v375;
  uint64_t (**v376)();
  std::string __p;
  int v378;
  uint64_t v379;
  uint64_t (**v380)();
  std::string v381;
  int v382;
  uint64_t v383;
  uint64_t (**v384)();
  std::string v385;
  int v386;
  uint64_t v387;
  int v388;
  uint64_t (**v389)();
  std::string v390;
  int v391;
  char v392;
  std::string v393;
  uint64_t (**v394)();
  std::string v395;
  int v396;
  char v397;
  std::string v398;
  uint64_t (**v399)();
  std::string v400;
  int v401;
  uint64_t v402;
  uint64_t (**v403)();
  std::string v404;
  int v405;
  uint64_t v406;
  uint64_t (**v407)();
  std::string v408;
  int v409;
  uint64_t v410;
  uint64_t (**v411)();
  std::string v412;
  int v413;
  uint64_t v414;
  int v415;
  uint64_t (**v416)();
  std::string v417;
  int v418;
  uint64_t v419;
  uint64_t (**v420)();
  std::string v421;
  int v422;
  char v423;
  std::string v424;
  uint64_t (**v425)();
  std::string v426;
  int v427;
  uint64_t v428;
  uint64_t (**v429)();
  std::string v430;
  int v431;
  uint64_t v432;
  int v433;
  uint64_t (**v434)();
  std::string v435;
  int v436;
  uint64_t v437;
  uint64_t (**v438)();
  std::string v439;
  int v440;
  char v441;
  std::string v442;
  uint64_t (**v443)();
  std::string v444;
  int v445;
  char v446;
  std::string v447;
  uint64_t (**v448)();
  std::string v449;
  int v450;
  uint64_t v451;
  int v452;
  uint64_t (**v453)();
  std::string v454;
  int v455;
  char v456;
  std::string v457;
  uint64_t (**v458)();
  std::string v459;
  int v460;
  uint64_t v461;
  uint64_t (**v462)();
  std::string v463;
  int v464;
  uint64_t v465;
  int v466;
  uint64_t (**v467)();
  std::string v468;
  int v469;
  uint64_t v470;
  uint64_t (**v471)();
  std::string v472;
  int v473;
  char v474;
  std::string v475;
  uint64_t (**v476)();
  std::string v477;
  int v478;
  char v479;
  std::string v480;
  uint64_t (**v481)();
  std::string v482;
  int v483;
  char v484;
  std::string v485;
  uint64_t (**v486)();
  std::string v487;
  int v488;
  uint64_t v489;
  uint64_t (**v490)();
  std::string v491;
  int v492;
  uint64_t v493;
  uint64_t (**v494)();
  std::string v495;
  int v496;
  uint64_t v497;
  uint64_t (**v498)();
  std::string v499;
  int v500;
  uint64_t v501;
  uint64_t (**v502)();
  std::string v503;
  int v504;
  uint64_t v505;
  uint64_t (**v506)();
  std::string v507;
  int v508;
  uint64_t v509;
  uint64_t (**v510)();
  std::string v511;
  int v512;
  uint64_t v513;
  uint64_t (**v514)();
  std::string v515;
  int v516;
  uint64_t v517;
  int v518;
  uint64_t (**v519)();
  std::string v520;
  int v521;
  uint64_t v522;
  int v523;
  uint64_t (**v524)();
  std::string v525;
  int v526;
  char v527;
  std::string v528;
  uint64_t (**v529)();
  std::string v530;
  int v531;
  char v532;
  std::string v533;
  uint64_t (**v534)();
  std::string v535;
  int v536;
  uint64_t v537;
  int v538;
  uint64_t (**v539)();
  std::string v540;
  int v541;
  uint64_t v542;
  uint64_t (**v543)();
  std::string v544;
  int v545;
  uint64_t v546;
  uint64_t (**v547)();
  std::string v548;
  int v549;
  uint64_t v550;
  uint64_t (**v551)();
  std::string v552;
  int v553;
  uint64_t v554;
  uint64_t (**v555)();
  std::string v556;
  int v557;
  char v558;
  std::string v559;
  uint64_t (**v560)();
  std::string v561;
  int v562;
  char v563;
  std::string v564;
  uint64_t (**v565)();
  std::string v566;
  int v567;
  uint64_t v568;
  uint64_t (**v569)();
  std::string v570;
  int v571;
  uint64_t v572;
  int v573;
  uint64_t (**v574)();
  std::string v575;
  int v576;
  uint64_t v577;
  int v578;
  uint64_t (**v579)();
  std::string v580;
  int v581;
  uint64_t v582;

  v49 = MEMORY[0x24BDAC7A8](a1);
  v52 = v51;
  v54 = v53;
  v56 = v55;
  v58 = v57;
  v60 = v59;
  v61 = v50;
  v124 = v62;
  v164 = v49;
  if (*(char *)(v50 + 31) < 0)
    std::string::__init_copy_ctor_external(&v373, *(const std::string::value_type **)(v50 + 8), *(_QWORD *)(v50 + 16));
  else
    v373 = *(std::string *)(v50 + 8);
  v374 = *(_DWORD *)(v61 + 32);
  v372 = off_24C335AF8;
  v375 = *(_QWORD *)(v61 + 36);
  if (*(char *)(v60 + 31) < 0)
    std::string::__init_copy_ctor_external(&__s, *(const std::string::value_type **)(v60 + 8), *(_QWORD *)(v60 + 16));
  else
    __s = *(std::string *)(v60 + 8);
  v162 = *(_DWORD *)(v60 + 32);
  v370 = v162;
  v368 = off_24C335AF8;
  v160 = *(_QWORD *)(v60 + 36);
  v371 = v160;
  if (*(char *)(v58 + 31) < 0)
    std::string::__init_copy_ctor_external(&v364, *(const std::string::value_type **)(v58 + 8), *(_QWORD *)(v58 + 16));
  else
    v364 = *(std::string *)(v58 + 8);
  v63 = *(_DWORD *)(v58 + 32);
  v363 = off_24C335B18;
  v366 = *(_QWORD *)(v58 + 36);
  v64 = *(_DWORD *)(v58 + 44);
  v158 = v63;
  v365 = v63;
  v367 = v64;
  if (*(char *)(v56 + 31) < 0)
    std::string::__init_copy_ctor_external(&v359, *(const std::string::value_type **)(v56 + 8), *(_QWORD *)(v56 + 16));
  else
    v359 = *(std::string *)(v56 + 8);
  v65 = *(_DWORD *)(v56 + 32);
  v358 = off_24C335B18;
  v361 = *(_QWORD *)(v56 + 36);
  v66 = *(_DWORD *)(v56 + 44);
  v156 = v65;
  v360 = v65;
  v362 = v66;
  if (*(char *)(v54 + 31) < 0)
    std::string::__init_copy_ctor_external(&v355, *(const std::string::value_type **)(v54 + 8), *(_QWORD *)(v54 + 16));
  else
    v355 = *(std::string *)(v54 + 8);
  v154 = *(_DWORD *)(v54 + 32);
  v356 = v154;
  v354 = off_24C335AF8;
  v152 = *(_QWORD *)(v54 + 36);
  v357 = v152;
  v349 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(v52 + 31) < 0)
    std::string::__init_copy_ctor_external(&v350, *(const std::string::value_type **)(v52 + 8), *(_QWORD *)(v52 + 16));
  else
    v350 = *(std::string *)(v52 + 8);
  v351 = *(_DWORD *)(v52 + 32);
  v349 = &off_24C335AB8;
  v352 = *(_BYTE *)(v52 + 36);
  if (*(char *)(v52 + 63) < 0)
    std::string::__init_copy_ctor_external(&v353, *(const std::string::value_type **)(v52 + 40), *(_QWORD *)(v52 + 48));
  else
    v353 = *(std::string *)(v52 + 40);
  v344 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a9 + 31) < 0)
    std::string::__init_copy_ctor_external(&v345, *(const std::string::value_type **)(a9 + 8), *(_QWORD *)(a9 + 16));
  else
    v345 = *(std::string *)(a9 + 8);
  v346 = *(_DWORD *)(a9 + 32);
  v344 = &off_24C335AB8;
  v347 = *(_BYTE *)(a9 + 36);
  if (*(char *)(a9 + 63) < 0)
    std::string::__init_copy_ctor_external(&v348, *(const std::string::value_type **)(a9 + 40), *(_QWORD *)(a9 + 48));
  else
    v348 = *(std::string *)(a9 + 40);
  if (*(char *)(a10 + 31) < 0)
    std::string::__init_copy_ctor_external(&v341, *(const std::string::value_type **)(a10 + 8), *(_QWORD *)(a10 + 16));
  else
    v341 = *(std::string *)(a10 + 8);
  v149 = *(_DWORD *)(a10 + 32);
  v342 = v149;
  v340 = off_24C335AF8;
  v147 = *(_QWORD *)(a10 + 36);
  v343 = v147;
  if (*(char *)(a11 + 31) < 0)
    std::string::__init_copy_ctor_external(&v337, *(const std::string::value_type **)(a11 + 8), *(_QWORD *)(a11 + 16));
  else
    v337 = *(std::string *)(a11 + 8);
  v145 = *(_DWORD *)(a11 + 32);
  v338 = v145;
  v336 = off_24C335AF8;
  v144 = *(_QWORD *)(a11 + 36);
  v339 = v144;
  if (*(char *)(a12 + 31) < 0)
    std::string::__init_copy_ctor_external(&v333, *(const std::string::value_type **)(a12 + 8), *(_QWORD *)(a12 + 16));
  else
    v333 = *(std::string *)(a12 + 8);
  v143 = *(_DWORD *)(a12 + 32);
  v334 = v143;
  v332 = off_24C335AF8;
  v142 = *(_QWORD *)(a12 + 36);
  v335 = v142;
  if (*(char *)(a13 + 31) < 0)
    std::string::__init_copy_ctor_external(&v329, *(const std::string::value_type **)(a13 + 8), *(_QWORD *)(a13 + 16));
  else
    v329 = *(std::string *)(a13 + 8);
  v67 = *(_DWORD *)(a13 + 32);
  v330 = v67;
  v328 = off_24C335AF8;
  v68 = *(_QWORD *)(a13 + 36);
  v331 = v68;
  if (*(char *)(a14 + 31) < 0)
    std::string::__init_copy_ctor_external(&v324, *(const std::string::value_type **)(a14 + 8), *(_QWORD *)(a14 + 16));
  else
    v324 = *(std::string *)(a14 + 8);
  v69 = *(_DWORD *)(a14 + 32);
  v323 = off_24C335B18;
  v326 = *(_QWORD *)(a14 + 36);
  v70 = *(_DWORD *)(a14 + 44);
  v141 = v69;
  v325 = v69;
  v327 = v70;
  v318 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a15 + 31) < 0)
    std::string::__init_copy_ctor_external(&v319, *(const std::string::value_type **)(a15 + 8), *(_QWORD *)(a15 + 16));
  else
    v319 = *(std::string *)(a15 + 8);
  v320 = *(_DWORD *)(a15 + 32);
  v318 = &off_24C335AB8;
  v321 = *(_BYTE *)(a15 + 36);
  if (*(char *)(a15 + 63) < 0)
    std::string::__init_copy_ctor_external(&v322, *(const std::string::value_type **)(a15 + 40), *(_QWORD *)(a15 + 48));
  else
    v322 = *(std::string *)(a15 + 40);
  v313 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a16 + 31) < 0)
    std::string::__init_copy_ctor_external(&v314, *(const std::string::value_type **)(a16 + 8), *(_QWORD *)(a16 + 16));
  else
    v314 = *(std::string *)(a16 + 8);
  v315 = *(_DWORD *)(a16 + 32);
  v313 = &off_24C335AB8;
  v316 = *(_BYTE *)(a16 + 36);
  if (*(char *)(a16 + 63) < 0)
    std::string::__init_copy_ctor_external(&v317, *(const std::string::value_type **)(a16 + 40), *(_QWORD *)(a16 + 48));
  else
    v317 = *(std::string *)(a16 + 40);
  if (*(char *)(a17 + 31) < 0)
    std::string::__init_copy_ctor_external(&v309, *(const std::string::value_type **)(a17 + 8), *(_QWORD *)(a17 + 16));
  else
    v309 = *(std::string *)(a17 + 8);
  v71 = *(_DWORD *)(a17 + 32);
  v308 = off_24C335B18;
  v311 = *(_QWORD *)(a17 + 36);
  v72 = *(_DWORD *)(a17 + 44);
  v140 = v71;
  v310 = v71;
  v312 = v72;
  if (*(char *)(a18 + 31) < 0)
    std::string::__init_copy_ctor_external(&v304, *(const std::string::value_type **)(a18 + 8), *(_QWORD *)(a18 + 16));
  else
    v304 = *(std::string *)(a18 + 8);
  v73 = *(_DWORD *)(a18 + 32);
  v303 = off_24C335B18;
  v306 = *(_QWORD *)(a18 + 36);
  v74 = *(_DWORD *)(a18 + 44);
  v139 = v73;
  v305 = v73;
  v307 = v74;
  if (*(char *)(a19 + 31) < 0)
    std::string::__init_copy_ctor_external(&v300, *(const std::string::value_type **)(a19 + 8), *(_QWORD *)(a19 + 16));
  else
    v300 = *(std::string *)(a19 + 8);
  v138 = *(_DWORD *)(a19 + 32);
  v301 = v138;
  v299 = off_24C335AF8;
  v137 = *(_QWORD *)(a19 + 36);
  v302 = v137;
  if (*(char *)(a20 + 31) < 0)
    std::string::__init_copy_ctor_external(&v296, *(const std::string::value_type **)(a20 + 8), *(_QWORD *)(a20 + 16));
  else
    v296 = *(std::string *)(a20 + 8);
  v136 = *(_DWORD *)(a20 + 32);
  v297 = v136;
  v295 = off_24C335AF8;
  v135 = *(_QWORD *)(a20 + 36);
  v298 = v135;
  if (*(char *)(a21 + 31) < 0)
    std::string::__init_copy_ctor_external(&v292, *(const std::string::value_type **)(a21 + 8), *(_QWORD *)(a21 + 16));
  else
    v292 = *(std::string *)(a21 + 8);
  v134 = *(_DWORD *)(a21 + 32);
  v293 = v134;
  v291 = off_24C335AF8;
  v133 = *(_QWORD *)(a21 + 36);
  v294 = v133;
  if (*(char *)(a22 + 31) < 0)
    std::string::__init_copy_ctor_external(&v288, *(const std::string::value_type **)(a22 + 8), *(_QWORD *)(a22 + 16));
  else
    v288 = *(std::string *)(a22 + 8);
  v132 = *(_DWORD *)(a22 + 32);
  v289 = v132;
  v287 = off_24C335AF8;
  v131 = *(_QWORD *)(a22 + 36);
  v290 = v131;
  if (*(char *)(a23 + 31) < 0)
    std::string::__init_copy_ctor_external(&v284, *(const std::string::value_type **)(a23 + 8), *(_QWORD *)(a23 + 16));
  else
    v284 = *(std::string *)(a23 + 8);
  v130 = *(_DWORD *)(a23 + 32);
  v285 = v130;
  v283 = off_24C335AF8;
  v129 = *(_QWORD *)(a23 + 36);
  v286 = v129;
  if (*(char *)(a24 + 31) < 0)
    std::string::__init_copy_ctor_external(&v280, *(const std::string::value_type **)(a24 + 8), *(_QWORD *)(a24 + 16));
  else
    v280 = *(std::string *)(a24 + 8);
  v128 = *(_DWORD *)(a24 + 32);
  v281 = v128;
  v279 = off_24C335AF8;
  v127 = *(_QWORD *)(a24 + 36);
  v282 = v127;
  if (*(char *)(a25 + 31) < 0)
    std::string::__init_copy_ctor_external(&v276, *(const std::string::value_type **)(a25 + 8), *(_QWORD *)(a25 + 16));
  else
    v276 = *(std::string *)(a25 + 8);
  v126 = *(_DWORD *)(a25 + 32);
  v277 = v126;
  v275 = off_24C335AF8;
  v125 = *(_QWORD *)(a25 + 36);
  v278 = v125;
  v270 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a26 + 31) < 0)
    std::string::__init_copy_ctor_external(&v271, *(const std::string::value_type **)(a26 + 8), *(_QWORD *)(a26 + 16));
  else
    v271 = *(std::string *)(a26 + 8);
  v272 = *(_DWORD *)(a26 + 32);
  v270 = &off_24C335AB8;
  v273 = *(_BYTE *)(a26 + 36);
  if (*(char *)(a26 + 63) < 0)
    std::string::__init_copy_ctor_external(&v274, *(const std::string::value_type **)(a26 + 40), *(_QWORD *)(a26 + 48));
  else
    v274 = *(std::string *)(a26 + 40);
  v265 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a27 + 31) < 0)
    std::string::__init_copy_ctor_external(&v266, *(const std::string::value_type **)(a27 + 8), *(_QWORD *)(a27 + 16));
  else
    v266 = *(std::string *)(a27 + 8);
  v267 = *(_DWORD *)(a27 + 32);
  v265 = &off_24C335AB8;
  v268 = *(_BYTE *)(a27 + 36);
  if (*(char *)(a27 + 63) < 0)
    std::string::__init_copy_ctor_external(&v269, *(const std::string::value_type **)(a27 + 40), *(_QWORD *)(a27 + 48));
  else
    v269 = *(std::string *)(a27 + 40);
  v260 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a28 + 31) < 0)
    std::string::__init_copy_ctor_external(&v261, *(const std::string::value_type **)(a28 + 8), *(_QWORD *)(a28 + 16));
  else
    v261 = *(std::string *)(a28 + 8);
  v262 = *(_DWORD *)(a28 + 32);
  v260 = &off_24C335AB8;
  v263 = *(_BYTE *)(a28 + 36);
  if (*(char *)(a28 + 63) < 0)
    std::string::__init_copy_ctor_external(&v264, *(const std::string::value_type **)(a28 + 40), *(_QWORD *)(a28 + 48));
  else
    v264 = *(std::string *)(a28 + 40);
  if (*(char *)(a29 + 31) < 0)
    std::string::__init_copy_ctor_external(&v257, *(const std::string::value_type **)(a29 + 8), *(_QWORD *)(a29 + 16));
  else
    v257 = *(std::string *)(a29 + 8);
  v123 = *(_DWORD *)(a29 + 32);
  v258 = v123;
  v256 = off_24C335AF8;
  v122 = *(_QWORD *)(a29 + 36);
  v259 = v122;
  if (*(char *)(a30 + 31) < 0)
    std::string::__init_copy_ctor_external(&v252, *(const std::string::value_type **)(a30 + 8), *(_QWORD *)(a30 + 16));
  else
    v252 = *(std::string *)(a30 + 8);
  v75 = *(_DWORD *)(a30 + 32);
  v251 = off_24C335B18;
  v254 = *(_QWORD *)(a30 + 36);
  v76 = *(_DWORD *)(a30 + 44);
  v121 = v75;
  v253 = v75;
  v255 = v76;
  if (*(char *)(a31 + 31) < 0)
    std::string::__init_copy_ctor_external(&v248, *(const std::string::value_type **)(a31 + 8), *(_QWORD *)(a31 + 16));
  else
    v248 = *(std::string *)(a31 + 8);
  v120 = *(_DWORD *)(a31 + 32);
  v249 = v120;
  v247 = off_24C335AF8;
  v119 = *(_QWORD *)(a31 + 36);
  v250 = v119;
  v242 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a32 + 31) < 0)
    std::string::__init_copy_ctor_external(&v243, *(const std::string::value_type **)(a32 + 8), *(_QWORD *)(a32 + 16));
  else
    v243 = *(std::string *)(a32 + 8);
  v244 = *(_DWORD *)(a32 + 32);
  v242 = &off_24C335AB8;
  v245 = *(_BYTE *)(a32 + 36);
  if (*(char *)(a32 + 63) < 0)
    std::string::__init_copy_ctor_external(&v246, *(const std::string::value_type **)(a32 + 40), *(_QWORD *)(a32 + 48));
  else
    v246 = *(std::string *)(a32 + 40);
  if (*(char *)(a33 + 31) < 0)
    std::string::__init_copy_ctor_external(&v238, *(const std::string::value_type **)(a33 + 8), *(_QWORD *)(a33 + 16));
  else
    v238 = *(std::string *)(a33 + 8);
  v77 = *(_DWORD *)(a33 + 32);
  v237 = off_24C335B18;
  v240 = *(_QWORD *)(a33 + 36);
  v78 = *(_DWORD *)(a33 + 44);
  v118 = v77;
  v239 = v77;
  v241 = v78;
  v232 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a34 + 31) < 0)
    std::string::__init_copy_ctor_external(&v233, *(const std::string::value_type **)(a34 + 8), *(_QWORD *)(a34 + 16));
  else
    v233 = *(std::string *)(a34 + 8);
  v234 = *(_DWORD *)(a34 + 32);
  v232 = &off_24C335AB8;
  v235 = *(_BYTE *)(a34 + 36);
  if (*(char *)(a34 + 63) < 0)
    std::string::__init_copy_ctor_external(&v236, *(const std::string::value_type **)(a34 + 40), *(_QWORD *)(a34 + 48));
  else
    v236 = *(std::string *)(a34 + 40);
  v227 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a35 + 31) < 0)
    std::string::__init_copy_ctor_external(&v228, *(const std::string::value_type **)(a35 + 8), *(_QWORD *)(a35 + 16));
  else
    v228 = *(std::string *)(a35 + 8);
  v229 = *(_DWORD *)(a35 + 32);
  v227 = &off_24C335AB8;
  v230 = *(_BYTE *)(a35 + 36);
  if (*(char *)(a35 + 63) < 0)
    std::string::__init_copy_ctor_external(&v231, *(const std::string::value_type **)(a35 + 40), *(_QWORD *)(a35 + 48));
  else
    v231 = *(std::string *)(a35 + 40);
  if (*(char *)(a36 + 31) < 0)
    std::string::__init_copy_ctor_external(&v224, *(const std::string::value_type **)(a36 + 8), *(_QWORD *)(a36 + 16));
  else
    v224 = *(std::string *)(a36 + 8);
  v117 = *(_DWORD *)(a36 + 32);
  v225 = v117;
  v223 = off_24C335AF8;
  v116 = *(_QWORD *)(a36 + 36);
  v226 = v116;
  if (*(char *)(a37 + 31) < 0)
    std::string::__init_copy_ctor_external(&v219, *(const std::string::value_type **)(a37 + 8), *(_QWORD *)(a37 + 16));
  else
    v219 = *(std::string *)(a37 + 8);
  v79 = *(_DWORD *)(a37 + 32);
  v218 = off_24C335B18;
  v221 = *(_QWORD *)(a37 + 36);
  v80 = *(_DWORD *)(a37 + 44);
  v115 = v79;
  v220 = v79;
  v222 = v80;
  v214 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a38 + 31) < 0)
    std::string::__init_copy_ctor_external(&v215, *(const std::string::value_type **)(a38 + 8), *(_QWORD *)(a38 + 16));
  else
    v215 = *(std::string *)(a38 + 8);
  v114 = *(_DWORD *)(a38 + 32);
  v216 = v114;
  v214 = off_24C335AF8;
  v81 = *(_QWORD *)(a38 + 36);
  v217 = v81;
  v209 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a39 + 31) < 0)
    std::string::__init_copy_ctor_external(&v210, *(const std::string::value_type **)(a39 + 8), *(_QWORD *)(a39 + 16));
  else
    v210 = *(std::string *)(a39 + 8);
  v211 = *(_DWORD *)(a39 + 32);
  v209 = &off_24C335AB8;
  v212 = *(_BYTE *)(a39 + 36);
  if (*(char *)(a39 + 63) < 0)
    std::string::__init_copy_ctor_external(&v213, *(const std::string::value_type **)(a39 + 40), *(_QWORD *)(a39 + 48));
  else
    v213 = *(std::string *)(a39 + 40);
  v205 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a40 + 31) < 0)
    std::string::__init_copy_ctor_external(&v206, *(const std::string::value_type **)(a40 + 8), *(_QWORD *)(a40 + 16));
  else
    v206 = *(std::string *)(a40 + 8);
  v113 = *(_DWORD *)(a40 + 32);
  v207 = v113;
  v205 = off_24C335AF8;
  v112 = *(_QWORD *)(a40 + 36);
  v208 = v112;
  v200 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a41 + 31) < 0)
    std::string::__init_copy_ctor_external(&v201, *(const std::string::value_type **)(a41 + 8), *(_QWORD *)(a41 + 16));
  else
    v201 = *(std::string *)(a41 + 8);
  v82 = *(_DWORD *)(a41 + 32);
  v200 = off_24C335B18;
  v203 = *(_QWORD *)(a41 + 36);
  v83 = *(_DWORD *)(a41 + 44);
  v111 = v82;
  v202 = v82;
  v204 = v83;
  v196 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a42 + 31) < 0)
    std::string::__init_copy_ctor_external(&v197, *(const std::string::value_type **)(a42 + 8), *(_QWORD *)(a42 + 16));
  else
    v197 = *(std::string *)(a42 + 8);
  v110 = *(_DWORD *)(a42 + 32);
  v198 = v110;
  v196 = off_24C335AF8;
  v109 = *(_QWORD *)(a42 + 36);
  v199 = v109;
  v192 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a43 + 31) < 0)
    std::string::__init_copy_ctor_external(&v193, *(const std::string::value_type **)(a43 + 8), *(_QWORD *)(a43 + 16));
  else
    v193 = *(std::string *)(a43 + 8);
  v108 = *(_DWORD *)(a43 + 32);
  v194 = v108;
  v192 = off_24C335AF8;
  v107 = *(_QWORD *)(a43 + 36);
  v195 = v107;
  v188 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a44 + 31) < 0)
    std::string::__init_copy_ctor_external(&v189, *(const std::string::value_type **)(a44 + 8), *(_QWORD *)(a44 + 16));
  else
    v189 = *(std::string *)(a44 + 8);
  v106 = *(_DWORD *)(a44 + 32);
  v190 = v106;
  v188 = off_24C335AF8;
  v84 = *(_QWORD *)(a44 + 36);
  v191 = v84;
  v183 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a45 + 31) < 0)
    std::string::__init_copy_ctor_external(&v184, *(const std::string::value_type **)(a45 + 8), *(_QWORD *)(a45 + 16));
  else
    v184 = *(std::string *)(a45 + 8);
  v185 = *(_DWORD *)(a45 + 32);
  v183 = &off_24C335AB8;
  v186 = *(_BYTE *)(a45 + 36);
  if (*(char *)(a45 + 63) < 0)
    std::string::__init_copy_ctor_external(&v187, *(const std::string::value_type **)(a45 + 40), *(_QWORD *)(a45 + 48));
  else
    v187 = *(std::string *)(a45 + 40);
  v178 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a46 + 31) < 0)
    std::string::__init_copy_ctor_external(&v179, *(const std::string::value_type **)(a46 + 8), *(_QWORD *)(a46 + 16));
  else
    v179 = *(std::string *)(a46 + 8);
  v180 = *(_DWORD *)(a46 + 32);
  v178 = &off_24C335AB8;
  v181 = *(_BYTE *)(a46 + 36);
  if (*(char *)(a46 + 63) < 0)
    std::string::__init_copy_ctor_external(&v182, *(const std::string::value_type **)(a46 + 40), *(_QWORD *)(a46 + 48));
  else
    v182 = *(std::string *)(a46 + 40);
  v173 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a47 + 31) < 0)
    std::string::__init_copy_ctor_external(&v174, *(const std::string::value_type **)(a47 + 8), *(_QWORD *)(a47 + 16));
  else
    v174 = *(std::string *)(a47 + 8);
  v85 = *(_DWORD *)(a47 + 32);
  v173 = off_24C335B18;
  v176 = *(_QWORD *)(a47 + 36);
  v86 = *(_DWORD *)(a47 + 44);
  v105 = v85;
  v175 = v85;
  v177 = v86;
  v169 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a48 + 31) < 0)
    std::string::__init_copy_ctor_external(&v170, *(const std::string::value_type **)(a48 + 8), *(_QWORD *)(a48 + 16));
  else
    v170 = *(std::string *)(a48 + 8);
  v104 = *(_DWORD *)(a48 + 32);
  v171 = v104;
  v169 = off_24C335AF8;
  v103 = *(_QWORD *)(a48 + 36);
  v172 = v103;
  if (*(char *)(a49 + 31) < 0)
    std::string::__init_copy_ctor_external(&v166, *(const std::string::value_type **)(a49 + 8), *(_QWORD *)(a49 + 16));
  else
    v166 = *(std::string *)(a49 + 8);
  v87 = v164;
  v165 = *(_DWORD *)(a49 + 32);
  v167 = v165;
  v102 = *(_QWORD *)(a49 + 36);
  v168 = v102;
  v579 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v580, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
  else
    v580 = __s;
  v581 = v162;
  v579 = off_24C335AF8;
  v582 = v160;
  v574 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v364.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v575, v364.__r_.__value_.__l.__data_, v364.__r_.__value_.__l.__size_);
  else
    v575 = v364;
  v574 = off_24C335B18;
  v577 = v366;
  v576 = v158;
  v578 = v367;
  v569 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v359.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v570, v359.__r_.__value_.__l.__data_, v359.__r_.__value_.__l.__size_);
  else
    v570 = v359;
  v569 = off_24C335B18;
  v572 = v361;
  v571 = v156;
  v573 = v362;
  v565 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v355.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v566, v355.__r_.__value_.__l.__data_, v355.__r_.__value_.__l.__size_);
  else
    v566 = v355;
  v567 = v154;
  v565 = off_24C335AF8;
  v568 = v152;
  v560 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v350.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v561, v350.__r_.__value_.__l.__data_, v350.__r_.__value_.__l.__size_);
  else
    v561 = v350;
  v562 = v351;
  v560 = &off_24C335AB8;
  v563 = v352;
  if (SHIBYTE(v353.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v564, v353.__r_.__value_.__l.__data_, v353.__r_.__value_.__l.__size_);
  else
    v564 = v353;
  v555 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v345.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v556, v345.__r_.__value_.__l.__data_, v345.__r_.__value_.__l.__size_);
  else
    v556 = v345;
  v557 = v346;
  v555 = &off_24C335AB8;
  v558 = v347;
  if (SHIBYTE(v348.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v559, v348.__r_.__value_.__l.__data_, v348.__r_.__value_.__l.__size_);
  else
    v559 = v348;
  v551 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v341.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v552, v341.__r_.__value_.__l.__data_, v341.__r_.__value_.__l.__size_);
  else
    v552 = v341;
  v553 = v149;
  v551 = off_24C335AF8;
  v554 = v147;
  v547 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v337.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v548, v337.__r_.__value_.__l.__data_, v337.__r_.__value_.__l.__size_);
  else
    v548 = v337;
  v549 = v145;
  v547 = off_24C335AF8;
  v550 = v144;
  v543 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v333.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v544, v333.__r_.__value_.__l.__data_, v333.__r_.__value_.__l.__size_);
  else
    v544 = v333;
  v545 = v143;
  v543 = off_24C335AF8;
  v546 = v142;
  v539 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v329.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v540, v329.__r_.__value_.__l.__data_, v329.__r_.__value_.__l.__size_);
  else
    v540 = v329;
  v541 = v67;
  v539 = off_24C335AF8;
  v542 = v68;
  v534 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v324.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v535, v324.__r_.__value_.__l.__data_, v324.__r_.__value_.__l.__size_);
  else
    v535 = v324;
  v534 = off_24C335B18;
  v537 = v326;
  v536 = v141;
  v538 = v327;
  v529 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v319.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v530, v319.__r_.__value_.__l.__data_, v319.__r_.__value_.__l.__size_);
  else
    v530 = v319;
  v531 = v320;
  v529 = &off_24C335AB8;
  v532 = v321;
  if (SHIBYTE(v322.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v533, v322.__r_.__value_.__l.__data_, v322.__r_.__value_.__l.__size_);
  else
    v533 = v322;
  v524 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v314.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v525, v314.__r_.__value_.__l.__data_, v314.__r_.__value_.__l.__size_);
  else
    v525 = v314;
  v526 = v315;
  v524 = &off_24C335AB8;
  v527 = v316;
  if (SHIBYTE(v317.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v528, v317.__r_.__value_.__l.__data_, v317.__r_.__value_.__l.__size_);
  else
    v528 = v317;
  v519 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v309.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v520, v309.__r_.__value_.__l.__data_, v309.__r_.__value_.__l.__size_);
  else
    v520 = v309;
  v519 = off_24C335B18;
  v522 = v311;
  v521 = v140;
  v523 = v312;
  v514 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v304.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v515, v304.__r_.__value_.__l.__data_, v304.__r_.__value_.__l.__size_);
  else
    v515 = v304;
  v514 = off_24C335B18;
  v517 = v306;
  v516 = v139;
  v518 = v307;
  v510 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v300.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v511, v300.__r_.__value_.__l.__data_, v300.__r_.__value_.__l.__size_);
  else
    v511 = v300;
  v512 = v138;
  v510 = off_24C335AF8;
  v513 = v137;
  v506 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v296.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v507, v296.__r_.__value_.__l.__data_, v296.__r_.__value_.__l.__size_);
  else
    v507 = v296;
  v508 = v136;
  v506 = off_24C335AF8;
  v509 = v135;
  v502 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v292.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v503, v292.__r_.__value_.__l.__data_, v292.__r_.__value_.__l.__size_);
  else
    v503 = v292;
  v504 = v134;
  v502 = off_24C335AF8;
  v505 = v133;
  v498 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v288.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v499, v288.__r_.__value_.__l.__data_, v288.__r_.__value_.__l.__size_);
  else
    v499 = v288;
  v500 = v132;
  v498 = off_24C335AF8;
  v501 = v131;
  v494 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v284.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v495, v284.__r_.__value_.__l.__data_, v284.__r_.__value_.__l.__size_);
  else
    v495 = v284;
  v496 = v130;
  v494 = off_24C335AF8;
  v497 = v129;
  v490 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v280.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v491, v280.__r_.__value_.__l.__data_, v280.__r_.__value_.__l.__size_);
  else
    v491 = v280;
  v492 = v128;
  v490 = off_24C335AF8;
  v493 = v127;
  v486 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v276.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v487, v276.__r_.__value_.__l.__data_, v276.__r_.__value_.__l.__size_);
  else
    v487 = v276;
  v488 = v126;
  v486 = off_24C335AF8;
  v489 = v125;
  v481 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v271.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v482, v271.__r_.__value_.__l.__data_, v271.__r_.__value_.__l.__size_);
  else
    v482 = v271;
  v483 = v272;
  v481 = &off_24C335AB8;
  v484 = v273;
  if (SHIBYTE(v274.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v485, v274.__r_.__value_.__l.__data_, v274.__r_.__value_.__l.__size_);
  else
    v485 = v274;
  v476 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v266.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v477, v266.__r_.__value_.__l.__data_, v266.__r_.__value_.__l.__size_);
  else
    v477 = v266;
  v478 = v267;
  v476 = &off_24C335AB8;
  v479 = v268;
  if (SHIBYTE(v269.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v480, v269.__r_.__value_.__l.__data_, v269.__r_.__value_.__l.__size_);
  else
    v480 = v269;
  v471 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v261.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v472, v261.__r_.__value_.__l.__data_, v261.__r_.__value_.__l.__size_);
  else
    v472 = v261;
  v473 = v262;
  v471 = &off_24C335AB8;
  v474 = v263;
  if (SHIBYTE(v264.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v475, v264.__r_.__value_.__l.__data_, v264.__r_.__value_.__l.__size_);
  else
    v475 = v264;
  v467 = (uint64_t (**)())off_24C335D90;
  v88 = SHIBYTE(v257.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v257.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v468, v257.__r_.__value_.__l.__data_, v257.__r_.__value_.__l.__size_);
  else
    v468 = v257;
  v469 = v123;
  v467 = off_24C335AF8;
  v470 = v122;
  v462 = (uint64_t (**)())off_24C335D90;
  v163 = SHIBYTE(v252.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v252.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v463, v252.__r_.__value_.__l.__data_, v252.__r_.__value_.__l.__size_);
  else
    v463 = v252;
  v462 = off_24C335B18;
  v465 = v254;
  v464 = v121;
  v466 = v255;
  v458 = (uint64_t (**)())off_24C335D90;
  v161 = SHIBYTE(v248.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v248.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v459, v248.__r_.__value_.__l.__data_, v248.__r_.__value_.__l.__size_);
  else
    v459 = v248;
  v460 = v120;
  v458 = off_24C335AF8;
  v461 = v119;
  v453 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v243.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v454, v243.__r_.__value_.__l.__data_, v243.__r_.__value_.__l.__size_);
  else
    v454 = v243;
  v455 = v244;
  v453 = &off_24C335AB8;
  v456 = v245;
  if (SHIBYTE(v246.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v457, v246.__r_.__value_.__l.__data_, v246.__r_.__value_.__l.__size_);
  else
    v457 = v246;
  v448 = (uint64_t (**)())off_24C335D90;
  v159 = SHIBYTE(v238.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v238.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v449, v238.__r_.__value_.__l.__data_, v238.__r_.__value_.__l.__size_);
  else
    v449 = v238;
  v448 = off_24C335B18;
  v451 = v240;
  v450 = v118;
  v452 = v241;
  v443 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v233.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v444, v233.__r_.__value_.__l.__data_, v233.__r_.__value_.__l.__size_);
  else
    v444 = v233;
  v445 = v234;
  v443 = &off_24C335AB8;
  v446 = v235;
  if (SHIBYTE(v236.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v447, v236.__r_.__value_.__l.__data_, v236.__r_.__value_.__l.__size_);
  else
    v447 = v236;
  v438 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v228.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v439, v228.__r_.__value_.__l.__data_, v228.__r_.__value_.__l.__size_);
  else
    v439 = v228;
  v440 = v229;
  v438 = &off_24C335AB8;
  v441 = v230;
  if (SHIBYTE(v231.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v442, v231.__r_.__value_.__l.__data_, v231.__r_.__value_.__l.__size_);
  else
    v442 = v231;
  v434 = (uint64_t (**)())off_24C335D90;
  v89 = SHIBYTE(v224.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v224.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v435, v224.__r_.__value_.__l.__data_, v224.__r_.__value_.__l.__size_);
  else
    v435 = v224;
  v436 = v117;
  v434 = off_24C335AF8;
  v437 = v116;
  v429 = (uint64_t (**)())off_24C335D90;
  v157 = SHIBYTE(v219.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v219.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v430, v219.__r_.__value_.__l.__data_, v219.__r_.__value_.__l.__size_);
  else
    v430 = v219;
  v429 = off_24C335B18;
  v432 = v221;
  v431 = v115;
  v433 = v222;
  v425 = (uint64_t (**)())off_24C335D90;
  v155 = SHIBYTE(v215.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v215.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v426, v215.__r_.__value_.__l.__data_, v215.__r_.__value_.__l.__size_);
  else
    v426 = v215;
  v427 = v114;
  v425 = off_24C335AF8;
  v428 = v81;
  v420 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v210.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v421, v210.__r_.__value_.__l.__data_, v210.__r_.__value_.__l.__size_);
  else
    v421 = v210;
  v422 = v211;
  v420 = &off_24C335AB8;
  v423 = v212;
  if (SHIBYTE(v213.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v424, v213.__r_.__value_.__l.__data_, v213.__r_.__value_.__l.__size_);
  else
    v424 = v213;
  v153 = v88;
  v416 = (uint64_t (**)())off_24C335D90;
  v90 = SHIBYTE(v206.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v206.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v417, v206.__r_.__value_.__l.__data_, v206.__r_.__value_.__l.__size_);
  else
    v417 = v206;
  v418 = v113;
  v416 = off_24C335AF8;
  v419 = v112;
  v411 = (uint64_t (**)())off_24C335D90;
  v151 = SHIBYTE(v201.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v201.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v412, v201.__r_.__value_.__l.__data_, v201.__r_.__value_.__l.__size_);
  else
    v412 = v201;
  v150 = v89;
  v411 = off_24C335B18;
  v414 = v203;
  v413 = v111;
  v415 = v204;
  v407 = (uint64_t (**)())off_24C335D90;
  v91 = SHIBYTE(v197.__r_.__value_.__r.__words[2]);
  v148 = v90;
  if (SHIBYTE(v197.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v408, v197.__r_.__value_.__l.__data_, v197.__r_.__value_.__l.__size_);
  else
    v408 = v197;
  v409 = v110;
  v407 = off_24C335AF8;
  v410 = v109;
  v403 = (uint64_t (**)())off_24C335D90;
  v92 = SHIBYTE(v193.__r_.__value_.__r.__words[2]);
  v146 = v91;
  if (SHIBYTE(v193.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v404, v193.__r_.__value_.__l.__data_, v193.__r_.__value_.__l.__size_);
  else
    v404 = v193;
  v405 = v108;
  v403 = off_24C335AF8;
  v406 = v107;
  v399 = (uint64_t (**)())off_24C335D90;
  v93 = SHIBYTE(v189.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v189.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v400, v189.__r_.__value_.__l.__data_, v189.__r_.__value_.__l.__size_);
  else
    v400 = v189;
  v401 = v106;
  v399 = off_24C335AF8;
  v402 = v84;
  v394 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v184.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v395, v184.__r_.__value_.__l.__data_, v184.__r_.__value_.__l.__size_);
  else
    v395 = v184;
  v396 = v185;
  v394 = &off_24C335AB8;
  v397 = v186;
  if (SHIBYTE(v187.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v398, v187.__r_.__value_.__l.__data_, v187.__r_.__value_.__l.__size_);
  else
    v398 = v187;
  v389 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v179.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v390, v179.__r_.__value_.__l.__data_, v179.__r_.__value_.__l.__size_);
  else
    v390 = v179;
  v391 = v180;
  v389 = &off_24C335AB8;
  v392 = v181;
  if (SHIBYTE(v182.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v393, v182.__r_.__value_.__l.__data_, v182.__r_.__value_.__l.__size_);
  else
    v393 = v182;
  v384 = (uint64_t (**)())off_24C335D90;
  v94 = SHIBYTE(v174.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v174.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v385, v174.__r_.__value_.__l.__data_, v174.__r_.__value_.__l.__size_);
  else
    v385 = v174;
  v384 = off_24C335B18;
  v387 = v176;
  v386 = v105;
  v388 = v177;
  v380 = (uint64_t (**)())off_24C335D90;
  v95 = SHIBYTE(v170.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v170.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v381, v170.__r_.__value_.__l.__data_, v170.__r_.__value_.__l.__size_);
  else
    v381 = v170;
  v382 = v104;
  v380 = off_24C335AF8;
  v383 = v103;
  v376 = (uint64_t (**)())off_24C335D90;
  v96 = SHIBYTE(v166.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v166.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&__p, v166.__r_.__value_.__l.__data_, v166.__r_.__value_.__l.__size_);
  else
    __p = v166;
  v378 = v165;
  v376 = off_24C335AF8;
  v379 = v102;
  mediaplatform::DatabaseColumnTuple<41ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::DatabaseColumnTuple(v87, (uint64_t)&v579, (uint64_t)&v574, (uint64_t)&v569, (uint64_t)&v565, (uint64_t)&v560, (uint64_t)&v555, (uint64_t)&v551, (uint64_t)&v547, (uint64_t)&v543, (uint64_t)&v539, (uint64_t)&v534, (uint64_t)&v529, (uint64_t)&v524, (uint64_t)&v519, (uint64_t)&v514, (uint64_t)&v510, (uint64_t)&v506, (uint64_t)&v502,
    (uint64_t)&v498,
    (uint64_t)&v494,
    (uint64_t)&v490,
    (uint64_t)&v486,
    (uint64_t)&v481,
    (uint64_t)&v476,
    (uint64_t)&v471,
    (uint64_t)&v467,
    (uint64_t)&v462,
    (uint64_t)&v458,
    (uint64_t)&v453,
    (uint64_t)&v448,
    (uint64_t)&v443,
    (uint64_t)&v438,
    (uint64_t)&v434,
    (uint64_t)&v429,
    (uint64_t)&v425,
    (uint64_t)&v420,
    (uint64_t)&v416,
    (uint64_t)&v411,
    (uint64_t)&v407,
    (uint64_t)&v403,
    (uint64_t)&v399,
    (uint64_t)&v394,
    (uint64_t)&v389,
    (uint64_t)&v384,
    (uint64_t)&v380,
    (uint64_t)&v376);
  v376 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v380 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v381.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v381.__r_.__value_.__l.__data_);
  v384 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v385.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v385.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v389);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v394);
  v399 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v400.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v400.__r_.__value_.__l.__data_);
  v403 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v404.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v404.__r_.__value_.__l.__data_);
  v407 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v408.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v408.__r_.__value_.__l.__data_);
  v411 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v412.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v412.__r_.__value_.__l.__data_);
  v416 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v417.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v417.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v420);
  v425 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v426.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v426.__r_.__value_.__l.__data_);
  v429 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v430.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v430.__r_.__value_.__l.__data_);
  v434 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v435.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v435.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v438);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v443);
  v448 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v449.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v449.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v453);
  v458 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v459.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v459.__r_.__value_.__l.__data_);
  v462 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v463.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v463.__r_.__value_.__l.__data_);
  v467 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v468.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v468.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v471);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v476);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v481);
  v486 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v487.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v487.__r_.__value_.__l.__data_);
  v490 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v491.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v491.__r_.__value_.__l.__data_);
  v494 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v495.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v495.__r_.__value_.__l.__data_);
  v498 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v499.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v499.__r_.__value_.__l.__data_);
  v502 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v503.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v503.__r_.__value_.__l.__data_);
  v506 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v507.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v507.__r_.__value_.__l.__data_);
  v510 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v511.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v511.__r_.__value_.__l.__data_);
  v514 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v515.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v515.__r_.__value_.__l.__data_);
  v519 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v520.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v520.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v524);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v529);
  v534 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v535.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v535.__r_.__value_.__l.__data_);
  v539 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v540.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v540.__r_.__value_.__l.__data_);
  v543 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v544.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v544.__r_.__value_.__l.__data_);
  v547 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v548.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v548.__r_.__value_.__l.__data_);
  v551 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v552.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v552.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v555);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v560);
  v565 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v566.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v566.__r_.__value_.__l.__data_);
  v569 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v570.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v570.__r_.__value_.__l.__data_);
  v574 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v575.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v575.__r_.__value_.__l.__data_);
  v579 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v580.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v580.__r_.__value_.__l.__data_);
  *(_QWORD *)(v87 + 2416) = off_24C335D90;
  v97 = (std::string *)(v87 + 2424);
  v98 = SHIBYTE(v373.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v373.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v97, v373.__r_.__value_.__l.__data_, v373.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v97->__r_.__value_.__l.__data_ = *(_OWORD *)&v373.__r_.__value_.__l.__data_;
    *(_QWORD *)(v87 + 2440) = *((_QWORD *)&v373.__r_.__value_.__l + 2);
  }
  *(_DWORD *)(v87 + 2448) = v374;
  *(_QWORD *)(v87 + 2416) = off_24C335AF8;
  *(_QWORD *)(v87 + 2452) = v375;
  if (v96 < 0)
    operator delete(v166.__r_.__value_.__l.__data_);
  v169 = (uint64_t (**)())off_24C335D90;
  if (v95 < 0)
    operator delete(v170.__r_.__value_.__l.__data_);
  v173 = (uint64_t (**)())off_24C335D90;
  if (v94 < 0)
    operator delete(v174.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v178);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v183);
  v188 = (uint64_t (**)())off_24C335D90;
  if (v93 < 0)
    operator delete(v189.__r_.__value_.__l.__data_);
  v192 = (uint64_t (**)())off_24C335D90;
  if (v92 < 0)
    operator delete(v193.__r_.__value_.__l.__data_);
  v196 = (uint64_t (**)())off_24C335D90;
  if (v146 < 0)
    operator delete(v197.__r_.__value_.__l.__data_);
  v200 = (uint64_t (**)())off_24C335D90;
  if (v151 < 0)
    operator delete(v201.__r_.__value_.__l.__data_);
  v205 = (uint64_t (**)())off_24C335D90;
  if (v148 < 0)
    operator delete(v206.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v209);
  v214 = (uint64_t (**)())off_24C335D90;
  if (v155 < 0)
    operator delete(v215.__r_.__value_.__l.__data_);
  v218 = (uint64_t (**)())off_24C335D90;
  if (v157 < 0)
    operator delete(v219.__r_.__value_.__l.__data_);
  v223 = (uint64_t (**)())off_24C335D90;
  if (v150 < 0)
    operator delete(v224.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v227);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v232);
  v237 = (uint64_t (**)())off_24C335D90;
  if (v159 < 0)
    operator delete(v238.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v242);
  if (v161 < 0)
    operator delete(v248.__r_.__value_.__l.__data_);
  if (v163 < 0)
  {
    operator delete(v252.__r_.__value_.__l.__data_);
    if ((v153 & 0x80000000) == 0)
      goto LABEL_455;
  }
  else if ((v153 & 0x80000000) == 0)
  {
    goto LABEL_455;
  }
  operator delete(v257.__r_.__value_.__l.__data_);
LABEL_455:
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v260);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v265);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v270);
  if (SHIBYTE(v276.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v276.__r_.__value_.__l.__data_);
  if (SHIBYTE(v280.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v280.__r_.__value_.__l.__data_);
  if (SHIBYTE(v284.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v284.__r_.__value_.__l.__data_);
  if (SHIBYTE(v288.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v288.__r_.__value_.__l.__data_);
  if (SHIBYTE(v292.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v292.__r_.__value_.__l.__data_);
  if (SHIBYTE(v296.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v296.__r_.__value_.__l.__data_);
  if (SHIBYTE(v300.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v300.__r_.__value_.__l.__data_);
  if (SHIBYTE(v304.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v304.__r_.__value_.__l.__data_);
  if (SHIBYTE(v309.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v309.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v313);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v318);
  if (SHIBYTE(v324.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v324.__r_.__value_.__l.__data_);
  if (SHIBYTE(v329.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v329.__r_.__value_.__l.__data_);
  if (SHIBYTE(v333.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v333.__r_.__value_.__l.__data_);
  if (SHIBYTE(v337.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v337.__r_.__value_.__l.__data_);
  if (SHIBYTE(v341.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v341.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v344);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v349);
  if (SHIBYTE(v355.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v355.__r_.__value_.__l.__data_);
  if (SHIBYTE(v359.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v359.__r_.__value_.__l.__data_);
  if (SHIBYTE(v364.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v364.__r_.__value_.__l.__data_);
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__s.__r_.__value_.__l.__data_);
    if ((v98 & 0x80000000) == 0)
      goto LABEL_491;
  }
  else if ((v98 & 0x80000000) == 0)
  {
    goto LABEL_491;
  }
  operator delete(v373.__r_.__value_.__l.__data_);
LABEL_491:
  *(_QWORD *)(v87 + 2464) = off_24C335D90;
  v99 = (std::string *)(v87 + 2472);
  if (*(char *)(v124 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v99, *(const std::string::value_type **)(v124 + 8), *(_QWORD *)(v124 + 16));
  }
  else
  {
    v100 = *(_OWORD *)(v124 + 8);
    *(_QWORD *)(v87 + 2488) = *(_QWORD *)(v124 + 24);
    *(_OWORD *)&v99->__r_.__value_.__l.__data_ = v100;
  }
  *(_DWORD *)(v87 + 2496) = *(_DWORD *)(v124 + 32);
  *(_QWORD *)(v87 + 2464) = off_24C335AF8;
  *(_QWORD *)(v87 + 2500) = *(_QWORD *)(v124 + 36);
  return v87;
}

void sub_20A7D2AD8(_Unwind_Exception *a1)
{
  uint64_t v1;

  mediaplatform::DatabaseColumnTuple<40ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(v1);
  _Unwind_Resume(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<39ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(uint64_t a1)
{
  *(_QWORD *)(a1 + 2464) = off_24C335D90;
  if (*(char *)(a1 + 2495) < 0)
    operator delete(*(void **)(a1 + 2472));
  return mediaplatform::DatabaseColumnTuple<40ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<41ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::DatabaseColumnTuple(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47)
{
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  int v63;
  int v64;
  int v65;
  uint64_t v66;
  int v67;
  int v68;
  int v69;
  int v70;
  int v71;
  int v72;
  int v73;
  int v74;
  int v75;
  int v76;
  int v77;
  int v78;
  uint64_t v79;
  int v80;
  int v81;
  int v82;
  int v83;
  int v84;
  int v85;
  int v86;
  int v87;
  int v88;
  int v89;
  int v90;
  int v91;
  int v92;
  int v93;
  std::string *v94;
  int v95;
  std::string *v96;
  __int128 v97;
  uint64_t v99;
  int v100;
  int v101;
  uint64_t v102;
  int v103;
  uint64_t v104;
  int v105;
  uint64_t v106;
  int v107;
  uint64_t v108;
  int v109;
  int v110;
  uint64_t v111;
  int v112;
  uint64_t v113;
  int v114;
  int v115;
  uint64_t v116;
  int v117;
  int v118;
  uint64_t v119;
  int v120;
  int v121;
  uint64_t v122;
  int v123;
  uint64_t v124;
  uint64_t v125;
  int v126;
  uint64_t v127;
  int v128;
  uint64_t v129;
  int v130;
  uint64_t v131;
  int v132;
  uint64_t v133;
  int v134;
  uint64_t v135;
  int v136;
  uint64_t v137;
  int v138;
  int v139;
  int v140;
  int v141;
  uint64_t v142;
  int v143;
  uint64_t v144;
  int v145;
  uint64_t v146;
  int v147;
  uint64_t v148;
  int v149;
  int v150;
  int v151;
  int v152;
  int v153;
  int v154;
  int v155;
  int v156;
  int v157;
  int v158;
  int v159;
  int v160;
  int v161;
  std::string v162;
  int v163;
  uint64_t v164;
  uint64_t (**v165)();
  std::string v166;
  int v167;
  uint64_t v168;
  uint64_t (**v169)();
  std::string v170;
  int v171;
  uint64_t v172;
  int v173;
  uint64_t (**v174)();
  std::string v175;
  int v176;
  char v177;
  std::string v178;
  uint64_t (**v179)();
  std::string v180;
  int v181;
  char v182;
  std::string v183;
  uint64_t (**v184)();
  std::string v185;
  int v186;
  uint64_t v187;
  uint64_t (**v188)();
  std::string v189;
  int v190;
  uint64_t v191;
  uint64_t (**v192)();
  std::string v193;
  int v194;
  uint64_t v195;
  uint64_t (**v196)();
  std::string v197;
  int v198;
  uint64_t v199;
  int v200;
  uint64_t (**v201)();
  std::string v202;
  int v203;
  uint64_t v204;
  uint64_t (**v205)();
  std::string v206;
  int v207;
  char v208;
  std::string v209;
  uint64_t (**v210)();
  std::string v211;
  int v212;
  uint64_t v213;
  uint64_t (**v214)();
  std::string v215;
  int v216;
  uint64_t v217;
  int v218;
  uint64_t (**v219)();
  std::string v220;
  int v221;
  uint64_t v222;
  uint64_t (**v223)();
  std::string v224;
  int v225;
  char v226;
  std::string v227;
  uint64_t (**v228)();
  std::string v229;
  int v230;
  char v231;
  std::string v232;
  uint64_t (**v233)();
  std::string v234;
  int v235;
  uint64_t v236;
  int v237;
  uint64_t (**v238)();
  std::string v239;
  int v240;
  char v241;
  std::string v242;
  uint64_t (**v243)();
  std::string v244;
  int v245;
  uint64_t v246;
  uint64_t (**v247)();
  std::string v248;
  int v249;
  uint64_t v250;
  int v251;
  uint64_t (**v252)();
  std::string v253;
  int v254;
  uint64_t v255;
  uint64_t (**v256)();
  std::string v257;
  int v258;
  char v259;
  std::string v260;
  uint64_t (**v261)();
  std::string v262;
  int v263;
  char v264;
  std::string v265;
  uint64_t (**v266)();
  std::string v267;
  int v268;
  char v269;
  std::string v270;
  uint64_t (**v271)();
  std::string v272;
  int v273;
  uint64_t v274;
  uint64_t (**v275)();
  std::string v276;
  int v277;
  uint64_t v278;
  uint64_t (**v279)();
  std::string v280;
  int v281;
  uint64_t v282;
  uint64_t (**v283)();
  std::string v284;
  int v285;
  uint64_t v286;
  uint64_t (**v287)();
  std::string v288;
  int v289;
  uint64_t v290;
  uint64_t (**v291)();
  std::string v292;
  int v293;
  uint64_t v294;
  uint64_t (**v295)();
  std::string v296;
  int v297;
  uint64_t v298;
  uint64_t (**v299)();
  std::string v300;
  int v301;
  uint64_t v302;
  int v303;
  uint64_t (**v304)();
  std::string v305;
  int v306;
  uint64_t v307;
  int v308;
  uint64_t (**v309)();
  std::string v310;
  int v311;
  char v312;
  std::string v313;
  uint64_t (**v314)();
  std::string v315;
  int v316;
  char v317;
  std::string v318;
  uint64_t (**v319)();
  std::string v320;
  int v321;
  uint64_t v322;
  int v323;
  uint64_t (**v324)();
  std::string v325;
  int v326;
  uint64_t v327;
  uint64_t (**v328)();
  std::string v329;
  int v330;
  uint64_t v331;
  uint64_t (**v332)();
  std::string v333;
  int v334;
  uint64_t v335;
  uint64_t (**v336)();
  std::string v337;
  int v338;
  uint64_t v339;
  uint64_t (**v340)();
  std::string v341;
  int v342;
  char v343;
  std::string v344;
  uint64_t (**v345)();
  std::string v346;
  int v347;
  char v348;
  std::string v349;
  uint64_t (**v350)();
  std::string v351;
  int v352;
  uint64_t v353;
  uint64_t (**v354)();
  std::string __s;
  int v356;
  uint64_t v357;
  int v358;
  uint64_t (**v359)();
  std::string v360;
  int v361;
  uint64_t v362;
  int v363;
  uint64_t (**v364)();
  std::string __p;
  int v366;
  uint64_t v367;
  uint64_t (**v368)();
  std::string v369;
  int v370;
  uint64_t v371;
  uint64_t (**v372)();
  std::string v373;
  int v374;
  uint64_t v375;
  int v376;
  uint64_t (**v377)();
  std::string v378;
  int v379;
  char v380;
  std::string v381;
  uint64_t (**v382)();
  std::string v383;
  int v384;
  char v385;
  std::string v386;
  uint64_t (**v387)();
  std::string v388;
  int v389;
  uint64_t v390;
  uint64_t (**v391)();
  std::string v392;
  int v393;
  uint64_t v394;
  uint64_t (**v395)();
  std::string v396;
  int v397;
  uint64_t v398;
  uint64_t (**v399)();
  std::string v400;
  int v401;
  uint64_t v402;
  int v403;
  uint64_t (**v404)();
  std::string v405;
  int v406;
  uint64_t v407;
  uint64_t (**v408)();
  std::string v409;
  int v410;
  char v411;
  std::string v412;
  uint64_t (**v413)();
  std::string v414;
  int v415;
  uint64_t v416;
  uint64_t (**v417)();
  std::string v418;
  int v419;
  uint64_t v420;
  int v421;
  uint64_t (**v422)();
  std::string v423;
  int v424;
  uint64_t v425;
  uint64_t (**v426)();
  std::string v427;
  int v428;
  char v429;
  std::string v430;
  uint64_t (**v431)();
  std::string v432;
  int v433;
  char v434;
  std::string v435;
  uint64_t (**v436)();
  std::string v437;
  int v438;
  uint64_t v439;
  int v440;
  uint64_t (**v441)();
  std::string v442;
  int v443;
  char v444;
  std::string v445;
  uint64_t (**v446)();
  std::string v447;
  int v448;
  uint64_t v449;
  uint64_t (**v450)();
  std::string v451;
  int v452;
  uint64_t v453;
  int v454;
  uint64_t (**v455)();
  std::string v456;
  int v457;
  uint64_t v458;
  uint64_t (**v459)();
  std::string v460;
  int v461;
  char v462;
  std::string v463;
  uint64_t (**v464)();
  std::string v465;
  int v466;
  char v467;
  std::string v468;
  uint64_t (**v469)();
  std::string v470;
  int v471;
  char v472;
  std::string v473;
  uint64_t (**v474)();
  std::string v475;
  int v476;
  uint64_t v477;
  uint64_t (**v478)();
  std::string v479;
  int v480;
  uint64_t v481;
  uint64_t (**v482)();
  std::string v483;
  int v484;
  uint64_t v485;
  uint64_t (**v486)();
  std::string v487;
  int v488;
  uint64_t v489;
  uint64_t (**v490)();
  std::string v491;
  int v492;
  uint64_t v493;
  uint64_t (**v494)();
  std::string v495;
  int v496;
  uint64_t v497;
  uint64_t (**v498)();
  std::string v499;
  int v500;
  uint64_t v501;
  uint64_t (**v502)();
  std::string v503;
  int v504;
  uint64_t v505;
  int v506;
  uint64_t (**v507)();
  std::string v508;
  int v509;
  uint64_t v510;
  int v511;
  uint64_t (**v512)();
  std::string v513;
  int v514;
  char v515;
  std::string v516;
  uint64_t (**v517)();
  std::string v518;
  int v519;
  char v520;
  std::string v521;
  uint64_t (**v522)();
  std::string v523;
  int v524;
  uint64_t v525;
  int v526;
  uint64_t (**v527)();
  std::string v528;
  int v529;
  uint64_t v530;
  uint64_t (**v531)();
  std::string v532;
  int v533;
  uint64_t v534;
  uint64_t (**v535)();
  std::string v536;
  int v537;
  uint64_t v538;
  uint64_t (**v539)();
  std::string v540;
  int v541;
  uint64_t v542;
  uint64_t (**v543)();
  std::string v544;
  int v545;
  char v546;
  std::string v547;
  uint64_t (**v548)();
  std::string v549;
  int v550;
  char v551;
  std::string v552;
  uint64_t (**v553)();
  std::string v554;
  int v555;
  uint64_t v556;
  uint64_t (**v557)();
  std::string v558;
  int v559;
  uint64_t v560;
  int v561;

  v47 = MEMORY[0x24BDAC7A8](a1);
  v50 = v49;
  v52 = v51;
  v54 = v53;
  v56 = v55;
  v58 = v57;
  v59 = v48;
  v124 = v60;
  v61 = v47;
  if (*(char *)(v48 + 31) < 0)
    std::string::__init_copy_ctor_external(&v360, *(const std::string::value_type **)(v48 + 8), *(_QWORD *)(v48 + 16));
  else
    v360 = *(std::string *)(v48 + 8);
  v62 = *(_DWORD *)(v59 + 32);
  v359 = off_24C335B18;
  v362 = *(_QWORD *)(v59 + 36);
  v63 = *(_DWORD *)(v59 + 44);
  v361 = v62;
  v363 = v63;
  if (*(char *)(v58 + 31) < 0)
    std::string::__init_copy_ctor_external(&__s, *(const std::string::value_type **)(v58 + 8), *(_QWORD *)(v58 + 16));
  else
    __s = *(std::string *)(v58 + 8);
  v64 = *(_DWORD *)(v58 + 32);
  v354 = off_24C335B18;
  v357 = *(_QWORD *)(v58 + 36);
  v65 = *(_DWORD *)(v58 + 44);
  v159 = v64;
  v356 = v64;
  v358 = v65;
  if (*(char *)(v56 + 31) < 0)
    std::string::__init_copy_ctor_external(&v351, *(const std::string::value_type **)(v56 + 8), *(_QWORD *)(v56 + 16));
  else
    v351 = *(std::string *)(v56 + 8);
  v157 = *(_DWORD *)(v56 + 32);
  v352 = v157;
  v350 = off_24C335AF8;
  v66 = *(_QWORD *)(v56 + 36);
  v353 = v66;
  v345 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(v54 + 31) < 0)
    std::string::__init_copy_ctor_external(&v346, *(const std::string::value_type **)(v54 + 8), *(_QWORD *)(v54 + 16));
  else
    v346 = *(std::string *)(v54 + 8);
  v347 = *(_DWORD *)(v54 + 32);
  v345 = &off_24C335AB8;
  v348 = *(_BYTE *)(v54 + 36);
  if (*(char *)(v54 + 63) < 0)
    std::string::__init_copy_ctor_external(&v349, *(const std::string::value_type **)(v54 + 40), *(_QWORD *)(v54 + 48));
  else
    v349 = *(std::string *)(v54 + 40);
  v340 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(v52 + 31) < 0)
    std::string::__init_copy_ctor_external(&v341, *(const std::string::value_type **)(v52 + 8), *(_QWORD *)(v52 + 16));
  else
    v341 = *(std::string *)(v52 + 8);
  v342 = *(_DWORD *)(v52 + 32);
  v340 = &off_24C335AB8;
  v343 = *(_BYTE *)(v52 + 36);
  if (*(char *)(v52 + 63) < 0)
    std::string::__init_copy_ctor_external(&v344, *(const std::string::value_type **)(v52 + 40), *(_QWORD *)(v52 + 48));
  else
    v344 = *(std::string *)(v52 + 40);
  if (*(char *)(v50 + 31) < 0)
    std::string::__init_copy_ctor_external(&v337, *(const std::string::value_type **)(v50 + 8), *(_QWORD *)(v50 + 16));
  else
    v337 = *(std::string *)(v50 + 8);
  v150 = *(_DWORD *)(v50 + 32);
  v338 = v150;
  v336 = off_24C335AF8;
  v148 = *(_QWORD *)(v50 + 36);
  v339 = v148;
  if (*(char *)(a9 + 31) < 0)
    std::string::__init_copy_ctor_external(&v333, *(const std::string::value_type **)(a9 + 8), *(_QWORD *)(a9 + 16));
  else
    v333 = *(std::string *)(a9 + 8);
  v147 = *(_DWORD *)(a9 + 32);
  v334 = v147;
  v332 = off_24C335AF8;
  v146 = *(_QWORD *)(a9 + 36);
  v335 = v146;
  if (*(char *)(a10 + 31) < 0)
    std::string::__init_copy_ctor_external(&v329, *(const std::string::value_type **)(a10 + 8), *(_QWORD *)(a10 + 16));
  else
    v329 = *(std::string *)(a10 + 8);
  v145 = *(_DWORD *)(a10 + 32);
  v330 = v145;
  v328 = off_24C335AF8;
  v144 = *(_QWORD *)(a10 + 36);
  v331 = v144;
  if (*(char *)(a11 + 31) < 0)
    std::string::__init_copy_ctor_external(&v325, *(const std::string::value_type **)(a11 + 8), *(_QWORD *)(a11 + 16));
  else
    v325 = *(std::string *)(a11 + 8);
  v143 = *(_DWORD *)(a11 + 32);
  v326 = v143;
  v324 = off_24C335AF8;
  v142 = *(_QWORD *)(a11 + 36);
  v327 = v142;
  if (*(char *)(a12 + 31) < 0)
    std::string::__init_copy_ctor_external(&v320, *(const std::string::value_type **)(a12 + 8), *(_QWORD *)(a12 + 16));
  else
    v320 = *(std::string *)(a12 + 8);
  v67 = *(_DWORD *)(a12 + 32);
  v319 = off_24C335B18;
  v322 = *(_QWORD *)(a12 + 36);
  v68 = *(_DWORD *)(a12 + 44);
  v141 = v67;
  v321 = v67;
  v323 = v68;
  v314 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a13 + 31) < 0)
    std::string::__init_copy_ctor_external(&v315, *(const std::string::value_type **)(a13 + 8), *(_QWORD *)(a13 + 16));
  else
    v315 = *(std::string *)(a13 + 8);
  v316 = *(_DWORD *)(a13 + 32);
  v314 = &off_24C335AB8;
  v317 = *(_BYTE *)(a13 + 36);
  if (*(char *)(a13 + 63) < 0)
    std::string::__init_copy_ctor_external(&v318, *(const std::string::value_type **)(a13 + 40), *(_QWORD *)(a13 + 48));
  else
    v318 = *(std::string *)(a13 + 40);
  v309 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a14 + 31) < 0)
    std::string::__init_copy_ctor_external(&v310, *(const std::string::value_type **)(a14 + 8), *(_QWORD *)(a14 + 16));
  else
    v310 = *(std::string *)(a14 + 8);
  v311 = *(_DWORD *)(a14 + 32);
  v309 = &off_24C335AB8;
  v312 = *(_BYTE *)(a14 + 36);
  if (*(char *)(a14 + 63) < 0)
    std::string::__init_copy_ctor_external(&v313, *(const std::string::value_type **)(a14 + 40), *(_QWORD *)(a14 + 48));
  else
    v313 = *(std::string *)(a14 + 40);
  if (*(char *)(a15 + 31) < 0)
    std::string::__init_copy_ctor_external(&v305, *(const std::string::value_type **)(a15 + 8), *(_QWORD *)(a15 + 16));
  else
    v305 = *(std::string *)(a15 + 8);
  v69 = *(_DWORD *)(a15 + 32);
  v304 = off_24C335B18;
  v307 = *(_QWORD *)(a15 + 36);
  v70 = *(_DWORD *)(a15 + 44);
  v140 = v69;
  v306 = v69;
  v308 = v70;
  if (*(char *)(a16 + 31) < 0)
    std::string::__init_copy_ctor_external(&v300, *(const std::string::value_type **)(a16 + 8), *(_QWORD *)(a16 + 16));
  else
    v300 = *(std::string *)(a16 + 8);
  v71 = *(_DWORD *)(a16 + 32);
  v299 = off_24C335B18;
  v302 = *(_QWORD *)(a16 + 36);
  v72 = *(_DWORD *)(a16 + 44);
  v139 = v71;
  v301 = v71;
  v303 = v72;
  if (*(char *)(a17 + 31) < 0)
    std::string::__init_copy_ctor_external(&v296, *(const std::string::value_type **)(a17 + 8), *(_QWORD *)(a17 + 16));
  else
    v296 = *(std::string *)(a17 + 8);
  v138 = *(_DWORD *)(a17 + 32);
  v297 = v138;
  v295 = off_24C335AF8;
  v137 = *(_QWORD *)(a17 + 36);
  v298 = v137;
  if (*(char *)(a18 + 31) < 0)
    std::string::__init_copy_ctor_external(&v292, *(const std::string::value_type **)(a18 + 8), *(_QWORD *)(a18 + 16));
  else
    v292 = *(std::string *)(a18 + 8);
  v136 = *(_DWORD *)(a18 + 32);
  v293 = v136;
  v291 = off_24C335AF8;
  v135 = *(_QWORD *)(a18 + 36);
  v294 = v135;
  if (*(char *)(a19 + 31) < 0)
    std::string::__init_copy_ctor_external(&v288, *(const std::string::value_type **)(a19 + 8), *(_QWORD *)(a19 + 16));
  else
    v288 = *(std::string *)(a19 + 8);
  v134 = *(_DWORD *)(a19 + 32);
  v289 = v134;
  v287 = off_24C335AF8;
  v133 = *(_QWORD *)(a19 + 36);
  v290 = v133;
  if (*(char *)(a20 + 31) < 0)
    std::string::__init_copy_ctor_external(&v284, *(const std::string::value_type **)(a20 + 8), *(_QWORD *)(a20 + 16));
  else
    v284 = *(std::string *)(a20 + 8);
  v132 = *(_DWORD *)(a20 + 32);
  v285 = v132;
  v283 = off_24C335AF8;
  v131 = *(_QWORD *)(a20 + 36);
  v286 = v131;
  if (*(char *)(a21 + 31) < 0)
    std::string::__init_copy_ctor_external(&v280, *(const std::string::value_type **)(a21 + 8), *(_QWORD *)(a21 + 16));
  else
    v280 = *(std::string *)(a21 + 8);
  v130 = *(_DWORD *)(a21 + 32);
  v281 = v130;
  v279 = off_24C335AF8;
  v129 = *(_QWORD *)(a21 + 36);
  v282 = v129;
  if (*(char *)(a22 + 31) < 0)
    std::string::__init_copy_ctor_external(&v276, *(const std::string::value_type **)(a22 + 8), *(_QWORD *)(a22 + 16));
  else
    v276 = *(std::string *)(a22 + 8);
  v128 = *(_DWORD *)(a22 + 32);
  v277 = v128;
  v275 = off_24C335AF8;
  v127 = *(_QWORD *)(a22 + 36);
  v278 = v127;
  if (*(char *)(a23 + 31) < 0)
    std::string::__init_copy_ctor_external(&v272, *(const std::string::value_type **)(a23 + 8), *(_QWORD *)(a23 + 16));
  else
    v272 = *(std::string *)(a23 + 8);
  v126 = *(_DWORD *)(a23 + 32);
  v273 = v126;
  v271 = off_24C335AF8;
  v125 = *(_QWORD *)(a23 + 36);
  v274 = v125;
  v266 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a24 + 31) < 0)
    std::string::__init_copy_ctor_external(&v267, *(const std::string::value_type **)(a24 + 8), *(_QWORD *)(a24 + 16));
  else
    v267 = *(std::string *)(a24 + 8);
  v268 = *(_DWORD *)(a24 + 32);
  v266 = &off_24C335AB8;
  v269 = *(_BYTE *)(a24 + 36);
  if (*(char *)(a24 + 63) < 0)
    std::string::__init_copy_ctor_external(&v270, *(const std::string::value_type **)(a24 + 40), *(_QWORD *)(a24 + 48));
  else
    v270 = *(std::string *)(a24 + 40);
  v261 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a25 + 31) < 0)
    std::string::__init_copy_ctor_external(&v262, *(const std::string::value_type **)(a25 + 8), *(_QWORD *)(a25 + 16));
  else
    v262 = *(std::string *)(a25 + 8);
  v263 = *(_DWORD *)(a25 + 32);
  v261 = &off_24C335AB8;
  v264 = *(_BYTE *)(a25 + 36);
  if (*(char *)(a25 + 63) < 0)
    std::string::__init_copy_ctor_external(&v265, *(const std::string::value_type **)(a25 + 40), *(_QWORD *)(a25 + 48));
  else
    v265 = *(std::string *)(a25 + 40);
  v256 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a26 + 31) < 0)
    std::string::__init_copy_ctor_external(&v257, *(const std::string::value_type **)(a26 + 8), *(_QWORD *)(a26 + 16));
  else
    v257 = *(std::string *)(a26 + 8);
  v258 = *(_DWORD *)(a26 + 32);
  v256 = &off_24C335AB8;
  v259 = *(_BYTE *)(a26 + 36);
  if (*(char *)(a26 + 63) < 0)
    std::string::__init_copy_ctor_external(&v260, *(const std::string::value_type **)(a26 + 40), *(_QWORD *)(a26 + 48));
  else
    v260 = *(std::string *)(a26 + 40);
  if (*(char *)(a27 + 31) < 0)
    std::string::__init_copy_ctor_external(&v253, *(const std::string::value_type **)(a27 + 8), *(_QWORD *)(a27 + 16));
  else
    v253 = *(std::string *)(a27 + 8);
  v123 = *(_DWORD *)(a27 + 32);
  v254 = v123;
  v252 = off_24C335AF8;
  v122 = *(_QWORD *)(a27 + 36);
  v255 = v122;
  if (*(char *)(a28 + 31) < 0)
    std::string::__init_copy_ctor_external(&v248, *(const std::string::value_type **)(a28 + 8), *(_QWORD *)(a28 + 16));
  else
    v248 = *(std::string *)(a28 + 8);
  v73 = *(_DWORD *)(a28 + 32);
  v247 = off_24C335B18;
  v250 = *(_QWORD *)(a28 + 36);
  v74 = *(_DWORD *)(a28 + 44);
  v121 = v73;
  v249 = v73;
  v251 = v74;
  if (*(char *)(a29 + 31) < 0)
    std::string::__init_copy_ctor_external(&v244, *(const std::string::value_type **)(a29 + 8), *(_QWORD *)(a29 + 16));
  else
    v244 = *(std::string *)(a29 + 8);
  v120 = *(_DWORD *)(a29 + 32);
  v245 = v120;
  v243 = off_24C335AF8;
  v119 = *(_QWORD *)(a29 + 36);
  v246 = v119;
  v238 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a30 + 31) < 0)
    std::string::__init_copy_ctor_external(&v239, *(const std::string::value_type **)(a30 + 8), *(_QWORD *)(a30 + 16));
  else
    v239 = *(std::string *)(a30 + 8);
  v240 = *(_DWORD *)(a30 + 32);
  v238 = &off_24C335AB8;
  v241 = *(_BYTE *)(a30 + 36);
  if (*(char *)(a30 + 63) < 0)
    std::string::__init_copy_ctor_external(&v242, *(const std::string::value_type **)(a30 + 40), *(_QWORD *)(a30 + 48));
  else
    v242 = *(std::string *)(a30 + 40);
  if (*(char *)(a31 + 31) < 0)
    std::string::__init_copy_ctor_external(&v234, *(const std::string::value_type **)(a31 + 8), *(_QWORD *)(a31 + 16));
  else
    v234 = *(std::string *)(a31 + 8);
  v75 = *(_DWORD *)(a31 + 32);
  v233 = off_24C335B18;
  v236 = *(_QWORD *)(a31 + 36);
  v76 = *(_DWORD *)(a31 + 44);
  v118 = v75;
  v235 = v75;
  v237 = v76;
  v228 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a32 + 31) < 0)
    std::string::__init_copy_ctor_external(&v229, *(const std::string::value_type **)(a32 + 8), *(_QWORD *)(a32 + 16));
  else
    v229 = *(std::string *)(a32 + 8);
  v230 = *(_DWORD *)(a32 + 32);
  v228 = &off_24C335AB8;
  v231 = *(_BYTE *)(a32 + 36);
  if (*(char *)(a32 + 63) < 0)
    std::string::__init_copy_ctor_external(&v232, *(const std::string::value_type **)(a32 + 40), *(_QWORD *)(a32 + 48));
  else
    v232 = *(std::string *)(a32 + 40);
  v223 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a33 + 31) < 0)
    std::string::__init_copy_ctor_external(&v224, *(const std::string::value_type **)(a33 + 8), *(_QWORD *)(a33 + 16));
  else
    v224 = *(std::string *)(a33 + 8);
  v225 = *(_DWORD *)(a33 + 32);
  v223 = &off_24C335AB8;
  v226 = *(_BYTE *)(a33 + 36);
  if (*(char *)(a33 + 63) < 0)
    std::string::__init_copy_ctor_external(&v227, *(const std::string::value_type **)(a33 + 40), *(_QWORD *)(a33 + 48));
  else
    v227 = *(std::string *)(a33 + 40);
  if (*(char *)(a34 + 31) < 0)
    std::string::__init_copy_ctor_external(&v220, *(const std::string::value_type **)(a34 + 8), *(_QWORD *)(a34 + 16));
  else
    v220 = *(std::string *)(a34 + 8);
  v117 = *(_DWORD *)(a34 + 32);
  v221 = v117;
  v219 = off_24C335AF8;
  v116 = *(_QWORD *)(a34 + 36);
  v222 = v116;
  if (*(char *)(a35 + 31) < 0)
    std::string::__init_copy_ctor_external(&v215, *(const std::string::value_type **)(a35 + 8), *(_QWORD *)(a35 + 16));
  else
    v215 = *(std::string *)(a35 + 8);
  v77 = *(_DWORD *)(a35 + 32);
  v214 = off_24C335B18;
  v217 = *(_QWORD *)(a35 + 36);
  v78 = *(_DWORD *)(a35 + 44);
  v115 = v77;
  v216 = v77;
  v218 = v78;
  if (*(char *)(a36 + 31) < 0)
    std::string::__init_copy_ctor_external(&v211, *(const std::string::value_type **)(a36 + 8), *(_QWORD *)(a36 + 16));
  else
    v211 = *(std::string *)(a36 + 8);
  v114 = *(_DWORD *)(a36 + 32);
  v212 = v114;
  v210 = off_24C335AF8;
  v79 = *(_QWORD *)(a36 + 36);
  v213 = v79;
  v205 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a37 + 31) < 0)
    std::string::__init_copy_ctor_external(&v206, *(const std::string::value_type **)(a37 + 8), *(_QWORD *)(a37 + 16));
  else
    v206 = *(std::string *)(a37 + 8);
  v207 = *(_DWORD *)(a37 + 32);
  v205 = &off_24C335AB8;
  v208 = *(_BYTE *)(a37 + 36);
  v113 = v79;
  if (*(char *)(a37 + 63) < 0)
    std::string::__init_copy_ctor_external(&v209, *(const std::string::value_type **)(a37 + 40), *(_QWORD *)(a37 + 48));
  else
    v209 = *(std::string *)(a37 + 40);
  v201 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a38 + 31) < 0)
    std::string::__init_copy_ctor_external(&v202, *(const std::string::value_type **)(a38 + 8), *(_QWORD *)(a38 + 16));
  else
    v202 = *(std::string *)(a38 + 8);
  v112 = *(_DWORD *)(a38 + 32);
  v203 = v112;
  v201 = off_24C335AF8;
  v111 = *(_QWORD *)(a38 + 36);
  v204 = v111;
  v196 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a39 + 31) < 0)
    std::string::__init_copy_ctor_external(&v197, *(const std::string::value_type **)(a39 + 8), *(_QWORD *)(a39 + 16));
  else
    v197 = *(std::string *)(a39 + 8);
  v80 = *(_DWORD *)(a39 + 32);
  v196 = off_24C335B18;
  v199 = *(_QWORD *)(a39 + 36);
  v81 = *(_DWORD *)(a39 + 44);
  v110 = v80;
  v198 = v80;
  v200 = v81;
  v192 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a40 + 31) < 0)
    std::string::__init_copy_ctor_external(&v193, *(const std::string::value_type **)(a40 + 8), *(_QWORD *)(a40 + 16));
  else
    v193 = *(std::string *)(a40 + 8);
  v109 = *(_DWORD *)(a40 + 32);
  v194 = v109;
  v192 = off_24C335AF8;
  v108 = *(_QWORD *)(a40 + 36);
  v195 = v108;
  v188 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a41 + 31) < 0)
    std::string::__init_copy_ctor_external(&v189, *(const std::string::value_type **)(a41 + 8), *(_QWORD *)(a41 + 16));
  else
    v189 = *(std::string *)(a41 + 8);
  v107 = *(_DWORD *)(a41 + 32);
  v190 = v107;
  v188 = off_24C335AF8;
  v106 = *(_QWORD *)(a41 + 36);
  v191 = v106;
  v184 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a42 + 31) < 0)
    std::string::__init_copy_ctor_external(&v185, *(const std::string::value_type **)(a42 + 8), *(_QWORD *)(a42 + 16));
  else
    v185 = *(std::string *)(a42 + 8);
  v105 = *(_DWORD *)(a42 + 32);
  v186 = v105;
  v184 = off_24C335AF8;
  v104 = *(_QWORD *)(a42 + 36);
  v187 = v104;
  v179 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a43 + 31) < 0)
    std::string::__init_copy_ctor_external(&v180, *(const std::string::value_type **)(a43 + 8), *(_QWORD *)(a43 + 16));
  else
    v180 = *(std::string *)(a43 + 8);
  v181 = *(_DWORD *)(a43 + 32);
  v179 = &off_24C335AB8;
  v182 = *(_BYTE *)(a43 + 36);
  if (*(char *)(a43 + 63) < 0)
    std::string::__init_copy_ctor_external(&v183, *(const std::string::value_type **)(a43 + 40), *(_QWORD *)(a43 + 48));
  else
    v183 = *(std::string *)(a43 + 40);
  v174 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a44 + 31) < 0)
    std::string::__init_copy_ctor_external(&v175, *(const std::string::value_type **)(a44 + 8), *(_QWORD *)(a44 + 16));
  else
    v175 = *(std::string *)(a44 + 8);
  v176 = *(_DWORD *)(a44 + 32);
  v174 = &off_24C335AB8;
  v177 = *(_BYTE *)(a44 + 36);
  if (*(char *)(a44 + 63) < 0)
    std::string::__init_copy_ctor_external(&v178, *(const std::string::value_type **)(a44 + 40), *(_QWORD *)(a44 + 48));
  else
    v178 = *(std::string *)(a44 + 40);
  v169 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a45 + 31) < 0)
    std::string::__init_copy_ctor_external(&v170, *(const std::string::value_type **)(a45 + 8), *(_QWORD *)(a45 + 16));
  else
    v170 = *(std::string *)(a45 + 8);
  v82 = *(_DWORD *)(a45 + 32);
  v169 = off_24C335B18;
  v172 = *(_QWORD *)(a45 + 36);
  v83 = *(_DWORD *)(a45 + 44);
  v103 = v82;
  v171 = v82;
  v173 = v83;
  v165 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a46 + 31) < 0)
    std::string::__init_copy_ctor_external(&v166, *(const std::string::value_type **)(a46 + 8), *(_QWORD *)(a46 + 16));
  else
    v166 = *(std::string *)(a46 + 8);
  v84 = *(_DWORD *)(a46 + 32);
  v167 = v84;
  v165 = off_24C335AF8;
  v102 = *(_QWORD *)(a46 + 36);
  v168 = v102;
  if (*(char *)(a47 + 31) < 0)
    std::string::__init_copy_ctor_external(&v162, *(const std::string::value_type **)(a47 + 8), *(_QWORD *)(a47 + 16));
  else
    v162 = *(std::string *)(a47 + 8);
  v100 = *(_DWORD *)(a47 + 32);
  v163 = v100;
  v99 = *(_QWORD *)(a47 + 36);
  v164 = v99;
  v557 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v558, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
  else
    v558 = __s;
  v101 = v84;
  v557 = off_24C335B18;
  v560 = v357;
  v559 = v159;
  v561 = v358;
  v553 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v351.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v554, v351.__r_.__value_.__l.__data_, v351.__r_.__value_.__l.__size_);
  else
    v554 = v351;
  v555 = v157;
  v553 = off_24C335AF8;
  v556 = v66;
  v548 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v346.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v549, v346.__r_.__value_.__l.__data_, v346.__r_.__value_.__l.__size_);
  else
    v549 = v346;
  v550 = v347;
  v548 = &off_24C335AB8;
  v551 = v348;
  if (SHIBYTE(v349.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v552, v349.__r_.__value_.__l.__data_, v349.__r_.__value_.__l.__size_);
  else
    v552 = v349;
  v543 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v341.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v544, v341.__r_.__value_.__l.__data_, v341.__r_.__value_.__l.__size_);
  else
    v544 = v341;
  v545 = v342;
  v543 = &off_24C335AB8;
  v546 = v343;
  if (SHIBYTE(v344.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v547, v344.__r_.__value_.__l.__data_, v344.__r_.__value_.__l.__size_);
  else
    v547 = v344;
  v539 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v337.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v540, v337.__r_.__value_.__l.__data_, v337.__r_.__value_.__l.__size_);
  else
    v540 = v337;
  v541 = v150;
  v539 = off_24C335AF8;
  v542 = v148;
  v535 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v333.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v536, v333.__r_.__value_.__l.__data_, v333.__r_.__value_.__l.__size_);
  else
    v536 = v333;
  v537 = v147;
  v535 = off_24C335AF8;
  v538 = v146;
  v531 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v329.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v532, v329.__r_.__value_.__l.__data_, v329.__r_.__value_.__l.__size_);
  else
    v532 = v329;
  v533 = v145;
  v531 = off_24C335AF8;
  v534 = v144;
  v527 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v325.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v528, v325.__r_.__value_.__l.__data_, v325.__r_.__value_.__l.__size_);
  else
    v528 = v325;
  v529 = v143;
  v527 = off_24C335AF8;
  v530 = v142;
  v522 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v320.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v523, v320.__r_.__value_.__l.__data_, v320.__r_.__value_.__l.__size_);
  else
    v523 = v320;
  v522 = off_24C335B18;
  v525 = v322;
  v524 = v141;
  v526 = v323;
  v517 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v315.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v518, v315.__r_.__value_.__l.__data_, v315.__r_.__value_.__l.__size_);
  else
    v518 = v315;
  v519 = v316;
  v517 = &off_24C335AB8;
  v520 = v317;
  if (SHIBYTE(v318.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v521, v318.__r_.__value_.__l.__data_, v318.__r_.__value_.__l.__size_);
  else
    v521 = v318;
  v512 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v310.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v513, v310.__r_.__value_.__l.__data_, v310.__r_.__value_.__l.__size_);
  else
    v513 = v310;
  v514 = v311;
  v512 = &off_24C335AB8;
  v515 = v312;
  if (SHIBYTE(v313.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v516, v313.__r_.__value_.__l.__data_, v313.__r_.__value_.__l.__size_);
  else
    v516 = v313;
  v507 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v305.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v508, v305.__r_.__value_.__l.__data_, v305.__r_.__value_.__l.__size_);
  else
    v508 = v305;
  v507 = off_24C335B18;
  v510 = v307;
  v509 = v140;
  v511 = v308;
  v502 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v300.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v503, v300.__r_.__value_.__l.__data_, v300.__r_.__value_.__l.__size_);
  else
    v503 = v300;
  v502 = off_24C335B18;
  v505 = v302;
  v504 = v139;
  v506 = v303;
  v498 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v296.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v499, v296.__r_.__value_.__l.__data_, v296.__r_.__value_.__l.__size_);
  else
    v499 = v296;
  v500 = v138;
  v498 = off_24C335AF8;
  v501 = v137;
  v494 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v292.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v495, v292.__r_.__value_.__l.__data_, v292.__r_.__value_.__l.__size_);
  else
    v495 = v292;
  v496 = v136;
  v494 = off_24C335AF8;
  v497 = v135;
  v490 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v288.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v491, v288.__r_.__value_.__l.__data_, v288.__r_.__value_.__l.__size_);
  else
    v491 = v288;
  v492 = v134;
  v490 = off_24C335AF8;
  v493 = v133;
  v486 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v284.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v487, v284.__r_.__value_.__l.__data_, v284.__r_.__value_.__l.__size_);
  else
    v487 = v284;
  v488 = v132;
  v486 = off_24C335AF8;
  v489 = v131;
  v482 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v280.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v483, v280.__r_.__value_.__l.__data_, v280.__r_.__value_.__l.__size_);
  else
    v483 = v280;
  v484 = v130;
  v482 = off_24C335AF8;
  v485 = v129;
  v478 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v276.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v479, v276.__r_.__value_.__l.__data_, v276.__r_.__value_.__l.__size_);
  else
    v479 = v276;
  v480 = v128;
  v478 = off_24C335AF8;
  v481 = v127;
  v474 = (uint64_t (**)())off_24C335D90;
  v160 = SHIBYTE(v272.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v272.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v475, v272.__r_.__value_.__l.__data_, v272.__r_.__value_.__l.__size_);
  else
    v475 = v272;
  v476 = v126;
  v474 = off_24C335AF8;
  v477 = v125;
  v469 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v267.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v470, v267.__r_.__value_.__l.__data_, v267.__r_.__value_.__l.__size_);
  else
    v470 = v267;
  v471 = v268;
  v469 = &off_24C335AB8;
  v472 = v269;
  if (SHIBYTE(v270.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v473, v270.__r_.__value_.__l.__data_, v270.__r_.__value_.__l.__size_);
  else
    v473 = v270;
  v464 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v262.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v465, v262.__r_.__value_.__l.__data_, v262.__r_.__value_.__l.__size_);
  else
    v465 = v262;
  v466 = v263;
  v464 = &off_24C335AB8;
  v467 = v264;
  if (SHIBYTE(v265.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v468, v265.__r_.__value_.__l.__data_, v265.__r_.__value_.__l.__size_);
  else
    v468 = v265;
  v459 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v257.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v460, v257.__r_.__value_.__l.__data_, v257.__r_.__value_.__l.__size_);
  else
    v460 = v257;
  v461 = v258;
  v459 = &off_24C335AB8;
  v462 = v259;
  if (SHIBYTE(v260.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v463, v260.__r_.__value_.__l.__data_, v260.__r_.__value_.__l.__size_);
  else
    v463 = v260;
  v455 = (uint64_t (**)())off_24C335D90;
  v85 = SHIBYTE(v253.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v253.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v456, v253.__r_.__value_.__l.__data_, v253.__r_.__value_.__l.__size_);
  else
    v456 = v253;
  v457 = v123;
  v455 = off_24C335AF8;
  v458 = v122;
  v450 = (uint64_t (**)())off_24C335D90;
  v158 = SHIBYTE(v248.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v248.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v451, v248.__r_.__value_.__l.__data_, v248.__r_.__value_.__l.__size_);
  else
    v451 = v248;
  v450 = off_24C335B18;
  v453 = v250;
  v452 = v121;
  v454 = v251;
  v446 = (uint64_t (**)())off_24C335D90;
  v161 = SHIBYTE(v244.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v244.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v447, v244.__r_.__value_.__l.__data_, v244.__r_.__value_.__l.__size_);
  else
    v447 = v244;
  v448 = v120;
  v446 = off_24C335AF8;
  v449 = v119;
  v441 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v239.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v442, v239.__r_.__value_.__l.__data_, v239.__r_.__value_.__l.__size_);
  else
    v442 = v239;
  v443 = v240;
  v441 = &off_24C335AB8;
  v444 = v241;
  if (SHIBYTE(v242.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v445, v242.__r_.__value_.__l.__data_, v242.__r_.__value_.__l.__size_);
  else
    v445 = v242;
  v436 = (uint64_t (**)())off_24C335D90;
  v86 = SHIBYTE(v234.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v234.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v437, v234.__r_.__value_.__l.__data_, v234.__r_.__value_.__l.__size_);
  else
    v437 = v234;
  v436 = off_24C335B18;
  v439 = v236;
  v438 = v118;
  v440 = v237;
  v431 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v229.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v432, v229.__r_.__value_.__l.__data_, v229.__r_.__value_.__l.__size_);
  else
    v432 = v229;
  v433 = v230;
  v431 = &off_24C335AB8;
  v434 = v231;
  if (SHIBYTE(v232.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v435, v232.__r_.__value_.__l.__data_, v232.__r_.__value_.__l.__size_);
  else
    v435 = v232;
  v426 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v224.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v427, v224.__r_.__value_.__l.__data_, v224.__r_.__value_.__l.__size_);
  else
    v427 = v224;
  v428 = v225;
  v426 = &off_24C335AB8;
  v429 = v226;
  if (SHIBYTE(v227.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v430, v227.__r_.__value_.__l.__data_, v227.__r_.__value_.__l.__size_);
  else
    v430 = v227;
  v422 = (uint64_t (**)())off_24C335D90;
  v156 = SHIBYTE(v220.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v220.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v423, v220.__r_.__value_.__l.__data_, v220.__r_.__value_.__l.__size_);
  else
    v423 = v220;
  v424 = v117;
  v422 = off_24C335AF8;
  v425 = v116;
  v417 = (uint64_t (**)())off_24C335D90;
  v155 = SHIBYTE(v215.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v215.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v418, v215.__r_.__value_.__l.__data_, v215.__r_.__value_.__l.__size_);
  else
    v418 = v215;
  v417 = off_24C335B18;
  v420 = v217;
  v419 = v115;
  v421 = v218;
  v413 = (uint64_t (**)())off_24C335D90;
  v154 = SHIBYTE(v211.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v211.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v414, v211.__r_.__value_.__l.__data_, v211.__r_.__value_.__l.__size_);
  else
    v414 = v211;
  v415 = v114;
  v413 = off_24C335AF8;
  v416 = v113;
  v408 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v206.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v409, v206.__r_.__value_.__l.__data_, v206.__r_.__value_.__l.__size_);
  else
    v409 = v206;
  v410 = v207;
  v408 = &off_24C335AB8;
  v411 = v208;
  if (SHIBYTE(v209.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v412, v209.__r_.__value_.__l.__data_, v209.__r_.__value_.__l.__size_);
  else
    v412 = v209;
  v404 = (uint64_t (**)())off_24C335D90;
  v87 = SHIBYTE(v202.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v202.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v405, v202.__r_.__value_.__l.__data_, v202.__r_.__value_.__l.__size_);
  else
    v405 = v202;
  v406 = v112;
  v404 = off_24C335AF8;
  v407 = v111;
  v399 = (uint64_t (**)())off_24C335D90;
  v152 = SHIBYTE(v197.__r_.__value_.__r.__words[2]);
  v153 = v87;
  if (SHIBYTE(v197.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v400, v197.__r_.__value_.__l.__data_, v197.__r_.__value_.__l.__size_);
  else
    v400 = v197;
  v399 = off_24C335B18;
  v402 = v199;
  v401 = v110;
  v403 = v200;
  v395 = (uint64_t (**)())off_24C335D90;
  v88 = SHIBYTE(v193.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v193.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v396, v193.__r_.__value_.__l.__data_, v193.__r_.__value_.__l.__size_);
  else
    v396 = v193;
  v397 = v109;
  v395 = off_24C335AF8;
  v398 = v108;
  v391 = (uint64_t (**)())off_24C335D90;
  v89 = SHIBYTE(v189.__r_.__value_.__r.__words[2]);
  v151 = v86;
  if (SHIBYTE(v189.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v392, v189.__r_.__value_.__l.__data_, v189.__r_.__value_.__l.__size_);
  else
    v392 = v189;
  v393 = v107;
  v391 = off_24C335AF8;
  v394 = v106;
  v387 = (uint64_t (**)())off_24C335D90;
  v90 = SHIBYTE(v185.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v185.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v388, v185.__r_.__value_.__l.__data_, v185.__r_.__value_.__l.__size_);
  else
    v388 = v185;
  v389 = v105;
  v387 = off_24C335AF8;
  v390 = v104;
  v382 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v180.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v383, v180.__r_.__value_.__l.__data_, v180.__r_.__value_.__l.__size_);
  else
    v383 = v180;
  v384 = v181;
  v382 = &off_24C335AB8;
  v385 = v182;
  if (SHIBYTE(v183.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v386, v183.__r_.__value_.__l.__data_, v183.__r_.__value_.__l.__size_);
  else
    v386 = v183;
  v377 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v175.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v378, v175.__r_.__value_.__l.__data_, v175.__r_.__value_.__l.__size_);
  else
    v378 = v175;
  v379 = v176;
  v377 = &off_24C335AB8;
  v380 = v177;
  if (SHIBYTE(v178.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v381, v178.__r_.__value_.__l.__data_, v178.__r_.__value_.__l.__size_);
  else
    v381 = v178;
  v372 = (uint64_t (**)())off_24C335D90;
  v91 = SHIBYTE(v170.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v170.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v373, v170.__r_.__value_.__l.__data_, v170.__r_.__value_.__l.__size_);
  else
    v373 = v170;
  v149 = v85;
  v372 = off_24C335B18;
  v375 = v172;
  v374 = v103;
  v376 = v173;
  v368 = (uint64_t (**)())off_24C335D90;
  v92 = SHIBYTE(v166.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v166.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v369, v166.__r_.__value_.__l.__data_, v166.__r_.__value_.__l.__size_);
  else
    v369 = v166;
  v370 = v101;
  v368 = off_24C335AF8;
  v371 = v102;
  v364 = (uint64_t (**)())off_24C335D90;
  v93 = SHIBYTE(v162.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v162.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&__p, v162.__r_.__value_.__l.__data_, v162.__r_.__value_.__l.__size_);
  else
    __p = v162;
  v366 = v100;
  v364 = off_24C335AF8;
  v367 = v99;
  mediaplatform::DatabaseColumnTuple<43ul,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::DatabaseColumnTuple(v61, (uint64_t)&v557, (uint64_t)&v553, (uint64_t)&v548, (uint64_t)&v543, (uint64_t)&v539, (uint64_t)&v535, (uint64_t)&v531, (uint64_t)&v527, (uint64_t)&v522, (uint64_t)&v517, (uint64_t)&v512, (uint64_t)&v507, (uint64_t)&v502, (uint64_t)&v498, (uint64_t)&v494, (uint64_t)&v490, (uint64_t)&v486, (uint64_t)&v482,
    (uint64_t)&v478,
    (uint64_t)&v474,
    (uint64_t)&v469,
    (uint64_t)&v464,
    (uint64_t)&v459,
    (uint64_t)&v455,
    (uint64_t)&v450,
    (uint64_t)&v446,
    (uint64_t)&v441,
    (uint64_t)&v436,
    (uint64_t)&v431,
    (uint64_t)&v426,
    (uint64_t)&v422,
    (uint64_t)&v417,
    (uint64_t)&v413,
    (uint64_t)&v408,
    (uint64_t)&v404,
    (uint64_t)&v399,
    (uint64_t)&v395,
    (uint64_t)&v391,
    (uint64_t)&v387,
    (uint64_t)&v382,
    (uint64_t)&v377,
    (uint64_t)&v372,
    (uint64_t)&v368,
    (uint64_t)&v364);
  v364 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v368 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v369.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v369.__r_.__value_.__l.__data_);
  v372 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v373.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v373.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v377);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v382);
  v387 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v388.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v388.__r_.__value_.__l.__data_);
  v391 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v392.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v392.__r_.__value_.__l.__data_);
  v395 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v396.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v396.__r_.__value_.__l.__data_);
  v399 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v400.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v400.__r_.__value_.__l.__data_);
  v404 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v405.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v405.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v408);
  v413 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v414.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v414.__r_.__value_.__l.__data_);
  v417 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v418.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v418.__r_.__value_.__l.__data_);
  v422 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v423.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v423.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v426);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v431);
  v436 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v437.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v437.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v441);
  v446 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v447.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v447.__r_.__value_.__l.__data_);
  v450 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v451.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v451.__r_.__value_.__l.__data_);
  v455 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v456.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v456.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v459);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v464);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v469);
  v474 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v475.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v475.__r_.__value_.__l.__data_);
  v478 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v479.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v479.__r_.__value_.__l.__data_);
  v482 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v483.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v483.__r_.__value_.__l.__data_);
  v486 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v487.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v487.__r_.__value_.__l.__data_);
  v490 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v491.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v491.__r_.__value_.__l.__data_);
  v494 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v495.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v495.__r_.__value_.__l.__data_);
  v498 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v499.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v499.__r_.__value_.__l.__data_);
  v502 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v503.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v503.__r_.__value_.__l.__data_);
  v507 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v508.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v508.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v512);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v517);
  v522 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v523.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v523.__r_.__value_.__l.__data_);
  v527 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v528.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v528.__r_.__value_.__l.__data_);
  v531 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v532.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v532.__r_.__value_.__l.__data_);
  v535 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v536.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v536.__r_.__value_.__l.__data_);
  v539 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v540.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v540.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v543);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v548);
  v553 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v554.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v554.__r_.__value_.__l.__data_);
  v557 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v558.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v558.__r_.__value_.__l.__data_);
  *(_QWORD *)(v61 + 2320) = off_24C335D90;
  v94 = (std::string *)(v61 + 2328);
  v95 = SHIBYTE(v360.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v360.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v94, v360.__r_.__value_.__l.__data_, v360.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v94->__r_.__value_.__l.__data_ = *(_OWORD *)&v360.__r_.__value_.__l.__data_;
    *(_QWORD *)(v61 + 2344) = *((_QWORD *)&v360.__r_.__value_.__l + 2);
  }
  *(_DWORD *)(v61 + 2352) = v361;
  *(_QWORD *)(v61 + 2320) = off_24C335B18;
  *(_QWORD *)(v61 + 2356) = v362;
  *(_DWORD *)(v61 + 2364) = v363;
  if (v93 < 0)
    operator delete(v162.__r_.__value_.__l.__data_);
  v165 = (uint64_t (**)())off_24C335D90;
  if (v92 < 0)
    operator delete(v166.__r_.__value_.__l.__data_);
  v169 = (uint64_t (**)())off_24C335D90;
  if (v91 < 0)
    operator delete(v170.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v174);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v179);
  v184 = (uint64_t (**)())off_24C335D90;
  if (v90 < 0)
    operator delete(v185.__r_.__value_.__l.__data_);
  v188 = (uint64_t (**)())off_24C335D90;
  if (v89 < 0)
    operator delete(v189.__r_.__value_.__l.__data_);
  v192 = (uint64_t (**)())off_24C335D90;
  if (v88 < 0)
    operator delete(v193.__r_.__value_.__l.__data_);
  v196 = (uint64_t (**)())off_24C335D90;
  if (v152 < 0)
    operator delete(v197.__r_.__value_.__l.__data_);
  v201 = (uint64_t (**)())off_24C335D90;
  if (v153 < 0)
    operator delete(v202.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v205);
  v210 = (uint64_t (**)())off_24C335D90;
  if (v154 < 0)
    operator delete(v211.__r_.__value_.__l.__data_);
  v214 = (uint64_t (**)())off_24C335D90;
  if (v155 < 0)
    operator delete(v215.__r_.__value_.__l.__data_);
  if (v156 < 0)
    operator delete(v220.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v223);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v228);
  if (v151 < 0)
    operator delete(v234.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v238);
  if (v161 < 0)
    operator delete(v244.__r_.__value_.__l.__data_);
  if (v158 < 0)
    operator delete(v248.__r_.__value_.__l.__data_);
  if (v149 < 0)
    operator delete(v253.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v256);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v261);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v266);
  if (v160 < 0)
    operator delete(v272.__r_.__value_.__l.__data_);
  if (SHIBYTE(v276.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v276.__r_.__value_.__l.__data_);
  if (SHIBYTE(v280.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v280.__r_.__value_.__l.__data_);
  if (SHIBYTE(v284.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v284.__r_.__value_.__l.__data_);
  if (SHIBYTE(v288.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v288.__r_.__value_.__l.__data_);
  if (SHIBYTE(v292.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v292.__r_.__value_.__l.__data_);
  if (SHIBYTE(v296.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v296.__r_.__value_.__l.__data_);
  if (SHIBYTE(v300.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v300.__r_.__value_.__l.__data_);
  if (SHIBYTE(v305.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v305.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v309);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v314);
  if (SHIBYTE(v320.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v320.__r_.__value_.__l.__data_);
  if (SHIBYTE(v325.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v325.__r_.__value_.__l.__data_);
  if (SHIBYTE(v329.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v329.__r_.__value_.__l.__data_);
  if (SHIBYTE(v333.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v333.__r_.__value_.__l.__data_);
  if (SHIBYTE(v337.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v337.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v340);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v345);
  if (SHIBYTE(v351.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v351.__r_.__value_.__l.__data_);
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__s.__r_.__value_.__l.__data_);
    if ((v95 & 0x80000000) == 0)
      goto LABEL_473;
  }
  else if ((v95 & 0x80000000) == 0)
  {
    goto LABEL_473;
  }
  operator delete(v360.__r_.__value_.__l.__data_);
LABEL_473:
  *(_QWORD *)(v61 + 2368) = off_24C335D90;
  v96 = (std::string *)(v61 + 2376);
  if (*(char *)(v124 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v96, *(const std::string::value_type **)(v124 + 8), *(_QWORD *)(v124 + 16));
  }
  else
  {
    v97 = *(_OWORD *)(v124 + 8);
    *(_QWORD *)(v61 + 2392) = *(_QWORD *)(v124 + 24);
    *(_OWORD *)&v96->__r_.__value_.__l.__data_ = v97;
  }
  *(_DWORD *)(v61 + 2400) = *(_DWORD *)(v124 + 32);
  *(_QWORD *)(v61 + 2368) = off_24C335AF8;
  *(_QWORD *)(v61 + 2404) = *(_QWORD *)(v124 + 36);
  return v61;
}

void sub_20A7D66B4(_Unwind_Exception *a1)
{
  uint64_t v1;

  mediaplatform::DatabaseColumnTuple<42ul,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(v1);
  _Unwind_Resume(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<41ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(uint64_t a1)
{
  *(_QWORD *)(a1 + 2368) = off_24C335D90;
  if (*(char *)(a1 + 2399) < 0)
    operator delete(*(void **)(a1 + 2376));
  *(_QWORD *)(a1 + 2320) = off_24C335D90;
  if (*(char *)(a1 + 2351) < 0)
    operator delete(*(void **)(a1 + 2328));
  *(_QWORD *)(a1 + 2272) = off_24C335D90;
  if (*(char *)(a1 + 2303) < 0)
    operator delete(*(void **)(a1 + 2280));
  *(_QWORD *)(a1 + 2224) = off_24C335D90;
  if (*(char *)(a1 + 2255) < 0)
    operator delete(*(void **)(a1 + 2232));
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 2160);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 2096);
  return mediaplatform::DatabaseColumnTuple<47ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<42ul,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(uint64_t a1)
{
  *(_QWORD *)(a1 + 2320) = off_24C335D90;
  if (*(char *)(a1 + 2351) < 0)
    operator delete(*(void **)(a1 + 2328));
  *(_QWORD *)(a1 + 2272) = off_24C335D90;
  if (*(char *)(a1 + 2303) < 0)
    operator delete(*(void **)(a1 + 2280));
  *(_QWORD *)(a1 + 2224) = off_24C335D90;
  if (*(char *)(a1 + 2255) < 0)
    operator delete(*(void **)(a1 + 2232));
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 2160);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 2096);
  return mediaplatform::DatabaseColumnTuple<47ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<43ul,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::DatabaseColumnTuple(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45)
{
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  int v60;
  int v61;
  int v62;
  int v63;
  int v64;
  int v65;
  int v66;
  uint64_t v67;
  int v68;
  int v69;
  int v70;
  int v71;
  uint64_t v72;
  int v73;
  int v74;
  int v75;
  int v76;
  int v77;
  int v78;
  int v79;
  int v80;
  int v81;
  int v82;
  int v83;
  int v84;
  int v85;
  int v86;
  int v87;
  int v88;
  std::string *v89;
  int v90;
  std::string *v91;
  __int128 v92;
  uint64_t result;
  uint64_t v94;
  uint64_t v95;
  int v96;
  uint64_t v97;
  int v98;
  int v99;
  uint64_t v100;
  int v101;
  uint64_t v102;
  int v103;
  uint64_t v104;
  int v105;
  int v106;
  int v107;
  uint64_t v108;
  int v109;
  int v110;
  int v111;
  uint64_t v112;
  int v113;
  uint64_t v114;
  int v115;
  int v116;
  uint64_t v117;
  uint64_t v118;
  int v119;
  uint64_t v120;
  int v121;
  uint64_t v122;
  int v123;
  uint64_t v124;
  int v125;
  uint64_t v126;
  int v127;
  uint64_t v128;
  int v129;
  uint64_t v130;
  int v131;
  uint64_t v132;
  int v133;
  int v134;
  int v135;
  int v136;
  uint64_t v137;
  int v138;
  uint64_t v139;
  int v140;
  int v141;
  int v142;
  uint64_t v143;
  int v144;
  int v145;
  uint64_t v146;
  int v147;
  int v148;
  int v149;
  int v150;
  int v151;
  int v152;
  int v153;
  int v154;
  uint64_t v155;
  std::string v156;
  int v157;
  uint64_t v158;
  uint64_t (**v159)();
  std::string v160;
  int v161;
  uint64_t v162;
  uint64_t (**v163)();
  std::string v164;
  int v165;
  uint64_t v166;
  int v167;
  uint64_t (**v168)();
  std::string v169;
  int v170;
  char v171;
  std::string v172;
  uint64_t (**v173)();
  std::string v174;
  int v175;
  char v176;
  std::string v177;
  uint64_t (**v178)();
  std::string v179;
  int v180;
  uint64_t v181;
  uint64_t (**v182)();
  std::string v183;
  int v184;
  uint64_t v185;
  uint64_t (**v186)();
  std::string v187;
  int v188;
  uint64_t v189;
  uint64_t (**v190)();
  std::string v191;
  int v192;
  uint64_t v193;
  int v194;
  uint64_t (**v195)();
  std::string v196;
  int v197;
  uint64_t v198;
  uint64_t (**v199)();
  std::string v200;
  int v201;
  char v202;
  std::string v203;
  uint64_t (**v204)();
  std::string v205;
  int v206;
  uint64_t v207;
  uint64_t (**v208)();
  std::string v209;
  int v210;
  uint64_t v211;
  int v212;
  uint64_t (**v213)();
  std::string v214;
  int v215;
  uint64_t v216;
  uint64_t (**v217)();
  std::string v218;
  int v219;
  char v220;
  std::string v221;
  uint64_t (**v222)();
  std::string v223;
  int v224;
  char v225;
  std::string v226;
  uint64_t (**v227)();
  std::string v228;
  int v229;
  uint64_t v230;
  int v231;
  uint64_t (**v232)();
  std::string v233;
  int v234;
  char v235;
  std::string v236;
  uint64_t (**v237)();
  std::string v238;
  int v239;
  uint64_t v240;
  uint64_t (**v241)();
  std::string v242;
  int v243;
  uint64_t v244;
  int v245;
  uint64_t (**v246)();
  std::string v247;
  int v248;
  uint64_t v249;
  uint64_t (**v250)();
  std::string v251;
  int v252;
  char v253;
  std::string v254;
  uint64_t (**v255)();
  std::string v256;
  int v257;
  char v258;
  std::string v259;
  uint64_t (**v260)();
  std::string v261;
  int v262;
  char v263;
  std::string v264;
  uint64_t (**v265)();
  std::string v266;
  int v267;
  uint64_t v268;
  uint64_t (**v269)();
  std::string v270;
  int v271;
  uint64_t v272;
  uint64_t (**v273)();
  std::string v274;
  int v275;
  uint64_t v276;
  uint64_t (**v277)();
  std::string v278;
  int v279;
  uint64_t v280;
  uint64_t (**v281)();
  std::string v282;
  int v283;
  uint64_t v284;
  uint64_t (**v285)();
  std::string v286;
  int v287;
  uint64_t v288;
  uint64_t (**v289)();
  std::string v290;
  int v291;
  uint64_t v292;
  uint64_t (**v293)();
  std::string v294;
  int v295;
  uint64_t v296;
  int v297;
  uint64_t (**v298)();
  std::string v299;
  int v300;
  uint64_t v301;
  int v302;
  uint64_t (**v303)();
  std::string v304;
  int v305;
  char v306;
  std::string v307;
  uint64_t (**v308)();
  std::string v309;
  int v310;
  char v311;
  std::string v312;
  uint64_t (**v313)();
  std::string v314;
  int v315;
  uint64_t v316;
  int v317;
  uint64_t (**v318)();
  std::string v319;
  int v320;
  uint64_t v321;
  uint64_t (**v322)();
  std::string v323;
  int v324;
  uint64_t v325;
  uint64_t (**v326)();
  std::string v327;
  int v328;
  uint64_t v329;
  uint64_t (**v330)();
  std::string v331;
  int v332;
  uint64_t v333;
  uint64_t (**v334)();
  std::string v335;
  int v336;
  char v337;
  std::string v338;
  uint64_t (**v339)();
  std::string __s;
  int v341;
  char v342;
  std::string v343;
  uint64_t (**v344)();
  std::string v345;
  int v346;
  uint64_t v347;
  uint64_t (**v348)();
  std::string __p;
  int v350;
  uint64_t v351;
  uint64_t (**v352)();
  std::string v353;
  int v354;
  uint64_t v355;
  uint64_t (**v356)();
  std::string v357;
  int v358;
  uint64_t v359;
  int v360;
  uint64_t (**v361)();
  std::string v362;
  int v363;
  char v364;
  std::string v365;
  uint64_t (**v366)();
  std::string v367;
  int v368;
  char v369;
  std::string v370;
  uint64_t (**v371)();
  std::string v372;
  int v373;
  uint64_t v374;
  uint64_t (**v375)();
  std::string v376;
  int v377;
  uint64_t v378;
  uint64_t (**v379)();
  std::string v380;
  int v381;
  uint64_t v382;
  uint64_t (**v383)();
  std::string v384;
  int v385;
  uint64_t v386;
  int v387;
  uint64_t (**v388)();
  std::string v389;
  int v390;
  uint64_t v391;
  uint64_t (**v392)();
  std::string v393;
  int v394;
  char v395;
  std::string v396;
  uint64_t (**v397)();
  std::string v398;
  int v399;
  uint64_t v400;
  uint64_t (**v401)();
  std::string v402;
  int v403;
  uint64_t v404;
  int v405;
  uint64_t (**v406)();
  std::string v407;
  int v408;
  uint64_t v409;
  uint64_t (**v410)();
  std::string v411;
  int v412;
  char v413;
  std::string v414;
  uint64_t (**v415)();
  std::string v416;
  int v417;
  char v418;
  std::string v419;
  uint64_t (**v420)();
  std::string v421;
  int v422;
  uint64_t v423;
  int v424;
  uint64_t (**v425)();
  std::string v426;
  int v427;
  char v428;
  std::string v429;
  uint64_t (**v430)();
  std::string v431;
  int v432;
  uint64_t v433;
  uint64_t (**v434)();
  std::string v435;
  int v436;
  uint64_t v437;
  int v438;
  uint64_t (**v439)();
  std::string v440;
  int v441;
  uint64_t v442;
  uint64_t (**v443)();
  std::string v444;
  int v445;
  char v446;
  std::string v447;
  uint64_t (**v448)();
  std::string v449;
  int v450;
  char v451;
  std::string v452;
  uint64_t (**v453)();
  std::string v454;
  int v455;
  char v456;
  std::string v457;
  uint64_t (**v458)();
  std::string v459;
  int v460;
  uint64_t v461;
  uint64_t (**v462)();
  std::string v463;
  int v464;
  uint64_t v465;
  uint64_t (**v466)();
  std::string v467;
  int v468;
  uint64_t v469;
  uint64_t (**v470)();
  std::string v471;
  int v472;
  uint64_t v473;
  uint64_t (**v474)();
  std::string v475;
  int v476;
  uint64_t v477;
  uint64_t (**v478)();
  std::string v479;
  int v480;
  uint64_t v481;
  uint64_t (**v482)();
  std::string v483;
  int v484;
  uint64_t v485;
  uint64_t (**v486)();
  std::string v487;
  int v488;
  uint64_t v489;
  int v490;
  uint64_t (**v491)();
  std::string v492;
  int v493;
  uint64_t v494;
  int v495;
  uint64_t (**v496)();
  std::string v497;
  int v498;
  char v499;
  std::string v500;
  uint64_t (**v501)();
  std::string v502;
  int v503;
  char v504;
  std::string v505;
  uint64_t (**v506)();
  std::string v507;
  int v508;
  uint64_t v509;
  int v510;
  uint64_t (**v511)();
  std::string v512;
  int v513;
  uint64_t v514;
  uint64_t (**v515)();
  std::string v516;
  int v517;
  uint64_t v518;
  uint64_t (**v519)();
  std::string v520;
  int v521;
  uint64_t v522;
  uint64_t (**v523)();
  std::string v524;
  int v525;
  uint64_t v526;
  uint64_t (**v527)();
  std::string v528;
  int v529;
  char v530;
  std::string v531;
  uint64_t (**v532)();
  std::string v533;
  int v534;
  char v535;
  std::string v536;

  v45 = MEMORY[0x24BDAC7A8](a1);
  v48 = v47;
  v50 = v49;
  v52 = v51;
  v54 = v53;
  v56 = v55;
  v57 = v46;
  v117 = v58;
  v155 = v45;
  if (*(char *)(v46 + 31) < 0)
    std::string::__init_copy_ctor_external(&v345, *(const std::string::value_type **)(v46 + 8), *(_QWORD *)(v46 + 16));
  else
    v345 = *(std::string *)(v46 + 8);
  v346 = *(_DWORD *)(v57 + 32);
  v344 = off_24C335AF8;
  v347 = *(_QWORD *)(v57 + 36);
  v339 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(v56 + 31) < 0)
    std::string::__init_copy_ctor_external(&__s, *(const std::string::value_type **)(v56 + 8), *(_QWORD *)(v56 + 16));
  else
    __s = *(std::string *)(v56 + 8);
  v341 = *(_DWORD *)(v56 + 32);
  v339 = &off_24C335AB8;
  v342 = *(_BYTE *)(v56 + 36);
  if (*(char *)(v56 + 63) < 0)
    std::string::__init_copy_ctor_external(&v343, *(const std::string::value_type **)(v56 + 40), *(_QWORD *)(v56 + 48));
  else
    v343 = *(std::string *)(v56 + 40);
  v334 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(v54 + 31) < 0)
    std::string::__init_copy_ctor_external(&v335, *(const std::string::value_type **)(v54 + 8), *(_QWORD *)(v54 + 16));
  else
    v335 = *(std::string *)(v54 + 8);
  v336 = *(_DWORD *)(v54 + 32);
  v334 = &off_24C335AB8;
  v337 = *(_BYTE *)(v54 + 36);
  if (*(char *)(v54 + 63) < 0)
    std::string::__init_copy_ctor_external(&v338, *(const std::string::value_type **)(v54 + 40), *(_QWORD *)(v54 + 48));
  else
    v338 = *(std::string *)(v54 + 40);
  if (*(char *)(v52 + 31) < 0)
    std::string::__init_copy_ctor_external(&v331, *(const std::string::value_type **)(v52 + 8), *(_QWORD *)(v52 + 16));
  else
    v331 = *(std::string *)(v52 + 8);
  v148 = *(_DWORD *)(v52 + 32);
  v332 = v148;
  v330 = off_24C335AF8;
  v146 = *(_QWORD *)(v52 + 36);
  v333 = v146;
  if (*(char *)(v50 + 31) < 0)
    std::string::__init_copy_ctor_external(&v327, *(const std::string::value_type **)(v50 + 8), *(_QWORD *)(v50 + 16));
  else
    v327 = *(std::string *)(v50 + 8);
  v144 = *(_DWORD *)(v50 + 32);
  v328 = v144;
  v326 = off_24C335AF8;
  v143 = *(_QWORD *)(v50 + 36);
  v329 = v143;
  if (*(char *)(v48 + 31) < 0)
    std::string::__init_copy_ctor_external(&v323, *(const std::string::value_type **)(v48 + 8), *(_QWORD *)(v48 + 16));
  else
    v323 = *(std::string *)(v48 + 8);
  v141 = *(_DWORD *)(v48 + 32);
  v324 = v141;
  v322 = off_24C335AF8;
  v139 = *(_QWORD *)(v48 + 36);
  v325 = v139;
  if (*(char *)(a9 + 31) < 0)
    std::string::__init_copy_ctor_external(&v319, *(const std::string::value_type **)(a9 + 8), *(_QWORD *)(a9 + 16));
  else
    v319 = *(std::string *)(a9 + 8);
  v138 = *(_DWORD *)(a9 + 32);
  v320 = v138;
  v318 = off_24C335AF8;
  v137 = *(_QWORD *)(a9 + 36);
  v321 = v137;
  if (*(char *)(a10 + 31) < 0)
    std::string::__init_copy_ctor_external(&v314, *(const std::string::value_type **)(a10 + 8), *(_QWORD *)(a10 + 16));
  else
    v314 = *(std::string *)(a10 + 8);
  v59 = *(_DWORD *)(a10 + 32);
  v313 = off_24C335B18;
  v316 = *(_QWORD *)(a10 + 36);
  v60 = *(_DWORD *)(a10 + 44);
  v136 = v59;
  v315 = v59;
  v317 = v60;
  v308 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a11 + 31) < 0)
    std::string::__init_copy_ctor_external(&v309, *(const std::string::value_type **)(a11 + 8), *(_QWORD *)(a11 + 16));
  else
    v309 = *(std::string *)(a11 + 8);
  v310 = *(_DWORD *)(a11 + 32);
  v308 = &off_24C335AB8;
  v311 = *(_BYTE *)(a11 + 36);
  if (*(char *)(a11 + 63) < 0)
    std::string::__init_copy_ctor_external(&v312, *(const std::string::value_type **)(a11 + 40), *(_QWORD *)(a11 + 48));
  else
    v312 = *(std::string *)(a11 + 40);
  v303 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a12 + 31) < 0)
    std::string::__init_copy_ctor_external(&v304, *(const std::string::value_type **)(a12 + 8), *(_QWORD *)(a12 + 16));
  else
    v304 = *(std::string *)(a12 + 8);
  v305 = *(_DWORD *)(a12 + 32);
  v303 = &off_24C335AB8;
  v306 = *(_BYTE *)(a12 + 36);
  if (*(char *)(a12 + 63) < 0)
    std::string::__init_copy_ctor_external(&v307, *(const std::string::value_type **)(a12 + 40), *(_QWORD *)(a12 + 48));
  else
    v307 = *(std::string *)(a12 + 40);
  if (*(char *)(a13 + 31) < 0)
    std::string::__init_copy_ctor_external(&v299, *(const std::string::value_type **)(a13 + 8), *(_QWORD *)(a13 + 16));
  else
    v299 = *(std::string *)(a13 + 8);
  v61 = *(_DWORD *)(a13 + 32);
  v298 = off_24C335B18;
  v301 = *(_QWORD *)(a13 + 36);
  v62 = *(_DWORD *)(a13 + 44);
  v135 = v61;
  v300 = v61;
  v302 = v62;
  if (*(char *)(a14 + 31) < 0)
    std::string::__init_copy_ctor_external(&v294, *(const std::string::value_type **)(a14 + 8), *(_QWORD *)(a14 + 16));
  else
    v294 = *(std::string *)(a14 + 8);
  v63 = *(_DWORD *)(a14 + 32);
  v293 = off_24C335B18;
  v296 = *(_QWORD *)(a14 + 36);
  v64 = *(_DWORD *)(a14 + 44);
  v134 = v63;
  v295 = v63;
  v297 = v64;
  if (*(char *)(a15 + 31) < 0)
    std::string::__init_copy_ctor_external(&v290, *(const std::string::value_type **)(a15 + 8), *(_QWORD *)(a15 + 16));
  else
    v290 = *(std::string *)(a15 + 8);
  v133 = *(_DWORD *)(a15 + 32);
  v291 = v133;
  v289 = off_24C335AF8;
  v132 = *(_QWORD *)(a15 + 36);
  v292 = v132;
  if (*(char *)(a16 + 31) < 0)
    std::string::__init_copy_ctor_external(&v286, *(const std::string::value_type **)(a16 + 8), *(_QWORD *)(a16 + 16));
  else
    v286 = *(std::string *)(a16 + 8);
  v131 = *(_DWORD *)(a16 + 32);
  v287 = v131;
  v285 = off_24C335AF8;
  v130 = *(_QWORD *)(a16 + 36);
  v288 = v130;
  if (*(char *)(a17 + 31) < 0)
    std::string::__init_copy_ctor_external(&v282, *(const std::string::value_type **)(a17 + 8), *(_QWORD *)(a17 + 16));
  else
    v282 = *(std::string *)(a17 + 8);
  v129 = *(_DWORD *)(a17 + 32);
  v283 = v129;
  v281 = off_24C335AF8;
  v128 = *(_QWORD *)(a17 + 36);
  v284 = v128;
  if (*(char *)(a18 + 31) < 0)
    std::string::__init_copy_ctor_external(&v278, *(const std::string::value_type **)(a18 + 8), *(_QWORD *)(a18 + 16));
  else
    v278 = *(std::string *)(a18 + 8);
  v127 = *(_DWORD *)(a18 + 32);
  v279 = v127;
  v277 = off_24C335AF8;
  v126 = *(_QWORD *)(a18 + 36);
  v280 = v126;
  if (*(char *)(a19 + 31) < 0)
    std::string::__init_copy_ctor_external(&v274, *(const std::string::value_type **)(a19 + 8), *(_QWORD *)(a19 + 16));
  else
    v274 = *(std::string *)(a19 + 8);
  v125 = *(_DWORD *)(a19 + 32);
  v275 = v125;
  v273 = off_24C335AF8;
  v124 = *(_QWORD *)(a19 + 36);
  v276 = v124;
  if (*(char *)(a20 + 31) < 0)
    std::string::__init_copy_ctor_external(&v270, *(const std::string::value_type **)(a20 + 8), *(_QWORD *)(a20 + 16));
  else
    v270 = *(std::string *)(a20 + 8);
  v123 = *(_DWORD *)(a20 + 32);
  v271 = v123;
  v269 = off_24C335AF8;
  v122 = *(_QWORD *)(a20 + 36);
  v272 = v122;
  if (*(char *)(a21 + 31) < 0)
    std::string::__init_copy_ctor_external(&v266, *(const std::string::value_type **)(a21 + 8), *(_QWORD *)(a21 + 16));
  else
    v266 = *(std::string *)(a21 + 8);
  v121 = *(_DWORD *)(a21 + 32);
  v267 = v121;
  v265 = off_24C335AF8;
  v120 = *(_QWORD *)(a21 + 36);
  v268 = v120;
  v260 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a22 + 31) < 0)
    std::string::__init_copy_ctor_external(&v261, *(const std::string::value_type **)(a22 + 8), *(_QWORD *)(a22 + 16));
  else
    v261 = *(std::string *)(a22 + 8);
  v262 = *(_DWORD *)(a22 + 32);
  v260 = &off_24C335AB8;
  v263 = *(_BYTE *)(a22 + 36);
  if (*(char *)(a22 + 63) < 0)
    std::string::__init_copy_ctor_external(&v264, *(const std::string::value_type **)(a22 + 40), *(_QWORD *)(a22 + 48));
  else
    v264 = *(std::string *)(a22 + 40);
  v255 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a23 + 31) < 0)
    std::string::__init_copy_ctor_external(&v256, *(const std::string::value_type **)(a23 + 8), *(_QWORD *)(a23 + 16));
  else
    v256 = *(std::string *)(a23 + 8);
  v257 = *(_DWORD *)(a23 + 32);
  v255 = &off_24C335AB8;
  v258 = *(_BYTE *)(a23 + 36);
  if (*(char *)(a23 + 63) < 0)
    std::string::__init_copy_ctor_external(&v259, *(const std::string::value_type **)(a23 + 40), *(_QWORD *)(a23 + 48));
  else
    v259 = *(std::string *)(a23 + 40);
  v250 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a24 + 31) < 0)
    std::string::__init_copy_ctor_external(&v251, *(const std::string::value_type **)(a24 + 8), *(_QWORD *)(a24 + 16));
  else
    v251 = *(std::string *)(a24 + 8);
  v252 = *(_DWORD *)(a24 + 32);
  v250 = &off_24C335AB8;
  v253 = *(_BYTE *)(a24 + 36);
  if (*(char *)(a24 + 63) < 0)
    std::string::__init_copy_ctor_external(&v254, *(const std::string::value_type **)(a24 + 40), *(_QWORD *)(a24 + 48));
  else
    v254 = *(std::string *)(a24 + 40);
  if (*(char *)(a25 + 31) < 0)
    std::string::__init_copy_ctor_external(&v247, *(const std::string::value_type **)(a25 + 8), *(_QWORD *)(a25 + 16));
  else
    v247 = *(std::string *)(a25 + 8);
  v119 = *(_DWORD *)(a25 + 32);
  v248 = v119;
  v246 = off_24C335AF8;
  v118 = *(_QWORD *)(a25 + 36);
  v249 = v118;
  if (*(char *)(a26 + 31) < 0)
    std::string::__init_copy_ctor_external(&v242, *(const std::string::value_type **)(a26 + 8), *(_QWORD *)(a26 + 16));
  else
    v242 = *(std::string *)(a26 + 8);
  v65 = *(_DWORD *)(a26 + 32);
  v241 = off_24C335B18;
  v244 = *(_QWORD *)(a26 + 36);
  v66 = *(_DWORD *)(a26 + 44);
  v116 = v65;
  v243 = v65;
  v245 = v66;
  if (*(char *)(a27 + 31) < 0)
    std::string::__init_copy_ctor_external(&v238, *(const std::string::value_type **)(a27 + 8), *(_QWORD *)(a27 + 16));
  else
    v238 = *(std::string *)(a27 + 8);
  v115 = *(_DWORD *)(a27 + 32);
  v239 = v115;
  v237 = off_24C335AF8;
  v67 = *(_QWORD *)(a27 + 36);
  v240 = v67;
  v232 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a28 + 31) < 0)
    std::string::__init_copy_ctor_external(&v233, *(const std::string::value_type **)(a28 + 8), *(_QWORD *)(a28 + 16));
  else
    v233 = *(std::string *)(a28 + 8);
  v234 = *(_DWORD *)(a28 + 32);
  v232 = &off_24C335AB8;
  v235 = *(_BYTE *)(a28 + 36);
  if (*(char *)(a28 + 63) < 0)
    std::string::__init_copy_ctor_external(&v236, *(const std::string::value_type **)(a28 + 40), *(_QWORD *)(a28 + 48));
  else
    v236 = *(std::string *)(a28 + 40);
  v114 = v67;
  if (*(char *)(a29 + 31) < 0)
    std::string::__init_copy_ctor_external(&v228, *(const std::string::value_type **)(a29 + 8), *(_QWORD *)(a29 + 16));
  else
    v228 = *(std::string *)(a29 + 8);
  v68 = *(_DWORD *)(a29 + 32);
  v227 = off_24C335B18;
  v230 = *(_QWORD *)(a29 + 36);
  v69 = *(_DWORD *)(a29 + 44);
  v229 = v68;
  v231 = v69;
  v222 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a30 + 31) < 0)
    std::string::__init_copy_ctor_external(&v223, *(const std::string::value_type **)(a30 + 8), *(_QWORD *)(a30 + 16));
  else
    v223 = *(std::string *)(a30 + 8);
  v224 = *(_DWORD *)(a30 + 32);
  v222 = &off_24C335AB8;
  v225 = *(_BYTE *)(a30 + 36);
  if (*(char *)(a30 + 63) < 0)
    std::string::__init_copy_ctor_external(&v226, *(const std::string::value_type **)(a30 + 40), *(_QWORD *)(a30 + 48));
  else
    v226 = *(std::string *)(a30 + 40);
  v217 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a31 + 31) < 0)
    std::string::__init_copy_ctor_external(&v218, *(const std::string::value_type **)(a31 + 8), *(_QWORD *)(a31 + 16));
  else
    v218 = *(std::string *)(a31 + 8);
  v219 = *(_DWORD *)(a31 + 32);
  v217 = &off_24C335AB8;
  v220 = *(_BYTE *)(a31 + 36);
  if (*(char *)(a31 + 63) < 0)
    std::string::__init_copy_ctor_external(&v221, *(const std::string::value_type **)(a31 + 40), *(_QWORD *)(a31 + 48));
  else
    v221 = *(std::string *)(a31 + 40);
  if (*(char *)(a32 + 31) < 0)
    std::string::__init_copy_ctor_external(&v214, *(const std::string::value_type **)(a32 + 8), *(_QWORD *)(a32 + 16));
  else
    v214 = *(std::string *)(a32 + 8);
  v113 = *(_DWORD *)(a32 + 32);
  v215 = v113;
  v213 = off_24C335AF8;
  v112 = *(_QWORD *)(a32 + 36);
  v216 = v112;
  if (*(char *)(a33 + 31) < 0)
    std::string::__init_copy_ctor_external(&v209, *(const std::string::value_type **)(a33 + 8), *(_QWORD *)(a33 + 16));
  else
    v209 = *(std::string *)(a33 + 8);
  v70 = *(_DWORD *)(a33 + 32);
  v208 = off_24C335B18;
  v211 = *(_QWORD *)(a33 + 36);
  v71 = *(_DWORD *)(a33 + 44);
  v111 = v70;
  v210 = v70;
  v212 = v71;
  if (*(char *)(a34 + 31) < 0)
    std::string::__init_copy_ctor_external(&v205, *(const std::string::value_type **)(a34 + 8), *(_QWORD *)(a34 + 16));
  else
    v205 = *(std::string *)(a34 + 8);
  v110 = *(_DWORD *)(a34 + 32);
  v206 = v110;
  v204 = off_24C335AF8;
  v72 = *(_QWORD *)(a34 + 36);
  v207 = v72;
  v199 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a35 + 31) < 0)
    std::string::__init_copy_ctor_external(&v200, *(const std::string::value_type **)(a35 + 8), *(_QWORD *)(a35 + 16));
  else
    v200 = *(std::string *)(a35 + 8);
  v201 = *(_DWORD *)(a35 + 32);
  v199 = &off_24C335AB8;
  v202 = *(_BYTE *)(a35 + 36);
  if (*(char *)(a35 + 63) < 0)
    std::string::__init_copy_ctor_external(&v203, *(const std::string::value_type **)(a35 + 40), *(_QWORD *)(a35 + 48));
  else
    v203 = *(std::string *)(a35 + 40);
  if (*(char *)(a36 + 31) < 0)
    std::string::__init_copy_ctor_external(&v196, *(const std::string::value_type **)(a36 + 8), *(_QWORD *)(a36 + 16));
  else
    v196 = *(std::string *)(a36 + 8);
  v109 = *(_DWORD *)(a36 + 32);
  v197 = v109;
  v195 = off_24C335AF8;
  v108 = *(_QWORD *)(a36 + 36);
  v198 = v108;
  if (*(char *)(a37 + 31) < 0)
    std::string::__init_copy_ctor_external(&v191, *(const std::string::value_type **)(a37 + 8), *(_QWORD *)(a37 + 16));
  else
    v191 = *(std::string *)(a37 + 8);
  v73 = *(_DWORD *)(a37 + 32);
  v190 = off_24C335B18;
  v193 = *(_QWORD *)(a37 + 36);
  v74 = *(_DWORD *)(a37 + 44);
  v106 = v73;
  v192 = v73;
  v194 = v74;
  v186 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a38 + 31) < 0)
    std::string::__init_copy_ctor_external(&v187, *(const std::string::value_type **)(a38 + 8), *(_QWORD *)(a38 + 16));
  else
    v187 = *(std::string *)(a38 + 8);
  v105 = *(_DWORD *)(a38 + 32);
  v188 = v105;
  v186 = off_24C335AF8;
  v104 = *(_QWORD *)(a38 + 36);
  v189 = v104;
  v182 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a39 + 31) < 0)
    std::string::__init_copy_ctor_external(&v183, *(const std::string::value_type **)(a39 + 8), *(_QWORD *)(a39 + 16));
  else
    v183 = *(std::string *)(a39 + 8);
  v103 = *(_DWORD *)(a39 + 32);
  v184 = v103;
  v182 = off_24C335AF8;
  v102 = *(_QWORD *)(a39 + 36);
  v185 = v102;
  v178 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a40 + 31) < 0)
    std::string::__init_copy_ctor_external(&v179, *(const std::string::value_type **)(a40 + 8), *(_QWORD *)(a40 + 16));
  else
    v179 = *(std::string *)(a40 + 8);
  v101 = *(_DWORD *)(a40 + 32);
  v180 = v101;
  v178 = off_24C335AF8;
  v100 = *(_QWORD *)(a40 + 36);
  v181 = v100;
  v173 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a41 + 31) < 0)
    std::string::__init_copy_ctor_external(&v174, *(const std::string::value_type **)(a41 + 8), *(_QWORD *)(a41 + 16));
  else
    v174 = *(std::string *)(a41 + 8);
  v175 = *(_DWORD *)(a41 + 32);
  v173 = &off_24C335AB8;
  v176 = *(_BYTE *)(a41 + 36);
  if (*(char *)(a41 + 63) < 0)
    std::string::__init_copy_ctor_external(&v177, *(const std::string::value_type **)(a41 + 40), *(_QWORD *)(a41 + 48));
  else
    v177 = *(std::string *)(a41 + 40);
  v168 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a42 + 31) < 0)
    std::string::__init_copy_ctor_external(&v169, *(const std::string::value_type **)(a42 + 8), *(_QWORD *)(a42 + 16));
  else
    v169 = *(std::string *)(a42 + 8);
  v170 = *(_DWORD *)(a42 + 32);
  v168 = &off_24C335AB8;
  v171 = *(_BYTE *)(a42 + 36);
  if (*(char *)(a42 + 63) < 0)
    std::string::__init_copy_ctor_external(&v172, *(const std::string::value_type **)(a42 + 40), *(_QWORD *)(a42 + 48));
  else
    v172 = *(std::string *)(a42 + 40);
  v163 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a43 + 31) < 0)
    std::string::__init_copy_ctor_external(&v164, *(const std::string::value_type **)(a43 + 8), *(_QWORD *)(a43 + 16));
  else
    v164 = *(std::string *)(a43 + 8);
  v75 = *(_DWORD *)(a43 + 32);
  v163 = off_24C335B18;
  v166 = *(_QWORD *)(a43 + 36);
  v76 = *(_DWORD *)(a43 + 44);
  v99 = v75;
  v165 = v75;
  v167 = v76;
  v159 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a44 + 31) < 0)
    std::string::__init_copy_ctor_external(&v160, *(const std::string::value_type **)(a44 + 8), *(_QWORD *)(a44 + 16));
  else
    v160 = *(std::string *)(a44 + 8);
  v98 = *(_DWORD *)(a44 + 32);
  v161 = v98;
  v159 = off_24C335AF8;
  v97 = *(_QWORD *)(a44 + 36);
  v162 = v97;
  if (*(char *)(a45 + 31) < 0)
    std::string::__init_copy_ctor_external(&v156, *(const std::string::value_type **)(a45 + 8), *(_QWORD *)(a45 + 16));
  else
    v156 = *(std::string *)(a45 + 8);
  v107 = v68;
  v96 = *(_DWORD *)(a45 + 32);
  v157 = v96;
  v95 = *(_QWORD *)(a45 + 36);
  v158 = v95;
  v532 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v533, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
  else
    v533 = __s;
  v534 = v341;
  v532 = &off_24C335AB8;
  v535 = v342;
  if (SHIBYTE(v343.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v536, v343.__r_.__value_.__l.__data_, v343.__r_.__value_.__l.__size_);
  else
    v536 = v343;
  v527 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v335.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v528, v335.__r_.__value_.__l.__data_, v335.__r_.__value_.__l.__size_);
  else
    v528 = v335;
  v529 = v336;
  v527 = &off_24C335AB8;
  v530 = v337;
  if (SHIBYTE(v338.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v531, v338.__r_.__value_.__l.__data_, v338.__r_.__value_.__l.__size_);
  else
    v531 = v338;
  v523 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v331.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v524, v331.__r_.__value_.__l.__data_, v331.__r_.__value_.__l.__size_);
  else
    v524 = v331;
  v525 = v148;
  v523 = off_24C335AF8;
  v526 = v146;
  v519 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v327.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v520, v327.__r_.__value_.__l.__data_, v327.__r_.__value_.__l.__size_);
  else
    v520 = v327;
  v521 = v144;
  v519 = off_24C335AF8;
  v522 = v143;
  v515 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v323.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v516, v323.__r_.__value_.__l.__data_, v323.__r_.__value_.__l.__size_);
  else
    v516 = v323;
  v517 = v141;
  v515 = off_24C335AF8;
  v518 = v139;
  v511 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v319.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v512, v319.__r_.__value_.__l.__data_, v319.__r_.__value_.__l.__size_);
  else
    v512 = v319;
  v513 = v138;
  v511 = off_24C335AF8;
  v514 = v137;
  v506 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v314.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v507, v314.__r_.__value_.__l.__data_, v314.__r_.__value_.__l.__size_);
  else
    v507 = v314;
  v506 = off_24C335B18;
  v509 = v316;
  v508 = v136;
  v510 = v317;
  v501 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v309.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v502, v309.__r_.__value_.__l.__data_, v309.__r_.__value_.__l.__size_);
  else
    v502 = v309;
  v503 = v310;
  v501 = &off_24C335AB8;
  v504 = v311;
  if (SHIBYTE(v312.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v505, v312.__r_.__value_.__l.__data_, v312.__r_.__value_.__l.__size_);
  else
    v505 = v312;
  v496 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v304.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v497, v304.__r_.__value_.__l.__data_, v304.__r_.__value_.__l.__size_);
  else
    v497 = v304;
  v498 = v305;
  v496 = &off_24C335AB8;
  v499 = v306;
  if (SHIBYTE(v307.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v500, v307.__r_.__value_.__l.__data_, v307.__r_.__value_.__l.__size_);
  else
    v500 = v307;
  v491 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v299.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v492, v299.__r_.__value_.__l.__data_, v299.__r_.__value_.__l.__size_);
  else
    v492 = v299;
  v491 = off_24C335B18;
  v494 = v301;
  v493 = v135;
  v495 = v302;
  v486 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v294.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v487, v294.__r_.__value_.__l.__data_, v294.__r_.__value_.__l.__size_);
  else
    v487 = v294;
  v486 = off_24C335B18;
  v489 = v296;
  v488 = v134;
  v490 = v297;
  v482 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v290.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v483, v290.__r_.__value_.__l.__data_, v290.__r_.__value_.__l.__size_);
  else
    v483 = v290;
  v484 = v133;
  v482 = off_24C335AF8;
  v485 = v132;
  v478 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v286.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v479, v286.__r_.__value_.__l.__data_, v286.__r_.__value_.__l.__size_);
  else
    v479 = v286;
  v480 = v131;
  v478 = off_24C335AF8;
  v481 = v130;
  v474 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v282.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v475, v282.__r_.__value_.__l.__data_, v282.__r_.__value_.__l.__size_);
  else
    v475 = v282;
  v476 = v129;
  v474 = off_24C335AF8;
  v477 = v128;
  v470 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v278.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v471, v278.__r_.__value_.__l.__data_, v278.__r_.__value_.__l.__size_);
  else
    v471 = v278;
  v472 = v127;
  v470 = off_24C335AF8;
  v473 = v126;
  v466 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v274.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v467, v274.__r_.__value_.__l.__data_, v274.__r_.__value_.__l.__size_);
  else
    v467 = v274;
  v468 = v125;
  v466 = off_24C335AF8;
  v469 = v124;
  v462 = (uint64_t (**)())off_24C335D90;
  v77 = SHIBYTE(v270.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v270.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v463, v270.__r_.__value_.__l.__data_, v270.__r_.__value_.__l.__size_);
  else
    v463 = v270;
  v464 = v123;
  v462 = off_24C335AF8;
  v465 = v122;
  v458 = (uint64_t (**)())off_24C335D90;
  v78 = SHIBYTE(v266.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v266.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v459, v266.__r_.__value_.__l.__data_, v266.__r_.__value_.__l.__size_);
  else
    v459 = v266;
  v460 = v121;
  v458 = off_24C335AF8;
  v461 = v120;
  v453 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v261.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v454, v261.__r_.__value_.__l.__data_, v261.__r_.__value_.__l.__size_);
  else
    v454 = v261;
  v455 = v262;
  v453 = &off_24C335AB8;
  v456 = v263;
  if (SHIBYTE(v264.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v457, v264.__r_.__value_.__l.__data_, v264.__r_.__value_.__l.__size_);
  else
    v457 = v264;
  v448 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v256.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v449, v256.__r_.__value_.__l.__data_, v256.__r_.__value_.__l.__size_);
  else
    v449 = v256;
  v450 = v257;
  v448 = &off_24C335AB8;
  v451 = v258;
  if (SHIBYTE(v259.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v452, v259.__r_.__value_.__l.__data_, v259.__r_.__value_.__l.__size_);
  else
    v452 = v259;
  v443 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v251.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v444, v251.__r_.__value_.__l.__data_, v251.__r_.__value_.__l.__size_);
  else
    v444 = v251;
  v445 = v252;
  v443 = &off_24C335AB8;
  v446 = v253;
  if (SHIBYTE(v254.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v447, v254.__r_.__value_.__l.__data_, v254.__r_.__value_.__l.__size_);
  else
    v447 = v254;
  v439 = (uint64_t (**)())off_24C335D90;
  v79 = SHIBYTE(v247.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v247.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v440, v247.__r_.__value_.__l.__data_, v247.__r_.__value_.__l.__size_);
  else
    v440 = v247;
  v441 = v119;
  v439 = off_24C335AF8;
  v442 = v118;
  v434 = (uint64_t (**)())off_24C335D90;
  v154 = SHIBYTE(v242.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v242.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v435, v242.__r_.__value_.__l.__data_, v242.__r_.__value_.__l.__size_);
  else
    v435 = v242;
  v434 = off_24C335B18;
  v437 = v244;
  v436 = v116;
  v438 = v245;
  v430 = (uint64_t (**)())off_24C335D90;
  v153 = SHIBYTE(v238.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v238.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v431, v238.__r_.__value_.__l.__data_, v238.__r_.__value_.__l.__size_);
  else
    v431 = v238;
  v432 = v115;
  v430 = off_24C335AF8;
  v433 = v114;
  v425 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v233.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v426, v233.__r_.__value_.__l.__data_, v233.__r_.__value_.__l.__size_);
  else
    v426 = v233;
  v427 = v234;
  v425 = &off_24C335AB8;
  v428 = v235;
  if (SHIBYTE(v236.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v429, v236.__r_.__value_.__l.__data_, v236.__r_.__value_.__l.__size_);
  else
    v429 = v236;
  v420 = (uint64_t (**)())off_24C335D90;
  v80 = SHIBYTE(v228.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v228.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v421, v228.__r_.__value_.__l.__data_, v228.__r_.__value_.__l.__size_);
  else
    v421 = v228;
  v152 = v80;
  v420 = off_24C335B18;
  v423 = v230;
  v422 = v107;
  v424 = v231;
  v415 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v223.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v416, v223.__r_.__value_.__l.__data_, v223.__r_.__value_.__l.__size_);
  else
    v416 = v223;
  v417 = v224;
  v415 = &off_24C335AB8;
  v418 = v225;
  if (SHIBYTE(v226.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v419, v226.__r_.__value_.__l.__data_, v226.__r_.__value_.__l.__size_);
  else
    v419 = v226;
  v410 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v218.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v411, v218.__r_.__value_.__l.__data_, v218.__r_.__value_.__l.__size_);
  else
    v411 = v218;
  v412 = v219;
  v410 = &off_24C335AB8;
  v413 = v220;
  if (SHIBYTE(v221.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v414, v221.__r_.__value_.__l.__data_, v221.__r_.__value_.__l.__size_);
  else
    v414 = v221;
  v406 = (uint64_t (**)())off_24C335D90;
  v81 = SHIBYTE(v214.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v214.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v407, v214.__r_.__value_.__l.__data_, v214.__r_.__value_.__l.__size_);
  else
    v407 = v214;
  v408 = v113;
  v406 = off_24C335AF8;
  v409 = v112;
  v401 = (uint64_t (**)())off_24C335D90;
  v151 = SHIBYTE(v209.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v209.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v402, v209.__r_.__value_.__l.__data_, v209.__r_.__value_.__l.__size_);
  else
    v402 = v209;
  v401 = off_24C335B18;
  v404 = v211;
  v403 = v111;
  v405 = v212;
  v397 = (uint64_t (**)())off_24C335D90;
  v150 = SHIBYTE(v205.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v205.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v398, v205.__r_.__value_.__l.__data_, v205.__r_.__value_.__l.__size_);
  else
    v398 = v205;
  v399 = v110;
  v397 = off_24C335AF8;
  v400 = v72;
  v392 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v200.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v393, v200.__r_.__value_.__l.__data_, v200.__r_.__value_.__l.__size_);
  else
    v393 = v200;
  v394 = v201;
  v392 = &off_24C335AB8;
  v395 = v202;
  if (SHIBYTE(v203.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v396, v203.__r_.__value_.__l.__data_, v203.__r_.__value_.__l.__size_);
  else
    v396 = v203;
  v388 = (uint64_t (**)())off_24C335D90;
  v82 = SHIBYTE(v196.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v196.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v389, v196.__r_.__value_.__l.__data_, v196.__r_.__value_.__l.__size_);
  else
    v389 = v196;
  v390 = v109;
  v388 = off_24C335AF8;
  v391 = v108;
  v383 = (uint64_t (**)())off_24C335D90;
  v147 = SHIBYTE(v191.__r_.__value_.__r.__words[2]);
  v149 = v81;
  if (SHIBYTE(v191.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v384, v191.__r_.__value_.__l.__data_, v191.__r_.__value_.__l.__size_);
  else
    v384 = v191;
  v383 = off_24C335B18;
  v386 = v193;
  v385 = v106;
  v387 = v194;
  v379 = (uint64_t (**)())off_24C335D90;
  v83 = SHIBYTE(v187.__r_.__value_.__r.__words[2]);
  v145 = v79;
  if (SHIBYTE(v187.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v380, v187.__r_.__value_.__l.__data_, v187.__r_.__value_.__l.__size_);
  else
    v380 = v187;
  v381 = v105;
  v379 = off_24C335AF8;
  v382 = v104;
  v375 = (uint64_t (**)())off_24C335D90;
  v84 = SHIBYTE(v183.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v183.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v376, v183.__r_.__value_.__l.__data_, v183.__r_.__value_.__l.__size_);
  else
    v376 = v183;
  v377 = v103;
  v375 = off_24C335AF8;
  v378 = v102;
  v371 = (uint64_t (**)())off_24C335D90;
  v85 = SHIBYTE(v179.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v179.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v372, v179.__r_.__value_.__l.__data_, v179.__r_.__value_.__l.__size_);
  else
    v372 = v179;
  v373 = v101;
  v371 = off_24C335AF8;
  v374 = v100;
  v366 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v174.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v367, v174.__r_.__value_.__l.__data_, v174.__r_.__value_.__l.__size_);
  else
    v367 = v174;
  v368 = v175;
  v366 = &off_24C335AB8;
  v369 = v176;
  if (SHIBYTE(v177.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v370, v177.__r_.__value_.__l.__data_, v177.__r_.__value_.__l.__size_);
  else
    v370 = v177;
  v361 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v169.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v362, v169.__r_.__value_.__l.__data_, v169.__r_.__value_.__l.__size_);
  else
    v362 = v169;
  v363 = v170;
  v361 = &off_24C335AB8;
  v364 = v171;
  if (SHIBYTE(v172.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v365, v172.__r_.__value_.__l.__data_, v172.__r_.__value_.__l.__size_);
  else
    v365 = v172;
  v356 = (uint64_t (**)())off_24C335D90;
  v86 = SHIBYTE(v164.__r_.__value_.__r.__words[2]);
  v142 = v78;
  if (SHIBYTE(v164.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v357, v164.__r_.__value_.__l.__data_, v164.__r_.__value_.__l.__size_);
  else
    v357 = v164;
  v356 = off_24C335B18;
  v359 = v166;
  v358 = v99;
  v360 = v167;
  v352 = (uint64_t (**)())off_24C335D90;
  v87 = SHIBYTE(v160.__r_.__value_.__r.__words[2]);
  v140 = v77;
  if (SHIBYTE(v160.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v353, v160.__r_.__value_.__l.__data_, v160.__r_.__value_.__l.__size_);
  else
    v353 = v160;
  v354 = v98;
  v352 = off_24C335AF8;
  v355 = v97;
  v348 = (uint64_t (**)())off_24C335D90;
  v88 = SHIBYTE(v156.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v156.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&__p, v156.__r_.__value_.__l.__data_, v156.__r_.__value_.__l.__size_);
  else
    __p = v156;
  v350 = v96;
  v348 = off_24C335AF8;
  v351 = v95;
  mediaplatform::DatabaseColumnTuple<45ul,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::DatabaseColumnTuple(v155, (uint64_t)&v532, (uint64_t)&v527, (uint64_t)&v523, (uint64_t)&v519, (uint64_t)&v515, (uint64_t)&v511, (uint64_t)&v506, (uint64_t)&v501, (uint64_t)&v496, (uint64_t)&v491, (uint64_t)&v486, (uint64_t)&v482, (uint64_t)&v478, (uint64_t)&v474, (uint64_t)&v470, (uint64_t)&v466, (uint64_t)&v462, (uint64_t)&v458,
    (uint64_t)&v453,
    (uint64_t)&v448,
    (uint64_t)&v443,
    (uint64_t)&v439,
    (uint64_t)&v434,
    (uint64_t)&v430,
    (uint64_t)&v425,
    (uint64_t)&v420,
    (uint64_t)&v415,
    (uint64_t)&v410,
    (uint64_t)&v406,
    (uint64_t)&v401,
    (uint64_t)&v397,
    (uint64_t)&v392,
    (uint64_t)&v388,
    (uint64_t)&v383,
    (uint64_t)&v379,
    (uint64_t)&v375,
    (uint64_t)&v371,
    (uint64_t)&v366,
    (uint64_t)&v361,
    (uint64_t)&v356,
    (uint64_t)&v352,
    (uint64_t)&v348);
  v348 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v352 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v353.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v353.__r_.__value_.__l.__data_);
  v356 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v357.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v357.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v361);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v366);
  v371 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v372.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v372.__r_.__value_.__l.__data_);
  v375 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v376.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v376.__r_.__value_.__l.__data_);
  v379 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v380.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v380.__r_.__value_.__l.__data_);
  v383 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v384.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v384.__r_.__value_.__l.__data_);
  v388 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v389.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v389.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v392);
  v397 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v398.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v398.__r_.__value_.__l.__data_);
  v401 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v402.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v402.__r_.__value_.__l.__data_);
  v406 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v407.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v407.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v410);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v415);
  v420 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v421.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v421.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v425);
  v430 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v431.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v431.__r_.__value_.__l.__data_);
  v434 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v435.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v435.__r_.__value_.__l.__data_);
  v439 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v440.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v440.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v443);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v448);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v453);
  v458 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v459.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v459.__r_.__value_.__l.__data_);
  v462 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v463.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v463.__r_.__value_.__l.__data_);
  v466 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v467.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v467.__r_.__value_.__l.__data_);
  v470 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v471.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v471.__r_.__value_.__l.__data_);
  v474 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v475.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v475.__r_.__value_.__l.__data_);
  v478 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v479.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v479.__r_.__value_.__l.__data_);
  v482 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v483.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v483.__r_.__value_.__l.__data_);
  v486 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v487.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v487.__r_.__value_.__l.__data_);
  v491 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v492.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v492.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v496);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v501);
  v506 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v507.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v507.__r_.__value_.__l.__data_);
  v511 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v512.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v512.__r_.__value_.__l.__data_);
  v515 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v516.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v516.__r_.__value_.__l.__data_);
  v519 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v520.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v520.__r_.__value_.__l.__data_);
  v523 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v524.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v524.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v527);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v532);
  *(_QWORD *)(v155 + 2224) = off_24C335D90;
  v89 = (std::string *)(v155 + 2232);
  v90 = SHIBYTE(v345.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v345.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v89, v345.__r_.__value_.__l.__data_, v345.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v89->__r_.__value_.__l.__data_ = *(_OWORD *)&v345.__r_.__value_.__l.__data_;
    *(_QWORD *)(v155 + 2248) = *((_QWORD *)&v345.__r_.__value_.__l + 2);
  }
  *(_DWORD *)(v155 + 2256) = v346;
  *(_QWORD *)(v155 + 2224) = off_24C335AF8;
  *(_QWORD *)(v155 + 2260) = v347;
  if (v88 < 0)
    operator delete(v156.__r_.__value_.__l.__data_);
  v159 = (uint64_t (**)())off_24C335D90;
  if (v87 < 0)
    operator delete(v160.__r_.__value_.__l.__data_);
  v163 = (uint64_t (**)())off_24C335D90;
  if (v86 < 0)
    operator delete(v164.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v168);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v173);
  v178 = (uint64_t (**)())off_24C335D90;
  if (v85 < 0)
    operator delete(v179.__r_.__value_.__l.__data_);
  v182 = (uint64_t (**)())off_24C335D90;
  if (v84 < 0)
    operator delete(v183.__r_.__value_.__l.__data_);
  v186 = (uint64_t (**)())off_24C335D90;
  if (v83 < 0)
    operator delete(v187.__r_.__value_.__l.__data_);
  v190 = (uint64_t (**)())off_24C335D90;
  if (v147 < 0)
    operator delete(v191.__r_.__value_.__l.__data_);
  v195 = (uint64_t (**)())off_24C335D90;
  if (v82 < 0)
    operator delete(v196.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v199);
  if (v150 < 0)
    operator delete(v205.__r_.__value_.__l.__data_);
  if (v151 < 0)
  {
    operator delete(v209.__r_.__value_.__l.__data_);
    if ((v149 & 0x80000000) == 0)
      goto LABEL_415;
  }
  else if ((v149 & 0x80000000) == 0)
  {
    goto LABEL_415;
  }
  operator delete(v214.__r_.__value_.__l.__data_);
LABEL_415:
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v217);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v222);
  if (v152 < 0)
    operator delete(v228.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v232);
  if (v153 < 0)
    operator delete(v238.__r_.__value_.__l.__data_);
  if (v154 < 0)
  {
    operator delete(v242.__r_.__value_.__l.__data_);
    if ((v145 & 0x80000000) == 0)
      goto LABEL_421;
  }
  else if ((v145 & 0x80000000) == 0)
  {
    goto LABEL_421;
  }
  operator delete(v247.__r_.__value_.__l.__data_);
LABEL_421:
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v250);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v255);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v260);
  if (v142 < 0)
    operator delete(v266.__r_.__value_.__l.__data_);
  if (v140 < 0)
    operator delete(v270.__r_.__value_.__l.__data_);
  if (SHIBYTE(v274.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v274.__r_.__value_.__l.__data_);
  if (SHIBYTE(v278.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v278.__r_.__value_.__l.__data_);
  if (SHIBYTE(v282.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v282.__r_.__value_.__l.__data_);
  if (SHIBYTE(v286.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v286.__r_.__value_.__l.__data_);
  if (SHIBYTE(v290.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v290.__r_.__value_.__l.__data_);
  if (SHIBYTE(v294.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v294.__r_.__value_.__l.__data_);
  if (SHIBYTE(v299.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v299.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v303);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v308);
  if (SHIBYTE(v314.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v314.__r_.__value_.__l.__data_);
  if (SHIBYTE(v319.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v319.__r_.__value_.__l.__data_);
  if (SHIBYTE(v323.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v323.__r_.__value_.__l.__data_);
  if (SHIBYTE(v327.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v327.__r_.__value_.__l.__data_);
  if (SHIBYTE(v331.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v331.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v334);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v339);
  if (v90 < 0)
    operator delete(v345.__r_.__value_.__l.__data_);
  *(_QWORD *)(v155 + 2272) = off_24C335D90;
  v91 = (std::string *)(v155 + 2280);
  if (*(char *)(v117 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v91, *(const std::string::value_type **)(v117 + 8), *(_QWORD *)(v117 + 16));
  }
  else
  {
    v92 = *(_OWORD *)(v117 + 8);
    *(_QWORD *)(v155 + 2296) = *(_QWORD *)(v117 + 24);
    *(_OWORD *)&v91->__r_.__value_.__l.__data_ = v92;
  }
  result = v155;
  *(_DWORD *)(v155 + 2304) = *(_DWORD *)(v117 + 32);
  *(_QWORD *)(v155 + 2272) = off_24C335B18;
  v94 = *(_QWORD *)(v117 + 36);
  *(_DWORD *)(v155 + 2316) = *(_DWORD *)(v117 + 44);
  *(_QWORD *)(v155 + 2308) = v94;
  return result;
}

void sub_20A7D9F50(_Unwind_Exception *a1)
{
  mediaplatform::DatabaseColumnTuple<44ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(STACK[0x450]);
  _Unwind_Resume(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<43ul,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(uint64_t a1)
{
  *(_QWORD *)(a1 + 2272) = off_24C335D90;
  if (*(char *)(a1 + 2303) < 0)
    operator delete(*(void **)(a1 + 2280));
  *(_QWORD *)(a1 + 2224) = off_24C335D90;
  if (*(char *)(a1 + 2255) < 0)
    operator delete(*(void **)(a1 + 2232));
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 2160);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 2096);
  return mediaplatform::DatabaseColumnTuple<47ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<44ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(uint64_t a1)
{
  *(_QWORD *)(a1 + 2224) = off_24C335D90;
  if (*(char *)(a1 + 2255) < 0)
    operator delete(*(void **)(a1 + 2232));
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 2160);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 2096);
  return mediaplatform::DatabaseColumnTuple<47ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<45ul,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::DatabaseColumnTuple(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43)
{
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  int v59;
  int v60;
  int v61;
  int v62;
  int v63;
  int v64;
  uint64_t v65;
  int v66;
  int v67;
  int v68;
  int v69;
  int v70;
  int v71;
  uint64_t v72;
  int v73;
  int v74;
  int v75;
  int v76;
  int v77;
  int v78;
  int v79;
  int v80;
  int v81;
  int v82;
  int v83;
  int v84;
  int v85;
  int v86;
  std::string *v87;
  std::string *v88;
  __int128 v89;
  std::string *v90;
  __int128 v91;
  int v93;
  uint64_t v94;
  uint64_t v95;
  int v96;
  int v97;
  uint64_t v98;
  int v99;
  uint64_t v100;
  int v101;
  uint64_t v102;
  int v103;
  int v104;
  uint64_t v105;
  int v106;
  int v107;
  int v108;
  uint64_t v109;
  int v110;
  int v111;
  uint64_t v112;
  uint64_t v113;
  int v114;
  int v115;
  uint64_t v116;
  int v117;
  uint64_t v118;
  int v119;
  uint64_t v120;
  int v121;
  uint64_t v122;
  int v123;
  uint64_t v124;
  int v125;
  uint64_t v126;
  int v127;
  uint64_t v128;
  int v129;
  uint64_t v130;
  int v131;
  int v132;
  int v133;
  int v134;
  uint64_t v135;
  int v136;
  int v137;
  uint64_t v138;
  int v139;
  int v140;
  int v141;
  int v142;
  int v143;
  uint64_t v144;
  int v145;
  int v146;
  int v147;
  int v148;
  uint64_t v149;
  int v150;
  uint64_t v151;
  std::string v152;
  int v153;
  uint64_t v154;
  uint64_t (**v155)();
  std::string v156;
  int v157;
  uint64_t v158;
  uint64_t (**v159)();
  std::string v160;
  int v161;
  uint64_t v162;
  int v163;
  uint64_t (**v164)();
  std::string v165;
  int v166;
  char v167;
  std::string v168;
  uint64_t (**v169)();
  std::string v170;
  int v171;
  char v172;
  std::string v173;
  uint64_t (**v174)();
  std::string v175;
  int v176;
  uint64_t v177;
  uint64_t (**v178)();
  std::string v179;
  int v180;
  uint64_t v181;
  uint64_t (**v182)();
  std::string v183;
  int v184;
  uint64_t v185;
  uint64_t (**v186)();
  std::string v187;
  int v188;
  uint64_t v189;
  int v190;
  uint64_t (**v191)();
  std::string v192;
  int v193;
  uint64_t v194;
  uint64_t (**v195)();
  std::string v196;
  int v197;
  char v198;
  std::string v199;
  uint64_t (**v200)();
  std::string v201;
  int v202;
  uint64_t v203;
  uint64_t (**v204)();
  std::string v205;
  int v206;
  uint64_t v207;
  int v208;
  uint64_t (**v209)();
  std::string v210;
  int v211;
  uint64_t v212;
  uint64_t (**v213)();
  std::string v214;
  int v215;
  char v216;
  std::string v217;
  uint64_t (**v218)();
  std::string v219;
  int v220;
  char v221;
  std::string v222;
  uint64_t (**v223)();
  std::string v224;
  int v225;
  uint64_t v226;
  int v227;
  uint64_t (**v228)();
  std::string v229;
  int v230;
  char v231;
  std::string v232;
  uint64_t (**v233)();
  std::string v234;
  int v235;
  uint64_t v236;
  uint64_t (**v237)();
  std::string v238;
  int v239;
  uint64_t v240;
  int v241;
  uint64_t (**v242)();
  std::string v243;
  int v244;
  uint64_t v245;
  uint64_t (**v246)();
  std::string v247;
  int v248;
  char v249;
  std::string v250;
  uint64_t (**v251)();
  std::string v252;
  int v253;
  char v254;
  std::string v255;
  uint64_t (**v256)();
  std::string v257;
  int v258;
  char v259;
  std::string v260;
  uint64_t (**v261)();
  std::string v262;
  int v263;
  uint64_t v264;
  uint64_t (**v265)();
  std::string v266;
  int v267;
  uint64_t v268;
  uint64_t (**v269)();
  std::string v270;
  int v271;
  uint64_t v272;
  uint64_t (**v273)();
  std::string v274;
  int v275;
  uint64_t v276;
  uint64_t (**v277)();
  std::string v278;
  int v279;
  uint64_t v280;
  uint64_t (**v281)();
  std::string v282;
  int v283;
  uint64_t v284;
  uint64_t (**v285)();
  std::string v286;
  int v287;
  uint64_t v288;
  uint64_t (**v289)();
  std::string v290;
  int v291;
  uint64_t v292;
  int v293;
  uint64_t (**v294)();
  std::string v295;
  int v296;
  uint64_t v297;
  int v298;
  uint64_t (**v299)();
  std::string v300;
  int v301;
  char v302;
  std::string v303;
  uint64_t (**v304)();
  std::string v305;
  int v306;
  char v307;
  std::string v308;
  uint64_t (**v309)();
  std::string v310;
  int v311;
  uint64_t v312;
  int v313;
  uint64_t (**v314)();
  std::string v315;
  int v316;
  uint64_t v317;
  uint64_t (**v318)();
  std::string v319;
  int v320;
  uint64_t v321;
  uint64_t (**v322)();
  std::string v323;
  int v324;
  uint64_t v325;
  uint64_t (**v326)();
  std::string __s;
  int v328;
  uint64_t v329;
  uint64_t (**v330)();
  std::string v331;
  int v332;
  char v333;
  std::string v334;
  uint64_t (**v335)();
  std::string __p;
  int v337;
  uint64_t v338;
  uint64_t (**v339)();
  std::string v340;
  int v341;
  uint64_t v342;
  uint64_t (**v343)();
  std::string v344;
  int v345;
  uint64_t v346;
  int v347;
  uint64_t (**v348)();
  std::string v349;
  int v350;
  char v351;
  std::string v352;
  uint64_t (**v353)();
  std::string v354;
  int v355;
  char v356;
  std::string v357;
  uint64_t (**v358)();
  std::string v359;
  int v360;
  uint64_t v361;
  uint64_t (**v362)();
  std::string v363;
  int v364;
  uint64_t v365;
  uint64_t (**v366)();
  std::string v367;
  int v368;
  uint64_t v369;
  uint64_t (**v370)();
  std::string v371;
  int v372;
  uint64_t v373;
  int v374;
  uint64_t (**v375)();
  std::string v376;
  int v377;
  uint64_t v378;
  uint64_t (**v379)();
  std::string v380;
  int v381;
  char v382;
  std::string v383;
  uint64_t (**v384)();
  std::string v385;
  int v386;
  uint64_t v387;
  uint64_t (**v388)();
  std::string v389;
  int v390;
  uint64_t v391;
  int v392;
  uint64_t (**v393)();
  std::string v394;
  int v395;
  uint64_t v396;
  uint64_t (**v397)();
  std::string v398;
  int v399;
  char v400;
  std::string v401;
  uint64_t (**v402)();
  std::string v403;
  int v404;
  char v405;
  std::string v406;
  uint64_t (**v407)();
  std::string v408;
  int v409;
  uint64_t v410;
  int v411;
  uint64_t (**v412)();
  std::string v413;
  int v414;
  char v415;
  std::string v416;
  uint64_t (**v417)();
  std::string v418;
  int v419;
  uint64_t v420;
  uint64_t (**v421)();
  std::string v422;
  int v423;
  uint64_t v424;
  int v425;
  uint64_t (**v426)();
  std::string v427;
  int v428;
  uint64_t v429;
  uint64_t (**v430)();
  std::string v431;
  int v432;
  char v433;
  std::string v434;
  uint64_t (**v435)();
  std::string v436;
  int v437;
  char v438;
  std::string v439;
  uint64_t (**v440)();
  std::string v441;
  int v442;
  char v443;
  std::string v444;
  uint64_t (**v445)();
  std::string v446;
  int v447;
  uint64_t v448;
  uint64_t (**v449)();
  std::string v450;
  int v451;
  uint64_t v452;
  uint64_t (**v453)();
  std::string v454;
  int v455;
  uint64_t v456;
  uint64_t (**v457)();
  std::string v458;
  int v459;
  uint64_t v460;
  uint64_t (**v461)();
  std::string v462;
  int v463;
  uint64_t v464;
  uint64_t (**v465)();
  std::string v466;
  int v467;
  uint64_t v468;
  uint64_t (**v469)();
  std::string v470;
  int v471;
  uint64_t v472;
  uint64_t (**v473)();
  std::string v474;
  int v475;
  uint64_t v476;
  int v477;
  uint64_t (**v478)();
  std::string v479;
  int v480;
  uint64_t v481;
  int v482;
  uint64_t (**v483)();
  std::string v484;
  int v485;
  char v486;
  std::string v487;
  uint64_t (**v488)();
  std::string v489;
  int v490;
  char v491;
  std::string v492;
  uint64_t (**v493)();
  std::string v494;
  int v495;
  uint64_t v496;
  int v497;
  uint64_t (**v498)();
  std::string v499;
  int v500;
  uint64_t v501;
  uint64_t (**v502)();
  std::string v503;
  int v504;
  uint64_t v505;
  uint64_t (**v506)();
  std::string v507;
  int v508;
  uint64_t v509;
  uint64_t (**v510)();
  std::string v511;
  int v512;
  uint64_t v513;

  v43 = MEMORY[0x24BDAC7A8](a1);
  v46 = v45;
  v48 = v47;
  v50 = v49;
  v52 = v51;
  v54 = v53;
  v55 = v44;
  v57 = v56;
  v151 = v43;
  v330 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(v44 + 31) < 0)
    std::string::__init_copy_ctor_external(&v331, *(const std::string::value_type **)(v44 + 8), *(_QWORD *)(v44 + 16));
  else
    v331 = *(std::string *)(v44 + 8);
  v332 = *(_DWORD *)(v55 + 32);
  v330 = &off_24C335AB8;
  v333 = *(_BYTE *)(v55 + 36);
  if (*(char *)(v55 + 63) < 0)
    std::string::__init_copy_ctor_external(&v334, *(const std::string::value_type **)(v55 + 40), *(_QWORD *)(v55 + 48));
  else
    v334 = *(std::string *)(v55 + 40);
  if (*(char *)(v54 + 31) < 0)
    std::string::__init_copy_ctor_external(&__s, *(const std::string::value_type **)(v54 + 8), *(_QWORD *)(v54 + 16));
  else
    __s = *(std::string *)(v54 + 8);
  v58 = *(_DWORD *)(v54 + 32);
  v328 = v58;
  v326 = off_24C335AF8;
  v149 = *(_QWORD *)(v54 + 36);
  v329 = v149;
  if (*(char *)(v52 + 31) < 0)
    std::string::__init_copy_ctor_external(&v323, *(const std::string::value_type **)(v52 + 8), *(_QWORD *)(v52 + 16));
  else
    v323 = *(std::string *)(v52 + 8);
  v146 = *(_DWORD *)(v52 + 32);
  v324 = v146;
  v322 = off_24C335AF8;
  v144 = *(_QWORD *)(v52 + 36);
  v325 = v144;
  if (*(char *)(v50 + 31) < 0)
    std::string::__init_copy_ctor_external(&v319, *(const std::string::value_type **)(v50 + 8), *(_QWORD *)(v50 + 16));
  else
    v319 = *(std::string *)(v50 + 8);
  v140 = *(_DWORD *)(v50 + 32);
  v320 = v140;
  v318 = off_24C335AF8;
  v138 = *(_QWORD *)(v50 + 36);
  v321 = v138;
  if (*(char *)(v48 + 31) < 0)
    std::string::__init_copy_ctor_external(&v315, *(const std::string::value_type **)(v48 + 8), *(_QWORD *)(v48 + 16));
  else
    v315 = *(std::string *)(v48 + 8);
  v136 = *(_DWORD *)(v48 + 32);
  v316 = v136;
  v314 = off_24C335AF8;
  v135 = *(_QWORD *)(v48 + 36);
  v317 = v135;
  v112 = v57;
  if (*(char *)(v46 + 31) < 0)
    std::string::__init_copy_ctor_external(&v310, *(const std::string::value_type **)(v46 + 8), *(_QWORD *)(v46 + 16));
  else
    v310 = *(std::string *)(v46 + 8);
  v59 = *(_DWORD *)(v46 + 32);
  v309 = off_24C335B18;
  v312 = *(_QWORD *)(v46 + 36);
  v60 = *(_DWORD *)(v46 + 44);
  v134 = v59;
  v311 = v59;
  v313 = v60;
  v304 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a9 + 31) < 0)
    std::string::__init_copy_ctor_external(&v305, *(const std::string::value_type **)(a9 + 8), *(_QWORD *)(a9 + 16));
  else
    v305 = *(std::string *)(a9 + 8);
  v306 = *(_DWORD *)(a9 + 32);
  v304 = &off_24C335AB8;
  v307 = *(_BYTE *)(a9 + 36);
  if (*(char *)(a9 + 63) < 0)
    std::string::__init_copy_ctor_external(&v308, *(const std::string::value_type **)(a9 + 40), *(_QWORD *)(a9 + 48));
  else
    v308 = *(std::string *)(a9 + 40);
  v299 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a10 + 31) < 0)
    std::string::__init_copy_ctor_external(&v300, *(const std::string::value_type **)(a10 + 8), *(_QWORD *)(a10 + 16));
  else
    v300 = *(std::string *)(a10 + 8);
  v301 = *(_DWORD *)(a10 + 32);
  v299 = &off_24C335AB8;
  v302 = *(_BYTE *)(a10 + 36);
  if (*(char *)(a10 + 63) < 0)
    std::string::__init_copy_ctor_external(&v303, *(const std::string::value_type **)(a10 + 40), *(_QWORD *)(a10 + 48));
  else
    v303 = *(std::string *)(a10 + 40);
  if (*(char *)(a11 + 31) < 0)
    std::string::__init_copy_ctor_external(&v295, *(const std::string::value_type **)(a11 + 8), *(_QWORD *)(a11 + 16));
  else
    v295 = *(std::string *)(a11 + 8);
  v61 = *(_DWORD *)(a11 + 32);
  v294 = off_24C335B18;
  v297 = *(_QWORD *)(a11 + 36);
  v62 = *(_DWORD *)(a11 + 44);
  v133 = v61;
  v296 = v61;
  v298 = v62;
  if (*(char *)(a12 + 31) < 0)
    std::string::__init_copy_ctor_external(&v290, *(const std::string::value_type **)(a12 + 8), *(_QWORD *)(a12 + 16));
  else
    v290 = *(std::string *)(a12 + 8);
  v63 = *(_DWORD *)(a12 + 32);
  v289 = off_24C335B18;
  v292 = *(_QWORD *)(a12 + 36);
  v64 = *(_DWORD *)(a12 + 44);
  v132 = v63;
  v291 = v63;
  v293 = v64;
  if (*(char *)(a13 + 31) < 0)
    std::string::__init_copy_ctor_external(&v286, *(const std::string::value_type **)(a13 + 8), *(_QWORD *)(a13 + 16));
  else
    v286 = *(std::string *)(a13 + 8);
  v131 = *(_DWORD *)(a13 + 32);
  v287 = v131;
  v285 = off_24C335AF8;
  v130 = *(_QWORD *)(a13 + 36);
  v288 = v130;
  if (*(char *)(a14 + 31) < 0)
    std::string::__init_copy_ctor_external(&v282, *(const std::string::value_type **)(a14 + 8), *(_QWORD *)(a14 + 16));
  else
    v282 = *(std::string *)(a14 + 8);
  v129 = *(_DWORD *)(a14 + 32);
  v283 = v129;
  v281 = off_24C335AF8;
  v128 = *(_QWORD *)(a14 + 36);
  v284 = v128;
  if (*(char *)(a15 + 31) < 0)
    std::string::__init_copy_ctor_external(&v278, *(const std::string::value_type **)(a15 + 8), *(_QWORD *)(a15 + 16));
  else
    v278 = *(std::string *)(a15 + 8);
  v127 = *(_DWORD *)(a15 + 32);
  v279 = v127;
  v277 = off_24C335AF8;
  v126 = *(_QWORD *)(a15 + 36);
  v280 = v126;
  if (*(char *)(a16 + 31) < 0)
    std::string::__init_copy_ctor_external(&v274, *(const std::string::value_type **)(a16 + 8), *(_QWORD *)(a16 + 16));
  else
    v274 = *(std::string *)(a16 + 8);
  v125 = *(_DWORD *)(a16 + 32);
  v275 = v125;
  v273 = off_24C335AF8;
  v124 = *(_QWORD *)(a16 + 36);
  v276 = v124;
  if (*(char *)(a17 + 31) < 0)
    std::string::__init_copy_ctor_external(&v270, *(const std::string::value_type **)(a17 + 8), *(_QWORD *)(a17 + 16));
  else
    v270 = *(std::string *)(a17 + 8);
  v123 = *(_DWORD *)(a17 + 32);
  v271 = v123;
  v269 = off_24C335AF8;
  v122 = *(_QWORD *)(a17 + 36);
  v272 = v122;
  if (*(char *)(a18 + 31) < 0)
    std::string::__init_copy_ctor_external(&v266, *(const std::string::value_type **)(a18 + 8), *(_QWORD *)(a18 + 16));
  else
    v266 = *(std::string *)(a18 + 8);
  v121 = *(_DWORD *)(a18 + 32);
  v267 = v121;
  v265 = off_24C335AF8;
  v120 = *(_QWORD *)(a18 + 36);
  v268 = v120;
  if (*(char *)(a19 + 31) < 0)
    std::string::__init_copy_ctor_external(&v262, *(const std::string::value_type **)(a19 + 8), *(_QWORD *)(a19 + 16));
  else
    v262 = *(std::string *)(a19 + 8);
  v119 = *(_DWORD *)(a19 + 32);
  v263 = v119;
  v261 = off_24C335AF8;
  v65 = *(_QWORD *)(a19 + 36);
  v264 = v65;
  v256 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a20 + 31) < 0)
    std::string::__init_copy_ctor_external(&v257, *(const std::string::value_type **)(a20 + 8), *(_QWORD *)(a20 + 16));
  else
    v257 = *(std::string *)(a20 + 8);
  v258 = *(_DWORD *)(a20 + 32);
  v256 = &off_24C335AB8;
  v259 = *(_BYTE *)(a20 + 36);
  v118 = v65;
  if (*(char *)(a20 + 63) < 0)
    std::string::__init_copy_ctor_external(&v260, *(const std::string::value_type **)(a20 + 40), *(_QWORD *)(a20 + 48));
  else
    v260 = *(std::string *)(a20 + 40);
  v251 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a21 + 31) < 0)
    std::string::__init_copy_ctor_external(&v252, *(const std::string::value_type **)(a21 + 8), *(_QWORD *)(a21 + 16));
  else
    v252 = *(std::string *)(a21 + 8);
  v253 = *(_DWORD *)(a21 + 32);
  v251 = &off_24C335AB8;
  v254 = *(_BYTE *)(a21 + 36);
  if (*(char *)(a21 + 63) < 0)
    std::string::__init_copy_ctor_external(&v255, *(const std::string::value_type **)(a21 + 40), *(_QWORD *)(a21 + 48));
  else
    v255 = *(std::string *)(a21 + 40);
  v246 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a22 + 31) < 0)
    std::string::__init_copy_ctor_external(&v247, *(const std::string::value_type **)(a22 + 8), *(_QWORD *)(a22 + 16));
  else
    v247 = *(std::string *)(a22 + 8);
  v248 = *(_DWORD *)(a22 + 32);
  v246 = &off_24C335AB8;
  v249 = *(_BYTE *)(a22 + 36);
  if (*(char *)(a22 + 63) < 0)
    std::string::__init_copy_ctor_external(&v250, *(const std::string::value_type **)(a22 + 40), *(_QWORD *)(a22 + 48));
  else
    v250 = *(std::string *)(a22 + 40);
  if (*(char *)(a23 + 31) < 0)
    std::string::__init_copy_ctor_external(&v243, *(const std::string::value_type **)(a23 + 8), *(_QWORD *)(a23 + 16));
  else
    v243 = *(std::string *)(a23 + 8);
  v117 = *(_DWORD *)(a23 + 32);
  v244 = v117;
  v242 = off_24C335AF8;
  v116 = *(_QWORD *)(a23 + 36);
  v245 = v116;
  if (*(char *)(a24 + 31) < 0)
    std::string::__init_copy_ctor_external(&v238, *(const std::string::value_type **)(a24 + 8), *(_QWORD *)(a24 + 16));
  else
    v238 = *(std::string *)(a24 + 8);
  v66 = *(_DWORD *)(a24 + 32);
  v237 = off_24C335B18;
  v240 = *(_QWORD *)(a24 + 36);
  v67 = *(_DWORD *)(a24 + 44);
  v115 = v66;
  v239 = v66;
  v241 = v67;
  if (*(char *)(a25 + 31) < 0)
    std::string::__init_copy_ctor_external(&v234, *(const std::string::value_type **)(a25 + 8), *(_QWORD *)(a25 + 16));
  else
    v234 = *(std::string *)(a25 + 8);
  v114 = *(_DWORD *)(a25 + 32);
  v235 = v114;
  v233 = off_24C335AF8;
  v113 = *(_QWORD *)(a25 + 36);
  v236 = v113;
  v228 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a26 + 31) < 0)
    std::string::__init_copy_ctor_external(&v229, *(const std::string::value_type **)(a26 + 8), *(_QWORD *)(a26 + 16));
  else
    v229 = *(std::string *)(a26 + 8);
  v230 = *(_DWORD *)(a26 + 32);
  v228 = &off_24C335AB8;
  v231 = *(_BYTE *)(a26 + 36);
  if (*(char *)(a26 + 63) < 0)
    std::string::__init_copy_ctor_external(&v232, *(const std::string::value_type **)(a26 + 40), *(_QWORD *)(a26 + 48));
  else
    v232 = *(std::string *)(a26 + 40);
  if (*(char *)(a27 + 31) < 0)
    std::string::__init_copy_ctor_external(&v224, *(const std::string::value_type **)(a27 + 8), *(_QWORD *)(a27 + 16));
  else
    v224 = *(std::string *)(a27 + 8);
  v68 = *(_DWORD *)(a27 + 32);
  v223 = off_24C335B18;
  v226 = *(_QWORD *)(a27 + 36);
  v69 = *(_DWORD *)(a27 + 44);
  v111 = v68;
  v225 = v68;
  v227 = v69;
  v218 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a28 + 31) < 0)
    std::string::__init_copy_ctor_external(&v219, *(const std::string::value_type **)(a28 + 8), *(_QWORD *)(a28 + 16));
  else
    v219 = *(std::string *)(a28 + 8);
  v220 = *(_DWORD *)(a28 + 32);
  v218 = &off_24C335AB8;
  v221 = *(_BYTE *)(a28 + 36);
  if (*(char *)(a28 + 63) < 0)
    std::string::__init_copy_ctor_external(&v222, *(const std::string::value_type **)(a28 + 40), *(_QWORD *)(a28 + 48));
  else
    v222 = *(std::string *)(a28 + 40);
  v213 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a29 + 31) < 0)
    std::string::__init_copy_ctor_external(&v214, *(const std::string::value_type **)(a29 + 8), *(_QWORD *)(a29 + 16));
  else
    v214 = *(std::string *)(a29 + 8);
  v215 = *(_DWORD *)(a29 + 32);
  v213 = &off_24C335AB8;
  v216 = *(_BYTE *)(a29 + 36);
  if (*(char *)(a29 + 63) < 0)
    std::string::__init_copy_ctor_external(&v217, *(const std::string::value_type **)(a29 + 40), *(_QWORD *)(a29 + 48));
  else
    v217 = *(std::string *)(a29 + 40);
  if (*(char *)(a30 + 31) < 0)
    std::string::__init_copy_ctor_external(&v210, *(const std::string::value_type **)(a30 + 8), *(_QWORD *)(a30 + 16));
  else
    v210 = *(std::string *)(a30 + 8);
  v110 = *(_DWORD *)(a30 + 32);
  v211 = v110;
  v209 = off_24C335AF8;
  v109 = *(_QWORD *)(a30 + 36);
  v212 = v109;
  if (*(char *)(a31 + 31) < 0)
    std::string::__init_copy_ctor_external(&v205, *(const std::string::value_type **)(a31 + 8), *(_QWORD *)(a31 + 16));
  else
    v205 = *(std::string *)(a31 + 8);
  v70 = *(_DWORD *)(a31 + 32);
  v204 = off_24C335B18;
  v207 = *(_QWORD *)(a31 + 36);
  v71 = *(_DWORD *)(a31 + 44);
  v108 = v70;
  v206 = v70;
  v208 = v71;
  if (*(char *)(a32 + 31) < 0)
    std::string::__init_copy_ctor_external(&v201, *(const std::string::value_type **)(a32 + 8), *(_QWORD *)(a32 + 16));
  else
    v201 = *(std::string *)(a32 + 8);
  v107 = *(_DWORD *)(a32 + 32);
  v202 = v107;
  v200 = off_24C335AF8;
  v72 = *(_QWORD *)(a32 + 36);
  v203 = v72;
  v195 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a33 + 31) < 0)
    std::string::__init_copy_ctor_external(&v196, *(const std::string::value_type **)(a33 + 8), *(_QWORD *)(a33 + 16));
  else
    v196 = *(std::string *)(a33 + 8);
  v197 = *(_DWORD *)(a33 + 32);
  v195 = &off_24C335AB8;
  v198 = *(_BYTE *)(a33 + 36);
  if (*(char *)(a33 + 63) < 0)
    std::string::__init_copy_ctor_external(&v199, *(const std::string::value_type **)(a33 + 40), *(_QWORD *)(a33 + 48));
  else
    v199 = *(std::string *)(a33 + 40);
  if (*(char *)(a34 + 31) < 0)
    std::string::__init_copy_ctor_external(&v192, *(const std::string::value_type **)(a34 + 8), *(_QWORD *)(a34 + 16));
  else
    v192 = *(std::string *)(a34 + 8);
  v106 = *(_DWORD *)(a34 + 32);
  v193 = v106;
  v191 = off_24C335AF8;
  v105 = *(_QWORD *)(a34 + 36);
  v194 = v105;
  if (*(char *)(a35 + 31) < 0)
    std::string::__init_copy_ctor_external(&v187, *(const std::string::value_type **)(a35 + 8), *(_QWORD *)(a35 + 16));
  else
    v187 = *(std::string *)(a35 + 8);
  v73 = *(_DWORD *)(a35 + 32);
  v186 = off_24C335B18;
  v189 = *(_QWORD *)(a35 + 36);
  v74 = *(_DWORD *)(a35 + 44);
  v104 = v73;
  v188 = v73;
  v190 = v74;
  if (*(char *)(a36 + 31) < 0)
    std::string::__init_copy_ctor_external(&v183, *(const std::string::value_type **)(a36 + 8), *(_QWORD *)(a36 + 16));
  else
    v183 = *(std::string *)(a36 + 8);
  v103 = *(_DWORD *)(a36 + 32);
  v184 = v103;
  v182 = off_24C335AF8;
  v102 = *(_QWORD *)(a36 + 36);
  v185 = v102;
  if (*(char *)(a37 + 31) < 0)
    std::string::__init_copy_ctor_external(&v179, *(const std::string::value_type **)(a37 + 8), *(_QWORD *)(a37 + 16));
  else
    v179 = *(std::string *)(a37 + 8);
  v101 = *(_DWORD *)(a37 + 32);
  v180 = v101;
  v178 = off_24C335AF8;
  v100 = *(_QWORD *)(a37 + 36);
  v181 = v100;
  v174 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a38 + 31) < 0)
    std::string::__init_copy_ctor_external(&v175, *(const std::string::value_type **)(a38 + 8), *(_QWORD *)(a38 + 16));
  else
    v175 = *(std::string *)(a38 + 8);
  v99 = *(_DWORD *)(a38 + 32);
  v176 = v99;
  v174 = off_24C335AF8;
  v98 = *(_QWORD *)(a38 + 36);
  v177 = v98;
  v169 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a39 + 31) < 0)
    std::string::__init_copy_ctor_external(&v170, *(const std::string::value_type **)(a39 + 8), *(_QWORD *)(a39 + 16));
  else
    v170 = *(std::string *)(a39 + 8);
  v171 = *(_DWORD *)(a39 + 32);
  v169 = &off_24C335AB8;
  v172 = *(_BYTE *)(a39 + 36);
  if (*(char *)(a39 + 63) < 0)
    std::string::__init_copy_ctor_external(&v173, *(const std::string::value_type **)(a39 + 40), *(_QWORD *)(a39 + 48));
  else
    v173 = *(std::string *)(a39 + 40);
  v164 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a40 + 31) < 0)
    std::string::__init_copy_ctor_external(&v165, *(const std::string::value_type **)(a40 + 8), *(_QWORD *)(a40 + 16));
  else
    v165 = *(std::string *)(a40 + 8);
  v166 = *(_DWORD *)(a40 + 32);
  v164 = &off_24C335AB8;
  v167 = *(_BYTE *)(a40 + 36);
  if (*(char *)(a40 + 63) < 0)
    std::string::__init_copy_ctor_external(&v168, *(const std::string::value_type **)(a40 + 40), *(_QWORD *)(a40 + 48));
  else
    v168 = *(std::string *)(a40 + 40);
  v159 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a41 + 31) < 0)
    std::string::__init_copy_ctor_external(&v160, *(const std::string::value_type **)(a41 + 8), *(_QWORD *)(a41 + 16));
  else
    v160 = *(std::string *)(a41 + 8);
  v75 = *(_DWORD *)(a41 + 32);
  v159 = off_24C335B18;
  v162 = *(_QWORD *)(a41 + 36);
  v76 = *(_DWORD *)(a41 + 44);
  v97 = v75;
  v161 = v75;
  v163 = v76;
  v155 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a42 + 31) < 0)
    std::string::__init_copy_ctor_external(&v156, *(const std::string::value_type **)(a42 + 8), *(_QWORD *)(a42 + 16));
  else
    v156 = *(std::string *)(a42 + 8);
  v96 = *(_DWORD *)(a42 + 32);
  v157 = v96;
  v155 = off_24C335AF8;
  v95 = *(_QWORD *)(a42 + 36);
  v158 = v95;
  if (*(char *)(a43 + 31) < 0)
    std::string::__init_copy_ctor_external(&v152, *(const std::string::value_type **)(a43 + 8), *(_QWORD *)(a43 + 16));
  else
    v152 = *(std::string *)(a43 + 8);
  v77 = *(_DWORD *)(a43 + 32);
  v153 = v77;
  v94 = *(_QWORD *)(a43 + 36);
  v154 = v94;
  v510 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v511, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
  else
    v511 = __s;
  v512 = v58;
  v510 = off_24C335AF8;
  v513 = v149;
  v506 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v323.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v507, v323.__r_.__value_.__l.__data_, v323.__r_.__value_.__l.__size_);
  else
    v507 = v323;
  v508 = v146;
  v506 = off_24C335AF8;
  v509 = v144;
  v502 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v319.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v503, v319.__r_.__value_.__l.__data_, v319.__r_.__value_.__l.__size_);
  else
    v503 = v319;
  v504 = v140;
  v502 = off_24C335AF8;
  v505 = v138;
  v498 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v315.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v499, v315.__r_.__value_.__l.__data_, v315.__r_.__value_.__l.__size_);
  else
    v499 = v315;
  v500 = v136;
  v498 = off_24C335AF8;
  v501 = v135;
  v493 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v310.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v494, v310.__r_.__value_.__l.__data_, v310.__r_.__value_.__l.__size_);
  else
    v494 = v310;
  v493 = off_24C335B18;
  v496 = v312;
  v495 = v134;
  v497 = v313;
  v488 = (uint64_t (**)())off_24C335D90;
  v93 = v77;
  if (SHIBYTE(v305.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v489, v305.__r_.__value_.__l.__data_, v305.__r_.__value_.__l.__size_);
  else
    v489 = v305;
  v490 = v306;
  v488 = &off_24C335AB8;
  v491 = v307;
  if (SHIBYTE(v308.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v492, v308.__r_.__value_.__l.__data_, v308.__r_.__value_.__l.__size_);
  else
    v492 = v308;
  v483 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v300.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v484, v300.__r_.__value_.__l.__data_, v300.__r_.__value_.__l.__size_);
  else
    v484 = v300;
  v485 = v301;
  v483 = &off_24C335AB8;
  v486 = v302;
  if (SHIBYTE(v303.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v487, v303.__r_.__value_.__l.__data_, v303.__r_.__value_.__l.__size_);
  else
    v487 = v303;
  v478 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v295.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v479, v295.__r_.__value_.__l.__data_, v295.__r_.__value_.__l.__size_);
  else
    v479 = v295;
  v478 = off_24C335B18;
  v481 = v297;
  v480 = v133;
  v482 = v298;
  v473 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v290.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v474, v290.__r_.__value_.__l.__data_, v290.__r_.__value_.__l.__size_);
  else
    v474 = v290;
  v473 = off_24C335B18;
  v476 = v292;
  v475 = v132;
  v477 = v293;
  v469 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v286.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v470, v286.__r_.__value_.__l.__data_, v286.__r_.__value_.__l.__size_);
  else
    v470 = v286;
  v471 = v131;
  v469 = off_24C335AF8;
  v472 = v130;
  v465 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v282.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v466, v282.__r_.__value_.__l.__data_, v282.__r_.__value_.__l.__size_);
  else
    v466 = v282;
  v467 = v129;
  v465 = off_24C335AF8;
  v468 = v128;
  v461 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v278.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v462, v278.__r_.__value_.__l.__data_, v278.__r_.__value_.__l.__size_);
  else
    v462 = v278;
  v463 = v127;
  v461 = off_24C335AF8;
  v464 = v126;
  v457 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v274.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v458, v274.__r_.__value_.__l.__data_, v274.__r_.__value_.__l.__size_);
  else
    v458 = v274;
  v459 = v125;
  v457 = off_24C335AF8;
  v460 = v124;
  v453 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v270.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v454, v270.__r_.__value_.__l.__data_, v270.__r_.__value_.__l.__size_);
  else
    v454 = v270;
  v455 = v123;
  v453 = off_24C335AF8;
  v456 = v122;
  v449 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v266.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v450, v266.__r_.__value_.__l.__data_, v266.__r_.__value_.__l.__size_);
  else
    v450 = v266;
  v451 = v121;
  v449 = off_24C335AF8;
  v452 = v120;
  v445 = (uint64_t (**)())off_24C335D90;
  v78 = SHIBYTE(v262.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v262.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v446, v262.__r_.__value_.__l.__data_, v262.__r_.__value_.__l.__size_);
  else
    v446 = v262;
  v447 = v119;
  v445 = off_24C335AF8;
  v448 = v118;
  v440 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v257.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v441, v257.__r_.__value_.__l.__data_, v257.__r_.__value_.__l.__size_);
  else
    v441 = v257;
  v442 = v258;
  v440 = &off_24C335AB8;
  v443 = v259;
  if (SHIBYTE(v260.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v444, v260.__r_.__value_.__l.__data_, v260.__r_.__value_.__l.__size_);
  else
    v444 = v260;
  v435 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v252.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v436, v252.__r_.__value_.__l.__data_, v252.__r_.__value_.__l.__size_);
  else
    v436 = v252;
  v437 = v253;
  v435 = &off_24C335AB8;
  v438 = v254;
  if (SHIBYTE(v255.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v439, v255.__r_.__value_.__l.__data_, v255.__r_.__value_.__l.__size_);
  else
    v439 = v255;
  v430 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v247.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v431, v247.__r_.__value_.__l.__data_, v247.__r_.__value_.__l.__size_);
  else
    v431 = v247;
  v432 = v248;
  v430 = &off_24C335AB8;
  v433 = v249;
  if (SHIBYTE(v250.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v434, v250.__r_.__value_.__l.__data_, v250.__r_.__value_.__l.__size_);
  else
    v434 = v250;
  v426 = (uint64_t (**)())off_24C335D90;
  v79 = SHIBYTE(v243.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v243.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v427, v243.__r_.__value_.__l.__data_, v243.__r_.__value_.__l.__size_);
  else
    v427 = v243;
  v428 = v117;
  v426 = off_24C335AF8;
  v429 = v116;
  v421 = (uint64_t (**)())off_24C335D90;
  v150 = SHIBYTE(v238.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v238.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v422, v238.__r_.__value_.__l.__data_, v238.__r_.__value_.__l.__size_);
  else
    v422 = v238;
  v421 = off_24C335B18;
  v424 = v240;
  v423 = v115;
  v425 = v241;
  v417 = (uint64_t (**)())off_24C335D90;
  v148 = SHIBYTE(v234.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v234.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v418, v234.__r_.__value_.__l.__data_, v234.__r_.__value_.__l.__size_);
  else
    v418 = v234;
  v419 = v114;
  v417 = off_24C335AF8;
  v420 = v113;
  v412 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v229.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v413, v229.__r_.__value_.__l.__data_, v229.__r_.__value_.__l.__size_);
  else
    v413 = v229;
  v414 = v230;
  v412 = &off_24C335AB8;
  v415 = v231;
  if (SHIBYTE(v232.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v416, v232.__r_.__value_.__l.__data_, v232.__r_.__value_.__l.__size_);
  else
    v416 = v232;
  v407 = (uint64_t (**)())off_24C335D90;
  v147 = SHIBYTE(v224.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v224.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v408, v224.__r_.__value_.__l.__data_, v224.__r_.__value_.__l.__size_);
  else
    v408 = v224;
  v407 = off_24C335B18;
  v410 = v226;
  v409 = v111;
  v411 = v227;
  v402 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v219.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v403, v219.__r_.__value_.__l.__data_, v219.__r_.__value_.__l.__size_);
  else
    v403 = v219;
  v404 = v220;
  v402 = &off_24C335AB8;
  v405 = v221;
  if (SHIBYTE(v222.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v406, v222.__r_.__value_.__l.__data_, v222.__r_.__value_.__l.__size_);
  else
    v406 = v222;
  v397 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v214.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v398, v214.__r_.__value_.__l.__data_, v214.__r_.__value_.__l.__size_);
  else
    v398 = v214;
  v399 = v215;
  v397 = &off_24C335AB8;
  v400 = v216;
  if (SHIBYTE(v217.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v401, v217.__r_.__value_.__l.__data_, v217.__r_.__value_.__l.__size_);
  else
    v401 = v217;
  v393 = (uint64_t (**)())off_24C335D90;
  v80 = SHIBYTE(v210.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v210.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v394, v210.__r_.__value_.__l.__data_, v210.__r_.__value_.__l.__size_);
  else
    v394 = v210;
  v395 = v110;
  v393 = off_24C335AF8;
  v396 = v109;
  v388 = (uint64_t (**)())off_24C335D90;
  v145 = SHIBYTE(v205.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v205.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v389, v205.__r_.__value_.__l.__data_, v205.__r_.__value_.__l.__size_);
  else
    v389 = v205;
  v388 = off_24C335B18;
  v391 = v207;
  v390 = v108;
  v392 = v208;
  v384 = (uint64_t (**)())off_24C335D90;
  v143 = SHIBYTE(v201.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v201.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v385, v201.__r_.__value_.__l.__data_, v201.__r_.__value_.__l.__size_);
  else
    v385 = v201;
  v386 = v107;
  v384 = off_24C335AF8;
  v387 = v72;
  v379 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v196.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v380, v196.__r_.__value_.__l.__data_, v196.__r_.__value_.__l.__size_);
  else
    v380 = v196;
  v381 = v197;
  v379 = &off_24C335AB8;
  v382 = v198;
  if (SHIBYTE(v199.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v383, v199.__r_.__value_.__l.__data_, v199.__r_.__value_.__l.__size_);
  else
    v383 = v199;
  v375 = (uint64_t (**)())off_24C335D90;
  v141 = SHIBYTE(v192.__r_.__value_.__r.__words[2]);
  v142 = v80;
  if (SHIBYTE(v192.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v376, v192.__r_.__value_.__l.__data_, v192.__r_.__value_.__l.__size_);
  else
    v376 = v192;
  v377 = v106;
  v375 = off_24C335AF8;
  v378 = v105;
  v370 = (uint64_t (**)())off_24C335D90;
  v139 = SHIBYTE(v187.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v187.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v371, v187.__r_.__value_.__l.__data_, v187.__r_.__value_.__l.__size_);
  else
    v371 = v187;
  v370 = off_24C335B18;
  v373 = v189;
  v372 = v104;
  v374 = v190;
  v366 = (uint64_t (**)())off_24C335D90;
  v81 = SHIBYTE(v183.__r_.__value_.__r.__words[2]);
  v137 = v79;
  if (SHIBYTE(v183.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v367, v183.__r_.__value_.__l.__data_, v183.__r_.__value_.__l.__size_);
  else
    v367 = v183;
  v368 = v103;
  v366 = off_24C335AF8;
  v369 = v102;
  v362 = (uint64_t (**)())off_24C335D90;
  v82 = SHIBYTE(v179.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v179.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v363, v179.__r_.__value_.__l.__data_, v179.__r_.__value_.__l.__size_);
  else
    v363 = v179;
  v364 = v101;
  v362 = off_24C335AF8;
  v365 = v100;
  v358 = (uint64_t (**)())off_24C335D90;
  v83 = SHIBYTE(v175.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v175.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v359, v175.__r_.__value_.__l.__data_, v175.__r_.__value_.__l.__size_);
  else
    v359 = v175;
  v360 = v99;
  v358 = off_24C335AF8;
  v361 = v98;
  v353 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v170.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v354, v170.__r_.__value_.__l.__data_, v170.__r_.__value_.__l.__size_);
  else
    v354 = v170;
  v355 = v171;
  v353 = &off_24C335AB8;
  v356 = v172;
  if (SHIBYTE(v173.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v357, v173.__r_.__value_.__l.__data_, v173.__r_.__value_.__l.__size_);
  else
    v357 = v173;
  v348 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v165.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v349, v165.__r_.__value_.__l.__data_, v165.__r_.__value_.__l.__size_);
  else
    v349 = v165;
  v350 = v166;
  v348 = &off_24C335AB8;
  v351 = v167;
  if (SHIBYTE(v168.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v352, v168.__r_.__value_.__l.__data_, v168.__r_.__value_.__l.__size_);
  else
    v352 = v168;
  v343 = (uint64_t (**)())off_24C335D90;
  v84 = SHIBYTE(v160.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v160.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v344, v160.__r_.__value_.__l.__data_, v160.__r_.__value_.__l.__size_);
  else
    v344 = v160;
  v343 = off_24C335B18;
  v346 = v162;
  v345 = v97;
  v347 = v163;
  v339 = (uint64_t (**)())off_24C335D90;
  v85 = SHIBYTE(v156.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v156.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v340, v156.__r_.__value_.__l.__data_, v156.__r_.__value_.__l.__size_);
  else
    v340 = v156;
  v341 = v96;
  v339 = off_24C335AF8;
  v342 = v95;
  v335 = (uint64_t (**)())off_24C335D90;
  v86 = SHIBYTE(v152.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v152.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&__p, v152.__r_.__value_.__l.__data_, v152.__r_.__value_.__l.__size_);
  else
    __p = v152;
  v337 = v93;
  v335 = off_24C335AF8;
  v338 = v94;
  mediaplatform::DatabaseColumnTuple<47ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::DatabaseColumnTuple(v151, (uint64_t)&v510, (uint64_t)&v506, (uint64_t)&v502, (uint64_t)&v498, (uint64_t)&v493, (uint64_t)&v488, (uint64_t)&v483, (uint64_t)&v478, (uint64_t)&v473, (uint64_t)&v469, (uint64_t)&v465, (uint64_t)&v461, (uint64_t)&v457, (uint64_t)&v453, (uint64_t)&v449, (uint64_t)&v445, (uint64_t)&v440, (uint64_t)&v435,
    (uint64_t)&v430,
    (uint64_t)&v426,
    (uint64_t)&v421,
    (uint64_t)&v417,
    (uint64_t)&v412,
    (uint64_t)&v407,
    (uint64_t)&v402,
    (uint64_t)&v397,
    (uint64_t)&v393,
    (uint64_t)&v388,
    (uint64_t)&v384,
    (uint64_t)&v379,
    (uint64_t)&v375,
    (uint64_t)&v370,
    (uint64_t)&v366,
    (uint64_t)&v362,
    (uint64_t)&v358,
    (uint64_t)&v353,
    (uint64_t)&v348,
    (uint64_t)&v343,
    (uint64_t)&v339,
    (uint64_t)&v335);
  v335 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v339 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v340.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v340.__r_.__value_.__l.__data_);
  v343 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v344.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v344.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v348);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v353);
  v358 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v359.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v359.__r_.__value_.__l.__data_);
  v362 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v363.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v363.__r_.__value_.__l.__data_);
  v366 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v367.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v367.__r_.__value_.__l.__data_);
  v370 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v371.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v371.__r_.__value_.__l.__data_);
  v375 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v376.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v376.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v379);
  v384 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v385.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v385.__r_.__value_.__l.__data_);
  v388 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v389.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v389.__r_.__value_.__l.__data_);
  v393 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v394.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v394.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v397);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v402);
  v407 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v408.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v408.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v412);
  v417 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v418.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v418.__r_.__value_.__l.__data_);
  v421 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v422.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v422.__r_.__value_.__l.__data_);
  v426 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v427.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v427.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v430);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v435);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v440);
  v445 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v446.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v446.__r_.__value_.__l.__data_);
  v449 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v450.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v450.__r_.__value_.__l.__data_);
  v453 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v454.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v454.__r_.__value_.__l.__data_);
  v457 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v458.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v458.__r_.__value_.__l.__data_);
  v461 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v462.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v462.__r_.__value_.__l.__data_);
  v465 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v466.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v466.__r_.__value_.__l.__data_);
  v469 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v470.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v470.__r_.__value_.__l.__data_);
  v473 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v474.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v474.__r_.__value_.__l.__data_);
  v478 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v479.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v479.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v483);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v488);
  v493 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v494.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v494.__r_.__value_.__l.__data_);
  v498 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v499.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v499.__r_.__value_.__l.__data_);
  v502 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v503.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v503.__r_.__value_.__l.__data_);
  v506 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v507.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v507.__r_.__value_.__l.__data_);
  v510 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v511.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v511.__r_.__value_.__l.__data_);
  *(_QWORD *)(v151 + 2096) = off_24C335D90;
  v87 = (std::string *)(v151 + 2104);
  if (SHIBYTE(v331.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v87, v331.__r_.__value_.__l.__data_, v331.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v87->__r_.__value_.__l.__data_ = *(_OWORD *)&v331.__r_.__value_.__l.__data_;
    *(_QWORD *)(v151 + 2120) = *((_QWORD *)&v331.__r_.__value_.__l + 2);
  }
  *(_DWORD *)(v151 + 2128) = v332;
  *(_QWORD *)(v151 + 2096) = &off_24C335AB8;
  *(_BYTE *)(v151 + 2132) = v333;
  v88 = (std::string *)(v151 + 2136);
  if (SHIBYTE(v334.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v88, v334.__r_.__value_.__l.__data_, v334.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v88->__r_.__value_.__l.__data_ = *(_OWORD *)&v334.__r_.__value_.__l.__data_;
    *(_QWORD *)(v151 + 2152) = *((_QWORD *)&v334.__r_.__value_.__l + 2);
  }
  if (v86 < 0)
    operator delete(v152.__r_.__value_.__l.__data_);
  v155 = (uint64_t (**)())off_24C335D90;
  if (v85 < 0)
    operator delete(v156.__r_.__value_.__l.__data_);
  v159 = (uint64_t (**)())off_24C335D90;
  if (v84 < 0)
    operator delete(v160.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v164);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v169);
  v174 = (uint64_t (**)())off_24C335D90;
  if (v83 < 0)
    operator delete(v175.__r_.__value_.__l.__data_);
  v178 = (uint64_t (**)())off_24C335D90;
  if (v82 < 0)
    operator delete(v179.__r_.__value_.__l.__data_);
  v182 = (uint64_t (**)())off_24C335D90;
  if (v81 < 0)
    operator delete(v183.__r_.__value_.__l.__data_);
  v186 = (uint64_t (**)())off_24C335D90;
  if (v139 < 0)
    operator delete(v187.__r_.__value_.__l.__data_);
  v191 = (uint64_t (**)())off_24C335D90;
  if (v141 < 0)
    operator delete(v192.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v195);
  v200 = (uint64_t (**)())off_24C335D90;
  if (v143 < 0)
    operator delete(v201.__r_.__value_.__l.__data_);
  v204 = (uint64_t (**)())off_24C335D90;
  if (v145 < 0)
    operator delete(v205.__r_.__value_.__l.__data_);
  if (v142 < 0)
    operator delete(v210.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v213);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v218);
  if (v147 < 0)
    operator delete(v224.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v228);
  if (v148 < 0)
    operator delete(v234.__r_.__value_.__l.__data_);
  if (v150 < 0)
  {
    operator delete(v238.__r_.__value_.__l.__data_);
    if ((v137 & 0x80000000) == 0)
      goto LABEL_405;
  }
  else if ((v137 & 0x80000000) == 0)
  {
    goto LABEL_405;
  }
  operator delete(v243.__r_.__value_.__l.__data_);
LABEL_405:
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v246);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v251);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v256);
  if (v78 < 0)
    operator delete(v262.__r_.__value_.__l.__data_);
  if (SHIBYTE(v266.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v266.__r_.__value_.__l.__data_);
  if (SHIBYTE(v270.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v270.__r_.__value_.__l.__data_);
  if (SHIBYTE(v274.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v274.__r_.__value_.__l.__data_);
  if (SHIBYTE(v278.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v278.__r_.__value_.__l.__data_);
  if (SHIBYTE(v282.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v282.__r_.__value_.__l.__data_);
  if (SHIBYTE(v286.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v286.__r_.__value_.__l.__data_);
  if (SHIBYTE(v290.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v290.__r_.__value_.__l.__data_);
  if (SHIBYTE(v295.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v295.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v299);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v304);
  if (SHIBYTE(v310.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v310.__r_.__value_.__l.__data_);
  if (SHIBYTE(v315.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v315.__r_.__value_.__l.__data_);
  if (SHIBYTE(v319.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v319.__r_.__value_.__l.__data_);
  if (SHIBYTE(v323.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v323.__r_.__value_.__l.__data_);
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__s.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v330);
  *(_QWORD *)(v151 + 2160) = off_24C335D90;
  if (*(char *)(v112 + 31) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(v151 + 2168), *(const std::string::value_type **)(v112 + 8), *(_QWORD *)(v112 + 16));
  }
  else
  {
    v89 = *(_OWORD *)(v112 + 8);
    *(_QWORD *)(v151 + 2184) = *(_QWORD *)(v112 + 24);
    *(_OWORD *)(v151 + 2168) = v89;
  }
  *(_DWORD *)(v151 + 2192) = *(_DWORD *)(v112 + 32);
  *(_QWORD *)(v151 + 2160) = &off_24C335AB8;
  *(_BYTE *)(v151 + 2196) = *(_BYTE *)(v112 + 36);
  v90 = (std::string *)(v151 + 2200);
  if (*(char *)(v112 + 63) < 0)
  {
    std::string::__init_copy_ctor_external(v90, *(const std::string::value_type **)(v112 + 40), *(_QWORD *)(v112 + 48));
  }
  else
  {
    v91 = *(_OWORD *)(v112 + 40);
    *(_QWORD *)(v151 + 2216) = *(_QWORD *)(v112 + 56);
    *(_OWORD *)&v90->__r_.__value_.__l.__data_ = v91;
  }
  return v151;
}

void sub_20A7DD508(_Unwind_Exception *a1)
{
  void **v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  *(_QWORD *)(v2 + 2160) = v3;
  if (*(char *)(v2 + 2191) < 0)
    operator delete(*v1);
  v5 = STACK[0x420];
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(STACK[0x420] + 2096);
  mediaplatform::DatabaseColumnTuple<47ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(v5);
  _Unwind_Resume(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<45ul,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(uint64_t a1)
{
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 2160);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 2096);
  return mediaplatform::DatabaseColumnTuple<47ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<47ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::DatabaseColumnTuple(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41)
{
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  int v57;
  int v58;
  int v59;
  int v60;
  int v61;
  int v62;
  int v63;
  int v64;
  int v65;
  int v66;
  int v67;
  int v68;
  uint64_t v69;
  int v70;
  int v71;
  int v72;
  int v73;
  int v74;
  int v75;
  int v76;
  int v77;
  int v78;
  int v79;
  int v80;
  int v81;
  int v82;
  std::string *v83;
  int v84;
  std::string *v85;
  __int128 v86;
  uint64_t result;
  uint64_t v88;
  int v89;
  uint64_t v90;
  int v91;
  int v92;
  uint64_t v93;
  int v94;
  uint64_t v95;
  int v96;
  uint64_t v97;
  int v98;
  int v99;
  uint64_t v100;
  int v101;
  uint64_t v102;
  int v103;
  uint64_t v104;
  int v105;
  uint64_t v106;
  int v107;
  uint64_t v108;
  int v109;
  uint64_t v110;
  int v111;
  uint64_t v112;
  int v113;
  uint64_t v114;
  int v115;
  uint64_t v116;
  int v117;
  uint64_t v118;
  int v119;
  uint64_t v120;
  int v121;
  uint64_t v122;
  int v123;
  uint64_t v124;
  int v125;
  int v126;
  int v127;
  int v128;
  int v129;
  int v130;
  int v131;
  int v132;
  int v133;
  int v134;
  uint64_t v135;
  int v136;
  int v137;
  int v138;
  int v139;
  uint64_t v140;
  int v141;
  int v142;
  int v143;
  uint64_t v144;
  std::string v145;
  int v146;
  uint64_t v147;
  uint64_t (**v148)();
  std::string v149;
  int v150;
  uint64_t v151;
  uint64_t (**v152)();
  std::string v153;
  int v154;
  uint64_t v155;
  int v156;
  uint64_t (**v157)();
  std::string v158;
  int v159;
  char v160;
  std::string v161;
  uint64_t (**v162)();
  std::string v163;
  int v164;
  char v165;
  std::string v166;
  uint64_t (**v167)();
  std::string v168;
  int v169;
  uint64_t v170;
  uint64_t (**v171)();
  std::string v172;
  int v173;
  uint64_t v174;
  uint64_t (**v175)();
  std::string v176;
  int v177;
  uint64_t v178;
  uint64_t (**v179)();
  std::string v180;
  int v181;
  uint64_t v182;
  int v183;
  uint64_t (**v184)();
  std::string v185;
  int v186;
  uint64_t v187;
  uint64_t (**v188)();
  std::string v189;
  int v190;
  char v191;
  std::string v192;
  uint64_t (**v193)();
  std::string v194;
  int v195;
  uint64_t v196;
  uint64_t (**v197)();
  std::string v198;
  int v199;
  uint64_t v200;
  int v201;
  uint64_t (**v202)();
  std::string v203;
  int v204;
  uint64_t v205;
  uint64_t (**v206)();
  std::string v207;
  int v208;
  char v209;
  std::string v210;
  uint64_t (**v211)();
  std::string v212;
  int v213;
  char v214;
  std::string v215;
  uint64_t (**v216)();
  std::string v217;
  int v218;
  uint64_t v219;
  int v220;
  uint64_t (**v221)();
  std::string v222;
  int v223;
  char v224;
  std::string v225;
  uint64_t (**v226)();
  std::string v227;
  int v228;
  uint64_t v229;
  uint64_t (**v230)();
  std::string v231;
  int v232;
  uint64_t v233;
  int v234;
  uint64_t (**v235)();
  std::string v236;
  int v237;
  uint64_t v238;
  uint64_t (**v239)();
  std::string v240;
  int v241;
  char v242;
  std::string v243;
  uint64_t (**v244)();
  std::string v245;
  int v246;
  char v247;
  std::string v248;
  uint64_t (**v249)();
  std::string v250;
  int v251;
  char v252;
  std::string v253;
  uint64_t (**v254)();
  std::string v255;
  int v256;
  uint64_t v257;
  uint64_t (**v258)();
  std::string v259;
  int v260;
  uint64_t v261;
  uint64_t (**v262)();
  std::string v263;
  int v264;
  uint64_t v265;
  uint64_t (**v266)();
  std::string v267;
  int v268;
  uint64_t v269;
  uint64_t (**v270)();
  std::string v271;
  int v272;
  uint64_t v273;
  uint64_t (**v274)();
  std::string v275;
  int v276;
  uint64_t v277;
  uint64_t (**v278)();
  std::string v279;
  int v280;
  uint64_t v281;
  uint64_t (**v282)();
  std::string v283;
  int v284;
  uint64_t v285;
  int v286;
  uint64_t (**v287)();
  std::string v288;
  int v289;
  uint64_t v290;
  int v291;
  uint64_t (**v292)();
  std::string v293;
  int v294;
  char v295;
  std::string v296;
  uint64_t (**v297)();
  std::string v298;
  int v299;
  char v300;
  std::string v301;
  uint64_t (**v302)();
  std::string v303;
  int v304;
  uint64_t v305;
  int v306;
  uint64_t (**v307)();
  std::string v308;
  int v309;
  uint64_t v310;
  uint64_t (**v311)();
  std::string __s;
  int v313;
  uint64_t v314;
  uint64_t (**v315)();
  std::string v316;
  int v317;
  uint64_t v318;
  uint64_t (**v319)();
  std::string __p;
  int v321;
  uint64_t v322;
  uint64_t (**v323)();
  std::string v324;
  int v325;
  uint64_t v326;
  uint64_t (**v327)();
  std::string v328;
  int v329;
  uint64_t v330;
  int v331;
  uint64_t (**v332)();
  std::string v333;
  int v334;
  char v335;
  std::string v336;
  uint64_t (**v337)();
  std::string v338;
  int v339;
  char v340;
  std::string v341;
  uint64_t (**v342)();
  std::string v343;
  int v344;
  uint64_t v345;
  uint64_t (**v346)();
  std::string v347;
  int v348;
  uint64_t v349;
  uint64_t (**v350)();
  std::string v351;
  int v352;
  uint64_t v353;
  uint64_t (**v354)();
  std::string v355;
  int v356;
  uint64_t v357;
  int v358;
  uint64_t (**v359)();
  std::string v360;
  int v361;
  uint64_t v362;
  uint64_t (**v363)();
  std::string v364;
  int v365;
  char v366;
  std::string v367;
  uint64_t (**v368)();
  std::string v369;
  int v370;
  uint64_t v371;
  uint64_t (**v372)();
  std::string v373;
  int v374;
  uint64_t v375;
  int v376;
  uint64_t (**v377)();
  std::string v378;
  int v379;
  uint64_t v380;
  uint64_t (**v381)();
  std::string v382;
  int v383;
  char v384;
  std::string v385;
  uint64_t (**v386)();
  std::string v387;
  int v388;
  char v389;
  std::string v390;
  uint64_t (**v391)();
  std::string v392;
  int v393;
  uint64_t v394;
  int v395;
  uint64_t (**v396)();
  std::string v397;
  int v398;
  char v399;
  std::string v400;
  uint64_t (**v401)();
  std::string v402;
  int v403;
  uint64_t v404;
  uint64_t (**v405)();
  std::string v406;
  int v407;
  uint64_t v408;
  int v409;
  uint64_t (**v410)();
  std::string v411;
  int v412;
  uint64_t v413;
  uint64_t (**v414)();
  std::string v415;
  int v416;
  char v417;
  std::string v418;
  uint64_t (**v419)();
  std::string v420;
  int v421;
  char v422;
  std::string v423;
  uint64_t (**v424)();
  std::string v425;
  int v426;
  char v427;
  std::string v428;
  uint64_t (**v429)();
  std::string v430;
  int v431;
  uint64_t v432;
  uint64_t (**v433)();
  std::string v434;
  int v435;
  uint64_t v436;
  uint64_t (**v437)();
  std::string v438;
  int v439;
  uint64_t v440;
  uint64_t (**v441)();
  std::string v442;
  int v443;
  uint64_t v444;
  uint64_t (**v445)();
  std::string v446;
  int v447;
  uint64_t v448;
  uint64_t (**v449)();
  std::string v450;
  int v451;
  uint64_t v452;
  uint64_t (**v453)();
  std::string v454;
  int v455;
  uint64_t v456;
  uint64_t (**v457)();
  std::string v458;
  int v459;
  uint64_t v460;
  int v461;
  uint64_t (**v462)();
  std::string v463;
  int v464;
  uint64_t v465;
  int v466;
  uint64_t (**v467)();
  std::string v468;
  int v469;
  char v470;
  std::string v471;
  uint64_t (**v472)();
  std::string v473;
  int v474;
  char v475;
  std::string v476;
  uint64_t (**v477)();
  std::string v478;
  int v479;
  uint64_t v480;
  int v481;
  uint64_t (**v482)();
  std::string v483;
  int v484;
  uint64_t v485;
  uint64_t (**v486)();
  std::string v487;
  int v488;
  uint64_t v489;

  v41 = MEMORY[0x24BDAC7A8](a1);
  v44 = v43;
  v46 = v45;
  v48 = v47;
  v50 = v49;
  v52 = v51;
  v53 = v42;
  v55 = v54;
  v144 = v41;
  if (*(char *)(v42 + 31) < 0)
    std::string::__init_copy_ctor_external(&v316, *(const std::string::value_type **)(v42 + 8), *(_QWORD *)(v42 + 16));
  else
    v316 = *(std::string *)(v42 + 8);
  v317 = *(_DWORD *)(v53 + 32);
  v315 = off_24C335AF8;
  v318 = *(_QWORD *)(v53 + 36);
  if (*(char *)(v52 + 31) < 0)
    std::string::__init_copy_ctor_external(&__s, *(const std::string::value_type **)(v52 + 8), *(_QWORD *)(v52 + 16));
  else
    __s = *(std::string *)(v52 + 8);
  v142 = *(_DWORD *)(v52 + 32);
  v313 = v142;
  v311 = off_24C335AF8;
  v140 = *(_QWORD *)(v52 + 36);
  v314 = v140;
  if (*(char *)(v50 + 31) < 0)
    std::string::__init_copy_ctor_external(&v308, *(const std::string::value_type **)(v50 + 8), *(_QWORD *)(v50 + 16));
  else
    v308 = *(std::string *)(v50 + 8);
  v137 = *(_DWORD *)(v50 + 32);
  v309 = v137;
  v307 = off_24C335AF8;
  v135 = *(_QWORD *)(v50 + 36);
  v310 = v135;
  if (*(char *)(v48 + 31) < 0)
    std::string::__init_copy_ctor_external(&v303, *(const std::string::value_type **)(v48 + 8), *(_QWORD *)(v48 + 16));
  else
    v303 = *(std::string *)(v48 + 8);
  v56 = *(_DWORD *)(v48 + 32);
  v302 = off_24C335B18;
  v305 = *(_QWORD *)(v48 + 36);
  v57 = *(_DWORD *)(v48 + 44);
  v132 = v56;
  v304 = v56;
  v306 = v57;
  v297 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(v46 + 31) < 0)
    std::string::__init_copy_ctor_external(&v298, *(const std::string::value_type **)(v46 + 8), *(_QWORD *)(v46 + 16));
  else
    v298 = *(std::string *)(v46 + 8);
  v299 = *(_DWORD *)(v46 + 32);
  v297 = &off_24C335AB8;
  v300 = *(_BYTE *)(v46 + 36);
  if (*(char *)(v46 + 63) < 0)
    std::string::__init_copy_ctor_external(&v301, *(const std::string::value_type **)(v46 + 40), *(_QWORD *)(v46 + 48));
  else
    v301 = *(std::string *)(v46 + 40);
  v292 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(v44 + 31) < 0)
    std::string::__init_copy_ctor_external(&v293, *(const std::string::value_type **)(v44 + 8), *(_QWORD *)(v44 + 16));
  else
    v293 = *(std::string *)(v44 + 8);
  v294 = *(_DWORD *)(v44 + 32);
  v292 = &off_24C335AB8;
  v295 = *(_BYTE *)(v44 + 36);
  if (*(char *)(v44 + 63) < 0)
    std::string::__init_copy_ctor_external(&v296, *(const std::string::value_type **)(v44 + 40), *(_QWORD *)(v44 + 48));
  else
    v296 = *(std::string *)(v44 + 40);
  v106 = v55;
  if (*(char *)(a9 + 31) < 0)
    std::string::__init_copy_ctor_external(&v288, *(const std::string::value_type **)(a9 + 8), *(_QWORD *)(a9 + 16));
  else
    v288 = *(std::string *)(a9 + 8);
  v58 = *(_DWORD *)(a9 + 32);
  v287 = off_24C335B18;
  v290 = *(_QWORD *)(a9 + 36);
  v59 = *(_DWORD *)(a9 + 44);
  v127 = v58;
  v289 = v58;
  v291 = v59;
  if (*(char *)(a10 + 31) < 0)
    std::string::__init_copy_ctor_external(&v283, *(const std::string::value_type **)(a10 + 8), *(_QWORD *)(a10 + 16));
  else
    v283 = *(std::string *)(a10 + 8);
  v60 = *(_DWORD *)(a10 + 32);
  v282 = off_24C335B18;
  v285 = *(_QWORD *)(a10 + 36);
  v61 = *(_DWORD *)(a10 + 44);
  v126 = v60;
  v284 = v60;
  v286 = v61;
  if (*(char *)(a11 + 31) < 0)
    std::string::__init_copy_ctor_external(&v279, *(const std::string::value_type **)(a11 + 8), *(_QWORD *)(a11 + 16));
  else
    v279 = *(std::string *)(a11 + 8);
  v125 = *(_DWORD *)(a11 + 32);
  v280 = v125;
  v278 = off_24C335AF8;
  v124 = *(_QWORD *)(a11 + 36);
  v281 = v124;
  if (*(char *)(a12 + 31) < 0)
    std::string::__init_copy_ctor_external(&v275, *(const std::string::value_type **)(a12 + 8), *(_QWORD *)(a12 + 16));
  else
    v275 = *(std::string *)(a12 + 8);
  v123 = *(_DWORD *)(a12 + 32);
  v276 = v123;
  v274 = off_24C335AF8;
  v122 = *(_QWORD *)(a12 + 36);
  v277 = v122;
  if (*(char *)(a13 + 31) < 0)
    std::string::__init_copy_ctor_external(&v271, *(const std::string::value_type **)(a13 + 8), *(_QWORD *)(a13 + 16));
  else
    v271 = *(std::string *)(a13 + 8);
  v121 = *(_DWORD *)(a13 + 32);
  v272 = v121;
  v270 = off_24C335AF8;
  v120 = *(_QWORD *)(a13 + 36);
  v273 = v120;
  if (*(char *)(a14 + 31) < 0)
    std::string::__init_copy_ctor_external(&v267, *(const std::string::value_type **)(a14 + 8), *(_QWORD *)(a14 + 16));
  else
    v267 = *(std::string *)(a14 + 8);
  v119 = *(_DWORD *)(a14 + 32);
  v268 = v119;
  v266 = off_24C335AF8;
  v118 = *(_QWORD *)(a14 + 36);
  v269 = v118;
  if (*(char *)(a15 + 31) < 0)
    std::string::__init_copy_ctor_external(&v263, *(const std::string::value_type **)(a15 + 8), *(_QWORD *)(a15 + 16));
  else
    v263 = *(std::string *)(a15 + 8);
  v117 = *(_DWORD *)(a15 + 32);
  v264 = v117;
  v262 = off_24C335AF8;
  v116 = *(_QWORD *)(a15 + 36);
  v265 = v116;
  if (*(char *)(a16 + 31) < 0)
    std::string::__init_copy_ctor_external(&v259, *(const std::string::value_type **)(a16 + 8), *(_QWORD *)(a16 + 16));
  else
    v259 = *(std::string *)(a16 + 8);
  v115 = *(_DWORD *)(a16 + 32);
  v260 = v115;
  v258 = off_24C335AF8;
  v114 = *(_QWORD *)(a16 + 36);
  v261 = v114;
  if (*(char *)(a17 + 31) < 0)
    std::string::__init_copy_ctor_external(&v255, *(const std::string::value_type **)(a17 + 8), *(_QWORD *)(a17 + 16));
  else
    v255 = *(std::string *)(a17 + 8);
  v113 = *(_DWORD *)(a17 + 32);
  v256 = v113;
  v254 = off_24C335AF8;
  v112 = *(_QWORD *)(a17 + 36);
  v257 = v112;
  v249 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a18 + 31) < 0)
    std::string::__init_copy_ctor_external(&v250, *(const std::string::value_type **)(a18 + 8), *(_QWORD *)(a18 + 16));
  else
    v250 = *(std::string *)(a18 + 8);
  v251 = *(_DWORD *)(a18 + 32);
  v249 = &off_24C335AB8;
  v252 = *(_BYTE *)(a18 + 36);
  if (*(char *)(a18 + 63) < 0)
    std::string::__init_copy_ctor_external(&v253, *(const std::string::value_type **)(a18 + 40), *(_QWORD *)(a18 + 48));
  else
    v253 = *(std::string *)(a18 + 40);
  v244 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a19 + 31) < 0)
    std::string::__init_copy_ctor_external(&v245, *(const std::string::value_type **)(a19 + 8), *(_QWORD *)(a19 + 16));
  else
    v245 = *(std::string *)(a19 + 8);
  v246 = *(_DWORD *)(a19 + 32);
  v244 = &off_24C335AB8;
  v247 = *(_BYTE *)(a19 + 36);
  if (*(char *)(a19 + 63) < 0)
    std::string::__init_copy_ctor_external(&v248, *(const std::string::value_type **)(a19 + 40), *(_QWORD *)(a19 + 48));
  else
    v248 = *(std::string *)(a19 + 40);
  v239 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a20 + 31) < 0)
    std::string::__init_copy_ctor_external(&v240, *(const std::string::value_type **)(a20 + 8), *(_QWORD *)(a20 + 16));
  else
    v240 = *(std::string *)(a20 + 8);
  v241 = *(_DWORD *)(a20 + 32);
  v239 = &off_24C335AB8;
  v242 = *(_BYTE *)(a20 + 36);
  if (*(char *)(a20 + 63) < 0)
    std::string::__init_copy_ctor_external(&v243, *(const std::string::value_type **)(a20 + 40), *(_QWORD *)(a20 + 48));
  else
    v243 = *(std::string *)(a20 + 40);
  if (*(char *)(a21 + 31) < 0)
    std::string::__init_copy_ctor_external(&v236, *(const std::string::value_type **)(a21 + 8), *(_QWORD *)(a21 + 16));
  else
    v236 = *(std::string *)(a21 + 8);
  v62 = *(_DWORD *)(a21 + 32);
  v237 = v62;
  v235 = off_24C335AF8;
  v110 = *(_QWORD *)(a21 + 36);
  v238 = v110;
  if (*(char *)(a22 + 31) < 0)
    std::string::__init_copy_ctor_external(&v231, *(const std::string::value_type **)(a22 + 8), *(_QWORD *)(a22 + 16));
  else
    v231 = *(std::string *)(a22 + 8);
  v63 = *(_DWORD *)(a22 + 32);
  v230 = off_24C335B18;
  v233 = *(_QWORD *)(a22 + 36);
  v64 = *(_DWORD *)(a22 + 44);
  v232 = v63;
  v234 = v64;
  if (*(char *)(a23 + 31) < 0)
    std::string::__init_copy_ctor_external(&v227, *(const std::string::value_type **)(a23 + 8), *(_QWORD *)(a23 + 16));
  else
    v227 = *(std::string *)(a23 + 8);
  v109 = *(_DWORD *)(a23 + 32);
  v228 = v109;
  v226 = off_24C335AF8;
  v108 = *(_QWORD *)(a23 + 36);
  v229 = v108;
  v221 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a24 + 31) < 0)
    std::string::__init_copy_ctor_external(&v222, *(const std::string::value_type **)(a24 + 8), *(_QWORD *)(a24 + 16));
  else
    v222 = *(std::string *)(a24 + 8);
  v223 = *(_DWORD *)(a24 + 32);
  v221 = &off_24C335AB8;
  v224 = *(_BYTE *)(a24 + 36);
  if (*(char *)(a24 + 63) < 0)
    std::string::__init_copy_ctor_external(&v225, *(const std::string::value_type **)(a24 + 40), *(_QWORD *)(a24 + 48));
  else
    v225 = *(std::string *)(a24 + 40);
  if (*(char *)(a25 + 31) < 0)
    std::string::__init_copy_ctor_external(&v217, *(const std::string::value_type **)(a25 + 8), *(_QWORD *)(a25 + 16));
  else
    v217 = *(std::string *)(a25 + 8);
  v65 = *(_DWORD *)(a25 + 32);
  v216 = off_24C335B18;
  v219 = *(_QWORD *)(a25 + 36);
  v66 = *(_DWORD *)(a25 + 44);
  v107 = v65;
  v218 = v65;
  v220 = v66;
  v211 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a26 + 31) < 0)
    std::string::__init_copy_ctor_external(&v212, *(const std::string::value_type **)(a26 + 8), *(_QWORD *)(a26 + 16));
  else
    v212 = *(std::string *)(a26 + 8);
  v213 = *(_DWORD *)(a26 + 32);
  v211 = &off_24C335AB8;
  v214 = *(_BYTE *)(a26 + 36);
  if (*(char *)(a26 + 63) < 0)
    std::string::__init_copy_ctor_external(&v215, *(const std::string::value_type **)(a26 + 40), *(_QWORD *)(a26 + 48));
  else
    v215 = *(std::string *)(a26 + 40);
  v206 = (uint64_t (**)())off_24C335D90;
  v111 = v63;
  if (*(char *)(a27 + 31) < 0)
    std::string::__init_copy_ctor_external(&v207, *(const std::string::value_type **)(a27 + 8), *(_QWORD *)(a27 + 16));
  else
    v207 = *(std::string *)(a27 + 8);
  v208 = *(_DWORD *)(a27 + 32);
  v206 = &off_24C335AB8;
  v209 = *(_BYTE *)(a27 + 36);
  if (*(char *)(a27 + 63) < 0)
    std::string::__init_copy_ctor_external(&v210, *(const std::string::value_type **)(a27 + 40), *(_QWORD *)(a27 + 48));
  else
    v210 = *(std::string *)(a27 + 40);
  if (*(char *)(a28 + 31) < 0)
    std::string::__init_copy_ctor_external(&v203, *(const std::string::value_type **)(a28 + 8), *(_QWORD *)(a28 + 16));
  else
    v203 = *(std::string *)(a28 + 8);
  v105 = *(_DWORD *)(a28 + 32);
  v204 = v105;
  v202 = off_24C335AF8;
  v104 = *(_QWORD *)(a28 + 36);
  v205 = v104;
  if (*(char *)(a29 + 31) < 0)
    std::string::__init_copy_ctor_external(&v198, *(const std::string::value_type **)(a29 + 8), *(_QWORD *)(a29 + 16));
  else
    v198 = *(std::string *)(a29 + 8);
  v67 = *(_DWORD *)(a29 + 32);
  v197 = off_24C335B18;
  v200 = *(_QWORD *)(a29 + 36);
  v68 = *(_DWORD *)(a29 + 44);
  v199 = v67;
  v201 = v68;
  if (*(char *)(a30 + 31) < 0)
    std::string::__init_copy_ctor_external(&v194, *(const std::string::value_type **)(a30 + 8), *(_QWORD *)(a30 + 16));
  else
    v194 = *(std::string *)(a30 + 8);
  v103 = *(_DWORD *)(a30 + 32);
  v195 = v103;
  v193 = off_24C335AF8;
  v69 = *(_QWORD *)(a30 + 36);
  v196 = v69;
  v188 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a31 + 31) < 0)
    std::string::__init_copy_ctor_external(&v189, *(const std::string::value_type **)(a31 + 8), *(_QWORD *)(a31 + 16));
  else
    v189 = *(std::string *)(a31 + 8);
  v190 = *(_DWORD *)(a31 + 32);
  v188 = &off_24C335AB8;
  v191 = *(_BYTE *)(a31 + 36);
  v102 = v69;
  if (*(char *)(a31 + 63) < 0)
    std::string::__init_copy_ctor_external(&v192, *(const std::string::value_type **)(a31 + 40), *(_QWORD *)(a31 + 48));
  else
    v192 = *(std::string *)(a31 + 40);
  if (*(char *)(a32 + 31) < 0)
    std::string::__init_copy_ctor_external(&v185, *(const std::string::value_type **)(a32 + 8), *(_QWORD *)(a32 + 16));
  else
    v185 = *(std::string *)(a32 + 8);
  v101 = *(_DWORD *)(a32 + 32);
  v186 = v101;
  v184 = off_24C335AF8;
  v100 = *(_QWORD *)(a32 + 36);
  v187 = v100;
  if (*(char *)(a33 + 31) < 0)
    std::string::__init_copy_ctor_external(&v180, *(const std::string::value_type **)(a33 + 8), *(_QWORD *)(a33 + 16));
  else
    v180 = *(std::string *)(a33 + 8);
  v70 = *(_DWORD *)(a33 + 32);
  v179 = off_24C335B18;
  v182 = *(_QWORD *)(a33 + 36);
  v71 = *(_DWORD *)(a33 + 44);
  v99 = v70;
  v181 = v70;
  v183 = v71;
  if (*(char *)(a34 + 31) < 0)
    std::string::__init_copy_ctor_external(&v176, *(const std::string::value_type **)(a34 + 8), *(_QWORD *)(a34 + 16));
  else
    v176 = *(std::string *)(a34 + 8);
  v98 = *(_DWORD *)(a34 + 32);
  v177 = v98;
  v175 = off_24C335AF8;
  v97 = *(_QWORD *)(a34 + 36);
  v178 = v97;
  if (*(char *)(a35 + 31) < 0)
    std::string::__init_copy_ctor_external(&v172, *(const std::string::value_type **)(a35 + 8), *(_QWORD *)(a35 + 16));
  else
    v172 = *(std::string *)(a35 + 8);
  v96 = *(_DWORD *)(a35 + 32);
  v173 = v96;
  v171 = off_24C335AF8;
  v95 = *(_QWORD *)(a35 + 36);
  v174 = v95;
  if (*(char *)(a36 + 31) < 0)
    std::string::__init_copy_ctor_external(&v168, *(const std::string::value_type **)(a36 + 8), *(_QWORD *)(a36 + 16));
  else
    v168 = *(std::string *)(a36 + 8);
  v94 = *(_DWORD *)(a36 + 32);
  v169 = v94;
  v167 = off_24C335AF8;
  v93 = *(_QWORD *)(a36 + 36);
  v170 = v93;
  v162 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a37 + 31) < 0)
    std::string::__init_copy_ctor_external(&v163, *(const std::string::value_type **)(a37 + 8), *(_QWORD *)(a37 + 16));
  else
    v163 = *(std::string *)(a37 + 8);
  v164 = *(_DWORD *)(a37 + 32);
  v162 = &off_24C335AB8;
  v165 = *(_BYTE *)(a37 + 36);
  if (*(char *)(a37 + 63) < 0)
    std::string::__init_copy_ctor_external(&v166, *(const std::string::value_type **)(a37 + 40), *(_QWORD *)(a37 + 48));
  else
    v166 = *(std::string *)(a37 + 40);
  v157 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a38 + 31) < 0)
    std::string::__init_copy_ctor_external(&v158, *(const std::string::value_type **)(a38 + 8), *(_QWORD *)(a38 + 16));
  else
    v158 = *(std::string *)(a38 + 8);
  v159 = *(_DWORD *)(a38 + 32);
  v157 = &off_24C335AB8;
  v160 = *(_BYTE *)(a38 + 36);
  if (*(char *)(a38 + 63) < 0)
    std::string::__init_copy_ctor_external(&v161, *(const std::string::value_type **)(a38 + 40), *(_QWORD *)(a38 + 48));
  else
    v161 = *(std::string *)(a38 + 40);
  v152 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a39 + 31) < 0)
    std::string::__init_copy_ctor_external(&v153, *(const std::string::value_type **)(a39 + 8), *(_QWORD *)(a39 + 16));
  else
    v153 = *(std::string *)(a39 + 8);
  v72 = *(_DWORD *)(a39 + 32);
  v152 = off_24C335B18;
  v155 = *(_QWORD *)(a39 + 36);
  v73 = *(_DWORD *)(a39 + 44);
  v92 = v72;
  v154 = v72;
  v156 = v73;
  v148 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a40 + 31) < 0)
    std::string::__init_copy_ctor_external(&v149, *(const std::string::value_type **)(a40 + 8), *(_QWORD *)(a40 + 16));
  else
    v149 = *(std::string *)(a40 + 8);
  v91 = *(_DWORD *)(a40 + 32);
  v150 = v91;
  v148 = off_24C335AF8;
  v90 = *(_QWORD *)(a40 + 36);
  v151 = v90;
  if (*(char *)(a41 + 31) < 0)
    std::string::__init_copy_ctor_external(&v145, *(const std::string::value_type **)(a41 + 8), *(_QWORD *)(a41 + 16));
  else
    v145 = *(std::string *)(a41 + 8);
  v89 = *(_DWORD *)(a41 + 32);
  v146 = v89;
  v88 = *(_QWORD *)(a41 + 36);
  v147 = v88;
  v486 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v487, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
  else
    v487 = __s;
  v488 = v142;
  v486 = off_24C335AF8;
  v489 = v140;
  v482 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v308.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v483, v308.__r_.__value_.__l.__data_, v308.__r_.__value_.__l.__size_);
  else
    v483 = v308;
  v484 = v137;
  v482 = off_24C335AF8;
  v485 = v135;
  v477 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v303.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v478, v303.__r_.__value_.__l.__data_, v303.__r_.__value_.__l.__size_);
  else
    v478 = v303;
  v477 = off_24C335B18;
  v480 = v305;
  v479 = v132;
  v481 = v306;
  v472 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v298.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v473, v298.__r_.__value_.__l.__data_, v298.__r_.__value_.__l.__size_);
  else
    v473 = v298;
  v474 = v299;
  v472 = &off_24C335AB8;
  v475 = v300;
  if (SHIBYTE(v301.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v476, v301.__r_.__value_.__l.__data_, v301.__r_.__value_.__l.__size_);
  else
    v476 = v301;
  v467 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v293.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v468, v293.__r_.__value_.__l.__data_, v293.__r_.__value_.__l.__size_);
  else
    v468 = v293;
  v469 = v294;
  v467 = &off_24C335AB8;
  v470 = v295;
  if (SHIBYTE(v296.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v471, v296.__r_.__value_.__l.__data_, v296.__r_.__value_.__l.__size_);
  else
    v471 = v296;
  v462 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v288.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v463, v288.__r_.__value_.__l.__data_, v288.__r_.__value_.__l.__size_);
  else
    v463 = v288;
  v462 = off_24C335B18;
  v465 = v290;
  v464 = v127;
  v466 = v291;
  v457 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v283.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v458, v283.__r_.__value_.__l.__data_, v283.__r_.__value_.__l.__size_);
  else
    v458 = v283;
  v457 = off_24C335B18;
  v460 = v285;
  v459 = v126;
  v461 = v286;
  v453 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v279.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v454, v279.__r_.__value_.__l.__data_, v279.__r_.__value_.__l.__size_);
  else
    v454 = v279;
  v455 = v125;
  v453 = off_24C335AF8;
  v456 = v124;
  v449 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v275.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v450, v275.__r_.__value_.__l.__data_, v275.__r_.__value_.__l.__size_);
  else
    v450 = v275;
  v451 = v123;
  v449 = off_24C335AF8;
  v452 = v122;
  v445 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v271.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v446, v271.__r_.__value_.__l.__data_, v271.__r_.__value_.__l.__size_);
  else
    v446 = v271;
  v447 = v121;
  v445 = off_24C335AF8;
  v448 = v120;
  v441 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v267.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v442, v267.__r_.__value_.__l.__data_, v267.__r_.__value_.__l.__size_);
  else
    v442 = v267;
  v443 = v119;
  v441 = off_24C335AF8;
  v444 = v118;
  v437 = (uint64_t (**)())off_24C335D90;
  v74 = SHIBYTE(v263.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v263.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v438, v263.__r_.__value_.__l.__data_, v263.__r_.__value_.__l.__size_);
  else
    v438 = v263;
  v439 = v117;
  v437 = off_24C335AF8;
  v440 = v116;
  v433 = (uint64_t (**)())off_24C335D90;
  v141 = SHIBYTE(v259.__r_.__value_.__r.__words[2]);
  v143 = v74;
  v75 = v67;
  if (SHIBYTE(v259.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v434, v259.__r_.__value_.__l.__data_, v259.__r_.__value_.__l.__size_);
  else
    v434 = v259;
  v435 = v115;
  v433 = off_24C335AF8;
  v436 = v114;
  v429 = (uint64_t (**)())off_24C335D90;
  v76 = SHIBYTE(v255.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v255.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v430, v255.__r_.__value_.__l.__data_, v255.__r_.__value_.__l.__size_);
  else
    v430 = v255;
  v431 = v113;
  v429 = off_24C335AF8;
  v432 = v112;
  v424 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v250.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v425, v250.__r_.__value_.__l.__data_, v250.__r_.__value_.__l.__size_);
  else
    v425 = v250;
  v426 = v251;
  v424 = &off_24C335AB8;
  v427 = v252;
  if (SHIBYTE(v253.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v428, v253.__r_.__value_.__l.__data_, v253.__r_.__value_.__l.__size_);
  else
    v428 = v253;
  v419 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v245.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v420, v245.__r_.__value_.__l.__data_, v245.__r_.__value_.__l.__size_);
  else
    v420 = v245;
  v421 = v246;
  v419 = &off_24C335AB8;
  v422 = v247;
  if (SHIBYTE(v248.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v423, v248.__r_.__value_.__l.__data_, v248.__r_.__value_.__l.__size_);
  else
    v423 = v248;
  v414 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v240.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v415, v240.__r_.__value_.__l.__data_, v240.__r_.__value_.__l.__size_);
  else
    v415 = v240;
  v416 = v241;
  v414 = &off_24C335AB8;
  v417 = v242;
  if (SHIBYTE(v243.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v418, v243.__r_.__value_.__l.__data_, v243.__r_.__value_.__l.__size_);
  else
    v418 = v243;
  v410 = (uint64_t (**)())off_24C335D90;
  v77 = SHIBYTE(v236.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v236.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v411, v236.__r_.__value_.__l.__data_, v236.__r_.__value_.__l.__size_);
  else
    v411 = v236;
  v412 = v62;
  v410 = off_24C335AF8;
  v413 = v110;
  v405 = (uint64_t (**)())off_24C335D90;
  v139 = SHIBYTE(v231.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v231.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v406, v231.__r_.__value_.__l.__data_, v231.__r_.__value_.__l.__size_);
  else
    v406 = v231;
  v405 = off_24C335B18;
  v408 = v233;
  v407 = v111;
  v409 = v234;
  v401 = (uint64_t (**)())off_24C335D90;
  v78 = SHIBYTE(v227.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v227.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v402, v227.__r_.__value_.__l.__data_, v227.__r_.__value_.__l.__size_);
  else
    v402 = v227;
  v403 = v109;
  v401 = off_24C335AF8;
  v404 = v108;
  v396 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v222.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v397, v222.__r_.__value_.__l.__data_, v222.__r_.__value_.__l.__size_);
  else
    v397 = v222;
  v398 = v223;
  v396 = &off_24C335AB8;
  v399 = v224;
  if (SHIBYTE(v225.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v400, v225.__r_.__value_.__l.__data_, v225.__r_.__value_.__l.__size_);
  else
    v400 = v225;
  v391 = (uint64_t (**)())off_24C335D90;
  v138 = SHIBYTE(v217.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v217.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v392, v217.__r_.__value_.__l.__data_, v217.__r_.__value_.__l.__size_);
  else
    v392 = v217;
  v391 = off_24C335B18;
  v394 = v219;
  v393 = v107;
  v395 = v220;
  v386 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v212.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v387, v212.__r_.__value_.__l.__data_, v212.__r_.__value_.__l.__size_);
  else
    v387 = v212;
  v388 = v213;
  v386 = &off_24C335AB8;
  v389 = v214;
  if (SHIBYTE(v215.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v390, v215.__r_.__value_.__l.__data_, v215.__r_.__value_.__l.__size_);
  else
    v390 = v215;
  v381 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v207.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v382, v207.__r_.__value_.__l.__data_, v207.__r_.__value_.__l.__size_);
  else
    v382 = v207;
  v383 = v208;
  v381 = &off_24C335AB8;
  v384 = v209;
  if (SHIBYTE(v210.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v385, v210.__r_.__value_.__l.__data_, v210.__r_.__value_.__l.__size_);
  else
    v385 = v210;
  v377 = (uint64_t (**)())off_24C335D90;
  v79 = SHIBYTE(v203.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v203.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v378, v203.__r_.__value_.__l.__data_, v203.__r_.__value_.__l.__size_);
  else
    v378 = v203;
  v379 = v105;
  v377 = off_24C335AF8;
  v380 = v104;
  v372 = (uint64_t (**)())off_24C335D90;
  v136 = SHIBYTE(v198.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v198.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v373, v198.__r_.__value_.__l.__data_, v198.__r_.__value_.__l.__size_);
  else
    v373 = v198;
  v372 = off_24C335B18;
  v375 = v200;
  v374 = v75;
  v376 = v201;
  v368 = (uint64_t (**)())off_24C335D90;
  v134 = SHIBYTE(v194.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v194.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v369, v194.__r_.__value_.__l.__data_, v194.__r_.__value_.__l.__size_);
  else
    v369 = v194;
  v370 = v103;
  v368 = off_24C335AF8;
  v371 = v102;
  v363 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v189.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v364, v189.__r_.__value_.__l.__data_, v189.__r_.__value_.__l.__size_);
  else
    v364 = v189;
  v365 = v190;
  v363 = &off_24C335AB8;
  v366 = v191;
  if (SHIBYTE(v192.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v367, v192.__r_.__value_.__l.__data_, v192.__r_.__value_.__l.__size_);
  else
    v367 = v192;
  v359 = (uint64_t (**)())off_24C335D90;
  v133 = SHIBYTE(v185.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v185.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v360, v185.__r_.__value_.__l.__data_, v185.__r_.__value_.__l.__size_);
  else
    v360 = v185;
  v361 = v101;
  v359 = off_24C335AF8;
  v362 = v100;
  v354 = (uint64_t (**)())off_24C335D90;
  v131 = SHIBYTE(v180.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v180.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v355, v180.__r_.__value_.__l.__data_, v180.__r_.__value_.__l.__size_);
  else
    v355 = v180;
  v354 = off_24C335B18;
  v357 = v182;
  v356 = v99;
  v358 = v183;
  v350 = (uint64_t (**)())off_24C335D90;
  v130 = SHIBYTE(v176.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v176.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v351, v176.__r_.__value_.__l.__data_, v176.__r_.__value_.__l.__size_);
  else
    v351 = v176;
  v352 = v98;
  v350 = off_24C335AF8;
  v353 = v97;
  v346 = (uint64_t (**)())off_24C335D90;
  v129 = SHIBYTE(v172.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v172.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v347, v172.__r_.__value_.__l.__data_, v172.__r_.__value_.__l.__size_);
  else
    v347 = v172;
  v348 = v96;
  v346 = off_24C335AF8;
  v349 = v95;
  v342 = (uint64_t (**)())off_24C335D90;
  v128 = SHIBYTE(v168.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v168.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v343, v168.__r_.__value_.__l.__data_, v168.__r_.__value_.__l.__size_);
  else
    v343 = v168;
  v344 = v94;
  v342 = off_24C335AF8;
  v345 = v93;
  v337 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v163.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v338, v163.__r_.__value_.__l.__data_, v163.__r_.__value_.__l.__size_);
  else
    v338 = v163;
  v339 = v164;
  v337 = &off_24C335AB8;
  v340 = v165;
  if (SHIBYTE(v166.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v341, v166.__r_.__value_.__l.__data_, v166.__r_.__value_.__l.__size_);
  else
    v341 = v166;
  v332 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v158.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v333, v158.__r_.__value_.__l.__data_, v158.__r_.__value_.__l.__size_);
  else
    v333 = v158;
  v334 = v159;
  v332 = &off_24C335AB8;
  v335 = v160;
  if (SHIBYTE(v161.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v336, v161.__r_.__value_.__l.__data_, v161.__r_.__value_.__l.__size_);
  else
    v336 = v161;
  v327 = (uint64_t (**)())off_24C335D90;
  v80 = SHIBYTE(v153.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v153.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v328, v153.__r_.__value_.__l.__data_, v153.__r_.__value_.__l.__size_);
  else
    v328 = v153;
  v327 = off_24C335B18;
  v330 = v155;
  v329 = v92;
  v331 = v156;
  v323 = (uint64_t (**)())off_24C335D90;
  v81 = SHIBYTE(v149.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v149.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v324, v149.__r_.__value_.__l.__data_, v149.__r_.__value_.__l.__size_);
  else
    v324 = v149;
  v325 = v91;
  v323 = off_24C335AF8;
  v326 = v90;
  v319 = (uint64_t (**)())off_24C335D90;
  v82 = SHIBYTE(v145.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v145.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&__p, v145.__r_.__value_.__l.__data_, v145.__r_.__value_.__l.__size_);
  else
    __p = v145;
  v321 = v89;
  v319 = off_24C335AF8;
  v322 = v88;
  mediaplatform::DatabaseColumnTuple<49ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::DatabaseColumnTuple(v144, (uint64_t)&v486, (uint64_t)&v482, (uint64_t)&v477, (uint64_t)&v472, (uint64_t)&v467, (uint64_t)&v462, (uint64_t)&v457, (uint64_t)&v453, (uint64_t)&v449, (uint64_t)&v445, (uint64_t)&v441, (uint64_t)&v437, (uint64_t)&v433, (uint64_t)&v429, (uint64_t)&v424, (uint64_t)&v419, (uint64_t)&v414, (uint64_t)&v410,
    (uint64_t)&v405,
    (uint64_t)&v401,
    (uint64_t)&v396,
    (uint64_t)&v391,
    (uint64_t)&v386,
    (uint64_t)&v381,
    (uint64_t)&v377,
    (uint64_t)&v372,
    (uint64_t)&v368,
    (uint64_t)&v363,
    (uint64_t)&v359,
    (uint64_t)&v354,
    (uint64_t)&v350,
    (uint64_t)&v346,
    (uint64_t)&v342,
    (uint64_t)&v337,
    (uint64_t)&v332,
    (uint64_t)&v327,
    (uint64_t)&v323,
    (uint64_t)&v319);
  v319 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v323 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v324.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v324.__r_.__value_.__l.__data_);
  v327 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v328.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v328.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v332);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v337);
  v342 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v343.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v343.__r_.__value_.__l.__data_);
  v346 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v347.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v347.__r_.__value_.__l.__data_);
  v350 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v351.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v351.__r_.__value_.__l.__data_);
  v354 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v355.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v355.__r_.__value_.__l.__data_);
  v359 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v360.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v360.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v363);
  v368 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v369.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v369.__r_.__value_.__l.__data_);
  v372 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v373.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v373.__r_.__value_.__l.__data_);
  v377 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v378.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v378.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v381);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v386);
  v391 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v392.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v392.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v396);
  v401 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v402.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v402.__r_.__value_.__l.__data_);
  v405 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v406.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v406.__r_.__value_.__l.__data_);
  v410 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v411.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v411.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v414);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v419);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v424);
  v429 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v430.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v430.__r_.__value_.__l.__data_);
  v433 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v434.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v434.__r_.__value_.__l.__data_);
  v437 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v438.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v438.__r_.__value_.__l.__data_);
  v441 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v442.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v442.__r_.__value_.__l.__data_);
  v445 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v446.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v446.__r_.__value_.__l.__data_);
  v449 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v450.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v450.__r_.__value_.__l.__data_);
  v453 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v454.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v454.__r_.__value_.__l.__data_);
  v457 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v458.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v458.__r_.__value_.__l.__data_);
  v462 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v463.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v463.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v467);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v472);
  v477 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v478.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v478.__r_.__value_.__l.__data_);
  v482 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v483.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v483.__r_.__value_.__l.__data_);
  v486 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v487.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v487.__r_.__value_.__l.__data_);
  *(_QWORD *)(v144 + 2000) = off_24C335D90;
  v83 = (std::string *)(v144 + 2008);
  v84 = SHIBYTE(v316.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v316.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v83, v316.__r_.__value_.__l.__data_, v316.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v83->__r_.__value_.__l.__data_ = *(_OWORD *)&v316.__r_.__value_.__l.__data_;
    *(_QWORD *)(v144 + 2024) = *((_QWORD *)&v316.__r_.__value_.__l + 2);
  }
  *(_DWORD *)(v144 + 2032) = v317;
  *(_QWORD *)(v144 + 2000) = off_24C335AF8;
  *(_QWORD *)(v144 + 2036) = v318;
  if (v82 < 0)
    operator delete(v145.__r_.__value_.__l.__data_);
  v148 = (uint64_t (**)())off_24C335D90;
  if (v81 < 0)
    operator delete(v149.__r_.__value_.__l.__data_);
  v152 = (uint64_t (**)())off_24C335D90;
  if (v80 < 0)
    operator delete(v153.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v157);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v162);
  v167 = (uint64_t (**)())off_24C335D90;
  if (v128 < 0)
    operator delete(v168.__r_.__value_.__l.__data_);
  v171 = (uint64_t (**)())off_24C335D90;
  if (v129 < 0)
    operator delete(v172.__r_.__value_.__l.__data_);
  if (v130 < 0)
    operator delete(v176.__r_.__value_.__l.__data_);
  if (v131 < 0)
    operator delete(v180.__r_.__value_.__l.__data_);
  if (v133 < 0)
    operator delete(v185.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v188);
  if (v134 < 0)
    operator delete(v194.__r_.__value_.__l.__data_);
  if (v136 < 0)
  {
    operator delete(v198.__r_.__value_.__l.__data_);
    if ((v79 & 0x80000000) == 0)
      goto LABEL_375;
  }
  else if ((v79 & 0x80000000) == 0)
  {
    goto LABEL_375;
  }
  operator delete(v203.__r_.__value_.__l.__data_);
LABEL_375:
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v206);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v211);
  if (v138 < 0)
    operator delete(v217.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v221);
  if (v78 < 0)
    operator delete(v227.__r_.__value_.__l.__data_);
  if (v139 < 0)
  {
    operator delete(v231.__r_.__value_.__l.__data_);
    if ((v77 & 0x80000000) == 0)
      goto LABEL_381;
  }
  else if ((v77 & 0x80000000) == 0)
  {
    goto LABEL_381;
  }
  operator delete(v236.__r_.__value_.__l.__data_);
LABEL_381:
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v239);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v244);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v249);
  if (v76 < 0)
    operator delete(v255.__r_.__value_.__l.__data_);
  if (v141 < 0)
  {
    operator delete(v259.__r_.__value_.__l.__data_);
    if ((v143 & 0x80000000) == 0)
      goto LABEL_385;
  }
  else if ((v143 & 0x80000000) == 0)
  {
    goto LABEL_385;
  }
  operator delete(v263.__r_.__value_.__l.__data_);
LABEL_385:
  if (SHIBYTE(v267.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v267.__r_.__value_.__l.__data_);
  if (SHIBYTE(v271.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v271.__r_.__value_.__l.__data_);
  if (SHIBYTE(v275.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v275.__r_.__value_.__l.__data_);
  if (SHIBYTE(v279.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v279.__r_.__value_.__l.__data_);
  if (SHIBYTE(v283.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v283.__r_.__value_.__l.__data_);
  if (SHIBYTE(v288.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v288.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v292);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v297);
  if (SHIBYTE(v303.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v303.__r_.__value_.__l.__data_);
  if (SHIBYTE(v308.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v308.__r_.__value_.__l.__data_);
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__s.__r_.__value_.__l.__data_);
    if ((v84 & 0x80000000) == 0)
      goto LABEL_403;
  }
  else if ((v84 & 0x80000000) == 0)
  {
    goto LABEL_403;
  }
  operator delete(v316.__r_.__value_.__l.__data_);
LABEL_403:
  *(_QWORD *)(v144 + 2048) = off_24C335D90;
  v85 = (std::string *)(v144 + 2056);
  if (*(char *)(v106 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v85, *(const std::string::value_type **)(v106 + 8), *(_QWORD *)(v106 + 16));
  }
  else
  {
    v86 = *(_OWORD *)(v106 + 8);
    *(_QWORD *)(v144 + 2072) = *(_QWORD *)(v106 + 24);
    *(_OWORD *)&v85->__r_.__value_.__l.__data_ = v86;
  }
  result = v144;
  *(_DWORD *)(v144 + 2080) = *(_DWORD *)(v106 + 32);
  *(_QWORD *)(v144 + 2048) = off_24C335AF8;
  *(_QWORD *)(v144 + 2084) = *(_QWORD *)(v106 + 36);
  return result;
}

void sub_20A7E0710(_Unwind_Exception *a1)
{
  mediaplatform::DatabaseColumnTuple<48ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(STACK[0x3D0]);
  _Unwind_Resume(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<48ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(uint64_t a1)
{
  *(_QWORD *)(a1 + 2000) = off_24C335D90;
  if (*(char *)(a1 + 2031) < 0)
    operator delete(*(void **)(a1 + 2008));
  *(_QWORD *)(a1 + 1952) = off_24C335D90;
  if (*(char *)(a1 + 1983) < 0)
    operator delete(*(void **)(a1 + 1960));
  *(_QWORD *)(a1 + 1904) = off_24C335D90;
  if (*(char *)(a1 + 1935) < 0)
    operator delete(*(void **)(a1 + 1912));
  *(_QWORD *)(a1 + 1856) = off_24C335D90;
  if (*(char *)(a1 + 1887) < 0)
    operator delete(*(void **)(a1 + 1864));
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 1792);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn(a1 + 1728);
  return mediaplatform::DatabaseColumnTuple<54ul,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::~DatabaseColumnTuple(a1);
}

uint64_t mediaplatform::DatabaseColumnTuple<49ul,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::DatabaseColumnTuple(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39)
{
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  int v56;
  int v57;
  int v58;
  int v59;
  int v60;
  int v61;
  int v62;
  int v63;
  int v64;
  int v65;
  int v66;
  int v67;
  uint64_t v68;
  int v69;
  int v70;
  int v71;
  int v72;
  uint64_t v73;
  int v74;
  int v75;
  int v76;
  int v77;
  int v78;
  int v79;
  int v80;
  int v81;
  std::string *v82;
  int v83;
  std::string *v84;
  __int128 v85;
  uint64_t v87;
  int v88;
  uint64_t v89;
  int v90;
  int v91;
  uint64_t v92;
  int v93;
  uint64_t v94;
  int v95;
  uint64_t v96;
  int v97;
  int v98;
  uint64_t v99;
  int v100;
  uint64_t v101;
  int v102;
  uint64_t v103;
  int v104;
  uint64_t v105;
  int v106;
  uint64_t v107;
  int v108;
  int v109;
  uint64_t v110;
  int v111;
  uint64_t v112;
  uint64_t v113;
  int v114;
  uint64_t v115;
  int v116;
  uint64_t v117;
  int v118;
  uint64_t v119;
  int v120;
  uint64_t v121;
  int v122;
  int v123;
  uint64_t v124;
  int v125;
  int v126;
  int v127;
  int v128;
  uint64_t v129;
  int v130;
  int v131;
  int v132;
  int v133;
  int v134;
  int v135;
  int v136;
  int v137;
  int v138;
  int v139;
  int v140;
  int v141;
  std::string v142;
  int v143;
  uint64_t v144;
  uint64_t (**v145)();
  std::string v146;
  int v147;
  uint64_t v148;
  uint64_t (**v149)();
  std::string v150;
  int v151;
  uint64_t v152;
  int v153;
  uint64_t (**v154)();
  std::string v155;
  int v156;
  char v157;
  std::string v158;
  uint64_t (**v159)();
  std::string v160;
  int v161;
  char v162;
  std::string v163;
  uint64_t (**v164)();
  std::string v165;
  int v166;
  uint64_t v167;
  uint64_t (**v168)();
  std::string v169;
  int v170;
  uint64_t v171;
  uint64_t (**v172)();
  std::string v173;
  int v174;
  uint64_t v175;
  uint64_t (**v176)();
  std::string v177;
  int v178;
  uint64_t v179;
  int v180;
  uint64_t (**v181)();
  std::string v182;
  int v183;
  uint64_t v184;
  uint64_t (**v185)();
  std::string v186;
  int v187;
  char v188;
  std::string v189;
  uint64_t (**v190)();
  std::string v191;
  int v192;
  uint64_t v193;
  uint64_t (**v194)();
  std::string v195;
  int v196;
  uint64_t v197;
  int v198;
  uint64_t (**v199)();
  std::string v200;
  int v201;
  uint64_t v202;
  uint64_t (**v203)();
  std::string v204;
  int v205;
  char v206;
  std::string v207;
  uint64_t (**v208)();
  std::string v209;
  int v210;
  char v211;
  std::string v212;
  uint64_t (**v213)();
  std::string v214;
  int v215;
  uint64_t v216;
  int v217;
  uint64_t (**v218)();
  std::string v219;
  int v220;
  char v221;
  std::string v222;
  uint64_t (**v223)();
  std::string v224;
  int v225;
  uint64_t v226;
  uint64_t (**v227)();
  std::string v228;
  int v229;
  uint64_t v230;
  int v231;
  uint64_t (**v232)();
  std::string v233;
  int v234;
  uint64_t v235;
  uint64_t (**v236)();
  std::string v237;
  int v238;
  char v239;
  std::string v240;
  uint64_t (**v241)();
  std::string v242;
  int v243;
  char v244;
  std::string v245;
  uint64_t (**v246)();
  std::string v247;
  int v248;
  char v249;
  std::string v250;
  uint64_t (**v251)();
  std::string v252;
  int v253;
  uint64_t v254;
  uint64_t (**v255)();
  std::string v256;
  int v257;
  uint64_t v258;
  uint64_t (**v259)();
  std::string v260;
  int v261;
  uint64_t v262;
  uint64_t (**v263)();
  std::string v264;
  int v265;
  uint64_t v266;
  uint64_t (**v267)();
  std::string v268;
  int v269;
  uint64_t v270;
  uint64_t (**v271)();
  std::string v272;
  int v273;
  uint64_t v274;
  uint64_t (**v275)();
  std::string v276;
  int v277;
  uint64_t v278;
  uint64_t (**v279)();
  std::string v280;
  int v281;
  uint64_t v282;
  int v283;
  uint64_t (**v284)();
  std::string v285;
  int v286;
  uint64_t v287;
  int v288;
  uint64_t (**v289)();
  std::string v290;
  int v291;
  char v292;
  std::string v293;
  uint64_t (**v294)();
  std::string v295;
  int v296;
  char v297;
  std::string v298;
  uint64_t (**v299)();
  std::string __s;
  int v301;
  uint64_t v302;
  int v303;
  uint64_t (**v304)();
  std::string v305;
  int v306;
  uint64_t v307;
  uint64_t (**v308)();
  std::string __p;
  int v310;
  uint64_t v311;
  uint64_t (**v312)();
  std::string v313;
  int v314;
  uint64_t v315;
  uint64_t (**v316)();
  std::string v317;
  int v318;
  uint64_t v319;
  int v320;
  uint64_t (**v321)();
  std::string v322;
  int v323;
  char v324;
  std::string v325;
  uint64_t (**v326)();
  std::string v327;
  int v328;
  char v329;
  std::string v330;
  uint64_t (**v331)();
  std::string v332;
  int v333;
  uint64_t v334;
  uint64_t (**v335)();
  std::string v336;
  int v337;
  uint64_t v338;
  uint64_t (**v339)();
  std::string v340;
  int v341;
  uint64_t v342;
  uint64_t (**v343)();
  std::string v344;
  int v345;
  uint64_t v346;
  int v347;
  uint64_t (**v348)();
  std::string v349;
  int v350;
  uint64_t v351;
  uint64_t (**v352)();
  std::string v353;
  int v354;
  char v355;
  std::string v356;
  uint64_t (**v357)();
  std::string v358;
  int v359;
  uint64_t v360;
  uint64_t (**v361)();
  std::string v362;
  int v363;
  uint64_t v364;
  int v365;
  uint64_t (**v366)();
  std::string v367;
  int v368;
  uint64_t v369;
  uint64_t (**v370)();
  std::string v371;
  int v372;
  char v373;
  std::string v374;
  uint64_t (**v375)();
  std::string v376;
  int v377;
  char v378;
  std::string v379;
  uint64_t (**v380)();
  std::string v381;
  int v382;
  uint64_t v383;
  int v384;
  uint64_t (**v385)();
  std::string v386;
  int v387;
  char v388;
  std::string v389;
  uint64_t (**v390)();
  std::string v391;
  int v392;
  uint64_t v393;
  uint64_t (**v394)();
  std::string v395;
  int v396;
  uint64_t v397;
  int v398;
  uint64_t (**v399)();
  std::string v400;
  int v401;
  uint64_t v402;
  uint64_t (**v403)();
  std::string v404;
  int v405;
  char v406;
  std::string v407;
  uint64_t (**v408)();
  std::string v409;
  int v410;
  char v411;
  std::string v412;
  uint64_t (**v413)();
  std::string v414;
  int v415;
  char v416;
  std::string v417;
  uint64_t (**v418)();
  std::string v419;
  int v420;
  uint64_t v421;
  uint64_t (**v422)();
  std::string v423;
  int v424;
  uint64_t v425;
  uint64_t (**v426)();
  std::string v427;
  int v428;
  uint64_t v429;
  uint64_t (**v430)();
  std::string v431;
  int v432;
  uint64_t v433;
  uint64_t (**v434)();
  std::string v435;
  int v436;
  uint64_t v437;
  uint64_t (**v438)();
  std::string v439;
  int v440;
  uint64_t v441;
  uint64_t (**v442)();
  std::string v443;
  int v444;
  uint64_t v445;
  uint64_t (**v446)();
  std::string v447;
  int v448;
  uint64_t v449;
  int v450;
  uint64_t (**v451)();
  std::string v452;
  int v453;
  uint64_t v454;
  int v455;
  uint64_t (**v456)();
  std::string v457;
  int v458;
  char v459;
  std::string v460;
  uint64_t (**v461)();
  std::string v462;
  int v463;
  char v464;
  std::string v465;
  uint64_t (**v466)();
  std::string v467;
  int v468;
  uint64_t v469;
  int v470;

  v39 = MEMORY[0x24BDAC7A8](a1);
  v42 = v41;
  v44 = v43;
  v46 = v45;
  v48 = v47;
  v50 = v49;
  v51 = v40;
  v53 = v52;
  v54 = v39;
  if (*(char *)(v40 + 31) < 0)
    std::string::__init_copy_ctor_external(&v305, *(const std::string::value_type **)(v40 + 8), *(_QWORD *)(v40 + 16));
  else
    v305 = *(std::string *)(v40 + 8);
  v306 = *(_DWORD *)(v51 + 32);
  v304 = off_24C335AF8;
  v307 = *(_QWORD *)(v51 + 36);
  if (*(char *)(v50 + 31) < 0)
    std::string::__init_copy_ctor_external(&__s, *(const std::string::value_type **)(v50 + 8), *(_QWORD *)(v50 + 16));
  else
    __s = *(std::string *)(v50 + 8);
  v55 = *(_DWORD *)(v50 + 32);
  v299 = off_24C335B18;
  v302 = *(_QWORD *)(v50 + 36);
  v56 = *(_DWORD *)(v50 + 44);
  v140 = v55;
  v301 = v55;
  v303 = v56;
  v294 = (uint64_t (**)())off_24C335D90;
  v112 = v54;
  if (*(char *)(v48 + 31) < 0)
    std::string::__init_copy_ctor_external(&v295, *(const std::string::value_type **)(v48 + 8), *(_QWORD *)(v48 + 16));
  else
    v295 = *(std::string *)(v48 + 8);
  v296 = *(_DWORD *)(v48 + 32);
  v294 = &off_24C335AB8;
  v297 = *(_BYTE *)(v48 + 36);
  if (*(char *)(v48 + 63) < 0)
    std::string::__init_copy_ctor_external(&v298, *(const std::string::value_type **)(v48 + 40), *(_QWORD *)(v48 + 48));
  else
    v298 = *(std::string *)(v48 + 40);
  v289 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(v46 + 31) < 0)
    std::string::__init_copy_ctor_external(&v290, *(const std::string::value_type **)(v46 + 8), *(_QWORD *)(v46 + 16));
  else
    v290 = *(std::string *)(v46 + 8);
  v291 = *(_DWORD *)(v46 + 32);
  v289 = &off_24C335AB8;
  v292 = *(_BYTE *)(v46 + 36);
  if (*(char *)(v46 + 63) < 0)
    std::string::__init_copy_ctor_external(&v293, *(const std::string::value_type **)(v46 + 40), *(_QWORD *)(v46 + 48));
  else
    v293 = *(std::string *)(v46 + 40);
  v105 = v53;
  if (*(char *)(v44 + 31) < 0)
    std::string::__init_copy_ctor_external(&v285, *(const std::string::value_type **)(v44 + 8), *(_QWORD *)(v44 + 16));
  else
    v285 = *(std::string *)(v44 + 8);
  v57 = *(_DWORD *)(v44 + 32);
  v284 = off_24C335B18;
  v287 = *(_QWORD *)(v44 + 36);
  v58 = *(_DWORD *)(v44 + 44);
  v136 = v57;
  v286 = v57;
  v288 = v58;
  if (*(char *)(v42 + 31) < 0)
    std::string::__init_copy_ctor_external(&v280, *(const std::string::value_type **)(v42 + 8), *(_QWORD *)(v42 + 16));
  else
    v280 = *(std::string *)(v42 + 8);
  v59 = *(_DWORD *)(v42 + 32);
  v279 = off_24C335B18;
  v282 = *(_QWORD *)(v42 + 36);
  v60 = *(_DWORD *)(v42 + 44);
  v134 = v59;
  v281 = v59;
  v283 = v60;
  if (*(char *)(a9 + 31) < 0)
    std::string::__init_copy_ctor_external(&v276, *(const std::string::value_type **)(a9 + 8), *(_QWORD *)(a9 + 16));
  else
    v276 = *(std::string *)(a9 + 8);
  v131 = *(_DWORD *)(a9 + 32);
  v277 = v131;
  v275 = off_24C335AF8;
  v129 = *(_QWORD *)(a9 + 36);
  v278 = v129;
  if (*(char *)(a10 + 31) < 0)
    std::string::__init_copy_ctor_external(&v272, *(const std::string::value_type **)(a10 + 8), *(_QWORD *)(a10 + 16));
  else
    v272 = *(std::string *)(a10 + 8);
  v126 = *(_DWORD *)(a10 + 32);
  v273 = v126;
  v271 = off_24C335AF8;
  v124 = *(_QWORD *)(a10 + 36);
  v274 = v124;
  if (*(char *)(a11 + 31) < 0)
    std::string::__init_copy_ctor_external(&v268, *(const std::string::value_type **)(a11 + 8), *(_QWORD *)(a11 + 16));
  else
    v268 = *(std::string *)(a11 + 8);
  v122 = *(_DWORD *)(a11 + 32);
  v269 = v122;
  v267 = off_24C335AF8;
  v121 = *(_QWORD *)(a11 + 36);
  v270 = v121;
  if (*(char *)(a12 + 31) < 0)
    std::string::__init_copy_ctor_external(&v264, *(const std::string::value_type **)(a12 + 8), *(_QWORD *)(a12 + 16));
  else
    v264 = *(std::string *)(a12 + 8);
  v120 = *(_DWORD *)(a12 + 32);
  v265 = v120;
  v263 = off_24C335AF8;
  v119 = *(_QWORD *)(a12 + 36);
  v266 = v119;
  if (*(char *)(a13 + 31) < 0)
    std::string::__init_copy_ctor_external(&v260, *(const std::string::value_type **)(a13 + 8), *(_QWORD *)(a13 + 16));
  else
    v260 = *(std::string *)(a13 + 8);
  v118 = *(_DWORD *)(a13 + 32);
  v261 = v118;
  v259 = off_24C335AF8;
  v117 = *(_QWORD *)(a13 + 36);
  v262 = v117;
  if (*(char *)(a14 + 31) < 0)
    std::string::__init_copy_ctor_external(&v256, *(const std::string::value_type **)(a14 + 8), *(_QWORD *)(a14 + 16));
  else
    v256 = *(std::string *)(a14 + 8);
  v116 = *(_DWORD *)(a14 + 32);
  v257 = v116;
  v255 = off_24C335AF8;
  v115 = *(_QWORD *)(a14 + 36);
  v258 = v115;
  if (*(char *)(a15 + 31) < 0)
    std::string::__init_copy_ctor_external(&v252, *(const std::string::value_type **)(a15 + 8), *(_QWORD *)(a15 + 16));
  else
    v252 = *(std::string *)(a15 + 8);
  v114 = *(_DWORD *)(a15 + 32);
  v253 = v114;
  v251 = off_24C335AF8;
  v113 = *(_QWORD *)(a15 + 36);
  v254 = v113;
  v246 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a16 + 31) < 0)
    std::string::__init_copy_ctor_external(&v247, *(const std::string::value_type **)(a16 + 8), *(_QWORD *)(a16 + 16));
  else
    v247 = *(std::string *)(a16 + 8);
  v248 = *(_DWORD *)(a16 + 32);
  v246 = &off_24C335AB8;
  v249 = *(_BYTE *)(a16 + 36);
  if (*(char *)(a16 + 63) < 0)
    std::string::__init_copy_ctor_external(&v250, *(const std::string::value_type **)(a16 + 40), *(_QWORD *)(a16 + 48));
  else
    v250 = *(std::string *)(a16 + 40);
  v241 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a17 + 31) < 0)
    std::string::__init_copy_ctor_external(&v242, *(const std::string::value_type **)(a17 + 8), *(_QWORD *)(a17 + 16));
  else
    v242 = *(std::string *)(a17 + 8);
  v243 = *(_DWORD *)(a17 + 32);
  v241 = &off_24C335AB8;
  v244 = *(_BYTE *)(a17 + 36);
  if (*(char *)(a17 + 63) < 0)
    std::string::__init_copy_ctor_external(&v245, *(const std::string::value_type **)(a17 + 40), *(_QWORD *)(a17 + 48));
  else
    v245 = *(std::string *)(a17 + 40);
  v236 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a18 + 31) < 0)
    std::string::__init_copy_ctor_external(&v237, *(const std::string::value_type **)(a18 + 8), *(_QWORD *)(a18 + 16));
  else
    v237 = *(std::string *)(a18 + 8);
  v238 = *(_DWORD *)(a18 + 32);
  v236 = &off_24C335AB8;
  v239 = *(_BYTE *)(a18 + 36);
  if (*(char *)(a18 + 63) < 0)
    std::string::__init_copy_ctor_external(&v240, *(const std::string::value_type **)(a18 + 40), *(_QWORD *)(a18 + 48));
  else
    v240 = *(std::string *)(a18 + 40);
  if (*(char *)(a19 + 31) < 0)
    std::string::__init_copy_ctor_external(&v233, *(const std::string::value_type **)(a19 + 8), *(_QWORD *)(a19 + 16));
  else
    v233 = *(std::string *)(a19 + 8);
  v61 = *(_DWORD *)(a19 + 32);
  v234 = v61;
  v232 = off_24C335AF8;
  v110 = *(_QWORD *)(a19 + 36);
  v235 = v110;
  if (*(char *)(a20 + 31) < 0)
    std::string::__init_copy_ctor_external(&v228, *(const std::string::value_type **)(a20 + 8), *(_QWORD *)(a20 + 16));
  else
    v228 = *(std::string *)(a20 + 8);
  v62 = *(_DWORD *)(a20 + 32);
  v227 = off_24C335B18;
  v230 = *(_QWORD *)(a20 + 36);
  v63 = *(_DWORD *)(a20 + 44);
  v229 = v62;
  v231 = v63;
  if (*(char *)(a21 + 31) < 0)
    std::string::__init_copy_ctor_external(&v224, *(const std::string::value_type **)(a21 + 8), *(_QWORD *)(a21 + 16));
  else
    v224 = *(std::string *)(a21 + 8);
  v108 = *(_DWORD *)(a21 + 32);
  v225 = v108;
  v223 = off_24C335AF8;
  v107 = *(_QWORD *)(a21 + 36);
  v226 = v107;
  v218 = (uint64_t (**)())off_24C335D90;
  v109 = v61;
  if (*(char *)(a22 + 31) < 0)
    std::string::__init_copy_ctor_external(&v219, *(const std::string::value_type **)(a22 + 8), *(_QWORD *)(a22 + 16));
  else
    v219 = *(std::string *)(a22 + 8);
  v220 = *(_DWORD *)(a22 + 32);
  v218 = &off_24C335AB8;
  v221 = *(_BYTE *)(a22 + 36);
  if (*(char *)(a22 + 63) < 0)
    std::string::__init_copy_ctor_external(&v222, *(const std::string::value_type **)(a22 + 40), *(_QWORD *)(a22 + 48));
  else
    v222 = *(std::string *)(a22 + 40);
  if (*(char *)(a23 + 31) < 0)
    std::string::__init_copy_ctor_external(&v214, *(const std::string::value_type **)(a23 + 8), *(_QWORD *)(a23 + 16));
  else
    v214 = *(std::string *)(a23 + 8);
  v64 = *(_DWORD *)(a23 + 32);
  v213 = off_24C335B18;
  v216 = *(_QWORD *)(a23 + 36);
  v65 = *(_DWORD *)(a23 + 44);
  v106 = v64;
  v215 = v64;
  v217 = v65;
  v208 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a24 + 31) < 0)
    std::string::__init_copy_ctor_external(&v209, *(const std::string::value_type **)(a24 + 8), *(_QWORD *)(a24 + 16));
  else
    v209 = *(std::string *)(a24 + 8);
  v210 = *(_DWORD *)(a24 + 32);
  v208 = &off_24C335AB8;
  v211 = *(_BYTE *)(a24 + 36);
  if (*(char *)(a24 + 63) < 0)
    std::string::__init_copy_ctor_external(&v212, *(const std::string::value_type **)(a24 + 40), *(_QWORD *)(a24 + 48));
  else
    v212 = *(std::string *)(a24 + 40);
  v203 = (uint64_t (**)())off_24C335D90;
  v111 = v62;
  if (*(char *)(a25 + 31) < 0)
    std::string::__init_copy_ctor_external(&v204, *(const std::string::value_type **)(a25 + 8), *(_QWORD *)(a25 + 16));
  else
    v204 = *(std::string *)(a25 + 8);
  v205 = *(_DWORD *)(a25 + 32);
  v203 = &off_24C335AB8;
  v206 = *(_BYTE *)(a25 + 36);
  if (*(char *)(a25 + 63) < 0)
    std::string::__init_copy_ctor_external(&v207, *(const std::string::value_type **)(a25 + 40), *(_QWORD *)(a25 + 48));
  else
    v207 = *(std::string *)(a25 + 40);
  if (*(char *)(a26 + 31) < 0)
    std::string::__init_copy_ctor_external(&v200, *(const std::string::value_type **)(a26 + 8), *(_QWORD *)(a26 + 16));
  else
    v200 = *(std::string *)(a26 + 8);
  v104 = *(_DWORD *)(a26 + 32);
  v201 = v104;
  v199 = off_24C335AF8;
  v103 = *(_QWORD *)(a26 + 36);
  v202 = v103;
  if (*(char *)(a27 + 31) < 0)
    std::string::__init_copy_ctor_external(&v195, *(const std::string::value_type **)(a27 + 8), *(_QWORD *)(a27 + 16));
  else
    v195 = *(std::string *)(a27 + 8);
  v66 = *(_DWORD *)(a27 + 32);
  v194 = off_24C335B18;
  v197 = *(_QWORD *)(a27 + 36);
  v67 = *(_DWORD *)(a27 + 44);
  v196 = v66;
  v198 = v67;
  if (*(char *)(a28 + 31) < 0)
    std::string::__init_copy_ctor_external(&v191, *(const std::string::value_type **)(a28 + 8), *(_QWORD *)(a28 + 16));
  else
    v191 = *(std::string *)(a28 + 8);
  v102 = *(_DWORD *)(a28 + 32);
  v192 = v102;
  v190 = off_24C335AF8;
  v68 = *(_QWORD *)(a28 + 36);
  v193 = v68;
  v185 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a29 + 31) < 0)
    std::string::__init_copy_ctor_external(&v186, *(const std::string::value_type **)(a29 + 8), *(_QWORD *)(a29 + 16));
  else
    v186 = *(std::string *)(a29 + 8);
  v187 = *(_DWORD *)(a29 + 32);
  v185 = &off_24C335AB8;
  v188 = *(_BYTE *)(a29 + 36);
  v101 = v68;
  if (*(char *)(a29 + 63) < 0)
    std::string::__init_copy_ctor_external(&v189, *(const std::string::value_type **)(a29 + 40), *(_QWORD *)(a29 + 48));
  else
    v189 = *(std::string *)(a29 + 40);
  if (*(char *)(a30 + 31) < 0)
    std::string::__init_copy_ctor_external(&v182, *(const std::string::value_type **)(a30 + 8), *(_QWORD *)(a30 + 16));
  else
    v182 = *(std::string *)(a30 + 8);
  v100 = *(_DWORD *)(a30 + 32);
  v183 = v100;
  v181 = off_24C335AF8;
  v99 = *(_QWORD *)(a30 + 36);
  v184 = v99;
  if (*(char *)(a31 + 31) < 0)
    std::string::__init_copy_ctor_external(&v177, *(const std::string::value_type **)(a31 + 8), *(_QWORD *)(a31 + 16));
  else
    v177 = *(std::string *)(a31 + 8);
  v69 = *(_DWORD *)(a31 + 32);
  v176 = off_24C335B18;
  v179 = *(_QWORD *)(a31 + 36);
  v70 = *(_DWORD *)(a31 + 44);
  v98 = v69;
  v178 = v69;
  v180 = v70;
  if (*(char *)(a32 + 31) < 0)
    std::string::__init_copy_ctor_external(&v173, *(const std::string::value_type **)(a32 + 8), *(_QWORD *)(a32 + 16));
  else
    v173 = *(std::string *)(a32 + 8);
  v97 = *(_DWORD *)(a32 + 32);
  v174 = v97;
  v172 = off_24C335AF8;
  v96 = *(_QWORD *)(a32 + 36);
  v175 = v96;
  if (*(char *)(a33 + 31) < 0)
    std::string::__init_copy_ctor_external(&v169, *(const std::string::value_type **)(a33 + 8), *(_QWORD *)(a33 + 16));
  else
    v169 = *(std::string *)(a33 + 8);
  v95 = *(_DWORD *)(a33 + 32);
  v170 = v95;
  v168 = off_24C335AF8;
  v94 = *(_QWORD *)(a33 + 36);
  v171 = v94;
  if (*(char *)(a34 + 31) < 0)
    std::string::__init_copy_ctor_external(&v165, *(const std::string::value_type **)(a34 + 8), *(_QWORD *)(a34 + 16));
  else
    v165 = *(std::string *)(a34 + 8);
  v93 = *(_DWORD *)(a34 + 32);
  v166 = v93;
  v164 = off_24C335AF8;
  v92 = *(_QWORD *)(a34 + 36);
  v167 = v92;
  v159 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a35 + 31) < 0)
    std::string::__init_copy_ctor_external(&v160, *(const std::string::value_type **)(a35 + 8), *(_QWORD *)(a35 + 16));
  else
    v160 = *(std::string *)(a35 + 8);
  v161 = *(_DWORD *)(a35 + 32);
  v159 = &off_24C335AB8;
  v162 = *(_BYTE *)(a35 + 36);
  if (*(char *)(a35 + 63) < 0)
    std::string::__init_copy_ctor_external(&v163, *(const std::string::value_type **)(a35 + 40), *(_QWORD *)(a35 + 48));
  else
    v163 = *(std::string *)(a35 + 40);
  v154 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a36 + 31) < 0)
    std::string::__init_copy_ctor_external(&v155, *(const std::string::value_type **)(a36 + 8), *(_QWORD *)(a36 + 16));
  else
    v155 = *(std::string *)(a36 + 8);
  v156 = *(_DWORD *)(a36 + 32);
  v154 = &off_24C335AB8;
  v157 = *(_BYTE *)(a36 + 36);
  if (*(char *)(a36 + 63) < 0)
    std::string::__init_copy_ctor_external(&v158, *(const std::string::value_type **)(a36 + 40), *(_QWORD *)(a36 + 48));
  else
    v158 = *(std::string *)(a36 + 40);
  if (*(char *)(a37 + 31) < 0)
    std::string::__init_copy_ctor_external(&v150, *(const std::string::value_type **)(a37 + 8), *(_QWORD *)(a37 + 16));
  else
    v150 = *(std::string *)(a37 + 8);
  v71 = *(_DWORD *)(a37 + 32);
  v149 = off_24C335B18;
  v152 = *(_QWORD *)(a37 + 36);
  v72 = *(_DWORD *)(a37 + 44);
  v91 = v71;
  v151 = v71;
  v153 = v72;
  v145 = (uint64_t (**)())off_24C335D90;
  if (*(char *)(a38 + 31) < 0)
    std::string::__init_copy_ctor_external(&v146, *(const std::string::value_type **)(a38 + 8), *(_QWORD *)(a38 + 16));
  else
    v146 = *(std::string *)(a38 + 8);
  v90 = *(_DWORD *)(a38 + 32);
  v147 = v90;
  v145 = off_24C335AF8;
  v89 = *(_QWORD *)(a38 + 36);
  v148 = v89;
  if (*(char *)(a39 + 31) < 0)
    std::string::__init_copy_ctor_external(&v142, *(const std::string::value_type **)(a39 + 8), *(_QWORD *)(a39 + 16));
  else
    v142 = *(std::string *)(a39 + 8);
  v88 = *(_DWORD *)(a39 + 32);
  v143 = v88;
  v73 = *(_QWORD *)(a39 + 36);
  v144 = v73;
  v466 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v467, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
  else
    v467 = __s;
  v468 = v140;
  v466 = off_24C335B18;
  v469 = v302;
  v470 = v303;
  v461 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v295.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v462, v295.__r_.__value_.__l.__data_, v295.__r_.__value_.__l.__size_);
  else
    v462 = v295;
  v463 = v296;
  v461 = &off_24C335AB8;
  v464 = v297;
  if (SHIBYTE(v298.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v465, v298.__r_.__value_.__l.__data_, v298.__r_.__value_.__l.__size_);
  else
    v465 = v298;
  v456 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v290.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v457, v290.__r_.__value_.__l.__data_, v290.__r_.__value_.__l.__size_);
  else
    v457 = v290;
  v458 = v291;
  v456 = &off_24C335AB8;
  v459 = v292;
  if (SHIBYTE(v293.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v460, v293.__r_.__value_.__l.__data_, v293.__r_.__value_.__l.__size_);
  else
    v460 = v293;
  v451 = (uint64_t (**)())off_24C335D90;
  v87 = v73;
  if (SHIBYTE(v285.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v452, v285.__r_.__value_.__l.__data_, v285.__r_.__value_.__l.__size_);
  else
    v452 = v285;
  v451 = off_24C335B18;
  v454 = v287;
  v453 = v136;
  v455 = v288;
  v446 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v280.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v447, v280.__r_.__value_.__l.__data_, v280.__r_.__value_.__l.__size_);
  else
    v447 = v280;
  v446 = off_24C335B18;
  v449 = v282;
  v448 = v134;
  v450 = v283;
  v442 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v276.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v443, v276.__r_.__value_.__l.__data_, v276.__r_.__value_.__l.__size_);
  else
    v443 = v276;
  v444 = v131;
  v442 = off_24C335AF8;
  v445 = v129;
  v438 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v272.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v439, v272.__r_.__value_.__l.__data_, v272.__r_.__value_.__l.__size_);
  else
    v439 = v272;
  v440 = v126;
  v438 = off_24C335AF8;
  v441 = v124;
  v434 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v268.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v435, v268.__r_.__value_.__l.__data_, v268.__r_.__value_.__l.__size_);
  else
    v435 = v268;
  v436 = v122;
  v434 = off_24C335AF8;
  v437 = v121;
  v430 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v264.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v431, v264.__r_.__value_.__l.__data_, v264.__r_.__value_.__l.__size_);
  else
    v431 = v264;
  v432 = v120;
  v430 = off_24C335AF8;
  v433 = v119;
  v426 = (uint64_t (**)())off_24C335D90;
  v74 = SHIBYTE(v260.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v260.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v427, v260.__r_.__value_.__l.__data_, v260.__r_.__value_.__l.__size_);
  else
    v427 = v260;
  v428 = v118;
  v426 = off_24C335AF8;
  v429 = v117;
  v422 = (uint64_t (**)())off_24C335D90;
  v75 = SHIBYTE(v256.__r_.__value_.__r.__words[2]);
  v141 = v74;
  if (SHIBYTE(v256.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v423, v256.__r_.__value_.__l.__data_, v256.__r_.__value_.__l.__size_);
  else
    v423 = v256;
  v424 = v116;
  v422 = off_24C335AF8;
  v425 = v115;
  v418 = (uint64_t (**)())off_24C335D90;
  v76 = SHIBYTE(v252.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v252.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v419, v252.__r_.__value_.__l.__data_, v252.__r_.__value_.__l.__size_);
  else
    v419 = v252;
  v420 = v114;
  v418 = off_24C335AF8;
  v421 = v113;
  v413 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v247.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v414, v247.__r_.__value_.__l.__data_, v247.__r_.__value_.__l.__size_);
  else
    v414 = v247;
  v415 = v248;
  v413 = &off_24C335AB8;
  v416 = v249;
  if (SHIBYTE(v250.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v417, v250.__r_.__value_.__l.__data_, v250.__r_.__value_.__l.__size_);
  else
    v417 = v250;
  v408 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v242.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v409, v242.__r_.__value_.__l.__data_, v242.__r_.__value_.__l.__size_);
  else
    v409 = v242;
  v410 = v243;
  v408 = &off_24C335AB8;
  v411 = v244;
  if (SHIBYTE(v245.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v412, v245.__r_.__value_.__l.__data_, v245.__r_.__value_.__l.__size_);
  else
    v412 = v245;
  v403 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v237.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v404, v237.__r_.__value_.__l.__data_, v237.__r_.__value_.__l.__size_);
  else
    v404 = v237;
  v405 = v238;
  v403 = &off_24C335AB8;
  v406 = v239;
  if (SHIBYTE(v240.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v407, v240.__r_.__value_.__l.__data_, v240.__r_.__value_.__l.__size_);
  else
    v407 = v240;
  v399 = (uint64_t (**)())off_24C335D90;
  v77 = SHIBYTE(v233.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v233.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v400, v233.__r_.__value_.__l.__data_, v233.__r_.__value_.__l.__size_);
  else
    v400 = v233;
  v401 = v109;
  v399 = off_24C335AF8;
  v402 = v110;
  v394 = (uint64_t (**)())off_24C335D90;
  v139 = SHIBYTE(v228.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v228.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v395, v228.__r_.__value_.__l.__data_, v228.__r_.__value_.__l.__size_);
  else
    v395 = v228;
  v394 = off_24C335B18;
  v397 = v230;
  v396 = v111;
  v398 = v231;
  v390 = (uint64_t (**)())off_24C335D90;
  v78 = SHIBYTE(v224.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v224.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v391, v224.__r_.__value_.__l.__data_, v224.__r_.__value_.__l.__size_);
  else
    v391 = v224;
  v392 = v108;
  v390 = off_24C335AF8;
  v393 = v107;
  v385 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v219.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v386, v219.__r_.__value_.__l.__data_, v219.__r_.__value_.__l.__size_);
  else
    v386 = v219;
  v387 = v220;
  v385 = &off_24C335AB8;
  v388 = v221;
  if (SHIBYTE(v222.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v389, v222.__r_.__value_.__l.__data_, v222.__r_.__value_.__l.__size_);
  else
    v389 = v222;
  v380 = (uint64_t (**)())off_24C335D90;
  v138 = SHIBYTE(v214.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v214.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v381, v214.__r_.__value_.__l.__data_, v214.__r_.__value_.__l.__size_);
  else
    v381 = v214;
  v380 = off_24C335B18;
  v383 = v216;
  v382 = v106;
  v384 = v217;
  v375 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v209.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v376, v209.__r_.__value_.__l.__data_, v209.__r_.__value_.__l.__size_);
  else
    v376 = v209;
  v377 = v210;
  v375 = &off_24C335AB8;
  v378 = v211;
  if (SHIBYTE(v212.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v379, v212.__r_.__value_.__l.__data_, v212.__r_.__value_.__l.__size_);
  else
    v379 = v212;
  v370 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v204.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v371, v204.__r_.__value_.__l.__data_, v204.__r_.__value_.__l.__size_);
  else
    v371 = v204;
  v372 = v205;
  v370 = &off_24C335AB8;
  v373 = v206;
  if (SHIBYTE(v207.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v374, v207.__r_.__value_.__l.__data_, v207.__r_.__value_.__l.__size_);
  else
    v374 = v207;
  v366 = (uint64_t (**)())off_24C335D90;
  v137 = SHIBYTE(v200.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v200.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v367, v200.__r_.__value_.__l.__data_, v200.__r_.__value_.__l.__size_);
  else
    v367 = v200;
  v368 = v104;
  v366 = off_24C335AF8;
  v369 = v103;
  v361 = (uint64_t (**)())off_24C335D90;
  v135 = SHIBYTE(v195.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v195.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v362, v195.__r_.__value_.__l.__data_, v195.__r_.__value_.__l.__size_);
  else
    v362 = v195;
  v361 = off_24C335B18;
  v364 = v197;
  v363 = v66;
  v365 = v198;
  v357 = (uint64_t (**)())off_24C335D90;
  v133 = SHIBYTE(v191.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v191.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v358, v191.__r_.__value_.__l.__data_, v191.__r_.__value_.__l.__size_);
  else
    v358 = v191;
  v359 = v102;
  v357 = off_24C335AF8;
  v360 = v101;
  v352 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v186.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v353, v186.__r_.__value_.__l.__data_, v186.__r_.__value_.__l.__size_);
  else
    v353 = v186;
  v354 = v187;
  v352 = &off_24C335AB8;
  v355 = v188;
  if (SHIBYTE(v189.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v356, v189.__r_.__value_.__l.__data_, v189.__r_.__value_.__l.__size_);
  else
    v356 = v189;
  v348 = (uint64_t (**)())off_24C335D90;
  v132 = SHIBYTE(v182.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v182.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v349, v182.__r_.__value_.__l.__data_, v182.__r_.__value_.__l.__size_);
  else
    v349 = v182;
  v350 = v100;
  v348 = off_24C335AF8;
  v351 = v99;
  v343 = (uint64_t (**)())off_24C335D90;
  v130 = SHIBYTE(v177.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v177.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v344, v177.__r_.__value_.__l.__data_, v177.__r_.__value_.__l.__size_);
  else
    v344 = v177;
  v343 = off_24C335B18;
  v346 = v179;
  v345 = v98;
  v347 = v180;
  v339 = (uint64_t (**)())off_24C335D90;
  v128 = SHIBYTE(v173.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v173.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v340, v173.__r_.__value_.__l.__data_, v173.__r_.__value_.__l.__size_);
  else
    v340 = v173;
  v341 = v97;
  v339 = off_24C335AF8;
  v342 = v96;
  v335 = (uint64_t (**)())off_24C335D90;
  v127 = SHIBYTE(v169.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v169.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v336, v169.__r_.__value_.__l.__data_, v169.__r_.__value_.__l.__size_);
  else
    v336 = v169;
  v337 = v95;
  v335 = off_24C335AF8;
  v338 = v94;
  v331 = (uint64_t (**)())off_24C335D90;
  v125 = SHIBYTE(v165.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v165.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v332, v165.__r_.__value_.__l.__data_, v165.__r_.__value_.__l.__size_);
  else
    v332 = v165;
  v333 = v93;
  v331 = off_24C335AF8;
  v334 = v92;
  v326 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v160.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v327, v160.__r_.__value_.__l.__data_, v160.__r_.__value_.__l.__size_);
  else
    v327 = v160;
  v328 = v161;
  v326 = &off_24C335AB8;
  v329 = v162;
  if (SHIBYTE(v163.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v330, v163.__r_.__value_.__l.__data_, v163.__r_.__value_.__l.__size_);
  else
    v330 = v163;
  v321 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v155.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v322, v155.__r_.__value_.__l.__data_, v155.__r_.__value_.__l.__size_);
  else
    v322 = v155;
  v323 = v156;
  v321 = &off_24C335AB8;
  v324 = v157;
  if (SHIBYTE(v158.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v325, v158.__r_.__value_.__l.__data_, v158.__r_.__value_.__l.__size_);
  else
    v325 = v158;
  v316 = (uint64_t (**)())off_24C335D90;
  v79 = SHIBYTE(v150.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v150.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v317, v150.__r_.__value_.__l.__data_, v150.__r_.__value_.__l.__size_);
  else
    v317 = v150;
  v316 = off_24C335B18;
  v319 = v152;
  v318 = v91;
  v320 = v153;
  v312 = (uint64_t (**)())off_24C335D90;
  v80 = SHIBYTE(v146.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v146.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v313, v146.__r_.__value_.__l.__data_, v146.__r_.__value_.__l.__size_);
  else
    v313 = v146;
  v314 = v90;
  v312 = off_24C335AF8;
  v315 = v89;
  v308 = (uint64_t (**)())off_24C335D90;
  v81 = SHIBYTE(v142.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v142.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&__p, v142.__r_.__value_.__l.__data_, v142.__r_.__value_.__l.__size_);
  else
    __p = v142;
  v310 = v88;
  v308 = off_24C335AF8;
  v311 = v87;
  mediaplatform::DatabaseColumnTuple<51ul,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<std::string>,mediaplatform::DatabaseColumn<long long>,mediaplatform::DatabaseColumn<int>,mediaplatform::DatabaseColumn<int>>::DatabaseColumnTuple(v112, (uint64_t)&v466, (uint64_t)&v461, (uint64_t)&v456, (uint64_t)&v451, (uint64_t)&v446, (uint64_t)&v442, (uint64_t)&v438, (uint64_t)&v434, (uint64_t)&v430, (uint64_t)&v426, (uint64_t)&v422, (uint64_t)&v418, (uint64_t)&v413, (uint64_t)&v408, (uint64_t)&v403, (uint64_t)&v399, (uint64_t)&v394, (uint64_t)&v390,
    (uint64_t)&v385,
    (uint64_t)&v380,
    (uint64_t)&v375,
    (uint64_t)&v370,
    (uint64_t)&v366,
    (uint64_t)&v361,
    (uint64_t)&v357,
    (uint64_t)&v352,
    (uint64_t)&v348,
    (uint64_t)&v343,
    (uint64_t)&v339,
    (uint64_t)&v335,
    (uint64_t)&v331,
    (uint64_t)&v326,
    (uint64_t)&v321,
    (uint64_t)&v316,
    (uint64_t)&v312,
    (uint64_t)&v308);
  v308 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v312 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v313.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v313.__r_.__value_.__l.__data_);
  v316 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v317.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v317.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v321);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v326);
  v331 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v332.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v332.__r_.__value_.__l.__data_);
  v335 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v336.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v336.__r_.__value_.__l.__data_);
  v339 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v340.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v340.__r_.__value_.__l.__data_);
  v343 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v344.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v344.__r_.__value_.__l.__data_);
  v348 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v349.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v349.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v352);
  v357 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v358.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v358.__r_.__value_.__l.__data_);
  v361 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v362.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v362.__r_.__value_.__l.__data_);
  v366 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v367.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v367.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v370);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v375);
  v380 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v381.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v381.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v385);
  v390 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v391.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v391.__r_.__value_.__l.__data_);
  v394 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v395.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v395.__r_.__value_.__l.__data_);
  v399 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v400.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v400.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v403);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v408);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v413);
  v418 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v419.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v419.__r_.__value_.__l.__data_);
  v422 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v423.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v423.__r_.__value_.__l.__data_);
  v426 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v427.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v427.__r_.__value_.__l.__data_);
  v430 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v431.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v431.__r_.__value_.__l.__data_);
  v434 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v435.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v435.__r_.__value_.__l.__data_);
  v438 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v439.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v439.__r_.__value_.__l.__data_);
  v442 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v443.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v443.__r_.__value_.__l.__data_);
  v446 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v447.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v447.__r_.__value_.__l.__data_);
  v451 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v452.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v452.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v456);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v461);
  v466 = (uint64_t (**)())off_24C335D90;
  if (SHIBYTE(v467.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v467.__r_.__value_.__l.__data_);
  v123 = v75;
  *(_QWORD *)(v112 + 1904) = off_24C335D90;
  v82 = (std::string *)(v112 + 1912);
  v83 = SHIBYTE(v305.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v305.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v82, v305.__r_.__value_.__l.__data_, v305.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v82->__r_.__value_.__l.__data_ = *(_OWORD *)&v305.__r_.__value_.__l.__data_;
    *(_QWORD *)(v112 + 1928) = *((_QWORD *)&v305.__r_.__value_.__l + 2);
  }
  *(_DWORD *)(v112 + 1936) = v306;
  *(_QWORD *)(v112 + 1904) = off_24C335AF8;
  *(_QWORD *)(v112 + 1940) = v307;
  if (v81 < 0)
    operator delete(v142.__r_.__value_.__l.__data_);
  v145 = (uint64_t (**)())off_24C335D90;
  if (v80 < 0)
    operator delete(v146.__r_.__value_.__l.__data_);
  v149 = (uint64_t (**)())off_24C335D90;
  if (v79 < 0)
    operator delete(v150.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v154);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v159);
  if (v125 < 0)
    operator delete(v165.__r_.__value_.__l.__data_);
  if (v127 < 0)
    operator delete(v169.__r_.__value_.__l.__data_);
  if (v128 < 0)
    operator delete(v173.__r_.__value_.__l.__data_);
  if (v130 < 0)
    operator delete(v177.__r_.__value_.__l.__data_);
  if (v132 < 0)
    operator delete(v182.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v185);
  if (v133 < 0)
    operator delete(v191.__r_.__value_.__l.__data_);
  if (v135 < 0)
    operator delete(v195.__r_.__value_.__l.__data_);
  if (v137 < 0)
    operator delete(v200.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v203);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v208);
  if (v138 < 0)
    operator delete(v214.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v218);
  if (v78 < 0)
    operator delete(v224.__r_.__value_.__l.__data_);
  if (v139 < 0)
  {
    operator delete(v228.__r_.__value_.__l.__data_);
    if ((v77 & 0x80000000) == 0)
      goto LABEL_367;
  }
  else if ((v77 & 0x80000000) == 0)
  {
    goto LABEL_367;
  }
  operator delete(v233.__r_.__value_.__l.__data_);
LABEL_367:
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v236);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v241);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v246);
  if (v76 < 0)
    operator delete(v252.__r_.__value_.__l.__data_);
  if (v123 < 0)
    operator delete(v256.__r_.__value_.__l.__data_);
  if (v141 < 0)
    operator delete(v260.__r_.__value_.__l.__data_);
  if (SHIBYTE(v264.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v264.__r_.__value_.__l.__data_);
  if (SHIBYTE(v268.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v268.__r_.__value_.__l.__data_);
  if (SHIBYTE(v272.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v272.__r_.__value_.__l.__data_);
  if (SHIBYTE(v276.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v276.__r_.__value_.__l.__data_);
  if (SHIBYTE(v280.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v280.__r_.__value_.__l.__data_);
  if (SHIBYTE(v285.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v285.__r_.__value_.__l.__data_);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v289);
  mediaplatform::DatabaseColumn<std::string>::~DatabaseColumn((uint64_t)&v294);
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__s.__r_.__value_.__l.__data_);
    if ((v83 & 0x80000000) == 0)
      goto LABEL_387;
  }
  else if ((v83 & 0x80000000) == 0)
  {
    goto LABEL_387;
  }
  operator delete(v305.__r_.__value_.__l.__data_);
LABEL_387:
  *(_QWORD *)(v112 + 1952) = off_24C335D90;
  v84 = (std::string *)(v112 + 1960);
  if (*(char *)(v105 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v84, *(const std::string::value_type **)(v105 + 8), *(_QWORD *)(v105 + 16));
  }
  else
  {
    v85 = *(_OWORD *)(v105 + 8);
    *(_QWORD *)(v112 + 1976) = *(_QWORD *)(v105 + 24);
    *(_OWORD *)&v84->__r_.__value_.__l.__data_ = v85;
  }
  *(_DWORD *)(v112 + 1984) = *(_DWORD *)(v105 + 32);
  *(_QWORD *)(v112 + 1952) = off_24C335AF8;
  *(_QWORD *)(v112 + 1988) = *(_QWORD *)(v105 + 36);
  return v112;
}

